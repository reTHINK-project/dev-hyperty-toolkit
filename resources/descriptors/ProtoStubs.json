{
  "default": {
    "cguid": "4-e375e3a3-4fc6-ba99-f624-3c4b8623d4aa0",
    "type": "ProtoStubs",
    "version": 0.6,
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "VertxProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "configuration": {
      "url": "wss://msg-node.localhost:9090/ws"
    },
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "interworking": false,
    "description": "Description of VertxProtoStub",
    "objectName": "VertxProtoStub",
    "accessControlPolicy": "somePolicy"
  },
  "VertxProtoStubNode": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "VertxProtoStubNode",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "4-e375e3a3-4fc6-ba99-f624-3c4b8623d4aa1",
    "version": 0.2,
    "description": "Description of VertxProtoStubNode",
    "language": "Javascript",
    "type": "ProtoStubs",
    "objectName": "VertxProtoStubNode",
    "configuration": {
      "url": "wss://msg-node.localhost:9090/ws"
    },
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "constraints": "",
    "dataObjects": []
  },
  "P2PHandlerProtoStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKIC8qIGVzbGludC1lbnYgbm9kZSAqLwondXNlIHN0cmljdCc7CgovLyBTRFAgaGVscGVycy4KdmFyIFNEUFV0aWxzID0ge307CgovLyBHZW5lcmF0ZSBhbiBhbHBoYW51bWVyaWMgaWRlbnRpZmllciBmb3IgY25hbWUgb3IgbWlkcy4KLy8gVE9ETzogdXNlIFVVSURzIGluc3RlYWQ/IGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2plZC85ODI4ODMKU0RQVXRpbHMuZ2VuZXJhdGVJZGVudGlmaWVyID0gZnVuY3Rpb24oKSB7CiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCAxMCk7Cn07CgovLyBUaGUgUlRDUCBDTkFNRSB1c2VkIGJ5IGFsbCBwZWVyY29ubmVjdGlvbnMgZnJvbSB0aGUgc2FtZSBKUy4KU0RQVXRpbHMubG9jYWxDTmFtZSA9IFNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllcigpOwoKLy8gU3BsaXRzIFNEUCBpbnRvIGxpbmVzLCBkZWFsaW5nIHdpdGggYm90aCBDUkxGIGFuZCBMRi4KU0RQVXRpbHMuc3BsaXRMaW5lcyA9IGZ1bmN0aW9uKGJsb2IpIHsKICByZXR1cm4gYmxvYi50cmltKCkuc3BsaXQoJ1xuJykubWFwKGZ1bmN0aW9uKGxpbmUpIHsKICAgIHJldHVybiBsaW5lLnRyaW0oKTsKICB9KTsKfTsKLy8gU3BsaXRzIFNEUCBpbnRvIHNlc3Npb25wYXJ0IGFuZCBtZWRpYXNlY3Rpb25zLiBFbnN1cmVzIENSTEYuClNEUFV0aWxzLnNwbGl0U2VjdGlvbnMgPSBmdW5jdGlvbihibG9iKSB7CiAgdmFyIHBhcnRzID0gYmxvYi5zcGxpdCgnXG5tPScpOwogIHJldHVybiBwYXJ0cy5tYXAoZnVuY3Rpb24ocGFydCwgaW5kZXgpIHsKICAgIHJldHVybiAoaW5kZXggPiAwID8gJ209JyArIHBhcnQgOiBwYXJ0KS50cmltKCkgKyAnXHJcbic7CiAgfSk7Cn07CgovLyBSZXR1cm5zIGxpbmVzIHRoYXQgc3RhcnQgd2l0aCBhIGNlcnRhaW4gcHJlZml4LgpTRFBVdGlscy5tYXRjaFByZWZpeCA9IGZ1bmN0aW9uKGJsb2IsIHByZWZpeCkgewogIHJldHVybiBTRFBVdGlscy5zcGxpdExpbmVzKGJsb2IpLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7CiAgICByZXR1cm4gbGluZS5pbmRleE9mKHByZWZpeCkgPT09IDA7CiAgfSk7Cn07CgovLyBQYXJzZXMgYW4gSUNFIGNhbmRpZGF0ZSBsaW5lLiBTYW1wbGUgaW5wdXQ6Ci8vIGNhbmRpZGF0ZTo3MDI3ODYzNTAgMiB1ZHAgNDE4MTk5MDIgOC44LjguOCA2MDc2OSB0eXAgcmVsYXkgcmFkZHIgOC44LjguOAovLyBycG9ydCA1NTk5NiIKU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUgPSBmdW5jdGlvbihsaW5lKSB7CiAgdmFyIHBhcnRzOwogIC8vIFBhcnNlIGJvdGggdmFyaWFudHMuCiAgaWYgKGxpbmUuaW5kZXhPZignYT1jYW5kaWRhdGU6JykgPT09IDApIHsKICAgIHBhcnRzID0gbGluZS5zdWJzdHJpbmcoMTIpLnNwbGl0KCcgJyk7CiAgfSBlbHNlIHsKICAgIHBhcnRzID0gbGluZS5zdWJzdHJpbmcoMTApLnNwbGl0KCcgJyk7CiAgfQoKICB2YXIgY2FuZGlkYXRlID0gewogICAgZm91bmRhdGlvbjogcGFydHNbMF0sCiAgICBjb21wb25lbnQ6IHBhcnRzWzFdLAogICAgcHJvdG9jb2w6IHBhcnRzWzJdLnRvTG93ZXJDYXNlKCksCiAgICBwcmlvcml0eTogcGFyc2VJbnQocGFydHNbM10sIDEwKSwKICAgIGlwOiBwYXJ0c1s0XSwKICAgIHBvcnQ6IHBhcnNlSW50KHBhcnRzWzVdLCAxMCksCiAgICAvLyBza2lwIHBhcnRzWzZdID09ICd0eXAnCiAgICB0eXBlOiBwYXJ0c1s3XQogIH07CgogIGZvciAodmFyIGkgPSA4OyBpIDwgcGFydHMubGVuZ3RoOyBpICs9IDIpIHsKICAgIHN3aXRjaCAocGFydHNbaV0pIHsKICAgICAgY2FzZSAncmFkZHInOgogICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyA9IHBhcnRzW2kgKyAxXTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSAncnBvcnQnOgogICAgICAgIGNhbmRpZGF0ZS5yZWxhdGVkUG9ydCA9IHBhcnNlSW50KHBhcnRzW2kgKyAxXSwgMTApOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlICd0Y3B0eXBlJzoKICAgICAgICBjYW5kaWRhdGUudGNwVHlwZSA9IHBhcnRzW2kgKyAxXTsKICAgICAgICBicmVhazsKICAgICAgZGVmYXVsdDogLy8gVW5rbm93biBleHRlbnNpb25zIGFyZSBzaWxlbnRseSBpZ25vcmVkLgogICAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gY2FuZGlkYXRlOwp9OwoKLy8gVHJhbnNsYXRlcyBhIGNhbmRpZGF0ZSBvYmplY3QgaW50byBTRFAgY2FuZGlkYXRlIGF0dHJpYnV0ZS4KU0RQVXRpbHMud3JpdGVDYW5kaWRhdGUgPSBmdW5jdGlvbihjYW5kaWRhdGUpIHsKICB2YXIgc2RwID0gW107CiAgc2RwLnB1c2goY2FuZGlkYXRlLmZvdW5kYXRpb24pOwogIHNkcC5wdXNoKGNhbmRpZGF0ZS5jb21wb25lbnQpOwogIHNkcC5wdXNoKGNhbmRpZGF0ZS5wcm90b2NvbC50b1VwcGVyQ2FzZSgpKTsKICBzZHAucHVzaChjYW5kaWRhdGUucHJpb3JpdHkpOwogIHNkcC5wdXNoKGNhbmRpZGF0ZS5pcCk7CiAgc2RwLnB1c2goY2FuZGlkYXRlLnBvcnQpOwoKICB2YXIgdHlwZSA9IGNhbmRpZGF0ZS50eXBlOwogIHNkcC5wdXNoKCd0eXAnKTsKICBzZHAucHVzaCh0eXBlKTsKICBpZiAodHlwZSAhPT0gJ2hvc3QnICYmIGNhbmRpZGF0ZS5yZWxhdGVkQWRkcmVzcyAmJgogICAgICBjYW5kaWRhdGUucmVsYXRlZFBvcnQpIHsKICAgIHNkcC5wdXNoKCdyYWRkcicpOwogICAgc2RwLnB1c2goY2FuZGlkYXRlLnJlbGF0ZWRBZGRyZXNzKTsgLy8gd2FzOiByZWxBZGRyCiAgICBzZHAucHVzaCgncnBvcnQnKTsKICAgIHNkcC5wdXNoKGNhbmRpZGF0ZS5yZWxhdGVkUG9ydCk7IC8vIHdhczogcmVsUG9ydAogIH0KICBpZiAoY2FuZGlkYXRlLnRjcFR5cGUgJiYgY2FuZGlkYXRlLnByb3RvY29sLnRvTG93ZXJDYXNlKCkgPT09ICd0Y3AnKSB7CiAgICBzZHAucHVzaCgndGNwdHlwZScpOwogICAgc2RwLnB1c2goY2FuZGlkYXRlLnRjcFR5cGUpOwogIH0KICByZXR1cm4gJ2NhbmRpZGF0ZTonICsgc2RwLmpvaW4oJyAnKTsKfTsKCi8vIFBhcnNlcyBhbiBydHBtYXAgbGluZSwgcmV0dXJucyBSVENSdHBDb2RkZWNQYXJhbWV0ZXJzLiBTYW1wbGUgaW5wdXQ6Ci8vIGE9cnRwbWFwOjExMSBvcHVzLzQ4MDAwLzIKU0RQVXRpbHMucGFyc2VSdHBNYXAgPSBmdW5jdGlvbihsaW5lKSB7CiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIoOSkuc3BsaXQoJyAnKTsKICB2YXIgcGFyc2VkID0gewogICAgcGF5bG9hZFR5cGU6IHBhcnNlSW50KHBhcnRzLnNoaWZ0KCksIDEwKSAvLyB3YXM6IGlkCiAgfTsKCiAgcGFydHMgPSBwYXJ0c1swXS5zcGxpdCgnLycpOwoKICBwYXJzZWQubmFtZSA9IHBhcnRzWzBdOwogIHBhcnNlZC5jbG9ja1JhdGUgPSBwYXJzZUludChwYXJ0c1sxXSwgMTApOyAvLyB3YXM6IGNsb2NrcmF0ZQogIC8vIHdhczogY2hhbm5lbHMKICBwYXJzZWQubnVtQ2hhbm5lbHMgPSBwYXJ0cy5sZW5ndGggPT09IDMgPyBwYXJzZUludChwYXJ0c1syXSwgMTApIDogMTsKICByZXR1cm4gcGFyc2VkOwp9OwoKLy8gR2VuZXJhdGUgYW4gYT1ydHBtYXAgbGluZSBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvcgovLyBSVENSdHBDb2RlY1BhcmFtZXRlcnMuClNEUFV0aWxzLndyaXRlUnRwTWFwID0gZnVuY3Rpb24oY29kZWMpIHsKICB2YXIgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTsKICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkgewogICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTsKICB9CiAgcmV0dXJuICdhPXJ0cG1hcDonICsgcHQgKyAnICcgKyBjb2RlYy5uYW1lICsgJy8nICsgY29kZWMuY2xvY2tSYXRlICsKICAgICAgKGNvZGVjLm51bUNoYW5uZWxzICE9PSAxID8gJy8nICsgY29kZWMubnVtQ2hhbm5lbHMgOiAnJykgKyAnXHJcbic7Cn07CgovLyBQYXJzZXMgYW4gYT1leHRtYXAgbGluZSAoaGVhZGVyZXh0ZW5zaW9uIGZyb20gUkZDIDUyODUpLiBTYW1wbGUgaW5wdXQ6Ci8vIGE9ZXh0bWFwOjIgdXJuOmlldGY6cGFyYW1zOnJ0cC1oZHJleHQ6dG9mZnNldApTRFBVdGlscy5wYXJzZUV4dG1hcCA9IGZ1bmN0aW9uKGxpbmUpIHsKICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cig5KS5zcGxpdCgnICcpOwogIHJldHVybiB7CiAgICBpZDogcGFyc2VJbnQocGFydHNbMF0sIDEwKSwKICAgIHVyaTogcGFydHNbMV0KICB9Owp9OwoKLy8gR2VuZXJhdGVzIGE9ZXh0bWFwIGxpbmUgZnJvbSBSVENSdHBIZWFkZXJFeHRlbnNpb25QYXJhbWV0ZXJzIG9yCi8vIFJUQ1J0cEhlYWRlckV4dGVuc2lvbi4KU0RQVXRpbHMud3JpdGVFeHRtYXAgPSBmdW5jdGlvbihoZWFkZXJFeHRlbnNpb24pIHsKICByZXR1cm4gJ2E9ZXh0bWFwOicgKyAoaGVhZGVyRXh0ZW5zaW9uLmlkIHx8IGhlYWRlckV4dGVuc2lvbi5wcmVmZXJyZWRJZCkgKwogICAgICAgJyAnICsgaGVhZGVyRXh0ZW5zaW9uLnVyaSArICdcclxuJzsKfTsKCi8vIFBhcnNlcyBhbiBmdG1wIGxpbmUsIHJldHVybnMgZGljdGlvbmFyeS4gU2FtcGxlIGlucHV0OgovLyBhPWZtdHA6OTYgdmJyPW9uO2NuZz1vbgovLyBBbHNvIGRlYWxzIHdpdGggdmJyPW9uOyBjbmc9b24KU0RQVXRpbHMucGFyc2VGbXRwID0gZnVuY3Rpb24obGluZSkgewogIHZhciBwYXJzZWQgPSB7fTsKICB2YXIga3Y7CiAgdmFyIHBhcnRzID0gbGluZS5zdWJzdHIobGluZS5pbmRleE9mKCcgJykgKyAxKS5zcGxpdCgnOycpOwogIGZvciAodmFyIGogPSAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHsKICAgIGt2ID0gcGFydHNbal0udHJpbSgpLnNwbGl0KCc9Jyk7CiAgICBwYXJzZWRba3ZbMF0udHJpbSgpXSA9IGt2WzFdOwogIH0KICByZXR1cm4gcGFyc2VkOwp9OwoKLy8gR2VuZXJhdGVzIGFuIGE9ZnRtcCBsaW5lIGZyb20gUlRDUnRwQ29kZWNDYXBhYmlsaXR5IG9yIFJUQ1J0cENvZGVjUGFyYW1ldGVycy4KU0RQVXRpbHMud3JpdGVGbXRwID0gZnVuY3Rpb24oY29kZWMpIHsKICB2YXIgbGluZSA9ICcnOwogIHZhciBwdCA9IGNvZGVjLnBheWxvYWRUeXBlOwogIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICBwdCA9IGNvZGVjLnByZWZlcnJlZFBheWxvYWRUeXBlOwogIH0KICBpZiAoY29kZWMucGFyYW1ldGVycyAmJiBPYmplY3Qua2V5cyhjb2RlYy5wYXJhbWV0ZXJzKS5sZW5ndGgpIHsKICAgIHZhciBwYXJhbXMgPSBbXTsKICAgIE9iamVjdC5rZXlzKGNvZGVjLnBhcmFtZXRlcnMpLmZvckVhY2goZnVuY3Rpb24ocGFyYW0pIHsKICAgICAgcGFyYW1zLnB1c2gocGFyYW0gKyAnPScgKyBjb2RlYy5wYXJhbWV0ZXJzW3BhcmFtXSk7CiAgICB9KTsKICAgIGxpbmUgKz0gJ2E9Zm10cDonICsgcHQgKyAnICcgKyBwYXJhbXMuam9pbignOycpICsgJ1xyXG4nOwogIH0KICByZXR1cm4gbGluZTsKfTsKCi8vIFBhcnNlcyBhbiBydGNwLWZiIGxpbmUsIHJldHVybnMgUlRDUFJ0Y3BGZWVkYmFjayBvYmplY3QuIFNhbXBsZSBpbnB1dDoKLy8gYT1ydGNwLWZiOjk4IG5hY2sgcnBzaQpTRFBVdGlscy5wYXJzZVJ0Y3BGYiA9IGZ1bmN0aW9uKGxpbmUpIHsKICB2YXIgcGFydHMgPSBsaW5lLnN1YnN0cihsaW5lLmluZGV4T2YoJyAnKSArIDEpLnNwbGl0KCcgJyk7CiAgcmV0dXJuIHsKICAgIHR5cGU6IHBhcnRzLnNoaWZ0KCksCiAgICBwYXJhbWV0ZXI6IHBhcnRzLmpvaW4oJyAnKQogIH07Cn07Ci8vIEdlbmVyYXRlIGE9cnRjcC1mYiBsaW5lcyBmcm9tIFJUQ1J0cENvZGVjQ2FwYWJpbGl0eSBvciBSVENSdHBDb2RlY1BhcmFtZXRlcnMuClNEUFV0aWxzLndyaXRlUnRjcEZiID0gZnVuY3Rpb24oY29kZWMpIHsKICB2YXIgbGluZXMgPSAnJzsKICB2YXIgcHQgPSBjb2RlYy5wYXlsb2FkVHlwZTsKICBpZiAoY29kZWMucHJlZmVycmVkUGF5bG9hZFR5cGUgIT09IHVuZGVmaW5lZCkgewogICAgcHQgPSBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTsKICB9CiAgaWYgKGNvZGVjLnJ0Y3BGZWVkYmFjayAmJiBjb2RlYy5ydGNwRmVlZGJhY2subGVuZ3RoKSB7CiAgICAvLyBGSVhNRTogc3BlY2lhbCBoYW5kbGluZyBmb3IgdHJyLWludD8KICAgIGNvZGVjLnJ0Y3BGZWVkYmFjay5mb3JFYWNoKGZ1bmN0aW9uKGZiKSB7CiAgICAgIGxpbmVzICs9ICdhPXJ0Y3AtZmI6JyArIHB0ICsgJyAnICsgZmIudHlwZSArCiAgICAgIChmYi5wYXJhbWV0ZXIgJiYgZmIucGFyYW1ldGVyLmxlbmd0aCA/ICcgJyArIGZiLnBhcmFtZXRlciA6ICcnKSArCiAgICAgICAgICAnXHJcbic7CiAgICB9KTsKICB9CiAgcmV0dXJuIGxpbmVzOwp9OwoKLy8gUGFyc2VzIGFuIFJGQyA1NTc2IHNzcmMgbWVkaWEgYXR0cmlidXRlLiBTYW1wbGUgaW5wdXQ6Ci8vIGE9c3NyYzozNzM1OTI4NTU5IGNuYW1lOnNvbWV0aGluZwpTRFBVdGlscy5wYXJzZVNzcmNNZWRpYSA9IGZ1bmN0aW9uKGxpbmUpIHsKICB2YXIgc3AgPSBsaW5lLmluZGV4T2YoJyAnKTsKICB2YXIgcGFydHMgPSB7CiAgICBzc3JjOiBwYXJzZUludChsaW5lLnN1YnN0cig3LCBzcCAtIDcpLCAxMCkKICB9OwogIHZhciBjb2xvbiA9IGxpbmUuaW5kZXhPZignOicsIHNwKTsKICBpZiAoY29sb24gPiAtMSkgewogICAgcGFydHMuYXR0cmlidXRlID0gbGluZS5zdWJzdHIoc3AgKyAxLCBjb2xvbiAtIHNwIC0gMSk7CiAgICBwYXJ0cy52YWx1ZSA9IGxpbmUuc3Vic3RyKGNvbG9uICsgMSk7CiAgfSBlbHNlIHsKICAgIHBhcnRzLmF0dHJpYnV0ZSA9IGxpbmUuc3Vic3RyKHNwICsgMSk7CiAgfQogIHJldHVybiBwYXJ0czsKfTsKCi8vIEV4dHJhY3RzIERUTFMgcGFyYW1ldGVycyBmcm9tIFNEUCBtZWRpYSBzZWN0aW9uIG9yIHNlc3Npb25wYXJ0LgovLyBGSVhNRTogZm9yIGNvbnNpc3RlbmN5IHdpdGggb3RoZXIgZnVuY3Rpb25zIHRoaXMgc2hvdWxkIG9ubHkKLy8gICBnZXQgdGhlIGZpbmdlcnByaW50IGxpbmUgYXMgaW5wdXQuIFNlZSBhbHNvIGdldEljZVBhcmFtZXRlcnMuClNEUFV0aWxzLmdldER0bHNQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkgewogIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTsKICAvLyBTZWFyY2ggaW4gc2Vzc2lvbiBwYXJ0LCB0b28uCiAgbGluZXMgPSBsaW5lcy5jb25jYXQoU0RQVXRpbHMuc3BsaXRMaW5lcyhzZXNzaW9ucGFydCkpOwogIHZhciBmcExpbmUgPSBsaW5lcy5maWx0ZXIoZnVuY3Rpb24obGluZSkgewogICAgcmV0dXJuIGxpbmUuaW5kZXhPZignYT1maW5nZXJwcmludDonKSA9PT0gMDsKICB9KVswXS5zdWJzdHIoMTQpOwogIC8vIE5vdGU6IGE9c2V0dXAgbGluZSBpcyBpZ25vcmVkIHNpbmNlIHdlIHVzZSB0aGUgJ2F1dG8nIHJvbGUuCiAgdmFyIGR0bHNQYXJhbWV0ZXJzID0gewogICAgcm9sZTogJ2F1dG8nLAogICAgZmluZ2VycHJpbnRzOiBbewogICAgICBhbGdvcml0aG06IGZwTGluZS5zcGxpdCgnICcpWzBdLAogICAgICB2YWx1ZTogZnBMaW5lLnNwbGl0KCcgJylbMV0KICAgIH1dCiAgfTsKICByZXR1cm4gZHRsc1BhcmFtZXRlcnM7Cn07CgovLyBTZXJpYWxpemVzIERUTFMgcGFyYW1ldGVycyB0byBTRFAuClNEUFV0aWxzLndyaXRlRHRsc1BhcmFtZXRlcnMgPSBmdW5jdGlvbihwYXJhbXMsIHNldHVwVHlwZSkgewogIHZhciBzZHAgPSAnYT1zZXR1cDonICsgc2V0dXBUeXBlICsgJ1xyXG4nOwogIHBhcmFtcy5maW5nZXJwcmludHMuZm9yRWFjaChmdW5jdGlvbihmcCkgewogICAgc2RwICs9ICdhPWZpbmdlcnByaW50OicgKyBmcC5hbGdvcml0aG0gKyAnICcgKyBmcC52YWx1ZSArICdcclxuJzsKICB9KTsKICByZXR1cm4gc2RwOwp9OwovLyBQYXJzZXMgSUNFIGluZm9ybWF0aW9uIGZyb20gU0RQIG1lZGlhIHNlY3Rpb24gb3Igc2Vzc2lvbnBhcnQuCi8vIEZJWE1FOiBmb3IgY29uc2lzdGVuY3kgd2l0aCBvdGhlciBmdW5jdGlvbnMgdGhpcyBzaG91bGQgb25seQovLyAgIGdldCB0aGUgaWNlLXVmcmFnIGFuZCBpY2UtcHdkIGxpbmVzIGFzIGlucHV0LgpTRFBVdGlscy5nZXRJY2VQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCkgewogIHZhciBsaW5lcyA9IFNEUFV0aWxzLnNwbGl0TGluZXMobWVkaWFTZWN0aW9uKTsKICAvLyBTZWFyY2ggaW4gc2Vzc2lvbiBwYXJ0LCB0b28uCiAgbGluZXMgPSBsaW5lcy5jb25jYXQoU0RQVXRpbHMuc3BsaXRMaW5lcyhzZXNzaW9ucGFydCkpOwogIHZhciBpY2VQYXJhbWV0ZXJzID0gewogICAgdXNlcm5hbWVGcmFnbWVudDogbGluZXMuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgcmV0dXJuIGxpbmUuaW5kZXhPZignYT1pY2UtdWZyYWc6JykgPT09IDA7CiAgICB9KVswXS5zdWJzdHIoMTIpLAogICAgcGFzc3dvcmQ6IGxpbmVzLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7CiAgICAgIHJldHVybiBsaW5lLmluZGV4T2YoJ2E9aWNlLXB3ZDonKSA9PT0gMDsKICAgIH0pWzBdLnN1YnN0cigxMCkKICB9OwogIHJldHVybiBpY2VQYXJhbWV0ZXJzOwp9OwoKLy8gU2VyaWFsaXplcyBJQ0UgcGFyYW1ldGVycyB0byBTRFAuClNEUFV0aWxzLndyaXRlSWNlUGFyYW1ldGVycyA9IGZ1bmN0aW9uKHBhcmFtcykgewogIHJldHVybiAnYT1pY2UtdWZyYWc6JyArIHBhcmFtcy51c2VybmFtZUZyYWdtZW50ICsgJ1xyXG4nICsKICAgICAgJ2E9aWNlLXB3ZDonICsgcGFyYW1zLnBhc3N3b3JkICsgJ1xyXG4nOwp9OwoKLy8gUGFyc2VzIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBhbmQgcmV0dXJucyBSVENSdHBQYXJhbWV0ZXJzLgpTRFBVdGlscy5wYXJzZVJ0cFBhcmFtZXRlcnMgPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24pIHsKICB2YXIgZGVzY3JpcHRpb24gPSB7CiAgICBjb2RlY3M6IFtdLAogICAgaGVhZGVyRXh0ZW5zaW9uczogW10sCiAgICBmZWNNZWNoYW5pc21zOiBbXSwKICAgIHJ0Y3A6IFtdCiAgfTsKICB2YXIgbGluZXMgPSBTRFBVdGlscy5zcGxpdExpbmVzKG1lZGlhU2VjdGlvbik7CiAgdmFyIG1saW5lID0gbGluZXNbMF0uc3BsaXQoJyAnKTsKICBmb3IgKHZhciBpID0gMzsgaSA8IG1saW5lLmxlbmd0aDsgaSsrKSB7IC8vIGZpbmQgYWxsIGNvZGVjcyBmcm9tIG1saW5lWzMuLl0KICAgIHZhciBwdCA9IG1saW5lW2ldOwogICAgdmFyIHJ0cG1hcGxpbmUgPSBTRFBVdGlscy5tYXRjaFByZWZpeCgKICAgICAgICBtZWRpYVNlY3Rpb24sICdhPXJ0cG1hcDonICsgcHQgKyAnICcpWzBdOwogICAgaWYgKHJ0cG1hcGxpbmUpIHsKICAgICAgdmFyIGNvZGVjID0gU0RQVXRpbHMucGFyc2VSdHBNYXAocnRwbWFwbGluZSk7CiAgICAgIHZhciBmbXRwcyA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KAogICAgICAgICAgbWVkaWFTZWN0aW9uLCAnYT1mbXRwOicgKyBwdCArICcgJyk7CiAgICAgIC8vIE9ubHkgdGhlIGZpcnN0IGE9Zm10cDo8cHQ+IGlzIGNvbnNpZGVyZWQuCiAgICAgIGNvZGVjLnBhcmFtZXRlcnMgPSBmbXRwcy5sZW5ndGggPyBTRFBVdGlscy5wYXJzZUZtdHAoZm10cHNbMF0pIDoge307CiAgICAgIGNvZGVjLnJ0Y3BGZWVkYmFjayA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KAogICAgICAgICAgbWVkaWFTZWN0aW9uLCAnYT1ydGNwLWZiOicgKyBwdCArICcgJykKICAgICAgICAubWFwKFNEUFV0aWxzLnBhcnNlUnRjcEZiKTsKICAgICAgZGVzY3JpcHRpb24uY29kZWNzLnB1c2goY29kZWMpOwogICAgICAvLyBwYXJzZSBGRUMgbWVjaGFuaXNtcyBmcm9tIHJ0cG1hcCBsaW5lcy4KICAgICAgc3dpdGNoIChjb2RlYy5uYW1lLnRvVXBwZXJDYXNlKCkpIHsKICAgICAgICBjYXNlICdSRUQnOgogICAgICAgIGNhc2UgJ1VMUEZFQyc6CiAgICAgICAgICBkZXNjcmlwdGlvbi5mZWNNZWNoYW5pc21zLnB1c2goY29kZWMubmFtZS50b1VwcGVyQ2FzZSgpKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6IC8vIG9ubHkgUkVEIGFuZCBVTFBGRUMgYXJlIHJlY29nbml6ZWQgYXMgRkVDIG1lY2hhbmlzbXMuCiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogIH0KICBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPWV4dG1hcDonKS5mb3JFYWNoKGZ1bmN0aW9uKGxpbmUpIHsKICAgIGRlc2NyaXB0aW9uLmhlYWRlckV4dGVuc2lvbnMucHVzaChTRFBVdGlscy5wYXJzZUV4dG1hcChsaW5lKSk7CiAgfSk7CiAgLy8gRklYTUU6IHBhcnNlIHJ0Y3AuCiAgcmV0dXJuIGRlc2NyaXB0aW9uOwp9OwoKLy8gR2VuZXJhdGVzIHBhcnRzIG9mIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBkZXNjcmliaW5nIHRoZSBjYXBhYmlsaXRpZXMgLwovLyBwYXJhbWV0ZXJzLgpTRFBVdGlscy53cml0ZVJ0cERlc2NyaXB0aW9uID0gZnVuY3Rpb24oa2luZCwgY2FwcykgewogIHZhciBzZHAgPSAnJzsKCiAgLy8gQnVpbGQgdGhlIG1saW5lLgogIHNkcCArPSAnbT0nICsga2luZCArICcgJzsKICBzZHAgKz0gY2Fwcy5jb2RlY3MubGVuZ3RoID4gMCA/ICc5JyA6ICcwJzsgLy8gcmVqZWN0IGlmIG5vIGNvZGVjcy4KICBzZHAgKz0gJyBVRFAvVExTL1JUUC9TQVZQRiAnOwogIHNkcCArPSBjYXBzLmNvZGVjcy5tYXAoZnVuY3Rpb24oY29kZWMpIHsKICAgIGlmIChjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIHJldHVybiBjb2RlYy5wcmVmZXJyZWRQYXlsb2FkVHlwZTsKICAgIH0KICAgIHJldHVybiBjb2RlYy5wYXlsb2FkVHlwZTsKICB9KS5qb2luKCcgJykgKyAnXHJcbic7CgogIHNkcCArPSAnYz1JTiBJUDQgMC4wLjAuMFxyXG4nOwogIHNkcCArPSAnYT1ydGNwOjkgSU4gSVA0IDAuMC4wLjBcclxuJzsKCiAgLy8gQWRkIGE9cnRwbWFwIGxpbmVzIGZvciBlYWNoIGNvZGVjLiBBbHNvIGZtdHAgYW5kIHJ0Y3AtZmIuCiAgY2Fwcy5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykgewogICAgc2RwICs9IFNEUFV0aWxzLndyaXRlUnRwTWFwKGNvZGVjKTsKICAgIHNkcCArPSBTRFBVdGlscy53cml0ZUZtdHAoY29kZWMpOwogICAgc2RwICs9IFNEUFV0aWxzLndyaXRlUnRjcEZiKGNvZGVjKTsKICB9KTsKICBzZHAgKz0gJ2E9cnRjcC1tdXhcclxuJzsKCiAgY2Fwcy5oZWFkZXJFeHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24oZXh0ZW5zaW9uKSB7CiAgICBzZHAgKz0gU0RQVXRpbHMud3JpdGVFeHRtYXAoZXh0ZW5zaW9uKTsKICB9KTsKICAvLyBGSVhNRTogd3JpdGUgZmVjTWVjaGFuaXNtcy4KICByZXR1cm4gc2RwOwp9OwoKLy8gUGFyc2VzIHRoZSBTRFAgbWVkaWEgc2VjdGlvbiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZgovLyBSVENSdHBFbmNvZGluZ1BhcmFtZXRlcnMuClNEUFV0aWxzLnBhcnNlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzID0gZnVuY3Rpb24obWVkaWFTZWN0aW9uKSB7CiAgdmFyIGVuY29kaW5nUGFyYW1ldGVycyA9IFtdOwogIHZhciBkZXNjcmlwdGlvbiA9IFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pOwogIHZhciBoYXNSZWQgPSBkZXNjcmlwdGlvbi5mZWNNZWNoYW5pc21zLmluZGV4T2YoJ1JFRCcpICE9PSAtMTsKICB2YXIgaGFzVWxwZmVjID0gZGVzY3JpcHRpb24uZmVjTWVjaGFuaXNtcy5pbmRleE9mKCdVTFBGRUMnKSAhPT0gLTE7CgogIC8vIGZpbHRlciBhPXNzcmM6Li4uIGNuYW1lOiwgaWdub3JlIFBsYW5CLW1zaWQKICB2YXIgc3NyY3MgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JykKICAubWFwKGZ1bmN0aW9uKGxpbmUpIHsKICAgIHJldHVybiBTRFBVdGlscy5wYXJzZVNzcmNNZWRpYShsaW5lKTsKICB9KQogIC5maWx0ZXIoZnVuY3Rpb24ocGFydHMpIHsKICAgIHJldHVybiBwYXJ0cy5hdHRyaWJ1dGUgPT09ICdjbmFtZSc7CiAgfSk7CiAgdmFyIHByaW1hcnlTc3JjID0gc3NyY3MubGVuZ3RoID4gMCAmJiBzc3Jjc1swXS5zc3JjOwogIHZhciBzZWNvbmRhcnlTc3JjOwoKICB2YXIgZmxvd3MgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmMtZ3JvdXA6RklEJykKICAubWFwKGZ1bmN0aW9uKGxpbmUpIHsKICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJyAnKTsKICAgIHBhcnRzLnNoaWZ0KCk7CiAgICByZXR1cm4gcGFydHMubWFwKGZ1bmN0aW9uKHBhcnQpIHsKICAgICAgcmV0dXJuIHBhcnNlSW50KHBhcnQsIDEwKTsKICAgIH0pOwogIH0pOwogIGlmIChmbG93cy5sZW5ndGggPiAwICYmIGZsb3dzWzBdLmxlbmd0aCA+IDEgJiYgZmxvd3NbMF1bMF0gPT09IHByaW1hcnlTc3JjKSB7CiAgICBzZWNvbmRhcnlTc3JjID0gZmxvd3NbMF1bMV07CiAgfQoKICBkZXNjcmlwdGlvbi5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihjb2RlYykgewogICAgaWYgKGNvZGVjLm5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1JUWCcgJiYgY29kZWMucGFyYW1ldGVycy5hcHQpIHsKICAgICAgdmFyIGVuY1BhcmFtID0gewogICAgICAgIHNzcmM6IHByaW1hcnlTc3JjLAogICAgICAgIGNvZGVjUGF5bG9hZFR5cGU6IHBhcnNlSW50KGNvZGVjLnBhcmFtZXRlcnMuYXB0LCAxMCksCiAgICAgICAgcnR4OiB7CiAgICAgICAgICBwYXlsb2FkVHlwZTogY29kZWMucGF5bG9hZFR5cGUsCiAgICAgICAgICBzc3JjOiBzZWNvbmRhcnlTc3JjCiAgICAgICAgfQogICAgICB9OwogICAgICBlbmNvZGluZ1BhcmFtZXRlcnMucHVzaChlbmNQYXJhbSk7CiAgICAgIGlmIChoYXNSZWQpIHsKICAgICAgICBlbmNQYXJhbSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZW5jUGFyYW0pKTsKICAgICAgICBlbmNQYXJhbS5mZWMgPSB7CiAgICAgICAgICBzc3JjOiBzZWNvbmRhcnlTc3JjLAogICAgICAgICAgbWVjaGFuaXNtOiBoYXNVbHBmZWMgPyAncmVkK3VscGZlYycgOiAncmVkJwogICAgICAgIH07CiAgICAgICAgZW5jb2RpbmdQYXJhbWV0ZXJzLnB1c2goZW5jUGFyYW0pOwogICAgICB9CiAgICB9CiAgfSk7CiAgaWYgKGVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGggPT09IDAgJiYgcHJpbWFyeVNzcmMpIHsKICAgIGVuY29kaW5nUGFyYW1ldGVycy5wdXNoKHsKICAgICAgc3NyYzogcHJpbWFyeVNzcmMKICAgIH0pOwogIH0KCiAgLy8gd2Ugc3VwcG9ydCBib3RoIGI9QVMgYW5kIGI9VElBUyBidXQgaW50ZXJwcmV0IEFTIGFzIFRJQVMuCiAgdmFyIGJhbmR3aWR0aCA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KG1lZGlhU2VjdGlvbiwgJ2I9Jyk7CiAgaWYgKGJhbmR3aWR0aC5sZW5ndGgpIHsKICAgIGlmIChiYW5kd2lkdGhbMF0uaW5kZXhPZignYj1USUFTOicpID09PSAwKSB7CiAgICAgIGJhbmR3aWR0aCA9IHBhcnNlSW50KGJhbmR3aWR0aFswXS5zdWJzdHIoNyksIDEwKTsKICAgIH0gZWxzZSBpZiAoYmFuZHdpZHRoWzBdLmluZGV4T2YoJ2I9QVM6JykgPT09IDApIHsKICAgICAgYmFuZHdpZHRoID0gcGFyc2VJbnQoYmFuZHdpZHRoWzBdLnN1YnN0cig1KSwgMTApOwogICAgfQogICAgZW5jb2RpbmdQYXJhbWV0ZXJzLmZvckVhY2goZnVuY3Rpb24ocGFyYW1zKSB7CiAgICAgIHBhcmFtcy5tYXhCaXRyYXRlID0gYmFuZHdpZHRoOwogICAgfSk7CiAgfQogIHJldHVybiBlbmNvZGluZ1BhcmFtZXRlcnM7Cn07CgpTRFBVdGlscy53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZSA9IGZ1bmN0aW9uKCkgewogIC8vIEZJWE1FOiBzZXNzLWlkIHNob3VsZCBiZSBhbiBOVFAgdGltZXN0YW1wLgogIHJldHVybiAndj0wXHJcbicgKwogICAgICAnbz10aGlzaXNhZGFwdGVyb3J0YyA4MTY5NjM5OTE1NjQ2OTQzMTM3IDIgSU4gSVA0IDEyNy4wLjAuMVxyXG4nICsKICAgICAgJ3M9LVxyXG4nICsKICAgICAgJ3Q9MCAwXHJcbic7Cn07CgpTRFBVdGlscy53cml0ZU1lZGlhU2VjdGlvbiA9IGZ1bmN0aW9uKHRyYW5zY2VpdmVyLCBjYXBzLCB0eXBlLCBzdHJlYW0pIHsKICB2YXIgc2RwID0gU0RQVXRpbHMud3JpdGVSdHBEZXNjcmlwdGlvbih0cmFuc2NlaXZlci5raW5kLCBjYXBzKTsKCiAgLy8gTWFwIElDRSBwYXJhbWV0ZXJzICh1ZnJhZywgcHdkKSB0byBTRFAuCiAgc2RwICs9IFNEUFV0aWxzLndyaXRlSWNlUGFyYW1ldGVycygKICAgICAgdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIuZ2V0TG9jYWxQYXJhbWV0ZXJzKCkpOwoKICAvLyBNYXAgRFRMUyBwYXJhbWV0ZXJzIHRvIFNEUC4KICBzZHAgKz0gU0RQVXRpbHMud3JpdGVEdGxzUGFyYW1ldGVycygKICAgICAgdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydC5nZXRMb2NhbFBhcmFtZXRlcnMoKSwKICAgICAgdHlwZSA9PT0gJ29mZmVyJyA/ICdhY3RwYXNzJyA6ICdhY3RpdmUnKTsKCiAgc2RwICs9ICdhPW1pZDonICsgdHJhbnNjZWl2ZXIubWlkICsgJ1xyXG4nOwoKICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyICYmIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyKSB7CiAgICBzZHAgKz0gJ2E9c2VuZHJlY3ZcclxuJzsKICB9IGVsc2UgaWYgKHRyYW5zY2VpdmVyLnJ0cFNlbmRlcikgewogICAgc2RwICs9ICdhPXNlbmRvbmx5XHJcbic7CiAgfSBlbHNlIGlmICh0cmFuc2NlaXZlci5ydHBSZWNlaXZlcikgewogICAgc2RwICs9ICdhPXJlY3Zvbmx5XHJcbic7CiAgfSBlbHNlIHsKICAgIHNkcCArPSAnYT1pbmFjdGl2ZVxyXG4nOwogIH0KCiAgLy8gRklYTUU6IGZvciBSVFggdGhlcmUgbWlnaHQgYmUgbXVsdGlwbGUgU1NSQ3MuIE5vdCBpbXBsZW1lbnRlZCBpbiBFZGdlIHlldC4KICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7CiAgICB2YXIgbXNpZCA9ICdtc2lkOicgKyBzdHJlYW0uaWQgKyAnICcgKwogICAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci50cmFjay5pZCArICdcclxuJzsKICAgIHNkcCArPSAnYT0nICsgbXNpZDsKICAgIHNkcCArPSAnYT1zc3JjOicgKyB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMgKwogICAgICAgICcgJyArIG1zaWQ7CiAgfQogIC8vIEZJWE1FOiB0aGlzIHNob3VsZCBiZSB3cml0dGVuIGJ5IHdyaXRlUnRwRGVzY3JpcHRpb24uCiAgc2RwICs9ICdhPXNzcmM6JyArIHRyYW5zY2VpdmVyLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyArCiAgICAgICcgY25hbWU6JyArIFNEUFV0aWxzLmxvY2FsQ05hbWUgKyAnXHJcbic7CiAgcmV0dXJuIHNkcDsKfTsKCi8vIEdldHMgdGhlIGRpcmVjdGlvbiBmcm9tIHRoZSBtZWRpYVNlY3Rpb24gb3IgdGhlIHNlc3Npb25wYXJ0LgpTRFBVdGlscy5nZXREaXJlY3Rpb24gPSBmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KSB7CiAgLy8gTG9vayBmb3Igc2VuZHJlY3YsIHNlbmRvbmx5LCByZWN2b25seSwgaW5hY3RpdmUsIGRlZmF1bHQgdG8gc2VuZHJlY3YuCiAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pOwogIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHsKICAgIHN3aXRjaCAobGluZXNbaV0pIHsKICAgICAgY2FzZSAnYT1zZW5kcmVjdic6CiAgICAgIGNhc2UgJ2E9c2VuZG9ubHknOgogICAgICBjYXNlICdhPXJlY3Zvbmx5JzoKICAgICAgY2FzZSAnYT1pbmFjdGl2ZSc6CiAgICAgICAgcmV0dXJuIGxpbmVzW2ldLnN1YnN0cigyKTsKICAgICAgZGVmYXVsdDoKICAgICAgICAvLyBGSVhNRTogV2hhdCBzaG91bGQgaGFwcGVuIGhlcmU/CiAgICB9CiAgfQogIGlmIChzZXNzaW9ucGFydCkgewogICAgcmV0dXJuIFNEUFV0aWxzLmdldERpcmVjdGlvbihzZXNzaW9ucGFydCk7CiAgfQogIHJldHVybiAnc2VuZHJlY3YnOwp9OwoKLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzLgptb2R1bGUuZXhwb3J0cyA9IFNEUFV0aWxzOwoKfSx7fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8vIHZlcnNpb246IDAuNS4xDQovLyBkYXRlOiBNb24gRmViIDA2IDIwMTcgMTY6MDA6MjEgR01UKzAwMDAgKFdFVCkNCi8vIGxpY2VuY2U6IA0KLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovDQoNCg0KKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsNCglpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpDQoJCW1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOw0KCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQ0KCQlkZWZpbmUoIlN5bmNoZXIiLCBbXSwgZmFjdG9yeSk7DQoJZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpDQoJCWV4cG9ydHNbIlN5bmNoZXIiXSA9IGZhY3RvcnkoKTsNCgllbHNlDQoJCXJvb3RbIiJdID0gcm9vdFsiIl0gfHwge30sIHJvb3RbIiJdWyJTeW5jaGVyIl0gPSBmYWN0b3J5KCk7DQp9KSh0aGlzLCBmdW5jdGlvbigpIHsNCnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwDQovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQ0KLyoqKioqKi8gCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307DQovKioqKioqLw0KLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uDQovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgew0KLyoqKioqKi8NCi8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlDQovKioqKioqLyAJCWlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKQ0KLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7DQovKioqKioqLw0KLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQ0KLyoqKioqKi8gCQl2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7DQovKioqKioqLyAJCQlpOiBtb2R1bGVJZCwNCi8qKioqKiovIAkJCWw6IGZhbHNlLA0KLyoqKioqKi8gCQkJZXhwb3J0czoge30NCi8qKioqKiovIAkJfTsNCi8qKioqKiovDQovKioqKioqLyAJCS8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbg0KLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsNCi8qKioqKiovDQovKioqKioqLyAJCS8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWQNCi8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOw0KLyoqKioqKi8NCi8qKioqKiovIAkJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUNCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOw0KLyoqKioqKi8gCX0NCi8qKioqKiovDQovKioqKioqLw0KLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pDQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlczsNCi8qKioqKiovDQovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUNCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOw0KLyoqKioqKi8NCi8qKioqKiovIAkvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0DQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9Ow0KLyoqKioqKi8NCi8qKioqKiovIAkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHMNCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHsNCi8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgew0KLyoqKioqKi8gCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsNCi8qKioqKiovIAkJCQljb25maWd1cmFibGU6IGZhbHNlLA0KLyoqKioqKi8gCQkJCWVudW1lcmFibGU6IHRydWUsDQovKioqKioqLyAJCQkJZ2V0OiBnZXR0ZXINCi8qKioqKiovIAkJCX0pOw0KLyoqKioqKi8gCQl9DQovKioqKioqLyAJfTsNCi8qKioqKiovDQovKioqKioqLyAJLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXMNCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHsNCi8qKioqKiovIAkJdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/DQovKioqKioqLyAJCQlmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOg0KLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTsNCi8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpOw0KLyoqKioqKi8gCQlyZXR1cm4gZ2V0dGVyOw0KLyoqKioqKi8gCX07DQovKioqKioqLw0KLyoqKioqKi8gCS8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbA0KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTsNCi8qKioqKiovDQovKioqKioqLyAJLy8gX193ZWJwYWNrX3B1YmxpY19wYXRoX18NCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsNCi8qKioqKiovDQovKioqKioqLyAJLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzDQovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTYyKTsNCi8qKioqKiovIH0pDQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KLyoqKioqKi8gKFsNCi8qIDAgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KdmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTsNCmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZg0KDQovKioqLyB9KSwNCi8qIDEgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjgNCnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aA0KICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7DQppZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZg0KDQovKioqLyB9KSwNCi8qIDIgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KdmFyIHN0b3JlICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKSgnd2tzJykNCiAgLCB1aWQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMykNCiAgLCBTeW1ib2wgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKS5TeW1ib2wNCiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nOw0KDQp2YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpew0KICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0NCiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpOw0KfTsNCg0KJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTsNCg0KLyoqKi8gfSksDQovKiAzICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHkNCm1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oMTEpKGZ1bmN0aW9uKCl7DQogIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7DQp9KTsNCg0KLyoqKi8gfSksDQovKiA0ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBhbk9iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNSkNCiAgLCBJRThfRE9NX0RFRklORSA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpDQogICwgdG9QcmltaXRpdmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKQ0KICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Ow0KDQpleHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7DQogIGFuT2JqZWN0KE8pOw0KICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7DQogIGFuT2JqZWN0KEF0dHJpYnV0ZXMpOw0KICBpZihJRThfRE9NX0RFRklORSl0cnkgew0KICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTsNCiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfQ0KICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTsNCiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlOw0KICByZXR1cm4gTzsNCn07DQoNCi8qKiovIH0pLA0KLyogNSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7DQogIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpOw0KICByZXR1cm4gaXQ7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDYgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KdmFyIGRQICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpDQogICwgY3JlYXRlRGVzYyA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpOw0KbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXsNCiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTsNCn0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpew0KICBvYmplY3Rba2V5XSA9IHZhbHVlOw0KICByZXR1cm4gb2JqZWN0Ow0KfTsNCg0KLyoqKi8gfSksDQovKiA3ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpew0KICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nOw0KfTsNCg0KLyoqKi8gfSksDQovKiA4ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBnbG9iYWwgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpDQogICwgY29yZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKQ0KICAsIGN0eCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpDQogICwgaGlkZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KQ0KICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnOw0KDQp2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7DQogIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GDQogICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HDQogICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TDQogICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QDQogICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CDQogICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XDQogICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KQ0KICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdDQogICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdDQogICAgLCBrZXksIG93biwgb3V0Ow0KICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTsNCiAgZm9yKGtleSBpbiBzb3VyY2Upew0KICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQ0KICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7DQogICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlOw0KICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkDQogICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTsNCiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXMNCiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XQ0KICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0DQogICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkNCiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeQ0KICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7DQogICAgICB2YXIgRiA9IGZ1bmN0aW9uKGEsIGIsIGMpew0KICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7DQogICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpew0KICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEM7DQogICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTsNCiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpOw0KICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpOw0KICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7DQogICAgICB9Ow0KICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdOw0KICAgICAgcmV0dXJuIEY7DQogICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzDQogICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0Ow0KICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJQ0KICAgIGlmKElTX1BST1RPKXsNCiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDsNCiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlDQogICAgICBpZih0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKWhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTsNCiAgICB9DQogIH0NCn07DQovLyB0eXBlIGJpdG1hcA0KJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWQNCiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsDQokZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpYw0KJGV4cG9ydC5QID0gODsgICAvLyBwcm90bw0KJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kDQokZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXANCiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZQ0KJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIA0KbW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0Ow0KDQovKioqLyB9KSwNCi8qIDkgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KInVzZSBzdHJpY3QiOw0KDQoNCmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7DQoNCmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsNCiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsNCiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsNCiAgfQ0KfTsNCg0KLyoqKi8gfSksDQovKiAxMCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCg0KZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsNCg0KdmFyIF9kZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpOw0KDQp2YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5KTsNCg0KZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0NCg0KZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKCkgew0KICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7DQogICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOw0KICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOw0KICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOw0KICAgICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7DQogICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsNCiAgICB9DQogIH0NCg0KICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgew0KICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7DQogICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7DQogICAgcmV0dXJuIENvbnN0cnVjdG9yOw0KICB9Ow0KfSgpOw0KDQovKioqLyB9KSwNCi8qIDExICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7DQogIHRyeSB7DQogICAgcmV0dXJuICEhZXhlYygpOw0KICB9IGNhdGNoKGUpew0KICAgIHJldHVybiB0cnVlOw0KICB9DQp9Ow0KDQovKioqLyB9KSwNCi8qIDEyICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7DQoNCnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5Ow0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXsNCiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDEzICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5ncw0KdmFyIElPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KQ0KICAsIGRlZmluZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTsNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpew0KICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDE0ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZw0KdmFyIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjApOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXsNCiAgYUZ1bmN0aW9uKGZuKTsNCiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjsNCiAgc3dpdGNoKGxlbmd0aCl7DQogICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7DQogICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTsNCiAgICB9Ow0KICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpew0KICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7DQogICAgfTsNCiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXsNCiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpOw0KICAgIH07DQogIH0NCiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pew0KICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpOw0KICB9Ow0KfTsNCg0KLyoqKi8gfSksDQovKiAxNSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgew0KDQptb2R1bGUuZXhwb3J0cyA9IHt9Ow0KDQovKioqLyB9KSwNCi8qIDE2ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7DQogIHJldHVybiB7DQogICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLA0KICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSwNCiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksDQogICAgdmFsdWUgICAgICAgOiB2YWx1ZQ0KICB9Ow0KfTsNCg0KLyoqKi8gfSksDQovKiAxNyAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQovLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTykNCnZhciAka2V5cyAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDQpDQogICwgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTsNCg0KbW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pew0KICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpOw0KfTsNCg0KLyoqKi8gfSksDQovKiAxOCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgew0KDQp2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZzsNCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7DQogIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDE5ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNykNCiAgLCBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMSkuZG9jdW1lbnQNCiAgLy8gaW4gb2xkIElFIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnDQogICwgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsNCiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTsNCn07DQoNCi8qKiovIH0pLA0KLyogMjAgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7DQogIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7DQogIHJldHVybiBpdDsNCn07DQoNCi8qKiovIH0pLA0KLyogMjEgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KdmFyIGRlZiA9IF9fd2VicGFja19yZXF1aXJlX18oNCkuZg0KICAsIGhhcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpDQogICwgVEFHID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSgndG9TdHJpbmdUYWcnKTsNCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXsNCiAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pOw0KfTsNCg0KLyoqKi8gfSksDQovKiAyMiAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQovLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSkNCnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7DQovLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZQ0KLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmcNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIFMpew0KICBpZighaXNPYmplY3QoaXQpKXJldHVybiBpdDsNCiAgdmFyIGZuLCB2YWw7DQogIGlmKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDsNCiAgaWYodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsOw0KICBpZighUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsOw0KICB0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZSIpOw0KfTsNCg0KLyoqKi8gfSksDQovKiAyMyAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgew0KDQp2YXIgaWQgPSAwDQogICwgcHggPSBNYXRoLnJhbmRvbSgpOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpew0KICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpOw0KfTsNCg0KLyoqKi8gfSksDQovKiAyNCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgew0KDQovLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KQ0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7DQogIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNhbGwgbWV0aG9kIG9uICAiICsgaXQpOw0KICByZXR1cm4gaXQ7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDI1ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7DQoNCm1vZHVsZS5leHBvcnRzID0gdHJ1ZTsNCg0KLyoqKi8gfSksDQovKiAyNiAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQp2YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCkoJ2tleXMnKQ0KICAsIHVpZCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpew0KICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpOw0KfTsNCg0KLyoqKi8gfSksDQovKiAyNyAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgew0KDQovLyA3LjEuNCBUb0ludGVnZXINCnZhciBjZWlsICA9IE1hdGguY2VpbA0KICAsIGZsb29yID0gTWF0aC5mbG9vcjsNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpew0KICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTsNCn07DQoNCi8qKiovIH0pLA0KLyogMjggKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5cw0KbW9kdWxlLmV4cG9ydHMgPSAoDQogICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnDQopLnNwbGl0KCcsJyk7DQoNCi8qKiovIH0pLA0KLyogMjkgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KbW9kdWxlLmV4cG9ydHMgPSAhX193ZWJwYWNrX3JlcXVpcmVfXygzKSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXygxMSkoZnVuY3Rpb24oKXsNCiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KSgnZGl2JyksICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7DQp9KTsNCg0KLyoqKi8gfSksDQovKiAzMCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQp2YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQ0KICAsIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nDQogICwgc3RvcmUgID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpew0KICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTsNCn07DQoNCi8qKiovIH0pLA0KLyogMzEgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg3OSksIF9fZXNNb2R1bGU6IHRydWUgfTsNCg0KLyoqKi8gfSksDQovKiAzMiAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQovLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpDQp2YXIgZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7DQogIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpOw0KfTsNCg0KLyoqKi8gfSksDQovKiAzMyAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCg0KZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsNCg0KdmFyIF9zZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpOw0KDQp2YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTsNCg0KdmFyIF9jcmVhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0KTsNCg0KdmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTsNCg0KdmFyIF90eXBlb2YyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OSk7DQoNCnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpOw0KDQpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQ0KDQpleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsNCiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsNCiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90ICIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoc3VwZXJDbGFzcykpKTsNCiAgfQ0KDQogIHN1YkNsYXNzLnByb3RvdHlwZSA9ICgwLCBfY3JlYXRlMi5kZWZhdWx0KShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7DQogICAgY29uc3RydWN0b3I6IHsNCiAgICAgIHZhbHVlOiBzdWJDbGFzcywNCiAgICAgIGVudW1lcmFibGU6IGZhbHNlLA0KICAgICAgd3JpdGFibGU6IHRydWUsDQogICAgICBjb25maWd1cmFibGU6IHRydWUNCiAgICB9DQogIH0pOw0KICBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0ID8gKDAsIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsNCn07DQoNCi8qKiovIH0pLA0KLyogMzQgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KInVzZSBzdHJpY3QiOw0KDQoNCmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7DQoNCnZhciBfdHlwZW9mMiA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpOw0KDQp2YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTsNCg0KZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0NCg0KZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHsNCiAgaWYgKCFzZWxmKSB7DQogICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsNCiAgfQ0KDQogIHJldHVybiBjYWxsICYmICgodHlwZW9mIGNhbGwgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikgPyBjYWxsIDogc2VsZjsNCn07DQoNCi8qKiovIH0pLA0KLyogMzUgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pDQp2YXIgYW5PYmplY3QgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpDQogICwgZFBzICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY0KQ0KICAsIGVudW1CdWdLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCkNCiAgLCBJRV9QUk9UTyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpKCdJRV9QUk9UTycpDQogICwgRW1wdHkgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9DQogICwgUFJPVE9UWVBFICAgPSAncHJvdG90eXBlJzsNCg0KLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZQ0KdmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbigpew0KICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Zw0KICB2YXIgaWZyYW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSkoJ2lmcmFtZScpDQogICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGgNCiAgICAsIGx0ICAgICA9ICc8Jw0KICAgICwgZ3QgICAgID0gJz4nDQogICAgLCBpZnJhbWVEb2N1bWVudDsNCiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7DQogIF9fd2VicGFja19yZXF1aXJlX18oNDIpLmFwcGVuZENoaWxkKGlmcmFtZSk7DQogIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmwNCiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDsNCiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpOw0KICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50Ow0KICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7DQogIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTsNCiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTsNCiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7DQogIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTsNCiAgcmV0dXJuIGNyZWF0ZURpY3QoKTsNCn07DQoNCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7DQogIHZhciByZXN1bHQ7DQogIGlmKE8gIT09IG51bGwpew0KICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTsNCiAgICByZXN1bHQgPSBuZXcgRW1wdHk7DQogICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7DQogICAgLy8gYWRkICJfX3Byb3RvX18iIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGwNCiAgICByZXN1bHRbSUVfUFJPVE9dID0gTzsNCiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTsNCiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpOw0KfTsNCg0KDQovKioqLyB9KSwNCi8qIDM2ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IF9fd2VicGFja19yZXF1aXJlX18oMzcpLCBfX2VzTW9kdWxlOiB0cnVlIH07DQoNCi8qKiovIH0pLA0KLyogMzcgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KX193ZWJwYWNrX3JlcXVpcmVfXygzOSk7DQp2YXIgJE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0Ow0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKXsNCiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDM4ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCiJ1c2Ugc3RyaWN0IjsNCg0KdmFyIExJQlJBUlkgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNSkNCiAgLCAkZXhwb3J0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOCkNCiAgLCByZWRlZmluZSAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpDQogICwgaGlkZSAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpDQogICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKQ0KICAsIEl0ZXJhdG9ycyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSkNCiAgLCAkaXRlckNyZWF0ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjIpDQogICwgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIxKQ0KICAsIGdldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MykNCiAgLCBJVEVSQVRPUiAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMikoJ2l0ZXJhdG9yJykNCiAgLCBCVUdHWSAgICAgICAgICA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgDQogICwgRkZfSVRFUkFUT1IgICAgPSAnQEBpdGVyYXRvcicNCiAgLCBLRVlTICAgICAgICAgICA9ICdrZXlzJw0KICAsIFZBTFVFUyAgICAgICAgID0gJ3ZhbHVlcyc7DQoNCnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQmFzZSwgTkFNRSwgQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKXsNCiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpOw0KICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCl7DQogICAgaWYoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pcmV0dXJuIHByb3RvW2tpbmRdOw0KICAgIHN3aXRjaChraW5kKXsNCiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTsNCiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07DQogICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9Ow0KICB9Ow0KICB2YXIgVEFHICAgICAgICA9IE5BTUUgKyAnIEl0ZXJhdG9yJw0KICAgICwgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTDQogICAgLCBWQUxVRVNfQlVHID0gZmFsc2UNCiAgICAsIHByb3RvICAgICAgPSBCYXNlLnByb3RvdHlwZQ0KICAgICwgJG5hdGl2ZSAgICA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXQ0KICAgICwgJGRlZmF1bHQgICA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpDQogICAgLCAkZW50cmllcyAgID0gREVGQVVMVCA/ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKSA6IHVuZGVmaW5lZA0KICAgICwgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmUNCiAgICAsIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7DQogIC8vIEZpeCBuYXRpdmUNCiAgaWYoJGFueU5hdGl2ZSl7DQogICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UpKTsNCiAgICBpZihJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSl7DQogICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzDQogICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTsNCiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lcw0KICAgICAgaWYoIUxJQlJBUlkgJiYgIWhhcyhJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKWhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTsNCiAgICB9DQogIH0NCiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRg0KICBpZihERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpew0KICAgIFZBTFVFU19CVUcgPSB0cnVlOw0KICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCl7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07DQogIH0NCiAgLy8gRGVmaW5lIGl0ZXJhdG9yDQogIGlmKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKXsNCiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpOw0KICB9DQogIC8vIFBsdWcgZm9yIGxpYnJhcnkNCiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7DQogIEl0ZXJhdG9yc1tUQUddICA9IHJldHVyblRoaXM7DQogIGlmKERFRkFVTFQpew0KICAgIG1ldGhvZHMgPSB7DQogICAgICB2YWx1ZXM6ICBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSwNCiAgICAgIGtleXM6ICAgIElTX1NFVCAgICAgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSwNCiAgICAgIGVudHJpZXM6ICRlbnRyaWVzDQogICAgfTsNCiAgICBpZihGT1JDRUQpZm9yKGtleSBpbiBtZXRob2RzKXsNCiAgICAgIGlmKCEoa2V5IGluIHByb3RvKSlyZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pOw0KICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7DQogIH0NCiAgcmV0dXJuIG1ldGhvZHM7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDM5ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTsNCi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpDQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpLmZ9KTsNCg0KLyoqKi8gfSksDQovKiA0MCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDUzKSwgX19lc01vZHVsZTogdHJ1ZSB9Ow0KDQovKioqLyB9KSwNCi8qIDQxICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7DQoNCmV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlOw0KDQovKioqLyB9KSwNCi8qIDQyICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7DQoNCi8qKiovIH0pLA0KLyogNDMgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTykNCnZhciBoYXMgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpDQogICwgdG9PYmplY3QgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKQ0KICAsIElFX1BST1RPICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNikoJ0lFX1BST1RPJykNCiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7DQoNCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKE8pew0KICBPID0gdG9PYmplY3QoTyk7DQogIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dOw0KICBpZih0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKXsNCiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7DQogIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDQ0ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBoYXMgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKQ0KICAsIHRvSU9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpDQogICwgYXJyYXlJbmRleE9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSkoZmFsc2UpDQogICwgSUVfUFJPVE8gICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNikoJ0lFX1BST1RPJyk7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7DQogIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KQ0KICAgICwgaSAgICAgID0gMA0KICAgICwgcmVzdWx0ID0gW10NCiAgICAsIGtleTsNCiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpOw0KICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzDQogIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXsNCiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpOw0KICB9DQogIHJldHVybiByZXN1bHQ7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDQ1ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlcw0KdmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpDQogICwgY29yZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMCkNCiAgLCBmYWlscyAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSk7DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7DQogIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV0NCiAgICAsIGV4cCA9IHt9Ow0KICBleHBbS0VZXSA9IGV4ZWMoZm4pOw0KICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDQ2ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTsNCg0KLyoqKi8gfSksDQovKiA0NyAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQovLyA3LjEuMTUgVG9MZW5ndGgNCnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KQ0KICAsIG1pbiAgICAgICA9IE1hdGgubWluOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7DQogIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxDQp9Ow0KDQovKioqLyB9KSwNCi8qIDQ4ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBnbG9iYWwgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSkNCiAgLCBjb3JlICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMCkNCiAgLCBMSUJSQVJZICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpDQogICwgd2tzRXh0ICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KQ0KICAsIGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KS5mOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXsNCiAgdmFyICRTeW1ib2wgPSBjb3JlLlN5bWJvbCB8fCAoY29yZS5TeW1ib2wgPSBMSUJSQVJZID8ge30gOiBnbG9iYWwuU3ltYm9sIHx8IHt9KTsNCiAgaWYobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSlkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7dmFsdWU6IHdrc0V4dC5mKG5hbWUpfSk7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDQ5ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCmV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oMik7DQoNCi8qKiovIH0pLA0KLyogNTAgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KInVzZSBzdHJpY3QiOw0KDQp2YXIgJGF0ICA9IF9fd2VicGFja19yZXF1aXJlX18oNjYpKHRydWUpOw0KDQovLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpDQpfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbihpdGVyYXRlZCl7DQogIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXQNCiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXgNCi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KCkNCn0sIGZ1bmN0aW9uKCl7DQogIHZhciBPICAgICA9IHRoaXMuX3QNCiAgICAsIGluZGV4ID0gdGhpcy5faQ0KICAgICwgcG9pbnQ7DQogIGlmKGluZGV4ID49IE8ubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07DQogIHBvaW50ID0gJGF0KE8sIGluZGV4KTsNCiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7DQogIHJldHVybiB7dmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZX07DQp9KTsNCg0KLyoqKi8gfSksDQovKiA1MSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQpfX3dlYnBhY2tfcmVxdWlyZV9fKDY5KTsNCnZhciBnbG9iYWwgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQ0KICAsIGhpZGUgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpDQogICwgSXRlcmF0b3JzICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpDQogICwgVE9fU1RSSU5HX1RBRyA9IF9fd2VicGFja19yZXF1aXJlX18oMikoJ3RvU3RyaW5nVGFnJyk7DQoNCmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspew0KICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldDQogICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdDQogICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTsNCiAgaWYocHJvdG8gJiYgIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpOw0KICBJdGVyYXRvcnNbTkFNRV0gPSBJdGVyYXRvcnMuQXJyYXk7DQp9DQoNCi8qKiovIH0pLA0KLyogNTIgKi8sDQovKiA1MyAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQp2YXIgY29yZSAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApDQogICwgJEpTT04gPSBjb3JlLkpTT04gfHwgKGNvcmUuSlNPTiA9IHtzdHJpbmdpZnk6IEpTT04uc3RyaW5naWZ5fSk7DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMNCiAgcmV0dXJuICRKU09OLnN0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJndW1lbnRzKTsNCn07DQoNCi8qKiovIH0pLA0KLyogNTQgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KDQoNCi8qKiovIH0pLA0KLyogNTUgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKCkNCnZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KQ0KICAsIFRBRyA9IF9fd2VicGFja19yZXF1aXJlX18oMikoJ3RvU3RyaW5nVGFnJykNCiAgLy8gRVMzIHdyb25nIGhlcmUNCiAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJzsNCg0KLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3INCnZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXsNCiAgdHJ5IHsNCiAgICByZXR1cm4gaXRba2V5XTsNCiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfQ0KfTsNCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7DQogIHZhciBPLCBULCBCOw0KICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCcNCiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2UNCiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUDQogICAgLy8gYnVpbHRpblRhZyBjYXNlDQogICAgOiBBUkcgPyBjb2YoTykNCiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrDQogICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDU2ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzDQp2YXIgY29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7DQptb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24oaXQpew0KICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDU3ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBwSUUgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpDQogICwgY3JlYXRlRGVzYyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KQ0KICAsIHRvSU9iamVjdCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMykNCiAgLCB0b1ByaW1pdGl2ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpDQogICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKQ0KICAsIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkNCiAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7DQoNCmV4cG9ydHMuZiA9IF9fd2VicGFja19yZXF1aXJlX18oMykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApew0KICBPID0gdG9JT2JqZWN0KE8pOw0KICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7DQogIGlmKElFOF9ET01fREVGSU5FKXRyeSB7DQogICAgcmV0dXJuIGdPUEQoTywgUCk7DQogIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0NCiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTsNCn07DQoNCi8qKiovIH0pLA0KLyogNTggKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczsNCg0KLyoqKi8gfSksDQovKiA1OSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCg0KZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsNCg0KdmFyIF9pdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNzcpOw0KDQp2YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTsNCg0KdmFyIF9zeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2KTsNCg0KdmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTsNCg0KdmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07DQoNCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9DQoNCmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSAiZnVuY3Rpb24iICYmIF90eXBlb2YoX2l0ZXJhdG9yMi5kZWZhdWx0KSA9PT0gInN5bWJvbCIgPyBmdW5jdGlvbiAob2JqKSB7DQogIHJldHVybiB0eXBlb2Ygb2JqID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihvYmopOw0KfSA6IGZ1bmN0aW9uIChvYmopIHsNCiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iaiA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2Yob2JqKTsNCn07DQoNCi8qKiovIH0pLA0KLyogNjAgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9Ow0KDQovKioqLyB9KSwNCi8qIDYxICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2YNCi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzDQp2YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMykNCiAgLCB0b0xlbmd0aCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KQ0KICAsIHRvSW5kZXggICA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7DQogIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7DQogICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcykNCiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpDQogICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpDQogICAgICAsIHZhbHVlOw0KICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG0NCiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7DQogICAgICB2YWx1ZSA9IE9baW5kZXgrK107DQogICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTsNCiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90DQogICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7DQogICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7DQogICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xOw0KICB9Ow0KfTsNCg0KLyoqKi8gfSksDQovKiA2MiAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCnZhciBjcmVhdGUgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpDQogICwgZGVzY3JpcHRvciAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KQ0KICAsIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSkNCiAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9Ow0KDQovLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKQ0KX193ZWJwYWNrX3JlcXVpcmVfXyg2KShJdGVyYXRvclByb3RvdHlwZSwgX193ZWJwYWNrX3JlcXVpcmVfXygyKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pOw0KDQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KXsNCiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pOw0KICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTsNCn07DQoNCi8qKiovIH0pLA0KLyogNjMgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihkb25lLCB2YWx1ZSl7DQogIHJldHVybiB7dmFsdWU6IHZhbHVlLCBkb25lOiAhIWRvbmV9Ow0KfTsNCg0KLyoqKi8gfSksDQovKiA2NCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQp2YXIgZFAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpDQogICwgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpDQogICwgZ2V0S2V5cyAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTsNCg0KbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpew0KICBhbk9iamVjdChPKTsNCiAgdmFyIGtleXMgICA9IGdldEtleXMoUHJvcGVydGllcykNCiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoDQogICAgLCBpID0gMA0KICAgICwgUDsNCiAgd2hpbGUobGVuZ3RoID4gaSlkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pOw0KICByZXR1cm4gTzsNCn07DQoNCi8qKiovIH0pLA0KLyogNjUgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQ0KdmFyICRrZXlzICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KQ0KICAsIGhpZGRlbktleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTsNCg0KZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKXsNCiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpOw0KfTsNCg0KLyoqKi8gfSksDQovKiA2NiAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQp2YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNykNCiAgLCBkZWZpbmVkICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTsNCi8vIHRydWUgIC0+IFN0cmluZyNhdA0KLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7DQogIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3Mpew0KICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpDQogICAgICAsIGkgPSB0b0ludGVnZXIocG9zKQ0KICAgICAgLCBsID0gcy5sZW5ndGgNCiAgICAgICwgYSwgYjsNCiAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkOw0KICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7DQogICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmYNCiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhDQogICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDsNCiAgfTsNCn07DQoNCi8qKiovIH0pLA0KLyogNjcgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KdmFyIGN0eCAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpDQogICwgaW52b2tlICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OCkNCiAgLCBodG1sICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKQ0KICAsIGNlbCAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpDQogICwgZ2xvYmFsICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQ0KICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzDQogICwgc2V0VGFzayAgICAgICAgICAgID0gZ2xvYmFsLnNldEltbWVkaWF0ZQ0KICAsIGNsZWFyVGFzayAgICAgICAgICA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZQ0KICAsIE1lc3NhZ2VDaGFubmVsICAgICA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbA0KICAsIGNvdW50ZXIgICAgICAgICAgICA9IDANCiAgLCBxdWV1ZSAgICAgICAgICAgICAgPSB7fQ0KICAsIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnDQogICwgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7DQp2YXIgcnVuID0gZnVuY3Rpb24oKXsNCiAgdmFyIGlkID0gK3RoaXM7DQogIGlmKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSl7DQogICAgdmFyIGZuID0gcXVldWVbaWRdOw0KICAgIGRlbGV0ZSBxdWV1ZVtpZF07DQogICAgZm4oKTsNCiAgfQ0KfTsNCnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50KXsNCiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7DQp9Ow0KLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOg0KaWYoIXNldFRhc2sgfHwgIWNsZWFyVGFzayl7DQogIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pew0KICAgIHZhciBhcmdzID0gW10sIGkgPSAxOw0KICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7DQogICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uKCl7DQogICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7DQogICAgfTsNCiAgICBkZWZlcihjb3VudGVyKTsNCiAgICByZXR1cm4gY291bnRlcjsNCiAgfTsNCiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpew0KICAgIGRlbGV0ZSBxdWV1ZVtpZF07DQogIH07DQogIC8vIE5vZGUuanMgMC44LQ0KICBpZihfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KShwcm9jZXNzKSA9PSAncHJvY2Vzcycpew0KICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpew0KICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpOw0KICAgIH07DQogIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnMNCiAgfSBlbHNlIGlmKE1lc3NhZ2VDaGFubmVsKXsNCiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsOw0KICAgIHBvcnQgICAgPSBjaGFubmVsLnBvcnQyOw0KICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7DQogICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7DQogIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vycw0KICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0Jw0KICB9IGVsc2UgaWYoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKXsNCiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXsNCiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpOw0KICAgIH07DQogICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpOw0KICAvLyBJRTgtDQogIH0gZWxzZSBpZihPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSl7DQogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7DQogICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbigpew0KICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpOw0KICAgICAgICBydW4uY2FsbChpZCk7DQogICAgICB9Ow0KICAgIH07DQogIC8vIFJlc3Qgb2xkIGJyb3dzZXJzDQogIH0gZWxzZSB7DQogICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7DQogICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7DQogICAgfTsNCiAgfQ0KfQ0KbW9kdWxlLmV4cG9ydHMgPSB7DQogIHNldDogICBzZXRUYXNrLA0KICBjbGVhcjogY2xlYXJUYXNrDQp9Ow0KDQovKioqLyB9KSwNCi8qIDY4ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KQ0KICAsIG1heCAgICAgICA9IE1hdGgubWF4DQogICwgbWluICAgICAgID0gTWF0aC5taW47DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpew0KICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7DQogIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpOw0KfTsNCg0KLyoqKi8gfSksDQovKiA2OSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCnZhciBhZGRUb1Vuc2NvcGFibGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MCkNCiAgLCBzdGVwICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MykNCiAgLCBJdGVyYXRvcnMgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSkNCiAgLCB0b0lPYmplY3QgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7DQoNCi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKCkNCi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpDQovLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpDQovLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKCkNCm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzOCkoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXsNCiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldA0KICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleA0KICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZA0KLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpDQp9LCBmdW5jdGlvbigpew0KICB2YXIgTyAgICAgPSB0aGlzLl90DQogICAgLCBraW5kICA9IHRoaXMuX2sNCiAgICAsIGluZGV4ID0gdGhpcy5faSsrOw0KICBpZighTyB8fCBpbmRleCA+PSBPLmxlbmd0aCl7DQogICAgdGhpcy5fdCA9IHVuZGVmaW5lZDsNCiAgICByZXR1cm4gc3RlcCgxKTsNCiAgfQ0KICBpZihraW5kID09ICdrZXlzJyAgKXJldHVybiBzdGVwKDAsIGluZGV4KTsNCiAgaWYoa2luZCA9PSAndmFsdWVzJylyZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7DQogIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTsNCn0sICd2YWx1ZXMnKTsNCg0KLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KQ0KSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTsNCg0KYWRkVG9VbnNjb3BhYmxlcygna2V5cycpOw0KYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7DQphZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7DQoNCi8qKiovIH0pLA0KLyogNzAgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MCksIF9fZXNNb2R1bGU6IHRydWUgfTsNCg0KLyoqKi8gfSksDQovKiA3MSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDgyKSwgX19lc01vZHVsZTogdHJ1ZSB9Ow0KDQovKioqLyB9KSwNCi8qIDcyICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBNRVRBICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpKCdtZXRhJykNCiAgLCBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNykNCiAgLCBoYXMgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpDQogICwgc2V0RGVzYyAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpLmYNCiAgLCBpZCAgICAgICA9IDA7DQp2YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpew0KICByZXR1cm4gdHJ1ZTsNCn07DQp2YXIgRlJFRVpFID0gIV9fd2VicGFja19yZXF1aXJlX18oMTEpKGZ1bmN0aW9uKCl7DQogIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7DQp9KTsNCnZhciBzZXRNZXRhID0gZnVuY3Rpb24oaXQpew0KICBzZXREZXNjKGl0LCBNRVRBLCB7dmFsdWU6IHsNCiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSUQNCiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEcw0KICB9fSk7DQp9Ow0KdmFyIGZhc3RLZXkgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXsNCiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeA0KICBpZighaXNPYmplY3QoaXQpKXJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7DQogIGlmKCFoYXMoaXQsIE1FVEEpKXsNCiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdA0KICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiAnRic7DQogICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGENCiAgICBpZighY3JlYXRlKXJldHVybiAnRSc7DQogICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGENCiAgICBzZXRNZXRhKGl0KTsNCiAgLy8gcmV0dXJuIG9iamVjdCBJRA0KICB9IHJldHVybiBpdFtNRVRBXS5pOw0KfTsNCnZhciBnZXRXZWFrID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7DQogIGlmKCFoYXMoaXQsIE1FVEEpKXsNCiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdA0KICAgIGlmKCFpc0V4dGVuc2libGUoaXQpKXJldHVybiB0cnVlOw0KICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhDQogICAgaWYoIWNyZWF0ZSlyZXR1cm4gZmFsc2U7DQogICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGENCiAgICBzZXRNZXRhKGl0KTsNCiAgLy8gcmV0dXJuIGhhc2ggd2VhayBjb2xsZWN0aW9ucyBJRHMNCiAgfSByZXR1cm4gaXRbTUVUQV0udzsNCn07DQovLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmcNCnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uKGl0KXsNCiAgaWYoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKXNldE1ldGEoaXQpOw0KICByZXR1cm4gaXQ7DQp9Ow0KdmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHsNCiAgS0VZOiAgICAgIE1FVEEsDQogIE5FRUQ6ICAgICBmYWxzZSwNCiAgZmFzdEtleTogIGZhc3RLZXksDQogIGdldFdlYWs6ICBnZXRXZWFrLA0KICBvbkZyZWV6ZTogb25GcmVlemUNCn07DQoNCi8qKiovIH0pLA0KLyogNzMgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KdmFyIGNsYXNzb2YgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpDQogICwgSVRFUkFUT1IgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSgnaXRlcmF0b3InKQ0KICAsIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpOw0KbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpew0KICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXQ0KICAgIHx8IGl0WydAQGl0ZXJhdG9yJ10NCiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldOw0KfTsNCg0KLyoqKi8gfSksDQovKiA3NCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDc4KSwgX19lc01vZHVsZTogdHJ1ZSB9Ow0KDQovKioqLyB9KSwNCi8qIDc1ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IF9fd2VicGFja19yZXF1aXJlX18oODEpLCBfX2VzTW9kdWxlOiB0cnVlIH07DQoNCi8qKiovIH0pLA0KLyogNzYgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MyksIF9fZXNNb2R1bGU6IHRydWUgfTsNCg0KLyoqKi8gfSksDQovKiA3NyAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQptb2R1bGUuZXhwb3J0cyA9IHsgImRlZmF1bHQiOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDg0KSwgX19lc01vZHVsZTogdHJ1ZSB9Ow0KDQovKioqLyB9KSwNCi8qIDc4ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCl9fd2VicGFja19yZXF1aXJlX18oMTAwKTsNCnZhciAkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5PYmplY3Q7DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXsNCiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpOw0KfTsNCg0KLyoqKi8gfSksDQovKiA3OSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQpfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMSk7DQptb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0LmdldFByb3RvdHlwZU9mOw0KDQovKioqLyB9KSwNCi8qIDgwICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCl9fd2VicGFja19yZXF1aXJlX18oMTAyKTsNCm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5PYmplY3Qua2V5czsNCg0KLyoqKi8gfSksDQovKiA4MSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQpfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMyk7DQptb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0LnNldFByb3RvdHlwZU9mOw0KDQovKioqLyB9KSwNCi8qIDgyICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCl9fd2VicGFja19yZXF1aXJlX18oNTQpOw0KX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7DQpfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTsNCl9fd2VicGFja19yZXF1aXJlX18oMTA0KTsNCm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5Qcm9taXNlOw0KDQovKioqLyB9KSwNCi8qIDgzICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCl9fd2VicGFja19yZXF1aXJlX18oMTA1KTsNCl9fd2VicGFja19yZXF1aXJlX18oNTQpOw0KX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpOw0KX193ZWJwYWNrX3JlcXVpcmVfXygxMDcpOw0KbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLlN5bWJvbDsNCg0KLyoqKi8gfSksDQovKiA4NCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQpfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsNCl9fd2VicGFja19yZXF1aXJlX18oNTEpOw0KbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KS5mKCdpdGVyYXRvcicpOw0KDQovKioqLyB9KSwNCi8qIDg1ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7DQogIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXsNCiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpOw0KICB9IHJldHVybiBpdDsNCn07DQoNCi8qKiovIH0pLA0KLyogODYgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHMNCnZhciBnZXRLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNykNCiAgLCBnT1BTICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OCkNCiAgLCBwSUUgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSk7DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsNCiAgdmFyIHJlc3VsdCAgICAgPSBnZXRLZXlzKGl0KQ0KICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjsNCiAgaWYoZ2V0U3ltYm9scyl7DQogICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KQ0KICAgICAgLCBpc0VudW0gID0gcElFLmYNCiAgICAgICwgaSAgICAgICA9IDANCiAgICAgICwga2V5Ow0KICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlyZXN1bHQucHVzaChrZXkpOw0KICB9IHJldHVybiByZXN1bHQ7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDg3ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBjdHggICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpDQogICwgY2FsbCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkxKQ0KICAsIGlzQXJyYXlJdGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4OSkNCiAgLCBhbk9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNSkNCiAgLCB0b0xlbmd0aCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpDQogICwgZ2V0SXRlckZuICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKQ0KICAsIEJSRUFLICAgICAgID0ge30NCiAgLCBSRVRVUk4gICAgICA9IHt9Ow0KdmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1Ipew0KICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbigpeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpDQogICAgLCBmICAgICAgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSkNCiAgICAsIGluZGV4ICA9IDANCiAgICAsIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDsNCiAgaWYodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpOw0KICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3INCiAgaWYoaXNBcnJheUl0ZXIoaXRlckZuKSlmb3IobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspew0KICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTsNCiAgICBpZihyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKXJldHVybiByZXN1bHQ7DQogIH0gZWxzZSBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKXsNCiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTsNCiAgICBpZihyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKXJldHVybiByZXN1bHQ7DQogIH0NCn07DQpleHBvcnRzLkJSRUFLICA9IEJSRUFLOw0KZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47DQoNCi8qKiovIH0pLA0KLyogODggKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGF0KXsNCiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkOw0KICBzd2l0Y2goYXJncy5sZW5ndGgpew0KICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKQ0KICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTsNCiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pDQogICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pOw0KICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSkNCiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7DQogICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKQ0KICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTsNCiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pDQogICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pOw0KICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDg5ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3INCnZhciBJdGVyYXRvcnMgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSkNCiAgLCBJVEVSQVRPUiAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSgnaXRlcmF0b3InKQ0KICAsIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpew0KICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpOw0KfTsNCg0KLyoqKi8gfSksDQovKiA5MCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQovLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KQ0KdmFyIGNvZiA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpOw0KbW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXsNCiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDkxICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3INCnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7DQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpew0KICB0cnkgew0KICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7DQogIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pDQogIH0gY2F0Y2goZSl7DQogICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTsNCiAgICBpZihyZXQgIT09IHVuZGVmaW5lZClhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpOw0KICAgIHRocm93IGU7DQogIH0NCn07DQoNCi8qKiovIH0pLA0KLyogOTIgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KdmFyIElURVJBVE9SICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMikoJ2l0ZXJhdG9yJykNCiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTsNCg0KdHJ5IHsNCiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpOw0KICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9Ow0KICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTsNCn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0NCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZyl7DQogIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTsNCiAgdmFyIHNhZmUgPSBmYWxzZTsNCiAgdHJ5IHsNCiAgICB2YXIgYXJyICA9IFs3XQ0KICAgICAgLCBpdGVyID0gYXJyW0lURVJBVE9SXSgpOw0KICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHJldHVybiB7ZG9uZTogc2FmZSA9IHRydWV9OyB9Ow0KICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTsNCiAgICBleGVjKGFycik7DQogIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH0NCiAgcmV0dXJuIHNhZmU7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDkzICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBnZXRLZXlzICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KQ0KICAsIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGVsKXsNCiAgdmFyIE8gICAgICA9IHRvSU9iamVjdChvYmplY3QpDQogICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pDQogICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aA0KICAgICwgaW5kZXggID0gMA0KICAgICwga2V5Ow0KICB3aGlsZShsZW5ndGggPiBpbmRleClpZihPW2tleSA9IGtleXNbaW5kZXgrK11dID09PSBlbClyZXR1cm4ga2V5Ow0KfTsNCg0KLyoqKi8gfSksDQovKiA5NCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQp2YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQ0KICAsIG1hY3JvdGFzayA9IF9fd2VicGFja19yZXF1aXJlX18oNjcpLnNldA0KICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyDQogICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3MNCiAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZQ0KICAsIGlzTm9kZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpKHByb2Nlc3MpID09ICdwcm9jZXNzJzsNCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpew0KICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5Ow0KDQogIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCl7DQogICAgdmFyIHBhcmVudCwgZm47DQogICAgaWYoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpcGFyZW50LmV4aXQoKTsNCiAgICB3aGlsZShoZWFkKXsNCiAgICAgIGZuICAgPSBoZWFkLmZuOw0KICAgICAgaGVhZCA9IGhlYWQubmV4dDsNCiAgICAgIHRyeSB7DQogICAgICAgIGZuKCk7DQogICAgICB9IGNhdGNoKGUpew0KICAgICAgICBpZihoZWFkKW5vdGlmeSgpOw0KICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7DQogICAgICAgIHRocm93IGU7DQogICAgICB9DQogICAgfSBsYXN0ID0gdW5kZWZpbmVkOw0KICAgIGlmKHBhcmVudClwYXJlbnQuZW50ZXIoKTsNCiAgfTsNCg0KICAvLyBOb2RlLmpzDQogIGlmKGlzTm9kZSl7DQogICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsNCiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpOw0KICAgIH07DQogIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlcg0KICB9IGVsc2UgaWYoT2JzZXJ2ZXIpew0KICAgIHZhciB0b2dnbGUgPSB0cnVlDQogICAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTsNCiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcNCiAgICBub3RpZnkgPSBmdW5jdGlvbigpew0KICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTsNCiAgICB9Ow0KICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZQ0KICB9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpew0KICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7DQogICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsNCiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7DQogICAgfTsNCiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjoNCiAgLy8gLSBzZXRJbW1lZGlhdGUNCiAgLy8gLSBNZXNzYWdlQ2hhbm5lbA0KICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnDQogIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlDQogIC8vIC0gc2V0VGltZW91dA0KICB9IGVsc2Ugew0KICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7DQogICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpDQogICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTsNCiAgICB9Ow0KICB9DQoNCiAgcmV0dXJuIGZ1bmN0aW9uKGZuKXsNCiAgICB2YXIgdGFzayA9IHtmbjogZm4sIG5leHQ6IHVuZGVmaW5lZH07DQogICAgaWYobGFzdClsYXN0Lm5leHQgPSB0YXNrOw0KICAgIGlmKCFoZWFkKXsNCiAgICAgIGhlYWQgPSB0YXNrOw0KICAgICAgbm90aWZ5KCk7DQogICAgfSBsYXN0ID0gdGFzazsNCiAgfTsNCn07DQoNCi8qKiovIH0pLA0KLyogOTUgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvdw0KdmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpDQogICwgZ09QTiAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSkuZg0KICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nOw0KDQp2YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcw0KICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTsNCg0KdmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpew0KICB0cnkgew0KICAgIHJldHVybiBnT1BOKGl0KTsNCiAgfSBjYXRjaChlKXsNCiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTsNCiAgfQ0KfTsNCg0KbW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpew0KICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpOw0KfTsNCg0KDQovKioqLyB9KSwNCi8qIDk2ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCnZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTsNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpew0KICBmb3IodmFyIGtleSBpbiBzcmMpew0KICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTsNCiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTsNCiAgfSByZXR1cm4gdGFyZ2V0Ow0KfTsNCg0KLyoqKi8gfSksDQovKiA5NyAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQovLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy4NCi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovDQp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpDQogICwgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpOw0KdmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pew0KICBhbk9iamVjdChPKTsNCiAgaWYoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCl0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyAiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlISIpOw0KfTsNCm1vZHVsZS5leHBvcnRzID0gew0KICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lDQogICAgZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCl7DQogICAgICB0cnkgew0KICAgICAgICBzZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KShGdW5jdGlvbi5jYWxsLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpOw0KICAgICAgICBzZXQodGVzdCwgW10pOw0KICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTsNCiAgICAgIH0gY2F0Y2goZSl7IGJ1Z2d5ID0gdHJ1ZTsgfQ0KICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXsNCiAgICAgICAgY2hlY2soTywgcHJvdG8pOw0KICAgICAgICBpZihidWdneSlPLl9fcHJvdG9fXyA9IHByb3RvOw0KICAgICAgICBlbHNlIHNldChPLCBwcm90byk7DQogICAgICAgIHJldHVybiBPOw0KICAgICAgfTsNCiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLA0KICBjaGVjazogY2hlY2sNCn07DQoNCi8qKiovIH0pLA0KLyogOTggKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KInVzZSBzdHJpY3QiOw0KDQp2YXIgZ2xvYmFsICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpDQogICwgY29yZSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApDQogICwgZFAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpDQogICwgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpDQogICwgU1BFQ0lFUyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKCdzcGVjaWVzJyk7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXsNCiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTsNCiAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSlkUC5mKEMsIFNQRUNJRVMsIHsNCiAgICBjb25maWd1cmFibGU6IHRydWUsDQogICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfQ0KICB9KTsNCn07DQoNCi8qKiovIH0pLA0KLyogOTkgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpDQp2YXIgYW5PYmplY3QgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KQ0KICAsIGFGdW5jdGlvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjApDQogICwgU1BFQ0lFUyAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSgnc3BlY2llcycpOw0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihPLCBEKXsNCiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvciwgUzsNCiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpOw0KfTsNCg0KLyoqKi8gfSksDQovKiAxMDAgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KdmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpDQovLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSkNCiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2NyZWF0ZTogX193ZWJwYWNrX3JlcXVpcmVfXygzNSl9KTsNCg0KLyoqKi8gfSksDQovKiAxMDEgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pDQp2YXIgdG9PYmplY3QgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMikNCiAgLCAkZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTsNCg0KX193ZWJwYWNrX3JlcXVpcmVfXyg0NSkoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24oKXsNCiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KXsNCiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7DQogIH07DQp9KTsNCg0KLyoqKi8gfSksDQovKiAxMDIgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pDQp2YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKQ0KICAsICRrZXlzICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7DQoNCl9fd2VicGFja19yZXF1aXJlX18oNDUpKCdrZXlzJywgZnVuY3Rpb24oKXsNCiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpew0KICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpOw0KICB9Ow0KfSk7DQoNCi8qKiovIH0pLA0KLyogMTAzICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pDQp2YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7DQokZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogX193ZWJwYWNrX3JlcXVpcmVfXyg5Nykuc2V0fSk7DQoNCi8qKiovIH0pLA0KLyogMTA0ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCiJ1c2Ugc3RyaWN0IjsNCg0KdmFyIExJQlJBUlkgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpDQogICwgZ2xvYmFsICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQ0KICAsIGN0eCAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpDQogICwgY2xhc3NvZiAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSkNCiAgLCAkZXhwb3J0ICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpDQogICwgaXNPYmplY3QgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KQ0KICAsIGFGdW5jdGlvbiAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjApDQogICwgYW5JbnN0YW5jZSAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSkNCiAgLCBmb3JPZiAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3KQ0KICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpDQogICwgdGFzayAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nykuc2V0DQogICwgbWljcm90YXNrICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NCkoKQ0KICAsIFBST01JU0UgICAgICAgICAgICA9ICdQcm9taXNlJw0KICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3INCiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzcw0KICAsICRQcm9taXNlICAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXQ0KICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzDQogICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycNCiAgLCBlbXB0eSAgICAgICAgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9DQogICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjsNCg0KdmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uKCl7DQogIHRyeSB7DQogICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0DQogICAgdmFyIHByb21pc2UgICAgID0gJFByb21pc2UucmVzb2x2ZSgxKQ0KICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW19fd2VicGFja19yZXF1aXJlX18oMikoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbihleGVjKXsgZXhlYyhlbXB0eSwgZW1wdHkpOyB9Ow0KICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3QNCiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTsNCiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfQ0KfSgpOw0KDQovLyBoZWxwZXJzDQp2YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYil7DQogIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZQ0KICByZXR1cm4gYSA9PT0gYiB8fCBhID09PSAkUHJvbWlzZSAmJiBiID09PSBXcmFwcGVyOw0KfTsNCnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24oaXQpew0KICB2YXIgdGhlbjsNCiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlOw0KfTsNCnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpew0KICByZXR1cm4gc2FtZUNvbnN0cnVjdG9yKCRQcm9taXNlLCBDKQ0KICAgID8gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpDQogICAgOiBuZXcgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpOw0KfTsNCnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpew0KICB2YXIgcmVzb2x2ZSwgcmVqZWN0Ow0KICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbigkJHJlc29sdmUsICQkcmVqZWN0KXsNCiAgICBpZihyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpOw0KICAgIHJlc29sdmUgPSAkJHJlc29sdmU7DQogICAgcmVqZWN0ICA9ICQkcmVqZWN0Ow0KICB9KTsNCiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpOw0KICB0aGlzLnJlamVjdCAgPSBhRnVuY3Rpb24ocmVqZWN0KTsNCn07DQp2YXIgcGVyZm9ybSA9IGZ1bmN0aW9uKGV4ZWMpew0KICB0cnkgew0KICAgIGV4ZWMoKTsNCiAgfSBjYXRjaChlKXsNCiAgICByZXR1cm4ge2Vycm9yOiBlfTsNCiAgfQ0KfTsNCnZhciBub3RpZnkgPSBmdW5jdGlvbihwcm9taXNlLCBpc1JlamVjdCl7DQogIGlmKHByb21pc2UuX24pcmV0dXJuOw0KICBwcm9taXNlLl9uID0gdHJ1ZTsNCiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYzsNCiAgbWljcm90YXNrKGZ1bmN0aW9uKCl7DQogICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdg0KICAgICAgLCBvayAgICA9IHByb21pc2UuX3MgPT0gMQ0KICAgICAgLCBpICAgICA9IDA7DQogICAgdmFyIHJ1biA9IGZ1bmN0aW9uKHJlYWN0aW9uKXsNCiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWwNCiAgICAgICAgLCByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZQ0KICAgICAgICAsIHJlamVjdCAgPSByZWFjdGlvbi5yZWplY3QNCiAgICAgICAgLCBkb21haW4gID0gcmVhY3Rpb24uZG9tYWluDQogICAgICAgICwgcmVzdWx0LCB0aGVuOw0KICAgICAgdHJ5IHsNCiAgICAgICAgaWYoaGFuZGxlcil7DQogICAgICAgICAgaWYoIW9rKXsNCiAgICAgICAgICAgIGlmKHByb21pc2UuX2ggPT0gMilvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTsNCiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxOw0KICAgICAgICAgIH0NCiAgICAgICAgICBpZihoYW5kbGVyID09PSB0cnVlKXJlc3VsdCA9IHZhbHVlOw0KICAgICAgICAgIGVsc2Ugew0KICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5lbnRlcigpOw0KICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7DQogICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmV4aXQoKTsNCiAgICAgICAgICB9DQogICAgICAgICAgaWYocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKXsNCiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7DQogICAgICAgICAgfSBlbHNlIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpew0KICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTsNCiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpOw0KICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTsNCiAgICAgIH0gY2F0Y2goZSl7DQogICAgICAgIHJlamVjdChlKTsNCiAgICAgIH0NCiAgICB9Ow0KICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaA0KICAgIHByb21pc2UuX2MgPSBbXTsNCiAgICBwcm9taXNlLl9uID0gZmFsc2U7DQogICAgaWYoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpb25VbmhhbmRsZWQocHJvbWlzZSk7DQogIH0pOw0KfTsNCnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upew0KICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpew0KICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3YNCiAgICAgICwgYWJydXB0LCBoYW5kbGVyLCBjb25zb2xlOw0KICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UpKXsNCiAgICAgIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXsNCiAgICAgICAgaWYoaXNOb2RlKXsNCiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTsNCiAgICAgICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pew0KICAgICAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWV9KTsNCiAgICAgICAgfSBlbHNlIGlmKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3Ipew0KICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTsNCiAgICAgICAgfQ0KICAgICAgfSk7DQogICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZA0KICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxOw0KICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDsNCiAgICBpZihhYnJ1cHQpdGhyb3cgYWJydXB0LmVycm9yOw0KICB9KTsNCn07DQp2YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXsNCiAgaWYocHJvbWlzZS5faCA9PSAxKXJldHVybiBmYWxzZTsNCiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jDQogICAgLCBpICAgICA9IDANCiAgICAsIHJlYWN0aW9uOw0KICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXsNCiAgICByZWFjdGlvbiA9IGNoYWluW2krK107DQogICAgaWYocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpcmV0dXJuIGZhbHNlOw0KICB9IHJldHVybiB0cnVlOw0KfTsNCnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upew0KICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpew0KICAgIHZhciBoYW5kbGVyOw0KICAgIGlmKGlzTm9kZSl7DQogICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTsNCiAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpew0KICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92fSk7DQogICAgfQ0KICB9KTsNCn07DQp2YXIgJHJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKXsNCiAgdmFyIHByb21pc2UgPSB0aGlzOw0KICBpZihwcm9taXNlLl9kKXJldHVybjsNCiAgcHJvbWlzZS5fZCA9IHRydWU7DQogIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcA0KICBwcm9taXNlLl92ID0gdmFsdWU7DQogIHByb21pc2UuX3MgPSAyOw0KICBpZighcHJvbWlzZS5fYSlwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpOw0KICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7DQp9Ow0KdmFyICRyZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpew0KICB2YXIgcHJvbWlzZSA9IHRoaXMNCiAgICAsIHRoZW47DQogIGlmKHByb21pc2UuX2QpcmV0dXJuOw0KICBwcm9taXNlLl9kID0gdHJ1ZTsNCiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwDQogIHRyeSB7DQogICAgaWYocHJvbWlzZSA9PT0gdmFsdWUpdGhyb3cgVHlwZUVycm9yKCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZiIpOw0KICAgIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSl7DQogICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXsNCiAgICAgICAgdmFyIHdyYXBwZXIgPSB7X3c6IHByb21pc2UsIF9kOiBmYWxzZX07IC8vIHdyYXANCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7DQogICAgICAgIH0gY2F0Y2goZSl7DQogICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpOw0KICAgICAgICB9DQogICAgICB9KTsNCiAgICB9IGVsc2Ugew0KICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlOw0KICAgICAgcHJvbWlzZS5fcyA9IDE7DQogICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpOw0KICAgIH0NCiAgfSBjYXRjaChlKXsNCiAgICAkcmVqZWN0LmNhbGwoe193OiBwcm9taXNlLCBfZDogZmFsc2V9LCBlKTsgLy8gd3JhcA0KICB9DQp9Ow0KDQovLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbA0KaWYoIVVTRV9OQVRJVkUpew0KICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKQ0KICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipew0KICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpOw0KICAgIGFGdW5jdGlvbihleGVjdXRvcik7DQogICAgSW50ZXJuYWwuY2FsbCh0aGlzKTsNCiAgICB0cnkgew0KICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTsNCiAgICB9IGNhdGNoKGVycil7DQogICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTsNCiAgICB9DQogIH07DQogIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7DQogICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnMNCiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zDQogICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZQ0KICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZQ0KICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWUNCiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkDQogICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnkNCiAgfTsNCiAgSW50ZXJuYWwucHJvdG90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NikoJFByb21pc2UucHJvdG90eXBlLCB7DQogICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkNCiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKXsNCiAgICAgIHZhciByZWFjdGlvbiAgICA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpOw0KICAgICAgcmVhY3Rpb24ub2sgICAgID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7DQogICAgICByZWFjdGlvbi5mYWlsICAgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7DQogICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDsNCiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7DQogICAgICBpZih0aGlzLl9hKXRoaXMuX2EucHVzaChyZWFjdGlvbik7DQogICAgICBpZih0aGlzLl9zKW5vdGlmeSh0aGlzLCBmYWxzZSk7DQogICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTsNCiAgICB9LA0KICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpDQogICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCl7DQogICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7DQogICAgfQ0KICB9KTsNCiAgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbigpew0KICAgIHZhciBwcm9taXNlICA9IG5ldyBJbnRlcm5hbDsNCiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlOw0KICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7DQogICAgdGhpcy5yZWplY3QgID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpOw0KICB9Ow0KfQ0KDQokZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogJFByb21pc2V9KTsNCl9fd2VicGFja19yZXF1aXJlX18oMjEpKCRQcm9taXNlLCBQUk9NSVNFKTsNCl9fd2VicGFja19yZXF1aXJlX18oOTgpKFBST01JU0UpOw0KV3JhcHBlciA9IF9fd2VicGFja19yZXF1aXJlX18oMClbUFJPTUlTRV07DQoNCi8vIHN0YXRpY3MNCiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHsNCiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocikNCiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocil7DQogICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKQ0KICAgICAgLCAkJHJlamVjdCAgID0gY2FwYWJpbGl0eS5yZWplY3Q7DQogICAgJCRyZWplY3Qocik7DQogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsNCiAgfQ0KfSk7DQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwgew0KICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeCkNCiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXsNCiAgICAvLyBpbnN0YW5jZW9mIGluc3RlYWQgb2YgaW50ZXJuYWwgc2xvdCBjaGVjayBiZWNhdXNlIHdlIHNob3VsZCBmaXggaXQgd2l0aG91dCByZXBsYWNlbWVudCBuYXRpdmUgUHJvbWlzZSBjb3JlDQogICAgaWYoeCBpbnN0YW5jZW9mICRQcm9taXNlICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSlyZXR1cm4geDsNCiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpDQogICAgICAsICQkcmVzb2x2ZSAgPSBjYXBhYmlsaXR5LnJlc29sdmU7DQogICAgJCRyZXNvbHZlKHgpOw0KICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7DQogIH0NCn0pOw0KJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgX193ZWJwYWNrX3JlcXVpcmVfXyg5MikoZnVuY3Rpb24oaXRlcil7DQogICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7DQp9KSksIFBST01JU0UsIHsNCiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpDQogIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKXsNCiAgICB2YXIgQyAgICAgICAgICA9IHRoaXMNCiAgICAgICwgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpDQogICAgICAsIHJlc29sdmUgICAgPSBjYXBhYmlsaXR5LnJlc29sdmUNCiAgICAgICwgcmVqZWN0ICAgICA9IGNhcGFiaWxpdHkucmVqZWN0Ow0KICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7DQogICAgICB2YXIgdmFsdWVzICAgID0gW10NCiAgICAgICAgLCBpbmRleCAgICAgPSAwDQogICAgICAgICwgcmVtYWluaW5nID0gMTsNCiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7DQogICAgICAgIHZhciAkaW5kZXggICAgICAgID0gaW5kZXgrKw0KICAgICAgICAgICwgYWxyZWFkeUNhbGxlZCA9IGZhbHNlOw0KICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpOw0KICAgICAgICByZW1haW5pbmcrKzsNCiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpew0KICAgICAgICAgIGlmKGFscmVhZHlDYWxsZWQpcmV0dXJuOw0KICAgICAgICAgIGFscmVhZHlDYWxsZWQgID0gdHJ1ZTsNCiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlOw0KICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTsNCiAgICAgICAgfSwgcmVqZWN0KTsNCiAgICAgIH0pOw0KICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpOw0KICAgIH0pOw0KICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTsNCiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOw0KICB9LA0KICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpDQogIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpew0KICAgIHZhciBDICAgICAgICAgID0gdGhpcw0KICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQykNCiAgICAgICwgcmVqZWN0ICAgICA9IGNhcGFiaWxpdHkucmVqZWN0Ow0KICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7DQogICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2Upew0KICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7DQogICAgICB9KTsNCiAgICB9KTsNCiAgICBpZihhYnJ1cHQpcmVqZWN0KGFicnVwdC5lcnJvcik7DQogICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsNCiAgfQ0KfSk7DQoNCi8qKiovIH0pLA0KLyogMTA1ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCiJ1c2Ugc3RyaWN0IjsNCg0KLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbQ0KdmFyIGdsb2JhbCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQ0KICAsIGhhcyAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMikNCiAgLCBERVNDUklQVE9SUyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMykNCiAgLCAkZXhwb3J0ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOCkNCiAgLCByZWRlZmluZSAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpDQogICwgTUVUQSAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyKS5LRVkNCiAgLCAkZmFpbHMgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpDQogICwgc2hhcmVkICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKQ0KICAsIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSkNCiAgLCB1aWQgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpDQogICwgd2tzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpDQogICwgd2tzRXh0ICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ5KQ0KICAsIHdrc0RlZmluZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCkNCiAgLCBrZXlPZiAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTMpDQogICwgZW51bUtleXMgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2KQ0KICAsIGlzQXJyYXkgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCkNCiAgLCBhbk9iamVjdCAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNSkNCiAgLCB0b0lPYmplY3QgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpDQogICwgdG9QcmltaXRpdmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIyKQ0KICAsIGNyZWF0ZURlc2MgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNikNCiAgLCBfY3JlYXRlICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpDQogICwgZ09QTkV4dCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1KQ0KICAsICRHT1BEICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NykNCiAgLCAkRFAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNCkNCiAgLCAka2V5cyAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpDQogICwgZ09QRCAgICAgICAgICAgPSAkR09QRC5mDQogICwgZFAgICAgICAgICAgICAgPSAkRFAuZg0KICAsIGdPUE4gICAgICAgICAgID0gZ09QTkV4dC5mDQogICwgJFN5bWJvbCAgICAgICAgPSBnbG9iYWwuU3ltYm9sDQogICwgJEpTT04gICAgICAgICAgPSBnbG9iYWwuSlNPTg0KICAsIF9zdHJpbmdpZnkgICAgID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5DQogICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJw0KICAsIEhJRERFTiAgICAgICAgID0gd2tzKCdfaGlkZGVuJykNCiAgLCBUT19QUklNSVRJVkUgICA9IHdrcygndG9QcmltaXRpdmUnKQ0KICAsIGlzRW51bSAgICAgICAgID0ge30ucHJvcGVydHlJc0VudW1lcmFibGUNCiAgLCBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5JykNCiAgLCBBbGxTeW1ib2xzICAgICA9IHNoYXJlZCgnc3ltYm9scycpDQogICwgT1BTeW1ib2xzICAgICAgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKQ0KICAsIE9iamVjdFByb3RvICAgID0gT2JqZWN0W1BST1RPVFlQRV0NCiAgLCBVU0VfTkFUSVZFICAgICA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbicNCiAgLCBRT2JqZWN0ICAgICAgICA9IGdsb2JhbC5RT2JqZWN0Ow0KLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczDQp2YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDsNCg0KLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3DQp2YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpew0KICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7DQogICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7dmFsdWU6IDd9KS5hOyB9DQogIH0pKS5hICE9IDc7DQp9KSA/IGZ1bmN0aW9uKGl0LCBrZXksIEQpew0KICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTsNCiAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldOw0KICBkUChpdCwga2V5LCBEKTsNCiAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpOw0KfSA6IGRQOw0KDQp2YXIgd3JhcCA9IGZ1bmN0aW9uKHRhZyl7DQogIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7DQogIHN5bS5fayA9IHRhZzsNCiAgcmV0dXJuIHN5bTsNCn07DQoNCnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbihpdCl7DQogIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7DQp9IDogZnVuY3Rpb24oaXQpew0KICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sOw0KfTsNCg0KdmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpew0KICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTsNCiAgYW5PYmplY3QoaXQpOw0KICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpOw0KICBhbk9iamVjdChEKTsNCiAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSkpew0KICAgIGlmKCFELmVudW1lcmFibGUpew0KICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7DQogICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlOw0KICAgIH0gZWxzZSB7DQogICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlOw0KICAgICAgRCA9IF9jcmVhdGUoRCwge2VudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpfSk7DQogICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTsNCiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7DQp9Ow0KdmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7DQogIGFuT2JqZWN0KGl0KTsNCiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKQ0KICAgICwgaSAgICA9IDANCiAgICAsIGwgPSBrZXlzLmxlbmd0aA0KICAgICwga2V5Ow0KICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTsNCiAgcmV0dXJuIGl0Ow0KfTsNCnZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXsNCiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApOw0KfTsNCnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpew0KICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpOw0KICBpZih0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm4gZmFsc2U7DQogIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTsNCn07DQp2YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXsNCiAgaXQgID0gdG9JT2JqZWN0KGl0KTsNCiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTsNCiAgaWYoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybjsNCiAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpOw0KICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTsNCiAgcmV0dXJuIEQ7DQp9Ow0KdmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7DQogIHZhciBuYW1lcyAgPSBnT1BOKHRvSU9iamVjdChpdCkpDQogICAgLCByZXN1bHQgPSBbXQ0KICAgICwgaSAgICAgID0gMA0KICAgICwga2V5Ow0KICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXsNCiAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTsNCiAgfSByZXR1cm4gcmVzdWx0Ow0KfTsNCnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXsNCiAgdmFyIElTX09QICA9IGl0ID09PSBPYmplY3RQcm90bw0KICAgICwgbmFtZXMgID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpDQogICAgLCByZXN1bHQgPSBbXQ0KICAgICwgaSAgICAgID0gMA0KICAgICwga2V5Ow0KICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXsNCiAgICBpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTsNCiAgfSByZXR1cm4gcmVzdWx0Ow0KfTsNCg0KLy8gMTkuNC4xLjEgU3ltYm9sKFtkZXNjcmlwdGlvbl0pDQppZighVVNFX05BVElWRSl7DQogICRTeW1ib2wgPSBmdW5jdGlvbiBTeW1ib2woKXsNCiAgICBpZih0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCl0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTsNCiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsNCiAgICB2YXIgJHNldCA9IGZ1bmN0aW9uKHZhbHVlKXsNCiAgICAgIGlmKHRoaXMgPT09IE9iamVjdFByb3RvKSRzZXQuY2FsbChPUFN5bWJvbHMsIHZhbHVlKTsNCiAgICAgIGlmKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTsNCiAgICAgIHNldFN5bWJvbERlc2ModGhpcywgdGFnLCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7DQogICAgfTsNCiAgICBpZihERVNDUklQVE9SUyAmJiBzZXR0ZXIpc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXR9KTsNCiAgICByZXR1cm4gd3JhcCh0YWcpOw0KICB9Ow0KICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7DQogICAgcmV0dXJuIHRoaXMuX2s7DQogIH0pOw0KDQogICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOw0KICAkRFAuZiAgID0gJGRlZmluZVByb3BlcnR5Ow0KICBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1KS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7DQogIF9fd2VicGFja19yZXF1aXJlX18oNDEpLmYgID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlOw0KICBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KS5mID0gJGdldE93blByb3BlcnR5U3ltYm9sczsNCg0KICBpZihERVNDUklQVE9SUyAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXygyNSkpew0KICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpOw0KICB9DQoNCiAgd2tzRXh0LmYgPSBmdW5jdGlvbihuYW1lKXsNCiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpOw0KICB9DQp9DQoNCiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtTeW1ib2w6ICRTeW1ib2x9KTsNCg0KZm9yKHZhciBzeW1ib2xzID0gKA0KICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNA0KICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnDQopLnNwbGl0KCcsJyksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3Moc3ltYm9sc1tpKytdKTsNCg0KZm9yKHZhciBzeW1ib2xzID0gJGtleXMod2tzLnN0b3JlKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrc0RlZmluZShzeW1ib2xzW2krK10pOw0KDQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywgew0KICAvLyAxOS40LjIuMSBTeW1ib2wuZm9yKGtleSkNCiAgJ2Zvcic6IGZ1bmN0aW9uKGtleSl7DQogICAgcmV0dXJuIGhhcyhTeW1ib2xSZWdpc3RyeSwga2V5ICs9ICcnKQ0KICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldDQogICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7DQogIH0sDQogIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKQ0KICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihrZXkpew0KICAgIGlmKGlzU3ltYm9sKGtleSkpcmV0dXJuIGtleU9mKFN5bWJvbFJlZ2lzdHJ5LCBrZXkpOw0KICAgIHRocm93IFR5cGVFcnJvcihrZXkgKyAnIGlzIG5vdCBhIHN5bWJvbCEnKTsNCiAgfSwNCiAgdXNlU2V0dGVyOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSB0cnVlOyB9LA0KICB1c2VTaW1wbGU6IGZ1bmN0aW9uKCl7IHNldHRlciA9IGZhbHNlOyB9DQp9KTsNCg0KJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHsNCiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKQ0KICBjcmVhdGU6ICRjcmVhdGUsDQogIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKQ0KICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LA0KICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKQ0KICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcywNCiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKQ0KICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsDQogIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pDQogIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLA0KICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pDQogIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9scw0KfSk7DQoNCi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKQ0KJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uKCl7DQogIHZhciBTID0gJFN5bWJvbCgpOw0KICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fQ0KICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGwNCiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHMNCiAgcmV0dXJuIF9zdHJpbmdpZnkoW1NdKSAhPSAnW251bGxdJyB8fCBfc3RyaW5naWZ5KHthOiBTfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9JzsNCn0pKSwgJ0pTT04nLCB7DQogIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXsNCiAgICBpZihpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSlyZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWQNCiAgICB2YXIgYXJncyA9IFtpdF0NCiAgICAgICwgaSAgICA9IDENCiAgICAgICwgcmVwbGFjZXIsICRyZXBsYWNlcjsNCiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pOw0KICAgIHJlcGxhY2VyID0gYXJnc1sxXTsNCiAgICBpZih0eXBlb2YgcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykkcmVwbGFjZXIgPSByZXBsYWNlcjsNCiAgICBpZigkcmVwbGFjZXIgfHwgIWlzQXJyYXkocmVwbGFjZXIpKXJlcGxhY2VyID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSl7DQogICAgICBpZigkcmVwbGFjZXIpdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTsNCiAgICAgIGlmKCFpc1N5bWJvbCh2YWx1ZSkpcmV0dXJuIHZhbHVlOw0KICAgIH07DQogICAgYXJnc1sxXSA9IHJlcGxhY2VyOw0KICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTsNCiAgfQ0KfSk7DQoNCi8vIDE5LjQuMy40IFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV0oaGludCkNCiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IF9fd2VicGFja19yZXF1aXJlX18oNikoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTsNCi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ10NCnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTsNCi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ10NCnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7DQovLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXQ0Kc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7DQoNCi8qKiovIH0pLA0KLyogMTA2ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCl9fd2VicGFja19yZXF1aXJlX18oNDgpKCdhc3luY0l0ZXJhdG9yJyk7DQoNCi8qKiovIH0pLA0KLyogMTA3ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCl9fd2VicGFja19yZXF1aXJlX18oNDgpKCdvYnNlcnZhYmxlJyk7DQoNCi8qKiovIH0pLA0KLyogMTA4ICovLA0KLyogMTA5ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCiJ1c2Ugc3RyaWN0IjsNCg0KDQpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7DQogIHZhbHVlOiB0cnVlDQp9KTsNCg0KdmFyIF9zdHJpbmdpZnkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQwKTsNCg0KdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsNCg0KdmFyIF9rZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7DQoNCnZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTsNCg0KZXhwb3J0cy5kaXZpZGVVUkwgPSBkaXZpZGVVUkw7DQpleHBvcnRzLmRpdmlkZUVtYWlsID0gZGl2aWRlRW1haWw7DQpleHBvcnRzLmVtcHR5T2JqZWN0ID0gZW1wdHlPYmplY3Q7DQpleHBvcnRzLmRlZXBDbG9uZSA9IGRlZXBDbG9uZTsNCmV4cG9ydHMuZ2V0VXNlclVSTEZyb21FbWFpbCA9IGdldFVzZXJVUkxGcm9tRW1haWw7DQpleHBvcnRzLmdldFVzZXJFbWFpbEZyb21VUkwgPSBnZXRVc2VyRW1haWxGcm9tVVJMOw0KZXhwb3J0cy5jb252ZXJ0VG9Vc2VyVVJMID0gY29udmVydFRvVXNlclVSTDsNCg0KZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0NCg0KLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovDQovKioNCiAqIFN1cHBvcnQgbW9kdWxlIHdpdGggc29tZSBmdW5jdGlvbnMgd2lsbCBiZSB1c2VmdWwNCiAqIEBtb2R1bGUgdXRpbHMNCiAqLw0KDQovKioNCiAqIEB0eXBlZGVmIGRpdmlkZVVSTA0KICogQHR5cGUgT2JqZWN0DQogKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBVUkwNCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBvZiBVUkwNCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eSBUaGUgaWRlbnRpdHkgb2YgVVJMDQogKi8NCg0KLyoqDQogKiBEaXZpZGUgYW4gdXJsIGluIHR5cGUsIGRvbWFpbiBhbmQgaWRlbnRpdHkNCiAqIEBwYXJhbSAge1VSTC5VUkx9IHVybCAtIHVybCBhZGRyZXNzDQogKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMDQogKi8NCmZ1bmN0aW9uIGRpdmlkZVVSTCh1cmwpIHsNCg0KICBpZiAoIXVybCkgdGhyb3cgRXJyb3IoJ1VSTCBpcyBuZWVkZWQgdG8gc3BsaXQnKTsNCg0KICBmdW5jdGlvbiByZWN1cnNlKHZhbHVlKSB7DQogICAgdmFyIHJlZ2V4ID0gLyhbYS16QS1aLV0qKSg6XC9cLyg/OlwuKT98OikoWy1hLXpBLVowLTlAOiUuX1wrfiM9XXsyLDI1Nn0pKFstYS16QS1aMC05QDolLl9cK34jPVwvXSopL2dpOw0KICAgIHZhciBzdWJzdCA9ICckMSwkMywkNCc7DQogICAgdmFyIHBhcnRzID0gdmFsdWUucmVwbGFjZShyZWdleCwgc3Vic3QpLnNwbGl0KCcsJyk7DQogICAgcmV0dXJuIHBhcnRzOw0KICB9DQoNCiAgdmFyIHBhcnRzID0gcmVjdXJzZSh1cmwpOw0KDQogIC8vIElmIHRoZSB1cmwgaGFzIG5vIHNjaGVtZQ0KICBpZiAocGFydHNbMF0gPT09IHVybCAmJiAhcGFydHNbMF0uaW5jbHVkZXMoJ0AnKSkgew0KDQogICAgdmFyIF9yZXN1bHQgPSB7DQogICAgICB0eXBlOiAiIiwNCiAgICAgIGRvbWFpbjogdXJsLA0KICAgICAgaWRlbnRpdHk6ICIiDQogICAgfTsNCg0KICAgIGNvbnNvbGUuZXJyb3IoJ1tEaXZpZGVVUkxdIERpdmlkZVVSTCBkb25cJ3Qgc3VwcG9ydCB1cmwgd2l0aG91dCBzY2hlbWUuIFBsZWFzZSByZXZpZXcgeW91ciB1cmwgYWRkcmVzcycsIHVybCk7DQoNCiAgICByZXR1cm4gX3Jlc3VsdDsNCiAgfQ0KDQogIC8vIGNoZWNrIGlmIHRoZSB1cmwgaGFzIHRoZSBzY2hlbWUgYW5kIGluY2x1ZGVzIGFuIEANCiAgaWYgKHBhcnRzWzBdID09PSB1cmwgJiYgcGFydHNbMF0uaW5jbHVkZXMoJ0AnKSkgew0KICAgIHZhciBzY2hlbWUgPSBwYXJ0c1swXSA9PT0gdXJsID8gJ3NtdHAnIDogcGFydHNbMF07DQogICAgcGFydHMgPSByZWN1cnNlKHNjaGVtZSArICc6Ly8nICsgcGFydHNbMF0pOw0KICB9DQoNCiAgLy8gaWYgdGhlIGRvbWFpbiBpbmNsdWRlcyBhbiBALCBkaXZpZGUgaXQgdG8gZG9tYWluIGFuZCBpZGVudGl0eSByZXNwZWN0aXZlbHkNCiAgaWYgKHBhcnRzWzFdLmluY2x1ZGVzKCdAJykpIHsNCiAgICBwYXJ0c1syXSA9IHBhcnRzWzBdICsgJzovLycgKyBwYXJ0c1sxXTsNCiAgICBwYXJ0c1sxXSA9IHBhcnRzWzFdLnN1YnN0cihwYXJ0c1sxXS5pbmRleE9mKCdAJykgKyAxKTsNCiAgfSAvKmVsc2UgaWYgKHBhcnRzWzJdLmluY2x1ZGVzKCcvJykpIHsNCiAgICBwYXJ0c1syXSA9IHBhcnRzWzJdLnN1YnN0cihwYXJ0c1syXS5sYXN0SW5kZXhPZignLycpKzEpOw0KICAgIH0qLw0KDQogIHZhciByZXN1bHQgPSB7DQogICAgdHlwZTogcGFydHNbMF0sDQogICAgZG9tYWluOiBwYXJ0c1sxXSwNCiAgICBpZGVudGl0eTogcGFydHNbMl0NCiAgfTsNCg0KICByZXR1cm4gcmVzdWx0Ow0KfQ0KDQpmdW5jdGlvbiBkaXZpZGVFbWFpbChlbWFpbCkgew0KICB2YXIgaW5kZXhPZkF0ID0gZW1haWwuaW5kZXhPZignQCcpOw0KDQogIHZhciByZXN1bHQgPSB7DQogICAgdXNlcm5hbWU6IGVtYWlsLnN1YnN0cmluZygwLCBpbmRleE9mQXQpLA0KICAgIGRvbWFpbjogZW1haWwuc3Vic3RyaW5nKGluZGV4T2ZBdCArIDEsIGVtYWlsLmxlbmd0aCkNCiAgfTsNCg0KICByZXR1cm4gcmVzdWx0Ow0KfQ0KDQovKioNCiAqIENoZWNrIGlmIGFuIE9iamVjdCBpcyBlbXB0eQ0KICogQHBhcmFtICB7T2JqZWN0fSBvYmplY3QgT2JqZWN0IHRvIGJlIGNoZWNrZWQNCiAqIEByZXR1cm4ge0Jvb2xlYW59ICAgICAgIHN0YXR1cyBvZiBPYmplY3QsIGVtcHR5IG9yIG5vdCAodHJ1ZXxmYWxzZSk7DQogKi8NCmZ1bmN0aW9uIGVtcHR5T2JqZWN0KG9iamVjdCkgew0KICByZXR1cm4gKDAsIF9rZXlzMi5kZWZhdWx0KShvYmplY3QpLmxlbmd0aCA+IDAgPyBmYWxzZSA6IHRydWU7DQp9DQoNCi8qKg0KICogTWFrZSBhIENPUFkgb2YgdGhlIG9yaWdpbmFsIGRhdGENCiAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAtIG9iamVjdCB0byBiZSBjbG9uZWQNCiAqIEByZXR1cm4ge09iamVjdH0NCiAqLw0KZnVuY3Rpb24gZGVlcENsb25lKG9iaikgew0KICAvL1RPRE86IHNpbXBsZSBidXQgaW5lZmZpY2llbnQgSlNPTiBkZWVwIGNsb25lLi4uDQogIGlmIChvYmopIHJldHVybiBKU09OLnBhcnNlKCgwLCBfc3RyaW5naWZ5Mi5kZWZhdWx0KShvYmopKTsNCn0NCg0KLyoqDQogKiBPYnRhaW5zIHRoZSB1c2VyIFVSTCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gZW1haWwNCiAqIEBwYXJhbSAge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsDQogKiBAcmV0dXJuIHtVUkwuVVJMfSB1c2VyVVJMIFRoZSB1c2VyIFVSTA0KICovDQpmdW5jdGlvbiBnZXRVc2VyVVJMRnJvbUVtYWlsKHVzZXJFbWFpbCkgew0KICB2YXIgaW5kZXhPZkF0ID0gdXNlckVtYWlsLmluZGV4T2YoJ0AnKTsNCiAgcmV0dXJuICd1c2VyOi8vJyArIHVzZXJFbWFpbC5zdWJzdHJpbmcoaW5kZXhPZkF0ICsgMSwgdXNlckVtYWlsLmxlbmd0aCkgKyAnLycgKyB1c2VyRW1haWwuc3Vic3RyaW5nKDAsIGluZGV4T2ZBdCk7DQp9DQoNCi8qKg0KICogT2J0YWlucyB0aGUgdXNlciBlbWFpbCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gVVJMDQogKiBAcGFyYW0gIHtVUkwuVVJMfSB1c2VyVVJMIFRoZSB1c2VyIFVSTA0KICogQHJldHVybiB7c3RyaW5nfSB1c2VyRW1haWwgVGhlIHVzZXIgZW1haWwNCiAqLw0KZnVuY3Rpb24gZ2V0VXNlckVtYWlsRnJvbVVSTCh1c2VyVVJMKSB7DQogIHZhciB1cmwgPSBkaXZpZGVVUkwodXNlclVSTCk7DQogIHJldHVybiB1cmwuaWRlbnRpdHkucmVwbGFjZSgnLycsICcnKSArICdAJyArIHVybC5kb21haW47IC8vIGlkZW50aXR5IGZpZWxkIGhhcyAnL2V4YW1wbGVJRCcgaW5zdGVhZCBvZiAnZXhhbXBsZUlEJw0KfQ0KDQovKioNCiAqIENoZWNrIGlmIHRoZSB1c2VyIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgVVJMIGZvcm1hdCwgaWYgbm90LCBjb252ZXJ0IHRvIFVSTCBmb3JtYXQNCiAqIEBwYXJhbSAge3N0cmluZ30gICBpZGVudGlmaWVyICB1c2VyIGlkZW50aWZpZXINCiAqIEByZXR1cm4ge3N0cmluZ30gICB1c2VyVVJMICAgIHRoZSB1c2VyIFVSTA0KICovDQpmdW5jdGlvbiBjb252ZXJ0VG9Vc2VyVVJMKGlkZW50aWZpZXIpIHsNCg0KICAvLyBjaGVjayBpZiB0aGUgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSB1cmwgZm9ybWF0DQogIGlmIChpZGVudGlmaWVyLnN1YnN0cmluZygwLCA3KSA9PT0gJ3VzZXI6Ly8nKSB7DQogICAgdmFyIGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwoaWRlbnRpZmllcik7DQoNCiAgICAvL2NoZWNrIGlmIHRoZSB1cmwgaXMgd2VsbCBmb3JtYXRlZA0KICAgIGlmIChkaXZpZGVkVVJMLmRvbWFpbiAmJiBkaXZpZGVkVVJMLmlkZW50aXR5KSB7DQogICAgICByZXR1cm4gaWRlbnRpZmllcjsNCiAgICB9IGVsc2Ugew0KICAgICAgdGhyb3cgJ3VzZXJVUkwgd2l0aCB3cm9uZyBmb3JtYXQnOw0KICAgIH0NCg0KICAgIC8vaWYgbm90LCBjb252ZXJ0IHRoZSB1c2VyIGVtYWlsIHRvIFVSTCBmb3JtYXQNCiAgfSBlbHNlIHsNCiAgICByZXR1cm4gZ2V0VXNlclVSTEZyb21FbWFpbChpZGVudGlmaWVyKTsNCiAgfQ0KfQ0KDQovKioqLyB9KSwNCi8qIDExMCAqLywNCi8qIDExMSAqLywNCi8qIDExMiAqLywNCi8qIDExMyAqLywNCi8qIDExNCAqLywNCi8qIDExNSAqLywNCi8qIDExNiAqLywNCi8qIDExNyAqLywNCi8qIDExOCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCg0KT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgew0KICB2YWx1ZTogdHJ1ZQ0KfSk7DQoNCnZhciBfa2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNzApOw0KDQp2YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7DQoNCnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTsNCg0KdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7DQoNCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTsNCg0KdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOw0KDQp2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApOw0KDQp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7DQoNCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTsNCg0KdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsNCg0KdmFyIF9nZXQyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpOw0KDQp2YXIgX2dldDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXQyKTsNCg0KdmFyIF9pbmhlcml0czIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTsNCg0KdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOw0KDQp2YXIgX0RhdGFPYmplY3QyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjApOw0KDQp2YXIgX0RhdGFPYmplY3QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdDIpOw0KDQp2YXIgX0RhdGFPYmplY3RDaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTIxKTsNCg0KdmFyIF9EYXRhT2JqZWN0Q2hpbGQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdENoaWxkKTsNCg0KZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0NCg0KLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovDQoNCnZhciBGaWx0ZXJUeXBlID0geyBBTlk6ICdhbnknLCBTVEFSVDogJ3N0YXJ0JywgRVhBQ1Q6ICdleGFjdCcgfTsNCg0KLyoqDQogKiBUaGUgY2xhc3MgcmV0dXJuZWQgZnJvbSB0aGUgU3luY2hlciBzdWJzY3JpYmUgY2FsbC4NCiAqIFRvIGJlIHVzZWQgYXMgYW4gb2JzZXJ2YXRpb24gcG9pbnQgZnJvbSBhIERhdGFPYmplY3RSZXBvcnRlciBjaGFuZ2UuDQogKi8NCg0KdmFyIERhdGFPYmplY3RPYnNlcnZlciA9IGZ1bmN0aW9uIChfRGF0YU9iamVjdCkgew0KICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShEYXRhT2JqZWN0T2JzZXJ2ZXIsIF9EYXRhT2JqZWN0KTsNCg0KICAvKiBwcml2YXRlDQogIF9jaGFuZ2VMaXN0ZW5lcjogTXNnTGlzdGVuZXINCiAgIC0tLS1ldmVudCBoYW5kbGVycy0tLS0NCiAgX2ZpbHRlcnM6IHs8ZmlsdGVyPjoge3R5cGU6IDxzdGFydCwgZXhhY3Q+LCBjYWxsYmFjazogPGZ1bmN0aW9uPn0gfQ0KICAqLw0KDQogIC8qKg0KICAgKiBAaWdub3JlDQogICAqIFNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSBieSBIeXBlcnRpZXMuIEl0J3MgY2FsbGVkIGJ5IHRoZSBTeW5jaGVyLnN1YnNjcmliZSBtZXRob2QNCiAgICovDQogIGZ1bmN0aW9uIERhdGFPYmplY3RPYnNlcnZlcihzeW5jaGVyLCB1cmwsIHNjaGVtYSwgaW5pdGlhbFN0YXR1cywgaW5pdGlhbERhdGEsIGNoaWxkcmVucywgaW5pdGlhbFZlcnNpb24pIHsNCiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBEYXRhT2JqZWN0T2JzZXJ2ZXIpOw0KDQogICAgdmFyIF90aGlzMiA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKERhdGFPYmplY3RPYnNlcnZlci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyKSkuY2FsbCh0aGlzLCBzeW5jaGVyLCB1cmwsIHNjaGVtYSwgaW5pdGlhbFN0YXR1cywgaW5pdGlhbERhdGEuZGF0YSwgY2hpbGRyZW5zKSk7DQoNCiAgICB2YXIgX3RoaXMgPSBfdGhpczI7DQoNCiAgICBfdGhpcy5fdmVyc2lvbiA9IGluaXRpYWxWZXJzaW9uOw0KICAgIF90aGlzLl9maWx0ZXJzID0ge307DQoNCiAgICBfdGhpcy5fc3luY09iai5vYnNlcnZlKGZ1bmN0aW9uIChldmVudCkgew0KICAgICAgX3RoaXMuX29uRmlsdGVyKGV2ZW50KTsNCiAgICB9KTsNCg0KICAgIC8vc2V0dXAgY2hpbGRyZW5zIGRhdGEgZnJvbSBzdWJzY3JpcHRpb24NCiAgICAoMCwgX2tleXMyLmRlZmF1bHQpKGluaXRpYWxEYXRhLmNoaWxkcmVucykuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGRJZCkgew0KICAgICAgdmFyIGNoaWxkRGF0YSA9IGluaXRpYWxEYXRhLmNoaWxkcmVuc1tjaGlsZElkXTsNCiAgICAgIF90aGlzLl9jaGlsZHJlbk9iamVjdHNbY2hpbGRJZF0gPSBuZXcgX0RhdGFPYmplY3RDaGlsZDIuZGVmYXVsdChfdGhpcywgY2hpbGRJZCwgY2hpbGREYXRhKTsNCiAgICB9KTsNCg0KICAgIF90aGlzLl9hbGxvY2F0ZUxpc3RlbmVycygpOw0KICAgIHJldHVybiBfdGhpczI7DQogIH0NCg0KICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShEYXRhT2JqZWN0T2JzZXJ2ZXIsIFt7DQogICAga2V5OiAnX2FsbG9jYXRlTGlzdGVuZXJzJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX2FsbG9jYXRlTGlzdGVuZXJzKCkgew0KICAgICAgKDAsIF9nZXQzLmRlZmF1bHQpKERhdGFPYmplY3RPYnNlcnZlci5wcm90b3R5cGUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKERhdGFPYmplY3RPYnNlcnZlci5wcm90b3R5cGUpLCAnX2FsbG9jYXRlTGlzdGVuZXJzJywgdGhpcykuY2FsbCh0aGlzKTsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoX3RoaXMuX3VybCArICcvY2hhbmdlcycsIGZ1bmN0aW9uIChtc2cpIHsNCiAgICAgICAgaWYgKG1zZy50eXBlID09PSAndXBkYXRlJykgew0KICAgICAgICAgIGNvbnNvbGUubG9nKCdEYXRhT2JqZWN0T2JzZXJ2ZXItJyArIF90aGlzLl91cmwgKyAnLVJDVjogJywgbXNnKTsNCiAgICAgICAgICBfdGhpcy5fY2hhbmdlT2JqZWN0KF90aGlzLl9zeW5jT2JqLCBtc2cpOw0KICAgICAgICB9DQogICAgICB9KTsNCiAgICB9DQogIH0sIHsNCiAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgew0KICAgICAgKDAsIF9nZXQzLmRlZmF1bHQpKERhdGFPYmplY3RPYnNlcnZlci5wcm90b3R5cGUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKERhdGFPYmplY3RPYnNlcnZlci5wcm90b3R5cGUpLCAnX3JlbGVhc2VMaXN0ZW5lcnMnLCB0aGlzKS5jYWxsKHRoaXMpOw0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyLnJlbW92ZSgpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbGVhc2UgYW5kIGRlbGV0ZSBvYmplY3QgZGF0YQ0KICAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdkZWxldGUnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKCkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTsNCiAgICAgIGRlbGV0ZSBfdGhpcy5fc3luY2hlci5fb2JzZXJ2ZXJzW190aGlzLl91cmxdOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbGVhc2UgYW5kIGRlbGV0ZSBvYmplY3QgZGF0YQ0KICAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICd1bnN1YnNjcmliZScsDQogICAgdmFsdWU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCB0byB0aGUgcnVudGltZSBpbnN0YW5jZSBvZiBTeW5jaGVyTWFuYWdlciAtPiBfb25Mb2NhbFVuU3Vic2NyaWJlDQogICAgICB2YXIgdW5TdWJzY3JpYmVNc2cgPSB7DQogICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9vd25lciwgdG86IF90aGlzLl9zeW5jaGVyLl9zdWJVUkwsDQogICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwgfQ0KICAgICAgfTsNCg0KICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh1blN1YnNjcmliZU1zZywgZnVuY3Rpb24gKHJlcGx5KSB7DQogICAgICAgIGNvbnNvbGUubG9nKCdEYXRhT2JqZWN0T2JzZXJ2ZXItVU5TVUJTQ1JJQkU6ICcsIHJlcGx5KTsNCiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7DQogICAgICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTsNCiAgICAgICAgICBkZWxldGUgX3RoaXMuX3N5bmNoZXIuX29ic2VydmVyc1tfdGhpcy5fdXJsXTsNCiAgICAgICAgfQ0KICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogUmVnaXN0ZXIgdGhlIGNoYW5nZSBsaXN0ZW5lcnMgc2VudCBieSB0aGUgcmVwb3J0ZXINCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsdGVyIC0gRmlsdGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgZmllbGQgKHNlcGFyYXRlZCBkb3QgcGF0aCkuIEFjY2VwdHMgKiBhdCB0aGUgZW5kIGZvciBhIG1vcmUgdW5yZXN0cmljdGVkIGZpbHRlcmluZy4NCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50OiBNc2dFdmVudCl9IGNhbGxiYWNrDQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ29uQ2hhbmdlJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoZmlsdGVyLCBjYWxsYmFjaykgew0KICAgICAgdmFyIGtleSA9IGZpbHRlcjsNCiAgICAgIHZhciBmaWx0ZXJPYmogPSB7DQogICAgICAgIHR5cGU6IEZpbHRlclR5cGUuRVhBQ1QsDQogICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjaw0KICAgICAgfTsNCg0KICAgICAgdmFyIGlkeCA9IGZpbHRlci5pbmRleE9mKCcqJyk7DQogICAgICBpZiAoaWR4ID09PSBmaWx0ZXIubGVuZ3RoIC0gMSkgew0KICAgICAgICBpZiAoaWR4ID09PSAwKSB7DQogICAgICAgICAgZmlsdGVyT2JqLnR5cGUgPSBGaWx0ZXJUeXBlLkFOWTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBmaWx0ZXJPYmoudHlwZSA9IEZpbHRlclR5cGUuU1RBUlQ7DQogICAgICAgICAga2V5ID0gZmlsdGVyLnN1YnN0cigwLCBmaWx0ZXIubGVuZ3RoIC0gMSk7DQogICAgICAgIH0NCiAgICAgIH0NCg0KICAgICAgdGhpcy5fZmlsdGVyc1trZXldID0gZmlsdGVyT2JqOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ19vbkZpbHRlcicsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkZpbHRlcihldmVudCkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgKDAsIF9rZXlzMi5kZWZhdWx0KShfdGhpcy5fZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7DQogICAgICAgIHZhciBmaWx0ZXIgPSBfdGhpcy5fZmlsdGVyc1trZXldOw0KICAgICAgICBpZiAoZmlsdGVyLnR5cGUgPT09IEZpbHRlclR5cGUuQU5ZKSB7DQogICAgICAgICAgLy9tYXRjaCBhbnl0aGluZw0KICAgICAgICAgIGZpbHRlci5jYWxsYmFjayhldmVudCk7DQogICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLnR5cGUgPT09IEZpbHRlclR5cGUuU1RBUlQpIHsNCiAgICAgICAgICAvL2lmIHN0YXJ0cyB3aXRoIGZpbHRlci4uLg0KICAgICAgICAgIGlmIChldmVudC5maWVsZC5pbmRleE9mKGtleSkgPT09IDApIHsNCiAgICAgICAgICAgIGZpbHRlci5jYWxsYmFjayhldmVudCk7DQogICAgICAgICAgfQ0KICAgICAgICB9IGVsc2UgaWYgKGZpbHRlci50eXBlID09PSBGaWx0ZXJUeXBlLkVYQUNUKSB7DQogICAgICAgICAgLy9leGFjdCBtYXRjaA0KICAgICAgICAgIGlmIChldmVudC5maWVsZCA9PT0ga2V5KSB7DQogICAgICAgICAgICBmaWx0ZXIuY2FsbGJhY2soZXZlbnQpOw0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgfSk7DQogICAgfQ0KICB9XSk7DQogIHJldHVybiBEYXRhT2JqZWN0T2JzZXJ2ZXI7DQp9KF9EYXRhT2JqZWN0My5kZWZhdWx0IC8qIGltcGxlbWVudHMgU3luY1N0YXR1cyAqLyk7DQoNCmV4cG9ydHMuZGVmYXVsdCA9IERhdGFPYmplY3RPYnNlcnZlcjsNCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOw0KDQovKioqLyB9KSwNCi8qIDExOSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCg0KT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgew0KICB2YWx1ZTogdHJ1ZQ0KfSk7DQoNCnZhciBfa2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNzApOw0KDQp2YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7DQoNCnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTsNCg0KdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7DQoNCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTsNCg0KdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOw0KDQp2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApOw0KDQp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7DQoNCnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTsNCg0KdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsNCg0KdmFyIF9nZXQyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjMpOw0KDQp2YXIgX2dldDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXQyKTsNCg0KdmFyIF9pbmhlcml0czIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTsNCg0KdmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpOw0KDQp2YXIgX0RhdGFPYmplY3QyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjApOw0KDQp2YXIgX0RhdGFPYmplY3QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdDIpOw0KDQp2YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpOw0KDQpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQ0KDQovKioNCiAqIFRoZSBjbGFzcyByZXR1cm5lZCBmcm9tIHRoZSBTeW5jaGVyIGNyZWF0ZSBjYWxsLg0KICogVG8gYmUgdXNlZCBhcyBhIHJlcG9ydGVyIHBvaW50LCBjaGFuZ2VzIHdpbGwgYmUgc3VibWl0ZWQgdG8gRGF0YU9iamVjdE9ic2VydmVyIGluc3RhbmNlcy4NCiAqLw0KLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovDQoNCnZhciBEYXRhT2JqZWN0UmVwb3J0ZXIgPSBmdW5jdGlvbiAoX0RhdGFPYmplY3QpIHsNCiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoRGF0YU9iamVjdFJlcG9ydGVyLCBfRGF0YU9iamVjdCk7DQoNCiAgLyogcHJpdmF0ZQ0KICBfc3Vic2NyaXB0aW9uczogPGh5cGVydHlVcmw6IHsgc3RhdHVzOiBzdHJpbmcgfSB9Pg0KICAgLS0tLWV2ZW50IGhhbmRsZXJzLS0tLQ0KICBfb25TdWJzY3JpcHRpb25IYW5kbGVyOiAoZXZlbnQpID0+IHZvaWQNCiAgX29uUmVzcG9uc2VIYW5kbGVyOiAoZXZlbnQpID0+IHZvaWQNCiAgX29uUmVhZEhhbmRsZXI6IChldmVudCkgPT4gdm9pZA0KICAqLw0KDQogIC8qKg0KICAgKiBAaWdub3JlDQogICAqIFNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSBieSBIeXBlcnRpZXMuIEl0J3MgY2FsbGVkIGJ5IHRoZSBTeW5jaGVyLmNyZWF0ZSBtZXRob2QNCiAgICovDQogIGZ1bmN0aW9uIERhdGFPYmplY3RSZXBvcnRlcihzeW5jaGVyLCB1cmwsIHNjaGVtYSwgaW5pdGlhbFN0YXR1cywgaW5pdGlhbERhdGEsIGNoaWxkcmVucykgew0KICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERhdGFPYmplY3RSZXBvcnRlcik7DQoNCiAgICB2YXIgX3RoaXMyID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoRGF0YU9iamVjdFJlcG9ydGVyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShEYXRhT2JqZWN0UmVwb3J0ZXIpKS5jYWxsKHRoaXMsIHN5bmNoZXIsIHVybCwgc2NoZW1hLCBpbml0aWFsU3RhdHVzLCBpbml0aWFsRGF0YSwgY2hpbGRyZW5zKSk7DQoNCiAgICB2YXIgX3RoaXMgPSBfdGhpczI7DQoNCiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHt9Ow0KDQogICAgX3RoaXMuX3N5bmNPYmoub2JzZXJ2ZShmdW5jdGlvbiAoZXZlbnQpIHsNCiAgICAgIGNvbnNvbGUubG9nKCdEYXRhT2JqZWN0UmVwb3J0ZXItJyArIHVybCArICctU0VORDogJywgZXZlbnQpOw0KICAgICAgX3RoaXMuX29uQ2hhbmdlKGV2ZW50KTsNCiAgICB9KTsNCg0KICAgIF90aGlzLl9hbGxvY2F0ZUxpc3RlbmVycygpOw0KICAgIHJldHVybiBfdGhpczI7DQogIH0NCg0KICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShEYXRhT2JqZWN0UmVwb3J0ZXIsIFt7DQogICAga2V5OiAnX2FsbG9jYXRlTGlzdGVuZXJzJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX2FsbG9jYXRlTGlzdGVuZXJzKCkgew0KICAgICAgKDAsIF9nZXQzLmRlZmF1bHQpKERhdGFPYmplY3RSZXBvcnRlci5wcm90b3R5cGUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKERhdGFPYmplY3RSZXBvcnRlci5wcm90b3R5cGUpLCAnX2FsbG9jYXRlTGlzdGVuZXJzJywgdGhpcykuY2FsbCh0aGlzKTsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIF90aGlzLl9vYmplY3RMaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoX3RoaXMuX3VybCwgZnVuY3Rpb24gKG1zZykgew0KICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdC0nICsgX3RoaXMuX3VybCArICctUkNWOiAnLCBtc2cpOw0KICAgICAgICBzd2l0Y2ggKG1zZy50eXBlKSB7DQogICAgICAgICAgY2FzZSAncmVzcG9uc2UnOg0KICAgICAgICAgICAgX3RoaXMuX29uUmVzcG9uc2UobXNnKTticmVhazsNCiAgICAgICAgICBjYXNlICdyZWFkJzoNCiAgICAgICAgICAgIF90aGlzLl9vblJlYWQobXNnKTticmVhazsNCiAgICAgICAgfQ0KICAgICAgfSk7DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnX3JlbGVhc2VMaXN0ZW5lcnMnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVsZWFzZUxpc3RlbmVycygpIHsNCiAgICAgICgwLCBfZ2V0My5kZWZhdWx0KShEYXRhT2JqZWN0UmVwb3J0ZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShEYXRhT2JqZWN0UmVwb3J0ZXIucHJvdG90eXBlKSwgJ19yZWxlYXNlTGlzdGVuZXJzJywgdGhpcykuY2FsbCh0aGlzKTsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIF90aGlzLl9vYmplY3RMaXN0ZW5lci5yZW1vdmUoKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZW5kIGludml0YXRpb25zIChjcmVhdGUgbWVzc2FnZXMpIHRvIGh5cGVydGllcywgb2JzZXJ2ZXJzIGxpc3QuDQogICAgICogQHBhcmFtICB7SHlwZXJ0eVVSTFtdfSBvYnNlcnZlcnMgTGlzdCBvZiBIeXBlcnR5IFVSTCdzDQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ2ludml0ZU9ic2VydmVycycsDQogICAgdmFsdWU6IGZ1bmN0aW9uIGludml0ZU9ic2VydmVycyhvYnNlcnZlcnMpIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIC8vRkxPVy1PVVQ6IHRoaXMgbWVzc2FnZSB3aWxsIGJlIHNlbnQgdG8gdGhlIHJ1bnRpbWUgaW5zdGFuY2Ugb2YgU3luY2hlck1hbmFnZXIgLT4gX29uQ3JlYXRlDQogICAgICB2YXIgaW52aXRlTXNnID0gew0KICAgICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogX3RoaXMuX3N5bmNoZXIuX293bmVyLCB0bzogX3RoaXMuX3N5bmNoZXIuX3N1YlVSTCwNCiAgICAgICAgYm9keTogeyByZXN1bWU6IGZhbHNlLCByZXNvdXJjZTogX3RoaXMuX3VybCwgc2NoZW1hOiBfdGhpcy5fc2NoZW1hLCB2YWx1ZTogX3RoaXMuX3N5bmNPYmouZGF0YSwgYXV0aG9yaXNlOiBvYnNlcnZlcnMgfQ0KICAgICAgfTsNCg0KICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShpbnZpdGVNc2cpOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbGVhc2UgYW5kIGRlbGV0ZSBvYmplY3QgZGF0YQ0KICAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdkZWxldGUnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKCkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCB0byB0aGUgcnVudGltZSBpbnN0YW5jZSBvZiBTeW5jaGVyTWFuYWdlciAtPiBfb25EZWxldGUNCiAgICAgIHZhciBkZWxldGVNc2cgPSB7DQogICAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5fb3duZXIsIHRvOiBfdGhpcy5fc3luY2hlci5fc3ViVVJMLA0KICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsIH0NCiAgICAgIH07DQoNCiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoZGVsZXRlTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsNCiAgICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3RSZXBvcnRlci1ERUxFVEU6ICcsIHJlcGx5KTsNCiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7DQogICAgICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTsNCiAgICAgICAgICBkZWxldGUgX3RoaXMuX3N5bmNoZXIuX3JlcG9ydGVyc1tfdGhpcy5fdXJsXTsNCiAgICAgICAgfQ0KICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU3Vic2NyaXB0aW9ucyByZXF1ZXN0ZWQgYW5kIGFjY2VwdGVkIHRvIHRoaXMgcmVwb3J0ZXINCiAgICAgKiBAdHlwZSB7T2JqZWN0PEh5cGVydHlVUkwsIFN5bmNTdWJzY3JpcHRpb24+fQ0KICAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdvblN1YnNjcmlwdGlvbicsDQoNCg0KICAgIC8qKg0KICAgICAqIFNldHVwIHRoZSBjYWxsYmFjayB0byBwcm9jZXNzIHN1YnNjcmliZSBhbmQgdW5zdWJzY3JpYmUgbm90aWZpY2F0aW9ucw0KICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQ6IE1zZ0V2ZW50KX0gY2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVjZWl2ZSBldmVudHMNCiAgICAgKi8NCiAgICB2YWx1ZTogZnVuY3Rpb24gb25TdWJzY3JpcHRpb24oY2FsbGJhY2spIHsNCiAgICAgIHRoaXMuX29uU3Vic2NyaXB0aW9uSGFuZGxlciA9IGNhbGxiYWNrOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHVwIHRoZSBjYWxsYmFjayB0byBwcm9jZXNzIHJlc3BvbnNlIG5vdGlmaWNhdGlvbnMgb2YgdGhlIGNyZWF0ZSdzDQogICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudDogTXNnRXZlbnQpfSBjYWxsYmFjayBmdW5jdGlvbiB0byByZWNlaXZlIGV2ZW50cw0KICAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdvblJlc3BvbnNlJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gb25SZXNwb25zZShjYWxsYmFjaykgew0KICAgICAgdGhpcy5fb25SZXNwb25zZUhhbmRsZXIgPSBjYWxsYmFjazsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBTZXR1cCB0aGUgY2FsbGJhY2sgdG8gcHJvY2VzcyByZWFkIG5vdGlmaWNhdGlvbnMNCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50OiBNc2dFdmVudCl9IGNhbGxiYWNrDQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ29uUmVhZCcsDQogICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVhZChjYWxsYmFjaykgew0KICAgICAgdGhpcy5fb25SZWFkSGFuZGxlciA9IGNhbGxiYWNrOw0KICAgIH0NCg0KICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIHBhcmVudCBTeW5jaGVyIC0+IF9vbkZvcndhcmQNCg0KICB9LCB7DQogICAga2V5OiAnX29uRm9yd2FyZCcsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkZvcndhcmQobXNnKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdFJlcG9ydGVyLVJDVjogJywgbXNnKTsNCiAgICAgIHN3aXRjaCAobXNnLmJvZHkudHlwZSkgew0KICAgICAgICBjYXNlICdzdWJzY3JpYmUnOg0KICAgICAgICAgIF90aGlzLl9vblN1YnNjcmliZShtc2cpO2JyZWFrOw0KICAgICAgICBjYXNlICd1bnN1YnNjcmliZSc6DQogICAgICAgICAgX3RoaXMuX29uVW5TdWJzY3JpYmUobXNnKTticmVhazsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSB0aGlzIC0+IF9vbkZvcndhcmQ6IGVtaXR0ZWQgYnkgYSByZW1vdGUgU3luY2hlciAtPiBzdWJzY3JpYmUNCg0KICB9LCB7DQogICAga2V5OiAnX29uU3Vic2NyaWJlJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uU3Vic2NyaWJlKG1zZykgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgIHZhciBoeXBlcnR5VXJsID0gbXNnLmJvZHkuZnJvbTsNCg0KICAgICAgdmFyIGV2ZW50ID0gew0KICAgICAgICB0eXBlOiBtc2cuYm9keS50eXBlLA0KICAgICAgICB1cmw6IGh5cGVydHlVcmwsDQoNCiAgICAgICAgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LA0KDQogICAgICAgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KCkgew0KICAgICAgICAgIC8vY3JlYXRlIG5ldyBzdWJzY3JpcHRpb24NCiAgICAgICAgICB2YXIgc3ViID0geyB1cmw6IGh5cGVydHlVcmwsIHN0YXR1czogJ29uJyB9Ow0KICAgICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVcmxdID0gc3ViOw0KDQogICAgICAgICAgLy9wcm9jZXNzIGFuZCBzZW5kIGNoaWxkcmVucyBkYXRhDQogICAgICAgICAgdmFyIGNoaWxkcmVuVmFsdWVzID0ge307DQogICAgICAgICAgKDAsIF9rZXlzMi5kZWZhdWx0KShfdGhpcy5fY2hpbGRyZW5PYmplY3RzKS5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZElkKSB7DQogICAgICAgICAgICB2YXIgY2hpbGREYXRhID0gX3RoaXMuX2NoaWxkcmVuT2JqZWN0c1tjaGlsZElkXS5kYXRhOw0KICAgICAgICAgICAgY2hpbGRyZW5WYWx1ZXNbY2hpbGRJZF0gPSAoMCwgX3V0aWxzLmRlZXBDbG9uZSkoY2hpbGREYXRhKTsNCiAgICAgICAgICB9KTsNCg0KICAgICAgICAgIC8vc2VuZCBvayByZXNwb25zZSBtZXNzYWdlDQogICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7DQogICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSwNCiAgICAgICAgICAgIGJvZHk6IHsgY29kZTogMjAwLCBzY2hlbWE6IF90aGlzLl9zY2hlbWEsIHZlcnNpb246IF90aGlzLl92ZXJzaW9uLCB2YWx1ZTogeyBkYXRhOiAoMCwgX3V0aWxzLmRlZXBDbG9uZSkoX3RoaXMuZGF0YSksIGNoaWxkcmVuczogY2hpbGRyZW5WYWx1ZXMgfSB9DQogICAgICAgICAgfSk7DQoNCiAgICAgICAgICByZXR1cm4gc3ViOw0KICAgICAgICB9LA0KDQogICAgICAgIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikgew0KICAgICAgICAgIC8vc2VuZCByZWplY3QgcmVzcG9uc2UgbWVzc2FnZQ0KICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoew0KICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sDQogICAgICAgICAgICBib2R5OiB7IGNvZGU6IDQwMywgZGVzYzogcmVhc29uIH0NCiAgICAgICAgICB9KTsNCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgaWYgKF90aGlzLl9vblN1YnNjcmlwdGlvbkhhbmRsZXIpIHsNCiAgICAgICAgY29uc29sZS5sb2coJ1NVQlNDUklQVElPTi1FVkVOVDogJywgZXZlbnQpOw0KICAgICAgICBfdGhpcy5fb25TdWJzY3JpcHRpb25IYW5kbGVyKGV2ZW50KTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSB0aGlzIC0+IF9vbkZvcndhcmQ6IGVtaXR0ZWQgYnkgYSByZW1vdGUgRGF0YU9iamVjdE9ic2VydmVyIC0+IHVuc3Vic2NyaWJlDQoNCiAgfSwgew0KICAgIGtleTogJ19vblVuU3Vic2NyaWJlJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uVW5TdWJzY3JpYmUobXNnKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KICAgICAgdmFyIGh5cGVydHlVcmwgPSBtc2cuYm9keS5mcm9tOw0KDQogICAgICB2YXIgc3ViID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVybF07DQogICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVybF07DQoNCiAgICAgIHZhciBldmVudCA9IHsNCiAgICAgICAgdHlwZTogbXNnLmJvZHkudHlwZSwNCiAgICAgICAgdXJsOiBoeXBlcnR5VXJsLA0KICAgICAgICBvYmplY3Q6IHN1Yg0KICAgICAgfTsNCg0KICAgICAgaWYgKF90aGlzLl9vblN1YnNjcmlwdGlvbkhhbmRsZXIpIHsNCiAgICAgICAgY29uc29sZS5sb2coJ1VOLVNVQlNDUklQVElPTi1FVkVOVDogJywgZXZlbnQpOw0KICAgICAgICBfdGhpcy5fb25TdWJzY3JpcHRpb25IYW5kbGVyKGV2ZW50KTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBSZXBvcnRlclVSTCBhZGRyZXNzOiBlbWl0ZWQgYnkgYSByZW1vdGUgU3luY2hlciAtPiBfb25SZW1vdGVDcmVhdGUgLT4gZXZlbnQuYWNrDQoNCiAgfSwgew0KICAgIGtleTogJ19vblJlc3BvbnNlJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVzcG9uc2UobXNnKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICB2YXIgZXZlbnQgPSB7DQogICAgICAgIHR5cGU6IG1zZy50eXBlLA0KICAgICAgICB1cmw6IG1zZy5mcm9tLA0KICAgICAgICBjb2RlOiBtc2cuYm9keS5jb2RlDQogICAgICB9Ow0KDQogICAgICBpZiAoX3RoaXMuX29uUmVzcG9uc2VIYW5kbGVyKSB7DQogICAgICAgIGNvbnNvbGUubG9nKCdSRVNQT05TRS1FVkVOVDogJywgZXZlbnQpOw0KICAgICAgICBfdGhpcy5fb25SZXNwb25zZUhhbmRsZXIoZXZlbnQpOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIFJlcG9ydGVyVVJMIGFkZHJlc3M6IGVtaXRlZCBieSBhIHJlbW90ZSBTeW5jaGVyIC0+IHJlYWQNCg0KICB9LCB7DQogICAga2V5OiAnX29uUmVhZCcsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlYWQobXNnKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICB2YXIgZXZlbnQgPSB7DQogICAgICAgIHR5cGU6IG1zZy50eXBlLA0KICAgICAgICB1cmw6IG1zZy5mcm9tLA0KDQogICAgICAgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KCkgew0KICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoew0KICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sDQogICAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6ICgwLCBfdXRpbHMuZGVlcENsb25lKShfdGhpcy5kYXRhKSB9DQogICAgICAgICAgfSk7DQogICAgICAgIH0sDQoNCiAgICAgICAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3QocmVhc29uKSB7DQogICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7DQogICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSwNCiAgICAgICAgICAgIGJvZHk6IHsgY29kZTogNDAxLCBkZXNjOiByZWFzb24gfQ0KICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBpZiAoX3RoaXMuX29uUmVhZEhhbmRsZXIpIHsNCiAgICAgICAgY29uc29sZS5sb2coJ1JFQUQtRVZFTlQ6ICcsIGV2ZW50KTsNCiAgICAgICAgX3RoaXMuX29uUmVhZEhhbmRsZXIoZXZlbnQpOw0KICAgICAgfQ0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ3N1YnNjcmlwdGlvbnMnLA0KICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbnM7DQogICAgfQ0KICB9XSk7DQogIHJldHVybiBEYXRhT2JqZWN0UmVwb3J0ZXI7DQp9KF9EYXRhT2JqZWN0My5kZWZhdWx0IC8qIGltcGxlbWVudHMgU3luY1N0YXR1cyAqLyk7DQoNCmV4cG9ydHMuZGVmYXVsdCA9IERhdGFPYmplY3RSZXBvcnRlcjsNCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOw0KDQovKioqLyB9KSwNCi8qIDEyMCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCg0KT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgew0KICB2YWx1ZTogdHJ1ZQ0KfSk7DQoNCnZhciBfcHJvbWlzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzEpOw0KDQp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7DQoNCnZhciBfa2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNzApOw0KDQp2YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7DQoNCnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTsNCg0KdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOw0KDQp2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApOw0KDQp2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7DQoNCnZhciBfUHJveHlPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMik7DQoNCnZhciBfUHJveHlPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJveHlPYmplY3QpOw0KDQp2YXIgX0RhdGFPYmplY3RDaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTIxKTsNCg0KdmFyIF9EYXRhT2JqZWN0Q2hpbGQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdENoaWxkKTsNCg0KdmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMTA5KTsNCg0KZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0NCg0KLyoqDQogKiBNYWluIGV4dGVuc2lvbiBjbGFzcyBmb3Igb2JzZXJ2ZXJzIGFuZCByZXBvcnRlcnMsIHdpdGggY29tbW9uIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMuDQogKiBDaGlsZHJlbiBtYW5hZ2VtZW50IGlzIGNvbW1vbiBmb3Igb2JzZXJ2ZXJzIGFuZCByZXBvcnRlcnMuDQogKi8NCnZhciBEYXRhT2JqZWN0ID0gZnVuY3Rpb24gKCkgew0KICAvKiBwcml2YXRlDQogIF92ZXJzaW9uOiBudW1iZXINCiAgIF9vd25lcjogSHlwZXJ0eVVSTA0KICBfdXJsOiBPYmplY3RVUkwNCiAgX3NjaGVtYTogU2NoZW1hDQogIF9idXM6IE1pbmlCdXMNCiAgX3N0YXR1czogb24gfCBwYXVzZWQNCiAgX3N5bmNPYmo6IFN5bmNEYXRhDQogICBfY2hpbGRyZW46IHsgaWQ6IERhdGFPYmplY3RDaGlsZCB9DQogIF9jaGlsZHJlbkxpc3RlbmVyczogW01zZ0xpc3RlbmVyXQ0KICAgLS0tLWV2ZW50IGhhbmRsZXJzLS0tLQ0KICBfb25BZGRDaGlsZEhhbmRsZXI6IChldmVudCkgPT4gdm9pZA0KICAqLw0KDQogIC8qKg0KICAgKiBAaWdub3JlDQogICAqIFNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSBieSBIeXBlcnRpZXMuIEl0J3MgY2FsbGVkIGJ5IHRoZSBTeW5jaGVyIGNyZWF0ZSBvciBzdWJzY3JpYmUgbWV0aG9kJ3MNCiAgICovDQogIGZ1bmN0aW9uIERhdGFPYmplY3Qoc3luY2hlciwgdXJsLCBzY2hlbWEsIGluaXRpYWxTdGF0dXMsIGluaXRpYWxEYXRhLCBjaGlsZHJlbnMpIHsNCiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBEYXRhT2JqZWN0KTsNCg0KICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICBfdGhpcy5fc3luY2hlciA9IHN5bmNoZXI7DQogICAgX3RoaXMuX3VybCA9IHVybDsNCiAgICBfdGhpcy5fc2NoZW1hID0gc2NoZW1hOw0KICAgIF90aGlzLl9zdGF0dXMgPSBpbml0aWFsU3RhdHVzOw0KICAgIF90aGlzLl9zeW5jT2JqID0gbmV3IF9Qcm94eU9iamVjdDIuZGVmYXVsdChpbml0aWFsRGF0YSk7DQogICAgX3RoaXMuX2NoaWxkcmVucyA9IGNoaWxkcmVuczsNCg0KICAgIF90aGlzLl92ZXJzaW9uID0gMDsNCiAgICBfdGhpcy5fY2hpbGRJZCA9IDA7DQogICAgX3RoaXMuX2NoaWxkcmVuT2JqZWN0cyA9IHt9Ow0KICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycyA9IFtdOw0KDQogICAgX3RoaXMuX293bmVyID0gc3luY2hlci5fb3duZXI7DQogICAgX3RoaXMuX2J1cyA9IHN5bmNoZXIuX2J1czsNCiAgfQ0KDQogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERhdGFPYmplY3QsIFt7DQogICAga2V5OiAnX2FsbG9jYXRlTGlzdGVuZXJzJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX2FsbG9jYXRlTGlzdGVuZXJzKCkgew0KICAgICAgdmFyIF90aGlzMiA9IHRoaXM7DQoNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIHZhciBjaGlsZEJhc2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGlsZHJlbi8nOw0KICAgICAgY29uc29sZS5sb2coJ1tEYXRhIE9iamVjdCAtIEFsbG9jYXRlTGlzdGVuZXJzXSAtICcsIF90aGlzLl9jaGlsZHJlbnMpOw0KICAgICAgaWYgKF90aGlzLl9jaGlsZHJlbnMpIHsNCiAgICAgICAgX3RoaXMuX2NoaWxkcmVucy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgew0KICAgICAgICAgIHZhciBjaGlsZFVSTCA9IGNoaWxkQmFzZVVSTCArIGNoaWxkOw0KICAgICAgICAgIHZhciBsaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoY2hpbGRVUkwsIGZ1bmN0aW9uIChtc2cpIHsNCiAgICAgICAgICAgIC8vaWdub3JlIG1zZyBzZW50IGJ5IGhpbXNlbGYNCiAgICAgICAgICAgIGlmIChtc2cuZnJvbSAhPT0gX3RoaXMyLl9vd25lcikgew0KICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdC1DaGlsZHJlbi1SQ1Y6ICcsIG1zZyk7DQogICAgICAgICAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHsNCiAgICAgICAgICAgICAgICBjYXNlICdjcmVhdGUnOg0KICAgICAgICAgICAgICAgICAgX3RoaXMuX29uQ2hpbGRDcmVhdGUobXNnKTticmVhazsNCiAgICAgICAgICAgICAgICBjYXNlICdkZWxldGUnOg0KICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXNnKTticmVhazsNCiAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgX3RoaXMuX2NoYW5nZUNoaWxkcmVuKG1zZyk7YnJlYWs7DQogICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9KTsNCg0KICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsNCiAgICAgICAgfSk7DQogICAgICB9DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnX3JlbGVhc2VMaXN0ZW5lcnMnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVsZWFzZUxpc3RlbmVycygpIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikgew0KICAgICAgICBsaXN0ZW5lci5yZW1vdmUoKTsNCiAgICAgIH0pOw0KDQogICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKF90aGlzLl9jaGlsZHJlbk9iamVjdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgew0KICAgICAgICBfdGhpcy5fY2hpbGRyZW5PYmplY3RzW2tleV0uX3JlbGVhc2VMaXN0ZW5lcnMoKTsNCiAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIE9iamVjdCBVUkwgb2YgcmVwb3J0ZXIgb3Igb2JzZXJ2ZXINCiAgICAgKiBAdHlwZSB7T2JqZWN0VVJMfQ0KICAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdwYXVzZScsDQoNCg0KICAgIC8qKg0KICAgICAqIEBpZ25vcmUNCiAgICAgKi8NCiAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7DQogICAgICAvL1RPRE86IHRoaXMgZmVhdHVyZSBuZWVkcyBtb3JlIGFuYWxpc2UNCiAgICAgIHRocm93ICdOb3QgaW1wbGVtZW50ZWQnOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIEBpZ25vcmUNCiAgICAgKi8NCg0KICB9LCB7DQogICAga2V5OiAncmVzdW1lJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lKCkgew0KICAgICAgLy9UT0RPOiB0aGlzIGZlYXR1cmUgbmVlZHMgbW9yZSBhbmFsaXNlDQogICAgICB0aHJvdyAnTm90IGltcGxlbWVudGVkJzsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBAaWdub3JlDQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ3N0b3AnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBzdG9wKCkgew0KICAgICAgLy9UT0RPOiBzaG91bGQgcmVtb3ZlIHRoZSBzdWJzY3JpcHRpb24gYW5kIHNlbmQgbWVzc2FnZSB1bnN1YnNjcmliZT8NCiAgICAgIHRocm93ICdOb3QgaW1wbGVtZW50ZWQnOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIENyZWF0ZSBhbmQgYWRkIGEgRGF0YU9iamVjdENoaWxkIHRvIGEgY2hpbGRyZW4gY29sbGVjdGlvbi4NCiAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2hpbGRyZW4gLSBDaGlsZHJlbiBuYW1lIHdoZXJlIHRoZSBjaGlsZCBpcyBhZGRlZC4NCiAgICAgKiBAcGFyYW0ge0pTT059IGluaXRpYWxEYXRhIC0gSW5pdGlhbCBkYXRhIG9mIHRoZSBjaGlsZA0KICAgICAqIEByZXR1cm4ge1Byb21pc2U8RGF0YU9iamVjdENoaWxkPn0gLSBSZXR1cm4gUHJvbWlzZSB0byBhIG5ldyBEYXRhT2JqZWN0Q2hpbGQuDQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ2FkZENoaWxkJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ2hpbGQoY2hpbGRyZW4sIGluaXRpYWxEYXRhKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICAvL2NyZWF0ZSBuZXcgY2hpbGQgdW5pcXVlIElELCBiYXNlZCBvbiBoeXBlcnR5VVJMDQogICAgICBfdGhpcy5fY2hpbGRJZCsrOw0KICAgICAgdmFyIG1zZ0NoaWxkSWQgPSBfdGhpcy5fb3duZXIgKyAnIycgKyBfdGhpcy5fY2hpbGRJZDsNCiAgICAgIHZhciBtc2dDaGlsZFBhdGggPSBfdGhpcy5fdXJsICsgJy9jaGlsZHJlbi8nICsgY2hpbGRyZW47DQoNCiAgICAgIC8vRkxPVy1PVVQ6IHRoaXMgbWVzc2FnZSB3aWxsIGJlIHNlbnQgZGlyZWN0bHkgdG8gYSByZXNvdXJjZSBjaGlsZCBhZGRyZXNzOiBNZXNzYWdlQnVzDQogICAgICB2YXIgcmVxdWVzdE1zZyA9IHsNCiAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLl9vd25lciwgdG86IG1zZ0NoaWxkUGF0aCwNCiAgICAgICAgYm9keTogeyByZXNvdXJjZTogbXNnQ2hpbGRJZCwgdmFsdWU6IGluaXRpYWxEYXRhIH0NCiAgICAgIH07DQoNCiAgICAgIC8vcmV0dXJucyBwcm9taXNlLCBpbiB0aGUgZnV0dXJlLCB0aGUgQVBJIG1heSBjaGFuZ2UgdG8gYXN5bmNocm9ub3VzIGNhbGwNCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUpIHsNCiAgICAgICAgdmFyIG1zZ0lkID0gX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShyZXF1ZXN0TXNnKTsNCg0KICAgICAgICBjb25zb2xlLmxvZygnY3JlYXRlLXJlcG9ydGVyLWNoaWxkKCAnICsgX3RoaXMuX293bmVyICsgJyApOiAnLCByZXF1ZXN0TXNnKTsNCiAgICAgICAgdmFyIG5ld0NoaWxkID0gbmV3IF9EYXRhT2JqZWN0Q2hpbGQyLmRlZmF1bHQoX3RoaXMsIG1zZ0NoaWxkSWQsIGluaXRpYWxEYXRhLCBfdGhpcy5fb3duZXIsIG1zZ0lkKTsNCiAgICAgICAgbmV3Q2hpbGQub25DaGFuZ2UoZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgICAgX3RoaXMuX29uQ2hhbmdlKGV2ZW50LCB7IHBhdGg6IG1zZ0NoaWxkUGF0aCwgY2hpbGRJZDogbXNnQ2hpbGRJZCB9KTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgX3RoaXMuX2NoaWxkcmVuT2JqZWN0c1ttc2dDaGlsZElkXSA9IG5ld0NoaWxkOw0KDQogICAgICAgIHJlc29sdmUobmV3Q2hpbGQpOw0KICAgICAgfSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogU2V0dXAgdGhlIGNhbGxiYWNrIHRvIHByb2Nlc3MgY3JlYXRlIGFuZCBkZWxldGUgb2YgY2hpbGRyZW5zLg0KICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24oZXZlbnQ6IE1zZ0V2ZW50KX0gY2FsbGJhY2sNCiAgICAgKi8NCg0KICB9LCB7DQogICAga2V5OiAnb25BZGRDaGlsZCcsDQogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQWRkQ2hpbGQoY2FsbGJhY2spIHsNCiAgICAgIHRoaXMuX29uQWRkQ2hpbGRyZW5IYW5kbGVyID0gY2FsbGJhY2s7DQogICAgfQ0KDQogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gYSByZW1vdGUgRGF0YU9iamVjdCAtPiBhZGRDaGlsZA0KDQogIH0sIHsNCiAgICBrZXk6ICdfb25DaGlsZENyZWF0ZScsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNoaWxkQ3JlYXRlKG1zZykgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgIHZhciBtc2dDaGlsZElkID0gbXNnLmJvZHkucmVzb3VyY2U7DQoNCiAgICAgIGNvbnNvbGUubG9nKCdjcmVhdGUtb2JzZXJ2ZXItY2hpbGQoICcgKyBfdGhpcy5fb3duZXIgKyAnICk6ICcsIG1zZyk7DQogICAgICB2YXIgbmV3Q2hpbGQgPSBuZXcgX0RhdGFPYmplY3RDaGlsZDIuZGVmYXVsdChfdGhpcywgbXNnQ2hpbGRJZCwgbXNnLmJvZHkudmFsdWUpOw0KICAgICAgX3RoaXMuX2NoaWxkcmVuT2JqZWN0c1ttc2dDaGlsZElkXSA9IG5ld0NoaWxkOw0KDQogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgICAgLy9GTE9XLU9VVDogd2lsbCBmbG93IHRvIERhdGFPYmplY3RDaGlsZCAtPiBfb25SZXNwb25zZQ0KICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsNCiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSwNCiAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgc291cmNlOiBfdGhpcy5fb3duZXIgfQ0KICAgICAgICB9KTsNCiAgICAgIH0pOw0KDQogICAgICB2YXIgZXZlbnQgPSB7DQogICAgICAgIHR5cGU6IG1zZy50eXBlLA0KICAgICAgICBmcm9tOiBtc2cuZnJvbSwNCiAgICAgICAgdXJsOiBtc2cudG8sDQogICAgICAgIHZhbHVlOiBtc2cuYm9keS52YWx1ZSwNCiAgICAgICAgY2hpbGRJZDogbXNnQ2hpbGRJZCwNCiAgICAgICAgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5DQogICAgICB9Ow0KDQogICAgICBpZiAoX3RoaXMuX29uQWRkQ2hpbGRyZW5IYW5kbGVyKSB7DQogICAgICAgIGNvbnNvbGUubG9nKCdBREQtQ0hJTERSRU4tRVZFTlQ6ICcsIGV2ZW50KTsNCiAgICAgICAgX3RoaXMuX29uQWRkQ2hpbGRyZW5IYW5kbGVyKGV2ZW50KTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvL3NlbmQgZGVsdGEgbWVzc2FnZXMgdG8gc3Vic2NyaXB0aW9ucw0KDQogIH0sIHsNCiAgICBrZXk6ICdfb25DaGFuZ2UnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DaGFuZ2UoZXZlbnQsIGNoaWxkSW5mbykgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgX3RoaXMuX3ZlcnNpb24rKzsNCg0KICAgICAgaWYgKF90aGlzLl9zdGF0dXMgPT09ICdvbicpIHsNCiAgICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCBkaXJlY3RseSB0byBhIHJlc291cmNlIGNoYW5nZXMgYWRkcmVzczogTWVzc2FnZUJ1cw0KICAgICAgICB2YXIgY2hhbmdlTXNnID0gew0KICAgICAgICAgIHR5cGU6ICd1cGRhdGUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogX3RoaXMuX3VybCArICcvY2hhbmdlcycsDQogICAgICAgICAgYm9keTogeyB2ZXJzaW9uOiBfdGhpcy5fdmVyc2lvbiwgc291cmNlOiBfdGhpcy5fb3duZXIsIGF0dHJpYnV0ZTogZXZlbnQuZmllbGQgfQ0KICAgICAgICB9Ow0KDQogICAgICAgIGNvbnNvbGUubG9nKCdbRGF0YU9iamVjdCAtIF9vbkNoYW5nZV0gLSAnLCBldmVudCwgY2hpbGRJbmZvLCBjaGFuZ2VNc2cpOw0KDQogICAgICAgIGlmIChldmVudC5vVHlwZSA9PT0gX1Byb3h5T2JqZWN0Lk9iamVjdFR5cGUuT0JKRUNUKSB7DQogICAgICAgICAgaWYgKGV2ZW50LmNUeXBlICE9PSBfUHJveHlPYmplY3QuQ2hhbmdlVHlwZS5SRU1PVkUpIHsNCiAgICAgICAgICAgIGNoYW5nZU1zZy5ib2R5LnZhbHVlID0gZXZlbnQuZGF0YTsNCiAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgY2hhbmdlTXNnLmJvZHkuYXR0cmlidXRlVHlwZSA9IGV2ZW50Lm9UeXBlOw0KICAgICAgICAgIGNoYW5nZU1zZy5ib2R5LnZhbHVlID0gZXZlbnQuZGF0YTsNCiAgICAgICAgICBpZiAoZXZlbnQuY1R5cGUgIT09IF9Qcm94eU9iamVjdC5DaGFuZ2VUeXBlLlVQREFURSkgew0KICAgICAgICAgICAgY2hhbmdlTXNnLmJvZHkub3BlcmF0aW9uID0gZXZlbnQuY1R5cGU7DQogICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgLy9jaGlsZEluZm8gbXVzdCBoYXZlIChwYXRoLCBjaGlsZElkKQ0KICAgICAgICBpZiAoY2hpbGRJbmZvKSB7DQogICAgICAgICAgY2hhbmdlTXNnLnRvID0gY2hpbGRJbmZvLnBhdGg7DQogICAgICAgICAgY2hhbmdlTXNnLmJvZHkucmVzb3VyY2UgPSBjaGlsZEluZm8uY2hpbGRJZDsNCiAgICAgICAgfQ0KDQogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoY2hhbmdlTXNnKTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvL0ZMT1ctSU46IGRlbHRhIG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBhIHJlbW90ZSBEYXRhT2JqZWN0UmVwb3J0ZXIgb3IgRGF0YU9iamVjdENoaWxkIHdoZW4gY2hhbmdpbmcgZGF0YQ0KDQogIH0sIHsNCiAgICBrZXk6ICdfY2hhbmdlT2JqZWN0JywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX2NoYW5nZU9iamVjdChzeW5jT2JqLCBtc2cpIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIC8vVE9ETzogdXBkYXRlIHZlcnNpb24gPw0KICAgICAgLy9ob3cgdG8gaGFuZGxlIGFuIGluY29ycmVjdCB2ZXJzaW9uID8gRXhhbXBsZTogcmVjZWl2ZSBhIHZlcnNpb24gMyB3aGVuIHRoZSBvYnNlcnZlciBpcyBpbiB2ZXJzaW9uIDEsIHdoZXJlIGlzIHRoZSB2ZXJzaW9uIDIgPw0KICAgICAgLy93aWxsIHdlIG5lZWQgdG8gY29uZmlybSB0aGUgcmVjZXB0aW9uID8NCiAgICAgIGlmIChfdGhpcy5fdmVyc2lvbiArIDEgPT09IG1zZy5ib2R5LnZlcnNpb24pIHsNCiAgICAgICAgX3RoaXMuX3ZlcnNpb24rKzsNCiAgICAgICAgdmFyIHBhdGggPSBtc2cuYm9keS5hdHRyaWJ1dGU7DQogICAgICAgIHZhciB2YWx1ZSA9ICgwLCBfdXRpbHMuZGVlcENsb25lKShtc2cuYm9keS52YWx1ZSk7DQogICAgICAgIHZhciBmaW5kUmVzdWx0ID0gc3luY09iai5maW5kQmVmb3JlKHBhdGgpOw0KDQogICAgICAgIGlmIChtc2cuYm9keS5hdHRyaWJ1dGVUeXBlID09PSBfUHJveHlPYmplY3QuT2JqZWN0VHlwZS5BUlJBWSkgew0KICAgICAgICAgIGlmIChtc2cuYm9keS5vcGVyYXRpb24gPT09IF9Qcm94eU9iamVjdC5DaGFuZ2VUeXBlLkFERCkgew0KICAgICAgICAgICAgdmFyIGFyciA9IGZpbmRSZXN1bHQub2JqOw0KICAgICAgICAgICAgdmFyIGluZGV4ID0gZmluZFJlc3VsdC5sYXN0Ow0KICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNwbGljZS5hcHBseShhcnIsIFtpbmRleCwgMF0uY29uY2F0KHZhbHVlKSk7DQogICAgICAgICAgfSBlbHNlIGlmIChtc2cuYm9keS5vcGVyYXRpb24gPT09IF9Qcm94eU9iamVjdC5DaGFuZ2VUeXBlLlJFTU9WRSkgew0KICAgICAgICAgICAgdmFyIF9hcnIgPSBmaW5kUmVzdWx0Lm9iajsNCiAgICAgICAgICAgIHZhciBfaW5kZXggPSBmaW5kUmVzdWx0Lmxhc3Q7DQogICAgICAgICAgICBfYXJyLnNwbGljZShfaW5kZXgsIHZhbHVlKTsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZmluZFJlc3VsdC5vYmpbZmluZFJlc3VsdC5sYXN0XSA9IHZhbHVlOyAvLyBVUERBVEUNCiAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgaWYgKG1zZy5ib2R5LnZhbHVlKSB7DQogICAgICAgICAgICBmaW5kUmVzdWx0Lm9ialtmaW5kUmVzdWx0Lmxhc3RdID0gdmFsdWU7IC8vIFVQREFURSBvciBBREQNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgZGVsZXRlIGZpbmRSZXN1bHQub2JqW2ZpbmRSZXN1bHQubGFzdF07IC8vIFJFTU9WRQ0KICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgLy9UT0RPOiBob3cgdG8gaGFuZGxlIHVuc3luY2hyb25pemVkIHZlcnNpb25zPw0KICAgICAgICBjb25zb2xlLmxvZygnVU5TWU5DSFJPTklaRUQgVkVSU0lPTjogKGRhdGEgPT4gJyArIF90aGlzLl92ZXJzaW9uICsgJywgbXNnID0+ICcgKyBtc2cuYm9keS52ZXJzaW9uICsgJyknKTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBhIHJlbW90ZSBEYXRhT2JqZWN0Q2hpbGQgd2hlbiBjaGFuZ2luZyBkYXRhDQoNCiAgfSwgew0KICAgIGtleTogJ19jaGFuZ2VDaGlsZHJlbicsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9jaGFuZ2VDaGlsZHJlbihtc2cpIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQogICAgICBjb25zb2xlLmxvZygnQ2hhbmdlIGNoaWxkcmVuOiAnLCBfdGhpcy5fb3duZXIsIG1zZyk7DQoNCiAgICAgIHZhciBjaGlsZElkID0gbXNnLmJvZHkucmVzb3VyY2U7DQogICAgICB2YXIgY2hpbGRyZW4gPSBfdGhpcy5fY2hpbGRyZW5PYmplY3RzW2NoaWxkSWRdOw0KDQogICAgICBpZiAoY2hpbGRyZW4pIHsNCiAgICAgICAgX3RoaXMuX2NoYW5nZU9iamVjdChjaGlsZHJlbi5fc3luY09iaiwgbXNnKTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIGNvbnNvbGUubG9nKCdObyBjaGlsZHJlbiBmb3VuZCBmb3I6ICcsIGNoaWxkSWQpOw0KICAgICAgfQ0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ3VybCcsDQogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICByZXR1cm4gdGhpcy5fdXJsOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIE9iamVjdCBzY2hlbWEgVVJMICh0aGlzIGZpZWxkIGlzIG5vdCB5ZXQgc3RhYmxlLCBhbmQgaXMgc3Vic2plY3QgdG8gY2hhbmdlKQ0KICAgICAqIEB0eXBlIHtTY2hlbWFVUkx9DQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ3NjaGVtYScsDQogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICByZXR1cm4gdGhpcy5fc2NoZW1hOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFN0YXR1cyBvZiB0aGUgcmVwb3J0ZXIgb3Igb2JzZXJ2ZXIgY29ubmVjdGlvbiAodGhpcyBmaWVsZCBpcyBub3QgeWV0IHN0YWJsZSwgYW5kIGlzIHN1YnNqZWN0IHRvIGNoYW5nZSkNCiAgICAgKiBAdHlwZSB7U3RhdHVzfSAtIEVudW0gb2Y6IG9uIHwgcGF1c2VkDQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ3N0YXR1cycsDQogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICByZXR1cm4gdGhpcy5fc3RhdHVzOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIERhdGEgc3RydWN0dXJlIHRvIGJlIHN5bmNocm9uaXplZC4NCiAgICAgKiBAdHlwZSB7SlNPTn0gLSBKU09OIHN0cnVjdHVyZSB0aGF0IHNob3VsZCBmb2xsb3cgdGhlIGRlZmluZWQgc2NoZW1hLCBpZiBhbnkuDQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ2RhdGEnLA0KICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgcmV0dXJuIHRoaXMuX3N5bmNPYmouZGF0YTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBBbGwgY3JlYXRlZCBjaGlsZHJlbidzIHNpbmNlIHRoZSBzdWJzY3JpcHRpb24sIGRvZXNuJ3QgY29udGFpbiBhbGwgY2hpbGRyZW4ncyBzaW5jZSByZXBvcnRlciBjcmVhdGlvbi4NCiAgICAgKiBAdHlwZSB7T2JqZWN0PENoaWxkSWQsIERhdGFPYmplY3RDaGlsZD59DQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ2NoaWxkcmVucycsDQogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW5PYmplY3RzOw0KICAgIH0NCiAgfV0pOw0KICByZXR1cm4gRGF0YU9iamVjdDsNCn0oKTsgLyoqDQogICAgICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQogICAgICogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQNCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KICAgICAqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQ0KICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTg0KICAgICAqDQogICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KICAgICAqDQogICAgICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCiAgICAgKg0KICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCiAgICAgKiovDQoNCmV4cG9ydHMuZGVmYXVsdCA9IERhdGFPYmplY3Q7DQptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsNCg0KLyoqKi8gfSksDQovKiAxMjEgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KInVzZSBzdHJpY3QiOw0KDQoNCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsNCiAgdmFsdWU6IHRydWUNCn0pOw0KDQp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7DQoNCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsNCg0KdmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTsNCg0KdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOw0KDQp2YXIgX1Byb3h5T2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjIpOw0KDQp2YXIgX1Byb3h5T2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb3h5T2JqZWN0KTsNCg0KZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0NCg0KLyoqDQogKiBUaGUgY2xhc3MgcmV0dXJuZWQgZnJvbSB0aGUgRGF0YU9iamVjdCBhZGRDaGlsZHJlbiBjYWxsIG9yIGZyb20gb25BZGRDaGlsZHJlbiBpZiByZW1vdGVseSBjcmVhdGVkLg0KICogQ2hpbGRyZW4gb2JqZWN0IHN5bmNocm9uaXphdGlvbiBpcyBhIGEgZmFzdCBmb3J3YXJkIG1lY2hhbmlzbSwgbm8gbmVlZCBmb3IgZGlyZWN0IHN1YnNjcmlwdGlvbnMsIGl0IHVzZXMgdGhlIGFscmVhZHkgYXV0aG9yaXplZCBzdWJzY3JpcHRpb24gZnJvbSB0aGUgcGFyZW50IERhdGFPYmplY3QuDQogKi8NCnZhciBEYXRhT2JqZWN0Q2hpbGQgLyogaW1wbGVtZW50cyBTeW5jU3RhdHVzICovID0gZnVuY3Rpb24gKCkgew0KICAvKiBwcml2YXRlDQogICAtLS0tZXZlbnQgaGFuZGxlcnMtLS0tDQogIF9vblJlc3BvbnNlSGFuZGxlcjogKGV2ZW50KSA9PiB2b2lkDQogICovDQoNCiAgLyoqDQogICAqIEBpZ25vcmUNCiAgICogU2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5IGJ5IEh5cGVydGllcy4gSXQncyBjYWxsZWQgYnkgdGhlIERhdGFPYmplY3QuYWRkQ2hpbGRyZW4NCiAgICovDQogIGZ1bmN0aW9uIERhdGFPYmplY3RDaGlsZChwYXJlbnQsIGNoaWxkSWQsIGluaXRpYWxEYXRhLCBvd25lciwgbXNnSWQpIHsNCiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBEYXRhT2JqZWN0Q2hpbGQpOw0KDQogICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7DQogICAgX3RoaXMuX2NoaWxkSWQgPSBjaGlsZElkOw0KICAgIF90aGlzLl9vd25lciA9IG93bmVyOw0KICAgIF90aGlzLl9tc2dJZCA9IG1zZ0lkOw0KDQogICAgX3RoaXMuX3N5bmNPYmogPSBuZXcgX1Byb3h5T2JqZWN0Mi5kZWZhdWx0KGluaXRpYWxEYXRhKTsNCg0KICAgIF90aGlzLl9idXMgPSBwYXJlbnQuX2J1czsNCiAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTsNCiAgfQ0KDQogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERhdGFPYmplY3RDaGlsZCwgW3sNCiAgICBrZXk6ICdfYWxsb2NhdGVMaXN0ZW5lcnMnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICAvL3RoaXMgaXMgb25seSBuZWVkZWQgZm9yIGNoaWxkcmVuIHJlcG9ydGVycw0KICAgICAgaWYgKF90aGlzLl9vd25lcikgew0KICAgICAgICBfdGhpcy5fbGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKF90aGlzLl9vd25lciwgZnVuY3Rpb24gKG1zZykgew0KICAgICAgICAgIGlmIChtc2cudHlwZSA9PT0gJ3Jlc3BvbnNlJyAmJiBtc2cuaWQgPT09IF90aGlzLl9tc2dJZCkgew0KICAgICAgICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3RDaGlsZC5vblJlc3BvbnNlOicsIG1zZyk7DQogICAgICAgICAgICBfdGhpcy5fb25SZXNwb25zZShtc2cpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICB9DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnX3JlbGVhc2VMaXN0ZW5lcnMnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVsZWFzZUxpc3RlbmVycygpIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIGlmIChfdGhpcy5fbGlzdGVuZXIpIHsNCiAgICAgICAgX3RoaXMuX2xpc3RlbmVyLnJlbW92ZSgpOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFJlbGVhc2UgYW5kIGRlbGV0ZSBvYmplY3QgZGF0YQ0KICAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdkZWxldGUnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKCkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgZGVsZXRlIF90aGlzLl9wYXJlbnQuX2NoaWxkcmVuW190aGlzLl9jaGlsZElkXTsNCg0KICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTsNCg0KICAgICAgLy9UT0RPOiBzZW5kIGRlbGV0ZSBtZXNzYWdlID8NCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBDaGlsZHJlbiBJRCBnZW5lcmF0ZWQgb24gYWRkQ2hpbGRyZW4uIFVuaXF1ZSBpZGVudGlmaWVyDQogICAgICogQHR5cGUge1VSTH0gLSBVUkwgb2YgdGhlIGZvcm1hdCA8SHlwZXJ0eVVSTD4jPG51bWVyaWMtc2VxdWVuY2U+DQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ29uQ2hhbmdlJywNCg0KDQogICAgLyoqDQogICAgICogUmVnaXN0ZXIgdGhlIGNoYW5nZSBsaXN0ZW5lcnMgc2VudCBieSB0aGUgcmVwb3J0ZXIgY2hpbGQNCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50OiBNc2dFdmVudCl9IGNhbGxiYWNrDQogICAgICovDQogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlKGNhbGxiYWNrKSB7DQogICAgICB0aGlzLl9zeW5jT2JqLm9ic2VydmUoZnVuY3Rpb24gKGV2ZW50KSB7DQogICAgICAgIGNhbGxiYWNrKGV2ZW50KTsNCiAgICAgIH0pOw0KICAgIH0NCg0KICAgIC8qKg0KICAgICAqIFNldHVwIHRoZSBjYWxsYmFjayB0byBwcm9jZXNzIHJlc3BvbnNlIG5vdGlmaWNhdGlvbnMgb2YgdGhlIGNyZWF0ZXMNCiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50OiBNc2dFdmVudCl9IGNhbGxiYWNrDQogICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ29uUmVzcG9uc2UnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBvblJlc3BvbnNlKGNhbGxiYWNrKSB7DQogICAgICB0aGlzLl9vblJlc3BvbnNlSGFuZGxlciA9IGNhbGxiYWNrOw0KICAgIH0NCg0KICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGEgcmVtb3RlIERhdGFPYmplY3QgLT4gX29uQ2hpbGRDcmVhdGUNCg0KICB9LCB7DQogICAga2V5OiAnX29uUmVzcG9uc2UnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZXNwb25zZShtc2cpIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIHZhciBldmVudCA9IHsNCiAgICAgICAgdHlwZTogbXNnLnR5cGUsDQogICAgICAgIHVybDogbXNnLmJvZHkuc291cmNlLA0KICAgICAgICBjb2RlOiBtc2cuYm9keS5jb2RlDQogICAgICB9Ow0KDQogICAgICBpZiAoX3RoaXMuX29uUmVzcG9uc2VIYW5kbGVyKSB7DQogICAgICAgIF90aGlzLl9vblJlc3BvbnNlSGFuZGxlcihldmVudCk7DQogICAgICB9DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnY2hpbGRJZCcsDQogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICByZXR1cm4gdGhpcy5fY2hpbGRJZDsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBEYXRhIFN0cnVjdHVyZSB0byBiZSBzeW5jaHJvbml6ZWQuDQogICAgICogQHR5cGUge0pTT059IC0gSlNPTiBzdHJ1Y3R1cmUgdGhhdCBzaG91bGQgZm9sbG93IHRoZSBkZWZpbmVkIHNjaGVtYSwgaWYgYW55Lg0KICAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdkYXRhJywNCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgIHJldHVybiB0aGlzLl9zeW5jT2JqLmRhdGE7DQogICAgfQ0KICB9XSk7DQogIHJldHVybiBEYXRhT2JqZWN0Q2hpbGQ7DQp9KCk7IC8qKg0KICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQogICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQogICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQogICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQogICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCiAgICAgKg0KICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAgICAgKg0KICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogICAgICoNCiAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogICAgICoqLw0KDQpleHBvcnRzLmRlZmF1bHQgPSBEYXRhT2JqZWN0Q2hpbGQ7DQptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsNCg0KLyoqKi8gfSksDQovKiAxMjIgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KInVzZSBzdHJpY3QiOw0KDQoNCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsNCiAgdmFsdWU6IHRydWUNCn0pOw0KZXhwb3J0cy5PYmplY3RUeXBlID0gZXhwb3J0cy5DaGFuZ2VUeXBlID0gdW5kZWZpbmVkOw0KDQp2YXIgX3N0cmluZ2lmeSA9IF9fd2VicGFja19yZXF1aXJlX18oNDApOw0KDQp2YXIgX3N0cmluZ2lmeTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdHJpbmdpZnkpOw0KDQp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7DQoNCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsNCg0KdmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTsNCg0KdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOw0KDQpfX3dlYnBhY2tfcmVxdWlyZV9fKDE1Myk7DQoNCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9DQoNCnZhciBvYmplY3RUeXBlID0geyBBUlJBWTogJ1tvYmplY3QgQXJyYXldJywgT0JKRUNUOiAnW29iamVjdCBPYmplY3RdJyB9Ow0KDQovKioNCiAqIEBhY2Nlc3MgcHJpdmF0ZQ0KICogTWFpbiBjbGFzcyB0aGF0IG1haW50YWlucyBhIEpTT04gb2JqZWN0LCBhbmQgb2JzZXJ2ZXMgY2hhbmdlcyBpbiB0aGlzIG9iamVjdCwgcmVjdXJzaXZlbHkuDQogKiBJbnRlcm5hbCBvYmplY3RzIGFuZCBhcnJheXMgYXJlIGFsc28gb2JzZXJ2ZWQuDQogKi8NCg0KdmFyIFN5bmNPYmplY3QgPSBmdW5jdGlvbiAoKSB7DQogIGZ1bmN0aW9uIFN5bmNPYmplY3QoaW5pdGlhbERhdGEpIHsNCiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTeW5jT2JqZWN0KTsNCg0KICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICBfdGhpcy5fb2JzZXJ2ZXJzID0gW107DQogICAgX3RoaXMuX2ZpbHRlcnMgPSB7fTsNCg0KICAgIHRoaXMuX2RhdGEgPSBpbml0aWFsRGF0YSB8fCB7fTsNCg0KICAgIHRoaXMuX2ludGVybmFsT2JzZXJ2ZSh0aGlzLl9kYXRhKTsNCiAgfQ0KDQogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFN5bmNPYmplY3QsIFt7DQogICAga2V5OiAnb2JzZXJ2ZScsDQogICAgdmFsdWU6IGZ1bmN0aW9uIG9ic2VydmUoY2FsbGJhY2spIHsNCiAgICAgIHRoaXMuX29ic2VydmVycy5wdXNoKGNhbGxiYWNrKTsNCiAgICB9DQogIH0sIHsNCiAgICBrZXk6ICdmaW5kJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gZmluZChwYXRoKSB7DQogICAgICB2YXIgbGlzdCA9IHBhdGguc3BsaXQoJy4nKTsNCg0KICAgICAgcmV0dXJuIHRoaXMuX2ZpbmRXaXRoU3BsaXQobGlzdCk7DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnZmluZEJlZm9yZScsDQogICAgdmFsdWU6IGZ1bmN0aW9uIGZpbmRCZWZvcmUocGF0aCkgew0KICAgICAgdmFyIHJlc3VsdCA9IHt9Ow0KICAgICAgdmFyIGxpc3QgPSBwYXRoLnNwbGl0KCcuJyk7DQogICAgICByZXN1bHQubGFzdCA9IGxpc3QucG9wKCk7DQogICAgICByZXN1bHQub2JqID0gdGhpcy5fZmluZFdpdGhTcGxpdChsaXN0KTsNCg0KICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICB9DQogIH0sIHsNCiAgICBrZXk6ICdfZmluZFdpdGhTcGxpdCcsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kV2l0aFNwbGl0KGxpc3QpIHsNCiAgICAgIHZhciBvYmogPSB0aGlzLl9kYXRhOw0KICAgICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgew0KICAgICAgICBvYmogPSBvYmpbdmFsdWVdOw0KICAgICAgfSk7DQoNCiAgICAgIHJldHVybiBvYmo7DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnX2lzT2JzZXJ2YWJsZScsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9pc09ic2VydmFibGUob2JqKSB7DQogICAgICBpZiAob2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QgfHwgb2JqLmNvbnN0cnVjdG9yID09PSBBcnJheSkgew0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgIH0NCg0KICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ19pbnRlcm5hbE9ic2VydmUnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfaW50ZXJuYWxPYnNlcnZlKG9iamVjdCkgew0KICAgICAgdmFyIF90aGlzMiA9IHRoaXM7DQoNCiAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihjaGFuZ2VzZXQpIHsNCg0KICAgICAgICBjaGFuZ2VzZXQuZXZlcnkoZnVuY3Rpb24gKGNoYW5nZSkgew0KICAgICAgICAgIF90aGlzMi5fb25DaGFuZ2VzKGNoYW5nZSk7DQogICAgICAgIH0pOw0KICAgICAgfTsNCg0KICAgICAgdGhpcy5fZGF0YSA9IE9iamVjdC5kZWVwT2JzZXJ2ZShvYmplY3QsIGhhbmRsZXIpOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ19maXJlRXZlbnQnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlyZUV2ZW50KGV2ZW50KSB7DQogICAgICB0aGlzLl9vYnNlcnZlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2FsbGJhY2spIHsNCiAgICAgICAgY2FsbGJhY2soZXZlbnQpOw0KICAgICAgfSk7DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnX29uQ2hhbmdlcycsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNoYW5nZXMoY2hhbmdlKSB7DQoNCiAgICAgIHZhciBvYmogPSBjaGFuZ2Uub2JqZWN0Ow0KICAgICAgdmFyIG9ialR5cGUgPSB2b2lkIDA7DQoNCiAgICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IE9iamVjdCkgew0KICAgICAgICBvYmpUeXBlID0gT2JqZWN0VHlwZS5PQkpFQ1Q7DQogICAgICB9DQoNCiAgICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IEFycmF5KSB7DQogICAgICAgIG9ialR5cGUgPSBPYmplY3RUeXBlLkFSUkFZOw0KICAgICAgfQ0KDQogICAgICB2YXIgZmllbGRTdHJpbmcgPSBjaGFuZ2Uua2V5cGF0aDsNCg0KICAgICAgLy8gY29uc29sZS5sb2coJ0ZpZWxkOicsIGZpZWxkU3RyaW5nKTsNCiAgICAgIC8vIGNvbnNvbGUubG9nKCd0eXBlOicsIGNoYW5nZS50eXBlKTsNCg0KICAgICAgLy9sZXQgb2xkVmFsdWUgPSBjaGFuZ2Uub2xkVmFsdWU7DQogICAgICB2YXIgbmV3VmFsdWUgPSBvYmpbY2hhbmdlLm5hbWVdOw0KDQogICAgICBjb25zb2xlLmluZm8oY2hhbmdlLnR5cGUgKyAnIHwgRmllbGQ6ICcgKyBmaWVsZFN0cmluZyArICcgfCBOZXcgVmFsdWU6JywgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG5ld1ZhbHVlKSk7DQoNCiAgICAgIGlmIChjaGFuZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHsNCiAgICAgICAgdGhpcy5fZmlyZUV2ZW50KHsNCiAgICAgICAgICBjVHlwZTogQ2hhbmdlVHlwZS5VUERBVEUsDQogICAgICAgICAgb1R5cGU6IG9ialR5cGUsDQogICAgICAgICAgZmllbGQ6IGZpZWxkU3RyaW5nLA0KICAgICAgICAgIGRhdGE6IG5ld1ZhbHVlDQogICAgICAgIH0pOw0KICAgICAgfQ0KDQogICAgICBpZiAoY2hhbmdlLnR5cGUgPT09ICdhZGQnKSB7DQogICAgICAgIHRoaXMuX2ZpcmVFdmVudCh7DQogICAgICAgICAgY1R5cGU6IENoYW5nZVR5cGUuQURELA0KICAgICAgICAgIG9UeXBlOiBvYmpUeXBlLA0KICAgICAgICAgIGZpZWxkOiBmaWVsZFN0cmluZywNCiAgICAgICAgICBkYXRhOiBuZXdWYWx1ZQ0KICAgICAgICB9KTsNCiAgICAgIH0NCg0KICAgICAgaWYgKGNoYW5nZS50eXBlID09PSAnZGVsZXRlJykgew0KICAgICAgICB0aGlzLl9maXJlRXZlbnQoew0KICAgICAgICAgIGNUeXBlOiBDaGFuZ2VUeXBlLlJFTU9WRSwNCiAgICAgICAgICBvVHlwZTogb2JqVHlwZSwNCiAgICAgICAgICBmaWVsZDogZmllbGRTdHJpbmcNCiAgICAgICAgfSk7DQogICAgICB9DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnZGF0YScsDQogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICByZXR1cm4gdGhpcy5fZGF0YTsNCiAgICB9DQogIH1dKTsNCiAgcmV0dXJuIFN5bmNPYmplY3Q7DQp9KCk7DQoNCnZhciBDaGFuZ2VUeXBlID0gZXhwb3J0cy5DaGFuZ2VUeXBlID0geyBVUERBVEU6ICd1cGRhdGUnLCBBREQ6ICdhZGQnLCBSRU1PVkU6ICdyZW1vdmUnIH07DQp2YXIgT2JqZWN0VHlwZSA9IGV4cG9ydHMuT2JqZWN0VHlwZSA9IHsgT0JKRUNUOiAnb2JqZWN0JywgQVJSQVk6ICdhcnJheScgfTsNCmV4cG9ydHMuZGVmYXVsdCA9IFN5bmNPYmplY3Q7DQoNCi8qKiovIH0pLA0KLyogMTIzICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCiJ1c2Ugc3RyaWN0IjsNCg0KDQpleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOw0KDQp2YXIgX2dldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7DQoNCnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpOw0KDQp2YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTM4KTsNCg0KdmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKTsNCg0KZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0NCg0KZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gZ2V0KG9iamVjdCwgcHJvcGVydHksIHJlY2VpdmVyKSB7DQogIGlmIChvYmplY3QgPT09IG51bGwpIG9iamVjdCA9IEZ1bmN0aW9uLnByb3RvdHlwZTsNCiAgdmFyIGRlc2MgPSAoMCwgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIuZGVmYXVsdCkob2JqZWN0LCBwcm9wZXJ0eSk7DQoNCiAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgew0KICAgIHZhciBwYXJlbnQgPSAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShvYmplY3QpOw0KDQogICAgaWYgKHBhcmVudCA9PT0gbnVsbCkgew0KICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9IGVsc2Ugew0KICAgICAgcmV0dXJuIGdldChwYXJlbnQsIHByb3BlcnR5LCByZWNlaXZlcik7DQogICAgfQ0KICB9IGVsc2UgaWYgKCJ2YWx1ZSIgaW4gZGVzYykgew0KICAgIHJldHVybiBkZXNjLnZhbHVlOw0KICB9IGVsc2Ugew0KICAgIHZhciBnZXR0ZXIgPSBkZXNjLmdldDsNCg0KICAgIGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkgew0KICAgICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgICB9DQoNCiAgICByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOw0KICB9DQp9Ow0KDQovKioqLyB9KSwNCi8qIDEyNCAqLywNCi8qIDEyNSAqLywNCi8qIDEyNiAqLywNCi8qIDEyNyAqLywNCi8qIDEyOCAqLywNCi8qIDEyOSAqLywNCi8qIDEzMCAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCg0KT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgew0KICB2YWx1ZTogdHJ1ZQ0KfSk7DQoNCnZhciBfcHJvbWlzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNzEpOw0KDQp2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7DQoNCnZhciBfYXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzYpOw0KDQp2YXIgX2Fzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hc3NpZ24pOw0KDQp2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7DQoNCnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsNCg0KdmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTsNCg0KdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOw0KDQp2YXIgX0RhdGFPYmplY3RSZXBvcnRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTE5KTsNCg0KdmFyIF9EYXRhT2JqZWN0UmVwb3J0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdFJlcG9ydGVyKTsNCg0KdmFyIF9EYXRhT2JqZWN0T2JzZXJ2ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOCk7DQoNCnZhciBfRGF0YU9iamVjdE9ic2VydmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGFPYmplY3RPYnNlcnZlcik7DQoNCnZhciBfRGF0YVByb3Zpc2lvbmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzMpOw0KDQp2YXIgX0RhdGFQcm92aXNpb25hbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhUHJvdmlzaW9uYWwpOw0KDQpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQ0KDQovKioNCiogVGhlIG1haW4gY2xhc3MgZm9yIHRoZSBzeW5jaGVyIHBhY2thZ2UuDQoqIFRoZSBTeW5jaGVyIGlzIGEgc2luZ2xldG9uIGNsYXNzIHBlciBIeXBlcnR5L1VSTCBhbmQgaXQgaXMgdGhlIG93bmVyIG9mIGFsbCBjcmVhdGVkIERhdGEgU3luYyBPYmplY3RzIGFjY29yZGluZyB0byB0aGUgUmVwb3J0ZXIgLSBPYnNlcnZlciBwYXR0ZXJuLg0KKiBNYWluIGZ1bmN0aW9uYWxpdHkgaXMgdG8gY3JlYXRlIHJlcG9ydGVycyBhbmQgdG8gc3Vic2NyaWJlIHRvIGV4aXN0aW5nIG9uZXMuDQoqLw0KdmFyIFN5bmNoZXIgPSBmdW5jdGlvbiAoKSB7DQogIC8qIHByaXZhdGUNCiAgX293bmVyOiBVUkwNCiAgX2J1czogTWluaUJ1cw0KICAgX3N1YlVSTDogVVJMDQogICBfcmVwb3J0ZXJzOiA8dXJsOiBEYXRhT2JqZWN0UmVwb3J0ZXI+DQogIF9vYnNlcnZlcnM6IDx1cmw6IERhdGFPYmplY3RPYnNlcnZlcj4NCiAgX3Byb3Zpc2lvbmFsczogPHVybDogRGF0YVByb3Zpc2lvbmFsPg0KICAgLS0tLWV2ZW50IGhhbmRsZXJzLS0tLQ0KICBfb25Ob3RpZmljYXRpb25IYW5kbGVyOiAoZXZlbnQpID0+IHZvaWQNCiAgX29uUmVzdW1lOiAoZXZlbnQpID0+IHZvaWQNCiAgKi8NCg0KICAvKioNCiAgKiBDb25zdHJ1Y3RvciB0aGF0IHNob3VsZCBiZSB1c2VkIGJ5IHRoZSBIeXBlcnR5IG93bmVyDQogICogQHBhcmFtIHtIeXBlcnR5VVJMfSBvd25lciAtIEh5cGVydHkgVVJMIG93bmVyLiBBbiBVUkwgYWxsb2NhdGVkIGJ5IHRoZSBydW50aW1lIHRoYXQgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgSHlwZXJ0eS4NCiAgKiBAcGFyYW0ge01pbmlCdXN9IGJ1cyAtIEFuIGluc3RhbmNlIG9mIHRoZSBNaW5pQnVzIHByb3ZpZGVkIGluIHRoZSBzYW5kYm94LiBXaGVuIGFuIG9iamVjdCAoUmVwb3J0ZXIgb3IgT2JzZXJ2ZWQpIGlzIGNyZWF0ZWQsIHRoZSBTeW5jaGVyTWFuYWdlciB3aWxsIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBNaW5pQnVzIHRvIHJlY2VpdmUvc2VuZCBNZXNzYWdlcyBvZiB0aGF0IG9iamVjdC4NCiAgKiBAcGFyYW0ge0pTT059IGNvbmZpZyAtIENvbmZpZ3VyYXRpb24gZGF0YS4gVGhlIG9ubHkgcmVxdWlyZWQgZmllbGQgZm9yIG5vdyBpcyB0aGUgcnVudGltZVVSTC4NCiAgKi8NCiAgZnVuY3Rpb24gU3luY2hlcihvd25lciwgYnVzLCBjb25maWcpIHsNCiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTeW5jaGVyKTsNCg0KICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICBfdGhpcy5fb3duZXIgPSBvd25lcjsNCiAgICBfdGhpcy5fYnVzID0gYnVzOw0KDQogICAgX3RoaXMuX3N1YlVSTCA9IGNvbmZpZy5ydW50aW1lVVJMICsgJy9zbSc7DQoNCiAgICBfdGhpcy5fcmVwb3J0ZXJzID0ge307DQogICAgX3RoaXMuX29ic2VydmVycyA9IHt9Ow0KICAgIF90aGlzLl9wcm92aXNpb25hbHMgPSB7fTsNCg0KICAgIGJ1cy5hZGRMaXN0ZW5lcihvd25lciwgZnVuY3Rpb24gKG1zZykgew0KICAgICAgLy9pZ25vcmUgbXNnIHNlbnQgYnkgaGltc2VsZg0KICAgICAgaWYgKG1zZy5mcm9tICE9PSBvd25lcikgew0KICAgICAgICBjb25zb2xlLmluZm8oJ1tTeW5jaGVyXSBTeW5jaGVyLVJDVjogJywgbXNnKTsNCiAgICAgICAgc3dpdGNoIChtc2cudHlwZSkgew0KICAgICAgICAgIGNhc2UgJ2ZvcndhcmQnOg0KICAgICAgICAgICAgX3RoaXMuX29uRm9yd2FyZChtc2cpO2JyZWFrOw0KICAgICAgICAgIGNhc2UgJ2NyZWF0ZSc6DQogICAgICAgICAgICBfdGhpcy5fb25SZW1vdGVDcmVhdGUobXNnKTticmVhazsNCiAgICAgICAgICBjYXNlICdkZWxldGUnOg0KICAgICAgICAgICAgX3RoaXMuX29uUmVtb3RlRGVsZXRlKG1zZyk7YnJlYWs7DQogICAgICAgIH0NCiAgICAgIH0NCiAgICB9KTsNCiAgfQ0KDQogIC8qKg0KICAqIFRoZSBvd25lciBvZiB0aGUgU3luY2hlciBhbmQgYWxsIGNyZWF0ZWQgcmVwb3J0ZXJzLg0KICAqIEB0eXBlIHtIeXBlcnR5VVJMfQ0KICAqLw0KDQoNCiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3luY2hlciwgW3sNCiAgICBrZXk6ICdjcmVhdGUnLA0KDQoNCiAgICAvKioNCiAgICAqIFJlcXVlc3QgYSBEYXRhT2JqZWN0UmVwb3J0ZXIgY3JlYXRpb24uIFRoZSBVUkwgd2lsbCBiZSBiZSByZXF1ZXN0ZWQgYnkgdGhlIGFsbG9jYXRpb24gbWVjaGFuaXNtLg0KICAgICogQHBhcmFtICB7U2NoZW1hVVJMfSBzY2hlbWEgLSBIeXBlcnR5IENhdGFsb2d1ZSBVUkwgYWRkcmVzcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHJldHJpZXZlIHRoZSBKU09OLVNjaGVtYSBkZXNjcmliaW5nIHRoZSBEYXRhIE9iamVjdCBzY2hlbWENCiAgICAqIEBwYXJhbSAge0h5cGVydHlVUkxbXX0gb2JzZXJ2ZXJzIC0gTGlzdCBvZiBoeXBlcnRpZXMgdGhhdCBhcmUgcHJlLWF1dGhvcml6ZWQgZm9yIHN1YnNjcmlwdGlvbg0KICAgICogQHBhcmFtICB7SlNPTn0gaW5pdGlhbERhdGEgLSBJbml0aWFsIGRhdGEgb2YgdGhlIHJlcG9ydGVyDQogICAgKiBAcGFyYW0gIHtzdHJpbmd9IG9iamVjdFVSTCAtIHJldXNhYmxlIGRhdGFPYmplY3QgVVJMDQogICAgKiBAcmV0dXJuIHtQcm9taXNlPERhdGFPYmplY3RSZXBvcnRlcj59IFJldHVybiBQcm9taXNlIHRvIGEgbmV3IFJlcG9ydGVyLiBUaGUgcmVwb3J0ZXIgY2FuIGJlIGFjY2VwdGVkIG9yIHJlamVjdGVkIGJ5IHRoZSBQRVANCiAgICAqLw0KICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUoc2NoZW1hLCBvYnNlcnZlcnMsIGluaXRpYWxEYXRhKSB7DQogICAgICB2YXIgc3RvcmUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlOw0KICAgICAgdmFyIHAycCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogZmFsc2U7DQoNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQogICAgICB2YXIgY3JpdGVyaWEgPSB7fTsNCg0KICAgICAgY3JpdGVyaWEucDJwID0gcDJwOw0KICAgICAgY3JpdGVyaWEuc3RvcmUgPSBzdG9yZTsNCiAgICAgIGNyaXRlcmlhLnNjaGVtYSA9IHNjaGVtYTsNCiAgICAgIGNyaXRlcmlhLm9ic2VydmVycyA9IG9ic2VydmVyczsNCiAgICAgIGNyaXRlcmlhLmluaXRpYWxEYXRhID0gaW5pdGlhbERhdGE7DQoNCiAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIGNyZWF0ZV0gLSBjcmVhdGUgUmVwb3J0ZXIgLSBjcml0ZXJpYTogJywgY3JpdGVyaWEpOw0KDQogICAgICAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoY3JpdGVyaWEsIHsgcmVzdW1lOiBmYWxzZSB9KTsNCg0KICAgICAgcmV0dXJuIF90aGlzLl9jcmVhdGUoY3JpdGVyaWEpOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ3Jlc3VtZVJlcG9ydGVycycsDQogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZVJlcG9ydGVycyhjcml0ZXJpYSkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIGNyZWF0ZV0gLSByZXN1bWUgUmVwb3J0ZXIgLSBjcml0ZXJpYTogJywgY3JpdGVyaWEpOw0KDQogICAgICAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoY3JpdGVyaWEsIHsgcmVzdW1lOiB0cnVlIH0pOw0KDQogICAgICByZXR1cm4gX3RoaXMuX2NyZWF0ZShjcml0ZXJpYSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgKiBSZXF1ZXN0IGEgc3Vic2NyaXB0aW9uIHRvIGFuIGV4aXN0ZW50IHJlcG9ydGVyIG9iamVjdC4NCiAgICAqIEBwYXJhbSB7U2NoZW1hVVJMfSBzY2hlbWEgLSBIeXBlcnR5IENhdGFsb2d1ZSBVUkwgYWRkcmVzcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHJldHJpZXZlIHRoZSBKU09OLVNjaGVtYSBkZXNjcmliaW5nIHRoZSBEYXRhIE9iamVjdCBzY2hlbWENCiAgICAqIEBwYXJhbSB7T2JqZWN0VVJMfSBvYmpVUkwgLSBBZGRyZXNzIG9mIHRoZSBleGlzdGVudCByZXBvcnRlciBvYmplY3QgdG8gYmUgb2JzZXJ2ZWQNCiAgICAqIEByZXR1cm4ge1Byb21pc2U8RGF0YU9iamVjdE9ic2VydmVyPn0gUmV0dXJuIFByb21pc2UgdG8gYSBuZXcgb2JzZXJ2ZXIuIEl0J3MgYXNzb2NpYXRlZCB3aXRoIHRoZSByZXBvcnRlci4NCiAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdzdWJzY3JpYmUnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzY3JpYmUoc2NoZW1hLCBvYmpVUkwpIHsNCiAgICAgIHZhciBzdG9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7DQogICAgICB2YXIgcDJwID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTsNCg0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgIHZhciBjcml0ZXJpYSA9IHt9Ow0KDQogICAgICBjcml0ZXJpYS5wMnAgPSBwMnA7DQogICAgICBjcml0ZXJpYS5zdG9yZSA9IHN0b3JlOw0KICAgICAgY3JpdGVyaWEuc2NoZW1hID0gc2NoZW1hOw0KICAgICAgY3JpdGVyaWEucmVzb3VyY2UgPSBvYmpVUkw7DQoNCiAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIHN1YnNjcmliZV0gLSBzdWJzY3JpYmUgY3JpdGVyaWE6ICcsIGNyaXRlcmlhKTsNCg0KICAgICAgKDAsIF9hc3NpZ24yLmRlZmF1bHQpKGNyaXRlcmlhLCB7IHJlc3VtZTogZmFsc2UgfSk7DQoNCiAgICAgIHJldHVybiBfdGhpcy5fc3Vic2NyaWJlKGNyaXRlcmlhKTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAqIFJlcXVlc3QgYSBzdWJzY3JpcHRpb24gdG8gYW4gZXhpc3RlbnQgcmVwb3J0ZXIgb2JqZWN0Lg0KICAgICogQHBhcmFtIHtjcml0ZXJpYX0gY3JpdGVyaWEgLSBJbmZvcm1hdGlvbiB0byBkaXNjb3ZlcnkgdGhlIG9ic2VydmVyIG9iamVjdA0KICAgICogQHJldHVybiB7UHJvbWlzZTxEYXRhT2JqZWN0T2JzZXJ2ZXI+fSBSZXR1cm4gUHJvbWlzZSB0byBhIG5ldyBvYnNlcnZlci4gSXQncyBhc3NvY2lhdGVkIHdpdGggdGhlIHJlcG9ydGVyLg0KICAgICovDQoNCiAgfSwgew0KICAgIGtleTogJ3Jlc3VtZU9ic2VydmVycycsDQogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZU9ic2VydmVycyhjcml0ZXJpYSkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgIHZhciBfY3JpdGVyaWEgPSBjcml0ZXJpYSB8fCB7fTsNCg0KICAgICAgKDAsIF9hc3NpZ24yLmRlZmF1bHQpKF9jcml0ZXJpYSwgeyByZXN1bWU6IHRydWUgfSk7DQoNCiAgICAgIHJldHVybiBfdGhpcy5fc3Vic2NyaWJlKF9jcml0ZXJpYSk7DQogICAgfQ0KDQogICAgLyoqDQogICAgKiBSZXF1ZXN0IGEgcmVhZCBhY3Rpb24gb24gdGhlIHJlcG9ydGVyIG9iamVjdA0KICAgICogQHBhcmFtIHtPYmplY3RVUkx9IG9ialVSTCAtIFVSTCBvZiB0aGUgcmVwb3J0ZXIgb2JqZWN0IHRvIGJlIHJlYWQNCiAgICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn0gUmV0dXJuIFByb21pc2UgdG8gbGFzdCBhdmFpbGFibGUgZGF0YSBvZiB0aGUgcmVwb3J0ZXINCiAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdyZWFkJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVhZChvYmpVUkwpIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIC8vRkxPVy1PVVQ6IHRoaXMgbWVzc2FnZSB3aWxsIGJlIHNlbnQgZGlyZWN0bHkgdG8gcmVwb3J0ZXIgb2JqZWN0IChtYXliZSB0aGVyZSBpcyBubyBsaXN0ZW5lciBhdmFpbGFibGUsIHNvIGl0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBNZXNzYWdlQnVzIC0+IHJlc29sdmUpDQogICAgICAvL3dpbGwgcmVhY2ggdGhlIHJlbW90ZSBvYmplY3QgaW4gRGF0YU9iamVjdFJlcG9ydGVyIC0+IF9vblJlYWQNCiAgICAgIHZhciByZWFkTXNnID0gew0KICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLl9vd25lciwgdG86IG9ialVSTA0KICAgICAgfTsNCg0KICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7DQogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVhZE1zZywgZnVuY3Rpb24gKHJlcGx5KSB7DQogICAgICAgICAgY29uc29sZS5sb2coJ3JlYWQtcmVzcG9uc2U6ICcsIHJlcGx5KTsNCiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsNCiAgICAgICAgICAgIHJlc29sdmUocmVwbHkuYm9keS52YWx1ZSk7DQogICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAqIFNldHVwIHRoZSBjYWxsYmFjayB0byBwcm9jZXNzIGNyZWF0ZSBhbmQgZGVsZXRlIGV2ZW50cyBvZiByZW1vdmUgUmVwb3J0ZXIgb2JqZWN0cy4NCiAgICAqIFRoaXMgaXMgcmVsZWF0ZWQgdG8gdGhlIG1lc3NhZ2VucyBzZW50IGJ5IGNyZWF0ZSB0byB0aGUgb2JzZXJ2ZXJzIEh5cGVydHkgYXJyYXkuDQogICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50OiBNc2dFdmVudCl9IGNhbGxiYWNrDQogICAgKi8NCg0KICB9LCB7DQogICAga2V5OiAnb25Ob3RpZmljYXRpb24nLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBvbk5vdGlmaWNhdGlvbihjYWxsYmFjaykgew0KICAgICAgdGhpcy5fb25Ob3RpZmljYXRpb25IYW5kbGVyID0gY2FsbGJhY2s7DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnX2NyZWF0ZScsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGUoY3JpdGVyaWEpIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgew0KICAgICAgICB2YXIgcmVzdW1lID0gY3JpdGVyaWEucmVzdW1lOw0KICAgICAgICB2YXIgaW5pdGlhbERhdGEgPSBjcml0ZXJpYS5pbml0aWFsRGF0YSB8fCB7fTsNCiAgICAgICAgdmFyIHNjaGVtYSA9IHZvaWQgMDsNCg0KICAgICAgICAvL0ZMT1ctT1VUOiB0aGlzIG1lc3NhZ2Ugd2lsbCBiZSBzZW50IHRvIHRoZSBydW50aW1lIGluc3RhbmNlIG9mIFN5bmNoZXJNYW5hZ2VyIC0+IF9vbkNyZWF0ZQ0KICAgICAgICB2YXIgcmVxdWVzdE1zZyA9IHsNCiAgICAgICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogX3RoaXMuX293bmVyLCB0bzogX3RoaXMuX3N1YlVSTCwNCiAgICAgICAgICBib2R5OiB7IHJlc3VtZTogcmVzdW1lIH0NCiAgICAgICAgfTsNCg0KICAgICAgICBjb25zb2xlLmxvZygnW3N5bmNoZXIgLSBjcmVhdGVdOiAnLCBjcml0ZXJpYSwgcmVxdWVzdE1zZyk7DQoNCiAgICAgICAgcmVxdWVzdE1zZy5ib2R5LnZhbHVlID0gaW5pdGlhbERhdGE7DQogICAgICAgIHJlcXVlc3RNc2cuYm9keS52YWx1ZS5yZXBvcnRlciA9IF90aGlzLl9vd25lcjsNCg0KICAgICAgICBpZiAoY3JpdGVyaWEuc2NoZW1hKSB7DQogICAgICAgICAgc2NoZW1hID0gY3JpdGVyaWEuc2NoZW1hOw0KICAgICAgICAgIHJlcXVlc3RNc2cuYm9keS5zY2hlbWEgPSBjcml0ZXJpYS5zY2hlbWE7DQogICAgICAgIH0NCg0KICAgICAgICBpZiAoY3JpdGVyaWEucDJwKSByZXF1ZXN0TXNnLmJvZHkucDJwID0gY3JpdGVyaWEucDJwOw0KICAgICAgICBpZiAoY3JpdGVyaWEuc3RvcmUpIHJlcXVlc3RNc2cuYm9keS5zdG9yZSA9IGNyaXRlcmlhLnN0b3JlOw0KICAgICAgICBpZiAoY3JpdGVyaWEub2JzZXJ2ZXJzKSByZXF1ZXN0TXNnLmJvZHkuYXV0aG9yaXNlID0gY3JpdGVyaWEub2JzZXJ2ZXJzOw0KDQogICAgICAgIGlmIChyZXN1bWUpIHsNCiAgICAgICAgICBjb25zb2xlLmxvZygnW3N5bmNoZXIgLSBjcmVhdGVdIC0gcmVzdW1lIG1lc3NhZ2U6ICcsIHJlcXVlc3RNc2cpOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIGNyZWF0ZV0gLSBjcmVhdGUgbWVzc2FnZTogJywgcmVxdWVzdE1zZyk7DQogICAgICAgIH0NCg0KICAgICAgICAvL3JlcXVlc3QgY3JlYXRlIHRvIHRoZSBhbGxvY2F0aW9uIHN5c3RlbS4gQ2FuIGJlIHJlamVjdGVkIGJ5IHRoZSBQb2xpY3lFbmdpbmUuDQogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVxdWVzdE1zZywgZnVuY3Rpb24gKHJlcGx5KSB7DQogICAgICAgICAgY29uc29sZS5sb2coJ1tzeW5jaGVyIC0gY3JlYXRlXSAtIGNyZWF0ZS1yZXNwb25zZTogJywgcmVwbHkpOw0KICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgew0KICAgICAgICAgICAgLy9yZXBvcnRlciBjcmVhdGlvbiBhY2NlcHRlZA0KICAgICAgICAgICAgdmFyIG9ialVSTCA9IHJlcGx5LmJvZHkucmVzb3VyY2U7DQoNCiAgICAgICAgICAgIGlmIChyZXN1bWUpIHsNCiAgICAgICAgICAgICAgc2NoZW1hID0gcmVwbHkuYm9keS5zY2hlbWE7DQogICAgICAgICAgICAgIGluaXRpYWxEYXRhID0gcmVwbHkuYm9keS52YWx1ZTsNCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgdmFyIG5ld09iaiA9IG5ldyBfRGF0YU9iamVjdFJlcG9ydGVyMi5kZWZhdWx0KF90aGlzLCBvYmpVUkwsIHNjaGVtYSwgJ29uJywgaW5pdGlhbERhdGEsIHJlcGx5LmJvZHkuY2hpbGRyZW5SZXNvdXJjZXMpOw0KICAgICAgICAgICAgX3RoaXMuX3JlcG9ydGVyc1tvYmpVUkxdID0gbmV3T2JqOw0KDQogICAgICAgICAgICByZXNvbHZlKG5ld09iaik7DQogICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIC8vcmVwb3J0ZXIgY3JlYXRpb24gcmVqZWN0ZWQNCiAgICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpOw0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQogICAgICB9KTsNCiAgICB9DQogIH0sIHsNCiAgICBrZXk6ICdfc3Vic2NyaWJlJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX3N1YnNjcmliZShjcml0ZXJpYSkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7DQoNCiAgICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCB0byB0aGUgcnVudGltZSBpbnN0YW5jZSBvZiBTeW5jaGVyTWFuYWdlciAtPiBfb25Mb2NhbFN1YnNjcmliZQ0KICAgICAgICB2YXIgc3Vic2NyaWJlTXNnID0gew0KICAgICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fb3duZXIsIHRvOiBfdGhpcy5fc3ViVVJMLA0KICAgICAgICAgIGJvZHk6IHt9DQogICAgICAgIH07DQoNCiAgICAgICAgLy8gSHlwZXJ0eSByZXF1ZXN0IHRvIGJlIGFuIE9ic2VydmVyDQogICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3Qvc3BlY3MvYmxvYi9tYXN0ZXIvbWVzc2FnZXMvZGF0YS1zeW5jLW1lc3NhZ2VzLm1kI2h5cGVydHktcmVxdWVzdC10by1iZS1hbi1vYnNlcnZlcg0KDQogICAgICAgIC8vIFJlc3VtZSBTdWJzY3JpcHRpb25zIGZvciB0aGUgc2FtZSBIeXBlcnR5IFVSTA0KICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L3NwZWNzL2Jsb2IvbWFzdGVyL21lc3NhZ2VzL2RhdGEtc3luYy1tZXNzYWdlcy5tZCNyZXN1bWUtc3Vic2NyaXB0aW9ucy1mb3ItdGhlLXNhbWUtaHlwZXJ0eS11cmwNCg0KICAgICAgICAvLyBSZXN1bWUgU3Vic2NyaXB0aW9ucyBmb3IgYSBjZXJ0YWluIHVzZXIgYW5kIGRhdGEgc2NoZW1hIGluZGVwZW5kZW50bHkgb2YgdGhlIEh5cGVydHkgVVJMLg0KICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L3NwZWNzL2Jsb2IvbWFzdGVyL21lc3NhZ2VzL2RhdGEtc3luYy1tZXNzYWdlcy5tZCNyZXN1bWUtc3Vic2NyaXB0aW9ucy1mb3ItYS1jZXJ0YWluLXVzZXItYW5kLWRhdGEtc2NoZW1hLWluZGVwZW5kZW50bHktb2YtdGhlLWh5cGVydHktdXJsDQogICAgICAgIGlmIChjcml0ZXJpYSkgew0KICAgICAgICAgIGlmIChjcml0ZXJpYS5wMnApIHN1YnNjcmliZU1zZy5ib2R5LnAycCA9IGNyaXRlcmlhLnAycDsNCiAgICAgICAgICBpZiAoY3JpdGVyaWEuc3RvcmUpIHN1YnNjcmliZU1zZy5ib2R5LnN0b3JlID0gY3JpdGVyaWEuc3RvcmU7DQogICAgICAgICAgaWYgKGNyaXRlcmlhLnNjaGVtYSkgc3Vic2NyaWJlTXNnLmJvZHkuc2NoZW1hID0gY3JpdGVyaWEuc2NoZW1hOw0KICAgICAgICAgIGlmIChjcml0ZXJpYS5pZGVudGl0eSkgc3Vic2NyaWJlTXNnLmJvZHkuaWRlbnRpdHkgPSBjcml0ZXJpYS5pZGVudGl0eTsNCiAgICAgICAgICBpZiAoY3JpdGVyaWEucmVzb3VyY2UpIHN1YnNjcmliZU1zZy5ib2R5LnJlc291cmNlID0gY3JpdGVyaWEucmVzb3VyY2U7DQogICAgICAgIH0NCg0KICAgICAgICBzdWJzY3JpYmVNc2cuYm9keS5yZXN1bWUgPSBjcml0ZXJpYS5yZXN1bWU7DQoNCiAgICAgICAgY29uc29sZS5sb2coJ1tzeW5jaGVyXSAtIHN1YnNjcmliZSBtZXNzYWdlOiAnLCBjcml0ZXJpYSwgc3Vic2NyaWJlTXNnKTsNCg0KICAgICAgICAvL3JlcXVlc3Qgc3Vic2NyaXB0aW9uDQogICAgICAgIC8vUHJvdmlzaW9uYWwgZGF0YSBpcyBhcHBsaWVkIHRvIHRoZSBEYXRhT2JqZWN0T2JzZXJ2ZXIgYWZ0ZXIgY29uZmlybWF0aW9uLiBPciBkaXNjYXJkZWQgaWYgdGhlcmUgaXMgbm8gY29uZmlybWF0aW9uLg0KICAgICAgICAvL2ZvciBtb3JlIGluZm8gc2VlIHRoZSBEYXRhUHJvdmlzaW9uYWwgY2xhc3MgZG9jdW1lbnRhdGlvbi4NCiAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShzdWJzY3JpYmVNc2csIGZ1bmN0aW9uIChyZXBseSkgew0KICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlcl0gLSBzdWJzY3JpYmUtcmVzcG9uc2U6ICcsIHJlcGx5KTsNCg0KICAgICAgICAgIHZhciBzY2hlbWEgPSByZXBseS5ib2R5LnNjaGVtYTsNCiAgICAgICAgICB2YXIgb2JqVVJMID0gcmVwbHkuYm9keS5yZXNvdXJjZTsNCg0KICAgICAgICAgIHZhciBuZXdQcm92aXNpb25hbCA9IF90aGlzLl9wcm92aXNpb25hbHNbb2JqVVJMXTsNCiAgICAgICAgICBkZWxldGUgX3RoaXMuX3Byb3Zpc2lvbmFsc1tvYmpVUkxdOw0KICAgICAgICAgIGlmIChuZXdQcm92aXNpb25hbCkgbmV3UHJvdmlzaW9uYWwuX3JlbGVhc2VMaXN0ZW5lcnMoKTsNCg0KICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPCAyMDApIHsNCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlcl0gLSBuZXcgRGF0YVByb3Zpc2lvbmFsOiAnLCByZXBseS5ib2R5LmNoaWxkcmVuUmVzb3VyY2VzLCBvYmpVUkwpOw0KICAgICAgICAgICAgbmV3UHJvdmlzaW9uYWwgPSBuZXcgX0RhdGFQcm92aXNpb25hbDIuZGVmYXVsdChfdGhpcy5fb3duZXIsIG9ialVSTCwgX3RoaXMuX2J1cywgcmVwbHkuYm9keS5jaGlsZHJlblJlc291cmNlcyk7DQogICAgICAgICAgICBfdGhpcy5fcHJvdmlzaW9uYWxzW29ialVSTF0gPSBuZXdQcm92aXNpb25hbDsNCiAgICAgICAgICB9IGVsc2UgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7DQogICAgICAgICAgICBjb25zb2xlLmxvZygnW3N5bmNoZXJdIC0gbmV3IERhdGEgT2JqZWN0IE9ic2VydmVyOiAnLCByZXBseSwgX3RoaXMuX3Byb3Zpc2lvbmFscyk7DQoNCiAgICAgICAgICAgIHZhciBuZXdPYmogPSBuZXcgX0RhdGFPYmplY3RPYnNlcnZlcjIuZGVmYXVsdChfdGhpcywgb2JqVVJMLCBzY2hlbWEsICdvbicsIHJlcGx5LmJvZHkudmFsdWUsIG5ld1Byb3Zpc2lvbmFsLmNoaWxkcmVuLCByZXBseS5ib2R5LnZlcnNpb24pOw0KICAgICAgICAgICAgX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdID0gbmV3T2JqOw0KDQogICAgICAgICAgICByZXNvbHZlKG5ld09iaik7DQogICAgICAgICAgICBuZXdQcm92aXNpb25hbC5hcHBseShuZXdPYmopOw0KICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTsNCiAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgICAgfSk7DQogICAgfQ0KDQogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gYSBsb2NhbCBydW50aW1lIFJlcG9ydGVyT2JqZWN0IC0+IF9vblJlbW90ZVN1YnNjcmliZQ0KDQogIH0sIHsNCiAgICBrZXk6ICdfb25Gb3J3YXJkJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uRm9yd2FyZChtc2cpIHsNCiAgICAgIHZhciBfdGhpcyA9IHRoaXM7DQoNCiAgICAgIHZhciByZXBvcnRlciA9IF90aGlzLl9yZXBvcnRlcnNbbXNnLmJvZHkudG9dOw0KICAgICAgcmVwb3J0ZXIuX29uRm9yd2FyZChtc2cpOw0KICAgIH0NCg0KICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGEgcmVtb3RlIFN5bmNoZXIgLT4gY3JlYXRlICh0aGlzIGlzIGFjdHVhbGx5IGFuIGludml0YXRpb24gdG8gc3Vic2NyaWJlKQ0KDQogIH0sIHsNCiAgICBrZXk6ICdfb25SZW1vdGVDcmVhdGUnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZW1vdGVDcmVhdGUobXNnKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICAvL3JlbW92ZSAiL3N1YnNjcmlwdGlvbiIgZnJvbSB0aGUgVVJMDQogICAgICB2YXIgcmVzb3VyY2UgPSBtc2cuZnJvbS5zbGljZSgwLCAtMTMpOw0KDQogICAgICB2YXIgZXZlbnQgPSB7DQogICAgICAgIHR5cGU6IG1zZy50eXBlLA0KICAgICAgICBmcm9tOiBtc2cuYm9keS5zb3VyY2UsDQogICAgICAgIHVybDogcmVzb3VyY2UsDQogICAgICAgIHNjaGVtYTogbXNnLmJvZHkuc2NoZW1hLA0KICAgICAgICB2YWx1ZTogbXNnLmJvZHkudmFsdWUsDQogICAgICAgIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSwNCg0KICAgICAgICBhY2s6IGZ1bmN0aW9uIGFjayh0eXBlKSB7DQogICAgICAgICAgdmFyIGxUeXBlID0gMjAwOw0KICAgICAgICAgIGlmICh0eXBlKSB7DQogICAgICAgICAgICBsVHlwZSA9IHR5cGU7DQogICAgICAgICAgfQ0KDQogICAgICAgICAgLy9zZW5kIGFjayByZXNwb25zZSBtZXNzYWdlDQogICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7DQogICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSwNCiAgICAgICAgICAgIGJvZHk6IHsgY29kZTogbFR5cGUgfQ0KICAgICAgICAgIH0pOw0KICAgICAgICB9DQogICAgICB9Ow0KDQogICAgICBpZiAoX3RoaXMuX29uTm90aWZpY2F0aW9uSGFuZGxlcikgew0KICAgICAgICBjb25zb2xlLmluZm8oJ1tTeW5jaGVyXSBOT1RJRklDQVRJT04tRVZFTlQ6ICcsIGV2ZW50KTsNCiAgICAgICAgX3RoaXMuX29uTm90aWZpY2F0aW9uSGFuZGxlcihldmVudCk7DQogICAgICB9DQogICAgfQ0KDQogICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gYSByZW1vdGUgRGF0YU9iamVjdFJlcG9ydGVyIC0+IGRlbGV0ZQ0KDQogIH0sIHsNCiAgICBrZXk6ICdfb25SZW1vdGVEZWxldGUnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZW1vdGVEZWxldGUobXNnKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICAvL3JlbW92ZSAiL3N1YnNjcmlwdGlvbiIgZnJvbSB0aGUgVVJMDQogICAgICB2YXIgcmVzb3VyY2UgPSBtc2cuYm9keS5yZXNvdXJjZTsNCg0KICAgICAgdmFyIG9iamVjdCA9IF90aGlzLl9vYnNlcnZlcnNbcmVzb3VyY2VdOw0KICAgICAgaWYgKG9iamVjdCkgew0KICAgICAgICB2YXIgZXZlbnQgPSB7DQogICAgICAgICAgdHlwZTogbXNnLnR5cGUsDQogICAgICAgICAgdXJsOiByZXNvdXJjZSwNCiAgICAgICAgICBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksDQoNCiAgICAgICAgICBhY2s6IGZ1bmN0aW9uIGFjayh0eXBlKSB7DQogICAgICAgICAgICB2YXIgbFR5cGUgPSAyMDA7DQogICAgICAgICAgICBpZiAodHlwZSkgew0KICAgICAgICAgICAgICBsVHlwZSA9IHR5cGU7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vVE9ETzogYW55IG90aGVyIGRpZmZlcmVudCBvcHRpb25zIGZvciB0aGUgcmVsZWFzZSBwcm9jZXNzLCBsaWtlIGFjY2VwdCBidXQgbm9yIHJlbGVhc2UgbG9jYWw/DQogICAgICAgICAgICBpZiAobFR5cGUgPT09IDIwMCkgew0KICAgICAgICAgICAgICBvYmplY3QuZGVsZXRlKCk7DQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgIC8vc2VuZCBhY2sgcmVzcG9uc2UgbWVzc2FnZQ0KICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7DQogICAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLA0KICAgICAgICAgICAgICBib2R5OiB7IGNvZGU6IGxUeXBlLCBzb3VyY2U6IF90aGlzLl9vd25lciB9DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICB9DQogICAgICAgIH07DQoNCiAgICAgICAgaWYgKF90aGlzLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXIpIHsNCiAgICAgICAgICBjb25zb2xlLmxvZygnTk9USUZJQ0FUSU9OLUVWRU5UOiAnLCBldmVudCk7DQogICAgICAgICAgX3RoaXMuX29uTm90aWZpY2F0aW9uSGFuZGxlcihldmVudCk7DQogICAgICAgIH0NCiAgICAgIH0gZWxzZSB7DQogICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoew0KICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLA0KICAgICAgICAgIGJvZHk6IHsgY29kZTogNDA0LCBzb3VyY2U6IF90aGlzLl9vd25lciB9DQogICAgICAgIH0pOw0KICAgICAgfQ0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ293bmVyJywNCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgIHJldHVybiB0aGlzLl9vd25lcjsNCiAgICB9DQoNCiAgICAvKioNCiAgICAqIEFsbCBvd25lZCByZXBvcnRlcnMsIHRoZSBvbmVzIHRoYXQgd2VyZSBjcmVhdGVkIGJ5IGEgY3JlYXRlDQogICAgKiBAdHlwZSB7T2JqZWN0PFVSTCwgRGF0YU9iamVjdFJlcG9ydGVyPn0NCiAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdyZXBvcnRlcnMnLA0KICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyczsNCiAgICB9DQoNCiAgICAvKioNCiAgICAqIEFsbCBvd25lZCBvYnNlcnZlcnMsIHRoZSBvbmVzIHRoYXQgd2VyZSBjcmVhdGVkIGJ5IGEgbG9jYWwgc3Vic2NyaXB0aW9uDQogICAgKiBAdHlwZSB7T2JqZWN0PFVSTCwgRGF0YU9iamVjdE9ic2VydmVyPn0NCiAgICAqLw0KDQogIH0sIHsNCiAgICBrZXk6ICdvYnNlcnZlcnMnLA0KICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgcmV0dXJuIHRoaXMuX29ic2VydmVyczsNCiAgICB9DQogIH1dKTsNCiAgcmV0dXJuIFN5bmNoZXI7DQp9KCk7IC8qKg0KICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlEDQogICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQogICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0ENCiAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQogICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQogICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4NCiAgICAgKg0KICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4NCiAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCiAgICAgKg0KICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wDQogICAgICoNCiAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQogICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywNCiAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQogICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuDQogICAgICoqLw0KDQpleHBvcnRzLmRlZmF1bHQgPSBTeW5jaGVyOw0KbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107DQoNCi8qKiovIH0pLA0KLyogMTMxICovLA0KLyogMTMyICovLA0KLyogMTMzICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCiJ1c2Ugc3RyaWN0IjsNCg0KDQpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7DQogIHZhbHVlOiB0cnVlDQp9KTsNCg0KdmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpOw0KDQp2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7DQoNCnZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7DQoNCnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsNCg0KZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0NCg0KLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovDQoNCi8qKg0KICogQGFjY2VzcyBwcml2YXRlDQogKiBUaGlzIGNsYXNzIGlzIHJlc3BvbnNpYmxlIGZvciBjb2xsZWN0aW5nIGRlbHRhIGNoYW5nZXMgaW4gcmVtb3RlIG9iamVjdHMsIGJlZm9yZSB0aGUgcmVzcG9uc2Ugb2Ygc3Vic2NyaXB0aW9uIHJlYWNoIHRoZSBvYnNlcnZlci4NCiAqIEl0J3MgdXNlZCBpbiBTeW5jaGVyIC0+IHN1YnNjcmliZS4gVGhlIGZsb3cgaXMgZGVmaW5lZCBhczoNCiAqIDEuIChvYnNlcnZlcikgLS1zdWJzY3JpYmUtLT4gKHJlcG9ydGVyKQ0KICogMi4gKG9ic2VydmVyKSA8LS1kZWx0YSB1cGRhdGVzLS0gKHJlcG9ydGVyKQ0KICogMy4gKG9ic2VydmVyKSA8LS1zdWJzY3JpYmUgcmVzcG9uc2UtLSAocmVwb3J0ZXIpDQogKiBUaGlzIG1lYW5zIHRoYXQgdGhlcmUgY291bGQgYmUgZGVsdGEgdXBkYXRlcyB0cmFuc2ZlcnJlZCBiZWZvcmUgdGhlIHN1YnNjcmlwdGlvbiBjb25maXJtYXRpb24uDQogKiBTaW5jZSB0aGVyZSBpcyBubyBEYXRhT2JqZWN0T2JzZXJ2ZXIgYmVmb3JlIHRoZSB1YnNjcmlwdGlvbiBjb25maXJtYXRpb24sIHRoZXJlIHNob3VsZCBiZSBzb21lIG90aGVyIG9iamVjdCBjb2xsZWN0aW5nIHRoZSB1cGRhdGVzLg0KICogUHJvdmlzaW9uYWwgZGF0YSBpcyBhcHBsaWVkIHRvIHRoZSBEYXRhT2JqZWN0T2JzZXJ2ZXIgYWZ0ZXIgY29uZmlybWF0aW9uLiBPciBkaXNjYXJkZWQgaWYgdGhlcmUgaXMgbm8gY29uZmlybWF0aW9uLg0KICovDQp2YXIgRGF0YVByb3Zpc2lvbmFsID0gZnVuY3Rpb24gKCkgew0KICAvKiBwcml2YXRlDQogIF9jaGlsZHJlbkxpc3RlbmVyczogW01zZ0xpc3RlbmVyXQ0KICBfbGlzdGVuZXI6IE1zZ0xpc3RlbmVyDQogICBfY2hhbmdlczogW10NCiAgKi8NCg0KICBmdW5jdGlvbiBEYXRhUHJvdmlzaW9uYWwob3duZXIsIHVybCwgYnVzLCBjaGlsZHJlbikgew0KICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERhdGFQcm92aXNpb25hbCk7DQoNCiAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgX3RoaXMuX293bmVyID0gb3duZXI7DQogICAgX3RoaXMuX3VybCA9IHVybDsNCiAgICBfdGhpcy5fYnVzID0gYnVzOw0KICAgIF90aGlzLl9jaGlsZHJlbiA9IGNoaWxkcmVuOw0KDQogICAgX3RoaXMuX2NoYW5nZXMgPSBbXTsNCiAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTsNCiAgfQ0KDQogICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERhdGFQcm92aXNpb25hbCwgW3sNCiAgICBrZXk6ICdfYWxsb2NhdGVMaXN0ZW5lcnMnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7DQogICAgICB2YXIgX3RoaXMgPSB0aGlzOw0KDQogICAgICBfdGhpcy5fbGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIGZ1bmN0aW9uIChtc2cpIHsNCiAgICAgICAgY29uc29sZS5sb2coJ0RhdGFQcm92aXNpb25hbC0nICsgX3RoaXMuX3VybCArICctUkNWOiAnLCBtc2cpOw0KICAgICAgICBfdGhpcy5fY2hhbmdlcy5wdXNoKG1zZyk7DQogICAgICB9KTsNCg0KICAgICAgLyoNCiAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycyA9IFtdOw0KICAgICAgaWYgKF90aGlzLl9jaGlsZHJlbikgew0KICAgICAgICBsZXQgY2hpbGRCYXNlVVJMID0gdXJsICsgJy9jaGlsZHJlbi8nOw0KICAgICAgICBfdGhpcy5fY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHsNCiAgICAgICAgICBsZXQgY2hpbGRVUkwgPSBjaGlsZEJhc2VVUkwgKyBjaGlsZDsNCiAgICAgICAgICBsZXQgbGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoaWxkVVJMLCAobXNnKSA9PiB7DQogICAgICAgICAgICAvL2lnbm9yZSBtc2cgc2VudCBieSBoaW1zZWxmDQogICAgICAgICAgICBpZiAobXNnLmZyb20gIT09IG93bmVyKSB7DQogICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7DQogICAgICAgICAgICB9DQogICAgICAgICAgfSk7DQogICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsNCiAgICAgICAgfSk7DQogICAgICB9Ki8NCiAgICB9DQogIH0sIHsNCiAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCg0KICAgICAgX3RoaXMuX2xpc3RlbmVyLnJlbW92ZSgpOw0KDQogICAgICAvKl90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4gew0KICAgICAgICBsaXN0ZW5lci5yZW1vdmUoKTsNCiAgICAgIH0pOyovDQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnYXBwbHknLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseShvYnNlcnZlcikgew0KICAgICAgdmFyIF90aGlzID0gdGhpczsNCiAgICAgIF90aGlzLl9jaGFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKGNoYW5nZSkgew0KICAgICAgICBvYnNlcnZlci5fY2hhbmdlT2JqZWN0KG9ic2VydmVyLl9zeW5jT2JqLCBjaGFuZ2UpOw0KICAgICAgfSk7DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnY2hpbGRyZW4nLA0KICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgew0KICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuOw0KICAgIH0NCiAgfV0pOw0KICByZXR1cm4gRGF0YVByb3Zpc2lvbmFsOw0KfSgpOw0KDQpleHBvcnRzLmRlZmF1bHQgPSBEYXRhUHJvdmlzaW9uYWw7DQptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsNCg0KLyoqKi8gfSksDQovKiAxMzQgKi8sDQovKiAxMzUgKi8sDQovKiAxMzYgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXygxNDMpLCBfX2VzTW9kdWxlOiB0cnVlIH07DQoNCi8qKiovIH0pLA0KLyogMTM3ICovLA0KLyogMTM4ICovDQovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7DQoNCm1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IF9fd2VicGFja19yZXF1aXJlX18oMTQ1KSwgX19lc01vZHVsZTogdHJ1ZSB9Ow0KDQovKioqLyB9KSwNCi8qIDEzOSAqLywNCi8qIDE0MCAqLywNCi8qIDE0MSAqLywNCi8qIDE0MiAqLywNCi8qIDE0MyAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQpfX3dlYnBhY2tfcmVxdWlyZV9fKDE0OSk7DQptb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0LmFzc2lnbjsNCg0KLyoqKi8gfSksDQovKiAxNDQgKi8sDQovKiAxNDUgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KX193ZWJwYWNrX3JlcXVpcmVfXygxNTEpOw0KdmFyICRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLk9iamVjdDsNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpew0KICByZXR1cm4gJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7DQp9Ow0KDQovKioqLyB9KSwNCi8qIDE0NiAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQoidXNlIHN0cmljdCI7DQoNCi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLikNCnZhciBnZXRLZXlzICA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpDQogICwgZ09QUyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU4KQ0KICAsIHBJRSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MSkNCiAgLCB0b09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpDQogICwgSU9iamVjdCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU2KQ0KICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjsNCg0KLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpDQptb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IF9fd2VicGFja19yZXF1aXJlX18oMTEpKGZ1bmN0aW9uKCl7DQogIHZhciBBID0ge30NCiAgICAsIEIgPSB7fQ0KICAgICwgUyA9IFN5bWJvbCgpDQogICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JzsNCiAgQVtTXSA9IDc7DQogIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oayl7IEJba10gPSBrOyB9KTsNCiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7DQp9KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMNCiAgdmFyIFQgICAgID0gdG9PYmplY3QodGFyZ2V0KQ0KICAgICwgYUxlbiAgPSBhcmd1bWVudHMubGVuZ3RoDQogICAgLCBpbmRleCA9IDENCiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmYNCiAgICAsIGlzRW51bSAgICAgPSBwSUUuZjsNCiAgd2hpbGUoYUxlbiA+IGluZGV4KXsNCiAgICB2YXIgUyAgICAgID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pDQogICAgICAsIGtleXMgICA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUykNCiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGgNCiAgICAgICwgaiAgICAgID0gMA0KICAgICAgLCBrZXk7DQogICAgd2hpbGUobGVuZ3RoID4gailpZihpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKVRba2V5XSA9IFNba2V5XTsNCiAgfSByZXR1cm4gVDsNCn0gOiAkYXNzaWduOw0KDQovKioqLyB9KSwNCi8qIDE0NyAqLywNCi8qIDE0OCAqLywNCi8qIDE0OSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQovLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKQ0KdmFyICRleHBvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpOw0KDQokZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHthc3NpZ246IF9fd2VicGFja19yZXF1aXJlX18oMTQ2KX0pOw0KDQovKioqLyB9KSwNCi8qIDE1MCAqLywNCi8qIDE1MSAqLw0KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgew0KDQovLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApDQp2YXIgdG9JT2JqZWN0ICAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpDQogICwgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpLmY7DQoNCl9fd2VicGFja19yZXF1aXJlX18oNDUpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpew0KICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpew0KICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7DQogIH07DQp9KTsNCg0KLyoqKi8gfSksDQovKiAxNTIgKi8sDQovKiAxNTMgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsNCg0KLy8gICAgIHByb3h5LW9ic2VydmUgdjAuMC4xOA0KLy8gICAgIENvcHlyaWdodCAoYykgMjAxNSwgMjAxNiBTaW1vbiBZLiBCbGFja3dlbGwsIEFueVdoaWNoV2F5DQovLyAgICAgTUlUIExpY2Vuc2UgLSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwDQooZnVuY3Rpb24oKSB7DQoJInVzZSBzdHJpY3QiOw0KCS8vIENyZWF0ZXMgYW5kIHJldHVybnMgYSBQcm94eSB3cmFwcGluZyBhIHRhcmdldCBzbyB0aGF0IGFsbCBjaGFuZ2VzIGNhbiBiZSB0cmFwcGVkIGFuZCBmb3J3YXJkZWQgdG8NCgkvLyBhIGNhbGxiYWNrLiBUaGUgY2FsbGJhY2sgdGFrZXMgYW4gYXJyYXkgb2YgY2hhbmdlcyBqdXN0IGxpa2UgdGhlIHRyYWRpdGlvbmFsIG9yaWdpbmFsIENocm9tZSBPYmplY3Qub2JzZXJ2ZQ0KCS8vIHtvYmplY3Q6PG9iamVjdCBjaGFuZ2VkPixuYW1lOjxmaWVsZCBjaGFuZ2VkPix0eXBlOmFkZHx1cGRhdGV8ZGVsZXRlfHJlY29uZmlndXJlfHByZXZlbnRFeHRlbnNpb25zfHNldFByb3RvdHlwZSxvbGRWYWx1ZTo8b2xkIHZhbHVlIGlmIHVwZGF0ZSB8IGRlbGV0ZT59DQoJLy8gVGhlIGFjY2VwdGxpc3QgY2FuIGJlIGFkZHx1cGRhdGV8ZGVsZXRlfHJlY29uZmlndXJlfHByZXZlbnRFeHRlbnNpb25zfHNldFByb3RvdHlwZS4NCgkvLyB2IDAuMC4xMCB0byBzdXBwb3J0IHBhdXNpbmcgYW5kIHJlc3RhcnRpbmcgb2JzZXJ2YXRpb24gdHdvIGFkZGl0aW9uYWwgY29uc3RydWN0b3IgYXJndW1lbnRzIGFyZSBhdmFpbGFibGUgdG8gT2JqZWN0Lm9ic2VydmU6DQoJLy8gcGF1c2FibGUgLSBjcmVhdGUgdGhlIE9ic2VydmVyIHNvIGl0IGNhbiBiZSBwYXVzZWQNCgkvLyBwYXVzZSAtIGNyZWF0ZSBvYnNlcnZlciBpbiBwYXVzZWQgc3RhdGUNCgkvLyBpZiBwYXVzYWJsZSBpcyB0cnVlIHRoZW4gYW4gYWRkaXRpb25hbCBtZXRob2QgZGVsaXZlcihpZ25vcmVQcmV2aW91cykgaXMgYXZhaWxhYmxlIHRvIHN0YXJ0IGRlbGl2ZXJ5DQoJLy8gdG8gcGF1c2UgZGVsaXZlcnkgc2V0IGEgcHJvcGVydHkgY2FsbGVkIHBhdXNlIG9uIHRoZSBmdW5jdGlvbiBkZWxpdmVyIHRvIHRydWUNCgkvLyBwYXVzYWJsZSBpcyBvcHRpb25hbCB0byByZWR1Y2UgdGhlIGNoYW5jZSBvZiBzaGFkb3dpbmcgYSBwcm9wZXJ0eSBvciBtZXRob2Qgb24gYW55IGV4aXN0aW5nIGNvZGUgY2FsbGVkIGRlbGl2ZXINCglpZighT2JqZWN0Lm9ic2VydmUgJiYgdHlwZW9mKFByb3h5KT09PSJmdW5jdGlvbiIpIHsNCgkJZnVuY3Rpb24gT2JzZXJ2ZXIodGFyZ2V0LGNhbGxiYWNrLGFjY2VwdGxpc3QscGF1c2FibGUscGF1c2UsZGVsYXkpIHsNCgkgICAgCXZhciBtZSA9IHRoaXMsIHByb3h5Ow0KCSAgICAJZnVuY3Rpb24gZGVsaXZlcihpZ25vcmVQcmV2aW91cyxkZWxheSkgew0KCSAgICAJCWRlbGl2ZXIuZGVsYXkgPSBkZWxheTsNCgkgICAgCQlpZighZGVsaXZlci5wYXVzZSkgew0KCSAgICAgICAgCQlpZihtZS5jaGFuZ2VzZXQubGVuZ3RoPjApIHsNCgkgICAgICAgIAkJCWlmKCFpZ25vcmVQcmV2aW91cykgew0KCQkgICAgCSAgICAJCXZhciBjaGFuZ2VzID0gbWUuY2hhbmdlc2V0LmZpbHRlcihmdW5jdGlvbihjaGFuZ2UpIHsgcmV0dXJuICFhY2NlcHRsaXN0IHx8IGFjY2VwdGxpc3QuaW5kZXhPZihjaGFuZ2UudHlwZSk+PTA7IH0pOw0KCQkgICAgICAgIAkJCWlmKGNoYW5nZXMubGVuZ3RoPjApIHsNCgkJICAgICAgICAJCQkJY2FsbGJhY2soY2hhbmdlcyk7DQoJCSAgICAgICAgCQkJfQ0KCSAgICAgICAgCQkJfQ0KCSAgICAgICAgCQkJbWUuY2hhbmdlc2V0ID0gW107DQoJICAgICAgICAJCX0NCgkgICAgCQl9DQoJICAgIAl9DQoJICAgIAlkZWxpdmVyLnBhdXNlID0gcGF1c2U7DQoJICAgIAlkZWxpdmVyLmRlbGF5ID0gZGVsYXk7DQoJCSAgICBtZS5nZXQgPSBmdW5jdGlvbih0YXJnZXQsIHByb3BlcnR5KSB7DQoJCSAgICAJaWYocHJvcGVydHk9PT0iX19vYnNlcnZlcl9fIikgew0KCQkgICAgCQlyZXR1cm4gbWU7DQoJCSAgICAJfQ0KCQkgICAgCWlmKHByb3BlcnR5PT09InVub2JzZXJ2ZSIpIHsNCgkJICAgIAkJcmV0dXJuIGZ1bmN0aW9uKCkgew0KCQkgICAgCQkJT2JqZWN0LnVub2JzZXJ2ZSh0YXJnZXQpOw0KCQkgICAgCQkJcmV0dXJuIHRhcmdldDsNCgkJICAgIAkJfTsNCgkJICAgIAl9DQoJCSAgICAJaWYocHJvcGVydHk9PT0iZGVsaXZlciIpIHsNCgkJICAgIAkJcmV0dXJuIGRlbGl2ZXI7DQoJCSAgICAJfQ0KCQkgICAgCXJldHVybiB0YXJnZXRbcHJvcGVydHldOw0KCQkgICAgfQ0KCSAgICAJbWUudGFyZ2V0ID0gdGFyZ2V0Ow0KCSAgICAJbWUuY2hhbmdlc2V0ID0gW107DQoJICAgIAlpZighbWUudGFyZ2V0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfXykgew0KCSAgICAJCS8vIF9fb2JzZXJ2ZXJDYWxsYmFja3NfXyBpcyB1c2VkIGFzIGFuIGluZGV4IHRvIGdldCBhdCB0aGUgcHJveHkgd2hpY2ggaXMgdGhlIG9ic2VydmVyLCBzbyB3ZSBjYW4gdW5vYnNlcnZlDQoJICAgIAkJT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwiX19vYnNlcnZlckNhbGxiYWNrc19fIix7ZW51bWVyYWJsZTpmYWxzZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTpmYWxzZSx2YWx1ZTpbXX0pOw0KCSAgICAJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIl9fb2JzZXJ2ZXJzX18iLHtlbnVtZXJhYmxlOmZhbHNlLGNvbmZpZ3VyYWJsZTp0cnVlLHdyaXRhYmxlOmZhbHNlLHZhbHVlOltdfSk7DQoJICAgIAl9DQoJICAgIAltZS50YXJnZXQuX19vYnNlcnZlckNhbGxiYWNrc19fLnB1c2goY2FsbGJhY2spOw0KCSAgICAJbWUudGFyZ2V0Ll9fb2JzZXJ2ZXJzX18ucHVzaCh0aGlzKTsNCgkgICAgCXByb3h5ID0gbmV3IFByb3h5KHRhcmdldCxtZSk7DQoJICAgIAlkZWxpdmVyKGZhbHNlLGRlbGF5KTsNCgkgICAgCXJldHVybiBwcm94eTsNCgkgICAgfQ0KCQlPYnNlcnZlci5wcm90b3R5cGUuZGVsaXZlciA9IGZ1bmN0aW9uKCkgew0KCQkJcmV0dXJuIHRoaXMuZ2V0KG51bGwsImRlbGl2ZXIiKTsNCgkJfQ0KCSAgICBPYnNlcnZlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHsgLy8gLCByZWNlaXZlcg0KCSAgICAJdmFyIG9sZHZhbHVlID0gdGFyZ2V0W3Byb3BlcnR5XTsNCgkgICAgCXZhciB0eXBlID0gKG9sZHZhbHVlPT09dW5kZWZpbmVkID8gImFkZCIgOiAidXBkYXRlIik7DQoJICAgIAl0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7DQoJICAgIAlpZih0YXJnZXQuX19vYnNlcnZlcnNfXy5pbmRleE9mKHRoaXMpPj0wICYmICghdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKHR5cGUpPj0wKSkgew0KCSAgICAgICAgCXZhciBjaGFuZ2UgPSB7b2JqZWN0OnRhcmdldCxuYW1lOnByb3BlcnR5LHR5cGU6dHlwZX0sDQoJICAgICAgICAJCXN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLA0KCSAgICAgICAgCQlkZWxpdmVyID0gdGhpcy5kZWxpdmVyKCk7DQoJICAgICAgICAJaWYodHlwZT09PSJ1cGRhdGUiKSB7DQoJICAgICAgICAJCWNoYW5nZS5vbGRWYWx1ZSA9IG9sZHZhbHVlOw0KCSAgICAgICAgCX0NCgkgICAgICAgIAl0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7DQoJICAgICAgICAJaWYoc3RhcnQpIHsNCgkgICAgICAgIAkJZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09Im51bWJlciIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTsNCgkgICAgICAgIAl9DQoJICAgIAl9DQoJICAgIAlyZXR1cm4gdHJ1ZTsNCgkgICAgfTsNCgkgICAgT2JzZXJ2ZXIucHJvdG90eXBlLmRlbGV0ZVByb3BlcnR5ID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSkgew0KCSAgICAJdmFyIG9sZHZhbHVlID0gdGFyZ2V0W3Byb3BlcnR5XTsNCgkgICAgCS8vaWYodHlwZW9mKG9sZHZhbHVlKSE9PSJ1bmRlZmluZWQiKSB7DQoJCSAgICAJZGVsZXRlIHRhcmdldFtwcm9wZXJ0eV07DQoJCSAgICAJaWYodGFyZ2V0Ll9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCAmJiAhdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKCJkZWxldGUiKT49MCkgew0KCQkgICAgICAgIAl2YXIgY2hhbmdlID0ge29iamVjdDp0YXJnZXQsbmFtZTpwcm9wZXJ0eSx0eXBlOiJkZWxldGUiLG9sZFZhbHVlOm9sZHZhbHVlfSwNCgkJICAgICAgICAJCXN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLA0KCQkgICAgICAgIAkJZGVsaXZlciA9IHRoaXMuZGVsaXZlcigpOw0KCQkgICAgICAgIAl0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7DQoJCSAgICAgICAgCWlmKHN0YXJ0KSB7DQoJCSAgICAgICAgCQlkZWxpdmVyKGZhbHNlLCh0eXBlb2YoZGVsaXZlci5kZWxheSk9PT0ibnVtYmVyIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpOw0KCQkgICAgICAgIAl9DQoJCSAgICAJfQ0KCSAgICAJLy99DQoJICAgIAlyZXR1cm4gdHJ1ZTsNCgkgICAgfTsNCgkgICAgT2JzZXJ2ZXIucHJvdG90eXBlLmRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcikgew0KCSAgICAJT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IpOw0KCSAgICAJaWYodGFyZ2V0Ll9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCAmJiAhdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKCJyZWNvbmZpZ3VyZSIpPj0wKSB7DQoJICAgICAgICAJdmFyIGNoYW5nZSA9IHtvYmplY3Q6dGFyZ2V0LG5hbWU6cHJvcGVydHksdHlwZToicmVjb25maWd1cmUifSwNCiAgICAgICAgCQkJc3RhcnQgPSB0aGlzLmNoYW5nZXNldC5sZW5ndGggPT09IDAsDQogICAgICAgIAkJCWRlbGl2ZXIgPSB0aGlzLmRlbGl2ZXIoKTsNCgkgICAgICAgIAl0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7DQoJICAgICAgICAJaWYoc3RhcnQpIHsNCgkgICAgICAgIAkJZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09Im51bWJlciIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTsNCgkgICAgICAgIAl9DQoJICAgIAl9DQoJICAgIAlyZXR1cm4gdHJ1ZTsNCgkgICAgfTsNCgkgICAgT2JzZXJ2ZXIucHJvdG90eXBlLnNldFByb3RvdHlwZU9mID0gZnVuY3Rpb24odGFyZ2V0LCBwcm90b3R5cGUpIHsNCgkgICAgCXZhciBvbGR2YWx1ZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpOw0KCSAgICAJT2JqZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG90eXBlKTsNCgkgICAgCWlmKHRhcmdldC5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAgJiYgIXRoaXMuYWNjZXB0bGlzdCB8fCB0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZigic2V0UHJvdG90eXBlIik+PTApIHsNCgkgICAgICAgIAl2YXIgY2hhbmdlID0ge29iamVjdDp0YXJnZXQsbmFtZToiX19wcm90b19fIix0eXBlOiJzZXRQcm90b3R5cGUiLG9sZFZhbHVlOm9sZHZhbHVlfSwNCiAgICAJCQkJc3RhcnQgPSB0aGlzLmNoYW5nZXNldC5sZW5ndGggPT09IDAsDQogICAgCQkJCWRlbGl2ZXIgPSB0aGlzLmRlbGl2ZXIoKTsNCgkgICAgICAgIAl0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7DQoJICAgICAgICAJaWYoc3RhcnQpIHsNCgkgICAgICAgIAkJZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09Im51bWJlciIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTsNCgkgICAgICAgIAl9DQoJICAgIAl9DQoJICAgIAlyZXR1cm4gdHJ1ZTsNCgkgICAgfTsNCgkgICAgT2JzZXJ2ZXIucHJvdG90eXBlLnByZXZlbnRFeHRlbnNpb25zID0gZnVuY3Rpb24odGFyZ2V0KSB7DQoJICAgICAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTsNCgkgICAgCWlmKHRhcmdldC5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAgJiYgIXRoaXMuYWNjZXB0bGlzdCB8fCB0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZigicHJldmVudEV4dGVuc2lvbnMiKT49MCkgew0KCSAgICAgICAgCXZhciBjaGFuZ2UgPSB7b2JqZWN0OnRhcmdldCx0eXBlOiJwcmV2ZW50RXh0ZW5zaW9ucyJ9LA0KCQkJCQlzdGFydCA9IHRoaXMuY2hhbmdlc2V0Lmxlbmd0aCA9PT0gMCwNCgkJCQkJZGVsaXZlciA9IHRoaXMuZGVsaXZlcigpOw0KCSAgICAgICAgCXRoaXMuY2hhbmdlc2V0LnB1c2goY2hhbmdlKTsNCgkgICAgICAgIAlpZihzdGFydCkgew0KCSAgICAgICAgCQlkZWxpdmVyKGZhbHNlLCh0eXBlb2YoZGVsaXZlci5kZWxheSk9PT0ibnVtYmVyIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpOw0KCSAgICAgICAgCX0NCgkgICAgCX0NCgkgICAgCXJldHVybiB0cnVlOw0KCSAgICB9Ow0KCSAgICBPYmplY3Qub2JzZXJ2ZSA9IGZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjayxhY2NlcHRsaXN0LHBhdXNhYmxlLHBhdXNlLGRlbGF5KSB7DQoJICAgIAlyZXR1cm4gbmV3IE9ic2VydmVyKG9iamVjdCxjYWxsYmFjayxhY2NlcHRsaXN0LHBhdXNhYmxlLHBhdXNlLGRlbGF5KTsNCgkgICAgfTsNCgkgICAgT2JqZWN0LnVub2JzZXJ2ZSA9IGZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjaykgew0KCSAgICAJaWYob2JqZWN0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfXykgew0KCSAgICAJCWlmKCFjYWxsYmFjaykgew0KCSAgICAJCQlvYmplY3QuX19vYnNlcnZlckNhbGxiYWNrc19fLnNwbGljZSgwLG9iamVjdC5fX29ic2VydmVyQ2FsbGJhY2tzX18ubGVuZ3RoKTsNCgkgICAgCQkJb2JqZWN0Ll9fb2JzZXJ2ZXJzX18uc3BsaWNlKDAsb2JqZWN0Ll9fb2JzZXJ2ZXJzX18ubGVuZ3RoKTsNCgkgICAgCQkJcmV0dXJuOw0KCSAgICAJCX0NCgkgICAgCQlvYmplY3QuX19vYnNlcnZlckNhbGxiYWNrc19fLmZvckVhY2goZnVuY3Rpb24ob2JzZXJ2ZXJjYWxsYmFjayxpKSB7DQoJICAgIAkJCWlmKGNhbGxiYWNrPT09b2JzZXJ2ZXJjYWxsYmFjaykgew0KCSAgICAJCQkJb2JqZWN0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5zcGxpY2UoaSwxKTsNCgkgICAgCQkJCWRlbGV0ZSBvYmplY3QuX19vYnNlcnZlcnNfX1tpXS5jYWxsYmFjazsNCgkgICAgCQkJCW9iamVjdC5fX29ic2VydmVyc19fLnNwbGljZShpLDEpOw0KCSAgICAJCQl9DQoJICAgIAkJfSk7DQoJICAgIAl9DQoJICAgIH07DQoJICAgIEFycmF5Lm9ic2VydmUgPSBmdW5jdGlvbihvYmplY3QsY2FsbGJhY2ssYWNjZXB0bGlzdCxwYXVzYWJsZSxwYXVzZSxkZWxheSkgew0KCSAgICAJaWYoIShvYmplY3QgaW5zdGFuY2VvZiBBcnJheSkgJiYgIUFycmF5LmlzQXJyYXkob2JqZWN0KSkgew0KCSAgICAJCXRocm93IG5ldyBUeXBlRXJyb3IoIkZpcnN0IGFyZ3VtZW50IHRvIEFycmF5Lm9ic2VydmVyIGlzIG5vdCBhbiBBcnJheSIpOw0KCSAgICAJfQ0KICAgICAgICAgICAgCWFjY2VwdGxpc3QgPSBhY2NlcHRsaXN0IHx8IFsiYWRkIiwgInVwZGF0ZSIsICJkZWxldGUiLCAic3BsaWNlIl07DQoJICAgIAl2YXIgYXJyYXlwcm94eSA9IG5ldyBQcm94eShvYmplY3Qse2dldDogZnVuY3Rpb24odGFyZ2V0LHByb3BlcnR5KSB7DQoJICAgIAkJaWYocHJvcGVydHk9PT0idW5vYnNlcnZlIikgew0KCQkgICAgCQlyZXR1cm4gZnVuY3Rpb24oY2FsbGJhY2spIHsNCgkJICAgIAkJCWlmKGNhbGxiYWNrKSB7DQoJCSAgICAJCQkJcmV0dXJuIE9iamVjdC51bm9ic2VydmUodGFyZ2V0LGNhbGxiYWNrKTsNCgkJICAgIAkJCX0NCgkJICAgIAkJCXJldHVybiB0YXJnZXQudW5vYnNlcnZlKCk7DQoJCSAgICAJCX07DQoJCSAgICAJfQ0KCSAgICAJCWlmKHByb3BlcnR5PT09InNwbGljZSIpIHsNCgkgICAgCQkJcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LGVuZCkgew0KCSAgICAJCQkJaWYodHlwZW9mKHN0YXJ0KSE9PSJudW1iZXIiIHx8IHR5cGVvZihlbmQpIT09Im51bWJlciIpIHsNCgkgICAgCQkJCQl0aHJvdyBuZXcgVHlwZUVycm9yKCJGaXJzdCB0d28gYXJndW1lbnRzIHRvIEFycmF5IHNwbGljZSBhcmUgbm90IG51bWJlciwgbnVtYmVyIik7DQoJICAgIAkJCQl9DQoJICAgIAkgICAgCQl2YXIgcmVtb3ZlZCA9IHRoaXMuc2xpY2Uoc3RhcnQsc3RhcnQrZW5kKSwNCgkgICAgCSAgICAJCQlhZGRlZENvdW50ID0gKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzLmxlbmd0aC0yIDogMCksDQoJICAgIAkgICAgCQkJY2hhbmdlID0gIHtvYmplY3Q6b2JqZWN0LHR5cGU6InNwbGljZSIsaW5kZXg6c3RhcnQscmVtb3ZlZDpyZW1vdmVkLGFkZGVkQ291bnQ6YWRkZWRDb3VudH07DQoJICAgIAkgICAgCQl0YXJnZXQuc3BsaWNlLmFwcGx5KHRhcmdldCxhcmd1bWVudHMpOw0KCSAgICAJICAgIAkJaWYoYWNjZXB0bGlzdC5pbmRleE9mKCJzcGxpY2UiKT49MCkgew0KCSAgICAJICAgIAkJCXZhciBzdGFydCA9IHByb3h5Ll9fb2JzZXJ2ZXJfXy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLA0KCSAgICAJICAgICAgICAJCQlkZWxpdmVyID0gcHJveHkuX19vYnNlcnZlcl9fLmRlbGl2ZXIoKTsNCgkgICAgCSAgICAJCQlwcm94eS5fX29ic2VydmVyX18uY2hhbmdlc2V0LnB1c2goY2hhbmdlKTsNCgkgICAgCSAgICAJCQlpZihzdGFydCkgew0KCSAgICAJCSAgICAgICAgCQlkZWxpdmVyKGZhbHNlLCh0eXBlb2YoZGVsaXZlci5kZWxheSk9PT0ibnVtYmVyIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpOw0KCSAgICAJCSAgICAgICAgCX0NCgkgICAgCSAgICAJCX0NCgkgICAgCSAgICAJfQ0KCSAgICAJCX0NCgkgICAgCQlpZihwcm9wZXJ0eT09PSJwdXNoIikgew0KCSAgICAJCQkgcmV0dXJuIGZ1bmN0aW9uKGl0ZW0pIHsNCgkgICAgCQkgICAgCXJldHVybiB0aGlzLnNwbGljZSh0aGlzLmxlbmd0aCwwLGl0ZW0pOw0KCSAgICAJCSAgICB9DQoJICAgIAkJfQ0KCSAgICAJCWlmKHByb3BlcnR5PT09InBvcCIpIHsNCgkgICAgCQkJIHJldHVybiBmdW5jdGlvbigpIHsNCgkgICAgCQkgICAgCXJldHVybiB0aGlzLnNwbGljZSh0aGlzLmxlbmd0aC0xLDEpOw0KCSAgICAJCSAgICB9DQoJICAgIAkJfQ0KCSAgICAJCWlmKHByb3BlcnR5PT09InVuc2hpZnQiKSB7DQoJICAgIAkJCSByZXR1cm4gZnVuY3Rpb24oaXRlbSkgew0KICAgIAkJICAgIAkJcmV0dXJuIHRoaXMuc3BsaWNlKDAsMCxpdGVtKTsNCiAgICAJCSAgICAJfQ0KCSAgICAJCX0NCgkgICAgCQlpZihwcm9wZXJ0eT09PSJzaGlmdCIpIHsNCgkgICAgCQkJcmV0dXJuIGZ1bmN0aW9uKCkgew0KCSAgICAJICAgIAkJcmV0dXJuIHRoaXMuc3BsaWNlKDAsMSk7DQoJICAgIAkgICAgCX0NCgkgICAgCQl9DQoJICAgIAkJcmV0dXJuIHRhcmdldFtwcm9wZXJ0eV07DQoJICAgIAl9fSk7DQoJICAgIAl2YXIgcHJveHkgPSBPYmplY3Qub2JzZXJ2ZShhcnJheXByb3h5LGZ1bmN0aW9uKGNoYW5nZXNldCkgeyANCgkgICAgCQl2YXIgY2hhbmdlcyA9IGNoYW5nZXNldC5maWx0ZXIoZnVuY3Rpb24oY2hhbmdlKSB7IHJldHVybiBjaGFuZ2UubmFtZSE9PSJsZW5ndGgiICYmIGNoYW5nZS5uYW1lIT09ImFkZCIgJiYgKCFhY2NlcHRsaXN0IHx8IGFjY2VwdGxpc3QuaW5kZXhPZihjaGFuZ2UudHlwZSk+PTApOyB9KTsNCgkgICAgCQlpZihjaGFuZ2VzLmxlbmd0aD4wKSB7DQoJICAgIAkJCWNhbGxiYWNrKGNoYW5nZXMpOw0KCSAgICAJCX0NCgkgICAgCX0sYWNjZXB0bGlzdCxwYXVzYWJsZSxwYXVzZSxkZWxheSk7DQoJICAgIAlyZXR1cm4gcHJveHk7DQoJICAgIH07DQoJICAgIEFycmF5LnVub2JzZXJ2ZSA9IGZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjaykgew0KCQkgIHJldHVybiBvYmplY3QudW5vYnNlcnZlKGNhbGxiYWNrKTsNCgkgICAgfQ0KCX0NCglPYmplY3QuZGVlcE9ic2VydmUgPSBmdW5jdGlvbihvYmplY3QsY2FsbGJhY2sscGFydHMpIHsNCg0KCQlwYXJ0cyA9IChwYXJ0cyA/IHBhcnRzIDogW10pOw0KDQoJCXZhciB0b1R5cGVOYW1lID0gZnVuY3Rpb24ob2JqKSB7DQoJCQlyZXR1cm4gKHt9KS50b1N0cmluZy5jYWxsKG9iaikubWF0Y2goL1xzKFthLXpBLVpdKykvKVsxXS50b0xvd2VyQ2FzZSgpDQoJCX0NCg0KCQlmdW5jdGlvbiByZW9ic2VydmUodmFsdWUsIHBhcnRzKSB7DQoJCQl2YXIga2V5cyA9IE9iamVjdC5rZXlzKHZhbHVlKTsNCgkJCWtleXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsNCgkJCQlpZigodG9UeXBlTmFtZSh2YWx1ZVtrZXldKSA9PT0gJ29iamVjdCcgfHwgdG9UeXBlTmFtZSh2YWx1ZVtrZXldKSA9PT0gJ2FycmF5JykgJiYgIXZhbHVlW2tleV0uaGFzT3duUHJvcGVydHkoJ19fb2JzZXJ2ZXJzX18nKSkgew0KCQkJCQl2YXIgbmV3cGFydHMgPSBwYXJ0cy5zbGljZSgwKTsNCgkJCQkJbmV3cGFydHMucHVzaChrZXkpOw0KCQkJCQl2YWx1ZVtrZXldID0gT2JqZWN0LmRlZXBPYnNlcnZlKHZhbHVlW2tleV0sY2FsbGJhY2ssbmV3cGFydHMpOw0KCQkJCX0NCgkJCX0pOw0KCQl9DQoNCgkJcmVvYnNlcnZlKG9iamVjdCwgcGFydHMpOw0KDQoJCXZhciBvYnNlcnZlZCA9IE9iamVjdC5vYnNlcnZlKG9iamVjdCxmdW5jdGlvbihjaGFuZ2VzZXQpIHsNCgkJCXZhciBjaGFuZ2VzID0gW107DQoJCQlmdW5jdGlvbiByZWN1cnNlKG5hbWUscm9vdE9iamVjdCxvbGRPYmplY3QsbmV3T2JqZWN0LHBhdGgpIHsNCgkJCQlpZihuZXdPYmplY3QgaW5zdGFuY2VvZiBPYmplY3QpIHsNCgkJCQkJdmFyIG5ld2tleXMgPSBPYmplY3Qua2V5cyhuZXdPYmplY3QpOw0KCQkJCQluZXdrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7DQoJCQkJCQlpZighb2xkT2JqZWN0IHx8IChvbGRPYmplY3Rba2V5XSE9PW5ld09iamVjdFtrZXldKSkgew0KCQkJCQkJCXZhciBvbGR2YWx1ZSA9IChvbGRPYmplY3QgJiYgb2xkT2JqZWN0W2tleV0hPT11bmRlZmluZWQgPyBvbGRPYmplY3Rba2V5XSA6IHVuZGVmaW5lZCksDQoJCQkJCQkJCWNoYW5nZSA9IChvbGR2YWx1ZT09PXVuZGVmaW5lZCA/ICJhZGQiIDogInVwZGF0ZSIpLA0KCQkJCQkJCQlrZXlwYXRoID0gcGF0aCArICIuIiArIGtleTsNCg0KCQkJCQkJCWNoYW5nZXMucHVzaCh7bmFtZTpuYW1lLG9iamVjdDpyb290T2JqZWN0LHR5cGU6Y2hhbmdlLG9sZFZhbHVlOm9sZHZhbHVlLG5ld1ZhbHVlOm5ld09iamVjdFtrZXldLGtleXBhdGg6a2V5cGF0aH0pOw0KCQkJCQkJCXJlY3Vyc2UobmFtZSxyb290T2JqZWN0LG9sZHZhbHVlLG5ld09iamVjdFtrZXldLGtleXBhdGgpOw0KCQkJCQkJfQ0KCQkJCQl9KTsNCgkJCQl9IGVsc2UgaWYob2xkT2JqZWN0IGluc3RhbmNlb2YgT2JqZWN0KSB7DQoJCQkJCXZhciBvbGRrZXlzID0gT2JqZWN0LmtleXMob2xkT2JqZWN0KTsNCgkJCQkJb2xka2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgew0KCQkJCQkJdmFyIGNoYW5nZSA9IChuZXdPYmplY3Q9PT1udWxsID8gInVwZGF0ZSIgOiAiZGVsZXRlIiksDQoJCQkJCQkJa2V5cGF0aCA9IHBhdGggKyAiLiIgKyBrZXk7DQoJCQkJCQkJDQoJCQkJCQljaGFuZ2VzLnB1c2goe25hbWU6bmFtZSxvYmplY3Q6cm9vdE9iamVjdCx0eXBlOmNoYW5nZSxvbGRWYWx1ZTpvbGRPYmplY3Rba2V5XSxuZXdWYWx1ZTpuZXdPYmplY3Qsa2V5cGF0aDprZXlwYXRofSk7DQoJCQkJCQlyZWN1cnNlKG5hbWUscm9vdE9iamVjdCxvbGRPYmplY3Rba2V5XSx1bmRlZmluZWQsa2V5cGF0aCk7DQoJCQkJCX0pOw0KCQkJCX0NCgkJCX0NCgkJCWNoYW5nZXNldC5mb3JFYWNoKGZ1bmN0aW9uKGNoYW5nZSkgew0KCQkJCXZhciBrZXlwYXRoID0gKHBhcnRzLmxlbmd0aD4wID8gcGFydHMuam9pbigiLiIpICsgIi4iIDogIiIpICsgY2hhbmdlLm5hbWU7DQoNCgkJCQlpZiAoY2hhbmdlLnR5cGUgPT09ICJ1cGRhdGUiIHx8IGNoYW5nZS50eXBlID09PSAiYWRkIikgeyANCgkJCQkJcmVvYnNlcnZlKGNoYW5nZS5vYmplY3QsIHBhcnRzKTsNCgkJCQl9DQoNCgkJCQljaGFuZ2VzLnB1c2goe25hbWU6Y2hhbmdlLm5hbWUsb2JqZWN0OmNoYW5nZS5vYmplY3QsdHlwZTpjaGFuZ2UudHlwZSxvbGRWYWx1ZTpjaGFuZ2Uub2xkVmFsdWUsbmV3VmFsdWU6Y2hhbmdlLm9iamVjdFtjaGFuZ2UubmFtZV0sa2V5cGF0aDprZXlwYXRofSk7DQoJCQkJcmVjdXJzZShjaGFuZ2UubmFtZSxjaGFuZ2Uub2JqZWN0LGNoYW5nZS5vbGRWYWx1ZSxjaGFuZ2Uub2JqZWN0W2NoYW5nZS5uYW1lXSxrZXlwYXRoKTsNCgkJCX0pOw0KCQkJY2FsbGJhY2soY2hhbmdlcyk7DQoJCX0pOw0KCQlyZXR1cm4gb2JzZXJ2ZWQ7DQoJfTsNCn0pKCk7DQoNCg0KLyoqKi8gfSksDQovKiAxNTQgKi8sDQovKiAxNTUgKi8sDQovKiAxNTYgKi8sDQovKiAxNTcgKi8sDQovKiAxNTggKi8sDQovKiAxNTkgKi8sDQovKiAxNjAgKi8sDQovKiAxNjEgKi8sDQovKiAxNjIgKi8NCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsNCg0KInVzZSBzdHJpY3QiOw0KDQoNCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsNCiAgdmFsdWU6IHRydWUNCn0pOw0KZXhwb3J0cy5EYXRhT2JqZWN0T2JzZXJ2ZXIgPSBleHBvcnRzLkRhdGFPYmplY3RSZXBvcnRlciA9IGV4cG9ydHMuU3luY2hlciA9IHVuZGVmaW5lZDsNCg0KdmFyIF9TeW5jaGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzApOw0KDQp2YXIgX1N5bmNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3luY2hlcik7DQoNCnZhciBfRGF0YU9iamVjdFJlcG9ydGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTkpOw0KDQp2YXIgX0RhdGFPYmplY3RSZXBvcnRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhT2JqZWN0UmVwb3J0ZXIpOw0KDQp2YXIgX0RhdGFPYmplY3RPYnNlcnZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTE4KTsNCg0KdmFyIF9EYXRhT2JqZWN0T2JzZXJ2ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdE9ic2VydmVyKTsNCg0KZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0NCg0KZXhwb3J0cy5TeW5jaGVyID0gX1N5bmNoZXIyLmRlZmF1bHQ7DQpleHBvcnRzLkRhdGFPYmplY3RSZXBvcnRlciA9IF9EYXRhT2JqZWN0UmVwb3J0ZXIyLmRlZmF1bHQ7DQpleHBvcnRzLkRhdGFPYmplY3RPYnNlcnZlciA9IF9EYXRhT2JqZWN0T2JzZXJ2ZXIyLmRlZmF1bHQ7DQoNCi8qKiovIH0pDQovKioqKioqLyBdKTsNCn0pOw0KfSx7fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qCiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlCiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2UKICogIHRyZWUuCiAqLwogLyogZXNsaW50LWVudiBub2RlICovCgondXNlIHN0cmljdCc7CgovLyBTaGltbWluZyBzdGFydHMgaGVyZS4KKGZ1bmN0aW9uKCkgewogIC8vIFV0aWxzLgogIHZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTsKICB2YXIgbG9nZ2luZyA9IHV0aWxzLmxvZzsKICB2YXIgYnJvd3NlckRldGFpbHMgPSB1dGlscy5icm93c2VyRGV0YWlsczsKICAvLyBFeHBvcnQgdG8gdGhlIGFkYXB0ZXIgZ2xvYmFsIG9iamVjdCB2aXNpYmxlIGluIHRoZSBicm93c2VyLgogIG1vZHVsZS5leHBvcnRzLmJyb3dzZXJEZXRhaWxzID0gYnJvd3NlckRldGFpbHM7CiAgbW9kdWxlLmV4cG9ydHMuZXh0cmFjdFZlcnNpb24gPSB1dGlscy5leHRyYWN0VmVyc2lvbjsKICBtb2R1bGUuZXhwb3J0cy5kaXNhYmxlTG9nID0gdXRpbHMuZGlzYWJsZUxvZzsKCiAgLy8gVW5jb21tZW50IHRoZSBsaW5lIGJlbG93IGlmIHlvdSB3YW50IGxvZ2dpbmcgdG8gb2NjdXIsIGluY2x1ZGluZyBsb2dnaW5nCiAgLy8gZm9yIHRoZSBzd2l0Y2ggc3RhdGVtZW50IGJlbG93LiBDYW4gYWxzbyBiZSB0dXJuZWQgb24gaW4gdGhlIGJyb3dzZXIgdmlhCiAgLy8gYWRhcHRlci5kaXNhYmxlTG9nKGZhbHNlKSwgYnV0IHRoZW4gbG9nZ2luZyBmcm9tIHRoZSBzd2l0Y2ggc3RhdGVtZW50IGJlbG93CiAgLy8gd2lsbCBub3QgYXBwZWFyLgogIC8vIHJlcXVpcmUoJy4vdXRpbHMnKS5kaXNhYmxlTG9nKGZhbHNlKTsKCiAgLy8gQnJvd3NlciBzaGltcy4KICB2YXIgY2hyb21lU2hpbSA9IHJlcXVpcmUoJy4vY2hyb21lL2Nocm9tZV9zaGltJykgfHwgbnVsbDsKICB2YXIgZWRnZVNoaW0gPSByZXF1aXJlKCcuL2VkZ2UvZWRnZV9zaGltJykgfHwgbnVsbDsKICB2YXIgZmlyZWZveFNoaW0gPSByZXF1aXJlKCcuL2ZpcmVmb3gvZmlyZWZveF9zaGltJykgfHwgbnVsbDsKICB2YXIgc2FmYXJpU2hpbSA9IHJlcXVpcmUoJy4vc2FmYXJpL3NhZmFyaV9zaGltJykgfHwgbnVsbDsKCiAgLy8gU2hpbSBicm93c2VyIGlmIGZvdW5kLgogIHN3aXRjaCAoYnJvd3NlckRldGFpbHMuYnJvd3NlcikgewogICAgY2FzZSAnY2hyb21lJzoKICAgICAgaWYgKCFjaHJvbWVTaGltIHx8ICFjaHJvbWVTaGltLnNoaW1QZWVyQ29ubmVjdGlvbikgewogICAgICAgIGxvZ2dpbmcoJ0Nocm9tZSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4nKTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgbG9nZ2luZygnYWRhcHRlci5qcyBzaGltbWluZyBjaHJvbWUuJyk7CiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuCiAgICAgIG1vZHVsZS5leHBvcnRzLmJyb3dzZXJTaGltID0gY2hyb21lU2hpbTsKCiAgICAgIGNocm9tZVNoaW0uc2hpbUdldFVzZXJNZWRpYSgpOwogICAgICBjaHJvbWVTaGltLnNoaW1NZWRpYVN0cmVhbSgpOwogICAgICB1dGlscy5zaGltQ3JlYXRlT2JqZWN0VVJMKCk7CiAgICAgIGNocm9tZVNoaW0uc2hpbVNvdXJjZU9iamVjdCgpOwogICAgICBjaHJvbWVTaGltLnNoaW1QZWVyQ29ubmVjdGlvbigpOwogICAgICBjaHJvbWVTaGltLnNoaW1PblRyYWNrKCk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnZmlyZWZveCc6CiAgICAgIGlmICghZmlyZWZveFNoaW0gfHwgIWZpcmVmb3hTaGltLnNoaW1QZWVyQ29ubmVjdGlvbikgewogICAgICAgIGxvZ2dpbmcoJ0ZpcmVmb3ggc2hpbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBhZGFwdGVyIHJlbGVhc2UuJyk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGxvZ2dpbmcoJ2FkYXB0ZXIuanMgc2hpbW1pbmcgZmlyZWZveC4nKTsKICAgICAgLy8gRXhwb3J0IHRvIHRoZSBhZGFwdGVyIGdsb2JhbCBvYmplY3QgdmlzaWJsZSBpbiB0aGUgYnJvd3Nlci4KICAgICAgbW9kdWxlLmV4cG9ydHMuYnJvd3NlclNoaW0gPSBmaXJlZm94U2hpbTsKCiAgICAgIGZpcmVmb3hTaGltLnNoaW1HZXRVc2VyTWVkaWEoKTsKICAgICAgdXRpbHMuc2hpbUNyZWF0ZU9iamVjdFVSTCgpOwogICAgICBmaXJlZm94U2hpbS5zaGltU291cmNlT2JqZWN0KCk7CiAgICAgIGZpcmVmb3hTaGltLnNoaW1QZWVyQ29ubmVjdGlvbigpOwogICAgICBmaXJlZm94U2hpbS5zaGltT25UcmFjaygpOwogICAgICBicmVhazsKICAgIGNhc2UgJ2VkZ2UnOgogICAgICBpZiAoIWVkZ2VTaGltIHx8ICFlZGdlU2hpbS5zaGltUGVlckNvbm5lY3Rpb24pIHsKICAgICAgICBsb2dnaW5nKCdNUyBlZGdlIHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBsb2dnaW5nKCdhZGFwdGVyLmpzIHNoaW1taW5nIGVkZ2UuJyk7CiAgICAgIC8vIEV4cG9ydCB0byB0aGUgYWRhcHRlciBnbG9iYWwgb2JqZWN0IHZpc2libGUgaW4gdGhlIGJyb3dzZXIuCiAgICAgIG1vZHVsZS5leHBvcnRzLmJyb3dzZXJTaGltID0gZWRnZVNoaW07CgogICAgICBlZGdlU2hpbS5zaGltR2V0VXNlck1lZGlhKCk7CiAgICAgIHV0aWxzLnNoaW1DcmVhdGVPYmplY3RVUkwoKTsKICAgICAgZWRnZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uKCk7CiAgICAgIGJyZWFrOwogICAgY2FzZSAnc2FmYXJpJzoKICAgICAgaWYgKCFzYWZhcmlTaGltKSB7CiAgICAgICAgbG9nZ2luZygnU2FmYXJpIHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLicpOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBsb2dnaW5nKCdhZGFwdGVyLmpzIHNoaW1taW5nIHNhZmFyaS4nKTsKICAgICAgLy8gRXhwb3J0IHRvIHRoZSBhZGFwdGVyIGdsb2JhbCBvYmplY3QgdmlzaWJsZSBpbiB0aGUgYnJvd3Nlci4KICAgICAgbW9kdWxlLmV4cG9ydHMuYnJvd3NlclNoaW0gPSBzYWZhcmlTaGltOwoKICAgICAgc2FmYXJpU2hpbS5zaGltR2V0VXNlck1lZGlhKCk7CiAgICAgIGJyZWFrOwogICAgZGVmYXVsdDoKICAgICAgbG9nZ2luZygnVW5zdXBwb3J0ZWQgYnJvd3NlciEnKTsKICB9Cn0pKCk7Cgp9LHsiLi9jaHJvbWUvY2hyb21lX3NoaW0iOjQsIi4vZWRnZS9lZGdlX3NoaW0iOjYsIi4vZmlyZWZveC9maXJlZm94X3NoaW0iOjgsIi4vc2FmYXJpL3NhZmFyaV9zaGltIjoxMCwiLi91dGlscyI6MTF9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKCi8qCiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlCiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2UKICogIHRyZWUuCiAqLwogLyogZXNsaW50LWVudiBub2RlICovCid1c2Ugc3RyaWN0JzsKdmFyIGxvZ2dpbmcgPSByZXF1aXJlKCcuLi91dGlscy5qcycpLmxvZzsKdmFyIGJyb3dzZXJEZXRhaWxzID0gcmVxdWlyZSgnLi4vdXRpbHMuanMnKS5icm93c2VyRGV0YWlsczsKCnZhciBjaHJvbWVTaGltID0gewogIHNoaW1NZWRpYVN0cmVhbTogZnVuY3Rpb24oKSB7CiAgICB3aW5kb3cuTWVkaWFTdHJlYW0gPSB3aW5kb3cuTWVkaWFTdHJlYW0gfHwgd2luZG93LndlYmtpdE1lZGlhU3RyZWFtOwogIH0sCgogIHNoaW1PblRyYWNrOiBmdW5jdGlvbigpIHsKICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JyAmJiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gJiYgISgnb250cmFjaycgaW4KICAgICAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlKSkgewogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwgJ29udHJhY2snLCB7CiAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgIHJldHVybiB0aGlzLl9vbnRyYWNrOwogICAgICAgIH0sCiAgICAgICAgc2V0OiBmdW5jdGlvbihmKSB7CiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICBpZiAodGhpcy5fb250cmFjaykgewogICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb250cmFjayk7CiAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWRkc3RyZWFtJywgdGhpcy5fb250cmFja3BvbHkpOwogICAgICAgICAgfQogICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCd0cmFjaycsIHRoaXMuX29udHJhY2sgPSBmKTsKICAgICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcignYWRkc3RyZWFtJywgdGhpcy5fb250cmFja3BvbHkgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgICAgIC8vIG9uYWRkc3RyZWFtIGRvZXMgbm90IGZpcmUgd2hlbiBhIHRyYWNrIGlzIGFkZGVkIHRvIGFuIGV4aXN0aW5nCiAgICAgICAgICAgIC8vIHN0cmVhbS4gQnV0IHN0cmVhbS5vbmFkZHRyYWNrIGlzIGltcGxlbWVudGVkIHNvIHdlIHVzZSB0aGF0LgogICAgICAgICAgICBlLnN0cmVhbS5hZGRFdmVudExpc3RlbmVyKCdhZGR0cmFjaycsIGZ1bmN0aW9uKHRlKSB7CiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCd0cmFjaycpOwogICAgICAgICAgICAgIGV2ZW50LnRyYWNrID0gdGUudHJhY2s7CiAgICAgICAgICAgICAgZXZlbnQucmVjZWl2ZXIgPSB7dHJhY2s6IHRlLnRyYWNrfTsKICAgICAgICAgICAgICBldmVudC5zdHJlYW1zID0gW2Uuc3RyZWFtXTsKICAgICAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZS5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykgewogICAgICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgndHJhY2snKTsKICAgICAgICAgICAgICBldmVudC50cmFjayA9IHRyYWNrOwogICAgICAgICAgICAgIGV2ZW50LnJlY2VpdmVyID0ge3RyYWNrOiB0cmFja307CiAgICAgICAgICAgICAgZXZlbnQuc3RyZWFtcyA9IFtlLnN0cmVhbV07CiAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTsKICAgICAgICAgIH0uYmluZCh0aGlzKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAoKICBzaGltU291cmNlT2JqZWN0OiBmdW5jdGlvbigpIHsKICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgewogICAgICBpZiAod2luZG93LkhUTUxNZWRpYUVsZW1lbnQgJiYKICAgICAgICAhKCdzcmNPYmplY3QnIGluIHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSkpIHsKICAgICAgICAvLyBTaGltIHRoZSBzcmNPYmplY3QgcHJvcGVydHksIG9uY2UsIHdoZW4gSFRNTE1lZGlhRWxlbWVudCBpcyBmb3VuZC4KICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCAnc3JjT2JqZWN0JywgewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NyY09iamVjdDsKICAgICAgICAgIH0sCiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICAgIC8vIFVzZSBfc3JjT2JqZWN0IGFzIGEgcHJpdmF0ZSBwcm9wZXJ0eSBmb3IgdGhpcyBzaGltCiAgICAgICAgICAgIHRoaXMuX3NyY09iamVjdCA9IHN0cmVhbTsKICAgICAgICAgICAgaWYgKHRoaXMuc3JjKSB7CiAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLnNyYyk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghc3RyZWFtKSB7CiAgICAgICAgICAgICAgdGhpcy5zcmMgPSAnJzsKICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChzdHJlYW0pOwogICAgICAgICAgICAvLyBXZSBuZWVkIHRvIHJlY3JlYXRlIHRoZSBibG9iIHVybCB3aGVuIGEgdHJhY2sgaXMgYWRkZWQgb3IKICAgICAgICAgICAgLy8gcmVtb3ZlZC4gRG9pbmcgaXQgbWFudWFsbHkgc2luY2Ugd2Ugd2FudCB0byBhdm9pZCBhIHJlY3Vyc2lvbi4KICAgICAgICAgICAgc3RyZWFtLmFkZEV2ZW50TGlzdGVuZXIoJ2FkZHRyYWNrJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgaWYgKHNlbGYuc3JjKSB7CiAgICAgICAgICAgICAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHNlbGYuc3JjKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc2VsZi5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKHN0cmVhbSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBzdHJlYW0uYWRkRXZlbnRMaXN0ZW5lcigncmVtb3ZldHJhY2snLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBpZiAoc2VsZi5zcmMpIHsKICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwoc2VsZi5zcmMpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBzZWxmLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoc3RyZWFtKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LAoKICBzaGltUGVlckNvbm5lY3Rpb246IGZ1bmN0aW9uKCkgewogICAgLy8gVGhlIFJUQ1BlZXJDb25uZWN0aW9uIG9iamVjdC4KICAgIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7CiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKHBjQ29uZmlnLCBwY0NvbnN0cmFpbnRzKSB7CiAgICAgICAgLy8gVHJhbnNsYXRlIGljZVRyYW5zcG9ydFBvbGljeSB0byBpY2VUcmFuc3BvcnRzLAogICAgICAgIC8vIHNlZSBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3dlYnJ0Yy9pc3N1ZXMvZGV0YWlsP2lkPTQ4NjkKICAgICAgICAvLyB0aGlzIHdhcyBmaXhlZCBpbiBNNTYgYWxvbmcgd2l0aCB1bnByZWZpeGluZyBSVENQZWVyQ29ubmVjdGlvbi4KICAgICAgICBsb2dnaW5nKCdQZWVyQ29ubmVjdGlvbicpOwogICAgICAgIGlmIChwY0NvbmZpZyAmJiBwY0NvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3kpIHsKICAgICAgICAgIHBjQ29uZmlnLmljZVRyYW5zcG9ydHMgPSBwY0NvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3k7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbmV3IHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uKHBjQ29uZmlnLCBwY0NvbnN0cmFpbnRzKTsKICAgICAgfTsKICAgICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSA9IHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZTsKICAgICAgLy8gd3JhcCBzdGF0aWMgbWV0aG9kcy4gQ3VycmVudGx5IGp1c3QgZ2VuZXJhdGVDZXJ0aWZpY2F0ZS4KICAgICAgaWYgKHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGUpIHsKICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLCAnZ2VuZXJhdGVDZXJ0aWZpY2F0ZScsIHsKICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB3ZWJraXRSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CgogICAgdmFyIG9yaWdHZXRTdGF0cyA9IFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0czsKICAgIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKHNlbGVjdG9yLAogICAgICAgIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykgewogICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzOwoKICAgICAgLy8gSWYgc2VsZWN0b3IgaXMgYSBmdW5jdGlvbiB0aGVuIHdlIGFyZSBpbiB0aGUgb2xkIHN0eWxlIHN0YXRzIHNvIGp1c3QKICAgICAgLy8gcGFzcyBiYWNrIHRoZSBvcmlnaW5hbCBnZXRTdGF0cyBmb3JtYXQgdG8gYXZvaWQgYnJlYWtpbmcgb2xkIHVzZXJzLgogICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIHNlbGVjdG9yID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgcmV0dXJuIG9yaWdHZXRTdGF0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICAvLyBXaGVuIHNwZWMtc3R5bGUgZ2V0U3RhdHMgaXMgc3VwcG9ydGVkLCByZXR1cm4gdGhvc2Ugd2hlbiBjYWxsZWQgd2l0aAogICAgICAvLyBlaXRoZXIgbm8gYXJndW1lbnRzIG9yIHRoZSBzZWxlY3RvciBhcmd1bWVudCBpcyBudWxsLgogICAgICBpZiAob3JpZ0dldFN0YXRzLmxlbmd0aCA9PT0gMCAmJiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fAogICAgICAgICAgdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ2Z1bmN0aW9uJykpIHsKICAgICAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIFtdKTsKICAgICAgfQoKICAgICAgdmFyIGZpeENocm9tZVN0YXRzXyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgdmFyIHN0YW5kYXJkUmVwb3J0ID0ge307CiAgICAgICAgdmFyIHJlcG9ydHMgPSByZXNwb25zZS5yZXN1bHQoKTsKICAgICAgICByZXBvcnRzLmZvckVhY2goZnVuY3Rpb24ocmVwb3J0KSB7CiAgICAgICAgICB2YXIgc3RhbmRhcmRTdGF0cyA9IHsKICAgICAgICAgICAgaWQ6IHJlcG9ydC5pZCwKICAgICAgICAgICAgdGltZXN0YW1wOiByZXBvcnQudGltZXN0YW1wLAogICAgICAgICAgICB0eXBlOiB7CiAgICAgICAgICAgICAgbG9jYWxjYW5kaWRhdGU6ICdsb2NhbC1jYW5kaWRhdGUnLAogICAgICAgICAgICAgIHJlbW90ZWNhbmRpZGF0ZTogJ3JlbW90ZS1jYW5kaWRhdGUnCiAgICAgICAgICAgIH1bcmVwb3J0LnR5cGVdIHx8IHJlcG9ydC50eXBlCiAgICAgICAgICB9OwogICAgICAgICAgcmVwb3J0Lm5hbWVzKCkuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7CiAgICAgICAgICAgIHN0YW5kYXJkU3RhdHNbbmFtZV0gPSByZXBvcnQuc3RhdChuYW1lKTsKICAgICAgICAgIH0pOwogICAgICAgICAgc3RhbmRhcmRSZXBvcnRbc3RhbmRhcmRTdGF0cy5pZF0gPSBzdGFuZGFyZFN0YXRzOwogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gc3RhbmRhcmRSZXBvcnQ7CiAgICAgIH07CgogICAgICAvLyBzaGltIGdldFN0YXRzIHdpdGggbWFwbGlrZSBzdXBwb3J0CiAgICAgIHZhciBtYWtlTWFwU3RhdHMgPSBmdW5jdGlvbihzdGF0cykgewogICAgICAgIHJldHVybiBuZXcgTWFwKE9iamVjdC5rZXlzKHN0YXRzKS5tYXAoZnVuY3Rpb24oa2V5KSB7CiAgICAgICAgICByZXR1cm5ba2V5LCBzdGF0c1trZXldXTsKICAgICAgICB9KSk7CiAgICAgIH07CgogICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+PSAyKSB7CiAgICAgICAgdmFyIHN1Y2Nlc3NDYWxsYmFja1dyYXBwZXJfID0gZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgIGFyZ3NbMV0obWFrZU1hcFN0YXRzKGZpeENocm9tZVN0YXRzXyhyZXNwb25zZSkpKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb3JpZ0dldFN0YXRzLmFwcGx5KHRoaXMsIFtzdWNjZXNzQ2FsbGJhY2tXcmFwcGVyXywKICAgICAgICAgICAgYXJndW1lbnRzWzBdXSk7CiAgICAgIH0KCiAgICAgIC8vIHByb21pc2Utc3VwcG9ydAogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgb3JpZ0dldFN0YXRzLmFwcGx5KHNlbGYsIFsKICAgICAgICAgIGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIHJlc29sdmUobWFrZU1hcFN0YXRzKGZpeENocm9tZVN0YXRzXyhyZXNwb25zZSkpKTsKICAgICAgICAgIH0sIHJlamVjdF0pOwogICAgICB9KS50aGVuKHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjayk7CiAgICB9OwoKICAgIC8vIGFkZCBwcm9taXNlIHN1cHBvcnQgLS0gbmF0aXZlbHkgYXZhaWxhYmxlIGluIENocm9tZSA1MQogICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA1MSkgewogICAgICBbJ3NldExvY2FsRGVzY3JpcHRpb24nLCAnc2V0UmVtb3RlRGVzY3JpcHRpb24nLCAnYWRkSWNlQ2FuZGlkYXRlJ10KICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkgewogICAgICAgICAgICB2YXIgbmF0aXZlTWV0aG9kID0gUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07CiAgICAgICAgICAgIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICAgICAgICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICBuYXRpdmVNZXRob2QuYXBwbHkoc2VsZiwgW2FyZ3NbMF0sIHJlc29sdmUsIHJlamVjdF0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICAgIHJldHVybiBwcm9taXNlOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgYXJnc1sxXS5hcHBseShudWxsLCBbXSk7CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBmdW5jdGlvbihlcnIpIHsKICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA+PSAzKSB7CiAgICAgICAgICAgICAgICAgIGFyZ3NbMl0uYXBwbHkobnVsbCwgW2Vycl0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9OwogICAgICAgICAgfSk7CiAgICB9CgogICAgLy8gcHJvbWlzZSBzdXBwb3J0IGZvciBjcmVhdGVPZmZlciBhbmQgY3JlYXRlQW5zd2VyLiBBdmFpbGFibGUgKHdpdGhvdXQKICAgIC8vIGJ1Z3MpIHNpbmNlIE01MjogY3JidWcvNjE5Mjg5CiAgICBpZiAoYnJvd3NlckRldGFpbHMudmVyc2lvbiA8IDUyKSB7CiAgICAgIFsnY3JlYXRlT2ZmZXInLCAnY3JlYXRlQW5zd2VyJ10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHsKICAgICAgICB2YXIgbmF0aXZlTWV0aG9kID0gUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF07CiAgICAgICAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSB8fCAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJgogICAgICAgICAgICAgIHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdvYmplY3QnKSkgewogICAgICAgICAgICB2YXIgb3B0cyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7CiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICBuYXRpdmVNZXRob2QuYXBwbHkoc2VsZiwgW3Jlc29sdmUsIHJlamVjdCwgb3B0c10pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBuYXRpdmVNZXRob2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCiAgICAvLyBzaGltIGltcGxpY2l0IGNyZWF0aW9uIG9mIFJUQ1Nlc3Npb25EZXNjcmlwdGlvbi9SVENJY2VDYW5kaWRhdGUKICAgIFsnc2V0TG9jYWxEZXNjcmlwdGlvbicsICdzZXRSZW1vdGVEZXNjcmlwdGlvbicsICdhZGRJY2VDYW5kaWRhdGUnXQogICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkgewogICAgICAgICAgdmFyIG5hdGl2ZU1ldGhvZCA9IFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdOwogICAgICAgICAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgYXJndW1lbnRzWzBdID0gbmV3ICgobWV0aG9kID09PSAnYWRkSWNlQ2FuZGlkYXRlJykgPwogICAgICAgICAgICAgICAgUlRDSWNlQ2FuZGlkYXRlIDogUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKShhcmd1bWVudHNbMF0pOwogICAgICAgICAgICByZXR1cm4gbmF0aXZlTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICB9OwogICAgICAgIH0pOwoKICAgIC8vIHN1cHBvcnQgZm9yIGFkZEljZUNhbmRpZGF0ZShudWxsIG9yIHVuZGVmaW5lZCkKICAgIHZhciBuYXRpdmVBZGRJY2VDYW5kaWRhdGUgPQogICAgICAgIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU7CiAgICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICghYXJndW1lbnRzWzBdKSB7CiAgICAgICAgaWYgKGFyZ3VtZW50c1sxXSkgewogICAgICAgICAgYXJndW1lbnRzWzFdLmFwcGx5KG51bGwpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIG5hdGl2ZUFkZEljZUNhbmRpZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKICB9Cn07CgoKLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzLgptb2R1bGUuZXhwb3J0cyA9IHsKICBzaGltTWVkaWFTdHJlYW06IGNocm9tZVNoaW0uc2hpbU1lZGlhU3RyZWFtLAogIHNoaW1PblRyYWNrOiBjaHJvbWVTaGltLnNoaW1PblRyYWNrLAogIHNoaW1Tb3VyY2VPYmplY3Q6IGNocm9tZVNoaW0uc2hpbVNvdXJjZU9iamVjdCwKICBzaGltUGVlckNvbm5lY3Rpb246IGNocm9tZVNoaW0uc2hpbVBlZXJDb25uZWN0aW9uLAogIHNoaW1HZXRVc2VyTWVkaWE6IHJlcXVpcmUoJy4vZ2V0dXNlcm1lZGlhJykKfTsKCn0seyIuLi91dGlscy5qcyI6MTEsIi4vZ2V0dXNlcm1lZGlhIjo1fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qCiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlCiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2UKICogIHRyZWUuCiAqLwogLyogZXNsaW50LWVudiBub2RlICovCid1c2Ugc3RyaWN0JzsKdmFyIGxvZ2dpbmcgPSByZXF1aXJlKCcuLi91dGlscy5qcycpLmxvZzsKCi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy4KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHsKICB2YXIgY29uc3RyYWludHNUb0Nocm9tZV8gPSBmdW5jdGlvbihjKSB7CiAgICBpZiAodHlwZW9mIGMgIT09ICdvYmplY3QnIHx8IGMubWFuZGF0b3J5IHx8IGMub3B0aW9uYWwpIHsKICAgICAgcmV0dXJuIGM7CiAgICB9CiAgICB2YXIgY2MgPSB7fTsKICAgIE9iamVjdC5rZXlzKGMpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7CiAgICAgIGlmIChrZXkgPT09ICdyZXF1aXJlJyB8fCBrZXkgPT09ICdhZHZhbmNlZCcgfHwga2V5ID09PSAnbWVkaWFTb3VyY2UnKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciByID0gKHR5cGVvZiBjW2tleV0gPT09ICdvYmplY3QnKSA/IGNba2V5XSA6IHtpZGVhbDogY1trZXldfTsKICAgICAgaWYgKHIuZXhhY3QgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygci5leGFjdCA9PT0gJ251bWJlcicpIHsKICAgICAgICByLm1pbiA9IHIubWF4ID0gci5leGFjdDsKICAgICAgfQogICAgICB2YXIgb2xkbmFtZV8gPSBmdW5jdGlvbihwcmVmaXgsIG5hbWUpIHsKICAgICAgICBpZiAocHJlZml4KSB7CiAgICAgICAgICByZXR1cm4gcHJlZml4ICsgbmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAobmFtZSA9PT0gJ2RldmljZUlkJykgPyAnc291cmNlSWQnIDogbmFtZTsKICAgICAgfTsKICAgICAgaWYgKHIuaWRlYWwgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGNjLm9wdGlvbmFsID0gY2Mub3B0aW9uYWwgfHwgW107CiAgICAgICAgdmFyIG9jID0ge307CiAgICAgICAgaWYgKHR5cGVvZiByLmlkZWFsID09PSAnbnVtYmVyJykgewogICAgICAgICAgb2Nbb2xkbmFtZV8oJ21pbicsIGtleSldID0gci5pZGVhbDsKICAgICAgICAgIGNjLm9wdGlvbmFsLnB1c2gob2MpOwogICAgICAgICAgb2MgPSB7fTsKICAgICAgICAgIG9jW29sZG5hbWVfKCdtYXgnLCBrZXkpXSA9IHIuaWRlYWw7CiAgICAgICAgICBjYy5vcHRpb25hbC5wdXNoKG9jKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgb2Nbb2xkbmFtZV8oJycsIGtleSldID0gci5pZGVhbDsKICAgICAgICAgIGNjLm9wdGlvbmFsLnB1c2gob2MpOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoci5leGFjdCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiByLmV4YWN0ICE9PSAnbnVtYmVyJykgewogICAgICAgIGNjLm1hbmRhdG9yeSA9IGNjLm1hbmRhdG9yeSB8fCB7fTsKICAgICAgICBjYy5tYW5kYXRvcnlbb2xkbmFtZV8oJycsIGtleSldID0gci5leGFjdDsKICAgICAgfSBlbHNlIHsKICAgICAgICBbJ21pbicsICdtYXgnXS5mb3JFYWNoKGZ1bmN0aW9uKG1peCkgewogICAgICAgICAgaWYgKHJbbWl4XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGNjLm1hbmRhdG9yeSA9IGNjLm1hbmRhdG9yeSB8fCB7fTsKICAgICAgICAgICAgY2MubWFuZGF0b3J5W29sZG5hbWVfKG1peCwga2V5KV0gPSByW21peF07CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogICAgaWYgKGMuYWR2YW5jZWQpIHsKICAgICAgY2Mub3B0aW9uYWwgPSAoY2Mub3B0aW9uYWwgfHwgW10pLmNvbmNhdChjLmFkdmFuY2VkKTsKICAgIH0KICAgIHJldHVybiBjYzsKICB9OwoKICB2YXIgc2hpbUNvbnN0cmFpbnRzXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBmdW5jKSB7CiAgICBjb25zdHJhaW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTsKICAgIGlmIChjb25zdHJhaW50cyAmJiBjb25zdHJhaW50cy5hdWRpbykgewogICAgICBjb25zdHJhaW50cy5hdWRpbyA9IGNvbnN0cmFpbnRzVG9DaHJvbWVfKGNvbnN0cmFpbnRzLmF1ZGlvKTsKICAgIH0KICAgIGlmIChjb25zdHJhaW50cyAmJiB0eXBlb2YgY29uc3RyYWludHMudmlkZW8gPT09ICdvYmplY3QnKSB7CiAgICAgIC8vIFNoaW0gZmFjaW5nTW9kZSBmb3IgbW9iaWxlLCB3aGVyZSBpdCBkZWZhdWx0cyB0byAidXNlciIuCiAgICAgIHZhciBmYWNlID0gY29uc3RyYWludHMudmlkZW8uZmFjaW5nTW9kZTsKICAgICAgZmFjZSA9IGZhY2UgJiYgKCh0eXBlb2YgZmFjZSA9PT0gJ29iamVjdCcpID8gZmFjZSA6IHtpZGVhbDogZmFjZX0pOwoKICAgICAgaWYgKChmYWNlICYmIChmYWNlLmV4YWN0ID09PSAndXNlcicgfHwgZmFjZS5leGFjdCA9PT0gJ2Vudmlyb25tZW50JyB8fAogICAgICAgICAgICAgICAgICAgIGZhY2UuaWRlYWwgPT09ICd1c2VyJyB8fCBmYWNlLmlkZWFsID09PSAnZW52aXJvbm1lbnQnKSkgJiYKICAgICAgICAgICEobmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50cyAmJgogICAgICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFN1cHBvcnRlZENvbnN0cmFpbnRzKCkuZmFjaW5nTW9kZSkpIHsKICAgICAgICBkZWxldGUgY29uc3RyYWludHMudmlkZW8uZmFjaW5nTW9kZTsKICAgICAgICBpZiAoZmFjZS5leGFjdCA9PT0gJ2Vudmlyb25tZW50JyB8fCBmYWNlLmlkZWFsID09PSAnZW52aXJvbm1lbnQnKSB7CiAgICAgICAgICAvLyBMb29rIGZvciAiYmFjayIgaW4gbGFiZWwsIG9yIHVzZSBsYXN0IGNhbSAodHlwaWNhbGx5IGJhY2sgY2FtKS4KICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMoKQogICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGV2aWNlcykgewogICAgICAgICAgICBkZXZpY2VzID0gZGV2aWNlcy5maWx0ZXIoZnVuY3Rpb24oZCkgewogICAgICAgICAgICAgIHJldHVybiBkLmtpbmQgPT09ICd2aWRlb2lucHV0JzsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBiYWNrID0gZGV2aWNlcy5maW5kKGZ1bmN0aW9uKGQpIHsKICAgICAgICAgICAgICByZXR1cm4gZC5sYWJlbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ2JhY2snKSAhPT0gLTE7CiAgICAgICAgICAgIH0pIHx8IChkZXZpY2VzLmxlbmd0aCAmJiBkZXZpY2VzW2RldmljZXMubGVuZ3RoIC0gMV0pOwogICAgICAgICAgICBpZiAoYmFjaykgewogICAgICAgICAgICAgIGNvbnN0cmFpbnRzLnZpZGVvLmRldmljZUlkID0gZmFjZS5leGFjdCA/IHtleGFjdDogYmFjay5kZXZpY2VJZH0gOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtpZGVhbDogYmFjay5kZXZpY2VJZH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29uc3RyYWludHMudmlkZW8gPSBjb25zdHJhaW50c1RvQ2hyb21lXyhjb25zdHJhaW50cy52aWRlbyk7CiAgICAgICAgICAgIGxvZ2dpbmcoJ2Nocm9tZTogJyArIEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7CiAgICAgICAgICAgIHJldHVybiBmdW5jKGNvbnN0cmFpbnRzKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9DaHJvbWVfKGNvbnN0cmFpbnRzLnZpZGVvKTsKICAgIH0KICAgIGxvZ2dpbmcoJ2Nocm9tZTogJyArIEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7CiAgICByZXR1cm4gZnVuYyhjb25zdHJhaW50cyk7CiAgfTsKCiAgdmFyIHNoaW1FcnJvcl8gPSBmdW5jdGlvbihlKSB7CiAgICByZXR1cm4gewogICAgICBuYW1lOiB7CiAgICAgICAgUGVybWlzc2lvbkRlbmllZEVycm9yOiAnTm90QWxsb3dlZEVycm9yJywKICAgICAgICBDb25zdHJhaW50Tm90U2F0aXNmaWVkRXJyb3I6ICdPdmVyY29uc3RyYWluZWRFcnJvcicKICAgICAgfVtlLm5hbWVdIHx8IGUubmFtZSwKICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLAogICAgICBjb25zdHJhaW50OiBlLmNvbnN0cmFpbnROYW1lLAogICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubmFtZSArICh0aGlzLm1lc3NhZ2UgJiYgJzogJykgKyB0aGlzLm1lc3NhZ2U7CiAgICAgIH0KICAgIH07CiAgfTsKCiAgdmFyIGdldFVzZXJNZWRpYV8gPSBmdW5jdGlvbihjb25zdHJhaW50cywgb25TdWNjZXNzLCBvbkVycm9yKSB7CiAgICBzaGltQ29uc3RyYWludHNfKGNvbnN0cmFpbnRzLCBmdW5jdGlvbihjKSB7CiAgICAgIG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEoYywgb25TdWNjZXNzLCBmdW5jdGlvbihlKSB7CiAgICAgICAgb25FcnJvcihzaGltRXJyb3JfKGUpKTsKICAgICAgfSk7CiAgICB9KTsKICB9OwoKICBuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhID0gZ2V0VXNlck1lZGlhXzsKCiAgLy8gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGdldFVzZXJNZWRpYSBhcyBhIFByb21pc2UuCiAgdmFyIGdldFVzZXJNZWRpYVByb21pc2VfID0gZnVuY3Rpb24oY29uc3RyYWludHMpIHsKICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsKICAgICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYShjb25zdHJhaW50cywgcmVzb2x2ZSwgcmVqZWN0KTsKICAgIH0pOwogIH07CgogIGlmICghbmF2aWdhdG9yLm1lZGlhRGV2aWNlcykgewogICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyA9IHsKICAgICAgZ2V0VXNlck1lZGlhOiBnZXRVc2VyTWVkaWFQcm9taXNlXywKICAgICAgZW51bWVyYXRlRGV2aWNlczogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHsKICAgICAgICAgIHZhciBraW5kcyA9IHthdWRpbzogJ2F1ZGlvaW5wdXQnLCB2aWRlbzogJ3ZpZGVvaW5wdXQnfTsKICAgICAgICAgIHJldHVybiBNZWRpYVN0cmVhbVRyYWNrLmdldFNvdXJjZXMoZnVuY3Rpb24oZGV2aWNlcykgewogICAgICAgICAgICByZXNvbHZlKGRldmljZXMubWFwKGZ1bmN0aW9uKGRldmljZSkgewogICAgICAgICAgICAgIHJldHVybiB7bGFiZWw6IGRldmljZS5sYWJlbCwKICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IGtpbmRzW2RldmljZS5raW5kXSwKICAgICAgICAgICAgICAgICAgICAgIGRldmljZUlkOiBkZXZpY2UuaWQsCiAgICAgICAgICAgICAgICAgICAgICBncm91cElkOiAnJ307CiAgICAgICAgICAgIH0pKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9OwogIH0KCiAgLy8gQSBzaGltIGZvciBnZXRVc2VyTWVkaWEgbWV0aG9kIG9uIHRoZSBtZWRpYURldmljZXMgb2JqZWN0LgogIC8vIFRPRE8oS2FwdGVuSmFuc3NvbikgcmVtb3ZlIG9uY2UgaW1wbGVtZW50ZWQgaW4gQ2hyb21lIHN0YWJsZS4KICBpZiAoIW5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKSB7CiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzKSB7CiAgICAgIHJldHVybiBnZXRVc2VyTWVkaWFQcm9taXNlXyhjb25zdHJhaW50cyk7CiAgICB9OwogIH0gZWxzZSB7CiAgICAvLyBFdmVuIHRob3VnaCBDaHJvbWUgNDUgaGFzIG5hdmlnYXRvci5tZWRpYURldmljZXMgYW5kIGEgZ2V0VXNlck1lZGlhCiAgICAvLyBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgUHJvbWlzZSwgaXQgZG9lcyBub3QgYWNjZXB0IHNwZWMtc3R5bGUKICAgIC8vIGNvbnN0cmFpbnRzLgogICAgdmFyIG9yaWdHZXRVc2VyTWVkaWEgPSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS4KICAgICAgICBiaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpOwogICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgPSBmdW5jdGlvbihjcykgewogICAgICByZXR1cm4gc2hpbUNvbnN0cmFpbnRzXyhjcywgZnVuY3Rpb24oYykgewogICAgICAgIHJldHVybiBvcmlnR2V0VXNlck1lZGlhKGMpLnRoZW4oZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgICBpZiAoYy5hdWRpbyAmJiAhc3RyZWFtLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RoIHx8CiAgICAgICAgICAgICAgYy52aWRlbyAmJiAhc3RyZWFtLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoKSB7CiAgICAgICAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrKSB7CiAgICAgICAgICAgICAgdHJhY2suc3RvcCgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgdGhyb3cgbmV3IERPTUV4Y2VwdGlvbignJywgJ05vdEZvdW5kRXJyb3InKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBzdHJlYW07CiAgICAgICAgfSwgZnVuY3Rpb24oZSkgewogICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHNoaW1FcnJvcl8oZSkpOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH07CiAgfQoKICAvLyBEdW1teSBkZXZpY2VjaGFuZ2UgZXZlbnQgbWV0aG9kcy4KICAvLyBUT0RPKEthcHRlbkphbnNzb24pIHJlbW92ZSBvbmNlIGltcGxlbWVudGVkIGluIENocm9tZSBzdGFibGUuCiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmFkZEV2ZW50TGlzdGVuZXIgPT09ICd1bmRlZmluZWQnKSB7CiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbigpIHsKICAgICAgbG9nZ2luZygnRHVtbXkgbWVkaWFEZXZpY2VzLmFkZEV2ZW50TGlzdGVuZXIgY2FsbGVkLicpOwogICAgfTsKICB9CiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPT09ICd1bmRlZmluZWQnKSB7CiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbigpIHsKICAgICAgbG9nZ2luZygnRHVtbXkgbWVkaWFEZXZpY2VzLnJlbW92ZUV2ZW50TGlzdGVuZXIgY2FsbGVkLicpOwogICAgfTsKICB9Cn07Cgp9LHsiLi4vdXRpbHMuanMiOjExfV0sNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qCiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlCiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2UKICogIHRyZWUuCiAqLwogLyogZXNsaW50LWVudiBub2RlICovCid1c2Ugc3RyaWN0JzsKCnZhciBTRFBVdGlscyA9IHJlcXVpcmUoJ3NkcCcpOwp2YXIgYnJvd3NlckRldGFpbHMgPSByZXF1aXJlKCcuLi91dGlscycpLmJyb3dzZXJEZXRhaWxzOwoKdmFyIGVkZ2VTaGltID0gewogIHNoaW1QZWVyQ29ubmVjdGlvbjogZnVuY3Rpb24oKSB7CiAgICBpZiAod2luZG93LlJUQ0ljZUdhdGhlcmVyKSB7CiAgICAgIC8vIE9SVEMgZGVmaW5lcyBhbiBSVENJY2VDYW5kaWRhdGUgb2JqZWN0IGJ1dCBubyBjb25zdHJ1Y3Rvci4KICAgICAgLy8gTm90IGltcGxlbWVudGVkIGluIEVkZ2UuCiAgICAgIGlmICghd2luZG93LlJUQ0ljZUNhbmRpZGF0ZSkgewogICAgICAgIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUgPSBmdW5jdGlvbihhcmdzKSB7CiAgICAgICAgICByZXR1cm4gYXJnczsKICAgICAgICB9OwogICAgICB9CiAgICAgIC8vIE9SVEMgZG9lcyBub3QgaGF2ZSBhIHNlc3Npb24gZGVzY3JpcHRpb24gb2JqZWN0IGJ1dAogICAgICAvLyBvdGhlciBicm93c2VycyAoaS5lLiBDaHJvbWUpIHRoYXQgd2lsbCBzdXBwb3J0IGJvdGggUEMgYW5kIE9SVEMKICAgICAgLy8gaW4gdGhlIGZ1dHVyZSBtaWdodCBoYXZlIHRoaXMgZGVmaW5lZCBhbHJlYWR5LgogICAgICBpZiAoIXdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24pIHsKICAgICAgICB3aW5kb3cuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uID0gZnVuY3Rpb24oYXJncykgewogICAgICAgICAgcmV0dXJuIGFyZ3M7CiAgICAgICAgfTsKICAgICAgfQogICAgICAvLyB0aGlzIGFkZHMgYW4gYWRkaXRpb25hbCBldmVudCBsaXN0ZW5lciB0byBNZWRpYVN0cmFja1RyYWNrIHRoYXQgc2lnbmFscwogICAgICAvLyB3aGVuIGEgdHJhY2tzIGVuYWJsZWQgcHJvcGVydHkgd2FzIGNoYW5nZWQuCiAgICAgIHZhciBvcmlnTVNURW5hYmxlZCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoCiAgICAgICAgICBNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZSwgJ2VuYWJsZWQnKTsKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lZGlhU3RyZWFtVHJhY2sucHJvdG90eXBlLCAnZW5hYmxlZCcsIHsKICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7CiAgICAgICAgICBvcmlnTVNURW5hYmxlZC5zZXQuY2FsbCh0aGlzLCB2YWx1ZSk7CiAgICAgICAgICB2YXIgZXYgPSBuZXcgRXZlbnQoJ2VuYWJsZWQnKTsKICAgICAgICAgIGV2LmVuYWJsZWQgPSB2YWx1ZTsKICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldik7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24gPSBmdW5jdGlvbihjb25maWcpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgdmFyIF9ldmVudFRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsKICAgICAgWydhZGRFdmVudExpc3RlbmVyJywgJ3JlbW92ZUV2ZW50TGlzdGVuZXInLCAnZGlzcGF0Y2hFdmVudCddCiAgICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHsKICAgICAgICAgICAgc2VsZlttZXRob2RdID0gX2V2ZW50VGFyZ2V0W21ldGhvZF0uYmluZChfZXZlbnRUYXJnZXQpOwogICAgICAgICAgfSk7CgogICAgICB0aGlzLm9uaWNlY2FuZGlkYXRlID0gbnVsbDsKICAgICAgdGhpcy5vbmFkZHN0cmVhbSA9IG51bGw7CiAgICAgIHRoaXMub250cmFjayA9IG51bGw7CiAgICAgIHRoaXMub25yZW1vdmVzdHJlYW0gPSBudWxsOwogICAgICB0aGlzLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2UgPSBudWxsOwogICAgICB0aGlzLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlID0gbnVsbDsKICAgICAgdGhpcy5vbm5lZ290aWF0aW9ubmVlZGVkID0gbnVsbDsKICAgICAgdGhpcy5vbmRhdGFjaGFubmVsID0gbnVsbDsKCiAgICAgIHRoaXMubG9jYWxTdHJlYW1zID0gW107CiAgICAgIHRoaXMucmVtb3RlU3RyZWFtcyA9IFtdOwogICAgICB0aGlzLmdldExvY2FsU3RyZWFtcyA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBzZWxmLmxvY2FsU3RyZWFtczsKICAgICAgfTsKICAgICAgdGhpcy5nZXRSZW1vdGVTdHJlYW1zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHNlbGYucmVtb3RlU3RyZWFtczsKICAgICAgfTsKCiAgICAgIHRoaXMubG9jYWxEZXNjcmlwdGlvbiA9IG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oewogICAgICAgIHR5cGU6ICcnLAogICAgICAgIHNkcDogJycKICAgICAgfSk7CiAgICAgIHRoaXMucmVtb3RlRGVzY3JpcHRpb24gPSBuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHsKICAgICAgICB0eXBlOiAnJywKICAgICAgICBzZHA6ICcnCiAgICAgIH0pOwogICAgICB0aGlzLnNpZ25hbGluZ1N0YXRlID0gJ3N0YWJsZSc7CiAgICAgIHRoaXMuaWNlQ29ubmVjdGlvblN0YXRlID0gJ25ldyc7CiAgICAgIHRoaXMuaWNlR2F0aGVyaW5nU3RhdGUgPSAnbmV3JzsKCiAgICAgIHRoaXMuaWNlT3B0aW9ucyA9IHsKICAgICAgICBnYXRoZXJQb2xpY3k6ICdhbGwnLAogICAgICAgIGljZVNlcnZlcnM6IFtdCiAgICAgIH07CiAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLmljZVRyYW5zcG9ydFBvbGljeSkgewogICAgICAgIHN3aXRjaCAoY29uZmlnLmljZVRyYW5zcG9ydFBvbGljeSkgewogICAgICAgICAgY2FzZSAnYWxsJzoKICAgICAgICAgIGNhc2UgJ3JlbGF5JzoKICAgICAgICAgICAgdGhpcy5pY2VPcHRpb25zLmdhdGhlclBvbGljeSA9IGNvbmZpZy5pY2VUcmFuc3BvcnRQb2xpY3k7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAnbm9uZSc6CiAgICAgICAgICAgIC8vIEZJWE1FOiByZW1vdmUgb25jZSBpbXBsZW1lbnRhdGlvbiBhbmQgc3BlYyBoYXZlIGFkZGVkIHRoaXMuCiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2ljZVRyYW5zcG9ydFBvbGljeSAibm9uZSIgbm90IHN1cHBvcnRlZCcpOwogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgLy8gZG9uJ3Qgc2V0IGljZVRyYW5zcG9ydFBvbGljeS4KICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMudXNpbmdCdW5kbGUgPSBjb25maWcgJiYgY29uZmlnLmJ1bmRsZVBvbGljeSA9PT0gJ21heC1idW5kbGUnOwoKICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcuaWNlU2VydmVycykgewogICAgICAgIC8vIEVkZ2UgZG9lcyBub3QgbGlrZQogICAgICAgIC8vIDEpIHN0dW46CiAgICAgICAgLy8gMikgdHVybjogdGhhdCBkb2VzIG5vdCBoYXZlIGFsbCBvZiB0dXJuOmhvc3Q6cG9ydD90cmFuc3BvcnQ9dWRwCiAgICAgICAgLy8gMykgdHVybjogd2l0aCBpcHY2IGFkZHJlc3NlcwogICAgICAgIHZhciBpY2VTZXJ2ZXJzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjb25maWcuaWNlU2VydmVycykpOwogICAgICAgIHRoaXMuaWNlT3B0aW9ucy5pY2VTZXJ2ZXJzID0gaWNlU2VydmVycy5maWx0ZXIoZnVuY3Rpb24oc2VydmVyKSB7CiAgICAgICAgICBpZiAoc2VydmVyICYmIHNlcnZlci51cmxzKSB7CiAgICAgICAgICAgIHZhciB1cmxzID0gc2VydmVyLnVybHM7CiAgICAgICAgICAgIGlmICh0eXBlb2YgdXJscyA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICB1cmxzID0gW3VybHNdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHVybHMgPSB1cmxzLmZpbHRlcihmdW5jdGlvbih1cmwpIHsKICAgICAgICAgICAgICByZXR1cm4gKHVybC5pbmRleE9mKCd0dXJuOicpID09PSAwICYmCiAgICAgICAgICAgICAgICAgIHVybC5pbmRleE9mKCd0cmFuc3BvcnQ9dWRwJykgIT09IC0xICYmCiAgICAgICAgICAgICAgICAgIHVybC5pbmRleE9mKCd0dXJuOlsnKSA9PT0gLTEpIHx8CiAgICAgICAgICAgICAgICAgICh1cmwuaW5kZXhPZignc3R1bjonKSA9PT0gMCAmJgogICAgICAgICAgICAgICAgICAgIGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPj0gMTQzOTMpOwogICAgICAgICAgICB9KVswXTsKICAgICAgICAgICAgcmV0dXJuICEhdXJsczsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9KTsKICAgICAgfQogICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7CgogICAgICAvLyBwZXItdHJhY2sgaWNlR2F0aGVycywgaWNlVHJhbnNwb3J0cywgZHRsc1RyYW5zcG9ydHMsIHJ0cFNlbmRlcnMsIC4uLgogICAgICAvLyBldmVyeXRoaW5nIHRoYXQgaXMgbmVlZGVkIHRvIGRlc2NyaWJlIGEgU0RQIG0tbGluZS4KICAgICAgdGhpcy50cmFuc2NlaXZlcnMgPSBbXTsKCiAgICAgIC8vIHNpbmNlIHRoZSBpY2VHYXRoZXJlciBpcyBjdXJyZW50bHkgY3JlYXRlZCBpbiBjcmVhdGVPZmZlciBidXQgd2UKICAgICAgLy8gbXVzdCBub3QgZW1pdCBjYW5kaWRhdGVzIHVudGlsIGFmdGVyIHNldExvY2FsRGVzY3JpcHRpb24gd2UgYnVmZmVyCiAgICAgIC8vIHRoZW0gaW4gdGhpcyBhcnJheS4KICAgICAgdGhpcy5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyID0gW107CiAgICB9OwoKICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2VtaXRCdWZmZXJlZENhbmRpZGF0ZXMgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKHNlbGYubG9jYWxEZXNjcmlwdGlvbi5zZHApOwogICAgICAvLyBGSVhNRTogbmVlZCB0byBhcHBseSBpY2UgY2FuZGlkYXRlcyBpbiBhIHdheSB3aGljaCBpcyBhc3luYyBidXQKICAgICAgLy8gaW4tb3JkZXIKICAgICAgdGhpcy5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyLmZvckVhY2goZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICB2YXIgZW5kID0gIWV2ZW50LmNhbmRpZGF0ZSB8fCBPYmplY3Qua2V5cyhldmVudC5jYW5kaWRhdGUpLmxlbmd0aCA9PT0gMDsKICAgICAgICBpZiAoZW5kKSB7CiAgICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHNlY3Rpb25zLmxlbmd0aDsgaisrKSB7CiAgICAgICAgICAgIGlmIChzZWN0aW9uc1tqXS5pbmRleE9mKCdcclxuYT1lbmQtb2YtY2FuZGlkYXRlc1xyXG4nKSA9PT0gLTEpIHsKICAgICAgICAgICAgICBzZWN0aW9uc1tqXSArPSAnYT1lbmQtb2YtY2FuZGlkYXRlc1xyXG4nOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNlY3Rpb25zW2V2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4ICsgMV0gKz0KICAgICAgICAgICAgICAnYT0nICsgZXZlbnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSArICdcclxuJzsKICAgICAgICB9CiAgICAgICAgc2VsZi5sb2NhbERlc2NyaXB0aW9uLnNkcCA9IHNlY3Rpb25zLmpvaW4oJycpOwogICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgaWYgKHNlbGYub25pY2VjYW5kaWRhdGUgIT09IG51bGwpIHsKICAgICAgICAgIHNlbGYub25pY2VjYW5kaWRhdGUoZXZlbnQpOwogICAgICAgIH0KICAgICAgICBpZiAoIWV2ZW50LmNhbmRpZGF0ZSAmJiBzZWxmLmljZUdhdGhlcmluZ1N0YXRlICE9PSAnY29tcGxldGUnKSB7CiAgICAgICAgICB2YXIgY29tcGxldGUgPSBzZWxmLnRyYW5zY2VpdmVycy5ldmVyeShmdW5jdGlvbih0cmFuc2NlaXZlcikgewogICAgICAgICAgICByZXR1cm4gdHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIgJiYKICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLnN0YXRlID09PSAnY29tcGxldGVkJzsKICAgICAgICAgIH0pOwogICAgICAgICAgaWYgKGNvbXBsZXRlKSB7CiAgICAgICAgICAgIHNlbGYuaWNlR2F0aGVyaW5nU3RhdGUgPSAnY29tcGxldGUnOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHRoaXMuX2xvY2FsSWNlQ2FuZGlkYXRlc0J1ZmZlciA9IFtdOwogICAgfTsKCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuX2NvbmZpZzsKICAgIH07CgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHsKICAgICAgLy8gQ2xvbmUgaXMgbmVjZXNzYXJ5IGZvciBsb2NhbCBkZW1vcyBtb3N0bHksIGF0dGFjaGluZyBkaXJlY3RseQogICAgICAvLyB0byB0d28gZGlmZmVyZW50IHNlbmRlcnMgZG9lcyBub3Qgd29yayAoYnVpbGQgMTA1NDcpLgogICAgICB2YXIgY2xvbmVkU3RyZWFtID0gc3RyZWFtLmNsb25lKCk7CiAgICAgIHN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHRyYWNrLCBpZHgpIHsKICAgICAgICB2YXIgY2xvbmVkVHJhY2sgPSBjbG9uZWRTdHJlYW0uZ2V0VHJhY2tzKClbaWR4XTsKICAgICAgICB0cmFjay5hZGRFdmVudExpc3RlbmVyKCdlbmFibGVkJywgZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgIGNsb25lZFRyYWNrLmVuYWJsZWQgPSBldmVudC5lbmFibGVkOwogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgdGhpcy5sb2NhbFN0cmVhbXMucHVzaChjbG9uZWRTdHJlYW0pOwogICAgICB0aGlzLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCgpOwogICAgfTsKCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbSA9IGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICB2YXIgaWR4ID0gdGhpcy5sb2NhbFN0cmVhbXMuaW5kZXhPZihzdHJlYW0pOwogICAgICBpZiAoaWR4ID4gLTEpIHsKICAgICAgICB0aGlzLmxvY2FsU3RyZWFtcy5zcGxpY2UoaWR4LCAxKTsKICAgICAgICB0aGlzLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCgpOwogICAgICB9CiAgICB9OwoKICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U2VuZGVycyA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7CiAgICAgICAgcmV0dXJuICEhdHJhbnNjZWl2ZXIucnRwU2VuZGVyOwogICAgICB9KQogICAgICAubWFwKGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7CiAgICAgICAgcmV0dXJuIHRyYW5zY2VpdmVyLnJ0cFNlbmRlcjsKICAgICAgfSk7CiAgICB9OwoKICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLnRyYW5zY2VpdmVycy5maWx0ZXIoZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHsKICAgICAgICByZXR1cm4gISF0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjsKICAgICAgfSkKICAgICAgLm1hcChmdW5jdGlvbih0cmFuc2NlaXZlcikgewogICAgICAgIHJldHVybiB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjsKICAgICAgfSk7CiAgICB9OwoKICAgIC8vIERldGVybWluZXMgdGhlIGludGVyc2VjdGlvbiBvZiBsb2NhbCBhbmQgcmVtb3RlIGNhcGFiaWxpdGllcy4KICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX2dldENvbW1vbkNhcGFiaWxpdGllcyA9CiAgICAgICAgZnVuY3Rpb24obG9jYWxDYXBhYmlsaXRpZXMsIHJlbW90ZUNhcGFiaWxpdGllcykgewogICAgICAgICAgdmFyIGNvbW1vbkNhcGFiaWxpdGllcyA9IHsKICAgICAgICAgICAgY29kZWNzOiBbXSwKICAgICAgICAgICAgaGVhZGVyRXh0ZW5zaW9uczogW10sCiAgICAgICAgICAgIGZlY01lY2hhbmlzbXM6IFtdCiAgICAgICAgICB9OwogICAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24obENvZGVjKSB7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVtb3RlQ2FwYWJpbGl0aWVzLmNvZGVjcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIHZhciByQ29kZWMgPSByZW1vdGVDYXBhYmlsaXRpZXMuY29kZWNzW2ldOwogICAgICAgICAgICAgIGlmIChsQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpID09PSByQ29kZWMubmFtZS50b0xvd2VyQ2FzZSgpICYmCiAgICAgICAgICAgICAgICAgIGxDb2RlYy5jbG9ja1JhdGUgPT09IHJDb2RlYy5jbG9ja1JhdGUpIHsKICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiBjaGFubmVscyBpcyB0aGUgaGlnaGVzdCBjb21tb24gbnVtYmVyIG9mIGNoYW5uZWxzCiAgICAgICAgICAgICAgICByQ29kZWMubnVtQ2hhbm5lbHMgPSBNYXRoLm1pbihsQ29kZWMubnVtQ2hhbm5lbHMsCiAgICAgICAgICAgICAgICAgICAgckNvZGVjLm51bUNoYW5uZWxzKTsKICAgICAgICAgICAgICAgIC8vIHB1c2ggckNvZGVjIHNvIHdlIHJlcGx5IHdpdGggb2ZmZXJlciBwYXlsb2FkIHR5cGUKICAgICAgICAgICAgICAgIGNvbW1vbkNhcGFiaWxpdGllcy5jb2RlY3MucHVzaChyQ29kZWMpOwoKICAgICAgICAgICAgICAgIC8vIGRldGVybWluZSBjb21tb24gZmVlZGJhY2sgbWVjaGFuaXNtcwogICAgICAgICAgICAgICAgckNvZGVjLnJ0Y3BGZWVkYmFjayA9IHJDb2RlYy5ydGNwRmVlZGJhY2suZmlsdGVyKGZ1bmN0aW9uKGZiKSB7CiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbENvZGVjLnJ0Y3BGZWVkYmFjay5sZW5ndGg7IGorKykgewogICAgICAgICAgICAgICAgICAgIGlmIChsQ29kZWMucnRjcEZlZWRiYWNrW2pdLnR5cGUgPT09IGZiLnR5cGUgJiYKICAgICAgICAgICAgICAgICAgICAgICAgbENvZGVjLnJ0Y3BGZWVkYmFja1tqXS5wYXJhbWV0ZXIgPT09IGZiLnBhcmFtZXRlcikgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgLy8gRklYTUU6IGFsc28gbmVlZCB0byBkZXRlcm1pbmUgLnBhcmFtZXRlcnMKICAgICAgICAgICAgICAgIC8vICBzZWUgaHR0cHM6Ly9naXRodWIuY29tL29wZW5wZWVyL29ydGMvaXNzdWVzLzU2OQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKCiAgICAgICAgICBsb2NhbENhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zCiAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24obEhlYWRlckV4dGVuc2lvbikgewogICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZW1vdGVDYXBhYmlsaXRpZXMuaGVhZGVyRXh0ZW5zaW9ucy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgIGkrKykgewogICAgICAgICAgICAgICAgICB2YXIgckhlYWRlckV4dGVuc2lvbiA9IHJlbW90ZUNhcGFiaWxpdGllcy5oZWFkZXJFeHRlbnNpb25zW2ldOwogICAgICAgICAgICAgICAgICBpZiAobEhlYWRlckV4dGVuc2lvbi51cmkgPT09IHJIZWFkZXJFeHRlbnNpb24udXJpKSB7CiAgICAgICAgICAgICAgICAgICAgY29tbW9uQ2FwYWJpbGl0aWVzLmhlYWRlckV4dGVuc2lvbnMucHVzaChySGVhZGVyRXh0ZW5zaW9uKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgIC8vIEZJWE1FOiBmZWNNZWNoYW5pc21zCiAgICAgICAgICByZXR1cm4gY29tbW9uQ2FwYWJpbGl0aWVzOwogICAgICAgIH07CgogICAgLy8gQ3JlYXRlIElDRSBnYXRoZXJlciwgSUNFIHRyYW5zcG9ydCBhbmQgRFRMUyB0cmFuc3BvcnQuCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cyA9CiAgICAgICAgZnVuY3Rpb24obWlkLCBzZHBNTGluZUluZGV4KSB7CiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICB2YXIgaWNlR2F0aGVyZXIgPSBuZXcgUlRDSWNlR2F0aGVyZXIoc2VsZi5pY2VPcHRpb25zKTsKICAgICAgICAgIHZhciBpY2VUcmFuc3BvcnQgPSBuZXcgUlRDSWNlVHJhbnNwb3J0KGljZUdhdGhlcmVyKTsKICAgICAgICAgIGljZUdhdGhlcmVyLm9ubG9jYWxjYW5kaWRhdGUgPSBmdW5jdGlvbihldnQpIHsKICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdpY2VjYW5kaWRhdGUnKTsKICAgICAgICAgICAgZXZlbnQuY2FuZGlkYXRlID0ge3NkcE1pZDogbWlkLCBzZHBNTGluZUluZGV4OiBzZHBNTGluZUluZGV4fTsKCiAgICAgICAgICAgIHZhciBjYW5kID0gZXZ0LmNhbmRpZGF0ZTsKICAgICAgICAgICAgdmFyIGVuZCA9ICFjYW5kIHx8IE9iamVjdC5rZXlzKGNhbmQpLmxlbmd0aCA9PT0gMDsKICAgICAgICAgICAgLy8gRWRnZSBlbWl0cyBhbiBlbXB0eSBvYmplY3QgZm9yIFJUQ0ljZUNhbmRpZGF0ZUNvbXBsZXRl4oClCiAgICAgICAgICAgIGlmIChlbmQpIHsKICAgICAgICAgICAgICAvLyBwb2x5ZmlsbCBzaW5jZSBSVENJY2VHYXRoZXJlci5zdGF0ZSBpcyBub3QgaW1wbGVtZW50ZWQgaW4KICAgICAgICAgICAgICAvLyBFZGdlIDEwNTQ3IHlldC4KICAgICAgICAgICAgICBpZiAoaWNlR2F0aGVyZXIuc3RhdGUgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgaWNlR2F0aGVyZXIuc3RhdGUgPSAnY29tcGxldGVkJzsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gUlRDSWNlQ2FuZGlkYXRlIGRvZXNuJ3QgaGF2ZSBhIGNvbXBvbmVudCwgbmVlZHMgdG8gYmUgYWRkZWQKICAgICAgICAgICAgICBjYW5kLmNvbXBvbmVudCA9IGljZVRyYW5zcG9ydC5jb21wb25lbnQgPT09ICdSVENQJyA/IDIgOiAxOwogICAgICAgICAgICAgIGV2ZW50LmNhbmRpZGF0ZS5jYW5kaWRhdGUgPSBTRFBVdGlscy53cml0ZUNhbmRpZGF0ZShjYW5kKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gdXBkYXRlIGxvY2FsIGRlc2NyaXB0aW9uLgogICAgICAgICAgICB2YXIgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKHNlbGYubG9jYWxEZXNjcmlwdGlvbi5zZHApOwogICAgICAgICAgICBpZiAoIWVuZCkgewogICAgICAgICAgICAgIHNlY3Rpb25zW2V2ZW50LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4ICsgMV0gKz0KICAgICAgICAgICAgICAgICAgJ2E9JyArIGV2ZW50LmNhbmRpZGF0ZS5jYW5kaWRhdGUgKyAnXHJcbic7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgc2VjdGlvbnNbZXZlbnQuY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXggKyAxXSArPQogICAgICAgICAgICAgICAgICAnYT1lbmQtb2YtY2FuZGlkYXRlc1xyXG4nOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHNlbGYubG9jYWxEZXNjcmlwdGlvbi5zZHAgPSBzZWN0aW9ucy5qb2luKCcnKTsKICAgICAgICAgICAgdmFyIHRyYW5zY2VpdmVycyA9IHNlbGYuX3BlbmRpbmdPZmZlciA/IHNlbGYuX3BlbmRpbmdPZmZlciA6CiAgICAgICAgICAgICAgICBzZWxmLnRyYW5zY2VpdmVyczsKICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gdHJhbnNjZWl2ZXJzLmV2ZXJ5KGZ1bmN0aW9uKHRyYW5zY2VpdmVyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyICYmCiAgICAgICAgICAgICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLnN0YXRlID09PSAnY29tcGxldGVkJzsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyBFbWl0IGNhbmRpZGF0ZSBpZiBsb2NhbERlc2NyaXB0aW9uIGlzIHNldC4KICAgICAgICAgICAgLy8gQWxzbyBlbWl0cyBudWxsIGNhbmRpZGF0ZSB3aGVuIGFsbCBnYXRoZXJlcnMgYXJlIGNvbXBsZXRlLgogICAgICAgICAgICBzd2l0Y2ggKHNlbGYuaWNlR2F0aGVyaW5nU3RhdGUpIHsKICAgICAgICAgICAgICBjYXNlICduZXcnOgogICAgICAgICAgICAgICAgaWYgKCFlbmQpIHsKICAgICAgICAgICAgICAgICAgc2VsZi5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyLnB1c2goZXZlbnQpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGVuZCAmJiBjb21wbGV0ZSkgewogICAgICAgICAgICAgICAgICBzZWxmLl9sb2NhbEljZUNhbmRpZGF0ZXNCdWZmZXIucHVzaCgKICAgICAgICAgICAgICAgICAgICAgIG5ldyBFdmVudCgnaWNlY2FuZGlkYXRlJykpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgY2FzZSAnZ2F0aGVyaW5nJzoKICAgICAgICAgICAgICAgIHNlbGYuX2VtaXRCdWZmZXJlZENhbmRpZGF0ZXMoKTsKICAgICAgICAgICAgICAgIGlmICghZW5kKSB7CiAgICAgICAgICAgICAgICAgIHNlbGYuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLm9uaWNlY2FuZGlkYXRlICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbmljZWNhbmRpZGF0ZShldmVudCk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZSkgewogICAgICAgICAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdpY2VjYW5kaWRhdGUnKSk7CiAgICAgICAgICAgICAgICAgIGlmIChzZWxmLm9uaWNlY2FuZGlkYXRlICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbmljZWNhbmRpZGF0ZShuZXcgRXZlbnQoJ2ljZWNhbmRpZGF0ZScpKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBzZWxmLmljZUdhdGhlcmluZ1N0YXRlID0gJ2NvbXBsZXRlJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgJ2NvbXBsZXRlJzoKICAgICAgICAgICAgICAgIC8vIHNob3VsZCBub3QgaGFwcGVuLi4uIGN1cnJlbnRseSEKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGRlZmF1bHQ6IC8vIG5vLW9wLgogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgIH07CiAgICAgICAgICBpY2VUcmFuc3BvcnQub25pY2VzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzZWxmLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKTsKICAgICAgICAgIH07CgogICAgICAgICAgdmFyIGR0bHNUcmFuc3BvcnQgPSBuZXcgUlRDRHRsc1RyYW5zcG9ydChpY2VUcmFuc3BvcnQpOwogICAgICAgICAgZHRsc1RyYW5zcG9ydC5vbmR0bHNzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzZWxmLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKTsKICAgICAgICAgIH07CiAgICAgICAgICBkdGxzVHJhbnNwb3J0Lm9uZXJyb3IgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgLy8gb25lcnJvciBkb2VzIG5vdCBzZXQgc3RhdGUgdG8gZmFpbGVkIGJ5IGl0c2VsZi4KICAgICAgICAgICAgZHRsc1RyYW5zcG9ydC5zdGF0ZSA9ICdmYWlsZWQnOwogICAgICAgICAgICBzZWxmLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKTsKICAgICAgICAgIH07CgogICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgaWNlR2F0aGVyZXI6IGljZUdhdGhlcmVyLAogICAgICAgICAgICBpY2VUcmFuc3BvcnQ6IGljZVRyYW5zcG9ydCwKICAgICAgICAgICAgZHRsc1RyYW5zcG9ydDogZHRsc1RyYW5zcG9ydAogICAgICAgICAgfTsKICAgICAgICB9OwoKICAgIC8vIFN0YXJ0IHRoZSBSVFAgU2VuZGVyIGFuZCBSZWNlaXZlciBmb3IgYSB0cmFuc2NlaXZlci4KICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX3RyYW5zY2VpdmUgPSBmdW5jdGlvbih0cmFuc2NlaXZlciwKICAgICAgICBzZW5kLCByZWN2KSB7CiAgICAgIHZhciBwYXJhbXMgPSB0aGlzLl9nZXRDb21tb25DYXBhYmlsaXRpZXModHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsCiAgICAgICAgICB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXMpOwogICAgICBpZiAoc2VuZCAmJiB0cmFuc2NlaXZlci5ydHBTZW5kZXIpIHsKICAgICAgICBwYXJhbXMuZW5jb2RpbmdzID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyczsKICAgICAgICBwYXJhbXMucnRjcCA9IHsKICAgICAgICAgIGNuYW1lOiBTRFBVdGlscy5sb2NhbENOYW1lCiAgICAgICAgfTsKICAgICAgICBpZiAodHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGgpIHsKICAgICAgICAgIHBhcmFtcy5ydGNwLnNzcmMgPSB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmM7CiAgICAgICAgfQogICAgICAgIHRyYW5zY2VpdmVyLnJ0cFNlbmRlci5zZW5kKHBhcmFtcyk7CiAgICAgIH0KICAgICAgaWYgKHJlY3YgJiYgdHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHsKICAgICAgICAvLyByZW1vdmUgUlRYIGZpZWxkIGluIEVkZ2UgMTQ5NDIKICAgICAgICBpZiAodHJhbnNjZWl2ZXIua2luZCA9PT0gJ3ZpZGVvJwogICAgICAgICAgICAmJiB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzCiAgICAgICAgICAgICYmIGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCAxNTAxOSkgewogICAgICAgICAgdHJhbnNjZWl2ZXIucmVjdkVuY29kaW5nUGFyYW1ldGVycy5mb3JFYWNoKGZ1bmN0aW9uKHApIHsKICAgICAgICAgICAgZGVsZXRlIHAucnR4OwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIHBhcmFtcy5lbmNvZGluZ3MgPSB0cmFuc2NlaXZlci5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzOwogICAgICAgIHBhcmFtcy5ydGNwID0gewogICAgICAgICAgY25hbWU6IHRyYW5zY2VpdmVyLmNuYW1lCiAgICAgICAgfTsKICAgICAgICBpZiAodHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGgpIHsKICAgICAgICAgIHBhcmFtcy5ydGNwLnNzcmMgPSB0cmFuc2NlaXZlci5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmM7CiAgICAgICAgfQogICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnJlY2VpdmUocGFyYW1zKTsKICAgICAgfQogICAgfTsKCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnNldExvY2FsRGVzY3JpcHRpb24gPQogICAgICAgIGZ1bmN0aW9uKGRlc2NyaXB0aW9uKSB7CiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7CiAgICAgICAgICB2YXIgc2VjdGlvbnM7CiAgICAgICAgICB2YXIgc2Vzc2lvbnBhcnQ7CiAgICAgICAgICBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ29mZmVyJykgewogICAgICAgICAgICAvLyBGSVhNRTogV2hhdCB3YXMgdGhlIHB1cnBvc2Ugb2YgdGhpcyBlbXB0eSBpZiBzdGF0ZW1lbnQ/CiAgICAgICAgICAgIC8vIGlmICghdGhpcy5fcGVuZGluZ09mZmVyKSB7CiAgICAgICAgICAgIC8vIH0gZWxzZSB7CiAgICAgICAgICAgIGlmICh0aGlzLl9wZW5kaW5nT2ZmZXIpIHsKICAgICAgICAgICAgICAvLyBWRVJZIGxpbWl0ZWQgc3VwcG9ydCBmb3IgU0RQIG11bmdpbmcuIExpbWl0ZWQgdG86CiAgICAgICAgICAgICAgLy8gKiBjaGFuZ2luZyB0aGUgb3JkZXIgb2YgY29kZWNzCiAgICAgICAgICAgICAgc2VjdGlvbnMgPSBTRFBVdGlscy5zcGxpdFNlY3Rpb25zKGRlc2NyaXB0aW9uLnNkcCk7CiAgICAgICAgICAgICAgc2Vzc2lvbnBhcnQgPSBzZWN0aW9ucy5zaGlmdCgpOwogICAgICAgICAgICAgIHNlY3Rpb25zLmZvckVhY2goZnVuY3Rpb24obWVkaWFTZWN0aW9uLCBzZHBNTGluZUluZGV4KSB7CiAgICAgICAgICAgICAgICB2YXIgY2FwcyA9IFNEUFV0aWxzLnBhcnNlUnRwUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24pOwogICAgICAgICAgICAgICAgc2VsZi5fcGVuZGluZ09mZmVyW3NkcE1MaW5lSW5kZXhdLmxvY2FsQ2FwYWJpbGl0aWVzID0gY2FwczsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB0aGlzLnRyYW5zY2VpdmVycyA9IHRoaXMuX3BlbmRpbmdPZmZlcjsKICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fcGVuZGluZ09mZmVyOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKGRlc2NyaXB0aW9uLnR5cGUgPT09ICdhbnN3ZXInKSB7CiAgICAgICAgICAgIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyhzZWxmLnJlbW90ZURlc2NyaXB0aW9uLnNkcCk7CiAgICAgICAgICAgIHNlc3Npb25wYXJ0ID0gc2VjdGlvbnMuc2hpZnQoKTsKICAgICAgICAgICAgdmFyIGlzSWNlTGl0ZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KHNlc3Npb25wYXJ0LAogICAgICAgICAgICAgICAgJ2E9aWNlLWxpdGUnKS5sZW5ndGggPiAwOwogICAgICAgICAgICBzZWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG1lZGlhU2VjdGlvbiwgc2RwTUxpbmVJbmRleCkgewogICAgICAgICAgICAgIHZhciB0cmFuc2NlaXZlciA9IHNlbGYudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdOwogICAgICAgICAgICAgIHZhciBpY2VHYXRoZXJlciA9IHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyOwogICAgICAgICAgICAgIHZhciBpY2VUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5pY2VUcmFuc3BvcnQ7CiAgICAgICAgICAgICAgdmFyIGR0bHNUcmFuc3BvcnQgPSB0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0OwogICAgICAgICAgICAgIHZhciBsb2NhbENhcGFiaWxpdGllcyA9IHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzOwogICAgICAgICAgICAgIHZhciByZW1vdGVDYXBhYmlsaXRpZXMgPSB0cmFuc2NlaXZlci5yZW1vdGVDYXBhYmlsaXRpZXM7CgogICAgICAgICAgICAgIHZhciByZWplY3RlZCA9IG1lZGlhU2VjdGlvbi5zcGxpdCgnXG4nLCAxKVswXQogICAgICAgICAgICAgICAgICAuc3BsaXQoJyAnLCAyKVsxXSA9PT0gJzAnOwoKICAgICAgICAgICAgICBpZiAoIXJlamVjdGVkICYmICF0cmFuc2NlaXZlci5pc0RhdGFjaGFubmVsKSB7CiAgICAgICAgICAgICAgICB2YXIgcmVtb3RlSWNlUGFyYW1ldGVycyA9IFNEUFV0aWxzLmdldEljZVBhcmFtZXRlcnMoCiAgICAgICAgICAgICAgICAgICAgbWVkaWFTZWN0aW9uLCBzZXNzaW9ucGFydCk7CiAgICAgICAgICAgICAgICB2YXIgcmVtb3RlRHRsc1BhcmFtZXRlcnMgPSBTRFBVdGlscy5nZXREdGxzUGFyYW1ldGVycygKICAgICAgICAgICAgICAgICAgICBtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KTsKICAgICAgICAgICAgICAgIGlmIChpc0ljZUxpdGUpIHsKICAgICAgICAgICAgICAgICAgcmVtb3RlRHRsc1BhcmFtZXRlcnMucm9sZSA9ICdzZXJ2ZXInOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghc2VsZi51c2luZ0J1bmRsZSB8fCBzZHBNTGluZUluZGV4ID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIGljZVRyYW5zcG9ydC5zdGFydChpY2VHYXRoZXJlciwgcmVtb3RlSWNlUGFyYW1ldGVycywKICAgICAgICAgICAgICAgICAgICAgIGlzSWNlTGl0ZSA/ICdjb250cm9sbGluZycgOiAnY29udHJvbGxlZCcpOwogICAgICAgICAgICAgICAgICBkdGxzVHJhbnNwb3J0LnN0YXJ0KHJlbW90ZUR0bHNQYXJhbWV0ZXJzKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgaW50ZXJzZWN0aW9uIG9mIGNhcGFiaWxpdGllcy4KICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBzZWxmLl9nZXRDb21tb25DYXBhYmlsaXRpZXMobG9jYWxDYXBhYmlsaXRpZXMsCiAgICAgICAgICAgICAgICAgICAgcmVtb3RlQ2FwYWJpbGl0aWVzKTsKCiAgICAgICAgICAgICAgICAvLyBTdGFydCB0aGUgUlRDUnRwU2VuZGVyLiBUaGUgUlRDUnRwUmVjZWl2ZXIgZm9yIHRoaXMKICAgICAgICAgICAgICAgIC8vIHRyYW5zY2VpdmVyIGhhcyBhbHJlYWR5IGJlZW4gc3RhcnRlZCBpbiBzZXRSZW1vdGVEZXNjcmlwdGlvbi4KICAgICAgICAgICAgICAgIHNlbGYuX3RyYW5zY2VpdmUodHJhbnNjZWl2ZXIsCiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmNvZGVjcy5sZW5ndGggPiAwLAogICAgICAgICAgICAgICAgICAgIGZhbHNlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMubG9jYWxEZXNjcmlwdGlvbiA9IHsKICAgICAgICAgICAgdHlwZTogZGVzY3JpcHRpb24udHlwZSwKICAgICAgICAgICAgc2RwOiBkZXNjcmlwdGlvbi5zZHAKICAgICAgICAgIH07CiAgICAgICAgICBzd2l0Y2ggKGRlc2NyaXB0aW9uLnR5cGUpIHsKICAgICAgICAgICAgY2FzZSAnb2ZmZXInOgogICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdoYXZlLWxvY2FsLW9mZmVyJyk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgJ2Fuc3dlcic6CiAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoJ3N0YWJsZScpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Vuc3VwcG9ydGVkIHR5cGUgIicgKyBkZXNjcmlwdGlvbi50eXBlICsKICAgICAgICAgICAgICAgICAgJyInKTsKICAgICAgICAgIH0KCiAgICAgICAgICAvLyBJZiBhIHN1Y2Nlc3MgY2FsbGJhY2sgd2FzIHByb3ZpZGVkLCBlbWl0IElDRSBjYW5kaWRhdGVzIGFmdGVyIGl0CiAgICAgICAgICAvLyBoYXMgYmVlbiBleGVjdXRlZC4gT3RoZXJ3aXNlLCBlbWl0IGNhbGxiYWNrIGFmdGVyIHRoZSBQcm9taXNlIGlzCiAgICAgICAgICAvLyByZXNvbHZlZC4KICAgICAgICAgIHZhciBoYXNDYWxsYmFjayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmCiAgICAgICAgICAgIHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbic7CiAgICAgICAgICBpZiAoaGFzQ2FsbGJhY2spIHsKICAgICAgICAgICAgdmFyIGNiID0gYXJndW1lbnRzWzFdOwogICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICBjYigpOwogICAgICAgICAgICAgIGlmIChzZWxmLmljZUdhdGhlcmluZ1N0YXRlID09PSAnbmV3JykgewogICAgICAgICAgICAgICAgc2VsZi5pY2VHYXRoZXJpbmdTdGF0ZSA9ICdnYXRoZXJpbmcnOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBzZWxmLl9lbWl0QnVmZmVyZWRDYW5kaWRhdGVzKCk7CiAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgfQogICAgICAgICAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTsKICAgICAgICAgIHAudGhlbihmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFoYXNDYWxsYmFjaykgewogICAgICAgICAgICAgIGlmIChzZWxmLmljZUdhdGhlcmluZ1N0YXRlID09PSAnbmV3JykgewogICAgICAgICAgICAgICAgc2VsZi5pY2VHYXRoZXJpbmdTdGF0ZSA9ICdnYXRoZXJpbmcnOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAvLyBVc3VhbGx5IGNhbmRpZGF0ZXMgd2lsbCBiZSBlbWl0dGVkIGVhcmxpZXIuCiAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoc2VsZi5fZW1pdEJ1ZmZlcmVkQ2FuZGlkYXRlcy5iaW5kKHNlbGYpLCA1MDApOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBwOwogICAgICAgIH07CgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbiA9CiAgICAgICAgZnVuY3Rpb24oZGVzY3JpcHRpb24pIHsKICAgICAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgICAgIHZhciBzdHJlYW0gPSBuZXcgTWVkaWFTdHJlYW0oKTsKICAgICAgICAgIHZhciByZWNlaXZlckxpc3QgPSBbXTsKICAgICAgICAgIHZhciBzZWN0aW9ucyA9IFNEUFV0aWxzLnNwbGl0U2VjdGlvbnMoZGVzY3JpcHRpb24uc2RwKTsKICAgICAgICAgIHZhciBzZXNzaW9ucGFydCA9IHNlY3Rpb25zLnNoaWZ0KCk7CiAgICAgICAgICB2YXIgaXNJY2VMaXRlID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgoc2Vzc2lvbnBhcnQsCiAgICAgICAgICAgICAgJ2E9aWNlLWxpdGUnKS5sZW5ndGggPiAwOwogICAgICAgICAgdGhpcy51c2luZ0J1bmRsZSA9IFNEUFV0aWxzLm1hdGNoUHJlZml4KHNlc3Npb25wYXJ0LAogICAgICAgICAgICAgICdhPWdyb3VwOkJVTkRMRSAnKS5sZW5ndGggPiAwOwogICAgICAgICAgc2VjdGlvbnMuZm9yRWFjaChmdW5jdGlvbihtZWRpYVNlY3Rpb24sIHNkcE1MaW5lSW5kZXgpIHsKICAgICAgICAgICAgdmFyIGxpbmVzID0gU0RQVXRpbHMuc3BsaXRMaW5lcyhtZWRpYVNlY3Rpb24pOwogICAgICAgICAgICB2YXIgbWxpbmUgPSBsaW5lc1swXS5zdWJzdHIoMikuc3BsaXQoJyAnKTsKICAgICAgICAgICAgdmFyIGtpbmQgPSBtbGluZVswXTsKICAgICAgICAgICAgdmFyIHJlamVjdGVkID0gbWxpbmVbMV0gPT09ICcwJzsKICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IFNEUFV0aWxzLmdldERpcmVjdGlvbihtZWRpYVNlY3Rpb24sIHNlc3Npb25wYXJ0KTsKCiAgICAgICAgICAgIHZhciBtaWQgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPW1pZDonKTsKICAgICAgICAgICAgaWYgKG1pZC5sZW5ndGgpIHsKICAgICAgICAgICAgICBtaWQgPSBtaWRbMF0uc3Vic3RyKDYpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIG1pZCA9IFNEUFV0aWxzLmdlbmVyYXRlSWRlbnRpZmllcigpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBSZWplY3QgZGF0YWNoYW5uZWxzIHdoaWNoIGFyZSBub3QgaW1wbGVtZW50ZWQgeWV0LgogICAgICAgICAgICBpZiAoa2luZCA9PT0gJ2FwcGxpY2F0aW9uJyAmJiBtbGluZVsyXSA9PT0gJ0RUTFMvU0NUUCcpIHsKICAgICAgICAgICAgICBzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSA9IHsKICAgICAgICAgICAgICAgIG1pZDogbWlkLAogICAgICAgICAgICAgICAgaXNEYXRhY2hhbm5lbDogdHJ1ZQogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgdHJhbnNjZWl2ZXI7CiAgICAgICAgICAgIHZhciBpY2VHYXRoZXJlcjsKICAgICAgICAgICAgdmFyIGljZVRyYW5zcG9ydDsKICAgICAgICAgICAgdmFyIGR0bHNUcmFuc3BvcnQ7CiAgICAgICAgICAgIHZhciBydHBTZW5kZXI7CiAgICAgICAgICAgIHZhciBydHBSZWNlaXZlcjsKICAgICAgICAgICAgdmFyIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM7CiAgICAgICAgICAgIHZhciByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzOwogICAgICAgICAgICB2YXIgbG9jYWxDYXBhYmlsaXRpZXM7CgogICAgICAgICAgICB2YXIgdHJhY2s7CiAgICAgICAgICAgIC8vIEZJWE1FOiBlbnN1cmUgdGhlIG1lZGlhU2VjdGlvbiBoYXMgcnRjcC1tdXggc2V0LgogICAgICAgICAgICB2YXIgcmVtb3RlQ2FwYWJpbGl0aWVzID0gU0RQVXRpbHMucGFyc2VSdHBQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7CiAgICAgICAgICAgIHZhciByZW1vdGVJY2VQYXJhbWV0ZXJzOwogICAgICAgICAgICB2YXIgcmVtb3RlRHRsc1BhcmFtZXRlcnM7CiAgICAgICAgICAgIGlmICghcmVqZWN0ZWQpIHsKICAgICAgICAgICAgICByZW1vdGVJY2VQYXJhbWV0ZXJzID0gU0RQVXRpbHMuZ2V0SWNlUGFyYW1ldGVycyhtZWRpYVNlY3Rpb24sCiAgICAgICAgICAgICAgICAgIHNlc3Npb25wYXJ0KTsKICAgICAgICAgICAgICByZW1vdGVEdGxzUGFyYW1ldGVycyA9IFNEUFV0aWxzLmdldER0bHNQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbiwKICAgICAgICAgICAgICAgICAgc2Vzc2lvbnBhcnQpOwogICAgICAgICAgICAgIHJlbW90ZUR0bHNQYXJhbWV0ZXJzLnJvbGUgPSAnY2xpZW50JzsKICAgICAgICAgICAgfQogICAgICAgICAgICByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzID0KICAgICAgICAgICAgICAgIFNEUFV0aWxzLnBhcnNlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzKG1lZGlhU2VjdGlvbik7CgogICAgICAgICAgICB2YXIgY25hbWU7CiAgICAgICAgICAgIC8vIEdldHMgdGhlIGZpcnN0IFNTUkMuIE5vdGUgdGhhdCB3aXRoIFJUWCB0aGVyZSBtaWdodCBiZSBtdWx0aXBsZQogICAgICAgICAgICAvLyBTU1JDcy4KICAgICAgICAgICAgdmFyIHJlbW90ZVNzcmMgPSBTRFBVdGlscy5tYXRjaFByZWZpeChtZWRpYVNlY3Rpb24sICdhPXNzcmM6JykKICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24obGluZSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gU0RQVXRpbHMucGFyc2VTc3JjTWVkaWEobGluZSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihvYmopIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5hdHRyaWJ1dGUgPT09ICdjbmFtZSc7CiAgICAgICAgICAgICAgICB9KVswXTsKICAgICAgICAgICAgaWYgKHJlbW90ZVNzcmMpIHsKICAgICAgICAgICAgICBjbmFtZSA9IHJlbW90ZVNzcmMudmFsdWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBpc0NvbXBsZXRlID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLAogICAgICAgICAgICAgICAgJ2E9ZW5kLW9mLWNhbmRpZGF0ZXMnLCBzZXNzaW9ucGFydCkubGVuZ3RoID4gMDsKICAgICAgICAgICAgdmFyIGNhbmRzID0gU0RQVXRpbHMubWF0Y2hQcmVmaXgobWVkaWFTZWN0aW9uLCAnYT1jYW5kaWRhdGU6JykKICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oY2FuZCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gU0RQVXRpbHMucGFyc2VDYW5kaWRhdGUoY2FuZCk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihjYW5kKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjYW5kLmNvbXBvbmVudCA9PT0gJzEnOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzID0gUlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKGtpbmQpOwoKICAgICAgICAgICAgLy8gZmlsdGVyIFJUWCB1bnRpbCBhZGRpdGlvbmFsIHN0dWZmIG5lZWRlZCBmb3IgUlRYIGlzIGltcGxlbWVudGVkCiAgICAgICAgICAgIC8vIGluIGFkYXB0ZXIuanMKICAgICAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzID0gbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZpbHRlcigKICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGNvZGVjKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjb2RlYy5uYW1lICE9PSAncnR4JzsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB2YXIgY29tbW9uQ29kZWNzID0gc2VsZi5fZ2V0Q29tbW9uQ2FwYWJpbGl0aWVzKAogICAgICAgICAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMsCiAgICAgICAgICAgICAgICByZW1vdGVDYXBhYmlsaXRpZXMpLmNvZGVjczsKICAgICAgICAgICAgY29tbW9uQ29kZWNzID0gY29tbW9uQ29kZWNzLm1hcChmdW5jdGlvbihjb2RlYykgewogICAgICAgICAgICAgIHJldHVybiBjb2RlYy5uYW1lOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgaWYgKGNvbW1vbkNvZGVjcy5sZW5ndGggPT09IDAgfHwKICAgICAgICAgICAgICAgIChjb21tb25Db2RlY3MuaW5kZXhPZignSDI2NCcpID09PSAtMSAmJgogICAgICAgICAgICAgICAgY29tbW9uQ29kZWNzLmluZGV4T2YoJ1ZQOCcpID09PSAtMSkpIHsKICAgICAgICAgICAgICByZWplY3RlZCA9IHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChkZXNjcmlwdGlvbi50eXBlID09PSAnb2ZmZXInICYmICFyZWplY3RlZCkgewogICAgICAgICAgICAgIHZhciB0cmFuc3BvcnRzID0gc2VsZi51c2luZ0J1bmRsZSAmJiBzZHBNTGluZUluZGV4ID4gMCA/IHsKICAgICAgICAgICAgICAgIGljZUdhdGhlcmVyOiBzZWxmLnRyYW5zY2VpdmVyc1swXS5pY2VHYXRoZXJlciwKICAgICAgICAgICAgICAgIGljZVRyYW5zcG9ydDogc2VsZi50cmFuc2NlaXZlcnNbMF0uaWNlVHJhbnNwb3J0LAogICAgICAgICAgICAgICAgZHRsc1RyYW5zcG9ydDogc2VsZi50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydAogICAgICAgICAgICAgIH0gOiBzZWxmLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cyhtaWQsIHNkcE1MaW5lSW5kZXgpOwoKICAgICAgICAgICAgICBpZiAoaXNDb21wbGV0ZSAmJiAoIXNlbGYudXNpbmdCdW5kbGUgfHwgc2RwTUxpbmVJbmRleCA9PT0gMCkpIHsKICAgICAgICAgICAgICAgIHRyYW5zcG9ydHMuaWNlVHJhbnNwb3J0LnNldFJlbW90ZUNhbmRpZGF0ZXMoY2FuZHMpOwogICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMgPSBbewogICAgICAgICAgICAgICAgc3NyYzogKDIgKiBzZHBNTGluZUluZGV4ICsgMikgKiAxMDAxCiAgICAgICAgICAgICAgfV07CgogICAgICAgICAgICAgIHJ0cFJlY2VpdmVyID0gbmV3IFJUQ1J0cFJlY2VpdmVyKHRyYW5zcG9ydHMuZHRsc1RyYW5zcG9ydCwga2luZCk7CgogICAgICAgICAgICAgIHRyYWNrID0gcnRwUmVjZWl2ZXIudHJhY2s7CiAgICAgICAgICAgICAgcmVjZWl2ZXJMaXN0LnB1c2goW3RyYWNrLCBydHBSZWNlaXZlcl0pOwogICAgICAgICAgICAgIC8vIEZJWE1FOiBub3QgY29ycmVjdCB3aGVuIHRoZXJlIGFyZSBtdWx0aXBsZSBzdHJlYW1zIGJ1dCB0aGF0IGlzCiAgICAgICAgICAgICAgLy8gbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgaW4gdGhpcyBzaGltLgogICAgICAgICAgICAgIHN0cmVhbS5hZGRUcmFjayh0cmFjayk7CgogICAgICAgICAgICAgIC8vIEZJWE1FOiBsb29rIGF0IGRpcmVjdGlvbi4KICAgICAgICAgICAgICBpZiAoc2VsZi5sb2NhbFN0cmVhbXMubGVuZ3RoID4gMCAmJgogICAgICAgICAgICAgICAgICBzZWxmLmxvY2FsU3RyZWFtc1swXS5nZXRUcmFja3MoKS5sZW5ndGggPj0gc2RwTUxpbmVJbmRleCkgewogICAgICAgICAgICAgICAgdmFyIGxvY2FsVHJhY2s7CiAgICAgICAgICAgICAgICBpZiAoa2luZCA9PT0gJ2F1ZGlvJykgewogICAgICAgICAgICAgICAgICBsb2NhbFRyYWNrID0gc2VsZi5sb2NhbFN0cmVhbXNbMF0uZ2V0QXVkaW9UcmFja3MoKVswXTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gJ3ZpZGVvJykgewogICAgICAgICAgICAgICAgICBsb2NhbFRyYWNrID0gc2VsZi5sb2NhbFN0cmVhbXNbMF0uZ2V0VmlkZW9UcmFja3MoKVswXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChsb2NhbFRyYWNrKSB7CiAgICAgICAgICAgICAgICAgIHJ0cFNlbmRlciA9IG5ldyBSVENSdHBTZW5kZXIobG9jYWxUcmFjaywKICAgICAgICAgICAgICAgICAgICAgIHRyYW5zcG9ydHMuZHRsc1RyYW5zcG9ydCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XSA9IHsKICAgICAgICAgICAgICAgIGljZUdhdGhlcmVyOiB0cmFuc3BvcnRzLmljZUdhdGhlcmVyLAogICAgICAgICAgICAgICAgaWNlVHJhbnNwb3J0OiB0cmFuc3BvcnRzLmljZVRyYW5zcG9ydCwKICAgICAgICAgICAgICAgIGR0bHNUcmFuc3BvcnQ6IHRyYW5zcG9ydHMuZHRsc1RyYW5zcG9ydCwKICAgICAgICAgICAgICAgIGxvY2FsQ2FwYWJpbGl0aWVzOiBsb2NhbENhcGFiaWxpdGllcywKICAgICAgICAgICAgICAgIHJlbW90ZUNhcGFiaWxpdGllczogcmVtb3RlQ2FwYWJpbGl0aWVzLAogICAgICAgICAgICAgICAgcnRwU2VuZGVyOiBydHBTZW5kZXIsCiAgICAgICAgICAgICAgICBydHBSZWNlaXZlcjogcnRwUmVjZWl2ZXIsCiAgICAgICAgICAgICAgICBraW5kOiBraW5kLAogICAgICAgICAgICAgICAgbWlkOiBtaWQsCiAgICAgICAgICAgICAgICBjbmFtZTogY25hbWUsCiAgICAgICAgICAgICAgICBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzOiBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzLAogICAgICAgICAgICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVyczogcmVjdkVuY29kaW5nUGFyYW1ldGVycwogICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgLy8gU3RhcnQgdGhlIFJUQ1J0cFJlY2VpdmVyIG5vdy4gVGhlIFJUUFNlbmRlciBpcyBzdGFydGVkIGluCiAgICAgICAgICAgICAgLy8gc2V0TG9jYWxEZXNjcmlwdGlvbi4KICAgICAgICAgICAgICBzZWxmLl90cmFuc2NlaXZlKHNlbGYudHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdLAogICAgICAgICAgICAgICAgICBmYWxzZSwKICAgICAgICAgICAgICAgICAgZGlyZWN0aW9uID09PSAnc2VuZHJlY3YnIHx8IGRpcmVjdGlvbiA9PT0gJ3NlbmRvbmx5Jyk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVzY3JpcHRpb24udHlwZSA9PT0gJ2Fuc3dlcicgJiYgIXJlamVjdGVkKSB7CiAgICAgICAgICAgICAgdHJhbnNjZWl2ZXIgPSBzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XTsKICAgICAgICAgICAgICBpY2VHYXRoZXJlciA9IHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyOwogICAgICAgICAgICAgIGljZVRyYW5zcG9ydCA9IHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydDsKICAgICAgICAgICAgICBkdGxzVHJhbnNwb3J0ID0gdHJhbnNjZWl2ZXIuZHRsc1RyYW5zcG9ydDsKICAgICAgICAgICAgICBydHBTZW5kZXIgPSB0cmFuc2NlaXZlci5ydHBTZW5kZXI7CiAgICAgICAgICAgICAgcnRwUmVjZWl2ZXIgPSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjsKICAgICAgICAgICAgICBzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzID0gdHJhbnNjZWl2ZXIuc2VuZEVuY29kaW5nUGFyYW1ldGVyczsKICAgICAgICAgICAgICBsb2NhbENhcGFiaWxpdGllcyA9IHRyYW5zY2VpdmVyLmxvY2FsQ2FwYWJpbGl0aWVzOwoKICAgICAgICAgICAgICBzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzID0KICAgICAgICAgICAgICAgICAgcmVjdkVuY29kaW5nUGFyYW1ldGVyczsKICAgICAgICAgICAgICBzZWxmLnRyYW5zY2VpdmVyc1tzZHBNTGluZUluZGV4XS5yZW1vdGVDYXBhYmlsaXRpZXMgPQogICAgICAgICAgICAgICAgICByZW1vdGVDYXBhYmlsaXRpZXM7CiAgICAgICAgICAgICAgc2VsZi50cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0uY25hbWUgPSBjbmFtZTsKCiAgICAgICAgICAgICAgaWYgKChpc0ljZUxpdGUgfHwgaXNDb21wbGV0ZSkgJiYgY2FuZHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBpY2VUcmFuc3BvcnQuc2V0UmVtb3RlQ2FuZGlkYXRlcyhjYW5kcyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICghc2VsZi51c2luZ0J1bmRsZSB8fCBzZHBNTGluZUluZGV4ID09PSAwKSB7CiAgICAgICAgICAgICAgICBpY2VUcmFuc3BvcnQuc3RhcnQoaWNlR2F0aGVyZXIsIHJlbW90ZUljZVBhcmFtZXRlcnMsCiAgICAgICAgICAgICAgICAgICAgJ2NvbnRyb2xsaW5nJyk7CiAgICAgICAgICAgICAgICBkdGxzVHJhbnNwb3J0LnN0YXJ0KHJlbW90ZUR0bHNQYXJhbWV0ZXJzKTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHNlbGYuX3RyYW5zY2VpdmUodHJhbnNjZWl2ZXIsCiAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdyZWN2b25seScsCiAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdzZW5kb25seScpOwoKICAgICAgICAgICAgICBpZiAocnRwUmVjZWl2ZXIgJiYKICAgICAgICAgICAgICAgICAgKGRpcmVjdGlvbiA9PT0gJ3NlbmRyZWN2JyB8fCBkaXJlY3Rpb24gPT09ICdzZW5kb25seScpKSB7CiAgICAgICAgICAgICAgICB0cmFjayA9IHJ0cFJlY2VpdmVyLnRyYWNrOwogICAgICAgICAgICAgICAgcmVjZWl2ZXJMaXN0LnB1c2goW3RyYWNrLCBydHBSZWNlaXZlcl0pOwogICAgICAgICAgICAgICAgc3RyZWFtLmFkZFRyYWNrKHRyYWNrKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgLy8gRklYTUU6IGFjdHVhbGx5IHRoZSByZWNlaXZlciBzaG91bGQgYmUgY3JlYXRlZCBsYXRlci4KICAgICAgICAgICAgICAgIGRlbGV0ZSB0cmFuc2NlaXZlci5ydHBSZWNlaXZlcjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwoKICAgICAgICAgIHRoaXMucmVtb3RlRGVzY3JpcHRpb24gPSB7CiAgICAgICAgICAgIHR5cGU6IGRlc2NyaXB0aW9uLnR5cGUsCiAgICAgICAgICAgIHNkcDogZGVzY3JpcHRpb24uc2RwCiAgICAgICAgICB9OwogICAgICAgICAgc3dpdGNoIChkZXNjcmlwdGlvbi50eXBlKSB7CiAgICAgICAgICAgIGNhc2UgJ29mZmVyJzoKICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnaGF2ZS1yZW1vdGUtb2ZmZXInKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnYW5zd2VyJzoKICAgICAgICAgICAgICB0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgnc3RhYmxlJyk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5zdXBwb3J0ZWQgdHlwZSAiJyArIGRlc2NyaXB0aW9uLnR5cGUgKwogICAgICAgICAgICAgICAgICAnIicpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHN0cmVhbS5nZXRUcmFja3MoKS5sZW5ndGgpIHsKICAgICAgICAgICAgc2VsZi5yZW1vdGVTdHJlYW1zLnB1c2goc3RyZWFtKTsKICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KCdhZGRzdHJlYW0nKTsKICAgICAgICAgICAgICBldmVudC5zdHJlYW0gPSBzdHJlYW07CiAgICAgICAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgICBpZiAoc2VsZi5vbmFkZHN0cmVhbSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgIHNlbGYub25hZGRzdHJlYW0oZXZlbnQpOwogICAgICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZWNlaXZlckxpc3QuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgICAgICB2YXIgdHJhY2sgPSBpdGVtWzBdOwogICAgICAgICAgICAgICAgdmFyIHJlY2VpdmVyID0gaXRlbVsxXTsKICAgICAgICAgICAgICAgIHZhciB0cmFja0V2ZW50ID0gbmV3IEV2ZW50KCd0cmFjaycpOwogICAgICAgICAgICAgICAgdHJhY2tFdmVudC50cmFjayA9IHRyYWNrOwogICAgICAgICAgICAgICAgdHJhY2tFdmVudC5yZWNlaXZlciA9IHJlY2VpdmVyOwogICAgICAgICAgICAgICAgdHJhY2tFdmVudC5zdHJlYW1zID0gW3N0cmVhbV07CiAgICAgICAgICAgICAgICBzZWxmLmRpc3BhdGNoRXZlbnQodHJhY2tFdmVudCk7CiAgICAgICAgICAgICAgICBpZiAoc2VsZi5vbnRyYWNrICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIHNlbGYub250cmFjayh0cmFja0V2ZW50KTsKICAgICAgICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sIDApOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoYXJndW1lbnRzWzFdLCAwKTsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgICAgICB9OwoKICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikgewogICAgICAgIC8qIG5vdCB5ZXQKICAgICAgICBpZiAodHJhbnNjZWl2ZXIuaWNlR2F0aGVyZXIpIHsKICAgICAgICAgIHRyYW5zY2VpdmVyLmljZUdhdGhlcmVyLmNsb3NlKCk7CiAgICAgICAgfQogICAgICAgICovCiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLmljZVRyYW5zcG9ydCkgewogICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0b3AoKTsKICAgICAgICB9CiAgICAgICAgaWYgKHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQpIHsKICAgICAgICAgIHRyYW5zY2VpdmVyLmR0bHNUcmFuc3BvcnQuc3RvcCgpOwogICAgICAgIH0KICAgICAgICBpZiAodHJhbnNjZWl2ZXIucnRwU2VuZGVyKSB7CiAgICAgICAgICB0cmFuc2NlaXZlci5ydHBTZW5kZXIuc3RvcCgpOwogICAgICAgIH0KICAgICAgICBpZiAodHJhbnNjZWl2ZXIucnRwUmVjZWl2ZXIpIHsKICAgICAgICAgIHRyYW5zY2VpdmVyLnJ0cFJlY2VpdmVyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICAvLyBGSVhNRTogY2xlYW4gdXAgdHJhY2tzLCBsb2NhbCBzdHJlYW1zLCByZW1vdGUgc3RyZWFtcywgZXRjCiAgICAgIHRoaXMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCdjbG9zZWQnKTsKICAgIH07CgogICAgLy8gVXBkYXRlIHRoZSBzaWduYWxpbmcgc3RhdGUuCiAgICB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLl91cGRhdGVTaWduYWxpbmdTdGF0ZSA9CiAgICAgICAgZnVuY3Rpb24obmV3U3RhdGUpIHsKICAgICAgICAgIHRoaXMuc2lnbmFsaW5nU3RhdGUgPSBuZXdTdGF0ZTsKICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnc2lnbmFsaW5nc3RhdGVjaGFuZ2UnKTsKICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICBpZiAodGhpcy5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlICE9PSBudWxsKSB7CiAgICAgICAgICAgIHRoaXMub25zaWduYWxpbmdzdGF0ZWNoYW5nZShldmVudCk7CiAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAvLyBEZXRlcm1pbmUgd2hldGhlciB0byBmaXJlIHRoZSBuZWdvdGlhdGlvbm5lZWRlZCBldmVudC4KICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuX21heWJlRmlyZU5lZ290aWF0aW9uTmVlZGVkID0KICAgICAgICBmdW5jdGlvbigpIHsKICAgICAgICAgIC8vIEZpcmUgYXdheSAoZm9yIG5vdykuCiAgICAgICAgICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQoJ25lZ290aWF0aW9ubmVlZGVkJyk7CiAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgaWYgKHRoaXMub25uZWdvdGlhdGlvbm5lZWRlZCAhPT0gbnVsbCkgewogICAgICAgICAgICB0aGlzLm9ubmVnb3RpYXRpb25uZWVkZWQoZXZlbnQpOwogICAgICAgICAgfQogICAgICAgIH07CgogICAgLy8gVXBkYXRlIHRoZSBjb25uZWN0aW9uIHN0YXRlLgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5fdXBkYXRlQ29ubmVjdGlvblN0YXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBzZWxmID0gdGhpczsKICAgICAgdmFyIG5ld1N0YXRlOwogICAgICB2YXIgc3RhdGVzID0gewogICAgICAgICduZXcnOiAwLAogICAgICAgIGNsb3NlZDogMCwKICAgICAgICBjb25uZWN0aW5nOiAwLAogICAgICAgIGNoZWNraW5nOiAwLAogICAgICAgIGNvbm5lY3RlZDogMCwKICAgICAgICBjb21wbGV0ZWQ6IDAsCiAgICAgICAgZmFpbGVkOiAwCiAgICAgIH07CiAgICAgIHRoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odHJhbnNjZWl2ZXIpIHsKICAgICAgICBzdGF0ZXNbdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LnN0YXRlXSsrOwogICAgICAgIHN0YXRlc1t0cmFuc2NlaXZlci5kdGxzVHJhbnNwb3J0LnN0YXRlXSsrOwogICAgICB9KTsKICAgICAgLy8gSUNFVHJhbnNwb3J0LmNvbXBsZXRlZCBhbmQgY29ubmVjdGVkIGFyZSB0aGUgc2FtZSBmb3IgdGhpcyBwdXJwb3NlLgogICAgICBzdGF0ZXMuY29ubmVjdGVkICs9IHN0YXRlcy5jb21wbGV0ZWQ7CgogICAgICBuZXdTdGF0ZSA9ICduZXcnOwogICAgICBpZiAoc3RhdGVzLmZhaWxlZCA+IDApIHsKICAgICAgICBuZXdTdGF0ZSA9ICdmYWlsZWQnOwogICAgICB9IGVsc2UgaWYgKHN0YXRlcy5jb25uZWN0aW5nID4gMCB8fCBzdGF0ZXMuY2hlY2tpbmcgPiAwKSB7CiAgICAgICAgbmV3U3RhdGUgPSAnY29ubmVjdGluZyc7CiAgICAgIH0gZWxzZSBpZiAoc3RhdGVzLmRpc2Nvbm5lY3RlZCA+IDApIHsKICAgICAgICBuZXdTdGF0ZSA9ICdkaXNjb25uZWN0ZWQnOwogICAgICB9IGVsc2UgaWYgKHN0YXRlcy5uZXcgPiAwKSB7CiAgICAgICAgbmV3U3RhdGUgPSAnbmV3JzsKICAgICAgfSBlbHNlIGlmIChzdGF0ZXMuY29ubmVjdGVkID4gMCB8fCBzdGF0ZXMuY29tcGxldGVkID4gMCkgewogICAgICAgIG5ld1N0YXRlID0gJ2Nvbm5lY3RlZCc7CiAgICAgIH0KCiAgICAgIGlmIChuZXdTdGF0ZSAhPT0gc2VsZi5pY2VDb25uZWN0aW9uU3RhdGUpIHsKICAgICAgICBzZWxmLmljZUNvbm5lY3Rpb25TdGF0ZSA9IG5ld1N0YXRlOwogICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgnaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlJyk7CiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICBpZiAodGhpcy5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSAhPT0gbnVsbCkgewogICAgICAgICAgdGhpcy5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZShldmVudCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuY3JlYXRlT2ZmZXIgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICBpZiAodGhpcy5fcGVuZGluZ09mZmVyKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVPZmZlciBjYWxsZWQgd2hpbGUgdGhlcmUgaXMgYSBwZW5kaW5nIG9mZmVyLicpOwogICAgICB9CiAgICAgIHZhciBvZmZlck9wdGlvbnM7CiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gIT09ICdmdW5jdGlvbicpIHsKICAgICAgICBvZmZlck9wdGlvbnMgPSBhcmd1bWVudHNbMF07CiAgICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykgewogICAgICAgIG9mZmVyT3B0aW9ucyA9IGFyZ3VtZW50c1syXTsKICAgICAgfQoKICAgICAgdmFyIHRyYWNrcyA9IFtdOwogICAgICB2YXIgbnVtQXVkaW9UcmFja3MgPSAwOwogICAgICB2YXIgbnVtVmlkZW9UcmFja3MgPSAwOwogICAgICAvLyBEZWZhdWx0IHRvIHNlbmRyZWN2LgogICAgICBpZiAodGhpcy5sb2NhbFN0cmVhbXMubGVuZ3RoKSB7CiAgICAgICAgbnVtQXVkaW9UcmFja3MgPSB0aGlzLmxvY2FsU3RyZWFtc1swXS5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aDsKICAgICAgICBudW1WaWRlb1RyYWNrcyA9IHRoaXMubG9jYWxTdHJlYW1zWzBdLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoOwogICAgICB9CiAgICAgIC8vIERldGVybWluZSBudW1iZXIgb2YgYXVkaW8gYW5kIHZpZGVvIHRyYWNrcyB3ZSBuZWVkIHRvIHNlbmQvcmVjdi4KICAgICAgaWYgKG9mZmVyT3B0aW9ucykgewogICAgICAgIC8vIFJlamVjdCBDaHJvbWUgbGVnYWN5IGNvbnN0cmFpbnRzLgogICAgICAgIGlmIChvZmZlck9wdGlvbnMubWFuZGF0b3J5IHx8IG9mZmVyT3B0aW9ucy5vcHRpb25hbCkgewogICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigKICAgICAgICAgICAgICAnTGVnYWN5IG1hbmRhdG9yeS9vcHRpb25hbCBjb25zdHJhaW50cyBub3Qgc3VwcG9ydGVkLicpOwogICAgICAgIH0KICAgICAgICBpZiAob2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlQXVkaW8gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgbnVtQXVkaW9UcmFja3MgPSBvZmZlck9wdGlvbnMub2ZmZXJUb1JlY2VpdmVBdWRpbzsKICAgICAgICB9CiAgICAgICAgaWYgKG9mZmVyT3B0aW9ucy5vZmZlclRvUmVjZWl2ZVZpZGVvICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIG51bVZpZGVvVHJhY2tzID0gb2ZmZXJPcHRpb25zLm9mZmVyVG9SZWNlaXZlVmlkZW87CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh0aGlzLmxvY2FsU3RyZWFtcy5sZW5ndGgpIHsKICAgICAgICAvLyBQdXNoIGxvY2FsIHN0cmVhbXMuCiAgICAgICAgdGhpcy5sb2NhbFN0cmVhbXNbMF0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykgewogICAgICAgICAgdHJhY2tzLnB1c2goewogICAgICAgICAgICBraW5kOiB0cmFjay5raW5kLAogICAgICAgICAgICB0cmFjazogdHJhY2ssCiAgICAgICAgICAgIHdhbnRSZWNlaXZlOiB0cmFjay5raW5kID09PSAnYXVkaW8nID8KICAgICAgICAgICAgICAgIG51bUF1ZGlvVHJhY2tzID4gMCA6IG51bVZpZGVvVHJhY2tzID4gMAogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAodHJhY2sua2luZCA9PT0gJ2F1ZGlvJykgewogICAgICAgICAgICBudW1BdWRpb1RyYWNrcy0tOwogICAgICAgICAgfSBlbHNlIGlmICh0cmFjay5raW5kID09PSAndmlkZW8nKSB7CiAgICAgICAgICAgIG51bVZpZGVvVHJhY2tzLS07CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgLy8gQ3JlYXRlIE0tbGluZXMgZm9yIHJlY3Zvbmx5IHN0cmVhbXMuCiAgICAgIHdoaWxlIChudW1BdWRpb1RyYWNrcyA+IDAgfHwgbnVtVmlkZW9UcmFja3MgPiAwKSB7CiAgICAgICAgaWYgKG51bUF1ZGlvVHJhY2tzID4gMCkgewogICAgICAgICAgdHJhY2tzLnB1c2goewogICAgICAgICAgICBraW5kOiAnYXVkaW8nLAogICAgICAgICAgICB3YW50UmVjZWl2ZTogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgICBudW1BdWRpb1RyYWNrcy0tOwogICAgICAgIH0KICAgICAgICBpZiAobnVtVmlkZW9UcmFja3MgPiAwKSB7CiAgICAgICAgICB0cmFja3MucHVzaCh7CiAgICAgICAgICAgIGtpbmQ6ICd2aWRlbycsCiAgICAgICAgICAgIHdhbnRSZWNlaXZlOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICAgIG51bVZpZGVvVHJhY2tzLS07CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgc2RwID0gU0RQVXRpbHMud3JpdGVTZXNzaW9uQm9pbGVycGxhdGUoKTsKICAgICAgdmFyIHRyYW5zY2VpdmVycyA9IFtdOwogICAgICB0cmFja3MuZm9yRWFjaChmdW5jdGlvbihtbGluZSwgc2RwTUxpbmVJbmRleCkgewogICAgICAgIC8vIEZvciBlYWNoIHRyYWNrLCBjcmVhdGUgYW4gaWNlIGdhdGhlcmVyLCBpY2UgdHJhbnNwb3J0LAogICAgICAgIC8vIGR0bHMgdHJhbnNwb3J0LCBwb3RlbnRpYWxseSBydHBzZW5kZXIgYW5kIHJ0cHJlY2VpdmVyLgogICAgICAgIHZhciB0cmFjayA9IG1saW5lLnRyYWNrOwogICAgICAgIHZhciBraW5kID0gbWxpbmUua2luZDsKICAgICAgICB2YXIgbWlkID0gU0RQVXRpbHMuZ2VuZXJhdGVJZGVudGlmaWVyKCk7CgogICAgICAgIHZhciB0cmFuc3BvcnRzID0gc2VsZi51c2luZ0J1bmRsZSAmJiBzZHBNTGluZUluZGV4ID4gMCA/IHsKICAgICAgICAgIGljZUdhdGhlcmVyOiB0cmFuc2NlaXZlcnNbMF0uaWNlR2F0aGVyZXIsCiAgICAgICAgICBpY2VUcmFuc3BvcnQ6IHRyYW5zY2VpdmVyc1swXS5pY2VUcmFuc3BvcnQsCiAgICAgICAgICBkdGxzVHJhbnNwb3J0OiB0cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydAogICAgICAgIH0gOiBzZWxmLl9jcmVhdGVJY2VBbmREdGxzVHJhbnNwb3J0cyhtaWQsIHNkcE1MaW5lSW5kZXgpOwoKICAgICAgICB2YXIgbG9jYWxDYXBhYmlsaXRpZXMgPSBSVENSdHBTZW5kZXIuZ2V0Q2FwYWJpbGl0aWVzKGtpbmQpOwogICAgICAgIC8vIGZpbHRlciBSVFggdW50aWwgYWRkaXRpb25hbCBzdHVmZiBuZWVkZWQgZm9yIFJUWCBpcyBpbXBsZW1lbnRlZAogICAgICAgIC8vIGluIGFkYXB0ZXIuanMKICAgICAgICBsb2NhbENhcGFiaWxpdGllcy5jb2RlY3MgPSBsb2NhbENhcGFiaWxpdGllcy5jb2RlY3MuZmlsdGVyKAogICAgICAgICAgICBmdW5jdGlvbihjb2RlYykgewogICAgICAgICAgICAgIHJldHVybiBjb2RlYy5uYW1lICE9PSAncnR4JzsKICAgICAgICAgICAgfSk7CiAgICAgICAgbG9jYWxDYXBhYmlsaXRpZXMuY29kZWNzLmZvckVhY2goZnVuY3Rpb24oY29kZWMpIHsKICAgICAgICAgIC8vIHdvcmsgYXJvdW5kIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC93ZWJydGMvaXNzdWVzL2RldGFpbD9pZD02NTUyCiAgICAgICAgICAvLyBieSBhZGRpbmcgbGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQ9MQogICAgICAgICAgaWYgKGNvZGVjLm5hbWUgPT09ICdIMjY0JyAmJgogICAgICAgICAgICAgIGNvZGVjLnBhcmFtZXRlcnNbJ2xldmVsLWFzeW1tZXRyeS1hbGxvd2VkJ10gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICBjb2RlYy5wYXJhbWV0ZXJzWydsZXZlbC1hc3ltbWV0cnktYWxsb3dlZCddID0gJzEnOwogICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICB2YXIgcnRwU2VuZGVyOwogICAgICAgIHZhciBydHBSZWNlaXZlcjsKCiAgICAgICAgLy8gZ2VuZXJhdGUgYW4gc3NyYyBub3csIHRvIGJlIHVzZWQgbGF0ZXIgaW4gcnRwU2VuZGVyLnNlbmQKICAgICAgICB2YXIgc2VuZEVuY29kaW5nUGFyYW1ldGVycyA9IFt7CiAgICAgICAgICBzc3JjOiAoMiAqIHNkcE1MaW5lSW5kZXggKyAxKSAqIDEwMDEKICAgICAgICB9XTsKICAgICAgICBpZiAodHJhY2spIHsKICAgICAgICAgIHJ0cFNlbmRlciA9IG5ldyBSVENSdHBTZW5kZXIodHJhY2ssIHRyYW5zcG9ydHMuZHRsc1RyYW5zcG9ydCk7CiAgICAgICAgfQoKICAgICAgICBpZiAobWxpbmUud2FudFJlY2VpdmUpIHsKICAgICAgICAgIHJ0cFJlY2VpdmVyID0gbmV3IFJUQ1J0cFJlY2VpdmVyKHRyYW5zcG9ydHMuZHRsc1RyYW5zcG9ydCwga2luZCk7CiAgICAgICAgfQoKICAgICAgICB0cmFuc2NlaXZlcnNbc2RwTUxpbmVJbmRleF0gPSB7CiAgICAgICAgICBpY2VHYXRoZXJlcjogdHJhbnNwb3J0cy5pY2VHYXRoZXJlciwKICAgICAgICAgIGljZVRyYW5zcG9ydDogdHJhbnNwb3J0cy5pY2VUcmFuc3BvcnQsCiAgICAgICAgICBkdGxzVHJhbnNwb3J0OiB0cmFuc3BvcnRzLmR0bHNUcmFuc3BvcnQsCiAgICAgICAgICBsb2NhbENhcGFiaWxpdGllczogbG9jYWxDYXBhYmlsaXRpZXMsCiAgICAgICAgICByZW1vdGVDYXBhYmlsaXRpZXM6IG51bGwsCiAgICAgICAgICBydHBTZW5kZXI6IHJ0cFNlbmRlciwKICAgICAgICAgIHJ0cFJlY2VpdmVyOiBydHBSZWNlaXZlciwKICAgICAgICAgIGtpbmQ6IGtpbmQsCiAgICAgICAgICBtaWQ6IG1pZCwKICAgICAgICAgIHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM6IHNlbmRFbmNvZGluZ1BhcmFtZXRlcnMsCiAgICAgICAgICByZWN2RW5jb2RpbmdQYXJhbWV0ZXJzOiBudWxsCiAgICAgICAgfTsKICAgICAgfSk7CiAgICAgIGlmICh0aGlzLnVzaW5nQnVuZGxlKSB7CiAgICAgICAgc2RwICs9ICdhPWdyb3VwOkJVTkRMRSAnICsgdHJhbnNjZWl2ZXJzLm1hcChmdW5jdGlvbih0KSB7CiAgICAgICAgICByZXR1cm4gdC5taWQ7CiAgICAgICAgfSkuam9pbignICcpICsgJ1xyXG4nOwogICAgICB9CiAgICAgIHRyYWNrcy5mb3JFYWNoKGZ1bmN0aW9uKG1saW5lLCBzZHBNTGluZUluZGV4KSB7CiAgICAgICAgdmFyIHRyYW5zY2VpdmVyID0gdHJhbnNjZWl2ZXJzW3NkcE1MaW5lSW5kZXhdOwogICAgICAgIHNkcCArPSBTRFBVdGlscy53cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlciwKICAgICAgICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsICdvZmZlcicsIHNlbGYubG9jYWxTdHJlYW1zWzBdKTsKICAgICAgfSk7CgogICAgICB0aGlzLl9wZW5kaW5nT2ZmZXIgPSB0cmFuc2NlaXZlcnM7CiAgICAgIHZhciBkZXNjID0gbmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7CiAgICAgICAgdHlwZTogJ29mZmVyJywKICAgICAgICBzZHA6IHNkcAogICAgICB9KTsKICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggJiYgdHlwZW9mIGFyZ3VtZW50c1swXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KGFyZ3VtZW50c1swXSwgMCwgZGVzYyk7CiAgICAgIH0KICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkZXNjKTsKICAgIH07CgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5jcmVhdGVBbnN3ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwoKICAgICAgdmFyIHNkcCA9IFNEUFV0aWxzLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlKCk7CiAgICAgIGlmICh0aGlzLnVzaW5nQnVuZGxlKSB7CiAgICAgICAgc2RwICs9ICdhPWdyb3VwOkJVTkRMRSAnICsgdGhpcy50cmFuc2NlaXZlcnMubWFwKGZ1bmN0aW9uKHQpIHsKICAgICAgICAgIHJldHVybiB0Lm1pZDsKICAgICAgICB9KS5qb2luKCcgJykgKyAnXHJcbic7CiAgICAgIH0KICAgICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikgewogICAgICAgIGlmICh0cmFuc2NlaXZlci5pc0RhdGFjaGFubmVsKSB7CiAgICAgICAgICBzZHAgKz0gJ209YXBwbGljYXRpb24gMCBEVExTL1NDVFAgNTAwMFxyXG4nICsKICAgICAgICAgICAgICAnYz1JTiBJUDQgMC4wLjAuMFxyXG4nICsKICAgICAgICAgICAgICAnYT1taWQ6JyArIHRyYW5zY2VpdmVyLm1pZCArICdcclxuJzsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgLy8gQ2FsY3VsYXRlIGludGVyc2VjdGlvbiBvZiBjYXBhYmlsaXRpZXMuCiAgICAgICAgdmFyIGNvbW1vbkNhcGFiaWxpdGllcyA9IHNlbGYuX2dldENvbW1vbkNhcGFiaWxpdGllcygKICAgICAgICAgICAgdHJhbnNjZWl2ZXIubG9jYWxDYXBhYmlsaXRpZXMsCiAgICAgICAgICAgIHRyYW5zY2VpdmVyLnJlbW90ZUNhcGFiaWxpdGllcyk7CgogICAgICAgIHNkcCArPSBTRFBVdGlscy53cml0ZU1lZGlhU2VjdGlvbih0cmFuc2NlaXZlciwgY29tbW9uQ2FwYWJpbGl0aWVzLAogICAgICAgICAgICAnYW5zd2VyJywgc2VsZi5sb2NhbFN0cmVhbXNbMF0pOwogICAgICB9KTsKCiAgICAgIHZhciBkZXNjID0gbmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7CiAgICAgICAgdHlwZTogJ2Fuc3dlcicsCiAgICAgICAgc2RwOiBzZHAKICAgICAgfSk7CiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoICYmIHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICB3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMF0sIDAsIGRlc2MpOwogICAgICB9CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZGVzYyk7CiAgICB9OwoKICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlID0gZnVuY3Rpb24oY2FuZGlkYXRlKSB7CiAgICAgIGlmICghY2FuZGlkYXRlKSB7CiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLnRyYW5zY2VpdmVycy5sZW5ndGg7IGorKykgewogICAgICAgICAgdGhpcy50cmFuc2NlaXZlcnNbal0uaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZSh7fSk7CiAgICAgICAgICBpZiAodGhpcy51c2luZ0J1bmRsZSkgewogICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHZhciBtTGluZUluZGV4ID0gY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXg7CiAgICAgICAgaWYgKGNhbmRpZGF0ZS5zZHBNaWQpIHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50cmFuc2NlaXZlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHRoaXMudHJhbnNjZWl2ZXJzW2ldLm1pZCA9PT0gY2FuZGlkYXRlLnNkcE1pZCkgewogICAgICAgICAgICAgIG1MaW5lSW5kZXggPSBpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHZhciB0cmFuc2NlaXZlciA9IHRoaXMudHJhbnNjZWl2ZXJzW21MaW5lSW5kZXhdOwogICAgICAgIGlmICh0cmFuc2NlaXZlcikgewogICAgICAgICAgdmFyIGNhbmQgPSBPYmplY3Qua2V5cyhjYW5kaWRhdGUuY2FuZGlkYXRlKS5sZW5ndGggPiAwID8KICAgICAgICAgICAgICBTRFBVdGlscy5wYXJzZUNhbmRpZGF0ZShjYW5kaWRhdGUuY2FuZGlkYXRlKSA6IHt9OwogICAgICAgICAgLy8gSWdub3JlIENocm9tZSdzIGludmFsaWQgY2FuZGlkYXRlcyBzaW5jZSBFZGdlIGRvZXMgbm90IGxpa2UgdGhlbS4KICAgICAgICAgIGlmIChjYW5kLnByb3RvY29sID09PSAndGNwJyAmJiAoY2FuZC5wb3J0ID09PSAwIHx8IGNhbmQucG9ydCA9PT0gOSkpIHsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwogICAgICAgICAgfQogICAgICAgICAgLy8gSWdub3JlIFJUQ1AgY2FuZGlkYXRlcywgd2UgYXNzdW1lIFJUQ1AtTVVYLgogICAgICAgICAgaWYgKGNhbmQuY29tcG9uZW50ICE9PSAnMScpIHsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwogICAgICAgICAgfQogICAgICAgICAgdHJhbnNjZWl2ZXIuaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZShjYW5kKTsKCiAgICAgICAgICAvLyB1cGRhdGUgdGhlIHJlbW90ZURlc2NyaXB0aW9uLgogICAgICAgICAgdmFyIHNlY3Rpb25zID0gU0RQVXRpbHMuc3BsaXRTZWN0aW9ucyh0aGlzLnJlbW90ZURlc2NyaXB0aW9uLnNkcCk7CiAgICAgICAgICBzZWN0aW9uc1ttTGluZUluZGV4ICsgMV0gKz0gKGNhbmQudHlwZSA/IGNhbmRpZGF0ZS5jYW5kaWRhdGUudHJpbSgpCiAgICAgICAgICAgICAgOiAnYT1lbmQtb2YtY2FuZGlkYXRlcycpICsgJ1xyXG4nOwogICAgICAgICAgdGhpcy5yZW1vdGVEZXNjcmlwdGlvbi5zZHAgPSBzZWN0aW9ucy5qb2luKCcnKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhcmd1bWVudHNbMV0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICB3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMV0sIDApOwogICAgICB9CiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTsKICAgIH07CgogICAgd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgcHJvbWlzZXMgPSBbXTsKICAgICAgdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0cmFuc2NlaXZlcikgewogICAgICAgIFsncnRwU2VuZGVyJywgJ3J0cFJlY2VpdmVyJywgJ2ljZUdhdGhlcmVyJywgJ2ljZVRyYW5zcG9ydCcsCiAgICAgICAgICAgICdkdGxzVHJhbnNwb3J0J10uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHsKICAgICAgICAgICAgICBpZiAodHJhbnNjZWl2ZXJbbWV0aG9kXSkgewogICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaCh0cmFuc2NlaXZlclttZXRob2RdLmdldFN0YXRzKCkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB2YXIgY2IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiB0eXBlb2YgYXJndW1lbnRzWzFdID09PSAnZnVuY3Rpb24nICYmCiAgICAgICAgICBhcmd1bWVudHNbMV07CiAgICAgIHZhciBmaXhTdGF0c1R5cGUgPSBmdW5jdGlvbihzdGF0KSB7CiAgICAgICAgc3RhdC50eXBlID0gewogICAgICAgICAgaW5ib3VuZHJ0cDogJ2luYm91bmQtcnRwJywKICAgICAgICAgIG91dGJvdW5kcnRwOiAnb3V0Ym91bmQtcnRwJywKICAgICAgICAgIGNhbmRpZGF0ZXBhaXI6ICdjYW5kaWRhdGUtcGFpcicsCiAgICAgICAgICBsb2NhbGNhbmRpZGF0ZTogJ2xvY2FsLWNhbmRpZGF0ZScsCiAgICAgICAgICByZW1vdGVjYW5kaWRhdGU6ICdyZW1vdGUtY2FuZGlkYXRlJwogICAgICAgIH1bc3RhdC50eXBlXSB8fCBzdGF0LnR5cGU7CiAgICAgICAgcmV0dXJuIHN0YXQ7CiAgICAgIH07CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7CiAgICAgICAgLy8gc2hpbSBnZXRTdGF0cyB3aXRoIG1hcGxpa2Ugc3VwcG9ydAogICAgICAgIHZhciByZXN1bHRzID0gbmV3IE1hcCgpOwogICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGZ1bmN0aW9uKHJlcykgewogICAgICAgICAgcmVzLmZvckVhY2goZnVuY3Rpb24ocmVzdWx0KSB7CiAgICAgICAgICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbihpZCkgewogICAgICAgICAgICAgIHJlc3VsdFtpZF0udHlwZSA9IGZpeFN0YXRzVHlwZShyZXN1bHRbaWRdKTsKICAgICAgICAgICAgICByZXN1bHRzLnNldChpZCwgcmVzdWx0W2lkXSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgICBpZiAoY2IpIHsKICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoY2IsIDAsIHJlc3VsdHMpOwogICAgICAgICAgfQogICAgICAgICAgcmVzb2x2ZShyZXN1bHRzKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9OwogIH0KfTsKCi8vIEV4cG9zZSBwdWJsaWMgbWV0aG9kcy4KbW9kdWxlLmV4cG9ydHMgPSB7CiAgc2hpbVBlZXJDb25uZWN0aW9uOiBlZGdlU2hpbS5zaGltUGVlckNvbm5lY3Rpb24sCiAgc2hpbUdldFVzZXJNZWRpYTogcmVxdWlyZSgnLi9nZXR1c2VybWVkaWEnKQp9OwoKfSx7Ii4uL3V0aWxzIjoxMSwiLi9nZXR1c2VybWVkaWEiOjcsInNkcCI6MX1dLDc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKgogKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKgogKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZQogKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlCiAqICB0cmVlLgogKi8KIC8qIGVzbGludC1lbnYgbm9kZSAqLwondXNlIHN0cmljdCc7CgovLyBFeHBvc2UgcHVibGljIG1ldGhvZHMuCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7CiAgdmFyIHNoaW1FcnJvcl8gPSBmdW5jdGlvbihlKSB7CiAgICByZXR1cm4gewogICAgICBuYW1lOiB7UGVybWlzc2lvbkRlbmllZEVycm9yOiAnTm90QWxsb3dlZEVycm9yJ31bZS5uYW1lXSB8fCBlLm5hbWUsCiAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSwKICAgICAgY29uc3RyYWludDogZS5jb25zdHJhaW50LAogICAgICB0b1N0cmluZzogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubmFtZTsKICAgICAgfQogICAgfTsKICB9OwoKICAvLyBnZXRVc2VyTWVkaWEgZXJyb3Igc2hpbS4KICB2YXIgb3JpZ0dldFVzZXJNZWRpYSA9IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLgogICAgICBiaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpOwogIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oYykgewogICAgcmV0dXJuIG9yaWdHZXRVc2VyTWVkaWEoYykuY2F0Y2goZnVuY3Rpb24oZSkgewogICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoc2hpbUVycm9yXyhlKSk7CiAgICB9KTsKICB9Owp9OwoKfSx7fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qCiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlCiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2UKICogIHRyZWUuCiAqLwogLyogZXNsaW50LWVudiBub2RlICovCid1c2Ugc3RyaWN0JzsKCnZhciBicm93c2VyRGV0YWlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJykuYnJvd3NlckRldGFpbHM7Cgp2YXIgZmlyZWZveFNoaW0gPSB7CiAgc2hpbU9uVHJhY2s6IGZ1bmN0aW9uKCkgewogICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiAmJiAhKCdvbnRyYWNrJyBpbgogICAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpKSB7CiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCAnb250cmFjaycsIHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIHRoaXMuX29udHJhY2s7CiAgICAgICAgfSwKICAgICAgICBzZXQ6IGZ1bmN0aW9uKGYpIHsKICAgICAgICAgIGlmICh0aGlzLl9vbnRyYWNrKSB7CiAgICAgICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhY2snLCB0aGlzLl9vbnRyYWNrKTsKICAgICAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbnRyYWNrcG9seSk7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYWNrJywgdGhpcy5fb250cmFjayA9IGYpOwogICAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdhZGRzdHJlYW0nLCB0aGlzLl9vbnRyYWNrcG9seSA9IGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgZS5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykgewogICAgICAgICAgICAgIHZhciBldmVudCA9IG5ldyBFdmVudCgndHJhY2snKTsKICAgICAgICAgICAgICBldmVudC50cmFjayA9IHRyYWNrOwogICAgICAgICAgICAgIGV2ZW50LnJlY2VpdmVyID0ge3RyYWNrOiB0cmFja307CiAgICAgICAgICAgICAgZXZlbnQuc3RyZWFtcyA9IFtlLnN0cmVhbV07CiAgICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTsKICAgICAgICAgIH0uYmluZCh0aGlzKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAoKICBzaGltU291cmNlT2JqZWN0OiBmdW5jdGlvbigpIHsKICAgIC8vIEZpcmVmb3ggaGFzIHN1cHBvcnRlZCBtb3pTcmNPYmplY3Qgc2luY2UgRkYyMiwgdW5wcmVmaXhlZCBpbiA0Mi4KICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgewogICAgICBpZiAod2luZG93LkhUTUxNZWRpYUVsZW1lbnQgJiYKICAgICAgICAhKCdzcmNPYmplY3QnIGluIHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSkpIHsKICAgICAgICAvLyBTaGltIHRoZSBzcmNPYmplY3QgcHJvcGVydHksIG9uY2UsIHdoZW4gSFRNTE1lZGlhRWxlbWVudCBpcyBmb3VuZC4KICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCAnc3JjT2JqZWN0JywgewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMubW96U3JjT2JqZWN0OwogICAgICAgICAgfSwKICAgICAgICAgIHNldDogZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgICAgICAgIHRoaXMubW96U3JjT2JqZWN0ID0gc3RyZWFtOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwKCiAgc2hpbVBlZXJDb25uZWN0aW9uOiBmdW5jdGlvbigpIHsKICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAnb2JqZWN0JyB8fCAhKHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiB8fAogICAgICAgIHdpbmRvdy5tb3pSVENQZWVyQ29ubmVjdGlvbikpIHsKICAgICAgcmV0dXJuOyAvLyBwcm9iYWJseSBtZWRpYS5wZWVyY29ubmVjdGlvbi5lbmFibGVkPWZhbHNlIGluIGFib3V0OmNvbmZpZwogICAgfQogICAgLy8gVGhlIFJUQ1BlZXJDb25uZWN0aW9uIG9iamVjdC4KICAgIGlmICghd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKSB7CiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiA9IGZ1bmN0aW9uKHBjQ29uZmlnLCBwY0NvbnN0cmFpbnRzKSB7CiAgICAgICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCAzOCkgewogICAgICAgICAgLy8gLnVybHMgaXMgbm90IHN1cHBvcnRlZCBpbiBGRiA8IDM4LgogICAgICAgICAgLy8gY3JlYXRlIFJUQ0ljZVNlcnZlcnMgd2l0aCBhIHNpbmdsZSB1cmwuCiAgICAgICAgICBpZiAocGNDb25maWcgJiYgcGNDb25maWcuaWNlU2VydmVycykgewogICAgICAgICAgICB2YXIgbmV3SWNlU2VydmVycyA9IFtdOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBjQ29uZmlnLmljZVNlcnZlcnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICB2YXIgc2VydmVyID0gcGNDb25maWcuaWNlU2VydmVyc1tpXTsKICAgICAgICAgICAgICBpZiAoc2VydmVyLmhhc093blByb3BlcnR5KCd1cmxzJykpIHsKICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgc2VydmVyLnVybHMubGVuZ3RoOyBqKyspIHsKICAgICAgICAgICAgICAgICAgdmFyIG5ld1NlcnZlciA9IHsKICAgICAgICAgICAgICAgICAgICB1cmw6IHNlcnZlci51cmxzW2pdCiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgIGlmIChzZXJ2ZXIudXJsc1tqXS5pbmRleE9mKCd0dXJuJykgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICBuZXdTZXJ2ZXIudXNlcm5hbWUgPSBzZXJ2ZXIudXNlcm5hbWU7CiAgICAgICAgICAgICAgICAgICAgbmV3U2VydmVyLmNyZWRlbnRpYWwgPSBzZXJ2ZXIuY3JlZGVudGlhbDsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICBuZXdJY2VTZXJ2ZXJzLnB1c2gobmV3U2VydmVyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgbmV3SWNlU2VydmVycy5wdXNoKHBjQ29uZmlnLmljZVNlcnZlcnNbaV0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBwY0NvbmZpZy5pY2VTZXJ2ZXJzID0gbmV3SWNlU2VydmVyczsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBtb3pSVENQZWVyQ29ubmVjdGlvbihwY0NvbmZpZywgcGNDb25zdHJhaW50cyk7CiAgICAgIH07CiAgICAgIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUgPSBtb3pSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGU7CgogICAgICAvLyB3cmFwIHN0YXRpYyBtZXRob2RzLiBDdXJyZW50bHkganVzdCBnZW5lcmF0ZUNlcnRpZmljYXRlLgogICAgICBpZiAobW96UlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZSkgewogICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24sICdnZW5lcmF0ZUNlcnRpZmljYXRlJywgewogICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIG1velJUQ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGU7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb24gPSBtb3pSVENTZXNzaW9uRGVzY3JpcHRpb247CiAgICAgIHdpbmRvdy5SVENJY2VDYW5kaWRhdGUgPSBtb3pSVENJY2VDYW5kaWRhdGU7CiAgICB9CgogICAgLy8gc2hpbSBhd2F5IG5lZWQgZm9yIG9ic29sZXRlIFJUQ0ljZUNhbmRpZGF0ZS9SVENTZXNzaW9uRGVzY3JpcHRpb24uCiAgICBbJ3NldExvY2FsRGVzY3JpcHRpb24nLCAnc2V0UmVtb3RlRGVzY3JpcHRpb24nLCAnYWRkSWNlQ2FuZGlkYXRlJ10KICAgICAgICAuZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHsKICAgICAgICAgIHZhciBuYXRpdmVNZXRob2QgPSBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXTsKICAgICAgICAgIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGFyZ3VtZW50c1swXSA9IG5ldyAoKG1ldGhvZCA9PT0gJ2FkZEljZUNhbmRpZGF0ZScpID8KICAgICAgICAgICAgICAgIFJUQ0ljZUNhbmRpZGF0ZSA6IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbikoYXJndW1lbnRzWzBdKTsKICAgICAgICAgICAgcmV0dXJuIG5hdGl2ZU1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgfTsKICAgICAgICB9KTsKCiAgICAvLyBzdXBwb3J0IGZvciBhZGRJY2VDYW5kaWRhdGUobnVsbCBvciB1bmRlZmluZWQpCiAgICB2YXIgbmF0aXZlQWRkSWNlQ2FuZGlkYXRlID0KICAgICAgICBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlOwogICAgUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAoIWFyZ3VtZW50c1swXSkgewogICAgICAgIGlmIChhcmd1bWVudHNbMV0pIHsKICAgICAgICAgIGFyZ3VtZW50c1sxXS5hcHBseShudWxsKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpOwogICAgICB9CiAgICAgIHJldHVybiBuYXRpdmVBZGRJY2VDYW5kaWRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CgogICAgLy8gc2hpbSBnZXRTdGF0cyB3aXRoIG1hcGxpa2Ugc3VwcG9ydAogICAgdmFyIG1ha2VNYXBTdGF0cyA9IGZ1bmN0aW9uKHN0YXRzKSB7CiAgICAgIHZhciBtYXAgPSBuZXcgTWFwKCk7CiAgICAgIE9iamVjdC5rZXlzKHN0YXRzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgewogICAgICAgIG1hcC5zZXQoa2V5LCBzdGF0c1trZXldKTsKICAgICAgICBtYXBba2V5XSA9IHN0YXRzW2tleV07CiAgICAgIH0pOwogICAgICByZXR1cm4gbWFwOwogICAgfTsKCiAgICB2YXIgbW9kZXJuU3RhdHNUeXBlcyA9IHsKICAgICAgaW5ib3VuZHJ0cDogJ2luYm91bmQtcnRwJywKICAgICAgb3V0Ym91bmRydHA6ICdvdXRib3VuZC1ydHAnLAogICAgICBjYW5kaWRhdGVwYWlyOiAnY2FuZGlkYXRlLXBhaXInLAogICAgICBsb2NhbGNhbmRpZGF0ZTogJ2xvY2FsLWNhbmRpZGF0ZScsCiAgICAgIHJlbW90ZWNhbmRpZGF0ZTogJ3JlbW90ZS1jYW5kaWRhdGUnCiAgICB9OwoKICAgIHZhciBuYXRpdmVHZXRTdGF0cyA9IFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0czsKICAgIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cyA9IGZ1bmN0aW9uKHNlbGVjdG9yLCBvblN1Y2MsIG9uRXJyKSB7CiAgICAgIHJldHVybiBuYXRpdmVHZXRTdGF0cy5hcHBseSh0aGlzLCBbc2VsZWN0b3IgfHwgbnVsbF0pCiAgICAgICAgLnRoZW4oZnVuY3Rpb24oc3RhdHMpIHsKICAgICAgICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNDgpIHsKICAgICAgICAgICAgc3RhdHMgPSBtYWtlTWFwU3RhdHMoc3RhdHMpOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA1MyAmJiAhb25TdWNjKSB7CiAgICAgICAgICAgIC8vIFNoaW0gb25seSBwcm9taXNlIGdldFN0YXRzIHdpdGggc3BlYy1oeXBoZW5zIGluIHR5cGUgbmFtZXMKICAgICAgICAgICAgLy8gTGVhdmUgY2FsbGJhY2sgdmVyc2lvbiBhbG9uZTsgbWlzYyBvbGQgdXNlcyBvZiBmb3JFYWNoIGJlZm9yZSBNYXAKICAgICAgICAgICAgc3RhdHMuZm9yRWFjaChmdW5jdGlvbihzdGF0KSB7CiAgICAgICAgICAgICAgc3RhdC50eXBlID0gbW9kZXJuU3RhdHNUeXBlc1tzdGF0LnR5cGVdIHx8IHN0YXQudHlwZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gc3RhdHM7CiAgICAgICAgfSkKICAgICAgICAudGhlbihvblN1Y2MsIG9uRXJyKTsKICAgIH07CiAgfQp9OwoKLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzLgptb2R1bGUuZXhwb3J0cyA9IHsKICBzaGltT25UcmFjazogZmlyZWZveFNoaW0uc2hpbU9uVHJhY2ssCiAgc2hpbVNvdXJjZU9iamVjdDogZmlyZWZveFNoaW0uc2hpbVNvdXJjZU9iamVjdCwKICBzaGltUGVlckNvbm5lY3Rpb246IGZpcmVmb3hTaGltLnNoaW1QZWVyQ29ubmVjdGlvbiwKICBzaGltR2V0VXNlck1lZGlhOiByZXF1aXJlKCcuL2dldHVzZXJtZWRpYScpCn07Cgp9LHsiLi4vdXRpbHMiOjExLCIuL2dldHVzZXJtZWRpYSI6OX1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKgogKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKgogKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZQogKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlCiAqICB0cmVlLgogKi8KIC8qIGVzbGludC1lbnYgbm9kZSAqLwondXNlIHN0cmljdCc7Cgp2YXIgbG9nZ2luZyA9IHJlcXVpcmUoJy4uL3V0aWxzJykubG9nOwp2YXIgYnJvd3NlckRldGFpbHMgPSByZXF1aXJlKCcuLi91dGlscycpLmJyb3dzZXJEZXRhaWxzOwoKLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzLgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkgewogIHZhciBzaGltRXJyb3JfID0gZnVuY3Rpb24oZSkgewogICAgcmV0dXJuIHsKICAgICAgbmFtZTogewogICAgICAgIFNlY3VyaXR5RXJyb3I6ICdOb3RBbGxvd2VkRXJyb3InLAogICAgICAgIFBlcm1pc3Npb25EZW5pZWRFcnJvcjogJ05vdEFsbG93ZWRFcnJvcicKICAgICAgfVtlLm5hbWVdIHx8IGUubmFtZSwKICAgICAgbWVzc2FnZTogewogICAgICAgICdUaGUgb3BlcmF0aW9uIGlzIGluc2VjdXJlLic6ICdUaGUgcmVxdWVzdCBpcyBub3QgYWxsb3dlZCBieSB0aGUgJyArCiAgICAgICAgJ3VzZXIgYWdlbnQgb3IgdGhlIHBsYXRmb3JtIGluIHRoZSBjdXJyZW50IGNvbnRleHQuJwogICAgICB9W2UubWVzc2FnZV0gfHwgZS5tZXNzYWdlLAogICAgICBjb25zdHJhaW50OiBlLmNvbnN0cmFpbnQsCiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgKHRoaXMubWVzc2FnZSAmJiAnOiAnKSArIHRoaXMubWVzc2FnZTsKICAgICAgfQogICAgfTsKICB9OwoKICAvLyBnZXRVc2VyTWVkaWEgY29uc3RyYWludHMgc2hpbS4KICB2YXIgZ2V0VXNlck1lZGlhXyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHsKICAgIHZhciBjb25zdHJhaW50c1RvRkYzN18gPSBmdW5jdGlvbihjKSB7CiAgICAgIGlmICh0eXBlb2YgYyAhPT0gJ29iamVjdCcgfHwgYy5yZXF1aXJlKSB7CiAgICAgICAgcmV0dXJuIGM7CiAgICAgIH0KICAgICAgdmFyIHJlcXVpcmUgPSBbXTsKICAgICAgT2JqZWN0LmtleXMoYykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKICAgICAgICBpZiAoa2V5ID09PSAncmVxdWlyZScgfHwga2V5ID09PSAnYWR2YW5jZWQnIHx8IGtleSA9PT0gJ21lZGlhU291cmNlJykgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICB2YXIgciA9IGNba2V5XSA9ICh0eXBlb2YgY1trZXldID09PSAnb2JqZWN0JykgPwogICAgICAgICAgICBjW2tleV0gOiB7aWRlYWw6IGNba2V5XX07CiAgICAgICAgaWYgKHIubWluICE9PSB1bmRlZmluZWQgfHwKICAgICAgICAgICAgci5tYXggIT09IHVuZGVmaW5lZCB8fCByLmV4YWN0ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHJlcXVpcmUucHVzaChrZXkpOwogICAgICAgIH0KICAgICAgICBpZiAoci5leGFjdCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBpZiAodHlwZW9mIHIuZXhhY3QgPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgIHIuIG1pbiA9IHIubWF4ID0gci5leGFjdDsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNba2V5XSA9IHIuZXhhY3Q7CiAgICAgICAgICB9CiAgICAgICAgICBkZWxldGUgci5leGFjdDsKICAgICAgICB9CiAgICAgICAgaWYgKHIuaWRlYWwgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgYy5hZHZhbmNlZCA9IGMuYWR2YW5jZWQgfHwgW107CiAgICAgICAgICB2YXIgb2MgPSB7fTsKICAgICAgICAgIGlmICh0eXBlb2Ygci5pZGVhbCA9PT0gJ251bWJlcicpIHsKICAgICAgICAgICAgb2Nba2V5XSA9IHttaW46IHIuaWRlYWwsIG1heDogci5pZGVhbH07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBvY1trZXldID0gci5pZGVhbDsKICAgICAgICAgIH0KICAgICAgICAgIGMuYWR2YW5jZWQucHVzaChvYyk7CiAgICAgICAgICBkZWxldGUgci5pZGVhbDsKICAgICAgICAgIGlmICghT2JqZWN0LmtleXMocikubGVuZ3RoKSB7CiAgICAgICAgICAgIGRlbGV0ZSBjW2tleV07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9KTsKICAgICAgaWYgKHJlcXVpcmUubGVuZ3RoKSB7CiAgICAgICAgYy5yZXF1aXJlID0gcmVxdWlyZTsKICAgICAgfQogICAgICByZXR1cm4gYzsKICAgIH07CiAgICBjb25zdHJhaW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29uc3RyYWludHMpKTsKICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgMzgpIHsKICAgICAgbG9nZ2luZygnc3BlYzogJyArIEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7CiAgICAgIGlmIChjb25zdHJhaW50cy5hdWRpbykgewogICAgICAgIGNvbnN0cmFpbnRzLmF1ZGlvID0gY29uc3RyYWludHNUb0ZGMzdfKGNvbnN0cmFpbnRzLmF1ZGlvKTsKICAgICAgfQogICAgICBpZiAoY29uc3RyYWludHMudmlkZW8pIHsKICAgICAgICBjb25zdHJhaW50cy52aWRlbyA9IGNvbnN0cmFpbnRzVG9GRjM3Xyhjb25zdHJhaW50cy52aWRlbyk7CiAgICAgIH0KICAgICAgbG9nZ2luZygnZmYzNzogJyArIEpTT04uc3RyaW5naWZ5KGNvbnN0cmFpbnRzKSk7CiAgICB9CiAgICByZXR1cm4gbmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYShjb25zdHJhaW50cywgb25TdWNjZXNzLCBmdW5jdGlvbihlKSB7CiAgICAgIG9uRXJyb3Ioc2hpbUVycm9yXyhlKSk7CiAgICB9KTsKICB9OwoKICAvLyBSZXR1cm5zIHRoZSByZXN1bHQgb2YgZ2V0VXNlck1lZGlhIGFzIGEgUHJvbWlzZS4KICB2YXIgZ2V0VXNlck1lZGlhUHJvbWlzZV8gPSBmdW5jdGlvbihjb25zdHJhaW50cykgewogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkgewogICAgICBnZXRVc2VyTWVkaWFfKGNvbnN0cmFpbnRzLCByZXNvbHZlLCByZWplY3QpOwogICAgfSk7CiAgfTsKCiAgLy8gU2hpbSBmb3IgbWVkaWFEZXZpY2VzIG9uIG9sZGVyIHZlcnNpb25zLgogIGlmICghbmF2aWdhdG9yLm1lZGlhRGV2aWNlcykgewogICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyA9IHtnZXRVc2VyTWVkaWE6IGdldFVzZXJNZWRpYVByb21pc2VfLAogICAgICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbigpIHsgfSwKICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oKSB7IH0KICAgIH07CiAgfQogIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcyA9CiAgICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcyB8fCBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkgewogICAgICAgICAgdmFyIGluZm9zID0gWwogICAgICAgICAgICB7a2luZDogJ2F1ZGlvaW5wdXQnLCBkZXZpY2VJZDogJ2RlZmF1bHQnLCBsYWJlbDogJycsIGdyb3VwSWQ6ICcnfSwKICAgICAgICAgICAge2tpbmQ6ICd2aWRlb2lucHV0JywgZGV2aWNlSWQ6ICdkZWZhdWx0JywgbGFiZWw6ICcnLCBncm91cElkOiAnJ30KICAgICAgICAgIF07CiAgICAgICAgICByZXNvbHZlKGluZm9zKTsKICAgICAgICB9KTsKICAgICAgfTsKCiAgaWYgKGJyb3dzZXJEZXRhaWxzLnZlcnNpb24gPCA0MSkgewogICAgLy8gV29yayBhcm91bmQgaHR0cDovL2J1Z3ppbC5sYS8xMTY5NjY1CiAgICB2YXIgb3JnRW51bWVyYXRlRGV2aWNlcyA9CiAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzLmJpbmQobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyk7CiAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIG9yZ0VudW1lcmF0ZURldmljZXMoKS50aGVuKHVuZGVmaW5lZCwgZnVuY3Rpb24oZSkgewogICAgICAgIGlmIChlLm5hbWUgPT09ICdOb3RGb3VuZEVycm9yJykgewogICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgIH0KICAgICAgICB0aHJvdyBlOwogICAgICB9KTsKICAgIH07CiAgfQogIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNDkpIHsKICAgIHZhciBvcmlnR2V0VXNlck1lZGlhID0gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuCiAgICAgICAgYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTsKICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhID0gZnVuY3Rpb24oYykgewogICAgICByZXR1cm4gb3JpZ0dldFVzZXJNZWRpYShjKS50aGVuKGZ1bmN0aW9uKHN0cmVhbSkgewogICAgICAgIC8vIFdvcmsgYXJvdW5kIGh0dHBzOi8vYnVnemlsLmxhLzgwMjMyNgogICAgICAgIGlmIChjLmF1ZGlvICYmICFzdHJlYW0uZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGggfHwKICAgICAgICAgICAgYy52aWRlbyAmJiAhc3RyZWFtLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoKSB7CiAgICAgICAgICBzdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0cmFjaykgewogICAgICAgICAgICB0cmFjay5zdG9wKCk7CiAgICAgICAgICB9KTsKICAgICAgICAgIHRocm93IG5ldyBET01FeGNlcHRpb24oJ1RoZSBvYmplY3QgY2FuIG5vdCBiZSBmb3VuZCBoZXJlLicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdOb3RGb3VuZEVycm9yJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBzdHJlYW07CiAgICAgIH0sIGZ1bmN0aW9uKGUpIHsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qoc2hpbUVycm9yXyhlKSk7CiAgICAgIH0pOwogICAgfTsKICB9CiAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHsKICAgIGlmIChicm93c2VyRGV0YWlscy52ZXJzaW9uIDwgNDQpIHsKICAgICAgcmV0dXJuIGdldFVzZXJNZWRpYV8oY29uc3RyYWludHMsIG9uU3VjY2Vzcywgb25FcnJvcik7CiAgICB9CiAgICAvLyBSZXBsYWNlIEZpcmVmb3ggNDQrJ3MgZGVwcmVjYXRpb24gd2FybmluZyB3aXRoIHVucHJlZml4ZWQgdmVyc2lvbi4KICAgIGNvbnNvbGUud2FybignbmF2aWdhdG9yLmdldFVzZXJNZWRpYSBoYXMgYmVlbiByZXBsYWNlZCBieSAnICsKICAgICAgICAgICAgICAgICAnbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEnKTsKICAgIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzKS50aGVuKG9uU3VjY2Vzcywgb25FcnJvcik7CiAgfTsKfTsKCn0seyIuLi91dGlscyI6MTF9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7Ci8qCiAqICBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFdlYlJUQyBwcm9qZWN0IGF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuCiAqCiAqICBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhIEJTRC1zdHlsZSBsaWNlbnNlCiAqICB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBzb3VyY2UKICogIHRyZWUuCiAqLwondXNlIHN0cmljdCc7CnZhciBzYWZhcmlTaGltID0gewogIC8vIFRPRE86IERyQWxleCwgc2hvdWxkIGJlIGhlcmUsIGRvdWJsZSBjaGVjayBhZ2FpbnN0IExheW91dFRlc3RzCiAgLy8gc2hpbU9uVHJhY2s6IGZ1bmN0aW9uKCkgeyB9LAoKICAvLyBUT0RPOiBvbmNlIHRoZSBiYWNrLWVuZCBmb3IgdGhlIG1hYyBwb3J0IGlzIGRvbmUsIGFkZC4KICAvLyBUT0RPOiBjaGVjayBmb3Igd2Via2l0R1RLKwogIC8vIHNoaW1QZWVyQ29ubmVjdGlvbjogZnVuY3Rpb24oKSB7IH0sCgogIHNoaW1HZXRVc2VyTWVkaWE6IGZ1bmN0aW9uKCkgewogICAgbmF2aWdhdG9yLmdldFVzZXJNZWRpYSA9IG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWE7CiAgfQp9OwoKLy8gRXhwb3NlIHB1YmxpYyBtZXRob2RzLgptb2R1bGUuZXhwb3J0cyA9IHsKICBzaGltR2V0VXNlck1lZGlhOiBzYWZhcmlTaGltLnNoaW1HZXRVc2VyTWVkaWEKICAvLyBUT0RPCiAgLy8gc2hpbU9uVHJhY2s6IHNhZmFyaVNoaW0uc2hpbU9uVHJhY2ssCiAgLy8gc2hpbVBlZXJDb25uZWN0aW9uOiBzYWZhcmlTaGltLnNoaW1QZWVyQ29ubmVjdGlvbgp9OwoKfSx7fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewovKgogKiAgQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBXZWJSVEMgcHJvamVjdCBhdXRob3JzLiBBbGwgUmlnaHRzIFJlc2VydmVkLgogKgogKiAgVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYSBCU0Qtc3R5bGUgbGljZW5zZQogKiAgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgc291cmNlCiAqICB0cmVlLgogKi8KIC8qIGVzbGludC1lbnYgbm9kZSAqLwondXNlIHN0cmljdCc7Cgp2YXIgbG9nRGlzYWJsZWRfID0gdHJ1ZTsKCi8vIFV0aWxpdHkgbWV0aG9kcy4KdmFyIHV0aWxzID0gewogIGRpc2FibGVMb2c6IGZ1bmN0aW9uKGJvb2wpIHsKICAgIGlmICh0eXBlb2YgYm9vbCAhPT0gJ2Jvb2xlYW4nKSB7CiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0FyZ3VtZW50IHR5cGU6ICcgKyB0eXBlb2YgYm9vbCArCiAgICAgICAgICAnLiBQbGVhc2UgdXNlIGEgYm9vbGVhbi4nKTsKICAgIH0KICAgIGxvZ0Rpc2FibGVkXyA9IGJvb2w7CiAgICByZXR1cm4gKGJvb2wpID8gJ2FkYXB0ZXIuanMgbG9nZ2luZyBkaXNhYmxlZCcgOgogICAgICAgICdhZGFwdGVyLmpzIGxvZ2dpbmcgZW5hYmxlZCc7CiAgfSwKCiAgbG9nOiBmdW5jdGlvbigpIHsKICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgewogICAgICBpZiAobG9nRGlzYWJsZWRfKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUubG9nID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgYXJndW1lbnRzKTsKICAgICAgfQogICAgfQogIH0sCgogIC8qKgogICAqIEV4dHJhY3QgYnJvd3NlciB2ZXJzaW9uIG91dCBvZiB0aGUgcHJvdmlkZWQgdXNlciBhZ2VudCBzdHJpbmcuCiAgICoKICAgKiBAcGFyYW0geyFzdHJpbmd9IHVhc3RyaW5nIHVzZXJBZ2VudCBzdHJpbmcuCiAgICogQHBhcmFtIHshc3RyaW5nfSBleHByIFJlZ3VsYXIgZXhwcmVzc2lvbiB1c2VkIGFzIG1hdGNoIGNyaXRlcmlhLgogICAqIEBwYXJhbSB7IW51bWJlcn0gcG9zIHBvc2l0aW9uIGluIHRoZSB2ZXJzaW9uIHN0cmluZyB0byBiZSByZXR1cm5lZC4KICAgKiBAcmV0dXJuIHshbnVtYmVyfSBicm93c2VyIHZlcnNpb24uCiAgICovCiAgZXh0cmFjdFZlcnNpb246IGZ1bmN0aW9uKHVhc3RyaW5nLCBleHByLCBwb3MpIHsKICAgIHZhciBtYXRjaCA9IHVhc3RyaW5nLm1hdGNoKGV4cHIpOwogICAgcmV0dXJuIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+PSBwb3MgJiYgcGFyc2VJbnQobWF0Y2hbcG9zXSwgMTApOwogIH0sCgogIC8qKgogICAqIEJyb3dzZXIgZGV0ZWN0b3IuCiAgICoKICAgKiBAcmV0dXJuIHtvYmplY3R9IHJlc3VsdCBjb250YWluaW5nIGJyb3dzZXIgYW5kIHZlcnNpb24KICAgKiAgICAgcHJvcGVydGllcy4KICAgKi8KICBkZXRlY3RCcm93c2VyOiBmdW5jdGlvbigpIHsKICAgIC8vIFJldHVybmVkIHJlc3VsdCBvYmplY3QuCiAgICB2YXIgcmVzdWx0ID0ge307CiAgICByZXN1bHQuYnJvd3NlciA9IG51bGw7CiAgICByZXN1bHQudmVyc2lvbiA9IG51bGw7CgogICAgLy8gRmFpbCBlYXJseSBpZiBpdCdzIG5vdCBhIGJyb3dzZXIKICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyB8fCAhd2luZG93Lm5hdmlnYXRvcikgewogICAgICByZXN1bHQuYnJvd3NlciA9ICdOb3QgYSBicm93c2VyLic7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CgogICAgLy8gRmlyZWZveC4KICAgIGlmIChuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhKSB7CiAgICAgIHJlc3VsdC5icm93c2VyID0gJ2ZpcmVmb3gnOwogICAgICByZXN1bHQudmVyc2lvbiA9IHRoaXMuZXh0cmFjdFZlcnNpb24obmF2aWdhdG9yLnVzZXJBZ2VudCwKICAgICAgICAgIC9GaXJlZm94XC8oWzAtOV0rKVwuLywgMSk7CgogICAgLy8gYWxsIHdlYmtpdC1iYXNlZCBicm93c2VycwogICAgfSBlbHNlIGlmIChuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhKSB7CiAgICAgIC8vIENocm9tZSwgQ2hyb21pdW0sIFdlYnZpZXcsIE9wZXJhLCBhbGwgdXNlIHRoZSBjaHJvbWUgc2hpbSBmb3Igbm93CiAgICAgIGlmICh3aW5kb3cud2Via2l0UlRDUGVlckNvbm5lY3Rpb24pIHsKICAgICAgICByZXN1bHQuYnJvd3NlciA9ICdjaHJvbWUnOwogICAgICAgIHJlc3VsdC52ZXJzaW9uID0gdGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LAogICAgICAgICAgL0Nocm9tKGV8aXVtKVwvKFswLTldKylcLi8sIDIpOwoKICAgICAgLy8gU2FmYXJpIG9yIHVua25vd24gd2Via2l0LWJhc2VkCiAgICAgIC8vIGZvciB0aGUgdGltZSBiZWluZyBTYWZhcmkgaGFzIHN1cHBvcnQgZm9yIE1lZGlhU3RyZWFtcyBidXQgbm90IHdlYlJUQwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFNhZmFyaSBVQSBzdWJzdHJpbmdzIG9mIGludGVyZXN0IGZvciByZWZlcmVuY2U6CiAgICAgICAgLy8gLSB3ZWJraXQgdmVyc2lvbjogICAgICAgICAgIEFwcGxlV2ViS2l0LzYwMi4xLjI1IChhbHNvIHVzZWQgaW4gT3AsQ3IpCiAgICAgICAgLy8gLSBzYWZhcmkgVUkgdmVyc2lvbjogICAgICAgIFZlcnNpb24vOS4wLjMgKHVuaXF1ZSB0byBTYWZhcmkpCiAgICAgICAgLy8gLSBzYWZhcmkgVUkgd2Via2l0IHZlcnNpb246IFNhZmFyaS82MDEuNC40IChhbHNvIHVzZWQgaW4gT3AsQ3IpCiAgICAgICAgLy8KICAgICAgICAvLyBpZiB0aGUgd2Via2l0IHZlcnNpb24gYW5kIHNhZmFyaSBVSSB3ZWJraXQgdmVyc2lvbnMgYXJlIGVxdWFscywKICAgICAgICAvLyAuLi4gdGhpcyBpcyBhIHN0YWJsZSB2ZXJzaW9uLgogICAgICAgIC8vCiAgICAgICAgLy8gb25seSB0aGUgaW50ZXJuYWwgd2Via2l0IHZlcnNpb24gaXMgaW1wb3J0YW50IHRvZGF5IHRvIGtub3cgaWYKICAgICAgICAvLyBtZWRpYSBzdHJlYW1zIGFyZSBzdXBwb3J0ZWQKICAgICAgICAvLwogICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9WZXJzaW9uXC8oXGQrKS4oXGQrKS8pKSB7CiAgICAgICAgICByZXN1bHQuYnJvd3NlciA9ICdzYWZhcmknOwogICAgICAgICAgcmVzdWx0LnZlcnNpb24gPSB0aGlzLmV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsCiAgICAgICAgICAgIC9BcHBsZVdlYktpdFwvKFswLTldKylcLi8sIDEpOwoKICAgICAgICAvLyB1bmtub3duIHdlYmtpdC1iYXNlZCBicm93c2VyCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlc3VsdC5icm93c2VyID0gJ1Vuc3VwcG9ydGVkIHdlYmtpdC1iYXNlZCBicm93c2VyICcgKwogICAgICAgICAgICAgICd3aXRoIEdVTSBzdXBwb3J0IGJ1dCBubyBXZWJSVEMgc3VwcG9ydC4nOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CiAgICAgIH0KCiAgICAvLyBFZGdlLgogICAgfSBlbHNlIGlmIChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzICYmCiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvRWRnZVwvKFxkKykuKFxkKykkLykpIHsKICAgICAgcmVzdWx0LmJyb3dzZXIgPSAnZWRnZSc7CiAgICAgIHJlc3VsdC52ZXJzaW9uID0gdGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LAogICAgICAgICAgL0VkZ2VcLyhcZCspLihcZCspJC8sIDIpOwoKICAgIC8vIERlZmF1bHQgZmFsbHRocm91Z2g6IG5vdCBzdXBwb3J0ZWQuCiAgICB9IGVsc2UgewogICAgICByZXN1bHQuYnJvd3NlciA9ICdOb3QgYSBzdXBwb3J0ZWQgYnJvd3Nlci4nOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQoKICAgIHJldHVybiByZXN1bHQ7CiAgfSwKCiAgLy8gc2hpbUNyZWF0ZU9iamVjdFVSTCBtdXN0IGJlIGNhbGxlZCBiZWZvcmUgc2hpbVNvdXJjZU9iamVjdCB0byBhdm9pZCBsb29wLgoKICBzaGltQ3JlYXRlT2JqZWN0VVJMOiBmdW5jdGlvbigpIHsKICAgIGlmICghKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnICYmIHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50ICYmCiAgICAgICAgICAnc3JjT2JqZWN0JyBpbiB3aW5kb3cuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUpKSB7CiAgICAgIC8vIE9ubHkgc2hpbSBDcmVhdGVPYmplY3RVUkwgdXNpbmcgc3JjT2JqZWN0IGlmIHNyY09iamVjdCBleGlzdHMuCiAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICB9CgogICAgdmFyIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwuYmluZChVUkwpOwogICAgdmFyIG5hdGl2ZVJldm9rZU9iamVjdFVSTCA9IFVSTC5yZXZva2VPYmplY3RVUkwuYmluZChVUkwpOwogICAgdmFyIHN0cmVhbXMgPSBuZXcgTWFwKCksIG5ld0lkID0gMDsKCiAgICBVUkwuY3JlYXRlT2JqZWN0VVJMID0gZnVuY3Rpb24oc3RyZWFtKSB7CiAgICAgIGlmICgnZ2V0VHJhY2tzJyBpbiBzdHJlYW0pIHsKICAgICAgICB2YXIgdXJsID0gJ3BvbHlibG9iOicgKyAoKytuZXdJZCk7CiAgICAgICAgc3RyZWFtcy5zZXQodXJsLCBzdHJlYW0pOwogICAgICAgIGNvbnNvbGUubG9nKCdVUkwuY3JlYXRlT2JqZWN0VVJMKHN0cmVhbSkgaXMgZGVwcmVjYXRlZCEgJyArCiAgICAgICAgICAgICAgICAgICAgJ1VzZSBlbGVtLnNyY09iamVjdCA9IHN0cmVhbSBpbnN0ZWFkIScpOwogICAgICAgIHJldHVybiB1cmw7CiAgICAgIH0KICAgICAgcmV0dXJuIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTChzdHJlYW0pOwogICAgfTsKICAgIFVSTC5yZXZva2VPYmplY3RVUkwgPSBmdW5jdGlvbih1cmwpIHsKICAgICAgbmF0aXZlUmV2b2tlT2JqZWN0VVJMKHVybCk7CiAgICAgIHN0cmVhbXMuZGVsZXRlKHVybCk7CiAgICB9OwoKICAgIHZhciBkc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcmMnKTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUsICdzcmMnLCB7CiAgICAgIGdldDogZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIGRzYy5nZXQuYXBwbHkodGhpcyk7CiAgICAgIH0sCiAgICAgIHNldDogZnVuY3Rpb24odXJsKSB7CiAgICAgICAgdGhpcy5zcmNPYmplY3QgPSBzdHJlYW1zLmdldCh1cmwpIHx8IG51bGw7CiAgICAgICAgcmV0dXJuIGRzYy5zZXQuYXBwbHkodGhpcywgW3VybF0pOwogICAgICB9CiAgICB9KTsKICB9Cn07CgovLyBFeHBvcnQuCm1vZHVsZS5leHBvcnRzID0gewogIGxvZzogdXRpbHMubG9nLAogIGRpc2FibGVMb2c6IHV0aWxzLmRpc2FibGVMb2csCiAgYnJvd3NlckRldGFpbHM6IHV0aWxzLmRldGVjdEJyb3dzZXIoKSwKICBleHRyYWN0VmVyc2lvbjogdXRpbHMuZXh0cmFjdFZlcnNpb24sCiAgc2hpbUNyZWF0ZU9iamVjdFVSTDogdXRpbHMuc2hpbUNyZWF0ZU9iamVjdFVSTAp9OwoKfSx7fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsgLyoqDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiovCgpyZXF1aXJlKCd3ZWJydGMtYWRhcHRlcicpOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgovKioNCiAgVGhlIENvbm5lY3Rpb25Db250cm9sbGVyIGhhcyBhIGdlbmVyaWMgZGVzaWduIHNvIHRoYXQgaXQgY2FuIGJlIHVzZWQgaW4gYm90aCBzdHVicy4NCiAgSXQgbWFuYWdlcyBhIHNpbmdsZSBEYXRhQ2hhbm5lbCwgaXQgaXMgbm90IHJlcXVlc3RpbmcgYWNjZXNzIHRvIG1lZGlhIGlucHV0LCBpLmUuDQogIGRvZXMgbm90IGhhdmUgYXVkaW8vdmlkZW8gc3RyZWFtcy4NCioqLwp2YXIgQ29ubmVjdGlvbkNvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQ29ubmVjdGlvbkNvbnRyb2xsZXIobXlVcmwsIHN5bmNoZXIsIGNvbmZpZ3VyYXRpb24sIGNhbGxlcikgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbm5lY3Rpb25Db250cm9sbGVyKTsKCiAgICBpZiAoIW15VXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBvd24gdXJsIChteVVybCkgaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7CiAgICBpZiAoIXN5bmNoZXIpIHRocm93IG5ldyBFcnJvcignVGhlIHN5bmNoZXIgaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7CiAgICBpZiAoIWNvbmZpZ3VyYXRpb24pIHRocm93IG5ldyBFcnJvcignVGhlIGNvbmZpZ3VyYXRpb24gaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7CgogICAgdGhpcy5fZG9tYWluID0gdGhpcy5fZGl2aWRlVVJMKG15VXJsKVsiZG9tYWluIl07CiAgICB0aGlzLl9vYmplY3REZXNjVVJMID0gJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicgKyB0aGlzLl9kb21haW4gKyAnLy53ZWxsLWtub3duL2RhdGFzY2hlbWEvQ29ubmVjdGlvbic7CgogICAgdGhpcy5fbXlVcmwgPSBteVVybDsKICAgIHRoaXMuX3N5bmNoZXIgPSBzeW5jaGVyOwogICAgdGhpcy5fY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247CiAgICB0aGlzLl9jYWxsZXIgPSBjYWxsZXI7CiAgICB0aGlzLl9kYXRhT2JqZWN0T2JzZXJ2ZXI7CiAgICB0aGlzLl9kYXRhT2JqZWN0UmVwb3J0ZXI7CiAgICB0aGlzLl9wZWVyVXJsOwogICAgdGhpcy5fZGF0YUNoYW5uZWw7CiAgICB0aGlzLl9vblN0YXR1c1VwZGF0ZTsKCiAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbiA9IHRoaXMuX2NyZWF0ZVBlZXJDb25uZWN0aW9uKCk7CiAgfQoKICAvL2NyZWF0ZSBhIHBlZXIgY29ubmVjdGlvbiB3aXRoIGl0cyBldmVudCBoYW5kbGVycwoKCiAgX2NyZWF0ZUNsYXNzKENvbm5lY3Rpb25Db250cm9sbGVyLCBbewogICAga2V5OiAnX2NyZWF0ZVBlZXJDb25uZWN0aW9uJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlUGVlckNvbm5lY3Rpb24oKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgcGMgPSB0aGlzLl9wZWVyQ29ubmVjdGlvbjsKICAgICAgaWYgKCFwYykgewogICAgICAgIHBjID0gbmV3IFJUQ1BlZXJDb25uZWN0aW9uKHRoaXMuX2NvbmZpZ3VyYXRpb24pOwogICAgICAgIGNvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogY3JlYXRlZCBQZWVyQ29ubmVjdGlvbiIpOwoKICAgICAgICAvLyBhZGQgaGFuZGxlciBmb3IgZGF0YWNoYW5uZWwgY3JlYXRpb24gZnJvbSBwZWVyIHNpZGUKICAgICAgICBwYy5vbmRhdGFjaGFubmVsID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICBjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IG9uZGF0YWNoYW5uZWwgLT4gcmVtb3RlIHNpZGUgaGFzIGNyZWF0ZWQgYSBkYXRhY2hhbm5lbCIpOwogICAgICAgICAgX3RoaXMuX2RhdGFDaGFubmVsID0gZXZlbnQuY2hhbm5lbDsKICAgICAgICAgIF90aGlzLl9hZGREYXRhQ2hhbm5lbExpc3RlbmVycygpOwogICAgICAgIH07CgogICAgICAgIC8vIGV2ZW50IGhhbmRsZXIgZm9yIGxvY2FsIGljZSBjYW5kaWRhdGVzCiAgICAgICAgcGMub25pY2VjYW5kaWRhdGUgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgY29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiBpY2VjYW5kaWRhdGVldmVudCBvY2N1cmVkOiAiLCBlKTsKICAgICAgICAgIGlmICghZS5jYW5kaWRhdGUpIHJldHVybjsKICAgICAgICAgIHZhciBpY2VjYW5kaWRhdGUgPSB7CiAgICAgICAgICAgIHR5cGU6ICdjYW5kaWRhdGUnLAogICAgICAgICAgICBjYW5kaWRhdGU6IGUuY2FuZGlkYXRlLmNhbmRpZGF0ZSwKICAgICAgICAgICAgc2RwTWlkOiBlLmNhbmRpZGF0ZS5zZHBNaWQsCiAgICAgICAgICAgIHNkcE1MaW5lSW5kZXg6IGUuY2FuZGlkYXRlLnNkcE1MaW5lSW5kZXgKICAgICAgICAgIH07CiAgICAgICAgICAvLyBzZW5kIGNhbmRpZGF0ZSB0byByZW1vdGUgcGVlciBieSBwdXNoaW5nIGl0IHRvIHRoZSByZXBvcnRlciBvYmplY3QKICAgICAgICAgIF90aGlzLl9kYXRhT2JqZWN0UmVwb3J0ZXIuZGF0YS5pY2VDYW5kaWRhdGVzLnB1c2goaWNlY2FuZGlkYXRlKTsKICAgICAgICB9OwogICAgICB9CiAgICAgIHJldHVybiBwYzsKICAgIH0KCiAgICAvKioNCiAgICBSZWFjdCB0byB0aGUgZ2l2ZW4gaW52aXRhdGlvbiBldmVudCBieSBzdWJzY3JpYmluZyB0byB0aGUgcHJvdmlkZWQgaW52aXRhdGlvbkV2ZW50LnVybC4NCiAgICAqKi8KCiAgfSwgewogICAga2V5OiAnb2JzZXJ2ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gb2JzZXJ2ZShpbnZpdGF0aW9uRXZlbnQpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB0aGlzLl9wZWVyVXJsID0gaW52aXRhdGlvbkV2ZW50LmZyb207CgogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgICBfdGhpczIuX3N5bmNoZXIuc3Vic2NyaWJlKF90aGlzMi5fb2JqZWN0RGVzY1VSTCwgaW52aXRhdGlvbkV2ZW50LnVybCkudGhlbihmdW5jdGlvbiAoZGF0YU9iamVjdE9ic2VydmVyKSB7CiAgICAgICAgICBjb25zb2xlLmluZm8oJytbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBnb3QgRGF0YSBPYmplY3QgT2JzZXJ2ZXInLCBkYXRhT2JqZWN0T2JzZXJ2ZXIpOwogICAgICAgICAgX3RoaXMyLl9zZXR1cE9ic2VydmVyKGRhdGFPYmplY3RPYnNlcnZlcik7CiAgICAgICAgICByZXNvbHZlKCk7CiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgY29uc29sZS5lcnJvcihyZWFzb24pOwogICAgICAgICAgcmVqZWN0KCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQoKICAgIC8qKg0KICAgIENyZWF0ZXMgYSBzeW5jaGVyIG9iamVjdCBhbmQgaW52aXRlIHRoZSBnaXZlbiBwZWVyVXJsIHRvIHN1YnNjcmliZSBmb3IgaXQuDQogICAgQWxzbyBjcmVhdGVzIHRoZSBsb2NhbCBvZmZlciwgcGVyZm9ybXMgc2V0TG9jYWxEZXNjcmlwdGlvbiBhbmQgcHVibGlzaGVzIHRoZSBvZmZlciB2aWEgdGhlIHJlcG9ydGVyIG9iamVjdC4NCiAgICAqKi8KCiAgfSwgewogICAga2V5OiAncmVwb3J0JywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXBvcnQocGVlclVybCwgb3duUnVudGltZVVybCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIGlmICghdGhpcy5fcGVlclVybCkgdGhpcy5fcGVlclVybCA9IHBlZXJVcmw7CiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgogICAgICAgIC8vICBpZiB3ZSBhcmUgdGhlIGNhbGxlciAoaS5lLiBubyByZXBvcnRlciBvYmplY3QgcHJlc2VudCB5ZXQsIGluaXRhbGl6ZSB0aGUgY3JlYXRpb24gb2YgdGhlIERhdGFDaGFubmVsKQogICAgICAgIGlmIChfdGhpczMuX2NhbGxlcikgewogICAgICAgICAgY29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiB3ZSBhcmUgaW4gY2FsbGVyIHJvbGUgLS0+IGNyZWF0ZURhdGFDaGFubmVsIC4uLiIpOwogICAgICAgICAgX3RoaXMzLl9kYXRhQ2hhbm5lbCA9IF90aGlzMy5fcGVlckNvbm5lY3Rpb24uY3JlYXRlRGF0YUNoYW5uZWwoIlAyUENoYW5uZWwiLCB7IHJlbGlhYmxlOiBmYWxzZSB9KTsKICAgICAgICAgIGNvbnNvbGUubG9nKCJQMlA6IGRhdGFjaGFubmVsIG9iamVjdCIsIF90aGlzMy5fZGF0YUNoYW5uZWwpOwogICAgICAgICAgX3RoaXMzLl9hZGREYXRhQ2hhbm5lbExpc3RlbmVycygpOwogICAgICAgIH0KCiAgICAgICAgLy8gaW5pdGlhbCBkYXRhIGZvciByZXBvcnRlciBzeW5jIG9iamVjdAogICAgICAgIHZhciBkYXRhT2JqZWN0ID0gewogICAgICAgICAgbmFtZTogIlAyUENvbm5lY3Rpb24iLAogICAgICAgICAgc3RhdHVzOiAiIiwKICAgICAgICAgIG93bmVyOiBfdGhpczMuX215VXJsLAogICAgICAgICAgcnVudGltZVVSTDogb3duUnVudGltZVVybCwgLy8gcHV0IHRoZSBvd24gcnVudGltZVVSTCB0byB0aGUgZGF0YU9iamVjdCAoYXMgZGlzY3Vzc2VkIHdpdGggUGF1bG8pCiAgICAgICAgICBjb25uZWN0aW9uRGVzY3JpcHRpb246IHt9LAogICAgICAgICAgaWNlQ2FuZGlkYXRlczogW10KICAgICAgICB9OwogICAgICAgIC8vIGVuc3VyZSB0aGlzIHRoZSBvYmpSZXBvcnRlciBvYmplY3QgaXMgY3JlYXRlZCBiZWZvcmUgd2UgY3JlYXRlIHRoZSBvZmZlcgogICAgICAgIF90aGlzMy5fc3luY2hlci5jcmVhdGUoX3RoaXMzLl9vYmplY3REZXNjVVJMLCBbX3RoaXMzLl9wZWVyVXJsXSwgZGF0YU9iamVjdCkudGhlbihmdW5jdGlvbiAob2JqUmVwb3J0ZXIpIHsKICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gQ3JlYXRlZCBXZWJSVEMgT2JqZWN0IFJlcG9ydGVyJywgb2JqUmVwb3J0ZXIpOwoKICAgICAgICAgIF90aGlzMy5fZGF0YU9iamVjdFJlcG9ydGVyID0gb2JqUmVwb3J0ZXI7CiAgICAgICAgICBfdGhpczMuX2RhdGFPYmplY3RSZXBvcnRlci5vblN1YnNjcmlwdGlvbihmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgZXZlbnQuYWNjZXB0KCk7IC8vIGFsbCBzdWJzY3JpcHRpb24gcmVxdWVzdGVkIGFyZSBhY2NlcHRlZAogICAgICAgICAgfSk7CgogICAgICAgICAgdmFyIGNvbnN0cmFpbnRzID0gewogICAgICAgICAgICBvZmZlclRvUmVjZWl2ZUF1ZGlvOiBmYWxzZSwKICAgICAgICAgICAgb2ZmZXJUb1JlY2VpdmVWaWRlbzogZmFsc2UKICAgICAgICAgIH07CiAgICAgICAgICAvLyBlaXRoZXIgaW52b2tlIGNyZWF0ZU9mZmVyIG9yIGNyZWF0ZUFuc3dlciwgZGVwZW5kaW5nIG9uIHRoZSByb2xlcwogICAgICAgICAgdmFyIHNkcFByb21pc2UgPSBfdGhpczMuX2NhbGxlciA/IF90aGlzMy5fcGVlckNvbm5lY3Rpb24uY3JlYXRlT2ZmZXIoY29uc3RyYWludHMpIDogX3RoaXMzLl9wZWVyQ29ubmVjdGlvbi5jcmVhdGVBbnN3ZXIoKTsKICAgICAgICAgIHNkcFByb21pc2UudGhlbihmdW5jdGlvbiAoc2RwKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBTRFAgY3JlYXRlZCIsIHNkcCk7CiAgICAgICAgICAgIF90aGlzMy5fcGVlckNvbm5lY3Rpb24uc2V0TG9jYWxEZXNjcmlwdGlvbihuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHNkcCksIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIGxvY2FsRGVzY3JpcHRpb24gc2V0IHN1Y2Nlc3NmdWxseScpOwogICAgICAgICAgICAgIF90aGlzMy5fZGF0YU9iamVjdFJlcG9ydGVyLmRhdGEuY29ubmVjdGlvbkRlc2NyaXB0aW9uID0gc2RwOwogICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICByZWplY3QoInNldHRpbmcgb2YgbG9jYWxEZXNjcmlwdGlvbiBmYWlsZWQ6ICIsIGUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgY29uc29sZS5lcnJvcihyZWFzb24pOwogICAgICAgICAgICByZWplY3QocmVhc29uKTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdvbk1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVzc2FnZShjYWxsYmFjaykgewogICAgICAvLyBhZGQgdGhlIG1lc3NhZ2UgY2FsbGJhY2sKICAgICAgdGhpcy5fb25EYXRhQ2hhbm5lbE1lc3NhZ2UgPSBjYWxsYmFjazsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdvblN0YXR1c1VwZGF0ZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25TdGF0dXNVcGRhdGUoY2FsbGJhY2spIHsKICAgICAgLy8gYWRkIGEgY29ubmVjdGlvbiBzdGF0dXMgdXBkYXRlIGNhbGxiYWNrCiAgICAgIHRoaXMuX29uU3RhdHVzVXBkYXRlID0gY2FsbGJhY2s7CiAgICB9CiAgfSwgewogICAga2V5OiAnc2VuZE1lc3NhZ2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmRNZXNzYWdlKG0pIHsKICAgICAgLy8gdG9kbzogb25seSBzZW5kIGlmIGRhdGEgY2hhbm5lbGQgaXMgY29ubmVjdGVkCiAgICAgIGNvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSAtLT4gb3V0Z29pbmcgbXNnOiAiLCBtKTsKICAgICAgdGhpcy5fZGF0YUNoYW5uZWwuc2VuZChtKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICdjbGVhbnVwJywKICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhbnVwKCkgewogICAgICBkZWxldGUgdGhpcy5fZGF0YU9iamVjdFJlcG9ydGVyOwogICAgICBkZWxldGUgdGhpcy5fZGF0YU9iamVjdE9ic2VydmVyOwogICAgICBpZiAodGhpcy5fZGF0YUNoYW5uZWwpIHRoaXMuX2RhdGFDaGFubmVsLmNsb3NlKCk7CiAgICAgIGlmICh0aGlzLl9wZWVyQ29ubmVjdGlvbikgdGhpcy5fcGVlckNvbm5lY3Rpb24uY2xvc2UoKTsKICAgICAgdGhpcy5fZGF0YUNoYW5uZWwgPSBudWxsOwogICAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbiA9IG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2FkZERhdGFDaGFubmVsTGlzdGVuZXJzJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWRkRGF0YUNoYW5uZWxMaXN0ZW5lcnMoKSB7CiAgICAgIHZhciBfdGhpczQgPSB0aGlzOwoKICAgICAgdGhpcy5fZGF0YUNoYW5uZWwub25vcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNC5fb25EYXRhQ2hhbm5lbE9wZW4oKTsKICAgICAgfTsKICAgICAgdGhpcy5fZGF0YUNoYW5uZWwub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgX3RoaXM0Ll9vbkRhdGFDaGFubmVsRXJyb3IoZSk7CiAgICAgIH07CiAgICAgIHRoaXMuX2RhdGFDaGFubmVsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChtKSB7CiAgICAgICAgY29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIDwtLSBpbmNvbWluZyBtc2c6ICIsIG0pOwogICAgICAgIGlmIChfdGhpczQuX29uRGF0YUNoYW5uZWxNZXNzYWdlKSBfdGhpczQuX29uRGF0YUNoYW5uZWxNZXNzYWdlKG0pOwogICAgICB9OwogICAgICB0aGlzLl9kYXRhQ2hhbm5lbC5vbmNsb3NlID0gZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNC5fb25EYXRhQ2hhbm5lbENsb3NlKCk7CiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAnX3NldHVwT2JzZXJ2ZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXR1cE9ic2VydmVyKGRhdGFPYmplY3RPYnNlcnZlcikgewogICAgICB2YXIgX3RoaXM1ID0gdGhpczsKCiAgICAgIHRoaXMuX2RhdGFPYmplY3RPYnNlcnZlciA9IGRhdGFPYmplY3RPYnNlcnZlcjsKCiAgICAgIHZhciBwZWVyRGF0YSA9IHRoaXMuX2RhdGFPYmplY3RPYnNlcnZlci5kYXRhOwogICAgICBjb25zb2xlLmluZm8oIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiBfc2V0dXBPYnNlcnZlciBQZWVyIERhdGE6IiwgcGVlckRhdGEpOwoKICAgICAgaWYgKHBlZXJEYXRhLmhhc093blByb3BlcnR5KCdjb25uZWN0aW9uRGVzY3JpcHRpb24nKSkgewogICAgICAgIHRoaXMuX3Byb2Nlc3NQZWVySW5mb3JtYXRpb24ocGVlckRhdGEuY29ubmVjdGlvbkRlc2NyaXB0aW9uKTsKICAgICAgfQoKICAgICAgaWYgKHBlZXJEYXRhLmhhc093blByb3BlcnR5KCdpY2VDYW5kaWRhdGVzJykpIHsKICAgICAgICBwZWVyRGF0YS5pY2VDYW5kaWRhdGVzLmZvckVhY2goZnVuY3Rpb24gKGljZSkgewogICAgICAgICAgY29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiBoYW5kbGVPYnNlcnZlck9iamVjdCBmb3IgaWNlIiwgaWNlKTsKICAgICAgICAgIF90aGlzNS5fcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbihpY2UpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICAvLyBzZXR1cCBsaXN0ZW5lciBmb3IgZnV0dXJlIGNoYW5nZXMgb24gdGhlIG9ic2VydmVkIGRhdGEgb2JqZWN0CiAgICAgIGRhdGFPYmplY3RPYnNlcnZlci5vbkNoYW5nZSgnKicsIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgIGNvbnNvbGUuZGVidWcoJ1tQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiBPYnNlcnZlciBvbiBjaGFuZ2UgbWVzc2FnZTogJywgZXZlbnQpOwogICAgICAgIC8vIHdlIG5lZWQgdG8gcHJvY2VzcyB0aGUgYW5zd2VyIGZyb20gZXZlbnQuZGF0YSBhbmQgdGhlIGNhbmRpZGF0ZXMgd2hpY2ggbWlnaHQgdHJpY2tsZQogICAgICAgIC8vIGZyb20gZXZlbnQuZGF0YVswXQogICAgICAgIGlmIChldmVudC5kYXRhWzBdKSB7CiAgICAgICAgICAvLyBbMF0gdGhpcyBkb2VzIHRoZSB0cmljayB3aGVuIGljZSBjYW5kaWRhdGVzIGFyZSB0cmlja2xpbmcgOykKICAgICAgICAgIGNvbnNvbGUubG9nKCc+PmV2ZW50LmRhdGFbMF0nLCBldmVudC5kYXRhWzBdKTsKICAgICAgICAgIF90aGlzNS5fcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbihldmVudC5kYXRhWzBdKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS5sb2coJ1tQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiA+PmV2ZW50JywgZXZlbnQpOwogICAgICAgICAgX3RoaXM1Ll9wcm9jZXNzUGVlckluZm9ybWF0aW9uKGV2ZW50LmRhdGEpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3Byb2Nlc3NQZWVySW5mb3JtYXRpb24nLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzUGVlckluZm9ybWF0aW9uKGRhdGEpIHsKICAgICAgY29uc29sZS5pbmZvKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbjogIiwgSlNPTi5zdHJpbmdpZnkoZGF0YSkpOwogICAgICBpZiAoIXRoaXMuX3BlZXJDb25uZWN0aW9uKSB7CiAgICAgICAgY29uc29sZS5pbmZvKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbjogbm8gUGVlckNvbm5lY3Rpb24gZXhpc3RpbmcgLS0+IG1heWJlIGluIGRpc2Nvbm5lY3RpbmcgcHJvY2Vzcy4gLS0+IGlnbm9yaW5nIHRoaXMgdXBkYXRlIik7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoZGF0YS50eXBlID09PSAnb2ZmZXInIHx8IGRhdGEudHlwZSA9PT0gJ2Fuc3dlcicpIHsKICAgICAgICBjb25zb2xlLmluZm8oJ1tQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiBQcm9jZXNzIENvbm5lY3Rpb24gRGVzY3JpcHRpb246ICcsIGRhdGEpOwogICAgICAgIHRoaXMuX3BlZXJDb25uZWN0aW9uLnNldFJlbW90ZURlc2NyaXB0aW9uKG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oZGF0YSkpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgY29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiByZW1vdGUgc3VjY2VzcyIpOwogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICBjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IHJlbW90ZSBlcnJvcjogIiwgZSk7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmIChkYXRhLmNhbmRpZGF0ZSkgewogICAgICAgIGNvbnNvbGUuaW5mbygnUHJvY2VzcyBJY2UgQ2FuZGlkYXRlOiAnLCBkYXRhKTsKICAgICAgICB0aGlzLl9wZWVyQ29ubmVjdGlvbi5hZGRJY2VDYW5kaWRhdGUobmV3IFJUQ0ljZUNhbmRpZGF0ZSh7CiAgICAgICAgICBjYW5kaWRhdGU6IGRhdGEuY2FuZGlkYXRlCiAgICAgICAgfSkpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX29uRGF0YUNoYW5uZWxPcGVuJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25EYXRhQ2hhbm5lbE9wZW4oKSB7CiAgICAgIGNvbnNvbGUubG9nKCdbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBEYXRhQ2hhbm5lbCBvcGVuZWQnKTsKICAgICAgaWYgKHRoaXMuX29uU3RhdHVzVXBkYXRlKSB0aGlzLl9vblN0YXR1c1VwZGF0ZSgibGl2ZSIpOwogICAgfQogIH0sIHsKICAgIGtleTogJ19vbkRhdGFDaGFubmVsRXJyb3InLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRhdGFDaGFubmVsRXJyb3IoZSkgewogICAgICBjb25zb2xlLmxvZygnW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gRGF0YUNoYW5uZWwgZXJyb3I6ICcsIGUpOwogICAgICBpZiAodGhpcy5fb25TdGF0dXNVcGRhdGUpIHRoaXMuX29uU3RhdHVzVXBkYXRlKCJkaXNjb25uZWN0ZWQiLCAiIiArIGUpOwogICAgfQogIH0sIHsKICAgIGtleTogJ19vbkRhdGFDaGFubmVsQ2xvc2UnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRhdGFDaGFubmVsQ2xvc2UoKSB7CiAgICAgIGNvbnNvbGUubG9nKCdbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBEYXRhQ2hhbm5lbCBjbG9zZWQ6ICcpOwogICAgICBpZiAodGhpcy5fb25TdGF0dXNVcGRhdGUpIHRoaXMuX29uU3RhdHVzVXBkYXRlKCJkaXNjb25uZWN0ZWQiLCAiY2xvc2VkIik7CiAgICB9CgogICAgLyoqDQogICAgICogRGl2aWRlIGFuIHVybCBpbiB0eXBlLCBkb21haW4gYW5kIGlkZW50aXR5DQogICAgICogQHBhcmFtICB7VVJMLlVSTH0gdXJsIC0gdXJsIGFkZHJlc3MNCiAgICAgKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMDQogICAgICovCgogIH0sIHsKICAgIGtleTogJ19kaXZpZGVVUkwnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kaXZpZGVVUkwodXJsKSB7CgogICAgICAvLyBsZXQgcmUgPSAvKFthLXpBLVotXSopPzpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fVwuW2Etel17Miw2fVxiKSooXC9bXC9cZFx3XC4tXSopKig/OltcP10pKiguKykqL2dpOwogICAgICB2YXIgcmUgPSAvKFthLXpBLVotXSopOlwvXC8oPzpcLik/KFstYS16QS1aMC05QDolLl9cK34jPV17MiwyNTZ9KShbLWEtekEtWjAtOUA6JS5fXCt+Iz1cL10qKS9naTsKICAgICAgdmFyIHN1YnN0ID0gJyQxLCQyLCQzJzsKICAgICAgdmFyIHBhcnRzID0gdXJsLnJlcGxhY2UocmUsIHN1YnN0KS5zcGxpdCgnLCcpOwoKICAgICAgLy8gSWYgdGhlIHVybCBoYXMgbm8gcHJvdG9jb2wsIHRoZSBkZWZhdWx0IHByb3RvY29sIHNldCBpcyBodHRwcwogICAgICBpZiAocGFydHNbMF0gPT09IHVybCkgewogICAgICAgIHBhcnRzWzBdID0gJ2h0dHBzJzsKICAgICAgICBwYXJ0c1sxXSA9IHVybDsKICAgICAgfQoKICAgICAgdmFyIHJlc3VsdCA9IHsKICAgICAgICB0eXBlOiBwYXJ0c1swXSwKICAgICAgICBkb21haW46IHBhcnRzWzFdLAogICAgICAgIGlkZW50aXR5OiBwYXJ0c1syXQogICAgICB9OwoKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH0KICB9XSk7CgogIHJldHVybiBDb25uZWN0aW9uQ29udHJvbGxlcjsKfSgpOwoKZXhwb3J0cy5kZWZhdWx0ID0gQ29ubmVjdGlvbkNvbnRyb2xsZXI7Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7IndlYnJ0Yy1hZGFwdGVyIjozfV0sMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpewondXNlIHN0cmljdCc7CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsKLyoqDQoqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRA0KKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wNCiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYNCiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBDQoqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcNCiogQ29weXJpZ2h0IDIwMTYgQXBpemVlDQoqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElODQoqDQoqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOw0KKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuDQoqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdA0KKg0KKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMA0KKg0KKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlDQoqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsDQoqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLg0KKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kDQoqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLg0KKiovCgovLyBUT0RPOiBpbnRlZ3JhdGUgdGhlIHN0YXR1cyBldmVudGluZwoKZXhwb3J0cy5kZWZhdWx0ID0gYWN0aXZhdGU7Cgp2YXIgX1N5bmNoZXIgPSByZXF1aXJlKCdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1N5bmNoZXInKTsKCnZhciBfQ29ubmVjdGlvbkNvbnRyb2xsZXIgPSByZXF1aXJlKCcuL0Nvbm5lY3Rpb25Db250cm9sbGVyJyk7Cgp2YXIgX0Nvbm5lY3Rpb25Db250cm9sbGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Nvbm5lY3Rpb25Db250cm9sbGVyKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCi8qKg0KICogUHJvdG9TdHViIEludGVyZmFjZQ0KICovCnZhciBQMlBIYW5kbGVyU3R1YiA9IGZ1bmN0aW9uICgpIHsKCiAgLyoqDQogICAqIEluaXRpYWxpc2UgdGhlIHByb3RvY29sIHN0dWIgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgaXRzIGFsbG9jYXRlZA0KICAgKiBjb21wb25lbnQgcnVudGltZSB1cmwsIHRoZSBydW50aW1lIEJVUyBwb3N0TWVzc2FnZSBmdW5jdGlvbiB0byBiZSBpbnZva2VkDQogICAqIG9uIG1lc3NhZ2VzIHJlY2VpdmVkIGJ5IHRoZSBwcm90b2NvbCBzdHViIGFuZCByZXF1aXJlZCBjb25maWd1cmF0aW9uIHJldHJpZXZlZCBmcm9tIHByb3RvY29sU3R1YiBkZXNjcmlwdG9yLg0KICAgKiBAcGFyYW0gIHtVUkwucnVudGltZVByb3RvU3R1YlVSTH0gICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkwNCiAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uDQogICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvbg0KICAgKi8KICBmdW5jdGlvbiBQMlBIYW5kbGVyU3R1YihydW50aW1lUHJvdG9TdHViVVJMLCBtaW5pQnVzLCBjb25maWd1cmF0aW9uKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQMlBIYW5kbGVyU3R1Yik7CgogICAgaWYgKCFydW50aW1lUHJvdG9TdHViVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBydW50aW1lUHJvdG9TdHViVVJMIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyJyk7CiAgICBpZiAoIW1pbmlCdXMpIHRocm93IG5ldyBFcnJvcignVGhlIGJ1cyBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlcicpOwogICAgaWYgKCFjb25maWd1cmF0aW9uKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBjb25maWd1cmF0aW9uIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyJyk7CgogICAgdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7CiAgICB0aGlzLl9ydW50aW1lVVJMID0gY29uZmlndXJhdGlvbi5ydW50aW1lVVJMOwogICAgdGhpcy5fY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb247CiAgICB0aGlzLl9idXMgPSBtaW5pQnVzOwogICAgdGhpcy5fYnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykgewoKICAgICAgX3RoaXMuX3NlbmRDaGFubmVsTXNnKG1zZyk7CiAgICB9KTsKCiAgICBjb25zb2xlLmxvZygnK1tQMlBIYW5kbGVyU3R1Yl0gZGVwbG95ZWQgJywgcnVudGltZVByb3RvU3R1YlVSTCk7CiAgICB0aGlzLl9zZW5kU3RhdHVzKCJkZXBsb3llZCIpOwoKICAgIHRoaXMuX2Nvbm5lY3Rpb25Db250cm9sbGVycyA9IHt9OwoKICAgIHRoaXMuX3N5bmNoZXIgPSBuZXcgX1N5bmNoZXIuU3luY2hlcihydW50aW1lUHJvdG9TdHViVVJMLCBtaW5pQnVzLCBjb25maWd1cmF0aW9uKTsKICAgIHRoaXMuX3N5bmNoZXIub25Ob3RpZmljYXRpb24oZnVuY3Rpb24gKGV2ZW50KSB7CgogICAgICBjb25zb2xlLmxvZygnK1tQMlBIYW5kbGVyU3R1Yl0gT24gU3luY2hlciBOb3RpZmljYXRpb246ICcsIGV2ZW50KTsKICAgICAgZXZlbnQuYWNrKDIwMCk7CgogICAgICBzd2l0Y2ggKGV2ZW50LnR5cGUpIHsKCiAgICAgICAgY2FzZSAnY3JlYXRlJzoKICAgICAgICAgIC8vIGFzIGRpc2N1c3NlZCB3aXRoIFBhdWxvLCB3ZSBleHBlY3QgdGhlICJyZW1vdGVSdW50aW1lVVJMIiBhcyBmaWVsZCAicnVudGltZVVSTCIgaW4gdGhlIGluaXRpYWwgZGF0YU9iamVjdAogICAgICAgICAgLy8gZW1pdCB0aGUgImNyZWF0ZSIgZXZlbnQgYXMgcmVxdWVzdGVkIGluIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2Rldi1wcm90b3N0dWJzL2lzc3Vlcy81CiAgICAgICAgICBfdGhpcy5fc2VuZFN0YXR1cygiY3JlYXRlIiwgdW5kZWZpbmVkLCBldmVudC5ydW50aW1lVVJMKTsKCiAgICAgICAgICBfdGhpcy5fY3JlYXRlQ29ubmVjdGlvbkNvbnRyb2xsZXIoZXZlbnQpLnRoZW4oZnVuY3Rpb24gKGNvbm5lY3Rpb25Db250cm9sbGVyKSB7CiAgICAgICAgICAgIF90aGlzLl9jb25uZWN0aW9uQ29udHJvbGxlcnNbZXZlbnQuZnJvbV0gPSBjb25uZWN0aW9uQ29udHJvbGxlcjsKICAgICAgICAgICAgY29ubmVjdGlvbkNvbnRyb2xsZXIub25TdGF0dXNVcGRhdGUoZnVuY3Rpb24gKHN0YXR1cywgcmVhc29uKSB7CiAgICAgICAgICAgICAgX3RoaXMuX3NlbmRTdGF0dXMoc3RhdHVzLCByZWFzb24pOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgY29ubmVjdGlvbkNvbnRyb2xsZXIub25NZXNzYWdlKGZ1bmN0aW9uIChtKSB7CiAgICAgICAgICAgICAgX3RoaXMuX2RlbGl2ZXIobSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAnZGVsZXRlJzoKICAgICAgICAgIC8vIFRPRE86IHF1ZXN0aW9uIGNvZGUgaW4gQ29ubmVjdG9yIC0tPiB0aGVyZSBpdCBkZWxldGVzIGFsbCBjb250cm9sbGVycyAtLT4gd2h5PwogICAgICAgICAgY29uc29sZS5sb2coIitbUDJQSGFuZGxlclN0dWJdIGRlbGV0aW5nIGNvbm5lY3Rpb24gaGFuZGxlciBmb3IgIiArIGV2ZW50LmZyb20pOwogICAgICAgICAgdmFyIGNvbm5lY3Rpb25Db250cm9sbGVyID0gX3RoaXMuX2Nvbm5lY3Rpb25Db250cm9sbGVyc1tldmVudC5mcm9tXTsKCiAgICAgICAgICBpZiAoY29ubmVjdGlvbkNvbnRyb2xsZXIpIHsKICAgICAgICAgICAgY29ubmVjdGlvbkNvbnRyb2xsZXIuY2xlYW51cCgpOwogICAgICAgICAgICBkZWxldGUgX3RoaXMuX2Nvbm5lY3Rpb25Db250cm9sbGVyc1tldmVudC5mcm9tXTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICB9CiAgICB9KTsKICB9CgogIC8qKg0KICAgKiBUbyBkaXNjb25uZWN0IHRoZSBwcm90b2NvbCBzdHViLg0KICAgKi8KCgogIF9jcmVhdGVDbGFzcyhQMlBIYW5kbGVyU3R1YiwgW3sKICAgIGtleTogJ2Rpc2Nvbm5lY3QnLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgLy8gY2xlYW51cCBBTEwgY29ubmVjdGlvbkNvbnRyb2xsZXJzCiAgICAgIE9iamVjdC5rZXlzKHRoaXMuX2Nvbm5lY3Rpb25Db250cm9sbGVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgX3RoaXMyLl9jb250cm9sbGVyc1trZXldLmNsZWFudXAoKTs7CiAgICAgICAgZGVsZXRlIF90aGlzMi5fY29udHJvbGxlcnNba2V5XTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX2NyZWF0ZUNvbm5lY3Rpb25Db250cm9sbGVyJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfY3JlYXRlQ29ubmVjdGlvbkNvbnRyb2xsZXIoaW52aXRhdGlvbkV2ZW50KSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICB2YXIgY29ubmVjdGlvbkNvbnRyb2xsZXIgPSBuZXcgX0Nvbm5lY3Rpb25Db250cm9sbGVyMi5kZWZhdWx0KF90aGlzMy5fcnVudGltZVByb3RvU3R1YlVSTCwgX3RoaXMzLl9zeW5jaGVyLCBfdGhpczMuX2NvbmZpZ3VyYXRpb24sIGZhbHNlKTsKICAgICAgICBjb25uZWN0aW9uQ29udHJvbGxlci5vYnNlcnZlKGludml0YXRpb25FdmVudCkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBjcmVhdGUgdGhlIHJlcG9ydGVyIGF1dG9tYXRpY2FsbHkKICAgICAgICAgIGNvbm5lY3Rpb25Db250cm9sbGVyLnJlcG9ydChpbnZpdGF0aW9uRXZlbnQuZnJvbSwgX3RoaXMzLl9ydW50aW1lVVJMKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmVzb2x2ZShjb25uZWN0aW9uQ29udHJvbGxlcik7CiAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3NlbmRDaGFubmVsTXNnJywKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZENoYW5uZWxNc2cobXNnKSB7CiAgICAgIGlmICh0aGlzLl9maWx0ZXIobXNnKSkgewogICAgICAgIC8vIFRPRE86IHZlcmlmeTogaXMgdGhpcyBzZWxlY3Rpb24gY29ycmVjdD8KICAgICAgICB2YXIgY29ubmVjdGlvbkNvbnRyb2xsZXIgPSB0aGlzLl9jb25uZWN0aW9uQ29udHJvbGxlcnNbbXNnLnRvXTsKICAgICAgICBpZiAoY29ubmVjdGlvbkNvbnRyb2xsZXIpIGNvbm5lY3Rpb25Db250cm9sbGVyLnNlbmRNZXNzYWdlKEpTT04uc3RyaW5naWZ5KG1zZykpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAnX3NlbmRTdGF0dXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24sIHJlbW90ZVJ1bnRpbWVVUkwpIHsKICAgICAgdmFyIG1zZyA9IHsKICAgICAgICB0eXBlOiAndXBkYXRlJywKICAgICAgICBmcm9tOiB0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMLAogICAgICAgIHRvOiB0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLAogICAgICAgIGJvZHk6IHsKICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgIH0KICAgICAgfTsKICAgICAgaWYgKHJlbW90ZVJ1bnRpbWVVUkwpIG1zZy5ib2R5LnJlc291cmNlID0gcmVtb3RlUnVudGltZVVSTDsKCiAgICAgIGlmIChyZWFzb24pIHsKICAgICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uOwogICAgICB9CiAgICAgIHRoaXMuX2J1cy5wb3N0TWVzc2FnZShtc2cpOwogICAgfQoKICAgIC8qKg0KICAgICAqIEZpbHRlciBtZXRob2QgdGhhdCBzaG91bGQgYmUgdXNlZCBmb3IgZXZlcnkgbWVzc2FnZXMgaW4gZGlyZWN0aW9uOiBQcm90b3N0dWIgLT4gTWVzc2FnZU5vZGUNCiAgICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgT3JpZ2luYWwgbWVzc2FnZSBmcm9tIHRoZSBNZXNzYWdlQnVzDQogICAgICogQHJldHVybiB7Ym9vbGVhbn0gdHJ1ZSBpZiBpdCdzIHRvIGJlIGRlbGl2ZXIgaW4gdGhlIE1lc3NhZ2VOb2RlDQogICAgICovCgogIH0sIHsKICAgIGtleTogJ19maWx0ZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9maWx0ZXIobXNnKSB7CiAgICAgIC8vIHRvZG86IG9ubHkgdHJ5IHRvIHNlbmQgd2hlbiBjb25uZWN0ZWQgKGxpdmUgc3RhdHVzKQoKICAgICAgaWYgKG1zZy5ib2R5ICYmIG1zZy5ib2R5LnZpYSA9PT0gdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCkgcmV0dXJuIGZhbHNlOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KCiAgICAvKioNCiAgICAgKiBNZXRob2QgdGhhdCBzaG91bGQgYmUgdXNlZCB0byBkZWxpdmVyIHRoZSBtZXNzYWdlIGluIGRpcmVjdGlvbjogUHJvdG9zdHViIC0+IE1lc3NhZ2VCdXMgKGNvcmUpDQogICAgICogQHBhcmFtICB7TWVzc2FnZX0gbXNnIE9yaWdpbmFsIG1lc3NhZ2UgZnJvbSB0aGUgTWVzc2FnZU5vZGUNCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAnX2RlbGl2ZXInLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxpdmVyKG1zZykgewogICAgICBpZiAoIW1zZy5ib2R5KSBtc2cuYm9keSA9IHt9OwoKICAgICAgbXNnLmJvZHkudmlhID0gdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTDsKICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZyk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUDJQSGFuZGxlclN0dWI7Cn0oKTsKCmZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHsKICByZXR1cm4gewogICAgbmFtZTogJ1AyUEhhbmRsZXJTdHViJywKICAgIGluc3RhbmNlOiBuZXcgUDJQSGFuZGxlclN0dWIodXJsLCBidXMsIGNvbmZpZykKICB9Owp9Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7Ii4vQ29ubmVjdGlvbkNvbnRyb2xsZXIiOjEyLCJzZXJ2aWNlLWZyYW1ld29yay9kaXN0L1N5bmNoZXIiOjJ9XX0se30sWzEzXSkoMTMpCn0pOw==",
      "sourceCodeClassname": "P2PHandlerProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "4-e375e3a3-4fc6-ba99-f624-3c4b8623d4aa2",
    "version": 0.7,
    "description": "Description of P2PHandlerProtoStub",
    "language": "Javascript",
    "type": "ProtoStubs",
    "objectName": "P2PHandlerProtoStub",
    "configuration": {
      "iceServers": [
        {
          "urls": "stun:stun.voiparound.com"
        },
        {
          "urls": "stun:stun.voipbuster.com"
        },
        {
          "urls": "stun:stun.voipstunt.com"
        },
        {
          "urls": "stun:stun.voxgratia.org"
        },
        {
          "urls": "stun:stun.ekiga.net"
        },
        {
          "urls": "stun:stun.schlund.de"
        },
        {
          "urls": "stun:stun.iptel.org"
        },
        {
          "urls": "stun:stun.l.google.com:19302"
        },
        {
          "urls": "stun:stun1.l.google.com:19302"
        },
        {
          "urls": "stun:stun.ideasip.com"
        },
        {
          "urls": "stun:stun4.l.google.com:19302"
        },
        {
          "urls": "stun:stun2.l.google.com:19302"
        },
        {
          "urls": "stun:stun3.l.google.com:19302"
        },
        {
          "urls": "turn:192.158.29.39:3478?transport=tcp",
          "credential": "JZEOEt2V3Qb0y27GRntt2u2PAYA=",
          "username": "28224511:1379330808"
        },
        {
          "urls": "turn:192.158.29.39:3478?transport=udp",
          "credential": "JZEOEt2V3Qb0y27GRntt2u2PAYA=",
          "username": "28224511:1379330808"
        },
        {
          "urls": "turn:numb.viagenie.ca",
          "credential": "muazkh",
          "username": "webrtc@live.com"
        }
      ]
    },
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "constraints": "",
    "interworking": false,
    "dataObjects": []
  },
  "P2PRequesterProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "P2PRequesterProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "4-e375e3a3-4fc6-ba99-f624-3c4b8623d4aa3",
    "version": 0.7,
    "description": "Description of P2PRequesterProtoStub",
    "language": "Javascript",
    "type": "ProtoStubs",
    "objectName": "P2PRequesterProtoStub",
    "configuration": {
      "iceServers": [
        {
          "urls": "stun:stun.voiparound.com"
        },
        {
          "urls": "stun:stun.voipbuster.com"
        },
        {
          "urls": "stun:stun.voipstunt.com"
        },
        {
          "urls": "stun:stun.voxgratia.org"
        },
        {
          "urls": "stun:stun.ekiga.net"
        },
        {
          "urls": "stun:stun.schlund.de"
        },
        {
          "urls": "stun:stun.iptel.org"
        },
        {
          "urls": "stun:stun.l.google.com:19302"
        },
        {
          "urls": "stun:stun1.l.google.com:19302"
        },
        {
          "urls": "stun:stun.ideasip.com"
        },
        {
          "urls": "stun:stun4.l.google.com:19302"
        },
        {
          "urls": "stun:stun2.l.google.com:19302"
        },
        {
          "urls": "stun:stun3.l.google.com:19302"
        },
        {
          "urls": "turn:192.158.29.39:3478?transport=tcp",
          "credential": "JZEOEt2V3Qb0y27GRntt2u2PAYA=",
          "username": "28224511:1379330808"
        },
        {
          "urls": "turn:192.158.29.39:3478?transport=udp",
          "credential": "JZEOEt2V3Qb0y27GRntt2u2PAYA=",
          "username": "28224511:1379330808"
        },
        {
          "urls": "turn:numb.viagenie.ca",
          "credential": "muazkh",
          "username": "webrtc@live.com"
        }
      ]
    },
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "constraints": "",
    "interworking": false,
    "dataObjects": []
  },
  "slack.slack.com": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHRoaXMsIGZ1bmN0aW9uKCkgewpyZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewoKLyoqKioqKi8gCQkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKLyoqKioqKi8gCQlpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7CgovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlleHBvcnRzOiB7fSwKLyoqKioqKi8gCQkJaWQ6IG1vZHVsZUlkLAovKioqKioqLyAJCQlsb2FkZWQ6IGZhbHNlCi8qKioqKiovIAkJfTsKCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7CgovKioqKioqLyAJCS8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWQKLyoqKioqKi8gCQltb2R1bGUubG9hZGVkID0gdHJ1ZTsKCi8qKioqKiovIAkJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKLyoqKioqKi8gCQlyZXR1cm4gbW9kdWxlLmV4cG9ydHM7Ci8qKioqKiovIAl9CgoKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwoKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwoKLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCXJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApOwovKioqKioqLyB9KQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAoWwovKiAwICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgl2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsKCglleHBvcnRzLmRlZmF1bHQgPSBhY3RpdmF0ZTsKCgl2YXIgX3NsYWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTsKCgl2YXIgX3NsYWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NsYWNrKTsKCgl2YXIgX1N5bmNoZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3OCk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCgl2YXIgU2xhY2tQcm90b1N0dWIgPSBmdW5jdGlvbiAoKSB7CgkgIGZ1bmN0aW9uIFNsYWNrUHJvdG9TdHViKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7CgkgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNsYWNrUHJvdG9TdHViKTsKCgkgICAgaWYgKCFydW50aW1lUHJvdG9TdHViVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBydW50aW1lUHJvdG9TdHViVVJMIGlzIGEgbmVlZGVkIHBhcmFtZXRlcicpOwoJICAgIGlmICghYnVzKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBidXMgaXMgYSBuZWVkZWQgcGFyYW1ldGVyJyk7CgkgICAgaWYgKCFjb25maWcpIHRocm93IG5ldyBFcnJvcignVGhlIGNvbmZpZyBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTsKCgkgICAgY29uc29sZS5sb2coJ09OIFBST1RPU1RVQjogQ29uc3RydWN0b3IgTG9hZGVkJyk7CgoJICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgIHRoaXMuX3N1YnNjcmliZWRMaXN0ID0gW107CgkgICAgdGhpcy5fdXNlcnNMaXN0ID0gW107CgkgICAgdGhpcy5fZ3JvdXBzTGlzdCA9IFtdOwoJICAgIHRoaXMuX2NoYW5uZWxzTGlzdCA9IFtdOwoJICAgIHRoaXMuX2ltc0xpc3QgPSBbXTsKCSAgICB0aGlzLl9vYnNlcnZlcjsKCSAgICB0aGlzLl9jaGFubmVsSUQgPSAnJzsKCSAgICB0aGlzLl9pZCA9IDA7CgkgICAgdGhpcy5fY29udGludW91c09wZW4gPSB0cnVlOwoJICAgIHRoaXMuX3Rva2VuID0gJyc7CgoJICAgIHRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMOwoJICAgIHRoaXMuX2J1cyA9IGJ1czsKCSAgICB0aGlzLl9jb25maWcgPSBjb25maWc7CgoJICAgIHRoaXMuX3J1bnRpbWVTZXNzaW9uVVJMID0gY29uZmlnLnJ1bnRpbWVVUkw7CgkgICAgdGhpcy5fcmVPcGVuID0gZmFsc2U7CgkgICAgdGhpcy5fc2xhY2sgPSBfc2xhY2syLmRlZmF1bHQ7CgkgICAgY29uc29sZS5sb2coJ09OIFBST1RPU1RVQiAtICBpbnN0YXRpYXRlIHN5bmNoZXIgd2l0aCB1cmwnLCBydW50aW1lUHJvdG9TdHViVVJMKTsKCSAgICB0aGlzLl9zeW5jaGVyID0gbmV3IF9TeW5jaGVyLlN5bmNoZXIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpOwoKCSAgICB0aGlzLl9zeW5jaGVyLm9uTm90aWZpY2F0aW9uKGZ1bmN0aW9uIChldmVudCkgewoJICAgICAgY29uc29sZS5sb2coJ09OIFBST1RPU1RVQiAtIE9uIFN5bmNoZXIgTm90aWZpY2F0aW9uOiAnLCBldmVudCk7CgkgICAgfSk7CgoJICAgIGJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHsKCSAgICAgIGNvbnNvbGUubG9nKCdPTiBQUk9UT1NUVUIgLT4nLCBtc2cpOwoJICAgICAgaWYgKG1zZy5ib2R5Lmhhc093blByb3BlcnR5KCdpZGVudGl0eScpICYmIG1zZy5ib2R5LmlkZW50aXR5Lmhhc093blByb3BlcnR5KCdhY2Nlc3NfdG9rZW4nKSAmJiBtc2cuYm9keS5pZGVudGl0eS5hY2Nlc3NfdG9rZW4pIHsKCSAgICAgICAgKGZ1bmN0aW9uICgpIHsKCgkgICAgICAgICAgdmFyIHRva2VuID0gbXNnLmJvZHkuaWRlbnRpdHkuYWNjZXNzX3Rva2VuOwoJICAgICAgICAgIF90aGlzLl9vcGVuKHRva2VuLCBmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgICBpZiAoX3RoaXMuX2ZpbHRlcihtc2cpKSB7CgkgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPTiBQUk9UT1NUVUIgLSBBRlRFUiBGSUxURVItPicsIG1zZyk7CgkgICAgICAgICAgICAgIHZhciBzY2hlbWFVcmwgPSBtc2cuYm9keS5zY2hlbWE7CgkgICAgICAgICAgICAgIGlmIChzY2hlbWFVcmwgJiYgbXNnLmJvZHkudmFsdWUubmFtZSkgewoKCSAgICAgICAgICAgICAgICB2YXIgc2NoZW1hU3BsaXR0ZWQgPSBzY2hlbWFVcmwuc3BsaXQoJy8nKTsKCgkgICAgICAgICAgICAgICAgaWYgKHNjaGVtYVNwbGl0dGVkW3NjaGVtYVNwbGl0dGVkLmxlbmd0aCAtIDFdID09PSAnQ29tbXVuaWNhdGlvbicpIHsKCSAgICAgICAgICAgICAgICAgIF90aGlzLl9zdWJzY3JpYmUoc2NoZW1hVXJsLCBtc2cuZnJvbSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CgkgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPTiBQUk9UT1NUVUIgLSBJUyBJVCBzdWJzY3JpYmVkLT4nLCByZXN1bHQpOwoJICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7CgkgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3Rva2VuID0gdG9rZW47CgkgICAgICAgICAgICAgICAgICAgICAgaWYgKG1zZy5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLmlkKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5faWQgPSBtc2cuYm9keS5pZGVudGl0eS51c2VyUHJvZmlsZS5pZDsKCSAgICAgICAgICAgICAgICAgICAgICB9CgoJICAgICAgICAgICAgICAgICAgICAgIHZhciBVUkxVc2Vyc0xpc3QgPSAnaHR0cHM6Ly9zbGFjay5jb20vYXBpL3VzZXJzLmxpc3Q/dG9rZW49JyArIF90aGlzLl90b2tlbjsKCSAgICAgICAgICAgICAgICAgICAgICB2YXIgVVJMR3JvdXBzTGlzdCA9ICdodHRwczovL3NsYWNrLmNvbS9hcGkvZ3JvdXBzLmxpc3Q/dG9rZW49JyArIF90aGlzLl90b2tlbjsKCSAgICAgICAgICAgICAgICAgICAgICB2YXIgVVJMQ2hhbm5lbHNMaXN0ID0gJ2h0dHBzOi8vc2xhY2suY29tL2FwaS9jaGFubmVscy5saXN0P3Rva2VuPScgKyBfdGhpcy5fdG9rZW47CgkgICAgICAgICAgICAgICAgICAgICAgdmFyIFVSTEltc0xpc3QgPSAnaHR0cHM6Ly9zbGFjay5jb20vYXBpL2ltLmxpc3Q/dG9rZW49JyArIF90aGlzLl90b2tlbjsKCgkgICAgICAgICAgICAgICAgICAgICAgdmFyIFVzZXJzTGlzdFByb21pc2UgPSBfdGhpcy5fc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBVUkxVc2Vyc0xpc3QpOwoJICAgICAgICAgICAgICAgICAgICAgIHZhciBHcm91cHNMaXN0UHJvbWlzZSA9IF90aGlzLl9zZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIFVSTEdyb3Vwc0xpc3QpOwoJICAgICAgICAgICAgICAgICAgICAgIHZhciBDaGFubmVsc0xpc3RQcm9taXNlID0gX3RoaXMuX3NlbmRIVFRQUmVxdWVzdCgnR0VUJywgVVJMQ2hhbm5lbHNMaXN0KTsKCSAgICAgICAgICAgICAgICAgICAgICB2YXIgSW1zTGlzdFByb21pc2UgPSBfdGhpcy5fc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBVUkxJbXNMaXN0KTsKCgkgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwoW1VzZXJzTGlzdFByb21pc2UsIEdyb3Vwc0xpc3RQcm9taXNlLCBDaGFubmVsc0xpc3RQcm9taXNlLCBJbXNMaXN0UHJvbWlzZV0pLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewoJICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3VzZXJzTGlzdCA9IHJlc3VsdFswXS5tZW1iZXJzOwoJICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2dyb3Vwc0xpc3QgPSByZXN1bHRbMV0uZ3JvdXBzOwoJICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NoYW5uZWxzTGlzdCA9IHJlc3VsdFsyXS5jaGFubmVsczsKCSAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9pbXNMaXN0ID0gcmVzdWx0WzNdLmltczsKCgkgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbm5lbEFscmVhZHlVUCA9IF90aGlzLl9jaGFubmVsc0xpc3QuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5uYW1lID09PSBtc2cuYm9keS52YWx1ZS5uYW1lOwoJICAgICAgICAgICAgICAgICAgICAgICAgfSlbMF07CgoJICAgICAgICAgICAgICAgICAgICAgICAgLy9nZXQgdXNlcklEIHRvIGludml0ZQoKCSAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0b1NwbGl0dGVkID0gbXNnLnRvLnNwbGl0KCc6Ly8nKVsxXTsKCSAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VyID0gdG9TcGxpdHRlZC5zcGxpdCgnQCcpWzBdOwoJICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJJRCA9IF90aGlzLl91c2Vyc0xpc3QuZmlsdGVyKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5uYW1lID09PSB1c2VyOwoJICAgICAgICAgICAgICAgICAgICAgICAgfSlbMF0uaWQ7CgoJICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgY2hhbm5lbCBleGlzdCwgaW52aXRlIHVzZXIsIGVsc2UgY2hhbm5lbCBuZWVkIHRvIGJlIGNyZWF0ZWQgYW5kIHRoZW4gaW52aXRlIHVzZXIKCSAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFubmVsQWxyZWFkeVVQKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdPTiBQUk9UT1NUVUIgLSBjaGFubmVsIGV4aXN0JywgY2hhbm5lbEFscmVhZHlVUCk7CgoJICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbm5lbE1lbWJlcnMgPSBfdGhpcy5fY2hhbm5lbHNMaXN0LmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGtleSkgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5uYW1lID09PSBtc2cuYm9keS52YWx1ZS5uYW1lOwoJICAgICAgICAgICAgICAgICAgICAgICAgICB9KVswXS5tZW1iZXJzOwoJICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWxyZWFkeU9uQ2hhbm5lbCA9IGZhbHNlOwoKCSAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbm5lbE1lbWJlcnMuZm9yRWFjaChmdW5jdGlvbiAocykgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzID09PSB1c2VySUQpIGFscmVhZHlPbkNoYW5uZWwgPSB0cnVlOwoJICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ09OIFBST1RPU1RVQiAtIGNoYW5uZWwgbWVtYmVycycsIGNoYW5uZWxNZW1iZXJzLCAnICAgLT4nLCBhbHJlYWR5T25DaGFubmVsKTsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbHJlYWR5T25DaGFubmVsKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvSW52aXRlID0geyB0b2tlbjogdG9rZW4sIGNoYW5uZWw6IGNoYW5uZWxBbHJlYWR5VVAuaWQsIHVzZXI6IHVzZXJJRCB9OwoKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2xhY2suY2hhbm5lbHMuaW52aXRlKHRvSW52aXRlLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyKCdlcnJvcicsIGVycik7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fY2hhbm5lbElEID0gY2hhbm5lbEFscmVhZHlVUC5pZDsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ09OIFBST1RPU1RVQiAtIHVzZXIgaW52aXRlZCB3aXRoIHN1Y2VzcycsIGRhdGEpOwoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9jaGFubmVsSUQgPSBjaGFubmVsQWxyZWFkeVVQLmlkOwoJICAgICAgICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9DcmVhdGUgPSB7IHRva2VuOiB0b2tlbiwgbmFtZTogbXNnLmJvZHkudmFsdWUubmFtZSB9OwoJICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc2xhY2suY2hhbm5lbHMuY3JlYXRlKHRvQ3JlYXRlLCBmdW5jdGlvbiAoZXJyLCBkYXRhKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycikgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnIoJ2Vycm9yJywgZXJyKTsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEub2spIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5uZWxJRCA9IGRhdGEuY2hhbm5lbC5pZDsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2NoYW5uZWxJRCA9IGNoYW5uZWxJRDsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF90b0ludml0ZSA9IHsgdG9rZW46IHRva2VuLCBjaGFubmVsOiBjaGFubmVsSUQsIHVzZXI6IHVzZXJJRCB9OwoKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3NsYWNrLmNoYW5uZWxzLmludml0ZShfdG9JbnZpdGUsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycignZXJyb3InLCBlcnIpOwoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnT04gUFJPVE9TVFVCIC0gdXNlciBpbnZpdGVkIHdpdGggc3VjZXNzJywgZGF0YSk7CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewoJICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnIoZXJyb3IpOwoJICAgICAgICAgICAgICAgICAgICAgIH0pOwoJICAgICAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgICB9CgkgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgIH0KCSAgICAgICAgICB9KTsKCSAgICAgICAgfSkoKTsKCSAgICAgIH0KCSAgICB9KTsKCSAgfQoKCSAgX2NyZWF0ZUNsYXNzKFNsYWNrUHJvdG9TdHViLCBbewoJICAgIGtleTogJ19maWx0ZXInLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlsdGVyKG1zZykgewoJICAgICAgaWYgKG1zZy5ib2R5ICYmIG1zZy5ib2R5LnZpYSA9PT0gdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCkgcmV0dXJuIGZhbHNlOwoJICAgICAgcmV0dXJuIHRydWU7CgkgICAgfQoJICB9LCB7CgkgICAga2V5OiAnX29wZW4nLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfb3Blbih0b2tlbiwgY2FsbGJhY2spIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgaWYgKCFfdGhpcy5fc2Vzc2lvbikgewoJICAgICAgICBjb25zb2xlLmxvZygnT04gUFJPVE9TVFVCIC0gbmV3IFNlc3Npb24gZm9yIHRva2VuOicsIHRva2VuKTsKCSAgICAgICAgX3RoaXMuX3Nlc3Npb24gPSBfdGhpcy5fc2xhY2sucnRtLmNsaWVudCgpOwoKCSAgICAgICAgX3RoaXMuX3Nlc3Npb24ubGlzdGVuKHsgdG9rZW46IHRva2VuIH0pOwoKCSAgICAgICAgX3RoaXMuX3Nlc3Npb24ubWVzc2FnZShmdW5jdGlvbiAobWVzc2FnZSkgewoJICAgICAgICAgIGNvbnNvbGUubG9nKCdPTiBQUk9UT1NUVUIgLSBuZXcgbWVzc2FnZSBvbiBzZXNzaW9uJywgbWVzc2FnZSk7CgkgICAgICAgICAgaWYgKG1lc3NhZ2UuY2hhbm5lbCkgewoJICAgICAgICAgICAgaWYgKG1lc3NhZ2UuY2hhbm5lbCA9PT0gX3RoaXMuX2NoYW5uZWxJRCAmJiBtZXNzYWdlLnVzZXIgIT0gX3RoaXMuX2lkKSB7CgoJICAgICAgICAgICAgICBfdGhpcy5fb2JzZXJ2ZXIuYWRkQ2hpbGQoJ2NoYXRtZXNzYWdlcycsIHsgbWVzc2FnZTogbWVzc2FnZS50ZXh0IH0pOwoJICAgICAgICAgICAgfQoJICAgICAgICAgIH0KCSAgICAgICAgfSk7CgkgICAgICB9IGVsc2UgewoJICAgICAgICBjb25zb2xlLmxvZygnT04gUFJPVE9TVFVCIC0gc2Vzc2lvbiBhbHJlYWR5IGV4aXN0Jyk7CgkgICAgICB9CgkgICAgICBjYWxsYmFjaygpOwoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ19zdWJzY3JpYmUnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfc3Vic2NyaWJlKHNjaGVtYSwgdXJsRGF0YU9iaikgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKCgkgICAgICAgIF90aGlzLl9zdWJzY3JpYmVkTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChvYmopIHsKCSAgICAgICAgICBpZiAob2JqLnVybERhdGFPYmogPT09IHVybERhdGFPYmogJiYgb2JqLnN1YnNjcmliZWQpIHJlc29sdmUodHJ1ZSk7CgkgICAgICAgIH0pOwoKCSAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHsgdXJsRGF0YU9iajogdXJsRGF0YU9iaiwgc2NoZW1hOiBzY2hlbWEsIHN1YnNjcmliZWQ6IHRydWUgfTsKCgkgICAgICAgIHZhciBvYmplY3REZXNjVVJMID0gc2NoZW1hOwoJICAgICAgICB2YXIgZGF0YU9iamVjdFVybCA9IHVybERhdGFPYmouc3Vic3RyaW5nKDAsIHVybERhdGFPYmoubGFzdEluZGV4T2YoJy8nKSk7CgoJICAgICAgICBjb25zb2xlLmxvZygnT04gUFJPVE9TVFVCIC0gbmV3IHN1YnNjcmlwdGlvbiBmb3Igc2NoZW1hOicsIG9iamVjdERlc2NVUkwsICcgYW5kIGRhdGFPYmplY3Q6JywgZGF0YU9iamVjdFVybCk7CgoJICAgICAgICByZXR1cm4gX3RoaXMuX3N5bmNoZXIuc3Vic2NyaWJlKG9iamVjdERlc2NVUkwsIGRhdGFPYmplY3RVcmwsIGZhbHNlLCBmYWxzZSwgZmFsc2UpLnRoZW4oZnVuY3Rpb24gKG9ic2VydmVyKSB7CgkgICAgICAgICAgX3RoaXMuX29ic2VydmVyID0gb2JzZXJ2ZXI7CgkgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZWRMaXN0LnB1c2goc3Vic2NyaXB0aW9uKTsKCSAgICAgICAgICBjb25zb2xlLmxvZygnT04gUFJPVE9TVFVCIC0gc3Vic2NyaWJlZCcsIGRhdGFPYmplY3RVcmwpOwoJICAgICAgICAgIGNvbnNvbGUubG9nKCdPTiBQUk9UT1NUVUIgLSBPYnNlcnZlcicsIG9ic2VydmVyKTsKCSAgICAgICAgICBvYnNlcnZlci5vbkFkZENoaWxkKGZ1bmN0aW9uIChjaGlsZCkgewoJICAgICAgICAgICAgY29uc29sZS5pbmZvKCdPTiBQUk9UT1NUVUIgLSBPYnNlcnZlciAtIEFkZCBDaGlsZDogJywgY2hpbGQpOwoJICAgICAgICAgICAgaWYgKF90aGlzLl9jaGFubmVsSUQgIT09ICcnICYmIGNoaWxkLnZhbHVlLm1lc3NhZ2UpIHsKCSAgICAgICAgICAgICAgaWYgKGNoaWxkLmhhc093blByb3BlcnR5KCdpZGVudGl0eScpICYmIGNoaWxkLmlkZW50aXR5Lmhhc093blByb3BlcnR5KCd1c2VyUHJvZmlsZScpICYmIGNoaWxkLmlkZW50aXR5LnVzZXJQcm9maWxlLmhhc093blByb3BlcnR5KCd1c2VybmFtZScpICYmIGNoaWxkLmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lKSB7CgkgICAgICAgICAgICAgICAgdmFyIHRleHQgPSAnJyArIGNoaWxkLmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lICsgJzogJyArIGNoaWxkLnZhbHVlLm1lc3NhZ2U7CgkgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB7IGFzX3VzZXI6IHRydWUsIHRva2VuOiBfdGhpcy5fdG9rZW4sIGNoYW5uZWw6IF90aGlzLl9jaGFubmVsSUQsIHRleHQ6IHRleHQgfTsKCSAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndG9rZW4nLCBfdGhpcy5fdG9rZW4sICdjaGFubmVsJywgX3RoaXMuX2NoYW5uZWxJRCwgJ3RleHQnLCBjaGlsZC52YWx1ZS5tZXNzYWdlKTsKCgkgICAgICAgICAgICAgICAgX3RoaXMuX3NsYWNrLmNoYXQucG9zdE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKGVyciwgZGF0YSkgewoJICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2VycicsIGVyciwgJyBkYXRhICcsIGRhdGEpOwoJICAgICAgICAgICAgICAgICAgaWYgKGVycikgdGhyb3cgRXJyb3IoZXJyKTsKCSAgICAgICAgICAgICAgICB9KTsKCSAgICAgICAgICAgICAgfQoJICAgICAgICAgICAgfQoJICAgICAgICAgIH0pOwoKCSAgICAgICAgICBvYnNlcnZlci5vbkNoYW5nZSgnKicsIGZ1bmN0aW9uIChldmVudCkgewoJICAgICAgICAgICAgY29uc29sZS5sb2coJ09OIFBST1RPU1RVQiAtIE9ic2VydmVyIC0gb25DaGFuZ2U6ICcsIGV2ZW50KTsKCSAgICAgICAgICB9KTsKCSAgICAgICAgICByZXNvbHZlKHRydWUpOwoJICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKCSAgICAgICAgICBjb25zb2xlLmxvZygnT04gUFJPVE9TVFVCIC0gT2JzZXJ2ZXIgLSBFUlJPUicsIGVycm9yKTsKCSAgICAgICAgICByZXNvbHZlKGZhbHNlKTsKCSAgICAgICAgfSk7CgkgICAgICB9KTsKCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfc2VuZEhUVFBSZXF1ZXN0JywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX3NlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkgewoKCSAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgkgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCSAgICAgICAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikgewoJICAgICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTsKCSAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7CgkgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBYRG9tYWluUmVxdWVzdC4KCSAgICAgICAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLgoJICAgICAgICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpOwoJICAgICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTsKCSAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAvLyBPdGhlcndpc2UsIENPUlMgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci4KCSAgICAgICAgICB4aHIgPSBudWxsOwoJICAgICAgICB9CgkgICAgICAgIGlmICh4aHIpIHsKCSAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGUpIHsKCSAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkgewoJICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7CgkgICAgICAgICAgICAgICAgdmFyIGluZm8gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpOwoJICAgICAgICAgICAgICAgIHJlc29sdmUoaW5mbyk7CgkgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7CgkgICAgICAgICAgICAgICAgcmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4nKTsKCSAgICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpOwoJICAgICAgICAgICAgICB9CgkgICAgICAgICAgICB9CgkgICAgICAgICAgfTsKCSAgICAgICAgICB4aHIuc2VuZCgpOwoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7CgkgICAgICAgIH0KCSAgICAgIH0pOwoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ2NvbmZpZycsCgkgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CgkgICAgICByZXR1cm4gdGhpcy5fY29uZmlnOwoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ3J1bnRpbWVTZXNzaW9uJywKCSAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKCSAgICAgIHJldHVybiB0aGlzLl9ydW50aW1lU2Vzc2lvblVSTDsKCSAgICB9CgkgIH1dKTsKCgkgIHJldHVybiBTbGFja1Byb3RvU3R1YjsKCX0oKTsKCglmdW5jdGlvbiBhY3RpdmF0ZSh1cmwsIGJ1cywgY29uZmlnKSB7CgkgIHJldHVybiB7CgkgICAgbmFtZTogJ1NsYWNrUHJvdG9TdHViJywKCSAgICBpbnN0YW5jZTogbmV3IFNsYWNrUHJvdG9TdHViKHVybCwgYnVzLCBjb25maWcpCgkgIH07Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfYXBpID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTsKCgl2YXIgX2FwaTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hcGkpOwoKCXZhciBfYXBpMyA9IF9fd2VicGFja19yZXF1aXJlX18oNTIpOwoKCXZhciBfYXBpNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FwaTMpOwoKCXZhciBfYm90cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTU5KTsKCgl2YXIgX2JvdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYm90cyk7CgoJdmFyIF9hdXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1Myk7CgoJdmFyIF9hdXRoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dGgpOwoKCXZhciBfY2hhbm5lbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2MCk7CgoJdmFyIF9jaGFubmVsczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaGFubmVscyk7CgoJdmFyIF9jaGF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjEpOwoKCXZhciBfY2hhdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaGF0KTsKCgl2YXIgX2RuZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTYyKTsKCgl2YXIgX2RuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kbmQpOwoKCXZhciBfZW1vamkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc5KTsKCgl2YXIgX2Vtb2ppMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Vtb2ppKTsKCgl2YXIgX2ZpbGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjMpOwoKCXZhciBfZmlsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmlsZXMpOwoKCXZhciBfZ3JvdXBzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNjQpOwoKCXZhciBfZ3JvdXBzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dyb3Vwcyk7CgoJdmFyIF9pbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTY1KTsKCgl2YXIgX2ltMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ltKTsKCgl2YXIgX21waW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Nik7CgoJdmFyIF9tcGltMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21waW0pOwoKCXZhciBfb2F1dGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2Nyk7CgoJdmFyIF9vYXV0aDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYXV0aCk7CgoJdmFyIF9yZWFjdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2OCk7CgoJdmFyIF9yZWFjdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rpb25zKTsKCgl2YXIgX3JlbWluZGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTY5KTsKCgl2YXIgX3JlbWluZGVyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1pbmRlcnMpOwoKCXZhciBfcGlucyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcwKTsKCgl2YXIgX3BpbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGlucyk7CgoJdmFyIF9ydG0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3MSk7CgoJdmFyIF9ydG0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnRtKTsKCgl2YXIgX3J0bTMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMCk7CgoJdmFyIF9ydG00ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnRtMyk7CgoJdmFyIF9zZWFyY2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3Myk7CgoJdmFyIF9zZWFyY2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2VhcmNoKTsKCgl2YXIgX3N0YXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzQpOwoKCXZhciBfc3RhcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RhcnMpOwoKCXZhciBfdGVhbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTc1KTsKCgl2YXIgX3RlYW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGVhbSk7CgoJdmFyIF91c2VyZ3JvdXBzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzYpOwoKCXZhciBfdXNlcmdyb3VwczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VyZ3JvdXBzKTsKCgl2YXIgX3VzZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNzcpOwoKCXZhciBfdXNlcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlcnMpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJdmFyIGRlc2NyaWJlID0gJ1xuICBzbGFja1xuICAgIGFwaS5jbGllbnQodG9rZW4pXG4gICAgYXBpLnRlc3QocGFyYW1zLCAoZXJyLCBkYXRhKT0+KVxuICAgIGF1dGgudGVzdCh0b2tlbiwgKGVyciwgZGF0YSk9PilcbiAgICBib3RzLmluZm9cbiAgICBjaGFubmVscy5hcmNoaXZlKHt0b2tlbiwgY2hhbm5lbH0sIChlcnIsIGRhdGEpPT4pXG4gICAgY2hhbm5lbHMuY3JlYXRlKHt0b2tlbiwgbmFtZX0sIChlcnIsIGRhdGEpPT4pXG4gICAgY2hhbm5lbHMuaGlzdG9yeSh7dG9rZW4sIGNoYW5uZWx9LCAoZXJyLCBkYXRhKT0+KVxuICAgIGNoYW5uZWxzLmluZm9cbiAgICBjaGFubmVscy5pbnZpdGVcbiAgICBjaGFubmVscy5qb2luXG4gICAgY2hhbm5lbHMua2lja1xuICAgIGNoYW5uZWxzLmxlYXZlXG4gICAgY2hhbm5lbHMubGlzdCh7dG9rZW4sIGV4Y2x1ZGVfYXJjaGl2ZWR9LCAoZXJyLCBkYXRhKT0+KVxuICAgIGNoYW5uZWxzLm1hcmtcbiAgICBjaGFubmVscy5yZW5hbWVcbiAgICBjaGFubmVscy5zZXRQdXJwb3NlXG4gICAgY2hhbm5lbHMuc2V0VG9waWNcbiAgICBjaGFubmVscy51bmFyY2hpdmVcbiAgICBjaGF0LmRlbGV0ZVxuICAgIGNoYXQucG9zdE1lc3NhZ2Uoe3Rva2VuLCB0ZXh0LCBjaGFubmVsfSwgKGVyciwgZGF0YSk9PilcbiAgICBjaGF0LnVwZGF0ZVxuICAgIGVtb2ppLmxpc3RcbiAgICBmaWxlcy5kZWxldGVcbiAgICBmaWxlcy5pbmZvXG4gICAgZmlsZXMubGlzdFxuICAgIGZpbGVzLnVwbG9hZFxuICAgIGdyb3Vwcy5hcmNoaXZlXG4gICAgZ3JvdXBzLmNsb3NlXG4gICAgZ3JvdXBzLmNyZWF0ZVxuICAgIGdyb3Vwcy5jcmVhdGVDaGlsZFxuICAgIGdyb3Vwcy5oaXN0b3J5XG4gICAgZ3JvdXBzLmluZm9cbiAgICBncm91cHMuaW52aXRlXG4gICAgZ3JvdXBzLmtpY2tcbiAgICBncm91cHMubGVhdmVcbiAgICBncm91cHMubGlzdFxuICAgIGdyb3Vwcy5tYXJrXG4gICAgZ3JvdXBzLm9wZW5cbiAgICBncm91cHMucmVuYW1lXG4gICAgZ3JvdXBzLnNldFB1cnBvc2VcbiAgICBncm91cHMuc2V0VG9waWNcbiAgICBncm91cHMudW5hcmNoaXZlXG4gICAgaW0uY2xvc2VcbiAgICBpbS5oaXN0b3J5XG4gICAgaW0ubGlzdFxuICAgIGltLm1hcmtcbiAgICBpbS5vcGVuXG4gICAgbXBpbS5jbG9zZVxuICAgIG1waW0uaGlzdG9yeVxuICAgIG1waW0ubGlzdFxuICAgIG1waW0ubWFya1xuICAgIG1waW0ub3BlblxuICAgIG9hdXRoLmFjY2Vzcyh7Y2xpZW50X2lkLCBjbGllbnRfc2VjcmV0LCBjb2RlfSwgKGVyciwgZGF0YSk9PilcbiAgICBwaW5zLmFkZFxuICAgIHBpbnMubGlzdFxuICAgIHBpbnMucmVtb3ZlXG4gICAgcmVhY3Rpb25zLmFkZFxuICAgIHJlYWN0aW9ucy5nZXRcbiAgICByZWFjdGlvbnMubGlzdFxuICAgIHJlYWN0aW9ucy5yZW1vdmVcbiAgICByZW1pbmRlcnMuYWRkXG4gICAgcmVtaW5kZXJzLmNvbXBsZXRlXG4gICAgcmVtaW5kZXJzLmRlbGV0ZVxuICAgIHJlbWluZGVycy5pbmZvXG4gICAgcmVtaW5kZXJzLmxpc3RcbiAgICBydG0uY2xpZW50KClcbiAgICBydG0uc3RhcnQoe3Rva2VufSwgKGVyciwgZGF0YSk9PilcbiAgICBzZWFyY2guYWxsXG4gICAgc2VhcmNoLmZpbGVzXG4gICAgc2VhcmNoLm1lc3NhZ2VzXG4gICAgc3RhcnMuYWRkXG4gICAgc3RhcnMubGlzdFxuICAgIHN0YXJzLnJlbW92ZVxuICAgIHRlYW0uYWNjY2Vzc0xvZ3NcbiAgICB0ZWFtLmJpbGxhYmxlSW5mb1xuICAgIHRlYW0uaW5mbyh0b2tlbiwgKGVyciwgZGF0YSk9PilcbiAgICB0ZWFtLmludGVncmF0aW9uTG9nc1xuICAgIHRlYW0ucHJvZmlsZS5nZXRcbiAgICB1c2VyZ3JvdXBzLmNyZWF0ZVxuICAgIHVzZXJncm91cHMuZGlzYWJsZVxuICAgIHVzZXJncm91cHMuZW5hYmxlXG4gICAgdXNlcmdyb3Vwcy5saXN0XG4gICAgdXNlcmdyb3Vwcy51cGRhdGVcbiAgICB1c2VyZ3JvdXBzLnVzZXJzLmxpc3RcbiAgICB1c2VyZ3JvdXBzLnVzZXJzLnVwZGF0ZVxuICAgIHVzZXJzLmdldFByZXNlbmNlXG4gICAgdXNlcnMuaWRlbnRpdHlcbiAgICB1c2Vycy5pbmZvXG4gICAgdXNlcnMubGlzdCh0b2tlbiwgKGVyciwgZGF0YSk9PilcbiAgICB1c2Vycy5zZXRBY3RpdmVcbiAgICB1c2Vycy5zZXRQcmVzZW5jZVxuJzsKCglleHBvcnRzLmRlZmF1bHQgPSB7CgkgIGRlc2NyaWJlOiBkZXNjcmliZSwKCSAgYXBpOiB7IHRlc3Q6IF9hcGkyLmRlZmF1bHQsIGNsaWVudDogX2FwaTQuZGVmYXVsdCB9LAoJICBhdXRoOiB7IHRlc3Q6IF9hdXRoMi5kZWZhdWx0IH0sCgkgIGJvdHM6IF9ib3RzMi5kZWZhdWx0LAoJICBjaGFubmVsczogX2NoYW5uZWxzMi5kZWZhdWx0LAoJICBjaGF0OiBfY2hhdDIuZGVmYXVsdCwKCSAgZG5kOiBfZG5kMi5kZWZhdWx0LAoJICBlbW9qaTogeyBsaXN0OiBfZW1vamkyLmRlZmF1bHQgfSwKCSAgZmlsZXM6IF9maWxlczIuZGVmYXVsdCwKCSAgZ3JvdXBzOiBfZ3JvdXBzMi5kZWZhdWx0LAoJICBpbTogX2ltMi5kZWZhdWx0LAoJICBtcGltOiBfbXBpbTIuZGVmYXVsdCwKCSAgb2F1dGg6IHsgYWNjZXNzOiBfb2F1dGgyLmRlZmF1bHQgfSwKCSAgcmVhY3Rpb25zOiBfcmVhY3Rpb25zMi5kZWZhdWx0LAoJICByZW1pbmRlcnM6IF9yZW1pbmRlcnMyLmRlZmF1bHQsCgkgIHBpbnM6IF9waW5zMi5kZWZhdWx0LAoJICBydG06IHsgY2xpZW50OiBfcnRtMi5kZWZhdWx0LCBzdGFydDogX3J0bTQuZGVmYXVsdCB9LAoJICBzZWFyY2g6IF9zZWFyY2gyLmRlZmF1bHQsCgkgIHN0YXJzOiBfc3RhcnMyLmRlZmF1bHQsCgkgIHRlYW06IF90ZWFtMi5kZWZhdWx0LAoJICB1c2VyZ3JvdXBzOiBfdXNlcmdyb3VwczIuZGVmYXVsdCwKCSAgdXNlcnM6IF91c2VyczIuZGVmYXVsdAoJfTsKCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBhcGl0ZXN0OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBhcGl0ZXN0KHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2FwaS50ZXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAzICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgl2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OwoKCWV4cG9ydHMuZGVmYXVsdCA9IGV4ZWM7CgoJdmFyIF90aW55SnNvbkh0dHAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpOwoKCXZhciBfdGlueUpzb25IdHRwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RpbnlKc29uSHR0cCk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglmdW5jdGlvbiBleGVjKHVybCwgZm9ybSwgY2FsbGJhY2spIHsKCgkgIC8vIHN0cmluZ2lmeSBhbnkgb2JqZWN0cyB1bmRlciBrZXlzIHNpbmNlIGZvcm0gaXMgcG9zdGVkIGFzIGFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZAoJICBPYmplY3Qua2V5cyhmb3JtKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKCSAgICBpZiAoX3R5cGVvZihmb3JtW2tleV0pID09PSAnb2JqZWN0JykgewoJICAgICAgZm9ybVtrZXldID0gSlNPTi5zdHJpbmdpZnkoZm9ybVtrZXldKTsKCSAgICB9CgkgIH0pOwoKCSAgLy8gYWx3YXlzIHBvc3QKCSAgX3RpbnlKc29uSHR0cDIuZGVmYXVsdC5wb3N0KHsKCSAgICB1cmw6ICdodHRwczovL3NsYWNrLmNvbS9hcGkvJyArIHVybCwKCSAgICBoZWFkZXJzOiB7CgkgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcKCSAgICB9LAoJICAgIGRhdGE6IGZvcm0KCSAgfSwgZnVuY3Rpb24gX3JlcyhlcnIsIHJlcykgewoJICAgIC8vIHZhciByYXRlTGltaXQgPSAnWW91IGFyZSBzZW5kaW5nIHRvbyBtYW55IHJlcXVlc3RzLiBQbGVhc2UgcmVsYXguJwoJICAgIGlmIChyZXMpIHJlcyA9IEpTT04ucGFyc2UocmVzKTsKCSAgICBpZiAoZXJyKSB7CgkgICAgICAvLyBpZiByZXF1ZXN0IGZhaWxlZCBidWJibGUgdGhlIGVycm9yCgkgICAgICBjYWxsYmFjayhlcnIpOwoJICAgIH0gZWxzZSBpZiAocmVzLmVycm9yKSB7CgkgICAgICBjYWxsYmFjayhFcnJvcihyZXMuZXJyb3IpKTsKCSAgICB9IGVsc2UgewoJICAgICAgY2FsbGJhY2sobnVsbCwgcmVzKTsKCSAgICB9CgkgIH0pOwoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA0ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBfZ2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KQoJdmFyIF9wb3N0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSkKCgltb2R1bGUuZXhwb3J0cyA9IHsKCSAgZ2V0OiBfZ2V0LAoJICBwb3N0OiBfcG9zdCwKCX0KCgovKioqLyB9LAovKiA1ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBodHRwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KQoJdmFyIGh0dHBzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCkKCXZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKQoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR0VUKG9wdGlvbnMsIGNhbGxiYWNrKSB7CgoJICAvLyByZXF1aXJlIG9wdGlvbnMudXJsIG9yIGZhaWwgbm9pc2lseSAKCSAgaWYgKCFvcHRpb25zLnVybCkgewoJICAgIHRocm93IEVycm9yKCdvcHRpb25zLnVybCByZXF1aXJlZCcpCgkgIH0KCgkgIC8vIHBhcnNlIG91dCB0aGUgb3B0aW9ucyBmcm9tIG9wdGlvbnMudXJsCgkgIHZhciBvcHRzID0gdXJsLnBhcnNlKG9wdGlvbnMudXJsKQoJICB2YXIgbWV0aG9kID0gb3B0cy5wcm90b2NvbCA9PT0gJ2h0dHBzOic/IGh0dHBzLmdldCA6IGh0dHAuZ2V0CgoJICBvcHRzLnJlamVjdFVuYXV0aG9yaXplZCA9IGZhbHNlCgkgIG9wdHMuYWdlbnQgPSBmYWxzZQoJICBvcHRzLmhlYWRlcnMgPSBvcHRpb25zLmhlYWRlcnMgfHwge30KCSAgb3B0cy5oZWFkZXJzWydVc2VyLUFnZW50J10gPSBvcHRzLmhlYWRlcnNbJ1VzZXItQWdlbnQnXSB8fCAndGlueS1odHRwJwoJICBvcHRzLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gb3B0cy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSB8fCAnYXBwbGljYXRpb24vanNvbicKCSAgCgkgIC8vIG1ha2UgYSByZXF1ZXN0CgkgIG1ldGhvZChvcHRzLCBmdW5jdGlvbiBfX3JlcyhyZXMpIHsKCSAgIAoJICAgIHZhciByYXdEYXRhID0gJycKCSAgICB2YXIgc3RhdHVzQ29kZSA9IHJlcy5zdGF0dXNDb2RlCgkgICAgdmFyIGNvbnRlbnRUeXBlID0gcmVzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddCgkgICAgdmFyIGlzSlNPTiA9IGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoJ2FwcGxpY2F0aW9uL2pzb24nKQoKCSAgICBpZiAoc3RhdHVzQ29kZSAhPT0gMjAwKSB7CgkgICAgICBjYWxsYmFjayhFcnJvcignR0VUIGZhaWxlZCB3aXRoOiAnICsgc3RhdHVzQ29kZSkpCgkgICAgICByZXMucmVzdW1lKCkKCSAgICAgIHJldHVybgoJICAgIH0KCSAKCSAgICByZXMuc2V0RW5jb2RpbmcoJ3V0ZjgnKQoJICAgIHJlcy5vbignZGF0YScsIGZ1bmN0aW9uKGNodW5rKSB7cmF3RGF0YSArPSBjaHVua30pCgkgICAgcmVzLm9uKCdlbmQnLCBmdW5jdGlvbih4KSB7CgkgICAgICB0cnkgewoJICAgICAgICB2YXIgcGFyc2VkRGF0YSA9IGlzSlNPTj8gSlNPTi5wYXJzZShyYXdEYXRhKSA6IHJhd0RhdGEKCSAgICAgICAgY2FsbGJhY2sobnVsbCwgcGFyc2VkRGF0YSkKCSAgICAgIH0gCgkgICAgICBjYXRjaCAoZSkgewoJICAgICAgICBjYWxsYmFjayhlLm1lc3NhZ2UpCgkgICAgICB9CgkgICAgfSkKCSAgfSkub24oJ2Vycm9yJywgZnVuY3Rpb24oZSkgeyBjYWxsYmFjayhFcnJvcihlLm1lc3NhZ2UpKSB9ICkKCX0KCgovKioqLyB9LAovKiA2ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHt2YXIgQ2xpZW50UmVxdWVzdCA9IF9fd2VicGFja19yZXF1aXJlX18oNykKCXZhciBleHRlbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM5KQoJdmFyIHN0YXR1c0NvZGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCkKCXZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKQoKCXZhciBodHRwID0gZXhwb3J0cwoKCWh0dHAucmVxdWVzdCA9IGZ1bmN0aW9uIChvcHRzLCBjYikgewoJCWlmICh0eXBlb2Ygb3B0cyA9PT0gJ3N0cmluZycpCgkJCW9wdHMgPSB1cmwucGFyc2Uob3B0cykKCQllbHNlCgkJCW9wdHMgPSBleHRlbmQob3B0cykKCgkJLy8gTm9ybWFsbHksIHRoZSBwYWdlIGlzIGxvYWRlZCBmcm9tIGh0dHAgb3IgaHR0cHMsIHNvIG5vdCBzcGVjaWZ5aW5nIGEgcHJvdG9jb2wKCQkvLyB3aWxsIHJlc3VsdCBpbiBhICh2YWxpZCkgcHJvdG9jb2wtcmVsYXRpdmUgdXJsLiBIb3dldmVyLCB0aGlzIHdvbid0IHdvcmsgaWYKCQkvLyB0aGUgcHJvdG9jb2wgaXMgc29tZXRoaW5nIGVsc2UsIGxpa2UgJ2ZpbGU6JwoJCXZhciBkZWZhdWx0UHJvdG9jb2wgPSBnbG9iYWwubG9jYXRpb24ucHJvdG9jb2wuc2VhcmNoKC9eaHR0cHM/OiQvKSA9PT0gLTEgPyAnaHR0cDonIDogJycKCgkJdmFyIHByb3RvY29sID0gb3B0cy5wcm90b2NvbCB8fCBkZWZhdWx0UHJvdG9jb2wKCQl2YXIgaG9zdCA9IG9wdHMuaG9zdG5hbWUgfHwgb3B0cy5ob3N0CgkJdmFyIHBvcnQgPSBvcHRzLnBvcnQKCQl2YXIgcGF0aCA9IG9wdHMucGF0aCB8fCAnLycKCgkJLy8gTmVjZXNzYXJ5IGZvciBJUHY2IGFkZHJlc3NlcwoJCWlmIChob3N0ICYmIGhvc3QuaW5kZXhPZignOicpICE9PSAtMSkKCQkJaG9zdCA9ICdbJyArIGhvc3QgKyAnXScKCgkJLy8gVGhpcyBtYXkgYmUgYSByZWxhdGl2ZSB1cmwuIFRoZSBicm93c2VyIHNob3VsZCBhbHdheXMgYmUgYWJsZSB0byBpbnRlcnByZXQgaXQgY29ycmVjdGx5LgoJCW9wdHMudXJsID0gKGhvc3QgPyAocHJvdG9jb2wgKyAnLy8nICsgaG9zdCkgOiAnJykgKyAocG9ydCA/ICc6JyArIHBvcnQgOiAnJykgKyBwYXRoCgkJb3B0cy5tZXRob2QgPSAob3B0cy5tZXRob2QgfHwgJ0dFVCcpLnRvVXBwZXJDYXNlKCkKCQlvcHRzLmhlYWRlcnMgPSBvcHRzLmhlYWRlcnMgfHwge30KCgkJLy8gQWxzbyB2YWxpZCBvcHRzLmF1dGgsIG9wdHMubW9kZQoKCQl2YXIgcmVxID0gbmV3IENsaWVudFJlcXVlc3Qob3B0cykKCQlpZiAoY2IpCgkJCXJlcS5vbigncmVzcG9uc2UnLCBjYikKCQlyZXR1cm4gcmVxCgl9CgoJaHR0cC5nZXQgPSBmdW5jdGlvbiBnZXQgKG9wdHMsIGNiKSB7CgkJdmFyIHJlcSA9IGh0dHAucmVxdWVzdChvcHRzLCBjYikKCQlyZXEuZW5kKCkKCQlyZXR1cm4gcmVxCgl9CgoJaHR0cC5BZ2VudCA9IGZ1bmN0aW9uICgpIHt9CglodHRwLkFnZW50LmRlZmF1bHRNYXhTb2NrZXRzID0gNAoKCWh0dHAuU1RBVFVTX0NPREVTID0gc3RhdHVzQ29kZXMKCglodHRwLk1FVEhPRFMgPSBbCgkJJ0NIRUNLT1VUJywKCQknQ09OTkVDVCcsCgkJJ0NPUFknLAoJCSdERUxFVEUnLAoJCSdHRVQnLAoJCSdIRUFEJywKCQknTE9DSycsCgkJJ00tU0VBUkNIJywKCQknTUVSR0UnLAoJCSdNS0FDVElWSVRZJywKCQknTUtDT0wnLAoJCSdNT1ZFJywKCQknTk9USUZZJywKCQknT1BUSU9OUycsCgkJJ1BBVENIJywKCQknUE9TVCcsCgkJJ1BST1BGSU5EJywKCQknUFJPUFBBVENIJywKCQknUFVSR0UnLAoJCSdQVVQnLAoJCSdSRVBPUlQnLAoJCSdTRUFSQ0gnLAoJCSdTVUJTQ1JJQkUnLAoJCSdUUkFDRScsCgkJJ1VOTE9DSycsCgkJJ1VOU1VCU0NSSUJFJwoJXQoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKQoKLyoqKi8gfSwKLyogNyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oQnVmZmVyLCBnbG9iYWwsIHByb2Nlc3MpIHt2YXIgY2FwYWJpbGl0eSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpCgl2YXIgaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KQoJdmFyIHJlc3BvbnNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSkKCXZhciBzdHJlYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KQoJdmFyIHRvQXJyYXlCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM4KQoKCXZhciBJbmNvbWluZ01lc3NhZ2UgPSByZXNwb25zZS5JbmNvbWluZ01lc3NhZ2UKCXZhciByU3RhdGVzID0gcmVzcG9uc2UucmVhZHlTdGF0ZXMKCglmdW5jdGlvbiBkZWNpZGVNb2RlIChwcmVmZXJCaW5hcnksIHVzZUZldGNoKSB7CgkJaWYgKGNhcGFiaWxpdHkuZmV0Y2ggJiYgdXNlRmV0Y2gpIHsKCQkJcmV0dXJuICdmZXRjaCcKCQl9IGVsc2UgaWYgKGNhcGFiaWxpdHkubW96Y2h1bmtlZGFycmF5YnVmZmVyKSB7CgkJCXJldHVybiAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInCgkJfSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1zc3RyZWFtKSB7CgkJCXJldHVybiAnbXMtc3RyZWFtJwoJCX0gZWxzZSBpZiAoY2FwYWJpbGl0eS5hcnJheWJ1ZmZlciAmJiBwcmVmZXJCaW5hcnkpIHsKCQkJcmV0dXJuICdhcnJheWJ1ZmZlcicKCQl9IGVsc2UgaWYgKGNhcGFiaWxpdHkudmJBcnJheSAmJiBwcmVmZXJCaW5hcnkpIHsKCQkJcmV0dXJuICd0ZXh0OnZiYXJyYXknCgkJfSBlbHNlIHsKCQkJcmV0dXJuICd0ZXh0JwoJCX0KCX0KCgl2YXIgQ2xpZW50UmVxdWVzdCA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHsKCQl2YXIgc2VsZiA9IHRoaXMKCQlzdHJlYW0uV3JpdGFibGUuY2FsbChzZWxmKQoKCQlzZWxmLl9vcHRzID0gb3B0cwoJCXNlbGYuX2JvZHkgPSBbXQoJCXNlbGYuX2hlYWRlcnMgPSB7fQoJCWlmIChvcHRzLmF1dGgpCgkJCXNlbGYuc2V0SGVhZGVyKCdBdXRob3JpemF0aW9uJywgJ0Jhc2ljICcgKyBuZXcgQnVmZmVyKG9wdHMuYXV0aCkudG9TdHJpbmcoJ2Jhc2U2NCcpKQoJCU9iamVjdC5rZXlzKG9wdHMuaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewoJCQlzZWxmLnNldEhlYWRlcihuYW1lLCBvcHRzLmhlYWRlcnNbbmFtZV0pCgkJfSkKCgkJdmFyIHByZWZlckJpbmFyeQoJCXZhciB1c2VGZXRjaCA9IHRydWUKCQlpZiAob3B0cy5tb2RlID09PSAnZGlzYWJsZS1mZXRjaCcgfHwgJ3RpbWVvdXQnIGluIG9wdHMpIHsKCQkJLy8gSWYgdGhlIHVzZSBvZiBYSFIgc2hvdWxkIGJlIHByZWZlcnJlZCBhbmQgaW5jbHVkZXMgcHJlc2VydmluZyB0aGUgJ2NvbnRlbnQtdHlwZScgaGVhZGVyLgoJCQkvLyBGb3JjZSBYSFIgdG8gYmUgdXNlZCBzaW5jZSB0aGUgRmV0Y2ggQVBJIGRvZXMgbm90IHlldCBzdXBwb3J0IHRpbWVvdXRzLgoJCQl1c2VGZXRjaCA9IGZhbHNlCgkJCXByZWZlckJpbmFyeSA9IHRydWUKCQl9IGVsc2UgaWYgKG9wdHMubW9kZSA9PT0gJ3ByZWZlci1zdHJlYW1pbmcnKSB7CgkJCS8vIElmIHN0cmVhbWluZyBpcyBhIGhpZ2ggcHJpb3JpdHkgYnV0IGJpbmFyeSBjb21wYXRpYmlsaXR5IGFuZAoJCQkvLyB0aGUgYWNjdXJhY3kgb2YgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlciBhcmVuJ3QKCQkJcHJlZmVyQmluYXJ5ID0gZmFsc2UKCQl9IGVsc2UgaWYgKG9wdHMubW9kZSA9PT0gJ2FsbG93LXdyb25nLWNvbnRlbnQtdHlwZScpIHsKCQkJLy8gSWYgc3RyZWFtaW5nIGlzIG1vcmUgaW1wb3J0YW50IHRoYW4gcHJlc2VydmluZyB0aGUgJ2NvbnRlbnQtdHlwZScgaGVhZGVyCgkJCXByZWZlckJpbmFyeSA9ICFjYXBhYmlsaXR5Lm92ZXJyaWRlTWltZVR5cGUKCQl9IGVsc2UgaWYgKCFvcHRzLm1vZGUgfHwgb3B0cy5tb2RlID09PSAnZGVmYXVsdCcgfHwgb3B0cy5tb2RlID09PSAncHJlZmVyLWZhc3QnKSB7CgkJCS8vIFVzZSBiaW5hcnkgaWYgdGV4dCBzdHJlYW1pbmcgbWF5IGNvcnJ1cHQgZGF0YSBvciB0aGUgY29udGVudC10eXBlIGhlYWRlciwgb3IgZm9yIHNwZWVkCgkJCXByZWZlckJpbmFyeSA9IHRydWUKCQl9IGVsc2UgewoJCQl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIG9wdHMubW9kZScpCgkJfQoJCXNlbGYuX21vZGUgPSBkZWNpZGVNb2RlKHByZWZlckJpbmFyeSwgdXNlRmV0Y2gpCgoJCXNlbGYub24oJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHsKCQkJc2VsZi5fb25GaW5pc2goKQoJCX0pCgl9CgoJaW5oZXJpdHMoQ2xpZW50UmVxdWVzdCwgc3RyZWFtLldyaXRhYmxlKQoKCUNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewoJCXZhciBzZWxmID0gdGhpcwoJCXZhciBsb3dlck5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCkKCQkvLyBUaGlzIGNoZWNrIGlzIG5vdCBuZWNlc3NhcnksIGJ1dCBpdCBwcmV2ZW50cyB3YXJuaW5ncyBmcm9tIGJyb3dzZXJzIGFib3V0IHNldHRpbmcgdW5zYWZlCgkJLy8gaGVhZGVycy4gVG8gYmUgaG9uZXN0IEknbSBub3QgZW50aXJlbHkgc3VyZSBoaWRpbmcgdGhlc2Ugd2FybmluZ3MgaXMgYSBnb29kIHRoaW5nLCBidXQKCQkvLyBodHRwLWJyb3dzZXJpZnkgZGlkIGl0LCBzbyBJIHdpbGwgdG9vLgoJCWlmICh1bnNhZmVIZWFkZXJzLmluZGV4T2YobG93ZXJOYW1lKSAhPT0gLTEpCgkJCXJldHVybgoKCQlzZWxmLl9oZWFkZXJzW2xvd2VyTmFtZV0gPSB7CgkJCW5hbWU6IG5hbWUsCgkJCXZhbHVlOiB2YWx1ZQoJCX0KCX0KCglDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkgewoJCXZhciBzZWxmID0gdGhpcwoJCXJldHVybiBzZWxmLl9oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV0udmFsdWUKCX0KCglDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5yZW1vdmVIZWFkZXIgPSBmdW5jdGlvbiAobmFtZSkgewoJCXZhciBzZWxmID0gdGhpcwoJCWRlbGV0ZSBzZWxmLl9oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV0KCX0KCglDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fb25GaW5pc2ggPSBmdW5jdGlvbiAoKSB7CgkJdmFyIHNlbGYgPSB0aGlzCgoJCWlmIChzZWxmLl9kZXN0cm95ZWQpCgkJCXJldHVybgoJCXZhciBvcHRzID0gc2VsZi5fb3B0cwoKCQl2YXIgaGVhZGVyc09iaiA9IHNlbGYuX2hlYWRlcnMKCQl2YXIgYm9keSA9IG51bGwKCQlpZiAob3B0cy5tZXRob2QgPT09ICdQT1NUJyB8fCBvcHRzLm1ldGhvZCA9PT0gJ1BVVCcgfHwgb3B0cy5tZXRob2QgPT09ICdQQVRDSCcgfHwgb3B0cy5tZXRob2QgPT09ICdNRVJHRScpIHsKCQkJaWYgKGNhcGFiaWxpdHkuYmxvYkNvbnN0cnVjdG9yKSB7CgkJCQlib2R5ID0gbmV3IGdsb2JhbC5CbG9iKHNlbGYuX2JvZHkubWFwKGZ1bmN0aW9uIChidWZmZXIpIHsKCQkJCQlyZXR1cm4gdG9BcnJheUJ1ZmZlcihidWZmZXIpCgkJCQl9KSwgewoJCQkJCXR5cGU6IChoZWFkZXJzT2JqWydjb250ZW50LXR5cGUnXSB8fCB7fSkudmFsdWUgfHwgJycKCQkJCX0pCgkJCX0gZWxzZSB7CgkJCQkvLyBnZXQgdXRmOCBzdHJpbmcKCQkJCWJvZHkgPSBCdWZmZXIuY29uY2F0KHNlbGYuX2JvZHkpLnRvU3RyaW5nKCkKCQkJfQoJCX0KCgkJaWYgKHNlbGYuX21vZGUgPT09ICdmZXRjaCcpIHsKCQkJdmFyIGhlYWRlcnMgPSBPYmplY3Qua2V5cyhoZWFkZXJzT2JqKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHsKCQkJCXJldHVybiBbaGVhZGVyc09ialtuYW1lXS5uYW1lLCBoZWFkZXJzT2JqW25hbWVdLnZhbHVlXQoJCQl9KQoKCQkJZ2xvYmFsLmZldGNoKHNlbGYuX29wdHMudXJsLCB7CgkJCQltZXRob2Q6IHNlbGYuX29wdHMubWV0aG9kLAoJCQkJaGVhZGVyczogaGVhZGVycywKCQkJCWJvZHk6IGJvZHkgfHwgdW5kZWZpbmVkLAoJCQkJbW9kZTogJ2NvcnMnLAoJCQkJY3JlZGVudGlhbHM6IG9wdHMud2l0aENyZWRlbnRpYWxzID8gJ2luY2x1ZGUnIDogJ3NhbWUtb3JpZ2luJwoJCQl9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewoJCQkJc2VsZi5fZmV0Y2hSZXNwb25zZSA9IHJlc3BvbnNlCgkJCQlzZWxmLl9jb25uZWN0KCkKCQkJfSwgZnVuY3Rpb24gKHJlYXNvbikgewoJCQkJc2VsZi5lbWl0KCdlcnJvcicsIHJlYXNvbikKCQkJfSkKCQl9IGVsc2UgewoJCQl2YXIgeGhyID0gc2VsZi5feGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpCgkJCXRyeSB7CgkJCQl4aHIub3BlbihzZWxmLl9vcHRzLm1ldGhvZCwgc2VsZi5fb3B0cy51cmwsIHRydWUpCgkJCX0gY2F0Y2ggKGVycikgewoJCQkJcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7CgkJCQkJc2VsZi5lbWl0KCdlcnJvcicsIGVycikKCQkJCX0pCgkJCQlyZXR1cm4KCQkJfQoKCQkJLy8gQ2FuJ3Qgc2V0IHJlc3BvbnNlVHlwZSBvbiByZWFsbHkgb2xkIGJyb3dzZXJzCgkJCWlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIpCgkJCQl4aHIucmVzcG9uc2VUeXBlID0gc2VsZi5fbW9kZS5zcGxpdCgnOicpWzBdCgoJCQlpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKQoJCQkJeGhyLndpdGhDcmVkZW50aWFscyA9ICEhb3B0cy53aXRoQ3JlZGVudGlhbHMKCgkJCWlmIChzZWxmLl9tb2RlID09PSAndGV4dCcgJiYgJ292ZXJyaWRlTWltZVR5cGUnIGluIHhocikKCQkJCXhoci5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkJykKCgkJCWlmICgndGltZW91dCcgaW4gb3B0cykgewoJCQkJeGhyLnRpbWVvdXQgPSBvcHRzLnRpbWVvdXQKCQkJCXhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7CgkJCQkJc2VsZi5lbWl0KCd0aW1lb3V0JykKCQkJCX0KCQkJfQoKCQkJT2JqZWN0LmtleXMoaGVhZGVyc09iaikuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewoJCQkJeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyc09ialtuYW1lXS5uYW1lLCBoZWFkZXJzT2JqW25hbWVdLnZhbHVlKQoJCQl9KQoKCQkJc2VsZi5fcmVzcG9uc2UgPSBudWxsCgkJCXhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CgkJCQlzd2l0Y2ggKHhoci5yZWFkeVN0YXRlKSB7CgkJCQkJY2FzZSByU3RhdGVzLkxPQURJTkc6CgkJCQkJY2FzZSByU3RhdGVzLkRPTkU6CgkJCQkJCXNlbGYuX29uWEhSUHJvZ3Jlc3MoKQoJCQkJCQlicmVhawoJCQkJfQoJCQl9CgkJCS8vIE5lY2Vzc2FyeSBmb3Igc3RyZWFtaW5nIGluIEZpcmVmb3gsIHNpbmNlIHhoci5yZXNwb25zZSBpcyBPTkxZIGRlZmluZWQKCQkJLy8gaW4gb25wcm9ncmVzcywgbm90IGluIG9ucmVhZHlzdGF0ZWNoYW5nZSB3aXRoIHhoci5yZWFkeVN0YXRlID0gMwoJCQlpZiAoc2VsZi5fbW9kZSA9PT0gJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJykgewoJCQkJeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7CgkJCQkJc2VsZi5fb25YSFJQcm9ncmVzcygpCgkJCQl9CgkJCX0KCgkJCXhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkgewoJCQkJaWYgKHNlbGYuX2Rlc3Ryb3llZCkKCQkJCQlyZXR1cm4KCQkJCXNlbGYuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1hIUiBlcnJvcicpKQoJCQl9CgoJCQl0cnkgewoJCQkJeGhyLnNlbmQoYm9keSkKCQkJfSBjYXRjaCAoZXJyKSB7CgkJCQlwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsKCQkJCQlzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKQoJCQkJfSkKCQkJCXJldHVybgoJCQl9CgkJfQoJfQoKCS8qKgoJICogQ2hlY2tzIGlmIHhoci5zdGF0dXMgaXMgcmVhZGFibGUgYW5kIG5vbi16ZXJvLCBpbmRpY2F0aW5nIG5vIGVycm9yLgoJICogRXZlbiB0aG91Z2ggdGhlIHNwZWMgc2F5cyBpdCBzaG91bGQgYmUgYXZhaWxhYmxlIGluIHJlYWR5U3RhdGUgMywKCSAqIGFjY2Vzc2luZyBpdCB0aHJvd3MgYW4gZXhjZXB0aW9uIGluIElFOAoJICovCglmdW5jdGlvbiBzdGF0dXNWYWxpZCAoeGhyKSB7CgkJdHJ5IHsKCQkJdmFyIHN0YXR1cyA9IHhoci5zdGF0dXMKCQkJcmV0dXJuIChzdGF0dXMgIT09IG51bGwgJiYgc3RhdHVzICE9PSAwKQoJCX0gY2F0Y2ggKGUpIHsKCQkJcmV0dXJuIGZhbHNlCgkJfQoJfQoKCUNsaWVudFJlcXVlc3QucHJvdG90eXBlLl9vblhIUlByb2dyZXNzID0gZnVuY3Rpb24gKCkgewoJCXZhciBzZWxmID0gdGhpcwoKCQlpZiAoIXN0YXR1c1ZhbGlkKHNlbGYuX3hocikgfHwgc2VsZi5fZGVzdHJveWVkKQoJCQlyZXR1cm4KCgkJaWYgKCFzZWxmLl9yZXNwb25zZSkKCQkJc2VsZi5fY29ubmVjdCgpCgoJCXNlbGYuX3Jlc3BvbnNlLl9vblhIUlByb2dyZXNzKCkKCX0KCglDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsKCQl2YXIgc2VsZiA9IHRoaXMKCgkJaWYgKHNlbGYuX2Rlc3Ryb3llZCkKCQkJcmV0dXJuCgoJCXNlbGYuX3Jlc3BvbnNlID0gbmV3IEluY29taW5nTWVzc2FnZShzZWxmLl94aHIsIHNlbGYuX2ZldGNoUmVzcG9uc2UsIHNlbGYuX21vZGUpCgkJc2VsZi5fcmVzcG9uc2Uub24oJ2Vycm9yJywgZnVuY3Rpb24oZXJyKSB7CgkJCXNlbGYuZW1pdCgnZXJyb3InLCBlcnIpCgkJfSkKCgkJc2VsZi5lbWl0KCdyZXNwb25zZScsIHNlbGYuX3Jlc3BvbnNlKQoJfQoKCUNsaWVudFJlcXVlc3QucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CgkJdmFyIHNlbGYgPSB0aGlzCgoJCXNlbGYuX2JvZHkucHVzaChjaHVuaykKCQljYigpCgl9CgoJQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkgewoJCXZhciBzZWxmID0gdGhpcwoJCXNlbGYuX2Rlc3Ryb3llZCA9IHRydWUKCQlpZiAoc2VsZi5fcmVzcG9uc2UpCgkJCXNlbGYuX3Jlc3BvbnNlLl9kZXN0cm95ZWQgPSB0cnVlCgkJaWYgKHNlbGYuX3hocikKCQkJc2VsZi5feGhyLmFib3J0KCkKCQkvLyBDdXJyZW50bHksIHRoZXJlIGlzbid0IGEgd2F5IHRvIHRydWx5IGFib3J0IGEgZmV0Y2guCgkJLy8gSWYgeW91IGxpa2UgYmlrZXNoZWRkaW5nLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9mZXRjaC9pc3N1ZXMvMjcKCX0KCglDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoZGF0YSwgZW5jb2RpbmcsIGNiKSB7CgkJdmFyIHNlbGYgPSB0aGlzCgkJaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7CgkJCWNiID0gZGF0YQoJCQlkYXRhID0gdW5kZWZpbmVkCgkJfQoKCQlzdHJlYW0uV3JpdGFibGUucHJvdG90eXBlLmVuZC5jYWxsKHNlbGYsIGRhdGEsIGVuY29kaW5nLCBjYikKCX0KCglDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5mbHVzaEhlYWRlcnMgPSBmdW5jdGlvbiAoKSB7fQoJQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0VGltZW91dCA9IGZ1bmN0aW9uICgpIHt9CglDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXROb0RlbGF5ID0gZnVuY3Rpb24gKCkge30KCUNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldFNvY2tldEtlZXBBbGl2ZSA9IGZ1bmN0aW9uICgpIHt9CgoJLy8gVGFrZW4gZnJvbSBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLXNldHJlcXVlc3RoZWFkZXIlMjglMjktbWV0aG9kCgl2YXIgdW5zYWZlSGVhZGVycyA9IFsKCQknYWNjZXB0LWNoYXJzZXQnLAoJCSdhY2NlcHQtZW5jb2RpbmcnLAoJCSdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LWhlYWRlcnMnLAoJCSdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LW1ldGhvZCcsCgkJJ2Nvbm5lY3Rpb24nLAoJCSdjb250ZW50LWxlbmd0aCcsCgkJJ2Nvb2tpZScsCgkJJ2Nvb2tpZTInLAoJCSdkYXRlJywKCQknZG50JywKCQknZXhwZWN0JywKCQknaG9zdCcsCgkJJ2tlZXAtYWxpdmUnLAoJCSdvcmlnaW4nLAoJCSdyZWZlcmVyJywKCQkndGUnLAoJCSd0cmFpbGVyJywKCQkndHJhbnNmZXItZW5jb2RpbmcnLAoJCSd1cGdyYWRlJywKCQkndXNlci1hZ2VudCcsCgkJJ3ZpYScKCV0KCgkvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg4KS5CdWZmZXIsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSksIF9fd2VicGFja19yZXF1aXJlX18oMTIpKSkKCi8qKiovIH0sCi8qIDggKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgey8qIQoJICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuCgkgKgoJICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+CgkgKiBAbGljZW5zZSAgTUlUCgkgKi8KCS8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovCgoJJ3VzZSBzdHJpY3QnCgoJdmFyIGJhc2U2NCA9IF9fd2VicGFja19yZXF1aXJlX18oOSkKCXZhciBpZWVlNzU0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCkKCXZhciBpc0FycmF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMSkKCglleHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlcgoJZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlcgoJZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwCgoJLyoqCgkgKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOgoJICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdCkKCSAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNikKCSAqCgkgKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssCgkgKiBPcGVyYSAxMS42KywgaU9TIDQuMisuCgkgKgoJICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlbgoJICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuCgkgKgoJICogTm90ZToKCSAqCgkgKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLAoJICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LgoJICoKCSAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLgoJICoKCSAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mCgkgKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuCgoJICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXkKCSAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LgoJICovCglCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWQKCSAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVAoJICA6IHR5cGVkQXJyYXlTdXBwb3J0KCkKCgkvKgoJICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLgoJICovCglleHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKCkKCglmdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7CgkgIHRyeSB7CgkgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpCgkgICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19CgkgICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQKCSAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWAKCSAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWAKCSAgfSBjYXRjaCAoZSkgewoJICAgIHJldHVybiBmYWxzZQoJICB9Cgl9CgoJZnVuY3Rpb24ga01heExlbmd0aCAoKSB7CgkgIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVAoJICAgID8gMHg3ZmZmZmZmZgoJICAgIDogMHgzZmZmZmZmZgoJfQoKCWZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7CgkgIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKQoJICB9CgkgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewoJICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZQoJICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpCgkgICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlCgkgIH0gZWxzZSB7CgkgICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzcwoJICAgIGlmICh0aGF0ID09PSBudWxsKSB7CgkgICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpCgkgICAgfQoJICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoCgkgIH0KCgkgIHJldHVybiB0aGF0Cgl9CgoJLyoqCgkgKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXIKCSAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2YKCSAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHMKCSAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0CgkgKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LgoJICoKCSAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC4KCSAqLwoKCWZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKCSAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7CgkgICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpCgkgIH0KCgkgIC8vIENvbW1vbiBjYXNlLgoJICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHsKCSAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7CgkgICAgICB0aHJvdyBuZXcgRXJyb3IoCgkgICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZycKCSAgICAgICkKCSAgICB9CgkgICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZykKCSAgfQoJICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKCX0KCglCdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb24KCgkvLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi4KCUJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHsKCSAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKCSAgcmV0dXJuIGFycgoJfQoKCWZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKCSAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsKCSAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcidmFsdWUiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJykKCSAgfQoKCSAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewoJICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKCSAgfQoKCSAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKCSAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCkKCSAgfQoKCSAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpCgl9CgoJLyoqCgkgKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvcgoJICogaWYgdmFsdWUgaXMgYSBudW1iZXIuCgkgKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pCgkgKiBCdWZmZXIuZnJvbShhcnJheSkKCSAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcikKCSAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKQoJICoqLwoJQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkgewoJICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKQoJfQoKCWlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewoJICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlCgkgIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5CgkgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJgoJICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7CgkgICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTcKCSAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywgewoJICAgICAgdmFsdWU6IG51bGwsCgkgICAgICBjb25maWd1cmFibGU6IHRydWUKCSAgICB9KQoJICB9Cgl9CgoJZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkgewoJICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7CgkgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignInNpemUiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKQoJICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7CgkgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJyJzaXplIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpCgkgIH0KCX0KCglmdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHsKCSAgYXNzZXJ0U2l6ZShzaXplKQoJICBpZiAoc2l6ZSA8PSAwKSB7CgkgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKQoJICB9CgkgIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHsKCSAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpcwoJICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGQKCSAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuCgkgICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycKCSAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpCgkgICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpCgkgIH0KCSAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKQoJfQoKCS8qKgoJICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLgoJICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKQoJICoqLwoJQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7CgkgIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZykKCX0KCglmdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkgewoJICBhc3NlcnRTaXplKHNpemUpCgkgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApCgkgIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKCSAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkgewoJICAgICAgdGhhdFtpXSA9IDAKCSAgICB9CgkgIH0KCSAgcmV0dXJuIHRoYXQKCX0KCgkvKioKCSAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuCgkgKiAqLwoJQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHsKCSAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpCgl9CgkvKioKCSAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLgoJICovCglCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHsKCSAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpCgl9CgoJZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykgewoJICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHsKCSAgICBlbmNvZGluZyA9ICd1dGY4JwoJICB9CgoJICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkgewoJICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJlbmNvZGluZyIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpCgkgIH0KCgkgIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMAoJICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aCkKCgkgIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpCgoJICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHsKCSAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGwKCSAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLgoJICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKQoJICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbCkKCSAgfQoKCSAgcmV0dXJuIHRoYXQKCX0KCglmdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkgewoJICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwCgkgIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKQoJICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7CgkgICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1CgkgIH0KCSAgcmV0dXJuIHRoYXQKCX0KCglmdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHsKCSAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyCgoJICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCdvZmZzZXRcJyBpcyBvdXQgb2YgYm91bmRzJykKCSAgfQoKCSAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkgewoJICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcJ2xlbmd0aFwnIGlzIG91dCBvZiBib3VuZHMnKQoJICB9CgoJICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7CgkgICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSkKCSAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkgewoJICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpCgkgIH0gZWxzZSB7CgkgICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKQoJICB9CgoJICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKCSAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2UKCSAgICB0aGF0ID0gYXJyYXkKCSAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKCSAgfSBlbHNlIHsKCSAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzCgkgICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpCgkgIH0KCSAgcmV0dXJuIHRoYXQKCX0KCglmdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHsKCSAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7CgkgICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwCgkgICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pCgoJICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkgewoJICAgICAgcmV0dXJuIHRoYXQKCSAgICB9CgoJICAgIG9iai5jb3B5KHRoYXQsIDAsIDAsIGxlbikKCSAgICByZXR1cm4gdGhhdAoJICB9CgoJICBpZiAob2JqKSB7CgkgICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmCgkgICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7CgkgICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7CgkgICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMCkKCSAgICAgIH0KCSAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iaikKCSAgICB9CgoJICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHsKCSAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKQoJICAgIH0KCSAgfQoKCSAgdGhyb3cgbmV3IFR5cGVFcnJvcignRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksIG9yIGFycmF5LWxpa2Ugb2JqZWN0LicpCgl9CgoJZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7CgkgIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlbgoJICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLikKCSAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICsKCSAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKQoJICB9CgkgIHJldHVybiBsZW5ndGggfCAwCgl9CgoJZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7CgkgIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcQoJICAgIGxlbmd0aCA9IDAKCSAgfQoJICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpCgl9CgoJQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHsKCSAgcmV0dXJuICEhKGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlcikKCX0KCglCdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHsKCSAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkgewoJICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKQoJICB9CgoJICBpZiAoYSA9PT0gYikgcmV0dXJuIDAKCgkgIHZhciB4ID0gYS5sZW5ndGgKCSAgdmFyIHkgPSBiLmxlbmd0aAoKCSAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHsKCSAgICBpZiAoYVtpXSAhPT0gYltpXSkgewoJICAgICAgeCA9IGFbaV0KCSAgICAgIHkgPSBiW2ldCgkgICAgICBicmVhawoJICAgIH0KCSAgfQoKCSAgaWYgKHggPCB5KSByZXR1cm4gLTEKCSAgaWYgKHkgPCB4KSByZXR1cm4gMQoJICByZXR1cm4gMAoJfQoKCUJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHsKCSAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHsKCSAgICBjYXNlICdoZXgnOgoJICAgIGNhc2UgJ3V0ZjgnOgoJICAgIGNhc2UgJ3V0Zi04JzoKCSAgICBjYXNlICdhc2NpaSc6CgkgICAgY2FzZSAnbGF0aW4xJzoKCSAgICBjYXNlICdiaW5hcnknOgoJICAgIGNhc2UgJ2Jhc2U2NCc6CgkgICAgY2FzZSAndWNzMic6CgkgICAgY2FzZSAndWNzLTInOgoJICAgIGNhc2UgJ3V0ZjE2bGUnOgoJICAgIGNhc2UgJ3V0Zi0xNmxlJzoKCSAgICAgIHJldHVybiB0cnVlCgkgICAgZGVmYXVsdDoKCSAgICAgIHJldHVybiBmYWxzZQoJICB9Cgl9CgoJQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7CgkgIGlmICghaXNBcnJheShsaXN0KSkgewoJICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0IiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKQoJICB9CgoJICBpZiAobGlzdC5sZW5ndGggPT09IDApIHsKCSAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApCgkgIH0KCgkgIHZhciBpCgkgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkgewoJICAgIGxlbmd0aCA9IDAKCSAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkgewoJICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoCgkgICAgfQoJICB9CgoJICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aCkKCSAgdmFyIHBvcyA9IDAKCSAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHsKCSAgICB2YXIgYnVmID0gbGlzdFtpXQoJICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHsKCSAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJsaXN0IiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKQoJICAgIH0KCSAgICBidWYuY29weShidWZmZXIsIHBvcykKCSAgICBwb3MgKz0gYnVmLmxlbmd0aAoJICB9CgkgIHJldHVybiBidWZmZXIKCX0KCglmdW5jdGlvbiBieXRlTGVuZ3RoIChzdHJpbmcsIGVuY29kaW5nKSB7CgkgIGlmIChCdWZmZXIuaXNCdWZmZXIoc3RyaW5nKSkgewoJICAgIHJldHVybiBzdHJpbmcubGVuZ3RoCgkgIH0KCSAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJgoJICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkgewoJICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aAoJICB9CgkgIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykgewoJICAgIHN0cmluZyA9ICcnICsgc3RyaW5nCgkgIH0KCgkgIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoCgkgIGlmIChsZW4gPT09IDApIHJldHVybiAwCgoJICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb24KCSAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2UKCSAgZm9yICg7OykgewoJICAgIHN3aXRjaCAoZW5jb2RpbmcpIHsKCSAgICAgIGNhc2UgJ2FzY2lpJzoKCSAgICAgIGNhc2UgJ2xhdGluMSc6CgkgICAgICBjYXNlICdiaW5hcnknOgoJICAgICAgICByZXR1cm4gbGVuCgkgICAgICBjYXNlICd1dGY4JzoKCSAgICAgIGNhc2UgJ3V0Zi04JzoKCSAgICAgIGNhc2UgdW5kZWZpbmVkOgoJICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGgKCSAgICAgIGNhc2UgJ3VjczInOgoJICAgICAgY2FzZSAndWNzLTInOgoJICAgICAgY2FzZSAndXRmMTZsZSc6CgkgICAgICBjYXNlICd1dGYtMTZsZSc6CgkgICAgICAgIHJldHVybiBsZW4gKiAyCgkgICAgICBjYXNlICdoZXgnOgoJICAgICAgICByZXR1cm4gbGVuID4+PiAxCgkgICAgICBjYXNlICdiYXNlNjQnOgoJICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aAoJICAgICAgZGVmYXVsdDoKCSAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjgKCSAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKQoJICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWUKCSAgICB9CgkgIH0KCX0KCUJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aAoKCWZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHsKCSAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2UKCgkgIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzIiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHkKCSAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS4KCgkgIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZAoJICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuCgkgIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sCgkgIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLgoJICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHsKCSAgICBzdGFydCA9IDAKCSAgfQoJICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMgoJICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LgoJICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkgewoJICAgIHJldHVybiAnJwoJICB9CgoJICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHsKCSAgICBlbmQgPSB0aGlzLmxlbmd0aAoJICB9CgoJICBpZiAoZW5kIDw9IDApIHsKCSAgICByZXR1cm4gJycKCSAgfQoKCSAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC4KCSAgZW5kID4+Pj0gMAoJICBzdGFydCA+Pj49IDAKCgkgIGlmIChlbmQgPD0gc3RhcnQpIHsKCSAgICByZXR1cm4gJycKCSAgfQoKCSAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCcKCgkgIHdoaWxlICh0cnVlKSB7CgkgICAgc3dpdGNoIChlbmNvZGluZykgewoJICAgICAgY2FzZSAnaGV4JzoKCSAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgoJICAgICAgY2FzZSAndXRmOCc6CgkgICAgICBjYXNlICd1dGYtOCc6CgkgICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZCkKCgkgICAgICBjYXNlICdhc2NpaSc6CgkgICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgoJICAgICAgY2FzZSAnbGF0aW4xJzoKCSAgICAgIGNhc2UgJ2JpbmFyeSc6CgkgICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKCSAgICAgIGNhc2UgJ2Jhc2U2NCc6CgkgICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKCSAgICAgIGNhc2UgJ3VjczInOgoJICAgICAgY2FzZSAndWNzLTInOgoJICAgICAgY2FzZSAndXRmMTZsZSc6CgkgICAgICBjYXNlICd1dGYtMTZsZSc6CgkgICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZCkKCgkgICAgICBkZWZhdWx0OgoJICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZykKCSAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKQoJICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWUKCSAgICB9CgkgIH0KCX0KCgkvLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdAoJLy8gQnVmZmVyIGluc3RhbmNlcy4KCUJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZQoKCWZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHsKCSAgdmFyIGkgPSBiW25dCgkgIGJbbl0gPSBiW21dCgkgIGJbbV0gPSBpCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkgewoJICB2YXIgbGVuID0gdGhpcy5sZW5ndGgKCSAgaWYgKGxlbiAlIDIgIT09IDApIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKQoJICB9CgkgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHsKCSAgICBzd2FwKHRoaXMsIGksIGkgKyAxKQoJICB9CgkgIHJldHVybiB0aGlzCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkgewoJICB2YXIgbGVuID0gdGhpcy5sZW5ndGgKCSAgaWYgKGxlbiAlIDQgIT09IDApIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKQoJICB9CgkgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHsKCSAgICBzd2FwKHRoaXMsIGksIGkgKyAzKQoJICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKQoJICB9CgkgIHJldHVybiB0aGlzCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkgewoJICB2YXIgbGVuID0gdGhpcy5sZW5ndGgKCSAgaWYgKGxlbiAlIDggIT09IDApIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKQoJICB9CgkgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHsKCSAgICBzd2FwKHRoaXMsIGksIGkgKyA3KQoJICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KQoJICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KQoJICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KQoJICB9CgkgIHJldHVybiB0aGlzCgl9CgoJQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHsKCSAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMAoJICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJycKCSAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKQoJICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKCX0KCglCdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikgewoJICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpCgkgIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZQoJICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDAKCX0KCglCdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHsKCSAgdmFyIHN0ciA9ICcnCgkgIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTCgkgIGlmICh0aGlzLmxlbmd0aCA+IDApIHsKCSAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKQoJICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICcKCSAgfQoJICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+JwoJfQoKCUJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7CgkgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHsKCSAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJykKCSAgfQoKCSAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHsKCSAgICBzdGFydCA9IDAKCSAgfQoJICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHsKCSAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMAoJICB9CgkgIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkgewoJICAgIHRoaXNTdGFydCA9IDAKCSAgfQoJICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7CgkgICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoCgkgIH0KCgkgIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkgewoJICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKQoJICB9CgoJICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7CgkgICAgcmV0dXJuIDAKCSAgfQoJICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHsKCSAgICByZXR1cm4gLTEKCSAgfQoJICBpZiAoc3RhcnQgPj0gZW5kKSB7CgkgICAgcmV0dXJuIDEKCSAgfQoKCSAgc3RhcnQgPj4+PSAwCgkgIGVuZCA+Pj49IDAKCSAgdGhpc1N0YXJ0ID4+Pj0gMAoJICB0aGlzRW5kID4+Pj0gMAoKCSAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDAKCgkgIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydAoJICB2YXIgeSA9IGVuZCAtIHN0YXJ0CgkgIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KQoKCSAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpCgkgIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpCgoJICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7CgkgICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7CgkgICAgICB4ID0gdGhpc0NvcHlbaV0KCSAgICAgIHkgPSB0YXJnZXRDb3B5W2ldCgkgICAgICBicmVhawoJICAgIH0KCSAgfQoKCSAgaWYgKHggPCB5KSByZXR1cm4gLTEKCSAgaWYgKHkgPCB4KSByZXR1cm4gMQoJICByZXR1cm4gMAoJfQoKCS8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCwKCS8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuCgkvLwoJLy8gQXJndW1lbnRzOgoJLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2gKCS8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyCgkvLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzIKCS8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nCgkvLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZgoJZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7CgkgIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaAoJICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xCgoJICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldAoJICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7CgkgICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0CgkgICAgYnl0ZU9mZnNldCA9IDAKCSAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikgewoJICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmCgkgIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7CgkgICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwCgkgIH0KCSAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLgoJICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHsKCSAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCAiZm9vIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyCgkgICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpCgkgIH0KCgkgIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyCgkgIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0CgkgIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHsKCSAgICBpZiAoZGlyKSByZXR1cm4gLTEKCSAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMQoJICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7CgkgICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDAKCSAgICBlbHNlIHJldHVybiAtMQoJICB9CgoJICAvLyBOb3JtYWxpemUgdmFsCgkgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgewoJICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpCgkgIH0KCgkgIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mCgkgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkgewoJICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHMKCSAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkgewoJICAgICAgcmV0dXJuIC0xCgkgICAgfQoJICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpCgkgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHsKCSAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV0KCSAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYKCSAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHsKCSAgICAgIGlmIChkaXIpIHsKCSAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCkKCSAgICAgIH0gZWxzZSB7CgkgICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KQoJICAgICAgfQoJICAgIH0KCSAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikKCSAgfQoKCSAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJykKCX0KCglmdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7CgkgIHZhciBpbmRleFNpemUgPSAxCgkgIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoCgkgIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoCgoJICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgewoJICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpCgkgICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHwKCSAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykgewoJICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7CgkgICAgICAgIHJldHVybiAtMQoJICAgICAgfQoJICAgICAgaW5kZXhTaXplID0gMgoJICAgICAgYXJyTGVuZ3RoIC89IDIKCSAgICAgIHZhbExlbmd0aCAvPSAyCgkgICAgICBieXRlT2Zmc2V0IC89IDIKCSAgICB9CgkgIH0KCgkgIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkgewoJICAgIGlmIChpbmRleFNpemUgPT09IDEpIHsKCSAgICAgIHJldHVybiBidWZbaV0KCSAgICB9IGVsc2UgewoJICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSkKCSAgICB9CgkgIH0KCgkgIHZhciBpCgkgIGlmIChkaXIpIHsKCSAgICB2YXIgZm91bmRJbmRleCA9IC0xCgkgICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7CgkgICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7CgkgICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGkKCSAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZQoJICAgICAgfSBlbHNlIHsKCSAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4CgkgICAgICAgIGZvdW5kSW5kZXggPSAtMQoJICAgICAgfQoJICAgIH0KCSAgfSBlbHNlIHsKCSAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aAoJICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7CgkgICAgICB2YXIgZm91bmQgPSB0cnVlCgkgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7CgkgICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHsKCSAgICAgICAgICBmb3VuZCA9IGZhbHNlCgkgICAgICAgICAgYnJlYWsKCSAgICAgICAgfQoJICAgICAgfQoJICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaQoJICAgIH0KCSAgfQoKCSAgcmV0dXJuIC0xCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7CgkgIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgewoJICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSkKCX0KCglCdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHsKCSAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKQoJfQoKCWZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKCSAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMAoJICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldAoJICBpZiAoIWxlbmd0aCkgewoJICAgIGxlbmd0aCA9IHJlbWFpbmluZwoJICB9IGVsc2UgewoJICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpCgkgICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykgewoJICAgICAgbGVuZ3RoID0gcmVtYWluaW5nCgkgICAgfQoJICB9CgoJICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0cwoJICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aAoJICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJykKCgkgIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7CgkgICAgbGVuZ3RoID0gc3RyTGVuIC8gMgoJICB9CgkgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKCSAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KQoJICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaQoJICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZAoJICB9CgkgIHJldHVybiBpCgl9CgoJZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKCSAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCkKCX0KCglmdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKCSAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCgl9CgoJZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewoJICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgl9CgoJZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewoJICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCgl9CgoJZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKCSAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCkKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7CgkgIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpCgkgIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgewoJICAgIGVuY29kaW5nID0gJ3V0ZjgnCgkgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGgKCSAgICBvZmZzZXQgPSAwCgkgIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKQoJICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7CgkgICAgZW5jb2RpbmcgPSBvZmZzZXQKCSAgICBsZW5ndGggPSB0aGlzLmxlbmd0aAoJICAgIG9mZnNldCA9IDAKCSAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSkKCSAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7CgkgICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAoJICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7CgkgICAgICBsZW5ndGggPSBsZW5ndGggfCAwCgkgICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCcKCSAgICB9IGVsc2UgewoJICAgICAgZW5jb2RpbmcgPSBsZW5ndGgKCSAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZAoJICAgIH0KCSAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xMwoJICB9IGVsc2UgewoJICAgIHRocm93IG5ldyBFcnJvcigKCSAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCcKCSAgICApCgkgIH0KCgkgIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldAoJICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmcKCgkgIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7CgkgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJykKCSAgfQoKCSAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCcKCgkgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlCgkgIGZvciAoOzspIHsKCSAgICBzd2l0Y2ggKGVuY29kaW5nKSB7CgkgICAgICBjYXNlICdoZXgnOgoJICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCgkgICAgICBjYXNlICd1dGY4JzoKCSAgICAgIGNhc2UgJ3V0Zi04JzoKCSAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKCSAgICAgIGNhc2UgJ2FzY2lpJzoKCSAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCgkgICAgICBjYXNlICdsYXRpbjEnOgoJICAgICAgY2FzZSAnYmluYXJ5JzoKCSAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgoJICAgICAgY2FzZSAnYmFzZTY0JzoKCSAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGUKCSAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgoJICAgICAgY2FzZSAndWNzMic6CgkgICAgICBjYXNlICd1Y3MtMic6CgkgICAgICBjYXNlICd1dGYxNmxlJzoKCSAgICAgIGNhc2UgJ3V0Zi0xNmxlJzoKCSAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKCSAgICAgIGRlZmF1bHQ6CgkgICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKQoJICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpCgkgICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZQoJICAgIH0KCSAgfQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHsKCSAgcmV0dXJuIHsKCSAgICB0eXBlOiAnQnVmZmVyJywKCSAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMCkKCSAgfQoJfQoKCWZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKCSAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkgewoJICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpCgkgIH0gZWxzZSB7CgkgICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSkKCSAgfQoJfQoKCWZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CgkgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCkKCSAgdmFyIHJlcyA9IFtdCgoJICB2YXIgaSA9IHN0YXJ0CgkgIHdoaWxlIChpIDwgZW5kKSB7CgkgICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXQoJICAgIHZhciBjb2RlUG9pbnQgPSBudWxsCgkgICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0CgkgICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDMKCSAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMgoJICAgICAgOiAxCgoJICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHsKCSAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnQKCgkgICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHsKCSAgICAgICAgY2FzZSAxOgoJICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7CgkgICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGUKCSAgICAgICAgICB9CgkgICAgICAgICAgYnJlYWsKCSAgICAgICAgY2FzZSAyOgoJICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdCgkgICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKCSAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKQoJICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7CgkgICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQKCSAgICAgICAgICAgIH0KCSAgICAgICAgICB9CgkgICAgICAgICAgYnJlYWsKCSAgICAgICAgY2FzZSAzOgoJICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdCgkgICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXQoJICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkgewoJICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpCgkgICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7CgkgICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQKCSAgICAgICAgICAgIH0KCSAgICAgICAgICB9CgkgICAgICAgICAgYnJlYWsKCSAgICAgICAgY2FzZSA0OgoJICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdCgkgICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXQoJICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdCgkgICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKCSAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKQoJICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7CgkgICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnQKCSAgICAgICAgICAgIH0KCSAgICAgICAgICB9CgkgICAgICB9CgkgICAgfQoKCSAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7CgkgICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhCgkgICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlCgkgICAgICBjb2RlUG9pbnQgPSAweEZGRkQKCSAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxCgkgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHsKCSAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpCgkgICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMAoJICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKQoJICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkYKCSAgICB9CgoJICAgIHJlcy5wdXNoKGNvZGVQb2ludCkKCSAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2UKCSAgfQoKCSAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpCgl9CgoJLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoCgkvLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuCgkvLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5Cgl2YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDAKCglmdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHsKCSAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoCgkgIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHsKCSAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKCkKCSAgfQoKCSAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCAiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkIi4KCSAgdmFyIHJlcyA9ICcnCgkgIHZhciBpID0gMAoJICB3aGlsZSAoaSA8IGxlbikgewoJICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KAoJICAgICAgU3RyaW5nLAoJICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKQoJICAgICkKCSAgfQoJICByZXR1cm4gcmVzCgl9CgoJZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CgkgIHZhciByZXQgPSAnJwoJICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpCgoJICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewoJICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpCgkgIH0KCSAgcmV0dXJuIHJldAoJfQoKCWZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHsKCSAgdmFyIHJldCA9ICcnCgkgIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZCkKCgkgIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7CgkgICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKQoJICB9CgkgIHJldHVybiByZXQKCX0KCglmdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CgkgIHZhciBsZW4gPSBidWYubGVuZ3RoCgoJICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwCgkgIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW4KCgkgIHZhciBvdXQgPSAnJwoJICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewoJICAgIG91dCArPSB0b0hleChidWZbaV0pCgkgIH0KCSAgcmV0dXJuIG91dAoJfQoKCWZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CgkgIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKQoJICB2YXIgcmVzID0gJycKCSAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikgewoJICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KQoJICB9CgkgIHJldHVybiByZXMKCX0KCglCdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHsKCSAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoCgkgIHN0YXJ0ID0gfn5zdGFydAoJICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kCgoJICBpZiAoc3RhcnQgPCAwKSB7CgkgICAgc3RhcnQgKz0gbGVuCgkgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwCgkgIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHsKCSAgICBzdGFydCA9IGxlbgoJICB9CgoJICBpZiAoZW5kIDwgMCkgewoJICAgIGVuZCArPSBsZW4KCSAgICBpZiAoZW5kIDwgMCkgZW5kID0gMAoJICB9IGVsc2UgaWYgKGVuZCA+IGxlbikgewoJICAgIGVuZCA9IGxlbgoJICB9CgoJICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0CgoJICB2YXIgbmV3QnVmCgkgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewoJICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCkKCSAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZQoJICB9IGVsc2UgewoJICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0CgkgICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKQoJICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkgewoJICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdCgkgICAgfQoJICB9CgoJICByZXR1cm4gbmV3QnVmCgl9CgoJLyoKCSAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLgoJICovCglmdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkgewoJICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKQoJICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewoJICBvZmZzZXQgPSBvZmZzZXQgfCAwCgkgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKQoKCSAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XQoJICB2YXIgbXVsID0gMQoJICB2YXIgaSA9IDAKCSAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bAoJICB9CgoJICByZXR1cm4gdmFsCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewoJICBvZmZzZXQgPSBvZmZzZXQgfCAwCgkgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAoJICBpZiAoIW5vQXNzZXJ0KSB7CgkgICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCkKCSAgfQoKCSAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXQoJICB2YXIgbXVsID0gMQoJICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsCgkgIH0KCgkgIHJldHVybiB2YWwKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKQoJICByZXR1cm4gdGhpc1tvZmZzZXRdCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCkKCSAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCkKCSAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCkKCgkgIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfAoJICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfAoJICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArCgkgICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMCkKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKQoKCSAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICsKCSAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHwKCSAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8CgkgICAgdGhpc1tvZmZzZXQgKyAzXSkKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewoJICBvZmZzZXQgPSBvZmZzZXQgfCAwCgkgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKQoKCSAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XQoJICB2YXIgbXVsID0gMQoJICB2YXIgaSA9IDAKCSAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bAoJICB9CgkgIG11bCAqPSAweDgwCgoJICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKQoKCSAgcmV0dXJuIHZhbAoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCgoJICB2YXIgaSA9IGJ5dGVMZW5ndGgKCSAgdmFyIG11bCA9IDEKCSAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXQoJICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsCgkgIH0KCSAgbXVsICo9IDB4ODAKCgkgIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpCgoJICByZXR1cm4gdmFsCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpCgkgIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSkKCSAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpCgkgIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KQoJICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpCgkgIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KQoJICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgoJICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfAoJICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHwKCSAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfAoJICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKQoKCSAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHwKCSAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfAoJICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHwKCSAgICAodGhpc1tvZmZzZXQgKyAzXSkKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCkKCSAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKQoJICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpCgkgIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOCkKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKQoJICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KQoJfQoKCWZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHsKCSAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignImJ1ZmZlciIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpCgkgIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJyJ2YWx1ZSIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpCgkgIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJykKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwCgkgIGlmICghbm9Bc3NlcnQpIHsKCSAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxCgkgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApCgkgIH0KCgkgIHZhciBtdWwgPSAxCgkgIHZhciBpID0gMAoJICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkYKCSAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkYKCSAgfQoKCSAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwCgkgIGlmICghbm9Bc3NlcnQpIHsKCSAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxCgkgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApCgkgIH0KCgkgIHZhciBpID0gYnl0ZUxlbmd0aCAtIDEKCSAgdmFyIG11bCA9IDEKCSAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRgoJICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkYKCSAgfQoKCSAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgfCAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApCgkgIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSkKCSAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKCSAgcmV0dXJuIG9mZnNldCArIDEKCX0KCglmdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHsKCSAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDEKCSAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkgewoJICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+CgkgICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDgKCSAgfQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKQoJICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKCSAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKQoJICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpCgkgIH0gZWxzZSB7CgkgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSkKCSAgfQoJICByZXR1cm4gb2Zmc2V0ICsgMgoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKQoJICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKCSAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpCgkgICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpCgkgIH0gZWxzZSB7CgkgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpCgkgIH0KCSAgcmV0dXJuIG9mZnNldCArIDIKCX0KCglmdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHsKCSAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxCgkgIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHsKCSAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmCgkgIH0KCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgfCAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApCgkgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewoJICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KQoJICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KQoJICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpCgkgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKCSAgfSBlbHNlIHsKCSAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKQoJICB9CgkgIHJldHVybiBvZmZzZXQgKyA0Cgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgdmFsdWUgPSArdmFsdWUKCSAgb2Zmc2V0ID0gb2Zmc2V0IHwgMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKQoJICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKCSAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KQoJICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KQoJICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpCgkgICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpCgkgIH0gZWxzZSB7CgkgICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpCgkgIH0KCSAgcmV0dXJuIG9mZnNldCArIDQKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgfCAwCgkgIGlmICghbm9Bc3NlcnQpIHsKCSAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpCgoJICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KQoJICB9CgoJICB2YXIgaSA9IDAKCSAgdmFyIG11bCA9IDEKCSAgdmFyIHN1YiA9IDAKCSAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGCgkgIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7CgkgICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHsKCSAgICAgIHN1YiA9IDEKCSAgICB9CgkgICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRgoJICB9CgoJICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aAoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgaWYgKCFub0Fzc2VydCkgewoJICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSkKCgkgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpCgkgIH0KCgkgIHZhciBpID0gYnl0ZUxlbmd0aCAtIDEKCSAgdmFyIG11bCA9IDEKCSAgdmFyIHN1YiA9IDAKCSAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRgoJICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkgewoJICAgICAgc3ViID0gMQoJICAgIH0KCSAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGCgkgIH0KCgkgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoCgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApCgkgIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSkKCSAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxCgkgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCgkgIHJldHVybiBvZmZzZXQgKyAxCgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKQoJICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKCSAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKQoJICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpCgkgIH0gZWxzZSB7CgkgICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSkKCSAgfQoJICByZXR1cm4gb2Zmc2V0ICsgMgoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgfCAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMCkKCSAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7CgkgICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiA4KQoJICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKQoJICB9IGVsc2UgewoJICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKQoJICB9CgkgIHJldHVybiBvZmZzZXQgKyAyCgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApCgkgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgewoJICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCgkgICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkKCSAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNikKCSAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNCkKCSAgfSBlbHNlIHsKCSAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKQoJICB9CgkgIHJldHVybiBvZmZzZXQgKyA0Cgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCB8IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApCgkgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMQoJICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKCSAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KQoJICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KQoJICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpCgkgICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpCgkgIH0gZWxzZSB7CgkgICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpCgkgIH0KCSAgcmV0dXJuIG9mZnNldCArIDQKCX0KCglmdW5jdGlvbiBjaGVja0lFRUU3NTQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikgewoJICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpCgkgIGlmIChvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJykKCX0KCglmdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHsKCSAgaWYgKCFub0Fzc2VydCkgewoJICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KQoJICB9CgkgIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KQoJICByZXR1cm4gb2Zmc2V0ICsgNAoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewoJICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydCkKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KQoJfQoKCWZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHsKCSAgaWYgKCFub0Fzc2VydCkgewoJICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpCgkgIH0KCSAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpCgkgIHJldHVybiBvZmZzZXQgKyA4Cgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpCgl9CgoJLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKQoJQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkgewoJICBpZiAoIXN0YXJ0KSBzdGFydCA9IDAKCSAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aAoJICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoCgkgIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMAoJICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnQKCgkgIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZQoJICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDAKCSAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwCgoJICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zCgkgIGlmICh0YXJnZXRTdGFydCA8IDApIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpCgkgIH0KCSAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKQoJICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJykKCgkgIC8vIEFyZSB3ZSBvb2I/CgkgIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGgKCSAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7CgkgICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnQKCSAgfQoKCSAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0CgkgIHZhciBpCgoJICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHsKCSAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmQKCSAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkgewoJICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF0KCSAgICB9CgkgIH0gZWxzZSBpZiAobGVuIDwgMTAwMCB8fCAhQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKCSAgICAvLyBhc2NlbmRpbmcgY29weSBmcm9tIHN0YXJ0CgkgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgKytpKSB7CgkgICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XQoJICAgIH0KCSAgfSBlbHNlIHsKCSAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbCgKCSAgICAgIHRhcmdldCwKCSAgICAgIHRoaXMuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKSwKCSAgICAgIHRhcmdldFN0YXJ0CgkgICAgKQoJICB9CgoJICByZXR1cm4gbGVuCgl9CgoJLy8gVXNhZ2U6CgkvLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSkKCS8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKQoJLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pCglCdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7CgkgIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6CgkgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgewoJICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7CgkgICAgICBlbmNvZGluZyA9IHN0YXJ0CgkgICAgICBzdGFydCA9IDAKCSAgICAgIGVuZCA9IHRoaXMubGVuZ3RoCgkgICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykgewoJICAgICAgZW5jb2RpbmcgPSBlbmQKCSAgICAgIGVuZCA9IHRoaXMubGVuZ3RoCgkgICAgfQoJICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7CgkgICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApCgkgICAgICBpZiAoY29kZSA8IDI1NikgewoJICAgICAgICB2YWwgPSBjb2RlCgkgICAgICB9CgkgICAgfQoJICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHsKCSAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKQoJICAgIH0KCSAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7CgkgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpCgkgICAgfQoJICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CgkgICAgdmFsID0gdmFsICYgMjU1CgkgIH0KCgkgIC8vIEludmFsaWQgcmFuZ2VzIGFyZSBub3Qgc2V0IHRvIGEgZGVmYXVsdCwgc28gY2FuIHJhbmdlIGNoZWNrIGVhcmx5LgoJICBpZiAoc3RhcnQgPCAwIHx8IHRoaXMubGVuZ3RoIDwgc3RhcnQgfHwgdGhpcy5sZW5ndGggPCBlbmQpIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignT3V0IG9mIHJhbmdlIGluZGV4JykKCSAgfQoKCSAgaWYgKGVuZCA8PSBzdGFydCkgewoJICAgIHJldHVybiB0aGlzCgkgIH0KCgkgIHN0YXJ0ID0gc3RhcnQgPj4+IDAKCSAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMAoKCSAgaWYgKCF2YWwpIHZhbCA9IDAKCgkgIHZhciBpCgkgIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykgewoJICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKCSAgICAgIHRoaXNbaV0gPSB2YWwKCSAgICB9CgkgIH0gZWxzZSB7CgkgICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbCkKCSAgICAgID8gdmFsCgkgICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSkKCSAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoCgkgICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHsKCSAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dCgkgICAgfQoJICB9CgoJICByZXR1cm4gdGhpcwoJfQoKCS8vIEhFTFBFUiBGVU5DVElPTlMKCS8vID09PT09PT09PT09PT09PT0KCgl2YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXC8wLTlBLVphLXotX10vZwoKCWZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHsKCSAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxuIGFuZCBcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdAoJICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpCgkgIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJycKCSAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJycKCSAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90CgkgIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkgewoJICAgIHN0ciA9IHN0ciArICc9JwoJICB9CgkgIHJldHVybiBzdHIKCX0KCglmdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHsKCSAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKQoJICByZXR1cm4gc3RyLnJlcGxhY2UoL15ccyt8XHMrJC9nLCAnJykKCX0KCglmdW5jdGlvbiB0b0hleCAobikgewoJICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNikKCSAgcmV0dXJuIG4udG9TdHJpbmcoMTYpCgl9CgoJZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHsKCSAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eQoJICB2YXIgY29kZVBvaW50CgkgIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoCgkgIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbAoJICB2YXIgYnl0ZXMgPSBbXQoKCSAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkgewoJICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpCgoJICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnQKCSAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkgewoJICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWQKCSAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkgewoJICAgICAgICAvLyBubyBsZWFkIHlldAoJICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7CgkgICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbAoJICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKQoJICAgICAgICAgIGNvbnRpbnVlCgkgICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkgewoJICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWQKCSAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKCSAgICAgICAgICBjb250aW51ZQoJICAgICAgICB9CgoJICAgICAgICAvLyB2YWxpZCBsZWFkCgkgICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQKCgkgICAgICAgIGNvbnRpbnVlCgkgICAgICB9CgoJICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvdwoJICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkgewoJICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKCSAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludAoJICAgICAgICBjb250aW51ZQoJICAgICAgfQoKCSAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyCgkgICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwCgkgICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7CgkgICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkCgkgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKCSAgICB9CgoJICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsCgoJICAgIC8vIGVuY29kZSB1dGY4CgkgICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHsKCSAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVhawoJICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpCgkgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkgewoJICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrCgkgICAgICBieXRlcy5wdXNoKAoJICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCwKCSAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODAKCSAgICAgICkKCSAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHsKCSAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVhawoJICAgICAgYnl0ZXMucHVzaCgKCSAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsCgkgICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCwKCSAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODAKCSAgICAgICkKCSAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7CgkgICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWsKCSAgICAgIGJ5dGVzLnB1c2goCgkgICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCwKCSAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLAoJICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsCgkgICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwCgkgICAgICApCgkgICAgfSBlbHNlIHsKCSAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JykKCSAgICB9CgkgIH0KCgkgIHJldHVybiBieXRlcwoJfQoKCWZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7CgkgIHZhciBieXRlQXJyYXkgPSBbXQoJICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkgewoJICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLgoJICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRikKCSAgfQoJICByZXR1cm4gYnl0ZUFycmF5Cgl9CgoJZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHsKCSAgdmFyIGMsIGhpLCBsbwoJICB2YXIgYnl0ZUFycmF5ID0gW10KCSAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKCSAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWsKCgkgICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpCgkgICAgaGkgPSBjID4+IDgKCSAgICBsbyA9IGMgJSAyNTYKCSAgICBieXRlQXJyYXkucHVzaChsbykKCSAgICBieXRlQXJyYXkucHVzaChoaSkKCSAgfQoKCSAgcmV0dXJuIGJ5dGVBcnJheQoJfQoKCWZ1bmN0aW9uIGJhc2U2NFRvQnl0ZXMgKHN0cikgewoJICByZXR1cm4gYmFzZTY0LnRvQnl0ZUFycmF5KGJhc2U2NGNsZWFuKHN0cikpCgl9CgoJZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7CgkgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKCSAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrCgkgICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldCgkgIH0KCSAgcmV0dXJuIGkKCX0KCglmdW5jdGlvbiBpc25hbiAodmFsKSB7CgkgIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZQoJfQoKCS8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSkKCi8qKiovIH0sCi8qIDkgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJJ3VzZSBzdHJpY3QnCgoJZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aAoJZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5CglleHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5CgoJdmFyIGxvb2t1cCA9IFtdCgl2YXIgcmV2TG9va3VwID0gW10KCXZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXkKCgl2YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJwoJZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKCSAgbG9va3VwW2ldID0gY29kZVtpXQoJICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGkKCX0KCglyZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjIKCXJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2MwoKCWZ1bmN0aW9uIHBsYWNlSG9sZGVyc0NvdW50IChiNjQpIHsKCSAgdmFyIGxlbiA9IGI2NC5sZW5ndGgKCSAgaWYgKGxlbiAlIDQgPiAwKSB7CgkgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JykKCSAgfQoKCSAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycykKCSAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdAoJICAvLyByZXByZXNlbnQgb25lIGJ5dGUKCSAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzCgkgIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2UKCSAgcmV0dXJuIGI2NFtsZW4gLSAyXSA9PT0gJz0nID8gMiA6IGI2NFtsZW4gLSAxXSA9PT0gJz0nID8gMSA6IDAKCX0KCglmdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHsKCSAgLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhCgkgIHJldHVybiBiNjQubGVuZ3RoICogMyAvIDQgLSBwbGFjZUhvbGRlcnNDb3VudChiNjQpCgl9CgoJZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkgewoJICB2YXIgaSwgaiwgbCwgdG1wLCBwbGFjZUhvbGRlcnMsIGFycgoJICB2YXIgbGVuID0gYjY0Lmxlbmd0aAoJICBwbGFjZUhvbGRlcnMgPSBwbGFjZUhvbGRlcnNDb3VudChiNjQpCgoJICBhcnIgPSBuZXcgQXJyKGxlbiAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKQoKCSAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFycwoJICBsID0gcGxhY2VIb2xkZXJzID4gMCA/IGxlbiAtIDQgOiBsZW4KCgkgIHZhciBMID0gMAoKCSAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykgewoJICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXQoJICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGCgkgICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRgoJICAgIGFycltMKytdID0gdG1wICYgMHhGRgoJICB9CgoJICBpZiAocGxhY2VIb2xkZXJzID09PSAyKSB7CgkgICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNCkKCSAgICBhcnJbTCsrXSA9IHRtcCAmIDB4RkYKCSAgfSBlbHNlIGlmIChwbGFjZUhvbGRlcnMgPT09IDEpIHsKCSAgICB0bXAgPSAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMikKCSAgICBhcnJbTCsrXSA9ICh0bXAgPj4gOCkgJiAweEZGCgkgICAgYXJyW0wrK10gPSB0bXAgJiAweEZGCgkgIH0KCgkgIHJldHVybiBhcnIKCX0KCglmdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkgewoJICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICsgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKyBsb29rdXBbbnVtICYgMHgzRl0KCX0KCglmdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHsKCSAgdmFyIHRtcAoJICB2YXIgb3V0cHV0ID0gW10KCSAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHsKCSAgICB0bXAgPSAodWludDhbaV0gPDwgMTYpICsgKHVpbnQ4W2kgKyAxXSA8PCA4KSArICh1aW50OFtpICsgMl0pCgkgICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpCgkgIH0KCSAgcmV0dXJuIG91dHB1dC5qb2luKCcnKQoJfQoKCWZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7CgkgIHZhciB0bXAKCSAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aAoJICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXMKCSAgdmFyIG91dHB1dCA9ICcnCgkgIHZhciBwYXJ0cyA9IFtdCgkgIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgMwoKCSAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlcgoJICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7CgkgICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSkKCSAgfQoKCSAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlcwoJICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkgewoJICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdCgkgICAgb3V0cHV0ICs9IGxvb2t1cFt0bXAgPj4gMl0KCSAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXQoJICAgIG91dHB1dCArPSAnPT0nCgkgIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikgewoJICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArICh1aW50OFtsZW4gLSAxXSkKCSAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAxMF0KCSAgICBvdXRwdXQgKz0gbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXQoJICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdCgkgICAgb3V0cHV0ICs9ICc9JwoJICB9CgoJICBwYXJ0cy5wdXNoKG91dHB1dCkKCgkgIHJldHVybiBwYXJ0cy5qb2luKCcnKQoJfQoKCi8qKiovIH0sCi8qIDEwICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCWV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7CgkgIHZhciBlLCBtCgkgIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxCgkgIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxCgkgIHZhciBlQmlhcyA9IGVNYXggPj4gMQoJICB2YXIgbkJpdHMgPSAtNwoJICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwCgkgIHZhciBkID0gaXNMRSA/IC0xIDogMQoJICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXQoKCSAgaSArPSBkCgoJICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKQoJICBzID4+PSAoLW5CaXRzKQoJICBuQml0cyArPSBlTGVuCgkgIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9CgoJICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKQoJICBlID4+PSAoLW5CaXRzKQoJICBuQml0cyArPSBtTGVuCgkgIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9CgoJICBpZiAoZSA9PT0gMCkgewoJICAgIGUgPSAxIC0gZUJpYXMKCSAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7CgkgICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpCgkgIH0gZWxzZSB7CgkgICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKQoJICAgIGUgPSBlIC0gZUJpYXMKCSAgfQoJICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKQoJfQoKCWV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHsKCSAgdmFyIGUsIG0sIGMKCSAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDEKCSAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDEKCSAgdmFyIGVCaWFzID0gZU1heCA+PiAxCgkgIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMCkKCSAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKQoJICB2YXIgZCA9IGlzTEUgPyAxIDogLTEKCSAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDAKCgkgIHZhbHVlID0gTWF0aC5hYnModmFsdWUpCgoJICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkgewoJICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMAoJICAgIGUgPSBlTWF4CgkgIH0gZWxzZSB7CgkgICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpCgkgICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkgewoJICAgICAgZS0tCgkgICAgICBjICo9IDIKCSAgICB9CgkgICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7CgkgICAgICB2YWx1ZSArPSBydCAvIGMKCSAgICB9IGVsc2UgewoJICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpCgkgICAgfQoJICAgIGlmICh2YWx1ZSAqIGMgPj0gMikgewoJICAgICAgZSsrCgkgICAgICBjIC89IDIKCSAgICB9CgoJICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkgewoJICAgICAgbSA9IDAKCSAgICAgIGUgPSBlTWF4CgkgICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkgewoJICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pCgkgICAgICBlID0gZSArIGVCaWFzCgkgICAgfSBlbHNlIHsKCSAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKQoJICAgICAgZSA9IDAKCSAgICB9CgkgIH0KCgkgIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9CgoJICBlID0gKGUgPDwgbUxlbikgfCBtCgkgIGVMZW4gKz0gbUxlbgoJICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9CgoJICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjgKCX0KCgovKioqLyB9LAovKiAxMSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgl2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZzsKCgltb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikgewoJICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7Cgl9OwoKCi8qKiovIH0sCi8qIDEyICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCS8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlcgoJdmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9OwoKCS8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdAoJLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzCgkvLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhCgkvLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLgoKCXZhciBjYWNoZWRTZXRUaW1lb3V0OwoJdmFyIGNhY2hlZENsZWFyVGltZW91dDsKCglmdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkgewoJICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpOwoJfQoJZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7CgkgICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTsKCX0KCShmdW5jdGlvbiAoKSB7CgkgICAgdHJ5IHsKCSAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7CgkgICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDsKCSAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0OwoJICAgICAgICB9CgkgICAgfSBjYXRjaCAoZSkgewoJICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDsKCSAgICB9CgkgICAgdHJ5IHsKCSAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHsKCSAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDsKCSAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CgkgICAgICAgIH0KCSAgICB9IGNhdGNoIChlKSB7CgkgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7CgkgICAgfQoJfSAoKSkKCWZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7CgkgICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHsKCSAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zCgkgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7CgkgICAgfQoJICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkCgkgICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7CgkgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0OwoJICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApOwoJICAgIH0KCSAgICB0cnkgewoJICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzCgkgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7CgkgICAgfSBjYXRjaChlKXsKCSAgICAgICAgdHJ5IHsKCSAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseQoJICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApOwoJICAgICAgICB9IGNhdGNoKGUpewoJICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IKCSAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTsKCSAgICAgICAgfQoJICAgIH0KCgoJfQoJZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikgewoJICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkgewoJICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnMKCSAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpOwoJICAgIH0KCSAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkCgkgICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7CgkgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDsKCSAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpOwoJICAgIH0KCSAgICB0cnkgewoJICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzCgkgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTsKCSAgICB9IGNhdGNoIChlKXsKCSAgICAgICAgdHJ5IHsKCSAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHkKCSAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpOwoJICAgICAgICB9IGNhdGNoIChlKXsKCSAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLgoJICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dAoJICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7CgkgICAgICAgIH0KCSAgICB9CgoKCgl9Cgl2YXIgcXVldWUgPSBbXTsKCXZhciBkcmFpbmluZyA9IGZhbHNlOwoJdmFyIGN1cnJlbnRRdWV1ZTsKCXZhciBxdWV1ZUluZGV4ID0gLTE7CgoJZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkgewoJICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkgewoJICAgICAgICByZXR1cm47CgkgICAgfQoJICAgIGRyYWluaW5nID0gZmFsc2U7CgkgICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHsKCSAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTsKCSAgICB9IGVsc2UgewoJICAgICAgICBxdWV1ZUluZGV4ID0gLTE7CgkgICAgfQoJICAgIGlmIChxdWV1ZS5sZW5ndGgpIHsKCSAgICAgICAgZHJhaW5RdWV1ZSgpOwoJICAgIH0KCX0KCglmdW5jdGlvbiBkcmFpblF1ZXVlKCkgewoJICAgIGlmIChkcmFpbmluZykgewoJICAgICAgICByZXR1cm47CgkgICAgfQoJICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spOwoJICAgIGRyYWluaW5nID0gdHJ1ZTsKCgkgICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDsKCSAgICB3aGlsZShsZW4pIHsKCSAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7CgkgICAgICAgIHF1ZXVlID0gW107CgkgICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHsKCSAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHsKCSAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7CgkgICAgICAgICAgICB9CgkgICAgICAgIH0KCSAgICAgICAgcXVldWVJbmRleCA9IC0xOwoJICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7CgkgICAgfQoJICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7CgkgICAgZHJhaW5pbmcgPSBmYWxzZTsKCSAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7Cgl9CgoJcHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHsKCSAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7CgkgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CgkgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CgkgICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTsKCSAgICAgICAgfQoJICAgIH0KCSAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpOwoJICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7CgkgICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7CgkgICAgfQoJfTsKCgkvLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzCglmdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHsKCSAgICB0aGlzLmZ1biA9IGZ1bjsKCSAgICB0aGlzLmFycmF5ID0gYXJyYXk7Cgl9CglJdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7CgkgICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7Cgl9OwoJcHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJzsKCXByb2Nlc3MuYnJvd3NlciA9IHRydWU7Cglwcm9jZXNzLmVudiA9IHt9OwoJcHJvY2Vzcy5hcmd2ID0gW107Cglwcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXMKCXByb2Nlc3MudmVyc2lvbnMgPSB7fTsKCglmdW5jdGlvbiBub29wKCkge30KCglwcm9jZXNzLm9uID0gbm9vcDsKCXByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wOwoJcHJvY2Vzcy5vbmNlID0gbm9vcDsKCXByb2Nlc3Mub2ZmID0gbm9vcDsKCXByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wOwoJcHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wOwoJcHJvY2Vzcy5lbWl0ID0gbm9vcDsKCglwcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkgewoJICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTsKCX07CgoJcHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTsKCXByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7CgkgICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTsKCX07Cglwcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9OwoKCi8qKiovIH0sCi8qIDEzICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCS8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHtleHBvcnRzLmZldGNoID0gaXNGdW5jdGlvbihnbG9iYWwuZmV0Y2gpICYmIGlzRnVuY3Rpb24oZ2xvYmFsLlJlYWRhYmxlU3RyZWFtKQoKCWV4cG9ydHMuYmxvYkNvbnN0cnVjdG9yID0gZmFsc2UKCXRyeSB7CgkJbmV3IEJsb2IoW25ldyBBcnJheUJ1ZmZlcigxKV0pCgkJZXhwb3J0cy5ibG9iQ29uc3RydWN0b3IgPSB0cnVlCgl9IGNhdGNoIChlKSB7fQoKCS8vIFRoZSB4aHIgcmVxdWVzdCB0byBleGFtcGxlLmNvbSBtYXkgdmlvbGF0ZSBzb21lIHJlc3RyaWN0aXZlIENTUCBjb25maWd1cmF0aW9ucywKCS8vIHNvIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBicm93c2VyIHRoYXQgc3VwcG9ydHMgYGZldGNoYCwgYXZvaWQgY2FsbGluZyBnZXRYSFIoKQoJLy8gYW5kIGFzc3VtZSBzdXBwb3J0IGZvciBjZXJ0YWluIGZlYXR1cmVzIGJlbG93LgoJdmFyIHhocgoJZnVuY3Rpb24gZ2V0WEhSICgpIHsKCQkvLyBDYWNoZSB0aGUgeGhyIHZhbHVlCgkJaWYgKHhociAhPT0gdW5kZWZpbmVkKSByZXR1cm4geGhyCgoJCWlmIChnbG9iYWwuWE1MSHR0cFJlcXVlc3QpIHsKCQkJeGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpCgkJCS8vIElmIFhEb21haW5SZXF1ZXN0IGlzIGF2YWlsYWJsZSAoaWUgb25seSwgd2hlcmUgeGhyIG1pZ2h0IG5vdCB3b3JrCgkJCS8vIGNyb3NzIGRvbWFpbiksIHVzZSB0aGUgcGFnZSBsb2NhdGlvbi4gT3RoZXJ3aXNlIHVzZSBleGFtcGxlLmNvbQoJCQkvLyBOb3RlOiB0aGlzIGRvZXNuJ3QgYWN0dWFsbHkgbWFrZSBhbiBodHRwIHJlcXVlc3QuCgkJCXRyeSB7CgkJCQl4aHIub3BlbignR0VUJywgZ2xvYmFsLlhEb21haW5SZXF1ZXN0ID8gJy8nIDogJ2h0dHBzOi8vZXhhbXBsZS5jb20nKQoJCQl9IGNhdGNoKGUpIHsKCQkJCXhociA9IG51bGwKCQkJfQoJCX0gZWxzZSB7CgkJCS8vIFNlcnZpY2Ugd29ya2VycyBkb24ndCBoYXZlIFhIUgoJCQl4aHIgPSBudWxsCgkJfQoJCXJldHVybiB4aHIKCX0KCglmdW5jdGlvbiBjaGVja1R5cGVTdXBwb3J0ICh0eXBlKSB7CgkJdmFyIHhociA9IGdldFhIUigpCgkJaWYgKCF4aHIpIHJldHVybiBmYWxzZQoJCXRyeSB7CgkJCXhoci5yZXNwb25zZVR5cGUgPSB0eXBlCgkJCXJldHVybiB4aHIucmVzcG9uc2VUeXBlID09PSB0eXBlCgkJfSBjYXRjaCAoZSkge30KCQlyZXR1cm4gZmFsc2UKCX0KCgkvLyBGb3Igc29tZSBzdHJhbmdlIHJlYXNvbiwgU2FmYXJpIDcuMCByZXBvcnRzIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdvYmplY3QnLgoJLy8gU2FmYXJpIDcuMSBhcHBlYXJzIHRvIGhhdmUgZml4ZWQgdGhpcyBidWcuCgl2YXIgaGF2ZUFycmF5QnVmZmVyID0gdHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcKCXZhciBoYXZlU2xpY2UgPSBoYXZlQXJyYXlCdWZmZXIgJiYgaXNGdW5jdGlvbihnbG9iYWwuQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKQoKCS8vIElmIGZldGNoIGlzIHN1cHBvcnRlZCwgdGhlbiBhcnJheWJ1ZmZlciB3aWxsIGJlIHN1cHBvcnRlZCB0b28uIFNraXAgY2FsbGluZwoJLy8gY2hlY2tUeXBlU3VwcG9ydCgpLCBzaW5jZSB0aGF0IGNhbGxzIGdldFhIUigpLgoJZXhwb3J0cy5hcnJheWJ1ZmZlciA9IGV4cG9ydHMuZmV0Y2ggfHwgKGhhdmVBcnJheUJ1ZmZlciAmJiBjaGVja1R5cGVTdXBwb3J0KCdhcnJheWJ1ZmZlcicpKQoKCS8vIFRoZXNlIG5leHQgdHdvIHRlc3RzIHVuYXZvaWRhYmx5IHNob3cgd2FybmluZ3MgaW4gQ2hyb21lLiBTaW5jZSBmZXRjaCB3aWxsIGFsd2F5cwoJLy8gYmUgdXNlZCBpZiBpdCdzIGF2YWlsYWJsZSwganVzdCByZXR1cm4gZmFsc2UgZm9yIHRoZXNlIHRvIGF2b2lkIHRoZSB3YXJuaW5ncy4KCWV4cG9ydHMubXNzdHJlYW0gPSAhZXhwb3J0cy5mZXRjaCAmJiBoYXZlU2xpY2UgJiYgY2hlY2tUeXBlU3VwcG9ydCgnbXMtc3RyZWFtJykKCWV4cG9ydHMubW96Y2h1bmtlZGFycmF5YnVmZmVyID0gIWV4cG9ydHMuZmV0Y2ggJiYgaGF2ZUFycmF5QnVmZmVyICYmCgkJY2hlY2tUeXBlU3VwcG9ydCgnbW96LWNodW5rZWQtYXJyYXlidWZmZXInKQoKCS8vIElmIGZldGNoIGlzIHN1cHBvcnRlZCwgdGhlbiBvdmVycmlkZU1pbWVUeXBlIHdpbGwgYmUgc3VwcG9ydGVkIHRvby4gU2tpcCBjYWxsaW5nCgkvLyBnZXRYSFIoKS4KCWV4cG9ydHMub3ZlcnJpZGVNaW1lVHlwZSA9IGV4cG9ydHMuZmV0Y2ggfHwgKGdldFhIUigpID8gaXNGdW5jdGlvbihnZXRYSFIoKS5vdmVycmlkZU1pbWVUeXBlKSA6IGZhbHNlKQoKCWV4cG9ydHMudmJBcnJheSA9IGlzRnVuY3Rpb24oZ2xvYmFsLlZCQXJyYXkpCgoJZnVuY3Rpb24gaXNGdW5jdGlvbiAodmFsdWUpIHsKCQlyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nCgl9CgoJeGhyID0gbnVsbCAvLyBIZWxwIGdjCgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKQoKLyoqKi8gfSwKLyogMTQgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJaWYgKHR5cGVvZiBPYmplY3QuY3JlYXRlID09PSAnZnVuY3Rpb24nKSB7CgkgIC8vIGltcGxlbWVudGF0aW9uIGZyb20gc3RhbmRhcmQgbm9kZS5qcyAndXRpbCcgbW9kdWxlCgkgIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7CgkgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3IKCSAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwgewoJICAgICAgY29uc3RydWN0b3I6IHsKCSAgICAgICAgdmFsdWU6IGN0b3IsCgkgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLAoJICAgICAgICB3cml0YWJsZTogdHJ1ZSwKCSAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlCgkgICAgICB9CgkgICAgfSk7CgkgIH07Cgl9IGVsc2UgewoJICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2VycwoJICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikgewoJICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yCgkgICAgdmFyIFRlbXBDdG9yID0gZnVuY3Rpb24gKCkge30KCSAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlCgkgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKQoJICAgIGN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvcgoJICB9Cgl9CgoKLyoqKi8gfSwKLyogMTUgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKHByb2Nlc3MsIEJ1ZmZlciwgZ2xvYmFsKSB7dmFyIGNhcGFiaWxpdHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKQoJdmFyIGluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCkKCXZhciBzdHJlYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KQoKCXZhciByU3RhdGVzID0gZXhwb3J0cy5yZWFkeVN0YXRlcyA9IHsKCQlVTlNFTlQ6IDAsCgkJT1BFTkVEOiAxLAoJCUhFQURFUlNfUkVDRUlWRUQ6IDIsCgkJTE9BRElORzogMywKCQlET05FOiA0Cgl9CgoJdmFyIEluY29taW5nTWVzc2FnZSA9IGV4cG9ydHMuSW5jb21pbmdNZXNzYWdlID0gZnVuY3Rpb24gKHhociwgcmVzcG9uc2UsIG1vZGUpIHsKCQl2YXIgc2VsZiA9IHRoaXMKCQlzdHJlYW0uUmVhZGFibGUuY2FsbChzZWxmKQoKCQlzZWxmLl9tb2RlID0gbW9kZQoJCXNlbGYuaGVhZGVycyA9IHt9CgkJc2VsZi5yYXdIZWFkZXJzID0gW10KCQlzZWxmLnRyYWlsZXJzID0ge30KCQlzZWxmLnJhd1RyYWlsZXJzID0gW10KCgkJLy8gRmFrZSB0aGUgJ2Nsb3NlJyBldmVudCwgYnV0IG9ubHkgb25jZSAnZW5kJyBmaXJlcwoJCXNlbGYub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHsKCQkJLy8gVGhlIG5leHRUaWNrIGlzIG5lY2Vzc2FyeSB0byBwcmV2ZW50IHRoZSAncmVxdWVzdCcgbW9kdWxlIGZyb20gY2F1c2luZyBhbiBpbmZpbml0ZSBsb29wCgkJCXByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgewoJCQkJc2VsZi5lbWl0KCdjbG9zZScpCgkJCX0pCgkJfSkKCgkJaWYgKG1vZGUgPT09ICdmZXRjaCcpIHsKCQkJc2VsZi5fZmV0Y2hSZXNwb25zZSA9IHJlc3BvbnNlCgoJCQlzZWxmLnVybCA9IHJlc3BvbnNlLnVybAoJCQlzZWxmLnN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXMKCQkJc2VsZi5zdGF0dXNNZXNzYWdlID0gcmVzcG9uc2Uuc3RhdHVzVGV4dAoJCQkKCQkJcmVzcG9uc2UuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlciwga2V5KXsKCQkJCXNlbGYuaGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKV0gPSBoZWFkZXIKCQkJCXNlbGYucmF3SGVhZGVycy5wdXNoKGtleSwgaGVhZGVyKQoJCQl9KQoKCgkJCS8vIFRPRE86IHRoaXMgZG9lc24ndCByZXNwZWN0IGJhY2twcmVzc3VyZS4gT25jZSBXcml0YWJsZVN0cmVhbSBpcyBhdmFpbGFibGUsIHRoaXMgY2FuIGJlIGZpeGVkCgkJCXZhciByZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpCgkJCWZ1bmN0aW9uIHJlYWQgKCkgewoJCQkJcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHsKCQkJCQlpZiAoc2VsZi5fZGVzdHJveWVkKQoJCQkJCQlyZXR1cm4KCQkJCQlpZiAocmVzdWx0LmRvbmUpIHsKCQkJCQkJc2VsZi5wdXNoKG51bGwpCgkJCQkJCXJldHVybgoJCQkJCX0KCQkJCQlzZWxmLnB1c2gobmV3IEJ1ZmZlcihyZXN1bHQudmFsdWUpKQoJCQkJCXJlYWQoKQoJCQkJfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7CgkJCQkJc2VsZi5lbWl0KCdlcnJvcicsIGVycikKCQkJCX0pCgkJCX0KCQkJcmVhZCgpCgoJCX0gZWxzZSB7CgkJCXNlbGYuX3hociA9IHhocgoJCQlzZWxmLl9wb3MgPSAwCgoJCQlzZWxmLnVybCA9IHhoci5yZXNwb25zZVVSTAoJCQlzZWxmLnN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzCgkJCXNlbGYuc3RhdHVzTWVzc2FnZSA9IHhoci5zdGF0dXNUZXh0CgkJCXZhciBoZWFkZXJzID0geGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpLnNwbGl0KC9ccj9cbi8pCgkJCWhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7CgkJCQl2YXIgbWF0Y2hlcyA9IGhlYWRlci5tYXRjaCgvXihbXjpdKyk6XHMqKC4qKS8pCgkJCQlpZiAobWF0Y2hlcykgewoJCQkJCXZhciBrZXkgPSBtYXRjaGVzWzFdLnRvTG93ZXJDYXNlKCkKCQkJCQlpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHsKCQkJCQkJaWYgKHNlbGYuaGVhZGVyc1trZXldID09PSB1bmRlZmluZWQpIHsKCQkJCQkJCXNlbGYuaGVhZGVyc1trZXldID0gW10KCQkJCQkJfQoJCQkJCQlzZWxmLmhlYWRlcnNba2V5XS5wdXNoKG1hdGNoZXNbMl0pCgkJCQkJfSBlbHNlIGlmIChzZWxmLmhlYWRlcnNba2V5XSAhPT0gdW5kZWZpbmVkKSB7CgkJCQkJCXNlbGYuaGVhZGVyc1trZXldICs9ICcsICcgKyBtYXRjaGVzWzJdCgkJCQkJfSBlbHNlIHsKCQkJCQkJc2VsZi5oZWFkZXJzW2tleV0gPSBtYXRjaGVzWzJdCgkJCQkJfQoJCQkJCXNlbGYucmF3SGVhZGVycy5wdXNoKG1hdGNoZXNbMV0sIG1hdGNoZXNbMl0pCgkJCQl9CgkJCX0pCgoJCQlzZWxmLl9jaGFyc2V0ID0gJ3gtdXNlci1kZWZpbmVkJwoJCQlpZiAoIWNhcGFiaWxpdHkub3ZlcnJpZGVNaW1lVHlwZSkgewoJCQkJdmFyIG1pbWVUeXBlID0gc2VsZi5yYXdIZWFkZXJzWydtaW1lLXR5cGUnXQoJCQkJaWYgKG1pbWVUeXBlKSB7CgkJCQkJdmFyIGNoYXJzZXRNYXRjaCA9IG1pbWVUeXBlLm1hdGNoKC87XHMqY2hhcnNldD0oW147XSkoO3wkKS8pCgkJCQkJaWYgKGNoYXJzZXRNYXRjaCkgewoJCQkJCQlzZWxmLl9jaGFyc2V0ID0gY2hhcnNldE1hdGNoWzFdLnRvTG93ZXJDYXNlKCkKCQkJCQl9CgkJCQl9CgkJCQlpZiAoIXNlbGYuX2NoYXJzZXQpCgkJCQkJc2VsZi5fY2hhcnNldCA9ICd1dGYtOCcgLy8gYmVzdCBndWVzcwoJCQl9CgkJfQoJfQoKCWluaGVyaXRzKEluY29taW5nTWVzc2FnZSwgc3RyZWFtLlJlYWRhYmxlKQoKCUluY29taW5nTWVzc2FnZS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAoKSB7fQoKCUluY29taW5nTWVzc2FnZS5wcm90b3R5cGUuX29uWEhSUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7CgkJdmFyIHNlbGYgPSB0aGlzCgoJCXZhciB4aHIgPSBzZWxmLl94aHIKCgkJdmFyIHJlc3BvbnNlID0gbnVsbAoJCXN3aXRjaCAoc2VsZi5fbW9kZSkgewoJCQljYXNlICd0ZXh0OnZiYXJyYXknOiAvLyBGb3IgSUU5CgkJCQlpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuRE9ORSkKCQkJCQlicmVhawoJCQkJdHJ5IHsKCQkJCQkvLyBUaGlzIGZhaWxzIGluIElFOAoJCQkJCXJlc3BvbnNlID0gbmV3IGdsb2JhbC5WQkFycmF5KHhoci5yZXNwb25zZUJvZHkpLnRvQXJyYXkoKQoJCQkJfSBjYXRjaCAoZSkge30KCQkJCWlmIChyZXNwb25zZSAhPT0gbnVsbCkgewoJCQkJCXNlbGYucHVzaChuZXcgQnVmZmVyKHJlc3BvbnNlKSkKCQkJCQlicmVhawoJCQkJfQoJCQkJLy8gRmFsbHMgdGhyb3VnaCBpbiBJRTgJCgkJCWNhc2UgJ3RleHQnOgoJCQkJdHJ5IHsgLy8gVGhpcyB3aWxsIGZhaWwgd2hlbiByZWFkeVN0YXRlID0gMyBpbiBJRTkuIFN3aXRjaCBtb2RlIGFuZCB3YWl0IGZvciByZWFkeVN0YXRlID0gNAoJCQkJCXJlc3BvbnNlID0geGhyLnJlc3BvbnNlVGV4dAoJCQkJfSBjYXRjaCAoZSkgewoJCQkJCXNlbGYuX21vZGUgPSAndGV4dDp2YmFycmF5JwoJCQkJCWJyZWFrCgkJCQl9CgkJCQlpZiAocmVzcG9uc2UubGVuZ3RoID4gc2VsZi5fcG9zKSB7CgkJCQkJdmFyIG5ld0RhdGEgPSByZXNwb25zZS5zdWJzdHIoc2VsZi5fcG9zKQoJCQkJCWlmIChzZWxmLl9jaGFyc2V0ID09PSAneC11c2VyLWRlZmluZWQnKSB7CgkJCQkJCXZhciBidWZmZXIgPSBuZXcgQnVmZmVyKG5ld0RhdGEubGVuZ3RoKQoJCQkJCQlmb3IgKHZhciBpID0gMDsgaSA8IG5ld0RhdGEubGVuZ3RoOyBpKyspCgkJCQkJCQlidWZmZXJbaV0gPSBuZXdEYXRhLmNoYXJDb2RlQXQoaSkgJiAweGZmCgoJCQkJCQlzZWxmLnB1c2goYnVmZmVyKQoJCQkJCX0gZWxzZSB7CgkJCQkJCXNlbGYucHVzaChuZXdEYXRhLCBzZWxmLl9jaGFyc2V0KQoJCQkJCX0KCQkJCQlzZWxmLl9wb3MgPSByZXNwb25zZS5sZW5ndGgKCQkJCX0KCQkJCWJyZWFrCgkJCWNhc2UgJ2FycmF5YnVmZmVyJzoKCQkJCWlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5ET05FIHx8ICF4aHIucmVzcG9uc2UpCgkJCQkJYnJlYWsKCQkJCXJlc3BvbnNlID0geGhyLnJlc3BvbnNlCgkJCQlzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKQoJCQkJYnJlYWsKCQkJY2FzZSAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInOiAvLyB0YWtlIHdob2xlCgkJCQlyZXNwb25zZSA9IHhoci5yZXNwb25zZQoJCQkJaWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkxPQURJTkcgfHwgIXJlc3BvbnNlKQoJCQkJCWJyZWFrCgkJCQlzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZXNwb25zZSkpKQoJCQkJYnJlYWsKCQkJY2FzZSAnbXMtc3RyZWFtJzoKCQkJCXJlc3BvbnNlID0geGhyLnJlc3BvbnNlCgkJCQlpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuTE9BRElORykKCQkJCQlicmVhawoJCQkJdmFyIHJlYWRlciA9IG5ldyBnbG9iYWwuTVNTdHJlYW1SZWFkZXIoKQoJCQkJcmVhZGVyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7CgkJCQkJaWYgKHJlYWRlci5yZXN1bHQuYnl0ZUxlbmd0aCA+IHNlbGYuX3BvcykgewoJCQkJCQlzZWxmLnB1c2gobmV3IEJ1ZmZlcihuZXcgVWludDhBcnJheShyZWFkZXIucmVzdWx0LnNsaWNlKHNlbGYuX3BvcykpKSkKCQkJCQkJc2VsZi5fcG9zID0gcmVhZGVyLnJlc3VsdC5ieXRlTGVuZ3RoCgkJCQkJfQoJCQkJfQoJCQkJcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKCQkJCQlzZWxmLnB1c2gobnVsbCkKCQkJCX0KCQkJCS8vIHJlYWRlci5vbmVycm9yID0gPz8/IC8vIFRPRE86IHRoaXMKCQkJCXJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihyZXNwb25zZSkKCQkJCWJyZWFrCgkJfQoKCQkvLyBUaGUgbXMtc3RyZWFtIGNhc2UgaGFuZGxlcyBlbmQgc2VwYXJhdGVseSBpbiByZWFkZXIub25sb2FkKCkKCQlpZiAoc2VsZi5feGhyLnJlYWR5U3RhdGUgPT09IHJTdGF0ZXMuRE9ORSAmJiBzZWxmLl9tb2RlICE9PSAnbXMtc3RyZWFtJykgewoJCQlzZWxmLnB1c2gobnVsbCkKCQl9Cgl9CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTIpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpLkJ1ZmZlciwgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpCgovKioqLyB9LAovKiAxNiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykge3ZhciBTdHJlYW0gPSAoZnVuY3Rpb24gKCl7CgkgIHRyeSB7CgkgICAgcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMTcpOyAvLyBoYWNrIHRvIGZpeCBhIGNpcmN1bGFyIGRlcGVuZGVuY3kgaXNzdWUgd2hlbiB1c2VkIHdpdGggYnJvd3NlcmlmeQoJICB9IGNhdGNoKF8pe30KCX0oKSk7CglleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KTsKCWV4cG9ydHMuU3RyZWFtID0gU3RyZWFtIHx8IGV4cG9ydHM7CglleHBvcnRzLlJlYWRhYmxlID0gZXhwb3J0czsKCWV4cG9ydHMuV3JpdGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTsKCWV4cG9ydHMuRHVwbGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7CglleHBvcnRzLlRyYW5zZm9ybSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpOwoJZXhwb3J0cy5QYXNzVGhyb3VnaCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpOwoKCWlmICghcHJvY2Vzcy5icm93c2VyICYmIHByb2Nlc3MuZW52LlJFQURBQkxFX1NUUkVBTSA9PT0gJ2Rpc2FibGUnICYmIFN0cmVhbSkgewoJICBtb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTsKCX0KCgkvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXygxMikpKQoKLyoqKi8gfSwKLyogMTcgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCgkvLwoJLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKCS8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKCS8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKCS8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKCS8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKCS8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQoJLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6CgkvLwoJLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKCS8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoJLy8KCS8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCgkvLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCgkvLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCgkvLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKCS8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgoJLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQoJLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCgltb2R1bGUuZXhwb3J0cyA9IFN0cmVhbTsKCgl2YXIgRUUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KS5FdmVudEVtaXR0ZXI7Cgl2YXIgaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTsKCglpbmhlcml0cyhTdHJlYW0sIEVFKTsKCVN0cmVhbS5SZWFkYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpOwoJU3RyZWFtLldyaXRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7CglTdHJlYW0uRHVwbGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMyk7CglTdHJlYW0uVHJhbnNmb3JtID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7CglTdHJlYW0uUGFzc1Rocm91Z2ggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM2KTsKCgkvLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjQueAoJU3RyZWFtLlN0cmVhbSA9IFN0cmVhbTsKCgoKCS8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnQKCS8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuCgoJZnVuY3Rpb24gU3RyZWFtKCkgewoJICBFRS5jYWxsKHRoaXMpOwoJfQoKCVN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uKGRlc3QsIG9wdGlvbnMpIHsKCSAgdmFyIHNvdXJjZSA9IHRoaXM7CgoJICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHsKCSAgICBpZiAoZGVzdC53cml0YWJsZSkgewoJICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHsKCSAgICAgICAgc291cmNlLnBhdXNlKCk7CgkgICAgICB9CgkgICAgfQoJICB9CgoJICBzb3VyY2Uub24oJ2RhdGEnLCBvbmRhdGEpOwoKCSAgZnVuY3Rpb24gb25kcmFpbigpIHsKCSAgICBpZiAoc291cmNlLnJlYWRhYmxlICYmIHNvdXJjZS5yZXN1bWUpIHsKCSAgICAgIHNvdXJjZS5yZXN1bWUoKTsKCSAgICB9CgkgIH0KCgkgIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7CgoJICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuCgkgIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLgoJICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHsKCSAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKTsKCSAgICBzb3VyY2Uub24oJ2Nsb3NlJywgb25jbG9zZSk7CgkgIH0KCgkgIHZhciBkaWRPbkVuZCA9IGZhbHNlOwoJICBmdW5jdGlvbiBvbmVuZCgpIHsKCSAgICBpZiAoZGlkT25FbmQpIHJldHVybjsKCSAgICBkaWRPbkVuZCA9IHRydWU7CgoJICAgIGRlc3QuZW5kKCk7CgkgIH0KCgoJICBmdW5jdGlvbiBvbmNsb3NlKCkgewoJICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuOwoJICAgIGRpZE9uRW5kID0gdHJ1ZTsKCgkgICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpOwoJICB9CgoJICAvLyBkb24ndCBsZWF2ZSBkYW5nbGluZyBwaXBlcyB3aGVuIHRoZXJlIGFyZSBlcnJvcnMuCgkgIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHsKCSAgICBjbGVhbnVwKCk7CgkgICAgaWYgKEVFLmxpc3RlbmVyQ291bnQodGhpcywgJ2Vycm9yJykgPT09IDApIHsKCSAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgc3RyZWFtIGVycm9yIGluIHBpcGUuCgkgICAgfQoJICB9CgoJICBzb3VyY2Uub24oJ2Vycm9yJywgb25lcnJvcik7CgkgIGRlc3Qub24oJ2Vycm9yJywgb25lcnJvcik7CgoJICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLgoJICBmdW5jdGlvbiBjbGVhbnVwKCkgewoJICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7CgkgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTsKCgkgICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBvbmVuZCk7CgkgICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpOwoKCSAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7CgkgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTsKCgkgICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTsKCSAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7CgoJICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7CgkgIH0KCgkgIHNvdXJjZS5vbignZW5kJywgY2xlYW51cCk7CgkgIHNvdXJjZS5vbignY2xvc2UnLCBjbGVhbnVwKTsKCgkgIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7CgoJICBkZXN0LmVtaXQoJ3BpcGUnLCBzb3VyY2UpOwoKCSAgLy8gQWxsb3cgZm9yIHVuaXgtbGlrZSB1c2FnZTogQS5waXBlKEIpLnBpcGUoQykKCSAgcmV0dXJuIGRlc3Q7Cgl9OwoKCi8qKiovIH0sCi8qIDE4ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCS8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgoJLy8KCS8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCgkvLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCgkvLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCgkvLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCgkvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0CgkvLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKCS8vIGZvbGxvd2luZyBjb25kaXRpb25zOgoJLy8KCS8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCgkvLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KCS8vCgkvLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwoJLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgoJLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgoJLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCgkvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKCS8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKCS8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCgoJZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkgewoJICB0aGlzLl9ldmVudHMgPSB0aGlzLl9ldmVudHMgfHwge307CgkgIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjsKCgkvLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLngKCUV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7CgoJRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkOwoJRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkOwoKCS8vIEJ5IGRlZmF1bHQgRXZlbnRFbWl0dGVycyB3aWxsIHByaW50IGEgd2FybmluZyBpZiBtb3JlIHRoYW4gMTAgbGlzdGVuZXJzIGFyZQoJLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy4KCUV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzID0gMTA7CgoJLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzCgkvLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC4KCUV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24obikgewoJICBpZiAoIWlzTnVtYmVyKG4pIHx8IG4gPCAwIHx8IGlzTmFOKG4pKQoJICAgIHRocm93IFR5cGVFcnJvcignbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7CgkgIHRoaXMuX21heExpc3RlbmVycyA9IG47CgkgIHJldHVybiB0aGlzOwoJfTsKCglFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbih0eXBlKSB7CgkgIHZhciBlciwgaGFuZGxlciwgbGVuLCBhcmdzLCBpLCBsaXN0ZW5lcnM7CgoJICBpZiAoIXRoaXMuX2V2ZW50cykKCSAgICB0aGlzLl9ldmVudHMgPSB7fTsKCgkgIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy4KCSAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHsKCSAgICBpZiAoIXRoaXMuX2V2ZW50cy5lcnJvciB8fAoJICAgICAgICAoaXNPYmplY3QodGhpcy5fZXZlbnRzLmVycm9yKSAmJiAhdGhpcy5fZXZlbnRzLmVycm9yLmxlbmd0aCkpIHsKCSAgICAgIGVyID0gYXJndW1lbnRzWzFdOwoJICAgICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHsKCSAgICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50CgkgICAgICB9IGVsc2UgewoJICAgICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyCgkgICAgICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuY2F1Z2h0LCB1bnNwZWNpZmllZCAiZXJyb3IiIGV2ZW50LiAoJyArIGVyICsgJyknKTsKCSAgICAgICAgZXJyLmNvbnRleHQgPSBlcjsKCSAgICAgICAgdGhyb3cgZXJyOwoJICAgICAgfQoJICAgIH0KCSAgfQoKCSAgaGFuZGxlciA9IHRoaXMuX2V2ZW50c1t0eXBlXTsKCgkgIGlmIChpc1VuZGVmaW5lZChoYW5kbGVyKSkKCSAgICByZXR1cm4gZmFsc2U7CgoJICBpZiAoaXNGdW5jdGlvbihoYW5kbGVyKSkgewoJICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkgewoJICAgICAgLy8gZmFzdCBjYXNlcwoJICAgICAgY2FzZSAxOgoJICAgICAgICBoYW5kbGVyLmNhbGwodGhpcyk7CgkgICAgICAgIGJyZWFrOwoJICAgICAgY2FzZSAyOgoJICAgICAgICBoYW5kbGVyLmNhbGwodGhpcywgYXJndW1lbnRzWzFdKTsKCSAgICAgICAgYnJlYWs7CgkgICAgICBjYXNlIDM6CgkgICAgICAgIGhhbmRsZXIuY2FsbCh0aGlzLCBhcmd1bWVudHNbMV0sIGFyZ3VtZW50c1syXSk7CgkgICAgICAgIGJyZWFrOwoJICAgICAgLy8gc2xvd2VyCgkgICAgICBkZWZhdWx0OgoJICAgICAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKCSAgICAgICAgaGFuZGxlci5hcHBseSh0aGlzLCBhcmdzKTsKCSAgICB9CgkgIH0gZWxzZSBpZiAoaXNPYmplY3QoaGFuZGxlcikpIHsKCSAgICBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTsKCSAgICBsaXN0ZW5lcnMgPSBoYW5kbGVyLnNsaWNlKCk7CgkgICAgbGVuID0gbGlzdGVuZXJzLmxlbmd0aDsKCSAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspCgkgICAgICBsaXN0ZW5lcnNbaV0uYXBwbHkodGhpcywgYXJncyk7CgkgIH0KCgkgIHJldHVybiB0cnVlOwoJfTsKCglFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24odHlwZSwgbGlzdGVuZXIpIHsKCSAgdmFyIG07CgoJICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKQoJICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CgoJICBpZiAoIXRoaXMuX2V2ZW50cykKCSAgICB0aGlzLl9ldmVudHMgPSB7fTsKCgkgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09ICJuZXdMaXN0ZW5lciIhIEJlZm9yZQoJICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCAibmV3TGlzdGVuZXIiLgoJICBpZiAodGhpcy5fZXZlbnRzLm5ld0xpc3RlbmVyKQoJICAgIHRoaXMuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLAoJICAgICAgICAgICAgICBpc0Z1bmN0aW9uKGxpc3RlbmVyLmxpc3RlbmVyKSA/CgkgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpOwoKCSAgaWYgKCF0aGlzLl9ldmVudHNbdHlwZV0pCgkgICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuCgkgICAgdGhpcy5fZXZlbnRzW3R5cGVdID0gbGlzdGVuZXI7CgkgIGVsc2UgaWYgKGlzT2JqZWN0KHRoaXMuX2V2ZW50c1t0eXBlXSkpCgkgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLgoJICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGxpc3RlbmVyKTsKCSAgZWxzZQoJICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LgoJICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFt0aGlzLl9ldmVudHNbdHlwZV0sIGxpc3RlbmVyXTsKCgkgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrCgkgIGlmIChpc09iamVjdCh0aGlzLl9ldmVudHNbdHlwZV0pICYmICF0aGlzLl9ldmVudHNbdHlwZV0ud2FybmVkKSB7CgkgICAgaWYgKCFpc1VuZGVmaW5lZCh0aGlzLl9tYXhMaXN0ZW5lcnMpKSB7CgkgICAgICBtID0gdGhpcy5fbWF4TGlzdGVuZXJzOwoJICAgIH0gZWxzZSB7CgkgICAgICBtID0gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7CgkgICAgfQoKCSAgICBpZiAobSAmJiBtID4gMCAmJiB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoID4gbSkgewoJICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLndhcm5lZCA9IHRydWU7CgkgICAgICBjb25zb2xlLmVycm9yKCcobm9kZSkgd2FybmluZzogcG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSAnICsKCSAgICAgICAgICAgICAgICAgICAgJ2xlYWsgZGV0ZWN0ZWQuICVkIGxpc3RlbmVycyBhZGRlZC4gJyArCgkgICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdC4nLAoJICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ubGVuZ3RoKTsKCSAgICAgIGlmICh0eXBlb2YgY29uc29sZS50cmFjZSA9PT0gJ2Z1bmN0aW9uJykgewoJICAgICAgICAvLyBub3Qgc3VwcG9ydGVkIGluIElFIDEwCgkgICAgICAgIGNvbnNvbGUudHJhY2UoKTsKCSAgICAgIH0KCSAgICB9CgkgIH0KCgkgIHJldHVybiB0aGlzOwoJfTsKCglFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lcjsKCglFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbih0eXBlLCBsaXN0ZW5lcikgewoJICBpZiAoIWlzRnVuY3Rpb24obGlzdGVuZXIpKQoJICAgIHRocm93IFR5cGVFcnJvcignbGlzdGVuZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CgoJICB2YXIgZmlyZWQgPSBmYWxzZTsKCgkgIGZ1bmN0aW9uIGcoKSB7CgkgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTsKCgkgICAgaWYgKCFmaXJlZCkgewoJICAgICAgZmlyZWQgPSB0cnVlOwoJICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKCSAgICB9CgkgIH0KCgkgIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjsKCSAgdGhpcy5vbih0eXBlLCBnKTsKCgkgIHJldHVybiB0aGlzOwoJfTsKCgkvLyBlbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWZmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZAoJRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lciA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7CgkgIHZhciBsaXN0LCBwb3NpdGlvbiwgbGVuZ3RoLCBpOwoKCSAgaWYgKCFpc0Z1bmN0aW9uKGxpc3RlbmVyKSkKCSAgICB0aHJvdyBUeXBlRXJyb3IoJ2xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpOwoKCSAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSkKCSAgICByZXR1cm4gdGhpczsKCgkgIGxpc3QgPSB0aGlzLl9ldmVudHNbdHlwZV07CgkgIGxlbmd0aCA9IGxpc3QubGVuZ3RoOwoJICBwb3NpdGlvbiA9IC0xOwoKCSAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8CgkgICAgICAoaXNGdW5jdGlvbihsaXN0Lmxpc3RlbmVyKSAmJiBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikpIHsKCSAgICBkZWxldGUgdGhpcy5fZXZlbnRzW3R5cGVdOwoJICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpCgkgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpOwoKCSAgfSBlbHNlIGlmIChpc09iamVjdChsaXN0KSkgewoJICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tID4gMDspIHsKCSAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fAoJICAgICAgICAgIChsaXN0W2ldLmxpc3RlbmVyICYmIGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkgewoJICAgICAgICBwb3NpdGlvbiA9IGk7CgkgICAgICAgIGJyZWFrOwoJICAgICAgfQoJICAgIH0KCgkgICAgaWYgKHBvc2l0aW9uIDwgMCkKCSAgICAgIHJldHVybiB0aGlzOwoKCSAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpIHsKCSAgICAgIGxpc3QubGVuZ3RoID0gMDsKCSAgICAgIGRlbGV0ZSB0aGlzLl9ldmVudHNbdHlwZV07CgkgICAgfSBlbHNlIHsKCSAgICAgIGxpc3Quc3BsaWNlKHBvc2l0aW9uLCAxKTsKCSAgICB9CgoJICAgIGlmICh0aGlzLl9ldmVudHMucmVtb3ZlTGlzdGVuZXIpCgkgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdGVuZXIpOwoJICB9CgoJICByZXR1cm4gdGhpczsKCX07CgoJRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBmdW5jdGlvbih0eXBlKSB7CgkgIHZhciBrZXksIGxpc3RlbmVyczsKCgkgIGlmICghdGhpcy5fZXZlbnRzKQoJICAgIHJldHVybiB0aGlzOwoKCSAgLy8gbm90IGxpc3RlbmluZyBmb3IgcmVtb3ZlTGlzdGVuZXIsIG5vIG5lZWQgdG8gZW1pdAoJICBpZiAoIXRoaXMuX2V2ZW50cy5yZW1vdmVMaXN0ZW5lcikgewoJICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKQoJICAgICAgdGhpcy5fZXZlbnRzID0ge307CgkgICAgZWxzZSBpZiAodGhpcy5fZXZlbnRzW3R5cGVdKQoJICAgICAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTsKCSAgICByZXR1cm4gdGhpczsKCSAgfQoKCSAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzCgkgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7CgkgICAgZm9yIChrZXkgaW4gdGhpcy5fZXZlbnRzKSB7CgkgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTsKCSAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7CgkgICAgfQoJICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpOwoJICAgIHRoaXMuX2V2ZW50cyA9IHt9OwoJICAgIHJldHVybiB0aGlzOwoJICB9CgoJICBsaXN0ZW5lcnMgPSB0aGlzLl9ldmVudHNbdHlwZV07CgoJICBpZiAoaXNGdW5jdGlvbihsaXN0ZW5lcnMpKSB7CgkgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpOwoJICB9IGVsc2UgaWYgKGxpc3RlbmVycykgewoJICAgIC8vIExJRk8gb3JkZXIKCSAgICB3aGlsZSAobGlzdGVuZXJzLmxlbmd0aCkKCSAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2xpc3RlbmVycy5sZW5ndGggLSAxXSk7CgkgIH0KCSAgZGVsZXRlIHRoaXMuX2V2ZW50c1t0eXBlXTsKCgkgIHJldHVybiB0aGlzOwoJfTsKCglFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKHR5cGUpIHsKCSAgdmFyIHJldDsKCSAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSkKCSAgICByZXQgPSBbXTsKCSAgZWxzZSBpZiAoaXNGdW5jdGlvbih0aGlzLl9ldmVudHNbdHlwZV0pKQoJICAgIHJldCA9IFt0aGlzLl9ldmVudHNbdHlwZV1dOwoJICBlbHNlCgkgICAgcmV0ID0gdGhpcy5fZXZlbnRzW3R5cGVdLnNsaWNlKCk7CgkgIHJldHVybiByZXQ7Cgl9OwoKCUV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKHR5cGUpIHsKCSAgaWYgKHRoaXMuX2V2ZW50cykgewoJICAgIHZhciBldmxpc3RlbmVyID0gdGhpcy5fZXZlbnRzW3R5cGVdOwoKCSAgICBpZiAoaXNGdW5jdGlvbihldmxpc3RlbmVyKSkKCSAgICAgIHJldHVybiAxOwoJICAgIGVsc2UgaWYgKGV2bGlzdGVuZXIpCgkgICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7CgkgIH0KCSAgcmV0dXJuIDA7Cgl9OwoKCUV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkgewoJICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpOwoJfTsKCglmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykgewoJICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJzsKCX0KCglmdW5jdGlvbiBpc051bWJlcihhcmcpIHsKCSAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdudW1iZXInOwoJfQoKCWZ1bmN0aW9uIGlzT2JqZWN0KGFyZykgewoJICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsOwoJfQoKCWZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykgewoJICByZXR1cm4gYXJnID09PSB2b2lkIDA7Cgl9CgoKLyoqKi8gfSwKLyogMTkgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKQoKCi8qKiovIH0sCi8qIDIwICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzLCBzZXRJbW1lZGlhdGUpIHsvLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy4KCS8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbAoJLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuCgoJJ3VzZSBzdHJpY3QnOwoKCW1vZHVsZS5leHBvcnRzID0gV3JpdGFibGU7CgoJLyo8cmVwbGFjZW1lbnQ+Ki8KCXZhciBwcm9jZXNzTmV4dFRpY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTsKCS8qPC9yZXBsYWNlbWVudD4qLwoKCS8qPHJlcGxhY2VtZW50PiovCgl2YXIgYXN5bmNXcml0ZSA9ICFwcm9jZXNzLmJyb3dzZXIgJiYgWyd2MC4xMCcsICd2MC45LiddLmluZGV4T2YocHJvY2Vzcy52ZXJzaW9uLnNsaWNlKDAsIDUpKSA+IC0xID8gc2V0SW1tZWRpYXRlIDogcHJvY2Vzc05leHRUaWNrOwoJLyo8L3JlcGxhY2VtZW50PiovCgoJLyo8cmVwbGFjZW1lbnQ+Ki8KCXZhciBEdXBsZXg7CgkvKjwvcmVwbGFjZW1lbnQ+Ki8KCglXcml0YWJsZS5Xcml0YWJsZVN0YXRlID0gV3JpdGFibGVTdGF0ZTsKCgkvKjxyZXBsYWNlbWVudD4qLwoJdmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTsKCXV0aWwuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTsKCS8qPC9yZXBsYWNlbWVudD4qLwoKCS8qPHJlcGxhY2VtZW50PiovCgl2YXIgaW50ZXJuYWxVdGlsID0gewoJICBkZXByZWNhdGU6IF9fd2VicGFja19yZXF1aXJlX18oMjUpCgl9OwoJLyo8L3JlcGxhY2VtZW50PiovCgoJLyo8cmVwbGFjZW1lbnQ+Ki8KCXZhciBTdHJlYW07CgkoZnVuY3Rpb24gKCkgewoJICB0cnkgewoJICAgIFN0cmVhbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpOwoJICB9IGNhdGNoIChfKSB7fSBmaW5hbGx5IHsKCSAgICBpZiAoIVN0cmVhbSkgU3RyZWFtID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCkuRXZlbnRFbWl0dGVyOwoJICB9Cgl9KSgpOwoJLyo8L3JlcGxhY2VtZW50PiovCgoJdmFyIEJ1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpLkJ1ZmZlcjsKCS8qPHJlcGxhY2VtZW50PiovCgl2YXIgYnVmZmVyU2hpbSA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpOwoJLyo8L3JlcGxhY2VtZW50PiovCgoJdXRpbC5pbmhlcml0cyhXcml0YWJsZSwgU3RyZWFtKTsKCglmdW5jdGlvbiBub3AoKSB7fQoKCWZ1bmN0aW9uIFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpIHsKCSAgdGhpcy5jaHVuayA9IGNodW5rOwoJICB0aGlzLmVuY29kaW5nID0gZW5jb2Rpbmc7CgkgIHRoaXMuY2FsbGJhY2sgPSBjYjsKCSAgdGhpcy5uZXh0ID0gbnVsbDsKCX0KCglmdW5jdGlvbiBXcml0YWJsZVN0YXRlKG9wdGlvbnMsIHN0cmVhbSkgewoJICBEdXBsZXggPSBEdXBsZXggfHwgX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7CgoJICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKCgkgIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbQoJICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuCgkgIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlOwoKCSAgaWYgKHN0cmVhbSBpbnN0YW5jZW9mIER1cGxleCkgdGhpcy5vYmplY3RNb2RlID0gdGhpcy5vYmplY3RNb2RlIHx8ICEhb3B0aW9ucy53cml0YWJsZU9iamVjdE1vZGU7CgoJICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggd3JpdGUoKSBzdGFydHMgcmV0dXJuaW5nIGZhbHNlCgkgIC8vIE5vdGU6IDAgaXMgYSB2YWxpZCB2YWx1ZSwgbWVhbnMgdGhhdCB3ZSBhbHdheXMgcmV0dXJuIGZhbHNlIGlmCgkgIC8vIHRoZSBlbnRpcmUgYnVmZmVyIGlzIG5vdCBmbHVzaGVkIGltbWVkaWF0ZWx5IG9uIHdyaXRlKCkKCSAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyazsKCSAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDsKCSAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtIHx8IGh3bSA9PT0gMCA/IGh3bSA6IGRlZmF1bHRId207CgoJICAvLyBjYXN0IHRvIGludHMuCgkgIHRoaXMuaGlnaFdhdGVyTWFyayA9IH4gfnRoaXMuaGlnaFdhdGVyTWFyazsKCgkgIC8vIGRyYWluIGV2ZW50IGZsYWcuCgkgIHRoaXMubmVlZERyYWluID0gZmFsc2U7CgkgIC8vIGF0IHRoZSBzdGFydCBvZiBjYWxsaW5nIGVuZCgpCgkgIHRoaXMuZW5kaW5nID0gZmFsc2U7CgkgIC8vIHdoZW4gZW5kKCkgaGFzIGJlZW4gY2FsbGVkLCBhbmQgcmV0dXJuZWQKCSAgdGhpcy5lbmRlZCA9IGZhbHNlOwoJICAvLyB3aGVuICdmaW5pc2gnIGlzIGVtaXR0ZWQKCSAgdGhpcy5maW5pc2hlZCA9IGZhbHNlOwoKCSAgLy8gc2hvdWxkIHdlIGRlY29kZSBzdHJpbmdzIGludG8gYnVmZmVycyBiZWZvcmUgcGFzc2luZyB0byBfd3JpdGU/CgkgIC8vIHRoaXMgaXMgaGVyZSBzbyB0aGF0IHNvbWUgbm9kZS1jb3JlIHN0cmVhbXMgY2FuIG9wdGltaXplIHN0cmluZwoJICAvLyBoYW5kbGluZyBhdCBhIGxvd2VyIGxldmVsLgoJICB2YXIgbm9EZWNvZGUgPSBvcHRpb25zLmRlY29kZVN0cmluZ3MgPT09IGZhbHNlOwoJICB0aGlzLmRlY29kZVN0cmluZ3MgPSAhbm9EZWNvZGU7CgoJICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nCgkgIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS4KCSAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLgoJICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsKCgkgIC8vIG5vdCBhbiBhY3R1YWwgYnVmZmVyIHdlIGtlZXAgdHJhY2sgb2YsIGJ1dCBhIG1lYXN1cmVtZW50CgkgIC8vIG9mIGhvdyBtdWNoIHdlJ3JlIHdhaXRpbmcgdG8gZ2V0IHB1c2hlZCB0byBzb21lIHVuZGVybHlpbmcKCSAgLy8gc29ja2V0IG9yIGZpbGUuCgkgIHRoaXMubGVuZ3RoID0gMDsKCgkgIC8vIGEgZmxhZyB0byBzZWUgd2hlbiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGEgd3JpdGUuCgkgIHRoaXMud3JpdGluZyA9IGZhbHNlOwoKCSAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbAoJICB0aGlzLmNvcmtlZCA9IDA7CgoJICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSwKCSAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnkKCSAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgImxhdGVyIiBzaG91bGQgZ2VuZXJhbGx5IGFsc28KCSAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuCgkgIHRoaXMuc3luYyA9IHRydWU7CgoJICAvLyBhIGZsYWcgdG8ga25vdyBpZiB3ZSdyZSBwcm9jZXNzaW5nIHByZXZpb3VzbHkgYnVmZmVyZWQgaXRlbXMsIHdoaWNoCgkgIC8vIG1heSBjYWxsIHRoZSBfd3JpdGUoKSBjYWxsYmFjayBpbiB0aGUgc2FtZSB0aWNrLCBzbyB0aGF0IHdlIGRvbid0CgkgIC8vIGVuZCB1cCBpbiBhbiBvdmVybGFwcGVkIG9ud3JpdGUgc2l0dWF0aW9uLgoJICB0aGlzLmJ1ZmZlclByb2Nlc3NpbmcgPSBmYWxzZTsKCgkgIC8vIHRoZSBjYWxsYmFjayB0aGF0J3MgcGFzc2VkIHRvIF93cml0ZShjaHVuayxjYikKCSAgdGhpcy5vbndyaXRlID0gZnVuY3Rpb24gKGVyKSB7CgkgICAgb253cml0ZShzdHJlYW0sIGVyKTsKCSAgfTsKCgkgIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKQoJICB0aGlzLndyaXRlY2IgPSBudWxsOwoKCSAgLy8gdGhlIGFtb3VudCB0aGF0IGlzIGJlaW5nIHdyaXR0ZW4gd2hlbiBfd3JpdGUgaXMgY2FsbGVkLgoJICB0aGlzLndyaXRlbGVuID0gMDsKCgkgIHRoaXMuYnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsKCSAgdGhpcy5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsKCgkgIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzCgkgIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZAoJICB0aGlzLnBlbmRpbmdjYiA9IDA7CgoJICAvLyBlbWl0IHByZWZpbmlzaCBpZiB0aGUgb25seSB0aGluZyB3ZSdyZSB3YWl0aW5nIGZvciBpcyBfd3JpdGUgY2JzCgkgIC8vIFRoaXMgaXMgcmVsZXZhbnQgZm9yIHN5bmNocm9ub3VzIFRyYW5zZm9ybSBzdHJlYW1zCgkgIHRoaXMucHJlZmluaXNoZWQgPSBmYWxzZTsKCgkgIC8vIFRydWUgaWYgdGhlIGVycm9yIHdhcyBhbHJlYWR5IGVtaXR0ZWQgYW5kIHNob3VsZCBub3QgYmUgdGhyb3duIGFnYWluCgkgIHRoaXMuZXJyb3JFbWl0dGVkID0gZmFsc2U7CgoJICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0cwoJICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDsKCgkgIC8vIGFsbG9jYXRlIHRoZSBmaXJzdCBDb3JrZWRSZXF1ZXN0LCB0aGVyZSBpcyBhbHdheXMKCSAgLy8gb25lIGFsbG9jYXRlZCBhbmQgZnJlZSB0byB1c2UsIGFuZCB3ZSBtYWludGFpbiBhdCBtb3N0IHR3bwoJICB0aGlzLmNvcmtlZFJlcXVlc3RzRnJlZSA9IG5ldyBDb3JrZWRSZXF1ZXN0KHRoaXMpOwoJfQoKCVdyaXRhYmxlU3RhdGUucHJvdG90eXBlLmdldEJ1ZmZlciA9IGZ1bmN0aW9uIGdldEJ1ZmZlcigpIHsKCSAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDsKCSAgdmFyIG91dCA9IFtdOwoJICB3aGlsZSAoY3VycmVudCkgewoJICAgIG91dC5wdXNoKGN1cnJlbnQpOwoJICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7CgkgIH0KCSAgcmV0dXJuIG91dDsKCX07CgoJKGZ1bmN0aW9uICgpIHsKCSAgdHJ5IHsKCSAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUsICdidWZmZXInLCB7CgkgICAgICBnZXQ6IGludGVybmFsVXRpbC5kZXByZWNhdGUoZnVuY3Rpb24gKCkgewoJICAgICAgICByZXR1cm4gdGhpcy5nZXRCdWZmZXIoKTsKCSAgICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJykKCSAgICB9KTsKCSAgfSBjYXRjaCAoXykge30KCX0pKCk7CgoJLy8gVGVzdCBfd3JpdGFibGVTdGF0ZSBmb3IgaW5oZXJpdGFuY2UgdG8gYWNjb3VudCBmb3IgRHVwbGV4IHN0cmVhbXMsCgkvLyB3aG9zZSBwcm90b3R5cGUgY2hhaW4gb25seSBwb2ludHMgdG8gUmVhZGFibGUuCgl2YXIgcmVhbEhhc0luc3RhbmNlOwoJaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmhhc0luc3RhbmNlICYmIHR5cGVvZiBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXSA9PT0gJ2Z1bmN0aW9uJykgewoJICByZWFsSGFzSW5zdGFuY2UgPSBGdW5jdGlvbi5wcm90b3R5cGVbU3ltYm9sLmhhc0luc3RhbmNlXTsKCSAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdyaXRhYmxlLCBTeW1ib2wuaGFzSW5zdGFuY2UsIHsKCSAgICB2YWx1ZTogZnVuY3Rpb24gKG9iamVjdCkgewoJICAgICAgaWYgKHJlYWxIYXNJbnN0YW5jZS5jYWxsKHRoaXMsIG9iamVjdCkpIHJldHVybiB0cnVlOwoKCSAgICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0Ll93cml0YWJsZVN0YXRlIGluc3RhbmNlb2YgV3JpdGFibGVTdGF0ZTsKCSAgICB9CgkgIH0pOwoJfSBlbHNlIHsKCSAgcmVhbEhhc0luc3RhbmNlID0gZnVuY3Rpb24gKG9iamVjdCkgewoJICAgIHJldHVybiBvYmplY3QgaW5zdGFuY2VvZiB0aGlzOwoJICB9OwoJfQoKCWZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHsKCSAgRHVwbGV4ID0gRHVwbGV4IHx8IF9fd2VicGFja19yZXF1aXJlX18oMjgpOwoKCSAgLy8gV3JpdGFibGUgY3RvciBpcyBhcHBsaWVkIHRvIER1cGxleGVzLCB0b28uCgkgIC8vIGByZWFsSGFzSW5zdGFuY2VgIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHVzaW5nIHBsYWluIGBpbnN0YW5jZW9mYAoJICAvLyB3b3VsZCByZXR1cm4gZmFsc2UsIGFzIG5vIGBfd3JpdGFibGVTdGF0ZWAgcHJvcGVydHkgaXMgYXR0YWNoZWQuCgoJICAvLyBUcnlpbmcgdG8gdXNlIHRoZSBjdXN0b20gYGluc3RhbmNlb2ZgIGZvciBXcml0YWJsZSBoZXJlIHdpbGwgYWxzbyBicmVhayB0aGUKCSAgLy8gTm9kZS5qcyBMYXp5VHJhbnNmb3JtIGltcGxlbWVudGF0aW9uLCB3aGljaCBoYXMgYSBub24tdHJpdmlhbCBnZXR0ZXIgZm9yCgkgIC8vIGBfd3JpdGFibGVTdGF0ZWAgdGhhdCB3b3VsZCBsZWFkIHRvIGluZmluaXRlIHJlY3Vyc2lvbi4KCSAgaWYgKCFyZWFsSGFzSW5zdGFuY2UuY2FsbChXcml0YWJsZSwgdGhpcykgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgewoJICAgIHJldHVybiBuZXcgV3JpdGFibGUob3B0aW9ucyk7CgkgIH0KCgkgIHRoaXMuX3dyaXRhYmxlU3RhdGUgPSBuZXcgV3JpdGFibGVTdGF0ZShvcHRpb25zLCB0aGlzKTsKCgkgIC8vIGxlZ2FjeS4KCSAgdGhpcy53cml0YWJsZSA9IHRydWU7CgoJICBpZiAob3B0aW9ucykgewoJICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlOwoKCSAgICBpZiAodHlwZW9mIG9wdGlvbnMud3JpdGV2ID09PSAnZnVuY3Rpb24nKSB0aGlzLl93cml0ZXYgPSBvcHRpb25zLndyaXRldjsKCSAgfQoKCSAgU3RyZWFtLmNhbGwodGhpcyk7Cgl9CgoJLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLgoJV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7CgkgIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7Cgl9OwoKCWZ1bmN0aW9uIHdyaXRlQWZ0ZXJFbmQoc3RyZWFtLCBjYikgewoJICB2YXIgZXIgPSBuZXcgRXJyb3IoJ3dyaXRlIGFmdGVyIGVuZCcpOwoJICAvLyBUT0RPOiBkZWZlciBlcnJvciBldmVudHMgY29uc2lzdGVudGx5IGV2ZXJ5d2hlcmUsIG5vdCBqdXN0IHRoZSBjYgoJICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7CgkgIHByb2Nlc3NOZXh0VGljayhjYiwgZXIpOwoJfQoKCS8vIElmIHdlIGdldCBzb21ldGhpbmcgdGhhdCBpcyBub3QgYSBidWZmZXIsIHN0cmluZywgbnVsbCwgb3IgdW5kZWZpbmVkLAoJLy8gYW5kIHdlJ3JlIG5vdCBpbiBvYmplY3RNb2RlLCB0aGVuIHRoYXQncyBhbiBlcnJvci4KCS8vIE90aGVyd2lzZSBzdHJlYW0gY2h1bmtzIGFyZSBhbGwgY29uc2lkZXJlZCB0byBiZSBvZiBsZW5ndGg9MSwgYW5kIHRoZQoJLy8gd2F0ZXJtYXJrcyBkZXRlcm1pbmUgaG93IG1hbnkgb2JqZWN0cyB0byBrZWVwIGluIHRoZSBidWZmZXIsIHJhdGhlciB0aGFuCgkvLyBob3cgbWFueSBieXRlcyBvciBjaGFyYWN0ZXJzLgoJZnVuY3Rpb24gdmFsaWRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgY2IpIHsKCSAgdmFyIHZhbGlkID0gdHJ1ZTsKCSAgdmFyIGVyID0gZmFsc2U7CgkgIC8vIEFsd2F5cyB0aHJvdyBlcnJvciBpZiBhIG51bGwgaXMgd3JpdHRlbgoJICAvLyBpZiB3ZSBhcmUgbm90IGluIG9iamVjdCBtb2RlIHRoZW4gdGhyb3cKCSAgLy8gaWYgaXQgaXMgbm90IGEgYnVmZmVyLCBzdHJpbmcsIG9yIHVuZGVmaW5lZC4KCSAgaWYgKGNodW5rID09PSBudWxsKSB7CgkgICAgZXIgPSBuZXcgVHlwZUVycm9yKCdNYXkgbm90IHdyaXRlIG51bGwgdmFsdWVzIHRvIHN0cmVhbScpOwoJICB9IGVsc2UgaWYgKCFCdWZmZXIuaXNCdWZmZXIoY2h1bmspICYmIHR5cGVvZiBjaHVuayAhPT0gJ3N0cmluZycgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCAmJiAhc3RhdGUub2JqZWN0TW9kZSkgewoJICAgIGVyID0gbmV3IFR5cGVFcnJvcignSW52YWxpZCBub24tc3RyaW5nL2J1ZmZlciBjaHVuaycpOwoJICB9CgkgIGlmIChlcikgewoJICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTsKCSAgICBwcm9jZXNzTmV4dFRpY2soY2IsIGVyKTsKCSAgICB2YWxpZCA9IGZhbHNlOwoJICB9CgkgIHJldHVybiB2YWxpZDsKCX0KCglXcml0YWJsZS5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewoJICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlOwoJICB2YXIgcmV0ID0gZmFsc2U7CgoJICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7CgkgICAgY2IgPSBlbmNvZGluZzsKCSAgICBlbmNvZGluZyA9IG51bGw7CgkgIH0KCgkgIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7CgoJICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSBjYiA9IG5vcDsKCgkgIGlmIChzdGF0ZS5lbmRlZCkgd3JpdGVBZnRlckVuZCh0aGlzLCBjYik7ZWxzZSBpZiAodmFsaWRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGNiKSkgewoJICAgIHN0YXRlLnBlbmRpbmdjYisrOwoJICAgIHJldCA9IHdyaXRlT3JCdWZmZXIodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgY2IpOwoJICB9CgoJICByZXR1cm4gcmV0OwoJfTsKCglXcml0YWJsZS5wcm90b3R5cGUuY29yayA9IGZ1bmN0aW9uICgpIHsKCSAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTsKCgkgIHN0YXRlLmNvcmtlZCsrOwoJfTsKCglXcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkgewoJICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlOwoKCSAgaWYgKHN0YXRlLmNvcmtlZCkgewoJICAgIHN0YXRlLmNvcmtlZC0tOwoKCSAgICBpZiAoIXN0YXRlLndyaXRpbmcgJiYgIXN0YXRlLmNvcmtlZCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSBjbGVhckJ1ZmZlcih0aGlzLCBzdGF0ZSk7CgkgIH0KCX07CgoJV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykgewoJICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS4KCSAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTsKCSAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTsKCSAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZzsKCSAgcmV0dXJuIHRoaXM7Cgl9OwoKCWZ1bmN0aW9uIGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpIHsKCSAgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmIHN0YXRlLmRlY29kZVN0cmluZ3MgIT09IGZhbHNlICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHsKCSAgICBjaHVuayA9IGJ1ZmZlclNoaW0uZnJvbShjaHVuaywgZW5jb2RpbmcpOwoJICB9CgkgIHJldHVybiBjaHVuazsKCX0KCgkvLyBpZiB3ZSdyZSBhbHJlYWR5IHdyaXRpbmcgc29tZXRoaW5nLCB0aGVuIGp1c3QgcHV0IHRoaXMKCS8vIGluIHRoZSBxdWV1ZSwgYW5kIHdhaXQgb3VyIHR1cm4uICBPdGhlcndpc2UsIGNhbGwgX3dyaXRlCgkvLyBJZiB3ZSByZXR1cm4gZmFsc2UsIHRoZW4gd2UgbmVlZCBhIGRyYWluIGV2ZW50LCBzbyBzZXQgdGhhdCBmbGFnLgoJZnVuY3Rpb24gd3JpdGVPckJ1ZmZlcihzdHJlYW0sIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7CgkgIGNodW5rID0gZGVjb2RlQ2h1bmsoc3RhdGUsIGNodW5rLCBlbmNvZGluZyk7CgoJICBpZiAoQnVmZmVyLmlzQnVmZmVyKGNodW5rKSkgZW5jb2RpbmcgPSAnYnVmZmVyJzsKCSAgdmFyIGxlbiA9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoOwoKCSAgc3RhdGUubGVuZ3RoICs9IGxlbjsKCgkgIHZhciByZXQgPSBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrOwoJICAvLyB3ZSBtdXN0IGVuc3VyZSB0aGF0IHByZXZpb3VzIG5lZWREcmFpbiB3aWxsIG5vdCBiZSByZXNldCB0byBmYWxzZS4KCSAgaWYgKCFyZXQpIHN0YXRlLm5lZWREcmFpbiA9IHRydWU7CgoJICBpZiAoc3RhdGUud3JpdGluZyB8fCBzdGF0ZS5jb3JrZWQpIHsKCSAgICB2YXIgbGFzdCA9IHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3Q7CgkgICAgc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdCA9IG5ldyBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKTsKCSAgICBpZiAobGFzdCkgewoJICAgICAgbGFzdC5uZXh0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDsKCSAgICB9IGVsc2UgewoJICAgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDsKCSAgICB9CgkgICAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgKz0gMTsKCSAgfSBlbHNlIHsKCSAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpOwoJICB9CgoJICByZXR1cm4gcmV0OwoJfQoKCWZ1bmN0aW9uIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgd3JpdGV2LCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpIHsKCSAgc3RhdGUud3JpdGVsZW4gPSBsZW47CgkgIHN0YXRlLndyaXRlY2IgPSBjYjsKCSAgc3RhdGUud3JpdGluZyA9IHRydWU7CgkgIHN0YXRlLnN5bmMgPSB0cnVlOwoJICBpZiAod3JpdGV2KSBzdHJlYW0uX3dyaXRldihjaHVuaywgc3RhdGUub253cml0ZSk7ZWxzZSBzdHJlYW0uX3dyaXRlKGNodW5rLCBlbmNvZGluZywgc3RhdGUub253cml0ZSk7CgkgIHN0YXRlLnN5bmMgPSBmYWxzZTsKCX0KCglmdW5jdGlvbiBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKSB7CgkgIC0tc3RhdGUucGVuZGluZ2NiOwoJICBpZiAoc3luYykgcHJvY2Vzc05leHRUaWNrKGNiLCBlcik7ZWxzZSBjYihlcik7CgoJICBzdHJlYW0uX3dyaXRhYmxlU3RhdGUuZXJyb3JFbWl0dGVkID0gdHJ1ZTsKCSAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpOwoJfQoKCWZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkgewoJICBzdGF0ZS53cml0aW5nID0gZmFsc2U7CgkgIHN0YXRlLndyaXRlY2IgPSBudWxsOwoJICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47CgkgIHN0YXRlLndyaXRlbGVuID0gMDsKCX0KCglmdW5jdGlvbiBvbndyaXRlKHN0cmVhbSwgZXIpIHsKCSAgdmFyIHN0YXRlID0gc3RyZWFtLl93cml0YWJsZVN0YXRlOwoJICB2YXIgc3luYyA9IHN0YXRlLnN5bmM7CgkgIHZhciBjYiA9IHN0YXRlLndyaXRlY2I7CgoJICBvbndyaXRlU3RhdGVVcGRhdGUoc3RhdGUpOwoKCSAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHsKCSAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldAoJICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpOwoKCSAgICBpZiAoIWZpbmlzaGVkICYmICFzdGF0ZS5jb3JrZWQgJiYgIXN0YXRlLmJ1ZmZlclByb2Nlc3NpbmcgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0KSB7CgkgICAgICBjbGVhckJ1ZmZlcihzdHJlYW0sIHN0YXRlKTsKCSAgICB9CgoJICAgIGlmIChzeW5jKSB7CgkgICAgICAvKjxyZXBsYWNlbWVudD4qLwoJICAgICAgYXN5bmNXcml0ZShhZnRlcldyaXRlLCBzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpOwoJICAgICAgLyo8L3JlcGxhY2VtZW50PiovCgkgICAgfSBlbHNlIHsKCSAgICAgICAgYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpOwoJICAgICAgfQoJICB9Cgl9CgoJZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHsKCSAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpOwoJICBzdGF0ZS5wZW5kaW5nY2ItLTsKCSAgY2IoKTsKCSAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7Cgl9CgoJLy8gTXVzdCBmb3JjZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgb24gbmV4dFRpY2ssIHNvIHRoYXQgd2UgZG9uJ3QKCS8vIGVtaXQgJ2RyYWluJyBiZWZvcmUgdGhlIHdyaXRlKCkgY29uc3VtZXIgZ2V0cyB0aGUgJ2ZhbHNlJyByZXR1cm4KCS8vIHZhbHVlLCBhbmQgaGFzIGEgY2hhbmNlIHRvIGF0dGFjaCBhICdkcmFpbicgbGlzdGVuZXIuCglmdW5jdGlvbiBvbndyaXRlRHJhaW4oc3RyZWFtLCBzdGF0ZSkgewoJICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLm5lZWREcmFpbikgewoJICAgIHN0YXRlLm5lZWREcmFpbiA9IGZhbHNlOwoJICAgIHN0cmVhbS5lbWl0KCdkcmFpbicpOwoJICB9Cgl9CgoJLy8gaWYgdGhlcmUncyBzb21ldGhpbmcgaW4gdGhlIGJ1ZmZlciB3YWl0aW5nLCB0aGVuIHByb2Nlc3MgaXQKCWZ1bmN0aW9uIGNsZWFyQnVmZmVyKHN0cmVhbSwgc3RhdGUpIHsKCSAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IHRydWU7CgkgIHZhciBlbnRyeSA9IHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdDsKCgkgIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7CgkgICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKQoJICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7CgkgICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTsKCSAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlOwoJICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5OwoKCSAgICB2YXIgY291bnQgPSAwOwoJICAgIHdoaWxlIChlbnRyeSkgewoJICAgICAgYnVmZmVyW2NvdW50XSA9IGVudHJ5OwoJICAgICAgZW50cnkgPSBlbnRyeS5uZXh0OwoJICAgICAgY291bnQgKz0gMTsKCSAgICB9CgoJICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgdHJ1ZSwgc3RhdGUubGVuZ3RoLCBidWZmZXIsICcnLCBob2xkZXIuZmluaXNoKTsKCgkgICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWUKCSAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGUKCSAgICBzdGF0ZS5wZW5kaW5nY2IrKzsKCSAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsKCSAgICBpZiAoaG9sZGVyLm5leHQpIHsKCSAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0OwoJICAgICAgaG9sZGVyLm5leHQgPSBudWxsOwoJICAgIH0gZWxzZSB7CgkgICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7CgkgICAgfQoJICB9IGVsc2UgewoJICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmUKCSAgICB3aGlsZSAoZW50cnkpIHsKCSAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rOwoJICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7CgkgICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjazsKCSAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDsKCgkgICAgICBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIGZhbHNlLCBsZW4sIGNodW5rLCBlbmNvZGluZywgY2IpOwoJICAgICAgZW50cnkgPSBlbnRyeS5uZXh0OwoJICAgICAgLy8gaWYgd2UgZGlkbid0IGNhbGwgdGhlIG9ud3JpdGUgaW1tZWRpYXRlbHksIHRoZW4KCSAgICAgIC8vIGl0IG1lYW5zIHRoYXQgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0IGRvZXMuCgkgICAgICAvLyBhbHNvLCB0aGF0IG1lYW5zIHRoYXQgdGhlIGNodW5rIGFuZCBjYiBhcmUgY3VycmVudGx5CgkgICAgICAvLyBiZWluZyBwcm9jZXNzZWQsIHNvIG1vdmUgdGhlIGJ1ZmZlciBjb3VudGVyIHBhc3QgdGhlbS4KCSAgICAgIGlmIChzdGF0ZS53cml0aW5nKSB7CgkgICAgICAgIGJyZWFrOwoJICAgICAgfQoJICAgIH0KCgkgICAgaWYgKGVudHJ5ID09PSBudWxsKSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDsKCSAgfQoKCSAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwOwoJICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTsKCSAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlOwoJfQoKCVdyaXRhYmxlLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewoJICBjYihuZXcgRXJyb3IoJ193cml0ZSgpIGlzIG5vdCBpbXBsZW1lbnRlZCcpKTsKCX07CgoJV3JpdGFibGUucHJvdG90eXBlLl93cml0ZXYgPSBudWxsOwoKCVdyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewoJICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlOwoKCSAgaWYgKHR5cGVvZiBjaHVuayA9PT0gJ2Z1bmN0aW9uJykgewoJICAgIGNiID0gY2h1bms7CgkgICAgY2h1bmsgPSBudWxsOwoJICAgIGVuY29kaW5nID0gbnVsbDsKCSAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHsKCSAgICBjYiA9IGVuY29kaW5nOwoJICAgIGVuY29kaW5nID0gbnVsbDsKCSAgfQoKCSAgaWYgKGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQpIHRoaXMud3JpdGUoY2h1bmssIGVuY29kaW5nKTsKCgkgIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzCgkgIGlmIChzdGF0ZS5jb3JrZWQpIHsKCSAgICBzdGF0ZS5jb3JrZWQgPSAxOwoJICAgIHRoaXMudW5jb3JrKCk7CgkgIH0KCgkgIC8vIGlnbm9yZSB1bm5lY2Vzc2FyeSBlbmQoKSBjYWxscy4KCSAgaWYgKCFzdGF0ZS5lbmRpbmcgJiYgIXN0YXRlLmZpbmlzaGVkKSBlbmRXcml0YWJsZSh0aGlzLCBzdGF0ZSwgY2IpOwoJfTsKCglmdW5jdGlvbiBuZWVkRmluaXNoKHN0YXRlKSB7CgkgIHJldHVybiBzdGF0ZS5lbmRpbmcgJiYgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCA9PT0gbnVsbCAmJiAhc3RhdGUuZmluaXNoZWQgJiYgIXN0YXRlLndyaXRpbmc7Cgl9CgoJZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHsKCSAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCkgewoJICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTsKCSAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7CgkgIH0KCX0KCglmdW5jdGlvbiBmaW5pc2hNYXliZShzdHJlYW0sIHN0YXRlKSB7CgkgIHZhciBuZWVkID0gbmVlZEZpbmlzaChzdGF0ZSk7CgkgIGlmIChuZWVkKSB7CgkgICAgaWYgKHN0YXRlLnBlbmRpbmdjYiA9PT0gMCkgewoJICAgICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpOwoJICAgICAgc3RhdGUuZmluaXNoZWQgPSB0cnVlOwoJICAgICAgc3RyZWFtLmVtaXQoJ2ZpbmlzaCcpOwoJICAgIH0gZWxzZSB7CgkgICAgICBwcmVmaW5pc2goc3RyZWFtLCBzdGF0ZSk7CgkgICAgfQoJICB9CgkgIHJldHVybiBuZWVkOwoJfQoKCWZ1bmN0aW9uIGVuZFdyaXRhYmxlKHN0cmVhbSwgc3RhdGUsIGNiKSB7CgkgIHN0YXRlLmVuZGluZyA9IHRydWU7CgkgIGZpbmlzaE1heWJlKHN0cmVhbSwgc3RhdGUpOwoJICBpZiAoY2IpIHsKCSAgICBpZiAoc3RhdGUuZmluaXNoZWQpIHByb2Nlc3NOZXh0VGljayhjYik7ZWxzZSBzdHJlYW0ub25jZSgnZmluaXNoJywgY2IpOwoJICB9CgkgIHN0YXRlLmVuZGVkID0gdHJ1ZTsKCSAgc3RyZWFtLndyaXRhYmxlID0gZmFsc2U7Cgl9CgoJLy8gSXQgc2VlbXMgYSBsaW5rZWQgbGlzdCBidXQgaXQgaXMgbm90CgkvLyB0aGVyZSB3aWxsIGJlIG9ubHkgMiBvZiB0aGVzZSBmb3IgZWFjaCBzdHJlYW0KCWZ1bmN0aW9uIENvcmtlZFJlcXVlc3Qoc3RhdGUpIHsKCSAgdmFyIF90aGlzID0gdGhpczsKCgkgIHRoaXMubmV4dCA9IG51bGw7CgkgIHRoaXMuZW50cnkgPSBudWxsOwoKCSAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbiAoZXJyKSB7CgkgICAgdmFyIGVudHJ5ID0gX3RoaXMuZW50cnk7CgkgICAgX3RoaXMuZW50cnkgPSBudWxsOwoJICAgIHdoaWxlIChlbnRyeSkgewoJICAgICAgdmFyIGNiID0gZW50cnkuY2FsbGJhY2s7CgkgICAgICBzdGF0ZS5wZW5kaW5nY2ItLTsKCSAgICAgIGNiKGVycik7CgkgICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7CgkgICAgfQoJICAgIGlmIChzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUpIHsKCSAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZS5uZXh0ID0gX3RoaXM7CgkgICAgfSBlbHNlIHsKCSAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IF90aGlzOwoJICAgIH0KCSAgfTsKCX0KCS8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKSwgX193ZWJwYWNrX3JlcXVpcmVfXygyMSkuc2V0SW1tZWRpYXRlKSkKCi8qKiovIH0sCi8qIDIxICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTsKCgkvLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzcwoKCWV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkgewoJICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7Cgl9OwoJZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkgewoJICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTsKCX07CglleHBvcnRzLmNsZWFyVGltZW91dCA9CglleHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7CgkgIGlmICh0aW1lb3V0KSB7CgkgICAgdGltZW91dC5jbG9zZSgpOwoJICB9Cgl9OwoKCWZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHsKCSAgdGhpcy5faWQgPSBpZDsKCSAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47Cgl9CglUaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307CglUaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkgewoJICB0aGlzLl9jbGVhckZuLmNhbGwod2luZG93LCB0aGlzLl9pZCk7Cgl9OwoKCS8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLgoJZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2VjcykgewoJICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7CgkgIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7Cgl9OwoKCWV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7CgkgIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTsKCSAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTsKCX07CgoJZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHsKCSAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpOwoKCSAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7CgkgIGlmIChtc2VjcyA+PSAwKSB7CgkgICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkgewoJICAgICAgaWYgKGl0ZW0uX29uVGltZW91dCkKCSAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7CgkgICAgfSwgbXNlY3MpOwoJICB9Cgl9OwoKCS8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3QKCV9fd2VicGFja19yZXF1aXJlX18oMjIpOwoJZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7CglleHBvcnRzLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7CgoKLyoqKi8gfSwKLyogMjIgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCwgcHJvY2VzcykgeyhmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHsKCSAgICAidXNlIHN0cmljdCI7CgoJICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7CgkgICAgICAgIHJldHVybjsKCSAgICB9CgoJICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvCgkgICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTsKCSAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7CgkgICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDsKCSAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7CgoJICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykgewoJICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nCgkgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAiZnVuY3Rpb24iKSB7CgkgICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKCIiICsgY2FsbGJhY2spOwoJICAgICAgfQoJICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHMKCSAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTsKCSAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykgewoJICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdOwoJICAgICAgfQoJICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrCgkgICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07CgkgICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzazsKCSAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpOwoJICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKzsKCSAgICB9CgoJICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkgewoJICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdOwoJICAgIH0KCgkgICAgZnVuY3Rpb24gcnVuKHRhc2spIHsKCSAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjazsKCSAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7CgkgICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHsKCSAgICAgICAgY2FzZSAwOgoJICAgICAgICAgICAgY2FsbGJhY2soKTsKCSAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICBjYXNlIDE6CgkgICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTsKCSAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICBjYXNlIDI6CgkgICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTsKCSAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICBjYXNlIDM6CgkgICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTsKCSAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICBkZWZhdWx0OgoJICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsKCSAgICAgICAgICAgIGJyZWFrOwoJICAgICAgICB9CgkgICAgfQoKCSAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7CgkgICAgICAgIC8vIEZyb20gdGhlIHNwZWM6ICJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC4iCgkgICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uCgkgICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHsKCSAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhCgkgICAgICAgICAgICAvLyAidG9vIG11Y2ggcmVjdXJzaW9uIiBlcnJvci4KCSAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpOwoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07CgkgICAgICAgICAgICBpZiAodGFzaykgewoJICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7CgkgICAgICAgICAgICAgICAgdHJ5IHsKCSAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spOwoJICAgICAgICAgICAgICAgIH0gZmluYWxseSB7CgkgICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7CgkgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlOwoJICAgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgIH0KCSAgICAgICAgfQoJICAgIH0KCgkgICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7CgkgICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7CgkgICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pOwoJICAgICAgICB9OwoJICAgIH0KCgkgICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7CgkgICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlciwKCSAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuCgkgICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7CgkgICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7CgkgICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTsKCSAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHsKCSAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7CgkgICAgICAgICAgICB9OwoJICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKCIiLCAiKiIpOwoJICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTsKCSAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzOwoJICAgICAgICB9CgkgICAgfQoKCSAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHsKCSAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlCgkgICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZQoJICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzCgoJICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9ICJzZXRJbW1lZGlhdGUkIiArIE1hdGgucmFuZG9tKCkgKyAiJCI7CgkgICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkgewoJICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmCgkgICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09ICJzdHJpbmciICYmCgkgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7CgkgICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7CgkgICAgICAgICAgICB9CgkgICAgICAgIH07CgoJICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHsKCSAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoIm9ubWVzc2FnZSIsIG9uR2xvYmFsTWVzc2FnZSk7CgkgICAgICAgIH0KCgkgICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7CgkgICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgIioiKTsKCSAgICAgICAgfTsKCSAgICB9CgoJICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkgewoJICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpOwoJICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7CgkgICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTsKCSAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpOwoJICAgICAgICB9OwoKCSAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHsKCSAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTsKCSAgICAgICAgfTsKCSAgICB9CgoJICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7CgkgICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDsKCSAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHsKCSAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZAoJICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC4KCSAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CgkgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkgewoJICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpOwoJICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsOwoJICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTsKCSAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsOwoJICAgICAgICAgICAgfTsKCSAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKCSAgICAgICAgfTsKCSAgICB9CgoJICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7CgkgICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7CgkgICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTsKCSAgICAgICAgfTsKCSAgICB9CgoJICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLgoJICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTsKCSAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDsKCgkgICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLgoJICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gIltvYmplY3QgcHJvY2Vzc10iKSB7CgkgICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjkKCSAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTsKCgkgICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7CgkgICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnMKCSAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTsKCgkgICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHsKCSAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWQKCSAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTsKCgkgICAgfSBlbHNlIGlmIChkb2MgJiYgIm9ucmVhZHlzdGF0ZWNoYW5nZSIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpKSB7CgkgICAgICAgIC8vIEZvciBJRSA24oCTOAoJICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7CgoJICAgIH0gZWxzZSB7CgkgICAgICAgIC8vIEZvciBvbGRlciBicm93c2VycwoJICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7CgkgICAgfQoKCSAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7CgkgICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTsKCX0odHlwZW9mIHNlbGYgPT09ICJ1bmRlZmluZWQiID8gdHlwZW9mIGdsb2JhbCA9PT0gInVuZGVmaW5lZCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpOwoKCS8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKSkpCgovKioqLyB9LAovKiAyMyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgeyd1c2Ugc3RyaWN0JzsKCglpZiAoIXByb2Nlc3MudmVyc2lvbiB8fAoJICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MC4nKSA9PT0gMCB8fAoJICAgIHByb2Nlc3MudmVyc2lvbi5pbmRleE9mKCd2MS4nKSA9PT0gMCAmJiBwcm9jZXNzLnZlcnNpb24uaW5kZXhPZigndjEuOC4nKSAhPT0gMCkgewoJICBtb2R1bGUuZXhwb3J0cyA9IG5leHRUaWNrOwoJfSBlbHNlIHsKCSAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzLm5leHRUaWNrOwoJfQoKCWZ1bmN0aW9uIG5leHRUaWNrKGZuLCBhcmcxLCBhcmcyLCBhcmczKSB7CgkgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHsKCSAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCciY2FsbGJhY2siIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpOwoJICB9CgkgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoOwoJICB2YXIgYXJncywgaTsKCSAgc3dpdGNoIChsZW4pIHsKCSAgY2FzZSAwOgoJICBjYXNlIDE6CgkgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZm4pOwoJICBjYXNlIDI6CgkgICAgcmV0dXJuIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gYWZ0ZXJUaWNrT25lKCkgewoJICAgICAgZm4uY2FsbChudWxsLCBhcmcxKTsKCSAgICB9KTsKCSAgY2FzZSAzOgoJICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGlja1R3bygpIHsKCSAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMik7CgkgICAgfSk7CgkgIGNhc2UgNDoKCSAgICByZXR1cm4gcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiBhZnRlclRpY2tUaHJlZSgpIHsKCSAgICAgIGZuLmNhbGwobnVsbCwgYXJnMSwgYXJnMiwgYXJnMyk7CgkgICAgfSk7CgkgIGRlZmF1bHQ6CgkgICAgYXJncyA9IG5ldyBBcnJheShsZW4gLSAxKTsKCSAgICBpID0gMDsKCSAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7CgkgICAgICBhcmdzW2krK10gPSBhcmd1bWVudHNbaV07CgkgICAgfQoJICAgIHJldHVybiBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uIGFmdGVyVGljaygpIHsKCSAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpOwoJICAgIH0pOwoJICB9Cgl9CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTIpKSkKCi8qKiovIH0sCi8qIDI0ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihCdWZmZXIpIHsvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KCS8vCgkvLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQoJLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQoJLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwoJLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAoJLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAoJLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCgkvLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKCS8vCgkvLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAoJLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgkvLwoJLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKCS8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKCS8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KCS8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAoJLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCgkvLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCgkvLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKCS8vIE5PVEU6IFRoZXNlIHR5cGUgY2hlY2tpbmcgZnVuY3Rpb25zIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIGBpbnN0YW5jZW9mYAoJLy8gYmVjYXVzZSBpdCBpcyBmcmFnaWxlIGFuZCBjYW4gYmUgZWFzaWx5IGZha2VkIHdpdGggYE9iamVjdC5jcmVhdGUoKWAuCgoJZnVuY3Rpb24gaXNBcnJheShhcmcpIHsKCSAgaWYgKEFycmF5LmlzQXJyYXkpIHsKCSAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmcpOwoJICB9CgkgIHJldHVybiBvYmplY3RUb1N0cmluZyhhcmcpID09PSAnW29iamVjdCBBcnJheV0nOwoJfQoJZXhwb3J0cy5pc0FycmF5ID0gaXNBcnJheTsKCglmdW5jdGlvbiBpc0Jvb2xlYW4oYXJnKSB7CgkgIHJldHVybiB0eXBlb2YgYXJnID09PSAnYm9vbGVhbic7Cgl9CglleHBvcnRzLmlzQm9vbGVhbiA9IGlzQm9vbGVhbjsKCglmdW5jdGlvbiBpc051bGwoYXJnKSB7CgkgIHJldHVybiBhcmcgPT09IG51bGw7Cgl9CglleHBvcnRzLmlzTnVsbCA9IGlzTnVsbDsKCglmdW5jdGlvbiBpc051bGxPclVuZGVmaW5lZChhcmcpIHsKCSAgcmV0dXJuIGFyZyA9PSBudWxsOwoJfQoJZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZCA9IGlzTnVsbE9yVW5kZWZpbmVkOwoKCWZ1bmN0aW9uIGlzTnVtYmVyKGFyZykgewoJICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7Cgl9CglleHBvcnRzLmlzTnVtYmVyID0gaXNOdW1iZXI7CgoJZnVuY3Rpb24gaXNTdHJpbmcoYXJnKSB7CgkgIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3RyaW5nJzsKCX0KCWV4cG9ydHMuaXNTdHJpbmcgPSBpc1N0cmluZzsKCglmdW5jdGlvbiBpc1N5bWJvbChhcmcpIHsKCSAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzeW1ib2wnOwoJfQoJZXhwb3J0cy5pc1N5bWJvbCA9IGlzU3ltYm9sOwoKCWZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykgewoJICByZXR1cm4gYXJnID09PSB2b2lkIDA7Cgl9CglleHBvcnRzLmlzVW5kZWZpbmVkID0gaXNVbmRlZmluZWQ7CgoJZnVuY3Rpb24gaXNSZWdFeHAocmUpIHsKCSAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7Cgl9CglleHBvcnRzLmlzUmVnRXhwID0gaXNSZWdFeHA7CgoJZnVuY3Rpb24gaXNPYmplY3QoYXJnKSB7CgkgIHJldHVybiB0eXBlb2YgYXJnID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7Cgl9CglleHBvcnRzLmlzT2JqZWN0ID0gaXNPYmplY3Q7CgoJZnVuY3Rpb24gaXNEYXRlKGQpIHsKCSAgcmV0dXJuIG9iamVjdFRvU3RyaW5nKGQpID09PSAnW29iamVjdCBEYXRlXSc7Cgl9CglleHBvcnRzLmlzRGF0ZSA9IGlzRGF0ZTsKCglmdW5jdGlvbiBpc0Vycm9yKGUpIHsKCSAgcmV0dXJuIChvYmplY3RUb1N0cmluZyhlKSA9PT0gJ1tvYmplY3QgRXJyb3JdJyB8fCBlIGluc3RhbmNlb2YgRXJyb3IpOwoJfQoJZXhwb3J0cy5pc0Vycm9yID0gaXNFcnJvcjsKCglmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykgewoJICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJzsKCX0KCWV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247CgoJZnVuY3Rpb24gaXNQcmltaXRpdmUoYXJnKSB7CgkgIHJldHVybiBhcmcgPT09IG51bGwgfHwKCSAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdib29sZWFuJyB8fAoJICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwKCSAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnIHx8CgkgICAgICAgICB0eXBlb2YgYXJnID09PSAnc3ltYm9sJyB8fCAgLy8gRVM2IHN5bWJvbAoJICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3VuZGVmaW5lZCc7Cgl9CglleHBvcnRzLmlzUHJpbWl0aXZlID0gaXNQcmltaXRpdmU7CgoJZXhwb3J0cy5pc0J1ZmZlciA9IEJ1ZmZlci5pc0J1ZmZlcjsKCglmdW5jdGlvbiBvYmplY3RUb1N0cmluZyhvKSB7CgkgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7Cgl9CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oOCkuQnVmZmVyKSkKCi8qKiovIH0sCi8qIDI1ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCS8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsKCS8qKgoJICogTW9kdWxlIGV4cG9ydHMuCgkgKi8KCgltb2R1bGUuZXhwb3J0cyA9IGRlcHJlY2F0ZTsKCgkvKioKCSAqIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuCgkgKiBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LgoJICoKCSAqIElmIGBsb2NhbFN0b3JhZ2Uubm9EZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBpdCBpcyBhIG5vLW9wLgoJICoKCSAqIElmIGBsb2NhbFN0b3JhZ2UudGhyb3dEZXByZWNhdGlvbiA9IHRydWVgIGlzIHNldCwgdGhlbiBkZXByZWNhdGVkIGZ1bmN0aW9ucwoJICogd2lsbCB0aHJvdyBhbiBFcnJvciB3aGVuIGludm9rZWQuCgkgKgoJICogSWYgYGxvY2FsU3RvcmFnZS50cmFjZURlcHJlY2F0aW9uID0gdHJ1ZWAgaXMgc2V0LCB0aGVuIGRlcHJlY2F0ZWQgZnVuY3Rpb25zCgkgKiB3aWxsIGludm9rZSBgY29uc29sZS50cmFjZSgpYCBpbnN0ZWFkIG9mIGBjb25zb2xlLmVycm9yKClgLgoJICoKCSAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gdGhlIGZ1bmN0aW9uIHRvIGRlcHJlY2F0ZQoJICogQHBhcmFtIHtTdHJpbmd9IG1zZyAtIHRoZSBzdHJpbmcgdG8gcHJpbnQgdG8gdGhlIGNvbnNvbGUgd2hlbiBgZm5gIGlzIGludm9rZWQKCSAqIEByZXR1cm5zIHtGdW5jdGlvbn0gYSBuZXcgImRlcHJlY2F0ZWQiIHZlcnNpb24gb2YgYGZuYAoJICogQGFwaSBwdWJsaWMKCSAqLwoKCWZ1bmN0aW9uIGRlcHJlY2F0ZSAoZm4sIG1zZykgewoJICBpZiAoY29uZmlnKCdub0RlcHJlY2F0aW9uJykpIHsKCSAgICByZXR1cm4gZm47CgkgIH0KCgkgIHZhciB3YXJuZWQgPSBmYWxzZTsKCSAgZnVuY3Rpb24gZGVwcmVjYXRlZCgpIHsKCSAgICBpZiAoIXdhcm5lZCkgewoJICAgICAgaWYgKGNvbmZpZygndGhyb3dEZXByZWNhdGlvbicpKSB7CgkgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpOwoJICAgICAgfSBlbHNlIGlmIChjb25maWcoJ3RyYWNlRGVwcmVjYXRpb24nKSkgewoJICAgICAgICBjb25zb2xlLnRyYWNlKG1zZyk7CgkgICAgICB9IGVsc2UgewoJICAgICAgICBjb25zb2xlLndhcm4obXNnKTsKCSAgICAgIH0KCSAgICAgIHdhcm5lZCA9IHRydWU7CgkgICAgfQoJICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoJICB9CgoJICByZXR1cm4gZGVwcmVjYXRlZDsKCX0KCgkvKioKCSAqIENoZWNrcyBgbG9jYWxTdG9yYWdlYCBmb3IgYm9vbGVhbiB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBgbmFtZWAuCgkgKgoJICogQHBhcmFtIHtTdHJpbmd9IG5hbWUKCSAqIEByZXR1cm5zIHtCb29sZWFufQoJICogQGFwaSBwcml2YXRlCgkgKi8KCglmdW5jdGlvbiBjb25maWcgKG5hbWUpIHsKCSAgLy8gYWNjZXNzaW5nIGdsb2JhbC5sb2NhbFN0b3JhZ2UgY2FuIHRyaWdnZXIgYSBET01FeGNlcHRpb24gaW4gc2FuZGJveGVkIGlmcmFtZXMKCSAgdHJ5IHsKCSAgICBpZiAoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpIHJldHVybiBmYWxzZTsKCSAgfSBjYXRjaCAoXykgewoJICAgIHJldHVybiBmYWxzZTsKCSAgfQoJICB2YXIgdmFsID0gZ2xvYmFsLmxvY2FsU3RvcmFnZVtuYW1lXTsKCSAgaWYgKG51bGwgPT0gdmFsKSByZXR1cm4gZmFsc2U7CgkgIHJldHVybiBTdHJpbmcodmFsKS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7Cgl9CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKQoKLyoqKi8gfSwKLyogMjYgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKEJ1ZmZlcikgey8qIQoJICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuCgkgKgoJICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+CgkgKiBAbGljZW5zZSAgTUlUCgkgKi8KCS8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovCgoJJ3VzZSBzdHJpY3QnCgoJdmFyIGJhc2U2NCA9IF9fd2VicGFja19yZXF1aXJlX18oOSkKCXZhciBpZWVlNzU0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCkKCglleHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlcgoJZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlcgoJZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwCgoJdmFyIEtfTUFYX0xFTkdUSCA9IDB4N2ZmZmZmZmYKCWV4cG9ydHMua01heExlbmd0aCA9IEtfTUFYX0xFTkdUSAoKCS8qKgoJICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDoKCSAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpCgkgKiAgID09PSBmYWxzZSAgIFByaW50IHdhcm5pbmcgYW5kIHJlY29tbWVuZCB1c2luZyBgYnVmZmVyYCB2NC54IHdoaWNoIGhhcyBhbiBPYmplY3QKCSAqICAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpCgkgKgoJICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLAoJICogT3BlcmEgMTEuNissIGlPUyA0LjIrLgoJICoKCSAqIFdlIHJlcG9ydCB0aGF0IHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGlmIHRoZSBhcmUgbm90IHN1YmNsYXNzYWJsZQoJICogdXNpbmcgX19wcm90b19fLiBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YAoJICogKFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4KS4gSUUgMTAgbGFja3Mgc3VwcG9ydAoJICogZm9yIF9fcHJvdG9fXyBhbmQgaGFzIGEgYnVnZ3kgdHlwZWQgYXJyYXkgaW1wbGVtZW50YXRpb24uCgkgKi8KCUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gdHlwZWRBcnJheVN1cHBvcnQoKQoKCWlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHsKCSAgY29uc29sZS5lcnJvcigKCSAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgKwoJICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LicpCgl9CgoJZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkgewoJICAvLyBDYW4gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWQ/CgkgIHRyeSB7CgkgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpCgkgICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19CgkgICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIKCSAgfSBjYXRjaCAoZSkgewoJICAgIHJldHVybiBmYWxzZQoJICB9Cgl9CgoJZnVuY3Rpb24gY3JlYXRlQnVmZmVyIChsZW5ndGgpIHsKCSAgaWYgKGxlbmd0aCA+IEtfTUFYX0xFTkdUSCkgewoJICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpCgkgIH0KCSAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UKCSAgdmFyIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCkKCSAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKCSAgcmV0dXJuIGJ1ZgoJfQoKCS8qKgoJICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyCgkgKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mCgkgKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzCgkgKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdAoJICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC4KCSAqCgkgKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuCgkgKi8KCglmdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7CgkgIC8vIENvbW1vbiBjYXNlLgoJICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHsKCSAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7CgkgICAgICB0aHJvdyBuZXcgRXJyb3IoCgkgICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZycKCSAgICAgICkKCSAgICB9CgkgICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZykKCSAgfQoJICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKCX0KCgkvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85NwoJaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmCgkgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7CgkgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7CgkgICAgdmFsdWU6IG51bGwsCgkgICAgY29uZmlndXJhYmxlOiB0cnVlLAoJICAgIGVudW1lcmFibGU6IGZhbHNlLAoJICAgIHdyaXRhYmxlOiBmYWxzZQoJICB9KQoJfQoKCUJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvbgoKCWZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHsKCSAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHsKCSAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcidmFsdWUiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJykKCSAgfQoKCSAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgewoJICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkKCSAgfQoKCSAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKCSAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCkKCSAgfQoKCSAgcmV0dXJuIGZyb21PYmplY3QodmFsdWUpCgl9CgoJLyoqCgkgKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvcgoJICogaWYgdmFsdWUgaXMgYSBudW1iZXIuCgkgKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pCgkgKiBCdWZmZXIuZnJvbShhcnJheSkKCSAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcikKCSAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKQoJICoqLwoJQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkgewoJICByZXR1cm4gZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKQoJfQoKCS8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1ZzoKCS8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4CglCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlCglCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheQoKCWZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHsKCSAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykgewoJICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJzaXplIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJykKCSAgfSBlbHNlIGlmIChzaXplIDwgMCkgewoJICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCcic2l6ZSIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKQoJICB9Cgl9CgoJZnVuY3Rpb24gYWxsb2MgKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7CgkgIGFzc2VydFNpemUoc2l6ZSkKCSAgaWYgKHNpemUgPD0gMCkgewoJICAgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSkKCSAgfQoJICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7CgkgICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXMKCSAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkCgkgICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LgoJICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnCgkgICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKQoJICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKQoJICB9CgkgIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSkKCX0KCgkvKioKCSAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS4KCSAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSkKCSAqKi8KCUJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykgewoJICByZXR1cm4gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpCgl9CgoJZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHNpemUpIHsKCSAgYXNzZXJ0U2l6ZShzaXplKQoJICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKQoJfQoKCS8qKgoJICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS4KCSAqICovCglCdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkgewoJICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSkKCX0KCS8qKgoJICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuCgkgKi8KCUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkgewoJICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSkKCX0KCglmdW5jdGlvbiBmcm9tU3RyaW5nIChzdHJpbmcsIGVuY29kaW5nKSB7CgkgIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykgewoJICAgIGVuY29kaW5nID0gJ3V0ZjgnCgkgIH0KCgkgIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7CgkgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignImVuY29kaW5nIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJykKCSAgfQoKCSAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwCgkgIHZhciBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKQoKCSAgdmFyIGFjdHVhbCA9IGJ1Zi53cml0ZShzdHJpbmcsIGVuY29kaW5nKQoKCSAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7CgkgICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsCgkgICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy4KCSAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJykKCSAgICBidWYgPSBidWYuc2xpY2UoMCwgYWN0dWFsKQoJICB9CgoJICByZXR1cm4gYnVmCgl9CgoJZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAoYXJyYXkpIHsKCSAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMAoJICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aCkKCSAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkgewoJICAgIGJ1ZltpXSA9IGFycmF5W2ldICYgMjU1CgkgIH0KCSAgcmV0dXJuIGJ1ZgoJfQoKCWZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkgewoJICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXIKCgkgIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkgewoJICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcJ29mZnNldFwnIGlzIG91dCBvZiBib3VuZHMnKQoJICB9CgoJICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7CgkgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wnbGVuZ3RoXCcgaXMgb3V0IG9mIGJvdW5kcycpCgkgIH0KCgkgIHZhciBidWYKCSAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkgewoJICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5KQoJICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7CgkgICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpCgkgIH0gZWxzZSB7CgkgICAgYnVmID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkKCSAgfQoKCSAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UKCSAgYnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKCSAgcmV0dXJuIGJ1ZgoJfQoKCWZ1bmN0aW9uIGZyb21PYmplY3QgKG9iaikgewoJICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHsKCSAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDAKCSAgICB2YXIgYnVmID0gY3JlYXRlQnVmZmVyKGxlbikKCgkgICAgaWYgKGJ1Zi5sZW5ndGggPT09IDApIHsKCSAgICAgIHJldHVybiBidWYKCSAgICB9CgoJICAgIG9iai5jb3B5KGJ1ZiwgMCwgMCwgbGVuKQoJICAgIHJldHVybiBidWYKCSAgfQoKCSAgaWYgKG9iaikgewoJICAgIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJgoJICAgICAgICBvYmouYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8ICdsZW5ndGgnIGluIG9iaikgewoJICAgICAgaWYgKHR5cGVvZiBvYmoubGVuZ3RoICE9PSAnbnVtYmVyJyB8fCBpc25hbihvYmoubGVuZ3RoKSkgewoJICAgICAgICByZXR1cm4gY3JlYXRlQnVmZmVyKDApCgkgICAgICB9CgkgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmopCgkgICAgfQoKCSAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIEFycmF5LmlzQXJyYXkob2JqLmRhdGEpKSB7CgkgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShvYmouZGF0YSkKCSAgICB9CgkgIH0KCgkgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKQoJfQoKCWZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkgewoJICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW4KCSAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pCgkgIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7CgkgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArCgkgICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJykKCSAgfQoJICByZXR1cm4gbGVuZ3RoIHwgMAoJfQoKCWZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkgewoJICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXEKCSAgICBsZW5ndGggPSAwCgkgIH0KCSAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKQoJfQoKCUJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7CgkgIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpCgl9CgoJQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7CgkgIGlmICghQnVmZmVyLmlzQnVmZmVyKGEpIHx8ICFCdWZmZXIuaXNCdWZmZXIoYikpIHsKCSAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJykKCSAgfQoKCSAgaWYgKGEgPT09IGIpIHJldHVybiAwCgoJICB2YXIgeCA9IGEubGVuZ3RoCgkgIHZhciB5ID0gYi5sZW5ndGgKCgkgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7CgkgICAgaWYgKGFbaV0gIT09IGJbaV0pIHsKCSAgICAgIHggPSBhW2ldCgkgICAgICB5ID0gYltpXQoJICAgICAgYnJlYWsKCSAgICB9CgkgIH0KCgkgIGlmICh4IDwgeSkgcmV0dXJuIC0xCgkgIGlmICh5IDwgeCkgcmV0dXJuIDEKCSAgcmV0dXJuIDAKCX0KCglCdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7CgkgIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7CgkgICAgY2FzZSAnaGV4JzoKCSAgICBjYXNlICd1dGY4JzoKCSAgICBjYXNlICd1dGYtOCc6CgkgICAgY2FzZSAnYXNjaWknOgoJICAgIGNhc2UgJ2xhdGluMSc6CgkgICAgY2FzZSAnYmluYXJ5JzoKCSAgICBjYXNlICdiYXNlNjQnOgoJICAgIGNhc2UgJ3VjczInOgoJICAgIGNhc2UgJ3Vjcy0yJzoKCSAgICBjYXNlICd1dGYxNmxlJzoKCSAgICBjYXNlICd1dGYtMTZsZSc6CgkgICAgICByZXR1cm4gdHJ1ZQoJICAgIGRlZmF1bHQ6CgkgICAgICByZXR1cm4gZmFsc2UKCSAgfQoJfQoKCUJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkgewoJICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHsKCSAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcibGlzdCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJykKCSAgfQoKCSAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7CgkgICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKQoJICB9CgoJICB2YXIgaQoJICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHsKCSAgICBsZW5ndGggPSAwCgkgICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHsKCSAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aAoJICAgIH0KCSAgfQoKCSAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpCgkgIHZhciBwb3MgPSAwCgkgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7CgkgICAgdmFyIGJ1ZiA9IGxpc3RbaV0KCSAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7CgkgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCcibGlzdCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJykKCSAgICB9CgkgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpCgkgICAgcG9zICs9IGJ1Zi5sZW5ndGgKCSAgfQoJICByZXR1cm4gYnVmZmVyCgl9CgoJZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykgewoJICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHsKCSAgICByZXR1cm4gc3RyaW5nLmxlbmd0aAoJICB9CgkgIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiYKCSAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHsKCSAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGgKCSAgfQoJICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHsKCSAgICBzdHJpbmcgPSAnJyArIHN0cmluZwoJICB9CgoJICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aAoJICBpZiAobGVuID09PSAwKSByZXR1cm4gMAoKCSAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uCgkgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlCgkgIGZvciAoOzspIHsKCSAgICBzd2l0Y2ggKGVuY29kaW5nKSB7CgkgICAgICBjYXNlICdhc2NpaSc6CgkgICAgICBjYXNlICdsYXRpbjEnOgoJICAgICAgY2FzZSAnYmluYXJ5JzoKCSAgICAgICAgcmV0dXJuIGxlbgoJICAgICAgY2FzZSAndXRmOCc6CgkgICAgICBjYXNlICd1dGYtOCc6CgkgICAgICBjYXNlIHVuZGVmaW5lZDoKCSAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoCgkgICAgICBjYXNlICd1Y3MyJzoKCSAgICAgIGNhc2UgJ3Vjcy0yJzoKCSAgICAgIGNhc2UgJ3V0ZjE2bGUnOgoJICAgICAgY2FzZSAndXRmLTE2bGUnOgoJICAgICAgICByZXR1cm4gbGVuICogMgoJICAgICAgY2FzZSAnaGV4JzoKCSAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMQoJICAgICAgY2FzZSAnYmFzZTY0JzoKCSAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGgKCSAgICAgIGRlZmF1bHQ6CgkgICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4CgkgICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkKCSAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlCgkgICAgfQoJICB9Cgl9CglCdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGgKCglmdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7CgkgIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlCgoJICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0ICJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5CgkgIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuCgoJICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmQKCSAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLgoJICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLAoJICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi4KCSAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7CgkgICAgc3RhcnQgPSAwCgkgIH0KCSAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzIKCSAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy4KCSAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHsKCSAgICByZXR1cm4gJycKCSAgfQoKCSAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7CgkgICAgZW5kID0gdGhpcy5sZW5ndGgKCSAgfQoKCSAgaWYgKGVuZCA8PSAwKSB7CgkgICAgcmV0dXJuICcnCgkgIH0KCgkgIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuCgkgIGVuZCA+Pj49IDAKCSAgc3RhcnQgPj4+PSAwCgoJICBpZiAoZW5kIDw9IHN0YXJ0KSB7CgkgICAgcmV0dXJuICcnCgkgIH0KCgkgIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnCgoJICB3aGlsZSAodHJ1ZSkgewoJICAgIHN3aXRjaCAoZW5jb2RpbmcpIHsKCSAgICAgIGNhc2UgJ2hleCc6CgkgICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKCSAgICAgIGNhc2UgJ3V0ZjgnOgoJICAgICAgY2FzZSAndXRmLTgnOgoJICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgoJICAgICAgY2FzZSAnYXNjaWknOgoJICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKQoKCSAgICAgIGNhc2UgJ2xhdGluMSc6CgkgICAgICBjYXNlICdiaW5hcnknOgoJICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZCkKCgkgICAgICBjYXNlICdiYXNlNjQnOgoJICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZCkKCgkgICAgICBjYXNlICd1Y3MyJzoKCSAgICAgIGNhc2UgJ3Vjcy0yJzoKCSAgICAgIGNhc2UgJ3V0ZjE2bGUnOgoJICAgICAgY2FzZSAndXRmLTE2bGUnOgoJICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpCgoJICAgICAgZGVmYXVsdDoKCSAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpCgkgICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKCkKCSAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlCgkgICAgfQoJICB9Cgl9CgoJLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3QKCS8vIEJ1ZmZlciBpbnN0YW5jZXMuCglCdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWUKCglmdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7CgkgIHZhciBpID0gYltuXQoJICBiW25dID0gYlttXQoJICBiW21dID0gaQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHsKCSAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoCgkgIGlmIChsZW4gJSAyICE9PSAwKSB7CgkgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJykKCSAgfQoJICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7CgkgICAgc3dhcCh0aGlzLCBpLCBpICsgMSkKCSAgfQoJICByZXR1cm4gdGhpcwoJfQoKCUJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHsKCSAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoCgkgIGlmIChsZW4gJSA0ICE9PSAwKSB7CgkgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJykKCSAgfQoJICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7CgkgICAgc3dhcCh0aGlzLCBpLCBpICsgMykKCSAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMikKCSAgfQoJICByZXR1cm4gdGhpcwoJfQoKCUJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHsKCSAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoCgkgIGlmIChsZW4gJSA4ICE9PSAwKSB7CgkgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJykKCSAgfQoJICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7CgkgICAgc3dhcCh0aGlzLCBpLCBpICsgNykKCSAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNikKCSAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSkKCSAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNCkKCSAgfQoJICByZXR1cm4gdGhpcwoJfQoKCUJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7CgkgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aAoJICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJycKCSAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKQoJICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykKCX0KCglCdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikgewoJICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpCgkgIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZQoJICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDAKCX0KCglCdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHsKCSAgdmFyIHN0ciA9ICcnCgkgIHZhciBtYXggPSBleHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTCgkgIGlmICh0aGlzLmxlbmd0aCA+IDApIHsKCSAgICBzdHIgPSB0aGlzLnRvU3RyaW5nKCdoZXgnLCAwLCBtYXgpLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyAnKQoJICAgIGlmICh0aGlzLmxlbmd0aCA+IG1heCkgc3RyICs9ICcgLi4uICcKCSAgfQoJICByZXR1cm4gJzxCdWZmZXIgJyArIHN0ciArICc+JwoJfQoKCUJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7CgkgIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHsKCSAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJykKCSAgfQoKCSAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHsKCSAgICBzdGFydCA9IDAKCSAgfQoJICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHsKCSAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMAoJICB9CgkgIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkgewoJICAgIHRoaXNTdGFydCA9IDAKCSAgfQoJICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7CgkgICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoCgkgIH0KCgkgIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkgewoJICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKQoJICB9CgoJICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7CgkgICAgcmV0dXJuIDAKCSAgfQoJICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHsKCSAgICByZXR1cm4gLTEKCSAgfQoJICBpZiAoc3RhcnQgPj0gZW5kKSB7CgkgICAgcmV0dXJuIDEKCSAgfQoKCSAgc3RhcnQgPj4+PSAwCgkgIGVuZCA+Pj49IDAKCSAgdGhpc1N0YXJ0ID4+Pj0gMAoJICB0aGlzRW5kID4+Pj0gMAoKCSAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDAKCgkgIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydAoJICB2YXIgeSA9IGVuZCAtIHN0YXJ0CgkgIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KQoKCSAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpCgkgIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpCgoJICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7CgkgICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7CgkgICAgICB4ID0gdGhpc0NvcHlbaV0KCSAgICAgIHkgPSB0YXJnZXRDb3B5W2ldCgkgICAgICBicmVhawoJICAgIH0KCSAgfQoKCSAgaWYgKHggPCB5KSByZXR1cm4gLTEKCSAgaWYgKHkgPCB4KSByZXR1cm4gMQoJICByZXR1cm4gMAoJfQoKCS8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCwKCS8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuCgkvLwoJLy8gQXJndW1lbnRzOgoJLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2gKCS8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyCgkvLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzIKCS8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nCgkvLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZgoJZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7CgkgIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaAoJICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xCgoJICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldAoJICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7CgkgICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0CgkgICAgYnl0ZU9mZnNldCA9IDAKCSAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikgewoJICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmCgkgIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7CgkgICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwCgkgIH0KCSAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLgoJICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHsKCSAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCAiZm9vIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyCgkgICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpCgkgIH0KCgkgIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyCgkgIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0CgkgIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHsKCSAgICBpZiAoZGlyKSByZXR1cm4gLTEKCSAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMQoJICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7CgkgICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDAKCSAgICBlbHNlIHJldHVybiAtMQoJICB9CgoJICAvLyBOb3JtYWxpemUgdmFsCgkgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykgewoJICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpCgkgIH0KCgkgIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mCgkgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkgewoJICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHMKCSAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkgewoJICAgICAgcmV0dXJuIC0xCgkgICAgfQoJICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpCgkgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHsKCSAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV0KCSAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHsKCSAgICAgIGlmIChkaXIpIHsKCSAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCkKCSAgICAgIH0gZWxzZSB7CgkgICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KQoJICAgICAgfQoJICAgIH0KCSAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikKCSAgfQoKCSAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJykKCX0KCglmdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7CgkgIHZhciBpbmRleFNpemUgPSAxCgkgIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoCgkgIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoCgoJICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkgewoJICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpCgkgICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHwKCSAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykgewoJICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7CgkgICAgICAgIHJldHVybiAtMQoJICAgICAgfQoJICAgICAgaW5kZXhTaXplID0gMgoJICAgICAgYXJyTGVuZ3RoIC89IDIKCSAgICAgIHZhbExlbmd0aCAvPSAyCgkgICAgICBieXRlT2Zmc2V0IC89IDIKCSAgICB9CgkgIH0KCgkgIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkgewoJICAgIGlmIChpbmRleFNpemUgPT09IDEpIHsKCSAgICAgIHJldHVybiBidWZbaV0KCSAgICB9IGVsc2UgewoJICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSkKCSAgICB9CgkgIH0KCgkgIHZhciBpCgkgIGlmIChkaXIpIHsKCSAgICB2YXIgZm91bmRJbmRleCA9IC0xCgkgICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7CgkgICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7CgkgICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGkKCSAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZQoJICAgICAgfSBlbHNlIHsKCSAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4CgkgICAgICAgIGZvdW5kSW5kZXggPSAtMQoJICAgICAgfQoJICAgIH0KCSAgfSBlbHNlIHsKCSAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aAoJICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7CgkgICAgICB2YXIgZm91bmQgPSB0cnVlCgkgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7CgkgICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHsKCSAgICAgICAgICBmb3VuZCA9IGZhbHNlCgkgICAgICAgICAgYnJlYWsKCSAgICAgICAgfQoJICAgICAgfQoJICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaQoJICAgIH0KCSAgfQoKCSAgcmV0dXJuIC0xCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7CgkgIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgewoJICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSkKCX0KCglCdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHsKCSAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKQoJfQoKCWZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKCSAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMAoJICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldAoJICBpZiAoIWxlbmd0aCkgewoJICAgIGxlbmd0aCA9IHJlbWFpbmluZwoJICB9IGVsc2UgewoJICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpCgkgICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykgewoJICAgICAgbGVuZ3RoID0gcmVtYWluaW5nCgkgICAgfQoJICB9CgoJICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0cwoJICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aAoJICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJykKCgkgIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7CgkgICAgbGVuZ3RoID0gc3RyTGVuIC8gMgoJICB9CgkgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKCSAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KQoJICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaQoJICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZAoJICB9CgkgIHJldHVybiBpCgl9CgoJZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKCSAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCkKCX0KCglmdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKCSAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCgl9CgoJZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewoJICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgl9CgoJZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkgewoJICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCgl9CgoJZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHsKCSAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aCkKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7CgkgIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpCgkgIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkgewoJICAgIGVuY29kaW5nID0gJ3V0ZjgnCgkgICAgbGVuZ3RoID0gdGhpcy5sZW5ndGgKCSAgICBvZmZzZXQgPSAwCgkgIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKQoJICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7CgkgICAgZW5jb2RpbmcgPSBvZmZzZXQKCSAgICBsZW5ndGggPSB0aGlzLmxlbmd0aAoJICAgIG9mZnNldCA9IDAKCSAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSkKCSAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7CgkgICAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHsKCSAgICAgIGxlbmd0aCA9IGxlbmd0aCA+Pj4gMAoJICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnCgkgICAgfSBlbHNlIHsKCSAgICAgIGVuY29kaW5nID0gbGVuZ3RoCgkgICAgICBsZW5ndGggPSB1bmRlZmluZWQKCSAgICB9CgkgIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTMKCSAgfSBlbHNlIHsKCSAgICB0aHJvdyBuZXcgRXJyb3IoCgkgICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnCgkgICAgKQoJICB9CgoJICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXQKCSAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nCgoJICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkgewoJICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpCgkgIH0KCgkgIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnCgoJICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZQoJICBmb3IgKDs7KSB7CgkgICAgc3dpdGNoIChlbmNvZGluZykgewoJICAgICAgY2FzZSAnaGV4JzoKCSAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgoJICAgICAgY2FzZSAndXRmOCc6CgkgICAgICBjYXNlICd1dGYtOCc6CgkgICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCgkgICAgICBjYXNlICdhc2NpaSc6CgkgICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpCgoJICAgICAgY2FzZSAnbGF0aW4xJzoKCSAgICAgIGNhc2UgJ2JpbmFyeSc6CgkgICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKCSAgICAgIGNhc2UgJ2Jhc2U2NCc6CgkgICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlCgkgICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKQoKCSAgICAgIGNhc2UgJ3VjczInOgoJICAgICAgY2FzZSAndWNzLTInOgoJICAgICAgY2FzZSAndXRmMTZsZSc6CgkgICAgICBjYXNlICd1dGYtMTZsZSc6CgkgICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkKCgkgICAgICBkZWZhdWx0OgoJICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZykKCSAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKQoJICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWUKCSAgICB9CgkgIH0KCX0KCglCdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7CgkgIHJldHVybiB7CgkgICAgdHlwZTogJ0J1ZmZlcicsCgkgICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApCgkgIH0KCX0KCglmdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CgkgIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHsKCSAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKQoJICB9IGVsc2UgewoJICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpCgkgIH0KCX0KCglmdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewoJICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpCgkgIHZhciByZXMgPSBbXQoKCSAgdmFyIGkgPSBzdGFydAoJICB3aGlsZSAoaSA8IGVuZCkgewoJICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV0KCSAgICB2YXIgY29kZVBvaW50ID0gbnVsbAoJICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNAoJICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzCgkgICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDIKCSAgICAgIDogMQoKCSAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7CgkgICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50CgoJICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7CgkgICAgICAgIGNhc2UgMToKCSAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkgewoJICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlCgkgICAgICAgICAgfQoJICAgICAgICAgIGJyZWFrCgkgICAgICAgIGNhc2UgMjoKCSAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXQoJICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7CgkgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRikKCSAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RikgewoJICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50CgkgICAgICAgICAgICB9CgkgICAgICAgICAgfQoJICAgICAgICAgIGJyZWFrCgkgICAgICAgIGNhc2UgMzoKCSAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXQoJICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl0KCSAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHsKCSAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKQoJICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkgewoJICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50CgkgICAgICAgICAgICB9CgkgICAgICAgICAgfQoJICAgICAgICAgIGJyZWFrCgkgICAgICAgIGNhc2UgNDoKCSAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXQoJICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl0KCSAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXQoJICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7CgkgICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRikKCSAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkgewoJICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50CgkgICAgICAgICAgICB9CgkgICAgICAgICAgfQoJICAgICAgfQoJICAgIH0KCgkgICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkgewoJICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYQoJICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZQoJICAgICAgY29kZVBvaW50ID0gMHhGRkZECgkgICAgICBieXRlc1BlclNlcXVlbmNlID0gMQoJICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7CgkgICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKQoJICAgICAgY29kZVBvaW50IC09IDB4MTAwMDAKCSAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCkKCSAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGCgkgICAgfQoKCSAgICByZXMucHVzaChjb2RlUG9pbnQpCgkgICAgaSArPSBieXRlc1BlclNlcXVlbmNlCgkgIH0KCgkgIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKQoJfQoKCS8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aAoJLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLgoJLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eQoJdmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwCgoJZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7CgkgIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aAoJICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7CgkgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpCgkgIH0KCgkgIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZCIuCgkgIHZhciByZXMgPSAnJwoJICB2YXIgaSA9IDAKCSAgd2hpbGUgKGkgPCBsZW4pIHsKCSAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSgKCSAgICAgIFN0cmluZywKCSAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkKCSAgICApCgkgIH0KCSAgcmV0dXJuIHJlcwoJfQoKCWZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewoJICB2YXIgcmV0ID0gJycKCSAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKQoKCSAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKCSAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKQoJICB9CgkgIHJldHVybiByZXQKCX0KCglmdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7CgkgIHZhciByZXQgPSAnJwoJICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpCgoJICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewoJICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSkKCSAgfQoJICByZXR1cm4gcmV0Cgl9CgoJZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewoJICB2YXIgbGVuID0gYnVmLmxlbmd0aAoKCSAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMAoJICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuCgoJICB2YXIgb3V0ID0gJycKCSAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHsKCSAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKQoJICB9CgkgIHJldHVybiBvdXQKCX0KCglmdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkgewoJICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZCkKCSAgdmFyIHJlcyA9ICcnCgkgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHsKCSAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NikKCSAgfQoJICByZXR1cm4gcmVzCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7CgkgIHZhciBsZW4gPSB0aGlzLmxlbmd0aAoJICBzdGFydCA9IH5+c3RhcnQKCSAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZAoKCSAgaWYgKHN0YXJ0IDwgMCkgewoJICAgIHN0YXJ0ICs9IGxlbgoJICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMAoJICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7CgkgICAgc3RhcnQgPSBsZW4KCSAgfQoKCSAgaWYgKGVuZCA8IDApIHsKCSAgICBlbmQgKz0gbGVuCgkgICAgaWYgKGVuZCA8IDApIGVuZCA9IDAKCSAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHsKCSAgICBlbmQgPSBsZW4KCSAgfQoKCSAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydAoKCSAgdmFyIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZCkKCSAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UKCSAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGUKCSAgcmV0dXJuIG5ld0J1ZgoJfQoKCS8qCgkgKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy4KCSAqLwoJZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHsKCSAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JykKCSAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKCSAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpCgoJICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdCgkgIHZhciBtdWwgPSAxCgkgIHZhciBpID0gMAoJICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkgewoJICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsCgkgIH0KCgkgIHJldHVybiB2YWwKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSB7CgkgICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aCkKCSAgfQoKCSAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXQoJICB2YXIgbXVsID0gMQoJICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsCgkgIH0KCgkgIHJldHVybiB2YWwKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aCkKCSAgcmV0dXJuIHRoaXNbb2Zmc2V0XQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKQoJICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aCkKCSAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgoJICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHwKCSAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHwKCSAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgKwoJICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgoJICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgKwoJICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfAoJICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHwKCSAgICB0aGlzW29mZnNldCArIDNdKQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKQoKCSAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XQoJICB2YXIgbXVsID0gMQoJICB2YXIgaSA9IDAKCSAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bAoJICB9CgkgIG11bCAqPSAweDgwCgoJICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKQoKCSAgcmV0dXJuIHZhbAoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKQoKCSAgdmFyIGkgPSBieXRlTGVuZ3RoCgkgIHZhciBtdWwgPSAxCgkgIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV0KCSAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7CgkgICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bAoJICB9CgkgIG11bCAqPSAweDgwCgoJICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKQoKCSAgcmV0dXJuIHZhbAoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aCkKCSAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKQoJICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSkKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpCgkgIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KQoJICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKQoJICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOCkKCSAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbAoJfQoKCUJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aCkKCgkgIHJldHVybiAodGhpc1tvZmZzZXRdKSB8CgkgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfAoJICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8CgkgICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKQoKCSAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHwKCSAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfAoJICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHwKCSAgICAodGhpc1tvZmZzZXQgKyAzXSkKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgkgIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNCkKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpCgkgIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpCgl9CgoJQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpCgkgIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOCkKCX0KCglCdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkgewoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aCkKCSAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOCkKCX0KCglmdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7CgkgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJyJidWZmZXIiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKQoJICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCcidmFsdWUiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKQoJICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpCgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlVUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgewoJICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDEKCSAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMCkKCSAgfQoKCSAgdmFyIG11bCA9IDEKCSAgdmFyIGkgPSAwCgkgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRgoJICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkgewoJICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAodmFsdWUgLyBtdWwpICYgMHhGRgoJICB9CgoJICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aAoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHsKCSAgdmFsdWUgPSArdmFsdWUKCSAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwCgkgIGlmICghbm9Bc3NlcnQpIHsKCSAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxCgkgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApCgkgIH0KCgkgIHZhciBpID0gYnl0ZUxlbmd0aCAtIDEKCSAgdmFyIG11bCA9IDEKCSAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRgoJICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkYKCSAgfQoKCSAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMCkKCSAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKCSAgcmV0dXJuIG9mZnNldCArIDEKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKQoJICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKQoJICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KQoJICByZXR1cm4gb2Zmc2V0ICsgMgoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApCgkgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOCkKCSAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpCgkgIHJldHVybiBvZmZzZXQgKyAyCgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgdmFsdWUgPSArdmFsdWUKCSAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwCgkgIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApCgkgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KQoJICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNikKCSAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkKCSAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKCSAgcmV0dXJuIG9mZnNldCArIDQKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMCkKCSAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNCkKCSAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpCgkgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpCgkgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKQoJICByZXR1cm4gb2Zmc2V0ICsgNAoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSB7CgkgICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKQoKCSAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdCkKCSAgfQoKCSAgdmFyIGkgPSAwCgkgIHZhciBtdWwgPSAxCgkgIHZhciBzdWIgPSAwCgkgIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRgoJICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkgewoJICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7CgkgICAgICBzdWIgPSAxCgkgICAgfQoJICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkYKCSAgfQoKCSAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGgKCX0KCglCdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgewoJICAgIHZhciBsaW1pdCA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoIC0gMSkKCgkgICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpCgkgIH0KCgkgIHZhciBpID0gYnl0ZUxlbmd0aCAtIDEKCSAgdmFyIG11bCA9IDEKCSAgdmFyIHN1YiA9IDAKCSAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRgoJICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHsKCSAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkgewoJICAgICAgc3ViID0gMQoJICAgIH0KCSAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGCgkgIH0KCgkgIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoCgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MCkKCSAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxCgkgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCgkgIHJldHVybiBvZmZzZXQgKyAxCgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApCgkgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpCgkgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpCgkgIHJldHVybiBvZmZzZXQgKyAyCgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApCgkgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOCkKCSAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpCgkgIHJldHVybiBvZmZzZXQgKyAyCgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMCkKCSAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZikKCSAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOCkKCSAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpCgkgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KQoJICByZXR1cm4gb2Zmc2V0ICsgNAoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApCgkgIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMQoJICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KQoJICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNikKCSAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOCkKCSAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpCgkgIHJldHVybiBvZmZzZXQgKyA0Cgl9CgoJZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHsKCSAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKQoJICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpCgl9CgoJZnVuY3Rpb24gd3JpdGVGbG9hdCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7CgkgIHZhbHVlID0gK3ZhbHVlCgkgIG9mZnNldCA9IG9mZnNldCA+Pj4gMAoJICBpZiAoIW5vQXNzZXJ0KSB7CgkgICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpCgkgIH0KCSAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpCgkgIHJldHVybiBvZmZzZXQgKyA0Cgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkgewoJICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpCgl9CgoJZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkgewoJICB2YWx1ZSA9ICt2YWx1ZQoJICBvZmZzZXQgPSBvZmZzZXQgPj4+IDAKCSAgaWYgKCFub0Fzc2VydCkgewoJICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpCgkgIH0KCSAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpCgkgIHJldHVybiBvZmZzZXQgKyA4Cgl9CgoJQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHsKCSAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KQoJfQoKCUJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVCRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7CgkgIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpCgl9CgoJLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKQoJQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkgewoJICBpZiAoIXN0YXJ0KSBzdGFydCA9IDAKCSAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aAoJICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoCgkgIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMAoJICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnQKCgkgIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZQoJICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDAKCSAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwCgoJICAvLyBGYXRhbCBlcnJvciBjb25kaXRpb25zCgkgIGlmICh0YXJnZXRTdGFydCA8IDApIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGFyZ2V0U3RhcnQgb3V0IG9mIGJvdW5kcycpCgkgIH0KCSAgaWYgKHN0YXJ0IDwgMCB8fCBzdGFydCA+PSB0aGlzLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZVN0YXJ0IG91dCBvZiBib3VuZHMnKQoJICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJykKCgkgIC8vIEFyZSB3ZSBvb2I/CgkgIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGgKCSAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7CgkgICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnQKCSAgfQoKCSAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0CgkgIHZhciBpCgoJICBpZiAodGhpcyA9PT0gdGFyZ2V0ICYmIHN0YXJ0IDwgdGFyZ2V0U3RhcnQgJiYgdGFyZ2V0U3RhcnQgPCBlbmQpIHsKCSAgICAvLyBkZXNjZW5kaW5nIGNvcHkgZnJvbSBlbmQKCSAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IC0taSkgewoJICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF0KCSAgICB9CgkgIH0gZWxzZSBpZiAobGVuIDwgMTAwMCkgewoJICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnQKCSAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHsKCSAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdCgkgICAgfQoJICB9IGVsc2UgewoJICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKAoJICAgICAgdGFyZ2V0LAoJICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLAoJICAgICAgdGFyZ2V0U3RhcnQKCSAgICApCgkgIH0KCgkgIHJldHVybiBsZW4KCX0KCgkvLyBVc2FnZToKCS8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKQoJLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pCgkvLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSkKCUJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHsKCSAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczoKCSAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7CgkgICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHsKCSAgICAgIGVuY29kaW5nID0gc3RhcnQKCSAgICAgIHN0YXJ0ID0gMAoJICAgICAgZW5kID0gdGhpcy5sZW5ndGgKCSAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7CgkgICAgICBlbmNvZGluZyA9IGVuZAoJICAgICAgZW5kID0gdGhpcy5sZW5ndGgKCSAgICB9CgkgICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHsKCSAgICAgIHZhciBjb2RlID0gdmFsLmNoYXJDb2RlQXQoMCkKCSAgICAgIGlmIChjb2RlIDwgMjU2KSB7CgkgICAgICAgIHZhbCA9IGNvZGUKCSAgICAgIH0KCSAgICB9CgkgICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykgewoJICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpCgkgICAgfQoJICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHsKCSAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZykKCSAgICB9CgkgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHsKCSAgICB2YWwgPSB2YWwgJiAyNTUKCSAgfQoKCSAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuCgkgIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkgewoJICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKQoJICB9CgoJICBpZiAoZW5kIDw9IHN0YXJ0KSB7CgkgICAgcmV0dXJuIHRoaXMKCSAgfQoKCSAgc3RhcnQgPSBzdGFydCA+Pj4gMAoJICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IHRoaXMubGVuZ3RoIDogZW5kID4+PiAwCgoJICBpZiAoIXZhbCkgdmFsID0gMAoKCSAgdmFyIGkKCSAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7CgkgICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkgewoJICAgICAgdGhpc1tpXSA9IHZhbAoJICAgIH0KCSAgfSBlbHNlIHsKCSAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKQoJICAgICAgPyB2YWwKCSAgICAgIDogbmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKQoJICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGgKCSAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkgewoJICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl0KCSAgICB9CgkgIH0KCgkgIHJldHVybiB0aGlzCgl9CgoJLy8gSEVMUEVSIEZVTkNUSU9OUwoJLy8gPT09PT09PT09PT09PT09PQoKCXZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2cKCglmdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7CgkgIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcbiBhbmQgXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3QKCSAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKQoJICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnCgkgIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnCgkgIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdAoJICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHsKCSAgICBzdHIgPSBzdHIgKyAnPScKCSAgfQoJICByZXR1cm4gc3RyCgl9CgoJZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7CgkgIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKCkKCSAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXHMrfFxzKyQvZywgJycpCgl9CgoJZnVuY3Rpb24gdG9IZXggKG4pIHsKCSAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpCgkgIHJldHVybiBuLnRvU3RyaW5nKDE2KQoJfQoKCWZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7CgkgIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHkKCSAgdmFyIGNvZGVQb2ludAoJICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aAoJICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGwKCSAgdmFyIGJ5dGVzID0gW10KCgkgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHsKCSAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKQoKCSAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50CgkgICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHsKCSAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkCgkgICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHsKCSAgICAgICAgLy8gbm8gbGVhZCB5ZXQKCSAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikgewoJICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWwKCSAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRCkKCSAgICAgICAgICBjb250aW51ZQoJICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHsKCSAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkCgkgICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpCgkgICAgICAgICAgY29udGludWUKCSAgICAgICAgfQoKCSAgICAgICAgLy8gdmFsaWQgbGVhZAoJICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50CgoJICAgICAgICBjb250aW51ZQoJICAgICAgfQoKCSAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3cKCSAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHsKCSAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpCgkgICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnQKCSAgICAgICAgY29udGludWUKCSAgICAgIH0KCgkgICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpcgoJICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMAoJICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkgewoJICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZAoJICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpCgkgICAgfQoKCSAgICBsZWFkU3Vycm9nYXRlID0gbnVsbAoKCSAgICAvLyBlbmNvZGUgdXRmOAoJICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7CgkgICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWsKCSAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KQoJICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHsKCSAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVhawoJICAgICAgYnl0ZXMucHVzaCgKCSAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsCgkgICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwCgkgICAgICApCgkgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7CgkgICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWsKCSAgICAgIGJ5dGVzLnB1c2goCgkgICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLAoJICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsCgkgICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwCgkgICAgICApCgkgICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkgewoJICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrCgkgICAgICBieXRlcy5wdXNoKAoJICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsCgkgICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCwKCSAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLAoJICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MAoJICAgICAgKQoJICAgIH0gZWxzZSB7CgkgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpCgkgICAgfQoJICB9CgoJICByZXR1cm4gYnl0ZXMKCX0KCglmdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikgewoJICB2YXIgYnl0ZUFycmF5ID0gW10KCSAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHsKCSAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi4KCSAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpCgkgIH0KCSAgcmV0dXJuIGJ5dGVBcnJheQoJfQoKCWZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7CgkgIHZhciBjLCBoaSwgbG8KCSAgdmFyIGJ5dGVBcnJheSA9IFtdCgkgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7CgkgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrCgoJICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKQoJICAgIGhpID0gYyA+PiA4CgkgICAgbG8gPSBjICUgMjU2CgkgICAgYnl0ZUFycmF5LnB1c2gobG8pCgkgICAgYnl0ZUFycmF5LnB1c2goaGkpCgkgIH0KCgkgIHJldHVybiBieXRlQXJyYXkKCX0KCglmdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHsKCSAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKQoJfQoKCWZ1bmN0aW9uIGJsaXRCdWZmZXIgKHNyYywgZHN0LCBvZmZzZXQsIGxlbmd0aCkgewoJICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CgkgICAgaWYgKChpICsgb2Zmc2V0ID49IGRzdC5sZW5ndGgpIHx8IChpID49IHNyYy5sZW5ndGgpKSBicmVhawoJICAgIGRzdFtpICsgb2Zmc2V0XSA9IHNyY1tpXQoJICB9CgkgIHJldHVybiBpCgl9CgoJZnVuY3Rpb24gaXNuYW4gKHZhbCkgewoJICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmUKCX0KCgkvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg4KS5CdWZmZXIpKQoKLyoqKi8gfSwKLyogMjcgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKGdsb2JhbCkgeyd1c2Ugc3RyaWN0JzsKCgl2YXIgYnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7Cgl2YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlcjsKCXZhciBTbG93QnVmZmVyID0gYnVmZmVyLlNsb3dCdWZmZXI7Cgl2YXIgTUFYX0xFTiA9IGJ1ZmZlci5rTWF4TGVuZ3RoIHx8IDIxNDc0ODM2NDc7CglleHBvcnRzLmFsbG9jID0gZnVuY3Rpb24gYWxsb2Moc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHsKCSAgaWYgKHR5cGVvZiBCdWZmZXIuYWxsb2MgPT09ICdmdW5jdGlvbicpIHsKCSAgICByZXR1cm4gQnVmZmVyLmFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKTsKCSAgfQoJICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnbnVtYmVyJykgewoJICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3Qgbm90IGJlIG51bWJlcicpOwoJICB9CgkgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHsKCSAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplIG11c3QgYmUgYSBudW1iZXInKTsKCSAgfQoJICBpZiAoc2l6ZSA+IE1BWF9MRU4pIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2l6ZSBpcyB0b28gbGFyZ2UnKTsKCSAgfQoJICB2YXIgZW5jID0gZW5jb2Rpbmc7CgkgIHZhciBfZmlsbCA9IGZpbGw7CgkgIGlmIChfZmlsbCA9PT0gdW5kZWZpbmVkKSB7CgkgICAgZW5jID0gdW5kZWZpbmVkOwoJICAgIF9maWxsID0gMDsKCSAgfQoJICB2YXIgYnVmID0gbmV3IEJ1ZmZlcihzaXplKTsKCSAgaWYgKHR5cGVvZiBfZmlsbCA9PT0gJ3N0cmluZycpIHsKCSAgICB2YXIgZmlsbEJ1ZiA9IG5ldyBCdWZmZXIoX2ZpbGwsIGVuYyk7CgkgICAgdmFyIGZsZW4gPSBmaWxsQnVmLmxlbmd0aDsKCSAgICB2YXIgaSA9IC0xOwoJICAgIHdoaWxlICgrK2kgPCBzaXplKSB7CgkgICAgICBidWZbaV0gPSBmaWxsQnVmW2kgJSBmbGVuXTsKCSAgICB9CgkgIH0gZWxzZSB7CgkgICAgYnVmLmZpbGwoX2ZpbGwpOwoJICB9CgkgIHJldHVybiBidWY7Cgl9CglleHBvcnRzLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gYWxsb2NVbnNhZmUoc2l6ZSkgewoJICBpZiAodHlwZW9mIEJ1ZmZlci5hbGxvY1Vuc2FmZSA9PT0gJ2Z1bmN0aW9uJykgewoJICAgIHJldHVybiBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSk7CgkgIH0KCSAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykgewoJICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIG51bWJlcicpOwoJICB9CgkgIGlmIChzaXplID4gTUFYX0xFTikgewoJICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdzaXplIGlzIHRvbyBsYXJnZScpOwoJICB9CgkgIHJldHVybiBuZXcgQnVmZmVyKHNpemUpOwoJfQoJZXhwb3J0cy5mcm9tID0gZnVuY3Rpb24gZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7CgkgIGlmICh0eXBlb2YgQnVmZmVyLmZyb20gPT09ICdmdW5jdGlvbicgJiYgKCFnbG9iYWwuVWludDhBcnJheSB8fCBVaW50OEFycmF5LmZyb20gIT09IEJ1ZmZlci5mcm9tKSkgewoJICAgIHJldHVybiBCdWZmZXIuZnJvbSh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKTsKCSAgfQoJICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgewoJICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJyJ2YWx1ZSIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKTsKCSAgfQoJICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgewoJICAgIHJldHVybiBuZXcgQnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KTsKCSAgfQoJICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7CgkgICAgdmFyIG9mZnNldCA9IGVuY29kaW5nT3JPZmZzZXQ7CgkgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHsKCSAgICAgIHJldHVybiBuZXcgQnVmZmVyKHZhbHVlKTsKCSAgICB9CgkgICAgaWYgKHR5cGVvZiBvZmZzZXQgPT09ICd1bmRlZmluZWQnKSB7CgkgICAgICBvZmZzZXQgPSAwOwoJICAgIH0KCSAgICB2YXIgbGVuID0gbGVuZ3RoOwoJICAgIGlmICh0eXBlb2YgbGVuID09PSAndW5kZWZpbmVkJykgewoJICAgICAgbGVuID0gdmFsdWUuYnl0ZUxlbmd0aCAtIG9mZnNldDsKCSAgICB9CgkgICAgaWYgKG9mZnNldCA+PSB2YWx1ZS5ieXRlTGVuZ3RoKSB7CgkgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCdvZmZzZXRcJyBpcyBvdXQgb2YgYm91bmRzJyk7CgkgICAgfQoJICAgIGlmIChsZW4gPiB2YWx1ZS5ieXRlTGVuZ3RoIC0gb2Zmc2V0KSB7CgkgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCdsZW5ndGhcJyBpcyBvdXQgb2YgYm91bmRzJyk7CgkgICAgfQoJICAgIHJldHVybiBuZXcgQnVmZmVyKHZhbHVlLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgbGVuKSk7CgkgIH0KCSAgaWYgKEJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHsKCSAgICB2YXIgb3V0ID0gbmV3IEJ1ZmZlcih2YWx1ZS5sZW5ndGgpOwoJICAgIHZhbHVlLmNvcHkob3V0LCAwLCAwLCB2YWx1ZS5sZW5ndGgpOwoJICAgIHJldHVybiBvdXQ7CgkgIH0KCSAgaWYgKHZhbHVlKSB7CgkgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8ICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiB2YWx1ZSkgewoJICAgICAgcmV0dXJuIG5ldyBCdWZmZXIodmFsdWUpOwoJICAgIH0KCSAgICBpZiAodmFsdWUudHlwZSA9PT0gJ0J1ZmZlcicgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZS5kYXRhKSkgewoJICAgICAgcmV0dXJuIG5ldyBCdWZmZXIodmFsdWUuZGF0YSk7CgkgICAgfQoJICB9CgoJICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsICcgKyAnQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKTsKCX0KCWV4cG9ydHMuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gYWxsb2NVbnNhZmVTbG93KHNpemUpIHsKCSAgaWYgKHR5cGVvZiBCdWZmZXIuYWxsb2NVbnNhZmVTbG93ID09PSAnZnVuY3Rpb24nKSB7CgkgICAgcmV0dXJuIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3coc2l6ZSk7CgkgIH0KCSAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykgewoJICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3NpemUgbXVzdCBiZSBhIG51bWJlcicpOwoJICB9CgkgIGlmIChzaXplID49IE1BWF9MRU4pIHsKCSAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc2l6ZSBpcyB0b28gbGFyZ2UnKTsKCSAgfQoJICByZXR1cm4gbmV3IFNsb3dCdWZmZXIoc2l6ZSk7Cgl9CgoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0oKSkpKQoKLyoqKi8gfSwKLyogMjggKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gYSBkdXBsZXggc3RyZWFtIGlzIGp1c3QgYSBzdHJlYW0gdGhhdCBpcyBib3RoIHJlYWRhYmxlIGFuZCB3cml0YWJsZS4KCS8vIFNpbmNlIEpTIGRvZXNuJ3QgaGF2ZSBtdWx0aXBsZSBwcm90b3R5cGFsIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzCgkvLyBwcm90b3R5cGFsbHkgaW5oZXJpdHMgZnJvbSBSZWFkYWJsZSwgYW5kIHRoZW4gcGFyYXNpdGljYWxseSBmcm9tCgkvLyBXcml0YWJsZS4KCgkndXNlIHN0cmljdCc7CgoJLyo8cmVwbGFjZW1lbnQ+Ki8KCgl2YXIgb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIChvYmopIHsKCSAgdmFyIGtleXMgPSBbXTsKCSAgZm9yICh2YXIga2V5IGluIG9iaikgewoJICAgIGtleXMucHVzaChrZXkpOwoJICB9cmV0dXJuIGtleXM7Cgl9OwoJLyo8L3JlcGxhY2VtZW50PiovCgoJbW9kdWxlLmV4cG9ydHMgPSBEdXBsZXg7CgoJLyo8cmVwbGFjZW1lbnQ+Ki8KCXZhciBwcm9jZXNzTmV4dFRpY2sgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKTsKCS8qPC9yZXBsYWNlbWVudD4qLwoKCS8qPHJlcGxhY2VtZW50PiovCgl2YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpOwoJdXRpbC5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpOwoJLyo8L3JlcGxhY2VtZW50PiovCgoJdmFyIFJlYWRhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSk7Cgl2YXIgV3JpdGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKTsKCgl1dGlsLmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpOwoKCXZhciBrZXlzID0gb2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpOwoJZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7CgkgIHZhciBtZXRob2QgPSBrZXlzW3ZdOwoJICBpZiAoIUR1cGxleC5wcm90b3R5cGVbbWV0aG9kXSkgRHVwbGV4LnByb3RvdHlwZVttZXRob2RdID0gV3JpdGFibGUucHJvdG90eXBlW21ldGhvZF07Cgl9CgoJZnVuY3Rpb24gRHVwbGV4KG9wdGlvbnMpIHsKCSAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIER1cGxleCkpIHJldHVybiBuZXcgRHVwbGV4KG9wdGlvbnMpOwoKCSAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTsKCSAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTsKCgkgIGlmIChvcHRpb25zICYmIG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB0aGlzLnJlYWRhYmxlID0gZmFsc2U7CgoJICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkgdGhpcy53cml0YWJsZSA9IGZhbHNlOwoKCSAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTsKCSAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7CgoJICB0aGlzLm9uY2UoJ2VuZCcsIG9uZW5kKTsKCX0KCgkvLyB0aGUgbm8taGFsZi1vcGVuIGVuZm9yY2VyCglmdW5jdGlvbiBvbmVuZCgpIHsKCSAgLy8gaWYgd2UgYWxsb3cgaGFsZi1vcGVuIHN0YXRlLCBvciBpZiB0aGUgd3JpdGFibGUgc2lkZSBlbmRlZCwKCSAgLy8gdGhlbiB3ZSdyZSBvay4KCSAgaWYgKHRoaXMuYWxsb3dIYWxmT3BlbiB8fCB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGVkKSByZXR1cm47CgoJICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uCgkgIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLgoJICBwcm9jZXNzTmV4dFRpY2sob25FbmROVCwgdGhpcyk7Cgl9CgoJZnVuY3Rpb24gb25FbmROVChzZWxmKSB7CgkgIHNlbGYuZW5kKCk7Cgl9CgoJZnVuY3Rpb24gZm9yRWFjaCh4cywgZikgewoJICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJICAgIGYoeHNbaV0sIGkpOwoJICB9Cgl9CgovKioqLyB9LAovKiAyOSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24ocHJvY2Vzcykgeyd1c2Ugc3RyaWN0JzsKCgltb2R1bGUuZXhwb3J0cyA9IFJlYWRhYmxlOwoKCS8qPHJlcGxhY2VtZW50PiovCgl2YXIgcHJvY2Vzc05leHRUaWNrID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7CgkvKjwvcmVwbGFjZW1lbnQ+Ki8KCgkvKjxyZXBsYWNlbWVudD4qLwoJdmFyIGlzQXJyYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKTsKCS8qPC9yZXBsYWNlbWVudD4qLwoKCS8qPHJlcGxhY2VtZW50PiovCgl2YXIgRHVwbGV4OwoJLyo8L3JlcGxhY2VtZW50PiovCgoJUmVhZGFibGUuUmVhZGFibGVTdGF0ZSA9IFJlYWRhYmxlU3RhdGU7CgoJLyo8cmVwbGFjZW1lbnQ+Ki8KCXZhciBFRSA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpLkV2ZW50RW1pdHRlcjsKCgl2YXIgRUVsaXN0ZW5lckNvdW50ID0gZnVuY3Rpb24gKGVtaXR0ZXIsIHR5cGUpIHsKCSAgcmV0dXJuIGVtaXR0ZXIubGlzdGVuZXJzKHR5cGUpLmxlbmd0aDsKCX07CgkvKjwvcmVwbGFjZW1lbnQ+Ki8KCgkvKjxyZXBsYWNlbWVudD4qLwoJdmFyIFN0cmVhbTsKCShmdW5jdGlvbiAoKSB7CgkgIHRyeSB7CgkgICAgU3RyZWFtID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7CgkgIH0gY2F0Y2ggKF8pIHt9IGZpbmFsbHkgewoJICAgIGlmICghU3RyZWFtKSBTdHJlYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KS5FdmVudEVtaXR0ZXI7CgkgIH0KCX0pKCk7CgkvKjwvcmVwbGFjZW1lbnQ+Ki8KCgl2YXIgQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNikuQnVmZmVyOwoJLyo8cmVwbGFjZW1lbnQ+Ki8KCXZhciBidWZmZXJTaGltID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7CgkvKjwvcmVwbGFjZW1lbnQ+Ki8KCgkvKjxyZXBsYWNlbWVudD4qLwoJdmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTsKCXV0aWwuaW5oZXJpdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTsKCS8qPC9yZXBsYWNlbWVudD4qLwoKCS8qPHJlcGxhY2VtZW50PiovCgl2YXIgZGVidWdVdGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7Cgl2YXIgZGVidWcgPSB2b2lkIDA7CglpZiAoZGVidWdVdGlsICYmIGRlYnVnVXRpbC5kZWJ1Z2xvZykgewoJICBkZWJ1ZyA9IGRlYnVnVXRpbC5kZWJ1Z2xvZygnc3RyZWFtJyk7Cgl9IGVsc2UgewoJICBkZWJ1ZyA9IGZ1bmN0aW9uICgpIHt9OwoJfQoJLyo8L3JlcGxhY2VtZW50PiovCgoJdmFyIEJ1ZmZlckxpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTsKCXZhciBTdHJpbmdEZWNvZGVyOwoKCXV0aWwuaW5oZXJpdHMoUmVhZGFibGUsIFN0cmVhbSk7CgoJZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKGVtaXR0ZXIsIGV2ZW50LCBmbikgewoJICAvLyBTYWRseSB0aGlzIGlzIG5vdCBjYWNoZWFibGUgYXMgc29tZSBsaWJyYXJpZXMgYnVuZGxlIHRoZWlyIG93bgoJICAvLyBldmVudCBlbWl0dGVyIGltcGxlbWVudGF0aW9uIHdpdGggdGhlbS4KCSAgaWYgKHR5cGVvZiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgewoJICAgIHJldHVybiBlbWl0dGVyLnByZXBlbmRMaXN0ZW5lcihldmVudCwgZm4pOwoJICB9IGVsc2UgewoJICAgIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnkKCSAgICAvLyB1c2VybGFuZCBvbmVzLiAgTkVWRVIgRE8gVEhJUy4gVGhpcyBpcyBoZXJlIG9ubHkgYmVjYXVzZSB0aGlzIGNvZGUgbmVlZHMKCSAgICAvLyB0byBjb250aW51ZSB0byB3b3JrIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgTm9kZS5qcyB0aGF0IGRvIG5vdCBpbmNsdWRlCgkgICAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLgoJICAgIGlmICghZW1pdHRlci5fZXZlbnRzIHx8ICFlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSBlbWl0dGVyLm9uKGV2ZW50LCBmbik7ZWxzZSBpZiAoaXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dOwoJICB9Cgl9CgoJZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHsKCSAgRHVwbGV4ID0gRHVwbGV4IHx8IF9fd2VicGFja19yZXF1aXJlX18oMjgpOwoKCSAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307CgoJICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0bwoJICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheQoJICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTsKCgkgIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMucmVhZGFibGVPYmplY3RNb2RlOwoKCSAgLy8gdGhlIHBvaW50IGF0IHdoaWNoIGl0IHN0b3BzIGNhbGxpbmcgX3JlYWQoKSB0byBmaWxsIHRoZSBidWZmZXIKCSAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyAiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlciIKCSAgdmFyIGh3bSA9IG9wdGlvbnMuaGlnaFdhdGVyTWFyazsKCSAgdmFyIGRlZmF1bHRId20gPSB0aGlzLm9iamVjdE1vZGUgPyAxNiA6IDE2ICogMTAyNDsKCSAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gaHdtIHx8IGh3bSA9PT0gMCA/IGh3bSA6IGRlZmF1bHRId207CgoJICAvLyBjYXN0IHRvIGludHMuCgkgIHRoaXMuaGlnaFdhdGVyTWFyayA9IH4gfnRoaXMuaGlnaFdhdGVyTWFyazsKCgkgIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlCgkgIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuCgkgIC8vIGFycmF5LnNoaWZ0KCkKCSAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpOwoJICB0aGlzLmxlbmd0aCA9IDA7CgkgIHRoaXMucGlwZXMgPSBudWxsOwoJICB0aGlzLnBpcGVzQ291bnQgPSAwOwoJICB0aGlzLmZsb3dpbmcgPSBudWxsOwoJICB0aGlzLmVuZGVkID0gZmFsc2U7CgkgIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlOwoJICB0aGlzLnJlYWRpbmcgPSBmYWxzZTsKCgkgIC8vIGEgZmxhZyB0byBiZSBhYmxlIHRvIHRlbGwgaWYgdGhlIG9ud3JpdGUgY2IgaXMgY2FsbGVkIGltbWVkaWF0ZWx5LAoJICAvLyBvciBvbiBhIGxhdGVyIHRpY2suICBXZSBzZXQgdGhpcyB0byB0cnVlIGF0IGZpcnN0LCBiZWNhdXNlIGFueQoJICAvLyBhY3Rpb25zIHRoYXQgc2hvdWxkbid0IGhhcHBlbiB1bnRpbCAibGF0ZXIiIHNob3VsZCBnZW5lcmFsbHkgYWxzbwoJICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC4KCSAgdGhpcy5zeW5jID0gdHJ1ZTsKCgkgIC8vIHdoZW5ldmVyIHdlIHJldHVybiBudWxsLCB0aGVuIHdlIHNldCBhIGZsYWcgdG8gc2F5CgkgIC8vIHRoYXQgd2UncmUgYXdhaXRpbmcgYSAncmVhZGFibGUnIGV2ZW50IGVtaXNzaW9uLgoJICB0aGlzLm5lZWRSZWFkYWJsZSA9IGZhbHNlOwoJICB0aGlzLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOwoJICB0aGlzLnJlYWRhYmxlTGlzdGVuaW5nID0gZmFsc2U7CgkgIHRoaXMucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7CgoJICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nCgkgIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS4KCSAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLgoJICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JzsKCgkgIC8vIHdoZW4gcGlwaW5nLCB3ZSBvbmx5IGNhcmUgYWJvdXQgJ3JlYWRhYmxlJyBldmVudHMgdGhhdCBoYXBwZW4KCSAgLy8gYWZ0ZXIgcmVhZCgpaW5nIGFsbCB0aGUgYnl0ZXMgYW5kIG5vdCBnZXR0aW5nIGFueSBwdXNoYmFjay4KCSAgdGhpcy5yYW5PdXQgPSBmYWxzZTsKCgkgIC8vIHRoZSBudW1iZXIgb2Ygd3JpdGVycyB0aGF0IGFyZSBhd2FpdGluZyBhIGRyYWluIGV2ZW50IGluIC5waXBlKClzCgkgIHRoaXMuYXdhaXREcmFpbiA9IDA7CgoJICAvLyBpZiB0cnVlLCBhIG1heWJlUmVhZE1vcmUgaGFzIGJlZW4gc2NoZWR1bGVkCgkgIHRoaXMucmVhZGluZ01vcmUgPSBmYWxzZTsKCgkgIHRoaXMuZGVjb2RlciA9IG51bGw7CgkgIHRoaXMuZW5jb2RpbmcgPSBudWxsOwoJICBpZiAob3B0aW9ucy5lbmNvZGluZykgewoJICAgIGlmICghU3RyaW5nRGVjb2RlcikgU3RyaW5nRGVjb2RlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzIpLlN0cmluZ0RlY29kZXI7CgkgICAgdGhpcy5kZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIob3B0aW9ucy5lbmNvZGluZyk7CgkgICAgdGhpcy5lbmNvZGluZyA9IG9wdGlvbnMuZW5jb2Rpbmc7CgkgIH0KCX0KCglmdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7CgkgIER1cGxleCA9IER1cGxleCB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTsKCgkgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSZWFkYWJsZSkpIHJldHVybiBuZXcgUmVhZGFibGUob3B0aW9ucyk7CgoJICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7CgoJICAvLyBsZWdhY3kKCSAgdGhpcy5yZWFkYWJsZSA9IHRydWU7CgoJICBpZiAob3B0aW9ucyAmJiB0eXBlb2Ygb3B0aW9ucy5yZWFkID09PSAnZnVuY3Rpb24nKSB0aGlzLl9yZWFkID0gb3B0aW9ucy5yZWFkOwoKCSAgU3RyZWFtLmNhbGwodGhpcyk7Cgl9CgoJLy8gTWFudWFsbHkgc2hvdmUgc29tZXRoaW5nIGludG8gdGhlIHJlYWQoKSBidWZmZXIuCgkvLyBUaGlzIHJldHVybnMgdHJ1ZSBpZiB0aGUgaGlnaFdhdGVyTWFyayBoYXMgbm90IGJlZW4gaGl0IHlldCwKCS8vIHNpbWlsYXIgdG8gaG93IFdyaXRhYmxlLndyaXRlKCkgcmV0dXJucyB0cnVlIGlmIHlvdSBzaG91bGQKCS8vIHdyaXRlKCkgc29tZSBtb3JlLgoJUmVhZGFibGUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7CgkgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CgoJICBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgdHlwZW9mIGNodW5rID09PSAnc3RyaW5nJykgewoJICAgIGVuY29kaW5nID0gZW5jb2RpbmcgfHwgc3RhdGUuZGVmYXVsdEVuY29kaW5nOwoJICAgIGlmIChlbmNvZGluZyAhPT0gc3RhdGUuZW5jb2RpbmcpIHsKCSAgICAgIGNodW5rID0gYnVmZmVyU2hpbS5mcm9tKGNodW5rLCBlbmNvZGluZyk7CgkgICAgICBlbmNvZGluZyA9ICcnOwoJICAgIH0KCSAgfQoKCSAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCBlbmNvZGluZywgZmFsc2UpOwoJfTsKCgkvLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKQoJUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHsKCSAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKCSAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCAnJywgdHJ1ZSk7Cgl9OwoKCVJlYWRhYmxlLnByb3RvdHlwZS5pc1BhdXNlZCA9IGZ1bmN0aW9uICgpIHsKCSAgcmV0dXJuIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyA9PT0gZmFsc2U7Cgl9OwoKCWZ1bmN0aW9uIHJlYWRhYmxlQWRkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBhZGRUb0Zyb250KSB7CgkgIHZhciBlciA9IGNodW5rSW52YWxpZChzdGF0ZSwgY2h1bmspOwoJICBpZiAoZXIpIHsKCSAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7CgkgIH0gZWxzZSBpZiAoY2h1bmsgPT09IG51bGwpIHsKCSAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7CgkgICAgb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKTsKCSAgfSBlbHNlIGlmIChzdGF0ZS5vYmplY3RNb2RlIHx8IGNodW5rICYmIGNodW5rLmxlbmd0aCA+IDApIHsKCSAgICBpZiAoc3RhdGUuZW5kZWQgJiYgIWFkZFRvRnJvbnQpIHsKCSAgICAgIHZhciBlID0gbmV3IEVycm9yKCdzdHJlYW0ucHVzaCgpIGFmdGVyIEVPRicpOwoJICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZSk7CgkgICAgfSBlbHNlIGlmIChzdGF0ZS5lbmRFbWl0dGVkICYmIGFkZFRvRnJvbnQpIHsKCSAgICAgIHZhciBfZSA9IG5ldyBFcnJvcignc3RyZWFtLnVuc2hpZnQoKSBhZnRlciBlbmQgZXZlbnQnKTsKCSAgICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIF9lKTsKCSAgICB9IGVsc2UgewoJICAgICAgdmFyIHNraXBBZGQ7CgkgICAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhYWRkVG9Gcm9udCAmJiAhZW5jb2RpbmcpIHsKCSAgICAgICAgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLndyaXRlKGNodW5rKTsKCSAgICAgICAgc2tpcEFkZCA9ICFzdGF0ZS5vYmplY3RNb2RlICYmIGNodW5rLmxlbmd0aCA9PT0gMDsKCSAgICAgIH0KCgkgICAgICBpZiAoIWFkZFRvRnJvbnQpIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTsKCgkgICAgICAvLyBEb24ndCBhZGQgdG8gdGhlIGJ1ZmZlciBpZiB3ZSd2ZSBkZWNvZGVkIHRvIGFuIGVtcHR5IHN0cmluZyBjaHVuayBhbmQKCSAgICAgIC8vIHdlJ3JlIG5vdCBpbiBvYmplY3QgbW9kZQoJICAgICAgaWYgKCFza2lwQWRkKSB7CgkgICAgICAgIC8vIGlmIHdlIHdhbnQgdGhlIGRhdGEgbm93LCBqdXN0IGVtaXQgaXQuCgkgICAgICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCA9PT0gMCAmJiAhc3RhdGUuc3luYykgewoJICAgICAgICAgIHN0cmVhbS5lbWl0KCdkYXRhJywgY2h1bmspOwoJICAgICAgICAgIHN0cmVhbS5yZWFkKDApOwoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgYnVmZmVyIGluZm8uCgkgICAgICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoOwoJICAgICAgICAgIGlmIChhZGRUb0Zyb250KSBzdGF0ZS5idWZmZXIudW5zaGlmdChjaHVuayk7ZWxzZSBzdGF0ZS5idWZmZXIucHVzaChjaHVuayk7CgoJICAgICAgICAgIGlmIChzdGF0ZS5uZWVkUmVhZGFibGUpIGVtaXRSZWFkYWJsZShzdHJlYW0pOwoJICAgICAgICB9CgkgICAgICB9CgoJICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTsKCSAgICB9CgkgIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHsKCSAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7CgkgIH0KCgkgIHJldHVybiBuZWVkTW9yZURhdGEoc3RhdGUpOwoJfQoKCS8vIGlmIGl0J3MgcGFzdCB0aGUgaGlnaCB3YXRlciBtYXJrLCB3ZSBjYW4gcHVzaCBpbiBzb21lIG1vcmUuCgkvLyBBbHNvLCBpZiB3ZSBoYXZlIG5vIGRhdGEgeWV0LCB3ZSBjYW4gc3RhbmQgc29tZQoJLy8gbW9yZSBieXRlcy4gIFRoaXMgaXMgdG8gd29yayBhcm91bmQgY2FzZXMgd2hlcmUgaHdtPTAsCgkvLyBzdWNoIGFzIHRoZSByZXBsLiAgQWxzbywgaWYgdGhlIHB1c2goKSB0cmlnZ2VyZWQgYQoJLy8gcmVhZGFibGUgZXZlbnQsIGFuZCB0aGUgdXNlciBjYWxsZWQgcmVhZChsYXJnZU51bWJlcikgc3VjaCB0aGF0CgkvLyBuZWVkUmVhZGFibGUgd2FzIHNldCwgdGhlbiB3ZSBvdWdodCB0byBwdXNoIG1vcmUsIHNvIHRoYXQgYW5vdGhlcgoJLy8gJ3JlYWRhYmxlJyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZC4KCWZ1bmN0aW9uIG5lZWRNb3JlRGF0YShzdGF0ZSkgewoJICByZXR1cm4gIXN0YXRlLmVuZGVkICYmIChzdGF0ZS5uZWVkUmVhZGFibGUgfHwgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5sZW5ndGggPT09IDApOwoJfQoKCS8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LgoJUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykgewoJICBpZiAoIVN0cmluZ0RlY29kZXIpIFN0cmluZ0RlY29kZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKS5TdHJpbmdEZWNvZGVyOwoJICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpOwoJICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jOwoJICByZXR1cm4gdGhpczsKCX07CgoJLy8gRG9uJ3QgcmFpc2UgdGhlIGh3bSA+IDhNQgoJdmFyIE1BWF9IV00gPSAweDgwMDAwMDsKCWZ1bmN0aW9uIGNvbXB1dGVOZXdIaWdoV2F0ZXJNYXJrKG4pIHsKCSAgaWYgKG4gPj0gTUFYX0hXTSkgewoJICAgIG4gPSBNQVhfSFdNOwoJICB9IGVsc2UgewoJICAgIC8vIEdldCB0aGUgbmV4dCBoaWdoZXN0IHBvd2VyIG9mIDIgdG8gcHJldmVudCBpbmNyZWFzaW5nIGh3bSBleGNlc3NpdmVseSBpbgoJICAgIC8vIHRpbnkgYW1vdW50cwoJICAgIG4tLTsKCSAgICBuIHw9IG4gPj4+IDE7CgkgICAgbiB8PSBuID4+PiAyOwoJICAgIG4gfD0gbiA+Pj4gNDsKCSAgICBuIHw9IG4gPj4+IDg7CgkgICAgbiB8PSBuID4+PiAxNjsKCSAgICBuKys7CgkgIH0KCSAgcmV0dXJuIG47Cgl9CgoJLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmcKCS8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuCglmdW5jdGlvbiBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKSB7CgkgIGlmIChuIDw9IDAgfHwgc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSByZXR1cm4gMDsKCSAgaWYgKHN0YXRlLm9iamVjdE1vZGUpIHJldHVybiAxOwoJICBpZiAobiAhPT0gbikgewoJICAgIC8vIE9ubHkgZmxvdyBvbmUgYnVmZmVyIGF0IGEgdGltZQoJICAgIGlmIChzdGF0ZS5mbG93aW5nICYmIHN0YXRlLmxlbmd0aCkgcmV0dXJuIHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGEubGVuZ3RoO2Vsc2UgcmV0dXJuIHN0YXRlLmxlbmd0aDsKCSAgfQoJICAvLyBJZiB3ZSdyZSBhc2tpbmcgZm9yIG1vcmUgdGhhbiB0aGUgY3VycmVudCBod20sIHRoZW4gcmFpc2UgdGhlIGh3bS4KCSAgaWYgKG4gPiBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSBzdGF0ZS5oaWdoV2F0ZXJNYXJrID0gY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsobik7CgkgIGlmIChuIDw9IHN0YXRlLmxlbmd0aCkgcmV0dXJuIG47CgkgIC8vIERvbid0IGhhdmUgZW5vdWdoCgkgIGlmICghc3RhdGUuZW5kZWQpIHsKCSAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlOwoJICAgIHJldHVybiAwOwoJICB9CgkgIHJldHVybiBzdGF0ZS5sZW5ndGg7Cgl9CgoJLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy4KCVJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHsKCSAgZGVidWcoJ3JlYWQnLCBuKTsKCSAgbiA9IHBhcnNlSW50KG4sIDEwKTsKCSAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKCSAgdmFyIG5PcmlnID0gbjsKCgkgIGlmIChuICE9PSAwKSBzdGF0ZS5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTsKCgkgIC8vIGlmIHdlJ3JlIGRvaW5nIHJlYWQoMCkgdG8gdHJpZ2dlciBhIHJlYWRhYmxlIGV2ZW50LCBidXQgd2UKCSAgLy8gYWxyZWFkeSBoYXZlIGEgYnVuY2ggb2YgZGF0YSBpbiB0aGUgYnVmZmVyLCB0aGVuIGp1c3QgdHJpZ2dlcgoJICAvLyB0aGUgJ3JlYWRhYmxlJyBldmVudCBhbmQgbW92ZSBvbi4KCSAgaWYgKG4gPT09IDAgJiYgc3RhdGUubmVlZFJlYWRhYmxlICYmIChzdGF0ZS5sZW5ndGggPj0gc3RhdGUuaGlnaFdhdGVyTWFyayB8fCBzdGF0ZS5lbmRlZCkpIHsKCSAgICBkZWJ1ZygncmVhZDogZW1pdFJlYWRhYmxlJywgc3RhdGUubGVuZ3RoLCBzdGF0ZS5lbmRlZCk7CgkgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7ZWxzZSBlbWl0UmVhZGFibGUodGhpcyk7CgkgICAgcmV0dXJuIG51bGw7CgkgIH0KCgkgIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTsKCgkgIC8vIGlmIHdlJ3ZlIGVuZGVkLCBhbmQgd2UncmUgbm93IGNsZWFyLCB0aGVuIGZpbmlzaCBpdCB1cC4KCSAgaWYgKG4gPT09IDAgJiYgc3RhdGUuZW5kZWQpIHsKCSAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSBlbmRSZWFkYWJsZSh0aGlzKTsKCSAgICByZXR1cm4gbnVsbDsKCSAgfQoKCSAgLy8gQWxsIHRoZSBhY3R1YWwgY2h1bmsgZ2VuZXJhdGlvbiBsb2dpYyBuZWVkcyB0byBiZQoJICAvLyAqYmVsb3cqIHRoZSBjYWxsIHRvIF9yZWFkLiAgVGhlIHJlYXNvbiBpcyB0aGF0IGluIGNlcnRhaW4KCSAgLy8gc3ludGhldGljIHN0cmVhbSBjYXNlcywgc3VjaCBhcyBwYXNzdGhyb3VnaCBzdHJlYW1zLCBfcmVhZAoJICAvLyBtYXkgYmUgYSBjb21wbGV0ZWx5IHN5bmNocm9ub3VzIG9wZXJhdGlvbiB3aGljaCBtYXkgY2hhbmdlCgkgIC8vIHRoZSBzdGF0ZSBvZiB0aGUgcmVhZCBidWZmZXIsIHByb3ZpZGluZyBlbm91Z2ggZGF0YSB3aGVuCgkgIC8vIGJlZm9yZSB0aGVyZSB3YXMgKm5vdCogZW5vdWdoLgoJICAvLwoJICAvLyBTbywgdGhlIHN0ZXBzIGFyZToKCSAgLy8gMS4gRmlndXJlIG91dCB3aGF0IHRoZSBzdGF0ZSBvZiB0aGluZ3Mgd2lsbCBiZSBhZnRlciB3ZSBkbwoJICAvLyBhIHJlYWQgZnJvbSB0aGUgYnVmZmVyLgoJICAvLwoJICAvLyAyLiBJZiB0aGF0IHJlc3VsdGluZyBzdGF0ZSB3aWxsIHRyaWdnZXIgYSBfcmVhZCwgdGhlbiBjYWxsIF9yZWFkLgoJICAvLyBOb3RlIHRoYXQgdGhpcyBtYXkgYmUgYXN5bmNocm9ub3VzLCBvciBzeW5jaHJvbm91cy4gIFllcywgaXQgaXMKCSAgLy8gZGVlcGx5IHVnbHkgdG8gd3JpdGUgQVBJcyB0aGlzIHdheSwgYnV0IHRoYXQgc3RpbGwgZG9lc24ndCBtZWFuCgkgIC8vIHRoYXQgdGhlIFJlYWRhYmxlIGNsYXNzIHNob3VsZCBiZWhhdmUgaW1wcm9wZXJseSwgYXMgc3RyZWFtcyBhcmUKCSAgLy8gZGVzaWduZWQgdG8gYmUgc3luYy9hc3luYyBhZ25vc3RpYy4KCSAgLy8gVGFrZSBub3RlIGlmIHRoZSBfcmVhZCBjYWxsIGlzIHN5bmMgb3IgYXN5bmMgKGllLCBpZiB0aGUgcmVhZCBjYWxsCgkgIC8vIGhhcyByZXR1cm5lZCB5ZXQpLCBzbyB0aGF0IHdlIGtub3cgd2hldGhlciBvciBub3QgaXQncyBzYWZlIHRvIGVtaXQKCSAgLy8gJ3JlYWRhYmxlJyBldGMuCgkgIC8vCgkgIC8vIDMuIEFjdHVhbGx5IHB1bGwgdGhlIHJlcXVlc3RlZCBjaHVua3Mgb3V0IG9mIHRoZSBidWZmZXIgYW5kIHJldHVybi4KCgkgIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy4KCSAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTsKCSAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpOwoKCSAgLy8gaWYgd2UgY3VycmVudGx5IGhhdmUgbGVzcyB0aGFuIHRoZSBoaWdoV2F0ZXJNYXJrLCB0aGVuIGFsc28gcmVhZCBzb21lCgkgIGlmIChzdGF0ZS5sZW5ndGggPT09IDAgfHwgc3RhdGUubGVuZ3RoIC0gbiA8IHN0YXRlLmhpZ2hXYXRlck1hcmspIHsKCSAgICBkb1JlYWQgPSB0cnVlOwoJICAgIGRlYnVnKCdsZW5ndGggbGVzcyB0aGFuIHdhdGVybWFyaycsIGRvUmVhZCk7CgkgIH0KCgkgIC8vIGhvd2V2ZXIsIGlmIHdlJ3ZlIGVuZGVkLCB0aGVuIHRoZXJlJ3Mgbm8gcG9pbnQsIGFuZCBpZiB3ZSdyZSBhbHJlYWR5CgkgIC8vIHJlYWRpbmcsIHRoZW4gaXQncyB1bm5lY2Vzc2FyeS4KCSAgaWYgKHN0YXRlLmVuZGVkIHx8IHN0YXRlLnJlYWRpbmcpIHsKCSAgICBkb1JlYWQgPSBmYWxzZTsKCSAgICBkZWJ1ZygncmVhZGluZyBvciBlbmRlZCcsIGRvUmVhZCk7CgkgIH0gZWxzZSBpZiAoZG9SZWFkKSB7CgkgICAgZGVidWcoJ2RvIHJlYWQnKTsKCSAgICBzdGF0ZS5yZWFkaW5nID0gdHJ1ZTsKCSAgICBzdGF0ZS5zeW5jID0gdHJ1ZTsKCSAgICAvLyBpZiB0aGUgbGVuZ3RoIGlzIGN1cnJlbnRseSB6ZXJvLCB0aGVuIHdlICpuZWVkKiBhIHJlYWRhYmxlIGV2ZW50LgoJICAgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CgkgICAgLy8gY2FsbCBpbnRlcm5hbCByZWFkIG1ldGhvZAoJICAgIHRoaXMuX3JlYWQoc3RhdGUuaGlnaFdhdGVyTWFyayk7CgkgICAgc3RhdGUuc3luYyA9IGZhbHNlOwoJICAgIC8vIElmIF9yZWFkIHB1c2hlZCBkYXRhIHN5bmNocm9ub3VzbHksIHRoZW4gYHJlYWRpbmdgIHdpbGwgYmUgZmFsc2UsCgkgICAgLy8gYW5kIHdlIG5lZWQgdG8gcmUtZXZhbHVhdGUgaG93IG11Y2ggZGF0YSB3ZSBjYW4gcmV0dXJuIHRvIHRoZSB1c2VyLgoJICAgIGlmICghc3RhdGUucmVhZGluZykgbiA9IGhvd011Y2hUb1JlYWQobk9yaWcsIHN0YXRlKTsKCSAgfQoKCSAgdmFyIHJldDsKCSAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsOwoKCSAgaWYgKHJldCA9PT0gbnVsbCkgewoJICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CgkgICAgbiA9IDA7CgkgIH0gZWxzZSB7CgkgICAgc3RhdGUubGVuZ3RoIC09IG47CgkgIH0KCgkgIGlmIChzdGF0ZS5sZW5ndGggPT09IDApIHsKCSAgICAvLyBJZiB3ZSBoYXZlIG5vdGhpbmcgaW4gdGhlIGJ1ZmZlciwgdGhlbiB3ZSB3YW50IHRvIGtub3cKCSAgICAvLyBhcyBzb29uIGFzIHdlICpkbyogZ2V0IHNvbWV0aGluZyBpbnRvIHRoZSBidWZmZXIuCgkgICAgaWYgKCFzdGF0ZS5lbmRlZCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsKCgkgICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLgoJICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7CgkgIH0KCgkgIGlmIChyZXQgIT09IG51bGwpIHRoaXMuZW1pdCgnZGF0YScsIHJldCk7CgoJICByZXR1cm4gcmV0OwoJfTsKCglmdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7CgkgIHZhciBlciA9IG51bGw7CgkgIGlmICghQnVmZmVyLmlzQnVmZmVyKGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHsKCSAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTsKCSAgfQoJICByZXR1cm4gZXI7Cgl9CgoJZnVuY3Rpb24gb25Fb2ZDaHVuayhzdHJlYW0sIHN0YXRlKSB7CgkgIGlmIChzdGF0ZS5lbmRlZCkgcmV0dXJuOwoJICBpZiAoc3RhdGUuZGVjb2RlcikgewoJICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7CgkgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgewoJICAgICAgc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspOwoJICAgICAgc3RhdGUubGVuZ3RoICs9IHN0YXRlLm9iamVjdE1vZGUgPyAxIDogY2h1bmsubGVuZ3RoOwoJICAgIH0KCSAgfQoJICBzdGF0ZS5lbmRlZCA9IHRydWU7CgoJICAvLyBlbWl0ICdyZWFkYWJsZScgbm93IHRvIG1ha2Ugc3VyZSBpdCBnZXRzIHBpY2tlZCB1cC4KCSAgZW1pdFJlYWRhYmxlKHN0cmVhbSk7Cgl9CgoJLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyCgkvLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXIKCS8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC4KCWZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHsKCSAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlOwoJICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTsKCSAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHsKCSAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7CgkgICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTsKCSAgICBpZiAoc3RhdGUuc3luYykgcHJvY2Vzc05leHRUaWNrKGVtaXRSZWFkYWJsZV8sIHN0cmVhbSk7ZWxzZSBlbWl0UmVhZGFibGVfKHN0cmVhbSk7CgkgIH0KCX0KCglmdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkgewoJICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpOwoJICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTsKCSAgZmxvdyhzdHJlYW0pOwoJfQoKCS8vIGF0IHRoaXMgcG9pbnQsIHRoZSB1c2VyIGhhcyBwcmVzdW1hYmx5IHNlZW4gdGhlICdyZWFkYWJsZScgZXZlbnQsCgkvLyBhbmQgY2FsbGVkIHJlYWQoKSB0byBjb25zdW1lIHNvbWUgZGF0YS4gIHRoYXQgbWF5IGhhdmUgdHJpZ2dlcmVkCgkvLyBpbiB0dXJuIGFub3RoZXIgX3JlYWQobikgY2FsbCwgaW4gd2hpY2ggY2FzZSByZWFkaW5nID0gdHJ1ZSBpZgoJLy8gaXQncyBpbiBwcm9ncmVzcy4KCS8vIEhvd2V2ZXIsIGlmIHdlJ3JlIG5vdCBlbmRlZCwgb3IgcmVhZGluZywgYW5kIHRoZSBsZW5ndGggPCBod20sCgkvLyB0aGVuIGdvIGFoZWFkIGFuZCB0cnkgdG8gcmVhZCBzb21lIG1vcmUgcHJlZW1wdGl2ZWx5LgoJZnVuY3Rpb24gbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKSB7CgkgIGlmICghc3RhdGUucmVhZGluZ01vcmUpIHsKCSAgICBzdGF0ZS5yZWFkaW5nTW9yZSA9IHRydWU7CgkgICAgcHJvY2Vzc05leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTsKCSAgfQoJfQoKCWZ1bmN0aW9uIG1heWJlUmVhZE1vcmVfKHN0cmVhbSwgc3RhdGUpIHsKCSAgdmFyIGxlbiA9IHN0YXRlLmxlbmd0aDsKCSAgd2hpbGUgKCFzdGF0ZS5yZWFkaW5nICYmICFzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5lbmRlZCAmJiBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7CgkgICAgZGVidWcoJ21heWJlUmVhZE1vcmUgcmVhZCAwJyk7CgkgICAgc3RyZWFtLnJlYWQoMCk7CgkgICAgaWYgKGxlbiA9PT0gc3RhdGUubGVuZ3RoKQoJICAgICAgLy8gZGlkbid0IGdldCBhbnkgZGF0YSwgc3RvcCBzcGlubmluZy4KCSAgICAgIGJyZWFrO2Vsc2UgbGVuID0gc3RhdGUubGVuZ3RoOwoJICB9CgkgIHN0YXRlLnJlYWRpbmdNb3JlID0gZmFsc2U7Cgl9CgoJLy8gYWJzdHJhY3QgbWV0aG9kLiAgdG8gYmUgb3ZlcnJpZGRlbiBpbiBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLgoJLy8gY2FsbCBjYihlciwgZGF0YSkgd2hlcmUgZGF0YSBpcyA8PSBuIGluIGxlbmd0aC4KCS8vIGZvciB2aXJ0dWFsIChub24tc3RyaW5nLCBub24tYnVmZmVyKSBzdHJlYW1zLCAibGVuZ3RoIiBpcyBzb21ld2hhdAoJLy8gYXJiaXRyYXJ5LCBhbmQgcGVyaGFwcyBub3QgdmVyeSBtZWFuaW5nZnVsLgoJUmVhZGFibGUucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24gKG4pIHsKCSAgdGhpcy5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignX3JlYWQoKSBpcyBub3QgaW1wbGVtZW50ZWQnKSk7Cgl9OwoKCVJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7CgkgIHZhciBzcmMgPSB0aGlzOwoJICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwoKCSAgc3dpdGNoIChzdGF0ZS5waXBlc0NvdW50KSB7CgkgICAgY2FzZSAwOgoJICAgICAgc3RhdGUucGlwZXMgPSBkZXN0OwoJICAgICAgYnJlYWs7CgkgICAgY2FzZSAxOgoJICAgICAgc3RhdGUucGlwZXMgPSBbc3RhdGUucGlwZXMsIGRlc3RdOwoJICAgICAgYnJlYWs7CgkgICAgZGVmYXVsdDoKCSAgICAgIHN0YXRlLnBpcGVzLnB1c2goZGVzdCk7CgkgICAgICBicmVhazsKCSAgfQoJICBzdGF0ZS5waXBlc0NvdW50ICs9IDE7CgkgIGRlYnVnKCdwaXBlIGNvdW50PSVkIG9wdHM9JWonLCBzdGF0ZS5waXBlc0NvdW50LCBwaXBlT3B0cyk7CgoJICB2YXIgZG9FbmQgPSAoIXBpcGVPcHRzIHx8IHBpcGVPcHRzLmVuZCAhPT0gZmFsc2UpICYmIGRlc3QgIT09IHByb2Nlc3Muc3Rkb3V0ICYmIGRlc3QgIT09IHByb2Nlc3Muc3RkZXJyOwoKCSAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IGNsZWFudXA7CgkgIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBwcm9jZXNzTmV4dFRpY2soZW5kRm4pO2Vsc2Ugc3JjLm9uY2UoJ2VuZCcsIGVuZEZuKTsKCgkgIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTsKCSAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUpIHsKCSAgICBkZWJ1Zygnb251bnBpcGUnKTsKCSAgICBpZiAocmVhZGFibGUgPT09IHNyYykgewoJICAgICAgY2xlYW51cCgpOwoJICAgIH0KCSAgfQoKCSAgZnVuY3Rpb24gb25lbmQoKSB7CgkgICAgZGVidWcoJ29uZW5kJyk7CgkgICAgZGVzdC5lbmQoKTsKCSAgfQoKCSAgLy8gd2hlbiB0aGUgZGVzdCBkcmFpbnMsIGl0IHJlZHVjZXMgdGhlIGF3YWl0RHJhaW4gY291bnRlcgoJICAvLyBvbiB0aGUgc291cmNlLiAgVGhpcyB3b3VsZCBiZSBtb3JlIGVsZWdhbnQgd2l0aCBhIC5vbmNlKCkKCSAgLy8gaGFuZGxlciBpbiBmbG93KCksIGJ1dCBhZGRpbmcgYW5kIHJlbW92aW5nIHJlcGVhdGVkbHkgaXMKCSAgLy8gdG9vIHNsb3cuCgkgIHZhciBvbmRyYWluID0gcGlwZU9uRHJhaW4oc3JjKTsKCSAgZGVzdC5vbignZHJhaW4nLCBvbmRyYWluKTsKCgkgIHZhciBjbGVhbmVkVXAgPSBmYWxzZTsKCSAgZnVuY3Rpb24gY2xlYW51cCgpIHsKCSAgICBkZWJ1ZygnY2xlYW51cCcpOwoJICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW4KCSAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpOwoJICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTsKCSAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pOwoJICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7CgkgICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpOwoJICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpOwoJICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7CgkgICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTsKCgkgICAgY2xlYW5lZFVwID0gdHJ1ZTsKCgkgICAgLy8gaWYgdGhlIHJlYWRlciBpcyB3YWl0aW5nIGZvciBhIGRyYWluIGV2ZW50IGZyb20gdGhpcwoJICAgIC8vIHNwZWNpZmljIHdyaXRlciwgdGhlbiBpdCB3b3VsZCBjYXVzZSBpdCB0byBuZXZlciBzdGFydAoJICAgIC8vIGZsb3dpbmcgYWdhaW4uCgkgICAgLy8gU28sIGlmIHRoaXMgaXMgYXdhaXRpbmcgYSBkcmFpbiwgdGhlbiB3ZSBqdXN0IGNhbGwgaXQgbm93LgoJICAgIC8vIElmIHdlIGRvbid0IGtub3csIHRoZW4gYXNzdW1lIHRoYXQgd2UgYXJlIHdhaXRpbmcgZm9yIG9uZS4KCSAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiAmJiAoIWRlc3QuX3dyaXRhYmxlU3RhdGUgfHwgZGVzdC5fd3JpdGFibGVTdGF0ZS5uZWVkRHJhaW4pKSBvbmRyYWluKCk7CgkgIH0KCgkgIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwCgkgIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlCgkgIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuCgkgIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi4KCSAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTsKCSAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTsKCSAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7CgkgICAgZGVidWcoJ29uZGF0YScpOwoJICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTsKCSAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7CgkgICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHsKCSAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZQoJICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGUKCSAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuCgkgICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi4KCSAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHsKCSAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTsKCSAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKzsKCSAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7CgkgICAgICB9CgkgICAgICBzcmMucGF1c2UoKTsKCSAgICB9CgkgIH0KCgkgIC8vIGlmIHRoZSBkZXN0IGhhcyBhbiBlcnJvciwgdGhlbiBzdG9wIHBpcGluZyBpbnRvIGl0LgoJICAvLyBob3dldmVyLCBkb24ndCBzdXBwcmVzcyB0aGUgdGhyb3dpbmcgYmVoYXZpb3IgZm9yIHRoaXMuCgkgIGZ1bmN0aW9uIG9uZXJyb3IoZXIpIHsKCSAgICBkZWJ1Zygnb25lcnJvcicsIGVyKTsKCSAgICB1bnBpcGUoKTsKCSAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpOwoJICAgIGlmIChFRWxpc3RlbmVyQ291bnQoZGVzdCwgJ2Vycm9yJykgPT09IDApIGRlc3QuZW1pdCgnZXJyb3InLCBlcik7CgkgIH0KCgkgIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy4KCSAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpOwoKCSAgLy8gQm90aCBjbG9zZSBhbmQgZmluaXNoIHNob3VsZCB0cmlnZ2VyIHVucGlwZSwgYnV0IG9ubHkgb25jZS4KCSAgZnVuY3Rpb24gb25jbG9zZSgpIHsKCSAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdmaW5pc2gnLCBvbmZpbmlzaCk7CgkgICAgdW5waXBlKCk7CgkgIH0KCSAgZGVzdC5vbmNlKCdjbG9zZScsIG9uY2xvc2UpOwoJICBmdW5jdGlvbiBvbmZpbmlzaCgpIHsKCSAgICBkZWJ1Zygnb25maW5pc2gnKTsKCSAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpOwoJICAgIHVucGlwZSgpOwoJICB9CgkgIGRlc3Qub25jZSgnZmluaXNoJywgb25maW5pc2gpOwoKCSAgZnVuY3Rpb24gdW5waXBlKCkgewoJICAgIGRlYnVnKCd1bnBpcGUnKTsKCSAgICBzcmMudW5waXBlKGRlc3QpOwoJICB9CgoJICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0bwoJICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpOwoKCSAgLy8gc3RhcnQgdGhlIGZsb3cgaWYgaXQgaGFzbid0IGJlZW4gc3RhcnRlZCBhbHJlYWR5LgoJICBpZiAoIXN0YXRlLmZsb3dpbmcpIHsKCSAgICBkZWJ1ZygncGlwZSByZXN1bWUnKTsKCSAgICBzcmMucmVzdW1lKCk7CgkgIH0KCgkgIHJldHVybiBkZXN0OwoJfTsKCglmdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHsKCSAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKCSAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7CgkgICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7CgkgICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTsKCSAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBFRWxpc3RlbmVyQ291bnQoc3JjLCAnZGF0YScpKSB7CgkgICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTsKCSAgICAgIGZsb3coc3JjKTsKCSAgICB9CgkgIH07Cgl9CgoJUmVhZGFibGUucHJvdG90eXBlLnVucGlwZSA9IGZ1bmN0aW9uIChkZXN0KSB7CgkgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CgoJICAvLyBpZiB3ZSdyZSBub3QgcGlwaW5nIGFueXdoZXJlLCB0aGVuIGRvIG5vdGhpbmcuCgkgIGlmIChzdGF0ZS5waXBlc0NvdW50ID09PSAwKSByZXR1cm4gdGhpczsKCgkgIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS4KCSAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHsKCSAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS4KCSAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7CgoJICAgIGlmICghZGVzdCkgZGVzdCA9IHN0YXRlLnBpcGVzOwoKCSAgICAvLyBnb3QgYSBtYXRjaC4KCSAgICBzdGF0ZS5waXBlcyA9IG51bGw7CgkgICAgc3RhdGUucGlwZXNDb3VudCA9IDA7CgkgICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlOwoJICAgIGlmIChkZXN0KSBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpOwoJICAgIHJldHVybiB0aGlzOwoJICB9CgoJICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLgoKCSAgaWYgKCFkZXN0KSB7CgkgICAgLy8gcmVtb3ZlIGFsbC4KCSAgICB2YXIgZGVzdHMgPSBzdGF0ZS5waXBlczsKCSAgICB2YXIgbGVuID0gc3RhdGUucGlwZXNDb3VudDsKCSAgICBzdGF0ZS5waXBlcyA9IG51bGw7CgkgICAgc3RhdGUucGlwZXNDb3VudCA9IDA7CgkgICAgc3RhdGUuZmxvd2luZyA9IGZhbHNlOwoKCSAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CgkgICAgICBkZXN0c1tpXS5lbWl0KCd1bnBpcGUnLCB0aGlzKTsKCSAgICB9cmV0dXJuIHRoaXM7CgkgIH0KCgkgIC8vIHRyeSB0byBmaW5kIHRoZSByaWdodCBvbmUuCgkgIHZhciBpbmRleCA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpOwoJICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gdGhpczsKCgkgIHN0YXRlLnBpcGVzLnNwbGljZShpbmRleCwgMSk7CgkgIHN0YXRlLnBpcGVzQ291bnQgLT0gMTsKCSAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHN0YXRlLnBpcGVzID0gc3RhdGUucGlwZXNbMF07CgoJICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpOwoKCSAgcmV0dXJuIHRoaXM7Cgl9OwoKCS8vIHNldCB1cCBkYXRhIGV2ZW50cyBpZiB0aGV5IGFyZSBhc2tlZCBmb3IKCS8vIEVuc3VyZSByZWFkYWJsZSBsaXN0ZW5lcnMgZXZlbnR1YWxseSBnZXQgc29tZXRoaW5nCglSZWFkYWJsZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXYsIGZuKSB7CgkgIHZhciByZXMgPSBTdHJlYW0ucHJvdG90eXBlLm9uLmNhbGwodGhpcywgZXYsIGZuKTsKCgkgIGlmIChldiA9PT0gJ2RhdGEnKSB7CgkgICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkCgkgICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7CgkgIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHsKCSAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwoJICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHsKCSAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTsKCSAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlOwoJICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7CgkgICAgICAgIHByb2Nlc3NOZXh0VGljayhuUmVhZGluZ05leHRUaWNrLCB0aGlzKTsKCSAgICAgIH0gZWxzZSBpZiAoc3RhdGUubGVuZ3RoKSB7CgkgICAgICAgIGVtaXRSZWFkYWJsZSh0aGlzLCBzdGF0ZSk7CgkgICAgICB9CgkgICAgfQoJICB9CgoJICByZXR1cm4gcmVzOwoJfTsKCVJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjsKCglmdW5jdGlvbiBuUmVhZGluZ05leHRUaWNrKHNlbGYpIHsKCSAgZGVidWcoJ3JlYWRhYmxlIG5leHR0aWNrIHJlYWQgMCcpOwoJICBzZWxmLnJlYWQoMCk7Cgl9CgoJLy8gcGF1c2UoKSBhbmQgcmVzdW1lKCkgYXJlIHJlbW5hbnRzIG9mIHRoZSBsZWdhY3kgcmVhZGFibGUgc3RyZWFtIEFQSQoJLy8gSWYgdGhlIHVzZXIgdXNlcyB0aGVtLCB0aGVuIHN3aXRjaCBpbnRvIG9sZCBtb2RlLgoJUmVhZGFibGUucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHsKCSAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTsKCSAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7CgkgICAgZGVidWcoJ3Jlc3VtZScpOwoJICAgIHN0YXRlLmZsb3dpbmcgPSB0cnVlOwoJICAgIHJlc3VtZSh0aGlzLCBzdGF0ZSk7CgkgIH0KCSAgcmV0dXJuIHRoaXM7Cgl9OwoKCWZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7CgkgIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7CgkgICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTsKCSAgICBwcm9jZXNzTmV4dFRpY2socmVzdW1lXywgc3RyZWFtLCBzdGF0ZSk7CgkgIH0KCX0KCglmdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHsKCSAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7CgkgICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTsKCSAgICBzdHJlYW0ucmVhZCgwKTsKCSAgfQoKCSAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gZmFsc2U7CgkgIHN0YXRlLmF3YWl0RHJhaW4gPSAwOwoJICBzdHJlYW0uZW1pdCgncmVzdW1lJyk7CgkgIGZsb3coc3RyZWFtKTsKCSAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgIXN0YXRlLnJlYWRpbmcpIHN0cmVhbS5yZWFkKDApOwoJfQoKCVJlYWRhYmxlLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHsKCSAgZGVidWcoJ2NhbGwgcGF1c2UgZmxvd2luZz0laicsIHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyk7CgkgIGlmIChmYWxzZSAhPT0gdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKSB7CgkgICAgZGVidWcoJ3BhdXNlJyk7CgkgICAgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nID0gZmFsc2U7CgkgICAgdGhpcy5lbWl0KCdwYXVzZScpOwoJICB9CgkgIHJldHVybiB0aGlzOwoJfTsKCglmdW5jdGlvbiBmbG93KHN0cmVhbSkgewoJICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7CgkgIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7CgkgIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9Cgl9CgoJLy8gd3JhcCBhbiBvbGQtc3R5bGUgc3RyZWFtIGFzIHRoZSBhc3luYyBkYXRhIHNvdXJjZS4KCS8vIFRoaXMgaXMgKm5vdCogcGFydCBvZiB0aGUgcmVhZGFibGUgc3RyZWFtIGludGVyZmFjZS4KCS8vIEl0IGlzIGFuIHVnbHkgdW5mb3J0dW5hdGUgbWVzcyBvZiBoaXN0b3J5LgoJUmVhZGFibGUucHJvdG90eXBlLndyYXAgPSBmdW5jdGlvbiAoc3RyZWFtKSB7CgkgIHZhciBzdGF0ZSA9IHRoaXMuX3JlYWRhYmxlU3RhdGU7CgkgIHZhciBwYXVzZWQgPSBmYWxzZTsKCgkgIHZhciBzZWxmID0gdGhpczsKCSAgc3RyZWFtLm9uKCdlbmQnLCBmdW5jdGlvbiAoKSB7CgkgICAgZGVidWcoJ3dyYXBwZWQgZW5kJyk7CgkgICAgaWYgKHN0YXRlLmRlY29kZXIgJiYgIXN0YXRlLmVuZGVkKSB7CgkgICAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpOwoJICAgICAgaWYgKGNodW5rICYmIGNodW5rLmxlbmd0aCkgc2VsZi5wdXNoKGNodW5rKTsKCSAgICB9CgoJICAgIHNlbGYucHVzaChudWxsKTsKCSAgfSk7CgoJICBzdHJlYW0ub24oJ2RhdGEnLCBmdW5jdGlvbiAoY2h1bmspIHsKCSAgICBkZWJ1Zygnd3JhcHBlZCBkYXRhJyk7CgkgICAgaWYgKHN0YXRlLmRlY29kZXIpIGNodW5rID0gc3RhdGUuZGVjb2Rlci53cml0ZShjaHVuayk7CgoJICAgIC8vIGRvbid0IHNraXAgb3ZlciBmYWxzeSB2YWx1ZXMgaW4gb2JqZWN0TW9kZQoJICAgIGlmIChzdGF0ZS5vYmplY3RNb2RlICYmIChjaHVuayA9PT0gbnVsbCB8fCBjaHVuayA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuO2Vsc2UgaWYgKCFzdGF0ZS5vYmplY3RNb2RlICYmICghY2h1bmsgfHwgIWNodW5rLmxlbmd0aCkpIHJldHVybjsKCgkgICAgdmFyIHJldCA9IHNlbGYucHVzaChjaHVuayk7CgkgICAgaWYgKCFyZXQpIHsKCSAgICAgIHBhdXNlZCA9IHRydWU7CgkgICAgICBzdHJlYW0ucGF1c2UoKTsKCSAgICB9CgkgIH0pOwoKCSAgLy8gcHJveHkgYWxsIHRoZSBvdGhlciBtZXRob2RzLgoJICAvLyBpbXBvcnRhbnQgd2hlbiB3cmFwcGluZyBmaWx0ZXJzIGFuZCBkdXBsZXhlcy4KCSAgZm9yICh2YXIgaSBpbiBzdHJlYW0pIHsKCSAgICBpZiAodGhpc1tpXSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBzdHJlYW1baV0gPT09ICdmdW5jdGlvbicpIHsKCSAgICAgIHRoaXNbaV0gPSBmdW5jdGlvbiAobWV0aG9kKSB7CgkgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CgkgICAgICAgICAgcmV0dXJuIHN0cmVhbVttZXRob2RdLmFwcGx5KHN0cmVhbSwgYXJndW1lbnRzKTsKCSAgICAgICAgfTsKCSAgICAgIH0oaSk7CgkgICAgfQoJICB9CgoJICAvLyBwcm94eSBjZXJ0YWluIGltcG9ydGFudCBldmVudHMuCgkgIHZhciBldmVudHMgPSBbJ2Vycm9yJywgJ2Nsb3NlJywgJ2Rlc3Ryb3knLCAncGF1c2UnLCAncmVzdW1lJ107CgkgIGZvckVhY2goZXZlbnRzLCBmdW5jdGlvbiAoZXYpIHsKCSAgICBzdHJlYW0ub24oZXYsIHNlbGYuZW1pdC5iaW5kKHNlbGYsIGV2KSk7CgkgIH0pOwoKCSAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZQoJICAvLyB1bmRlcmx5aW5nIHN0cmVhbS4KCSAgc2VsZi5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7CgkgICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTsKCSAgICBpZiAocGF1c2VkKSB7CgkgICAgICBwYXVzZWQgPSBmYWxzZTsKCSAgICAgIHN0cmVhbS5yZXN1bWUoKTsKCSAgICB9CgkgIH07CgoJICByZXR1cm4gc2VsZjsKCX07CgoJLy8gZXhwb3NlZCBmb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5LgoJUmVhZGFibGUuX2Zyb21MaXN0ID0gZnJvbUxpc3Q7CgoJLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLgoJLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC4KCS8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nCgkvLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LgoJZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHsKCSAgLy8gbm90aGluZyBidWZmZXJlZAoJICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDsKCgkgIHZhciByZXQ7CgkgIGlmIChzdGF0ZS5vYmplY3RNb2RlKSByZXQgPSBzdGF0ZS5idWZmZXIuc2hpZnQoKTtlbHNlIGlmICghbiB8fCBuID49IHN0YXRlLmxlbmd0aCkgewoJICAgIC8vIHJlYWQgaXQgYWxsLCB0cnVuY2F0ZSB0aGUgbGlzdAoJICAgIGlmIChzdGF0ZS5kZWNvZGVyKSByZXQgPSBzdGF0ZS5idWZmZXIuam9pbignJyk7ZWxzZSBpZiAoc3RhdGUuYnVmZmVyLmxlbmd0aCA9PT0gMSkgcmV0ID0gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YTtlbHNlIHJldCA9IHN0YXRlLmJ1ZmZlci5jb25jYXQoc3RhdGUubGVuZ3RoKTsKCSAgICBzdGF0ZS5idWZmZXIuY2xlYXIoKTsKCSAgfSBlbHNlIHsKCSAgICAvLyByZWFkIHBhcnQgb2YgbGlzdAoJICAgIHJldCA9IGZyb21MaXN0UGFydGlhbChuLCBzdGF0ZS5idWZmZXIsIHN0YXRlLmRlY29kZXIpOwoJICB9CgoJICByZXR1cm4gcmV0OwoJfQoKCS8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC4KCS8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nCgkvLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LgoJZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHsKCSAgdmFyIHJldDsKCSAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHsKCSAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5ncwoJICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pOwoJICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7CgkgIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7CgkgICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoCgkgICAgcmV0ID0gbGlzdC5zaGlmdCgpOwoJICB9IGVsc2UgewoJICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlcgoJICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpOwoJICB9CgkgIHJldHVybiByZXQ7Cgl9CgoJLy8gQ29waWVzIGEgc3BlY2lmaWVkIGFtb3VudCBvZiBjaGFyYWN0ZXJzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YQoJLy8gY2h1bmtzLgoJLy8gVGhpcyBmdW5jdGlvbiBpcyBkZXNpZ25lZCB0byBiZSBpbmxpbmFibGUsIHNvIHBsZWFzZSB0YWtlIGNhcmUgd2hlbiBtYWtpbmcKCS8vIGNoYW5nZXMgdG8gdGhlIGZ1bmN0aW9uIGJvZHkuCglmdW5jdGlvbiBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSB7CgkgIHZhciBwID0gbGlzdC5oZWFkOwoJICB2YXIgYyA9IDE7CgkgIHZhciByZXQgPSBwLmRhdGE7CgkgIG4gLT0gcmV0Lmxlbmd0aDsKCSAgd2hpbGUgKHAgPSBwLm5leHQpIHsKCSAgICB2YXIgc3RyID0gcC5kYXRhOwoJICAgIHZhciBuYiA9IG4gPiBzdHIubGVuZ3RoID8gc3RyLmxlbmd0aCA6IG47CgkgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSByZXQgKz0gc3RyO2Vsc2UgcmV0ICs9IHN0ci5zbGljZSgwLCBuKTsKCSAgICBuIC09IG5iOwoJICAgIGlmIChuID09PSAwKSB7CgkgICAgICBpZiAobmIgPT09IHN0ci5sZW5ndGgpIHsKCSAgICAgICAgKytjOwoJICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsOwoJICAgICAgfSBlbHNlIHsKCSAgICAgICAgbGlzdC5oZWFkID0gcDsKCSAgICAgICAgcC5kYXRhID0gc3RyLnNsaWNlKG5iKTsKCSAgICAgIH0KCSAgICAgIGJyZWFrOwoJICAgIH0KCSAgICArK2M7CgkgIH0KCSAgbGlzdC5sZW5ndGggLT0gYzsKCSAgcmV0dXJuIHJldDsKCX0KCgkvLyBDb3BpZXMgYSBzcGVjaWZpZWQgYW1vdW50IG9mIGJ5dGVzIGZyb20gdGhlIGxpc3Qgb2YgYnVmZmVyZWQgZGF0YSBjaHVua3MuCgkvLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZwoJLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS4KCWZ1bmN0aW9uIGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpIHsKCSAgdmFyIHJldCA9IGJ1ZmZlclNoaW0uYWxsb2NVbnNhZmUobik7CgkgIHZhciBwID0gbGlzdC5oZWFkOwoJICB2YXIgYyA9IDE7CgkgIHAuZGF0YS5jb3B5KHJldCk7CgkgIG4gLT0gcC5kYXRhLmxlbmd0aDsKCSAgd2hpbGUgKHAgPSBwLm5leHQpIHsKCSAgICB2YXIgYnVmID0gcC5kYXRhOwoJICAgIHZhciBuYiA9IG4gPiBidWYubGVuZ3RoID8gYnVmLmxlbmd0aCA6IG47CgkgICAgYnVmLmNvcHkocmV0LCByZXQubGVuZ3RoIC0gbiwgMCwgbmIpOwoJICAgIG4gLT0gbmI7CgkgICAgaWYgKG4gPT09IDApIHsKCSAgICAgIGlmIChuYiA9PT0gYnVmLmxlbmd0aCkgewoJICAgICAgICArK2M7CgkgICAgICAgIGlmIChwLm5leHQpIGxpc3QuaGVhZCA9IHAubmV4dDtlbHNlIGxpc3QuaGVhZCA9IGxpc3QudGFpbCA9IG51bGw7CgkgICAgICB9IGVsc2UgewoJICAgICAgICBsaXN0LmhlYWQgPSBwOwoJICAgICAgICBwLmRhdGEgPSBidWYuc2xpY2UobmIpOwoJICAgICAgfQoJICAgICAgYnJlYWs7CgkgICAgfQoJICAgICsrYzsKCSAgfQoJICBsaXN0Lmxlbmd0aCAtPSBjOwoJICByZXR1cm4gcmV0OwoJfQoKCWZ1bmN0aW9uIGVuZFJlYWRhYmxlKHN0cmVhbSkgewoJICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7CgoJICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhCgkgIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi4KCSAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignImVuZFJlYWRhYmxlKCkiIGNhbGxlZCBvbiBub24tZW1wdHkgc3RyZWFtJyk7CgoJICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHsKCSAgICBzdGF0ZS5lbmRlZCA9IHRydWU7CgkgICAgcHJvY2Vzc05leHRUaWNrKGVuZFJlYWRhYmxlTlQsIHN0YXRlLCBzdHJlYW0pOwoJICB9Cgl9CgoJZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7CgkgIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LgoJICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7CgkgICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7CgkgICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7CgkgICAgc3RyZWFtLmVtaXQoJ2VuZCcpOwoJICB9Cgl9CgoJZnVuY3Rpb24gZm9yRWFjaCh4cywgZikgewoJICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJICAgIGYoeHNbaV0sIGkpOwoJICB9Cgl9CgoJZnVuY3Rpb24gaW5kZXhPZih4cywgeCkgewoJICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykgewoJICAgIGlmICh4c1tpXSA9PT0geCkgcmV0dXJuIGk7CgkgIH0KCSAgcmV0dXJuIC0xOwoJfQoJLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oMTIpKSkKCi8qKiovIH0sCi8qIDMwICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCS8qIChpZ25vcmVkKSAqLwoKLyoqKi8gfSwKLyogMzEgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCXZhciBCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KS5CdWZmZXI7CgkvKjxyZXBsYWNlbWVudD4qLwoJdmFyIGJ1ZmZlclNoaW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTsKCS8qPC9yZXBsYWNlbWVudD4qLwoKCW1vZHVsZS5leHBvcnRzID0gQnVmZmVyTGlzdDsKCglmdW5jdGlvbiBCdWZmZXJMaXN0KCkgewoJICB0aGlzLmhlYWQgPSBudWxsOwoJICB0aGlzLnRhaWwgPSBudWxsOwoJICB0aGlzLmxlbmd0aCA9IDA7Cgl9CgoJQnVmZmVyTGlzdC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICh2KSB7CgkgIHZhciBlbnRyeSA9IHsgZGF0YTogdiwgbmV4dDogbnVsbCB9OwoJICBpZiAodGhpcy5sZW5ndGggPiAwKSB0aGlzLnRhaWwubmV4dCA9IGVudHJ5O2Vsc2UgdGhpcy5oZWFkID0gZW50cnk7CgkgIHRoaXMudGFpbCA9IGVudHJ5OwoJICArK3RoaXMubGVuZ3RoOwoJfTsKCglCdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKHYpIHsKCSAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTsKCSAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTsKCSAgdGhpcy5oZWFkID0gZW50cnk7CgkgICsrdGhpcy5sZW5ndGg7Cgl9OwoKCUJ1ZmZlckxpc3QucHJvdG90eXBlLnNoaWZ0ID0gZnVuY3Rpb24gKCkgewoJICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybjsKCSAgdmFyIHJldCA9IHRoaXMuaGVhZC5kYXRhOwoJICBpZiAodGhpcy5sZW5ndGggPT09IDEpIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7ZWxzZSB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDsKCSAgLS10aGlzLmxlbmd0aDsKCSAgcmV0dXJuIHJldDsKCX07CgoJQnVmZmVyTGlzdC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7CgkgIHRoaXMuaGVhZCA9IHRoaXMudGFpbCA9IG51bGw7CgkgIHRoaXMubGVuZ3RoID0gMDsKCX07CgoJQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIChzKSB7CgkgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnOwoJICB2YXIgcCA9IHRoaXMuaGVhZDsKCSAgdmFyIHJldCA9ICcnICsgcC5kYXRhOwoJICB3aGlsZSAocCA9IHAubmV4dCkgewoJICAgIHJldCArPSBzICsgcC5kYXRhOwoJICB9cmV0dXJuIHJldDsKCX07CgoJQnVmZmVyTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gKG4pIHsKCSAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gYnVmZmVyU2hpbS5hbGxvYygwKTsKCSAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7CgkgIHZhciByZXQgPSBidWZmZXJTaGltLmFsbG9jVW5zYWZlKG4gPj4+IDApOwoJICB2YXIgcCA9IHRoaXMuaGVhZDsKCSAgdmFyIGkgPSAwOwoJICB3aGlsZSAocCkgewoJICAgIHAuZGF0YS5jb3B5KHJldCwgaSk7CgkgICAgaSArPSBwLmRhdGEubGVuZ3RoOwoJICAgIHAgPSBwLm5leHQ7CgkgIH0KCSAgcmV0dXJuIHJldDsKCX07CgovKioqLyB9LAovKiAzMiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy4KCS8vCgkvLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYQoJLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZQoJLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwoJLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLAoJLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdAoJLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCgkvLyBmb2xsb3dpbmcgY29uZGl0aW9uczoKCS8vCgkvLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAoJLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgkvLwoJLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKCS8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YKCS8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4KCS8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAoJLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SCgkvLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFCgkvLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKCXZhciBCdWZmZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI2KS5CdWZmZXI7CgoJdmFyIGlzQnVmZmVyRW5jb2RpbmcgPSBCdWZmZXIuaXNFbmNvZGluZwoJICB8fCBmdW5jdGlvbihlbmNvZGluZykgewoJICAgICAgIHN3aXRjaCAoZW5jb2RpbmcgJiYgZW5jb2RpbmcudG9Mb3dlckNhc2UoKSkgewoJICAgICAgICAgY2FzZSAnaGV4JzogY2FzZSAndXRmOCc6IGNhc2UgJ3V0Zi04JzogY2FzZSAnYXNjaWknOiBjYXNlICdiaW5hcnknOiBjYXNlICdiYXNlNjQnOiBjYXNlICd1Y3MyJzogY2FzZSAndWNzLTInOiBjYXNlICd1dGYxNmxlJzogY2FzZSAndXRmLTE2bGUnOiBjYXNlICdyYXcnOiByZXR1cm4gdHJ1ZTsKCSAgICAgICAgIGRlZmF1bHQ6IHJldHVybiBmYWxzZTsKCSAgICAgICB9CgkgICAgIH0KCgoJZnVuY3Rpb24gYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpIHsKCSAgaWYgKGVuY29kaW5nICYmICFpc0J1ZmZlckVuY29kaW5nKGVuY29kaW5nKSkgewoJICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTsKCSAgfQoJfQoKCS8vIFN0cmluZ0RlY29kZXIgcHJvdmlkZXMgYW4gaW50ZXJmYWNlIGZvciBlZmZpY2llbnRseSBzcGxpdHRpbmcgYSBzZXJpZXMgb2YKCS8vIGJ1ZmZlcnMgaW50byBhIHNlcmllcyBvZiBKUyBzdHJpbmdzIHdpdGhvdXQgYnJlYWtpbmcgYXBhcnQgbXVsdGktYnl0ZQoJLy8gY2hhcmFjdGVycy4gQ0VTVS04IGlzIGhhbmRsZWQgYXMgcGFydCBvZiB0aGUgVVRGLTggZW5jb2RpbmcuCgkvLwoJLy8gQFRPRE8gSGFuZGxpbmcgYWxsIGVuY29kaW5ncyBpbnNpZGUgYSBzaW5nbGUgb2JqZWN0IG1ha2VzIGl0IHZlcnkgZGlmZmljdWx0CgkvLyB0byByZWFzb24gYWJvdXQgdGhpcyBjb2RlLCBzbyBpdCBzaG91bGQgYmUgc3BsaXQgdXAgaW4gdGhlIGZ1dHVyZS4KCS8vIEBUT0RPIFRoZXJlIHNob3VsZCBiZSBhIHV0Zjgtc3RyaWN0IGVuY29kaW5nIHRoYXQgcmVqZWN0cyBpbnZhbGlkIFVURi04IGNvZGUKCS8vIHBvaW50cyBhcyB1c2VkIGJ5IENFU1UtOC4KCXZhciBTdHJpbmdEZWNvZGVyID0gZXhwb3J0cy5TdHJpbmdEZWNvZGVyID0gZnVuY3Rpb24oZW5jb2RpbmcpIHsKCSAgdGhpcy5lbmNvZGluZyA9IChlbmNvZGluZyB8fCAndXRmOCcpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvWy1fXS8sICcnKTsKCSAgYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpOwoJICBzd2l0Y2ggKHRoaXMuZW5jb2RpbmcpIHsKCSAgICBjYXNlICd1dGY4JzoKCSAgICAgIC8vIENFU1UtOCByZXByZXNlbnRzIGVhY2ggb2YgU3Vycm9nYXRlIFBhaXIgYnkgMy1ieXRlcwoJICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMzsKCSAgICAgIGJyZWFrOwoJICAgIGNhc2UgJ3VjczInOgoJICAgIGNhc2UgJ3V0ZjE2bGUnOgoJICAgICAgLy8gVVRGLTE2IHJlcHJlc2VudHMgZWFjaCBvZiBTdXJyb2dhdGUgUGFpciBieSAyLWJ5dGVzCgkgICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAyOwoJICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXI7CgkgICAgICBicmVhazsKCSAgICBjYXNlICdiYXNlNjQnOgoJICAgICAgLy8gQmFzZS02NCBzdG9yZXMgMyBieXRlcyBpbiA0IGNoYXJzLCBhbmQgcGFkcyB0aGUgcmVtYWluZGVyLgoJICAgICAgdGhpcy5zdXJyb2dhdGVTaXplID0gMzsKCSAgICAgIHRoaXMuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBiYXNlNjREZXRlY3RJbmNvbXBsZXRlQ2hhcjsKCSAgICAgIGJyZWFrOwoJICAgIGRlZmF1bHQ6CgkgICAgICB0aGlzLndyaXRlID0gcGFzc1Rocm91Z2hXcml0ZTsKCSAgICAgIHJldHVybjsKCSAgfQoKCSAgLy8gRW5vdWdoIHNwYWNlIHRvIHN0b3JlIGFsbCBieXRlcyBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIuIFVURi04IG5lZWRzIDQKCSAgLy8gYnl0ZXMsIGJ1dCBDRVNVLTggbWF5IHJlcXVpcmUgdXAgdG8gNiAoMyBieXRlcyBwZXIgc3Vycm9nYXRlKS4KCSAgdGhpcy5jaGFyQnVmZmVyID0gbmV3IEJ1ZmZlcig2KTsKCSAgLy8gTnVtYmVyIG9mIGJ5dGVzIHJlY2VpdmVkIGZvciB0aGUgY3VycmVudCBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgY2hhcmFjdGVyLgoJICB0aGlzLmNoYXJSZWNlaXZlZCA9IDA7CgkgIC8vIE51bWJlciBvZiBieXRlcyBleHBlY3RlZCBmb3IgdGhlIGN1cnJlbnQgaW5jb21wbGV0ZSBtdWx0aS1ieXRlIGNoYXJhY3Rlci4KCSAgdGhpcy5jaGFyTGVuZ3RoID0gMDsKCX07CgoKCS8vIHdyaXRlIGRlY29kZXMgdGhlIGdpdmVuIGJ1ZmZlciBhbmQgcmV0dXJucyBpdCBhcyBKUyBzdHJpbmcgdGhhdCBpcwoJLy8gZ3VhcmFudGVlZCB0byBub3QgY29udGFpbiBhbnkgcGFydGlhbCBtdWx0aS1ieXRlIGNoYXJhY3RlcnMuIEFueSBwYXJ0aWFsCgkvLyBjaGFyYWN0ZXIgZm91bmQgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyIGlzIGJ1ZmZlcmVkIHVwLCBhbmQgd2lsbCBiZQoJLy8gcmV0dXJuZWQgd2hlbiBjYWxsaW5nIHdyaXRlIGFnYWluIHdpdGggdGhlIHJlbWFpbmluZyBieXRlcy4KCS8vCgkvLyBOb3RlOiBDb252ZXJ0aW5nIGEgQnVmZmVyIGNvbnRhaW5pbmcgYW4gb3JwaGFuIHN1cnJvZ2F0ZSB0byBhIFN0cmluZwoJLy8gY3VycmVudGx5IHdvcmtzLCBidXQgY29udmVydGluZyBhIFN0cmluZyB0byBhIEJ1ZmZlciAodmlhIGBuZXcgQnVmZmVyYCwgb3IKCS8vIEJ1ZmZlciN3cml0ZSkgd2lsbCByZXBsYWNlIGluY29tcGxldGUgc3Vycm9nYXRlcyB3aXRoIHRoZSB1bmljb2RlCgkvLyByZXBsYWNlbWVudCBjaGFyYWN0ZXIuIFNlZSBodHRwczovL2NvZGVyZXZpZXcuY2hyb21pdW0ub3JnLzEyMTE3MzAwOS8gLgoJU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihidWZmZXIpIHsKCSAgdmFyIGNoYXJTdHIgPSAnJzsKCSAgLy8gaWYgb3VyIGxhc3Qgd3JpdGUgZW5kZWQgd2l0aCBhbiBpbmNvbXBsZXRlIG11bHRpYnl0ZSBjaGFyYWN0ZXIKCSAgd2hpbGUgKHRoaXMuY2hhckxlbmd0aCkgewoJICAgIC8vIGRldGVybWluZSBob3cgbWFueSByZW1haW5pbmcgYnl0ZXMgdGhpcyBidWZmZXIgaGFzIHRvIG9mZmVyIGZvciB0aGlzIGNoYXIKCSAgICB2YXIgYXZhaWxhYmxlID0gKGJ1ZmZlci5sZW5ndGggPj0gdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQpID8KCSAgICAgICAgdGhpcy5jaGFyTGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQgOgoJICAgICAgICBidWZmZXIubGVuZ3RoOwoKCSAgICAvLyBhZGQgdGhlIG5ldyBieXRlcyB0byB0aGUgY2hhciBidWZmZXIKCSAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIHRoaXMuY2hhclJlY2VpdmVkLCAwLCBhdmFpbGFibGUpOwoJICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IGF2YWlsYWJsZTsKCgkgICAgaWYgKHRoaXMuY2hhclJlY2VpdmVkIDwgdGhpcy5jaGFyTGVuZ3RoKSB7CgkgICAgICAvLyBzdGlsbCBub3QgZW5vdWdoIGNoYXJzIGluIHRoaXMgYnVmZmVyPyB3YWl0IGZvciBtb3JlIC4uLgoJICAgICAgcmV0dXJuICcnOwoJICAgIH0KCgkgICAgLy8gcmVtb3ZlIGJ5dGVzIGJlbG9uZ2luZyB0byB0aGUgY3VycmVudCBjaGFyYWN0ZXIgZnJvbSB0aGUgYnVmZmVyCgkgICAgYnVmZmVyID0gYnVmZmVyLnNsaWNlKGF2YWlsYWJsZSwgYnVmZmVyLmxlbmd0aCk7CgoJICAgIC8vIGdldCB0aGUgY2hhcmFjdGVyIHRoYXQgd2FzIHNwbGl0CgkgICAgY2hhclN0ciA9IHRoaXMuY2hhckJ1ZmZlci5zbGljZSgwLCB0aGlzLmNoYXJMZW5ndGgpLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpOwoKCSAgICAvLyBDRVNVLTg6IGxlYWQgc3Vycm9nYXRlIChEODAwLURCRkYpIGlzIGFsc28gdGhlIGluY29tcGxldGUgY2hhcmFjdGVyCgkgICAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGNoYXJTdHIubGVuZ3RoIC0gMSk7CgkgICAgaWYgKGNoYXJDb2RlID49IDB4RDgwMCAmJiBjaGFyQ29kZSA8PSAweERCRkYpIHsKCSAgICAgIHRoaXMuY2hhckxlbmd0aCArPSB0aGlzLnN1cnJvZ2F0ZVNpemU7CgkgICAgICBjaGFyU3RyID0gJyc7CgkgICAgICBjb250aW51ZTsKCSAgICB9CgkgICAgdGhpcy5jaGFyUmVjZWl2ZWQgPSB0aGlzLmNoYXJMZW5ndGggPSAwOwoKCSAgICAvLyBpZiB0aGVyZSBhcmUgbm8gbW9yZSBieXRlcyBpbiB0aGlzIGJ1ZmZlciwganVzdCBlbWl0IG91ciBjaGFyCgkgICAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHsKCSAgICAgIHJldHVybiBjaGFyU3RyOwoJICAgIH0KCSAgICBicmVhazsKCSAgfQoKCSAgLy8gZGV0ZXJtaW5lIGFuZCBzZXQgY2hhckxlbmd0aCAvIGNoYXJSZWNlaXZlZAoJICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcik7CgoJICB2YXIgZW5kID0gYnVmZmVyLmxlbmd0aDsKCSAgaWYgKHRoaXMuY2hhckxlbmd0aCkgewoJICAgIC8vIGJ1ZmZlciB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXIgYnl0ZXMgd2UgZ290CgkgICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCAwLCBidWZmZXIubGVuZ3RoIC0gdGhpcy5jaGFyUmVjZWl2ZWQsIGVuZCk7CgkgICAgZW5kIC09IHRoaXMuY2hhclJlY2VpdmVkOwoJICB9CgoJICBjaGFyU3RyICs9IGJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCBlbmQpOwoKCSAgdmFyIGVuZCA9IGNoYXJTdHIubGVuZ3RoIC0gMTsKCSAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGVuZCk7CgkgIC8vIENFU1UtODogbGVhZCBzdXJyb2dhdGUgKEQ4MDAtREJGRikgaXMgYWxzbyB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXIKCSAgaWYgKGNoYXJDb2RlID49IDB4RDgwMCAmJiBjaGFyQ29kZSA8PSAweERCRkYpIHsKCSAgICB2YXIgc2l6ZSA9IHRoaXMuc3Vycm9nYXRlU2l6ZTsKCSAgICB0aGlzLmNoYXJMZW5ndGggKz0gc2l6ZTsKCSAgICB0aGlzLmNoYXJSZWNlaXZlZCArPSBzaXplOwoJICAgIHRoaXMuY2hhckJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgc2l6ZSwgMCwgc2l6ZSk7CgkgICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCAwLCAwLCBzaXplKTsKCSAgICByZXR1cm4gY2hhclN0ci5zdWJzdHJpbmcoMCwgZW5kKTsKCSAgfQoKCSAgLy8gb3IganVzdCBlbWl0IHRoZSBjaGFyU3RyCgkgIHJldHVybiBjaGFyU3RyOwoJfTsKCgkvLyBkZXRlY3RJbmNvbXBsZXRlQ2hhciBkZXRlcm1pbmVzIGlmIHRoZXJlIGlzIGFuIGluY29tcGxldGUgVVRGLTggY2hhcmFjdGVyIGF0CgkvLyB0aGUgZW5kIG9mIHRoZSBnaXZlbiBidWZmZXIuIElmIHNvLCBpdCBzZXRzIHRoaXMuY2hhckxlbmd0aCB0byB0aGUgYnl0ZQoJLy8gbGVuZ3RoIHRoYXQgY2hhcmFjdGVyLCBhbmQgc2V0cyB0aGlzLmNoYXJSZWNlaXZlZCB0byB0aGUgbnVtYmVyIG9mIGJ5dGVzCgkvLyB0aGF0IGFyZSBhdmFpbGFibGUgZm9yIHRoaXMgY2hhcmFjdGVyLgoJU3RyaW5nRGVjb2Rlci5wcm90b3R5cGUuZGV0ZWN0SW5jb21wbGV0ZUNoYXIgPSBmdW5jdGlvbihidWZmZXIpIHsKCSAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IGJ5dGVzIHdlIGhhdmUgdG8gY2hlY2sgYXQgdGhlIGVuZCBvZiB0aGlzIGJ1ZmZlcgoJICB2YXIgaSA9IChidWZmZXIubGVuZ3RoID49IDMpID8gMyA6IGJ1ZmZlci5sZW5ndGg7CgoJICAvLyBGaWd1cmUgb3V0IGlmIG9uZSBvZiB0aGUgbGFzdCBpIGJ5dGVzIG9mIG91ciBidWZmZXIgYW5ub3VuY2VzIGFuCgkgIC8vIGluY29tcGxldGUgY2hhci4KCSAgZm9yICg7IGkgPiAwOyBpLS0pIHsKCSAgICB2YXIgYyA9IGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gaV07CgoJICAgIC8vIFNlZSBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1VURi04I0Rlc2NyaXB0aW9uCgoJICAgIC8vIDExMFhYWFhYCgkgICAgaWYgKGkgPT0gMSAmJiBjID4+IDUgPT0gMHgwNikgewoJICAgICAgdGhpcy5jaGFyTGVuZ3RoID0gMjsKCSAgICAgIGJyZWFrOwoJICAgIH0KCgkgICAgLy8gMTExMFhYWFgKCSAgICBpZiAoaSA8PSAyICYmIGMgPj4gNCA9PSAweDBFKSB7CgkgICAgICB0aGlzLmNoYXJMZW5ndGggPSAzOwoJICAgICAgYnJlYWs7CgkgICAgfQoKCSAgICAvLyAxMTExMFhYWAoJICAgIGlmIChpIDw9IDMgJiYgYyA+PiAzID09IDB4MUUpIHsKCSAgICAgIHRoaXMuY2hhckxlbmd0aCA9IDQ7CgkgICAgICBicmVhazsKCSAgICB9CgkgIH0KCSAgdGhpcy5jaGFyUmVjZWl2ZWQgPSBpOwoJfTsKCglTdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbihidWZmZXIpIHsKCSAgdmFyIHJlcyA9ICcnOwoJICBpZiAoYnVmZmVyICYmIGJ1ZmZlci5sZW5ndGgpCgkgICAgcmVzID0gdGhpcy53cml0ZShidWZmZXIpOwoKCSAgaWYgKHRoaXMuY2hhclJlY2VpdmVkKSB7CgkgICAgdmFyIGNyID0gdGhpcy5jaGFyUmVjZWl2ZWQ7CgkgICAgdmFyIGJ1ZiA9IHRoaXMuY2hhckJ1ZmZlcjsKCSAgICB2YXIgZW5jID0gdGhpcy5lbmNvZGluZzsKCSAgICByZXMgKz0gYnVmLnNsaWNlKDAsIGNyKS50b1N0cmluZyhlbmMpOwoJICB9CgoJICByZXR1cm4gcmVzOwoJfTsKCglmdW5jdGlvbiBwYXNzVGhyb3VnaFdyaXRlKGJ1ZmZlcikgewoJICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpOwoJfQoKCWZ1bmN0aW9uIHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKSB7CgkgIHRoaXMuY2hhclJlY2VpdmVkID0gYnVmZmVyLmxlbmd0aCAlIDI7CgkgIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMiA6IDA7Cgl9CgoJZnVuY3Rpb24gYmFzZTY0RGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKSB7CgkgIHRoaXMuY2hhclJlY2VpdmVkID0gYnVmZmVyLmxlbmd0aCAlIDM7CgkgIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMyA6IDA7Cgl9CgoKLyoqKi8gfSwKLyogMzMgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KQoKCi8qKiovIH0sCi8qIDM0ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCW1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNSkKCgovKioqLyB9LAovKiAzNSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvCgkvLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhICJmaWx0ZXIiLAoJLy8gYnV0IHRoYXQncyBub3QgYSBncmVhdCBuYW1lIGZvciBpdCwgc2luY2UgdGhhdCBpbXBsaWVzIGEgdGhpbmcgd2hlcmUKCS8vIHNvbWUgYml0cyBwYXNzIHRocm91Z2gsIGFuZCBvdGhlcnMgYXJlIHNpbXBseSBpZ25vcmVkLiAgKFRoYXQgd291bGQKCS8vIGJlIGEgdmFsaWQgZXhhbXBsZSBvZiBhIHRyYW5zZm9ybSwgb2YgY291cnNlLikKCS8vCgkvLyBXaGlsZSB0aGUgb3V0cHV0IGlzIGNhdXNhbGx5IHJlbGF0ZWQgdG8gdGhlIGlucHV0LCBpdCdzIG5vdCBhCgkvLyBuZWNlc3NhcmlseSBzeW1tZXRyaWMgb3Igc3luY2hyb25vdXMgdHJhbnNmb3JtYXRpb24uICBGb3IgZXhhbXBsZSwKCS8vIGEgemxpYiBzdHJlYW0gbWlnaHQgdGFrZSBtdWx0aXBsZSBwbGFpbi10ZXh0IHdyaXRlcygpLCBhbmQgdGhlbgoJLy8gZW1pdCBhIHNpbmdsZSBjb21wcmVzc2VkIGNodW5rIHNvbWUgdGltZSBpbiB0aGUgZnV0dXJlLgoJLy8KCS8vIEhlcmUncyBob3cgdGhpcyB3b3JrczoKCS8vCgkvLyBUaGUgVHJhbnNmb3JtIHN0cmVhbSBoYXMgYWxsIHRoZSBhc3BlY3RzIG9mIHRoZSByZWFkYWJsZSBhbmQgd3JpdGFibGUKCS8vIHN0cmVhbSBjbGFzc2VzLiAgV2hlbiB5b3Ugd3JpdGUoY2h1bmspLCB0aGF0IGNhbGxzIF93cml0ZShjaHVuayxjYikKCS8vIGludGVybmFsbHksIGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZXJlJ3MgYSBsb3Qgb2YgcGVuZGluZyB3cml0ZXMKCS8vIGJ1ZmZlcmVkIHVwLiAgV2hlbiB5b3UgY2FsbCByZWFkKCksIHRoYXQgY2FsbHMgX3JlYWQobikgdW50aWwKCS8vIHRoZXJlJ3MgZW5vdWdoIHBlbmRpbmcgcmVhZGFibGUgZGF0YSBidWZmZXJlZCB1cC4KCS8vCgkvLyBJbiBhIHRyYW5zZm9ybSBzdHJlYW0sIHRoZSB3cml0dGVuIGRhdGEgaXMgcGxhY2VkIGluIGEgYnVmZmVyLiAgV2hlbgoJLy8gX3JlYWQobikgaXMgY2FsbGVkLCBpdCB0cmFuc2Zvcm1zIHRoZSBxdWV1ZWQgdXAgZGF0YSwgY2FsbGluZyB0aGUKCS8vIGJ1ZmZlcmVkIF93cml0ZSBjYidzIGFzIGl0IGNvbnN1bWVzIGNodW5rcy4gIElmIGNvbnN1bWluZyBhIHNpbmdsZQoJLy8gd3JpdHRlbiBjaHVuayB3b3VsZCByZXN1bHQgaW4gbXVsdGlwbGUgb3V0cHV0IGNodW5rcywgdGhlbiB0aGUgZmlyc3QKCS8vIG91dHB1dHRlZCBiaXQgY2FsbHMgdGhlIHJlYWRjYiwgYW5kIHN1YnNlcXVlbnQgY2h1bmtzIGp1c3QgZ28gaW50bwoJLy8gdGhlIHJlYWQgYnVmZmVyLCBhbmQgd2lsbCBjYXVzZSBpdCB0byBlbWl0ICdyZWFkYWJsZScgaWYgbmVjZXNzYXJ5LgoJLy8KCS8vIFRoaXMgd2F5LCBiYWNrLXByZXNzdXJlIGlzIGFjdHVhbGx5IGRldGVybWluZWQgYnkgdGhlIHJlYWRpbmcgc2lkZSwKCS8vIHNpbmNlIF9yZWFkIGhhcyB0byBiZSBjYWxsZWQgdG8gc3RhcnQgcHJvY2Vzc2luZyBhIG5ldyBjaHVuay4gIEhvd2V2ZXIsCgkvLyBhIHBhdGhvbG9naWNhbCBpbmZsYXRlIHR5cGUgb2YgdHJhbnNmb3JtIGNhbiBjYXVzZSBleGNlc3NpdmUgYnVmZmVyaW5nCgkvLyBoZXJlLiAgRm9yIGV4YW1wbGUsIGltYWdpbmUgYSBzdHJlYW0gd2hlcmUgZXZlcnkgYnl0ZSBvZiBpbnB1dCBpcwoJLy8gaW50ZXJwcmV0ZWQgYXMgYW4gaW50ZWdlciBmcm9tIDAtMjU1LCBhbmQgdGhlbiByZXN1bHRzIGluIHRoYXQgbWFueQoJLy8gYnl0ZXMgb2Ygb3V0cHV0LiAgV3JpdGluZyB0aGUgNCBieXRlcyB7ZmYsZmYsZmYsZmZ9IHdvdWxkIHJlc3VsdCBpbgoJLy8gMWtiIG9mIGRhdGEgYmVpbmcgb3V0cHV0LiAgSW4gdGhpcyBjYXNlLCB5b3UgY291bGQgd3JpdGUgYSB2ZXJ5IHNtYWxsCgkvLyBhbW91bnQgb2YgaW5wdXQsIGFuZCBlbmQgdXAgd2l0aCBhIHZlcnkgbGFyZ2UgYW1vdW50IG9mIG91dHB1dC4gIEluCgkvLyBzdWNoIGEgcGF0aG9sb2dpY2FsIGluZmxhdGluZyBtZWNoYW5pc20sIHRoZXJlJ2QgYmUgbm8gd2F5IHRvIHRlbGwKCS8vIHRoZSBzeXN0ZW0gdG8gc3RvcCBkb2luZyB0aGUgdHJhbnNmb3JtLiAgQSBzaW5nbGUgNE1CIHdyaXRlIGNvdWxkCgkvLyBjYXVzZSB0aGUgc3lzdGVtIHRvIHJ1biBvdXQgb2YgbWVtb3J5LgoJLy8KCS8vIEhvd2V2ZXIsIGV2ZW4gaW4gc3VjaCBhIHBhdGhvbG9naWNhbCBjYXNlLCBvbmx5IGEgc2luZ2xlIHdyaXR0ZW4gY2h1bmsKCS8vIHdvdWxkIGJlIGNvbnN1bWVkLCBhbmQgdGhlbiB0aGUgcmVzdCB3b3VsZCB3YWl0ICh1bi10cmFuc2Zvcm1lZCkgdW50aWwKCS8vIHRoZSByZXN1bHRzIG9mIHRoZSBwcmV2aW91cyB0cmFuc2Zvcm1lZCBjaHVuayB3ZXJlIGNvbnN1bWVkLgoKCSd1c2Ugc3RyaWN0JzsKCgltb2R1bGUuZXhwb3J0cyA9IFRyYW5zZm9ybTsKCgl2YXIgRHVwbGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOCk7CgoJLyo8cmVwbGFjZW1lbnQ+Ki8KCXZhciB1dGlsID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7Cgl1dGlsLmluaGVyaXRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7CgkvKjwvcmVwbGFjZW1lbnQ+Ki8KCgl1dGlsLmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTsKCglmdW5jdGlvbiBUcmFuc2Zvcm1TdGF0ZShzdHJlYW0pIHsKCSAgdGhpcy5hZnRlclRyYW5zZm9ybSA9IGZ1bmN0aW9uIChlciwgZGF0YSkgewoJICAgIHJldHVybiBhZnRlclRyYW5zZm9ybShzdHJlYW0sIGVyLCBkYXRhKTsKCSAgfTsKCgkgIHRoaXMubmVlZFRyYW5zZm9ybSA9IGZhbHNlOwoJICB0aGlzLnRyYW5zZm9ybWluZyA9IGZhbHNlOwoJICB0aGlzLndyaXRlY2IgPSBudWxsOwoJICB0aGlzLndyaXRlY2h1bmsgPSBudWxsOwoJICB0aGlzLndyaXRlZW5jb2RpbmcgPSBudWxsOwoJfQoKCWZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHsKCSAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTsKCSAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7CgoJICB2YXIgY2IgPSB0cy53cml0ZWNiOwoKCSAgaWYgKCFjYikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignbm8gd3JpdGVjYiBpbiBUcmFuc2Zvcm0gY2xhc3MnKSk7CgoJICB0cy53cml0ZWNodW5rID0gbnVsbDsKCSAgdHMud3JpdGVjYiA9IG51bGw7CgoJICBpZiAoZGF0YSAhPT0gbnVsbCAmJiBkYXRhICE9PSB1bmRlZmluZWQpIHN0cmVhbS5wdXNoKGRhdGEpOwoKCSAgY2IoZXIpOwoKCSAgdmFyIHJzID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlOwoJICBycy5yZWFkaW5nID0gZmFsc2U7CgkgIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgewoJICAgIHN0cmVhbS5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTsKCSAgfQoJfQoKCWZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7CgkgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTsKCgkgIER1cGxleC5jYWxsKHRoaXMsIG9wdGlvbnMpOwoKCSAgdGhpcy5fdHJhbnNmb3JtU3RhdGUgPSBuZXcgVHJhbnNmb3JtU3RhdGUodGhpcyk7CgoJICB2YXIgc3RyZWFtID0gdGhpczsKCgkgIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLgoJICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7CgoJICAvLyB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3MKCSAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZQoJICAvLyBzeW5jIGd1YXJkIGZsYWcuCgkgIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlOwoKCSAgaWYgKG9wdGlvbnMpIHsKCSAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybTsKCgkgICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7CgkgIH0KCgkgIC8vIFdoZW4gdGhlIHdyaXRhYmxlIHNpZGUgZmluaXNoZXMsIHRoZW4gZmx1c2ggb3V0IGFueXRoaW5nIHJlbWFpbmluZy4KCSAgdGhpcy5vbmNlKCdwcmVmaW5pc2gnLCBmdW5jdGlvbiAoKSB7CgkgICAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2goZnVuY3Rpb24gKGVyLCBkYXRhKSB7CgkgICAgICBkb25lKHN0cmVhbSwgZXIsIGRhdGEpOwoJICAgIH0pO2Vsc2UgZG9uZShzdHJlYW0pOwoJICB9KTsKCX0KCglUcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7CgkgIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTsKCSAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7Cgl9OwoKCS8vIFRoaXMgaXMgdGhlIHBhcnQgd2hlcmUgeW91IGRvIHN0dWZmIQoJLy8gb3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiBpbiBpbXBsZW1lbnRhdGlvbiBjbGFzc2VzLgoJLy8gJ2NodW5rJyBpcyBhbiBpbnB1dCBjaHVuay4KCS8vCgkvLyBDYWxsIGBwdXNoKG5ld0NodW5rKWAgdG8gcGFzcyBhbG9uZyB0cmFuc2Zvcm1lZCBvdXRwdXQKCS8vIHRvIHRoZSByZWFkYWJsZSBzaWRlLiAgWW91IG1heSBjYWxsICdwdXNoJyB6ZXJvIG9yIG1vcmUgdGltZXMuCgkvLwoJLy8gQ2FsbCBgY2IoZXJyKWAgd2hlbiB5b3UgYXJlIGRvbmUgd2l0aCB0aGlzIGNodW5rLiAgSWYgeW91IHBhc3MKCS8vIGFuIGVycm9yLCB0aGVuIHRoYXQnbGwgcHV0IHRoZSBodXJ0IG9uIHRoZSB3aG9sZSBvcGVyYXRpb24uICBJZiB5b3UKCS8vIG5ldmVyIGNhbGwgY2IoKSwgdGhlbiB5b3UnbGwgbmV2ZXIgZ2V0IGFub3RoZXIgY2h1bmsuCglUcmFuc2Zvcm0ucHJvdG90eXBlLl90cmFuc2Zvcm0gPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewoJICB0aHJvdyBuZXcgRXJyb3IoJ190cmFuc2Zvcm0oKSBpcyBub3QgaW1wbGVtZW50ZWQnKTsKCX07CgoJVHJhbnNmb3JtLnByb3RvdHlwZS5fd3JpdGUgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikgewoJICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTsKCSAgdHMud3JpdGVjYiA9IGNiOwoJICB0cy53cml0ZWNodW5rID0gY2h1bms7CgkgIHRzLndyaXRlZW5jb2RpbmcgPSBlbmNvZGluZzsKCSAgaWYgKCF0cy50cmFuc2Zvcm1pbmcpIHsKCSAgICB2YXIgcnMgPSB0aGlzLl9yZWFkYWJsZVN0YXRlOwoJICAgIGlmICh0cy5uZWVkVHJhbnNmb3JtIHx8IHJzLm5lZWRSZWFkYWJsZSB8fCBycy5sZW5ndGggPCBycy5oaWdoV2F0ZXJNYXJrKSB0aGlzLl9yZWFkKHJzLmhpZ2hXYXRlck1hcmspOwoJICB9Cgl9OwoKCS8vIERvZXNuJ3QgbWF0dGVyIHdoYXQgdGhlIGFyZ3MgYXJlIGhlcmUuCgkvLyBfdHJhbnNmb3JtIGRvZXMgYWxsIHRoZSB3b3JrLgoJLy8gVGhhdCB3ZSBnb3QgaGVyZSBtZWFucyB0aGF0IHRoZSByZWFkYWJsZSBzaWRlIHdhbnRzIG1vcmUgZGF0YS4KCVRyYW5zZm9ybS5wcm90b3R5cGUuX3JlYWQgPSBmdW5jdGlvbiAobikgewoJICB2YXIgdHMgPSB0aGlzLl90cmFuc2Zvcm1TdGF0ZTsKCgkgIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykgewoJICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7CgkgICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTsKCSAgfSBlbHNlIHsKCSAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluCgkgICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuCgkgICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7CgkgIH0KCX07CgoJZnVuY3Rpb24gZG9uZShzdHJlYW0sIGVyLCBkYXRhKSB7CgkgIGlmIChlcikgcmV0dXJuIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTsKCgkgIGlmIChkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHVuZGVmaW5lZCkgc3RyZWFtLnB1c2goZGF0YSk7CgoJICAvLyBpZiB0aGVyZSdzIG5vdGhpbmcgaW4gdGhlIHdyaXRlIGJ1ZmZlciwgdGhlbiB0aGF0IG1lYW5zCgkgIC8vIHRoYXQgbm90aGluZyBtb3JlIHdpbGwgZXZlciBiZSBwcm92aWRlZAoJICB2YXIgd3MgPSBzdHJlYW0uX3dyaXRhYmxlU3RhdGU7CgkgIHZhciB0cyA9IHN0cmVhbS5fdHJhbnNmb3JtU3RhdGU7CgoJICBpZiAod3MubGVuZ3RoKSB0aHJvdyBuZXcgRXJyb3IoJ0NhbGxpbmcgdHJhbnNmb3JtIGRvbmUgd2hlbiB3cy5sZW5ndGggIT0gMCcpOwoKCSAgaWYgKHRzLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7CgoJICByZXR1cm4gc3RyZWFtLnB1c2gobnVsbCk7Cgl9CgovKioqLyB9LAovKiAzNiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgltb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzcpCgoKLyoqKi8gfSwKLyogMzcgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uCgkvLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS4KCS8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuCgoJJ3VzZSBzdHJpY3QnOwoKCW1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2g7CgoJdmFyIFRyYW5zZm9ybSA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpOwoKCS8qPHJlcGxhY2VtZW50PiovCgl2YXIgdXRpbCA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpOwoJdXRpbC5pbmhlcml0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpOwoJLyo8L3JlcGxhY2VtZW50PiovCgoJdXRpbC5pbmhlcml0cyhQYXNzVGhyb3VnaCwgVHJhbnNmb3JtKTsKCglmdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7CgkgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucyk7CgoJICBUcmFuc2Zvcm0uY2FsbCh0aGlzLCBvcHRpb25zKTsKCX0KCglQYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7CgkgIGNiKG51bGwsIGNodW5rKTsKCX07CgovKioqLyB9LAovKiAzOCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgQnVmZmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNikuQnVmZmVyCgoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYnVmKSB7CgkJLy8gSWYgdGhlIGJ1ZmZlciBpcyBiYWNrZWQgYnkgYSBVaW50OEFycmF5LCBhIGZhc3RlciB2ZXJzaW9uIHdpbGwgd29yawoJCWlmIChidWYgaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7CgkJCS8vIElmIHRoZSBidWZmZXIgaXNuJ3QgYSBzdWJhcnJheSwgcmV0dXJuIHRoZSB1bmRlcmx5aW5nIEFycmF5QnVmZmVyCgkJCWlmIChidWYuYnl0ZU9mZnNldCA9PT0gMCAmJiBidWYuYnl0ZUxlbmd0aCA9PT0gYnVmLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7CgkJCQlyZXR1cm4gYnVmLmJ1ZmZlcgoJCQl9IGVsc2UgaWYgKHR5cGVvZiBidWYuYnVmZmVyLnNsaWNlID09PSAnZnVuY3Rpb24nKSB7CgkJCQkvLyBPdGhlcndpc2Ugd2UgbmVlZCB0byBnZXQgYSBwcm9wZXIgY29weQoJCQkJcmV0dXJuIGJ1Zi5idWZmZXIuc2xpY2UoYnVmLmJ5dGVPZmZzZXQsIGJ1Zi5ieXRlT2Zmc2V0ICsgYnVmLmJ5dGVMZW5ndGgpCgkJCX0KCQl9CgoJCWlmIChCdWZmZXIuaXNCdWZmZXIoYnVmKSkgewoJCQkvLyBUaGlzIGlzIHRoZSBzbG93IHZlcnNpb24gdGhhdCB3aWxsIHdvcmsgd2l0aCBhbnkgQnVmZmVyCgkJCS8vIGltcGxlbWVudGF0aW9uIChldmVuIGluIG9sZCBicm93c2VycykKCQkJdmFyIGFycmF5Q29weSA9IG5ldyBVaW50OEFycmF5KGJ1Zi5sZW5ndGgpCgkJCXZhciBsZW4gPSBidWYubGVuZ3RoCgkJCWZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKCQkJCWFycmF5Q29weVtpXSA9IGJ1ZltpXQoJCQl9CgkJCXJldHVybiBhcnJheUNvcHkuYnVmZmVyCgkJfSBlbHNlIHsKCQkJdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJykKCQl9Cgl9CgoKLyoqKi8gfSwKLyogMzkgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSBleHRlbmQKCgl2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5OwoKCWZ1bmN0aW9uIGV4dGVuZCgpIHsKCSAgICB2YXIgdGFyZ2V0ID0ge30KCgkgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKCSAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXQoKCSAgICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewoJICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7CgkgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XQoJICAgICAgICAgICAgfQoJICAgICAgICB9CgkgICAgfQoKCSAgICByZXR1cm4gdGFyZ2V0Cgl9CgoKLyoqKi8gfSwKLyogNDAgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7CgkgICIxMDAiOiAiQ29udGludWUiLAoJICAiMTAxIjogIlN3aXRjaGluZyBQcm90b2NvbHMiLAoJICAiMTAyIjogIlByb2Nlc3NpbmciLAoJICAiMjAwIjogIk9LIiwKCSAgIjIwMSI6ICJDcmVhdGVkIiwKCSAgIjIwMiI6ICJBY2NlcHRlZCIsCgkgICIyMDMiOiAiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb24iLAoJICAiMjA0IjogIk5vIENvbnRlbnQiLAoJICAiMjA1IjogIlJlc2V0IENvbnRlbnQiLAoJICAiMjA2IjogIlBhcnRpYWwgQ29udGVudCIsCgkgICIyMDciOiAiTXVsdGktU3RhdHVzIiwKCSAgIjIwOCI6ICJBbHJlYWR5IFJlcG9ydGVkIiwKCSAgIjIyNiI6ICJJTSBVc2VkIiwKCSAgIjMwMCI6ICJNdWx0aXBsZSBDaG9pY2VzIiwKCSAgIjMwMSI6ICJNb3ZlZCBQZXJtYW5lbnRseSIsCgkgICIzMDIiOiAiRm91bmQiLAoJICAiMzAzIjogIlNlZSBPdGhlciIsCgkgICIzMDQiOiAiTm90IE1vZGlmaWVkIiwKCSAgIjMwNSI6ICJVc2UgUHJveHkiLAoJICAiMzA3IjogIlRlbXBvcmFyeSBSZWRpcmVjdCIsCgkgICIzMDgiOiAiUGVybWFuZW50IFJlZGlyZWN0IiwKCSAgIjQwMCI6ICJCYWQgUmVxdWVzdCIsCgkgICI0MDEiOiAiVW5hdXRob3JpemVkIiwKCSAgIjQwMiI6ICJQYXltZW50IFJlcXVpcmVkIiwKCSAgIjQwMyI6ICJGb3JiaWRkZW4iLAoJICAiNDA0IjogIk5vdCBGb3VuZCIsCgkgICI0MDUiOiAiTWV0aG9kIE5vdCBBbGxvd2VkIiwKCSAgIjQwNiI6ICJOb3QgQWNjZXB0YWJsZSIsCgkgICI0MDciOiAiUHJveHkgQXV0aGVudGljYXRpb24gUmVxdWlyZWQiLAoJICAiNDA4IjogIlJlcXVlc3QgVGltZW91dCIsCgkgICI0MDkiOiAiQ29uZmxpY3QiLAoJICAiNDEwIjogIkdvbmUiLAoJICAiNDExIjogIkxlbmd0aCBSZXF1aXJlZCIsCgkgICI0MTIiOiAiUHJlY29uZGl0aW9uIEZhaWxlZCIsCgkgICI0MTMiOiAiUGF5bG9hZCBUb28gTGFyZ2UiLAoJICAiNDE0IjogIlVSSSBUb28gTG9uZyIsCgkgICI0MTUiOiAiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZSIsCgkgICI0MTYiOiAiUmFuZ2UgTm90IFNhdGlzZmlhYmxlIiwKCSAgIjQxNyI6ICJFeHBlY3RhdGlvbiBGYWlsZWQiLAoJICAiNDE4IjogIkknbSBhIHRlYXBvdCIsCgkgICI0MjEiOiAiTWlzZGlyZWN0ZWQgUmVxdWVzdCIsCgkgICI0MjIiOiAiVW5wcm9jZXNzYWJsZSBFbnRpdHkiLAoJICAiNDIzIjogIkxvY2tlZCIsCgkgICI0MjQiOiAiRmFpbGVkIERlcGVuZGVuY3kiLAoJICAiNDI1IjogIlVub3JkZXJlZCBDb2xsZWN0aW9uIiwKCSAgIjQyNiI6ICJVcGdyYWRlIFJlcXVpcmVkIiwKCSAgIjQyOCI6ICJQcmVjb25kaXRpb24gUmVxdWlyZWQiLAoJICAiNDI5IjogIlRvbyBNYW55IFJlcXVlc3RzIiwKCSAgIjQzMSI6ICJSZXF1ZXN0IEhlYWRlciBGaWVsZHMgVG9vIExhcmdlIiwKCSAgIjQ1MSI6ICJVbmF2YWlsYWJsZSBGb3IgTGVnYWwgUmVhc29ucyIsCgkgICI1MDAiOiAiSW50ZXJuYWwgU2VydmVyIEVycm9yIiwKCSAgIjUwMSI6ICJOb3QgSW1wbGVtZW50ZWQiLAoJICAiNTAyIjogIkJhZCBHYXRld2F5IiwKCSAgIjUwMyI6ICJTZXJ2aWNlIFVuYXZhaWxhYmxlIiwKCSAgIjUwNCI6ICJHYXRld2F5IFRpbWVvdXQiLAoJICAiNTA1IjogIkhUVFAgVmVyc2lvbiBOb3QgU3VwcG9ydGVkIiwKCSAgIjUwNiI6ICJWYXJpYW50IEFsc28gTmVnb3RpYXRlcyIsCgkgICI1MDciOiAiSW5zdWZmaWNpZW50IFN0b3JhZ2UiLAoJICAiNTA4IjogIkxvb3AgRGV0ZWN0ZWQiLAoJICAiNTA5IjogIkJhbmR3aWR0aCBMaW1pdCBFeGNlZWRlZCIsCgkgICI1MTAiOiAiTm90IEV4dGVuZGVkIiwKCSAgIjUxMSI6ICJOZXR3b3JrIEF1dGhlbnRpY2F0aW9uIFJlcXVpcmVkIgoJfQoKCi8qKiovIH0sCi8qIDQxICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgoJLy8KCS8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCgkvLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCgkvLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCgkvLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCgkvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0CgkvLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKCS8vIGZvbGxvd2luZyBjb25kaXRpb25zOgoJLy8KCS8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCgkvLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KCS8vCgkvLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwoJLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgoJLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgoJLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCgkvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKCS8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKCS8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCgoJJ3VzZSBzdHJpY3QnOwoKCXZhciBwdW55Y29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDIpOwoJdmFyIHV0aWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KTsKCglleHBvcnRzLnBhcnNlID0gdXJsUGFyc2U7CglleHBvcnRzLnJlc29sdmUgPSB1cmxSZXNvbHZlOwoJZXhwb3J0cy5yZXNvbHZlT2JqZWN0ID0gdXJsUmVzb2x2ZU9iamVjdDsKCWV4cG9ydHMuZm9ybWF0ID0gdXJsRm9ybWF0OwoKCWV4cG9ydHMuVXJsID0gVXJsOwoKCWZ1bmN0aW9uIFVybCgpIHsKCSAgdGhpcy5wcm90b2NvbCA9IG51bGw7CgkgIHRoaXMuc2xhc2hlcyA9IG51bGw7CgkgIHRoaXMuYXV0aCA9IG51bGw7CgkgIHRoaXMuaG9zdCA9IG51bGw7CgkgIHRoaXMucG9ydCA9IG51bGw7CgkgIHRoaXMuaG9zdG5hbWUgPSBudWxsOwoJICB0aGlzLmhhc2ggPSBudWxsOwoJICB0aGlzLnNlYXJjaCA9IG51bGw7CgkgIHRoaXMucXVlcnkgPSBudWxsOwoJICB0aGlzLnBhdGhuYW1lID0gbnVsbDsKCSAgdGhpcy5wYXRoID0gbnVsbDsKCSAgdGhpcy5ocmVmID0gbnVsbDsKCX0KCgkvLyBSZWZlcmVuY2U6IFJGQyAzOTg2LCBSRkMgMTgwOCwgUkZDIDIzOTYKCgkvLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZQoJLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuCgl2YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSwKCSAgICBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC8sCgoJICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgYSBzaW1wbGUgcGF0aCBVUkwKCSAgICBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFwvXC8/KD8hXC8pW15cP1xzXSopKFw/W15cc10qKT8kLywKCgkgICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgcmVzZXJ2ZWQgZm9yIGRlbGltaXRpbmcgVVJMcy4KCSAgICAvLyBXZSBhY3R1YWxseSBqdXN0IGF1dG8tZXNjYXBlIHRoZXNlLgoJICAgIGRlbGltcyA9IFsnPCcsICc+JywgJyInLCAnYCcsICcgJywgJ1xyJywgJ1xuJywgJ1x0J10sCgoJICAgIC8vIFJGQyAyMzk2OiBjaGFyYWN0ZXJzIG5vdCBhbGxvd2VkIGZvciB2YXJpb3VzIHJlYXNvbnMuCgkgICAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXCcsICdeJywgJ2AnXS5jb25jYXQoZGVsaW1zKSwKCgkgICAgLy8gQWxsb3dlZCBieSBSRkNzLCBidXQgY2F1c2Ugb2YgWFNTIGF0dGFja3MuICBBbHdheXMgZXNjYXBlIHRoZXNlLgoJICAgIGF1dG9Fc2NhcGUgPSBbJ1wnJ10uY29uY2F0KHVud2lzZSksCgkgICAgLy8gQ2hhcmFjdGVycyB0aGF0IGFyZSBuZXZlciBldmVyIGFsbG93ZWQgaW4gYSBob3N0bmFtZS4KCSAgICAvLyBOb3RlIHRoYXQgYW55IGludmFsaWQgY2hhcnMgYXJlIGFsc28gaGFuZGxlZCwgYnV0IHRoZXNlCgkgICAgLy8gYXJlIHRoZSBvbmVzIHRoYXQgYXJlICpleHBlY3RlZCogdG8gYmUgc2Vlbiwgc28gd2UgZmFzdC1wYXRoCgkgICAgLy8gdGhlbS4KCSAgICBub25Ib3N0Q2hhcnMgPSBbJyUnLCAnLycsICc/JywgJzsnLCAnIyddLmNvbmNhdChhdXRvRXNjYXBlKSwKCSAgICBob3N0RW5kaW5nQ2hhcnMgPSBbJy8nLCAnPycsICcjJ10sCgkgICAgaG9zdG5hbWVNYXhMZW4gPSAyNTUsCgkgICAgaG9zdG5hbWVQYXJ0UGF0dGVybiA9IC9eWythLXowLTlBLVpfLV17MCw2M30kLywKCSAgICBob3N0bmFtZVBhcnRTdGFydCA9IC9eKFsrYS16MC05QS1aXy1dezAsNjN9KSguKikkLywKCSAgICAvLyBwcm90b2NvbHMgdGhhdCBjYW4gYWxsb3cgInVuc2FmZSIgYW5kICJ1bndpc2UiIGNoYXJzLgoJICAgIHVuc2FmZVByb3RvY29sID0gewoJICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLAoJICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZQoJICAgIH0sCgkgICAgLy8gcHJvdG9jb2xzIHRoYXQgbmV2ZXIgaGF2ZSBhIGhvc3RuYW1lLgoJICAgIGhvc3RsZXNzUHJvdG9jb2wgPSB7CgkgICAgICAnamF2YXNjcmlwdCc6IHRydWUsCgkgICAgICAnamF2YXNjcmlwdDonOiB0cnVlCgkgICAgfSwKCSAgICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC4KCSAgICBzbGFzaGVkUHJvdG9jb2wgPSB7CgkgICAgICAnaHR0cCc6IHRydWUsCgkgICAgICAnaHR0cHMnOiB0cnVlLAoJICAgICAgJ2Z0cCc6IHRydWUsCgkgICAgICAnZ29waGVyJzogdHJ1ZSwKCSAgICAgICdmaWxlJzogdHJ1ZSwKCSAgICAgICdodHRwOic6IHRydWUsCgkgICAgICAnaHR0cHM6JzogdHJ1ZSwKCSAgICAgICdmdHA6JzogdHJ1ZSwKCSAgICAgICdnb3BoZXI6JzogdHJ1ZSwKCSAgICAgICdmaWxlOic6IHRydWUKCSAgICB9LAoJICAgIHF1ZXJ5c3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSk7CgoJZnVuY3Rpb24gdXJsUGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkgewoJICBpZiAodXJsICYmIHV0aWwuaXNPYmplY3QodXJsKSAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHJldHVybiB1cmw7CgoJICB2YXIgdSA9IG5ldyBVcmw7CgkgIHUucGFyc2UodXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCk7CgkgIHJldHVybiB1OwoJfQoKCVVybC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbih1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7CgkgIGlmICghdXRpbC5pc1N0cmluZyh1cmwpKSB7CgkgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiUGFyYW1ldGVyICd1cmwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCAiICsgdHlwZW9mIHVybCk7CgkgIH0KCgkgIC8vIENvcHkgY2hyb21lLCBJRSwgb3BlcmEgYmFja3NsYXNoLWhhbmRsaW5nIGJlaGF2aW9yLgoJICAvLyBCYWNrIHNsYXNoZXMgYmVmb3JlIHRoZSBxdWVyeSBzdHJpbmcgZ2V0IGNvbnZlcnRlZCB0byBmb3J3YXJkIHNsYXNoZXMKCSAgLy8gU2VlOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjU5MTYKCSAgdmFyIHF1ZXJ5SW5kZXggPSB1cmwuaW5kZXhPZignPycpLAoJICAgICAgc3BsaXR0ZXIgPQoJICAgICAgICAgIChxdWVyeUluZGV4ICE9PSAtMSAmJiBxdWVyeUluZGV4IDwgdXJsLmluZGV4T2YoJyMnKSkgPyAnPycgOiAnIycsCgkgICAgICB1U3BsaXQgPSB1cmwuc3BsaXQoc3BsaXR0ZXIpLAoJICAgICAgc2xhc2hSZWdleCA9IC9cXC9nOwoJICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpOwoJICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7CgoJICB2YXIgcmVzdCA9IHVybDsKCgkgIC8vIHRyaW0gYmVmb3JlIHByb2NlZWRpbmcuCgkgIC8vIFRoaXMgaXMgdG8gc3VwcG9ydCBwYXJzZSBzdHVmZiBsaWtlICIgIGh0dHA6Ly9mb28uY29tICBcbiIKCSAgcmVzdCA9IHJlc3QudHJpbSgpOwoKCSAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHsKCSAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cAoJICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTsKCSAgICBpZiAoc2ltcGxlUGF0aCkgewoJICAgICAgdGhpcy5wYXRoID0gcmVzdDsKCSAgICAgIHRoaXMuaHJlZiA9IHJlc3Q7CgkgICAgICB0aGlzLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTsKCSAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7CgkgICAgICAgIHRoaXMuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTsKCSAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHsKCSAgICAgICAgICB0aGlzLnF1ZXJ5ID0gcXVlcnlzdHJpbmcucGFyc2UodGhpcy5zZWFyY2guc3Vic3RyKDEpKTsKCSAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5zZWFyY2guc3Vic3RyKDEpOwoJICAgICAgICB9CgkgICAgICB9IGVsc2UgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHsKCSAgICAgICAgdGhpcy5zZWFyY2ggPSAnJzsKCSAgICAgICAgdGhpcy5xdWVyeSA9IHt9OwoJICAgICAgfQoJICAgICAgcmV0dXJuIHRoaXM7CgkgICAgfQoJICB9CgoJICB2YXIgcHJvdG8gPSBwcm90b2NvbFBhdHRlcm4uZXhlYyhyZXN0KTsKCSAgaWYgKHByb3RvKSB7CgkgICAgcHJvdG8gPSBwcm90b1swXTsKCSAgICB2YXIgbG93ZXJQcm90byA9IHByb3RvLnRvTG93ZXJDYXNlKCk7CgkgICAgdGhpcy5wcm90b2NvbCA9IGxvd2VyUHJvdG87CgkgICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aCk7CgkgIH0KCgkgIC8vIGZpZ3VyZSBvdXQgaWYgaXQncyBnb3QgYSBob3N0CgkgIC8vIHVzZXJAc2VydmVyIGlzICphbHdheXMqIGludGVycHJldGVkIGFzIGEgaG9zdG5hbWUsIGFuZCB1cmwKCSAgLy8gcmVzb2x1dGlvbiB3aWxsIHRyZWF0IC8vZm9vL2JhciBhcyBob3N0PWZvbyxwYXRoPWJhciBiZWNhdXNlIHRoYXQncwoJICAvLyBob3cgdGhlIGJyb3dzZXIgcmVzb2x2ZXMgcmVsYXRpdmUgVVJMcy4KCSAgaWYgKHNsYXNoZXNEZW5vdGVIb3N0IHx8IHByb3RvIHx8IHJlc3QubWF0Y2goL15cL1wvW15AXC9dK0BbXkBcL10rLykpIHsKCSAgICB2YXIgc2xhc2hlcyA9IHJlc3Quc3Vic3RyKDAsIDIpID09PSAnLy8nOwoJICAgIGlmIChzbGFzaGVzICYmICEocHJvdG8gJiYgaG9zdGxlc3NQcm90b2NvbFtwcm90b10pKSB7CgkgICAgICByZXN0ID0gcmVzdC5zdWJzdHIoMik7CgkgICAgICB0aGlzLnNsYXNoZXMgPSB0cnVlOwoJICAgIH0KCSAgfQoKCSAgaWYgKCFob3N0bGVzc1Byb3RvY29sW3Byb3RvXSAmJgoJICAgICAgKHNsYXNoZXMgfHwgKHByb3RvICYmICFzbGFzaGVkUHJvdG9jb2xbcHJvdG9dKSkpIHsKCgkgICAgLy8gdGhlcmUncyBhIGhvc3RuYW1lLgoJICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuCgkgICAgLy8KCSAgICAvLyBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkCgkgICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXIKCSAgICAvLyBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLgoJICAgIC8vIFVSTHMgYXJlIG9ibm94aW91cy4KCSAgICAvLwoJICAgIC8vIGV4OgoJICAgIC8vIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjCgkgICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AYwoKCSAgICAvLyB2MC4xMiBUT0RPKGlzYWFjcyk6IFRoaXMgaXMgbm90IHF1aXRlIGhvdyBDaHJvbWUgZG9lcyB0aGluZ3MuCgkgICAgLy8gUmV2aWV3IG91ciB0ZXN0IGNhc2UgYWdhaW5zdCBicm93c2VycyBtb3JlIGNvbXByZWhlbnNpdmVseS4KCgkgICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFycwoJICAgIHZhciBob3N0RW5kID0gLTE7CgkgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob3N0RW5kaW5nQ2hhcnMubGVuZ3RoOyBpKyspIHsKCSAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2YoaG9zdEVuZGluZ0NoYXJzW2ldKTsKCSAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSkKCSAgICAgICAgaG9zdEVuZCA9IGhlYzsKCSAgICB9CgoJICAgIC8vIGF0IHRoaXMgcG9pbnQsIGVpdGhlciB3ZSBoYXZlIGFuIGV4cGxpY2l0IHBvaW50IHdoZXJlIHRoZQoJICAgIC8vIGF1dGggcG9ydGlvbiBjYW5ub3QgZ28gcGFzdCwgb3IgdGhlIGxhc3QgQCBjaGFyIGlzIHRoZSBkZWNpZGVyLgoJICAgIHZhciBhdXRoLCBhdFNpZ247CgkgICAgaWYgKGhvc3RFbmQgPT09IC0xKSB7CgkgICAgICAvLyBhdFNpZ24gY2FuIGJlIGFueXdoZXJlLgoJICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcpOwoJICAgIH0gZWxzZSB7CgkgICAgICAvLyBhdFNpZ24gbXVzdCBiZSBpbiBhdXRoIHBvcnRpb24uCgkgICAgICAvLyBodHRwOi8vYUBiL2NAZCA9PiBob3N0OmIgYXV0aDphIHBhdGg6L2NAZAoJICAgICAgYXRTaWduID0gcmVzdC5sYXN0SW5kZXhPZignQCcsIGhvc3RFbmQpOwoJICAgIH0KCgkgICAgLy8gTm93IHdlIGhhdmUgYSBwb3J0aW9uIHdoaWNoIGlzIGRlZmluaXRlbHkgdGhlIGF1dGguCgkgICAgLy8gUHVsbCB0aGF0IG9mZi4KCSAgICBpZiAoYXRTaWduICE9PSAtMSkgewoJICAgICAgYXV0aCA9IHJlc3Quc2xpY2UoMCwgYXRTaWduKTsKCSAgICAgIHJlc3QgPSByZXN0LnNsaWNlKGF0U2lnbiArIDEpOwoJICAgICAgdGhpcy5hdXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGF1dGgpOwoJICAgIH0KCgkgICAgLy8gdGhlIGhvc3QgaXMgdGhlIHJlbWFpbmluZyB0byB0aGUgbGVmdCBvZiB0aGUgZmlyc3Qgbm9uLWhvc3QgY2hhcgoJICAgIGhvc3RFbmQgPSAtMTsKCSAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykgewoJICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihub25Ib3N0Q2hhcnNbaV0pOwoJICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKQoJICAgICAgICBob3N0RW5kID0gaGVjOwoJICAgIH0KCSAgICAvLyBpZiB3ZSBzdGlsbCBoYXZlIG5vdCBoaXQgaXQsIHRoZW4gdGhlIGVudGlyZSB0aGluZyBpcyBhIGhvc3QuCgkgICAgaWYgKGhvc3RFbmQgPT09IC0xKQoJICAgICAgaG9zdEVuZCA9IHJlc3QubGVuZ3RoOwoKCSAgICB0aGlzLmhvc3QgPSByZXN0LnNsaWNlKDAsIGhvc3RFbmQpOwoJICAgIHJlc3QgPSByZXN0LnNsaWNlKGhvc3RFbmQpOwoKCSAgICAvLyBwdWxsIG91dCBwb3J0LgoJICAgIHRoaXMucGFyc2VIb3N0KCk7CgoJICAgIC8vIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsCgkgICAgLy8gc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC4KCSAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSB8fCAnJzsKCgkgICAgLy8gaWYgaG9zdG5hbWUgYmVnaW5zIHdpdGggWyBhbmQgZW5kcyB3aXRoIF0KCSAgICAvLyBhc3N1bWUgdGhhdCBpdCdzIGFuIElQdjYgYWRkcmVzcy4KCSAgICB2YXIgaXB2Nkhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZVswXSA9PT0gJ1snICYmCgkgICAgICAgIHRoaXMuaG9zdG5hbWVbdGhpcy5ob3N0bmFtZS5sZW5ndGggLSAxXSA9PT0gJ10nOwoKCSAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS4KCSAgICBpZiAoIWlwdjZIb3N0bmFtZSkgewoJICAgICAgdmFyIGhvc3RwYXJ0cyA9IHRoaXMuaG9zdG5hbWUuc3BsaXQoL1wuLyk7CgkgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGhvc3RwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCSAgICAgICAgdmFyIHBhcnQgPSBob3N0cGFydHNbaV07CgkgICAgICAgIGlmICghcGFydCkgY29udGludWU7CgkgICAgICAgIGlmICghcGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkgewoJICAgICAgICAgIHZhciBuZXdwYXJ0ID0gJyc7CgkgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGsgPSBwYXJ0Lmxlbmd0aDsgaiA8IGs7IGorKykgewoJICAgICAgICAgICAgaWYgKHBhcnQuY2hhckNvZGVBdChqKSA+IDEyNykgewoJICAgICAgICAgICAgICAvLyB3ZSByZXBsYWNlIG5vbi1BU0NJSSBjaGFyIHdpdGggYSB0ZW1wb3JhcnkgcGxhY2Vob2xkZXIKCSAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdAoJICAgICAgICAgICAgICAvLyBicm9rZW4gYnkgcmVwbGFjaW5nIG5vbi1BU0NJSSBieSBub3RoaW5nCgkgICAgICAgICAgICAgIG5ld3BhcnQgKz0gJ3gnOwoJICAgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgICAgbmV3cGFydCArPSBwYXJ0W2pdOwoJICAgICAgICAgICAgfQoJICAgICAgICAgIH0KCSAgICAgICAgICAvLyB3ZSB0ZXN0IGFnYWluIHdpdGggQVNDSUkgY2hhciBvbmx5CgkgICAgICAgICAgaWYgKCFuZXdwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7CgkgICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTsKCSAgICAgICAgICAgIHZhciBub3RIb3N0ID0gaG9zdHBhcnRzLnNsaWNlKGkgKyAxKTsKCSAgICAgICAgICAgIHZhciBiaXQgPSBwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFN0YXJ0KTsKCSAgICAgICAgICAgIGlmIChiaXQpIHsKCSAgICAgICAgICAgICAgdmFsaWRQYXJ0cy5wdXNoKGJpdFsxXSk7CgkgICAgICAgICAgICAgIG5vdEhvc3QudW5zaGlmdChiaXRbMl0pOwoJICAgICAgICAgICAgfQoJICAgICAgICAgICAgaWYgKG5vdEhvc3QubGVuZ3RoKSB7CgkgICAgICAgICAgICAgIHJlc3QgPSAnLycgKyBub3RIb3N0LmpvaW4oJy4nKSArIHJlc3Q7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgICB0aGlzLmhvc3RuYW1lID0gdmFsaWRQYXJ0cy5qb2luKCcuJyk7CgkgICAgICAgICAgICBicmVhazsKCSAgICAgICAgICB9CgkgICAgICAgIH0KCSAgICAgIH0KCSAgICB9CgoJICAgIGlmICh0aGlzLmhvc3RuYW1lLmxlbmd0aCA+IGhvc3RuYW1lTWF4TGVuKSB7CgkgICAgICB0aGlzLmhvc3RuYW1lID0gJyc7CgkgICAgfSBlbHNlIHsKCSAgICAgIC8vIGhvc3RuYW1lcyBhcmUgYWx3YXlzIGxvd2VyIGNhc2UuCgkgICAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZS50b0xvd2VyQ2FzZSgpOwoJICAgIH0KCgkgICAgaWYgKCFpcHY2SG9zdG5hbWUpIHsKCSAgICAgIC8vIElETkEgU3VwcG9ydDogUmV0dXJucyBhIHB1bnljb2RlZCByZXByZXNlbnRhdGlvbiBvZiAiZG9tYWluIi4KCSAgICAgIC8vIEl0IG9ubHkgY29udmVydHMgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHRoYXQKCSAgICAgIC8vIGhhdmUgbm9uLUFTQ0lJIGNoYXJhY3RlcnMsIGkuZS4gaXQgZG9lc24ndCBtYXR0ZXIgaWYKCSAgICAgIC8vIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCBhbHJlYWR5IGlzIEFTQ0lJLW9ubHkuCgkgICAgICB0aGlzLmhvc3RuYW1lID0gcHVueWNvZGUudG9BU0NJSSh0aGlzLmhvc3RuYW1lKTsKCSAgICB9CgoJICAgIHZhciBwID0gdGhpcy5wb3J0ID8gJzonICsgdGhpcy5wb3J0IDogJyc7CgkgICAgdmFyIGggPSB0aGlzLmhvc3RuYW1lIHx8ICcnOwoJICAgIHRoaXMuaG9zdCA9IGggKyBwOwoJICAgIHRoaXMuaHJlZiArPSB0aGlzLmhvc3Q7CgoJICAgIC8vIHN0cmlwIFsgYW5kIF0gZnJvbSB0aGUgaG9zdG5hbWUKCSAgICAvLyB0aGUgaG9zdCBmaWVsZCBzdGlsbCByZXRhaW5zIHRoZW0sIHRob3VnaAoJICAgIGlmIChpcHY2SG9zdG5hbWUpIHsKCSAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnN1YnN0cigxLCB0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDIpOwoJICAgICAgaWYgKHJlc3RbMF0gIT09ICcvJykgewoJICAgICAgICByZXN0ID0gJy8nICsgcmVzdDsKCSAgICAgIH0KCSAgICB9CgkgIH0KCgkgIC8vIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLgoJICAvLyBjaG9wIG9mZiBhbnkgZGVsaW0gY2hhcnMuCgkgIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHsKCgkgICAgLy8gRmlyc3QsIG1ha2UgMTAwJSBzdXJlIHRoYXQgYW55ICJhdXRvRXNjYXBlIiBjaGFycyBnZXQKCSAgICAvLyBlc2NhcGVkLCBldmVuIGlmIGVuY29kZVVSSUNvbXBvbmVudCBkb2Vzbid0IHRoaW5rIHRoZXkKCSAgICAvLyBuZWVkIHRvIGJlLgoJICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXV0b0VzY2FwZS5sZW5ndGg7IGkgPCBsOyBpKyspIHsKCSAgICAgIHZhciBhZSA9IGF1dG9Fc2NhcGVbaV07CgkgICAgICBpZiAocmVzdC5pbmRleE9mKGFlKSA9PT0gLTEpCgkgICAgICAgIGNvbnRpbnVlOwoJICAgICAgdmFyIGVzYyA9IGVuY29kZVVSSUNvbXBvbmVudChhZSk7CgkgICAgICBpZiAoZXNjID09PSBhZSkgewoJICAgICAgICBlc2MgPSBlc2NhcGUoYWUpOwoJICAgICAgfQoJICAgICAgcmVzdCA9IHJlc3Quc3BsaXQoYWUpLmpvaW4oZXNjKTsKCSAgICB9CgkgIH0KCgoJICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LgoJICB2YXIgaGFzaCA9IHJlc3QuaW5kZXhPZignIycpOwoJICBpZiAoaGFzaCAhPT0gLTEpIHsKCSAgICAvLyBnb3QgYSBmcmFnbWVudCBzdHJpbmcuCgkgICAgdGhpcy5oYXNoID0gcmVzdC5zdWJzdHIoaGFzaCk7CgkgICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgaGFzaCk7CgkgIH0KCSAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCc/Jyk7CgkgIGlmIChxbSAhPT0gLTEpIHsKCSAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTsKCSAgICB0aGlzLnF1ZXJ5ID0gcmVzdC5zdWJzdHIocW0gKyAxKTsKCSAgICBpZiAocGFyc2VRdWVyeVN0cmluZykgewoJICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMucXVlcnkpOwoJICAgIH0KCSAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBxbSk7CgkgIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykgewoJICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkCgkgICAgdGhpcy5zZWFyY2ggPSAnJzsKCSAgICB0aGlzLnF1ZXJ5ID0ge307CgkgIH0KCSAgaWYgKHJlc3QpIHRoaXMucGF0aG5hbWUgPSByZXN0OwoJICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmCgkgICAgICB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7CgkgICAgdGhpcy5wYXRobmFtZSA9ICcvJzsKCSAgfQoKCSAgLy90byBzdXBwb3J0IGh0dHAucmVxdWVzdAoJICBpZiAodGhpcy5wYXRobmFtZSB8fCB0aGlzLnNlYXJjaCkgewoJICAgIHZhciBwID0gdGhpcy5wYXRobmFtZSB8fCAnJzsKCSAgICB2YXIgcyA9IHRoaXMuc2VhcmNoIHx8ICcnOwoJICAgIHRoaXMucGF0aCA9IHAgKyBzOwoJICB9CgoJICAvLyBmaW5hbGx5LCByZWNvbnN0cnVjdCB0aGUgaHJlZiBiYXNlZCBvbiB3aGF0IGhhcyBiZWVuIHZhbGlkYXRlZC4KCSAgdGhpcy5ocmVmID0gdGhpcy5mb3JtYXQoKTsKCSAgcmV0dXJuIHRoaXM7Cgl9OwoKCS8vIGZvcm1hdCBhIHBhcnNlZCBvYmplY3QgaW50byBhIHVybCBzdHJpbmcKCWZ1bmN0aW9uIHVybEZvcm1hdChvYmopIHsKCSAgLy8gZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC4KCSAgLy8gSWYgaXQncyBhbiBvYmosIHRoaXMgaXMgYSBuby1vcC4KCSAgLy8gdGhpcyB3YXksIHlvdSBjYW4gY2FsbCB1cmxfZm9ybWF0KCkgb24gc3RyaW5ncwoJICAvLyB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLgoJICBpZiAodXRpbC5pc1N0cmluZyhvYmopKSBvYmogPSB1cmxQYXJzZShvYmopOwoJICBpZiAoIShvYmogaW5zdGFuY2VvZiBVcmwpKSByZXR1cm4gVXJsLnByb3RvdHlwZS5mb3JtYXQuY2FsbChvYmopOwoJICByZXR1cm4gb2JqLmZvcm1hdCgpOwoJfQoKCVVybC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24oKSB7CgkgIHZhciBhdXRoID0gdGhpcy5hdXRoIHx8ICcnOwoJICBpZiAoYXV0aCkgewoJICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7CgkgICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICc6Jyk7CgkgICAgYXV0aCArPSAnQCc7CgkgIH0KCgkgIHZhciBwcm90b2NvbCA9IHRoaXMucHJvdG9jb2wgfHwgJycsCgkgICAgICBwYXRobmFtZSA9IHRoaXMucGF0aG5hbWUgfHwgJycsCgkgICAgICBoYXNoID0gdGhpcy5oYXNoIHx8ICcnLAoJICAgICAgaG9zdCA9IGZhbHNlLAoJICAgICAgcXVlcnkgPSAnJzsKCgkgIGlmICh0aGlzLmhvc3QpIHsKCSAgICBob3N0ID0gYXV0aCArIHRoaXMuaG9zdDsKCSAgfSBlbHNlIGlmICh0aGlzLmhvc3RuYW1lKSB7CgkgICAgaG9zdCA9IGF1dGggKyAodGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgPT09IC0xID8KCSAgICAgICAgdGhpcy5ob3N0bmFtZSA6CgkgICAgICAgICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScpOwoJICAgIGlmICh0aGlzLnBvcnQpIHsKCSAgICAgIGhvc3QgKz0gJzonICsgdGhpcy5wb3J0OwoJICAgIH0KCSAgfQoKCSAgaWYgKHRoaXMucXVlcnkgJiYKCSAgICAgIHV0aWwuaXNPYmplY3QodGhpcy5xdWVyeSkgJiYKCSAgICAgIE9iamVjdC5rZXlzKHRoaXMucXVlcnkpLmxlbmd0aCkgewoJICAgIHF1ZXJ5ID0gcXVlcnlzdHJpbmcuc3RyaW5naWZ5KHRoaXMucXVlcnkpOwoJICB9CgoJICB2YXIgc2VhcmNoID0gdGhpcy5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnOwoKCSAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonOwoKCSAgLy8gb25seSB0aGUgc2xhc2hlZFByb3RvY29scyBnZXQgdGhlIC8vLiAgTm90IG1haWx0bzosIHhtcHA6LCBldGMuCgkgIC8vIHVubGVzcyB0aGV5IGhhZCB0aGVtIHRvIGJlZ2luIHdpdGguCgkgIGlmICh0aGlzLnNsYXNoZXMgfHwKCSAgICAgICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHsKCSAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTsKCSAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7CgkgIH0gZWxzZSBpZiAoIWhvc3QpIHsKCSAgICBob3N0ID0gJyc7CgkgIH0KCgkgIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIGhhc2ggPSAnIycgKyBoYXNoOwoJICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICc/Jykgc2VhcmNoID0gJz8nICsgc2VhcmNoOwoKCSAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uKG1hdGNoKSB7CgkgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7CgkgIH0pOwoJICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTsKCgkgIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7Cgl9OwoKCWZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkgewoJICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7Cgl9CgoJVXJsLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24ocmVsYXRpdmUpIHsKCSAgcmV0dXJuIHRoaXMucmVzb2x2ZU9iamVjdCh1cmxQYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpKS5mb3JtYXQoKTsKCX07CgoJZnVuY3Rpb24gdXJsUmVzb2x2ZU9iamVjdChzb3VyY2UsIHJlbGF0aXZlKSB7CgkgIGlmICghc291cmNlKSByZXR1cm4gcmVsYXRpdmU7CgkgIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlT2JqZWN0KHJlbGF0aXZlKTsKCX0KCglVcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkgewoJICBpZiAodXRpbC5pc1N0cmluZyhyZWxhdGl2ZSkpIHsKCSAgICB2YXIgcmVsID0gbmV3IFVybCgpOwoJICAgIHJlbC5wYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpOwoJICAgIHJlbGF0aXZlID0gcmVsOwoJICB9CgoJICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpOwoJICB2YXIgdGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTsKCSAgZm9yICh2YXIgdGsgPSAwOyB0ayA8IHRrZXlzLmxlbmd0aDsgdGsrKykgewoJICAgIHZhciB0a2V5ID0gdGtleXNbdGtdOwoJICAgIHJlc3VsdFt0a2V5XSA9IHRoaXNbdGtleV07CgkgIH0KCgkgIC8vIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LgoJICAvLyBldmVuIGhyZWY9IiIgd2lsbCByZW1vdmUgaXQuCgkgIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDsKCgkgIC8vIGlmIHRoZSByZWxhdGl2ZSB1cmwgaXMgZW1wdHksIHRoZW4gdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG8gaGVyZS4KCSAgaWYgKHJlbGF0aXZlLmhyZWYgPT09ICcnKSB7CgkgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7CgkgICAgcmV0dXJuIHJlc3VsdDsKCSAgfQoKCSAgLy8gaHJlZnMgbGlrZSAvL2Zvby9iYXIgYWx3YXlzIGN1dCB0byB0aGUgcHJvdG9jb2wuCgkgIGlmIChyZWxhdGl2ZS5zbGFzaGVzICYmICFyZWxhdGl2ZS5wcm90b2NvbCkgewoJICAgIC8vIHRha2UgZXZlcnl0aGluZyBleGNlcHQgdGhlIHByb3RvY29sIGZyb20gcmVsYXRpdmUKCSAgICB2YXIgcmtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7CgkgICAgZm9yICh2YXIgcmsgPSAwOyByayA8IHJrZXlzLmxlbmd0aDsgcmsrKykgewoJICAgICAgdmFyIHJrZXkgPSBya2V5c1tya107CgkgICAgICBpZiAocmtleSAhPT0gJ3Byb3RvY29sJykKCSAgICAgICAgcmVzdWx0W3JrZXldID0gcmVsYXRpdmVbcmtleV07CgkgICAgfQoKCSAgICAvL3VybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbQoJICAgIGlmIChzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXSAmJgoJICAgICAgICByZXN1bHQuaG9zdG5hbWUgJiYgIXJlc3VsdC5wYXRobmFtZSkgewoJICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWUgPSAnLyc7CgkgICAgfQoKCSAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTsKCSAgICByZXR1cm4gcmVzdWx0OwoJICB9CgoJICBpZiAocmVsYXRpdmUucHJvdG9jb2wgJiYgcmVsYXRpdmUucHJvdG9jb2wgIT09IHJlc3VsdC5wcm90b2NvbCkgewoJICAgIC8vIGlmIGl0J3MgYSBrbm93biB1cmwgcHJvdG9jb2wsIHRoZW4gY2hhbmdpbmcKCSAgICAvLyB0aGUgcHJvdG9jb2wgZG9lcyB3ZWlyZCB0aGluZ3MKCSAgICAvLyBmaXJzdCwgaWYgaXQncyBub3QgZmlsZTosIHRoZW4gd2UgTVVTVCBoYXZlIGEgaG9zdCwKCSAgICAvLyBhbmQgaWYgdGhlcmUgd2FzIGEgcGF0aAoJICAgIC8vIHRvIGJlZ2luIHdpdGgsIHRoZW4gd2UgTVVTVCBoYXZlIGEgcGF0aC4KCSAgICAvLyBpZiBpdCBpcyBmaWxlOiwgdGhlbiB0aGUgaG9zdCBpcyBkcm9wcGVkLAoJICAgIC8vIGJlY2F1c2UgdGhhdCdzIGtub3duIHRvIGJlIGhvc3RsZXNzLgoJICAgIC8vIGFueXRoaW5nIGVsc2UgaXMgYXNzdW1lZCB0byBiZSBhYnNvbHV0ZS4KCSAgICBpZiAoIXNsYXNoZWRQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHsKCSAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpOwoJICAgICAgZm9yICh2YXIgdiA9IDA7IHYgPCBrZXlzLmxlbmd0aDsgdisrKSB7CgkgICAgICAgIHZhciBrID0ga2V5c1t2XTsKCSAgICAgICAgcmVzdWx0W2tdID0gcmVsYXRpdmVba107CgkgICAgICB9CgkgICAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTsKCSAgICAgIHJldHVybiByZXN1bHQ7CgkgICAgfQoKCSAgICByZXN1bHQucHJvdG9jb2wgPSByZWxhdGl2ZS5wcm90b2NvbDsKCSAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7CgkgICAgICB2YXIgcmVsUGF0aCA9IChyZWxhdGl2ZS5wYXRobmFtZSB8fCAnJykuc3BsaXQoJy8nKTsKCSAgICAgIHdoaWxlIChyZWxQYXRoLmxlbmd0aCAmJiAhKHJlbGF0aXZlLmhvc3QgPSByZWxQYXRoLnNoaWZ0KCkpKTsKCSAgICAgIGlmICghcmVsYXRpdmUuaG9zdCkgcmVsYXRpdmUuaG9zdCA9ICcnOwoJICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0bmFtZSkgcmVsYXRpdmUuaG9zdG5hbWUgPSAnJzsKCSAgICAgIGlmIChyZWxQYXRoWzBdICE9PSAnJykgcmVsUGF0aC51bnNoaWZ0KCcnKTsKCSAgICAgIGlmIChyZWxQYXRoLmxlbmd0aCA8IDIpIHJlbFBhdGgudW5zaGlmdCgnJyk7CgkgICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxQYXRoLmpvaW4oJy8nKTsKCSAgICB9IGVsc2UgewoJICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsYXRpdmUucGF0aG5hbWU7CgkgICAgfQoJICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7CgkgICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7CgkgICAgcmVzdWx0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0IHx8ICcnOwoJICAgIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aDsKCSAgICByZXN1bHQuaG9zdG5hbWUgPSByZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0OwoJICAgIHJlc3VsdC5wb3J0ID0gcmVsYXRpdmUucG9ydDsKCSAgICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdAoJICAgIGlmIChyZXN1bHQucGF0aG5hbWUgfHwgcmVzdWx0LnNlYXJjaCkgewoJICAgICAgdmFyIHAgPSByZXN1bHQucGF0aG5hbWUgfHwgJyc7CgkgICAgICB2YXIgcyA9IHJlc3VsdC5zZWFyY2ggfHwgJyc7CgkgICAgICByZXN1bHQucGF0aCA9IHAgKyBzOwoJICAgIH0KCSAgICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7CgkgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7CgkgICAgcmV0dXJuIHJlc3VsdDsKCSAgfQoKCSAgdmFyIGlzU291cmNlQWJzID0gKHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpLAoJICAgICAgaXNSZWxBYnMgPSAoCgkgICAgICAgICAgcmVsYXRpdmUuaG9zdCB8fAoJICAgICAgICAgIHJlbGF0aXZlLnBhdGhuYW1lICYmIHJlbGF0aXZlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nCgkgICAgICApLAoJICAgICAgbXVzdEVuZEFicyA9IChpc1JlbEFicyB8fCBpc1NvdXJjZUFicyB8fAoJICAgICAgICAgICAgICAgICAgICAocmVzdWx0Lmhvc3QgJiYgcmVsYXRpdmUucGF0aG5hbWUpKSwKCSAgICAgIHJlbW92ZUFsbERvdHMgPSBtdXN0RW5kQWJzLAoJICAgICAgc3JjUGF0aCA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSwKCSAgICAgIHJlbFBhdGggPSByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5zcGxpdCgnLycpIHx8IFtdLAoJICAgICAgcHN5Y2hvdGljID0gcmVzdWx0LnByb3RvY29sICYmICFzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXTsKCgkgIC8vIGlmIHRoZSB1cmwgaXMgYSBub24tc2xhc2hlZCB1cmwsIHRoZW4gcmVsYXRpdmUKCSAgLy8gbGlua3MgbGlrZSAuLi8uLiBzaG91bGQgYmUgYWJsZQoJICAvLyB0byBjcmF3bCB1cCB0byB0aGUgaG9zdG5hbWUsIGFzIHdlbGwuICBUaGlzIGlzIHN0cmFuZ2UuCgkgIC8vIHJlc3VsdC5wcm90b2NvbCBoYXMgYWxyZWFkeSBiZWVuIHNldCBieSBub3cuCgkgIC8vIExhdGVyIG9uLCBwdXQgdGhlIGZpcnN0IHBhdGggcGFydCBpbnRvIHRoZSBob3N0IGZpZWxkLgoJICBpZiAocHN5Y2hvdGljKSB7CgkgICAgcmVzdWx0Lmhvc3RuYW1lID0gJyc7CgkgICAgcmVzdWx0LnBvcnQgPSBudWxsOwoJICAgIGlmIChyZXN1bHQuaG9zdCkgewoJICAgICAgaWYgKHNyY1BhdGhbMF0gPT09ICcnKSBzcmNQYXRoWzBdID0gcmVzdWx0Lmhvc3Q7CgkgICAgICBlbHNlIHNyY1BhdGgudW5zaGlmdChyZXN1bHQuaG9zdCk7CgkgICAgfQoJICAgIHJlc3VsdC5ob3N0ID0gJyc7CgkgICAgaWYgKHJlbGF0aXZlLnByb3RvY29sKSB7CgkgICAgICByZWxhdGl2ZS5ob3N0bmFtZSA9IG51bGw7CgkgICAgICByZWxhdGl2ZS5wb3J0ID0gbnVsbDsKCSAgICAgIGlmIChyZWxhdGl2ZS5ob3N0KSB7CgkgICAgICAgIGlmIChyZWxQYXRoWzBdID09PSAnJykgcmVsUGF0aFswXSA9IHJlbGF0aXZlLmhvc3Q7CgkgICAgICAgIGVsc2UgcmVsUGF0aC51bnNoaWZ0KHJlbGF0aXZlLmhvc3QpOwoJICAgICAgfQoJICAgICAgcmVsYXRpdmUuaG9zdCA9IG51bGw7CgkgICAgfQoJICAgIG11c3RFbmRBYnMgPSBtdXN0RW5kQWJzICYmIChyZWxQYXRoWzBdID09PSAnJyB8fCBzcmNQYXRoWzBdID09PSAnJyk7CgkgIH0KCgkgIGlmIChpc1JlbEFicykgewoJICAgIC8vIGl0J3MgYWJzb2x1dGUuCgkgICAgcmVzdWx0Lmhvc3QgPSAocmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5ob3N0ID09PSAnJykgPwoJICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdCA6IHJlc3VsdC5ob3N0OwoJICAgIHJlc3VsdC5ob3N0bmFtZSA9IChyZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0bmFtZSA9PT0gJycpID8KCSAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0bmFtZSA6IHJlc3VsdC5ob3N0bmFtZTsKCSAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoOwoJICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5OwoJICAgIHNyY1BhdGggPSByZWxQYXRoOwoJICAgIC8vIGZhbGwgdGhyb3VnaCB0byB0aGUgZG90LWhhbmRsaW5nIGJlbG93LgoJICB9IGVsc2UgaWYgKHJlbFBhdGgubGVuZ3RoKSB7CgkgICAgLy8gaXQncyByZWxhdGl2ZQoJICAgIC8vIHRocm93IGF3YXkgdGhlIGV4aXN0aW5nIGZpbGUsIGFuZCB0YWtlIHRoZSBuZXcgcGF0aCBpbnN0ZWFkLgoJICAgIGlmICghc3JjUGF0aCkgc3JjUGF0aCA9IFtdOwoJICAgIHNyY1BhdGgucG9wKCk7CgkgICAgc3JjUGF0aCA9IHNyY1BhdGguY29uY2F0KHJlbFBhdGgpOwoJICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7CgkgICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7CgkgIH0gZWxzZSBpZiAoIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQocmVsYXRpdmUuc2VhcmNoKSkgewoJICAgIC8vIGp1c3QgcHVsbCBvdXQgdGhlIHNlYXJjaC4KCSAgICAvLyBsaWtlIGhyZWY9Jz9mb28nLgoJICAgIC8vIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFucwoJICAgIGlmIChwc3ljaG90aWMpIHsKCSAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpOwoJICAgICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdAoJICAgICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlCgkgICAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKQoJICAgICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID8KCSAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlOwoJICAgICAgaWYgKGF1dGhJbkhvc3QpIHsKCSAgICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7CgkgICAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpOwoJICAgICAgfQoJICAgIH0KCSAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoOwoJICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5OwoJICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3QKCSAgICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7CgkgICAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgKwoJICAgICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7CgkgICAgfQoJICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpOwoJICAgIHJldHVybiByZXN1bHQ7CgkgIH0KCgkgIGlmICghc3JjUGF0aC5sZW5ndGgpIHsKCSAgICAvLyBubyBwYXRoIGF0IGFsbC4gIGVhc3kuCgkgICAgLy8gd2UndmUgYWxyZWFkeSBoYW5kbGVkIHRoZSBvdGhlciBzdHVmZiBhYm92ZS4KCSAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsOwoJICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3QKCSAgICBpZiAocmVzdWx0LnNlYXJjaCkgewoJICAgICAgcmVzdWx0LnBhdGggPSAnLycgKyByZXN1bHQuc2VhcmNoOwoJICAgIH0gZWxzZSB7CgkgICAgICByZXN1bHQucGF0aCA9IG51bGw7CgkgICAgfQoJICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpOwoJICAgIHJldHVybiByZXN1bHQ7CgkgIH0KCgkgIC8vIGlmIGEgdXJsIEVORHMgaW4gLiBvciAuLiwgdGhlbiBpdCBtdXN0IGdldCBhIHRyYWlsaW5nIHNsYXNoLgoJICAvLyBob3dldmVyLCBpZiBpdCBlbmRzIGluIGFueXRoaW5nIGVsc2Ugbm9uLXNsYXNoeSwKCSAgLy8gdGhlbiBpdCBtdXN0IE5PVCBnZXQgYSB0cmFpbGluZyBzbGFzaC4KCSAgdmFyIGxhc3QgPSBzcmNQYXRoLnNsaWNlKC0xKVswXTsKCSAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSAoCgkgICAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmCgkgICAgICAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHx8IGxhc3QgPT09ICcnKTsKCgkgIC8vIHN0cmlwIHNpbmdsZSBkb3RzLCByZXNvbHZlIGRvdWJsZSBkb3RzIHRvIHBhcmVudCBkaXIKCSAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDAKCSAgdmFyIHVwID0gMDsKCSAgZm9yICh2YXIgaSA9IHNyY1BhdGgubGVuZ3RoOyBpID49IDA7IGktLSkgewoJICAgIGxhc3QgPSBzcmNQYXRoW2ldOwoJICAgIGlmIChsYXN0ID09PSAnLicpIHsKCSAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpOwoJICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykgewoJICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7CgkgICAgICB1cCsrOwoJICAgIH0gZWxzZSBpZiAodXApIHsKCSAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpOwoJICAgICAgdXAtLTsKCSAgICB9CgkgIH0KCgkgIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnMKCSAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7CgkgICAgZm9yICg7IHVwLS07IHVwKSB7CgkgICAgICBzcmNQYXRoLnVuc2hpZnQoJy4uJyk7CgkgICAgfQoJICB9CgoJICBpZiAobXVzdEVuZEFicyAmJiBzcmNQYXRoWzBdICE9PSAnJyAmJgoJICAgICAgKCFzcmNQYXRoWzBdIHx8IHNyY1BhdGhbMF0uY2hhckF0KDApICE9PSAnLycpKSB7CgkgICAgc3JjUGF0aC51bnNoaWZ0KCcnKTsKCSAgfQoKCSAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgKHNyY1BhdGguam9pbignLycpLnN1YnN0cigtMSkgIT09ICcvJykpIHsKCSAgICBzcmNQYXRoLnB1c2goJycpOwoJICB9CgoJICB2YXIgaXNBYnNvbHV0ZSA9IHNyY1BhdGhbMF0gPT09ICcnIHx8CgkgICAgICAoc3JjUGF0aFswXSAmJiBzcmNQYXRoWzBdLmNoYXJBdCgwKSA9PT0gJy8nKTsKCgkgIC8vIHB1dCB0aGUgaG9zdCBiYWNrCgkgIGlmIChwc3ljaG90aWMpIHsKCSAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6CgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnOwoJICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3QKCSAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2UKCSAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKQoJICAgIHZhciBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/CgkgICAgICAgICAgICAgICAgICAgICByZXN1bHQuaG9zdC5zcGxpdCgnQCcpIDogZmFsc2U7CgkgICAgaWYgKGF1dGhJbkhvc3QpIHsKCSAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpOwoJICAgICAgcmVzdWx0Lmhvc3QgPSByZXN1bHQuaG9zdG5hbWUgPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7CgkgICAgfQoJICB9CgoJICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyB8fCAocmVzdWx0Lmhvc3QgJiYgc3JjUGF0aC5sZW5ndGgpOwoKCSAgaWYgKG11c3RFbmRBYnMgJiYgIWlzQWJzb2x1dGUpIHsKCSAgICBzcmNQYXRoLnVuc2hpZnQoJycpOwoJICB9CgoJICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7CgkgICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDsKCSAgICByZXN1bHQucGF0aCA9IG51bGw7CgkgIH0gZWxzZSB7CgkgICAgcmVzdWx0LnBhdGhuYW1lID0gc3JjUGF0aC5qb2luKCcvJyk7CgkgIH0KCgkgIC8vdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHAKCSAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkgewoJICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArCgkgICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7CgkgIH0KCSAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoOwoJICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7CgkgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpOwoJICByZXR1cm4gcmVzdWx0OwoJfTsKCglVcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKCkgewoJICB2YXIgaG9zdCA9IHRoaXMuaG9zdDsKCSAgdmFyIHBvcnQgPSBwb3J0UGF0dGVybi5leGVjKGhvc3QpOwoJICBpZiAocG9ydCkgewoJICAgIHBvcnQgPSBwb3J0WzBdOwoJICAgIGlmIChwb3J0ICE9PSAnOicpIHsKCSAgICAgIHRoaXMucG9ydCA9IHBvcnQuc3Vic3RyKDEpOwoJICAgIH0KCSAgICBob3N0ID0gaG9zdC5zdWJzdHIoMCwgaG9zdC5sZW5ndGggLSBwb3J0Lmxlbmd0aCk7CgkgIH0KCSAgaWYgKGhvc3QpIHRoaXMuaG9zdG5hbWUgPSBob3N0OwoJfTsKCgovKioqLyB9LAovKiA0MiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSwgZ2xvYmFsKSB7LyohIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZSB2MS4zLjIgYnkgQG1hdGhpYXMgKi8KCTsoZnVuY3Rpb24ocm9vdCkgewoKCQkvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGVzICovCgkJdmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJgoJCQkhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzOwoJCXZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYKCQkJIW1vZHVsZS5ub2RlVHlwZSAmJiBtb2R1bGU7CgkJdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDsKCQlpZiAoCgkJCWZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8CgkJCWZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsIHx8CgkJCWZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbAoJCSkgewoJCQlyb290ID0gZnJlZUdsb2JhbDsKCQl9CgoJCS8qKgoJCSAqIFRoZSBgcHVueWNvZGVgIG9iamVjdC4KCQkgKiBAbmFtZSBwdW55Y29kZQoJCSAqIEB0eXBlIE9iamVjdAoJCSAqLwoJCXZhciBwdW55Y29kZSwKCgkJLyoqIEhpZ2hlc3QgcG9zaXRpdmUgc2lnbmVkIDMyLWJpdCBmbG9hdCB2YWx1ZSAqLwoJCW1heEludCA9IDIxNDc0ODM2NDcsIC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTEKCgkJLyoqIEJvb3RzdHJpbmcgcGFyYW1ldGVycyAqLwoJCWJhc2UgPSAzNiwKCQl0TWluID0gMSwKCQl0TWF4ID0gMjYsCgkJc2tldyA9IDM4LAoJCWRhbXAgPSA3MDAsCgkJaW5pdGlhbEJpYXMgPSA3MiwKCQlpbml0aWFsTiA9IDEyOCwgLy8gMHg4MAoJCWRlbGltaXRlciA9ICctJywgLy8gJ1x4MkQnCgoJCS8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovCgkJcmVnZXhQdW55Y29kZSA9IC9eeG4tLS8sCgkJcmVnZXhOb25BU0NJSSA9IC9bXlx4MjAtXHg3RV0vLCAvLyB1bnByaW50YWJsZSBBU0NJSSBjaGFycyArIG5vbi1BU0NJSSBjaGFycwoJCXJlZ2V4U2VwYXJhdG9ycyA9IC9bXHgyRVx1MzAwMlx1RkYwRVx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9ycwoKCQkvKiogRXJyb3IgbWVzc2FnZXMgKi8KCQllcnJvcnMgPSB7CgkJCSdvdmVyZmxvdyc6ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2VzcycsCgkJCSdub3QtYmFzaWMnOiAnSWxsZWdhbCBpbnB1dCA+PSAweDgwIChub3QgYSBiYXNpYyBjb2RlIHBvaW50KScsCgkJCSdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnCgkJfSwKCgkJLyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqLwoJCWJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbiwKCQlmbG9vciA9IE1hdGguZmxvb3IsCgkJc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSwKCgkJLyoqIFRlbXBvcmFyeSB2YXJpYWJsZSAqLwoJCWtleTsKCgkJLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovCgoJCS8qKgoJCSAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLgoJCSAqIEBwcml2YXRlCgkJICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgVGhlIGVycm9yIHR5cGUuCgkJICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLgoJCSAqLwoJCWZ1bmN0aW9uIGVycm9yKHR5cGUpIHsKCQkJdGhyb3cgUmFuZ2VFcnJvcihlcnJvcnNbdHlwZV0pOwoJCX0KCgkJLyoqCgkJICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uCgkJICogQHByaXZhdGUKCQkgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLgoJCSAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheQoJCSAqIGl0ZW0uCgkJICogQHJldHVybnMge0FycmF5fSBBIG5ldyBhcnJheSBvZiB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLgoJCSAqLwoJCWZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHsKCQkJdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKCQkJdmFyIHJlc3VsdCA9IFtdOwoJCQl3aGlsZSAobGVuZ3RoLS0pIHsKCQkJCXJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7CgkJCX0KCQkJcmV0dXJuIHJlc3VsdDsKCQl9CgoJCS8qKgoJCSAqIEEgc2ltcGxlIGBBcnJheSNtYXBgLWxpa2Ugd3JhcHBlciB0byB3b3JrIHdpdGggZG9tYWluIG5hbWUgc3RyaW5ncyBvciBlbWFpbAoJCSAqIGFkZHJlc3Nlcy4KCQkgKiBAcHJpdmF0ZQoJCSAqIEBwYXJhbSB7U3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MuCgkJICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5CgkJICogY2hhcmFjdGVyLgoJCSAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgc3RyaW5nIG9mIGNoYXJhY3RlcnMgcmV0dXJuZWQgYnkgdGhlIGNhbGxiYWNrCgkJICogZnVuY3Rpb24uCgkJICovCgkJZnVuY3Rpb24gbWFwRG9tYWluKHN0cmluZywgZm4pIHsKCQkJdmFyIHBhcnRzID0gc3RyaW5nLnNwbGl0KCdAJyk7CgkJCXZhciByZXN1bHQgPSAnJzsKCQkJaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHsKCQkJCS8vIEluIGVtYWlsIGFkZHJlc3Nlcywgb25seSB0aGUgZG9tYWluIG5hbWUgc2hvdWxkIGJlIHB1bnljb2RlZC4gTGVhdmUKCQkJCS8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuCgkJCQlyZXN1bHQgPSBwYXJ0c1swXSArICdAJzsKCQkJCXN0cmluZyA9IHBhcnRzWzFdOwoJCQl9CgkJCS8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy4KCQkJc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXHgyRScpOwoJCQl2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7CgkJCXZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTsKCQkJcmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7CgkJfQoKCQkvKioKCQkgKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlCgkJICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LAoJCSAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoCgkJICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsCgkJICogbWF0Y2hpbmcgVVRGLTE2LgoJCSAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYAoJCSAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPgoJCSAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyCgkJICogQG5hbWUgZGVjb2RlCgkJICogQHBhcmFtIHtTdHJpbmd9IHN0cmluZyBUaGUgVW5pY29kZSBpbnB1dCBzdHJpbmcgKFVDUy0yKS4KCQkgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuCgkJICovCgkJZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHsKCQkJdmFyIG91dHB1dCA9IFtdLAoJCQkgICAgY291bnRlciA9IDAsCgkJCSAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLAoJCQkgICAgdmFsdWUsCgkJCSAgICBleHRyYTsKCQkJd2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHsKCQkJCXZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTsKCQkJCWlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHsKCQkJCQkvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIKCQkJCQlleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7CgkJCQkJaWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGUKCQkJCQkJb3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTsKCQkJCQl9IGVsc2UgewoJCQkJCQkvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dAoJCQkJCQkvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIKCQkJCQkJb3V0cHV0LnB1c2godmFsdWUpOwoJCQkJCQljb3VudGVyLS07CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlvdXRwdXQucHVzaCh2YWx1ZSk7CgkJCQl9CgkJCX0KCQkJcmV0dXJuIG91dHB1dDsKCQl9CgoJCS8qKgoJCSAqIENyZWF0ZXMgYSBzdHJpbmcgYmFzZWQgb24gYW4gYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy4KCQkgKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWAKCQkgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMgoJCSAqIEBuYW1lIGVuY29kZQoJCSAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuCgkJICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLgoJCSAqLwoJCWZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHsKCQkJcmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHsKCQkJCXZhciBvdXRwdXQgPSAnJzsKCQkJCWlmICh2YWx1ZSA+IDB4RkZGRikgewoJCQkJCXZhbHVlIC09IDB4MTAwMDA7CgkJCQkJb3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7CgkJCQkJdmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGOwoJCQkJfQoJCQkJb3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7CgkJCQlyZXR1cm4gb3V0cHV0OwoJCQl9KS5qb2luKCcnKTsKCQl9CgoJCS8qKgoJCSAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci4KCQkgKiBAc2VlIGBkaWdpdFRvQmFzaWMoKWAKCQkgKiBAcHJpdmF0ZQoJCSAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS4KCQkgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQgKGZvciB1c2UgaW4KCQkgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmCgkJICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuCgkJICovCgkJZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkgewoJCQlpZiAoY29kZVBvaW50IC0gNDggPCAxMCkgewoJCQkJcmV0dXJuIGNvZGVQb2ludCAtIDIyOwoJCQl9CgkJCWlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7CgkJCQlyZXR1cm4gY29kZVBvaW50IC0gNjU7CgkJCX0KCQkJaWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHsKCQkJCXJldHVybiBjb2RlUG9pbnQgLSA5NzsKCQkJfQoJCQlyZXR1cm4gYmFzZTsKCQl9CgoJCS8qKgoJCSAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC4KCQkgKiBAc2VlIGBiYXNpY1RvRGlnaXQoKWAKCQkgKiBAcHJpdmF0ZQoJCSAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuCgkJICogQHJldHVybnMge051bWJlcn0gVGhlIGJhc2ljIGNvZGUgcG9pbnQgd2hvc2UgdmFsdWUgKHdoZW4gdXNlZCBmb3IKCQkgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZQoJCSAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpcwoJCSAqIHVzZWQ7IGVsc2UsIHRoZSBsb3dlcmNhc2UgZm9ybSBpcyB1c2VkLiBUaGUgYmVoYXZpb3IgaXMgdW5kZWZpbmVkCgkJICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS4KCQkgKi8KCQlmdW5jdGlvbiBkaWdpdFRvQmFzaWMoZGlnaXQsIGZsYWcpIHsKCQkJLy8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLloKCQkJLy8gMjYuLjM1IG1hcCB0byBBU0NJSSAwLi45CgkJCXJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNikgLSAoKGZsYWcgIT0gMCkgPDwgNSk7CgkJfQoKCQkvKioKCQkgKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLgoJCSAqIGh0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjQKCQkgKiBAcHJpdmF0ZQoJCSAqLwoJCWZ1bmN0aW9uIGFkYXB0KGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkgewoJCQl2YXIgayA9IDA7CgkJCWRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7CgkJCWRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTsKCQkJZm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHsKCQkJCWRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTsKCQkJfQoJCQlyZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTsKCQl9CgoJCS8qKgoJCSAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlCgkJICogc3ltYm9scy4KCQkgKiBAbWVtYmVyT2YgcHVueWNvZGUKCQkgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuCgkJICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLgoJCSAqLwoJCWZ1bmN0aW9uIGRlY29kZShpbnB1dCkgewoJCQkvLyBEb24ndCB1c2UgVUNTLTIKCQkJdmFyIG91dHB1dCA9IFtdLAoJCQkgICAgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGgsCgkJCSAgICBvdXQsCgkJCSAgICBpID0gMCwKCQkJICAgIG4gPSBpbml0aWFsTiwKCQkJICAgIGJpYXMgPSBpbml0aWFsQmlhcywKCQkJICAgIGJhc2ljLAoJCQkgICAgaiwKCQkJICAgIGluZGV4LAoJCQkgICAgb2xkaSwKCQkJICAgIHcsCgkJCSAgICBrLAoJCQkgICAgZGlnaXQsCgkJCSAgICB0LAoJCQkgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovCgkJCSAgICBiYXNlTWludXNUOwoKCQkJLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlCgkJCS8vIHBvaW50cyBiZWZvcmUgdGhlIGxhc3QgZGVsaW1pdGVyLCBvciBgMGAgaWYgdGhlcmUgaXMgbm9uZSwgdGhlbiBjb3B5CgkJCS8vIHRoZSBmaXJzdCBiYXNpYyBjb2RlIHBvaW50cyB0byB0aGUgb3V0cHV0LgoKCQkJYmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpOwoJCQlpZiAoYmFzaWMgPCAwKSB7CgkJCQliYXNpYyA9IDA7CgkJCX0KCgkJCWZvciAoaiA9IDA7IGogPCBiYXNpYzsgKytqKSB7CgkJCQkvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQKCQkJCWlmIChpbnB1dC5jaGFyQ29kZUF0KGopID49IDB4ODApIHsKCQkJCQllcnJvcignbm90LWJhc2ljJyk7CgkJCQl9CgkJCQlvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTsKCQkJfQoKCQkJLy8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZQoJCQkvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLgoKCQkJZm9yIChpbmRleCA9IGJhc2ljID4gMCA/IGJhc2ljICsgMSA6IDA7IGluZGV4IDwgaW5wdXRMZW5ndGg7IC8qIG5vIGZpbmFsIGV4cHJlc3Npb24gKi8pIHsKCgkJCQkvLyBgaW5kZXhgIGlzIHRoZSBpbmRleCBvZiB0aGUgbmV4dCBjaGFyYWN0ZXIgdG8gYmUgY29uc3VtZWQuCgkJCQkvLyBEZWNvZGUgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlciBpbnRvIGBkZWx0YWAsCgkJCQkvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llcgoJCQkJLy8gaWYgd2UgaW5jcmVhc2UgYGlgIGFzIHdlIGdvLCB0aGVuIHN1YnRyYWN0IG9mZiBpdHMgc3RhcnRpbmcKCQkJCS8vIHZhbHVlIGF0IHRoZSBlbmQgdG8gb2J0YWluIGBkZWx0YWAuCgkJCQlmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLzsgayArPSBiYXNlKSB7CgoJCQkJCWlmIChpbmRleCA+PSBpbnB1dExlbmd0aCkgewoJCQkJCQllcnJvcignaW52YWxpZC1pbnB1dCcpOwoJCQkJCX0KCgkJCQkJZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7CgoJCQkJCWlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHsKCQkJCQkJZXJyb3IoJ292ZXJmbG93Jyk7CgkJCQkJfQoKCQkJCQlpICs9IGRpZ2l0ICogdzsKCQkJCQl0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTsKCgkJCQkJaWYgKGRpZ2l0IDwgdCkgewoJCQkJCQlicmVhazsKCQkJCQl9CgoJCQkJCWJhc2VNaW51c1QgPSBiYXNlIC0gdDsKCQkJCQlpZiAodyA+IGZsb29yKG1heEludCAvIGJhc2VNaW51c1QpKSB7CgkJCQkJCWVycm9yKCdvdmVyZmxvdycpOwoJCQkJCX0KCgkJCQkJdyAqPSBiYXNlTWludXNUOwoKCQkJCX0KCgkJCQlvdXQgPSBvdXRwdXQubGVuZ3RoICsgMTsKCQkJCWJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApOwoKCQkJCS8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsCgkJCQkvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OgoJCQkJaWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikgewoJCQkJCWVycm9yKCdvdmVyZmxvdycpOwoJCQkJfQoKCQkJCW4gKz0gZmxvb3IoaSAvIG91dCk7CgkJCQlpICU9IG91dDsKCgkJCQkvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0CgkJCQlvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7CgoJCQl9CgoJCQlyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpOwoJCX0KCgkJLyoqCgkJICogQ29udmVydHMgYSBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzIChlLmcuIGEgZG9tYWluIG5hbWUgbGFiZWwpIHRvIGEKCQkgKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLgoJCSAqIEBtZW1iZXJPZiBwdW55Y29kZQoJCSAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scy4KCQkgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuCgkJICovCgkJZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7CgkJCXZhciBuLAoJCQkgICAgZGVsdGEsCgkJCSAgICBoYW5kbGVkQ1BDb3VudCwKCQkJICAgIGJhc2ljTGVuZ3RoLAoJCQkgICAgYmlhcywKCQkJICAgIGosCgkJCSAgICBtLAoJCQkgICAgcSwKCQkJICAgIGssCgkJCSAgICB0LAoJCQkgICAgY3VycmVudFZhbHVlLAoJCQkgICAgb3V0cHV0ID0gW10sCgkJCSAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqLwoJCQkgICAgaW5wdXRMZW5ndGgsCgkJCSAgICAvKiogQ2FjaGVkIGNhbGN1bGF0aW9uIHJlc3VsdHMgKi8KCQkJICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSwKCQkJICAgIGJhc2VNaW51c1QsCgkJCSAgICBxTWludXNUOwoKCQkJLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gVW5pY29kZQoJCQlpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpOwoKCQkJLy8gQ2FjaGUgdGhlIGxlbmd0aAoJCQlpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDsKCgkJCS8vIEluaXRpYWxpemUgdGhlIHN0YXRlCgkJCW4gPSBpbml0aWFsTjsKCQkJZGVsdGEgPSAwOwoJCQliaWFzID0gaW5pdGlhbEJpYXM7CgoJCQkvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzCgkJCWZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7CgkJCQljdXJyZW50VmFsdWUgPSBpbnB1dFtqXTsKCQkJCWlmIChjdXJyZW50VmFsdWUgPCAweDgwKSB7CgkJCQkJb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpOwoJCQkJfQoJCQl9CgoJCQloYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDsKCgkJCS8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkOwoJCQkvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuCgoJCQkvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXIKCQkJaWYgKGJhc2ljTGVuZ3RoKSB7CgkJCQlvdXRwdXQucHVzaChkZWxpbWl0ZXIpOwoJCQl9CgoJCQkvLyBNYWluIGVuY29kaW5nIGxvb3A6CgkJCXdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7CgoJCQkJLy8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dAoJCQkJLy8gbGFyZ2VyIG9uZToKCQkJCWZvciAobSA9IG1heEludCwgaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7CgkJCQkJY3VycmVudFZhbHVlID0gaW5wdXRbal07CgkJCQkJaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHsKCQkJCQkJbSA9IGN1cnJlbnRWYWx1ZTsKCQkJCQl9CgkJCQl9CgoJCQkJLy8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LAoJCQkJLy8gYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3cKCQkJCWhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTsKCQkJCWlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7CgkJCQkJZXJyb3IoJ292ZXJmbG93Jyk7CgkJCQl9CgoJCQkJZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTsKCQkJCW4gPSBtOwoKCQkJCWZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7CgkJCQkJY3VycmVudFZhbHVlID0gaW5wdXRbal07CgoJCQkJCWlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHsKCQkJCQkJZXJyb3IoJ292ZXJmbG93Jyk7CgkJCQkJfQoKCQkJCQlpZiAoY3VycmVudFZhbHVlID09IG4pIHsKCQkJCQkJLy8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIKCQkJCQkJZm9yIChxID0gZGVsdGEsIGsgPSBiYXNlOyAvKiBubyBjb25kaXRpb24gKi87IGsgKz0gYmFzZSkgewoJCQkJCQkJdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7CgkJCQkJCQlpZiAocSA8IHQpIHsKCQkJCQkJCQlicmVhazsKCQkJCQkJCX0KCQkJCQkJCXFNaW51c1QgPSBxIC0gdDsKCQkJCQkJCWJhc2VNaW51c1QgPSBiYXNlIC0gdDsKCQkJCQkJCW91dHB1dC5wdXNoKAoJCQkJCQkJCXN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSkKCQkJCQkJCSk7CgkJCQkJCQlxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpOwoJCQkJCQl9CgoJCQkJCQlvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7CgkJCQkJCWJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7CgkJCQkJCWRlbHRhID0gMDsKCQkJCQkJKytoYW5kbGVkQ1BDb3VudDsKCQkJCQl9CgkJCQl9CgoJCQkJKytkZWx0YTsKCQkJCSsrbjsKCgkJCX0KCQkJcmV0dXJuIG91dHB1dC5qb2luKCcnKTsKCQl9CgoJCS8qKgoJCSAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MKCQkgKiB0byBVbmljb2RlLiBPbmx5IHRoZSBQdW55Y29kZWQgcGFydHMgb2YgdGhlIGlucHV0IHdpbGwgYmUgY29udmVydGVkLCBpLmUuCgkJICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuCgkJICogY29udmVydGVkIHRvIFVuaWNvZGUuCgkJICogQG1lbWJlck9mIHB1bnljb2RlCgkJICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0bwoJCSAqIGNvbnZlcnQgdG8gVW5pY29kZS4KCQkgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgVW5pY29kZSByZXByZXNlbnRhdGlvbiBvZiB0aGUgZ2l2ZW4gUHVueWNvZGUKCQkgKiBzdHJpbmcuCgkJICovCgkJZnVuY3Rpb24gdG9Vbmljb2RlKGlucHV0KSB7CgkJCXJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykgewoJCQkJcmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpCgkJCQkJPyBkZWNvZGUoc3RyaW5nLnNsaWNlKDQpLnRvTG93ZXJDYXNlKCkpCgkJCQkJOiBzdHJpbmc7CgkJCX0pOwoJCX0KCgkJLyoqCgkJICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvCgkJICogUHVueWNvZGUuIE9ubHkgdGhlIG5vbi1BU0NJSSBwYXJ0cyBvZiB0aGUgZG9tYWluIG5hbWUgd2lsbCBiZSBjb252ZXJ0ZWQsCgkJICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluCgkJICogQVNDSUkuCgkJICogQG1lbWJlck9mIHB1bnljb2RlCgkJICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGEKCQkgKiBVbmljb2RlIHN0cmluZy4KCQkgKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgUHVueWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIGRvbWFpbiBuYW1lIG9yCgkJICogZW1haWwgYWRkcmVzcy4KCQkgKi8KCQlmdW5jdGlvbiB0b0FTQ0lJKGlucHV0KSB7CgkJCXJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykgewoJCQkJcmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpCgkJCQkJPyAneG4tLScgKyBlbmNvZGUoc3RyaW5nKQoJCQkJCTogc3RyaW5nOwoJCQl9KTsKCQl9CgoJCS8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLwoKCQkvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovCgkJcHVueWNvZGUgPSB7CgkJCS8qKgoJCQkgKiBBIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgUHVueWNvZGUuanMgdmVyc2lvbiBudW1iZXIuCgkJCSAqIEBtZW1iZXJPZiBwdW55Y29kZQoJCQkgKiBAdHlwZSBTdHJpbmcKCQkJICovCgkJCSd2ZXJzaW9uJzogJzEuMy4yJywKCQkJLyoqCgkJCSAqIEFuIG9iamVjdCBvZiBtZXRob2RzIHRvIGNvbnZlcnQgZnJvbSBKYXZhU2NyaXB0J3MgaW50ZXJuYWwgY2hhcmFjdGVyCgkJCSAqIHJlcHJlc2VudGF0aW9uIChVQ1MtMikgdG8gVW5pY29kZSBjb2RlIHBvaW50cywgYW5kIGJhY2suCgkJCSAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPgoJCQkgKiBAbWVtYmVyT2YgcHVueWNvZGUKCQkJICogQHR5cGUgT2JqZWN0CgkJCSAqLwoJCQkndWNzMic6IHsKCQkJCSdkZWNvZGUnOiB1Y3MyZGVjb2RlLAoJCQkJJ2VuY29kZSc6IHVjczJlbmNvZGUKCQkJfSwKCQkJJ2RlY29kZSc6IGRlY29kZSwKCQkJJ2VuY29kZSc6IGVuY29kZSwKCQkJJ3RvQVNDSUknOiB0b0FTQ0lJLAoJCQkndG9Vbmljb2RlJzogdG9Vbmljb2RlCgkJfTsKCgkJLyoqIEV4cG9zZSBgcHVueWNvZGVgICovCgkJLy8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zCgkJLy8gbGlrZSB0aGUgZm9sbG93aW5nOgoJCWlmICgKCQkJdHJ1ZQoJCSkgewoJCQkhKF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gZnVuY3Rpb24oKSB7CgkJCQlyZXR1cm4gcHVueWNvZGU7CgkJCX0uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fLCBleHBvcnRzLCBtb2R1bGUpLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7CgkJfSBlbHNlIGlmIChmcmVlRXhwb3J0cyAmJiBmcmVlTW9kdWxlKSB7CgkJCWlmIChtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cykgeyAvLyBpbiBOb2RlLmpzIG9yIFJpbmdvSlMgdjAuOC4wKwoJCQkJZnJlZU1vZHVsZS5leHBvcnRzID0gcHVueWNvZGU7CgkJCX0gZWxzZSB7IC8vIGluIE5hcndoYWwgb3IgUmluZ29KUyB2MC43LjAtCgkJCQlmb3IgKGtleSBpbiBwdW55Y29kZSkgewoJCQkJCXB1bnljb2RlLmhhc093blByb3BlcnR5KGtleSkgJiYgKGZyZWVFeHBvcnRzW2tleV0gPSBwdW55Y29kZVtrZXldKTsKCQkJCX0KCQkJfQoJCX0gZWxzZSB7IC8vIGluIFJoaW5vIG9yIGEgd2ViIGJyb3dzZXIKCQkJcm9vdC5wdW55Y29kZSA9IHB1bnljb2RlOwoJCX0KCgl9KHRoaXMpKTsKCgkvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg0MykobW9kdWxlKSwgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSgpKSkpCgovKioqLyB9LAovKiA0MyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkgew0KCQlpZighbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkgew0KCQkJbW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307DQoJCQltb2R1bGUucGF0aHMgPSBbXTsNCgkJCS8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdA0KCQkJbW9kdWxlLmNoaWxkcmVuID0gW107DQoJCQltb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTsNCgkJfQ0KCQlyZXR1cm4gbW9kdWxlOw0KCX0NCgoKLyoqKi8gfSwKLyogNDQgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCW1vZHVsZS5leHBvcnRzID0gewoJICBpc1N0cmluZzogZnVuY3Rpb24oYXJnKSB7CgkgICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnc3RyaW5nJzsKCSAgfSwKCSAgaXNPYmplY3Q6IGZ1bmN0aW9uKGFyZykgewoJICAgIHJldHVybiB0eXBlb2YoYXJnKSA9PT0gJ29iamVjdCcgJiYgYXJnICE9PSBudWxsOwoJICB9LAoJICBpc051bGw6IGZ1bmN0aW9uKGFyZykgewoJICAgIHJldHVybiBhcmcgPT09IG51bGw7CgkgIH0sCgkgIGlzTnVsbE9yVW5kZWZpbmVkOiBmdW5jdGlvbihhcmcpIHsKCSAgICByZXR1cm4gYXJnID09IG51bGw7CgkgIH0KCX07CgoKLyoqKi8gfSwKLyogNDUgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCWV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDYpOwoJZXhwb3J0cy5lbmNvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IF9fd2VicGFja19yZXF1aXJlX18oNDcpOwoKCi8qKiovIH0sCi8qIDQ2ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCS8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLgoJLy8KCS8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCgkvLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlCgkvLyAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nCgkvLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCgkvLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0CgkvLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUKCS8vIGZvbGxvd2luZyBjb25kaXRpb25zOgoJLy8KCS8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkCgkvLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KCS8vCgkvLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUwoJLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgoJLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTgoJLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sCgkvLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKCS8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUKCS8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCgoJJ3VzZSBzdHJpY3QnOwoKCS8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmcKCS8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLgoJLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDcKCWZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkgewoJICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7Cgl9CgoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihxcywgc2VwLCBlcSwgb3B0aW9ucykgewoJICBzZXAgPSBzZXAgfHwgJyYnOwoJICBlcSA9IGVxIHx8ICc9JzsKCSAgdmFyIG9iaiA9IHt9OwoKCSAgaWYgKHR5cGVvZiBxcyAhPT0gJ3N0cmluZycgfHwgcXMubGVuZ3RoID09PSAwKSB7CgkgICAgcmV0dXJuIG9iajsKCSAgfQoKCSAgdmFyIHJlZ2V4cCA9IC9cKy9nOwoJICBxcyA9IHFzLnNwbGl0KHNlcCk7CgoJICB2YXIgbWF4S2V5cyA9IDEwMDA7CgkgIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLm1heEtleXMgPT09ICdudW1iZXInKSB7CgkgICAgbWF4S2V5cyA9IG9wdGlvbnMubWF4S2V5czsKCSAgfQoKCSAgdmFyIGxlbiA9IHFzLmxlbmd0aDsKCSAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50CgkgIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7CgkgICAgbGVuID0gbWF4S2V5czsKCSAgfQoKCSAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkgewoJICAgIHZhciB4ID0gcXNbaV0ucmVwbGFjZShyZWdleHAsICclMjAnKSwKCSAgICAgICAgaWR4ID0geC5pbmRleE9mKGVxKSwKCSAgICAgICAga3N0ciwgdnN0ciwgaywgdjsKCgkgICAgaWYgKGlkeCA+PSAwKSB7CgkgICAgICBrc3RyID0geC5zdWJzdHIoMCwgaWR4KTsKCSAgICAgIHZzdHIgPSB4LnN1YnN0cihpZHggKyAxKTsKCSAgICB9IGVsc2UgewoJICAgICAga3N0ciA9IHg7CgkgICAgICB2c3RyID0gJyc7CgkgICAgfQoKCSAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpOwoJICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7CgoJICAgIGlmICghaGFzT3duUHJvcGVydHkob2JqLCBrKSkgewoJICAgICAgb2JqW2tdID0gdjsKCSAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkgewoJICAgICAgb2JqW2tdLnB1c2godik7CgkgICAgfSBlbHNlIHsKCSAgICAgIG9ialtrXSA9IFtvYmpba10sIHZdOwoJICAgIH0KCSAgfQoKCSAgcmV0dXJuIG9iajsKCX07CgoKLyoqKi8gfSwKLyogNDcgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCgkvLwoJLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEKCS8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKCS8vICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcKCS8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwKCS8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKCS8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZQoJLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6CgkvLwoJLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQKCS8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoJLy8KCS8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTCgkvLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GCgkvLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCgkvLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwKCS8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUgoJLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQoJLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS4KCgkndXNlIHN0cmljdCc7CgoJdmFyIHN0cmluZ2lmeVByaW1pdGl2ZSA9IGZ1bmN0aW9uKHYpIHsKCSAgc3dpdGNoICh0eXBlb2YgdikgewoJICAgIGNhc2UgJ3N0cmluZyc6CgkgICAgICByZXR1cm4gdjsKCgkgICAgY2FzZSAnYm9vbGVhbic6CgkgICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7CgoJICAgIGNhc2UgJ251bWJlcic6CgkgICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7CgoJICAgIGRlZmF1bHQ6CgkgICAgICByZXR1cm4gJyc7CgkgIH0KCX07CgoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHNlcCwgZXEsIG5hbWUpIHsKCSAgc2VwID0gc2VwIHx8ICcmJzsKCSAgZXEgPSBlcSB8fCAnPSc7CgkgIGlmIChvYmogPT09IG51bGwpIHsKCSAgICBvYmogPSB1bmRlZmluZWQ7CgkgIH0KCgkgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JykgewoJICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbihrKSB7CgkgICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxOwoJICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqW2tdKSkgewoJICAgICAgICByZXR1cm4gb2JqW2tdLm1hcChmdW5jdGlvbih2KSB7CgkgICAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZSh2KSk7CgkgICAgICAgIH0pLmpvaW4oc2VwKTsKCSAgICAgIH0gZWxzZSB7CgkgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqW2tdKSk7CgkgICAgICB9CgkgICAgfSkuam9pbihzZXApOwoKCSAgfQoKCSAgaWYgKCFuYW1lKSByZXR1cm4gJyc7CgkgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICsKCSAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7Cgl9OwoKCi8qKiovIH0sCi8qIDQ4ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBodHRwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTsKCgl2YXIgaHR0cHMgPSBtb2R1bGUuZXhwb3J0czsKCglmb3IgKHZhciBrZXkgaW4gaHR0cCkgewoJICAgIGlmIChodHRwLmhhc093blByb3BlcnR5KGtleSkpIGh0dHBzW2tleV0gPSBodHRwW2tleV07Cgl9OwoKCWh0dHBzLnJlcXVlc3QgPSBmdW5jdGlvbiAocGFyYW1zLCBjYikgewoJICAgIGlmICghcGFyYW1zKSBwYXJhbXMgPSB7fTsKCSAgICBwYXJhbXMuc2NoZW1lID0gJ2h0dHBzJzsKCSAgICBwYXJhbXMucHJvdG9jb2wgPSAnaHR0cHM6JzsKCSAgICByZXR1cm4gaHR0cC5yZXF1ZXN0LmNhbGwodGhpcywgcGFyYW1zLCBjYik7Cgl9CgoKLyoqKi8gfSwKLyogNDkgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIHFzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NSkKCXZhciBodHRwID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KQoJdmFyIGh0dHBzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OCkKCXZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKQoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gUE9TVChvcHRpb25zLCBjYWxsYmFjaykgewoKCSAgLy8gcmVxdWlyZSBvcHRpb25zLnVybCBvciBmYWlsIG5vaXNpbHkgCgkgIGlmICghb3B0aW9ucy51cmwpIHsKCSAgICB0aHJvdyBFcnJvcignb3B0aW9ucy51cmwgcmVxdWlyZWQnKQoJICB9CgoJICAvLyBwYXJzZSBvdXQgdGhlIG9wdGlvbnMgZnJvbSBvcHRpb25zLnVybAoJICB2YXIgb3B0cyA9IHVybC5wYXJzZShvcHRpb25zLnVybCkKCSAgdmFyIG1ldGhvZCA9IG9wdHMucHJvdG9jb2wgPT09ICdodHRwczonPyBodHRwcy5yZXF1ZXN0IDogaHR0cC5yZXF1ZXN0CgkgIHZhciBkZWZhdWx0Q29udGVudFR5cGUgPSAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcKCgkgIG9wdHMubWV0aG9kID0gJ1BPU1QnCgkgIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gZmFsc2UKCSAgb3B0cy5hZ2VudCA9IGZhbHNlCgkgIG9wdHMuaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fQoJICBvcHRzLmhlYWRlcnNbJ1VzZXItQWdlbnQnXSA9IG9wdHMuaGVhZGVyc1snVXNlci1BZ2VudCddIHx8ICd0aW55LWh0dHAnCgkgIG9wdHMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSBvcHRzLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddIHx8IGRlZmF1bHRDb250ZW50VHlwZQoJICAvLyBvcHRzLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcKCSAgdmFyIHJlcUpTT04gPSBvcHRzLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddLnN0YXJ0c1dpdGgoJ2FwcGxpY2F0aW9uL2pzb24nKQoJICB2YXIgcG9zdERhdGEgPSByZXFKU09OPyBKU09OLnN0cmluZ2lmeShvcHRpb25zLmRhdGEgfHwge30pIDogcXMuc3RyaW5naWZ5KG9wdGlvbnMuZGF0YSB8fCB7fSkKCgkgIC8vIG1ha2UgYSBQT1NUIHJlcXVlc3QKCSAgdmFyIHJlcSA9IG1ldGhvZChvcHRzLCBmdW5jdGlvbihyZXMpIHsKCSAgIAoJICAgIHZhciByYXdEYXRhID0gJycKCSAgICB2YXIgc3RhdHVzQ29kZSA9IHJlcy5zdGF0dXNDb2RlCgkgICAgdmFyIGNvbnRlbnRUeXBlID0gcmVzLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddCgkgICAgdmFyIGlzSlNPTiA9IGNvbnRlbnRUeXBlID09PSAnYXBwbGljYXRpb24vanNvbicKCgkgICAgaWYgKHN0YXR1c0NvZGUgIT09IDIwMCkgewoJICAgICAgY2FsbGJhY2soRXJyb3IoJ0dFVCBmYWlsZWQgd2l0aDogJyArIHN0YXR1c0NvZGUpKQoJICAgICAgcmVzLnJlc3VtZSgpCgkgICAgICByZXR1cm4KCSAgICB9CgkgCgkgICAgcmVzLnNldEVuY29kaW5nKCd1dGY4JykKCSAgICByZXMub24oJ2RhdGEnLCBmdW5jdGlvbihjaHVuaykgeyByYXdEYXRhICs9IGNodW5rIH0pCgkgICAgcmVzLm9uKCdlbmQnLCBmdW5jdGlvbih4KSB7CgkgICAgICB0cnkgewoJICAgICAgICB2YXIgcGFyc2VkRGF0YSA9IGlzSlNPTj8gSlNPTi5wYXJzZShyYXdEYXRhKSA6IHJhd0RhdGEKCSAgICAgICAgY2FsbGJhY2sobnVsbCwgcGFyc2VkRGF0YSkKCSAgICAgIH0gCgkgICAgICBjYXRjaCAoZSkgewoJICAgICAgICBjYWxsYmFjayhlLm1lc3NhZ2UpCgkgICAgICB9CgkgICAgfSkKCSAgfSkKCgkgIHJlcS5vbignZXJyb3InLCBmdW5jdGlvbihlKSB7IGNhbGxiYWNrKEVycm9yKGUubWVzc2FnZSkpIH0pCgoJICByZXEud3JpdGUocG9zdERhdGEpCgkgCgkgIHJlcS5lbmQoKQoJfQoKCi8qKiovIH0sCi8qIDUwICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHZhbGlkYXRlOwoKCXZhciBfYXBpID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7CgoJdmFyIF9hcGkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXBpKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCWZ1bmN0aW9uIHZhbGlkYXRlKG1ldGhvZCwgcGFyYW1zKSB7CgkgIC8vIGdldCBhbGwgdGhlIHJlcXVyaWVkIHBhcmFtcyBmb3IgdGhpcyBtZXRob2QKCSAgdmFyIHJlcXVpcmVkID0gX2FwaTIuZGVmYXVsdFttZXRob2RdLmZpbHRlcihmdW5jdGlvbiAocGFyYW0pIHsKCSAgICByZXR1cm4gcGFyYW0ucmVxdWlyZWQgPT09ICdSZXF1aXJlZCc7CgkgIH0pOwoJICAvLyBjb2xsZWN0IGFueSBtaXNzaW5nIHBhcmFtcwoJICB2YXIgbWlzc2luZyA9IHJlcXVpcmVkLmZpbHRlcihmdW5jdGlvbiAocGFyYW0pIHsKCSAgICByZXR1cm4gdHlwZW9mIHBhcmFtc1twYXJhbS5uYW1lXSA9PT0gJ3VuZGVmaW5lZCc7CgkgIH0pOwoJICAvLyBvcHRpbWlzaXRjYWxseSBhc3N1bWUgdGhlIGJlc3QKCSAgdmFyIGVyciA9IGZhbHNlOwoJICAvLyBidXQgaGF2ZSBhIHBsYW4gZm9yIHRoZSB3b3JzdAoJICBpZiAobWlzc2luZy5sZW5ndGgpIHsKCSAgICB2YXIgYnVsbGV0cyA9IG1pc3NpbmcubWFwKGZ1bmN0aW9uIChwYXJhbSkgewoJICAgICAgcmV0dXJuICctICcgKyBwYXJhbS5uYW1lICsgJyAuLi4gJyArIHBhcmFtLmRlc2NyaXB0aW9uOwoJICAgIH0pOwoJICAgIHZhciBtc2cgPSBtZXRob2QgKyAnIG1pc3NpbmcgcGFyYW1zOlxuJyArIGJ1bGxldHMuam9pbignXG4nKTsKCSAgICBlcnIgPSBFcnJvcihtc2cpOwoJICB9CgkgIHJldHVybiBlcnI7Cgl9IC8vCgkvLyB2YWxpZGF0ZSByZXR1cm5zIGFuIGVycm9yIG9iamVjdCBpZiBhbnkgcmVxdWlyZWQgcGFyYW1zIGFyZSBtaXNzaW5nCgkvLwoJLy8gZXhhbXBsZSB1c2FnZToKCS8vIAoJLy8gICAvLyB0b2tlbiBhbmQgaWQgYXJlIHJlcXVpcmVkIHBhcmFtcwoJLy8gICBmdW5jdGlvbiBhcGlDYWxsKHBhcmFtcywgY2FsbGJhY2spIHsgCgkvLyAgICAgbGV0IGVyciA9IHZhbGlkYXRlKCdhcGkuc2lnbmF0dXJlJywgcGFyYW1zKQoJLy8gICAgIGlmIChlcnIpIHsKCS8vICAgICAgIGNhbGxiYWNrKGVycikKCS8vICAgICB9CgkvLyAgICAgZWxzZSB7CgkvLyAgICAgICAvLyBkbyBhcGkgY2FsbAoJLy8gICAgIH0KCS8vICAgfQoJLy8KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogNTEgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7CgkJImFwaS50ZXN0IjogWwoJCQl7CgkJCQkibmFtZSI6ICJlcnJvciIsCgkJCQkiZXhhbXBsZSI6ICJteV9lcnJvciIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkVycm9yIHJlc3BvbnNlIHRvIHJldHVyblxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJmb28iLAoJCQkJImV4YW1wbGUiOiAiYmFyIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiZXhhbXBsZSBwcm9wZXJ0eSB0byByZXR1cm5cbiIKCQkJfQoJCV0sCgkJImF1dGgucmV2b2tlIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInRlc3QiLAoJCQkJImV4YW1wbGUiOiAidHJ1ZSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlNldHRpbmcgdGhpcyBwYXJhbWV0ZXIgdG8gMSB0cmlnZ2VycyBhIHRlc3RpbmcgbW9kZSB3aGVyZSB0aGUgc3BlY2lmaWVkIHRva2VuIHdpbGwgbm90IGFjdHVhbGx5IGJlIHJldm9rZWQuXG4iCgkJCX0KCQldLAoJCSJhdXRoLnRlc3QiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBpZGVudGlmeVxuIgoJCQl9CgkJXSwKCQkiYm90cy5pbmZvIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogdXNlcnM6cmVhZFxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJib3QiLAoJCQkJImV4YW1wbGUiOiAiQjEyMzQ1Njc4IiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQm90IHVzZXIgdG8gZ2V0IGluZm8gb25cbiIKCQkJfQoJCV0sCgkJImNoYW5uZWxzLmFyY2hpdmUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBjaGFubmVsczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ2hhbm5lbCB0byBhcmNoaXZlXG4iCgkJCX0KCQldLAoJCSJjaGFubmVscy5jcmVhdGUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBjaGFubmVsczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJuYW1lIiwKCQkJCSJleGFtcGxlIjogIm15Y2hhbm5lbCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIk5hbWUgb2YgY2hhbm5lbCB0byBjcmVhdGVcbiIKCQkJfQoJCV0sCgkJImNoYW5uZWxzLmhpc3RvcnkiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBjaGFubmVsczpoaXN0b3J5XG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFubmVsIHRvIGZldGNoIGhpc3RvcnkgZm9yLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJsYXRlc3QiLAoJCQkJImV4YW1wbGUiOiAiMTIzNDU2Nzg5MC4xMjM0NTYiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PW5vdyIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRW5kIG9mIHRpbWUgcmFuZ2Ugb2YgbWVzc2FnZXMgdG8gaW5jbHVkZSBpbiByZXN1bHRzLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJvbGRlc3QiLAoJCQkJImV4YW1wbGUiOiAiMTIzNDU2Nzg5MC4xMjM0NTYiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTAiLAoJCQkJImRlc2NyaXB0aW9uIjogIlN0YXJ0IG9mIHRpbWUgcmFuZ2Ugb2YgbWVzc2FnZXMgdG8gaW5jbHVkZSBpbiByZXN1bHRzLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJpbmNsdXNpdmUiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiSW5jbHVkZSBtZXNzYWdlcyB3aXRoIGxhdGVzdCBvciBvbGRlc3QgdGltZXN0YW1wIGluIHJlc3VsdHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNvdW50IiwKCQkJCSJleGFtcGxlIjogIjEwMCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MTAwIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgbWVzc2FnZXMgdG8gcmV0dXJuLCBiZXR3ZWVuIDEgYW5kIDEwMDAuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVucmVhZHMiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiSW5jbHVkZSB1bnJlYWRfY291bnRfZGlzcGxheSBpbiB0aGUgb3V0cHV0P1xuIgoJCQl9CgkJXSwKCQkiY2hhbm5lbHMuaW5mbyI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGNoYW5uZWxzOnJlYWRcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNoYW5uZWwgdG8gZ2V0IGluZm8gb25cbiIKCQkJfQoJCV0sCgkJImNoYW5uZWxzLmludml0ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGNoYW5uZWxzOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFubmVsIHRvIGludml0ZSB1c2VyIHRvLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ1c2VyIiwKCQkJCSJleGFtcGxlIjogIlUxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVXNlciB0byBpbnZpdGUgdG8gY2hhbm5lbC5cbiIKCQkJfQoJCV0sCgkJImNoYW5uZWxzLmpvaW4iOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBjaGFubmVsczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJuYW1lIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiTmFtZSBvZiBjaGFubmVsIHRvIGpvaW5cbiIKCQkJfQoJCV0sCgkJImNoYW5uZWxzLmtpY2siOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBjaGFubmVsczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ2hhbm5lbCB0byByZW1vdmUgdXNlciBmcm9tLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ1c2VyIiwKCQkJCSJleGFtcGxlIjogIlUxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVXNlciB0byByZW1vdmUgZnJvbSBjaGFubmVsLlxuIgoJCQl9CgkJXSwKCQkiY2hhbm5lbHMubGVhdmUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBjaGFubmVsczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ2hhbm5lbCB0byBsZWF2ZVxuIgoJCQl9CgkJXSwKCQkiY2hhbm5lbHMubGlzdCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGNoYW5uZWxzOnJlYWRcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZXhjbHVkZV9hcmNoaXZlZCIsCgkJCQkiZXhhbXBsZSI6ICIxIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0wIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJEb24ndCByZXR1cm4gYXJjaGl2ZWQgY2hhbm5lbHMuXG4iCgkJCX0KCQldLAoJCSJjaGFubmVscy5tYXJrIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogY2hhbm5lbHM6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNoYW5uZWwgdG8gc2V0IHJlYWRpbmcgY3Vyc29yIGluLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0cyIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkwLjEyMzQ1NiIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCBvZiB0aGUgbW9zdCByZWNlbnRseSBzZWVuIG1lc3NhZ2UuXG4iCgkJCX0KCQldLAoJCSJjaGFubmVscy5yZW5hbWUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBjaGFubmVsczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ2hhbm5lbCB0byByZW5hbWVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAibmFtZSIsCgkJCQkiZXhhbXBsZSI6ICLCoCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIk5ldyBuYW1lIGZvciBjaGFubmVsLlxuIgoJCQl9CgkJXSwKCQkiY2hhbm5lbHMucmVwbGllcyI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGNoYW5uZWxzOmhpc3RvcnlcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNoYW5uZWwgdG8gZmV0Y2ggdGhyZWFkIGZyb21cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidGhyZWFkX3RzIiwKCQkJCSJleGFtcGxlIjogIjEyMzQ1Njc4OTAuMTIzNDU2IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGlkZW50aWZpZXIgb2YgYSB0aHJlYWQncyBwYXJlbnQgbWVzc2FnZVxuIgoJCQl9CgkJXSwKCQkiY2hhbm5lbHMuc2V0UHVycG9zZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGNoYW5uZWxzOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFubmVsIHRvIHNldCB0aGUgcHVycG9zZSBvZlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJwdXJwb3NlIiwKCQkJCSJleGFtcGxlIjogIk15IFB1cnBvc2UiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaGUgbmV3IHB1cnBvc2VcbiIKCQkJfQoJCV0sCgkJImNoYW5uZWxzLnNldFRvcGljIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogY2hhbm5lbHM6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNoYW5uZWwgdG8gc2V0IHRoZSB0b3BpYyBvZlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0b3BpYyIsCgkJCQkiZXhhbXBsZSI6ICJNeSBUb3BpYyIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRoZSBuZXcgdG9waWNcbiIKCQkJfQoJCV0sCgkJImNoYW5uZWxzLnVuYXJjaGl2ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGNoYW5uZWxzOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFubmVsIHRvIHVuYXJjaGl2ZVxuIgoJCQl9CgkJXSwKCQkiY2hhdC5kZWxldGUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBjaGF0OndyaXRlOmJvdCBvciBjaGF0OndyaXRlOnVzZXJcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidHMiLAoJCQkJImV4YW1wbGUiOiAiMTQwNTg5NDMyMi4wMDI3NjgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgb2YgdGhlIG1lc3NhZ2UgdG8gYmUgZGVsZXRlZC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNoYW5uZWwgY29udGFpbmluZyB0aGUgbWVzc2FnZSB0byBiZSBkZWxldGVkLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJhc191c2VyIiwKCQkJCSJleGFtcGxlIjogInRydWUiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJQYXNzIHRydWUgdG8gZGVsZXRlIHRoZSBtZXNzYWdlIGFzIHRoZSBhdXRoZWQgdXNlci4gQm90IHVzZXJzIGluIHRoaXMgY29udGV4dCBhcmUgY29uc2lkZXJlZCBhdXRoZWQgdXNlcnMuXG4iCgkJCX0KCQldLAoJCSJjaGF0Lm1lTWVzc2FnZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGNoYXQ6d3JpdGU6dXNlclxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ2hhbm5lbCB0byBzZW5kIG1lc3NhZ2UgdG8uIENhbiBiZSBhIHB1YmxpYyBjaGFubmVsLCBwcml2YXRlIGdyb3VwIG9yIElNIGNoYW5uZWwuIENhbiBiZSBhbiBlbmNvZGVkIElELCBvciBhIG5hbWUuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInRleHQiLAoJCQkJImV4YW1wbGUiOiAiSGVsbG8gd29ybGQiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUZXh0IG9mIHRoZSBtZXNzYWdlIHRvIHNlbmQuXG4iCgkJCX0KCQldLAoJCSJjaGF0LnBvc3RNZXNzYWdlIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogY2hhdDp3cml0ZTpib3Qgb3IgY2hhdDp3cml0ZTp1c2VyXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFubmVsLCBwcml2YXRlIGdyb3VwLCBvciBJTSBjaGFubmVsIHRvIHNlbmQgbWVzc2FnZSB0by4gQ2FuIGJlIGFuIGVuY29kZWQgSUQsIG9yIGEgbmFtZS4gU2VlIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInRleHQiLAoJCQkJImV4YW1wbGUiOiAiSGVsbG8gd29ybGQiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUZXh0IG9mIHRoZSBtZXNzYWdlIHRvIHNlbmQuIFNlZSBiZWxvdyBmb3IgYW4gZXhwbGFuYXRpb24gb2YgZm9ybWF0dGluZy4gVGhpcyBmaWVsZCBpcyB1c3VhbGx5IHJlcXVpcmVkLCB1bmxlc3MgeW91J3JlIHByb3ZpZGluZyBvbmx5IGF0dGFjaG1lbnRzIGluc3RlYWQuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInBhcnNlIiwKCQkJCSJleGFtcGxlIjogImZ1bGwiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFuZ2UgaG93IG1lc3NhZ2VzIGFyZSB0cmVhdGVkLiBEZWZhdWx0cyB0byBub25lLiBTZWUgYmVsb3cuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImxpbmtfbmFtZXMiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbmQgYW5kIGxpbmsgY2hhbm5lbCBuYW1lcyBhbmQgdXNlcm5hbWVzLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJhdHRhY2htZW50cyIsCgkJCQkiZXhhbXBsZSI6ICJbe1wicHJldGV4dFwiOiBcInByZS1oZWxsb1wiLCBcInRleHRcIjogXCJ0ZXh0LXdvcmxkXCJ9XSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlN0cnVjdHVyZWQgbWVzc2FnZSBhdHRhY2htZW50cy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidW5mdXJsX2xpbmtzIiwKCQkJCSJleGFtcGxlIjogInRydWUiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJQYXNzIHRydWUgdG8gZW5hYmxlIHVuZnVybGluZyBvZiBwcmltYXJpbHkgdGV4dC1iYXNlZCBjb250ZW50LlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ1bmZ1cmxfbWVkaWEiLAoJCQkJImV4YW1wbGUiOiAiZmFsc2UiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJQYXNzIGZhbHNlIHRvIGRpc2FibGUgdW5mdXJsaW5nIG9mIG1lZGlhIGNvbnRlbnQuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXJuYW1lIiwKCQkJCSJleGFtcGxlIjogIk15IEJvdCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlNldCB5b3VyIGJvdCdzIHVzZXIgbmFtZS4gTXVzdCBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYXNfdXNlciBzZXQgdG8gZmFsc2UsIG90aGVyd2lzZSBpZ25vcmVkLiBTZWUgYXV0aG9yc2hpcCBiZWxvdy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiYXNfdXNlciIsCgkJCQkiZXhhbXBsZSI6ICJ0cnVlIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUGFzcyB0cnVlIHRvIHBvc3QgdGhlIG1lc3NhZ2UgYXMgdGhlIGF1dGhlZCB1c2VyLCBpbnN0ZWFkIG9mIGFzIGEgYm90LiBEZWZhdWx0cyB0byBmYWxzZS4gU2VlIGF1dGhvcnNoaXAgYmVsb3cuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImljb25fdXJsIiwKCQkJCSJleGFtcGxlIjogImh0dHA6Ly9sb3JlbXBpeGVsLmNvbS80OC80OCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlVSTCB0byBhbiBpbWFnZSB0byB1c2UgYXMgdGhlIGljb24gZm9yIHRoaXMgbWVzc2FnZS4gTXVzdCBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYXNfdXNlciBzZXQgdG8gZmFsc2UsIG90aGVyd2lzZSBpZ25vcmVkLiBTZWUgYXV0aG9yc2hpcCBiZWxvdy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiaWNvbl9lbW9qaSIsCgkJCQkiZXhhbXBsZSI6ICI6Y2hhcnRfd2l0aF91cHdhcmRzX3RyZW5kOiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkVtb2ppIHRvIHVzZSBhcyB0aGUgaWNvbiBmb3IgdGhpcyBtZXNzYWdlLiBPdmVycmlkZXMgaWNvbl91cmwuIE11c3QgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGFzX3VzZXIgc2V0IHRvIGZhbHNlLCBvdGhlcndpc2UgaWdub3JlZC4gU2VlIGF1dGhvcnNoaXAgYmVsb3cuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInRocmVhZF90cyIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkwLjEyMzQ1NiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlByb3ZpZGUgYW5vdGhlciBtZXNzYWdlJ3MgdHMgdmFsdWUgdG8gbWFrZSB0aGlzIG1lc3NhZ2UgYSByZXBseS4gQXZvaWQgdXNpbmcgYSByZXBseSdzIHRzIHZhbHVlOyB1c2UgaXRzIHBhcmVudCBpbnN0ZWFkLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJyZXBseV9icm9hZGNhc3QiLAoJCQkJImV4YW1wbGUiOiAidHJ1ZSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aHJlYWRfdHMgYW5kIGluZGljYXRlcyB3aGV0aGVyIHJlcGx5IHNob3VsZCBiZSBtYWRlIHZpc2libGUgdG8gZXZlcnlvbmUgaW4gdGhlIGNoYW5uZWwgb3IgY29udmVyc2F0aW9uLiBEZWZhdWx0cyB0byBmYWxzZS5cbiIKCQkJfQoJCV0sCgkJImNoYXQudXBkYXRlIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogY2hhdDp3cml0ZTpib3Qgb3IgY2hhdDp3cml0ZTp1c2VyXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInRzIiwKCQkJCSJleGFtcGxlIjogIjE0MDU4OTQzMjIuMDAyNzY4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVGltZXN0YW1wIG9mIHRoZSBtZXNzYWdlIHRvIGJlIHVwZGF0ZWQuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFubmVsIGNvbnRhaW5pbmcgdGhlIG1lc3NhZ2UgdG8gYmUgdXBkYXRlZC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidGV4dCIsCgkJCQkiZXhhbXBsZSI6ICJIZWxsbyB3b3JsZCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIk5ldyB0ZXh0IGZvciB0aGUgbWVzc2FnZSwgdXNpbmcgdGhlIGRlZmF1bHQgZm9ybWF0dGluZyBydWxlcy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiYXR0YWNobWVudHMiLAoJCQkJImV4YW1wbGUiOiAiW3tcInByZXRleHRcIjogXCJwcmUtaGVsbG9cIiwgXCJ0ZXh0XCI6IFwidGV4dC13b3JsZFwifV0iLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJTdHJ1Y3R1cmVkIG1lc3NhZ2UgYXR0YWNobWVudHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInBhcnNlIiwKCQkJCSJleGFtcGxlIjogIm5vbmUiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFuZ2UgaG93IG1lc3NhZ2VzIGFyZSB0cmVhdGVkLiBEZWZhdWx0cyB0byBjbGllbnQsIHVubGlrZSBjaGF0LnBvc3RNZXNzYWdlLiBTZWUgYmVsb3cuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImxpbmtfbmFtZXMiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbmQgYW5kIGxpbmsgY2hhbm5lbCBuYW1lcyBhbmQgdXNlcm5hbWVzLiBEZWZhdWx0cyB0byBub25lLiBUaGlzIHBhcmFtZXRlciBzaG91bGQgYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIHBhcnNlLiBUbyBzZXQgbGlua19uYW1lcyB0byAxLCBzcGVjaWZ5IGEgcGFyc2UgbW9kZSBvZiBmdWxsLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJhc191c2VyIiwKCQkJCSJleGFtcGxlIjogInRydWUiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJQYXNzIHRydWUgdG8gdXBkYXRlIHRoZSBtZXNzYWdlIGFzIHRoZSBhdXRoZWQgdXNlci4gQm90IHVzZXJzIGluIHRoaXMgY29udGV4dCBhcmUgY29uc2lkZXJlZCBhdXRoZWQgdXNlcnMuXG4iCgkJCX0KCQldLAoJCSJkbmQuZW5kRG5kIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogZG5kOndyaXRlXG4iCgkJCX0KCQldLAoJCSJkbmQuZW5kU25vb3plIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogZG5kOndyaXRlXG4iCgkJCX0KCQldLAoJCSJkbmQuaW5mbyI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGRuZDpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXIiLAoJCQkJImV4YW1wbGUiOiAiVTEyMzQiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJVc2VyIHRvIGZldGNoIHN0YXR1cyBmb3IgKGRlZmF1bHRzIHRvIGN1cnJlbnQgdXNlcilcbiIKCQkJfQoJCV0sCgkJImRuZC5zZXRTbm9vemUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBkbmQ6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAibnVtX21pbnV0ZXMiLAoJCQkJImV4YW1wbGUiOiAiNjAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgbWludXRlcywgZnJvbSBub3csIHRvIHNub296ZSB1bnRpbC5cbiIKCQkJfQoJCV0sCgkJImRuZC50ZWFtSW5mbyI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGRuZDpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXJzIiwKCQkJCSJleGFtcGxlIjogIlUxMjM0LFU0NTY3IiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgdXNlcnMgdG8gZmV0Y2ggRG8gTm90IERpc3R1cmIgc3RhdHVzIGZvclxuIgoJCQl9CgkJXSwKCQkiZW1vamkubGlzdCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGVtb2ppOnJlYWRcbiIKCQkJfQoJCV0sCgkJImZpbGVzLmNvbW1lbnRzLmFkZCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGZpbGVzOndyaXRlOnVzZXJcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZSIsCgkJCQkiZXhhbXBsZSI6ICJGMTIzNDQ2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgdG8gYWRkIGEgY29tbWVudCB0by5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY29tbWVudCIsCgkJCQkiZXhhbXBsZSI6ICJFdmVyeW9uZSBzaG91bGQgdGFrZSBhIG1vbWVudCB0byByZWFkIHRoaXMgZmlsZS4iLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUZXh0IG9mIHRoZSBjb21tZW50IHRvIGFkZC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDQ2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNoYW5uZWwgaWQgKGVuY29kZWQpIG9mIHdoaWNoIGxvY2F0aW9uIHRvIGFzc29jaWF0ZSB3aXRoIHRoZSBuZXcgY29tbWVudC5cbiIKCQkJfQoJCV0sCgkJImZpbGVzLmNvbW1lbnRzLmRlbGV0ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGZpbGVzOndyaXRlOnVzZXJcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZSIsCgkJCQkiZXhhbXBsZSI6ICJGMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgdG8gZGVsZXRlIGEgY29tbWVudCBmcm9tLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJpZCIsCgkJCQkiZXhhbXBsZSI6ICJGYzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaGUgY29tbWVudCB0byBkZWxldGUuXG4iCgkJCX0KCQldLAoJCSJmaWxlcy5jb21tZW50cy5lZGl0IjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogZmlsZXM6d3JpdGU6dXNlclxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJmaWxlIiwKCQkJCSJleGFtcGxlIjogIkYxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRmlsZSBjb250YWluaW5nIHRoZSBjb21tZW50IHRvIGVkaXQuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImlkIiwKCQkJCSJleGFtcGxlIjogIkZjMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRoZSBjb21tZW50IHRvIGVkaXQuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNvbW1lbnQiLAoJCQkJImV4YW1wbGUiOiAiRXZlcnlvbmUgc2hvdWxkIHRha2UgYSBtb21lbnQgdG8gcmVhZCB0aGlzIGZpbGUsIHNlcmlvdXNseS4iLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUZXh0IG9mIHRoZSBjb21tZW50IHRvIGVkaXQuXG4iCgkJCX0KCQldLAoJCSJmaWxlcy5kZWxldGUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBmaWxlczp3cml0ZTp1c2VyXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImZpbGUiLAoJCQkJImV4YW1wbGUiOiAiwqAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJRCBvZiBmaWxlIHRvIGRlbGV0ZS5cbiIKCQkJfQoJCV0sCgkJImZpbGVzLmluZm8iOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBmaWxlczpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImZpbGUiLAoJCQkJImV4YW1wbGUiOiAiRjIxNDc0ODM4NjIiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJTcGVjaWZ5IGEgZmlsZSBieSBwcm92aWRpbmcgaXRzIElELlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjb3VudCIsCgkJCQkiZXhhbXBsZSI6ICIyMCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MTAwIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgaXRlbXMgdG8gcmV0dXJuIHBlciBwYWdlLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJwYWdlIiwKCQkJCSJleGFtcGxlIjogIjIiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTEiLAoJCQkJImRlc2NyaXB0aW9uIjogIlBhZ2UgbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuIgoJCQl9CgkJXSwKCQkiZmlsZXMubGlzdCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGZpbGVzOnJlYWRcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidXNlciIsCgkJCQkiZXhhbXBsZSI6ICJVMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbHRlciBmaWxlcyBjcmVhdGVkIGJ5IGEgc2luZ2xlIHVzZXIuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWx0ZXIgZmlsZXMgYXBwZWFyaW5nIGluIGEgc3BlY2lmaWMgY2hhbm5lbCwgaW5kaWNhdGVkIGJ5IGl0cyBJRC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidHNfZnJvbSIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTAiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbHRlciBmaWxlcyBjcmVhdGVkIGFmdGVyIHRoaXMgdGltZXN0YW1wIChpbmNsdXNpdmUpLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0c190byIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PW5vdyIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRmlsdGVyIGZpbGVzIGNyZWF0ZWQgYmVmb3JlIHRoaXMgdGltZXN0YW1wIChpbmNsdXNpdmUpLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0eXBlcyIsCgkJCQkiZXhhbXBsZSI6ICJpbWFnZXMiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PWFsbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRmlsdGVyIGZpbGVzIGJ5IHR5cGU6XG5cblxuYWxsIC0gQWxsIGZpbGVzXG5zcGFjZXMgLSBQb3N0c1xuc25pcHBldHMgLSBTbmlwcGV0c1xuaW1hZ2VzIC0gSW1hZ2UgZmlsZXNcbmdkb2NzIC0gR29vZ2xlIGRvY3NcbnppcHMgLSBaaXAgZmlsZXNcbnBkZnMgLSBQREYgZmlsZXNcblxuXG5Zb3UgY2FuIHBhc3MgbXVsdGlwbGUgdmFsdWVzIGluIHRoZSB0eXBlcyBhcmd1bWVudCwgbGlrZSB0eXBlcz1zcGFjZXMsc25pcHBldHMuVGhlIGRlZmF1bHQgdmFsdWUgaXMgYWxsLCB3aGljaCBkb2VzIG5vdCBmaWx0ZXIgdGhlIGxpc3QuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNvdW50IiwKCQkJCSJleGFtcGxlIjogIjIwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0xMDAiLAoJCQkJImRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBpdGVtcyB0byByZXR1cm4gcGVyIHBhZ2UuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInBhZ2UiLAoJCQkJImV4YW1wbGUiOiAiMiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MSIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUGFnZSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4iCgkJCX0KCQldLAoJCSJmaWxlcy5yZXZva2VQdWJsaWNVUkwiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBmaWxlczp3cml0ZTp1c2VyXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImZpbGUiLAoJCQkJImV4YW1wbGUiOiAiRjEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWxlIHRvIHJldm9rZVxuIgoJCQl9CgkJXSwKCQkiZmlsZXMuc2hhcmVkUHVibGljVVJMIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogZmlsZXM6d3JpdGU6dXNlclxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJmaWxlIiwKCQkJCSJleGFtcGxlIjogIkYxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRmlsZSB0byBzaGFyZVxuIgoJCQl9CgkJXSwKCQkiZmlsZXMudXBsb2FkIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogZmlsZXM6d3JpdGU6dXNlclxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJmaWxlIiwKCQkJCSJleGFtcGxlIjogIi4uLiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgY29udGVudHMgdmlhIG11bHRpcGFydC9mb3JtLWRhdGEuIElmIG9taXR0aW5nIHRoaXMgcGFyYW1ldGVyLCB5b3UgbXVzdCBzdWJtaXQgY29udGVudC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY29udGVudCIsCgkJCQkiZXhhbXBsZSI6ICIuLi4iLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWxlIGNvbnRlbnRzIHZpYSBhIFBPU1QgdmFyaWFibGUuIElmIG9taXR0aW5nIHRoaXMgcGFyYW1ldGVyLCB5b3UgbXVzdCBwcm92aWRlIGEgZmlsZS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZXR5cGUiLAoJCQkJImV4YW1wbGUiOiAicGhwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQSBmaWxlIHR5cGUgaWRlbnRpZmllci5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZW5hbWUiLAoJCQkJImV4YW1wbGUiOiAiZm9vLnR4dCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGVuYW1lIG9mIGZpbGUuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInRpdGxlIiwKCQkJCSJleGFtcGxlIjogIk15IEZpbGUiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaXRsZSBvZiBmaWxlLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJpbml0aWFsX2NvbW1lbnQiLAoJCQkJImV4YW1wbGUiOiAiQmVzdCEiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJbml0aWFsIGNvbW1lbnQgdG8gYWRkIHRvIGZpbGUuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWxzIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ29tbWEtc2VwYXJhdGVkIGxpc3Qgb2YgY2hhbm5lbCBuYW1lcyBvciBJRHMgd2hlcmUgdGhlIGZpbGUgd2lsbCBiZSBzaGFyZWQuXG4iCgkJCX0KCQldLAoJCSJncm91cHMuYXJjaGl2ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkcxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUHJpdmF0ZSBjaGFubmVsIHRvIGFyY2hpdmVcbiIKCQkJfQoJCV0sCgkJImdyb3Vwcy5jbG9zZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkcxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUHJpdmF0ZSBjaGFubmVsIHRvIGNsb3NlLlxuIgoJCQl9CgkJXSwKCQkiZ3JvdXBzLmNyZWF0ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJuYW1lIiwKCQkJCSJleGFtcGxlIjogIsKgIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiTmFtZSBvZiBwcml2YXRlIGNoYW5uZWwgdG8gY3JlYXRlXG4iCgkJCX0KCQldLAoJCSJncm91cHMuY3JlYXRlQ2hpbGQiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBncm91cHM6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJHMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlByaXZhdGUgY2hhbm5lbCB0byBjbG9uZSBhbmQgYXJjaGl2ZS5cbiIKCQkJfQoJCV0sCgkJImdyb3Vwcy5oaXN0b3J5IjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogZ3JvdXBzOmhpc3RvcnlcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJHMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlByaXZhdGUgY2hhbm5lbCB0byBmZXRjaCBoaXN0b3J5IGZvci5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAibGF0ZXN0IiwKCQkJCSJleGFtcGxlIjogIjEyMzQ1Njc4OTAuMTIzNDU2IiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD1ub3ciLAoJCQkJImRlc2NyaXB0aW9uIjogIkVuZCBvZiB0aW1lIHJhbmdlIG9mIG1lc3NhZ2VzIHRvIGluY2x1ZGUgaW4gcmVzdWx0cy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAib2xkZXN0IiwKCQkJCSJleGFtcGxlIjogIjEyMzQ1Njc4OTAuMTIzNDU2IiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0wIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJTdGFydCBvZiB0aW1lIHJhbmdlIG9mIG1lc3NhZ2VzIHRvIGluY2x1ZGUgaW4gcmVzdWx0cy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiaW5jbHVzaXZlIiwKCQkJCSJleGFtcGxlIjogIjEiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTAiLAoJCQkJImRlc2NyaXB0aW9uIjogIkluY2x1ZGUgbWVzc2FnZXMgd2l0aCBsYXRlc3Qgb3Igb2xkZXN0IHRpbWVzdGFtcCBpbiByZXN1bHRzLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjb3VudCIsCgkJCQkiZXhhbXBsZSI6ICIxMDAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTEwMCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIG1lc3NhZ2VzIHRvIHJldHVybiwgYmV0d2VlbiAxIGFuZCAxMDAwLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ1bnJlYWRzIiwKCQkJCSJleGFtcGxlIjogIjEiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTAiLAoJCQkJImRlc2NyaXB0aW9uIjogIkluY2x1ZGUgdW5yZWFkX2NvdW50X2Rpc3BsYXkgaW4gdGhlIG91dHB1dD9cbiIKCQkJfQoJCV0sCgkJImdyb3Vwcy5pbmZvIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogZ3JvdXBzOnJlYWRcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJHMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlByaXZhdGUgY2hhbm5lbCB0byBnZXQgaW5mbyBvblxuIgoJCQl9CgkJXSwKCQkiZ3JvdXBzLmludml0ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkcxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUHJpdmF0ZSBjaGFubmVsIHRvIGludml0ZSB1c2VyIHRvLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ1c2VyIiwKCQkJCSJleGFtcGxlIjogIlUxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVXNlciB0byBpbnZpdGUuXG4iCgkJCX0KCQldLAoJCSJncm91cHMua2ljayI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkcxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUHJpdmF0ZSBjaGFubmVsIHRvIHJlbW92ZSB1c2VyIGZyb20uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXIiLAoJCQkJImV4YW1wbGUiOiAiVTEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJVc2VyIHRvIHJlbW92ZSBmcm9tIHByaXZhdGUgY2hhbm5lbC5cbiIKCQkJfQoJCV0sCgkJImdyb3Vwcy5sZWF2ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkcxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUHJpdmF0ZSBjaGFubmVsIHRvIGxlYXZlXG4iCgkJCX0KCQldLAoJCSJncm91cHMubGlzdCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3VwczpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImV4Y2x1ZGVfYXJjaGl2ZWQiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRG9uJ3QgcmV0dXJuIGFyY2hpdmVkIHByaXZhdGUgY2hhbm5lbHMuXG4iCgkJCX0KCQldLAoJCSJncm91cHMubWFyayI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkcxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUHJpdmF0ZSBjaGFubmVsIHRvIHNldCByZWFkaW5nIGN1cnNvciBpbi5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidHMiLAoJCQkJImV4YW1wbGUiOiAiMTIzNDU2Nzg5MC4xMjM0NTYiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgb2YgdGhlIG1vc3QgcmVjZW50bHkgc2VlbiBtZXNzYWdlLlxuIgoJCQl9CgkJXSwKCQkiZ3JvdXBzLm9wZW4iOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBncm91cHM6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJHMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlByaXZhdGUgY2hhbm5lbCB0byBvcGVuLlxuIgoJCQl9CgkJXSwKCQkiZ3JvdXBzLnJlbmFtZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkcxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUHJpdmF0ZSBjaGFubmVsIHRvIHJlbmFtZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJuYW1lIiwKCQkJCSJleGFtcGxlIjogIsKgIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiTmV3IG5hbWUgZm9yIHByaXZhdGUgY2hhbm5lbC5cbiIKCQkJfQoJCV0sCgkJImdyb3Vwcy5yZXBsaWVzIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogZ3JvdXBzOmhpc3RvcnlcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlByaXZhdGUgY2hhbm5lbCB0byBmZXRjaCB0aHJlYWQgZnJvbVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0aHJlYWRfdHMiLAoJCQkJImV4YW1wbGUiOiAiMTIzNDU2Nzg5MC4xMjM0NTYiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJVbmlxdWUgaWRlbnRpZmllciBvZiBhIHRocmVhZCdzIHBhcmVudCBtZXNzYWdlXG4iCgkJCX0KCQldLAoJCSJncm91cHMuc2V0UHVycG9zZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkcxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUHJpdmF0ZSBjaGFubmVsIHRvIHNldCB0aGUgcHVycG9zZSBvZlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJwdXJwb3NlIiwKCQkJCSJleGFtcGxlIjogIk15IFB1cnBvc2UiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaGUgbmV3IHB1cnBvc2VcbiIKCQkJfQoJCV0sCgkJImdyb3Vwcy5zZXRUb3BpYyI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkcxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUHJpdmF0ZSBjaGFubmVsIHRvIHNldCB0aGUgdG9waWMgb2ZcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidG9waWMiLAoJCQkJImV4YW1wbGUiOiAiTXkgVG9waWMiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaGUgbmV3IHRvcGljXG4iCgkJCX0KCQldLAoJCSJncm91cHMudW5hcmNoaXZlIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogZ3JvdXBzOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiRzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJQcml2YXRlIGNoYW5uZWwgdG8gdW5hcmNoaXZlXG4iCgkJCX0KCQldLAoJCSJpbS5jbG9zZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGltOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiRDEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJEaXJlY3QgbWVzc2FnZSBjaGFubmVsIHRvIGNsb3NlLlxuIgoJCQl9CgkJXSwKCQkiaW0uaGlzdG9yeSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGltOmhpc3RvcnlcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJEMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkRpcmVjdCBtZXNzYWdlIGNoYW5uZWwgdG8gZmV0Y2ggaGlzdG9yeSBmb3IuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImxhdGVzdCIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkwLjEyMzQ1NiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9bm93IiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJFbmQgb2YgdGltZSByYW5nZSBvZiBtZXNzYWdlcyB0byBpbmNsdWRlIGluIHJlc3VsdHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogIm9sZGVzdCIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkwLjEyMzQ1NiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiU3RhcnQgb2YgdGltZSByYW5nZSBvZiBtZXNzYWdlcyB0byBpbmNsdWRlIGluIHJlc3VsdHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImluY2x1c2l2ZSIsCgkJCQkiZXhhbXBsZSI6ICIxIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0wIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJbmNsdWRlIG1lc3NhZ2VzIHdpdGggbGF0ZXN0IG9yIG9sZGVzdCB0aW1lc3RhbXAgaW4gcmVzdWx0cy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY291bnQiLAoJCQkJImV4YW1wbGUiOiAiMTAwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0xMDAiLAoJCQkJImRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBtZXNzYWdlcyB0byByZXR1cm4sIGJldHdlZW4gMSBhbmQgMTAwMC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidW5yZWFkcyIsCgkJCQkiZXhhbXBsZSI6ICIxIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0wIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJbmNsdWRlIHVucmVhZF9jb3VudF9kaXNwbGF5IGluIHRoZSBvdXRwdXQ/XG4iCgkJCX0KCQldLAoJCSJpbS5saXN0IjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogaW06cmVhZFxuIgoJCQl9CgkJXSwKCQkiaW0ubWFyayI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGltOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiRDEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJEaXJlY3QgbWVzc2FnZSBjaGFubmVsIHRvIHNldCByZWFkaW5nIGN1cnNvciBpbi5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidHMiLAoJCQkJImV4YW1wbGUiOiAiMTIzNDU2Nzg5MC4xMjM0NTYiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgb2YgdGhlIG1vc3QgcmVjZW50bHkgc2VlbiBtZXNzYWdlLlxuIgoJCQl9CgkJXSwKCQkiaW0ub3BlbiI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGltOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXIiLAoJCQkJImV4YW1wbGUiOiAiVTEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJVc2VyIHRvIG9wZW4gYSBkaXJlY3QgbWVzc2FnZSBjaGFubmVsIHdpdGguXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInJldHVybl9pbSIsCgkJCQkiZXhhbXBsZSI6ICLCoCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkJvb2xlYW4sIGluZGljYXRlcyB5b3Ugd2FudCB0aGUgZnVsbCBJTSBjaGFubmVsIGRlZmluaXRpb24gaW4gdGhlIHJlc3BvbnNlLlxuIgoJCQl9CgkJXSwKCQkiaW0ucmVwbGllcyI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGltOmhpc3RvcnlcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkRpcmVjdCBtZXNzYWdlIGNoYW5uZWwgdG8gZmV0Y2ggdGhyZWFkIGZyb21cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidGhyZWFkX3RzIiwKCQkJCSJleGFtcGxlIjogIjEyMzQ1Njc4OTAuMTIzNDU2IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGlkZW50aWZpZXIgb2YgYSB0aHJlYWQncyBwYXJlbnQgbWVzc2FnZVxuIgoJCQl9CgkJXSwKCQkibXBpbS5jbG9zZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IG1waW06d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJHMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIk1QSU0gdG8gY2xvc2UuXG4iCgkJCX0KCQldLAoJCSJtcGltLmhpc3RvcnkiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBtcGltOmhpc3RvcnlcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJHMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIk11bHRpcGFydHkgZGlyZWN0IG1lc3NhZ2UgdG8gZmV0Y2ggaGlzdG9yeSBmb3IuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImxhdGVzdCIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkwLjEyMzQ1NiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9bm93IiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJFbmQgb2YgdGltZSByYW5nZSBvZiBtZXNzYWdlcyB0byBpbmNsdWRlIGluIHJlc3VsdHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogIm9sZGVzdCIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkwLjEyMzQ1NiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiU3RhcnQgb2YgdGltZSByYW5nZSBvZiBtZXNzYWdlcyB0byBpbmNsdWRlIGluIHJlc3VsdHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImluY2x1c2l2ZSIsCgkJCQkiZXhhbXBsZSI6ICIxIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0wIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJbmNsdWRlIG1lc3NhZ2VzIHdpdGggbGF0ZXN0IG9yIG9sZGVzdCB0aW1lc3RhbXAgaW4gcmVzdWx0cy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY291bnQiLAoJCQkJImV4YW1wbGUiOiAiMTAwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0xMDAiLAoJCQkJImRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBtZXNzYWdlcyB0byByZXR1cm4sIGJldHdlZW4gMSBhbmQgMTAwMC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidW5yZWFkcyIsCgkJCQkiZXhhbXBsZSI6ICIxIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0wIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJbmNsdWRlIHVucmVhZF9jb3VudF9kaXNwbGF5IGluIHRoZSBvdXRwdXQ/XG4iCgkJCX0KCQldLAoJCSJtcGltLmxpc3QiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBtcGltOnJlYWRcbiIKCQkJfQoJCV0sCgkJIm1waW0ubWFyayI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IG1waW06d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJHMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIm11bHRpcGFydHkgZGlyZWN0IG1lc3NhZ2UgY2hhbm5lbCB0byBzZXQgcmVhZGluZyBjdXJzb3IgaW4uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInRzIiwKCQkJCSJleGFtcGxlIjogIjEyMzQ1Njc4OTAuMTIzNDU2IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVGltZXN0YW1wIG9mIHRoZSBtb3N0IHJlY2VudGx5IHNlZW4gbWVzc2FnZS5cbiIKCQkJfQoJCV0sCgkJIm1waW0ub3BlbiI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IG1waW06d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidXNlcnMiLAoJCQkJImV4YW1wbGUiOiAiVTEyMzQ1Njc4OTAsVTIzNDU2Nzg5MDEsVTM0NTY3ODkwMTIiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDb21tYSBzZXBhcmF0ZWQgbGlzdHMgb2YgdXNlcnMuICBUaGUgb3JkZXJpbmcgb2YgdGhlIHVzZXJzIGlzIHByZXNlcnZlZCB3aGVuZXZlciBhIE1QSU0gZ3JvdXAgaXMgcmV0dXJuZWQuXG4iCgkJCX0KCQldLAoJCSJtcGltLnJlcGxpZXMiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBtcGltOmhpc3RvcnlcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIk11bHRpcGFydHkgZGlyZWN0IG1lc3NhZ2UgY2hhbm5lbCB0byBmZXRjaCB0aHJlYWQgZnJvbS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidGhyZWFkX3RzIiwKCQkJCSJleGFtcGxlIjogIjEyMzQ1Njc4OTAuMTIzNDU2IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGlkZW50aWZpZXIgb2YgYSB0aHJlYWQncyBwYXJlbnQgbWVzc2FnZS5cbiIKCQkJfQoJCV0sCgkJIm9hdXRoLmFjY2VzcyI6IFsKCQkJewoJCQkJIm5hbWUiOiAiY2xpZW50X2lkIiwKCQkJCSJleGFtcGxlIjogIjRiMzllOS03NTJjNCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIklzc3VlZCB3aGVuIHlvdSBjcmVhdGVkIHlvdXIgYXBwbGljYXRpb24uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNsaWVudF9zZWNyZXQiLAoJCQkJImV4YW1wbGUiOiAiMzNmZWEwMTEzZjViMSIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIklzc3VlZCB3aGVuIHlvdSBjcmVhdGVkIHlvdXIgYXBwbGljYXRpb24uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNvZGUiLAoJCQkJImV4YW1wbGUiOiAiY2NkYWE3MmFkIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVGhlIGNvZGUgcGFyYW0gcmV0dXJuZWQgdmlhIHRoZSBPQXV0aCBjYWxsYmFjay5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAicmVkaXJlY3RfdXJpIiwKCQkJCSJleGFtcGxlIjogImh0dHA6Ly9leGFtcGxlLmNvbSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRoaXMgbXVzdCBtYXRjaCB0aGUgb3JpZ2luYWxseSBzdWJtaXR0ZWQgVVJJIChpZiBvbmUgd2FzIHNlbnQpLlxuIgoJCQl9CgkJXSwKCQkicGlucy5hZGQiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBwaW5zOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFubmVsIHRvIHBpbiB0aGUgaXRlbSBpbi5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZSIsCgkJCQkiZXhhbXBsZSI6ICJGMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgdG8gcGluLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJmaWxlX2NvbW1lbnQiLAoJCQkJImV4YW1wbGUiOiAiRmMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRmlsZSBjb21tZW50IHRvIHBpbi5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidGltZXN0YW1wIiwKCQkJCSJleGFtcGxlIjogIjEyMzQ1Njc4OTAuMTIzNDU2IiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVGltZXN0YW1wIG9mIHRoZSBtZXNzYWdlIHRvIHBpbi5cbiIKCQkJfQoJCV0sCgkJInBpbnMubGlzdCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHBpbnM6cmVhZFxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ2hhbm5lbCB0byBnZXQgcGlubmVkIGl0ZW1zIGZvci5cbiIKCQkJfQoJCV0sCgkJInBpbnMucmVtb3ZlIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogcGluczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ2hhbm5lbCB3aGVyZSB0aGUgaXRlbSBpcyBwaW5uZWQgdG8uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImZpbGUiLAoJCQkJImV4YW1wbGUiOiAiRjEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWxlIHRvIHVuLXBpbi5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZV9jb21tZW50IiwKCQkJCSJleGFtcGxlIjogIkZjMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgY29tbWVudCB0byB1bi1waW4uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInRpbWVzdGFtcCIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkwLjEyMzQ1NiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCBvZiB0aGUgbWVzc2FnZSB0byB1bi1waW4uXG4iCgkJCX0KCQldLAoJCSJyZWFjdGlvbnMuYWRkIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogcmVhY3Rpb25zOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogIm5hbWUiLAoJCQkJImV4YW1wbGUiOiAidGh1bWJzdXAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJSZWFjdGlvbiAoZW1vamkpIG5hbWUuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImZpbGUiLAoJCQkJImV4YW1wbGUiOiAiRjEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWxlIHRvIGFkZCByZWFjdGlvbiB0by5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZV9jb21tZW50IiwKCQkJCSJleGFtcGxlIjogIkZjMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgY29tbWVudCB0byBhZGQgcmVhY3Rpb24gdG8uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFubmVsIHdoZXJlIHRoZSBtZXNzYWdlIHRvIGFkZCByZWFjdGlvbiB0byB3YXMgcG9zdGVkLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0aW1lc3RhbXAiLAoJCQkJImV4YW1wbGUiOiAiMTIzNDU2Nzg5MC4xMjM0NTYiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgb2YgdGhlIG1lc3NhZ2UgdG8gYWRkIHJlYWN0aW9uIHRvLlxuIgoJCQl9CgkJXSwKCQkicmVhY3Rpb25zLmdldCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHJlYWN0aW9uczpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImZpbGUiLAoJCQkJImV4YW1wbGUiOiAiRjEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWxlIHRvIGdldCByZWFjdGlvbnMgZm9yLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJmaWxlX2NvbW1lbnQiLAoJCQkJImV4YW1wbGUiOiAiRmMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRmlsZSBjb21tZW50IHRvIGdldCByZWFjdGlvbnMgZm9yLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ2hhbm5lbCB3aGVyZSB0aGUgbWVzc2FnZSB0byBnZXQgcmVhY3Rpb25zIGZvciB3YXMgcG9zdGVkLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0aW1lc3RhbXAiLAoJCQkJImV4YW1wbGUiOiAiMTIzNDU2Nzg5MC4xMjM0NTYiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgb2YgdGhlIG1lc3NhZ2UgdG8gZ2V0IHJlYWN0aW9ucyBmb3IuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImZ1bGwiLAoJCQkJImV4YW1wbGUiOiAiwqAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJZiB0cnVlIGFsd2F5cyByZXR1cm4gdGhlIGNvbXBsZXRlIHJlYWN0aW9uIGxpc3QuXG4iCgkJCX0KCQldLAoJCSJyZWFjdGlvbnMubGlzdCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHJlYWN0aW9uczpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXIiLAoJCQkJImV4YW1wbGUiOiAiVTEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJTaG93IHJlYWN0aW9ucyBtYWRlIGJ5IHRoaXMgdXNlci4gRGVmYXVsdHMgdG8gdGhlIGF1dGhlZCB1c2VyLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJmdWxsIiwKCQkJCSJleGFtcGxlIjogIsKgIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiSWYgdHJ1ZSBhbHdheXMgcmV0dXJuIHRoZSBjb21wbGV0ZSByZWFjdGlvbiBsaXN0LlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjb3VudCIsCgkJCQkiZXhhbXBsZSI6ICIyMCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MTAwIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgaXRlbXMgdG8gcmV0dXJuIHBlciBwYWdlLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJwYWdlIiwKCQkJCSJleGFtcGxlIjogIjIiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTEiLAoJCQkJImRlc2NyaXB0aW9uIjogIlBhZ2UgbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuIgoJCQl9CgkJXSwKCQkicmVhY3Rpb25zLnJlbW92ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHJlYWN0aW9uczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJuYW1lIiwKCQkJCSJleGFtcGxlIjogInRodW1ic3VwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUmVhY3Rpb24gKGVtb2ppKSBuYW1lLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJmaWxlIiwKCQkJCSJleGFtcGxlIjogIkYxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRmlsZSB0byByZW1vdmUgcmVhY3Rpb24gZnJvbS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZV9jb21tZW50IiwKCQkJCSJleGFtcGxlIjogIkZjMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgY29tbWVudCB0byByZW1vdmUgcmVhY3Rpb24gZnJvbS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbCIsCgkJCQkiZXhhbXBsZSI6ICJDMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNoYW5uZWwgd2hlcmUgdGhlIG1lc3NhZ2UgdG8gcmVtb3ZlIHJlYWN0aW9uIGZyb20gd2FzIHBvc3RlZC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidGltZXN0YW1wIiwKCQkJCSJleGFtcGxlIjogIjEyMzQ1Njc4OTAuMTIzNDU2IiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVGltZXN0YW1wIG9mIHRoZSBtZXNzYWdlIHRvIHJlbW92ZSByZWFjdGlvbiBmcm9tLlxuIgoJCQl9CgkJXSwKCQkicmVtaW5kZXJzLmFkZCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHJlbWluZGVyczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0ZXh0IiwKCQkJCSJleGFtcGxlIjogImVhdCBhIGJhbmFuYSIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRoZSBjb250ZW50IG9mIHRoZSByZW1pbmRlclxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0aW1lIiwKCQkJCSJleGFtcGxlIjogIjE2MDIyODgwMDAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJXaGVuIHRoaXMgcmVtaW5kZXIgc2hvdWxkIGhhcHBlbjogdGhlIFVuaXggdGltZXN0YW1wICh1cCB0byBmaXZlIHllYXJzIGZyb20gbm93KSwgdGhlIG51bWJlciBvZiBzZWNvbmRzIHVudGlsIHRoZSByZW1pbmRlciAoaWYgd2l0aGluIDI0IGhvdXJzKSwgb3IgYSBuYXR1cmFsIGxhbmd1YWdlIGRlc2NyaXB0aW9uIChFeC4gXCJpbiAxNSBtaW51dGVzLFwiIG9yIFwiZXZlcnkgVGh1cnNkYXlcIilcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidXNlciIsCgkJCQkiZXhhbXBsZSI6ICJVMTg4ODg4ODgiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaGUgdXNlciB3aG8gd2lsbCByZWNlaXZlIHRoZSByZW1pbmRlci4gSWYgbm8gdXNlciBpcyBzcGVjaWZpZWQsIHRoZSByZW1pbmRlciB3aWxsIGdvIHRvIHVzZXIgd2hvIGNyZWF0ZWQgaXQuXG4iCgkJCX0KCQldLAoJCSJyZW1pbmRlcnMuY29tcGxldGUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiByZW1pbmRlcnM6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAicmVtaW5kZXIiLAoJCQkJImV4YW1wbGUiOiAiUm0xMjM0NTY3OCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRoZSBJRCBvZiB0aGUgcmVtaW5kZXIgdG8gYmUgbWFya2VkIGFzIGNvbXBsZXRlXG4iCgkJCX0KCQldLAoJCSJyZW1pbmRlcnMuZGVsZXRlIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogcmVtaW5kZXJzOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInJlbWluZGVyIiwKCQkJCSJleGFtcGxlIjogIlJtMTIzNDU2NzgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaGUgSUQgb2YgdGhlIHJlbWluZGVyXG4iCgkJCX0KCQldLAoJCSJyZW1pbmRlcnMuaW5mbyI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHJlbWluZGVyczpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInJlbWluZGVyIiwKCQkJCSJleGFtcGxlIjogIlJtMjM0NTY3ODkiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaGUgSUQgb2YgdGhlIHJlbWluZGVyXG4iCgkJCX0KCQldLAoJCSJyZW1pbmRlcnMubGlzdCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHJlbWluZGVyczpyZWFkXG4iCgkJCX0KCQldLAoJCSJydG0uc3RhcnQiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBjbGllbnRcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAic2ltcGxlX2xhdGVzdCIsCgkJCQkiZXhhbXBsZSI6ICLCoCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlJldHVybiB0aW1lc3RhbXAgb25seSBmb3IgbGF0ZXN0IG1lc3NhZ2Ugb2JqZWN0IG9mIGVhY2ggY2hhbm5lbCAoaW1wcm92ZXMgcGVyZm9ybWFuY2UpLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJub191bnJlYWRzIiwKCQkJCSJleGFtcGxlIjogIsKgIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiU2tpcCB1bnJlYWQgY291bnRzIGZvciBlYWNoIGNoYW5uZWwgKGltcHJvdmVzIHBlcmZvcm1hbmNlKS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAibXBpbV9hd2FyZSIsCgkJCQkiZXhhbXBsZSI6ICLCoCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlJldHVybnMgTVBJTXMgdG8gdGhlIGNsaWVudCBpbiB0aGUgQVBJIHJlc3BvbnNlLlxuIgoJCQl9CgkJXSwKCQkic2VhcmNoLmFsbCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHNlYXJjaDpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInF1ZXJ5IiwKCQkJCSJleGFtcGxlIjogInBpY2tsZWZhY2UiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJTZWFyY2ggcXVlcnkuIE1heSBjb250YWlucyBib29sZWFucywgZXRjLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJzb3J0IiwKCQkJCSJleGFtcGxlIjogInRpbWVzdGFtcCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9c2NvcmUiLAoJCQkJImRlc2NyaXB0aW9uIjogIlJldHVybiBtYXRjaGVzIHNvcnRlZCBieSBlaXRoZXIgc2NvcmUgb3IgdGltZXN0YW1wLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJzb3J0X2RpciIsCgkJCQkiZXhhbXBsZSI6ICJhc2MiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PWRlc2MiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNoYW5nZSBzb3J0IGRpcmVjdGlvbiB0byBhc2NlbmRpbmcgKGFzYykgb3IgZGVzY2VuZGluZyAoZGVzYykuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImhpZ2hsaWdodCIsCgkJCQkiZXhhbXBsZSI6ICIxIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUGFzcyBhIHZhbHVlIG9mIDEgdG8gZW5hYmxlIHF1ZXJ5IGhpZ2hsaWdodCBtYXJrZXJzIChzZWUgYmVsb3cpLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjb3VudCIsCgkJCQkiZXhhbXBsZSI6ICIyMCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MjAiLAoJCQkJImRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBpdGVtcyB0byByZXR1cm4gcGVyIHBhZ2UuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInBhZ2UiLAoJCQkJImV4YW1wbGUiOiAiMiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MSIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUGFnZSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4iCgkJCX0KCQldLAoJCSJzZWFyY2guZmlsZXMiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBzZWFyY2g6cmVhZFxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJxdWVyeSIsCgkJCQkiZXhhbXBsZSI6ICJwaWNrbGVmYWNlIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiU2VhcmNoIHF1ZXJ5LiBNYXkgY29udGFpbiBib29sZWFucywgZXRjLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJzb3J0IiwKCQkJCSJleGFtcGxlIjogInRpbWVzdGFtcCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9c2NvcmUiLAoJCQkJImRlc2NyaXB0aW9uIjogIlJldHVybiBtYXRjaGVzIHNvcnRlZCBieSBlaXRoZXIgc2NvcmUgb3IgdGltZXN0YW1wLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJzb3J0X2RpciIsCgkJCQkiZXhhbXBsZSI6ICJhc2MiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PWRlc2MiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNoYW5nZSBzb3J0IGRpcmVjdGlvbiB0byBhc2NlbmRpbmcgKGFzYykgb3IgZGVzY2VuZGluZyAoZGVzYykuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImhpZ2hsaWdodCIsCgkJCQkiZXhhbXBsZSI6ICIxIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUGFzcyBhIHZhbHVlIG9mIDEgdG8gZW5hYmxlIHF1ZXJ5IGhpZ2hsaWdodCBtYXJrZXJzIChzZWUgYmVsb3cpLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjb3VudCIsCgkJCQkiZXhhbXBsZSI6ICIyMCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MjAiLAoJCQkJImRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBpdGVtcyB0byByZXR1cm4gcGVyIHBhZ2UuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInBhZ2UiLAoJCQkJImV4YW1wbGUiOiAiMiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MSIsCgkJCQkiZGVzY3JpcHRpb24iOiAiUGFnZSBudW1iZXIgb2YgcmVzdWx0cyB0byByZXR1cm4uXG4iCgkJCX0KCQldLAoJCSJzZWFyY2gubWVzc2FnZXMiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiBzZWFyY2g6cmVhZFxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJxdWVyeSIsCgkJCQkiZXhhbXBsZSI6ICJwaWNrbGVmYWNlIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiU2VhcmNoIHF1ZXJ5LiBNYXkgY29udGFpbnMgYm9vbGVhbnMsIGV0Yy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAic29ydCIsCgkJCQkiZXhhbXBsZSI6ICJ0aW1lc3RhbXAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PXNjb3JlIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJSZXR1cm4gbWF0Y2hlcyBzb3J0ZWQgYnkgZWl0aGVyIHNjb3JlIG9yIHRpbWVzdGFtcC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAic29ydF9kaXIiLAoJCQkJImV4YW1wbGUiOiAiYXNjIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD1kZXNjIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFuZ2Ugc29ydCBkaXJlY3Rpb24gdG8gYXNjZW5kaW5nIChhc2MpIG9yIGRlc2NlbmRpbmcgKGRlc2MpLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJoaWdobGlnaHQiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlBhc3MgYSB2YWx1ZSBvZiAxIHRvIGVuYWJsZSBxdWVyeSBoaWdobGlnaHQgbWFya2VycyAoc2VlIGJlbG93KS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY291bnQiLAoJCQkJImV4YW1wbGUiOiAiMjAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTIwIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgaXRlbXMgdG8gcmV0dXJuIHBlciBwYWdlLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJwYWdlIiwKCQkJCSJleGFtcGxlIjogIjIiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTEiLAoJCQkJImRlc2NyaXB0aW9uIjogIlBhZ2UgbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuIgoJCQl9CgkJXSwKCQkic3RhcnMuYWRkIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogc3RhcnM6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZSIsCgkJCQkiZXhhbXBsZSI6ICJGMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgdG8gYWRkIHN0YXIgdG8uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImZpbGVfY29tbWVudCIsCgkJCQkiZXhhbXBsZSI6ICJGYzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWxlIGNvbW1lbnQgdG8gYWRkIHN0YXIgdG8uXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWwiLAoJCQkJImV4YW1wbGUiOiAiQzEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJDaGFubmVsIHRvIGFkZCBzdGFyIHRvLCBvciBjaGFubmVsIHdoZXJlIHRoZSBtZXNzYWdlIHRvIGFkZCBzdGFyIHRvIHdhcyBwb3N0ZWQgKHVzZWQgd2l0aCB0aW1lc3RhbXApLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ0aW1lc3RhbXAiLAoJCQkJImV4YW1wbGUiOiAiMTIzNDU2Nzg5MC4xMjM0NTYiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgb2YgdGhlIG1lc3NhZ2UgdG8gYWRkIHN0YXIgdG8uXG4iCgkJCX0KCQldLAoJCSJzdGFycy5saXN0IjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogc3RhcnM6cmVhZFxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjb3VudCIsCgkJCQkiZXhhbXBsZSI6ICIyMCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MTAwIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgaXRlbXMgdG8gcmV0dXJuIHBlciBwYWdlLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJwYWdlIiwKCQkJCSJleGFtcGxlIjogIjIiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTEiLAoJCQkJImRlc2NyaXB0aW9uIjogIlBhZ2UgbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuIgoJCQl9CgkJXSwKCQkic3RhcnMucmVtb3ZlIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogc3RhcnM6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZSIsCgkJCQkiZXhhbXBsZSI6ICJGMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgdG8gcmVtb3ZlIHN0YXIgZnJvbS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiZmlsZV9jb21tZW50IiwKCQkJCSJleGFtcGxlIjogIkZjMTIzNDU2Nzg5MCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbGUgY29tbWVudCB0byByZW1vdmUgc3RhciBmcm9tLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjaGFubmVsIiwKCQkJCSJleGFtcGxlIjogIkMxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQ2hhbm5lbCB0byByZW1vdmUgc3RhciBmcm9tLCBvciBjaGFubmVsIHdoZXJlIHRoZSBtZXNzYWdlIHRvIHJlbW92ZSBzdGFyIGZyb20gd2FzIHBvc3RlZCAodXNlZCB3aXRoIHRpbWVzdGFtcCkuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInRpbWVzdGFtcCIsCgkJCQkiZXhhbXBsZSI6ICIxMjM0NTY3ODkwLjEyMzQ1NiIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCBvZiB0aGUgbWVzc2FnZSB0byByZW1vdmUgc3RhciBmcm9tLlxuIgoJCQl9CgkJXSwKCQkidGVhbS5hY2Nlc3NMb2dzIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogYWRtaW5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY291bnQiLAoJCQkJImV4YW1wbGUiOiAiMjAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTEwMCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIGl0ZW1zIHRvIHJldHVybiBwZXIgcGFnZS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAicGFnZSIsCgkJCQkiZXhhbXBsZSI6ICIyIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCwgZGVmYXVsdD0xIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJQYWdlIG51bWJlciBvZiByZXN1bHRzIHRvIHJldHVybi5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiYmVmb3JlIiwKCQkJCSJleGFtcGxlIjogIjE0NTc5ODkxNjYiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PW5vdyIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRW5kIG9mIHRpbWUgcmFuZ2Ugb2YgbG9ncyB0byBpbmNsdWRlIGluIHJlc3VsdHMgKGluY2x1c2l2ZSkuXG4iCgkJCX0KCQldLAoJCSJ0ZWFtLmJpbGxhYmxlSW5mbyI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGFkbWluXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXIiLAoJCQkJImV4YW1wbGUiOiAiVTEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBIHVzZXIgdG8gcmV0cmlldmUgdGhlIGJpbGxhYmxlIGluZm9ybWF0aW9uIGZvci4gRGVmYXVsdHMgdG8gYWxsIHVzZXJzLlxuIgoJCQl9CgkJXSwKCQkidGVhbS5pbmZvIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogdGVhbTpyZWFkXG4iCgkJCX0KCQldLAoJCSJ0ZWFtLmludGVncmF0aW9uTG9ncyI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGFkbWluXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInNlcnZpY2VfaWQiLAoJCQkJImV4YW1wbGUiOiAiwqAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWx0ZXIgbG9ncyB0byB0aGlzIHNlcnZpY2UuIERlZmF1bHRzIHRvIGFsbCBsb2dzLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJhcHBfaWQiLAoJCQkJImV4YW1wbGUiOiAiwqAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWx0ZXIgbG9ncyB0byB0aGlzIFNsYWNrIGFwcC4gRGVmYXVsdHMgdG8gYWxsIGxvZ3MuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXIiLAoJCQkJImV4YW1wbGUiOiAiVTEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWx0ZXIgbG9ncyBnZW5lcmF0ZWQgYnkgdGhpcyB1c2Vy4oCZcyBhY3Rpb25zLiBEZWZhdWx0cyB0byBhbGwgbG9ncy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbmdlX3R5cGUiLAoJCQkJImV4YW1wbGUiOiAiYWRkZWQiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJGaWx0ZXIgbG9ncyB3aXRoIHRoaXMgY2hhbmdlIHR5cGUuIERlZmF1bHRzIHRvIGFsbCBsb2dzLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjb3VudCIsCgkJCQkiZXhhbXBsZSI6ICIyMCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwsIGRlZmF1bHQ9MTAwIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgaXRlbXMgdG8gcmV0dXJuIHBlciBwYWdlLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJwYWdlIiwKCQkJCSJleGFtcGxlIjogIjIiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTEiLAoJCQkJImRlc2NyaXB0aW9uIjogIlBhZ2UgbnVtYmVyIG9mIHJlc3VsdHMgdG8gcmV0dXJuLlxuIgoJCQl9CgkJXSwKCQkidGVhbS5wcm9maWxlLmdldCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHVzZXJzLnByb2ZpbGU6cmVhZFxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ2aXNpYmlsaXR5IiwKCQkJCSJleGFtcGxlIjogImFsbCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkZpbHRlciBieSB2aXNpYmlsaXR5LlxuIgoJCQl9CgkJXSwKCQkidXNlcmdyb3Vwcy5jcmVhdGUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiB1c2VyZ3JvdXBzOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogIm5hbWUiLAoJCQkJImV4YW1wbGUiOiAiTXkgVGVzdCBUZWFtIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQSBuYW1lIGZvciB0aGUgVXNlciBHcm91cC4gTXVzdCBiZSB1bmlxdWUgYW1vbmcgVXNlciBHcm91cHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImhhbmRsZSIsCgkJCQkiZXhhbXBsZSI6ICLCoCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkEgbWVudGlvbiBoYW5kbGUuIE11c3QgYmUgdW5pcXVlIGFtb25nIGNoYW5uZWxzLCB1c2VycyBhbmQgVXNlciBHcm91cHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImRlc2NyaXB0aW9uIiwKCQkJCSJleGFtcGxlIjogIsKgIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQSBzaG9ydCBkZXNjcmlwdGlvbiBvZiB0aGUgVXNlciBHcm91cC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY2hhbm5lbHMiLAoJCQkJImV4YW1wbGUiOiAiwqAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBIGNvbW1hIHNlcGFyYXRlZCBzdHJpbmcgb2YgZW5jb2RlZCBjaGFubmVsIElEcyBmb3Igd2hpY2ggdGhlIFVzZXIgR3JvdXAgdXNlcyBhcyBhIGRlZmF1bHQuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImluY2x1ZGVfY291bnQiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkluY2x1ZGUgdGhlIG51bWJlciBvZiB1c2VycyBpbiBlYWNoIFVzZXIgR3JvdXAuXG4iCgkJCX0KCQldLAoJCSJ1c2VyZ3JvdXBzLmRpc2FibGUiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiB1c2VyZ3JvdXBzOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXJncm91cCIsCgkJCQkiZXhhbXBsZSI6ICJTMDYwNFFTSkMiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJUaGUgZW5jb2RlZCBJRCBvZiB0aGUgVXNlciBHcm91cCB0byBkaXNhYmxlLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJpbmNsdWRlX2NvdW50IiwKCQkJCSJleGFtcGxlIjogIjEiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJbmNsdWRlIHRoZSBudW1iZXIgb2YgdXNlcnMgaW4gdGhlIFVzZXIgR3JvdXAuXG4iCgkJCX0KCQldLAoJCSJ1c2VyZ3JvdXBzLmVuYWJsZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHVzZXJncm91cHM6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidXNlcmdyb3VwIiwKCQkJCSJleGFtcGxlIjogIlMwNjA0UVNKQyIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRoZSBlbmNvZGVkIElEIG9mIHRoZSBVc2VyIEdyb3VwIHRvIGVuYWJsZS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiaW5jbHVkZV9jb3VudCIsCgkJCQkiZXhhbXBsZSI6ICIxIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiSW5jbHVkZSB0aGUgbnVtYmVyIG9mIHVzZXJzIGluIHRoZSBVc2VyIEdyb3VwLlxuIgoJCQl9CgkJXSwKCQkidXNlcmdyb3Vwcy5saXN0IjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogdXNlcmdyb3VwczpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImluY2x1ZGVfZGlzYWJsZWQiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkluY2x1ZGUgZGlzYWJsZWQgVXNlciBHcm91cHMuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImluY2x1ZGVfY291bnQiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkluY2x1ZGUgdGhlIG51bWJlciBvZiB1c2VycyBpbiBlYWNoIFVzZXIgR3JvdXAuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImluY2x1ZGVfdXNlcnMiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkluY2x1ZGUgdGhlIGxpc3Qgb2YgdXNlcnMgZm9yIGVhY2ggVXNlciBHcm91cC5cbiIKCQkJfQoJCV0sCgkJInVzZXJncm91cHMudXBkYXRlIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogdXNlcmdyb3Vwczp3cml0ZVxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ1c2VyZ3JvdXAiLAoJCQkJImV4YW1wbGUiOiAiUzA2MDRRU0pDIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVGhlIGVuY29kZWQgSUQgb2YgdGhlIFVzZXIgR3JvdXAgdG8gdXBkYXRlLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJuYW1lIiwKCQkJCSJleGFtcGxlIjogIk15IFRlc3QgVGVhbSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkEgbmFtZSBmb3IgdGhlIFVzZXIgR3JvdXAuIE11c3QgYmUgdW5pcXVlIGFtb25nIFVzZXIgR3JvdXBzLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJoYW5kbGUiLAoJCQkJImV4YW1wbGUiOiAiwqAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBIG1lbnRpb24gaGFuZGxlLiBNdXN0IGJlIHVuaXF1ZSBhbW9uZyBjaGFubmVscywgdXNlcnMgYW5kIFVzZXIgR3JvdXBzLlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJkZXNjcmlwdGlvbiIsCgkJCQkiZXhhbXBsZSI6ICLCoCIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkEgc2hvcnQgZGVzY3JpcHRpb24gb2YgdGhlIFVzZXIgR3JvdXAuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNoYW5uZWxzIiwKCQkJCSJleGFtcGxlIjogIsKgIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQSBjb21tYSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGVuY29kZWQgY2hhbm5lbCBJRHMgZm9yIHdoaWNoIHRoZSBVc2VyIEdyb3VwIHVzZXMgYXMgYSBkZWZhdWx0LlxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJpbmNsdWRlX2NvdW50IiwKCQkJCSJleGFtcGxlIjogIjEiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJbmNsdWRlIHRoZSBudW1iZXIgb2YgdXNlcnMgaW4gdGhlIFVzZXIgR3JvdXAuXG4iCgkJCX0KCQldLAoJCSJ1c2VyZ3JvdXBzLnVzZXJzLmxpc3QiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiB1c2VyZ3JvdXBzOnJlYWRcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidXNlcmdyb3VwIiwKCQkJCSJleGFtcGxlIjogIlMwNjA0UVNKQyIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRoZSBlbmNvZGVkIElEIG9mIHRoZSBVc2VyIEdyb3VwIHRvIHVwZGF0ZS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiaW5jbHVkZV9kaXNhYmxlZCIsCgkJCQkiZXhhbXBsZSI6ICIxIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQWxsb3cgcmVzdWx0cyB0aGF0IGludm9sdmUgZGlzYWJsZWQgVXNlciBHcm91cHMuXG4iCgkJCX0KCQldLAoJCSJ1c2VyZ3JvdXBzLnVzZXJzLnVwZGF0ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHVzZXJncm91cHM6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidXNlcmdyb3VwIiwKCQkJCSJleGFtcGxlIjogIlMwNjA0UVNKQyIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIlRoZSBlbmNvZGVkIElEIG9mIHRoZSBVc2VyIEdyb3VwIHRvIHVwZGF0ZS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAidXNlcnMiLAoJCQkJImV4YW1wbGUiOiAiVTA2MFI0Qko0LFUwNjBSTlJDWiIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkEgY29tbWEgc2VwYXJhdGVkIHN0cmluZyBvZiBlbmNvZGVkIHVzZXIgSURzIHRoYXQgcmVwcmVzZW50IHRoZSBlbnRpcmUgbGlzdCBvZiB1c2VycyBmb3IgdGhlIFVzZXIgR3JvdXAuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImluY2x1ZGVfY291bnQiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkluY2x1ZGUgdGhlIG51bWJlciBvZiB1c2VycyBpbiB0aGUgVXNlciBHcm91cC5cbiIKCQkJfQoJCV0sCgkJInVzZXJzLmRlbGV0ZVBob3RvIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogdXNlcnMucHJvZmlsZTp3cml0ZVxuIgoJCQl9CgkJXSwKCQkidXNlcnMuZ2V0UHJlc2VuY2UiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiB1c2VyczpyZWFkXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXIiLAoJCQkJImV4YW1wbGUiOiAiVTEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJVc2VyIHRvIGdldCBwcmVzZW5jZSBpbmZvIG9uLiBEZWZhdWx0cyB0byB0aGUgYXV0aGVkIHVzZXIuXG4iCgkJCX0KCQldLAoJCSJ1c2Vycy5pZGVudGl0eSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IGlkZW50aXR5LmJhc2ljXG4iCgkJCX0KCQldLAoJCSJ1c2Vycy5pbmZvIjogWwoJCQl7CgkJCQkibmFtZSI6ICJ0b2tlbiIsCgkJCQkiZXhhbXBsZSI6ICJ4eHh4LXh4eHh4eHh4eC14eHh4IiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiQXV0aGVudGljYXRpb24gdG9rZW4uXG5SZXF1aXJlcyBzY29wZTogdXNlcnM6cmVhZFxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ1c2VyIiwKCQkJCSJleGFtcGxlIjogIlUxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVXNlciB0byBnZXQgaW5mbyBvblxuIgoJCQl9CgkJXSwKCQkidXNlcnMubGlzdCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHVzZXJzOnJlYWRcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAicHJlc2VuY2UiLAoJCQkJImV4YW1wbGUiOiAiMSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIldoZXRoZXIgdG8gaW5jbHVkZSBwcmVzZW5jZSBkYXRhIGluIHRoZSBvdXRwdXRcbiIKCQkJfQoJCV0sCgkJInVzZXJzLnNldEFjdGl2ZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHVzZXJzOndyaXRlXG4iCgkJCX0KCQldLAoJCSJ1c2Vycy5zZXRQaG90byI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHVzZXJzLnByb2ZpbGU6d3JpdGVcbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiaW1hZ2UiLAoJCQkJImV4YW1wbGUiOiAiLi4uIiwKCQkJCSJyZXF1aXJlZCI6ICJSZXF1aXJlZCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiRmlsZSBjb250ZW50cyB2aWEgbXVsdGlwYXJ0L2Zvcm0tZGF0YS5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAiY3JvcF94IiwKCQkJCSJleGFtcGxlIjogIjEwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiWCBjb29yZGluYXRlIG9mIHRvcC1sZWZ0IGNvcm5lciBvZiBjcm9wIGJveFxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJjcm9wX3kiLAoJCQkJImV4YW1wbGUiOiAiMTUiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJZIGNvb3JkaW5hdGUgb2YgdG9wLWxlZnQgY29ybmVyIG9mIGNyb3AgYm94XG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImNyb3BfdyIsCgkJCQkiZXhhbXBsZSI6ICIxMDAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJXaWR0aC9oZWlnaHQgb2YgY3JvcCBib3ggKGFsd2F5cyBzcXVhcmUpXG4iCgkJCX0KCQldLAoJCSJ1c2Vycy5zZXRQcmVzZW5jZSI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHVzZXJzOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInByZXNlbmNlIiwKCQkJCSJleGFtcGxlIjogImF3YXkiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJFaXRoZXIgYXV0byBvciBhd2F5XG4iCgkJCX0KCQldLAoJCSJ1c2Vycy5wcm9maWxlLmdldCI6IFsKCQkJewoJCQkJIm5hbWUiOiAidG9rZW4iLAoJCQkJImV4YW1wbGUiOiAieHh4eC14eHh4eHh4eHgteHh4eCIsCgkJCQkicmVxdWlyZWQiOiAiUmVxdWlyZWQiLAoJCQkJImRlc2NyaXB0aW9uIjogIkF1dGhlbnRpY2F0aW9uIHRva2VuLlxuUmVxdWlyZXMgc2NvcGU6IHVzZXJzLnByb2ZpbGU6cmVhZFxuIgoJCQl9LAoJCQl7CgkJCQkibmFtZSI6ICJ1c2VyIiwKCQkJCSJleGFtcGxlIjogIlUxMjM0NTY3ODkwIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiVXNlciB0byByZXRyaWV2ZSBwcm9maWxlIGluZm8gZm9yXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogImluY2x1ZGVfbGFiZWxzIiwKCQkJCSJleGFtcGxlIjogIjEiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsLCBkZWZhdWx0PTAiLAoJCQkJImRlc2NyaXB0aW9uIjogIkluY2x1ZGUgbGFiZWxzIGZvciBlYWNoIElEIGluIGN1c3RvbSBwcm9maWxlIGZpZWxkc1xuIgoJCQl9CgkJXSwKCQkidXNlcnMucHJvZmlsZS5zZXQiOiBbCgkJCXsKCQkJCSJuYW1lIjogInRva2VuIiwKCQkJCSJleGFtcGxlIjogInh4eHgteHh4eHh4eHh4LXh4eHgiLAoJCQkJInJlcXVpcmVkIjogIlJlcXVpcmVkIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJBdXRoZW50aWNhdGlvbiB0b2tlbi5cblJlcXVpcmVzIHNjb3BlOiB1c2Vycy5wcm9maWxlOndyaXRlXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInVzZXIiLAoJCQkJImV4YW1wbGUiOiAiVTEyMzQ1Njc4OTAiLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJJRCBvZiB1c2VyIHRvIGNoYW5nZS4gVGhpcyBhcmd1bWVudCBtYXkgb25seSBiZSBzcGVjaWZpZWQgYnkgdGVhbSBhZG1pbnMgb24gcGFpZCB0ZWFtcy5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAicHJvZmlsZSIsCgkJCQkiZXhhbXBsZSI6ICJ7IGZpcnN0X25hbWU6IFwiSm9oblwiLCAuLi4gfSIsCgkJCQkicmVxdWlyZWQiOiAiT3B0aW9uYWwiLAoJCQkJImRlc2NyaXB0aW9uIjogIkNvbGxlY3Rpb24gb2Yga2V5OnZhbHVlIHBhaXJzIHByZXNlbnRlZCBhcyBhIFVSTC1lbmNvZGVkIEpTT04gaGFzaC5cbiIKCQkJfSwKCQkJewoJCQkJIm5hbWUiOiAibmFtZSIsCgkJCQkiZXhhbXBsZSI6ICJmaXJzdF9uYW1lIiwKCQkJCSJyZXF1aXJlZCI6ICJPcHRpb25hbCIsCgkJCQkiZGVzY3JpcHRpb24iOiAiTmFtZSBvZiBhIHNpbmdsZSBrZXkgdG8gc2V0LiBVc2FibGUgb25seSBpZiBwcm9maWxlIGlzIG5vdCBwYXNzZWQuXG4iCgkJCX0sCgkJCXsKCQkJCSJuYW1lIjogInZhbHVlIiwKCQkJCSJleGFtcGxlIjogIkpvaG4iLAoJCQkJInJlcXVpcmVkIjogIk9wdGlvbmFsIiwKCQkJCSJkZXNjcmlwdGlvbiI6ICJWYWx1ZSB0byBzZXQgYSBzaW5nbGUga2V5IHRvLiBVc2FibGUgb25seSBpZiBwcm9maWxlIGlzIG5vdCBwYXNzZWQuXG4iCgkJCX0KCQldCgl9OwoKLyoqKi8gfSwKLyogNTIgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gY2xpZW50OwoKCS8vIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtc3RhdGVmdWwtY2xpZW50CglmdW5jdGlvbiBjbGllbnQodG9rZW4pIHsKCSAgdmFyIGFwcGxpZWQgPSB7CgkgICAgYXV0aDogewoJICAgICAgdGVzdDoge30KCSAgICB9LAoJICAgIGJvdHM6IHsKCSAgICAgIGluZm86IHt9CgkgICAgfSwKCSAgICBjaGFubmVsczogewoJICAgICAgYXJjaGl2ZToge30sCgkgICAgICBjcmVhdGU6IHt9LAoJICAgICAgaGlzdG9yeToge30sCgkgICAgICBpbmZvOiB7fSwKCSAgICAgIGludml0ZToge30sCgkgICAgICBqb2luOiB7fSwKCSAgICAgIGtpY2s6IHt9LAoJICAgICAgbGVhdmU6IHt9LAoJICAgICAgbGlzdDoge30sCgkgICAgICBtYXJrOiB7fSwKCSAgICAgIHJlbmFtZToge30sCgkgICAgICByZXBsaWVzOiB7fSwKCSAgICAgIHNldFB1cnBvc2U6IHt9LAoJICAgICAgc2V0VG9waWM6IHt9LAoJICAgICAgdW5hcmNoaXZlOiB7fQoJICAgIH0sCgkgICAgY2hhdDogewoJICAgICAgZGVsZXRlOiB7fSwKCSAgICAgIG1lTWVzc2FnZToge30sCgkgICAgICBwb3N0TWVzc2FnZToge30sCgkgICAgICB1cGRhdGU6IHt9CgkgICAgfSwKCSAgICBkbmQ6IHsKCSAgICAgIGVuZERuZDoge30sCgkgICAgICBlbmRTbm9vemU6IHt9LAoJICAgICAgaW5mbzoge30sCgkgICAgICBzZXRTbm9vemU6IHt9LAoJICAgICAgdGVhbUluZm86IHt9CgkgICAgfSwKCSAgICBlbW9qaTogewoJICAgICAgbGlzdDoge30KCSAgICB9LAoJICAgIGZpbGVzOiB7CgkgICAgICBjb21tZW50czogewoJICAgICAgICBhZGQ6IHt9LAoJICAgICAgICBkZWxldGU6IHt9LAoJICAgICAgICBlZGl0OiB7fQoJICAgICAgfSwKCSAgICAgIGRlbGV0ZToge30sCgkgICAgICBpbmZvOiB7fSwKCSAgICAgIGxpc3Q6IHt9LAoJICAgICAgcmV2b2tlUHVibGljVVJMOiB7fSwKCSAgICAgIHNoYXJlZFB1YmxpY1VSTDoge30sCgkgICAgICB1cGxvYWQ6IHt9CgkgICAgfSwKCSAgICBncm91cHM6IHsKCSAgICAgIGFyY2hpdmU6IHt9LAoJICAgICAgY2xvc2U6IHt9LAoJICAgICAgY3JlYXRlOiB7fSwKCSAgICAgIGNyZWF0ZUNoaWxkOiB7fSwKCSAgICAgIGhpc3Rvcnk6IHt9LAoJICAgICAgaW5mbzoge30sCgkgICAgICBpbnZpdGU6IHt9LAoJICAgICAga2ljazoge30sCgkgICAgICBsZWF2ZToge30sCgkgICAgICBsaXN0OiB7fSwKCSAgICAgIG1hcms6IHt9LAoJICAgICAgb3Blbjoge30sCgkgICAgICByZW5hbWU6IHt9LAoJICAgICAgcmVwbGllczoge30sCgkgICAgICBzZXRQdXJwb3NlOiB7fSwKCSAgICAgIHNldFRvcGljOiB7fSwKCSAgICAgIHVuYXJjaGl2ZToge30KCSAgICB9LAoJICAgIGltOiB7CgkgICAgICBjbG9zZToge30sCgkgICAgICBoaXN0b3J5OiB7fSwKCSAgICAgIGxpc3Q6IHt9LAoJICAgICAgbWFyazoge30sCgkgICAgICBvcGVuOiB7fSwKCSAgICAgIHJlcGxpZXM6IHt9CgkgICAgfSwKCSAgICBtcGltOiB7CgkgICAgICBjbG9zZToge30sCgkgICAgICBoaXN0b3J5OiB7fSwKCSAgICAgIGxpc3Q6IHt9LAoJICAgICAgbWFyazoge30sCgkgICAgICBvcGVuOiB7fSwKCSAgICAgIHJlcGxpZXM6IHt9CgkgICAgfSwKCSAgICBwaW5zOiB7CgkgICAgICBhZGQ6IHt9LAoJICAgICAgbGlzdDoge30sCgkgICAgICByZW1vdmU6IHt9CgkgICAgfSwKCSAgICByZWFjdGlvbnM6IHsKCSAgICAgIGFkZDoge30sCgkgICAgICBnZXQ6IHt9LAoJICAgICAgbGlzdDoge30sCgkgICAgICByZW1vdmU6IHt9CgkgICAgfSwKCSAgICByZW1pbmRlcnM6IHsKCSAgICAgIGFkZDoge30sCgkgICAgICBjb21wbGV0ZToge30sCgkgICAgICBkZWxldGU6IHt9LAoJICAgICAgaW5mbzoge30sCgkgICAgICBsaXN0OiB7fQoJICAgIH0sCgkgICAgcnRtOiB7CgkgICAgICBzdGFydDoge30KCSAgICB9LAoJICAgIHNlYXJjaDogewoJICAgICAgYWxsOiB7fSwKCSAgICAgIGZpbGVzOiB7fSwKCSAgICAgIG1lc3NhZ2VzOiB7fQoJICAgIH0sCgkgICAgc3RhcnM6IHsKCSAgICAgIGFkZDoge30sCgkgICAgICBsaXN0OiB7fSwKCSAgICAgIHJlbW92ZToge30KCSAgICB9LAoJICAgIHRlYW06IHsKCSAgICAgIGFjY2Vzc0xvZ3M6IHt9LAoJICAgICAgYmlsbGFibGVJbmZvOiB7fSwKCSAgICAgIGluZm86IHt9LAoJICAgICAgaW50ZWdyYXRpb25Mb2dzOiB7fSwKCSAgICAgIHByb2ZpbGU6IHsKCSAgICAgICAgZ2V0OiB7fQoJICAgICAgfQoJICAgIH0sCgkgICAgdXNlcmdyb3VwczogewoJICAgICAgY3JlYXRlOiB7fSwKCSAgICAgIGRpc2FibGU6IHt9LAoJICAgICAgZW5hYmxlOiB7fSwKCSAgICAgIGxpc3Q6IHt9LAoJICAgICAgdXBkYXRlOiB7fSwKCSAgICAgIHVzZXJzOiB7CgkgICAgICAgIGxpc3Q6IHt9LAoJICAgICAgICB1cGRhdGU6IHt9CgkgICAgICB9CgkgICAgfSwKCSAgICB1c2VyczogewoJICAgICAgZGVsZXRlUGhvdG86IHt9LAoJICAgICAgZ2V0UHJlc2VuY2U6IHt9LAoJICAgICAgaWRlbnRpdHk6IHt9LAoJICAgICAgaW5mbzoge30sCgkgICAgICBsaXN0OiB7fSwKCSAgICAgIHByb2ZpbGU6IHsKCSAgICAgICAgZ2V0OiB7fSwKCSAgICAgICAgc2V0OiB7fQoJICAgICAgfSwKCSAgICAgIHNldEFjdGl2ZToge30sCgkgICAgICBzZXRQaG90bzoge30sCgkgICAgICBzZXRQcmVzZW5jZToge30KCSAgICB9CgkgIH07CgoJICBhcHBsaWVkLmF1dGgudGVzdCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg1MykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuYm90cy5pbmZvID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5jaGFubmVscy5hcmNoaXZlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5jaGFubmVscy5jcmVhdGUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNTYpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmNoYW5uZWxzLmhpc3RvcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNTcpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmNoYW5uZWxzLmluZm8gPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNTgpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmNoYW5uZWxzLmludml0ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg1OSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuY2hhbm5lbHMuam9pbiA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg2MCkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuY2hhbm5lbHMua2ljayA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg2MSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuY2hhbm5lbHMubGVhdmUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNjIpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmNoYW5uZWxzLmxpc3QgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNjMpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmNoYW5uZWxzLm1hcmsgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNjQpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmNoYW5uZWxzLnJlbmFtZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg2NSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuY2hhbm5lbHMucmVwbGllcyA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg2NikuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuY2hhbm5lbHMuc2V0UHVycG9zZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg2NykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuY2hhbm5lbHMuc2V0VG9waWMgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNjgpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmNoYW5uZWxzLnVuYXJjaGl2ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg2OSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuY2hhdC5kZWxldGUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNzApLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmNoYXQubWVNZXNzYWdlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5jaGF0LnBvc3RNZXNzYWdlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5jaGF0LnVwZGF0ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg3MykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZG5kLmVuZERuZCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg3NCkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZG5kLmVuZFNub296ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg3NSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZG5kLmluZm8gPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNzYpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmRuZC5zZXRTbm9vemUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oNzcpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmRuZC50ZWFtSW5mbyA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg3OCkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZW1vamkubGlzdCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg3OSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZmlsZXMuY29tbWVudHMuYWRkID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5maWxlcy5jb21tZW50cy5kZWxldGUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oODEpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmZpbGVzLmNvbW1lbnRzLmVkaXQgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oODIpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmZpbGVzLmRlbGV0ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg4MykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZmlsZXMuaW5mbyA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg4NCkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZmlsZXMubGlzdCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg4NSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZmlsZXMucmV2b2tlUHVibGljVVJMID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5maWxlcy5zaGFyZWRQdWJsaWNVUkwgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oODcpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmZpbGVzLnVwbG9hZCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg4OCkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZ3JvdXBzLmFyY2hpdmUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oODkpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmdyb3Vwcy5jbG9zZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg5MCkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZ3JvdXBzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg5MSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZ3JvdXBzLmNyZWF0ZUNoaWxkID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDkyKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5ncm91cHMuaGlzdG9yeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg5MykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZ3JvdXBzLmluZm8gPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oOTQpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmdyb3Vwcy5pbnZpdGUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oOTUpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmdyb3Vwcy5raWNrID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5ncm91cHMubGVhdmUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oOTcpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmdyb3Vwcy5saXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5ncm91cHMubWFyayA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXyg5OSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZ3JvdXBzLm9wZW4gPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTAwKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5ncm91cHMucmVuYW1lID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuZ3JvdXBzLnJlcGxpZXMgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTAyKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5ncm91cHMuc2V0UHVycG9zZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMDMpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmdyb3Vwcy5zZXRUb3BpYyA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMDQpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmdyb3Vwcy51bmFyY2hpdmUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTA1KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5pbS5jbG9zZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmltLmhpc3RvcnkgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTA3KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5pbS5saXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOCkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuaW0ubWFyayA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLmltLm9wZW4gPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTEwKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5pbS5yZXBsaWVzID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQubXBpbS5jbG9zZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMTIpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLm1waW0uaGlzdG9yeSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMTMpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLm1waW0ubGlzdCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMTQpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLm1waW0ubWFyayA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMTUpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLm1waW0ub3BlbiA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMTYpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLm1waW0ucmVwbGllcyA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMTcpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnBpbnMuYWRkID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOCkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQucGlucy5saXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQucGlucy5yZW1vdmUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTIwKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5yZWFjdGlvbnMuYWRkID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQucmVhY3Rpb25zLmdldCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMjIpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnJlYWN0aW9ucy5saXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQucmVhY3Rpb25zLnJlbW92ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMjQpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnJlbWluZGVycy5hZGQgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTI1KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5yZW1pbmRlcnMuY29tcGxldGUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTI2KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5yZW1pbmRlcnMuZGVsZXRlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQucmVtaW5kZXJzLmluZm8gPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTI4KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5yZW1pbmRlcnMubGlzdCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMjkpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnJ0bS5zdGFydCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxMzApLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnNlYXJjaC5hbGwgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTMxKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5zZWFyY2guZmlsZXMgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTMyKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5zZWFyY2gubWVzc2FnZXMgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTMzKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5zdGFycy5hZGQgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTM0KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC5zdGFycy5saXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQuc3RhcnMucmVtb3ZlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNikuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQudGVhbS5hY2Nlc3NMb2dzID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQudGVhbS5iaWxsYWJsZUluZm8gPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTM4KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC50ZWFtLmluZm8gPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTM5KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC50ZWFtLmludGVncmF0aW9uTG9ncyA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxNDApLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnRlYW0ucHJvZmlsZS5nZXQgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTQxKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC51c2VyZ3JvdXBzLmNyZWF0ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxNDIpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnVzZXJncm91cHMuZGlzYWJsZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxNDMpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnVzZXJncm91cHMuZW5hYmxlID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0NCkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQudXNlcmdyb3Vwcy5saXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0NSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQudXNlcmdyb3Vwcy51cGRhdGUgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTQ2KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC51c2VyZ3JvdXBzLnVzZXJzLmxpc3QgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTQ3KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC51c2VyZ3JvdXBzLnVzZXJzLnVwZGF0ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxNDgpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnVzZXJzLmRlbGV0ZVBob3RvID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0OSkuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQudXNlcnMuZ2V0UHJlc2VuY2UgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTUwKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC51c2Vycy5pZGVudGl0eSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxNTEpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnVzZXJzLmluZm8gPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTUyKS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC51c2Vycy5saXN0ID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1MykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQudXNlcnMucHJvZmlsZS5nZXQgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTU0KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCSAgYXBwbGllZC51c2Vycy5wcm9maWxlLnNldCA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxNTUpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnVzZXJzLnNldEFjdGl2ZSA9IGZ1bmN0aW9uIChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgcGFyYW1zLnRva2VuID0gdG9rZW47CgkgICAgX193ZWJwYWNrX3JlcXVpcmVfXygxNTYpLmNhbGwoe30sIHBhcmFtcywgY2FsbGJhY2spOwoJICB9OwoJICBhcHBsaWVkLnVzZXJzLnNldFBob3RvID0gZnVuY3Rpb24gKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgICBwYXJhbXMudG9rZW4gPSB0b2tlbjsKCSAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1NykuY2FsbCh7fSwgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH07CgkgIGFwcGxpZWQudXNlcnMuc2V0UHJlc2VuY2UgPSBmdW5jdGlvbiAocGFyYW1zLCBjYWxsYmFjaykgewoJICAgIHBhcmFtcy50b2tlbiA9IHRva2VuOwoJICAgIF9fd2VicGFja19yZXF1aXJlX18oMTU4KS5jYWxsKHt9LCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfTsKCgkgIHJldHVybiBhcHBsaWVkOwoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA1MyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBhdXRodGVzdDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gYXV0aHRlc3QocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnYXV0aC50ZXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA1NCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBib3RzaW5mbzsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gYm90c2luZm8ocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnYm90cy5pbmZvJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA1NSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc2FyY2hpdmU7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYW5uZWxzYXJjaGl2ZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGFubmVscy5hcmNoaXZlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA1NiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc2NyZWF0ZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gY2hhbm5lbHNjcmVhdGUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnY2hhbm5lbHMuY3JlYXRlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA1NyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc2hpc3Rvcnk7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYW5uZWxzaGlzdG9yeShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGFubmVscy5oaXN0b3J5JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA1OCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc2luZm87CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYW5uZWxzaW5mbyhwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGFubmVscy5pbmZvJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA1OSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc2ludml0ZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gY2hhbm5lbHNpbnZpdGUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnY2hhbm5lbHMuaW52aXRlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2MCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc2pvaW47CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYW5uZWxzam9pbihwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGFubmVscy5qb2luJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2MSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc2tpY2s7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYW5uZWxza2ljayhwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGFubmVscy5raWNrJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2MiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc2xlYXZlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBjaGFubmVsc2xlYXZlKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2NoYW5uZWxzLmxlYXZlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2MyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc2xpc3Q7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYW5uZWxzbGlzdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGFubmVscy5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2NCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc21hcms7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYW5uZWxzbWFyayhwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGFubmVscy5tYXJrJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2NSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc3JlbmFtZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gY2hhbm5lbHNyZW5hbWUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnY2hhbm5lbHMucmVuYW1lJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2NiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc3JlcGxpZXM7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYW5uZWxzcmVwbGllcyhwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGFubmVscy5yZXBsaWVzJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2NyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc3NldFB1cnBvc2U7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYW5uZWxzc2V0UHVycG9zZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGFubmVscy5zZXRQdXJwb3NlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2OCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc3NldFRvcGljOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBjaGFubmVsc3NldFRvcGljKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2NoYW5uZWxzLnNldFRvcGljJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA2OSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGFubmVsc3VuYXJjaGl2ZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gY2hhbm5lbHN1bmFyY2hpdmUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnY2hhbm5lbHMudW5hcmNoaXZlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3MCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGF0ZGVsZXRlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBjaGF0ZGVsZXRlKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2NoYXQuZGVsZXRlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3MSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGF0bWVNZXNzYWdlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBjaGF0bWVNZXNzYWdlKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2NoYXQubWVNZXNzYWdlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3MiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGF0cG9zdE1lc3NhZ2U7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGNoYXRwb3N0TWVzc2FnZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdjaGF0LnBvc3RNZXNzYWdlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3MyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjaGF0dXBkYXRlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBjaGF0dXBkYXRlKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2NoYXQudXBkYXRlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3NCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBkbmRlbmREbmQ7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGRuZGVuZERuZChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdkbmQuZW5kRG5kJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3NSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBkbmRlbmRTbm9vemU7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGRuZGVuZFNub296ZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdkbmQuZW5kU25vb3plJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3NiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBkbmRpbmZvOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBkbmRpbmZvKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2RuZC5pbmZvJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3NyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBkbmRzZXRTbm9vemU7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGRuZHNldFNub296ZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdkbmQuc2V0U25vb3plJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3OCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBkbmR0ZWFtSW5mbzsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZG5kdGVhbUluZm8ocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnZG5kLnRlYW1JbmZvJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA3OSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBlbW9qaWxpc3Q7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGVtb2ppbGlzdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdlbW9qaS5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA4MCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBmaWxlc2NvbW1lbnRzYWRkOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBmaWxlc2NvbW1lbnRzYWRkKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2ZpbGVzLmNvbW1lbnRzLmFkZCc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogODEgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gZmlsZXNjb21tZW50c2RlbGV0ZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZmlsZXNjb21tZW50c2RlbGV0ZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdmaWxlcy5jb21tZW50cy5kZWxldGUnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDgyICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IGZpbGVzY29tbWVudHNlZGl0OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBmaWxlc2NvbW1lbnRzZWRpdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdmaWxlcy5jb21tZW50cy5lZGl0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA4MyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBmaWxlc2RlbGV0ZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZmlsZXNkZWxldGUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnZmlsZXMuZGVsZXRlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA4NCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBmaWxlc2luZm87CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGZpbGVzaW5mbyhwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdmaWxlcy5pbmZvJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA4NSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBmaWxlc2xpc3Q7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGZpbGVzbGlzdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdmaWxlcy5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA4NiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBmaWxlc3Jldm9rZVB1YmxpY1VSTDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZmlsZXNyZXZva2VQdWJsaWNVUkwocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnZmlsZXMucmV2b2tlUHVibGljVVJMJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA4NyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBmaWxlc3NoYXJlZFB1YmxpY1VSTDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZmlsZXNzaGFyZWRQdWJsaWNVUkwocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnZmlsZXMuc2hhcmVkUHVibGljVVJMJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA4OCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBmaWxlc3VwbG9hZDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZmlsZXN1cGxvYWQocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnZmlsZXMudXBsb2FkJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA4OSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNhcmNoaXZlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBncm91cHNhcmNoaXZlKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2dyb3Vwcy5hcmNoaXZlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5MCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNjbG9zZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZ3JvdXBzY2xvc2UocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnZ3JvdXBzLmNsb3NlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5MSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNjcmVhdGU7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGdyb3Vwc2NyZWF0ZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdncm91cHMuY3JlYXRlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5MiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNjcmVhdGVDaGlsZDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZ3JvdXBzY3JlYXRlQ2hpbGQocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnZ3JvdXBzLmNyZWF0ZUNoaWxkJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5MyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNoaXN0b3J5OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBncm91cHNoaXN0b3J5KHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2dyb3Vwcy5oaXN0b3J5JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5NCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNpbmZvOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBncm91cHNpbmZvKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2dyb3Vwcy5pbmZvJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5NSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNpbnZpdGU7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGdyb3Vwc2ludml0ZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdncm91cHMuaW52aXRlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5NiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNraWNrOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBncm91cHNraWNrKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2dyb3Vwcy5raWNrJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5NyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNsZWF2ZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZ3JvdXBzbGVhdmUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnZ3JvdXBzLmxlYXZlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5OCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNsaXN0OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBncm91cHNsaXN0KHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2dyb3Vwcy5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiA5OSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNtYXJrOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBncm91cHNtYXJrKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2dyb3Vwcy5tYXJrJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMDAgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gZ3JvdXBzb3BlbjsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZ3JvdXBzb3BlbihwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdncm91cHMub3Blbic7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTAxICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IGdyb3Vwc3JlbmFtZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZ3JvdXBzcmVuYW1lKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2dyb3Vwcy5yZW5hbWUnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEwMiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHNyZXBsaWVzOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBncm91cHNyZXBsaWVzKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2dyb3Vwcy5yZXBsaWVzJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMDMgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gZ3JvdXBzc2V0UHVycG9zZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gZ3JvdXBzc2V0UHVycG9zZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdncm91cHMuc2V0UHVycG9zZSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTA0ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IGdyb3Vwc3NldFRvcGljOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBncm91cHNzZXRUb3BpYyhwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdncm91cHMuc2V0VG9waWMnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEwNSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBncm91cHN1bmFyY2hpdmU7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGdyb3Vwc3VuYXJjaGl2ZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdncm91cHMudW5hcmNoaXZlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMDYgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gaW1jbG9zZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gaW1jbG9zZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdpbS5jbG9zZSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTA3ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IGltaGlzdG9yeTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gaW1oaXN0b3J5KHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2ltLmhpc3RvcnknOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEwOCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBpbWxpc3Q7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGltbGlzdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdpbS5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMDkgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gaW1tYXJrOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBpbW1hcmsocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnaW0ubWFyayc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTEwICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IGltb3BlbjsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gaW1vcGVuKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ2ltLm9wZW4nOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDExMSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBpbXJlcGxpZXM7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIGltcmVwbGllcyhwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdpbS5yZXBsaWVzJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMTIgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gbXBpbWNsb3NlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBtcGltY2xvc2UocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnbXBpbS5jbG9zZSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTEzICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IG1waW1oaXN0b3J5OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBtcGltaGlzdG9yeShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdtcGltLmhpc3RvcnknOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDExNCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBtcGltbGlzdDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gbXBpbWxpc3QocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnbXBpbS5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMTUgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gbXBpbW1hcms7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIG1waW1tYXJrKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ21waW0ubWFyayc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTE2ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IG1waW1vcGVuOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBtcGltb3BlbihwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdtcGltLm9wZW4nOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDExNyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBtcGltcmVwbGllczsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gbXBpbXJlcGxpZXMocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnbXBpbS5yZXBsaWVzJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMTggKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gcGluc2FkZDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gcGluc2FkZChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdwaW5zLmFkZCc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTE5ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHBpbnNsaXN0OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBwaW5zbGlzdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdwaW5zLmxpc3QnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEyMCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBwaW5zcmVtb3ZlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBwaW5zcmVtb3ZlKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3BpbnMucmVtb3ZlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMjEgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gcmVhY3Rpb25zYWRkOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiByZWFjdGlvbnNhZGQocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAncmVhY3Rpb25zLmFkZCc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTIyICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHJlYWN0aW9uc2dldDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gcmVhY3Rpb25zZ2V0KHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3JlYWN0aW9ucy5nZXQnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEyMyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSByZWFjdGlvbnNsaXN0OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiByZWFjdGlvbnNsaXN0KHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3JlYWN0aW9ucy5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMjQgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gcmVhY3Rpb25zcmVtb3ZlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiByZWFjdGlvbnNyZW1vdmUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAncmVhY3Rpb25zLnJlbW92ZSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTI1ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHJlbWluZGVyc2FkZDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gcmVtaW5kZXJzYWRkKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3JlbWluZGVycy5hZGQnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEyNiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSByZW1pbmRlcnNjb21wbGV0ZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gcmVtaW5kZXJzY29tcGxldGUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAncmVtaW5kZXJzLmNvbXBsZXRlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMjcgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gcmVtaW5kZXJzZGVsZXRlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiByZW1pbmRlcnNkZWxldGUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAncmVtaW5kZXJzLmRlbGV0ZSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTI4ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHJlbWluZGVyc2luZm87CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHJlbWluZGVyc2luZm8ocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAncmVtaW5kZXJzLmluZm8nOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEyOSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSByZW1pbmRlcnNsaXN0OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiByZW1pbmRlcnNsaXN0KHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3JlbWluZGVycy5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMzAgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gcnRtc3RhcnQ7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHJ0bXN0YXJ0KHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3J0bS5zdGFydCc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTMxICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHNlYXJjaGFsbDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gc2VhcmNoYWxsKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3NlYXJjaC5hbGwnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEzMiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBzZWFyY2hmaWxlczsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gc2VhcmNoZmlsZXMocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnc2VhcmNoLmZpbGVzJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMzMgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gc2VhcmNobWVzc2FnZXM7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHNlYXJjaG1lc3NhZ2VzKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3NlYXJjaC5tZXNzYWdlcyc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTM0ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHN0YXJzYWRkOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiBzdGFyc2FkZChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdzdGFycy5hZGQnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEzNSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBzdGFyc2xpc3Q7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHN0YXJzbGlzdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICdzdGFycy5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMzYgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gc3RhcnNyZW1vdmU7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHN0YXJzcmVtb3ZlKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3N0YXJzLnJlbW92ZSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTM3ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHRlYW1hY2Nlc3NMb2dzOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiB0ZWFtYWNjZXNzTG9ncyhwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd0ZWFtLmFjY2Vzc0xvZ3MnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDEzOCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSB0ZWFtYmlsbGFibGVJbmZvOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiB0ZWFtYmlsbGFibGVJbmZvKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3RlYW0uYmlsbGFibGVJbmZvJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxMzkgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gdGVhbWluZm87CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHRlYW1pbmZvKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3RlYW0uaW5mbyc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTQwICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHRlYW1pbnRlZ3JhdGlvbkxvZ3M7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHRlYW1pbnRlZ3JhdGlvbkxvZ3MocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAndGVhbS5pbnRlZ3JhdGlvbkxvZ3MnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE0MSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSB0ZWFtcHJvZmlsZWdldDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gdGVhbXByb2ZpbGVnZXQocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAndGVhbS5wcm9maWxlLmdldCc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTQyICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHVzZXJncm91cHNjcmVhdGU7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHVzZXJncm91cHNjcmVhdGUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAndXNlcmdyb3Vwcy5jcmVhdGUnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE0MyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSB1c2VyZ3JvdXBzZGlzYWJsZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gdXNlcmdyb3Vwc2Rpc2FibGUocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAndXNlcmdyb3Vwcy5kaXNhYmxlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNDQgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gdXNlcmdyb3Vwc2VuYWJsZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gdXNlcmdyb3Vwc2VuYWJsZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd1c2VyZ3JvdXBzLmVuYWJsZSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTQ1ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHVzZXJncm91cHNsaXN0OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiB1c2VyZ3JvdXBzbGlzdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd1c2VyZ3JvdXBzLmxpc3QnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE0NiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSB1c2VyZ3JvdXBzdXBkYXRlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiB1c2VyZ3JvdXBzdXBkYXRlKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3VzZXJncm91cHMudXBkYXRlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNDcgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gdXNlcmdyb3Vwc3VzZXJzbGlzdDsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gdXNlcmdyb3Vwc3VzZXJzbGlzdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd1c2VyZ3JvdXBzLnVzZXJzLmxpc3QnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE0OCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSB1c2VyZ3JvdXBzdXNlcnN1cGRhdGU7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHVzZXJncm91cHN1c2Vyc3VwZGF0ZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd1c2VyZ3JvdXBzLnVzZXJzLnVwZGF0ZSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTQ5ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHVzZXJzZGVsZXRlUGhvdG87CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHVzZXJzZGVsZXRlUGhvdG8ocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAndXNlcnMuZGVsZXRlUGhvdG8nOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE1MCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSB1c2Vyc2dldFByZXNlbmNlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiB1c2Vyc2dldFByZXNlbmNlKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3VzZXJzLmdldFByZXNlbmNlJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNTEgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gdXNlcnNpZGVudGl0eTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gdXNlcnNpZGVudGl0eShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd1c2Vycy5pZGVudGl0eSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTUyICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHVzZXJzaW5mbzsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gdXNlcnNpbmZvKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3VzZXJzLmluZm8nOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE1MyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSB1c2Vyc2xpc3Q7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHVzZXJzbGlzdChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd1c2Vycy5saXN0JzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNTQgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gdXNlcnNwcm9maWxlZ2V0OwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiB1c2Vyc3Byb2ZpbGVnZXQocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAndXNlcnMucHJvZmlsZS5nZXQnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE1NSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSB1c2Vyc3Byb2ZpbGVzZXQ7CgoJdmFyIF9leGVjID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTsKCgl2YXIgX2V4ZWMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhlYyk7CgoJdmFyIF92YWxpZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNTApOwoKCXZhciBfdmFsaWRhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsaWRhdGUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLy8gdGhpcyBmaWxlIHdhcyBnZW5lcmF0ZWQgYnkgLi9zY3JpcHRzL2dlbmVyYXRlLXdlYi1hcGkKCWZ1bmN0aW9uIHVzZXJzcHJvZmlsZXNldChwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd1c2Vycy5wcm9maWxlLnNldCc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTU2ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCWV4cG9ydHMuZGVmYXVsdCA9IHVzZXJzc2V0QWN0aXZlOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiB1c2Vyc3NldEFjdGl2ZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd1c2Vycy5zZXRBY3RpdmUnOwoJICB2YXIgZXJyID0gKDAsIF92YWxpZGF0ZTIuZGVmYXVsdCkobnMsIHBhcmFtcyk7CgkgIGlmIChlcnIpIHsKCSAgICBjYWxsYmFjayhlcnIpOwoJICB9IGVsc2UgewoJICAgICgwLCBfZXhlYzIuZGVmYXVsdCkobnMsIHBhcmFtcywgY2FsbGJhY2spOwoJICB9Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE1NyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSB1c2Vyc3NldFBob3RvOwoKCXZhciBfZXhlYyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7CgoJdmFyIF9leGVjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4ZWMpOwoKCXZhciBfdmFsaWRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUwKTsKCgl2YXIgX3ZhbGlkYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3ZhbGlkYXRlKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8vIHRoaXMgZmlsZSB3YXMgZ2VuZXJhdGVkIGJ5IC4vc2NyaXB0cy9nZW5lcmF0ZS13ZWItYXBpCglmdW5jdGlvbiB1c2Vyc3NldFBob3RvKHBhcmFtcywgY2FsbGJhY2spIHsKCSAgdmFyIG5zID0gJ3VzZXJzLnNldFBob3RvJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNTggKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5kZWZhdWx0ID0gdXNlcnNzZXRQcmVzZW5jZTsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gdXNlcnNzZXRQcmVzZW5jZShwYXJhbXMsIGNhbGxiYWNrKSB7CgkgIHZhciBucyA9ICd1c2Vycy5zZXRQcmVzZW5jZSc7CgkgIHZhciBlcnIgPSAoMCwgX3ZhbGlkYXRlMi5kZWZhdWx0KShucywgcGFyYW1zKTsKCSAgaWYgKGVycikgewoJICAgIGNhbGxiYWNrKGVycik7CgkgIH0gZWxzZSB7CgkgICAgKDAsIF9leGVjMi5kZWZhdWx0KShucywgcGFyYW1zLCBjYWxsYmFjayk7CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTU5ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgl2YXIgX2JvdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KTsKCgl2YXIgX2JvdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYm90cyk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglleHBvcnRzLmRlZmF1bHQgPSB7CgkgIGluZm86IF9ib3RzMi5kZWZhdWx0Cgl9OwoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNjAgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfY2hhbm5lbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU1KTsKCgl2YXIgX2NoYW5uZWxzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoYW5uZWxzKTsKCgl2YXIgX2NoYW5uZWxzMyA9IF9fd2VicGFja19yZXF1aXJlX18oNTYpOwoKCXZhciBfY2hhbm5lbHM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMzKTsKCgl2YXIgX2NoYW5uZWxzNSA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpOwoKCXZhciBfY2hhbm5lbHM2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHM1KTsKCgl2YXIgX2NoYW5uZWxzNyA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpOwoKCXZhciBfY2hhbm5lbHM4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHM3KTsKCgl2YXIgX2NoYW5uZWxzOSA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpOwoKCXZhciBfY2hhbm5lbHMxMCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoYW5uZWxzOSk7CgoJdmFyIF9jaGFubmVsczExID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MCk7CgoJdmFyIF9jaGFubmVsczEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMxMSk7CgoJdmFyIF9jaGFubmVsczEzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MSk7CgoJdmFyIF9jaGFubmVsczE0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMxMyk7CgoJdmFyIF9jaGFubmVsczE1ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Mik7CgoJdmFyIF9jaGFubmVsczE2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMxNSk7CgoJdmFyIF9jaGFubmVsczE3ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Myk7CgoJdmFyIF9jaGFubmVsczE4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMxNyk7CgoJdmFyIF9jaGFubmVsczE5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NCk7CgoJdmFyIF9jaGFubmVsczIwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMxOSk7CgoJdmFyIF9jaGFubmVsczIxID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSk7CgoJdmFyIF9jaGFubmVsczIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMyMSk7CgoJdmFyIF9jaGFubmVsczIzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nyk7CgoJdmFyIF9jaGFubmVsczI0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMyMyk7CgoJdmFyIF9jaGFubmVsczI1ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OCk7CgoJdmFyIF9jaGFubmVsczI2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMyNSk7CgoJdmFyIF9jaGFubmVsczI3ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OSk7CgoJdmFyIF9jaGFubmVsczI4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhbm5lbHMyNyk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglleHBvcnRzLmRlZmF1bHQgPSB7CgkgIGFyY2hpdmU6IF9jaGFubmVsczIuZGVmYXVsdCwKCSAgY3JlYXRlOiBfY2hhbm5lbHM0LmRlZmF1bHQsCgkgIGhpc3Rvcnk6IF9jaGFubmVsczYuZGVmYXVsdCwKCSAgaW5mbzogX2NoYW5uZWxzOC5kZWZhdWx0LAoJICBpbnZpdGU6IF9jaGFubmVsczEwLmRlZmF1bHQsCgkgIGpvaW46IF9jaGFubmVsczEyLmRlZmF1bHQsCgkgIGtpY2s6IF9jaGFubmVsczE0LmRlZmF1bHQsCgkgIGxlYXZlOiBfY2hhbm5lbHMxNi5kZWZhdWx0LAoJICBsaXN0OiBfY2hhbm5lbHMxOC5kZWZhdWx0LAoJICBtYXJrOiBfY2hhbm5lbHMyMC5kZWZhdWx0LAoJICByZW5hbWU6IF9jaGFubmVsczIyLmRlZmF1bHQsCgkgIHNldFB1cnBvc2U6IF9jaGFubmVsczI0LmRlZmF1bHQsCgkgIHNldFRvcGljOiBfY2hhbm5lbHMyNi5kZWZhdWx0LAoJICB1bmFyY2hpdmU6IF9jaGFubmVsczI4LmRlZmF1bHQKCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE2MSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CgoJdmFyIF9jaGF0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7CgoJdmFyIF9jaGF0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoYXQpOwoKCXZhciBfY2hhdDMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyKTsKCgl2YXIgX2NoYXQ0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhdDMpOwoKCXZhciBfY2hhdDUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczKTsKCgl2YXIgX2NoYXQ2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhdDUpOwoKCXZhciBfY2hhdDcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKTsKCgl2YXIgX2NoYXQ4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2hhdDcpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJZXhwb3J0cy5kZWZhdWx0ID0gewoJICBwb3N0TWVzc2FnZTogX2NoYXQ0LmRlZmF1bHQsIGRlbGV0ZTogX2NoYXQyLmRlZmF1bHQsIHVwZGF0ZTogX2NoYXQ2LmRlZmF1bHQsIG1lTWVzc2FnZTogX2NoYXQ4LmRlZmF1bHQKCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE2MiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CgoJdmFyIF9kbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc2KTsKCgl2YXIgX2RuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kbmQpOwoKCXZhciBfZG5kMyA9IF9fd2VicGFja19yZXF1aXJlX18oNzQpOwoKCXZhciBfZG5kNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RuZDMpOwoKCXZhciBfZG5kNSA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpOwoKCXZhciBfZG5kNiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RuZDUpOwoKCXZhciBfZG5kNyA9IF9fd2VicGFja19yZXF1aXJlX18oNzcpOwoKCXZhciBfZG5kOCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RuZDcpOwoKCXZhciBfZG5kOSA9IF9fd2VicGFja19yZXF1aXJlX18oNzgpOwoKCXZhciBfZG5kMTAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kbmQ5KTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCWV4cG9ydHMuZGVmYXVsdCA9IHsKCSAgaW5mbzogX2RuZDIuZGVmYXVsdCwgZW5kRG5kOiBfZG5kNC5kZWZhdWx0LCBlbmRTbm9vemU6IF9kbmQ2LmRlZmF1bHQsIHNldFNub296ZTogX2RuZDguZGVmYXVsdCwgdGVhbUluZm86IF9kbmQxMC5kZWZhdWx0Cgl9OwoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNjMgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfZmlsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgzKTsKCgl2YXIgX2ZpbGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZpbGVzKTsKCgl2YXIgX2ZpbGVzMyA9IF9fd2VicGFja19yZXF1aXJlX18oODQpOwoKCXZhciBfZmlsZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmlsZXMzKTsKCgl2YXIgX2ZpbGVzNSA9IF9fd2VicGFja19yZXF1aXJlX18oODUpOwoKCXZhciBfZmlsZXM2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmlsZXM1KTsKCgl2YXIgX2ZpbGVzNyA9IF9fd2VicGFja19yZXF1aXJlX18oODgpOwoKCXZhciBfZmlsZXM4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmlsZXM3KTsKCgl2YXIgX2ZpbGVzQ29tbWVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgwKTsKCgl2YXIgX2ZpbGVzQ29tbWVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZmlsZXNDb21tZW50cyk7CgoJdmFyIF9maWxlc0NvbW1lbnRzMyA9IF9fd2VicGFja19yZXF1aXJlX18oODEpOwoKCXZhciBfZmlsZXNDb21tZW50czQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9maWxlc0NvbW1lbnRzMyk7CgoJdmFyIF9maWxlc0NvbW1lbnRzNSA9IF9fd2VicGFja19yZXF1aXJlX18oODIpOwoKCXZhciBfZmlsZXNDb21tZW50czYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9maWxlc0NvbW1lbnRzNSk7CgoJdmFyIF9maWxlczkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg2KTsKCgl2YXIgX2ZpbGVzMTAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9maWxlczkpOwoKCXZhciBfZmlsZXMxMSA9IF9fd2VicGFja19yZXF1aXJlX18oODcpOwoKCXZhciBfZmlsZXMxMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZpbGVzMTEpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJZXhwb3J0cy5kZWZhdWx0ID0gewoJICBkZWxldGU6IF9maWxlczIuZGVmYXVsdCwKCSAgaW5mbzogX2ZpbGVzNC5kZWZhdWx0LAoJICBsaXN0OiBfZmlsZXM2LmRlZmF1bHQsCgkgIHVwbG9hZDogX2ZpbGVzOC5kZWZhdWx0LAoJICBjb21tZW50czogewoJICAgIGFkZDogX2ZpbGVzQ29tbWVudHMyLmRlZmF1bHQsCgkgICAgZGVsZXRlOiBfZmlsZXNDb21tZW50czQuZGVmYXVsdCwKCSAgICBlZGl0OiBfZmlsZXNDb21tZW50czYuZGVmYXVsdAoJICB9LAoJICByZXZva2VQdWJsaWNVUkw6IF9maWxlczEwLmRlZmF1bHQsCgkgIHNoYXJlZFB1YmxpY1VSTDogX2ZpbGVzMTIuZGVmYXVsdAoJfTsKCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTY0ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgl2YXIgX2dyb3VwcyA9IF9fd2VicGFja19yZXF1aXJlX18oODkpOwoKCXZhciBfZ3JvdXBzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dyb3Vwcyk7CgoJdmFyIF9ncm91cHMzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MCk7CgoJdmFyIF9ncm91cHM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzMyk7CgoJdmFyIF9ncm91cHM1ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5MSk7CgoJdmFyIF9ncm91cHM2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzNSk7CgoJdmFyIF9ncm91cHM3ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Mik7CgoJdmFyIF9ncm91cHM4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzNyk7CgoJdmFyIF9ncm91cHM5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Myk7CgoJdmFyIF9ncm91cHMxMCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dyb3VwczkpOwoKCXZhciBfZ3JvdXBzMTEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk0KTsKCgl2YXIgX2dyb3VwczEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzMTEpOwoKCXZhciBfZ3JvdXBzMTMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk1KTsKCgl2YXIgX2dyb3VwczE0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzMTMpOwoKCXZhciBfZ3JvdXBzMTUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2KTsKCgl2YXIgX2dyb3VwczE2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzMTUpOwoKCXZhciBfZ3JvdXBzMTcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk3KTsKCgl2YXIgX2dyb3VwczE4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzMTcpOwoKCXZhciBfZ3JvdXBzMTkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk4KTsKCgl2YXIgX2dyb3VwczIwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzMTkpOwoKCXZhciBfZ3JvdXBzMjEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDk5KTsKCgl2YXIgX2dyb3VwczIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzMjEpOwoKCXZhciBfZ3JvdXBzMjMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMCk7CgoJdmFyIF9ncm91cHMyNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dyb3VwczIzKTsKCgl2YXIgX2dyb3VwczI1ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDEpOwoKCXZhciBfZ3JvdXBzMjYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ncm91cHMyNSk7CgoJdmFyIF9ncm91cHMyNyA9IF9fd2VicGFja19yZXF1aXJlX18oMTAzKTsKCgl2YXIgX2dyb3VwczI4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JvdXBzMjcpOwoKCXZhciBfZ3JvdXBzMjkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNCk7CgoJdmFyIF9ncm91cHMzMCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dyb3VwczI5KTsKCgl2YXIgX2dyb3VwczMxID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDUpOwoKCXZhciBfZ3JvdXBzMzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ncm91cHMzMSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglleHBvcnRzLmRlZmF1bHQgPSB7CgkgIGFyY2hpdmU6IF9ncm91cHMyLmRlZmF1bHQsCgkgIGNsb3NlOiBfZ3JvdXBzNC5kZWZhdWx0LAoJICBjcmVhdGU6IF9ncm91cHM2LmRlZmF1bHQsCgkgIGNyZWF0ZUNoaWxkOiBfZ3JvdXBzOC5kZWZhdWx0LAoJICBoaXN0b3J5OiBfZ3JvdXBzMTAuZGVmYXVsdCwKCSAgaW5mbzogX2dyb3VwczEyLmRlZmF1bHQsCgkgIGludml0ZTogX2dyb3VwczE0LmRlZmF1bHQsCgkgIGtpY2s6IF9ncm91cHMxNi5kZWZhdWx0LAoJICBsZWF2ZTogX2dyb3VwczE4LmRlZmF1bHQsCgkgIGxpc3Q6IF9ncm91cHMyMC5kZWZhdWx0LAoJICBtYXJrOiBfZ3JvdXBzMjIuZGVmYXVsdCwKCSAgb3BlbjogX2dyb3VwczI0LmRlZmF1bHQsCgkgIHJlbmFtZTogX2dyb3VwczI2LmRlZmF1bHQsCgkgIHNldFB1cnBvc2U6IF9ncm91cHMyOC5kZWZhdWx0LAoJICBzZXRUb3BpYzogX2dyb3VwczMwLmRlZmF1bHQsCgkgIHVuYXJjaGl2ZTogX2dyb3VwczMyLmRlZmF1bHQKCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE2NSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CgoJdmFyIF9pbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTA2KTsKCgl2YXIgX2ltMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ltKTsKCgl2YXIgX2ltMyA9IF9fd2VicGFja19yZXF1aXJlX18oMTA3KTsKCgl2YXIgX2ltNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ltMyk7CgoJdmFyIF9pbTUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOCk7CgoJdmFyIF9pbTYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbTUpOwoKCXZhciBfaW03ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDkpOwoKCXZhciBfaW04ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW03KTsKCgl2YXIgX2ltOSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEwKTsKCgl2YXIgX2ltMTAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbTkpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJZXhwb3J0cy5kZWZhdWx0ID0gewoJICBjbG9zZTogX2ltMi5kZWZhdWx0LCBoaXN0b3J5OiBfaW00LmRlZmF1bHQsIGxpc3Q6IF9pbTYuZGVmYXVsdCwgbWFyazogX2ltOC5kZWZhdWx0LCBvcGVuOiBfaW0xMC5kZWZhdWx0Cgl9OwoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNjYgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfbXBpbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTEyKTsKCgl2YXIgX21waW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbXBpbSk7CgoJdmFyIF9tcGltMyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEzKTsKCgl2YXIgX21waW00ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbXBpbTMpOwoKCXZhciBfbXBpbTUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNCk7CgoJdmFyIF9tcGltNiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21waW01KTsKCgl2YXIgX21waW03ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTUpOwoKCXZhciBfbXBpbTggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tcGltNyk7CgoJdmFyIF9tcGltOSA9IF9fd2VicGFja19yZXF1aXJlX18oMTE2KTsKCgl2YXIgX21waW0xMCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21waW05KTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCWV4cG9ydHMuZGVmYXVsdCA9IHsKCSAgY2xvc2U6IF9tcGltMi5kZWZhdWx0LAoJICBoaXN0b3J5OiBfbXBpbTQuZGVmYXVsdCwKCSAgbGlzdDogX21waW02LmRlZmF1bHQsCgkgIG1hcms6IF9tcGltOC5kZWZhdWx0LAoJICBvcGVuOiBfbXBpbTEwLmRlZmF1bHQKCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE2NyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBvYXV0aGFjY2VzczsKCgl2YXIgX2V4ZWMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpOwoKCXZhciBfZXhlYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leGVjKTsKCgl2YXIgX3ZhbGlkYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CgoJdmFyIF92YWxpZGF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWxpZGF0ZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyB0aGlzIGZpbGUgd2FzIGdlbmVyYXRlZCBieSAuL3NjcmlwdHMvZ2VuZXJhdGUtd2ViLWFwaQoJZnVuY3Rpb24gb2F1dGhhY2Nlc3MocGFyYW1zLCBjYWxsYmFjaykgewoJICB2YXIgbnMgPSAnb2F1dGguYWNjZXNzJzsKCSAgdmFyIGVyciA9ICgwLCBfdmFsaWRhdGUyLmRlZmF1bHQpKG5zLCBwYXJhbXMpOwoJICBpZiAoZXJyKSB7CgkgICAgY2FsbGJhY2soZXJyKTsKCSAgfSBlbHNlIHsKCSAgICAoMCwgX2V4ZWMyLmRlZmF1bHQpKG5zLCBwYXJhbXMsIGNhbGxiYWNrKTsKCSAgfQoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNjggKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfcmVhY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjEpOwoKCXZhciBfcmVhY3Rpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0aW9ucyk7CgoJdmFyIF9yZWFjdGlvbnMzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjIpOwoKCXZhciBfcmVhY3Rpb25zNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0aW9uczMpOwoKCXZhciBfcmVhY3Rpb25zNSA9IF9fd2VicGFja19yZXF1aXJlX18oMTIzKTsKCgl2YXIgX3JlYWN0aW9uczYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdGlvbnM1KTsKCgl2YXIgX3JlYWN0aW9uczcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNCk7CgoJdmFyIF9yZWFjdGlvbnM4ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3Rpb25zNyk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglleHBvcnRzLmRlZmF1bHQgPSB7CgkgIGFkZDogX3JlYWN0aW9uczIuZGVmYXVsdCwgZ2V0OiBfcmVhY3Rpb25zNC5kZWZhdWx0LCBsaXN0OiBfcmVhY3Rpb25zNi5kZWZhdWx0LCByZW1vdmU6IF9yZWFjdGlvbnM4LmRlZmF1bHQKCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE2OSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CgoJdmFyIF9yZW1pbmRlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNSk7CgoJdmFyIF9yZW1pbmRlcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVtaW5kZXJzKTsKCgl2YXIgX3JlbWluZGVyczMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyNik7CgoJdmFyIF9yZW1pbmRlcnM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVtaW5kZXJzMyk7CgoJdmFyIF9yZW1pbmRlcnM1ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjcpOwoKCXZhciBfcmVtaW5kZXJzNiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlbWluZGVyczUpOwoKCXZhciBfcmVtaW5kZXJzNyA9IF9fd2VicGFja19yZXF1aXJlX18oMTI4KTsKCgl2YXIgX3JlbWluZGVyczggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1pbmRlcnM3KTsKCgl2YXIgX3JlbWluZGVyczkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyOSk7CgoJdmFyIF9yZW1pbmRlcnMxMCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlbWluZGVyczkpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJZXhwb3J0cy5kZWZhdWx0ID0gewoJICBhZGQ6IF9yZW1pbmRlcnMyLmRlZmF1bHQsIGNvbXBsZXRlOiBfcmVtaW5kZXJzNC5kZWZhdWx0LCBkZWxldGU6IF9yZW1pbmRlcnM2LmRlZmF1bHQsIGluZm86IF9yZW1pbmRlcnM4LmRlZmF1bHQsIGxpc3Q6IF9yZW1pbmRlcnMxMC5kZWZhdWx0Cgl9OwoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNzAgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfcGlucyA9IF9fd2VicGFja19yZXF1aXJlX18oMTE4KTsKCgl2YXIgX3BpbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGlucyk7CgoJdmFyIF9waW5zMyA9IF9fd2VicGFja19yZXF1aXJlX18oMTE5KTsKCgl2YXIgX3BpbnM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGluczMpOwoKCXZhciBfcGluczUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMCk7CgoJdmFyIF9waW5zNiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BpbnM1KTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCWV4cG9ydHMuZGVmYXVsdCA9IHsKCSAgYWRkOiBfcGluczIuZGVmYXVsdCwgbGlzdDogX3BpbnM0LmRlZmF1bHQsIHJlbW92ZTogX3BpbnM2LmRlZmF1bHQKCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE3MSAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLmRlZmF1bHQgPSBjbGllbnQ7CgoJdmFyIF9ydG0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzMCk7CgoJdmFyIF9ydG0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnRtKTsKCgl2YXIgX3J0bTMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3Mik7CgoJdmFyIF9ydG00ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcnRtMyk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvLyBzb2NrZXQgZmFjdG9yeQoJZnVuY3Rpb24gY2xpZW50KCkgewoKCSAgLy8gYnVpbGQgYSBuZXcgYm90IGV2ZXJ5IHRpbWUKCSAgdmFyIGJvdCA9IHsKCSAgICBoYW5kbGVyczogewoJICAgICAgc3RhcnRlZDogW10KCSAgICB9CgkgIH07CgoJICAvLyBhZGQgdW5kb2N1bWVudGVkIHBpbmcgZXZlbnQKCSAgX3J0bTQuZGVmYXVsdC5wdXNoKCdwb25nJyk7CgoJICAvLyBnZW5lcmF0ZSBldmVudCBoYW5kbGVyIHJlZ2lzdHJhdGlvbiBtZXRob2RzCgkgIF9ydG00LmRlZmF1bHQuZm9yRWFjaChmdW5jdGlvbiAoZSkgewoJICAgIGJvdC5oYW5kbGVyc1tlXSA9IFtdOwoJICAgIGJvdFtlXSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7CgkgICAgICBib3QuaGFuZGxlcnNbZV0ucHVzaChoYW5kbGVyKTsKCSAgICB9OwoJICB9KTsKCgkgIGJvdC5zdGFydGVkID0gZnVuY3Rpb24gKGhhbmRsZXIpIHsKCSAgICBib3QuaGFuZGxlcnNbJ3N0YXJ0ZWQnXS5wdXNoKGhhbmRsZXIpOwoJICB9OwoKCSAgLy8ga2lja3MgdXAgYSB3ZWIgc29ja2V0IGNvbm5lY3Rpb24KCSAgYm90Lmxpc3RlbiA9IGZ1bmN0aW9uIGJvdExpc3RlbihwYXJhbXMsIGNhbGxiYWNrKSB7CgkgICAgKDAsIF9ydG0yLmRlZmF1bHQpKHBhcmFtcywgZnVuY3Rpb24gKGVyciwgZGF0YSkgewoJICAgICAgaWYgKGVycikgewoJICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGVycik7ZWxzZSB0aHJvdyBlcnI7CgkgICAgICB9IGVsc2UgewoJICAgICAgICAvLyBncmFiIGEgaGFuZGxlIG9uIHRoZSBzb2NrZXQKCSAgICAgICAgYm90LndzID0gbmV3IFdlYlNvY2tldChkYXRhLnVybCk7CgkgICAgICAgIC8vIGRlbGVnYXRlIGV2ZXJ5dGhpbmcKCSAgICAgICAgYm90LndzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIG1lc3NhZ2UoZSkgewoJICAgICAgICAgIHZhciBqc29uID0gSlNPTi5wYXJzZShlLmRhdGEpOwoJICAgICAgICAgIGJvdC5oYW5kbGVyc1tqc29uLnR5cGVdLmZvckVhY2goZnVuY3Rpb24gKG0pIHsKCSAgICAgICAgICAgIHJldHVybiBtLmNhbGwoe30sIGpzb24pOwoJICAgICAgICAgIH0pOwoJICAgICAgICB9OwoJICAgICAgICAvLyBjYWxsIHN0YXJ0ZWQgY2FsbGJhY2tzCgkgICAgICAgIGJvdC5oYW5kbGVyc1snc3RhcnRlZCddLmZvckVhY2goZnVuY3Rpb24gKG0pIHsKCSAgICAgICAgICByZXR1cm4gbS5jYWxsKHt9LCBkYXRhKTsKCSAgICAgICAgfSk7CgkgICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2sobnVsbCwgZGF0YSk7CgkgICAgICB9CgkgICAgfSk7CgkgIH07CgoJICAvLyBjbG9zZXMgdGhlIHNvY2tldAoJICBib3QuY2xvc2UgPSBmdW5jdGlvbiBib3RDbG9zZSgpIHsKCSAgICBib3Qud3MuY2xvc2UoKTsKCSAgfTsKCgkgIC8vLy8vLy8vLy8KCSAgcmV0dXJuIGJvdDsKCX0KCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTcyICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgkvLyBnZW5lcmF0ZWQgdXNpbmcgLi9zY3JpcHRzL2dlbmVyYXRlLWFsbAoJdmFyIGV2ZW50cyA9IFsnYWNjb3VudHNfY2hhbmdlZCcsICdib3RfYWRkZWQnLCAnYm90X2NoYW5nZWQnLCAnY2hhbm5lbF9hcmNoaXZlJywgJ2NoYW5uZWxfY3JlYXRlZCcsICdjaGFubmVsX2RlbGV0ZWQnLCAnY2hhbm5lbF9oaXN0b3J5X2NoYW5nZWQnLCAnY2hhbm5lbF9qb2luZWQnLCAnY2hhbm5lbF9sZWZ0JywgJ2NoYW5uZWxfbWFya2VkJywgJ2NoYW5uZWxfcmVuYW1lJywgJ2NoYW5uZWxfdW5hcmNoaXZlJywgJ2NvbW1hbmRzX2NoYW5nZWQnLCAnZG5kX3VwZGF0ZWQnLCAnZG5kX3VwZGF0ZWRfdXNlcicsICdlbWFpbF9kb21haW5fY2hhbmdlZCcsICdlbW9qaV9jaGFuZ2VkJywgJ2ZpbGVfY2hhbmdlJywgJ2ZpbGVfY29tbWVudF9hZGRlZCcsICdmaWxlX2NvbW1lbnRfZGVsZXRlZCcsICdmaWxlX2NvbW1lbnRfZWRpdGVkJywgJ2ZpbGVfY3JlYXRlZCcsICdmaWxlX2RlbGV0ZWQnLCAnZmlsZV9wdWJsaWMnLCAnZmlsZV9zaGFyZWQnLCAnZmlsZV91bnNoYXJlZCcsICdnb29kYnllJywgJ2dyb3VwX2FyY2hpdmUnLCAnZ3JvdXBfY2xvc2UnLCAnZ3JvdXBfaGlzdG9yeV9jaGFuZ2VkJywgJ2dyb3VwX2pvaW5lZCcsICdncm91cF9sZWZ0JywgJ2dyb3VwX21hcmtlZCcsICdncm91cF9vcGVuJywgJ2dyb3VwX3JlbmFtZScsICdncm91cF91bmFyY2hpdmUnLCAnaGVsbG8nLCAnaW1fY2xvc2UnLCAnaW1fY3JlYXRlZCcsICdpbV9oaXN0b3J5X2NoYW5nZWQnLCAnaW1fbWFya2VkJywgJ2ltX29wZW4nLCAnbWFudWFsX3ByZXNlbmNlX2NoYW5nZScsICdtZXNzYWdlJywgJ21lc3NhZ2UuY2hhbm5lbHMnLCAnbWVzc2FnZS5ncm91cHMnLCAnbWVzc2FnZS5pbScsICdtZXNzYWdlLm1waW0nLCAncGluX2FkZGVkJywgJ3Bpbl9yZW1vdmVkJywgJ3BvbmcnLCAncHJlZl9jaGFuZ2UnLCAncHJlc2VuY2VfY2hhbmdlJywgJ3JlYWN0aW9uX2FkZGVkJywgJ3JlYWN0aW9uX3JlbW92ZWQnLCAncmVjb25uZWN0X3VybCcsICdzdGFyX2FkZGVkJywgJ3N0YXJfcmVtb3ZlZCcsICdzdWJ0ZWFtX2NyZWF0ZWQnLCAnc3VidGVhbV9zZWxmX2FkZGVkJywgJ3N1YnRlYW1fc2VsZl9yZW1vdmVkJywgJ3N1YnRlYW1fdXBkYXRlZCcsICd0ZWFtX2RvbWFpbl9jaGFuZ2UnLCAndGVhbV9qb2luJywgJ3RlYW1fbWlncmF0aW9uX3N0YXJ0ZWQnLCAndGVhbV9wbGFuX2NoYW5nZScsICd0ZWFtX3ByZWZfY2hhbmdlJywgJ3RlYW1fcHJvZmlsZV9jaGFuZ2UnLCAndGVhbV9wcm9maWxlX2RlbGV0ZScsICd0ZWFtX3Byb2ZpbGVfcmVvcmRlcicsICd0ZWFtX3JlbmFtZScsICd1cmxfdmVyaWZpY2F0aW9uJywgJ3VzZXJfY2hhbmdlJywgJ3VzZXJfdHlwaW5nJ107CgoJZXhwb3J0cy5kZWZhdWx0ID0gZXZlbnRzOwoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9LAovKiAxNzMgKi8KLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJJ3VzZSBzdHJpY3QnOwoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfc2VhcmNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzEpOwoKCXZhciBfc2VhcmNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlYXJjaCk7CgoJdmFyIF9zZWFyY2gzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzIpOwoKCXZhciBfc2VhcmNoNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NlYXJjaDMpOwoKCXZhciBfc2VhcmNoNSA9IF9fd2VicGFja19yZXF1aXJlX18oMTMzKTsKCgl2YXIgX3NlYXJjaDYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZWFyY2g1KTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCWV4cG9ydHMuZGVmYXVsdCA9IHsKCSAgYWxsOiBfc2VhcmNoMi5kZWZhdWx0LCBmaWxlczogX3NlYXJjaDQuZGVmYXVsdCwgbWVzc2FnZXM6IF9zZWFyY2g2LmRlZmF1bHQKCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE3NCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CgoJdmFyIF9zdGFycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTM0KTsKCgl2YXIgX3N0YXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0YXJzKTsKCgl2YXIgX3N0YXJzMyA9IF9fd2VicGFja19yZXF1aXJlX18oMTM1KTsKCgl2YXIgX3N0YXJzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N0YXJzMyk7CgoJdmFyIF9zdGFyczUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNik7CgoJdmFyIF9zdGFyczYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdGFyczUpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJZXhwb3J0cy5kZWZhdWx0ID0gewoJICBhZGQ6IF9zdGFyczIuZGVmYXVsdCwgbGlzdDogX3N0YXJzNC5kZWZhdWx0LCByZW1vdmU6IF9zdGFyczYuZGVmYXVsdAoJfTsKCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSwKLyogMTc1ICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgl2YXIgX3RlYW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNyk7CgoJdmFyIF90ZWFtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RlYW0pOwoKCXZhciBfdGVhbTMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzOCk7CgoJdmFyIF90ZWFtNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RlYW0zKTsKCgl2YXIgX3RlYW01ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMzkpOwoKCXZhciBfdGVhbTYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZWFtNSk7CgoJdmFyIF90ZWFtNyA9IF9fd2VicGFja19yZXF1aXJlX18oMTQwKTsKCgl2YXIgX3RlYW04ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGVhbTcpOwoKCXZhciBfdGVhbVByb2ZpbGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0MSk7CgoJdmFyIF90ZWFtUHJvZmlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90ZWFtUHJvZmlsZSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglleHBvcnRzLmRlZmF1bHQgPSB7CgkgIGFjY2Vzc0xvZ3M6IF90ZWFtMi5kZWZhdWx0LAoJICBiaWxsYWJsZUluZm86IF90ZWFtNC5kZWZhdWx0LAoJICBpbmZvOiBfdGVhbTYuZGVmYXVsdCwKCSAgaW50ZWdyYXRpb25Mb2dzOiBfdGVhbTguZGVmYXVsdCwKCSAgcHJvZmlsZTogewoJICAgIGdldDogX3RlYW1Qcm9maWxlMi5kZWZhdWx0CgkgIH0KCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE3NiAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CgoJdmFyIF91c2VyZ3JvdXBzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDIpOwoKCXZhciBfdXNlcmdyb3VwczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VyZ3JvdXBzKTsKCgl2YXIgX3VzZXJncm91cHMzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDMpOwoKCXZhciBfdXNlcmdyb3VwczQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VyZ3JvdXBzMyk7CgoJdmFyIF91c2VyZ3JvdXBzNSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQ0KTsKCgl2YXIgX3VzZXJncm91cHM2ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlcmdyb3VwczUpOwoKCXZhciBfdXNlcmdyb3VwczcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0NSk7CgoJdmFyIF91c2VyZ3JvdXBzOCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZXJncm91cHM3KTsKCgl2YXIgX3VzZXJncm91cHM5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDYpOwoKCXZhciBfdXNlcmdyb3VwczEwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlcmdyb3VwczkpOwoKCXZhciBfdXNlcmdyb3Vwc1VzZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDcpOwoKCXZhciBfdXNlcmdyb3Vwc1VzZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZXJncm91cHNVc2Vycyk7CgoJdmFyIF91c2VyZ3JvdXBzVXNlcnMzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDgpOwoKCXZhciBfdXNlcmdyb3Vwc1VzZXJzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZXJncm91cHNVc2VyczMpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJZXhwb3J0cy5kZWZhdWx0ID0gewoJICBjcmVhdGU6IF91c2VyZ3JvdXBzMi5kZWZhdWx0LAoJICBkaXNhYmxlOiBfdXNlcmdyb3VwczQuZGVmYXVsdCwKCSAgZW5hYmxlOiBfdXNlcmdyb3VwczYuZGVmYXVsdCwKCSAgbGlzdDogX3VzZXJncm91cHM4LmRlZmF1bHQsCgkgIHVwZGF0ZTogX3VzZXJncm91cHMxMC5kZWZhdWx0LAoJICB1c2VyczogewoJICAgIGxpc3Q6IF91c2VyZ3JvdXBzVXNlcnMyLmRlZmF1bHQsCgkgICAgdXBkYXRlOiBfdXNlcmdyb3Vwc1VzZXJzNC5kZWZhdWx0CgkgIH0KCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE3NyAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkndXNlIHN0cmljdCc7CgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CgoJdmFyIF91c2VycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUwKTsKCgl2YXIgX3VzZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZXJzKTsKCgl2YXIgX3VzZXJzUHJvZmlsZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTU0KTsKCgl2YXIgX3VzZXJzUHJvZmlsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2Vyc1Byb2ZpbGUpOwoKCXZhciBfdXNlcnMzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTEpOwoKCXZhciBfdXNlcnM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdXNlcnMzKTsKCgl2YXIgX3VzZXJzNSA9IF9fd2VicGFja19yZXF1aXJlX18oMTUyKTsKCgl2YXIgX3VzZXJzNiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZXJzNSk7CgoJdmFyIF91c2VyczcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1Myk7CgoJdmFyIF91c2VyczggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2VyczcpOwoKCXZhciBfdXNlcnM5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTYpOwoKCXZhciBfdXNlcnMxMCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZXJzOSk7CgoJdmFyIF91c2VyczExID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNTgpOwoKCXZhciBfdXNlcnMxMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3VzZXJzMTEpOwoKCXZhciBfdXNlcnNQcm9maWxlMyA9IF9fd2VicGFja19yZXF1aXJlX18oMTU1KTsKCgl2YXIgX3VzZXJzUHJvZmlsZTQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF91c2Vyc1Byb2ZpbGUzKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCWV4cG9ydHMuZGVmYXVsdCA9IHsKCSAgZ2V0UHJlc2VuY2U6IF91c2VyczIuZGVmYXVsdCwKCSAgaWRlbnRpdHk6IF91c2VyczQuZGVmYXVsdCwKCSAgaW5mbzogX3VzZXJzNi5kZWZhdWx0LAoJICBsaXN0OiBfdXNlcnM4LmRlZmF1bHQsCgkgIHByb2ZpbGU6IHsKCSAgICBnZXQ6IF91c2Vyc1Byb2ZpbGUyLmRlZmF1bHQsCgkgICAgc2V0OiBfdXNlcnNQcm9maWxlNC5kZWZhdWx0CgkgIH0sCgkgIHNldEFjdGl2ZTogX3VzZXJzMTAuZGVmYXVsdCwKCSAgc2V0UHJlc2VuY2U6IF91c2VyczEyLmRlZmF1bHQKCX07Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCi8qKiovIH0sCi8qIDE3OCAqLwovKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvLyB2ZXJzaW9uOiAwLjUuMQoJLy8gZGF0ZTogVHVlIEZlYiAwNyAyMDE3IDE1OjE0OjA2IEdNVCswMDAwIChXRVQpCgkvLyBsaWNlbmNlOiAKCS8qKgoJKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKCSogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKCSogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCgkqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCgkqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoJKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCgkqIENvcHlyaWdodCAyMDE2IEFwaXplZQoJKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoJKgoJKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKCSogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoJKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCSoKCSogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCSoKCSogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoJKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoJKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KCSogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoJKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCSoqLwoKCgkoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkgewoJCWlmKHRydWUpCgkJCW1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpOwoJCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCQlkZWZpbmUoIlN5bmNoZXIiLCBbXSwgZmFjdG9yeSk7CgkJZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpCgkJCWV4cG9ydHNbIlN5bmNoZXIiXSA9IGZhY3RvcnkoKTsKCQllbHNlCgkJCXJvb3RbIiJdID0gcm9vdFsiIl0gfHwge30sIHJvb3RbIiJdWyJTeW5jaGVyIl0gPSBmYWN0b3J5KCk7Cgl9KSh0aGlzLCBmdW5jdGlvbigpIHsKCXJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwCgkvKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQoJLyoqKioqKi8gCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307CgkvKioqKioqLwoJLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCgkvKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewoJLyoqKioqKi8KCS8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCgkvKioqKioqLyAJCWlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKQoJLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7CgkvKioqKioqLwoJLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQoJLyoqKioqKi8gCQl2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7CgkvKioqKioqLyAJCQlpOiBtb2R1bGVJZCwKCS8qKioqKiovIAkJCWw6IGZhbHNlLAoJLyoqKioqKi8gCQkJZXhwb3J0czoge30KCS8qKioqKiovIAkJfTsKCS8qKioqKiovCgkvKioqKioqLyAJCS8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbgoJLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKCS8qKioqKiovCgkvKioqKioqLyAJCS8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWQKCS8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOwoJLyoqKioqKi8KCS8qKioqKiovIAkJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKCS8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwoJLyoqKioqKi8gCX0KCS8qKioqKiovCgkvKioqKioqLwoJLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCgkvKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlczsKCS8qKioqKiovCgkvKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKCS8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwoJLyoqKioqKi8KCS8qKioqKiovIAkvLyBpZGVudGl0eSBmdW5jdGlvbiBmb3IgY2FsbGluZyBoYXJtb255IGltcG9ydHMgd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0CgkvKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9OwoJLyoqKioqKi8KCS8qKioqKiovIAkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHMKCS8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHsKCS8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewoJLyoqKioqKi8gCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsKCS8qKioqKiovIAkJCQljb25maWd1cmFibGU6IGZhbHNlLAoJLyoqKioqKi8gCQkJCWVudW1lcmFibGU6IHRydWUsCgkvKioqKioqLyAJCQkJZ2V0OiBnZXR0ZXIKCS8qKioqKiovIAkJCX0pOwoJLyoqKioqKi8gCQl9CgkvKioqKioqLyAJfTsKCS8qKioqKiovCgkvKioqKioqLyAJLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXMKCS8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHsKCS8qKioqKiovIAkJdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/CgkvKioqKioqLyAJCQlmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOgoJLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTsKCS8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpOwoJLyoqKioqKi8gCQlyZXR1cm4gZ2V0dGVyOwoJLyoqKioqKi8gCX07CgkvKioqKioqLwoJLyoqKioqKi8gCS8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbAoJLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTsKCS8qKioqKiovCgkvKioqKioqLyAJLy8gX193ZWJwYWNrX3B1YmxpY19wYXRoX18KCS8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKCS8qKioqKiovCgkvKioqKioqLyAJLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzCgkvKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTYyKTsKCS8qKioqKiovIH0pCgkvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwoJLyoqKioqKi8gKFsKCS8qIDAgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgl2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9OwoJaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmCgoJLyoqKi8gfSksCgkvKiAxICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjgKCXZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aAoJICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7CglpZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZgoKCS8qKiovIH0pLAoJLyogMiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBzdG9yZSAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCkoJ3drcycpCgkgICwgdWlkICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpCgkgICwgU3ltYm9sICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSkuU3ltYm9sCgkgICwgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJzsKCgl2YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpewoJICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID0KCSAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpOwoJfTsKCgkkZXhwb3J0cy5zdG9yZSA9IHN0b3JlOwoKCS8qKiovIH0pLAoJLyogMyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHkKCW1vZHVsZS5leHBvcnRzID0gIV9fd2VicGFja19yZXF1aXJlX18oMTEpKGZ1bmN0aW9uKCl7CgkgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7Cgl9KTsKCgkvKioqLyB9KSwKCS8qIDQgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgYW5PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpCgkgICwgSUU4X0RPTV9ERUZJTkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI5KQoJICAsIHRvUHJpbWl0aXZlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMikKCSAgLCBkUCAgICAgICAgICAgICA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKCglleHBvcnRzLmYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7CgkgIGFuT2JqZWN0KE8pOwoJICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7CgkgIGFuT2JqZWN0KEF0dHJpYnV0ZXMpOwoJICBpZihJRThfRE9NX0RFRklORSl0cnkgewoJICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTsKCSAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfQoJICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTsKCSAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlOwoJICByZXR1cm4gTzsKCX07CgoJLyoqKi8gfSksCgkvKiA1ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewoJICBpZighaXNPYmplY3QoaXQpKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTsKCSAgcmV0dXJuIGl0OwoJfTsKCgkvKioqLyB9KSwKCS8qIDYgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgZFAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNCkKCSAgLCBjcmVhdGVEZXNjID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7Cgltb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpewoJICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpOwoJfSA6IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7CgkgIG9iamVjdFtrZXldID0gdmFsdWU7CgkgIHJldHVybiBvYmplY3Q7Cgl9OwoKCS8qKiovIH0pLAoJLyogNyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewoJICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nOwoJfTsKCgkvKioqLyB9KSwKCS8qIDggKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQoJICAsIGNvcmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMCkKCSAgLCBjdHggICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KQoJICAsIGhpZGUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNikKCSAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJzsKCgl2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7CgkgIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GCgkgICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HCgkgICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TCgkgICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QCgkgICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CCgkgICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XCgkgICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KQoJICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdCgkgICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdCgkgICAgLCBrZXksIG93biwgb3V0OwoJICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTsKCSAgZm9yKGtleSBpbiBzb3VyY2UpewoJICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQoJICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7CgkgICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlOwoJICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkCgkgICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTsKCSAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXMKCSAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XQoJICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0CgkgICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkKCSAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeQoJICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7CgkgICAgICB2YXIgRiA9IGZ1bmN0aW9uKGEsIGIsIGMpewoJICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7CgkgICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpewoJICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEM7CgkgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTsKCSAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpOwoJICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpOwoJICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CgkgICAgICB9OwoJICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdOwoJICAgICAgcmV0dXJuIEY7CgkgICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzCgkgICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0OwoJICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJQoJICAgIGlmKElTX1BST1RPKXsKCSAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDsKCSAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlCgkgICAgICBpZih0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKWhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTsKCSAgICB9CgkgIH0KCX07CgkvLyB0eXBlIGJpdG1hcAoJJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWQKCSRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsCgkkZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpYwoJJGV4cG9ydC5QID0gODsgICAvLyBwcm90bwoJJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kCgkkZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXAKCSRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZQoJJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIAoJbW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0OwoKCS8qKiovIH0pLAoJLyogOSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSJ1c2Ugc3RyaWN0IjsKCgoJZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCglleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CgkgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7CgkgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CgkgIH0KCX07CgoJLyoqKi8gfSksCgkvKiAxMCAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSJ1c2Ugc3RyaWN0IjsKCgoJZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCgl2YXIgX2RlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNik7CgoJdmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7CgkgIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgewoJICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKCSAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07CgkgICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7CgkgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7CgkgICAgICBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsKCSAgICAgICgwLCBfZGVmaW5lUHJvcGVydHkyLmRlZmF1bHQpKHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOwoJICAgIH0KCSAgfQoKCSAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsKCSAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwoJICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwoJICAgIHJldHVybiBDb25zdHJ1Y3RvcjsKCSAgfTsKCX0oKTsKCgkvKioqLyB9KSwKCS8qIDExICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXsKCSAgdHJ5IHsKCSAgICByZXR1cm4gISFleGVjKCk7CgkgIH0gY2F0Y2goZSl7CgkgICAgcmV0dXJuIHRydWU7CgkgIH0KCX07CgoJLyoqKi8gfSksCgkvKiAxMiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCXZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5OwoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXsKCSAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7Cgl9OwoKCS8qKiovIH0pLAoJLyogMTMgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3MKCXZhciBJT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NikKCSAgLCBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7Cgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKCSAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpOwoJfTsKCgkvKioqLyB9KSwKCS8qIDE0ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nCgl2YXIgYUZ1bmN0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMCk7Cgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpewoJICBhRnVuY3Rpb24oZm4pOwoJICBpZih0aGF0ID09PSB1bmRlZmluZWQpcmV0dXJuIGZuOwoJICBzd2l0Y2gobGVuZ3RoKXsKCSAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbihhKXsKCSAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpOwoJICAgIH07CgkgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24oYSwgYil7CgkgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTsKCSAgICB9OwoJICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpewoJICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7CgkgICAgfTsKCSAgfQoJICByZXR1cm4gZnVuY3Rpb24oLyogLi4uYXJncyAqLyl7CgkgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7CgkgIH07Cgl9OwoKCS8qKiovIH0pLAoJLyogMTUgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgltb2R1bGUuZXhwb3J0cyA9IHt9OwoKCS8qKiovIH0pLAoJLyogMTYgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGJpdG1hcCwgdmFsdWUpewoJICByZXR1cm4gewoJICAgIGVudW1lcmFibGUgIDogIShiaXRtYXAgJiAxKSwKCSAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksCgkgICAgd3JpdGFibGUgICAgOiAhKGJpdG1hcCAmIDQpLAoJICAgIHZhbHVlICAgICAgIDogdmFsdWUKCSAgfTsKCX07CgoJLyoqKi8gfSksCgkvKiAxNyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKQoJdmFyICRrZXlzICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NCkKCSAgLCBlbnVtQnVnS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMjgpOwoKCW1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKXsKCSAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTsKCX07CgoJLyoqKi8gfSksCgkvKiAxOCAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCXZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nOwoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewoJICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpOwoJfTsKCgkvKioqLyB9KSwKCS8qIDE5ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KQoJICAsIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKS5kb2N1bWVudAoJICAvLyBpbiBvbGQgSUUgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcKCSAgLCBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewoJICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9OwoJfTsKCgkvKioqLyB9KSwKCS8qIDIwICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CgkgIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7CgkgIHJldHVybiBpdDsKCX07CgoJLyoqKi8gfSksCgkvKiAyMSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBkZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpLmYKCSAgLCBoYXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKQoJICAsIFRBRyA9IF9fd2VicGFja19yZXF1aXJlX18oMikoJ3RvU3RyaW5nVGFnJyk7CgoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgdGFnLCBzdGF0KXsKCSAgaWYoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlkZWYoaXQsIFRBRywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZ30pOwoJfTsKCgkvKioqLyB9KSwKCS8qIDIyICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pCgl2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpOwoJLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2UKCS8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nCgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXsKCSAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7CgkgIHZhciBmbiwgdmFsOwoJICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7CgkgIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDsKCSAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDsKCSAgdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUiKTsKCX07CgoJLyoqKi8gfSksCgkvKiAyMyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCXZhciBpZCA9IDAKCSAgLCBweCA9IE1hdGgucmFuZG9tKCk7Cgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7CgkgIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7Cgl9OwoKCS8qKiovIH0pLAoJLyogMjQgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgkvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KQoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CgkgIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoIkNhbid0IGNhbGwgbWV0aG9kIG9uICAiICsgaXQpOwoJICByZXR1cm4gaXQ7Cgl9OwoKCS8qKiovIH0pLAoJLyogMjUgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgltb2R1bGUuZXhwb3J0cyA9IHRydWU7CgoJLyoqKi8gfSksCgkvKiAyNiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBzaGFyZWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwKSgna2V5cycpCgkgICwgdWlkICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMyk7Cgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7CgkgIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7Cgl9OwoKCS8qKiovIH0pLAoJLyogMjcgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgkvLyA3LjEuNCBUb0ludGVnZXIKCXZhciBjZWlsICA9IE1hdGguY2VpbAoJICAsIGZsb29yID0gTWF0aC5mbG9vcjsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewoJICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTsKCX07CgoJLyoqKi8gfSksCgkvKiAyOCAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCS8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXMKCW1vZHVsZS5leHBvcnRzID0gKAoJICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJwoJKS5zcGxpdCgnLCcpOwoKCS8qKiovIH0pLAoJLyogMjkgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgltb2R1bGUuZXhwb3J0cyA9ICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fKDExKShmdW5jdGlvbigpewoJICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fd2VicGFja19yZXF1aXJlX18oMTkpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNzsKCX0pOwoKCS8qKiovIH0pLAoJLyogMzAgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQoJICAsIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nCgkgICwgc3RvcmUgID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pOwoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpewoJICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTsKCX07CgoJLyoqKi8gfSksCgkvKiAzMSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCW1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IF9fd2VicGFja19yZXF1aXJlX18oNzkpLCBfX2VzTW9kdWxlOiB0cnVlIH07CgoJLyoqKi8gfSksCgkvKiAzMiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudCkKCXZhciBkZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7Cgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXsKCSAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7Cgl9OwoKCS8qKiovIH0pLAoJLyogMzMgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkidXNlIHN0cmljdCI7CgoKCWV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7CgoJdmFyIF9zZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpOwoKCXZhciBfc2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0UHJvdG90eXBlT2YpOwoKCXZhciBfY3JlYXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7CgoJdmFyIF9jcmVhdGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlKTsKCgl2YXIgX3R5cGVvZjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU5KTsKCgl2YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCWV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykgewoJICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgewoJICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIiArICh0eXBlb2Ygc3VwZXJDbGFzcyA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpOwoJICB9CgoJICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgewoJICAgIGNvbnN0cnVjdG9yOiB7CgkgICAgICB2YWx1ZTogc3ViQ2xhc3MsCgkgICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKCSAgICAgIHdyaXRhYmxlOiB0cnVlLAoJICAgICAgY29uZmlndXJhYmxlOiB0cnVlCgkgICAgfQoJICB9KTsKCSAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCA/ICgwLCBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7Cgl9OwoKCS8qKiovIH0pLAoJLyogMzQgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkidXNlIHN0cmljdCI7CgoKCWV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7CgoJdmFyIF90eXBlb2YyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OSk7CgoJdmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglleHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkgewoJICBpZiAoIXNlbGYpIHsKCSAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOwoJICB9CgoJICByZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGNhbGwpKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpID8gY2FsbCA6IHNlbGY7Cgl9OwoKCS8qKiovIH0pLAoJLyogMzUgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSkKCXZhciBhbk9iamVjdCAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNSkKCSAgLCBkUHMgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNjQpCgkgICwgZW51bUJ1Z0tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KQoJICAsIElFX1BST1RPICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNikoJ0lFX1BST1RPJykKCSAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH0KCSAgLCBQUk9UT1RZUEUgICA9ICdwcm90b3R5cGUnOwoKCS8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGUKCXZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXsKCSAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWcKCSAgdmFyIGlmcmFtZSA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpKCdpZnJhbWUnKQoJICAgICwgaSAgICAgID0gZW51bUJ1Z0tleXMubGVuZ3RoCgkgICAgLCBsdCAgICAgPSAnPCcKCSAgICAsIGd0ICAgICA9ICc+JwoJICAgICwgaWZyYW1lRG9jdW1lbnQ7CgkgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwoJICBfX3dlYnBhY2tfcmVxdWlyZV9fKDQyKS5hcHBlbmRDaGlsZChpZnJhbWUpOwoJICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsCgkgIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7CgkgIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTsKCSAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDsKCSAgaWZyYW1lRG9jdW1lbnQub3BlbigpOwoJICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7CgkgIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7CgkgIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GOwoJICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07CgkgIHJldHVybiBjcmVhdGVEaWN0KCk7Cgl9OwoKCW1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7CgkgIHZhciByZXN1bHQ7CgkgIGlmKE8gIT09IG51bGwpewoJICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTsKCSAgICByZXN1bHQgPSBuZXcgRW1wdHk7CgkgICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7CgkgICAgLy8gYWRkICJfX3Byb3RvX18iIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGwKCSAgICByZXN1bHRbSUVfUFJPVE9dID0gTzsKCSAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTsKCSAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpOwoJfTsKCgoJLyoqKi8gfSksCgkvKiAzNiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCW1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IF9fd2VicGFja19yZXF1aXJlX18oMzcpLCBfX2VzTW9kdWxlOiB0cnVlIH07CgoJLyoqKi8gfSksCgkvKiAzNyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCV9fd2VicGFja19yZXF1aXJlX18oMzkpOwoJdmFyICRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLk9iamVjdDsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyl7CgkgIHJldHVybiAkT2JqZWN0LmRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2MpOwoJfTsKCgkvKioqLyB9KSwKCS8qIDM4ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJInVzZSBzdHJpY3QiOwoKCXZhciBMSUJSQVJZICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpCgkgICwgJGV4cG9ydCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpCgkgICwgcmVkZWZpbmUgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KQoJICAsIGhpZGUgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KQoJICAsIGhhcyAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMikKCSAgLCBJdGVyYXRvcnMgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpCgkgICwgJGl0ZXJDcmVhdGUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYyKQoJICAsIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSkKCSAgLCBnZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNDMpCgkgICwgSVRFUkFUT1IgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKCdpdGVyYXRvcicpCgkgICwgQlVHR1kgICAgICAgICAgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSkgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YAoJICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InCgkgICwgS0VZUyAgICAgICAgICAgPSAna2V5cycKCSAgLCBWQUxVRVMgICAgICAgICA9ICd2YWx1ZXMnOwoKCXZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH07CgoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpewoJICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7CgkgIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXsKCSAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07CgkgICAgc3dpdGNoKGtpbmQpewoJICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9OwoJICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTsKCSAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07CgkgIH07CgkgIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InCgkgICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVMKCSAgICAsIFZBTFVFU19CVUcgPSBmYWxzZQoJICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlCgkgICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdCgkgICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCkKCSAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkCgkgICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZQoJICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTsKCSAgLy8gRml4IG5hdGl2ZQoJICBpZigkYW55TmF0aXZlKXsKCSAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpOwoJICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXsKCSAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnMKCSAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpOwoJICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzCgkgICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpOwoJICAgIH0KCSAgfQoJICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGCgkgIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7CgkgICAgVkFMVUVTX0JVRyA9IHRydWU7CgkgICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTsKCSAgfQoJICAvLyBEZWZpbmUgaXRlcmF0b3IKCSAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpewoJICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7CgkgIH0KCSAgLy8gUGx1ZyBmb3IgbGlicmFyeQoJICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDsKCSAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpczsKCSAgaWYoREVGQVVMVCl7CgkgICAgbWV0aG9kcyA9IHsKCSAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLAoJICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLAoJICAgICAgZW50cmllczogJGVudHJpZXMKCSAgICB9OwoJICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpewoJICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7CgkgICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTsKCSAgfQoJICByZXR1cm4gbWV0aG9kczsKCX07CgoJLyoqKi8gfSksCgkvKiAzOSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTsKCS8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpCgkkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFfX3dlYnBhY2tfcmVxdWlyZV9fKDMpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpLmZ9KTsKCgkvKioqLyB9KSwKCS8qIDQwICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg1MyksIF9fZXNNb2R1bGU6IHRydWUgfTsKCgkvKioqLyB9KSwKCS8qIDQxICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7CgoJLyoqKi8gfSksCgkvKiA0MiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCW1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgoJLyoqKi8gfSksCgkvKiA0MyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pCgl2YXIgaGFzICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKQoJICAsIHRvT2JqZWN0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMikKCSAgLCBJRV9QUk9UTyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpKCdJRV9QUk9UTycpCgkgICwgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlOwoKCW1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKE8pewoJICBPID0gdG9PYmplY3QoTyk7CgkgIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dOwoJICBpZih0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKXsKCSAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7CgkgIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7Cgl9OwoKCS8qKiovIH0pLAoJLyogNDQgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgaGFzICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMikKCSAgLCB0b0lPYmplY3QgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKQoJICAsIGFycmF5SW5kZXhPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNjEpKGZhbHNlKQoJICAsIElFX1BST1RPICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjYpKCdJRV9QUk9UTycpOwoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7CgkgIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KQoJICAgICwgaSAgICAgID0gMAoJICAgICwgcmVzdWx0ID0gW10KCSAgICAsIGtleTsKCSAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpOwoJICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzCgkgIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXsKCSAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpOwoJICB9CgkgIHJldHVybiByZXN1bHQ7Cgl9OwoKCS8qKiovIH0pLAoJLyogNDUgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXMKCXZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KQoJICAsIGNvcmUgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApCgkgICwgZmFpbHMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpOwoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGV4ZWMpewoJICB2YXIgZm4gID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldCgkgICAgLCBleHAgPSB7fTsKCSAgZXhwW0tFWV0gPSBleGVjKGZuKTsKCSAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbigpeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApOwoJfTsKCgkvKioqLyB9KSwKCS8qIDQ2ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpOwoKCS8qKiovIH0pLAoJLyogNDcgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvLyA3LjEuMTUgVG9MZW5ndGgKCXZhciB0b0ludGVnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KQoJICAsIG1pbiAgICAgICA9IE1hdGgubWluOwoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CgkgIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxCgl9OwoKCS8qKiovIH0pLAoJLyogNDggKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgZ2xvYmFsICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpCgkgICwgY29yZSAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApCgkgICwgTElCUkFSWSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI1KQoJICAsIHdrc0V4dCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSkKCSAgLCBkZWZpbmVQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oNCkuZjsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7CgkgIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7CgkgIGlmKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwge3ZhbHVlOiB3a3NFeHQuZihuYW1lKX0pOwoJfTsKCgkvKioqLyB9KSwKCS8qIDQ5ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJZXhwb3J0cy5mID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTsKCgkvKioqLyB9KSwKCS8qIDUwICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJInVzZSBzdHJpY3QiOwoKCXZhciAkYXQgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NikodHJ1ZSk7CgoJLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKQoJX193ZWJwYWNrX3JlcXVpcmVfXygzOCkoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpewoJICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0CgkgIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4CgkvLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpCgl9LCBmdW5jdGlvbigpewoJICB2YXIgTyAgICAgPSB0aGlzLl90CgkgICAgLCBpbmRleCA9IHRoaXMuX2kKCSAgICAsIHBvaW50OwoJICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9OwoJICBwb2ludCA9ICRhdChPLCBpbmRleCk7CgkgIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoOwoJICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9OwoJfSk7CgoJLyoqKi8gfSksCgkvKiA1MSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCV9fd2VicGFja19yZXF1aXJlX18oNjkpOwoJdmFyIGdsb2JhbCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpCgkgICwgaGlkZSAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNikKCSAgLCBJdGVyYXRvcnMgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSkKCSAgLCBUT19TVFJJTkdfVEFHID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSgndG9TdHJpbmdUYWcnKTsKCglmb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXsKCSAgdmFyIE5BTUUgICAgICAgPSBjb2xsZWN0aW9uc1tpXQoJICAgICwgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXQoJICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7CgkgIGlmKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTsKCSAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5OwoJfQoKCS8qKiovIH0pLAoJLyogNTIgKi8sCgkvKiA1MyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBjb3JlICA9IF9fd2VicGFja19yZXF1aXJlX18oMCkKCSAgLCAkSlNPTiA9IGNvcmUuSlNPTiB8fCAoY29yZS5KU09OID0ge3N0cmluZ2lmeTogSlNPTi5zdHJpbmdpZnl9KTsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc3RyaW5naWZ5KGl0KXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycwoJICByZXR1cm4gJEpTT04uc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmd1bWVudHMpOwoJfTsKCgkvKioqLyB9KSwKCS8qIDU0ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoKCgkvKioqLyB9KSwKCS8qIDU1ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKCkKCXZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KQoJICAsIFRBRyA9IF9fd2VicGFja19yZXF1aXJlX18oMikoJ3RvU3RyaW5nVGFnJykKCSAgLy8gRVMzIHdyb25nIGhlcmUKCSAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJzsKCgkvLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvcgoJdmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpewoJICB0cnkgewoJICAgIHJldHVybiBpdFtrZXldOwoJICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9Cgl9OwoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewoJICB2YXIgTywgVCwgQjsKCSAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnCgkgICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlCgkgICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVAoJICAgIC8vIGJ1aWx0aW5UYWcgY2FzZQoJICAgIDogQVJHID8gY29mKE8pCgkgICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFjawoJICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCOwoJfTsKCgkvKioqLyB9KSwKCS8qIDU2ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3MKCXZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTsKCW1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7CgkgIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTsKCX07CgoJLyoqKi8gfSksCgkvKiA1NyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBwSUUgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpCgkgICwgY3JlYXRlRGVzYyAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KQoJICAsIHRvSU9iamVjdCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMykKCSAgLCB0b1ByaW1pdGl2ZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjIpCgkgICwgaGFzICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKQoJICAsIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOSkKCSAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CgoJZXhwb3J0cy5mID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7CgkgIE8gPSB0b0lPYmplY3QoTyk7CgkgIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTsKCSAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHsKCSAgICByZXR1cm4gZ09QRChPLCBQKTsKCSAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfQoJICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pOwoJfTsKCgkvKioqLyB9KSwKCS8qIDU4ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczsKCgkvKioqLyB9KSwKCS8qIDU5ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJInVzZSBzdHJpY3QiOwoKCglleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOwoKCXZhciBfaXRlcmF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc3KTsKCgl2YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTsKCgl2YXIgX3N5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oNzYpOwoKCXZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7CgoJdmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCglleHBvcnRzLmRlZmF1bHQgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gImZ1bmN0aW9uIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgewoJICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gInVuZGVmaW5lZCIgPyAidW5kZWZpbmVkIiA6IF90eXBlb2Yob2JqKTsKCX0gOiBmdW5jdGlvbiAob2JqKSB7CgkgIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmogPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKG9iaik7Cgl9OwoKCS8qKiovIH0pLAoJLyogNjAgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07CgoJLyoqKi8gfSksCgkvKiA2MSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2YKCS8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzCgl2YXIgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMykKCSAgLCB0b0xlbmd0aCAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ3KQoJICAsIHRvSW5kZXggICA9IF9fd2VicGFja19yZXF1aXJlX18oNjgpOwoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7CgkgIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7CgkgICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcykKCSAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpCgkgICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpCgkgICAgICAsIHZhbHVlOwoJICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG0KCSAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7CgkgICAgICB2YWx1ZSA9IE9baW5kZXgrK107CgkgICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTsKCSAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90CgkgICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7CgkgICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7CgkgICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xOwoJICB9OwoJfTsKCgkvKioqLyB9KSwKCS8qIDYyICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJInVzZSBzdHJpY3QiOwoKCXZhciBjcmVhdGUgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMzUpCgkgICwgZGVzY3JpcHRvciAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE2KQoJICAsIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSkKCSAgLCBJdGVyYXRvclByb3RvdHlwZSA9IHt9OwoKCS8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpCglfX3dlYnBhY2tfcmVxdWlyZV9fKDYpKEl0ZXJhdG9yUHJvdG90eXBlLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7CgoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCl7CgkgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTsKCSAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7Cgl9OwoKCS8qKiovIH0pLAoJLyogNjMgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXsKCSAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07Cgl9OwoKCS8qKiovIH0pLAoJLyogNjQgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgZFAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpCgkgICwgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpCgkgICwgZ2V0S2V5cyAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KTsKCgltb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7CgkgIGFuT2JqZWN0KE8pOwoJICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKQoJICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGgKCSAgICAsIGkgPSAwCgkgICAgLCBQOwoJICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7CgkgIHJldHVybiBPOwoJfTsKCgkvKioqLyB9KSwKCS8qIDY1ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKQoJdmFyICRrZXlzICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ0KQoJICAsIGhpZGRlbktleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTsKCglleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pewoJICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7Cgl9OwoKCS8qKiovIH0pLAoJLyogNjYgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgdG9JbnRlZ2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNykKCSAgLCBkZWZpbmVkICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTsKCS8vIHRydWUgIC0+IFN0cmluZyNhdAoJLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0Cgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFRPX1NUUklORyl7CgkgIHJldHVybiBmdW5jdGlvbih0aGF0LCBwb3MpewoJICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpCgkgICAgICAsIGkgPSB0b0ludGVnZXIocG9zKQoJICAgICAgLCBsID0gcy5sZW5ndGgKCSAgICAgICwgYSwgYjsKCSAgICBpZihpIDwgMCB8fCBpID49IGwpcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkOwoJICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7CgkgICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmYKCSAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhCgkgICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDsKCSAgfTsKCX07CgoJLyoqKi8gfSksCgkvKiA2NyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBjdHggICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KQoJICAsIGludm9rZSAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oODgpCgkgICwgaHRtbCAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MikKCSAgLCBjZWwgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KQoJICAsIGdsb2JhbCAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSkKCSAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2VzcwoJICAsIHNldFRhc2sgICAgICAgICAgICA9IGdsb2JhbC5zZXRJbW1lZGlhdGUKCSAgLCBjbGVhclRhc2sgICAgICAgICAgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGUKCSAgLCBNZXNzYWdlQ2hhbm5lbCAgICAgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWwKCSAgLCBjb3VudGVyICAgICAgICAgICAgPSAwCgkgICwgcXVldWUgICAgICAgICAgICAgID0ge30KCSAgLCBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJwoJICAsIGRlZmVyLCBjaGFubmVsLCBwb3J0OwoJdmFyIHJ1biA9IGZ1bmN0aW9uKCl7CgkgIHZhciBpZCA9ICt0aGlzOwoJICBpZihxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpewoJICAgIHZhciBmbiA9IHF1ZXVlW2lkXTsKCSAgICBkZWxldGUgcXVldWVbaWRdOwoJICAgIGZuKCk7CgkgIH0KCX07Cgl2YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCl7CgkgIHJ1bi5jYWxsKGV2ZW50LmRhdGEpOwoJfTsKCS8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZToKCWlmKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spewoJICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKXsKCSAgICB2YXIgYXJncyA9IFtdLCBpID0gMTsKCSAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pOwoJICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbigpewoJICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpOwoJICAgIH07CgkgICAgZGVmZXIoY291bnRlcik7CgkgICAgcmV0dXJuIGNvdW50ZXI7CgkgIH07CgkgIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKXsKCSAgICBkZWxldGUgcXVldWVbaWRdOwoJICB9OwoJICAvLyBOb2RlLmpzIDAuOC0KCSAgaWYoX193ZWJwYWNrX3JlcXVpcmVfXygxOCkocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKXsKCSAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXsKCSAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTsKCSAgICB9OwoJICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzCgkgIH0gZWxzZSBpZihNZXNzYWdlQ2hhbm5lbCl7CgkgICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbDsKCSAgICBwb3J0ICAgID0gY2hhbm5lbC5wb3J0MjsKCSAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyOwoJICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpOwoJICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnMKCSAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCcKCSAgfSBlbHNlIGlmKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyl7CgkgICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7CgkgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTsKCSAgICB9OwoJICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTsKCSAgLy8gSUU4LQoJICB9IGVsc2UgaWYoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpewoJICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpewoJICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKXsKCSAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTsKCSAgICAgICAgcnVuLmNhbGwoaWQpOwoJICAgICAgfTsKCSAgICB9OwoJICAvLyBSZXN0IG9sZCBicm93c2VycwoJICB9IGVsc2UgewoJICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpewoJICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApOwoJICAgIH07CgkgIH0KCX0KCW1vZHVsZS5leHBvcnRzID0gewoJICBzZXQ6ICAgc2V0VGFzaywKCSAgY2xlYXI6IGNsZWFyVGFzawoJfTsKCgkvKioqLyB9KSwKCS8qIDY4ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIHRvSW50ZWdlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpCgkgICwgbWF4ICAgICAgID0gTWF0aC5tYXgKCSAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7CgkgIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTsKCSAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7Cgl9OwoKCS8qKiovIH0pLAoJLyogNjkgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkidXNlIHN0cmljdCI7CgoJdmFyIGFkZFRvVW5zY29wYWJsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwKQoJICAsIHN0ZXAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYzKQoJICAsIEl0ZXJhdG9ycyAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KQoJICAsIHRvSU9iamVjdCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTsKCgkvLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpCgkvLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmtleXMoKQoJLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKQoJLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpCgltb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMzgpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7CgkgIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXQKCSAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXgKCSAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmQKCS8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKQoJfSwgZnVuY3Rpb24oKXsKCSAgdmFyIE8gICAgID0gdGhpcy5fdAoJICAgICwga2luZCAgPSB0aGlzLl9rCgkgICAgLCBpbmRleCA9IHRoaXMuX2krKzsKCSAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpewoJICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7CgkgICAgcmV0dXJuIHN0ZXAoMSk7CgkgIH0KCSAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7CgkgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pOwoJICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7Cgl9LCAndmFsdWVzJyk7CgoJLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KQoJSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTsKCglhZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7CglhZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTsKCWFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTsKCgkvKioqLyB9KSwKCS8qIDcwICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MCksIF9fZXNNb2R1bGU6IHRydWUgfTsKCgkvKioqLyB9KSwKCS8qIDcxICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MiksIF9fZXNNb2R1bGU6IHRydWUgfTsKCgkvKioqLyB9KSwKCS8qIDcyICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIE1FVEEgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMykoJ21ldGEnKQoJICAsIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KQoJICAsIGhhcyAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMikKCSAgLCBzZXREZXNjICA9IF9fd2VicGFja19yZXF1aXJlX18oNCkuZgoJICAsIGlkICAgICAgID0gMDsKCXZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uKCl7CgkgIHJldHVybiB0cnVlOwoJfTsKCXZhciBGUkVFWkUgPSAhX193ZWJwYWNrX3JlcXVpcmVfXygxMSkoZnVuY3Rpb24oKXsKCSAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTsKCX0pOwoJdmFyIHNldE1ldGEgPSBmdW5jdGlvbihpdCl7CgkgIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZTogewoJICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRAoJICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzCgkgIH19KTsKCX07Cgl2YXIgZmFzdEtleSA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpewoJICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4CgkgIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDsKCSAgaWYoIWhhcyhpdCwgTUVUQSkpewoJICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0CgkgICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJzsKCSAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YQoJICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJzsKCSAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YQoJICAgIHNldE1ldGEoaXQpOwoJICAvLyByZXR1cm4gb2JqZWN0IElECgkgIH0gcmV0dXJuIGl0W01FVEFdLmk7Cgl9OwoJdmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXsKCSAgaWYoIWhhcyhpdCwgTUVUQSkpewoJICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0CgkgICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7CgkgICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGEKCSAgICBpZighY3JlYXRlKXJldHVybiBmYWxzZTsKCSAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YQoJICAgIHNldE1ldGEoaXQpOwoJICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEcwoJICB9IHJldHVybiBpdFtNRVRBXS53OwoJfTsKCS8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZwoJdmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpewoJICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7CgkgIHJldHVybiBpdDsKCX07Cgl2YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0gewoJICBLRVk6ICAgICAgTUVUQSwKCSAgTkVFRDogICAgIGZhbHNlLAoJICBmYXN0S2V5OiAgZmFzdEtleSwKCSAgZ2V0V2VhazogIGdldFdlYWssCgkgIG9uRnJlZXplOiBvbkZyZWV6ZQoJfTsKCgkvKioqLyB9KSwKCS8qIDczICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIGNsYXNzb2YgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTUpCgkgICwgSVRFUkFUT1IgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSgnaXRlcmF0b3InKQoJICAsIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpOwoJbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpewoJICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXQoJICAgIHx8IGl0WydAQGl0ZXJhdG9yJ10KCSAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldOwoJfTsKCgkvKioqLyB9KSwKCS8qIDc0ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg3OCksIF9fZXNNb2R1bGU6IHRydWUgfTsKCgkvKioqLyB9KSwKCS8qIDc1ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MSksIF9fZXNNb2R1bGU6IHRydWUgfTsKCgkvKioqLyB9KSwKCS8qIDc2ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg4MyksIF9fZXNNb2R1bGU6IHRydWUgfTsKCgkvKioqLyB9KSwKCS8qIDc3ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXyg4NCksIF9fZXNNb2R1bGU6IHRydWUgfTsKCgkvKioqLyB9KSwKCS8qIDc4ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJX193ZWJwYWNrX3JlcXVpcmVfXygxMDApOwoJdmFyICRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApLk9iamVjdDsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpewoJICByZXR1cm4gJE9iamVjdC5jcmVhdGUoUCwgRCk7Cgl9OwoKCS8qKiovIH0pLAoJLyogNzkgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCglfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMSk7Cgltb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0LmdldFByb3RvdHlwZU9mOwoKCS8qKiovIH0pLAoJLyogODAgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCglfX3dlYnBhY2tfcmVxdWlyZV9fKDEwMik7Cgltb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0LmtleXM7CgoJLyoqKi8gfSksCgkvKiA4MSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCV9fd2VicGFja19yZXF1aXJlX18oMTAzKTsKCW1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7CgoJLyoqKi8gfSksCgkvKiA4MiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCV9fd2VicGFja19yZXF1aXJlX18oNTQpOwoJX193ZWJwYWNrX3JlcXVpcmVfXyg1MCk7CglfX3dlYnBhY2tfcmVxdWlyZV9fKDUxKTsKCV9fd2VicGFja19yZXF1aXJlX18oMTA0KTsKCW1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5Qcm9taXNlOwoKCS8qKiovIH0pLAoJLyogODMgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCglfX3dlYnBhY2tfcmVxdWlyZV9fKDEwNSk7CglfX3dlYnBhY2tfcmVxdWlyZV9fKDU0KTsKCV9fd2VicGFja19yZXF1aXJlX18oMTA2KTsKCV9fd2VicGFja19yZXF1aXJlX18oMTA3KTsKCW1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5TeW1ib2w7CgoJLyoqKi8gfSksCgkvKiA4NCAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCV9fd2VicGFja19yZXF1aXJlX18oNTApOwoJX193ZWJwYWNrX3JlcXVpcmVfXyg1MSk7Cgltb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDkpLmYoJ2l0ZXJhdG9yJyk7CgoJLyoqKi8gfSksCgkvKiA4NSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7CgkgIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXsKCSAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpOwoJICB9IHJldHVybiBpdDsKCX07CgoJLyoqKi8gfSksCgkvKiA4NiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzCgl2YXIgZ2V0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpCgkgICwgZ09QUyAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpCgkgICwgcElFICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpOwoJbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7CgkgIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdCkKCSAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7CgkgIGlmKGdldFN5bWJvbHMpewoJICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCkKCSAgICAgICwgaXNFbnVtICA9IHBJRS5mCgkgICAgICAsIGkgICAgICAgPSAwCgkgICAgICAsIGtleTsKCSAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpcmVzdWx0LnB1c2goa2V5KTsKCSAgfSByZXR1cm4gcmVzdWx0OwoJfTsKCgkvKioqLyB9KSwKCS8qIDg3ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIGN0eCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCkKCSAgLCBjYWxsICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTEpCgkgICwgaXNBcnJheUl0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg5KQoJICAsIGFuT2JqZWN0ICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KQoJICAsIHRvTGVuZ3RoICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0NykKCSAgLCBnZXRJdGVyRm4gICA9IF9fd2VicGFja19yZXF1aXJlX18oNzMpCgkgICwgQlJFQUsgICAgICAgPSB7fQoJICAsIFJFVFVSTiAgICAgID0ge307Cgl2YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUil7CgkgIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uKCl7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSkKCSAgICAsIGYgICAgICA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKQoJICAgICwgaW5kZXggID0gMAoJICAgICwgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0OwoJICBpZih0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7CgkgIC8vIGZhc3QgY2FzZSBmb3IgYXJyYXlzIHdpdGggZGVmYXVsdCBpdGVyYXRvcgoJICBpZihpc0FycmF5SXRlcihpdGVyRm4pKWZvcihsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7CgkgICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pOwoJICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDsKCSAgfSBlbHNlIGZvcihpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApewoJICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpOwoJICAgIGlmKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pcmV0dXJuIHJlc3VsdDsKCSAgfQoJfTsKCWV4cG9ydHMuQlJFQUsgID0gQlJFQUs7CglleHBvcnRzLlJFVFVSTiA9IFJFVFVSTjsKCgkvKioqLyB9KSwKCS8qIDg4ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7CgoJLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81Cgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGF0KXsKCSAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkOwoJICBzd2l0Y2goYXJncy5sZW5ndGgpewoJICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKQoJICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTsKCSAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pCgkgICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pOwoJICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSkKCSAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7CgkgICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKQoJICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTsKCSAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pCgkgICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pOwoJICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7Cgl9OwoKCS8qKiovIH0pLAoJLyogODkgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yCgl2YXIgSXRlcmF0b3JzICA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpCgkgICwgSVRFUkFUT1IgICA9IF9fd2VicGFja19yZXF1aXJlX18oMikoJ2l0ZXJhdG9yJykKCSAgLCBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlOwoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpewoJICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpOwoJfTsKCgkvKioqLyB9KSwKCS8qIDkwICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudCkKCXZhciBjb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTsKCW1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZyl7CgkgIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknOwoJfTsKCgkvKioqLyB9KSwKCS8qIDkxICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gY2FsbCBzb21ldGhpbmcgb24gaXRlcmF0b3Igc3RlcCB3aXRoIHNhZmUgY2xvc2luZyBvbiBlcnJvcgoJdmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7CgkgIHRyeSB7CgkgICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTsKCSAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbikKCSAgfSBjYXRjaChlKXsKCSAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddOwoJICAgIGlmKHJldCAhPT0gdW5kZWZpbmVkKWFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7CgkgICAgdGhyb3cgZTsKCSAgfQoJfTsKCgkvKioqLyB9KSwKCS8qIDkyICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIElURVJBVE9SICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMikoJ2l0ZXJhdG9yJykKCSAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTsKCgl0cnkgewoJICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7CgkgIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uKCl7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07CgkgIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uKCl7IHRocm93IDI7IH0pOwoJfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfQoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3NpbmcpewoJICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7CgkgIHZhciBzYWZlID0gZmFsc2U7CgkgIHRyeSB7CgkgICAgdmFyIGFyciAgPSBbN10KCSAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTsKCSAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTsKCSAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07CgkgICAgZXhlYyhhcnIpOwoJICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9CgkgIHJldHVybiBzYWZlOwoJfTsKCgkvKioqLyB9KSwKCS8qIDkzICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJdmFyIGdldEtleXMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTcpCgkgICwgdG9JT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7Cgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpewoJICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdCkKCSAgICAsIGtleXMgICA9IGdldEtleXMoTykKCSAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoCgkgICAgLCBpbmRleCAgPSAwCgkgICAgLCBrZXk7CgkgIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7Cgl9OwoKCS8qKiovIH0pLAoJLyogOTQgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgZ2xvYmFsICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQoJICAsIG1hY3JvdGFzayA9IF9fd2VicGFja19yZXF1aXJlX18oNjcpLnNldAoJICAsIE9ic2VydmVyICA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyCgkgICwgcHJvY2VzcyAgID0gZ2xvYmFsLnByb2Nlc3MKCSAgLCBQcm9taXNlICAgPSBnbG9iYWwuUHJvbWlzZQoJICAsIGlzTm9kZSAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpKHByb2Nlc3MpID09ICdwcm9jZXNzJzsKCgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7CgkgIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7CgoJICB2YXIgZmx1c2ggPSBmdW5jdGlvbigpewoJICAgIHZhciBwYXJlbnQsIGZuOwoJICAgIGlmKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKXBhcmVudC5leGl0KCk7CgkgICAgd2hpbGUoaGVhZCl7CgkgICAgICBmbiAgID0gaGVhZC5mbjsKCSAgICAgIGhlYWQgPSBoZWFkLm5leHQ7CgkgICAgICB0cnkgewoJICAgICAgICBmbigpOwoJICAgICAgfSBjYXRjaChlKXsKCSAgICAgICAgaWYoaGVhZClub3RpZnkoKTsKCSAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkOwoJICAgICAgICB0aHJvdyBlOwoJICAgICAgfQoJICAgIH0gbGFzdCA9IHVuZGVmaW5lZDsKCSAgICBpZihwYXJlbnQpcGFyZW50LmVudGVyKCk7CgkgIH07CgoJICAvLyBOb2RlLmpzCgkgIGlmKGlzTm9kZSl7CgkgICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKCSAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpOwoJICAgIH07CgkgIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlcgoJICB9IGVsc2UgaWYoT2JzZXJ2ZXIpewoJICAgIHZhciB0b2dnbGUgPSB0cnVlCgkgICAgICAsIG5vZGUgICA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTsKCSAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwge2NoYXJhY3RlckRhdGE6IHRydWV9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXcKCSAgICBub3RpZnkgPSBmdW5jdGlvbigpewoJICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTsKCSAgICB9OwoJICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZQoJICB9IGVsc2UgaWYoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpewoJICAgIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7CgkgICAgbm90aWZ5ID0gZnVuY3Rpb24oKXsKCSAgICAgIHByb21pc2UudGhlbihmbHVzaCk7CgkgICAgfTsKCSAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjoKCSAgLy8gLSBzZXRJbW1lZGlhdGUKCSAgLy8gLSBNZXNzYWdlQ2hhbm5lbAoJICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnCgkgIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlCgkgIC8vIC0gc2V0VGltZW91dAoJICB9IGVsc2UgewoJICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7CgkgICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpCgkgICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTsKCSAgICB9OwoJICB9CgoJICByZXR1cm4gZnVuY3Rpb24oZm4pewoJICAgIHZhciB0YXNrID0ge2ZuOiBmbiwgbmV4dDogdW5kZWZpbmVkfTsKCSAgICBpZihsYXN0KWxhc3QubmV4dCA9IHRhc2s7CgkgICAgaWYoIWhlYWQpewoJICAgICAgaGVhZCA9IHRhc2s7CgkgICAgICBub3RpZnkoKTsKCSAgICB9IGxhc3QgPSB0YXNrOwoJICB9OwoJfTsKCgkvKioqLyB9KSwKCS8qIDk1ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvdwoJdmFyIHRvSU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpCgkgICwgZ09QTiAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NSkuZgoJICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nOwoKCXZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzCgkgID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdOwoKCXZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uKGl0KXsKCSAgdHJ5IHsKCSAgICByZXR1cm4gZ09QTihpdCk7CgkgIH0gY2F0Y2goZSl7CgkgICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7CgkgIH0KCX07CgoJbW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpewoJICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpOwoJfTsKCgoJLyoqKi8gfSksCgkvKiA5NiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCXZhciBoaWRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpewoJICBmb3IodmFyIGtleSBpbiBzcmMpewoJICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTsKCSAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTsKCSAgfSByZXR1cm4gdGFyZ2V0OwoJfTsKCgkvKioqLyB9KSwKCS8qIDk3ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuCgkvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqLwoJdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KQoJICAsIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTsKCXZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXsKCSAgYW5PYmplY3QoTyk7CgkgIGlmKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpdGhyb3cgVHlwZUVycm9yKHByb3RvICsgIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSEiKTsKCX07Cgltb2R1bGUuZXhwb3J0cyA9IHsKCSAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZQoJICAgIGZ1bmN0aW9uKHRlc3QsIGJ1Z2d5LCBzZXQpewoJICAgICAgdHJ5IHsKCSAgICAgICAgc2V0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCkoRnVuY3Rpb24uY2FsbCwgX193ZWJwYWNrX3JlcXVpcmVfXyg1NykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTsKCSAgICAgICAgc2V0KHRlc3QsIFtdKTsKCSAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7CgkgICAgICB9IGNhdGNoKGUpeyBidWdneSA9IHRydWU7IH0KCSAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90byl7CgkgICAgICAgIGNoZWNrKE8sIHByb3RvKTsKCSAgICAgICAgaWYoYnVnZ3kpTy5fX3Byb3RvX18gPSBwcm90bzsKCSAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pOwoJICAgICAgICByZXR1cm4gTzsKCSAgICAgIH07CgkgICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSwKCSAgY2hlY2s6IGNoZWNrCgl9OwoKCS8qKiovIH0pLAoJLyogOTggKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkidXNlIHN0cmljdCI7CgoJdmFyIGdsb2JhbCAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQoJICAsIGNvcmUgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKQoJICAsIGRQICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KQoJICAsIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKQoJICAsIFNQRUNJRVMgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKSgnc3BlY2llcycpOwoKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXsKCSAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTsKCSAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSlkUC5mKEMsIFNQRUNJRVMsIHsKCSAgICBjb25maWd1cmFibGU6IHRydWUsCgkgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfQoJICB9KTsKCX07CgoJLyoqKi8gfSksCgkvKiA5OSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKQoJdmFyIGFuT2JqZWN0ICA9IF9fd2VicGFja19yZXF1aXJlX18oNSkKCSAgLCBhRnVuY3Rpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwKQoJICAsIFNQRUNJRVMgICA9IF9fd2VicGFja19yZXF1aXJlX18oMikoJ3NwZWNpZXMnKTsKCW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywgRCl7CgkgIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3IsIFM7CgkgIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTsKCX07CgoJLyoqKi8gfSksCgkvKiAxMDAgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgl2YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oOCkKCS8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKQoJJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7Y3JlYXRlOiBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KX0pOwoKCS8qKiovIH0pLAoJLyogMTAxICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pCgl2YXIgdG9PYmplY3QgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMikKCSAgLCAkZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTsKCglfX3dlYnBhY2tfcmVxdWlyZV9fKDQ1KSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpewoJICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpewoJICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTsKCSAgfTsKCX0pOwoKCS8qKiovIH0pLAoJLyogMTAyICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pCgl2YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKQoJICAsICRrZXlzICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7CgoJX193ZWJwYWNrX3JlcXVpcmVfXyg0NSkoJ2tleXMnLCBmdW5jdGlvbigpewoJICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7CgkgICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7CgkgIH07Cgl9KTsKCgkvKioqLyB9KSwKCS8qIDEwMyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCS8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pCgl2YXIgJGV4cG9ydCA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7CgkkZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtzZXRQcm90b3R5cGVPZjogX193ZWJwYWNrX3JlcXVpcmVfXyg5Nykuc2V0fSk7CgoJLyoqKi8gfSksCgkvKiAxMDQgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkidXNlIHN0cmljdCI7CgoJdmFyIExJQlJBUlkgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpCgkgICwgZ2xvYmFsICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKQoJICAsIGN0eCAgICAgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTQpCgkgICwgY2xhc3NvZiAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NSkKCSAgLCAkZXhwb3J0ICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpCgkgICwgaXNPYmplY3QgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KQoJICAsIGFGdW5jdGlvbiAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMjApCgkgICwgYW5JbnN0YW5jZSAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NSkKCSAgLCBmb3JPZiAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDg3KQoJICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oOTkpCgkgICwgdGFzayAgICAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2Nykuc2V0CgkgICwgbWljcm90YXNrICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NCkoKQoJICAsIFBST01JU0UgICAgICAgICAgICA9ICdQcm9taXNlJwoJICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3IKCSAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2VzcwoJICAsICRQcm9taXNlICAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXQoJICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzCgkgICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcycKCSAgLCBlbXB0eSAgICAgICAgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9CgkgICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjsKCgl2YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24oKXsKCSAgdHJ5IHsKCSAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnQKCSAgICB2YXIgcHJvbWlzZSAgICAgPSAkUHJvbWlzZS5yZXNvbHZlKDEpCgkgICAgICAsIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbX193ZWJwYWNrX3JlcXVpcmVfXygyKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uKGV4ZWMpeyBleGVjKGVtcHR5LCBlbXB0eSk7IH07CgkgICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdAoJICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJykgJiYgcHJvbWlzZS50aGVuKGVtcHR5KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlOwoJICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9Cgl9KCk7CgoJLy8gaGVscGVycwoJdmFyIHNhbWVDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGEsIGIpewoJICAvLyB3aXRoIGxpYnJhcnkgd3JhcHBlciBzcGVjaWFsIGNhc2UKCSAgcmV0dXJuIGEgPT09IGIgfHwgYSA9PT0gJFByb21pc2UgJiYgYiA9PT0gV3JhcHBlcjsKCX07Cgl2YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uKGl0KXsKCSAgdmFyIHRoZW47CgkgIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTsKCX07Cgl2YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXsKCSAgcmV0dXJuIHNhbWVDb25zdHJ1Y3RvcigkUHJvbWlzZSwgQykKCSAgICA/IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKQoJICAgIDogbmV3IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTsKCX07Cgl2YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXsKCSAgdmFyIHJlc29sdmUsIHJlamVjdDsKCSAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24oJCRyZXNvbHZlLCAkJHJlamVjdCl7CgkgICAgaWYocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTsKCSAgICByZXNvbHZlID0gJCRyZXNvbHZlOwoJICAgIHJlamVjdCAgPSAkJHJlamVjdDsKCSAgfSk7CgkgIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTsKCSAgdGhpcy5yZWplY3QgID0gYUZ1bmN0aW9uKHJlamVjdCk7Cgl9OwoJdmFyIHBlcmZvcm0gPSBmdW5jdGlvbihleGVjKXsKCSAgdHJ5IHsKCSAgICBleGVjKCk7CgkgIH0gY2F0Y2goZSl7CgkgICAgcmV0dXJuIHtlcnJvcjogZX07CgkgIH0KCX07Cgl2YXIgbm90aWZ5ID0gZnVuY3Rpb24ocHJvbWlzZSwgaXNSZWplY3QpewoJICBpZihwcm9taXNlLl9uKXJldHVybjsKCSAgcHJvbWlzZS5fbiA9IHRydWU7CgkgIHZhciBjaGFpbiA9IHByb21pc2UuX2M7CgkgIG1pY3JvdGFzayhmdW5jdGlvbigpewoJICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3YKCSAgICAgICwgb2sgICAgPSBwcm9taXNlLl9zID09IDEKCSAgICAgICwgaSAgICAgPSAwOwoJICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbil7CgkgICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsCgkgICAgICAgICwgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmUKCSAgICAgICAgLCByZWplY3QgID0gcmVhY3Rpb24ucmVqZWN0CgkgICAgICAgICwgZG9tYWluICA9IHJlYWN0aW9uLmRvbWFpbgoJICAgICAgICAsIHJlc3VsdCwgdGhlbjsKCSAgICAgIHRyeSB7CgkgICAgICAgIGlmKGhhbmRsZXIpewoJICAgICAgICAgIGlmKCFvayl7CgkgICAgICAgICAgICBpZihwcm9taXNlLl9oID09IDIpb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7CgkgICAgICAgICAgICBwcm9taXNlLl9oID0gMTsKCSAgICAgICAgICB9CgkgICAgICAgICAgaWYoaGFuZGxlciA9PT0gdHJ1ZSlyZXN1bHQgPSB2YWx1ZTsKCSAgICAgICAgICBlbHNlIHsKCSAgICAgICAgICAgIGlmKGRvbWFpbilkb21haW4uZW50ZXIoKTsKCSAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOwoJICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5leGl0KCk7CgkgICAgICAgICAgfQoJICAgICAgICAgIGlmKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSl7CgkgICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpOwoJICAgICAgICAgIH0gZWxzZSBpZih0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKXsKCSAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7CgkgICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTsKCSAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7CgkgICAgICB9IGNhdGNoKGUpewoJICAgICAgICByZWplY3QoZSk7CgkgICAgICB9CgkgICAgfTsKCSAgICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2gKCSAgICBwcm9taXNlLl9jID0gW107CgkgICAgcHJvbWlzZS5fbiA9IGZhbHNlOwoJICAgIGlmKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKW9uVW5oYW5kbGVkKHByb21pc2UpOwoJICB9KTsKCX07Cgl2YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXsKCSAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXsKCSAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92CgkgICAgICAsIGFicnVwdCwgaGFuZGxlciwgY29uc29sZTsKCSAgICBpZihpc1VuaGFuZGxlZChwcm9taXNlKSl7CgkgICAgICBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7CgkgICAgICAgIGlmKGlzTm9kZSl7CgkgICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7CgkgICAgICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKXsKCSAgICAgICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlfSk7CgkgICAgICAgIH0gZWxzZSBpZigoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKXsKCSAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7CgkgICAgICAgIH0KCSAgICAgIH0pOwoJICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGQKCSAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTsKCSAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7CgkgICAgaWYoYWJydXB0KXRocm93IGFicnVwdC5lcnJvcjsKCSAgfSk7Cgl9OwoJdmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7CgkgIGlmKHByb21pc2UuX2ggPT0gMSlyZXR1cm4gZmFsc2U7CgkgIHZhciBjaGFpbiA9IHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYwoJICAgICwgaSAgICAgPSAwCgkgICAgLCByZWFjdGlvbjsKCSAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSl7CgkgICAgcmVhY3Rpb24gPSBjaGFpbltpKytdOwoJICAgIGlmKHJlYWN0aW9uLmZhaWwgfHwgIWlzVW5oYW5kbGVkKHJlYWN0aW9uLnByb21pc2UpKXJldHVybiBmYWxzZTsKCSAgfSByZXR1cm4gdHJ1ZTsKCX07Cgl2YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXsKCSAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXsKCSAgICB2YXIgaGFuZGxlcjsKCSAgICBpZihpc05vZGUpewoJICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7CgkgICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKXsKCSAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdn0pOwoJICAgIH0KCSAgfSk7Cgl9OwoJdmFyICRyZWplY3QgPSBmdW5jdGlvbih2YWx1ZSl7CgkgIHZhciBwcm9taXNlID0gdGhpczsKCSAgaWYocHJvbWlzZS5fZClyZXR1cm47CgkgIHByb21pc2UuX2QgPSB0cnVlOwoJICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXAKCSAgcHJvbWlzZS5fdiA9IHZhbHVlOwoJICBwcm9taXNlLl9zID0gMjsKCSAgaWYoIXByb21pc2UuX2EpcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTsKCSAgbm90aWZ5KHByb21pc2UsIHRydWUpOwoJfTsKCXZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKXsKCSAgdmFyIHByb21pc2UgPSB0aGlzCgkgICAgLCB0aGVuOwoJICBpZihwcm9taXNlLl9kKXJldHVybjsKCSAgcHJvbWlzZS5fZCA9IHRydWU7CgkgIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcAoJICB0cnkgewoJICAgIGlmKHByb21pc2UgPT09IHZhbHVlKXRocm93IFR5cGVFcnJvcigiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGYiKTsKCSAgICBpZih0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpewoJICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7CgkgICAgICAgIHZhciB3cmFwcGVyID0ge193OiBwcm9taXNlLCBfZDogZmFsc2V9OyAvLyB3cmFwCgkgICAgICAgIHRyeSB7CgkgICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpOwoJICAgICAgICB9IGNhdGNoKGUpewoJICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTsKCSAgICAgICAgfQoJICAgICAgfSk7CgkgICAgfSBlbHNlIHsKCSAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTsKCSAgICAgIHByb21pc2UuX3MgPSAxOwoJICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTsKCSAgICB9CgkgIH0gY2F0Y2goZSl7CgkgICAgJHJlamVjdC5jYWxsKHtfdzogcHJvbWlzZSwgX2Q6IGZhbHNlfSwgZSk7IC8vIHdyYXAKCSAgfQoJfTsKCgkvLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbAoJaWYoIVVTRV9OQVRJVkUpewoJICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKQoJICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpewoJICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpOwoJICAgIGFGdW5jdGlvbihleGVjdXRvcik7CgkgICAgSW50ZXJuYWwuY2FsbCh0aGlzKTsKCSAgICB0cnkgewoJICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTsKCSAgICB9IGNhdGNoKGVycil7CgkgICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTsKCSAgICB9CgkgIH07CgkgIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7CgkgICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnMKCSAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zCgkgICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZQoJICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZQoJICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWUKCSAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkCgkgICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnkKCSAgfTsKCSAgSW50ZXJuYWwucHJvdG90eXBlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NikoJFByb21pc2UucHJvdG90eXBlLCB7CgkgICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkKCSAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKXsKCSAgICAgIHZhciByZWFjdGlvbiAgICA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpOwoJICAgICAgcmVhY3Rpb24ub2sgICAgID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7CgkgICAgICByZWFjdGlvbi5mYWlsICAgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7CgkgICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDsKCSAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7CgkgICAgICBpZih0aGlzLl9hKXRoaXMuX2EucHVzaChyZWFjdGlvbik7CgkgICAgICBpZih0aGlzLl9zKW5vdGlmeSh0aGlzLCBmYWxzZSk7CgkgICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTsKCSAgICB9LAoJICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpCgkgICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCl7CgkgICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7CgkgICAgfQoJICB9KTsKCSAgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbigpewoJICAgIHZhciBwcm9taXNlICA9IG5ldyBJbnRlcm5hbDsKCSAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlOwoJICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7CgkgICAgdGhpcy5yZWplY3QgID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpOwoJICB9OwoJfQoKCSRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtQcm9taXNlOiAkUHJvbWlzZX0pOwoJX193ZWJwYWNrX3JlcXVpcmVfXygyMSkoJFByb21pc2UsIFBST01JU0UpOwoJX193ZWJwYWNrX3JlcXVpcmVfXyg5OCkoUFJPTUlTRSk7CglXcmFwcGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKVtQUk9NSVNFXTsKCgkvLyBzdGF0aWNzCgkkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7CgkgIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpCgkgIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpewoJICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcykKCSAgICAgICwgJCRyZWplY3QgICA9IGNhcGFiaWxpdHkucmVqZWN0OwoJICAgICQkcmVqZWN0KHIpOwoJICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CgkgIH0KCX0pOwoJJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHsKCSAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpCgkgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCl7CgkgICAgLy8gaW5zdGFuY2VvZiBpbnN0ZWFkIG9mIGludGVybmFsIHNsb3QgY2hlY2sgYmVjYXVzZSB3ZSBzaG91bGQgZml4IGl0IHdpdGhvdXQgcmVwbGFjZW1lbnQgbmF0aXZlIFByb21pc2UgY29yZQoJICAgIGlmKHggaW5zdGFuY2VvZiAkUHJvbWlzZSAmJiBzYW1lQ29uc3RydWN0b3IoeC5jb25zdHJ1Y3RvciwgdGhpcykpcmV0dXJuIHg7CgkgICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKQoJICAgICAgLCAkJHJlc29sdmUgID0gY2FwYWJpbGl0eS5yZXNvbHZlOwoJICAgICQkcmVzb2x2ZSh4KTsKCSAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOwoJICB9Cgl9KTsKCSRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIF9fd2VicGFja19yZXF1aXJlX18oOTIpKGZ1bmN0aW9uKGl0ZXIpewoJICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpOwoJfSkpLCBQUk9NSVNFLCB7CgkgIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKQoJICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSl7CgkgICAgdmFyIEMgICAgICAgICAgPSB0aGlzCgkgICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKQoJICAgICAgLCByZXNvbHZlICAgID0gY2FwYWJpbGl0eS5yZXNvbHZlCgkgICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDsKCSAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpewoJICAgICAgdmFyIHZhbHVlcyAgICA9IFtdCgkgICAgICAgICwgaW5kZXggICAgID0gMAoJICAgICAgICAsIHJlbWFpbmluZyA9IDE7CgkgICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2UpewoJICAgICAgICB2YXIgJGluZGV4ICAgICAgICA9IGluZGV4KysKCSAgICAgICAgICAsIGFscmVhZHlDYWxsZWQgPSBmYWxzZTsKCSAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTsKCSAgICAgICAgcmVtYWluaW5nKys7CgkgICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKXsKCSAgICAgICAgICBpZihhbHJlYWR5Q2FsbGVkKXJldHVybjsKCSAgICAgICAgICBhbHJlYWR5Q2FsbGVkICA9IHRydWU7CgkgICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTsKCSAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7CgkgICAgICAgIH0sIHJlamVjdCk7CgkgICAgICB9KTsKCSAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTsKCSAgICB9KTsKCSAgICBpZihhYnJ1cHQpcmVqZWN0KGFicnVwdC5lcnJvcik7CgkgICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKCSAgfSwKCSAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKQoJICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKXsKCSAgICB2YXIgQyAgICAgICAgICA9IHRoaXMKCSAgICAgICwgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpCgkgICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDsKCSAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpewoJICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXsKCSAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpOwoJICAgICAgfSk7CgkgICAgfSk7CgkgICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpOwoJICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CgkgIH0KCX0pOwoKCS8qKiovIH0pLAoJLyogMTA1ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJInVzZSBzdHJpY3QiOwoKCS8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW0KCXZhciBnbG9iYWwgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMSkKCSAgLCBoYXMgICAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpCgkgICwgREVTQ1JJUFRPUlMgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpCgkgICwgJGV4cG9ydCAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpCgkgICwgcmVkZWZpbmUgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ2KQoJICAsIE1FVEEgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MikuS0VZCgkgICwgJGZhaWxzICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExKQoJICAsIHNoYXJlZCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCkKCSAgLCBzZXRUb1N0cmluZ1RhZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjEpCgkgICwgdWlkICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIzKQoJICAsIHdrcyAgICAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKQoJICAsIHdrc0V4dCAgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0OSkKCSAgLCB3a3NEZWZpbmUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDgpCgkgICwga2V5T2YgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkzKQoJICAsIGVudW1LZXlzICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4NikKCSAgLCBpc0FycmF5ICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oOTApCgkgICwgYW5PYmplY3QgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpCgkgICwgdG9JT2JqZWN0ICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKQoJICAsIHRvUHJpbWl0aXZlICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMikKCSAgLCBjcmVhdGVEZXNjICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpCgkgICwgX2NyZWF0ZSAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM1KQoJICAsIGdPUE5FeHQgICAgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NSkKCSAgLCAkR09QRCAgICAgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpCgkgICwgJERQICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpCgkgICwgJGtleXMgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KQoJICAsIGdPUEQgICAgICAgICAgID0gJEdPUEQuZgoJICAsIGRQICAgICAgICAgICAgID0gJERQLmYKCSAgLCBnT1BOICAgICAgICAgICA9IGdPUE5FeHQuZgoJICAsICRTeW1ib2wgICAgICAgID0gZ2xvYmFsLlN5bWJvbAoJICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT04KCSAgLCBfc3RyaW5naWZ5ICAgICA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeQoJICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZScKCSAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpCgkgICwgVE9fUFJJTUlUSVZFICAgPSB3a3MoJ3RvUHJpbWl0aXZlJykKCSAgLCBpc0VudW0gICAgICAgICA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlCgkgICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpCgkgICwgQWxsU3ltYm9scyAgICAgPSBzaGFyZWQoJ3N5bWJvbHMnKQoJICAsIE9QU3ltYm9scyAgICAgID0gc2hhcmVkKCdvcC1zeW1ib2xzJykKCSAgLCBPYmplY3RQcm90byAgICA9IE9iamVjdFtQUk9UT1RZUEVdCgkgICwgVVNFX05BVElWRSAgICAgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nCgkgICwgUU9iamVjdCAgICAgICAgPSBnbG9iYWwuUU9iamVjdDsKCS8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3MwoJdmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7CgoJLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3Cgl2YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbigpewoJICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7CgkgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gZFAodGhpcywgJ2EnLCB7dmFsdWU6IDd9KS5hOyB9CgkgIH0pKS5hICE9IDc7Cgl9KSA/IGZ1bmN0aW9uKGl0LCBrZXksIEQpewoJICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTsKCSAgaWYocHJvdG9EZXNjKWRlbGV0ZSBPYmplY3RQcm90b1trZXldOwoJICBkUChpdCwga2V5LCBEKTsKCSAgaWYocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bylkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpOwoJfSA6IGRQOwoKCXZhciB3cmFwID0gZnVuY3Rpb24odGFnKXsKCSAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTsKCSAgc3ltLl9rID0gdGFnOwoJICByZXR1cm4gc3ltOwoJfTsKCgl2YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24oaXQpewoJICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnOwoJfSA6IGZ1bmN0aW9uKGl0KXsKCSAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDsKCX07CgoJdmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpewoJICBpZihpdCA9PT0gT2JqZWN0UHJvdG8pJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTsKCSAgYW5PYmplY3QoaXQpOwoJICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpOwoJICBhbk9iamVjdChEKTsKCSAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSkpewoJICAgIGlmKCFELmVudW1lcmFibGUpewoJICAgICAgaWYoIWhhcyhpdCwgSElEREVOKSlkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7CgkgICAgICBpdFtISURERU5dW2tleV0gPSB0cnVlOwoJICAgIH0gZWxzZSB7CgkgICAgICBpZihoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKWl0W0hJRERFTl1ba2V5XSA9IGZhbHNlOwoJICAgICAgRCA9IF9jcmVhdGUoRCwge2VudW1lcmFibGU6IGNyZWF0ZURlc2MoMCwgZmFsc2UpfSk7CgkgICAgfSByZXR1cm4gc2V0U3ltYm9sRGVzYyhpdCwga2V5LCBEKTsKCSAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7Cgl9OwoJdmFyICRkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhpdCwgUCl7CgkgIGFuT2JqZWN0KGl0KTsKCSAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKQoJICAgICwgaSAgICA9IDAKCSAgICAsIGwgPSBrZXlzLmxlbmd0aAoJICAgICwga2V5OwoJICB3aGlsZShsID4gaSkkZGVmaW5lUHJvcGVydHkoaXQsIGtleSA9IGtleXNbaSsrXSwgUFtrZXldKTsKCSAgcmV0dXJuIGl0OwoJfTsKCXZhciAkY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGl0LCBQKXsKCSAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApOwoJfTsKCXZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpewoJICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpOwoJICBpZih0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm4gZmFsc2U7CgkgIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTsKCX07Cgl2YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXsKCSAgaXQgID0gdG9JT2JqZWN0KGl0KTsKCSAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTsKCSAgaWYoaXQgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybjsKCSAgdmFyIEQgPSBnT1BEKGl0LCBrZXkpOwoJICBpZihEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpRC5lbnVtZXJhYmxlID0gdHJ1ZTsKCSAgcmV0dXJuIEQ7Cgl9OwoJdmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7CgkgIHZhciBuYW1lcyAgPSBnT1BOKHRvSU9iamVjdChpdCkpCgkgICAgLCByZXN1bHQgPSBbXQoJICAgICwgaSAgICAgID0gMAoJICAgICwga2V5OwoJICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXsKCSAgICBpZighaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpcmVzdWx0LnB1c2goa2V5KTsKCSAgfSByZXR1cm4gcmVzdWx0OwoJfTsKCXZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KXsKCSAgdmFyIElTX09QICA9IGl0ID09PSBPYmplY3RQcm90bwoJICAgICwgbmFtZXMgID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpCgkgICAgLCByZXN1bHQgPSBbXQoJICAgICwgaSAgICAgID0gMAoJICAgICwga2V5OwoJICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKXsKCSAgICBpZihoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYgKElTX09QID8gaGFzKE9iamVjdFByb3RvLCBrZXkpIDogdHJ1ZSkpcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTsKCSAgfSByZXR1cm4gcmVzdWx0OwoJfTsKCgkvLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSkKCWlmKCFVU0VfTkFUSVZFKXsKCSAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpewoJICAgIGlmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpOwoJICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOwoJICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpewoJICAgICAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8pJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpOwoJICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlOwoJICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTsKCSAgICB9OwoJICAgIGlmKERFU0NSSVBUT1JTICYmIHNldHRlcilzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldH0pOwoJICAgIHJldHVybiB3cmFwKHRhZyk7CgkgIH07CgkgIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXsKCSAgICByZXR1cm4gdGhpcy5fazsKCSAgfSk7CgoJICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjsKCSAgJERQLmYgICA9ICRkZWZpbmVQcm9wZXJ0eTsKCSAgX193ZWJwYWNrX3JlcXVpcmVfXyg2NSkuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzOwoJICBfX3dlYnBhY2tfcmVxdWlyZV9fKDQxKS5mICA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTsKCSAgX193ZWJwYWNrX3JlcXVpcmVfXyg1OCkuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7CgoJICBpZihERVNDUklQVE9SUyAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXygyNSkpewoJICAgIHJlZGVmaW5lKE9iamVjdFByb3RvLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHRydWUpOwoJICB9CgoJICB3a3NFeHQuZiA9IGZ1bmN0aW9uKG5hbWUpewoJICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7CgkgIH0KCX0KCgkkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7U3ltYm9sOiAkU3ltYm9sfSk7CgoJZm9yKHZhciBzeW1ib2xzID0gKAoJICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNAoJICAnaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXMnCgkpLnNwbGl0KCcsJyksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3Moc3ltYm9sc1tpKytdKTsKCglmb3IodmFyIHN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzRGVmaW5lKHN5bWJvbHNbaSsrXSk7CgoJJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHsKCSAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpCgkgICdmb3InOiBmdW5jdGlvbihrZXkpewoJICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJykKCSAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XQoJICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpOwoJICB9LAoJICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSkKCSAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KXsKCSAgICBpZihpc1N5bWJvbChrZXkpKXJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTsKCSAgICB0aHJvdyBUeXBlRXJyb3Ioa2V5ICsgJyBpcyBub3QgYSBzeW1ib2whJyk7CgkgIH0sCgkgIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSwKCSAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfQoJfSk7CgoJJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHsKCSAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKQoJICBjcmVhdGU6ICRjcmVhdGUsCgkgIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKQoJICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LAoJICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKQoJICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcywKCSAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKQoJICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsCgkgIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pCgkgIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLAoJICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pCgkgIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9scwoJfSk7CgoJLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pCgkkSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXsKCSAgdmFyIFMgPSAkU3ltYm9sKCk7CgkgIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9CgkgIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbAoJICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9scwoJICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoe2E6IFN9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nOwoJfSkpLCAnSlNPTicsIHsKCSAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpewoJICAgIGlmKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKXJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZAoJICAgIHZhciBhcmdzID0gW2l0XQoJICAgICAgLCBpICAgID0gMQoJICAgICAgLCByZXBsYWNlciwgJHJlcGxhY2VyOwoJICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7CgkgICAgcmVwbGFjZXIgPSBhcmdzWzFdOwoJICAgIGlmKHR5cGVvZiByZXBsYWNlciA9PSAnZnVuY3Rpb24nKSRyZXBsYWNlciA9IHJlcGxhY2VyOwoJICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXsKCSAgICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpOwoJICAgICAgaWYoIWlzU3ltYm9sKHZhbHVlKSlyZXR1cm4gdmFsdWU7CgkgICAgfTsKCSAgICBhcmdzWzFdID0gcmVwbGFjZXI7CgkgICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpOwoJICB9Cgl9KTsKCgkvLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpCgkkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7CgkvLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddCglzZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7CgkvLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddCglzZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpOwoJLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ10KCXNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpOwoKCS8qKiovIH0pLAoJLyogMTA2ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJX193ZWJwYWNrX3JlcXVpcmVfXyg0OCkoJ2FzeW5jSXRlcmF0b3InKTsKCgkvKioqLyB9KSwKCS8qIDEwNyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCV9fd2VicGFja19yZXF1aXJlX18oNDgpKCdvYnNlcnZhYmxlJyk7CgoJLyoqKi8gfSksCgkvKiAxMDggKi8sCgkvKiAxMDkgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkidXNlIHN0cmljdCI7CgoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfc3RyaW5naWZ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7CgoJdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCgl2YXIgX2tleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwKTsKCgl2YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7CgoJZXhwb3J0cy5kaXZpZGVVUkwgPSBkaXZpZGVVUkw7CglleHBvcnRzLmRpdmlkZUVtYWlsID0gZGl2aWRlRW1haWw7CglleHBvcnRzLmVtcHR5T2JqZWN0ID0gZW1wdHlPYmplY3Q7CglleHBvcnRzLmRlZXBDbG9uZSA9IGRlZXBDbG9uZTsKCWV4cG9ydHMuZ2V0VXNlclVSTEZyb21FbWFpbCA9IGdldFVzZXJVUkxGcm9tRW1haWw7CglleHBvcnRzLmdldFVzZXJFbWFpbEZyb21VUkwgPSBnZXRVc2VyRW1haWxGcm9tVVJMOwoJZXhwb3J0cy5jb252ZXJ0VG9Vc2VyVVJMID0gY29udmVydFRvVXNlclVSTDsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8qKgoJKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKCSogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKCSogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCgkqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCgkqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoJKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCgkqIENvcHlyaWdodCAyMDE2IEFwaXplZQoJKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoJKgoJKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKCSogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoJKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCSoKCSogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCSoKCSogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoJKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoJKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KCSogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoJKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCSoqLwoJLyoqCgkgKiBTdXBwb3J0IG1vZHVsZSB3aXRoIHNvbWUgZnVuY3Rpb25zIHdpbGwgYmUgdXNlZnVsCgkgKiBAbW9kdWxlIHV0aWxzCgkgKi8KCgkvKioKCSAqIEB0eXBlZGVmIGRpdmlkZVVSTAoJICogQHR5cGUgT2JqZWN0CgkgKiBAcHJvcGVydHkge3N0cmluZ30gdHlwZSBUaGUgdHlwZSBvZiBVUkwKCSAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkb21haW4gVGhlIGRvbWFpbiBvZiBVUkwKCSAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eSBUaGUgaWRlbnRpdHkgb2YgVVJMCgkgKi8KCgkvKioKCSAqIERpdmlkZSBhbiB1cmwgaW4gdHlwZSwgZG9tYWluIGFuZCBpZGVudGl0eQoJICogQHBhcmFtICB7VVJMLlVSTH0gdXJsIC0gdXJsIGFkZHJlc3MKCSAqIEByZXR1cm4ge2RpdmlkZVVSTH0gdGhlIHJlc3VsdCBvZiBkaXZpZGVVUkwKCSAqLwoJZnVuY3Rpb24gZGl2aWRlVVJMKHVybCkgewoKCSAgaWYgKCF1cmwpIHRocm93IEVycm9yKCdVUkwgaXMgbmVlZGVkIHRvIHNwbGl0Jyk7CgoJICBmdW5jdGlvbiByZWN1cnNlKHZhbHVlKSB7CgkgICAgdmFyIHJlZ2V4ID0gLyhbYS16QS1aLV0qKSg6XC9cLyg/OlwuKT98OikoWy1hLXpBLVowLTlAOiUuX1wrfiM9XXsyLDI1Nn0pKFstYS16QS1aMC05QDolLl9cK34jPVwvXSopL2dpOwoJICAgIHZhciBzdWJzdCA9ICckMSwkMywkNCc7CgkgICAgdmFyIHBhcnRzID0gdmFsdWUucmVwbGFjZShyZWdleCwgc3Vic3QpLnNwbGl0KCcsJyk7CgkgICAgcmV0dXJuIHBhcnRzOwoJICB9CgoJICB2YXIgcGFydHMgPSByZWN1cnNlKHVybCk7CgoJICAvLyBJZiB0aGUgdXJsIGhhcyBubyBzY2hlbWUKCSAgaWYgKHBhcnRzWzBdID09PSB1cmwgJiYgIXBhcnRzWzBdLmluY2x1ZGVzKCdAJykpIHsKCgkgICAgdmFyIF9yZXN1bHQgPSB7CgkgICAgICB0eXBlOiAiIiwKCSAgICAgIGRvbWFpbjogdXJsLAoJICAgICAgaWRlbnRpdHk6ICIiCgkgICAgfTsKCgkgICAgY29uc29sZS5lcnJvcignW0RpdmlkZVVSTF0gRGl2aWRlVVJMIGRvblwndCBzdXBwb3J0IHVybCB3aXRob3V0IHNjaGVtZS4gUGxlYXNlIHJldmlldyB5b3VyIHVybCBhZGRyZXNzJywgdXJsKTsKCgkgICAgcmV0dXJuIF9yZXN1bHQ7CgkgIH0KCgkgIC8vIGNoZWNrIGlmIHRoZSB1cmwgaGFzIHRoZSBzY2hlbWUgYW5kIGluY2x1ZGVzIGFuIEAKCSAgaWYgKHBhcnRzWzBdID09PSB1cmwgJiYgcGFydHNbMF0uaW5jbHVkZXMoJ0AnKSkgewoJICAgIHZhciBzY2hlbWUgPSBwYXJ0c1swXSA9PT0gdXJsID8gJ3NtdHAnIDogcGFydHNbMF07CgkgICAgcGFydHMgPSByZWN1cnNlKHNjaGVtZSArICc6Ly8nICsgcGFydHNbMF0pOwoJICB9CgoJICAvLyBpZiB0aGUgZG9tYWluIGluY2x1ZGVzIGFuIEAsIGRpdmlkZSBpdCB0byBkb21haW4gYW5kIGlkZW50aXR5IHJlc3BlY3RpdmVseQoJICBpZiAocGFydHNbMV0uaW5jbHVkZXMoJ0AnKSkgewoJICAgIHBhcnRzWzJdID0gcGFydHNbMF0gKyAnOi8vJyArIHBhcnRzWzFdOwoJICAgIHBhcnRzWzFdID0gcGFydHNbMV0uc3Vic3RyKHBhcnRzWzFdLmluZGV4T2YoJ0AnKSArIDEpOwoJICB9IC8qZWxzZSBpZiAocGFydHNbMl0uaW5jbHVkZXMoJy8nKSkgewoJICAgIHBhcnRzWzJdID0gcGFydHNbMl0uc3Vic3RyKHBhcnRzWzJdLmxhc3RJbmRleE9mKCcvJykrMSk7CgkgICAgfSovCgoJICB2YXIgcmVzdWx0ID0gewoJICAgIHR5cGU6IHBhcnRzWzBdLAoJICAgIGRvbWFpbjogcGFydHNbMV0sCgkgICAgaWRlbnRpdHk6IHBhcnRzWzJdCgkgIH07CgoJICByZXR1cm4gcmVzdWx0OwoJfQoKCWZ1bmN0aW9uIGRpdmlkZUVtYWlsKGVtYWlsKSB7CgkgIHZhciBpbmRleE9mQXQgPSBlbWFpbC5pbmRleE9mKCdAJyk7CgoJICB2YXIgcmVzdWx0ID0gewoJICAgIHVzZXJuYW1lOiBlbWFpbC5zdWJzdHJpbmcoMCwgaW5kZXhPZkF0KSwKCSAgICBkb21haW46IGVtYWlsLnN1YnN0cmluZyhpbmRleE9mQXQgKyAxLCBlbWFpbC5sZW5ndGgpCgkgIH07CgoJICByZXR1cm4gcmVzdWx0OwoJfQoKCS8qKgoJICogQ2hlY2sgaWYgYW4gT2JqZWN0IGlzIGVtcHR5CgkgKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gYmUgY2hlY2tlZAoJICogQHJldHVybiB7Qm9vbGVhbn0gICAgICAgc3RhdHVzIG9mIE9iamVjdCwgZW1wdHkgb3Igbm90ICh0cnVlfGZhbHNlKTsKCSAqLwoJZnVuY3Rpb24gZW1wdHlPYmplY3Qob2JqZWN0KSB7CgkgIHJldHVybiAoMCwgX2tleXMyLmRlZmF1bHQpKG9iamVjdCkubGVuZ3RoID4gMCA/IGZhbHNlIDogdHJ1ZTsKCX0KCgkvKioKCSAqIE1ha2UgYSBDT1BZIG9mIHRoZSBvcmlnaW5hbCBkYXRhCgkgKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogLSBvYmplY3QgdG8gYmUgY2xvbmVkCgkgKiBAcmV0dXJuIHtPYmplY3R9CgkgKi8KCWZ1bmN0aW9uIGRlZXBDbG9uZShvYmopIHsKCSAgLy9UT0RPOiBzaW1wbGUgYnV0IGluZWZmaWNpZW50IEpTT04gZGVlcCBjbG9uZS4uLgoJICBpZiAob2JqKSByZXR1cm4gSlNPTi5wYXJzZSgoMCwgX3N0cmluZ2lmeTIuZGVmYXVsdCkob2JqKSk7Cgl9CgoJLyoqCgkgKiBPYnRhaW5zIHRoZSB1c2VyIFVSTCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gZW1haWwKCSAqIEBwYXJhbSAge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsCgkgKiBAcmV0dXJuIHtVUkwuVVJMfSB1c2VyVVJMIFRoZSB1c2VyIFVSTAoJICovCglmdW5jdGlvbiBnZXRVc2VyVVJMRnJvbUVtYWlsKHVzZXJFbWFpbCkgewoJICB2YXIgaW5kZXhPZkF0ID0gdXNlckVtYWlsLmluZGV4T2YoJ0AnKTsKCSAgcmV0dXJuICd1c2VyOi8vJyArIHVzZXJFbWFpbC5zdWJzdHJpbmcoaW5kZXhPZkF0ICsgMSwgdXNlckVtYWlsLmxlbmd0aCkgKyAnLycgKyB1c2VyRW1haWwuc3Vic3RyaW5nKDAsIGluZGV4T2ZBdCk7Cgl9CgoJLyoqCgkgKiBPYnRhaW5zIHRoZSB1c2VyIGVtYWlsIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBVUkwKCSAqIEBwYXJhbSAge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMCgkgKiBAcmV0dXJuIHtzdHJpbmd9IHVzZXJFbWFpbCBUaGUgdXNlciBlbWFpbAoJICovCglmdW5jdGlvbiBnZXRVc2VyRW1haWxGcm9tVVJMKHVzZXJVUkwpIHsKCSAgdmFyIHVybCA9IGRpdmlkZVVSTCh1c2VyVVJMKTsKCSAgcmV0dXJuIHVybC5pZGVudGl0eS5yZXBsYWNlKCcvJywgJycpICsgJ0AnICsgdXJsLmRvbWFpbjsgLy8gaWRlbnRpdHkgZmllbGQgaGFzICcvZXhhbXBsZUlEJyBpbnN0ZWFkIG9mICdleGFtcGxlSUQnCgl9CgoJLyoqCgkgKiBDaGVjayBpZiB0aGUgdXNlciBpZGVudGlmaWVyIGlzIGFscmVhZHkgaW4gdGhlIFVSTCBmb3JtYXQsIGlmIG5vdCwgY29udmVydCB0byBVUkwgZm9ybWF0CgkgKiBAcGFyYW0gIHtzdHJpbmd9ICAgaWRlbnRpZmllciAgdXNlciBpZGVudGlmaWVyCgkgKiBAcmV0dXJuIHtzdHJpbmd9ICAgdXNlclVSTCAgICB0aGUgdXNlciBVUkwKCSAqLwoJZnVuY3Rpb24gY29udmVydFRvVXNlclVSTChpZGVudGlmaWVyKSB7CgoJICAvLyBjaGVjayBpZiB0aGUgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSB1cmwgZm9ybWF0CgkgIGlmIChpZGVudGlmaWVyLnN1YnN0cmluZygwLCA3KSA9PT0gJ3VzZXI6Ly8nKSB7CgkgICAgdmFyIGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwoaWRlbnRpZmllcik7CgoJICAgIC8vY2hlY2sgaWYgdGhlIHVybCBpcyB3ZWxsIGZvcm1hdGVkCgkgICAgaWYgKGRpdmlkZWRVUkwuZG9tYWluICYmIGRpdmlkZWRVUkwuaWRlbnRpdHkpIHsKCSAgICAgIHJldHVybiBpZGVudGlmaWVyOwoJICAgIH0gZWxzZSB7CgkgICAgICB0aHJvdyAndXNlclVSTCB3aXRoIHdyb25nIGZvcm1hdCc7CgkgICAgfQoKCSAgICAvL2lmIG5vdCwgY29udmVydCB0aGUgdXNlciBlbWFpbCB0byBVUkwgZm9ybWF0CgkgIH0gZWxzZSB7CgkgICAgcmV0dXJuIGdldFVzZXJVUkxGcm9tRW1haWwoaWRlbnRpZmllcik7CgkgIH0KCX0KCgkvKioqLyB9KSwKCS8qIDExMCAqLywKCS8qIDExMSAqLywKCS8qIDExMiAqLywKCS8qIDExMyAqLywKCS8qIDExNCAqLywKCS8qIDExNSAqLywKCS8qIDExNiAqLywKCS8qIDExNyAqLywKCS8qIDExOCAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSJ1c2Ugc3RyaWN0IjsKCgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CgoJdmFyIF9rZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7CgoJdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKCXZhciBfZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTsKCgl2YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTsKCgl2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7CgoJdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKCXZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7CgoJdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKCXZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0KTsKCgl2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpOwoKCXZhciBfZ2V0MiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIzKTsKCgl2YXIgX2dldDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXQyKTsKCgl2YXIgX2luaGVyaXRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMzMpOwoKCXZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTsKCgl2YXIgX0RhdGFPYmplY3QyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjApOwoKCXZhciBfRGF0YU9iamVjdDMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhT2JqZWN0Mik7CgoJdmFyIF9EYXRhT2JqZWN0Q2hpbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMSk7CgoJdmFyIF9EYXRhT2JqZWN0Q2hpbGQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdENoaWxkKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCS8qKgoJKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKCSogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKCSogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCgkqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCgkqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoJKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCgkqIENvcHlyaWdodCAyMDE2IEFwaXplZQoJKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoJKgoJKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKCSogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoJKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCSoKCSogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCSoKCSogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoJKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoJKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KCSogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoJKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCSoqLwoKCXZhciBGaWx0ZXJUeXBlID0geyBBTlk6ICdhbnknLCBTVEFSVDogJ3N0YXJ0JywgRVhBQ1Q6ICdleGFjdCcgfTsKCgkvKioKCSAqIFRoZSBjbGFzcyByZXR1cm5lZCBmcm9tIHRoZSBTeW5jaGVyIHN1YnNjcmliZSBjYWxsLgoJICogVG8gYmUgdXNlZCBhcyBhbiBvYnNlcnZhdGlvbiBwb2ludCBmcm9tIGEgRGF0YU9iamVjdFJlcG9ydGVyIGNoYW5nZS4KCSAqLwoKCXZhciBEYXRhT2JqZWN0T2JzZXJ2ZXIgPSBmdW5jdGlvbiAoX0RhdGFPYmplY3QpIHsKCSAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyLCBfRGF0YU9iamVjdCk7CgoJICAvKiBwcml2YXRlCgkgIF9jaGFuZ2VMaXN0ZW5lcjogTXNnTGlzdGVuZXIKCSAgIC0tLS1ldmVudCBoYW5kbGVycy0tLS0KCSAgX2ZpbHRlcnM6IHs8ZmlsdGVyPjoge3R5cGU6IDxzdGFydCwgZXhhY3Q+LCBjYWxsYmFjazogPGZ1bmN0aW9uPn0gfQoJICAqLwoKCSAgLyoqCgkgICAqIEBpZ25vcmUKCSAgICogU2hvdWxkIG5vdCBiZSB1c2VkIGRpcmVjdGx5IGJ5IEh5cGVydGllcy4gSXQncyBjYWxsZWQgYnkgdGhlIFN5bmNoZXIuc3Vic2NyaWJlIG1ldGhvZAoJICAgKi8KCSAgZnVuY3Rpb24gRGF0YU9iamVjdE9ic2VydmVyKHN5bmNoZXIsIHVybCwgc2NoZW1hLCBpbml0aWFsU3RhdHVzLCBpbml0aWFsRGF0YSwgY2hpbGRyZW5zLCBpbml0aWFsVmVyc2lvbiwgbXV0dWFsKSB7CgkgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRGF0YU9iamVjdE9ic2VydmVyKTsKCgkgICAgdmFyIF90aGlzMiA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKERhdGFPYmplY3RPYnNlcnZlci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyKSkuY2FsbCh0aGlzLCBzeW5jaGVyLCB1cmwsIHNjaGVtYSwgaW5pdGlhbFN0YXR1cywgaW5pdGlhbERhdGEuZGF0YSwgY2hpbGRyZW5zLCBtdXR1YWwpKTsKCgkgICAgdmFyIF90aGlzID0gX3RoaXMyOwoKCSAgICBfdGhpcy5fdmVyc2lvbiA9IGluaXRpYWxWZXJzaW9uOwoJICAgIF90aGlzLl9maWx0ZXJzID0ge307CgoJICAgIF90aGlzLl9zeW5jT2JqLm9ic2VydmUoZnVuY3Rpb24gKGV2ZW50KSB7CgkgICAgICBfdGhpcy5fb25GaWx0ZXIoZXZlbnQpOwoJICAgIH0pOwoKCSAgICAvL3NldHVwIGNoaWxkcmVucyBkYXRhIGZyb20gc3Vic2NyaXB0aW9uCgkgICAgKDAsIF9rZXlzMi5kZWZhdWx0KShpbml0aWFsRGF0YS5jaGlsZHJlbnMpLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkSWQpIHsKCSAgICAgIHZhciBjaGlsZERhdGEgPSBpbml0aWFsRGF0YS5jaGlsZHJlbnNbY2hpbGRJZF07CgkgICAgICBfdGhpcy5fY2hpbGRyZW5PYmplY3RzW2NoaWxkSWRdID0gbmV3IF9EYXRhT2JqZWN0Q2hpbGQyLmRlZmF1bHQoX3RoaXMsIGNoaWxkSWQsIGNoaWxkRGF0YSk7CgkgICAgfSk7CgoJICAgIF90aGlzLl9hbGxvY2F0ZUxpc3RlbmVycygpOwoJICAgIHJldHVybiBfdGhpczI7CgkgIH0KCgkgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERhdGFPYmplY3RPYnNlcnZlciwgW3sKCSAgICBrZXk6ICdfYWxsb2NhdGVMaXN0ZW5lcnMnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7CgkgICAgICAoMCwgX2dldDMuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyLnByb3RvdHlwZS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoRGF0YU9iamVjdE9ic2VydmVyLnByb3RvdHlwZSksICdfYWxsb2NhdGVMaXN0ZW5lcnMnLCB0aGlzKS5jYWxsKHRoaXMpOwoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwgKyAnL2NoYW5nZXMnLCBmdW5jdGlvbiAobXNnKSB7CgkgICAgICAgIGlmIChtc2cudHlwZSA9PT0gJ3VwZGF0ZScpIHsKCSAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdE9ic2VydmVyLScgKyBfdGhpcy5fdXJsICsgJy1SQ1Y6ICcsIG1zZyk7CgkgICAgICAgICAgX3RoaXMuX2NoYW5nZU9iamVjdChfdGhpcy5fc3luY09iaiwgbXNnKTsKCSAgICAgICAgfQoJICAgICAgfSk7CgkgICAgfQoJICB9LCB7CgkgICAga2V5OiAnX3JlbGVhc2VMaXN0ZW5lcnMnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVsZWFzZUxpc3RlbmVycygpIHsKCSAgICAgICgwLCBfZ2V0My5kZWZhdWx0KShEYXRhT2JqZWN0T2JzZXJ2ZXIucHJvdG90eXBlLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShEYXRhT2JqZWN0T2JzZXJ2ZXIucHJvdG90eXBlKSwgJ19yZWxlYXNlTGlzdGVuZXJzJywgdGhpcykuY2FsbCh0aGlzKTsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyLnJlbW92ZSgpOwoJICAgIH0KCgkgICAgLyoqCgkgICAgICogUmVsZWFzZSBhbmQgZGVsZXRlIG9iamVjdCBkYXRhCgkgICAgICovCgoJICB9LCB7CgkgICAga2V5OiAnZGVsZXRlJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZSgpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTsKCSAgICAgIGRlbGV0ZSBfdGhpcy5fc3luY2hlci5fb2JzZXJ2ZXJzW190aGlzLl91cmxdOwoJICAgIH0KCgkgICAgLyoqCgkgICAgICogUmVsZWFzZSBhbmQgZGVsZXRlIG9iamVjdCBkYXRhCgkgICAgICovCgoJICB9LCB7CgkgICAga2V5OiAndW5zdWJzY3JpYmUnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCB0byB0aGUgcnVudGltZSBpbnN0YW5jZSBvZiBTeW5jaGVyTWFuYWdlciAtPiBfb25Mb2NhbFVuU3Vic2NyaWJlCgkgICAgICB2YXIgdW5TdWJzY3JpYmVNc2cgPSB7CgkgICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9vd25lciwgdG86IF90aGlzLl9zeW5jaGVyLl9zdWJVUkwsCgkgICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwgfQoJICAgICAgfTsKCgkgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHVuU3Vic2NyaWJlTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKCSAgICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3RPYnNlcnZlci1VTlNVQlNDUklCRTogJywgcmVwbHkpOwoJICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKCSAgICAgICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpOwoJICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fc3luY2hlci5fb2JzZXJ2ZXJzW190aGlzLl91cmxdOwoJICAgICAgICB9CgkgICAgICB9KTsKCSAgICB9CgoJICAgIC8qKgoJICAgICAqIFJlZ2lzdGVyIHRoZSBjaGFuZ2UgbGlzdGVuZXJzIHNlbnQgYnkgdGhlIHJlcG9ydGVyCgkgICAgICogQHBhcmFtIHtzdHJpbmd9IGZpbHRlciAtIEZpbHRlciB0aGF0IGlkZW50aWZpZXMgdGhlIGZpZWxkIChzZXBhcmF0ZWQgZG90IHBhdGgpLiBBY2NlcHRzICogYXQgdGhlIGVuZCBmb3IgYSBtb3JlIHVucmVzdHJpY3RlZCBmaWx0ZXJpbmcuCgkgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudDogTXNnRXZlbnQpfSBjYWxsYmFjawoJICAgICAqLwoKCSAgfSwgewoJICAgIGtleTogJ29uQ2hhbmdlJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gb25DaGFuZ2UoZmlsdGVyLCBjYWxsYmFjaykgewoJICAgICAgdmFyIGtleSA9IGZpbHRlcjsKCSAgICAgIHZhciBmaWx0ZXJPYmogPSB7CgkgICAgICAgIHR5cGU6IEZpbHRlclR5cGUuRVhBQ1QsCgkgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjawoJICAgICAgfTsKCgkgICAgICB2YXIgaWR4ID0gZmlsdGVyLmluZGV4T2YoJyonKTsKCSAgICAgIGlmIChpZHggPT09IGZpbHRlci5sZW5ndGggLSAxKSB7CgkgICAgICAgIGlmIChpZHggPT09IDApIHsKCSAgICAgICAgICBmaWx0ZXJPYmoudHlwZSA9IEZpbHRlclR5cGUuQU5ZOwoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgIGZpbHRlck9iai50eXBlID0gRmlsdGVyVHlwZS5TVEFSVDsKCSAgICAgICAgICBrZXkgPSBmaWx0ZXIuc3Vic3RyKDAsIGZpbHRlci5sZW5ndGggLSAxKTsKCSAgICAgICAgfQoJICAgICAgfQoKCSAgICAgIHRoaXMuX2ZpbHRlcnNba2V5XSA9IGZpbHRlck9iajsKCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfb25GaWx0ZXInLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfb25GaWx0ZXIoZXZlbnQpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgKDAsIF9rZXlzMi5kZWZhdWx0KShfdGhpcy5fZmlsdGVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7CgkgICAgICAgIHZhciBmaWx0ZXIgPSBfdGhpcy5fZmlsdGVyc1trZXldOwoJICAgICAgICBpZiAoZmlsdGVyLnR5cGUgPT09IEZpbHRlclR5cGUuQU5ZKSB7CgkgICAgICAgICAgLy9tYXRjaCBhbnl0aGluZwoJICAgICAgICAgIGZpbHRlci5jYWxsYmFjayhldmVudCk7CgkgICAgICAgIH0gZWxzZSBpZiAoZmlsdGVyLnR5cGUgPT09IEZpbHRlclR5cGUuU1RBUlQpIHsKCSAgICAgICAgICAvL2lmIHN0YXJ0cyB3aXRoIGZpbHRlci4uLgoJICAgICAgICAgIGlmIChldmVudC5maWVsZC5pbmRleE9mKGtleSkgPT09IDApIHsKCSAgICAgICAgICAgIGZpbHRlci5jYWxsYmFjayhldmVudCk7CgkgICAgICAgICAgfQoJICAgICAgICB9IGVsc2UgaWYgKGZpbHRlci50eXBlID09PSBGaWx0ZXJUeXBlLkVYQUNUKSB7CgkgICAgICAgICAgLy9leGFjdCBtYXRjaAoJICAgICAgICAgIGlmIChldmVudC5maWVsZCA9PT0ga2V5KSB7CgkgICAgICAgICAgICBmaWx0ZXIuY2FsbGJhY2soZXZlbnQpOwoJICAgICAgICAgIH0KCSAgICAgICAgfQoJICAgICAgfSk7CgkgICAgfQoJICB9XSk7CgkgIHJldHVybiBEYXRhT2JqZWN0T2JzZXJ2ZXI7Cgl9KF9EYXRhT2JqZWN0My5kZWZhdWx0IC8qIGltcGxlbWVudHMgU3luY1N0YXR1cyAqLyk7CgoJZXhwb3J0cy5kZWZhdWx0ID0gRGF0YU9iamVjdE9ic2VydmVyOwoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgoJLyoqKi8gfSksCgkvKiAxMTkgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkidXNlIHN0cmljdCI7CgoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfa2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNzApOwoKCXZhciBfa2V5czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXlzKTsKCgl2YXIgX2dldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7CgoJdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7CgoJdmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpOwoKCXZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCgl2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApOwoKCXZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCgl2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNCk7CgoJdmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTsKCgl2YXIgX2dldDIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMyk7CgoJdmFyIF9nZXQzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Mik7CgoJdmFyIF9pbmhlcml0czIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTsKCgl2YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7CgoJdmFyIF9EYXRhT2JqZWN0MiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIwKTsKCgl2YXIgX0RhdGFPYmplY3QzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdDIpOwoKCXZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvKioKCSAqIFRoZSBjbGFzcyByZXR1cm5lZCBmcm9tIHRoZSBTeW5jaGVyIGNyZWF0ZSBjYWxsLgoJICogVG8gYmUgdXNlZCBhcyBhIHJlcG9ydGVyIHBvaW50LCBjaGFuZ2VzIHdpbGwgYmUgc3VibWl0ZWQgdG8gRGF0YU9iamVjdE9ic2VydmVyIGluc3RhbmNlcy4KCSAqLwoJLyoqCgkqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoJKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoJKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKCSogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKCSogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCgkqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKCSogQ29weXJpZ2h0IDIwMTYgQXBpemVlCgkqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCgkqCgkqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoJKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCgkqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoJKgoJKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoJKgoJKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCgkqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCgkqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoJKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCgkqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoJKiovCgoJdmFyIERhdGFPYmplY3RSZXBvcnRlciA9IGZ1bmN0aW9uIChfRGF0YU9iamVjdCkgewoJICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShEYXRhT2JqZWN0UmVwb3J0ZXIsIF9EYXRhT2JqZWN0KTsKCgkgIC8qIHByaXZhdGUKCSAgX3N1YnNjcmlwdGlvbnM6IDxoeXBlcnR5VXJsOiB7IHN0YXR1czogc3RyaW5nIH0gfT4KCSAgIC0tLS1ldmVudCBoYW5kbGVycy0tLS0KCSAgX29uU3Vic2NyaXB0aW9uSGFuZGxlcjogKGV2ZW50KSA9PiB2b2lkCgkgIF9vblJlc3BvbnNlSGFuZGxlcjogKGV2ZW50KSA9PiB2b2lkCgkgIF9vblJlYWRIYW5kbGVyOiAoZXZlbnQpID0+IHZvaWQKCSAgKi8KCgkgIC8qKgoJICAgKiBAaWdub3JlCgkgICAqIFNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSBieSBIeXBlcnRpZXMuIEl0J3MgY2FsbGVkIGJ5IHRoZSBTeW5jaGVyLmNyZWF0ZSBtZXRob2QKCSAgICovCgkgIGZ1bmN0aW9uIERhdGFPYmplY3RSZXBvcnRlcihzeW5jaGVyLCB1cmwsIHNjaGVtYSwgaW5pdGlhbFN0YXR1cywgaW5pdGlhbERhdGEsIGNoaWxkcmVucykgewoJICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERhdGFPYmplY3RSZXBvcnRlcik7CgoJICAgIHZhciBfdGhpczIgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChEYXRhT2JqZWN0UmVwb3J0ZXIuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKERhdGFPYmplY3RSZXBvcnRlcikpLmNhbGwodGhpcywgc3luY2hlciwgdXJsLCBzY2hlbWEsIGluaXRpYWxTdGF0dXMsIGluaXRpYWxEYXRhLCBjaGlsZHJlbnMpKTsKCgkgICAgdmFyIF90aGlzID0gX3RoaXMyOwoKCSAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHt9OwoKCSAgICBfdGhpcy5fc3luY09iai5vYnNlcnZlKGZ1bmN0aW9uIChldmVudCkgewoJICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3RSZXBvcnRlci0nICsgdXJsICsgJy1TRU5EOiAnLCBldmVudCk7CgkgICAgICBfdGhpcy5fb25DaGFuZ2UoZXZlbnQpOwoJICAgIH0pOwoKCSAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTsKCSAgICByZXR1cm4gX3RoaXMyOwoJICB9CgoJICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShEYXRhT2JqZWN0UmVwb3J0ZXIsIFt7CgkgICAga2V5OiAnX2FsbG9jYXRlTGlzdGVuZXJzJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX2FsbG9jYXRlTGlzdGVuZXJzKCkgewoJICAgICAgKDAsIF9nZXQzLmRlZmF1bHQpKERhdGFPYmplY3RSZXBvcnRlci5wcm90b3R5cGUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKERhdGFPYmplY3RSZXBvcnRlci5wcm90b3R5cGUpLCAnX2FsbG9jYXRlTGlzdGVuZXJzJywgdGhpcykuY2FsbCh0aGlzKTsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgX3RoaXMuX29iamVjdExpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihfdGhpcy5fdXJsLCBmdW5jdGlvbiAobXNnKSB7CgkgICAgICAgIGNvbnNvbGUubG9nKCdEYXRhT2JqZWN0LScgKyBfdGhpcy5fdXJsICsgJy1SQ1Y6ICcsIG1zZyk7CgkgICAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHsKCSAgICAgICAgICBjYXNlICdyZXNwb25zZSc6CgkgICAgICAgICAgICBfdGhpcy5fb25SZXNwb25zZShtc2cpO2JyZWFrOwoJICAgICAgICAgIGNhc2UgJ3JlYWQnOgoJICAgICAgICAgICAgX3RoaXMuX29uUmVhZChtc2cpO2JyZWFrOwoJICAgICAgICB9CgkgICAgICB9KTsKCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgewoJICAgICAgKDAsIF9nZXQzLmRlZmF1bHQpKERhdGFPYmplY3RSZXBvcnRlci5wcm90b3R5cGUuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKERhdGFPYmplY3RSZXBvcnRlci5wcm90b3R5cGUpLCAnX3JlbGVhc2VMaXN0ZW5lcnMnLCB0aGlzKS5jYWxsKHRoaXMpOwoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgICBfdGhpcy5fb2JqZWN0TGlzdGVuZXIucmVtb3ZlKCk7CgkgICAgfQoKCSAgICAvKioKCSAgICAgKiBTZW5kIGludml0YXRpb25zIChjcmVhdGUgbWVzc2FnZXMpIHRvIGh5cGVydGllcywgb2JzZXJ2ZXJzIGxpc3QuCgkgICAgICogQHBhcmFtICB7SHlwZXJ0eVVSTFtdfSBvYnNlcnZlcnMgTGlzdCBvZiBIeXBlcnR5IFVSTCdzCgkgICAgICovCgoJICB9LCB7CgkgICAga2V5OiAnaW52aXRlT2JzZXJ2ZXJzJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gaW52aXRlT2JzZXJ2ZXJzKG9ic2VydmVycykgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgICAvL0ZMT1ctT1VUOiB0aGlzIG1lc3NhZ2Ugd2lsbCBiZSBzZW50IHRvIHRoZSBydW50aW1lIGluc3RhbmNlIG9mIFN5bmNoZXJNYW5hZ2VyIC0+IF9vbkNyZWF0ZQoJICAgICAgdmFyIGludml0ZU1zZyA9IHsKCSAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLl9zeW5jaGVyLl9vd25lciwgdG86IF90aGlzLl9zeW5jaGVyLl9zdWJVUkwsCgkgICAgICAgIGJvZHk6IHsgcmVzdW1lOiBmYWxzZSwgcmVzb3VyY2U6IF90aGlzLl91cmwsIHNjaGVtYTogX3RoaXMuX3NjaGVtYSwgdmFsdWU6IF90aGlzLl9zeW5jT2JqLmRhdGEsIGF1dGhvcmlzZTogb2JzZXJ2ZXJzIH0KCSAgICAgIH07CgoJICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShpbnZpdGVNc2cpOwoJICAgIH0KCgkgICAgLyoqCgkgICAgICogUmVsZWFzZSBhbmQgZGVsZXRlIG9iamVjdCBkYXRhCgkgICAgICovCgoJICB9LCB7CgkgICAga2V5OiAnZGVsZXRlJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZSgpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCB0byB0aGUgcnVudGltZSBpbnN0YW5jZSBvZiBTeW5jaGVyTWFuYWdlciAtPiBfb25EZWxldGUKCSAgICAgIHZhciBkZWxldGVNc2cgPSB7CgkgICAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5fb3duZXIsIHRvOiBfdGhpcy5fc3luY2hlci5fc3ViVVJMLAoJICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsIH0KCSAgICAgIH07CgoJICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShkZWxldGVNc2csIGZ1bmN0aW9uIChyZXBseSkgewoJICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdFJlcG9ydGVyLURFTEVURTogJywgcmVwbHkpOwoJICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKCSAgICAgICAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpOwoJICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fc3luY2hlci5fcmVwb3J0ZXJzW190aGlzLl91cmxdOwoJICAgICAgICB9CgkgICAgICB9KTsKCSAgICB9CgoJICAgIC8qKgoJICAgICAqIFN1YnNjcmlwdGlvbnMgcmVxdWVzdGVkIGFuZCBhY2NlcHRlZCB0byB0aGlzIHJlcG9ydGVyCgkgICAgICogQHR5cGUge09iamVjdDxIeXBlcnR5VVJMLCBTeW5jU3Vic2NyaXB0aW9uPn0KCSAgICAgKi8KCgkgIH0sIHsKCSAgICBrZXk6ICdvblN1YnNjcmlwdGlvbicsCgoKCSAgICAvKioKCSAgICAgKiBTZXR1cCB0aGUgY2FsbGJhY2sgdG8gcHJvY2VzcyBzdWJzY3JpYmUgYW5kIHVuc3Vic2NyaWJlIG5vdGlmaWNhdGlvbnMKCSAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50OiBNc2dFdmVudCl9IGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHJlY2VpdmUgZXZlbnRzCgkgICAgICovCgkgICAgdmFsdWU6IGZ1bmN0aW9uIG9uU3Vic2NyaXB0aW9uKGNhbGxiYWNrKSB7CgkgICAgICB0aGlzLl9vblN1YnNjcmlwdGlvbkhhbmRsZXIgPSBjYWxsYmFjazsKCSAgICB9CgoJICAgIC8qKgoJICAgICAqIFNldHVwIHRoZSBjYWxsYmFjayB0byBwcm9jZXNzIHJlc3BvbnNlIG5vdGlmaWNhdGlvbnMgb2YgdGhlIGNyZWF0ZSdzCgkgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudDogTXNnRXZlbnQpfSBjYWxsYmFjayBmdW5jdGlvbiB0byByZWNlaXZlIGV2ZW50cwoJICAgICAqLwoKCSAgfSwgewoJICAgIGtleTogJ29uUmVzcG9uc2UnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBvblJlc3BvbnNlKGNhbGxiYWNrKSB7CgkgICAgICB0aGlzLl9vblJlc3BvbnNlSGFuZGxlciA9IGNhbGxiYWNrOwoJICAgIH0KCgkgICAgLyoqCgkgICAgICogU2V0dXAgdGhlIGNhbGxiYWNrIHRvIHByb2Nlc3MgcmVhZCBub3RpZmljYXRpb25zCgkgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudDogTXNnRXZlbnQpfSBjYWxsYmFjawoJICAgICAqLwoKCSAgfSwgewoJICAgIGtleTogJ29uUmVhZCcsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVhZChjYWxsYmFjaykgewoJICAgICAgdGhpcy5fb25SZWFkSGFuZGxlciA9IGNhbGxiYWNrOwoJICAgIH0KCgkgICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gcGFyZW50IFN5bmNoZXIgLT4gX29uRm9yd2FyZAoKCSAgfSwgewoJICAgIGtleTogJ19vbkZvcndhcmQnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Gb3J3YXJkKG1zZykgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdFJlcG9ydGVyLVJDVjogJywgbXNnKTsKCSAgICAgIHN3aXRjaCAobXNnLmJvZHkudHlwZSkgewoJICAgICAgICBjYXNlICdzdWJzY3JpYmUnOgoJICAgICAgICAgIF90aGlzLl9vblN1YnNjcmliZShtc2cpO2JyZWFrOwoJICAgICAgICBjYXNlICd1bnN1YnNjcmliZSc6CgkgICAgICAgICAgX3RoaXMuX29uVW5TdWJzY3JpYmUobXNnKTticmVhazsKCSAgICAgIH0KCSAgICB9CgoJICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIHRoaXMgLT4gX29uRm9yd2FyZDogZW1pdHRlZCBieSBhIHJlbW90ZSBTeW5jaGVyIC0+IHN1YnNjcmliZQoKCSAgfSwgewoJICAgIGtleTogJ19vblN1YnNjcmliZScsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9vblN1YnNjcmliZShtc2cpIHsKCSAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgkgICAgICB2YXIgaHlwZXJ0eVVybCA9IG1zZy5ib2R5LmZyb207CgkgICAgICBjb25zb2xlLmxvZygnW0RhdGFPYmplY3RSZXBvcnRlci5fb25TdWJzY3JpYmVdJywgbXNnKTsKCgkgICAgICB2YXIgZXZlbnQgPSB7CgkgICAgICAgIHR5cGU6IG1zZy5ib2R5LnR5cGUsCgkgICAgICAgIHVybDogaHlwZXJ0eVVybCwKCgkgICAgICAgIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSwKCgkgICAgICAgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KCkgewoJICAgICAgICAgIC8vY3JlYXRlIG5ldyBzdWJzY3JpcHRpb24KCSAgICAgICAgICB2YXIgc3ViID0geyB1cmw6IGh5cGVydHlVcmwsIHN0YXR1czogJ29uJyB9OwoJICAgICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVcmxdID0gc3ViOwoKCSAgICAgICAgICAvL3Byb2Nlc3MgYW5kIHNlbmQgY2hpbGRyZW5zIGRhdGEKCSAgICAgICAgICB2YXIgY2hpbGRyZW5WYWx1ZXMgPSB7fTsKCSAgICAgICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKF90aGlzLl9jaGlsZHJlbk9iamVjdHMpLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkSWQpIHsKCSAgICAgICAgICAgIHZhciBjaGlsZERhdGEgPSBfdGhpcy5fY2hpbGRyZW5PYmplY3RzW2NoaWxkSWRdLmRhdGE7CgkgICAgICAgICAgICBjaGlsZHJlblZhbHVlc1tjaGlsZElkXSA9ICgwLCBfdXRpbHMuZGVlcENsb25lKShjaGlsZERhdGEpOwoJICAgICAgICAgIH0pOwoKCSAgICAgICAgICB2YXIgc2VuZE1zZyA9IHsKCSAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAoJICAgICAgICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHNjaGVtYTogX3RoaXMuX3NjaGVtYSwgdmVyc2lvbjogX3RoaXMuX3ZlcnNpb24sIHZhbHVlOiB7IGRhdGE6ICgwLCBfdXRpbHMuZGVlcENsb25lKShfdGhpcy5kYXRhKSwgY2hpbGRyZW5zOiBjaGlsZHJlblZhbHVlcyB9IH0KCSAgICAgICAgICB9OwoKCSAgICAgICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ211dHVhbEF1dGhlbnRpY2F0aW9uJykgJiYgIW1zZy5ib2R5Lm11dHVhbEF1dGhlbnRpY2F0aW9uKSB7CgkgICAgICAgICAgICBzZW5kTXNnLmJvZHkubXV0dWFsQXV0aGVudGljYXRpb24gPSBfdGhpczMuX211dHVhbEF1dGhlbnRpY2F0aW9uOwoJICAgICAgICAgICAgX3RoaXMzLl9tdXR1YWxBdXRoZW50aWNhdGlvbiA9IG1zZy5ib2R5Lm11dHVhbEF1dGhlbnRpY2F0aW9uOwoJICAgICAgICAgIH0KCgkgICAgICAgICAgLy9zZW5kIG9rIHJlc3BvbnNlIG1lc3NhZ2UKCSAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHNlbmRNc2cpOwoKCSAgICAgICAgICByZXR1cm4gc3ViOwoJICAgICAgICB9LAoKCSAgICAgICAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3QocmVhc29uKSB7CgkgICAgICAgICAgLy9zZW5kIHJlamVjdCByZXNwb25zZSBtZXNzYWdlCgkgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CgkgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSwKCSAgICAgICAgICAgIGJvZHk6IHsgY29kZTogNDAzLCBkZXNjOiByZWFzb24gfQoJICAgICAgICAgIH0pOwoJICAgICAgICB9CgkgICAgICB9OwoKCSAgICAgIGlmIChfdGhpcy5fb25TdWJzY3JpcHRpb25IYW5kbGVyKSB7CgkgICAgICAgIGNvbnNvbGUubG9nKCdTVUJTQ1JJUFRJT04tRVZFTlQ6ICcsIGV2ZW50KTsKCSAgICAgICAgX3RoaXMuX29uU3Vic2NyaXB0aW9uSGFuZGxlcihldmVudCk7CgkgICAgICB9CgkgICAgfQoKCSAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSB0aGlzIC0+IF9vbkZvcndhcmQ6IGVtaXR0ZWQgYnkgYSByZW1vdGUgRGF0YU9iamVjdE9ic2VydmVyIC0+IHVuc3Vic2NyaWJlCgoJICB9LCB7CgkgICAga2V5OiAnX29uVW5TdWJzY3JpYmUnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfb25VblN1YnNjcmliZShtc2cpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgkgICAgICB2YXIgaHlwZXJ0eVVybCA9IG1zZy5ib2R5LmZyb207CgoJICAgICAgdmFyIHN1YiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVcmxdOwoJICAgICAgZGVsZXRlIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVcmxdOwoKCSAgICAgIHZhciBldmVudCA9IHsKCSAgICAgICAgdHlwZTogbXNnLmJvZHkudHlwZSwKCSAgICAgICAgdXJsOiBoeXBlcnR5VXJsLAoJICAgICAgICBvYmplY3Q6IHN1YgoJICAgICAgfTsKCgkgICAgICBpZiAoX3RoaXMuX29uU3Vic2NyaXB0aW9uSGFuZGxlcikgewoJICAgICAgICBjb25zb2xlLmxvZygnVU4tU1VCU0NSSVBUSU9OLUVWRU5UOiAnLCBldmVudCk7CgkgICAgICAgIF90aGlzLl9vblN1YnNjcmlwdGlvbkhhbmRsZXIoZXZlbnQpOwoJICAgICAgfQoJICAgIH0KCgkgICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gUmVwb3J0ZXJVUkwgYWRkcmVzczogZW1pdGVkIGJ5IGEgcmVtb3RlIFN5bmNoZXIgLT4gX29uUmVtb3RlQ3JlYXRlIC0+IGV2ZW50LmFjawoKCSAgfSwgewoJICAgIGtleTogJ19vblJlc3BvbnNlJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVzcG9uc2UobXNnKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKCSAgICAgIHZhciBldmVudCA9IHsKCSAgICAgICAgdHlwZTogbXNnLnR5cGUsCgkgICAgICAgIHVybDogbXNnLmZyb20sCgkgICAgICAgIGNvZGU6IG1zZy5ib2R5LmNvZGUKCSAgICAgIH07CgoJICAgICAgaWYgKF90aGlzLl9vblJlc3BvbnNlSGFuZGxlcikgewoJICAgICAgICBjb25zb2xlLmxvZygnUkVTUE9OU0UtRVZFTlQ6ICcsIGV2ZW50KTsKCSAgICAgICAgX3RoaXMuX29uUmVzcG9uc2VIYW5kbGVyKGV2ZW50KTsKCSAgICAgIH0KCSAgICB9CgoJICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIFJlcG9ydGVyVVJMIGFkZHJlc3M6IGVtaXRlZCBieSBhIHJlbW90ZSBTeW5jaGVyIC0+IHJlYWQKCgkgIH0sIHsKCSAgICBrZXk6ICdfb25SZWFkJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVhZChtc2cpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgdmFyIGV2ZW50ID0gewoJICAgICAgICB0eXBlOiBtc2cudHlwZSwKCSAgICAgICAgdXJsOiBtc2cuZnJvbSwKCgkgICAgICAgIGFjY2VwdDogZnVuY3Rpb24gYWNjZXB0KCkgewoJICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoewoJICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sCgkgICAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6ICgwLCBfdXRpbHMuZGVlcENsb25lKShfdGhpcy5kYXRhKSB9CgkgICAgICAgICAgfSk7CgkgICAgICAgIH0sCgoJICAgICAgICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHsKCSAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKCSAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAoJICAgICAgICAgICAgYm9keTogeyBjb2RlOiA0MDEsIGRlc2M6IHJlYXNvbiB9CgkgICAgICAgICAgfSk7CgkgICAgICAgIH0KCSAgICAgIH07CgoJICAgICAgaWYgKF90aGlzLl9vblJlYWRIYW5kbGVyKSB7CgkgICAgICAgIGNvbnNvbGUubG9nKCdSRUFELUVWRU5UOiAnLCBldmVudCk7CgkgICAgICAgIF90aGlzLl9vblJlYWRIYW5kbGVyKGV2ZW50KTsKCSAgICAgIH0KCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdzdWJzY3JpcHRpb25zJywKCSAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKCSAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25zOwoJICAgIH0KCSAgfV0pOwoJICByZXR1cm4gRGF0YU9iamVjdFJlcG9ydGVyOwoJfShfRGF0YU9iamVjdDMuZGVmYXVsdCAvKiBpbXBsZW1lbnRzIFN5bmNTdGF0dXMgKi8pOwoKCWV4cG9ydHMuZGVmYXVsdCA9IERhdGFPYmplY3RSZXBvcnRlcjsKCW1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKCS8qKiovIH0pLAoJLyogMTIwICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJInVzZSBzdHJpY3QiOwoKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgl2YXIgX3Byb21pc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKTsKCgl2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7CgoJdmFyIF9rZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7CgoJdmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpOwoKCXZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTsKCgl2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7CgoJdmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTsKCgl2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgoJdmFyIF9Qcm94eU9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMTIyKTsKCgl2YXIgX1Byb3h5T2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1Byb3h5T2JqZWN0KTsKCgl2YXIgX0RhdGFPYmplY3RDaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTIxKTsKCgl2YXIgX0RhdGFPYmplY3RDaGlsZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhT2JqZWN0Q2hpbGQpOwoKCXZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwOSk7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvKioKCSAqIE1haW4gZXh0ZW5zaW9uIGNsYXNzIGZvciBvYnNlcnZlcnMgYW5kIHJlcG9ydGVycywgd2l0aCBjb21tb24gcHJvcGVydGllcyBhbmQgbWV0aG9kcy4KCSAqIENoaWxkcmVuIG1hbmFnZW1lbnQgaXMgY29tbW9uIGZvciBvYnNlcnZlcnMgYW5kIHJlcG9ydGVycy4KCSAqLwoJdmFyIERhdGFPYmplY3QgPSBmdW5jdGlvbiAoKSB7CgkgIC8qIHByaXZhdGUKCSAgX3ZlcnNpb246IG51bWJlcgoJICAgX293bmVyOiBIeXBlcnR5VVJMCgkgIF91cmw6IE9iamVjdFVSTAoJICBfc2NoZW1hOiBTY2hlbWEKCSAgX2J1czogTWluaUJ1cwoJICBfc3RhdHVzOiBvbiB8IHBhdXNlZAoJICBfc3luY09iajogU3luY0RhdGEKCSAgIF9jaGlsZHJlbjogeyBpZDogRGF0YU9iamVjdENoaWxkIH0KCSAgX2NoaWxkcmVuTGlzdGVuZXJzOiBbTXNnTGlzdGVuZXJdCgkgICAtLS0tZXZlbnQgaGFuZGxlcnMtLS0tCgkgIF9vbkFkZENoaWxkSGFuZGxlcjogKGV2ZW50KSA9PiB2b2lkCgkgICovCgoJICAvKioKCSAgICogQGlnbm9yZQoJICAgKiBTaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHkgYnkgSHlwZXJ0aWVzLiBJdCdzIGNhbGxlZCBieSB0aGUgU3luY2hlciBjcmVhdGUgb3Igc3Vic2NyaWJlIG1ldGhvZCdzCgkgICAqLwoJICBmdW5jdGlvbiBEYXRhT2JqZWN0KHN5bmNoZXIsIHVybCwgc2NoZW1hLCBpbml0aWFsU3RhdHVzLCBpbml0aWFsRGF0YSwgY2hpbGRyZW5zKSB7CgkgICAgdmFyIG11dHVhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogdHJ1ZTsKCSAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBEYXRhT2JqZWN0KTsKCgkgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgX3RoaXMuX3N5bmNoZXIgPSBzeW5jaGVyOwoJICAgIF90aGlzLl91cmwgPSB1cmw7CgkgICAgX3RoaXMuX3NjaGVtYSA9IHNjaGVtYTsKCSAgICBfdGhpcy5fc3RhdHVzID0gaW5pdGlhbFN0YXR1czsKCSAgICBfdGhpcy5fc3luY09iaiA9IG5ldyBfUHJveHlPYmplY3QyLmRlZmF1bHQoaW5pdGlhbERhdGEpOwoJICAgIF90aGlzLl9jaGlsZHJlbnMgPSBjaGlsZHJlbnM7CgkgICAgX3RoaXMuX211dHVhbEF1dGhlbnRpY2F0aW9uID0gbXV0dWFsOwoKCSAgICBfdGhpcy5fdmVyc2lvbiA9IDA7CgkgICAgX3RoaXMuX2NoaWxkSWQgPSAwOwoJICAgIF90aGlzLl9jaGlsZHJlbk9iamVjdHMgPSB7fTsKCSAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMgPSBbXTsKCgkgICAgX3RoaXMuX293bmVyID0gc3luY2hlci5fb3duZXI7CgkgICAgX3RoaXMuX2J1cyA9IHN5bmNoZXIuX2J1czsKCSAgfQoKCSAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRGF0YU9iamVjdCwgW3sKCSAgICBrZXk6ICdfYWxsb2NhdGVMaXN0ZW5lcnMnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7CgkgICAgICB2YXIgX3RoaXMyID0gdGhpczsKCgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKCSAgICAgIHZhciBjaGlsZEJhc2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGlsZHJlbi8nOwoJICAgICAgY29uc29sZS5sb2coJ1tEYXRhIE9iamVjdCAtIEFsbG9jYXRlTGlzdGVuZXJzXSAtICcsIF90aGlzLl9jaGlsZHJlbnMpOwoJICAgICAgaWYgKF90aGlzLl9jaGlsZHJlbnMpIHsKCSAgICAgICAgX3RoaXMuX2NoaWxkcmVucy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkgewoJICAgICAgICAgIHZhciBjaGlsZFVSTCA9IGNoaWxkQmFzZVVSTCArIGNoaWxkOwoJICAgICAgICAgIHZhciBsaXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoY2hpbGRVUkwsIGZ1bmN0aW9uIChtc2cpIHsKCSAgICAgICAgICAgIC8vaWdub3JlIG1zZyBzZW50IGJ5IGhpbXNlbGYKCSAgICAgICAgICAgIGlmIChtc2cuZnJvbSAhPT0gX3RoaXMyLl9vd25lcikgewoJICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdC1DaGlsZHJlbi1SQ1Y6ICcsIG1zZyk7CgkgICAgICAgICAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHsKCSAgICAgICAgICAgICAgICBjYXNlICdjcmVhdGUnOgoJICAgICAgICAgICAgICAgICAgX3RoaXMuX29uQ2hpbGRDcmVhdGUobXNnKTticmVhazsKCSAgICAgICAgICAgICAgICBjYXNlICdkZWxldGUnOgoJICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobXNnKTticmVhazsKCSAgICAgICAgICAgICAgICBkZWZhdWx0OgoJICAgICAgICAgICAgICAgICAgX3RoaXMuX2NoYW5nZUNoaWxkcmVuKG1zZyk7YnJlYWs7CgkgICAgICAgICAgICAgIH0KCSAgICAgICAgICAgIH0KCSAgICAgICAgICB9KTsKCgkgICAgICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpOwoJICAgICAgICB9KTsKCSAgICAgIH0KCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsKCSAgICAgICAgbGlzdGVuZXIucmVtb3ZlKCk7CgkgICAgICB9KTsKCgkgICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKF90aGlzLl9jaGlsZHJlbk9iamVjdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewoJICAgICAgICBfdGhpcy5fY2hpbGRyZW5PYmplY3RzW2tleV0uX3JlbGVhc2VMaXN0ZW5lcnMoKTsKCSAgICAgIH0pOwoJICAgIH0KCgkgICAgLyoqCgkgICAgICogT2JqZWN0IFVSTCBvZiByZXBvcnRlciBvciBvYnNlcnZlcgoJICAgICAqIEB0eXBlIHtPYmplY3RVUkx9CgkgICAgICovCgoJICB9LCB7CgkgICAga2V5OiAncGF1c2UnLAoKCgkgICAgLyoqCgkgICAgICogQGlnbm9yZQoJICAgICAqLwoJICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHsKCSAgICAgIC8vVE9ETzogdGhpcyBmZWF0dXJlIG5lZWRzIG1vcmUgYW5hbGlzZQoJICAgICAgdGhyb3cgJ05vdCBpbXBsZW1lbnRlZCc7CgkgICAgfQoKCSAgICAvKioKCSAgICAgKiBAaWdub3JlCgkgICAgICovCgoJICB9LCB7CgkgICAga2V5OiAncmVzdW1lJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lKCkgewoJICAgICAgLy9UT0RPOiB0aGlzIGZlYXR1cmUgbmVlZHMgbW9yZSBhbmFsaXNlCgkgICAgICB0aHJvdyAnTm90IGltcGxlbWVudGVkJzsKCSAgICB9CgoJICAgIC8qKgoJICAgICAqIEBpZ25vcmUKCSAgICAgKi8KCgkgIH0sIHsKCSAgICBrZXk6ICdzdG9wJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gc3RvcCgpIHsKCSAgICAgIC8vVE9ETzogc2hvdWxkIHJlbW92ZSB0aGUgc3Vic2NyaXB0aW9uIGFuZCBzZW5kIG1lc3NhZ2UgdW5zdWJzY3JpYmU/CgkgICAgICB0aHJvdyAnTm90IGltcGxlbWVudGVkJzsKCSAgICB9CgoJICAgIC8qKgoJICAgICAqIENyZWF0ZSBhbmQgYWRkIGEgRGF0YU9iamVjdENoaWxkIHRvIGEgY2hpbGRyZW4gY29sbGVjdGlvbi4KCSAgICAgKiBAcGFyYW0ge1N0cmluZ30gY2hpbGRyZW4gLSBDaGlsZHJlbiBuYW1lIHdoZXJlIHRoZSBjaGlsZCBpcyBhZGRlZC4KCSAgICAgKiBAcGFyYW0ge0pTT059IGluaXRpYWxEYXRhIC0gSW5pdGlhbCBkYXRhIG9mIHRoZSBjaGlsZAoJICAgICAqIEByZXR1cm4ge1Byb21pc2U8RGF0YU9iamVjdENoaWxkPn0gLSBSZXR1cm4gUHJvbWlzZSB0byBhIG5ldyBEYXRhT2JqZWN0Q2hpbGQuCgkgICAgICovCgoJICB9LCB7CgkgICAga2V5OiAnYWRkQ2hpbGQnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRDaGlsZChjaGlsZHJlbiwgaW5pdGlhbERhdGEpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgLy9jcmVhdGUgbmV3IGNoaWxkIHVuaXF1ZSBJRCwgYmFzZWQgb24gaHlwZXJ0eVVSTAoJICAgICAgX3RoaXMuX2NoaWxkSWQrKzsKCSAgICAgIHZhciBtc2dDaGlsZElkID0gX3RoaXMuX293bmVyICsgJyMnICsgX3RoaXMuX2NoaWxkSWQ7CgkgICAgICB2YXIgbXNnQ2hpbGRQYXRoID0gX3RoaXMuX3VybCArICcvY2hpbGRyZW4vJyArIGNoaWxkcmVuOwoKCSAgICAgIC8vRkxPVy1PVVQ6IHRoaXMgbWVzc2FnZSB3aWxsIGJlIHNlbnQgZGlyZWN0bHkgdG8gYSByZXNvdXJjZSBjaGlsZCBhZGRyZXNzOiBNZXNzYWdlQnVzCgkgICAgICB2YXIgcmVxdWVzdE1zZyA9IHsKCSAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLl9vd25lciwgdG86IG1zZ0NoaWxkUGF0aCwKCSAgICAgICAgYm9keTogeyByZXNvdXJjZTogbXNnQ2hpbGRJZCwgdmFsdWU6IGluaXRpYWxEYXRhIH0KCSAgICAgIH07CgkgICAgICBpZiAoIV90aGlzLl9tdXR1YWxBdXRoZW50aWNhdGlvbikgcmVxdWVzdE1zZy5ib2R5Lm11dHVhbEF1dGhlbnRpY2F0aW9uID0gX3RoaXMuX211dHVhbEF1dGhlbnRpY2F0aW9uOwoKCSAgICAgIC8vcmV0dXJucyBwcm9taXNlLCBpbiB0aGUgZnV0dXJlLCB0aGUgQVBJIG1heSBjaGFuZ2UgdG8gYXN5bmNocm9ub3VzIGNhbGwKCSAgICAgIHJldHVybiBuZXcgX3Byb21pc2UyLmRlZmF1bHQoZnVuY3Rpb24gKHJlc29sdmUpIHsKCSAgICAgICAgdmFyIG1zZ0lkID0gX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShyZXF1ZXN0TXNnKTsKCgkgICAgICAgIGNvbnNvbGUubG9nKCdjcmVhdGUtcmVwb3J0ZXItY2hpbGQoICcgKyBfdGhpcy5fb3duZXIgKyAnICk6ICcsIHJlcXVlc3RNc2cpOwoJICAgICAgICB2YXIgbmV3Q2hpbGQgPSBuZXcgX0RhdGFPYmplY3RDaGlsZDIuZGVmYXVsdChfdGhpcywgbXNnQ2hpbGRJZCwgaW5pdGlhbERhdGEsIF90aGlzLl9vd25lciwgbXNnSWQpOwoJICAgICAgICBuZXdDaGlsZC5vbkNoYW5nZShmdW5jdGlvbiAoZXZlbnQpIHsKCSAgICAgICAgICBfdGhpcy5fb25DaGFuZ2UoZXZlbnQsIHsgcGF0aDogbXNnQ2hpbGRQYXRoLCBjaGlsZElkOiBtc2dDaGlsZElkIH0pOwoJICAgICAgICB9KTsKCgkgICAgICAgIF90aGlzLl9jaGlsZHJlbk9iamVjdHNbbXNnQ2hpbGRJZF0gPSBuZXdDaGlsZDsKCgkgICAgICAgIHJlc29sdmUobmV3Q2hpbGQpOwoJICAgICAgfSk7CgkgICAgfQoKCSAgICAvKioKCSAgICAgKiBTZXR1cCB0aGUgY2FsbGJhY2sgdG8gcHJvY2VzcyBjcmVhdGUgYW5kIGRlbGV0ZSBvZiBjaGlsZHJlbnMuCgkgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudDogTXNnRXZlbnQpfSBjYWxsYmFjawoJICAgICAqLwoKCSAgfSwgewoJICAgIGtleTogJ29uQWRkQ2hpbGQnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBvbkFkZENoaWxkKGNhbGxiYWNrKSB7CgkgICAgICB0aGlzLl9vbkFkZENoaWxkcmVuSGFuZGxlciA9IGNhbGxiYWNrOwoJICAgIH0KCgkgICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gYSByZW1vdGUgRGF0YU9iamVjdCAtPiBhZGRDaGlsZAoKCSAgfSwgewoJICAgIGtleTogJ19vbkNoaWxkQ3JlYXRlJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX29uQ2hpbGRDcmVhdGUobXNnKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoJICAgICAgdmFyIG1zZ0NoaWxkSWQgPSBtc2cuYm9keS5yZXNvdXJjZTsKCgkgICAgICBjb25zb2xlLmxvZygnY3JlYXRlLW9ic2VydmVyLWNoaWxkKCAnICsgX3RoaXMuX293bmVyICsgJyApOiAnLCBtc2cpOwoJICAgICAgdmFyIG5ld0NoaWxkID0gbmV3IF9EYXRhT2JqZWN0Q2hpbGQyLmRlZmF1bHQoX3RoaXMsIG1zZ0NoaWxkSWQsIG1zZy5ib2R5LnZhbHVlKTsKCSAgICAgIF90aGlzLl9jaGlsZHJlbk9iamVjdHNbbXNnQ2hpbGRJZF0gPSBuZXdDaGlsZDsKCgkgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKCSAgICAgICAgLy9GTE9XLU9VVDogd2lsbCBmbG93IHRvIERhdGFPYmplY3RDaGlsZCAtPiBfb25SZXNwb25zZQoJICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKCSAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSwKCSAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgc291cmNlOiBfdGhpcy5fb3duZXIgfQoJICAgICAgICB9KTsKCSAgICAgIH0pOwoKCSAgICAgIHZhciBldmVudCA9IHsKCSAgICAgICAgdHlwZTogbXNnLnR5cGUsCgkgICAgICAgIGZyb206IG1zZy5mcm9tLAoJICAgICAgICB1cmw6IG1zZy50bywKCSAgICAgICAgdmFsdWU6IG1zZy5ib2R5LnZhbHVlLAoJICAgICAgICBjaGlsZElkOiBtc2dDaGlsZElkLAoJICAgICAgICBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHkKCSAgICAgIH07CgoJICAgICAgaWYgKF90aGlzLl9vbkFkZENoaWxkcmVuSGFuZGxlcikgewoJICAgICAgICBjb25zb2xlLmxvZygnQURELUNISUxEUkVOLUVWRU5UOiAnLCBldmVudCk7CgkgICAgICAgIF90aGlzLl9vbkFkZENoaWxkcmVuSGFuZGxlcihldmVudCk7CgkgICAgICB9CgkgICAgfQoKCSAgICAvL3NlbmQgZGVsdGEgbWVzc2FnZXMgdG8gc3Vic2NyaXB0aW9ucwoKCSAgfSwgewoJICAgIGtleTogJ19vbkNoYW5nZScsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkNoYW5nZShldmVudCwgY2hpbGRJbmZvKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKCSAgICAgIF90aGlzLl92ZXJzaW9uKys7CgoJICAgICAgaWYgKF90aGlzLl9zdGF0dXMgPT09ICdvbicpIHsKCSAgICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCBkaXJlY3RseSB0byBhIHJlc291cmNlIGNoYW5nZXMgYWRkcmVzczogTWVzc2FnZUJ1cwoJICAgICAgICB2YXIgY2hhbmdlTXNnID0gewoJICAgICAgICAgIHR5cGU6ICd1cGRhdGUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogX3RoaXMuX3VybCArICcvY2hhbmdlcycsCgkgICAgICAgICAgYm9keTogeyB2ZXJzaW9uOiBfdGhpcy5fdmVyc2lvbiwgc291cmNlOiBfdGhpcy5fb3duZXIsIGF0dHJpYnV0ZTogZXZlbnQuZmllbGQgfQoJICAgICAgICB9OwoKCSAgICAgICAgY29uc29sZS5sb2coJ1tEYXRhT2JqZWN0IC0gX29uQ2hhbmdlXSAtICcsIGV2ZW50LCBjaGlsZEluZm8sIGNoYW5nZU1zZyk7CgoJICAgICAgICBpZiAoZXZlbnQub1R5cGUgPT09IF9Qcm94eU9iamVjdC5PYmplY3RUeXBlLk9CSkVDVCkgewoJICAgICAgICAgIGlmIChldmVudC5jVHlwZSAhPT0gX1Byb3h5T2JqZWN0LkNoYW5nZVR5cGUuUkVNT1ZFKSB7CgkgICAgICAgICAgICBjaGFuZ2VNc2cuYm9keS52YWx1ZSA9IGV2ZW50LmRhdGE7CgkgICAgICAgICAgfQoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgIGNoYW5nZU1zZy5ib2R5LmF0dHJpYnV0ZVR5cGUgPSBldmVudC5vVHlwZTsKCSAgICAgICAgICBjaGFuZ2VNc2cuYm9keS52YWx1ZSA9IGV2ZW50LmRhdGE7CgkgICAgICAgICAgaWYgKGV2ZW50LmNUeXBlICE9PSBfUHJveHlPYmplY3QuQ2hhbmdlVHlwZS5VUERBVEUpIHsKCSAgICAgICAgICAgIGNoYW5nZU1zZy5ib2R5Lm9wZXJhdGlvbiA9IGV2ZW50LmNUeXBlOwoJICAgICAgICAgIH0KCSAgICAgICAgfQoKCSAgICAgICAgLy9jaGlsZEluZm8gbXVzdCBoYXZlIChwYXRoLCBjaGlsZElkKQoJICAgICAgICBpZiAoY2hpbGRJbmZvKSB7CgkgICAgICAgICAgY2hhbmdlTXNnLnRvID0gY2hpbGRJbmZvLnBhdGg7CgkgICAgICAgICAgY2hhbmdlTXNnLmJvZHkucmVzb3VyY2UgPSBjaGlsZEluZm8uY2hpbGRJZDsKCSAgICAgICAgfQoKCSAgICAgICAgaWYgKCFfdGhpcy5fbXV0dWFsQXV0aGVudGljYXRpb24pIGNoYW5nZU1zZy5ib2R5Lm11dHVhbEF1dGhlbnRpY2F0aW9uID0gX3RoaXMuX211dHVhbEF1dGhlbnRpY2F0aW9uOwoKCSAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShjaGFuZ2VNc2cpOwoJICAgICAgfQoJICAgIH0KCgkgICAgLy9GTE9XLUlOOiBkZWx0YSBtZXNzYWdlIHJlY2VpdmVkIGZyb20gYSByZW1vdGUgRGF0YU9iamVjdFJlcG9ydGVyIG9yIERhdGFPYmplY3RDaGlsZCB3aGVuIGNoYW5naW5nIGRhdGEKCgkgIH0sIHsKCSAgICBrZXk6ICdfY2hhbmdlT2JqZWN0JywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX2NoYW5nZU9iamVjdChzeW5jT2JqLCBtc2cpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgLy9UT0RPOiB1cGRhdGUgdmVyc2lvbiA/CgkgICAgICAvL2hvdyB0byBoYW5kbGUgYW4gaW5jb3JyZWN0IHZlcnNpb24gPyBFeGFtcGxlOiByZWNlaXZlIGEgdmVyc2lvbiAzIHdoZW4gdGhlIG9ic2VydmVyIGlzIGluIHZlcnNpb24gMSwgd2hlcmUgaXMgdGhlIHZlcnNpb24gMiA/CgkgICAgICAvL3dpbGwgd2UgbmVlZCB0byBjb25maXJtIHRoZSByZWNlcHRpb24gPwoJICAgICAgaWYgKF90aGlzLl92ZXJzaW9uICsgMSA9PT0gbXNnLmJvZHkudmVyc2lvbikgewoJICAgICAgICBfdGhpcy5fdmVyc2lvbisrOwoJICAgICAgICB2YXIgcGF0aCA9IG1zZy5ib2R5LmF0dHJpYnV0ZTsKCSAgICAgICAgdmFyIHZhbHVlID0gKDAsIF91dGlscy5kZWVwQ2xvbmUpKG1zZy5ib2R5LnZhbHVlKTsKCSAgICAgICAgdmFyIGZpbmRSZXN1bHQgPSBzeW5jT2JqLmZpbmRCZWZvcmUocGF0aCk7CgoJICAgICAgICBpZiAobXNnLmJvZHkuYXR0cmlidXRlVHlwZSA9PT0gX1Byb3h5T2JqZWN0Lk9iamVjdFR5cGUuQVJSQVkpIHsKCSAgICAgICAgICBpZiAobXNnLmJvZHkub3BlcmF0aW9uID09PSBfUHJveHlPYmplY3QuQ2hhbmdlVHlwZS5BREQpIHsKCSAgICAgICAgICAgIHZhciBhcnIgPSBmaW5kUmVzdWx0Lm9iajsKCSAgICAgICAgICAgIHZhciBpbmRleCA9IGZpbmRSZXN1bHQubGFzdDsKCSAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoYXJyLCBbaW5kZXgsIDBdLmNvbmNhdCh2YWx1ZSkpOwoJICAgICAgICAgIH0gZWxzZSBpZiAobXNnLmJvZHkub3BlcmF0aW9uID09PSBfUHJveHlPYmplY3QuQ2hhbmdlVHlwZS5SRU1PVkUpIHsKCSAgICAgICAgICAgIHZhciBfYXJyID0gZmluZFJlc3VsdC5vYmo7CgkgICAgICAgICAgICB2YXIgX2luZGV4ID0gZmluZFJlc3VsdC5sYXN0OwoJICAgICAgICAgICAgX2Fyci5zcGxpY2UoX2luZGV4LCB2YWx1ZSk7CgkgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgIGZpbmRSZXN1bHQub2JqW2ZpbmRSZXN1bHQubGFzdF0gPSB2YWx1ZTsgLy8gVVBEQVRFCgkgICAgICAgICAgfQoJICAgICAgICB9IGVsc2UgewoJICAgICAgICAgIGlmIChtc2cuYm9keS52YWx1ZSkgewoJICAgICAgICAgICAgZmluZFJlc3VsdC5vYmpbZmluZFJlc3VsdC5sYXN0XSA9IHZhbHVlOyAvLyBVUERBVEUgb3IgQURECgkgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgIGRlbGV0ZSBmaW5kUmVzdWx0Lm9ialtmaW5kUmVzdWx0Lmxhc3RdOyAvLyBSRU1PVkUKCSAgICAgICAgICB9CgkgICAgICAgIH0KCSAgICAgIH0gZWxzZSB7CgkgICAgICAgIC8vVE9ETzogaG93IHRvIGhhbmRsZSB1bnN5bmNocm9uaXplZCB2ZXJzaW9ucz8KCSAgICAgICAgY29uc29sZS5sb2coJ1VOU1lOQ0hST05JWkVEIFZFUlNJT046IChkYXRhID0+ICcgKyBfdGhpcy5fdmVyc2lvbiArICcsIG1zZyA9PiAnICsgbXNnLmJvZHkudmVyc2lvbiArICcpJyk7CgkgICAgICB9CgkgICAgfQoKCSAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBhIHJlbW90ZSBEYXRhT2JqZWN0Q2hpbGQgd2hlbiBjaGFuZ2luZyBkYXRhCgoJICB9LCB7CgkgICAga2V5OiAnX2NoYW5nZUNoaWxkcmVuJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX2NoYW5nZUNoaWxkcmVuKG1zZykgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCSAgICAgIGNvbnNvbGUubG9nKCdDaGFuZ2UgY2hpbGRyZW46ICcsIF90aGlzLl9vd25lciwgbXNnKTsKCgkgICAgICB2YXIgY2hpbGRJZCA9IG1zZy5ib2R5LnJlc291cmNlOwoJICAgICAgdmFyIGNoaWxkcmVuID0gX3RoaXMuX2NoaWxkcmVuT2JqZWN0c1tjaGlsZElkXTsKCgkgICAgICBpZiAoY2hpbGRyZW4pIHsKCSAgICAgICAgX3RoaXMuX2NoYW5nZU9iamVjdChjaGlsZHJlbi5fc3luY09iaiwgbXNnKTsKCSAgICAgIH0gZWxzZSB7CgkgICAgICAgIGNvbnNvbGUubG9nKCdObyBjaGlsZHJlbiBmb3VuZCBmb3I6ICcsIGNoaWxkSWQpOwoJICAgICAgfQoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ3VybCcsCgkgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CgkgICAgICByZXR1cm4gdGhpcy5fdXJsOwoJICAgIH0KCgkgICAgLyoqCgkgICAgICogT2JqZWN0IHNjaGVtYSBVUkwgKHRoaXMgZmllbGQgaXMgbm90IHlldCBzdGFibGUsIGFuZCBpcyBzdWJzamVjdCB0byBjaGFuZ2UpCgkgICAgICogQHR5cGUge1NjaGVtYVVSTH0KCSAgICAgKi8KCgkgIH0sIHsKCSAgICBrZXk6ICdzY2hlbWEnLAoJICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewoJICAgICAgcmV0dXJuIHRoaXMuX3NjaGVtYTsKCSAgICB9CgoJICAgIC8qKgoJICAgICAqIFN0YXR1cyBvZiB0aGUgcmVwb3J0ZXIgb3Igb2JzZXJ2ZXIgY29ubmVjdGlvbiAodGhpcyBmaWVsZCBpcyBub3QgeWV0IHN0YWJsZSwgYW5kIGlzIHN1YnNqZWN0IHRvIGNoYW5nZSkKCSAgICAgKiBAdHlwZSB7U3RhdHVzfSAtIEVudW0gb2Y6IG9uIHwgcGF1c2VkCgkgICAgICovCgoJICB9LCB7CgkgICAga2V5OiAnc3RhdHVzJywKCSAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKCSAgICAgIHJldHVybiB0aGlzLl9zdGF0dXM7CgkgICAgfQoKCSAgICAvKioKCSAgICAgKiBEYXRhIHN0cnVjdHVyZSB0byBiZSBzeW5jaHJvbml6ZWQuCgkgICAgICogQHR5cGUge0pTT059IC0gSlNPTiBzdHJ1Y3R1cmUgdGhhdCBzaG91bGQgZm9sbG93IHRoZSBkZWZpbmVkIHNjaGVtYSwgaWYgYW55LgoJICAgICAqLwoKCSAgfSwgewoJICAgIGtleTogJ2RhdGEnLAoJICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewoJICAgICAgcmV0dXJuIHRoaXMuX3N5bmNPYmouZGF0YTsKCSAgICB9CgoJICAgIC8qKgoJICAgICAqIEFsbCBjcmVhdGVkIGNoaWxkcmVuJ3Mgc2luY2UgdGhlIHN1YnNjcmlwdGlvbiwgZG9lc24ndCBjb250YWluIGFsbCBjaGlsZHJlbidzIHNpbmNlIHJlcG9ydGVyIGNyZWF0aW9uLgoJICAgICAqIEB0eXBlIHtPYmplY3Q8Q2hpbGRJZCwgRGF0YU9iamVjdENoaWxkPn0KCSAgICAgKi8KCgkgIH0sIHsKCSAgICBrZXk6ICdjaGlsZHJlbnMnLAoJICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewoJICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuT2JqZWN0czsKCSAgICB9CgkgIH1dKTsKCSAgcmV0dXJuIERhdGFPYmplY3Q7Cgl9KCk7IC8qKgoJICAgICAqIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQQoJICAgICAqIENvcHlyaWdodCAyMDE2IElORVNDLUlECgkgICAgICogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMCgkgICAgICogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlYKCSAgICAgKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKCSAgICAgKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHCgkgICAgICogQ29weXJpZ2h0IDIwMTYgQXBpemVlCgkgICAgICogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KCSAgICAgKgoJICAgICAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwoJICAgICAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KCSAgICAgKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKCSAgICAgKgoJICAgICAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCgkgICAgICoKCSAgICAgKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCgkgICAgICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKCSAgICAgKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KCSAgICAgKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCgkgICAgICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgkgICAgICoqLwoKCWV4cG9ydHMuZGVmYXVsdCA9IERhdGFPYmplY3Q7Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCgkvKioqLyB9KSwKCS8qIDEyMSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSJ1c2Ugc3RyaWN0IjsKCgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CgoJdmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpOwoKCXZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTsKCgl2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTApOwoKCXZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTsKCgl2YXIgX1Byb3h5T2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjIpOwoKCXZhciBfUHJveHlPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUHJveHlPYmplY3QpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLyoqCgkgKiBUaGUgY2xhc3MgcmV0dXJuZWQgZnJvbSB0aGUgRGF0YU9iamVjdCBhZGRDaGlsZHJlbiBjYWxsIG9yIGZyb20gb25BZGRDaGlsZHJlbiBpZiByZW1vdGVseSBjcmVhdGVkLgoJICogQ2hpbGRyZW4gb2JqZWN0IHN5bmNocm9uaXphdGlvbiBpcyBhIGEgZmFzdCBmb3J3YXJkIG1lY2hhbmlzbSwgbm8gbmVlZCBmb3IgZGlyZWN0IHN1YnNjcmlwdGlvbnMsIGl0IHVzZXMgdGhlIGFscmVhZHkgYXV0aG9yaXplZCBzdWJzY3JpcHRpb24gZnJvbSB0aGUgcGFyZW50IERhdGFPYmplY3QuCgkgKi8KCXZhciBEYXRhT2JqZWN0Q2hpbGQgLyogaW1wbGVtZW50cyBTeW5jU3RhdHVzICovID0gZnVuY3Rpb24gKCkgewoJICAvKiBwcml2YXRlCgkgICAtLS0tZXZlbnQgaGFuZGxlcnMtLS0tCgkgIF9vblJlc3BvbnNlSGFuZGxlcjogKGV2ZW50KSA9PiB2b2lkCgkgICovCgoJICAvKioKCSAgICogQGlnbm9yZQoJICAgKiBTaG91bGQgbm90IGJlIHVzZWQgZGlyZWN0bHkgYnkgSHlwZXJ0aWVzLiBJdCdzIGNhbGxlZCBieSB0aGUgRGF0YU9iamVjdC5hZGRDaGlsZHJlbgoJICAgKi8KCSAgZnVuY3Rpb24gRGF0YU9iamVjdENoaWxkKHBhcmVudCwgY2hpbGRJZCwgaW5pdGlhbERhdGEsIG93bmVyLCBtc2dJZCkgewoJICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERhdGFPYmplY3RDaGlsZCk7CgoJICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7CgkgICAgX3RoaXMuX2NoaWxkSWQgPSBjaGlsZElkOwoJICAgIF90aGlzLl9vd25lciA9IG93bmVyOwoJICAgIF90aGlzLl9tc2dJZCA9IG1zZ0lkOwoKCSAgICBfdGhpcy5fc3luY09iaiA9IG5ldyBfUHJveHlPYmplY3QyLmRlZmF1bHQoaW5pdGlhbERhdGEpOwoKCSAgICBfdGhpcy5fYnVzID0gcGFyZW50Ll9idXM7CgkgICAgX3RoaXMuX2FsbG9jYXRlTGlzdGVuZXJzKCk7CgkgIH0KCgkgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERhdGFPYmplY3RDaGlsZCwgW3sKCSAgICBrZXk6ICdfYWxsb2NhdGVMaXN0ZW5lcnMnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKCSAgICAgIC8vdGhpcyBpcyBvbmx5IG5lZWRlZCBmb3IgY2hpbGRyZW4gcmVwb3J0ZXJzCgkgICAgICBpZiAoX3RoaXMuX293bmVyKSB7CgkgICAgICAgIF90aGlzLl9saXN0ZW5lciA9IF90aGlzLl9idXMuYWRkTGlzdGVuZXIoX3RoaXMuX293bmVyLCBmdW5jdGlvbiAobXNnKSB7CgkgICAgICAgICAgaWYgKG1zZy50eXBlID09PSAncmVzcG9uc2UnICYmIG1zZy5pZCA9PT0gX3RoaXMuX21zZ0lkKSB7CgkgICAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdENoaWxkLm9uUmVzcG9uc2U6JywgbXNnKTsKCSAgICAgICAgICAgIF90aGlzLl9vblJlc3BvbnNlKG1zZyk7CgkgICAgICAgICAgfQoJICAgICAgICB9KTsKCSAgICAgIH0KCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgICBpZiAoX3RoaXMuX2xpc3RlbmVyKSB7CgkgICAgICAgIF90aGlzLl9saXN0ZW5lci5yZW1vdmUoKTsKCSAgICAgIH0KCSAgICB9CgoJICAgIC8qKgoJICAgICAqIFJlbGVhc2UgYW5kIGRlbGV0ZSBvYmplY3QgZGF0YQoJICAgICAqLwoKCSAgfSwgewoJICAgIGtleTogJ2RlbGV0ZScsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKCSAgICAgIGRlbGV0ZSBfdGhpcy5fcGFyZW50Ll9jaGlsZHJlbltfdGhpcy5fY2hpbGRJZF07CgoJICAgICAgX3RoaXMuX3JlbGVhc2VMaXN0ZW5lcnMoKTsKCgkgICAgICAvL1RPRE86IHNlbmQgZGVsZXRlIG1lc3NhZ2UgPwoJICAgIH0KCgkgICAgLyoqCgkgICAgICogQ2hpbGRyZW4gSUQgZ2VuZXJhdGVkIG9uIGFkZENoaWxkcmVuLiBVbmlxdWUgaWRlbnRpZmllcgoJICAgICAqIEB0eXBlIHtVUkx9IC0gVVJMIG9mIHRoZSBmb3JtYXQgPEh5cGVydHlVUkw+IzxudW1lcmljLXNlcXVlbmNlPgoJICAgICAqLwoKCSAgfSwgewoJICAgIGtleTogJ29uQ2hhbmdlJywKCgoJICAgIC8qKgoJICAgICAqIFJlZ2lzdGVyIHRoZSBjaGFuZ2UgbGlzdGVuZXJzIHNlbnQgYnkgdGhlIHJlcG9ydGVyIGNoaWxkCgkgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudDogTXNnRXZlbnQpfSBjYWxsYmFjawoJICAgICAqLwoJICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZShjYWxsYmFjaykgewoJICAgICAgdGhpcy5fc3luY09iai5vYnNlcnZlKGZ1bmN0aW9uIChldmVudCkgewoJICAgICAgICBjYWxsYmFjayhldmVudCk7CgkgICAgICB9KTsKCSAgICB9CgoJICAgIC8qKgoJICAgICAqIFNldHVwIHRoZSBjYWxsYmFjayB0byBwcm9jZXNzIHJlc3BvbnNlIG5vdGlmaWNhdGlvbnMgb2YgdGhlIGNyZWF0ZXMKCSAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGV2ZW50OiBNc2dFdmVudCl9IGNhbGxiYWNrCgkgICAgICovCgoJICB9LCB7CgkgICAga2V5OiAnb25SZXNwb25zZScsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIG9uUmVzcG9uc2UoY2FsbGJhY2spIHsKCSAgICAgIHRoaXMuX29uUmVzcG9uc2VIYW5kbGVyID0gY2FsbGJhY2s7CgkgICAgfQoKCSAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBhIHJlbW90ZSBEYXRhT2JqZWN0IC0+IF9vbkNoaWxkQ3JlYXRlCgoJICB9LCB7CgkgICAga2V5OiAnX29uUmVzcG9uc2UnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZXNwb25zZShtc2cpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgdmFyIGV2ZW50ID0gewoJICAgICAgICB0eXBlOiBtc2cudHlwZSwKCSAgICAgICAgdXJsOiBtc2cuYm9keS5zb3VyY2UsCgkgICAgICAgIGNvZGU6IG1zZy5ib2R5LmNvZGUKCSAgICAgIH07CgoJICAgICAgaWYgKF90aGlzLl9vblJlc3BvbnNlSGFuZGxlcikgewoJICAgICAgICBfdGhpcy5fb25SZXNwb25zZUhhbmRsZXIoZXZlbnQpOwoJICAgICAgfQoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ2NoaWxkSWQnLAoJICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewoJICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkSWQ7CgkgICAgfQoKCSAgICAvKioKCSAgICAgKiBEYXRhIFN0cnVjdHVyZSB0byBiZSBzeW5jaHJvbml6ZWQuCgkgICAgICogQHR5cGUge0pTT059IC0gSlNPTiBzdHJ1Y3R1cmUgdGhhdCBzaG91bGQgZm9sbG93IHRoZSBkZWZpbmVkIHNjaGVtYSwgaWYgYW55LgoJICAgICAqLwoKCSAgfSwgewoJICAgIGtleTogJ2RhdGEnLAoJICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewoJICAgICAgcmV0dXJuIHRoaXMuX3N5bmNPYmouZGF0YTsKCSAgICB9CgkgIH1dKTsKCSAgcmV0dXJuIERhdGFPYmplY3RDaGlsZDsKCX0oKTsgLyoqCgkgICAgICogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCgkgICAgICogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQKCSAgICAgKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0wKCSAgICAgKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoJICAgICAqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQoJICAgICAqIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUcKCSAgICAgKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKCSAgICAgKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTgoJICAgICAqCgkgICAgICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CgkgICAgICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgoJICAgICAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAoJICAgICAqCgkgICAgICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCSAgICAgKgoJICAgICAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKCSAgICAgKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAoJICAgICAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgoJICAgICAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKCSAgICAgKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCSAgICAgKiovCgoJZXhwb3J0cy5kZWZhdWx0ID0gRGF0YU9iamVjdENoaWxkOwoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgoJLyoqKi8gfSksCgkvKiAxMjIgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkidXNlIHN0cmljdCI7CgoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoJZXhwb3J0cy5PYmplY3RUeXBlID0gZXhwb3J0cy5DaGFuZ2VUeXBlID0gdW5kZWZpbmVkOwoKCXZhciBfc3RyaW5naWZ5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0MCk7CgoJdmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RyaW5naWZ5KTsKCgl2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7CgoJdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKCXZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7CgoJdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKCV9fd2VicGFja19yZXF1aXJlX18oMTUzKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCXZhciBvYmplY3RUeXBlID0geyBBUlJBWTogJ1tvYmplY3QgQXJyYXldJywgT0JKRUNUOiAnW29iamVjdCBPYmplY3RdJyB9OwoKCS8qKgoJICogQGFjY2VzcyBwcml2YXRlCgkgKiBNYWluIGNsYXNzIHRoYXQgbWFpbnRhaW5zIGEgSlNPTiBvYmplY3QsIGFuZCBvYnNlcnZlcyBjaGFuZ2VzIGluIHRoaXMgb2JqZWN0LCByZWN1cnNpdmVseS4KCSAqIEludGVybmFsIG9iamVjdHMgYW5kIGFycmF5cyBhcmUgYWxzbyBvYnNlcnZlZC4KCSAqLwoKCXZhciBTeW5jT2JqZWN0ID0gZnVuY3Rpb24gKCkgewoJICBmdW5jdGlvbiBTeW5jT2JqZWN0KGluaXRpYWxEYXRhKSB7CgkgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU3luY09iamVjdCk7CgoJICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgIF90aGlzLl9vYnNlcnZlcnMgPSBbXTsKCSAgICBfdGhpcy5fZmlsdGVycyA9IHt9OwoKCSAgICB0aGlzLl9kYXRhID0gaW5pdGlhbERhdGEgfHwge307CgoJICAgIHRoaXMuX2ludGVybmFsT2JzZXJ2ZSh0aGlzLl9kYXRhKTsKCSAgfQoKCSAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3luY09iamVjdCwgW3sKCSAgICBrZXk6ICdvYnNlcnZlJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gb2JzZXJ2ZShjYWxsYmFjaykgewoJICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnB1c2goY2FsbGJhY2spOwoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ2ZpbmQnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kKHBhdGgpIHsKCSAgICAgIHZhciBsaXN0ID0gcGF0aC5zcGxpdCgnLicpOwoKCSAgICAgIHJldHVybiB0aGlzLl9maW5kV2l0aFNwbGl0KGxpc3QpOwoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ2ZpbmRCZWZvcmUnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBmaW5kQmVmb3JlKHBhdGgpIHsKCSAgICAgIHZhciByZXN1bHQgPSB7fTsKCSAgICAgIHZhciBsaXN0ID0gcGF0aC5zcGxpdCgnLicpOwoJICAgICAgcmVzdWx0Lmxhc3QgPSBsaXN0LnBvcCgpOwoJICAgICAgcmVzdWx0Lm9iaiA9IHRoaXMuX2ZpbmRXaXRoU3BsaXQobGlzdCk7CgoJICAgICAgcmV0dXJuIHJlc3VsdDsKCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfZmluZFdpdGhTcGxpdCcsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9maW5kV2l0aFNwbGl0KGxpc3QpIHsKCSAgICAgIHZhciBvYmogPSB0aGlzLl9kYXRhOwoJICAgICAgbGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkgewoJICAgICAgICBvYmogPSBvYmpbdmFsdWVdOwoJICAgICAgfSk7CgoJICAgICAgcmV0dXJuIG9iajsKCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfaXNPYnNlcnZhYmxlJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX2lzT2JzZXJ2YWJsZShvYmopIHsKCSAgICAgIGlmIChvYmouY29uc3RydWN0b3IgPT09IE9iamVjdCB8fCBvYmouY29uc3RydWN0b3IgPT09IEFycmF5KSB7CgkgICAgICAgIHJldHVybiB0cnVlOwoJICAgICAgfQoKCSAgICAgIHJldHVybiBmYWxzZTsKCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfaW50ZXJuYWxPYnNlcnZlJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX2ludGVybmFsT2JzZXJ2ZShvYmplY3QpIHsKCSAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKCSAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gaGFuZGxlcihjaGFuZ2VzZXQpIHsKCgkgICAgICAgIGNoYW5nZXNldC5ldmVyeShmdW5jdGlvbiAoY2hhbmdlKSB7CgkgICAgICAgICAgX3RoaXMyLl9vbkNoYW5nZXMoY2hhbmdlKTsKCSAgICAgICAgfSk7CgkgICAgICB9OwoKCSAgICAgIHRoaXMuX2RhdGEgPSBPYmplY3QuZGVlcE9ic2VydmUob2JqZWN0LCBoYW5kbGVyKTsKCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfZmlyZUV2ZW50JywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX2ZpcmVFdmVudChldmVudCkgewoJICAgICAgdGhpcy5fb2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKGNhbGxiYWNrKSB7CgkgICAgICAgIGNhbGxiYWNrKGV2ZW50KTsKCSAgICAgIH0pOwoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ19vbkNoYW5nZXMnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfb25DaGFuZ2VzKGNoYW5nZSkgewoKCSAgICAgIHZhciBvYmogPSBjaGFuZ2Uub2JqZWN0OwoJICAgICAgdmFyIG9ialR5cGUgPSB2b2lkIDA7CgoJICAgICAgaWYgKG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7CgkgICAgICAgIG9ialR5cGUgPSBPYmplY3RUeXBlLk9CSkVDVDsKCSAgICAgIH0KCgkgICAgICBpZiAob2JqLmNvbnN0cnVjdG9yID09PSBBcnJheSkgewoJICAgICAgICBvYmpUeXBlID0gT2JqZWN0VHlwZS5BUlJBWTsKCSAgICAgIH0KCgkgICAgICB2YXIgZmllbGRTdHJpbmcgPSBjaGFuZ2Uua2V5cGF0aDsKCgkgICAgICAvLyBjb25zb2xlLmxvZygnRmllbGQ6JywgZmllbGRTdHJpbmcpOwoJICAgICAgLy8gY29uc29sZS5sb2coJ3R5cGU6JywgY2hhbmdlLnR5cGUpOwoKCSAgICAgIC8vbGV0IG9sZFZhbHVlID0gY2hhbmdlLm9sZFZhbHVlOwoJICAgICAgdmFyIG5ld1ZhbHVlID0gb2JqW2NoYW5nZS5uYW1lXTsKCgkgICAgICBjb25zb2xlLmluZm8oY2hhbmdlLnR5cGUgKyAnIHwgRmllbGQ6ICcgKyBmaWVsZFN0cmluZyArICcgfCBOZXcgVmFsdWU6JywgKDAsIF9zdHJpbmdpZnkyLmRlZmF1bHQpKG5ld1ZhbHVlKSk7CgoJICAgICAgaWYgKGNoYW5nZS50eXBlID09PSAndXBkYXRlJykgewoJICAgICAgICB0aGlzLl9maXJlRXZlbnQoewoJICAgICAgICAgIGNUeXBlOiBDaGFuZ2VUeXBlLlVQREFURSwKCSAgICAgICAgICBvVHlwZTogb2JqVHlwZSwKCSAgICAgICAgICBmaWVsZDogZmllbGRTdHJpbmcsCgkgICAgICAgICAgZGF0YTogbmV3VmFsdWUKCSAgICAgICAgfSk7CgkgICAgICB9CgoJICAgICAgaWYgKGNoYW5nZS50eXBlID09PSAnYWRkJykgewoJICAgICAgICB0aGlzLl9maXJlRXZlbnQoewoJICAgICAgICAgIGNUeXBlOiBDaGFuZ2VUeXBlLkFERCwKCSAgICAgICAgICBvVHlwZTogb2JqVHlwZSwKCSAgICAgICAgICBmaWVsZDogZmllbGRTdHJpbmcsCgkgICAgICAgICAgZGF0YTogbmV3VmFsdWUKCSAgICAgICAgfSk7CgkgICAgICB9CgoJICAgICAgaWYgKGNoYW5nZS50eXBlID09PSAnZGVsZXRlJykgewoJICAgICAgICB0aGlzLl9maXJlRXZlbnQoewoJICAgICAgICAgIGNUeXBlOiBDaGFuZ2VUeXBlLlJFTU9WRSwKCSAgICAgICAgICBvVHlwZTogb2JqVHlwZSwKCSAgICAgICAgICBmaWVsZDogZmllbGRTdHJpbmcKCSAgICAgICAgfSk7CgkgICAgICB9CgkgICAgfQoJICB9LCB7CgkgICAga2V5OiAnZGF0YScsCgkgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CgkgICAgICByZXR1cm4gdGhpcy5fZGF0YTsKCSAgICB9CgkgIH1dKTsKCSAgcmV0dXJuIFN5bmNPYmplY3Q7Cgl9KCk7CgoJdmFyIENoYW5nZVR5cGUgPSBleHBvcnRzLkNoYW5nZVR5cGUgPSB7IFVQREFURTogJ3VwZGF0ZScsIEFERDogJ2FkZCcsIFJFTU9WRTogJ3JlbW92ZScgfTsKCXZhciBPYmplY3RUeXBlID0gZXhwb3J0cy5PYmplY3RUeXBlID0geyBPQkpFQ1Q6ICdvYmplY3QnLCBBUlJBWTogJ2FycmF5JyB9OwoJZXhwb3J0cy5kZWZhdWx0ID0gU3luY09iamVjdDsKCgkvKioqLyB9KSwKCS8qIDEyMyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSJ1c2Ugc3RyaWN0IjsKCgoJZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsKCgl2YXIgX2dldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7CgoJdmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7CgoJdmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzOCk7CgoJdmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKTsKCglmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKCWV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikgewoJICBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7CgkgIHZhciBkZXNjID0gKDAsIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyLmRlZmF1bHQpKG9iamVjdCwgcHJvcGVydHkpOwoKCSAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkgewoJICAgIHZhciBwYXJlbnQgPSAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShvYmplY3QpOwoKCSAgICBpZiAocGFyZW50ID09PSBudWxsKSB7CgkgICAgICByZXR1cm4gdW5kZWZpbmVkOwoJICAgIH0gZWxzZSB7CgkgICAgICByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTsKCSAgICB9CgkgIH0gZWxzZSBpZiAoInZhbHVlIiBpbiBkZXNjKSB7CgkgICAgcmV0dXJuIGRlc2MudmFsdWU7CgkgIH0gZWxzZSB7CgkgICAgdmFyIGdldHRlciA9IGRlc2MuZ2V0OwoKCSAgICBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHsKCSAgICAgIHJldHVybiB1bmRlZmluZWQ7CgkgICAgfQoKCSAgICByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpOwoJICB9Cgl9OwoKCS8qKiovIH0pLAoJLyogMTI0ICovLAoJLyogMTI1ICovLAoJLyogMTI2ICovLAoJLyogMTI3ICovLAoJLyogMTI4ICovLAoJLyogMTI5ICovLAoJLyogMTMwICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJInVzZSBzdHJpY3QiOwoKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgl2YXIgX3Byb21pc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxKTsKCgl2YXIgX3Byb21pc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvbWlzZSk7CgoJdmFyIF9hc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzNik7CgoJdmFyIF9hc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXNzaWduKTsKCgl2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7CgoJdmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpOwoKCXZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7CgoJdmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpOwoKCXZhciBfRGF0YU9iamVjdFJlcG9ydGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTkpOwoKCXZhciBfRGF0YU9iamVjdFJlcG9ydGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RhdGFPYmplY3RSZXBvcnRlcik7CgoJdmFyIF9EYXRhT2JqZWN0T2JzZXJ2ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOCk7CgoJdmFyIF9EYXRhT2JqZWN0T2JzZXJ2ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdE9ic2VydmVyKTsKCgl2YXIgX0RhdGFQcm92aXNpb25hbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTMzKTsKCgl2YXIgX0RhdGFQcm92aXNpb25hbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhUHJvdmlzaW9uYWwpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJLyoqCgkqIFRoZSBtYWluIGNsYXNzIGZvciB0aGUgc3luY2hlciBwYWNrYWdlLgoJKiBUaGUgU3luY2hlciBpcyBhIHNpbmdsZXRvbiBjbGFzcyBwZXIgSHlwZXJ0eS9VUkwgYW5kIGl0IGlzIHRoZSBvd25lciBvZiBhbGwgY3JlYXRlZCBEYXRhIFN5bmMgT2JqZWN0cyBhY2NvcmRpbmcgdG8gdGhlIFJlcG9ydGVyIC0gT2JzZXJ2ZXIgcGF0dGVybi4KCSogTWFpbiBmdW5jdGlvbmFsaXR5IGlzIHRvIGNyZWF0ZSByZXBvcnRlcnMgYW5kIHRvIHN1YnNjcmliZSB0byBleGlzdGluZyBvbmVzLgoJKi8KCXZhciBTeW5jaGVyID0gZnVuY3Rpb24gKCkgewoJICAvKiBwcml2YXRlCgkgIF9vd25lcjogVVJMCgkgIF9idXM6IE1pbmlCdXMKCSAgIF9zdWJVUkw6IFVSTAoJICAgX3JlcG9ydGVyczogPHVybDogRGF0YU9iamVjdFJlcG9ydGVyPgoJICBfb2JzZXJ2ZXJzOiA8dXJsOiBEYXRhT2JqZWN0T2JzZXJ2ZXI+CgkgIF9wcm92aXNpb25hbHM6IDx1cmw6IERhdGFQcm92aXNpb25hbD4KCSAgIC0tLS1ldmVudCBoYW5kbGVycy0tLS0KCSAgX29uTm90aWZpY2F0aW9uSGFuZGxlcjogKGV2ZW50KSA9PiB2b2lkCgkgIF9vblJlc3VtZTogKGV2ZW50KSA9PiB2b2lkCgkgICovCgoJICAvKioKCSAgKiBDb25zdHJ1Y3RvciB0aGF0IHNob3VsZCBiZSB1c2VkIGJ5IHRoZSBIeXBlcnR5IG93bmVyCgkgICogQHBhcmFtIHtIeXBlcnR5VVJMfSBvd25lciAtIEh5cGVydHkgVVJMIG93bmVyLiBBbiBVUkwgYWxsb2NhdGVkIGJ5IHRoZSBydW50aW1lIHRoYXQgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgSHlwZXJ0eS4KCSAgKiBAcGFyYW0ge01pbmlCdXN9IGJ1cyAtIEFuIGluc3RhbmNlIG9mIHRoZSBNaW5pQnVzIHByb3ZpZGVkIGluIHRoZSBzYW5kYm94LiBXaGVuIGFuIG9iamVjdCAoUmVwb3J0ZXIgb3IgT2JzZXJ2ZWQpIGlzIGNyZWF0ZWQsIHRoZSBTeW5jaGVyTWFuYWdlciB3aWxsIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBNaW5pQnVzIHRvIHJlY2VpdmUvc2VuZCBNZXNzYWdlcyBvZiB0aGF0IG9iamVjdC4KCSAgKiBAcGFyYW0ge0pTT059IGNvbmZpZyAtIENvbmZpZ3VyYXRpb24gZGF0YS4gVGhlIG9ubHkgcmVxdWlyZWQgZmllbGQgZm9yIG5vdyBpcyB0aGUgcnVudGltZVVSTC4KCSAgKi8KCSAgZnVuY3Rpb24gU3luY2hlcihvd25lciwgYnVzLCBjb25maWcpIHsKCSAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTeW5jaGVyKTsKCgkgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgX3RoaXMuX293bmVyID0gb3duZXI7CgkgICAgX3RoaXMuX2J1cyA9IGJ1czsKCgkgICAgX3RoaXMuX3N1YlVSTCA9IGNvbmZpZy5ydW50aW1lVVJMICsgJy9zbSc7CgoJICAgIF90aGlzLl9yZXBvcnRlcnMgPSB7fTsKCSAgICBfdGhpcy5fb2JzZXJ2ZXJzID0ge307CgkgICAgX3RoaXMuX3Byb3Zpc2lvbmFscyA9IHt9OwoKCSAgICBidXMuYWRkTGlzdGVuZXIob3duZXIsIGZ1bmN0aW9uIChtc2cpIHsKCSAgICAgIC8vaWdub3JlIG1zZyBzZW50IGJ5IGhpbXNlbGYKCSAgICAgIGlmIChtc2cuZnJvbSAhPT0gb3duZXIpIHsKCSAgICAgICAgY29uc29sZS5pbmZvKCdbU3luY2hlcl0gU3luY2hlci1SQ1Y6ICcsIG1zZyk7CgkgICAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHsKCSAgICAgICAgICBjYXNlICdmb3J3YXJkJzoKCSAgICAgICAgICAgIF90aGlzLl9vbkZvcndhcmQobXNnKTticmVhazsKCSAgICAgICAgICBjYXNlICdjcmVhdGUnOgoJICAgICAgICAgICAgX3RoaXMuX29uUmVtb3RlQ3JlYXRlKG1zZyk7YnJlYWs7CgkgICAgICAgICAgY2FzZSAnZGVsZXRlJzoKCSAgICAgICAgICAgIF90aGlzLl9vblJlbW90ZURlbGV0ZShtc2cpO2JyZWFrOwoJICAgICAgICB9CgkgICAgICB9CgkgICAgfSk7CgkgIH0KCgkgIC8qKgoJICAqIFRoZSBvd25lciBvZiB0aGUgU3luY2hlciBhbmQgYWxsIGNyZWF0ZWQgcmVwb3J0ZXJzLgoJICAqIEB0eXBlIHtIeXBlcnR5VVJMfQoJICAqLwoKCgkgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFN5bmNoZXIsIFt7CgkgICAga2V5OiAnY3JlYXRlJywKCgoJICAgIC8qKgoJICAgICogUmVxdWVzdCBhIERhdGFPYmplY3RSZXBvcnRlciBjcmVhdGlvbi4gVGhlIFVSTCB3aWxsIGJlIGJlIHJlcXVlc3RlZCBieSB0aGUgYWxsb2NhdGlvbiBtZWNoYW5pc20uCgkgICAgKiBAcGFyYW0gIHtTY2hlbWFVUkx9IHNjaGVtYSAtIEh5cGVydHkgQ2F0YWxvZ3VlIFVSTCBhZGRyZXNzIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmV0cmlldmUgdGhlIEpTT04tU2NoZW1hIGRlc2NyaWJpbmcgdGhlIERhdGEgT2JqZWN0IHNjaGVtYQoJICAgICogQHBhcmFtICB7SHlwZXJ0eVVSTFtdfSBvYnNlcnZlcnMgLSBMaXN0IG9mIGh5cGVydGllcyB0aGF0IGFyZSBwcmUtYXV0aG9yaXplZCBmb3Igc3Vic2NyaXB0aW9uCgkgICAgKiBAcGFyYW0gIHtKU09OfSBpbml0aWFsRGF0YSAtIEluaXRpYWwgZGF0YSBvZiB0aGUgcmVwb3J0ZXIKCSAgICAqIEBwYXJhbSAge3N0cmluZ30gb2JqZWN0VVJMIC0gcmV1c2FibGUgZGF0YU9iamVjdCBVUkwKCSAgICAqIEByZXR1cm4ge1Byb21pc2U8RGF0YU9iamVjdFJlcG9ydGVyPn0gUmV0dXJuIFByb21pc2UgdG8gYSBuZXcgUmVwb3J0ZXIuIFRoZSByZXBvcnRlciBjYW4gYmUgYWNjZXB0ZWQgb3IgcmVqZWN0ZWQgYnkgdGhlIFBFUAoJICAgICovCgkgICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZShzY2hlbWEsIG9ic2VydmVycywgaW5pdGlhbERhdGEpIHsKCSAgICAgIHZhciBzdG9yZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7CgkgICAgICB2YXIgcDJwID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBmYWxzZTsKCgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoJICAgICAgdmFyIGNyaXRlcmlhID0ge307CgoJICAgICAgY3JpdGVyaWEucDJwID0gcDJwOwoJICAgICAgY3JpdGVyaWEuc3RvcmUgPSBzdG9yZTsKCSAgICAgIGNyaXRlcmlhLnNjaGVtYSA9IHNjaGVtYTsKCSAgICAgIGNyaXRlcmlhLm9ic2VydmVycyA9IG9ic2VydmVyczsKCSAgICAgIGNyaXRlcmlhLmluaXRpYWxEYXRhID0gaW5pdGlhbERhdGE7CgoJICAgICAgY29uc29sZS5sb2coJ1tzeW5jaGVyIC0gY3JlYXRlXSAtIGNyZWF0ZSBSZXBvcnRlciAtIGNyaXRlcmlhOiAnLCBjcml0ZXJpYSk7CgoJICAgICAgKDAsIF9hc3NpZ24yLmRlZmF1bHQpKGNyaXRlcmlhLCB7IHJlc3VtZTogZmFsc2UgfSk7CgoJICAgICAgcmV0dXJuIF90aGlzLl9jcmVhdGUoY3JpdGVyaWEpOwoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ3Jlc3VtZVJlcG9ydGVycycsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3VtZVJlcG9ydGVycyhjcml0ZXJpYSkgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCSAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIGNyZWF0ZV0gLSByZXN1bWUgUmVwb3J0ZXIgLSBjcml0ZXJpYTogJywgY3JpdGVyaWEpOwoKCSAgICAgICgwLCBfYXNzaWduMi5kZWZhdWx0KShjcml0ZXJpYSwgeyByZXN1bWU6IHRydWUgfSk7CgoJICAgICAgcmV0dXJuIF90aGlzLl9jcmVhdGUoY3JpdGVyaWEpOwoJICAgIH0KCgkgICAgLyoqCgkgICAgKiBSZXF1ZXN0IGEgc3Vic2NyaXB0aW9uIHRvIGFuIGV4aXN0ZW50IHJlcG9ydGVyIG9iamVjdC4KCSAgICAqIEBwYXJhbSB7U2NoZW1hVVJMfSBzY2hlbWEgLSBIeXBlcnR5IENhdGFsb2d1ZSBVUkwgYWRkcmVzcyB0aGF0IGNhbiBiZSB1c2VkIHRvIHJldHJpZXZlIHRoZSBKU09OLVNjaGVtYSBkZXNjcmliaW5nIHRoZSBEYXRhIE9iamVjdCBzY2hlbWEKCSAgICAqIEBwYXJhbSB7T2JqZWN0VVJMfSBvYmpVUkwgLSBBZGRyZXNzIG9mIHRoZSBleGlzdGVudCByZXBvcnRlciBvYmplY3QgdG8gYmUgb2JzZXJ2ZWQKCSAgICAqIEByZXR1cm4ge1Byb21pc2U8RGF0YU9iamVjdE9ic2VydmVyPn0gUmV0dXJuIFByb21pc2UgdG8gYSBuZXcgb2JzZXJ2ZXIuIEl0J3MgYXNzb2NpYXRlZCB3aXRoIHRoZSByZXBvcnRlci4KCSAgICAqLwoKCSAgfSwgewoJICAgIGtleTogJ3N1YnNjcmliZScsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZShzY2hlbWEsIG9ialVSTCkgewoJICAgICAgdmFyIHN0b3JlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKCSAgICAgIHZhciBwMnAgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlOwoJICAgICAgdmFyIG11dHVhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDogdHJ1ZTsKCgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoJICAgICAgdmFyIGNyaXRlcmlhID0ge307CgoJICAgICAgY3JpdGVyaWEucDJwID0gcDJwOwoJICAgICAgY3JpdGVyaWEuc3RvcmUgPSBzdG9yZTsKCSAgICAgIGNyaXRlcmlhLnNjaGVtYSA9IHNjaGVtYTsKCSAgICAgIGNyaXRlcmlhLnJlc291cmNlID0gb2JqVVJMOwoJICAgICAgY3JpdGVyaWEubXV0dWFsID0gbXV0dWFsOwoKCSAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIHN1YnNjcmliZV0gLSBzdWJzY3JpYmUgY3JpdGVyaWE6ICcsIGNyaXRlcmlhKTsKCgkgICAgICAoMCwgX2Fzc2lnbjIuZGVmYXVsdCkoY3JpdGVyaWEsIHsgcmVzdW1lOiBmYWxzZSB9KTsKCgkgICAgICByZXR1cm4gX3RoaXMuX3N1YnNjcmliZShjcml0ZXJpYSk7CgkgICAgfQoKCSAgICAvKioKCSAgICAqIFJlcXVlc3QgYSBzdWJzY3JpcHRpb24gdG8gYW4gZXhpc3RlbnQgcmVwb3J0ZXIgb2JqZWN0LgoJICAgICogQHBhcmFtIHtjcml0ZXJpYX0gY3JpdGVyaWEgLSBJbmZvcm1hdGlvbiB0byBkaXNjb3ZlcnkgdGhlIG9ic2VydmVyIG9iamVjdAoJICAgICogQHJldHVybiB7UHJvbWlzZTxEYXRhT2JqZWN0T2JzZXJ2ZXI+fSBSZXR1cm4gUHJvbWlzZSB0byBhIG5ldyBvYnNlcnZlci4gSXQncyBhc3NvY2lhdGVkIHdpdGggdGhlIHJlcG9ydGVyLgoJICAgICovCgoJICB9LCB7CgkgICAga2V5OiAncmVzdW1lT2JzZXJ2ZXJzJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdW1lT2JzZXJ2ZXJzKGNyaXRlcmlhKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoJICAgICAgdmFyIF9jcml0ZXJpYSA9IGNyaXRlcmlhIHx8IHt9OwoKCSAgICAgICgwLCBfYXNzaWduMi5kZWZhdWx0KShfY3JpdGVyaWEsIHsgcmVzdW1lOiB0cnVlIH0pOwoKCSAgICAgIHJldHVybiBfdGhpcy5fc3Vic2NyaWJlKF9jcml0ZXJpYSk7CgkgICAgfQoKCSAgICAvKioKCSAgICAqIFJlcXVlc3QgYSByZWFkIGFjdGlvbiBvbiB0aGUgcmVwb3J0ZXIgb2JqZWN0CgkgICAgKiBAcGFyYW0ge09iamVjdFVSTH0gb2JqVVJMIC0gVVJMIG9mIHRoZSByZXBvcnRlciBvYmplY3QgdG8gYmUgcmVhZAoJICAgICogQHJldHVybiB7UHJvbWlzZTxPYmplY3Q+fSBSZXR1cm4gUHJvbWlzZSB0byBsYXN0IGF2YWlsYWJsZSBkYXRhIG9mIHRoZSByZXBvcnRlcgoJICAgICovCgoJICB9LCB7CgkgICAga2V5OiAncmVhZCcsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWQob2JqVVJMKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKCSAgICAgIC8vRkxPVy1PVVQ6IHRoaXMgbWVzc2FnZSB3aWxsIGJlIHNlbnQgZGlyZWN0bHkgdG8gcmVwb3J0ZXIgb2JqZWN0IChtYXliZSB0aGVyZSBpcyBubyBsaXN0ZW5lciBhdmFpbGFibGUsIHNvIGl0IHdpbGwgYmUgcmVzb2x2ZWQgd2l0aCBNZXNzYWdlQnVzIC0+IHJlc29sdmUpCgkgICAgICAvL3dpbGwgcmVhY2ggdGhlIHJlbW90ZSBvYmplY3QgaW4gRGF0YU9iamVjdFJlcG9ydGVyIC0+IF9vblJlYWQKCSAgICAgIHZhciByZWFkTXNnID0gewoJICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLl9vd25lciwgdG86IG9ialVSTAoJICAgICAgfTsKCgkgICAgICByZXR1cm4gbmV3IF9wcm9taXNlMi5kZWZhdWx0KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCSAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShyZWFkTXNnLCBmdW5jdGlvbiAocmVwbHkpIHsKCSAgICAgICAgICBjb25zb2xlLmxvZygncmVhZC1yZXNwb25zZTogJywgcmVwbHkpOwoJICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkgewoJICAgICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LnZhbHVlKTsKCSAgICAgICAgICB9IGVsc2UgewoJICAgICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7CgkgICAgICAgICAgfQoJICAgICAgICB9KTsKCSAgICAgIH0pOwoJICAgIH0KCgkgICAgLyoqCgkgICAgKiBTZXR1cCB0aGUgY2FsbGJhY2sgdG8gcHJvY2VzcyBjcmVhdGUgYW5kIGRlbGV0ZSBldmVudHMgb2YgcmVtb3ZlIFJlcG9ydGVyIG9iamVjdHMuCgkgICAgKiBUaGlzIGlzIHJlbGVhdGVkIHRvIHRoZSBtZXNzYWdlbnMgc2VudCBieSBjcmVhdGUgdG8gdGhlIG9ic2VydmVycyBIeXBlcnR5IGFycmF5LgoJICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudDogTXNnRXZlbnQpfSBjYWxsYmFjawoJICAgICovCgoJICB9LCB7CgkgICAga2V5OiAnb25Ob3RpZmljYXRpb24nLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBvbk5vdGlmaWNhdGlvbihjYWxsYmFjaykgewoJICAgICAgdGhpcy5fb25Ob3RpZmljYXRpb25IYW5kbGVyID0gY2FsbGJhY2s7CgkgICAgfQoJICB9LCB7CgkgICAga2V5OiAnX2NyZWF0ZScsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGUoY3JpdGVyaWEpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgkgICAgICAgIHZhciByZXN1bWUgPSBjcml0ZXJpYS5yZXN1bWU7CgkgICAgICAgIHZhciBpbml0aWFsRGF0YSA9IGNyaXRlcmlhLmluaXRpYWxEYXRhIHx8IHt9OwoJICAgICAgICB2YXIgc2NoZW1hID0gdm9pZCAwOwoKCSAgICAgICAgLy9GTE9XLU9VVDogdGhpcyBtZXNzYWdlIHdpbGwgYmUgc2VudCB0byB0aGUgcnVudGltZSBpbnN0YW5jZSBvZiBTeW5jaGVyTWFuYWdlciAtPiBfb25DcmVhdGUKCSAgICAgICAgdmFyIHJlcXVlc3RNc2cgPSB7CgkgICAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLl9vd25lciwgdG86IF90aGlzLl9zdWJVUkwsCgkgICAgICAgICAgYm9keTogeyByZXN1bWU6IHJlc3VtZSB9CgkgICAgICAgIH07CgoJICAgICAgICBjb25zb2xlLmxvZygnW3N5bmNoZXIgLSBjcmVhdGVdOiAnLCBjcml0ZXJpYSwgcmVxdWVzdE1zZyk7CgoJICAgICAgICByZXF1ZXN0TXNnLmJvZHkudmFsdWUgPSBpbml0aWFsRGF0YTsKCSAgICAgICAgcmVxdWVzdE1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyID0gX3RoaXMuX293bmVyOwoKCSAgICAgICAgaWYgKGNyaXRlcmlhLnNjaGVtYSkgewoJICAgICAgICAgIHNjaGVtYSA9IGNyaXRlcmlhLnNjaGVtYTsKCSAgICAgICAgICByZXF1ZXN0TXNnLmJvZHkuc2NoZW1hID0gY3JpdGVyaWEuc2NoZW1hOwoJICAgICAgICB9CgoJICAgICAgICBpZiAoY3JpdGVyaWEucDJwKSByZXF1ZXN0TXNnLmJvZHkucDJwID0gY3JpdGVyaWEucDJwOwoJICAgICAgICBpZiAoY3JpdGVyaWEuc3RvcmUpIHJlcXVlc3RNc2cuYm9keS5zdG9yZSA9IGNyaXRlcmlhLnN0b3JlOwoJICAgICAgICBpZiAoY3JpdGVyaWEub2JzZXJ2ZXJzKSByZXF1ZXN0TXNnLmJvZHkuYXV0aG9yaXNlID0gY3JpdGVyaWEub2JzZXJ2ZXJzOwoKCSAgICAgICAgaWYgKHJlc3VtZSkgewoJICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIGNyZWF0ZV0gLSByZXN1bWUgbWVzc2FnZTogJywgcmVxdWVzdE1zZyk7CgkgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgY29uc29sZS5sb2coJ1tzeW5jaGVyIC0gY3JlYXRlXSAtIGNyZWF0ZSBtZXNzYWdlOiAnLCByZXF1ZXN0TXNnKTsKCSAgICAgICAgfQoKCSAgICAgICAgLy9yZXF1ZXN0IGNyZWF0ZSB0byB0aGUgYWxsb2NhdGlvbiBzeXN0ZW0uIENhbiBiZSByZWplY3RlZCBieSB0aGUgUG9saWN5RW5naW5lLgoJICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlcXVlc3RNc2csIGZ1bmN0aW9uIChyZXBseSkgewoJICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlciAtIGNyZWF0ZV0gLSBjcmVhdGUtcmVzcG9uc2U6ICcsIHJlcGx5KTsKCSAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHsKCSAgICAgICAgICAgIC8vcmVwb3J0ZXIgY3JlYXRpb24gYWNjZXB0ZWQKCSAgICAgICAgICAgIHZhciBvYmpVUkwgPSByZXBseS5ib2R5LnJlc291cmNlOwoKCSAgICAgICAgICAgIGlmIChyZXN1bWUpIHsKCSAgICAgICAgICAgICAgc2NoZW1hID0gcmVwbHkuYm9keS5zY2hlbWE7CgkgICAgICAgICAgICAgIGluaXRpYWxEYXRhID0gcmVwbHkuYm9keS52YWx1ZTsKCSAgICAgICAgICAgIH0KCgkgICAgICAgICAgICB2YXIgbmV3T2JqID0gbmV3IF9EYXRhT2JqZWN0UmVwb3J0ZXIyLmRlZmF1bHQoX3RoaXMsIG9ialVSTCwgc2NoZW1hLCAnb24nLCBpbml0aWFsRGF0YSwgcmVwbHkuYm9keS5jaGlsZHJlblJlc291cmNlcyk7CgkgICAgICAgICAgICBfdGhpcy5fcmVwb3J0ZXJzW29ialVSTF0gPSBuZXdPYmo7CgoJICAgICAgICAgICAgcmVzb2x2ZShuZXdPYmopOwoJICAgICAgICAgIH0gZWxzZSB7CgkgICAgICAgICAgICAvL3JlcG9ydGVyIGNyZWF0aW9uIHJlamVjdGVkCgkgICAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTsKCSAgICAgICAgICB9CgkgICAgICAgIH0pOwoJICAgICAgfSk7CgkgICAgfQoJICB9LCB7CgkgICAga2V5OiAnX3N1YnNjcmliZScsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9zdWJzY3JpYmUoY3JpdGVyaWEpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgcmV0dXJuIG5ldyBfcHJvbWlzZTIuZGVmYXVsdChmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgoJICAgICAgICAvL0ZMT1ctT1VUOiB0aGlzIG1lc3NhZ2Ugd2lsbCBiZSBzZW50IHRvIHRoZSBydW50aW1lIGluc3RhbmNlIG9mIFN5bmNoZXJNYW5hZ2VyIC0+IF9vbkxvY2FsU3Vic2NyaWJlCgkgICAgICAgIHZhciBzdWJzY3JpYmVNc2cgPSB7CgkgICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl9vd25lciwgdG86IF90aGlzLl9zdWJVUkwsCgkgICAgICAgICAgYm9keToge30KCSAgICAgICAgfTsKCgkgICAgICAgIC8vIEh5cGVydHkgcmVxdWVzdCB0byBiZSBhbiBPYnNlcnZlcgoJICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L3NwZWNzL2Jsb2IvbWFzdGVyL21lc3NhZ2VzL2RhdGEtc3luYy1tZXNzYWdlcy5tZCNoeXBlcnR5LXJlcXVlc3QtdG8tYmUtYW4tb2JzZXJ2ZXIKCgkgICAgICAgIC8vIFJlc3VtZSBTdWJzY3JpcHRpb25zIGZvciB0aGUgc2FtZSBIeXBlcnR5IFVSTAoJICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L3NwZWNzL2Jsb2IvbWFzdGVyL21lc3NhZ2VzL2RhdGEtc3luYy1tZXNzYWdlcy5tZCNyZXN1bWUtc3Vic2NyaXB0aW9ucy1mb3ItdGhlLXNhbWUtaHlwZXJ0eS11cmwKCgkgICAgICAgIC8vIFJlc3VtZSBTdWJzY3JpcHRpb25zIGZvciBhIGNlcnRhaW4gdXNlciBhbmQgZGF0YSBzY2hlbWEgaW5kZXBlbmRlbnRseSBvZiB0aGUgSHlwZXJ0eSBVUkwuCgkgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3Qvc3BlY3MvYmxvYi9tYXN0ZXIvbWVzc2FnZXMvZGF0YS1zeW5jLW1lc3NhZ2VzLm1kI3Jlc3VtZS1zdWJzY3JpcHRpb25zLWZvci1hLWNlcnRhaW4tdXNlci1hbmQtZGF0YS1zY2hlbWEtaW5kZXBlbmRlbnRseS1vZi10aGUtaHlwZXJ0eS11cmwKCSAgICAgICAgaWYgKGNyaXRlcmlhKSB7CgkgICAgICAgICAgaWYgKGNyaXRlcmlhLmhhc093blByb3BlcnR5KCdwMnAnKSkgc3Vic2NyaWJlTXNnLmJvZHkucDJwID0gY3JpdGVyaWEucDJwOwoJICAgICAgICAgIGlmIChjcml0ZXJpYS5oYXNPd25Qcm9wZXJ0eSgnc3RvcmUnKSkgc3Vic2NyaWJlTXNnLmJvZHkuc3RvcmUgPSBjcml0ZXJpYS5zdG9yZTsKCSAgICAgICAgICBpZiAoY3JpdGVyaWEuaGFzT3duUHJvcGVydHkoJ3NjaGVtYScpKSBzdWJzY3JpYmVNc2cuYm9keS5zY2hlbWEgPSBjcml0ZXJpYS5zY2hlbWE7CgkgICAgICAgICAgaWYgKGNyaXRlcmlhLmhhc093blByb3BlcnR5KCdpZGVudGl0eScpKSBzdWJzY3JpYmVNc2cuYm9keS5pZGVudGl0eSA9IGNyaXRlcmlhLmlkZW50aXR5OwoJICAgICAgICAgIGlmIChjcml0ZXJpYS5oYXNPd25Qcm9wZXJ0eSgncmVzb3VyY2UnKSkgc3Vic2NyaWJlTXNnLmJvZHkucmVzb3VyY2UgPSBjcml0ZXJpYS5yZXNvdXJjZTsKCSAgICAgICAgfQoKCSAgICAgICAgdmFyIG11dHVhbEF1dGhlbnRpY2F0aW9uID0gY3JpdGVyaWEubXV0dWFsOwoKCSAgICAgICAgc3Vic2NyaWJlTXNnLmJvZHkucmVzdW1lID0gY3JpdGVyaWEucmVzdW1lOwoKCSAgICAgICAgaWYgKCFtdXR1YWxBdXRoZW50aWNhdGlvbikgc3Vic2NyaWJlTXNnLmJvZHkubXV0dWFsQXV0aGVudGljYXRpb24gPSBtdXR1YWxBdXRoZW50aWNhdGlvbjsKCgkgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlcl0gLSBzdWJzY3JpYmUgbWVzc2FnZTogJywgY3JpdGVyaWEsIHN1YnNjcmliZU1zZyk7CgoJICAgICAgICAvL3JlcXVlc3Qgc3Vic2NyaXB0aW9uCgkgICAgICAgIC8vUHJvdmlzaW9uYWwgZGF0YSBpcyBhcHBsaWVkIHRvIHRoZSBEYXRhT2JqZWN0T2JzZXJ2ZXIgYWZ0ZXIgY29uZmlybWF0aW9uLiBPciBkaXNjYXJkZWQgaWYgdGhlcmUgaXMgbm8gY29uZmlybWF0aW9uLgoJICAgICAgICAvL2ZvciBtb3JlIGluZm8gc2VlIHRoZSBEYXRhUHJvdmlzaW9uYWwgY2xhc3MgZG9jdW1lbnRhdGlvbi4KCSAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShzdWJzY3JpYmVNc2csIGZ1bmN0aW9uIChyZXBseSkgewoJICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlcl0gLSBzdWJzY3JpYmUtcmVzcG9uc2U6ICcsIHJlcGx5KTsKCgkgICAgICAgICAgdmFyIHNjaGVtYSA9IHJlcGx5LmJvZHkuc2NoZW1hOwoJICAgICAgICAgIHZhciBvYmpVUkwgPSByZXBseS5ib2R5LnJlc291cmNlOwoKCSAgICAgICAgICB2YXIgbmV3UHJvdmlzaW9uYWwgPSBfdGhpcy5fcHJvdmlzaW9uYWxzW29ialVSTF07CgkgICAgICAgICAgZGVsZXRlIF90aGlzLl9wcm92aXNpb25hbHNbb2JqVVJMXTsKCSAgICAgICAgICBpZiAobmV3UHJvdmlzaW9uYWwpIG5ld1Byb3Zpc2lvbmFsLl9yZWxlYXNlTGlzdGVuZXJzKCk7CgoJICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPCAyMDApIHsKCSAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbc3luY2hlcl0gLSBuZXcgRGF0YVByb3Zpc2lvbmFsOiAnLCByZXBseS5ib2R5LmNoaWxkcmVuUmVzb3VyY2VzLCBvYmpVUkwpOwoJICAgICAgICAgICAgbmV3UHJvdmlzaW9uYWwgPSBuZXcgX0RhdGFQcm92aXNpb25hbDIuZGVmYXVsdChfdGhpcy5fb3duZXIsIG9ialVSTCwgX3RoaXMuX2J1cywgcmVwbHkuYm9keS5jaGlsZHJlblJlc291cmNlcyk7CgkgICAgICAgICAgICBfdGhpcy5fcHJvdmlzaW9uYWxzW29ialVSTF0gPSBuZXdQcm92aXNpb25hbDsKCSAgICAgICAgICB9IGVsc2UgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7CgkgICAgICAgICAgICBjb25zb2xlLmxvZygnW3N5bmNoZXJdIC0gbmV3IERhdGEgT2JqZWN0IE9ic2VydmVyOiAnLCByZXBseSwgX3RoaXMuX3Byb3Zpc2lvbmFscyk7CgoJICAgICAgICAgICAgdmFyIG5ld09iaiA9IG5ldyBfRGF0YU9iamVjdE9ic2VydmVyMi5kZWZhdWx0KF90aGlzLCBvYmpVUkwsIHNjaGVtYSwgJ29uJywgcmVwbHkuYm9keS52YWx1ZSwgbmV3UHJvdmlzaW9uYWwuY2hpbGRyZW4sIHJlcGx5LmJvZHkudmVyc2lvbiwgbXV0dWFsQXV0aGVudGljYXRpb24pOwoJICAgICAgICAgICAgX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdID0gbmV3T2JqOwoKCSAgICAgICAgICAgIHJlc29sdmUobmV3T2JqKTsKCSAgICAgICAgICAgIG5ld1Byb3Zpc2lvbmFsLmFwcGx5KG5ld09iaik7CgkgICAgICAgICAgfSBlbHNlIHsKCSAgICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpOwoJICAgICAgICAgIH0KCSAgICAgICAgfSk7CgkgICAgICB9KTsKCSAgICB9CgoJICAgIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGEgbG9jYWwgcnVudGltZSBSZXBvcnRlck9iamVjdCAtPiBfb25SZW1vdGVTdWJzY3JpYmUKCgkgIH0sIHsKCSAgICBrZXk6ICdfb25Gb3J3YXJkJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gX29uRm9yd2FyZChtc2cpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgdmFyIHJlcG9ydGVyID0gX3RoaXMuX3JlcG9ydGVyc1ttc2cuYm9keS50b107CgkgICAgICByZXBvcnRlci5fb25Gb3J3YXJkKG1zZyk7CgkgICAgfQoKCSAgICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBhIHJlbW90ZSBTeW5jaGVyIC0+IGNyZWF0ZSAodGhpcyBpcyBhY3R1YWxseSBhbiBpbnZpdGF0aW9uIHRvIHN1YnNjcmliZSkKCgkgIH0sIHsKCSAgICBrZXk6ICdfb25SZW1vdGVDcmVhdGUnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfb25SZW1vdGVDcmVhdGUobXNnKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKCSAgICAgIC8vcmVtb3ZlICIvc3Vic2NyaXB0aW9uIiBmcm9tIHRoZSBVUkwKCSAgICAgIHZhciByZXNvdXJjZSA9IG1zZy5mcm9tLnNsaWNlKDAsIC0xMyk7CgoJICAgICAgdmFyIGV2ZW50ID0gewoJICAgICAgICB0eXBlOiBtc2cudHlwZSwKCSAgICAgICAgZnJvbTogbXNnLmJvZHkuc291cmNlLAoJICAgICAgICB1cmw6IHJlc291cmNlLAoJICAgICAgICBzY2hlbWE6IG1zZy5ib2R5LnNjaGVtYSwKCSAgICAgICAgdmFsdWU6IG1zZy5ib2R5LnZhbHVlLAoJICAgICAgICBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksCgoJICAgICAgICBhY2s6IGZ1bmN0aW9uIGFjayh0eXBlKSB7CgkgICAgICAgICAgdmFyIGxUeXBlID0gMjAwOwoJICAgICAgICAgIGlmICh0eXBlKSB7CgkgICAgICAgICAgICBsVHlwZSA9IHR5cGU7CgkgICAgICAgICAgfQoKCSAgICAgICAgICAvL3NlbmQgYWNrIHJlc3BvbnNlIG1lc3NhZ2UKCSAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHsKCSAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAoJICAgICAgICAgICAgYm9keTogeyBjb2RlOiBsVHlwZSB9CgkgICAgICAgICAgfSk7CgkgICAgICAgIH0KCSAgICAgIH07CgoJICAgICAgaWYgKF90aGlzLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXIpIHsKCSAgICAgICAgY29uc29sZS5pbmZvKCdbU3luY2hlcl0gTk9USUZJQ0FUSU9OLUVWRU5UOiAnLCBldmVudCk7CgkgICAgICAgIF90aGlzLl9vbk5vdGlmaWNhdGlvbkhhbmRsZXIoZXZlbnQpOwoJICAgICAgfQoJICAgIH0KCgkgICAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gYSByZW1vdGUgRGF0YU9iamVjdFJlcG9ydGVyIC0+IGRlbGV0ZQoKCSAgfSwgewoJICAgIGtleTogJ19vblJlbW90ZURlbGV0ZScsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9vblJlbW90ZURlbGV0ZShtc2cpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgLy9yZW1vdmUgIi9zdWJzY3JpcHRpb24iIGZyb20gdGhlIFVSTAoJICAgICAgdmFyIHJlc291cmNlID0gbXNnLmJvZHkucmVzb3VyY2U7CgoJICAgICAgdmFyIG9iamVjdCA9IF90aGlzLl9vYnNlcnZlcnNbcmVzb3VyY2VdOwoJICAgICAgaWYgKG9iamVjdCkgewoJICAgICAgICB2YXIgZXZlbnQgPSB7CgkgICAgICAgICAgdHlwZTogbXNnLnR5cGUsCgkgICAgICAgICAgdXJsOiByZXNvdXJjZSwKCSAgICAgICAgICBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksCgoJICAgICAgICAgIGFjazogZnVuY3Rpb24gYWNrKHR5cGUpIHsKCSAgICAgICAgICAgIHZhciBsVHlwZSA9IDIwMDsKCSAgICAgICAgICAgIGlmICh0eXBlKSB7CgkgICAgICAgICAgICAgIGxUeXBlID0gdHlwZTsKCSAgICAgICAgICAgIH0KCgkgICAgICAgICAgICAvL1RPRE86IGFueSBvdGhlciBkaWZmZXJlbnQgb3B0aW9ucyBmb3IgdGhlIHJlbGVhc2UgcHJvY2VzcywgbGlrZSBhY2NlcHQgYnV0IG5vciByZWxlYXNlIGxvY2FsPwoJICAgICAgICAgICAgaWYgKGxUeXBlID09PSAyMDApIHsKCSAgICAgICAgICAgICAgb2JqZWN0LmRlbGV0ZSgpOwoJICAgICAgICAgICAgfQoKCSAgICAgICAgICAgIC8vc2VuZCBhY2sgcmVzcG9uc2UgbWVzc2FnZQoJICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CgkgICAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLAoJICAgICAgICAgICAgICBib2R5OiB7IGNvZGU6IGxUeXBlLCBzb3VyY2U6IF90aGlzLl9vd25lciB9CgkgICAgICAgICAgICB9KTsKCSAgICAgICAgICB9CgkgICAgICAgIH07CgoJICAgICAgICBpZiAoX3RoaXMuX29uTm90aWZpY2F0aW9uSGFuZGxlcikgewoJICAgICAgICAgIGNvbnNvbGUubG9nKCdOT1RJRklDQVRJT04tRVZFTlQ6ICcsIGV2ZW50KTsKCSAgICAgICAgICBfdGhpcy5fb25Ob3RpZmljYXRpb25IYW5kbGVyKGV2ZW50KTsKCSAgICAgICAgfQoJICAgICAgfSBlbHNlIHsKCSAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7CgkgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sCgkgICAgICAgICAgYm9keTogeyBjb2RlOiA0MDQsIHNvdXJjZTogX3RoaXMuX293bmVyIH0KCSAgICAgICAgfSk7CgkgICAgICB9CgkgICAgfQoJICB9LCB7CgkgICAga2V5OiAnb3duZXInLAoJICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewoJICAgICAgcmV0dXJuIHRoaXMuX293bmVyOwoJICAgIH0KCgkgICAgLyoqCgkgICAgKiBBbGwgb3duZWQgcmVwb3J0ZXJzLCB0aGUgb25lcyB0aGF0IHdlcmUgY3JlYXRlZCBieSBhIGNyZWF0ZQoJICAgICogQHR5cGUge09iamVjdDxVUkwsIERhdGFPYmplY3RSZXBvcnRlcj59CgkgICAgKi8KCgkgIH0sIHsKCSAgICBrZXk6ICdyZXBvcnRlcnMnLAoJICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewoJICAgICAgcmV0dXJuIHRoaXMuX3JlcG9ydGVyczsKCSAgICB9CgoJICAgIC8qKgoJICAgICogQWxsIG93bmVkIG9ic2VydmVycywgdGhlIG9uZXMgdGhhdCB3ZXJlIGNyZWF0ZWQgYnkgYSBsb2NhbCBzdWJzY3JpcHRpb24KCSAgICAqIEB0eXBlIHtPYmplY3Q8VVJMLCBEYXRhT2JqZWN0T2JzZXJ2ZXI+fQoJICAgICovCgoJICB9LCB7CgkgICAga2V5OiAnb2JzZXJ2ZXJzJywKCSAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKCSAgICAgIHJldHVybiB0aGlzLl9vYnNlcnZlcnM7CgkgICAgfQoJICB9XSk7CgkgIHJldHVybiBTeW5jaGVyOwoJfSgpOyAvKioKCSAgICAgKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0EKCSAgICAgKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRAoJICAgICAqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoJICAgICAqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WCgkgICAgICogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBCgkgICAgICogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoJICAgICAqIENvcHlyaWdodCAyMDE2IEFwaXplZQoJICAgICAqIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOCgkgICAgICoKCSAgICAgKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKCSAgICAgKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCgkgICAgICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CgkgICAgICoKCSAgICAgKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAoJICAgICAqCgkgICAgICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQoJICAgICAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCgkgICAgICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCgkgICAgICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAoJICAgICAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgoJICAgICAqKi8KCglleHBvcnRzLmRlZmF1bHQgPSBTeW5jaGVyOwoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgoJLyoqKi8gfSksCgkvKiAxMzEgKi8sCgkvKiAxMzIgKi8sCgkvKiAxMzMgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCgkidXNlIHN0cmljdCI7CgoKCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKCSAgdmFsdWU6IHRydWUKCX0pOwoKCXZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTsKCgl2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7CgoJdmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTsKCgl2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7CgoJZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCgkvKioKCSogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBCgkqIENvcHlyaWdodCAyMDE2IElORVNDLUlECgkqIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTAoJKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVgoJKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0EKCSogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBRwoJKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWUKCSogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU4KCSoKCSogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CgkqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4KCSogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CgkqCgkqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCgkqCgkqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUKCSogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKCSogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCgkqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQKCSogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCgkqKi8KCgkvKioKCSAqIEBhY2Nlc3MgcHJpdmF0ZQoJICogVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgY29sbGVjdGluZyBkZWx0YSBjaGFuZ2VzIGluIHJlbW90ZSBvYmplY3RzLCBiZWZvcmUgdGhlIHJlc3BvbnNlIG9mIHN1YnNjcmlwdGlvbiByZWFjaCB0aGUgb2JzZXJ2ZXIuCgkgKiBJdCdzIHVzZWQgaW4gU3luY2hlciAtPiBzdWJzY3JpYmUuIFRoZSBmbG93IGlzIGRlZmluZWQgYXM6CgkgKiAxLiAob2JzZXJ2ZXIpIC0tc3Vic2NyaWJlLS0+IChyZXBvcnRlcikKCSAqIDIuIChvYnNlcnZlcikgPC0tZGVsdGEgdXBkYXRlcy0tIChyZXBvcnRlcikKCSAqIDMuIChvYnNlcnZlcikgPC0tc3Vic2NyaWJlIHJlc3BvbnNlLS0gKHJlcG9ydGVyKQoJICogVGhpcyBtZWFucyB0aGF0IHRoZXJlIGNvdWxkIGJlIGRlbHRhIHVwZGF0ZXMgdHJhbnNmZXJyZWQgYmVmb3JlIHRoZSBzdWJzY3JpcHRpb24gY29uZmlybWF0aW9uLgoJICogU2luY2UgdGhlcmUgaXMgbm8gRGF0YU9iamVjdE9ic2VydmVyIGJlZm9yZSB0aGUgdWJzY3JpcHRpb24gY29uZmlybWF0aW9uLCB0aGVyZSBzaG91bGQgYmUgc29tZSBvdGhlciBvYmplY3QgY29sbGVjdGluZyB0aGUgdXBkYXRlcy4KCSAqIFByb3Zpc2lvbmFsIGRhdGEgaXMgYXBwbGllZCB0byB0aGUgRGF0YU9iamVjdE9ic2VydmVyIGFmdGVyIGNvbmZpcm1hdGlvbi4gT3IgZGlzY2FyZGVkIGlmIHRoZXJlIGlzIG5vIGNvbmZpcm1hdGlvbi4KCSAqLwoJdmFyIERhdGFQcm92aXNpb25hbCA9IGZ1bmN0aW9uICgpIHsKCSAgLyogcHJpdmF0ZQoJICBfY2hpbGRyZW5MaXN0ZW5lcnM6IFtNc2dMaXN0ZW5lcl0KCSAgX2xpc3RlbmVyOiBNc2dMaXN0ZW5lcgoJICAgX2NoYW5nZXM6IFtdCgkgICovCgoJICBmdW5jdGlvbiBEYXRhUHJvdmlzaW9uYWwob3duZXIsIHVybCwgYnVzLCBjaGlsZHJlbikgewoJICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERhdGFQcm92aXNpb25hbCk7CgoJICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgIF90aGlzLl9vd25lciA9IG93bmVyOwoJICAgIF90aGlzLl91cmwgPSB1cmw7CgkgICAgX3RoaXMuX2J1cyA9IGJ1czsKCSAgICBfdGhpcy5fY2hpbGRyZW4gPSBjaGlsZHJlbjsKCgkgICAgX3RoaXMuX2NoYW5nZXMgPSBbXTsKCSAgICBfdGhpcy5fYWxsb2NhdGVMaXN0ZW5lcnMoKTsKCSAgfQoKCSAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRGF0YVByb3Zpc2lvbmFsLCBbewoJICAgIGtleTogJ19hbGxvY2F0ZUxpc3RlbmVycycsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9hbGxvY2F0ZUxpc3RlbmVycygpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgX3RoaXMuX2xpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihfdGhpcy5fdXJsLCBmdW5jdGlvbiAobXNnKSB7CgkgICAgICAgIGNvbnNvbGUubG9nKCdEYXRhUHJvdmlzaW9uYWwtJyArIF90aGlzLl91cmwgKyAnLVJDVjogJywgbXNnKTsKCSAgICAgICAgX3RoaXMuX2NoYW5nZXMucHVzaChtc2cpOwoJICAgICAgfSk7CgoJICAgICAgLyoKCSAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycyA9IFtdOwoJICAgICAgaWYgKF90aGlzLl9jaGlsZHJlbikgewoJICAgICAgICBsZXQgY2hpbGRCYXNlVVJMID0gdXJsICsgJy9jaGlsZHJlbi8nOwoJICAgICAgICBfdGhpcy5fY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHsKCSAgICAgICAgICBsZXQgY2hpbGRVUkwgPSBjaGlsZEJhc2VVUkwgKyBjaGlsZDsKCSAgICAgICAgICBsZXQgbGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoaWxkVVJMLCAobXNnKSA9PiB7CgkgICAgICAgICAgICAvL2lnbm9yZSBtc2cgc2VudCBieSBoaW1zZWxmCgkgICAgICAgICAgICBpZiAobXNnLmZyb20gIT09IG93bmVyKSB7CgkgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7CgkgICAgICAgICAgICB9CgkgICAgICAgICAgfSk7CgkgICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsKCSAgICAgICAgfSk7CgkgICAgICB9Ki8KCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICdfcmVsZWFzZUxpc3RlbmVycycsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9yZWxlYXNlTGlzdGVuZXJzKCkgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgICBfdGhpcy5fbGlzdGVuZXIucmVtb3ZlKCk7CgoJICAgICAgLypfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHsKCSAgICAgICAgbGlzdGVuZXIucmVtb3ZlKCk7CgkgICAgICB9KTsqLwoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ2FwcGx5JywKCSAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHkob2JzZXJ2ZXIpIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgkgICAgICBfdGhpcy5fY2hhbmdlcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGFuZ2UpIHsKCSAgICAgICAgb2JzZXJ2ZXIuX2NoYW5nZU9iamVjdChvYnNlcnZlci5fc3luY09iaiwgY2hhbmdlKTsKCSAgICAgIH0pOwoJICAgIH0KCSAgfSwgewoJICAgIGtleTogJ2NoaWxkcmVuJywKCSAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKCSAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbjsKCSAgICB9CgkgIH1dKTsKCSAgcmV0dXJuIERhdGFQcm92aXNpb25hbDsKCX0oKTsKCglleHBvcnRzLmRlZmF1bHQgPSBEYXRhUHJvdmlzaW9uYWw7Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsKCgkvKioqLyB9KSwKCS8qIDEzNCAqLywKCS8qIDEzNSAqLywKCS8qIDEzNiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCW1vZHVsZS5leHBvcnRzID0geyAiZGVmYXVsdCI6IF9fd2VicGFja19yZXF1aXJlX18oMTQzKSwgX19lc01vZHVsZTogdHJ1ZSB9OwoKCS8qKiovIH0pLAoJLyogMTM3ICovLAoJLyogMTM4ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJbW9kdWxlLmV4cG9ydHMgPSB7ICJkZWZhdWx0IjogX193ZWJwYWNrX3JlcXVpcmVfXygxNDUpLCBfX2VzTW9kdWxlOiB0cnVlIH07CgoJLyoqKi8gfSksCgkvKiAxMzkgKi8sCgkvKiAxNDAgKi8sCgkvKiAxNDEgKi8sCgkvKiAxNDIgKi8sCgkvKiAxNDMgKi8KCS8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCglfX3dlYnBhY2tfcmVxdWlyZV9fKDE0OSk7Cgltb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMCkuT2JqZWN0LmFzc2lnbjsKCgkvKioqLyB9KSwKCS8qIDE0NCAqLywKCS8qIDE0NSAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCV9fd2VicGFja19yZXF1aXJlX18oMTUxKTsKCXZhciAkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKS5PYmplY3Q7Cgltb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXsKCSAgcmV0dXJuICRPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpOwoJfTsKCgkvKioqLyB9KSwKCS8qIDE0NiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSJ1c2Ugc3RyaWN0IjsKCgkvLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pCgl2YXIgZ2V0S2V5cyAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3KQoJICAsIGdPUFMgICAgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1OCkKCSAgLCBwSUUgICAgICA9IF9fd2VicGFja19yZXF1aXJlX18oNDEpCgkgICwgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMyKQoJICAsIElPYmplY3QgID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NikKCSAgLCAkYXNzaWduICA9IE9iamVjdC5hc3NpZ247CgoJLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpCgltb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IF9fd2VicGFja19yZXF1aXJlX18oMTEpKGZ1bmN0aW9uKCl7CgkgIHZhciBBID0ge30KCSAgICAsIEIgPSB7fQoJICAgICwgUyA9IFN5bWJvbCgpCgkgICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JzsKCSAgQVtTXSA9IDc7CgkgIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oayl7IEJba10gPSBrOyB9KTsKCSAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7Cgl9KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnMKCSAgdmFyIFQgICAgID0gdG9PYmplY3QodGFyZ2V0KQoJICAgICwgYUxlbiAgPSBhcmd1bWVudHMubGVuZ3RoCgkgICAgLCBpbmRleCA9IDEKCSAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmYKCSAgICAsIGlzRW51bSAgICAgPSBwSUUuZjsKCSAgd2hpbGUoYUxlbiA+IGluZGV4KXsKCSAgICB2YXIgUyAgICAgID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pCgkgICAgICAsIGtleXMgICA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUykKCSAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGgKCSAgICAgICwgaiAgICAgID0gMAoJICAgICAgLCBrZXk7CgkgICAgd2hpbGUobGVuZ3RoID4gailpZihpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKVRba2V5XSA9IFNba2V5XTsKCSAgfSByZXR1cm4gVDsKCX0gOiAkYXNzaWduOwoKCS8qKiovIH0pLAoJLyogMTQ3ICovLAoJLyogMTQ4ICovLAoJLyogMTQ5ICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSkKCXZhciAkZXhwb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTsKCgkkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHthc3NpZ246IF9fd2VicGFja19yZXF1aXJlX18oMTQ2KX0pOwoKCS8qKiovIH0pLAoJLyogMTUwICovLAoJLyogMTUxICovCgkvKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoJLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKQoJdmFyIHRvSU9iamVjdCAgICAgICAgICAgICAgICAgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKQoJICAsICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KS5mOwoKCV9fd2VicGFja19yZXF1aXJlX18oNDUpKCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCBmdW5jdGlvbigpewoJICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpewoJICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7CgkgIH07Cgl9KTsKCgkvKioqLyB9KSwKCS8qIDE1MiAqLywKCS8qIDE1MyAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCS8vICAgICBwcm94eS1vYnNlcnZlIHYwLjAuMTgNCgkvLyAgICAgQ29weXJpZ2h0IChjKSAyMDE1LCAyMDE2IFNpbW9uIFkuIEJsYWNrd2VsbCwgQW55V2hpY2hXYXkNCgkvLyAgICAgTUlUIExpY2Vuc2UgLSBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwDQoJKGZ1bmN0aW9uKCkgew0KCQkidXNlIHN0cmljdCI7DQoJCS8vIENyZWF0ZXMgYW5kIHJldHVybnMgYSBQcm94eSB3cmFwcGluZyBhIHRhcmdldCBzbyB0aGF0IGFsbCBjaGFuZ2VzIGNhbiBiZSB0cmFwcGVkIGFuZCBmb3J3YXJkZWQgdG8NCgkJLy8gYSBjYWxsYmFjay4gVGhlIGNhbGxiYWNrIHRha2VzIGFuIGFycmF5IG9mIGNoYW5nZXMganVzdCBsaWtlIHRoZSB0cmFkaXRpb25hbCBvcmlnaW5hbCBDaHJvbWUgT2JqZWN0Lm9ic2VydmUNCgkJLy8ge29iamVjdDo8b2JqZWN0IGNoYW5nZWQ+LG5hbWU6PGZpZWxkIGNoYW5nZWQ+LHR5cGU6YWRkfHVwZGF0ZXxkZWxldGV8cmVjb25maWd1cmV8cHJldmVudEV4dGVuc2lvbnN8c2V0UHJvdG90eXBlLG9sZFZhbHVlOjxvbGQgdmFsdWUgaWYgdXBkYXRlIHwgZGVsZXRlPn0NCgkJLy8gVGhlIGFjY2VwdGxpc3QgY2FuIGJlIGFkZHx1cGRhdGV8ZGVsZXRlfHJlY29uZmlndXJlfHByZXZlbnRFeHRlbnNpb25zfHNldFByb3RvdHlwZS4NCgkJLy8gdiAwLjAuMTAgdG8gc3VwcG9ydCBwYXVzaW5nIGFuZCByZXN0YXJ0aW5nIG9ic2VydmF0aW9uIHR3byBhZGRpdGlvbmFsIGNvbnN0cnVjdG9yIGFyZ3VtZW50cyBhcmUgYXZhaWxhYmxlIHRvIE9iamVjdC5vYnNlcnZlOg0KCQkvLyBwYXVzYWJsZSAtIGNyZWF0ZSB0aGUgT2JzZXJ2ZXIgc28gaXQgY2FuIGJlIHBhdXNlZA0KCQkvLyBwYXVzZSAtIGNyZWF0ZSBvYnNlcnZlciBpbiBwYXVzZWQgc3RhdGUNCgkJLy8gaWYgcGF1c2FibGUgaXMgdHJ1ZSB0aGVuIGFuIGFkZGl0aW9uYWwgbWV0aG9kIGRlbGl2ZXIoaWdub3JlUHJldmlvdXMpIGlzIGF2YWlsYWJsZSB0byBzdGFydCBkZWxpdmVyeQ0KCQkvLyB0byBwYXVzZSBkZWxpdmVyeSBzZXQgYSBwcm9wZXJ0eSBjYWxsZWQgcGF1c2Ugb24gdGhlIGZ1bmN0aW9uIGRlbGl2ZXIgdG8gdHJ1ZQ0KCQkvLyBwYXVzYWJsZSBpcyBvcHRpb25hbCB0byByZWR1Y2UgdGhlIGNoYW5jZSBvZiBzaGFkb3dpbmcgYSBwcm9wZXJ0eSBvciBtZXRob2Qgb24gYW55IGV4aXN0aW5nIGNvZGUgY2FsbGVkIGRlbGl2ZXINCgkJaWYoIU9iamVjdC5vYnNlcnZlICYmIHR5cGVvZihQcm94eSk9PT0iZnVuY3Rpb24iKSB7DQoJCQlmdW5jdGlvbiBPYnNlcnZlcih0YXJnZXQsY2FsbGJhY2ssYWNjZXB0bGlzdCxwYXVzYWJsZSxwYXVzZSxkZWxheSkgew0KCQkgICAgCXZhciBtZSA9IHRoaXMsIHByb3h5Ow0KCQkgICAgCWZ1bmN0aW9uIGRlbGl2ZXIoaWdub3JlUHJldmlvdXMsZGVsYXkpIHsNCgkJICAgIAkJZGVsaXZlci5kZWxheSA9IGRlbGF5Ow0KCQkgICAgCQlpZighZGVsaXZlci5wYXVzZSkgew0KCQkgICAgICAgIAkJaWYobWUuY2hhbmdlc2V0Lmxlbmd0aD4wKSB7DQoJCSAgICAgICAgCQkJaWYoIWlnbm9yZVByZXZpb3VzKSB7DQoJCQkgICAgCSAgICAJCXZhciBjaGFuZ2VzID0gbWUuY2hhbmdlc2V0LmZpbHRlcihmdW5jdGlvbihjaGFuZ2UpIHsgcmV0dXJuICFhY2NlcHRsaXN0IHx8IGFjY2VwdGxpc3QuaW5kZXhPZihjaGFuZ2UudHlwZSk+PTA7IH0pOw0KCQkJICAgICAgICAJCQlpZihjaGFuZ2VzLmxlbmd0aD4wKSB7DQoJCQkgICAgICAgIAkJCQljYWxsYmFjayhjaGFuZ2VzKTsNCgkJCSAgICAgICAgCQkJfQ0KCQkgICAgICAgIAkJCX0NCgkJICAgICAgICAJCQltZS5jaGFuZ2VzZXQgPSBbXTsNCgkJICAgICAgICAJCX0NCgkJICAgIAkJfQ0KCQkgICAgCX0NCgkJICAgIAlkZWxpdmVyLnBhdXNlID0gcGF1c2U7DQoJCSAgICAJZGVsaXZlci5kZWxheSA9IGRlbGF5Ow0KCQkJICAgIG1lLmdldCA9IGZ1bmN0aW9uKHRhcmdldCwgcHJvcGVydHkpIHsNCgkJCSAgICAJaWYocHJvcGVydHk9PT0iX19vYnNlcnZlcl9fIikgew0KCQkJICAgIAkJcmV0dXJuIG1lOw0KCQkJICAgIAl9DQoJCQkgICAgCWlmKHByb3BlcnR5PT09InVub2JzZXJ2ZSIpIHsNCgkJCSAgICAJCXJldHVybiBmdW5jdGlvbigpIHsNCgkJCSAgICAJCQlPYmplY3QudW5vYnNlcnZlKHRhcmdldCk7DQoJCQkgICAgCQkJcmV0dXJuIHRhcmdldDsNCgkJCSAgICAJCX07DQoJCQkgICAgCX0NCgkJCSAgICAJaWYocHJvcGVydHk9PT0iZGVsaXZlciIpIHsNCgkJCSAgICAJCXJldHVybiBkZWxpdmVyOw0KCQkJICAgIAl9DQoJCQkgICAgCXJldHVybiB0YXJnZXRbcHJvcGVydHldOw0KCQkJICAgIH0NCgkJICAgIAltZS50YXJnZXQgPSB0YXJnZXQ7DQoJCSAgICAJbWUuY2hhbmdlc2V0ID0gW107DQoJCSAgICAJaWYoIW1lLnRhcmdldC5fX29ic2VydmVyQ2FsbGJhY2tzX18pIHsNCgkJICAgIAkJLy8gX19vYnNlcnZlckNhbGxiYWNrc19fIGlzIHVzZWQgYXMgYW4gaW5kZXggdG8gZ2V0IGF0IHRoZSBwcm94eSB3aGljaCBpcyB0aGUgb2JzZXJ2ZXIsIHNvIHdlIGNhbiB1bm9ic2VydmUNCgkJICAgIAkJT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwiX19vYnNlcnZlckNhbGxiYWNrc19fIix7ZW51bWVyYWJsZTpmYWxzZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTpmYWxzZSx2YWx1ZTpbXX0pOw0KCQkgICAgCQlPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCJfX29ic2VydmVyc19fIix7ZW51bWVyYWJsZTpmYWxzZSxjb25maWd1cmFibGU6dHJ1ZSx3cml0YWJsZTpmYWxzZSx2YWx1ZTpbXX0pOw0KCQkgICAgCX0NCgkJICAgIAltZS50YXJnZXQuX19vYnNlcnZlckNhbGxiYWNrc19fLnB1c2goY2FsbGJhY2spOw0KCQkgICAgCW1lLnRhcmdldC5fX29ic2VydmVyc19fLnB1c2godGhpcyk7DQoJCSAgICAJcHJveHkgPSBuZXcgUHJveHkodGFyZ2V0LG1lKTsNCgkJICAgIAlkZWxpdmVyKGZhbHNlLGRlbGF5KTsNCgkJICAgIAlyZXR1cm4gcHJveHk7DQoJCSAgICB9DQoJCQlPYnNlcnZlci5wcm90b3R5cGUuZGVsaXZlciA9IGZ1bmN0aW9uKCkgew0KCQkJCXJldHVybiB0aGlzLmdldChudWxsLCJkZWxpdmVyIik7DQoJCQl9DQoJCSAgICBPYnNlcnZlci5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSwgdmFsdWUpIHsgLy8gLCByZWNlaXZlcg0KCQkgICAgCXZhciBvbGR2YWx1ZSA9IHRhcmdldFtwcm9wZXJ0eV07DQoJCSAgICAJdmFyIHR5cGUgPSAob2xkdmFsdWU9PT11bmRlZmluZWQgPyAiYWRkIiA6ICJ1cGRhdGUiKTsNCgkJICAgIAl0YXJnZXRbcHJvcGVydHldID0gdmFsdWU7DQoJCSAgICAJaWYodGFyZ2V0Ll9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCAmJiAoIXRoaXMuYWNjZXB0bGlzdCB8fCB0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZih0eXBlKT49MCkpIHsNCgkJICAgICAgICAJdmFyIGNoYW5nZSA9IHtvYmplY3Q6dGFyZ2V0LG5hbWU6cHJvcGVydHksdHlwZTp0eXBlfSwNCgkJICAgICAgICAJCXN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLA0KCQkgICAgICAgIAkJZGVsaXZlciA9IHRoaXMuZGVsaXZlcigpOw0KCQkgICAgICAgIAlpZih0eXBlPT09InVwZGF0ZSIpIHsNCgkJICAgICAgICAJCWNoYW5nZS5vbGRWYWx1ZSA9IG9sZHZhbHVlOw0KCQkgICAgICAgIAl9DQoJCSAgICAgICAgCXRoaXMuY2hhbmdlc2V0LnB1c2goY2hhbmdlKTsNCgkJICAgICAgICAJaWYoc3RhcnQpIHsNCgkJICAgICAgICAJCWRlbGl2ZXIoZmFsc2UsKHR5cGVvZihkZWxpdmVyLmRlbGF5KT09PSJudW1iZXIiID8gZGVsaXZlci5kZWxheSA6IDEwKSk7DQoJCSAgICAgICAgCX0NCgkJICAgIAl9DQoJCSAgICAJcmV0dXJuIHRydWU7DQoJCSAgICB9Ow0KCQkgICAgT2JzZXJ2ZXIucHJvdG90eXBlLmRlbGV0ZVByb3BlcnR5ID0gZnVuY3Rpb24odGFyZ2V0LCBwcm9wZXJ0eSkgew0KCQkgICAgCXZhciBvbGR2YWx1ZSA9IHRhcmdldFtwcm9wZXJ0eV07DQoJCSAgICAJLy9pZih0eXBlb2Yob2xkdmFsdWUpIT09InVuZGVmaW5lZCIpIHsNCgkJCSAgICAJZGVsZXRlIHRhcmdldFtwcm9wZXJ0eV07DQoJCQkgICAgCWlmKHRhcmdldC5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAgJiYgIXRoaXMuYWNjZXB0bGlzdCB8fCB0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZigiZGVsZXRlIik+PTApIHsNCgkJCSAgICAgICAgCXZhciBjaGFuZ2UgPSB7b2JqZWN0OnRhcmdldCxuYW1lOnByb3BlcnR5LHR5cGU6ImRlbGV0ZSIsb2xkVmFsdWU6b2xkdmFsdWV9LA0KCQkJICAgICAgICAJCXN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLA0KCQkJICAgICAgICAJCWRlbGl2ZXIgPSB0aGlzLmRlbGl2ZXIoKTsNCgkJCSAgICAgICAgCXRoaXMuY2hhbmdlc2V0LnB1c2goY2hhbmdlKTsNCgkJCSAgICAgICAgCWlmKHN0YXJ0KSB7DQoJCQkgICAgICAgIAkJZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09Im51bWJlciIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTsNCgkJCSAgICAgICAgCX0NCgkJCSAgICAJfQ0KCQkgICAgCS8vfQ0KCQkgICAgCXJldHVybiB0cnVlOw0KCQkgICAgfTsNCgkJICAgIE9ic2VydmVyLnByb3RvdHlwZS5kZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uKHRhcmdldCwgcHJvcGVydHksIGRlc2NyaXB0b3IpIHsNCgkJICAgIAlPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7DQoJCSAgICAJaWYodGFyZ2V0Ll9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCAmJiAhdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKCJyZWNvbmZpZ3VyZSIpPj0wKSB7DQoJCSAgICAgICAgCXZhciBjaGFuZ2UgPSB7b2JqZWN0OnRhcmdldCxuYW1lOnByb3BlcnR5LHR5cGU6InJlY29uZmlndXJlIn0sDQoJICAgICAgICAJCQlzdGFydCA9IHRoaXMuY2hhbmdlc2V0Lmxlbmd0aCA9PT0gMCwNCgkgICAgICAgIAkJCWRlbGl2ZXIgPSB0aGlzLmRlbGl2ZXIoKTsNCgkJICAgICAgICAJdGhpcy5jaGFuZ2VzZXQucHVzaChjaGFuZ2UpOw0KCQkgICAgICAgIAlpZihzdGFydCkgew0KCQkgICAgICAgIAkJZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09Im51bWJlciIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTsNCgkJICAgICAgICAJfQ0KCQkgICAgCX0NCgkJICAgIAlyZXR1cm4gdHJ1ZTsNCgkJICAgIH07DQoJCSAgICBPYnNlcnZlci5wcm90b3R5cGUuc2V0UHJvdG90eXBlT2YgPSBmdW5jdGlvbih0YXJnZXQsIHByb3RvdHlwZSkgew0KCQkgICAgCXZhciBvbGR2YWx1ZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpOw0KCQkgICAgCU9iamVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvdHlwZSk7DQoJCSAgICAJaWYodGFyZ2V0Ll9fb2JzZXJ2ZXJzX18uaW5kZXhPZih0aGlzKT49MCAmJiAhdGhpcy5hY2NlcHRsaXN0IHx8IHRoaXMuYWNjZXB0bGlzdC5pbmRleE9mKCJzZXRQcm90b3R5cGUiKT49MCkgew0KCQkgICAgICAgIAl2YXIgY2hhbmdlID0ge29iamVjdDp0YXJnZXQsbmFtZToiX19wcm90b19fIix0eXBlOiJzZXRQcm90b3R5cGUiLG9sZFZhbHVlOm9sZHZhbHVlfSwNCgkgICAgCQkJCXN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLA0KCSAgICAJCQkJZGVsaXZlciA9IHRoaXMuZGVsaXZlcigpOw0KCQkgICAgICAgIAl0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7DQoJCSAgICAgICAgCWlmKHN0YXJ0KSB7DQoJCSAgICAgICAgCQlkZWxpdmVyKGZhbHNlLCh0eXBlb2YoZGVsaXZlci5kZWxheSk9PT0ibnVtYmVyIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpOw0KCQkgICAgICAgIAl9DQoJCSAgICAJfQ0KCQkgICAgCXJldHVybiB0cnVlOw0KCQkgICAgfTsNCgkJICAgIE9ic2VydmVyLnByb3RvdHlwZS5wcmV2ZW50RXh0ZW5zaW9ucyA9IGZ1bmN0aW9uKHRhcmdldCkgew0KCQkgICAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpOw0KCQkgICAgCWlmKHRhcmdldC5fX29ic2VydmVyc19fLmluZGV4T2YodGhpcyk+PTAgJiYgIXRoaXMuYWNjZXB0bGlzdCB8fCB0aGlzLmFjY2VwdGxpc3QuaW5kZXhPZigicHJldmVudEV4dGVuc2lvbnMiKT49MCkgew0KCQkgICAgICAgIAl2YXIgY2hhbmdlID0ge29iamVjdDp0YXJnZXQsdHlwZToicHJldmVudEV4dGVuc2lvbnMifSwNCgkJCQkJCXN0YXJ0ID0gdGhpcy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLA0KCQkJCQkJZGVsaXZlciA9IHRoaXMuZGVsaXZlcigpOw0KCQkgICAgICAgIAl0aGlzLmNoYW5nZXNldC5wdXNoKGNoYW5nZSk7DQoJCSAgICAgICAgCWlmKHN0YXJ0KSB7DQoJCSAgICAgICAgCQlkZWxpdmVyKGZhbHNlLCh0eXBlb2YoZGVsaXZlci5kZWxheSk9PT0ibnVtYmVyIiA/IGRlbGl2ZXIuZGVsYXkgOiAxMCkpOw0KCQkgICAgICAgIAl9DQoJCSAgICAJfQ0KCQkgICAgCXJldHVybiB0cnVlOw0KCQkgICAgfTsNCgkJICAgIE9iamVjdC5vYnNlcnZlID0gZnVuY3Rpb24ob2JqZWN0LGNhbGxiYWNrLGFjY2VwdGxpc3QscGF1c2FibGUscGF1c2UsZGVsYXkpIHsNCgkJICAgIAlyZXR1cm4gbmV3IE9ic2VydmVyKG9iamVjdCxjYWxsYmFjayxhY2NlcHRsaXN0LHBhdXNhYmxlLHBhdXNlLGRlbGF5KTsNCgkJICAgIH07DQoJCSAgICBPYmplY3QudW5vYnNlcnZlID0gZnVuY3Rpb24ob2JqZWN0LGNhbGxiYWNrKSB7DQoJCSAgICAJaWYob2JqZWN0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfXykgew0KCQkgICAgCQlpZighY2FsbGJhY2spIHsNCgkJICAgIAkJCW9iamVjdC5fX29ic2VydmVyQ2FsbGJhY2tzX18uc3BsaWNlKDAsb2JqZWN0Ll9fb2JzZXJ2ZXJDYWxsYmFja3NfXy5sZW5ndGgpOw0KCQkgICAgCQkJb2JqZWN0Ll9fb2JzZXJ2ZXJzX18uc3BsaWNlKDAsb2JqZWN0Ll9fb2JzZXJ2ZXJzX18ubGVuZ3RoKTsNCgkJICAgIAkJCXJldHVybjsNCgkJICAgIAkJfQ0KCQkgICAgCQlvYmplY3QuX19vYnNlcnZlckNhbGxiYWNrc19fLmZvckVhY2goZnVuY3Rpb24ob2JzZXJ2ZXJjYWxsYmFjayxpKSB7DQoJCSAgICAJCQlpZihjYWxsYmFjaz09PW9ic2VydmVyY2FsbGJhY2spIHsNCgkJICAgIAkJCQlvYmplY3QuX19vYnNlcnZlckNhbGxiYWNrc19fLnNwbGljZShpLDEpOw0KCQkgICAgCQkJCWRlbGV0ZSBvYmplY3QuX19vYnNlcnZlcnNfX1tpXS5jYWxsYmFjazsNCgkJICAgIAkJCQlvYmplY3QuX19vYnNlcnZlcnNfXy5zcGxpY2UoaSwxKTsNCgkJICAgIAkJCX0NCgkJICAgIAkJfSk7DQoJCSAgICAJfQ0KCQkgICAgfTsNCgkJICAgIEFycmF5Lm9ic2VydmUgPSBmdW5jdGlvbihvYmplY3QsY2FsbGJhY2ssYWNjZXB0bGlzdCxwYXVzYWJsZSxwYXVzZSxkZWxheSkgew0KCQkgICAgCWlmKCEob2JqZWN0IGluc3RhbmNlb2YgQXJyYXkpICYmICFBcnJheS5pc0FycmF5KG9iamVjdCkpIHsNCgkJICAgIAkJdGhyb3cgbmV3IFR5cGVFcnJvcigiRmlyc3QgYXJndW1lbnQgdG8gQXJyYXkub2JzZXJ2ZXIgaXMgbm90IGFuIEFycmF5Iik7DQoJCSAgICAJfQ0KCSAgICAgICAgICAgIAlhY2NlcHRsaXN0ID0gYWNjZXB0bGlzdCB8fCBbImFkZCIsICJ1cGRhdGUiLCAiZGVsZXRlIiwgInNwbGljZSJdOw0KCQkgICAgCXZhciBhcnJheXByb3h5ID0gbmV3IFByb3h5KG9iamVjdCx7Z2V0OiBmdW5jdGlvbih0YXJnZXQscHJvcGVydHkpIHsNCgkJICAgIAkJaWYocHJvcGVydHk9PT0idW5vYnNlcnZlIikgew0KCQkJICAgIAkJcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7DQoJCQkgICAgCQkJaWYoY2FsbGJhY2spIHsNCgkJCSAgICAJCQkJcmV0dXJuIE9iamVjdC51bm9ic2VydmUodGFyZ2V0LGNhbGxiYWNrKTsNCgkJCSAgICAJCQl9DQoJCQkgICAgCQkJcmV0dXJuIHRhcmdldC51bm9ic2VydmUoKTsNCgkJCSAgICAJCX07DQoJCQkgICAgCX0NCgkJICAgIAkJaWYocHJvcGVydHk9PT0ic3BsaWNlIikgew0KCQkgICAgCQkJcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LGVuZCkgew0KCQkgICAgCQkJCWlmKHR5cGVvZihzdGFydCkhPT0ibnVtYmVyIiB8fCB0eXBlb2YoZW5kKSE9PSJudW1iZXIiKSB7DQoJCSAgICAJCQkJCXRocm93IG5ldyBUeXBlRXJyb3IoIkZpcnN0IHR3byBhcmd1bWVudHMgdG8gQXJyYXkgc3BsaWNlIGFyZSBub3QgbnVtYmVyLCBudW1iZXIiKTsNCgkJICAgIAkJCQl9DQoJCSAgICAJICAgIAkJdmFyIHJlbW92ZWQgPSB0aGlzLnNsaWNlKHN0YXJ0LHN0YXJ0K2VuZCksDQoJCSAgICAJICAgIAkJCWFkZGVkQ291bnQgPSAoYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHMubGVuZ3RoLTIgOiAwKSwNCgkJICAgIAkgICAgCQkJY2hhbmdlID0gIHtvYmplY3Q6b2JqZWN0LHR5cGU6InNwbGljZSIsaW5kZXg6c3RhcnQscmVtb3ZlZDpyZW1vdmVkLGFkZGVkQ291bnQ6YWRkZWRDb3VudH07DQoJCSAgICAJICAgIAkJdGFyZ2V0LnNwbGljZS5hcHBseSh0YXJnZXQsYXJndW1lbnRzKTsNCgkJICAgIAkgICAgCQlpZihhY2NlcHRsaXN0LmluZGV4T2YoInNwbGljZSIpPj0wKSB7DQoJCSAgICAJICAgIAkJCXZhciBzdGFydCA9IHByb3h5Ll9fb2JzZXJ2ZXJfXy5jaGFuZ2VzZXQubGVuZ3RoID09PSAwLA0KCQkgICAgCSAgICAgICAgCQkJZGVsaXZlciA9IHByb3h5Ll9fb2JzZXJ2ZXJfXy5kZWxpdmVyKCk7DQoJCSAgICAJICAgIAkJCXByb3h5Ll9fb2JzZXJ2ZXJfXy5jaGFuZ2VzZXQucHVzaChjaGFuZ2UpOw0KCQkgICAgCSAgICAJCQlpZihzdGFydCkgew0KCQkgICAgCQkgICAgICAgIAkJZGVsaXZlcihmYWxzZSwodHlwZW9mKGRlbGl2ZXIuZGVsYXkpPT09Im51bWJlciIgPyBkZWxpdmVyLmRlbGF5IDogMTApKTsNCgkJICAgIAkJICAgICAgICAJfQ0KCQkgICAgCSAgICAJCX0NCgkJICAgIAkgICAgCX0NCgkJICAgIAkJfQ0KCQkgICAgCQlpZihwcm9wZXJ0eT09PSJwdXNoIikgew0KCQkgICAgCQkJIHJldHVybiBmdW5jdGlvbihpdGVtKSB7DQoJCSAgICAJCSAgICAJcmV0dXJuIHRoaXMuc3BsaWNlKHRoaXMubGVuZ3RoLDAsaXRlbSk7DQoJCSAgICAJCSAgICB9DQoJCSAgICAJCX0NCgkJICAgIAkJaWYocHJvcGVydHk9PT0icG9wIikgew0KCQkgICAgCQkJIHJldHVybiBmdW5jdGlvbigpIHsNCgkJICAgIAkJICAgIAlyZXR1cm4gdGhpcy5zcGxpY2UodGhpcy5sZW5ndGgtMSwxKTsNCgkJICAgIAkJICAgIH0NCgkJICAgIAkJfQ0KCQkgICAgCQlpZihwcm9wZXJ0eT09PSJ1bnNoaWZ0Iikgew0KCQkgICAgCQkJIHJldHVybiBmdW5jdGlvbihpdGVtKSB7DQoJICAgIAkJICAgIAkJcmV0dXJuIHRoaXMuc3BsaWNlKDAsMCxpdGVtKTsNCgkgICAgCQkgICAgCX0NCgkJICAgIAkJfQ0KCQkgICAgCQlpZihwcm9wZXJ0eT09PSJzaGlmdCIpIHsNCgkJICAgIAkJCXJldHVybiBmdW5jdGlvbigpIHsNCgkJICAgIAkgICAgCQlyZXR1cm4gdGhpcy5zcGxpY2UoMCwxKTsNCgkJICAgIAkgICAgCX0NCgkJICAgIAkJfQ0KCQkgICAgCQlyZXR1cm4gdGFyZ2V0W3Byb3BlcnR5XTsNCgkJICAgIAl9fSk7DQoJCSAgICAJdmFyIHByb3h5ID0gT2JqZWN0Lm9ic2VydmUoYXJyYXlwcm94eSxmdW5jdGlvbihjaGFuZ2VzZXQpIHsgDQoJCSAgICAJCXZhciBjaGFuZ2VzID0gY2hhbmdlc2V0LmZpbHRlcihmdW5jdGlvbihjaGFuZ2UpIHsgcmV0dXJuIGNoYW5nZS5uYW1lIT09Imxlbmd0aCIgJiYgY2hhbmdlLm5hbWUhPT0iYWRkIiAmJiAoIWFjY2VwdGxpc3QgfHwgYWNjZXB0bGlzdC5pbmRleE9mKGNoYW5nZS50eXBlKT49MCk7IH0pOw0KCQkgICAgCQlpZihjaGFuZ2VzLmxlbmd0aD4wKSB7DQoJCSAgICAJCQljYWxsYmFjayhjaGFuZ2VzKTsNCgkJICAgIAkJfQ0KCQkgICAgCX0sYWNjZXB0bGlzdCxwYXVzYWJsZSxwYXVzZSxkZWxheSk7DQoJCSAgICAJcmV0dXJuIHByb3h5Ow0KCQkgICAgfTsNCgkJICAgIEFycmF5LnVub2JzZXJ2ZSA9IGZ1bmN0aW9uKG9iamVjdCxjYWxsYmFjaykgew0KCQkJICByZXR1cm4gb2JqZWN0LnVub2JzZXJ2ZShjYWxsYmFjayk7DQoJCSAgICB9DQoJCX0NCgkJT2JqZWN0LmRlZXBPYnNlcnZlID0gZnVuY3Rpb24ob2JqZWN0LGNhbGxiYWNrLHBhcnRzKSB7DQoNCgkJCXBhcnRzID0gKHBhcnRzID8gcGFydHMgOiBbXSk7DQoNCgkJCXZhciB0b1R5cGVOYW1lID0gZnVuY3Rpb24ob2JqKSB7DQoJCQkJcmV0dXJuICh7fSkudG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9ccyhbYS16QS1aXSspLylbMV0udG9Mb3dlckNhc2UoKQ0KCQkJfQ0KDQoJCQlmdW5jdGlvbiByZW9ic2VydmUodmFsdWUsIHBhcnRzKSB7DQoJCQkJdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7DQoJCQkJa2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgew0KCQkJCQlpZigodG9UeXBlTmFtZSh2YWx1ZVtrZXldKSA9PT0gJ29iamVjdCcgfHwgdG9UeXBlTmFtZSh2YWx1ZVtrZXldKSA9PT0gJ2FycmF5JykgJiYgIXZhbHVlW2tleV0uaGFzT3duUHJvcGVydHkoJ19fb2JzZXJ2ZXJzX18nKSkgew0KCQkJCQkJdmFyIG5ld3BhcnRzID0gcGFydHMuc2xpY2UoMCk7DQoJCQkJCQluZXdwYXJ0cy5wdXNoKGtleSk7DQoJCQkJCQl2YWx1ZVtrZXldID0gT2JqZWN0LmRlZXBPYnNlcnZlKHZhbHVlW2tleV0sY2FsbGJhY2ssbmV3cGFydHMpOw0KCQkJCQl9DQoJCQkJfSk7DQoJCQl9DQoNCgkJCXJlb2JzZXJ2ZShvYmplY3QsIHBhcnRzKTsNCg0KCQkJdmFyIG9ic2VydmVkID0gT2JqZWN0Lm9ic2VydmUob2JqZWN0LGZ1bmN0aW9uKGNoYW5nZXNldCkgew0KCQkJCXZhciBjaGFuZ2VzID0gW107DQoJCQkJZnVuY3Rpb24gcmVjdXJzZShuYW1lLHJvb3RPYmplY3Qsb2xkT2JqZWN0LG5ld09iamVjdCxwYXRoKSB7DQoJCQkJCWlmKG5ld09iamVjdCBpbnN0YW5jZW9mIE9iamVjdCkgew0KCQkJCQkJdmFyIG5ld2tleXMgPSBPYmplY3Qua2V5cyhuZXdPYmplY3QpOw0KCQkJCQkJbmV3a2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgew0KCQkJCQkJCWlmKCFvbGRPYmplY3QgfHwgKG9sZE9iamVjdFtrZXldIT09bmV3T2JqZWN0W2tleV0pKSB7DQoJCQkJCQkJCXZhciBvbGR2YWx1ZSA9IChvbGRPYmplY3QgJiYgb2xkT2JqZWN0W2tleV0hPT11bmRlZmluZWQgPyBvbGRPYmplY3Rba2V5XSA6IHVuZGVmaW5lZCksDQoJCQkJCQkJCQljaGFuZ2UgPSAob2xkdmFsdWU9PT11bmRlZmluZWQgPyAiYWRkIiA6ICJ1cGRhdGUiKSwNCgkJCQkJCQkJCWtleXBhdGggPSBwYXRoICsgIi4iICsga2V5Ow0KDQoJCQkJCQkJCWNoYW5nZXMucHVzaCh7bmFtZTpuYW1lLG9iamVjdDpyb290T2JqZWN0LHR5cGU6Y2hhbmdlLG9sZFZhbHVlOm9sZHZhbHVlLG5ld1ZhbHVlOm5ld09iamVjdFtrZXldLGtleXBhdGg6a2V5cGF0aH0pOw0KCQkJCQkJCQlyZWN1cnNlKG5hbWUscm9vdE9iamVjdCxvbGR2YWx1ZSxuZXdPYmplY3Rba2V5XSxrZXlwYXRoKTsNCgkJCQkJCQl9DQoJCQkJCQl9KTsNCgkJCQkJfSBlbHNlIGlmKG9sZE9iamVjdCBpbnN0YW5jZW9mIE9iamVjdCkgew0KCQkJCQkJdmFyIG9sZGtleXMgPSBPYmplY3Qua2V5cyhvbGRPYmplY3QpOw0KCQkJCQkJb2xka2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgew0KCQkJCQkJCXZhciBjaGFuZ2UgPSAobmV3T2JqZWN0PT09bnVsbCA/ICJ1cGRhdGUiIDogImRlbGV0ZSIpLA0KCQkJCQkJCQlrZXlwYXRoID0gcGF0aCArICIuIiArIGtleTsNCgkJCQkJCQkJDQoJCQkJCQkJY2hhbmdlcy5wdXNoKHtuYW1lOm5hbWUsb2JqZWN0OnJvb3RPYmplY3QsdHlwZTpjaGFuZ2Usb2xkVmFsdWU6b2xkT2JqZWN0W2tleV0sbmV3VmFsdWU6bmV3T2JqZWN0LGtleXBhdGg6a2V5cGF0aH0pOw0KCQkJCQkJCXJlY3Vyc2UobmFtZSxyb290T2JqZWN0LG9sZE9iamVjdFtrZXldLHVuZGVmaW5lZCxrZXlwYXRoKTsNCgkJCQkJCX0pOw0KCQkJCQl9DQoJCQkJfQ0KCQkJCWNoYW5nZXNldC5mb3JFYWNoKGZ1bmN0aW9uKGNoYW5nZSkgew0KCQkJCQl2YXIga2V5cGF0aCA9IChwYXJ0cy5sZW5ndGg+MCA/IHBhcnRzLmpvaW4oIi4iKSArICIuIiA6ICIiKSArIGNoYW5nZS5uYW1lOw0KDQoJCQkJCWlmIChjaGFuZ2UudHlwZSA9PT0gInVwZGF0ZSIgfHwgY2hhbmdlLnR5cGUgPT09ICJhZGQiKSB7IA0KCQkJCQkJcmVvYnNlcnZlKGNoYW5nZS5vYmplY3QsIHBhcnRzKTsNCgkJCQkJfQ0KDQoJCQkJCWNoYW5nZXMucHVzaCh7bmFtZTpjaGFuZ2UubmFtZSxvYmplY3Q6Y2hhbmdlLm9iamVjdCx0eXBlOmNoYW5nZS50eXBlLG9sZFZhbHVlOmNoYW5nZS5vbGRWYWx1ZSxuZXdWYWx1ZTpjaGFuZ2Uub2JqZWN0W2NoYW5nZS5uYW1lXSxrZXlwYXRoOmtleXBhdGh9KTsNCgkJCQkJcmVjdXJzZShjaGFuZ2UubmFtZSxjaGFuZ2Uub2JqZWN0LGNoYW5nZS5vbGRWYWx1ZSxjaGFuZ2Uub2JqZWN0W2NoYW5nZS5uYW1lXSxrZXlwYXRoKTsNCgkJCQl9KTsNCgkJCQljYWxsYmFjayhjaGFuZ2VzKTsNCgkJCX0pOw0KCQkJcmV0dXJuIG9ic2VydmVkOw0KCQl9Ow0KCX0pKCk7DQoKCgkvKioqLyB9KSwKCS8qIDE1NCAqLywKCS8qIDE1NSAqLywKCS8qIDE1NiAqLywKCS8qIDE1NyAqLywKCS8qIDE1OCAqLywKCS8qIDE1OSAqLywKCS8qIDE2MCAqLywKCS8qIDE2MSAqLywKCS8qIDE2MiAqLwoJLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKCSJ1c2Ugc3RyaWN0IjsKCgoJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewoJICB2YWx1ZTogdHJ1ZQoJfSk7CglleHBvcnRzLkRhdGFPYmplY3RPYnNlcnZlciA9IGV4cG9ydHMuRGF0YU9iamVjdFJlcG9ydGVyID0gZXhwb3J0cy5TeW5jaGVyID0gdW5kZWZpbmVkOwoKCXZhciBfU3luY2hlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTMwKTsKCgl2YXIgX1N5bmNoZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3luY2hlcik7CgoJdmFyIF9EYXRhT2JqZWN0UmVwb3J0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOSk7CgoJdmFyIF9EYXRhT2JqZWN0UmVwb3J0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRGF0YU9iamVjdFJlcG9ydGVyKTsKCgl2YXIgX0RhdGFPYmplY3RPYnNlcnZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTE4KTsKCgl2YXIgX0RhdGFPYmplY3RPYnNlcnZlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EYXRhT2JqZWN0T2JzZXJ2ZXIpOwoKCWZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgoJZXhwb3J0cy5TeW5jaGVyID0gX1N5bmNoZXIyLmRlZmF1bHQ7CglleHBvcnRzLkRhdGFPYmplY3RSZXBvcnRlciA9IF9EYXRhT2JqZWN0UmVwb3J0ZXIyLmRlZmF1bHQ7CglleHBvcnRzLkRhdGFPYmplY3RPYnNlcnZlciA9IF9EYXRhT2JqZWN0T2JzZXJ2ZXIyLmRlZmF1bHQ7CgoJLyoqKi8gfSkKCS8qKioqKiovIF0pOwoJfSk7CgkvLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2ZDJWaWNHRmpheTkxYm1sMlpYSnpZV3hOYjJSMWJHVkVaV1pwYm1sMGFXOXVJaXdpZDJWaWNHRmphem92THk5M1pXSndZV05yTDJKdmIzUnpkSEpoY0NCaFkyVmlZV05tTWpsa056UTBNR0V4T0RaaVpDSXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5amIzSmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMmRzYjJKaGJDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTNhM011YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWkdWelkzSnBjSFJ2Y25NdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdSd0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnVMVzlpYW1WamRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOW9hV1JsTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsekxXOWlhbVZqZEM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5bGVIQnZjblF1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMmhsYkhCbGNuTXZZMnhoYzNORFlXeHNRMmhsWTJzdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12WTNKbFlYUmxRMnhoYzNNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlptRnBiSE11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYUdGekxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzUnZMV2x2WW1wbFkzUXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZM1I0TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsMFpYSmhkRzl5Y3k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5d2NtOXdaWEowZVMxa1pYTmpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMXJaWGx6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOdlppNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWtiMjB0WTNKbFlYUmxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMkV0Wm5WdVkzUnBiMjR1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2N1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEc4dGNISnBiV2wwYVhabExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzVnBaQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlrWldacGJtVmtMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMnhwWW5KaGNua3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZjMmhoY21Wa0xXdGxlUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwYnkxcGJuUmxaMlZ5TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJWdWRXMHRZblZuTFd0bGVYTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhV1U0TFdSdmJTMWtaV1pwYm1VdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMyaGhjbVZrTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOW5aWFF0Y0hKdmRHOTBlWEJsTFc5bUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzUnZMVzlpYW1WamRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5cGJtaGxjbWwwY3k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTl3YjNOemFXSnNaVU52Ym5OMGNuVmpkRzl5VW1WMGRYSnVMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMWpjbVZoZEdVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZaR1ZtYVc1bExYQnliM0JsY25SNUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WkdWbWFXNWxMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVrWldacGJtVXRjSEp2Y0dWeWRIa3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmFuTnZiaTl6ZEhKcGJtZHBabmt1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMWEJwWlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5b2RHMXNMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW5jRzh1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV3RsZVhNdGFXNTBaWEp1WVd3dWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFhOaGNDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXlaV1JsWm1sdVpTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOTBieTFzWlc1bmRHZ3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkMnR6TFdSbFptbHVaUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkzYTNNdFpYaDBMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0yTG5OMGNtbHVaeTVwZEdWeVlYUnZjaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMM2RsWWk1a2IyMHVhWFJsY21GaWJHVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YW5OdmJpOXpkSEpwYm1kcFpua3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZMnhoYzNOdlppNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBiMkpxWldOMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxbmIzQmtMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW5iM0J6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlvWld4d1pYSnpMM1I1Y0dWdlppNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWhaR1F0ZEc4dGRXNXpZMjl3WVdKc1pYTXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZWEp5WVhrdGFXNWpiSFZrWlhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmFYUmxjaTFqY21WaGRHVXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWFJsY2kxemRHVndMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMWtjSE11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV2R2Y0c0dWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMzUnlhVzVuTFdGMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzUmhjMnN1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEc4dGFXNWtaWGd1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdVlYSnlZWGt1YVhSbGNtRjBiM0l1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwydGxlWE11YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZjSEp2YldselpTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXRaWFJoTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WTI5eVpTNW5aWFF0YVhSbGNtRjBiM0l0YldWMGFHOWtMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5amNtVmhkR1V1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwzTmxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YzNsdFltOXNMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwzTjViV0p2YkM5cGRHVnlZWFJ2Y2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdlkzSmxZWFJsTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5clpYbHpMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzl6WlhRdGNISnZkRzkwZVhCbExXOW1MbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDNCeWIyMXBjMlV1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmMzbHRZbTlzTDJsdVpHVjRMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDNONWJXSnZiQzlwZEdWeVlYUnZjaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloYmkxcGJuTjBZVzVqWlM1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5bGJuVnRMV3RsZVhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlptOXlMVzltTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsdWRtOXJaUzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlwY3kxaGNuSmhlUzFwZEdWeUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybHpMV0Z5Y21GNUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybDBaWEl0WTJGc2JDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5TFdSbGRHVmpkQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlyWlhsdlppNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXRhV055YjNSaGMyc3Vhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXZHZjRzR0WlhoMExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgzSmxaR1ZtYVc1bExXRnNiQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6WlhRdGNISnZkRzh1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYzJWMExYTndaV05wWlhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMzQmxZMmxsY3kxamIyNXpkSEoxWTNSdmNpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVZM0psWVhSbExtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNW5aWFF0Y0hKdmRHOTBlWEJsTFc5bUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXJaWGx6TG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1elpYUXRjSEp2ZEc5MGVYQmxMVzltTG1weklpd2lkMlZpY0dGamF6b3ZMeTh1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WlhNMkxuQnliMjFwYzJVdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXVjM2x0WW05c0xtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTNMbk41YldKdmJDNWhjM2x1WXkxcGRHVnlZWFJ2Y2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dWIySnpaWEoyWVdKc1pTNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOXpjbU12ZFhScGJITXZkWFJwYkhNdWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmMzSmpMM041Ym1Ob1pYSXZSR0YwWVU5aWFtVmpkRTlpYzJWeWRtVnlMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5emVXNWphR1Z5TDBSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2k1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5emNtTXZjM2x1WTJobGNpOUVZWFJoVDJKcVpXTjBMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMM055WXk5emVXNWphR1Z5TDBSaGRHRlBZbXBsWTNSRGFHbHNaQzVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmMzbHVZMmhsY2k5UWNtOTRlVTlpYW1WamRDNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMMkpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5blpYUXVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZjM0pqTDNONWJtTm9aWEl2VTNsdVkyaGxjaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTl6Y21NdmMzbHVZMmhsY2k5RVlYUmhVSEp2ZG1semFXOXVZV3d1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2Zmk5aVlXSmxiQzF5ZFc1MGFXMWxMMk52Y21VdGFuTXZiMkpxWldOMEwyRnpjMmxuYmk1cWN5SXNJbmRsWW5CaFkyczZMeTh2TGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2WTI5eVpTMXFjeTl2WW1wbFkzUXZaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXlMbXB6SWl3aWQyVmljR0ZqYXpvdkx5OHVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzloYzNOcFoyNHVhbk1pTENKM1pXSndZV05yT2k4dkx5NHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMmRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaTVxY3lJc0luZGxZbkJoWTJzNkx5OHZMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRZWE56YVdkdUxtcHpJaXdpZDJWaWNHRmphem92THk4dUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWhjM05wWjI0dWFuTWlMQ0ozWldKd1lXTnJPaTh2THk0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpNXFjeUlzSW5kbFluQmhZMnM2THk4dkxpOStMM0J5YjNoNUxXOWljMlZ5ZG1VdmFXNWtaWGd1YW5NaUxDSjNaV0p3WVdOck9pOHZMeTR2YzNKakwxTjVibU5vWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpWkdsMmFXUmxWVkpNSWl3aVpHbDJhV1JsUlcxaGFXd2lMQ0psYlhCMGVVOWlhbVZqZENJc0ltUmxaWEJEYkc5dVpTSXNJbWRsZEZWelpYSlZVa3hHY205dFJXMWhhV3dpTENKblpYUlZjMlZ5UlcxaGFXeEdjbTl0VlZKTUlpd2lZMjl1ZG1WeWRGUnZWWE5sY2xWU1RDSXNJblZ5YkNJc0lrVnljbTl5SWl3aWNtVmpkWEp6WlNJc0luWmhiSFZsSWl3aWNtVm5aWGdpTENKemRXSnpkQ0lzSW5CaGNuUnpJaXdpY21Wd2JHRmpaU0lzSW5Od2JHbDBJaXdpYVc1amJIVmtaWE1pTENKeVpYTjFiSFFpTENKMGVYQmxJaXdpWkc5dFlXbHVJaXdpYVdSbGJuUnBkSGtpTENKamIyNXpiMnhsSWl3aVpYSnliM0lpTENKelkyaGxiV1VpTENKemRXSnpkSElpTENKcGJtUmxlRTltSWl3aVpXMWhhV3dpTENKcGJtUmxlRTltUVhRaUxDSjFjMlZ5Ym1GdFpTSXNJbk4xWW5OMGNtbHVaeUlzSW14bGJtZDBhQ0lzSW05aWFtVmpkQ0lzSW05aWFpSXNJa3BUVDA0aUxDSndZWEp6WlNJc0luVnpaWEpGYldGcGJDSXNJblZ6WlhKVlVrd2lMQ0pwWkdWdWRHbG1hV1Z5SWl3aVpHbDJhV1JsWkZWU1RDSXNJa1pwYkhSbGNsUjVjR1VpTENKQlRsa2lMQ0pUVkVGU1ZDSXNJa1ZZUVVOVUlpd2lSR0YwWVU5aWFtVmpkRTlpYzJWeWRtVnlJaXdpYzNsdVkyaGxjaUlzSW5OamFHVnRZU0lzSW1sdWFYUnBZV3hUZEdGMGRYTWlMQ0pwYm1sMGFXRnNSR0YwWVNJc0ltTm9hV3hrY21WdWN5SXNJbWx1YVhScFlXeFdaWEp6YVc5dUlpd2liWFYwZFdGc0lpd2laR0YwWVNJc0lsOTBhR2x6SWl3aVgzWmxjbk5wYjI0aUxDSmZabWxzZEdWeWN5SXNJbDl6ZVc1alQySnFJaXdpYjJKelpYSjJaU0lzSW1WMlpXNTBJaXdpWDI5dVJtbHNkR1Z5SWl3aVptOXlSV0ZqYUNJc0ltTm9hV3hrU1dRaUxDSmphR2xzWkVSaGRHRWlMQ0pmWTJocGJHUnlaVzVQWW1wbFkzUnpJaXdpWDJGc2JHOWpZWFJsVEdsemRHVnVaWEp6SWl3aVgyTm9ZVzVuWlV4cGMzUmxibVZ5SWl3aVgySjFjeUlzSW1Ga1pFeHBjM1JsYm1WeUlpd2lYM1Z5YkNJc0ltMXpaeUlzSW14dlp5SXNJbDlqYUdGdVoyVlBZbXBsWTNRaUxDSnlaVzF2ZG1VaUxDSmZjbVZzWldGelpVeHBjM1JsYm1WeWN5SXNJbDl6ZVc1amFHVnlJaXdpWDI5aWMyVnlkbVZ5Y3lJc0luVnVVM1ZpYzJOeWFXSmxUWE5uSWl3aVpuSnZiU0lzSWw5dmQyNWxjaUlzSW5Sdklpd2lYM04xWWxWU1RDSXNJbUp2WkhraUxDSnlaWE52ZFhKalpTSXNJbkJ2YzNSTlpYTnpZV2RsSWl3aWNtVndiSGtpTENKamIyUmxJaXdpWm1sc2RHVnlJaXdpWTJGc2JHSmhZMnNpTENKclpYa2lMQ0ptYVd4MFpYSlBZbW9pTENKcFpIZ2lMQ0ptYVdWc1pDSXNJa1JoZEdGUFltcGxZM1JTWlhCdmNuUmxjaUlzSWw5emRXSnpZM0pwY0hScGIyNXpJaXdpWDI5dVEyaGhibWRsSWl3aVgyOWlhbVZqZEV4cGMzUmxibVZ5SWl3aVgyOXVVbVZ6Y0c5dWMyVWlMQ0pmYjI1U1pXRmtJaXdpYjJKelpYSjJaWEp6SWl3aWFXNTJhWFJsVFhObklpd2ljbVZ6ZFcxbElpd2lYM05qYUdWdFlTSXNJbUYxZEdodmNtbHpaU0lzSW1SbGJHVjBaVTF6WnlJc0lsOXlaWEJ2Y25SbGNuTWlMQ0pmYjI1VGRXSnpZM0pwY0hScGIyNUlZVzVrYkdWeUlpd2lYMjl1VW1WemNHOXVjMlZJWVc1a2JHVnlJaXdpWDI5dVVtVmhaRWhoYm1Sc1pYSWlMQ0pmYjI1VGRXSnpZM0pwWW1VaUxDSmZiMjVWYmxOMVluTmpjbWxpWlNJc0ltaDVjR1Z5ZEhsVmNtd2lMQ0poWTJObGNIUWlMQ0p6ZFdJaUxDSnpkR0YwZFhNaUxDSmphR2xzWkhKbGJsWmhiSFZsY3lJc0luTmxibVJOYzJjaUxDSnBaQ0lzSW5abGNuTnBiMjRpTENKb1lYTlBkMjVRY205d1pYSjBlU0lzSW0xMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUlpd2lYMjExZEhWaGJFRjFkR2hsYm5ScFkyRjBhVzl1SWl3aWNtVnFaV04wSWl3aWNtVmhjMjl1SWl3aVpHVnpZeUlzSWtSaGRHRlBZbXBsWTNRaUxDSmZjM1JoZEhWeklpd2lYMk5vYVd4a2NtVnVjeUlzSWw5amFHbHNaRWxrSWl3aVgyTm9hV3hrY21WdVRHbHpkR1Z1WlhKeklpd2lZMmhwYkdSQ1lYTmxWVkpNSWl3aVkyaHBiR1FpTENKamFHbHNaRlZTVENJc0lteHBjM1JsYm1WeUlpd2lYMjl1UTJocGJHUkRjbVZoZEdVaUxDSmZZMmhoYm1kbFEyaHBiR1J5Wlc0aUxDSndkWE5vSWl3aVkyaHBiR1J5Wlc0aUxDSnRjMmREYUdsc1pFbGtJaXdpYlhOblEyaHBiR1JRWVhSb0lpd2ljbVZ4ZFdWemRFMXpaeUlzSW5KbGMyOXNkbVVpTENKdGMyZEpaQ0lzSW01bGQwTm9hV3hrSWl3aWIyNURhR0Z1WjJVaUxDSndZWFJvSWl3aVgyOXVRV1JrUTJocGJHUnlaVzVJWVc1a2JHVnlJaXdpYzJWMFZHbHRaVzkxZENJc0luTnZkWEpqWlNJc0ltTm9hV3hrU1c1bWJ5SXNJbU5vWVc1blpVMXpaeUlzSW1GMGRISnBZblYwWlNJc0ltOVVlWEJsSWl3aVQwSktSVU5VSWl3aVkxUjVjR1VpTENKU1JVMVBWa1VpTENKaGRIUnlhV0oxZEdWVWVYQmxJaXdpVlZCRVFWUkZJaXdpYjNCbGNtRjBhVzl1SWl3aWMzbHVZMDlpYWlJc0ltWnBibVJTWlhOMWJIUWlMQ0ptYVc1a1FtVm1iM0psSWl3aVFWSlNRVmtpTENKQlJFUWlMQ0poY25JaUxDSnBibVJsZUNJc0lteGhjM1FpTENKQmNuSmhlU0lzSW5CeWIzUnZkSGx3WlNJc0luTndiR2xqWlNJc0ltRndjR3g1SWl3aVkyOXVZMkYwSWl3aVJHRjBZVTlpYW1WamRFTm9hV3hrSWl3aWNHRnlaVzUwSWl3aWIzZHVaWElpTENKZmNHRnlaVzUwSWl3aVgyMXpaMGxrSWl3aVgyeHBjM1JsYm1WeUlpd2lYMk5vYVd4a2NtVnVJaXdpYjJKcVpXTjBWSGx3WlNJc0lsTjVibU5QWW1wbFkzUWlMQ0pmWkdGMFlTSXNJbDlwYm5SbGNtNWhiRTlpYzJWeWRtVWlMQ0pzYVhOMElpd2lYMlpwYm1SWGFYUm9VM0JzYVhRaUxDSndiM0FpTENKamIyNXpkSEoxWTNSdmNpSXNJazlpYW1WamRDSXNJbWhoYm1Sc1pYSWlMQ0pqYUdGdVoyVnpaWFFpTENKbGRtVnllU0lzSW1Ob1lXNW5aU0lzSWw5dmJrTm9ZVzVuWlhNaUxDSmtaV1Z3VDJKelpYSjJaU0lzSW05aWFsUjVjR1VpTENKUFltcGxZM1JVZVhCbElpd2labWxsYkdSVGRISnBibWNpTENKclpYbHdZWFJvSWl3aWJtVjNWbUZzZFdVaUxDSnVZVzFsSWl3aWFXNW1ieUlzSWw5bWFYSmxSWFpsYm5RaUxDSkRhR0Z1WjJWVWVYQmxJaXdpVTNsdVkyaGxjaUlzSW1KMWN5SXNJbU52Ym1acFp5SXNJbkoxYm5ScGJXVlZVa3dpTENKZmNISnZkbWx6YVc5dVlXeHpJaXdpWDI5dVJtOXlkMkZ5WkNJc0lsOXZibEpsYlc5MFpVTnlaV0YwWlNJc0lsOXZibEpsYlc5MFpVUmxiR1YwWlNJc0luTjBiM0psSWl3aWNESndJaXdpWTNKcGRHVnlhV0VpTENKZlkzSmxZWFJsSWl3aWIySnFWVkpNSWl3aVgzTjFZbk5qY21saVpTSXNJbDlqY21sMFpYSnBZU0lzSW5KbFlXUk5jMmNpTENKZmIyNU9iM1JwWm1sallYUnBiMjVJWVc1a2JHVnlJaXdpY21Wd2IzSjBaWElpTENKdVpYZFBZbW9pTENKamFHbHNaSEpsYmxKbGMyOTFjbU5sY3lJc0luTjFZbk5qY21saVpVMXpaeUlzSW01bGQxQnliM1pwYzJsdmJtRnNJaXdpYzJ4cFkyVWlMQ0poWTJzaUxDSnNWSGx3WlNJc0ltUmxiR1YwWlNJc0lrUmhkR0ZRY205MmFYTnBiMjVoYkNJc0lsOWphR0Z1WjJWeklpd2liMkp6WlhKMlpYSWlYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN3eVFrRkJNa0k3UVVGRE0wSXNRMEZCUXp0QlFVTkVMRTg3UVVOV1FUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPenM3UVVGSFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN08wRkJSVUU3UVVGRFFTeHRSRUZCTWtNc1kwRkJZenM3UVVGRmVrUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeGhRVUZMTzBGQlEwdzdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHRRMEZCTWtJc01FSkJRVEJDTEVWQlFVVTdRVUZEZGtRc2VVTkJRV2xETEdWQlFXVTdRVUZEYUVRN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNPRVJCUVhORUxDdEVRVUVyUkRzN1FVRkZja2c3UVVGRFFUczdRVUZGUVR0QlFVTkJPenM3T3pzN08wRkRhRVZCTERaQ1FVRTJRanRCUVVNM1FpeHhRMEZCY1VNc1owTTdPenM3T3p0QlEwUnlRenRCUVVOQk8wRkJRMEU3UVVGRFFTeDFRMEZCZFVNc1owTTdPenM3T3p0QlEwaDJRenRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFTeDFRanM3T3pzN08wRkRWa0U3UVVGRFFUdEJRVU5CTEdsRFFVRnBReXhSUVVGUkxHZENRVUZuUWl4VlFVRlZMRWRCUVVjN1FVRkRkRVVzUTBGQlF5eEZPenM3T3pzN1FVTklSRHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITEZWQlFWVTdRVUZEWWp0QlFVTkJPMEZCUTBFN1FVRkRRU3hGT3pzN096czdRVU5tUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3UVVOUVFUdEJRVU5CTzBGQlEwRXNSVHM3T3pzN08wRkRSa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRzFGUVVGdFJUdEJRVU51UlR0QlFVTkJMSEZHUVVGeFJqdEJRVU55Ump0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1YwRkJWenRCUVVOWUxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEVzSzBOQlFTdERPMEZCUXk5RE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR05CUVdNN1FVRkRaQ3hqUVVGak8wRkJRMlFzWTBGQll6dEJRVU5rTEdOQlFXTTdRVUZEWkN4bFFVRmxPMEZCUTJZc1pVRkJaVHRCUVVObUxHVkJRV1U3UVVGRFppeG5Ra0ZCWjBJN1FVRkRhRUlzZVVJN096czdPenM3UVVNMVJFRTdPMEZCUlVFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3TzBGRFVrRTdPMEZCUlVFN08wRkJSVUU3TzBGQlJVRTdPMEZCUlVFc2MwTkJRWE5ETEhWRFFVRjFReXhuUWtGQlowSTdPMEZCUlRkR08wRkJRMEU3UVVGRFFTeHRRa0ZCYlVJc2EwSkJRV3RDTzBGQlEzSkRPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZETEVjN096czdPenRCUXpGQ1JEdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlEwNUJMSFZDUVVGMVFqdEJRVU4yUWp0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRFNFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlEweEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRGJrSkJMRzlDT3pzN096czdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVVN096czdPenRCUTFCQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRFRrRXNhVUpCUVdsQ096dEJRVVZxUWp0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlRzN096czdPMEZEVGtFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlRzN096czdPMEZEU0VFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRXNhMFZCUVd0RkxDdENRVUVyUWp0QlFVTnFSeXhGT3pzN096czdRVU5PUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRFdFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGT3pzN096czdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlEwcEJMSE5DT3pzN096czdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlEwcEJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEZPenM3T3pzN1FVTk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFTeGhPenM3T3pzN1FVTklRVHRCUVVOQkxIRkZRVUZ6UlN4blFrRkJaMElzVlVGQlZTeEhRVUZITzBGQlEyNUhMRU5CUVVNc1JUczdPenM3TzBGRFJrUTdRVUZEUVR0QlFVTkJMRzFFUVVGdFJEdEJRVU51UkR0QlFVTkJMSFZEUVVGMVF6dEJRVU4yUXl4Rk96czdPenM3UVVOTVFTeHJRa0ZCYTBJc2QwUTdPenM3T3p0QlEwRnNRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVVN096czdPenM3UVVOS1FUczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRU3h6UTBGQmMwTXNkVU5CUVhWRExHZENRVUZuUWpzN1FVRkZOMFk3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRU3hGT3pzN096czdPMEZEYUVOQk96dEJRVVZCT3p0QlFVVkJPenRCUVVWQk96dEJRVVZCTEhORFFVRnpReXgxUTBGQmRVTXNaMEpCUVdkQ096dEJRVVUzUmp0QlFVTkJPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTEVVN096czdPenRCUTJoQ1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc05rSkJRVFpDTzBGQlF6ZENPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzTmtKQlFUWkNPMEZCUXpkQ08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVRzN096czdPenRCUTNoRFFTeHJRa0ZCYTBJc2QwUTdPenM3T3p0QlEwRnNRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVVN096czdPenM3UVVOS1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzTkVKQlFUUkNMR0ZCUVdFN08wRkJSWHBETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3gzUTBGQmQwTXNiME5CUVc5RE8wRkJRelZGTERSRFFVRTBReXh2UTBGQmIwTTdRVUZEYUVZc1MwRkJTeXd5UWtGQk1rSXNiME5CUVc5RE8wRkJRM0JGTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4blFrRkJaMElzYlVKQlFXMUNPMEZCUTI1RE8wRkJRMEU3UVVGRFFTeHBRMEZCYVVNc01rSkJRVEpDTzBGQlF6VkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFN1FVRkRRU3hGT3pzN096czdRVU55UlVFN1FVRkRRVHRCUVVOQkxHOUZRVUYxUlN4NVEwRkJNRU1zUlRzN096czdPMEZEUm1wSUxHdENRVUZyUWl4M1JEczdPenM3TzBGRFFXeENMR05CUVdNc2MwSTdPenM3T3p0QlEwRmtMRFpGT3pzN096czdRVU5CUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGdzUlRzN096czdPMEZEV2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRMmhDUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzT0VKQlFUaENPMEZCUXpsQ08wRkJRMEU3UVVGRFFTeHRSRUZCYlVRc1QwRkJUeXhGUVVGRk8wRkJRelZFTEVVN096czdPenRCUTFSQkxIZERPenM3T3pzN1FVTkJRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTERKRVFVRXlSRHRCUVVNelJDeEZPenM3T3pzN1FVTk1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN3d1JFRkJNRVFzYzBKQlFYTkNPMEZCUTJoR0xHZEdRVUZuUml4elFrRkJjMEk3UVVGRGRFY3NSVHM3T3pzN08wRkRVa0VzYlVNN096czdPenM3UVVOQlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3cyUWtGQk5rSTdRVUZETjBJc1kwRkJZenRCUVVOa08wRkJRMEVzUTBGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTkJMQ3RDUVVFclFqdEJRVU12UWp0QlFVTkJPMEZCUTBFc1ZVRkJWVHRCUVVOV0xFTkJRVU1zUlRzN096czdPMEZEYUVKRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFc2QwZEJRWGRITEU5QlFVODdRVUZETDBjN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVNN096czdPenM3UVVOYVFUdEJRVU5CTEhWRFFVRjFReXd3UWtGQk1FSTdRVUZEYWtVc2QwTkJRWGRETzBGQlEzaERPMEZCUTBFc1JUczdPenM3T3pzN096czdPMEZEU2tFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDVRa0ZCZVVJc2EwSkJRV3RDTEVWQlFVVTdPMEZCUlRkRE8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnl4VlFVRlZPMEZCUTJJN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUlRzN096czdPMEZEZEVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVHM3T3pzN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjc1ZVRkJWVHRCUVVOaU8wRkJRMEVzUlRzN096czdPMEZEWmtFc2VVTTdPenM3T3pzN1FVTkJRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRVHM3UVVGRlFUczdRVUZGUVRzN1FVRkZRU3hwU0VGQmFVZ3NiVUpCUVcxQ0xFVkJRVVVzYlVKQlFXMUNMRFJLUVVFMFNqczdRVUZGY2xRc2MwTkJRWE5ETEhWRFFVRjFReXhuUWtGQlowSTdPMEZCUlRkR08wRkJRMEU3UVVGRFFTeERRVUZETzBGQlEwUTdRVUZEUVN4Rk96czdPenM3UVVOd1FrRXNORUpCUVRSQ0xHVTdPenM3T3p0QlEwRTFRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRXRCUVVzc1YwRkJWeXhsUVVGbE8wRkJReTlDTzBGQlEwRXNTMEZCU3p0QlFVTk1PMEZCUTBFc1JUczdPenM3T3p0QlEzQkNRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc2VVWkJRV2RHTEdGQlFXRXNSVUZCUlRzN1FVRkZMMFk3UVVGRFFTeHhSRUZCY1VRc01FSkJRVEJDTzBGQlF5OUZPMEZCUTBFc1JUczdPenM3TzBGRFdrRTdRVUZEUVN4VlFVRlZPMEZCUTFZc1JUczdPenM3TzBGRFJrRTdRVUZEUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGT3pzN096czdRVU5hUVR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTEVVN096czdPenRCUTA1Qk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRGFFSkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVVN096czdPenRCUXpGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGT3pzN096czdPMEZEVGtFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWjBOQlFXZERPMEZCUTJoRExHTkJRV003UVVGRFpDeHBRa0ZCYVVJN1FVRkRha0k3UVVGRFFTeERRVUZETzBGQlEwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRPenRCUVVWRU8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRFJDT3pzN096czdRVU5xUTBFc2EwSkJRV3RDTEhkRU96czdPenM3UVVOQmJFSXNhMEpCUVd0Q0xIZEVPenM3T3pzN1FVTkJiRUk3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYVVSQlFXbEVPMEZCUTJwRUxFTkJRVU03UVVGRFJEdEJRVU5CTEhGQ1FVRnhRanRCUVVOeVFqdEJRVU5CTEZOQlFWTTdRVUZEVkN4SlFVRkpPMEZCUTBvN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlEzQkVRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRVU3T3pzN096dEJRMUJCTEd0Q1FVRnJRaXgzUkRzN096czdPMEZEUVd4Q0xHdENRVUZyUWl4M1JEczdPenM3TzBGRFFXeENMR3RDUVVGclFpeDNSRHM3T3pzN08wRkRRV3hDTEd0Q1FVRnJRaXgzUkRzN096czdPMEZEUVd4Q08wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSVHM3T3pzN08wRkRTa0U3UVVGRFFTdzRSRHM3T3pzN08wRkRSRUU3UVVGRFFTeHZSRHM3T3pzN08wRkRSRUU3UVVGRFFTdzRSRHM3T3pzN08wRkRSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4blJEczdPenM3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3dyUXpzN096czdPMEZEU2tFN1FVRkRRVHRCUVVOQkxIVkVPenM3T3pzN1FVTkdRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZ3NSVHM3T3pzN08wRkRTa0U3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnc1JUczdPenM3TzBGRFpFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNjVU5CUVhGRExHbENRVUZwUWl4RlFVRkZPMEZCUTNoRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4blJVRkJaMFVzWjBKQlFXZENPMEZCUTJoR08wRkJRMEU3UVVGRFFTeEhRVUZITERKRFFVRXlReXhuUTBGQlowTTdRVUZET1VVN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhkQ096czdPenM3UVVONFFrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFZEJRVWM3UVVGRFNDeEZPenM3T3pzN1FVTm1RVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1JUczdPenM3TzBGRFVFRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGT3pzN096czdRVU5LUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hGT3pzN096czdRVU5ZUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFTd3JRa0ZCSzBJc2NVSkJRWEZDTzBGQlEzQkVMQ3RDUVVFclFpeFRRVUZUTEVWQlFVVTdRVUZETVVNc1EwRkJReXhWUVVGVk96dEJRVVZZTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxESkNRVUV5UWl4VFFVRlRMRzFDUVVGdFFqdEJRVU4yUkN3clFrRkJLMElzWVVGQllUdEJRVU0xUXp0QlFVTkJMRWRCUVVjc1ZVRkJWVHRCUVVOaU8wRkJRMEVzUlRzN096czdPMEZEY0VKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlExUkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4TFFVRkxPMEZCUTB3N1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTEhWRFFVRjFReXh2UWtGQmIwSXNSVUZCUlR0QlFVTTNSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1owSkJRV2RDTzBGQlEyaENPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUzBGQlN6dEJRVU5NTzBGQlEwRXNSVHM3T3pzN08wRkRia1ZCTzBGQlEwRTdRVUZEUVR0QlFVTkJMR3RDUVVGclFqczdRVUZGYkVJN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SFFVRkhPMEZCUTBnN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVRzN096czdPenRCUTJ4Q1FUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSUxFVTdPenM3T3p0QlEwNUJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR3RFUVVGclJEdEJRVU5zUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzVDBGQlR5eFZRVUZWTEdOQlFXTTdRVUZETDBJN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTMEZCU3l4SFFVRkhPMEZCUTFJN1FVRkRRU3hGT3pzN096czdPMEZEZUVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEc5Q1FVRnZRaXhoUVVGaE8wRkJRMnBETEVkQlFVYzdRVUZEU0N4Rk96czdPenM3UVVOaVFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFVTdPenM3T3p0QlExQkJPMEZCUTBFN1FVRkRRU3c0UWtGQk9FSXNaME5CUVc5RExFVTdPenM3T3p0QlEwWnNSVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRExFVTdPenM3T3p0QlExSkVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRU5CUVVNc1JUczdPenM3TzBGRFVrUTdRVUZEUVR0QlFVTkJMRGhDUVVFNFFpdzBRMEZCTkVNc1JUczdPenM3T3p0QlEwWXhSVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHOURRVUZ2UXp0QlFVTndRenM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMQ3REUVVFclF5eHpSRUZCYVVRc2IwSkJRVzlDTzBGQlEzQklPMEZCUTBFN1FVRkRRU3hIUVVGSExGVkJRVlU3UVVGRFlpeERRVUZET3p0QlFVVkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSUxGbEJRVms3UVVGRFdqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4WFFVRlhPMEZCUTFnN1FVRkRRU3hYUVVGWE8wRkJRMWdzVTBGQlV6dEJRVU5VTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRU3d5UTBGQk1rTTdRVUZETTBNN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdRVUZEVkN4dFFrRkJiVUlzWjBOQlFXZERPMEZCUTI1RUxGTkJRVk03UVVGRFZEdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFPMEZCUTBFN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNSMEZCUnp0QlFVTklPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVEN4bFFVRmxMSEZEUVVGeFF6dEJRVU53UkR0QlFVTkJMRWRCUVVjN1FVRkRTRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNhME5CUVd0RE8wRkJRMnhETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNhME5CUVd0RE8wRkJRMnhETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc2RVSkJRWFZDTEhkQ1FVRjNRanRCUVVNdlF6dEJRVU5CTzBGQlEwRXNVMEZCVXp0QlFVTlVPMEZCUTBFN1FVRkRRU3hQUVVGUE8wRkJRMUFzUzBGQlN6dEJRVU5NTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSUxHdENRVUZyUWl4MVFrRkJkVUlzUzBGQlN6dEJRVU01UXp0QlFVTkJPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMR2xDUVVGcFFqdEJRVU5xUWl4M1FrRkJkMEk3UVVGRGVFSXNaMEpCUVdkQ08wRkJRMmhDTEc5Q1FVRnZRanRCUVVOd1FpeDNRa0ZCZDBJN1FVRkRlRUlzWjBKQlFXZENPMEZCUTJoQ0xHOUNRVUZ2UWp0QlFVTndRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeExRVUZMTzBGQlEwdzdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzTUVSQlFUQkVMR3RDUVVGclFqdEJRVU0xUlR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6dEJRVU5FTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRU3hEUVVGRE8wRkJRMFE3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZOQlFWTTdRVUZEVkN4UFFVRlBPMEZCUTFBN1FVRkRRU3hMUVVGTE8wRkJRMHc3UVVGRFFUdEJRVU5CTEVkQlFVYzdRVUZEU0R0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNUMEZCVHp0QlFVTlFMRXRCUVVzN1FVRkRURHRCUVVOQk8wRkJRMEU3UVVGRFFTeERRVUZETEVVN096czdPenM3UVVNeFUwUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkVUpCUVhWQ08wRkJRM1pDTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMSE5DUVVGelFqdEJRVU4wUWl4dlFrRkJiMElzZFVKQlFYVkNMRk5CUVZNc1NVRkJTVHRCUVVONFJDeEhRVUZITzBGQlEwZ3NRMEZCUXp0QlFVTkVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUTBGQlF6czdRVUZGUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVN4RFFVRkRPMEZCUTBRN1FVRkRRVHM3UVVGRlFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIbEVRVUY1UkR0QlFVTjZSRHRCUVVOQkxFdEJRVXM3UVVGRFREdEJRVU5CTEhOQ1FVRnpRaXhwUTBGQmFVTTdRVUZEZGtRc1MwRkJTenRCUVVOTUxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hIUVVGSE8wRkJRMGc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc09FUkJRVGhFTERoQ1FVRTRRanRCUVVNMVJqdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMRWRCUVVjN08wRkJSVWc3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN08wRkJSVUVzTUVSQlFUQkVMR2RDUVVGblFqczdRVUZGTVVVN1FVRkRRVHRCUVVOQk8wRkJRMEVzYjBKQlFXOUNMRzlDUVVGdlFqczdRVUZGZUVNc01FTkJRVEJETEc5Q1FVRnZRanM3UVVGRk9VUTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzUjBGQlJ6dEJRVU5JTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1IwRkJSenRCUVVOSUxIZENRVUYzUWl4bFFVRmxMRVZCUVVVN1FVRkRla01zZDBKQlFYZENMR2RDUVVGblFqdEJRVU40UXl4RFFVRkRPenRCUVVWRU8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNRMEZCUXpzN1FVRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4dlJFRkJiMFFzUzBGQlN5eFJRVUZSTEdsRFFVRnBRenRCUVVOc1J5eERRVUZETzBGQlEwUTdRVUZEUVN3clEwRkJLME03UVVGREwwTTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hEUVVGRE96dEJRVVZFTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzTUVNN096czdPenRCUXpGUFFTeDVRenM3T3pzN08wRkRRVUVzYzBNN096czdPenM3T3pzN096czdPenM3T3pzN096czdVVU4zUTJkQ1FTeFRMRWRCUVVGQkxGTTdVVUZyUkVGRExGY3NSMEZCUVVFc1Z6dFJRV2RDUVVNc1Z5eEhRVUZCUVN4WE8xRkJVMEZETEZNc1IwRkJRVUVzVXp0UlFWVkJReXh0UWl4SFFVRkJRU3h0UWp0UlFWVkJReXh0UWl4SFFVRkJRU3h0UWp0UlFWZEJReXhuUWl4SFFVRkJRU3huUWpzN096dEJRV3hLYUVJN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUZ6UWtFN096czdPMEZCUzBFN096czdPenM3TzBGQlVVRTdPenM3TzBGQlMwOHNVMEZCVTA0c1UwRkJWQ3hEUVVGdFFrOHNSMEZCYmtJc1JVRkJkMEk3TzBGQlJUZENMRTFCUVVrc1EwRkJRMEVzUjBGQlRDeEZRVUZWTEUxQlFVMURMRTFCUVUwc2QwSkJRVTRzUTBGQlRqczdRVUZGV0N4WFFVRlRReXhQUVVGVUxFTkJRV2xDUXl4TFFVRnFRaXhGUVVGM1FqdEJRVU4yUWl4UlFVRk5ReXhSUVVGUkxEQkdRVUZrTzBGQlEwVXNVVUZCVFVNc1VVRkJVU3hWUVVGa08wRkJRMFFzVVVGQlNVTXNVVUZCVVVnc1RVRkJUVWtzVDBGQlRpeERRVUZqU0N4TFFVRmtMRVZCUVhGQ1F5eExRVUZ5UWl4RlFVRTBRa2NzUzBGQk5VSXNRMEZCYTBNc1IwRkJiRU1zUTBGQldqdEJRVU5FTEZkQlFVOUdMRXRCUVZBN1FVRkRRVHM3UVVGRlJDeE5RVUZKUVN4UlFVRlJTaXhSUVVGUlJpeEhRVUZTTEVOQlFWbzdPMEZCUlVNN1FVRkRRU3hOUVVGSlRTeE5RVUZOTEVOQlFVNHNUVUZCWVU0c1IwRkJZaXhKUVVGdlFpeERRVUZEVFN4TlFVRk5MRU5CUVU0c1JVRkJVMGNzVVVGQlZDeERRVUZyUWl4SFFVRnNRaXhEUVVGNlFpeEZRVUZwUkRzN1FVRkZMME1zVVVGQlNVTXNWVUZCVXp0QlFVTllReXhaUVVGTkxFVkJSRXM3UVVGRldFTXNZMEZCVVZvc1IwRkdSenRCUVVkWVlTeG5Ra0ZCVlR0QlFVaERMRXRCUVdJN08wRkJUVUZETEZsQlFWRkRMRXRCUVZJc1EwRkJZeXg1UmtGQlpDeEZRVUY1UjJZc1IwRkJla2M3TzBGQlJVRXNWMEZCVDFVc1QwRkJVRHRCUVVORU96dEJRVVZHTzBGQlEwRXNUVUZCU1Vvc1RVRkJUU3hEUVVGT0xFMUJRV0ZPTEVkQlFXSXNTVUZCYjBKTkxFMUJRVTBzUTBGQlRpeEZRVUZUUnl4UlFVRlVMRU5CUVd0Q0xFZEJRV3hDTEVOQlFYaENMRVZCUVdkRU8wRkJReTlETEZGQlFVbFBMRk5CUVZOV0xFMUJRVTBzUTBGQlRpeE5RVUZoVGl4SFFVRmlMRWRCUVcxQ0xFMUJRVzVDTEVkQlFUUkNUU3hOUVVGTkxFTkJRVTRzUTBGQmVrTTdRVUZEUVVFc1dVRkJVVW9zVVVGQlVXTXNVMEZCVXl4TFFVRlVMRWRCUVdsQ1ZpeE5RVUZOTEVOQlFVNHNRMEZCZWtJc1EwRkJVanRCUVVOQk96dEJRVVZFTzBGQlEwRXNUVUZCU1VFc1RVRkJUU3hEUVVGT0xFVkJRVk5ITEZGQlFWUXNRMEZCYTBJc1IwRkJiRUlzUTBGQlNpeEZRVUUwUWp0QlFVTXpRa2dzVlVGQlRTeERRVUZPTEVsQlFWZEJMRTFCUVUwc1EwRkJUaXhKUVVGWExFdEJRVmdzUjBGQmJVSkJMRTFCUVUwc1EwRkJUaXhEUVVFNVFqdEJRVU5CUVN4VlFVRk5MRU5CUVU0c1NVRkJWMEVzVFVGQlRTeERRVUZPTEVWQlFWTlhMRTFCUVZRc1EwRkJaMEpZTEUxQlFVMHNRMEZCVGl4RlFVRlRXU3hQUVVGVUxFTkJRV2xDTEVkQlFXcENMRWxCUVhkQ0xFTkJRWGhETEVOQlFWZzdRVUZEUnl4SFFYSkRNRUlzUTBGeFEzaENPenM3TzBGQlNVd3NUVUZCU1ZJc1UwRkJVenRCUVVOWVF5eFZRVUZOVEN4TlFVRk5MRU5CUVU0c1EwRkVTenRCUVVWWVRTeFpRVUZSVGl4TlFVRk5MRU5CUVU0c1EwRkdSenRCUVVkWVR5eGpRVUZWVUN4TlFVRk5MRU5CUVU0N1FVRklReXhIUVVGaU96dEJRVTFCTEZOQlFVOUpMRTFCUVZBN1FVRkRSRHM3UVVGRlRTeFRRVUZUYUVJc1YwRkJWQ3hEUVVGeFFubENMRXRCUVhKQ0xFVkJRVFJDTzBGQlEycERMRTFCUVVsRExGbEJRVmxFTEUxQlFVMUVMRTlCUVU0c1EwRkJZeXhIUVVGa0xFTkJRV2hDT3p0QlFVVkJMRTFCUVVsU0xGTkJRVk03UVVGRFdGY3NZMEZCVlVZc1RVRkJUVWNzVTBGQlRpeERRVUZuUWl4RFFVRm9RaXhGUVVGdFFrWXNVMEZCYmtJc1EwRkVRenRCUVVWWVVpeFpRVUZSVHl4TlFVRk5SeXhUUVVGT0xFTkJRV2RDUml4WlFVRlpMRU5CUVRWQ0xFVkJRU3RDUkN4TlFVRk5TU3hOUVVGeVF6dEJRVVpITEVkQlFXSTdPMEZCUzBFc1UwRkJUMklzVFVGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3p0QlFVdFBMRk5CUVZObUxGZEJRVlFzUTBGQmNVSTJRaXhOUVVGeVFpeEZRVUUyUWp0QlFVTnNReXhUUVVGUExHOUNRVUZaUVN4TlFVRmFMRVZCUVc5Q1JDeE5RVUZ3UWl4SFFVRTJRaXhEUVVFM1FpeEhRVUZwUXl4TFFVRnFReXhIUVVGNVF5eEpRVUZvUkR0QlFVTkVPenRCUVVWRU96czdPenRCUVV0UExGTkJRVk16UWl4VFFVRlVMRU5CUVcxQ05rSXNSMEZCYmtJc1JVRkJkMEk3UVVGRE4wSTdRVUZEUVN4TlFVRkpRU3hIUVVGS0xFVkJRVk1zVDBGQlQwTXNTMEZCUzBNc1MwRkJUQ3hEUVVGWExIbENRVUZsUml4SFFVRm1MRU5CUVZnc1EwRkJVRHRCUVVOV096dEJRVVZFT3pzN096dEJRVXRQTEZOQlFWTTFRaXh0UWtGQlZDeERRVUUyUWl0Q0xGTkJRVGRDTEVWQlFYZERPMEZCUXpkRExFMUJRVWxTTEZsQlFWbFJMRlZCUVZWV0xFOUJRVllzUTBGQmEwSXNSMEZCYkVJc1EwRkJhRUk3UVVGRFFTeFRRVUZQTEZsQlFWbFZMRlZCUVZWT0xGTkJRVllzUTBGQmIwSkdMRmxCUVZrc1EwRkJhRU1zUlVGQmJVTlJMRlZCUVZWTUxFMUJRVGRETEVOQlFWb3NSMEZCYlVVc1IwRkJia1VzUjBGQmVVVkxMRlZCUVZWT0xGTkJRVllzUTBGQmIwSXNRMEZCY0VJc1JVRkJkVUpHTEZOQlFYWkNMRU5CUVdoR08wRkJRMFE3TzBGQlJVUTdPenM3TzBGQlMwOHNVMEZCVTNSQ0xHMUNRVUZVTEVOQlFUWkNLMElzVDBGQk4wSXNSVUZCYzBNN1FVRkRNME1zVFVGQlNUZENMRTFCUVUxUUxGVkJRVlZ2UXl4UFFVRldMRU5CUVZZN1FVRkRRU3hUUVVGUE4wSXNTVUZCU1dFc1VVRkJTaXhEUVVGaFRpeFBRVUZpTEVOQlFYRkNMRWRCUVhKQ0xFVkJRVEJDTEVWQlFURkNMRWxCUVdkRExFZEJRV2hETEVkQlFYTkRVQ3hKUVVGSldTeE5RVUZxUkN4RFFVWXlReXhEUVVWak8wRkJRekZFT3p0QlFVZEVPenM3T3p0QlFVdFBMRk5CUVZOaUxHZENRVUZVTEVOQlFUQkNLMElzVlVGQk1VSXNSVUZCYzBNN08wRkJSVE5ETzBGQlEwRXNUVUZCU1VFc1YwRkJWMUlzVTBGQldDeERRVUZ4UWl4RFFVRnlRaXhGUVVGM1FpeERRVUY0UWl4TlFVRXJRaXhUUVVGdVF5eEZRVUU0UXp0QlFVTTFReXhSUVVGSlV5eGhRVUZoZEVNc1ZVRkJWWEZETEZWQlFWWXNRMEZCYWtJN08wRkJSVUU3UVVGRFFTeFJRVUZKUXl4WFFVRlhia0lzVFVGQldDeEpRVUZ4UW0xQ0xGZEJRVmRzUWl4UlFVRndReXhGUVVFNFF6dEJRVU0xUXl4aFFVRlBhVUlzVlVGQlVEdEJRVU5FTEV0QlJrUXNUVUZGVHp0QlFVTk1MRmxCUVUwc01rSkJRVTQ3UVVGRFJEczdRVUZGU0R0QlFVTkRMRWRCV0VRc1RVRlhUenRCUVVOTUxGZEJRVTlxUXl4dlFrRkJiMEpwUXl4VlFVRndRaXhEUVVGUU8wRkJRMFE3UVVGRFJpeERPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE5VbEVPenM3TzBGQlEwRTdPenM3T3p0QlFYaENRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRXdRa0VzU1VGQlNVVXNZVUZCWVN4RlFVRkRReXhMUVVGTExFdEJRVTRzUlVGQllVTXNUMEZCVHl4UFFVRndRaXhGUVVFMlFrTXNUMEZCVHl4UFFVRndReXhGUVVGcVFqczdRVUZGUVRzN096czdTVUZKVFVNc2EwSTdPenRCUVVOS096czdPenM3UVVGUFFUczdPenRCUVVsQkxEaENRVUZaUXl4UFFVRmFMRVZCUVhGQ2NrTXNSMEZCY2tJc1JVRkJNRUp6UXl4TlFVRXhRaXhGUVVGclEwTXNZVUZCYkVNc1JVRkJhVVJETEZkQlFXcEVMRVZCUVRoRVF5eFRRVUU1UkN4RlFVRjVSVU1zWTBGQmVrVXNSVUZCZVVaRExFMUJRWHBHTEVWQlFXbEhPMEZCUVVFN08wRkJRVUVzSzBwQlEzcEdUaXhQUVVSNVJpeEZRVU5vUm5KRExFZEJSR2RHTEVWQlF6TkZjME1zVFVGRU1rVXNSVUZEYmtWRExHRkJSRzFGTEVWQlEzQkVReXhaUVVGWlNTeEpRVVIzUXl4RlFVTnNRMGdzVTBGRWEwTXNSVUZEZGtKRkxFMUJSSFZDT3p0QlFVVXZSaXhSUVVGSlJTeGpRVUZLT3p0QlFVVkJRU3hWUVVGTlF5eFJRVUZPTEVkQlFXbENTaXhqUVVGcVFqdEJRVU5CUnl4VlFVRk5SU3hSUVVGT0xFZEJRV2xDTEVWQlFXcENPenRCUVVWQlJpeFZRVUZOUnl4UlFVRk9MRU5CUVdWRExFOUJRV1lzUTBGQmRVSXNWVUZCUTBNc1MwRkJSQ3hGUVVGWE8wRkJRMmhEVEN4WlFVRk5UU3hUUVVGT0xFTkJRV2RDUkN4TFFVRm9RanRCUVVORUxFdEJSa1E3TzBGQlNVRTdRVUZEUVN4M1FrRkJXVllzV1VGQldVTXNVMEZCZUVJc1JVRkJiVU5YTEU5QlFXNURMRU5CUVRKRExGVkJRVU5ETEU5QlFVUXNSVUZCWVR0QlFVTjBSQ3hWUVVGSlF5eFpRVUZaWkN4WlFVRlpReXhUUVVGYUxFTkJRWE5DV1N4UFFVRjBRaXhEUVVGb1FqdEJRVU5CVWl4WlFVRk5WU3huUWtGQlRpeERRVUYxUWtZc1QwRkJka0lzU1VGQmEwTXNPRUpCUVc5Q1VpeExRVUZ3UWl4RlFVRXlRbEVzVDBGQk0wSXNSVUZCYjBORExGTkJRWEJETEVOQlFXeERPMEZCUTBRc1MwRklSRHM3UVVGTFFWUXNWVUZCVFZjc2EwSkJRVTQ3UVVGcVFpdEdPMEZCYTBKb1J6czdPenQ1UTBGRmIwSTdRVUZEYmtJN1FVRkRRU3hWUVVGSldDeFJRVUZSTEVsQlFWbzdPMEZCUlVGQkxGbEJRVTFaTEdWQlFVNHNSMEZCZDBKYUxFMUJRVTFoTEVsQlFVNHNRMEZCVjBNc1YwRkJXQ3hEUVVGMVFtUXNUVUZCVFdVc1NVRkJUaXhIUVVGaExGVkJRWEJETEVWQlFXZEVMRlZCUVVORExFZEJRVVFzUlVGQlV6dEJRVU12UlN4WlFVRkpRU3hKUVVGSmJFUXNTVUZCU2l4TFFVRmhMRkZCUVdwQ0xFVkJRVEpDTzBGQlEzcENSeXhyUWtGQlVXZEVMRWRCUVZJc1EwRkJXU3gzUWtGQmQwSnFRaXhOUVVGTlpTeEpRVUU1UWl4SFFVRnhReXhSUVVGcVJDeEZRVUV5UkVNc1IwRkJNMFE3UVVGRFFXaENMR2RDUVVGTmEwSXNZVUZCVGl4RFFVRnZRbXhDTEUxQlFVMUhMRkZCUVRGQ0xFVkJRVzlEWVN4SFFVRndRenRCUVVORU8wRkJRMFlzVDBGTWRVSXNRMEZCZUVJN1FVRk5SRHM3TzNkRFFVVnRRanRCUVVOc1FqdEJRVU5CTEZWQlFVbG9RaXhSUVVGUkxFbEJRVm83TzBGQlJVRkJMRmxCUVUxWkxHVkJRVTRzUTBGQmMwSlBMRTFCUVhSQ08wRkJRMFE3TzBGQlJVUTdPenM3T3pzNFFrRkhVenRCUVVOUUxGVkJRVWx1UWl4UlFVRlJMRWxCUVZvN08wRkJSVUZCTEZsQlFVMXZRaXhwUWtGQlRqdEJRVU5CTEdGQlFVOXdRaXhOUVVGTmNVSXNVVUZCVGl4RFFVRmxReXhWUVVGbUxFTkJRVEJDZEVJc1RVRkJUV1VzU1VGQmFFTXNRMEZCVUR0QlFVTkVPenRCUVVWRU96czdPenM3YTBOQlIyTTdRVUZEV2l4VlFVRkpaaXhSUVVGUkxFbEJRVm83TzBGQlJVRTdRVUZEUVN4VlFVRkpkVUlzYVVKQlFXbENPMEZCUTI1Q2VrUXNZMEZCVFN4aFFVUmhMRVZCUTBVd1JDeE5RVUZOZUVJc1RVRkJUWGxDTEUxQlJHUXNSVUZEYzBKRExFbEJRVWt4UWl4TlFVRk5jVUlzVVVGQlRpeERRVUZsVFN4UFFVUjZRenRCUVVWdVFrTXNZMEZCVFN4RlFVRkZReXhWUVVGVk4wSXNUVUZCVFdVc1NVRkJiRUk3UVVGR1lTeFBRVUZ5UWpzN1FVRkxRV1lzV1VGQlRXRXNTVUZCVGl4RFFVRlhhVUlzVjBGQldDeERRVUYxUWxBc1kwRkJka0lzUlVGQmRVTXNWVUZCUTFFc1MwRkJSQ3hGUVVGWE8wRkJRMmhFT1VRc1owSkJRVkZuUkN4SFFVRlNMRU5CUVZrc2EwTkJRVm9zUlVGQlowUmpMRXRCUVdoRU8wRkJRMEVzV1VGQlNVRXNUVUZCVFVnc1NVRkJUaXhEUVVGWFNTeEpRVUZZTEV0QlFXOUNMRWRCUVhoQ0xFVkJRVFpDTzBGQlF6TkNhRU1zWjBKQlFVMXZRaXhwUWtGQlRqdEJRVU5CTEdsQ1FVRlBjRUlzVFVGQlRYRkNMRkZCUVU0c1EwRkJaVU1zVlVGQlppeERRVUV3UW5SQ0xFMUJRVTFsTEVsQlFXaERMRU5CUVZBN1FVRkRSRHRCUVVOR0xFOUJUa1E3UVVGUFJEczdRVUZGUkRzN096czdPenM3TmtKQlMxTnJRaXhOTEVWQlFWRkRMRkVzUlVGQlZUdEJRVU42UWl4VlFVRkpReXhOUVVGTlJpeE5RVUZXTzBGQlEwRXNWVUZCU1Vjc1dVRkJXVHRCUVVOa2RFVXNZMEZCVFhGQ0xGZEJRVmRITEV0QlJFZzdRVUZGWkRSRExHdENRVUZWUVR0QlFVWkpMRTlCUVdoQ096dEJRVXRCTEZWQlFVbEhMRTFCUVUxS0xFOUJRVTgxUkN4UFFVRlFMRU5CUVdVc1IwRkJaaXhEUVVGV08wRkJRMEVzVlVGQlNXZEZMRkZCUVZGS0xFOUJRVTkyUkN4TlFVRlFMRWRCUVdkQ0xFTkJRVFZDTEVWQlFTdENPMEZCUXpkQ0xGbEJRVWt5UkN4UlFVRlJMRU5CUVZvc1JVRkJaVHRCUVVOaVJDeHZRa0ZCVlhSRkxFbEJRVllzUjBGQmFVSnhRaXhYUVVGWFF5eEhRVUUxUWp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTVowUXNiMEpCUVZWMFJTeEpRVUZXTEVkQlFXbENjVUlzVjBGQlYwVXNTMEZCTlVJN1FVRkRRVGhETEdkQ1FVRk5SaXhQUVVGUE4wUXNUVUZCVUN4RFFVRmpMRU5CUVdRc1JVRkJhVUkyUkN4UFFVRlBka1FzVFVGQlVDeEhRVUZuUWl4RFFVRnFReXhEUVVGT08wRkJRMFE3UVVGRFJqczdRVUZGUkN4WFFVRkxkMElzVVVGQlRDeERRVUZqYVVNc1IwRkJaQ3hKUVVGeFFrTXNVMEZCY2tJN1FVRkRSRHM3T3poQ1FVVlRMMElzU3l4RlFVRlBPMEZCUTJZc1ZVRkJTVXdzVVVGQlVTeEpRVUZhT3p0QlFVVkJMREJDUVVGWlFTeE5RVUZOUlN4UlFVRnNRaXhGUVVFMFFrc3NUMEZCTlVJc1EwRkJiME1zVlVGQlF6UkNMRWRCUVVRc1JVRkJVenRCUVVNelF5eFpRVUZKUml4VFFVRlRha01zVFVGQlRVVXNVVUZCVGl4RFFVRmxhVU1zUjBGQlppeERRVUZpTzBGQlEwRXNXVUZCU1VZc1QwRkJUMjVGTEVsQlFWQXNTMEZCWjBKeFFpeFhRVUZYUXl4SFFVRXZRaXhGUVVGdlF6dEJRVU5zUXp0QlFVTkJOa01zYVVKQlFVOURMRkZCUVZBc1EwRkJaMEkzUWl4TFFVRm9RanRCUVVORUxGTkJTRVFzVFVGSFR5eEpRVUZKTkVJc1QwRkJUMjVGTEVsQlFWQXNTMEZCWjBKeFFpeFhRVUZYUlN4TFFVRXZRaXhGUVVGelF6dEJRVU16UXp0QlFVTkJMR05CUVVsblFpeE5RVUZOYVVNc1MwRkJUaXhEUVVGWmFrVXNUMEZCV2l4RFFVRnZRamhFTEVkQlFYQkNMRTFCUVRaQ0xFTkJRV3BETEVWQlFXOURPMEZCUTJ4RFJpeHRRa0ZCVDBNc1VVRkJVQ3hEUVVGblFqZENMRXRCUVdoQ08wRkJRMFE3UVVGRFJpeFRRVXhOTEUxQlMwRXNTVUZCU1RSQ0xFOUJRVTl1UlN4SlFVRlFMRXRCUVdkQ2NVSXNWMEZCVjBjc1MwRkJMMElzUlVGQmMwTTdRVUZETTBNN1FVRkRRU3hqUVVGSlpTeE5RVUZOYVVNc1MwRkJUaXhMUVVGblFrZ3NSMEZCY0VJc1JVRkJlVUk3UVVGRGRrSkdMRzFDUVVGUFF5eFJRVUZRTEVOQlFXZENOMElzUzBGQmFFSTdRVUZEUkR0QlFVTkdPMEZCUTBZc1QwRm9Ra1E3UVVGcFFrUTdPenQxUWtFdlNIbERMREpDT3p0clFrRnJTVGRDWkN4clFqczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGRE0wbG1PenM3TzBGQlEwRTdPenM3UVVGRlFUczdPenRCUVRGQ1FUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3U1VFNFFrMW5SQ3hyUWpzN08wRkJRMG83T3pzN096czdPMEZCVTBFN096czdRVUZKUVN3NFFrRkJXUzlETEU5QlFWb3NSVUZCY1VKeVF5eEhRVUZ5UWl4RlFVRXdRbk5ETEUxQlFURkNMRVZCUVd0RFF5eGhRVUZzUXl4RlFVRnBSRU1zVjBGQmFrUXNSVUZCT0VSRExGTkJRVGxFTEVWQlFYbEZPMEZCUVVFN08wRkJRVUVzSzBwQlEycEZTaXhQUVVScFJTeEZRVU40UkhKRExFZEJSSGRFTEVWQlEyNUVjME1zVFVGRWJVUXNSVUZETTBORExHRkJSREpETEVWQlF6VkNReXhYUVVRMFFpeEZRVU5tUXl4VFFVUmxPenRCUVVWMlJTeFJRVUZKU1N4alFVRktPenRCUVVWQlFTeFZRVUZOZDBNc1kwRkJUaXhIUVVGMVFpeEZRVUYyUWpzN1FVRkZRWGhETEZWQlFVMUhMRkZCUVU0c1EwRkJaVU1zVDBGQlppeERRVUYxUWl4VlFVRkRReXhMUVVGRUxFVkJRVmM3UVVGRGFFTndReXhqUVVGUlowUXNSMEZCVWl4RFFVRlpMSGRDUVVGM1FqbEVMRWRCUVhoQ0xFZEJRVGhDTEZOQlFURkRMRVZCUVhGRWEwUXNTMEZCY2tRN1FVRkRRVXdzV1VGQlRYbERMRk5CUVU0c1EwRkJaMEp3UXl4TFFVRm9RanRCUVVORUxFdEJTRVE3TzBGQlMwRk1MRlZCUVUxWExHdENRVUZPTzBGQldIVkZPMEZCV1hoRk96czdPM2xEUVVWdlFqdEJRVU51UWp0QlFVTkJMRlZCUVVsWUxGRkJRVkVzU1VGQldqczdRVUZGUVVFc1dVRkJUVEJETEdWQlFVNHNSMEZCZDBJeFF5eE5RVUZOWVN4SlFVRk9MRU5CUVZkRExGZEJRVmdzUTBGQmRVSmtMRTFCUVUxbExFbEJRVGRDTEVWQlFXMURMRlZCUVVORExFZEJRVVFzUlVGQlV6dEJRVU5zUlM5RExHZENRVUZSWjBRc1IwRkJVaXhEUVVGWkxHZENRVUZuUW1wQ0xFMUJRVTFsTEVsQlFYUkNMRWRCUVRaQ0xGRkJRWHBETEVWQlFXMUVReXhIUVVGdVJEdEJRVU5CTEdkQ1FVRlJRU3hKUVVGSmJFUXNTVUZCV2p0QlFVTkZMR1ZCUVVzc1ZVRkJURHRCUVVGcFFtdERMR3RDUVVGTk1rTXNWMEZCVGl4RFFVRnJRak5DTEVkQlFXeENMRVZCUVhkQ08wRkJRM3BETEdWQlFVc3NUVUZCVER0QlFVRmhhRUlzYTBKQlFVMDBReXhQUVVGT0xFTkJRV00xUWl4SFFVRmtMRVZCUVc5Q08wRkJSbTVETzBGQlNVUXNUMEZPZFVJc1EwRkJlRUk3UVVGUFJEczdPM2REUVVWdFFqdEJRVU5zUWp0QlFVTkJMRlZCUVVsb1FpeFJRVUZSTEVsQlFWbzdPMEZCUlVGQkxGbEJRVTB3UXl4bFFVRk9MRU5CUVhOQ2RrSXNUVUZCZEVJN1FVRkRSRHM3UVVGRlJEczdPenM3T3p0dlEwRkpaMEl3UWl4VExFVkJRVmM3UVVGRGVrSXNWVUZCU1RkRExGRkJRVkVzU1VGQldqczdRVUZGUVR0QlFVTkJMRlZCUVVrNFF5eFpRVUZaTzBGQlEyUm9SaXhqUVVGTkxGRkJSRkVzUlVGRFJUQkVMRTFCUVUxNFFpeE5RVUZOY1VJc1VVRkJUaXhEUVVGbFNTeE5RVVIyUWl4RlFVTXJRa01zU1VGQlNURkNMRTFCUVUxeFFpeFJRVUZPTEVOQlFXVk5MRTlCUkd4RU8wRkJSV1JETEdOQlFVMHNSVUZCUlcxQ0xGRkJRVkVzUzBGQlZpeEZRVUZwUW14Q0xGVkJRVlUzUWl4TlFVRk5aU3hKUVVGcVF5eEZRVUYxUTNSQ0xGRkJRVkZQTEUxQlFVMW5SQ3hQUVVGeVJDeEZRVUU0UkRGR0xFOUJRVTh3UXl4TlFVRk5SeXhSUVVGT0xFTkJRV1ZLTEVsQlFYQkdMRVZCUVRCR2EwUXNWMEZCVjBvc1UwRkJja2M3UVVGR1VTeFBRVUZvUWpzN1FVRkxRVGRETEZsQlFVMWhMRWxCUVU0c1EwRkJWMmxDTEZkQlFWZ3NRMEZCZFVKblFpeFRRVUYyUWp0QlFVTkVPenRCUVVWRU96czdPenM3T0VKQlIxTTdRVUZEVUN4VlFVRkpPVU1zVVVGQlVTeEpRVUZhT3p0QlFVVkJPMEZCUTBFc1ZVRkJTV3RFTEZsQlFWazdRVUZEWkhCR0xHTkJRVTBzVVVGRVVTeEZRVU5GTUVRc1RVRkJUWGhDTEUxQlFVMTVRaXhOUVVSa0xFVkJRM05DUXl4SlFVRkpNVUlzVFVGQlRYRkNMRkZCUVU0c1EwRkJaVTBzVDBGRWVrTTdRVUZGWkVNc1kwRkJUU3hGUVVGRlF5eFZRVUZWTjBJc1RVRkJUV1VzU1VGQmJFSTdRVUZHVVN4UFFVRm9RanM3UVVGTFFXWXNXVUZCVFdFc1NVRkJUaXhEUVVGWGFVSXNWMEZCV0N4RFFVRjFRbTlDTEZOQlFYWkNMRVZCUVd0RExGVkJRVU51UWl4TFFVRkVMRVZCUVZjN1FVRkRNME01UkN4blFrRkJVV2RFTEVkQlFWSXNRMEZCV1N3MlFrRkJXaXhGUVVFeVEyTXNTMEZCTTBNN1FVRkRRU3haUVVGSlFTeE5RVUZOU0N4SlFVRk9MRU5CUVZkSkxFbEJRVmdzUzBGQmIwSXNSMEZCZUVJc1JVRkJOa0k3UVVGRE0wSm9ReXhuUWtGQlRXOUNMR2xDUVVGT08wRkJRMEVzYVVKQlFVOXdRaXhOUVVGTmNVSXNVVUZCVGl4RFFVRmxPRUlzVlVGQlppeERRVUV3UW01RUxFMUJRVTFsTEVsQlFXaERMRU5CUVZBN1FVRkRSRHRCUVVOR0xFOUJUa1E3UVVGUFJEczdRVUZGUkRzN096czdPenM3TzBGQlRVRTdPenM3YlVOQlNXVnRRaXhSTEVWQlFWVTdRVUZEZGtJc1YwRkJTMnRDTEhOQ1FVRk1MRWRCUVRoQ2JFSXNVVUZCT1VJN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzclFrRkpWMEVzVVN4RlFVRlZPMEZCUTI1Q0xGZEJRVXR0UWl4clFrRkJUQ3hIUVVFd1FtNUNMRkZCUVRGQ08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN01rSkJTVTlCTEZFc1JVRkJWVHRCUVVObUxGZEJRVXR2UWl4alFVRk1MRWRCUVhOQ2NFSXNVVUZCZEVJN1FVRkRSRHM3UVVGRlJEczdPenNyUWtGRFYyeENMRWNzUlVGQlN6dEJRVU5rTEZWQlFVbG9RaXhSUVVGUkxFbEJRVm83TzBGQlJVRXZRaXhqUVVGUlowUXNSMEZCVWl4RFFVRlpMREJDUVVGYUxFVkJRWGREUkN4SFFVRjRRenRCUVVOQkxHTkJRVkZCTEVsQlFVbFpMRWxCUVVvc1EwRkJVemxFTEVsQlFXcENPMEZCUTBVc1lVRkJTeXhYUVVGTU8wRkJRV3RDYTBNc1owSkJRVTExUkN4WlFVRk9MRU5CUVcxQ2RrTXNSMEZCYmtJc1JVRkJlVUk3UVVGRE0wTXNZVUZCU3l4aFFVRk1PMEZCUVc5Q2FFSXNaMEpCUVUxM1JDeGpRVUZPTEVOQlFYRkNlRU1zUjBGQmNrSXNSVUZCTWtJN1FVRkdha1E3UVVGSlJEczdRVUZGUkRzN096dHBRMEZEWVVFc1J5eEZRVUZMTzBGQlFVRTdPMEZCUTJoQ0xGVkJRVWxvUWl4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSmVVUXNZVUZCWVhwRExFbEJRVWxaTEVsQlFVb3NRMEZCVTBvc1NVRkJNVUk3UVVGRFFYWkVMR05CUVZGblJDeEhRVUZTTEVOQlFWa3NiVU5CUVZvc1JVRkJhVVJFTEVkQlFXcEVPenRCUVVWQkxGVkJRVWxZTEZGQlFWRTdRVUZEVm5aRExHTkJRVTFyUkN4SlFVRkpXU3hKUVVGS0xFTkJRVk01UkN4SlFVUk1PMEZCUlZaWUxHRkJRVXR6Unl4VlFVWkxPenRCUVVsV2VrWXNhMEpCUVZWblJDeEpRVUZKV1N4SlFVRktMRU5CUVZNMVJDeFJRVXBVT3p0QlFVMVdNRVlzWjBKQlFWRXNhMEpCUVUwN1FVRkRXanRCUVVOQkxHTkJRVWxETEUxQlFVMHNSVUZCUlhoSExFdEJRVXR6Unl4VlFVRlFMRVZCUVcxQ1J5eFJRVUZSTEVsQlFUTkNMRVZCUVZZN1FVRkRRVFZFTEdkQ1FVRk5kME1zWTBGQlRpeERRVUZ4UW1sQ0xGVkJRWEpDTEVsQlFXMURSU3hIUVVGdVF6czdRVUZGUVR0QlFVTkJMR05CUVVsRkxHbENRVUZwUWl4RlFVRnlRanRCUVVOQkxEaENRVUZaTjBRc1RVRkJUVlVzWjBKQlFXeENMRVZCUVc5RFNDeFBRVUZ3UXl4RFFVRTBReXhWUVVGRFF5eFBRVUZFTEVWQlFXRTdRVUZEZGtRc1owSkJRVWxETEZsQlFWbFVMRTFCUVUxVkxHZENRVUZPTEVOQlFYVkNSaXhQUVVGMlFpeEZRVUZuUTFRc1NVRkJhRVE3UVVGRFFUaEVMREpDUVVGbGNrUXNUMEZCWml4SlFVRXdRaXh6UWtGQlZVTXNVMEZCVml4RFFVRXhRanRCUVVORUxGZEJTRVE3TzBGQlMwRXNZMEZCU1hGRUxGVkJRVlU3UVVGRFdrTXNaMEpCUVVrdlF5eEpRVUZKSzBNc1JVRkVTU3hGUVVOQmFrY3NUVUZCVFN4VlFVUk9MRVZCUTJ0Q01FUXNUVUZCVFZJc1NVRkJTVlVzUlVGRU5VSXNSVUZEWjBOQkxFbEJRVWxXTEVsQlFVbFJMRWxCUkhoRE8wRkJSVnBKTEd0Q1FVRk5MRVZCUVVWSkxFMUJRVTBzUjBGQlVpeEZRVUZoZGtNc1VVRkJVVThzVFVGQlRXZEVMRTlCUVROQ0xFVkJRVzlEWjBJc1UwRkJVMmhGTEUxQlFVMURMRkZCUVc1RUxFVkJRVFpFTTBNc1QwRkJUeXhGUVVGRmVVTXNUVUZCVFN4elFrRkJWVU1zVFVGQlRVUXNTVUZCYUVJc1EwRkJVaXhGUVVFclFrZ3NWMEZCVjJsRkxHTkJRVEZETEVWQlFYQkZPMEZCUmswc1YwRkJaRHM3UVVGTFFTeGpRVUZKTjBNc1NVRkJTVmtzU1VGQlNpeERRVUZUY1VNc1kwRkJWQ3hEUVVGM1FpeHpRa0ZCZUVJc1MwRkJiVVFzUTBGQlEycEVMRWxCUVVsWkxFbEJRVW9zUTBGQlUzTkRMRzlDUVVGcVJTeEZRVUYxUmp0QlFVTnlSa29zYjBKQlFWRnNReXhKUVVGU0xFTkJRV0Z6UXl4dlFrRkJZaXhIUVVGdlF5eFBRVUZMUXl4eFFrRkJla003UVVGRFFTeHRRa0ZCUzBFc2NVSkJRVXdzUjBGQk5rSnVSQ3hKUVVGSldTeEpRVUZLTEVOQlFWTnpReXh2UWtGQmRFTTdRVUZEUkRzN1FVRkZSRHRCUVVOQmJFVXNaMEpCUVUxaExFbEJRVTRzUTBGQlYybENMRmRCUVZnc1EwRkJkVUpuUXl4UFFVRjJRanM3UVVGRlFTeHBRa0ZCVDBnc1IwRkJVRHRCUVVORUxGTkJhRU5UT3p0QlFXdERWbE1zWjBKQlFWRXNaMEpCUVVORExFMUJRVVFzUlVGQldUdEJRVU5zUWp0QlFVTkJja1VzWjBKQlFVMWhMRWxCUVU0c1EwRkJWMmxDTEZkQlFWZ3NRMEZCZFVJN1FVRkRja0pwUXl4blFrRkJTUzlETEVsQlFVa3JReXhGUVVSaExFVkJRMVJxUnl4TlFVRk5MRlZCUkVjc1JVRkRVekJFTEUxQlFVMVNMRWxCUVVsVkxFVkJSRzVDTEVWQlEzVkNRU3hKUVVGSlZpeEpRVUZKVVN4SlFVUXZRanRCUVVWeVFra3NhMEpCUVUwc1JVRkJSVWtzVFVGQlRTeEhRVUZTTEVWQlFXRnpReXhOUVVGTlJDeE5RVUZ1UWp0QlFVWmxMRmRCUVhaQ08wRkJTVVE3UVVGNFExTXNUMEZCV2pzN1FVRXlRMEVzVlVGQlNYSkZMRTFCUVUxdlJDeHpRa0ZCVml4RlFVRnJRenRCUVVOb1EyNUdMR2RDUVVGUlowUXNSMEZCVWl4RFFVRlpMSE5DUVVGYUxFVkJRVzlEV2l4TFFVRndRenRCUVVOQlRDeGpRVUZOYjBRc2MwSkJRVTRzUTBGQk5rSXZReXhMUVVFM1FqdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdiVU5CUTJWWExFY3NSVUZCU3p0QlFVTnNRaXhWUVVGSmFFSXNVVUZCVVN4SlFVRmFPMEZCUTBFc1ZVRkJTWGxFTEdGQlFXRjZReXhKUVVGSldTeEpRVUZLTEVOQlFWTktMRWxCUVRGQ096dEJRVVZCTEZWQlFVbHRReXhOUVVGTk0wUXNUVUZCVFhkRExHTkJRVTRzUTBGQmNVSnBRaXhWUVVGeVFpeERRVUZXTzBGQlEwRXNZVUZCVDNwRUxFMUJRVTEzUXl4alFVRk9MRU5CUVhGQ2FVSXNWVUZCY2tJc1EwRkJVRHM3UVVGRlFTeFZRVUZKY0VRc1VVRkJVVHRCUVVOV2RrTXNZMEZCVFd0RUxFbEJRVWxaTEVsQlFVb3NRMEZCVXpsRUxFbEJSRXc3UVVGRlZsZ3NZVUZCUzNOSExGVkJSa3M3UVVGSFZqbEZMR2RDUVVGUlowWTdRVUZJUlN4UFFVRmFPenRCUVUxQkxGVkJRVWt6UkN4TlFVRk5iMFFzYzBKQlFWWXNSVUZCYTBNN1FVRkRhRU51Uml4blFrRkJVV2RFTEVkQlFWSXNRMEZCV1N4NVFrRkJXaXhGUVVGMVExb3NTMEZCZGtNN1FVRkRRVXdzWTBGQlRXOUVMSE5DUVVGT0xFTkJRVFpDTDBNc1MwRkJOMEk3UVVGRFJEdEJRVU5HT3p0QlFVVkVPenM3TzJkRFFVTlpWeXhITEVWQlFVczdRVUZEWml4VlFVRkphRUlzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVsTExGRkJRVkU3UVVGRFZuWkRMR05CUVUxclJDeEpRVUZKYkVRc1NVRkVRVHRCUVVWV1dDeGhRVUZMTmtRc1NVRkJTVkVzU1VGR1F6dEJRVWRXVVN4alFVRk5hRUlzU1VGQlNWa3NTVUZCU2l4RFFVRlRTVHRCUVVoTUxFOUJRVm83TzBGQlRVRXNWVUZCU1doRExFMUJRVTF4UkN4clFrRkJWaXhGUVVFNFFqdEJRVU0xUW5CR0xHZENRVUZSWjBRc1IwRkJVaXhEUVVGWkxHdENRVUZhTEVWQlFXZERXaXhMUVVGb1F6dEJRVU5CVEN4alFVRk5jVVFzYTBKQlFVNHNRMEZCZVVKb1JDeExRVUY2UWp0QlFVTkVPMEZCUTBZN08wRkJSVVE3T3pzN05FSkJRMUZYTEVjc1JVRkJTenRCUVVOWUxGVkJRVWxvUWl4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNVc3NVVUZCVVR0QlFVTldka01zWTBGQlRXdEVMRWxCUVVsc1JDeEpRVVJCTzBGQlJWWllMR0ZCUVVzMlJDeEpRVUZKVVN4SlFVWkRPenRCUVVsV2EwTXNaMEpCUVZFc2EwSkJRVTA3UVVGRFdqRkVMR2RDUVVGTllTeEpRVUZPTEVOQlFWZHBRaXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNhVU1zWjBKQlFVa3ZReXhKUVVGSkswTXNSVUZFWVN4RlFVTlVha2NzVFVGQlRTeFZRVVJITEVWQlExTXdSQ3hOUVVGTlVpeEpRVUZKVlN4RlFVUnVRaXhGUVVOMVFrRXNTVUZCU1ZZc1NVRkJTVkVzU1VGRUwwSTdRVUZGY2tKSkxHdENRVUZOTEVWQlFVVkpMRTFCUVUwc1IwRkJVaXhGUVVGaE1VVXNUMEZCVHl4elFrRkJWVEJETEUxQlFVMUVMRWxCUVdoQ0xFTkJRWEJDTzBGQlJtVXNWMEZCZGtJN1FVRkpSQ3hUUVZSVE96dEJRVmRXY1VVc1owSkJRVkVzWjBKQlFVTkRMRTFCUVVRc1JVRkJXVHRCUVVOc1FuSkZMR2RDUVVGTllTeEpRVUZPTEVOQlFWZHBRaXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNhVU1zWjBKQlFVa3ZReXhKUVVGSkswTXNSVUZFWVN4RlFVTlVha2NzVFVGQlRTeFZRVVJITEVWQlExTXdSQ3hOUVVGTlVpeEpRVUZKVlN4RlFVUnVRaXhGUVVOMVFrRXNTVUZCU1ZZc1NVRkJTVkVzU1VGRUwwSTdRVUZGY2tKSkxHdENRVUZOTEVWQlFVVkpMRTFCUVUwc1IwRkJVaXhGUVVGaGMwTXNUVUZCVFVRc1RVRkJia0k3UVVGR1pTeFhRVUYyUWp0QlFVbEVPMEZCYUVKVExFOUJRVm83TzBGQmJVSkJMRlZCUVVseVJTeE5RVUZOYzBRc1kwRkJWaXhGUVVFd1FqdEJRVU40UW5KR0xHZENRVUZSWjBRc1IwRkJVaXhEUVVGWkxHTkJRVm9zUlVGQk5FSmFMRXRCUVRWQ08wRkJRMEZNTEdOQlFVMXpSQ3hqUVVGT0xFTkJRWEZDYWtRc1MwRkJja0k3UVVGRFJEdEJRVU5HT3pzN2QwSkJNMHB0UWp0QlFVRkZMR0ZCUVU4c1MwRkJTMjFETEdOQlFWbzdRVUZCTmtJN096dDFRa0Y2UmxRc01rSTdPMnRDUVhkUU4wSkVMR3RDT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVTXZVR1k3T3pzN1FVRkRRVHM3T3p0QlFVTkJPenM3TzBGQlJVRTdPenM3U1VGSlRXZERMRlU3UVVGRFNqczdPenM3T3pzN096czdPenM3UVVGcFFrRTdPenM3UVVGSlFTeHpRa0ZCV1M5RkxFOUJRVm9zUlVGQmNVSnlReXhIUVVGeVFpeEZRVUV3UW5ORExFMUJRVEZDTEVWQlFXdERReXhoUVVGc1F5eEZRVUZwUkVNc1YwRkJha1FzUlVGQk9FUkRMRk5CUVRsRUxFVkJRWGRHTzBGQlFVRXNVVUZCWmtVc1RVRkJaU3gxUlVGQlRpeEpRVUZOTzBGQlFVRTdPMEZCUTNSR0xGRkJRVWxGTEZGQlFWRXNTVUZCV2pzN1FVRkZRVUVzVlVGQlRYRkNMRkZCUVU0c1IwRkJhVUkzUWl4UFFVRnFRanRCUVVOQlVTeFZRVUZOWlN4SlFVRk9MRWRCUVdFMVJDeEhRVUZpTzBGQlEwRTJReXhWUVVGTlowUXNUMEZCVGl4SFFVRm5RblpFTEUxQlFXaENPMEZCUTBGUExGVkJRVTEzUlN4UFFVRk9MRWRCUVdkQ09VVXNZVUZCYUVJN1FVRkRRVTBzVlVGQlRVY3NVVUZCVGl4SFFVRnBRaXd3UWtGQlpWSXNWMEZCWml4RFFVRnFRanRCUVVOQlN5eFZRVUZOZVVVc1ZVRkJUaXhIUVVGdFFqZEZMRk5CUVc1Q08wRkJRMEZKTEZWQlFVMXRSU3h4UWtGQlRpeEhRVUU0UW5KRkxFMUJRVGxDT3p0QlFVVkJSU3hWUVVGTlF5eFJRVUZPTEVkQlFXbENMRU5CUVdwQ08wRkJRMEZFTEZWQlFVMHdSU3hSUVVGT0xFZEJRV2xDTEVOQlFXcENPMEZCUTBFeFJTeFZRVUZOVlN4blFrRkJUaXhIUVVGNVFpeEZRVUY2UWp0QlFVTkJWaXhWUVVGTk1rVXNhMEpCUVU0c1IwRkJNa0lzUlVGQk0wSTdPMEZCUlVFelJTeFZRVUZOZVVJc1RVRkJUaXhIUVVGbGFrTXNVVUZCVVdsRExFMUJRWFpDTzBGQlEwRjZRaXhWUVVGTllTeEpRVUZPTEVkQlFXRnlRaXhSUVVGUmNVSXNTVUZCY2tJN1FVRkRSRHM3T3p0NVEwRkZiMEk3UVVGQlFUczdRVUZEYmtJc1ZVRkJTV0lzVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVrMFJTeGxRVUZsTlVVc1RVRkJUV1VzU1VGQlRpeEhRVUZoTEZsQlFXaERPMEZCUTBFNVF5eGpRVUZSWjBRc1IwRkJVaXhEUVVGWkxITkRRVUZhTEVWQlFXOUVha0lzVFVGQlRYbEZMRlZCUVRGRU8wRkJRMEVzVlVGQlNYcEZMRTFCUVUxNVJTeFZRVUZXTEVWQlFYTkNPMEZCUTNCQ2VrVXNZMEZCVFhsRkxGVkJRVTRzUTBGQmFVSnNSU3hQUVVGcVFpeERRVUY1UWl4VlFVRkRjMFVzUzBGQlJDeEZRVUZYTzBGQlEyeERMR05CUVVsRExGZEJRVmRHTEdWQlFXVkRMRXRCUVRsQ08wRkJRMEVzWTBGQlNVVXNWMEZCVnk5RkxFMUJRVTFoTEVsQlFVNHNRMEZCVjBNc1YwRkJXQ3hEUVVGMVFtZEZMRkZCUVhaQ0xFVkJRV2xETEZWQlFVTTVSQ3hIUVVGRUxFVkJRVk03UVVGRGRrUTdRVUZEUVN4blFrRkJTVUVzU1VGQlNWRXNTVUZCU2l4TFFVRmhMRTlCUVV0RExFMUJRWFJDTEVWQlFUaENPMEZCUXpWQ2VFUXNjMEpCUVZGblJDeEhRVUZTTEVOQlFWa3NNa0pCUVZvc1JVRkJlVU5FTEVkQlFYcERPMEZCUTBFc2MwSkJRVkZCTEVsQlFVbHNSQ3hKUVVGYU8wRkJRMFVzY1VKQlFVc3NVVUZCVER0QlFVRmxhME1zZDBKQlFVMW5SaXhqUVVGT0xFTkJRWEZDYUVVc1IwRkJja0lzUlVGQk1rSTdRVUZETVVNc2NVSkJRVXNzVVVGQlREdEJRVUZsTDBNc01FSkJRVkZuUkN4SFFVRlNMRU5CUVZsRUxFZEJRVm9zUlVGQmEwSTdRVUZEYWtNN1FVRkJVMmhDTEhkQ1FVRk5hVVlzWlVGQlRpeERRVUZ6UW1wRkxFZEJRWFJDTEVWQlFUUkNPMEZCU0haRE8wRkJTMFE3UVVGRFJpeFhRVlpqTEVOQlFXWTdPMEZCV1VGb1FpeG5Ra0ZCVFRKRkxHdENRVUZPTEVOQlFYbENUeXhKUVVGNlFpeERRVUU0UWtnc1VVRkJPVUk3UVVGRFJDeFRRV1pFTzBGQlowSkVPMEZCUTBZN096dDNRMEZGYlVJN1FVRkRiRUlzVlVGQlNTOUZMRkZCUVZFc1NVRkJXanM3UVVGRlFVRXNXVUZCVFRKRkxHdENRVUZPTEVOQlFYbENjRVVzVDBGQmVrSXNRMEZCYVVNc1ZVRkJRM2RGTEZGQlFVUXNSVUZCWXp0QlFVTTNRMEVzYVVKQlFWTTFSQ3hOUVVGVU8wRkJRMFFzVDBGR1JEczdRVUZKUVN3d1FrRkJXVzVDTEUxQlFVMVZMR2RDUVVGc1FpeEZRVUZ2UTBnc1QwRkJjRU1zUTBGQk5FTXNWVUZCUXpSQ0xFZEJRVVFzUlVGQlV6dEJRVU51Ukc1RExHTkJRVTFWTEdkQ1FVRk9MRU5CUVhWQ2VVSXNSMEZCZGtJc1JVRkJORUptTEdsQ1FVRTFRanRCUVVORUxFOUJSa1E3UVVGSFJEczdRVUZGUkRzN096czdPenM3TzBGQk9FSkJPenM3TkVKQlIxRTdRVUZEVGp0QlFVTkJMRmxCUVUwc2FVSkJRVTQ3UVVGRFJEczdRVUZGUkRzN096czdPelpDUVVkVE8wRkJRMUE3UVVGRFFTeFpRVUZOTEdsQ1FVRk9PMEZCUTBRN08wRkJSVVE3T3pzN096c3lRa0ZIVHp0QlFVTk1PMEZCUTBFc1dVRkJUU3hwUWtGQlRqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdOa0pCVFZNclJDeFJMRVZCUVZWNFJpeFhMRVZCUVdFN1FVRkRPVUlzVlVGQlNVc3NVVUZCVVN4SlFVRmFPenRCUVVWQk8wRkJRMEZCTEZsQlFVMHdSU3hSUVVGT08wRkJRMEVzVlVGQlNWVXNZVUZCWVhCR0xFMUJRVTE1UWl4TlFVRk9MRWRCUVdVc1IwRkJaaXhIUVVGeFFucENMRTFCUVUwd1JTeFJRVUUxUXp0QlFVTkJMRlZCUVVsWExHVkJRV1Z5Uml4TlFVRk5aU3hKUVVGT0xFZEJRV0VzV1VGQllpeEhRVUUwUW05RkxGRkJRUzlET3p0QlFVVkJPMEZCUTBFc1ZVRkJTVWNzWVVGQllUdEJRVU5tZUVnc1kwRkJUU3hSUVVSVExFVkJRME13UkN4TlFVRk5lRUlzVFVGQlRYbENMRTFCUkdJc1JVRkRjVUpETEVsQlFVa3lSQ3haUVVSNlFqdEJRVVZtZWtRc1kwRkJUU3hGUVVGRlF5eFZRVUZWZFVRc1ZVRkJXaXhGUVVGM1FqbElMRTlCUVU5eFF5eFhRVUV2UWp0QlFVWlRMRTlCUVdwQ08wRkJTVUVzVlVGQlNTeERRVUZEU3l4TlFVRk5iVVVzY1VKQlFWZ3NSVUZCYTBOdFFpeFhRVUZYTVVRc1NVRkJXQ3hEUVVGblFuTkRMRzlDUVVGb1FpeEhRVUYxUTJ4RkxFMUJRVTF0UlN4eFFrRkJOME03TzBGQlJXeERPMEZCUTBFc1lVRkJUeXh6UWtGQldTeFZRVUZEYjBJc1QwRkJSQ3hGUVVGaE8wRkJRemxDTEZsQlFVbERMRkZCUVZGNFJpeE5RVUZOWVN4SlFVRk9MRU5CUVZkcFFpeFhRVUZZTEVOQlFYVkNkMFFzVlVGQmRrSXNRMEZCV2pzN1FVRkZRWEpJTEdkQ1FVRlJaMFFzUjBGQlVpeERRVUZaTERSQ1FVRTBRbXBDTEUxQlFVMTVRaXhOUVVGc1F5eEhRVUV5UXl4TlFVRjJSQ3hGUVVFclJEWkVMRlZCUVM5RU8wRkJRMEVzV1VGQlNVY3NWMEZCVnl3NFFrRkJiMEo2Uml4TFFVRndRaXhGUVVFeVFtOUdMRlZCUVROQ0xFVkJRWFZEZWtZc1YwRkJka01zUlVGQmIwUkxMRTFCUVUxNVFpeE5RVUV4UkN4RlFVRnJSU3RFTEV0QlFXeEZMRU5CUVdZN1FVRkRRVU1zYVVKQlFWTkRMRkZCUVZRc1EwRkJhMElzVlVGQlEzSkdMRXRCUVVRc1JVRkJWenRCUVVNelFrd3NaMEpCUVUxNVF5eFRRVUZPTEVOQlFXZENjRU1zUzBGQmFFSXNSVUZCZFVJc1JVRkJSWE5HTEUxQlFVMU9MRmxCUVZJc1JVRkJjMEkzUlN4VFFVRlRORVVzVlVGQkwwSXNSVUZCZGtJN1FVRkRSQ3hUUVVaRU96dEJRVWxCY0VZc1kwRkJUVlVzWjBKQlFVNHNRMEZCZFVJd1JTeFZRVUYyUWl4SlFVRnhRMHNzVVVGQmNrTTdPMEZCUlVGR0xHZENRVUZSUlN4UlFVRlNPMEZCUTBRc1QwRmFUU3hEUVVGUU8wRkJZVVE3TzBGQlJVUTdPenM3T3pzN0swSkJTVmQyUkN4UkxFVkJRVlU3UVVGRGJrSXNWMEZCU3pCRUxIRkNRVUZNTEVkQlFUWkNNVVFzVVVGQk4wSTdRVUZEUkRzN1FVRkZSRHM3T3p0dFEwRkRaV3hDTEVjc1JVRkJTenRCUVVOc1FpeFZRVUZKYUVJc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNXOUdMR0ZCUVdGd1JTeEpRVUZKV1N4SlFVRktMRU5CUVZORExGRkJRVEZDT3p0QlFVVkJOVVFzWTBGQlVXZEVMRWRCUVZJc1EwRkJXU3cwUWtGQk5FSnFRaXhOUVVGTmVVSXNUVUZCYkVNc1IwRkJNa01zVFVGQmRrUXNSVUZCSzBSVUxFZEJRUzlFTzBGQlEwRXNWVUZCU1hsRkxGZEJRVmNzT0VKQlFXOUNla1lzUzBGQmNFSXNSVUZCTWtKdlJpeFZRVUV6UWl4RlFVRjFRM0JGTEVsQlFVbFpMRWxCUVVvc1EwRkJVM1JGTEV0QlFXaEVMRU5CUVdZN1FVRkRRVEJETEZsQlFVMVZMR2RDUVVGT0xFTkJRWFZDTUVVc1ZVRkJka0lzU1VGQmNVTkxMRkZCUVhKRE96dEJRVVZCU1N4cFFrRkJWeXhaUVVGTk8wRkJRMlk3UVVGRFFUZEdMR05CUVUxaExFbEJRVTRzUTBGQlYybENMRmRCUVZnc1EwRkJkVUk3UVVGRGNrSnBReXhqUVVGSkwwTXNTVUZCU1N0RExFVkJSR0VzUlVGRFZHcEhMRTFCUVUwc1ZVRkVSeXhGUVVOVE1FUXNUVUZCVFZJc1NVRkJTVlVzUlVGRWJrSXNSVUZEZFVKQkxFbEJRVWxXTEVsQlFVbFJMRWxCUkM5Q08wRkJSWEpDU1N4blFrRkJUU3hGUVVGRlNTeE5RVUZOTEVkQlFWSXNSVUZCWVRoRUxGRkJRVkU1Uml4TlFVRk5lVUlzVFVGQk0wSTdRVUZHWlN4VFFVRjJRanRCUVVsRUxFOUJUa1E3TzBGQlVVRXNWVUZCU1hCQ0xGRkJRVkU3UVVGRFZuWkRMR05CUVUxclJDeEpRVUZKYkVRc1NVRkVRVHRCUVVWV01FUXNZMEZCVFZJc1NVRkJTVkVzU1VGR1FUdEJRVWRXY2tVc1lVRkJTelpFTEVsQlFVbFZMRVZCU0VNN1FVRkpWbkJGTEdWQlFVOHdSQ3hKUVVGSldTeEpRVUZLTEVOQlFWTjBSU3hMUVVwT08wRkJTMVpyUkN4cFFrRkJVelJGTEZWQlRFTTdRVUZOVm5CSUxHdENRVUZWWjBRc1NVRkJTVmtzU1VGQlNpeERRVUZUTlVRN1FVRk9WQ3hQUVVGYU96dEJRVk5CTEZWQlFVbG5ReXhOUVVGTk5FWXNjVUpCUVZZc1JVRkJhVU03UVVGREwwSXpTQ3huUWtGQlVXZEVMRWRCUVZJc1EwRkJXU3h6UWtGQldpeEZRVUZ2UTFvc1MwRkJjRU03UVVGRFFVd3NZMEZCVFRSR0xIRkNRVUZPTEVOQlFUUkNka1lzUzBGQk5VSTdRVUZEUkR0QlFVTkdPenRCUVVWRU96czdPemhDUVVOVlFTeExMRVZCUVU4d1JpeFRMRVZCUVZjN1FVRkRNVUlzVlVGQlNTOUdMRkZCUVZFc1NVRkJXanM3UVVGRlFVRXNXVUZCVFVNc1VVRkJUanM3UVVGRlFTeFZRVUZKUkN4TlFVRk5kMFVzVDBGQlRpeExRVUZyUWl4SlFVRjBRaXhGUVVFMFFqdEJRVU14UWp0QlFVTkJMRmxCUVVsM1FpeFpRVUZaTzBGQlEyUnNTU3huUWtGQlRTeFJRVVJSTEVWQlEwVXdSQ3hOUVVGTmVFSXNUVUZCVFdVc1NVRkVaQ3hGUVVOdlFsY3NTVUZCU1RGQ0xFMUJRVTFsTEVsQlFVNHNSMEZCWVN4VlFVUnlRenRCUVVWa1lTeG5Ra0ZCVFN4RlFVRkZiME1zVTBGQlUyaEZMRTFCUVUxRExGRkJRV3BDTEVWQlFUSkNOa1lzVVVGQlVUbEdMRTFCUVUxNVFpeE5RVUY2UXl4RlFVRnBSSGRGTEZkQlFWYzFSaXhOUVVGTmFVTXNTMEZCYkVVN1FVRkdVU3hUUVVGb1FqczdRVUZMUVhKRkxHZENRVUZSWjBRc1IwRkJVaXhEUVVGWkxEWkNRVUZhTEVWQlFUSkRXaXhMUVVFelF5eEZRVUZyUkRCR0xGTkJRV3hFTEVWQlFUWkVReXhUUVVFM1JEczdRVUZGUVN4WlFVRkpNMFlzVFVGQlRUWkdMRXRCUVU0c1MwRkJaMElzZDBKQlFWZERMRTFCUVM5Q0xFVkJRWFZETzBGQlEzSkRMR05CUVVrNVJpeE5RVUZOSzBZc1MwRkJUaXhMUVVGblFpeDNRa0ZCVjBNc1RVRkJMMElzUlVGQmRVTTdRVUZEY2tOTUxITkNRVUZWY0VVc1NVRkJWaXhEUVVGbGRFVXNTMEZCWml4SFFVRjFRaXRETEUxQlFVMU9MRWxCUVRkQ08wRkJRMFE3UVVGRFJpeFRRVXBFTEUxQlNVODdRVUZEVEdsSExHOUNRVUZWY0VVc1NVRkJWaXhEUVVGbE1FVXNZVUZCWml4SFFVRXJRbXBITEUxQlFVMDJSaXhMUVVGeVF6dEJRVU5CUml4dlFrRkJWWEJGTEVsQlFWWXNRMEZCWlhSRkxFdEJRV1lzUjBGQmRVSXJReXhOUVVGTlRpeEpRVUUzUWp0QlFVTkJMR05CUVVsTkxFMUJRVTByUml4TFFVRk9MRXRCUVdkQ0xIZENRVUZYUnl4TlFVRXZRaXhGUVVGMVF6dEJRVU55UTFBc2MwSkJRVlZ3UlN4SlFVRldMRU5CUVdVMFJTeFRRVUZtTEVkQlFUSkNia2NzVFVGQlRTdEdMRXRCUVdwRE8wRkJRMFE3UVVGRFJqczdRVUZGUkR0QlFVTkJMRmxCUVVsTUxGTkJRVW9zUlVGQlpUdEJRVU5pUXl4dlFrRkJWWFJGTEVWQlFWWXNSMEZCWlhGRkxGVkJRVlZLTEVsQlFYcENPMEZCUTBGTExHOUNRVUZWY0VVc1NVRkJWaXhEUVVGbFF5eFJRVUZtTEVkQlFUQkNhMFVzVlVGQlZYWkdMRTlCUVhCRE8wRkJRMFE3TzBGQlJVUXNXVUZCU1N4RFFVRkRVaXhOUVVGTmJVVXNjVUpCUVZnc1JVRkJhME0yUWl4VlFVRlZjRVVzU1VGQlZpeERRVUZsYzBNc2IwSkJRV1lzUjBGQmMwTnNSU3hOUVVGTmJVVXNjVUpCUVRWRE96dEJRVVZzUTI1RkxHTkJRVTFoTEVsQlFVNHNRMEZCVjJsQ0xGZEJRVmdzUTBGQmRVSnJSU3hUUVVGMlFqdEJRVU5FTzBGQlEwWTdPMEZCUlVRN096czdhME5CUTJOVExFOHNSVUZCVTNwR0xFY3NSVUZCU3p0QlFVTXhRaXhWUVVGSmFFSXNVVUZCVVN4SlFVRmFPenRCUVVWQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEZWQlFVbEJMRTFCUVUxRExGRkJRVTRzUjBGQmFVSXNRMEZCYWtJc1MwRkJkVUpsTEVsQlFVbFpMRWxCUVVvc1EwRkJVMjlETEU5QlFYQkRMRVZCUVRaRE8wRkJRek5EYUVVc1kwRkJUVU1zVVVGQlRqdEJRVU5CTEZsQlFVa3dSaXhQUVVGUE0wVXNTVUZCU1Zrc1NVRkJTaXhEUVVGVGNVVXNVMEZCY0VJN1FVRkRRU3haUVVGSk0wa3NVVUZCVVN4elFrRkJWVEJFTEVsQlFVbFpMRWxCUVVvc1EwRkJVM1JGTEV0QlFXNUNMRU5CUVZvN1FVRkRRU3haUVVGSmIwb3NZVUZCWVVRc1VVRkJVVVVzVlVGQlVpeERRVUZ0UW1oQ0xFbEJRVzVDTEVOQlFXcENPenRCUVVWQkxGbEJRVWt6UlN4SlFVRkpXU3hKUVVGS0xFTkJRVk13UlN4aFFVRlVMRXRCUVRKQ0xIZENRVUZYVFN4TFFVRXhReXhGUVVGcFJEdEJRVU12UXl4alFVRkpOVVlzU1VGQlNWa3NTVUZCU2l4RFFVRlRORVVzVTBGQlZDeExRVUYxUWl4M1FrRkJWMHNzUjBGQmRFTXNSVUZCTWtNN1FVRkRla01zWjBKQlFVbERMRTFCUVUxS0xGZEJRVmM1U0N4SFFVRnlRanRCUVVOQkxHZENRVUZKYlVrc1VVRkJVVXdzVjBGQlYwMHNTVUZCZGtJN1FVRkRRVU1zYTBKQlFVMURMRk5CUVU0c1EwRkJaMEpETEUxQlFXaENMRU5CUVhWQ1F5eExRVUYyUWl4RFFVRTJRazRzUjBGQk4wSXNSVUZCYTBNc1EwRkJRME1zUzBGQlJDeEZRVUZSTEVOQlFWSXNSVUZCVjAwc1RVRkJXQ3hEUVVGclFpOUtMRXRCUVd4Q0xFTkJRV3hETzBGQlEwUXNWMEZLUkN4TlFVbFBMRWxCUVVrd1JDeEpRVUZKV1N4SlFVRktMRU5CUVZNMFJTeFRRVUZVTEV0QlFYVkNMSGRDUVVGWFNDeE5RVUYwUXl4RlFVRTRRenRCUVVOdVJDeG5Ra0ZCU1ZNc1QwRkJUVW9zVjBGQlZ6bElMRWRCUVhKQ08wRkJRMEVzWjBKQlFVbHRTU3hUUVVGUlRDeFhRVUZYVFN4SlFVRjJRanRCUVVOQlJpeHBRa0ZCU1Vzc1RVRkJTaXhEUVVGWFNpeE5RVUZZTEVWQlFXdENla29zUzBGQmJFSTdRVUZEUkN4WFFVcE5MRTFCU1VFN1FVRkRURzlLTEhWQ1FVRlhPVWdzUjBGQldDeERRVUZsT0Vnc1YwRkJWMDBzU1VGQk1VSXNTVUZCYTBNeFNpeExRVUZzUXl4RFFVUkxMRU5CUTI5RE8wRkJRekZETzBGQlEwWXNVMEZhUkN4TlFWbFBPMEZCUTB3c1kwRkJTVEJFTEVsQlFVbFpMRWxCUVVvc1EwRkJVM1JGTEV0QlFXSXNSVUZCYjBJN1FVRkRiRUp2U2l4MVFrRkJWemxJTEVkQlFWZ3NRMEZCWlRoSUxGZEJRVmROTEVsQlFURkNMRWxCUVd0RE1Vb3NTMEZCYkVNc1EwRkVhMElzUTBGRGRVSTdRVUZETVVNc1YwRkdSQ3hOUVVWUE8wRkJRMHdzYlVKQlFVOXZTaXhYUVVGWE9VZ3NSMEZCV0N4RFFVRmxPRWdzVjBGQlYwMHNTVUZCTVVJc1EwRkJVQ3hEUVVSTExFTkJRMjFETzBGQlEzcERPMEZCUTBZN1FVRkRSaXhQUVhwQ1JDeE5RWGxDVHp0QlFVTk1PMEZCUTBFdlNTeG5Ra0ZCVVdkRUxFZEJRVklzUTBGQldTeHpRMEZCYzBOcVFpeE5RVUZOUXl4UlFVRTFReXhIUVVGMVJDeFhRVUYyUkN4SFFVRnhSV1VzU1VGQlNWa3NTVUZCU2l4RFFVRlRiME1zVDBGQk9VVXNSMEZCZDBZc1IwRkJjRWM3UVVGRFJEdEJRVU5HT3p0QlFVVkVPenM3TzI5RFFVTm5RbWhFTEVjc1JVRkJTenRCUVVOdVFpeFZRVUZKYUVJc1VVRkJVU3hKUVVGYU8wRkJRMEV2UWl4alFVRlJaMFFzUjBGQlVpeERRVUZaTEcxQ1FVRmFMRVZCUVdsRGFrSXNUVUZCVFhsQ0xFMUJRWFpETEVWQlFTdERWQ3hIUVVFdlF6czdRVUZGUVN4VlFVRkpVaXhWUVVGVlVTeEpRVUZKV1N4SlFVRktMRU5CUVZORExGRkJRWFpDTzBGQlEwRXNWVUZCU1hORUxGZEJRVmR1Uml4TlFVRk5WU3huUWtGQlRpeERRVUYxUWtZc1QwRkJka0lzUTBGQlpqczdRVUZGUVN4VlFVRkpNa1VzVVVGQlNpeEZRVUZqTzBGQlExcHVSaXhqUVVGTmEwSXNZVUZCVGl4RFFVRnZRbWxGTEZOQlFWTm9SaXhSUVVFM1FpeEZRVUYxUTJFc1IwRkJka003UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEM5RExHZENRVUZSWjBRc1IwRkJVaXhEUVVGWkxIbENRVUZhTEVWQlFYVkRWQ3hQUVVGMlF6dEJRVU5FTzBGQlEwWTdPenQzUWtGNlRsTTdRVUZCUlN4aFFVRlBMRXRCUVV0UExFbEJRVm83UVVGQmJVSTdPMEZCUlM5Q096czdPenM3TzNkQ1FVbGhPMEZCUVVVc1lVRkJUeXhMUVVGTGFVTXNUMEZCV2p0QlFVRnpRanM3UVVGRmNrTTdPenM3T3pzN2QwSkJTV0U3UVVGQlJTeGhRVUZQTEV0QlFVdDNRaXhQUVVGYU8wRkJRWE5DT3p0QlFVVnlRenM3T3pzN096dDNRa0ZKVnp0QlFVRkZMR0ZCUVU4c1MwRkJTM0pGTEZGQlFVd3NRMEZCWTBvc1NVRkJja0k3UVVGQk5FSTdPMEZCUlhwRE96czdPenM3TzNkQ1FVbG5RanRCUVVGRkxHRkJRVThzUzBGQlMxY3NaMEpCUVZvN1FVRkJLMEk3T3p0TFFURkpia1E3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08ydENRU3RWWlRaRUxGVTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVONFZHWTdPenM3T3p0QlFVVkJPenM3TzBsQlNVMHJReXhsTEVOQlFXZENMREpDTzBGQlEzQkNPenM3T3p0QlFVMUJPenM3TzBGQlNVRXNNa0pCUVZsRExFMUJRVm9zUlVGQmIwSXZSeXhQUVVGd1FpeEZRVUUyUW1Jc1YwRkJOMElzUlVGQk1FTTJTQ3hMUVVFeFF5eEZRVUZwUkdoRExFdEJRV3BFTEVWQlFYZEVPMEZCUVVFN08wRkJRM1JFTEZGQlFVbDRSaXhSUVVGUkxFbEJRVm83TzBGQlJVRkJMRlZCUVUxNVNDeFBRVUZPTEVkQlFXZENSaXhOUVVGb1FqdEJRVU5CZGtnc1ZVRkJUVEJGTEZGQlFVNHNSMEZCYVVKc1JTeFBRVUZxUWp0QlFVTkJVaXhWUVVGTmVVSXNUVUZCVGl4SFFVRmxLMFlzUzBGQlpqdEJRVU5CZUVnc1ZVRkJUVEJJTEUxQlFVNHNSMEZCWld4RExFdEJRV1k3TzBGQlJVRjRSaXhWUVVGTlJ5eFJRVUZPTEVkQlFXbENMREJDUVVGbFVpeFhRVUZtTEVOQlFXcENPenRCUVVWQlN5eFZRVUZOWVN4SlFVRk9MRWRCUVdFd1J5eFBRVUZQTVVjc1NVRkJjRUk3UVVGRFFXSXNWVUZCVFZjc2EwSkJRVTQ3UVVGRFJEczdPenQ1UTBGRmIwSTdRVUZEYmtJc1ZVRkJTVmdzVVVGQlVTeEpRVUZhT3p0QlFVVkJPMEZCUTBFc1ZVRkJTVUVzVFVGQlRYbENMRTFCUVZZc1JVRkJhMEk3UVVGRGFFSjZRaXhqUVVGTk1rZ3NVMEZCVGl4SFFVRnJRak5JTEUxQlFVMWhMRWxCUVU0c1EwRkJWME1zVjBGQldDeERRVUYxUW1Rc1RVRkJUWGxDTEUxQlFUZENMRVZCUVhGRExGVkJRVU5VTEVkQlFVUXNSVUZCVXp0QlFVTTVSQ3hqUVVGSlFTeEpRVUZKYkVRc1NVRkJTaXhMUVVGaExGVkJRV0lzU1VGQk1rSnJSQ3hKUVVGSkswTXNSVUZCU2l4TFFVRlhMMFFzVFVGQlRUQklMRTFCUVdoRUxFVkJRWGRFTzBGQlEzUkVla29zYjBKQlFWRm5SQ3hIUVVGU0xFTkJRVmtzTmtKQlFWb3NSVUZCTWtORUxFZEJRVE5ETzBGQlEwRm9RaXhyUWtGQlRUSkRMRmRCUVU0c1EwRkJhMEl6UWl4SFFVRnNRanRCUVVORU8wRkJRMFlzVTBGTWFVSXNRMEZCYkVJN1FVRk5SRHRCUVVOR096czdkME5CUlcxQ08wRkJRMnhDTEZWQlFVbG9RaXhSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1VFc1RVRkJUVEpJTEZOQlFWWXNSVUZCY1VJN1FVRkRia0l6U0N4alFVRk5Na2dzVTBGQlRpeERRVUZuUW5oSExFMUJRV2hDTzBGQlEwUTdRVUZEUmpzN1FVRkZSRHM3T3pzN096aENRVWRUTzBGQlExQXNWVUZCU1c1Q0xGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBRU3hOUVVGTmVVZ3NUMEZCVGl4RFFVRmpSeXhUUVVGa0xFTkJRWGRDTlVnc1RVRkJUVEJGTEZGQlFUbENMRU5CUVZBN08wRkJSVUV4UlN4WlFVRk5iMElzYVVKQlFVNDdPMEZCUlVFN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN08wRkJXVUU3T3pzN05rSkJTVk5qTEZFc1JVRkJWVHRCUVVOcVFpeFhRVUZMTDBJc1VVRkJUQ3hEUVVGalF5eFBRVUZrTEVOQlFYTkNMRlZCUVVORExFdEJRVVFzUlVGQlZ6dEJRVU12UWpaQ0xHbENRVUZUTjBJc1MwRkJWRHRCUVVORUxFOUJSa1E3UVVGSFJEczdRVUZGUkRzN096czdPenNyUWtGSlZ6WkNMRkVzUlVGQlZUdEJRVU51UWl4WFFVRkxiVUlzYTBKQlFVd3NSMEZCTUVKdVFpeFJRVUV4UWp0QlFVTkVPenRCUVVWRU96czdPMmREUVVOWmJFSXNSeXhGUVVGTE8wRkJRMllzVlVGQlNXaENMRkZCUVZFc1NVRkJXanM3UVVGRlFTeFZRVUZKU3l4UlFVRlJPMEZCUTFaMlF5eGpRVUZOYTBRc1NVRkJTV3hFTEVsQlJFRTdRVUZGVmxnc1lVRkJTelpFTEVsQlFVbFpMRWxCUVVvc1EwRkJVMnRGTEUxQlJrbzdRVUZIVmpsRUxHTkJRVTFvUWl4SlFVRkpXU3hKUVVGS0xFTkJRVk5KTzBGQlNFd3NUMEZCV2pzN1FVRk5RU3hWUVVGSmFFTXNUVUZCVFhGRUxHdENRVUZXTEVWQlFUaENPMEZCUXpWQ2NrUXNZMEZCVFhGRUxHdENRVUZPTEVOQlFYbENhRVFzUzBGQmVrSTdRVUZEUkR0QlFVTkdPenM3ZDBKQmRrTmhPMEZCUVVVc1lVRkJUeXhMUVVGTGNVVXNVVUZCV2p0QlFVRjFRanM3UVVGRmRrTTdPenM3T3pzN2QwSkJTVmM3UVVGQlJTeGhRVUZQTEV0QlFVdDJSU3hSUVVGTUxFTkJRV05LTEVsQlFYSkNPMEZCUVRSQ096czdTMEZ1UnpORE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenRyUWtGM1NXVjFTQ3hsT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVONFNXWTdPenM3UVVGRlFTeEpRVUZOVHl4aFFVRmhMRVZCUVVOcVFpeFBRVUZQTEdkQ1FVRlNMRVZCUVRCQ1ZDeFJRVUZSTEdsQ1FVRnNReXhGUVVGdVFqczdRVUZGUVRzN096czdPMGxCUzAweVFpeFZPMEZCUlVvc2MwSkJRVmx1U1N4WFFVRmFMRVZCUVhsQ08wRkJRVUU3TzBGQlEzWkNMRkZCUVVsTExGRkJRVkVzU1VGQldqczdRVUZGUVVFc1ZVRkJUWE5DTEZWQlFVNHNSMEZCYlVJc1JVRkJia0k3UVVGRFFYUkNMRlZCUVUxRkxGRkJRVTRzUjBGQmFVSXNSVUZCYWtJN08wRkJSVUVzVTBGQlN6WklMRXRCUVV3c1IwRkJZWEJKTEdWQlFXVXNSVUZCTlVJN08wRkJSVUVzVTBGQlMzRkpMR2RDUVVGTUxFTkJRWE5DTEV0QlFVdEVMRXRCUVROQ08wRkJRMFE3T3pzN05FSkJTVTgzUml4UkxFVkJRVlU3UVVGRGFFSXNWMEZCUzFvc1ZVRkJUQ3hEUVVGblFqUkVMRWxCUVdoQ0xFTkJRWEZDYUVRc1VVRkJja0k3UVVGRFJEczdPM2xDUVVWSmVVUXNTU3hGUVVGTk8wRkJRMVFzVlVGQlNYTkRMRTlCUVU5MFF5eExRVUZMYUVrc1MwRkJUQ3hEUVVGWExFZEJRVmdzUTBGQldEczdRVUZGUVN4aFFVRlBMRXRCUVV0MVN5eGpRVUZNTEVOQlFXOUNSQ3hKUVVGd1FpeERRVUZRTzBGQlEwUTdPenNyUWtGRlZYUkRMRWtzUlVGQlRUdEJRVU5tTEZWQlFVazVTQ3hUUVVGVExFVkJRV0k3UVVGRFFTeFZRVUZKYjBzc1QwRkJUM1JETEV0QlFVdG9TU3hMUVVGTUxFTkJRVmNzUjBGQldDeERRVUZZTzBGQlEwRkZMR0ZCUVU5dFNpeEpRVUZRTEVkQlFXTnBRaXhMUVVGTFJTeEhRVUZNTEVWQlFXUTdRVUZEUVhSTExHRkJRVTlsTEVkQlFWQXNSMEZCWVN4TFFVRkxjMG9zWTBGQlRDeERRVUZ2UWtRc1NVRkJjRUlzUTBGQllqczdRVUZGUVN4aFFVRlBjRXNzVFVGQlVEdEJRVU5FT3pzN2JVTkJSV052U3l4SkxFVkJRVTA3UVVGRGJrSXNWVUZCU1hKS0xFMUJRVTBzUzBGQlMyMUtMRXRCUVdZN1FVRkRRVVVzVjBGQlN6RklMRTlCUVV3c1EwRkJZU3hWUVVGRGFrUXNTMEZCUkN4RlFVRlhPMEZCUTNSQ2MwSXNZMEZCVFVFc1NVRkJTWFJDTEV0QlFVb3NRMEZCVGp0QlFVTkVMRTlCUmtRN08wRkJTVUVzWVVGQlQzTkNMRWRCUVZBN1FVRkRSRHM3TzJ0RFFVVmhRU3hITEVWQlFVczdRVUZEYWtJc1ZVRkJTVUVzU1VGQlNYZEtMRmRCUVVvc1MwRkJiMEpETEUxQlFYQkNMRWxCUVRoQ2Vrb3NTVUZCU1hkS0xGZEJRVW9zUzBGQmIwSnVRaXhMUVVGMFJDeEZRVUUyUkR0QlFVTXpSQ3hsUVVGUExFbEJRVkE3UVVGRFJEczdRVUZGUkN4aFFVRlBMRXRCUVZBN1FVRkRSRHM3TzNGRFFVZG5RblJKTEUwc1JVRkJVVHRCUVVGQk96dEJRVVYyUWl4VlFVRkpNa29zVlVGQlZTeFRRVUZXUVN4UFFVRlZMRU5CUVVORExGTkJRVVFzUlVGQlpUczdRVUZGTTBKQkxHdENRVUZWUXl4TFFVRldMRU5CUVdkQ0xGVkJRVU5ETEUxQlFVUXNSVUZCV1R0QlFVTXhRaXhwUWtGQlMwTXNWVUZCVEN4RFFVRm5Ra1FzVFVGQmFFSTdRVUZEUkN4VFFVWkVPMEZCU1VRc1QwRk9SRHM3UVVGUlFTeFhRVUZMVml4TFFVRk1MRWRCUVdGTkxFOUJRVTlOTEZkQlFWQXNRMEZCYlVKb1N5eE5RVUZ1UWl4RlFVRXlRakpLTEU5QlFUTkNMRU5CUVdJN1FVRkZSRHM3T3l0Q1FVVlZha2tzU3l4RlFVRlBPMEZCUTJoQ0xGZEJRVXRwUWl4VlFVRk1MRU5CUVdkQ1ppeFBRVUZvUWl4RFFVRjNRaXhWUVVGRE1rSXNVVUZCUkN4RlFVRmpPMEZCUTNCRFFTeHBRa0ZCVXpkQ0xFdEJRVlE3UVVGRFJDeFBRVVpFTzBGQlIwUTdPenNyUWtGRlZXOUpMRTBzUlVGQlVUczdRVUZGYWtJc1ZVRkJTVGRLTEUxQlFVMDJTaXhQUVVGUE9Vb3NUVUZCYWtJN1FVRkRRU3hWUVVGSmFVc3NaMEpCUVVvN08wRkJSVUVzVlVGQlNXaExMRWxCUVVsM1NpeFhRVUZLTEV0QlFXOUNReXhOUVVGNFFpeEZRVUZuUXp0QlFVTTVRazhzYTBKQlFWVkRMRmRCUVZjeFF5eE5RVUZ5UWp0QlFVTkVPenRCUVVWRUxGVkJRVWwyU0N4SlFVRkpkMG9zVjBGQlNpeExRVUZ2UW01Q0xFdEJRWGhDTEVWQlFTdENPMEZCUXpkQ01rSXNhMEpCUVZWRExGZEJRVmRxUXl4TFFVRnlRanRCUVVORU96dEJRVVZFTEZWQlFVbHJReXhqUVVGalRDeFBRVUZQVFN4UFFVRjZRanM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1ZVRkJTVU1zVjBGQlYzQkxMRWxCUVVrMlNpeFBRVUZQVVN4SlFVRllMRU5CUVdZN08wRkJSVUZvVEN4alFVRlJhVXdzU1VGQlVpeERRVUZoVkN4UFFVRlBNMHNzU1VGQlVDeEhRVUZqTEZsQlFXUXNSMEZCTmtKblRDeFhRVUUzUWl4SFFVRXlReXhsUVVGNFJDeEZRVUY1UlN4NVFrRkJaVVVzVVVGQlppeERRVUY2UlRzN1FVRkZRU3hWUVVGSlVDeFBRVUZQTTBzc1NVRkJVQ3hMUVVGblFpeFJRVUZ3UWl4RlFVRTRRanRCUVVNMVFpeGhRVUZMY1V3c1ZVRkJUQ3hEUVVGblFqdEJRVU5rTDBNc2FVSkJRVTluUkN4WFFVRlhOME1zVFVGRVNqdEJRVVZrVEN4cFFrRkJUekJETEU5QlJrODdRVUZIWkhSSExHbENRVUZQZDBjc1YwRklUenRCUVVsa0wwa3NaMEpCUVUxcFNqdEJRVXBSTEZOQlFXaENPMEZCVFVRN08wRkJSVVFzVlVGQlNWQXNUMEZCVHpOTExFbEJRVkFzUzBGQlowSXNTMEZCY0VJc1JVRkJNa0k3UVVGRGVrSXNZVUZCUzNGTUxGVkJRVXdzUTBGQlowSTdRVUZEWkM5RExHbENRVUZQWjBRc1YwRkJWM1pETEVkQlJFbzdRVUZGWkZnc2FVSkJRVTh3UXl4UFFVWlBPMEZCUjJSMFJ5eHBRa0ZCVDNkSExGZEJTRTg3UVVGSlpDOUpMR2RDUVVGTmFVbzdRVUZLVVN4VFFVRm9RanRCUVUxRU96dEJRVVZFTEZWQlFVbFFMRTlCUVU4elN5eEpRVUZRTEV0QlFXZENMRkZCUVhCQ0xFVkJRVGhDTzBGQlF6VkNMR0ZCUVV0eFRDeFZRVUZNTEVOQlFXZENPMEZCUTJRdlF5eHBRa0ZCVDJkRUxGZEJRVmN2UXl4TlFVUktPMEZCUldSSUxHbENRVUZQTUVNc1QwRkdUenRCUVVka2RFY3NhVUpCUVU5M1J6dEJRVWhQTEZOQlFXaENPMEZCUzBRN1FVRkRSanM3TzNkQ1FUTkhWVHRCUVVGRkxHRkJRVThzUzBGQlMyWXNTMEZCV2p0QlFVRnZRanM3T3pzN1FVRXJSelZDTEVsQlFVbHhRaXhyUTBGQllTeEZRVUZETjBNc1VVRkJVU3hSUVVGVUxFVkJRVzFDVFN4TFFVRkxMRXRCUVhoQ0xFVkJRU3RDVWl4UlFVRlJMRkZCUVhaRExFVkJRV3BDTzBGQlEwRXNTVUZCU1hkRExHdERRVUZoTEVWQlFVTXhReXhSUVVGUkxGRkJRVlFzUlVGQmJVSlRMRTlCUVU4c1QwRkJNVUlzUlVGQmFrSTdhMEpCUTFGclFpeFZPenM3T3pzN08wRkRka2xtT3p0QlFVVkJPenRCUVVWQk96dEJRVVZCT3p0QlFVVkJPenRCUVVWQk96dEJRVVZCTEhORFFVRnpReXgxUTBGQmRVTXNaMEpCUVdkQ096dEJRVVUzUmp0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1MwRkJTenRCUVVOTU8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZzdRVUZEUVN4SFFVRkhPMEZCUTBnN08wRkJSVUU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRU3hGT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJSQk96czdPMEZCUTBFN096czdRVUZEUVRzN096czdPMEZCUlVFN096czdPMGxCUzAxMVFpeFBPMEZCUTBvN096czdPenM3T3pzN096dEJRV1ZCT3pzN096czdRVUZOUVN4dFFrRkJXVGRDTEV0QlFWb3NSVUZCYlVJNFFpeEhRVUZ1UWl4RlFVRjNRa01zVFVGQmVFSXNSVUZCWjBNN1FVRkJRVHM3UVVGRE9VSXNVVUZCU1haS0xGRkJRVkVzU1VGQldqczdRVUZGUVVFc1ZVRkJUWGxDTEUxQlFVNHNSMEZCWlN0R0xFdEJRV1k3UVVGRFFYaElMRlZCUVUxaExFbEJRVTRzUjBGQllYbEpMRWRCUVdJN08wRkJSVUYwU2l4VlFVRk5Na0lzVDBGQlRpeEhRVUZuUWpSSUxFOUJRVTlETEZWQlFWQXNSMEZCYjBJc1MwRkJjRU03TzBGQlJVRjRTaXhWUVVGTmJVUXNWVUZCVGl4SFFVRnRRaXhGUVVGdVFqdEJRVU5CYmtRc1ZVRkJUWE5DTEZWQlFVNHNSMEZCYlVJc1JVRkJia0k3UVVGRFFYUkNMRlZCUVUxNVNpeGhRVUZPTEVkQlFYTkNMRVZCUVhSQ096dEJRVVZCU0N4UlFVRkplRWtzVjBGQlNpeERRVUZuUWpCSExFdEJRV2hDTEVWQlFYVkNMRlZCUVVONFJ5eEhRVUZFTEVWQlFWTTdRVUZET1VJN1FVRkRRU3hWUVVGSlFTeEpRVUZKVVN4SlFVRktMRXRCUVdGblJ5eExRVUZxUWl4RlFVRjNRanRCUVVOMFFuWktMR2RDUVVGUmFVd3NTVUZCVWl4RFFVRmhMSGxDUVVGaUxFVkJRWGREYkVrc1IwRkJlRU03UVVGRFFTeG5Ra0ZCVVVFc1NVRkJTV3hFTEVsQlFWbzdRVUZEUlN4bFFVRkxMRk5CUVV3N1FVRkJaMEpyUXl4clFrRkJUVEJLTEZWQlFVNHNRMEZCYVVJeFNTeEhRVUZxUWl4RlFVRjFRanRCUVVOMlF5eGxRVUZMTEZGQlFVdzdRVUZCWldoQ0xHdENRVUZOTWtvc1pVRkJUaXhEUVVGelFqTkpMRWRCUVhSQ0xFVkJRVFJDTzBGQlF6TkRMR1ZCUVVzc1VVRkJURHRCUVVGbGFFSXNhMEpCUVUwMFNpeGxRVUZPTEVOQlFYTkNOVWtzUjBGQmRFSXNSVUZCTkVJN1FVRklOME03UVVGTFJEdEJRVU5HTEV0QlZrUTdRVUZYUkRzN1FVRkZSRHM3T3pzN096czdPenRCUVd0Q1FUczdPenM3T3pzN01rSkJVVTkyUWl4TkxFVkJRVkZ2UkN4VExFVkJRVmRzUkN4WExFVkJRWGxETzBGQlFVRXNWVUZCTlVKclN5eExRVUUwUWl4MVJVRkJjRUlzUzBGQmIwSTdRVUZCUVN4VlFVRmlReXhIUVVGaExIVkZRVUZRTEV0QlFVODdPMEZCUTJwRkxGVkJRVWs1U2l4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSkswb3NWMEZCVnl4RlFVRm1PenRCUVVWQlFTeGxRVUZUUkN4SFFVRlVMRWRCUVdWQkxFZEJRV1k3UVVGRFFVTXNaVUZCVTBZc1MwRkJWQ3hIUVVGcFFrRXNTMEZCYWtJN1FVRkRRVVVzWlVGQlUzUkxMRTFCUVZRc1IwRkJhMEpCTEUxQlFXeENPMEZCUTBGelN5eGxRVUZUYkVnc1UwRkJWQ3hIUVVGeFFrRXNVMEZCY2tJN1FVRkRRV3RJTEdWQlFWTndTeXhYUVVGVUxFZEJRWFZDUVN4WFFVRjJRanM3UVVGRlFURkNMR05CUVZGblJDeEhRVUZTTEVOQlFWa3NiVVJCUVZvc1JVRkJhVVU0U1N4UlFVRnFSVHM3UVVGRlFTdzBRa0ZCWTBFc1VVRkJaQ3hGUVVGM1FpeEZRVUZEYUVnc1VVRkJVU3hMUVVGVUxFVkJRWGhDT3p0QlFVVkJMR0ZCUVU4dlF5eE5RVUZOWjBzc1QwRkJUaXhEUVVGalJDeFJRVUZrTEVOQlFWQTdRVUZEUkRzN08yOURRVVZsUVN4UkxFVkJRVlU3UVVGRGVFSXNWVUZCU1M5S0xGRkJRVkVzU1VGQldqdEJRVU5CTDBJc1kwRkJVV2RFTEVkQlFWSXNRMEZCV1N4dFJFRkJXaXhGUVVGcFJUaEpMRkZCUVdwRk96dEJRVVZCTERSQ1FVRmpRU3hSUVVGa0xFVkJRWGRDTEVWQlFVTm9TQ3hSUVVGUkxFbEJRVlFzUlVGQmVFSTdPMEZCUlVFc1lVRkJUeTlETEUxQlFVMW5TeXhQUVVGT0xFTkJRV05FTEZGQlFXUXNRMEZCVUR0QlFVTkVPenRCUVVWRU96czdPenM3T3pzN09FSkJUVlYwU3l4TkxFVkJRVkYzU3l4TkxFVkJRVzFFTzBGQlFVRXNWVUZCTTBOS0xFdEJRVEpETEhWRlFVRnVReXhMUVVGdFF6dEJRVUZCTEZWQlFUVkNReXhIUVVFMFFpeDFSVUZCZEVJc1MwRkJjMEk3UVVGQlFTeFZRVUZtYUVzc1RVRkJaU3gxUlVGQlRpeEpRVUZOT3p0QlFVTnVSU3hWUVVGSlJTeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpLMG9zVjBGQlZ5eEZRVUZtT3p0QlFVVkJRU3hsUVVGVFJDeEhRVUZVTEVkQlFXVkJMRWRCUVdZN1FVRkRRVU1zWlVGQlUwWXNTMEZCVkN4SFFVRnBRa0VzUzBGQmFrSTdRVUZEUVVVc1pVRkJVM1JMTEUxQlFWUXNSMEZCYTBKQkxFMUJRV3hDTzBGQlEwRnpTeXhsUVVGVGJFa3NVVUZCVkN4SFFVRnZRbTlKTEUxQlFYQkNPMEZCUTBGR0xHVkJRVk5xU3l4TlFVRlVMRWRCUVd0Q1FTeE5RVUZzUWpzN1FVRkZRVGRDTEdOQlFWRm5SQ3hIUVVGU0xFTkJRVmtzT0VOQlFWb3NSVUZCTkVRNFNTeFJRVUUxUkRzN1FVRkZRU3cwUWtGQlkwRXNVVUZCWkN4RlFVRjNRaXhGUVVGRGFFZ3NVVUZCVVN4TFFVRlVMRVZCUVhoQ096dEJRVVZCTEdGQlFVOHZReXhOUVVGTmEwc3NWVUZCVGl4RFFVRnBRa2dzVVVGQmFrSXNRMEZCVUR0QlFVTkVPenRCUVVWRU96czdPenM3T3p0dlEwRkxaMEpCTEZFc1JVRkJWVHRCUVVONFFpeFZRVUZKTDBvc1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNXMUxMRmxCUVZsS0xGbEJRVmtzUlVGQk5VSTdPMEZCUlVFc05FSkJRV05KTEZOQlFXUXNSVUZCZVVJc1JVRkJRM0JJTEZGQlFWRXNTVUZCVkN4RlFVRjZRanM3UVVGRlFTeGhRVUZQTDBNc1RVRkJUV3RMTEZWQlFVNHNRMEZCYVVKRExGTkJRV3BDTEVOQlFWQTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdlVUpCUzB0R0xFMHNSVUZCVVR0QlFVTllMRlZCUVVscVN5eFJRVUZSTEVsQlFWbzdPMEZCUlVFN1FVRkRRVHRCUVVOQkxGVkJRVWx2U3l4VlFVRlZPMEZCUTFwMFRTeGpRVUZOTEUxQlJFMHNSVUZEUlRCRUxFMUJRVTE0UWl4TlFVRk5lVUlzVFVGRVpDeEZRVU56UWtNc1NVRkJTWFZKTzBGQlJERkNMRTlCUVdRN08wRkJTVUVzWVVGQlR5eHpRa0ZCV1N4VlFVRkRNVVVzVDBGQlJDeEZRVUZWYmtJc1RVRkJWaXhGUVVGeFFqdEJRVU4wUTNCRkxHTkJRVTFoTEVsQlFVNHNRMEZCVjJsQ0xGZEJRVmdzUTBGQmRVSnpTU3hQUVVGMlFpeEZRVUZuUXl4VlFVRkRja2tzUzBGQlJDeEZRVUZYTzBGQlEzcERPVVFzYTBKQlFWRm5SQ3hIUVVGU0xFTkJRVmtzYVVKQlFWb3NSVUZCSzBKakxFdEJRUzlDTzBGQlEwRXNZMEZCU1VFc1RVRkJUVWdzU1VGQlRpeERRVUZYU1N4SlFVRllMRXRCUVc5Q0xFZEJRWGhDTEVWQlFUWkNPMEZCUXpOQ2RVUXNiMEpCUVZGNFJDeE5RVUZOU0N4SlFVRk9MRU5CUVZkMFJTeExRVUZ1UWp0QlFVTkVMRmRCUmtRc1RVRkZUenRCUVVOTU9FY3NiVUpCUVU5eVF5eE5RVUZOU0N4SlFVRk9MRU5CUVZjd1F5eEpRVUZzUWp0QlFVTkVPMEZCUTBZc1UwRlFSRHRCUVZGRUxFOUJWRTBzUTBGQlVEdEJRVlZFT3p0QlFVVkVPenM3T3pzN096dHRRMEZMWlhCRExGRXNSVUZCVlR0QlFVTjJRaXhYUVVGTGJVa3NjMEpCUVV3c1IwRkJPRUp1U1N4UlFVRTVRanRCUVVORU96czdORUpCUlU4MlNDeFJMRVZCUVZVN1FVRkRhRUlzVlVGQlNTOUtMRkZCUVZFc1NVRkJXanM3UVVGRlFTeGhRVUZQTEhOQ1FVRlpMRlZCUVVOMVJpeFBRVUZFTEVWQlFWVnVRaXhOUVVGV0xFVkJRWEZDTzBGQlEzUkRMRmxCUVVseVFpeFRRVUZUWjBnc1UwRkJVMmhJTEUxQlFYUkNPMEZCUTBFc1dVRkJTWEJFTEdOQlFXTnZTeXhUUVVGVGNFc3NWMEZCVkN4SlFVRjNRaXhGUVVFeFF6dEJRVU5CTEZsQlFVbEdMR1ZCUVVvN08wRkJSVUU3UVVGRFFTeFpRVUZKTmtZc1lVRkJZVHRCUVVObWVFZ3NaMEpCUVUwc1VVRkVVeXhGUVVORE1FUXNUVUZCVFhoQ0xFMUJRVTE1UWl4TlFVUmlMRVZCUTNGQ1F5eEpRVUZKTVVJc1RVRkJUVEpDTEU5QlJDOUNPMEZCUldaRExHZENRVUZOTEVWQlFVVnRRaXhSUVVGUlFTeE5RVUZXTzBGQlJsTXNVMEZCYWtJN08wRkJTMEU1UlN4blFrRkJVV2RFTEVkQlFWSXNRMEZCV1N4elFrRkJXaXhGUVVGdlF6aEpMRkZCUVhCRExFVkJRVGhEZWtVc1ZVRkJPVU03TzBGQlJVRkJMRzFDUVVGWE1VUXNTVUZCV0N4RFFVRm5RblJGTEV0QlFXaENMRWRCUVhkQ2NVTXNWMEZCZUVJN1FVRkRRVEpHTEcxQ1FVRlhNVVFzU1VGQldDeERRVUZuUW5SRkxFdEJRV2hDTEVOQlFYTkNaMDRzVVVGQmRFSXNSMEZCYVVOMFN5eE5RVUZOZVVJc1RVRkJka003TzBGQlJVRXNXVUZCU1hOSkxGTkJRVk4wU3l4TlFVRmlMRVZCUVhGQ08wRkJRMjVDUVN4dFFrRkJVM05MTEZOQlFWTjBTeXhOUVVGc1FqdEJRVU5CTmtZc2NVSkJRVmN4UkN4SlFVRllMRU5CUVdkQ2JrTXNUVUZCYUVJc1IwRkJlVUp6U3l4VFFVRlRkRXNzVFVGQmJFTTdRVUZEUkRzN1FVRkZSQ3haUVVGSmMwc3NVMEZCVTBRc1IwRkJZaXhGUVVGclFuaEZMRmRCUVZjeFJDeEpRVUZZTEVOQlFXZENhMGtzUjBGQmFFSXNSMEZCYzBKRExGTkJRVk5FTEVkQlFTOUNPMEZCUTJ4Q0xGbEJRVWxETEZOQlFWTkdMRXRCUVdJc1JVRkJiMEoyUlN4WFFVRlhNVVFzU1VGQldDeERRVUZuUW1sSkxFdEJRV2hDTEVkQlFYZENSU3hUUVVGVFJpeExRVUZxUXp0QlFVTndRaXhaUVVGSlJTeFRRVUZUYkVnc1UwRkJZaXhGUVVGM1FubERMRmRCUVZjeFJDeEpRVUZZTEVOQlFXZENjVUlzVTBGQmFFSXNSMEZCTkVJNFJ5eFRRVUZUYkVnc1UwRkJja003TzBGQlJYaENMRmxCUVVsRkxFMUJRVW9zUlVGQldUdEJRVU5XT1VVc2EwSkJRVkZuUkN4SFFVRlNMRU5CUVZrc2RVTkJRVm9zUlVGQmNVUnhSU3hWUVVGeVJEdEJRVU5FTEZOQlJrUXNUVUZGVHp0QlFVTk1ja2dzYTBKQlFWRm5SQ3hIUVVGU0xFTkJRVmtzZFVOQlFWb3NSVUZCY1VSeFJTeFZRVUZ5UkR0QlFVTkVPenRCUVVWRU8wRkJRMEYwUml4alFVRk5ZU3hKUVVGT0xFTkJRVmRwUWl4WFFVRllMRU5CUVhWQ2QwUXNWVUZCZGtJc1JVRkJiVU1zVlVGQlEzWkVMRXRCUVVRc1JVRkJWenRCUVVNMVF6bEVMR3RDUVVGUlowUXNSMEZCVWl4RFFVRlpMSGREUVVGYUxFVkJRWE5FWXl4TFFVRjBSRHRCUVVOQkxHTkJRVWxCTEUxQlFVMUlMRWxCUVU0c1EwRkJWMGtzU1VGQldDeExRVUZ2UWl4SFFVRjRRaXhGUVVFMlFqdEJRVU16UWp0QlFVTkJMR2RDUVVGSmFVa3NVMEZCVTJ4SkxFMUJRVTFJTEVsQlFVNHNRMEZCVjBNc1VVRkJlRUk3TzBGQlJVRXNaMEpCUVVsclFpeE5RVUZLTEVWQlFWazdRVUZEVm5SRUxIVkNRVUZUYzBNc1RVRkJUVWdzU1VGQlRpeERRVUZYYmtNc1RVRkJjRUk3UVVGRFFVVXNORUpCUVdOdlF5eE5RVUZOU0N4SlFVRk9MRU5CUVZkMFJTeExRVUY2UWp0QlFVTkVPenRCUVVWRUxHZENRVUZKYVU0c1UwRkJVeXhwUTBGQmRVSjJTeXhMUVVGMlFpeEZRVUU0UW1sTExFMUJRVGxDTEVWQlFYTkRlRXNzVFVGQmRFTXNSVUZCT0VNc1NVRkJPVU1zUlVGQmIwUkZMRmRCUVhCRUxFVkJRV2xGYjBNc1RVRkJUVWdzU1VGQlRpeERRVUZYTkVrc2FVSkJRVFZGTEVOQlFXSTdRVUZEUVhoTExHdENRVUZOYlVRc1ZVRkJUaXhEUVVGcFFqaEhMRTFCUVdwQ0xFbEJRVEpDVFN4TlFVRXpRanM3UVVGRlFXaEdMRzlDUVVGUlowWXNUVUZCVWp0QlFVTkVMRmRCWWtRc1RVRmhUenRCUVVOTU8wRkJRMEZ1Unl4dFFrRkJUM0pETEUxQlFVMUlMRWxCUVU0c1EwRkJWekJETEVsQlFXeENPMEZCUTBRN1FVRkRSaXhUUVc1Q1JEdEJRVzlDUkN4UFFYQkVUU3hEUVVGUU8wRkJjMFJFT3pzN0swSkJSVlY1Uml4UkxFVkJRVlU3UVVGRGJrSXNWVUZCU1M5S0xGRkJRVkVzU1VGQldqczdRVUZGUVN4aFFVRlBMSE5DUVVGWkxGVkJRVU4xUml4UFFVRkVMRVZCUVZWdVFpeE5RVUZXTEVWQlFYRkNPenRCUVVWMFF6dEJRVU5CTEZsQlFVbHhSeXhsUVVGbE8wRkJRMnBDTTAwc1owSkJRVTBzVjBGRVZ5eEZRVU5GTUVRc1RVRkJUWGhDTEUxQlFVMTVRaXhOUVVSa0xFVkJRM05DUXl4SlFVRkpNVUlzVFVGQlRUSkNMRTlCUkdoRE8wRkJSV3BDUXl4blFrRkJUVHRCUVVaWExGTkJRVzVDT3p0QlFVdEJPMEZCUTBFN08wRkJSVUU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFc1dVRkJTVzFKTEZGQlFVb3NSVUZCWXp0QlFVTmFMR05CUVVsQkxGTkJRVk01Uml4alFVRlVMRU5CUVhkQ0xFdEJRWGhDTEVOQlFVb3NSVUZCYjBOM1J5eGhRVUZoTjBrc1NVRkJZaXhEUVVGclFtdEpMRWRCUVd4Q0xFZEJRWGRDUXl4VFFVRlRSQ3hIUVVGcVF6dEJRVU53UXl4alFVRkpReXhUUVVGVE9VWXNZMEZCVkN4RFFVRjNRaXhQUVVGNFFpeERRVUZLTEVWQlFYTkRkMGNzWVVGQllUZEpMRWxCUVdJc1EwRkJhMEpwU1N4TFFVRnNRaXhIUVVFd1FrVXNVMEZCVTBZc1MwRkJia003UVVGRGRFTXNZMEZCU1VVc1UwRkJVemxHTEdOQlFWUXNRMEZCZDBJc1VVRkJlRUlzUTBGQlNpeEZRVUYxUTNkSExHRkJRV0UzU1N4SlFVRmlMRU5CUVd0Q2JrTXNUVUZCYkVJc1IwRkJNa0p6U3l4VFFVRlRkRXNzVFVGQmNFTTdRVUZEZGtNc1kwRkJTWE5MTEZOQlFWTTVSaXhqUVVGVUxFTkJRWGRDTEZWQlFYaENMRU5CUVVvc1JVRkJlVU4zUnl4aFFVRmhOMGtzU1VGQllpeERRVUZyUWpWRUxGRkJRV3hDTEVkQlFUWkNLMHdzVTBGQlV5OU1MRkZCUVhSRE8wRkJRM3BETEdOQlFVa3JUQ3hUUVVGVE9VWXNZMEZCVkN4RFFVRjNRaXhWUVVGNFFpeERRVUZLTEVWQlFYbERkMGNzWVVGQllUZEpMRWxCUVdJc1EwRkJhMEpETEZGQlFXeENMRWRCUVRaQ2Ewa3NVMEZCVTJ4SkxGRkJRWFJETzBGQlF6RkRPenRCUVVWRUxGbEJRVWx4UXl4MVFrRkJkVUkyUml4VFFVRlRha3NzVFVGQmNFTTdPMEZCUlVFeVN5eHhRa0ZCWVRkSkxFbEJRV0lzUTBGQmEwSnRRaXhOUVVGc1FpeEhRVUV5UW1kSUxGTkJRVk5vU0N4TlFVRndRenM3UVVGRlFTeFpRVUZKTEVOQlFVTnRRaXh2UWtGQlRDeEZRVUV5UW5WSExHRkJRV0UzU1N4SlFVRmlMRU5CUVd0Q2MwTXNiMEpCUVd4Q0xFZEJRWGxEUVN4dlFrRkJla003TzBGQlJUTkNha2NzWjBKQlFWRm5SQ3hIUVVGU0xFTkJRVmtzYVVOQlFWb3NSVUZCSzBNNFNTeFJRVUV2UXl4RlFVRjVSRlVzV1VGQmVrUTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEY2U3l4alFVRk5ZU3hKUVVGT0xFTkJRVmRwUWl4WFFVRllMRU5CUVhWQ01ra3NXVUZCZGtJc1JVRkJjVU1zVlVGQlF6RkpMRXRCUVVRc1JVRkJWenRCUVVNNVF6bEVMR3RDUVVGUlowUXNSMEZCVWl4RFFVRlpMR3REUVVGYUxFVkJRV2RFWXl4TFFVRm9SRHM3UVVGRlFTeGpRVUZKZEVNc1UwRkJVM05ETEUxQlFVMUlMRWxCUVU0c1EwRkJWMjVETEUxQlFYaENPMEZCUTBFc1kwRkJTWGRMTEZOQlFWTnNTU3hOUVVGTlNDeEpRVUZPTEVOQlFWZERMRkZCUVhoQ096dEJRVVZCTEdOQlFVazJTU3hwUWtGQmFVSXhTeXhOUVVGTmVVb3NZVUZCVGl4RFFVRnZRbEVzVFVGQmNFSXNRMEZCY2tJN1FVRkRRU3hwUWtGQlQycExMRTFCUVUxNVNpeGhRVUZPTEVOQlFXOUNVU3hOUVVGd1FpeERRVUZRTzBGQlEwRXNZMEZCU1ZNc1kwRkJTaXhGUVVGdlFrRXNaVUZCWlhSS0xHbENRVUZtT3p0QlFVVndRaXhqUVVGSlZ5eE5RVUZOU0N4SlFVRk9MRU5CUVZkSkxFbEJRVmdzUjBGQmEwSXNSMEZCZEVJc1JVRkJNa0k3UVVGRGVrSXZSQ3h2UWtGQlVXZEVMRWRCUVZJc1EwRkJXU3h0UTBGQldpeEZRVUZwUkdNc1RVRkJUVWdzU1VGQlRpeERRVUZYTkVrc2FVSkJRVFZFTEVWQlFTdEZVQ3hOUVVFdlJUdEJRVU5CVXl3MlFrRkJhVUlzT0VKQlFXOUNNVXNzVFVGQlRYbENMRTFCUVRGQ0xFVkJRV3REZDBrc1RVRkJiRU1zUlVGQk1FTnFTeXhOUVVGTllTeEpRVUZvUkN4RlFVRnpSR3RDTEUxQlFVMUlMRWxCUVU0c1EwRkJWelJKTEdsQ1FVRnFSU3hEUVVGcVFqdEJRVU5CZUVzc2EwSkJRVTE1U2l4aFFVRk9MRU5CUVc5Q1VTeE5RVUZ3UWl4SlFVRTRRbE1zWTBGQk9VSTdRVUZEUkN4WFFVcEVMRTFCU1U4c1NVRkJTVE5KTEUxQlFVMUlMRWxCUVU0c1EwRkJWMGtzU1VGQldDeExRVUZ2UWl4SFFVRjRRaXhGUVVFMlFqdEJRVU5zUXk5RUxHOUNRVUZSWjBRc1IwRkJVaXhEUVVGWkxIZERRVUZhTEVWQlFYTkVZeXhMUVVGMFJDeEZRVUUyUkM5Q0xFMUJRVTE1U2l4aFFVRnVSVHM3UVVGRlFTeG5Ra0ZCU1dNc1UwRkJVeXhwUTBGQmRVSjJTeXhMUVVGMlFpeEZRVUU0UW1sTExFMUJRVGxDTEVWQlFYTkRlRXNzVFVGQmRFTXNSVUZCT0VNc1NVRkJPVU1zUlVGQmIwUnpReXhOUVVGTlNDeEpRVUZPTEVOQlFWZDBSU3hMUVVFdlJDeEZRVUZ6Ulc5T0xHVkJRV1YyUml4UlFVRnlSaXhGUVVFclJuQkVMRTFCUVUxSUxFbEJRVTRzUTBGQlYyOURMRTlCUVRGSExFVkJRVzFJUlN4dlFrRkJia2dzUTBGQllqdEJRVU5CYkVVc2EwSkJRVTF6UWl4VlFVRk9MRU5CUVdsQ01ra3NUVUZCYWtJc1NVRkJNa0pOTEUxQlFUTkNPenRCUVVWQmFFWXNiMEpCUVZGblJpeE5RVUZTTzBGQlEwRkhMREpDUVVGbGRFUXNTMEZCWml4RFFVRnhRbTFFTEUxQlFYSkNPMEZCUTBRc1YwRlNUU3hOUVZGQk8wRkJRMHh1Unl4dFFrRkJUM0pETEUxQlFVMUlMRWxCUVU0c1EwRkJWekJETEVsQlFXeENPMEZCUTBRN1FVRkRSaXhUUVhwQ1JEdEJRVEJDUkN4UFFUZEVUU3hEUVVGUU8wRkJLMFJFT3p0QlFVVkVPenM3T3l0Q1FVTlhkRVFzUnl4RlFVRkxPMEZCUTJRc1ZVRkJTV2hDTEZGQlFWRXNTVUZCV2pzN1FVRkZRU3hWUVVGSmMwc3NWMEZCVjNSTExFMUJRVTF0UkN4VlFVRk9MRU5CUVdsQ2JrTXNTVUZCU1Zrc1NVRkJTaXhEUVVGVFJpeEZRVUV4UWl4RFFVRm1PMEZCUTBFMFNTeGxRVUZUV2l4VlFVRlVMRU5CUVc5Q01Va3NSMEZCY0VJN1FVRkRSRHM3UVVGRlJEczdPenR2UTBGRFowSkJMRWNzUlVGQlN6dEJRVU51UWl4VlFVRkphRUlzVVVGQlVTeEpRVUZhT3p0QlFVVkVPMEZCUTBFc1ZVRkJTVFpDTEZkQlFWZGlMRWxCUVVsUkxFbEJRVW9zUTBGQlUyMUtMRXRCUVZRc1EwRkJaU3hEUVVGbUxFVkJRV3RDTEVOQlFVTXNSVUZCYmtJc1EwRkJaanM3UVVGRlFTeFZRVUZKZEVzc1VVRkJVVHRCUVVOV2RrTXNZMEZCVFd0RUxFbEJRVWxzUkN4SlFVUkJPMEZCUlZZd1JDeGpRVUZOVWl4SlFVRkpXU3hKUVVGS0xFTkJRVk5yUlN4TlFVWk1PMEZCUjFZelNTeGhRVUZMTUVVc1VVRklTenRCUVVsV2NFTXNaMEpCUVZGMVFpeEpRVUZKV1N4SlFVRktMRU5CUVZOdVF5eE5RVXBRTzBGQlMxWnVReXhsUVVGUE1FUXNTVUZCU1Zrc1NVRkJTaXhEUVVGVGRFVXNTMEZNVGp0QlFVMVdWU3hyUWtGQlZXZEVMRWxCUVVsWkxFbEJRVW9zUTBGQlV6VkVMRkZCVGxRN08wRkJVVlkwVFN4aFFVRkxMR0ZCUVVNNVRTeEpRVUZFTEVWQlFWVTdRVUZEWWl4alFVRkpLMDBzVVVGQlVTeEhRVUZhTzBGQlEwRXNZMEZCU1M5TkxFbEJRVW9zUlVGQlZUdEJRVU5TSzAwc2IwSkJRVkV2VFN4SlFVRlNPMEZCUTBRN08wRkJSVVE3UVVGRFFXdERMR2RDUVVGTllTeEpRVUZPTEVOQlFWZHBRaXhYUVVGWUxFTkJRWFZDTzBGQlEzSkNhVU1zWjBKQlFVa3ZReXhKUVVGSkswTXNSVUZFWVN4RlFVTlVha2NzVFVGQlRTeFZRVVJITEVWQlExTXdSQ3hOUVVGTlVpeEpRVUZKVlN4RlFVUnVRaXhGUVVOMVFrRXNTVUZCU1ZZc1NVRkJTVkVzU1VGRUwwSTdRVUZGY2tKSkxHdENRVUZOTEVWQlFVVkpMRTFCUVUwMlNTeExRVUZTTzBGQlJtVXNWMEZCZGtJN1FVRkpSRHRCUVc1Q1V5eFBRVUZhT3p0QlFYTkNRU3hWUVVGSk4wc3NUVUZCVFhGTExITkNRVUZXTEVWQlFXdERPMEZCUTJoRGNFMHNaMEpCUVZGcFRDeEpRVUZTTEVOQlFXRXNaME5CUVdJc1JVRkJLME0zU1N4TFFVRXZRenRCUVVOQlRDeGpRVUZOY1Vzc2MwSkJRVTRzUTBGQk5rSm9TeXhMUVVFM1FqdEJRVU5FTzBGQlEwUTdPMEZCUlVRN096czdiME5CUTJkQ1Z5eEhMRVZCUVVzN1FVRkRia0lzVlVGQlNXaENMRkZCUVZFc1NVRkJXanM3UVVGRlJEdEJRVU5CTEZWQlFVazJRaXhYUVVGWFlpeEpRVUZKV1N4SlFVRktMRU5CUVZORExGRkJRWGhDT3p0QlFVVkJMRlZCUVVsc1JDeFRRVUZUY1VJc1RVRkJUWE5DTEZWQlFVNHNRMEZCYVVKUExGRkJRV3BDTEVOQlFXSTdRVUZEUVN4VlFVRkpiRVFzVFVGQlNpeEZRVUZaTzBGQlExWXNXVUZCU1RCQ0xGRkJRVkU3UVVGRFZuWkRMR2RDUVVGTmEwUXNTVUZCU1d4RUxFbEJSRUU3UVVGRlZsZ3NaVUZCU3pCRkxGRkJSa3M3UVVGSFZqZEVMRzlDUVVGVlowUXNTVUZCU1Zrc1NVRkJTaXhEUVVGVE5VUXNVVUZJVkRzN1FVRkxWalJOTEdWQlFVc3NZVUZCUXpsTkxFbEJRVVFzUlVGQlZUdEJRVU5pTEdkQ1FVRkpLMDBzVVVGQlVTeEhRVUZhTzBGQlEwRXNaMEpCUVVrdlRTeEpRVUZLTEVWQlFWVTdRVUZEVWl0TkxITkNRVUZSTDAwc1NVRkJVanRCUVVORU96dEJRVVZFTzBGQlEwRXNaMEpCUVVrclRTeFZRVUZWTEVkQlFXUXNSVUZCYlVJN1FVRkRha0pzVFN4eFFrRkJUMjFOTEUxQlFWQTdRVUZEUkRzN1FVRkZRVHRCUVVOQk9Vc3NhMEpCUVUxaExFbEJRVTRzUTBGQlYybENMRmRCUVZnc1EwRkJkVUk3UVVGRGNrSnBReXhyUWtGQlNTOURMRWxCUVVrclF5eEZRVVJoTEVWQlExUnFSeXhOUVVGTkxGVkJSRWNzUlVGRFV6QkVMRTFCUVUxU0xFbEJRVWxWTEVWQlJHNUNMRVZCUTNWQ1FTeEpRVUZKVml4SlFVRkpVU3hKUVVRdlFqdEJRVVZ5UWtrc2IwSkJRVTBzUlVGQlJVa3NUVUZCVFRaSkxFdEJRVklzUlVGQlpTOUZMRkZCUVZFNVJpeE5RVUZOZVVJc1RVRkJOMEk3UVVGR1pTeGhRVUYyUWp0QlFVbEVPMEZCY2tKUkxGTkJRVm83TzBGQmQwSkRMRmxCUVVsNlFpeE5RVUZOY1Vzc2MwSkJRVllzUlVGQmEwTTdRVUZEYUVOd1RTeHJRa0ZCVVdkRUxFZEJRVklzUTBGQldTeHpRa0ZCV2l4RlFVRnZRMW9zUzBGQmNFTTdRVUZEUVV3c1owSkJRVTF4U3l4elFrRkJUaXhEUVVFMlFtaExMRXRCUVRkQ08wRkJRMFE3UVVGRFJpeFBRVGRDUml4TlFUWkNVVHRCUVVOTVRDeGpRVUZOWVN4SlFVRk9MRU5CUVZkcFFpeFhRVUZZTEVOQlFYVkNPMEZCUTNKQ2FVTXNZMEZCU1M5RExFbEJRVWtyUXl4RlFVUmhMRVZCUTFScVJ5eE5RVUZOTEZWQlJFY3NSVUZEVXpCRUxFMUJRVTFTTEVsQlFVbFZMRVZCUkc1Q0xFVkJRM1ZDUVN4SlFVRkpWaXhKUVVGSlVTeEpRVVF2UWp0QlFVVnlRa2tzWjBKQlFVMHNSVUZCUlVrc1RVRkJUU3hIUVVGU0xFVkJRV0U0UkN4UlFVRlJPVVlzVFVGQlRYbENMRTFCUVROQ08wRkJSbVVzVTBGQmRrSTdRVUZKUkR0QlFVTkdPenM3ZDBKQk4xVlhPMEZCUVVVc1lVRkJUeXhMUVVGTFFTeE5RVUZhTzBGQlFYRkNPenRCUVVWdVF6czdPenM3T3p0M1FrRkpaMEk3UVVGQlJTeGhRVUZQTEV0QlFVc3dRaXhWUVVGYU8wRkJRWGxDT3p0QlFVVXpRenM3T3pzN096dDNRa0ZKWjBJN1FVRkJSU3hoUVVGUExFdEJRVXMzUWl4VlFVRmFPMEZCUVhsQ096czdTMEV2UmpkRE96czdPenM3T3pzN096czdPenM3T3pzN096czdPenRyUWtGdllXVXJTQ3hQT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTNCaFpqczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGMVFrRTdPenM3T3pzN096czdPMGxCVjAwd1FpeGxPMEZCUTBvN096czdPenRCUVU5QkxESkNRVUZaZGtRc1MwRkJXaXhGUVVGdFFuSkxMRWRCUVc1Q0xFVkJRWGRDYlUwc1IwRkJlRUlzUlVGQk5rSnVSU3hSUVVFM1FpeEZRVUYxUXp0QlFVRkJPenRCUVVOeVF5eFJRVUZKYmtZc1VVRkJVU3hKUVVGYU96dEJRVVZCUVN4VlFVRk5lVUlzVFVGQlRpeEhRVUZsSzBZc1MwRkJaanRCUVVOQmVFZ3NWVUZCVFdVc1NVRkJUaXhIUVVGaE5VUXNSMEZCWWp0QlFVTkJOa01zVlVGQlRXRXNTVUZCVGl4SFFVRmhlVWtzUjBGQllqdEJRVU5CZEVvc1ZVRkJUVFJJTEZOQlFVNHNSMEZCYTBKNlF5eFJRVUZzUWpzN1FVRkZRVzVHTEZWQlFVMW5UQ3hSUVVGT0xFZEJRV2xDTEVWQlFXcENPMEZCUTBGb1RDeFZRVUZOVnl4clFrRkJUanRCUVVORU96czdPM2xEUVVWdlFqdEJRVU51UWl4VlFVRkpXQ3hSUVVGUkxFbEJRVm83TzBGQlJVRkJMRmxCUVUweVNDeFRRVUZPTEVkQlFXdENNMGdzVFVGQlRXRXNTVUZCVGl4RFFVRlhReXhYUVVGWUxFTkJRWFZDWkN4TlFVRk5aU3hKUVVFM1FpeEZRVUZ0UXl4VlFVRkRReXhIUVVGRUxFVkJRVk03UVVGRE5VUXZReXhuUWtGQlVXZEVMRWRCUVZJc1EwRkJXU3h4UWtGQmNVSnFRaXhOUVVGTlpTeEpRVUV6UWl4SFFVRnJReXhSUVVFNVF5eEZRVUYzUkVNc1IwRkJlRVE3UVVGRFFXaENMR05CUVUxblRDeFJRVUZPTEVOQlFXVTVSaXhKUVVGbUxFTkJRVzlDYkVVc1IwRkJjRUk3UVVGRFJDeFBRVWhwUWl4RFFVRnNRanM3UVVGTFFUczdPenM3T3pzN096czdPenM3TzBGQlowSkVPenM3ZDBOQlJXMUNPMEZCUTJ4Q0xGVkJRVWxvUWl4UlFVRlJMRWxCUVZvN08wRkJSVUZCTEZsQlFVMHlTQ3hUUVVGT0xFTkJRV2RDZUVjc1RVRkJhRUk3TzBGQlJVRTdPenRCUVVkRU96czdNRUpCU1VzNFNpeFJMRVZCUVZVN1FVRkRaQ3hWUVVGSmFrd3NVVUZCVVN4SlFVRmFPMEZCUTBGQkxGbEJRVTFuVEN4UlFVRk9MRU5CUVdWNlN5eFBRVUZtTEVOQlFYVkNMRlZCUVVOclNTeE5RVUZFTEVWQlFWazdRVUZEYWtOM1F5eHBRa0ZCVXk5S0xHRkJRVlFzUTBGQmRVSXJTaXhUUVVGVE9Vc3NVVUZCYUVNc1JVRkJNRU56U1N4TlFVRXhRenRCUVVORUxFOUJSa1E3UVVGSFJEczdPM2RDUVZCak8wRkJRVVVzWVVGQlR5eExRVUZMWWl4VFFVRmFPMEZCUVhkQ096czdPenRyUWtGVk5VSnRSQ3hsT3pzN096czdPenM3UVVOd1IyWXNhMEpCUVd0Q0xIbEVPenM3T3pzN08wRkRRV3hDTEd0Q1FVRnJRaXg1UkRzN096czdPenM3T3p0QlEwRnNRanRCUVVOQkxITkVPenM3T3pzN08wRkRSRUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4Rk96czdPenM3TzBGRFNrRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEd0RFFVRnJReXhWUVVGVkxFVkJRVVU3UVVGRE9VTXNiVUpCUVcxQ0xITkRRVUZ6UXp0QlFVTjZSQ3hEUVVGRExHOURRVUZ2UXp0QlFVTnlRenRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeEhRVUZITzBGQlEwZ3NRMEZCUXl4WE96czdPenM3T3p0QlEyaERSRHRCUVVOQk96dEJRVVZCTERCRFFVRXdReXhwUTBGQmIwTXNSVHM3T3pzN096dEJRMGc1UlR0QlFVTkJPMEZCUTBFN08wRkJSVUU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4RFFVRkRMRVU3T3pzN096czdRVU5TUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEV0QlFVczdRVUZEVER0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeHBSVUZCYVVVc01FUkJRVEJFTEVWQlFVVTdRVUZETjBnN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxEWkVRVUUyUkN3eVJFRkJNa1E3UVVGRGVFZ3NjVVJCUVhGRUxESkVRVUV5UkR0QlFVTm9TRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxHbEZRVUZwUlR0QlFVTnFSVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTEhkQ1FVRjNRaXh6UTBGQmMwTTdRVUZET1VRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJMSGxDUVVGNVFpdzBSRUZCTkVRN1FVRkRja1k3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4M1FrRkJkMElzSzBOQlFTdERPMEZCUTNaRk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNkMEpCUVhkQ0xIRkZRVUZ4UlR0QlFVTTNSanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFTeDNRa0ZCZDBJc2RVTkJRWFZETzBGQlF5OUVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVVUZCVVR0QlFVTlNPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNlVU5CUVhsRE8wRkJRM3BETzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQkxIZENRVUYzUWp0QlFVTjRRanRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNVVUZCVVR0QlFVTlNMR2xGTzBGQlEwRXNkMFJCUVhkRUxEWkhRVUUyUnl4RlFVRkZPMEZCUTNaTE8wRkJRMEU3UVVGRFFUdEJRVU5CTEU5QlFVODdRVUZEVUR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUczdRVUZGUVRzN1FVRkZRVHRCUVVOQkxHRkJRV0U3UVVGRFlqczdRVUZGUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRXNTVUZCU1R0QlFVTktPenRCUVVWQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJMSEZDUVVGeFFpeHJSMEZCYTBjN1FVRkRka2c3UVVGRFFUdEJRVU5CTEUxQlFVMDdRVUZEVGl4TFFVRkxPMEZCUTB3N1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRXNiMEpCUVc5Q0xHMUhRVUZ0Unp0QlFVTjJTRHRCUVVOQkxFMUJRVTA3UVVGRFRqdEJRVU5CTzBGQlEwRTdRVUZEUVRzN1FVRkZRU3cwUkR0QlFVTkJPMEZCUTBFN08wRkJSVUVzYTBKQlFXdENMRzlKUVVGdlNUdEJRVU4wU2p0QlFVTkJMRWxCUVVrN1FVRkRTanRCUVVOQkxFZEJRVWM3UVVGRFNEdEJRVU5CTzBGQlEwRXNRMEZCUXpzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVU01VWtRN096czdRVUZEUVRzN096dEJRVU5CT3pzN096czdVVUZGVVRGQ0xFODdVVUZCVXpsSExHdENPMUZCUVc5Q2FFUXNhMElpTENKbWFXeGxJam9pVTNsdVkyaGxjaTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpQjNaV0p3WVdOclZXNXBkbVZ5YzJGc1RXOWtkV3hsUkdWbWFXNXBkR2x2YmloeWIyOTBMQ0JtWVdOMGIzSjVLU0I3WEc1Y2RHbG1LSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCMGVYQmxiMllnYlc5a2RXeGxJRDA5UFNBbmIySnFaV04wSnlsY2JseDBYSFJ0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1poWTNSdmNua29LVHRjYmx4MFpXeHpaU0JwWmloMGVYQmxiMllnWkdWbWFXNWxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR1JsWm1sdVpTNWhiV1FwWEc1Y2RGeDBaR1ZtYVc1bEtGd2lVM2x1WTJobGNsd2lMQ0JiWFN3Z1ptRmpkRzl5ZVNrN1hHNWNkR1ZzYzJVZ2FXWW9kSGx3Wlc5bUlHVjRjRzl5ZEhNZ1BUMDlJQ2R2WW1wbFkzUW5LVnh1WEhSY2RHVjRjRzl5ZEhOYlhDSlRlVzVqYUdWeVhDSmRJRDBnWm1GamRHOXllU2dwTzF4dVhIUmxiSE5sWEc1Y2RGeDBjbTl2ZEZ0Y0lsd2lYU0E5SUhKdmIzUmJYQ0pjSWwwZ2ZId2dlMzBzSUhKdmIzUmJYQ0pjSWwxYlhDSlRlVzVqYUdWeVhDSmRJRDBnWm1GamRHOXllU2dwTzF4dWZTa29kR2hwY3l3Z1puVnVZM1JwYjI0b0tTQjdYRzV5WlhSMWNtNGdYRzVjYmx4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZJZ0x5OWNiaTh2SUhkbFluQmhZMnN2ZFc1cGRtVnljMkZzVFc5a2RXeGxSR1ZtYVc1cGRHbHZiaUlzSWlCY2RDOHZJRlJvWlNCdGIyUjFiR1VnWTJGamFHVmNiaUJjZEhaaGNpQnBibk4wWVd4c1pXUk5iMlIxYkdWeklEMGdlMzA3WEc1Y2JpQmNkQzh2SUZSb1pTQnlaWEYxYVhKbElHWjFibU4wYVc5dVhHNGdYSFJtZFc1amRHbHZiaUJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmS0cxdlpIVnNaVWxrS1NCN1hHNWNiaUJjZEZ4MEx5OGdRMmhsWTJzZ2FXWWdiVzlrZFd4bElHbHpJR2x1SUdOaFkyaGxYRzRnWEhSY2RHbG1LR2x1YzNSaGJHeGxaRTF2WkhWc1pYTmJiVzlrZFd4bFNXUmRLVnh1SUZ4MFhIUmNkSEpsZEhWeWJpQnBibk4wWVd4c1pXUk5iMlIxYkdWelcyMXZaSFZzWlVsa1hTNWxlSEJ2Y25Sek8xeHVYRzRnWEhSY2RDOHZJRU55WldGMFpTQmhJRzVsZHlCdGIyUjFiR1VnS0dGdVpDQndkWFFnYVhRZ2FXNTBieUIwYUdVZ1kyRmphR1VwWEc0Z1hIUmNkSFpoY2lCdGIyUjFiR1VnUFNCcGJuTjBZV3hzWldSTmIyUjFiR1Z6VzIxdlpIVnNaVWxrWFNBOUlIdGNiaUJjZEZ4MFhIUnBPaUJ0YjJSMWJHVkpaQ3hjYmlCY2RGeDBYSFJzT2lCbVlXeHpaU3hjYmlCY2RGeDBYSFJsZUhCdmNuUnpPaUI3ZlZ4dUlGeDBYSFI5TzF4dVhHNGdYSFJjZEM4dklFVjRaV04xZEdVZ2RHaGxJRzF2WkhWc1pTQm1kVzVqZEdsdmJseHVJRngwWEhSdGIyUjFiR1Z6VzIxdlpIVnNaVWxrWFM1allXeHNLRzF2WkhWc1pTNWxlSEJ2Y25SekxDQnRiMlIxYkdVc0lHMXZaSFZzWlM1bGVIQnZjblJ6TENCZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZktUdGNibHh1SUZ4MFhIUXZMeUJHYkdGbklIUm9aU0J0YjJSMWJHVWdZWE1nYkc5aFpHVmtYRzRnWEhSY2RHMXZaSFZzWlM1c0lEMGdkSEoxWlR0Y2JseHVJRngwWEhRdkx5QlNaWFIxY200Z2RHaGxJR1Y0Y0c5eWRITWdiMllnZEdobElHMXZaSFZzWlZ4dUlGeDBYSFJ5WlhSMWNtNGdiVzlrZFd4bExtVjRjRzl5ZEhNN1hHNGdYSFI5WEc1Y2JseHVJRngwTHk4Z1pYaHdiM05sSUhSb1pTQnRiMlIxYkdWeklHOWlhbVZqZENBb1gxOTNaV0p3WVdOclgyMXZaSFZzWlhOZlh5bGNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWJTQTlJRzF2WkhWc1pYTTdYRzVjYmlCY2RDOHZJR1Y0Y0c5elpTQjBhR1VnYlc5a2RXeGxJR05oWTJobFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1NZ1BTQnBibk4wWVd4c1pXUk5iMlIxYkdWek8xeHVYRzRnWEhRdkx5QnBaR1Z1ZEdsMGVTQm1kVzVqZEdsdmJpQm1iM0lnWTJGc2JHbHVaeUJvWVhKdGIyNTVJR2x0Y0c5eWRITWdkMmwwYUNCMGFHVWdZMjl5Y21WamRDQmpiMjUwWlhoMFhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1rZ1BTQm1kVzVqZEdsdmJpaDJZV3gxWlNrZ2V5QnlaWFIxY200Z2RtRnNkV1U3SUgwN1hHNWNiaUJjZEM4dklHUmxabWx1WlNCblpYUjBaWElnWm5WdVkzUnBiMjRnWm05eUlHaGhjbTF2Ym5rZ1pYaHdiM0owYzF4dUlGeDBYMTkzWldKd1lXTnJYM0psY1hWcGNtVmZYeTVrSUQwZ1puVnVZM1JwYjI0b1pYaHdiM0owY3l3Z2JtRnRaU3dnWjJWMGRHVnlLU0I3WEc0Z1hIUmNkR2xtS0NGZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtOG9aWGh3YjNKMGN5d2dibUZ0WlNrcElIdGNiaUJjZEZ4MFhIUlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnYm1GdFpTd2dlMXh1SUZ4MFhIUmNkRngwWTI5dVptbG5kWEpoWW14bE9pQm1ZV3h6WlN4Y2JpQmNkRngwWEhSY2RHVnVkVzFsY21GaWJHVTZJSFJ5ZFdVc1hHNGdYSFJjZEZ4MFhIUm5aWFE2SUdkbGRIUmxjbHh1SUZ4MFhIUmNkSDBwTzF4dUlGeDBYSFI5WEc0Z1hIUjlPMXh1WEc0Z1hIUXZMeUJuWlhSRVpXWmhkV3gwUlhod2IzSjBJR1oxYm1OMGFXOXVJR1p2Y2lCamIyMXdZWFJwWW1sc2FYUjVJSGRwZEdnZ2JtOXVMV2hoY20xdmJua2diVzlrZFd4bGMxeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1dUlEMGdablZ1WTNScGIyNG9iVzlrZFd4bEtTQjdYRzRnWEhSY2RIWmhjaUJuWlhSMFpYSWdQU0J0YjJSMWJHVWdKaVlnYlc5a2RXeGxMbDlmWlhOTmIyUjFiR1VnUDF4dUlGeDBYSFJjZEdaMWJtTjBhVzl1SUdkbGRFUmxabUYxYkhRb0tTQjdJSEpsZEhWeWJpQnRiMlIxYkdWYkoyUmxabUYxYkhRblhUc2dmU0E2WEc0Z1hIUmNkRngwWm5WdVkzUnBiMjRnWjJWMFRXOWtkV3hsUlhod2IzSjBjeWdwSUhzZ2NtVjBkWEp1SUcxdlpIVnNaVHNnZlR0Y2JpQmNkRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1a0tHZGxkSFJsY2l3Z0oyRW5MQ0JuWlhSMFpYSXBPMXh1SUZ4MFhIUnlaWFIxY200Z1oyVjBkR1Z5TzF4dUlGeDBmVHRjYmx4dUlGeDBMeThnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVvWVhOUGQyNVFjbTl3WlhKMGVTNWpZV3hzWEc0Z1hIUmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZMbThnUFNCbWRXNWpkR2x2YmlodlltcGxZM1FzSUhCeWIzQmxjblI1S1NCN0lISmxkSFZ5YmlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd3b2IySnFaV04wTENCd2NtOXdaWEowZVNrN0lIMDdYRzVjYmlCY2RDOHZJRjlmZDJWaWNHRmphMTl3ZFdKc2FXTmZjR0YwYUY5ZlhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG5BZ1BTQmNJbHdpTzF4dVhHNGdYSFF2THlCTWIyRmtJR1Z1ZEhKNUlHMXZaSFZzWlNCaGJtUWdjbVYwZFhKdUlHVjRjRzl5ZEhOY2JpQmNkSEpsZEhWeWJpQmZYM2RsWW5CaFkydGZjbVZ4ZFdseVpWOWZLRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1Y3lBOUlERTJNaWs3WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdkMlZpY0dGamF5OWliMjkwYzNSeVlYQWdZV05sWW1GalpqSTVaRGMwTkRCaE1UZzJZbVFpTENKMllYSWdZMjl5WlNBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UzWmxjbk5wYjI0NklDY3lMalF1TUNkOU8xeHVhV1lvZEhsd1pXOW1JRjlmWlNBOVBTQW5iblZ0WW1WeUp5bGZYMlVnUFNCamIzSmxPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1WkdWbVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlqYjNKbExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXdYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVZ05pQTNJRGdpTENJdkx5Qm9kSFJ3Y3pvdkwyZHBkR2gxWWk1amIyMHZlbXh2YVhKdlkyc3ZZMjl5WlMxcWN5OXBjM04xWlhNdk9EWWphWE56ZFdWamIyMXRaVzUwTFRFeE5UYzFPVEF5T0Z4dWRtRnlJR2RzYjJKaGJDQTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdkSGx3Wlc5bUlIZHBibVJ2ZHlBaFBTQW5kVzVrWldacGJtVmtKeUFtSmlCM2FXNWtiM2N1VFdGMGFDQTlQU0JOWVhSb1hHNGdJRDhnZDJsdVpHOTNJRG9nZEhsd1pXOW1JSE5sYkdZZ0lUMGdKM1Z1WkdWbWFXNWxaQ2NnSmlZZ2MyVnNaaTVOWVhSb0lEMDlJRTFoZEdnZ1B5QnpaV3htSURvZ1JuVnVZM1JwYjI0b0ozSmxkSFZ5YmlCMGFHbHpKeWtvS1R0Y2JtbG1LSFI1Y0dWdlppQmZYMmNnUFQwZ0oyNTFiV0psY2ljcFgxOW5JRDBnWjJ4dlltRnNPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMWFZ1WkdWbVhHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTluYkc5aVlXd3Vhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREZjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TQTJJRGNnT0NJc0luWmhjaUJ6ZEc5eVpTQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMmhoY21Wa0p5a29KM2RyY3ljcFhHNGdJQ3dnZFdsa0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1ZwWkNjcFhHNGdJQ3dnVTNsdFltOXNJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BMbE41YldKdmJGeHVJQ0FzSUZWVFJWOVRXVTFDVDB3Z1BTQjBlWEJsYjJZZ1UzbHRZbTlzSUQwOUlDZG1kVzVqZEdsdmJpYzdYRzVjYm5aaGNpQWtaWGh3YjNKMGN5QTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9ibUZ0WlNsN1hHNGdJSEpsZEhWeWJpQnpkRzl5WlZ0dVlXMWxYU0I4ZkNBb2MzUnZjbVZiYm1GdFpWMGdQVnh1SUNBZ0lGVlRSVjlUV1UxQ1Qwd2dKaVlnVTNsdFltOXNXMjVoYldWZElIeDhJQ2hWVTBWZlUxbE5RazlNSUQ4Z1UzbHRZbTlzSURvZ2RXbGtLU2duVTNsdFltOXNMaWNnS3lCdVlXMWxLU2s3WEc1OU8xeHVYRzRrWlhod2IzSjBjeTV6ZEc5eVpTQTlJSE4wYjNKbE8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZDJ0ekxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXlYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSXZMeUJVYUdGdWF5ZHpJRWxGT0NCbWIzSWdhR2x6SUdaMWJtNTVJR1JsWm1sdVpWQnliM0JsY25SNVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlDRnlaWEYxYVhKbEtDY3VMMTltWVdsc2N5Y3BLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29lMzBzSUNkaEp5d2dlMmRsZERvZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlEYzdJSDE5S1M1aElDRTlJRGM3WEc1OUtUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJSbGMyTnlhWEIwYjNKekxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXpYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVZ05pQTNJRGdpTENKMllYSWdZVzVQWW1wbFkzUWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1Z4dUlDQXNJRWxGT0Y5RVQwMWZSRVZHU1U1RklEMGdjbVZ4ZFdseVpTZ25MaTlmYVdVNExXUnZiUzFrWldacGJtVW5LVnh1SUNBc0lIUnZVSEpwYldsMGFYWmxJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0Y0hKcGJXbDBhWFpsSnlsY2JpQWdMQ0JrVUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVR0Y2JseHVaWGh3YjNKMGN5NW1JRDBnY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0EvSUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTQTZJR1oxYm1OMGFXOXVJR1JsWm1sdVpWQnliM0JsY25SNUtFOHNJRkFzSUVGMGRISnBZblYwWlhNcGUxeHVJQ0JoYms5aWFtVmpkQ2hQS1R0Y2JpQWdVQ0E5SUhSdlVISnBiV2wwYVhabEtGQXNJSFJ5ZFdVcE8xeHVJQ0JoYms5aWFtVmpkQ2hCZEhSeWFXSjFkR1Z6S1R0Y2JpQWdhV1lvU1VVNFgwUlBUVjlFUlVaSlRrVXBkSEo1SUh0Y2JpQWdJQ0J5WlhSMWNtNGdaRkFvVHl3Z1VDd2dRWFIwY21saWRYUmxjeWs3WEc0Z0lIMGdZMkYwWTJnb1pTbDdJQzhxSUdWdGNIUjVJQ292SUgxY2JpQWdhV1lvSjJkbGRDY2dhVzRnUVhSMGNtbGlkWFJsY3lCOGZDQW5jMlYwSnlCcGJpQkJkSFJ5YVdKMWRHVnpLWFJvY205M0lGUjVjR1ZGY25KdmNpZ25RV05qWlhOemIzSnpJRzV2ZENCemRYQndiM0owWldRaEp5azdYRzRnSUdsbUtDZDJZV3gxWlNjZ2FXNGdRWFIwY21saWRYUmxjeWxQVzFCZElEMGdRWFIwY21saWRYUmxjeTUyWVd4MVpUdGNiaUFnY21WMGRYSnVJRTg3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV1J3TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015QTBJRFVnTmlBM0lEZ2lMQ0oyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppZ2hhWE5QWW1wbFkzUW9hWFFwS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWhwZENBcklDY2dhWE1nYm05MElHRnVJRzlpYW1WamRDRW5LVHRjYmlBZ2NtVjBkWEp1SUdsME8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyRnVMVzlpYW1WamRDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlEWWdOeUE0SWl3aWRtRnlJR1JRSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LVnh1SUNBc0lHTnlaV0YwWlVSbGMyTWdQU0J5WlhGMWFYSmxLQ2N1TDE5d2NtOXdaWEowZVMxa1pYTmpKeWs3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWtnUHlCbWRXNWpkR2x2YmlodlltcGxZM1FzSUd0bGVTd2dkbUZzZFdVcGUxeHVJQ0J5WlhSMWNtNGdaRkF1WmlodlltcGxZM1FzSUd0bGVTd2dZM0psWVhSbFJHVnpZeWd4TENCMllXeDFaU2twTzF4dWZTQTZJR1oxYm1OMGFXOXVLRzlpYW1WamRDd2dhMlY1TENCMllXeDFaU2w3WEc0Z0lHOWlhbVZqZEZ0clpYbGRJRDBnZG1Gc2RXVTdYRzRnSUhKbGRIVnliaUJ2WW1wbFkzUTdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhR2xrWlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ05seHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWdOQ0ExSURZZ055QTRJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQjBlWEJsYjJZZ2FYUWdQVDA5SUNkdlltcGxZM1FuSUQ4Z2FYUWdJVDA5SUc1MWJHd2dPaUIwZVhCbGIyWWdhWFFnUFQwOUlDZG1kVzVqZEdsdmJpYzdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZhWE10YjJKcVpXTjBMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EzWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlBMElEVWdOaUEzSURnaUxDSjJZWElnWjJ4dlltRnNJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCamIzSmxJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5bGNiaUFnTENCamRIZ2dJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqZEhnbktWeHVJQ0FzSUdocFpHVWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhwWkdVbktWeHVJQ0FzSUZCU1QxUlBWRmxRUlNBOUlDZHdjbTkwYjNSNWNHVW5PMXh1WEc1MllYSWdKR1Y0Y0c5eWRDQTlJR1oxYm1OMGFXOXVLSFI1Y0dVc0lHNWhiV1VzSUhOdmRYSmpaU2w3WEc0Z0lIWmhjaUJKVTE5R1QxSkRSVVFnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVHWEc0Z0lDQWdMQ0JKVTE5SFRFOUNRVXdnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVIWEc0Z0lDQWdMQ0JKVTE5VFZFRlVTVU1nUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVUWEc0Z0lDQWdMQ0JKVTE5UVVrOVVUeUFnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVRWEc0Z0lDQWdMQ0JKVTE5Q1NVNUVJQ0FnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVDWEc0Z0lDQWdMQ0JKVTE5WFVrRlFJQ0FnUFNCMGVYQmxJQ1lnSkdWNGNHOXlkQzVYWEc0Z0lDQWdMQ0JsZUhCdmNuUnpJQ0FnUFNCSlUxOUhURTlDUVV3Z1B5QmpiM0psSURvZ1kyOXlaVnR1WVcxbFhTQjhmQ0FvWTI5eVpWdHVZVzFsWFNBOUlIdDlLVnh1SUNBZ0lDd2daWGh3VUhKdmRHOGdJRDBnWlhod2IzSjBjMXRRVWs5VVQxUlpVRVZkWEc0Z0lDQWdMQ0IwWVhKblpYUWdJQ0FnUFNCSlUxOUhURTlDUVV3Z1B5Qm5iRzlpWVd3Z09pQkpVMTlUVkVGVVNVTWdQeUJuYkc5aVlXeGJibUZ0WlYwZ09pQW9aMnh2WW1Gc1cyNWhiV1ZkSUh4OElIdDlLVnRRVWs5VVQxUlpVRVZkWEc0Z0lDQWdMQ0JyWlhrc0lHOTNiaXdnYjNWME8xeHVJQ0JwWmloSlUxOUhURTlDUVV3cGMyOTFjbU5sSUQwZ2JtRnRaVHRjYmlBZ1ptOXlLR3RsZVNCcGJpQnpiM1Z5WTJVcGUxeHVJQ0FnSUM4dklHTnZiblJoYVc1eklHbHVJRzVoZEdsMlpWeHVJQ0FnSUc5M2JpQTlJQ0ZKVTE5R1QxSkRSVVFnSmlZZ2RHRnlaMlYwSUNZbUlIUmhjbWRsZEZ0clpYbGRJQ0U5UFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnYVdZb2IzZHVJQ1ltSUd0bGVTQnBiaUJsZUhCdmNuUnpLV052Ym5ScGJuVmxPMXh1SUNBZ0lDOHZJR1Y0Y0c5eWRDQnVZWFJwZG1VZ2IzSWdjR0Z6YzJWa1hHNGdJQ0FnYjNWMElEMGdiM2R1SUQ4Z2RHRnlaMlYwVzJ0bGVWMGdPaUJ6YjNWeVkyVmJhMlY1WFR0Y2JpQWdJQ0F2THlCd2NtVjJaVzUwSUdkc2IySmhiQ0J3YjJ4c2RYUnBiMjRnWm05eUlHNWhiV1Z6Y0dGalpYTmNiaUFnSUNCbGVIQnZjblJ6VzJ0bGVWMGdQU0JKVTE5SFRFOUNRVXdnSmlZZ2RIbHdaVzltSUhSaGNtZGxkRnRyWlhsZElDRTlJQ2RtZFc1amRHbHZiaWNnUHlCemIzVnlZMlZiYTJWNVhWeHVJQ0FnSUM4dklHSnBibVFnZEdsdFpYSnpJSFJ2SUdkc2IySmhiQ0JtYjNJZ1kyRnNiQ0JtY205dElHVjRjRzl5ZENCamIyNTBaWGgwWEc0Z0lDQWdPaUJKVTE5Q1NVNUVJQ1ltSUc5M2JpQS9JR04wZUNodmRYUXNJR2RzYjJKaGJDbGNiaUFnSUNBdkx5QjNjbUZ3SUdkc2IySmhiQ0JqYjI1emRISjFZM1J2Y25NZ1ptOXlJSEJ5WlhabGJuUWdZMmhoYm1kbElIUm9aVzBnYVc0Z2JHbGljbUZ5ZVZ4dUlDQWdJRG9nU1ZOZlYxSkJVQ0FtSmlCMFlYSm5aWFJiYTJWNVhTQTlQU0J2ZFhRZ1B5QW9ablZ1WTNScGIyNG9ReWw3WEc0Z0lDQWdJQ0IyWVhJZ1JpQTlJR1oxYm1OMGFXOXVLR0VzSUdJc0lHTXBlMXh1SUNBZ0lDQWdJQ0JwWmloMGFHbHpJR2x1YzNSaGJtTmxiMllnUXlsN1hHNGdJQ0FnSUNBZ0lDQWdjM2RwZEdOb0tHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdncGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGelpTQXdPaUJ5WlhSMWNtNGdibVYzSUVNN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqWVhObElERTZJSEpsZEhWeWJpQnVaWGNnUXloaEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNam9nY21WMGRYSnVJRzVsZHlCREtHRXNJR0lwTzF4dUlDQWdJQ0FnSUNBZ0lIMGdjbVYwZFhKdUlHNWxkeUJES0dFc0lHSXNJR01wTzF4dUlDQWdJQ0FnSUNCOUlISmxkSFZ5YmlCRExtRndjR3g1S0hSb2FYTXNJR0Z5WjNWdFpXNTBjeWs3WEc0Z0lDQWdJQ0I5TzF4dUlDQWdJQ0FnUmx0UVVrOVVUMVJaVUVWZElEMGdRMXRRVWs5VVQxUlpVRVZkTzF4dUlDQWdJQ0FnY21WMGRYSnVJRVk3WEc0Z0lDQWdMeThnYldGclpTQnpkR0YwYVdNZ2RtVnljMmx2Ym5NZ1ptOXlJSEJ5YjNSdmRIbHdaU0J0WlhSb2IyUnpYRzRnSUNBZ2ZTa29iM1YwS1NBNklFbFRYMUJTVDFSUElDWW1JSFI1Y0dWdlppQnZkWFFnUFQwZ0oyWjFibU4wYVc5dUp5QS9JR04wZUNoR2RXNWpkR2x2Ymk1allXeHNMQ0J2ZFhRcElEb2diM1YwTzF4dUlDQWdJQzh2SUdWNGNHOXlkQ0J3Y205MGJ5QnRaWFJvYjJSeklIUnZJR052Y21VdUpVTlBUbE5VVWxWRFZFOVNKUzV0WlhSb2IyUnpMaVZPUVUxRkpWeHVJQ0FnSUdsbUtFbFRYMUJTVDFSUEtYdGNiaUFnSUNBZ0lDaGxlSEJ2Y25SekxuWnBjblIxWVd3Z2ZId2dLR1Y0Y0c5eWRITXVkbWx5ZEhWaGJDQTlJSHQ5S1NsYmEyVjVYU0E5SUc5MWREdGNiaUFnSUNBZ0lDOHZJR1Y0Y0c5eWRDQndjbTkwYnlCdFpYUm9iMlJ6SUhSdklHTnZjbVV1SlVOUFRsTlVVbFZEVkU5U0pTNXdjbTkwYjNSNWNHVXVKVTVCVFVVbFhHNGdJQ0FnSUNCcFppaDBlWEJsSUNZZ0pHVjRjRzl5ZEM1U0lDWW1JR1Y0Y0ZCeWIzUnZJQ1ltSUNGbGVIQlFjbTkwYjF0clpYbGRLV2hwWkdVb1pYaHdVSEp2ZEc4c0lHdGxlU3dnYjNWMEtUdGNiaUFnSUNCOVhHNGdJSDFjYm4wN1hHNHZMeUIwZVhCbElHSnBkRzFoY0Z4dUpHVjRjRzl5ZEM1R0lEMGdNVHNnSUNBdkx5Qm1iM0pqWldSY2JpUmxlSEJ2Y25RdVJ5QTlJREk3SUNBZ0x5OGdaMnh2WW1Gc1hHNGtaWGh3YjNKMExsTWdQU0EwT3lBZ0lDOHZJSE4wWVhScFkxeHVKR1Y0Y0c5eWRDNVFJRDBnT0RzZ0lDQXZMeUJ3Y205MGIxeHVKR1Y0Y0c5eWRDNUNJRDBnTVRZN0lDQXZMeUJpYVc1a1hHNGtaWGh3YjNKMExsY2dQU0F6TWpzZ0lDOHZJSGR5WVhCY2JpUmxlSEJ2Y25RdVZTQTlJRFkwT3lBZ0x5OGdjMkZtWlZ4dUpHVjRjRzl5ZEM1U0lEMGdNVEk0T3lBdkx5QnlaV0ZzSUhCeWIzUnZJRzFsZEdodlpDQm1iM0lnWUd4cFluSmhjbmxnSUZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNBa1pYaHdiM0owTzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZaWGh3YjNKMExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTRYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVZ05pQTNJRGdpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2JseHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdablZ1WTNScGIyNGdLR2x1YzNSaGJtTmxMQ0JEYjI1emRISjFZM1J2Y2lrZ2UxeHVJQ0JwWmlBb0lTaHBibk4wWVc1alpTQnBibk4wWVc1alpXOW1JRU52Ym5OMGNuVmpkRzl5S1NrZ2UxeHVJQ0FnSUhSb2NtOTNJRzVsZHlCVWVYQmxSWEp5YjNJb1hDSkRZVzV1YjNRZ1kyRnNiQ0JoSUdOc1lYTnpJR0Z6SUdFZ1puVnVZM1JwYjI1Y0lpazdYRzRnSUgxY2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wySmhZbVZzTFhKMWJuUnBiV1V2YUdWc2NHVnljeTlqYkdGemMwTmhiR3hEYUdWamF5NXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlEWWdOeUE0SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1Y2JtVjRjRzl5ZEhNdVgxOWxjMDF2WkhWc1pTQTlJSFJ5ZFdVN1hHNWNiblpoY2lCZlpHVm1hVzVsVUhKdmNHVnlkSGtnUFNCeVpYRjFhWEpsS0Z3aUxpNHZZMjl5WlMxcWN5OXZZbXBsWTNRdlpHVm1hVzVsTFhCeWIzQmxjblI1WENJcE8xeHVYRzUyWVhJZ1gyUmxabWx1WlZCeWIzQmxjblI1TWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJSbFptbHVaVkJ5YjNCbGNuUjVLVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCbWRXNWpkR2x2YmlCa1pXWnBibVZRY205d1pYSjBhV1Z6S0hSaGNtZGxkQ3dnY0hKdmNITXBJSHRjYmlBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJSEJ5YjNCekxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0IyWVhJZ1pHVnpZM0pwY0hSdmNpQTlJSEJ5YjNCelcybGRPMXh1SUNBZ0lDQWdaR1Z6WTNKcGNIUnZjaTVsYm5WdFpYSmhZbXhsSUQwZ1pHVnpZM0pwY0hSdmNpNWxiblZ0WlhKaFlteGxJSHg4SUdaaGJITmxPMXh1SUNBZ0lDQWdaR1Z6WTNKcGNIUnZjaTVqYjI1bWFXZDFjbUZpYkdVZ1BTQjBjblZsTzF4dUlDQWdJQ0FnYVdZZ0tGd2lkbUZzZFdWY0lpQnBiaUJrWlhOamNtbHdkRzl5S1NCa1pYTmpjbWx3ZEc5eUxuZHlhWFJoWW14bElEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNnd0xDQmZaR1ZtYVc1bFVISnZjR1Z5ZEhreUxtUmxabUYxYkhRcEtIUmhjbWRsZEN3Z1pHVnpZM0pwY0hSdmNpNXJaWGtzSUdSbGMyTnlhWEIwYjNJcE8xeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb1EyOXVjM1J5ZFdOMGIzSXNJSEJ5YjNSdlVISnZjSE1zSUhOMFlYUnBZMUJ5YjNCektTQjdYRzRnSUNBZ2FXWWdLSEJ5YjNSdlVISnZjSE1wSUdSbFptbHVaVkJ5YjNCbGNuUnBaWE1vUTI5dWMzUnlkV04wYjNJdWNISnZkRzkwZVhCbExDQndjbTkwYjFCeWIzQnpLVHRjYmlBZ0lDQnBaaUFvYzNSaGRHbGpVSEp2Y0hNcElHUmxabWx1WlZCeWIzQmxjblJwWlhNb1EyOXVjM1J5ZFdOMGIzSXNJSE4wWVhScFkxQnliM0J6S1R0Y2JpQWdJQ0J5WlhSMWNtNGdRMjl1YzNSeWRXTjBiM0k3WEc0Z0lIMDdYRzU5S0NrN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OWpjbVZoZEdWRGJHRnpjeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRCY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0EySURjZ09DSXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9aWGhsWXlsN1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnY21WMGRYSnVJQ0VoWlhobFl5Z3BPMXh1SUNCOUlHTmhkR05vS0dVcGUxeHVJQ0FnSUhKbGRIVnliaUIwY25WbE8xeHVJQ0I5WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmWm1GcGJITXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREV4WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlBMElEVWdOaUEzSURnaUxDSjJZWElnYUdGelQzZHVVSEp2Y0dWeWRIa2dQU0I3ZlM1b1lYTlBkMjVRY205d1pYSjBlVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRc0lHdGxlU2w3WEc0Z0lISmxkSFZ5YmlCb1lYTlBkMjVRY205d1pYSjBlUzVqWVd4c0tHbDBMQ0JyWlhrcE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyaGhjeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRKY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0lzSWk4dklIUnZJR2x1WkdWNFpXUWdiMkpxWldOMExDQjBiMDlpYW1WamRDQjNhWFJvSUdaaGJHeGlZV05ySUdadmNpQnViMjR0WVhKeVlYa3RiR2xyWlNCRlV6TWdjM1J5YVc1bmMxeHVkbUZ5SUVsUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBiMkpxWldOMEp5bGNiaUFnTENCa1pXWnBibVZrSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFpDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQkpUMkpxWldOMEtHUmxabWx1WldRb2FYUXBLVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwYnkxcGIySnFaV04wTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE0xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWdOQ0ExSWl3aUx5OGdiM0IwYVc5dVlXd2dMeUJ6YVcxd2JHVWdZMjl1ZEdWNGRDQmlhVzVrYVc1blhHNTJZWElnWVVaMWJtTjBhVzl1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZUzFtZFc1amRHbHZiaWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobWJpd2dkR2hoZEN3Z2JHVnVaM1JvS1h0Y2JpQWdZVVoxYm1OMGFXOXVLR1p1S1R0Y2JpQWdhV1lvZEdoaGRDQTlQVDBnZFc1a1pXWnBibVZrS1hKbGRIVnliaUJtYmp0Y2JpQWdjM2RwZEdOb0tHeGxibWQwYUNsN1hHNGdJQ0FnWTJGelpTQXhPaUJ5WlhSMWNtNGdablZ1WTNScGIyNG9ZU2w3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTR1WTJGc2JDaDBhR0YwTENCaEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUdOaGMyVWdNam9nY21WMGRYSnVJR1oxYm1OMGFXOXVLR0VzSUdJcGUxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdadUxtTmhiR3dvZEdoaGRDd2dZU3dnWWlrN1hHNGdJQ0FnZlR0Y2JpQWdJQ0JqWVhObElETTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaGhMQ0JpTENCaktYdGNiaUFnSUNBZ0lISmxkSFZ5YmlCbWJpNWpZV3hzS0hSb1lYUXNJR0VzSUdJc0lHTXBPMXh1SUNBZ0lIMDdYRzRnSUgxY2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUtDOHFJQzR1TG1GeVozTWdLaThwZTF4dUlDQWdJSEpsZEhWeWJpQm1iaTVoY0hCc2VTaDBhR0YwTENCaGNtZDFiV1Z1ZEhNcE8xeHVJQ0I5TzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJOMGVDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNVFJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TQTJJRGNnT0NJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UzMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGRHVnlZWFJ2Y25NdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTFYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHSnBkRzFoY0N3Z2RtRnNkV1VwZTF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUdWdWRXMWxjbUZpYkdVZ0lEb2dJU2hpYVhSdFlYQWdKaUF4S1N4Y2JpQWdJQ0JqYjI1bWFXZDFjbUZpYkdVNklDRW9ZbWwwYldGd0lDWWdNaWtzWEc0Z0lDQWdkM0pwZEdGaWJHVWdJQ0FnT2lBaEtHSnBkRzFoY0NBbUlEUXBMRnh1SUNBZ0lIWmhiSFZsSUNBZ0lDQWdJRG9nZG1Gc2RXVmNiaUFnZlR0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5d2NtOXdaWEowZVMxa1pYTmpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4Tmx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJRFlnTnlBNElpd2lMeThnTVRrdU1TNHlMakUwSUM4Z01UVXVNaTR6TGpFMElFOWlhbVZqZEM1clpYbHpLRThwWEc1MllYSWdKR3RsZVhNZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdGEyVjVjeTFwYm5SbGNtNWhiQ2NwWEc0Z0lDd2daVzUxYlVKMVowdGxlWE1nUFNCeVpYRjFhWEpsS0NjdUwxOWxiblZ0TFdKMVp5MXJaWGx6SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdUMkpxWldOMExtdGxlWE1nZkh3Z1puVnVZM1JwYjI0Z2EyVjVjeWhQS1h0Y2JpQWdjbVYwZFhKdUlDUnJaWGx6S0U4c0lHVnVkVzFDZFdkTFpYbHpLVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl2WW1wbFkzUXRhMlY1Y3k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UZGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0luWmhjaUIwYjFOMGNtbHVaeUE5SUh0OUxuUnZVM1J5YVc1bk8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlIUnZVM1J5YVc1bkxtTmhiR3dvYVhRcExuTnNhV05sS0Rnc0lDMHhLVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlqYjJZdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTRYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSjJZWElnYVhOUFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTF2WW1wbFkzUW5LVnh1SUNBc0lHUnZZM1Z0Wlc1MElEMGdjbVZ4ZFdseVpTZ25MaTlmWjJ4dlltRnNKeWt1Wkc5amRXMWxiblJjYmlBZ0x5OGdhVzRnYjJ4a0lFbEZJSFI1Y0dWdlppQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwSUdseklDZHZZbXBsWTNRblhHNGdJQ3dnYVhNZ1BTQnBjMDlpYW1WamRDaGtiMk4xYldWdWRDa2dKaVlnYVhOUFltcGxZM1FvWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDazdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwS1h0Y2JpQWdjbVYwZFhKdUlHbHpJRDhnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDaHBkQ2tnT2lCN2ZUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOWtiMjB0WTNKbFlYUmxMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4T1Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJRFlnTnlBNElpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lHbG1LSFI1Y0dWdlppQnBkQ0FoUFNBblpuVnVZM1JwYjI0bktYUm9jbTkzSUZSNWNHVkZjbkp2Y2locGRDQXJJQ2NnYVhNZ2JtOTBJR0VnWm5WdVkzUnBiMjRoSnlrN1hHNGdJSEpsZEhWeWJpQnBkRHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTloTFdaMWJtTjBhVzl1TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeU1GeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWdOQ0ExSURZZ055QTRJaXdpZG1GeUlHUmxaaUE5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxa2NDY3BMbVpjYmlBZ0xDQm9ZWE1nUFNCeVpYRjFhWEpsS0NjdUwxOW9ZWE1uS1Z4dUlDQXNJRlJCUnlBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZDBiMU4wY21sdVoxUmhaeWNwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHbDBMQ0IwWVdjc0lITjBZWFFwZTF4dUlDQnBaaWhwZENBbUppQWhhR0Z6S0dsMElEMGdjM1JoZENBL0lHbDBJRG9nYVhRdWNISnZkRzkwZVhCbExDQlVRVWNwS1dSbFppaHBkQ3dnVkVGSExDQjdZMjl1Wm1sbmRYSmhZbXhsT2lCMGNuVmxMQ0IyWVd4MVpUb2dkR0ZuZlNrN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdjdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlESXhYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSXZMeUEzTGpFdU1TQlViMUJ5YVcxcGRHbDJaU2hwYm5CMWRDQmJMQ0JRY21WbVpYSnlaV1JVZVhCbFhTbGNiblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwTzF4dUx5OGdhVzV6ZEdWaFpDQnZaaUIwYUdVZ1JWTTJJSE53WldNZ2RtVnljMmx2Yml3Z2QyVWdaR2xrYmlkMElHbHRjR3hsYldWdWRDQkFRSFJ2VUhKcGJXbDBhWFpsSUdOaGMyVmNiaTh2SUdGdVpDQjBhR1VnYzJWamIyNWtJR0Z5WjNWdFpXNTBJQzBnWm14aFp5QXRJSEJ5WldabGNuSmxaQ0IwZVhCbElHbHpJR0VnYzNSeWFXNW5YRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwTENCVEtYdGNiaUFnYVdZb0lXbHpUMkpxWldOMEtHbDBLU2x5WlhSMWNtNGdhWFE3WEc0Z0lIWmhjaUJtYml3Z2RtRnNPMXh1SUNCcFppaFRJQ1ltSUhSNWNHVnZaaUFvWm00Z1BTQnBkQzUwYjFOMGNtbHVaeWtnUFQwZ0oyWjFibU4wYVc5dUp5QW1KaUFoYVhOUFltcGxZM1FvZG1Gc0lEMGdabTR1WTJGc2JDaHBkQ2twS1hKbGRIVnliaUIyWVd3N1hHNGdJR2xtS0hSNWNHVnZaaUFvWm00Z1BTQnBkQzUyWVd4MVpVOW1LU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZwYzA5aWFtVmpkQ2gyWVd3Z1BTQm1iaTVqWVd4c0tHbDBLU2twY21WMGRYSnVJSFpoYkR0Y2JpQWdhV1lvSVZNZ0ppWWdkSGx3Wlc5bUlDaG1iaUE5SUdsMExuUnZVM1J5YVc1bktTQTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlDRnBjMDlpYW1WamRDaDJZV3dnUFNCbWJpNWpZV3hzS0dsMEtTa3BjbVYwZFhKdUlIWmhiRHRjYmlBZ2RHaHliM2NnVkhsd1pVVnljbTl5S0Z3aVEyRnVKM1FnWTI5dWRtVnlkQ0J2WW1wbFkzUWdkRzhnY0hKcGJXbDBhWFpsSUhaaGJIVmxYQ0lwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNSdkxYQnlhVzFwZEdsMlpTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNakpjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TQTJJRGNnT0NJc0luWmhjaUJwWkNBOUlEQmNiaUFnTENCd2VDQTlJRTFoZEdndWNtRnVaRzl0S0NrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHdGxlU2w3WEc0Z0lISmxkSFZ5YmlBblUzbHRZbTlzS0NjdVkyOXVZMkYwS0d0bGVTQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z0p5Y2dPaUJyWlhrc0lDY3BYeWNzSUNncksybGtJQ3NnY0hncExuUnZVM1J5YVc1bktETTJLU2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZFdsa0xtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXlNMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlpd2lMeThnTnk0eUxqRWdVbVZ4ZFdseVpVOWlhbVZqZEVOdlpYSmphV0pzWlNoaGNtZDFiV1Z1ZENsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCcFppaHBkQ0E5UFNCMWJtUmxabWx1WldRcGRHaHliM2NnVkhsd1pVVnljbTl5S0Z3aVEyRnVKM1FnWTJGc2JDQnRaWFJvYjJRZ2IyNGdJRndpSUNzZ2FYUXBPMXh1SUNCeVpYUjFjbTRnYVhRN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZlpHVm1hVzVsWkM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01qUmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0ltMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2RISjFaVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyeHBZbkpoY25rdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlESTFYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSjJZWElnYzJoaGNtVmtJRDBnY21WeGRXbHlaU2duTGk5ZmMyaGhjbVZrSnlrb0oydGxlWE1uS1Z4dUlDQXNJSFZwWkNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNWcFpDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhyWlhrcGUxeHVJQ0J5WlhSMWNtNGdjMmhoY21Wa1cydGxlVjBnZkh3Z0tITm9ZWEpsWkZ0clpYbGRJRDBnZFdsa0tHdGxlU2twTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNOb1lYSmxaQzFyWlhrdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlESTJYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSXZMeUEzTGpFdU5DQlViMGx1ZEdWblpYSmNiblpoY2lCalpXbHNJQ0E5SUUxaGRHZ3VZMlZwYkZ4dUlDQXNJR1pzYjI5eUlEMGdUV0YwYUM1bWJHOXZjanRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdhWE5PWVU0b2FYUWdQU0FyYVhRcElEOGdNQ0E2SUNocGRDQStJREFnUHlCbWJHOXZjaUE2SUdObGFXd3BLR2wwS1R0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5MGJ5MXBiblJsWjJWeUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXlOMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlpd2lMeThnU1VVZ09DMGdaRzl1SjNRZ1pXNTFiU0JpZFdjZ2EyVjVjMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0FvWEc0Z0lDZGpiMjV6ZEhKMVkzUnZjaXhvWVhOUGQyNVFjbTl3WlhKMGVTeHBjMUJ5YjNSdmRIbHdaVTltTEhCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bExIUnZURzlqWVd4bFUzUnlhVzVuTEhSdlUzUnlhVzVuTEhaaGJIVmxUMlluWEc0cExuTndiR2wwS0Njc0p5azdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5bGJuVnRMV0oxWnkxclpYbHpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F5T0Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0FoY21WeGRXbHlaU2duTGk5ZlpHVnpZM0pwY0hSdmNuTW5LU0FtSmlBaGNtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpZ3BlMXh1SUNCeVpYUjFjbTRnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtISmxjWFZwY21Vb0p5NHZYMlJ2YlMxamNtVmhkR1VuS1NnblpHbDJKeWtzSUNkaEp5d2dlMmRsZERvZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlEYzdJSDE5S1M1aElDRTlJRGM3WEc1OUtUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsbE9DMWtiMjB0WkdWbWFXNWxMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F5T1Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJRFlnTnlBNElpd2lkbUZ5SUdkc2IySmhiQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnVTBoQlVrVkVJRDBnSjE5ZlkyOXlaUzFxYzE5emFHRnlaV1JmWHlkY2JpQWdMQ0J6ZEc5eVpTQWdQU0JuYkc5aVlXeGJVMGhCVWtWRVhTQjhmQ0FvWjJ4dlltRnNXMU5JUVZKRlJGMGdQU0I3ZlNrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHdGxlU2w3WEc0Z0lISmxkSFZ5YmlCemRHOXlaVnRyWlhsZElIeDhJQ2h6ZEc5eVpWdHJaWGxkSUQwZ2UzMHBPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM05vWVhKbFpDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNekJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TSXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdleUJjSW1SbFptRjFiSFJjSWpvZ2NtVnhkV2x5WlNoY0ltTnZjbVV0YW5NdmJHbGljbUZ5ZVM5bWJpOXZZbXBsWTNRdloyVjBMWEJ5YjNSdmRIbHdaUzF2Wmx3aUtTd2dYMTlsYzAxdlpIVnNaVG9nZEhKMVpTQjlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMmRsZEMxd2NtOTBiM1I1Y0dVdGIyWXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRE14WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlJc0lpOHZJRGN1TVM0eE15QlViMDlpYW1WamRDaGhjbWQxYldWdWRDbGNiblpoY2lCa1pXWnBibVZrSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFpDY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSEpsZEhWeWJpQlBZbXBsWTNRb1pHVm1hVzVsWkNocGRDa3BPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYM1J2TFc5aWFtVmpkQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTXpKY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0lzSWx3aWRYTmxJSE4wY21samRGd2lPMXh1WEc1bGVIQnZjblJ6TGw5ZlpYTk5iMlIxYkdVZ1BTQjBjblZsTzF4dVhHNTJZWElnWDNObGRGQnliM1J2ZEhsd1pVOW1JRDBnY21WeGRXbHlaU2hjSWk0dUwyTnZjbVV0YW5NdmIySnFaV04wTDNObGRDMXdjbTkwYjNSNWNHVXRiMlpjSWlrN1hHNWNiblpoY2lCZmMyVjBVSEp2ZEc5MGVYQmxUMll5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmYzJWMFVISnZkRzkwZVhCbFQyWXBPMXh1WEc1MllYSWdYMk55WldGMFpTQTlJSEpsY1hWcGNtVW9YQ0l1TGk5amIzSmxMV3B6TDI5aWFtVmpkQzlqY21WaGRHVmNJaWs3WEc1Y2JuWmhjaUJmWTNKbFlYUmxNaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9YMk55WldGMFpTazdYRzVjYm5aaGNpQmZkSGx3Wlc5bU1pQTlJSEpsY1hWcGNtVW9YQ0l1TGk5b1pXeHdaWEp6TDNSNWNHVnZabHdpS1R0Y2JseHVkbUZ5SUY5MGVYQmxiMll6SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmZEhsd1pXOW1NaWs3WEc1Y2JtWjFibU4wYVc5dUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvYjJKcUtTQjdJSEpsZEhWeWJpQnZZbW9nSmlZZ2IySnFMbDlmWlhOTmIyUjFiR1VnUHlCdlltb2dPaUI3SUdSbFptRjFiSFE2SUc5aWFpQjlPeUI5WEc1Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHWjFibU4wYVc5dUlDaHpkV0pEYkdGemN5d2djM1Z3WlhKRGJHRnpjeWtnZTF4dUlDQnBaaUFvZEhsd1pXOW1JSE4xY0dWeVEyeGhjM01nSVQwOUlGd2lablZ1WTNScGIyNWNJaUFtSmlCemRYQmxja05zWVhOeklDRTlQU0J1ZFd4c0tTQjdYRzRnSUNBZ2RHaHliM2NnYm1WM0lGUjVjR1ZGY25KdmNpaGNJbE4xY0dWeUlHVjRjSEpsYzNOcGIyNGdiWFZ6ZENCbGFYUm9aWElnWW1VZ2JuVnNiQ0J2Y2lCaElHWjFibU4wYVc5dUxDQnViM1FnWENJZ0t5QW9kSGx3Wlc5bUlITjFjR1Z5UTJ4aGMzTWdQVDA5SUZ3aWRXNWtaV1pwYm1Wa1hDSWdQeUJjSW5WdVpHVm1hVzVsWkZ3aUlEb2dLREFzSUY5MGVYQmxiMll6TG1SbFptRjFiSFFwS0hOMWNHVnlRMnhoYzNNcEtTazdYRzRnSUgxY2JseHVJQ0J6ZFdKRGJHRnpjeTV3Y205MGIzUjVjR1VnUFNBb01Dd2dYMk55WldGMFpUSXVaR1ZtWVhWc2RDa29jM1Z3WlhKRGJHRnpjeUFtSmlCemRYQmxja05zWVhOekxuQnliM1J2ZEhsd1pTd2dlMXh1SUNBZ0lHTnZibk4wY25WamRHOXlPaUI3WEc0Z0lDQWdJQ0IyWVd4MVpUb2djM1ZpUTJ4aGMzTXNYRzRnSUNBZ0lDQmxiblZ0WlhKaFlteGxPaUJtWVd4elpTeGNiaUFnSUNBZ0lIZHlhWFJoWW14bE9pQjBjblZsTEZ4dUlDQWdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsWEc0Z0lDQWdmVnh1SUNCOUtUdGNiaUFnYVdZZ0tITjFjR1Z5UTJ4aGMzTXBJRjl6WlhSUWNtOTBiM1I1Y0dWUFpqSXVaR1ZtWVhWc2RDQS9JQ2d3TENCZmMyVjBVSEp2ZEc5MGVYQmxUMll5TG1SbFptRjFiSFFwS0hOMVlrTnNZWE56TENCemRYQmxja05zWVhOektTQTZJSE4xWWtOc1lYTnpMbDlmY0hKdmRHOWZYeUE5SUhOMWNHVnlRMnhoYzNNN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJobGJIQmxjbk12YVc1b1pYSnBkSE11YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015SXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzVsZUhCdmNuUnpMbDlmWlhOTmIyUjFiR1VnUFNCMGNuVmxPMXh1WEc1MllYSWdYM1I1Y0dWdlpqSWdQU0J5WlhGMWFYSmxLRndpTGk0dmFHVnNjR1Z5Y3k5MGVYQmxiMlpjSWlrN1hHNWNiblpoY2lCZmRIbHdaVzltTXlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDNSNWNHVnZaaklwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQW9jMlZzWml3Z1kyRnNiQ2tnZTF4dUlDQnBaaUFvSVhObGJHWXBJSHRjYmlBZ0lDQjBhSEp2ZHlCdVpYY2dVbVZtWlhKbGJtTmxSWEp5YjNJb1hDSjBhR2x6SUdoaGMyNG5kQ0JpWldWdUlHbHVhWFJwWVd4cGMyVmtJQzBnYzNWd1pYSW9LU0JvWVhOdUozUWdZbVZsYmlCallXeHNaV1JjSWlrN1hHNGdJSDFjYmx4dUlDQnlaWFIxY200Z1kyRnNiQ0FtSmlBb0tIUjVjR1Z2WmlCallXeHNJRDA5UFNCY0luVnVaR1ZtYVc1bFpGd2lJRDhnWENKMWJtUmxabWx1WldSY0lpQTZJQ2d3TENCZmRIbHdaVzltTXk1a1pXWmhkV3gwS1NoallXeHNLU2tnUFQwOUlGd2liMkpxWldOMFhDSWdmSHdnZEhsd1pXOW1JR05oYkd3Z1BUMDlJRndpWm5WdVkzUnBiMjVjSWlrZ1B5QmpZV3hzSURvZ2MyVnNaanRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZhR1ZzY0dWeWN5OXdiM056YVdKc1pVTnZibk4wY25WamRHOXlVbVYwZFhKdUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXpORnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENJdkx5QXhPUzR4TGpJdU1pQXZJREUxTGpJdU15NDFJRTlpYW1WamRDNWpjbVZoZEdVb1R5QmJMQ0JRY205d1pYSjBhV1Z6WFNsY2JuWmhjaUJoYms5aWFtVmpkQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2daRkJ6SUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQnpKeWxjYmlBZ0xDQmxiblZ0UW5WblMyVjVjeUE5SUhKbGNYVnBjbVVvSnk0dlgyVnVkVzB0WW5WbkxXdGxlWE1uS1Z4dUlDQXNJRWxGWDFCU1QxUlBJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMmhoY21Wa0xXdGxlU2NwS0NkSlJWOVFVazlVVHljcFhHNGdJQ3dnUlcxd2RIa2dJQ0FnSUNBZ1BTQm1kVzVqZEdsdmJpZ3BleUF2S2lCbGJYQjBlU0FxTHlCOVhHNGdJQ3dnVUZKUFZFOVVXVkJGSUNBZ1BTQW5jSEp2ZEc5MGVYQmxKenRjYmx4dUx5OGdRM0psWVhSbElHOWlhbVZqZENCM2FYUm9JR1poYTJVZ1lHNTFiR3hnSUhCeWIzUnZkSGx3WlRvZ2RYTmxJR2xtY21GdFpTQlBZbXBsWTNRZ2QybDBhQ0JqYkdWaGNtVmtJSEJ5YjNSdmRIbHdaVnh1ZG1GeUlHTnlaV0YwWlVScFkzUWdQU0JtZFc1amRHbHZiaWdwZTF4dUlDQXZMeUJVYUhKaGMyZ3NJSGRoYzNSbElHRnVaQ0J6YjJSdmJYazZJRWxGSUVkRElHSjFaMXh1SUNCMllYSWdhV1p5WVcxbElEMGdjbVZ4ZFdseVpTZ25MaTlmWkc5dExXTnlaV0YwWlNjcEtDZHBabkpoYldVbktWeHVJQ0FnSUN3Z2FTQWdJQ0FnSUQwZ1pXNTFiVUoxWjB0bGVYTXViR1Z1WjNSb1hHNGdJQ0FnTENCc2RDQWdJQ0FnUFNBblBDZGNiaUFnSUNBc0lHZDBJQ0FnSUNBOUlDYytKMXh1SUNBZ0lDd2dhV1p5WVcxbFJHOWpkVzFsYm5RN1hHNGdJR2xtY21GdFpTNXpkSGxzWlM1a2FYTndiR0Y1SUQwZ0oyNXZibVVuTzF4dUlDQnlaWEYxYVhKbEtDY3VMMTlvZEcxc0p5a3VZWEJ3Wlc1a1EyaHBiR1FvYVdaeVlXMWxLVHRjYmlBZ2FXWnlZVzFsTG5OeVl5QTlJQ2RxWVhaaGMyTnlhWEIwT2ljN0lDOHZJR1Z6YkdsdWRDMWthWE5oWW14bExXeHBibVVnYm04dGMyTnlhWEIwTFhWeWJGeHVJQ0F2THlCamNtVmhkR1ZFYVdOMElEMGdhV1p5WVcxbExtTnZiblJsYm5SWGFXNWtiM2N1VDJKcVpXTjBPMXh1SUNBdkx5Qm9kRzFzTG5KbGJXOTJaVU5vYVd4a0tHbG1jbUZ0WlNrN1hHNGdJR2xtY21GdFpVUnZZM1Z0Wlc1MElEMGdhV1p5WVcxbExtTnZiblJsYm5SWGFXNWtiM2N1Wkc5amRXMWxiblE3WEc0Z0lHbG1jbUZ0WlVSdlkzVnRaVzUwTG05d1pXNG9LVHRjYmlBZ2FXWnlZVzFsUkc5amRXMWxiblF1ZDNKcGRHVW9iSFFnS3lBbmMyTnlhWEIwSnlBcklHZDBJQ3NnSjJSdlkzVnRaVzUwTGtZOVQySnFaV04wSnlBcklHeDBJQ3NnSnk5elkzSnBjSFFuSUNzZ1ozUXBPMXh1SUNCcFpuSmhiV1ZFYjJOMWJXVnVkQzVqYkc5elpTZ3BPMXh1SUNCamNtVmhkR1ZFYVdOMElEMGdhV1p5WVcxbFJHOWpkVzFsYm5RdVJqdGNiaUFnZDJocGJHVW9hUzB0S1dSbGJHVjBaU0JqY21WaGRHVkVhV04wVzFCU1QxUlBWRmxRUlYxYlpXNTFiVUoxWjB0bGVYTmJhVjFkTzF4dUlDQnlaWFIxY200Z1kzSmxZWFJsUkdsamRDZ3BPMXh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlBZbXBsWTNRdVkzSmxZWFJsSUh4OElHWjFibU4wYVc5dUlHTnlaV0YwWlNoUExDQlFjbTl3WlhKMGFXVnpLWHRjYmlBZ2RtRnlJSEpsYzNWc2REdGNiaUFnYVdZb1R5QWhQVDBnYm5Wc2JDbDdYRzRnSUNBZ1JXMXdkSGxiVUZKUFZFOVVXVkJGWFNBOUlHRnVUMkpxWldOMEtFOHBPMXh1SUNBZ0lISmxjM1ZzZENBOUlHNWxkeUJGYlhCMGVUdGNiaUFnSUNCRmJYQjBlVnRRVWs5VVQxUlpVRVZkSUQwZ2JuVnNiRHRjYmlBZ0lDQXZMeUJoWkdRZ1hDSmZYM0J5YjNSdlgxOWNJaUJtYjNJZ1QySnFaV04wTG1kbGRGQnliM1J2ZEhsd1pVOW1JSEJ2YkhsbWFXeHNYRzRnSUNBZ2NtVnpkV3gwVzBsRlgxQlNUMVJQWFNBOUlFODdYRzRnSUgwZ1pXeHpaU0J5WlhOMWJIUWdQU0JqY21WaGRHVkVhV04wS0NrN1hHNGdJSEpsZEhWeWJpQlFjbTl3WlhKMGFXVnpJRDA5UFNCMWJtUmxabWx1WldRZ1B5QnlaWE4xYkhRZ09pQmtVSE1vY21WemRXeDBMQ0JRY205d1pYSjBhV1Z6S1R0Y2JuMDdYRzVjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxamNtVmhkR1V1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURNMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015QTBJRFVpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ1hDSmtaV1poZFd4MFhDSTZJSEpsY1hWcGNtVW9YQ0pqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMlJsWm1sdVpTMXdjbTl3WlhKMGVWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmIySnFaV04wTDJSbFptbHVaUzF3Y205d1pYSjBlUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTXpaY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0EySURjZ09DSXNJbkpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWtaV1pwYm1VdGNISnZjR1Z5ZEhrbktUdGNiblpoY2lBa1QySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpTY3BMazlpYW1WamREdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdaR1ZtYVc1bFVISnZjR1Z5ZEhrb2FYUXNJR3RsZVN3Z1pHVnpZeWw3WEc0Z0lISmxkSFZ5YmlBa1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR2wwTENCclpYa3NJR1JsYzJNcE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOWtaV1pwYm1VdGNISnZjR1Z5ZEhrdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlETTNYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVZ05pQTNJRGdpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ1RFbENVa0ZTV1NBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXNhV0p5WVhKNUp5bGNiaUFnTENBa1pYaHdiM0owSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyVjRjRzl5ZENjcFhHNGdJQ3dnY21Wa1pXWnBibVVnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcFhHNGdJQ3dnYUdsa1pTQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWxjYmlBZ0xDQm9ZWE1nSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhoY3ljcFhHNGdJQ3dnU1hSbGNtRjBiM0p6SUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGRHVnlZWFJ2Y25NbktWeHVJQ0FzSUNScGRHVnlRM0psWVhSbElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjaTFqY21WaGRHVW5LVnh1SUNBc0lITmxkRlJ2VTNSeWFXNW5WR0ZuSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMlYwTFhSdkxYTjBjbWx1WnkxMFlXY25LVnh1SUNBc0lHZGxkRkJ5YjNSdmRIbHdaVTltSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHdieWNwWEc0Z0lDd2dTVlJGVWtGVVQxSWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25hWFJsY21GMGIzSW5LVnh1SUNBc0lFSlZSMGRaSUNBZ0lDQWdJQ0FnSUQwZ0lTaGJYUzVyWlhseklDWW1JQ2R1WlhoMEp5QnBiaUJiWFM1clpYbHpLQ2twSUM4dklGTmhabUZ5YVNCb1lYTWdZblZuWjNrZ2FYUmxjbUYwYjNKeklIY3ZieUJnYm1WNGRHQmNiaUFnTENCR1JsOUpWRVZTUVZSUFVpQWdJQ0E5SUNkQVFHbDBaWEpoZEc5eUoxeHVJQ0FzSUV0RldWTWdJQ0FnSUNBZ0lDQWdJRDBnSjJ0bGVYTW5YRzRnSUN3Z1ZrRk1WVVZUSUNBZ0lDQWdJQ0FnUFNBbmRtRnNkV1Z6Snp0Y2JseHVkbUZ5SUhKbGRIVnlibFJvYVhNZ1BTQm1kVzVqZEdsdmJpZ3BleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhDWVhObExDQk9RVTFGTENCRGIyNXpkSEoxWTNSdmNpd2dibVY0ZEN3Z1JFVkdRVlZNVkN3Z1NWTmZVMFZVTENCR1QxSkRSVVFwZTF4dUlDQWthWFJsY2tOeVpXRjBaU2hEYjI1emRISjFZM1J2Y2l3Z1RrRk5SU3dnYm1WNGRDazdYRzRnSUhaaGNpQm5aWFJOWlhSb2IyUWdQU0JtZFc1amRHbHZiaWhyYVc1a0tYdGNiaUFnSUNCcFppZ2hRbFZIUjFrZ0ppWWdhMmx1WkNCcGJpQndjbTkwYnlseVpYUjFjbTRnY0hKdmRHOWJhMmx1WkYwN1hHNGdJQ0FnYzNkcGRHTm9LR3RwYm1RcGUxeHVJQ0FnSUNBZ1kyRnpaU0JMUlZsVE9pQnlaWFIxY200Z1puVnVZM1JwYjI0Z2EyVjVjeWdwZXlCeVpYUjFjbTRnYm1WM0lFTnZibk4wY25WamRHOXlLSFJvYVhNc0lHdHBibVFwT3lCOU8xeHVJQ0FnSUNBZ1kyRnpaU0JXUVV4VlJWTTZJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQjJZV3gxWlhNb0tYc2djbVYwZFhKdUlHNWxkeUJEYjI1emRISjFZM1J2Y2loMGFHbHpMQ0JyYVc1a0tUc2dmVHRjYmlBZ0lDQjlJSEpsZEhWeWJpQm1kVzVqZEdsdmJpQmxiblJ5YVdWektDbDdJSEpsZEhWeWJpQnVaWGNnUTI5dWMzUnlkV04wYjNJb2RHaHBjeXdnYTJsdVpDazdJSDA3WEc0Z0lIMDdYRzRnSUhaaGNpQlVRVWNnSUNBZ0lDQWdJRDBnVGtGTlJTQXJJQ2NnU1hSbGNtRjBiM0luWEc0Z0lDQWdMQ0JFUlVaZlZrRk1WVVZUSUQwZ1JFVkdRVlZNVkNBOVBTQldRVXhWUlZOY2JpQWdJQ0FzSUZaQlRGVkZVMTlDVlVjZ1BTQm1ZV3h6WlZ4dUlDQWdJQ3dnY0hKdmRHOGdJQ0FnSUNBOUlFSmhjMlV1Y0hKdmRHOTBlWEJsWEc0Z0lDQWdMQ0FrYm1GMGFYWmxJQ0FnSUQwZ2NISnZkRzliU1ZSRlVrRlVUMUpkSUh4OElIQnliM1J2VzBaR1gwbFVSVkpCVkU5U1hTQjhmQ0JFUlVaQlZVeFVJQ1ltSUhCeWIzUnZXMFJGUmtGVlRGUmRYRzRnSUNBZ0xDQWtaR1ZtWVhWc2RDQWdJRDBnSkc1aGRHbDJaU0I4ZkNCblpYUk5aWFJvYjJRb1JFVkdRVlZNVkNsY2JpQWdJQ0FzSUNSbGJuUnlhV1Z6SUNBZ1BTQkVSVVpCVlV4VUlEOGdJVVJGUmw5V1FVeFZSVk1nUHlBa1pHVm1ZWFZzZENBNklHZGxkRTFsZEdodlpDZ25aVzUwY21sbGN5Y3BJRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdMQ0FrWVc1NVRtRjBhWFpsSUQwZ1RrRk5SU0E5UFNBblFYSnlZWGtuSUQ4Z2NISnZkRzh1Wlc1MGNtbGxjeUI4ZkNBa2JtRjBhWFpsSURvZ0pHNWhkR2wyWlZ4dUlDQWdJQ3dnYldWMGFHOWtjeXdnYTJWNUxDQkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pUdGNiaUFnTHk4Z1JtbDRJRzVoZEdsMlpWeHVJQ0JwWmlna1lXNTVUbUYwYVhabEtYdGNiaUFnSUNCSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNBOUlHZGxkRkJ5YjNSdmRIbHdaVTltS0NSaGJubE9ZWFJwZG1VdVkyRnNiQ2h1WlhjZ1FtRnpaU2twTzF4dUlDQWdJR2xtS0VsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSUNFOVBTQlBZbXBsWTNRdWNISnZkRzkwZVhCbEtYdGNiaUFnSUNBZ0lDOHZJRk5sZENCQVFIUnZVM1J5YVc1blZHRm5JSFJ2SUc1aGRHbDJaU0JwZEdWeVlYUnZjbk5jYmlBZ0lDQWdJSE5sZEZSdlUzUnlhVzVuVkdGbktFbDBaWEpoZEc5eVVISnZkRzkwZVhCbExDQlVRVWNzSUhSeWRXVXBPMXh1SUNBZ0lDQWdMeThnWm1sNElHWnZjaUJ6YjIxbElHOXNaQ0JsYm1kcGJtVnpYRzRnSUNBZ0lDQnBaaWdoVEVsQ1VrRlNXU0FtSmlBaGFHRnpLRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxMQ0JKVkVWU1FWUlBVaWtwYUdsa1pTaEpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTd2dTVlJGVWtGVVQxSXNJSEpsZEhWeWJsUm9hWE1wTzF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0F2THlCbWFYZ2dRWEp5WVhramUzWmhiSFZsY3l3Z1FFQnBkR1Z5WVhSdmNuMHVibUZ0WlNCcGJpQldPQ0F2SUVaR1hHNGdJR2xtS0VSRlJsOVdRVXhWUlZNZ0ppWWdKRzVoZEdsMlpTQW1KaUFrYm1GMGFYWmxMbTVoYldVZ0lUMDlJRlpCVEZWRlV5bDdYRzRnSUNBZ1ZrRk1WVVZUWDBKVlJ5QTlJSFJ5ZFdVN1hHNGdJQ0FnSkdSbFptRjFiSFFnUFNCbWRXNWpkR2x2YmlCMllXeDFaWE1vS1hzZ2NtVjBkWEp1SUNSdVlYUnBkbVV1WTJGc2JDaDBhR2x6S1RzZ2ZUdGNiaUFnZlZ4dUlDQXZMeUJFWldacGJtVWdhWFJsY21GMGIzSmNiaUFnYVdZb0tDRk1TVUpTUVZKWklIeDhJRVpQVWtORlJDa2dKaVlnS0VKVlIwZFpJSHg4SUZaQlRGVkZVMTlDVlVjZ2ZId2dJWEJ5YjNSdlcwbFVSVkpCVkU5U1hTa3BlMXh1SUNBZ0lHaHBaR1VvY0hKdmRHOHNJRWxVUlZKQlZFOVNMQ0FrWkdWbVlYVnNkQ2s3WEc0Z0lIMWNiaUFnTHk4Z1VHeDFaeUJtYjNJZ2JHbGljbUZ5ZVZ4dUlDQkpkR1Z5WVhSdmNuTmJUa0ZOUlYwZ1BTQWtaR1ZtWVhWc2REdGNiaUFnU1hSbGNtRjBiM0p6VzFSQlIxMGdJRDBnY21WMGRYSnVWR2hwY3p0Y2JpQWdhV1lvUkVWR1FWVk1WQ2w3WEc0Z0lDQWdiV1YwYUc5a2N5QTlJSHRjYmlBZ0lDQWdJSFpoYkhWbGN6b2dJRVJGUmw5V1FVeFZSVk1nUHlBa1pHVm1ZWFZzZENBNklHZGxkRTFsZEdodlpDaFdRVXhWUlZNcExGeHVJQ0FnSUNBZ2EyVjVjem9nSUNBZ1NWTmZVMFZVSUNBZ0lDQS9JQ1JrWldaaGRXeDBJRG9nWjJWMFRXVjBhRzlrS0V0RldWTXBMRnh1SUNBZ0lDQWdaVzUwY21sbGN6b2dKR1Z1ZEhKcFpYTmNiaUFnSUNCOU8xeHVJQ0FnSUdsbUtFWlBVa05GUkNsbWIzSW9hMlY1SUdsdUlHMWxkR2h2WkhNcGUxeHVJQ0FnSUNBZ2FXWW9JU2hyWlhrZ2FXNGdjSEp2ZEc4cEtYSmxaR1ZtYVc1bEtIQnliM1J2TENCclpYa3NJRzFsZEdodlpITmJhMlY1WFNrN1hHNGdJQ0FnZlNCbGJITmxJQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tFSlZSMGRaSUh4OElGWkJURlZGVTE5Q1ZVY3BMQ0JPUVUxRkxDQnRaWFJvYjJSektUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2JXVjBhRzlrY3p0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGRHVnlMV1JsWm1sdVpTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdNemhjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TSXNJblpoY2lBa1pYaHdiM0owSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5azdYRzR2THlBeE9TNHhMakl1TkNBdklERTFMakl1TXk0MklFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hQTENCUUxDQkJkSFJ5YVdKMWRHVnpLVnh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQWhjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTd2dKMDlpYW1WamRDY3NJSHRrWldacGJtVlFjbTl3WlhKMGVUb2djbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlrdVpuMHBPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtUmxabWx1WlMxd2NtOXdaWEowZVM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ016bGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNBMklEY2dPQ0lzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnZXlCY0ltUmxabUYxYkhSY0lqb2djbVZ4ZFdseVpTaGNJbU52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTlxYzI5dUwzTjBjbWx1WjJsbWVWd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmFuTnZiaTl6ZEhKcGJtZHBabmt1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRd1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015QTBJRFVnTmlJc0ltVjRjRzl5ZEhNdVppQTlJSHQ5TG5CeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bE8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYjJKcVpXTjBMWEJwWlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ05ERmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1M1a2IyTjFiV1Z1ZENBbUppQmtiMk4xYldWdWRDNWtiMk4xYldWdWRFVnNaVzFsYm5RN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlvZEcxc0xtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTBNbHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlpd2lMeThnTVRrdU1TNHlMamtnTHlBeE5TNHlMak11TWlCUFltcGxZM1F1WjJWMFVISnZkRzkwZVhCbFQyWW9UeWxjYm5aaGNpQm9ZWE1nSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaGhjeWNwWEc0Z0lDd2dkRzlQWW1wbFkzUWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF2WW1wbFkzUW5LVnh1SUNBc0lFbEZYMUJTVDFSUElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmMyaGhjbVZrTFd0bGVTY3BLQ2RKUlY5UVVrOVVUeWNwWEc0Z0lDd2dUMkpxWldOMFVISnZkRzhnUFNCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlFOWlhbVZqZEM1blpYUlFjbTkwYjNSNWNHVlBaaUI4ZkNCbWRXNWpkR2x2YmloUEtYdGNiaUFnVHlBOUlIUnZUMkpxWldOMEtFOHBPMXh1SUNCcFppaG9ZWE1vVHl3Z1NVVmZVRkpQVkU4cEtYSmxkSFZ5YmlCUFcwbEZYMUJTVDFSUFhUdGNiaUFnYVdZb2RIbHdaVzltSUU4dVkyOXVjM1J5ZFdOMGIzSWdQVDBnSjJaMWJtTjBhVzl1SnlBbUppQlBJR2x1YzNSaGJtTmxiMllnVHk1amIyNXpkSEoxWTNSdmNpbDdYRzRnSUNBZ2NtVjBkWEp1SUU4dVkyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxPMXh1SUNCOUlISmxkSFZ5YmlCUElHbHVjM1JoYm1ObGIyWWdUMkpxWldOMElEOGdUMkpxWldOMFVISnZkRzhnT2lCdWRXeHNPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMjlpYW1WamRDMW5jRzh1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015QTBJRFVpTENKMllYSWdhR0Z6SUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZhR0Z6SnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGIySnFaV04wSnlsY2JpQWdMQ0JoY25KaGVVbHVaR1Y0VDJZZ1BTQnlaWEYxYVhKbEtDY3VMMTloY25KaGVTMXBibU5zZFdSbGN5Y3BLR1poYkhObEtWeHVJQ0FzSUVsRlgxQlNUMVJQSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNOb1lYSmxaQzFyWlhrbktTZ25TVVZmVUZKUFZFOG5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlodlltcGxZM1FzSUc1aGJXVnpLWHRjYmlBZ2RtRnlJRThnSUNBZ0lDQTlJSFJ2U1U5aWFtVmpkQ2h2WW1wbFkzUXBYRzRnSUNBZ0xDQnBJQ0FnSUNBZ1BTQXdYRzRnSUNBZ0xDQnlaWE4xYkhRZ1BTQmJYVnh1SUNBZ0lDd2dhMlY1TzF4dUlDQm1iM0lvYTJWNUlHbHVJRThwYVdZb2EyVjVJQ0U5SUVsRlgxQlNUMVJQS1doaGN5aFBMQ0JyWlhrcElDWW1JSEpsYzNWc2RDNXdkWE5vS0d0bGVTazdYRzRnSUM4dklFUnZiaWQwSUdWdWRXMGdZblZuSUNZZ2FHbGtaR1Z1SUd0bGVYTmNiaUFnZDJocGJHVW9ibUZ0WlhNdWJHVnVaM1JvSUQ0Z2FTbHBaaWhvWVhNb1R5d2dhMlY1SUQwZ2JtRnRaWE5iYVNzclhTa3BlMXh1SUNBZ0lINWhjbkpoZVVsdVpHVjRUMllvY21WemRXeDBMQ0JyWlhrcElIeDhJSEpsYzNWc2RDNXdkWE5vS0d0bGVTazdYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0YTJWNWN5MXBiblJsY201aGJDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdORFJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TSXNJaTh2SUcxdmMzUWdUMkpxWldOMElHMWxkR2h2WkhNZ1lua2dSVk0ySUhOb2IzVnNaQ0JoWTJObGNIUWdjSEpwYldsMGFYWmxjMXh1ZG1GeUlDUmxlSEJ2Y25RZ1BTQnlaWEYxYVhKbEtDY3VMMTlsZUhCdmNuUW5LVnh1SUNBc0lHTnZjbVVnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5bGNiaUFnTENCbVlXbHNjeUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9TMFZaTENCbGVHVmpLWHRjYmlBZ2RtRnlJR1p1SUNBOUlDaGpiM0psTGs5aWFtVmpkQ0I4ZkNCN2ZTbGJTMFZaWFNCOGZDQlBZbXBsWTNSYlMwVlpYVnh1SUNBZ0lDd2daWGh3SUQwZ2UzMDdYRzRnSUdWNGNGdExSVmxkSUQwZ1pYaGxZeWhtYmlrN1hHNGdJQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ1ptRnBiSE1vWm5WdVkzUnBiMjRvS1hzZ1ptNG9NU2s3SUgwcExDQW5UMkpxWldOMEp5d2daWGh3S1R0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0YzJGd0xtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTBOVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMMTlvYVdSbEp5azdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5eVpXUmxabWx1WlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ05EWmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0lpOHZJRGN1TVM0eE5TQlViMHhsYm1kMGFGeHVkbUZ5SUhSdlNXNTBaV2RsY2lBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdWRHVm5aWEluS1Z4dUlDQXNJRzFwYmlBZ0lDQWdJQ0E5SUUxaGRHZ3ViV2x1TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJwZENBK0lEQWdQeUJ0YVc0b2RHOUpiblJsWjJWeUtHbDBLU3dnTUhneFptWm1abVptWm1abVptWm1aaWtnT2lBd095QXZMeUJ3YjNjb01pd2dOVE1wSUMwZ01TQTlQU0E1TURBM01UazVNalUwTnpRd09Ua3hYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZkRzh0YkdWdVozUm9MbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EwTjF4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNZ05DQTFJaXdpZG1GeUlHZHNiMkpoYkNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5bGNiaUFnTENCamIzSmxJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTnZjbVVuS1Z4dUlDQXNJRXhKUWxKQlVsa2dJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYkdsaWNtRnllU2NwWEc0Z0lDd2dkMnR6UlhoMElDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNdFpYaDBKeWxjYmlBZ0xDQmtaV1pwYm1WUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwTG1ZN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHNWhiV1VwZTF4dUlDQjJZWElnSkZONWJXSnZiQ0E5SUdOdmNtVXVVM2x0WW05c0lIeDhJQ2hqYjNKbExsTjViV0p2YkNBOUlFeEpRbEpCVWxrZ1B5QjdmU0E2SUdkc2IySmhiQzVUZVcxaWIyd2dmSHdnZTMwcE8xeHVJQ0JwWmlodVlXMWxMbU5vWVhKQmRDZ3dLU0FoUFNBblh5Y2dKaVlnSVNodVlXMWxJR2x1SUNSVGVXMWliMndwS1dSbFptbHVaVkJ5YjNCbGNuUjVLQ1JUZVcxaWIyd3NJRzVoYldVc0lIdDJZV3gxWlRvZ2QydHpSWGgwTG1Zb2JtRnRaU2w5S1R0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5M2EzTXRaR1ZtYVc1bExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTBPRnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENKbGVIQnZjblJ6TG1ZZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDNkcmN5MWxlSFF1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURRNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUFrWVhRZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYzNSeWFXNW5MV0YwSnlrb2RISjFaU2s3WEc1Y2JpOHZJREl4TGpFdU15NHlOeUJUZEhKcGJtY3VjSEp2ZEc5MGVYQmxXMEJBYVhSbGNtRjBiM0pkS0NsY2JuSmxjWFZwY21Vb0p5NHZYMmwwWlhJdFpHVm1hVzVsSnlrb1UzUnlhVzVuTENBblUzUnlhVzVuSnl3Z1puVnVZM1JwYjI0b2FYUmxjbUYwWldRcGUxeHVJQ0IwYUdsekxsOTBJRDBnVTNSeWFXNW5LR2wwWlhKaGRHVmtLVHNnTHk4Z2RHRnlaMlYwWEc0Z0lIUm9hWE11WDJrZ1BTQXdPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJ1WlhoMElHbHVaR1Y0WEc0dkx5QXlNUzR4TGpVdU1pNHhJQ1ZUZEhKcGJtZEpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTVXVibVY0ZENncFhHNTlMQ0JtZFc1amRHbHZiaWdwZTF4dUlDQjJZWElnVHlBZ0lDQWdQU0IwYUdsekxsOTBYRzRnSUNBZ0xDQnBibVJsZUNBOUlIUm9hWE11WDJsY2JpQWdJQ0FzSUhCdmFXNTBPMXh1SUNCcFppaHBibVJsZUNBK1BTQlBMbXhsYm1kMGFDbHlaWFIxY200Z2UzWmhiSFZsT2lCMWJtUmxabWx1WldRc0lHUnZibVU2SUhSeWRXVjlPMXh1SUNCd2IybHVkQ0E5SUNSaGRDaFBMQ0JwYm1SbGVDazdYRzRnSUhSb2FYTXVYMmtnS3owZ2NHOXBiblF1YkdWdVozUm9PMXh1SUNCeVpYUjFjbTRnZTNaaGJIVmxPaUJ3YjJsdWRDd2daRzl1WlRvZ1ptRnNjMlY5TzF4dWZTazdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXpkSEpwYm1jdWFYUmxjbUYwYjNJdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEVXdYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSnlaWEYxYVhKbEtDY3VMMlZ6Tmk1aGNuSmhlUzVwZEdWeVlYUnZjaWNwTzF4dWRtRnlJR2RzYjJKaGJDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVnh1SUNBc0lHaHBaR1VnSUNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW9hV1JsSnlsY2JpQWdMQ0JKZEdWeVlYUnZjbk1nSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNtRjBiM0p6SnlsY2JpQWdMQ0JVVDE5VFZGSkpUa2RmVkVGSElEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM1J2VTNSeWFXNW5WR0ZuSnlrN1hHNWNibVp2Y2loMllYSWdZMjlzYkdWamRHbHZibk1nUFNCYkowNXZaR1ZNYVhOMEp5d2dKMFJQVFZSdmEyVnVUR2x6ZENjc0lDZE5aV1JwWVV4cGMzUW5MQ0FuVTNSNWJHVlRhR1ZsZEV4cGMzUW5MQ0FuUTFOVFVuVnNaVXhwYzNRblhTd2dhU0E5SURBN0lHa2dQQ0ExT3lCcEt5c3BlMXh1SUNCMllYSWdUa0ZOUlNBZ0lDQWdJQ0E5SUdOdmJHeGxZM1JwYjI1elcybGRYRzRnSUNBZ0xDQkRiMnhzWldOMGFXOXVJRDBnWjJ4dlltRnNXMDVCVFVWZFhHNGdJQ0FnTENCd2NtOTBieUFnSUNBZ0lEMGdRMjlzYkdWamRHbHZiaUFtSmlCRGIyeHNaV04wYVc5dUxuQnliM1J2ZEhsd1pUdGNiaUFnYVdZb2NISnZkRzhnSmlZZ0lYQnliM1J2VzFSUFgxTlVVa2xPUjE5VVFVZGRLV2hwWkdVb2NISnZkRzhzSUZSUFgxTlVVa2xPUjE5VVFVY3NJRTVCVFVVcE8xeHVJQ0JKZEdWeVlYUnZjbk5iVGtGTlJWMGdQU0JKZEdWeVlYUnZjbk11UVhKeVlYazdYRzU5WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwzZGxZaTVrYjIwdWFYUmxjbUZpYkdVdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEVXhYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSjJZWElnWTI5eVpTQWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psSnlsY2JpQWdMQ0FrU2xOUFRpQTlJR052Y21VdVNsTlBUaUI4ZkNBb1kyOXlaUzVLVTA5T0lEMGdlM04wY21sdVoybG1lVG9nU2xOUFRpNXpkSEpwYm1kcFpubDlLVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnYzNSeWFXNW5hV1o1S0dsMEtYc2dMeThnWlhOc2FXNTBMV1JwYzJGaWJHVXRiR2x1WlNCdWJ5MTFiblZ6WldRdGRtRnljMXh1SUNCeVpYUjFjbTRnSkVwVFQwNHVjM1J5YVc1bmFXWjVMbUZ3Y0d4NUtDUktVMDlPTENCaGNtZDFiV1Z1ZEhNcE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMnB6YjI0dmMzUnlhVzVuYVdaNUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTFNMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlEWWlMQ0l2THlCblpYUjBhVzVuSUhSaFp5Qm1jbTl0SURFNUxqRXVNeTQySUU5aWFtVmpkQzV3Y205MGIzUjVjR1V1ZEc5VGRISnBibWNvS1Z4dWRtRnlJR052WmlBOUlISmxjWFZwY21Vb0p5NHZYMk52WmljcFhHNGdJQ3dnVkVGSElEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM1J2VTNSeWFXNW5WR0ZuSnlsY2JpQWdMeThnUlZNeklIZHliMjVuSUdobGNtVmNiaUFnTENCQlVrY2dQU0JqYjJZb1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlHRnlaM1Z0Wlc1MGN6c2dmU2dwS1NBOVBTQW5RWEpuZFcxbGJuUnpKenRjYmx4dUx5OGdabUZzYkdKaFkyc2dabTl5SUVsRk1URWdVMk55YVhCMElFRmpZMlZ6Y3lCRVpXNXBaV1FnWlhKeWIzSmNiblpoY2lCMGNubEhaWFFnUFNCbWRXNWpkR2x2YmlocGRDd2dhMlY1S1h0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0J5WlhSMWNtNGdhWFJiYTJWNVhUdGNiaUFnZlNCallYUmphQ2hsS1hzZ0x5b2daVzF3ZEhrZ0tpOGdmVnh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lIWmhjaUJQTENCVUxDQkNPMXh1SUNCeVpYUjFjbTRnYVhRZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUNkVmJtUmxabWx1WldRbklEb2dhWFFnUFQwOUlHNTFiR3dnUHlBblRuVnNiQ2RjYmlBZ0lDQXZMeUJBUUhSdlUzUnlhVzVuVkdGbklHTmhjMlZjYmlBZ0lDQTZJSFI1Y0dWdlppQW9WQ0E5SUhSeWVVZGxkQ2hQSUQwZ1QySnFaV04wS0dsMEtTd2dWRUZIS1NrZ1BUMGdKM04wY21sdVp5Y2dQeUJVWEc0Z0lDQWdMeThnWW5WcGJIUnBibFJoWnlCallYTmxYRzRnSUNBZ09pQkJVa2NnUHlCamIyWW9UeWxjYmlBZ0lDQXZMeUJGVXpNZ1lYSm5kVzFsYm5SeklHWmhiR3hpWVdOclhHNGdJQ0FnT2lBb1FpQTlJR052WmloUEtTa2dQVDBnSjA5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUU4dVkyRnNiR1ZsSUQwOUlDZG1kVzVqZEdsdmJpY2dQeUFuUVhKbmRXMWxiblJ6SnlBNklFSTdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZZMnhoYzNOdlppNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOVFZjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdOQ0ExSWl3aUx5OGdabUZzYkdKaFkyc2dabTl5SUc1dmJpMWhjbkpoZVMxc2FXdGxJRVZUTXlCaGJtUWdibTl1TFdWdWRXMWxjbUZpYkdVZ2IyeGtJRlk0SUhOMGNtbHVaM05jYm5aaGNpQmpiMllnUFNCeVpYRjFhWEpsS0NjdUwxOWpiMlluS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1QySnFaV04wS0NkNkp5a3VjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1VvTUNrZ1B5QlBZbXBsWTNRZ09pQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lISmxkSFZ5YmlCamIyWW9hWFFwSUQwOUlDZFRkSEpwYm1jbklEOGdhWFF1YzNCc2FYUW9KeWNwSURvZ1QySnFaV04wS0dsMEtUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBiMkpxWldOMExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTFObHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlpd2lkbUZ5SUhCSlJTQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhCcFpTY3BYRzRnSUN3Z1kzSmxZWFJsUkdWell5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHZZbXBsWTNRbktWeHVJQ0FzSUhSdlVISnBiV2wwYVhabElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRjSEpwYldsMGFYWmxKeWxjYmlBZ0xDQm9ZWE1nSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhoY3ljcFhHNGdJQ3dnU1VVNFgwUlBUVjlFUlVaSlRrVWdQU0J5WlhGMWFYSmxLQ2N1TDE5cFpUZ3RaRzl0TFdSbFptbHVaU2NwWEc0Z0lDd2daMDlRUkNBZ0lDQWdJQ0FnSUNBZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5TzF4dVhHNWxlSEJ2Y25SekxtWWdQU0J5WlhGMWFYSmxLQ2N1TDE5a1pYTmpjbWx3ZEc5eWN5Y3BJRDhnWjA5UVJDQTZJR1oxYm1OMGFXOXVJR2RsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaFBMQ0JRS1h0Y2JpQWdUeUE5SUhSdlNVOWlhbVZqZENoUEtUdGNiaUFnVUNBOUlIUnZVSEpwYldsMGFYWmxLRkFzSUhSeWRXVXBPMXh1SUNCcFppaEpSVGhmUkU5TlgwUkZSa2xPUlNsMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlCblQxQkVLRThzSUZBcE8xeHVJQ0I5SUdOaGRHTm9LR1VwZXlBdktpQmxiWEIwZVNBcUx5QjlYRzRnSUdsbUtHaGhjeWhQTENCUUtTbHlaWFIxY200Z1kzSmxZWFJsUkdWell5Z2hjRWxGTG1ZdVkyRnNiQ2hQTENCUUtTd2dUMXRRWFNrN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmIySnFaV04wTFdkdmNHUXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRFUzWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlJc0ltVjRjRzl5ZEhNdVppQTlJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE03WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdFoyOXdjeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTlRoY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklpd2lYQ0oxYzJVZ2MzUnlhV04wWENJN1hHNWNibVY0Y0c5eWRITXVYMTlsYzAxdlpIVnNaU0E5SUhSeWRXVTdYRzVjYm5aaGNpQmZhWFJsY21GMGIzSWdQU0J5WlhGMWFYSmxLRndpTGk0dlkyOXlaUzFxY3k5emVXMWliMnd2YVhSbGNtRjBiM0pjSWlrN1hHNWNiblpoY2lCZmFYUmxjbUYwYjNJeUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZmFYUmxjbUYwYjNJcE8xeHVYRzUyWVhJZ1gzTjViV0p2YkNBOUlISmxjWFZwY21Vb1hDSXVMaTlqYjNKbExXcHpMM041YldKdmJGd2lLVHRjYmx4dWRtRnlJRjl6ZVcxaWIyd3lJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZjM2x0WW05c0tUdGNibHh1ZG1GeUlGOTBlWEJsYjJZZ1BTQjBlWEJsYjJZZ1gzTjViV0p2YkRJdVpHVm1ZWFZzZENBOVBUMGdYQ0ptZFc1amRHbHZibHdpSUNZbUlIUjVjR1Z2WmlCZmFYUmxjbUYwYjNJeUxtUmxabUYxYkhRZ1BUMDlJRndpYzNsdFltOXNYQ0lnUHlCbWRXNWpkR2x2YmlBb2IySnFLU0I3SUhKbGRIVnliaUIwZVhCbGIyWWdiMkpxT3lCOUlEb2dablZ1WTNScGIyNGdLRzlpYWlrZ2V5QnlaWFIxY200Z2IySnFJQ1ltSUhSNWNHVnZaaUJmYzNsdFltOXNNaTVrWldaaGRXeDBJRDA5UFNCY0ltWjFibU4wYVc5dVhDSWdKaVlnYjJKcUxtTnZibk4wY25WamRHOXlJRDA5UFNCZmMzbHRZbTlzTWk1a1pXWmhkV3gwSUNZbUlHOWlhaUFoUFQwZ1gzTjViV0p2YkRJdVpHVm1ZWFZzZEM1d2NtOTBiM1I1Y0dVZ1B5QmNJbk41YldKdmJGd2lJRG9nZEhsd1pXOW1JRzlpYWpzZ2ZUdGNibHh1Wm5WdVkzUnBiMjRnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaHZZbW9wSUhzZ2NtVjBkWEp1SUc5aWFpQW1KaUJ2WW1vdVgxOWxjMDF2WkhWc1pTQS9JRzlpYWlBNklIc2daR1ZtWVhWc2REb2diMkpxSUgwN0lIMWNibHh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnZEhsd1pXOW1JRjl6ZVcxaWIyd3lMbVJsWm1GMWJIUWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJmZEhsd1pXOW1LRjlwZEdWeVlYUnZjakl1WkdWbVlYVnNkQ2tnUFQwOUlGd2ljM2x0WW05c1hDSWdQeUJtZFc1amRHbHZiaUFvYjJKcUtTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdiMkpxSUQwOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z1hDSjFibVJsWm1sdVpXUmNJaUE2SUY5MGVYQmxiMllvYjJKcUtUdGNibjBnT2lCbWRXNWpkR2x2YmlBb2IySnFLU0I3WEc0Z0lISmxkSFZ5YmlCdlltb2dKaVlnZEhsd1pXOW1JRjl6ZVcxaWIyd3lMbVJsWm1GMWJIUWdQVDA5SUZ3aVpuVnVZM1JwYjI1Y0lpQW1KaUJ2WW1vdVkyOXVjM1J5ZFdOMGIzSWdQVDA5SUY5emVXMWliMnd5TG1SbFptRjFiSFFnSmlZZ2IySnFJQ0U5UFNCZmMzbHRZbTlzTWk1a1pXWmhkV3gwTG5CeWIzUnZkSGx3WlNBL0lGd2ljM2x0WW05c1hDSWdPaUIwZVhCbGIyWWdiMkpxSUQwOVBTQmNJblZ1WkdWbWFXNWxaRndpSUQ4Z1hDSjFibVJsWm1sdVpXUmNJaUE2SUY5MGVYQmxiMllvYjJKcUtUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMkpoWW1Wc0xYSjFiblJwYldVdmFHVnNjR1Z5Y3k5MGVYQmxiMll1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURVNVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015SXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9LWHNnTHlvZ1pXMXdkSGtnS2k4Z2ZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJGa1pDMTBieTExYm5OamIzQmhZbXhsY3k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ05qQmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJRFFnTlNJc0lpOHZJR1poYkhObElDMCtJRUZ5Y21GNUkybHVaR1Y0VDJaY2JpOHZJSFJ5ZFdVZ0lDMCtJRUZ5Y21GNUkybHVZMngxWkdWelhHNTJZWElnZEc5SlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5bGNiaUFnTENCMGIwbHVaR1Y0SUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxcGJtUmxlQ2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloSlUxOUpUa05NVlVSRlV5bDdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaWdrZEdocGN5d2daV3dzSUdaeWIyMUpibVJsZUNsN1hHNGdJQ0FnZG1GeUlFOGdJQ0FnSUNBOUlIUnZTVTlpYW1WamRDZ2tkR2hwY3lsY2JpQWdJQ0FnSUN3Z2JHVnVaM1JvSUQwZ2RHOU1aVzVuZEdnb1R5NXNaVzVuZEdncFhHNGdJQ0FnSUNBc0lHbHVaR1Y0SUNBOUlIUnZTVzVrWlhnb1puSnZiVWx1WkdWNExDQnNaVzVuZEdncFhHNGdJQ0FnSUNBc0lIWmhiSFZsTzF4dUlDQWdJQzh2SUVGeWNtRjVJMmx1WTJ4MVpHVnpJSFZ6WlhNZ1UyRnRaVlpoYkhWbFdtVnlieUJsY1hWaGJHbDBlU0JoYkdkdmNtbDBhRzFjYmlBZ0lDQnBaaWhKVTE5SlRrTk1WVVJGVXlBbUppQmxiQ0FoUFNCbGJDbDNhR2xzWlNoc1pXNW5kR2dnUGlCcGJtUmxlQ2w3WEc0Z0lDQWdJQ0IyWVd4MVpTQTlJRTliYVc1a1pYZ3JLMTA3WEc0Z0lDQWdJQ0JwWmloMllXeDFaU0FoUFNCMllXeDFaU2x5WlhSMWNtNGdkSEoxWlR0Y2JpQWdJQ0F2THlCQmNuSmhlU04wYjBsdVpHVjRJR2xuYm05eVpYTWdhRzlzWlhNc0lFRnljbUY1STJsdVkyeDFaR1Z6SUMwZ2JtOTBYRzRnSUNBZ2ZTQmxiSE5sSUdadmNpZzdiR1Z1WjNSb0lENGdhVzVrWlhnN0lHbHVaR1Y0S3lzcGFXWW9TVk5mU1U1RFRGVkVSVk1nZkh3Z2FXNWtaWGdnYVc0Z1R5bDdYRzRnSUNBZ0lDQnBaaWhQVzJsdVpHVjRYU0E5UFQwZ1pXd3BjbVYwZFhKdUlFbFRYMGxPUTB4VlJFVlRJSHg4SUdsdVpHVjRJSHg4SURBN1hHNGdJQ0FnZlNCeVpYUjFjbTRnSVVsVFgwbE9RMHhWUkVWVElDWW1JQzB4TzF4dUlDQjlPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMkZ5Y21GNUxXbHVZMngxWkdWekxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTJNVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1nTkNBMUlpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWRtRnlJR055WldGMFpTQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV055WldGMFpTY3BYRzRnSUN3Z1pHVnpZM0pwY0hSdmNpQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl3WlhKMGVTMWtaWE5qSnlsY2JpQWdMQ0J6WlhSVWIxTjBjbWx1WjFSaFp5QTlJSEpsY1hWcGNtVW9KeTR2WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuSnlsY2JpQWdMQ0JKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU0E5SUh0OU8xeHVYRzR2THlBeU5TNHhMakl1TVM0eElDVkpkR1Z5WVhSdmNsQnliM1J2ZEhsd1pTVmJRRUJwZEdWeVlYUnZjbDBvS1Z4dWNtVnhkV2x5WlNnbkxpOWZhR2xrWlNjcEtFbDBaWEpoZEc5eVVISnZkRzkwZVhCbExDQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25hWFJsY21GMGIzSW5LU3dnWm5WdVkzUnBiMjRvS1hzZ2NtVjBkWEp1SUhSb2FYTTdJSDBwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtFTnZibk4wY25WamRHOXlMQ0JPUVUxRkxDQnVaWGgwS1h0Y2JpQWdRMjl1YzNSeWRXTjBiM0l1Y0hKdmRHOTBlWEJsSUQwZ1kzSmxZWFJsS0VsMFpYSmhkRzl5VUhKdmRHOTBlWEJsTENCN2JtVjRkRG9nWkdWelkzSnBjSFJ2Y2lneExDQnVaWGgwS1gwcE8xeHVJQ0J6WlhSVWIxTjBjbWx1WjFSaFp5aERiMjV6ZEhKMVkzUnZjaXdnVGtGTlJTQXJJQ2NnU1hSbGNtRjBiM0luS1R0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGRHVnlMV055WldGMFpTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOakpjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SURRZ05TSXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9aRzl1WlN3Z2RtRnNkV1VwZTF4dUlDQnlaWFIxY200Z2UzWmhiSFZsT2lCMllXeDFaU3dnWkc5dVpUb2dJU0ZrYjI1bGZUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBkR1Z5TFhOMFpYQXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRFl6WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlBMElEVWlMQ0oyWVhJZ1pGQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaSEFuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5bGNiaUFnTENCblpYUkxaWGx6SUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXJaWGx6SnlrN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktTQS9JRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowYVdWeklEb2dablZ1WTNScGIyNGdaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aFBMQ0JRY205d1pYSjBhV1Z6S1h0Y2JpQWdZVzVQWW1wbFkzUW9UeWs3WEc0Z0lIWmhjaUJyWlhseklDQWdQU0JuWlhSTFpYbHpLRkJ5YjNCbGNuUnBaWE1wWEc0Z0lDQWdMQ0JzWlc1bmRHZ2dQU0JyWlhsekxteGxibWQwYUZ4dUlDQWdJQ3dnYVNBOUlEQmNiaUFnSUNBc0lGQTdYRzRnSUhkb2FXeGxLR3hsYm1kMGFDQStJR2twWkZBdVppaFBMQ0JRSUQwZ2EyVjVjMXRwS3l0ZExDQlFjbTl3WlhKMGFXVnpXMUJkS1R0Y2JpQWdjbVYwZFhKdUlFODdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiMkpxWldOMExXUndjeTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTmpSY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklEUWdOU0lzSWk4dklERTVMakV1TWk0M0lDOGdNVFV1TWk0ekxqUWdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9UeWxjYm5aaGNpQWthMlY1Y3lBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTXRhVzUwWlhKdVlXd25LVnh1SUNBc0lHaHBaR1JsYmt0bGVYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5bGJuVnRMV0oxWnkxclpYbHpKeWt1WTI5dVkyRjBLQ2RzWlc1bmRHZ25MQ0FuY0hKdmRHOTBlWEJsSnlrN1hHNWNibVY0Y0c5eWRITXVaaUE5SUU5aWFtVmpkQzVuWlhSUGQyNVFjbTl3WlhKMGVVNWhiV1Z6SUh4OElHWjFibU4wYVc5dUlHZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9UeWw3WEc0Z0lISmxkSFZ5YmlBa2EyVjVjeWhQTENCb2FXUmtaVzVMWlhsektUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXZZbXBsWTNRdFoyOXdiaTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTmpWY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTWlBeklpd2lkbUZ5SUhSdlNXNTBaV2RsY2lBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdWRHVm5aWEluS1Z4dUlDQXNJR1JsWm1sdVpXUWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUmxabWx1WldRbktUdGNiaTh2SUhSeWRXVWdJQzArSUZOMGNtbHVaeU5oZEZ4dUx5OGdabUZzYzJVZ0xUNGdVM1J5YVc1bkkyTnZaR1ZRYjJsdWRFRjBYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRlJQWDFOVVVrbE9SeWw3WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmloMGFHRjBMQ0J3YjNNcGUxeHVJQ0FnSUhaaGNpQnpJRDBnVTNSeWFXNW5LR1JsWm1sdVpXUW9kR2hoZENrcFhHNGdJQ0FnSUNBc0lHa2dQU0IwYjBsdWRHVm5aWElvY0c5ektWeHVJQ0FnSUNBZ0xDQnNJRDBnY3k1c1pXNW5kR2hjYmlBZ0lDQWdJQ3dnWVN3Z1lqdGNiaUFnSUNCcFppaHBJRHdnTUNCOGZDQnBJRDQ5SUd3cGNtVjBkWEp1SUZSUFgxTlVVa2xPUnlBL0lDY25JRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJR0VnUFNCekxtTm9ZWEpEYjJSbFFYUW9hU2s3WEc0Z0lDQWdjbVYwZFhKdUlHRWdQQ0F3ZUdRNE1EQWdmSHdnWVNBK0lEQjRaR0ptWmlCOGZDQnBJQ3NnTVNBOVBUMGdiQ0I4ZkNBb1lpQTlJSE11WTJoaGNrTnZaR1ZCZENocElDc2dNU2twSUR3Z01IaGtZekF3SUh4OElHSWdQaUF3ZUdSbVptWmNiaUFnSUNBZ0lEOGdWRTlmVTFSU1NVNUhJRDhnY3k1amFHRnlRWFFvYVNrZ09pQmhYRzRnSUNBZ0lDQTZJRlJQWDFOVVVrbE9SeUEvSUhNdWMyeHBZMlVvYVN3Z2FTQXJJRElwSURvZ0tHRWdMU0F3ZUdRNE1EQWdQRHdnTVRBcElDc2dLR0lnTFNBd2VHUmpNREFwSUNzZ01IZ3hNREF3TUR0Y2JpQWdmVHRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTl6ZEhKcGJtY3RZWFF1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURZMlhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015QTBJRFVpTENKMllYSWdZM1I0SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkzUjRKeWxjYmlBZ0xDQnBiblp2YTJVZ0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGJuWnZhMlVuS1Z4dUlDQXNJR2gwYld3Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyaDBiV3duS1Z4dUlDQXNJR05sYkNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyUnZiUzFqY21WaGRHVW5LVnh1SUNBc0lHZHNiMkpoYkNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2djSEp2WTJWemN5QWdJQ0FnSUNBZ0lDQWdJRDBnWjJ4dlltRnNMbkJ5YjJObGMzTmNiaUFnTENCelpYUlVZWE5ySUNBZ0lDQWdJQ0FnSUNBZ1BTQm5iRzlpWVd3dWMyVjBTVzF0WldScFlYUmxYRzRnSUN3Z1kyeGxZWEpVWVhOcklDQWdJQ0FnSUNBZ0lEMGdaMnh2WW1Gc0xtTnNaV0Z5U1cxdFpXUnBZWFJsWEc0Z0lDd2dUV1Z6YzJGblpVTm9ZVzV1Wld3Z0lDQWdJRDBnWjJ4dlltRnNMazFsYzNOaFoyVkRhR0Z1Ym1Wc1hHNGdJQ3dnWTI5MWJuUmxjaUFnSUNBZ0lDQWdJQ0FnSUQwZ01GeHVJQ0FzSUhGMVpYVmxJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlIdDlYRzRnSUN3Z1QwNVNSVUZFV1ZOVVFWUkZRMGhCVGtkRklEMGdKMjl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU2RjYmlBZ0xDQmtaV1psY2l3Z1kyaGhibTVsYkN3Z2NHOXlkRHRjYm5aaGNpQnlkVzRnUFNCbWRXNWpkR2x2YmlncGUxeHVJQ0IyWVhJZ2FXUWdQU0FyZEdocGN6dGNiaUFnYVdZb2NYVmxkV1V1YUdGelQzZHVVSEp2Y0dWeWRIa29hV1FwS1h0Y2JpQWdJQ0IyWVhJZ1ptNGdQU0J4ZFdWMVpWdHBaRjA3WEc0Z0lDQWdaR1ZzWlhSbElIRjFaWFZsVzJsa1hUdGNiaUFnSUNCbWJpZ3BPMXh1SUNCOVhHNTlPMXh1ZG1GeUlHeHBjM1JsYm1WeUlEMGdablZ1WTNScGIyNG9aWFpsYm5RcGUxeHVJQ0J5ZFc0dVkyRnNiQ2hsZG1WdWRDNWtZWFJoS1R0Y2JuMDdYRzR2THlCT2IyUmxMbXB6SURBdU9Tc2dKaUJKUlRFd0t5Qm9ZWE1nYzJWMFNXMXRaV1JwWVhSbExDQnZkR2hsY25kcGMyVTZYRzVwWmlnaGMyVjBWR0Z6YXlCOGZDQWhZMnhsWVhKVVlYTnJLWHRjYmlBZ2MyVjBWR0Z6YXlBOUlHWjFibU4wYVc5dUlITmxkRWx0YldWa2FXRjBaU2htYmlsN1hHNGdJQ0FnZG1GeUlHRnlaM01nUFNCYlhTd2dhU0E5SURFN1hHNGdJQ0FnZDJocGJHVW9ZWEpuZFcxbGJuUnpMbXhsYm1kMGFDQStJR2twWVhKbmN5NXdkWE5vS0dGeVozVnRaVzUwYzF0cEt5dGRLVHRjYmlBZ0lDQnhkV1YxWlZzcksyTnZkVzUwWlhKZElEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJR2x1ZG05clpTaDBlWEJsYjJZZ1ptNGdQVDBnSjJaMWJtTjBhVzl1SnlBL0lHWnVJRG9nUm5WdVkzUnBiMjRvWm00cExDQmhjbWR6S1R0Y2JpQWdJQ0I5TzF4dUlDQWdJR1JsWm1WeUtHTnZkVzUwWlhJcE8xeHVJQ0FnSUhKbGRIVnliaUJqYjNWdWRHVnlPMXh1SUNCOU8xeHVJQ0JqYkdWaGNsUmhjMnNnUFNCbWRXNWpkR2x2YmlCamJHVmhja2x0YldWa2FXRjBaU2hwWkNsN1hHNGdJQ0FnWkdWc1pYUmxJSEYxWlhWbFcybGtYVHRjYmlBZ2ZUdGNiaUFnTHk4Z1RtOWtaUzVxY3lBd0xqZ3RYRzRnSUdsbUtISmxjWFZwY21Vb0p5NHZYMk52WmljcEtIQnliMk5sYzNNcElEMDlJQ2R3Y205alpYTnpKeWw3WEc0Z0lDQWdaR1ZtWlhJZ1BTQm1kVzVqZEdsdmJpaHBaQ2w3WEc0Z0lDQWdJQ0J3Y205alpYTnpMbTVsZUhSVWFXTnJLR04wZUNoeWRXNHNJR2xrTENBeEtTazdYRzRnSUNBZ2ZUdGNiaUFnTHk4Z1FuSnZkM05sY25NZ2QybDBhQ0JOWlhOellXZGxRMmhoYm01bGJDd2dhVzVqYkhWa1pYTWdWMlZpVjI5eWEyVnljMXh1SUNCOUlHVnNjMlVnYVdZb1RXVnpjMkZuWlVOb1lXNXVaV3dwZTF4dUlDQWdJR05vWVc1dVpXd2dQU0J1WlhjZ1RXVnpjMkZuWlVOb1lXNXVaV3c3WEc0Z0lDQWdjRzl5ZENBZ0lDQTlJR05vWVc1dVpXd3VjRzl5ZERJN1hHNGdJQ0FnWTJoaGJtNWxiQzV3YjNKME1TNXZibTFsYzNOaFoyVWdQU0JzYVhOMFpXNWxjanRjYmlBZ0lDQmtaV1psY2lBOUlHTjBlQ2h3YjNKMExuQnZjM1JOWlhOellXZGxMQ0J3YjNKMExDQXhLVHRjYmlBZ0x5OGdRbkp2ZDNObGNuTWdkMmwwYUNCd2IzTjBUV1Z6YzJGblpTd2djMnRwY0NCWFpXSlhiM0pyWlhKelhHNGdJQzh2SUVsRk9DQm9ZWE1nY0c5emRFMWxjM05oWjJVc0lHSjFkQ0JwZENkeklITjVibU1nSmlCMGVYQmxiMllnYVhSeklIQnZjM1JOWlhOellXZGxJR2x6SUNkdlltcGxZM1FuWEc0Z0lIMGdaV3h6WlNCcFppaG5iRzlpWVd3dVlXUmtSWFpsYm5STWFYTjBaVzVsY2lBbUppQjBlWEJsYjJZZ2NHOXpkRTFsYzNOaFoyVWdQVDBnSjJaMWJtTjBhVzl1SnlBbUppQWhaMnh2WW1Gc0xtbHRjRzl5ZEZOamNtbHdkSE1wZTF4dUlDQWdJR1JsWm1WeUlEMGdablZ1WTNScGIyNG9hV1FwZTF4dUlDQWdJQ0FnWjJ4dlltRnNMbkJ2YzNSTlpYTnpZV2RsS0dsa0lDc2dKeWNzSUNjcUp5azdYRzRnSUNBZ2ZUdGNiaUFnSUNCbmJHOWlZV3d1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYldWemMyRm5aU2NzSUd4cGMzUmxibVZ5TENCbVlXeHpaU2s3WEc0Z0lDOHZJRWxGT0MxY2JpQWdmU0JsYkhObElHbG1LRTlPVWtWQlJGbFRWRUZVUlVOSVFVNUhSU0JwYmlCalpXd29KM05qY21sd2RDY3BLWHRjYmlBZ0lDQmtaV1psY2lBOUlHWjFibU4wYVc5dUtHbGtLWHRjYmlBZ0lDQWdJR2gwYld3dVlYQndaVzVrUTJocGJHUW9ZMlZzS0NkelkzSnBjSFFuS1NsYlQwNVNSVUZFV1ZOVVFWUkZRMGhCVGtkRlhTQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0FnSUdoMGJXd3VjbVZ0YjNabFEyaHBiR1FvZEdocGN5azdYRzRnSUNBZ0lDQWdJSEoxYmk1allXeHNLR2xrS1R0Y2JpQWdJQ0FnSUgwN1hHNGdJQ0FnZlR0Y2JpQWdMeThnVW1WemRDQnZiR1FnWW5KdmQzTmxjbk5jYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0JrWldabGNpQTlJR1oxYm1OMGFXOXVLR2xrS1h0Y2JpQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb1kzUjRLSEoxYml3Z2FXUXNJREVwTENBd0tUdGNiaUFnSUNCOU8xeHVJQ0I5WEc1OVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnYzJWME9pQWdJSE5sZEZSaGMyc3NYRzRnSUdOc1pXRnlPaUJqYkdWaGNsUmhjMnRjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTkwWVhOckxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTJOMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQTBJRFVpTENKMllYSWdkRzlKYm5SbFoyVnlJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzUwWldkbGNpY3BYRzRnSUN3Z2JXRjRJQ0FnSUNBZ0lEMGdUV0YwYUM1dFlYaGNiaUFnTENCdGFXNGdJQ0FnSUNBZ1BTQk5ZWFJvTG0xcGJqdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNG9hVzVrWlhnc0lHeGxibWQwYUNsN1hHNGdJR2x1WkdWNElEMGdkRzlKYm5SbFoyVnlLR2x1WkdWNEtUdGNiaUFnY21WMGRYSnVJR2x1WkdWNElEd2dNQ0EvSUcxaGVDaHBibVJsZUNBcklHeGxibWQwYUN3Z01Da2dPaUJ0YVc0b2FXNWtaWGdzSUd4bGJtZDBhQ2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmZEc4dGFXNWtaWGd1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURZNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015QTBJRFVpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ1lXUmtWRzlWYm5OamIzQmhZbXhsY3lBOUlISmxjWFZwY21Vb0p5NHZYMkZrWkMxMGJ5MTFibk5qYjNCaFlteGxjeWNwWEc0Z0lDd2djM1JsY0NBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSXRjM1JsY0NjcFhHNGdJQ3dnU1hSbGNtRjBiM0p6SUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEpoZEc5eWN5Y3BYRzRnSUN3Z2RHOUpUMkpxWldOMElDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdlltcGxZM1FuS1R0Y2JseHVMeThnTWpJdU1TNHpMalFnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbVZ1ZEhKcFpYTW9LVnh1THk4Z01qSXVNUzR6TGpFeklFRnljbUY1TG5CeWIzUnZkSGx3WlM1clpYbHpLQ2xjYmk4dklESXlMakV1TXk0eU9TQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWRtRnNkV1Z6S0NsY2JpOHZJREl5TGpFdU15NHpNQ0JCY25KaGVTNXdjbTkwYjNSNWNHVmJRRUJwZEdWeVlYUnZjbDBvS1Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdSbFptbHVaU2NwS0VGeWNtRjVMQ0FuUVhKeVlYa25MQ0JtZFc1amRHbHZiaWhwZEdWeVlYUmxaQ3dnYTJsdVpDbDdYRzRnSUhSb2FYTXVYM1FnUFNCMGIwbFBZbXBsWTNRb2FYUmxjbUYwWldRcE95QXZMeUIwWVhKblpYUmNiaUFnZEdocGN5NWZhU0E5SURBN0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzVsZUhRZ2FXNWtaWGhjYmlBZ2RHaHBjeTVmYXlBOUlHdHBibVE3SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUd0cGJtUmNiaTh2SURJeUxqRXVOUzR5TGpFZ0pVRnljbUY1U1hSbGNtRjBiM0pRY205MGIzUjVjR1VsTG01bGVIUW9LVnh1ZlN3Z1puVnVZM1JwYjI0b0tYdGNiaUFnZG1GeUlFOGdJQ0FnSUQwZ2RHaHBjeTVmZEZ4dUlDQWdJQ3dnYTJsdVpDQWdQU0IwYUdsekxsOXJYRzRnSUNBZ0xDQnBibVJsZUNBOUlIUm9hWE11WDJrckt6dGNiaUFnYVdZb0lVOGdmSHdnYVc1a1pYZ2dQajBnVHk1c1pXNW5kR2dwZTF4dUlDQWdJSFJvYVhNdVgzUWdQU0IxYm1SbFptbHVaV1E3WEc0Z0lDQWdjbVYwZFhKdUlITjBaWEFvTVNrN1hHNGdJSDFjYmlBZ2FXWW9hMmx1WkNBOVBTQW5hMlY1Y3ljZ0lDbHlaWFIxY200Z2MzUmxjQ2d3TENCcGJtUmxlQ2s3WEc0Z0lHbG1LR3RwYm1RZ1BUMGdKM1poYkhWbGN5Y3BjbVYwZFhKdUlITjBaWEFvTUN3Z1QxdHBibVJsZUYwcE8xeHVJQ0J5WlhSMWNtNGdjM1JsY0Nnd0xDQmJhVzVrWlhnc0lFOWJhVzVrWlhoZFhTazdYRzU5TENBbmRtRnNkV1Z6SnlrN1hHNWNiaTh2SUdGeVozVnRaVzUwYzB4cGMzUmJRRUJwZEdWeVlYUnZjbDBnYVhNZ0pVRnljbUY1VUhKdmRHOWZkbUZzZFdWekpTQW9PUzQwTGpRdU5pd2dPUzQwTGpRdU55bGNia2wwWlhKaGRHOXljeTVCY21kMWJXVnVkSE1nUFNCSmRHVnlZWFJ2Y25NdVFYSnlZWGs3WEc1Y2JtRmtaRlJ2Vlc1elkyOXdZV0pzWlhNb0oydGxlWE1uS1R0Y2JtRmtaRlJ2Vlc1elkyOXdZV0pzWlhNb0ozWmhiSFZsY3ljcE8xeHVZV1JrVkc5VmJuTmpiM0JoWW14bGN5Z25aVzUwY21sbGN5Y3BPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXVZWEp5WVhrdWFYUmxjbUYwYjNJdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEWTVYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUEwSURVaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJ0bGVYTmNJaWtzSUY5ZlpYTk5iMlIxYkdVNklIUnlkV1VnZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOWpiM0psTFdwekwyOWlhbVZqZEM5clpYbHpMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EzTUZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNaUEwSURVaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmNISnZiV2x6WlZ3aUtTd2dYMTlsYzAxdlpIVnNaVG9nZEhKMVpTQjlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12Y0hKdmJXbHpaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTnpGY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJREVnTkNBMUlpd2lkbUZ5SUUxRlZFRWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkV2xrSnlrb0oyMWxkR0VuS1Z4dUlDQXNJR2x6VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmFYTXRiMkpxWldOMEp5bGNiaUFnTENCb1lYTWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmhoY3ljcFhHNGdJQ3dnYzJWMFJHVnpZeUFnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFpIQW5LUzVtWEc0Z0lDd2dhV1FnSUNBZ0lDQWdQU0F3TzF4dWRtRnlJR2x6UlhoMFpXNXphV0pzWlNBOUlFOWlhbVZqZEM1cGMwVjRkR1Z1YzJsaWJHVWdmSHdnWm5WdVkzUnBiMjRvS1h0Y2JpQWdjbVYwZFhKdUlIUnlkV1U3WEc1OU8xeHVkbUZ5SUVaU1JVVmFSU0E5SUNGeVpYRjFhWEpsS0NjdUwxOW1ZV2xzY3ljcEtHWjFibU4wYVc5dUtDbDdYRzRnSUhKbGRIVnliaUJwYzBWNGRHVnVjMmxpYkdVb1QySnFaV04wTG5CeVpYWmxiblJGZUhSbGJuTnBiMjV6S0h0OUtTazdYRzU5S1R0Y2JuWmhjaUJ6WlhSTlpYUmhJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J6WlhSRVpYTmpLR2wwTENCTlJWUkJMQ0I3ZG1Gc2RXVTZJSHRjYmlBZ0lDQnBPaUFuVHljZ0t5QXJLMmxrTENBdkx5QnZZbXBsWTNRZ1NVUmNiaUFnSUNCM09pQjdmU0FnSUNBZ0lDQWdJQ0F2THlCM1pXRnJJR052Ykd4bFkzUnBiMjV6SUVsRWMxeHVJQ0I5ZlNrN1hHNTlPMXh1ZG1GeUlHWmhjM1JMWlhrZ1BTQm1kVzVqZEdsdmJpaHBkQ3dnWTNKbFlYUmxLWHRjYmlBZ0x5OGdjbVYwZFhKdUlIQnlhVzFwZEdsMlpTQjNhWFJvSUhCeVpXWnBlRnh1SUNCcFppZ2hhWE5QWW1wbFkzUW9hWFFwS1hKbGRIVnliaUIwZVhCbGIyWWdhWFFnUFQwZ0ozTjViV0p2YkNjZ1B5QnBkQ0E2SUNoMGVYQmxiMllnYVhRZ1BUMGdKM04wY21sdVp5Y2dQeUFuVXljZ09pQW5VQ2NwSUNzZ2FYUTdYRzRnSUdsbUtDRm9ZWE1vYVhRc0lFMUZWRUVwS1h0Y2JpQWdJQ0F2THlCallXNG5kQ0J6WlhRZ2JXVjBZV1JoZEdFZ2RHOGdkVzVqWVhWbmFIUWdabkp2ZW1WdUlHOWlhbVZqZEZ4dUlDQWdJR2xtS0NGcGMwVjRkR1Z1YzJsaWJHVW9hWFFwS1hKbGRIVnliaUFuUmljN1hHNGdJQ0FnTHk4Z2JtOTBJRzVsWTJWemMyRnllU0IwYnlCaFpHUWdiV1YwWVdSaGRHRmNiaUFnSUNCcFppZ2hZM0psWVhSbEtYSmxkSFZ5YmlBblJTYzdYRzRnSUNBZ0x5OGdZV1JrSUcxcGMzTnBibWNnYldWMFlXUmhkR0ZjYmlBZ0lDQnpaWFJOWlhSaEtHbDBLVHRjYmlBZ0x5OGdjbVYwZFhKdUlHOWlhbVZqZENCSlJGeHVJQ0I5SUhKbGRIVnliaUJwZEZ0TlJWUkJYUzVwTzF4dWZUdGNiblpoY2lCblpYUlhaV0ZySUQwZ1puVnVZM1JwYjI0b2FYUXNJR055WldGMFpTbDdYRzRnSUdsbUtDRm9ZWE1vYVhRc0lFMUZWRUVwS1h0Y2JpQWdJQ0F2THlCallXNG5kQ0J6WlhRZ2JXVjBZV1JoZEdFZ2RHOGdkVzVqWVhWbmFIUWdabkp2ZW1WdUlHOWlhbVZqZEZ4dUlDQWdJR2xtS0NGcGMwVjRkR1Z1YzJsaWJHVW9hWFFwS1hKbGRIVnliaUIwY25WbE8xeHVJQ0FnSUM4dklHNXZkQ0J1WldObGMzTmhjbmtnZEc4Z1lXUmtJRzFsZEdGa1lYUmhYRzRnSUNBZ2FXWW9JV055WldGMFpTbHlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdMeThnWVdSa0lHMXBjM05wYm1jZ2JXVjBZV1JoZEdGY2JpQWdJQ0J6WlhSTlpYUmhLR2wwS1R0Y2JpQWdMeThnY21WMGRYSnVJR2hoYzJnZ2QyVmhheUJqYjJ4c1pXTjBhVzl1Y3lCSlJITmNiaUFnZlNCeVpYUjFjbTRnYVhSYlRVVlVRVjB1ZHp0Y2JuMDdYRzR2THlCaFpHUWdiV1YwWVdSaGRHRWdiMjRnWm5KbFpYcGxMV1poYldsc2VTQnRaWFJvYjJSeklHTmhiR3hwYm1kY2JuWmhjaUJ2YmtaeVpXVjZaU0E5SUdaMWJtTjBhVzl1S0dsMEtYdGNiaUFnYVdZb1JsSkZSVnBGSUNZbUlHMWxkR0V1VGtWRlJDQW1KaUJwYzBWNGRHVnVjMmxpYkdVb2FYUXBJQ1ltSUNGb1lYTW9hWFFzSUUxRlZFRXBLWE5sZEUxbGRHRW9hWFFwTzF4dUlDQnlaWFIxY200Z2FYUTdYRzU5TzF4dWRtRnlJRzFsZEdFZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnUzBWWk9pQWdJQ0FnSUUxRlZFRXNYRzRnSUU1RlJVUTZJQ0FnSUNCbVlXeHpaU3hjYmlBZ1ptRnpkRXRsZVRvZ0lHWmhjM1JMWlhrc1hHNGdJR2RsZEZkbFlXczZJQ0JuWlhSWFpXRnJMRnh1SUNCdmJrWnlaV1Y2WlRvZ2IyNUdjbVZsZW1WY2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dFpYUmhMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EzTWx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNaUxDSjJZWElnWTJ4aGMzTnZaaUFnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMnhoYzNOdlppY3BYRzRnSUN3Z1NWUkZVa0ZVVDFJZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KMmwwWlhKaGRHOXlKeWxjYmlBZ0xDQkpkR1Z5WVhSdmNuTWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGRHVnlZWFJ2Y25NbktUdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5eVpTY3BMbWRsZEVsMFpYSmhkRzl5VFdWMGFHOWtJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0JwWmlocGRDQWhQU0IxYm1SbFptbHVaV1FwY21WMGRYSnVJR2wwVzBsVVJWSkJWRTlTWFZ4dUlDQWdJSHg4SUdsMFd5ZEFRR2wwWlhKaGRHOXlKMTFjYmlBZ0lDQjhmQ0JKZEdWeVlYUnZjbk5iWTJ4aGMzTnZaaWhwZENsZE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlkyOXlaUzVuWlhRdGFYUmxjbUYwYjNJdGJXVjBhRzlrTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBM00xeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBMElEVWlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZiMkpxWldOMEwyTnlaV0YwWlZ3aUtTd2dYMTlsYzAxdlpIVnNaVG9nZEhKMVpTQjlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMk55WldGMFpTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOelJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCN0lGd2laR1ZtWVhWc2RGd2lPaUJ5WlhGMWFYSmxLRndpWTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzl6WlhRdGNISnZkRzkwZVhCbExXOW1YQ0lwTENCZlgyVnpUVzlrZFd4bE9pQjBjblZsSUgwN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJKaFltVnNMWEoxYm5ScGJXVXZZMjl5WlMxcWN5OXZZbXBsWTNRdmMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmk1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ056VmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3SUZ3aVpHVm1ZWFZzZEZ3aU9pQnlaWEYxYVhKbEtGd2lZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMM041YldKdmJGd2lLU3dnWDE5bGMwMXZaSFZzWlRvZ2RISjFaU0I5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlpWVdKbGJDMXlkVzUwYVcxbEwyTnZjbVV0YW5NdmMzbHRZbTlzTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBM05seHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHNnWENKa1pXWmhkV3gwWENJNklISmxjWFZwY21Vb1hDSmpiM0psTFdwekwyeHBZbkpoY25rdlptNHZjM2x0WW05c0wybDBaWEpoZEc5eVhDSXBMQ0JmWDJWelRXOWtkV3hsT2lCMGNuVmxJSDA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMkpoWW1Wc0xYSjFiblJwYldVdlkyOXlaUzFxY3k5emVXMWliMnd2YVhSbGNtRjBiM0l1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURjM1hHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015SXNJbkpsY1hWcGNtVW9KeTR1THk0dUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWpjbVZoZEdVbktUdGNiblpoY2lBa1QySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpTY3BMazlpYW1WamREdGNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdZM0psWVhSbEtGQXNJRVFwZTF4dUlDQnlaWFIxY200Z0pFOWlhbVZqZEM1amNtVmhkR1VvVUN3Z1JDazdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YjJKcVpXTjBMMk55WldGMFpTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdOemhjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SWl3aWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG1kbGRDMXdjbTkwYjNSNWNHVXRiMlluS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlmWTI5eVpTY3BMazlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmp0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMlp1TDI5aWFtVmpkQzluWlhRdGNISnZkRzkwZVhCbExXOW1MbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0EzT1Z4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0F5SURNaUxDSnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWEyVjVjeWNwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMTlqYjNKbEp5a3VUMkpxWldOMExtdGxlWE03WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZhMlY1Y3k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ09EQmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURJZ05DQTFJaXdpY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWxjell1YjJKcVpXTjBMbk5sZEMxd2NtOTBiM1I1Y0dVdGIyWW5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlNjcExrOWlhbVZqZEM1elpYUlFjbTkwYjNSNWNHVlBaanRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyWnVMMjlpYW1WamRDOXpaWFF0Y0hKdmRHOTBlWEJsTFc5bUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTRNVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENKeVpYRjFhWEpsS0NjdUxpOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVkRzh0YzNSeWFXNW5KeWs3WEc1eVpYRjFhWEpsS0NjdUxpOXRiMlIxYkdWekwyVnpOaTV6ZEhKcGJtY3VhWFJsY21GMGIzSW5LVHRjYm5KbGNYVnBjbVVvSnk0dUwyMXZaSFZzWlhNdmQyVmlMbVJ2YlM1cGRHVnlZV0pzWlNjcE8xeHVjbVZ4ZFdseVpTZ25MaTR2Ylc5a2RXeGxjeTlsY3pZdWNISnZiV2x6WlNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQnlaWEYxYVhKbEtDY3VMaTl0YjJSMWJHVnpMMTlqYjNKbEp5a3VVSEp2YldselpUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzQnliMjFwYzJVdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEZ3lYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElEUWdOU0lzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG5ONWJXSnZiQ2NwTzF4dWNtVnhkV2x5WlNnbkxpNHZMaTR2Ylc5a2RXeGxjeTlsY3pZdWIySnFaV04wTG5SdkxYTjBjbWx1WnljcE8xeHVjbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6Y3VjM2x0WW05c0xtRnplVzVqTFdsMFpYSmhkRzl5SnlrN1hHNXlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dWIySnpaWEoyWVdKc1pTY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0J5WlhGMWFYSmxLQ2N1TGk4dUxpOXRiMlIxYkdWekwxOWpiM0psSnlrdVUzbHRZbTlzTzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZabTR2YzNsdFltOXNMMmx1WkdWNExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTRNMXh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENKeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMlZ6Tmk1emRISnBibWN1YVhSbGNtRjBiM0luS1R0Y2JuSmxjWFZwY21Vb0p5NHVMeTR1TDIxdlpIVnNaWE12ZDJWaUxtUnZiUzVwZEdWeVlXSnNaU2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUxpOHVMaTl0YjJSMWJHVnpMMTkzYTNNdFpYaDBKeWt1WmlnbmFYUmxjbUYwYjNJbktUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwzTjViV0p2YkM5cGRHVnlZWFJ2Y2k1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ09EUmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZEN3Z1EyOXVjM1J5ZFdOMGIzSXNJRzVoYldVc0lHWnZjbUpwWkdSbGJrWnBaV3hrS1h0Y2JpQWdhV1lvSVNocGRDQnBibk4wWVc1alpXOW1JRU52Ym5OMGNuVmpkRzl5S1NCOGZDQW9abTl5WW1sa1pHVnVSbWxsYkdRZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlCbWIzSmlhV1JrWlc1R2FXVnNaQ0JwYmlCcGRDa3BlMXh1SUNBZ0lIUm9jbTkzSUZSNWNHVkZjbkp2Y2lodVlXMWxJQ3NnSnpvZ2FXNWpiM0p5WldOMElHbHVkbTlqWVhScGIyNGhKeWs3WEc0Z0lIMGdjbVYwZFhKdUlHbDBPMXh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZYMkZ1TFdsdWMzUmhibU5sTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBNE5WeHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBMElEVWlMQ0l2THlCaGJHd2daVzUxYldWeVlXSnNaU0J2WW1wbFkzUWdhMlY1Y3l3Z2FXNWpiSFZrWlhNZ2MzbHRZbTlzYzF4dWRtRnlJR2RsZEV0bGVYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YTJWNWN5Y3BYRzRnSUN3Z1owOVFVeUFnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0J6SnlsY2JpQWdMQ0J3U1VVZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhCcFpTY3BPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaWhwZENsN1hHNGdJSFpoY2lCeVpYTjFiSFFnSUNBZ0lEMGdaMlYwUzJWNWN5aHBkQ2xjYmlBZ0lDQXNJR2RsZEZONWJXSnZiSE1nUFNCblQxQlRMbVk3WEc0Z0lHbG1LR2RsZEZONWJXSnZiSE1wZTF4dUlDQWdJSFpoY2lCemVXMWliMnh6SUQwZ1oyVjBVM2x0WW05c2N5aHBkQ2xjYmlBZ0lDQWdJQ3dnYVhORmJuVnRJQ0E5SUhCSlJTNW1YRzRnSUNBZ0lDQXNJR2tnSUNBZ0lDQWdQU0F3WEc0Z0lDQWdJQ0FzSUd0bGVUdGNiaUFnSUNCM2FHbHNaU2h6ZVcxaWIyeHpMbXhsYm1kMGFDQStJR2twYVdZb2FYTkZiblZ0TG1OaGJHd29hWFFzSUd0bGVTQTlJSE41YldKdmJITmJhU3NyWFNrcGNtVnpkV3gwTG5CMWMyZ29hMlY1S1R0Y2JpQWdmU0J5WlhSMWNtNGdjbVZ6ZFd4ME8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgyVnVkVzB0YTJWNWN5NXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPRFpjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SWl3aWRtRnlJR04wZUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0SnlsY2JpQWdMQ0JqWVd4c0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMmwwWlhJdFkyRnNiQ2NwWEc0Z0lDd2dhWE5CY25KaGVVbDBaWElnUFNCeVpYRjFhWEpsS0NjdUwxOXBjeTFoY25KaGVTMXBkR1Z5SnlsY2JpQWdMQ0JoYms5aWFtVmpkQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMkZ1TFc5aWFtVmpkQ2NwWEc0Z0lDd2dkRzlNWlc1bmRHZ2dJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTFzWlc1bmRHZ25LVnh1SUNBc0lHZGxkRWwwWlhKR2JpQWdJRDBnY21WeGRXbHlaU2duTGk5amIzSmxMbWRsZEMxcGRHVnlZWFJ2Y2kxdFpYUm9iMlFuS1Z4dUlDQXNJRUpTUlVGTElDQWdJQ0FnSUQwZ2UzMWNiaUFnTENCU1JWUlZVazRnSUNBZ0lDQTlJSHQ5TzF4dWRtRnlJR1Y0Y0c5eWRITWdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwWlhKaFlteGxMQ0JsYm5SeWFXVnpMQ0JtYml3Z2RHaGhkQ3dnU1ZSRlVrRlVUMUlwZTF4dUlDQjJZWElnYVhSbGNrWnVJRDBnU1ZSRlVrRlVUMUlnUHlCbWRXNWpkR2x2YmlncGV5QnlaWFIxY200Z2FYUmxjbUZpYkdVN0lIMGdPaUJuWlhSSmRHVnlSbTRvYVhSbGNtRmliR1VwWEc0Z0lDQWdMQ0JtSUNBZ0lDQWdQU0JqZEhnb1ptNHNJSFJvWVhRc0lHVnVkSEpwWlhNZ1B5QXlJRG9nTVNsY2JpQWdJQ0FzSUdsdVpHVjRJQ0E5SURCY2JpQWdJQ0FzSUd4bGJtZDBhQ3dnYzNSbGNDd2dhWFJsY21GMGIzSXNJSEpsYzNWc2REdGNiaUFnYVdZb2RIbHdaVzltSUdsMFpYSkdiaUFoUFNBblpuVnVZM1JwYjI0bktYUm9jbTkzSUZSNWNHVkZjbkp2Y2locGRHVnlZV0pzWlNBcklDY2dhWE1nYm05MElHbDBaWEpoWW14bElTY3BPMXh1SUNBdkx5Qm1ZWE4wSUdOaGMyVWdabTl5SUdGeWNtRjVjeUIzYVhSb0lHUmxabUYxYkhRZ2FYUmxjbUYwYjNKY2JpQWdhV1lvYVhOQmNuSmhlVWwwWlhJb2FYUmxja1p1S1NsbWIzSW9iR1Z1WjNSb0lEMGdkRzlNWlc1bmRHZ29hWFJsY21GaWJHVXViR1Z1WjNSb0tUc2diR1Z1WjNSb0lENGdhVzVrWlhnN0lHbHVaR1Y0S3lzcGUxeHVJQ0FnSUhKbGMzVnNkQ0E5SUdWdWRISnBaWE1nUHlCbUtHRnVUMkpxWldOMEtITjBaWEFnUFNCcGRHVnlZV0pzWlZ0cGJtUmxlRjBwV3pCZExDQnpkR1Z3V3pGZEtTQTZJR1lvYVhSbGNtRmliR1ZiYVc1a1pYaGRLVHRjYmlBZ0lDQnBaaWh5WlhOMWJIUWdQVDA5SUVKU1JVRkxJSHg4SUhKbGMzVnNkQ0E5UFQwZ1VrVlVWVkpPS1hKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgwZ1pXeHpaU0JtYjNJb2FYUmxjbUYwYjNJZ1BTQnBkR1Z5Um00dVkyRnNiQ2hwZEdWeVlXSnNaU2s3SUNFb2MzUmxjQ0E5SUdsMFpYSmhkRzl5TG01bGVIUW9LU2t1Wkc5dVpUc2dLWHRjYmlBZ0lDQnlaWE4xYkhRZ1BTQmpZV3hzS0dsMFpYSmhkRzl5TENCbUxDQnpkR1Z3TG5aaGJIVmxMQ0JsYm5SeWFXVnpLVHRjYmlBZ0lDQnBaaWh5WlhOMWJIUWdQVDA5SUVKU1JVRkxJSHg4SUhKbGMzVnNkQ0E5UFQwZ1VrVlVWVkpPS1hKbGRIVnliaUJ5WlhOMWJIUTdYRzRnSUgxY2JuMDdYRzVsZUhCdmNuUnpMa0pTUlVGTElDQTlJRUpTUlVGTE8xeHVaWGh3YjNKMGN5NVNSVlJWVWs0Z1BTQlNSVlJWVWs0N1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTltYjNJdGIyWXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGczWEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRFFnTlNJc0lpOHZJR1poYzNRZ1lYQndiSGtzSUdoMGRIQTZMeTlxYzNCbGNtWXViRzVyYVhRdVkyOXRMMlpoYzNRdFlYQndiSGt2TlZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlobWJpd2dZWEpuY3l3Z2RHaGhkQ2w3WEc0Z0lIWmhjaUIxYmlBOUlIUm9ZWFFnUFQwOUlIVnVaR1ZtYVc1bFpEdGNiaUFnYzNkcGRHTm9LR0Z5WjNNdWJHVnVaM1JvS1h0Y2JpQWdJQ0JqWVhObElEQTZJSEpsZEhWeWJpQjFiaUEvSUdadUtDbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHWnVMbU5oYkd3b2RHaGhkQ2s3WEc0Z0lDQWdZMkZ6WlNBeE9pQnlaWFIxY200Z2RXNGdQeUJtYmloaGNtZHpXekJkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nWm00dVkyRnNiQ2gwYUdGMExDQmhjbWR6V3pCZEtUdGNiaUFnSUNCallYTmxJREk2SUhKbGRIVnliaUIxYmlBL0lHWnVLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQm1iaTVqWVd4c0tIUm9ZWFFzSUdGeVozTmJNRjBzSUdGeVozTmJNVjBwTzF4dUlDQWdJR05oYzJVZ016b2djbVYwZFhKdUlIVnVJRDhnWm00b1lYSm5jMXN3WFN3Z1lYSm5jMXN4WFN3Z1lYSm5jMXN5WFNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdadUxtTmhiR3dvZEdoaGRDd2dZWEpuYzFzd1hTd2dZWEpuYzFzeFhTd2dZWEpuYzFzeVhTazdYRzRnSUNBZ1kyRnpaU0EwT2lCeVpYUjFjbTRnZFc0Z1B5Qm1iaWhoY21keld6QmRMQ0JoY21keld6RmRMQ0JoY21keld6SmRMQ0JoY21keld6TmRLVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEb2dabTR1WTJGc2JDaDBhR0YwTENCaGNtZHpXekJkTENCaGNtZHpXekZkTENCaGNtZHpXekpkTENCaGNtZHpXek5kS1R0Y2JpQWdmU0J5WlhSMWNtNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdadUxtRndjR3g1S0hSb1lYUXNJR0Z5WjNNcE8xeHVmVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlgybHVkbTlyWlM1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ09EaGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ05DQTFJaXdpTHk4Z1kyaGxZMnNnYjI0Z1pHVm1ZWFZzZENCQmNuSmhlU0JwZEdWeVlYUnZjbHh1ZG1GeUlFbDBaWEpoZEc5eWN5QWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGRHVnlZWFJ2Y25NbktWeHVJQ0FzSUVsVVJWSkJWRTlTSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25hWFJsY21GMGIzSW5LVnh1SUNBc0lFRnljbUY1VUhKdmRHOGdQU0JCY25KaGVTNXdjbTkwYjNSNWNHVTdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvYVhRcGUxeHVJQ0J5WlhSMWNtNGdhWFFnSVQwOUlIVnVaR1ZtYVc1bFpDQW1KaUFvU1hSbGNtRjBiM0p6TGtGeWNtRjVJRDA5UFNCcGRDQjhmQ0JCY25KaGVWQnliM1J2VzBsVVJWSkJWRTlTWFNBOVBUMGdhWFFwTzF4dWZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDJsekxXRnljbUY1TFdsMFpYSXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGc1WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRFFnTlNJc0lpOHZJRGN1TWk0eUlFbHpRWEp5WVhrb1lYSm5kVzFsYm5RcFhHNTJZWElnWTI5bUlEMGdjbVZ4ZFdseVpTZ25MaTlmWTI5bUp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRUZ5Y21GNUxtbHpRWEp5WVhrZ2ZId2dablZ1WTNScGIyNGdhWE5CY25KaGVTaGhjbWNwZTF4dUlDQnlaWFIxY200Z1kyOW1LR0Z5WnlrZ1BUMGdKMEZ5Y21GNUp6dGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwxOXBjeTFoY25KaGVTNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPVEJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SWl3aUx5OGdZMkZzYkNCemIyMWxkR2hwYm1jZ2IyNGdhWFJsY21GMGIzSWdjM1JsY0NCM2FYUm9JSE5oWm1VZ1kyeHZjMmx1WnlCdmJpQmxjbkp2Y2x4dWRtRnlJR0Z1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLR2wwWlhKaGRHOXlMQ0JtYml3Z2RtRnNkV1VzSUdWdWRISnBaWE1wZTF4dUlDQjBjbmtnZTF4dUlDQWdJSEpsZEhWeWJpQmxiblJ5YVdWeklEOGdabTRvWVc1UFltcGxZM1FvZG1Gc2RXVXBXekJkTENCMllXeDFaVnN4WFNrZ09pQm1iaWgyWVd4MVpTazdYRzRnSUM4dklEY3VOQzQySUVsMFpYSmhkRzl5UTJ4dmMyVW9hWFJsY21GMGIzSXNJR052YlhCc1pYUnBiMjRwWEc0Z0lIMGdZMkYwWTJnb1pTbDdYRzRnSUNBZ2RtRnlJSEpsZENBOUlHbDBaWEpoZEc5eVd5ZHlaWFIxY200blhUdGNiaUFnSUNCcFppaHlaWFFnSVQwOUlIVnVaR1ZtYVc1bFpDbGhiazlpYW1WamRDaHlaWFF1WTJGc2JDaHBkR1Z5WVhSdmNpa3BPMXh1SUNBZ0lIUm9jbTkzSUdVN1hHNGdJSDFjYm4wN1hHNWNibHh1THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWx4dUx5OGdMaTkrTDJOdmNtVXRhbk12YkdsaWNtRnllUzl0YjJSMWJHVnpMMTlwZEdWeUxXTmhiR3d1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURreFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURRZ05TSXNJblpoY2lCSlZFVlNRVlJQVWlBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYVhSbGNtRjBiM0luS1Z4dUlDQXNJRk5CUmtWZlEweFBVMGxPUnlBOUlHWmhiSE5sTzF4dVhHNTBjbmtnZTF4dUlDQjJZWElnY21sMFpYSWdQU0JiTjExYlNWUkZVa0ZVVDFKZEtDazdYRzRnSUhKcGRHVnlXeWR5WlhSMWNtNG5YU0E5SUdaMWJtTjBhVzl1S0NsN0lGTkJSa1ZmUTB4UFUwbE9SeUE5SUhSeWRXVTdJSDA3WEc0Z0lFRnljbUY1TG1aeWIyMG9jbWwwWlhJc0lHWjFibU4wYVc5dUtDbDdJSFJvY205M0lESTdJSDBwTzF4dWZTQmpZWFJqYUNobEtYc2dMeW9nWlcxd2RIa2dLaThnZlZ4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUtHVjRaV01zSUhOcmFYQkRiRzl6YVc1bktYdGNiaUFnYVdZb0lYTnJhWEJEYkc5emFXNW5JQ1ltSUNGVFFVWkZYME5NVDFOSlRrY3BjbVYwZFhKdUlHWmhiSE5sTzF4dUlDQjJZWElnYzJGbVpTQTlJR1poYkhObE8xeHVJQ0IwY25rZ2UxeHVJQ0FnSUhaaGNpQmhjbklnSUQwZ1d6ZGRYRzRnSUNBZ0lDQXNJR2wwWlhJZ1BTQmhjbkpiU1ZSRlVrRlVUMUpkS0NrN1hHNGdJQ0FnYVhSbGNpNXVaWGgwSUQwZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlIdGtiMjVsT2lCellXWmxJRDBnZEhKMVpYMDdJSDA3WEc0Z0lDQWdZWEp5VzBsVVJWSkJWRTlTWFNBOUlHWjFibU4wYVc5dUtDbDdJSEpsZEhWeWJpQnBkR1Z5T3lCOU8xeHVJQ0FnSUdWNFpXTW9ZWEp5S1R0Y2JpQWdmU0JqWVhSamFDaGxLWHNnTHlvZ1pXMXdkSGtnS2k4Z2ZWeHVJQ0J5WlhSMWNtNGdjMkZtWlR0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5cGRHVnlMV1JsZEdWamRDNXFjMXh1THk4Z2JXOWtkV3hsSUdsa0lEMGdPVEpjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdOQ0ExSWl3aWRtRnlJR2RsZEV0bGVYTWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxclpYbHpKeWxjYmlBZ0xDQjBiMGxQWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXBiMkpxWldOMEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRzlpYW1WamRDd2daV3dwZTF4dUlDQjJZWElnVHlBZ0lDQWdJRDBnZEc5SlQySnFaV04wS0c5aWFtVmpkQ2xjYmlBZ0lDQXNJR3RsZVhNZ0lDQTlJR2RsZEV0bGVYTW9UeWxjYmlBZ0lDQXNJR3hsYm1kMGFDQTlJR3RsZVhNdWJHVnVaM1JvWEc0Z0lDQWdMQ0JwYm1SbGVDQWdQU0F3WEc0Z0lDQWdMQ0JyWlhrN1hHNGdJSGRvYVd4bEtHeGxibWQwYUNBK0lHbHVaR1Y0S1dsbUtFOWJhMlY1SUQwZ2EyVjVjMXRwYm1SbGVDc3JYVjBnUFQwOUlHVnNLWEpsZEhWeWJpQnJaWGs3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYTJWNWIyWXVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJRGt6WEc0dkx5QnRiMlIxYkdVZ1kyaDFibXR6SUQwZ01DQXhJRElnTXlJc0luWmhjaUJuYkc5aVlXd2dJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktWeHVJQ0FzSUcxaFkzSnZkR0Z6YXlBOUlISmxjWFZwY21Vb0p5NHZYM1JoYzJzbktTNXpaWFJjYmlBZ0xDQlBZbk5sY25abGNpQWdQU0JuYkc5aVlXd3VUWFYwWVhScGIyNVBZbk5sY25abGNpQjhmQ0JuYkc5aVlXd3VWMlZpUzJsMFRYVjBZWFJwYjI1UFluTmxjblpsY2x4dUlDQXNJSEJ5YjJObGMzTWdJQ0E5SUdkc2IySmhiQzV3Y205alpYTnpYRzRnSUN3Z1VISnZiV2x6WlNBZ0lEMGdaMnh2WW1Gc0xsQnliMjFwYzJWY2JpQWdMQ0JwYzA1dlpHVWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiMlluS1Nod2NtOWpaWE56S1NBOVBTQW5jSEp2WTJWemN5YzdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUdobFlXUXNJR3hoYzNRc0lHNXZkR2xtZVR0Y2JseHVJQ0IyWVhJZ1pteDFjMmdnUFNCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUhaaGNpQndZWEpsYm5Rc0lHWnVPMXh1SUNBZ0lHbG1LR2x6VG05a1pTQW1KaUFvY0dGeVpXNTBJRDBnY0hKdlkyVnpjeTVrYjIxaGFXNHBLWEJoY21WdWRDNWxlR2wwS0NrN1hHNGdJQ0FnZDJocGJHVW9hR1ZoWkNsN1hHNGdJQ0FnSUNCbWJpQWdJRDBnYUdWaFpDNW1ianRjYmlBZ0lDQWdJR2hsWVdRZ1BTQm9aV0ZrTG01bGVIUTdYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCbWJpZ3BPMXh1SUNBZ0lDQWdmU0JqWVhSamFDaGxLWHRjYmlBZ0lDQWdJQ0FnYVdZb2FHVmhaQ2x1YjNScFpua29LVHRjYmlBZ0lDQWdJQ0FnWld4elpTQnNZWE4wSUQwZ2RXNWtaV1pwYm1Wa08xeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCbE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ2JHRnpkQ0E5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0JwWmlod1lYSmxiblFwY0dGeVpXNTBMbVZ1ZEdWeUtDazdYRzRnSUgwN1hHNWNiaUFnTHk4Z1RtOWtaUzVxYzF4dUlDQnBaaWhwYzA1dlpHVXBlMXh1SUNBZ0lHNXZkR2xtZVNBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ0lDQndjbTlqWlhOekxtNWxlSFJVYVdOcktHWnNkWE5vS1R0Y2JpQWdJQ0I5TzF4dUlDQXZMeUJpY205M2MyVnljeUIzYVhSb0lFMTFkR0YwYVc5dVQySnpaWEoyWlhKY2JpQWdmU0JsYkhObElHbG1LRTlpYzJWeWRtVnlLWHRjYmlBZ0lDQjJZWElnZEc5bloyeGxJRDBnZEhKMVpWeHVJQ0FnSUNBZ0xDQnViMlJsSUNBZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWVVpYaDBUbTlrWlNnbkp5azdYRzRnSUNBZ2JtVjNJRTlpYzJWeWRtVnlLR1pzZFhOb0tTNXZZbk5sY25abEtHNXZaR1VzSUh0amFHRnlZV04wWlhKRVlYUmhPaUIwY25WbGZTazdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRibVYzWEc0Z0lDQWdibTkwYVdaNUlEMGdablZ1WTNScGIyNG9LWHRjYmlBZ0lDQWdJRzV2WkdVdVpHRjBZU0E5SUhSdloyZHNaU0E5SUNGMGIyZG5iR1U3WEc0Z0lDQWdmVHRjYmlBZ0x5OGdaVzUyYVhKdmJtMWxiblJ6SUhkcGRHZ2diV0Y1WW1VZ2JtOXVMV052YlhCc1pYUmxiSGtnWTI5eWNtVmpkQ3dnWW5WMElHVjRhWE4wWlc1MElGQnliMjFwYzJWY2JpQWdmU0JsYkhObElHbG1LRkJ5YjIxcGMyVWdKaVlnVUhKdmJXbHpaUzV5WlhOdmJIWmxLWHRjYmlBZ0lDQjJZWElnY0hKdmJXbHpaU0E5SUZCeWIyMXBjMlV1Y21WemIyeDJaU2dwTzF4dUlDQWdJRzV2ZEdsbWVTQTlJR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdJQ0J3Y205dGFYTmxMblJvWlc0b1pteDFjMmdwTzF4dUlDQWdJSDA3WEc0Z0lDOHZJR1p2Y2lCdmRHaGxjaUJsYm5acGNtOXViV1Z1ZEhNZ0xTQnRZV055YjNSaGMyc2dZbUZ6WldRZ2IyNDZYRzRnSUM4dklDMGdjMlYwU1cxdFpXUnBZWFJsWEc0Z0lDOHZJQzBnVFdWemMyRm5aVU5vWVc1dVpXeGNiaUFnTHk4Z0xTQjNhVzVrYjNjdWNHOXpkRTFsYzNOaFoxeHVJQ0F2THlBdElHOXVjbVZoWkhsemRHRjBaV05vWVc1blpWeHVJQ0F2THlBdElITmxkRlJwYldWdmRYUmNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnViM1JwWm5rZ1BTQm1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdMeThnYzNSeVlXNW5aU0JKUlNBcklIZGxZbkJoWTJzZ1pHVjJJSE5sY25abGNpQmlkV2NnTFNCMWMyVWdMbU5oYkd3b1oyeHZZbUZzS1Z4dUlDQWdJQ0FnYldGamNtOTBZWE5yTG1OaGJHd29aMnh2WW1Gc0xDQm1iSFZ6YUNrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlobWJpbDdYRzRnSUNBZ2RtRnlJSFJoYzJzZ1BTQjdabTQ2SUdadUxDQnVaWGgwT2lCMWJtUmxabWx1WldSOU8xeHVJQ0FnSUdsbUtHeGhjM1FwYkdGemRDNXVaWGgwSUQwZ2RHRnphenRjYmlBZ0lDQnBaaWdoYUdWaFpDbDdYRzRnSUNBZ0lDQm9aV0ZrSUQwZ2RHRnphenRjYmlBZ0lDQWdJRzV2ZEdsbWVTZ3BPMXh1SUNBZ0lIMGdiR0Z6ZENBOUlIUmhjMnM3WEc0Z0lIMDdYRzU5TzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWZiV2xqY205MFlYTnJMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0E1TkZ4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0EwSURVaUxDSXZMeUJtWVd4c1ltRmpheUJtYjNJZ1NVVXhNU0JpZFdkbmVTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5QjNhWFJvSUdsbWNtRnRaU0JoYm1RZ2QybHVaRzkzWEc1MllYSWdkRzlKVDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRhVzlpYW1WamRDY3BYRzRnSUN3Z1owOVFUaUFnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV2R2Y0c0bktTNW1YRzRnSUN3Z2RHOVRkSEpwYm1jZ0lEMGdlMzB1ZEc5VGRISnBibWM3WEc1Y2JuWmhjaUIzYVc1a2IzZE9ZVzFsY3lBOUlIUjVjR1Z2WmlCM2FXNWtiM2NnUFQwZ0oyOWlhbVZqZENjZ0ppWWdkMmx1Wkc5M0lDWW1JRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpYRzRnSUQ4Z1QySnFaV04wTG1kbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNb2QybHVaRzkzS1NBNklGdGRPMXh1WEc1MllYSWdaMlYwVjJsdVpHOTNUbUZ0WlhNZ1BTQm1kVzVqZEdsdmJpaHBkQ2w3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlHZFBVRTRvYVhRcE8xeHVJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJSEpsZEhWeWJpQjNhVzVrYjNkT1lXMWxjeTV6YkdsalpTZ3BPMXh1SUNCOVhHNTlPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVtSUQwZ1puVnVZM1JwYjI0Z1oyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aHBkQ2w3WEc0Z0lISmxkSFZ5YmlCM2FXNWtiM2RPWVcxbGN5QW1KaUIwYjFOMGNtbHVaeTVqWVd4c0tHbDBLU0E5UFNBblcyOWlhbVZqZENCWGFXNWtiM2RkSnlBL0lHZGxkRmRwYm1SdmQwNWhiV1Z6S0dsMEtTQTZJR2RQVUU0b2RHOUpUMkpxWldOMEtHbDBLU2s3WEc1OU8xeHVYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5dlltcGxZM1F0WjI5d2JpMWxlSFF1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURrMVhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURJZ015SXNJblpoY2lCb2FXUmxJRDBnY21WeGRXbHlaU2duTGk5ZmFHbGtaU2NwTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmloMFlYSm5aWFFzSUhOeVl5d2djMkZtWlNsN1hHNGdJR1p2Y2loMllYSWdhMlY1SUdsdUlITnlZeWw3WEc0Z0lDQWdhV1lvYzJGbVpTQW1KaUIwWVhKblpYUmJhMlY1WFNsMFlYSm5aWFJiYTJWNVhTQTlJSE55WTF0clpYbGRPMXh1SUNBZ0lHVnNjMlVnYUdsa1pTaDBZWEpuWlhRc0lHdGxlU3dnYzNKalcydGxlVjBwTzF4dUlDQjlJSEpsZEhWeWJpQjBZWEpuWlhRN1hHNTlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5ZmNtVmtaV1pwYm1VdFlXeHNMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0E1Tmx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWdNU0EwSURVaUxDSXZMeUJYYjNKcmN5QjNhWFJvSUY5ZmNISnZkRzlmWHlCdmJteDVMaUJQYkdRZ2RqZ2dZMkZ1SjNRZ2QyOXlheUIzYVhSb0lHNTFiR3dnY0hKdmRHOGdiMkpxWldOMGN5NWNiaThxSUdWemJHbHVkQzFrYVhOaFlteGxJRzV2TFhCeWIzUnZJQ292WEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktWeHVJQ0FzSUdGdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWs3WEc1MllYSWdZMmhsWTJzZ1BTQm1kVzVqZEdsdmJpaFBMQ0J3Y205MGJ5bDdYRzRnSUdGdVQySnFaV04wS0U4cE8xeHVJQ0JwWmlnaGFYTlBZbXBsWTNRb2NISnZkRzhwSUNZbUlIQnliM1J2SUNFOVBTQnVkV3hzS1hSb2NtOTNJRlI1Y0dWRmNuSnZjaWh3Y205MGJ5QXJJRndpT2lCallXNG5kQ0J6WlhRZ1lYTWdjSEp2ZEc5MGVYQmxJVndpS1R0Y2JuMDdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSHRjYmlBZ2MyVjBPaUJQWW1wbFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZZ2ZId2dLQ2RmWDNCeWIzUnZYMThuSUdsdUlIdDlJRDhnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpWeHVJQ0FnSUdaMWJtTjBhVzl1S0hSbGMzUXNJR0oxWjJkNUxDQnpaWFFwZTF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdjMlYwSUQwZ2NtVnhkV2x5WlNnbkxpOWZZM1I0Snlrb1JuVnVZM1JwYjI0dVkyRnNiQ3dnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdkdmNHUW5LUzVtS0U5aWFtVmpkQzV3Y205MGIzUjVjR1VzSUNkZlgzQnliM1J2WDE4bktTNXpaWFFzSURJcE8xeHVJQ0FnSUNBZ0lDQnpaWFFvZEdWemRDd2dXMTBwTzF4dUlDQWdJQ0FnSUNCaWRXZG5lU0E5SUNFb2RHVnpkQ0JwYm5OMFlXNWpaVzltSUVGeWNtRjVLVHRjYmlBZ0lDQWdJSDBnWTJGMFkyZ29aU2w3SUdKMVoyZDVJRDBnZEhKMVpUc2dmVnh1SUNBZ0lDQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlITmxkRkJ5YjNSdmRIbHdaVTltS0U4c0lIQnliM1J2S1h0Y2JpQWdJQ0FnSUNBZ1kyaGxZMnNvVHl3Z2NISnZkRzhwTzF4dUlDQWdJQ0FnSUNCcFppaGlkV2RuZVNsUExsOWZjSEp2ZEc5Zlh5QTlJSEJ5YjNSdk8xeHVJQ0FnSUNBZ0lDQmxiSE5sSUhObGRDaFBMQ0J3Y205MGJ5azdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQlBPMXh1SUNBZ0lDQWdmVHRjYmlBZ0lDQjlLSHQ5TENCbVlXeHpaU2tnT2lCMWJtUmxabWx1WldRcExGeHVJQ0JqYUdWamF6b2dZMmhsWTJ0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5elpYUXRjSEp2ZEc4dWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEazNYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCbmJHOWlZV3dnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJkc2IySmhiQ2NwWEc0Z0lDd2dZMjl5WlNBZ0lDQWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOWpiM0psSnlsY2JpQWdMQ0JrVUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMWtjQ2NwWEc0Z0lDd2dSRVZUUTFKSlVGUlBVbE1nUFNCeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwWEc0Z0lDd2dVMUJGUTBsRlV5QWdJQ0FnUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmMzQmxZMmxsY3ljcE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVLRXRGV1NsN1hHNGdJSFpoY2lCRElEMGdkSGx3Wlc5bUlHTnZjbVZiUzBWWlhTQTlQU0FuWm5WdVkzUnBiMjRuSUQ4Z1kyOXlaVnRMUlZsZElEb2daMnh2WW1Gc1cwdEZXVjA3WEc0Z0lHbG1LRVJGVTBOU1NWQlVUMUpUSUNZbUlFTWdKaVlnSVVOYlUxQkZRMGxGVTEwcFpGQXVaaWhETENCVFVFVkRTVVZUTENCN1hHNGdJQ0FnWTI5dVptbG5kWEpoWW14bE9pQjBjblZsTEZ4dUlDQWdJR2RsZERvZ1puVnVZM1JwYjI0b0tYc2djbVYwZFhKdUlIUm9hWE03SUgxY2JpQWdmU2s3WEc1OU8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlmYzJWMExYTndaV05wWlhNdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlEazRYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElEUWdOU0lzSWk4dklEY3VNeTR5TUNCVGNHVmphV1Z6UTI5dWMzUnlkV04wYjNJb1R5d2daR1ZtWVhWc2RFTnZibk4wY25WamRHOXlLVnh1ZG1GeUlHRnVUMkpxWldOMElDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXOWlhbVZqZENjcFhHNGdJQ3dnWVVaMWJtTjBhVzl1SUQwZ2NtVnhkV2x5WlNnbkxpOWZZUzFtZFc1amRHbHZiaWNwWEc0Z0lDd2dVMUJGUTBsRlV5QWdJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjNOd1pXTnBaWE1uS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0b1R5d2dSQ2w3WEc0Z0lIWmhjaUJESUQwZ1lXNVBZbXBsWTNRb1R5a3VZMjl1YzNSeWRXTjBiM0lzSUZNN1hHNGdJSEpsZEhWeWJpQkRJRDA5UFNCMWJtUmxabWx1WldRZ2ZId2dLRk1nUFNCaGJrOWlhbVZqZENoREtWdFRVRVZEU1VWVFhTa2dQVDBnZFc1a1pXWnBibVZrSUQ4Z1JDQTZJR0ZHZFc1amRHbHZiaWhUS1R0Y2JuMDdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDE5emNHVmphV1Z6TFdOdmJuTjBjblZqZEc5eUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQTVPVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQTBJRFVpTENKMllYSWdKR1Y0Y0c5eWRDQTlJSEpsY1hWcGNtVW9KeTR2WDJWNGNHOXlkQ2NwWEc0dkx5QXhPUzR4TGpJdU1pQXZJREUxTGpJdU15NDFJRTlpYW1WamRDNWpjbVZoZEdVb1R5QmJMQ0JRY205d1pYSjBhV1Z6WFNsY2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VExDQW5UMkpxWldOMEp5d2dlMk55WldGMFpUb2djbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV055WldGMFpTY3BmU2s3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOXRiMlIxYkdWekwyVnpOaTV2WW1wbFkzUXVZM0psWVhSbExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhNREJjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lERWdNaUF6SWl3aUx5OGdNVGt1TVM0eUxqa2dUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0U4cFhHNTJZWElnZEc5UFltcGxZM1FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiMkpxWldOMEp5bGNiaUFnTENBa1oyVjBVSEp2ZEc5MGVYQmxUMllnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFozQnZKeWs3WEc1Y2JuSmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMXpZWEFuS1NnbloyVjBVSEp2ZEc5MGVYQmxUMlluTENCbWRXNWpkR2x2YmlncGUxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdaMlYwVUhKdmRHOTBlWEJsVDJZb2FYUXBlMXh1SUNBZ0lISmxkSFZ5YmlBa1oyVjBVSEp2ZEc5MGVYQmxUMllvZEc5UFltcGxZM1FvYVhRcEtUdGNiaUFnZlR0Y2JuMHBPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWpiM0psTFdwekwyeHBZbkpoY25rdmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF3Y205MGIzUjVjR1V0YjJZdWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERXdNVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBZ01TQXlJRE1pTENJdkx5QXhPUzR4TGpJdU1UUWdUMkpxWldOMExtdGxlWE1vVHlsY2JuWmhjaUIwYjA5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMVzlpYW1WamRDY3BYRzRnSUN3Z0pHdGxlWE1nSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRhMlY1Y3ljcE8xeHVYRzV5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0YzJGd0p5a29KMnRsZVhNbkxDQm1kVzVqZEdsdmJpZ3BlMXh1SUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYTJWNWN5aHBkQ2w3WEc0Z0lDQWdjbVYwZFhKdUlDUnJaWGx6S0hSdlQySnFaV04wS0dsMEtTazdYRzRnSUgwN1hHNTlLVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNXJaWGx6TG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1ESmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURJZ05DQTFJaXdpTHk4Z01Ua3VNUzR6TGpFNUlFOWlhbVZqZEM1elpYUlFjbTkwYjNSNWNHVlBaaWhQTENCd2NtOTBieWxjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXl3Z0owOWlhbVZqZENjc0lIdHpaWFJRY205MGIzUjVjR1ZQWmpvZ2NtVnhkV2x5WlNnbkxpOWZjMlYwTFhCeWIzUnZKeWt1YzJWMGZTazdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdWMyVjBMWEJ5YjNSdmRIbHdaUzF2Wmk1cWMxeHVMeThnYlc5a2RXeGxJR2xrSUQwZ01UQXpYRzR2THlCdGIyUjFiR1VnWTJoMWJtdHpJRDBnTUNBeElESWdNeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCTVNVSlNRVkpaSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlzYVdKeVlYSjVKeWxjYmlBZ0xDQm5iRzlpWVd3Z0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1Z4dUlDQXNJR04wZUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyTjBlQ2NwWEc0Z0lDd2dZMnhoYzNOdlppQWdJQ0FnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZlkyeGhjM052WmljcFhHNGdJQ3dnSkdWNGNHOXlkQ0FnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaWGh3YjNKMEp5bGNiaUFnTENCcGMwOWlhbVZqZENBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1Z4dUlDQXNJR0ZHZFc1amRHbHZiaUFnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVnh1SUNBc0lHRnVTVzV6ZEdGdVkyVWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDJGdUxXbHVjM1JoYm1ObEp5bGNiaUFnTENCbWIzSlBaaUFnSUNBZ0lDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTltYjNJdGIyWW5LVnh1SUNBc0lITndaV05wWlhORGIyNXpkSEoxWTNSdmNpQTlJSEpsY1hWcGNtVW9KeTR2WDNOd1pXTnBaWE10WTI5dWMzUnlkV04wYjNJbktWeHVJQ0FzSUhSaGMyc2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM1JoYzJzbktTNXpaWFJjYmlBZ0xDQnRhV055YjNSaGMyc2dJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5dGFXTnliM1JoYzJzbktTZ3BYRzRnSUN3Z1VGSlBUVWxUUlNBZ0lDQWdJQ0FnSUNBZ0lEMGdKMUJ5YjIxcGMyVW5YRzRnSUN3Z1ZIbHdaVVZ5Y205eUlDQWdJQ0FnSUNBZ0lEMGdaMnh2WW1Gc0xsUjVjR1ZGY25KdmNseHVJQ0FzSUhCeWIyTmxjM01nSUNBZ0lDQWdJQ0FnSUNBOUlHZHNiMkpoYkM1d2NtOWpaWE56WEc0Z0lDd2dKRkJ5YjIxcGMyVWdJQ0FnSUNBZ0lDQWdJRDBnWjJ4dlltRnNXMUJTVDAxSlUwVmRYRzRnSUN3Z2NISnZZMlZ6Y3lBZ0lDQWdJQ0FnSUNBZ0lEMGdaMnh2WW1Gc0xuQnliMk5sYzNOY2JpQWdMQ0JwYzA1dlpHVWdJQ0FnSUNBZ0lDQWdJQ0FnUFNCamJHRnpjMjltS0hCeWIyTmxjM01wSUQwOUlDZHdjbTlqWlhOekoxeHVJQ0FzSUdWdGNIUjVJQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlHWjFibU4wYVc5dUtDbDdJQzhxSUdWdGNIUjVJQ292SUgxY2JpQWdMQ0JKYm5SbGNtNWhiQ3dnUjJWdVpYSnBZMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVMQ0JYY21Gd2NHVnlPMXh1WEc1MllYSWdWVk5GWDA1QlZFbFdSU0E5SUNFaFpuVnVZM1JwYjI0b0tYdGNiaUFnZEhKNUlIdGNiaUFnSUNBdkx5QmpiM0p5WldOMElITjFZbU5zWVhOemFXNW5JSGRwZEdnZ1FFQnpjR1ZqYVdWeklITjFjSEJ2Y25SY2JpQWdJQ0IyWVhJZ2NISnZiV2x6WlNBZ0lDQWdQU0FrVUhKdmJXbHpaUzV5WlhOdmJIWmxLREVwWEc0Z0lDQWdJQ0FzSUVaaGEyVlFjbTl0YVhObElEMGdLSEJ5YjIxcGMyVXVZMjl1YzNSeWRXTjBiM0lnUFNCN2ZTbGJjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM053WldOcFpYTW5LVjBnUFNCbWRXNWpkR2x2YmlobGVHVmpLWHNnWlhobFl5aGxiWEIwZVN3Z1pXMXdkSGtwT3lCOU8xeHVJQ0FnSUM4dklIVnVhR0Z1Wkd4bFpDQnlaV3BsWTNScGIyNXpJSFJ5WVdOcmFXNW5JSE4xY0hCdmNuUXNJRTV2WkdWS1V5QlFjbTl0YVhObElIZHBkR2h2ZFhRZ2FYUWdabUZwYkhNZ1FFQnpjR1ZqYVdWeklIUmxjM1JjYmlBZ0lDQnlaWFIxY200Z0tHbHpUbTlrWlNCOGZDQjBlWEJsYjJZZ1VISnZiV2x6WlZKbGFtVmpkR2x2YmtWMlpXNTBJRDA5SUNkbWRXNWpkR2x2YmljcElDWW1JSEJ5YjIxcGMyVXVkR2hsYmlobGJYQjBlU2tnYVc1emRHRnVZMlZ2WmlCR1lXdGxVSEp2YldselpUdGNiaUFnZlNCallYUmphQ2hsS1hzZ0x5b2daVzF3ZEhrZ0tpOGdmVnh1ZlNncE8xeHVYRzR2THlCb1pXeHdaWEp6WEc1MllYSWdjMkZ0WlVOdmJuTjBjblZqZEc5eUlEMGdablZ1WTNScGIyNG9ZU3dnWWlsN1hHNGdJQzh2SUhkcGRHZ2diR2xpY21GeWVTQjNjbUZ3Y0dWeUlITndaV05wWVd3Z1kyRnpaVnh1SUNCeVpYUjFjbTRnWVNBOVBUMGdZaUI4ZkNCaElEMDlQU0FrVUhKdmJXbHpaU0FtSmlCaUlEMDlQU0JYY21Gd2NHVnlPMXh1ZlR0Y2JuWmhjaUJwYzFSb1pXNWhZbXhsSUQwZ1puVnVZM1JwYjI0b2FYUXBlMXh1SUNCMllYSWdkR2hsYmp0Y2JpQWdjbVYwZFhKdUlHbHpUMkpxWldOMEtHbDBLU0FtSmlCMGVYQmxiMllnS0hSb1pXNGdQU0JwZEM1MGFHVnVLU0E5UFNBblpuVnVZM1JwYjI0bklEOGdkR2hsYmlBNklHWmhiSE5sTzF4dWZUdGNiblpoY2lCdVpYZFFjbTl0YVhObFEyRndZV0pwYkdsMGVTQTlJR1oxYm1OMGFXOXVLRU1wZTF4dUlDQnlaWFIxY200Z2MyRnRaVU52Ym5OMGNuVmpkRzl5S0NSUWNtOXRhWE5sTENCREtWeHVJQ0FnSUQ4Z2JtVjNJRkJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVLRU1wWEc0Z0lDQWdPaUJ1WlhjZ1IyVnVaWEpwWTFCeWIyMXBjMlZEWVhCaFltbHNhWFI1S0VNcE8xeHVmVHRjYm5aaGNpQlFjbTl0YVhObFEyRndZV0pwYkdsMGVTQTlJRWRsYm1WeWFXTlFjbTl0YVhObFEyRndZV0pwYkdsMGVTQTlJR1oxYm1OMGFXOXVLRU1wZTF4dUlDQjJZWElnY21WemIyeDJaU3dnY21WcVpXTjBPMXh1SUNCMGFHbHpMbkJ5YjIxcGMyVWdQU0J1WlhjZ1F5aG1kVzVqZEdsdmJpZ2tKSEpsYzI5c2RtVXNJQ1FrY21WcVpXTjBLWHRjYmlBZ0lDQnBaaWh5WlhOdmJIWmxJQ0U5UFNCMWJtUmxabWx1WldRZ2ZId2djbVZxWldOMElDRTlQU0IxYm1SbFptbHVaV1FwZEdoeWIzY2dWSGx3WlVWeWNtOXlLQ2RDWVdRZ1VISnZiV2x6WlNCamIyNXpkSEoxWTNSdmNpY3BPMXh1SUNBZ0lISmxjMjlzZG1VZ1BTQWtKSEpsYzI5c2RtVTdYRzRnSUNBZ2NtVnFaV04wSUNBOUlDUWtjbVZxWldOME8xeHVJQ0I5S1R0Y2JpQWdkR2hwY3k1eVpYTnZiSFpsSUQwZ1lVWjFibU4wYVc5dUtISmxjMjlzZG1VcE8xeHVJQ0IwYUdsekxuSmxhbVZqZENBZ1BTQmhSblZ1WTNScGIyNG9jbVZxWldOMEtUdGNibjA3WEc1MllYSWdjR1Z5Wm05eWJTQTlJR1oxYm1OMGFXOXVLR1Y0WldNcGUxeHVJQ0IwY25rZ2UxeHVJQ0FnSUdWNFpXTW9LVHRjYmlBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNCeVpYUjFjbTRnZTJWeWNtOXlPaUJsZlR0Y2JpQWdmVnh1ZlR0Y2JuWmhjaUJ1YjNScFpua2dQU0JtZFc1amRHbHZiaWh3Y205dGFYTmxMQ0JwYzFKbGFtVmpkQ2w3WEc0Z0lHbG1LSEJ5YjIxcGMyVXVYMjRwY21WMGRYSnVPMXh1SUNCd2NtOXRhWE5sTGw5dUlEMGdkSEoxWlR0Y2JpQWdkbUZ5SUdOb1lXbHVJRDBnY0hKdmJXbHpaUzVmWXp0Y2JpQWdiV2xqY205MFlYTnJLR1oxYm1OMGFXOXVLQ2w3WEc0Z0lDQWdkbUZ5SUhaaGJIVmxJRDBnY0hKdmJXbHpaUzVmZGx4dUlDQWdJQ0FnTENCdmF5QWdJQ0E5SUhCeWIyMXBjMlV1WDNNZ1BUMGdNVnh1SUNBZ0lDQWdMQ0JwSUNBZ0lDQTlJREE3WEc0Z0lDQWdkbUZ5SUhKMWJpQTlJR1oxYm1OMGFXOXVLSEpsWVdOMGFXOXVLWHRjYmlBZ0lDQWdJSFpoY2lCb1lXNWtiR1Z5SUQwZ2Iyc2dQeUJ5WldGamRHbHZiaTV2YXlBNklISmxZV04wYVc5dUxtWmhhV3hjYmlBZ0lDQWdJQ0FnTENCeVpYTnZiSFpsSUQwZ2NtVmhZM1JwYjI0dWNtVnpiMngyWlZ4dUlDQWdJQ0FnSUNBc0lISmxhbVZqZENBZ1BTQnlaV0ZqZEdsdmJpNXlaV3BsWTNSY2JpQWdJQ0FnSUNBZ0xDQmtiMjFoYVc0Z0lEMGdjbVZoWTNScGIyNHVaRzl0WVdsdVhHNGdJQ0FnSUNBZ0lDd2djbVZ6ZFd4MExDQjBhR1Z1TzF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdhV1lvYUdGdVpHeGxjaWw3WEc0Z0lDQWdJQ0FnSUNBZ2FXWW9JVzlyS1h0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0hCeWIyMXBjMlV1WDJnZ1BUMGdNaWx2YmtoaGJtUnNaVlZ1YUdGdVpHeGxaQ2h3Y205dGFYTmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliMjFwYzJVdVgyZ2dQU0F4TzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JwWmlob1lXNWtiR1Z5SUQwOVBTQjBjblZsS1hKbGMzVnNkQ0E5SUhaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWW9aRzl0WVdsdUtXUnZiV0ZwYmk1bGJuUmxjaWdwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdhR0Z1Wkd4bGNpaDJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmloa2IyMWhhVzRwWkc5dFlXbHVMbVY0YVhRb0tUdGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2FXWW9jbVZ6ZFd4MElEMDlQU0J5WldGamRHbHZiaTV3Y205dGFYTmxLWHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENoVWVYQmxSWEp5YjNJb0oxQnliMjFwYzJVdFkyaGhhVzRnWTNsamJHVW5LU2s3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUtIUm9aVzRnUFNCcGMxUm9aVzVoWW14bEtISmxjM1ZzZENrcGUxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdobGJpNWpZV3hzS0hKbGMzVnNkQ3dnY21WemIyeDJaU3dnY21WcVpXTjBLVHRjYmlBZ0lDQWdJQ0FnSUNCOUlHVnNjMlVnY21WemIyeDJaU2h5WlhOMWJIUXBPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdjbVZxWldOMEtIWmhiSFZsS1R0Y2JpQWdJQ0FnSUgwZ1kyRjBZMmdvWlNsN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENobEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUhkb2FXeGxLR05vWVdsdUxteGxibWQwYUNBK0lHa3BjblZ1S0dOb1lXbHVXMmtySzEwcE95QXZMeUIyWVhKcFlXSnNaU0JzWlc1bmRHZ2dMU0JqWVc0bmRDQjFjMlVnWm05eVJXRmphRnh1SUNBZ0lIQnliMjFwYzJVdVgyTWdQU0JiWFR0Y2JpQWdJQ0J3Y205dGFYTmxMbDl1SUQwZ1ptRnNjMlU3WEc0Z0lDQWdhV1lvYVhOU1pXcGxZM1FnSmlZZ0lYQnliMjFwYzJVdVgyZ3BiMjVWYm1oaGJtUnNaV1FvY0hKdmJXbHpaU2s3WEc0Z0lIMHBPMXh1ZlR0Y2JuWmhjaUJ2YmxWdWFHRnVaR3hsWkNBOUlHWjFibU4wYVc5dUtIQnliMjFwYzJVcGUxeHVJQ0IwWVhOckxtTmhiR3dvWjJ4dlltRnNMQ0JtZFc1amRHbHZiaWdwZTF4dUlDQWdJSFpoY2lCMllXeDFaU0E5SUhCeWIyMXBjMlV1WDNaY2JpQWdJQ0FnSUN3Z1lXSnlkWEIwTENCb1lXNWtiR1Z5TENCamIyNXpiMnhsTzF4dUlDQWdJR2xtS0dselZXNW9ZVzVrYkdWa0tIQnliMjFwYzJVcEtYdGNiaUFnSUNBZ0lHRmljblZ3ZENBOUlIQmxjbVp2Y20wb1puVnVZM1JwYjI0b0tYdGNiaUFnSUNBZ0lDQWdhV1lvYVhOT2IyUmxLWHRjYmlBZ0lDQWdJQ0FnSUNCd2NtOWpaWE56TG1WdGFYUW9KM1Z1YUdGdVpHeGxaRkpsYW1WamRHbHZiaWNzSUhaaGJIVmxMQ0J3Y205dGFYTmxLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJR2xtS0doaGJtUnNaWElnUFNCbmJHOWlZV3d1YjI1MWJtaGhibVJzWldSeVpXcGxZM1JwYjI0cGUxeHVJQ0FnSUNBZ0lDQWdJR2hoYm1Sc1pYSW9lM0J5YjIxcGMyVTZJSEJ5YjIxcGMyVXNJSEpsWVhOdmJqb2dkbUZzZFdWOUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElHbG1LQ2hqYjI1emIyeGxJRDBnWjJ4dlltRnNMbU52Ym5OdmJHVXBJQ1ltSUdOdmJuTnZiR1V1WlhKeWIzSXBlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9KMVZ1YUdGdVpHeGxaQ0J3Y205dGFYTmxJSEpsYW1WamRHbHZiaWNzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBdkx5QkNjbTkzYzJWeWN5QnphRzkxYkdRZ2JtOTBJSFJ5YVdkblpYSWdZSEpsYW1WamRHbHZia2hoYm1Sc1pXUmdJR1YyWlc1MElHbG1JR2wwSUhkaGN5Qm9ZVzVrYkdWa0lHaGxjbVVzSUU1dlpHVktVeUF0SUhOb2IzVnNaRnh1SUNBZ0lDQWdjSEp2YldselpTNWZhQ0E5SUdselRtOWtaU0I4ZkNCcGMxVnVhR0Z1Wkd4bFpDaHdjbTl0YVhObEtTQS9JRElnT2lBeE8xeHVJQ0FnSUgwZ2NISnZiV2x6WlM1ZllTQTlJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQnBaaWhoWW5KMWNIUXBkR2h5YjNjZ1lXSnlkWEIwTG1WeWNtOXlPMXh1SUNCOUtUdGNibjA3WEc1MllYSWdhWE5WYm1oaGJtUnNaV1FnUFNCbWRXNWpkR2x2Ymlod2NtOXRhWE5sS1h0Y2JpQWdhV1lvY0hKdmJXbHpaUzVmYUNBOVBTQXhLWEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdkbUZ5SUdOb1lXbHVJRDBnY0hKdmJXbHpaUzVmWVNCOGZDQndjbTl0YVhObExsOWpYRzRnSUNBZ0xDQnBJQ0FnSUNBOUlEQmNiaUFnSUNBc0lISmxZV04wYVc5dU8xeHVJQ0IzYUdsc1pTaGphR0ZwYmk1c1pXNW5kR2dnUGlCcEtYdGNiaUFnSUNCeVpXRmpkR2x2YmlBOUlHTm9ZV2x1VzJrcksxMDdYRzRnSUNBZ2FXWW9jbVZoWTNScGIyNHVabUZwYkNCOGZDQWhhWE5WYm1oaGJtUnNaV1FvY21WaFkzUnBiMjR1Y0hKdmJXbHpaU2twY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5SUhKbGRIVnliaUIwY25WbE8xeHVmVHRjYm5aaGNpQnZia2hoYm1Sc1pWVnVhR0Z1Wkd4bFpDQTlJR1oxYm1OMGFXOXVLSEJ5YjIxcGMyVXBlMXh1SUNCMFlYTnJMbU5oYkd3b1oyeHZZbUZzTENCbWRXNWpkR2x2YmlncGUxeHVJQ0FnSUhaaGNpQm9ZVzVrYkdWeU8xeHVJQ0FnSUdsbUtHbHpUbTlrWlNsN1hHNGdJQ0FnSUNCd2NtOWpaWE56TG1WdGFYUW9KM0psYW1WamRHbHZia2hoYm1Sc1pXUW5MQ0J3Y205dGFYTmxLVHRjYmlBZ0lDQjlJR1ZzYzJVZ2FXWW9hR0Z1Wkd4bGNpQTlJR2RzYjJKaGJDNXZibkpsYW1WamRHbHZibWhoYm1Sc1pXUXBlMXh1SUNBZ0lDQWdhR0Z1Wkd4bGNpaDdjSEp2YldselpUb2djSEp2YldselpTd2djbVZoYzI5dU9pQndjbTl0YVhObExsOTJmU2s3WEc0Z0lDQWdmVnh1SUNCOUtUdGNibjA3WEc1MllYSWdKSEpsYW1WamRDQTlJR1oxYm1OMGFXOXVLSFpoYkhWbEtYdGNiaUFnZG1GeUlIQnliMjFwYzJVZ1BTQjBhR2x6TzF4dUlDQnBaaWh3Y205dGFYTmxMbDlrS1hKbGRIVnlianRjYmlBZ2NISnZiV2x6WlM1ZlpDQTlJSFJ5ZFdVN1hHNGdJSEJ5YjIxcGMyVWdQU0J3Y205dGFYTmxMbDkzSUh4OElIQnliMjFwYzJVN0lDOHZJSFZ1ZDNKaGNGeHVJQ0J3Y205dGFYTmxMbDkySUQwZ2RtRnNkV1U3WEc0Z0lIQnliMjFwYzJVdVgzTWdQU0F5TzF4dUlDQnBaaWdoY0hKdmJXbHpaUzVmWVNsd2NtOXRhWE5sTGw5aElEMGdjSEp2YldselpTNWZZeTV6YkdsalpTZ3BPMXh1SUNCdWIzUnBabmtvY0hKdmJXbHpaU3dnZEhKMVpTazdYRzU5TzF4dWRtRnlJQ1J5WlhOdmJIWmxJRDBnWm5WdVkzUnBiMjRvZG1Gc2RXVXBlMXh1SUNCMllYSWdjSEp2YldselpTQTlJSFJvYVhOY2JpQWdJQ0FzSUhSb1pXNDdYRzRnSUdsbUtIQnliMjFwYzJVdVgyUXBjbVYwZFhKdU8xeHVJQ0J3Y205dGFYTmxMbDlrSUQwZ2RISjFaVHRjYmlBZ2NISnZiV2x6WlNBOUlIQnliMjFwYzJVdVgzY2dmSHdnY0hKdmJXbHpaVHNnTHk4Z2RXNTNjbUZ3WEc0Z0lIUnllU0I3WEc0Z0lDQWdhV1lvY0hKdmJXbHpaU0E5UFQwZ2RtRnNkV1VwZEdoeWIzY2dWSGx3WlVWeWNtOXlLRndpVUhKdmJXbHpaU0JqWVc0bmRDQmlaU0J5WlhOdmJIWmxaQ0JwZEhObGJHWmNJaWs3WEc0Z0lDQWdhV1lvZEdobGJpQTlJR2x6VkdobGJtRmliR1VvZG1Gc2RXVXBLWHRjYmlBZ0lDQWdJRzFwWTNKdmRHRnpheWhtZFc1amRHbHZiaWdwZTF4dUlDQWdJQ0FnSUNCMllYSWdkM0poY0hCbGNpQTlJSHRmZHpvZ2NISnZiV2x6WlN3Z1gyUTZJR1poYkhObGZUc2dMeThnZDNKaGNGeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9aVzR1WTJGc2JDaDJZV3gxWlN3Z1kzUjRLQ1J5WlhOdmJIWmxMQ0IzY21Gd2NHVnlMQ0F4S1N3Z1kzUjRLQ1J5WldwbFkzUXNJSGR5WVhCd1pYSXNJREVwS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNobEtYdGNiaUFnSUNBZ0lDQWdJQ0FrY21WcVpXTjBMbU5oYkd3b2QzSmhjSEJsY2l3Z1pTazdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQndjbTl0YVhObExsOTJJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQndjbTl0YVhObExsOXpJRDBnTVR0Y2JpQWdJQ0FnSUc1dmRHbG1lU2h3Y205dGFYTmxMQ0JtWVd4elpTazdYRzRnSUNBZ2ZWeHVJQ0I5SUdOaGRHTm9LR1VwZTF4dUlDQWdJQ1J5WldwbFkzUXVZMkZzYkNoN1gzYzZJSEJ5YjIxcGMyVXNJRjlrT2lCbVlXeHpaWDBzSUdVcE95QXZMeUIzY21Gd1hHNGdJSDFjYm4wN1hHNWNiaTh2SUdOdmJuTjBjblZqZEc5eUlIQnZiSGxtYVd4c1hHNXBaaWdoVlZORlgwNUJWRWxXUlNsN1hHNGdJQzh2SURJMUxqUXVNeTR4SUZCeWIyMXBjMlVvWlhobFkzVjBiM0lwWEc0Z0lDUlFjbTl0YVhObElEMGdablZ1WTNScGIyNGdVSEp2YldselpTaGxlR1ZqZFhSdmNpbDdYRzRnSUNBZ1lXNUpibk4wWVc1alpTaDBhR2x6TENBa1VISnZiV2x6WlN3Z1VGSlBUVWxUUlN3Z0oxOW9KeWs3WEc0Z0lDQWdZVVoxYm1OMGFXOXVLR1Y0WldOMWRHOXlLVHRjYmlBZ0lDQkpiblJsY201aGJDNWpZV3hzS0hSb2FYTXBPMXh1SUNBZ0lIUnllU0I3WEc0Z0lDQWdJQ0JsZUdWamRYUnZjaWhqZEhnb0pISmxjMjlzZG1Vc0lIUm9hWE1zSURFcExDQmpkSGdvSkhKbGFtVmpkQ3dnZEdocGN5d2dNU2twTzF4dUlDQWdJSDBnWTJGMFkyZ29aWEp5S1h0Y2JpQWdJQ0FnSUNSeVpXcGxZM1F1WTJGc2JDaDBhR2x6TENCbGNuSXBPMXh1SUNBZ0lIMWNiaUFnZlR0Y2JpQWdTVzUwWlhKdVlXd2dQU0JtZFc1amRHbHZiaUJRY205dGFYTmxLR1Y0WldOMWRHOXlLWHRjYmlBZ0lDQjBhR2x6TGw5aklEMGdXMTA3SUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRHd0SUdGM1lXbDBhVzVuSUhKbFlXTjBhVzl1YzF4dUlDQWdJSFJvYVhNdVgyRWdQU0IxYm1SbFptbHVaV1E3SUNBZ0lDQWdMeThnUEMwZ1kyaGxZMnRsWkNCcGJpQnBjMVZ1YUdGdVpHeGxaQ0J5WldGamRHbHZibk5jYmlBZ0lDQjBhR2x6TGw5eklEMGdNRHNnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRHd0SUhOMFlYUmxYRzRnSUNBZ2RHaHBjeTVmWkNBOUlHWmhiSE5sT3lBZ0lDQWdJQ0FnSUNBdkx5QThMU0JrYjI1bFhHNGdJQ0FnZEdocGN5NWZkaUE5SUhWdVpHVm1hVzVsWkRzZ0lDQWdJQ0F2THlBOExTQjJZV3gxWlZ4dUlDQWdJSFJvYVhNdVgyZ2dQU0F3T3lBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnUEMwZ2NtVnFaV04wYVc5dUlITjBZWFJsTENBd0lDMGdaR1ZtWVhWc2RDd2dNU0F0SUdoaGJtUnNaV1FzSURJZ0xTQjFibWhoYm1Sc1pXUmNiaUFnSUNCMGFHbHpMbDl1SUQwZ1ptRnNjMlU3SUNBZ0lDQWdJQ0FnSUM4dklEd3RJRzV2ZEdsbWVWeHVJQ0I5TzF4dUlDQkpiblJsY201aGJDNXdjbTkwYjNSNWNHVWdQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlMxaGJHd25LU2drVUhKdmJXbHpaUzV3Y205MGIzUjVjR1VzSUh0Y2JpQWdJQ0F2THlBeU5TNDBMalV1TXlCUWNtOXRhWE5sTG5CeWIzUnZkSGx3WlM1MGFHVnVLRzl1Um5Wc1ptbHNiR1ZrTENCdmJsSmxhbVZqZEdWa0tWeHVJQ0FnSUhSb1pXNDZJR1oxYm1OMGFXOXVJSFJvWlc0b2IyNUdkV3htYVd4c1pXUXNJRzl1VW1WcVpXTjBaV1FwZTF4dUlDQWdJQ0FnZG1GeUlISmxZV04wYVc5dUlDQWdJRDBnYm1WM1VISnZiV2x6WlVOaGNHRmlhV3hwZEhrb2MzQmxZMmxsYzBOdmJuTjBjblZqZEc5eUtIUm9hWE1zSUNSUWNtOXRhWE5sS1NrN1hHNGdJQ0FnSUNCeVpXRmpkR2x2Ymk1dmF5QWdJQ0FnUFNCMGVYQmxiMllnYjI1R2RXeG1hV3hzWldRZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUc5dVJuVnNabWxzYkdWa0lEb2dkSEoxWlR0Y2JpQWdJQ0FnSUhKbFlXTjBhVzl1TG1aaGFXd2dJQ0E5SUhSNWNHVnZaaUJ2YmxKbGFtVmpkR1ZrSUQwOUlDZG1kVzVqZEdsdmJpY2dKaVlnYjI1U1pXcGxZM1JsWkR0Y2JpQWdJQ0FnSUhKbFlXTjBhVzl1TG1SdmJXRnBiaUE5SUdselRtOWtaU0EvSUhCeWIyTmxjM011Wkc5dFlXbHVJRG9nZFc1a1pXWnBibVZrTzF4dUlDQWdJQ0FnZEdocGN5NWZZeTV3ZFhOb0tISmxZV04wYVc5dUtUdGNiaUFnSUNBZ0lHbG1LSFJvYVhNdVgyRXBkR2hwY3k1ZllTNXdkWE5vS0hKbFlXTjBhVzl1S1R0Y2JpQWdJQ0FnSUdsbUtIUm9hWE11WDNNcGJtOTBhV1o1S0hSb2FYTXNJR1poYkhObEtUdGNiaUFnSUNBZ0lISmxkSFZ5YmlCeVpXRmpkR2x2Ymk1d2NtOXRhWE5sTzF4dUlDQWdJSDBzWEc0Z0lDQWdMeThnTWpVdU5DNDFMakVnVUhKdmJXbHpaUzV3Y205MGIzUjVjR1V1WTJGMFkyZ29iMjVTWldwbFkzUmxaQ2xjYmlBZ0lDQW5ZMkYwWTJnbk9pQm1kVzVqZEdsdmJpaHZibEpsYW1WamRHVmtLWHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5Sb1pXNG9kVzVrWldacGJtVmtMQ0J2YmxKbGFtVmpkR1ZrS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1SUNCUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNBOUlHWjFibU4wYVc5dUtDbDdYRzRnSUNBZ2RtRnlJSEJ5YjIxcGMyVWdJRDBnYm1WM0lFbHVkR1Z5Ym1Gc08xeHVJQ0FnSUhSb2FYTXVjSEp2YldselpTQTlJSEJ5YjIxcGMyVTdYRzRnSUNBZ2RHaHBjeTV5WlhOdmJIWmxJRDBnWTNSNEtDUnlaWE52YkhabExDQndjbTl0YVhObExDQXhLVHRjYmlBZ0lDQjBhR2x6TG5KbGFtVmpkQ0FnUFNCamRIZ29KSEpsYW1WamRDd2djSEp2YldselpTd2dNU2s3WEc0Z0lIMDdYRzU5WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1SElDc2dKR1Y0Y0c5eWRDNVhJQ3NnSkdWNGNHOXlkQzVHSUNvZ0lWVlRSVjlPUVZSSlZrVXNJSHRRY205dGFYTmxPaUFrVUhKdmJXbHpaWDBwTzF4dWNtVnhkV2x5WlNnbkxpOWZjMlYwTFhSdkxYTjBjbWx1WnkxMFlXY25LU2drVUhKdmJXbHpaU3dnVUZKUFRVbFRSU2s3WEc1eVpYRjFhWEpsS0NjdUwxOXpaWFF0YzNCbFkybGxjeWNwS0ZCU1QwMUpVMFVwTzF4dVYzSmhjSEJsY2lBOUlISmxjWFZwY21Vb0p5NHZYMk52Y21VbktWdFFVazlOU1ZORlhUdGNibHh1THk4Z2MzUmhkR2xqYzF4dUpHVjRjRzl5ZENna1pYaHdiM0owTGxNZ0t5QWtaWGh3YjNKMExrWWdLaUFoVlZORlgwNUJWRWxXUlN3Z1VGSlBUVWxUUlN3Z2UxeHVJQ0F2THlBeU5TNDBMalF1TlNCUWNtOXRhWE5sTG5KbGFtVmpkQ2h5S1Z4dUlDQnlaV3BsWTNRNklHWjFibU4wYVc5dUlISmxhbVZqZENoeUtYdGNiaUFnSUNCMllYSWdZMkZ3WVdKcGJHbDBlU0E5SUc1bGQxQnliMjFwYzJWRFlYQmhZbWxzYVhSNUtIUm9hWE1wWEc0Z0lDQWdJQ0FzSUNRa2NtVnFaV04wSUNBZ1BTQmpZWEJoWW1sc2FYUjVMbkpsYW1WamREdGNiaUFnSUNBa0pISmxhbVZqZENoeUtUdGNiaUFnSUNCeVpYUjFjbTRnWTJGd1lXSnBiR2wwZVM1d2NtOXRhWE5sTzF4dUlDQjlYRzU5S1R0Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdJQ29nS0V4SlFsSkJVbGtnZkh3Z0lWVlRSVjlPUVZSSlZrVXBMQ0JRVWs5TlNWTkZMQ0I3WEc0Z0lDOHZJREkxTGpRdU5DNDJJRkJ5YjIxcGMyVXVjbVZ6YjJ4MlpTaDRLVnh1SUNCeVpYTnZiSFpsT2lCbWRXNWpkR2x2YmlCeVpYTnZiSFpsS0hncGUxeHVJQ0FnSUM4dklHbHVjM1JoYm1ObGIyWWdhVzV6ZEdWaFpDQnZaaUJwYm5SbGNtNWhiQ0J6Ykc5MElHTm9aV05ySUdKbFkyRjFjMlVnZDJVZ2MyaHZkV3hrSUdacGVDQnBkQ0IzYVhSb2IzVjBJSEpsY0d4aFkyVnRaVzUwSUc1aGRHbDJaU0JRY205dGFYTmxJR052Y21WY2JpQWdJQ0JwWmloNElHbHVjM1JoYm1ObGIyWWdKRkJ5YjIxcGMyVWdKaVlnYzJGdFpVTnZibk4wY25WamRHOXlLSGd1WTI5dWMzUnlkV04wYjNJc0lIUm9hWE1wS1hKbGRIVnliaUI0TzF4dUlDQWdJSFpoY2lCallYQmhZbWxzYVhSNUlEMGdibVYzVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvZEdocGN5bGNiaUFnSUNBZ0lDd2dKQ1J5WlhOdmJIWmxJQ0E5SUdOaGNHRmlhV3hwZEhrdWNtVnpiMngyWlR0Y2JpQWdJQ0FrSkhKbGMyOXNkbVVvZUNrN1hHNGdJQ0FnY21WMGRYSnVJR05oY0dGaWFXeHBkSGt1Y0hKdmJXbHpaVHRjYmlBZ2ZWeHVmU2s3WEc0a1pYaHdiM0owS0NSbGVIQnZjblF1VXlBcklDUmxlSEJ2Y25RdVJpQXFJQ0VvVlZORlgwNUJWRWxXUlNBbUppQnlaWEYxYVhKbEtDY3VMMTlwZEdWeUxXUmxkR1ZqZENjcEtHWjFibU4wYVc5dUtHbDBaWElwZTF4dUlDQWtVSEp2YldselpTNWhiR3dvYVhSbGNpbGJKMk5oZEdOb0oxMG9aVzF3ZEhrcE8xeHVmU2twTENCUVVrOU5TVk5GTENCN1hHNGdJQzh2SURJMUxqUXVOQzR4SUZCeWIyMXBjMlV1WVd4c0tHbDBaWEpoWW14bEtWeHVJQ0JoYkd3NklHWjFibU4wYVc5dUlHRnNiQ2hwZEdWeVlXSnNaU2w3WEc0Z0lDQWdkbUZ5SUVNZ0lDQWdJQ0FnSUNBZ1BTQjBhR2x6WEc0Z0lDQWdJQ0FzSUdOaGNHRmlhV3hwZEhrZ1BTQnVaWGRRY205dGFYTmxRMkZ3WVdKcGJHbDBlU2hES1Z4dUlDQWdJQ0FnTENCeVpYTnZiSFpsSUNBZ0lEMGdZMkZ3WVdKcGJHbDBlUzV5WlhOdmJIWmxYRzRnSUNBZ0lDQXNJSEpsYW1WamRDQWdJQ0FnUFNCallYQmhZbWxzYVhSNUxuSmxhbVZqZER0Y2JpQWdJQ0IyWVhJZ1lXSnlkWEIwSUQwZ2NHVnlabTl5YlNobWRXNWpkR2x2YmlncGUxeHVJQ0FnSUNBZ2RtRnlJSFpoYkhWbGN5QWdJQ0E5SUZ0ZFhHNGdJQ0FnSUNBZ0lDd2dhVzVrWlhnZ0lDQWdJRDBnTUZ4dUlDQWdJQ0FnSUNBc0lISmxiV0ZwYm1sdVp5QTlJREU3WEc0Z0lDQWdJQ0JtYjNKUFppaHBkR1Z5WVdKc1pTd2dabUZzYzJVc0lHWjFibU4wYVc5dUtIQnliMjFwYzJVcGUxeHVJQ0FnSUNBZ0lDQjJZWElnSkdsdVpHVjRJQ0FnSUNBZ0lDQTlJR2x1WkdWNEt5dGNiaUFnSUNBZ0lDQWdJQ0FzSUdGc2NtVmhaSGxEWVd4c1pXUWdQU0JtWVd4elpUdGNiaUFnSUNBZ0lDQWdkbUZzZFdWekxuQjFjMmdvZFc1a1pXWnBibVZrS1R0Y2JpQWdJQ0FnSUNBZ2NtVnRZV2x1YVc1bkt5czdYRzRnSUNBZ0lDQWdJRU11Y21WemIyeDJaU2h3Y205dGFYTmxLUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1h0Y2JpQWdJQ0FnSUNBZ0lDQnBaaWhoYkhKbFlXUjVRMkZzYkdWa0tYSmxkSFZ5Ymp0Y2JpQWdJQ0FnSUNBZ0lDQmhiSEpsWVdSNVEyRnNiR1ZrSUNBOUlIUnlkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2RtRnNkV1Z6V3lScGJtUmxlRjBnUFNCMllXeDFaVHRjYmlBZ0lDQWdJQ0FnSUNBdExYSmxiV0ZwYm1sdVp5QjhmQ0J5WlhOdmJIWmxLSFpoYkhWbGN5azdYRzRnSUNBZ0lDQWdJSDBzSUhKbGFtVmpkQ2s3WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUMwdGNtVnRZV2x1YVc1bklIeDhJSEpsYzI5c2RtVW9kbUZzZFdWektUdGNiaUFnSUNCOUtUdGNiaUFnSUNCcFppaGhZbkoxY0hRcGNtVnFaV04wS0dGaWNuVndkQzVsY25KdmNpazdYRzRnSUNBZ2NtVjBkWEp1SUdOaGNHRmlhV3hwZEhrdWNISnZiV2x6WlR0Y2JpQWdmU3hjYmlBZ0x5OGdNalV1TkM0MExqUWdVSEp2YldselpTNXlZV05sS0dsMFpYSmhZbXhsS1Z4dUlDQnlZV05sT2lCbWRXNWpkR2x2YmlCeVlXTmxLR2wwWlhKaFlteGxLWHRjYmlBZ0lDQjJZWElnUXlBZ0lDQWdJQ0FnSUNBOUlIUm9hWE5jYmlBZ0lDQWdJQ3dnWTJGd1lXSnBiR2wwZVNBOUlHNWxkMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVLRU1wWEc0Z0lDQWdJQ0FzSUhKbGFtVmpkQ0FnSUNBZ1BTQmpZWEJoWW1sc2FYUjVMbkpsYW1WamREdGNiaUFnSUNCMllYSWdZV0p5ZFhCMElEMGdjR1Z5Wm05eWJTaG1kVzVqZEdsdmJpZ3BlMXh1SUNBZ0lDQWdabTl5VDJZb2FYUmxjbUZpYkdVc0lHWmhiSE5sTENCbWRXNWpkR2x2Ymlod2NtOXRhWE5sS1h0Y2JpQWdJQ0FnSUNBZ1F5NXlaWE52YkhabEtIQnliMjFwYzJVcExuUm9aVzRvWTJGd1lXSnBiR2wwZVM1eVpYTnZiSFpsTENCeVpXcGxZM1FwTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNGdJQ0FnYVdZb1lXSnlkWEIwS1hKbGFtVmpkQ2hoWW5KMWNIUXVaWEp5YjNJcE8xeHVJQ0FnSUhKbGRIVnliaUJqWVhCaFltbHNhWFI1TG5CeWIyMXBjMlU3WEc0Z0lIMWNibjBwTzF4dVhHNWNiaTh2THk4dkx5OHZMeTh2THk4dkx5OHZMMXh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVkpjYmk4dklDNHZmaTlqYjNKbExXcHpMMnhwWW5KaGNua3ZiVzlrZFd4bGN5OWxjell1Y0hKdmJXbHpaUzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRBMFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0F4SURRZ05TSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHZJRVZEVFVGVFkzSnBjSFFnTmlCemVXMWliMnh6SUhOb2FXMWNiblpoY2lCbmJHOWlZV3dnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcFhHNGdJQ3dnYUdGeklDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTW5LVnh1SUNBc0lFUkZVME5TU1ZCVVQxSlRJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1Z4dUlDQXNJQ1JsZUhCdmNuUWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWxjYmlBZ0xDQnlaV1JsWm1sdVpTQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWxjYmlBZ0xDQk5SVlJCSUNBZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMjFsZEdFbktTNUxSVmxjYmlBZ0xDQWtabUZwYkhNZ0lDQWdJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5bGNiaUFnTENCemFHRnlaV1FnSUNBZ0lDQWdJQ0E5SUhKbGNYVnBjbVVvSnk0dlgzTm9ZWEpsWkNjcFhHNGdJQ3dnYzJWMFZHOVRkSEpwYm1kVVlXY2dQU0J5WlhGMWFYSmxLQ2N1TDE5elpYUXRkRzh0YzNSeWFXNW5MWFJoWnljcFhHNGdJQ3dnZFdsa0lDQWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5MWFXUW5LVnh1SUNBc0lIZHJjeUFnSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6SnlsY2JpQWdMQ0IzYTNORmVIUWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNkcmN5MWxlSFFuS1Z4dUlDQXNJSGRyYzBSbFptbHVaU0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmZDJ0ekxXUmxabWx1WlNjcFhHNGdJQ3dnYTJWNVQyWWdJQ0FnSUNBZ0lDQWdQU0J5WlhGMWFYSmxLQ2N1TDE5clpYbHZaaWNwWEc0Z0lDd2daVzUxYlV0bGVYTWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTlsYm5WdExXdGxlWE1uS1Z4dUlDQXNJR2x6UVhKeVlYa2dJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdFlYSnlZWGtuS1Z4dUlDQXNJR0Z1VDJKcVpXTjBJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlsY2JpQWdMQ0IwYjBsUFltcGxZM1FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHZZbXBsWTNRbktWeHVJQ0FzSUhSdlVISnBiV2wwYVhabElDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRjSEpwYldsMGFYWmxKeWxjYmlBZ0xDQmpjbVZoZEdWRVpYTmpJQ0FnSUNBOUlISmxjWFZwY21Vb0p5NHZYM0J5YjNCbGNuUjVMV1JsYzJNbktWeHVJQ0FzSUY5amNtVmhkR1VnSUNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdOeVpXRjBaU2NwWEc0Z0lDd2daMDlRVGtWNGRDQWdJQ0FnSUNBZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRaMjl3YmkxbGVIUW5LVnh1SUNBc0lDUkhUMUJFSUNBZ0lDQWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjR1FuS1Z4dUlDQXNJQ1JFVUNBZ0lDQWdJQ0FnSUNBZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV1J3SnlsY2JpQWdMQ0FrYTJWNWN5QWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFyWlhsekp5bGNiaUFnTENCblQxQkVJQ0FnSUNBZ0lDQWdJQ0E5SUNSSFQxQkVMbVpjYmlBZ0xDQmtVQ0FnSUNBZ0lDQWdJQ0FnSUNBOUlDUkVVQzVtWEc0Z0lDd2daMDlRVGlBZ0lDQWdJQ0FnSUNBZ1BTQm5UMUJPUlhoMExtWmNiaUFnTENBa1UzbHRZbTlzSUNBZ0lDQWdJQ0E5SUdkc2IySmhiQzVUZVcxaWIyeGNiaUFnTENBa1NsTlBUaUFnSUNBZ0lDQWdJQ0E5SUdkc2IySmhiQzVLVTA5T1hHNGdJQ3dnWDNOMGNtbHVaMmxtZVNBZ0lDQWdQU0FrU2xOUFRpQW1KaUFrU2xOUFRpNXpkSEpwYm1kcFpubGNiaUFnTENCUVVrOVVUMVJaVUVVZ0lDQWdJQ0E5SUNkd2NtOTBiM1I1Y0dVblhHNGdJQ3dnU0VsRVJFVk9JQ0FnSUNBZ0lDQWdQU0IzYTNNb0oxOW9hV1JrWlc0bktWeHVJQ0FzSUZSUFgxQlNTVTFKVkVsV1JTQWdJRDBnZDJ0ektDZDBiMUJ5YVcxcGRHbDJaU2NwWEc0Z0lDd2dhWE5GYm5WdElDQWdJQ0FnSUNBZ1BTQjdmUzV3Y205d1pYSjBlVWx6Ulc1MWJXVnlZV0pzWlZ4dUlDQXNJRk41YldKdmJGSmxaMmx6ZEhKNUlEMGdjMmhoY21Wa0tDZHplVzFpYjJ3dGNtVm5hWE4wY25rbktWeHVJQ0FzSUVGc2JGTjViV0p2YkhNZ0lDQWdJRDBnYzJoaGNtVmtLQ2R6ZVcxaWIyeHpKeWxjYmlBZ0xDQlBVRk41YldKdmJITWdJQ0FnSUNBOUlITm9ZWEpsWkNnbmIzQXRjM2x0WW05c2N5Y3BYRzRnSUN3Z1QySnFaV04wVUhKdmRHOGdJQ0FnUFNCUFltcGxZM1JiVUZKUFZFOVVXVkJGWFZ4dUlDQXNJRlZUUlY5T1FWUkpWa1VnSUNBZ0lEMGdkSGx3Wlc5bUlDUlRlVzFpYjJ3Z1BUMGdKMloxYm1OMGFXOXVKMXh1SUNBc0lGRlBZbXBsWTNRZ0lDQWdJQ0FnSUQwZ1oyeHZZbUZzTGxGUFltcGxZM1E3WEc0dkx5QkViMjRuZENCMWMyVWdjMlYwZEdWeWN5QnBiaUJSZENCVFkzSnBjSFFzSUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5NmJHOXBjbTlqYXk5amIzSmxMV3B6TDJsemMzVmxjeTh4TnpOY2JuWmhjaUJ6WlhSMFpYSWdQU0FoVVU5aWFtVmpkQ0I4ZkNBaFVVOWlhbVZqZEZ0UVVrOVVUMVJaVUVWZElIeDhJQ0ZSVDJKcVpXTjBXMUJTVDFSUFZGbFFSVjB1Wm1sdVpFTm9hV3hrTzF4dVhHNHZMeUJtWVd4c1ltRmpheUJtYjNJZ2IyeGtJRUZ1WkhKdmFXUXNJR2gwZEhCek9pOHZZMjlrWlM1bmIyOW5iR1V1WTI5dEwzQXZkamd2YVhOemRXVnpMMlJsZEdGcGJEOXBaRDAyT0RkY2JuWmhjaUJ6WlhSVGVXMWliMnhFWlhOaklEMGdSRVZUUTFKSlVGUlBVbE1nSmlZZ0pHWmhhV3h6S0daMWJtTjBhVzl1S0NsN1hHNGdJSEpsZEhWeWJpQmZZM0psWVhSbEtHUlFLSHQ5TENBbllTY3NJSHRjYmlBZ0lDQm5aWFE2SUdaMWJtTjBhVzl1S0NsN0lISmxkSFZ5YmlCa1VDaDBhR2x6TENBbllTY3NJSHQyWVd4MVpUb2dOMzBwTG1FN0lIMWNiaUFnZlNrcExtRWdJVDBnTnp0Y2JuMHBJRDhnWm5WdVkzUnBiMjRvYVhRc0lHdGxlU3dnUkNsN1hHNGdJSFpoY2lCd2NtOTBiMFJsYzJNZ1BTQm5UMUJFS0U5aWFtVmpkRkJ5YjNSdkxDQnJaWGtwTzF4dUlDQnBaaWh3Y205MGIwUmxjMk1wWkdWc1pYUmxJRTlpYW1WamRGQnliM1J2VzJ0bGVWMDdYRzRnSUdSUUtHbDBMQ0JyWlhrc0lFUXBPMXh1SUNCcFppaHdjbTkwYjBSbGMyTWdKaVlnYVhRZ0lUMDlJRTlpYW1WamRGQnliM1J2S1dSUUtFOWlhbVZqZEZCeWIzUnZMQ0JyWlhrc0lIQnliM1J2UkdWell5azdYRzU5SURvZ1pGQTdYRzVjYm5aaGNpQjNjbUZ3SUQwZ1puVnVZM1JwYjI0b2RHRm5LWHRjYmlBZ2RtRnlJSE41YlNBOUlFRnNiRk41YldKdmJITmJkR0ZuWFNBOUlGOWpjbVZoZEdVb0pGTjViV0p2YkZ0UVVrOVVUMVJaVUVWZEtUdGNiaUFnYzNsdExsOXJJRDBnZEdGbk8xeHVJQ0J5WlhSMWNtNGdjM2x0TzF4dWZUdGNibHh1ZG1GeUlHbHpVM2x0WW05c0lEMGdWVk5GWDA1QlZFbFdSU0FtSmlCMGVYQmxiMllnSkZONWJXSnZiQzVwZEdWeVlYUnZjaUE5UFNBbmMzbHRZbTlzSnlBL0lHWjFibU4wYVc5dUtHbDBLWHRjYmlBZ2NtVjBkWEp1SUhSNWNHVnZaaUJwZENBOVBTQW5jM2x0WW05c0p6dGNibjBnT2lCbWRXNWpkR2x2YmlocGRDbDdYRzRnSUhKbGRIVnliaUJwZENCcGJuTjBZVzVqWlc5bUlDUlRlVzFpYjJ3N1hHNTlPMXh1WEc1MllYSWdKR1JsWm1sdVpWQnliM0JsY25SNUlEMGdablZ1WTNScGIyNGdaR1ZtYVc1bFVISnZjR1Z5ZEhrb2FYUXNJR3RsZVN3Z1JDbDdYRzRnSUdsbUtHbDBJRDA5UFNCUFltcGxZM1JRY205MGJ5a2taR1ZtYVc1bFVISnZjR1Z5ZEhrb1QxQlRlVzFpYjJ4ekxDQnJaWGtzSUVRcE8xeHVJQ0JoYms5aWFtVmpkQ2hwZENrN1hHNGdJR3RsZVNBOUlIUnZVSEpwYldsMGFYWmxLR3RsZVN3Z2RISjFaU2s3WEc0Z0lHRnVUMkpxWldOMEtFUXBPMXh1SUNCcFppaG9ZWE1vUVd4c1UzbHRZbTlzY3l3Z2EyVjVLU2w3WEc0Z0lDQWdhV1lvSVVRdVpXNTFiV1Z5WVdKc1pTbDdYRzRnSUNBZ0lDQnBaaWdoYUdGektHbDBMQ0JJU1VSRVJVNHBLV1JRS0dsMExDQklTVVJFUlU0c0lHTnlaV0YwWlVSbGMyTW9NU3dnZTMwcEtUdGNiaUFnSUNBZ0lHbDBXMGhKUkVSRlRsMWJhMlY1WFNBOUlIUnlkV1U3WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHbG1LR2hoY3locGRDd2dTRWxFUkVWT0tTQW1KaUJwZEZ0SVNVUkVSVTVkVzJ0bGVWMHBhWFJiU0VsRVJFVk9YVnRyWlhsZElEMGdabUZzYzJVN1hHNGdJQ0FnSUNCRUlEMGdYMk55WldGMFpTaEVMQ0I3Wlc1MWJXVnlZV0pzWlRvZ1kzSmxZWFJsUkdWell5Z3dMQ0JtWVd4elpTbDlLVHRjYmlBZ0lDQjlJSEpsZEhWeWJpQnpaWFJUZVcxaWIyeEVaWE5qS0dsMExDQnJaWGtzSUVRcE8xeHVJQ0I5SUhKbGRIVnliaUJrVUNocGRDd2dhMlY1TENCRUtUdGNibjA3WEc1MllYSWdKR1JsWm1sdVpWQnliM0JsY25ScFpYTWdQU0JtZFc1amRHbHZiaUJrWldacGJtVlFjbTl3WlhKMGFXVnpLR2wwTENCUUtYdGNiaUFnWVc1UFltcGxZM1FvYVhRcE8xeHVJQ0IyWVhJZ2EyVjVjeUE5SUdWdWRXMUxaWGx6S0ZBZ1BTQjBiMGxQWW1wbFkzUW9VQ2twWEc0Z0lDQWdMQ0JwSUNBZ0lEMGdNRnh1SUNBZ0lDd2diQ0E5SUd0bGVYTXViR1Z1WjNSb1hHNGdJQ0FnTENCclpYazdYRzRnSUhkb2FXeGxLR3dnUGlCcEtTUmtaV1pwYm1WUWNtOXdaWEowZVNocGRDd2dhMlY1SUQwZ2EyVjVjMXRwS3l0ZExDQlFXMnRsZVYwcE8xeHVJQ0J5WlhSMWNtNGdhWFE3WEc1OU8xeHVkbUZ5SUNSamNtVmhkR1VnUFNCbWRXNWpkR2x2YmlCamNtVmhkR1VvYVhRc0lGQXBlMXh1SUNCeVpYUjFjbTRnVUNBOVBUMGdkVzVrWldacGJtVmtJRDhnWDJOeVpXRjBaU2hwZENrZ09pQWtaR1ZtYVc1bFVISnZjR1Z5ZEdsbGN5aGZZM0psWVhSbEtHbDBLU3dnVUNrN1hHNTlPMXh1ZG1GeUlDUndjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU0E5SUdaMWJtTjBhVzl1SUhCeWIzQmxjblI1U1hORmJuVnRaWEpoWW14bEtHdGxlU2w3WEc0Z0lIWmhjaUJGSUQwZ2FYTkZiblZ0TG1OaGJHd29kR2hwY3l3Z2EyVjVJRDBnZEc5UWNtbHRhWFJwZG1Vb2EyVjVMQ0IwY25WbEtTazdYRzRnSUdsbUtIUm9hWE1nUFQwOUlFOWlhbVZqZEZCeWIzUnZJQ1ltSUdoaGN5aEJiR3hUZVcxaWIyeHpMQ0JyWlhrcElDWW1JQ0ZvWVhNb1QxQlRlVzFpYjJ4ekxDQnJaWGtwS1hKbGRIVnliaUJtWVd4elpUdGNiaUFnY21WMGRYSnVJRVVnZkh3Z0lXaGhjeWgwYUdsekxDQnJaWGtwSUh4OElDRm9ZWE1vUVd4c1UzbHRZbTlzY3l3Z2EyVjVLU0I4ZkNCb1lYTW9kR2hwY3l3Z1NFbEVSRVZPS1NBbUppQjBhR2x6VzBoSlJFUkZUbDFiYTJWNVhTQS9JRVVnT2lCMGNuVmxPMXh1ZlR0Y2JuWmhjaUFrWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlJRDBnWm5WdVkzUnBiMjRnWjJWMFQzZHVVSEp2Y0dWeWRIbEVaWE5qY21sd2RHOXlLR2wwTENCclpYa3BlMXh1SUNCcGRDQWdQU0IwYjBsUFltcGxZM1FvYVhRcE8xeHVJQ0JyWlhrZ1BTQjBiMUJ5YVcxcGRHbDJaU2hyWlhrc0lIUnlkV1VwTzF4dUlDQnBaaWhwZENBOVBUMGdUMkpxWldOMFVISnZkRzhnSmlZZ2FHRnpLRUZzYkZONWJXSnZiSE1zSUd0bGVTa2dKaVlnSVdoaGN5aFBVRk41YldKdmJITXNJR3RsZVNrcGNtVjBkWEp1TzF4dUlDQjJZWElnUkNBOUlHZFBVRVFvYVhRc0lHdGxlU2s3WEc0Z0lHbG1LRVFnSmlZZ2FHRnpLRUZzYkZONWJXSnZiSE1zSUd0bGVTa2dKaVlnSVNob1lYTW9hWFFzSUVoSlJFUkZUaWtnSmlZZ2FYUmJTRWxFUkVWT1hWdHJaWGxkS1NsRUxtVnVkVzFsY21GaWJHVWdQU0IwY25WbE8xeHVJQ0J5WlhSMWNtNGdSRHRjYm4wN1hHNTJZWElnSkdkbGRFOTNibEJ5YjNCbGNuUjVUbUZ0WlhNZ1BTQm1kVzVqZEdsdmJpQm5aWFJQZDI1UWNtOXdaWEowZVU1aGJXVnpLR2wwS1h0Y2JpQWdkbUZ5SUc1aGJXVnpJQ0E5SUdkUFVFNG9kRzlKVDJKcVpXTjBLR2wwS1NsY2JpQWdJQ0FzSUhKbGMzVnNkQ0E5SUZ0ZFhHNGdJQ0FnTENCcElDQWdJQ0FnUFNBd1hHNGdJQ0FnTENCclpYazdYRzRnSUhkb2FXeGxLRzVoYldWekxteGxibWQwYUNBK0lHa3BlMXh1SUNBZ0lHbG1LQ0ZvWVhNb1FXeHNVM2x0WW05c2N5d2dhMlY1SUQwZ2JtRnRaWE5iYVNzclhTa2dKaVlnYTJWNUlDRTlJRWhKUkVSRlRpQW1KaUJyWlhrZ0lUMGdUVVZVUVNseVpYTjFiSFF1Y0hWemFDaHJaWGtwTzF4dUlDQjlJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNTlPMXh1ZG1GeUlDUm5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE1nUFNCbWRXNWpkR2x2YmlCblpYUlBkMjVRY205d1pYSjBlVk41YldKdmJITW9hWFFwZTF4dUlDQjJZWElnU1ZOZlQxQWdJRDBnYVhRZ1BUMDlJRTlpYW1WamRGQnliM1J2WEc0Z0lDQWdMQ0J1WVcxbGN5QWdQU0JuVDFCT0tFbFRYMDlRSUQ4Z1QxQlRlVzFpYjJ4eklEb2dkRzlKVDJKcVpXTjBLR2wwS1NsY2JpQWdJQ0FzSUhKbGMzVnNkQ0E5SUZ0ZFhHNGdJQ0FnTENCcElDQWdJQ0FnUFNBd1hHNGdJQ0FnTENCclpYazdYRzRnSUhkb2FXeGxLRzVoYldWekxteGxibWQwYUNBK0lHa3BlMXh1SUNBZ0lHbG1LR2hoY3loQmJHeFRlVzFpYjJ4ekxDQnJaWGtnUFNCdVlXMWxjMXRwS3l0ZEtTQW1KaUFvU1ZOZlQxQWdQeUJvWVhNb1QySnFaV04wVUhKdmRHOHNJR3RsZVNrZ09pQjBjblZsS1NseVpYTjFiSFF1Y0hWemFDaEJiR3hUZVcxaWIyeHpXMnRsZVYwcE8xeHVJQ0I5SUhKbGRIVnliaUJ5WlhOMWJIUTdYRzU5TzF4dVhHNHZMeUF4T1M0MExqRXVNU0JUZVcxaWIyd29XMlJsYzJOeWFYQjBhVzl1WFNsY2JtbG1LQ0ZWVTBWZlRrRlVTVlpGS1h0Y2JpQWdKRk41YldKdmJDQTlJR1oxYm1OMGFXOXVJRk41YldKdmJDZ3BlMXh1SUNBZ0lHbG1LSFJvYVhNZ2FXNXpkR0Z1WTJWdlppQWtVM2x0WW05c0tYUm9jbTkzSUZSNWNHVkZjbkp2Y2lnblUzbHRZbTlzSUdseklHNXZkQ0JoSUdOdmJuTjBjblZqZEc5eUlTY3BPMXh1SUNBZ0lIWmhjaUIwWVdjZ1BTQjFhV1FvWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0ErSURBZ1B5QmhjbWQxYldWdWRITmJNRjBnT2lCMWJtUmxabWx1WldRcE8xeHVJQ0FnSUhaaGNpQWtjMlYwSUQwZ1puVnVZM1JwYjI0b2RtRnNkV1VwZTF4dUlDQWdJQ0FnYVdZb2RHaHBjeUE5UFQwZ1QySnFaV04wVUhKdmRHOHBKSE5sZEM1allXeHNLRTlRVTNsdFltOXNjeXdnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdhV1lvYUdGektIUm9hWE1zSUVoSlJFUkZUaWtnSmlZZ2FHRnpLSFJvYVhOYlNFbEVSRVZPWFN3Z2RHRm5LU2wwYUdselcwaEpSRVJGVGwxYmRHRm5YU0E5SUdaaGJITmxPMXh1SUNBZ0lDQWdjMlYwVTNsdFltOXNSR1Z6WXloMGFHbHpMQ0IwWVdjc0lHTnlaV0YwWlVSbGMyTW9NU3dnZG1Gc2RXVXBLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHbG1LRVJGVTBOU1NWQlVUMUpUSUNZbUlITmxkSFJsY2lselpYUlRlVzFpYjJ4RVpYTmpLRTlpYW1WamRGQnliM1J2TENCMFlXY3NJSHRqYjI1bWFXZDFjbUZpYkdVNklIUnlkV1VzSUhObGREb2dKSE5sZEgwcE8xeHVJQ0FnSUhKbGRIVnliaUIzY21Gd0tIUmhaeWs3WEc0Z0lIMDdYRzRnSUhKbFpHVm1hVzVsS0NSVGVXMWliMnhiVUZKUFZFOVVXVkJGWFN3Z0ozUnZVM1J5YVc1bkp5d2dablZ1WTNScGIyNGdkRzlUZEhKcGJtY29LWHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYXp0Y2JpQWdmU2s3WEc1Y2JpQWdKRWRQVUVRdVppQTlJQ1JuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSTdYRzRnSUNSRVVDNW1JQ0FnUFNBa1pHVm1hVzVsVUhKdmNHVnlkSGs3WEc0Z0lISmxjWFZwY21Vb0p5NHZYMjlpYW1WamRDMW5iM0J1SnlrdVppQTlJR2RQVUU1RmVIUXVaaUE5SUNSblpYUlBkMjVRY205d1pYSjBlVTVoYldWek8xeHVJQ0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0Y0dsbEp5a3VaaUFnUFNBa2NISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVTdYRzRnSUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxbmIzQnpKeWt1WmlBOUlDUm5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE03WEc1Y2JpQWdhV1lvUkVWVFExSkpVRlJQVWxNZ0ppWWdJWEpsY1hWcGNtVW9KeTR2WDJ4cFluSmhjbmtuS1NsN1hHNGdJQ0FnY21Wa1pXWnBibVVvVDJKcVpXTjBVSEp2ZEc4c0lDZHdjbTl3WlhKMGVVbHpSVzUxYldWeVlXSnNaU2NzSUNSd2NtOXdaWEowZVVselJXNTFiV1Z5WVdKc1pTd2dkSEoxWlNrN1hHNGdJSDFjYmx4dUlDQjNhM05GZUhRdVppQTlJR1oxYm1OMGFXOXVLRzVoYldVcGUxeHVJQ0FnSUhKbGRIVnliaUIzY21Gd0tIZHJjeWh1WVcxbEtTazdYRzRnSUgxY2JuMWNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMa2NnS3lBa1pYaHdiM0owTGxjZ0t5QWtaWGh3YjNKMExrWWdLaUFoVlZORlgwNUJWRWxXUlN3Z2UxTjViV0p2YkRvZ0pGTjViV0p2YkgwcE8xeHVYRzVtYjNJb2RtRnlJSE41YldKdmJITWdQU0FvWEc0Z0lDOHZJREU1TGpRdU1pNHlMQ0F4T1M0MExqSXVNeXdnTVRrdU5DNHlMalFzSURFNUxqUXVNaTQyTENBeE9TNDBMakl1T0N3Z01Ua3VOQzR5TGprc0lERTVMalF1TWk0eE1Dd2dNVGt1TkM0eUxqRXhMQ0F4T1M0MExqSXVNVElzSURFNUxqUXVNaTR4TXl3Z01Ua3VOQzR5TGpFMFhHNGdJQ2RvWVhOSmJuTjBZVzVqWlN4cGMwTnZibU5oZEZOd2NtVmhaR0ZpYkdVc2FYUmxjbUYwYjNJc2JXRjBZMmdzY21Wd2JHRmpaU3h6WldGeVkyZ3NjM0JsWTJsbGN5eHpjR3hwZEN4MGIxQnlhVzFwZEdsMlpTeDBiMU4wY21sdVoxUmhaeXgxYm5OamIzQmhZbXhsY3lkY2Jpa3VjM0JzYVhRb0p5d25LU3dnYVNBOUlEQTdJSE41YldKdmJITXViR1Z1WjNSb0lENGdhVHNnS1hkcmN5aHplVzFpYjJ4elcya3JLMTBwTzF4dVhHNW1iM0lvZG1GeUlITjViV0p2YkhNZ1BTQWthMlY1Y3loM2EzTXVjM1J2Y21VcExDQnBJRDBnTURzZ2MzbHRZbTlzY3k1c1pXNW5kR2dnUGlCcE95QXBkMnR6UkdWbWFXNWxLSE41YldKdmJITmJhU3NyWFNrN1hHNWNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0lWVlRSVjlPUVZSSlZrVXNJQ2RUZVcxaWIyd25MQ0I3WEc0Z0lDOHZJREU1TGpRdU1pNHhJRk41YldKdmJDNW1iM0lvYTJWNUtWeHVJQ0FuWm05eUp6b2dablZ1WTNScGIyNG9hMlY1S1h0Y2JpQWdJQ0J5WlhSMWNtNGdhR0Z6S0ZONWJXSnZiRkpsWjJsemRISjVMQ0JyWlhrZ0t6MGdKeWNwWEc0Z0lDQWdJQ0EvSUZONWJXSnZiRkpsWjJsemRISjVXMnRsZVYxY2JpQWdJQ0FnSURvZ1UzbHRZbTlzVW1WbmFYTjBjbmxiYTJWNVhTQTlJQ1JUZVcxaWIyd29hMlY1S1R0Y2JpQWdmU3hjYmlBZ0x5OGdNVGt1TkM0eUxqVWdVM2x0WW05c0xtdGxlVVp2Y2loemVXMHBYRzRnSUd0bGVVWnZjam9nWm5WdVkzUnBiMjRnYTJWNVJtOXlLR3RsZVNsN1hHNGdJQ0FnYVdZb2FYTlRlVzFpYjJ3b2EyVjVLU2x5WlhSMWNtNGdhMlY1VDJZb1UzbHRZbTlzVW1WbmFYTjBjbmtzSUd0bGVTazdYRzRnSUNBZ2RHaHliM2NnVkhsd1pVVnljbTl5S0d0bGVTQXJJQ2NnYVhNZ2JtOTBJR0VnYzNsdFltOXNJU2NwTzF4dUlDQjlMRnh1SUNCMWMyVlRaWFIwWlhJNklHWjFibU4wYVc5dUtDbDdJSE5sZEhSbGNpQTlJSFJ5ZFdVN0lIMHNYRzRnSUhWelpWTnBiWEJzWlRvZ1puVnVZM1JwYjI0b0tYc2djMlYwZEdWeUlEMGdabUZzYzJVN0lIMWNibjBwTzF4dVhHNGtaWGh3YjNKMEtDUmxlSEJ2Y25RdVV5QXJJQ1JsZUhCdmNuUXVSaUFxSUNGVlUwVmZUa0ZVU1ZaRkxDQW5UMkpxWldOMEp5d2dlMXh1SUNBdkx5QXhPUzR4TGpJdU1pQlBZbXBsWTNRdVkzSmxZWFJsS0U4Z1d5d2dVSEp2Y0dWeWRHbGxjMTBwWEc0Z0lHTnlaV0YwWlRvZ0pHTnlaV0YwWlN4Y2JpQWdMeThnTVRrdU1TNHlMalFnVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtFOHNJRkFzSUVGMGRISnBZblYwWlhNcFhHNGdJR1JsWm1sdVpWQnliM0JsY25SNU9pQWtaR1ZtYVc1bFVISnZjR1Z5ZEhrc1hHNGdJQzh2SURFNUxqRXVNaTR6SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGFXVnpLRThzSUZCeWIzQmxjblJwWlhNcFhHNGdJR1JsWm1sdVpWQnliM0JsY25ScFpYTTZJQ1JrWldacGJtVlFjbTl3WlhKMGFXVnpMRnh1SUNBdkx5QXhPUzR4TGpJdU5pQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5S0U4c0lGQXBYRzRnSUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjam9nSkdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaXhjYmlBZ0x5OGdNVGt1TVM0eUxqY2dUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VG1GdFpYTW9UeWxjYmlBZ1oyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN6b2dKR2RsZEU5M2JsQnliM0JsY25SNVRtRnRaWE1zWEc0Z0lDOHZJREU1TGpFdU1pNDRJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVZONWJXSnZiSE1vVHlsY2JpQWdaMlYwVDNkdVVISnZjR1Z5ZEhsVGVXMWliMnh6T2lBa1oyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpYRzU5S1R0Y2JseHVMeThnTWpRdU15NHlJRXBUVDA0dWMzUnlhVzVuYVdaNUtIWmhiSFZsSUZzc0lISmxjR3hoWTJWeUlGc3NJSE53WVdObFhWMHBYRzRrU2xOUFRpQW1KaUFrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDZ2hWVk5GWDA1QlZFbFdSU0I4ZkNBa1ptRnBiSE1vWm5WdVkzUnBiMjRvS1h0Y2JpQWdkbUZ5SUZNZ1BTQWtVM2x0WW05c0tDazdYRzRnSUM4dklFMVRJRVZrWjJVZ1kyOXVkbVZ5ZEhNZ2MzbHRZbTlzSUhaaGJIVmxjeUIwYnlCS1UwOU9JR0Z6SUh0OVhHNGdJQzh2SUZkbFlrdHBkQ0JqYjI1MlpYSjBjeUJ6ZVcxaWIyd2dkbUZzZFdWeklIUnZJRXBUVDA0Z1lYTWdiblZzYkZ4dUlDQXZMeUJXT0NCMGFISnZkM01nYjI0Z1ltOTRaV1FnYzNsdFltOXNjMXh1SUNCeVpYUjFjbTRnWDNOMGNtbHVaMmxtZVNoYlUxMHBJQ0U5SUNkYmJuVnNiRjBuSUh4OElGOXpkSEpwYm1kcFpua29lMkU2SUZOOUtTQWhQU0FuZTMwbklIeDhJRjl6ZEhKcGJtZHBabmtvVDJKcVpXTjBLRk1wS1NBaFBTQW5lMzBuTzF4dWZTa3BMQ0FuU2xOUFRpY3NJSHRjYmlBZ2MzUnlhVzVuYVdaNU9pQm1kVzVqZEdsdmJpQnpkSEpwYm1kcFpua29hWFFwZTF4dUlDQWdJR2xtS0dsMElEMDlQU0IxYm1SbFptbHVaV1FnZkh3Z2FYTlRlVzFpYjJ3b2FYUXBLWEpsZEhWeWJqc2dMeThnU1VVNElISmxkSFZ5Ym5NZ2MzUnlhVzVuSUc5dUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUhaaGNpQmhjbWR6SUQwZ1cybDBYVnh1SUNBZ0lDQWdMQ0JwSUNBZ0lEMGdNVnh1SUNBZ0lDQWdMQ0J5WlhCc1lXTmxjaXdnSkhKbGNHeGhZMlZ5TzF4dUlDQWdJSGRvYVd4bEtHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQnBLV0Z5WjNNdWNIVnphQ2hoY21kMWJXVnVkSE5iYVNzclhTazdYRzRnSUNBZ2NtVndiR0ZqWlhJZ1BTQmhjbWR6V3pGZE8xeHVJQ0FnSUdsbUtIUjVjR1Z2WmlCeVpYQnNZV05sY2lBOVBTQW5ablZ1WTNScGIyNG5LU1J5WlhCc1lXTmxjaUE5SUhKbGNHeGhZMlZ5TzF4dUlDQWdJR2xtS0NSeVpYQnNZV05sY2lCOGZDQWhhWE5CY25KaGVTaHlaWEJzWVdObGNpa3BjbVZ3YkdGalpYSWdQU0JtZFc1amRHbHZiaWhyWlhrc0lIWmhiSFZsS1h0Y2JpQWdJQ0FnSUdsbUtDUnlaWEJzWVdObGNpbDJZV3gxWlNBOUlDUnlaWEJzWVdObGNpNWpZV3hzS0hSb2FYTXNJR3RsZVN3Z2RtRnNkV1VwTzF4dUlDQWdJQ0FnYVdZb0lXbHpVM2x0WW05c0tIWmhiSFZsS1NseVpYUjFjbTRnZG1Gc2RXVTdYRzRnSUNBZ2ZUdGNiaUFnSUNCaGNtZHpXekZkSUQwZ2NtVndiR0ZqWlhJN1hHNGdJQ0FnY21WMGRYSnVJRjl6ZEhKcGJtZHBabmt1WVhCd2JIa29KRXBUVDA0c0lHRnlaM01wTzF4dUlDQjlYRzU5S1R0Y2JseHVMeThnTVRrdU5DNHpMalFnVTNsdFltOXNMbkJ5YjNSdmRIbHdaVnRBUUhSdlVISnBiV2wwYVhabFhTaG9hVzUwS1Z4dUpGTjViV0p2YkZ0UVVrOVVUMVJaVUVWZFcxUlBYMUJTU1UxSlZFbFdSVjBnZkh3Z2NtVnhkV2x5WlNnbkxpOWZhR2xrWlNjcEtDUlRlVzFpYjJ4YlVGSlBWRTlVV1ZCRlhTd2dWRTlmVUZKSlRVbFVTVlpGTENBa1UzbHRZbTlzVzFCU1QxUlBWRmxRUlYwdWRtRnNkV1ZQWmlrN1hHNHZMeUF4T1M0MExqTXVOU0JUZVcxaWIyd3VjSEp2ZEc5MGVYQmxXMEJBZEc5VGRISnBibWRVWVdkZFhHNXpaWFJVYjFOMGNtbHVaMVJoWnlna1UzbHRZbTlzTENBblUzbHRZbTlzSnlrN1hHNHZMeUF5TUM0eUxqRXVPU0JOWVhSb1cwQkFkRzlUZEhKcGJtZFVZV2RkWEc1elpYUlViMU4wY21sdVoxUmhaeWhOWVhSb0xDQW5UV0YwYUNjc0lIUnlkV1VwTzF4dUx5OGdNalF1TXk0eklFcFRUMDViUUVCMGIxTjBjbWx1WjFSaFoxMWNibk5sZEZSdlUzUnlhVzVuVkdGbktHZHNiMkpoYkM1S1UwOU9MQ0FuU2xOUFRpY3NJSFJ5ZFdVcE8xeHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5amIzSmxMV3B6TDJ4cFluSmhjbmt2Ylc5a2RXeGxjeTlsY3pZdWMzbHRZbTlzTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1EVmNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJaXdpY21WeGRXbHlaU2duTGk5ZmQydHpMV1JsWm1sdVpTY3BLQ2RoYzNsdVkwbDBaWEpoZEc5eUp5azdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek55NXplVzFpYjJ3dVlYTjVibU10YVhSbGNtRjBiM0l1YW5OY2JpOHZJRzF2WkhWc1pTQnBaQ0E5SURFd05seHVMeThnYlc5a2RXeGxJR05vZFc1cmN5QTlJREFnTVNBeUlETWlMQ0p5WlhGMWFYSmxLQ2N1TDE5M2EzTXRaR1ZtYVc1bEp5a29KMjlpYzJWeWRtRmliR1VuS1R0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WTI5eVpTMXFjeTlzYVdKeVlYSjVMMjF2WkhWc1pYTXZaWE0zTG5ONWJXSnZiQzV2WW5ObGNuWmhZbXhsTG1welhHNHZMeUJ0YjJSMWJHVWdhV1FnUFNBeE1EZGNiaTh2SUcxdlpIVnNaU0JqYUhWdWEzTWdQU0F3SURFZ01pQXpJaXdpTHlvcVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGQlVJRWx1YjNaaHc2ZkRvMjhnWlNCVGFYTjBaVzFoY3lCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkpUa1ZUUXkxSlJGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlJWVTlDU1ZNZ1RrVlVWMDlTUzFNZ1UweGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdSbEpCVlU1SVQwWkZVaTFIUlZORlRFeFRRMGhCUmxRZ1dsVlNJRVpQUlZKRVJWSlZUa2NnUkVWU0lFRk9SMFZYUVU1RVZFVk9JRVpQVWxORFNGVk9SeUJGTGxaY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1QxSkJUa2RGSUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFUmxkWFJ6WTJobElGUmxiR1ZyYjIwZ1FVZGNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdRWEJwZW1WbFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGUkZRMGhPU1ZORFNFVWdWVTVKVmtWU1UwbFVRVlFnUWtWU1RFbE9YRzRxWEc0cUlFeHBZMlZ1YzJWa0lIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlNCY0lreHBZMlZ1YzJWY0lpazdYRzRxSUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJVZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM1Y2Jpb2dXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0cVhHNHFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRxWEc0cUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXdnYzI5bWRIZGhjbVZjYmlvZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzRnWENKQlV5QkpVMXdpSUVKQlUwbFRMRnh1S2lCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsa2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM1Y2Jpb2dVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdVZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkZ4dUtpQnNhVzFwZEdGMGFXOXVjeUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlvcUwxeHVMeW9xWEc0Z0tpQlRkWEJ3YjNKMElHMXZaSFZzWlNCM2FYUm9JSE52YldVZ1puVnVZM1JwYjI1eklIZHBiR3dnWW1VZ2RYTmxablZzWEc0Z0tpQkFiVzlrZFd4bElIVjBhV3h6WEc0Z0tpOWNibHh1THlvcVhHNGdLaUJBZEhsd1pXUmxaaUJrYVhacFpHVlZVa3hjYmlBcUlFQjBlWEJsSUU5aWFtVmpkRnh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlIUjVjR1VnVkdobElIUjVjR1VnYjJZZ1ZWSk1YRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ1pHOXRZV2x1SUZSb1pTQmtiMjFoYVc0Z2IyWWdWVkpNWEc0Z0tpQkFjSEp2Y0dWeWRIa2dlM04wY21sdVozMGdhV1JsYm5ScGRIa2dWR2hsSUdsa1pXNTBhWFI1SUc5bUlGVlNURnh1SUNvdlhHNWNiaThxS2x4dUlDb2dSR2wyYVdSbElHRnVJSFZ5YkNCcGJpQjBlWEJsTENCa2IyMWhhVzRnWVc1a0lHbGtaVzUwYVhSNVhHNGdLaUJBY0dGeVlXMGdJSHRWVWt3dVZWSk1mU0IxY213Z0xTQjFjbXdnWVdSa2NtVnpjMXh1SUNvZ1FISmxkSFZ5YmlCN1pHbDJhV1JsVlZKTWZTQjBhR1VnY21WemRXeDBJRzltSUdScGRtbGtaVlZTVEZ4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaR2wyYVdSbFZWSk1LSFZ5YkNrZ2UxeHVYRzRnSUdsbUlDZ2hkWEpzS1NCMGFISnZkeUJGY25KdmNpZ25WVkpNSUdseklHNWxaV1JsWkNCMGJ5QnpjR3hwZENjcE8xeHVYRzVjZEdaMWJtTjBhVzl1SUhKbFkzVnljMlVvZG1Gc2RXVXBJSHRjYmx4MFhIUmpiMjV6ZENCeVpXZGxlQ0E5SUM4b1cyRXRla0V0V2kxZEtpa29PbHhjTDF4Y0x5Zy9PbHhjTGlrL2ZEb3BLRnN0WVMxNlFTMWFNQzA1UURvbExsOWNYQ3QrSXoxZGV6SXNNalUyZlNrb1d5MWhMWHBCTFZvd0xUbEFPaVV1WDF4Y0szNGpQVnhjTDEwcUtTOW5hVHRjYmlBZ0lDQmpiMjV6ZENCemRXSnpkQ0E5SUNja01Td2tNeXdrTkNjN1hHNWNkQ0FnYkdWMElIQmhjblJ6SUQwZ2RtRnNkV1V1Y21Wd2JHRmpaU2h5WldkbGVDd2djM1ZpYzNRcExuTndiR2wwS0Njc0p5azdYRzVjZEZ4MGNtVjBkWEp1SUhCaGNuUnpPMXh1WEhSOVhHNWNibHgwYkdWMElIQmhjblJ6SUQwZ2NtVmpkWEp6WlNoMWNtd3BPMXh1WEc0Z0lDOHZJRWxtSUhSb1pTQjFjbXdnYUdGeklHNXZJSE5qYUdWdFpWeHVJQ0JwWmlBb2NHRnlkSE5iTUYwZ1BUMDlJSFZ5YkNBbUppQWhjR0Z5ZEhOYk1GMHVhVzVqYkhWa1pYTW9KMEFuS1NrZ2UxeHVYRzRnSUNBZ2JHVjBJSEpsYzNWc2RDQTlJSHRjYmlBZ0lDQWdJSFI1Y0dVNklGd2lYQ0lzWEc0Z0lDQWdJQ0JrYjIxaGFXNDZJSFZ5YkN4Y2JpQWdJQ0FnSUdsa1pXNTBhWFI1T2lCY0lsd2lYRzRnSUNBZ2ZUdGNibHh1SUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjF0RWFYWnBaR1ZWVWt4ZElFUnBkbWxrWlZWU1RDQmtiMjVjWENkMElITjFjSEJ2Y25RZ2RYSnNJSGRwZEdodmRYUWdjMk5vWlcxbExpQlFiR1ZoYzJVZ2NtVjJhV1YzSUhsdmRYSWdkWEpzSUdGa1pISmxjM01uTENCMWNtd3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JpQWdmVnh1WEc1Y2RDOHZJR05vWldOcklHbG1JSFJvWlNCMWNtd2dhR0Z6SUhSb1pTQnpZMmhsYldVZ1lXNWtJR2x1WTJ4MVpHVnpJR0Z1SUVCY2JseDBhV1lnS0hCaGNuUnpXekJkSUQwOVBTQjFjbXdnSmlZZ2NHRnlkSE5iTUYwdWFXNWpiSFZrWlhNb0owQW5LU2tnZTF4dVhIUmNkR3hsZENCelkyaGxiV1VnUFNCd1lYSjBjMXN3WFNBOVBUMGdkWEpzSUQ4Z0ozTnRkSEFuSURvZ2NHRnlkSE5iTUYwN1hHNWNkRngwY0dGeWRITWdQU0J5WldOMWNuTmxLSE5qYUdWdFpTQXJJQ2M2THk4bklDc2djR0Z5ZEhOYk1GMHBPMXh1WEhSOVhHNWNibHgwTHk4Z2FXWWdkR2hsSUdSdmJXRnBiaUJwYm1Oc2RXUmxjeUJoYmlCQUxDQmthWFpwWkdVZ2FYUWdkRzhnWkc5dFlXbHVJR0Z1WkNCcFpHVnVkR2wwZVNCeVpYTndaV04wYVhabGJIbGNibHgwYVdZZ0tIQmhjblJ6V3pGZExtbHVZMngxWkdWektDZEFKeWtwSUh0Y2JseDBYSFJ3WVhKMGMxc3lYU0E5SUhCaGNuUnpXekJkSUNzZ0p6b3ZMeWNnS3lCd1lYSjBjMXN4WFR0Y2JseDBYSFJ3WVhKMGMxc3hYU0E5SUhCaGNuUnpXekZkTG5OMVluTjBjaWh3WVhKMGMxc3hYUzVwYm1SbGVFOW1LQ2RBSnlrZ0t5QXhLVnh1SUNBZ0lIMGdYSFF2S21Wc2MyVWdhV1lnS0hCaGNuUnpXekpkTG1sdVkyeDFaR1Z6S0Njdkp5a3BJSHRjYmlBZ0lDQndZWEowYzFzeVhTQTlJSEJoY25Seld6SmRMbk4xWW5OMGNpaHdZWEowYzFzeVhTNXNZWE4wU1c1a1pYaFBaaWduTHljcEt6RXBPMXh1SUNCOUtpOWNibHh1SUNCc1pYUWdjbVZ6ZFd4MElEMGdlMXh1SUNBZ0lIUjVjR1U2SUhCaGNuUnpXekJkTEZ4dUlDQWdJR1J2YldGcGJqb2djR0Z5ZEhOYk1WMHNYRzRnSUNBZ2FXUmxiblJwZEhrNklIQmhjblJ6V3pKZFhHNGdJSDA3WEc1Y2JpQWdjbVYwZFhKdUlISmxjM1ZzZER0Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1JwZG1sa1pVVnRZV2xzS0dWdFlXbHNLU0I3WEc0Z0lHeGxkQ0JwYm1SbGVFOW1RWFFnUFNCbGJXRnBiQzVwYm1SbGVFOW1LQ2RBSnlrN1hHNWNiaUFnYkdWMElISmxjM1ZzZENBOUlIdGNiaUFnSUNCMWMyVnlibUZ0WlRvZ1pXMWhhV3d1YzNWaWMzUnlhVzVuS0RBc0lHbHVaR1Y0VDJaQmRDa3NYRzRnSUNBZ1pHOXRZV2x1T2lCbGJXRnBiQzV6ZFdKemRISnBibWNvYVc1a1pYaFBaa0YwSUNzZ01Td2daVzFoYVd3dWJHVnVaM1JvS1Z4dUlDQjlPMXh1WEc0Z0lISmxkSFZ5YmlCeVpYTjFiSFE3WEc1OVhHNWNiaThxS2x4dUlDb2dRMmhsWTJzZ2FXWWdZVzRnVDJKcVpXTjBJR2x6SUdWdGNIUjVYRzRnS2lCQWNHRnlZVzBnSUh0UFltcGxZM1I5SUc5aWFtVmpkQ0JQWW1wbFkzUWdkRzhnWW1VZ1kyaGxZMnRsWkZ4dUlDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMGdJQ0FnSUNBZ2MzUmhkSFZ6SUc5bUlFOWlhbVZqZEN3Z1pXMXdkSGtnYjNJZ2JtOTBJQ2gwY25WbGZHWmhiSE5sS1R0Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR1Z0Y0hSNVQySnFaV04wS0c5aWFtVmpkQ2tnZTF4dUlDQnlaWFIxY200Z1QySnFaV04wTG10bGVYTW9iMkpxWldOMEtTNXNaVzVuZEdnZ1BpQXdJRDhnWm1Gc2MyVWdPaUIwY25WbE8xeHVmVnh1WEc0dktpcGNiaUFxSUUxaGEyVWdZU0JEVDFCWklHOW1JSFJvWlNCdmNtbG5hVzVoYkNCa1lYUmhYRzRnS2lCQWNHRnlZVzBnSUh0UFltcGxZM1I5SUNCdlltb2dMU0J2WW1wbFkzUWdkRzhnWW1VZ1kyeHZibVZrWEc0Z0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJrWldWd1EyeHZibVVvYjJKcUtTQjdYRzRnSUM4dlZFOUVUem9nYzJsdGNHeGxJR0oxZENCcGJtVm1abWxqYVdWdWRDQktVMDlPSUdSbFpYQWdZMnh2Ym1VdUxpNWNiaUFnYVdZZ0tHOWlhaWtnY21WMGRYSnVJRXBUVDA0dWNHRnljMlVvU2xOUFRpNXpkSEpwYm1kcFpua29iMkpxS1NrN1hHNTlYRzVjYmk4cUtseHVJQ29nVDJKMFlXbHVjeUIwYUdVZ2RYTmxjaUJWVWt3Z2RHaGhkQ0JqYjNKeVpYTndiMjVrY3lCMGJ5QmhJR2RwZG1WdUlHVnRZV2xzWEc0Z0tpQkFjR0Z5WVcwZ0lIdHpkSEpwYm1kOUlIVnpaWEpGYldGcGJDQlVhR1VnZFhObGNpQmxiV0ZwYkZ4dUlDb2dRSEpsZEhWeWJpQjdWVkpNTGxWU1RIMGdkWE5sY2xWU1RDQlVhR1VnZFhObGNpQlZVa3hjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRlZ6WlhKVlVreEdjbTl0UlcxaGFXd29kWE5sY2tWdFlXbHNLU0I3WEc0Z0lHeGxkQ0JwYm1SbGVFOW1RWFFnUFNCMWMyVnlSVzFoYVd3dWFXNWtaWGhQWmlnblFDY3BPMXh1SUNCeVpYUjFjbTRnSjNWelpYSTZMeThuSUNzZ2RYTmxja1Z0WVdsc0xuTjFZbk4wY21sdVp5aHBibVJsZUU5bVFYUWdLeUF4TENCMWMyVnlSVzFoYVd3dWJHVnVaM1JvS1NBcklDY3ZKeUFySUhWelpYSkZiV0ZwYkM1emRXSnpkSEpwYm1jb01Dd2dhVzVrWlhoUFprRjBLVHRjYm4xY2JseHVMeW9xWEc0Z0tpQlBZblJoYVc1eklIUm9aU0IxYzJWeUlHVnRZV2xzSUhSb1lYUWdZMjl5Y21WemNHOXVaSE1nZEc4Z1lTQm5hWFpsYmlCVlVreGNiaUFxSUVCd1lYSmhiU0FnZTFWU1RDNVZVa3g5SUhWelpYSlZVa3dnVkdobElIVnpaWElnVlZKTVhHNGdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlJSFZ6WlhKRmJXRnBiQ0JVYUdVZ2RYTmxjaUJsYldGcGJGeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFZYTmxja1Z0WVdsc1JuSnZiVlZTVENoMWMyVnlWVkpNS1NCN1hHNGdJR3hsZENCMWNtd2dQU0JrYVhacFpHVlZVa3dvZFhObGNsVlNUQ2s3WEc0Z0lISmxkSFZ5YmlCMWNtd3VhV1JsYm5ScGRIa3VjbVZ3YkdGalpTZ25MeWNzSUNjbktTQXJJQ2RBSnlBcklIVnliQzVrYjIxaGFXNDdJQzh2SUdsa1pXNTBhWFI1SUdacFpXeGtJR2hoY3lBbkwyVjRZVzF3YkdWSlJDY2dhVzV6ZEdWaFpDQnZaaUFuWlhoaGJYQnNaVWxFSjF4dWZWeHVYRzVjYmk4cUtseHVJQ29nUTJobFkyc2dhV1lnZEdobElIVnpaWElnYVdSbGJuUnBabWxsY2lCcGN5QmhiSEpsWVdSNUlHbHVJSFJvWlNCVlVrd2dabTl5YldGMExDQnBaaUJ1YjNRc0lHTnZiblpsY25RZ2RHOGdWVkpNSUdadmNtMWhkRnh1SUNvZ1FIQmhjbUZ0SUNCN2MzUnlhVzVuZlNBZ0lHbGtaVzUwYVdacFpYSWdJSFZ6WlhJZ2FXUmxiblJwWm1sbGNseHVJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0FnSUhWelpYSlZVa3dnSUNBZ2RHaGxJSFZ6WlhJZ1ZWSk1YRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCamIyNTJaWEowVkc5VmMyVnlWVkpNS0dsa1pXNTBhV1pwWlhJcElIdGNibHh1SUNBdkx5QmphR1ZqYXlCcFppQjBhR1VnYVdSbGJuUnBabWxsY2lCcGN5QmhiSEpsWVdSNUlHbHVJSFJvWlNCMWNtd2dabTl5YldGMFhHNGdJR2xtSUNocFpHVnVkR2xtYVdWeUxuTjFZbk4wY21sdVp5Z3dMQ0EzS1NBOVBUMGdKM1Z6WlhJNkx5OG5LU0I3WEc0Z0lDQWdiR1YwSUdScGRtbGtaV1JWVWt3Z1BTQmthWFpwWkdWVlVrd29hV1JsYm5ScFptbGxjaWs3WEc1Y2JpQWdJQ0F2TDJOb1pXTnJJR2xtSUhSb1pTQjFjbXdnYVhNZ2QyVnNiQ0JtYjNKdFlYUmxaRnh1SUNBZ0lHbG1JQ2hrYVhacFpHVmtWVkpNTG1SdmJXRnBiaUFtSmlCa2FYWnBaR1ZrVlZKTUxtbGtaVzUwYVhSNUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2FXUmxiblJwWm1sbGNqdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnZEdoeWIzY2dKM1Z6WlhKVlVrd2dkMmwwYUNCM2NtOXVaeUJtYjNKdFlYUW5PMXh1SUNBZ0lIMWNibHh1SUNBdkwybG1JRzV2ZEN3Z1kyOXVkbVZ5ZENCMGFHVWdkWE5sY2lCbGJXRnBiQ0IwYnlCVlVrd2dabTl5YldGMFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkbGRGVnpaWEpWVWt4R2NtOXRSVzFoYVd3b2FXUmxiblJwWm1sbGNpazdYRzRnSUgxY2JuMWNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUwzTnlZeTkxZEdsc2N5OTFkR2xzY3k1cWN5SXNJaThxS2x4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUVZDQkpibTkyWWNPbnc2TnZJR1VnVTJsemRHVnRZWE1nVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1NVNUZVME10U1VSY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VWVlBRa2xUSUU1RlZGZFBVa3RUSUZOTVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFWlNRVlZPU0U5R1JWSXRSMFZUUlV4TVUwTklRVVpVSUZwVlVpQkdUMFZTUkVWU1ZVNUhJRVJGVWlCQlRrZEZWMEZPUkZSRlRpQkdUMUpUUTBoVlRrY2dSUzVXWEc0cUlFTnZjSGx5YVdkb2RDQXlNREUySUU5U1FVNUhSU0JUUVZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCRVpYVjBjMk5vWlNCVVpXeGxhMjl0SUVGSFhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFRndhWHBsWlZ4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCVVJVTklUa2xUUTBoRklGVk9TVlpGVWxOSlZFRlVJRUpGVWt4SlRseHVLbHh1S2lCTWFXTmxibk5sWkNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1VnWENKTWFXTmxibk5sWENJcE8xeHVLaUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1WEc0cUlGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1S2x4dUtpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVLbHh1S2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NJSE52Wm5SM1lYSmxYRzRxSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVJRndpUVZNZ1NWTmNJaUJDUVZOSlV5eGNiaW9nVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WklFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1WEc0cUlGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVJjYmlvZ2JHbHRhWFJoZEdsdmJuTWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRxS2k5Y2JseHVhVzF3YjNKMElFUmhkR0ZQWW1wbFkzUWdabkp2YlNBbkxpOUVZWFJoVDJKcVpXTjBKenRjYm1sdGNHOXlkQ0JFWVhSaFQySnFaV04wUTJocGJHUWdabkp2YlNBbkxpOUVZWFJoVDJKcVpXTjBRMmhwYkdRbk8xeHVYRzVzWlhRZ1JtbHNkR1Z5Vkhsd1pTQTlJSHRCVGxrNklDZGhibmtuTENCVFZFRlNWRG9nSjNOMFlYSjBKeXdnUlZoQlExUTZJQ2RsZUdGamRDZDlPMXh1WEc0dktpcGNiaUFxSUZSb1pTQmpiR0Z6Y3lCeVpYUjFjbTVsWkNCbWNtOXRJSFJvWlNCVGVXNWphR1Z5SUhOMVluTmpjbWxpWlNCallXeHNMbHh1SUNvZ1ZHOGdZbVVnZFhObFpDQmhjeUJoYmlCdlluTmxjblpoZEdsdmJpQndiMmx1ZENCbWNtOXRJR0VnUkdGMFlVOWlhbVZqZEZKbGNHOXlkR1Z5SUdOb1lXNW5aUzVjYmlBcUwxeHVZMnhoYzNNZ1JHRjBZVTlpYW1WamRFOWljMlZ5ZG1WeUlHVjRkR1Z1WkhNZ1JHRjBZVTlpYW1WamRDQXZLaUJwYlhCc1pXMWxiblJ6SUZONWJtTlRkR0YwZFhNZ0tpOGdlMXh1SUNBdktpQndjbWwyWVhSbFhHNGdJRjlqYUdGdVoyVk1hWE4wWlc1bGNqb2dUWE5uVEdsemRHVnVaWEpjYmx4dUlDQXRMUzB0WlhabGJuUWdhR0Z1Wkd4bGNuTXRMUzB0WEc0Z0lGOW1hV3gwWlhKek9pQjdQR1pwYkhSbGNqNDZJSHQwZVhCbE9pQThjM1JoY25Rc0lHVjRZV04wUGl3Z1kyRnNiR0poWTJzNklEeG1kVzVqZEdsdmJqNTlJSDFjYmlBZ0tpOWNibHh1SUNBdktpcGNiaUFnSUNvZ1FHbG5ibTl5WlZ4dUlDQWdLaUJUYUc5MWJHUWdibTkwSUdKbElIVnpaV1FnWkdseVpXTjBiSGtnWW5rZ1NIbHdaWEowYVdWekxpQkpkQ2R6SUdOaGJHeGxaQ0JpZVNCMGFHVWdVM2x1WTJobGNpNXpkV0p6WTNKcFltVWdiV1YwYUc5a1hHNGdJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh6ZVc1amFHVnlMQ0IxY213c0lITmphR1Z0WVN3Z2FXNXBkR2xoYkZOMFlYUjFjeXdnYVc1cGRHbGhiRVJoZEdFc0lHTm9hV3hrY21WdWN5d2dhVzVwZEdsaGJGWmxjbk5wYjI0c0lHMTFkSFZoYkNrZ2UxeHVJQ0FnSUhOMWNHVnlLSE41Ym1Ob1pYSXNJSFZ5YkN3Z2MyTm9aVzFoTENCcGJtbDBhV0ZzVTNSaGRIVnpMQ0JwYm1sMGFXRnNSR0YwWVM1a1lYUmhMQ0JqYUdsc1pISmxibk1zSUcxMWRIVmhiQ2s3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lGOTBhR2x6TGw5MlpYSnphVzl1SUQwZ2FXNXBkR2xoYkZabGNuTnBiMjQ3WEc0Z0lDQWdYM1JvYVhNdVgyWnBiSFJsY25NZ1BTQjdmVHRjYmx4dUlDQWdJRjkwYUdsekxsOXplVzVqVDJKcUxtOWljMlZ5ZG1Vb0tHVjJaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQmZkR2hwY3k1ZmIyNUdhV3gwWlhJb1pYWmxiblFwTzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnTHk5elpYUjFjQ0JqYUdsc1pISmxibk1nWkdGMFlTQm1jbTl0SUhOMVluTmpjbWx3ZEdsdmJseHVJQ0FnSUU5aWFtVmpkQzVyWlhsektHbHVhWFJwWVd4RVlYUmhMbU5vYVd4a2NtVnVjeWt1Wm05eVJXRmphQ2dvWTJocGJHUkpaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJR05vYVd4a1JHRjBZU0E5SUdsdWFYUnBZV3hFWVhSaExtTm9hV3hrY21WdWMxdGphR2xzWkVsa1hUdGNiaUFnSUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYms5aWFtVmpkSE5iWTJocGJHUkpaRjBnUFNCdVpYY2dSR0YwWVU5aWFtVmpkRU5vYVd4a0tGOTBhR2x6TENCamFHbHNaRWxrTENCamFHbHNaRVJoZEdFcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ1gzUm9hWE11WDJGc2JHOWpZWFJsVEdsemRHVnVaWEp6S0NrN1hHNGdJSDFjYmx4dUlDQmZZV3hzYjJOaGRHVk1hWE4wWlc1bGNuTW9LU0I3WEc0Z0lDQWdjM1Z3WlhJdVgyRnNiRzlqWVhSbFRHbHpkR1Z1WlhKektDazdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDlqYUdGdVoyVk1hWE4wWlc1bGNpQTlJRjkwYUdsekxsOWlkWE11WVdSa1RHbHpkR1Z1WlhJb1gzUm9hWE11WDNWeWJDQXJJQ2N2WTJoaGJtZGxjeWNzSUNodGMyY3BJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaHRjMmN1ZEhsd1pTQTlQVDBnSjNWd1pHRjBaU2NwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMFJoZEdGUFltcGxZM1JQWW5ObGNuWmxjaTBuSUNzZ1gzUm9hWE11WDNWeWJDQXJJQ2N0VWtOV09pQW5MQ0J0YzJjcE8xeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlkyaGhibWRsVDJKcVpXTjBLRjkwYUdsekxsOXplVzVqVDJKcUxDQnRjMmNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmlBZ1gzSmxiR1ZoYzJWTWFYTjBaVzVsY25Nb0tTQjdYRzRnSUNBZ2MzVndaWEl1WDNKbGJHVmhjMlZNYVhOMFpXNWxjbk1vS1R0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgyTm9ZVzVuWlV4cGMzUmxibVZ5TG5KbGJXOTJaU2dwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxiR1ZoYzJVZ1lXNWtJR1JsYkdWMFpTQnZZbXBsWTNRZ1pHRjBZVnh1SUNBZ0tpOWNiaUFnWkdWc1pYUmxLQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmZkR2hwY3k1ZmNtVnNaV0Z6WlV4cGMzUmxibVZ5Y3lncE8xeHVJQ0FnSUdSbGJHVjBaU0JmZEdocGN5NWZjM2x1WTJobGNpNWZiMkp6WlhKMlpYSnpXMTkwYUdsekxsOTFjbXhkTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxiR1ZoYzJVZ1lXNWtJR1JsYkdWMFpTQnZZbXBsWTNRZ1pHRjBZVnh1SUNBZ0tpOWNiaUFnZFc1emRXSnpZM0pwWW1Vb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dlJreFBWeTFQVlZRNklIUm9hWE1nYldWemMyRm5aU0IzYVd4c0lHSmxJSE5sYm5RZ2RHOGdkR2hsSUhKMWJuUnBiV1VnYVc1emRHRnVZMlVnYjJZZ1UzbHVZMmhsY2sxaGJtRm5aWElnTFQ0Z1gyOXVURzlqWVd4VmJsTjFZbk5qY21saVpWeHVJQ0FnSUd4bGRDQjFibE4xWW5OamNtbGlaVTF6WnlBOUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUNkMWJuTjFZbk5qY21saVpTY3NJR1p5YjIwNklGOTBhR2x6TGw5dmQyNWxjaXdnZEc4NklGOTBhR2x6TGw5emVXNWphR1Z5TGw5emRXSlZVa3dzWEc0Z0lDQWdJQ0JpYjJSNU9pQjdJSEpsYzI5MWNtTmxPaUJmZEdocGN5NWZkWEpzSUgxY2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaDFibE4xWW5OamNtbGlaVTF6Wnl3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduUkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5TFZWT1UxVkNVME5TU1VKRk9pQW5MQ0J5WlhCc2VTazdYRzRnSUNBZ0lDQnBaaUFvY21Wd2JIa3VZbTlrZVM1amIyUmxJRDA5UFNBeU1EQXBJSHRjYmlBZ0lDQWdJQ0FnWDNSb2FYTXVYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ0lDQWdJQ0FnWkdWc1pYUmxJRjkwYUdsekxsOXplVzVqYUdWeUxsOXZZbk5sY25abGNuTmJYM1JvYVhNdVgzVnliRjA3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU2s3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVm5hWE4wWlhJZ2RHaGxJR05vWVc1blpTQnNhWE4wWlc1bGNuTWdjMlZ1ZENCaWVTQjBhR1VnY21Wd2IzSjBaWEpjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlHWnBiSFJsY2lBdElFWnBiSFJsY2lCMGFHRjBJR2xrWlc1MGFXWnBaWE1nZEdobElHWnBaV3hrSUNoelpYQmhjbUYwWldRZ1pHOTBJSEJoZEdncExpQkJZMk5sY0hSeklDb2dZWFFnZEdobElHVnVaQ0JtYjNJZ1lTQnRiM0psSUhWdWNtVnpkSEpwWTNSbFpDQm1hV3gwWlhKcGJtY3VYRzRnSUNBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI0b1pYWmxiblE2SUUxelowVjJaVzUwS1gwZ1kyRnNiR0poWTJ0Y2JpQWdJQ292WEc0Z0lHOXVRMmhoYm1kbEtHWnBiSFJsY2l3Z1kyRnNiR0poWTJzcElIdGNiaUFnSUNCc1pYUWdhMlY1SUQwZ1ptbHNkR1Z5TzF4dUlDQWdJR3hsZENCbWFXeDBaWEpQWW1vZ1BTQjdYRzRnSUNBZ0lDQjBlWEJsT2lCR2FXeDBaWEpVZVhCbExrVllRVU5VTEZ4dUlDQWdJQ0FnWTJGc2JHSmhZMnM2SUdOaGJHeGlZV05yWEc0Z0lDQWdmVHRjYmx4dUlDQWdJR3hsZENCcFpIZ2dQU0JtYVd4MFpYSXVhVzVrWlhoUFppZ25LaWNwTzF4dUlDQWdJR2xtSUNocFpIZ2dQVDA5SUdacGJIUmxjaTVzWlc1bmRHZ2dMU0F4S1NCN1hHNGdJQ0FnSUNCcFppQW9hV1I0SUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdacGJIUmxjazlpYWk1MGVYQmxJRDBnUm1sc2RHVnlWSGx3WlM1QlRsazdYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQm1hV3gwWlhKUFltb3VkSGx3WlNBOUlFWnBiSFJsY2xSNWNHVXVVMVJCVWxRN1hHNGdJQ0FnSUNBZ0lHdGxlU0E5SUdacGJIUmxjaTV6ZFdKemRISW9NQ3dnWm1sc2RHVnlMbXhsYm1kMGFDQXRJREVwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSFJvYVhNdVgyWnBiSFJsY25OYmEyVjVYU0E5SUdacGJIUmxjazlpYWp0Y2JpQWdmVnh1WEc0Z0lGOXZia1pwYkhSbGNpaGxkbVZ1ZENrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3loZmRHaHBjeTVmWm1sc2RHVnljeWt1Wm05eVJXRmphQ2dvYTJWNUtTQTlQaUI3WEc0Z0lDQWdJQ0JzWlhRZ1ptbHNkR1Z5SUQwZ1gzUm9hWE11WDJacGJIUmxjbk5iYTJWNVhUdGNiaUFnSUNBZ0lHbG1JQ2htYVd4MFpYSXVkSGx3WlNBOVBUMGdSbWxzZEdWeVZIbHdaUzVCVGxrcElIdGNiaUFnSUNBZ0lDQWdMeTl0WVhSamFDQmhibmwwYUdsdVoxeHVJQ0FnSUNBZ0lDQm1hV3gwWlhJdVkyRnNiR0poWTJzb1pYWmxiblFwTzF4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNobWFXeDBaWEl1ZEhsd1pTQTlQVDBnUm1sc2RHVnlWSGx3WlM1VFZFRlNWQ2tnZTF4dUlDQWdJQ0FnSUNBdkwybG1JSE4wWVhKMGN5QjNhWFJvSUdacGJIUmxjaTR1TGx4dUlDQWdJQ0FnSUNCcFppQW9aWFpsYm5RdVptbGxiR1F1YVc1a1pYaFBaaWhyWlhrcElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdabWxzZEdWeUxtTmhiR3hpWVdOcktHVjJaVzUwS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaG1hV3gwWlhJdWRIbHdaU0E5UFQwZ1JtbHNkR1Z5Vkhsd1pTNUZXRUZEVkNrZ2UxeHVJQ0FnSUNBZ0lDQXZMMlY0WVdOMElHMWhkR05vWEc0Z0lDQWdJQ0FnSUdsbUlDaGxkbVZ1ZEM1bWFXVnNaQ0E5UFQwZ2EyVjVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1ptbHNkR1Z5TG1OaGJHeGlZV05yS0dWMlpXNTBLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVSaGRHRlBZbXBsWTNSUFluTmxjblpsY2p0Y2JseHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUF1TDNOeVl5OXplVzVqYUdWeUwwUmhkR0ZQWW1wbFkzUlBZbk5sY25abGNpNXFjeUlzSWk4cUtseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRUZ3YVhwbFpWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh1S2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUtseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1S2x4dUtpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0cUtpOWNibHh1YVcxd2IzSjBJRVJoZEdGUFltcGxZM1FnWm5KdmJTQW5MaTlFWVhSaFQySnFaV04wSnp0Y2JtbHRjRzl5ZENCN0lHUmxaWEJEYkc5dVpTQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekwzVjBhV3h6TG1wekp6dGNibHh1THlvcVhHNGdLaUJVYUdVZ1kyeGhjM01nY21WMGRYSnVaV1FnWm5KdmJTQjBhR1VnVTNsdVkyaGxjaUJqY21WaGRHVWdZMkZzYkM1Y2JpQXFJRlJ2SUdKbElIVnpaV1FnWVhNZ1lTQnlaWEJ2Y25SbGNpQndiMmx1ZEN3Z1kyaGhibWRsY3lCM2FXeHNJR0psSUhOMVltMXBkR1ZrSUhSdklFUmhkR0ZQWW1wbFkzUlBZbk5sY25abGNpQnBibk4wWVc1alpYTXVYRzRnS2k5Y2JtTnNZWE56SUVSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2lCbGVIUmxibVJ6SUVSaGRHRlBZbXBsWTNRZ0x5b2dhVzF3YkdWdFpXNTBjeUJUZVc1alUzUmhkSFZ6SUNvdklIdGNiaUFnTHlvZ2NISnBkbUYwWlZ4dUlDQmZjM1ZpYzJOeWFYQjBhVzl1Y3pvZ1BHaDVjR1Z5ZEhsVmNtdzZJSHNnYzNSaGRIVnpPaUJ6ZEhKcGJtY2dmU0I5UGx4dVhHNGdJQzB0TFMxbGRtVnVkQ0JvWVc1a2JHVnljeTB0TFMxY2JpQWdYMjl1VTNWaWMyTnlhWEIwYVc5dVNHRnVaR3hsY2pvZ0tHVjJaVzUwS1NBOVBpQjJiMmxrWEc0Z0lGOXZibEpsYzNCdmJuTmxTR0Z1Wkd4bGNqb2dLR1YyWlc1MEtTQTlQaUIyYjJsa1hHNGdJRjl2YmxKbFlXUklZVzVrYkdWeU9pQW9aWFpsYm5RcElEMCtJSFp2YVdSY2JpQWdLaTljYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR2xuYm05eVpWeHVJQ0FnS2lCVGFHOTFiR1FnYm05MElHSmxJSFZ6WldRZ1pHbHlaV04wYkhrZ1lua2dTSGx3WlhKMGFXVnpMaUJKZENkeklHTmhiR3hsWkNCaWVTQjBhR1VnVTNsdVkyaGxjaTVqY21WaGRHVWdiV1YwYUc5a1hHNGdJQ0FxTDF4dUlDQmpiMjV6ZEhKMVkzUnZjaWh6ZVc1amFHVnlMQ0IxY213c0lITmphR1Z0WVN3Z2FXNXBkR2xoYkZOMFlYUjFjeXdnYVc1cGRHbGhiRVJoZEdFc0lHTm9hV3hrY21WdWN5a2dlMXh1SUNBZ0lITjFjR1Z5S0hONWJtTm9aWElzSUhWeWJDd2djMk5vWlcxaExDQnBibWwwYVdGc1UzUmhkSFZ6TENCcGJtbDBhV0ZzUkdGMFlTd2dZMmhwYkdSeVpXNXpLVHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1gzUm9hWE11WDNOMVluTmpjbWx3ZEdsdmJuTWdQU0I3ZlR0Y2JseHVJQ0FnSUY5MGFHbHpMbDl6ZVc1alQySnFMbTlpYzJWeWRtVW9LR1YyWlc1MEtTQTlQaUI3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblJHRjBZVTlpYW1WamRGSmxjRzl5ZEdWeUxTY2dLeUIxY213Z0t5QW5MVk5GVGtRNklDY3NJR1YyWlc1MEtUdGNiaUFnSUNBZ0lGOTBhR2x6TGw5dmJrTm9ZVzVuWlNobGRtVnVkQ2s3WEc0Z0lDQWdmU2s3WEc1Y2JpQWdJQ0JmZEdocGN5NWZZV3hzYjJOaGRHVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ2ZWeHVYRzRnSUY5aGJHeHZZMkYwWlV4cGMzUmxibVZ5Y3lncElIdGNiaUFnSUNCemRYQmxjaTVmWVd4c2IyTmhkR1ZNYVhOMFpXNWxjbk1vS1R0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdYM1JvYVhNdVgyOWlhbVZqZEV4cGMzUmxibVZ5SUQwZ1gzUm9hWE11WDJKMWN5NWhaR1JNYVhOMFpXNWxjaWhmZEdocGN5NWZkWEpzTENBb2JYTm5LU0E5UGlCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25SR0YwWVU5aWFtVmpkQzBuSUNzZ1gzUm9hWE11WDNWeWJDQXJJQ2N0VWtOV09pQW5MQ0J0YzJjcE8xeHVJQ0FnSUNBZ2MzZHBkR05vSUNodGMyY3VkSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkeVpYTndiMjV6WlNjNklGOTBhR2x6TGw5dmJsSmxjM0J2Ym5ObEtHMXpaeWs3SUdKeVpXRnJPMXh1SUNBZ0lDQWdJQ0JqWVhObElDZHlaV0ZrSnpvZ1gzUm9hWE11WDI5dVVtVmhaQ2h0YzJjcE95QmljbVZoYXp0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1R0Y2JpQWdmVnh1WEc0Z0lGOXlaV3hsWVhObFRHbHpkR1Z1WlhKektDa2dlMXh1SUNBZ0lITjFjR1Z5TGw5eVpXeGxZWE5sVEdsemRHVnVaWEp6S0NrN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJRjkwYUdsekxsOXZZbXBsWTNSTWFYTjBaVzVsY2k1eVpXMXZkbVVvS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlRaVzVrSUdsdWRtbDBZWFJwYjI1eklDaGpjbVZoZEdVZ2JXVnpjMkZuWlhNcElIUnZJR2g1Y0dWeWRHbGxjeXdnYjJKelpYSjJaWEp6SUd4cGMzUXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UwaDVjR1Z5ZEhsVlVreGJYWDBnYjJKelpYSjJaWEp6SUV4cGMzUWdiMllnU0hsd1pYSjBlU0JWVWt3bmMxeHVJQ0FnS2k5Y2JpQWdhVzUyYVhSbFQySnpaWEoyWlhKektHOWljMlZ5ZG1WeWN5a2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNBdkwwWk1UMWN0VDFWVU9pQjBhR2x6SUcxbGMzTmhaMlVnZDJsc2JDQmlaU0J6Wlc1MElIUnZJSFJvWlNCeWRXNTBhVzFsSUdsdWMzUmhibU5sSUc5bUlGTjVibU5vWlhKTllXNWhaMlZ5SUMwK0lGOXZia055WldGMFpWeHVJQ0FnSUd4bGRDQnBiblpwZEdWTmMyY2dQU0I3WEc0Z0lDQWdJQ0IwZVhCbE9pQW5ZM0psWVhSbEp5d2dabkp2YlRvZ1gzUm9hWE11WDNONWJtTm9aWEl1WDI5M2JtVnlMQ0IwYnpvZ1gzUm9hWE11WDNONWJtTm9aWEl1WDNOMVlsVlNUQ3hjYmlBZ0lDQWdJR0p2WkhrNklIc2djbVZ6ZFcxbE9pQm1ZV3h6WlN3Z2NtVnpiM1Z5WTJVNklGOTBhR2x6TGw5MWNtd3NJSE5qYUdWdFlUb2dYM1JvYVhNdVgzTmphR1Z0WVN3Z2RtRnNkV1U2SUY5MGFHbHpMbDl6ZVc1alQySnFMbVJoZEdFc0lHRjFkR2h2Y21selpUb2diMkp6WlhKMlpYSnpJSDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdYM1JvYVhNdVgySjFjeTV3YjNOMFRXVnpjMkZuWlNocGJuWnBkR1ZOYzJjcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsYkdWaGMyVWdZVzVrSUdSbGJHVjBaU0J2WW1wbFkzUWdaR0YwWVZ4dUlDQWdLaTljYmlBZ1pHVnNaWFJsS0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0F2TDBaTVQxY3RUMVZVT2lCMGFHbHpJRzFsYzNOaFoyVWdkMmxzYkNCaVpTQnpaVzUwSUhSdklIUm9aU0J5ZFc1MGFXMWxJR2x1YzNSaGJtTmxJRzltSUZONWJtTm9aWEpOWVc1aFoyVnlJQzArSUY5dmJrUmxiR1YwWlZ4dUlDQWdJR3hsZENCa1pXeGxkR1ZOYzJjZ1BTQjdYRzRnSUNBZ0lDQjBlWEJsT2lBblpHVnNaWFJsSnl3Z1puSnZiVG9nWDNSb2FYTXVYMjkzYm1WeUxDQjBiem9nWDNSb2FYTXVYM041Ym1Ob1pYSXVYM04xWWxWU1RDeGNiaUFnSUNBZ0lHSnZaSGs2SUhzZ2NtVnpiM1Z5WTJVNklGOTBhR2x6TGw5MWNtd2dmVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0dSbGJHVjBaVTF6Wnl3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduUkdGMFlVOWlhbVZqZEZKbGNHOXlkR1Z5TFVSRlRFVlVSVG9nSnl3Z2NtVndiSGtwTzF4dUlDQWdJQ0FnYVdZZ0tISmxjR3g1TG1KdlpIa3VZMjlrWlNBOVBUMGdNakF3S1NCN1hHNGdJQ0FnSUNBZ0lGOTBhR2x6TGw5eVpXeGxZWE5sVEdsemRHVnVaWEp6S0NrN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCZmRHaHBjeTVmYzNsdVkyaGxjaTVmY21Wd2IzSjBaWEp6VzE5MGFHbHpMbDkxY214ZE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk4xWW5OamNtbHdkR2x2Ym5NZ2NtVnhkV1Z6ZEdWa0lHRnVaQ0JoWTJObGNIUmxaQ0IwYnlCMGFHbHpJSEpsY0c5eWRHVnlYRzRnSUNBcUlFQjBlWEJsSUh0UFltcGxZM1E4U0hsd1pYSjBlVlZTVEN3Z1UzbHVZMU4xWW5OamNtbHdkR2x2Ymo1OVhHNGdJQ0FxTDF4dUlDQm5aWFFnYzNWaWMyTnlhWEIwYVc5dWN5Z3BJSHNnY21WMGRYSnVJSFJvYVhNdVgzTjFZbk5qY21sd2RHbHZibk03SUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWMGRYQWdkR2hsSUdOaGJHeGlZV05ySUhSdklIQnliMk5sYzNNZ2MzVmljMk55YVdKbElHRnVaQ0IxYm5OMVluTmpjbWxpWlNCdWIzUnBabWxqWVhScGIyNXpYRzRnSUNBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI0b1pYWmxiblE2SUUxelowVjJaVzUwS1gwZ1kyRnNiR0poWTJzZ1puVnVZM1JwYjI0Z2RHOGdjbVZqWldsMlpTQmxkbVZ1ZEhOY2JpQWdJQ292WEc0Z0lHOXVVM1ZpYzJOeWFYQjBhVzl1S0dOaGJHeGlZV05yS1NCN1hHNGdJQ0FnZEdocGN5NWZiMjVUZFdKelkzSnBjSFJwYjI1SVlXNWtiR1Z5SUQwZ1kyRnNiR0poWTJzN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMlYwZFhBZ2RHaGxJR05oYkd4aVlXTnJJSFJ2SUhCeWIyTmxjM01nY21WemNHOXVjMlVnYm05MGFXWnBZMkYwYVc5dWN5QnZaaUIwYUdVZ1kzSmxZWFJsSjNOY2JpQWdJQ29nUUhCaGNtRnRJSHRtZFc1amRHbHZiaWhsZG1WdWREb2dUWE5uUlhabGJuUXBmU0JqWVd4c1ltRmpheUJtZFc1amRHbHZiaUIwYnlCeVpXTmxhWFpsSUdWMlpXNTBjMXh1SUNBZ0tpOWNiaUFnYjI1U1pYTndiMjV6WlNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhSb2FYTXVYMjl1VW1WemNHOXVjMlZJWVc1a2JHVnlJRDBnWTJGc2JHSmhZMnM3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1UyVjBkWEFnZEdobElHTmhiR3hpWVdOcklIUnZJSEJ5YjJObGMzTWdjbVZoWkNCdWIzUnBabWxqWVhScGIyNXpYRzRnSUNBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI0b1pYWmxiblE2SUUxelowVjJaVzUwS1gwZ1kyRnNiR0poWTJ0Y2JpQWdJQ292WEc0Z0lHOXVVbVZoWkNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhSb2FYTXVYMjl1VW1WaFpFaGhibVJzWlhJZ1BTQmpZV3hzWW1GamF6dGNiaUFnZlZ4dVhHNGdJQzh2Umt4UFZ5MUpUam9nYldWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElIQmhjbVZ1ZENCVGVXNWphR1Z5SUMwK0lGOXZia1p2Y25kaGNtUmNiaUFnWDI5dVJtOXlkMkZ5WkNodGMyY3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMFJoZEdGUFltcGxZM1JTWlhCdmNuUmxjaTFTUTFZNklDY3NJRzF6WnlrN1hHNGdJQ0FnYzNkcGRHTm9JQ2h0YzJjdVltOWtlUzUwZVhCbEtTQjdYRzRnSUNBZ0lDQmpZWE5sSUNkemRXSnpZM0pwWW1Vbk9pQmZkR2hwY3k1ZmIyNVRkV0p6WTNKcFltVW9iWE5uS1RzZ1luSmxZV3M3WEc0Z0lDQWdJQ0JqWVhObElDZDFibk4xWW5OamNtbGlaU2M2SUY5MGFHbHpMbDl2YmxWdVUzVmljMk55YVdKbEtHMXpaeWs3SUdKeVpXRnJPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2Umt4UFZ5MUpUam9nYldWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElIUm9hWE1nTFQ0Z1gyOXVSbTl5ZDJGeVpEb2daVzFwZEhSbFpDQmllU0JoSUhKbGJXOTBaU0JUZVc1amFHVnlJQzArSUhOMVluTmpjbWxpWlZ4dUlDQmZiMjVUZFdKelkzSnBZbVVvYlhObktTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JzWlhRZ2FIbHdaWEowZVZWeWJDQTlJRzF6Wnk1aWIyUjVMbVp5YjIwN1hHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdEVZWFJoVDJKcVpXTjBVbVZ3YjNKMFpYSXVYMjl1VTNWaWMyTnlhV0psWFNjc0lHMXpaeWs3WEc1Y2JpQWdJQ0JzWlhRZ1pYWmxiblFnUFNCN1hHNGdJQ0FnSUNCMGVYQmxPaUJ0YzJjdVltOWtlUzUwZVhCbExGeHVJQ0FnSUNBZ2RYSnNPaUJvZVhCbGNuUjVWWEpzTEZ4dVhHNGdJQ0FnSUNCcFpHVnVkR2wwZVRvZ2JYTm5MbUp2WkhrdWFXUmxiblJwZEhrc1hHNWNiaUFnSUNBZ0lHRmpZMlZ3ZERvZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBdkwyTnlaV0YwWlNCdVpYY2djM1ZpYzJOeWFYQjBhVzl1WEc0Z0lDQWdJQ0FnSUd4bGRDQnpkV0lnUFNCN0lIVnliRG9nYUhsd1pYSjBlVlZ5YkN3Z2MzUmhkSFZ6T2lBbmIyNG5JSDA3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDl6ZFdKelkzSnBjSFJwYjI1elcyaDVjR1Z5ZEhsVmNteGRJRDBnYzNWaU8xeHVYRzRnSUNBZ0lDQWdJQzh2Y0hKdlkyVnpjeUJoYm1RZ2MyVnVaQ0JqYUdsc1pISmxibk1nWkdGMFlWeHVJQ0FnSUNBZ0lDQnNaWFFnWTJocGJHUnlaVzVXWVd4MVpYTWdQU0I3ZlR0Y2JpQWdJQ0FnSUNBZ1QySnFaV04wTG10bGVYTW9YM1JvYVhNdVgyTm9hV3hrY21WdVQySnFaV04wY3lrdVptOXlSV0ZqYUNnb1kyaHBiR1JKWkNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmphR2xzWkVSaGRHRWdQU0JmZEdocGN5NWZZMmhwYkdSeVpXNVBZbXBsWTNSelcyTm9hV3hrU1dSZExtUmhkR0U3WEc0Z0lDQWdJQ0FnSUNBZ1kyaHBiR1J5Wlc1V1lXeDFaWE5iWTJocGJHUkpaRjBnUFNCa1pXVndRMnh2Ym1Vb1kyaHBiR1JFWVhSaEtUdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJSE5sYm1STmMyY2dQU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2diWE5uTG1aeWIyMHNYRzRnSUNBZ0lDQWdJQ0FnWW05a2VUb2dleUJqYjJSbE9pQXlNREFzSUhOamFHVnRZVG9nWDNSb2FYTXVYM05qYUdWdFlTd2dkbVZ5YzJsdmJqb2dYM1JvYVhNdVgzWmxjbk5wYjI0c0lIWmhiSFZsT2lCN0lHUmhkR0U2SUdSbFpYQkRiRzl1WlNoZmRHaHBjeTVrWVhSaEtTd2dZMmhwYkdSeVpXNXpPaUJqYUdsc1pISmxibFpoYkhWbGN5QjlJSDFjYmlBZ0lDQWdJQ0FnZlR0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYlhObkxtSnZaSGt1YUdGelQzZHVVSEp2Y0dWeWRIa29KMjExZEhWaGJFRjFkR2hsYm5ScFkyRjBhVzl1SnlrZ0ppWWdJVzF6Wnk1aWIyUjVMbTExZEhWaGJFRjFkR2hsYm5ScFkyRjBhVzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjMlZ1WkUxelp5NWliMlI1TG0xMWRIVmhiRUYxZEdobGJuUnBZMkYwYVc5dUlEMGdkR2hwY3k1ZmJYVjBkV0ZzUVhWMGFHVnVkR2xqWVhScGIyNDdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiWFYwZFdGc1FYVjBhR1Z1ZEdsallYUnBiMjRnUFNCdGMyY3VZbTlrZVM1dGRYUjFZV3hCZFhSb1pXNTBhV05oZEdsdmJqdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dmMyVnVaQ0J2YXlCeVpYTndiMjV6WlNCdFpYTnpZV2RsWEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDlpZFhNdWNHOXpkRTFsYzNOaFoyVW9jMlZ1WkUxelp5azdYRzVjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE4xWWp0Y2JpQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lISmxhbVZqZERvZ0tISmxZWE52YmlrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0F2TDNObGJtUWdjbVZxWldOMElISmxjM0J2Ym5ObElHMWxjM05oWjJWY2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEc0Z0lDQWdJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2diWE5uTG1aeWIyMHNYRzRnSUNBZ0lDQWdJQ0FnWW05a2VUb2dleUJqYjJSbE9pQTBNRE1zSUdSbGMyTTZJSEpsWVhOdmJpQjlYRzRnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JwWmlBb1gzUm9hWE11WDI5dVUzVmljMk55YVhCMGFXOXVTR0Z1Wkd4bGNpa2dlMXh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjFOVlFsTkRVa2xRVkVsUFRpMUZWa1ZPVkRvZ0p5d2daWFpsYm5RcE8xeHVJQ0FnSUNBZ1gzUm9hWE11WDI5dVUzVmljMk55YVhCMGFXOXVTR0Z1Wkd4bGNpaGxkbVZ1ZENrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5OUdURTlYTFVsT09pQnRaWE56WVdkbElISmxZMlZwZG1Wa0lHWnliMjBnZEdocGN5QXRQaUJmYjI1R2IzSjNZWEprT2lCbGJXbDBkR1ZrSUdKNUlHRWdjbVZ0YjNSbElFUmhkR0ZQWW1wbFkzUlBZbk5sY25abGNpQXRQaUIxYm5OMVluTmpjbWxpWlZ4dUlDQmZiMjVWYmxOMVluTmpjbWxpWlNodGMyY3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQm9lWEJsY25SNVZYSnNJRDBnYlhObkxtSnZaSGt1Wm5KdmJUdGNibHh1SUNBZ0lHeGxkQ0J6ZFdJZ1BTQmZkR2hwY3k1ZmMzVmljMk55YVhCMGFXOXVjMXRvZVhCbGNuUjVWWEpzWFR0Y2JpQWdJQ0JrWld4bGRHVWdYM1JvYVhNdVgzTjFZbk5qY21sd2RHbHZibk5iYUhsd1pYSjBlVlZ5YkYwN1hHNWNiaUFnSUNCc1pYUWdaWFpsYm5RZ1BTQjdYRzRnSUNBZ0lDQjBlWEJsT2lCdGMyY3VZbTlrZVM1MGVYQmxMRnh1SUNBZ0lDQWdkWEpzT2lCb2VYQmxjblI1VlhKc0xGeHVJQ0FnSUNBZ2IySnFaV04wT2lCemRXSmNiaUFnSUNCOU8xeHVYRzRnSUNBZ2FXWWdLRjkwYUdsekxsOXZibE4xWW5OamNtbHdkR2x2YmtoaGJtUnNaWElwSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZFZUaTFUVlVKVFExSkpVRlJKVDA0dFJWWkZUbFE2SUNjc0lHVjJaVzUwS1R0Y2JpQWdJQ0FnSUY5MGFHbHpMbDl2YmxOMVluTmpjbWx3ZEdsdmJraGhibVJzWlhJb1pYWmxiblFwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dlJreFBWeTFKVGpvZ2JXVnpjMkZuWlNCeVpXTmxhWFpsWkNCbWNtOXRJRkpsY0c5eWRHVnlWVkpNSUdGa1pISmxjM002SUdWdGFYUmxaQ0JpZVNCaElISmxiVzkwWlNCVGVXNWphR1Z5SUMwK0lGOXZibEpsYlc5MFpVTnlaV0YwWlNBdFBpQmxkbVZ1ZEM1aFkydGNiaUFnWDI5dVVtVnpjRzl1YzJVb2JYTm5LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHeGxkQ0JsZG1WdWRDQTlJSHRjYmlBZ0lDQWdJSFI1Y0dVNklHMXpaeTUwZVhCbExGeHVJQ0FnSUNBZ2RYSnNPaUJ0YzJjdVpuSnZiU3hjYmlBZ0lDQWdJR052WkdVNklHMXpaeTVpYjJSNUxtTnZaR1ZjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdhV1lnS0Y5MGFHbHpMbDl2YmxKbGMzQnZibk5sU0dGdVpHeGxjaWtnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxSkZVMUJQVGxORkxVVldSVTVVT2lBbkxDQmxkbVZ1ZENrN1hHNGdJQ0FnSUNCZmRHaHBjeTVmYjI1U1pYTndiMjV6WlVoaGJtUnNaWElvWlhabGJuUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2Umt4UFZ5MUpUam9nYldWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElGSmxjRzl5ZEdWeVZWSk1JR0ZrWkhKbGMzTTZJR1Z0YVhSbFpDQmllU0JoSUhKbGJXOTBaU0JUZVc1amFHVnlJQzArSUhKbFlXUmNiaUFnWDI5dVVtVmhaQ2h0YzJjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElHVjJaVzUwSUQwZ2UxeHVJQ0FnSUNBZ2RIbHdaVG9nYlhObkxuUjVjR1VzWEc0Z0lDQWdJQ0IxY213NklHMXpaeTVtY205dExGeHVYRzRnSUNBZ0lDQmhZMk5sY0hRNklDZ3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEc0Z0lDQWdJQ0FnSUNBZ2FXUTZJRzF6Wnk1cFpDd2dkSGx3WlRvZ0ozSmxjM0J2Ym5ObEp5d2dabkp2YlRvZ2JYTm5MblJ2TENCMGJ6b2diWE5uTG1aeWIyMHNYRzRnSUNBZ0lDQWdJQ0FnWW05a2VUb2dleUJqYjJSbE9pQXlNREFzSUhaaGJIVmxPaUJrWldWd1EyeHZibVVvWDNSb2FYTXVaR0YwWVNrZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUhKbGFtVmpkRG9nS0hKbFlYTnZiaWtnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQmZkR2hwY3k1ZlluVnpMbkJ2YzNSTlpYTnpZV2RsS0h0Y2JpQWdJQ0FnSUNBZ0lDQnBaRG9nYlhObkxtbGtMQ0IwZVhCbE9pQW5jbVZ6Y0c5dWMyVW5MQ0JtY205dE9pQnRjMmN1ZEc4c0lIUnZPaUJ0YzJjdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnSUNCaWIyUjVPaUI3SUdOdlpHVTZJRFF3TVN3Z1pHVnpZem9nY21WaGMyOXVJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdsbUlDaGZkR2hwY3k1ZmIyNVNaV0ZrU0dGdVpHeGxjaWtnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxSkZRVVF0UlZaRlRsUTZJQ2NzSUdWMlpXNTBLVHRjYmlBZ0lDQWdJRjkwYUdsekxsOXZibEpsWVdSSVlXNWtiR1Z5S0dWMlpXNTBLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JFWVhSaFQySnFaV04wVW1Wd2IzSjBaWEk3WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTl6Y21NdmMzbHVZMmhsY2k5RVlYUmhUMkpxWldOMFVtVndiM0owWlhJdWFuTWlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNWNibWx0Y0c5eWRDQlRlVzVqVDJKcVpXTjBMQ0I3UTJoaGJtZGxWSGx3WlN3Z1QySnFaV04wVkhsd1pYMGdabkp2YlNBbkxpOVFjbTk0ZVU5aWFtVmpkQ2M3WEc1cGJYQnZjblFnUkdGMFlVOWlhbVZqZEVOb2FXeGtJR1p5YjIwZ0p5NHZSR0YwWVU5aWFtVmpkRU5vYVd4a0p6dGNibWx0Y0c5eWRDQjdaR1ZsY0VOc2IyNWxmU0JtY205dElDY3VMaTkxZEdsc2N5OTFkR2xzY3k1cWN5YzdYRzVjYmk4cUtseHVJQ29nVFdGcGJpQmxlSFJsYm5OcGIyNGdZMnhoYzNNZ1ptOXlJRzlpYzJWeWRtVnljeUJoYm1RZ2NtVndiM0owWlhKekxDQjNhWFJvSUdOdmJXMXZiaUJ3Y205d1pYSjBhV1Z6SUdGdVpDQnRaWFJvYjJSekxseHVJQ29nUTJocGJHUnlaVzRnYldGdVlXZGxiV1Z1ZENCcGN5QmpiMjF0YjI0Z1ptOXlJRzlpYzJWeWRtVnljeUJoYm1RZ2NtVndiM0owWlhKekxseHVJQ292WEc1amJHRnpjeUJFWVhSaFQySnFaV04wSUh0Y2JpQWdMeW9nY0hKcGRtRjBaVnh1SUNCZmRtVnljMmx2YmpvZ2JuVnRZbVZ5WEc1Y2JpQWdYMjkzYm1WeU9pQkllWEJsY25SNVZWSk1YRzRnSUY5MWNtdzZJRTlpYW1WamRGVlNURnh1SUNCZmMyTm9aVzFoT2lCVFkyaGxiV0ZjYmlBZ1gySjFjem9nVFdsdWFVSjFjMXh1SUNCZmMzUmhkSFZ6T2lCdmJpQjhJSEJoZFhObFpGeHVJQ0JmYzNsdVkwOWlham9nVTNsdVkwUmhkR0ZjYmx4dUlDQmZZMmhwYkdSeVpXNDZJSHNnYVdRNklFUmhkR0ZQWW1wbFkzUkRhR2xzWkNCOVhHNGdJRjlqYUdsc1pISmxia3hwYzNSbGJtVnljem9nVzAxeloweHBjM1JsYm1WeVhWeHVYRzRnSUMwdExTMWxkbVZ1ZENCb1lXNWtiR1Z5Y3kwdExTMWNiaUFnWDI5dVFXUmtRMmhwYkdSSVlXNWtiR1Z5T2lBb1pYWmxiblFwSUQwK0lIWnZhV1JjYmlBZ0tpOWNibHh1SUNBdktpcGNiaUFnSUNvZ1FHbG5ibTl5WlZ4dUlDQWdLaUJUYUc5MWJHUWdibTkwSUdKbElIVnpaV1FnWkdseVpXTjBiSGtnWW5rZ1NIbHdaWEowYVdWekxpQkpkQ2R6SUdOaGJHeGxaQ0JpZVNCMGFHVWdVM2x1WTJobGNpQmpjbVZoZEdVZ2IzSWdjM1ZpYzJOeWFXSmxJRzFsZEdodlpDZHpYRzRnSUNBcUwxeHVJQ0JqYjI1emRISjFZM1J2Y2loemVXNWphR1Z5TENCMWNtd3NJSE5qYUdWdFlTd2dhVzVwZEdsaGJGTjBZWFIxY3l3Z2FXNXBkR2xoYkVSaGRHRXNJR05vYVd4a2NtVnVjeXdnYlhWMGRXRnNJRDBnZEhKMVpTa2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUNCZmRHaHBjeTVmYzNsdVkyaGxjaUE5SUhONWJtTm9aWEk3WEc0Z0lDQWdYM1JvYVhNdVgzVnliQ0E5SUhWeWJEdGNiaUFnSUNCZmRHaHBjeTVmYzJOb1pXMWhJRDBnYzJOb1pXMWhPMXh1SUNBZ0lGOTBhR2x6TGw5emRHRjBkWE1nUFNCcGJtbDBhV0ZzVTNSaGRIVnpPMXh1SUNBZ0lGOTBhR2x6TGw5emVXNWpUMkpxSUQwZ2JtVjNJRk41Ym1OUFltcGxZM1FvYVc1cGRHbGhiRVJoZEdFcE8xeHVJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxibk1nUFNCamFHbHNaSEpsYm5NN1hHNGdJQ0FnWDNSb2FYTXVYMjExZEhWaGJFRjFkR2hsYm5ScFkyRjBhVzl1SUQwZ2JYVjBkV0ZzTzF4dVhHNGdJQ0FnWDNSb2FYTXVYM1psY25OcGIyNGdQU0F3TzF4dUlDQWdJRjkwYUdsekxsOWphR2xzWkVsa0lEMGdNRHRjYmlBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1UFltcGxZM1J6SUQwZ2UzMDdYRzRnSUNBZ1gzUm9hWE11WDJOb2FXeGtjbVZ1VEdsemRHVnVaWEp6SUQwZ1cxMDdYRzVjYmlBZ0lDQmZkR2hwY3k1ZmIzZHVaWElnUFNCemVXNWphR1Z5TGw5dmQyNWxjanRjYmlBZ0lDQmZkR2hwY3k1ZlluVnpJRDBnYzNsdVkyaGxjaTVmWW5Wek8xeHVJQ0I5WEc1Y2JpQWdYMkZzYkc5allYUmxUR2x6ZEdWdVpYSnpLQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnNaWFFnWTJocGJHUkNZWE5sVlZKTUlEMGdYM1JvYVhNdVgzVnliQ0FySUNjdlkyaHBiR1J5Wlc0dkp6dGNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25XMFJoZEdFZ1QySnFaV04wSUMwZ1FXeHNiMk5oZEdWTWFYTjBaVzVsY25OZElDMGdKeXdnWDNSb2FYTXVYMk5vYVd4a2NtVnVjeWs3WEc0Z0lDQWdhV1lnS0Y5MGFHbHpMbDlqYUdsc1pISmxibk1wSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxibk11Wm05eVJXRmphQ2dvWTJocGJHUXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJR05vYVd4a1ZWSk1JRDBnWTJocGJHUkNZWE5sVlZKTUlDc2dZMmhwYkdRN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JzYVhOMFpXNWxjaUE5SUY5MGFHbHpMbDlpZFhNdVlXUmtUR2x6ZEdWdVpYSW9ZMmhwYkdSVlVrd3NJQ2h0YzJjcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBdkwybG5ibTl5WlNCdGMyY2djMlZ1ZENCaWVTQm9hVzF6Wld4bVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0cxelp5NW1jbTl0SUNFOVBTQjBhR2x6TGw5dmQyNWxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjBSaGRHRlBZbXBsWTNRdFEyaHBiR1J5Wlc0dFVrTldPaUFuTENCdGMyY3BPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2MzZHBkR05vSUNodGMyY3VkSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYTmxJQ2RqY21WaGRHVW5PaUJmZEdocGN5NWZiMjVEYUdsc1pFTnlaV0YwWlNodGMyY3BPeUJpY21WaGF6dGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyRnpaU0FuWkdWc1pYUmxKem9nWTI5dWMyOXNaUzVzYjJjb2JYTm5LVHNnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNklGOTBhR2x6TGw5amFHRnVaMlZEYUdsc1pISmxiaWh0YzJjcE95QmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbDlqYUdsc1pISmxia3hwYzNSbGJtVnljeTV3ZFhOb0tHeHBjM1JsYm1WeUtUdGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJRjl5Wld4bFlYTmxUR2x6ZEdWdVpYSnpLQ2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1TWFYTjBaVzVsY25NdVptOXlSV0ZqYUNnb2JHbHpkR1Z1WlhJcElEMCtJSHRjYmlBZ0lDQWdJR3hwYzNSbGJtVnlMbkpsYlc5MlpTZ3BPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdUMkpxWldOMExtdGxlWE1vWDNSb2FYTXVYMk5vYVd4a2NtVnVUMkpxWldOMGN5a3VabTl5UldGamFDZ29hMlY1S1NBOVBpQjdYRzRnSUNBZ0lDQmZkR2hwY3k1ZlkyaHBiR1J5Wlc1UFltcGxZM1J6VzJ0bGVWMHVYM0psYkdWaGMyVk1hWE4wWlc1bGNuTW9LVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCUFltcGxZM1FnVlZKTUlHOW1JSEpsY0c5eWRHVnlJRzl5SUc5aWMyVnlkbVZ5WEc0Z0lDQXFJRUIwZVhCbElIdFBZbXBsWTNSVlVreDlYRzRnSUNBcUwxeHVJQ0JuWlhRZ2RYSnNLQ2tnZXlCeVpYUjFjbTRnZEdocGN5NWZkWEpzT3lCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUU5aWFtVmpkQ0J6WTJobGJXRWdWVkpNSUNoMGFHbHpJR1pwWld4a0lHbHpJRzV2ZENCNVpYUWdjM1JoWW14bExDQmhibVFnYVhNZ2MzVmljMnBsWTNRZ2RHOGdZMmhoYm1kbEtWeHVJQ0FnS2lCQWRIbHdaU0I3VTJOb1pXMWhWVkpNZlZ4dUlDQWdLaTljYmlBZ1oyVjBJSE5qYUdWdFlTZ3BJSHNnY21WMGRYSnVJSFJvYVhNdVgzTmphR1Z0WVRzZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVGRHRjBkWE1nYjJZZ2RHaGxJSEpsY0c5eWRHVnlJRzl5SUc5aWMyVnlkbVZ5SUdOdmJtNWxZM1JwYjI0Z0tIUm9hWE1nWm1sbGJHUWdhWE1nYm05MElIbGxkQ0J6ZEdGaWJHVXNJR0Z1WkNCcGN5QnpkV0p6YW1WamRDQjBieUJqYUdGdVoyVXBYRzRnSUNBcUlFQjBlWEJsSUh0VGRHRjBkWE45SUMwZ1JXNTFiU0J2WmpvZ2IyNGdmQ0J3WVhWelpXUmNiaUFnSUNvdlhHNGdJR2RsZENCemRHRjBkWE1vS1NCN0lISmxkSFZ5YmlCMGFHbHpMbDl6ZEdGMGRYTTdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSR0YwWVNCemRISjFZM1IxY21VZ2RHOGdZbVVnYzNsdVkyaHliMjVwZW1Wa0xseHVJQ0FnS2lCQWRIbHdaU0I3U2xOUFRuMGdMU0JLVTA5T0lITjBjblZqZEhWeVpTQjBhR0YwSUhOb2IzVnNaQ0JtYjJ4c2IzY2dkR2hsSUdSbFptbHVaV1FnYzJOb1pXMWhMQ0JwWmlCaGJua3VYRzRnSUNBcUwxeHVJQ0JuWlhRZ1pHRjBZU2dwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM041Ym1OUFltb3VaR0YwWVRzZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQmJHd2dZM0psWVhSbFpDQmphR2xzWkhKbGJpZHpJSE5wYm1ObElIUm9aU0J6ZFdKelkzSnBjSFJwYjI0c0lHUnZaWE51SjNRZ1kyOXVkR0ZwYmlCaGJHd2dZMmhwYkdSeVpXNG5jeUJ6YVc1alpTQnlaWEJ2Y25SbGNpQmpjbVZoZEdsdmJpNWNiaUFnSUNvZ1FIUjVjR1VnZTA5aWFtVmpkRHhEYUdsc1pFbGtMQ0JFWVhSaFQySnFaV04wUTJocGJHUStmVnh1SUNBZ0tpOWNiaUFnWjJWMElHTm9hV3hrY21WdWN5Z3BJSHNnY21WMGRYSnVJSFJvYVhNdVgyTm9hV3hrY21WdVQySnFaV04wY3pzZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQWFXZHViM0psWEc0Z0lDQXFMMXh1SUNCd1lYVnpaU2dwSUh0Y2JpQWdJQ0F2TDFSUFJFODZJSFJvYVhNZ1ptVmhkSFZ5WlNCdVpXVmtjeUJ0YjNKbElHRnVZV3hwYzJWY2JpQWdJQ0IwYUhKdmR5QW5UbTkwSUdsdGNHeGxiV1Z1ZEdWa0p6dGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYVdkdWIzSmxYRzRnSUNBcUwxeHVJQ0J5WlhOMWJXVW9LU0I3WEc0Z0lDQWdMeTlVVDBSUE9pQjBhR2x6SUdabFlYUjFjbVVnYm1WbFpITWdiVzl5WlNCaGJtRnNhWE5sWEc0Z0lDQWdkR2h5YjNjZ0owNXZkQ0JwYlhCc1pXMWxiblJsWkNjN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR2xuYm05eVpWeHVJQ0FnS2k5Y2JpQWdjM1J2Y0NncElIdGNiaUFnSUNBdkwxUlBSRTg2SUhOb2IzVnNaQ0J5WlcxdmRtVWdkR2hsSUhOMVluTmpjbWx3ZEdsdmJpQmhibVFnYzJWdVpDQnRaWE56WVdkbElIVnVjM1ZpYzJOeWFXSmxQMXh1SUNBZ0lIUm9jbTkzSUNkT2IzUWdhVzF3YkdWdFpXNTBaV1FuTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFTnlaV0YwWlNCaGJtUWdZV1JrSUdFZ1JHRjBZVTlpYW1WamRFTm9hV3hrSUhSdklHRWdZMmhwYkdSeVpXNGdZMjlzYkdWamRHbHZiaTVjYmlBZ0lDb2dRSEJoY21GdElIdFRkSEpwYm1kOUlHTm9hV3hrY21WdUlDMGdRMmhwYkdSeVpXNGdibUZ0WlNCM2FHVnlaU0IwYUdVZ1kyaHBiR1FnYVhNZ1lXUmtaV1F1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdTbE5QVG4wZ2FXNXBkR2xoYkVSaGRHRWdMU0JKYm1sMGFXRnNJR1JoZEdFZ2IyWWdkR2hsSUdOb2FXeGtYRzRnSUNBcUlFQnlaWFIxY200Z2UxQnliMjFwYzJVOFJHRjBZVTlpYW1WamRFTm9hV3hrUG4wZ0xTQlNaWFIxY200Z1VISnZiV2x6WlNCMGJ5QmhJRzVsZHlCRVlYUmhUMkpxWldOMFEyaHBiR1F1WEc0Z0lDQXFMMXh1SUNCaFpHUkRhR2xzWkNoamFHbHNaSEpsYml3Z2FXNXBkR2xoYkVSaGRHRXBJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVYRzRnSUNBZ0x5OWpjbVZoZEdVZ2JtVjNJR05vYVd4a0lIVnVhWEYxWlNCSlJDd2dZbUZ6WldRZ2IyNGdhSGx3WlhKMGVWVlNURnh1SUNBZ0lGOTBhR2x6TGw5amFHbHNaRWxrS3lzN1hHNGdJQ0FnYkdWMElHMXpaME5vYVd4a1NXUWdQU0JmZEdocGN5NWZiM2R1WlhJZ0t5QW5JeWNnS3lCZmRHaHBjeTVmWTJocGJHUkpaRHRjYmlBZ0lDQnNaWFFnYlhOblEyaHBiR1JRWVhSb0lEMGdYM1JvYVhNdVgzVnliQ0FySUNjdlkyaHBiR1J5Wlc0dkp5QXJJR05vYVd4a2NtVnVPMXh1WEc0Z0lDQWdMeTlHVEU5WExVOVZWRG9nZEdocGN5QnRaWE56WVdkbElIZHBiR3dnWW1VZ2MyVnVkQ0JrYVhKbFkzUnNlU0IwYnlCaElISmxjMjkxY21ObElHTm9hV3hrSUdGa1pISmxjM002SUUxbGMzTmhaMlZDZFhOY2JpQWdJQ0JzWlhRZ2NtVnhkV1Z6ZEUxelp5QTlJSHRjYmlBZ0lDQWdJSFI1Y0dVNklDZGpjbVZoZEdVbkxDQm1jbTl0T2lCZmRHaHBjeTVmYjNkdVpYSXNJSFJ2T2lCdGMyZERhR2xzWkZCaGRHZ3NYRzRnSUNBZ0lDQmliMlI1T2lCN0lISmxjMjkxY21ObE9pQnRjMmREYUdsc1pFbGtMQ0IyWVd4MVpUb2dhVzVwZEdsaGJFUmhkR0VnZlZ4dUlDQWdJSDA3WEc0Z0lDQWdhV1lnS0NGZmRHaHBjeTVmYlhWMGRXRnNRWFYwYUdWdWRHbGpZWFJwYjI0cElISmxjWFZsYzNSTmMyY3VZbTlrZVM1dGRYUjFZV3hCZFhSb1pXNTBhV05oZEdsdmJpQTlJRjkwYUdsekxsOXRkWFIxWVd4QmRYUm9aVzUwYVdOaGRHbHZianRjYmx4dUlDQWdJQzh2Y21WMGRYSnVjeUJ3Y205dGFYTmxMQ0JwYmlCMGFHVWdablYwZFhKbExDQjBhR1VnUVZCSklHMWhlU0JqYUdGdVoyVWdkRzhnWVhONWJtTm9jbTl1YjNWeklHTmhiR3hjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRkJ5YjIxcGMyVW9LSEpsYzI5c2RtVXBJRDArSUh0Y2JpQWdJQ0FnSUd4bGRDQnRjMmRKWkNBOUlGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvY21WeGRXVnpkRTF6WnlrN1hHNWNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RqY21WaGRHVXRjbVZ3YjNKMFpYSXRZMmhwYkdRb0lDY2dLeUJmZEdocGN5NWZiM2R1WlhJZ0t5QW5JQ2s2SUNjc0lISmxjWFZsYzNSTmMyY3BPMXh1SUNBZ0lDQWdiR1YwSUc1bGQwTm9hV3hrSUQwZ2JtVjNJRVJoZEdGUFltcGxZM1JEYUdsc1pDaGZkR2hwY3l3Z2JYTm5RMmhwYkdSSlpDd2dhVzVwZEdsaGJFUmhkR0VzSUY5MGFHbHpMbDl2ZDI1bGNpd2diWE5uU1dRcE8xeHVJQ0FnSUNBZ2JtVjNRMmhwYkdRdWIyNURhR0Z1WjJVb0tHVjJaVzUwS1NBOVBpQjdYRzRnSUNBZ0lDQWdJRjkwYUdsekxsOXZia05vWVc1blpTaGxkbVZ1ZEN3Z2V5QndZWFJvT2lCdGMyZERhR2xzWkZCaGRHZ3NJR05vYVd4a1NXUTZJRzF6WjBOb2FXeGtTV1FnZlNrN1hHNGdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdYM1JvYVhNdVgyTm9hV3hrY21WdVQySnFaV04wYzF0dGMyZERhR2xzWkVsa1hTQTlJRzVsZDBOb2FXeGtPMXh1WEc0Z0lDQWdJQ0J5WlhOdmJIWmxLRzVsZDBOb2FXeGtLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVFpYUjFjQ0IwYUdVZ1kyRnNiR0poWTJzZ2RHOGdjSEp2WTJWemN5QmpjbVZoZEdVZ1lXNWtJR1JsYkdWMFpTQnZaaUJqYUdsc1pISmxibk11WEc0Z0lDQXFJRUJ3WVhKaGJTQjdablZ1WTNScGIyNG9aWFpsYm5RNklFMXpaMFYyWlc1MEtYMGdZMkZzYkdKaFkydGNiaUFnSUNvdlhHNGdJRzl1UVdSa1EyaHBiR1FvWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0IwYUdsekxsOXZia0ZrWkVOb2FXeGtjbVZ1U0dGdVpHeGxjaUE5SUdOaGJHeGlZV05yTzF4dUlDQjlYRzVjYmlBZ0x5OUdURTlYTFVsT09pQnRaWE56WVdkbElISmxZMlZwZG1Wa0lHWnliMjBnWVNCeVpXMXZkR1VnUkdGMFlVOWlhbVZqZENBdFBpQmhaR1JEYUdsc1pGeHVJQ0JmYjI1RGFHbHNaRU55WldGMFpTaHRjMmNwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0J0YzJkRGFHbHNaRWxrSUQwZ2JYTm5MbUp2WkhrdWNtVnpiM1Z5WTJVN1hHNWNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25ZM0psWVhSbExXOWljMlZ5ZG1WeUxXTm9hV3hrS0NBbklDc2dYM1JvYVhNdVgyOTNibVZ5SUNzZ0p5QXBPaUFuTENCdGMyY3BPMXh1SUNBZ0lHeGxkQ0J1WlhkRGFHbHNaQ0E5SUc1bGR5QkVZWFJoVDJKcVpXTjBRMmhwYkdRb1gzUm9hWE1zSUcxelowTm9hV3hrU1dRc0lHMXpaeTVpYjJSNUxuWmhiSFZsS1R0Y2JpQWdJQ0JmZEdocGN5NWZZMmhwYkdSeVpXNVBZbXBsWTNSelcyMXpaME5vYVd4a1NXUmRJRDBnYm1WM1EyaHBiR1E3WEc1Y2JpQWdJQ0J6WlhSVWFXMWxiM1YwS0NncElEMCtJSHRjYmlBZ0lDQWdJQzh2Umt4UFZ5MVBWVlE2SUhkcGJHd2dabXh2ZHlCMGJ5QkVZWFJoVDJKcVpXTjBRMmhwYkdRZ0xUNGdYMjl1VW1WemNHOXVjMlZjYmlBZ0lDQWdJRjkwYUdsekxsOWlkWE11Y0c5emRFMWxjM05oWjJVb2UxeHVJQ0FnSUNBZ0lDQnBaRG9nYlhObkxtbGtMQ0IwZVhCbE9pQW5jbVZ6Y0c5dWMyVW5MQ0JtY205dE9pQnRjMmN1ZEc4c0lIUnZPaUJ0YzJjdVpuSnZiU3hjYmlBZ0lDQWdJQ0FnWW05a2VUb2dleUJqYjJSbE9pQXlNREFzSUhOdmRYSmpaVG9nWDNSb2FYTXVYMjkzYm1WeUlIMWNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdiR1YwSUdWMlpXNTBJRDBnZTF4dUlDQWdJQ0FnZEhsd1pUb2diWE5uTG5SNWNHVXNYRzRnSUNBZ0lDQm1jbTl0T2lCdGMyY3Vabkp2YlN4Y2JpQWdJQ0FnSUhWeWJEb2diWE5uTG5SdkxGeHVJQ0FnSUNBZ2RtRnNkV1U2SUcxelp5NWliMlI1TG5aaGJIVmxMRnh1SUNBZ0lDQWdZMmhwYkdSSlpEb2diWE5uUTJocGJHUkpaQ3hjYmlBZ0lDQWdJR2xrWlc1MGFYUjVPaUJ0YzJjdVltOWtlUzVwWkdWdWRHbDBlVnh1SUNBZ0lIMDdYRzVjYmlBZ0lDQnBaaUFvWDNSb2FYTXVYMjl1UVdSa1EyaHBiR1J5Wlc1SVlXNWtiR1Z5S1NCN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25RVVJFTFVOSVNVeEVVa1ZPTFVWV1JVNVVPaUFuTENCbGRtVnVkQ2s3WEc0Z0lDQWdJQ0JmZEdocGN5NWZiMjVCWkdSRGFHbHNaSEpsYmtoaGJtUnNaWElvWlhabGJuUXBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJQzh2YzJWdVpDQmtaV3gwWVNCdFpYTnpZV2RsY3lCMGJ5QnpkV0p6WTNKcGNIUnBiMjV6WEc0Z0lGOXZia05vWVc1blpTaGxkbVZ1ZEN3Z1kyaHBiR1JKYm1adktTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUY5MGFHbHpMbDkyWlhKemFXOXVLeXM3WEc1Y2JpQWdJQ0JwWmlBb1gzUm9hWE11WDNOMFlYUjFjeUE5UFQwZ0oyOXVKeWtnZTF4dUlDQWdJQ0FnTHk5R1RFOVhMVTlWVkRvZ2RHaHBjeUJ0WlhOellXZGxJSGRwYkd3Z1ltVWdjMlZ1ZENCa2FYSmxZM1JzZVNCMGJ5QmhJSEpsYzI5MWNtTmxJR05vWVc1blpYTWdZV1JrY21WemN6b2dUV1Z6YzJGblpVSjFjMXh1SUNBZ0lDQWdiR1YwSUdOb1lXNW5aVTF6WnlBOUlIdGNiaUFnSUNBZ0lDQWdkSGx3WlRvZ0ozVndaR0YwWlNjc0lHWnliMjA2SUY5MGFHbHpMbDkxY213c0lIUnZPaUJmZEdocGN5NWZkWEpzSUNzZ0p5OWphR0Z1WjJWekp5eGNiaUFnSUNBZ0lDQWdZbTlrZVRvZ2V5QjJaWEp6YVc5dU9pQmZkR2hwY3k1ZmRtVnljMmx2Yml3Z2MyOTFjbU5sT2lCZmRHaHBjeTVmYjNkdVpYSXNJR0YwZEhKcFluVjBaVG9nWlhabGJuUXVabWxsYkdRZ2ZWeHVJQ0FnSUNBZ2ZUdGNibHh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0RVlYUmhUMkpxWldOMElDMGdYMjl1UTJoaGJtZGxYU0F0SUNjc0lHVjJaVzUwTENCamFHbHNaRWx1Wm04c0lHTm9ZVzVuWlUxelp5azdYRzVjYmlBZ0lDQWdJR2xtSUNobGRtVnVkQzV2Vkhsd1pTQTlQVDBnVDJKcVpXTjBWSGx3WlM1UFFrcEZRMVFwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1YyWlc1MExtTlVlWEJsSUNFOVBTQkRhR0Z1WjJWVWVYQmxMbEpGVFU5V1JTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOb1lXNW5aVTF6Wnk1aWIyUjVMblpoYkhWbElEMGdaWFpsYm5RdVpHRjBZVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnWTJoaGJtZGxUWE5uTG1KdlpIa3VZWFIwY21saWRYUmxWSGx3WlNBOUlHVjJaVzUwTG05VWVYQmxPMXh1SUNBZ0lDQWdJQ0JqYUdGdVoyVk5jMmN1WW05a2VTNTJZV3gxWlNBOUlHVjJaVzUwTG1SaGRHRTdYRzRnSUNBZ0lDQWdJR2xtSUNobGRtVnVkQzVqVkhsd1pTQWhQVDBnUTJoaGJtZGxWSGx3WlM1VlVFUkJWRVVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmphR0Z1WjJWTmMyY3VZbTlrZVM1dmNHVnlZWFJwYjI0Z1BTQmxkbVZ1ZEM1alZIbHdaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkwyTm9hV3hrU1c1bWJ5QnRkWE4wSUdoaGRtVWdLSEJoZEdnc0lHTm9hV3hrU1dRcFhHNGdJQ0FnSUNCcFppQW9ZMmhwYkdSSmJtWnZLU0I3WEc0Z0lDQWdJQ0FnSUdOb1lXNW5aVTF6Wnk1MGJ5QTlJR05vYVd4a1NXNW1ieTV3WVhSb08xeHVJQ0FnSUNBZ0lDQmphR0Z1WjJWTmMyY3VZbTlrZVM1eVpYTnZkWEpqWlNBOUlHTm9hV3hrU1c1bWJ5NWphR2xzWkVsa08xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1hHNGdJQ0FnSUNCcFppQW9JVjkwYUdsekxsOXRkWFIxWVd4QmRYUm9aVzUwYVdOaGRHbHZiaWtnWTJoaGJtZGxUWE5uTG1KdlpIa3ViWFYwZFdGc1FYVjBhR1Z1ZEdsallYUnBiMjRnUFNCZmRHaHBjeTVmYlhWMGRXRnNRWFYwYUdWdWRHbGpZWFJwYjI0N1hHNWNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvWTJoaGJtZGxUWE5uS1R0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdkwwWk1UMWN0U1U0NklHUmxiSFJoSUcxbGMzTmhaMlVnY21WalpXbDJaV1FnWm5KdmJTQmhJSEpsYlc5MFpTQkVZWFJoVDJKcVpXTjBVbVZ3YjNKMFpYSWdiM0lnUkdGMFlVOWlhbVZqZEVOb2FXeGtJSGRvWlc0Z1kyaGhibWRwYm1jZ1pHRjBZVnh1SUNCZlkyaGhibWRsVDJKcVpXTjBLSE41Ym1OUFltb3NJRzF6WnlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0F2TDFSUFJFODZJSFZ3WkdGMFpTQjJaWEp6YVc5dUlEOWNiaUFnSUNBdkwyaHZkeUIwYnlCb1lXNWtiR1VnWVc0Z2FXNWpiM0p5WldOMElIWmxjbk5wYjI0Z1B5QkZlR0Z0Y0d4bE9pQnlaV05sYVhabElHRWdkbVZ5YzJsdmJpQXpJSGRvWlc0Z2RHaGxJRzlpYzJWeWRtVnlJR2x6SUdsdUlIWmxjbk5wYjI0Z01Td2dkMmhsY21VZ2FYTWdkR2hsSUhabGNuTnBiMjRnTWlBL1hHNGdJQ0FnTHk5M2FXeHNJSGRsSUc1bFpXUWdkRzhnWTI5dVptbHliU0IwYUdVZ2NtVmpaWEIwYVc5dUlEOWNiaUFnSUNCcFppQW9YM1JvYVhNdVgzWmxjbk5wYjI0Z0t5QXhJRDA5UFNCdGMyY3VZbTlrZVM1MlpYSnphVzl1S1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmZG1WeWMybHZiaXNyTzF4dUlDQWdJQ0FnYkdWMElIQmhkR2dnUFNCdGMyY3VZbTlrZVM1aGRIUnlhV0oxZEdVN1hHNGdJQ0FnSUNCc1pYUWdkbUZzZFdVZ1BTQmtaV1Z3UTJ4dmJtVW9iWE5uTG1KdlpIa3VkbUZzZFdVcE8xeHVJQ0FnSUNBZ2JHVjBJR1pwYm1SU1pYTjFiSFFnUFNCemVXNWpUMkpxTG1acGJtUkNaV1p2Y21Vb2NHRjBhQ2s3WEc1Y2JpQWdJQ0FnSUdsbUlDaHRjMmN1WW05a2VTNWhkSFJ5YVdKMWRHVlVlWEJsSUQwOVBTQlBZbXBsWTNSVWVYQmxMa0ZTVWtGWktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNodGMyY3VZbTlrZVM1dmNHVnlZWFJwYjI0Z1BUMDlJRU5vWVc1blpWUjVjR1V1UVVSRUtTQjdYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHRnljaUE5SUdacGJtUlNaWE4xYkhRdWIySnFPMXh1SUNBZ0lDQWdJQ0FnSUd4bGRDQnBibVJsZUNBOUlHWnBibVJTWlhOMWJIUXViR0Z6ZER0Y2JpQWdJQ0FnSUNBZ0lDQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWMzQnNhV05sTG1Gd2NHeDVLR0Z5Y2l3Z1cybHVaR1Y0TENBd1hTNWpiMjVqWVhRb2RtRnNkV1VwS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHRjMmN1WW05a2VTNXZjR1Z5WVhScGIyNGdQVDA5SUVOb1lXNW5aVlI1Y0dVdVVrVk5UMVpGS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdGeWNpQTlJR1pwYm1SU1pYTjFiSFF1YjJKcU8xeHVJQ0FnSUNBZ0lDQWdJR3hsZENCcGJtUmxlQ0E5SUdacGJtUlNaWE4xYkhRdWJHRnpkRHRjYmlBZ0lDQWdJQ0FnSUNCaGNuSXVjM0JzYVdObEtHbHVaR1Y0TENCMllXeDFaU2s3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ1ptbHVaRkpsYzNWc2RDNXZZbXBiWm1sdVpGSmxjM1ZzZEM1c1lYTjBYU0E5SUhaaGJIVmxPeUF2THlCVlVFUkJWRVZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHMXpaeTVpYjJSNUxuWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdabWx1WkZKbGMzVnNkQzV2WW1wYlptbHVaRkpsYzNWc2RDNXNZWE4wWFNBOUlIWmhiSFZsT3lBdkx5QlZVRVJCVkVVZ2IzSWdRVVJFWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUdacGJtUlNaWE4xYkhRdWIySnFXMlpwYm1SU1pYTjFiSFF1YkdGemRGMDdJQzh2SUZKRlRVOVdSVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDOHZWRTlFVHpvZ2FHOTNJSFJ2SUdoaGJtUnNaU0IxYm5ONWJtTm9jbTl1YVhwbFpDQjJaWEp6YVc5dWN6OWNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RWVGxOWlRrTklVazlPU1ZwRlJDQldSVkpUU1U5T09pQW9aR0YwWVNBOVBpQW5JQ3NnWDNSb2FYTXVYM1psY25OcGIyNGdLeUFuTENCdGMyY2dQVDRnSnlBcklHMXpaeTVpYjJSNUxuWmxjbk5wYjI0Z0t5QW5LU2NwTzF4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dlJreFBWeTFKVGpvZ2JXVnpjMkZuWlNCeVpXTmxhWFpsWkNCbWNtOXRJR0VnY21WdGIzUmxJRVJoZEdGUFltcGxZM1JEYUdsc1pDQjNhR1Z1SUdOb1lXNW5hVzVuSUdSaGRHRmNiaUFnWDJOb1lXNW5aVU5vYVd4a2NtVnVLRzF6WnlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjBOb1lXNW5aU0JqYUdsc1pISmxiam9nSnl3Z1gzUm9hWE11WDI5M2JtVnlMQ0J0YzJjcE8xeHVYRzRnSUNBZ2JHVjBJR05vYVd4a1NXUWdQU0J0YzJjdVltOWtlUzV5WlhOdmRYSmpaVHRjYmlBZ0lDQnNaWFFnWTJocGJHUnlaVzRnUFNCZmRHaHBjeTVmWTJocGJHUnlaVzVQWW1wbFkzUnpXMk5vYVd4a1NXUmRPMXh1WEc0Z0lDQWdhV1lnS0dOb2FXeGtjbVZ1S1NCN1hHNGdJQ0FnSUNCZmRHaHBjeTVmWTJoaGJtZGxUMkpxWldOMEtHTm9hV3hrY21WdUxsOXplVzVqVDJKcUxDQnRjMmNwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVG04Z1kyaHBiR1J5Wlc0Z1ptOTFibVFnWm05eU9pQW5MQ0JqYUdsc1pFbGtLVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JFWVhSaFQySnFaV04wTzF4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YzNKakwzTjVibU5vWlhJdlJHRjBZVTlpYW1WamRDNXFjeUlzSWk4cUtseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRUZ3YVhwbFpWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh1S2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUtseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1S2x4dUtpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0cUtpOWNibHh1YVcxd2IzSjBJRk41Ym1OUFltcGxZM1FnWm5KdmJTQW5MaTlRY205NGVVOWlhbVZqZENjN1hHNWNiaThxS2x4dUlDb2dWR2hsSUdOc1lYTnpJSEpsZEhWeWJtVmtJR1p5YjIwZ2RHaGxJRVJoZEdGUFltcGxZM1FnWVdSa1EyaHBiR1J5Wlc0Z1kyRnNiQ0J2Y2lCbWNtOXRJRzl1UVdSa1EyaHBiR1J5Wlc0Z2FXWWdjbVZ0YjNSbGJIa2dZM0psWVhSbFpDNWNiaUFxSUVOb2FXeGtjbVZ1SUc5aWFtVmpkQ0J6ZVc1amFISnZibWw2WVhScGIyNGdhWE1nWVNCaElHWmhjM1FnWm05eWQyRnlaQ0J0WldOb1lXNXBjMjBzSUc1dklHNWxaV1FnWm05eUlHUnBjbVZqZENCemRXSnpZM0pwY0hScGIyNXpMQ0JwZENCMWMyVnpJSFJvWlNCaGJISmxZV1I1SUdGMWRHaHZjbWw2WldRZ2MzVmljMk55YVhCMGFXOXVJR1p5YjIwZ2RHaGxJSEJoY21WdWRDQkVZWFJoVDJKcVpXTjBMbHh1SUNvdlhHNWpiR0Z6Y3lCRVlYUmhUMkpxWldOMFEyaHBiR1FnTHlvZ2FXMXdiR1Z0Wlc1MGN5QlRlVzVqVTNSaGRIVnpJQ292SUh0Y2JpQWdMeW9nY0hKcGRtRjBaVnh1WEc0Z0lDMHRMUzFsZG1WdWRDQm9ZVzVrYkdWeWN5MHRMUzFjYmlBZ1gyOXVVbVZ6Y0c5dWMyVklZVzVrYkdWeU9pQW9aWFpsYm5RcElEMCtJSFp2YVdSY2JpQWdLaTljYmx4dUlDQXZLaXBjYmlBZ0lDb2dRR2xuYm05eVpWeHVJQ0FnS2lCVGFHOTFiR1FnYm05MElHSmxJSFZ6WldRZ1pHbHlaV04wYkhrZ1lua2dTSGx3WlhKMGFXVnpMaUJKZENkeklHTmhiR3hsWkNCaWVTQjBhR1VnUkdGMFlVOWlhbVZqZEM1aFpHUkRhR2xzWkhKbGJseHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY0dGeVpXNTBMQ0JqYUdsc1pFbGtMQ0JwYm1sMGFXRnNSR0YwWVN3Z2IzZHVaWElzSUcxelowbGtLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lGOTBhR2x6TGw5d1lYSmxiblFnUFNCd1lYSmxiblE3WEc0Z0lDQWdYM1JvYVhNdVgyTm9hV3hrU1dRZ1BTQmphR2xzWkVsa08xeHVJQ0FnSUY5MGFHbHpMbDl2ZDI1bGNpQTlJRzkzYm1WeU8xeHVJQ0FnSUY5MGFHbHpMbDl0YzJkSlpDQTlJRzF6WjBsa08xeHVYRzRnSUNBZ1gzUm9hWE11WDNONWJtTlBZbW9nUFNCdVpYY2dVM2x1WTA5aWFtVmpkQ2hwYm1sMGFXRnNSR0YwWVNrN1hHNWNiaUFnSUNCZmRHaHBjeTVmWW5WeklEMGdjR0Z5Wlc1MExsOWlkWE03WEc0Z0lDQWdYM1JvYVhNdVgyRnNiRzlqWVhSbFRHbHpkR1Z1WlhKektDazdYRzRnSUgxY2JseHVJQ0JmWVd4c2IyTmhkR1ZNYVhOMFpXNWxjbk1vS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJQzh2ZEdocGN5QnBjeUJ2Ym14NUlHNWxaV1JsWkNCbWIzSWdZMmhwYkdSeVpXNGdjbVZ3YjNKMFpYSnpYRzRnSUNBZ2FXWWdLRjkwYUdsekxsOXZkMjVsY2lrZ2UxeHVJQ0FnSUNBZ1gzUm9hWE11WDJ4cGMzUmxibVZ5SUQwZ1gzUm9hWE11WDJKMWN5NWhaR1JNYVhOMFpXNWxjaWhmZEdocGN5NWZiM2R1WlhJc0lDaHRjMmNwSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0cxelp5NTBlWEJsSUQwOVBTQW5jbVZ6Y0c5dWMyVW5JQ1ltSUcxelp5NXBaQ0E5UFQwZ1gzUm9hWE11WDIxelowbGtLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMFJoZEdGUFltcGxZM1JEYUdsc1pDNXZibEpsYzNCdmJuTmxPaWNzSUcxelp5azdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMjl1VW1WemNHOXVjMlVvYlhObktUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWDNKbGJHVmhjMlZNYVhOMFpXNWxjbk1vS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR2xtSUNoZmRHaHBjeTVmYkdsemRHVnVaWElwSUh0Y2JpQWdJQ0FnSUY5MGFHbHpMbDlzYVhOMFpXNWxjaTV5WlcxdmRtVW9LVHRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1Wc1pXRnpaU0JoYm1RZ1pHVnNaWFJsSUc5aWFtVmpkQ0JrWVhSaFhHNGdJQ0FxTDF4dUlDQmtaV3hsZEdVb0tTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUdSbGJHVjBaU0JmZEdocGN5NWZjR0Z5Wlc1MExsOWphR2xzWkhKbGJsdGZkR2hwY3k1ZlkyaHBiR1JKWkYwN1hHNWNiaUFnSUNCZmRHaHBjeTVmY21Wc1pXRnpaVXhwYzNSbGJtVnljeWdwTzF4dVhHNGdJQ0FnTHk5VVQwUlBPaUJ6Wlc1a0lHUmxiR1YwWlNCdFpYTnpZV2RsSUQ5Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkRhR2xzWkhKbGJpQkpSQ0JuWlc1bGNtRjBaV1FnYjI0Z1lXUmtRMmhwYkdSeVpXNHVJRlZ1YVhGMVpTQnBaR1Z1ZEdsbWFXVnlYRzRnSUNBcUlFQjBlWEJsSUh0VlVreDlJQzBnVlZKTUlHOW1JSFJvWlNCbWIzSnRZWFFnUEVoNWNHVnlkSGxWVWt3K0l6eHVkVzFsY21sakxYTmxjWFZsYm1ObFBseHVJQ0FnS2k5Y2JpQWdaMlYwSUdOb2FXeGtTV1FvS1NCN0lISmxkSFZ5YmlCMGFHbHpMbDlqYUdsc1pFbGtPeUI5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRVJoZEdFZ1UzUnlkV04wZFhKbElIUnZJR0psSUhONWJtTm9jbTl1YVhwbFpDNWNiaUFnSUNvZ1FIUjVjR1VnZTBwVFQwNTlJQzBnU2xOUFRpQnpkSEoxWTNSMWNtVWdkR2hoZENCemFHOTFiR1FnWm05c2JHOTNJSFJvWlNCa1pXWnBibVZrSUhOamFHVnRZU3dnYVdZZ1lXNTVMbHh1SUNBZ0tpOWNiaUFnWjJWMElHUmhkR0VvS1NCN0lISmxkSFZ5YmlCMGFHbHpMbDl6ZVc1alQySnFMbVJoZEdFN0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVm5hWE4wWlhJZ2RHaGxJR05vWVc1blpTQnNhWE4wWlc1bGNuTWdjMlZ1ZENCaWVTQjBhR1VnY21Wd2IzSjBaWElnWTJocGJHUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2YmlobGRtVnVkRG9nVFhOblJYWmxiblFwZlNCallXeHNZbUZqYTF4dUlDQWdLaTljYmlBZ2IyNURhR0Z1WjJVb1kyRnNiR0poWTJzcElIdGNiaUFnSUNCMGFHbHpMbDl6ZVc1alQySnFMbTlpYzJWeWRtVW9LR1YyWlc1MEtTQTlQaUI3WEc0Z0lDQWdJQ0JqWVd4c1ltRmpheWhsZG1WdWRDazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVTJWMGRYQWdkR2hsSUdOaGJHeGlZV05ySUhSdklIQnliMk5sYzNNZ2NtVnpjRzl1YzJVZ2JtOTBhV1pwWTJGMGFXOXVjeUJ2WmlCMGFHVWdZM0psWVhSbGMxeHVJQ0FnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1S0dWMlpXNTBPaUJOYzJkRmRtVnVkQ2w5SUdOaGJHeGlZV05yWEc0Z0lDQXFMMXh1SUNCdmJsSmxjM0J2Ym5ObEtHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ2RHaHBjeTVmYjI1U1pYTndiMjV6WlVoaGJtUnNaWElnUFNCallXeHNZbUZqYXp0Y2JpQWdmVnh1WEc0Z0lDOHZSa3hQVnkxSlRqb2diV1Z6YzJGblpTQnlaV05sYVhabFpDQm1jbTl0SUdFZ2NtVnRiM1JsSUVSaGRHRlBZbXBsWTNRZ0xUNGdYMjl1UTJocGJHUkRjbVZoZEdWY2JpQWdYMjl1VW1WemNHOXVjMlVvYlhObktTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUd4bGRDQmxkbVZ1ZENBOUlIdGNiaUFnSUNBZ0lIUjVjR1U2SUcxelp5NTBlWEJsTEZ4dUlDQWdJQ0FnZFhKc09pQnRjMmN1WW05a2VTNXpiM1Z5WTJVc1hHNGdJQ0FnSUNCamIyUmxPaUJ0YzJjdVltOWtlUzVqYjJSbFhHNGdJQ0FnZlR0Y2JseHVJQ0FnSUdsbUlDaGZkR2hwY3k1ZmIyNVNaWE53YjI1elpVaGhibVJzWlhJcElIdGNiaUFnSUNBZ0lGOTBhR2x6TGw5dmJsSmxjM0J2Ym5ObFNHRnVaR3hsY2lobGRtVnVkQ2s3WEc0Z0lDQWdmVnh1SUNCOVhHNWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUkdGMFlVOWlhbVZqZEVOb2FXeGtPMXh1WEc1Y2JseHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSWdMeTljYmk4dklDNHZjM0pqTDNONWJtTm9aWEl2UkdGMFlVOWlhbVZqZEVOb2FXeGtMbXB6SWl3aWFXMXdiM0owSUNkd2NtOTRlUzF2WW5ObGNuWmxKenRjYmx4dVkyOXVjM1FnYjJKcVpXTjBWSGx3WlNBOUlIdEJVbEpCV1RvZ0oxdHZZbXBsWTNRZ1FYSnlZWGxkSnl3Z1QwSktSVU5VT2lBblcyOWlhbVZqZENCUFltcGxZM1JkSnlCOU8xeHVYRzR2S2lwY2JpQXFJRUJoWTJObGMzTWdjSEpwZG1GMFpWeHVJQ29nVFdGcGJpQmpiR0Z6Y3lCMGFHRjBJRzFoYVc1MFlXbHVjeUJoSUVwVFQwNGdiMkpxWldOMExDQmhibVFnYjJKelpYSjJaWE1nWTJoaGJtZGxjeUJwYmlCMGFHbHpJRzlpYW1WamRDd2djbVZqZFhKemFYWmxiSGt1WEc0Z0tpQkpiblJsY201aGJDQnZZbXBsWTNSeklHRnVaQ0JoY25KaGVYTWdZWEpsSUdGc2MyOGdiMkp6WlhKMlpXUXVYRzRnS2k5Y2JtTnNZWE56SUZONWJtTlBZbXBsWTNRZ2UxeHVYRzRnSUdOdmJuTjBjblZqZEc5eUtHbHVhWFJwWVd4RVlYUmhLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lGOTBhR2x6TGw5dlluTmxjblpsY25NZ1BTQmJYVHRjYmlBZ0lDQmZkR2hwY3k1ZlptbHNkR1Z5Y3lBOUlIdDlPMXh1WEc0Z0lDQWdkR2hwY3k1ZlpHRjBZU0E5SUdsdWFYUnBZV3hFWVhSaElIeDhJSHQ5TzF4dVhHNGdJQ0FnZEdocGN5NWZhVzUwWlhKdVlXeFBZbk5sY25abEtIUm9hWE11WDJSaGRHRXBPMXh1SUNCOVhHNWNiaUFnWjJWMElHUmhkR0VvS1NCN0lISmxkSFZ5YmlCMGFHbHpMbDlrWVhSaE95QjlYRzVjYmlBZ2IySnpaWEoyWlNoallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhSb2FYTXVYMjlpYzJWeWRtVnljeTV3ZFhOb0tHTmhiR3hpWVdOcktUdGNiaUFnZlZ4dVhHNGdJR1pwYm1Rb2NHRjBhQ2tnZTF4dUlDQWdJR3hsZENCc2FYTjBJRDBnY0dGMGFDNXpjR3hwZENnbkxpY3BPMXh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDJacGJtUlhhWFJvVTNCc2FYUW9iR2x6ZENrN1hHNGdJSDFjYmx4dUlDQm1hVzVrUW1WbWIzSmxLSEJoZEdncElIdGNiaUFnSUNCc1pYUWdjbVZ6ZFd4MElEMGdlMzA3WEc0Z0lDQWdiR1YwSUd4cGMzUWdQU0J3WVhSb0xuTndiR2wwS0NjdUp5azdYRzRnSUNBZ2NtVnpkV3gwTG14aGMzUWdQU0JzYVhOMExuQnZjQ2dwTzF4dUlDQWdJSEpsYzNWc2RDNXZZbW9nUFNCMGFHbHpMbDltYVc1a1YybDBhRk53YkdsMEtHeHBjM1FwTzF4dVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNiaUFnZlZ4dVhHNGdJRjltYVc1a1YybDBhRk53YkdsMEtHeHBjM1FwSUh0Y2JpQWdJQ0JzWlhRZ2IySnFJRDBnZEdocGN5NWZaR0YwWVR0Y2JpQWdJQ0JzYVhOMExtWnZja1ZoWTJnb0tIWmhiSFZsS1NBOVBpQjdYRzRnSUNBZ0lDQnZZbW9nUFNCdlltcGJkbUZzZFdWZE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUc5aWFqdGNiaUFnZlZ4dVhHNGdJRjlwYzA5aWMyVnlkbUZpYkdVb2IySnFLU0I3WEc0Z0lDQWdhV1lnS0c5aWFpNWpiMjV6ZEhKMVkzUnZjaUE5UFQwZ1QySnFaV04wSUh4OElHOWlhaTVqYjI1emRISjFZM1J2Y2lBOVBUMGdRWEp5WVhrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjYmlBZ2ZWeHVYRzVjYmlBZ1gybHVkR1Z5Ym1Gc1QySnpaWEoyWlNodlltcGxZM1FwSUh0Y2JseHVJQ0FnSUd4bGRDQm9ZVzVrYkdWeUlEMGdLR05vWVc1blpYTmxkQ2tnUFQ0Z2UxeHVYRzRnSUNBZ0lDQmphR0Z1WjJWelpYUXVaWFpsY25rb0tHTm9ZVzVuWlNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOXZia05vWVc1blpYTW9ZMmhoYm1kbEtUdGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lDQWdmVHRjYmx4dUlDQWdJSFJvYVhNdVgyUmhkR0VnUFNCUFltcGxZM1F1WkdWbGNFOWljMlZ5ZG1Vb2IySnFaV04wTENCb1lXNWtiR1Z5S1R0Y2JseHVJQ0I5WEc1Y2JpQWdYMlpwY21WRmRtVnVkQ2hsZG1WdWRDa2dlMXh1SUNBZ0lIUm9hWE11WDI5aWMyVnlkbVZ5Y3k1bWIzSkZZV05vS0NoallXeHNZbUZqYXlrZ1BUNGdlMXh1SUNBZ0lDQWdZMkZzYkdKaFkyc29aWFpsYm5RcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdYMjl1UTJoaGJtZGxjeWhqYUdGdVoyVXBJSHRjYmx4dUlDQWdJR3hsZENCdlltb2dQU0JqYUdGdVoyVXViMkpxWldOME8xeHVJQ0FnSUd4bGRDQnZZbXBVZVhCbE8xeHVYRzRnSUNBZ2FXWWdLRzlpYWk1amIyNXpkSEoxWTNSdmNpQTlQVDBnVDJKcVpXTjBLU0I3WEc0Z0lDQWdJQ0J2WW1wVWVYQmxJRDBnVDJKcVpXTjBWSGx3WlM1UFFrcEZRMVE3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0c5aWFpNWpiMjV6ZEhKMVkzUnZjaUE5UFQwZ1FYSnlZWGtwSUh0Y2JpQWdJQ0FnSUc5aWFsUjVjR1VnUFNCUFltcGxZM1JVZVhCbExrRlNVa0ZaTzF4dUlDQWdJSDFjYmx4dUlDQWdJR3hsZENCbWFXVnNaRk4wY21sdVp5QTlJR05vWVc1blpTNXJaWGx3WVhSb08xeHVYRzRnSUNBZ0x5OGdZMjl1YzI5c1pTNXNiMmNvSjBacFpXeGtPaWNzSUdacFpXeGtVM1J5YVc1bktUdGNiaUFnSUNBdkx5QmpiMjV6YjJ4bExteHZaeWduZEhsd1pUb25MQ0JqYUdGdVoyVXVkSGx3WlNrN1hHNWNiaUFnSUNBdkwyeGxkQ0J2YkdSV1lXeDFaU0E5SUdOb1lXNW5aUzV2YkdSV1lXeDFaVHRjYmlBZ0lDQnNaWFFnYm1WM1ZtRnNkV1VnUFNCdlltcGJZMmhoYm1kbExtNWhiV1ZkTzF4dVhHNGdJQ0FnWTI5dWMyOXNaUzVwYm1adktHTm9ZVzVuWlM1MGVYQmxJQ3NnSnlCOElFWnBaV3hrT2lBbklDc2dabWxsYkdSVGRISnBibWNnS3lBbklId2dUbVYzSUZaaGJIVmxPaWNzSUVwVFQwNHVjM1J5YVc1bmFXWjVLRzVsZDFaaGJIVmxLU2s3WEc1Y2JpQWdJQ0JwWmlBb1kyaGhibWRsTG5SNWNHVWdQVDA5SUNkMWNHUmhkR1VuS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDltYVhKbFJYWmxiblFvZTF4dUlDQWdJQ0FnSUNCalZIbHdaVG9nUTJoaGJtZGxWSGx3WlM1VlVFUkJWRVVzWEc0Z0lDQWdJQ0FnSUc5VWVYQmxPaUJ2WW1wVWVYQmxMRnh1SUNBZ0lDQWdJQ0JtYVdWc1pEb2dabWxsYkdSVGRISnBibWNzWEc0Z0lDQWdJQ0FnSUdSaGRHRTZJRzVsZDFaaGJIVmxYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTJoaGJtZGxMblI1Y0dVZ1BUMDlJQ2RoWkdRbktTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5bWFYSmxSWFpsYm5Rb2UxeHVJQ0FnSUNBZ0lDQmpWSGx3WlRvZ1EyaGhibWRsVkhsd1pTNUJSRVFzWEc0Z0lDQWdJQ0FnSUc5VWVYQmxPaUJ2WW1wVWVYQmxMRnh1SUNBZ0lDQWdJQ0JtYVdWc1pEb2dabWxsYkdSVGRISnBibWNzWEc0Z0lDQWdJQ0FnSUdSaGRHRTZJRzVsZDFaaGJIVmxYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWTJoaGJtZGxMblI1Y0dVZ1BUMDlJQ2RrWld4bGRHVW5LU0I3WEc0Z0lDQWdJQ0IwYUdsekxsOW1hWEpsUlhabGJuUW9lMXh1SUNBZ0lDQWdJQ0JqVkhsd1pUb2dRMmhoYm1kbFZIbHdaUzVTUlUxUFZrVXNYRzRnSUNBZ0lDQWdJRzlVZVhCbE9pQnZZbXBVZVhCbExGeHVJQ0FnSUNBZ0lDQm1hV1ZzWkRvZ1ptbGxiR1JUZEhKcGJtZGNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMWNiaUFnZlZ4dVhHNTlYRzVjYm1WNGNHOXlkQ0JzWlhRZ1EyaGhibWRsVkhsd1pTQTlJSHRWVUVSQlZFVTZJQ2QxY0dSaGRHVW5MQ0JCUkVRNklDZGhaR1FuTENCU1JVMVBWa1U2SUNkeVpXMXZkbVVuZlR0Y2JtVjRjRzl5ZENCc1pYUWdUMkpxWldOMFZIbHdaU0E5SUh0UFFrcEZRMVE2SUNkdlltcGxZM1FuTENCQlVsSkJXVG9nSjJGeWNtRjVKMzA3WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JUZVc1alQySnFaV04wTzF4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YzNKakwzTjVibU5vWlhJdlVISnZlSGxQWW1wbFkzUXVhbk1pTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVpYaHdiM0owY3k1ZlgyVnpUVzlrZFd4bElEMGdkSEoxWlR0Y2JseHVkbUZ5SUY5blpYUlFjbTkwYjNSNWNHVlBaaUE5SUhKbGNYVnBjbVVvWENJdUxpOWpiM0psTFdwekwyOWlhbVZqZEM5blpYUXRjSEp2ZEc5MGVYQmxMVzltWENJcE8xeHVYRzUyWVhJZ1gyZGxkRkJ5YjNSdmRIbHdaVTltTWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJkbGRGQnliM1J2ZEhsd1pVOW1LVHRjYmx4dWRtRnlJRjluWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSWdQU0J5WlhGMWFYSmxLRndpTGk0dlkyOXlaUzFxY3k5dlltcGxZM1F2WjJWMExXOTNiaTF3Y205d1pYSjBlUzFrWlhOamNtbHdkRzl5WENJcE8xeHVYRzUyWVhJZ1gyZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2pJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5blpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQm1kVzVqZEdsdmJpQm5aWFFvYjJKcVpXTjBMQ0J3Y205d1pYSjBlU3dnY21WalpXbDJaWElwSUh0Y2JpQWdhV1lnS0c5aWFtVmpkQ0E5UFQwZ2JuVnNiQ2tnYjJKcVpXTjBJRDBnUm5WdVkzUnBiMjR1Y0hKdmRHOTBlWEJsTzF4dUlDQjJZWElnWkdWell5QTlJQ2d3TENCZloyVjBUM2R1VUhKdmNHVnlkSGxFWlhOamNtbHdkRzl5TWk1a1pXWmhkV3gwS1NodlltcGxZM1FzSUhCeWIzQmxjblI1S1R0Y2JseHVJQ0JwWmlBb1pHVnpZeUE5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYRzRnSUNBZ2RtRnlJSEJoY21WdWRDQTlJQ2d3TENCZloyVjBVSEp2ZEc5MGVYQmxUMll5TG1SbFptRjFiSFFwS0c5aWFtVmpkQ2s3WEc1Y2JpQWdJQ0JwWmlBb2NHRnlaVzUwSUQwOVBTQnVkV3hzS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZFc1a1pXWnBibVZrTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1oyVjBLSEJoY21WdWRDd2djSEp2Y0dWeWRIa3NJSEpsWTJWcGRtVnlLVHRjYmlBZ0lDQjlYRzRnSUgwZ1pXeHpaU0JwWmlBb1hDSjJZV3gxWlZ3aUlHbHVJR1JsYzJNcElIdGNiaUFnSUNCeVpYUjFjbTRnWkdWell5NTJZV3gxWlR0Y2JpQWdmU0JsYkhObElIdGNiaUFnSUNCMllYSWdaMlYwZEdWeUlEMGdaR1Z6WXk1blpYUTdYRzVjYmlBZ0lDQnBaaUFvWjJWMGRHVnlJRDA5UFNCMWJtUmxabWx1WldRcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMWJtUmxabWx1WldRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR2RsZEhSbGNpNWpZV3hzS0hKbFkyVnBkbVZ5S1R0Y2JpQWdmVnh1ZlR0Y2JseHVYRzR2THk4dkx5OHZMeTh2THk4dkx5OHZMeTljYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTWEc0dkx5QXVMMzR2WW1GaVpXd3RjblZ1ZEdsdFpTOW9aV3h3WlhKekwyZGxkQzVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRJelhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0lzSWk4cUtseHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlFWQ0JKYm05MlljT253Nk52SUdVZ1UybHpkR1Z0WVhNZ1UwRmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdTVTVGVTBNdFNVUmNiaW9nUTI5d2VYSnBaMmgwSURJd01UWWdVVlZQUWtsVElFNUZWRmRQVWt0VElGTk1YRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRVpTUVZWT1NFOUdSVkl0UjBWVFJVeE1VME5JUVVaVUlGcFZVaUJHVDBWU1JFVlNWVTVISUVSRlVpQkJUa2RGVjBGT1JGUkZUaUJHVDFKVFEwaFZUa2NnUlM1V1hHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFOVNRVTVIUlNCVFFWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkVaWFYwYzJOb1pTQlVaV3hsYTI5dElFRkhYRzRxSUVOdmNIbHlhV2RvZENBeU1ERTJJRUZ3YVhwbFpWeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQlVSVU5JVGtsVFEwaEZJRlZPU1ZaRlVsTkpWRUZVSUVKRlVreEpUbHh1S2x4dUtpQk1hV05sYm5ObFpDQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdVZ1hDSk1hV05sYm5ObFhDSXBPMXh1S2lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObElIZHBkR2dnZEdobElFeHBZMlZ1YzJVdVhHNHFJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUtseHVLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1S2x4dUtpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzSUhOdlpuUjNZWEpsWEc0cUlHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1SUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXhjYmlvZ1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdVhHNHFJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobElITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1SY2Jpb2diR2x0YVhSaGRHbHZibk1nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0cUtpOWNibHh1YVcxd2IzSjBJRVJoZEdGUFltcGxZM1JTWlhCdmNuUmxjaUJtY205dElDY3VMMFJoZEdGUFltcGxZM1JTWlhCdmNuUmxjaWM3WEc1cGJYQnZjblFnUkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5SUdaeWIyMGdKeTR2UkdGMFlVOWlhbVZqZEU5aWMyVnlkbVZ5Snp0Y2JtbHRjRzl5ZENCRVlYUmhVSEp2ZG1semFXOXVZV3dnWm5KdmJTQW5MaTlFWVhSaFVISnZkbWx6YVc5dVlXd25PMXh1WEc0dktpcGNiaW9nVkdobElHMWhhVzRnWTJ4aGMzTWdabTl5SUhSb1pTQnplVzVqYUdWeUlIQmhZMnRoWjJVdVhHNHFJRlJvWlNCVGVXNWphR1Z5SUdseklHRWdjMmx1WjJ4bGRHOXVJR05zWVhOeklIQmxjaUJJZVhCbGNuUjVMMVZTVENCaGJtUWdhWFFnYVhNZ2RHaGxJRzkzYm1WeUlHOW1JR0ZzYkNCamNtVmhkR1ZrSUVSaGRHRWdVM2x1WXlCUFltcGxZM1J6SUdGalkyOXlaR2x1WnlCMGJ5QjBhR1VnVW1Wd2IzSjBaWElnTFNCUFluTmxjblpsY2lCd1lYUjBaWEp1TGx4dUtpQk5ZV2x1SUdaMWJtTjBhVzl1WVd4cGRIa2dhWE1nZEc4Z1kzSmxZWFJsSUhKbGNHOXlkR1Z5Y3lCaGJtUWdkRzhnYzNWaWMyTnlhV0psSUhSdklHVjRhWE4wYVc1bklHOXVaWE11WEc0cUwxeHVZMnhoYzNNZ1UzbHVZMmhsY2lCN1hHNGdJQzhxSUhCeWFYWmhkR1ZjYmlBZ1gyOTNibVZ5T2lCVlVreGNiaUFnWDJKMWN6b2dUV2x1YVVKMWMxeHVYRzRnSUY5emRXSlZVa3c2SUZWU1RGeHVYRzRnSUY5eVpYQnZjblJsY25NNklEeDFjbXc2SUVSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2o1Y2JpQWdYMjlpYzJWeWRtVnljem9nUEhWeWJEb2dSR0YwWVU5aWFtVmpkRTlpYzJWeWRtVnlQbHh1SUNCZmNISnZkbWx6YVc5dVlXeHpPaUE4ZFhKc09pQkVZWFJoVUhKdmRtbHphVzl1WVd3K1hHNWNiaUFnTFMwdExXVjJaVzUwSUdoaGJtUnNaWEp6TFMwdExWeHVJQ0JmYjI1T2IzUnBabWxqWVhScGIyNUlZVzVrYkdWeU9pQW9aWFpsYm5RcElEMCtJSFp2YVdSY2JpQWdYMjl1VW1WemRXMWxPaUFvWlhabGJuUXBJRDArSUhadmFXUmNiaUFnS2k5Y2JseHVJQ0F2S2lwY2JpQWdLaUJEYjI1emRISjFZM1J2Y2lCMGFHRjBJSE5vYjNWc1pDQmlaU0IxYzJWa0lHSjVJSFJvWlNCSWVYQmxjblI1SUc5M2JtVnlYRzRnSUNvZ1FIQmhjbUZ0SUh0SWVYQmxjblI1VlZKTWZTQnZkMjVsY2lBdElFaDVjR1Z5ZEhrZ1ZWSk1JRzkzYm1WeUxpQkJiaUJWVWt3Z1lXeHNiMk5oZEdWa0lHSjVJSFJvWlNCeWRXNTBhVzFsSUhSb1lYUWdkVzVwY1hWbGJIa2dhV1JsYm5ScFptbGxjeUIwYUdVZ1NIbHdaWEowZVM1Y2JpQWdLaUJBY0dGeVlXMGdlMDFwYm1sQ2RYTjlJR0oxY3lBdElFRnVJR2x1YzNSaGJtTmxJRzltSUhSb1pTQk5hVzVwUW5WeklIQnliM1pwWkdWa0lHbHVJSFJvWlNCellXNWtZbTk0TGlCWGFHVnVJR0Z1SUc5aWFtVmpkQ0FvVW1Wd2IzSjBaWElnYjNJZ1QySnpaWEoyWldRcElHbHpJR055WldGMFpXUXNJSFJvWlNCVGVXNWphR1Z5VFdGdVlXZGxjaUIzYVd4c0lHRmtaQ0JoSUd4cGMzUmxibVZ5SUdsdUlIUm9aU0JOYVc1cFFuVnpJSFJ2SUhKbFkyVnBkbVV2YzJWdVpDQk5aWE56WVdkbGN5QnZaaUIwYUdGMElHOWlhbVZqZEM1Y2JpQWdLaUJBY0dGeVlXMGdlMHBUVDA1OUlHTnZibVpwWnlBdElFTnZibVpwWjNWeVlYUnBiMjRnWkdGMFlTNGdWR2hsSUc5dWJIa2djbVZ4ZFdseVpXUWdabWxsYkdRZ1ptOXlJRzV2ZHlCcGN5QjBhR1VnY25WdWRHbHRaVlZTVEM1Y2JpQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSW9iM2R1WlhJc0lHSjFjeXdnWTI5dVptbG5LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lGOTBhR2x6TGw5dmQyNWxjaUE5SUc5M2JtVnlPMXh1SUNBZ0lGOTBhR2x6TGw5aWRYTWdQU0JpZFhNN1hHNWNiaUFnSUNCZmRHaHBjeTVmYzNWaVZWSk1JRDBnWTI5dVptbG5MbkoxYm5ScGJXVlZVa3dnS3lBbkwzTnRKenRjYmx4dUlDQWdJRjkwYUdsekxsOXlaWEJ2Y25SbGNuTWdQU0I3ZlR0Y2JpQWdJQ0JmZEdocGN5NWZiMkp6WlhKMlpYSnpJRDBnZTMwN1hHNGdJQ0FnWDNSb2FYTXVYM0J5YjNacGMybHZibUZzY3lBOUlIdDlPMXh1WEc0Z0lDQWdZblZ6TG1Ga1pFeHBjM1JsYm1WeUtHOTNibVZ5TENBb2JYTm5LU0E5UGlCN1hHNGdJQ0FnSUNBdkwybG5ibTl5WlNCdGMyY2djMlZ1ZENCaWVTQm9hVzF6Wld4bVhHNGdJQ0FnSUNCcFppQW9iWE5uTG1aeWIyMGdJVDA5SUc5M2JtVnlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25XMU41Ym1Ob1pYSmRJRk41Ym1Ob1pYSXRVa05XT2lBbkxDQnRjMmNwTzF4dUlDQWdJQ0FnSUNCemQybDBZMmdnS0cxelp5NTBlWEJsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMkZ6WlNBblptOXlkMkZ5WkNjNklGOTBhR2x6TGw5dmJrWnZjbmRoY21Rb2JYTm5LVHNnWW5KbFlXczdYRzRnSUNBZ0lDQWdJQ0FnWTJGelpTQW5ZM0psWVhSbEp6b2dYM1JvYVhNdVgyOXVVbVZ0YjNSbFEzSmxZWFJsS0cxelp5azdJR0p5WldGck8xeHVJQ0FnSUNBZ0lDQWdJR05oYzJVZ0oyUmxiR1YwWlNjNklGOTBhR2x6TGw5dmJsSmxiVzkwWlVSbGJHVjBaU2h0YzJjcE95QmljbVZoYXp0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWR2hsSUc5M2JtVnlJRzltSUhSb1pTQlRlVzVqYUdWeUlHRnVaQ0JoYkd3Z1kzSmxZWFJsWkNCeVpYQnZjblJsY25NdVhHNGdJQ29nUUhSNWNHVWdlMGg1Y0dWeWRIbFZVa3g5WEc0Z0lDb3ZYRzRnSUdkbGRDQnZkMjVsY2lncElIc2djbVYwZFhKdUlIUm9hWE11WDI5M2JtVnlPeUI5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dRV3hzSUc5M2JtVmtJSEpsY0c5eWRHVnljeXdnZEdobElHOXVaWE1nZEdoaGRDQjNaWEpsSUdOeVpXRjBaV1FnWW5rZ1lTQmpjbVZoZEdWY2JpQWdLaUJBZEhsd1pTQjdUMkpxWldOMFBGVlNUQ3dnUkdGMFlVOWlhbVZqZEZKbGNHOXlkR1Z5UG4xY2JpQWdLaTljYmlBZ1oyVjBJSEpsY0c5eWRHVnljeWdwSUhzZ2NtVjBkWEp1SUhSb2FYTXVYM0psY0c5eWRHVnljenNnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRUZzYkNCdmQyNWxaQ0J2WW5ObGNuWmxjbk1zSUhSb1pTQnZibVZ6SUhSb1lYUWdkMlZ5WlNCamNtVmhkR1ZrSUdKNUlHRWdiRzlqWVd3Z2MzVmljMk55YVhCMGFXOXVYRzRnSUNvZ1FIUjVjR1VnZTA5aWFtVmpkRHhWVWt3c0lFUmhkR0ZQWW1wbFkzUlBZbk5sY25abGNqNTlYRzRnSUNvdlhHNGdJR2RsZENCdlluTmxjblpsY25Nb0tTQjdJSEpsZEhWeWJpQjBhR2x6TGw5dlluTmxjblpsY25NN0lIMWNibHh1SUNBdktpcGNiaUFnS2lCU1pYRjFaWE4wSUdFZ1JHRjBZVTlpYW1WamRGSmxjRzl5ZEdWeUlHTnlaV0YwYVc5dUxpQlVhR1VnVlZKTUlIZHBiR3dnWW1VZ1ltVWdjbVZ4ZFdWemRHVmtJR0o1SUhSb1pTQmhiR3h2WTJGMGFXOXVJRzFsWTJoaGJtbHpiUzVjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFRZMmhsYldGVlVreDlJSE5qYUdWdFlTQXRJRWg1Y0dWeWRIa2dRMkYwWVd4dlozVmxJRlZTVENCaFpHUnlaWE56SUhSb1lYUWdZMkZ1SUdKbElIVnpaV1FnZEc4Z2NtVjBjbWxsZG1VZ2RHaGxJRXBUVDA0dFUyTm9aVzFoSUdSbGMyTnlhV0pwYm1jZ2RHaGxJRVJoZEdFZ1QySnFaV04wSUhOamFHVnRZVnh1SUNBcUlFQndZWEpoYlNBZ2UwaDVjR1Z5ZEhsVlVreGJYWDBnYjJKelpYSjJaWEp6SUMwZ1RHbHpkQ0J2WmlCb2VYQmxjblJwWlhNZ2RHaGhkQ0JoY21VZ2NISmxMV0YxZEdodmNtbDZaV1FnWm05eUlITjFZbk5qY21sd2RHbHZibHh1SUNBcUlFQndZWEpoYlNBZ2UwcFRUMDU5SUdsdWFYUnBZV3hFWVhSaElDMGdTVzVwZEdsaGJDQmtZWFJoSUc5bUlIUm9aU0J5WlhCdmNuUmxjbHh1SUNBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ2IySnFaV04wVlZKTUlDMGdjbVYxYzJGaWJHVWdaR0YwWVU5aWFtVmpkQ0JWVWt4Y2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxQRVJoZEdGUFltcGxZM1JTWlhCdmNuUmxjajU5SUZKbGRIVnliaUJRY205dGFYTmxJSFJ2SUdFZ2JtVjNJRkpsY0c5eWRHVnlMaUJVYUdVZ2NtVndiM0owWlhJZ1kyRnVJR0psSUdGalkyVndkR1ZrSUc5eUlISmxhbVZqZEdWa0lHSjVJSFJvWlNCUVJWQmNiaUFnS2k5Y2JpQWdZM0psWVhSbEtITmphR1Z0WVN3Z2IySnpaWEoyWlhKekxDQnBibWwwYVdGc1JHRjBZU3dnYzNSdmNtVWdQU0JtWVd4elpTd2djREp3SUQwZ1ptRnNjMlVwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0JqY21sMFpYSnBZU0E5SUh0OU8xeHVYRzRnSUNBZ1kzSnBkR1Z5YVdFdWNESndJRDBnY0RKd08xeHVJQ0FnSUdOeWFYUmxjbWxoTG5OMGIzSmxJRDBnYzNSdmNtVTdYRzRnSUNBZ1kzSnBkR1Z5YVdFdWMyTm9aVzFoSUQwZ2MyTm9aVzFoTzF4dUlDQWdJR055YVhSbGNtbGhMbTlpYzJWeWRtVnljeUE5SUc5aWMyVnlkbVZ5Y3p0Y2JpQWdJQ0JqY21sMFpYSnBZUzVwYm1sMGFXRnNSR0YwWVNBOUlHbHVhWFJwWVd4RVlYUmhPMXh1WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0emVXNWphR1Z5SUMwZ1kzSmxZWFJsWFNBdElHTnlaV0YwWlNCU1pYQnZjblJsY2lBdElHTnlhWFJsY21saE9pQW5MQ0JqY21sMFpYSnBZU2s3WEc1Y2JpQWdJQ0JQWW1wbFkzUXVZWE56YVdkdUtHTnlhWFJsY21saExDQjdjbVZ6ZFcxbE9pQm1ZV3h6WlgwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbDlqY21WaGRHVW9ZM0pwZEdWeWFXRXBPMXh1SUNCOVhHNWNiaUFnY21WemRXMWxVbVZ3YjNKMFpYSnpLR055YVhSbGNtbGhLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25XM041Ym1Ob1pYSWdMU0JqY21WaGRHVmRJQzBnY21WemRXMWxJRkpsY0c5eWRHVnlJQzBnWTNKcGRHVnlhV0U2SUNjc0lHTnlhWFJsY21saEtUdGNibHh1SUNBZ0lFOWlhbVZqZEM1aGMzTnBaMjRvWTNKcGRHVnlhV0VzSUh0eVpYTjFiV1U2SUhSeWRXVjlLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQmZkR2hwY3k1ZlkzSmxZWFJsS0dOeWFYUmxjbWxoS1R0Y2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBcUlGSmxjWFZsYzNRZ1lTQnpkV0p6WTNKcGNIUnBiMjRnZEc4Z1lXNGdaWGhwYzNSbGJuUWdjbVZ3YjNKMFpYSWdiMkpxWldOMExseHVJQ0FxSUVCd1lYSmhiU0I3VTJOb1pXMWhWVkpNZlNCelkyaGxiV0VnTFNCSWVYQmxjblI1SUVOaGRHRnNiMmQxWlNCVlVrd2dZV1JrY21WemN5QjBhR0YwSUdOaGJpQmlaU0IxYzJWa0lIUnZJSEpsZEhKcFpYWmxJSFJvWlNCS1UwOU9MVk5qYUdWdFlTQmtaWE5qY21saWFXNW5JSFJvWlNCRVlYUmhJRTlpYW1WamRDQnpZMmhsYldGY2JpQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRGVlNUSDBnYjJKcVZWSk1JQzBnUVdSa2NtVnpjeUJ2WmlCMGFHVWdaWGhwYzNSbGJuUWdjbVZ3YjNKMFpYSWdiMkpxWldOMElIUnZJR0psSUc5aWMyVnlkbVZrWEc0Z0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpUeEVZWFJoVDJKcVpXTjBUMkp6WlhKMlpYSStmU0JTWlhSMWNtNGdVSEp2YldselpTQjBieUJoSUc1bGR5QnZZbk5sY25abGNpNGdTWFFuY3lCaGMzTnZZMmxoZEdWa0lIZHBkR2dnZEdobElISmxjRzl5ZEdWeUxseHVJQ0FxTDF4dUlDQnpkV0p6WTNKcFltVW9jMk5vWlcxaExDQnZZbXBWVWt3c0lITjBiM0psSUQwZ1ptRnNjMlVzSUhBeWNDQTlJR1poYkhObExDQnRkWFIxWVd3Z1BTQjBjblZsS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmlBZ0lDQnNaWFFnWTNKcGRHVnlhV0VnUFNCN2ZUdGNibHh1SUNBZ0lHTnlhWFJsY21saExuQXljQ0E5SUhBeWNEdGNiaUFnSUNCamNtbDBaWEpwWVM1emRHOXlaU0E5SUhOMGIzSmxPMXh1SUNBZ0lHTnlhWFJsY21saExuTmphR1Z0WVNBOUlITmphR1Z0WVR0Y2JpQWdJQ0JqY21sMFpYSnBZUzV5WlhOdmRYSmpaU0E5SUc5aWFsVlNURHRjYmlBZ0lDQmpjbWwwWlhKcFlTNXRkWFIxWVd3Z1BTQnRkWFIxWVd3N1hHNWNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25XM041Ym1Ob1pYSWdMU0J6ZFdKelkzSnBZbVZkSUMwZ2MzVmljMk55YVdKbElHTnlhWFJsY21saE9pQW5MQ0JqY21sMFpYSnBZU2s3WEc1Y2JpQWdJQ0JQWW1wbFkzUXVZWE56YVdkdUtHTnlhWFJsY21saExDQjdjbVZ6ZFcxbE9pQm1ZV3h6WlgwcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUY5MGFHbHpMbDl6ZFdKelkzSnBZbVVvWTNKcGRHVnlhV0VwTzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1VtVnhkV1Z6ZENCaElITjFZbk5qY21sd2RHbHZiaUIwYnlCaGJpQmxlR2x6ZEdWdWRDQnlaWEJ2Y25SbGNpQnZZbXBsWTNRdVhHNGdJQ29nUUhCaGNtRnRJSHRqY21sMFpYSnBZWDBnWTNKcGRHVnlhV0VnTFNCSmJtWnZjbTFoZEdsdmJpQjBieUJrYVhOamIzWmxjbmtnZEdobElHOWljMlZ5ZG1WeUlHOWlhbVZqZEZ4dUlDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVThSR0YwWVU5aWFtVmpkRTlpYzJWeWRtVnlQbjBnVW1WMGRYSnVJRkJ5YjIxcGMyVWdkRzhnWVNCdVpYY2diMkp6WlhKMlpYSXVJRWwwSjNNZ1lYTnpiMk5wWVhSbFpDQjNhWFJvSUhSb1pTQnlaWEJ2Y25SbGNpNWNiaUFnS2k5Y2JpQWdjbVZ6ZFcxbFQySnpaWEoyWlhKektHTnlhWFJsY21saEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JzWlhRZ1gyTnlhWFJsY21saElEMGdZM0pwZEdWeWFXRWdmSHdnZTMwN1hHNWNiaUFnSUNCUFltcGxZM1F1WVhOemFXZHVLRjlqY21sMFpYSnBZU3dnZTNKbGMzVnRaVG9nZEhKMVpYMHBPMXh1WEc0Z0lDQWdjbVYwZFhKdUlGOTBhR2x6TGw5emRXSnpZM0pwWW1Vb1gyTnlhWFJsY21saEtUdGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQXFJRkpsY1hWbGMzUWdZU0J5WldGa0lHRmpkR2x2YmlCdmJpQjBhR1VnY21Wd2IzSjBaWElnYjJKcVpXTjBYRzRnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1JWVWt4OUlHOWlhbFZTVENBdElGVlNUQ0J2WmlCMGFHVWdjbVZ3YjNKMFpYSWdiMkpxWldOMElIUnZJR0psSUhKbFlXUmNiaUFnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sUEU5aWFtVmpkRDU5SUZKbGRIVnliaUJRY205dGFYTmxJSFJ2SUd4aGMzUWdZWFpoYVd4aFlteGxJR1JoZEdFZ2IyWWdkR2hsSUhKbGNHOXlkR1Z5WEc0Z0lDb3ZYRzRnSUhKbFlXUW9iMkpxVlZKTUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUM4dlJreFBWeTFQVlZRNklIUm9hWE1nYldWemMyRm5aU0IzYVd4c0lHSmxJSE5sYm5RZ1pHbHlaV04wYkhrZ2RHOGdjbVZ3YjNKMFpYSWdiMkpxWldOMElDaHRZWGxpWlNCMGFHVnlaU0JwY3lCdWJ5QnNhWE4wWlc1bGNpQmhkbUZwYkdGaWJHVXNJSE52SUdsMElIZHBiR3dnWW1VZ2NtVnpiMngyWldRZ2QybDBhQ0JOWlhOellXZGxRblZ6SUMwK0lISmxjMjlzZG1VcFhHNGdJQ0FnTHk5M2FXeHNJSEpsWVdOb0lIUm9aU0J5WlcxdmRHVWdiMkpxWldOMElHbHVJRVJoZEdGUFltcGxZM1JTWlhCdmNuUmxjaUF0UGlCZmIyNVNaV0ZrWEc0Z0lDQWdiR1YwSUhKbFlXUk5jMmNnUFNCN1hHNGdJQ0FnSUNCMGVYQmxPaUFuY21WaFpDY3NJR1p5YjIwNklGOTBhR2x6TGw5dmQyNWxjaXdnZEc4NklHOWlhbFZTVEZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2h5WldGa1RYTm5MQ0FvY21Wd2JIa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KM0psWVdRdGNtVnpjRzl1YzJVNklDY3NJSEpsY0d4NUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVnpiMngyWlNoeVpYQnNlUzVpYjJSNUxuWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb2NtVndiSGt1WW05a2VTNWtaWE5qS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJUWlhSMWNDQjBhR1VnWTJGc2JHSmhZMnNnZEc4Z2NISnZZMlZ6Y3lCamNtVmhkR1VnWVc1a0lHUmxiR1YwWlNCbGRtVnVkSE1nYjJZZ2NtVnRiM1psSUZKbGNHOXlkR1Z5SUc5aWFtVmpkSE11WEc0Z0lDb2dWR2hwY3lCcGN5QnlaV3hsWVhSbFpDQjBieUIwYUdVZ2JXVnpjMkZuWlc1eklITmxiblFnWW5rZ1kzSmxZWFJsSUhSdklIUm9aU0J2WW5ObGNuWmxjbk1nU0hsd1pYSjBlU0JoY25KaGVTNWNiaUFnS2lCQWNHRnlZVzBnZTJaMWJtTjBhVzl1S0dWMlpXNTBPaUJOYzJkRmRtVnVkQ2w5SUdOaGJHeGlZV05yWEc0Z0lDb3ZYRzRnSUc5dVRtOTBhV1pwWTJGMGFXOXVLR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdkR2hwY3k1ZmIyNU9iM1JwWm1sallYUnBiMjVJWVc1a2JHVnlJRDBnWTJGc2JHSmhZMnM3WEc0Z0lIMWNibHh1SUNCZlkzSmxZWFJsS0dOeWFYUmxjbWxoS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2dvY21WemIyeDJaU3dnY21WcVpXTjBLU0E5UGlCN1hHNGdJQ0FnSUNCc1pYUWdjbVZ6ZFcxbElEMGdZM0pwZEdWeWFXRXVjbVZ6ZFcxbE8xeHVJQ0FnSUNBZ2JHVjBJR2x1YVhScFlXeEVZWFJoSUQwZ1kzSnBkR1Z5YVdFdWFXNXBkR2xoYkVSaGRHRWdmSHdnZTMwN1hHNGdJQ0FnSUNCc1pYUWdjMk5vWlcxaE8xeHVYRzRnSUNBZ0lDQXZMMFpNVDFjdFQxVlVPaUIwYUdseklHMWxjM05oWjJVZ2QybHNiQ0JpWlNCelpXNTBJSFJ2SUhSb1pTQnlkVzUwYVcxbElHbHVjM1JoYm1ObElHOW1JRk41Ym1Ob1pYSk5ZVzVoWjJWeUlDMCtJRjl2YmtOeVpXRjBaVnh1SUNBZ0lDQWdiR1YwSUhKbGNYVmxjM1JOYzJjZ1BTQjdYRzRnSUNBZ0lDQWdJSFI1Y0dVNklDZGpjbVZoZEdVbkxDQm1jbTl0T2lCZmRHaHBjeTVmYjNkdVpYSXNJSFJ2T2lCZmRHaHBjeTVmYzNWaVZWSk1MRnh1SUNBZ0lDQWdJQ0JpYjJSNU9pQjdJSEpsYzNWdFpUb2djbVZ6ZFcxbElIMWNiaUFnSUNBZ0lIMDdYRzVjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkYmMzbHVZMmhsY2lBdElHTnlaV0YwWlYwNklDY3NJR055YVhSbGNtbGhMQ0J5WlhGMVpYTjBUWE5uS1R0Y2JseHVJQ0FnSUNBZ2NtVnhkV1Z6ZEUxelp5NWliMlI1TG5aaGJIVmxJRDBnYVc1cGRHbGhiRVJoZEdFN1hHNGdJQ0FnSUNCeVpYRjFaWE4wVFhObkxtSnZaSGt1ZG1Gc2RXVXVjbVZ3YjNKMFpYSWdQU0JmZEdocGN5NWZiM2R1WlhJN1hHNWNiaUFnSUNBZ0lHbG1JQ2hqY21sMFpYSnBZUzV6WTJobGJXRXBJSHRjYmlBZ0lDQWdJQ0FnYzJOb1pXMWhJRDBnWTNKcGRHVnlhV0V1YzJOb1pXMWhPMXh1SUNBZ0lDQWdJQ0J5WlhGMVpYTjBUWE5uTG1KdlpIa3VjMk5vWlcxaElEMGdZM0pwZEdWeWFXRXVjMk5vWlcxaE8xeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQnBaaUFvWTNKcGRHVnlhV0V1Y0RKd0tTQnlaWEYxWlhOMFRYTm5MbUp2WkhrdWNESndJRDBnWTNKcGRHVnlhV0V1Y0RKd08xeHVJQ0FnSUNBZ2FXWWdLR055YVhSbGNtbGhMbk4wYjNKbEtTQnlaWEYxWlhOMFRYTm5MbUp2WkhrdWMzUnZjbVVnUFNCamNtbDBaWEpwWVM1emRHOXlaVHRjYmlBZ0lDQWdJR2xtSUNoamNtbDBaWEpwWVM1dlluTmxjblpsY25NcElISmxjWFZsYzNSTmMyY3VZbTlrZVM1aGRYUm9iM0pwYzJVZ1BTQmpjbWwwWlhKcFlTNXZZbk5sY25abGNuTTdYRzVjYmlBZ0lDQWdJR2xtSUNoeVpYTjFiV1VwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXR6ZVc1amFHVnlJQzBnWTNKbFlYUmxYU0F0SUhKbGMzVnRaU0J0WlhOellXZGxPaUFuTENCeVpYRjFaWE4wVFhObktUdGNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiYzNsdVkyaGxjaUF0SUdOeVpXRjBaVjBnTFNCamNtVmhkR1VnYldWemMyRm5aVG9nSnl3Z2NtVnhkV1Z6ZEUxelp5azdYRzRnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQzh2Y21WeGRXVnpkQ0JqY21WaGRHVWdkRzhnZEdobElHRnNiRzlqWVhScGIyNGdjM2x6ZEdWdExpQkRZVzRnWW1VZ2NtVnFaV04wWldRZ1lua2dkR2hsSUZCdmJHbGplVVZ1WjJsdVpTNWNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvY21WeGRXVnpkRTF6Wnl3Z0tISmxjR3g1S1NBOVBpQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkYmMzbHVZMmhsY2lBdElHTnlaV0YwWlYwZ0xTQmpjbVZoZEdVdGNtVnpjRzl1YzJVNklDY3NJSEpsY0d4NUtUdGNiaUFnSUNBZ0lDQWdhV1lnS0hKbGNHeDVMbUp2WkhrdVkyOWtaU0E5UFQwZ01qQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0x5OXlaWEJ2Y25SbGNpQmpjbVZoZEdsdmJpQmhZMk5sY0hSbFpGeHVJQ0FnSUNBZ0lDQWdJR3hsZENCdlltcFZVa3dnUFNCeVpYQnNlUzVpYjJSNUxuSmxjMjkxY21ObE8xeHVYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tISmxjM1Z0WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJOb1pXMWhJRDBnY21Wd2JIa3VZbTlrZVM1elkyaGxiV0U3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBibWwwYVdGc1JHRjBZU0E5SUhKbGNHeDVMbUp2WkhrdWRtRnNkV1U3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnYkdWMElHNWxkMDlpYWlBOUlHNWxkeUJFWVhSaFQySnFaV04wVW1Wd2IzSjBaWElvWDNSb2FYTXNJRzlpYWxWU1RDd2djMk5vWlcxaExDQW5iMjRuTENCcGJtbDBhV0ZzUkdGMFlTd2djbVZ3YkhrdVltOWtlUzVqYUdsc1pISmxibEpsYzI5MWNtTmxjeWs3WEc0Z0lDQWdJQ0FnSUNBZ1gzUm9hWE11WDNKbGNHOXlkR1Z5YzF0dlltcFZVa3hkSUQwZ2JtVjNUMkpxTzF4dVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHVaWGRQWW1vcE8xeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2Y21Wd2IzSjBaWElnWTNKbFlYUnBiMjRnY21WcVpXTjBaV1JjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvY21Wd2JIa3VZbTlrZVM1a1pYTmpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnZlZ4dVhHNGdJRjl6ZFdKelkzSnBZbVVvWTNKcGRHVnlhV0VwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJRDArSUh0Y2JseHVJQ0FnSUNBZ0x5OUdURTlYTFU5VlZEb2dkR2hwY3lCdFpYTnpZV2RsSUhkcGJHd2dZbVVnYzJWdWRDQjBieUIwYUdVZ2NuVnVkR2x0WlNCcGJuTjBZVzVqWlNCdlppQlRlVzVqYUdWeVRXRnVZV2RsY2lBdFBpQmZiMjVNYjJOaGJGTjFZbk5qY21saVpWeHVJQ0FnSUNBZ2JHVjBJSE4xWW5OamNtbGlaVTF6WnlBOUlIdGNiaUFnSUNBZ0lDQWdkSGx3WlRvZ0ozTjFZbk5qY21saVpTY3NJR1p5YjIwNklGOTBhR2x6TGw5dmQyNWxjaXdnZEc4NklGOTBhR2x6TGw5emRXSlZVa3dzWEc0Z0lDQWdJQ0FnSUdKdlpIazZJSHQ5WEc0Z0lDQWdJQ0I5TzF4dVhHNGdJQ0FnSUNBdkx5QkllWEJsY25SNUlISmxjWFZsYzNRZ2RHOGdZbVVnWVc0Z1QySnpaWEoyWlhKY2JpQWdJQ0FnSUM4dklHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXlaVlJJU1U1TExYQnliMnBsWTNRdmMzQmxZM012WW14dllpOXRZWE4wWlhJdmJXVnpjMkZuWlhNdlpHRjBZUzF6ZVc1akxXMWxjM05oWjJWekxtMWtJMmg1Y0dWeWRIa3RjbVZ4ZFdWemRDMTBieTFpWlMxaGJpMXZZbk5sY25abGNseHVYRzRnSUNBZ0lDQXZMeUJTWlhOMWJXVWdVM1ZpYzJOeWFYQjBhVzl1Y3lCbWIzSWdkR2hsSUhOaGJXVWdTSGx3WlhKMGVTQlZVa3hjYmlBZ0lDQWdJQzh2SUdoMGRIQnpPaTh2WjJsMGFIVmlMbU52YlM5eVpWUklTVTVMTFhCeWIycGxZM1F2YzNCbFkzTXZZbXh2WWk5dFlYTjBaWEl2YldWemMyRm5aWE12WkdGMFlTMXplVzVqTFcxbGMzTmhaMlZ6TG0xa0kzSmxjM1Z0WlMxemRXSnpZM0pwY0hScGIyNXpMV1p2Y2kxMGFHVXRjMkZ0WlMxb2VYQmxjblI1TFhWeWJGeHVYRzRnSUNBZ0lDQXZMeUJTWlhOMWJXVWdVM1ZpYzJOeWFYQjBhVzl1Y3lCbWIzSWdZU0JqWlhKMFlXbHVJSFZ6WlhJZ1lXNWtJR1JoZEdFZ2MyTm9aVzFoSUdsdVpHVndaVzVrWlc1MGJIa2diMllnZEdobElFaDVjR1Z5ZEhrZ1ZWSk1MbHh1SUNBZ0lDQWdMeThnYUhSMGNITTZMeTluYVhSb2RXSXVZMjl0TDNKbFZFaEpUa3N0Y0hKdmFtVmpkQzl6Y0dWamN5OWliRzlpTDIxaGMzUmxjaTl0WlhOellXZGxjeTlrWVhSaExYTjVibU10YldWemMyRm5aWE11YldRamNtVnpkVzFsTFhOMVluTmpjbWx3ZEdsdmJuTXRabTl5TFdFdFkyVnlkR0ZwYmkxMWMyVnlMV0Z1WkMxa1lYUmhMWE5qYUdWdFlTMXBibVJsY0dWdVpHVnVkR3g1TFc5bUxYUm9aUzFvZVhCbGNuUjVMWFZ5YkZ4dUlDQWdJQ0FnYVdZZ0tHTnlhWFJsY21saEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoamNtbDBaWEpwWVM1b1lYTlBkMjVRY205d1pYSjBlU2duY0RKd0p5a3BJSE4xWW5OamNtbGlaVTF6Wnk1aWIyUjVMbkF5Y0NBOUlHTnlhWFJsY21saExuQXljRHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnlhWFJsY21saExtaGhjMDkzYmxCeWIzQmxjblI1S0NkemRHOXlaU2NwS1NCemRXSnpZM0pwWW1WTmMyY3VZbTlrZVM1emRHOXlaU0E5SUdOeWFYUmxjbWxoTG5OMGIzSmxPMXh1SUNBZ0lDQWdJQ0JwWmlBb1kzSnBkR1Z5YVdFdWFHRnpUM2R1VUhKdmNHVnlkSGtvSjNOamFHVnRZU2NwS1NCemRXSnpZM0pwWW1WTmMyY3VZbTlrZVM1elkyaGxiV0VnUFNCamNtbDBaWEpwWVM1elkyaGxiV0U3WEc0Z0lDQWdJQ0FnSUdsbUlDaGpjbWwwWlhKcFlTNW9ZWE5QZDI1UWNtOXdaWEowZVNnbmFXUmxiblJwZEhrbktTa2djM1ZpYzJOeWFXSmxUWE5uTG1KdlpIa3VhV1JsYm5ScGRIa2dQU0JqY21sMFpYSnBZUzVwWkdWdWRHbDBlVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHTnlhWFJsY21saExtaGhjMDkzYmxCeWIzQmxjblI1S0NkeVpYTnZkWEpqWlNjcEtTQnpkV0p6WTNKcFltVk5jMmN1WW05a2VTNXlaWE52ZFhKalpTQTlJR055YVhSbGNtbGhMbkpsYzI5MWNtTmxPMXh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JzWlhRZ2JYVjBkV0ZzUVhWMGFHVnVkR2xqWVhScGIyNGdQU0JqY21sMFpYSnBZUzV0ZFhSMVlXdzdYRzVjYmlBZ0lDQWdJSE4xWW5OamNtbGlaVTF6Wnk1aWIyUjVMbkpsYzNWdFpTQTlJR055YVhSbGNtbGhMbkpsYzNWdFpUdGNibHh1SUNBZ0lDQWdhV1lnS0NGdGRYUjFZV3hCZFhSb1pXNTBhV05oZEdsdmJpa2djM1ZpYzJOeWFXSmxUWE5uTG1KdlpIa3ViWFYwZFdGc1FYVjBhR1Z1ZEdsallYUnBiMjRnUFNCdGRYUjFZV3hCZFhSb1pXNTBhV05oZEdsdmJqdGNibHh1SUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0emVXNWphR1Z5WFNBdElITjFZbk5qY21saVpTQnRaWE56WVdkbE9pQW5MQ0JqY21sMFpYSnBZU3dnYzNWaWMyTnlhV0psVFhObktUdGNibHh1SUNBZ0lDQWdMeTl5WlhGMVpYTjBJSE4xWW5OamNtbHdkR2x2Ymx4dUlDQWdJQ0FnTHk5UWNtOTJhWE5wYjI1aGJDQmtZWFJoSUdseklHRndjR3hwWldRZ2RHOGdkR2hsSUVSaGRHRlBZbXBsWTNSUFluTmxjblpsY2lCaFpuUmxjaUJqYjI1bWFYSnRZWFJwYjI0dUlFOXlJR1JwYzJOaGNtUmxaQ0JwWmlCMGFHVnlaU0JwY3lCdWJ5QmpiMjVtYVhKdFlYUnBiMjR1WEc0Z0lDQWdJQ0F2TDJadmNpQnRiM0psSUdsdVptOGdjMlZsSUhSb1pTQkVZWFJoVUhKdmRtbHphVzl1WVd3Z1kyeGhjM01nWkc5amRXMWxiblJoZEdsdmJpNWNiaUFnSUNBZ0lGOTBhR2x6TGw5aWRYTXVjRzl6ZEUxbGMzTmhaMlVvYzNWaWMyTnlhV0psVFhObkxDQW9jbVZ3YkhrcElEMCtJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdHplVzVqYUdWeVhTQXRJSE4xWW5OamNtbGlaUzF5WlhOd2IyNXpaVG9nSnl3Z2NtVndiSGtwTzF4dVhHNGdJQ0FnSUNBZ0lHeGxkQ0J6WTJobGJXRWdQU0J5WlhCc2VTNWliMlI1TG5OamFHVnRZVHRjYmlBZ0lDQWdJQ0FnYkdWMElHOWlhbFZTVENBOUlISmxjR3g1TG1KdlpIa3VjbVZ6YjNWeVkyVTdYRzVjYmlBZ0lDQWdJQ0FnYkdWMElHNWxkMUJ5YjNacGMybHZibUZzSUQwZ1gzUm9hWE11WDNCeWIzWnBjMmx2Ym1Gc2MxdHZZbXBWVWt4ZE8xeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ1gzUm9hWE11WDNCeWIzWnBjMmx2Ym1Gc2MxdHZZbXBWVWt4ZE8xeHVJQ0FnSUNBZ0lDQnBaaUFvYm1WM1VISnZkbWx6YVc5dVlXd3BJRzVsZDFCeWIzWnBjMmx2Ym1Gc0xsOXlaV3hsWVhObFRHbHpkR1Z1WlhKektDazdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tISmxjR3g1TG1KdlpIa3VZMjlrWlNBOElESXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiYzNsdVkyaGxjbDBnTFNCdVpYY2dSR0YwWVZCeWIzWnBjMmx2Ym1Gc09pQW5MQ0J5WlhCc2VTNWliMlI1TG1Ob2FXeGtjbVZ1VW1WemIzVnlZMlZ6TENCdlltcFZVa3dwTzF4dUlDQWdJQ0FnSUNBZ0lHNWxkMUJ5YjNacGMybHZibUZzSUQwZ2JtVjNJRVJoZEdGUWNtOTJhWE5wYjI1aGJDaGZkR2hwY3k1ZmIzZHVaWElzSUc5aWFsVlNUQ3dnWDNSb2FYTXVYMkoxY3l3Z2NtVndiSGt1WW05a2VTNWphR2xzWkhKbGJsSmxjMjkxY21ObGN5azdYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYM0J5YjNacGMybHZibUZzYzF0dlltcFZVa3hkSUQwZ2JtVjNVSEp2ZG1semFXOXVZV3c3WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NtVndiSGt1WW05a2VTNWpiMlJsSUQwOVBTQXlNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzNONWJtTm9aWEpkSUMwZ2JtVjNJRVJoZEdFZ1QySnFaV04wSUU5aWMyVnlkbVZ5T2lBbkxDQnlaWEJzZVN3Z1gzUm9hWE11WDNCeWIzWnBjMmx2Ym1Gc2N5azdYRzVjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdibVYzVDJKcUlEMGdibVYzSUVSaGRHRlBZbXBsWTNSUFluTmxjblpsY2loZmRHaHBjeXdnYjJKcVZWSk1MQ0J6WTJobGJXRXNJQ2R2Ymljc0lISmxjR3g1TG1KdlpIa3VkbUZzZFdVc0lHNWxkMUJ5YjNacGMybHZibUZzTG1Ob2FXeGtjbVZ1TENCeVpYQnNlUzVpYjJSNUxuWmxjbk5wYjI0c0lHMTFkSFZoYkVGMWRHaGxiblJwWTJGMGFXOXVLVHRjYmlBZ0lDQWdJQ0FnSUNCZmRHaHBjeTVmYjJKelpYSjJaWEp6VzI5aWFsVlNURjBnUFNCdVpYZFBZbW83WEc1Y2JpQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtHNWxkMDlpYWlrN1hHNGdJQ0FnSUNBZ0lDQWdibVYzVUhKdmRtbHphVzl1WVd3dVlYQndiSGtvYm1WM1QySnFLVHRjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvY21Wd2JIa3VZbTlrZVM1a1pYTmpLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnZlZ4dVhHNGdJQzh2Umt4UFZ5MUpUam9nYldWemMyRm5aU0J5WldObGFYWmxaQ0JtY205dElHRWdiRzlqWVd3Z2NuVnVkR2x0WlNCU1pYQnZjblJsY2s5aWFtVmpkQ0F0UGlCZmIyNVNaVzF2ZEdWVGRXSnpZM0pwWW1WY2JpQWdYMjl1Um05eWQyRnlaQ2h0YzJjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnYkdWMElISmxjRzl5ZEdWeUlEMGdYM1JvYVhNdVgzSmxjRzl5ZEdWeWMxdHRjMmN1WW05a2VTNTBiMTA3WEc0Z0lDQWdjbVZ3YjNKMFpYSXVYMjl1Um05eWQyRnlaQ2h0YzJjcE8xeHVJQ0I5WEc1Y2JpQWdMeTlHVEU5WExVbE9PaUJ0WlhOellXZGxJSEpsWTJWcGRtVmtJR1p5YjIwZ1lTQnlaVzF2ZEdVZ1UzbHVZMmhsY2lBdFBpQmpjbVZoZEdVZ0tIUm9hWE1nYVhNZ1lXTjBkV0ZzYkhrZ1lXNGdhVzUyYVhSaGRHbHZiaUIwYnlCemRXSnpZM0pwWW1VcFhHNGdJRjl2YmxKbGJXOTBaVU55WldGMFpTaHRjMmNwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1WEc0Z0lDQXZMM0psYlc5MlpTQmNJaTl6ZFdKelkzSnBjSFJwYjI1Y0lpQm1jbTl0SUhSb1pTQlZVa3hjYmlBZ0lHeGxkQ0J5WlhOdmRYSmpaU0E5SUcxelp5NW1jbTl0TG5Oc2FXTmxLREFzSUMweE15azdYRzVjYmlBZ0lHeGxkQ0JsZG1WdWRDQTlJSHRjYmlBZ0lDQWdkSGx3WlRvZ2JYTm5MblI1Y0dVc1hHNGdJQ0FnSUdaeWIyMDZJRzF6Wnk1aWIyUjVMbk52ZFhKalpTeGNiaUFnSUNBZ2RYSnNPaUJ5WlhOdmRYSmpaU3hjYmlBZ0lDQWdjMk5vWlcxaE9pQnRjMmN1WW05a2VTNXpZMmhsYldFc1hHNGdJQ0FnSUhaaGJIVmxPaUJ0YzJjdVltOWtlUzUyWVd4MVpTeGNiaUFnSUNBZ2FXUmxiblJwZEhrNklHMXpaeTVpYjJSNUxtbGtaVzUwYVhSNUxGeHVYRzRnSUNBZ0lHRmphem9nS0hSNWNHVXBJRDArSUh0Y2JpQWdJQ0FnSUNCc1pYUWdiRlI1Y0dVZ1BTQXlNREE3WEc0Z0lDQWdJQ0FnYVdZZ0tIUjVjR1VwSUh0Y2JpQWdJQ0FnSUNBZ0lHeFVlWEJsSUQwZ2RIbHdaVHRjYmlBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBdkwzTmxibVFnWVdOcklISmxjM0J2Ym5ObElHMWxjM05oWjJWY2JpQWdJQ0FnSUNCZmRHaHBjeTVmWW5WekxuQnZjM1JOWlhOellXZGxLSHRjYmlBZ0lDQWdJQ0FnSUdsa09pQnRjMmN1YVdRc0lIUjVjR1U2SUNkeVpYTndiMjV6WlNjc0lHWnliMjA2SUcxelp5NTBieXdnZEc4NklHMXpaeTVtY205dExGeHVJQ0FnSUNBZ0lDQWdZbTlrZVRvZ2V5QmpiMlJsT2lCc1ZIbHdaU0I5WEc0Z0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUgxY2JpQWdJSDA3WEc1Y2JpQWdJR2xtSUNoZmRHaHBjeTVmYjI1T2IzUnBabWxqWVhScGIyNUlZVzVrYkdWeUtTQjdYRzRnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzFONWJtTm9aWEpkSUU1UFZFbEdTVU5CVkVsUFRpMUZWa1ZPVkRvZ0p5d2daWFpsYm5RcE8xeHVJQ0FnSUNCZmRHaHBjeTVmYjI1T2IzUnBabWxqWVhScGIyNUlZVzVrYkdWeUtHVjJaVzUwS1R0Y2JpQWdJSDFjYmlBZ2ZWeHVYRzRnSUM4dlJreFBWeTFKVGpvZ2JXVnpjMkZuWlNCeVpXTmxhWFpsWkNCbWNtOXRJR0VnY21WdGIzUmxJRVJoZEdGUFltcGxZM1JTWlhCdmNuUmxjaUF0UGlCa1pXeGxkR1ZjYmlBZ1gyOXVVbVZ0YjNSbFJHVnNaWFJsS0cxelp5a2dlMXh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNWNiaUFnSUM4dmNtVnRiM1psSUZ3aUwzTjFZbk5qY21sd2RHbHZibHdpSUdaeWIyMGdkR2hsSUZWU1RGeHVJQ0FnYkdWMElISmxjMjkxY21ObElEMGdiWE5uTG1KdlpIa3VjbVZ6YjNWeVkyVTdYRzVjYmlBZ0lHeGxkQ0J2WW1wbFkzUWdQU0JmZEdocGN5NWZiMkp6WlhKMlpYSnpXM0psYzI5MWNtTmxYVHRjYmlBZ0lHbG1JQ2h2WW1wbFkzUXBJSHRjYmlBZ0lDQWdiR1YwSUdWMlpXNTBJRDBnZTF4dUlDQWdJQ0FnSUhSNWNHVTZJRzF6Wnk1MGVYQmxMRnh1SUNBZ0lDQWdJSFZ5YkRvZ2NtVnpiM1Z5WTJVc1hHNGdJQ0FnSUNBZ2FXUmxiblJwZEhrNklHMXpaeTVpYjJSNUxtbGtaVzUwYVhSNUxGeHVYRzRnSUNBZ0lDQWdZV05yT2lBb2RIbHdaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdiR1YwSUd4VWVYQmxJRDBnTWpBd08xeHVJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ2JGUjVjR1VnUFNCMGVYQmxPMXh1SUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQXZMMVJQUkU4NklHRnVlU0J2ZEdobGNpQmthV1ptWlhKbGJuUWdiM0IwYVc5dWN5Qm1iM0lnZEdobElISmxiR1ZoYzJVZ2NISnZZMlZ6Y3l3Z2JHbHJaU0JoWTJObGNIUWdZblYwSUc1dmNpQnlaV3hsWVhObElHeHZZMkZzUDF4dUlDQWdJQ0FnSUNBZ2FXWWdLR3hVZVhCbElEMDlQU0F5TURBcElIdGNiaUFnSUNBZ0lDQWdJQ0FnYjJKcVpXTjBMbVJsYkdWMFpTZ3BPMXh1SUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdMeTl6Wlc1a0lHRmpheUJ5WlhOd2IyNXpaU0J0WlhOellXZGxYRzRnSUNBZ0lDQWdJQ0FnWDNSb2FYTXVYMkoxY3k1d2IzTjBUV1Z6YzJGblpTaDdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFpEb2diWE5uTG1sa0xDQjBlWEJsT2lBbmNtVnpjRzl1YzJVbkxDQm1jbTl0T2lCdGMyY3VkRzhzSUhSdk9pQnRjMmN1Wm5KdmJTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdKdlpIazZJSHNnWTI5a1pUb2diRlI1Y0dVc0lITnZkWEpqWlRvZ1gzUm9hWE11WDI5M2JtVnlJSDFjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVHRjYmx4dUlDQWdJQ0FnYVdZZ0tGOTBhR2x6TGw5dmJrNXZkR2xtYVdOaGRHbHZia2hoYm1Sc1pYSXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0owNVBWRWxHU1VOQlZFbFBUaTFGVmtWT1ZEb2dKeXdnWlhabGJuUXBPMXh1SUNBZ0lDQWdJQ0JmZEdocGN5NWZiMjVPYjNScFptbGpZWFJwYjI1SVlXNWtiR1Z5S0dWMlpXNTBLVHRjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ1gzUm9hWE11WDJKMWN5NXdiM04wVFdWemMyRm5aU2g3WEc0Z0lDQWdJQ0FnSUdsa09pQnRjMmN1YVdRc0lIUjVjR1U2SUNkeVpYTndiMjV6WlNjc0lHWnliMjA2SUcxelp5NTBieXdnZEc4NklHMXpaeTVtY205dExGeHVJQ0FnSUNBZ0lDQmliMlI1T2lCN0lHTnZaR1U2SURRd05Dd2djMjkxY21ObE9pQmZkR2hwY3k1ZmIzZHVaWElnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dUlDQjlYRzVjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1UzbHVZMmhsY2p0Y2JseHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUF1TDNOeVl5OXplVzVqYUdWeUwxTjVibU5vWlhJdWFuTWlMQ0l2S2lwY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1VGUWdTVzV2ZG1IRHA4T2pieUJsSUZOcGMzUmxiV0Z6SUZOQlhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklFbE9SVk5ETFVsRVhHNHFJRU52Y0hseWFXZG9kQ0F5TURFMklGRlZUMEpKVXlCT1JWUlhUMUpMVXlCVFRGeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkdVa0ZWVGtoUFJrVlNMVWRGVTBWTVRGTkRTRUZHVkNCYVZWSWdSazlGVWtSRlVsVk9SeUJFUlZJZ1FVNUhSVmRCVGtSVVJVNGdSazlTVTBOSVZVNUhJRVV1Vmx4dUtpQkRiM0I1Y21sbmFIUWdNakF4TmlCUFVrRk9SMFVnVTBGY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1JHVjFkSE5qYUdVZ1ZHVnNaV3R2YlNCQlIxeHVLaUJEYjNCNWNtbG5hSFFnTWpBeE5pQkJjR2w2WldWY2Jpb2dRMjl3ZVhKcFoyaDBJREl3TVRZZ1ZFVkRTRTVKVTBOSVJTQlZUa2xXUlZKVFNWUkJWQ0JDUlZKTVNVNWNiaXBjYmlvZ1RHbGpaVzV6WldRZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsSUZ3aVRHbGpaVzV6WlZ3aUtUdGNiaW9nZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlNCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGx4dUtpQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlwY2Jpb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaXBjYmlvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MQ0J6YjJaMGQyRnlaVnh1S2lCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhiaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNYRzRxSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dTQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGx4dUtpQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlNCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrWEc0cUlHeHBiV2wwWVhScGIyNXpJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1S2lvdlhHNWNiaThxS2x4dUlDb2dRR0ZqWTJWemN5QndjbWwyWVhSbFhHNGdLaUJVYUdseklHTnNZWE56SUdseklISmxjM0J2Ym5OcFlteGxJR1p2Y2lCamIyeHNaV04wYVc1bklHUmxiSFJoSUdOb1lXNW5aWE1nYVc0Z2NtVnRiM1JsSUc5aWFtVmpkSE1zSUdKbFptOXlaU0IwYUdVZ2NtVnpjRzl1YzJVZ2IyWWdjM1ZpYzJOeWFYQjBhVzl1SUhKbFlXTm9JSFJvWlNCdlluTmxjblpsY2k1Y2JpQXFJRWwwSjNNZ2RYTmxaQ0JwYmlCVGVXNWphR1Z5SUMwK0lITjFZbk5qY21saVpTNGdWR2hsSUdac2IzY2dhWE1nWkdWbWFXNWxaQ0JoY3pwY2JpQXFJREV1SUNodlluTmxjblpsY2lrZ0xTMXpkV0p6WTNKcFltVXRMVDRnS0hKbGNHOXlkR1Z5S1Z4dUlDb2dNaTRnS0c5aWMyVnlkbVZ5S1NBOExTMWtaV3gwWVNCMWNHUmhkR1Z6TFMwZ0tISmxjRzl5ZEdWeUtWeHVJQ29nTXk0Z0tHOWljMlZ5ZG1WeUtTQThMUzF6ZFdKelkzSnBZbVVnY21WemNHOXVjMlV0TFNBb2NtVndiM0owWlhJcFhHNGdLaUJVYUdseklHMWxZVzV6SUhSb1lYUWdkR2hsY21VZ1kyOTFiR1FnWW1VZ1pHVnNkR0VnZFhCa1lYUmxjeUIwY21GdWMyWmxjbkpsWkNCaVpXWnZjbVVnZEdobElITjFZbk5qY21sd2RHbHZiaUJqYjI1bWFYSnRZWFJwYjI0dVhHNGdLaUJUYVc1alpTQjBhR1Z5WlNCcGN5QnVieUJFWVhSaFQySnFaV04wVDJKelpYSjJaWElnWW1WbWIzSmxJSFJvWlNCMVluTmpjbWx3ZEdsdmJpQmpiMjVtYVhKdFlYUnBiMjRzSUhSb1pYSmxJSE5vYjNWc1pDQmlaU0J6YjIxbElHOTBhR1Z5SUc5aWFtVmpkQ0JqYjJ4c1pXTjBhVzVuSUhSb1pTQjFjR1JoZEdWekxseHVJQ29nVUhKdmRtbHphVzl1WVd3Z1pHRjBZU0JwY3lCaGNIQnNhV1ZrSUhSdklIUm9aU0JFWVhSaFQySnFaV04wVDJKelpYSjJaWElnWVdaMFpYSWdZMjl1Wm1seWJXRjBhVzl1TGlCUGNpQmthWE5qWVhKa1pXUWdhV1lnZEdobGNtVWdhWE1nYm04Z1kyOXVabWx5YldGMGFXOXVMbHh1SUNvdlhHNWpiR0Z6Y3lCRVlYUmhVSEp2ZG1semFXOXVZV3dnZTF4dUlDQXZLaUJ3Y21sMllYUmxYRzRnSUY5amFHbHNaSEpsYmt4cGMzUmxibVZ5Y3pvZ1cwMXpaMHhwYzNSbGJtVnlYVnh1SUNCZmJHbHpkR1Z1WlhJNklFMXpaMHhwYzNSbGJtVnlYRzVjYmlBZ1gyTm9ZVzVuWlhNNklGdGRYRzRnSUNvdlhHNWNiaUFnWTI5dWMzUnlkV04wYjNJb2IzZHVaWElzSUhWeWJDd2dZblZ6TENCamFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZiM2R1WlhJZ1BTQnZkMjVsY2p0Y2JpQWdJQ0JmZEdocGN5NWZkWEpzSUQwZ2RYSnNPMXh1SUNBZ0lGOTBhR2x6TGw5aWRYTWdQU0JpZFhNN1hHNGdJQ0FnWDNSb2FYTXVYMk5vYVd4a2NtVnVJRDBnWTJocGJHUnlaVzQ3WEc1Y2JpQWdJQ0JmZEdocGN5NWZZMmhoYm1kbGN5QTlJRnRkTzF4dUlDQWdJRjkwYUdsekxsOWhiR3h2WTJGMFpVeHBjM1JsYm1WeWN5Z3BPMXh1SUNCOVhHNWNiaUFnWDJGc2JHOWpZWFJsVEdsemRHVnVaWEp6S0NrZ2UxeHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc1Y2JpQWdJQ0JmZEdocGN5NWZiR2x6ZEdWdVpYSWdQU0JmZEdocGN5NWZZblZ6TG1Ga1pFeHBjM1JsYm1WeUtGOTBhR2x6TGw5MWNtd3NJQ2h0YzJjcElEMCtJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkRVlYUmhVSEp2ZG1semFXOXVZV3d0SnlBcklGOTBhR2x6TGw5MWNtd2dLeUFuTFZKRFZqb2dKeXdnYlhObktUdGNiaUFnSUNBZ0lGOTBhR2x6TGw5amFHRnVaMlZ6TG5CMWMyZ29iWE5uS1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0FnSUM4cVhHNGdJQ0FnWDNSb2FYTXVYMk5vYVd4a2NtVnVUR2x6ZEdWdVpYSnpJRDBnVzEwN1hHNGdJQ0FnYVdZZ0tGOTBhR2x6TGw5amFHbHNaSEpsYmlrZ2UxeHVJQ0FnSUNBZ2JHVjBJR05vYVd4a1FtRnpaVlZTVENBOUlIVnliQ0FySUNjdlkyaHBiR1J5Wlc0dkp6dGNiaUFnSUNBZ0lGOTBhR2x6TGw5amFHbHNaSEpsYmk1bWIzSkZZV05vS0NoamFHbHNaQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnNaWFFnWTJocGJHUlZVa3dnUFNCamFHbHNaRUpoYzJWVlVrd2dLeUJqYUdsc1pEdGNiaUFnSUNBZ0lDQWdiR1YwSUd4cGMzUmxibVZ5SUQwZ1gzUm9hWE11WDJKMWN5NWhaR1JNYVhOMFpXNWxjaWhqYUdsc1pGVlNUQ3dnS0cxelp5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZhV2R1YjNKbElHMXpaeUJ6Wlc1MElHSjVJR2hwYlhObGJHWmNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JYTm5MbVp5YjIwZ0lUMDlJRzkzYm1WeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aHRjMmNwTzF4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ1gzUm9hWE11WDJOb2FXeGtjbVZ1VEdsemRHVnVaWEp6TG5CMWMyZ29iR2x6ZEdWdVpYSXBPMXh1SUNBZ0lDQWdmU2s3WEc0Z0lDQWdmU292WEc0Z0lIMWNibHh1SUNCZmNtVnNaV0Z6WlV4cGMzUmxibVZ5Y3lncElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWDNSb2FYTXVYMnhwYzNSbGJtVnlMbkpsYlc5MlpTZ3BPMXh1WEc0Z0lDQWdMeXBmZEdocGN5NWZZMmhwYkdSeVpXNU1hWE4wWlc1bGNuTXVabTl5UldGamFDZ29iR2x6ZEdWdVpYSXBJRDArSUh0Y2JpQWdJQ0FnSUd4cGMzUmxibVZ5TG5KbGJXOTJaU2dwTzF4dUlDQWdJSDBwT3lvdlhHNGdJSDFjYmx4dUlDQm5aWFFnWTJocGJHUnlaVzRvS1NCN0lISmxkSFZ5YmlCMGFHbHpMbDlqYUdsc1pISmxianNnZlZ4dVhHNGdJR0Z3Y0d4NUtHOWljMlZ5ZG1WeUtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JpQWdJQ0JmZEdocGN5NWZZMmhoYm1kbGN5NW1iM0pGWVdOb0tDaGphR0Z1WjJVcElEMCtJSHRjYmlBZ0lDQWdJRzlpYzJWeWRtVnlMbDlqYUdGdVoyVlBZbXBsWTNRb2IySnpaWEoyWlhJdVgzTjVibU5QWW1vc0lHTm9ZVzVuWlNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1JHRjBZVkJ5YjNacGMybHZibUZzTzF4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YzNKakwzTjVibU5vWlhJdlJHRjBZVkJ5YjNacGMybHZibUZzTG1weklpd2liVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQjdJRndpWkdWbVlYVnNkRndpT2lCeVpYRjFhWEpsS0Z3aVkyOXlaUzFxY3k5c2FXSnlZWEo1TDJadUwyOWlhbVZqZEM5aGMzTnBaMjVjSWlrc0lGOWZaWE5OYjJSMWJHVTZJSFJ5ZFdVZ2ZUdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlltRmlaV3d0Y25WdWRHbHRaUzlqYjNKbExXcHpMMjlpYW1WamRDOWhjM05wWjI0dWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERXpObHh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIc2dYQ0prWldaaGRXeDBYQ0k2SUhKbGNYVnBjbVVvWENKamIzSmxMV3B6TDJ4cFluSmhjbmt2Wm00dmIySnFaV04wTDJkbGRDMXZkMjR0Y0hKdmNHVnlkSGt0WkdWelkzSnBjSFJ2Y2x3aUtTd2dYMTlsYzAxdlpIVnNaVG9nZEhKMVpTQjlPMXh1WEc1Y2JpOHZMeTh2THk4dkx5OHZMeTh2THk4dkwxeHVMeThnVjBWQ1VFRkRTeUJHVDA5VVJWSmNiaTh2SUM0dmZpOWlZV0psYkMxeWRXNTBhVzFsTDJOdmNtVXRhbk12YjJKcVpXTjBMMmRsZEMxdmQyNHRjSEp2Y0dWeWRIa3RaR1Z6WTNKcGNIUnZjaTVxYzF4dUx5OGdiVzlrZFd4bElHbGtJRDBnTVRNNFhHNHZMeUJ0YjJSMWJHVWdZMmgxYm10eklEMGdNQ0lzSW5KbGNYVnBjbVVvSnk0dUx5NHVMMjF2WkhWc1pYTXZaWE0yTG05aWFtVmpkQzVoYzNOcFoyNG5LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnY21WeGRXbHlaU2duTGk0dkxpNHZiVzlrZFd4bGN5OWZZMjl5WlNjcExrOWlhbVZqZEM1aGMzTnBaMjQ3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZZWE56YVdkdUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhORE5jYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lpd2ljbVZ4ZFdseVpTZ25MaTR2TGk0dmJXOWtkV3hsY3k5bGN6WXViMkpxWldOMExtZGxkQzF2ZDI0dGNISnZjR1Z5ZEhrdFpHVnpZM0pwY0hSdmNpY3BPMXh1ZG1GeUlDUlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk5dGIyUjFiR1Z6TDE5amIzSmxKeWt1VDJKcVpXTjBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUJuWlhSUGQyNVFjbTl3WlhKMGVVUmxjMk55YVhCMGIzSW9hWFFzSUd0bGVTbDdYRzRnSUhKbGRIVnliaUFrVDJKcVpXTjBMbWRsZEU5M2JsQnliM0JsY25SNVJHVnpZM0pwY0hSdmNpaHBkQ3dnYTJWNUtUdGNibjA3WEc1Y2JseHVMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVbHh1THk4Z0xpOStMMk52Y21VdGFuTXZiR2xpY21GeWVTOW1iaTl2WW1wbFkzUXZaMlYwTFc5M2JpMXdjbTl3WlhKMGVTMWtaWE5qY21sd2RHOXlMbXB6WEc0dkx5QnRiMlIxYkdVZ2FXUWdQU0F4TkRWY2JpOHZJRzF2WkhWc1pTQmphSFZ1YTNNZ1BTQXdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVMeThnTVRrdU1TNHlMakVnVDJKcVpXTjBMbUZ6YzJsbmJpaDBZWEpuWlhRc0lITnZkWEpqWlN3Z0xpNHVLVnh1ZG1GeUlHZGxkRXRsZVhNZ0lEMGdjbVZ4ZFdseVpTZ25MaTlmYjJKcVpXTjBMV3RsZVhNbktWeHVJQ0FzSUdkUFVGTWdJQ0FnSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjSE1uS1Z4dUlDQXNJSEJKUlNBZ0lDQWdJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFhCcFpTY3BYRzRnSUN3Z2RHOVBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTkwYnkxdlltcGxZM1FuS1Z4dUlDQXNJRWxQWW1wbFkzUWdJRDBnY21WeGRXbHlaU2duTGk5ZmFXOWlhbVZqZENjcFhHNGdJQ3dnSkdGemMybG5iaUFnUFNCUFltcGxZM1F1WVhOemFXZHVPMXh1WEc0dkx5QnphRzkxYkdRZ2QyOXlheUIzYVhSb0lITjViV0p2YkhNZ1lXNWtJSE5vYjNWc1pDQm9ZWFpsSUdSbGRHVnliV2x1YVhOMGFXTWdjSEp2Y0dWeWRIa2diM0prWlhJZ0tGWTRJR0oxWnlsY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0lTUmhjM05wWjI0Z2ZId2djbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaWdwZTF4dUlDQjJZWElnUVNBOUlIdDlYRzRnSUNBZ0xDQkNJRDBnZTMxY2JpQWdJQ0FzSUZNZ1BTQlRlVzFpYjJ3b0tWeHVJQ0FnSUN3Z1N5QTlJQ2RoWW1Oa1pXWm5hR2xxYTJ4dGJtOXdjWEp6ZENjN1hHNGdJRUZiVTEwZ1BTQTNPMXh1SUNCTExuTndiR2wwS0NjbktTNW1iM0pGWVdOb0tHWjFibU4wYVc5dUtHc3BleUJDVzJ0ZElEMGdhenNnZlNrN1hHNGdJSEpsZEhWeWJpQWtZWE56YVdkdUtIdDlMQ0JCS1Z0VFhTQWhQU0EzSUh4OElFOWlhbVZqZEM1clpYbHpLQ1JoYzNOcFoyNG9lMzBzSUVJcEtTNXFiMmx1S0NjbktTQWhQU0JMTzF4dWZTa2dQeUJtZFc1amRHbHZiaUJoYzNOcFoyNG9kR0Z5WjJWMExDQnpiM1Z5WTJVcGV5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUhaaGNpQlVJQ0FnSUNBOUlIUnZUMkpxWldOMEtIUmhjbWRsZENsY2JpQWdJQ0FzSUdGTVpXNGdJRDBnWVhKbmRXMWxiblJ6TG14bGJtZDBhRnh1SUNBZ0lDd2dhVzVrWlhnZ1BTQXhYRzRnSUNBZ0xDQm5aWFJUZVcxaWIyeHpJRDBnWjA5UVV5NW1YRzRnSUNBZ0xDQnBjMFZ1ZFcwZ0lDQWdJRDBnY0VsRkxtWTdYRzRnSUhkb2FXeGxLR0ZNWlc0Z1BpQnBibVJsZUNsN1hHNGdJQ0FnZG1GeUlGTWdJQ0FnSUNBOUlFbFBZbXBsWTNRb1lYSm5kVzFsYm5SelcybHVaR1Y0S3l0ZEtWeHVJQ0FnSUNBZ0xDQnJaWGx6SUNBZ1BTQm5aWFJUZVcxaWIyeHpJRDhnWjJWMFMyVjVjeWhUS1M1amIyNWpZWFFvWjJWMFUzbHRZbTlzY3loVEtTa2dPaUJuWlhSTFpYbHpLRk1wWEc0Z0lDQWdJQ0FzSUd4bGJtZDBhQ0E5SUd0bGVYTXViR1Z1WjNSb1hHNGdJQ0FnSUNBc0lHb2dJQ0FnSUNBOUlEQmNiaUFnSUNBZ0lDd2dhMlY1TzF4dUlDQWdJSGRvYVd4bEtHeGxibWQwYUNBK0lHb3BhV1lvYVhORmJuVnRMbU5oYkd3b1V5d2dhMlY1SUQwZ2EyVjVjMXRxS3l0ZEtTbFVXMnRsZVYwZ1BTQlRXMnRsZVYwN1hHNGdJSDBnY21WMGRYSnVJRlE3WEc1OUlEb2dKR0Z6YzJsbmJqdGNibHh1WEc0dkx5OHZMeTh2THk4dkx5OHZMeTh2THk5Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU1hHNHZMeUF1TDM0dlkyOXlaUzFxY3k5c2FXSnlZWEo1TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFoYzNOcFoyNHVhbk5jYmk4dklHMXZaSFZzWlNCcFpDQTlJREUwTmx4dUx5OGdiVzlrZFd4bElHTm9kVzVyY3lBOUlEQWlMQ0l2THlBeE9TNHhMak11TVNCUFltcGxZM1F1WVhOemFXZHVLSFJoY21kbGRDd2djMjkxY21ObEtWeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNibHh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZc0lDZFBZbXBsWTNRbkxDQjdZWE56YVdkdU9pQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRZWE56YVdkdUp5bDlLVHRjYmx4dVhHNHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNYRzR2THlBdUwzNHZZMjl5WlMxcWN5OXNhV0p5WVhKNUwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWhjM05wWjI0dWFuTmNiaTh2SUcxdlpIVnNaU0JwWkNBOUlERTBPVnh1THk4Z2JXOWtkV3hsSUdOb2RXNXJjeUE5SURBaUxDSXZMeUF4T1M0eExqSXVOaUJQWW1wbFkzUXVaMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUtFOHNJRkFwWEc1MllYSWdkRzlKVDJKcVpXTjBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHZZbXBsWTNRbktWeHVJQ0FzSUNSblpYUlBkMjVRY205d1pYSjBlVVJsYzJOeWFYQjBiM0lnUFNCeVpYRjFhWEpsS0NjdUwxOXZZbXBsWTNRdFoyOXdaQ2NwTG1ZN1hHNWNibkpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzF6WVhBbktTZ25aMlYwVDNkdVVISnZjR1Z5ZEhsRVpYTmpjbWx3ZEc5eUp5d2dablZ1WTNScGIyNG9LWHRjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUdkbGRFOTNibEJ5YjNCbGNuUjVSR1Z6WTNKcGNIUnZjaWhwZEN3Z2EyVjVLWHRjYmlBZ0lDQnlaWFIxY200Z0pHZGxkRTkzYmxCeWIzQmxjblI1UkdWelkzSnBjSFJ2Y2loMGIwbFBZbXBsWTNRb2FYUXBMQ0JyWlhrcE8xeHVJQ0I5TzF4dWZTazdYRzVjYmx4dUx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVseHVMeThnTGk5K0wyTnZjbVV0YW5NdmJHbGljbUZ5ZVM5dGIyUjFiR1Z6TDJWek5pNXZZbXBsWTNRdVoyVjBMVzkzYmkxd2NtOXdaWEowZVMxa1pYTmpjbWx3ZEc5eUxtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOVEZjYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lpd2lMeThnSUNBZ0lIQnliM2g1TFc5aWMyVnlkbVVnZGpBdU1DNHhPRnh5WEc0dkx5QWdJQ0FnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUxTENBeU1ERTJJRk5wYlc5dUlGa3VJRUpzWVdOcmQyVnNiQ3dnUVc1NVYyaHBZMmhYWVhsY2NseHVMeThnSUNBZ0lFMUpWQ0JNYVdObGJuTmxJQzBnYUhSMGNEb3ZMMjl3Wlc1emIzVnlZMlV1YjNKbkwyeHBZMlZ1YzJWekwyMXBkQzFzYVdObGJuTmxMbkJvY0Z4eVhHNG9ablZ1WTNScGIyNG9LU0I3WEhKY2JseDBYQ0oxYzJVZ2MzUnlhV04wWENJN1hISmNibHgwTHk4Z1EzSmxZWFJsY3lCaGJtUWdjbVYwZFhKdWN5QmhJRkJ5YjNoNUlIZHlZWEJ3YVc1bklHRWdkR0Z5WjJWMElITnZJSFJvWVhRZ1lXeHNJR05vWVc1blpYTWdZMkZ1SUdKbElIUnlZWEJ3WldRZ1lXNWtJR1p2Y25kaGNtUmxaQ0IwYjF4eVhHNWNkQzh2SUdFZ1kyRnNiR0poWTJzdUlGUm9aU0JqWVd4c1ltRmpheUIwWVd0bGN5QmhiaUJoY25KaGVTQnZaaUJqYUdGdVoyVnpJR3AxYzNRZ2JHbHJaU0IwYUdVZ2RISmhaR2wwYVc5dVlXd2diM0pwWjJsdVlXd2dRMmh5YjIxbElFOWlhbVZqZEM1dlluTmxjblpsWEhKY2JseDBMeThnZTI5aWFtVmpkRG84YjJKcVpXTjBJR05vWVc1blpXUStMRzVoYldVNlBHWnBaV3hrSUdOb1lXNW5aV1ErTEhSNWNHVTZZV1JrZkhWd1pHRjBaWHhrWld4bGRHVjhjbVZqYjI1bWFXZDFjbVY4Y0hKbGRtVnVkRVY0ZEdWdWMybHZibk44YzJWMFVISnZkRzkwZVhCbExHOXNaRlpoYkhWbE9qeHZiR1FnZG1Gc2RXVWdhV1lnZFhCa1lYUmxJSHdnWkdWc1pYUmxQbjFjY2x4dVhIUXZMeUJVYUdVZ1lXTmpaWEIwYkdsemRDQmpZVzRnWW1VZ1lXUmtmSFZ3WkdGMFpYeGtaV3hsZEdWOGNtVmpiMjVtYVdkMWNtVjhjSEpsZG1WdWRFVjRkR1Z1YzJsdmJuTjhjMlYwVUhKdmRHOTBlWEJsTGx4eVhHNWNkQzh2SUhZZ01DNHdMakV3SUhSdklITjFjSEJ2Y25RZ2NHRjFjMmx1WnlCaGJtUWdjbVZ6ZEdGeWRHbHVaeUJ2WW5ObGNuWmhkR2x2YmlCMGQyOGdZV1JrYVhScGIyNWhiQ0JqYjI1emRISjFZM1J2Y2lCaGNtZDFiV1Z1ZEhNZ1lYSmxJR0YyWVdsc1lXSnNaU0IwYnlCUFltcGxZM1F1YjJKelpYSjJaVHBjY2x4dVhIUXZMeUJ3WVhWellXSnNaU0F0SUdOeVpXRjBaU0IwYUdVZ1QySnpaWEoyWlhJZ2MyOGdhWFFnWTJGdUlHSmxJSEJoZFhObFpGeHlYRzVjZEM4dklIQmhkWE5sSUMwZ1kzSmxZWFJsSUc5aWMyVnlkbVZ5SUdsdUlIQmhkWE5sWkNCemRHRjBaVnh5WEc1Y2RDOHZJR2xtSUhCaGRYTmhZbXhsSUdseklIUnlkV1VnZEdobGJpQmhiaUJoWkdScGRHbHZibUZzSUcxbGRHaHZaQ0JrWld4cGRtVnlLR2xuYm05eVpWQnlaWFpwYjNWektTQnBjeUJoZG1GcGJHRmliR1VnZEc4Z2MzUmhjblFnWkdWc2FYWmxjbmxjY2x4dVhIUXZMeUIwYnlCd1lYVnpaU0JrWld4cGRtVnllU0J6WlhRZ1lTQndjbTl3WlhKMGVTQmpZV3hzWldRZ2NHRjFjMlVnYjI0Z2RHaGxJR1oxYm1OMGFXOXVJR1JsYkdsMlpYSWdkRzhnZEhKMVpWeHlYRzVjZEM4dklIQmhkWE5oWW14bElHbHpJRzl3ZEdsdmJtRnNJSFJ2SUhKbFpIVmpaU0IwYUdVZ1kyaGhibU5sSUc5bUlITm9ZV1J2ZDJsdVp5QmhJSEJ5YjNCbGNuUjVJRzl5SUcxbGRHaHZaQ0J2YmlCaGJua2daWGhwYzNScGJtY2dZMjlrWlNCallXeHNaV1FnWkdWc2FYWmxjbHh5WEc1Y2RHbG1LQ0ZQWW1wbFkzUXViMkp6WlhKMlpTQW1KaUIwZVhCbGIyWW9VSEp2ZUhrcFBUMDlYQ0ptZFc1amRHbHZibHdpS1NCN1hISmNibHgwWEhSbWRXNWpkR2x2YmlCUFluTmxjblpsY2loMFlYSm5aWFFzWTJGc2JHSmhZMnNzWVdOalpYQjBiR2x6ZEN4d1lYVnpZV0pzWlN4d1lYVnpaU3hrWld4aGVTa2dlMXh5WEc1Y2RDQWdJQ0JjZEhaaGNpQnRaU0E5SUhSb2FYTXNJSEJ5YjNoNU8xeHlYRzVjZENBZ0lDQmNkR1oxYm1OMGFXOXVJR1JsYkdsMlpYSW9hV2R1YjNKbFVISmxkbWx2ZFhNc1pHVnNZWGtwSUh0Y2NseHVYSFFnSUNBZ1hIUmNkR1JsYkdsMlpYSXVaR1ZzWVhrZ1BTQmtaV3hoZVR0Y2NseHVYSFFnSUNBZ1hIUmNkR2xtS0NGa1pXeHBkbVZ5TG5CaGRYTmxLU0I3WEhKY2JseDBJQ0FnSUNBZ0lDQmNkRngwYVdZb2JXVXVZMmhoYm1kbGMyVjBMbXhsYm1kMGFENHdLU0I3WEhKY2JseDBJQ0FnSUNBZ0lDQmNkRngwWEhScFppZ2hhV2R1YjNKbFVISmxkbWx2ZFhNcElIdGNjbHh1WEhSY2RDQWdJQ0JjZENBZ0lDQmNkRngwZG1GeUlHTm9ZVzVuWlhNZ1BTQnRaUzVqYUdGdVoyVnpaWFF1Wm1sc2RHVnlLR1oxYm1OMGFXOXVLR05vWVc1blpTa2dleUJ5WlhSMWNtNGdJV0ZqWTJWd2RHeHBjM1FnZkh3Z1lXTmpaWEIwYkdsemRDNXBibVJsZUU5bUtHTm9ZVzVuWlM1MGVYQmxLVDQ5TURzZ2ZTazdYSEpjYmx4MFhIUWdJQ0FnSUNBZ0lGeDBYSFJjZEdsbUtHTm9ZVzVuWlhNdWJHVnVaM1JvUGpBcElIdGNjbHh1WEhSY2RDQWdJQ0FnSUNBZ1hIUmNkRngwWEhSallXeHNZbUZqYXloamFHRnVaMlZ6S1R0Y2NseHVYSFJjZENBZ0lDQWdJQ0FnWEhSY2RGeDBmVnh5WEc1Y2RDQWdJQ0FnSUNBZ1hIUmNkRngwZlZ4eVhHNWNkQ0FnSUNBZ0lDQWdYSFJjZEZ4MGJXVXVZMmhoYm1kbGMyVjBJRDBnVzEwN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEZ4MGZWeHlYRzVjZENBZ0lDQmNkRngwZlZ4eVhHNWNkQ0FnSUNCY2RIMWNjbHh1WEhRZ0lDQWdYSFJrWld4cGRtVnlMbkJoZFhObElEMGdjR0YxYzJVN1hISmNibHgwSUNBZ0lGeDBaR1ZzYVhabGNpNWtaV3hoZVNBOUlHUmxiR0Y1TzF4eVhHNWNkRngwSUNBZ0lHMWxMbWRsZENBOUlHWjFibU4wYVc5dUtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhrcElIdGNjbHh1WEhSY2RDQWdJQ0JjZEdsbUtIQnliM0JsY25SNVBUMDlYQ0pmWDI5aWMyVnlkbVZ5WDE5Y0lpa2dlMXh5WEc1Y2RGeDBJQ0FnSUZ4MFhIUnlaWFIxY200Z2JXVTdYSEpjYmx4MFhIUWdJQ0FnWEhSOVhISmNibHgwWEhRZ0lDQWdYSFJwWmlod2NtOXdaWEowZVQwOVBWd2lkVzV2WW5ObGNuWmxYQ0lwSUh0Y2NseHVYSFJjZENBZ0lDQmNkRngwY21WMGRYSnVJR1oxYm1OMGFXOXVLQ2tnZTF4eVhHNWNkRngwSUNBZ0lGeDBYSFJjZEU5aWFtVmpkQzUxYm05aWMyVnlkbVVvZEdGeVoyVjBLVHRjY2x4dVhIUmNkQ0FnSUNCY2RGeDBYSFJ5WlhSMWNtNGdkR0Z5WjJWME8xeHlYRzVjZEZ4MElDQWdJRngwWEhSOU8xeHlYRzVjZEZ4MElDQWdJRngwZlZ4eVhHNWNkRngwSUNBZ0lGeDBhV1lvY0hKdmNHVnlkSGs5UFQxY0ltUmxiR2wyWlhKY0lpa2dlMXh5WEc1Y2RGeDBJQ0FnSUZ4MFhIUnlaWFIxY200Z1pHVnNhWFpsY2p0Y2NseHVYSFJjZENBZ0lDQmNkSDFjY2x4dVhIUmNkQ0FnSUNCY2RISmxkSFZ5YmlCMFlYSm5aWFJiY0hKdmNHVnlkSGxkTzF4eVhHNWNkRngwSUNBZ0lIMWNjbHh1WEhRZ0lDQWdYSFJ0WlM1MFlYSm5aWFFnUFNCMFlYSm5aWFE3WEhKY2JseDBJQ0FnSUZ4MGJXVXVZMmhoYm1kbGMyVjBJRDBnVzEwN1hISmNibHgwSUNBZ0lGeDBhV1lvSVcxbExuUmhjbWRsZEM1ZlgyOWljMlZ5ZG1WeVEyRnNiR0poWTJ0elgxOHBJSHRjY2x4dVhIUWdJQ0FnWEhSY2RDOHZJRjlmYjJKelpYSjJaWEpEWVd4c1ltRmphM05mWHlCcGN5QjFjMlZrSUdGeklHRnVJR2x1WkdWNElIUnZJR2RsZENCaGRDQjBhR1VnY0hKdmVIa2dkMmhwWTJnZ2FYTWdkR2hsSUc5aWMyVnlkbVZ5TENCemJ5QjNaU0JqWVc0Z2RXNXZZbk5sY25abFhISmNibHgwSUNBZ0lGeDBYSFJQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb2RHRnlaMlYwTEZ3aVgxOXZZbk5sY25abGNrTmhiR3hpWVdOcmMxOWZYQ0lzZTJWdWRXMWxjbUZpYkdVNlptRnNjMlVzWTI5dVptbG5kWEpoWW14bE9uUnlkV1VzZDNKcGRHRmliR1U2Wm1Gc2MyVXNkbUZzZFdVNlcxMTlLVHRjY2x4dVhIUWdJQ0FnWEhSY2RFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gwWVhKblpYUXNYQ0pmWDI5aWMyVnlkbVZ5YzE5ZlhDSXNlMlZ1ZFcxbGNtRmliR1U2Wm1Gc2MyVXNZMjl1Wm1sbmRYSmhZbXhsT25SeWRXVXNkM0pwZEdGaWJHVTZabUZzYzJVc2RtRnNkV1U2VzExOUtUdGNjbHh1WEhRZ0lDQWdYSFI5WEhKY2JseDBJQ0FnSUZ4MGJXVXVkR0Z5WjJWMExsOWZiMkp6WlhKMlpYSkRZV3hzWW1GamEzTmZYeTV3ZFhOb0tHTmhiR3hpWVdOcktUdGNjbHh1WEhRZ0lDQWdYSFJ0WlM1MFlYSm5aWFF1WDE5dlluTmxjblpsY25OZlh5NXdkWE5vS0hSb2FYTXBPMXh5WEc1Y2RDQWdJQ0JjZEhCeWIzaDVJRDBnYm1WM0lGQnliM2g1S0hSaGNtZGxkQ3h0WlNrN1hISmNibHgwSUNBZ0lGeDBaR1ZzYVhabGNpaG1ZV3h6WlN4a1pXeGhlU2s3WEhKY2JseDBJQ0FnSUZ4MGNtVjBkWEp1SUhCeWIzaDVPMXh5WEc1Y2RDQWdJQ0I5WEhKY2JseDBYSFJQWW5ObGNuWmxjaTV3Y205MGIzUjVjR1V1WkdWc2FYWmxjaUE5SUdaMWJtTjBhVzl1S0NrZ2UxeHlYRzVjZEZ4MFhIUnlaWFIxY200Z2RHaHBjeTVuWlhRb2JuVnNiQ3hjSW1SbGJHbDJaWEpjSWlrN1hISmNibHgwWEhSOVhISmNibHgwSUNBZ0lFOWljMlZ5ZG1WeUxuQnliM1J2ZEhsd1pTNXpaWFFnUFNCbWRXNWpkR2x2YmloMFlYSm5aWFFzSUhCeWIzQmxjblI1TENCMllXeDFaU2tnZXlBdkx5QXNJSEpsWTJWcGRtVnlYSEpjYmx4MElDQWdJRngwZG1GeUlHOXNaSFpoYkhWbElEMGdkR0Z5WjJWMFczQnliM0JsY25SNVhUdGNjbHh1WEhRZ0lDQWdYSFIyWVhJZ2RIbHdaU0E5SUNodmJHUjJZV3gxWlQwOVBYVnVaR1ZtYVc1bFpDQS9JRndpWVdSa1hDSWdPaUJjSW5Wd1pHRjBaVndpS1R0Y2NseHVYSFFnSUNBZ1hIUjBZWEpuWlhSYmNISnZjR1Z5ZEhsZElEMGdkbUZzZFdVN1hISmNibHgwSUNBZ0lGeDBhV1lvZEdGeVoyVjBMbDlmYjJKelpYSjJaWEp6WDE4dWFXNWtaWGhQWmloMGFHbHpLVDQ5TUNBbUppQW9JWFJvYVhNdVlXTmpaWEIwYkdsemRDQjhmQ0IwYUdsekxtRmpZMlZ3ZEd4cGMzUXVhVzVrWlhoUFppaDBlWEJsS1Q0OU1Da3BJSHRjY2x4dVhIUWdJQ0FnSUNBZ0lGeDBkbUZ5SUdOb1lXNW5aU0E5SUh0dlltcGxZM1E2ZEdGeVoyVjBMRzVoYldVNmNISnZjR1Z5ZEhrc2RIbHdaVHAwZVhCbGZTeGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MFhIUnpkR0Z5ZENBOUlIUm9hWE11WTJoaGJtZGxjMlYwTG14bGJtZDBhQ0E5UFQwZ01DeGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MFhIUmtaV3hwZG1WeUlEMGdkR2hwY3k1a1pXeHBkbVZ5S0NrN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEdsbUtIUjVjR1U5UFQxY0luVndaR0YwWlZ3aUtTQjdYSEpjYmx4MElDQWdJQ0FnSUNCY2RGeDBZMmhoYm1kbExtOXNaRlpoYkhWbElEMGdiMnhrZG1Gc2RXVTdYSEpjYmx4MElDQWdJQ0FnSUNCY2RIMWNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGRHaHBjeTVqYUdGdVoyVnpaWFF1Y0hWemFDaGphR0Z1WjJVcE8xeHlYRzVjZENBZ0lDQWdJQ0FnWEhScFppaHpkR0Z5ZENrZ2UxeHlYRzVjZENBZ0lDQWdJQ0FnWEhSY2RHUmxiR2wyWlhJb1ptRnNjMlVzS0hSNWNHVnZaaWhrWld4cGRtVnlMbVJsYkdGNUtUMDlQVndpYm5WdFltVnlYQ0lnUHlCa1pXeHBkbVZ5TG1SbGJHRjVJRG9nTVRBcEtUdGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGZWeHlYRzVjZENBZ0lDQmNkSDFjY2x4dVhIUWdJQ0FnWEhSeVpYUjFjbTRnZEhKMVpUdGNjbHh1WEhRZ0lDQWdmVHRjY2x4dVhIUWdJQ0FnVDJKelpYSjJaWEl1Y0hKdmRHOTBlWEJsTG1SbGJHVjBaVkJ5YjNCbGNuUjVJRDBnWm5WdVkzUnBiMjRvZEdGeVoyVjBMQ0J3Y205d1pYSjBlU2tnZTF4eVhHNWNkQ0FnSUNCY2RIWmhjaUJ2YkdSMllXeDFaU0E5SUhSaGNtZGxkRnR3Y205d1pYSjBlVjA3WEhKY2JseDBJQ0FnSUZ4MEx5OXBaaWgwZVhCbGIyWW9iMnhrZG1Gc2RXVXBJVDA5WENKMWJtUmxabWx1WldSY0lpa2dlMXh5WEc1Y2RGeDBJQ0FnSUZ4MFpHVnNaWFJsSUhSaGNtZGxkRnR3Y205d1pYSjBlVjA3WEhKY2JseDBYSFFnSUNBZ1hIUnBaaWgwWVhKblpYUXVYMTl2WW5ObGNuWmxjbk5mWHk1cGJtUmxlRTltS0hSb2FYTXBQajB3SUNZbUlDRjBhR2x6TG1GalkyVndkR3hwYzNRZ2ZId2dkR2hwY3k1aFkyTmxjSFJzYVhOMExtbHVaR1Y0VDJZb1hDSmtaV3hsZEdWY0lpaytQVEFwSUh0Y2NseHVYSFJjZENBZ0lDQWdJQ0FnWEhSMllYSWdZMmhoYm1kbElEMGdlMjlpYW1WamREcDBZWEpuWlhRc2JtRnRaVHB3Y205d1pYSjBlU3gwZVhCbE9sd2laR1ZzWlhSbFhDSXNiMnhrVm1Gc2RXVTZiMnhrZG1Gc2RXVjlMRnh5WEc1Y2RGeDBJQ0FnSUNBZ0lDQmNkRngwYzNSaGNuUWdQU0IwYUdsekxtTm9ZVzVuWlhObGRDNXNaVzVuZEdnZ1BUMDlJREFzWEhKY2JseDBYSFFnSUNBZ0lDQWdJRngwWEhSa1pXeHBkbVZ5SUQwZ2RHaHBjeTVrWld4cGRtVnlLQ2s3WEhKY2JseDBYSFFnSUNBZ0lDQWdJRngwZEdocGN5NWphR0Z1WjJWelpYUXVjSFZ6YUNoamFHRnVaMlVwTzF4eVhHNWNkRngwSUNBZ0lDQWdJQ0JjZEdsbUtITjBZWEowS1NCN1hISmNibHgwWEhRZ0lDQWdJQ0FnSUZ4MFhIUmtaV3hwZG1WeUtHWmhiSE5sTENoMGVYQmxiMllvWkdWc2FYWmxjaTVrWld4aGVTazlQVDFjSW01MWJXSmxjbHdpSUQ4Z1pHVnNhWFpsY2k1a1pXeGhlU0E2SURFd0tTazdYSEpjYmx4MFhIUWdJQ0FnSUNBZ0lGeDBmVnh5WEc1Y2RGeDBJQ0FnSUZ4MGZWeHlYRzVjZENBZ0lDQmNkQzh2ZlZ4eVhHNWNkQ0FnSUNCY2RISmxkSFZ5YmlCMGNuVmxPMXh5WEc1Y2RDQWdJQ0I5TzF4eVhHNWNkQ0FnSUNCUFluTmxjblpsY2k1d2NtOTBiM1I1Y0dVdVpHVm1hVzVsVUhKdmNHVnlkSGtnUFNCbWRXNWpkR2x2YmloMFlYSm5aWFFzSUhCeWIzQmxjblI1TENCa1pYTmpjbWx3ZEc5eUtTQjdYSEpjYmx4MElDQWdJRngwVDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtIUmhjbWRsZEN3Z2NISnZjR1Z5ZEhrc0lHUmxjMk55YVhCMGIzSXBPMXh5WEc1Y2RDQWdJQ0JjZEdsbUtIUmhjbWRsZEM1ZlgyOWljMlZ5ZG1WeWMxOWZMbWx1WkdWNFQyWW9kR2hwY3lrK1BUQWdKaVlnSVhSb2FYTXVZV05qWlhCMGJHbHpkQ0I4ZkNCMGFHbHpMbUZqWTJWd2RHeHBjM1F1YVc1a1pYaFBaaWhjSW5KbFkyOXVabWxuZFhKbFhDSXBQajB3S1NCN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEhaaGNpQmphR0Z1WjJVZ1BTQjdiMkpxWldOME9uUmhjbWRsZEN4dVlXMWxPbkJ5YjNCbGNuUjVMSFI1Y0dVNlhDSnlaV052Ym1acFozVnlaVndpZlN4Y2NseHVJQ0FnSUNBZ0lDQmNkRngwWEhSemRHRnlkQ0E5SUhSb2FYTXVZMmhoYm1kbGMyVjBMbXhsYm1kMGFDQTlQVDBnTUN4Y2NseHVJQ0FnSUNBZ0lDQmNkRngwWEhSa1pXeHBkbVZ5SUQwZ2RHaHBjeTVrWld4cGRtVnlLQ2s3WEhKY2JseDBJQ0FnSUNBZ0lDQmNkSFJvYVhNdVkyaGhibWRsYzJWMExuQjFjMmdvWTJoaGJtZGxLVHRjY2x4dVhIUWdJQ0FnSUNBZ0lGeDBhV1lvYzNSaGNuUXBJSHRjY2x4dVhIUWdJQ0FnSUNBZ0lGeDBYSFJrWld4cGRtVnlLR1poYkhObExDaDBlWEJsYjJZb1pHVnNhWFpsY2k1a1pXeGhlU2s5UFQxY0ltNTFiV0psY2x3aUlEOGdaR1ZzYVhabGNpNWtaV3hoZVNBNklERXdLU2s3WEhKY2JseDBJQ0FnSUNBZ0lDQmNkSDFjY2x4dVhIUWdJQ0FnWEhSOVhISmNibHgwSUNBZ0lGeDBjbVYwZFhKdUlIUnlkV1U3WEhKY2JseDBJQ0FnSUgwN1hISmNibHgwSUNBZ0lFOWljMlZ5ZG1WeUxuQnliM1J2ZEhsd1pTNXpaWFJRY205MGIzUjVjR1ZQWmlBOUlHWjFibU4wYVc5dUtIUmhjbWRsZEN3Z2NISnZkRzkwZVhCbEtTQjdYSEpjYmx4MElDQWdJRngwZG1GeUlHOXNaSFpoYkhWbElEMGdUMkpxWldOMExtZGxkRkJ5YjNSdmRIbHdaVTltS0hSaGNtZGxkQ2s3WEhKY2JseDBJQ0FnSUZ4MFQySnFaV04wTG5ObGRGQnliM1J2ZEhsd1pVOW1LSFJoY21kbGRDd2djSEp2ZEc5MGVYQmxLVHRjY2x4dVhIUWdJQ0FnWEhScFppaDBZWEpuWlhRdVgxOXZZbk5sY25abGNuTmZYeTVwYm1SbGVFOW1LSFJvYVhNcFBqMHdJQ1ltSUNGMGFHbHpMbUZqWTJWd2RHeHBjM1FnZkh3Z2RHaHBjeTVoWTJObGNIUnNhWE4wTG1sdVpHVjRUMllvWENKelpYUlFjbTkwYjNSNWNHVmNJaWsrUFRBcElIdGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGRtRnlJR05vWVc1blpTQTlJSHR2WW1wbFkzUTZkR0Z5WjJWMExHNWhiV1U2WENKZlgzQnliM1J2WDE5Y0lpeDBlWEJsT2x3aWMyVjBVSEp2ZEc5MGVYQmxYQ0lzYjJ4a1ZtRnNkV1U2YjJ4a2RtRnNkV1Y5TEZ4eVhHNGdJQ0FnWEhSY2RGeDBYSFJ6ZEdGeWRDQTlJSFJvYVhNdVkyaGhibWRsYzJWMExteGxibWQwYUNBOVBUMGdNQ3hjY2x4dUlDQWdJRngwWEhSY2RGeDBaR1ZzYVhabGNpQTlJSFJvYVhNdVpHVnNhWFpsY2lncE8xeHlYRzVjZENBZ0lDQWdJQ0FnWEhSMGFHbHpMbU5vWVc1blpYTmxkQzV3ZFhOb0tHTm9ZVzVuWlNrN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEdsbUtITjBZWEowS1NCN1hISmNibHgwSUNBZ0lDQWdJQ0JjZEZ4MFpHVnNhWFpsY2lobVlXeHpaU3dvZEhsd1pXOW1LR1JsYkdsMlpYSXVaR1ZzWVhrcFBUMDlYQ0p1ZFcxaVpYSmNJaUEvSUdSbGJHbDJaWEl1WkdWc1lYa2dPaUF4TUNrcE8xeHlYRzVjZENBZ0lDQWdJQ0FnWEhSOVhISmNibHgwSUNBZ0lGeDBmVnh5WEc1Y2RDQWdJQ0JjZEhKbGRIVnliaUIwY25WbE8xeHlYRzVjZENBZ0lDQjlPMXh5WEc1Y2RDQWdJQ0JQWW5ObGNuWmxjaTV3Y205MGIzUjVjR1V1Y0hKbGRtVnVkRVY0ZEdWdWMybHZibk1nUFNCbWRXNWpkR2x2YmloMFlYSm5aWFFwSUh0Y2NseHVYSFFnSUNBZ0lDQWdJRTlpYW1WamRDNXdjbVYyWlc1MFJYaDBaVzV6YVc5dWN5aDBZWEpuWlhRcE8xeHlYRzVjZENBZ0lDQmNkR2xtS0hSaGNtZGxkQzVmWDI5aWMyVnlkbVZ5YzE5ZkxtbHVaR1Y0VDJZb2RHaHBjeWsrUFRBZ0ppWWdJWFJvYVhNdVlXTmpaWEIwYkdsemRDQjhmQ0IwYUdsekxtRmpZMlZ3ZEd4cGMzUXVhVzVrWlhoUFppaGNJbkJ5WlhabGJuUkZlSFJsYm5OcGIyNXpYQ0lwUGowd0tTQjdYSEpjYmx4MElDQWdJQ0FnSUNCY2RIWmhjaUJqYUdGdVoyVWdQU0I3YjJKcVpXTjBPblJoY21kbGRDeDBlWEJsT2x3aWNISmxkbVZ1ZEVWNGRHVnVjMmx2Ym5OY0luMHNYSEpjYmx4MFhIUmNkRngwWEhSemRHRnlkQ0E5SUhSb2FYTXVZMmhoYm1kbGMyVjBMbXhsYm1kMGFDQTlQVDBnTUN4Y2NseHVYSFJjZEZ4MFhIUmNkR1JsYkdsMlpYSWdQU0IwYUdsekxtUmxiR2wyWlhJb0tUdGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGRHaHBjeTVqYUdGdVoyVnpaWFF1Y0hWemFDaGphR0Z1WjJVcE8xeHlYRzVjZENBZ0lDQWdJQ0FnWEhScFppaHpkR0Z5ZENrZ2UxeHlYRzVjZENBZ0lDQWdJQ0FnWEhSY2RHUmxiR2wyWlhJb1ptRnNjMlVzS0hSNWNHVnZaaWhrWld4cGRtVnlMbVJsYkdGNUtUMDlQVndpYm5WdFltVnlYQ0lnUHlCa1pXeHBkbVZ5TG1SbGJHRjVJRG9nTVRBcEtUdGNjbHh1WEhRZ0lDQWdJQ0FnSUZ4MGZWeHlYRzVjZENBZ0lDQmNkSDFjY2x4dVhIUWdJQ0FnWEhSeVpYUjFjbTRnZEhKMVpUdGNjbHh1WEhRZ0lDQWdmVHRjY2x4dVhIUWdJQ0FnVDJKcVpXTjBMbTlpYzJWeWRtVWdQU0JtZFc1amRHbHZiaWh2WW1wbFkzUXNZMkZzYkdKaFkyc3NZV05qWlhCMGJHbHpkQ3h3WVhWellXSnNaU3h3WVhWelpTeGtaV3hoZVNrZ2UxeHlYRzVjZENBZ0lDQmNkSEpsZEhWeWJpQnVaWGNnVDJKelpYSjJaWElvYjJKcVpXTjBMR05oYkd4aVlXTnJMR0ZqWTJWd2RHeHBjM1FzY0dGMWMyRmliR1VzY0dGMWMyVXNaR1ZzWVhrcE8xeHlYRzVjZENBZ0lDQjlPMXh5WEc1Y2RDQWdJQ0JQWW1wbFkzUXVkVzV2WW5ObGNuWmxJRDBnWm5WdVkzUnBiMjRvYjJKcVpXTjBMR05oYkd4aVlXTnJLU0I3WEhKY2JseDBJQ0FnSUZ4MGFXWW9iMkpxWldOMExsOWZiMkp6WlhKMlpYSkRZV3hzWW1GamEzTmZYeWtnZTF4eVhHNWNkQ0FnSUNCY2RGeDBhV1lvSVdOaGJHeGlZV05yS1NCN1hISmNibHgwSUNBZ0lGeDBYSFJjZEc5aWFtVmpkQzVmWDI5aWMyVnlkbVZ5UTJGc2JHSmhZMnR6WDE4dWMzQnNhV05sS0RBc2IySnFaV04wTGw5ZmIySnpaWEoyWlhKRFlXeHNZbUZqYTNOZlh5NXNaVzVuZEdncE8xeHlYRzVjZENBZ0lDQmNkRngwWEhSdlltcGxZM1F1WDE5dlluTmxjblpsY25OZlh5NXpjR3hwWTJVb01DeHZZbXBsWTNRdVgxOXZZbk5sY25abGNuTmZYeTVzWlc1bmRHZ3BPMXh5WEc1Y2RDQWdJQ0JjZEZ4MFhIUnlaWFIxY200N1hISmNibHgwSUNBZ0lGeDBYSFI5WEhKY2JseDBJQ0FnSUZ4MFhIUnZZbXBsWTNRdVgxOXZZbk5sY25abGNrTmhiR3hpWVdOcmMxOWZMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9iMkp6WlhKMlpYSmpZV3hzWW1GamF5eHBLU0I3WEhKY2JseDBJQ0FnSUZ4MFhIUmNkR2xtS0dOaGJHeGlZV05yUFQwOWIySnpaWEoyWlhKallXeHNZbUZqYXlrZ2UxeHlYRzVjZENBZ0lDQmNkRngwWEhSY2RHOWlhbVZqZEM1ZlgyOWljMlZ5ZG1WeVEyRnNiR0poWTJ0elgxOHVjM0JzYVdObEtHa3NNU2s3WEhKY2JseDBJQ0FnSUZ4MFhIUmNkRngwWkdWc1pYUmxJRzlpYW1WamRDNWZYMjlpYzJWeWRtVnljMTlmVzJsZExtTmhiR3hpWVdOck8xeHlYRzVjZENBZ0lDQmNkRngwWEhSY2RHOWlhbVZqZEM1ZlgyOWljMlZ5ZG1WeWMxOWZMbk53YkdsalpTaHBMREVwTzF4eVhHNWNkQ0FnSUNCY2RGeDBYSFI5WEhKY2JseDBJQ0FnSUZ4MFhIUjlLVHRjY2x4dVhIUWdJQ0FnWEhSOVhISmNibHgwSUNBZ0lIMDdYSEpjYmx4MElDQWdJRUZ5Y21GNUxtOWljMlZ5ZG1VZ1BTQm1kVzVqZEdsdmJpaHZZbXBsWTNRc1kyRnNiR0poWTJzc1lXTmpaWEIwYkdsemRDeHdZWFZ6WVdKc1pTeHdZWFZ6WlN4a1pXeGhlU2tnZTF4eVhHNWNkQ0FnSUNCY2RHbG1LQ0VvYjJKcVpXTjBJR2x1YzNSaGJtTmxiMllnUVhKeVlYa3BJQ1ltSUNGQmNuSmhlUzVwYzBGeWNtRjVLRzlpYW1WamRDa3BJSHRjY2x4dVhIUWdJQ0FnWEhSY2RIUm9jbTkzSUc1bGR5QlVlWEJsUlhKeWIzSW9YQ0pHYVhKemRDQmhjbWQxYldWdWRDQjBieUJCY25KaGVTNXZZbk5sY25abGNpQnBjeUJ1YjNRZ1lXNGdRWEp5WVhsY0lpazdYSEpjYmx4MElDQWdJRngwZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JjZEdGalkyVndkR3hwYzNRZ1BTQmhZMk5sY0hSc2FYTjBJSHg4SUZ0Y0ltRmtaRndpTENCY0luVndaR0YwWlZ3aUxDQmNJbVJsYkdWMFpWd2lMQ0JjSW5Od2JHbGpaVndpWFR0Y2NseHVYSFFnSUNBZ1hIUjJZWElnWVhKeVlYbHdjbTk0ZVNBOUlHNWxkeUJRY205NGVTaHZZbXBsWTNRc2UyZGxkRG9nWm5WdVkzUnBiMjRvZEdGeVoyVjBMSEJ5YjNCbGNuUjVLU0I3WEhKY2JseDBJQ0FnSUZ4MFhIUnBaaWh3Y205d1pYSjBlVDA5UFZ3aWRXNXZZbk5sY25abFhDSXBJSHRjY2x4dVhIUmNkQ0FnSUNCY2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dUtHTmhiR3hpWVdOcktTQjdYSEpjYmx4MFhIUWdJQ0FnWEhSY2RGeDBhV1lvWTJGc2JHSmhZMnNwSUh0Y2NseHVYSFJjZENBZ0lDQmNkRngwWEhSY2RISmxkSFZ5YmlCUFltcGxZM1F1ZFc1dlluTmxjblpsS0hSaGNtZGxkQ3hqWVd4c1ltRmpheWs3WEhKY2JseDBYSFFnSUNBZ1hIUmNkRngwZlZ4eVhHNWNkRngwSUNBZ0lGeDBYSFJjZEhKbGRIVnliaUIwWVhKblpYUXVkVzV2WW5ObGNuWmxLQ2s3WEhKY2JseDBYSFFnSUNBZ1hIUmNkSDA3WEhKY2JseDBYSFFnSUNBZ1hIUjlYSEpjYmx4MElDQWdJRngwWEhScFppaHdjbTl3WlhKMGVUMDlQVndpYzNCc2FXTmxYQ0lwSUh0Y2NseHVYSFFnSUNBZ1hIUmNkRngwY21WMGRYSnVJR1oxYm1OMGFXOXVLSE4wWVhKMExHVnVaQ2tnZTF4eVhHNWNkQ0FnSUNCY2RGeDBYSFJjZEdsbUtIUjVjR1Z2WmloemRHRnlkQ2toUFQxY0ltNTFiV0psY2x3aUlIeDhJSFI1Y0dWdlppaGxibVFwSVQwOVhDSnVkVzFpWlhKY0lpa2dlMXh5WEc1Y2RDQWdJQ0JjZEZ4MFhIUmNkRngwZEdoeWIzY2dibVYzSUZSNWNHVkZjbkp2Y2loY0lrWnBjbk4wSUhSM2J5QmhjbWQxYldWdWRITWdkRzhnUVhKeVlYa2djM0JzYVdObElHRnlaU0J1YjNRZ2JuVnRZbVZ5TENCdWRXMWlaWEpjSWlrN1hISmNibHgwSUNBZ0lGeDBYSFJjZEZ4MGZWeHlYRzVjZENBZ0lDQmNkQ0FnSUNCY2RGeDBkbUZ5SUhKbGJXOTJaV1FnUFNCMGFHbHpMbk5zYVdObEtITjBZWEowTEhOMFlYSjBLMlZ1WkNrc1hISmNibHgwSUNBZ0lGeDBJQ0FnSUZ4MFhIUmNkR0ZrWkdWa1EyOTFiblFnUFNBb1lYSm5kVzFsYm5SekxteGxibWQwYUNBK0lERWdQeUJoY21kMWJXVnVkSE11YkdWdVozUm9MVElnT2lBd0tTeGNjbHh1WEhRZ0lDQWdYSFFnSUNBZ1hIUmNkRngwWTJoaGJtZGxJRDBnSUh0dlltcGxZM1E2YjJKcVpXTjBMSFI1Y0dVNlhDSnpjR3hwWTJWY0lpeHBibVJsZURwemRHRnlkQ3h5WlcxdmRtVmtPbkpsYlc5MlpXUXNZV1JrWldSRGIzVnVkRHBoWkdSbFpFTnZkVzUwZlR0Y2NseHVYSFFnSUNBZ1hIUWdJQ0FnWEhSY2RIUmhjbWRsZEM1emNHeHBZMlV1WVhCd2JIa29kR0Z5WjJWMExHRnlaM1Z0Wlc1MGN5azdYSEpjYmx4MElDQWdJRngwSUNBZ0lGeDBYSFJwWmloaFkyTmxjSFJzYVhOMExtbHVaR1Y0VDJZb1hDSnpjR3hwWTJWY0lpaytQVEFwSUh0Y2NseHVYSFFnSUNBZ1hIUWdJQ0FnWEhSY2RGeDBkbUZ5SUhOMFlYSjBJRDBnY0hKdmVIa3VYMTl2WW5ObGNuWmxjbDlmTG1Ob1lXNW5aWE5sZEM1c1pXNW5kR2dnUFQwOUlEQXNYSEpjYmx4MElDQWdJRngwSUNBZ0lDQWdJQ0JjZEZ4MFhIUmtaV3hwZG1WeUlEMGdjSEp2ZUhrdVgxOXZZbk5sY25abGNsOWZMbVJsYkdsMlpYSW9LVHRjY2x4dVhIUWdJQ0FnWEhRZ0lDQWdYSFJjZEZ4MGNISnZlSGt1WDE5dlluTmxjblpsY2w5ZkxtTm9ZVzVuWlhObGRDNXdkWE5vS0dOb1lXNW5aU2s3WEhKY2JseDBJQ0FnSUZ4MElDQWdJRngwWEhSY2RHbG1LSE4wWVhKMEtTQjdYSEpjYmx4MElDQWdJRngwWEhRZ0lDQWdJQ0FnSUZ4MFhIUmtaV3hwZG1WeUtHWmhiSE5sTENoMGVYQmxiMllvWkdWc2FYWmxjaTVrWld4aGVTazlQVDFjSW01MWJXSmxjbHdpSUQ4Z1pHVnNhWFpsY2k1a1pXeGhlU0E2SURFd0tTazdYSEpjYmx4MElDQWdJRngwWEhRZ0lDQWdJQ0FnSUZ4MGZWeHlYRzVjZENBZ0lDQmNkQ0FnSUNCY2RGeDBmVnh5WEc1Y2RDQWdJQ0JjZENBZ0lDQmNkSDFjY2x4dVhIUWdJQ0FnWEhSY2RIMWNjbHh1WEhRZ0lDQWdYSFJjZEdsbUtIQnliM0JsY25SNVBUMDlYQ0p3ZFhOb1hDSXBJSHRjY2x4dVhIUWdJQ0FnWEhSY2RGeDBJSEpsZEhWeWJpQm1kVzVqZEdsdmJpaHBkR1Z0S1NCN1hISmNibHgwSUNBZ0lGeDBYSFFnSUNBZ1hIUnlaWFIxY200Z2RHaHBjeTV6Y0d4cFkyVW9kR2hwY3k1c1pXNW5kR2dzTUN4cGRHVnRLVHRjY2x4dVhIUWdJQ0FnWEhSY2RDQWdJQ0I5WEhKY2JseDBJQ0FnSUZ4MFhIUjlYSEpjYmx4MElDQWdJRngwWEhScFppaHdjbTl3WlhKMGVUMDlQVndpY0c5d1hDSXBJSHRjY2x4dVhIUWdJQ0FnWEhSY2RGeDBJSEpsZEhWeWJpQm1kVzVqZEdsdmJpZ3BJSHRjY2x4dVhIUWdJQ0FnWEhSY2RDQWdJQ0JjZEhKbGRIVnliaUIwYUdsekxuTndiR2xqWlNoMGFHbHpMbXhsYm1kMGFDMHhMREVwTzF4eVhHNWNkQ0FnSUNCY2RGeDBJQ0FnSUgxY2NseHVYSFFnSUNBZ1hIUmNkSDFjY2x4dVhIUWdJQ0FnWEhSY2RHbG1LSEJ5YjNCbGNuUjVQVDA5WENKMWJuTm9hV1owWENJcElIdGNjbHh1WEhRZ0lDQWdYSFJjZEZ4MElISmxkSFZ5YmlCbWRXNWpkR2x2YmlocGRHVnRLU0I3WEhKY2JpQWdJQ0JjZEZ4MElDQWdJRngwWEhSeVpYUjFjbTRnZEdocGN5NXpjR3hwWTJVb01Dd3dMR2wwWlcwcE8xeHlYRzRnSUNBZ1hIUmNkQ0FnSUNCY2RIMWNjbHh1WEhRZ0lDQWdYSFJjZEgxY2NseHVYSFFnSUNBZ1hIUmNkR2xtS0hCeWIzQmxjblI1UFQwOVhDSnphR2xtZEZ3aUtTQjdYSEpjYmx4MElDQWdJRngwWEhSY2RISmxkSFZ5YmlCbWRXNWpkR2x2YmlncElIdGNjbHh1WEhRZ0lDQWdYSFFnSUNBZ1hIUmNkSEpsZEhWeWJpQjBhR2x6TG5Od2JHbGpaU2d3TERFcE8xeHlYRzVjZENBZ0lDQmNkQ0FnSUNCY2RIMWNjbHh1WEhRZ0lDQWdYSFJjZEgxY2NseHVYSFFnSUNBZ1hIUmNkSEpsZEhWeWJpQjBZWEpuWlhSYmNISnZjR1Z5ZEhsZE8xeHlYRzVjZENBZ0lDQmNkSDE5S1R0Y2NseHVYSFFnSUNBZ1hIUjJZWElnY0hKdmVIa2dQU0JQWW1wbFkzUXViMkp6WlhKMlpTaGhjbkpoZVhCeWIzaDVMR1oxYm1OMGFXOXVLR05vWVc1blpYTmxkQ2tnZXlCY2NseHVYSFFnSUNBZ1hIUmNkSFpoY2lCamFHRnVaMlZ6SUQwZ1kyaGhibWRsYzJWMExtWnBiSFJsY2lobWRXNWpkR2x2YmloamFHRnVaMlVwSUhzZ2NtVjBkWEp1SUdOb1lXNW5aUzV1WVcxbElUMDlYQ0pzWlc1bmRHaGNJaUFtSmlCamFHRnVaMlV1Ym1GdFpTRTlQVndpWVdSa1hDSWdKaVlnS0NGaFkyTmxjSFJzYVhOMElIeDhJR0ZqWTJWd2RHeHBjM1F1YVc1a1pYaFBaaWhqYUdGdVoyVXVkSGx3WlNrK1BUQXBPeUI5S1R0Y2NseHVYSFFnSUNBZ1hIUmNkR2xtS0dOb1lXNW5aWE11YkdWdVozUm9QakFwSUh0Y2NseHVYSFFnSUNBZ1hIUmNkRngwWTJGc2JHSmhZMnNvWTJoaGJtZGxjeWs3WEhKY2JseDBJQ0FnSUZ4MFhIUjlYSEpjYmx4MElDQWdJRngwZlN4aFkyTmxjSFJzYVhOMExIQmhkWE5oWW14bExIQmhkWE5sTEdSbGJHRjVLVHRjY2x4dVhIUWdJQ0FnWEhSeVpYUjFjbTRnY0hKdmVIazdYSEpjYmx4MElDQWdJSDA3WEhKY2JseDBJQ0FnSUVGeWNtRjVMblZ1YjJKelpYSjJaU0E5SUdaMWJtTjBhVzl1S0c5aWFtVmpkQ3hqWVd4c1ltRmpheWtnZTF4eVhHNWNkRngwSUNCeVpYUjFjbTRnYjJKcVpXTjBMblZ1YjJKelpYSjJaU2hqWVd4c1ltRmpheWs3WEhKY2JseDBJQ0FnSUgxY2NseHVYSFI5WEhKY2JseDBUMkpxWldOMExtUmxaWEJQWW5ObGNuWmxJRDBnWm5WdVkzUnBiMjRvYjJKcVpXTjBMR05oYkd4aVlXTnJMSEJoY25SektTQjdYSEpjYmx4eVhHNWNkRngwY0dGeWRITWdQU0FvY0dGeWRITWdQeUJ3WVhKMGN5QTZJRnRkS1R0Y2NseHVYSEpjYmx4MFhIUjJZWElnZEc5VWVYQmxUbUZ0WlNBOUlHWjFibU4wYVc5dUtHOWlhaWtnZTF4eVhHNWNkRngwWEhSeVpYUjFjbTRnS0h0OUtTNTBiMU4wY21sdVp5NWpZV3hzS0c5aWFpa3ViV0YwWTJnb0wxeGNjeWhiWVMxNlFTMWFYU3NwTHlsYk1WMHVkRzlNYjNkbGNrTmhjMlVvS1Z4eVhHNWNkRngwZlZ4eVhHNWNjbHh1WEhSY2RHWjFibU4wYVc5dUlISmxiMkp6WlhKMlpTaDJZV3gxWlN3Z2NHRnlkSE1wSUh0Y2NseHVYSFJjZEZ4MGRtRnlJR3RsZVhNZ1BTQlBZbXBsWTNRdWEyVjVjeWgyWVd4MVpTazdYSEpjYmx4MFhIUmNkR3RsZVhNdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloclpYa3BJSHRjY2x4dVhIUmNkRngwWEhScFppZ29kRzlVZVhCbFRtRnRaU2gyWVd4MVpWdHJaWGxkS1NBOVBUMGdKMjlpYW1WamRDY2dmSHdnZEc5VWVYQmxUbUZ0WlNoMllXeDFaVnRyWlhsZEtTQTlQVDBnSjJGeWNtRjVKeWtnSmlZZ0lYWmhiSFZsVzJ0bGVWMHVhR0Z6VDNkdVVISnZjR1Z5ZEhrb0oxOWZiMkp6WlhKMlpYSnpYMThuS1NrZ2UxeHlYRzVjZEZ4MFhIUmNkRngwZG1GeUlHNWxkM0JoY25SeklEMGdjR0Z5ZEhNdWMyeHBZMlVvTUNrN1hISmNibHgwWEhSY2RGeDBYSFJ1Wlhkd1lYSjBjeTV3ZFhOb0tHdGxlU2s3WEhKY2JseDBYSFJjZEZ4MFhIUjJZV3gxWlZ0clpYbGRJRDBnVDJKcVpXTjBMbVJsWlhCUFluTmxjblpsS0haaGJIVmxXMnRsZVYwc1kyRnNiR0poWTJzc2JtVjNjR0Z5ZEhNcE8xeHlYRzVjZEZ4MFhIUmNkSDFjY2x4dVhIUmNkRngwZlNrN1hISmNibHgwWEhSOVhISmNibHh5WEc1Y2RGeDBjbVZ2WW5ObGNuWmxLRzlpYW1WamRDd2djR0Z5ZEhNcE8xeHlYRzVjY2x4dVhIUmNkSFpoY2lCdlluTmxjblpsWkNBOUlFOWlhbVZqZEM1dlluTmxjblpsS0c5aWFtVmpkQ3htZFc1amRHbHZiaWhqYUdGdVoyVnpaWFFwSUh0Y2NseHVYSFJjZEZ4MGRtRnlJR05vWVc1blpYTWdQU0JiWFR0Y2NseHVYSFJjZEZ4MFpuVnVZM1JwYjI0Z2NtVmpkWEp6WlNodVlXMWxMSEp2YjNSUFltcGxZM1FzYjJ4a1QySnFaV04wTEc1bGQwOWlhbVZqZEN4d1lYUm9LU0I3WEhKY2JseDBYSFJjZEZ4MGFXWW9ibVYzVDJKcVpXTjBJR2x1YzNSaGJtTmxiMllnVDJKcVpXTjBLU0I3WEhKY2JseDBYSFJjZEZ4MFhIUjJZWElnYm1WM2EyVjVjeUE5SUU5aWFtVmpkQzVyWlhsektHNWxkMDlpYW1WamRDazdYSEpjYmx4MFhIUmNkRngwWEhSdVpYZHJaWGx6TG1admNrVmhZMmdvWm5WdVkzUnBiMjRvYTJWNUtTQjdYSEpjYmx4MFhIUmNkRngwWEhSY2RHbG1LQ0Z2YkdSUFltcGxZM1FnZkh3Z0tHOXNaRTlpYW1WamRGdHJaWGxkSVQwOWJtVjNUMkpxWldOMFcydGxlVjBwS1NCN1hISmNibHgwWEhSY2RGeDBYSFJjZEZ4MGRtRnlJRzlzWkhaaGJIVmxJRDBnS0c5c1pFOWlhbVZqZENBbUppQnZiR1JQWW1wbFkzUmJhMlY1WFNFOVBYVnVaR1ZtYVc1bFpDQS9JRzlzWkU5aWFtVmpkRnRyWlhsZElEb2dkVzVrWldacGJtVmtLU3hjY2x4dVhIUmNkRngwWEhSY2RGeDBYSFJjZEdOb1lXNW5aU0E5SUNodmJHUjJZV3gxWlQwOVBYVnVaR1ZtYVc1bFpDQS9JRndpWVdSa1hDSWdPaUJjSW5Wd1pHRjBaVndpS1N4Y2NseHVYSFJjZEZ4MFhIUmNkRngwWEhSY2RHdGxlWEJoZEdnZ1BTQndZWFJvSUNzZ1hDSXVYQ0lnS3lCclpYazdYSEpjYmx4eVhHNWNkRngwWEhSY2RGeDBYSFJjZEdOb1lXNW5aWE11Y0hWemFDaDdibUZ0WlRwdVlXMWxMRzlpYW1WamREcHliMjkwVDJKcVpXTjBMSFI1Y0dVNlkyaGhibWRsTEc5c1pGWmhiSFZsT205c1pIWmhiSFZsTEc1bGQxWmhiSFZsT201bGQwOWlhbVZqZEZ0clpYbGRMR3RsZVhCaGRHZzZhMlY1Y0dGMGFIMHBPMXh5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkSEpsWTNWeWMyVW9ibUZ0WlN4eWIyOTBUMkpxWldOMExHOXNaSFpoYkhWbExHNWxkMDlpYW1WamRGdHJaWGxkTEd0bGVYQmhkR2dwTzF4eVhHNWNkRngwWEhSY2RGeDBYSFI5WEhKY2JseDBYSFJjZEZ4MFhIUjlLVHRjY2x4dVhIUmNkRngwWEhSOUlHVnNjMlVnYVdZb2IyeGtUMkpxWldOMElHbHVjM1JoYm1ObGIyWWdUMkpxWldOMEtTQjdYSEpjYmx4MFhIUmNkRngwWEhSMllYSWdiMnhrYTJWNWN5QTlJRTlpYW1WamRDNXJaWGx6S0c5c1pFOWlhbVZqZENrN1hISmNibHgwWEhSY2RGeDBYSFJ2YkdSclpYbHpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNG9hMlY1S1NCN1hISmNibHgwWEhSY2RGeDBYSFJjZEhaaGNpQmphR0Z1WjJVZ1BTQW9ibVYzVDJKcVpXTjBQVDA5Ym5Wc2JDQS9JRndpZFhCa1lYUmxYQ0lnT2lCY0ltUmxiR1YwWlZ3aUtTeGNjbHh1WEhSY2RGeDBYSFJjZEZ4MFhIUnJaWGx3WVhSb0lEMGdjR0YwYUNBcklGd2lMbHdpSUNzZ2EyVjVPMXh5WEc1Y2RGeDBYSFJjZEZ4MFhIUmNkRnh5WEc1Y2RGeDBYSFJjZEZ4MFhIUmphR0Z1WjJWekxuQjFjMmdvZTI1aGJXVTZibUZ0WlN4dlltcGxZM1E2Y205dmRFOWlhbVZqZEN4MGVYQmxPbU5vWVc1blpTeHZiR1JXWVd4MVpUcHZiR1JQWW1wbFkzUmJhMlY1WFN4dVpYZFdZV3gxWlRwdVpYZFBZbXBsWTNRc2EyVjVjR0YwYURwclpYbHdZWFJvZlNrN1hISmNibHgwWEhSY2RGeDBYSFJjZEhKbFkzVnljMlVvYm1GdFpTeHliMjkwVDJKcVpXTjBMRzlzWkU5aWFtVmpkRnRyWlhsZExIVnVaR1ZtYVc1bFpDeHJaWGx3WVhSb0tUdGNjbHh1WEhSY2RGeDBYSFJjZEgwcE8xeHlYRzVjZEZ4MFhIUmNkSDFjY2x4dVhIUmNkRngwZlZ4eVhHNWNkRngwWEhSamFHRnVaMlZ6WlhRdVptOXlSV0ZqYUNobWRXNWpkR2x2YmloamFHRnVaMlVwSUh0Y2NseHVYSFJjZEZ4MFhIUjJZWElnYTJWNWNHRjBhQ0E5SUNod1lYSjBjeTVzWlc1bmRHZytNQ0EvSUhCaGNuUnpMbXB2YVc0b1hDSXVYQ0lwSUNzZ1hDSXVYQ0lnT2lCY0lsd2lLU0FySUdOb1lXNW5aUzV1WVcxbE8xeHlYRzVjY2x4dVhIUmNkRngwWEhScFppQW9ZMmhoYm1kbExuUjVjR1VnUFQwOUlGd2lkWEJrWVhSbFhDSWdmSHdnWTJoaGJtZGxMblI1Y0dVZ1BUMDlJRndpWVdSa1hDSXBJSHNnWEhKY2JseDBYSFJjZEZ4MFhIUnlaVzlpYzJWeWRtVW9ZMmhoYm1kbExtOWlhbVZqZEN3Z2NHRnlkSE1wTzF4eVhHNWNkRngwWEhSY2RIMWNjbHh1WEhKY2JseDBYSFJjZEZ4MFkyaGhibWRsY3k1d2RYTm9LSHR1WVcxbE9tTm9ZVzVuWlM1dVlXMWxMRzlpYW1WamREcGphR0Z1WjJVdWIySnFaV04wTEhSNWNHVTZZMmhoYm1kbExuUjVjR1VzYjJ4a1ZtRnNkV1U2WTJoaGJtZGxMbTlzWkZaaGJIVmxMRzVsZDFaaGJIVmxPbU5vWVc1blpTNXZZbXBsWTNSYlkyaGhibWRsTG01aGJXVmRMR3RsZVhCaGRHZzZhMlY1Y0dGMGFIMHBPMXh5WEc1Y2RGeDBYSFJjZEhKbFkzVnljMlVvWTJoaGJtZGxMbTVoYldVc1kyaGhibWRsTG05aWFtVmpkQ3hqYUdGdVoyVXViMnhrVm1Gc2RXVXNZMmhoYm1kbExtOWlhbVZqZEZ0amFHRnVaMlV1Ym1GdFpWMHNhMlY1Y0dGMGFDazdYSEpjYmx4MFhIUmNkSDBwTzF4eVhHNWNkRngwWEhSallXeHNZbUZqYXloamFHRnVaMlZ6S1R0Y2NseHVYSFJjZEgwcE8xeHlYRzVjZEZ4MGNtVjBkWEp1SUc5aWMyVnlkbVZrTzF4eVhHNWNkSDA3WEhKY2JuMHBLQ2s3WEhKY2JseHVYRzVjYmk4dkx5OHZMeTh2THk4dkx5OHZMeTh2TDF4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZKY2JpOHZJQzR2Zmk5d2NtOTRlUzF2WW5ObGNuWmxMMmx1WkdWNExtcHpYRzR2THlCdGIyUjFiR1VnYVdRZ1BTQXhOVE5jYmk4dklHMXZaSFZzWlNCamFIVnVhM01nUFNBd0lpd2lhVzF3YjNKMElGTjVibU5vWlhJZ1puSnZiU0FuTGk5emVXNWphR1Z5TDFONWJtTm9aWEluTzF4dWFXMXdiM0owSUVSaGRHRlBZbXBsWTNSU1pYQnZjblJsY2lCbWNtOXRJQ2N1TDNONWJtTm9aWEl2UkdGMFlVOWlhbVZqZEZKbGNHOXlkR1Z5Snp0Y2JtbHRjRzl5ZENCRVlYUmhUMkpxWldOMFQySnpaWEoyWlhJZ1puSnZiU0FuTGk5emVXNWphR1Z5TDBSaGRHRlBZbXBsWTNSUFluTmxjblpsY2ljN1hHNWNibVY0Y0c5eWRDQjdVM2x1WTJobGNpd2dSR0YwWVU5aWFtVmpkRkpsY0c5eWRHVnlMQ0JFWVhSaFQySnFaV04wVDJKelpYSjJaWEo5TzF4dVhHNWNibHh1THk4Z1YwVkNVRUZEU3lCR1QwOVVSVklnTHk5Y2JpOHZJQzR2YzNKakwxTjVibU5vWlhJdWFuTWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjkKCi8qKiovIH0KLyoqKioqKi8gXSkKfSk7Cjs=",
      "sourceCodeClassname": "SlackProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "4-e375e3a3-4fc6-ba99-f624-3c4b8623d4aa4",
    "version": 2.500000000000001,
    "description": "Description of SlackProtoStub",
    "language": "Javascript",
    "type": "ProtoStubs",
    "objectName": "SlackProtoStub",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "interworking": true,
    "accessControlPolicy": "somePolicy",
    "constraints": {},
    "dataObjects": []
  },
  "sip.rethink-project.eu": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "IMSIWProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "4-e375e3a3-4fc6-ba99-f624-3c4b8623d4aa5",
    "version": 0.5,
    "description": "Description of IMSIWProtoStub",
    "language": "Javascript",
    "type": "ProtoStubs",
    "objectName": "IMSIWProtoStub",
    "configuration": {
      "credential_server": "https://ims.rethink-project.eu/credential"
    },
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "constraints": {},
    "dataObjects": [],
    "interworking": true
  }
}