{
  "GoogleProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "fitness.google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "24.40",
    "description": "Protostub of Google",
    "language": "javascript",
    "cguid": "406d1b76ae0394c37d6e7d0037a91cb7c",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "fitness.google.com",
    "configuration": {
      "sessions_query_interval": 300000,
      "domain": "localhost"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "sip.rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "23.00",
    "description": "Description of IMSIWProtoStub",
    "language": "javascript",
    "cguid": "42deef6d806460071a3a260ea4b6291ae",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "sip.rethink-project.eu",
    "configuration": {
      "credential_server": "https://ims.rethink-project.eu/credential",
      "domain": "hysmart.rethink.ptinovacao.pt"
    },
    "messageSchemas": "",
    "dataObjects": [
      "hyperty-catalogue://catalogue.hysmart.rethink.ptinovacao.pt/.well-known/dataschema/Connection"
    ],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "P2PHandlerProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "P2PHandlerProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "23.00",
    "description": "P2P Handler Protostub ",
    "language": "javascript",
    "cguid": "4456240d0c888e2293cdc568a7224b7c0",
    "type": "ProtoStubs",
    "constraints": {
      "windowSandbox": true
    },
    "objectName": "P2PHandlerProtoStub",
    "configuration": {
      "iceServers": [
        {
          "urls": "turn:numb.viagenie.ca",
          "credential": "zJcH3erd9cUv5Zh",
          "username": "luis-t-duarte@telecom.pt"
        },
        {
          "urls": [
            "stun:stun.voiparound.com",
            "stun:stun.voipbuster.com",
            "stun:stun.voipstunt.com",
            "stun:stun.voxgratia.org",
            "stun:stun.ekiga.net",
            "stun:stun.schlund.de",
            "stun:stun.iptel.org",
            "stun:stun.l.google.com:19302",
            "stun:stun1.l.google.com:19302",
            "stun:stun.ideasip.com",
            "stun:stun4.l.google.com:19302",
            "stun:stun2.l.google.com:19302",
            "stun:stun3.l.google.com:19302"
          ]
        }
      ],
      "iceTransportPolicy": "all"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "P2PRequesterProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "P2PRequesterProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "23.00",
    "description": "P2P Requester Protostub ",
    "language": "javascript",
    "cguid": "4bcb9977c1c46c13278273a67b5fe7aab",
    "type": "ProtoStubs",
    "constraints": {
      "windowSandbox": true
    },
    "objectName": "P2PRequesterProtoStub",
    "configuration": {
      "iceServers": [
        {
          "urls": "turn:numb.viagenie.ca",
          "credential": "zJcH3erd9cUv5Zh",
          "username": "luis-t-duarte@telecom.pt"
        },
        {
          "urls": [
            "stun:stun.voiparound.com",
            "stun:stun.voipbuster.com",
            "stun:stun.voipstunt.com",
            "stun:stun.voxgratia.org",
            "stun:stun.ekiga.net",
            "stun:stun.schlund.de",
            "stun:stun.iptel.org",
            "stun:stun.l.google.com:19302",
            "stun:stun1.l.google.com:19302",
            "stun:stun.ideasip.com",
            "stun:stun4.l.google.com:19302",
            "stun:stun2.l.google.com:19302",
            "stun:stun3.l.google.com:19302"
          ]
        }
      ],
      "iceTransportPolicy": "all"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProtoStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihvKXtpZih0W29dKXJldHVybiB0W29dLmV4cG9ydHM7dmFyIHM9dFtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChzLmV4cG9ydHMscyxzLmV4cG9ydHMsbikscy5sPSEwLHMuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxvKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9IiIsbihuLnM9Myl9KFtmdW5jdGlvbihlLHQsbil7dmFyIG89bigxKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LmtleXMobykuZm9yRWFjaChuPT57dmFyIG89bi5zcGxpdCgiLiIpLHM9by5zaGlmdCgpO3ZvaWQgMD09PWVbc10mJihlW3NdPXt9KSxmdW5jdGlvbiBlKHMpe3ZhciByPW8uc2hpZnQoKTswPT09by5sZW5ndGg/c1tyXT10LmJpbmQoe30sbik6KHZvaWQgMD09PXNbcl0mJihzW3JdPXt9KSxlKHNbcl0pKX0oZVtzXSl9KSxlfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9eyJhcGkudGVzdCI6W10sImFwcHMucGVybWlzc2lvbnMuaW5mbyI6WyJ0b2tlbiJdLCJhcHBzLnBlcm1pc3Npb25zLnJlcXVlc3QiOlsidG9rZW4iLCJzY29wZXMiLCJ0cmlnZ2VyX2lkIl0sImF1dGgucmV2b2tlIjpbInRva2VuIl0sImF1dGgudGVzdCI6WyJ0b2tlbiJdLCJib3RzLmluZm8iOlsidG9rZW4iXSwiY2hhbm5lbHMuYXJjaGl2ZSI6WyJ0b2tlbiIsImNoYW5uZWwiXSwiY2hhbm5lbHMuY3JlYXRlIjpbInRva2VuIiwibmFtZSJdLCJjaGFubmVscy5oaXN0b3J5IjpbInRva2VuIiwiY2hhbm5lbCJdLCJjaGFubmVscy5pbmZvIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjaGFubmVscy5pbnZpdGUiOlsidG9rZW4iLCJjaGFubmVsIiwidXNlciJdLCJjaGFubmVscy5qb2luIjpbInRva2VuIiwibmFtZSJdLCJjaGFubmVscy5raWNrIjpbInRva2VuIiwiY2hhbm5lbCIsInVzZXIiXSwiY2hhbm5lbHMubGVhdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImNoYW5uZWxzLmxpc3QiOlsidG9rZW4iXSwiY2hhbm5lbHMubWFyayI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0cyJdLCJjaGFubmVscy5yZW5hbWUiOlsidG9rZW4iLCJjaGFubmVsIiwibmFtZSJdLCJjaGFubmVscy5yZXBsaWVzIjpbInRva2VuIiwiY2hhbm5lbCIsInRocmVhZF90cyJdLCJjaGFubmVscy5zZXRQdXJwb3NlIjpbInRva2VuIiwiY2hhbm5lbCIsInB1cnBvc2UiXSwiY2hhbm5lbHMuc2V0VG9waWMiOlsidG9rZW4iLCJjaGFubmVsIiwidG9waWMiXSwiY2hhbm5lbHMudW5hcmNoaXZlIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjaGF0LmRlbGV0ZSI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0cyJdLCJjaGF0Lm1lTWVzc2FnZSI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0ZXh0Il0sImNoYXQucG9zdEVwaGVtZXJhbCI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0ZXh0IiwidXNlciJdLCJjaGF0LnBvc3RNZXNzYWdlIjpbInRva2VuIiwiY2hhbm5lbCIsInRleHQiXSwiY2hhdC51bmZ1cmwiOlsidG9rZW4iLCJjaGFubmVsIiwidHMiLCJ1bmZ1cmxzIl0sImNoYXQudXBkYXRlIjpbInRva2VuIiwiY2hhbm5lbCIsInRleHQiLCJ0cyJdLCJjb252ZXJzYXRpb25zLmFyY2hpdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImNvbnZlcnNhdGlvbnMuY2xvc2UiOlsidG9rZW4iLCJjaGFubmVsIl0sImNvbnZlcnNhdGlvbnMuY3JlYXRlIjpbInRva2VuIiwibmFtZSJdLCJjb252ZXJzYXRpb25zLmhpc3RvcnkiOlsidG9rZW4iLCJjaGFubmVsIl0sImNvbnZlcnNhdGlvbnMuaW5mbyI6WyJ0b2tlbiIsImNoYW5uZWwiXSwiY29udmVyc2F0aW9ucy5pbnZpdGUiOlsidG9rZW4iLCJjaGFubmVsIiwidXNlcnMiXSwiY29udmVyc2F0aW9ucy5qb2luIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjb252ZXJzYXRpb25zLmtpY2siOlsidG9rZW4iLCJjaGFubmVsIiwidXNlciJdLCJjb252ZXJzYXRpb25zLmxlYXZlIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjb252ZXJzYXRpb25zLmxpc3QiOlsidG9rZW4iXSwiY29udmVyc2F0aW9ucy5tZW1iZXJzIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjb252ZXJzYXRpb25zLm9wZW4iOlsidG9rZW4iXSwiY29udmVyc2F0aW9ucy5yZW5hbWUiOlsidG9rZW4iLCJjaGFubmVsIiwibmFtZSJdLCJjb252ZXJzYXRpb25zLnJlcGxpZXMiOlsidG9rZW4iLCJjaGFubmVsIiwidHMiXSwiY29udmVyc2F0aW9ucy5zZXRQdXJwb3NlIjpbInRva2VuIiwiY2hhbm5lbCIsInB1cnBvc2UiXSwiY29udmVyc2F0aW9ucy5zZXRUb3BpYyI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0b3BpYyJdLCJjb252ZXJzYXRpb25zLnVuYXJjaGl2ZSI6WyJ0b2tlbiIsImNoYW5uZWwiXSwiZG5kLmVuZERuZCI6WyJ0b2tlbiJdLCJkbmQuZW5kU25vb3plIjpbInRva2VuIl0sImRuZC5pbmZvIjpbInRva2VuIl0sImRuZC5zZXRTbm9vemUiOlsidG9rZW4iLCJudW1fbWludXRlcyJdLCJkbmQudGVhbUluZm8iOlsidG9rZW4iXSwiZW1vamkubGlzdCI6WyJ0b2tlbiJdLCJmaWxlcy5jb21tZW50cy5hZGQiOlsidG9rZW4iLCJjb21tZW50IiwiZmlsZSJdLCJmaWxlcy5jb21tZW50cy5kZWxldGUiOlsidG9rZW4iLCJmaWxlIiwiaWQiXSwiZmlsZXMuY29tbWVudHMuZWRpdCI6WyJ0b2tlbiIsImNvbW1lbnQiLCJmaWxlIiwiaWQiXSwiZmlsZXMuZGVsZXRlIjpbInRva2VuIiwiZmlsZSJdLCJmaWxlcy5pbmZvIjpbInRva2VuIiwiZmlsZSJdLCJmaWxlcy5saXN0IjpbInRva2VuIl0sImZpbGVzLnJldm9rZVB1YmxpY1VSTCI6WyJ0b2tlbiIsImZpbGUiXSwiZmlsZXMuc2hhcmVkUHVibGljVVJMIjpbInRva2VuIiwiZmlsZSJdLCJmaWxlcy51cGxvYWQiOlsidG9rZW4iXSwiZ3JvdXBzLmFyY2hpdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImdyb3Vwcy5jcmVhdGUiOlsidG9rZW4iLCJuYW1lIl0sImdyb3Vwcy5jcmVhdGVDaGlsZCI6WyJ0b2tlbiIsImNoYW5uZWwiXSwiZ3JvdXBzLmhpc3RvcnkiOlsidG9rZW4iLCJjaGFubmVsIl0sImdyb3Vwcy5pbmZvIjpbInRva2VuIiwiY2hhbm5lbCJdLCJncm91cHMuaW52aXRlIjpbInRva2VuIiwiY2hhbm5lbCIsInVzZXIiXSwiZ3JvdXBzLmtpY2siOlsidG9rZW4iLCJjaGFubmVsIiwidXNlciJdLCJncm91cHMubGVhdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImdyb3Vwcy5saXN0IjpbInRva2VuIl0sImdyb3Vwcy5tYXJrIjpbInRva2VuIiwiY2hhbm5lbCIsInRzIl0sImdyb3Vwcy5vcGVuIjpbInRva2VuIiwiY2hhbm5lbCJdLCJncm91cHMucmVuYW1lIjpbInRva2VuIiwiY2hhbm5lbCIsIm5hbWUiXSwiZ3JvdXBzLnJlcGxpZXMiOlsidG9rZW4iLCJjaGFubmVsIiwidGhyZWFkX3RzIl0sImdyb3Vwcy5zZXRQdXJwb3NlIjpbInRva2VuIiwiY2hhbm5lbCIsInB1cnBvc2UiXSwiZ3JvdXBzLnNldFRvcGljIjpbInRva2VuIiwiY2hhbm5lbCIsInRvcGljIl0sImdyb3Vwcy51bmFyY2hpdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImltLmNsb3NlIjpbInRva2VuIiwiY2hhbm5lbCJdLCJpbS5oaXN0b3J5IjpbInRva2VuIiwiY2hhbm5lbCJdLCJpbS5saXN0IjpbInRva2VuIl0sImltLm1hcmsiOlsidG9rZW4iLCJjaGFubmVsIiwidHMiXSwiaW0ub3BlbiI6WyJ0b2tlbiIsInVzZXIiXSwiaW0ucmVwbGllcyI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0aHJlYWRfdHMiXSwibXBpbS5jbG9zZSI6WyJ0b2tlbiIsImNoYW5uZWwiXSwibXBpbS5oaXN0b3J5IjpbInRva2VuIiwiY2hhbm5lbCJdLCJtcGltLmxpc3QiOlsidG9rZW4iXSwibXBpbS5tYXJrIjpbInRva2VuIiwiY2hhbm5lbCIsInRzIl0sIm1waW0ub3BlbiI6WyJ0b2tlbiIsInVzZXJzIl0sIm1waW0ucmVwbGllcyI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0aHJlYWRfdHMiXSwib2F1dGguYWNjZXNzIjpbImNsaWVudF9pZCIsImNsaWVudF9zZWNyZXQiLCJjb2RlIl0sIm9hdXRoLnRva2VuIjpbImNsaWVudF9pZCIsImNsaWVudF9zZWNyZXQiLCJjb2RlIl0sInBpbnMuYWRkIjpbInRva2VuIiwiY2hhbm5lbCJdLCJwaW5zLmxpc3QiOlsidG9rZW4iLCJjaGFubmVsIl0sInBpbnMucmVtb3ZlIjpbInRva2VuIiwiY2hhbm5lbCJdLCJyZWFjdGlvbnMuYWRkIjpbInRva2VuIiwibmFtZSJdLCJyZWFjdGlvbnMuZ2V0IjpbInRva2VuIl0sInJlYWN0aW9ucy5saXN0IjpbInRva2VuIl0sInJlYWN0aW9ucy5yZW1vdmUiOlsidG9rZW4iLCJuYW1lIl0sInJlbWluZGVycy5hZGQiOlsidG9rZW4iLCJ0ZXh0IiwidGltZSJdLCJyZW1pbmRlcnMuY29tcGxldGUiOlsidG9rZW4iLCJyZW1pbmRlciJdLCJyZW1pbmRlcnMuZGVsZXRlIjpbInRva2VuIiwicmVtaW5kZXIiXSwicmVtaW5kZXJzLmluZm8iOlsidG9rZW4iLCJyZW1pbmRlciJdLCJyZW1pbmRlcnMubGlzdCI6WyJ0b2tlbiJdLCJydG0uY29ubmVjdCI6WyJ0b2tlbiJdLCJydG0uc3RhcnQiOlsidG9rZW4iXSwic2VhcmNoLmFsbCI6WyJ0b2tlbiIsInF1ZXJ5Il0sInNlYXJjaC5maWxlcyI6WyJ0b2tlbiIsInF1ZXJ5Il0sInNlYXJjaC5tZXNzYWdlcyI6WyJ0b2tlbiIsInF1ZXJ5Il0sInN0YXJzLmFkZCI6WyJ0b2tlbiJdLCJzdGFycy5saXN0IjpbInRva2VuIl0sInN0YXJzLnJlbW92ZSI6WyJ0b2tlbiJdLCJ0ZWFtLmFjY2Vzc0xvZ3MiOlsidG9rZW4iXSwidGVhbS5iaWxsYWJsZUluZm8iOlsidG9rZW4iXSwidGVhbS5pbmZvIjpbInRva2VuIl0sInRlYW0uaW50ZWdyYXRpb25Mb2dzIjpbInRva2VuIl0sInRlYW0ucHJvZmlsZS5nZXQiOlsidG9rZW4iXSwidXNlcmdyb3Vwcy5jcmVhdGUiOlsidG9rZW4iLCJuYW1lIl0sInVzZXJncm91cHMuZGlzYWJsZSI6WyJ0b2tlbiIsInVzZXJncm91cCJdLCJ1c2VyZ3JvdXBzLmVuYWJsZSI6WyJ0b2tlbiIsInVzZXJncm91cCJdLCJ1c2VyZ3JvdXBzLmxpc3QiOlsidG9rZW4iXSwidXNlcmdyb3Vwcy51cGRhdGUiOlsidG9rZW4iLCJ1c2VyZ3JvdXAiXSwidXNlcmdyb3Vwcy51c2Vycy5saXN0IjpbInRva2VuIiwidXNlcmdyb3VwIl0sInVzZXJncm91cHMudXNlcnMudXBkYXRlIjpbInRva2VuIiwidXNlcmdyb3VwIiwidXNlcnMiXSwidXNlcnMuZGVsZXRlUGhvdG8iOlsidG9rZW4iXSwidXNlcnMuZ2V0UHJlc2VuY2UiOlsidG9rZW4iLCJ1c2VyIl0sInVzZXJzLmlkZW50aXR5IjpbInRva2VuIl0sInVzZXJzLmluZm8iOlsidG9rZW4iLCJ1c2VyIl0sInVzZXJzLmxpc3QiOlsidG9rZW4iXSwidXNlcnMuc2V0QWN0aXZlIjpbInRva2VuIl0sInVzZXJzLnNldFBob3RvIjpbInRva2VuIiwiaW1hZ2UiXSwidXNlcnMuc2V0UHJlc2VuY2UiOlsidG9rZW4iLCJwcmVzZW5jZSJdLCJ1c2Vycy5wcm9maWxlLmdldCI6WyJ0b2tlbiJdLCJ1c2Vycy5wcm9maWxlLnNldCI6WyJ0b2tlbiJdfX0sZnVuY3Rpb24oZSx0LG4pe2xldCBvPW4oNSkscz1lbmNvZGVVUklDb21wb25lbnQscj1lPT5PYmplY3Qua2V5cyhlKS5tYXAodD0+cyh0KSsiPSIrcyhlW3RdKSkuam9pbigiJiIpO2FzeW5jIGZ1bmN0aW9uIGEoZSx0LG4pe3RyeXt2YXIgcz1vKGUsdCk7aWYocyl0aHJvdyBzO09iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24oZSl7Im9iamVjdCI9PXR5cGVvZiB0W2VdJiYodFtlXT1KU09OLnN0cmluZ2lmeSh0W2VdKSl9KTt2YXIgYT17bWV0aG9kOiJQT1NUIixoZWFkZXJzOm5ldyBIZWFkZXJzKHsiQ29udGVudC1UeXBlIjoiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIn0pLGJvZHk6cih0KX0saT1hd2FpdCBmZXRjaChgaHR0cHM6Ly9zbGFjay5jb20vYXBpLyR7ZX1gLGEpLGM9YXdhaXQgaS5qc29uKCk7Yy5lcnJvcj9uKEVycm9yKGMuZXJyb3IpKTpuKG51bGwsYyl9Y2F0Y2goZSl7bihlKX19ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtpZighbilyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixvKXthKGUsdCxmdW5jdGlvbihlLHQpe2U/byhlKTpuKHQpfSl9KTthKGUsdCxuKX19LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgbz10W25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpO3QuZGVmYXVsdD1mdW5jdGlvbihlLHQsbixvKXtyZXR1cm57bmFtZToiU2xhY2tQcm90b1N0dWIiLGluc3RhbmNlOm5ldyByKGUsdCxuLG8pfX07dmFyIHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShuKDQpKTt2YXIgcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLG8scil7aWYoZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0odGhpcyxlKSwhdCl0aHJvdyBuZXcgRXJyb3IoIlRoZSBydW50aW1lUHJvdG9TdHViVVJMIGlzIGEgbmVlZGVkIHBhcmFtZXRlciIpO2lmKCFuKXRocm93IG5ldyBFcnJvcigiVGhlIGJ1cyBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIiKTtpZighbyl0aHJvdyBuZXcgRXJyb3IoIlRoZSBjb25maWcgaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gQ29uc3RydWN0b3IgTG9hZGVkIik7dmFyIGE9dGhpczt0aGlzLl93cz1udWxsLHRoaXMuX3RvU3Vic2NyaWJlUHJlc2VuY2U9W10sdGhpcy5fYWRkZWRVc2Vyc0luZm89W10sdGhpcy5fYWxyZWFkeUNyZWF0ZWQ9ITEsdGhpcy5fc2xhY2s9cy5kZWZhdWx0LHRoaXMuX3VzZXJzVXBkYXRlZD0hMSx0aGlzLl9zdWJzY3JpYmVkTGlzdD1bXSx0aGlzLl9tZXNzYWdlSGlzdG9yeUNvbnRyb2w9e30sdGhpcy5fdXNlcnNMaXN0PVtdLHRoaXMuX2NoYW5uZWxzTGlzdD1bXSx0aGlzLl9pZD0wLHRoaXMuX3Rva2VuPSIiLHRoaXMuX2RhdGFPYmplY3RSZXBvcnRlclVSTCx0aGlzLl9mYWN0b3J5PXIsdGhpcy5fY29udGV4dFJlcG9ydGVyc0luZm89e30sdGhpcy5fc3luY2hlcj1yLmNyZWF0ZVN5bmNoZXIodCxuLG8pLHRoaXMuX2NoYXRNYW5hZ2VyPXIuY3JlYXRlQ2hhdE1hbmFnZXIodCxuLG8sdGhpcy5fc3luY2hlciksdGhpcy5fY29udGV4dFJlcG9ydGVyPXIuY3JlYXRlQ29udGV4dFJlcG9ydGVyKHQsbixvLHRoaXMuX3N5bmNoZXIpLHRoaXMuX215VXJsPXQsdGhpcy5fYnVzPW4sdGhpcy5fY29uZmlnPW8sdGhpcy5fcnVudGltZVNlc3Npb25VUkw9by5ydW50aW1lVVJMLHRoaXMuX3JlT3Blbj0hMSx0aGlzLl9jaGF0TWFuYWdlci5vbkludml0YXRpb24oZnVuY3Rpb24oZSl7YS5fb25TbGFja0ludml0YXRpb24oZSl9KSx0aGlzLl9ub3RpZmljYXRpb25IYW5kbGVyPXIuY3JlYXRlTm90aWZpY2F0aW9uSGFuZGxlcihuKSx0aGlzLl9ub3RpZmljYXRpb25IYW5kbGVyLm9uTm90aWZpY2F0aW9uKCJjb21tIixmdW5jdGlvbihlKXthLl9jaGF0TWFuYWdlci5wcm9jZXNzTm90aWZpY2F0aW9uKGUpfSksbi5hZGRMaXN0ZW5lcigiKiIsZnVuY3Rpb24oZSl7aWYoZS5mcm9tIT09dClzd2l0Y2goY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gbmV3IG1zZyAiLGUpLGUudHlwZSl7Y2FzZSJjcmVhdGUiOmEuX25vdGlmaWNhdGlvbkhhbmRsZXIub25DcmVhdGUoZSk7YnJlYWs7Y2FzZSJkZWxldGUiOmEuX25vdGlmaWNhdGlvbkhhbmRsZXIub25EZWxldGUoZSl9fSksYS5fc2VuZFN0YXR1cygiY3JlYXRlZCIpfXJldHVybiBvKGUsW3trZXk6Il9maWx0ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBlLnZpYSE9PXRoaXMuX215VXJsfX0se2tleToiX29wZW4iLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztuLl9zZXNzaW9uP2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHNlc3Npb24gYWxyZWFkeSBleGlzdCIpOihjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjcmVhdGluZyBTZXNzaW9uIGZvciB0b2tlbjoiLGUpLG4uX3NlbmRTdGF0dXMoImluLXByb2dyZXNzIiksbi5fc2Vzc2lvbj10aGlzLl9zbGFjay5ydG0uY29ubmVjdCh7dG9rZW46ZSxiYXRjaF9wcmVzZW5jZV9hd2FyZToxLHByZXNlbmNlX3N1YjohMH0pLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHNlc3Npb24iLG4uX3Nlc3Npb24pLG4uX3Nlc3Npb24uY3JlYXRlZFRpbWU9KG5ldyBEYXRlKS5nZXRUaW1lKCkvMWUzLG4uX3Nlc3Npb24udGhlbihmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBTZXNzaW9uIHJlc3VsdCIsZSksZS5vayYmKG4uX3dzPW5ldyBXZWJTb2NrZXQoZS51cmwpLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHdlYnNvY2tldCIsbi5fd3MpLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHdlYnNvY2tldCB1cmwgIixuLl93cy51cmwpLG4uX3dzLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgdD1KU09OLnBhcnNlKGUuZGF0YSk7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gbmV3IG1zZyBvbiB3ZWJTb2NrZXQiLHQpLCJtZXNzYWdlIj09dC50eXBlP24uX2hhbmRsZU5ld01lc3NhZ2UodCk6InByZXNlbmNlX2NoYW5nZSI9PXQudHlwZT9uLl9oYW5kbGVQcmVzZW5jZUNoYW5nZSh0KToibWVtYmVyX2pvaW5lZF9jaGFubmVsIj09dC50eXBlJiZuLl9oYW5kbGVOZXdVc2VyKHQpfSxuLl93cy5vbmVycm9yPWZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHdlYnNvY2tlciBFcnJvciIsZSl9KX0pLG4uX3NlbmRTdGF0dXMoImxpdmUiKSksc2V0VGltZW91dChmdW5jdGlvbigpe3QoKX0pfX0se2tleToiX3Jlc3VtZVJlcG9ydGVyIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLG8pe2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHJlc3VtaW5nIHJlcG9ydGVyIG9mICIsZSksdC5fc3luY2hlci5yZXN1bWVSZXBvcnRlcnMoe3N0b3JlOiEwLHJlcG9ydGVyOmV9KS50aGVuKGZ1bmN0aW9uKHQpe3ZhciBvPU9iamVjdC5rZXlzKHQpO2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdICIsdCxvKTtyZXR1cm4gby5mb3JFYWNoKGZ1bmN0aW9uKG8pe2lmKHRbb10uX25hbWU9PT1lJiZvLnN0YXJ0c1dpdGgoImNvbnRleHQ6Ly8iKSlyZXR1cm4gY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gcmVwb3J0ZXIgdG8gcmV0dXJuIix0W29dKSxuKHRbb10pfSksbighMSl9KX0pfX0se2tleToiX29uU2xhY2tJbnZpdGF0aW9uIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2UuaWRlbnRpdHkuaGFzT3duUHJvcGVydHkoImFjY2Vzc1Rva2VuIikmJmUuaWRlbnRpdHkuYWNjZXNzVG9rZW4/KHRoaXMuX3Rva2VuPWUuaWRlbnRpdHkuYWNjZXNzVG9rZW4sdC5fb3Blbih0aGlzLl90b2tlbixmdW5jdGlvbigpe2lmKHQuX2ZpbHRlcihlKSl7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gQWZ0ZXIgRmlsdGVyIixlKTt2YXIgbj1lLnNjaGVtYTtpZihlLnZhbHVlLm5hbWUpe3ZhciBvPW4uc3BsaXQoIi8iKTsiQ29tbXVuaWNhdGlvbiI9PT1vW28ubGVuZ3RoLTFdP3QuX2dldFNsYWNrSW5mb3JtYXRpb24oZS50byxlLmlkZW50aXR5LmlucHV0LnVzZXJfaWQpLnRoZW4oZnVuY3Rpb24obil7dmFyIG89bi5vd25JbmZvLHM9bi5pbnZJbmZvO2NvbnNvbGUubG9nKCJTbGFjayBVc2VyIGluZm9ybWF0aW9uOiAiLG4sZSk7dmFyIHI9dC5fZmFjdG9yeS5jcmVhdGVNZXNzYWdlQm9keUlkZW50aXR5KG8ubmFtZSwic2xhY2s6Ly9zbGFjay5jb20vIitvLm5hbWUrIkBzbGFjay5jb20iLG8ucHJvZmlsZS5pbWFnZV8xOTIsby5uYW1lLCIiLCJzbGFjay5jb20iLHZvaWQgMCxvLnByb2ZpbGUpLGE9dC5fZmFjdG9yeS5jcmVhdGVNZXNzYWdlQm9keUlkZW50aXR5KHMubmFtZSwic2xhY2s6Ly9zbGFjay5jb20vIitzLm5hbWUrIkBzbGFjay5jb20iLHMucHJvZmlsZS5pbWFnZV8xOTIscy5uYW1lLCIiLCJzbGFjay5jb20iLHZvaWQgMCxzLnByb2ZpbGUpO2UuYWNrKDIwMCksY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gc3Vic2NyaWJpbmcgb2JqZWN0IixlLnVybCxyKTt2YXIgaT17aWQ6cy5pZCxuYW1lOnMubmFtZSx1c2VyVVJMOmEudXNlclByb2ZpbGUudXNlclVSTCxpZGVudGl0eTphfSxjPXtpZDplLmlkZW50aXR5LmlucHV0LnVzZXJfaWQsdXNlclVSTDpyLnVzZXJQcm9maWxlLnVzZXJVUkx9O2lmKHQuX2FscmVhZHlDcmVhdGVkKWlmKGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIEFscmVhZHkgY3JlYXRlZCIsZSksY29uc29sZS5sb2codC5fc3Vic2NyaWJlZExpc3QubGVuZ3RoKSwwIT10Ll9zdWJzY3JpYmVkTGlzdC5sZW5ndGgpdC5fY2hhbm5lbFN0YXR1c0luZm8oZSxpLGMpO2Vsc2V7dmFyIGw9ZS50by5zcGxpdCgiLy8iKVswXSsiLy9zbGFjay5jb20vIitlLnRvLnNwbGl0KCIvLyIpWzFdO3QuX2NyZWF0ZU5ld0NvbnRleHRSZXBvcnRlcihsKX1lbHNle2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIE5vdCBBbHJlYWR5IGNyZWF0ZWQiLGUpLHQuX2FscmVhZHlDcmVhdGVkPSEwLHQuX2RhdGFPYmplY3RSZXBvcnRlclVSTD1lLnVybDt2YXIgdT17dXNlcjoic2xhY2s6Ly8iK28ubmFtZSsiQHNsYWNrLmNvbSIsZG9tYWluOiJzbGFjay5jb20iLGlkOmUuaWRlbnRpdHkuaW5wdXQudXNlcl9pZCx1c2VyVVJMOiJzbGFjazovL3NsYWNrLmNvbS8iK28ubmFtZSsiQHNsYWNrLmNvbSIsaWRlbnRpdHk6cn07dC5fYWRkZWRVc2Vyc0luZm8ucHVzaCh1KSx0Ll9jcmVhdGVOZXdDb250ZXh0UmVwb3J0ZXIoci51c2VyUHJvZmlsZS51c2VyVVJMKS50aGVuKGZ1bmN0aW9uKG4pezE9PW4mJnQuX2NoYXRNYW5hZ2VyLmpvaW4oZS51cmwsITEscikudGhlbihmdW5jdGlvbihuKXt0Ll9wcmVwYXJlQ2hhdChuKTt2YXIgbz17dHlwZToicHJlc2VuY2Vfc3ViIixpZHM6dC5fdG9TdWJzY3JpYmVQcmVzZW5jZX07Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gd2Vic29ja2V0IHNlbnRtZXNzYWdlIix0Ll93cy5yZWFkeVN0YXRlLG8pLHQuX3dzLnNlbmQoSlNPTi5zdHJpbmdpZnkobykpO3ZhciBzPXt1cmxEYXRhT2JqOmUudXJsLHNjaGVtYTplLnNjaGVtYSxzdWJzY3JpYmVkOiEwLGlkZW50aXR5OnIsY2hhdDpufTt0Ll9zdWJzY3JpYmVkTGlzdC5wdXNoKHMpLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHN1YnNjcmliZWQgbGlzdCIsdC5fc3Vic2NyaWJlZExpc3QpLGUuaWRlbnRpdHkuaW5wdXQudXNlcl9pZCYmKHQuX2lkPWUuaWRlbnRpdHkuaW5wdXQudXNlcl9pZCksdC5fY2hhbm5lbFN0YXR1c0luZm8oZSxpLGMpfSl9KX19KTplLmVycm9yKCJJbnZhbGlkIFNjaGVtZTogIitvW28ubGVuZ3RoLTFdKX1lbHNlIGUuZXJyb3IoIkNoYXQgTmFtZSBNaXNzaW5nIil9fSkpOmUuZXJyb3IoIkFjY2VzcyBUb2tlbiBNaXNzaW5nIil9fSx7a2V5OiJfY3JlYXRlTmV3Q29udGV4dFJlcG9ydGVyIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLG8pe3QuX3Jlc3VtZVJlcG9ydGVyKGUpLnRoZW4oZnVuY3Rpb24obyl7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gVEVTVCBjcmVhdGluZyByZXBvcnRlciBmb3IiLGUpLHQuX2FkZGVkVXNlcnNJbmZvLmZvckVhY2goZnVuY3Rpb24ocyl7aWYocy51c2VyVVJMPT1lKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBURVNUIGdldCBwcmVzZW5zZSBmb3IgIixzKTt2YXIgcj17dG9rZW46dC5fdG9rZW4sdXNlcjpzLmlkfTt0Ll9zbGFjay51c2Vycy5nZXRQcmVzZW5jZShyLGZ1bmN0aW9uKHIsYSl7aWYocilyZXR1cm4gY29uc29sZS5lcnJvcigiW1NsYWNrUHJvdG9zdHViXSBlcnJvciIsciksbighMSk7aWYoY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gUFJFU0VOQ0UgT0YgVVNFUiIscyxhKSwhYS5vaylyZXR1cm4gbighMSk7aWYodC5fdG9TdWJzY3JpYmVQcmVzZW5jZS5wdXNoKHMuaWQpLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHRvU3Vic2NyaWJlQXJyYXkiLHQuX3RvU3Vic2NyaWJlUHJlc2VuY2UsImludGV4dCIsSlNPTi5zdHJpbmdpZnkodC5fdG9TdWJzY3JpYmVQcmVzZW5jZSkpLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHJlc3VtZWQgb2JqIixvKSxvKXJldHVybiBjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSByZXBvcnRlciBmb3IgdGhpcyB1c2VyVVJMOiIsZSwiIGFscmVhZHkgZXhpc3RzICIsbyksdC5fY29udGV4dFJlcG9ydGVyc0luZm9bcy5pZF09byxuKCEwKTt2YXIgaT10Ll9jcmVhdGVOZXdPYmpQcmVzZW5jZShhLnByZXNlbmNlKTtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjcmVhdGluZyBhIG5ldyBjb250ZXh0UmVwb3J0ZXIgZm9yIGludml0ZWRVU0VSICIsaSxzKSx0Ll9jb250ZXh0UmVwb3J0ZXIuY3JlYXRlKHMudXNlclVSTCxpLFsiYXZhaWxhYmlsaXR5X2NvbnRleHQiXSxzLnVzZXJVUkwscy51c2VyVVJMKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBDT05URVhUIFJFVFVSTkVEIixlKSxlLm9uU3Vic2NyaXB0aW9uKGZ1bmN0aW9uKGUpe2UuYWNjZXB0KCksY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gbmV3IHN1YnMiLGUpfSksdC5fY29udGV4dFJlcG9ydGVyc0luZm9bcy5pZF09ZSxuKCEwKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2NvbnNvbGUuZXJyb3IoIltTbGFja1Byb3Rvc3R1Yl0gZXJyIixlKX0pLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHdlYnNvY2tldCByZWFkeVN0YXRlIix0Ll93cy5yZWFkeVN0YXRlKX0pfX0pfSkuY2F0Y2goZnVuY3Rpb24oZSl7cmV0dXJuIGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIGVycm9yIixlKSxuKCExKX0pfSl9fSx7a2V5OiJfY3JlYXRlTmV3T2JqUHJlc2VuY2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QuYXNzaWduKHt9LHtpZDoiXyIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsOSksdmFsdWVzOlt7dmFsdWU6dGhpcy5fZ2V0UHJlc2VuY2UoZSksbmFtZToiYXZhaWxhYmlsaXR5Iix0eXBlOiJhdmFpbGFiaWxpdHlfc3RhdHVzIix1bml0OiJwcmVzIn1dfSl9fSx7a2V5OiJfZ2V0UHJlc2VuY2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiJhY3RpdmUiPT09ZT8iYXZhaWxhYmxlIjoidW5hdmFpbGFibGUifX0se2tleToiX2dldFNsYWNrSW5mb3JtYXRpb24iLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obyxzKXt2YXIgcj0iaHR0cHM6Ly9zbGFjay5jb20vYXBpL3VzZXJzLmxpc3Q/dG9rZW49IituLl90b2tlbixhPSJodHRwczovL3NsYWNrLmNvbS9hcGkvY2hhbm5lbHMubGlzdD90b2tlbj0iK24uX3Rva2VuLGk9bi5fc2VuZEhUVFBSZXF1ZXN0KCJHRVQiLHIpLGM9bi5fc2VuZEhUVFBSZXF1ZXN0KCJHRVQiLGEpO1Byb21pc2UuYWxsKFtpLGNdKS50aGVuKGZ1bmN0aW9uKHMpe24uX3VzZXJzTGlzdD1zWzBdLm1lbWJlcnMsbi5fY2hhbm5lbHNMaXN0PXNbMV0uY2hhbm5lbHM7dmFyIHI9ZS5zcGxpdCgiOi8vIilbMV0uc3BsaXQoIkAiKVswXSxhPW4uX3VzZXJzTGlzdC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUubmFtZT09PXJ9KVswXSxpPW4uX3VzZXJzTGlzdC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWQ9PT10fSlbMF07byh7aW52SW5mbzphLG93bkluZm86aX0pfSxmdW5jdGlvbihlKXtjb25zb2xlLmVycm9yKCJbU2xhY2tQcm90b3N0dWJdICIsZSkscyhlKX0pfSl9fSx7a2V5OiJfY2hhbm5lbFN0YXR1c0luZm8iLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgbz10aGlzLHM9ZS52YWx1ZS5uYW1lLnNwbGl0KCIgIikuam9pbigiLSIpLnJlcGxhY2UoL1wvL2dpLCItIikscj1vLl9jaGFubmVsc0xpc3QuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLm5hbWU9PT1zfSlbMF0sYT1udWxsO2lmKHIpe2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIGNoYW5uZWwgZXhpc3QiLHIpO3ZhciBpPSExOyhhPW8uX2NoYW5uZWxzTGlzdC5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUubmFtZT09PXN9KVswXS5tZW1iZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2U9PT10LmlkJiYoaT0hMCl9KSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjaGFubmVsIG1lbWJlcnMiLGEsIiAgIC0+IixpKTt2YXIgYz0wLGw9MDtvLl9zdWJzY3JpYmVkTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QudXJsRGF0YU9iaj09PWUudXJsJiYobD1jKSxjKyt9KSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjaGFubmVscyIsby5fc3Vic2NyaWJlZExpc3Qsby5fc3Vic2NyaWJlZExpc3QubGVuZ3RoLGwpLG8uX3N1YnNjcmliZWRMaXN0W2xdLmNoYW5uZWxJRD1yLmlkLGl8fG8uX2ludml0ZSh0LmlkLHIuaWQpfWVsc2Ugby5fY3JlYXRlQ2hhbm5lbChzLGUudXJsKS50aGVuKGZ1bmN0aW9uKG4pe2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdICBhZnRlciBjcmVhdGUgY2hhbm5lbCAiLG4pLG4mJm8uX2ludml0ZSh0LmlkLCIiLGUudXJsKX0pO28uX3VzZXJzVXBkYXRlZD9jb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB1c2VycyBBbHJlYWR5IFVwZGF0ZWQiKTpvLl9hZGRBbGxVc2Vyc1RvSHlwZXJ0eShhLHQsbil9fSx7a2V5OiJfYWRkQWxsVXNlcnNUb0h5cGVydHkiLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgbz10aGlzO28uX3VzZXJzVXBkYXRlZD0hMDt2YXIgcz1bXSxyPXZvaWQgMDtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBsZXRzIGNoZWNrIGlmIHVzZXJzIG5lZWRzIHRvIGJlIGFkZGVkIiksZSYmby5fdXNlcnNMaXN0LmZvckVhY2goZnVuY3Rpb24oYSl7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGU9PT1hLmlkJiZ0LmlkIT1hLmlkJiZuLmlkIT1hLmlkKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB0byBhZGQgIixhLmlkKTt2YXIgaT1vLl9mYWN0b3J5LmNyZWF0ZU1lc3NhZ2VCb2R5SWRlbnRpdHkoYS5uYW1lLCJzbGFjazovL3NsYWNrLmNvbS8iK2EubmFtZSsiQHNsYWNrLmNvbSIsYS5wcm9maWxlLmltYWdlXzE5MixhLm5hbWUsIiIsInNsYWNrLmNvbSIsdm9pZCAwLGEucHJvZmlsZSk7cj17dXNlcjoic2xhY2s6Ly8iK2EubmFtZSsiQHNsYWNrLmNvbSIsZG9tYWluOiJzbGFjay5jb20iLGlkOmEuaWQsdXNlclVSTDoic2xhY2s6Ly9zbGFjay5jb20vIithLm5hbWUrIkBzbGFjay5jb20iLGlkZW50aXR5Oml9LG8uX2FkZGVkVXNlcnNJbmZvLnB1c2gocikscy5wdXNoKHIpfX0pfSkscj17dXNlcjoic2xhY2s6Ly8iK3QubmFtZSsiQHNsYWNrLmNvbSIsZG9tYWluOiJzbGFjay5jb20iLGlkOnQuaWQsdXNlclVSTDoic2xhY2s6Ly9zbGFjay5jb20vIit0Lm5hbWUrIkBzbGFjay5jb20iLGlkZW50aXR5OnQuaWRlbnRpdHl9LG8uX2FkZGVkVXNlcnNJbmZvLnB1c2gocikscy5wdXNoKHIpLHMuZm9yRWFjaChmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBURVNUIGpvaW5pbmcgd2l0aCB1c2VyIixlKSxlLnVzZXJVUkwhPT1uLnVzZXJVUkwmJm8uX2NyZWF0ZU5ld0NvbnRleHRSZXBvcnRlcihlLnVzZXJVUkwpLnRoZW4oZnVuY3Rpb24odCl7MT09dCYmby5fY2hhdE1hbmFnZXIuam9pbihvLl9kYXRhT2JqZWN0UmVwb3J0ZXJVUkwsITEsZS5pZGVudGl0eSkudGhlbihmdW5jdGlvbih0KXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjaGF0bWFuYWdlciBKT0lOIix0LGUudXNlclVSTCxuLnVzZXJVUkwpLG8uX3ByZXBhcmVDaGF0KHQpO3ZhciBzPXt0eXBlOiJwcmVzZW5jZV9zdWIiLGlkczpvLl90b1N1YnNjcmliZVByZXNlbmNlfTtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB3ZWJzb2NrZXQgc2VudG1lc3NhZ2UiLG8uX3dzLnJlYWR5U3RhdGUscyksby5fd3Muc2VuZChKU09OLnN0cmluZ2lmeShzKSl9KS5jYXRjaChmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjaGF0bWFuYWdlciBKT0lOIGVycm9yIixlKX0pfSl9KX19LHtrZXk6Il9oYW5kbGVOZXdVc2VyIix2YWx1ZTpmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBIYW5kbGluZyBhIG5ldyB1c2VyIixlKTt2YXIgdD10aGlzLG49dm9pZCAwO2lmKHQuX3N1YnNjcmliZWRMaXN0LmZvckVhY2goZnVuY3Rpb24odCl7dC5jaGFubmVsSUQ9PT1lLmNoYW5uZWwmJihuPXQpfSksbil7dmFyIG89dC5fdXNlcnNMaXN0LmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC5pZD09PWUudXNlcn0pWzBdLHM9dC5fZmFjdG9yeS5jcmVhdGVNZXNzYWdlQm9keUlkZW50aXR5KG8ubmFtZSwic2xhY2s6Ly9zbGFjay5jb20vIitvLm5hbWUrIkBzbGFjay5jb20iLG8ucHJvZmlsZS5pbWFnZV8xOTIsby5uYW1lLCIiLCJzbGFjay5jb20iLHZvaWQgMCxvLnByb2ZpbGUpLHI9e3VzZXI6InNsYWNrOi8vIitvLm5hbWUrIkBzbGFjay5jb20iLGRvbWFpbjoic2xhY2suY29tIixpZDplLnVzZXIsdXNlclVSTDoic2xhY2s6Ly9zbGFjay5jb20vIitvLm5hbWUrIkBzbGFjay5jb20iLGlkZW50aXR5OnN9O3QuX2FkZGVkVXNlcnNJbmZvLnB1c2gociksY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gSm9pbmluZyBjaGF0IixuLnVybERhdGFPYmosIiB3aXRoIixzKSx0Ll9jcmVhdGVOZXdDb250ZXh0UmVwb3J0ZXIocy51c2VyUHJvZmlsZS51c2VyVVJMKS50aGVuKGZ1bmN0aW9uKGUpezE9PWUmJnQuX2NoYXRNYW5hZ2VyLmpvaW4obi51cmxEYXRhT2JqLCExLHMpLnRoZW4oZnVuY3Rpb24oZSl7dC5fcHJlcGFyZUNoYXQoZSk7dmFyIG49e3R5cGU6InByZXNlbmNlX3N1YiIsaWRzOnQuX3RvU3Vic2NyaWJlUHJlc2VuY2V9O2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHdlYnNvY2tldCBzZW50bWVzc2FnZSIsdC5fd3MucmVhZHlTdGF0ZSxuKSx0Ll93cy5zZW5kKEpTT04uc3RyaW5naWZ5KG4pKX0pfSl9fX0se2tleToiX2hhbmRsZVByZXNlbmNlQ2hhbmdlIix2YWx1ZTpmdW5jdGlvbihlKXtpZihjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB1cGRhdGluZyBwcmVzZW5jZSBvZiB1c2VyIiksdGhpcy5fY29udGV4dFJlcG9ydGVyc0luZm9bZS51c2VyXSl7dmFyIHQ9dGhpcy5fY29udGV4dFJlcG9ydGVyc0luZm9bZS51c2VyXTt0LmRhdGEudmFsdWVzWzBdLnZhbHVlPXRoaXMuX2dldFByZXNlbmNlKGUucHJlc2VuY2UpLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHByZXNlbmNlIG9mIHVzZXIiLGUudXNlciwiIHVwZGF0ZWQgdG8iLHQuZGF0YSl9fX0se2tleToiX2hhbmRsZU5ld01lc3NhZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIEhhbmRsaW5nIGEgbmV3IG1lc3NhZ2UiLGUpO3ZhciB0PSIiLG49dm9pZCAwO3RoaXMuX3N1YnNjcmliZWRMaXN0LmZvckVhY2goZnVuY3Rpb24obyl7by5jaGFubmVsSUQ9PT1lLmNoYW5uZWwmJih0PW8uY2hhbm5lbElELG49by5jaGF0KX0pLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHN1YnNjcmliZWQgbGlzdCIsdGhpcy5fc3Vic2NyaWJlZExpc3QpLGUuY2hhbm5lbCYmZS50cz50aGlzLl9zZXNzaW9uLmNyZWF0ZWRUaW1lJiYoZS5jaGFubmVsPT09dCYmZS51c2VyIT09dGhpcy5faWR8fCFlLmhhc093blByb3BlcnR5KCJib3RfaWQiKSYmZS51c2VyPT09dGhpcy5faWQmJmUuY2hhbm5lbD09PXQpJiZ0aGlzLl9nZXRVc2VySW5mbyhlLnVzZXIpLnRoZW4oZnVuY3Rpb24odCl7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gbXNnIHRvIGFkZENoaWxkIixlLnRleHQsIiAgICAgaWRlbnRpdHk6Iix0KSxuLnNlbmQoZS50ZXh0LHQpfSl9fSx7a2V5OiJfZ2V0VXNlckluZm8iLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4pe3QuX3NsYWNrLnVzZXJzLmluZm8oe3Rva2VuOnQuX3Rva2VuLHVzZXI6ZX0sZnVuY3Rpb24oZSxvKXtpZihlKWNvbnNvbGUuZXJyb3IoIltTbGFja1Byb3Rvc3R1Yl0gZXJyb3IiLGUpO2Vsc2V7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1YiBnZXRVc2VySW5mb10gIixvKTt2YXIgcz10Ll9mYWN0b3J5LmNyZWF0ZU1lc3NhZ2VCb2R5SWRlbnRpdHkoby51c2VyLm5hbWUsInNsYWNrOi8vc2xhY2suY29tLyIrby51c2VyLm5hbWUrIkBzbGFjay5jb20iLG8udXNlci5wcm9maWxlLmltYWdlXzE5MixvLnVzZXIubmFtZSwiIiwic2xhY2suY29tIik7bihzKX19KX0pfX0se2tleToiX3ByZXBhcmVDaGF0Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIGNoYXQiLGUpLGUub25NZXNzYWdlKGZ1bmN0aW9uKG4pe2NvbnNvbGUuaW5mbygiW1NsYWNrUHJvdG9zdHViXSBvbk1lc3NhZ2U6ICIsbiksY29uc29sZS5pbmZvKCJbU2xhY2tQcm90b3N0dWJdIE9ic2VydmVyIC0gTWVzc2FnZSBIaXN0b3J5IENvbnRyb2wgIix0Ll9tZXNzYWdlSGlzdG9yeUNvbnRyb2wpO3ZhciBvPWUuY2hpbGRfY3NlcSxzPWUuX2RhdGFPYmplY3RPYnNlcnZlci51cmwscj12b2lkIDA7KHQuX3N1YnNjcmliZWRMaXN0LmZvckVhY2goZnVuY3Rpb24oZSl7ZS51cmxEYXRhT2JqPT09cyYmKHI9ZS5jaGFubmVsSUQpfSksdC5fbWVzc2FnZUhpc3RvcnlDb250cm9sLmhhc093blByb3BlcnR5KHMpKT90Ll9tZXNzYWdlSGlzdG9yeUNvbnRyb2xbc10uaWQhPT1vJiYodC5fbWVzc2FnZUhpc3RvcnlDb250cm9sW3NdLmlkPW8sdC5fZGVsaXZlcihuLHIpKToodC5fbWVzc2FnZUhpc3RvcnlDb250cm9sW3NdPXtpZDpvfSx0Ll9kZWxpdmVyKG4scikpfSl9fSx7a2V5OiJfaW52aXRlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06IiIsbj1hcmd1bWVudHNbMl07IiI9PXQmJnRoaXMuX3N1YnNjcmliZWRMaXN0LmZvckVhY2goZnVuY3Rpb24oZSl7ZS51cmxEYXRhT2JqPT09biYmKHQ9ZS5jaGFubmVsSUQpfSk7dmFyIG89e3Rva2VuOnRoaXMuX3Rva2VuLGNoYW5uZWw6dCx1c2VyOmV9O3RoaXMuX3NsYWNrLmNoYW5uZWxzLmludml0ZShvLGZ1bmN0aW9uKGUsdCl7ZT9jb25zb2xlLmVycm9yKCJbU2xhY2tQcm90b3N0dWJdIGVycm9yIixlKTpjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB1c2VyIGludml0ZWQgd2l0aCBzdWNlc3MiLHQpfSl9fSx7a2V5OiJfZGVsaXZlciIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2lmKGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIE1zZyB0byBEZWxpdmVyOiAiLGUsIiBvbiBjaGFubmVsOiIsdCksdCYmZS52YWx1ZSYmZS5oYXNPd25Qcm9wZXJ0eSgiaWRlbnRpdHkiKSYmZS5pZGVudGl0eS5oYXNPd25Qcm9wZXJ0eSgidXNlclByb2ZpbGUiKSYmZS5pZGVudGl0eS51c2VyUHJvZmlsZS5oYXNPd25Qcm9wZXJ0eSgibmFtZSIpJiZlLmlkZW50aXR5LnVzZXJQcm9maWxlLm5hbWUpe3ZhciBvPWUuaWRlbnRpdHkudXNlclByb2ZpbGUubmFtZSsiOiAiK2UudmFsdWUuY29udGVudCxzPXthc191c2VyOiEwLHRva2VuOm4uX3Rva2VuLGNoYW5uZWw6dCx0ZXh0Om99O2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIChQb3N0TWVzc2FnZSBzbGFjayBhcGkpIHRva2VuKCIsbi5fdG9rZW4sIikgIGNoYW5uZWwoIix0LCIpIHRleHQoIixlLnZhbHVlLmNvbnRlbnQsIikiKSxuLl9zbGFjay5jaGF0LnBvc3RNZXNzYWdlKHMsZnVuY3Rpb24obyxzKXtpZihvKWlmKCJub3RfaW5fY2hhbm5lbCI9PW8ubWVzc2FnZSl7Y29uc29sZS5lcnJvcigiW1NsYWNrUHJvdG9zdHViXSBDaGFubmVsIGV4aXN0LCBidXQgdXNlciBpcyBub3Qgb24gY2hhbm5lbCIsbyk7dmFyIHI9bi5fY2hhbm5lbHNMaXN0LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5pZD09PXR9KVswXSxhPXt0b2tlbjpuLl90b2tlbixuYW1lOnIubmFtZX07bi5fc2xhY2suY2hhbm5lbHMuam9pbihhKSxuLl9kZWxpdmVyKGUsdCl9ZWxzZSBjb25zb2xlLmVycm9yKCJbU2xhY2tQcm90b3N0dWJdIGVycm9yIixvKTtlbHNlIGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIFBvc3RNZXNzYWdlIHdpdGggU3VjZXNzIixzKX0pfX19LHtrZXk6Il9jcmVhdGVDaGFubmVsIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG8pe3ZhciBzPXt0b2tlbjpuLl90b2tlbixuYW1lOmV9O2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIENyZWF0aW5nIGEgbmV3IGNoYW5uZWwgdG9DcmVhdGU6IixzLCIgIGNoYW5uZWxPYmpVcmw6Iix0KSxuLl9zbGFjay5jaGFubmVscy5jcmVhdGUocyxmdW5jdGlvbihlLHMpe2lmKGUpY29uc29sZS5lcnJvcigiW1NsYWNrUHJvdG9zdHViXSAiLGUpO2Vsc2UgaWYocy5vayl7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gQ2hhbm5lbCBDcmVhdGVkIHdpdGggU3VjZXNzICIscyksY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gQXNzb2NpYXRlIGEgbmV3IGNoYW5uZWwgSUQiLHMuY2hhbm5lbC5pZCwidG8gdXJsRGF0YU9iaiIsdCk7dmFyIHI9MCxhPTA7bi5fc3Vic2NyaWJlZExpc3QuZm9yRWFjaChmdW5jdGlvbihlKXtlLnVybERhdGFPYmo9PT10JiYoYT1yKSxyKyt9KSxuLl9zdWJzY3JpYmVkTGlzdFthXS5jaGFubmVsSUQ9cy5jaGFubmVsLmlkLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHN1YnNjcmliZWQgbGlzdCIsbi5fc3Vic2NyaWJlZExpc3QpLG8oITApfX0pfSl9fSx7a2V5OiJfc2VuZEhUVFBSZXF1ZXN0Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLG8pe3ZhciBzPW5ldyBYTUxIdHRwUmVxdWVzdDsid2l0aENyZWRlbnRpYWxzImluIHM/cy5vcGVuKGUsdCwhMCk6InVuZGVmaW5lZCIhPXR5cGVvZiBYRG9tYWluUmVxdWVzdD8ocz1uZXcgWERvbWFpblJlcXVlc3QpLm9wZW4oZSx0KTpzPW51bGwscz8ocy5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtpZig0PT09cy5yZWFkeVN0YXRlKWlmKDIwMD09PXMuc3RhdHVzKXt2YXIgZT1KU09OLnBhcnNlKHMucmVzcG9uc2VUZXh0KTtuKGUpfWVsc2UgNDAwPT09cy5zdGF0dXM/bygiVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuIik6bygic29tZXRoaW5nIGVsc2Ugb3RoZXIgdGhhbiAyMDAgd2FzIHJldHVybmVkIil9LHMuc2VuZCgpKTpvKCJDT1JTIG5vdCBzdXBwb3J0ZWQiKX0pfX0se2tleToiX3NlbmRTdGF0dXMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1YiBzdGF0dXMgY2hhbmdlZF0gdG8gIixlKSx0aGlzLl9zdGF0ZT1lO3ZhciBuPXt0eXBlOiJ1cGRhdGUiLGZyb206dGhpcy5fbXlVcmwsdG86dGhpcy5fbXlVcmwrIi9zdGF0dXMiLGJvZHk6e3ZhbHVlOmV9fTt0JiYobi5ib2R5LmRlc2M9dCksdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG4pfX0se2tleToiY29uZmlnIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29uZmlnfX0se2tleToicnVudGltZVNlc3Npb24iLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9ydW50aW1lU2Vzc2lvblVSTH19XSksZX0oKX0sZnVuY3Rpb24oZSx0LG4pe2xldCBvPW4oMCkscz1uKDIpLHI9big2KTtlLmV4cG9ydHM9byhyLHMpfSxmdW5jdGlvbihlLHQsbil7dmFyIG89bigxKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtsZXQgbj1vW2VdLmZpbHRlcihlPT52b2lkIDA9PT10W2VdKTtyZXR1cm4hIW4ubGVuZ3RoJiZFcnJvcihgJHtlfSBtaXNzaW5nIHBhcmFtczogJHtuLmpvaW4oIiwgIil9YCl9fSxmdW5jdGlvbihlLHQsbil7dmFyIG89bigwKSxzPW4oMik7ZS5leHBvcnRzPWZ1bmN0aW9uKGUpe2V8fChlPXt9KTtyZXR1cm4gbmV3IGNsYXNze2NvbnN0cnVjdG9yKCl7byh0aGlzLGZ1bmN0aW9uKHQsbixvKXtyZXR1cm4gbi50b2tlbj1uLnRva2VufHxlLnRva2VuLHModCxuLG8pfSl9fX19XSkuZGVmYXVsdH0pOw==",
      "sourceCodeClassname": "slack.slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "23.60",
    "description": "Protostub to exchange messages with slack",
    "language": "javascript",
    "cguid": "46968ae37faa364f9cc07983229b5a641",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "VertxProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "default",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "23.00",
    "description": "Protostub to exchange messages with vertx",
    "language": "javascript",
    "cguid": "459ddec3ec1a17767da034fbe0988f1f9",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "objectName": "default",
    "configuration": {
      "url": "wss://msg-node.hysmart.rethink.ptinovacao.pt/localhost/ws"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "VertxProtoStubNode": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gcyhpKXtpZih0W2ldKXJldHVybiB0W2ldLmV4cG9ydHM7dmFyIHI9dFtpXT17aTppLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbaV0uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMscyksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gcy5tPWUscy5jPXQscy5kPWZ1bmN0aW9uKGUsdCxpKXtzLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Oml9KX0scy5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBzLmQodCwiYSIsdCksdH0scy5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxzLnA9IiIscyhzLnM9MTYpfShbZnVuY3Rpb24oZSx0LHMpe3ZhciBpPXMoMTkpLHI9aS5CdWZmZXI7ZnVuY3Rpb24gbihlLHQpe2Zvcih2YXIgcyBpbiBlKXRbc109ZVtzXX1mdW5jdGlvbiBvKGUsdCxzKXtyZXR1cm4gcihlLHQscyl9ci5mcm9tJiZyLmFsbG9jJiZyLmFsbG9jVW5zYWZlJiZyLmFsbG9jVW5zYWZlU2xvdz9lLmV4cG9ydHM9aToobihpLHQpLHQuQnVmZmVyPW8pLG4ocixvKSxvLmZyb209ZnVuY3Rpb24oZSx0LHMpe2lmKCJudW1iZXIiPT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlciIpO3JldHVybiByKGUsdCxzKX0sby5hbGxvYz1mdW5jdGlvbihlLHQscyl7aWYoIm51bWJlciIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXIiKTt2YXIgaT1yKGUpO3JldHVybiB2b2lkIDAhPT10PyJzdHJpbmciPT10eXBlb2Ygcz9pLmZpbGwodCxzKTppLmZpbGwodCk6aS5maWxsKDApLGl9LG8uYWxsb2NVbnNhZmU9ZnVuY3Rpb24oZSl7aWYoIm51bWJlciIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXIiKTtyZXR1cm4gcihlKX0sby5hbGxvY1Vuc2FmZVNsb3c9ZnVuY3Rpb24oZSl7aWYoIm51bWJlciIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXIiKTtyZXR1cm4gaS5TbG93QnVmZmVyKGUpfX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0Ijtjb25zdCBpPXMoMCkscj1zKDIwKSxuPXMoMjEpLG89cyg0KSxhPWkuQnVmZmVyLGg9YS5mcm9tKFswLDAsMjU1LDI1NV0pLGM9YS5mcm9tKFswXSksbD1TeW1ib2woIndyaXRlLWluLXByb2dyZXNzIiksdT1TeW1ib2woInBlbmRpbmctY2xvc2UiKSxmPVN5bWJvbCgidG90YWwtbGVuZ3RoIiksZD1TeW1ib2woImNhbGxiYWNrIiksXz1TeW1ib2woImJ1ZmZlcnMiKSxwPVN5bWJvbCgiZXJyb3IiKSxtPVN5bWJvbCgib3duZXIiKTtsZXQgZztmdW5jdGlvbiB5KGUpe3RoaXNbX10ucHVzaChlKSx0aGlzW2ZdKz1lLmxlbmd0aH1mdW5jdGlvbiB2KGUpe3RoaXNbZl0rPWUubGVuZ3RoLHRoaXNbbV0uX21heFBheWxvYWQ8MXx8dGhpc1tmXTw9dGhpc1ttXS5fbWF4UGF5bG9hZD90aGlzW19dLnB1c2goZSk6KHRoaXNbcF09bmV3IEVycm9yKCJtYXggcGF5bG9hZCBzaXplIGV4Y2VlZGVkIiksdGhpc1twXS5jbG9zZUNvZGU9MTAwOSx0aGlzLnJlbW92ZUxpc3RlbmVyKCJkYXRhIix2KSx0aGlzLnJlc2V0KCkpfWZ1bmN0aW9uIGIoZSl7dGhpc1ttXS5faW5mbGF0ZT1udWxsLHRoaXNbZF0oZSl9ZS5leHBvcnRzPWNsYXNze2NvbnN0cnVjdG9yKGUsdCxzKXtpZih0aGlzLl9tYXhQYXlsb2FkPTB8cyx0aGlzLl9vcHRpb25zPWV8fHt9LHRoaXMuX3RocmVzaG9sZD12b2lkIDAhPT10aGlzLl9vcHRpb25zLnRocmVzaG9sZD90aGlzLl9vcHRpb25zLnRocmVzaG9sZDoxMDI0LHRoaXMuX2lzU2VydmVyPSEhdCx0aGlzLl9kZWZsYXRlPW51bGwsdGhpcy5faW5mbGF0ZT1udWxsLHRoaXMucGFyYW1zPW51bGwsIWcpe2NvbnN0IGU9dm9pZCAwIT09dGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeUxpbWl0P3RoaXMuX29wdGlvbnMuY29uY3VycmVuY3lMaW1pdDoxMDtnPW5ldyByKHtjb25jdXJyZW5jeTplfSl9fXN0YXRpYyBnZXQgZXh0ZW5zaW9uTmFtZSgpe3JldHVybiJwZXJtZXNzYWdlLWRlZmxhdGUifW9mZmVyKCl7Y29uc3QgZT17fTtyZXR1cm4gdGhpcy5fb3B0aW9ucy5zZXJ2ZXJOb0NvbnRleHRUYWtlb3ZlciYmKGUuc2VydmVyX25vX2NvbnRleHRfdGFrZW92ZXI9ITApLHRoaXMuX29wdGlvbnMuY2xpZW50Tm9Db250ZXh0VGFrZW92ZXImJihlLmNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyPSEwKSx0aGlzLl9vcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHMmJihlLnNlcnZlcl9tYXhfd2luZG93X2JpdHM9dGhpcy5fb3B0aW9ucy5zZXJ2ZXJNYXhXaW5kb3dCaXRzKSx0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHM/ZS5jbGllbnRfbWF4X3dpbmRvd19iaXRzPXRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0czpudWxsPT10aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMmJihlLmNsaWVudF9tYXhfd2luZG93X2JpdHM9ITApLGV9YWNjZXB0KGUpe3ZhciB0O3JldHVybiBlPXRoaXMubm9ybWFsaXplUGFyYW1zKGUpLHQ9dGhpcy5faXNTZXJ2ZXI/dGhpcy5hY2NlcHRBc1NlcnZlcihlKTp0aGlzLmFjY2VwdEFzQ2xpZW50KGUpLHRoaXMucGFyYW1zPXQsdH1jbGVhbnVwKCl7dGhpcy5faW5mbGF0ZSYmKHRoaXMuX2luZmxhdGVbbF0/dGhpcy5faW5mbGF0ZVt1XT0hMDoodGhpcy5faW5mbGF0ZS5jbG9zZSgpLHRoaXMuX2luZmxhdGU9bnVsbCkpLHRoaXMuX2RlZmxhdGUmJih0aGlzLl9kZWZsYXRlW2xdP3RoaXMuX2RlZmxhdGVbdV09ITA6KHRoaXMuX2RlZmxhdGUuY2xvc2UoKSx0aGlzLl9kZWZsYXRlPW51bGwpKX1hY2NlcHRBc1NlcnZlcihlKXtjb25zdCB0PXt9O2lmKCFlLnNvbWUoZT0+e2lmKCEoITE9PT10aGlzLl9vcHRpb25zLnNlcnZlck5vQ29udGV4dFRha2VvdmVyJiZlLnNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyfHwhMT09PXRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cyYmZS5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzfHwibnVtYmVyIj09dHlwZW9mIHRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cyYmIm51bWJlciI9PXR5cGVvZiBlLnNlcnZlcl9tYXhfd2luZG93X2JpdHMmJnRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cz5lLnNlcnZlcl9tYXhfd2luZG93X2JpdHN8fCJudW1iZXIiPT10eXBlb2YgdGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzJiYhZS5jbGllbnRfbWF4X3dpbmRvd19iaXRzKSlyZXR1cm4odGhpcy5fb3B0aW9ucy5zZXJ2ZXJOb0NvbnRleHRUYWtlb3Zlcnx8ZS5zZXJ2ZXJfbm9fY29udGV4dF90YWtlb3ZlcikmJih0LnNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyPSEwKSwodGhpcy5fb3B0aW9ucy5jbGllbnROb0NvbnRleHRUYWtlb3Zlcnx8ITEhPT10aGlzLl9vcHRpb25zLmNsaWVudE5vQ29udGV4dFRha2VvdmVyJiZlLmNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyKSYmKHQuY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXI9ITApLCJudW1iZXIiPT10eXBlb2YgdGhpcy5fb3B0aW9ucy5zZXJ2ZXJNYXhXaW5kb3dCaXRzP3Quc2VydmVyX21heF93aW5kb3dfYml0cz10aGlzLl9vcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHM6Im51bWJlciI9PXR5cGVvZiBlLnNlcnZlcl9tYXhfd2luZG93X2JpdHMmJih0LnNlcnZlcl9tYXhfd2luZG93X2JpdHM9ZS5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzKSwibnVtYmVyIj09dHlwZW9mIHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cz90LmNsaWVudF9tYXhfd2luZG93X2JpdHM9dGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzOiExIT09dGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzJiYibnVtYmVyIj09dHlwZW9mIGUuY2xpZW50X21heF93aW5kb3dfYml0cyYmKHQuY2xpZW50X21heF93aW5kb3dfYml0cz1lLmNsaWVudF9tYXhfd2luZG93X2JpdHMpLCEwfSkpdGhyb3cgbmV3IEVycm9yKCJEb2Vzbid0IHN1cHBvcnQgdGhlIG9mZmVyZWQgY29uZmlndXJhdGlvbiIpO3JldHVybiB0fWFjY2VwdEFzQ2xpZW50KGUpe2NvbnN0IHQ9ZVswXTtpZighMT09PXRoaXMuX29wdGlvbnMuY2xpZW50Tm9Db250ZXh0VGFrZW92ZXImJnQuY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXIpdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciAiY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXIiJyk7aWYoIm51bWJlciI9PXR5cGVvZiB0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMmJighdC5jbGllbnRfbWF4X3dpbmRvd19iaXRzfHx0LmNsaWVudF9tYXhfd2luZG93X2JpdHM+dGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzKXx8ITE9PT10aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMmJnQuY2xpZW50X21heF93aW5kb3dfYml0cyl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yICJjbGllbnRfbWF4X3dpbmRvd19iaXRzIicpO3JldHVybiB0fW5vcm1hbGl6ZVBhcmFtcyhlKXtyZXR1cm4gZS5tYXAoZT0+KE9iamVjdC5rZXlzKGUpLmZvckVhY2godD0+e3ZhciBzPWVbdF07aWYocy5sZW5ndGg+MSl0aHJvdyBuZXcgRXJyb3IoYE11bHRpcGxlIGV4dGVuc2lvbiBwYXJhbWV0ZXJzIGZvciAke3R9YCk7c3dpdGNoKHM9c1swXSx0KXtjYXNlInNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyIjpjYXNlImNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyIjppZighMCE9PXMpdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGV4dGVuc2lvbiBwYXJhbWV0ZXIgdmFsdWUgZm9yICR7dH0gKCR7c30pYCk7ZVt0XT0hMDticmVhaztjYXNlInNlcnZlcl9tYXhfd2luZG93X2JpdHMiOmNhc2UiY2xpZW50X21heF93aW5kb3dfYml0cyI6aWYoInN0cmluZyI9PXR5cGVvZiBzJiYocz1wYXJzZUludChzLDEwKSxOdW1iZXIuaXNOYU4ocyl8fHM8bi5aX01JTl9XSU5ET1dCSVRTfHxzPm4uWl9NQVhfV0lORE9XQklUUykpdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGV4dGVuc2lvbiBwYXJhbWV0ZXIgdmFsdWUgZm9yICR7dH0gKCR7c30pYCk7aWYoIXRoaXMuX2lzU2VydmVyJiYhMD09PXMpdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGV4dGVuc2lvbiBwYXJhbWV0ZXIgdmFsdWUgZm9yICR7dH1gKTtlW3RdPXM7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoYE5vdCBkZWZpbmVkIGV4dGVuc2lvbiBwYXJhbWV0ZXIgKCR7dH0pYCl9fSksZSkpfWRlY29tcHJlc3MoZSx0LHMpe2cucHVzaChpPT57dGhpcy5fZGVjb21wcmVzcyhlLHQsKGUsdCk9PntpKCkscyhlLHQpfSl9KX1jb21wcmVzcyhlLHQscyl7Zy5wdXNoKGk9Pnt0aGlzLl9jb21wcmVzcyhlLHQsKGUsdCk9PntpKCkscyhlLHQpfSl9KX1fZGVjb21wcmVzcyhlLHQscyl7Y29uc3QgaT10aGlzLl9pc1NlcnZlcj8iY2xpZW50Ijoic2VydmVyIjtpZighdGhpcy5faW5mbGF0ZSl7Y29uc3QgZT1gJHtpfV9tYXhfd2luZG93X2JpdHNgLHQ9Im51bWJlciIhPXR5cGVvZiB0aGlzLnBhcmFtc1tlXT9uLlpfREVGQVVMVF9XSU5ET1dCSVRTOnRoaXMucGFyYW1zW2VdO3RoaXMuX2luZmxhdGU9bi5jcmVhdGVJbmZsYXRlUmF3KHt3aW5kb3dCaXRzOnR9KSx0aGlzLl9pbmZsYXRlW2ZdPTAsdGhpcy5faW5mbGF0ZVtfXT1bXSx0aGlzLl9pbmZsYXRlW21dPXRoaXMsdGhpcy5faW5mbGF0ZS5vbigiZXJyb3IiLGIpLHRoaXMuX2luZmxhdGUub24oImRhdGEiLHYpfXRoaXMuX2luZmxhdGVbZF09cyx0aGlzLl9pbmZsYXRlW2xdPSEwLHRoaXMuX2luZmxhdGUud3JpdGUoZSksdCYmdGhpcy5faW5mbGF0ZS53cml0ZShoKSx0aGlzLl9pbmZsYXRlLmZsdXNoKCgpPT57Y29uc3QgZT10aGlzLl9pbmZsYXRlW3BdO2lmKGUpcmV0dXJuIHRoaXMuX2luZmxhdGUuY2xvc2UoKSx0aGlzLl9pbmZsYXRlPW51bGwsdm9pZCBzKGUpO2NvbnN0IHI9by5jb25jYXQodGhpcy5faW5mbGF0ZVtfXSx0aGlzLl9pbmZsYXRlW2ZdKTt0JiZ0aGlzLnBhcmFtc1tgJHtpfV9ub19jb250ZXh0X3Rha2VvdmVyYF18fHRoaXMuX2luZmxhdGVbdV0/KHRoaXMuX2luZmxhdGUuY2xvc2UoKSx0aGlzLl9pbmZsYXRlPW51bGwpOih0aGlzLl9pbmZsYXRlW2xdPSExLHRoaXMuX2luZmxhdGVbZl09MCx0aGlzLl9pbmZsYXRlW19dPVtdKSxzKG51bGwscil9KX1fY29tcHJlc3MoZSx0LHMpe2lmKCFlfHwwPT09ZS5sZW5ndGgpcmV0dXJuIHZvaWQgcHJvY2Vzcy5uZXh0VGljayhzLG51bGwsYyk7Y29uc3QgaT10aGlzLl9pc1NlcnZlcj8ic2VydmVyIjoiY2xpZW50IjtpZighdGhpcy5fZGVmbGF0ZSl7Y29uc3QgZT1gJHtpfV9tYXhfd2luZG93X2JpdHNgLHQ9Im51bWJlciIhPXR5cGVvZiB0aGlzLnBhcmFtc1tlXT9uLlpfREVGQVVMVF9XSU5ET1dCSVRTOnRoaXMucGFyYW1zW2VdO3RoaXMuX2RlZmxhdGU9bi5jcmVhdGVEZWZsYXRlUmF3KHttZW1MZXZlbDp0aGlzLl9vcHRpb25zLm1lbUxldmVsLGxldmVsOnRoaXMuX29wdGlvbnMubGV2ZWwsZmx1c2g6bi5aX1NZTkNfRkxVU0gsd2luZG93Qml0czp0fSksdGhpcy5fZGVmbGF0ZVtmXT0wLHRoaXMuX2RlZmxhdGVbX109W10sdGhpcy5fZGVmbGF0ZS5vbigiZGF0YSIseSl9dGhpcy5fZGVmbGF0ZVtsXT0hMCx0aGlzLl9kZWZsYXRlLndyaXRlKGUpLHRoaXMuX2RlZmxhdGUuZmx1c2gobi5aX1NZTkNfRkxVU0gsKCk9Pnt2YXIgZT1vLmNvbmNhdCh0aGlzLl9kZWZsYXRlW19dLHRoaXMuX2RlZmxhdGVbZl0pO3QmJihlPWUuc2xpY2UoMCxlLmxlbmd0aC00KSksdCYmdGhpcy5wYXJhbXNbYCR7aX1fbm9fY29udGV4dF90YWtlb3ZlcmBdfHx0aGlzLl9kZWZsYXRlW3VdPyh0aGlzLl9kZWZsYXRlLmNsb3NlKCksdGhpcy5fZGVmbGF0ZT1udWxsKToodGhpcy5fZGVmbGF0ZVtsXT0hMSx0aGlzLl9kZWZsYXRlW2ZdPTAsdGhpcy5fZGVmbGF0ZVtfXT1bXSkscyhudWxsLGUpfSl9fX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0Ijtjb25zdCBpPXMoMCkuQnVmZmVyO3QuQklOQVJZX1RZUEVTPVsibm9kZWJ1ZmZlciIsImFycmF5YnVmZmVyIiwiZnJhZ21lbnRzIl0sdC5HVUlEPSIyNThFQUZBNS1FOTE0LTQ3REEtOTVDQS1DNUFCMERDODVCMTEiLHQuRU1QVFlfQlVGRkVSPWkuYWxsb2MoMCksdC5OT09QPSgoKT0+e30pfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yZXF1aXJlKCJjcnlwdG8iKX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0IjsKLyohCiAqIHdzOiBhIG5vZGUuanMgd2Vic29ja2V0IGNsaWVudAogKiBDb3B5cmlnaHQoYykgMjAxMSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT4KICogTUlUIExpY2Vuc2VkCiAqL2NvbnN0IGk9cygwKS5CdWZmZXIscj0oZSx0KT0+e2NvbnN0IHM9aS5hbGxvY1Vuc2FmZSh0KTtmb3IodmFyIHI9MCxuPTA7bjxlLmxlbmd0aDtuKyspe2NvbnN0IHQ9ZVtuXTt0LmNvcHkocyxyKSxyKz10Lmxlbmd0aH1yZXR1cm4gc307dHJ5e2NvbnN0IHQ9cygyMik7ZS5leHBvcnRzPU9iamVjdC5hc3NpZ24oe2NvbmNhdDpyfSx0LkJ1ZmZlclV0aWx8fHQpfWNhdGNoKHQpe2NvbnN0IHM9KGUsdCxzLGkscik9Pntmb3IodmFyIG49MDtuPHI7bisrKXNbaStuXT1lW25dXnRbMyZuXX0saT0oZSx0KT0+e2NvbnN0IHM9ZS5sZW5ndGg7Zm9yKHZhciBpPTA7aTxzO2krKyllW2ldXj10WzMmaV19O2UuZXhwb3J0cz17Y29uY2F0OnIsbWFzazpzLHVubWFzazppfX19LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7Ci8qIQogKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnQKICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+CiAqIE1JVCBMaWNlbnNlZAogKi9jb25zdCBpPXMoNikscj1zKDMpLG49cyg3KSxvPXMoMTgpLGE9cyg4KSxoPXMoOSksYz1zKDEpLGw9cygyNiksdT1zKDEyKSxmPXMoMiksZD1zKDEzKSxfPXMoMTUpLHA9WzgsMTNdLG09M2U0O2NsYXNzIGcgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKGUsdCxzKXtzdXBlcigpLHQ/InN0cmluZyI9PXR5cGVvZiB0P3Q9W3RdOkFycmF5LmlzQXJyYXkodCl8fChzPXQsdD1bXSk6dD1bXSx0aGlzLnJlYWR5U3RhdGU9Zy5DT05ORUNUSU5HLHRoaXMuYnl0ZXNSZWNlaXZlZD0wLHRoaXMuZXh0ZW5zaW9ucz17fSx0aGlzLnByb3RvY29sPSIiLHRoaXMuX2JpbmFyeVR5cGU9Zi5CSU5BUllfVFlQRVNbMF0sdGhpcy5fZmluYWxpemU9dGhpcy5maW5hbGl6ZS5iaW5kKHRoaXMpLHRoaXMuX2Nsb3NlRnJhbWVSZWNlaXZlZD0hMSx0aGlzLl9jbG9zZUZyYW1lU2VudD0hMSx0aGlzLl9jbG9zZU1lc3NhZ2U9IiIsdGhpcy5fY2xvc2VUaW1lcj1udWxsLHRoaXMuX2ZpbmFsaXplZD0hMSx0aGlzLl9jbG9zZUNvZGU9MTAwNix0aGlzLl9yZWNlaXZlcj1udWxsLHRoaXMuX3NlbmRlcj1udWxsLHRoaXMuX3NvY2tldD1udWxsLHRoaXMuX3VsdHJvbj1udWxsLEFycmF5LmlzQXJyYXkoZSk/ZnVuY3Rpb24oZSx0LHMpe3RoaXMucHJvdG9jb2xWZXJzaW9uPXMucHJvdG9jb2xWZXJzaW9uLHRoaXMuX21heFBheWxvYWQ9cy5tYXhQYXlsb2FkLHRoaXMuZXh0ZW5zaW9ucz1zLmV4dGVuc2lvbnMsdGhpcy5wcm90b2NvbD1zLnByb3RvY29sLHRoaXMuX2lzU2VydmVyPSEwLHRoaXMuc2V0U29ja2V0KGUsdCl9LmNhbGwodGhpcyxlWzBdLGVbMV0scyk6ZnVuY3Rpb24oZSx0LHMpe2lmKHM9T2JqZWN0LmFzc2lnbih7cHJvdG9jb2xWZXJzaW9uOnBbMV0scHJvdG9jb2w6dC5qb2luKCIsIikscGVyTWVzc2FnZURlZmxhdGU6ITAsaGFuZHNoYWtlVGltZW91dDpudWxsLGxvY2FsQWRkcmVzczpudWxsLGhlYWRlcnM6bnVsbCxmYW1pbHk6bnVsbCxvcmlnaW46bnVsbCxhZ2VudDpudWxsLGhvc3Q6bnVsbCxjaGVja1NlcnZlcklkZW50aXR5Om51bGwscmVqZWN0VW5hdXRob3JpemVkOm51bGwscGFzc3BocmFzZTpudWxsLGNpcGhlcnM6bnVsbCxlY2RoQ3VydmU6bnVsbCxjZXJ0Om51bGwsa2V5Om51bGwscGZ4Om51bGwsY2E6bnVsbH0scyksLTE9PT1wLmluZGV4T2Yocy5wcm90b2NvbFZlcnNpb24pKXRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgcHJvdG9jb2wgdmVyc2lvbjogJHtzLnByb3RvY29sVmVyc2lvbn0gYCtgKHN1cHBvcnRlZCB2ZXJzaW9uczogJHtwLmpvaW4oIiwgIil9KWApO3RoaXMucHJvdG9jb2xWZXJzaW9uPXMucHJvdG9jb2xWZXJzaW9uLHRoaXMuX2lzU2VydmVyPSExLHRoaXMudXJsPWU7Y29uc3QgaT1oLnBhcnNlKGUpLG49IndzK3VuaXg6Ij09PWkucHJvdG9jb2w7aWYoIShpLmhvc3R8fG4mJmkucGF0aCkpdGhyb3cgbmV3IEVycm9yKCJpbnZhbGlkIHVybCIpO2NvbnN0IGw9IndzczoiPT09aS5wcm90b2NvbHx8Imh0dHBzOiI9PT1pLnByb3RvY29sLGQ9ci5yYW5kb21CeXRlcygxNikudG9TdHJpbmcoImJhc2U2NCIpLF89bD9vOmE7dmFyIG07Y29uc3QgeT17cG9ydDppLnBvcnR8fChsPzQ0Mzo4MCksaG9zdDppLmhvc3RuYW1lLHBhdGg6Ii8iLGhlYWRlcnM6eyJTZWMtV2ViU29ja2V0LVZlcnNpb24iOnMucHJvdG9jb2xWZXJzaW9uLCJTZWMtV2ViU29ja2V0LUtleSI6ZCxDb25uZWN0aW9uOiJVcGdyYWRlIixVcGdyYWRlOiJ3ZWJzb2NrZXQifX07cy5oZWFkZXJzJiZPYmplY3QuYXNzaWduKHkuaGVhZGVycyxzLmhlYWRlcnMpO3MucGVyTWVzc2FnZURlZmxhdGUmJihtPW5ldyBjKCEwIT09cy5wZXJNZXNzYWdlRGVmbGF0ZT9zLnBlck1lc3NhZ2VEZWZsYXRlOnt9LCExKSx5LmhlYWRlcnNbIlNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9ucyJdPXUuZm9ybWF0KHtbYy5leHRlbnNpb25OYW1lXTptLm9mZmVyKCl9KSk7cy5wcm90b2NvbCYmKHkuaGVhZGVyc1siU2VjLVdlYlNvY2tldC1Qcm90b2NvbCJdPXMucHJvdG9jb2wpO3Mub3JpZ2luJiYocy5wcm90b2NvbFZlcnNpb248MTM/eS5oZWFkZXJzWyJTZWMtV2ViU29ja2V0LU9yaWdpbiJdPXMub3JpZ2luOnkuaGVhZGVycy5PcmlnaW49cy5vcmlnaW4pO3MuaG9zdCYmKHkuaGVhZGVycy5Ib3N0PXMuaG9zdCk7aS5hdXRoJiYoeS5hdXRoPWkuYXV0aCk7cy5sb2NhbEFkZHJlc3MmJih5LmxvY2FsQWRkcmVzcz1zLmxvY2FsQWRkcmVzcyk7cy5mYW1pbHkmJih5LmZhbWlseT1zLmZhbWlseSk7aWYobil7Y29uc3QgZT1pLnBhdGguc3BsaXQoIjoiKTt5LnNvY2tldFBhdGg9ZVswXSx5LnBhdGg9ZVsxXX1lbHNlIGkucGF0aCYmKCIvIiE9PWkucGF0aC5jaGFyQXQoMCk/eS5wYXRoPWAvJHtpLnBhdGh9YDp5LnBhdGg9aS5wYXRoKTt2YXIgdj1zLmFnZW50OyhudWxsIT1zLnJlamVjdFVuYXV0aG9yaXplZHx8cy5jaGVja1NlcnZlcklkZW50aXR5fHxzLnBhc3NwaHJhc2V8fHMuY2lwaGVyc3x8cy5lY2RoQ3VydmV8fHMuY2VydHx8cy5rZXl8fHMucGZ4fHxzLmNhKSYmKHMucGFzc3BocmFzZSYmKHkucGFzc3BocmFzZT1zLnBhc3NwaHJhc2UpLHMuY2lwaGVycyYmKHkuY2lwaGVycz1zLmNpcGhlcnMpLHMuZWNkaEN1cnZlJiYoeS5lY2RoQ3VydmU9cy5lY2RoQ3VydmUpLHMuY2VydCYmKHkuY2VydD1zLmNlcnQpLHMua2V5JiYoeS5rZXk9cy5rZXkpLHMucGZ4JiYoeS5wZng9cy5wZngpLHMuY2EmJih5LmNhPXMuY2EpLHMuY2hlY2tTZXJ2ZXJJZGVudGl0eSYmKHkuY2hlY2tTZXJ2ZXJJZGVudGl0eT1zLmNoZWNrU2VydmVySWRlbnRpdHkpLG51bGwhPXMucmVqZWN0VW5hdXRob3JpemVkJiYoeS5yZWplY3RVbmF1dGhvcml6ZWQ9cy5yZWplY3RVbmF1dGhvcml6ZWQpLHZ8fCh2PW5ldyBfLkFnZW50KHkpKSk7diYmKHkuYWdlbnQ9dik7dGhpcy5fcmVxPV8uZ2V0KHkpLHMuaGFuZHNoYWtlVGltZW91dCYmdGhpcy5fcmVxLnNldFRpbWVvdXQocy5oYW5kc2hha2VUaW1lb3V0LCgpPT57dGhpcy5fcmVxLmFib3J0KCksdGhpcy5maW5hbGl6ZShuZXcgRXJyb3IoIm9wZW5pbmcgaGFuZHNoYWtlIGhhcyB0aW1lZCBvdXQiKSl9KTt0aGlzLl9yZXEub24oImVycm9yIixlPT57dGhpcy5fcmVxLmFib3J0ZWR8fCh0aGlzLl9yZXE9bnVsbCx0aGlzLmZpbmFsaXplKGUpKX0pLHRoaXMuX3JlcS5vbigicmVzcG9uc2UiLGU9Pnt0aGlzLmVtaXQoInVuZXhwZWN0ZWQtcmVzcG9uc2UiLHRoaXMuX3JlcSxlKXx8KHRoaXMuX3JlcS5hYm9ydCgpLHRoaXMuZmluYWxpemUobmV3IEVycm9yKGB1bmV4cGVjdGVkIHNlcnZlciByZXNwb25zZSAoJHtlLnN0YXR1c0NvZGV9KWApKSl9KSx0aGlzLl9yZXEub24oInVwZ3JhZGUiLChlLHQsaSk9PntpZih0aGlzLmVtaXQoImhlYWRlcnMiLGUuaGVhZGVycyxlKSx0aGlzLnJlYWR5U3RhdGUhPT1nLkNPTk5FQ1RJTkcpcmV0dXJuO3RoaXMuX3JlcT1udWxsO2NvbnN0IG49ci5jcmVhdGVIYXNoKCJzaGExIikudXBkYXRlKGQrZi5HVUlELCJiaW5hcnkiKS5kaWdlc3QoImJhc2U2NCIpO2lmKGUuaGVhZGVyc1sic2VjLXdlYnNvY2tldC1hY2NlcHQiXSE9PW4pcmV0dXJuIHQuZGVzdHJveSgpLHRoaXMuZmluYWxpemUobmV3IEVycm9yKCJpbnZhbGlkIHNlcnZlciBrZXkiKSk7Y29uc3Qgbz1lLmhlYWRlcnNbInNlYy13ZWJzb2NrZXQtcHJvdG9jb2wiXSxhPShzLnByb3RvY29sfHwiIikuc3BsaXQoLywgKi8pO3ZhciBoO2lmKCFzLnByb3RvY29sJiZvP2g9InNlcnZlciBzZW50IGEgc3VicHJvdG9jb2wgZXZlbiB0aG91Z2ggbm9uZSByZXF1ZXN0ZWQiOnMucHJvdG9jb2wmJiFvP2g9InNlcnZlciBzZW50IG5vIHN1YnByb3RvY29sIGV2ZW4gdGhvdWdoIHJlcXVlc3RlZCI6byYmLTE9PT1hLmluZGV4T2YobykmJihoPSJzZXJ2ZXIgcmVzcG9uZGVkIHdpdGggYW4gaW52YWxpZCBwcm90b2NvbCIpLGgpcmV0dXJuIHQuZGVzdHJveSgpLHRoaXMuZmluYWxpemUobmV3IEVycm9yKGgpKTtpZihvJiYodGhpcy5wcm90b2NvbD1vKSxtKXRyeXtjb25zdCBzPXUucGFyc2UoZS5oZWFkZXJzWyJzZWMtd2Vic29ja2V0LWV4dGVuc2lvbnMiXSk7c1tjLmV4dGVuc2lvbk5hbWVdJiYobS5hY2NlcHQoc1tjLmV4dGVuc2lvbk5hbWVdKSx0aGlzLmV4dGVuc2lvbnNbYy5leHRlbnNpb25OYW1lXT1tKX1jYXRjaChlKXtyZXR1cm4gdC5kZXN0cm95KCksdm9pZCB0aGlzLmZpbmFsaXplKG5ldyBFcnJvcigiaW52YWxpZCBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnMgaGVhZGVyIikpfXRoaXMuc2V0U29ja2V0KHQsaSl9KX0uY2FsbCh0aGlzLGUsdCxzKX1nZXQgQ09OTkVDVElORygpe3JldHVybiBnLkNPTk5FQ1RJTkd9Z2V0IENMT1NJTkcoKXtyZXR1cm4gZy5DTE9TSU5HfWdldCBDTE9TRUQoKXtyZXR1cm4gZy5DTE9TRUR9Z2V0IE9QRU4oKXtyZXR1cm4gZy5PUEVOfWdldCBidWZmZXJlZEFtb3VudCgpe3ZhciBlPTA7cmV0dXJuIHRoaXMuX3NvY2tldCYmKGU9dGhpcy5fc29ja2V0LmJ1ZmZlclNpemUrdGhpcy5fc2VuZGVyLl9idWZmZXJlZEJ5dGVzKSxlfWdldCBiaW5hcnlUeXBlKCl7cmV0dXJuIHRoaXMuX2JpbmFyeVR5cGV9c2V0IGJpbmFyeVR5cGUoZSl7Zi5CSU5BUllfVFlQRVMuaW5kZXhPZihlKTwwfHwodGhpcy5fYmluYXJ5VHlwZT1lLHRoaXMuX3JlY2VpdmVyJiYodGhpcy5fcmVjZWl2ZXIuX2JpbmFyeVR5cGU9ZSkpfXNldFNvY2tldChlLHQpe2Uuc2V0VGltZW91dCgwKSxlLnNldE5vRGVsYXkoKSx0aGlzLl9yZWNlaXZlcj1uZXcgZCh0aGlzLmV4dGVuc2lvbnMsdGhpcy5fbWF4UGF5bG9hZCx0aGlzLmJpbmFyeVR5cGUpLHRoaXMuX3NlbmRlcj1uZXcgXyhlLHRoaXMuZXh0ZW5zaW9ucyksdGhpcy5fdWx0cm9uPW5ldyBuKGUpLHRoaXMuX3NvY2tldD1lLHRoaXMuX3VsdHJvbi5vbigiY2xvc2UiLHRoaXMuX2ZpbmFsaXplKSx0aGlzLl91bHRyb24ub24oImVycm9yIix0aGlzLl9maW5hbGl6ZSksdGhpcy5fdWx0cm9uLm9uKCJlbmQiLHRoaXMuX2ZpbmFsaXplKSx0Lmxlbmd0aD4wJiZlLnVuc2hpZnQodCksdGhpcy5fdWx0cm9uLm9uKCJkYXRhIixlPT57dGhpcy5ieXRlc1JlY2VpdmVkKz1lLmxlbmd0aCx0aGlzLl9yZWNlaXZlci5hZGQoZSl9KSx0aGlzLl9yZWNlaXZlci5vbm1lc3NhZ2U9KGU9PnRoaXMuZW1pdCgibWVzc2FnZSIsZSkpLHRoaXMuX3JlY2VpdmVyLm9ucGluZz0oZT0+e3RoaXMucG9uZyhlLCF0aGlzLl9pc1NlcnZlciwhMCksdGhpcy5lbWl0KCJwaW5nIixlKX0pLHRoaXMuX3JlY2VpdmVyLm9ucG9uZz0oZT0+dGhpcy5lbWl0KCJwb25nIixlKSksdGhpcy5fcmVjZWl2ZXIub25jbG9zZT0oKGUsdCk9Pnt0aGlzLl9jbG9zZUZyYW1lUmVjZWl2ZWQ9ITAsdGhpcy5fY2xvc2VNZXNzYWdlPXQsdGhpcy5fY2xvc2VDb2RlPWUsdGhpcy5fZmluYWxpemVkfHx0aGlzLmNsb3NlKGUsdCl9KSx0aGlzLl9yZWNlaXZlci5vbmVycm9yPSgoZSx0KT0+e3RoaXMuX2Nsb3NlTWVzc2FnZT0iIix0aGlzLl9jbG9zZUNvZGU9dCx0aGlzLnJlYWR5U3RhdGU9Zy5DTE9TSU5HLHRoaXMuZW1pdCgiZXJyb3IiLGUpLHRoaXMuZmluYWxpemUoITApfSksdGhpcy5yZWFkeVN0YXRlPWcuT1BFTix0aGlzLmVtaXQoIm9wZW4iKX1maW5hbGl6ZShlKXtpZighdGhpcy5fZmluYWxpemVkKXtpZih0aGlzLnJlYWR5U3RhdGU9Zy5DTE9TSU5HLHRoaXMuX2ZpbmFsaXplZD0hMCwib2JqZWN0Ij09dHlwZW9mIGUmJnRoaXMuZW1pdCgiZXJyb3IiLGUpLCF0aGlzLl9zb2NrZXQpcmV0dXJuIHRoaXMuZW1pdENsb3NlKCk7Y2xlYXJUaW1lb3V0KHRoaXMuX2Nsb3NlVGltZXIpLHRoaXMuX2Nsb3NlVGltZXI9bnVsbCx0aGlzLl91bHRyb24uZGVzdHJveSgpLHRoaXMuX3VsdHJvbj1udWxsLHRoaXMuX3NvY2tldC5vbigiZXJyb3IiLGYuTk9PUCksZT90aGlzLl9zb2NrZXQuZGVzdHJveSgpOnRoaXMuX3NvY2tldC5lbmQoKSx0aGlzLl9zb2NrZXQ9bnVsbCx0aGlzLl9zZW5kZXI9bnVsbCx0aGlzLl9yZWNlaXZlci5jbGVhbnVwKCgpPT50aGlzLmVtaXRDbG9zZSgpKSx0aGlzLl9yZWNlaXZlcj1udWxsfX1lbWl0Q2xvc2UoKXt0aGlzLnJlYWR5U3RhdGU9Zy5DTE9TRUQsdGhpcy5lbWl0KCJjbG9zZSIsdGhpcy5fY2xvc2VDb2RlLHRoaXMuX2Nsb3NlTWVzc2FnZSksdGhpcy5leHRlbnNpb25zW2MuZXh0ZW5zaW9uTmFtZV0mJnRoaXMuZXh0ZW5zaW9uc1tjLmV4dGVuc2lvbk5hbWVdLmNsZWFudXAoKSx0aGlzLmV4dGVuc2lvbnM9bnVsbCx0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpfXBhdXNlKCl7aWYodGhpcy5yZWFkeVN0YXRlIT09Zy5PUEVOKXRocm93IG5ldyBFcnJvcigibm90IG9wZW5lZCIpO3RoaXMuX3NvY2tldC5wYXVzZSgpfXJlc3VtZSgpe2lmKHRoaXMucmVhZHlTdGF0ZSE9PWcuT1BFTil0aHJvdyBuZXcgRXJyb3IoIm5vdCBvcGVuZWQiKTt0aGlzLl9zb2NrZXQucmVzdW1lKCl9Y2xvc2UoZSx0KXtpZih0aGlzLnJlYWR5U3RhdGUhPT1nLkNMT1NFRClyZXR1cm4gdGhpcy5yZWFkeVN0YXRlPT09Zy5DT05ORUNUSU5HPyh0aGlzLl9yZXEuYWJvcnQoKSx2b2lkIHRoaXMuZmluYWxpemUobmV3IEVycm9yKCJjbG9zZWQgYmVmb3JlIHRoZSBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkIikpKTp2b2lkKHRoaXMucmVhZHlTdGF0ZSE9PWcuQ0xPU0lORz8odGhpcy5yZWFkeVN0YXRlPWcuQ0xPU0lORyx0aGlzLl9zZW5kZXIuY2xvc2UoZSx0LCF0aGlzLl9pc1NlcnZlcixlPT57ZXx8KHRoaXMuX2Nsb3NlRnJhbWVTZW50PSEwLHRoaXMuX2ZpbmFsaXplZHx8KHRoaXMuX2Nsb3NlRnJhbWVSZWNlaXZlZCYmdGhpcy5fc29ja2V0LmVuZCgpLHRoaXMuX2Nsb3NlVGltZXI9c2V0VGltZW91dCh0aGlzLl9maW5hbGl6ZSxtLCEwKSkpfSkpOnRoaXMuX2Nsb3NlRnJhbWVTZW50JiZ0aGlzLl9jbG9zZUZyYW1lUmVjZWl2ZWQmJnRoaXMuX3NvY2tldC5lbmQoKSl9cGluZyhlLHQscyl7aWYodGhpcy5yZWFkeVN0YXRlIT09Zy5PUEVOKXtpZihzKXJldHVybjt0aHJvdyBuZXcgRXJyb3IoIm5vdCBvcGVuZWQiKX0ibnVtYmVyIj09dHlwZW9mIGUmJihlPWUudG9TdHJpbmcoKSksdm9pZCAwPT09dCYmKHQ9IXRoaXMuX2lzU2VydmVyKSx0aGlzLl9zZW5kZXIucGluZyhlfHxmLkVNUFRZX0JVRkZFUix0KX1wb25nKGUsdCxzKXtpZih0aGlzLnJlYWR5U3RhdGUhPT1nLk9QRU4pe2lmKHMpcmV0dXJuO3Rocm93IG5ldyBFcnJvcigibm90IG9wZW5lZCIpfSJudW1iZXIiPT10eXBlb2YgZSYmKGU9ZS50b1N0cmluZygpKSx2b2lkIDA9PT10JiYodD0hdGhpcy5faXNTZXJ2ZXIpLHRoaXMuX3NlbmRlci5wb25nKGV8fGYuRU1QVFlfQlVGRkVSLHQpfXNlbmQoZSx0LHMpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiB0JiYocz10LHQ9e30pLHRoaXMucmVhZHlTdGF0ZSE9PWcuT1BFTil7aWYoIXMpdGhyb3cgbmV3IEVycm9yKCJub3Qgb3BlbmVkIik7cmV0dXJuIHZvaWQgcyhuZXcgRXJyb3IoIm5vdCBvcGVuZWQiKSl9Im51bWJlciI9PXR5cGVvZiBlJiYoZT1lLnRvU3RyaW5nKCkpO2NvbnN0IGk9T2JqZWN0LmFzc2lnbih7YmluYXJ5OiJzdHJpbmciIT10eXBlb2YgZSxtYXNrOiF0aGlzLl9pc1NlcnZlcixjb21wcmVzczohMCxmaW46ITB9LHQpO3RoaXMuZXh0ZW5zaW9uc1tjLmV4dGVuc2lvbk5hbWVdfHwoaS5jb21wcmVzcz0hMSksdGhpcy5fc2VuZGVyLnNlbmQoZXx8Zi5FTVBUWV9CVUZGRVIsaSxzKX10ZXJtaW5hdGUoKXtpZih0aGlzLnJlYWR5U3RhdGUhPT1nLkNMT1NFRClyZXR1cm4gdGhpcy5yZWFkeVN0YXRlPT09Zy5DT05ORUNUSU5HPyh0aGlzLl9yZXEuYWJvcnQoKSx2b2lkIHRoaXMuZmluYWxpemUobmV3IEVycm9yKCJjbG9zZWQgYmVmb3JlIHRoZSBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkIikpKTp2b2lkIHRoaXMuZmluYWxpemUoITApfX1nLkNPTk5FQ1RJTkc9MCxnLk9QRU49MSxnLkNMT1NJTkc9MixnLkNMT1NFRD0zLFsib3BlbiIsImVycm9yIiwiY2xvc2UiLCJtZXNzYWdlIl0uZm9yRWFjaChlPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KGcucHJvdG90eXBlLGBvbiR7ZX1gLHtnZXQoKXtjb25zdCB0PXRoaXMubGlzdGVuZXJzKGUpO2Zvcih2YXIgcz0wO3M8dC5sZW5ndGg7cysrKWlmKHRbc10uX2xpc3RlbmVyKXJldHVybiB0W3NdLl9saXN0ZW5lcn0sc2V0KHQpe2NvbnN0IHM9dGhpcy5saXN0ZW5lcnMoZSk7Zm9yKHZhciBpPTA7aTxzLmxlbmd0aDtpKyspc1tpXS5fbGlzdGVuZXImJnRoaXMucmVtb3ZlTGlzdGVuZXIoZSxzW2ldKTt0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZSx0KX19KX0pLGcucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9bC5hZGRFdmVudExpc3RlbmVyLGcucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI9bC5yZW1vdmVFdmVudExpc3RlbmVyLGUuZXhwb3J0cz1nfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yZXF1aXJlKCJldmVudHMiKX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0Ijt2YXIgaT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHI9MDtmdW5jdGlvbiBuKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXJldHVybiBuZXcgbihlKTt0aGlzLmlkPXIrKyx0aGlzLmVlPWV9bi5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0LHMpe3JldHVybiB0Ll9fdWx0cm9uPXRoaXMuaWQsdGhpcy5lZS5vbihlLHQscyksdGhpc30sbi5wcm90b3R5cGUub25jZT1mdW5jdGlvbihlLHQscyl7cmV0dXJuIHQuX191bHRyb249dGhpcy5pZCx0aGlzLmVlLm9uY2UoZSx0LHMpLHRoaXN9LG4ucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3ZhciBlLHQ9YXJndW1lbnRzLHM9dGhpcy5lZTtpZigxPT09dC5sZW5ndGgmJiJzdHJpbmciPT10eXBlb2YgdFswXSl0PXRbMF0uc3BsaXQoL1ssIF0rLyk7ZWxzZSBpZighdC5sZW5ndGgpaWYocy5ldmVudE5hbWVzKXQ9cy5ldmVudE5hbWVzKCk7ZWxzZSBpZihzLl9ldmVudHMpe2ZvcihlIGluIHQ9W10scy5fZXZlbnRzKWkuY2FsbChzLl9ldmVudHMsZSkmJnQucHVzaChlKTtPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzJiYodD10LmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMuX2V2ZW50cykpKX1mb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKylmb3IodmFyIG49cy5saXN0ZW5lcnModFtyXSksbz0wO288bi5sZW5ndGg7bysrKXtpZigoZT1uW29dKS5saXN0ZW5lcil7aWYoZS5saXN0ZW5lci5fX3VsdHJvbiE9PXRoaXMuaWQpY29udGludWV9ZWxzZSBpZihlLl9fdWx0cm9uIT09dGhpcy5pZCljb250aW51ZTtzLnJlbW92ZUxpc3RlbmVyKHRbcl0sZSl9cmV0dXJuIHRoaXN9LG4ucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuZWUmJih0aGlzLnJlbW92ZSgpLHRoaXMuZWU9bnVsbCwhMCl9LGUuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yZXF1aXJlKCJodHRwIil9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXJlcXVpcmUoInVybCIpfSxmdW5jdGlvbihlLHQscyl7KGZ1bmN0aW9uKGkpe3ZhciByPXMoMjMpLG49cygyNCksbz1uLmpvaW4sYT1uLmRpcm5hbWUsaD1yLmFjY2Vzc1N5bmMmJmZ1bmN0aW9uKGUpe3RyeXtyLmFjY2Vzc1N5bmMoZSl9Y2F0Y2goZSl7cmV0dXJuITF9cmV0dXJuITB9fHxyLmV4aXN0c1N5bmN8fG4uZXhpc3RzU3luYyxjPXthcnJvdzpwcm9jZXNzLmVudi5OT0RFX0JJTkRJTkdTX0FSUk9XfHwiIOKGkiAiLGNvbXBpbGVkOnByb2Nlc3MuZW52Lk5PREVfQklORElOR1NfQ09NUElMRURfRElSfHwiY29tcGlsZWQiLHBsYXRmb3JtOnByb2Nlc3MucGxhdGZvcm0sYXJjaDpwcm9jZXNzLmFyY2gsdmVyc2lvbjpwcm9jZXNzLnZlcnNpb25zLm5vZGUsYmluZGluZ3M6ImJpbmRpbmdzLm5vZGUiLHRyeTpbWyJtb2R1bGVfcm9vdCIsImJ1aWxkIiwiYmluZGluZ3MiXSxbIm1vZHVsZV9yb290IiwiYnVpbGQiLCJEZWJ1ZyIsImJpbmRpbmdzIl0sWyJtb2R1bGVfcm9vdCIsImJ1aWxkIiwiUmVsZWFzZSIsImJpbmRpbmdzIl0sWyJtb2R1bGVfcm9vdCIsIm91dCIsIkRlYnVnIiwiYmluZGluZ3MiXSxbIm1vZHVsZV9yb290IiwiRGVidWciLCJiaW5kaW5ncyJdLFsibW9kdWxlX3Jvb3QiLCJvdXQiLCJSZWxlYXNlIiwiYmluZGluZ3MiXSxbIm1vZHVsZV9yb290IiwiUmVsZWFzZSIsImJpbmRpbmdzIl0sWyJtb2R1bGVfcm9vdCIsImJ1aWxkIiwiZGVmYXVsdCIsImJpbmRpbmdzIl0sWyJtb2R1bGVfcm9vdCIsImNvbXBpbGVkIiwidmVyc2lvbiIsInBsYXRmb3JtIiwiYXJjaCIsImJpbmRpbmdzIl1dfTtlLmV4cG9ydHM9dD1mdW5jdGlvbihlKXsic3RyaW5nIj09dHlwZW9mIGU/ZT17YmluZGluZ3M6ZX06ZXx8KGU9e30pLE9iamVjdC5rZXlzKGMpLm1hcChmdW5jdGlvbih0KXt0IGluIGV8fChlW3RdPWNbdF0pfSksZS5tb2R1bGVfcm9vdHx8KGUubW9kdWxlX3Jvb3Q9dC5nZXRSb290KHQuZ2V0RmlsZU5hbWUoKSkpLCIubm9kZSIhPW4uZXh0bmFtZShlLmJpbmRpbmdzKSYmKGUuYmluZGluZ3MrPSIubm9kZSIpO2Zvcih2YXIgcyxpLHIsYT1bXSxoPTAsbD1lLnRyeS5sZW5ndGg7aDxsO2grKyl7cz1vLmFwcGx5KG51bGwsZS50cnlbaF0ubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfHx0fSkpLGEucHVzaChzKTt0cnl7cmV0dXJuIGUucGF0aCxpPSFmdW5jdGlvbigpe3ZhciBlPW5ldyBFcnJvcignQ2Fubm90IGZpbmQgbW9kdWxlICIuIicpO3Rocm93IGUuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsZX0oKSxlLnBhdGh8fChpLnBhdGg9cyksaX1jYXRjaChlKXtpZighL25vdCBmaW5kL2kudGVzdChlLm1lc3NhZ2UpKXRocm93IGV9fXRocm93KHI9bmV3IEVycm9yKCJDb3VsZCBub3QgbG9jYXRlIHRoZSBiaW5kaW5ncyBmaWxlLiBUcmllZDpcbiIrYS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGUuYXJyb3crdH0pLmpvaW4oIlxuIikpKS50cmllcz1hLHJ9LHQuZ2V0RmlsZU5hbWU9ZnVuY3Rpb24oZSl7dmFyIHQscz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZSxyPUVycm9yLnN0YWNrVHJhY2VMaW1pdCxuPXt9O3JldHVybiBFcnJvci5zdGFja1RyYWNlTGltaXQ9MTAsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9ZnVuY3Rpb24ocyxyKXtmb3IodmFyIG49MCxvPXIubGVuZ3RoO248bztuKyspaWYoKHQ9cltuXS5nZXRGaWxlTmFtZSgpKSE9PWkpe2lmKCFlKXJldHVybjtpZih0IT09ZSlyZXR1cm59fSxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShuKSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1zLEVycm9yLnN0YWNrVHJhY2VMaW1pdD1yLHR9LHQuZ2V0Um9vdD1mdW5jdGlvbihlKXtmb3IodmFyIHQscz1hKGUpOzspe2lmKCIuIj09PXMmJihzPXByb2Nlc3MuY3dkKCkpLGgobyhzLCJwYWNrYWdlLmpzb24iKSl8fGgobyhzLCJub2RlX21vZHVsZXMiKSkpcmV0dXJuIHM7aWYodD09PXMpdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBtb2R1bGUgcm9vdCBnaXZlbiBmaWxlOiAiJytlKyciLiBEbyB5b3UgaGF2ZSBhIGBwYWNrYWdlLmpzb25gIGZpbGU/ICcpO3Q9cyxzPW8ocywiLi4iKX19fSkuY2FsbCh0LCIvaW5kZXguanMiKX0sZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBzKGUpe3Rocm93IG5ldyBFcnJvcigiQ2Fubm90IGZpbmQgbW9kdWxlICciK2UrIicuIil9cy5rZXlzPWZ1bmN0aW9uKCl7cmV0dXJuW119LHMucmVzb2x2ZT1zLGUuZXhwb3J0cz1zLHMuaWQ9MTF9LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7Y29uc3QgaT1bMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDEsMSwxLDEsMSwwLDAsMSwxLDAsMSwxLDAsMSwxLDEsMSwxLDEsMSwxLDEsMSwwLDAsMCwwLDAsMCwwLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwwLDAsMCwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMCwxLDAsMSwwXTtmdW5jdGlvbiByKGUsdCxzKXtPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KT9lW3RdLnB1c2gocyk6ZVt0XT1bc119ZS5leHBvcnRzPXtmb3JtYXQ6ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUpLm1hcCh0PT57dmFyIHM9ZVt0XTtyZXR1cm4gQXJyYXkuaXNBcnJheShzKXx8KHM9W3NdKSxzLm1hcChlPT5bdF0uY29uY2F0KE9iamVjdC5rZXlzKGUpLm1hcCh0PT57dmFyIHM9ZVt0XTtyZXR1cm4gQXJyYXkuaXNBcnJheShzKXx8KHM9W3NdKSxzLm1hcChlPT4hMD09PWU/dDpgJHt0fT0ke2V9YCkuam9pbigiOyAiKX0pKS5qb2luKCI7ICIpKS5qb2luKCIsICIpfSkuam9pbigiLCAiKX0scGFyc2U6ZnVuY3Rpb24oZSl7Y29uc3QgdD17fTtpZih2b2lkIDA9PT1lfHwiIj09PWUpcmV0dXJuIHQ7Zm9yKHZhciBzLG4sbz17fSxhPSExLGg9ITEsYz0hMSxsPS0xLHU9LTEsZj0wO2Y8ZS5sZW5ndGg7ZisrKXtjb25zdCBfPWUuY2hhckNvZGVBdChmKTtpZih2b2lkIDA9PT1zKWlmKC0xPT09dSYmMT09PWlbX10pLTE9PT1sJiYobD1mKTtlbHNlIGlmKDMyPT09X3x8OT09PV8pLTE9PT11JiYtMSE9PWwmJih1PWYpO2Vsc2V7aWYoNTkhPT1fJiY0NCE9PV8pdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2Z9YCk7e2lmKC0xPT09bCl0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7Zn1gKTstMT09PXUmJih1PWYpO2NvbnN0IGk9ZS5zbGljZShsLHUpOzQ0PT09Xz8ocih0LGksbyksbz17fSk6cz1pLGw9dT0tMX19ZWxzZSBpZih2b2lkIDA9PT1uKWlmKC0xPT09dSYmMT09PWlbX10pLTE9PT1sJiYobD1mKTtlbHNlIGlmKDMyPT09X3x8OT09PV8pLTE9PT11JiYtMSE9PWwmJih1PWYpO2Vsc2UgaWYoNTk9PT1ffHw0ND09PV8pe2lmKC0xPT09bCl0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7Zn1gKTstMT09PXUmJih1PWYpLHIobyxlLnNsaWNlKGwsdSksITApLDQ0PT09XyYmKHIodCxzLG8pLG89e30scz12b2lkIDApLGw9dT0tMX1lbHNle2lmKDYxIT09X3x8LTE9PT1sfHwtMSE9PXUpdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2Z9YCk7bj1lLnNsaWNlKGwsZiksbD11PS0xfWVsc2UgaWYoaCl7aWYoMSE9PWlbX10pdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2Z9YCk7LTE9PT1sP2w9ZjphfHwoYT0hMCksaD0hMX1lbHNlIGlmKGMpaWYoMT09PWlbX10pLTE9PT1sJiYobD1mKTtlbHNlIGlmKDM0PT09XyYmLTEhPT1sKWM9ITEsdT1mO2Vsc2V7aWYoOTIhPT1fKXRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtmfWApO2g9ITB9ZWxzZSBpZigzND09PV8mJjYxPT09ZS5jaGFyQ29kZUF0KGYtMSkpYz0hMDtlbHNlIGlmKC0xPT09dSYmMT09PWlbX10pLTE9PT1sJiYobD1mKTtlbHNlIGlmKC0xPT09bHx8MzIhPT1fJiY5IT09Xyl7aWYoNTkhPT1fJiY0NCE9PV8pdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2Z9YCk7aWYoLTE9PT1sKXRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtmfWApOy0xPT09dSYmKHU9Zik7dmFyIGQ9ZS5zbGljZShsLHUpO2EmJihkPWQucmVwbGFjZSgvXFwvZywiIiksYT0hMSkscihvLG4sZCksNDQ9PT1fJiYocih0LHMsbyksbz17fSxzPXZvaWQgMCksbj12b2lkIDAsbD11PS0xfWVsc2UtMT09PXUmJih1PWYpfWlmKC0xPT09bHx8Yyl0aHJvdyBuZXcgRXJyb3IoInVuZXhwZWN0ZWQgZW5kIG9mIGlucHV0Iik7LTE9PT11JiYodT1mKTtjb25zdCBfPWUuc2xpY2UobCx1KTtyZXR1cm4gdm9pZCAwPT09cz9yKHQsXyx7fSk6KHZvaWQgMD09PW4/cihvLF8sITApOnIobyxuLGE/Xy5yZXBsYWNlKC9cXC9nLCIiKTpfKSxyKHQscyxvKSksdH19fSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiOwovKiEKICogd3M6IGEgbm9kZS5qcyB3ZWJzb2NrZXQgY2xpZW50CiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPgogKiBNSVQgTGljZW5zZWQKICovY29uc3QgaT1zKDApLHI9cygxKSxuPXMoMjcpLG89cyg0KSxhPXMoMTQpLGg9cygyKSxjPWkuQnVmZmVyLGw9MCx1PTEsZj0yLGQ9MyxfPTQscD01O2Z1bmN0aW9uIG0oZSx0KXtyZXR1cm4gMT09PWUubGVuZ3RoP2VbMF06ZS5sZW5ndGg+MT9vLmNvbmNhdChlLHQpOmguRU1QVFlfQlVGRkVSfWUuZXhwb3J0cz1jbGFzc3tjb25zdHJ1Y3RvcihlLHQscyl7dGhpcy5fYmluYXJ5VHlwZT1zfHxoLkJJTkFSWV9UWVBFU1swXSx0aGlzLl9leHRlbnNpb25zPWV8fHt9LHRoaXMuX21heFBheWxvYWQ9MHx0LHRoaXMuX2J1ZmZlcmVkQnl0ZXM9MCx0aGlzLl9idWZmZXJzPVtdLHRoaXMuX2NvbXByZXNzZWQ9ITEsdGhpcy5fcGF5bG9hZExlbmd0aD0wLHRoaXMuX2ZyYWdtZW50ZWQ9MCx0aGlzLl9tYXNrZWQ9ITEsdGhpcy5fZmluPSExLHRoaXMuX21hc2s9bnVsbCx0aGlzLl9vcGNvZGU9MCx0aGlzLl90b3RhbFBheWxvYWRMZW5ndGg9MCx0aGlzLl9tZXNzYWdlTGVuZ3RoPTAsdGhpcy5fZnJhZ21lbnRzPVtdLHRoaXMuX2NsZWFudXBDYWxsYmFjaz1udWxsLHRoaXMuX2hhZEVycm9yPSExLHRoaXMuX2RlYWQ9ITEsdGhpcy5fbG9vcD0hMSx0aGlzLm9ubWVzc2FnZT1udWxsLHRoaXMub25jbG9zZT1udWxsLHRoaXMub25lcnJvcj1udWxsLHRoaXMub25waW5nPW51bGwsdGhpcy5vbnBvbmc9bnVsbCx0aGlzLl9zdGF0ZT1sfXJlYWRCdWZmZXIoZSl7dmFyIHQscyxpPTA7aWYodGhpcy5fYnVmZmVyZWRCeXRlcy09ZSxlPT09dGhpcy5fYnVmZmVyc1swXS5sZW5ndGgpcmV0dXJuIHRoaXMuX2J1ZmZlcnMuc2hpZnQoKTtpZihlPHRoaXMuX2J1ZmZlcnNbMF0ubGVuZ3RoKXJldHVybiB0PXRoaXMuX2J1ZmZlcnNbMF0uc2xpY2UoMCxlKSx0aGlzLl9idWZmZXJzWzBdPXRoaXMuX2J1ZmZlcnNbMF0uc2xpY2UoZSksdDtmb3IodD1jLmFsbG9jVW5zYWZlKGUpO2U+MDspZT49KHM9dGhpcy5fYnVmZmVyc1swXS5sZW5ndGgpPyh0aGlzLl9idWZmZXJzWzBdLmNvcHkodCxpKSxpKz1zLHRoaXMuX2J1ZmZlcnMuc2hpZnQoKSk6KHRoaXMuX2J1ZmZlcnNbMF0uY29weSh0LGksMCxlKSx0aGlzLl9idWZmZXJzWzBdPXRoaXMuX2J1ZmZlcnNbMF0uc2xpY2UoZSkpLGUtPXM7cmV0dXJuIHR9aGFzQnVmZmVyZWRCeXRlcyhlKXtyZXR1cm4gdGhpcy5fYnVmZmVyZWRCeXRlcz49ZXx8KHRoaXMuX2xvb3A9ITEsdGhpcy5fZGVhZCYmdGhpcy5jbGVhbnVwKHRoaXMuX2NsZWFudXBDYWxsYmFjayksITEpfWFkZChlKXt0aGlzLl9kZWFkfHwodGhpcy5fYnVmZmVyZWRCeXRlcys9ZS5sZW5ndGgsdGhpcy5fYnVmZmVycy5wdXNoKGUpLHRoaXMuc3RhcnRMb29wKCkpfXN0YXJ0TG9vcCgpe2Zvcih0aGlzLl9sb29wPSEwO3RoaXMuX2xvb3A7KXN3aXRjaCh0aGlzLl9zdGF0ZSl7Y2FzZSBsOnRoaXMuZ2V0SW5mbygpO2JyZWFrO2Nhc2UgdTp0aGlzLmdldFBheWxvYWRMZW5ndGgxNigpO2JyZWFrO2Nhc2UgZjp0aGlzLmdldFBheWxvYWRMZW5ndGg2NCgpO2JyZWFrO2Nhc2UgZDp0aGlzLmdldE1hc2soKTticmVhaztjYXNlIF86dGhpcy5nZXREYXRhKCk7YnJlYWs7ZGVmYXVsdDp0aGlzLl9sb29wPSExfX1nZXRJbmZvKCl7aWYoIXRoaXMuaGFzQnVmZmVyZWRCeXRlcygyKSlyZXR1cm47Y29uc3QgZT10aGlzLnJlYWRCdWZmZXIoMik7aWYoMCE9KDQ4JmVbMF0pKXJldHVybiB2b2lkIHRoaXMuZXJyb3IobmV3IEVycm9yKCJSU1YyIGFuZCBSU1YzIG11c3QgYmUgY2xlYXIiKSwxMDAyKTtjb25zdCB0PTY0PT0oNjQmZVswXSk7aWYoIXR8fHRoaXMuX2V4dGVuc2lvbnNbci5leHRlbnNpb25OYW1lXSl7aWYodGhpcy5fZmluPTEyOD09KDEyOCZlWzBdKSx0aGlzLl9vcGNvZGU9MTUmZVswXSx0aGlzLl9wYXlsb2FkTGVuZ3RoPTEyNyZlWzFdLDA9PT10aGlzLl9vcGNvZGUpe2lmKHQpcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoIlJTVjEgbXVzdCBiZSBjbGVhciIpLDEwMDIpO2lmKCF0aGlzLl9mcmFnbWVudGVkKXJldHVybiB2b2lkIHRoaXMuZXJyb3IobmV3IEVycm9yKGBpbnZhbGlkIG9wY29kZTogJHt0aGlzLl9vcGNvZGV9YCksMTAwMik7dGhpcy5fb3Bjb2RlPXRoaXMuX2ZyYWdtZW50ZWR9ZWxzZSBpZigxPT09dGhpcy5fb3Bjb2RlfHwyPT09dGhpcy5fb3Bjb2RlKXtpZih0aGlzLl9mcmFnbWVudGVkKXJldHVybiB2b2lkIHRoaXMuZXJyb3IobmV3IEVycm9yKGBpbnZhbGlkIG9wY29kZTogJHt0aGlzLl9vcGNvZGV9YCksMTAwMik7dGhpcy5fY29tcHJlc3NlZD10fWVsc2V7aWYoISh0aGlzLl9vcGNvZGU+NyYmdGhpcy5fb3Bjb2RlPDExKSlyZXR1cm4gdm9pZCB0aGlzLmVycm9yKG5ldyBFcnJvcihgaW52YWxpZCBvcGNvZGU6ICR7dGhpcy5fb3Bjb2RlfWApLDEwMDIpO2lmKCF0aGlzLl9maW4pcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoIkZJTiBtdXN0IGJlIHNldCIpLDEwMDIpO2lmKHQpcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoIlJTVjEgbXVzdCBiZSBjbGVhciIpLDEwMDIpO2lmKHRoaXMuX3BheWxvYWRMZW5ndGg+MTI1KXJldHVybiB2b2lkIHRoaXMuZXJyb3IobmV3IEVycm9yKCJpbnZhbGlkIHBheWxvYWQgbGVuZ3RoIiksMTAwMil9dGhpcy5fZmlufHx0aGlzLl9mcmFnbWVudGVkfHwodGhpcy5fZnJhZ21lbnRlZD10aGlzLl9vcGNvZGUpLHRoaXMuX21hc2tlZD0xMjg9PSgxMjgmZVsxXSksMTI2PT09dGhpcy5fcGF5bG9hZExlbmd0aD90aGlzLl9zdGF0ZT11OjEyNz09PXRoaXMuX3BheWxvYWRMZW5ndGg/dGhpcy5fc3RhdGU9Zjp0aGlzLmhhdmVMZW5ndGgoKX1lbHNlIHRoaXMuZXJyb3IobmV3IEVycm9yKCJSU1YxIG11c3QgYmUgY2xlYXIiKSwxMDAyKX1nZXRQYXlsb2FkTGVuZ3RoMTYoKXt0aGlzLmhhc0J1ZmZlcmVkQnl0ZXMoMikmJih0aGlzLl9wYXlsb2FkTGVuZ3RoPXRoaXMucmVhZEJ1ZmZlcigyKS5yZWFkVUludDE2QkUoMCwhMCksdGhpcy5oYXZlTGVuZ3RoKCkpfWdldFBheWxvYWRMZW5ndGg2NCgpe2lmKCF0aGlzLmhhc0J1ZmZlcmVkQnl0ZXMoOCkpcmV0dXJuO2NvbnN0IGU9dGhpcy5yZWFkQnVmZmVyKDgpLHQ9ZS5yZWFkVUludDMyQkUoMCwhMCk7dD5NYXRoLnBvdygyLDIxKS0xP3RoaXMuZXJyb3IobmV3IEVycm9yKCJtYXggcGF5bG9hZCBzaXplIGV4Y2VlZGVkIiksMTAwOSk6KHRoaXMuX3BheWxvYWRMZW5ndGg9dCpNYXRoLnBvdygyLDMyKStlLnJlYWRVSW50MzJCRSg0LCEwKSx0aGlzLmhhdmVMZW5ndGgoKSl9aGF2ZUxlbmd0aCgpe3RoaXMuX29wY29kZTw4JiZ0aGlzLm1heFBheWxvYWRFeGNlZWRlZCh0aGlzLl9wYXlsb2FkTGVuZ3RoKXx8KHRoaXMuX21hc2tlZD90aGlzLl9zdGF0ZT1kOnRoaXMuX3N0YXRlPV8pfWdldE1hc2soKXt0aGlzLmhhc0J1ZmZlcmVkQnl0ZXMoNCkmJih0aGlzLl9tYXNrPXRoaXMucmVhZEJ1ZmZlcig0KSx0aGlzLl9zdGF0ZT1fKX1nZXREYXRhKCl7dmFyIGU9aC5FTVBUWV9CVUZGRVI7aWYodGhpcy5fcGF5bG9hZExlbmd0aCl7aWYoIXRoaXMuaGFzQnVmZmVyZWRCeXRlcyh0aGlzLl9wYXlsb2FkTGVuZ3RoKSlyZXR1cm47ZT10aGlzLnJlYWRCdWZmZXIodGhpcy5fcGF5bG9hZExlbmd0aCksdGhpcy5fbWFza2VkJiZvLnVubWFzayhlLHRoaXMuX21hc2spfXRoaXMuX29wY29kZT43P3RoaXMuY29udHJvbE1lc3NhZ2UoZSk6dGhpcy5fY29tcHJlc3NlZD8odGhpcy5fc3RhdGU9cCx0aGlzLmRlY29tcHJlc3MoZSkpOnRoaXMucHVzaEZyYWdtZW50KGUpJiZ0aGlzLmRhdGFNZXNzYWdlKCl9ZGVjb21wcmVzcyhlKXt0aGlzLl9leHRlbnNpb25zW3IuZXh0ZW5zaW9uTmFtZV0uZGVjb21wcmVzcyhlLHRoaXMuX2ZpbiwoZSx0KT0+e2U/dGhpcy5lcnJvcihlLDEwMDk9PT1lLmNsb3NlQ29kZT8xMDA5OjEwMDcpOih0aGlzLnB1c2hGcmFnbWVudCh0KSYmdGhpcy5kYXRhTWVzc2FnZSgpLHRoaXMuc3RhcnRMb29wKCkpfSl9ZGF0YU1lc3NhZ2UoKXtpZih0aGlzLl9maW4pe2NvbnN0IHQ9dGhpcy5fbWVzc2FnZUxlbmd0aCxzPXRoaXMuX2ZyYWdtZW50cztpZih0aGlzLl90b3RhbFBheWxvYWRMZW5ndGg9MCx0aGlzLl9tZXNzYWdlTGVuZ3RoPTAsdGhpcy5fZnJhZ21lbnRlZD0wLHRoaXMuX2ZyYWdtZW50cz1bXSwyPT09dGhpcy5fb3Bjb2RlKXt2YXIgZTtlPSJub2RlYnVmZmVyIj09PXRoaXMuX2JpbmFyeVR5cGU/bShzLHQpOiJhcnJheWJ1ZmZlciI9PT10aGlzLl9iaW5hcnlUeXBlP2Z1bmN0aW9uKGUpe3JldHVybiAwPT09ZS5ieXRlT2Zmc2V0JiZlLmJ5dGVMZW5ndGg9PT1lLmJ1ZmZlci5ieXRlTGVuZ3RoP2UuYnVmZmVyOmUuYnVmZmVyLnNsaWNlKGUuYnl0ZU9mZnNldCxlLmJ5dGVPZmZzZXQrZS5ieXRlTGVuZ3RoKX0obShzLHQpKTpzLHRoaXMub25tZXNzYWdlKGUpfWVsc2V7Y29uc3QgZT1tKHMsdCk7aWYoIW4oZSkpcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoImludmFsaWQgdXRmOCBzZXF1ZW5jZSIpLDEwMDcpO3RoaXMub25tZXNzYWdlKGUudG9TdHJpbmcoKSl9fXRoaXMuX3N0YXRlPWx9Y29udHJvbE1lc3NhZ2UoZSl7aWYoOCE9PXRoaXMuX29wY29kZSk5PT09dGhpcy5fb3Bjb2RlP3RoaXMub25waW5nKGUpOnRoaXMub25wb25nKGUpLHRoaXMuX3N0YXRlPWw7ZWxzZSBpZigwPT09ZS5sZW5ndGgpdGhpcy5vbmNsb3NlKDFlMywiIiksdGhpcy5fbG9vcD0hMSx0aGlzLmNsZWFudXAodGhpcy5fY2xlYW51cENhbGxiYWNrKTtlbHNlIGlmKDE9PT1lLmxlbmd0aCl0aGlzLmVycm9yKG5ldyBFcnJvcigiaW52YWxpZCBwYXlsb2FkIGxlbmd0aCIpLDEwMDIpO2Vsc2V7Y29uc3QgdD1lLnJlYWRVSW50MTZCRSgwLCEwKTtpZighYS5pc1ZhbGlkRXJyb3JDb2RlKHQpKXJldHVybiB2b2lkIHRoaXMuZXJyb3IobmV3IEVycm9yKGBpbnZhbGlkIHN0YXR1cyBjb2RlOiAke3R9YCksMTAwMik7Y29uc3Qgcz1lLnNsaWNlKDIpO2lmKCFuKHMpKXJldHVybiB2b2lkIHRoaXMuZXJyb3IobmV3IEVycm9yKCJpbnZhbGlkIHV0Zjggc2VxdWVuY2UiKSwxMDA3KTt0aGlzLm9uY2xvc2UodCxzLnRvU3RyaW5nKCkpLHRoaXMuX2xvb3A9ITEsdGhpcy5jbGVhbnVwKHRoaXMuX2NsZWFudXBDYWxsYmFjayl9fWVycm9yKGUsdCl7dGhpcy5vbmVycm9yKGUsdCksdGhpcy5faGFkRXJyb3I9ITAsdGhpcy5fbG9vcD0hMSx0aGlzLmNsZWFudXAodGhpcy5fY2xlYW51cENhbGxiYWNrKX1tYXhQYXlsb2FkRXhjZWVkZWQoZSl7aWYoMD09PWV8fHRoaXMuX21heFBheWxvYWQ8MSlyZXR1cm4hMTtjb25zdCB0PXRoaXMuX3RvdGFsUGF5bG9hZExlbmd0aCtlO3JldHVybiB0PD10aGlzLl9tYXhQYXlsb2FkPyh0aGlzLl90b3RhbFBheWxvYWRMZW5ndGg9dCwhMSk6KHRoaXMuZXJyb3IobmV3IEVycm9yKCJtYXggcGF5bG9hZCBzaXplIGV4Y2VlZGVkIiksMTAwOSksITApfXB1c2hGcmFnbWVudChlKXtpZigwPT09ZS5sZW5ndGgpcmV0dXJuITA7Y29uc3QgdD10aGlzLl9tZXNzYWdlTGVuZ3RoK2UubGVuZ3RoO3JldHVybiB0aGlzLl9tYXhQYXlsb2FkPDF8fHQ8PXRoaXMuX21heFBheWxvYWQ/KHRoaXMuX21lc3NhZ2VMZW5ndGg9dCx0aGlzLl9mcmFnbWVudHMucHVzaChlKSwhMCk6KHRoaXMuZXJyb3IobmV3IEVycm9yKCJtYXggcGF5bG9hZCBzaXplIGV4Y2VlZGVkIiksMTAwOSksITEpfWNsZWFudXAoZSl7dGhpcy5fZGVhZD0hMCx0aGlzLl9oYWRFcnJvcnx8IXRoaXMuX2xvb3AmJnRoaXMuX3N0YXRlIT09cD8odGhpcy5fZXh0ZW5zaW9ucz1udWxsLHRoaXMuX2ZyYWdtZW50cz1udWxsLHRoaXMuX2J1ZmZlcnM9bnVsbCx0aGlzLl9tYXNrPW51bGwsdGhpcy5fY2xlYW51cENhbGxiYWNrPW51bGwsdGhpcy5vbm1lc3NhZ2U9bnVsbCx0aGlzLm9uY2xvc2U9bnVsbCx0aGlzLm9uZXJyb3I9bnVsbCx0aGlzLm9ucGluZz1udWxsLHRoaXMub25wb25nPW51bGwsZSYmZSgpKTp0aGlzLl9jbGVhbnVwQ2FsbGJhY2s9ZX19fSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiOwovKiEKICogd3M6IGEgbm9kZS5qcyB3ZWJzb2NrZXQgY2xpZW50CiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPgogKiBNSVQgTGljZW5zZWQKICovZS5leHBvcnRzPXtpc1ZhbGlkRXJyb3JDb2RlOmZ1bmN0aW9uKGUpe3JldHVybiBlPj0xZTMmJmU8PTEwMTMmJjEwMDQhPT1lJiYxMDA1IT09ZSYmMTAwNiE9PWV8fGU+PTNlMyYmZTw9NDk5OX0sMTAwMDoibm9ybWFsIiwxMDAxOiJnb2luZyBhd2F5IiwxMDAyOiJwcm90b2NvbCBlcnJvciIsMTAwMzoidW5zdXBwb3J0ZWQgZGF0YSIsMTAwNDoicmVzZXJ2ZWQiLDEwMDU6InJlc2VydmVkIGZvciBleHRlbnNpb25zIiwxMDA2OiJyZXNlcnZlZCBmb3IgZXh0ZW5zaW9ucyIsMTAwNzoiaW5jb25zaXN0ZW50IG9yIGludmFsaWQgZGF0YSIsMTAwODoicG9saWN5IHZpb2xhdGlvbiIsMTAwOToibWVzc2FnZSB0b28gYmlnIiwxMDEwOiJleHRlbnNpb24gaGFuZHNoYWtlIG1pc3NpbmciLDEwMTE6ImFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHByZXZlbnRlZCB0aGUgcmVxdWVzdCBmcm9tIGJlaW5nIGZ1bGZpbGxlZCIsMTAxMjoic2VydmljZSByZXN0YXJ0IiwxMDEzOiJ0cnkgYWdhaW4gbGF0ZXIifX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0IjsKLyohCiAqIHdzOiBhIG5vZGUuanMgd2Vic29ja2V0IGNsaWVudAogKiBDb3B5cmlnaHQoYykgMjAxMSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT4KICogTUlUIExpY2Vuc2VkCiAqL2NvbnN0IGk9cygwKSxyPXMoMyksbj1zKDEpLG89cyg0KSxhPXMoMTQpLGg9cygyKSxjPWkuQnVmZmVyO2NsYXNzIGx7Y29uc3RydWN0b3IoZSx0KXt0aGlzLl9leHRlbnNpb25zPXR8fHt9LHRoaXMuX3NvY2tldD1lLHRoaXMuX2ZpcnN0RnJhZ21lbnQ9ITAsdGhpcy5fY29tcHJlc3M9ITEsdGhpcy5fYnVmZmVyZWRCeXRlcz0wLHRoaXMuX2RlZmxhdGluZz0hMSx0aGlzLl9xdWV1ZT1bXX1zdGF0aWMgZnJhbWUoZSx0KXtjb25zdCBzPWUubGVuZ3RoPDEwMjR8fHQubWFzayYmdC5yZWFkT25seTt2YXIgaT10Lm1hc2s/NjoyLG49ZS5sZW5ndGg7ZS5sZW5ndGg+PTY1NTM2PyhpKz04LG49MTI3KTplLmxlbmd0aD4xMjUmJihpKz0yLG49MTI2KTtjb25zdCBhPWMuYWxsb2NVbnNhZmUocz9lLmxlbmd0aCtpOmkpO2lmKGFbMF09dC5maW4/MTI4fHQub3Bjb2RlOnQub3Bjb2RlLHQucnN2MSYmKGFbMF18PTY0KSwxMjY9PT1uP2Eud3JpdGVVSW50MTZCRShlLmxlbmd0aCwyLCEwKToxMjc9PT1uJiYoYS53cml0ZVVJbnQzMkJFKDAsMiwhMCksYS53cml0ZVVJbnQzMkJFKGUubGVuZ3RoLDYsITApKSwhdC5tYXNrKXJldHVybiBhWzFdPW4scz8oZS5jb3B5KGEsaSksW2FdKTpbYSxlXTtjb25zdCBoPXIucmFuZG9tQnl0ZXMoNCk7cmV0dXJuIGFbMV09MTI4fG4sYVtpLTRdPWhbMF0sYVtpLTNdPWhbMV0sYVtpLTJdPWhbMl0sYVtpLTFdPWhbM10scz8oby5tYXNrKGUsaCxhLGksZS5sZW5ndGgpLFthXSk6KG8ubWFzayhlLGgsZSwwLGUubGVuZ3RoKSxbYSxlXSl9Y2xvc2UoZSx0LHMsaSl7dmFyIHI7aWYodm9pZCAwPT09ZSllPTFlMztlbHNlIGlmKCJudW1iZXIiIT10eXBlb2YgZXx8IWEuaXNWYWxpZEVycm9yQ29kZShlKSl0aHJvdyBuZXcgRXJyb3IoImZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSB2YWxpZCBlcnJvciBjb2RlIG51bWJlciIpO3ZvaWQgMD09PXR8fCIiPT09dD8xZTM9PT1lP3I9aC5FTVBUWV9CVUZGRVI6KHI9Yy5hbGxvY1Vuc2FmZSgyKSkud3JpdGVVSW50MTZCRShlLDAsITApOigocj1jLmFsbG9jVW5zYWZlKDIrYy5ieXRlTGVuZ3RoKHQpKSkud3JpdGVVSW50MTZCRShlLDAsITApLHIud3JpdGUodCwyKSksdGhpcy5fZGVmbGF0aW5nP3RoaXMuZW5xdWV1ZShbdGhpcy5kb0Nsb3NlLHIscyxpXSk6dGhpcy5kb0Nsb3NlKHIscyxpKX1kb0Nsb3NlKGUsdCxzKXt0aGlzLnNlbmRGcmFtZShsLmZyYW1lKGUse2ZpbjohMCxyc3YxOiExLG9wY29kZTo4LG1hc2s6dCxyZWFkT25seTohMX0pLHMpfXBpbmcoZSx0KXt2YXIgcz0hMDtjLmlzQnVmZmVyKGUpfHwoZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyP2U9Yy5mcm9tKGUpOkFycmF5QnVmZmVyLmlzVmlldyhlKT9lPXUoZSk6KGU9Yy5mcm9tKGUpLHM9ITEpKSx0aGlzLl9kZWZsYXRpbmc/dGhpcy5lbnF1ZXVlKFt0aGlzLmRvUGluZyxlLHQsc10pOnRoaXMuZG9QaW5nKGUsdCxzKX1kb1BpbmcoZSx0LHMpe3RoaXMuc2VuZEZyYW1lKGwuZnJhbWUoZSx7ZmluOiEwLHJzdjE6ITEsb3Bjb2RlOjksbWFzazp0LHJlYWRPbmx5OnN9KSl9cG9uZyhlLHQpe3ZhciBzPSEwO2MuaXNCdWZmZXIoZSl8fChlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/ZT1jLmZyb20oZSk6QXJyYXlCdWZmZXIuaXNWaWV3KGUpP2U9dShlKTooZT1jLmZyb20oZSkscz0hMSkpLHRoaXMuX2RlZmxhdGluZz90aGlzLmVucXVldWUoW3RoaXMuZG9Qb25nLGUsdCxzXSk6dGhpcy5kb1BvbmcoZSx0LHMpfWRvUG9uZyhlLHQscyl7dGhpcy5zZW5kRnJhbWUobC5mcmFtZShlLHtmaW46ITAscnN2MTohMSxvcGNvZGU6MTAsbWFzazp0LHJlYWRPbmx5OnN9KSl9c2VuZChlLHQscyl7dmFyIGk9dC5iaW5hcnk/MjoxLHI9dC5jb21wcmVzcyxvPSEwO2MuaXNCdWZmZXIoZSl8fChlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/ZT1jLmZyb20oZSk6QXJyYXlCdWZmZXIuaXNWaWV3KGUpP2U9dShlKTooZT1jLmZyb20oZSksbz0hMSkpO2NvbnN0IGE9dGhpcy5fZXh0ZW5zaW9uc1tuLmV4dGVuc2lvbk5hbWVdO2lmKHRoaXMuX2ZpcnN0RnJhZ21lbnQ/KHRoaXMuX2ZpcnN0RnJhZ21lbnQ9ITEsciYmYSYmKHI9ZS5sZW5ndGg+PWEuX3RocmVzaG9sZCksdGhpcy5fY29tcHJlc3M9cik6KHI9ITEsaT0wKSx0LmZpbiYmKHRoaXMuX2ZpcnN0RnJhZ21lbnQ9ITApLGEpe2NvbnN0IG49e2Zpbjp0LmZpbixyc3YxOnIsb3Bjb2RlOmksbWFzazp0Lm1hc2sscmVhZE9ubHk6b307dGhpcy5fZGVmbGF0aW5nP3RoaXMuZW5xdWV1ZShbdGhpcy5kaXNwYXRjaCxlLHRoaXMuX2NvbXByZXNzLG4sc10pOnRoaXMuZGlzcGF0Y2goZSx0aGlzLl9jb21wcmVzcyxuLHMpfWVsc2UgdGhpcy5zZW5kRnJhbWUobC5mcmFtZShlLHtmaW46dC5maW4scnN2MTohMSxvcGNvZGU6aSxtYXNrOnQubWFzayxyZWFkT25seTpvfSkscyl9ZGlzcGF0Y2goZSx0LHMsaSl7aWYoIXQpcmV0dXJuIHZvaWQgdGhpcy5zZW5kRnJhbWUobC5mcmFtZShlLHMpLGkpO2NvbnN0IHI9dGhpcy5fZXh0ZW5zaW9uc1tuLmV4dGVuc2lvbk5hbWVdO3RoaXMuX2RlZmxhdGluZz0hMCxyLmNvbXByZXNzKGUscy5maW4sKGUsdCk9PntzLnJlYWRPbmx5PSExLHRoaXMuc2VuZEZyYW1lKGwuZnJhbWUodCxzKSxpKSx0aGlzLl9kZWZsYXRpbmc9ITEsdGhpcy5kZXF1ZXVlKCl9KX1kZXF1ZXVlKCl7Zm9yKDshdGhpcy5fZGVmbGF0aW5nJiZ0aGlzLl9xdWV1ZS5sZW5ndGg7KXtjb25zdCBlPXRoaXMuX3F1ZXVlLnNoaWZ0KCk7dGhpcy5fYnVmZmVyZWRCeXRlcy09ZVsxXS5sZW5ndGgsZVswXS5hcHBseSh0aGlzLGUuc2xpY2UoMSkpfX1lbnF1ZXVlKGUpe3RoaXMuX2J1ZmZlcmVkQnl0ZXMrPWVbMV0ubGVuZ3RoLHRoaXMuX3F1ZXVlLnB1c2goZSl9c2VuZEZyYW1lKGUsdCl7Mj09PWUubGVuZ3RoPyh0aGlzLl9zb2NrZXQud3JpdGUoZVswXSksdGhpcy5fc29ja2V0LndyaXRlKGVbMV0sdCkpOnRoaXMuX3NvY2tldC53cml0ZShlWzBdLHQpfX1mdW5jdGlvbiB1KGUpe2NvbnN0IHQ9Yy5mcm9tKGUuYnVmZmVyKTtyZXR1cm4gZS5ieXRlTGVuZ3RoIT09ZS5idWZmZXIuYnl0ZUxlbmd0aD90LnNsaWNlKGUuYnl0ZU9mZnNldCxlLmJ5dGVPZmZzZXQrZS5ieXRlTGVuZ3RoKTp0fWUuZXhwb3J0cz1sfSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHM9MDtzPHQubGVuZ3RoO3MrKyl7dmFyIGk9dFtzXTtpLmVudW1lcmFibGU9aS5lbnVtZXJhYmxlfHwhMSxpLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLGkua2V5LGkpfX1yZXR1cm4gZnVuY3Rpb24odCxzLGkpe3JldHVybiBzJiZlKHQucHJvdG90eXBlLHMpLGkmJmUodCxpKSx0fX0oKTt0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0LHMpe3JldHVybntuYW1lOiJWZXJ0eFByb3RvU3R1YiIsaW5zdGFuY2U6bmV3IG4oZSx0LHMpfX07dmFyIHI9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntkZWZhdWx0OmV9fShzKDE3KSk7dmFyIG49ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQscyxpKXt2YXIgcj10aGlzO2lmKGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksIXQpdGhyb3cgbmV3IEVycm9yKCJUaGUgcnVudGltZVByb3RvU3R1YlVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIiKTtpZighcyl0aHJvdyBuZXcgRXJyb3IoIlRoZSBidXMgaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7aWYoIWkpdGhyb3cgbmV3IEVycm9yKCJUaGUgY29uZmlnIGlzIGEgbmVlZGVkIHBhcmFtZXRlciIpO2lmKCFpLnVybCl0aHJvdyBuZXcgRXJyb3IoIlRoZSBjb25maWcudXJsIGlzIGEgbmVlZGVkIHBhcmFtZXRlciIpO2lmKCFpLnJ1bnRpbWVVUkwpdGhyb3cgbmV3IEVycm9yKCJUaGUgY29uZmlnLnJ1bnRpbWVVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7dmFyIG49dGhpczt0aGlzLl9pZD0wLHRoaXMuX2NvbnRpbnVvdXNPcGVuPSEwLHRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkw9dCx0aGlzLl9idXM9cyx0aGlzLl9jb25maWc9aSx0aGlzLl9ydW50aW1lU2Vzc2lvblVSTD1pLnJ1bnRpbWVVUkwsdGhpcy5fcmVPcGVuPSExLHMuYWRkTGlzdGVuZXIoIioiLGZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCJbVmVydHhQcm90b1N0dWJdIG91dGdvaW5nIG1lc3NhZ2U6ICIsZSksbi5fb3BlbihmdW5jdGlvbigpe24uX2ZpbHRlcihlKSYmKGUuYm9keXx8KGUuYm9keT17fSksZS5ib2R5LnZpYT1yLl9ydW50aW1lUHJvdG9TdHViVVJMLGNvbnNvbGUubG9nKCJbVmVydHhQcm90b1N0dWI6IFByb3RvU3R1YiAtPiBNTl0iLGUpLG4uX3NvY2suc2VuZChKU09OLnN0cmluZ2lmeShlKSkpfSl9KSxuLl9zZW5kU3RhdHVzKCJjcmVhdGVkIil9cmV0dXJuIGkoZSxbe2tleToiY29ubmVjdCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9jb250aW51b3VzT3Blbj0hMCx0aGlzLl9vcGVuKGZ1bmN0aW9uKCl7fSl9fSx7a2V5OiJkaXNjb25uZWN0Iix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2NvbnRpbnVvdXNPcGVuPSExLHRoaXMuX3NvY2smJnRoaXMuX3NlbmRDbG9zZSgpfX0se2tleToiX3NlbmRPcGVuIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuX3NlbmRTdGF0dXMoImluLXByb2dyZXNzIiksdC5faWQrKzt2YXIgcz17aWQ6dC5faWQsdHlwZToib3BlbiIsZnJvbTp0Ll9ydW50aW1lU2Vzc2lvblVSTCx0bzoibW46L3Nlc3Npb24ifTt0Ll9yZU9wZW4mJihzLnR5cGU9InJlLW9wZW4iKTt2YXIgaT0hMTt0Ll9zZXNzaW9uQ2FsbGJhY2s9ZnVuY3Rpb24ocil7InJlc3BvbnNlIj09PXIudHlwZSZyLmlkPT09cy5pZCYmKGk9ITAsMjAwPT09ci5ib2R5LmNvZGU/KHIuYm9keS5ydW50aW1lVG9rZW4mJih0Ll9yZU9wZW49ITAsdC5fcnVudGltZVNlc3Npb25VUkw9dC5fY29uZmlnLnJ1bnRpbWVVUkwrIi8iK3IuYm9keS5ydW50aW1lVG9rZW4pLHQuX3NlbmRTdGF0dXMoImxpdmUiKSxlKCkpOnQuX3NlbmRTdGF0dXMoImZhaWxlZCIsci5ib2R5LmRlc2MpKX0sdC5fc29jay5zZW5kKEpTT04uc3RyaW5naWZ5KHMpKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aXx8dC5fc2VuZFN0YXR1cygiZGlzY29ubmVjdGVkIiwiVGltZW91dCBmcm9tIG1uOi9zZXNzaW9uIil9LDNlMyl9fSx7a2V5OiJfc2VuZENsb3NlIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2lkKys7dmFyIGU9e2lkOnRoaXMuX2lkLHR5cGU6ImNsb3NlIixmcm9tOnRoaXMuX3J1bnRpbWVTZXNzaW9uVVJMLHRvOiJtbjovc2Vzc2lvbiJ9O3RoaXMuX3JlT3Blbj0hMSx0aGlzLl9ydW50aW1lU2Vzc2lvblVSTD10aGlzLl9jb25maWcuX3J1bnRpbWVVUkwsdGhpcy5fc29jay5zZW5kKEpTT04uc3RyaW5naWZ5KGUpKX19LHtrZXk6Il9zZW5kU3RhdHVzIix2YWx1ZTpmdW5jdGlvbihlLHQpe2NvbnNvbGUubG9nKCJbVmVydHhQcm90b3N0dWIgc3RhdHVzIGNoYW5nZWRdIHRvICIsZSksdGhpcy5fc3RhdGU9ZTt2YXIgcz17dHlwZToidXBkYXRlIixmcm9tOnRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkwsdG86dGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCsiL3N0YXR1cyIsYm9keTp7dmFsdWU6ZX19O3QmJihzLmJvZHkuZGVzYz10KSx0aGlzLl9idXMucG9zdE1lc3NhZ2Uocyl9fSx7a2V5OiJfd2FpdFJlYWR5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzOzE9PT10Ll9zb2NrLnJlYWR5U3RhdGU/ZSgpOnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0Ll93YWl0UmVhZHkoZSl9KX19LHtrZXk6Il9maWx0ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiFlLmJvZHl8fGUuYm9keS52aWEhPT10aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMfX0se2tleToiX2RlbGl2ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe2UuYm9keXx8KGUuYm9keT17fSksZS5ib2R5LnZpYT10aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMLGNvbnNvbGUubG9nKCJbVmVydHhQcm90b1N0dWI6IE1OIC0+IFByb3RvU3R1Yl0iLGUpLHRoaXMuX2J1cy5wb3N0TWVzc2FnZShlKX19LHtrZXk6Il9vcGVuIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuX2NvbnRpbnVvdXNPcGVuJiYodC5fc29jaz90Ll93YWl0UmVhZHkoZSk6KCJ3cyI9PT10Ll9jb25maWcudXJsLnN1YnN0cmluZygwLDIpP3QuX3NvY2s9bmV3IHIuZGVmYXVsdCh0Ll9jb25maWcudXJsKTp0Ll9zb2NrPW5ldyBTb2NrSlModC5fY29uZmlnLnVybCksdC5fc29jay5vbm9wZW49ZnVuY3Rpb24oKXt0Ll9zZW5kT3BlbihmdW5jdGlvbigpe2UoKX0pfSx0Ll9zb2NrLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgcz1KU09OLnBhcnNlKGUuZGF0YSk7Y29uc29sZS5sb2coIltWZXJ0eFByb3RvU3R1YjogTU4gLT4gU09DS0VUIE9OIE1FU1NBR0VdIixzKSwibW46L3Nlc3Npb24iPT09cy5mcm9tP3QuX3Nlc3Npb25DYWxsYmFjayYmdC5fc2Vzc2lvbkNhbGxiYWNrKHMpOnQuX2ZpbHRlcihzKSYmdC5fZGVsaXZlcihzKX0sdC5fc29jay5vbmNsb3NlPWZ1bmN0aW9uKGUpe3ZhciBzPXZvaWQgMDtzPTFlMz09PWUuY29kZT8iTm9ybWFsIGNsb3N1cmUsIG1lYW5pbmcgdGhhdCB0aGUgcHVycG9zZSBmb3Igd2hpY2ggdGhlIGNvbm5lY3Rpb24gd2FzIGVzdGFibGlzaGVkIGhhcyBiZWVuIGZ1bGZpbGxlZC4iOjEwMDE9PT1lLmNvZGU/IkFuIGVuZHBvaW50IGlzICdnb2luZyBhd2F5Jywgc3VjaCBhcyBhIHNlcnZlciBnb2luZyBkb3duIG9yIGEgYnJvd3NlciBoYXZpbmcgbmF2aWdhdGVkIGF3YXkgZnJvbSBhIHBhZ2UuIjoxMDAyPT09ZS5jb2RlPyJBbiBlbmRwb2ludCBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBkdWUgdG8gYSBwcm90b2NvbCBlcnJvciI6MTAwMz09PWUuY29kZT8iQW4gZW5kcG9pbnQgaXMgdGVybWluYXRpbmcgdGhlIGNvbm5lY3Rpb24gYmVjYXVzZSBpdCBoYXMgcmVjZWl2ZWQgYSB0eXBlIG9mIGRhdGEgaXQgY2Fubm90IGFjY2VwdCAoZS5nLiwgYW4gZW5kcG9pbnQgdGhhdCB1bmRlcnN0YW5kcyBvbmx5IHRleHQgZGF0YSBNQVkgc2VuZCB0aGlzIGlmIGl0IHJlY2VpdmVzIGEgYmluYXJ5IG1lc3NhZ2UpLiI6MTAwND09PWUuY29kZT8iUmVzZXJ2ZWQuIFRoZSBzcGVjaWZpYyBtZWFuaW5nIG1pZ2h0IGJlIGRlZmluZWQgaW4gdGhlIGZ1dHVyZS4iOjEwMDU9PT1lLmNvZGU/Ik5vIHN0YXR1cyBjb2RlIHdhcyBhY3R1YWxseSBwcmVzZW50LiI6MTAwNj09PWUuY29kZT8iVGhlIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCBhYm5vcm1hbGx5LCBlLmcuLCB3aXRob3V0IHNlbmRpbmcgb3IgcmVjZWl2aW5nIGEgQ2xvc2UgY29udHJvbCBmcmFtZSI6MTAwNz09PWUuY29kZT8iQW4gZW5kcG9pbnQgaXMgdGVybWluYXRpbmcgdGhlIGNvbm5lY3Rpb24gYmVjYXVzZSBpdCBoYXMgcmVjZWl2ZWQgZGF0YSB3aXRoaW4gYSBtZXNzYWdlIHRoYXQgd2FzIG5vdCBjb25zaXN0ZW50IHdpdGggdGhlIHR5cGUgb2YgdGhlIG1lc3NhZ2UgKGUuZy4sIG5vbi1VVEYtOCBbaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzYyOV0gZGF0YSB3aXRoaW4gYSB0ZXh0IG1lc3NhZ2UpLiI6MTAwOD09PWUuY29kZT8nQW4gZW5kcG9pbnQgaXMgdGVybWluYXRpbmcgdGhlIGNvbm5lY3Rpb24gYmVjYXVzZSBpdCBoYXMgcmVjZWl2ZWQgYSBtZXNzYWdlIHRoYXQgInZpb2xhdGVzIGl0cyBwb2xpY3kiLiBUaGlzIHJlYXNvbiBpcyBnaXZlbiBlaXRoZXIgaWYgdGhlcmUgaXMgbm8gb3RoZXIgc3V0aWJsZSByZWFzb24sIG9yIGlmIHRoZXJlIGlzIGEgbmVlZCB0byBoaWRlIHNwZWNpZmljIGRldGFpbHMgYWJvdXQgdGhlIHBvbGljeS4nOjEwMDk9PT1lLmNvZGU/IkFuIGVuZHBvaW50IGlzIHRlcm1pbmF0aW5nIHRoZSBjb25uZWN0aW9uIGJlY2F1c2UgaXQgaGFzIHJlY2VpdmVkIGEgbWVzc2FnZSB0aGF0IGlzIHRvbyBiaWcgZm9yIGl0IHRvIHByb2Nlc3MuIjoxMDEwPT09ZS5jb2RlPyJBbiBlbmRwb2ludCAoY2xpZW50KSBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBiZWNhdXNlIGl0IGhhcyBleHBlY3RlZCB0aGUgc2VydmVyIHRvIG5lZ290aWF0ZSBvbmUgb3IgbW9yZSBleHRlbnNpb24sIGJ1dCB0aGUgc2VydmVyIGRpZG4ndCByZXR1cm4gdGhlbSBpbiB0aGUgcmVzcG9uc2UgbWVzc2FnZSBvZiB0aGUgV2ViU29ja2V0IGhhbmRzaGFrZS4gPGJyIC8+IFNwZWNpZmljYWxseSwgdGhlIGV4dGVuc2lvbnMgdGhhdCBhcmUgbmVlZGVkIGFyZTogIitlLnJlYXNvbjoxMDExPT09ZS5jb2RlPyJBIHNlcnZlciBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBiZWNhdXNlIGl0IGVuY291bnRlcmVkIGFuIHVuZXhwZWN0ZWQgY29uZGl0aW9uIHRoYXQgcHJldmVudGVkIGl0IGZyb20gZnVsZmlsbGluZyB0aGUgcmVxdWVzdC4iOjEwMTU9PT1lLmNvZGU/IlRoZSBjb25uZWN0aW9uIHdhcyBjbG9zZWQgZHVlIHRvIGEgZmFpbHVyZSB0byBwZXJmb3JtIGEgVExTIGhhbmRzaGFrZSAoZS5nLiwgdGhlIHNlcnZlciBjZXJ0aWZpY2F0ZSBjYW4ndCBiZSB2ZXJpZmllZCkuIjoiVW5rbm93biByZWFzb24iLGRlbGV0ZSB0Ll9zb2NrLHQuX3NlbmRTdGF0dXMoImRpc2Nvbm5lY3RlZCIscyl9KSl9fSx7a2V5OiJjb25maWciLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb25maWd9fSx7a2V5OiJydW50aW1lU2Vzc2lvbiIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3J1bnRpbWVTZXNzaW9uVVJMfX1dKSxlfSgpfSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiOwovKiEKICogd3M6IGEgbm9kZS5qcyB3ZWJzb2NrZXQgY2xpZW50CiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPgogKiBNSVQgTGljZW5zZWQKICovY29uc3QgaT1zKDUpO2kuU2VydmVyPXMoMzApLGkuUmVjZWl2ZXI9cygxMyksaS5TZW5kZXI9cygxNSksZS5leHBvcnRzPWl9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXJlcXVpcmUoImh0dHBzIil9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXJlcXVpcmUoImJ1ZmZlciIpfSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIGkoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgaSkpcmV0dXJuIG5ldyBpKGUpO2U9ZXx8e30sdGhpcy5jb25jdXJyZW5jeT1lLmNvbmN1cnJlbmN5fHwxLzAsdGhpcy5wZW5kaW5nPTAsdGhpcy5qb2JzPVtdLHRoaXMuY2JzPVtdLHRoaXMuX2RvbmU9ZnVuY3Rpb24oKXt0aGlzLnBlbmRpbmctLSx0aGlzLl9ydW4oKX0uYmluZCh0aGlzKX1bInB1c2giLCJ1bnNoaWZ0Iiwic3BsaWNlIl0uZm9yRWFjaChmdW5jdGlvbihlKXtpLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3ZhciB0PUFycmF5LnByb3RvdHlwZVtlXS5hcHBseSh0aGlzLmpvYnMsYXJndW1lbnRzKTtyZXR1cm4gdGhpcy5fcnVuKCksdH19KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoaS5wcm90b3R5cGUsImxlbmd0aCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBlbmRpbmcrdGhpcy5qb2JzLmxlbmd0aH19KSxpLnByb3RvdHlwZS5fcnVuPWZ1bmN0aW9uKCl7aWYodGhpcy5wZW5kaW5nIT09dGhpcy5jb25jdXJyZW5jeSl7aWYodGhpcy5qb2JzLmxlbmd0aCl7dmFyIGU9dGhpcy5qb2JzLnNoaWZ0KCk7dGhpcy5wZW5kaW5nKyssZSh0aGlzLl9kb25lKSx0aGlzLl9ydW4oKX1pZigwPT09dGhpcy5wZW5kaW5nKWZvcig7MCE9PXRoaXMuY2JzLmxlbmd0aDspe3ZhciB0PXRoaXMuY2JzLnBvcCgpO3Byb2Nlc3MubmV4dFRpY2sodCl9fX0saS5wcm90b3R5cGUub25Eb25lPWZ1bmN0aW9uKGUpeyJmdW5jdGlvbiI9PXR5cGVvZiBlJiYodGhpcy5jYnMucHVzaChlKSx0aGlzLl9ydW4oKSl9LGUuZXhwb3J0cz1pfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yZXF1aXJlKCJ6bGliIil9LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7dHJ5e2UuZXhwb3J0cz1zKDEwKSgiYnVmZmVydXRpbCIpfWNhdGNoKHQpe2UuZXhwb3J0cz1zKDI1KX19LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXJlcXVpcmUoImZzIil9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXJlcXVpcmUoInBhdGgiKX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0IjsKLyohCiAqIGJ1ZmZlcnV0aWw6IFdlYlNvY2tldCBidWZmZXIgdXRpbHMKICogQ29weXJpZ2h0KGMpIDIwMTUgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+CiAqIE1JVCBMaWNlbnNlZAogKi9lLmV4cG9ydHM9e21hc2s6KGUsdCxzLGkscik9Pntmb3IodmFyIG49MDtuPHI7bisrKXNbaStuXT1lW25dXnRbMyZuXX0sdW5tYXNrOihlLHQpPT57Y29uc3Qgcz1lLmxlbmd0aDtmb3IodmFyIGk9MDtpPHM7aSsrKWVbaV1ePXRbMyZpXX19fSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiO2NsYXNzIGl7Y29uc3RydWN0b3IoZSx0KXt0aGlzLnRhcmdldD10LHRoaXMudHlwZT1lfX1jbGFzcyByIGV4dGVuZHMgaXtjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKCJtZXNzYWdlIix0KSx0aGlzLmRhdGE9ZX19Y2xhc3MgbiBleHRlbmRzIGl7Y29uc3RydWN0b3IoZSx0LHMpe3N1cGVyKCJjbG9zZSIscyksdGhpcy53YXNDbGVhbj1zLl9jbG9zZUZyYW1lUmVjZWl2ZWQmJnMuX2Nsb3NlRnJhbWVTZW50LHRoaXMucmVhc29uPXQsdGhpcy5jb2RlPWV9fWNsYXNzIG8gZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKGUpe3N1cGVyKCJvcGVuIixlKX19Y29uc3QgYT17YWRkRXZlbnRMaXN0ZW5lcihlLHQpe2Z1bmN0aW9uIHMoZSl7dC5jYWxsKHRoaXMsbmV3IHIoZSx0aGlzKSl9ZnVuY3Rpb24gaShlLHMpe3QuY2FsbCh0aGlzLG5ldyBuKGUscyx0aGlzKSl9ZnVuY3Rpb24gYShlKXtlLnR5cGU9ImVycm9yIixlLnRhcmdldD10aGlzLHQuY2FsbCh0aGlzLGUpfWZ1bmN0aW9uIGgoKXt0LmNhbGwodGhpcyxuZXcgbyh0aGlzKSl9ImZ1bmN0aW9uIj09dHlwZW9mIHQmJigibWVzc2FnZSI9PT1lPyhzLl9saXN0ZW5lcj10LHRoaXMub24oZSxzKSk6ImNsb3NlIj09PWU/KGkuX2xpc3RlbmVyPXQsdGhpcy5vbihlLGkpKToiZXJyb3IiPT09ZT8oYS5fbGlzdGVuZXI9dCx0aGlzLm9uKGUsYSkpOiJvcGVuIj09PWU/KGguX2xpc3RlbmVyPXQsdGhpcy5vbihlLGgpKTp0aGlzLm9uKGUsdCkpfSxyZW1vdmVFdmVudExpc3RlbmVyKGUsdCl7Y29uc3Qgcz10aGlzLmxpc3RlbmVycyhlKTtmb3IodmFyIGk9MDtpPHMubGVuZ3RoO2krKylzW2ldIT09dCYmc1tpXS5fbGlzdGVuZXIhPT10fHx0aGlzLnJlbW92ZUxpc3RlbmVyKGUsc1tpXSl9fTtlLmV4cG9ydHM9YX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0IjsKLyohCiAqIHdzOiBhIG5vZGUuanMgd2Vic29ja2V0IGNsaWVudAogKiBDb3B5cmlnaHQoYykgMjAxMSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT4KICogTUlUIExpY2Vuc2VkCiAqL3RyeXtjb25zdCB0PXMoMjgpO2UuZXhwb3J0cz0ib2JqZWN0Ij09dHlwZW9mIHQ/dC5WYWxpZGF0aW9uLmlzVmFsaWRVVEY4OnR9Y2F0Y2godCl7ZS5leHBvcnRzPSgoKT0+ITApfX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0Ijt0cnl7ZS5leHBvcnRzPXMoMTApKCJ2YWxpZGF0aW9uIil9Y2F0Y2godCl7ZS5leHBvcnRzPXMoMjkpfX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0IjsKLyohCiAqIFVURi04IHZhbGlkYXRlOiBVVEYtOCB2YWxpZGF0aW9uIGZvciBXZWJTb2NrZXRzLgogKiBDb3B5cmlnaHQoYykgMjAxNSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT4KICogTUlUIExpY2Vuc2VkCiAqL2UuZXhwb3J0cz0oZT0+e2lmKCFCdWZmZXIuaXNCdWZmZXIoZSkpdGhyb3cgbmV3IFR5cGVFcnJvcigiRmlyc3QgYXJndW1lbnQgbmVlZHMgdG8gYmUgYSBidWZmZXIiKTtmb3IodmFyIHQ9ZS5sZW5ndGgscz0wO3M8dDspaWYoZVtzXTwxMjgpcysrO2Vsc2UgaWYoMTkyPT0oMjI0JmVbc10pKXtpZihzKzE9PT10fHwxMjghPSgxOTImZVtzKzFdKXx8MTkyPT0oMjU0JmVbc10pKXJldHVybiExO3MrPTJ9ZWxzZSBpZigyMjQ9PSgyNDAmZVtzXSkpe2lmKHMrMj49dHx8MTI4IT0oMTkyJmVbcysxXSl8fDEyOCE9KDE5MiZlW3MrMl0pfHwyMjQ9PT1lW3NdJiYxMjg9PSgyMjQmZVtzKzFdKXx8MjM3PT09ZVtzXSYmMTYwPT0oMjI0JmVbcysxXSkpcmV0dXJuITE7cys9M31lbHNle2lmKDI0MCE9KDI0OCZlW3NdKSlyZXR1cm4hMTtpZihzKzM+PXR8fDEyOCE9KDE5MiZlW3MrMV0pfHwxMjghPSgxOTImZVtzKzJdKXx8MTI4IT0oMTkyJmVbcyszXSl8fDI0MD09PWVbc10mJjEyOD09KDI0MCZlW3MrMV0pfHwyNDQ9PT1lW3NdJiZlW3MrMV0+MTQzfHxlW3NdPjI0NClyZXR1cm4hMTtzKz00fXJldHVybiEwfSl9LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7Ci8qIQogKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnQKICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+CiAqIE1JVCBMaWNlbnNlZAogKi9jb25zdCBpPXMoMCkscj1zKDYpLG49cygzKSxvPXMoNyksYT1zKDgpLGg9cyg5KSxjPXMoMSksbD1zKDEyKSx1PXMoMiksZj1zKDUpLGQ9aS5CdWZmZXI7ZnVuY3Rpb24gXygpe3RoaXMuZGVzdHJveSgpfWZ1bmN0aW9uIHAoZSx0LHMpe2Uud3JpdGFibGUmJihzPXN8fGEuU1RBVFVTX0NPREVTW3RdLGUud3JpdGUoYEhUVFAvMS4xICR7dH0gJHthLlNUQVRVU19DT0RFU1t0XX1cclxuYCsiQ29ubmVjdGlvbjogY2xvc2VcclxuQ29udGVudC10eXBlOiB0ZXh0L2h0bWxcclxuIitgQ29udGVudC1MZW5ndGg6ICR7ZC5ieXRlTGVuZ3RoKHMpfVxyXG5gKyJcclxuIitzKSksZS5yZW1vdmVMaXN0ZW5lcigiZXJyb3IiLF8pLGUuZGVzdHJveSgpfWUuZXhwb3J0cz1jbGFzcyBleHRlbmRzIHJ7Y29uc3RydWN0b3IoZSx0KXtpZihzdXBlcigpLG51bGw9PShlPU9iamVjdC5hc3NpZ24oe21heFBheWxvYWQ6MTA0ODU3NjAwLHBlck1lc3NhZ2VEZWZsYXRlOiExLGhhbmRsZVByb3RvY29sczpudWxsLGNsaWVudFRyYWNraW5nOiEwLHZlcmlmeUNsaWVudDpudWxsLG5vU2VydmVyOiExLGJhY2tsb2c6bnVsbCxzZXJ2ZXI6bnVsbCxob3N0Om51bGwscGF0aDpudWxsLHBvcnQ6bnVsbH0sZSkpLnBvcnQmJiFlLnNlcnZlciYmIWUubm9TZXJ2ZXIpdGhyb3cgbmV3IFR5cGVFcnJvcigibWlzc2luZyBvciBpbnZhbGlkIG9wdGlvbnMiKTtudWxsIT1lLnBvcnQ/KHRoaXMuX3NlcnZlcj1hLmNyZWF0ZVNlcnZlcigoZSx0KT0+e2NvbnN0IHM9YS5TVEFUVVNfQ09ERVNbNDI2XTt0LndyaXRlSGVhZCg0MjYseyJDb250ZW50LUxlbmd0aCI6cy5sZW5ndGgsIkNvbnRlbnQtVHlwZSI6InRleHQvcGxhaW4ifSksdC5lbmQocyl9KSx0aGlzLl9zZXJ2ZXIubGlzdGVuKGUucG9ydCxlLmhvc3QsZS5iYWNrbG9nLHQpKTplLnNlcnZlciYmKHRoaXMuX3NlcnZlcj1lLnNlcnZlciksdGhpcy5fc2VydmVyJiYodGhpcy5fdWx0cm9uPW5ldyBvKHRoaXMuX3NlcnZlciksdGhpcy5fdWx0cm9uLm9uKCJsaXN0ZW5pbmciLCgpPT50aGlzLmVtaXQoImxpc3RlbmluZyIpKSx0aGlzLl91bHRyb24ub24oImVycm9yIixlPT50aGlzLmVtaXQoImVycm9yIixlKSksdGhpcy5fdWx0cm9uLm9uKCJ1cGdyYWRlIiwoZSx0LHMpPT57dGhpcy5oYW5kbGVVcGdyYWRlKGUsdCxzLHQ9Pnt0aGlzLmVtaXQoImNvbm5lY3Rpb24iLHQsZSl9KX0pKSwhMD09PWUucGVyTWVzc2FnZURlZmxhdGUmJihlLnBlck1lc3NhZ2VEZWZsYXRlPXt9KSxlLmNsaWVudFRyYWNraW5nJiYodGhpcy5jbGllbnRzPW5ldyBTZXQpLHRoaXMub3B0aW9ucz1lfWNsb3NlKGUpe2lmKHRoaXMuY2xpZW50cylmb3IoY29uc3QgZSBvZiB0aGlzLmNsaWVudHMpZS50ZXJtaW5hdGUoKTtjb25zdCB0PXRoaXMuX3NlcnZlcjtpZih0JiYodGhpcy5fdWx0cm9uLmRlc3Ryb3koKSx0aGlzLl91bHRyb249dGhpcy5fc2VydmVyPW51bGwsbnVsbCE9dGhpcy5vcHRpb25zLnBvcnQpKXJldHVybiB0LmNsb3NlKGUpO2UmJmUoKX1zaG91bGRIYW5kbGUoZSl7cmV0dXJuIXRoaXMub3B0aW9ucy5wYXRofHxoLnBhcnNlKGUudXJsKS5wYXRobmFtZT09PXRoaXMub3B0aW9ucy5wYXRofWhhbmRsZVVwZ3JhZGUoZSx0LHMsaSl7dC5vbigiZXJyb3IiLF8pO2NvbnN0IHI9K2UuaGVhZGVyc1sic2VjLXdlYnNvY2tldC12ZXJzaW9uIl0sbj17fTtpZigiR0VUIiE9PWUubWV0aG9kfHwid2Vic29ja2V0IiE9PWUuaGVhZGVycy51cGdyYWRlLnRvTG93ZXJDYXNlKCl8fCFlLmhlYWRlcnNbInNlYy13ZWJzb2NrZXQta2V5Il18fDghPT1yJiYxMyE9PXJ8fCF0aGlzLnNob3VsZEhhbmRsZShlKSlyZXR1cm4gcCh0LDQwMCk7aWYodGhpcy5vcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlKXtjb25zdCBzPW5ldyBjKHRoaXMub3B0aW9ucy5wZXJNZXNzYWdlRGVmbGF0ZSwhMCx0aGlzLm9wdGlvbnMubWF4UGF5bG9hZCk7dHJ5e2NvbnN0IGk9bC5wYXJzZShlLmhlYWRlcnNbInNlYy13ZWJzb2NrZXQtZXh0ZW5zaW9ucyJdKTtpW2MuZXh0ZW5zaW9uTmFtZV0mJihzLmFjY2VwdChpW2MuZXh0ZW5zaW9uTmFtZV0pLG5bYy5leHRlbnNpb25OYW1lXT1zKX1jYXRjaChlKXtyZXR1cm4gcCh0LDQwMCl9fXZhciBvPShlLmhlYWRlcnNbInNlYy13ZWJzb2NrZXQtcHJvdG9jb2wiXXx8IiIpLnNwbGl0KC8sICovKTtpZih0aGlzLm9wdGlvbnMuaGFuZGxlUHJvdG9jb2xzKXtpZighMT09PShvPXRoaXMub3B0aW9ucy5oYW5kbGVQcm90b2NvbHMobyxlKSkpcmV0dXJuIHAodCw0MDEpfWVsc2Ugbz1vWzBdO2lmKHRoaXMub3B0aW9ucy52ZXJpZnlDbGllbnQpe2NvbnN0IGE9e29yaWdpbjplLmhlYWRlcnNbYCR7OD09PXI/InNlYy13ZWJzb2NrZXQtb3JpZ2luIjoib3JpZ2luIn1gXSxzZWN1cmU6ISghZS5jb25uZWN0aW9uLmF1dGhvcml6ZWQmJiFlLmNvbm5lY3Rpb24uZW5jcnlwdGVkKSxyZXE6ZX07aWYoMj09PXRoaXMub3B0aW9ucy52ZXJpZnlDbGllbnQubGVuZ3RoKXJldHVybiB2b2lkIHRoaXMub3B0aW9ucy52ZXJpZnlDbGllbnQoYSwoYSxoLGMpPT57aWYoIWEpcmV0dXJuIHAodCxofHw0MDEsYyk7dGhpcy5jb21wbGV0ZVVwZ3JhZGUobyxuLHIsZSx0LHMsaSl9KTtpZighdGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudChhKSlyZXR1cm4gcCh0LDQwMSl9dGhpcy5jb21wbGV0ZVVwZ3JhZGUobyxuLHIsZSx0LHMsaSl9Y29tcGxldGVVcGdyYWRlKGUsdCxzLGkscixvLGEpe2lmKCFyLnJlYWRhYmxlfHwhci53cml0YWJsZSlyZXR1cm4gci5kZXN0cm95KCk7Y29uc3QgaD1bIkhUVFAvMS4xIDEwMSBTd2l0Y2hpbmcgUHJvdG9jb2xzIiwiVXBncmFkZTogd2Vic29ja2V0IiwiQ29ubmVjdGlvbjogVXBncmFkZSIsYFNlYy1XZWJTb2NrZXQtQWNjZXB0OiAke24uY3JlYXRlSGFzaCgic2hhMSIpLnVwZGF0ZShpLmhlYWRlcnNbInNlYy13ZWJzb2NrZXQta2V5Il0rdS5HVUlELCJiaW5hcnkiKS5kaWdlc3QoImJhc2U2NCIpfWBdO2lmKGUmJmgucHVzaChgU2VjLVdlYlNvY2tldC1Qcm90b2NvbDogJHtlfWApLHRbYy5leHRlbnNpb25OYW1lXSl7Y29uc3QgZT10W2MuZXh0ZW5zaW9uTmFtZV0ucGFyYW1zLHM9bC5mb3JtYXQoe1tjLmV4dGVuc2lvbk5hbWVdOltlXX0pO2gucHVzaChgU2VjLVdlYlNvY2tldC1FeHRlbnNpb25zOiAke3N9YCl9dGhpcy5lbWl0KCJoZWFkZXJzIixoLGkpLHIud3JpdGUoaC5jb25jYXQoIlxyXG4iKS5qb2luKCJcclxuIikpO2NvbnN0IGQ9bmV3IGYoW3Isb10sbnVsbCx7bWF4UGF5bG9hZDp0aGlzLm9wdGlvbnMubWF4UGF5bG9hZCxwcm90b2NvbFZlcnNpb246cyxleHRlbnNpb25zOnQscHJvdG9jb2w6ZX0pO3RoaXMuY2xpZW50cyYmKHRoaXMuY2xpZW50cy5hZGQoZCksZC5vbigiY2xvc2UiLCgpPT50aGlzLmNsaWVudHMuZGVsZXRlKGQpKSksci5yZW1vdmVMaXN0ZW5lcigiZXJyb3IiLF8pLGEoZCl9fX1dKX0pOw==",
      "sourceCodeClassname": "default",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "23.00",
    "description": "Protostub to exchange messages with vertx",
    "language": "javascript",
    "cguid": "41338ea57960781be06f8cf3c78cbf70f",
    "type": "ProtoStubs",
    "constraints": {
      "node": true
    },
    "objectName": "default",
    "configuration": {
      "url": "wss://msg-node.hysmart.rethink.ptinovacao.pt/localhost/ws"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "VertxAppProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "sharing-cities-dsm",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "23.90",
    "description": "Protostub to exchange messages with vertx",
    "language": "javascript",
    "cguid": "46c0d57ffd1f5fe7888e6ba971acb4e79",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "sharing-cities-dsm",
    "configuration": {
      "url": "https://vertx-runtime.hysmart.rethink.ptinovacao.pt/eventbus",
      "vertxbus_ping_interval": 10000,
      "host": "sharing-cities-dsm",
      "domain": "hybroker.rethink.ptinovacao.pt",
      "streams": [],
      "publicWallets": {
        "identity": {
          "userProfile": {
            "guid": "user-guid://public-wallets",
            "userURL": "user://public-wallets"
          }
        }
      },
      "timeoutValue": 500
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}