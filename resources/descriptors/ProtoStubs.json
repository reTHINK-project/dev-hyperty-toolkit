{
  "GoogleProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "fitness.google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.20",
    "description": "Protostub of Google",
    "language": "javascript",
    "cguid": "406d1b76ae0394c37d6e7d0037a91cb7c",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "fitness.google.com",
    "configuration": {
      "sessions_query_interval": 300000,
      "domain": "localhost"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "sip.rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.20",
    "description": "Description of IMSIWProtoStub",
    "language": "javascript",
    "cguid": "42deef6d806460071a3a260ea4b6291ae",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "sip.rethink-project.eu",
    "configuration": {
      "credential_server": "https://ims.rethink-project.eu/credential",
      "domain": "hysmart.rethink.ptinovacao.pt"
    },
    "messageSchemas": "",
    "dataObjects": [
      "hyperty-catalogue://catalogue.hysmart.rethink.ptinovacao.pt/.well-known/dataschema/Connection"
    ],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "P2PHandlerProtoStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9IiIsbihuLnM9MSl9KFtmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPSEwLGk9e2Rpc2FibGVMb2c6ZnVuY3Rpb24oZSl7cmV0dXJuImJvb2xlYW4iIT10eXBlb2YgZT9uZXcgRXJyb3IoIkFyZ3VtZW50IHR5cGU6ICIrdHlwZW9mIGUrIi4gUGxlYXNlIHVzZSBhIGJvb2xlYW4uIik6KHI9ZSxlPyJhZGFwdGVyLmpzIGxvZ2dpbmcgZGlzYWJsZWQiOiJhZGFwdGVyLmpzIGxvZ2dpbmcgZW5hYmxlZCIpfSxsb2c6ZnVuY3Rpb24oKXtpZigib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyl7aWYocilyZXR1cm47InVuZGVmaW5lZCIhPXR5cGVvZiBjb25zb2xlJiYiZnVuY3Rpb24iPT10eXBlb2YgY29uc29sZS5sb2cmJmNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsYXJndW1lbnRzKX19LGV4dHJhY3RWZXJzaW9uOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLm1hdGNoKHQpO3JldHVybiByJiZyLmxlbmd0aD49biYmcGFyc2VJbnQocltuXSwxMCl9LGRldGVjdEJyb3dzZXI6ZnVuY3Rpb24oKXt2YXIgZT17YnJvd3NlcjpudWxsLHZlcnNpb246bnVsbH07aWYoInVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cubmF2aWdhdG9yKXJldHVybiBlLmJyb3dzZXI9Ik5vdCBhIGJyb3dzZXIuIixlO2lmKG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWEpZS5icm93c2VyPSJmaXJlZm94IixlLnZlcnNpb249dGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LC9GaXJlZm94XC8oXGQrKVwuLywxKTtlbHNlIGlmKG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEpaWYod2luZG93LndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uKWUuYnJvd3Nlcj0iY2hyb21lIixlLnZlcnNpb249dGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LC9DaHJvbShlfGl1bSlcLyhcZCspXC4vLDIpO2Vsc2V7aWYoIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1ZlcnNpb25cLyhcZCspLihcZCspLykpcmV0dXJuIGUuYnJvd3Nlcj0iVW5zdXBwb3J0ZWQgd2Via2l0LWJhc2VkIGJyb3dzZXIgd2l0aCBHVU0gc3VwcG9ydCBidXQgbm8gV2ViUlRDIHN1cHBvcnQuIixlO2UuYnJvd3Nlcj0ic2FmYXJpIixlLnZlcnNpb249dGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LC9BcHBsZVdlYktpdFwvKFxkKylcLi8sMSl9ZWxzZSBpZihuYXZpZ2F0b3IubWVkaWFEZXZpY2VzJiZuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlXC8oXGQrKS4oXGQrKSQvKSllLmJyb3dzZXI9ImVkZ2UiLGUudmVyc2lvbj10aGlzLmV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsL0VkZ2VcLyhcZCspLihcZCspJC8sMik7ZWxzZXtpZighbmF2aWdhdG9yLm1lZGlhRGV2aWNlc3x8IW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XC8oXGQrKVwuLykpcmV0dXJuIGUuYnJvd3Nlcj0iTm90IGEgc3VwcG9ydGVkIGJyb3dzZXIuIixlO2UuYnJvd3Nlcj0ic2FmYXJpIixlLnZlcnNpb249dGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LC9BcHBsZVdlYktpdFwvKFxkKylcLi8sMSl9cmV0dXJuIGV9LHNoaW1DcmVhdGVPYmplY3RVUkw6ZnVuY3Rpb24oKXtpZigib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmd2luZG93LkhUTUxNZWRpYUVsZW1lbnQmJiJzcmNPYmplY3QiaW4gd2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlKXt2YXIgZT1VUkwuY3JlYXRlT2JqZWN0VVJMLmJpbmQoVVJMKSx0PVVSTC5yZXZva2VPYmplY3RVUkwuYmluZChVUkwpLG49bmV3IE1hcCxyPTA7VVJMLmNyZWF0ZU9iamVjdFVSTD1mdW5jdGlvbih0KXtpZigiZ2V0VHJhY2tzImluIHQpe3ZhciBpPSJwb2x5YmxvYjoiKyArK3I7cmV0dXJuIG4uc2V0KGksdCksY29uc29sZS5sb2coIlVSTC5jcmVhdGVPYmplY3RVUkwoc3RyZWFtKSBpcyBkZXByZWNhdGVkISBVc2UgZWxlbS5zcmNPYmplY3QgPSBzdHJlYW0gaW5zdGVhZCEiKSxpfXJldHVybiBlKHQpfSxVUkwucmV2b2tlT2JqZWN0VVJMPWZ1bmN0aW9uKGUpe3QoZSksbi5kZWxldGUoZSl9O3ZhciBpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCJzcmMiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCJzcmMiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5nZXQuYXBwbHkodGhpcyl9LHNldDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zcmNPYmplY3Q9bi5nZXQoZSl8fG51bGwsaS5zZXQuYXBwbHkodGhpcyxbZV0pfX0pO3ZhciBhPUhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZTtIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oKXtyZXR1cm4gMj09PWFyZ3VtZW50cy5sZW5ndGgmJiJzcmMiPT09KCIiK2FyZ3VtZW50c1swXSkudG9Mb3dlckNhc2UoKSYmKHRoaXMuc3JjT2JqZWN0PW4uZ2V0KGFyZ3VtZW50c1sxXSl8fG51bGwpLGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19fTtlLmV4cG9ydHM9e2xvZzppLmxvZyxkaXNhYmxlTG9nOmkuZGlzYWJsZUxvZyxicm93c2VyRGV0YWlsczppLmRldGVjdEJyb3dzZXIoKSxleHRyYWN0VmVyc2lvbjppLmV4dHJhY3RWZXJzaW9uLHNoaW1DcmVhdGVPYmplY3RVUkw6aS5zaGltQ3JlYXRlT2JqZWN0VVJMLGRldGVjdEJyb3dzZXI6aS5kZXRlY3RCcm93c2VyLmJpbmQoaSl9fSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJue25hbWU6IlAyUEhhbmRsZXJTdHViIixpbnN0YW5jZTpuZXcgYShlLHQsbixyKX19O3ZhciByPW4oMik7ZnVuY3Rpb24gaShlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXZhciBhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scixpKXt2YXIgYT10aGlzO2lmKGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksIXQpdGhyb3cgbmV3IEVycm9yKCJUaGUgcnVudGltZVByb3RvU3R1YlVSTCBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlciIpO2lmKCFuKXRocm93IG5ldyBFcnJvcigiVGhlIGJ1cyBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlciIpO2lmKCFyKXRocm93IG5ldyBFcnJvcigiVGhlIGNvbmZpZ3VyYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXIiKTtjb25zb2xlLmxvZygiW1AyUEhhbmRsZXJQcm90b1N0dWIuY29uc3RydWN0b3JdIGNvbmZpZyBpczogIixyKSx0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMPXQsdGhpcy5fcnVudGltZVVSTD1yLnJ1bnRpbWVVUkwsdGhpcy5fY29uZmlndXJhdGlvbj1yLHRoaXMuX2J1cz1uLHRoaXMuX2J1cy5hZGRMaXN0ZW5lcigiKiIsZnVuY3Rpb24oZSl7YS5fc2VuZENoYW5uZWxNc2coZSl9KSx0aGlzLl9jb25uZWN0aW9uQ29udHJvbGxlcnM9e30sdGhpcy5fc3luY2hlcj1pLmNyZWF0ZVN5bmNoZXIodCxuLHIpLHRoaXMuX3N5bmNoZXIub25Ob3RpZmljYXRpb24oZnVuY3Rpb24oZSl7c3dpdGNoKGNvbnNvbGUubG9nKCIrW1AyUEhhbmRsZXJQcm90b1N0dWJdIE9uIFN5bmNoZXIgTm90aWZpY2F0aW9uICIsZSksZS5hY2soMjAwKSxlLnR5cGUpe2Nhc2UiY3JlYXRlIjphLl9zZW5kU3RhdHVzKCJjcmVhdGUiLHZvaWQgMCxlLnZhbHVlLnJ1bnRpbWUpLGEuX2NyZWF0ZUNvbm5lY3Rpb25Db250cm9sbGVyKGUpLnRoZW4oZnVuY3Rpb24odCl7YS5fY29ubmVjdGlvbkNvbnRyb2xsZXJzW2UudmFsdWUucnVudGltZV09dCx0Lm9uU3RhdHVzVXBkYXRlKGZ1bmN0aW9uKG4scixpKXthLl9zZW5kU3RhdHVzKG4scixpKSwiZGlzY29ubmVjdGVkIj09PW4mJih0LmNsZWFudXAoKSxkZWxldGUgYS5fY29ubmVjdGlvbkNvbnRyb2xsZXJzW2UudmFsdWUucnVudGltZV0pfSksdC5vbk1lc3NhZ2UoZnVuY3Rpb24oZSl7YS5fZGVsaXZlcihlKX0pfSk7YnJlYWs7Y2FzZSJkZWxldGUiOmNvbnNvbGUubG9nKCIrW1AyUEhhbmRsZXJTdHViXSBkZWxldGluZyBjb25uZWN0aW9uIGhhbmRsZXIgZm9yICIrZS5mcm9tKTt2YXIgdD1hLl9jb25uZWN0aW9uQ29udHJvbGxlcnNbZS5mcm9tXTt0JiYodC5jbGVhbnVwKCksZGVsZXRlIGEuX2Nvbm5lY3Rpb25Db250cm9sbGVyc1tlLmZyb21dKX19KX1yZXR1cm4gZnVuY3Rpb24oZSx0LG4pe3QmJmkoZS5wcm90b3R5cGUsdCksbiYmaShlLG4pfShlLFt7a2V5OiJkaXNjb25uZWN0Iix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7T2JqZWN0LmtleXModGhpcy5fY29ubmVjdGlvbkNvbnRyb2xsZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuX2NvbnRyb2xsZXJzW3RdLmNsZWFudXAoKSxkZWxldGUgZS5fY29udHJvbGxlcnNbdF19KX19LHtrZXk6Il9jcmVhdGVDb25uZWN0aW9uQ29udHJvbGxlciIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixpKXt2YXIgYT1uZXcgci5hKHQuX3J1bnRpbWVQcm90b1N0dWJVUkwsdC5fc3luY2hlcix0Ll9jb25maWd1cmF0aW9uLCExKTthLm9ic2VydmUoZSkudGhlbihmdW5jdGlvbigpe2NvbnNvbGUubG9nKCIrW1AyUEhhbmRsZXJTdHViXSBvYnNlcnZlciBzZXR1cCBzdWNjZXNzZnVsIiksYS5yZXBvcnQoZS5mcm9tLHQuX3J1bnRpbWVVUkwpLnRoZW4oZnVuY3Rpb24oKXtjb25zb2xlLmxvZygiK1tQMlBIYW5kbGVyU3R1Yl0gcmVwb3J0ZXIgc2V0dXAgc3VjY2Vzc2Z1bCIpLHQuX3NlbmRTdGF0dXMoImluLXByb2dyZXNzIix2b2lkIDAsZS52YWx1ZS5ydW50aW1lKSxuKGEpfSl9KX0pfX0se2tleToiX3NlbmRDaGFubmVsTXNnIix2YWx1ZTpmdW5jdGlvbihlKXtpZih0aGlzLl9maWx0ZXIoZSkpe3ZhciB0PXRoaXMuX2Nvbm5lY3Rpb25Db250cm9sbGVyc1tlLmJvZHkucGVlcl07dCYmdC5zZW5kTWVzc2FnZShlKX19fSx7a2V5OiJfc2VuZFN0YXR1cyIsdmFsdWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXt0eXBlOiJ1cGRhdGUiLGZyb206dGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCx0bzp0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMKyIvc3RhdHVzIixib2R5Ont2YWx1ZTplfX07biYmKHIuYm9keS5yZXNvdXJjZT1uKSx0JiYoci5ib2R5LmRlc2M9dCksY29uc29sZS5sb2coIitbUDJQSGFuZGxlclN0dWJdIHNlbmRpbmcgc3RhdHVzIHVwZGF0ZTogIixyKSx0aGlzLl9idXMucG9zdE1lc3NhZ2Uocil9fSx7a2V5OiJfZmlsdGVyIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4hZS5ib2R5fHxlLmJvZHkudmlhIT09dGhpcy5fcnVudGltZVByb3RvU3R1YlVSTH19LHtrZXk6Il9kZWxpdmVyIix2YWx1ZTpmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiK1tQMlBIYW5kbGVyU3R1Yl0gcG9zdGluZyBtZXNzYWdlIHRvIG1zZyBidXM6ICIsZSksZS5ib2R5fHwoZS5ib2R5PXt9KSxlLmJvZHkudmlhPXRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkwsdGhpcy5fYnVzLnBvc3RNZXNzYWdlKGUpfX1dKSxlfSgpfSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oMyksaT0obi5uKHIpLG4oMTMpKSxhPW4oMTQpO2Z1bmN0aW9uIG8oZSl7cmV0dXJuKG89ImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmInN5bWJvbCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmImZ1bmN0aW9uIj09dHlwZW9mIFN5bWJvbCYmZS5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmZSE9PVN5bWJvbC5wcm90b3R5cGU/InN5bWJvbCI6dHlwZW9mIGV9KShlKX1mdW5jdGlvbiBzKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19dmFyIGM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixyLGkpe2lmKGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksIXQpdGhyb3cgbmV3IEVycm9yKCJUaGUgb3duIHVybCAobXlVcmwpIGlzIGEgbmVlZGVkIHBhcmFtZXRlciIpO2lmKCFuKXRocm93IG5ldyBFcnJvcigiVGhlIHN5bmNoZXIgaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7aWYoIXIpdGhyb3cgbmV3IEVycm9yKCJUaGUgY29uZmlndXJhdGlvbiBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIiKTt0aGlzLl9kb21haW49dGhpcy5fZGl2aWRlVVJMKHQpLmRvbWFpbix0aGlzLl9vYmplY3REZXNjVVJMPSJoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4iK3RoaXMuX2RvbWFpbisiLy53ZWxsLWtub3duL2RhdGFzY2hlbWEvQ29ubmVjdGlvbiIsdGhpcy5fbXlVcmw9dCx0aGlzLl9zeW5jaGVyPW4sdGhpcy5fY29uZmlndXJhdGlvbj1yLHRoaXMuX2NhbGxlcj1pLHRoaXMuX2RhdGFPYmplY3RPYnNlcnZlcix0aGlzLl9kYXRhT2JqZWN0UmVwb3J0ZXIsdGhpcy5fcGVlclVybCx0aGlzLl9kYXRhQ2hhbm5lbCx0aGlzLl9vblN0YXR1c1VwZGF0ZSx0aGlzLl9yZW1vdGVSdW50aW1lVVJMLHRoaXMuX3JlY2VpdmVycz17fSx0aGlzLl9zZW5kZXJzPXt9LHRoaXMuX21heFNpemU9MTYzODQsdGhpcy5fdGhyZXNob2xkPTAsdGhpcy5fcGVlckNvbm5lY3Rpb249dGhpcy5fY3JlYXRlUGVlckNvbm5lY3Rpb24oKX1yZXR1cm4gZnVuY3Rpb24oZSx0LG4pe3QmJnMoZS5wcm90b3R5cGUsdCksbiYmcyhlLG4pfShlLFt7a2V5OiJfY3JlYXRlUGVlckNvbm5lY3Rpb24iLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMuX3BlZXJDb25uZWN0aW9uO3JldHVybiB0fHwodD1uZXcgUlRDUGVlckNvbm5lY3Rpb24odGhpcy5fY29uZmlndXJhdGlvbiksY29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiBjcmVhdGVkIFBlZXJDb25uZWN0aW9uIiksdC5vbmRhdGFjaGFubmVsPWZ1bmN0aW9uKHQpe2NvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogb25kYXRhY2hhbm5lbCAtPiByZW1vdGUgc2lkZSBoYXMgY3JlYXRlZCBhIGRhdGFjaGFubmVsIiksZS5fZGF0YUNoYW5uZWw9dC5jaGFubmVsLGUuX2FkZERhdGFDaGFubmVsTGlzdGVuZXJzKCl9LHQub25pY2VjYW5kaWRhdGU9ZnVuY3Rpb24odCl7aWYoY29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiBpY2VjYW5kaWRhdGVldmVudCBvY2N1cmVkOiAiLHQpLHQuY2FuZGlkYXRlKXt2YXIgbj17dHlwZToiY2FuZGlkYXRlIixjYW5kaWRhdGU6dC5jYW5kaWRhdGUuY2FuZGlkYXRlLHNkcE1pZDp0LmNhbmRpZGF0ZS5zZHBNaWQsc2RwTUxpbmVJbmRleDp0LmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4fTtlLl9kYXRhT2JqZWN0UmVwb3J0ZXIuZGF0YS5pY2VDYW5kaWRhdGVzLnB1c2gobil9fSksdH19LHtrZXk6Im9ic2VydmUiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7cmV0dXJuIHRoaXMuX3BlZXJVcmw9ZS5mcm9tLHRoaXMuX3JlbW90ZVJ1bnRpbWVVUkw9ZS52YWx1ZS5ydW50aW1lLG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4scil7dmFyIGk9e3NjaGVtYTp0Ll9vYmplY3REZXNjVVJMLHJlc291cmNlOmUudXJsfTt0Ll9zeW5jaGVyLnN1YnNjcmliZShpKS50aGVuKGZ1bmN0aW9uKGUpe2NvbnNvbGUuaW5mbygiK1tQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIGdvdCBEYXRhIE9iamVjdCBPYnNlcnZlciIsZSksdC5fc2V0dXBPYnNlcnZlcihlKSxuKCl9KS5jYXRjaChmdW5jdGlvbihlKXtjb25zb2xlLmVycm9yKGUpLHIoKX0pfSl9fSx7a2V5OiJyZXBvcnQiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztyZXR1cm4gdGhpcy5fcGVlclVybHx8KHRoaXMuX3BlZXJVcmw9ZSksbmV3IFByb21pc2UoZnVuY3Rpb24oZSxyKXtuLl9wZWVyQ29ubmVjdGlvbnx8KG4uX3BlZXJDb25uZWN0aW9uPW4uX2NyZWF0ZVBlZXJDb25uZWN0aW9uKCkpLG4uX2NhbGxlciYmKGNvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogd2UgYXJlIGluIGNhbGxlciByb2xlIC0tXHgzZSBjcmVhdGVEYXRhQ2hhbm5lbCAuLi4iKSxuLl9kYXRhQ2hhbm5lbD1uLl9wZWVyQ29ubmVjdGlvbi5jcmVhdGVEYXRhQ2hhbm5lbCgiUDJQQ2hhbm5lbCIpLG4uX2RhdGFDaGFubmVsLmJpbmFyeVR5cGU9ImFycmF5YnVmZmVyIixuLl9kYXRhQ2hhbm5lbC5idWZmZXJlZEFtb3VudExvd1RocmVzaG9sZD1uLl90aHJlc2hvbGQsY29uc29sZS5sb2coIlAyUDogZGF0YWNoYW5uZWwgb2JqZWN0IixuLl9kYXRhQ2hhbm5lbCksbi5fYWRkRGF0YUNoYW5uZWxMaXN0ZW5lcnMoKSk7dmFyIGk9e25hbWU6IlAyUENvbm5lY3Rpb24iLHN0YXR1czoiIixvd25lcjpuLl9teVVybCxydW50aW1lVVJMOnQsY29ubmVjdGlvbkRlc2NyaXB0aW9uOnt9LGljZUNhbmRpZGF0ZXM6W119LGE9T2JqZWN0LmFzc2lnbih7cmVzb3VyY2VzOlsiZGF0YSJdfSk7bi5fc3luY2hlci5jcmVhdGUobi5fb2JqZWN0RGVzY1VSTCxbbi5fcGVlclVybF0saSwhMSwhMSwicDJwIGNvbm5lY3Rpb24iLHt9LGEpLnRoZW4oZnVuY3Rpb24odCl7Y29uc29sZS5pbmZvKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBDcmVhdGVkIFdlYlJUQyBPYmplY3QgUmVwb3J0ZXIiLHQpLG4uX2RhdGFPYmplY3RSZXBvcnRlcj10LG4uX2RhdGFPYmplY3RSZXBvcnRlci5vblN1YnNjcmlwdGlvbihmdW5jdGlvbihlKXtlLmFjY2VwdCgpfSk7KG4uX2NhbGxlcj9uLl9wZWVyQ29ubmVjdGlvbi5jcmVhdGVPZmZlcih7b2ZmZXJUb1JlY2VpdmVBdWRpbzohMSxvZmZlclRvUmVjZWl2ZVZpZGVvOiExfSk6bi5fcGVlckNvbm5lY3Rpb24uY3JlYXRlQW5zd2VyKCkpLnRoZW4oZnVuY3Rpb24odCl7Y29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIFNEUCBjcmVhdGVkIix0KSxuLl9wZWVyQ29ubmVjdGlvbi5zZXRMb2NhbERlc2NyaXB0aW9uKG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24odCksZnVuY3Rpb24oKXtjb25zb2xlLmluZm8oIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIGxvY2FsRGVzY3JpcHRpb24gc2V0IHN1Y2Nlc3NmdWxseSIpLG4uX2RhdGFPYmplY3RSZXBvcnRlci5kYXRhLmNvbm5lY3Rpb25EZXNjcmlwdGlvbi5zZHA9dC5zZHAsbi5fZGF0YU9iamVjdFJlcG9ydGVyLmRhdGEuY29ubmVjdGlvbkRlc2NyaXB0aW9uLnR5cGU9dC50eXBlLGUoKX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3IoInNldHRpbmcgb2YgbG9jYWxEZXNjcmlwdGlvbiBmYWlsZWQ6ICIsZSl9KX0pLmNhdGNoKGZ1bmN0aW9uKGUpe2NvbnNvbGUuZXJyb3IoZSkscihlKX0pfSl9KX19LHtrZXk6Im9uTWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25EYXRhQ2hhbm5lbE1lc3NhZ2U9ZX19LHtrZXk6Im9uU3RhdHVzVXBkYXRlIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vblN0YXR1c1VwZGF0ZT1lfX0se2tleToic2VuZE1lc3NhZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7aWYoY29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIC0tXHgzZSBzdGFydGluZyBzZW5kaW5nIGRhdGEgdG8gIixlLnRvKSwib3BlbiIhPXQuX2RhdGFDaGFubmVsLnJlYWR5U3RhdGUpdGhyb3cgRXJyb3IoIltQMlBTdHViLkNvbm5lY3Rpb25Db250cm9sbGVyLnNlbmRNZXNzYWdlXSBkYXRhIGNoYW5uZWwgaXMgbm90IG9wZW5lZC4gZHJvcGluZyBtZXNzYWdlOiAiLGUpO3ZhciBuPW5ldyBhLmEoZSx0Ll9kYXRhQ2hhbm5lbCkscj1lLmZyb20rZS50bytlLmlkO3QuX3NlbmRlcnNbcl09bixuLnNlbmREYXRhKCksbi5vblByb2dyZXNzKGZ1bmN0aW9uKGUpe2NvbnNvbGUuZGVidWcoIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIHNlbmRpbmcgcHJvZ3Jlc3MgIixlKX0pLG4ub25TZW50KGZ1bmN0aW9uKCl7Y29uc29sZS5kZWJ1ZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gZGF0YSB3YXMgc2VudCB0bzoiLGUudG8pLGRlbGV0ZSB0Ll9zZW5kZXJzW3JdfSl9fSx7a2V5OiJjbGVhbnVwIix2YWx1ZTpmdW5jdGlvbigpe2RlbGV0ZSB0aGlzLl9kYXRhT2JqZWN0UmVwb3J0ZXIsZGVsZXRlIHRoaXMuX2RhdGFPYmplY3RPYnNlcnZlcix0aGlzLl9kYXRhQ2hhbm5lbCYmdGhpcy5fZGF0YUNoYW5uZWwuY2xvc2UoKSx0aGlzLl9wZWVyQ29ubmVjdGlvbiYmdGhpcy5fcGVlckNvbm5lY3Rpb24uY2xvc2UoKSx0aGlzLl9kYXRhQ2hhbm5lbD1udWxsLHRoaXMuX3BlZXJDb25uZWN0aW9uPW51bGx9fSx7a2V5OiJfYWRkRGF0YUNoYW5uZWxMaXN0ZW5lcnMiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl9kYXRhQ2hhbm5lbC5vbm9wZW49ZnVuY3Rpb24oKXtlLl9vbkRhdGFDaGFubmVsT3BlbigpfSx0aGlzLl9kYXRhQ2hhbm5lbC5vbmVycm9yPWZ1bmN0aW9uKHQpe2UuX29uRGF0YUNoYW5uZWxFcnJvcih0KX0sdGhpcy5fZGF0YUNoYW5uZWwub25tZXNzYWdlPWZ1bmN0aW9uKHQpe3ZhciBuPWUscj10LmRhdGE7Im9iamVjdCIhPW8ocik/bi5fb25UZXh0TWVzc2FnZShyKTpuLl9vbkJpbmFyeU1lc3NhZ2Uocil9LHRoaXMuX2RhdGFDaGFubmVsLm9uY2xvc2U9ZnVuY3Rpb24oKXtlLl9vbkRhdGFDaGFubmVsQ2xvc2UoKX19fSx7a2V5OiJfb25UZXh0TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPUpTT04ucGFyc2UoZSk7aWYoIW4udXVpZCl0aHJvdyBFcnJvcigiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlci5vbm1lc3NhZ2VdIG1lc3NhZ2UgaXMgaW52YWxpZCIsbik7aWYobi5kYXRhLnRleHRNZXNzYWdlLmhhc093blByb3BlcnR5KCJ0byIpJiZuLmRhdGEudGV4dE1lc3NhZ2UudG89PT10Ll9teVVybCl0Ll9vbk15TWVzc2FnZShuLmRhdGEudGV4dE1lc3NhZ2UpO2Vsc2UgaWYodC5fcmVjZWl2ZXJzW24udXVpZF0pdC5fcmVjZWl2ZXJzW24udXVpZF0ucmVjZWl2ZVRleHQobik7ZWxzZXtpZighbi5kYXRhfHwhbi5kYXRhLnRleHRNZXNzYWdlfHwhbi5kYXRhLnRleHRNZXNzYWdlLmZyb20pdGhyb3cgRXJyb3IoIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXIub25tZXNzYWdlXSBpbml0aWFsIHBhY2tldCBpcyBpbnZhbGlkIixuKTtpZihjb25zb2xlLmRlYnVnKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSA8LS0gaW5jb21pbmcgbXNnIDogIixuKSwwPT09bi5kYXRhLmRhdGFTaXplKXt2YXIgcj1uLmRhdGEudGV4dE1lc3NhZ2U7dGhpcy5fb25EYXRhQ2hhbm5lbE1lc3NhZ2Uocil9ZWxzZXt2YXIgYT1uZXcgaS5hKG4uZGF0YSk7YS5vblJlY2VpdmVkKGZ1bmN0aW9uKGUscil7Y29uc29sZS5kZWJ1ZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gY29tcGxldGUgbWVzc2FnZSByZWNlaXZlZCBmcm9tOiAiK2UuZnJvbSsiIGxhdGVuY3k6ICIrciksdC5fb25EYXRhQ2hhbm5lbE1lc3NhZ2UoZSksZGVsZXRlIHQuX3JlY2VpdmVyc1tuLnV1aWRdfSksYS5vblByb2dyZXNzKGZ1bmN0aW9uKGUpe3ZhciBuPXtmcm9tOmEuZnJvbSx0bzphLnRvLGlkOmEuaWQsdHlwZTphLnR5cGUsYm9keTp7Y29kZToxODMsZGVzYzoiTWVzc2FnZSByZWNlcHRpb24gaXMgcHJvZ3Jlc3NpbmciLHZhbHVlOmV9fTtjb25zb2xlLmRlYnVnKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBvbnByb2dyZXNzIHNlbmRpbmcgcHJvdmlzaW9uYWwgcmVzcG9uc2U6ICIsbiksdC5fc3luY2hlci5fYnVzLnBvc3RNZXNzYWdlKG4pfSksdC5fcmVjZWl2ZXJzW24udXVpZF09YX19fX0se2tleToiX29uTXlNZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlKXtpZihlLmhhc093blByb3BlcnR5KCJib2R5IikmJmUuYm9keS5oYXNPd25Qcm9wZXJ0eSgicmVzb3VyY2UiKSl7dmFyIHQ9ZS5ib2R5LnJlc291cmNlO3RoaXMuX3NlbmRlcnNbdF0mJiJkZWxldGUiPT09ZS50eXBlJiYoY29uc29sZS5sb2coIltDb25uZWN0aW9uQ29udHJvbGxlci5fb25NeU1lc3NhZ2VdIGNhbmNlbGxpbmc6ICIsdGhpcy5fc2VuZGVyc1t0XSksdGhpcy5fc2VuZGVyc1t0XS5jYW5jZWwsZGVsZXRlIHRoaXMuX3NlbmRlcnNbdF0pfX19LHtrZXk6Il9vbkJpbmFyeU1lc3NhZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDE2QXJyYXkoZS5zbGljZSgwLDI0KSkpO2lmKHRoaXMuX3JlY2VpdmVyc1t0XSl0aGlzLl9yZWNlaXZlcnNbdF0ucmVjZWl2ZUJpbmFyeShlLnNsaWNlKDI0KSk7ZWxzZXt2YXIgbj1PYmplY3Qua2V5cyh0aGlzLl9yZWNlaXZlcnMpO2lmKDEhPT1uLmxlbmd0aCl0aHJvdyBFcnJvcigiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlci5vbkJpbmFyeU1lc3NhZ2VdIGludmFsaWQgYmluYXJ5IHBhY2tldCIsZSk7dmFyIHI9blswXSxpPXtmcm9tOnRoaXMuX3JlY2VpdmVyc1tyXS5mcm9tLHRvOnRoaXMuX3JlY2VpdmVyc1tyXS50byxpZDp0aGlzLl9yZWNlaXZlcnNbcl0uaWQsdHlwZTp0aGlzLl9yZWNlaXZlcnNbcl0udHlwZSxib2R5Ontjb2RlOjUwMCxkZXNjOiJSZWNlcHRpb24gZXJyb3IifX07Y29uc29sZS5lcnJvcigiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlci5vbkJpbmFyeU1lc3NhZ2VdIG1hbGZvcm1lZCBwYWNrZXQ6ICIsZSksdGhpcy5fc3luY2hlci5fYnVzLnBvc3RNZXNzYWdlKGkpLHRoaXMuX2NhbmNlbFNlbnQoaS5mcm9tK2kudG8raS5pZCksZGVsZXRlIHRoaXMuX3JlY2VpdmVyc1tyXX19fSx7a2V5OiJfY2FuY2VsU2VudCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9e2Zyb206dGhpcy5fbXlVcmwsdG86dGhpcy5fcGVlclVybCx0eXBlOiJkZWxldGUiLGJvZHk6e3Jlc291cmNlOmV9fTtjb25zb2xlLmluZm8oIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXIuX2NhbmNlbFNlbnRdIDogIix0KSx0aGlzLnNlbmRNZXNzYWdlKHQpfX0se2tleToiX3NldHVwT2JzZXJ2ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5fZGF0YU9iamVjdE9ic2VydmVyPWU7dmFyIG49dGhpcy5fZGF0YU9iamVjdE9ic2VydmVyLmRhdGE7Y29uc29sZS5pbmZvKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogX3NldHVwT2JzZXJ2ZXIgUGVlciBEYXRhOiAiLG4pLG4uaGFzT3duUHJvcGVydHkoImNvbm5lY3Rpb25EZXNjcmlwdGlvbiIpJiZ0aGlzLl9wcm9jZXNzUGVlckluZm9ybWF0aW9uKG4uY29ubmVjdGlvbkRlc2NyaXB0aW9uKSxuLmhhc093blByb3BlcnR5KCJpY2VDYW5kaWRhdGVzIikmJm4uaWNlQ2FuZGlkYXRlcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogaGFuZGxlT2JzZXJ2ZXJPYmplY3QgZm9yIGljZSIsZSksdC5fcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbihlKX0pLGUub25DaGFuZ2UoIioiLGZ1bmN0aW9uKGUpe2NvbnNvbGUuZGVidWcoIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiBPYnNlcnZlciBvbiBjaGFuZ2UgbWVzc2FnZTogIixlKSxlLmRhdGFbMF0/KGNvbnNvbGUubG9nKCI+PmV2ZW50LmRhdGFbMF0iLGUuZGF0YVswXSksdC5fcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbihlLmRhdGFbMF0pKTooY29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiA+PmV2ZW50IixlKSx0Ll9wcm9jZXNzUGVlckluZm9ybWF0aW9uKGUuZGF0YSkpfSl9fSx7a2V5OiJfcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSl7Y29uc29sZS5pbmZvKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbjogIixKU09OLnN0cmluZ2lmeShlKSksdGhpcy5fcGVlckNvbm5lY3Rpb24/KCJvZmZlciIhPT1lLnR5cGUmJiJhbnN3ZXIiIT09ZS50eXBlfHwoY29uc29sZS5pbmZvKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogUHJvY2VzcyBDb25uZWN0aW9uIERlc2NyaXB0aW9uOiAiLGUpLHRoaXMuX3BlZXJDb25uZWN0aW9uLnNldFJlbW90ZURlc2NyaXB0aW9uKG5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oZSkpLnRoZW4oZnVuY3Rpb24oKXtjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IHJlbW90ZSBzdWNjZXNzIil9KS5jYXRjaChmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IHJlbW90ZSBlcnJvcjogIixlKX0pKSxlLmNhbmRpZGF0ZSYmKGNvbnNvbGUuaW5mbygiUHJvY2VzcyBJY2UgQ2FuZGlkYXRlOiAiLGUpLHRoaXMuX3BlZXJDb25uZWN0aW9uLmFkZEljZUNhbmRpZGF0ZShuZXcgUlRDSWNlQ2FuZGlkYXRlKHtjYW5kaWRhdGU6ZS5jYW5kaWRhdGV9KSkpKTpjb25zb2xlLmluZm8oIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiBwcm9jZXNzUGVlckluZm9ybWF0aW9uOiBubyBQZWVyQ29ubmVjdGlvbiBleGlzdGluZyAtLVx4M2UgbWF5YmUgaW4gZGlzY29ubmVjdGluZyBwcm9jZXNzLiAtLVx4M2UgaWdub3JpbmcgdGhpcyB1cGRhdGUiKX19LHtrZXk6Il9vbkRhdGFDaGFubmVsT3BlbiIsdmFsdWU6ZnVuY3Rpb24oKXtjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gRGF0YUNoYW5uZWwgb3BlbmVkIiksdGhpcy5fb25TdGF0dXNVcGRhdGUmJnRoaXMuX29uU3RhdHVzVXBkYXRlKCJsaXZlIix2b2lkIDAsdGhpcy5fcmVtb3RlUnVudGltZVVSTCl9fSx7a2V5OiJfb25EYXRhQ2hhbm5lbEVycm9yIix2YWx1ZTpmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gRGF0YUNoYW5uZWwgZXJyb3I6ICIsZSksdGhpcy5fb25TdGF0dXNVcGRhdGUmJnRoaXMuX29uU3RhdHVzVXBkYXRlKCJkaXNjb25uZWN0ZWQiLCIiK2UsdGhpcy5fcmVtb3RlUnVudGltZVVSTCl9fSx7a2V5OiJfb25EYXRhQ2hhbm5lbENsb3NlIix2YWx1ZTpmdW5jdGlvbigpe2NvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBEYXRhQ2hhbm5lbCBjbG9zZWQ6ICIpLHRoaXMuX29uU3RhdHVzVXBkYXRlJiZ0aGlzLl9vblN0YXR1c1VwZGF0ZSgiZGlzY29ubmVjdGVkIiwiY2xvc2VkIix0aGlzLl9yZW1vdGVSdW50aW1lVVJMKX19LHtrZXk6Il9kaXZpZGVVUkwiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZSgvKFthLXpBLVotXSopOlwvXC8oPzpcLik/KFstYS16QS1aMC05QDolLl9cK34jPV17MiwyNTZ9KShbLWEtekEtWjAtOUA6JS5fXCt+Iz1cL10qKS9naSwiJDEsJDIsJDMiKS5zcGxpdCgiLCIpO3JldHVybiB0WzBdPT09ZSYmKHRbMF09Imh0dHBzIix0WzFdPWUpLHt0eXBlOnRbMF0sZG9tYWluOnRbMV0saWRlbnRpdHk6dFsyXX19fV0pLGV9KCk7dC5hPWN9LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7IWZ1bmN0aW9uKCl7dmFyIHQ9bigwKSxyPXQubG9nLGk9dC5icm93c2VyRGV0YWlscztlLmV4cG9ydHMuYnJvd3NlckRldGFpbHM9aSxlLmV4cG9ydHMuZXh0cmFjdFZlcnNpb249dC5leHRyYWN0VmVyc2lvbixlLmV4cG9ydHMuZGlzYWJsZUxvZz10LmRpc2FibGVMb2c7dmFyIGE9big0KXx8bnVsbCxvPW4oNil8fG51bGwscz1uKDEwKXx8bnVsbCxjPW4oMTIpfHxudWxsO3N3aXRjaChpLmJyb3dzZXIpe2Nhc2UiY2hyb21lIjppZighYXx8IWEuc2hpbVBlZXJDb25uZWN0aW9uKXJldHVybiB2b2lkIHIoIkNocm9tZSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4iKTtyKCJhZGFwdGVyLmpzIHNoaW1taW5nIGNocm9tZS4iKSxlLmV4cG9ydHMuYnJvd3NlclNoaW09YSxhLnNoaW1HZXRVc2VyTWVkaWEoKSxhLnNoaW1NZWRpYVN0cmVhbSgpLHQuc2hpbUNyZWF0ZU9iamVjdFVSTCgpLGEuc2hpbVNvdXJjZU9iamVjdCgpLGEuc2hpbVBlZXJDb25uZWN0aW9uKCksYS5zaGltT25UcmFjaygpLGEuc2hpbUdldFNlbmRlcnNXaXRoRHRtZigpO2JyZWFrO2Nhc2UiZmlyZWZveCI6aWYoIXN8fCFzLnNoaW1QZWVyQ29ubmVjdGlvbilyZXR1cm4gdm9pZCByKCJGaXJlZm94IHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLiIpO3IoImFkYXB0ZXIuanMgc2hpbW1pbmcgZmlyZWZveC4iKSxlLmV4cG9ydHMuYnJvd3NlclNoaW09cyxzLnNoaW1HZXRVc2VyTWVkaWEoKSx0LnNoaW1DcmVhdGVPYmplY3RVUkwoKSxzLnNoaW1Tb3VyY2VPYmplY3QoKSxzLnNoaW1QZWVyQ29ubmVjdGlvbigpLHMuc2hpbU9uVHJhY2soKTticmVhaztjYXNlImVkZ2UiOmlmKCFvfHwhby5zaGltUGVlckNvbm5lY3Rpb24pcmV0dXJuIHZvaWQgcigiTVMgZWRnZSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4iKTtyKCJhZGFwdGVyLmpzIHNoaW1taW5nIGVkZ2UuIiksZS5leHBvcnRzLmJyb3dzZXJTaGltPW8sby5zaGltR2V0VXNlck1lZGlhKCksdC5zaGltQ3JlYXRlT2JqZWN0VVJMKCksby5zaGltUGVlckNvbm5lY3Rpb24oKSxvLnNoaW1SZXBsYWNlVHJhY2soKTticmVhaztjYXNlInNhZmFyaSI6aWYoIWMpcmV0dXJuIHZvaWQgcigiU2FmYXJpIHNoaW0gaXMgbm90IGluY2x1ZGVkIGluIHRoaXMgYWRhcHRlciByZWxlYXNlLiIpO3IoImFkYXB0ZXIuanMgc2hpbW1pbmcgc2FmYXJpLiIpLGUuZXhwb3J0cy5icm93c2VyU2hpbT1jLGMuc2hpbUNhbGxiYWNrc0FQSSgpLGMuc2hpbUFkZFN0cmVhbSgpLGMuc2hpbU9uQWRkU3RyZWFtKCksYy5zaGltR2V0VXNlck1lZGlhKCk7YnJlYWs7ZGVmYXVsdDpyKCJVbnN1cHBvcnRlZCBicm93c2VyISIpfX0oKX0sZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKDApLmxvZyxpPW4oMCkuYnJvd3NlckRldGFpbHMsYT17c2hpbU1lZGlhU3RyZWFtOmZ1bmN0aW9uKCl7d2luZG93Lk1lZGlhU3RyZWFtPXdpbmRvdy5NZWRpYVN0cmVhbXx8d2luZG93LndlYmtpdE1lZGlhU3RyZWFtfSxzaGltT25UcmFjazpmdW5jdGlvbigpeyJvYmplY3QiIT10eXBlb2Ygd2luZG93fHwhd2luZG93LlJUQ1BlZXJDb25uZWN0aW9ufHwib250cmFjayJpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlfHxPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwib250cmFjayIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vbnRyYWNrfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLl9vbnRyYWNrJiYodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCJ0cmFjayIsdGhpcy5fb250cmFjayksdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCJhZGRzdHJlYW0iLHRoaXMuX29udHJhY2twb2x5KSksdGhpcy5hZGRFdmVudExpc3RlbmVyKCJ0cmFjayIsdGhpcy5fb250cmFjaz1lKSx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoImFkZHN0cmVhbSIsdGhpcy5fb250cmFja3BvbHk9ZnVuY3Rpb24oZSl7ZS5zdHJlYW0uYWRkRXZlbnRMaXN0ZW5lcigiYWRkdHJhY2siLGZ1bmN0aW9uKG4pe3ZhciByO3I9UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycz90LmdldFJlY2VpdmVycygpLmZpbmQoZnVuY3Rpb24oZSl7cmV0dXJuIGUudHJhY2suaWQ9PT1uLnRyYWNrLmlkfSk6e3RyYWNrOm4udHJhY2t9O3ZhciBpPW5ldyBFdmVudCgidHJhY2siKTtpLnRyYWNrPW4udHJhY2ssaS5yZWNlaXZlcj1yLGkuc3RyZWFtcz1bZS5zdHJlYW1dLHQuZGlzcGF0Y2hFdmVudChpKX0pLGUuc3RyZWFtLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24obil7dmFyIHI7cj1SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzP3QuZ2V0UmVjZWl2ZXJzKCkuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gZS50cmFjay5pZD09PW4uaWR9KTp7dHJhY2s6bn07dmFyIGk9bmV3IEV2ZW50KCJ0cmFjayIpO2kudHJhY2s9bixpLnJlY2VpdmVyPXIsaS5zdHJlYW1zPVtlLnN0cmVhbV0sdGhpcy5kaXNwYXRjaEV2ZW50KGkpfS5iaW5kKHRoaXMpKX0uYmluZCh0aGlzKSl9fSl9LHNoaW1HZXRTZW5kZXJzV2l0aER0bWY6ZnVuY3Rpb24oKXtpZigib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uJiYhKCJnZXRTZW5kZXJzImluIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSkmJiJjcmVhdGVEVE1GU2VuZGVyImluIFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSl7UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFNlbmRlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2VuZGVyc3x8W119O3ZhciBlPVJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW0sdD1SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUucmVtb3ZlU3RyZWFtO1JUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFja3x8KFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRUcmFjaz1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYoImNsb3NlZCI9PT1uLnNpZ25hbGluZ1N0YXRlKXRocm93IG5ldyBET01FeGNlcHRpb24oIlRoZSBSVENQZWVyQ29ubmVjdGlvbidzIHNpZ25hbGluZ1N0YXRlIGlzICdjbG9zZWQnLiIsIkludmFsaWRTdGF0ZUVycm9yIik7dmFyIHI9W10uc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7aWYoMSE9PXIubGVuZ3RofHwhclswXS5nZXRUcmFja3MoKS5maW5kKGZ1bmN0aW9uKHQpe3JldHVybiB0PT09ZX0pKXRocm93IG5ldyBET01FeGNlcHRpb24oIlRoZSBhZGFwdGVyLmpzIGFkZFRyYWNrIHBvbHlmaWxsIG9ubHkgc3VwcG9ydHMgYSBzaW5nbGUgIHN0cmVhbSB3aGljaCBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIHNwZWNpZmllZCB0cmFjay4iLCJOb3RTdXBwb3J0ZWRFcnJvciIpO2lmKG4uX3NlbmRlcnM9bi5fc2VuZGVyc3x8W10sbi5fc2VuZGVycy5maW5kKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRyYWNrPT09ZX0pKXRocm93IG5ldyBET01FeGNlcHRpb24oIlRyYWNrIGFscmVhZHkgZXhpc3RzLiIsIkludmFsaWRBY2Nlc3NFcnJvciIpO24uX3N0cmVhbXM9bi5fc3RyZWFtc3x8e307dmFyIGk9bi5fc3RyZWFtc1t0LmlkXTtpZihpKWkuYWRkVHJhY2soZSksbi5yZW1vdmVTdHJlYW0oaSksbi5hZGRTdHJlYW0oaSk7ZWxzZXt2YXIgYT1uZXcgTWVkaWFTdHJlYW0oW2VdKTtuLl9zdHJlYW1zW3QuaWRdPWEsbi5hZGRTdHJlYW0oYSl9dmFyIG89e3RyYWNrOmUsZ2V0IGR0bWYoKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5fZHRtZiYmKCJhdWRpbyI9PT1lLmtpbmQ/dGhpcy5fZHRtZj1uLmNyZWF0ZURUTUZTZW5kZXIoZSk6dGhpcy5fZHRtZj1udWxsKSx0aGlzLl9kdG1mfX07cmV0dXJuIG4uX3NlbmRlcnMucHVzaChvKSxvfSksUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFN0cmVhbT1mdW5jdGlvbih0KXt2YXIgbj10aGlzO24uX3NlbmRlcnM9bi5fc2VuZGVyc3x8W10sZS5hcHBseShuLFt0XSksdC5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe24uX3NlbmRlcnMucHVzaCh7dHJhY2s6ZSxnZXQgZHRtZigpe3JldHVybiB2b2lkIDA9PT10aGlzLl9kdG1mJiYoImF1ZGlvIj09PWUua2luZD90aGlzLl9kdG1mPW4uY3JlYXRlRFRNRlNlbmRlcihlKTp0aGlzLl9kdG1mPW51bGwpLHRoaXMuX2R0bWZ9fSl9KX0sUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbT1mdW5jdGlvbihlKXt2YXIgbj10aGlzO24uX3NlbmRlcnM9bi5fc2VuZGVyc3x8W10sdC5hcHBseShuLFtlXSksZS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PW4uX3NlbmRlcnMuZmluZChmdW5jdGlvbih0KXtyZXR1cm4gdC50cmFjaz09PWV9KTt0JiZuLl9zZW5kZXJzLnNwbGljZShuLl9zZW5kZXJzLmluZGV4T2YodCksMSl9KX19fSxzaGltU291cmNlT2JqZWN0OmZ1bmN0aW9uKCl7Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJighd2luZG93LkhUTUxNZWRpYUVsZW1lbnR8fCJzcmNPYmplY3QiaW4gd2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlfHxPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCJzcmNPYmplY3QiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc3JjT2JqZWN0fSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpczt0aGlzLl9zcmNPYmplY3Q9ZSx0aGlzLnNyYyYmVVJMLnJldm9rZU9iamVjdFVSTCh0aGlzLnNyYyksZT8odGhpcy5zcmM9VVJMLmNyZWF0ZU9iamVjdFVSTChlKSxlLmFkZEV2ZW50TGlzdGVuZXIoImFkZHRyYWNrIixmdW5jdGlvbigpe3Quc3JjJiZVUkwucmV2b2tlT2JqZWN0VVJMKHQuc3JjKSx0LnNyYz1VUkwuY3JlYXRlT2JqZWN0VVJMKGUpfSksZS5hZGRFdmVudExpc3RlbmVyKCJyZW1vdmV0cmFjayIsZnVuY3Rpb24oKXt0LnNyYyYmVVJMLnJldm9rZU9iamVjdFVSTCh0LnNyYyksdC5zcmM9VVJMLmNyZWF0ZU9iamVjdFVSTChlKX0pKTp0aGlzLnNyYz0iIn19KSl9LHNoaW1QZWVyQ29ubmVjdGlvbjpmdW5jdGlvbigpe2lmKHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbil7dmFyIGU9UlRDUGVlckNvbm5lY3Rpb247d2luZG93LlJUQ1BlZXJDb25uZWN0aW9uPWZ1bmN0aW9uKHQsbil7aWYodCYmdC5pY2VTZXJ2ZXJzKXtmb3IodmFyIHI9W10saT0wO2k8dC5pY2VTZXJ2ZXJzLmxlbmd0aDtpKyspe3ZhciBhPXQuaWNlU2VydmVyc1tpXTshYS5oYXNPd25Qcm9wZXJ0eSgidXJscyIpJiZhLmhhc093blByb3BlcnR5KCJ1cmwiKT8oY29uc29sZS53YXJuKCJSVENJY2VTZXJ2ZXIudXJsIGlzIGRlcHJlY2F0ZWQhIFVzZSB1cmxzIGluc3RlYWQuIiksKGE9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhKSkpLnVybHM9YS51cmwsci5wdXNoKGEpKTpyLnB1c2godC5pY2VTZXJ2ZXJzW2ldKX10LmljZVNlcnZlcnM9cn1yZXR1cm4gbmV3IGUodCxuKX0sd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZT1lLnByb3RvdHlwZSxPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLCJnZW5lcmF0ZUNlcnRpZmljYXRlIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuZ2VuZXJhdGVDZXJ0aWZpY2F0ZX19KX1lbHNlIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbj1mdW5jdGlvbihlLHQpe3JldHVybiByKCJQZWVyQ29ubmVjdGlvbiIpLGUmJmUuaWNlVHJhbnNwb3J0UG9saWN5JiYoZS5pY2VUcmFuc3BvcnRzPWUuaWNlVHJhbnNwb3J0UG9saWN5KSxuZXcgd2Via2l0UlRDUGVlckNvbm5lY3Rpb24oZSx0KX0sd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZT13ZWJraXRSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsd2Via2l0UlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiwiZ2VuZXJhdGVDZXJ0aWZpY2F0ZSIse2dldDpmdW5jdGlvbigpe3JldHVybiB3ZWJraXRSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlfX0pO3ZhciB0PVJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cztSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM9ZnVuY3Rpb24oZSxuLHIpe3ZhciBpPXRoaXMsYT1hcmd1bWVudHM7aWYoYXJndW1lbnRzLmxlbmd0aD4wJiYiZnVuY3Rpb24iPT10eXBlb2YgZSlyZXR1cm4gdC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoMD09PXQubGVuZ3RoJiYoMD09PWFyZ3VtZW50cy5sZW5ndGh8fCJmdW5jdGlvbiIhPXR5cGVvZiBhcmd1bWVudHNbMF0pKXJldHVybiB0LmFwcGx5KHRoaXMsW10pO3ZhciBvPWZ1bmN0aW9uKGUpe3ZhciB0PXt9O3JldHVybiBlLnJlc3VsdCgpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49e2lkOmUuaWQsdGltZXN0YW1wOmUudGltZXN0YW1wLHR5cGU6e2xvY2FsY2FuZGlkYXRlOiJsb2NhbC1jYW5kaWRhdGUiLHJlbW90ZWNhbmRpZGF0ZToicmVtb3RlLWNhbmRpZGF0ZSJ9W2UudHlwZV18fGUudHlwZX07ZS5uYW1lcygpLmZvckVhY2goZnVuY3Rpb24odCl7blt0XT1lLnN0YXQodCl9KSx0W24uaWRdPW59KSx0fSxzPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgTWFwKE9iamVjdC5rZXlzKGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm5bdCxlW3RdXX0pKX07aWYoYXJndW1lbnRzLmxlbmd0aD49Mil7cmV0dXJuIHQuYXBwbHkodGhpcyxbZnVuY3Rpb24oZSl7YVsxXShzKG8oZSkpKX0sYXJndW1lbnRzWzBdXSl9cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsbil7dC5hcHBseShpLFtmdW5jdGlvbih0KXtlKHMobyh0KSkpfSxuXSl9KS50aGVuKG4scil9LGkudmVyc2lvbjw1MSYmWyJzZXRMb2NhbERlc2NyaXB0aW9uIiwic2V0UmVtb3RlRGVzY3JpcHRpb24iLCJhZGRJY2VDYW5kaWRhdGUiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PVJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVtlXTtSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbZV09ZnVuY3Rpb24oKXt2YXIgZT1hcmd1bWVudHMsbj10aGlzLHI9bmV3IFByb21pc2UoZnVuY3Rpb24ocixpKXt0LmFwcGx5KG4sW2VbMF0scixpXSl9KTtyZXR1cm4gZS5sZW5ndGg8Mj9yOnIudGhlbihmdW5jdGlvbigpe2VbMV0uYXBwbHkobnVsbCxbXSl9LGZ1bmN0aW9uKHQpe2UubGVuZ3RoPj0zJiZlWzJdLmFwcGx5KG51bGwsW3RdKX0pfX0pLGkudmVyc2lvbjw1MiYmWyJjcmVhdGVPZmZlciIsImNyZWF0ZUFuc3dlciJdLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW2VdO1JUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoYXJndW1lbnRzLmxlbmd0aDwxfHwxPT09YXJndW1lbnRzLmxlbmd0aCYmIm9iamVjdCI9PXR5cGVvZiBhcmd1bWVudHNbMF0pe3ZhciBuPTE9PT1hcmd1bWVudHMubGVuZ3RoP2FyZ3VtZW50c1swXTp2b2lkIDA7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHIsaSl7dC5hcHBseShlLFtyLGksbl0pfSl9cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pLFsic2V0TG9jYWxEZXNjcmlwdGlvbiIsInNldFJlbW90ZURlc2NyaXB0aW9uIiwiYWRkSWNlQ2FuZGlkYXRlIl0uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbZV07UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1uZXcoImFkZEljZUNhbmRpZGF0ZSI9PT1lP1JUQ0ljZUNhbmRpZGF0ZTpSVENTZXNzaW9uRGVzY3JpcHRpb24pKGFyZ3VtZW50c1swXSksdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSk7dmFyIG49UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZTtSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT9uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTooYXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0uYXBwbHkobnVsbCksUHJvbWlzZS5yZXNvbHZlKCkpfX19O2UuZXhwb3J0cz17c2hpbU1lZGlhU3RyZWFtOmEuc2hpbU1lZGlhU3RyZWFtLHNoaW1PblRyYWNrOmEuc2hpbU9uVHJhY2ssc2hpbUdldFNlbmRlcnNXaXRoRHRtZjphLnNoaW1HZXRTZW5kZXJzV2l0aER0bWYsc2hpbVNvdXJjZU9iamVjdDphLnNoaW1Tb3VyY2VPYmplY3Qsc2hpbVBlZXJDb25uZWN0aW9uOmEuc2hpbVBlZXJDb25uZWN0aW9uLHNoaW1HZXRVc2VyTWVkaWE6big1KX19LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigwKS5sb2csaT1uKDApLmJyb3dzZXJEZXRhaWxzO2UuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBlPWZ1bmN0aW9uKGUpe2lmKCJvYmplY3QiIT10eXBlb2YgZXx8ZS5tYW5kYXRvcnl8fGUub3B0aW9uYWwpcmV0dXJuIGU7dmFyIHQ9e307cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24obil7aWYoInJlcXVpcmUiIT09biYmImFkdmFuY2VkIiE9PW4mJiJtZWRpYVNvdXJjZSIhPT1uKXt2YXIgcj0ib2JqZWN0Ij09dHlwZW9mIGVbbl0/ZVtuXTp7aWRlYWw6ZVtuXX07dm9pZCAwIT09ci5leGFjdCYmIm51bWJlciI9PXR5cGVvZiByLmV4YWN0JiYoci5taW49ci5tYXg9ci5leGFjdCk7dmFyIGk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT9lK3QuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKToiZGV2aWNlSWQiPT09dD8ic291cmNlSWQiOnR9O2lmKHZvaWQgMCE9PXIuaWRlYWwpe3Qub3B0aW9uYWw9dC5vcHRpb25hbHx8W107dmFyIGE9e307Im51bWJlciI9PXR5cGVvZiByLmlkZWFsPyhhW2koIm1pbiIsbildPXIuaWRlYWwsdC5vcHRpb25hbC5wdXNoKGEpLChhPXt9KVtpKCJtYXgiLG4pXT1yLmlkZWFsLHQub3B0aW9uYWwucHVzaChhKSk6KGFbaSgiIixuKV09ci5pZGVhbCx0Lm9wdGlvbmFsLnB1c2goYSkpfXZvaWQgMCE9PXIuZXhhY3QmJiJudW1iZXIiIT10eXBlb2Ygci5leGFjdD8odC5tYW5kYXRvcnk9dC5tYW5kYXRvcnl8fHt9LHQubWFuZGF0b3J5W2koIiIsbildPXIuZXhhY3QpOlsibWluIiwibWF4Il0uZm9yRWFjaChmdW5jdGlvbihlKXt2b2lkIDAhPT1yW2VdJiYodC5tYW5kYXRvcnk9dC5tYW5kYXRvcnl8fHt9LHQubWFuZGF0b3J5W2koZSxuKV09cltlXSl9KX19KSxlLmFkdmFuY2VkJiYodC5vcHRpb25hbD0odC5vcHRpb25hbHx8W10pLmNvbmNhdChlLmFkdmFuY2VkKSksdH0sdD1mdW5jdGlvbih0LG4pe2lmKCh0PUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodCkpKSYmdC5hdWRpbyYmKHQuYXVkaW89ZSh0LmF1ZGlvKSksdCYmIm9iamVjdCI9PXR5cGVvZiB0LnZpZGVvKXt2YXIgYT10LnZpZGVvLmZhY2luZ01vZGU7YT1hJiYoIm9iamVjdCI9PXR5cGVvZiBhP2E6e2lkZWFsOmF9KTt2YXIgbyxzPWkudmVyc2lvbjw2MTtpZihhJiYoInVzZXIiPT09YS5leGFjdHx8ImVudmlyb25tZW50Ij09PWEuZXhhY3R8fCJ1c2VyIj09PWEuaWRlYWx8fCJlbnZpcm9ubWVudCI9PT1hLmlkZWFsKSYmKCFuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFN1cHBvcnRlZENvbnN0cmFpbnRzfHwhbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50cygpLmZhY2luZ01vZGV8fHMpKWlmKGRlbGV0ZSB0LnZpZGVvLmZhY2luZ01vZGUsImVudmlyb25tZW50Ij09PWEuZXhhY3R8fCJlbnZpcm9ubWVudCI9PT1hLmlkZWFsP289WyJiYWNrIiwicmVhciJdOiJ1c2VyIiE9PWEuZXhhY3QmJiJ1c2VyIiE9PWEuaWRlYWx8fChvPVsiZnJvbnQiXSksbylyZXR1cm4gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzKCkudGhlbihmdW5jdGlvbihpKXt2YXIgcz0oaT1pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4idmlkZW9pbnB1dCI9PT1lLmtpbmR9KSkuZmluZChmdW5jdGlvbihlKXtyZXR1cm4gby5zb21lKGZ1bmN0aW9uKHQpe3JldHVybi0xIT09ZS5sYWJlbC50b0xvd2VyQ2FzZSgpLmluZGV4T2YodCl9KX0pO3JldHVybiFzJiZpLmxlbmd0aCYmLTEhPT1vLmluZGV4T2YoImJhY2siKSYmKHM9aVtpLmxlbmd0aC0xXSkscyYmKHQudmlkZW8uZGV2aWNlSWQ9YS5leGFjdD97ZXhhY3Q6cy5kZXZpY2VJZH06e2lkZWFsOnMuZGV2aWNlSWR9KSx0LnZpZGVvPWUodC52aWRlbykscigiY2hyb21lOiAiK0pTT04uc3RyaW5naWZ5KHQpKSxuKHQpfSk7dC52aWRlbz1lKHQudmlkZW8pfXJldHVybiByKCJjaHJvbWU6ICIrSlNPTi5zdHJpbmdpZnkodCkpLG4odCl9LG49ZnVuY3Rpb24oZSl7cmV0dXJue25hbWU6e0NvbnN0cmFpbnROb3RTYXRpc2ZpZWRFcnJvcjoiT3ZlcmNvbnN0cmFpbmVkRXJyb3IiLFBlcm1pc3Npb25EZW5pZWRFcnJvcjoiTm90QWxsb3dlZEVycm9yIixUcmFja1N0YXJ0RXJyb3I6Ik5vdFJlYWRhYmxlRXJyb3IifVtlLm5hbWVdfHxlLm5hbWUsbWVzc2FnZTplLm1lc3NhZ2UsY29uc3RyYWludDplLmNvbnN0cmFpbnROYW1lLHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmFtZSsodGhpcy5tZXNzYWdlJiYiOiAiKSt0aGlzLm1lc3NhZ2V9fX07bmF2aWdhdG9yLmdldFVzZXJNZWRpYT1mdW5jdGlvbihlLHIsaSl7dChlLGZ1bmN0aW9uKGUpe25hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEoZSxyLGZ1bmN0aW9uKGUpe2kobihlKSl9KX0pfTt2YXIgYT1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCxuKXtuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKGUsdCxuKX0pfTtpZihuYXZpZ2F0b3IubWVkaWFEZXZpY2VzfHwobmF2aWdhdG9yLm1lZGlhRGV2aWNlcz17Z2V0VXNlck1lZGlhOmEsZW51bWVyYXRlRGV2aWNlczpmdW5jdGlvbigpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlKXt2YXIgdD17YXVkaW86ImF1ZGlvaW5wdXQiLHZpZGVvOiJ2aWRlb2lucHV0In07cmV0dXJuIE1lZGlhU3RyZWFtVHJhY2suZ2V0U291cmNlcyhmdW5jdGlvbihuKXtlKG4ubWFwKGZ1bmN0aW9uKGUpe3JldHVybntsYWJlbDplLmxhYmVsLGtpbmQ6dFtlLmtpbmRdLGRldmljZUlkOmUuaWQsZ3JvdXBJZDoiIn19KSl9KX0pfSxnZXRTdXBwb3J0ZWRDb25zdHJhaW50czpmdW5jdGlvbigpe3JldHVybntkZXZpY2VJZDohMCxlY2hvQ2FuY2VsbGF0aW9uOiEwLGZhY2luZ01vZGU6ITAsZnJhbWVSYXRlOiEwLGhlaWdodDohMCx3aWR0aDohMH19fSksbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEpe3ZhciBvPW5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLmJpbmQobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyk7bmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWE9ZnVuY3Rpb24oZSl7cmV0dXJuIHQoZSxmdW5jdGlvbihlKXtyZXR1cm4gbyhlKS50aGVuKGZ1bmN0aW9uKHQpe2lmKGUuYXVkaW8mJiF0LmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RofHxlLnZpZGVvJiYhdC5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCl0aHJvdyB0LmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zdG9wKCl9KSxuZXcgRE9NRXhjZXB0aW9uKCIiLCJOb3RGb3VuZEVycm9yIik7cmV0dXJuIHR9LGZ1bmN0aW9uKGUpe3JldHVybiBQcm9taXNlLnJlamVjdChuKGUpKX0pfSl9fWVsc2UgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWE9ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSl9O3ZvaWQgMD09PW5hdmlnYXRvci5tZWRpYURldmljZXMuYWRkRXZlbnRMaXN0ZW5lciYmKG5hdmlnYXRvci5tZWRpYURldmljZXMuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbigpe3IoIkR1bW15IG1lZGlhRGV2aWNlcy5hZGRFdmVudExpc3RlbmVyIGNhbGxlZC4iKX0pLHZvaWQgMD09PW5hdmlnYXRvci5tZWRpYURldmljZXMucmVtb3ZlRXZlbnRMaXN0ZW5lciYmKG5hdmlnYXRvci5tZWRpYURldmljZXMucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbigpe3IoIkR1bW15IG1lZGlhRGV2aWNlcy5yZW1vdmVFdmVudExpc3RlbmVyIGNhbGxlZC4iKX0pfX0sZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKDApLmJyb3dzZXJEZXRhaWxzLGk9big3KTtlLmV4cG9ydHM9e3NoaW1HZXRVc2VyTWVkaWE6big5KSxzaGltUGVlckNvbm5lY3Rpb246ZnVuY3Rpb24oKXtpZih3aW5kb3cuUlRDSWNlR2F0aGVyZXImJih3aW5kb3cuUlRDSWNlQ2FuZGlkYXRlfHwod2luZG93LlJUQ0ljZUNhbmRpZGF0ZT1mdW5jdGlvbihlKXtyZXR1cm4gZX0pLHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb258fCh3aW5kb3cuUlRDU2Vzc2lvbkRlc2NyaXB0aW9uPWZ1bmN0aW9uKGUpe3JldHVybiBlfSksci52ZXJzaW9uPDE1MDI1KSl7dmFyIGU9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZSwiZW5hYmxlZCIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShNZWRpYVN0cmVhbVRyYWNrLnByb3RvdHlwZSwiZW5hYmxlZCIse3NldDpmdW5jdGlvbih0KXtlLnNldC5jYWxsKHRoaXMsdCk7dmFyIG49bmV3IEV2ZW50KCJlbmFibGVkIik7bi5lbmFibGVkPXQsdGhpcy5kaXNwYXRjaEV2ZW50KG4pfX0pfXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbj1pKHIudmVyc2lvbil9LHNoaW1SZXBsYWNlVHJhY2s6ZnVuY3Rpb24oKXshd2luZG93LlJUQ1J0cFNlbmRlcnx8InJlcGxhY2VUcmFjayJpbiBSVENSdHBTZW5kZXIucHJvdG90eXBlfHwoUlRDUnRwU2VuZGVyLnByb3RvdHlwZS5yZXBsYWNlVHJhY2s9UlRDUnRwU2VuZGVyLnByb3RvdHlwZS5zZXRUcmFjayl9fX0sZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKDgpO2Z1bmN0aW9uIGkoZSx0KXt2YXIgbj17Y29kZWNzOltdLGhlYWRlckV4dGVuc2lvbnM6W10sZmVjTWVjaGFuaXNtczpbXX0scj1mdW5jdGlvbihlLHQpe2U9cGFyc2VJbnQoZSwxMCk7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspaWYodFtuXS5wYXlsb2FkVHlwZT09PWV8fHRbbl0ucHJlZmVycmVkUGF5bG9hZFR5cGU9PT1lKXJldHVybiB0W25dfSxpPWZ1bmN0aW9uKGUsdCxuLGkpe3ZhciBhPXIoZS5wYXJhbWV0ZXJzLmFwdCxuKSxvPXIodC5wYXJhbWV0ZXJzLmFwdCxpKTtyZXR1cm4gYSYmbyYmYS5uYW1lLnRvTG93ZXJDYXNlKCk9PT1vLm5hbWUudG9Mb3dlckNhc2UoKX07cmV0dXJuIGUuY29kZWNzLmZvckVhY2goZnVuY3Rpb24ocil7Zm9yKHZhciBhPTA7YTx0LmNvZGVjcy5sZW5ndGg7YSsrKXt2YXIgbz10LmNvZGVjc1thXTtpZihyLm5hbWUudG9Mb3dlckNhc2UoKT09PW8ubmFtZS50b0xvd2VyQ2FzZSgpJiZyLmNsb2NrUmF0ZT09PW8uY2xvY2tSYXRlKXtpZigicnR4Ij09PXIubmFtZS50b0xvd2VyQ2FzZSgpJiZyLnBhcmFtZXRlcnMmJm8ucGFyYW1ldGVycy5hcHQmJiFpKHIsbyxlLmNvZGVjcyx0LmNvZGVjcykpY29udGludWU7KG89SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvKSkpLm51bUNoYW5uZWxzPU1hdGgubWluKHIubnVtQ2hhbm5lbHMsby5udW1DaGFubmVscyksbi5jb2RlY3MucHVzaChvKSxvLnJ0Y3BGZWVkYmFjaz1vLnJ0Y3BGZWVkYmFjay5maWx0ZXIoZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTA7dDxyLnJ0Y3BGZWVkYmFjay5sZW5ndGg7dCsrKWlmKHIucnRjcEZlZWRiYWNrW3RdLnR5cGU9PT1lLnR5cGUmJnIucnRjcEZlZWRiYWNrW3RdLnBhcmFtZXRlcj09PWUucGFyYW1ldGVyKXJldHVybiEwO3JldHVybiExfSk7YnJlYWt9fX0pLGUuaGVhZGVyRXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Zvcih2YXIgcj0wO3I8dC5oZWFkZXJFeHRlbnNpb25zLmxlbmd0aDtyKyspe3ZhciBpPXQuaGVhZGVyRXh0ZW5zaW9uc1tyXTtpZihlLnVyaT09PWkudXJpKXtuLmhlYWRlckV4dGVuc2lvbnMucHVzaChpKTticmVha319fSksbn1mdW5jdGlvbiBhKGUsdCxuKXtyZXR1cm4tMSE9PXtvZmZlcjp7c2V0TG9jYWxEZXNjcmlwdGlvbjpbInN0YWJsZSIsImhhdmUtbG9jYWwtb2ZmZXIiXSxzZXRSZW1vdGVEZXNjcmlwdGlvbjpbInN0YWJsZSIsImhhdmUtcmVtb3RlLW9mZmVyIl19LGFuc3dlcjp7c2V0TG9jYWxEZXNjcmlwdGlvbjpbImhhdmUtcmVtb3RlLW9mZmVyIiwiaGF2ZS1sb2NhbC1wcmFuc3dlciJdLHNldFJlbW90ZURlc2NyaXB0aW9uOlsiaGF2ZS1sb2NhbC1vZmZlciIsImhhdmUtcmVtb3RlLXByYW5zd2VyIl19fVt0XVtlXS5pbmRleE9mKG4pfWUuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1mdW5jdGlvbih0KXt2YXIgbj10aGlzLHI9ZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO2lmKFsiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50Il0uZm9yRWFjaChmdW5jdGlvbihlKXtuW2VdPXJbZV0uYmluZChyKX0pLHRoaXMubmVlZE5lZ290aWF0aW9uPSExLHRoaXMub25pY2VjYW5kaWRhdGU9bnVsbCx0aGlzLm9uYWRkc3RyZWFtPW51bGwsdGhpcy5vbnRyYWNrPW51bGwsdGhpcy5vbnJlbW92ZXN0cmVhbT1udWxsLHRoaXMub25zaWduYWxpbmdzdGF0ZWNoYW5nZT1udWxsLHRoaXMub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2U9bnVsbCx0aGlzLm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2U9bnVsbCx0aGlzLm9ubmVnb3RpYXRpb25uZWVkZWQ9bnVsbCx0aGlzLm9uZGF0YWNoYW5uZWw9bnVsbCx0aGlzLmNhblRyaWNrbGVJY2VDYW5kaWRhdGVzPW51bGwsdGhpcy5sb2NhbFN0cmVhbXM9W10sdGhpcy5yZW1vdGVTdHJlYW1zPVtdLHRoaXMuZ2V0TG9jYWxTdHJlYW1zPWZ1bmN0aW9uKCl7cmV0dXJuIG4ubG9jYWxTdHJlYW1zfSx0aGlzLmdldFJlbW90ZVN0cmVhbXM9ZnVuY3Rpb24oKXtyZXR1cm4gbi5yZW1vdGVTdHJlYW1zfSx0aGlzLmxvY2FsRGVzY3JpcHRpb249bmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7dHlwZToiIixzZHA6IiJ9KSx0aGlzLnJlbW90ZURlc2NyaXB0aW9uPW5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe3R5cGU6IiIsc2RwOiIifSksdGhpcy5zaWduYWxpbmdTdGF0ZT0ic3RhYmxlIix0aGlzLmljZUNvbm5lY3Rpb25TdGF0ZT0ibmV3Iix0aGlzLmljZUdhdGhlcmluZ1N0YXRlPSJuZXciLHRoaXMuaWNlT3B0aW9ucz17Z2F0aGVyUG9saWN5OiJhbGwiLGljZVNlcnZlcnM6W119LHQmJnQuaWNlVHJhbnNwb3J0UG9saWN5KXN3aXRjaCh0LmljZVRyYW5zcG9ydFBvbGljeSl7Y2FzZSJhbGwiOmNhc2UicmVsYXkiOnRoaXMuaWNlT3B0aW9ucy5nYXRoZXJQb2xpY3k9dC5pY2VUcmFuc3BvcnRQb2xpY3l9dGhpcy51c2luZ0J1bmRsZT10JiYibWF4LWJ1bmRsZSI9PT10LmJ1bmRsZVBvbGljeSx0JiZ0LmljZVNlcnZlcnMmJih0aGlzLmljZU9wdGlvbnMuaWNlU2VydmVycz1mdW5jdGlvbihlLHQpe3ZhciBuPSExO3JldHVybihlPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZSkpKS5maWx0ZXIoZnVuY3Rpb24oZSl7aWYoZSYmKGUudXJsc3x8ZS51cmwpKXt2YXIgcj1lLnVybHN8fGUudXJsO2UudXJsJiYhZS51cmxzJiZjb25zb2xlLndhcm4oIlJUQ0ljZVNlcnZlci51cmwgaXMgZGVwcmVjYXRlZCEgVXNlIHVybHMgaW5zdGVhZC4iKTt2YXIgaT0ic3RyaW5nIj09dHlwZW9mIHI7cmV0dXJuIGkmJihyPVtyXSkscj1yLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gMCE9PWUuaW5kZXhPZigidHVybjoiKXx8LTE9PT1lLmluZGV4T2YoInRyYW5zcG9ydD11ZHAiKXx8LTEhPT1lLmluZGV4T2YoInR1cm46WyIpfHxuPzA9PT1lLmluZGV4T2YoInN0dW46IikmJnQ+PTE0MzkzOihuPSEwLCEwKX0pLGRlbGV0ZSBlLnVybCxlLnVybHM9aT9yWzBdOnIsISFyLmxlbmd0aH1yZXR1cm4hMX0pfSh0LmljZVNlcnZlcnMsZSkpLHRoaXMuX2NvbmZpZz10fHx7fSx0aGlzLnRyYW5zY2VpdmVycz1bXSx0aGlzLl9sb2NhbEljZUNhbmRpZGF0ZXNCdWZmZXI9W119O3JldHVybiB0LnByb3RvdHlwZS5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlPWZ1bmN0aW9uKCl7dmFyIGU9bmV3IEV2ZW50KCJpY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSIpO3RoaXMuZGlzcGF0Y2hFdmVudChlKSxudWxsIT09dGhpcy5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlJiZ0aGlzLm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UoZSl9LHQucHJvdG90eXBlLl9lbWl0QnVmZmVyZWRDYW5kaWRhdGVzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXIuc3BsaXRTZWN0aW9ucyhlLmxvY2FsRGVzY3JpcHRpb24uc2RwKTt0aGlzLl9sb2NhbEljZUNhbmRpZGF0ZXNCdWZmZXIuZm9yRWFjaChmdW5jdGlvbihuKXtpZighbi5jYW5kaWRhdGV8fDA9PT1PYmplY3Qua2V5cyhuLmNhbmRpZGF0ZSkubGVuZ3RoKWZvcih2YXIgcj0xO3I8dC5sZW5ndGg7cisrKS0xPT09dFtyXS5pbmRleE9mKCJcclxuYT1lbmQtb2YtY2FuZGlkYXRlc1xyXG4iKSYmKHRbcl0rPSJhPWVuZC1vZi1jYW5kaWRhdGVzXHJcbiIpO2Vsc2UgdFtuLmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4KzFdKz0iYT0iK24uY2FuZGlkYXRlLmNhbmRpZGF0ZSsiXHJcbiI7KGUubG9jYWxEZXNjcmlwdGlvbi5zZHA9dC5qb2luKCIiKSxlLmRpc3BhdGNoRXZlbnQobiksbnVsbCE9PWUub25pY2VjYW5kaWRhdGUmJmUub25pY2VjYW5kaWRhdGUobiksbi5jYW5kaWRhdGV8fCJjb21wbGV0ZSI9PT1lLmljZUdhdGhlcmluZ1N0YXRlKXx8ZS50cmFuc2NlaXZlcnMuZXZlcnkoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWNlR2F0aGVyZXImJiJjb21wbGV0ZWQiPT09ZS5pY2VHYXRoZXJlci5zdGF0ZX0pJiYiY29tcGxldGUiIT09ZS5pY2VHYXRoZXJpbmdTdGF0ZUNoYW5nZSYmKGUuaWNlR2F0aGVyaW5nU3RhdGU9ImNvbXBsZXRlIixlLl9lbWl0R2F0aGVyaW5nU3RhdGVDaGFuZ2UoKSl9KSx0aGlzLl9sb2NhbEljZUNhbmRpZGF0ZXNCdWZmZXI9W119LHQucHJvdG90eXBlLmdldENvbmZpZ3VyYXRpb249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fY29uZmlnfSx0LnByb3RvdHlwZS5fY3JlYXRlVHJhbnNjZWl2ZXI9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy50cmFuc2NlaXZlcnMubGVuZ3RoPjAsbj17dHJhY2s6bnVsbCxpY2VHYXRoZXJlcjpudWxsLGljZVRyYW5zcG9ydDpudWxsLGR0bHNUcmFuc3BvcnQ6bnVsbCxsb2NhbENhcGFiaWxpdGllczpudWxsLHJlbW90ZUNhcGFiaWxpdGllczpudWxsLHJ0cFNlbmRlcjpudWxsLHJ0cFJlY2VpdmVyOm51bGwsa2luZDplLG1pZDpudWxsLHNlbmRFbmNvZGluZ1BhcmFtZXRlcnM6bnVsbCxyZWN2RW5jb2RpbmdQYXJhbWV0ZXJzOm51bGwsc3RyZWFtOm51bGwsd2FudFJlY2VpdmU6ITB9O2lmKHRoaXMudXNpbmdCdW5kbGUmJnQpbi5pY2VUcmFuc3BvcnQ9dGhpcy50cmFuc2NlaXZlcnNbMF0uaWNlVHJhbnNwb3J0LG4uZHRsc1RyYW5zcG9ydD10aGlzLnRyYW5zY2VpdmVyc1swXS5kdGxzVHJhbnNwb3J0O2Vsc2V7dmFyIHI9dGhpcy5fY3JlYXRlSWNlQW5kRHRsc1RyYW5zcG9ydHMoKTtuLmljZVRyYW5zcG9ydD1yLmljZVRyYW5zcG9ydCxuLmR0bHNUcmFuc3BvcnQ9ci5kdGxzVHJhbnNwb3J0fXJldHVybiB0aGlzLnRyYW5zY2VpdmVycy5wdXNoKG4pLG59LHQucHJvdG90eXBlLmFkZFRyYWNrPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuLHI9MDtyPHRoaXMudHJhbnNjZWl2ZXJzLmxlbmd0aDtyKyspdGhpcy50cmFuc2NlaXZlcnNbcl0udHJhY2t8fHRoaXMudHJhbnNjZWl2ZXJzW3JdLmtpbmQhPT1lLmtpbmR8fChuPXRoaXMudHJhbnNjZWl2ZXJzW3JdKTtyZXR1cm4gbnx8KG49dGhpcy5fY3JlYXRlVHJhbnNjZWl2ZXIoZS5raW5kKSksbi50cmFjaz1lLG4uc3RyZWFtPXQsbi5ydHBTZW5kZXI9bmV3IFJUQ1J0cFNlbmRlcihlLG4uZHRsc1RyYW5zcG9ydCksdGhpcy5fbWF5YmVGaXJlTmVnb3RpYXRpb25OZWVkZWQoKSxuLnJ0cFNlbmRlcn0sdC5wcm90b3R5cGUuYWRkU3RyZWFtPWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXM7aWYoZT49MTUwMjUpdGhpcy5sb2NhbFN0cmVhbXMucHVzaCh0KSx0LmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24oZSl7bi5hZGRUcmFjayhlLHQpfSk7ZWxzZXt2YXIgcj10LmNsb25lKCk7dC5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7dmFyIG49ci5nZXRUcmFja3MoKVt0XTtlLmFkZEV2ZW50TGlzdGVuZXIoImVuYWJsZWQiLGZ1bmN0aW9uKGUpe24uZW5hYmxlZD1lLmVuYWJsZWR9KX0pLHIuZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbihlKXtuLmFkZFRyYWNrKGUscil9KSx0aGlzLmxvY2FsU3RyZWFtcy5wdXNoKHIpfXRoaXMuX21heWJlRmlyZU5lZ290aWF0aW9uTmVlZGVkKCl9LHQucHJvdG90eXBlLnJlbW92ZVN0cmVhbT1mdW5jdGlvbihlKXt2YXIgdD10aGlzLmxvY2FsU3RyZWFtcy5pbmRleE9mKGUpO3Q+LTEmJih0aGlzLmxvY2FsU3RyZWFtcy5zcGxpY2UodCwxKSx0aGlzLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCgpKX0sdC5wcm90b3R5cGUuZ2V0U2VuZGVycz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYW5zY2VpdmVycy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuISFlLnJ0cFNlbmRlcn0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5ydHBTZW5kZXJ9KX0sdC5wcm90b3R5cGUuZ2V0UmVjZWl2ZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudHJhbnNjZWl2ZXJzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hIWUucnRwUmVjZWl2ZXJ9KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUucnRwUmVjZWl2ZXJ9KX0sdC5wcm90b3R5cGUuX2NyZWF0ZUljZUdhdGhlcmVyPWZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcyxpPW5ldyBSVENJY2VHYXRoZXJlcihuLmljZU9wdGlvbnMpO3JldHVybiBpLm9ubG9jYWxjYW5kaWRhdGU9ZnVuY3Rpb24oYSl7dmFyIG89bmV3IEV2ZW50KCJpY2VjYW5kaWRhdGUiKTtvLmNhbmRpZGF0ZT17c2RwTWlkOmUsc2RwTUxpbmVJbmRleDp0fTt2YXIgcz1hLmNhbmRpZGF0ZSxjPSFzfHwwPT09T2JqZWN0LmtleXMocykubGVuZ3RoO2M/dm9pZCAwPT09aS5zdGF0ZSYmKGkuc3RhdGU9ImNvbXBsZXRlZCIpOihzLmNvbXBvbmVudD0xLG8uY2FuZGlkYXRlLmNhbmRpZGF0ZT1yLndyaXRlQ2FuZGlkYXRlKHMpKTt2YXIgZD1yLnNwbGl0U2VjdGlvbnMobi5sb2NhbERlc2NyaXB0aW9uLnNkcCk7ZFtvLmNhbmRpZGF0ZS5zZHBNTGluZUluZGV4KzFdKz1jPyJhPWVuZC1vZi1jYW5kaWRhdGVzXHJcbiI6ImE9IitvLmNhbmRpZGF0ZS5jYW5kaWRhdGUrIlxyXG4iLG4ubG9jYWxEZXNjcmlwdGlvbi5zZHA9ZC5qb2luKCIiKTt2YXIgdT0obi5fcGVuZGluZ09mZmVyP24uX3BlbmRpbmdPZmZlcjpuLnRyYW5zY2VpdmVycykuZXZlcnkoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWNlR2F0aGVyZXImJiJjb21wbGV0ZWQiPT09ZS5pY2VHYXRoZXJlci5zdGF0ZX0pO3N3aXRjaChuLmljZUdhdGhlcmluZ1N0YXRlKXtjYXNlIm5ldyI6Y3x8bi5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyLnB1c2gobyksYyYmdSYmbi5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyLnB1c2gobmV3IEV2ZW50KCJpY2VjYW5kaWRhdGUiKSk7YnJlYWs7Y2FzZSJnYXRoZXJpbmciOm4uX2VtaXRCdWZmZXJlZENhbmRpZGF0ZXMoKSxjfHwobi5kaXNwYXRjaEV2ZW50KG8pLG51bGwhPT1uLm9uaWNlY2FuZGlkYXRlJiZuLm9uaWNlY2FuZGlkYXRlKG8pKSx1JiYobi5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgiaWNlY2FuZGlkYXRlIikpLG51bGwhPT1uLm9uaWNlY2FuZGlkYXRlJiZuLm9uaWNlY2FuZGlkYXRlKG5ldyBFdmVudCgiaWNlY2FuZGlkYXRlIikpLG4uaWNlR2F0aGVyaW5nU3RhdGU9ImNvbXBsZXRlIixuLl9lbWl0R2F0aGVyaW5nU3RhdGVDaGFuZ2UoKSl9fSxpfSx0LnByb3RvdHlwZS5fY3JlYXRlSWNlQW5kRHRsc1RyYW5zcG9ydHM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzLHQ9bmV3IFJUQ0ljZVRyYW5zcG9ydChudWxsKTt0Lm9uaWNlc3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtlLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKX07dmFyIG49bmV3IFJUQ0R0bHNUcmFuc3BvcnQodCk7cmV0dXJuIG4ub25kdGxzc3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtlLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKX0sbi5vbmVycm9yPWZ1bmN0aW9uKCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sInN0YXRlIix7dmFsdWU6ImZhaWxlZCIsd3JpdGFibGU6ITB9KSxlLl91cGRhdGVDb25uZWN0aW9uU3RhdGUoKX0se2ljZVRyYW5zcG9ydDp0LGR0bHNUcmFuc3BvcnQ6bn19LHQucHJvdG90eXBlLl9kaXNwb3NlSWNlQW5kRHRsc1RyYW5zcG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy50cmFuc2NlaXZlcnNbZV0uaWNlR2F0aGVyZXI7dCYmKGRlbGV0ZSB0Lm9ubG9jYWxjYW5kaWRhdGUsZGVsZXRlIHRoaXMudHJhbnNjZWl2ZXJzW2VdLmljZUdhdGhlcmVyKTt2YXIgbj10aGlzLnRyYW5zY2VpdmVyc1tlXS5pY2VUcmFuc3BvcnQ7biYmKGRlbGV0ZSBuLm9uaWNlc3RhdGVjaGFuZ2UsZGVsZXRlIHRoaXMudHJhbnNjZWl2ZXJzW2VdLmljZVRyYW5zcG9ydCk7dmFyIHI9dGhpcy50cmFuc2NlaXZlcnNbZV0uZHRsc1RyYW5zcG9ydDtyJiYoZGVsZXRlIHIub25kdGxzc3R0YXRlY2hhbmdlLGRlbGV0ZSByLm9uZXJyb3IsZGVsZXRlIHRoaXMudHJhbnNjZWl2ZXJzW2VdLmR0bHNUcmFuc3BvcnQpfSx0LnByb3RvdHlwZS5fdHJhbnNjZWl2ZT1mdW5jdGlvbih0LG4sYSl7dmFyIG89aSh0LmxvY2FsQ2FwYWJpbGl0aWVzLHQucmVtb3RlQ2FwYWJpbGl0aWVzKTtuJiZ0LnJ0cFNlbmRlciYmKG8uZW5jb2RpbmdzPXQuc2VuZEVuY29kaW5nUGFyYW1ldGVycyxvLnJ0Y3A9e2NuYW1lOnIubG9jYWxDTmFtZSxjb21wb3VuZDp0LnJ0Y3BQYXJhbWV0ZXJzLmNvbXBvdW5kfSx0LnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMubGVuZ3RoJiYoby5ydGNwLnNzcmM9dC5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMpLHQucnRwU2VuZGVyLnNlbmQobykpLGEmJnQucnRwUmVjZWl2ZXImJigidmlkZW8iPT09dC5raW5kJiZ0LnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMmJmU8MTUwMTkmJnQucmVjdkVuY29kaW5nUGFyYW1ldGVycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2RlbGV0ZSBlLnJ0eH0pLG8uZW5jb2RpbmdzPXQucmVjdkVuY29kaW5nUGFyYW1ldGVycyxvLnJ0Y3A9e2NuYW1lOnQucnRjcFBhcmFtZXRlcnMuY25hbWUsY29tcG91bmQ6dC5ydGNwUGFyYW1ldGVycy5jb21wb3VuZH0sdC5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzLmxlbmd0aCYmKG8ucnRjcC5zc3JjPXQuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjKSx0LnJ0cFJlY2VpdmVyLnJlY2VpdmUobykpfSx0LnByb3RvdHlwZS5zZXRMb2NhbERlc2NyaXB0aW9uPWZ1bmN0aW9uKGUpe3ZhciB0LG4sbz10aGlzO2lmKCFhKCJzZXRMb2NhbERlc2NyaXB0aW9uIixlLnR5cGUsdGhpcy5zaWduYWxpbmdTdGF0ZSkpe3ZhciBzPW5ldyBFcnJvcigiQ2FuIG5vdCBzZXQgbG9jYWwgIitlLnR5cGUrIiBpbiBzdGF0ZSAiK3RoaXMuc2lnbmFsaW5nU3RhdGUpO3JldHVybiBzLm5hbWU9IkludmFsaWRTdGF0ZUVycm9yIixhcmd1bWVudHMubGVuZ3RoPjImJiJmdW5jdGlvbiI9PXR5cGVvZiBhcmd1bWVudHNbMl0mJndpbmRvdy5zZXRUaW1lb3V0KGFyZ3VtZW50c1syXSwwLHMpLFByb21pc2UucmVqZWN0KHMpfWlmKCJvZmZlciI9PT1lLnR5cGUpdGhpcy5fcGVuZGluZ09mZmVyJiYodD1yLnNwbGl0U2VjdGlvbnMoZS5zZHApLG49dC5zaGlmdCgpLHQuZm9yRWFjaChmdW5jdGlvbihlLHQpe3ZhciBuPXIucGFyc2VSdHBQYXJhbWV0ZXJzKGUpO28uX3BlbmRpbmdPZmZlclt0XS5sb2NhbENhcGFiaWxpdGllcz1ufSksdGhpcy50cmFuc2NlaXZlcnM9dGhpcy5fcGVuZGluZ09mZmVyLGRlbGV0ZSB0aGlzLl9wZW5kaW5nT2ZmZXIpO2Vsc2UgaWYoImFuc3dlciI9PT1lLnR5cGUpe3Q9ci5zcGxpdFNlY3Rpb25zKG8ucmVtb3RlRGVzY3JpcHRpb24uc2RwKSxuPXQuc2hpZnQoKTt2YXIgYz1yLm1hdGNoUHJlZml4KG4sImE9aWNlLWxpdGUiKS5sZW5ndGg+MDt0LmZvckVhY2goZnVuY3Rpb24oZSx0KXt2YXIgYT1vLnRyYW5zY2VpdmVyc1t0XSxzPWEuaWNlR2F0aGVyZXIsZD1hLmljZVRyYW5zcG9ydCx1PWEuZHRsc1RyYW5zcG9ydCxsPWEubG9jYWxDYXBhYmlsaXRpZXMscD1hLnJlbW90ZUNhcGFiaWxpdGllcztpZighci5pc1JlamVjdGVkKGUpJiYhYS5pc0RhdGFjaGFubmVsKXt2YXIgZj1yLmdldEljZVBhcmFtZXRlcnMoZSxuKSxoPXIuZ2V0RHRsc1BhcmFtZXRlcnMoZSxuKTtjJiYoaC5yb2xlPSJzZXJ2ZXIiKSxvLnVzaW5nQnVuZGxlJiYwIT09dHx8KGQuc3RhcnQocyxmLGM/ImNvbnRyb2xsaW5nIjoiY29udHJvbGxlZCIpLHUuc3RhcnQoaCkpO3ZhciBtPWkobCxwKTtvLl90cmFuc2NlaXZlKGEsbS5jb2RlY3MubGVuZ3RoPjAsITEpfX0pfXN3aXRjaCh0aGlzLmxvY2FsRGVzY3JpcHRpb249e3R5cGU6ZS50eXBlLHNkcDplLnNkcH0sZS50eXBlKXtjYXNlIm9mZmVyIjp0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgiaGF2ZS1sb2NhbC1vZmZlciIpO2JyZWFrO2Nhc2UiYW5zd2VyIjp0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgic3RhYmxlIik7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKCd1bnN1cHBvcnRlZCB0eXBlICInK2UudHlwZSsnIicpfXZhciBkPWFyZ3VtZW50cy5sZW5ndGg+MSYmImZ1bmN0aW9uIj09dHlwZW9mIGFyZ3VtZW50c1sxXTtpZihkKXt2YXIgdT1hcmd1bWVudHNbMV07d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXt1KCksIm5ldyI9PT1vLmljZUdhdGhlcmluZ1N0YXRlJiYoby5pY2VHYXRoZXJpbmdTdGF0ZT0iZ2F0aGVyaW5nIixvLl9lbWl0R2F0aGVyaW5nU3RhdGVDaGFuZ2UoKSksby5fZW1pdEJ1ZmZlcmVkQ2FuZGlkYXRlcygpfSwwKX12YXIgbD1Qcm9taXNlLnJlc29sdmUoKTtyZXR1cm4gbC50aGVuKGZ1bmN0aW9uKCl7ZHx8KCJuZXciPT09by5pY2VHYXRoZXJpbmdTdGF0ZSYmKG8uaWNlR2F0aGVyaW5nU3RhdGU9ImdhdGhlcmluZyIsby5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlKCkpLHdpbmRvdy5zZXRUaW1lb3V0KG8uX2VtaXRCdWZmZXJlZENhbmRpZGF0ZXMuYmluZChvKSw1MDApKX0pLGx9LHQucHJvdG90eXBlLnNldFJlbW90ZURlc2NyaXB0aW9uPWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXM7aWYoIWEoInNldFJlbW90ZURlc2NyaXB0aW9uIix0LnR5cGUsdGhpcy5zaWduYWxpbmdTdGF0ZSkpe3ZhciBpPW5ldyBFcnJvcigiQ2FuIG5vdCBzZXQgcmVtb3RlICIrdC50eXBlKyIgaW4gc3RhdGUgIit0aGlzLnNpZ25hbGluZ1N0YXRlKTtyZXR1cm4gaS5uYW1lPSJJbnZhbGlkU3RhdGVFcnJvciIsYXJndW1lbnRzLmxlbmd0aD4yJiYiZnVuY3Rpb24iPT10eXBlb2YgYXJndW1lbnRzWzJdJiZ3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMl0sMCxpKSxQcm9taXNlLnJlamVjdChpKX12YXIgbz17fSxzPVtdLGM9ci5zcGxpdFNlY3Rpb25zKHQuc2RwKSxkPWMuc2hpZnQoKSx1PXIubWF0Y2hQcmVmaXgoZCwiYT1pY2UtbGl0ZSIpLmxlbmd0aD4wLGw9ci5tYXRjaFByZWZpeChkLCJhPWdyb3VwOkJVTkRMRSAiKS5sZW5ndGg+MDt0aGlzLnVzaW5nQnVuZGxlPWw7dmFyIHA9ci5tYXRjaFByZWZpeChkLCJhPWljZS1vcHRpb25zOiIpWzBdO3N3aXRjaCh0aGlzLmNhblRyaWNrbGVJY2VDYW5kaWRhdGVzPSEhcCYmcC5zdWJzdHIoMTQpLnNwbGl0KCIgIikuaW5kZXhPZigidHJpY2tsZSIpPj0wLGMuZm9yRWFjaChmdW5jdGlvbihpLGEpe3ZhciBjPXIuc3BsaXRMaW5lcyhpKSxwPXIuZ2V0S2luZChpKSxmPXIuaXNSZWplY3RlZChpKSxoPWNbMF0uc3Vic3RyKDIpLnNwbGl0KCIgIilbMl0sbT1yLmdldERpcmVjdGlvbihpLGQpLHY9ci5wYXJzZU1zaWQoaSksZz1yLmdldE1pZChpKXx8ci5nZW5lcmF0ZUlkZW50aWZpZXIoKTtpZigiYXBwbGljYXRpb24iIT09cHx8IkRUTFMvU0NUUCIhPT1oKXt2YXIgeSxDLGIsdyxQLF8sVCxTLFIsayxFLHg9ci5wYXJzZVJ0cFBhcmFtZXRlcnMoaSk7Znx8KGs9ci5nZXRJY2VQYXJhbWV0ZXJzKGksZCksKEU9ci5nZXREdGxzUGFyYW1ldGVycyhpLGQpKS5yb2xlPSJjbGllbnQiKSxUPXIucGFyc2VSdHBFbmNvZGluZ1BhcmFtZXRlcnMoaSk7dmFyIE89ci5wYXJzZVJ0Y3BQYXJhbWV0ZXJzKGkpLEQ9ci5tYXRjaFByZWZpeChpLCJhPWVuZC1vZi1jYW5kaWRhdGVzIixkKS5sZW5ndGg+MCxNPXIubWF0Y2hQcmVmaXgoaSwiYT1jYW5kaWRhdGU6IikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiByLnBhcnNlQ2FuZGlkYXRlKGUpfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiIxIj09PWUuY29tcG9uZW50fHwxPT09ZS5jb21wb25lbnR9KTsib2ZmZXIiIT09dC50eXBlfHxmPyJhbnN3ZXIiIT09dC50eXBlfHxmfHwobCYmYT4wJiYobi5fZGlzcG9zZUljZUFuZER0bHNUcmFuc3BvcnRzKGEpLG4udHJhbnNjZWl2ZXJzW2FdLmljZUdhdGhlcmVyPW4udHJhbnNjZWl2ZXJzWzBdLmljZUdhdGhlcmVyLG4udHJhbnNjZWl2ZXJzW2FdLmljZVRyYW5zcG9ydD1uLnRyYW5zY2VpdmVyc1swXS5pY2VUcmFuc3BvcnQsbi50cmFuc2NlaXZlcnNbYV0uZHRsc1RyYW5zcG9ydD1uLnRyYW5zY2VpdmVyc1swXS5kdGxzVHJhbnNwb3J0LG4udHJhbnNjZWl2ZXJzW2FdLnJ0cFNlbmRlciYmbi50cmFuc2NlaXZlcnNbYV0ucnRwU2VuZGVyLnNldFRyYW5zcG9ydChuLnRyYW5zY2VpdmVyc1swXS5kdGxzVHJhbnNwb3J0KSxuLnRyYW5zY2VpdmVyc1thXS5ydHBSZWNlaXZlciYmbi50cmFuc2NlaXZlcnNbYV0ucnRwUmVjZWl2ZXIuc2V0VHJhbnNwb3J0KG4udHJhbnNjZWl2ZXJzWzBdLmR0bHNUcmFuc3BvcnQpKSxDPSh5PW4udHJhbnNjZWl2ZXJzW2FdKS5pY2VHYXRoZXJlcixiPXkuaWNlVHJhbnNwb3J0LHc9eS5kdGxzVHJhbnNwb3J0LFA9eS5ydHBSZWNlaXZlcixfPXkuc2VuZEVuY29kaW5nUGFyYW1ldGVycyxTPXkubG9jYWxDYXBhYmlsaXRpZXMsbi50cmFuc2NlaXZlcnNbYV0ucmVjdkVuY29kaW5nUGFyYW1ldGVycz1ULG4udHJhbnNjZWl2ZXJzW2FdLnJlbW90ZUNhcGFiaWxpdGllcz14LG4udHJhbnNjZWl2ZXJzW2FdLnJ0Y3BQYXJhbWV0ZXJzPU8sKHV8fEQpJiZNLmxlbmd0aCYmYi5zZXRSZW1vdGVDYW5kaWRhdGVzKE0pLGwmJjAhPT1hfHwoYi5zdGFydChDLGssImNvbnRyb2xsaW5nIiksdy5zdGFydChFKSksbi5fdHJhbnNjZWl2ZSh5LCJzZW5kcmVjdiI9PT1tfHwicmVjdm9ubHkiPT09bSwic2VuZHJlY3YiPT09bXx8InNlbmRvbmx5Ij09PW0pLCFQfHwic2VuZHJlY3YiIT09bSYmInNlbmRvbmx5IiE9PW0/ZGVsZXRlIHkucnRwUmVjZWl2ZXI6KFI9UC50cmFjayx2PyhvW3Yuc3RyZWFtXXx8KG9bdi5zdHJlYW1dPW5ldyBNZWRpYVN0cmVhbSksb1t2LnN0cmVhbV0uYWRkVHJhY2soUikscy5wdXNoKFtSLFAsb1t2LnN0cmVhbV1dKSk6KG8uZGVmYXVsdHx8KG8uZGVmYXVsdD1uZXcgTWVkaWFTdHJlYW0pLG8uZGVmYXVsdC5hZGRUcmFjayhSKSxzLnB1c2goW1IsUCxvLmRlZmF1bHRdKSkpKTooKHk9bi50cmFuc2NlaXZlcnNbYV18fG4uX2NyZWF0ZVRyYW5zY2VpdmVyKHApKS5taWQ9Zyx5LmljZUdhdGhlcmVyfHwoeS5pY2VHYXRoZXJlcj1sJiZhPjA/bi50cmFuc2NlaXZlcnNbMF0uaWNlR2F0aGVyZXI6bi5fY3JlYXRlSWNlR2F0aGVyZXIoZyxhKSksIUR8fGwmJjAhPT1hfHx5LmljZVRyYW5zcG9ydC5zZXRSZW1vdGVDYW5kaWRhdGVzKE0pLFM9UlRDUnRwUmVjZWl2ZXIuZ2V0Q2FwYWJpbGl0aWVzKHApLGU8MTUwMTkmJihTLmNvZGVjcz1TLmNvZGVjcy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuInJ0eCIhPT1lLm5hbWV9KSksXz1be3NzcmM6MTAwMSooMiphKzIpfV0sInNlbmRyZWN2IiE9PW0mJiJzZW5kb25seSIhPT1tfHwoUj0oUD1uZXcgUlRDUnRwUmVjZWl2ZXIoeS5kdGxzVHJhbnNwb3J0LHApKS50cmFjayx2PyhvW3Yuc3RyZWFtXXx8KG9bdi5zdHJlYW1dPW5ldyBNZWRpYVN0cmVhbSxPYmplY3QuZGVmaW5lUHJvcGVydHkob1t2LnN0cmVhbV0sImlkIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHYuc3RyZWFtfX0pKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoUiwiaWQiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdi50cmFja319KSxvW3Yuc3RyZWFtXS5hZGRUcmFjayhSKSxzLnB1c2goW1IsUCxvW3Yuc3RyZWFtXV0pKTooby5kZWZhdWx0fHwoby5kZWZhdWx0PW5ldyBNZWRpYVN0cmVhbSksby5kZWZhdWx0LmFkZFRyYWNrKFIpLHMucHVzaChbUixQLG8uZGVmYXVsdF0pKSkseS5sb2NhbENhcGFiaWxpdGllcz1TLHkucmVtb3RlQ2FwYWJpbGl0aWVzPXgseS5ydHBSZWNlaXZlcj1QLHkucnRjcFBhcmFtZXRlcnM9Tyx5LnNlbmRFbmNvZGluZ1BhcmFtZXRlcnM9Xyx5LnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM9VCxuLl90cmFuc2NlaXZlKG4udHJhbnNjZWl2ZXJzW2FdLCExLCJzZW5kcmVjdiI9PT1tfHwic2VuZG9ubHkiPT09bSkpfWVsc2Ugbi50cmFuc2NlaXZlcnNbYV09e21pZDpnLGlzRGF0YWNoYW5uZWw6ITB9fSksdGhpcy5yZW1vdGVEZXNjcmlwdGlvbj17dHlwZTp0LnR5cGUsc2RwOnQuc2RwfSx0LnR5cGUpe2Nhc2Uib2ZmZXIiOnRoaXMuX3VwZGF0ZVNpZ25hbGluZ1N0YXRlKCJoYXZlLXJlbW90ZS1vZmZlciIpO2JyZWFrO2Nhc2UiYW5zd2VyIjp0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgic3RhYmxlIik7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgVHlwZUVycm9yKCd1bnN1cHBvcnRlZCB0eXBlICInK3QudHlwZSsnIicpfXJldHVybiBPYmplY3Qua2V5cyhvKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PW9bZV07aWYodC5nZXRUcmFja3MoKS5sZW5ndGgpe24ucmVtb3RlU3RyZWFtcy5wdXNoKHQpO3ZhciByPW5ldyBFdmVudCgiYWRkc3RyZWFtIik7ci5zdHJlYW09dCxuLmRpc3BhdGNoRXZlbnQociksbnVsbCE9PW4ub25hZGRzdHJlYW0mJndpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bi5vbmFkZHN0cmVhbShyKX0sMCkscy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciByPWVbMF0saT1lWzFdO2lmKHQuaWQ9PT1lWzJdLmlkKXt2YXIgYT1uZXcgRXZlbnQoInRyYWNrIik7YS50cmFjaz1yLGEucmVjZWl2ZXI9aSxhLnN0cmVhbXM9W3RdLG4uZGlzcGF0Y2hFdmVudChhKSxudWxsIT09bi5vbnRyYWNrJiZ3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe24ub250cmFjayhhKX0sMCl9fSl9fSksd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtuJiZuLnRyYW5zY2VpdmVycyYmbi50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbihlKXtlLmljZVRyYW5zcG9ydCYmIm5ldyI9PT1lLmljZVRyYW5zcG9ydC5zdGF0ZSYmZS5pY2VUcmFuc3BvcnQuZ2V0UmVtb3RlQ2FuZGlkYXRlcygpLmxlbmd0aD4wJiYoY29uc29sZS53YXJuKCJUaW1lb3V0IGZvciBhZGRSZW1vdGVDYW5kaWRhdGUuIENvbnNpZGVyIHNlbmRpbmcgYW4gZW5kLW9mLWNhbmRpZGF0ZXMgbm90aWZpY2F0aW9uIiksZS5pY2VUcmFuc3BvcnQuYWRkUmVtb3RlQ2FuZGlkYXRlKHt9KSl9KX0sNGUzKSxhcmd1bWVudHMubGVuZ3RoPjEmJiJmdW5jdGlvbiI9PXR5cGVvZiBhcmd1bWVudHNbMV0mJndpbmRvdy5zZXRUaW1lb3V0KGFyZ3VtZW50c1sxXSwwKSxQcm9taXNlLnJlc29sdmUoKX0sdC5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24oKXt0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UuaWNlVHJhbnNwb3J0JiZlLmljZVRyYW5zcG9ydC5zdG9wKCksZS5kdGxzVHJhbnNwb3J0JiZlLmR0bHNUcmFuc3BvcnQuc3RvcCgpLGUucnRwU2VuZGVyJiZlLnJ0cFNlbmRlci5zdG9wKCksZS5ydHBSZWNlaXZlciYmZS5ydHBSZWNlaXZlci5zdG9wKCl9KSx0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgiY2xvc2VkIil9LHQucHJvdG90eXBlLl91cGRhdGVTaWduYWxpbmdTdGF0ZT1mdW5jdGlvbihlKXt0aGlzLnNpZ25hbGluZ1N0YXRlPWU7dmFyIHQ9bmV3IEV2ZW50KCJzaWduYWxpbmdzdGF0ZWNoYW5nZSIpO3RoaXMuZGlzcGF0Y2hFdmVudCh0KSxudWxsIT09dGhpcy5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlJiZ0aGlzLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2UodCl9LHQucHJvdG90eXBlLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7InN0YWJsZSI9PT10aGlzLnNpZ25hbGluZ1N0YXRlJiYhMCE9PXRoaXMubmVlZE5lZ290aWF0aW9uJiYodGhpcy5uZWVkTmVnb3RpYXRpb249ITAsd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtpZighMSE9PWUubmVlZE5lZ290aWF0aW9uKXtlLm5lZWROZWdvdGlhdGlvbj0hMTt2YXIgdD1uZXcgRXZlbnQoIm5lZ290aWF0aW9ubmVlZGVkIik7ZS5kaXNwYXRjaEV2ZW50KHQpLG51bGwhPT1lLm9ubmVnb3RpYXRpb25uZWVkZWQmJmUub25uZWdvdGlhdGlvbm5lZWRlZCh0KX19LDApKX0sdC5wcm90b3R5cGUuX3VwZGF0ZUNvbm5lY3Rpb25TdGF0ZT1mdW5jdGlvbigpe3ZhciBlLHQ9e25ldzowLGNsb3NlZDowLGNvbm5lY3Rpbmc6MCxjaGVja2luZzowLGNvbm5lY3RlZDowLGNvbXBsZXRlZDowLGZhaWxlZDowfTtpZih0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbZS5pY2VUcmFuc3BvcnQuc3RhdGVdKyssdFtlLmR0bHNUcmFuc3BvcnQuc3RhdGVdKyt9KSx0LmNvbm5lY3RlZCs9dC5jb21wbGV0ZWQsZT0ibmV3Iix0LmZhaWxlZD4wP2U9ImZhaWxlZCI6dC5jb25uZWN0aW5nPjB8fHQuY2hlY2tpbmc+MD9lPSJjb25uZWN0aW5nIjp0LmRpc2Nvbm5lY3RlZD4wP2U9ImRpc2Nvbm5lY3RlZCI6dC5uZXc+MD9lPSJuZXciOih0LmNvbm5lY3RlZD4wfHx0LmNvbXBsZXRlZD4wKSYmKGU9ImNvbm5lY3RlZCIpLGUhPT10aGlzLmljZUNvbm5lY3Rpb25TdGF0ZSl7dGhpcy5pY2VDb25uZWN0aW9uU3RhdGU9ZTt2YXIgbj1uZXcgRXZlbnQoImljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSIpO3RoaXMuZGlzcGF0Y2hFdmVudChuKSxudWxsIT09dGhpcy5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZSYmdGhpcy5vbmljZWNvbm5lY3Rpb25zdGF0ZWNoYW5nZShuKX19LHQucHJvdG90eXBlLmNyZWF0ZU9mZmVyPWZ1bmN0aW9uKCl7dmFyIHQsbj10aGlzO2lmKHRoaXMuX3BlbmRpbmdPZmZlcil0aHJvdyBuZXcgRXJyb3IoImNyZWF0ZU9mZmVyIGNhbGxlZCB3aGlsZSB0aGVyZSBpcyBhIHBlbmRpbmcgb2ZmZXIuIik7MT09PWFyZ3VtZW50cy5sZW5ndGgmJiJmdW5jdGlvbiIhPXR5cGVvZiBhcmd1bWVudHNbMF0/dD1hcmd1bWVudHNbMF06Mz09PWFyZ3VtZW50cy5sZW5ndGgmJih0PWFyZ3VtZW50c1syXSk7dmFyIGk9dGhpcy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiJhdWRpbyI9PT1lLmtpbmR9KS5sZW5ndGgsYT10aGlzLnRyYW5zY2VpdmVycy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuInZpZGVvIj09PWUua2luZH0pLmxlbmd0aDtpZih0KXtpZih0Lm1hbmRhdG9yeXx8dC5vcHRpb25hbCl0aHJvdyBuZXcgVHlwZUVycm9yKCJMZWdhY3kgbWFuZGF0b3J5L29wdGlvbmFsIGNvbnN0cmFpbnRzIG5vdCBzdXBwb3J0ZWQuIik7dm9pZCAwIT09dC5vZmZlclRvUmVjZWl2ZUF1ZGlvJiYoaT0hMD09PXQub2ZmZXJUb1JlY2VpdmVBdWRpbz8xOiExPT09dC5vZmZlclRvUmVjZWl2ZUF1ZGlvPzA6dC5vZmZlclRvUmVjZWl2ZUF1ZGlvKSx2b2lkIDAhPT10Lm9mZmVyVG9SZWNlaXZlVmlkZW8mJihhPSEwPT09dC5vZmZlclRvUmVjZWl2ZVZpZGVvPzE6ITE9PT10Lm9mZmVyVG9SZWNlaXZlVmlkZW8/MDp0Lm9mZmVyVG9SZWNlaXZlVmlkZW8pfWZvcih0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKGUpeyJhdWRpbyI9PT1lLmtpbmQ/LS1pPDAmJihlLndhbnRSZWNlaXZlPSExKToidmlkZW8iPT09ZS5raW5kJiYtLWE8MCYmKGUud2FudFJlY2VpdmU9ITEpfSk7aT4wfHxhPjA7KWk+MCYmKHRoaXMuX2NyZWF0ZVRyYW5zY2VpdmVyKCJhdWRpbyIpLGktLSksYT4wJiYodGhpcy5fY3JlYXRlVHJhbnNjZWl2ZXIoInZpZGVvIiksYS0tKTt2YXIgbz1mdW5jdGlvbihlKXt2YXIgdD1lLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4iYXVkaW8iPT09ZS5raW5kfSksbj1lLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4idmlkZW8iPT09ZS5raW5kfSk7Zm9yKGU9W107dC5sZW5ndGh8fG4ubGVuZ3RoOyl0Lmxlbmd0aCYmZS5wdXNoKHQuc2hpZnQoKSksbi5sZW5ndGgmJmUucHVzaChuLnNoaWZ0KCkpO3JldHVybiBlfSh0aGlzLnRyYW5zY2VpdmVycykscz1yLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlKCk7by5mb3JFYWNoKGZ1bmN0aW9uKHQsaSl7dmFyIGE9dC50cmFjayxzPXQua2luZCxjPXIuZ2VuZXJhdGVJZGVudGlmaWVyKCk7dC5taWQ9Yyx0LmljZUdhdGhlcmVyfHwodC5pY2VHYXRoZXJlcj1uLnVzaW5nQnVuZGxlJiZpPjA/b1swXS5pY2VHYXRoZXJlcjpuLl9jcmVhdGVJY2VHYXRoZXJlcihjLGkpKTt2YXIgZD1SVENSdHBTZW5kZXIuZ2V0Q2FwYWJpbGl0aWVzKHMpO2U8MTUwMTkmJihkLmNvZGVjcz1kLmNvZGVjcy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuInJ0eCIhPT1lLm5hbWV9KSksZC5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihlKXsiSDI2NCI9PT1lLm5hbWUmJnZvaWQgMD09PWUucGFyYW1ldGVyc1sibGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQiXSYmKGUucGFyYW1ldGVyc1sibGV2ZWwtYXN5bW1ldHJ5LWFsbG93ZWQiXT0iMSIpfSk7dmFyIHU9W3tzc3JjOjEwMDEqKDIqaSsxKX1dO2EmJmU+PTE1MDE5JiYidmlkZW8iPT09cyYmKHVbMF0ucnR4PXtzc3JjOjEwMDEqKDIqaSsxKSsxfSksdC53YW50UmVjZWl2ZSYmKHQucnRwUmVjZWl2ZXI9bmV3IFJUQ1J0cFJlY2VpdmVyKHQuZHRsc1RyYW5zcG9ydCxzKSksdC5sb2NhbENhcGFiaWxpdGllcz1kLHQuc2VuZEVuY29kaW5nUGFyYW1ldGVycz11fSksIm1heC1jb21wYXQiIT09dGhpcy5fY29uZmlnLmJ1bmRsZVBvbGljeSYmKHMrPSJhPWdyb3VwOkJVTkRMRSAiK28ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLm1pZH0pLmpvaW4oIiAiKSsiXHJcbiIpLHMrPSJhPWljZS1vcHRpb25zOnRyaWNrbGVcclxuIixvLmZvckVhY2goZnVuY3Rpb24oZSx0KXtzKz1yLndyaXRlTWVkaWFTZWN0aW9uKGUsZS5sb2NhbENhcGFiaWxpdGllcywib2ZmZXIiLGUuc3RyZWFtKSxzKz0iYT1ydGNwLXJzaXplXHJcbiJ9KSx0aGlzLl9wZW5kaW5nT2ZmZXI9bzt2YXIgYz1uZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHt0eXBlOiJvZmZlciIsc2RwOnN9KTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCYmImZ1bmN0aW9uIj09dHlwZW9mIGFyZ3VtZW50c1swXSYmd2luZG93LnNldFRpbWVvdXQoYXJndW1lbnRzWzBdLDAsYyksUHJvbWlzZS5yZXNvbHZlKGMpfSx0LnByb3RvdHlwZS5jcmVhdGVBbnN3ZXI9ZnVuY3Rpb24oKXt2YXIgdD1yLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlKCk7dGhpcy51c2luZ0J1bmRsZSYmKHQrPSJhPWdyb3VwOkJVTkRMRSAiK3RoaXMudHJhbnNjZWl2ZXJzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5taWR9KS5qb2luKCIgIikrIlxyXG4iKSx0aGlzLnRyYW5zY2VpdmVycy5mb3JFYWNoKGZ1bmN0aW9uKG4sYSl7aWYobi5pc0RhdGFjaGFubmVsKXQrPSJtPWFwcGxpY2F0aW9uIDAgRFRMUy9TQ1RQIDUwMDBcclxuYz1JTiBJUDQgMC4wLjAuMFxyXG5hPW1pZDoiK24ubWlkKyJcclxuIjtlbHNle3ZhciBvO2lmKG4uc3RyZWFtKSJhdWRpbyI9PT1uLmtpbmQ/bz1uLnN0cmVhbS5nZXRBdWRpb1RyYWNrcygpWzBdOiJ2aWRlbyI9PT1uLmtpbmQmJihvPW4uc3RyZWFtLmdldFZpZGVvVHJhY2tzKClbMF0pLG8mJmU+PTE1MDE5JiYidmlkZW8iPT09bi5raW5kJiYobi5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eD17c3NyYzoxMDAxKigyKmErMikrMX0pO3ZhciBzPWkobi5sb2NhbENhcGFiaWxpdGllcyxuLnJlbW90ZUNhcGFiaWxpdGllcyk7IXMuY29kZWNzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4icnR4Ij09PWUubmFtZS50b0xvd2VyQ2FzZSgpfSkubGVuZ3RoJiZuLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4JiZkZWxldGUgbi5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCx0Kz1yLndyaXRlTWVkaWFTZWN0aW9uKG4scywiYW5zd2VyIixuLnN0cmVhbSksbi5ydGNwUGFyYW1ldGVycyYmbi5ydGNwUGFyYW1ldGVycy5yZWR1Y2VkU2l6ZSYmKHQrPSJhPXJ0Y3AtcnNpemVcclxuIil9fSk7dmFyIG49bmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7dHlwZToiYW5zd2VyIixzZHA6dH0pO3JldHVybiBhcmd1bWVudHMubGVuZ3RoJiYiZnVuY3Rpb24iPT10eXBlb2YgYXJndW1lbnRzWzBdJiZ3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMF0sMCxuKSxQcm9taXNlLnJlc29sdmUobil9LHQucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZT1mdW5jdGlvbihlKXtpZihlKXt2YXIgdD1lLnNkcE1MaW5lSW5kZXg7aWYoZS5zZHBNaWQpZm9yKHZhciBuPTA7bjx0aGlzLnRyYW5zY2VpdmVycy5sZW5ndGg7bisrKWlmKHRoaXMudHJhbnNjZWl2ZXJzW25dLm1pZD09PWUuc2RwTWlkKXt0PW47YnJlYWt9dmFyIGk9dGhpcy50cmFuc2NlaXZlcnNbdF07aWYoaSl7dmFyIGE9T2JqZWN0LmtleXMoZS5jYW5kaWRhdGUpLmxlbmd0aD4wP3IucGFyc2VDYW5kaWRhdGUoZS5jYW5kaWRhdGUpOnt9O2lmKCJ0Y3AiPT09YS5wcm90b2NvbCYmKDA9PT1hLnBvcnR8fDk9PT1hLnBvcnQpKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTtpZihhLmNvbXBvbmVudCYmIjEiIT09YS5jb21wb25lbnQmJjEhPT1hLmNvbXBvbmVudClyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7aS5pY2VUcmFuc3BvcnQuYWRkUmVtb3RlQ2FuZGlkYXRlKGEpO3ZhciBvPXIuc3BsaXRTZWN0aW9ucyh0aGlzLnJlbW90ZURlc2NyaXB0aW9uLnNkcCk7b1t0KzFdKz0oYS50eXBlP2UuY2FuZGlkYXRlLnRyaW0oKToiYT1lbmQtb2YtY2FuZGlkYXRlcyIpKyJcclxuIix0aGlzLnJlbW90ZURlc2NyaXB0aW9uLnNkcD1vLmpvaW4oIiIpfX1lbHNlIGZvcih2YXIgcz0wO3M8dGhpcy50cmFuc2NlaXZlcnMubGVuZ3RoO3MrKylpZih0aGlzLnRyYW5zY2VpdmVyc1tzXS5pY2VUcmFuc3BvcnQuYWRkUmVtb3RlQ2FuZGlkYXRlKHt9KSx0aGlzLnVzaW5nQnVuZGxlKXJldHVybiBQcm9taXNlLnJlc29sdmUoKTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD4xJiYiZnVuY3Rpb24iPT10eXBlb2YgYXJndW1lbnRzWzFdJiZ3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMV0sMCksUHJvbWlzZS5yZXNvbHZlKCl9LHQucHJvdG90eXBlLmdldFN0YXRzPWZ1bmN0aW9uKCl7dmFyIGU9W107dGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbih0KXtbInJ0cFNlbmRlciIsInJ0cFJlY2VpdmVyIiwiaWNlR2F0aGVyZXIiLCJpY2VUcmFuc3BvcnQiLCJkdGxzVHJhbnNwb3J0Il0uZm9yRWFjaChmdW5jdGlvbihuKXt0W25dJiZlLnB1c2godFtuXS5nZXRTdGF0cygpKX0pfSk7dmFyIHQ9YXJndW1lbnRzLmxlbmd0aD4xJiYiZnVuY3Rpb24iPT10eXBlb2YgYXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV07cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4pe3ZhciByPW5ldyBNYXA7UHJvbWlzZS5hbGwoZSkudGhlbihmdW5jdGlvbihlKXtlLmZvckVhY2goZnVuY3Rpb24oZSl7T2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdLnR5cGU9ZnVuY3Rpb24oZSl7cmV0dXJue2luYm91bmRydHA6ImluYm91bmQtcnRwIixvdXRib3VuZHJ0cDoib3V0Ym91bmQtcnRwIixjYW5kaWRhdGVwYWlyOiJjYW5kaWRhdGUtcGFpciIsbG9jYWxjYW5kaWRhdGU6ImxvY2FsLWNhbmRpZGF0ZSIscmVtb3RlY2FuZGlkYXRlOiJyZW1vdGUtY2FuZGlkYXRlIn1bZS50eXBlXXx8ZS50eXBlfShlW3RdKSxyLnNldCh0LGVbdF0pfSl9KSx0JiZ3aW5kb3cuc2V0VGltZW91dCh0LDAsciksbihyKX0pfSl9LHR9fSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtnZW5lcmF0ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsMTApfX07ci5sb2NhbENOYW1lPXIuZ2VuZXJhdGVJZGVudGlmaWVyKCksci5zcGxpdExpbmVzPWZ1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0oKS5zcGxpdCgiXG4iKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUudHJpbSgpfSl9LHIuc3BsaXRTZWN0aW9ucz1mdW5jdGlvbihlKXtyZXR1cm4gZS5zcGxpdCgiXG5tPSIpLm1hcChmdW5jdGlvbihlLHQpe3JldHVybih0PjA/Im09IitlOmUpLnRyaW0oKSsiXHJcbiJ9KX0sci5tYXRjaFByZWZpeD1mdW5jdGlvbihlLHQpe3JldHVybiByLnNwbGl0TGluZXMoZSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiAwPT09ZS5pbmRleE9mKHQpfSl9LHIucGFyc2VDYW5kaWRhdGU9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49e2ZvdW5kYXRpb246KHQ9MD09PWUuaW5kZXhPZigiYT1jYW5kaWRhdGU6Iik/ZS5zdWJzdHJpbmcoMTIpLnNwbGl0KCIgIik6ZS5zdWJzdHJpbmcoMTApLnNwbGl0KCIgIikpWzBdLGNvbXBvbmVudDp0WzFdLHByb3RvY29sOnRbMl0udG9Mb3dlckNhc2UoKSxwcmlvcml0eTpwYXJzZUludCh0WzNdLDEwKSxpcDp0WzRdLHBvcnQ6cGFyc2VJbnQodFs1XSwxMCksdHlwZTp0WzddfSxyPTg7cjx0Lmxlbmd0aDtyKz0yKXN3aXRjaCh0W3JdKXtjYXNlInJhZGRyIjpuLnJlbGF0ZWRBZGRyZXNzPXRbcisxXTticmVhaztjYXNlInJwb3J0IjpuLnJlbGF0ZWRQb3J0PXBhcnNlSW50KHRbcisxXSwxMCk7YnJlYWs7Y2FzZSJ0Y3B0eXBlIjpuLnRjcFR5cGU9dFtyKzFdO2JyZWFrO2RlZmF1bHQ6blt0W3JdXT10W3IrMV19cmV0dXJuIG59LHIud3JpdGVDYW5kaWRhdGU9ZnVuY3Rpb24oZSl7dmFyIHQ9W107dC5wdXNoKGUuZm91bmRhdGlvbiksdC5wdXNoKGUuY29tcG9uZW50KSx0LnB1c2goZS5wcm90b2NvbC50b1VwcGVyQ2FzZSgpKSx0LnB1c2goZS5wcmlvcml0eSksdC5wdXNoKGUuaXApLHQucHVzaChlLnBvcnQpO3ZhciBuPWUudHlwZTtyZXR1cm4gdC5wdXNoKCJ0eXAiKSx0LnB1c2gobiksImhvc3QiIT09biYmZS5yZWxhdGVkQWRkcmVzcyYmZS5yZWxhdGVkUG9ydCYmKHQucHVzaCgicmFkZHIiKSx0LnB1c2goZS5yZWxhdGVkQWRkcmVzcyksdC5wdXNoKCJycG9ydCIpLHQucHVzaChlLnJlbGF0ZWRQb3J0KSksZS50Y3BUeXBlJiYidGNwIj09PWUucHJvdG9jb2wudG9Mb3dlckNhc2UoKSYmKHQucHVzaCgidGNwdHlwZSIpLHQucHVzaChlLnRjcFR5cGUpKSwiY2FuZGlkYXRlOiIrdC5qb2luKCIgIil9LHIucGFyc2VJY2VPcHRpb25zPWZ1bmN0aW9uKGUpe3JldHVybiBlLnN1YnN0cigxNCkuc3BsaXQoIiAiKX0sci5wYXJzZVJ0cE1hcD1mdW5jdGlvbihlKXt2YXIgdD1lLnN1YnN0cig5KS5zcGxpdCgiICIpLG49e3BheWxvYWRUeXBlOnBhcnNlSW50KHQuc2hpZnQoKSwxMCl9O3JldHVybiB0PXRbMF0uc3BsaXQoIi8iKSxuLm5hbWU9dFswXSxuLmNsb2NrUmF0ZT1wYXJzZUludCh0WzFdLDEwKSxuLm51bUNoYW5uZWxzPTM9PT10Lmxlbmd0aD9wYXJzZUludCh0WzJdLDEwKToxLG59LHIud3JpdGVSdHBNYXA9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXlsb2FkVHlwZTtyZXR1cm4gdm9pZCAwIT09ZS5wcmVmZXJyZWRQYXlsb2FkVHlwZSYmKHQ9ZS5wcmVmZXJyZWRQYXlsb2FkVHlwZSksImE9cnRwbWFwOiIrdCsiICIrZS5uYW1lKyIvIitlLmNsb2NrUmF0ZSsoMSE9PWUubnVtQ2hhbm5lbHM/Ii8iK2UubnVtQ2hhbm5lbHM6IiIpKyJcclxuIn0sci5wYXJzZUV4dG1hcD1mdW5jdGlvbihlKXt2YXIgdD1lLnN1YnN0cig5KS5zcGxpdCgiICIpO3JldHVybntpZDpwYXJzZUludCh0WzBdLDEwKSxkaXJlY3Rpb246dFswXS5pbmRleE9mKCIvIik+MD90WzBdLnNwbGl0KCIvIilbMV06InNlbmRyZWN2Iix1cmk6dFsxXX19LHIud3JpdGVFeHRtYXA9ZnVuY3Rpb24oZSl7cmV0dXJuImE9ZXh0bWFwOiIrKGUuaWR8fGUucHJlZmVycmVkSWQpKyhlLmRpcmVjdGlvbiYmInNlbmRyZWN2IiE9PWUuZGlyZWN0aW9uPyIvIitlLmRpcmVjdGlvbjoiIikrIiAiK2UudXJpKyJcclxuIn0sci5wYXJzZUZtdHA9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG49e30scj1lLnN1YnN0cihlLmluZGV4T2YoIiAiKSsxKS5zcGxpdCgiOyIpLGk9MDtpPHIubGVuZ3RoO2krKyluWyh0PXJbaV0udHJpbSgpLnNwbGl0KCI9IikpWzBdLnRyaW0oKV09dFsxXTtyZXR1cm4gbn0sci53cml0ZUZtdHA9ZnVuY3Rpb24oZSl7dmFyIHQ9IiIsbj1lLnBheWxvYWRUeXBlO2lmKHZvaWQgMCE9PWUucHJlZmVycmVkUGF5bG9hZFR5cGUmJihuPWUucHJlZmVycmVkUGF5bG9hZFR5cGUpLGUucGFyYW1ldGVycyYmT2JqZWN0LmtleXMoZS5wYXJhbWV0ZXJzKS5sZW5ndGgpe3ZhciByPVtdO09iamVjdC5rZXlzKGUucGFyYW1ldGVycykuZm9yRWFjaChmdW5jdGlvbih0KXtyLnB1c2godCsiPSIrZS5wYXJhbWV0ZXJzW3RdKX0pLHQrPSJhPWZtdHA6IituKyIgIityLmpvaW4oIjsiKSsiXHJcbiJ9cmV0dXJuIHR9LHIucGFyc2VSdGNwRmI9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdWJzdHIoZS5pbmRleE9mKCIgIikrMSkuc3BsaXQoIiAiKTtyZXR1cm57dHlwZTp0LnNoaWZ0KCkscGFyYW1ldGVyOnQuam9pbigiICIpfX0sci53cml0ZVJ0Y3BGYj1mdW5jdGlvbihlKXt2YXIgdD0iIixuPWUucGF5bG9hZFR5cGU7cmV0dXJuIHZvaWQgMCE9PWUucHJlZmVycmVkUGF5bG9hZFR5cGUmJihuPWUucHJlZmVycmVkUGF5bG9hZFR5cGUpLGUucnRjcEZlZWRiYWNrJiZlLnJ0Y3BGZWVkYmFjay5sZW5ndGgmJmUucnRjcEZlZWRiYWNrLmZvckVhY2goZnVuY3Rpb24oZSl7dCs9ImE9cnRjcC1mYjoiK24rIiAiK2UudHlwZSsoZS5wYXJhbWV0ZXImJmUucGFyYW1ldGVyLmxlbmd0aD8iICIrZS5wYXJhbWV0ZXI6IiIpKyJcclxuIn0pLHR9LHIucGFyc2VTc3JjTWVkaWE9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5pbmRleE9mKCIgIiksbj17c3NyYzpwYXJzZUludChlLnN1YnN0cig3LHQtNyksMTApfSxyPWUuaW5kZXhPZigiOiIsdCk7cmV0dXJuIHI+LTE/KG4uYXR0cmlidXRlPWUuc3Vic3RyKHQrMSxyLXQtMSksbi52YWx1ZT1lLnN1YnN0cihyKzEpKTpuLmF0dHJpYnV0ZT1lLnN1YnN0cih0KzEpLG59LHIuZ2V0TWlkPWZ1bmN0aW9uKGUpe3ZhciB0PXIubWF0Y2hQcmVmaXgoZSwiYT1taWQ6IilbMF07aWYodClyZXR1cm4gdC5zdWJzdHIoNil9LHIucGFyc2VGaW5nZXJwcmludD1mdW5jdGlvbihlKXt2YXIgdD1lLnN1YnN0cigxNCkuc3BsaXQoIiAiKTtyZXR1cm57YWxnb3JpdGhtOnRbMF0udG9Mb3dlckNhc2UoKSx2YWx1ZTp0WzFdfX0sci5nZXREdGxzUGFyYW1ldGVycz1mdW5jdGlvbihlLHQpe3JldHVybntyb2xlOiJhdXRvIixmaW5nZXJwcmludHM6ci5tYXRjaFByZWZpeChlK3QsImE9ZmluZ2VycHJpbnQ6IikubWFwKHIucGFyc2VGaW5nZXJwcmludCl9fSxyLndyaXRlRHRsc1BhcmFtZXRlcnM9ZnVuY3Rpb24oZSx0KXt2YXIgbj0iYT1zZXR1cDoiK3QrIlxyXG4iO3JldHVybiBlLmZpbmdlcnByaW50cy5mb3JFYWNoKGZ1bmN0aW9uKGUpe24rPSJhPWZpbmdlcnByaW50OiIrZS5hbGdvcml0aG0rIiAiK2UudmFsdWUrIlxyXG4ifSksbn0sci5nZXRJY2VQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUsdCl7dmFyIG49ci5zcGxpdExpbmVzKGUpO3JldHVybnt1c2VybmFtZUZyYWdtZW50OihuPW4uY29uY2F0KHIuc3BsaXRMaW5lcyh0KSkpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gMD09PWUuaW5kZXhPZigiYT1pY2UtdWZyYWc6Iil9KVswXS5zdWJzdHIoMTIpLHBhc3N3b3JkOm4uZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiAwPT09ZS5pbmRleE9mKCJhPWljZS1wd2Q6Iil9KVswXS5zdWJzdHIoMTApfX0sci53cml0ZUljZVBhcmFtZXRlcnM9ZnVuY3Rpb24oZSl7cmV0dXJuImE9aWNlLXVmcmFnOiIrZS51c2VybmFtZUZyYWdtZW50KyJcclxuYT1pY2UtcHdkOiIrZS5wYXNzd29yZCsiXHJcbiJ9LHIucGFyc2VSdHBQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD17Y29kZWNzOltdLGhlYWRlckV4dGVuc2lvbnM6W10sZmVjTWVjaGFuaXNtczpbXSxydGNwOltdfSxuPXIuc3BsaXRMaW5lcyhlKVswXS5zcGxpdCgiICIpLGk9MztpPG4ubGVuZ3RoO2krKyl7dmFyIGE9bltpXSxvPXIubWF0Y2hQcmVmaXgoZSwiYT1ydHBtYXA6IithKyIgIilbMF07aWYobyl7dmFyIHM9ci5wYXJzZVJ0cE1hcChvKSxjPXIubWF0Y2hQcmVmaXgoZSwiYT1mbXRwOiIrYSsiICIpO3N3aXRjaChzLnBhcmFtZXRlcnM9Yy5sZW5ndGg/ci5wYXJzZUZtdHAoY1swXSk6e30scy5ydGNwRmVlZGJhY2s9ci5tYXRjaFByZWZpeChlLCJhPXJ0Y3AtZmI6IithKyIgIikubWFwKHIucGFyc2VSdGNwRmIpLHQuY29kZWNzLnB1c2gocykscy5uYW1lLnRvVXBwZXJDYXNlKCkpe2Nhc2UiUkVEIjpjYXNlIlVMUEZFQyI6dC5mZWNNZWNoYW5pc21zLnB1c2gocy5uYW1lLnRvVXBwZXJDYXNlKCkpfX19cmV0dXJuIHIubWF0Y2hQcmVmaXgoZSwiYT1leHRtYXA6IikuZm9yRWFjaChmdW5jdGlvbihlKXt0LmhlYWRlckV4dGVuc2lvbnMucHVzaChyLnBhcnNlRXh0bWFwKGUpKX0pLHR9LHIud3JpdGVSdHBEZXNjcmlwdGlvbj1mdW5jdGlvbihlLHQpe3ZhciBuPSIiO24rPSJtPSIrZSsiICIsbis9dC5jb2RlY3MubGVuZ3RoPjA/IjkiOiIwIixuKz0iIFVEUC9UTFMvUlRQL1NBVlBGICIsbis9dC5jb2RlY3MubWFwKGZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDAhPT1lLnByZWZlcnJlZFBheWxvYWRUeXBlP2UucHJlZmVycmVkUGF5bG9hZFR5cGU6ZS5wYXlsb2FkVHlwZX0pLmpvaW4oIiAiKSsiXHJcbiIsbis9ImM9SU4gSVA0IDAuMC4wLjBcclxuIixuKz0iYT1ydGNwOjkgSU4gSVA0IDAuMC4wLjBcclxuIix0LmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe24rPXIud3JpdGVSdHBNYXAoZSksbis9ci53cml0ZUZtdHAoZSksbis9ci53cml0ZVJ0Y3BGYihlKX0pO3ZhciBpPTA7cmV0dXJuIHQuY29kZWNzLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5tYXhwdGltZT5pJiYoaT1lLm1heHB0aW1lKX0pLGk+MCYmKG4rPSJhPW1heHB0aW1lOiIraSsiXHJcbiIpLG4rPSJhPXJ0Y3AtbXV4XHJcbiIsdC5oZWFkZXJFeHRlbnNpb25zLmZvckVhY2goZnVuY3Rpb24oZSl7bis9ci53cml0ZUV4dG1hcChlKX0pLG59LHIucGFyc2VSdHBFbmNvZGluZ1BhcmFtZXRlcnM9ZnVuY3Rpb24oZSl7dmFyIHQsbj1bXSxpPXIucGFyc2VSdHBQYXJhbWV0ZXJzKGUpLGE9LTEhPT1pLmZlY01lY2hhbmlzbXMuaW5kZXhPZigiUkVEIiksbz0tMSE9PWkuZmVjTWVjaGFuaXNtcy5pbmRleE9mKCJVTFBGRUMiKSxzPXIubWF0Y2hQcmVmaXgoZSwiYT1zc3JjOiIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gci5wYXJzZVNzcmNNZWRpYShlKX0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4iY25hbWUiPT09ZS5hdHRyaWJ1dGV9KSxjPXMubGVuZ3RoPjAmJnNbMF0uc3NyYyxkPXIubWF0Y2hQcmVmaXgoZSwiYT1zc3JjLWdyb3VwOkZJRCIpLm1hcChmdW5jdGlvbihlKXt2YXIgdD1lLnNwbGl0KCIgIik7cmV0dXJuIHQuc2hpZnQoKSx0Lm1hcChmdW5jdGlvbihlKXtyZXR1cm4gcGFyc2VJbnQoZSwxMCl9KX0pO2QubGVuZ3RoPjAmJmRbMF0ubGVuZ3RoPjEmJmRbMF1bMF09PT1jJiYodD1kWzBdWzFdKSxpLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKCJSVFgiPT09ZS5uYW1lLnRvVXBwZXJDYXNlKCkmJmUucGFyYW1ldGVycy5hcHQpe3ZhciByPXtzc3JjOmMsY29kZWNQYXlsb2FkVHlwZTpwYXJzZUludChlLnBhcmFtZXRlcnMuYXB0LDEwKSxydHg6e3NzcmM6dH19O24ucHVzaChyKSxhJiYoKHI9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShyKSkpLmZlYz17c3NyYzp0LG1lY2hhbmlzbTpvPyJyZWQrdWxwZmVjIjoicmVkIn0sbi5wdXNoKHIpKX19KSwwPT09bi5sZW5ndGgmJmMmJm4ucHVzaCh7c3NyYzpjfSk7dmFyIHU9ci5tYXRjaFByZWZpeChlLCJiPSIpO3JldHVybiB1Lmxlbmd0aCYmKDA9PT11WzBdLmluZGV4T2YoImI9VElBUzoiKT91PXBhcnNlSW50KHVbMF0uc3Vic3RyKDcpLDEwKTowPT09dVswXS5pbmRleE9mKCJiPUFTOiIpJiYodT1wYXJzZUludCh1WzBdLnN1YnN0cig1KSwxMCkpLG4uZm9yRWFjaChmdW5jdGlvbihlKXtlLm1heEJpdHJhdGU9dX0pKSxufSxyLnBhcnNlUnRjcFBhcmFtZXRlcnM9ZnVuY3Rpb24oZSl7dmFyIHQ9e30sbj1yLm1hdGNoUHJlZml4KGUsImE9c3NyYzoiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHIucGFyc2VTc3JjTWVkaWEoZSl9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuImNuYW1lIj09PWUuYXR0cmlidXRlfSlbMF07biYmKHQuY25hbWU9bi52YWx1ZSx0LnNzcmM9bi5zc3JjKTt2YXIgaT1yLm1hdGNoUHJlZml4KGUsImE9cnRjcC1yc2l6ZSIpO3QucmVkdWNlZFNpemU9aS5sZW5ndGg+MCx0LmNvbXBvdW5kPTA9PT1pLmxlbmd0aDt2YXIgYT1yLm1hdGNoUHJlZml4KGUsImE9cnRjcC1tdXgiKTtyZXR1cm4gdC5tdXg9YS5sZW5ndGg+MCx0fSxyLnBhcnNlTXNpZD1mdW5jdGlvbihlKXt2YXIgdCxuPXIubWF0Y2hQcmVmaXgoZSwiYT1tc2lkOiIpO2lmKDE9PT1uLmxlbmd0aClyZXR1cm57c3RyZWFtOih0PW5bMF0uc3Vic3RyKDcpLnNwbGl0KCIgIikpWzBdLHRyYWNrOnRbMV19O3ZhciBpPXIubWF0Y2hQcmVmaXgoZSwiYT1zc3JjOiIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gci5wYXJzZVNzcmNNZWRpYShlKX0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4ibXNpZCI9PT1lLmF0dHJpYnV0ZX0pO3JldHVybiBpLmxlbmd0aD4wP3tzdHJlYW06KHQ9aVswXS52YWx1ZS5zcGxpdCgiICIpKVswXSx0cmFjazp0WzFdfTp2b2lkIDB9LHIud3JpdGVTZXNzaW9uQm9pbGVycGxhdGU9ZnVuY3Rpb24oKXtyZXR1cm4idj0wXHJcbm89dGhpc2lzYWRhcHRlcm9ydGMgODE2OTYzOTkxNTY0Njk0MzEzNyAyIElOIElQNCAxMjcuMC4wLjFcclxucz0tXHJcbnQ9MCAwXHJcbiJ9LHIud3JpdGVNZWRpYVNlY3Rpb249ZnVuY3Rpb24oZSx0LG4saSl7dmFyIGE9ci53cml0ZVJ0cERlc2NyaXB0aW9uKGUua2luZCx0KTtpZihhKz1yLndyaXRlSWNlUGFyYW1ldGVycyhlLmljZUdhdGhlcmVyLmdldExvY2FsUGFyYW1ldGVycygpKSxhKz1yLndyaXRlRHRsc1BhcmFtZXRlcnMoZS5kdGxzVHJhbnNwb3J0LmdldExvY2FsUGFyYW1ldGVycygpLCJvZmZlciI9PT1uPyJhY3RwYXNzIjoiYWN0aXZlIiksYSs9ImE9bWlkOiIrZS5taWQrIlxyXG4iLGUuZGlyZWN0aW9uP2ErPSJhPSIrZS5kaXJlY3Rpb24rIlxyXG4iOmUucnRwU2VuZGVyJiZlLnJ0cFJlY2VpdmVyP2ErPSJhPXNlbmRyZWN2XHJcbiI6ZS5ydHBTZW5kZXI/YSs9ImE9c2VuZG9ubHlcclxuIjplLnJ0cFJlY2VpdmVyP2ErPSJhPXJlY3Zvbmx5XHJcbiI6YSs9ImE9aW5hY3RpdmVcclxuIixlLnJ0cFNlbmRlcil7dmFyIG89Im1zaWQ6IitpLmlkKyIgIitlLnJ0cFNlbmRlci50cmFjay5pZCsiXHJcbiI7YSs9ImE9IitvLGErPSJhPXNzcmM6IitlLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYysiICIrbyxlLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4JiYoYSs9ImE9c3NyYzoiK2Uuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYysiICIrbyxhKz0iYT1zc3JjLWdyb3VwOkZJRCAiK2Uuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjKyIgIitlLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMrIlxyXG4iKX1yZXR1cm4gYSs9ImE9c3NyYzoiK2Uuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjKyIgY25hbWU6IityLmxvY2FsQ05hbWUrIlxyXG4iLGUucnRwU2VuZGVyJiZlLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4JiYoYSs9ImE9c3NyYzoiK2Uuc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHguc3NyYysiIGNuYW1lOiIrci5sb2NhbENOYW1lKyJcclxuIiksYX0sci5nZXREaXJlY3Rpb249ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49ci5zcGxpdExpbmVzKGUpLGk9MDtpPG4ubGVuZ3RoO2krKylzd2l0Y2gobltpXSl7Y2FzZSJhPXNlbmRyZWN2IjpjYXNlImE9c2VuZG9ubHkiOmNhc2UiYT1yZWN2b25seSI6Y2FzZSJhPWluYWN0aXZlIjpyZXR1cm4gbltpXS5zdWJzdHIoMil9cmV0dXJuIHQ/ci5nZXREaXJlY3Rpb24odCk6InNlbmRyZWN2In0sci5nZXRLaW5kPWZ1bmN0aW9uKGUpe3JldHVybiByLnNwbGl0TGluZXMoZSlbMF0uc3BsaXQoIiAiKVswXS5zdWJzdHIoMil9LHIuaXNSZWplY3RlZD1mdW5jdGlvbihlKXtyZXR1cm4iMCI9PT1lLnNwbGl0KCIgIiwyKVsxXX0sZS5leHBvcnRzPXJ9LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIGU9bmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYT1mdW5jdGlvbih0KXtyZXR1cm4gZSh0KS5jYXRjaChmdW5jdGlvbihlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QoZnVuY3Rpb24oZSl7cmV0dXJue25hbWU6e1Blcm1pc3Npb25EZW5pZWRFcnJvcjoiTm90QWxsb3dlZEVycm9yIn1bZS5uYW1lXXx8ZS5uYW1lLG1lc3NhZ2U6ZS5tZXNzYWdlLGNvbnN0cmFpbnQ6ZS5jb25zdHJhaW50LHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmFtZX19fShlKSl9KX19fSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oMCkuYnJvd3NlckRldGFpbHMsaT17c2hpbU9uVHJhY2s6ZnVuY3Rpb24oKXsib2JqZWN0IiE9dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbnx8Im9udHJhY2siaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsIm9udHJhY2siLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb250cmFja30sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX29udHJhY2smJih0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoInRyYWNrIix0aGlzLl9vbnRyYWNrKSx0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoImFkZHN0cmVhbSIsdGhpcy5fb250cmFja3BvbHkpKSx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoInRyYWNrIix0aGlzLl9vbnRyYWNrPWUpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigiYWRkc3RyZWFtIix0aGlzLl9vbnRyYWNrcG9seT1mdW5jdGlvbihlKXtlLnN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBuPW5ldyBFdmVudCgidHJhY2siKTtuLnRyYWNrPXQsbi5yZWNlaXZlcj17dHJhY2s6dH0sbi5zdHJlYW1zPVtlLnN0cmVhbV0sdGhpcy5kaXNwYXRjaEV2ZW50KG4pfS5iaW5kKHRoaXMpKX0uYmluZCh0aGlzKSl9fSl9LHNoaW1Tb3VyY2VPYmplY3Q6ZnVuY3Rpb24oKXsib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmKCF3aW5kb3cuSFRNTE1lZGlhRWxlbWVudHx8InNyY09iamVjdCJpbiB3aW5kb3cuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGV8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuSFRNTE1lZGlhRWxlbWVudC5wcm90b3R5cGUsInNyY09iamVjdCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1velNyY09iamVjdH0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMubW96U3JjT2JqZWN0PWV9fSkpfSxzaGltUGVlckNvbm5lY3Rpb246ZnVuY3Rpb24oKXtpZigib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmKHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbnx8d2luZG93Lm1velJUQ1BlZXJDb25uZWN0aW9uKSl7d2luZG93LlJUQ1BlZXJDb25uZWN0aW9ufHwod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uPWZ1bmN0aW9uKGUsdCl7aWYoci52ZXJzaW9uPDM4JiZlJiZlLmljZVNlcnZlcnMpe2Zvcih2YXIgbj1bXSxpPTA7aTxlLmljZVNlcnZlcnMubGVuZ3RoO2krKyl7dmFyIGE9ZS5pY2VTZXJ2ZXJzW2ldO2lmKGEuaGFzT3duUHJvcGVydHkoInVybHMiKSlmb3IodmFyIG89MDtvPGEudXJscy5sZW5ndGg7bysrKXt2YXIgcz17dXJsOmEudXJsc1tvXX07MD09PWEudXJsc1tvXS5pbmRleE9mKCJ0dXJuIikmJihzLnVzZXJuYW1lPWEudXNlcm5hbWUscy5jcmVkZW50aWFsPWEuY3JlZGVudGlhbCksbi5wdXNoKHMpfWVsc2Ugbi5wdXNoKGUuaWNlU2VydmVyc1tpXSl9ZS5pY2VTZXJ2ZXJzPW59cmV0dXJuIG5ldyBtb3pSVENQZWVyQ29ubmVjdGlvbihlLHQpfSx3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlPW1velJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSxtb3pSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlJiZPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLCJnZW5lcmF0ZUNlcnRpZmljYXRlIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG1velJUQ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGV9fSksd2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbj1tb3pSVENTZXNzaW9uRGVzY3JpcHRpb24sd2luZG93LlJUQ0ljZUNhbmRpZGF0ZT1tb3pSVENJY2VDYW5kaWRhdGUpLFsic2V0TG9jYWxEZXNjcmlwdGlvbiIsInNldFJlbW90ZURlc2NyaXB0aW9uIiwiYWRkSWNlQ2FuZGlkYXRlIl0uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbZV07UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT1uZXcoImFkZEljZUNhbmRpZGF0ZSI9PT1lP1JUQ0ljZUNhbmRpZGF0ZTpSVENTZXNzaW9uRGVzY3JpcHRpb24pKGFyZ3VtZW50c1swXSksdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSk7dmFyIGU9UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZTtSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkSWNlQ2FuZGlkYXRlPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50c1swXT9lLmFwcGx5KHRoaXMsYXJndW1lbnRzKTooYXJndW1lbnRzWzFdJiZhcmd1bWVudHNbMV0uYXBwbHkobnVsbCksUHJvbWlzZS5yZXNvbHZlKCkpfTt2YXIgdD17aW5ib3VuZHJ0cDoiaW5ib3VuZC1ydHAiLG91dGJvdW5kcnRwOiJvdXRib3VuZC1ydHAiLGNhbmRpZGF0ZXBhaXI6ImNhbmRpZGF0ZS1wYWlyIixsb2NhbGNhbmRpZGF0ZToibG9jYWwtY2FuZGlkYXRlIixyZW1vdGVjYW5kaWRhdGU6InJlbW90ZS1jYW5kaWRhdGUifSxuPVJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTdGF0cztSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM9ZnVuY3Rpb24oZSxpLGEpe3JldHVybiBuLmFwcGx5KHRoaXMsW2V8fG51bGxdKS50aGVuKGZ1bmN0aW9uKGUpe2lmKHIudmVyc2lvbjw0OCYmKGU9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IE1hcDtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihuKXt0LnNldChuLGVbbl0pLHRbbl09ZVtuXX0pLHR9KGUpKSxyLnZlcnNpb248NTMmJiFpKXRyeXtlLmZvckVhY2goZnVuY3Rpb24oZSl7ZS50eXBlPXRbZS50eXBlXXx8ZS50eXBlfSl9Y2F0Y2gobil7aWYoIlR5cGVFcnJvciIhPT1uLm5hbWUpdGhyb3cgbjtlLmZvckVhY2goZnVuY3Rpb24obixyKXtlLnNldChyLE9iamVjdC5hc3NpZ24oe30sbix7dHlwZTp0W24udHlwZV18fG4udHlwZX0pKX0pfXJldHVybiBlfSkudGhlbihpLGEpfX19fTtlLmV4cG9ydHM9e3NoaW1PblRyYWNrOmkuc2hpbU9uVHJhY2ssc2hpbVNvdXJjZU9iamVjdDppLnNoaW1Tb3VyY2VPYmplY3Qsc2hpbVBlZXJDb25uZWN0aW9uOmkuc2hpbVBlZXJDb25uZWN0aW9uLHNoaW1HZXRVc2VyTWVkaWE6bigxMSl9fSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oMCkubG9nLGk9bigwKS5icm93c2VyRGV0YWlscztlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbihlKXtyZXR1cm57bmFtZTp7SW50ZXJuYWxFcnJvcjoiTm90UmVhZGFibGVFcnJvciIsTm90U3VwcG9ydGVkRXJyb3I6IlR5cGVFcnJvciIsUGVybWlzc2lvbkRlbmllZEVycm9yOiJOb3RBbGxvd2VkRXJyb3IiLFNlY3VyaXR5RXJyb3I6Ik5vdEFsbG93ZWRFcnJvciJ9W2UubmFtZV18fGUubmFtZSxtZXNzYWdlOnsiVGhlIG9wZXJhdGlvbiBpcyBpbnNlY3VyZS4iOiJUaGUgcmVxdWVzdCBpcyBub3QgYWxsb3dlZCBieSB0aGUgdXNlciBhZ2VudCBvciB0aGUgcGxhdGZvcm0gaW4gdGhlIGN1cnJlbnQgY29udGV4dC4ifVtlLm1lc3NhZ2VdfHxlLm1lc3NhZ2UsY29uc3RyYWludDplLmNvbnN0cmFpbnQsdG9TdHJpbmc6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5uYW1lKyh0aGlzLm1lc3NhZ2UmJiI6ICIpK3RoaXMubWVzc2FnZX19fSx0PWZ1bmN0aW9uKHQsbixhKXt2YXIgbz1mdW5jdGlvbihlKXtpZigib2JqZWN0IiE9dHlwZW9mIGV8fGUucmVxdWlyZSlyZXR1cm4gZTt2YXIgdD1bXTtyZXR1cm4gT2JqZWN0LmtleXMoZSkuZm9yRWFjaChmdW5jdGlvbihuKXtpZigicmVxdWlyZSIhPT1uJiYiYWR2YW5jZWQiIT09biYmIm1lZGlhU291cmNlIiE9PW4pe3ZhciByPWVbbl09Im9iamVjdCI9PXR5cGVvZiBlW25dP2Vbbl06e2lkZWFsOmVbbl19O2lmKHZvaWQgMD09PXIubWluJiZ2b2lkIDA9PT1yLm1heCYmdm9pZCAwPT09ci5leGFjdHx8dC5wdXNoKG4pLHZvaWQgMCE9PXIuZXhhY3QmJigibnVtYmVyIj09dHlwZW9mIHIuZXhhY3Q/ci5taW49ci5tYXg9ci5leGFjdDplW25dPXIuZXhhY3QsZGVsZXRlIHIuZXhhY3QpLHZvaWQgMCE9PXIuaWRlYWwpe2UuYWR2YW5jZWQ9ZS5hZHZhbmNlZHx8W107dmFyIGk9e307Im51bWJlciI9PXR5cGVvZiByLmlkZWFsP2lbbl09e21pbjpyLmlkZWFsLG1heDpyLmlkZWFsfTppW25dPXIuaWRlYWwsZS5hZHZhbmNlZC5wdXNoKGkpLGRlbGV0ZSByLmlkZWFsLE9iamVjdC5rZXlzKHIpLmxlbmd0aHx8ZGVsZXRlIGVbbl19fX0pLHQubGVuZ3RoJiYoZS5yZXF1aXJlPXQpLGV9O3JldHVybiB0PUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodCkpLGkudmVyc2lvbjwzOCYmKHIoInNwZWM6ICIrSlNPTi5zdHJpbmdpZnkodCkpLHQuYXVkaW8mJih0LmF1ZGlvPW8odC5hdWRpbykpLHQudmlkZW8mJih0LnZpZGVvPW8odC52aWRlbykpLHIoImZmMzc6ICIrSlNPTi5zdHJpbmdpZnkodCkpKSxuYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhKHQsbixmdW5jdGlvbih0KXthKGUodCkpfSl9O2lmKG5hdmlnYXRvci5tZWRpYURldmljZXN8fChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzPXtnZXRVc2VyTWVkaWE6ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4scil7dChlLG4scil9KX0sYWRkRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbigpe30scmVtb3ZlRXZlbnRMaXN0ZW5lcjpmdW5jdGlvbigpe319KSxuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXM9bmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzfHxmdW5jdGlvbigpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlKXtlKFt7a2luZDoiYXVkaW9pbnB1dCIsZGV2aWNlSWQ6ImRlZmF1bHQiLGxhYmVsOiIiLGdyb3VwSWQ6IiJ9LHtraW5kOiJ2aWRlb2lucHV0IixkZXZpY2VJZDoiZGVmYXVsdCIsbGFiZWw6IiIsZ3JvdXBJZDoiIn1dKX0pfSxpLnZlcnNpb248NDEpe3ZhciBuPW5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcy5iaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpO25hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcz1mdW5jdGlvbigpe3JldHVybiBuKCkudGhlbih2b2lkIDAsZnVuY3Rpb24oZSl7aWYoIk5vdEZvdW5kRXJyb3IiPT09ZS5uYW1lKXJldHVybltdO3Rocm93IGV9KX19aWYoaS52ZXJzaW9uPDQ5KXt2YXIgYT1uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS5iaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpO25hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhPWZ1bmN0aW9uKHQpe3JldHVybiBhKHQpLnRoZW4oZnVuY3Rpb24oZSl7aWYodC5hdWRpbyYmIWUuZ2V0QXVkaW9UcmFja3MoKS5sZW5ndGh8fHQudmlkZW8mJiFlLmdldFZpZGVvVHJhY2tzKCkubGVuZ3RoKXRocm93IGUuZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbihlKXtlLnN0b3AoKX0pLG5ldyBET01FeGNlcHRpb24oIlRoZSBvYmplY3QgY2FuIG5vdCBiZSBmb3VuZCBoZXJlLiIsIk5vdEZvdW5kRXJyb3IiKTtyZXR1cm4gZX0sZnVuY3Rpb24odCl7cmV0dXJuIFByb21pc2UucmVqZWN0KGUodCkpfSl9fW5hdmlnYXRvci5nZXRVc2VyTWVkaWE9ZnVuY3Rpb24oZSxuLHIpe2lmKGkudmVyc2lvbjw0NClyZXR1cm4gdChlLG4scik7Y29uc29sZS53YXJuKCJuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhIGhhcyBiZWVuIHJlcGxhY2VkIGJ5IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhIiksbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoZSkudGhlbihuLHIpfX19LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9e3NoaW1BZGRTdHJlYW06ZnVuY3Rpb24oKXsib2JqZWN0IiE9dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbnx8ImFkZFN0cmVhbSJpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlfHwoUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZFN0cmVhbT1mdW5jdGlvbihlKXt2YXIgdD10aGlzO2UuZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbihuKXt0LmFkZFRyYWNrKG4sZSl9KX0pfSxzaGltT25BZGRTdHJlYW06ZnVuY3Rpb24oKXsib2JqZWN0IiE9dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbnx8Im9uYWRkc3RyZWFtImluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGV8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCJvbmFkZHN0cmVhbSIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9vbmFkZHN0cmVhbX0sc2V0OmZ1bmN0aW9uKGUpe3RoaXMuX29uYWRkc3RyZWFtJiYodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCJhZGRzdHJlYW0iLHRoaXMuX29uYWRkc3RyZWFtKSx0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoInRyYWNrIix0aGlzLl9vbmFkZHN0cmVhbXBvbHkpKSx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoImFkZHN0cmVhbSIsdGhpcy5fb25hZGRzdHJlYW09ZSksdGhpcy5hZGRFdmVudExpc3RlbmVyKCJ0cmFjayIsdGhpcy5fb25hZGRzdHJlYW1wb2x5PWZ1bmN0aW9uKGUpe3ZhciB0PWUuc3RyZWFtc1swXTtpZih0aGlzLl9zdHJlYW1zfHwodGhpcy5fc3RyZWFtcz1bXSksISh0aGlzLl9zdHJlYW1zLmluZGV4T2YodCk+PTApKXt0aGlzLl9zdHJlYW1zLnB1c2godCk7dmFyIG49bmV3IEV2ZW50KCJhZGRzdHJlYW0iKTtuLnN0cmVhbT1lLnN0cmVhbXNbMF0sdGhpcy5kaXNwYXRjaEV2ZW50KG4pfX0uYmluZCh0aGlzKSl9fSl9LHNoaW1DYWxsYmFja3NBUEk6ZnVuY3Rpb24oKXtpZigib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uKXt2YXIgZT1SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsdD1lLmNyZWF0ZU9mZmVyLG49ZS5jcmVhdGVBbnN3ZXIscj1lLnNldExvY2FsRGVzY3JpcHRpb24saT1lLnNldFJlbW90ZURlc2NyaXB0aW9uLGE9ZS5hZGRJY2VDYW5kaWRhdGU7ZS5jcmVhdGVPZmZlcj1mdW5jdGlvbihlLG4pe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg+PTI/YXJndW1lbnRzWzJdOmFyZ3VtZW50c1swXSxpPXQuYXBwbHkodGhpcyxbcl0pO3JldHVybiBuPyhpLnRoZW4oZSxuKSxQcm9taXNlLnJlc29sdmUoKSk6aX0sZS5jcmVhdGVBbnN3ZXI9ZnVuY3Rpb24oZSx0KXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPj0yP2FyZ3VtZW50c1syXTphcmd1bWVudHNbMF0saT1uLmFwcGx5KHRoaXMsW3JdKTtyZXR1cm4gdD8oaS50aGVuKGUsdCksUHJvbWlzZS5yZXNvbHZlKCkpOml9O3ZhciBvPWZ1bmN0aW9uKGUsdCxuKXt2YXIgaT1yLmFwcGx5KHRoaXMsW2VdKTtyZXR1cm4gbj8oaS50aGVuKHQsbiksUHJvbWlzZS5yZXNvbHZlKCkpOml9O2Uuc2V0TG9jYWxEZXNjcmlwdGlvbj1vLG89ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWkuYXBwbHkodGhpcyxbZV0pO3JldHVybiBuPyhyLnRoZW4odCxuKSxQcm9taXNlLnJlc29sdmUoKSk6cn0sZS5zZXRSZW1vdGVEZXNjcmlwdGlvbj1vLG89ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWEuYXBwbHkodGhpcyxbZV0pO3JldHVybiBuPyhyLnRoZW4odCxuKSxQcm9taXNlLnJlc29sdmUoKSk6cn0sZS5hZGRJY2VDYW5kaWRhdGU9b319LHNoaW1HZXRVc2VyTWVkaWE6ZnVuY3Rpb24oKXtuYXZpZ2F0b3IuZ2V0VXNlck1lZGlhfHwobmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYT9uYXZpZ2F0b3IuZ2V0VXNlck1lZGlhPW5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEuYmluZChuYXZpZ2F0b3IpOm5hdmlnYXRvci5tZWRpYURldmljZXMmJm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhJiYobmF2aWdhdG9yLmdldFVzZXJNZWRpYT1mdW5jdGlvbihlLHQsbil7bmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoZSkudGhlbih0LG4pfS5iaW5kKG5hdmlnYXRvcikpKX19O2UuZXhwb3J0cz17c2hpbUNhbGxiYWNrc0FQSTpyLnNoaW1DYWxsYmFja3NBUEksc2hpbUFkZFN0cmVhbTpyLnNoaW1BZGRTdHJlYW0sc2hpbU9uQWRkU3RyZWFtOnIuc2hpbU9uQWRkU3RyZWFtLHNoaW1HZXRVc2VyTWVkaWE6ci5zaGltR2V0VXNlck1lZGlhfX0sZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpeyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSh0aGlzLGUpO2lmKHRoaXMuX3RleHRNZXNzYWdlPXQudGV4dE1lc3NhZ2UsdGhpcy5fZGF0YVNpemU9dC5kYXRhU2l6ZSx0aGlzLl9kYXRhPVtdLHRoaXMuX3Byb2dyZXNzPTAsdGhpcy5fc2VuZGluZ1RpbWU9dC5zZW5kaW5nVGltZSx0aGlzLl9wcm9ncmVzc1BlcmNlbnRhZ2U9MCwhdGhpcy5fdGV4dE1lc3NhZ2UuYm9keXx8IXRoaXMuX3RleHRNZXNzYWdlLmJvZHkudmFsdWUpdGhyb3cgRXJyb3IoIltQMlBEYXRhUmVjZWl2ZXIgY29uc3RydWN0b3JdIGludmFsaWQgSHlwZXJ0eSBSZXNvdXJjZSBtZXNzYWdlLiBEb2VzIG5vdCBjb210YWluIGEgYm9keS52YWx1ZSIsdCl9cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXt0JiZyKGUucHJvdG90eXBlLHQpLG4mJnIoZSxuKX0oZSxbe2tleToicmVjZWl2ZVRleHQiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKHRoaXMuX2RhdGEucHVzaChlLmRhdGEpLHRoaXMuX3Byb2dyZXNzPXRoaXMuX3Byb2dyZXNzK2UuZGF0YS5sZW5ndGgsdGhpcy5fcHJvZ3Jlc3M9PT10aGlzLl9kYXRhU2l6ZSl7dmFyIHQ9dGhpcy5fZGF0YS5qb2luKCIiKTt0aGlzLl9wcm9jZXNzTGFzdE1lc3NhZ2UodCl9ZWxzZXt2YXIgbj1wYXJzZUludCgxMDAqdGhpcy5fcHJvZ3Jlc3MvdGhpcy5fZGF0YVNpemUpO24tdGhpcy5fcHJvZ3Jlc3NQZXJjZW50YWdlPjAmJih0aGlzLl9wcm9ncmVzc1BlcmNlbnRhZ2U9bixjb25zb2xlLmRlYnVnKCJbUDJQRGF0YVJlY2VpdmVyXSBwcm9ncmVzc2luZzogIix0aGlzLl9wcm9ncmVzc1BlcmNlbnRhZ2UpLHRoaXMuX29uUHJvZ3Jlc3ModGhpcy5fcHJvZ3Jlc3NQZXJjZW50YWdlKSl9fX0se2tleToicmVjZWl2ZUJpbmFyeSIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYodGhpcy5fZGF0YS5wdXNoKGUpLHRoaXMuX3Byb2dyZXNzPXRoaXMuX3Byb2dyZXNzK2UuYnl0ZUxlbmd0aCx0aGlzLl9wcm9ncmVzcz09PXRoaXMuX2RhdGFTaXplKXRoaXMuX3Byb2Nlc3NMYXN0TWVzc2FnZSh0aGlzLl9kYXRhKTtlbHNlIGlmKHRoaXMuX29uUHJvZ3Jlc3Mpe3ZhciB0PXBhcnNlSW50KDEwMCp0aGlzLl9wcm9ncmVzcy90aGlzLl9kYXRhU2l6ZSk7dC10aGlzLl9wcm9ncmVzc1BlcmNlbnRhZ2U+MCYmKHRoaXMuX3Byb2dyZXNzUGVyY2VudGFnZT10LGNvbnNvbGUuZGVidWcoIltQMlBEYXRhUmVjZWl2ZXJdIHByb2dyZXNzaW5nOiAiLHRoaXMuX3Byb2dyZXNzUGVyY2VudGFnZSksdGhpcy5fb25Qcm9ncmVzcyh0aGlzLl9wcm9ncmVzc1BlcmNlbnRhZ2UpKX19fSx7a2V5OiJfcHJvY2Vzc0xhc3RNZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD0obmV3IERhdGUpLmdldFRpbWUoKS10aGlzLl9zZW5kaW5nVGltZSxuPXRoaXMuX3RleHRNZXNzYWdlO24uYm9keS52YWx1ZS5jb250ZW50PWUsdGhpcy5fb25SZWNlaXZlZChuLHQpfX0se2tleToib25SZWNlaXZlZCIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25SZWNlaXZlZD1lfX0se2tleToib25Qcm9ncmVzcyIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25Qcm9ncmVzcz1lfX0se2tleToiZnJvbSIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RleHRNZXNzYWdlLmZyb219fSx7a2V5OiJ0byIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3RleHRNZXNzYWdlLnRvfX0se2tleToiaWQiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90ZXh0TWVzc2FnZS5pZH19LHtrZXk6InR5cGUiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90ZXh0TWVzc2FnZS50eXBlfX1dKSxlfSgpO3QuYT1pfSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIHIoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtyLmVudW1lcmFibGU9ci5lbnVtZXJhYmxlfHwhMSxyLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gciYmKHIud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHIua2V5LHIpfX12YXIgaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuKXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0odGhpcyxlKTt0aGlzLl9tc2c9dCx0aGlzLl9jaGFubmVsPW4sdGhpcy5fcGFja2V0U2l6ZT0xNjM4NCx0aGlzLl9idWZmZXJGdWxsVGhyZXNob2xkPTUqdGhpcy5fcGFja2V0U2l6ZSx0aGlzLl9tc2dPYmplY3Q9dCx0aGlzLmlzRGF0YT0hMSx0aGlzLl9pbml0KCksdGhpcy5fY2FuY2VsPSExfXJldHVybiBmdW5jdGlvbihlLHQsbil7dCYmcihlLnByb3RvdHlwZSx0KSxuJiZyKGUsbil9KGUsW3trZXk6ImNhbmNlbCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9jYW5jZWw9ITB9fSx7a2V5OiJfaW5pdCIsdmFsdWU6ZnVuY3Rpb24oKXt2YXIgZT0oTWF0aC5yYW5kb20oKSoobmV3IERhdGUpLmdldFRpbWUoKSkudG9TdHJpbmcoMzYpLnJlcGxhY2UoL1wuL2csIi0iKSx0PShuZXcgRGF0ZSkuZ2V0VGltZSgpO3RoaXMuX2luaXRpYWxQYWNrZXQ9e3V1aWQ6ZSxzZW5kaW5nVGltZTp0fSx0aGlzLl9tc2cuYm9keSYmdGhpcy5fbXNnLmJvZHkudmFsdWUmJnRoaXMuX21zZy5ib2R5LnZhbHVlLmNvbnRlbnQmJih0aGlzLmlzRGF0YT0hMCksdGhpcy5pc0RhdGEmJnRoaXMuX21zZy5ib2R5LnZhbHVlLm1pbWV0eXBlJiYidGV4dCIhPXRoaXMuX21zZy5ib2R5LnZhbHVlLm1pbWV0eXBlLnNwbGl0KCIvIilbMF0/KHRoaXMuX3NlbmQ9dGhpcy5fc2VuZEJpbmFyeSx0aGlzLl9pbml0aWFsUGFja2V0LmRhdGFTaXplPXRoaXMuX21zZy5ib2R5LnZhbHVlLmNvbnRlbnQuYnl0ZUxlbmd0aCk6KHRoaXMuX3NlbmQ9dGhpcy5fc2VuZFRleHQsdGhpcy5pc0RhdGEmJih0aGlzLl9pbml0aWFsUGFja2V0LmRhdGFTaXplPXRoaXMuX21zZy5ib2R5LnZhbHVlLmNvbnRlbnQubGVuZ3RoKSksdGhpcy5faW5pdGlhbFBhY2tldC50ZXh0TWVzc2FnZT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHRoaXMuX21zZykpLHRoaXMuaXNEYXRhPyhkZWxldGUgdGhpcy5faW5pdGlhbFBhY2tldC50ZXh0TWVzc2FnZS5ib2R5LnZhbHVlLmNvbnRlbnQsdGhpcy5fZGF0YT10aGlzLl9tc2cuYm9keS52YWx1ZS5jb250ZW50KTp0aGlzLl9pbml0aWFsUGFja2V0LmRhdGFTaXplPTB9fSx7a2V5OiJfc2VuZFRleHQiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49e3V1aWQ6ZSxkYXRhOnR9O3RoaXMuX2NoYW5uZWwuc2VuZChKU09OLnN0cmluZ2lmeShuKSl9fSx7a2V5OiJfc2VuZEJpbmFyeSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzLl9zdHIyYWIoZSkscj10aGlzLl9hcHBlbmRCdWZmZXIobix0KTt0aGlzLl9jaGFubmVsLnNlbmQocil9fSx7a2V5OiJfc3RyMmFiIix2YWx1ZTpmdW5jdGlvbihlKXtmb3IodmFyIHQ9bmV3IEFycmF5QnVmZmVyKDIqZS5sZW5ndGgpLG49bmV3IFVpbnQxNkFycmF5KHQpLHI9MCxpPWUubGVuZ3RoO3I8aTtyKyspbltyXT1lLmNoYXJDb2RlQXQocik7cmV0dXJuIHR9fSx7a2V5OiJfYXBwZW5kQnVmZmVyIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPW5ldyBVaW50OEFycmF5KGUuYnl0ZUxlbmd0aCt0LmJ5dGVMZW5ndGgpO3JldHVybiBuLnNldChuZXcgVWludDhBcnJheShlKSwwKSxuLnNldChuZXcgVWludDhBcnJheSh0KSxlLmJ5dGVMZW5ndGgpLG4uYnVmZmVyfX0se2tleToic2VuZERhdGEiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fc2l6ZT10aGlzLl9pbml0aWFsUGFja2V0LmRhdGFTaXplLGNvbnNvbGUubG9nKCJbUDJQRGF0YVNlbmRlcl0gc3RhcnQgc2VuZGluZyB0bzogIix0aGlzLl9tc2cudG8pLHRoaXMuX3NlbmRUZXh0KHRoaXMuX2luaXRpYWxQYWNrZXQudXVpZCx0aGlzLl9pbml0aWFsUGFja2V0KSx0aGlzLmlzRGF0YT90aGlzLl9zZW5kRGF0YSgpOnRoaXMuX29uU2VudCYmdGhpcy5fb25TZW50KCl9fSx7a2V5OiJfc2VuZERhdGEiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXt9LG49e307dC5tYXg9ZS5fc2l6ZSxuLm1heD10Lm1heCx0LnZhbHVlPTAsbi52YWx1ZT0wO3ZhciByLGk9ZS5fY2hhbm5lbCxhPWUuX3BhY2tldFNpemUsbz01KmEscz0hMCxjPSExOyJudW1iZXIiPT10eXBlb2YgaS5idWZmZXJlZEFtb3VudExvd1RocmVzaG9sZCYmKGNvbnNvbGUuaW5mbygiW1AyUERhdGFTZW5kZXJdIFVzaW5nIHRoZSBidWZmZXJlZGFtb3VudGxvdyBldmVudCBmb3IgZmxvdyBjb250cm9sIikscz0hMSxvPWEvMixpLmJ1ZmZlcmVkQW1vdW50TG93VGhyZXNob2xkPW8pO3ZhciBkPWZ1bmN0aW9uIGUoKXtpLnJlbW92ZUV2ZW50TGlzdGVuZXIoImJ1ZmZlcmVkYW1vdW50bG93IixlKSx1KCl9LHU9ZnVuY3Rpb24gbigpe2Zvcig7dC52YWx1ZTx0Lm1heCYmIWUuX2NhbmNlbDspe2lmKGkuYnVmZmVyZWRBbW91bnQ+bylyZXR1cm4gdm9pZChzP3NldFRpbWVvdXQobiwyNTApOmkuYWRkRXZlbnRMaXN0ZW5lcigiYnVmZmVyZWRhbW91bnRsb3ciLGQpKTtyPWUuX2RhdGEuc2xpY2UodC52YWx1ZSx0LnZhbHVlK2EpLHQudmFsdWUrYTx0Lm1heD90LnZhbHVlKz1hOihjPSEwLHQudmFsdWU9dC5tYXgpLGUuX3NlbmQoZS5faW5pdGlhbFBhY2tldC51dWlkLHIpLGMmJmUuX29uU2VudCYmZS5fb25TZW50KCl9fTtzZXRUaW1lb3V0KHUsNSl9fSx7a2V5OiJvblNlbnQiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX29uU2VudD1lfX0se2tleToib25Qcm9ncmVzcyIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5vblByb2dyZXNzPWV9fV0pLGV9KCk7dC5hPWl9XSkuZGVmYXVsdH0pOw==",
      "sourceCodeClassname": "P2PHandlerProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.20",
    "description": "P2P Handler Protostub ",
    "language": "javascript",
    "cguid": "4456240d0c888e2293cdc568a7224b7c0",
    "type": "ProtoStubs",
    "constraints": {
      "windowSandbox": true
    },
    "objectName": "P2PHandlerProtoStub",
    "configuration": {
      "iceServers": [
        {
          "urls": "turn:numb.viagenie.ca",
          "credential": "zJcH3erd9cUv5Zh",
          "username": "luis-t-duarte@telecom.pt"
        },
        {
          "urls": [
            "stun:stun.voiparound.com",
            "stun:stun.voipbuster.com",
            "stun:stun.voipstunt.com",
            "stun:stun.voxgratia.org",
            "stun:stun.ekiga.net",
            "stun:stun.schlund.de",
            "stun:stun.iptel.org",
            "stun:stun.l.google.com:19302",
            "stun:stun1.l.google.com:19302",
            "stun:stun.ideasip.com",
            "stun:stun4.l.google.com:19302",
            "stun:stun2.l.google.com:19302",
            "stun:stun3.l.google.com:19302"
          ]
        }
      ],
      "iceTransportPolicy": "all"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "P2PRequesterProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "P2PRequesterProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.20",
    "description": "P2P Requester Protostub ",
    "language": "javascript",
    "cguid": "4bcb9977c1c46c13278273a67b5fe7aab",
    "type": "ProtoStubs",
    "constraints": {
      "windowSandbox": true
    },
    "objectName": "P2PRequesterProtoStub",
    "configuration": {
      "iceServers": [
        {
          "urls": "turn:numb.viagenie.ca",
          "credential": "zJcH3erd9cUv5Zh",
          "username": "luis-t-duarte@telecom.pt"
        },
        {
          "urls": [
            "stun:stun.voiparound.com",
            "stun:stun.voipbuster.com",
            "stun:stun.voipstunt.com",
            "stun:stun.voxgratia.org",
            "stun:stun.ekiga.net",
            "stun:stun.schlund.de",
            "stun:stun.iptel.org",
            "stun:stun.l.google.com:19302",
            "stun:stun1.l.google.com:19302",
            "stun:stun.ideasip.com",
            "stun:stun4.l.google.com:19302",
            "stun:stun2.l.google.com:19302",
            "stun:stun3.l.google.com:19302"
          ]
        }
      ],
      "iceTransportPolicy": "all"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProtoStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihvKXtpZih0W29dKXJldHVybiB0W29dLmV4cG9ydHM7dmFyIHM9dFtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChzLmV4cG9ydHMscyxzLmV4cG9ydHMsbikscy5sPSEwLHMuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxvKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9IiIsbihuLnM9Myl9KFtmdW5jdGlvbihlLHQsbil7dmFyIG89bigxKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gT2JqZWN0LmtleXMobykuZm9yRWFjaChuPT57dmFyIG89bi5zcGxpdCgiLiIpLHM9by5zaGlmdCgpO3ZvaWQgMD09PWVbc10mJihlW3NdPXt9KSxmdW5jdGlvbiBlKHMpe3ZhciByPW8uc2hpZnQoKTswPT09by5sZW5ndGg/c1tyXT10LmJpbmQoe30sbik6KHZvaWQgMD09PXNbcl0mJihzW3JdPXt9KSxlKHNbcl0pKX0oZVtzXSl9KSxlfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9eyJhcGkudGVzdCI6W10sImFwcHMucGVybWlzc2lvbnMuaW5mbyI6WyJ0b2tlbiJdLCJhcHBzLnBlcm1pc3Npb25zLnJlcXVlc3QiOlsidG9rZW4iLCJzY29wZXMiLCJ0cmlnZ2VyX2lkIl0sImF1dGgucmV2b2tlIjpbInRva2VuIl0sImF1dGgudGVzdCI6WyJ0b2tlbiJdLCJib3RzLmluZm8iOlsidG9rZW4iXSwiY2hhbm5lbHMuYXJjaGl2ZSI6WyJ0b2tlbiIsImNoYW5uZWwiXSwiY2hhbm5lbHMuY3JlYXRlIjpbInRva2VuIiwibmFtZSJdLCJjaGFubmVscy5oaXN0b3J5IjpbInRva2VuIiwiY2hhbm5lbCJdLCJjaGFubmVscy5pbmZvIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjaGFubmVscy5pbnZpdGUiOlsidG9rZW4iLCJjaGFubmVsIiwidXNlciJdLCJjaGFubmVscy5qb2luIjpbInRva2VuIiwibmFtZSJdLCJjaGFubmVscy5raWNrIjpbInRva2VuIiwiY2hhbm5lbCIsInVzZXIiXSwiY2hhbm5lbHMubGVhdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImNoYW5uZWxzLmxpc3QiOlsidG9rZW4iXSwiY2hhbm5lbHMubWFyayI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0cyJdLCJjaGFubmVscy5yZW5hbWUiOlsidG9rZW4iLCJjaGFubmVsIiwibmFtZSJdLCJjaGFubmVscy5yZXBsaWVzIjpbInRva2VuIiwiY2hhbm5lbCIsInRocmVhZF90cyJdLCJjaGFubmVscy5zZXRQdXJwb3NlIjpbInRva2VuIiwiY2hhbm5lbCIsInB1cnBvc2UiXSwiY2hhbm5lbHMuc2V0VG9waWMiOlsidG9rZW4iLCJjaGFubmVsIiwidG9waWMiXSwiY2hhbm5lbHMudW5hcmNoaXZlIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjaGF0LmRlbGV0ZSI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0cyJdLCJjaGF0Lm1lTWVzc2FnZSI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0ZXh0Il0sImNoYXQucG9zdEVwaGVtZXJhbCI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0ZXh0IiwidXNlciJdLCJjaGF0LnBvc3RNZXNzYWdlIjpbInRva2VuIiwiY2hhbm5lbCIsInRleHQiXSwiY2hhdC51bmZ1cmwiOlsidG9rZW4iLCJjaGFubmVsIiwidHMiLCJ1bmZ1cmxzIl0sImNoYXQudXBkYXRlIjpbInRva2VuIiwiY2hhbm5lbCIsInRleHQiLCJ0cyJdLCJjb252ZXJzYXRpb25zLmFyY2hpdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImNvbnZlcnNhdGlvbnMuY2xvc2UiOlsidG9rZW4iLCJjaGFubmVsIl0sImNvbnZlcnNhdGlvbnMuY3JlYXRlIjpbInRva2VuIiwibmFtZSJdLCJjb252ZXJzYXRpb25zLmhpc3RvcnkiOlsidG9rZW4iLCJjaGFubmVsIl0sImNvbnZlcnNhdGlvbnMuaW5mbyI6WyJ0b2tlbiIsImNoYW5uZWwiXSwiY29udmVyc2F0aW9ucy5pbnZpdGUiOlsidG9rZW4iLCJjaGFubmVsIiwidXNlcnMiXSwiY29udmVyc2F0aW9ucy5qb2luIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjb252ZXJzYXRpb25zLmtpY2siOlsidG9rZW4iLCJjaGFubmVsIiwidXNlciJdLCJjb252ZXJzYXRpb25zLmxlYXZlIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjb252ZXJzYXRpb25zLmxpc3QiOlsidG9rZW4iXSwiY29udmVyc2F0aW9ucy5tZW1iZXJzIjpbInRva2VuIiwiY2hhbm5lbCJdLCJjb252ZXJzYXRpb25zLm9wZW4iOlsidG9rZW4iXSwiY29udmVyc2F0aW9ucy5yZW5hbWUiOlsidG9rZW4iLCJjaGFubmVsIiwibmFtZSJdLCJjb252ZXJzYXRpb25zLnJlcGxpZXMiOlsidG9rZW4iLCJjaGFubmVsIiwidHMiXSwiY29udmVyc2F0aW9ucy5zZXRQdXJwb3NlIjpbInRva2VuIiwiY2hhbm5lbCIsInB1cnBvc2UiXSwiY29udmVyc2F0aW9ucy5zZXRUb3BpYyI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0b3BpYyJdLCJjb252ZXJzYXRpb25zLnVuYXJjaGl2ZSI6WyJ0b2tlbiIsImNoYW5uZWwiXSwiZG5kLmVuZERuZCI6WyJ0b2tlbiJdLCJkbmQuZW5kU25vb3plIjpbInRva2VuIl0sImRuZC5pbmZvIjpbInRva2VuIl0sImRuZC5zZXRTbm9vemUiOlsidG9rZW4iLCJudW1fbWludXRlcyJdLCJkbmQudGVhbUluZm8iOlsidG9rZW4iXSwiZW1vamkubGlzdCI6WyJ0b2tlbiJdLCJmaWxlcy5jb21tZW50cy5hZGQiOlsidG9rZW4iLCJjb21tZW50IiwiZmlsZSJdLCJmaWxlcy5jb21tZW50cy5kZWxldGUiOlsidG9rZW4iLCJmaWxlIiwiaWQiXSwiZmlsZXMuY29tbWVudHMuZWRpdCI6WyJ0b2tlbiIsImNvbW1lbnQiLCJmaWxlIiwiaWQiXSwiZmlsZXMuZGVsZXRlIjpbInRva2VuIiwiZmlsZSJdLCJmaWxlcy5pbmZvIjpbInRva2VuIiwiZmlsZSJdLCJmaWxlcy5saXN0IjpbInRva2VuIl0sImZpbGVzLnJldm9rZVB1YmxpY1VSTCI6WyJ0b2tlbiIsImZpbGUiXSwiZmlsZXMuc2hhcmVkUHVibGljVVJMIjpbInRva2VuIiwiZmlsZSJdLCJmaWxlcy51cGxvYWQiOlsidG9rZW4iXSwiZ3JvdXBzLmFyY2hpdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImdyb3Vwcy5jcmVhdGUiOlsidG9rZW4iLCJuYW1lIl0sImdyb3Vwcy5jcmVhdGVDaGlsZCI6WyJ0b2tlbiIsImNoYW5uZWwiXSwiZ3JvdXBzLmhpc3RvcnkiOlsidG9rZW4iLCJjaGFubmVsIl0sImdyb3Vwcy5pbmZvIjpbInRva2VuIiwiY2hhbm5lbCJdLCJncm91cHMuaW52aXRlIjpbInRva2VuIiwiY2hhbm5lbCIsInVzZXIiXSwiZ3JvdXBzLmtpY2siOlsidG9rZW4iLCJjaGFubmVsIiwidXNlciJdLCJncm91cHMubGVhdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImdyb3Vwcy5saXN0IjpbInRva2VuIl0sImdyb3Vwcy5tYXJrIjpbInRva2VuIiwiY2hhbm5lbCIsInRzIl0sImdyb3Vwcy5vcGVuIjpbInRva2VuIiwiY2hhbm5lbCJdLCJncm91cHMucmVuYW1lIjpbInRva2VuIiwiY2hhbm5lbCIsIm5hbWUiXSwiZ3JvdXBzLnJlcGxpZXMiOlsidG9rZW4iLCJjaGFubmVsIiwidGhyZWFkX3RzIl0sImdyb3Vwcy5zZXRQdXJwb3NlIjpbInRva2VuIiwiY2hhbm5lbCIsInB1cnBvc2UiXSwiZ3JvdXBzLnNldFRvcGljIjpbInRva2VuIiwiY2hhbm5lbCIsInRvcGljIl0sImdyb3Vwcy51bmFyY2hpdmUiOlsidG9rZW4iLCJjaGFubmVsIl0sImltLmNsb3NlIjpbInRva2VuIiwiY2hhbm5lbCJdLCJpbS5oaXN0b3J5IjpbInRva2VuIiwiY2hhbm5lbCJdLCJpbS5saXN0IjpbInRva2VuIl0sImltLm1hcmsiOlsidG9rZW4iLCJjaGFubmVsIiwidHMiXSwiaW0ub3BlbiI6WyJ0b2tlbiIsInVzZXIiXSwiaW0ucmVwbGllcyI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0aHJlYWRfdHMiXSwibXBpbS5jbG9zZSI6WyJ0b2tlbiIsImNoYW5uZWwiXSwibXBpbS5oaXN0b3J5IjpbInRva2VuIiwiY2hhbm5lbCJdLCJtcGltLmxpc3QiOlsidG9rZW4iXSwibXBpbS5tYXJrIjpbInRva2VuIiwiY2hhbm5lbCIsInRzIl0sIm1waW0ub3BlbiI6WyJ0b2tlbiIsInVzZXJzIl0sIm1waW0ucmVwbGllcyI6WyJ0b2tlbiIsImNoYW5uZWwiLCJ0aHJlYWRfdHMiXSwib2F1dGguYWNjZXNzIjpbImNsaWVudF9pZCIsImNsaWVudF9zZWNyZXQiLCJjb2RlIl0sIm9hdXRoLnRva2VuIjpbImNsaWVudF9pZCIsImNsaWVudF9zZWNyZXQiLCJjb2RlIl0sInBpbnMuYWRkIjpbInRva2VuIiwiY2hhbm5lbCJdLCJwaW5zLmxpc3QiOlsidG9rZW4iLCJjaGFubmVsIl0sInBpbnMucmVtb3ZlIjpbInRva2VuIiwiY2hhbm5lbCJdLCJyZWFjdGlvbnMuYWRkIjpbInRva2VuIiwibmFtZSJdLCJyZWFjdGlvbnMuZ2V0IjpbInRva2VuIl0sInJlYWN0aW9ucy5saXN0IjpbInRva2VuIl0sInJlYWN0aW9ucy5yZW1vdmUiOlsidG9rZW4iLCJuYW1lIl0sInJlbWluZGVycy5hZGQiOlsidG9rZW4iLCJ0ZXh0IiwidGltZSJdLCJyZW1pbmRlcnMuY29tcGxldGUiOlsidG9rZW4iLCJyZW1pbmRlciJdLCJyZW1pbmRlcnMuZGVsZXRlIjpbInRva2VuIiwicmVtaW5kZXIiXSwicmVtaW5kZXJzLmluZm8iOlsidG9rZW4iLCJyZW1pbmRlciJdLCJyZW1pbmRlcnMubGlzdCI6WyJ0b2tlbiJdLCJydG0uY29ubmVjdCI6WyJ0b2tlbiJdLCJydG0uc3RhcnQiOlsidG9rZW4iXSwic2VhcmNoLmFsbCI6WyJ0b2tlbiIsInF1ZXJ5Il0sInNlYXJjaC5maWxlcyI6WyJ0b2tlbiIsInF1ZXJ5Il0sInNlYXJjaC5tZXNzYWdlcyI6WyJ0b2tlbiIsInF1ZXJ5Il0sInN0YXJzLmFkZCI6WyJ0b2tlbiJdLCJzdGFycy5saXN0IjpbInRva2VuIl0sInN0YXJzLnJlbW92ZSI6WyJ0b2tlbiJdLCJ0ZWFtLmFjY2Vzc0xvZ3MiOlsidG9rZW4iXSwidGVhbS5iaWxsYWJsZUluZm8iOlsidG9rZW4iXSwidGVhbS5pbmZvIjpbInRva2VuIl0sInRlYW0uaW50ZWdyYXRpb25Mb2dzIjpbInRva2VuIl0sInRlYW0ucHJvZmlsZS5nZXQiOlsidG9rZW4iXSwidXNlcmdyb3Vwcy5jcmVhdGUiOlsidG9rZW4iLCJuYW1lIl0sInVzZXJncm91cHMuZGlzYWJsZSI6WyJ0b2tlbiIsInVzZXJncm91cCJdLCJ1c2VyZ3JvdXBzLmVuYWJsZSI6WyJ0b2tlbiIsInVzZXJncm91cCJdLCJ1c2VyZ3JvdXBzLmxpc3QiOlsidG9rZW4iXSwidXNlcmdyb3Vwcy51cGRhdGUiOlsidG9rZW4iLCJ1c2VyZ3JvdXAiXSwidXNlcmdyb3Vwcy51c2Vycy5saXN0IjpbInRva2VuIiwidXNlcmdyb3VwIl0sInVzZXJncm91cHMudXNlcnMudXBkYXRlIjpbInRva2VuIiwidXNlcmdyb3VwIiwidXNlcnMiXSwidXNlcnMuZGVsZXRlUGhvdG8iOlsidG9rZW4iXSwidXNlcnMuZ2V0UHJlc2VuY2UiOlsidG9rZW4iLCJ1c2VyIl0sInVzZXJzLmlkZW50aXR5IjpbInRva2VuIl0sInVzZXJzLmluZm8iOlsidG9rZW4iLCJ1c2VyIl0sInVzZXJzLmxpc3QiOlsidG9rZW4iXSwidXNlcnMuc2V0QWN0aXZlIjpbInRva2VuIl0sInVzZXJzLnNldFBob3RvIjpbInRva2VuIiwiaW1hZ2UiXSwidXNlcnMuc2V0UHJlc2VuY2UiOlsidG9rZW4iLCJwcmVzZW5jZSJdLCJ1c2Vycy5wcm9maWxlLmdldCI6WyJ0b2tlbiJdLCJ1c2Vycy5wcm9maWxlLnNldCI6WyJ0b2tlbiJdfX0sZnVuY3Rpb24oZSx0LG4pe2xldCBvPW4oNSkscz1lbmNvZGVVUklDb21wb25lbnQscj1lPT5PYmplY3Qua2V5cyhlKS5tYXAodD0+cyh0KSsiPSIrcyhlW3RdKSkuam9pbigiJiIpO2FzeW5jIGZ1bmN0aW9uIGEoZSx0LG4pe3RyeXt2YXIgcz1vKGUsdCk7aWYocyl0aHJvdyBzO09iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24oZSl7Im9iamVjdCI9PXR5cGVvZiB0W2VdJiYodFtlXT1KU09OLnN0cmluZ2lmeSh0W2VdKSl9KTt2YXIgYT17bWV0aG9kOiJQT1NUIixoZWFkZXJzOm5ldyBIZWFkZXJzKHsiQ29udGVudC1UeXBlIjoiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIn0pLGJvZHk6cih0KX0saT1hd2FpdCBmZXRjaChgaHR0cHM6Ly9zbGFjay5jb20vYXBpLyR7ZX1gLGEpLGM9YXdhaXQgaS5qc29uKCk7Yy5lcnJvcj9uKEVycm9yKGMuZXJyb3IpKTpuKG51bGwsYyl9Y2F0Y2goZSl7bihlKX19ZS5leHBvcnRzPWZ1bmN0aW9uKGUsdCxuKXtpZighbilyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixvKXthKGUsdCxmdW5jdGlvbihlLHQpe2U/byhlKTpuKHQpfSl9KTthKGUsdCxuKX19LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1mdW5jdGlvbihlLHQsbixvKXtyZXR1cm57bmFtZToiU2xhY2tQcm90b1N0dWIiLGluc3RhbmNlOm5ldyBhKGUsdCxuLG8pfX07dmFyIG89big0KSxzPW4ubihvKTtmdW5jdGlvbiByKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciBvPXRbbl07by5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsInZhbHVlImluIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX19dmFyIGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixvLHIpe2lmKGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksIXQpdGhyb3cgbmV3IEVycm9yKCJUaGUgcnVudGltZVByb3RvU3R1YlVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIiKTtpZighbil0aHJvdyBuZXcgRXJyb3IoIlRoZSBidXMgaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7aWYoIW8pdGhyb3cgbmV3IEVycm9yKCJUaGUgY29uZmlnIGlzIGEgbmVlZGVkIHBhcmFtZXRlciIpO2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIENvbnN0cnVjdG9yIExvYWRlZCIpO3ZhciBhPXRoaXM7dGhpcy5fd3M9bnVsbCx0aGlzLl90b1N1YnNjcmliZVByZXNlbmNlPVtdLHRoaXMuX2FkZGVkVXNlcnNJbmZvPVtdLHRoaXMuX2FscmVhZHlDcmVhdGVkPSExLHRoaXMuX3NsYWNrPXMuYSx0aGlzLl91c2Vyc1VwZGF0ZWQ9ITEsdGhpcy5fc3Vic2NyaWJlZExpc3Q9W10sdGhpcy5fbWVzc2FnZUhpc3RvcnlDb250cm9sPXt9LHRoaXMuX3VzZXJzTGlzdD1bXSx0aGlzLl9jaGFubmVsc0xpc3Q9W10sdGhpcy5faWQ9MCx0aGlzLl90b2tlbj0iIix0aGlzLl9kYXRhT2JqZWN0UmVwb3J0ZXJVUkwsdGhpcy5fZmFjdG9yeT1yLHRoaXMuX2NvbnRleHRSZXBvcnRlcnNJbmZvPXt9LHRoaXMuX3N5bmNoZXI9ci5jcmVhdGVTeW5jaGVyKHQsbixvKSx0aGlzLl9jaGF0TWFuYWdlcj1yLmNyZWF0ZUNoYXRNYW5hZ2VyKHQsbixvLHRoaXMuX3N5bmNoZXIpLHRoaXMuX2NvbnRleHRSZXBvcnRlcj1yLmNyZWF0ZUNvbnRleHRSZXBvcnRlcih0LG4sbyx0aGlzLl9zeW5jaGVyKSx0aGlzLl9teVVybD10LHRoaXMuX2J1cz1uLHRoaXMuX2NvbmZpZz1vLHRoaXMuX3J1bnRpbWVTZXNzaW9uVVJMPW8ucnVudGltZVVSTCx0aGlzLl9yZU9wZW49ITEsdGhpcy5fY2hhdE1hbmFnZXIub25JbnZpdGF0aW9uKGZ1bmN0aW9uKGUpe2EuX29uU2xhY2tJbnZpdGF0aW9uKGUpfSksdGhpcy5fbm90aWZpY2F0aW9uSGFuZGxlcj1yLmNyZWF0ZU5vdGlmaWNhdGlvbkhhbmRsZXIobiksdGhpcy5fbm90aWZpY2F0aW9uSGFuZGxlci5vbk5vdGlmaWNhdGlvbigiY29tbSIsZnVuY3Rpb24oZSl7YS5fY2hhdE1hbmFnZXIucHJvY2Vzc05vdGlmaWNhdGlvbihlKX0pLG4uYWRkTGlzdGVuZXIoIioiLGZ1bmN0aW9uKGUpe2lmKGUuZnJvbSE9PXQpc3dpdGNoKGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIG5ldyBtc2cgIixlKSxlLnR5cGUpe2Nhc2UiY3JlYXRlIjphLl9ub3RpZmljYXRpb25IYW5kbGVyLm9uQ3JlYXRlKGUpO2JyZWFrO2Nhc2UiZGVsZXRlIjphLl9ub3RpZmljYXRpb25IYW5kbGVyLm9uRGVsZXRlKGUpfX0pLGEuX3NlbmRTdGF0dXMoImNyZWF0ZWQiKX1yZXR1cm4gZnVuY3Rpb24oZSx0LG4pe3QmJnIoZS5wcm90b3R5cGUsdCksbiYmcihlLG4pfShlLFt7a2V5OiJfZmlsdGVyIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gZS52aWEhPT10aGlzLl9teVVybH19LHtrZXk6Il9vcGVuIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7bi5fc2Vzc2lvbj9jb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBzZXNzaW9uIGFscmVhZHkgZXhpc3QiKTooY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gY3JlYXRpbmcgU2Vzc2lvbiBmb3IgdG9rZW46IixlKSxuLl9zZW5kU3RhdHVzKCJpbi1wcm9ncmVzcyIpLG4uX3Nlc3Npb249dGhpcy5fc2xhY2sucnRtLmNvbm5lY3Qoe3Rva2VuOmUsYmF0Y2hfcHJlc2VuY2VfYXdhcmU6MSxwcmVzZW5jZV9zdWI6ITB9KSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBzZXNzaW9uIixuLl9zZXNzaW9uKSxuLl9zZXNzaW9uLmNyZWF0ZWRUaW1lPShuZXcgRGF0ZSkuZ2V0VGltZSgpLzFlMyxuLl9zZXNzaW9uLnRoZW4oZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gU2Vzc2lvbiByZXN1bHQiLGUpLGUub2smJihuLl93cz1uZXcgV2ViU29ja2V0KGUudXJsKSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB3ZWJzb2NrZXQiLG4uX3dzKSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB3ZWJzb2NrZXQgdXJsICIsbi5fd3MudXJsKSxuLl93cy5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7dmFyIHQ9SlNPTi5wYXJzZShlLmRhdGEpO2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIG5ldyBtc2cgb24gd2ViU29ja2V0Iix0KSwibWVzc2FnZSI9PXQudHlwZT9uLl9oYW5kbGVOZXdNZXNzYWdlKHQpOiJwcmVzZW5jZV9jaGFuZ2UiPT10LnR5cGU/bi5faGFuZGxlUHJlc2VuY2VDaGFuZ2UodCk6Im1lbWJlcl9qb2luZWRfY2hhbm5lbCI9PXQudHlwZSYmbi5faGFuZGxlTmV3VXNlcih0KX0sbi5fd3Mub25lcnJvcj1mdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB3ZWJzb2NrZXIgRXJyb3IiLGUpfSl9KSxuLl9zZW5kU3RhdHVzKCJsaXZlIikpLHNldFRpbWVvdXQoZnVuY3Rpb24oKXt0KCl9KX19LHtrZXk6Il9yZXN1bWVSZXBvcnRlciIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixvKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSByZXN1bWluZyByZXBvcnRlciBvZiAiLGUpLHQuX3N5bmNoZXIucmVzdW1lUmVwb3J0ZXJzKHtzdG9yZTohMCxyZXBvcnRlcjplfSkudGhlbihmdW5jdGlvbih0KXt2YXIgbz1PYmplY3Qua2V5cyh0KTtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSAiLHQsbyk7cmV0dXJuIG8uZm9yRWFjaChmdW5jdGlvbihvKXtpZih0W29dLl9uYW1lPT09ZSYmby5zdGFydHNXaXRoKCJjb250ZXh0Oi8vIikpcmV0dXJuIGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHJlcG9ydGVyIHRvIHJldHVybiIsdFtvXSksbih0W29dKX0pLG4oITEpfSl9KX19LHtrZXk6Il9vblNsYWNrSW52aXRhdGlvbiIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlLmlkZW50aXR5Lmhhc093blByb3BlcnR5KCJhY2Nlc3NUb2tlbiIpJiZlLmlkZW50aXR5LmFjY2Vzc1Rva2VuPyh0aGlzLl90b2tlbj1lLmlkZW50aXR5LmFjY2Vzc1Rva2VuLHQuX29wZW4odGhpcy5fdG9rZW4sZnVuY3Rpb24oKXtpZih0Ll9maWx0ZXIoZSkpe2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIEFmdGVyIEZpbHRlciIsZSk7dmFyIG49ZS5zY2hlbWE7aWYoZS52YWx1ZS5uYW1lKXt2YXIgbz1uLnNwbGl0KCIvIik7IkNvbW11bmljYXRpb24iPT09b1tvLmxlbmd0aC0xXT90Ll9nZXRTbGFja0luZm9ybWF0aW9uKGUudG8sZS5pZGVudGl0eS5pbnB1dC51c2VyX2lkKS50aGVuKGZ1bmN0aW9uKG4pe3ZhciBvPW4ub3duSW5mbyxzPW4uaW52SW5mbztjb25zb2xlLmxvZygiU2xhY2sgVXNlciBpbmZvcm1hdGlvbjogIixuLGUpO3ZhciByPXQuX2ZhY3RvcnkuY3JlYXRlTWVzc2FnZUJvZHlJZGVudGl0eShvLm5hbWUsInNsYWNrOi8vc2xhY2suY29tLyIrby5uYW1lKyJAc2xhY2suY29tIixvLnByb2ZpbGUuaW1hZ2VfMTkyLG8ubmFtZSwiIiwic2xhY2suY29tIix2b2lkIDAsby5wcm9maWxlKSxhPXQuX2ZhY3RvcnkuY3JlYXRlTWVzc2FnZUJvZHlJZGVudGl0eShzLm5hbWUsInNsYWNrOi8vc2xhY2suY29tLyIrcy5uYW1lKyJAc2xhY2suY29tIixzLnByb2ZpbGUuaW1hZ2VfMTkyLHMubmFtZSwiIiwic2xhY2suY29tIix2b2lkIDAscy5wcm9maWxlKTtlLmFjaygyMDApLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHN1YnNjcmliaW5nIG9iamVjdCIsZS51cmwscik7dmFyIGk9e2lkOnMuaWQsbmFtZTpzLm5hbWUsdXNlclVSTDphLnVzZXJQcm9maWxlLnVzZXJVUkwsaWRlbnRpdHk6YX0sYz17aWQ6ZS5pZGVudGl0eS5pbnB1dC51c2VyX2lkLHVzZXJVUkw6ci51c2VyUHJvZmlsZS51c2VyVVJMfTtpZih0Ll9hbHJlYWR5Q3JlYXRlZClpZihjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBBbHJlYWR5IGNyZWF0ZWQiLGUpLGNvbnNvbGUubG9nKHQuX3N1YnNjcmliZWRMaXN0Lmxlbmd0aCksMCE9dC5fc3Vic2NyaWJlZExpc3QubGVuZ3RoKXQuX2NoYW5uZWxTdGF0dXNJbmZvKGUsaSxjKTtlbHNle3ZhciBsPWUudG8uc3BsaXQoIi8vIilbMF0rIi8vc2xhY2suY29tLyIrZS50by5zcGxpdCgiLy8iKVsxXTt0Ll9jcmVhdGVOZXdDb250ZXh0UmVwb3J0ZXIobCl9ZWxzZXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBOb3QgQWxyZWFkeSBjcmVhdGVkIixlKSx0Ll9hbHJlYWR5Q3JlYXRlZD0hMCx0Ll9kYXRhT2JqZWN0UmVwb3J0ZXJVUkw9ZS51cmw7dmFyIHU9e3VzZXI6InNsYWNrOi8vIitvLm5hbWUrIkBzbGFjay5jb20iLGRvbWFpbjoic2xhY2suY29tIixpZDplLmlkZW50aXR5LmlucHV0LnVzZXJfaWQsdXNlclVSTDoic2xhY2s6Ly9zbGFjay5jb20vIitvLm5hbWUrIkBzbGFjay5jb20iLGlkZW50aXR5OnJ9O3QuX2FkZGVkVXNlcnNJbmZvLnB1c2godSksdC5fY3JlYXRlTmV3Q29udGV4dFJlcG9ydGVyKHIudXNlclByb2ZpbGUudXNlclVSTCkudGhlbihmdW5jdGlvbihuKXsxPT1uJiZ0Ll9jaGF0TWFuYWdlci5qb2luKGUudXJsLCExLHIpLnRoZW4oZnVuY3Rpb24obil7dC5fcHJlcGFyZUNoYXQobik7dmFyIG89e3R5cGU6InByZXNlbmNlX3N1YiIsaWRzOnQuX3RvU3Vic2NyaWJlUHJlc2VuY2V9O2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHdlYnNvY2tldCBzZW50bWVzc2FnZSIsdC5fd3MucmVhZHlTdGF0ZSxvKSx0Ll93cy5zZW5kKEpTT04uc3RyaW5naWZ5KG8pKTt2YXIgcz17dXJsRGF0YU9iajplLnVybCxzY2hlbWE6ZS5zY2hlbWEsc3Vic2NyaWJlZDohMCxpZGVudGl0eTpyLGNoYXQ6bn07dC5fc3Vic2NyaWJlZExpc3QucHVzaChzKSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBzdWJzY3JpYmVkIGxpc3QiLHQuX3N1YnNjcmliZWRMaXN0KSxlLmlkZW50aXR5LmlucHV0LnVzZXJfaWQmJih0Ll9pZD1lLmlkZW50aXR5LmlucHV0LnVzZXJfaWQpLHQuX2NoYW5uZWxTdGF0dXNJbmZvKGUsaSxjKX0pfSl9fSk6ZS5lcnJvcigiSW52YWxpZCBTY2hlbWU6ICIrb1tvLmxlbmd0aC0xXSl9ZWxzZSBlLmVycm9yKCJDaGF0IE5hbWUgTWlzc2luZyIpfX0pKTplLmVycm9yKCJBY2Nlc3MgVG9rZW4gTWlzc2luZyIpfX0se2tleToiX2NyZWF0ZU5ld0NvbnRleHRSZXBvcnRlciIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixvKXt0Ll9yZXN1bWVSZXBvcnRlcihlKS50aGVuKGZ1bmN0aW9uKG8pe2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIFRFU1QgY3JlYXRpbmcgcmVwb3J0ZXIgZm9yIixlKSx0Ll9hZGRlZFVzZXJzSW5mby5mb3JFYWNoKGZ1bmN0aW9uKHMpe2lmKHMudXNlclVSTD09ZSl7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gVEVTVCBnZXQgcHJlc2Vuc2UgZm9yICIscyk7dmFyIHI9e3Rva2VuOnQuX3Rva2VuLHVzZXI6cy5pZH07dC5fc2xhY2sudXNlcnMuZ2V0UHJlc2VuY2UocixmdW5jdGlvbihyLGEpe2lmKHIpcmV0dXJuIGNvbnNvbGUuZXJyb3IoIltTbGFja1Byb3Rvc3R1Yl0gZXJyb3IiLHIpLG4oITEpO2lmKGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIFBSRVNFTkNFIE9GIFVTRVIiLHMsYSksIWEub2spcmV0dXJuIG4oITEpO2lmKHQuX3RvU3Vic2NyaWJlUHJlc2VuY2UucHVzaChzLmlkKSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB0b1N1YnNjcmliZUFycmF5Iix0Ll90b1N1YnNjcmliZVByZXNlbmNlLCJpbnRleHQiLEpTT04uc3RyaW5naWZ5KHQuX3RvU3Vic2NyaWJlUHJlc2VuY2UpKSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSByZXN1bWVkIG9iaiIsbyksbylyZXR1cm4gY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gcmVwb3J0ZXIgZm9yIHRoaXMgdXNlclVSTDoiLGUsIiBhbHJlYWR5IGV4aXN0cyAiLG8pLHQuX2NvbnRleHRSZXBvcnRlcnNJbmZvW3MuaWRdPW8sbighMCk7dmFyIGk9dC5fY3JlYXRlTmV3T2JqUHJlc2VuY2UoYS5wcmVzZW5jZSk7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gY3JlYXRpbmcgYSBuZXcgY29udGV4dFJlcG9ydGVyIGZvciBpbnZpdGVkVVNFUiAiLGkscyksdC5fY29udGV4dFJlcG9ydGVyLmNyZWF0ZShzLnVzZXJVUkwsaSxbImF2YWlsYWJpbGl0eV9jb250ZXh0Il0scy51c2VyVVJMLHMudXNlclVSTCkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gQ09OVEVYVCBSRVRVUk5FRCIsZSksZS5vblN1YnNjcmlwdGlvbihmdW5jdGlvbihlKXtlLmFjY2VwdCgpLGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIG5ldyBzdWJzIixlKX0pLHQuX2NvbnRleHRSZXBvcnRlcnNJbmZvW3MuaWRdPWUsbighMCl9KS5jYXRjaChmdW5jdGlvbihlKXtjb25zb2xlLmVycm9yKCJbU2xhY2tQcm90b3N0dWJdIGVyciIsZSl9KSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB3ZWJzb2NrZXQgcmVhZHlTdGF0ZSIsdC5fd3MucmVhZHlTdGF0ZSl9KX19KX0pLmNhdGNoKGZ1bmN0aW9uKGUpe3JldHVybiBjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBlcnJvciIsZSksbighMSl9KX0pfX0se2tleToiX2NyZWF0ZU5ld09ialByZXNlbmNlIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSx7aWQ6Il8iK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLDkpLHZhbHVlczpbe3ZhbHVlOnRoaXMuX2dldFByZXNlbmNlKGUpLG5hbWU6ImF2YWlsYWJpbGl0eSIsdHlwZToiYXZhaWxhYmlsaXR5X3N0YXR1cyIsdW5pdDoicHJlcyJ9XX0pfX0se2tleToiX2dldFByZXNlbmNlIix2YWx1ZTpmdW5jdGlvbihlKXtyZXR1cm4iYWN0aXZlIj09PWU/ImF2YWlsYWJsZSI6InVuYXZhaWxhYmxlIn19LHtrZXk6Il9nZXRTbGFja0luZm9ybWF0aW9uIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG8scyl7dmFyIHI9Imh0dHBzOi8vc2xhY2suY29tL2FwaS91c2Vycy5saXN0P3Rva2VuPSIrbi5fdG9rZW4sYT0iaHR0cHM6Ly9zbGFjay5jb20vYXBpL2NoYW5uZWxzLmxpc3Q/dG9rZW49IituLl90b2tlbixpPW4uX3NlbmRIVFRQUmVxdWVzdCgiR0VUIixyKSxjPW4uX3NlbmRIVFRQUmVxdWVzdCgiR0VUIixhKTtQcm9taXNlLmFsbChbaSxjXSkudGhlbihmdW5jdGlvbihzKXtuLl91c2Vyc0xpc3Q9c1swXS5tZW1iZXJzLG4uX2NoYW5uZWxzTGlzdD1zWzFdLmNoYW5uZWxzO3ZhciByPWUuc3BsaXQoIjovLyIpWzFdLnNwbGl0KCJAIilbMF0sYT1uLl91c2Vyc0xpc3QuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLm5hbWU9PT1yfSlbMF0saT1uLl91c2Vyc0xpc3QuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkPT09dH0pWzBdO28oe2ludkluZm86YSxvd25JbmZvOml9KX0sZnVuY3Rpb24oZSl7Y29uc29sZS5lcnJvcigiW1NsYWNrUHJvdG9zdHViXSAiLGUpLHMoZSl9KX0pfX0se2tleToiX2NoYW5uZWxTdGF0dXNJbmZvIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIG89dGhpcyxzPWUudmFsdWUubmFtZS5zcGxpdCgiICIpLmpvaW4oIi0iKS5yZXBsYWNlKC9cLy9naSwiLSIpLHI9by5fY2hhbm5lbHNMaXN0LmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gZS5uYW1lPT09c30pWzBdLGE9bnVsbDtpZihyKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjaGFubmVsIGV4aXN0IixyKTt2YXIgaT0hMTsoYT1vLl9jaGFubmVsc0xpc3QuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLm5hbWU9PT1zfSlbMF0ubWVtYmVycykuZm9yRWFjaChmdW5jdGlvbihlKXtlPT09dC5pZCYmKGk9ITApfSksY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gY2hhbm5lbCBtZW1iZXJzIixhLCIgICAtPiIsaSk7dmFyIGM9MCxsPTA7by5fc3Vic2NyaWJlZExpc3QuZm9yRWFjaChmdW5jdGlvbih0KXt0LnVybERhdGFPYmo9PT1lLnVybCYmKGw9YyksYysrfSksY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gY2hhbm5lbHMiLG8uX3N1YnNjcmliZWRMaXN0LG8uX3N1YnNjcmliZWRMaXN0Lmxlbmd0aCxsKSxvLl9zdWJzY3JpYmVkTGlzdFtsXS5jaGFubmVsSUQ9ci5pZCxpfHxvLl9pbnZpdGUodC5pZCxyLmlkKX1lbHNlIG8uX2NyZWF0ZUNoYW5uZWwocyxlLnVybCkudGhlbihmdW5jdGlvbihuKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSAgYWZ0ZXIgY3JlYXRlIGNoYW5uZWwgIixuKSxuJiZvLl9pbnZpdGUodC5pZCwiIixlLnVybCl9KTtvLl91c2Vyc1VwZGF0ZWQ/Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gdXNlcnMgQWxyZWFkeSBVcGRhdGVkIik6by5fYWRkQWxsVXNlcnNUb0h5cGVydHkoYSx0LG4pfX0se2tleToiX2FkZEFsbFVzZXJzVG9IeXBlcnR5Iix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIG89dGhpcztvLl91c2Vyc1VwZGF0ZWQ9ITA7dmFyIHMscj1bXTtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBsZXRzIGNoZWNrIGlmIHVzZXJzIG5lZWRzIHRvIGJlIGFkZGVkIiksZSYmby5fdXNlcnNMaXN0LmZvckVhY2goZnVuY3Rpb24oYSl7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGU9PT1hLmlkJiZ0LmlkIT1hLmlkJiZuLmlkIT1hLmlkKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB0byBhZGQgIixhLmlkKTt2YXIgaT1vLl9mYWN0b3J5LmNyZWF0ZU1lc3NhZ2VCb2R5SWRlbnRpdHkoYS5uYW1lLCJzbGFjazovL3NsYWNrLmNvbS8iK2EubmFtZSsiQHNsYWNrLmNvbSIsYS5wcm9maWxlLmltYWdlXzE5MixhLm5hbWUsIiIsInNsYWNrLmNvbSIsdm9pZCAwLGEucHJvZmlsZSk7cz17dXNlcjoic2xhY2s6Ly8iK2EubmFtZSsiQHNsYWNrLmNvbSIsZG9tYWluOiJzbGFjay5jb20iLGlkOmEuaWQsdXNlclVSTDoic2xhY2s6Ly9zbGFjay5jb20vIithLm5hbWUrIkBzbGFjay5jb20iLGlkZW50aXR5Oml9LG8uX2FkZGVkVXNlcnNJbmZvLnB1c2gocyksci5wdXNoKHMpfX0pfSkscz17dXNlcjoic2xhY2s6Ly8iK3QubmFtZSsiQHNsYWNrLmNvbSIsZG9tYWluOiJzbGFjay5jb20iLGlkOnQuaWQsdXNlclVSTDoic2xhY2s6Ly9zbGFjay5jb20vIit0Lm5hbWUrIkBzbGFjay5jb20iLGlkZW50aXR5OnQuaWRlbnRpdHl9LG8uX2FkZGVkVXNlcnNJbmZvLnB1c2gocyksci5wdXNoKHMpLHIuZm9yRWFjaChmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBURVNUIGpvaW5pbmcgd2l0aCB1c2VyIixlKSxlLnVzZXJVUkwhPT1uLnVzZXJVUkwmJm8uX2NyZWF0ZU5ld0NvbnRleHRSZXBvcnRlcihlLnVzZXJVUkwpLnRoZW4oZnVuY3Rpb24odCl7MT09dCYmby5fY2hhdE1hbmFnZXIuam9pbihvLl9kYXRhT2JqZWN0UmVwb3J0ZXJVUkwsITEsZS5pZGVudGl0eSkudGhlbihmdW5jdGlvbih0KXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjaGF0bWFuYWdlciBKT0lOIix0LGUudXNlclVSTCxuLnVzZXJVUkwpLG8uX3ByZXBhcmVDaGF0KHQpO3ZhciBzPXt0eXBlOiJwcmVzZW5jZV9zdWIiLGlkczpvLl90b1N1YnNjcmliZVByZXNlbmNlfTtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSB3ZWJzb2NrZXQgc2VudG1lc3NhZ2UiLG8uX3dzLnJlYWR5U3RhdGUscyksby5fd3Muc2VuZChKU09OLnN0cmluZ2lmeShzKSl9KS5jYXRjaChmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjaGF0bWFuYWdlciBKT0lOIGVycm9yIixlKX0pfSl9KX19LHtrZXk6Il9oYW5kbGVOZXdVc2VyIix2YWx1ZTpmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBIYW5kbGluZyBhIG5ldyB1c2VyIixlKTt2YXIgdCxuPXRoaXM7aWYobi5fc3Vic2NyaWJlZExpc3QuZm9yRWFjaChmdW5jdGlvbihuKXtuLmNoYW5uZWxJRD09PWUuY2hhbm5lbCYmKHQ9bil9KSx0KXt2YXIgbz1uLl91c2Vyc0xpc3QuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkPT09ZS51c2VyfSlbMF0scz1uLl9mYWN0b3J5LmNyZWF0ZU1lc3NhZ2VCb2R5SWRlbnRpdHkoby5uYW1lLCJzbGFjazovL3NsYWNrLmNvbS8iK28ubmFtZSsiQHNsYWNrLmNvbSIsby5wcm9maWxlLmltYWdlXzE5MixvLm5hbWUsIiIsInNsYWNrLmNvbSIsdm9pZCAwLG8ucHJvZmlsZSkscj17dXNlcjoic2xhY2s6Ly8iK28ubmFtZSsiQHNsYWNrLmNvbSIsZG9tYWluOiJzbGFjay5jb20iLGlkOmUudXNlcix1c2VyVVJMOiJzbGFjazovL3NsYWNrLmNvbS8iK28ubmFtZSsiQHNsYWNrLmNvbSIsaWRlbnRpdHk6c307bi5fYWRkZWRVc2Vyc0luZm8ucHVzaChyKSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBKb2luaW5nIGNoYXQiLHQudXJsRGF0YU9iaiwiIHdpdGgiLHMpLG4uX2NyZWF0ZU5ld0NvbnRleHRSZXBvcnRlcihzLnVzZXJQcm9maWxlLnVzZXJVUkwpLnRoZW4oZnVuY3Rpb24oZSl7MT09ZSYmbi5fY2hhdE1hbmFnZXIuam9pbih0LnVybERhdGFPYmosITEscykudGhlbihmdW5jdGlvbihlKXtuLl9wcmVwYXJlQ2hhdChlKTt2YXIgdD17dHlwZToicHJlc2VuY2Vfc3ViIixpZHM6bi5fdG9TdWJzY3JpYmVQcmVzZW5jZX07Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gd2Vic29ja2V0IHNlbnRtZXNzYWdlIixuLl93cy5yZWFkeVN0YXRlLHQpLG4uX3dzLnNlbmQoSlNPTi5zdHJpbmdpZnkodCkpfSl9KX19fSx7a2V5OiJfaGFuZGxlUHJlc2VuY2VDaGFuZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKGNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHVwZGF0aW5nIHByZXNlbmNlIG9mIHVzZXIiKSx0aGlzLl9jb250ZXh0UmVwb3J0ZXJzSW5mb1tlLnVzZXJdKXt2YXIgdD10aGlzLl9jb250ZXh0UmVwb3J0ZXJzSW5mb1tlLnVzZXJdO3QuZGF0YS52YWx1ZXNbMF0udmFsdWU9dGhpcy5fZ2V0UHJlc2VuY2UoZS5wcmVzZW5jZSksY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gcHJlc2VuY2Ugb2YgdXNlciIsZS51c2VyLCIgdXBkYXRlZCB0byIsdC5kYXRhKX19fSx7a2V5OiJfaGFuZGxlTmV3TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gSGFuZGxpbmcgYSBuZXcgbWVzc2FnZSIsZSk7dmFyIHQsbj0iIjt0aGlzLl9zdWJzY3JpYmVkTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKG8pe28uY2hhbm5lbElEPT09ZS5jaGFubmVsJiYobj1vLmNoYW5uZWxJRCx0PW8uY2hhdCl9KSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBzdWJzY3JpYmVkIGxpc3QiLHRoaXMuX3N1YnNjcmliZWRMaXN0KSxlLmNoYW5uZWwmJmUudHM+dGhpcy5fc2Vzc2lvbi5jcmVhdGVkVGltZSYmKGUuY2hhbm5lbD09PW4mJmUudXNlciE9PXRoaXMuX2lkfHwhZS5oYXNPd25Qcm9wZXJ0eSgiYm90X2lkIikmJmUudXNlcj09PXRoaXMuX2lkJiZlLmNoYW5uZWw9PT1uKSYmdGhpcy5fZ2V0VXNlckluZm8oZS51c2VyKS50aGVuKGZ1bmN0aW9uKG4pe2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIG1zZyB0byBhZGRDaGlsZCIsZS50ZXh0LCIgICAgIGlkZW50aXR5OiIsbiksdC5zZW5kKGUudGV4dCxuKX0pfX0se2tleToiX2dldFVzZXJJbmZvIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuKXt0Ll9zbGFjay51c2Vycy5pbmZvKHt0b2tlbjp0Ll90b2tlbix1c2VyOmV9LGZ1bmN0aW9uKGUsbyl7aWYoZSljb25zb2xlLmVycm9yKCJbU2xhY2tQcm90b3N0dWJdIGVycm9yIixlKTtlbHNle2NvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWIgZ2V0VXNlckluZm9dICIsbyk7dmFyIHM9dC5fZmFjdG9yeS5jcmVhdGVNZXNzYWdlQm9keUlkZW50aXR5KG8udXNlci5uYW1lLCJzbGFjazovL3NsYWNrLmNvbS8iK28udXNlci5uYW1lKyJAc2xhY2suY29tIixvLnVzZXIucHJvZmlsZS5pbWFnZV8xOTIsby51c2VyLm5hbWUsIiIsInNsYWNrLmNvbSIpO24ocyl9fSl9KX19LHtrZXk6Il9wcmVwYXJlQ2hhdCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBjaGF0IixlKSxlLm9uTWVzc2FnZShmdW5jdGlvbihuKXtjb25zb2xlLmluZm8oIltTbGFja1Byb3Rvc3R1Yl0gb25NZXNzYWdlOiAiLG4pLGNvbnNvbGUuaW5mbygiW1NsYWNrUHJvdG9zdHViXSBPYnNlcnZlciAtIE1lc3NhZ2UgSGlzdG9yeSBDb250cm9sICIsdC5fbWVzc2FnZUhpc3RvcnlDb250cm9sKTt2YXIgbyxzPWUuY2hpbGRfY3NlcSxyPWUuX2RhdGFPYmplY3RPYnNlcnZlci51cmw7KHQuX3N1YnNjcmliZWRMaXN0LmZvckVhY2goZnVuY3Rpb24oZSl7ZS51cmxEYXRhT2JqPT09ciYmKG89ZS5jaGFubmVsSUQpfSksdC5fbWVzc2FnZUhpc3RvcnlDb250cm9sLmhhc093blByb3BlcnR5KHIpKT90Ll9tZXNzYWdlSGlzdG9yeUNvbnRyb2xbcl0uaWQhPT1zJiYodC5fbWVzc2FnZUhpc3RvcnlDb250cm9sW3JdLmlkPXMsdC5fZGVsaXZlcihuLG8pKToodC5fbWVzc2FnZUhpc3RvcnlDb250cm9sW3JdPXtpZDpzfSx0Ll9kZWxpdmVyKG4sbykpfSl9fSx7a2V5OiJfaW52aXRlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1hcmd1bWVudHMubGVuZ3RoPjEmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06IiIsbj1hcmd1bWVudHMubGVuZ3RoPjI/YXJndW1lbnRzWzJdOnZvaWQgMDsiIj09dCYmdGhpcy5fc3Vic2NyaWJlZExpc3QuZm9yRWFjaChmdW5jdGlvbihlKXtlLnVybERhdGFPYmo9PT1uJiYodD1lLmNoYW5uZWxJRCl9KTt2YXIgbz17dG9rZW46dGhpcy5fdG9rZW4sY2hhbm5lbDp0LHVzZXI6ZX07dGhpcy5fc2xhY2suY2hhbm5lbHMuaW52aXRlKG8sZnVuY3Rpb24oZSx0KXtlP2NvbnNvbGUuZXJyb3IoIltTbGFja1Byb3Rvc3R1Yl0gZXJyb3IiLGUpOmNvbnNvbGUubG9nKCJbU2xhY2tQcm90b3N0dWJdIHVzZXIgaW52aXRlZCB3aXRoIHN1Y2VzcyIsdCl9KX19LHtrZXk6Il9kZWxpdmVyIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYoY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gTXNnIHRvIERlbGl2ZXI6ICIsZSwiIG9uIGNoYW5uZWw6Iix0KSx0JiZlLnZhbHVlJiZlLmhhc093blByb3BlcnR5KCJpZGVudGl0eSIpJiZlLmlkZW50aXR5Lmhhc093blByb3BlcnR5KCJ1c2VyUHJvZmlsZSIpJiZlLmlkZW50aXR5LnVzZXJQcm9maWxlLmhhc093blByb3BlcnR5KCJuYW1lIikmJmUuaWRlbnRpdHkudXNlclByb2ZpbGUubmFtZSl7dmFyIG89ZS5pZGVudGl0eS51c2VyUHJvZmlsZS5uYW1lKyI6ICIrZS52YWx1ZS5jb250ZW50LHM9e2FzX3VzZXI6ITAsdG9rZW46bi5fdG9rZW4sY2hhbm5lbDp0LHRleHQ6b307Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gKFBvc3RNZXNzYWdlIHNsYWNrIGFwaSkgdG9rZW4oIixuLl90b2tlbiwiKSAgY2hhbm5lbCgiLHQsIikgdGV4dCgiLGUudmFsdWUuY29udGVudCwiKSIpLG4uX3NsYWNrLmNoYXQucG9zdE1lc3NhZ2UocyxmdW5jdGlvbihvLHMpe2lmKG8paWYoIm5vdF9pbl9jaGFubmVsIj09by5tZXNzYWdlKXtjb25zb2xlLmVycm9yKCJbU2xhY2tQcm90b3N0dWJdIENoYW5uZWwgZXhpc3QsIGJ1dCB1c2VyIGlzIG5vdCBvbiBjaGFubmVsIixvKTt2YXIgcj1uLl9jaGFubmVsc0xpc3QuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlkPT09dH0pWzBdLGE9e3Rva2VuOm4uX3Rva2VuLG5hbWU6ci5uYW1lfTtuLl9zbGFjay5jaGFubmVscy5qb2luKGEpLG4uX2RlbGl2ZXIoZSx0KX1lbHNlIGNvbnNvbGUuZXJyb3IoIltTbGFja1Byb3Rvc3R1Yl0gZXJyb3IiLG8pO2Vsc2UgY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gUG9zdE1lc3NhZ2Ugd2l0aCBTdWNlc3MiLHMpfSl9fX0se2tleToiX2NyZWF0ZUNoYW5uZWwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obyl7dmFyIHM9e3Rva2VuOm4uX3Rva2VuLG5hbWU6ZX07Y29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gQ3JlYXRpbmcgYSBuZXcgY2hhbm5lbCB0b0NyZWF0ZToiLHMsIiAgY2hhbm5lbE9ialVybDoiLHQpLG4uX3NsYWNrLmNoYW5uZWxzLmNyZWF0ZShzLGZ1bmN0aW9uKGUscyl7aWYoZSljb25zb2xlLmVycm9yKCJbU2xhY2tQcm90b3N0dWJdICIsZSk7ZWxzZSBpZihzLm9rKXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBDaGFubmVsIENyZWF0ZWQgd2l0aCBTdWNlc3MgIixzKSxjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViXSBBc3NvY2lhdGUgYSBuZXcgY2hhbm5lbCBJRCIscy5jaGFubmVsLmlkLCJ0byB1cmxEYXRhT2JqIix0KTt2YXIgcj0wLGE9MDtuLl9zdWJzY3JpYmVkTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UudXJsRGF0YU9iaj09PXQmJihhPXIpLHIrK30pLG4uX3N1YnNjcmliZWRMaXN0W2FdLmNoYW5uZWxJRD1zLmNoYW5uZWwuaWQsY29uc29sZS5sb2coIltTbGFja1Byb3Rvc3R1Yl0gc3Vic2NyaWJlZCBsaXN0IixuLl9zdWJzY3JpYmVkTGlzdCksbyghMCl9fSl9KX19LHtrZXk6Il9zZW5kSFRUUFJlcXVlc3QiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4sbyl7dmFyIHM9bmV3IFhNTEh0dHBSZXF1ZXN0OyJ3aXRoQ3JlZGVudGlhbHMiaW4gcz9zLm9wZW4oZSx0LCEwKToidW5kZWZpbmVkIiE9dHlwZW9mIFhEb21haW5SZXF1ZXN0PyhzPW5ldyBYRG9tYWluUmVxdWVzdCkub3BlbihlLHQpOnM9bnVsbCxzPyhzLm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe2lmKDQ9PT1zLnJlYWR5U3RhdGUpaWYoMjAwPT09cy5zdGF0dXMpe3ZhciBlPUpTT04ucGFyc2Uocy5yZXNwb25zZVRleHQpO24oZSl9ZWxzZSA0MDA9PT1zLnN0YXR1cz9vKCJUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4iKTpvKCJzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQiKX0scy5zZW5kKCkpOm8oIkNPUlMgbm90IHN1cHBvcnRlZCIpfSl9fSx7a2V5OiJfc2VuZFN0YXR1cyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtjb25zb2xlLmxvZygiW1NsYWNrUHJvdG9zdHViIHN0YXR1cyBjaGFuZ2VkXSB0byAiLGUpLHRoaXMuX3N0YXRlPWU7dmFyIG49e3R5cGU6InVwZGF0ZSIsZnJvbTp0aGlzLl9teVVybCx0bzp0aGlzLl9teVVybCsiL3N0YXR1cyIsYm9keTp7dmFsdWU6ZX19O3QmJihuLmJvZHkuZGVzYz10KSx0aGlzLl9idXMucG9zdE1lc3NhZ2Uobil9fSx7a2V5OiJjb25maWciLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9jb25maWd9fSx7a2V5OiJydW50aW1lU2Vzc2lvbiIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3J1bnRpbWVTZXNzaW9uVVJMfX1dKSxlfSgpfSxmdW5jdGlvbihlLHQsbil7bGV0IG89bigwKSxzPW4oMikscj1uKDYpO2UuZXhwb3J0cz1vKHIscyl9LGZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1uKDEpO2UuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2xldCBuPW9bZV0uZmlsdGVyKGU9PnZvaWQgMD09PXRbZV0pO3JldHVybiEhbi5sZW5ndGgmJkVycm9yKGAke2V9IG1pc3NpbmcgcGFyYW1zOiAke24uam9pbigiLCAiKX1gKX19LGZ1bmN0aW9uKGUsdCxuKXt2YXIgbz1uKDApLHM9bigyKTtlLmV4cG9ydHM9ZnVuY3Rpb24oZSl7ZXx8KGU9e30pO3JldHVybiBuZXcgY2xhc3N7Y29uc3RydWN0b3IoKXtvKHRoaXMsZnVuY3Rpb24odCxuLG8pe3JldHVybiBuLnRva2VuPW4udG9rZW58fGUudG9rZW4scyh0LG4sbyl9KX19fX1dKS5kZWZhdWx0fSk7",
      "sourceCodeClassname": "slack.slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.20",
    "description": "Protostub to exchange messages with slack",
    "language": "javascript",
    "cguid": "46968ae37faa364f9cc07983229b5a641",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "VertxProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "default",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.20",
    "description": "Protostub to exchange messages with vertx",
    "language": "javascript",
    "cguid": "459ddec3ec1a17767da034fbe0988f1f9",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "objectName": "default",
    "configuration": {
      "url": "wss://msg-node.hysmart.rethink.ptinovacao.pt/localhost/ws"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "VertxProtoStubNode": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "default",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.20",
    "description": "Protostub to exchange messages with vertx",
    "language": "javascript",
    "cguid": "41338ea57960781be06f8cf3c78cbf70f",
    "type": "ProtoStubs",
    "constraints": {
      "node": true
    },
    "objectName": "default",
    "configuration": {
      "url": "wss://msg-node.hysmart.rethink.ptinovacao.pt/localhost/ws"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "VertxAppProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "sharing-cities-dsm",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "8.30",
    "description": "Protostub to exchange messages with vertx",
    "language": "javascript",
    "cguid": "46c0d57ffd1f5fe7888e6ba971acb4e79",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "sharing-cities-dsm",
    "configuration": {
      "url": "https://msg-node.localhost:9091/eventbus",
      "vertxbus_ping_interval": 10000,
      "host": "sharing-cities-dsm",
      "streams": [],
      "publicWallets": {
        "identity": {
          "userProfile": {
            "guid": "user-guid://public-wallets",
            "userURL": "user://public-wallets"
          }
        }
      },
      "timeoutValue": 500,
      "version": 0.8
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "StravaProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "fitness.strava.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "4.10",
    "description": "Protostub of Strava",
    "language": "javascript",
    "cguid": "44995c04510b283b19af39626f5f6c39b",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "fitness.strava.com",
    "configuration": {
      "sessions_query_interval": 300000,
      "domain": "localhost"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}