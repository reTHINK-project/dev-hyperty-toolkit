{
  "default": {
    "cguid": "4-6e7a55d5-3daf-cdc4-63fb-8b2984ada3650",
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of VertxProtoStub",
    "objectName": "VertxProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.activate = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

exports['default'] = activate;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var VertxProtoStub = (function () {
  /* private
    _continuousOpen: boolean
     _runtimeProtoStubURL: string
    _bus: MiniBus
    _msgCallback: (Message) => void
    _config: { url, runtimeURL }
     _sock: (WebSocket | SockJS)
    _reOpen: boolean
  */

  /**
   * Vertx ProtoStub creation
   * @param  {string} runtimeProtoStubURL - URL used internally for message delivery point. Not used for MessageNode deliver.
   * @param  {MiniBus} bus - MiniBus used to send/receive messages. Normally connected to the MessageBus.
   * @param  {Object} config - Mandatory fields are: "url" of the MessageNode address and "runtimeURL".
   * @return {VertxProtoStub}
   */

  function VertxProtoStub(runtimeProtoStubURL, bus, config) {
    _classCallCheck(this, VertxProtoStub);

    var _this = this;

    this._id = 0;
    this._continuousOpen = true;

    this._runtimeProtoStubURL = runtimeProtoStubURL;
    this._bus = bus;
    this._config = config;

    this._runtimeSessionURL = config.runtimeURL;
    this._reOpen = false;

    bus.addListener('*', function (msg) {
      _this._open(function () {
        if (_this._filter(msg)) {
          _this._sock.send(JSON.stringify(msg));
        }
      });
    });
  }

  /**
   * Get the configuration for this ProtoStub
   * @return {Object} - Mandatory fields are: "url" of the MessageNode address and "runtimeURL".
   */

  _createClass(VertxProtoStub, [{
    key: 'connect',

    /**
     * Try to open the connection to the MessageNode. Connection is auto managed, there is no need to call this explicitly.
     * However, if "disconnect()" is called, it's necessary to call this to enable connections again.
     * A status message is sent to "runtimeProtoStubURL/status", containing the value "connected" if successful, or "disconnected" if some error occurs.
     */
    value: function connect() {
      var _this = this;

      _this._continuousOpen = true;
      _this._open(function () {});
    }

    /**
     * It will disconnect and order to stay disconnected. Reconnection tries, will not be attempted, unless "connect()" is called.
     * A status message is sent to "runtimeProtoStubURL/status" with value "disconnected".
     */
  }, {
    key: 'disconnect',
    value: function disconnect() {
      var _this = this;

      _this._continuousOpen = false;
      if (_this._sock) {
        _this._sendClose();
      }
    }
  }, {
    key: '_sendOpen',
    value: function _sendOpen(callback) {
      var _this = this;

      _this._id++;
      var msg = {
        id: _this._id, type: 'open', from: _this._runtimeSessionURL, to: 'mn:/session'
      };

      if (_this._reOpen) {
        msg.type = 're-open';
      }

      //register and wait for open reply...
      var hasResponse = false;
      _this._sessionCallback = function (reply) {
        if (reply.type === 'response' & reply.id === msg.id) {
          hasResponse = true;
          if (reply.body.code === 200) {
            if (reply.body.runtimeToken) {
              //setup runtimeSession
              _this._reOpen = true;
              _this._runtimeSessionURL = _this._config.runtimeURL + '/' + reply.body.runtimeToken;
            }

            _this._sendStatus('connected');
            callback();
          } else {
            _this._sendStatus('disconnected', reply.body.desc);
          }
        }
      };

      _this._sock.send(JSON.stringify(msg));
      setTimeout(function () {
        if (!hasResponse) {
          //no response after x seconds...
          _this._sendStatus('disconnected', 'Timeout from mn:/session');
        }
      }, 3000);
    }
  }, {
    key: '_sendClose',
    value: function _sendClose() {
      var _this = this;

      _this._id++;
      var msg = {
        id: _this._id, type: 'close', from: _this._runtimeSessionURL, to: 'mn:/session'
      };

      //invalidate runtimeSession
      _this._reOpen = false;
      _this._runtimeSessionURL = _this._config._runtimeURL;

      _this._sock.send(JSON.stringify(msg));
    }
  }, {
    key: '_sendStatus',
    value: function _sendStatus(value, reason) {
      var _this = this;

      var msg = {
        type: 'update',
        from: _this._runtimeProtoStubURL,
        to: _this._runtimeProtoStubURL + '/status',
        body: {
          value: value
        }
      };

      if (reason) {
        msg.body.desc = reason;
      }

      _this._bus.postMessage(msg);
    }
  }, {
    key: '_waitReady',
    value: function _waitReady(callback) {
      var _this = this;

      if (_this._sock.readyState === 1) {
        callback();
      } else {
        setTimeout(function () {
          _this._waitReady(callback);
        });
      }
    }
  }, {
    key: '_filter',
    value: function _filter(msg) {
      if (msg.body && msg.body.via === this._runtimeProtoStubURL) return false;
      return true;
    }
  }, {
    key: '_deliver',
    value: function _deliver(msg) {
      if (!msg.body) msg.body = {};

      msg.body.via = this._runtimeProtoStubURL;
      this._bus.postMessage(msg);
    }
  }, {
    key: '_open',
    value: function _open(callback) {
      var _this = this;

      if (!this._continuousOpen) {
        //TODO: send status (sent message error - disconnected)
        return;
      }

      if (!_this._sock) {
        if (_this._config.url.substring(0, 2) === 'ws') {
          _this._sock = new WebSocket(_this._config.url);
        } else {
          _this._sock = new SockJS(_this._config.url);
        }

        _this._sock.onopen = function () {
          _this._sendOpen(function () {
            callback();
          });
        };

        _this._sock.onmessage = function (e) {
          var msg = JSON.parse(e.data);
          if (msg.from === 'mn:/session') {
            if (_this._sessionCallback) {
              _this._sessionCallback(msg);
            }
          } else {
            _this._deliver(msg);
          }
        };

        _this._sock.onclose = function (event) {
          var reason = undefined;

          //See https://tools.ietf.org/html/rfc6455#section-7.4
          if (event.code === 1000) {
            reason = 'Normal closure, meaning that the purpose for which the connection was established has been fulfilled.';
          } else if (event.code === 1001) {
            reason = 'An endpoint is \'going away\', such as a server going down or a browser having navigated away from a page.';
          } else if (event.code === 1002) {
            reason = 'An endpoint is terminating the connection due to a protocol error';
          } else if (event.code === 1003) {
            reason = 'An endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).';
          } else if (event.code === 1004) {
            reason = 'Reserved. The specific meaning might be defined in the future.';
          } else if (event.code === 1005) {
            reason = 'No status code was actually present.';
          } else if (event.code === 1006) {
            reason = 'The connection was closed abnormally, e.g., without sending or receiving a Close control frame';
          } else if (event.code === 1007) {
            reason = 'An endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [http://tools.ietf.org/html/rfc3629] data within a text message).';
          } else if (event.code === 1008) {
            reason = 'An endpoint is terminating the connection because it has received a message that "violates its policy". This reason is given either if there is no other sutible reason, or if there is a need to hide specific details about the policy.';
          } else if (event.code === 1009) {
            reason = 'An endpoint is terminating the connection because it has received a message that is too big for it to process.';
          } else if (event.code === 1010) {
            reason = 'An endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn\'t return them in the response message of the WebSocket handshake. <br /> Specifically, the extensions that are needed are: ' + event.reason;
          } else if (event.code === 1011) {
            reason = 'A server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.';
          } else if (event.code === 1015) {
            reason = 'The connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can\'t be verified).';
          } else {
            reason = 'Unknown reason';
          }

          delete _this._sock;
          _this._sendStatus('disconnected', reason);
        };
      } else {
        _this._waitReady(callback);
      }
    }
  }, {
    key: 'config',
    get: function get() {
      return this._config;
    }
  }, {
    key: 'runtimeSession',
    get: function get() {
      return this._runtimeSessionURL;
    }
  }]);

  return VertxProtoStub;
})();

function activate(url, bus, config) {
  return {
    name: 'VertxProtoStub',
    instance: new VertxProtoStub(url, bus, config)
  };
}

/**
* Callback used to send messages
* @callback PostMessage
* @param {Message} msg - Message to send
*/
module.exports = exports['default'];

},{}]},{},[1])(1)
});",
      "sourceCodeClassname": "VertxProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "configuration": {
      "url": "wss://localhost:9090/ws"
    },
    "constraints": "",
    "hypertyCapabilities": "",
    "protocolCapabilities": "",
    "policies": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "slack.com": {
    "sourcePackage": {
      "sourceCode": "(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.activate = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var Response = require('./response');
var extractResponseProps = require('./utils/extractResponseProps');
var extend = require('xtend');

function RequestError(message, props) {
  var err = new Error(message);
  err.name = 'RequestError';
  this.name = err.name;
  this.message = err.message;
  if (err.stack) {
    this.stack = err.stack;
  }

  this.toString = function() {
    return this.message;
  };

  for (var k in props) {
    if (props.hasOwnProperty(k)) {
      this[k] = props[k];
    }
  }
}

RequestError.prototype = extend(Error.prototype);
RequestError.prototype.constructor = RequestError;

RequestError.create = function(message, req, props) {
  var err = new RequestError(message, props);
  Response.call(err, extractResponseProps(req));
  return err;
};

module.exports = RequestError;

},{"./response":4,"./utils/extractResponseProps":6,"xtend":9}],2:[function(require,module,exports){
'use strict';

var
  cleanURL = require('../plugins/cleanurl'),
  XHR = require('./xhr'),
  delay = require('./utils/delay'),
  RequestError = require('./error'),
  Response = require('./response'),
  Request = require('./request'),
  extend = require('xtend'),
  once = require('./utils/once');

var i,
    createError = RequestError.create;

function factory(defaults, plugins) {
  defaults = defaults || {};
  plugins = plugins || [];

  function http(req, cb) {
    var xhr, plugin, done, k, timeoutId, supportsLoadAndErrorEvents;

    req = new Request(extend(defaults, req));

    for (i = 0; i < plugins.length; i++) {
      plugin = plugins[i];
      if (plugin.processRequest) {
        plugin.processRequest(req);
      }
    }

    // Give the plugins a chance to create the XHR object
    for (i = 0; i < plugins.length; i++) {
      plugin = plugins[i];
      if (plugin.createXHR) {
        xhr = plugin.createXHR(req);
        break; // First come, first serve
      }
    }
    xhr = xhr || new XHR();

    req.xhr = xhr;

    // Use a single completion callback. This can be called with or without
    // an error. If no error is passed, the request will be examined to see
    // if it was successful.
    done = once(delay(function(rawError) {
      clearTimeout(timeoutId);
      xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = xhr.ontimeout = xhr.onprogress = null;

      var err = getError(req, rawError);

      var res = err || Response.fromRequest(req);
      for (i = 0; i < plugins.length; i++) {
        plugin = plugins[i];
        if (plugin.processResponse) {
          plugin.processResponse(res);
        }
      }

      // Invoke callbacks
      if (err && req.onerror) req.onerror(err);
      if (!err && req.onload) req.onload(res);
      if (cb) cb(err, err ? undefined : res);

    }));

    supportsLoadAndErrorEvents = ('onload' in xhr) && ('onerror' in xhr);
    xhr.onload = function() { done(); };
    xhr.onerror = done;
    xhr.onabort = function() { done(); };

    // We'd rather use `onload`, `onerror`, and `onabort` since they're the
    // only way to reliably detect successes and failures but, if they
    // aren't available, we fall back to using `onreadystatechange`.
    xhr.onreadystatechange = function() {
      if (xhr.readyState !== 4) return;

      if (req.aborted) return done();

      if (!supportsLoadAndErrorEvents) {
        // Assume a status of 0 is an error. This could be a false
        // positive, but there's no way to tell when using
        // `onreadystatechange` ):
        // See matthewwithanm/react-inlinesvg#10.

        // Some browsers don't like you reading XHR properties when the
        // XHR has been aborted. In case we've gotten here as a result
        // of that (either our calling `about()` in the timeout handler
        // or the user calling it directly even though they shouldn't),
        // be careful about accessing it.
        var status;
        try {
          status = xhr.status;
        } catch (err) {}
        var err = status === 0 ? new Error('Internal XHR Error') : null;
        return done(err);
      }
    };

    // IE sometimes fails if you don't specify every handler.
    // See http://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment
    xhr.ontimeout = function() { /* noop */ };
    xhr.onprogress = function() { /* noop */ };

    xhr.open(req.method, req.url);

    if (req.timeout) {
      // If we use the normal XHR timeout mechanism (`xhr.timeout` and
      // `xhr.ontimeout`), `onreadystatechange` will be triggered before
      // `ontimeout`. There's no way to recognize that it was triggered by
      // a timeout, and we'd be unable to dispatch the right error.
      timeoutId = setTimeout(function() {
        req.timedOut = true;
        done();
        try {
          xhr.abort();
        } catch (err) {}
      }, req.timeout);
    }

    for (k in req.headers) {
      if (req.headers.hasOwnProperty(k)) {
        xhr.setRequestHeader(k, req.headers[k]);
      }
    }

    xhr.send(req.body);

    return req;
  }

  var method,
    methods = ['get', 'post', 'put', 'head', 'patch', 'delete'],
    verb = function(method) {
      return function(req, cb) {
        req = new Request(req);
        req.method = method;
        return http(req, cb);
      };
    };
  for (i = 0; i < methods.length; i++) {
    method = methods[i];
    http[method] = verb(method);
  }

  http.plugins = function() {
    return plugins;
  };

  http.defaults = function(newValues) {
    if (newValues) {
      return factory(extend(defaults, newValues), plugins);
    }
    return defaults;
  };

  http.use = function() {
    var newPlugins = Array.prototype.slice.call(arguments, 0);
    return factory(defaults, plugins.concat(newPlugins));
  };

  http.bare = function() {
    return factory();
  };

  http.Request = Request;
  http.Response = Response;
  http.RequestError = RequestError;

  return http;
}

module.exports = factory({}, [cleanURL]);

/**
 * Analyze the request to see if it represents an error. If so, return it! An
 * original error object can be passed as a hint.
 */
function getError(req, err) {
  if (req.aborted) return createError('Request aborted', req, {name: 'Abort'});

  if (req.timedOut) return createError('Request timeout', req, {name: 'Timeout'});

  var xhr = req.xhr;
  var type = Math.floor(xhr.status / 100);

  var kind;
  switch (type) {
    case 0:
    case 2:
      // These don't represent errors unless the function was passed an
      // error object explicitly.
      if (!err) return;
      return createError(err.message, req);
    case 4:
      // Sometimes 4XX statuses aren't errors.
      if (xhr.status === 404 && !req.errorOn404) return;
      kind = 'Client';
      break;
    case 5:
      kind = 'Server';
      break;
    default:
      kind = 'HTTP';
  }
  var msg = kind + ' Error: ' +
        'The server returned a status of ' + xhr.status +
        ' for the request "' +
        req.method.toUpperCase() + ' ' + req.url + '"';
  return createError(msg, req);
}

},{"../plugins/cleanurl":10,"./error":1,"./request":3,"./response":4,"./utils/delay":5,"./utils/once":7,"./xhr":8,"xtend":9}],3:[function(require,module,exports){
'use strict';

function Request(optsOrUrl) {
  var opts = typeof optsOrUrl === 'string' ? {url: optsOrUrl} : optsOrUrl || {};
  this.method = opts.method ? opts.method.toUpperCase() : 'GET';
  this.url = opts.url;
  this.headers = opts.headers || {};
  this.body = opts.body;
  this.timeout = opts.timeout || 0;
  this.errorOn404 = opts.errorOn404 != null ? opts.errorOn404 : true;
  this.onload = opts.onload;
  this.onerror = opts.onerror;
}

Request.prototype.abort = function() {
  if (this.aborted) return;
  this.aborted = true;
  this.xhr.abort();
  return this;
};

Request.prototype.header = function(name, value) {
  var k;
  for (k in this.headers) {
    if (this.headers.hasOwnProperty(k)) {
      if (name.toLowerCase() === k.toLowerCase()) {
        if (arguments.length === 1) {
          return this.headers[k];
        }

        delete this.headers[k];
        break;
      }
    }
  }
  if (value != null) {
    this.headers[name] = value;
    return value;
  }
};


module.exports = Request;

},{}],4:[function(require,module,exports){
'use strict';

var Request = require('./request');
var extractResponseProps = require('./utils/extractResponseProps');

function Response(props) {
  this.request = props.request;
  this.xhr = props.xhr;
  this.headers = props.headers || {};
  this.status = props.status || 0;
  this.text = props.text;
  this.body = props.body;
  this.contentType = props.contentType;
  this.isHttpError = props.status >= 400;
}

Response.prototype.header = Request.prototype.header;

Response.fromRequest = function(req) {
  return new Response(extractResponseProps(req));
};


module.exports = Response;

},{"./request":3,"./utils/extractResponseProps":6}],5:[function(require,module,exports){
'use strict';

// Wrap a function in a `setTimeout` call. This is used to guarantee async
// behavior, which can avoid unexpected errors.

module.exports = function(fn) {
  return function() {
    var
      args = Array.prototype.slice.call(arguments, 0),
      newFunc = function() {
        return fn.apply(null, args);
      };
    setTimeout(newFunc, 0);
  };
};

},{}],6:[function(require,module,exports){
'use strict';

var extend = require('xtend');

module.exports = function(req) {
  var xhr = req.xhr;
  var props = {request: req, xhr: xhr};

  // Try to create the response from the request. If the request was aborted,
  // accesssing properties of the XHR may throw an error, so we wrap in a
  // try/catch.
  try {
    var lines, i, m, headers = {};
    if (xhr.getAllResponseHeaders) {
      lines = xhr.getAllResponseHeaders().split('\n');
      for (i = 0; i < lines.length; i++) {
        if ((m = lines[i].match(/\s*([^\s]+):\s+([^\s]+)/))) {
          headers[m[1]] = m[2];
        }
      }
    }

    props = extend(props, {
      status: xhr.status,
      contentType: xhr.contentType || (xhr.getResponseHeader && xhr.getResponseHeader('Content-Type')),
      headers: headers,
      text: xhr.responseText,
      body: xhr.response || xhr.responseText
    });
  } catch (err) {}

  return props;
};

},{"xtend":9}],7:[function(require,module,exports){
'use strict';

// A "once" utility.
module.exports = function(fn) {
  var result, called = false;
  return function() {
    if (!called) {
      called = true;
      result = fn.apply(this, arguments);
    }
    return result;
  };
};

},{}],8:[function(require,module,exports){
module.exports = window.XMLHttpRequest;

},{}],9:[function(require,module,exports){
module.exports = extend

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (source.hasOwnProperty(key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}],10:[function(require,module,exports){
'use strict';

module.exports = {
  processRequest: function(req) {
    req.url = req.url.replace(/[^%]+/g, function(s) {
      return encodeURI(s);
    });
  }
};

},{}],11:[function(require,module,exports){
'use strict';
/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

},{}],12:[function(require,module,exports){
'use strict';
var strictUriEncode = require('strict-uri-encode');
var objectAssign = require('object-assign');

function encode(value, opts) {
	if (opts.encode) {
		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

exports.extract = function (str) {
	return str.split('?')[1] || '';
};

exports.parse = function (str) {
	// Create an object with no prototype
	// https://github.com/sindresorhus/query-string/issues/47
	var ret = Object.create(null);

	if (typeof str !== 'string') {
		return ret;
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return ret;
	}

	str.split('&').forEach(function (param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		key = decodeURIComponent(key);

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeURIComponent(val);

		if (ret[key] === undefined) {
			ret[key] = val;
		} else if (Array.isArray(ret[key])) {
			ret[key].push(val);
		} else {
			ret[key] = [ret[key], val];
		}
	});

	return ret;
};

exports.stringify = function (obj, opts) {
	var defaults = {
		encode: true,
		strict: true
	};

	opts = objectAssign(defaults, opts);

	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return encode(key, opts);
		}

		if (Array.isArray(val)) {
			var result = [];

			val.slice().forEach(function (val2) {
				if (val2 === undefined) {
					return;
				}

				if (val2 === null) {
					result.push(encode(key, opts));
				} else {
					result.push(encode(key, opts) + '=' + encode(val2, opts));
				}
			});

			return result.join('&');
		}

		return encode(key, opts) + '=' + encode(val, opts);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

},{"object-assign":11,"strict-uri-encode":138}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exec;

var _httpplease = require('httpplease');

var _httpplease2 = _interopRequireDefault(_httpplease);

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function exec(ns, json, callback) {

  var query = _queryString2.default.stringify(json);
  var baseUrl = 'https://slack.com/api/';
  var url = '' + baseUrl + ns + '?' + query;
  var rateLimit = 'You are sending too many requests. Please relax.';

  _httpplease2.default.get(url, function (err, res) {
    if (err) {
      // if request failed bubble the error
      callback(err);
    } else if (res.body.error) {
      // if Slack returns an error bubble the error
      callback(Error(res.body.error));
    } else if (typeof res.body === 'string' && res.body.includes(rateLimit)) {
      // sometimes you need to chill out
      callback(Error('rate_limit'));
    } else {
      // success! clean up the response
      var _json = JSON.parse(res.body);
      if (_json.ok) {
        delete _json.ok;
        callback(null, _json);
      } else {
        callback(Error(_json.error));
      }
    }
  });
  /// eom
}
module.exports = exports['default'];
},{"httpplease":2,"query-string":12}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = validate;

var _api = require('./api.json');

var _api2 = _interopRequireDefault(_api);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(method, params) {
  // get all the requried params for this method
  var required = _api2.default[method].filter(function (param) {
    return param.required === 'Required';
  });
  // collect any missing params
  var missing = required.filter(function (param) {
    return typeof params[param.name] === 'undefined';
  });
  // optimisitcally assume the best
  var err = false;
  // but have a plan for the worst
  if (missing.length) {
    var bullets = missing.map(function (param) {
      return '- ' + param.name + ' ... ' + param.description;
    });
    var msg = method + ' missing params:\n' + bullets.join('\n');
    err = Error(msg);
  }
  return err;
} //
// validate returns an error object if any required params are missing
//
// example usage:
//
//   // token and id are required params
//   function apiCall(params, callback) {
//     let err = validate('api.signature', params)
//     if (err) {
//       callback(err)
//     }
//     else {
//       // do api call
//     }
//   }
//

module.exports = exports['default'];
},{"./api.json":16}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = client;

// generated by ./scripts/generate-stateful-client
function client(token) {
  var applied = {};
  applied.auth = {};
  applied.bots = {};
  applied.channels = {};
  applied.chat = {};
  applied.dnd = {};
  applied.emoji = {};
  applied.files.comments = {};
  applied.files = {};
  applied.groups = {};
  applied.im = {};
  applied.mpim = {};
  applied.pins = {};
  applied.reactions = {};
  applied.reminders = {};
  applied.rtm = {};
  applied.search = {};
  applied.stars = {};
  applied.team = {};
  applied.team.profile = {};
  applied.usergroups = {};
  applied.usergroups.users = {};
  applied.users = {};
  applied.users.profile = {};
  applied.auth.test = function (params, callback) {
    params.token = token;
    require('./auth.test').call({}, params, callback);
  };
  applied.bots.info = function (params, callback) {
    params.token = token;
    require('./bots.info').call({}, params, callback);
  };
  applied.channels.archive = function (params, callback) {
    params.token = token;
    require('./channels.archive').call({}, params, callback);
  };
  applied.channels.create = function (params, callback) {
    params.token = token;
    require('./channels.create').call({}, params, callback);
  };
  applied.channels.history = function (params, callback) {
    params.token = token;
    require('./channels.history').call({}, params, callback);
  };
  applied.channels.info = function (params, callback) {
    params.token = token;
    require('./channels.info').call({}, params, callback);
  };
  applied.channels.invite = function (params, callback) {
    params.token = token;
    require('./channels.invite').call({}, params, callback);
  };
  applied.channels.join = function (params, callback) {
    params.token = token;
    require('./channels.join').call({}, params, callback);
  };
  applied.channels.kick = function (params, callback) {
    params.token = token;
    require('./channels.kick').call({}, params, callback);
  };
  applied.channels.leave = function (params, callback) {
    params.token = token;
    require('./channels.leave').call({}, params, callback);
  };
  applied.channels.list = function (params, callback) {
    params.token = token;
    require('./channels.list').call({}, params, callback);
  };
  applied.channels.mark = function (params, callback) {
    params.token = token;
    require('./channels.mark').call({}, params, callback);
  };
  applied.channels.rename = function (params, callback) {
    params.token = token;
    require('./channels.rename').call({}, params, callback);
  };
  applied.channels.setPurpose = function (params, callback) {
    params.token = token;
    require('./channels.setPurpose').call({}, params, callback);
  };
  applied.channels.setTopic = function (params, callback) {
    params.token = token;
    require('./channels.setTopic').call({}, params, callback);
  };
  applied.channels.unarchive = function (params, callback) {
    params.token = token;
    require('./channels.unarchive').call({}, params, callback);
  };
  applied.chat.delete = function (params, callback) {
    params.token = token;
    require('./chat.delete').call({}, params, callback);
  };
  applied.chat.meMessage = function (params, callback) {
    params.token = token;
    require('./chat.meMessage').call({}, params, callback);
  };
  applied.chat.postMessage = function (params, callback) {
    params.token = token;
    require('./chat.postMessage').call({}, params, callback);
  };
  applied.chat.update = function (params, callback) {
    params.token = token;
    require('./chat.update').call({}, params, callback);
  };
  applied.dnd.endDnd = function (params, callback) {
    params.token = token;
    require('./dnd.endDnd').call({}, params, callback);
  };
  applied.dnd.endSnooze = function (params, callback) {
    params.token = token;
    require('./dnd.endSnooze').call({}, params, callback);
  };
  applied.dnd.info = function (params, callback) {
    params.token = token;
    require('./dnd.info').call({}, params, callback);
  };
  applied.dnd.setSnooze = function (params, callback) {
    params.token = token;
    require('./dnd.setSnooze').call({}, params, callback);
  };
  applied.dnd.teamInfo = function (params, callback) {
    params.token = token;
    require('./dnd.teamInfo').call({}, params, callback);
  };
  applied.emoji.list = function (params, callback) {
    params.token = token;
    require('./emoji.list').call({}, params, callback);
  };
  applied.files.comments.add = function (params, callback) {
    params.token = token;
    require('./files.comments.add').call({}, params, callback);
  };
  applied.files.comments.delete = function (params, callback) {
    params.token = token;
    require('./files.comments.delete').call({}, params, callback);
  };
  applied.files.comments.edit = function (params, callback) {
    params.token = token;
    require('./files.comments.edit').call({}, params, callback);
  };
  applied.files.delete = function (params, callback) {
    params.token = token;
    require('./files.delete').call({}, params, callback);
  };
  applied.files.info = function (params, callback) {
    params.token = token;
    require('./files.info').call({}, params, callback);
  };
  applied.files.list = function (params, callback) {
    params.token = token;
    require('./files.list').call({}, params, callback);
  };
  applied.files.revokePublicURL = function (params, callback) {
    params.token = token;
    require('./files.revokePublicURL').call({}, params, callback);
  };
  applied.files.sharedPublicURL = function (params, callback) {
    params.token = token;
    require('./files.sharedPublicURL').call({}, params, callback);
  };
  applied.files.upload = function (params, callback) {
    params.token = token;
    require('./files.upload').call({}, params, callback);
  };
  applied.groups.archive = function (params, callback) {
    params.token = token;
    require('./groups.archive').call({}, params, callback);
  };
  applied.groups.close = function (params, callback) {
    params.token = token;
    require('./groups.close').call({}, params, callback);
  };
  applied.groups.create = function (params, callback) {
    params.token = token;
    require('./groups.create').call({}, params, callback);
  };
  applied.groups.createChild = function (params, callback) {
    params.token = token;
    require('./groups.createChild').call({}, params, callback);
  };
  applied.groups.history = function (params, callback) {
    params.token = token;
    require('./groups.history').call({}, params, callback);
  };
  applied.groups.info = function (params, callback) {
    params.token = token;
    require('./groups.info').call({}, params, callback);
  };
  applied.groups.invite = function (params, callback) {
    params.token = token;
    require('./groups.invite').call({}, params, callback);
  };
  applied.groups.kick = function (params, callback) {
    params.token = token;
    require('./groups.kick').call({}, params, callback);
  };
  applied.groups.leave = function (params, callback) {
    params.token = token;
    require('./groups.leave').call({}, params, callback);
  };
  applied.groups.list = function (params, callback) {
    params.token = token;
    require('./groups.list').call({}, params, callback);
  };
  applied.groups.mark = function (params, callback) {
    params.token = token;
    require('./groups.mark').call({}, params, callback);
  };
  applied.groups.open = function (params, callback) {
    params.token = token;
    require('./groups.open').call({}, params, callback);
  };
  applied.groups.rename = function (params, callback) {
    params.token = token;
    require('./groups.rename').call({}, params, callback);
  };
  applied.groups.setPurpose = function (params, callback) {
    params.token = token;
    require('./groups.setPurpose').call({}, params, callback);
  };
  applied.groups.setTopic = function (params, callback) {
    params.token = token;
    require('./groups.setTopic').call({}, params, callback);
  };
  applied.groups.unarchive = function (params, callback) {
    params.token = token;
    require('./groups.unarchive').call({}, params, callback);
  };
  applied.im.close = function (params, callback) {
    params.token = token;
    require('./im.close').call({}, params, callback);
  };
  applied.im.history = function (params, callback) {
    params.token = token;
    require('./im.history').call({}, params, callback);
  };
  applied.im.list = function (params, callback) {
    params.token = token;
    require('./im.list').call({}, params, callback);
  };
  applied.im.mark = function (params, callback) {
    params.token = token;
    require('./im.mark').call({}, params, callback);
  };
  applied.im.open = function (params, callback) {
    params.token = token;
    require('./im.open').call({}, params, callback);
  };
  applied.mpim.close = function (params, callback) {
    params.token = token;
    require('./mpim.close').call({}, params, callback);
  };
  applied.mpim.history = function (params, callback) {
    params.token = token;
    require('./mpim.history').call({}, params, callback);
  };
  applied.mpim.list = function (params, callback) {
    params.token = token;
    require('./mpim.list').call({}, params, callback);
  };
  applied.mpim.mark = function (params, callback) {
    params.token = token;
    require('./mpim.mark').call({}, params, callback);
  };
  applied.mpim.open = function (params, callback) {
    params.token = token;
    require('./mpim.open').call({}, params, callback);
  };
  applied.pins.add = function (params, callback) {
    params.token = token;
    require('./pins.add').call({}, params, callback);
  };
  applied.pins.list = function (params, callback) {
    params.token = token;
    require('./pins.list').call({}, params, callback);
  };
  applied.pins.remove = function (params, callback) {
    params.token = token;
    require('./pins.remove').call({}, params, callback);
  };
  applied.reactions.add = function (params, callback) {
    params.token = token;
    require('./reactions.add').call({}, params, callback);
  };
  applied.reactions.get = function (params, callback) {
    params.token = token;
    require('./reactions.get').call({}, params, callback);
  };
  applied.reactions.list = function (params, callback) {
    params.token = token;
    require('./reactions.list').call({}, params, callback);
  };
  applied.reactions.remove = function (params, callback) {
    params.token = token;
    require('./reactions.remove').call({}, params, callback);
  };
  applied.reminders.add = function (params, callback) {
    params.token = token;
    require('./reminders.add').call({}, params, callback);
  };
  applied.reminders.complete = function (params, callback) {
    params.token = token;
    require('./reminders.complete').call({}, params, callback);
  };
  applied.reminders.delete = function (params, callback) {
    params.token = token;
    require('./reminders.delete').call({}, params, callback);
  };
  applied.reminders.info = function (params, callback) {
    params.token = token;
    require('./reminders.info').call({}, params, callback);
  };
  applied.reminders.list = function (params, callback) {
    params.token = token;
    require('./reminders.list').call({}, params, callback);
  };
  applied.rtm.start = function (params, callback) {
    params.token = token;
    require('./rtm.start').call({}, params, callback);
  };
  applied.search.all = function (params, callback) {
    params.token = token;
    require('./search.all').call({}, params, callback);
  };
  applied.search.files = function (params, callback) {
    params.token = token;
    require('./search.files').call({}, params, callback);
  };
  applied.search.messages = function (params, callback) {
    params.token = token;
    require('./search.messages').call({}, params, callback);
  };
  applied.stars.add = function (params, callback) {
    params.token = token;
    require('./stars.add').call({}, params, callback);
  };
  applied.stars.list = function (params, callback) {
    params.token = token;
    require('./stars.list').call({}, params, callback);
  };
  applied.stars.remove = function (params, callback) {
    params.token = token;
    require('./stars.remove').call({}, params, callback);
  };
  applied.team.accessLogs = function (params, callback) {
    params.token = token;
    require('./team.accessLogs').call({}, params, callback);
  };
  applied.team.billableInfo = function (params, callback) {
    params.token = token;
    require('./team.billableInfo').call({}, params, callback);
  };
  applied.team.info = function (params, callback) {
    params.token = token;
    require('./team.info').call({}, params, callback);
  };
  applied.team.integrationLogs = function (params, callback) {
    params.token = token;
    require('./team.integrationLogs').call({}, params, callback);
  };
  applied.team.profile.get = function (params, callback) {
    params.token = token;
    require('./team.profile.get').call({}, params, callback);
  };
  applied.usergroups.create = function (params, callback) {
    params.token = token;
    require('./usergroups.create').call({}, params, callback);
  };
  applied.usergroups.disable = function (params, callback) {
    params.token = token;
    require('./usergroups.disable').call({}, params, callback);
  };
  applied.usergroups.enable = function (params, callback) {
    params.token = token;
    require('./usergroups.enable').call({}, params, callback);
  };
  applied.usergroups.list = function (params, callback) {
    params.token = token;
    require('./usergroups.list').call({}, params, callback);
  };
  applied.usergroups.update = function (params, callback) {
    params.token = token;
    require('./usergroups.update').call({}, params, callback);
  };
  applied.usergroups.users.list = function (params, callback) {
    params.token = token;
    require('./usergroups.users.list').call({}, params, callback);
  };
  applied.usergroups.users.update = function (params, callback) {
    params.token = token;
    require('./usergroups.users.update').call({}, params, callback);
  };
  applied.users.getPresence = function (params, callback) {
    params.token = token;
    require('./users.getPresence').call({}, params, callback);
  };
  applied.users.identity = function (params, callback) {
    params.token = token;
    require('./users.identity').call({}, params, callback);
  };
  applied.users.info = function (params, callback) {
    params.token = token;
    require('./users.info').call({}, params, callback);
  };
  applied.users.list = function (params, callback) {
    params.token = token;
    require('./users.list').call({}, params, callback);
  };
  applied.users.profile.get = function (params, callback) {
    params.token = token;
    require('./users.profile.get').call({}, params, callback);
  };
  applied.users.profile.set = function (params, callback) {
    params.token = token;
    require('./users.profile.set').call({}, params, callback);
  };
  applied.users.setActive = function (params, callback) {
    params.token = token;
    require('./users.setActive').call({}, params, callback);
  };
  applied.users.setPresence = function (params, callback) {
    params.token = token;
    require('./users.setPresence').call({}, params, callback);
  };

  return applied;
}
module.exports = exports['default'];
},{"./auth.test":18,"./bots.info":19,"./channels.archive":21,"./channels.create":22,"./channels.history":23,"./channels.info":24,"./channels.invite":25,"./channels.join":26,"./channels.kick":28,"./channels.leave":29,"./channels.list":30,"./channels.mark":31,"./channels.rename":32,"./channels.setPurpose":33,"./channels.setTopic":34,"./channels.unarchive":35,"./chat.delete":36,"./chat.meMessage":38,"./chat.postMessage":39,"./chat.update":40,"./dnd.endDnd":41,"./dnd.endSnooze":42,"./dnd.info":43,"./dnd.setSnooze":45,"./dnd.teamInfo":46,"./emoji.list":47,"./files.comments.add":48,"./files.comments.delete":49,"./files.comments.edit":50,"./files.delete":51,"./files.info":52,"./files.list":54,"./files.revokePublicURL":55,"./files.sharedPublicURL":56,"./files.upload":57,"./groups.archive":58,"./groups.close":59,"./groups.create":60,"./groups.createChild":61,"./groups.history":62,"./groups.info":63,"./groups.invite":64,"./groups.kick":66,"./groups.leave":67,"./groups.list":68,"./groups.mark":69,"./groups.open":70,"./groups.rename":71,"./groups.setPurpose":72,"./groups.setTopic":73,"./groups.unarchive":74,"./im.close":75,"./im.history":76,"./im.list":78,"./im.mark":79,"./im.open":80,"./mpim.close":82,"./mpim.history":83,"./mpim.list":85,"./mpim.mark":86,"./mpim.open":87,"./pins.add":89,"./pins.list":91,"./pins.remove":92,"./reactions.add":93,"./reactions.get":94,"./reactions.list":96,"./reactions.remove":97,"./reminders.add":98,"./reminders.complete":99,"./reminders.delete":100,"./reminders.info":101,"./reminders.list":103,"./rtm.start":106,"./search.all":107,"./search.files":108,"./search.messages":110,"./stars.add":111,"./stars.list":113,"./stars.remove":114,"./team.accessLogs":115,"./team.billableInfo":116,"./team.info":117,"./team.integrationLogs":118,"./team.profile.get":120,"./usergroups.create":121,"./usergroups.disable":122,"./usergroups.enable":123,"./usergroups.list":125,"./usergroups.update":126,"./usergroups.users.list":127,"./usergroups.users.update":128,"./users.getPresence":129,"./users.identity":130,"./users.info":131,"./users.list":133,"./users.profile.get":134,"./users.profile.set":135,"./users.setActive":136,"./users.setPresence":137}],16:[function(require,module,exports){
module.exports={
  "api.test": [
    {
      "name": "error",
      "example": "my_error",
      "required": "Optional",
      "description": "Error response to return\n"
    },
    {
      "name": "foo",
      "example": "bar",
      "required": "Optional",
      "description": "example property to return\n"
    }
  ],
  "auth.revoke": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Optional",
      "description": "Authentication token\n"
    },
    {
      "name": "test",
      "example": "true",
      "required": "Optional",
      "description": "Setting this parameter to 1 triggers a testing mode where the specified token will not actually be revoked.\n"
    }
  ],
  "auth.test": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: identify)\n"
    }
  ],
  "bots.info": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: users:read)\n"
    },
    {
      "name": "bot",
      "example": "B12345678",
      "required": "Optional",
      "description": "Bot user to get info on\n"
    }
  ],
  "channels.archive": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to archive\n"
    }
  ],
  "channels.create": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "name",
      "example": "mychannel",
      "required": "Required",
      "description": "Name of channel to create\n"
    }
  ],
  "channels.history": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:history)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to fetch history for.\n"
    },
    {
      "name": "latest",
      "example": "1234567890.123456",
      "required": "Optional, default=now",
      "description": "End of time range of messages to include in results.\n"
    },
    {
      "name": "oldest",
      "example": "1234567890.123456",
      "required": "Optional, default=0",
      "description": "Start of time range of messages to include in results.\n"
    },
    {
      "name": "inclusive",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Include messages with latest or oldest timestamp in results.\n"
    },
    {
      "name": "count",
      "example": "100",
      "required": "Optional, default=100",
      "description": "Number of messages to return, between 1 and 1000.\n"
    },
    {
      "name": "unreads",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Include unread_count_display in the output?\n"
    }
  ],
  "channels.info": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:read)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to get info on\n"
    }
  ],
  "channels.invite": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to invite user to.\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Required",
      "description": "User to invite to channel.\n"
    }
  ],
  "channels.join": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "name",
      "example": " ",
      "required": "Required",
      "description": "Name of channel to join\n"
    }
  ],
  "channels.kick": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to remove user from.\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Required",
      "description": "User to remove from channel.\n"
    }
  ],
  "channels.leave": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to leave\n"
    }
  ],
  "channels.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:read)\n"
    },
    {
      "name": "exclude_archived",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Don't return archived channels.\n"
    }
  ],
  "channels.mark": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to set reading cursor in.\n"
    },
    {
      "name": "ts",
      "example": "1234567890.123456",
      "required": "Required",
      "description": "Timestamp of the most recently seen message.\n"
    }
  ],
  "channels.rename": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to rename\n"
    },
    {
      "name": "name",
      "example": " ",
      "required": "Required",
      "description": "New name for channel.\n"
    }
  ],
  "channels.setPurpose": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to set the purpose of\n"
    },
    {
      "name": "purpose",
      "example": "My Purpose",
      "required": "Required",
      "description": "The new purpose\n"
    }
  ],
  "channels.setTopic": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to set the topic of\n"
    },
    {
      "name": "topic",
      "example": "My Topic",
      "required": "Required",
      "description": "The new topic\n"
    }
  ],
  "channels.unarchive": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: channels:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to unarchive\n"
    }
  ],
  "chat.delete": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: chat:write:bot or chat:write:user)\n"
    },
    {
      "name": "ts",
      "example": "1405894322.002768",
      "required": "Required",
      "description": "Timestamp of the message to be deleted.\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel containing the message to be deleted.\n"
    },
    {
      "name": "as_user",
      "example": "true",
      "required": "Optional",
      "description": "Pass true to delete the message as the authed user. Bot users in this context are considered authed users.\n"
    }
  ],
  "chat.meMessage": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: chat:write:user)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.\n"
    },
    {
      "name": "text",
      "example": "Hello world",
      "required": "Required",
      "description": "Text of the message to send.\n"
    }
  ],
  "chat.postMessage": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: chat:write:bot or chat:write:user)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See below for more details.\n"
    },
    {
      "name": "text",
      "example": "Hello world",
      "required": "Required",
      "description": "Text of the message to send. See below for an explanation of formatting. This field is usually required, unless you're providing only attachments instead.\n"
    },
    {
      "name": "parse",
      "example": "full",
      "required": "Optional",
      "description": "Change how messages are treated. Defaults to none. See below.\n"
    },
    {
      "name": "link_names",
      "example": "1",
      "required": "Optional",
      "description": "Find and link channel names and usernames.\n"
    },
    {
      "name": "attachments",
      "example": "[{\"pretext\": \"pre-hello\", \"text\": \"text-world\"}]",
      "required": "Optional",
      "description": "Structured message attachments.\n"
    },
    {
      "name": "unfurl_links",
      "example": "true",
      "required": "Optional",
      "description": "Pass true to enable unfurling of primarily text-based content.\n"
    },
    {
      "name": "unfurl_media",
      "example": "false",
      "required": "Optional",
      "description": "Pass false to disable unfurling of media content.\n"
    },
    {
      "name": "username",
      "example": "My Bot",
      "required": "Optional",
      "description": "Set your bot's user name. Must be used in conjunction with as_user set to false, otherwise ignored. See authorship below.\n"
    },
    {
      "name": "as_user",
      "example": "true",
      "required": "Optional",
      "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See authorship below.\n"
    },
    {
      "name": "icon_url",
      "example": "http://lorempixel.com/48/48",
      "required": "Optional",
      "description": "URL to an image to use as the icon for this message. Must be used in conjunction with as_user set to false, otherwise ignored. See authorship below.\n"
    },
    {
      "name": "icon_emoji",
      "example": ":chart_with_upwards_trend:",
      "required": "Optional",
      "description": "emoji to use as the icon for this message. Overrides icon_url. Must be used in conjunction with as_user set to false, otherwise ignored. See authorship below.\n"
    }
  ],
  "chat.update": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: chat:write:bot or chat:write:user)\n"
    },
    {
      "name": "ts",
      "example": "1405894322.002768",
      "required": "Required",
      "description": "Timestamp of the message to be updated.\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel containing the message to be updated.\n"
    },
    {
      "name": "text",
      "example": "Hello world",
      "required": "Required",
      "description": "New text for the message, using the default formatting rules.\n"
    },
    {
      "name": "attachments",
      "example": "[{\"pretext\": \"pre-hello\", \"text\": \"text-world\"}]",
      "required": "Optional",
      "description": "Structured message attachments.\n"
    },
    {
      "name": "parse",
      "example": "none",
      "required": "Optional",
      "description": "Change how messages are treated. Defaults to client, unlike chat.postMessage. See below.\n"
    },
    {
      "name": "link_names",
      "example": "1",
      "required": "Optional",
      "description": "Find and link channel names and usernames. Defaults to none. This parameter should be used in conjunction with parse. To set link_names to 1, specify a parse mode of full.\n"
    },
    {
      "name": "as_user",
      "example": "true",
      "required": "Optional",
      "description": "Pass true to update the message as the authed user. Bot users in this context are considered authed users.\n"
    }
  ],
  "dnd.endDnd": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: dnd:write)\n"
    }
  ],
  "dnd.endSnooze": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: dnd:write)\n"
    }
  ],
  "dnd.info": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: dnd:read)\n"
    },
    {
      "name": "user",
      "example": "U1234",
      "required": "Optional",
      "description": "User to fetch status for (defaults to current user)\n"
    }
  ],
  "dnd.setSnooze": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: dnd:write)\n"
    },
    {
      "name": "num_minutes",
      "example": "60",
      "required": "Required",
      "description": "Number of minutes, from now, to snooze until.\n"
    }
  ],
  "dnd.teamInfo": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: dnd:read)\n"
    },
    {
      "name": "users",
      "example": "U1234,U4567",
      "required": "Optional",
      "description": "Comma-separated list of users to fetch Do Not Disturb status for\n"
    }
  ],
  "emoji.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: emoji:read)\n"
    }
  ],
  "files.comments.add": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: files:write:user)\n"
    },
    {
      "name": "file",
      "example": "F1234467890",
      "required": "Required",
      "description": "File to add a comment to.\n"
    },
    {
      "name": "comment",
      "example": "Everyone should take a moment to read this file.",
      "required": "Required",
      "description": "Text of the comment to add.\n"
    },
    {
      "name": "channel",
      "example": "C1234467890",
      "required": "Optional",
      "description": "Channel id (encoded) of which location to associate with the new comment.\n"
    }
  ],
  "files.comments.delete": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: files:write:user)\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Required",
      "description": "File to delete a comment from.\n"
    },
    {
      "name": "id",
      "example": "Fc1234567890",
      "required": "Required",
      "description": "The comment to delete.\n"
    }
  ],
  "files.comments.edit": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: files:write:user)\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Required",
      "description": "File containing the comment to edit.\n"
    },
    {
      "name": "id",
      "example": "Fc1234567890",
      "required": "Required",
      "description": "The comment to edit.\n"
    },
    {
      "name": "comment",
      "example": "Everyone should take a moment to read this file, seriously.",
      "required": "Required",
      "description": "Text of the comment to edit.\n"
    }
  ],
  "files.delete": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: files:write:user)\n"
    },
    {
      "name": "file",
      "example": " ",
      "required": "Required",
      "description": "ID of file to delete.\n"
    }
  ],
  "files.info": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: files:read)\n"
    },
    {
      "name": "file",
      "example": "F2147483862",
      "required": "Required",
      "description": "Specify a file by providing its ID.\n"
    },
    {
      "name": "count",
      "example": "20",
      "required": "Optional, default=100",
      "description": "Number of items to return per page.\n"
    },
    {
      "name": "page",
      "example": "2",
      "required": "Optional, default=1",
      "description": "Page number of results to return.\n"
    }
  ],
  "files.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: files:read)\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Optional",
      "description": "Filter files created by a single user.\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Optional",
      "description": "Filter files appearing in a specific channel, indicated by its ID.\n"
    },
    {
      "name": "ts_from",
      "example": "123456789",
      "required": "Optional, default=0",
      "description": "Filter files created after this timestamp (inclusive).\n"
    },
    {
      "name": "ts_to",
      "example": "123456789",
      "required": "Optional, default=now",
      "description": "Filter files created before this timestamp (inclusive).\n"
    },
    {
      "name": "types",
      "example": "images",
      "required": "Optional, default=all",
      "description": "Filter files by type:\n\n\nall - All files\nspaces - Posts\nsnippets - Snippets\nimages - Image files\ngdocs - Google docs\nzips - Zip files\npdfs - PDF files\n\n\nYou can pass multiple values in the types argument, like types=spaces,snippets.The default value is all, which does not filter the list.\n"
    },
    {
      "name": "count",
      "example": "20",
      "required": "Optional, default=100",
      "description": "Number of items to return per page.\n"
    },
    {
      "name": "page",
      "example": "2",
      "required": "Optional, default=1",
      "description": "Page number of results to return.\n"
    }
  ],
  "files.revokePublicURL": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: files:write:user)\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Required",
      "description": "File to revoke\n"
    }
  ],
  "files.sharedPublicURL": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: files:write:user)\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Required",
      "description": "File to share\n"
    }
  ],
  "files.upload": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: files:write:user)\n"
    },
    {
      "name": "file",
      "example": "...",
      "required": "Optional",
      "description": "File contents via multipart/form-data. If omitting this parameter, you must submit content.\n"
    },
    {
      "name": "content",
      "example": "...",
      "required": "Optional",
      "description": "File contents via a POST variable. If omitting this parameter, you must provide a file.\n"
    },
    {
      "name": "filetype",
      "example": "php",
      "required": "Optional",
      "description": "A file type identifier.\n"
    },
    {
      "name": "filename",
      "example": "foo.txt",
      "required": "Required",
      "description": "Filename of file.\n"
    },
    {
      "name": "title",
      "example": "My File",
      "required": "Optional",
      "description": "Title of file.\n"
    },
    {
      "name": "initial_comment",
      "example": "Best!",
      "required": "Optional",
      "description": "Initial comment to add to file.\n"
    },
    {
      "name": "channels",
      "example": "C1234567890",
      "required": "Optional",
      "description": "Comma-separated list of channel names or IDs where the file will be shared.\n"
    }
  ],
  "groups.archive": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to archive\n"
    }
  ],
  "groups.close": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to close.\n"
    }
  ],
  "groups.create": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "name",
      "example": " ",
      "required": "Required",
      "description": "Name of private channel to create\n"
    }
  ],
  "groups.createChild": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to clone and archive.\n"
    }
  ],
  "groups.history": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:history)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to fetch history for.\n"
    },
    {
      "name": "latest",
      "example": "1234567890.123456",
      "required": "Optional, default=now",
      "description": "End of time range of messages to include in results.\n"
    },
    {
      "name": "oldest",
      "example": "1234567890.123456",
      "required": "Optional, default=0",
      "description": "Start of time range of messages to include in results.\n"
    },
    {
      "name": "inclusive",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Include messages with latest or oldest timestamp in results.\n"
    },
    {
      "name": "count",
      "example": "100",
      "required": "Optional, default=100",
      "description": "Number of messages to return, between 1 and 1000.\n"
    },
    {
      "name": "unreads",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Include unread_count_display in the output?\n"
    }
  ],
  "groups.info": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:read)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Private channel to get info on\n"
    }
  ],
  "groups.invite": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to invite user to.\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Required",
      "description": "User to invite.\n"
    }
  ],
  "groups.kick": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to remove user from.\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Required",
      "description": "User to remove from private channel.\n"
    }
  ],
  "groups.leave": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to leave\n"
    }
  ],
  "groups.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:read)\n"
    },
    {
      "name": "exclude_archived",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Don't return archived private channels.\n"
    }
  ],
  "groups.mark": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to set reading cursor in.\n"
    },
    {
      "name": "ts",
      "example": "1234567890.123456",
      "required": "Required",
      "description": "Timestamp of the most recently seen message.\n"
    }
  ],
  "groups.open": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to open.\n"
    }
  ],
  "groups.rename": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Private channel to rename\n"
    },
    {
      "name": "name",
      "example": " ",
      "required": "Required",
      "description": "New name for private channel.\n"
    }
  ],
  "groups.setPurpose": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Private channel to set the purpose of\n"
    },
    {
      "name": "purpose",
      "example": "My Purpose",
      "required": "Required",
      "description": "The new purpose\n"
    }
  ],
  "groups.setTopic": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Private channel to set the topic of\n"
    },
    {
      "name": "topic",
      "example": "My Topic",
      "required": "Required",
      "description": "The new topic\n"
    }
  ],
  "groups.unarchive": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: groups:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Private channel to unarchive\n"
    }
  ],
  "im.close": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: im:write)\n"
    },
    {
      "name": "channel",
      "example": "D1234567890",
      "required": "Required",
      "description": "Direct message channel to close.\n"
    }
  ],
  "im.history": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: im:history)\n"
    },
    {
      "name": "channel",
      "example": "D1234567890",
      "required": "Required",
      "description": "Direct message channel to fetch history for.\n"
    },
    {
      "name": "latest",
      "example": "1234567890.123456",
      "required": "Optional, default=now",
      "description": "End of time range of messages to include in results.\n"
    },
    {
      "name": "oldest",
      "example": "1234567890.123456",
      "required": "Optional, default=0",
      "description": "Start of time range of messages to include in results.\n"
    },
    {
      "name": "inclusive",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Include messages with latest or oldest timestamp in results.\n"
    },
    {
      "name": "count",
      "example": "100",
      "required": "Optional, default=100",
      "description": "Number of messages to return, between 1 and 1000.\n"
    },
    {
      "name": "unreads",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Include unread_count_display in the output?\n"
    }
  ],
  "im.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: im:read)\n"
    }
  ],
  "im.mark": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: im:write)\n"
    },
    {
      "name": "channel",
      "example": "D1234567890",
      "required": "Required",
      "description": "Direct message channel to set reading cursor in.\n"
    },
    {
      "name": "ts",
      "example": "1234567890.123456",
      "required": "Required",
      "description": "Timestamp of the most recently seen message.\n"
    }
  ],
  "im.open": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: im:write)\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Required",
      "description": "User to open a direct message channel with.\n"
    },
    {
      "name": "return_im",
      "example": " ",
      "required": "Optional",
      "description": "Boolean, indicates you want the full IM channel definition in the response.\n"
    }
  ],
  "mpim.close": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: mpim:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "MPIM to close.\n"
    }
  ],
  "mpim.history": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: mpim:history)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "Multiparty direct message to fetch history for.\n"
    },
    {
      "name": "latest",
      "example": "1234567890.123456",
      "required": "Optional, default=now",
      "description": "End of time range of messages to include in results.\n"
    },
    {
      "name": "oldest",
      "example": "1234567890.123456",
      "required": "Optional, default=0",
      "description": "Start of time range of messages to include in results.\n"
    },
    {
      "name": "inclusive",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Include messages with latest or oldest timestamp in results.\n"
    },
    {
      "name": "count",
      "example": "100",
      "required": "Optional, default=100",
      "description": "Number of messages to return, between 1 and 1000.\n"
    },
    {
      "name": "unreads",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Include unread_count_display in the output?\n"
    }
  ],
  "mpim.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: mpim:read)\n"
    }
  ],
  "mpim.mark": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: mpim:write)\n"
    },
    {
      "name": "channel",
      "example": "G1234567890",
      "required": "Required",
      "description": "multiparty direct message channel to set reading cursor in.\n"
    },
    {
      "name": "ts",
      "example": "1234567890.123456",
      "required": "Required",
      "description": "Timestamp of the most recently seen message.\n"
    }
  ],
  "mpim.open": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: mpim:write)\n"
    },
    {
      "name": "users",
      "example": "U1234567890,U2345678901,U3456789012",
      "required": "Required",
      "description": "Comma separated lists of users.  The ordering of the users is preserved whenever a MPIM group is returned.\n"
    }
  ],
  "oauth.access": [
    {
      "name": "client_id",
      "example": "4b39e9-752c4",
      "required": "Required",
      "description": "Issued when you created your application.\n"
    },
    {
      "name": "client_secret",
      "example": "33fea0113f5b1",
      "required": "Required",
      "description": "Issued when you created your application.\n"
    },
    {
      "name": "code",
      "example": "ccdaa72ad",
      "required": "Required",
      "description": "The code param returned via the OAuth callback.\n"
    },
    {
      "name": "redirect_uri",
      "example": "http://example.com",
      "required": "Optional",
      "description": "This must match the originally submitted URI (if one was sent).\n"
    }
  ],
  "pins.add": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: pins:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to pin the item in.\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Optional",
      "description": "File to pin.\n"
    },
    {
      "name": "file_comment",
      "example": "Fc1234567890",
      "required": "Optional",
      "description": "File comment to pin.\n"
    },
    {
      "name": "timestamp",
      "example": "1234567890.123456",
      "required": "Optional",
      "description": "Timestamp of the message to pin.\n"
    }
  ],
  "pins.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: pins:read)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel to get pinned items for.\n"
    }
  ],
  "pins.remove": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: pins:write)\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Required",
      "description": "Channel where the item is pinned to.\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Optional",
      "description": "File to un-pin.\n"
    },
    {
      "name": "file_comment",
      "example": "Fc1234567890",
      "required": "Optional",
      "description": "File comment to un-pin.\n"
    },
    {
      "name": "timestamp",
      "example": "1234567890.123456",
      "required": "Optional",
      "description": "Timestamp of the message to un-pin.\n"
    }
  ],
  "reactions.add": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: reactions:write)\n"
    },
    {
      "name": "name",
      "example": "thumbsup",
      "required": "Required",
      "description": "Reaction (emoji) name.\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Optional",
      "description": "File to add reaction to.\n"
    },
    {
      "name": "file_comment",
      "example": "Fc1234567890",
      "required": "Optional",
      "description": "File comment to add reaction to.\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Optional",
      "description": "Channel where the message to add reaction to was posted.\n"
    },
    {
      "name": "timestamp",
      "example": "1234567890.123456",
      "required": "Optional",
      "description": "Timestamp of the message to add reaction to.\n"
    }
  ],
  "reactions.get": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: reactions:read)\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Optional",
      "description": "File to get reactions for.\n"
    },
    {
      "name": "file_comment",
      "example": "Fc1234567890",
      "required": "Optional",
      "description": "File comment to get reactions for.\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Optional",
      "description": "Channel where the message to get reactions for was posted.\n"
    },
    {
      "name": "timestamp",
      "example": "1234567890.123456",
      "required": "Optional",
      "description": "Timestamp of the message to get reactions for.\n"
    },
    {
      "name": "full",
      "example": " ",
      "required": "Optional",
      "description": "If true always return the complete reaction list.\n"
    }
  ],
  "reactions.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: reactions:read)\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Optional",
      "description": "Show reactions made by this user. Defaults to the authed user.\n"
    },
    {
      "name": "full",
      "example": " ",
      "required": "Optional",
      "description": "If true always return the complete reaction list.\n"
    },
    {
      "name": "count",
      "example": "20",
      "required": "Optional, default=100",
      "description": "Number of items to return per page.\n"
    },
    {
      "name": "page",
      "example": "2",
      "required": "Optional, default=1",
      "description": "Page number of results to return.\n"
    }
  ],
  "reactions.remove": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: reactions:write)\n"
    },
    {
      "name": "name",
      "example": "thumbsup",
      "required": "Required",
      "description": "Reaction (emoji) name.\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Optional",
      "description": "File to remove reaction from.\n"
    },
    {
      "name": "file_comment",
      "example": "Fc1234567890",
      "required": "Optional",
      "description": "File comment to remove reaction from.\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Optional",
      "description": "Channel where the message to remove reaction from was posted.\n"
    },
    {
      "name": "timestamp",
      "example": "1234567890.123456",
      "required": "Optional",
      "description": "Timestamp of the message to remove reaction from.\n"
    }
  ],
  "reminders.add": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: reminders:write)\n"
    },
    {
      "name": "text",
      "example": "eat a banana",
      "required": "Required",
      "description": "The content of the reminder\n"
    },
    {
      "name": "time",
      "example": "1602288000",
      "required": "Required",
      "description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")\n"
    },
    {
      "name": "user",
      "example": "U18888888",
      "required": "Optional",
      "description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.\n"
    }
  ],
  "reminders.complete": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: reminders:write)\n"
    },
    {
      "name": "reminder",
      "example": "Rm12345678",
      "required": "Required",
      "description": "The ID of the reminder to be marked as complete\n"
    }
  ],
  "reminders.delete": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: reminders:write)\n"
    },
    {
      "name": "reminder",
      "example": "Rm12345678",
      "required": "Required",
      "description": "The ID of the reminder\n"
    }
  ],
  "reminders.info": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: reminders:read)\n"
    },
    {
      "name": "reminder",
      "example": "Rm23456789",
      "required": "Required",
      "description": "The ID of the reminder\n"
    }
  ],
  "reminders.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: reminders:read)\n"
    }
  ],
  "rtm.start": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: client)\n"
    },
    {
      "name": "simple_latest",
      "example": " ",
      "required": "Optional",
      "description": "Return timestamp only for latest message object of each channel (improves performance).\n"
    },
    {
      "name": "no_unreads",
      "example": " ",
      "required": "Optional",
      "description": "Skip unread counts for each channel (improves performance).\n"
    },
    {
      "name": "mpim_aware",
      "example": " ",
      "required": "Optional",
      "description": "Returns MPIMs to the client in the API response.\n"
    }
  ],
  "search.all": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: search:read)\n"
    },
    {
      "name": "query",
      "example": "pickleface",
      "required": "Required",
      "description": "Search query. May contains booleans, etc.\n"
    },
    {
      "name": "sort",
      "example": "timestamp",
      "required": "Optional, default=score",
      "description": "Return matches sorted by either score or timestamp.\n"
    },
    {
      "name": "sort_dir",
      "example": "asc",
      "required": "Optional, default=desc",
      "description": "Change sort direction to ascending (asc) or descending (desc).\n"
    },
    {
      "name": "highlight",
      "example": "1",
      "required": "Optional",
      "description": "Pass a value of 1 to enable query highlight markers (see below).\n"
    },
    {
      "name": "count",
      "example": "20",
      "required": "Optional, default=20",
      "description": "Number of items to return per page.\n"
    },
    {
      "name": "page",
      "example": "2",
      "required": "Optional, default=1",
      "description": "Page number of results to return.\n"
    }
  ],
  "search.files": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: search:read)\n"
    },
    {
      "name": "query",
      "example": "pickleface",
      "required": "Required",
      "description": "Search query. May contain booleans, etc.\n"
    },
    {
      "name": "sort",
      "example": "timestamp",
      "required": "Optional, default=score",
      "description": "Return matches sorted by either score or timestamp.\n"
    },
    {
      "name": "sort_dir",
      "example": "asc",
      "required": "Optional, default=desc",
      "description": "Change sort direction to ascending (asc) or descending (desc).\n"
    },
    {
      "name": "highlight",
      "example": "1",
      "required": "Optional",
      "description": "Pass a value of 1 to enable query highlight markers (see below).\n"
    },
    {
      "name": "count",
      "example": "20",
      "required": "Optional, default=20",
      "description": "Number of items to return per page.\n"
    },
    {
      "name": "page",
      "example": "2",
      "required": "Optional, default=1",
      "description": "Page number of results to return.\n"
    }
  ],
  "search.messages": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: search:read)\n"
    },
    {
      "name": "query",
      "example": "pickleface",
      "required": "Required",
      "description": "Search query. May contains booleans, etc.\n"
    },
    {
      "name": "sort",
      "example": "timestamp",
      "required": "Optional, default=score",
      "description": "Return matches sorted by either score or timestamp.\n"
    },
    {
      "name": "sort_dir",
      "example": "asc",
      "required": "Optional, default=desc",
      "description": "Change sort direction to ascending (asc) or descending (desc).\n"
    },
    {
      "name": "highlight",
      "example": "1",
      "required": "Optional",
      "description": "Pass a value of 1 to enable query highlight markers (see below).\n"
    },
    {
      "name": "count",
      "example": "20",
      "required": "Optional, default=20",
      "description": "Number of items to return per page.\n"
    },
    {
      "name": "page",
      "example": "2",
      "required": "Optional, default=1",
      "description": "Page number of results to return.\n"
    }
  ],
  "stars.add": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: stars:write)\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Optional",
      "description": "File to add star to.\n"
    },
    {
      "name": "file_comment",
      "example": "Fc1234567890",
      "required": "Optional",
      "description": "File comment to add star to.\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Optional",
      "description": "Channel to add star to, or channel where the message to add star to was posted (used with timestamp).\n"
    },
    {
      "name": "timestamp",
      "example": "1234567890.123456",
      "required": "Optional",
      "description": "Timestamp of the message to add star to.\n"
    }
  ],
  "stars.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: stars:read)\n"
    },
    {
      "name": "count",
      "example": "20",
      "required": "Optional, default=100",
      "description": "Number of items to return per page.\n"
    },
    {
      "name": "page",
      "example": "2",
      "required": "Optional, default=1",
      "description": "Page number of results to return.\n"
    }
  ],
  "stars.remove": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: stars:write)\n"
    },
    {
      "name": "file",
      "example": "F1234567890",
      "required": "Optional",
      "description": "File to remove star from.\n"
    },
    {
      "name": "file_comment",
      "example": "Fc1234567890",
      "required": "Optional",
      "description": "File comment to remove star from.\n"
    },
    {
      "name": "channel",
      "example": "C1234567890",
      "required": "Optional",
      "description": "Channel to remove star from, or channel where the message to remove star from was posted (used with timestamp).\n"
    },
    {
      "name": "timestamp",
      "example": "1234567890.123456",
      "required": "Optional",
      "description": "Timestamp of the message to remove star from.\n"
    }
  ],
  "team.accessLogs": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: admin)\n"
    },
    {
      "name": "count",
      "example": "20",
      "required": "Optional, default=100",
      "description": "Number of items to return per page.\n"
    },
    {
      "name": "page",
      "example": "2",
      "required": "Optional, default=1",
      "description": "Page number of results to return.\n"
    }
  ],
  "team.billableInfo": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: admin)\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Optional",
      "description": "A user to retrieve the billable information for. Defaults to all users.\n"
    }
  ],
  "team.info": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: team:read)\n"
    }
  ],
  "team.integrationLogs": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: admin)\n"
    },
    {
      "name": "service_id",
      "example": " ",
      "required": "Optional",
      "description": "Filter logs to this service. Defaults to all logs.\n"
    },
    {
      "name": "app_id",
      "example": " ",
      "required": "Optional",
      "description": "Filter logs to this Slack app. Defaults to all logs.\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Optional",
      "description": "Filter logs generated by this user’s actions. Defaults to all logs.\n"
    },
    {
      "name": "change_type",
      "example": "added",
      "required": "Optional",
      "description": "Filter logs with this change type. Defaults to all logs.\n"
    },
    {
      "name": "count",
      "example": "20",
      "required": "Optional, default=100",
      "description": "Number of items to return per page.\n"
    },
    {
      "name": "page",
      "example": "2",
      "required": "Optional, default=1",
      "description": "Page number of results to return.\n"
    }
  ],
  "team.profile.get": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: users.profile:read)\n"
    },
    {
      "name": "visibility",
      "example": "all",
      "required": "Optional",
      "description": "Filter by visibility.\n"
    }
  ],
  "usergroups.create": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: usergroups:write)\n"
    },
    {
      "name": "name",
      "example": "My Test Team",
      "required": "Required",
      "description": "A name for the User Group. Must be unique among User Groups.\n"
    },
    {
      "name": "handle",
      "example": " ",
      "required": "Optional",
      "description": "A mention handle. Must be unique among channels, users and User Groups.\n"
    },
    {
      "name": "description",
      "example": " ",
      "required": "Optional",
      "description": "A short description of the User Group.\n"
    },
    {
      "name": "channels",
      "example": " ",
      "required": "Optional",
      "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default.\n"
    },
    {
      "name": "include_count",
      "example": "1",
      "required": "Optional",
      "description": "Include the number of users in each User Group.\n"
    }
  ],
  "usergroups.disable": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: usergroups:write)\n"
    },
    {
      "name": "usergroup",
      "example": "S0604QSJC",
      "required": "Required",
      "description": "The encoded ID of the User Group to disable.\n"
    },
    {
      "name": "include_count",
      "example": "1",
      "required": "Optional",
      "description": "Include the number of users in the User Group.\n"
    }
  ],
  "usergroups.enable": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: usergroups:write)\n"
    },
    {
      "name": "usergroup",
      "example": "S0604QSJC",
      "required": "Required",
      "description": "The encoded ID of the User Group to enable.\n"
    },
    {
      "name": "include_count",
      "example": "1",
      "required": "Optional",
      "description": "Include the number of users in the User Group.\n"
    }
  ],
  "usergroups.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: usergroups:read)\n"
    },
    {
      "name": "include_disabled",
      "example": "1",
      "required": "Optional",
      "description": "Include disabled User Groups.\n"
    },
    {
      "name": "include_count",
      "example": "1",
      "required": "Optional",
      "description": "Include the number of users in each User Group.\n"
    },
    {
      "name": "include_users",
      "example": "1",
      "required": "Optional",
      "description": "Include the list of users for each User Group.\n"
    }
  ],
  "usergroups.update": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: usergroups:write)\n"
    },
    {
      "name": "usergroup",
      "example": "S0604QSJC",
      "required": "Required",
      "description": "The encoded ID of the User Group to update.\n"
    },
    {
      "name": "name",
      "example": "My Test Team",
      "required": "Optional",
      "description": "A name for the User Group. Must be unique among User Groups.\n"
    },
    {
      "name": "handle",
      "example": " ",
      "required": "Optional",
      "description": "A mention handle. Must be unique among channels, users and User Groups.\n"
    },
    {
      "name": "description",
      "example": " ",
      "required": "Optional",
      "description": "A short description of the User Group.\n"
    },
    {
      "name": "channels",
      "example": " ",
      "required": "Optional",
      "description": "A comma separated string of encoded channel IDs for which the User Group uses as a default.\n"
    },
    {
      "name": "include_count",
      "example": "1",
      "required": "Optional",
      "description": "Include the number of users in the User Group.\n"
    }
  ],
  "usergroups.users.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: usergroups:read)\n"
    },
    {
      "name": "usergroup",
      "example": "S0604QSJC",
      "required": "Required",
      "description": "The encoded ID of the User Group to update.\n"
    },
    {
      "name": "include_disabled",
      "example": "1",
      "required": "Optional",
      "description": "Allow results that involve disabled User Groups.\n"
    }
  ],
  "usergroups.users.update": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: usergroups:write)\n"
    },
    {
      "name": "usergroup",
      "example": "S0604QSJC",
      "required": "Required",
      "description": "The encoded ID of the User Group to update.\n"
    },
    {
      "name": "users",
      "example": "U060R4BJ4,U060RNRCZ",
      "required": "Required",
      "description": "A comma separated string of encoded user IDs that represent the entire list of users for the User Group.\n"
    },
    {
      "name": "include_count",
      "example": "1",
      "required": "Optional",
      "description": "Include the number of users in the User Group.\n"
    }
  ],
  "users.getPresence": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: users:read)\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Required",
      "description": "User to get presence info on. Defaults to the authed user.\n"
    }
  ],
  "users.identity": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: identity.basic)\n"
    }
  ],
  "users.info": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: users:read)\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Required",
      "description": "User to get info on\n"
    }
  ],
  "users.list": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: users:read)\n"
    },
    {
      "name": "presence",
      "example": "1",
      "required": "Optional",
      "description": "Whether to include presence data in the output\n"
    }
  ],
  "users.setActive": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: users:write)\n"
    }
  ],
  "users.setPresence": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: users:write)\n"
    },
    {
      "name": "presence",
      "example": "away",
      "required": "Required",
      "description": "Either auto or away\n"
    }
  ],
  "users.profile.get": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: users.profile:read)\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Optional",
      "description": "User to retrieve profile info for\n"
    },
    {
      "name": "include_labels",
      "example": "1",
      "required": "Optional, default=0",
      "description": "Include labels for each ID in custom profile fields\n"
    }
  ],
  "users.profile.set": [
    {
      "name": "token",
      "example": "xxxx-xxxxxxxxx-xxxx",
      "required": "Required",
      "description": "Authentication token (Requires scope: users.profile:write)\n"
    },
    {
      "name": "user",
      "example": "U1234567890",
      "required": "Optional",
      "description": "ID of user to change. This argument may only be specified by team admins.\n"
    },
    {
      "name": "profile",
      "example": "{ first_name: \"John\", ... }",
      "required": "Optional",
      "description": "Collection of key:value pairs presented as a URL-encoded JSON hash.\n"
    },
    {
      "name": "name",
      "example": "first_name",
      "required": "Optional",
      "description": "Name of a single key to set. Usable only if profile is not passed.\n"
    },
    {
      "name": "value",
      "example": "John",
      "required": "Optional",
      "description": "Value to set a single key to. Usable only if profile is not passed.\n"
    }
  ]
}

},{}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = apitest;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function apitest(params, callback) {
  var ns = 'api.test';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],18:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = authtest;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function authtest(params, callback) {
  var ns = 'auth.test';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],19:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = botsinfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function botsinfo(params, callback) {
  var ns = 'bots.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bots = require('./bots.info');

var _bots2 = _interopRequireDefault(_bots);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  info: _bots2.default
};
module.exports = exports['default'];
},{"./bots.info":19}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsarchive;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsarchive(params, callback) {
  var ns = 'channels.archive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelscreate;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelscreate(params, callback) {
  var ns = 'channels.create';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],23:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelshistory;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelshistory(params, callback) {
  var ns = 'channels.history';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],24:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsinfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsinfo(params, callback) {
  var ns = 'channels.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],25:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsinvite;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsinvite(params, callback) {
  var ns = 'channels.invite';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],26:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsjoin;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsjoin(params, callback) {
  var ns = 'channels.join';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],27:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _channels = require('./channels.archive');

var _channels2 = _interopRequireDefault(_channels);

var _channels3 = require('./channels.create');

var _channels4 = _interopRequireDefault(_channels3);

var _channels5 = require('./channels.history');

var _channels6 = _interopRequireDefault(_channels5);

var _channels7 = require('./channels.info');

var _channels8 = _interopRequireDefault(_channels7);

var _channels9 = require('./channels.invite');

var _channels10 = _interopRequireDefault(_channels9);

var _channels11 = require('./channels.join');

var _channels12 = _interopRequireDefault(_channels11);

var _channels13 = require('./channels.kick');

var _channels14 = _interopRequireDefault(_channels13);

var _channels15 = require('./channels.leave');

var _channels16 = _interopRequireDefault(_channels15);

var _channels17 = require('./channels.list');

var _channels18 = _interopRequireDefault(_channels17);

var _channels19 = require('./channels.mark');

var _channels20 = _interopRequireDefault(_channels19);

var _channels21 = require('./channels.rename');

var _channels22 = _interopRequireDefault(_channels21);

var _channels23 = require('./channels.setPurpose');

var _channels24 = _interopRequireDefault(_channels23);

var _channels25 = require('./channels.setTopic');

var _channels26 = _interopRequireDefault(_channels25);

var _channels27 = require('./channels.unarchive');

var _channels28 = _interopRequireDefault(_channels27);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  archive: _channels2.default,
  create: _channels4.default,
  history: _channels6.default,
  info: _channels8.default,
  invite: _channels10.default,
  join: _channels12.default,
  kick: _channels14.default,
  leave: _channels16.default,
  list: _channels18.default,
  mark: _channels20.default,
  rename: _channels22.default,
  setPurpose: _channels24.default,
  setTopic: _channels26.default,
  unarchive: _channels28.default
};
module.exports = exports['default'];
},{"./channels.archive":21,"./channels.create":22,"./channels.history":23,"./channels.info":24,"./channels.invite":25,"./channels.join":26,"./channels.kick":28,"./channels.leave":29,"./channels.list":30,"./channels.mark":31,"./channels.rename":32,"./channels.setPurpose":33,"./channels.setTopic":34,"./channels.unarchive":35}],28:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelskick;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelskick(params, callback) {
  var ns = 'channels.kick';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],29:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsleave;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsleave(params, callback) {
  var ns = 'channels.leave';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],30:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelslist(params, callback) {
  var ns = 'channels.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],31:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsmark;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsmark(params, callback) {
  var ns = 'channels.mark';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],32:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsrename;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsrename(params, callback) {
  var ns = 'channels.rename';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],33:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelssetPurpose;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelssetPurpose(params, callback) {
  var ns = 'channels.setPurpose';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],34:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelssetTopic;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelssetTopic(params, callback) {
  var ns = 'channels.setTopic';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],35:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = channelsunarchive;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function channelsunarchive(params, callback) {
  var ns = 'channels.unarchive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],36:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chatdelete;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function chatdelete(params, callback) {
  var ns = 'chat.delete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],37:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _chat = require('./chat.delete');

var _chat2 = _interopRequireDefault(_chat);

var _chat3 = require('./chat.postMessage');

var _chat4 = _interopRequireDefault(_chat3);

var _chat5 = require('./chat.update');

var _chat6 = _interopRequireDefault(_chat5);

var _chat7 = require('./chat.meMessage');

var _chat8 = _interopRequireDefault(_chat7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  postMessage: _chat4.default, delete: _chat2.default, update: _chat6.default, meMessage: _chat8.default
};
module.exports = exports['default'];
},{"./chat.delete":36,"./chat.meMessage":38,"./chat.postMessage":39,"./chat.update":40}],38:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chatmeMessage;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function chatmeMessage(params, callback) {
  var ns = 'chat.meMessage';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],39:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chatpostMessage;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function chatpostMessage(params, callback) {
  var ns = 'chat.postMessage';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],40:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chatupdate;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function chatupdate(params, callback) {
  var ns = 'chat.update';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],41:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndendDnd;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndendDnd(params, callback) {
  var ns = 'dnd.endDnd';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],42:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndendSnooze;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndendSnooze(params, callback) {
  var ns = 'dnd.endSnooze';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],43:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndinfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndinfo(params, callback) {
  var ns = 'dnd.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],44:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _dnd = require('./dnd.info');

var _dnd2 = _interopRequireDefault(_dnd);

var _dnd3 = require('./dnd.endDnd');

var _dnd4 = _interopRequireDefault(_dnd3);

var _dnd5 = require('./dnd.endSnooze');

var _dnd6 = _interopRequireDefault(_dnd5);

var _dnd7 = require('./dnd.setSnooze');

var _dnd8 = _interopRequireDefault(_dnd7);

var _dnd9 = require('./dnd.teamInfo');

var _dnd10 = _interopRequireDefault(_dnd9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  info: _dnd2.default, endDnd: _dnd4.default, endSnooze: _dnd6.default, setSnooze: _dnd8.default, teamInfo: _dnd10.default
};
module.exports = exports['default'];
},{"./dnd.endDnd":41,"./dnd.endSnooze":42,"./dnd.info":43,"./dnd.setSnooze":45,"./dnd.teamInfo":46}],45:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndsetSnooze;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndsetSnooze(params, callback) {
  var ns = 'dnd.setSnooze';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],46:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dndteamInfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function dndteamInfo(params, callback) {
  var ns = 'dnd.teamInfo';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],47:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = emojilist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function emojilist(params, callback) {
  var ns = 'emoji.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],48:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filescommentsadd;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filescommentsadd(params, callback) {
  var ns = 'files.comments.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],49:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filescommentsdelete;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filescommentsdelete(params, callback) {
  var ns = 'files.comments.delete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],50:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filescommentsedit;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filescommentsedit(params, callback) {
  var ns = 'files.comments.edit';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],51:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filesdelete;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filesdelete(params, callback) {
  var ns = 'files.delete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],52:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filesinfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filesinfo(params, callback) {
  var ns = 'files.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],53:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _files = require('./files.delete');

var _files2 = _interopRequireDefault(_files);

var _files3 = require('./files.info');

var _files4 = _interopRequireDefault(_files3);

var _files5 = require('./files.list');

var _files6 = _interopRequireDefault(_files5);

var _files7 = require('./files.upload');

var _files8 = _interopRequireDefault(_files7);

var _filesComments = require('./files.comments.add');

var _filesComments2 = _interopRequireDefault(_filesComments);

var _filesComments3 = require('./files.comments.delete');

var _filesComments4 = _interopRequireDefault(_filesComments3);

var _filesComments5 = require('./files.comments.edit');

var _filesComments6 = _interopRequireDefault(_filesComments5);

var _files9 = require('./files.revokePublicURL');

var _files10 = _interopRequireDefault(_files9);

var _files11 = require('./files.sharedPublicURL');

var _files12 = _interopRequireDefault(_files11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  delete: _files2.default,
  info: _files4.default,
  list: _files6.default,
  upload: _files8.default,
  comments: {
    add: _filesComments2.default,
    delete: _filesComments4.default,
    edit: _filesComments6.default
  },
  revokePublicURL: _files10.default,
  sharedPublicURL: _files12.default
};
module.exports = exports['default'];
},{"./files.comments.add":48,"./files.comments.delete":49,"./files.comments.edit":50,"./files.delete":51,"./files.info":52,"./files.list":54,"./files.revokePublicURL":55,"./files.sharedPublicURL":56,"./files.upload":57}],54:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fileslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function fileslist(params, callback) {
  var ns = 'files.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],55:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filesrevokePublicURL;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filesrevokePublicURL(params, callback) {
  var ns = 'files.revokePublicURL';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],56:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filessharedPublicURL;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filessharedPublicURL(params, callback) {
  var ns = 'files.sharedPublicURL';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],57:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filesupload;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function filesupload(params, callback) {
  var ns = 'files.upload';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],58:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsarchive;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsarchive(params, callback) {
  var ns = 'groups.archive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],59:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsclose;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsclose(params, callback) {
  var ns = 'groups.close';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],60:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupscreate;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupscreate(params, callback) {
  var ns = 'groups.create';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],61:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupscreateChild;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupscreateChild(params, callback) {
  var ns = 'groups.createChild';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],62:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupshistory;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupshistory(params, callback) {
  var ns = 'groups.history';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],63:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsinfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsinfo(params, callback) {
  var ns = 'groups.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],64:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsinvite;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsinvite(params, callback) {
  var ns = 'groups.invite';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],65:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _groups = require('./groups.archive');

var _groups2 = _interopRequireDefault(_groups);

var _groups3 = require('./groups.close');

var _groups4 = _interopRequireDefault(_groups3);

var _groups5 = require('./groups.create');

var _groups6 = _interopRequireDefault(_groups5);

var _groups7 = require('./groups.createChild');

var _groups8 = _interopRequireDefault(_groups7);

var _groups9 = require('./groups.history');

var _groups10 = _interopRequireDefault(_groups9);

var _groups11 = require('./groups.info');

var _groups12 = _interopRequireDefault(_groups11);

var _groups13 = require('./groups.invite');

var _groups14 = _interopRequireDefault(_groups13);

var _groups15 = require('./groups.kick');

var _groups16 = _interopRequireDefault(_groups15);

var _groups17 = require('./groups.leave');

var _groups18 = _interopRequireDefault(_groups17);

var _groups19 = require('./groups.list');

var _groups20 = _interopRequireDefault(_groups19);

var _groups21 = require('./groups.mark');

var _groups22 = _interopRequireDefault(_groups21);

var _groups23 = require('./groups.open');

var _groups24 = _interopRequireDefault(_groups23);

var _groups25 = require('./groups.rename');

var _groups26 = _interopRequireDefault(_groups25);

var _groups27 = require('./groups.setPurpose');

var _groups28 = _interopRequireDefault(_groups27);

var _groups29 = require('./groups.setTopic');

var _groups30 = _interopRequireDefault(_groups29);

var _groups31 = require('./groups.unarchive');

var _groups32 = _interopRequireDefault(_groups31);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  archive: _groups2.default,
  close: _groups4.default,
  create: _groups6.default,
  createChild: _groups8.default,
  history: _groups10.default,
  info: _groups12.default,
  invite: _groups14.default,
  kick: _groups16.default,
  leave: _groups18.default,
  list: _groups20.default,
  mark: _groups22.default,
  open: _groups24.default,
  rename: _groups26.default,
  setPurpose: _groups28.default,
  setTopic: _groups30.default,
  unarchive: _groups32.default
};
module.exports = exports['default'];
},{"./groups.archive":58,"./groups.close":59,"./groups.create":60,"./groups.createChild":61,"./groups.history":62,"./groups.info":63,"./groups.invite":64,"./groups.kick":66,"./groups.leave":67,"./groups.list":68,"./groups.mark":69,"./groups.open":70,"./groups.rename":71,"./groups.setPurpose":72,"./groups.setTopic":73,"./groups.unarchive":74}],66:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupskick;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupskick(params, callback) {
  var ns = 'groups.kick';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],67:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsleave;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsleave(params, callback) {
  var ns = 'groups.leave';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],68:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupslist(params, callback) {
  var ns = 'groups.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],69:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsmark;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsmark(params, callback) {
  var ns = 'groups.mark';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],70:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsopen;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsopen(params, callback) {
  var ns = 'groups.open';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],71:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsrename;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsrename(params, callback) {
  var ns = 'groups.rename';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],72:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupssetPurpose;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupssetPurpose(params, callback) {
  var ns = 'groups.setPurpose';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],73:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupssetTopic;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupssetTopic(params, callback) {
  var ns = 'groups.setTopic';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],74:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupsunarchive;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function groupsunarchive(params, callback) {
  var ns = 'groups.unarchive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],75:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imclose;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function imclose(params, callback) {
  var ns = 'im.close';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],76:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imhistory;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function imhistory(params, callback) {
  var ns = 'im.history';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],77:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _im = require('./im.close');

var _im2 = _interopRequireDefault(_im);

var _im3 = require('./im.history');

var _im4 = _interopRequireDefault(_im3);

var _im5 = require('./im.list');

var _im6 = _interopRequireDefault(_im5);

var _im7 = require('./im.mark');

var _im8 = _interopRequireDefault(_im7);

var _im9 = require('./im.open');

var _im10 = _interopRequireDefault(_im9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  close: _im2.default, history: _im4.default, list: _im6.default, mark: _im8.default, open: _im10.default
};
module.exports = exports['default'];
},{"./im.close":75,"./im.history":76,"./im.list":78,"./im.mark":79,"./im.open":80}],78:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imlist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function imlist(params, callback) {
  var ns = 'im.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],79:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = immark;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function immark(params, callback) {
  var ns = 'im.mark';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],80:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imopen;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function imopen(params, callback) {
  var ns = 'im.open';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],81:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _api = require('./api.test');

var _api2 = _interopRequireDefault(_api);

var _api3 = require('./api.client');

var _api4 = _interopRequireDefault(_api3);

var _bots = require('./bots');

var _bots2 = _interopRequireDefault(_bots);

var _auth = require('./auth.test');

var _auth2 = _interopRequireDefault(_auth);

var _channels = require('./channels');

var _channels2 = _interopRequireDefault(_channels);

var _chat = require('./chat');

var _chat2 = _interopRequireDefault(_chat);

var _dnd = require('./dnd');

var _dnd2 = _interopRequireDefault(_dnd);

var _emoji = require('./emoji.list');

var _emoji2 = _interopRequireDefault(_emoji);

var _files = require('./files');

var _files2 = _interopRequireDefault(_files);

var _groups = require('./groups');

var _groups2 = _interopRequireDefault(_groups);

var _im = require('./im');

var _im2 = _interopRequireDefault(_im);

var _mpim = require('./mpim');

var _mpim2 = _interopRequireDefault(_mpim);

var _oauth = require('./oauth.access');

var _oauth2 = _interopRequireDefault(_oauth);

var _reactions = require('./reactions');

var _reactions2 = _interopRequireDefault(_reactions);

var _reminders = require('./reminders');

var _reminders2 = _interopRequireDefault(_reminders);

var _pins = require('./pins');

var _pins2 = _interopRequireDefault(_pins);

var _rtm = require('./rtm.client');

var _rtm2 = _interopRequireDefault(_rtm);

var _rtm3 = require('./rtm.start');

var _rtm4 = _interopRequireDefault(_rtm3);

var _search = require('./search');

var _search2 = _interopRequireDefault(_search);

var _stars = require('./stars');

var _stars2 = _interopRequireDefault(_stars);

var _team = require('./team');

var _team2 = _interopRequireDefault(_team);

var _usergroups = require('./usergroups');

var _usergroups2 = _interopRequireDefault(_usergroups);

var _users = require('./users');

var _users2 = _interopRequireDefault(_users);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var describe = '\n  slack\n    api.client(token)\n    api.test(params, (err, data)=>)\n    auth.test(token, (err, data)=>)\n    bots.info\n    channels.archive({token, channel}, (err, data)=>)\n    channels.create({token, name}, (err, data)=>)\n    channels.history({token, channel}, (err, data)=>)\n    channels.info\n    channels.invite\n    channels.join\n    channels.kick\n    channels.leave\n    channels.list({token, exclude_archived}, (err, data)=>)\n    channels.mark\n    channels.rename\n    channels.setPurpose\n    channels.setTopic\n    channels.unarchive\n    chat.delete\n    chat.postMessage({token, text, channel}, (err, data)=>)\n    chat.update\n    emoji.list\n    files.delete\n    files.info\n    files.list\n    files.upload\n    groups.archive\n    groups.close\n    groups.create\n    groups.createChild\n    groups.history\n    groups.info\n    groups.invite\n    groups.kick\n    groups.leave\n    groups.list\n    groups.mark\n    groups.open\n    groups.rename\n    groups.setPurpose\n    groups.setTopic\n    groups.unarchive\n    im.close\n    im.history\n    im.list\n    im.mark\n    im.open\n    mpim.close\n    mpim.history\n    mpim.list\n    mpim.mark\n    mpim.open\n    oauth.access({client_id, client_secret, code}, (err, data)=>)\n    pins.add\n    pins.list\n    pins.remove\n    reactions.add\n    reactions.get\n    reactions.list\n    reactions.remove\n    reminders.add\n    reminders.complete\n    reminders.delete\n    reminders.info\n    reminders.list\n    rtm.client()\n    rtm.start({token}, (err, data)=>)\n    search.all\n    search.files\n    search.messages\n    stars.add\n    stars.list\n    stars.remove\n    team.acccessLogs\n    team.billableInfo\n    team.info(token, (err, data)=>)\n    team.integrationLogs\n    team.profile.get\n    usergroups.create\n    usergroups.disable\n    usergroups.enable\n    usergroups.list\n    usergroups.update\n    usergroups.users.list\n    usergroups.users.update\n    users.getPresence\n    users.identity\n    users.info\n    users.list(token, (err, data)=>)\n    users.setActive\n    users.setPresence\n';

exports.default = {
  describe: describe,
  api: { test: _api2.default, client: _api4.default },
  auth: { test: _auth2.default },
  bots: _bots2.default,
  channels: _channels2.default,
  chat: _chat2.default,
  dnd: _dnd2.default,
  emoji: { list: _emoji2.default },
  files: _files2.default,
  groups: _groups2.default,
  im: _im2.default,
  mpim: _mpim2.default,
  oauth: { access: _oauth2.default },
  reactions: _reactions2.default,
  reminders: _reminders2.default,
  pins: _pins2.default,
  rtm: { client: _rtm2.default, start: _rtm4.default },
  search: _search2.default,
  stars: _stars2.default,
  team: _team2.default,
  usergroups: _usergroups2.default,
  users: _users2.default
};
module.exports = exports['default'];
},{"./api.client":15,"./api.test":17,"./auth.test":18,"./bots":20,"./channels":27,"./chat":37,"./dnd":44,"./emoji.list":47,"./files":53,"./groups":65,"./im":77,"./mpim":84,"./oauth.access":88,"./pins":90,"./reactions":95,"./reminders":102,"./rtm.client":104,"./rtm.start":106,"./search":109,"./stars":112,"./team":119,"./usergroups":124,"./users":132}],82:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimclose;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimclose(params, callback) {
  var ns = 'mpim.close';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],83:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimhistory;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimhistory(params, callback) {
  var ns = 'mpim.history';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],84:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _mpim = require('./mpim.close');

var _mpim2 = _interopRequireDefault(_mpim);

var _mpim3 = require('./mpim.history');

var _mpim4 = _interopRequireDefault(_mpim3);

var _mpim5 = require('./mpim.list');

var _mpim6 = _interopRequireDefault(_mpim5);

var _mpim7 = require('./mpim.mark');

var _mpim8 = _interopRequireDefault(_mpim7);

var _mpim9 = require('./mpim.open');

var _mpim10 = _interopRequireDefault(_mpim9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  close: _mpim2.default,
  history: _mpim4.default,
  list: _mpim6.default,
  mark: _mpim8.default,
  open: _mpim10.default
};
module.exports = exports['default'];
},{"./mpim.close":82,"./mpim.history":83,"./mpim.list":85,"./mpim.mark":86,"./mpim.open":87}],85:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimlist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimlist(params, callback) {
  var ns = 'mpim.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],86:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimmark;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimmark(params, callback) {
  var ns = 'mpim.mark';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],87:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mpimopen;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function mpimopen(params, callback) {
  var ns = 'mpim.open';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],88:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = oauthaccess;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function oauthaccess(params, callback) {
  var ns = 'oauth.access';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],89:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pinsadd;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function pinsadd(params, callback) {
  var ns = 'pins.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],90:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pins = require('./pins.add');

var _pins2 = _interopRequireDefault(_pins);

var _pins3 = require('./pins.list');

var _pins4 = _interopRequireDefault(_pins3);

var _pins5 = require('./pins.remove');

var _pins6 = _interopRequireDefault(_pins5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  add: _pins2.default, list: _pins4.default, remove: _pins6.default
};
module.exports = exports['default'];
},{"./pins.add":89,"./pins.list":91,"./pins.remove":92}],91:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pinslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function pinslist(params, callback) {
  var ns = 'pins.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],92:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pinsremove;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function pinsremove(params, callback) {
  var ns = 'pins.remove';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],93:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reactionsadd;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reactionsadd(params, callback) {
  var ns = 'reactions.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],94:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reactionsget;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reactionsget(params, callback) {
  var ns = 'reactions.get';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],95:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactions = require('./reactions.add');

var _reactions2 = _interopRequireDefault(_reactions);

var _reactions3 = require('./reactions.get');

var _reactions4 = _interopRequireDefault(_reactions3);

var _reactions5 = require('./reactions.list');

var _reactions6 = _interopRequireDefault(_reactions5);

var _reactions7 = require('./reactions.remove');

var _reactions8 = _interopRequireDefault(_reactions7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  add: _reactions2.default, get: _reactions4.default, list: _reactions6.default, remove: _reactions8.default
};
module.exports = exports['default'];
},{"./reactions.add":93,"./reactions.get":94,"./reactions.list":96,"./reactions.remove":97}],96:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reactionslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reactionslist(params, callback) {
  var ns = 'reactions.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],97:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reactionsremove;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reactionsremove(params, callback) {
  var ns = 'reactions.remove';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],98:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = remindersadd;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function remindersadd(params, callback) {
  var ns = 'reminders.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],99:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reminderscomplete;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reminderscomplete(params, callback) {
  var ns = 'reminders.complete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],100:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = remindersdelete;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function remindersdelete(params, callback) {
  var ns = 'reminders.delete';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],101:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = remindersinfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function remindersinfo(params, callback) {
  var ns = 'reminders.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],102:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reminders = require('./reminders.add');

var _reminders2 = _interopRequireDefault(_reminders);

var _reminders3 = require('./reminders.complete');

var _reminders4 = _interopRequireDefault(_reminders3);

var _reminders5 = require('./reminders.delete');

var _reminders6 = _interopRequireDefault(_reminders5);

var _reminders7 = require('./reminders.info');

var _reminders8 = _interopRequireDefault(_reminders7);

var _reminders9 = require('./reminders.list');

var _reminders10 = _interopRequireDefault(_reminders9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  add: _reminders2.default, complete: _reminders4.default, delete: _reminders6.default, info: _reminders8.default, list: _reminders10.default
};
module.exports = exports['default'];
},{"./reminders.add":98,"./reminders.complete":99,"./reminders.delete":100,"./reminders.info":101,"./reminders.list":103}],103:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reminderslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function reminderslist(params, callback) {
  var ns = 'reminders.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],104:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = client;

var _rtm = require('./rtm.start');

var _rtm2 = _interopRequireDefault(_rtm);

var _rtm3 = require('./rtm.events');

var _rtm4 = _interopRequireDefault(_rtm3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// socket factory
function client() {

  // build a new bot every time
  var bot = {
    handlers: {
      started: []
    }
  };

  // add undocumented ping event
  _rtm4.default.push('pong');

  // generate event handler registration methods
  _rtm4.default.forEach(function (e) {
    bot.handlers[e] = [];
    bot[e] = function (handler) {
      bot.handlers[e].push(handler);
    };
  });

  bot.started = function (handler) {
    bot.handlers['started'].push(handler);
  };

  // kicks up a web socket connection
  bot.listen = function botListen(params, callback) {
    (0, _rtm2.default)(params, function (err, data) {
      if (err) {
        if (callback) callback(err);else throw err;
      } else {
        // grab a handle on the socket
        bot.ws = new WebSocket(data.url);
        // delegate everything
        bot.ws.onmessage = function message(e) {
          var json = JSON.parse(e.data);
          bot.handlers[json.type].forEach(function (m) {
            return m.call({}, json);
          });
        };
        // call started callbacks
        bot.handlers['started'].forEach(function (m) {
          return m.call({}, data);
        });
        if (callback) callback(null, data);
      }
    });
  };

  // closes the socket
  bot.close = function botClose() {
    bot.ws.close();
  };

  //////////
  return bot;
}
module.exports = exports['default'];
},{"./rtm.events":105,"./rtm.start":106}],105:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

// generated using ./scripts/generate-all
var events = ['accounts_changed', 'bot_added', 'bot_changed', 'channel_archive', 'channel_created', 'channel_deleted', 'channel_history_changed', 'channel_joined', 'channel_left', 'channel_marked', 'channel_rename', 'channel_unarchive', 'commands_changed', 'dnd_updated', 'dnd_updated_user', 'email_domain_changed', 'emoji_changed', 'file_change', 'file_comment_added', 'file_comment_deleted', 'file_comment_edited', 'file_created', 'file_deleted', 'file_public', 'file_shared', 'file_unshared', 'group_archive', 'group_close', 'group_history_changed', 'group_joined', 'group_left', 'group_marked', 'group_open', 'group_rename', 'group_unarchive', 'hello', 'im_close', 'im_created', 'im_history_changed', 'im_marked', 'im_open', 'manual_presence_change', 'message', 'message.channels', 'message.groups', 'message.im', 'message.mpim', 'pin_added', 'pin_removed', 'pong', 'pref_change', 'presence_change', 'reaction_added', 'reaction_removed', 'reconnect_url', 'star_added', 'star_removed', 'subteam_created', 'subteam_self_added', 'subteam_self_removed', 'subteam_updated', 'team_domain_change', 'team_join', 'team_migration_started', 'team_plan_change', 'team_pref_change', 'team_profile_change', 'team_profile_delete', 'team_profile_reorder', 'team_rename', 'url_verification', 'user_change', 'user_typing'];

exports.default = events;
module.exports = exports['default'];
},{}],106:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rtmstart;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function rtmstart(params, callback) {
  var ns = 'rtm.start';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],107:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = searchall;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function searchall(params, callback) {
  var ns = 'search.all';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],108:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = searchfiles;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function searchfiles(params, callback) {
  var ns = 'search.files';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],109:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _search = require('./search.all');

var _search2 = _interopRequireDefault(_search);

var _search3 = require('./search.files');

var _search4 = _interopRequireDefault(_search3);

var _search5 = require('./search.messages');

var _search6 = _interopRequireDefault(_search5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  all: _search2.default, files: _search4.default, messages: _search6.default
};
module.exports = exports['default'];
},{"./search.all":107,"./search.files":108,"./search.messages":110}],110:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = searchmessages;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function searchmessages(params, callback) {
  var ns = 'search.messages';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],111:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = starsadd;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function starsadd(params, callback) {
  var ns = 'stars.add';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],112:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stars = require('./stars.add');

var _stars2 = _interopRequireDefault(_stars);

var _stars3 = require('./stars.list');

var _stars4 = _interopRequireDefault(_stars3);

var _stars5 = require('./stars.remove');

var _stars6 = _interopRequireDefault(_stars5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  add: _stars2.default, list: _stars4.default, remove: _stars6.default
};
module.exports = exports['default'];
},{"./stars.add":111,"./stars.list":113,"./stars.remove":114}],113:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = starslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function starslist(params, callback) {
  var ns = 'stars.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],114:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = starsremove;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function starsremove(params, callback) {
  var ns = 'stars.remove';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],115:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teamaccessLogs;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teamaccessLogs(params, callback) {
  var ns = 'team.accessLogs';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],116:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teambillableInfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teambillableInfo(params, callback) {
  var ns = 'team.billableInfo';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],117:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teaminfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teaminfo(params, callback) {
  var ns = 'team.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],118:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teamintegrationLogs;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teamintegrationLogs(params, callback) {
  var ns = 'team.integrationLogs';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],119:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _team = require('./team.accessLogs');

var _team2 = _interopRequireDefault(_team);

var _team3 = require('./team.billableInfo');

var _team4 = _interopRequireDefault(_team3);

var _team5 = require('./team.info');

var _team6 = _interopRequireDefault(_team5);

var _team7 = require('./team.integrationLogs');

var _team8 = _interopRequireDefault(_team7);

var _teamProfile = require('./team.profile.get');

var _teamProfile2 = _interopRequireDefault(_teamProfile);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  accessLogs: _team2.default,
  billableInfo: _team4.default,
  info: _team6.default,
  integrationLogs: _team8.default,
  profile: {
    get: _teamProfile2.default
  }
};
module.exports = exports['default'];
},{"./team.accessLogs":115,"./team.billableInfo":116,"./team.info":117,"./team.integrationLogs":118,"./team.profile.get":120}],120:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = teamprofileget;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function teamprofileget(params, callback) {
  var ns = 'team.profile.get';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],121:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupscreate;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupscreate(params, callback) {
  var ns = 'usergroups.create';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],122:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsdisable;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsdisable(params, callback) {
  var ns = 'usergroups.disable';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],123:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsenable;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsenable(params, callback) {
  var ns = 'usergroups.enable';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],124:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _usergroups = require('./usergroups.create');

var _usergroups2 = _interopRequireDefault(_usergroups);

var _usergroups3 = require('./usergroups.disable');

var _usergroups4 = _interopRequireDefault(_usergroups3);

var _usergroups5 = require('./usergroups.enable');

var _usergroups6 = _interopRequireDefault(_usergroups5);

var _usergroups7 = require('./usergroups.list');

var _usergroups8 = _interopRequireDefault(_usergroups7);

var _usergroups9 = require('./usergroups.update');

var _usergroups10 = _interopRequireDefault(_usergroups9);

var _usergroupsUsers = require('./usergroups.users.list');

var _usergroupsUsers2 = _interopRequireDefault(_usergroupsUsers);

var _usergroupsUsers3 = require('./usergroups.users.update');

var _usergroupsUsers4 = _interopRequireDefault(_usergroupsUsers3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  create: _usergroups2.default,
  disable: _usergroups4.default,
  enable: _usergroups6.default,
  list: _usergroups8.default,
  update: _usergroups10.default,
  users: {
    list: _usergroupsUsers2.default,
    update: _usergroupsUsers4.default
  }
};
module.exports = exports['default'];
},{"./usergroups.create":121,"./usergroups.disable":122,"./usergroups.enable":123,"./usergroups.list":125,"./usergroups.update":126,"./usergroups.users.list":127,"./usergroups.users.update":128}],125:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupslist(params, callback) {
  var ns = 'usergroups.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],126:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsupdate;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsupdate(params, callback) {
  var ns = 'usergroups.update';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],127:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsuserslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsuserslist(params, callback) {
  var ns = 'usergroups.users.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],128:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usergroupsusersupdate;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usergroupsusersupdate(params, callback) {
  var ns = 'usergroups.users.update';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],129:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersgetPresence;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersgetPresence(params, callback) {
  var ns = 'users.getPresence';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],130:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersidentity;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersidentity(params, callback) {
  var ns = 'users.identity';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],131:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersinfo;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersinfo(params, callback) {
  var ns = 'users.info';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],132:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _users = require('./users.getPresence');

var _users2 = _interopRequireDefault(_users);

var _users3 = require('./users.identity');

var _users4 = _interopRequireDefault(_users3);

var _users5 = require('./users.info');

var _users6 = _interopRequireDefault(_users5);

var _users7 = require('./users.list');

var _users8 = _interopRequireDefault(_users7);

var _users9 = require('./users.setActive');

var _users10 = _interopRequireDefault(_users9);

var _users11 = require('./users.setPresence');

var _users12 = _interopRequireDefault(_users11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  getPresence: _users2.default,
  identity: _users4.default,
  info: _users6.default,
  list: _users8.default,
  setActive: _users10.default,
  setPresence: _users12.default
};
module.exports = exports['default'];
},{"./users.getPresence":129,"./users.identity":130,"./users.info":131,"./users.list":133,"./users.setActive":136,"./users.setPresence":137}],133:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = userslist;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function userslist(params, callback) {
  var ns = 'users.list';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],134:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersprofileget;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersprofileget(params, callback) {
  var ns = 'users.profile.get';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],135:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = usersprofileset;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function usersprofileset(params, callback) {
  var ns = 'users.profile.set';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],136:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = userssetActive;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function userssetActive(params, callback) {
  var ns = 'users.setActive';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],137:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = userssetPresence;

var _exec = require('./_exec');

var _exec2 = _interopRequireDefault(_exec);

var _validate = require('./_validate');

var _validate2 = _interopRequireDefault(_validate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// this file was generated by ./scripts/generate-web-api
function userssetPresence(params, callback) {
  var ns = 'users.setPresence';
  var err = (0, _validate2.default)(ns, params);
  if (err) {
    callback(err);
  } else {
    (0, _exec2.default)(ns, params, callback);
  }
}
module.exports = exports['default'];
},{"./_exec":13,"./_validate":14}],138:[function(require,module,exports){
'use strict';
module.exports = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};

},{}],139:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = activate;

var _slack = require('slack');

var _slack2 = _interopRequireDefault(_slack);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SlackProtoStub = function () {
  function SlackProtoStub(runtimeProtoStubURL, bus, config) {
    _classCallCheck(this, SlackProtoStub);

    if (!runtimeProtoStubURL) throw new Error('The runtimeProtoStubURL is a needed parameter');
    if (!bus) throw new Error('The bus is a needed parameter');
    if (!config) throw new Error('The config is a needed parameter');

    var _this = this;

    this._id = 0;
    this._continuousOpen = true;

    this._runtimeProtoStubURL = runtimeProtoStubURL;
    this._bus = bus;
    this._config = config;

    this._runtimeSessionURL = config.runtimeURL;
    this._reOpen = false;
    this._slack = _slack2.default;

    var session = _slack2.default.rtm.client();

    session.message(function (message) {
      console.log('New Message:', message);
    });

    var token = 'xoxp-11533603872-11537760645-92180697376-2965064fb34f76d8bea678e7710370c5';
    session.listen({ token: token });

    bus.addListener('*', function (msg) {
      console.log('new msg', msg);
      if (_this._filter(msg)) {
        var myTest = { as_user: true, token: token, channel: 'D0BFVEZNU', text: JSON.stringify(msg) };
        _this._slack.chat.postMessage(myTest, function (err, data) {
          console.log('err', err, ' data ', data);
        });
      }
    });
  }

  _createClass(SlackProtoStub, [{
    key: 'connect',
    value: function connect() {
      var _this = this;

      _this._continuousOpen = true;
      _this._open(function () {});
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      var _this = this;

      _this._continuousOpen = false;
      if (_this._sock) {
        _this._sendClose();
      }
    }
  }, {
    key: '_sendOpen',
    value: function _sendOpen(callback) {}
  }, {
    key: '_sendClose',
    value: function _sendClose() {}
  }, {
    key: '_sendStatus',
    value: function _sendStatus(value, reason) {}
  }, {
    key: '_waitReady',
    value: function _waitReady(callback) {}
  }, {
    key: '_filter',
    value: function _filter(msg) {
      if (msg.body && msg.body.via === this._runtimeProtoStubURL) return false;
      return true;
    }
  }, {
    key: '_deliver',
    value: function _deliver(msg) {}
  }, {
    key: '_open',
    value: function _open(callback) {
      var _this = this;

      if (!this._continuousOpen) {
        //TODO: send status (sent message error - disconnected)
        return;
      }
    }
  }, {
    key: 'config',
    get: function get() {
      return this._config;
    }
  }, {
    key: 'runtimeSession',
    get: function get() {
      return this._runtimeSessionURL;
    }
  }]);

  return SlackProtoStub;
}();

function activate(url, bus, config) {
  return {
    name: 'SlackProtoStub',
    instance: new SlackProtoStub(url, bus, config)
  };
}
module.exports = exports['default'];

},{"slack":81}]},{},[139])(139)
});",
      "sourceCodeClassname": "SlackProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "4-6e7a55d5-3daf-cdc4-63fb-8b2984ada3651",
    "version": 0.5,
    "description": "Description of SlackProtoStub",
    "language": "Javascript",
    "type": "ProtoStubs",
    "objectName": "SlackProtoStub",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "constraints": "",
    "dataObjects": []
  },
  "VertxProtoStubNode": {
    "sourcePackage": {
      "sourceCode": "'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 PT Inovação e Sistemas SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 INESC-ID
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 QUOBIS NETWORKS SL
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 ORANGE SA
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Deutsche Telekom AG
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 Apizee
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Licensed under the Apache License, Version 2.0 (the "License");
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * you may not use this file except in compliance with the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * You may obtain a copy of the License at
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *   http://www.apache.org/licenses/LICENSE-2.0
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * Unless required by applicable law or agreed to in writing, software
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * distributed under the License is distributed on an "AS IS" BASIS,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * See the License for the specific language governing permissions and
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     * limitations under the License.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     **/

exports.default = activate;

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VertxProtoStub = function () {
  /* private
    _continuousOpen: boolean
     _runtimeProtoStubURL: string
    _bus: MiniBus
    _msgCallback: (Message) => void
    _config: { url, runtimeURL }
     _sock: (WebSocket | SockJS)
    _reOpen: boolean
  */

  /**
   * Vertx ProtoStub creation
   * @param  {string} runtimeProtoStubURL - URL used internally for message delivery point. Not used for MessageNode deliver.
   * @param  {MiniBus} bus - MiniBus used to send/receive messages. Normally connected to the MessageBus.
   * @param  {Object} config - Mandatory fields are: "url" of the MessageNode address and "runtimeURL".
   * @return {VertxProtoStub}
   */
  function VertxProtoStub(runtimeProtoStubURL, bus, config) {
    _classCallCheck(this, VertxProtoStub);

    if (!runtimeProtoStubURL) throw new Error('The runtimeProtoStubURL is a needed parameter');
    if (!bus) throw new Error('The bus is a needed parameter');
    if (!config) throw new Error('The config is a needed parameter');

    if (!config.url) throw new Error('The config.url is a needed parameter');
    if (!config.runtimeURL) throw new Error('The config.runtimeURL is a needed parameter');

    var _this = this;

    this._id = 0;
    this._continuousOpen = true;

    this._runtimeProtoStubURL = runtimeProtoStubURL;
    this._bus = bus;
    this._config = config;

    this._runtimeSessionURL = config.runtimeURL;
    this._reOpen = false;

    bus.addListener('*', function (msg) {
      _this._open(function () {
        if (_this._filter(msg)) {
          _this._sock.send(JSON.stringify(msg));
        }
      });
    });
  }

  /**
   * Get the configuration for this ProtoStub
   * @return {Object} - Mandatory fields are: "url" of the MessageNode address and "runtimeURL".
   */


  _createClass(VertxProtoStub, [{
    key: 'connect',


    /**
     * Try to open the connection to the MessageNode. Connection is auto managed, there is no need to call this explicitly.
     * However, if "disconnect()" is called, it's necessary to call this to enable connections again.
     * A status message is sent to "runtimeProtoStubURL/status", containing the value "connected" if successful, or "disconnected" if some error occurs.
     */
    value: function connect() {
      var _this = this;

      _this._continuousOpen = true;
      _this._open(function () {});
    }

    /**
     * It will disconnect and order to stay disconnected. Reconnection tries, will not be attempted, unless "connect()" is called.
     * A status message is sent to "runtimeProtoStubURL/status" with value "disconnected".
     */

  }, {
    key: 'disconnect',
    value: function disconnect() {
      var _this = this;

      _this._continuousOpen = false;
      if (_this._sock) {
        _this._sendClose();
      }
    }
  }, {
    key: '_sendOpen',
    value: function _sendOpen(callback) {
      var _this = this;

      _this._id++;
      var msg = {
        id: _this._id, type: 'open', from: _this._runtimeSessionURL, to: 'mn:/session'
      };

      if (_this._reOpen) {
        msg.type = 're-open';
      }

      //register and wait for open reply...
      var hasResponse = false;
      _this._sessionCallback = function (reply) {
        if (reply.type === 'response' & reply.id === msg.id) {
          hasResponse = true;
          if (reply.body.code === 200) {
            if (reply.body.runtimeToken) {
              //setup runtimeSession
              _this._reOpen = true;
              _this._runtimeSessionURL = _this._config.runtimeURL + '/' + reply.body.runtimeToken;
            }

            _this._sendStatus('connected');
            callback();
          } else {
            _this._sendStatus('disconnected', reply.body.desc);
          }
        }
      };

      _this._sock.send(JSON.stringify(msg));
      setTimeout(function () {
        if (!hasResponse) {
          //no response after x seconds...
          _this._sendStatus('disconnected', 'Timeout from mn:/session');
        }
      }, 3000);
    }
  }, {
    key: '_sendClose',
    value: function _sendClose() {
      var _this = this;

      _this._id++;
      var msg = {
        id: _this._id, type: 'close', from: _this._runtimeSessionURL, to: 'mn:/session'
      };

      //invalidate runtimeSession
      _this._reOpen = false;
      _this._runtimeSessionURL = _this._config._runtimeURL;

      _this._sock.send(JSON.stringify(msg));
    }
  }, {
    key: '_sendStatus',
    value: function _sendStatus(value, reason) {
      var _this = this;

      var msg = {
        type: 'update',
        from: _this._runtimeProtoStubURL,
        to: _this._runtimeProtoStubURL + '/status',
        body: {
          value: value
        }
      };

      if (reason) {
        msg.body.desc = reason;
      }

      _this._bus.postMessage(msg);
    }
  }, {
    key: '_waitReady',
    value: function _waitReady(callback) {
      var _this = this;

      if (_this._sock.readyState === 1) {
        callback();
      } else {
        setTimeout(function () {
          _this._waitReady(callback);
        });
      }
    }
  }, {
    key: '_filter',
    value: function _filter(msg) {
      if (msg.body && msg.body.via === this._runtimeProtoStubURL) return false;
      return true;
    }
  }, {
    key: '_deliver',
    value: function _deliver(msg) {
      if (!msg.body) msg.body = {};

      msg.body.via = this._runtimeProtoStubURL;
      this._bus.postMessage(msg);
    }
  }, {
    key: '_open',
    value: function _open(callback) {
      var _this = this;

      if (!this._continuousOpen) {
        //TODO: send status (sent message error - disconnected)
        return;
      }

      if (!_this._sock) {
        if (_this._config.url.substring(0, 2) === 'ws') {
          _this._sock = new _ws2.default(_this._config.url);
        } else {
          _this._sock = new SockJS(_this._config.url);
        }

        _this._sock.onopen = function () {
          _this._sendOpen(function () {
            callback();
          });
        };

        _this._sock.onmessage = function (e) {
          var msg = JSON.parse(e.data);
          if (msg.from === 'mn:/session') {
            if (_this._sessionCallback) {
              _this._sessionCallback(msg);
            }
          } else {
            _this._deliver(msg);
          }
        };

        _this._sock.onclose = function (event) {
          var reason = void 0;

          //See https://tools.ietf.org/html/rfc6455#section-7.4
          if (event.code === 1000) {
            reason = 'Normal closure, meaning that the purpose for which the connection was established has been fulfilled.';
          } else if (event.code === 1001) {
            reason = 'An endpoint is \'going away\', such as a server going down or a browser having navigated away from a page.';
          } else if (event.code === 1002) {
            reason = 'An endpoint is terminating the connection due to a protocol error';
          } else if (event.code === 1003) {
            reason = 'An endpoint is terminating the connection because it has received a type of data it cannot accept (e.g., an endpoint that understands only text data MAY send this if it receives a binary message).';
          } else if (event.code === 1004) {
            reason = 'Reserved. The specific meaning might be defined in the future.';
          } else if (event.code === 1005) {
            reason = 'No status code was actually present.';
          } else if (event.code === 1006) {
            reason = 'The connection was closed abnormally, e.g., without sending or receiving a Close control frame';
          } else if (event.code === 1007) {
            reason = 'An endpoint is terminating the connection because it has received data within a message that was not consistent with the type of the message (e.g., non-UTF-8 [http://tools.ietf.org/html/rfc3629] data within a text message).';
          } else if (event.code === 1008) {
            reason = 'An endpoint is terminating the connection because it has received a message that "violates its policy". This reason is given either if there is no other sutible reason, or if there is a need to hide specific details about the policy.';
          } else if (event.code === 1009) {
            reason = 'An endpoint is terminating the connection because it has received a message that is too big for it to process.';
          } else if (event.code === 1010) {
            reason = 'An endpoint (client) is terminating the connection because it has expected the server to negotiate one or more extension, but the server didn\'t return them in the response message of the WebSocket handshake. <br /> Specifically, the extensions that are needed are: ' + event.reason;
          } else if (event.code === 1011) {
            reason = 'A server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request.';
          } else if (event.code === 1015) {
            reason = 'The connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can\'t be verified).';
          } else {
            reason = 'Unknown reason';
          }

          delete _this._sock;
          _this._sendStatus('disconnected', reason);
        };
      } else {
        _this._waitReady(callback);
      }
    }
  }, {
    key: 'config',
    get: function get() {
      return this._config;
    }
  }, {
    key: 'runtimeSession',
    get: function get() {
      return this._runtimeSessionURL;
    }
  }]);

  return VertxProtoStub;
}();

function activate(url, bus, config) {
  return {
    name: 'VertxProtoStub',
    instance: new VertxProtoStub(url, bus, config)
  };
}

/**
* Callback used to send messages
* @callback PostMessage
* @param {Message} msg - Message to send
*/",
      "sourceCodeClassname": "VertxProtoStubNode",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "4-6e7a55d5-3daf-cdc4-63fb-8b2984ada3652",
    "version": 0.2,
    "description": "Description of VertxProtoStubNode",
    "language": "Javascript",
    "type": "ProtoStubs",
    "objectName": "VertxProtoStubNode",
    "configuration": {
      "url": "wss://msg-node.hysmart.rethink.ptinovacao.pt/localhost/ws"
    },
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "constraints": "",
    "dataObjects": []
  }
}
