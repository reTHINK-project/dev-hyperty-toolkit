{
  "GoogleProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "fitness.google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "11.30",
    "description": "Protostub of Google",
    "language": "javascript",
    "cguid": "406d1b76ae0394c37d6e7d0037a91cb7c",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "fitness.google.com",
    "configuration": {
      "sessions_query_interval": 300000,
      "domain": "localhost"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "sip.rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "11.30",
    "description": "Description of IMSIWProtoStub",
    "language": "javascript",
    "cguid": "42deef6d806460071a3a260ea4b6291ae",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "sip.rethink-project.eu",
    "configuration": {
      "credential_server": "https://ims.rethink-project.eu/credential",
      "domain": "hysmart.rethink.ptinovacao.pt"
    },
    "messageSchemas": "",
    "dataObjects": [
      "hyperty-catalogue://catalogue.hysmart.rethink.ptinovacao.pt/.well-known/dataschema/Connection"
    ],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "P2PHandlerProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "P2PHandlerProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "11.30",
    "description": "P2P Handler Protostub ",
    "language": "javascript",
    "cguid": "4456240d0c888e2293cdc568a7224b7c0",
    "type": "ProtoStubs",
    "constraints": {
      "windowSandbox": true
    },
    "objectName": "P2PHandlerProtoStub",
    "configuration": {
      "iceServers": [
        {
          "urls": "turn:numb.viagenie.ca",
          "credential": "zJcH3erd9cUv5Zh",
          "username": "luis-t-duarte@telecom.pt"
        },
        {
          "urls": [
            "stun:stun.voiparound.com",
            "stun:stun.voipbuster.com",
            "stun:stun.voipstunt.com",
            "stun:stun.voxgratia.org",
            "stun:stun.ekiga.net",
            "stun:stun.schlund.de",
            "stun:stun.iptel.org",
            "stun:stun.l.google.com:19302",
            "stun:stun1.l.google.com:19302",
            "stun:stun.ideasip.com",
            "stun:stun4.l.google.com:19302",
            "stun:stun2.l.google.com:19302",
            "stun:stun3.l.google.com:19302"
          ]
        }
      ],
      "iceTransportPolicy": "all"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "P2PRequesterProtoStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihyKXtpZih0W3JdKXJldHVybiB0W3JdLmV4cG9ydHM7dmFyIGk9dFtyXT17aTpyLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbcl0uY2FsbChpLmV4cG9ydHMsaSxpLmV4cG9ydHMsbiksaS5sPSEwLGkuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxyKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0OnJ9KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9IiIsbihuLnM9MSl9KFtmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPSEwLGk9e2Rpc2FibGVMb2c6ZnVuY3Rpb24oZSl7cmV0dXJuImJvb2xlYW4iIT10eXBlb2YgZT9uZXcgRXJyb3IoIkFyZ3VtZW50IHR5cGU6ICIrdHlwZW9mIGUrIi4gUGxlYXNlIHVzZSBhIGJvb2xlYW4uIik6KHI9ZSxlPyJhZGFwdGVyLmpzIGxvZ2dpbmcgZGlzYWJsZWQiOiJhZGFwdGVyLmpzIGxvZ2dpbmcgZW5hYmxlZCIpfSxsb2c6ZnVuY3Rpb24oKXtpZigib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyl7aWYocilyZXR1cm47InVuZGVmaW5lZCIhPXR5cGVvZiBjb25zb2xlJiYiZnVuY3Rpb24iPT10eXBlb2YgY29uc29sZS5sb2cmJmNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsYXJndW1lbnRzKX19LGV4dHJhY3RWZXJzaW9uOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLm1hdGNoKHQpO3JldHVybiByJiZyLmxlbmd0aD49biYmcGFyc2VJbnQocltuXSwxMCl9LGRldGVjdEJyb3dzZXI6ZnVuY3Rpb24oKXt2YXIgZT17YnJvd3NlcjpudWxsLHZlcnNpb246bnVsbH07aWYoInVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cubmF2aWdhdG9yKXJldHVybiBlLmJyb3dzZXI9Ik5vdCBhIGJyb3dzZXIuIixlO2lmKG5hdmlnYXRvci5tb3pHZXRVc2VyTWVkaWEpZS5icm93c2VyPSJmaXJlZm94IixlLnZlcnNpb249dGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LC9GaXJlZm94XC8oXGQrKVwuLywxKTtlbHNlIGlmKG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEpaWYod2luZG93LndlYmtpdFJUQ1BlZXJDb25uZWN0aW9uKWUuYnJvd3Nlcj0iY2hyb21lIixlLnZlcnNpb249dGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LC9DaHJvbShlfGl1bSlcLyhcZCspXC4vLDIpO2Vsc2V7aWYoIW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL1ZlcnNpb25cLyhcZCspLihcZCspLykpcmV0dXJuIGUuYnJvd3Nlcj0iVW5zdXBwb3J0ZWQgd2Via2l0LWJhc2VkIGJyb3dzZXIgd2l0aCBHVU0gc3VwcG9ydCBidXQgbm8gV2ViUlRDIHN1cHBvcnQuIixlO2UuYnJvd3Nlcj0ic2FmYXJpIixlLnZlcnNpb249dGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LC9BcHBsZVdlYktpdFwvKFxkKylcLi8sMSl9ZWxzZSBpZihuYXZpZ2F0b3IubWVkaWFEZXZpY2VzJiZuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlXC8oXGQrKS4oXGQrKSQvKSllLmJyb3dzZXI9ImVkZ2UiLGUudmVyc2lvbj10aGlzLmV4dHJhY3RWZXJzaW9uKG5hdmlnYXRvci51c2VyQWdlbnQsL0VkZ2VcLyhcZCspLihcZCspJC8sMik7ZWxzZXtpZighbmF2aWdhdG9yLm1lZGlhRGV2aWNlc3x8IW5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XC8oXGQrKVwuLykpcmV0dXJuIGUuYnJvd3Nlcj0iTm90IGEgc3VwcG9ydGVkIGJyb3dzZXIuIixlO2UuYnJvd3Nlcj0ic2FmYXJpIixlLnZlcnNpb249dGhpcy5leHRyYWN0VmVyc2lvbihuYXZpZ2F0b3IudXNlckFnZW50LC9BcHBsZVdlYktpdFwvKFxkKylcLi8sMSl9cmV0dXJuIGV9LHNoaW1DcmVhdGVPYmplY3RVUkw6ZnVuY3Rpb24oKXtpZigib2JqZWN0Ij09dHlwZW9mIHdpbmRvdyYmd2luZG93LkhUTUxNZWRpYUVsZW1lbnQmJiJzcmNPYmplY3QiaW4gd2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlKXt2YXIgZT1VUkwuY3JlYXRlT2JqZWN0VVJMLmJpbmQoVVJMKSx0PVVSTC5yZXZva2VPYmplY3RVUkwuYmluZChVUkwpLG49bmV3IE1hcCxyPTA7VVJMLmNyZWF0ZU9iamVjdFVSTD1mdW5jdGlvbih0KXtpZigiZ2V0VHJhY2tzImluIHQpe3ZhciBpPSJwb2x5YmxvYjoiKyArK3I7cmV0dXJuIG4uc2V0KGksdCksY29uc29sZS5sb2coIlVSTC5jcmVhdGVPYmplY3RVUkwoc3RyZWFtKSBpcyBkZXByZWNhdGVkISBVc2UgZWxlbS5zcmNPYmplY3QgPSBzdHJlYW0gaW5zdGVhZCEiKSxpfXJldHVybiBlKHQpfSxVUkwucmV2b2tlT2JqZWN0VVJMPWZ1bmN0aW9uKGUpe3QoZSksbi5kZWxldGUoZSl9O3ZhciBpPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCJzcmMiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCJzcmMiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5nZXQuYXBwbHkodGhpcyl9LHNldDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5zcmNPYmplY3Q9bi5nZXQoZSl8fG51bGwsaS5zZXQuYXBwbHkodGhpcyxbZV0pfX0pO3ZhciBhPUhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZTtIVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGU9ZnVuY3Rpb24oKXtyZXR1cm4gMj09PWFyZ3VtZW50cy5sZW5ndGgmJiJzcmMiPT09KCIiK2FyZ3VtZW50c1swXSkudG9Mb3dlckNhc2UoKSYmKHRoaXMuc3JjT2JqZWN0PW4uZ2V0KGFyZ3VtZW50c1sxXSl8fG51bGwpLGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19fTtlLmV4cG9ydHM9e2xvZzppLmxvZyxkaXNhYmxlTG9nOmkuZGlzYWJsZUxvZyxicm93c2VyRGV0YWlsczppLmRldGVjdEJyb3dzZXIoKSxleHRyYWN0VmVyc2lvbjppLmV4dHJhY3RWZXJzaW9uLHNoaW1DcmVhdGVPYmplY3RVUkw6aS5zaGltQ3JlYXRlT2JqZWN0VVJMLGRldGVjdEJyb3dzZXI6aS5kZXRlY3RCcm93c2VyLmJpbmQoaSl9fSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSx0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJue25hbWU6IlAyUFJlcXVlc3RlclN0dWIiLGluc3RhbmNlOm5ldyBhKGUsdCxuLHIpfX07dmFyIHI9bigyKTtmdW5jdGlvbiBpKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19dmFyIGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixpLGEpe3ZhciBvPXRoaXM7aWYoZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0odGhpcyxlKSwhdCl0aHJvdyBuZXcgRXJyb3IoIlRoZSBydW50aW1lUHJvdG9TdHViVVJMIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyIik7aWYoIW4pdGhyb3cgbmV3IEVycm9yKCJUaGUgYnVzIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyIik7aWYoIWkpdGhyb3cgbmV3IEVycm9yKCJUaGUgY29uZmlndXJhdGlvbiBpcyBhIHJlcXVpcmVkIHBhcmFtZXRlciIpO2NvbnNvbGUubG9nKCIrW1AyUFJlcXVlc3RlclN0dWIuY29uc3RydWN0b3JdIGNvbmZpZyBpczogIixpKSx0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMPXQsdGhpcy5fcnVudGltZVVSTD1pLnJ1bnRpbWVVUkwsdGhpcy5fcmVtb3RlUnVudGltZVVSTD1pLnJlbW90ZVJ1bnRpbWVVUkwsdGhpcy5fY29uZmlndXJhdGlvbj1pLHRoaXMuX2J1cz1uLHRoaXMuX2J1cy5hZGRMaXN0ZW5lcigiKiIsZnVuY3Rpb24oZSl7ZS50bz09PW8uX3J1bnRpbWVQcm90b1N0dWJVUkw/KGUudHlwZT0iZXhlY3V0ZSIpJiZvLl9vbkV4ZWN1dGUoZS5ib2R5Lm1ldGhvZCxlLmJvZHkucGFyYW1zKTpvLl9zZW5kQ2hhbm5lbE1zZyhlKX0pLHRoaXMuX3N5bmNoZXI9YS5jcmVhdGVTeW5jaGVyKHQsbixpKSx0aGlzLl9jb25uZWN0aW9uQ29udHJvbGxlcj1uZXcgci5hKHRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkwsdGhpcy5fc3luY2hlcix0aGlzLl9jb25maWd1cmF0aW9uLCEwKSx0aGlzLl9jb25uZWN0aW9uQ29udHJvbGxlci5vblN0YXR1c1VwZGF0ZShmdW5jdGlvbihlLHQpe28uX3NlbmRTdGF0dXMoZSx0KSwiZGlzY29ubmVjdGVkIj09PWUmJm8uZGlzY29ubmVjdCgpfSksdGhpcy5fc3luY2hlci5vbk5vdGlmaWNhdGlvbihmdW5jdGlvbihlKXtzd2l0Y2goY29uc29sZS5sb2coIitbUDJQUmVxdWVzdGVyU3R1Yl0gT24gU3luY2hlciBOb3RpZmljYXRpb246ICIsZSksZS5hY2soMjAwKSxlLnR5cGUpe2Nhc2UiY3JlYXRlIjpvLl9jb25uZWN0aW9uQ29udHJvbGxlciYmby5fY29ubmVjdGlvbkNvbnRyb2xsZXIub2JzZXJ2ZShlKS50aGVuKGZ1bmN0aW9uKCl7Y29uc29sZS5sb2coIitbUDJQUmVxdWVzdGVyU3R1Yl0gb2JzZXJ2ZXIgY3JlYXRlZCAiKX0pO2JyZWFrO2Nhc2UiZGVsZXRlIjpjb25zb2xlLmxvZygiK1tQMlBSZXF1ZXN0ZXJTdHViXSBkZWxldGluZyBjb25uZWN0aW9uIGhhbmRsZXIgZm9yICIrZS5mcm9tKSxkaXNjb25uZWN0KCl9fSksdGhpcy5fc2VuZFN0YXR1cygiY3JlYXRlIiksdGhpcy5fY29uZmlndXJhdGlvbi5wMnBIYW5kbGVyJiZ0aGlzLmNvbm5lY3QodGhpcy5fY29uZmlndXJhdGlvbi5wMnBIYW5kbGVyKX1yZXR1cm4gZnVuY3Rpb24oZSx0LG4pe3QmJmkoZS5wcm90b3R5cGUsdCksbiYmaShlLG4pfShlLFt7a2V5OiJfb25FeGVjdXRlIix2YWx1ZTpmdW5jdGlvbihlLHQpe2NvbnNvbGUubG9nKCJbUDJQUmVxdWVzdGVyU3R1Yi5fb25FeGVjdXRlXSByZXF1ZXN0IHRvIGV4ZWN1dGU6ICIsZSwiIHdpdGggcGFybXMgIix0KSwiY29ubmVjdCI9PT1lJiZ0aGlzLmNvbm5lY3QodFswXSl9fSx7a2V5OiJjb25uZWN0Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuX2Nvbm5lY3Rpb25Db250cm9sbGVyLnJlcG9ydChlLHRoaXMuX3J1bnRpbWVVUkwpLnRoZW4oZnVuY3Rpb24oKXt0Ll9zZW5kU3RhdHVzKCJpbi1wcm9ncmVzcyIpLHQuX2Nvbm5lY3Rpb25Db250cm9sbGVyLm9uTWVzc2FnZShmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiK1tQMlBSZXF1ZXN0ZXJTdHViXSBvbk1lc3NhZ2U6ICIsZSksdC5fZGVsaXZlcihlKX0pLGNvbnNvbGUubG9nKCIrW1AyUFJlcXVlc3RlclN0dWJdIHNldHVwIHJlcG9ydGVyIG9iamVjdCBzdWNjZXNzZnVsbHkiKX0pfX0se2tleToiZGlzY29ubmVjdCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9jb25uZWN0aW9uQ29udHJvbGxlciYmdGhpcy5fY29ubmVjdGlvbkNvbnRyb2xsZXIuY2xlYW51cCgpfX0se2tleToiX3NlbmRDaGFubmVsTXNnIix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9maWx0ZXIoZSkmJnRoaXMuX2Nvbm5lY3Rpb25Db250cm9sbGVyJiZ0aGlzLl9jb25uZWN0aW9uQ29udHJvbGxlci5zZW5kTWVzc2FnZShlKX19LHtrZXk6Il9zZW5kU3RhdHVzIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXt0eXBlOiJ1cGRhdGUiLGZyb206dGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCx0bzp0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMKyIvc3RhdHVzIixib2R5Ont2YWx1ZTplLHJlc291cmNlOnRoaXMuX3JlbW90ZVJ1bnRpbWVVUkx9fTt0JiYobi5ib2R5LmRlc2M9dCksdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG4pLGNvbnNvbGUubG9nKCIrW1AyUHJlcXVlc3RlclN0dWJdIHNlbmRpbmcgc3RhdHVzIHVwZGF0ZTogIixuKX19LHtrZXk6Il9maWx0ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiFlLmJvZHl8fGUuYm9keS52aWEhPT10aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMfX0se2tleToiX2RlbGl2ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCIrW1AyUHJlcXVlc3RlclN0dWJdIHBvc3RpbmcgbWVzc2FnZSB0byBtc2cgYnVzOiAiLGUpLGUuYm9keXx8KGUuYm9keT17fSksZS5ib2R5LnZpYT10aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMLHRoaXMuX2J1cy5wb3N0TWVzc2FnZShlKX19XSksZX0oKX0sZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKDMpLGk9KG4ubihyKSxuKDEzKSksYT1uKDE0KTtmdW5jdGlvbiBvKGUpe3JldHVybihvPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSkoZSl9ZnVuY3Rpb24gcyhlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXZhciBjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scixpKXtpZihmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSh0aGlzLGUpLCF0KXRocm93IG5ldyBFcnJvcigiVGhlIG93biB1cmwgKG15VXJsKSBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIiKTtpZighbil0aHJvdyBuZXcgRXJyb3IoIlRoZSBzeW5jaGVyIGlzIGEgbmVlZGVkIHBhcmFtZXRlciIpO2lmKCFyKXRocm93IG5ldyBFcnJvcigiVGhlIGNvbmZpZ3VyYXRpb24gaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7dGhpcy5fZG9tYWluPXRoaXMuX2RpdmlkZVVSTCh0KS5kb21haW4sdGhpcy5fb2JqZWN0RGVzY1VSTD0iaHlwZXJ0eS1jYXRhbG9ndWU6Ly9jYXRhbG9ndWUuIit0aGlzLl9kb21haW4rIi8ud2VsbC1rbm93bi9kYXRhc2NoZW1hL0Nvbm5lY3Rpb24iLHRoaXMuX215VXJsPXQsdGhpcy5fc3luY2hlcj1uLHRoaXMuX2NvbmZpZ3VyYXRpb249cix0aGlzLl9jYWxsZXI9aSx0aGlzLl9kYXRhT2JqZWN0T2JzZXJ2ZXIsdGhpcy5fZGF0YU9iamVjdFJlcG9ydGVyLHRoaXMuX3BlZXJVcmwsdGhpcy5fZGF0YUNoYW5uZWwsdGhpcy5fb25TdGF0dXNVcGRhdGUsdGhpcy5fcmVtb3RlUnVudGltZVVSTCx0aGlzLl9yZWNlaXZlcnM9e30sdGhpcy5fc2VuZGVycz17fSx0aGlzLl9tYXhTaXplPTE2Mzg0LHRoaXMuX3RocmVzaG9sZD0wLHRoaXMuX3BlZXJDb25uZWN0aW9uPXRoaXMuX2NyZWF0ZVBlZXJDb25uZWN0aW9uKCl9cmV0dXJuIGZ1bmN0aW9uKGUsdCxuKXt0JiZzKGUucHJvdG90eXBlLHQpLG4mJnMoZSxuKX0oZSxbe2tleToiX2NyZWF0ZVBlZXJDb25uZWN0aW9uIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD10aGlzLl9wZWVyQ29ubmVjdGlvbjtyZXR1cm4gdHx8KHQ9bmV3IFJUQ1BlZXJDb25uZWN0aW9uKHRoaXMuX2NvbmZpZ3VyYXRpb24pLGNvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogY3JlYXRlZCBQZWVyQ29ubmVjdGlvbiIpLHQub25kYXRhY2hhbm5lbD1mdW5jdGlvbih0KXtjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IG9uZGF0YWNoYW5uZWwgLT4gcmVtb3RlIHNpZGUgaGFzIGNyZWF0ZWQgYSBkYXRhY2hhbm5lbCIpLGUuX2RhdGFDaGFubmVsPXQuY2hhbm5lbCxlLl9hZGREYXRhQ2hhbm5lbExpc3RlbmVycygpfSx0Lm9uaWNlY2FuZGlkYXRlPWZ1bmN0aW9uKHQpe2lmKGNvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogaWNlY2FuZGlkYXRlZXZlbnQgb2NjdXJlZDogIix0KSx0LmNhbmRpZGF0ZSl7dmFyIG49e3R5cGU6ImNhbmRpZGF0ZSIsY2FuZGlkYXRlOnQuY2FuZGlkYXRlLmNhbmRpZGF0ZSxzZHBNaWQ6dC5jYW5kaWRhdGUuc2RwTWlkLHNkcE1MaW5lSW5kZXg6dC5jYW5kaWRhdGUuc2RwTUxpbmVJbmRleH07ZS5fZGF0YU9iamVjdFJlcG9ydGVyLmRhdGEuaWNlQ2FuZGlkYXRlcy5wdXNoKG4pfX0pLHR9fSx7a2V5OiJvYnNlcnZlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3JldHVybiB0aGlzLl9wZWVyVXJsPWUuZnJvbSx0aGlzLl9yZW1vdGVSdW50aW1lVVJMPWUudmFsdWUucnVudGltZSxuZXcgUHJvbWlzZShmdW5jdGlvbihuLHIpe3ZhciBpPXtzY2hlbWE6dC5fb2JqZWN0RGVzY1VSTCxyZXNvdXJjZTplLnVybH07dC5fc3luY2hlci5zdWJzY3JpYmUoaSkudGhlbihmdW5jdGlvbihlKXtjb25zb2xlLmluZm8oIitbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBnb3QgRGF0YSBPYmplY3QgT2JzZXJ2ZXIiLGUpLHQuX3NldHVwT2JzZXJ2ZXIoZSksbigpfSkuY2F0Y2goZnVuY3Rpb24oZSl7Y29uc29sZS5lcnJvcihlKSxyKCl9KX0pfX0se2tleToicmVwb3J0Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7cmV0dXJuIHRoaXMuX3BlZXJVcmx8fCh0aGlzLl9wZWVyVXJsPWUpLG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUscil7bi5fcGVlckNvbm5lY3Rpb258fChuLl9wZWVyQ29ubmVjdGlvbj1uLl9jcmVhdGVQZWVyQ29ubmVjdGlvbigpKSxuLl9jYWxsZXImJihjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IHdlIGFyZSBpbiBjYWxsZXIgcm9sZSAtLVx4M2UgY3JlYXRlRGF0YUNoYW5uZWwgLi4uIiksbi5fZGF0YUNoYW5uZWw9bi5fcGVlckNvbm5lY3Rpb24uY3JlYXRlRGF0YUNoYW5uZWwoIlAyUENoYW5uZWwiKSxuLl9kYXRhQ2hhbm5lbC5iaW5hcnlUeXBlPSJhcnJheWJ1ZmZlciIsbi5fZGF0YUNoYW5uZWwuYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGQ9bi5fdGhyZXNob2xkLGNvbnNvbGUubG9nKCJQMlA6IGRhdGFjaGFubmVsIG9iamVjdCIsbi5fZGF0YUNoYW5uZWwpLG4uX2FkZERhdGFDaGFubmVsTGlzdGVuZXJzKCkpO3ZhciBpPXtuYW1lOiJQMlBDb25uZWN0aW9uIixzdGF0dXM6IiIsb3duZXI6bi5fbXlVcmwscnVudGltZVVSTDp0LGNvbm5lY3Rpb25EZXNjcmlwdGlvbjp7fSxpY2VDYW5kaWRhdGVzOltdfSxhPU9iamVjdC5hc3NpZ24oe3Jlc291cmNlczpbImRhdGEiXX0pO24uX3N5bmNoZXIuY3JlYXRlKG4uX29iamVjdERlc2NVUkwsW24uX3BlZXJVcmxdLGksITEsITEsInAycCBjb25uZWN0aW9uIix7fSxhKS50aGVuKGZ1bmN0aW9uKHQpe2NvbnNvbGUuaW5mbygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gQ3JlYXRlZCBXZWJSVEMgT2JqZWN0IFJlcG9ydGVyIix0KSxuLl9kYXRhT2JqZWN0UmVwb3J0ZXI9dCxuLl9kYXRhT2JqZWN0UmVwb3J0ZXIub25TdWJzY3JpcHRpb24oZnVuY3Rpb24oZSl7ZS5hY2NlcHQoKX0pOyhuLl9jYWxsZXI/bi5fcGVlckNvbm5lY3Rpb24uY3JlYXRlT2ZmZXIoe29mZmVyVG9SZWNlaXZlQXVkaW86ITEsb2ZmZXJUb1JlY2VpdmVWaWRlbzohMX0pOm4uX3BlZXJDb25uZWN0aW9uLmNyZWF0ZUFuc3dlcigpKS50aGVuKGZ1bmN0aW9uKHQpe2NvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBTRFAgY3JlYXRlZCIsdCksbi5fcGVlckNvbm5lY3Rpb24uc2V0TG9jYWxEZXNjcmlwdGlvbihuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHQpLGZ1bmN0aW9uKCl7Y29uc29sZS5pbmZvKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBsb2NhbERlc2NyaXB0aW9uIHNldCBzdWNjZXNzZnVsbHkiKSxuLl9kYXRhT2JqZWN0UmVwb3J0ZXIuZGF0YS5jb25uZWN0aW9uRGVzY3JpcHRpb24uc2RwPXQuc2RwLG4uX2RhdGFPYmplY3RSZXBvcnRlci5kYXRhLmNvbm5lY3Rpb25EZXNjcmlwdGlvbi50eXBlPXQudHlwZSxlKCl9KS5jYXRjaChmdW5jdGlvbihlKXtyKCJzZXR0aW5nIG9mIGxvY2FsRGVzY3JpcHRpb24gZmFpbGVkOiAiLGUpfSl9KS5jYXRjaChmdW5jdGlvbihlKXtjb25zb2xlLmVycm9yKGUpLHIoZSl9KX0pfSl9fSx7a2V5OiJvbk1lc3NhZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX29uRGF0YUNoYW5uZWxNZXNzYWdlPWV9fSx7a2V5OiJvblN0YXR1c1VwZGF0ZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dGhpcy5fb25TdGF0dXNVcGRhdGU9ZX19LHtrZXk6InNlbmRNZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO2lmKGNvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSAtLVx4M2Ugc3RhcnRpbmcgc2VuZGluZyBkYXRhIHRvICIsZS50byksIm9wZW4iIT10Ll9kYXRhQ2hhbm5lbC5yZWFkeVN0YXRlKXRocm93IEVycm9yKCJbUDJQU3R1Yi5Db25uZWN0aW9uQ29udHJvbGxlci5zZW5kTWVzc2FnZV0gZGF0YSBjaGFubmVsIGlzIG5vdCBvcGVuZWQuIGRyb3BpbmcgbWVzc2FnZTogIixlKTt2YXIgbj1uZXcgYS5hKGUsdC5fZGF0YUNoYW5uZWwpLHI9ZS5mcm9tK2UudG8rZS5pZDt0Ll9zZW5kZXJzW3JdPW4sbi5zZW5kRGF0YSgpLG4ub25Qcm9ncmVzcyhmdW5jdGlvbihlKXtjb25zb2xlLmRlYnVnKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXSBzZW5kaW5nIHByb2dyZXNzICIsZSl9KSxuLm9uU2VudChmdW5jdGlvbigpe2NvbnNvbGUuZGVidWcoIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIGRhdGEgd2FzIHNlbnQgdG86IixlLnRvKSxkZWxldGUgdC5fc2VuZGVyc1tyXX0pfX0se2tleToiY2xlYW51cCIsdmFsdWU6ZnVuY3Rpb24oKXtkZWxldGUgdGhpcy5fZGF0YU9iamVjdFJlcG9ydGVyLGRlbGV0ZSB0aGlzLl9kYXRhT2JqZWN0T2JzZXJ2ZXIsdGhpcy5fZGF0YUNoYW5uZWwmJnRoaXMuX2RhdGFDaGFubmVsLmNsb3NlKCksdGhpcy5fcGVlckNvbm5lY3Rpb24mJnRoaXMuX3BlZXJDb25uZWN0aW9uLmNsb3NlKCksdGhpcy5fZGF0YUNoYW5uZWw9bnVsbCx0aGlzLl9wZWVyQ29ubmVjdGlvbj1udWxsfX0se2tleToiX2FkZERhdGFDaGFubmVsTGlzdGVuZXJzIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5fZGF0YUNoYW5uZWwub25vcGVuPWZ1bmN0aW9uKCl7ZS5fb25EYXRhQ2hhbm5lbE9wZW4oKX0sdGhpcy5fZGF0YUNoYW5uZWwub25lcnJvcj1mdW5jdGlvbih0KXtlLl9vbkRhdGFDaGFubmVsRXJyb3IodCl9LHRoaXMuX2RhdGFDaGFubmVsLm9ubWVzc2FnZT1mdW5jdGlvbih0KXt2YXIgbj1lLHI9dC5kYXRhOyJvYmplY3QiIT1vKHIpP24uX29uVGV4dE1lc3NhZ2Uocik6bi5fb25CaW5hcnlNZXNzYWdlKHIpfSx0aGlzLl9kYXRhQ2hhbm5lbC5vbmNsb3NlPWZ1bmN0aW9uKCl7ZS5fb25EYXRhQ2hhbm5lbENsb3NlKCl9fX0se2tleToiX29uVGV4dE1lc3NhZ2UiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1KU09OLnBhcnNlKGUpO2lmKCFuLnV1aWQpdGhyb3cgRXJyb3IoIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXIub25tZXNzYWdlXSBtZXNzYWdlIGlzIGludmFsaWQiLG4pO2lmKG4uZGF0YS50ZXh0TWVzc2FnZS5oYXNPd25Qcm9wZXJ0eSgidG8iKSYmbi5kYXRhLnRleHRNZXNzYWdlLnRvPT09dC5fbXlVcmwpdC5fb25NeU1lc3NhZ2Uobi5kYXRhLnRleHRNZXNzYWdlKTtlbHNlIGlmKHQuX3JlY2VpdmVyc1tuLnV1aWRdKXQuX3JlY2VpdmVyc1tuLnV1aWRdLnJlY2VpdmVUZXh0KG4pO2Vsc2V7aWYoIW4uZGF0YXx8IW4uZGF0YS50ZXh0TWVzc2FnZXx8IW4uZGF0YS50ZXh0TWVzc2FnZS5mcm9tKXRocm93IEVycm9yKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyLm9ubWVzc2FnZV0gaW5pdGlhbCBwYWNrZXQgaXMgaW52YWxpZCIsbik7aWYoY29uc29sZS5kZWJ1ZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gPC0tIGluY29taW5nIG1zZyA6ICIsbiksMD09PW4uZGF0YS5kYXRhU2l6ZSl7dmFyIHI9bi5kYXRhLnRleHRNZXNzYWdlO3RoaXMuX29uRGF0YUNoYW5uZWxNZXNzYWdlKHIpfWVsc2V7dmFyIGE9bmV3IGkuYShuLmRhdGEpO2Eub25SZWNlaXZlZChmdW5jdGlvbihlLHIpe2NvbnNvbGUuZGVidWcoIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIGNvbXBsZXRlIG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbTogIitlLmZyb20rIiBsYXRlbmN5OiAiK3IpLHQuX29uRGF0YUNoYW5uZWxNZXNzYWdlKGUpLGRlbGV0ZSB0Ll9yZWNlaXZlcnNbbi51dWlkXX0pLGEub25Qcm9ncmVzcyhmdW5jdGlvbihlKXt2YXIgbj17ZnJvbTphLmZyb20sdG86YS50byxpZDphLmlkLHR5cGU6YS50eXBlLGJvZHk6e2NvZGU6MTgzLGRlc2M6Ik1lc3NhZ2UgcmVjZXB0aW9uIGlzIHByb2dyZXNzaW5nIix2YWx1ZTplfX07Y29uc29sZS5kZWJ1ZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gb25wcm9ncmVzcyBzZW5kaW5nIHByb3Zpc2lvbmFsIHJlc3BvbnNlOiAiLG4pLHQuX3N5bmNoZXIuX2J1cy5wb3N0TWVzc2FnZShuKX0pLHQuX3JlY2VpdmVyc1tuLnV1aWRdPWF9fX19LHtrZXk6Il9vbk15TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoZS5oYXNPd25Qcm9wZXJ0eSgiYm9keSIpJiZlLmJvZHkuaGFzT3duUHJvcGVydHkoInJlc291cmNlIikpe3ZhciB0PWUuYm9keS5yZXNvdXJjZTt0aGlzLl9zZW5kZXJzW3RdJiYiZGVsZXRlIj09PWUudHlwZSYmKGNvbnNvbGUubG9nKCJbQ29ubmVjdGlvbkNvbnRyb2xsZXIuX29uTXlNZXNzYWdlXSBjYW5jZWxsaW5nOiAiLHRoaXMuX3NlbmRlcnNbdF0pLHRoaXMuX3NlbmRlcnNbdF0uY2FuY2VsLGRlbGV0ZSB0aGlzLl9zZW5kZXJzW3RdKX19fSx7a2V5OiJfb25CaW5hcnlNZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsbmV3IFVpbnQxNkFycmF5KGUuc2xpY2UoMCwyNCkpKTtpZih0aGlzLl9yZWNlaXZlcnNbdF0pdGhpcy5fcmVjZWl2ZXJzW3RdLnJlY2VpdmVCaW5hcnkoZS5zbGljZSgyNCkpO2Vsc2V7dmFyIG49T2JqZWN0LmtleXModGhpcy5fcmVjZWl2ZXJzKTtpZigxIT09bi5sZW5ndGgpdGhyb3cgRXJyb3IoIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXIub25CaW5hcnlNZXNzYWdlXSBpbnZhbGlkIGJpbmFyeSBwYWNrZXQiLGUpO3ZhciByPW5bMF0saT17ZnJvbTp0aGlzLl9yZWNlaXZlcnNbcl0uZnJvbSx0bzp0aGlzLl9yZWNlaXZlcnNbcl0udG8saWQ6dGhpcy5fcmVjZWl2ZXJzW3JdLmlkLHR5cGU6dGhpcy5fcmVjZWl2ZXJzW3JdLnR5cGUsYm9keTp7Y29kZTo1MDAsZGVzYzoiUmVjZXB0aW9uIGVycm9yIn19O2NvbnNvbGUuZXJyb3IoIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXIub25CaW5hcnlNZXNzYWdlXSBtYWxmb3JtZWQgcGFja2V0OiAiLGUpLHRoaXMuX3N5bmNoZXIuX2J1cy5wb3N0TWVzc2FnZShpKSx0aGlzLl9jYW5jZWxTZW50KGkuZnJvbStpLnRvK2kuaWQpLGRlbGV0ZSB0aGlzLl9yZWNlaXZlcnNbcl19fX0se2tleToiX2NhbmNlbFNlbnQiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXtmcm9tOnRoaXMuX215VXJsLHRvOnRoaXMuX3BlZXJVcmwsdHlwZToiZGVsZXRlIixib2R5OntyZXNvdXJjZTplfX07Y29uc29sZS5pbmZvKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyLl9jYW5jZWxTZW50XSA6ICIsdCksdGhpcy5zZW5kTWVzc2FnZSh0KX19LHtrZXk6Il9zZXR1cE9ic2VydmVyIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuX2RhdGFPYmplY3RPYnNlcnZlcj1lO3ZhciBuPXRoaXMuX2RhdGFPYmplY3RPYnNlcnZlci5kYXRhO2NvbnNvbGUuaW5mbygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IF9zZXR1cE9ic2VydmVyIFBlZXIgRGF0YTogIixuKSxuLmhhc093blByb3BlcnR5KCJjb25uZWN0aW9uRGVzY3JpcHRpb24iKSYmdGhpcy5fcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbihuLmNvbm5lY3Rpb25EZXNjcmlwdGlvbiksbi5oYXNPd25Qcm9wZXJ0eSgiaWNlQ2FuZGlkYXRlcyIpJiZuLmljZUNhbmRpZGF0ZXMuZm9yRWFjaChmdW5jdGlvbihlKXtjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IGhhbmRsZU9ic2VydmVyT2JqZWN0IGZvciBpY2UiLGUpLHQuX3Byb2Nlc3NQZWVySW5mb3JtYXRpb24oZSl9KSxlLm9uQ2hhbmdlKCIqIixmdW5jdGlvbihlKXtjb25zb2xlLmRlYnVnKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogT2JzZXJ2ZXIgb24gY2hhbmdlIG1lc3NhZ2U6ICIsZSksZS5kYXRhWzBdPyhjb25zb2xlLmxvZygiPj5ldmVudC5kYXRhWzBdIixlLmRhdGFbMF0pLHQuX3Byb2Nlc3NQZWVySW5mb3JtYXRpb24oZS5kYXRhWzBdKSk6KGNvbnNvbGUubG9nKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogPj5ldmVudCIsZSksdC5fcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbihlLmRhdGEpKX0pfX0se2tleToiX3Byb2Nlc3NQZWVySW5mb3JtYXRpb24iLHZhbHVlOmZ1bmN0aW9uKGUpe2NvbnNvbGUuaW5mbygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IHByb2Nlc3NQZWVySW5mb3JtYXRpb246ICIsSlNPTi5zdHJpbmdpZnkoZSkpLHRoaXMuX3BlZXJDb25uZWN0aW9uPygib2ZmZXIiIT09ZS50eXBlJiYiYW5zd2VyIiE9PWUudHlwZXx8KGNvbnNvbGUuaW5mbygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl06IFByb2Nlc3MgQ29ubmVjdGlvbiBEZXNjcmlwdGlvbjogIixlKSx0aGlzLl9wZWVyQ29ubmVjdGlvbi5zZXRSZW1vdGVEZXNjcmlwdGlvbihuZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKGUpKS50aGVuKGZ1bmN0aW9uKCl7Y29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiByZW1vdGUgc3VjY2VzcyIpfSkuY2F0Y2goZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdOiByZW1vdGUgZXJyb3I6ICIsZSl9KSksZS5jYW5kaWRhdGUmJihjb25zb2xlLmluZm8oIlByb2Nlc3MgSWNlIENhbmRpZGF0ZTogIixlKSx0aGlzLl9wZWVyQ29ubmVjdGlvbi5hZGRJY2VDYW5kaWRhdGUobmV3IFJUQ0ljZUNhbmRpZGF0ZSh7Y2FuZGlkYXRlOmUuY2FuZGlkYXRlfSkpKSk6Y29uc29sZS5pbmZvKCJbUDJQLUNvbm5lY3Rpb25Db250cm9sbGVyXTogcHJvY2Vzc1BlZXJJbmZvcm1hdGlvbjogbm8gUGVlckNvbm5lY3Rpb24gZXhpc3RpbmcgLS1ceDNlIG1heWJlIGluIGRpc2Nvbm5lY3RpbmcgcHJvY2Vzcy4gLS1ceDNlIGlnbm9yaW5nIHRoaXMgdXBkYXRlIil9fSx7a2V5OiJfb25EYXRhQ2hhbm5lbE9wZW4iLHZhbHVlOmZ1bmN0aW9uKCl7Y29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIERhdGFDaGFubmVsIG9wZW5lZCIpLHRoaXMuX29uU3RhdHVzVXBkYXRlJiZ0aGlzLl9vblN0YXR1c1VwZGF0ZSgibGl2ZSIsdm9pZCAwLHRoaXMuX3JlbW90ZVJ1bnRpbWVVUkwpfX0se2tleToiX29uRGF0YUNoYW5uZWxFcnJvciIsdmFsdWU6ZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coIltQMlAtQ29ubmVjdGlvbkNvbnRyb2xsZXJdIERhdGFDaGFubmVsIGVycm9yOiAiLGUpLHRoaXMuX29uU3RhdHVzVXBkYXRlJiZ0aGlzLl9vblN0YXR1c1VwZGF0ZSgiZGlzY29ubmVjdGVkIiwiIitlLHRoaXMuX3JlbW90ZVJ1bnRpbWVVUkwpfX0se2tleToiX29uRGF0YUNoYW5uZWxDbG9zZSIsdmFsdWU6ZnVuY3Rpb24oKXtjb25zb2xlLmxvZygiW1AyUC1Db25uZWN0aW9uQ29udHJvbGxlcl0gRGF0YUNoYW5uZWwgY2xvc2VkOiAiKSx0aGlzLl9vblN0YXR1c1VwZGF0ZSYmdGhpcy5fb25TdGF0dXNVcGRhdGUoImRpc2Nvbm5lY3RlZCIsImNsb3NlZCIsdGhpcy5fcmVtb3RlUnVudGltZVVSTCl9fSx7a2V5OiJfZGl2aWRlVVJMIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD1lLnJlcGxhY2UoLyhbYS16QS1aLV0qKTpcL1wvKD86XC4pPyhbLWEtekEtWjAtOUA6JS5fXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1wrfiM9XC9dKikvZ2ksIiQxLCQyLCQzIikuc3BsaXQoIiwiKTtyZXR1cm4gdFswXT09PWUmJih0WzBdPSJodHRwcyIsdFsxXT1lKSx7dHlwZTp0WzBdLGRvbWFpbjp0WzFdLGlkZW50aXR5OnRbMl19fX1dKSxlfSgpO3QuYT1jfSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiOyFmdW5jdGlvbigpe3ZhciB0PW4oMCkscj10LmxvZyxpPXQuYnJvd3NlckRldGFpbHM7ZS5leHBvcnRzLmJyb3dzZXJEZXRhaWxzPWksZS5leHBvcnRzLmV4dHJhY3RWZXJzaW9uPXQuZXh0cmFjdFZlcnNpb24sZS5leHBvcnRzLmRpc2FibGVMb2c9dC5kaXNhYmxlTG9nO3ZhciBhPW4oNCl8fG51bGwsbz1uKDYpfHxudWxsLHM9bigxMCl8fG51bGwsYz1uKDEyKXx8bnVsbDtzd2l0Y2goaS5icm93c2VyKXtjYXNlImNocm9tZSI6aWYoIWF8fCFhLnNoaW1QZWVyQ29ubmVjdGlvbilyZXR1cm4gdm9pZCByKCJDaHJvbWUgc2hpbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBhZGFwdGVyIHJlbGVhc2UuIik7cigiYWRhcHRlci5qcyBzaGltbWluZyBjaHJvbWUuIiksZS5leHBvcnRzLmJyb3dzZXJTaGltPWEsYS5zaGltR2V0VXNlck1lZGlhKCksYS5zaGltTWVkaWFTdHJlYW0oKSx0LnNoaW1DcmVhdGVPYmplY3RVUkwoKSxhLnNoaW1Tb3VyY2VPYmplY3QoKSxhLnNoaW1QZWVyQ29ubmVjdGlvbigpLGEuc2hpbU9uVHJhY2soKSxhLnNoaW1HZXRTZW5kZXJzV2l0aER0bWYoKTticmVhaztjYXNlImZpcmVmb3giOmlmKCFzfHwhcy5zaGltUGVlckNvbm5lY3Rpb24pcmV0dXJuIHZvaWQgcigiRmlyZWZveCBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4iKTtyKCJhZGFwdGVyLmpzIHNoaW1taW5nIGZpcmVmb3guIiksZS5leHBvcnRzLmJyb3dzZXJTaGltPXMscy5zaGltR2V0VXNlck1lZGlhKCksdC5zaGltQ3JlYXRlT2JqZWN0VVJMKCkscy5zaGltU291cmNlT2JqZWN0KCkscy5zaGltUGVlckNvbm5lY3Rpb24oKSxzLnNoaW1PblRyYWNrKCk7YnJlYWs7Y2FzZSJlZGdlIjppZighb3x8IW8uc2hpbVBlZXJDb25uZWN0aW9uKXJldHVybiB2b2lkIHIoIk1TIGVkZ2Ugc2hpbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhpcyBhZGFwdGVyIHJlbGVhc2UuIik7cigiYWRhcHRlci5qcyBzaGltbWluZyBlZGdlLiIpLGUuZXhwb3J0cy5icm93c2VyU2hpbT1vLG8uc2hpbUdldFVzZXJNZWRpYSgpLHQuc2hpbUNyZWF0ZU9iamVjdFVSTCgpLG8uc2hpbVBlZXJDb25uZWN0aW9uKCksby5zaGltUmVwbGFjZVRyYWNrKCk7YnJlYWs7Y2FzZSJzYWZhcmkiOmlmKCFjKXJldHVybiB2b2lkIHIoIlNhZmFyaSBzaGltIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGlzIGFkYXB0ZXIgcmVsZWFzZS4iKTtyKCJhZGFwdGVyLmpzIHNoaW1taW5nIHNhZmFyaS4iKSxlLmV4cG9ydHMuYnJvd3NlclNoaW09YyxjLnNoaW1DYWxsYmFja3NBUEkoKSxjLnNoaW1BZGRTdHJlYW0oKSxjLnNoaW1PbkFkZFN0cmVhbSgpLGMuc2hpbUdldFVzZXJNZWRpYSgpO2JyZWFrO2RlZmF1bHQ6cigiVW5zdXBwb3J0ZWQgYnJvd3NlciEiKX19KCl9LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigwKS5sb2csaT1uKDApLmJyb3dzZXJEZXRhaWxzLGE9e3NoaW1NZWRpYVN0cmVhbTpmdW5jdGlvbigpe3dpbmRvdy5NZWRpYVN0cmVhbT13aW5kb3cuTWVkaWFTdHJlYW18fHdpbmRvdy53ZWJraXRNZWRpYVN0cmVhbX0sc2hpbU9uVHJhY2s6ZnVuY3Rpb24oKXsib2JqZWN0IiE9dHlwZW9mIHdpbmRvd3x8IXdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbnx8Im9udHJhY2siaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsIm9udHJhY2siLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb250cmFja30sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5fb250cmFjayYmKHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigidHJhY2siLHRoaXMuX29udHJhY2spLHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYWRkc3RyZWFtIix0aGlzLl9vbnRyYWNrcG9seSkpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigidHJhY2siLHRoaXMuX29udHJhY2s9ZSksdGhpcy5hZGRFdmVudExpc3RlbmVyKCJhZGRzdHJlYW0iLHRoaXMuX29udHJhY2twb2x5PWZ1bmN0aW9uKGUpe2Uuc3RyZWFtLmFkZEV2ZW50TGlzdGVuZXIoImFkZHRyYWNrIixmdW5jdGlvbihuKXt2YXIgcjtyPVJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRSZWNlaXZlcnM/dC5nZXRSZWNlaXZlcnMoKS5maW5kKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRyYWNrLmlkPT09bi50cmFjay5pZH0pOnt0cmFjazpuLnRyYWNrfTt2YXIgaT1uZXcgRXZlbnQoInRyYWNrIik7aS50cmFjaz1uLnRyYWNrLGkucmVjZWl2ZXI9cixpLnN0cmVhbXM9W2Uuc3RyZWFtXSx0LmRpc3BhdGNoRXZlbnQoaSl9KSxlLnN0cmVhbS5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe3ZhciByO3I9UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlY2VpdmVycz90LmdldFJlY2VpdmVycygpLmZpbmQoZnVuY3Rpb24oZSl7cmV0dXJuIGUudHJhY2suaWQ9PT1uLmlkfSk6e3RyYWNrOm59O3ZhciBpPW5ldyBFdmVudCgidHJhY2siKTtpLnRyYWNrPW4saS5yZWNlaXZlcj1yLGkuc3RyZWFtcz1bZS5zdHJlYW1dLHRoaXMuZGlzcGF0Y2hFdmVudChpKX0uYmluZCh0aGlzKSl9LmJpbmQodGhpcykpfX0pfSxzaGltR2V0U2VuZGVyc1dpdGhEdG1mOmZ1bmN0aW9uKCl7aWYoIm9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiYmISgiZ2V0U2VuZGVycyJpbiBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpJiYiY3JlYXRlRFRNRlNlbmRlciJpbiBSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUpe1JUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRTZW5kZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NlbmRlcnN8fFtdfTt2YXIgZT1SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkU3RyZWFtLHQ9UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLnJlbW92ZVN0cmVhbTtSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2t8fChSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuYWRkVHJhY2s9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2lmKCJjbG9zZWQiPT09bi5zaWduYWxpbmdTdGF0ZSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJUaGUgUlRDUGVlckNvbm5lY3Rpb24ncyBzaWduYWxpbmdTdGF0ZSBpcyAnY2xvc2VkJy4iLCJJbnZhbGlkU3RhdGVFcnJvciIpO3ZhciByPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO2lmKDEhPT1yLmxlbmd0aHx8IXJbMF0uZ2V0VHJhY2tzKCkuZmluZChmdW5jdGlvbih0KXtyZXR1cm4gdD09PWV9KSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJUaGUgYWRhcHRlci5qcyBhZGRUcmFjayBwb2x5ZmlsbCBvbmx5IHN1cHBvcnRzIGEgc2luZ2xlICBzdHJlYW0gd2hpY2ggaXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBzcGVjaWZpZWQgdHJhY2suIiwiTm90U3VwcG9ydGVkRXJyb3IiKTtpZihuLl9zZW5kZXJzPW4uX3NlbmRlcnN8fFtdLG4uX3NlbmRlcnMuZmluZChmdW5jdGlvbih0KXtyZXR1cm4gdC50cmFjaz09PWV9KSl0aHJvdyBuZXcgRE9NRXhjZXB0aW9uKCJUcmFjayBhbHJlYWR5IGV4aXN0cy4iLCJJbnZhbGlkQWNjZXNzRXJyb3IiKTtuLl9zdHJlYW1zPW4uX3N0cmVhbXN8fHt9O3ZhciBpPW4uX3N0cmVhbXNbdC5pZF07aWYoaSlpLmFkZFRyYWNrKGUpLG4ucmVtb3ZlU3RyZWFtKGkpLG4uYWRkU3RyZWFtKGkpO2Vsc2V7dmFyIGE9bmV3IE1lZGlhU3RyZWFtKFtlXSk7bi5fc3RyZWFtc1t0LmlkXT1hLG4uYWRkU3RyZWFtKGEpfXZhciBvPXt0cmFjazplLGdldCBkdG1mKCl7cmV0dXJuIHZvaWQgMD09PXRoaXMuX2R0bWYmJigiYXVkaW8iPT09ZS5raW5kP3RoaXMuX2R0bWY9bi5jcmVhdGVEVE1GU2VuZGVyKGUpOnRoaXMuX2R0bWY9bnVsbCksdGhpcy5fZHRtZn19O3JldHVybiBuLl9zZW5kZXJzLnB1c2gobyksb30pLFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW09ZnVuY3Rpb24odCl7dmFyIG49dGhpcztuLl9zZW5kZXJzPW4uX3NlbmRlcnN8fFtdLGUuYXBwbHkobixbdF0pLHQuZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbihlKXtuLl9zZW5kZXJzLnB1c2goe3RyYWNrOmUsZ2V0IGR0bWYoKXtyZXR1cm4gdm9pZCAwPT09dGhpcy5fZHRtZiYmKCJhdWRpbyI9PT1lLmtpbmQ/dGhpcy5fZHRtZj1uLmNyZWF0ZURUTUZTZW5kZXIoZSk6dGhpcy5fZHRtZj1udWxsKSx0aGlzLl9kdG1mfX0pfSl9LFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5yZW1vdmVTdHJlYW09ZnVuY3Rpb24oZSl7dmFyIG49dGhpcztuLl9zZW5kZXJzPW4uX3NlbmRlcnN8fFtdLHQuYXBwbHkobixbZV0pLGUuZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1uLl9zZW5kZXJzLmZpbmQoZnVuY3Rpb24odCl7cmV0dXJuIHQudHJhY2s9PT1lfSk7dCYmbi5fc2VuZGVycy5zcGxpY2Uobi5fc2VuZGVycy5pbmRleE9mKHQpLDEpfSl9fX0sc2hpbVNvdXJjZU9iamVjdDpmdW5jdGlvbigpeyJvYmplY3QiPT10eXBlb2Ygd2luZG93JiYoIXdpbmRvdy5IVE1MTWVkaWFFbGVtZW50fHwic3JjT2JqZWN0ImluIHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5IVE1MTWVkaWFFbGVtZW50LnByb3RvdHlwZSwic3JjT2JqZWN0Iix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3NyY09iamVjdH0sc2V0OmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXM7dGhpcy5fc3JjT2JqZWN0PWUsdGhpcy5zcmMmJlVSTC5yZXZva2VPYmplY3RVUkwodGhpcy5zcmMpLGU/KHRoaXMuc3JjPVVSTC5jcmVhdGVPYmplY3RVUkwoZSksZS5hZGRFdmVudExpc3RlbmVyKCJhZGR0cmFjayIsZnVuY3Rpb24oKXt0LnNyYyYmVVJMLnJldm9rZU9iamVjdFVSTCh0LnNyYyksdC5zcmM9VVJMLmNyZWF0ZU9iamVjdFVSTChlKX0pLGUuYWRkRXZlbnRMaXN0ZW5lcigicmVtb3ZldHJhY2siLGZ1bmN0aW9uKCl7dC5zcmMmJlVSTC5yZXZva2VPYmplY3RVUkwodC5zcmMpLHQuc3JjPVVSTC5jcmVhdGVPYmplY3RVUkwoZSl9KSk6dGhpcy5zcmM9IiJ9fSkpfSxzaGltUGVlckNvbm5lY3Rpb246ZnVuY3Rpb24oKXtpZih3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24pe3ZhciBlPVJUQ1BlZXJDb25uZWN0aW9uO3dpbmRvdy5SVENQZWVyQ29ubmVjdGlvbj1mdW5jdGlvbih0LG4pe2lmKHQmJnQuaWNlU2VydmVycyl7Zm9yKHZhciByPVtdLGk9MDtpPHQuaWNlU2VydmVycy5sZW5ndGg7aSsrKXt2YXIgYT10LmljZVNlcnZlcnNbaV07IWEuaGFzT3duUHJvcGVydHkoInVybHMiKSYmYS5oYXNPd25Qcm9wZXJ0eSgidXJsIik/KGNvbnNvbGUud2FybigiUlRDSWNlU2VydmVyLnVybCBpcyBkZXByZWNhdGVkISBVc2UgdXJscyBpbnN0ZWFkLiIpLChhPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoYSkpKS51cmxzPWEudXJsLHIucHVzaChhKSk6ci5wdXNoKHQuaWNlU2VydmVyc1tpXSl9dC5pY2VTZXJ2ZXJzPXJ9cmV0dXJuIG5ldyBlKHQsbil9LHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGU9ZS5wcm90b3R5cGUsT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiwiZ2VuZXJhdGVDZXJ0aWZpY2F0ZSIse2dldDpmdW5jdGlvbigpe3JldHVybiBlLmdlbmVyYXRlQ2VydGlmaWNhdGV9fSl9ZWxzZSB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb249ZnVuY3Rpb24oZSx0KXtyZXR1cm4gcigiUGVlckNvbm5lY3Rpb24iKSxlJiZlLmljZVRyYW5zcG9ydFBvbGljeSYmKGUuaWNlVHJhbnNwb3J0cz1lLmljZVRyYW5zcG9ydFBvbGljeSksbmV3IHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uKGUsdCl9LHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGU9d2Via2l0UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLHdlYmtpdFJUQ1BlZXJDb25uZWN0aW9uLmdlbmVyYXRlQ2VydGlmaWNhdGUmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24sImdlbmVyYXRlQ2VydGlmaWNhdGUiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gd2Via2l0UlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZX19KTt2YXIgdD1SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM7UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzPWZ1bmN0aW9uKGUsbixyKXt2YXIgaT10aGlzLGE9YXJndW1lbnRzO2lmKGFyZ3VtZW50cy5sZW5ndGg+MCYmImZ1bmN0aW9uIj09dHlwZW9mIGUpcmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKDA9PT10Lmxlbmd0aCYmKDA9PT1hcmd1bWVudHMubGVuZ3RofHwiZnVuY3Rpb24iIT10eXBlb2YgYXJndW1lbnRzWzBdKSlyZXR1cm4gdC5hcHBseSh0aGlzLFtdKTt2YXIgbz1mdW5jdGlvbihlKXt2YXIgdD17fTtyZXR1cm4gZS5yZXN1bHQoKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBuPXtpZDplLmlkLHRpbWVzdGFtcDplLnRpbWVzdGFtcCx0eXBlOntsb2NhbGNhbmRpZGF0ZToibG9jYWwtY2FuZGlkYXRlIixyZW1vdGVjYW5kaWRhdGU6InJlbW90ZS1jYW5kaWRhdGUifVtlLnR5cGVdfHxlLnR5cGV9O2UubmFtZXMoKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe25bdF09ZS5zdGF0KHQpfSksdFtuLmlkXT1ufSksdH0scz1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IE1hcChPYmplY3Qua2V5cyhlKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuW3QsZVt0XV19KSl9O2lmKGFyZ3VtZW50cy5sZW5ndGg+PTIpe3JldHVybiB0LmFwcGx5KHRoaXMsW2Z1bmN0aW9uKGUpe2FbMV0ocyhvKGUpKSl9LGFyZ3VtZW50c1swXV0pfXJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlLG4pe3QuYXBwbHkoaSxbZnVuY3Rpb24odCl7ZShzKG8odCkpKX0sbl0pfSkudGhlbihuLHIpfSxpLnZlcnNpb248NTEmJlsic2V0TG9jYWxEZXNjcmlwdGlvbiIsInNldFJlbW90ZURlc2NyaXB0aW9uIiwiYWRkSWNlQ2FuZGlkYXRlIl0uZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbZV07UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLG49dGhpcyxyPW5ldyBQcm9taXNlKGZ1bmN0aW9uKHIsaSl7dC5hcHBseShuLFtlWzBdLHIsaV0pfSk7cmV0dXJuIGUubGVuZ3RoPDI/cjpyLnRoZW4oZnVuY3Rpb24oKXtlWzFdLmFwcGx5KG51bGwsW10pfSxmdW5jdGlvbih0KXtlLmxlbmd0aD49MyYmZVsyXS5hcHBseShudWxsLFt0XSl9KX19KSxpLnZlcnNpb248NTImJlsiY3JlYXRlT2ZmZXIiLCJjcmVhdGVBbnN3ZXIiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PVJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVtlXTtSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGVbZV09ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKGFyZ3VtZW50cy5sZW5ndGg8MXx8MT09PWFyZ3VtZW50cy5sZW5ndGgmJiJvYmplY3QiPT10eXBlb2YgYXJndW1lbnRzWzBdKXt2YXIgbj0xPT09YXJndW1lbnRzLmxlbmd0aD9hcmd1bWVudHNbMF06dm9pZCAwO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyLGkpe3QuYXBwbHkoZSxbcixpLG5dKX0pfXJldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19KSxbInNldExvY2FsRGVzY3JpcHRpb24iLCJzZXRSZW1vdGVEZXNjcmlwdGlvbiIsImFkZEljZUNhbmRpZGF0ZSJdLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW2VdO1JUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09bmV3KCJhZGRJY2VDYW5kaWRhdGUiPT09ZT9SVENJY2VDYW5kaWRhdGU6UlRDU2Vzc2lvbkRlc2NyaXB0aW9uKShhcmd1bWVudHNbMF0pLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pO3ZhciBuPVJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU7UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF0/bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk6KGFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLmFwcGx5KG51bGwpLFByb21pc2UucmVzb2x2ZSgpKX19fTtlLmV4cG9ydHM9e3NoaW1NZWRpYVN0cmVhbTphLnNoaW1NZWRpYVN0cmVhbSxzaGltT25UcmFjazphLnNoaW1PblRyYWNrLHNoaW1HZXRTZW5kZXJzV2l0aER0bWY6YS5zaGltR2V0U2VuZGVyc1dpdGhEdG1mLHNoaW1Tb3VyY2VPYmplY3Q6YS5zaGltU291cmNlT2JqZWN0LHNoaW1QZWVyQ29ubmVjdGlvbjphLnNoaW1QZWVyQ29ubmVjdGlvbixzaGltR2V0VXNlck1lZGlhOm4oNSl9fSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPW4oMCkubG9nLGk9bigwKS5icm93c2VyRGV0YWlscztlLmV4cG9ydHM9ZnVuY3Rpb24oKXt2YXIgZT1mdW5jdGlvbihlKXtpZigib2JqZWN0IiE9dHlwZW9mIGV8fGUubWFuZGF0b3J5fHxlLm9wdGlvbmFsKXJldHVybiBlO3ZhciB0PXt9O3JldHVybiBPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe2lmKCJyZXF1aXJlIiE9PW4mJiJhZHZhbmNlZCIhPT1uJiYibWVkaWFTb3VyY2UiIT09bil7dmFyIHI9Im9iamVjdCI9PXR5cGVvZiBlW25dP2Vbbl06e2lkZWFsOmVbbl19O3ZvaWQgMCE9PXIuZXhhY3QmJiJudW1iZXIiPT10eXBlb2Ygci5leGFjdCYmKHIubWluPXIubWF4PXIuZXhhY3QpO3ZhciBpPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU/ZSt0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSk6ImRldmljZUlkIj09PXQ/InNvdXJjZUlkIjp0fTtpZih2b2lkIDAhPT1yLmlkZWFsKXt0Lm9wdGlvbmFsPXQub3B0aW9uYWx8fFtdO3ZhciBhPXt9OyJudW1iZXIiPT10eXBlb2Ygci5pZGVhbD8oYVtpKCJtaW4iLG4pXT1yLmlkZWFsLHQub3B0aW9uYWwucHVzaChhKSwoYT17fSlbaSgibWF4IixuKV09ci5pZGVhbCx0Lm9wdGlvbmFsLnB1c2goYSkpOihhW2koIiIsbildPXIuaWRlYWwsdC5vcHRpb25hbC5wdXNoKGEpKX12b2lkIDAhPT1yLmV4YWN0JiYibnVtYmVyIiE9dHlwZW9mIHIuZXhhY3Q/KHQubWFuZGF0b3J5PXQubWFuZGF0b3J5fHx7fSx0Lm1hbmRhdG9yeVtpKCIiLG4pXT1yLmV4YWN0KTpbIm1pbiIsIm1heCJdLmZvckVhY2goZnVuY3Rpb24oZSl7dm9pZCAwIT09cltlXSYmKHQubWFuZGF0b3J5PXQubWFuZGF0b3J5fHx7fSx0Lm1hbmRhdG9yeVtpKGUsbildPXJbZV0pfSl9fSksZS5hZHZhbmNlZCYmKHQub3B0aW9uYWw9KHQub3B0aW9uYWx8fFtdKS5jb25jYXQoZS5hZHZhbmNlZCkpLHR9LHQ9ZnVuY3Rpb24odCxuKXtpZigodD1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHQpKSkmJnQuYXVkaW8mJih0LmF1ZGlvPWUodC5hdWRpbykpLHQmJiJvYmplY3QiPT10eXBlb2YgdC52aWRlbyl7dmFyIGE9dC52aWRlby5mYWNpbmdNb2RlO2E9YSYmKCJvYmplY3QiPT10eXBlb2YgYT9hOntpZGVhbDphfSk7dmFyIG8scz1pLnZlcnNpb248NjE7aWYoYSYmKCJ1c2VyIj09PWEuZXhhY3R8fCJlbnZpcm9ubWVudCI9PT1hLmV4YWN0fHwidXNlciI9PT1hLmlkZWFsfHwiZW52aXJvbm1lbnQiPT09YS5pZGVhbCkmJighbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRTdXBwb3J0ZWRDb25zdHJhaW50c3x8IW5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0U3VwcG9ydGVkQ29uc3RyYWludHMoKS5mYWNpbmdNb2RlfHxzKSlpZihkZWxldGUgdC52aWRlby5mYWNpbmdNb2RlLCJlbnZpcm9ubWVudCI9PT1hLmV4YWN0fHwiZW52aXJvbm1lbnQiPT09YS5pZGVhbD9vPVsiYmFjayIsInJlYXIiXToidXNlciIhPT1hLmV4YWN0JiYidXNlciIhPT1hLmlkZWFsfHwobz1bImZyb250Il0pLG8pcmV0dXJuIG5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlcygpLnRoZW4oZnVuY3Rpb24oaSl7dmFyIHM9KGk9aS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuInZpZGVvaW5wdXQiPT09ZS5raW5kfSkpLmZpbmQoZnVuY3Rpb24oZSl7cmV0dXJuIG8uc29tZShmdW5jdGlvbih0KXtyZXR1cm4tMSE9PWUubGFiZWwudG9Mb3dlckNhc2UoKS5pbmRleE9mKHQpfSl9KTtyZXR1cm4hcyYmaS5sZW5ndGgmJi0xIT09by5pbmRleE9mKCJiYWNrIikmJihzPWlbaS5sZW5ndGgtMV0pLHMmJih0LnZpZGVvLmRldmljZUlkPWEuZXhhY3Q/e2V4YWN0OnMuZGV2aWNlSWR9OntpZGVhbDpzLmRldmljZUlkfSksdC52aWRlbz1lKHQudmlkZW8pLHIoImNocm9tZTogIitKU09OLnN0cmluZ2lmeSh0KSksbih0KX0pO3QudmlkZW89ZSh0LnZpZGVvKX1yZXR1cm4gcigiY2hyb21lOiAiK0pTT04uc3RyaW5naWZ5KHQpKSxuKHQpfSxuPWZ1bmN0aW9uKGUpe3JldHVybntuYW1lOntDb25zdHJhaW50Tm90U2F0aXNmaWVkRXJyb3I6Ik92ZXJjb25zdHJhaW5lZEVycm9yIixQZXJtaXNzaW9uRGVuaWVkRXJyb3I6Ik5vdEFsbG93ZWRFcnJvciIsVHJhY2tTdGFydEVycm9yOiJOb3RSZWFkYWJsZUVycm9yIn1bZS5uYW1lXXx8ZS5uYW1lLG1lc3NhZ2U6ZS5tZXNzYWdlLGNvbnN0cmFpbnQ6ZS5jb25zdHJhaW50TmFtZSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWUrKHRoaXMubWVzc2FnZSYmIjogIikrdGhpcy5tZXNzYWdlfX19O25hdmlnYXRvci5nZXRVc2VyTWVkaWE9ZnVuY3Rpb24oZSxyLGkpe3QoZSxmdW5jdGlvbihlKXtuYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhKGUscixmdW5jdGlvbihlKXtpKG4oZSkpfSl9KX07dmFyIGE9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsbil7bmF2aWdhdG9yLmdldFVzZXJNZWRpYShlLHQsbil9KX07aWYobmF2aWdhdG9yLm1lZGlhRGV2aWNlc3x8KG5hdmlnYXRvci5tZWRpYURldmljZXM9e2dldFVzZXJNZWRpYTphLGVudW1lcmF0ZURldmljZXM6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSl7dmFyIHQ9e2F1ZGlvOiJhdWRpb2lucHV0Iix2aWRlbzoidmlkZW9pbnB1dCJ9O3JldHVybiBNZWRpYVN0cmVhbVRyYWNrLmdldFNvdXJjZXMoZnVuY3Rpb24obil7ZShuLm1hcChmdW5jdGlvbihlKXtyZXR1cm57bGFiZWw6ZS5sYWJlbCxraW5kOnRbZS5raW5kXSxkZXZpY2VJZDplLmlkLGdyb3VwSWQ6IiJ9fSkpfSl9KX0sZ2V0U3VwcG9ydGVkQ29uc3RyYWludHM6ZnVuY3Rpb24oKXtyZXR1cm57ZGV2aWNlSWQ6ITAsZWNob0NhbmNlbGxhdGlvbjohMCxmYWNpbmdNb2RlOiEwLGZyYW1lUmF0ZTohMCxoZWlnaHQ6ITAsd2lkdGg6ITB9fX0pLG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKXt2YXIgbz1uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYS5iaW5kKG5hdmlnYXRvci5tZWRpYURldmljZXMpO25hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhPWZ1bmN0aW9uKGUpe3JldHVybiB0KGUsZnVuY3Rpb24oZSl7cmV0dXJuIG8oZSkudGhlbihmdW5jdGlvbih0KXtpZihlLmF1ZGlvJiYhdC5nZXRBdWRpb1RyYWNrcygpLmxlbmd0aHx8ZS52aWRlbyYmIXQuZ2V0VmlkZW9UcmFja3MoKS5sZW5ndGgpdGhyb3cgdC5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2Uuc3RvcCgpfSksbmV3IERPTUV4Y2VwdGlvbigiIiwiTm90Rm91bmRFcnJvciIpO3JldHVybiB0fSxmdW5jdGlvbihlKXtyZXR1cm4gUHJvbWlzZS5yZWplY3QobihlKSl9KX0pfX1lbHNlIG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhPWZ1bmN0aW9uKGUpe3JldHVybiBhKGUpfTt2b2lkIDA9PT1uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmFkZEV2ZW50TGlzdGVuZXImJihuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oKXtyKCJEdW1teSBtZWRpYURldmljZXMuYWRkRXZlbnRMaXN0ZW5lciBjYWxsZWQuIil9KSx2b2lkIDA9PT1uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLnJlbW92ZUV2ZW50TGlzdGVuZXImJihuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24oKXtyKCJEdW1teSBtZWRpYURldmljZXMucmVtb3ZlRXZlbnRMaXN0ZW5lciBjYWxsZWQuIil9KX19LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9bigwKS5icm93c2VyRGV0YWlscyxpPW4oNyk7ZS5leHBvcnRzPXtzaGltR2V0VXNlck1lZGlhOm4oOSksc2hpbVBlZXJDb25uZWN0aW9uOmZ1bmN0aW9uKCl7aWYod2luZG93LlJUQ0ljZUdhdGhlcmVyJiYod2luZG93LlJUQ0ljZUNhbmRpZGF0ZXx8KHdpbmRvdy5SVENJY2VDYW5kaWRhdGU9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9KSx3aW5kb3cuUlRDU2Vzc2lvbkRlc2NyaXB0aW9ufHwod2luZG93LlJUQ1Nlc3Npb25EZXNjcmlwdGlvbj1mdW5jdGlvbihlKXtyZXR1cm4gZX0pLHIudmVyc2lvbjwxNTAyNSkpe3ZhciBlPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUsImVuYWJsZWQiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWFTdHJlYW1UcmFjay5wcm90b3R5cGUsImVuYWJsZWQiLHtzZXQ6ZnVuY3Rpb24odCl7ZS5zZXQuY2FsbCh0aGlzLHQpO3ZhciBuPW5ldyBFdmVudCgiZW5hYmxlZCIpO24uZW5hYmxlZD10LHRoaXMuZGlzcGF0Y2hFdmVudChuKX19KX13aW5kb3cuUlRDUGVlckNvbm5lY3Rpb249aShyLnZlcnNpb24pfSxzaGltUmVwbGFjZVRyYWNrOmZ1bmN0aW9uKCl7IXdpbmRvdy5SVENSdHBTZW5kZXJ8fCJyZXBsYWNlVHJhY2siaW4gUlRDUnRwU2VuZGVyLnByb3RvdHlwZXx8KFJUQ1J0cFNlbmRlci5wcm90b3R5cGUucmVwbGFjZVRyYWNrPVJUQ1J0cFNlbmRlci5wcm90b3R5cGUuc2V0VHJhY2spfX19LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7dmFyIHI9big4KTtmdW5jdGlvbiBpKGUsdCl7dmFyIG49e2NvZGVjczpbXSxoZWFkZXJFeHRlbnNpb25zOltdLGZlY01lY2hhbmlzbXM6W119LHI9ZnVuY3Rpb24oZSx0KXtlPXBhcnNlSW50KGUsMTApO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKWlmKHRbbl0ucGF5bG9hZFR5cGU9PT1lfHx0W25dLnByZWZlcnJlZFBheWxvYWRUeXBlPT09ZSlyZXR1cm4gdFtuXX0saT1mdW5jdGlvbihlLHQsbixpKXt2YXIgYT1yKGUucGFyYW1ldGVycy5hcHQsbiksbz1yKHQucGFyYW1ldGVycy5hcHQsaSk7cmV0dXJuIGEmJm8mJmEubmFtZS50b0xvd2VyQ2FzZSgpPT09by5uYW1lLnRvTG93ZXJDYXNlKCl9O3JldHVybiBlLmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKHIpe2Zvcih2YXIgYT0wO2E8dC5jb2RlY3MubGVuZ3RoO2ErKyl7dmFyIG89dC5jb2RlY3NbYV07aWYoci5uYW1lLnRvTG93ZXJDYXNlKCk9PT1vLm5hbWUudG9Mb3dlckNhc2UoKSYmci5jbG9ja1JhdGU9PT1vLmNsb2NrUmF0ZSl7aWYoInJ0eCI9PT1yLm5hbWUudG9Mb3dlckNhc2UoKSYmci5wYXJhbWV0ZXJzJiZvLnBhcmFtZXRlcnMuYXB0JiYhaShyLG8sZS5jb2RlY3MsdC5jb2RlY3MpKWNvbnRpbnVlOyhvPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkobykpKS5udW1DaGFubmVscz1NYXRoLm1pbihyLm51bUNoYW5uZWxzLG8ubnVtQ2hhbm5lbHMpLG4uY29kZWNzLnB1c2gobyksby5ydGNwRmVlZGJhY2s9by5ydGNwRmVlZGJhY2suZmlsdGVyKGZ1bmN0aW9uKGUpe2Zvcih2YXIgdD0wO3Q8ci5ydGNwRmVlZGJhY2subGVuZ3RoO3QrKylpZihyLnJ0Y3BGZWVkYmFja1t0XS50eXBlPT09ZS50eXBlJiZyLnJ0Y3BGZWVkYmFja1t0XS5wYXJhbWV0ZXI9PT1lLnBhcmFtZXRlcilyZXR1cm4hMDtyZXR1cm4hMX0pO2JyZWFrfX19KSxlLmhlYWRlckV4dGVuc2lvbnMuZm9yRWFjaChmdW5jdGlvbihlKXtmb3IodmFyIHI9MDtyPHQuaGVhZGVyRXh0ZW5zaW9ucy5sZW5ndGg7cisrKXt2YXIgaT10LmhlYWRlckV4dGVuc2lvbnNbcl07aWYoZS51cmk9PT1pLnVyaSl7bi5oZWFkZXJFeHRlbnNpb25zLnB1c2goaSk7YnJlYWt9fX0pLG59ZnVuY3Rpb24gYShlLHQsbil7cmV0dXJuLTEhPT17b2ZmZXI6e3NldExvY2FsRGVzY3JpcHRpb246WyJzdGFibGUiLCJoYXZlLWxvY2FsLW9mZmVyIl0sc2V0UmVtb3RlRGVzY3JpcHRpb246WyJzdGFibGUiLCJoYXZlLXJlbW90ZS1vZmZlciJdfSxhbnN3ZXI6e3NldExvY2FsRGVzY3JpcHRpb246WyJoYXZlLXJlbW90ZS1vZmZlciIsImhhdmUtbG9jYWwtcHJhbnN3ZXIiXSxzZXRSZW1vdGVEZXNjcmlwdGlvbjpbImhhdmUtbG9jYWwtb2ZmZXIiLCJoYXZlLXJlbW90ZS1wcmFuc3dlciJdfX1bdF1bZV0uaW5kZXhPZihuKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24odCl7dmFyIG49dGhpcyxyPWRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtpZihbImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCJdLmZvckVhY2goZnVuY3Rpb24oZSl7bltlXT1yW2VdLmJpbmQocil9KSx0aGlzLm5lZWROZWdvdGlhdGlvbj0hMSx0aGlzLm9uaWNlY2FuZGlkYXRlPW51bGwsdGhpcy5vbmFkZHN0cmVhbT1udWxsLHRoaXMub250cmFjaz1udWxsLHRoaXMub25yZW1vdmVzdHJlYW09bnVsbCx0aGlzLm9uc2lnbmFsaW5nc3RhdGVjaGFuZ2U9bnVsbCx0aGlzLm9uaWNlY29ubmVjdGlvbnN0YXRlY2hhbmdlPW51bGwsdGhpcy5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlPW51bGwsdGhpcy5vbm5lZ290aWF0aW9ubmVlZGVkPW51bGwsdGhpcy5vbmRhdGFjaGFubmVsPW51bGwsdGhpcy5jYW5Ucmlja2xlSWNlQ2FuZGlkYXRlcz1udWxsLHRoaXMubG9jYWxTdHJlYW1zPVtdLHRoaXMucmVtb3RlU3RyZWFtcz1bXSx0aGlzLmdldExvY2FsU3RyZWFtcz1mdW5jdGlvbigpe3JldHVybiBuLmxvY2FsU3RyZWFtc30sdGhpcy5nZXRSZW1vdGVTdHJlYW1zPWZ1bmN0aW9uKCl7cmV0dXJuIG4ucmVtb3RlU3RyZWFtc30sdGhpcy5sb2NhbERlc2NyaXB0aW9uPW5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe3R5cGU6IiIsc2RwOiIifSksdGhpcy5yZW1vdGVEZXNjcmlwdGlvbj1uZXcgUlRDU2Vzc2lvbkRlc2NyaXB0aW9uKHt0eXBlOiIiLHNkcDoiIn0pLHRoaXMuc2lnbmFsaW5nU3RhdGU9InN0YWJsZSIsdGhpcy5pY2VDb25uZWN0aW9uU3RhdGU9Im5ldyIsdGhpcy5pY2VHYXRoZXJpbmdTdGF0ZT0ibmV3Iix0aGlzLmljZU9wdGlvbnM9e2dhdGhlclBvbGljeToiYWxsIixpY2VTZXJ2ZXJzOltdfSx0JiZ0LmljZVRyYW5zcG9ydFBvbGljeSlzd2l0Y2godC5pY2VUcmFuc3BvcnRQb2xpY3kpe2Nhc2UiYWxsIjpjYXNlInJlbGF5Ijp0aGlzLmljZU9wdGlvbnMuZ2F0aGVyUG9saWN5PXQuaWNlVHJhbnNwb3J0UG9saWN5fXRoaXMudXNpbmdCdW5kbGU9dCYmIm1heC1idW5kbGUiPT09dC5idW5kbGVQb2xpY3ksdCYmdC5pY2VTZXJ2ZXJzJiYodGhpcy5pY2VPcHRpb25zLmljZVNlcnZlcnM9ZnVuY3Rpb24oZSx0KXt2YXIgbj0hMTtyZXR1cm4oZT1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGUpKSkuZmlsdGVyKGZ1bmN0aW9uKGUpe2lmKGUmJihlLnVybHN8fGUudXJsKSl7dmFyIHI9ZS51cmxzfHxlLnVybDtlLnVybCYmIWUudXJscyYmY29uc29sZS53YXJuKCJSVENJY2VTZXJ2ZXIudXJsIGlzIGRlcHJlY2F0ZWQhIFVzZSB1cmxzIGluc3RlYWQuIik7dmFyIGk9InN0cmluZyI9PXR5cGVvZiByO3JldHVybiBpJiYocj1bcl0pLHI9ci5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIDAhPT1lLmluZGV4T2YoInR1cm46Iil8fC0xPT09ZS5pbmRleE9mKCJ0cmFuc3BvcnQ9dWRwIil8fC0xIT09ZS5pbmRleE9mKCJ0dXJuOlsiKXx8bj8wPT09ZS5pbmRleE9mKCJzdHVuOiIpJiZ0Pj0xNDM5Mzoobj0hMCwhMCl9KSxkZWxldGUgZS51cmwsZS51cmxzPWk/clswXTpyLCEhci5sZW5ndGh9cmV0dXJuITF9KX0odC5pY2VTZXJ2ZXJzLGUpKSx0aGlzLl9jb25maWc9dHx8e30sdGhpcy50cmFuc2NlaXZlcnM9W10sdGhpcy5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyPVtdfTtyZXR1cm4gdC5wcm90b3R5cGUuX2VtaXRHYXRoZXJpbmdTdGF0ZUNoYW5nZT1mdW5jdGlvbigpe3ZhciBlPW5ldyBFdmVudCgiaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UiKTt0aGlzLmRpc3BhdGNoRXZlbnQoZSksbnVsbCE9PXRoaXMub25pY2VnYXRoZXJpbmdzdGF0ZWNoYW5nZSYmdGhpcy5vbmljZWdhdGhlcmluZ3N0YXRlY2hhbmdlKGUpfSx0LnByb3RvdHlwZS5fZW1pdEJ1ZmZlcmVkQ2FuZGlkYXRlcz1mdW5jdGlvbigpe3ZhciBlPXRoaXMsdD1yLnNwbGl0U2VjdGlvbnMoZS5sb2NhbERlc2NyaXB0aW9uLnNkcCk7dGhpcy5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyLmZvckVhY2goZnVuY3Rpb24obil7aWYoIW4uY2FuZGlkYXRlfHwwPT09T2JqZWN0LmtleXMobi5jYW5kaWRhdGUpLmxlbmd0aClmb3IodmFyIHI9MTtyPHQubGVuZ3RoO3IrKyktMT09PXRbcl0uaW5kZXhPZigiXHJcbmE9ZW5kLW9mLWNhbmRpZGF0ZXNcclxuIikmJih0W3JdKz0iYT1lbmQtb2YtY2FuZGlkYXRlc1xyXG4iKTtlbHNlIHRbbi5jYW5kaWRhdGUuc2RwTUxpbmVJbmRleCsxXSs9ImE9IituLmNhbmRpZGF0ZS5jYW5kaWRhdGUrIlxyXG4iOyhlLmxvY2FsRGVzY3JpcHRpb24uc2RwPXQuam9pbigiIiksZS5kaXNwYXRjaEV2ZW50KG4pLG51bGwhPT1lLm9uaWNlY2FuZGlkYXRlJiZlLm9uaWNlY2FuZGlkYXRlKG4pLG4uY2FuZGlkYXRlfHwiY29tcGxldGUiPT09ZS5pY2VHYXRoZXJpbmdTdGF0ZSl8fGUudHJhbnNjZWl2ZXJzLmV2ZXJ5KGZ1bmN0aW9uKGUpe3JldHVybiBlLmljZUdhdGhlcmVyJiYiY29tcGxldGVkIj09PWUuaWNlR2F0aGVyZXIuc3RhdGV9KSYmImNvbXBsZXRlIiE9PWUuaWNlR2F0aGVyaW5nU3RhdGVDaGFuZ2UmJihlLmljZUdhdGhlcmluZ1N0YXRlPSJjb21wbGV0ZSIsZS5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlKCkpfSksdGhpcy5fbG9jYWxJY2VDYW5kaWRhdGVzQnVmZmVyPVtdfSx0LnByb3RvdHlwZS5nZXRDb25maWd1cmF0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NvbmZpZ30sdC5wcm90b3R5cGUuX2NyZWF0ZVRyYW5zY2VpdmVyPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMudHJhbnNjZWl2ZXJzLmxlbmd0aD4wLG49e3RyYWNrOm51bGwsaWNlR2F0aGVyZXI6bnVsbCxpY2VUcmFuc3BvcnQ6bnVsbCxkdGxzVHJhbnNwb3J0Om51bGwsbG9jYWxDYXBhYmlsaXRpZXM6bnVsbCxyZW1vdGVDYXBhYmlsaXRpZXM6bnVsbCxydHBTZW5kZXI6bnVsbCxydHBSZWNlaXZlcjpudWxsLGtpbmQ6ZSxtaWQ6bnVsbCxzZW5kRW5jb2RpbmdQYXJhbWV0ZXJzOm51bGwscmVjdkVuY29kaW5nUGFyYW1ldGVyczpudWxsLHN0cmVhbTpudWxsLHdhbnRSZWNlaXZlOiEwfTtpZih0aGlzLnVzaW5nQnVuZGxlJiZ0KW4uaWNlVHJhbnNwb3J0PXRoaXMudHJhbnNjZWl2ZXJzWzBdLmljZVRyYW5zcG9ydCxuLmR0bHNUcmFuc3BvcnQ9dGhpcy50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydDtlbHNle3ZhciByPXRoaXMuX2NyZWF0ZUljZUFuZER0bHNUcmFuc3BvcnRzKCk7bi5pY2VUcmFuc3BvcnQ9ci5pY2VUcmFuc3BvcnQsbi5kdGxzVHJhbnNwb3J0PXIuZHRsc1RyYW5zcG9ydH1yZXR1cm4gdGhpcy50cmFuc2NlaXZlcnMucHVzaChuKSxufSx0LnByb3RvdHlwZS5hZGRUcmFjaz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbixyPTA7cjx0aGlzLnRyYW5zY2VpdmVycy5sZW5ndGg7cisrKXRoaXMudHJhbnNjZWl2ZXJzW3JdLnRyYWNrfHx0aGlzLnRyYW5zY2VpdmVyc1tyXS5raW5kIT09ZS5raW5kfHwobj10aGlzLnRyYW5zY2VpdmVyc1tyXSk7cmV0dXJuIG58fChuPXRoaXMuX2NyZWF0ZVRyYW5zY2VpdmVyKGUua2luZCkpLG4udHJhY2s9ZSxuLnN0cmVhbT10LG4ucnRwU2VuZGVyPW5ldyBSVENSdHBTZW5kZXIoZSxuLmR0bHNUcmFuc3BvcnQpLHRoaXMuX21heWJlRmlyZU5lZ290aWF0aW9uTmVlZGVkKCksbi5ydHBTZW5kZXJ9LHQucHJvdG90eXBlLmFkZFN0cmVhbT1mdW5jdGlvbih0KXt2YXIgbj10aGlzO2lmKGU+PTE1MDI1KXRoaXMubG9jYWxTdHJlYW1zLnB1c2godCksdC5nZXRUcmFja3MoKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe24uYWRkVHJhY2soZSx0KX0pO2Vsc2V7dmFyIHI9dC5jbG9uZSgpO3QuZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbihlLHQpe3ZhciBuPXIuZ2V0VHJhY2tzKClbdF07ZS5hZGRFdmVudExpc3RlbmVyKCJlbmFibGVkIixmdW5jdGlvbihlKXtuLmVuYWJsZWQ9ZS5lbmFibGVkfSl9KSxyLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24oZSl7bi5hZGRUcmFjayhlLHIpfSksdGhpcy5sb2NhbFN0cmVhbXMucHVzaChyKX10aGlzLl9tYXliZUZpcmVOZWdvdGlhdGlvbk5lZWRlZCgpfSx0LnByb3RvdHlwZS5yZW1vdmVTdHJlYW09ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5sb2NhbFN0cmVhbXMuaW5kZXhPZihlKTt0Pi0xJiYodGhpcy5sb2NhbFN0cmVhbXMuc3BsaWNlKHQsMSksdGhpcy5fbWF5YmVGaXJlTmVnb3RpYXRpb25OZWVkZWQoKSl9LHQucHJvdG90eXBlLmdldFNlbmRlcnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiEhZS5ydHBTZW5kZXJ9KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUucnRwU2VuZGVyfSl9LHQucHJvdG90eXBlLmdldFJlY2VpdmVycz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRyYW5zY2VpdmVycy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuISFlLnJ0cFJlY2VpdmVyfSkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnJ0cFJlY2VpdmVyfSl9LHQucHJvdG90eXBlLl9jcmVhdGVJY2VHYXRoZXJlcj1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMsaT1uZXcgUlRDSWNlR2F0aGVyZXIobi5pY2VPcHRpb25zKTtyZXR1cm4gaS5vbmxvY2FsY2FuZGlkYXRlPWZ1bmN0aW9uKGEpe3ZhciBvPW5ldyBFdmVudCgiaWNlY2FuZGlkYXRlIik7by5jYW5kaWRhdGU9e3NkcE1pZDplLHNkcE1MaW5lSW5kZXg6dH07dmFyIHM9YS5jYW5kaWRhdGUsYz0hc3x8MD09PU9iamVjdC5rZXlzKHMpLmxlbmd0aDtjP3ZvaWQgMD09PWkuc3RhdGUmJihpLnN0YXRlPSJjb21wbGV0ZWQiKToocy5jb21wb25lbnQ9MSxvLmNhbmRpZGF0ZS5jYW5kaWRhdGU9ci53cml0ZUNhbmRpZGF0ZShzKSk7dmFyIGQ9ci5zcGxpdFNlY3Rpb25zKG4ubG9jYWxEZXNjcmlwdGlvbi5zZHApO2Rbby5jYW5kaWRhdGUuc2RwTUxpbmVJbmRleCsxXSs9Yz8iYT1lbmQtb2YtY2FuZGlkYXRlc1xyXG4iOiJhPSIrby5jYW5kaWRhdGUuY2FuZGlkYXRlKyJcclxuIixuLmxvY2FsRGVzY3JpcHRpb24uc2RwPWQuam9pbigiIik7dmFyIHU9KG4uX3BlbmRpbmdPZmZlcj9uLl9wZW5kaW5nT2ZmZXI6bi50cmFuc2NlaXZlcnMpLmV2ZXJ5KGZ1bmN0aW9uKGUpe3JldHVybiBlLmljZUdhdGhlcmVyJiYiY29tcGxldGVkIj09PWUuaWNlR2F0aGVyZXIuc3RhdGV9KTtzd2l0Y2gobi5pY2VHYXRoZXJpbmdTdGF0ZSl7Y2FzZSJuZXciOmN8fG4uX2xvY2FsSWNlQ2FuZGlkYXRlc0J1ZmZlci5wdXNoKG8pLGMmJnUmJm4uX2xvY2FsSWNlQ2FuZGlkYXRlc0J1ZmZlci5wdXNoKG5ldyBFdmVudCgiaWNlY2FuZGlkYXRlIikpO2JyZWFrO2Nhc2UiZ2F0aGVyaW5nIjpuLl9lbWl0QnVmZmVyZWRDYW5kaWRhdGVzKCksY3x8KG4uZGlzcGF0Y2hFdmVudChvKSxudWxsIT09bi5vbmljZWNhbmRpZGF0ZSYmbi5vbmljZWNhbmRpZGF0ZShvKSksdSYmKG4uZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQoImljZWNhbmRpZGF0ZSIpKSxudWxsIT09bi5vbmljZWNhbmRpZGF0ZSYmbi5vbmljZWNhbmRpZGF0ZShuZXcgRXZlbnQoImljZWNhbmRpZGF0ZSIpKSxuLmljZUdhdGhlcmluZ1N0YXRlPSJjb21wbGV0ZSIsbi5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlKCkpfX0saX0sdC5wcm90b3R5cGUuX2NyZWF0ZUljZUFuZER0bHNUcmFuc3BvcnRzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PW5ldyBSVENJY2VUcmFuc3BvcnQobnVsbCk7dC5vbmljZXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ZS5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCl9O3ZhciBuPW5ldyBSVENEdGxzVHJhbnNwb3J0KHQpO3JldHVybiBuLm9uZHRsc3N0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ZS5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCl9LG4ub25lcnJvcj1mdW5jdGlvbigpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCJzdGF0ZSIse3ZhbHVlOiJmYWlsZWQiLHdyaXRhYmxlOiEwfSksZS5fdXBkYXRlQ29ubmVjdGlvblN0YXRlKCl9LHtpY2VUcmFuc3BvcnQ6dCxkdGxzVHJhbnNwb3J0Om59fSx0LnByb3RvdHlwZS5fZGlzcG9zZUljZUFuZER0bHNUcmFuc3BvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMudHJhbnNjZWl2ZXJzW2VdLmljZUdhdGhlcmVyO3QmJihkZWxldGUgdC5vbmxvY2FsY2FuZGlkYXRlLGRlbGV0ZSB0aGlzLnRyYW5zY2VpdmVyc1tlXS5pY2VHYXRoZXJlcik7dmFyIG49dGhpcy50cmFuc2NlaXZlcnNbZV0uaWNlVHJhbnNwb3J0O24mJihkZWxldGUgbi5vbmljZXN0YXRlY2hhbmdlLGRlbGV0ZSB0aGlzLnRyYW5zY2VpdmVyc1tlXS5pY2VUcmFuc3BvcnQpO3ZhciByPXRoaXMudHJhbnNjZWl2ZXJzW2VdLmR0bHNUcmFuc3BvcnQ7ciYmKGRlbGV0ZSByLm9uZHRsc3N0dGF0ZWNoYW5nZSxkZWxldGUgci5vbmVycm9yLGRlbGV0ZSB0aGlzLnRyYW5zY2VpdmVyc1tlXS5kdGxzVHJhbnNwb3J0KX0sdC5wcm90b3R5cGUuX3RyYW5zY2VpdmU9ZnVuY3Rpb24odCxuLGEpe3ZhciBvPWkodC5sb2NhbENhcGFiaWxpdGllcyx0LnJlbW90ZUNhcGFiaWxpdGllcyk7biYmdC5ydHBTZW5kZXImJihvLmVuY29kaW5ncz10LnNlbmRFbmNvZGluZ1BhcmFtZXRlcnMsby5ydGNwPXtjbmFtZTpyLmxvY2FsQ05hbWUsY29tcG91bmQ6dC5ydGNwUGFyYW1ldGVycy5jb21wb3VuZH0sdC5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzLmxlbmd0aCYmKG8ucnRjcC5zc3JjPXQucmVjdkVuY29kaW5nUGFyYW1ldGVyc1swXS5zc3JjKSx0LnJ0cFNlbmRlci5zZW5kKG8pKSxhJiZ0LnJ0cFJlY2VpdmVyJiYoInZpZGVvIj09PXQua2luZCYmdC5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzJiZlPDE1MDE5JiZ0LnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMuZm9yRWFjaChmdW5jdGlvbihlKXtkZWxldGUgZS5ydHh9KSxvLmVuY29kaW5ncz10LnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnMsby5ydGNwPXtjbmFtZTp0LnJ0Y3BQYXJhbWV0ZXJzLmNuYW1lLGNvbXBvdW5kOnQucnRjcFBhcmFtZXRlcnMuY29tcG91bmR9LHQuc2VuZEVuY29kaW5nUGFyYW1ldGVycy5sZW5ndGgmJihvLnJ0Y3Auc3NyYz10LnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYyksdC5ydHBSZWNlaXZlci5yZWNlaXZlKG8pKX0sdC5wcm90b3R5cGUuc2V0TG9jYWxEZXNjcmlwdGlvbj1mdW5jdGlvbihlKXt2YXIgdCxuLG89dGhpcztpZighYSgic2V0TG9jYWxEZXNjcmlwdGlvbiIsZS50eXBlLHRoaXMuc2lnbmFsaW5nU3RhdGUpKXt2YXIgcz1uZXcgRXJyb3IoIkNhbiBub3Qgc2V0IGxvY2FsICIrZS50eXBlKyIgaW4gc3RhdGUgIit0aGlzLnNpZ25hbGluZ1N0YXRlKTtyZXR1cm4gcy5uYW1lPSJJbnZhbGlkU3RhdGVFcnJvciIsYXJndW1lbnRzLmxlbmd0aD4yJiYiZnVuY3Rpb24iPT10eXBlb2YgYXJndW1lbnRzWzJdJiZ3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMl0sMCxzKSxQcm9taXNlLnJlamVjdChzKX1pZigib2ZmZXIiPT09ZS50eXBlKXRoaXMuX3BlbmRpbmdPZmZlciYmKHQ9ci5zcGxpdFNlY3Rpb25zKGUuc2RwKSxuPXQuc2hpZnQoKSx0LmZvckVhY2goZnVuY3Rpb24oZSx0KXt2YXIgbj1yLnBhcnNlUnRwUGFyYW1ldGVycyhlKTtvLl9wZW5kaW5nT2ZmZXJbdF0ubG9jYWxDYXBhYmlsaXRpZXM9bn0pLHRoaXMudHJhbnNjZWl2ZXJzPXRoaXMuX3BlbmRpbmdPZmZlcixkZWxldGUgdGhpcy5fcGVuZGluZ09mZmVyKTtlbHNlIGlmKCJhbnN3ZXIiPT09ZS50eXBlKXt0PXIuc3BsaXRTZWN0aW9ucyhvLnJlbW90ZURlc2NyaXB0aW9uLnNkcCksbj10LnNoaWZ0KCk7dmFyIGM9ci5tYXRjaFByZWZpeChuLCJhPWljZS1saXRlIikubGVuZ3RoPjA7dC5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7dmFyIGE9by50cmFuc2NlaXZlcnNbdF0scz1hLmljZUdhdGhlcmVyLGQ9YS5pY2VUcmFuc3BvcnQsdT1hLmR0bHNUcmFuc3BvcnQsbD1hLmxvY2FsQ2FwYWJpbGl0aWVzLHA9YS5yZW1vdGVDYXBhYmlsaXRpZXM7aWYoIXIuaXNSZWplY3RlZChlKSYmIWEuaXNEYXRhY2hhbm5lbCl7dmFyIGY9ci5nZXRJY2VQYXJhbWV0ZXJzKGUsbiksaD1yLmdldER0bHNQYXJhbWV0ZXJzKGUsbik7YyYmKGgucm9sZT0ic2VydmVyIiksby51c2luZ0J1bmRsZSYmMCE9PXR8fChkLnN0YXJ0KHMsZixjPyJjb250cm9sbGluZyI6ImNvbnRyb2xsZWQiKSx1LnN0YXJ0KGgpKTt2YXIgbT1pKGwscCk7by5fdHJhbnNjZWl2ZShhLG0uY29kZWNzLmxlbmd0aD4wLCExKX19KX1zd2l0Y2godGhpcy5sb2NhbERlc2NyaXB0aW9uPXt0eXBlOmUudHlwZSxzZHA6ZS5zZHB9LGUudHlwZSl7Y2FzZSJvZmZlciI6dGhpcy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoImhhdmUtbG9jYWwtb2ZmZXIiKTticmVhaztjYXNlImFuc3dlciI6dGhpcy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoInN0YWJsZSIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcigndW5zdXBwb3J0ZWQgdHlwZSAiJytlLnR5cGUrJyInKX12YXIgZD1hcmd1bWVudHMubGVuZ3RoPjEmJiJmdW5jdGlvbiI9PXR5cGVvZiBhcmd1bWVudHNbMV07aWYoZCl7dmFyIHU9YXJndW1lbnRzWzFdO3dpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dSgpLCJuZXciPT09by5pY2VHYXRoZXJpbmdTdGF0ZSYmKG8uaWNlR2F0aGVyaW5nU3RhdGU9ImdhdGhlcmluZyIsby5fZW1pdEdhdGhlcmluZ1N0YXRlQ2hhbmdlKCkpLG8uX2VtaXRCdWZmZXJlZENhbmRpZGF0ZXMoKX0sMCl9dmFyIGw9UHJvbWlzZS5yZXNvbHZlKCk7cmV0dXJuIGwudGhlbihmdW5jdGlvbigpe2R8fCgibmV3Ij09PW8uaWNlR2F0aGVyaW5nU3RhdGUmJihvLmljZUdhdGhlcmluZ1N0YXRlPSJnYXRoZXJpbmciLG8uX2VtaXRHYXRoZXJpbmdTdGF0ZUNoYW5nZSgpKSx3aW5kb3cuc2V0VGltZW91dChvLl9lbWl0QnVmZmVyZWRDYW5kaWRhdGVzLmJpbmQobyksNTAwKSl9KSxsfSx0LnByb3RvdHlwZS5zZXRSZW1vdGVEZXNjcmlwdGlvbj1mdW5jdGlvbih0KXt2YXIgbj10aGlzO2lmKCFhKCJzZXRSZW1vdGVEZXNjcmlwdGlvbiIsdC50eXBlLHRoaXMuc2lnbmFsaW5nU3RhdGUpKXt2YXIgaT1uZXcgRXJyb3IoIkNhbiBub3Qgc2V0IHJlbW90ZSAiK3QudHlwZSsiIGluIHN0YXRlICIrdGhpcy5zaWduYWxpbmdTdGF0ZSk7cmV0dXJuIGkubmFtZT0iSW52YWxpZFN0YXRlRXJyb3IiLGFyZ3VtZW50cy5sZW5ndGg+MiYmImZ1bmN0aW9uIj09dHlwZW9mIGFyZ3VtZW50c1syXSYmd2luZG93LnNldFRpbWVvdXQoYXJndW1lbnRzWzJdLDAsaSksUHJvbWlzZS5yZWplY3QoaSl9dmFyIG89e30scz1bXSxjPXIuc3BsaXRTZWN0aW9ucyh0LnNkcCksZD1jLnNoaWZ0KCksdT1yLm1hdGNoUHJlZml4KGQsImE9aWNlLWxpdGUiKS5sZW5ndGg+MCxsPXIubWF0Y2hQcmVmaXgoZCwiYT1ncm91cDpCVU5ETEUgIikubGVuZ3RoPjA7dGhpcy51c2luZ0J1bmRsZT1sO3ZhciBwPXIubWF0Y2hQcmVmaXgoZCwiYT1pY2Utb3B0aW9uczoiKVswXTtzd2l0Y2godGhpcy5jYW5Ucmlja2xlSWNlQ2FuZGlkYXRlcz0hIXAmJnAuc3Vic3RyKDE0KS5zcGxpdCgiICIpLmluZGV4T2YoInRyaWNrbGUiKT49MCxjLmZvckVhY2goZnVuY3Rpb24oaSxhKXt2YXIgYz1yLnNwbGl0TGluZXMoaSkscD1yLmdldEtpbmQoaSksZj1yLmlzUmVqZWN0ZWQoaSksaD1jWzBdLnN1YnN0cigyKS5zcGxpdCgiICIpWzJdLG09ci5nZXREaXJlY3Rpb24oaSxkKSx2PXIucGFyc2VNc2lkKGkpLGc9ci5nZXRNaWQoaSl8fHIuZ2VuZXJhdGVJZGVudGlmaWVyKCk7aWYoImFwcGxpY2F0aW9uIiE9PXB8fCJEVExTL1NDVFAiIT09aCl7dmFyIHksQyxiLHcsUCxfLFQsUyxSLGssRSx4PXIucGFyc2VSdHBQYXJhbWV0ZXJzKGkpO2Z8fChrPXIuZ2V0SWNlUGFyYW1ldGVycyhpLGQpLChFPXIuZ2V0RHRsc1BhcmFtZXRlcnMoaSxkKSkucm9sZT0iY2xpZW50IiksVD1yLnBhcnNlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzKGkpO3ZhciBPPXIucGFyc2VSdGNwUGFyYW1ldGVycyhpKSxEPXIubWF0Y2hQcmVmaXgoaSwiYT1lbmQtb2YtY2FuZGlkYXRlcyIsZCkubGVuZ3RoPjAsTT1yLm1hdGNoUHJlZml4KGksImE9Y2FuZGlkYXRlOiIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gci5wYXJzZUNhbmRpZGF0ZShlKX0pLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4iMSI9PT1lLmNvbXBvbmVudHx8MT09PWUuY29tcG9uZW50fSk7Im9mZmVyIiE9PXQudHlwZXx8Zj8iYW5zd2VyIiE9PXQudHlwZXx8Znx8KGwmJmE+MCYmKG4uX2Rpc3Bvc2VJY2VBbmREdGxzVHJhbnNwb3J0cyhhKSxuLnRyYW5zY2VpdmVyc1thXS5pY2VHYXRoZXJlcj1uLnRyYW5zY2VpdmVyc1swXS5pY2VHYXRoZXJlcixuLnRyYW5zY2VpdmVyc1thXS5pY2VUcmFuc3BvcnQ9bi50cmFuc2NlaXZlcnNbMF0uaWNlVHJhbnNwb3J0LG4udHJhbnNjZWl2ZXJzW2FdLmR0bHNUcmFuc3BvcnQ9bi50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydCxuLnRyYW5zY2VpdmVyc1thXS5ydHBTZW5kZXImJm4udHJhbnNjZWl2ZXJzW2FdLnJ0cFNlbmRlci5zZXRUcmFuc3BvcnQobi50cmFuc2NlaXZlcnNbMF0uZHRsc1RyYW5zcG9ydCksbi50cmFuc2NlaXZlcnNbYV0ucnRwUmVjZWl2ZXImJm4udHJhbnNjZWl2ZXJzW2FdLnJ0cFJlY2VpdmVyLnNldFRyYW5zcG9ydChuLnRyYW5zY2VpdmVyc1swXS5kdGxzVHJhbnNwb3J0KSksQz0oeT1uLnRyYW5zY2VpdmVyc1thXSkuaWNlR2F0aGVyZXIsYj15LmljZVRyYW5zcG9ydCx3PXkuZHRsc1RyYW5zcG9ydCxQPXkucnRwUmVjZWl2ZXIsXz15LnNlbmRFbmNvZGluZ1BhcmFtZXRlcnMsUz15LmxvY2FsQ2FwYWJpbGl0aWVzLG4udHJhbnNjZWl2ZXJzW2FdLnJlY3ZFbmNvZGluZ1BhcmFtZXRlcnM9VCxuLnRyYW5zY2VpdmVyc1thXS5yZW1vdGVDYXBhYmlsaXRpZXM9eCxuLnRyYW5zY2VpdmVyc1thXS5ydGNwUGFyYW1ldGVycz1PLCh1fHxEKSYmTS5sZW5ndGgmJmIuc2V0UmVtb3RlQ2FuZGlkYXRlcyhNKSxsJiYwIT09YXx8KGIuc3RhcnQoQyxrLCJjb250cm9sbGluZyIpLHcuc3RhcnQoRSkpLG4uX3RyYW5zY2VpdmUoeSwic2VuZHJlY3YiPT09bXx8InJlY3Zvbmx5Ij09PW0sInNlbmRyZWN2Ij09PW18fCJzZW5kb25seSI9PT1tKSwhUHx8InNlbmRyZWN2IiE9PW0mJiJzZW5kb25seSIhPT1tP2RlbGV0ZSB5LnJ0cFJlY2VpdmVyOihSPVAudHJhY2ssdj8ob1t2LnN0cmVhbV18fChvW3Yuc3RyZWFtXT1uZXcgTWVkaWFTdHJlYW0pLG9bdi5zdHJlYW1dLmFkZFRyYWNrKFIpLHMucHVzaChbUixQLG9bdi5zdHJlYW1dXSkpOihvLmRlZmF1bHR8fChvLmRlZmF1bHQ9bmV3IE1lZGlhU3RyZWFtKSxvLmRlZmF1bHQuYWRkVHJhY2soUikscy5wdXNoKFtSLFAsby5kZWZhdWx0XSkpKSk6KCh5PW4udHJhbnNjZWl2ZXJzW2FdfHxuLl9jcmVhdGVUcmFuc2NlaXZlcihwKSkubWlkPWcseS5pY2VHYXRoZXJlcnx8KHkuaWNlR2F0aGVyZXI9bCYmYT4wP24udHJhbnNjZWl2ZXJzWzBdLmljZUdhdGhlcmVyOm4uX2NyZWF0ZUljZUdhdGhlcmVyKGcsYSkpLCFEfHxsJiYwIT09YXx8eS5pY2VUcmFuc3BvcnQuc2V0UmVtb3RlQ2FuZGlkYXRlcyhNKSxTPVJUQ1J0cFJlY2VpdmVyLmdldENhcGFiaWxpdGllcyhwKSxlPDE1MDE5JiYoUy5jb2RlY3M9Uy5jb2RlY3MuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiJydHgiIT09ZS5uYW1lfSkpLF89W3tzc3JjOjEwMDEqKDIqYSsyKX1dLCJzZW5kcmVjdiIhPT1tJiYic2VuZG9ubHkiIT09bXx8KFI9KFA9bmV3IFJUQ1J0cFJlY2VpdmVyKHkuZHRsc1RyYW5zcG9ydCxwKSkudHJhY2ssdj8ob1t2LnN0cmVhbV18fChvW3Yuc3RyZWFtXT1uZXcgTWVkaWFTdHJlYW0sT2JqZWN0LmRlZmluZVByb3BlcnR5KG9bdi5zdHJlYW1dLCJpZCIse2dldDpmdW5jdGlvbigpe3JldHVybiB2LnN0cmVhbX19KSksT2JqZWN0LmRlZmluZVByb3BlcnR5KFIsImlkIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHYudHJhY2t9fSksb1t2LnN0cmVhbV0uYWRkVHJhY2soUikscy5wdXNoKFtSLFAsb1t2LnN0cmVhbV1dKSk6KG8uZGVmYXVsdHx8KG8uZGVmYXVsdD1uZXcgTWVkaWFTdHJlYW0pLG8uZGVmYXVsdC5hZGRUcmFjayhSKSxzLnB1c2goW1IsUCxvLmRlZmF1bHRdKSkpLHkubG9jYWxDYXBhYmlsaXRpZXM9Uyx5LnJlbW90ZUNhcGFiaWxpdGllcz14LHkucnRwUmVjZWl2ZXI9UCx5LnJ0Y3BQYXJhbWV0ZXJzPU8seS5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzPV8seS5yZWN2RW5jb2RpbmdQYXJhbWV0ZXJzPVQsbi5fdHJhbnNjZWl2ZShuLnRyYW5zY2VpdmVyc1thXSwhMSwic2VuZHJlY3YiPT09bXx8InNlbmRvbmx5Ij09PW0pKX1lbHNlIG4udHJhbnNjZWl2ZXJzW2FdPXttaWQ6Zyxpc0RhdGFjaGFubmVsOiEwfX0pLHRoaXMucmVtb3RlRGVzY3JpcHRpb249e3R5cGU6dC50eXBlLHNkcDp0LnNkcH0sdC50eXBlKXtjYXNlIm9mZmVyIjp0aGlzLl91cGRhdGVTaWduYWxpbmdTdGF0ZSgiaGF2ZS1yZW1vdGUtb2ZmZXIiKTticmVhaztjYXNlImFuc3dlciI6dGhpcy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoInN0YWJsZSIpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IFR5cGVFcnJvcigndW5zdXBwb3J0ZWQgdHlwZSAiJyt0LnR5cGUrJyInKX1yZXR1cm4gT2JqZWN0LmtleXMobykuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgdD1vW2VdO2lmKHQuZ2V0VHJhY2tzKCkubGVuZ3RoKXtuLnJlbW90ZVN0cmVhbXMucHVzaCh0KTt2YXIgcj1uZXcgRXZlbnQoImFkZHN0cmVhbSIpO3Iuc3RyZWFtPXQsbi5kaXNwYXRjaEV2ZW50KHIpLG51bGwhPT1uLm9uYWRkc3RyZWFtJiZ3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe24ub25hZGRzdHJlYW0ocil9LDApLHMuZm9yRWFjaChmdW5jdGlvbihlKXt2YXIgcj1lWzBdLGk9ZVsxXTtpZih0LmlkPT09ZVsyXS5pZCl7dmFyIGE9bmV3IEV2ZW50KCJ0cmFjayIpO2EudHJhY2s9cixhLnJlY2VpdmVyPWksYS5zdHJlYW1zPVt0XSxuLmRpc3BhdGNoRXZlbnQoYSksbnVsbCE9PW4ub250cmFjayYmd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtuLm9udHJhY2soYSl9LDApfX0pfX0pLHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7biYmbi50cmFuc2NlaXZlcnMmJm4udHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5pY2VUcmFuc3BvcnQmJiJuZXciPT09ZS5pY2VUcmFuc3BvcnQuc3RhdGUmJmUuaWNlVHJhbnNwb3J0LmdldFJlbW90ZUNhbmRpZGF0ZXMoKS5sZW5ndGg+MCYmKGNvbnNvbGUud2FybigiVGltZW91dCBmb3IgYWRkUmVtb3RlQ2FuZGlkYXRlLiBDb25zaWRlciBzZW5kaW5nIGFuIGVuZC1vZi1jYW5kaWRhdGVzIG5vdGlmaWNhdGlvbiIpLGUuaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZSh7fSkpfSl9LDRlMyksYXJndW1lbnRzLmxlbmd0aD4xJiYiZnVuY3Rpb24iPT10eXBlb2YgYXJndW1lbnRzWzFdJiZ3aW5kb3cuc2V0VGltZW91dChhcmd1bWVudHNbMV0sMCksUHJvbWlzZS5yZXNvbHZlKCl9LHQucHJvdG90eXBlLmNsb3NlPWZ1bmN0aW9uKCl7dGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbihlKXtlLmljZVRyYW5zcG9ydCYmZS5pY2VUcmFuc3BvcnQuc3RvcCgpLGUuZHRsc1RyYW5zcG9ydCYmZS5kdGxzVHJhbnNwb3J0LnN0b3AoKSxlLnJ0cFNlbmRlciYmZS5ydHBTZW5kZXIuc3RvcCgpLGUucnRwUmVjZWl2ZXImJmUucnRwUmVjZWl2ZXIuc3RvcCgpfSksdGhpcy5fdXBkYXRlU2lnbmFsaW5nU3RhdGUoImNsb3NlZCIpfSx0LnByb3RvdHlwZS5fdXBkYXRlU2lnbmFsaW5nU3RhdGU9ZnVuY3Rpb24oZSl7dGhpcy5zaWduYWxpbmdTdGF0ZT1lO3ZhciB0PW5ldyBFdmVudCgic2lnbmFsaW5nc3RhdGVjaGFuZ2UiKTt0aGlzLmRpc3BhdGNoRXZlbnQodCksbnVsbCE9PXRoaXMub25zaWduYWxpbmdzdGF0ZWNoYW5nZSYmdGhpcy5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlKHQpfSx0LnByb3RvdHlwZS5fbWF5YmVGaXJlTmVnb3RpYXRpb25OZWVkZWQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzOyJzdGFibGUiPT09dGhpcy5zaWduYWxpbmdTdGF0ZSYmITAhPT10aGlzLm5lZWROZWdvdGlhdGlvbiYmKHRoaXMubmVlZE5lZ290aWF0aW9uPSEwLHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aWYoITEhPT1lLm5lZWROZWdvdGlhdGlvbil7ZS5uZWVkTmVnb3RpYXRpb249ITE7dmFyIHQ9bmV3IEV2ZW50KCJuZWdvdGlhdGlvbm5lZWRlZCIpO2UuZGlzcGF0Y2hFdmVudCh0KSxudWxsIT09ZS5vbm5lZ290aWF0aW9ubmVlZGVkJiZlLm9ubmVnb3RpYXRpb25uZWVkZWQodCl9fSwwKSl9LHQucHJvdG90eXBlLl91cGRhdGVDb25uZWN0aW9uU3RhdGU9ZnVuY3Rpb24oKXt2YXIgZSx0PXtuZXc6MCxjbG9zZWQ6MCxjb25uZWN0aW5nOjAsY2hlY2tpbmc6MCxjb25uZWN0ZWQ6MCxjb21wbGV0ZWQ6MCxmYWlsZWQ6MH07aWYodGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbihlKXt0W2UuaWNlVHJhbnNwb3J0LnN0YXRlXSsrLHRbZS5kdGxzVHJhbnNwb3J0LnN0YXRlXSsrfSksdC5jb25uZWN0ZWQrPXQuY29tcGxldGVkLGU9Im5ldyIsdC5mYWlsZWQ+MD9lPSJmYWlsZWQiOnQuY29ubmVjdGluZz4wfHx0LmNoZWNraW5nPjA/ZT0iY29ubmVjdGluZyI6dC5kaXNjb25uZWN0ZWQ+MD9lPSJkaXNjb25uZWN0ZWQiOnQubmV3PjA/ZT0ibmV3IjoodC5jb25uZWN0ZWQ+MHx8dC5jb21wbGV0ZWQ+MCkmJihlPSJjb25uZWN0ZWQiKSxlIT09dGhpcy5pY2VDb25uZWN0aW9uU3RhdGUpe3RoaXMuaWNlQ29ubmVjdGlvblN0YXRlPWU7dmFyIG49bmV3IEV2ZW50KCJpY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UiKTt0aGlzLmRpc3BhdGNoRXZlbnQobiksbnVsbCE9PXRoaXMub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UmJnRoaXMub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2Uobil9fSx0LnByb3RvdHlwZS5jcmVhdGVPZmZlcj1mdW5jdGlvbigpe3ZhciB0LG49dGhpcztpZih0aGlzLl9wZW5kaW5nT2ZmZXIpdGhyb3cgbmV3IEVycm9yKCJjcmVhdGVPZmZlciBjYWxsZWQgd2hpbGUgdGhlcmUgaXMgYSBwZW5kaW5nIG9mZmVyLiIpOzE9PT1hcmd1bWVudHMubGVuZ3RoJiYiZnVuY3Rpb24iIT10eXBlb2YgYXJndW1lbnRzWzBdP3Q9YXJndW1lbnRzWzBdOjM9PT1hcmd1bWVudHMubGVuZ3RoJiYodD1hcmd1bWVudHNbMl0pO3ZhciBpPXRoaXMudHJhbnNjZWl2ZXJzLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4iYXVkaW8iPT09ZS5raW5kfSkubGVuZ3RoLGE9dGhpcy50cmFuc2NlaXZlcnMuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiJ2aWRlbyI9PT1lLmtpbmR9KS5sZW5ndGg7aWYodCl7aWYodC5tYW5kYXRvcnl8fHQub3B0aW9uYWwpdGhyb3cgbmV3IFR5cGVFcnJvcigiTGVnYWN5IG1hbmRhdG9yeS9vcHRpb25hbCBjb25zdHJhaW50cyBub3Qgc3VwcG9ydGVkLiIpO3ZvaWQgMCE9PXQub2ZmZXJUb1JlY2VpdmVBdWRpbyYmKGk9ITA9PT10Lm9mZmVyVG9SZWNlaXZlQXVkaW8/MTohMT09PXQub2ZmZXJUb1JlY2VpdmVBdWRpbz8wOnQub2ZmZXJUb1JlY2VpdmVBdWRpbyksdm9pZCAwIT09dC5vZmZlclRvUmVjZWl2ZVZpZGVvJiYoYT0hMD09PXQub2ZmZXJUb1JlY2VpdmVWaWRlbz8xOiExPT09dC5vZmZlclRvUmVjZWl2ZVZpZGVvPzA6dC5vZmZlclRvUmVjZWl2ZVZpZGVvKX1mb3IodGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbihlKXsiYXVkaW8iPT09ZS5raW5kPy0taTwwJiYoZS53YW50UmVjZWl2ZT0hMSk6InZpZGVvIj09PWUua2luZCYmLS1hPDAmJihlLndhbnRSZWNlaXZlPSExKX0pO2k+MHx8YT4wOylpPjAmJih0aGlzLl9jcmVhdGVUcmFuc2NlaXZlcigiYXVkaW8iKSxpLS0pLGE+MCYmKHRoaXMuX2NyZWF0ZVRyYW5zY2VpdmVyKCJ2aWRlbyIpLGEtLSk7dmFyIG89ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuImF1ZGlvIj09PWUua2luZH0pLG49ZS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuInZpZGVvIj09PWUua2luZH0pO2ZvcihlPVtdO3QubGVuZ3RofHxuLmxlbmd0aDspdC5sZW5ndGgmJmUucHVzaCh0LnNoaWZ0KCkpLG4ubGVuZ3RoJiZlLnB1c2gobi5zaGlmdCgpKTtyZXR1cm4gZX0odGhpcy50cmFuc2NlaXZlcnMpLHM9ci53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZSgpO28uZm9yRWFjaChmdW5jdGlvbih0LGkpe3ZhciBhPXQudHJhY2sscz10LmtpbmQsYz1yLmdlbmVyYXRlSWRlbnRpZmllcigpO3QubWlkPWMsdC5pY2VHYXRoZXJlcnx8KHQuaWNlR2F0aGVyZXI9bi51c2luZ0J1bmRsZSYmaT4wP29bMF0uaWNlR2F0aGVyZXI6bi5fY3JlYXRlSWNlR2F0aGVyZXIoYyxpKSk7dmFyIGQ9UlRDUnRwU2VuZGVyLmdldENhcGFiaWxpdGllcyhzKTtlPDE1MDE5JiYoZC5jb2RlY3M9ZC5jb2RlY3MuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiJydHgiIT09ZS5uYW1lfSkpLGQuY29kZWNzLmZvckVhY2goZnVuY3Rpb24oZSl7IkgyNjQiPT09ZS5uYW1lJiZ2b2lkIDA9PT1lLnBhcmFtZXRlcnNbImxldmVsLWFzeW1tZXRyeS1hbGxvd2VkIl0mJihlLnBhcmFtZXRlcnNbImxldmVsLWFzeW1tZXRyeS1hbGxvd2VkIl09IjEiKX0pO3ZhciB1PVt7c3NyYzoxMDAxKigyKmkrMSl9XTthJiZlPj0xNTAxOSYmInZpZGVvIj09PXMmJih1WzBdLnJ0eD17c3NyYzoxMDAxKigyKmkrMSkrMX0pLHQud2FudFJlY2VpdmUmJih0LnJ0cFJlY2VpdmVyPW5ldyBSVENSdHBSZWNlaXZlcih0LmR0bHNUcmFuc3BvcnQscykpLHQubG9jYWxDYXBhYmlsaXRpZXM9ZCx0LnNlbmRFbmNvZGluZ1BhcmFtZXRlcnM9dX0pLCJtYXgtY29tcGF0IiE9PXRoaXMuX2NvbmZpZy5idW5kbGVQb2xpY3kmJihzKz0iYT1ncm91cDpCVU5ETEUgIitvLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS5taWR9KS5qb2luKCIgIikrIlxyXG4iKSxzKz0iYT1pY2Utb3B0aW9uczp0cmlja2xlXHJcbiIsby5mb3JFYWNoKGZ1bmN0aW9uKGUsdCl7cys9ci53cml0ZU1lZGlhU2VjdGlvbihlLGUubG9jYWxDYXBhYmlsaXRpZXMsIm9mZmVyIixlLnN0cmVhbSkscys9ImE9cnRjcC1yc2l6ZVxyXG4ifSksdGhpcy5fcGVuZGluZ09mZmVyPW87dmFyIGM9bmV3IFJUQ1Nlc3Npb25EZXNjcmlwdGlvbih7dHlwZToib2ZmZXIiLHNkcDpzfSk7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgmJiJmdW5jdGlvbiI9PXR5cGVvZiBhcmd1bWVudHNbMF0mJndpbmRvdy5zZXRUaW1lb3V0KGFyZ3VtZW50c1swXSwwLGMpLFByb21pc2UucmVzb2x2ZShjKX0sdC5wcm90b3R5cGUuY3JlYXRlQW5zd2VyPWZ1bmN0aW9uKCl7dmFyIHQ9ci53cml0ZVNlc3Npb25Cb2lsZXJwbGF0ZSgpO3RoaXMudXNpbmdCdW5kbGUmJih0Kz0iYT1ncm91cDpCVU5ETEUgIit0aGlzLnRyYW5zY2VpdmVycy5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGUubWlkfSkuam9pbigiICIpKyJcclxuIiksdGhpcy50cmFuc2NlaXZlcnMuZm9yRWFjaChmdW5jdGlvbihuLGEpe2lmKG4uaXNEYXRhY2hhbm5lbCl0Kz0ibT1hcHBsaWNhdGlvbiAwIERUTFMvU0NUUCA1MDAwXHJcbmM9SU4gSVA0IDAuMC4wLjBcclxuYT1taWQ6IituLm1pZCsiXHJcbiI7ZWxzZXt2YXIgbztpZihuLnN0cmVhbSkiYXVkaW8iPT09bi5raW5kP289bi5zdHJlYW0uZ2V0QXVkaW9UcmFja3MoKVswXToidmlkZW8iPT09bi5raW5kJiYobz1uLnN0cmVhbS5nZXRWaWRlb1RyYWNrcygpWzBdKSxvJiZlPj0xNTAxOSYmInZpZGVvIj09PW4ua2luZCYmKG4uc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHg9e3NzcmM6MTAwMSooMiphKzIpKzF9KTt2YXIgcz1pKG4ubG9jYWxDYXBhYmlsaXRpZXMsbi5yZW1vdGVDYXBhYmlsaXRpZXMpOyFzLmNvZGVjcy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuInJ0eCI9PT1lLm5hbWUudG9Mb3dlckNhc2UoKX0pLmxlbmd0aCYmbi5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCYmZGVsZXRlIG4uc2VuZEVuY29kaW5nUGFyYW1ldGVyc1swXS5ydHgsdCs9ci53cml0ZU1lZGlhU2VjdGlvbihuLHMsImFuc3dlciIsbi5zdHJlYW0pLG4ucnRjcFBhcmFtZXRlcnMmJm4ucnRjcFBhcmFtZXRlcnMucmVkdWNlZFNpemUmJih0Kz0iYT1ydGNwLXJzaXplXHJcbiIpfX0pO3ZhciBuPW5ldyBSVENTZXNzaW9uRGVzY3JpcHRpb24oe3R5cGU6ImFuc3dlciIsc2RwOnR9KTtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCYmImZ1bmN0aW9uIj09dHlwZW9mIGFyZ3VtZW50c1swXSYmd2luZG93LnNldFRpbWVvdXQoYXJndW1lbnRzWzBdLDAsbiksUHJvbWlzZS5yZXNvbHZlKG4pfSx0LnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU9ZnVuY3Rpb24oZSl7aWYoZSl7dmFyIHQ9ZS5zZHBNTGluZUluZGV4O2lmKGUuc2RwTWlkKWZvcih2YXIgbj0wO248dGhpcy50cmFuc2NlaXZlcnMubGVuZ3RoO24rKylpZih0aGlzLnRyYW5zY2VpdmVyc1tuXS5taWQ9PT1lLnNkcE1pZCl7dD1uO2JyZWFrfXZhciBpPXRoaXMudHJhbnNjZWl2ZXJzW3RdO2lmKGkpe3ZhciBhPU9iamVjdC5rZXlzKGUuY2FuZGlkYXRlKS5sZW5ndGg+MD9yLnBhcnNlQ2FuZGlkYXRlKGUuY2FuZGlkYXRlKTp7fTtpZigidGNwIj09PWEucHJvdG9jb2wmJigwPT09YS5wb3J0fHw5PT09YS5wb3J0KSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7aWYoYS5jb21wb25lbnQmJiIxIiE9PWEuY29tcG9uZW50JiYxIT09YS5jb21wb25lbnQpcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO2kuaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZShhKTt2YXIgbz1yLnNwbGl0U2VjdGlvbnModGhpcy5yZW1vdGVEZXNjcmlwdGlvbi5zZHApO29bdCsxXSs9KGEudHlwZT9lLmNhbmRpZGF0ZS50cmltKCk6ImE9ZW5kLW9mLWNhbmRpZGF0ZXMiKSsiXHJcbiIsdGhpcy5yZW1vdGVEZXNjcmlwdGlvbi5zZHA9by5qb2luKCIiKX19ZWxzZSBmb3IodmFyIHM9MDtzPHRoaXMudHJhbnNjZWl2ZXJzLmxlbmd0aDtzKyspaWYodGhpcy50cmFuc2NlaXZlcnNbc10uaWNlVHJhbnNwb3J0LmFkZFJlbW90ZUNhbmRpZGF0ZSh7fSksdGhpcy51c2luZ0J1bmRsZSlyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MSYmImZ1bmN0aW9uIj09dHlwZW9mIGFyZ3VtZW50c1sxXSYmd2luZG93LnNldFRpbWVvdXQoYXJndW1lbnRzWzFdLDApLFByb21pc2UucmVzb2x2ZSgpfSx0LnByb3RvdHlwZS5nZXRTdGF0cz1mdW5jdGlvbigpe3ZhciBlPVtdO3RoaXMudHJhbnNjZWl2ZXJzLmZvckVhY2goZnVuY3Rpb24odCl7WyJydHBTZW5kZXIiLCJydHBSZWNlaXZlciIsImljZUdhdGhlcmVyIiwiaWNlVHJhbnNwb3J0IiwiZHRsc1RyYW5zcG9ydCJdLmZvckVhY2goZnVuY3Rpb24obil7dFtuXSYmZS5wdXNoKHRbbl0uZ2V0U3RhdHMoKSl9KX0pO3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmImZ1bmN0aW9uIj09dHlwZW9mIGFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuKXt2YXIgcj1uZXcgTWFwO1Byb21pc2UuYWxsKGUpLnRoZW4oZnVuY3Rpb24oZSl7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe09iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24odCl7ZVt0XS50eXBlPWZ1bmN0aW9uKGUpe3JldHVybntpbmJvdW5kcnRwOiJpbmJvdW5kLXJ0cCIsb3V0Ym91bmRydHA6Im91dGJvdW5kLXJ0cCIsY2FuZGlkYXRlcGFpcjoiY2FuZGlkYXRlLXBhaXIiLGxvY2FsY2FuZGlkYXRlOiJsb2NhbC1jYW5kaWRhdGUiLHJlbW90ZWNhbmRpZGF0ZToicmVtb3RlLWNhbmRpZGF0ZSJ9W2UudHlwZV18fGUudHlwZX0oZVt0XSksci5zZXQodCxlW3RdKX0pfSksdCYmd2luZG93LnNldFRpbWVvdXQodCwwLHIpLG4ocil9KX0pfSx0fX0sZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj17Z2VuZXJhdGVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLDEwKX19O3IubG9jYWxDTmFtZT1yLmdlbmVyYXRlSWRlbnRpZmllcigpLHIuc3BsaXRMaW5lcz1mdW5jdGlvbihlKXtyZXR1cm4gZS50cmltKCkuc3BsaXQoIlxuIikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlLnRyaW0oKX0pfSxyLnNwbGl0U2VjdGlvbnM9ZnVuY3Rpb24oZSl7cmV0dXJuIGUuc3BsaXQoIlxubT0iKS5tYXAoZnVuY3Rpb24oZSx0KXtyZXR1cm4odD4wPyJtPSIrZTplKS50cmltKCkrIlxyXG4ifSl9LHIubWF0Y2hQcmVmaXg9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gci5zcGxpdExpbmVzKGUpLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gMD09PWUuaW5kZXhPZih0KX0pfSxyLnBhcnNlQ2FuZGlkYXRlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPXtmb3VuZGF0aW9uOih0PTA9PT1lLmluZGV4T2YoImE9Y2FuZGlkYXRlOiIpP2Uuc3Vic3RyaW5nKDEyKS5zcGxpdCgiICIpOmUuc3Vic3RyaW5nKDEwKS5zcGxpdCgiICIpKVswXSxjb21wb25lbnQ6dFsxXSxwcm90b2NvbDp0WzJdLnRvTG93ZXJDYXNlKCkscHJpb3JpdHk6cGFyc2VJbnQodFszXSwxMCksaXA6dFs0XSxwb3J0OnBhcnNlSW50KHRbNV0sMTApLHR5cGU6dFs3XX0scj04O3I8dC5sZW5ndGg7cis9Milzd2l0Y2godFtyXSl7Y2FzZSJyYWRkciI6bi5yZWxhdGVkQWRkcmVzcz10W3IrMV07YnJlYWs7Y2FzZSJycG9ydCI6bi5yZWxhdGVkUG9ydD1wYXJzZUludCh0W3IrMV0sMTApO2JyZWFrO2Nhc2UidGNwdHlwZSI6bi50Y3BUeXBlPXRbcisxXTticmVhaztkZWZhdWx0Om5bdFtyXV09dFtyKzFdfXJldHVybiBufSxyLndyaXRlQ2FuZGlkYXRlPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO3QucHVzaChlLmZvdW5kYXRpb24pLHQucHVzaChlLmNvbXBvbmVudCksdC5wdXNoKGUucHJvdG9jb2wudG9VcHBlckNhc2UoKSksdC5wdXNoKGUucHJpb3JpdHkpLHQucHVzaChlLmlwKSx0LnB1c2goZS5wb3J0KTt2YXIgbj1lLnR5cGU7cmV0dXJuIHQucHVzaCgidHlwIiksdC5wdXNoKG4pLCJob3N0IiE9PW4mJmUucmVsYXRlZEFkZHJlc3MmJmUucmVsYXRlZFBvcnQmJih0LnB1c2goInJhZGRyIiksdC5wdXNoKGUucmVsYXRlZEFkZHJlc3MpLHQucHVzaCgicnBvcnQiKSx0LnB1c2goZS5yZWxhdGVkUG9ydCkpLGUudGNwVHlwZSYmInRjcCI9PT1lLnByb3RvY29sLnRvTG93ZXJDYXNlKCkmJih0LnB1c2goInRjcHR5cGUiKSx0LnB1c2goZS50Y3BUeXBlKSksImNhbmRpZGF0ZToiK3Quam9pbigiICIpfSxyLnBhcnNlSWNlT3B0aW9ucz1mdW5jdGlvbihlKXtyZXR1cm4gZS5zdWJzdHIoMTQpLnNwbGl0KCIgIil9LHIucGFyc2VSdHBNYXA9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdWJzdHIoOSkuc3BsaXQoIiAiKSxuPXtwYXlsb2FkVHlwZTpwYXJzZUludCh0LnNoaWZ0KCksMTApfTtyZXR1cm4gdD10WzBdLnNwbGl0KCIvIiksbi5uYW1lPXRbMF0sbi5jbG9ja1JhdGU9cGFyc2VJbnQodFsxXSwxMCksbi5udW1DaGFubmVscz0zPT09dC5sZW5ndGg/cGFyc2VJbnQodFsyXSwxMCk6MSxufSxyLndyaXRlUnRwTWFwPWZ1bmN0aW9uKGUpe3ZhciB0PWUucGF5bG9hZFR5cGU7cmV0dXJuIHZvaWQgMCE9PWUucHJlZmVycmVkUGF5bG9hZFR5cGUmJih0PWUucHJlZmVycmVkUGF5bG9hZFR5cGUpLCJhPXJ0cG1hcDoiK3QrIiAiK2UubmFtZSsiLyIrZS5jbG9ja1JhdGUrKDEhPT1lLm51bUNoYW5uZWxzPyIvIitlLm51bUNoYW5uZWxzOiIiKSsiXHJcbiJ9LHIucGFyc2VFeHRtYXA9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdWJzdHIoOSkuc3BsaXQoIiAiKTtyZXR1cm57aWQ6cGFyc2VJbnQodFswXSwxMCksZGlyZWN0aW9uOnRbMF0uaW5kZXhPZigiLyIpPjA/dFswXS5zcGxpdCgiLyIpWzFdOiJzZW5kcmVjdiIsdXJpOnRbMV19fSxyLndyaXRlRXh0bWFwPWZ1bmN0aW9uKGUpe3JldHVybiJhPWV4dG1hcDoiKyhlLmlkfHxlLnByZWZlcnJlZElkKSsoZS5kaXJlY3Rpb24mJiJzZW5kcmVjdiIhPT1lLmRpcmVjdGlvbj8iLyIrZS5kaXJlY3Rpb246IiIpKyIgIitlLnVyaSsiXHJcbiJ9LHIucGFyc2VGbXRwPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxuPXt9LHI9ZS5zdWJzdHIoZS5pbmRleE9mKCIgIikrMSkuc3BsaXQoIjsiKSxpPTA7aTxyLmxlbmd0aDtpKyspblsodD1yW2ldLnRyaW0oKS5zcGxpdCgiPSIpKVswXS50cmltKCldPXRbMV07cmV0dXJuIG59LHIud3JpdGVGbXRwPWZ1bmN0aW9uKGUpe3ZhciB0PSIiLG49ZS5wYXlsb2FkVHlwZTtpZih2b2lkIDAhPT1lLnByZWZlcnJlZFBheWxvYWRUeXBlJiYobj1lLnByZWZlcnJlZFBheWxvYWRUeXBlKSxlLnBhcmFtZXRlcnMmJk9iamVjdC5rZXlzKGUucGFyYW1ldGVycykubGVuZ3RoKXt2YXIgcj1bXTtPYmplY3Qua2V5cyhlLnBhcmFtZXRlcnMpLmZvckVhY2goZnVuY3Rpb24odCl7ci5wdXNoKHQrIj0iK2UucGFyYW1ldGVyc1t0XSl9KSx0Kz0iYT1mbXRwOiIrbisiICIrci5qb2luKCI7IikrIlxyXG4ifXJldHVybiB0fSxyLnBhcnNlUnRjcEZiPWZ1bmN0aW9uKGUpe3ZhciB0PWUuc3Vic3RyKGUuaW5kZXhPZigiICIpKzEpLnNwbGl0KCIgIik7cmV0dXJue3R5cGU6dC5zaGlmdCgpLHBhcmFtZXRlcjp0LmpvaW4oIiAiKX19LHIud3JpdGVSdGNwRmI9ZnVuY3Rpb24oZSl7dmFyIHQ9IiIsbj1lLnBheWxvYWRUeXBlO3JldHVybiB2b2lkIDAhPT1lLnByZWZlcnJlZFBheWxvYWRUeXBlJiYobj1lLnByZWZlcnJlZFBheWxvYWRUeXBlKSxlLnJ0Y3BGZWVkYmFjayYmZS5ydGNwRmVlZGJhY2subGVuZ3RoJiZlLnJ0Y3BGZWVkYmFjay5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QrPSJhPXJ0Y3AtZmI6IituKyIgIitlLnR5cGUrKGUucGFyYW1ldGVyJiZlLnBhcmFtZXRlci5sZW5ndGg/IiAiK2UucGFyYW1ldGVyOiIiKSsiXHJcbiJ9KSx0fSxyLnBhcnNlU3NyY01lZGlhPWZ1bmN0aW9uKGUpe3ZhciB0PWUuaW5kZXhPZigiICIpLG49e3NzcmM6cGFyc2VJbnQoZS5zdWJzdHIoNyx0LTcpLDEwKX0scj1lLmluZGV4T2YoIjoiLHQpO3JldHVybiByPi0xPyhuLmF0dHJpYnV0ZT1lLnN1YnN0cih0KzEsci10LTEpLG4udmFsdWU9ZS5zdWJzdHIocisxKSk6bi5hdHRyaWJ1dGU9ZS5zdWJzdHIodCsxKSxufSxyLmdldE1pZD1mdW5jdGlvbihlKXt2YXIgdD1yLm1hdGNoUHJlZml4KGUsImE9bWlkOiIpWzBdO2lmKHQpcmV0dXJuIHQuc3Vic3RyKDYpfSxyLnBhcnNlRmluZ2VycHJpbnQ9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zdWJzdHIoMTQpLnNwbGl0KCIgIik7cmV0dXJue2FsZ29yaXRobTp0WzBdLnRvTG93ZXJDYXNlKCksdmFsdWU6dFsxXX19LHIuZ2V0RHRsc1BhcmFtZXRlcnM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57cm9sZToiYXV0byIsZmluZ2VycHJpbnRzOnIubWF0Y2hQcmVmaXgoZSt0LCJhPWZpbmdlcnByaW50OiIpLm1hcChyLnBhcnNlRmluZ2VycHJpbnQpfX0sci53cml0ZUR0bHNQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUsdCl7dmFyIG49ImE9c2V0dXA6Iit0KyJcclxuIjtyZXR1cm4gZS5maW5nZXJwcmludHMuZm9yRWFjaChmdW5jdGlvbihlKXtuKz0iYT1maW5nZXJwcmludDoiK2UuYWxnb3JpdGhtKyIgIitlLnZhbHVlKyJcclxuIn0pLG59LHIuZ2V0SWNlUGFyYW1ldGVycz1mdW5jdGlvbihlLHQpe3ZhciBuPXIuc3BsaXRMaW5lcyhlKTtyZXR1cm57dXNlcm5hbWVGcmFnbWVudDoobj1uLmNvbmNhdChyLnNwbGl0TGluZXModCkpKS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lLmluZGV4T2YoImE9aWNlLXVmcmFnOiIpfSlbMF0uc3Vic3RyKDEyKSxwYXNzd29yZDpuLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4gMD09PWUuaW5kZXhPZigiYT1pY2UtcHdkOiIpfSlbMF0uc3Vic3RyKDEwKX19LHIud3JpdGVJY2VQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUpe3JldHVybiJhPWljZS11ZnJhZzoiK2UudXNlcm5hbWVGcmFnbWVudCsiXHJcbmE9aWNlLXB3ZDoiK2UucGFzc3dvcmQrIlxyXG4ifSxyLnBhcnNlUnRwUGFyYW1ldGVycz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9e2NvZGVjczpbXSxoZWFkZXJFeHRlbnNpb25zOltdLGZlY01lY2hhbmlzbXM6W10scnRjcDpbXX0sbj1yLnNwbGl0TGluZXMoZSlbMF0uc3BsaXQoIiAiKSxpPTM7aTxuLmxlbmd0aDtpKyspe3ZhciBhPW5baV0sbz1yLm1hdGNoUHJlZml4KGUsImE9cnRwbWFwOiIrYSsiICIpWzBdO2lmKG8pe3ZhciBzPXIucGFyc2VSdHBNYXAobyksYz1yLm1hdGNoUHJlZml4KGUsImE9Zm10cDoiK2ErIiAiKTtzd2l0Y2gocy5wYXJhbWV0ZXJzPWMubGVuZ3RoP3IucGFyc2VGbXRwKGNbMF0pOnt9LHMucnRjcEZlZWRiYWNrPXIubWF0Y2hQcmVmaXgoZSwiYT1ydGNwLWZiOiIrYSsiICIpLm1hcChyLnBhcnNlUnRjcEZiKSx0LmNvZGVjcy5wdXNoKHMpLHMubmFtZS50b1VwcGVyQ2FzZSgpKXtjYXNlIlJFRCI6Y2FzZSJVTFBGRUMiOnQuZmVjTWVjaGFuaXNtcy5wdXNoKHMubmFtZS50b1VwcGVyQ2FzZSgpKX19fXJldHVybiByLm1hdGNoUHJlZml4KGUsImE9ZXh0bWFwOiIpLmZvckVhY2goZnVuY3Rpb24oZSl7dC5oZWFkZXJFeHRlbnNpb25zLnB1c2goci5wYXJzZUV4dG1hcChlKSl9KSx0fSxyLndyaXRlUnRwRGVzY3JpcHRpb249ZnVuY3Rpb24oZSx0KXt2YXIgbj0iIjtuKz0ibT0iK2UrIiAiLG4rPXQuY29kZWNzLmxlbmd0aD4wPyI5IjoiMCIsbis9IiBVRFAvVExTL1JUUC9TQVZQRiAiLG4rPXQuY29kZWNzLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09ZS5wcmVmZXJyZWRQYXlsb2FkVHlwZT9lLnByZWZlcnJlZFBheWxvYWRUeXBlOmUucGF5bG9hZFR5cGV9KS5qb2luKCIgIikrIlxyXG4iLG4rPSJjPUlOIElQNCAwLjAuMC4wXHJcbiIsbis9ImE9cnRjcDo5IElOIElQNCAwLjAuMC4wXHJcbiIsdC5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihlKXtuKz1yLndyaXRlUnRwTWFwKGUpLG4rPXIud3JpdGVGbXRwKGUpLG4rPXIud3JpdGVSdGNwRmIoZSl9KTt2YXIgaT0wO3JldHVybiB0LmNvZGVjcy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UubWF4cHRpbWU+aSYmKGk9ZS5tYXhwdGltZSl9KSxpPjAmJihuKz0iYT1tYXhwdGltZToiK2krIlxyXG4iKSxuKz0iYT1ydGNwLW11eFxyXG4iLHQuaGVhZGVyRXh0ZW5zaW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGUpe24rPXIud3JpdGVFeHRtYXAoZSl9KSxufSxyLnBhcnNlUnRwRW5jb2RpbmdQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUpe3ZhciB0LG49W10saT1yLnBhcnNlUnRwUGFyYW1ldGVycyhlKSxhPS0xIT09aS5mZWNNZWNoYW5pc21zLmluZGV4T2YoIlJFRCIpLG89LTEhPT1pLmZlY01lY2hhbmlzbXMuaW5kZXhPZigiVUxQRkVDIikscz1yLm1hdGNoUHJlZml4KGUsImE9c3NyYzoiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHIucGFyc2VTc3JjTWVkaWEoZSl9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuImNuYW1lIj09PWUuYXR0cmlidXRlfSksYz1zLmxlbmd0aD4wJiZzWzBdLnNzcmMsZD1yLm1hdGNoUHJlZml4KGUsImE9c3NyYy1ncm91cDpGSUQiKS5tYXAoZnVuY3Rpb24oZSl7dmFyIHQ9ZS5zcGxpdCgiICIpO3JldHVybiB0LnNoaWZ0KCksdC5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHBhcnNlSW50KGUsMTApfSl9KTtkLmxlbmd0aD4wJiZkWzBdLmxlbmd0aD4xJiZkWzBdWzBdPT09YyYmKHQ9ZFswXVsxXSksaS5jb2RlY3MuZm9yRWFjaChmdW5jdGlvbihlKXtpZigiUlRYIj09PWUubmFtZS50b1VwcGVyQ2FzZSgpJiZlLnBhcmFtZXRlcnMuYXB0KXt2YXIgcj17c3NyYzpjLGNvZGVjUGF5bG9hZFR5cGU6cGFyc2VJbnQoZS5wYXJhbWV0ZXJzLmFwdCwxMCkscnR4Ontzc3JjOnR9fTtuLnB1c2gociksYSYmKChyPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocikpKS5mZWM9e3NzcmM6dCxtZWNoYW5pc206bz8icmVkK3VscGZlYyI6InJlZCJ9LG4ucHVzaChyKSl9fSksMD09PW4ubGVuZ3RoJiZjJiZuLnB1c2goe3NzcmM6Y30pO3ZhciB1PXIubWF0Y2hQcmVmaXgoZSwiYj0iKTtyZXR1cm4gdS5sZW5ndGgmJigwPT09dVswXS5pbmRleE9mKCJiPVRJQVM6Iik/dT1wYXJzZUludCh1WzBdLnN1YnN0cig3KSwxMCk6MD09PXVbMF0uaW5kZXhPZigiYj1BUzoiKSYmKHU9cGFyc2VJbnQodVswXS5zdWJzdHIoNSksMTApKSxuLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5tYXhCaXRyYXRlPXV9KSksbn0sci5wYXJzZVJ0Y3BQYXJhbWV0ZXJzPWZ1bmN0aW9uKGUpe3ZhciB0PXt9LG49ci5tYXRjaFByZWZpeChlLCJhPXNzcmM6IikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiByLnBhcnNlU3NyY01lZGlhKGUpfSkuZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiJjbmFtZSI9PT1lLmF0dHJpYnV0ZX0pWzBdO24mJih0LmNuYW1lPW4udmFsdWUsdC5zc3JjPW4uc3NyYyk7dmFyIGk9ci5tYXRjaFByZWZpeChlLCJhPXJ0Y3AtcnNpemUiKTt0LnJlZHVjZWRTaXplPWkubGVuZ3RoPjAsdC5jb21wb3VuZD0wPT09aS5sZW5ndGg7dmFyIGE9ci5tYXRjaFByZWZpeChlLCJhPXJ0Y3AtbXV4Iik7cmV0dXJuIHQubXV4PWEubGVuZ3RoPjAsdH0sci5wYXJzZU1zaWQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj1yLm1hdGNoUHJlZml4KGUsImE9bXNpZDoiKTtpZigxPT09bi5sZW5ndGgpcmV0dXJue3N0cmVhbToodD1uWzBdLnN1YnN0cig3KS5zcGxpdCgiICIpKVswXSx0cmFjazp0WzFdfTt2YXIgaT1yLm1hdGNoUHJlZml4KGUsImE9c3NyYzoiKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHIucGFyc2VTc3JjTWVkaWEoZSl9KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIm1zaWQiPT09ZS5hdHRyaWJ1dGV9KTtyZXR1cm4gaS5sZW5ndGg+MD97c3RyZWFtOih0PWlbMF0udmFsdWUuc3BsaXQoIiAiKSlbMF0sdHJhY2s6dFsxXX06dm9pZCAwfSxyLndyaXRlU2Vzc2lvbkJvaWxlcnBsYXRlPWZ1bmN0aW9uKCl7cmV0dXJuInY9MFxyXG5vPXRoaXNpc2FkYXB0ZXJvcnRjIDgxNjk2Mzk5MTU2NDY5NDMxMzcgMiBJTiBJUDQgMTI3LjAuMC4xXHJcbnM9LVxyXG50PTAgMFxyXG4ifSxyLndyaXRlTWVkaWFTZWN0aW9uPWZ1bmN0aW9uKGUsdCxuLGkpe3ZhciBhPXIud3JpdGVSdHBEZXNjcmlwdGlvbihlLmtpbmQsdCk7aWYoYSs9ci53cml0ZUljZVBhcmFtZXRlcnMoZS5pY2VHYXRoZXJlci5nZXRMb2NhbFBhcmFtZXRlcnMoKSksYSs9ci53cml0ZUR0bHNQYXJhbWV0ZXJzKGUuZHRsc1RyYW5zcG9ydC5nZXRMb2NhbFBhcmFtZXRlcnMoKSwib2ZmZXIiPT09bj8iYWN0cGFzcyI6ImFjdGl2ZSIpLGErPSJhPW1pZDoiK2UubWlkKyJcclxuIixlLmRpcmVjdGlvbj9hKz0iYT0iK2UuZGlyZWN0aW9uKyJcclxuIjplLnJ0cFNlbmRlciYmZS5ydHBSZWNlaXZlcj9hKz0iYT1zZW5kcmVjdlxyXG4iOmUucnRwU2VuZGVyP2ErPSJhPXNlbmRvbmx5XHJcbiI6ZS5ydHBSZWNlaXZlcj9hKz0iYT1yZWN2b25seVxyXG4iOmErPSJhPWluYWN0aXZlXHJcbiIsZS5ydHBTZW5kZXIpe3ZhciBvPSJtc2lkOiIraS5pZCsiICIrZS5ydHBTZW5kZXIudHJhY2suaWQrIlxyXG4iO2ErPSJhPSIrbyxhKz0iYT1zc3JjOiIrZS5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnNzcmMrIiAiK28sZS5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCYmKGErPSJhPXNzcmM6IitlLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMrIiAiK28sYSs9ImE9c3NyYy1ncm91cDpGSUQgIitlLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYysiICIrZS5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eC5zc3JjKyJcclxuIil9cmV0dXJuIGErPSJhPXNzcmM6IitlLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0uc3NyYysiIGNuYW1lOiIrci5sb2NhbENOYW1lKyJcclxuIixlLnJ0cFNlbmRlciYmZS5zZW5kRW5jb2RpbmdQYXJhbWV0ZXJzWzBdLnJ0eCYmKGErPSJhPXNzcmM6IitlLnNlbmRFbmNvZGluZ1BhcmFtZXRlcnNbMF0ucnR4LnNzcmMrIiBjbmFtZToiK3IubG9jYWxDTmFtZSsiXHJcbiIpLGF9LHIuZ2V0RGlyZWN0aW9uPWZ1bmN0aW9uKGUsdCl7Zm9yKHZhciBuPXIuc3BsaXRMaW5lcyhlKSxpPTA7aTxuLmxlbmd0aDtpKyspc3dpdGNoKG5baV0pe2Nhc2UiYT1zZW5kcmVjdiI6Y2FzZSJhPXNlbmRvbmx5IjpjYXNlImE9cmVjdm9ubHkiOmNhc2UiYT1pbmFjdGl2ZSI6cmV0dXJuIG5baV0uc3Vic3RyKDIpfXJldHVybiB0P3IuZ2V0RGlyZWN0aW9uKHQpOiJzZW5kcmVjdiJ9LHIuZ2V0S2luZD1mdW5jdGlvbihlKXtyZXR1cm4gci5zcGxpdExpbmVzKGUpWzBdLnNwbGl0KCIgIilbMF0uc3Vic3RyKDIpfSxyLmlzUmVqZWN0ZWQ9ZnVuY3Rpb24oZSl7cmV0dXJuIjAiPT09ZS5zcGxpdCgiICIsMilbMV19LGUuZXhwb3J0cz1yfSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2UuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciBlPW5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLmJpbmQobmF2aWdhdG9yLm1lZGlhRGV2aWNlcyk7bmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWE9ZnVuY3Rpb24odCl7cmV0dXJuIGUodCkuY2F0Y2goZnVuY3Rpb24oZSl7cmV0dXJuIFByb21pc2UucmVqZWN0KGZ1bmN0aW9uKGUpe3JldHVybntuYW1lOntQZXJtaXNzaW9uRGVuaWVkRXJyb3I6Ik5vdEFsbG93ZWRFcnJvciJ9W2UubmFtZV18fGUubmFtZSxtZXNzYWdlOmUubWVzc2FnZSxjb25zdHJhaW50OmUuY29uc3RyYWludCx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLm5hbWV9fX0oZSkpfSl9fX0sZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKDApLmJyb3dzZXJEZXRhaWxzLGk9e3NoaW1PblRyYWNrOmZ1bmN0aW9uKCl7Im9iamVjdCIhPXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb258fCJvbnRyYWNrImluIHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGV8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLCJvbnRyYWNrIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX29udHJhY2t9LHNldDpmdW5jdGlvbihlKXt0aGlzLl9vbnRyYWNrJiYodGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCJ0cmFjayIsdGhpcy5fb250cmFjayksdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCJhZGRzdHJlYW0iLHRoaXMuX29udHJhY2twb2x5KSksdGhpcy5hZGRFdmVudExpc3RlbmVyKCJ0cmFjayIsdGhpcy5fb250cmFjaz1lKSx0aGlzLmFkZEV2ZW50TGlzdGVuZXIoImFkZHN0cmVhbSIsdGhpcy5fb250cmFja3BvbHk9ZnVuY3Rpb24oZSl7ZS5zdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgbj1uZXcgRXZlbnQoInRyYWNrIik7bi50cmFjaz10LG4ucmVjZWl2ZXI9e3RyYWNrOnR9LG4uc3RyZWFtcz1bZS5zdHJlYW1dLHRoaXMuZGlzcGF0Y2hFdmVudChuKX0uYmluZCh0aGlzKSl9LmJpbmQodGhpcykpfX0pfSxzaGltU291cmNlT2JqZWN0OmZ1bmN0aW9uKCl7Im9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJighd2luZG93LkhUTUxNZWRpYUVsZW1lbnR8fCJzcmNPYmplY3QiaW4gd2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlfHxPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LkhUTUxNZWRpYUVsZW1lbnQucHJvdG90eXBlLCJzcmNPYmplY3QiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb3pTcmNPYmplY3R9LHNldDpmdW5jdGlvbihlKXt0aGlzLm1velNyY09iamVjdD1lfX0pKX0sc2hpbVBlZXJDb25uZWN0aW9uOmZ1bmN0aW9uKCl7aWYoIm9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJih3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb258fHdpbmRvdy5tb3pSVENQZWVyQ29ubmVjdGlvbikpe3dpbmRvdy5SVENQZWVyQ29ubmVjdGlvbnx8KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbj1mdW5jdGlvbihlLHQpe2lmKHIudmVyc2lvbjwzOCYmZSYmZS5pY2VTZXJ2ZXJzKXtmb3IodmFyIG49W10saT0wO2k8ZS5pY2VTZXJ2ZXJzLmxlbmd0aDtpKyspe3ZhciBhPWUuaWNlU2VydmVyc1tpXTtpZihhLmhhc093blByb3BlcnR5KCJ1cmxzIikpZm9yKHZhciBvPTA7bzxhLnVybHMubGVuZ3RoO28rKyl7dmFyIHM9e3VybDphLnVybHNbb119OzA9PT1hLnVybHNbb10uaW5kZXhPZigidHVybiIpJiYocy51c2VybmFtZT1hLnVzZXJuYW1lLHMuY3JlZGVudGlhbD1hLmNyZWRlbnRpYWwpLG4ucHVzaChzKX1lbHNlIG4ucHVzaChlLmljZVNlcnZlcnNbaV0pfWUuaWNlU2VydmVycz1ufXJldHVybiBuZXcgbW96UlRDUGVlckNvbm5lY3Rpb24oZSx0KX0sd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZT1tb3pSVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUsbW96UlRDUGVlckNvbm5lY3Rpb24uZ2VuZXJhdGVDZXJ0aWZpY2F0ZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdy5SVENQZWVyQ29ubmVjdGlvbiwiZ2VuZXJhdGVDZXJ0aWZpY2F0ZSIse2dldDpmdW5jdGlvbigpe3JldHVybiBtb3pSVENQZWVyQ29ubmVjdGlvbi5nZW5lcmF0ZUNlcnRpZmljYXRlfX0pLHdpbmRvdy5SVENTZXNzaW9uRGVzY3JpcHRpb249bW96UlRDU2Vzc2lvbkRlc2NyaXB0aW9uLHdpbmRvdy5SVENJY2VDYW5kaWRhdGU9bW96UlRDSWNlQ2FuZGlkYXRlKSxbInNldExvY2FsRGVzY3JpcHRpb24iLCJzZXRSZW1vdGVEZXNjcmlwdGlvbiIsImFkZEljZUNhbmRpZGF0ZSJdLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlW2VdO1JUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZVtlXT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF09bmV3KCJhZGRJY2VDYW5kaWRhdGUiPT09ZT9SVENJY2VDYW5kaWRhdGU6UlRDU2Vzc2lvbkRlc2NyaXB0aW9uKShhcmd1bWVudHNbMF0pLHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0pO3ZhciBlPVJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRJY2VDYW5kaWRhdGU7UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmFkZEljZUNhbmRpZGF0ZT1mdW5jdGlvbigpe3JldHVybiBhcmd1bWVudHNbMF0/ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyk6KGFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLmFwcGx5KG51bGwpLFByb21pc2UucmVzb2x2ZSgpKX07dmFyIHQ9e2luYm91bmRydHA6ImluYm91bmQtcnRwIixvdXRib3VuZHJ0cDoib3V0Ym91bmQtcnRwIixjYW5kaWRhdGVwYWlyOiJjYW5kaWRhdGUtcGFpciIsbG9jYWxjYW5kaWRhdGU6ImxvY2FsLWNhbmRpZGF0ZSIscmVtb3RlY2FuZGlkYXRlOiJyZW1vdGUtY2FuZGlkYXRlIn0sbj1SVENQZWVyQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0U3RhdHM7UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLmdldFN0YXRzPWZ1bmN0aW9uKGUsaSxhKXtyZXR1cm4gbi5hcHBseSh0aGlzLFtlfHxudWxsXSkudGhlbihmdW5jdGlvbihlKXtpZihyLnZlcnNpb248NDgmJihlPWZ1bmN0aW9uKGUpe3ZhciB0PW5ldyBNYXA7cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24obil7dC5zZXQobixlW25dKSx0W25dPWVbbl19KSx0fShlKSksci52ZXJzaW9uPDUzJiYhaSl0cnl7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2UudHlwZT10W2UudHlwZV18fGUudHlwZX0pfWNhdGNoKG4pe2lmKCJUeXBlRXJyb3IiIT09bi5uYW1lKXRocm93IG47ZS5mb3JFYWNoKGZ1bmN0aW9uKG4scil7ZS5zZXQocixPYmplY3QuYXNzaWduKHt9LG4se3R5cGU6dFtuLnR5cGVdfHxuLnR5cGV9KSl9KX1yZXR1cm4gZX0pLnRoZW4oaSxhKX19fX07ZS5leHBvcnRzPXtzaGltT25UcmFjazppLnNoaW1PblRyYWNrLHNoaW1Tb3VyY2VPYmplY3Q6aS5zaGltU291cmNlT2JqZWN0LHNoaW1QZWVyQ29ubmVjdGlvbjppLnNoaW1QZWVyQ29ubmVjdGlvbixzaGltR2V0VXNlck1lZGlhOm4oMTEpfX0sZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0Ijt2YXIgcj1uKDApLmxvZyxpPW4oMCkuYnJvd3NlckRldGFpbHM7ZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24oZSl7cmV0dXJue25hbWU6e0ludGVybmFsRXJyb3I6Ik5vdFJlYWRhYmxlRXJyb3IiLE5vdFN1cHBvcnRlZEVycm9yOiJUeXBlRXJyb3IiLFBlcm1pc3Npb25EZW5pZWRFcnJvcjoiTm90QWxsb3dlZEVycm9yIixTZWN1cml0eUVycm9yOiJOb3RBbGxvd2VkRXJyb3IifVtlLm5hbWVdfHxlLm5hbWUsbWVzc2FnZTp7IlRoZSBvcGVyYXRpb24gaXMgaW5zZWN1cmUuIjoiVGhlIHJlcXVlc3QgaXMgbm90IGFsbG93ZWQgYnkgdGhlIHVzZXIgYWdlbnQgb3IgdGhlIHBsYXRmb3JtIGluIHRoZSBjdXJyZW50IGNvbnRleHQuIn1bZS5tZXNzYWdlXXx8ZS5tZXNzYWdlLGNvbnN0cmFpbnQ6ZS5jb25zdHJhaW50LHRvU3RyaW5nOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubmFtZSsodGhpcy5tZXNzYWdlJiYiOiAiKSt0aGlzLm1lc3NhZ2V9fX0sdD1mdW5jdGlvbih0LG4sYSl7dmFyIG89ZnVuY3Rpb24oZSl7aWYoIm9iamVjdCIhPXR5cGVvZiBlfHxlLnJlcXVpcmUpcmV0dXJuIGU7dmFyIHQ9W107cmV0dXJuIE9iamVjdC5rZXlzKGUpLmZvckVhY2goZnVuY3Rpb24obil7aWYoInJlcXVpcmUiIT09biYmImFkdmFuY2VkIiE9PW4mJiJtZWRpYVNvdXJjZSIhPT1uKXt2YXIgcj1lW25dPSJvYmplY3QiPT10eXBlb2YgZVtuXT9lW25dOntpZGVhbDplW25dfTtpZih2b2lkIDA9PT1yLm1pbiYmdm9pZCAwPT09ci5tYXgmJnZvaWQgMD09PXIuZXhhY3R8fHQucHVzaChuKSx2b2lkIDAhPT1yLmV4YWN0JiYoIm51bWJlciI9PXR5cGVvZiByLmV4YWN0P3IubWluPXIubWF4PXIuZXhhY3Q6ZVtuXT1yLmV4YWN0LGRlbGV0ZSByLmV4YWN0KSx2b2lkIDAhPT1yLmlkZWFsKXtlLmFkdmFuY2VkPWUuYWR2YW5jZWR8fFtdO3ZhciBpPXt9OyJudW1iZXIiPT10eXBlb2Ygci5pZGVhbD9pW25dPXttaW46ci5pZGVhbCxtYXg6ci5pZGVhbH06aVtuXT1yLmlkZWFsLGUuYWR2YW5jZWQucHVzaChpKSxkZWxldGUgci5pZGVhbCxPYmplY3Qua2V5cyhyKS5sZW5ndGh8fGRlbGV0ZSBlW25dfX19KSx0Lmxlbmd0aCYmKGUucmVxdWlyZT10KSxlfTtyZXR1cm4gdD1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHQpKSxpLnZlcnNpb248MzgmJihyKCJzcGVjOiAiK0pTT04uc3RyaW5naWZ5KHQpKSx0LmF1ZGlvJiYodC5hdWRpbz1vKHQuYXVkaW8pKSx0LnZpZGVvJiYodC52aWRlbz1vKHQudmlkZW8pKSxyKCJmZjM3OiAiK0pTT04uc3RyaW5naWZ5KHQpKSksbmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYSh0LG4sZnVuY3Rpb24odCl7YShlKHQpKX0pfTtpZihuYXZpZ2F0b3IubWVkaWFEZXZpY2VzfHwobmF2aWdhdG9yLm1lZGlhRGV2aWNlcz17Z2V0VXNlck1lZGlhOmZ1bmN0aW9uKGUpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLHIpe3QoZSxuLHIpfSl9LGFkZEV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oKXt9LHJlbW92ZUV2ZW50TGlzdGVuZXI6ZnVuY3Rpb24oKXt9fSksbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5lbnVtZXJhdGVEZXZpY2VzPW5hdmlnYXRvci5tZWRpYURldmljZXMuZW51bWVyYXRlRGV2aWNlc3x8ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSl7ZShbe2tpbmQ6ImF1ZGlvaW5wdXQiLGRldmljZUlkOiJkZWZhdWx0IixsYWJlbDoiIixncm91cElkOiIifSx7a2luZDoidmlkZW9pbnB1dCIsZGV2aWNlSWQ6ImRlZmF1bHQiLGxhYmVsOiIiLGdyb3VwSWQ6IiJ9XSl9KX0saS52ZXJzaW9uPDQxKXt2YXIgbj1uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXMuYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmVudW1lcmF0ZURldmljZXM9ZnVuY3Rpb24oKXtyZXR1cm4gbigpLnRoZW4odm9pZCAwLGZ1bmN0aW9uKGUpe2lmKCJOb3RGb3VuZEVycm9yIj09PWUubmFtZSlyZXR1cm5bXTt0aHJvdyBlfSl9fWlmKGkudmVyc2lvbjw0OSl7dmFyIGE9bmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEuYmluZChuYXZpZ2F0b3IubWVkaWFEZXZpY2VzKTtuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYT1mdW5jdGlvbih0KXtyZXR1cm4gYSh0KS50aGVuKGZ1bmN0aW9uKGUpe2lmKHQuYXVkaW8mJiFlLmdldEF1ZGlvVHJhY2tzKCkubGVuZ3RofHx0LnZpZGVvJiYhZS5nZXRWaWRlb1RyYWNrcygpLmxlbmd0aCl0aHJvdyBlLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24oZSl7ZS5zdG9wKCl9KSxuZXcgRE9NRXhjZXB0aW9uKCJUaGUgb2JqZWN0IGNhbiBub3QgYmUgZm91bmQgaGVyZS4iLCJOb3RGb3VuZEVycm9yIik7cmV0dXJuIGV9LGZ1bmN0aW9uKHQpe3JldHVybiBQcm9taXNlLnJlamVjdChlKHQpKX0pfX1uYXZpZ2F0b3IuZ2V0VXNlck1lZGlhPWZ1bmN0aW9uKGUsbixyKXtpZihpLnZlcnNpb248NDQpcmV0dXJuIHQoZSxuLHIpO2NvbnNvbGUud2FybigibmF2aWdhdG9yLmdldFVzZXJNZWRpYSBoYXMgYmVlbiByZXBsYWNlZCBieSBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSIpLG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGUpLnRoZW4obixyKX19fSxmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO3ZhciByPXtzaGltQWRkU3RyZWFtOmZ1bmN0aW9uKCl7Im9iamVjdCIhPXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb258fCJhZGRTdHJlYW0iaW4gd2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZXx8KFJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZS5hZGRTdHJlYW09ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcztlLmdldFRyYWNrcygpLmZvckVhY2goZnVuY3Rpb24obil7dC5hZGRUcmFjayhuLGUpfSl9KX0sc2hpbU9uQWRkU3RyZWFtOmZ1bmN0aW9uKCl7Im9iamVjdCIhPXR5cGVvZiB3aW5kb3d8fCF3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb258fCJvbmFkZHN0cmVhbSJpbiB3aW5kb3cuUlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlfHxPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LlJUQ1BlZXJDb25uZWN0aW9uLnByb3RvdHlwZSwib25hZGRzdHJlYW0iLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fb25hZGRzdHJlYW19LHNldDpmdW5jdGlvbihlKXt0aGlzLl9vbmFkZHN0cmVhbSYmKHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigiYWRkc3RyZWFtIix0aGlzLl9vbmFkZHN0cmVhbSksdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCJ0cmFjayIsdGhpcy5fb25hZGRzdHJlYW1wb2x5KSksdGhpcy5hZGRFdmVudExpc3RlbmVyKCJhZGRzdHJlYW0iLHRoaXMuX29uYWRkc3RyZWFtPWUpLHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigidHJhY2siLHRoaXMuX29uYWRkc3RyZWFtcG9seT1mdW5jdGlvbihlKXt2YXIgdD1lLnN0cmVhbXNbMF07aWYodGhpcy5fc3RyZWFtc3x8KHRoaXMuX3N0cmVhbXM9W10pLCEodGhpcy5fc3RyZWFtcy5pbmRleE9mKHQpPj0wKSl7dGhpcy5fc3RyZWFtcy5wdXNoKHQpO3ZhciBuPW5ldyBFdmVudCgiYWRkc3RyZWFtIik7bi5zdHJlYW09ZS5zdHJlYW1zWzBdLHRoaXMuZGlzcGF0Y2hFdmVudChuKX19LmJpbmQodGhpcykpfX0pfSxzaGltQ2FsbGJhY2tzQVBJOmZ1bmN0aW9uKCl7aWYoIm9iamVjdCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdy5SVENQZWVyQ29ubmVjdGlvbil7dmFyIGU9UlRDUGVlckNvbm5lY3Rpb24ucHJvdG90eXBlLHQ9ZS5jcmVhdGVPZmZlcixuPWUuY3JlYXRlQW5zd2VyLHI9ZS5zZXRMb2NhbERlc2NyaXB0aW9uLGk9ZS5zZXRSZW1vdGVEZXNjcmlwdGlvbixhPWUuYWRkSWNlQ2FuZGlkYXRlO2UuY3JlYXRlT2ZmZXI9ZnVuY3Rpb24oZSxuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoPj0yP2FyZ3VtZW50c1syXTphcmd1bWVudHNbMF0saT10LmFwcGx5KHRoaXMsW3JdKTtyZXR1cm4gbj8oaS50aGVuKGUsbiksUHJvbWlzZS5yZXNvbHZlKCkpOml9LGUuY3JlYXRlQW5zd2VyPWZ1bmN0aW9uKGUsdCl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aD49Mj9hcmd1bWVudHNbMl06YXJndW1lbnRzWzBdLGk9bi5hcHBseSh0aGlzLFtyXSk7cmV0dXJuIHQ/KGkudGhlbihlLHQpLFByb21pc2UucmVzb2x2ZSgpKTppfTt2YXIgbz1mdW5jdGlvbihlLHQsbil7dmFyIGk9ci5hcHBseSh0aGlzLFtlXSk7cmV0dXJuIG4/KGkudGhlbih0LG4pLFByb21pc2UucmVzb2x2ZSgpKTppfTtlLnNldExvY2FsRGVzY3JpcHRpb249byxvPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1pLmFwcGx5KHRoaXMsW2VdKTtyZXR1cm4gbj8oci50aGVuKHQsbiksUHJvbWlzZS5yZXNvbHZlKCkpOnJ9LGUuc2V0UmVtb3RlRGVzY3JpcHRpb249byxvPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1hLmFwcGx5KHRoaXMsW2VdKTtyZXR1cm4gbj8oci50aGVuKHQsbiksUHJvbWlzZS5yZXNvbHZlKCkpOnJ9LGUuYWRkSWNlQ2FuZGlkYXRlPW99fSxzaGltR2V0VXNlck1lZGlhOmZ1bmN0aW9uKCl7bmF2aWdhdG9yLmdldFVzZXJNZWRpYXx8KG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWE/bmF2aWdhdG9yLmdldFVzZXJNZWRpYT1uYXZpZ2F0b3Iud2Via2l0R2V0VXNlck1lZGlhLmJpbmQobmF2aWdhdG9yKTpuYXZpZ2F0b3IubWVkaWFEZXZpY2VzJiZuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSYmKG5hdmlnYXRvci5nZXRVc2VyTWVkaWE9ZnVuY3Rpb24oZSx0LG4pe25hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKGUpLnRoZW4odCxuKX0uYmluZChuYXZpZ2F0b3IpKSl9fTtlLmV4cG9ydHM9e3NoaW1DYWxsYmFja3NBUEk6ci5zaGltQ2FsbGJhY2tzQVBJLHNoaW1BZGRTdHJlYW06ci5zaGltQWRkU3RyZWFtLHNoaW1PbkFkZFN0cmVhbTpyLnNoaW1PbkFkZFN0cmVhbSxzaGltR2V0VXNlck1lZGlhOnIuc2hpbUdldFVzZXJNZWRpYX19LGZ1bmN0aW9uKGUsdCxuKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gcihlLHQpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO3IuZW51bWVyYWJsZT1yLmVudW1lcmFibGV8fCExLHIuY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiByJiYoci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsci5rZXkscil9fXZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0KXshZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX0odGhpcyxlKTtpZih0aGlzLl90ZXh0TWVzc2FnZT10LnRleHRNZXNzYWdlLHRoaXMuX2RhdGFTaXplPXQuZGF0YVNpemUsdGhpcy5fZGF0YT1bXSx0aGlzLl9wcm9ncmVzcz0wLHRoaXMuX3NlbmRpbmdUaW1lPXQuc2VuZGluZ1RpbWUsdGhpcy5fcHJvZ3Jlc3NQZXJjZW50YWdlPTAsIXRoaXMuX3RleHRNZXNzYWdlLmJvZHl8fCF0aGlzLl90ZXh0TWVzc2FnZS5ib2R5LnZhbHVlKXRocm93IEVycm9yKCJbUDJQRGF0YVJlY2VpdmVyIGNvbnN0cnVjdG9yXSBpbnZhbGlkIEh5cGVydHkgUmVzb3VyY2UgbWVzc2FnZS4gRG9lcyBub3QgY29tdGFpbiBhIGJvZHkudmFsdWUiLHQpfXJldHVybiBmdW5jdGlvbihlLHQsbil7dCYmcihlLnByb3RvdHlwZSx0KSxuJiZyKGUsbil9KGUsW3trZXk6InJlY2VpdmVUZXh0Iix2YWx1ZTpmdW5jdGlvbihlKXtpZih0aGlzLl9kYXRhLnB1c2goZS5kYXRhKSx0aGlzLl9wcm9ncmVzcz10aGlzLl9wcm9ncmVzcytlLmRhdGEubGVuZ3RoLHRoaXMuX3Byb2dyZXNzPT09dGhpcy5fZGF0YVNpemUpe3ZhciB0PXRoaXMuX2RhdGEuam9pbigiIik7dGhpcy5fcHJvY2Vzc0xhc3RNZXNzYWdlKHQpfWVsc2V7dmFyIG49cGFyc2VJbnQoMTAwKnRoaXMuX3Byb2dyZXNzL3RoaXMuX2RhdGFTaXplKTtuLXRoaXMuX3Byb2dyZXNzUGVyY2VudGFnZT4wJiYodGhpcy5fcHJvZ3Jlc3NQZXJjZW50YWdlPW4sY29uc29sZS5kZWJ1ZygiW1AyUERhdGFSZWNlaXZlcl0gcHJvZ3Jlc3Npbmc6ICIsdGhpcy5fcHJvZ3Jlc3NQZXJjZW50YWdlKSx0aGlzLl9vblByb2dyZXNzKHRoaXMuX3Byb2dyZXNzUGVyY2VudGFnZSkpfX19LHtrZXk6InJlY2VpdmVCaW5hcnkiLHZhbHVlOmZ1bmN0aW9uKGUpe2lmKHRoaXMuX2RhdGEucHVzaChlKSx0aGlzLl9wcm9ncmVzcz10aGlzLl9wcm9ncmVzcytlLmJ5dGVMZW5ndGgsdGhpcy5fcHJvZ3Jlc3M9PT10aGlzLl9kYXRhU2l6ZSl0aGlzLl9wcm9jZXNzTGFzdE1lc3NhZ2UodGhpcy5fZGF0YSk7ZWxzZSBpZih0aGlzLl9vblByb2dyZXNzKXt2YXIgdD1wYXJzZUludCgxMDAqdGhpcy5fcHJvZ3Jlc3MvdGhpcy5fZGF0YVNpemUpO3QtdGhpcy5fcHJvZ3Jlc3NQZXJjZW50YWdlPjAmJih0aGlzLl9wcm9ncmVzc1BlcmNlbnRhZ2U9dCxjb25zb2xlLmRlYnVnKCJbUDJQRGF0YVJlY2VpdmVyXSBwcm9ncmVzc2luZzogIix0aGlzLl9wcm9ncmVzc1BlcmNlbnRhZ2UpLHRoaXMuX29uUHJvZ3Jlc3ModGhpcy5fcHJvZ3Jlc3NQZXJjZW50YWdlKSl9fX0se2tleToiX3Byb2Nlc3NMYXN0TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9KG5ldyBEYXRlKS5nZXRUaW1lKCktdGhpcy5fc2VuZGluZ1RpbWUsbj10aGlzLl90ZXh0TWVzc2FnZTtuLmJvZHkudmFsdWUuY29udGVudD1lLHRoaXMuX29uUmVjZWl2ZWQobix0KX19LHtrZXk6Im9uUmVjZWl2ZWQiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX29uUmVjZWl2ZWQ9ZX19LHtrZXk6Im9uUHJvZ3Jlc3MiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMuX29uUHJvZ3Jlc3M9ZX19LHtrZXk6ImZyb20iLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90ZXh0TWVzc2FnZS5mcm9tfX0se2tleToidG8iLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl90ZXh0TWVzc2FnZS50b319LHtrZXk6ImlkIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGV4dE1lc3NhZ2UuaWR9fSx7a2V5OiJ0eXBlIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fdGV4dE1lc3NhZ2UudHlwZX19XSksZX0oKTt0LmE9aX0sZnVuY3Rpb24oZSx0LG4peyJ1c2Ugc3RyaWN0IjtmdW5jdGlvbiByKGUsdCl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPXRbbl07ci5lbnVtZXJhYmxlPXIuZW51bWVyYWJsZXx8ITEsci5jb25maWd1cmFibGU9ITAsInZhbHVlImluIHImJihyLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxyLmtleSxyKX19dmFyIGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbil7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSk7dGhpcy5fbXNnPXQsdGhpcy5fY2hhbm5lbD1uLHRoaXMuX3BhY2tldFNpemU9MTYzODQsdGhpcy5fYnVmZmVyRnVsbFRocmVzaG9sZD01KnRoaXMuX3BhY2tldFNpemUsdGhpcy5fbXNnT2JqZWN0PXQsdGhpcy5pc0RhdGE9ITEsdGhpcy5faW5pdCgpLHRoaXMuX2NhbmNlbD0hMX1yZXR1cm4gZnVuY3Rpb24oZSx0LG4pe3QmJnIoZS5wcm90b3R5cGUsdCksbiYmcihlLG4pfShlLFt7a2V5OiJjYW5jZWwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fY2FuY2VsPSEwfX0se2tleToiX2luaXQiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGU9KE1hdGgucmFuZG9tKCkqKG5ldyBEYXRlKS5nZXRUaW1lKCkpLnRvU3RyaW5nKDM2KS5yZXBsYWNlKC9cLi9nLCItIiksdD0obmV3IERhdGUpLmdldFRpbWUoKTt0aGlzLl9pbml0aWFsUGFja2V0PXt1dWlkOmUsc2VuZGluZ1RpbWU6dH0sdGhpcy5fbXNnLmJvZHkmJnRoaXMuX21zZy5ib2R5LnZhbHVlJiZ0aGlzLl9tc2cuYm9keS52YWx1ZS5jb250ZW50JiYodGhpcy5pc0RhdGE9ITApLHRoaXMuaXNEYXRhJiZ0aGlzLl9tc2cuYm9keS52YWx1ZS5taW1ldHlwZSYmInRleHQiIT10aGlzLl9tc2cuYm9keS52YWx1ZS5taW1ldHlwZS5zcGxpdCgiLyIpWzBdPyh0aGlzLl9zZW5kPXRoaXMuX3NlbmRCaW5hcnksdGhpcy5faW5pdGlhbFBhY2tldC5kYXRhU2l6ZT10aGlzLl9tc2cuYm9keS52YWx1ZS5jb250ZW50LmJ5dGVMZW5ndGgpOih0aGlzLl9zZW5kPXRoaXMuX3NlbmRUZXh0LHRoaXMuaXNEYXRhJiYodGhpcy5faW5pdGlhbFBhY2tldC5kYXRhU2l6ZT10aGlzLl9tc2cuYm9keS52YWx1ZS5jb250ZW50Lmxlbmd0aCkpLHRoaXMuX2luaXRpYWxQYWNrZXQudGV4dE1lc3NhZ2U9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLl9tc2cpKSx0aGlzLmlzRGF0YT8oZGVsZXRlIHRoaXMuX2luaXRpYWxQYWNrZXQudGV4dE1lc3NhZ2UuYm9keS52YWx1ZS5jb250ZW50LHRoaXMuX2RhdGE9dGhpcy5fbXNnLmJvZHkudmFsdWUuY29udGVudCk6dGhpcy5faW5pdGlhbFBhY2tldC5kYXRhU2l6ZT0wfX0se2tleToiX3NlbmRUZXh0Iix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXt1dWlkOmUsZGF0YTp0fTt0aGlzLl9jaGFubmVsLnNlbmQoSlNPTi5zdHJpbmdpZnkobikpfX0se2tleToiX3NlbmRCaW5hcnkiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcy5fc3RyMmFiKGUpLHI9dGhpcy5fYXBwZW5kQnVmZmVyKG4sdCk7dGhpcy5fY2hhbm5lbC5zZW5kKHIpfX0se2tleToiX3N0cjJhYiIsdmFsdWU6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PW5ldyBBcnJheUJ1ZmZlcigyKmUubGVuZ3RoKSxuPW5ldyBVaW50MTZBcnJheSh0KSxyPTAsaT1lLmxlbmd0aDtyPGk7cisrKW5bcl09ZS5jaGFyQ29kZUF0KHIpO3JldHVybiB0fX0se2tleToiX2FwcGVuZEJ1ZmZlciIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj1uZXcgVWludDhBcnJheShlLmJ5dGVMZW5ndGgrdC5ieXRlTGVuZ3RoKTtyZXR1cm4gbi5zZXQobmV3IFVpbnQ4QXJyYXkoZSksMCksbi5zZXQobmV3IFVpbnQ4QXJyYXkodCksZS5ieXRlTGVuZ3RoKSxuLmJ1ZmZlcn19LHtrZXk6InNlbmREYXRhIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX3NpemU9dGhpcy5faW5pdGlhbFBhY2tldC5kYXRhU2l6ZSxjb25zb2xlLmxvZygiW1AyUERhdGFTZW5kZXJdIHN0YXJ0IHNlbmRpbmcgdG86ICIsdGhpcy5fbXNnLnRvKSx0aGlzLl9zZW5kVGV4dCh0aGlzLl9pbml0aWFsUGFja2V0LnV1aWQsdGhpcy5faW5pdGlhbFBhY2tldCksdGhpcy5pc0RhdGE/dGhpcy5fc2VuZERhdGEoKTp0aGlzLl9vblNlbnQmJnRoaXMuX29uU2VudCgpfX0se2tleToiX3NlbmREYXRhIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBlPXRoaXMsdD17fSxuPXt9O3QubWF4PWUuX3NpemUsbi5tYXg9dC5tYXgsdC52YWx1ZT0wLG4udmFsdWU9MDt2YXIgcixpPWUuX2NoYW5uZWwsYT1lLl9wYWNrZXRTaXplLG89NSphLHM9ITAsYz0hMTsibnVtYmVyIj09dHlwZW9mIGkuYnVmZmVyZWRBbW91bnRMb3dUaHJlc2hvbGQmJihjb25zb2xlLmluZm8oIltQMlBEYXRhU2VuZGVyXSBVc2luZyB0aGUgYnVmZmVyZWRhbW91bnRsb3cgZXZlbnQgZm9yIGZsb3cgY29udHJvbCIpLHM9ITEsbz1hLzIsaS5idWZmZXJlZEFtb3VudExvd1RocmVzaG9sZD1vKTt2YXIgZD1mdW5jdGlvbiBlKCl7aS5yZW1vdmVFdmVudExpc3RlbmVyKCJidWZmZXJlZGFtb3VudGxvdyIsZSksdSgpfSx1PWZ1bmN0aW9uIG4oKXtmb3IoO3QudmFsdWU8dC5tYXgmJiFlLl9jYW5jZWw7KXtpZihpLmJ1ZmZlcmVkQW1vdW50Pm8pcmV0dXJuIHZvaWQocz9zZXRUaW1lb3V0KG4sMjUwKTppLmFkZEV2ZW50TGlzdGVuZXIoImJ1ZmZlcmVkYW1vdW50bG93IixkKSk7cj1lLl9kYXRhLnNsaWNlKHQudmFsdWUsdC52YWx1ZSthKSx0LnZhbHVlK2E8dC5tYXg/dC52YWx1ZSs9YTooYz0hMCx0LnZhbHVlPXQubWF4KSxlLl9zZW5kKGUuX2luaXRpYWxQYWNrZXQudXVpZCxyKSxjJiZlLl9vblNlbnQmJmUuX29uU2VudCgpfX07c2V0VGltZW91dCh1LDUpfX0se2tleToib25TZW50Iix2YWx1ZTpmdW5jdGlvbihlKXt0aGlzLl9vblNlbnQ9ZX19LHtrZXk6Im9uUHJvZ3Jlc3MiLHZhbHVlOmZ1bmN0aW9uKGUpe3RoaXMub25Qcm9ncmVzcz1lfX1dKSxlfSgpO3QuYT1pfV0pLmRlZmF1bHR9KTs=",
      "sourceCodeClassname": "P2PRequesterProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "11.30",
    "description": "P2P Requester Protostub ",
    "language": "javascript",
    "cguid": "4bcb9977c1c46c13278273a67b5fe7aab",
    "type": "ProtoStubs",
    "constraints": {
      "windowSandbox": true
    },
    "objectName": "P2PRequesterProtoStub",
    "configuration": {
      "iceServers": [
        {
          "urls": "turn:numb.viagenie.ca",
          "credential": "zJcH3erd9cUv5Zh",
          "username": "luis-t-duarte@telecom.pt"
        },
        {
          "urls": [
            "stun:stun.voiparound.com",
            "stun:stun.voipbuster.com",
            "stun:stun.voipstunt.com",
            "stun:stun.voxgratia.org",
            "stun:stun.ekiga.net",
            "stun:stun.schlund.de",
            "stun:stun.iptel.org",
            "stun:stun.l.google.com:19302",
            "stun:stun1.l.google.com:19302",
            "stun:stun.ideasip.com",
            "stun:stun4.l.google.com:19302",
            "stun:stun2.l.google.com:19302",
            "stun:stun3.l.google.com:19302"
          ]
        }
      ],
      "iceTransportPolicy": "all"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "slack.slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "11.30",
    "description": "Protostub to exchange messages with slack",
    "language": "javascript",
    "cguid": "46968ae37faa364f9cc07983229b5a641",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "VertxProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "default",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "12.70",
    "description": "Protostub to exchange messages with vertx",
    "language": "javascript",
    "cguid": "459ddec3ec1a17767da034fbe0988f1f9",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "objectName": "default",
    "configuration": {
      "url": "wss://msg-node.rethink-dev.alticelabs.com/localhost/ws",
      "maxBuffer": 1000000
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "VertxProtoStubNode": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gcyhpKXtpZih0W2ldKXJldHVybiB0W2ldLmV4cG9ydHM7dmFyIHI9dFtpXT17aTppLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbaV0uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMscyksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gcy5tPWUscy5jPXQscy5kPWZ1bmN0aW9uKGUsdCxpKXtzLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Oml9KX0scy5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBzLmQodCwiYSIsdCksdH0scy5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxzLnA9IiIscyhzLnM9MTUpfShbZnVuY3Rpb24oZSx0LHMpe3ZhciBpPXMoMTgpLHI9aS5CdWZmZXI7ZnVuY3Rpb24gbihlLHQpe2Zvcih2YXIgcyBpbiBlKXRbc109ZVtzXX1mdW5jdGlvbiBvKGUsdCxzKXtyZXR1cm4gcihlLHQscyl9ci5mcm9tJiZyLmFsbG9jJiZyLmFsbG9jVW5zYWZlJiZyLmFsbG9jVW5zYWZlU2xvdz9lLmV4cG9ydHM9aToobihpLHQpLHQuQnVmZmVyPW8pLG4ocixvKSxvLmZyb209ZnVuY3Rpb24oZSx0LHMpe2lmKCJudW1iZXIiPT10eXBlb2YgZSl0aHJvdyBuZXcgVHlwZUVycm9yKCJBcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlciIpO3JldHVybiByKGUsdCxzKX0sby5hbGxvYz1mdW5jdGlvbihlLHQscyl7aWYoIm51bWJlciIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXIiKTt2YXIgaT1yKGUpO3JldHVybiB2b2lkIDAhPT10PyJzdHJpbmciPT10eXBlb2Ygcz9pLmZpbGwodCxzKTppLmZpbGwodCk6aS5maWxsKDApLGl9LG8uYWxsb2NVbnNhZmU9ZnVuY3Rpb24oZSl7aWYoIm51bWJlciIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXIiKTtyZXR1cm4gcihlKX0sby5hbGxvY1Vuc2FmZVNsb3c9ZnVuY3Rpb24oZSl7aWYoIm51bWJlciIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXIiKTtyZXR1cm4gaS5TbG93QnVmZmVyKGUpfX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0Ijtjb25zdCBpPXMoMCkscj1zKDE5KSxuPXMoMjApLG89cyg0KSxhPWkuQnVmZmVyLGg9YS5mcm9tKFswLDAsMjU1LDI1NV0pLGM9YS5mcm9tKFswXSksbD1TeW1ib2woIndyaXRlLWluLXByb2dyZXNzIiksdT1TeW1ib2woInBlbmRpbmctY2xvc2UiKSxmPVN5bWJvbCgidG90YWwtbGVuZ3RoIiksZD1TeW1ib2woImNhbGxiYWNrIiksXz1TeW1ib2woImJ1ZmZlcnMiKSxwPVN5bWJvbCgiZXJyb3IiKSxtPVN5bWJvbCgib3duZXIiKTtsZXQgZztmdW5jdGlvbiB5KGUpe3RoaXNbX10ucHVzaChlKSx0aGlzW2ZdKz1lLmxlbmd0aH1mdW5jdGlvbiB2KGUpe3RoaXNbZl0rPWUubGVuZ3RoLHRoaXNbbV0uX21heFBheWxvYWQ8MXx8dGhpc1tmXTw9dGhpc1ttXS5fbWF4UGF5bG9hZD90aGlzW19dLnB1c2goZSk6KHRoaXNbcF09bmV3IEVycm9yKCJtYXggcGF5bG9hZCBzaXplIGV4Y2VlZGVkIiksdGhpc1twXS5jbG9zZUNvZGU9MTAwOSx0aGlzLnJlbW92ZUxpc3RlbmVyKCJkYXRhIix2KSx0aGlzLnJlc2V0KCkpfWZ1bmN0aW9uIGIoZSl7dGhpc1ttXS5faW5mbGF0ZT1udWxsLHRoaXNbZF0oZSl9ZS5leHBvcnRzPWNsYXNze2NvbnN0cnVjdG9yKGUsdCxzKXtpZih0aGlzLl9tYXhQYXlsb2FkPTB8cyx0aGlzLl9vcHRpb25zPWV8fHt9LHRoaXMuX3RocmVzaG9sZD12b2lkIDAhPT10aGlzLl9vcHRpb25zLnRocmVzaG9sZD90aGlzLl9vcHRpb25zLnRocmVzaG9sZDoxMDI0LHRoaXMuX2lzU2VydmVyPSEhdCx0aGlzLl9kZWZsYXRlPW51bGwsdGhpcy5faW5mbGF0ZT1udWxsLHRoaXMucGFyYW1zPW51bGwsIWcpe2NvbnN0IGU9dm9pZCAwIT09dGhpcy5fb3B0aW9ucy5jb25jdXJyZW5jeUxpbWl0P3RoaXMuX29wdGlvbnMuY29uY3VycmVuY3lMaW1pdDoxMDtnPW5ldyByKHtjb25jdXJyZW5jeTplfSl9fXN0YXRpYyBnZXQgZXh0ZW5zaW9uTmFtZSgpe3JldHVybiJwZXJtZXNzYWdlLWRlZmxhdGUifW9mZmVyKCl7Y29uc3QgZT17fTtyZXR1cm4gdGhpcy5fb3B0aW9ucy5zZXJ2ZXJOb0NvbnRleHRUYWtlb3ZlciYmKGUuc2VydmVyX25vX2NvbnRleHRfdGFrZW92ZXI9ITApLHRoaXMuX29wdGlvbnMuY2xpZW50Tm9Db250ZXh0VGFrZW92ZXImJihlLmNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyPSEwKSx0aGlzLl9vcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHMmJihlLnNlcnZlcl9tYXhfd2luZG93X2JpdHM9dGhpcy5fb3B0aW9ucy5zZXJ2ZXJNYXhXaW5kb3dCaXRzKSx0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHM/ZS5jbGllbnRfbWF4X3dpbmRvd19iaXRzPXRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0czpudWxsPT10aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMmJihlLmNsaWVudF9tYXhfd2luZG93X2JpdHM9ITApLGV9YWNjZXB0KGUpe3ZhciB0O3JldHVybiBlPXRoaXMubm9ybWFsaXplUGFyYW1zKGUpLHQ9dGhpcy5faXNTZXJ2ZXI/dGhpcy5hY2NlcHRBc1NlcnZlcihlKTp0aGlzLmFjY2VwdEFzQ2xpZW50KGUpLHRoaXMucGFyYW1zPXQsdH1jbGVhbnVwKCl7dGhpcy5faW5mbGF0ZSYmKHRoaXMuX2luZmxhdGVbbF0/dGhpcy5faW5mbGF0ZVt1XT0hMDoodGhpcy5faW5mbGF0ZS5jbG9zZSgpLHRoaXMuX2luZmxhdGU9bnVsbCkpLHRoaXMuX2RlZmxhdGUmJih0aGlzLl9kZWZsYXRlW2xdP3RoaXMuX2RlZmxhdGVbdV09ITA6KHRoaXMuX2RlZmxhdGUuY2xvc2UoKSx0aGlzLl9kZWZsYXRlPW51bGwpKX1hY2NlcHRBc1NlcnZlcihlKXtjb25zdCB0PXt9O2lmKCFlLnNvbWUoZT0+e2lmKCEoITE9PT10aGlzLl9vcHRpb25zLnNlcnZlck5vQ29udGV4dFRha2VvdmVyJiZlLnNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyfHwhMT09PXRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cyYmZS5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzfHwibnVtYmVyIj09dHlwZW9mIHRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cyYmIm51bWJlciI9PXR5cGVvZiBlLnNlcnZlcl9tYXhfd2luZG93X2JpdHMmJnRoaXMuX29wdGlvbnMuc2VydmVyTWF4V2luZG93Qml0cz5lLnNlcnZlcl9tYXhfd2luZG93X2JpdHN8fCJudW1iZXIiPT10eXBlb2YgdGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzJiYhZS5jbGllbnRfbWF4X3dpbmRvd19iaXRzKSlyZXR1cm4odGhpcy5fb3B0aW9ucy5zZXJ2ZXJOb0NvbnRleHRUYWtlb3Zlcnx8ZS5zZXJ2ZXJfbm9fY29udGV4dF90YWtlb3ZlcikmJih0LnNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyPSEwKSwodGhpcy5fb3B0aW9ucy5jbGllbnROb0NvbnRleHRUYWtlb3Zlcnx8ITEhPT10aGlzLl9vcHRpb25zLmNsaWVudE5vQ29udGV4dFRha2VvdmVyJiZlLmNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyKSYmKHQuY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXI9ITApLCJudW1iZXIiPT10eXBlb2YgdGhpcy5fb3B0aW9ucy5zZXJ2ZXJNYXhXaW5kb3dCaXRzP3Quc2VydmVyX21heF93aW5kb3dfYml0cz10aGlzLl9vcHRpb25zLnNlcnZlck1heFdpbmRvd0JpdHM6Im51bWJlciI9PXR5cGVvZiBlLnNlcnZlcl9tYXhfd2luZG93X2JpdHMmJih0LnNlcnZlcl9tYXhfd2luZG93X2JpdHM9ZS5zZXJ2ZXJfbWF4X3dpbmRvd19iaXRzKSwibnVtYmVyIj09dHlwZW9mIHRoaXMuX29wdGlvbnMuY2xpZW50TWF4V2luZG93Qml0cz90LmNsaWVudF9tYXhfd2luZG93X2JpdHM9dGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzOiExIT09dGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzJiYibnVtYmVyIj09dHlwZW9mIGUuY2xpZW50X21heF93aW5kb3dfYml0cyYmKHQuY2xpZW50X21heF93aW5kb3dfYml0cz1lLmNsaWVudF9tYXhfd2luZG93X2JpdHMpLCEwfSkpdGhyb3cgbmV3IEVycm9yKCJEb2Vzbid0IHN1cHBvcnQgdGhlIG9mZmVyZWQgY29uZmlndXJhdGlvbiIpO3JldHVybiB0fWFjY2VwdEFzQ2xpZW50KGUpe2NvbnN0IHQ9ZVswXTtpZighMT09PXRoaXMuX29wdGlvbnMuY2xpZW50Tm9Db250ZXh0VGFrZW92ZXImJnQuY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXIpdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciAiY2xpZW50X25vX2NvbnRleHRfdGFrZW92ZXIiJyk7aWYoIm51bWJlciI9PXR5cGVvZiB0aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMmJighdC5jbGllbnRfbWF4X3dpbmRvd19iaXRzfHx0LmNsaWVudF9tYXhfd2luZG93X2JpdHM+dGhpcy5fb3B0aW9ucy5jbGllbnRNYXhXaW5kb3dCaXRzKXx8ITE9PT10aGlzLl9vcHRpb25zLmNsaWVudE1heFdpbmRvd0JpdHMmJnQuY2xpZW50X21heF93aW5kb3dfYml0cyl0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yICJjbGllbnRfbWF4X3dpbmRvd19iaXRzIicpO3JldHVybiB0fW5vcm1hbGl6ZVBhcmFtcyhlKXtyZXR1cm4gZS5tYXAoZT0+KE9iamVjdC5rZXlzKGUpLmZvckVhY2godD0+e3ZhciBzPWVbdF07aWYocy5sZW5ndGg+MSl0aHJvdyBuZXcgRXJyb3IoYE11bHRpcGxlIGV4dGVuc2lvbiBwYXJhbWV0ZXJzIGZvciAke3R9YCk7c3dpdGNoKHM9c1swXSx0KXtjYXNlInNlcnZlcl9ub19jb250ZXh0X3Rha2VvdmVyIjpjYXNlImNsaWVudF9ub19jb250ZXh0X3Rha2VvdmVyIjppZighMCE9PXMpdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGV4dGVuc2lvbiBwYXJhbWV0ZXIgdmFsdWUgZm9yICR7dH0gKCR7c30pYCk7ZVt0XT0hMDticmVhaztjYXNlInNlcnZlcl9tYXhfd2luZG93X2JpdHMiOmNhc2UiY2xpZW50X21heF93aW5kb3dfYml0cyI6aWYoInN0cmluZyI9PXR5cGVvZiBzJiYocz1wYXJzZUludChzLDEwKSxOdW1iZXIuaXNOYU4ocyl8fHM8bi5aX01JTl9XSU5ET1dCSVRTfHxzPm4uWl9NQVhfV0lORE9XQklUUykpdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGV4dGVuc2lvbiBwYXJhbWV0ZXIgdmFsdWUgZm9yICR7dH0gKCR7c30pYCk7aWYoIXRoaXMuX2lzU2VydmVyJiYhMD09PXMpdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGV4dGVuc2lvbiBwYXJhbWV0ZXIgdmFsdWUgZm9yICR7dH1gKTtlW3RdPXM7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoYE5vdCBkZWZpbmVkIGV4dGVuc2lvbiBwYXJhbWV0ZXIgKCR7dH0pYCl9fSksZSkpfWRlY29tcHJlc3MoZSx0LHMpe2cucHVzaChpPT57dGhpcy5fZGVjb21wcmVzcyhlLHQsKGUsdCk9PntpKCkscyhlLHQpfSl9KX1jb21wcmVzcyhlLHQscyl7Zy5wdXNoKGk9Pnt0aGlzLl9jb21wcmVzcyhlLHQsKGUsdCk9PntpKCkscyhlLHQpfSl9KX1fZGVjb21wcmVzcyhlLHQscyl7Y29uc3QgaT10aGlzLl9pc1NlcnZlcj8iY2xpZW50Ijoic2VydmVyIjtpZighdGhpcy5faW5mbGF0ZSl7Y29uc3QgZT1gJHtpfV9tYXhfd2luZG93X2JpdHNgLHQ9Im51bWJlciIhPXR5cGVvZiB0aGlzLnBhcmFtc1tlXT9uLlpfREVGQVVMVF9XSU5ET1dCSVRTOnRoaXMucGFyYW1zW2VdO3RoaXMuX2luZmxhdGU9bi5jcmVhdGVJbmZsYXRlUmF3KHt3aW5kb3dCaXRzOnR9KSx0aGlzLl9pbmZsYXRlW2ZdPTAsdGhpcy5faW5mbGF0ZVtfXT1bXSx0aGlzLl9pbmZsYXRlW21dPXRoaXMsdGhpcy5faW5mbGF0ZS5vbigiZXJyb3IiLGIpLHRoaXMuX2luZmxhdGUub24oImRhdGEiLHYpfXRoaXMuX2luZmxhdGVbZF09cyx0aGlzLl9pbmZsYXRlW2xdPSEwLHRoaXMuX2luZmxhdGUud3JpdGUoZSksdCYmdGhpcy5faW5mbGF0ZS53cml0ZShoKSx0aGlzLl9pbmZsYXRlLmZsdXNoKCgpPT57Y29uc3QgZT10aGlzLl9pbmZsYXRlW3BdO2lmKGUpcmV0dXJuIHRoaXMuX2luZmxhdGUuY2xvc2UoKSx0aGlzLl9pbmZsYXRlPW51bGwsdm9pZCBzKGUpO2NvbnN0IHI9by5jb25jYXQodGhpcy5faW5mbGF0ZVtfXSx0aGlzLl9pbmZsYXRlW2ZdKTt0JiZ0aGlzLnBhcmFtc1tgJHtpfV9ub19jb250ZXh0X3Rha2VvdmVyYF18fHRoaXMuX2luZmxhdGVbdV0/KHRoaXMuX2luZmxhdGUuY2xvc2UoKSx0aGlzLl9pbmZsYXRlPW51bGwpOih0aGlzLl9pbmZsYXRlW2xdPSExLHRoaXMuX2luZmxhdGVbZl09MCx0aGlzLl9pbmZsYXRlW19dPVtdKSxzKG51bGwscil9KX1fY29tcHJlc3MoZSx0LHMpe2lmKCFlfHwwPT09ZS5sZW5ndGgpcmV0dXJuIHZvaWQgcHJvY2Vzcy5uZXh0VGljayhzLG51bGwsYyk7Y29uc3QgaT10aGlzLl9pc1NlcnZlcj8ic2VydmVyIjoiY2xpZW50IjtpZighdGhpcy5fZGVmbGF0ZSl7Y29uc3QgZT1gJHtpfV9tYXhfd2luZG93X2JpdHNgLHQ9Im51bWJlciIhPXR5cGVvZiB0aGlzLnBhcmFtc1tlXT9uLlpfREVGQVVMVF9XSU5ET1dCSVRTOnRoaXMucGFyYW1zW2VdO3RoaXMuX2RlZmxhdGU9bi5jcmVhdGVEZWZsYXRlUmF3KHttZW1MZXZlbDp0aGlzLl9vcHRpb25zLm1lbUxldmVsLGxldmVsOnRoaXMuX29wdGlvbnMubGV2ZWwsZmx1c2g6bi5aX1NZTkNfRkxVU0gsd2luZG93Qml0czp0fSksdGhpcy5fZGVmbGF0ZVtmXT0wLHRoaXMuX2RlZmxhdGVbX109W10sdGhpcy5fZGVmbGF0ZS5vbigiZGF0YSIseSl9dGhpcy5fZGVmbGF0ZVtsXT0hMCx0aGlzLl9kZWZsYXRlLndyaXRlKGUpLHRoaXMuX2RlZmxhdGUuZmx1c2gobi5aX1NZTkNfRkxVU0gsKCk9Pnt2YXIgZT1vLmNvbmNhdCh0aGlzLl9kZWZsYXRlW19dLHRoaXMuX2RlZmxhdGVbZl0pO3QmJihlPWUuc2xpY2UoMCxlLmxlbmd0aC00KSksdCYmdGhpcy5wYXJhbXNbYCR7aX1fbm9fY29udGV4dF90YWtlb3ZlcmBdfHx0aGlzLl9kZWZsYXRlW3VdPyh0aGlzLl9kZWZsYXRlLmNsb3NlKCksdGhpcy5fZGVmbGF0ZT1udWxsKToodGhpcy5fZGVmbGF0ZVtsXT0hMSx0aGlzLl9kZWZsYXRlW2ZdPTAsdGhpcy5fZGVmbGF0ZVtfXT1bXSkscyhudWxsLGUpfSl9fX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0Ijtjb25zdCBpPXMoMCkuQnVmZmVyO3QuQklOQVJZX1RZUEVTPVsibm9kZWJ1ZmZlciIsImFycmF5YnVmZmVyIiwiZnJhZ21lbnRzIl0sdC5HVUlEPSIyNThFQUZBNS1FOTE0LTQ3REEtOTVDQS1DNUFCMERDODVCMTEiLHQuRU1QVFlfQlVGRkVSPWkuYWxsb2MoMCksdC5OT09QPSgoKT0+e30pfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yZXF1aXJlKCJjcnlwdG8iKX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0IjsKLyohCiAqIHdzOiBhIG5vZGUuanMgd2Vic29ja2V0IGNsaWVudAogKiBDb3B5cmlnaHQoYykgMjAxMSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT4KICogTUlUIExpY2Vuc2VkCiAqL2NvbnN0IGk9cygwKS5CdWZmZXIscj0oZSx0KT0+e2NvbnN0IHM9aS5hbGxvY1Vuc2FmZSh0KTtmb3IodmFyIHI9MCxuPTA7bjxlLmxlbmd0aDtuKyspe2NvbnN0IHQ9ZVtuXTt0LmNvcHkocyxyKSxyKz10Lmxlbmd0aH1yZXR1cm4gc307dHJ5e2NvbnN0IHQ9cygyMSk7ZS5leHBvcnRzPU9iamVjdC5hc3NpZ24oe2NvbmNhdDpyfSx0LkJ1ZmZlclV0aWx8fHQpfWNhdGNoKHQpe2NvbnN0IHM9KGUsdCxzLGkscik9Pntmb3IodmFyIG49MDtuPHI7bisrKXNbaStuXT1lW25dXnRbMyZuXX0saT0oZSx0KT0+e2NvbnN0IHM9ZS5sZW5ndGg7Zm9yKHZhciBpPTA7aTxzO2krKyllW2ldXj10WzMmaV19O2UuZXhwb3J0cz17Y29uY2F0OnIsbWFzazpzLHVubWFzazppfX19LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7Ci8qIQogKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnQKICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+CiAqIE1JVCBMaWNlbnNlZAogKi9jb25zdCBpPXMoNikscj1zKDMpLG49cyg3KSxvPXMoMTcpLGE9cyg4KSxoPXMoOSksYz1zKDEpLGw9cygyNSksdT1zKDExKSxmPXMoMiksZD1zKDEyKSxfPXMoMTQpLHA9WzgsMTNdLG09M2U0O2NsYXNzIGcgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKGUsdCxzKXtzdXBlcigpLHQ/InN0cmluZyI9PXR5cGVvZiB0P3Q9W3RdOkFycmF5LmlzQXJyYXkodCl8fChzPXQsdD1bXSk6dD1bXSx0aGlzLnJlYWR5U3RhdGU9Zy5DT05ORUNUSU5HLHRoaXMuYnl0ZXNSZWNlaXZlZD0wLHRoaXMuZXh0ZW5zaW9ucz17fSx0aGlzLnByb3RvY29sPSIiLHRoaXMuX2JpbmFyeVR5cGU9Zi5CSU5BUllfVFlQRVNbMF0sdGhpcy5fZmluYWxpemU9dGhpcy5maW5hbGl6ZS5iaW5kKHRoaXMpLHRoaXMuX2Nsb3NlRnJhbWVSZWNlaXZlZD0hMSx0aGlzLl9jbG9zZUZyYW1lU2VudD0hMSx0aGlzLl9jbG9zZU1lc3NhZ2U9IiIsdGhpcy5fY2xvc2VUaW1lcj1udWxsLHRoaXMuX2ZpbmFsaXplZD0hMSx0aGlzLl9jbG9zZUNvZGU9MTAwNix0aGlzLl9yZWNlaXZlcj1udWxsLHRoaXMuX3NlbmRlcj1udWxsLHRoaXMuX3NvY2tldD1udWxsLHRoaXMuX3VsdHJvbj1udWxsLEFycmF5LmlzQXJyYXkoZSk/ZnVuY3Rpb24oZSx0LHMpe3RoaXMucHJvdG9jb2xWZXJzaW9uPXMucHJvdG9jb2xWZXJzaW9uLHRoaXMuX21heFBheWxvYWQ9cy5tYXhQYXlsb2FkLHRoaXMuZXh0ZW5zaW9ucz1zLmV4dGVuc2lvbnMsdGhpcy5wcm90b2NvbD1zLnByb3RvY29sLHRoaXMuX2lzU2VydmVyPSEwLHRoaXMuc2V0U29ja2V0KGUsdCl9LmNhbGwodGhpcyxlWzBdLGVbMV0scyk6ZnVuY3Rpb24oZSx0LHMpe2lmKHM9T2JqZWN0LmFzc2lnbih7cHJvdG9jb2xWZXJzaW9uOnBbMV0scHJvdG9jb2w6dC5qb2luKCIsIikscGVyTWVzc2FnZURlZmxhdGU6ITAsaGFuZHNoYWtlVGltZW91dDpudWxsLGxvY2FsQWRkcmVzczpudWxsLGhlYWRlcnM6bnVsbCxmYW1pbHk6bnVsbCxvcmlnaW46bnVsbCxhZ2VudDpudWxsLGhvc3Q6bnVsbCxjaGVja1NlcnZlcklkZW50aXR5Om51bGwscmVqZWN0VW5hdXRob3JpemVkOm51bGwscGFzc3BocmFzZTpudWxsLGNpcGhlcnM6bnVsbCxlY2RoQ3VydmU6bnVsbCxjZXJ0Om51bGwsa2V5Om51bGwscGZ4Om51bGwsY2E6bnVsbH0scyksLTE9PT1wLmluZGV4T2Yocy5wcm90b2NvbFZlcnNpb24pKXRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgcHJvdG9jb2wgdmVyc2lvbjogJHtzLnByb3RvY29sVmVyc2lvbn0gYCtgKHN1cHBvcnRlZCB2ZXJzaW9uczogJHtwLmpvaW4oIiwgIil9KWApO3RoaXMucHJvdG9jb2xWZXJzaW9uPXMucHJvdG9jb2xWZXJzaW9uLHRoaXMuX2lzU2VydmVyPSExLHRoaXMudXJsPWU7Y29uc3QgaT1oLnBhcnNlKGUpLG49IndzK3VuaXg6Ij09PWkucHJvdG9jb2w7aWYoIShpLmhvc3R8fG4mJmkucGF0aCkpdGhyb3cgbmV3IEVycm9yKCJpbnZhbGlkIHVybCIpO2NvbnN0IGw9IndzczoiPT09aS5wcm90b2NvbHx8Imh0dHBzOiI9PT1pLnByb3RvY29sLGQ9ci5yYW5kb21CeXRlcygxNikudG9TdHJpbmcoImJhc2U2NCIpLF89bD9vOmE7dmFyIG07Y29uc3QgeT17cG9ydDppLnBvcnR8fChsPzQ0Mzo4MCksaG9zdDppLmhvc3RuYW1lLHBhdGg6Ii8iLGhlYWRlcnM6eyJTZWMtV2ViU29ja2V0LVZlcnNpb24iOnMucHJvdG9jb2xWZXJzaW9uLCJTZWMtV2ViU29ja2V0LUtleSI6ZCxDb25uZWN0aW9uOiJVcGdyYWRlIixVcGdyYWRlOiJ3ZWJzb2NrZXQifX07cy5oZWFkZXJzJiZPYmplY3QuYXNzaWduKHkuaGVhZGVycyxzLmhlYWRlcnMpO3MucGVyTWVzc2FnZURlZmxhdGUmJihtPW5ldyBjKCEwIT09cy5wZXJNZXNzYWdlRGVmbGF0ZT9zLnBlck1lc3NhZ2VEZWZsYXRlOnt9LCExKSx5LmhlYWRlcnNbIlNlYy1XZWJTb2NrZXQtRXh0ZW5zaW9ucyJdPXUuZm9ybWF0KHtbYy5leHRlbnNpb25OYW1lXTptLm9mZmVyKCl9KSk7cy5wcm90b2NvbCYmKHkuaGVhZGVyc1siU2VjLVdlYlNvY2tldC1Qcm90b2NvbCJdPXMucHJvdG9jb2wpO3Mub3JpZ2luJiYocy5wcm90b2NvbFZlcnNpb248MTM/eS5oZWFkZXJzWyJTZWMtV2ViU29ja2V0LU9yaWdpbiJdPXMub3JpZ2luOnkuaGVhZGVycy5PcmlnaW49cy5vcmlnaW4pO3MuaG9zdCYmKHkuaGVhZGVycy5Ib3N0PXMuaG9zdCk7aS5hdXRoJiYoeS5hdXRoPWkuYXV0aCk7cy5sb2NhbEFkZHJlc3MmJih5LmxvY2FsQWRkcmVzcz1zLmxvY2FsQWRkcmVzcyk7cy5mYW1pbHkmJih5LmZhbWlseT1zLmZhbWlseSk7aWYobil7Y29uc3QgZT1pLnBhdGguc3BsaXQoIjoiKTt5LnNvY2tldFBhdGg9ZVswXSx5LnBhdGg9ZVsxXX1lbHNlIGkucGF0aCYmKCIvIiE9PWkucGF0aC5jaGFyQXQoMCk/eS5wYXRoPWAvJHtpLnBhdGh9YDp5LnBhdGg9aS5wYXRoKTt2YXIgdj1zLmFnZW50OyhudWxsIT1zLnJlamVjdFVuYXV0aG9yaXplZHx8cy5jaGVja1NlcnZlcklkZW50aXR5fHxzLnBhc3NwaHJhc2V8fHMuY2lwaGVyc3x8cy5lY2RoQ3VydmV8fHMuY2VydHx8cy5rZXl8fHMucGZ4fHxzLmNhKSYmKHMucGFzc3BocmFzZSYmKHkucGFzc3BocmFzZT1zLnBhc3NwaHJhc2UpLHMuY2lwaGVycyYmKHkuY2lwaGVycz1zLmNpcGhlcnMpLHMuZWNkaEN1cnZlJiYoeS5lY2RoQ3VydmU9cy5lY2RoQ3VydmUpLHMuY2VydCYmKHkuY2VydD1zLmNlcnQpLHMua2V5JiYoeS5rZXk9cy5rZXkpLHMucGZ4JiYoeS5wZng9cy5wZngpLHMuY2EmJih5LmNhPXMuY2EpLHMuY2hlY2tTZXJ2ZXJJZGVudGl0eSYmKHkuY2hlY2tTZXJ2ZXJJZGVudGl0eT1zLmNoZWNrU2VydmVySWRlbnRpdHkpLG51bGwhPXMucmVqZWN0VW5hdXRob3JpemVkJiYoeS5yZWplY3RVbmF1dGhvcml6ZWQ9cy5yZWplY3RVbmF1dGhvcml6ZWQpLHZ8fCh2PW5ldyBfLkFnZW50KHkpKSk7diYmKHkuYWdlbnQ9dik7dGhpcy5fcmVxPV8uZ2V0KHkpLHMuaGFuZHNoYWtlVGltZW91dCYmdGhpcy5fcmVxLnNldFRpbWVvdXQocy5oYW5kc2hha2VUaW1lb3V0LCgpPT57dGhpcy5fcmVxLmFib3J0KCksdGhpcy5maW5hbGl6ZShuZXcgRXJyb3IoIm9wZW5pbmcgaGFuZHNoYWtlIGhhcyB0aW1lZCBvdXQiKSl9KTt0aGlzLl9yZXEub24oImVycm9yIixlPT57dGhpcy5fcmVxLmFib3J0ZWR8fCh0aGlzLl9yZXE9bnVsbCx0aGlzLmZpbmFsaXplKGUpKX0pLHRoaXMuX3JlcS5vbigicmVzcG9uc2UiLGU9Pnt0aGlzLmVtaXQoInVuZXhwZWN0ZWQtcmVzcG9uc2UiLHRoaXMuX3JlcSxlKXx8KHRoaXMuX3JlcS5hYm9ydCgpLHRoaXMuZmluYWxpemUobmV3IEVycm9yKGB1bmV4cGVjdGVkIHNlcnZlciByZXNwb25zZSAoJHtlLnN0YXR1c0NvZGV9KWApKSl9KSx0aGlzLl9yZXEub24oInVwZ3JhZGUiLChlLHQsaSk9PntpZih0aGlzLmVtaXQoImhlYWRlcnMiLGUuaGVhZGVycyxlKSx0aGlzLnJlYWR5U3RhdGUhPT1nLkNPTk5FQ1RJTkcpcmV0dXJuO3RoaXMuX3JlcT1udWxsO2NvbnN0IG49ci5jcmVhdGVIYXNoKCJzaGExIikudXBkYXRlKGQrZi5HVUlELCJiaW5hcnkiKS5kaWdlc3QoImJhc2U2NCIpO2lmKGUuaGVhZGVyc1sic2VjLXdlYnNvY2tldC1hY2NlcHQiXSE9PW4pcmV0dXJuIHQuZGVzdHJveSgpLHRoaXMuZmluYWxpemUobmV3IEVycm9yKCJpbnZhbGlkIHNlcnZlciBrZXkiKSk7Y29uc3Qgbz1lLmhlYWRlcnNbInNlYy13ZWJzb2NrZXQtcHJvdG9jb2wiXSxhPShzLnByb3RvY29sfHwiIikuc3BsaXQoLywgKi8pO3ZhciBoO2lmKCFzLnByb3RvY29sJiZvP2g9InNlcnZlciBzZW50IGEgc3VicHJvdG9jb2wgZXZlbiB0aG91Z2ggbm9uZSByZXF1ZXN0ZWQiOnMucHJvdG9jb2wmJiFvP2g9InNlcnZlciBzZW50IG5vIHN1YnByb3RvY29sIGV2ZW4gdGhvdWdoIHJlcXVlc3RlZCI6byYmLTE9PT1hLmluZGV4T2YobykmJihoPSJzZXJ2ZXIgcmVzcG9uZGVkIHdpdGggYW4gaW52YWxpZCBwcm90b2NvbCIpLGgpcmV0dXJuIHQuZGVzdHJveSgpLHRoaXMuZmluYWxpemUobmV3IEVycm9yKGgpKTtpZihvJiYodGhpcy5wcm90b2NvbD1vKSxtKXRyeXtjb25zdCBzPXUucGFyc2UoZS5oZWFkZXJzWyJzZWMtd2Vic29ja2V0LWV4dGVuc2lvbnMiXSk7c1tjLmV4dGVuc2lvbk5hbWVdJiYobS5hY2NlcHQoc1tjLmV4dGVuc2lvbk5hbWVdKSx0aGlzLmV4dGVuc2lvbnNbYy5leHRlbnNpb25OYW1lXT1tKX1jYXRjaChlKXtyZXR1cm4gdC5kZXN0cm95KCksdm9pZCB0aGlzLmZpbmFsaXplKG5ldyBFcnJvcigiaW52YWxpZCBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnMgaGVhZGVyIikpfXRoaXMuc2V0U29ja2V0KHQsaSl9KX0uY2FsbCh0aGlzLGUsdCxzKX1nZXQgQ09OTkVDVElORygpe3JldHVybiBnLkNPTk5FQ1RJTkd9Z2V0IENMT1NJTkcoKXtyZXR1cm4gZy5DTE9TSU5HfWdldCBDTE9TRUQoKXtyZXR1cm4gZy5DTE9TRUR9Z2V0IE9QRU4oKXtyZXR1cm4gZy5PUEVOfWdldCBidWZmZXJlZEFtb3VudCgpe3ZhciBlPTA7cmV0dXJuIHRoaXMuX3NvY2tldCYmKGU9dGhpcy5fc29ja2V0LmJ1ZmZlclNpemUrdGhpcy5fc2VuZGVyLl9idWZmZXJlZEJ5dGVzKSxlfWdldCBiaW5hcnlUeXBlKCl7cmV0dXJuIHRoaXMuX2JpbmFyeVR5cGV9c2V0IGJpbmFyeVR5cGUoZSl7Zi5CSU5BUllfVFlQRVMuaW5kZXhPZihlKTwwfHwodGhpcy5fYmluYXJ5VHlwZT1lLHRoaXMuX3JlY2VpdmVyJiYodGhpcy5fcmVjZWl2ZXIuX2JpbmFyeVR5cGU9ZSkpfXNldFNvY2tldChlLHQpe2Uuc2V0VGltZW91dCgwKSxlLnNldE5vRGVsYXkoKSx0aGlzLl9yZWNlaXZlcj1uZXcgZCh0aGlzLmV4dGVuc2lvbnMsdGhpcy5fbWF4UGF5bG9hZCx0aGlzLmJpbmFyeVR5cGUpLHRoaXMuX3NlbmRlcj1uZXcgXyhlLHRoaXMuZXh0ZW5zaW9ucyksdGhpcy5fdWx0cm9uPW5ldyBuKGUpLHRoaXMuX3NvY2tldD1lLHRoaXMuX3VsdHJvbi5vbigiY2xvc2UiLHRoaXMuX2ZpbmFsaXplKSx0aGlzLl91bHRyb24ub24oImVycm9yIix0aGlzLl9maW5hbGl6ZSksdGhpcy5fdWx0cm9uLm9uKCJlbmQiLHRoaXMuX2ZpbmFsaXplKSx0Lmxlbmd0aD4wJiZlLnVuc2hpZnQodCksdGhpcy5fdWx0cm9uLm9uKCJkYXRhIixlPT57dGhpcy5ieXRlc1JlY2VpdmVkKz1lLmxlbmd0aCx0aGlzLl9yZWNlaXZlci5hZGQoZSl9KSx0aGlzLl9yZWNlaXZlci5vbm1lc3NhZ2U9KGU9PnRoaXMuZW1pdCgibWVzc2FnZSIsZSkpLHRoaXMuX3JlY2VpdmVyLm9ucGluZz0oZT0+e3RoaXMucG9uZyhlLCF0aGlzLl9pc1NlcnZlciwhMCksdGhpcy5lbWl0KCJwaW5nIixlKX0pLHRoaXMuX3JlY2VpdmVyLm9ucG9uZz0oZT0+dGhpcy5lbWl0KCJwb25nIixlKSksdGhpcy5fcmVjZWl2ZXIub25jbG9zZT0oKGUsdCk9Pnt0aGlzLl9jbG9zZUZyYW1lUmVjZWl2ZWQ9ITAsdGhpcy5fY2xvc2VNZXNzYWdlPXQsdGhpcy5fY2xvc2VDb2RlPWUsdGhpcy5fZmluYWxpemVkfHx0aGlzLmNsb3NlKGUsdCl9KSx0aGlzLl9yZWNlaXZlci5vbmVycm9yPSgoZSx0KT0+e3RoaXMuX2Nsb3NlTWVzc2FnZT0iIix0aGlzLl9jbG9zZUNvZGU9dCx0aGlzLnJlYWR5U3RhdGU9Zy5DTE9TSU5HLHRoaXMuZW1pdCgiZXJyb3IiLGUpLHRoaXMuZmluYWxpemUoITApfSksdGhpcy5yZWFkeVN0YXRlPWcuT1BFTix0aGlzLmVtaXQoIm9wZW4iKX1maW5hbGl6ZShlKXtpZighdGhpcy5fZmluYWxpemVkKXtpZih0aGlzLnJlYWR5U3RhdGU9Zy5DTE9TSU5HLHRoaXMuX2ZpbmFsaXplZD0hMCwib2JqZWN0Ij09dHlwZW9mIGUmJnRoaXMuZW1pdCgiZXJyb3IiLGUpLCF0aGlzLl9zb2NrZXQpcmV0dXJuIHRoaXMuZW1pdENsb3NlKCk7Y2xlYXJUaW1lb3V0KHRoaXMuX2Nsb3NlVGltZXIpLHRoaXMuX2Nsb3NlVGltZXI9bnVsbCx0aGlzLl91bHRyb24uZGVzdHJveSgpLHRoaXMuX3VsdHJvbj1udWxsLHRoaXMuX3NvY2tldC5vbigiZXJyb3IiLGYuTk9PUCksZT90aGlzLl9zb2NrZXQuZGVzdHJveSgpOnRoaXMuX3NvY2tldC5lbmQoKSx0aGlzLl9zb2NrZXQ9bnVsbCx0aGlzLl9zZW5kZXI9bnVsbCx0aGlzLl9yZWNlaXZlci5jbGVhbnVwKCgpPT50aGlzLmVtaXRDbG9zZSgpKSx0aGlzLl9yZWNlaXZlcj1udWxsfX1lbWl0Q2xvc2UoKXt0aGlzLnJlYWR5U3RhdGU9Zy5DTE9TRUQsdGhpcy5lbWl0KCJjbG9zZSIsdGhpcy5fY2xvc2VDb2RlLHRoaXMuX2Nsb3NlTWVzc2FnZSksdGhpcy5leHRlbnNpb25zW2MuZXh0ZW5zaW9uTmFtZV0mJnRoaXMuZXh0ZW5zaW9uc1tjLmV4dGVuc2lvbk5hbWVdLmNsZWFudXAoKSx0aGlzLmV4dGVuc2lvbnM9bnVsbCx0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpfXBhdXNlKCl7aWYodGhpcy5yZWFkeVN0YXRlIT09Zy5PUEVOKXRocm93IG5ldyBFcnJvcigibm90IG9wZW5lZCIpO3RoaXMuX3NvY2tldC5wYXVzZSgpfXJlc3VtZSgpe2lmKHRoaXMucmVhZHlTdGF0ZSE9PWcuT1BFTil0aHJvdyBuZXcgRXJyb3IoIm5vdCBvcGVuZWQiKTt0aGlzLl9zb2NrZXQucmVzdW1lKCl9Y2xvc2UoZSx0KXtpZih0aGlzLnJlYWR5U3RhdGUhPT1nLkNMT1NFRClyZXR1cm4gdGhpcy5yZWFkeVN0YXRlPT09Zy5DT05ORUNUSU5HPyh0aGlzLl9yZXEuYWJvcnQoKSx2b2lkIHRoaXMuZmluYWxpemUobmV3IEVycm9yKCJjbG9zZWQgYmVmb3JlIHRoZSBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkIikpKTp2b2lkKHRoaXMucmVhZHlTdGF0ZSE9PWcuQ0xPU0lORz8odGhpcy5yZWFkeVN0YXRlPWcuQ0xPU0lORyx0aGlzLl9zZW5kZXIuY2xvc2UoZSx0LCF0aGlzLl9pc1NlcnZlcixlPT57ZXx8KHRoaXMuX2Nsb3NlRnJhbWVTZW50PSEwLHRoaXMuX2ZpbmFsaXplZHx8KHRoaXMuX2Nsb3NlRnJhbWVSZWNlaXZlZCYmdGhpcy5fc29ja2V0LmVuZCgpLHRoaXMuX2Nsb3NlVGltZXI9c2V0VGltZW91dCh0aGlzLl9maW5hbGl6ZSxtLCEwKSkpfSkpOnRoaXMuX2Nsb3NlRnJhbWVTZW50JiZ0aGlzLl9jbG9zZUZyYW1lUmVjZWl2ZWQmJnRoaXMuX3NvY2tldC5lbmQoKSl9cGluZyhlLHQscyl7aWYodGhpcy5yZWFkeVN0YXRlIT09Zy5PUEVOKXtpZihzKXJldHVybjt0aHJvdyBuZXcgRXJyb3IoIm5vdCBvcGVuZWQiKX0ibnVtYmVyIj09dHlwZW9mIGUmJihlPWUudG9TdHJpbmcoKSksdm9pZCAwPT09dCYmKHQ9IXRoaXMuX2lzU2VydmVyKSx0aGlzLl9zZW5kZXIucGluZyhlfHxmLkVNUFRZX0JVRkZFUix0KX1wb25nKGUsdCxzKXtpZih0aGlzLnJlYWR5U3RhdGUhPT1nLk9QRU4pe2lmKHMpcmV0dXJuO3Rocm93IG5ldyBFcnJvcigibm90IG9wZW5lZCIpfSJudW1iZXIiPT10eXBlb2YgZSYmKGU9ZS50b1N0cmluZygpKSx2b2lkIDA9PT10JiYodD0hdGhpcy5faXNTZXJ2ZXIpLHRoaXMuX3NlbmRlci5wb25nKGV8fGYuRU1QVFlfQlVGRkVSLHQpfXNlbmQoZSx0LHMpe2lmKCJmdW5jdGlvbiI9PXR5cGVvZiB0JiYocz10LHQ9e30pLHRoaXMucmVhZHlTdGF0ZSE9PWcuT1BFTil7aWYoIXMpdGhyb3cgbmV3IEVycm9yKCJub3Qgb3BlbmVkIik7cmV0dXJuIHZvaWQgcyhuZXcgRXJyb3IoIm5vdCBvcGVuZWQiKSl9Im51bWJlciI9PXR5cGVvZiBlJiYoZT1lLnRvU3RyaW5nKCkpO2NvbnN0IGk9T2JqZWN0LmFzc2lnbih7YmluYXJ5OiJzdHJpbmciIT10eXBlb2YgZSxtYXNrOiF0aGlzLl9pc1NlcnZlcixjb21wcmVzczohMCxmaW46ITB9LHQpO3RoaXMuZXh0ZW5zaW9uc1tjLmV4dGVuc2lvbk5hbWVdfHwoaS5jb21wcmVzcz0hMSksdGhpcy5fc2VuZGVyLnNlbmQoZXx8Zi5FTVBUWV9CVUZGRVIsaSxzKX10ZXJtaW5hdGUoKXtpZih0aGlzLnJlYWR5U3RhdGUhPT1nLkNMT1NFRClyZXR1cm4gdGhpcy5yZWFkeVN0YXRlPT09Zy5DT05ORUNUSU5HPyh0aGlzLl9yZXEuYWJvcnQoKSx2b2lkIHRoaXMuZmluYWxpemUobmV3IEVycm9yKCJjbG9zZWQgYmVmb3JlIHRoZSBjb25uZWN0aW9uIGlzIGVzdGFibGlzaGVkIikpKTp2b2lkIHRoaXMuZmluYWxpemUoITApfX1nLkNPTk5FQ1RJTkc9MCxnLk9QRU49MSxnLkNMT1NJTkc9MixnLkNMT1NFRD0zLFsib3BlbiIsImVycm9yIiwiY2xvc2UiLCJtZXNzYWdlIl0uZm9yRWFjaChlPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KGcucHJvdG90eXBlLGBvbiR7ZX1gLHtnZXQoKXtjb25zdCB0PXRoaXMubGlzdGVuZXJzKGUpO2Zvcih2YXIgcz0wO3M8dC5sZW5ndGg7cysrKWlmKHRbc10uX2xpc3RlbmVyKXJldHVybiB0W3NdLl9saXN0ZW5lcn0sc2V0KHQpe2NvbnN0IHM9dGhpcy5saXN0ZW5lcnMoZSk7Zm9yKHZhciBpPTA7aTxzLmxlbmd0aDtpKyspc1tpXS5fbGlzdGVuZXImJnRoaXMucmVtb3ZlTGlzdGVuZXIoZSxzW2ldKTt0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZSx0KX19KX0pLGcucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXI9bC5hZGRFdmVudExpc3RlbmVyLGcucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXI9bC5yZW1vdmVFdmVudExpc3RlbmVyLGUuZXhwb3J0cz1nfSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yZXF1aXJlKCJldmVudHMiKX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0Ijt2YXIgaT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHI9MDtmdW5jdGlvbiBuKGUpe2lmKCEodGhpcyBpbnN0YW5jZW9mIG4pKXJldHVybiBuZXcgbihlKTt0aGlzLmlkPXIrKyx0aGlzLmVlPWV9bi5wcm90b3R5cGUub249ZnVuY3Rpb24oZSx0LHMpe3JldHVybiB0Ll9fdWx0cm9uPXRoaXMuaWQsdGhpcy5lZS5vbihlLHQscyksdGhpc30sbi5wcm90b3R5cGUub25jZT1mdW5jdGlvbihlLHQscyl7cmV0dXJuIHQuX191bHRyb249dGhpcy5pZCx0aGlzLmVlLm9uY2UoZSx0LHMpLHRoaXN9LG4ucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe3ZhciBlLHQ9YXJndW1lbnRzLHM9dGhpcy5lZTtpZigxPT09dC5sZW5ndGgmJiJzdHJpbmciPT10eXBlb2YgdFswXSl0PXRbMF0uc3BsaXQoL1ssIF0rLyk7ZWxzZSBpZighdC5sZW5ndGgpaWYocy5ldmVudE5hbWVzKXQ9cy5ldmVudE5hbWVzKCk7ZWxzZSBpZihzLl9ldmVudHMpe2ZvcihlIGluIHQ9W10scy5fZXZlbnRzKWkuY2FsbChzLl9ldmVudHMsZSkmJnQucHVzaChlKTtPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzJiYodD10LmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMuX2V2ZW50cykpKX1mb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKylmb3IodmFyIG49cy5saXN0ZW5lcnModFtyXSksbz0wO288bi5sZW5ndGg7bysrKXtpZigoZT1uW29dKS5saXN0ZW5lcil7aWYoZS5saXN0ZW5lci5fX3VsdHJvbiE9PXRoaXMuaWQpY29udGludWV9ZWxzZSBpZihlLl9fdWx0cm9uIT09dGhpcy5pZCljb250aW51ZTtzLnJlbW92ZUxpc3RlbmVyKHRbcl0sZSl9cmV0dXJuIHRoaXN9LG4ucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuZWUmJih0aGlzLnJlbW92ZSgpLHRoaXMuZWU9bnVsbCwhMCl9LGUuZXhwb3J0cz1ufSxmdW5jdGlvbihlLHQpe2UuZXhwb3J0cz1yZXF1aXJlKCJodHRwIil9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXJlcXVpcmUoInVybCIpfSxmdW5jdGlvbihlLHQscyl7KGZ1bmN0aW9uKGkpe3ZhciByPXMoMjIpLG49cygyMyksbz1uLmpvaW4sYT1uLmRpcm5hbWUsaD1yLmFjY2Vzc1N5bmMmJmZ1bmN0aW9uKGUpe3RyeXtyLmFjY2Vzc1N5bmMoZSl9Y2F0Y2goZSl7cmV0dXJuITF9cmV0dXJuITB9fHxyLmV4aXN0c1N5bmN8fG4uZXhpc3RzU3luYyxjPXthcnJvdzpwcm9jZXNzLmVudi5OT0RFX0JJTkRJTkdTX0FSUk9XfHwiIOKGkiAiLGNvbXBpbGVkOnByb2Nlc3MuZW52Lk5PREVfQklORElOR1NfQ09NUElMRURfRElSfHwiY29tcGlsZWQiLHBsYXRmb3JtOnByb2Nlc3MucGxhdGZvcm0sYXJjaDpwcm9jZXNzLmFyY2gsdmVyc2lvbjpwcm9jZXNzLnZlcnNpb25zLm5vZGUsYmluZGluZ3M6ImJpbmRpbmdzLm5vZGUiLHRyeTpbWyJtb2R1bGVfcm9vdCIsImJ1aWxkIiwiYmluZGluZ3MiXSxbIm1vZHVsZV9yb290IiwiYnVpbGQiLCJEZWJ1ZyIsImJpbmRpbmdzIl0sWyJtb2R1bGVfcm9vdCIsImJ1aWxkIiwiUmVsZWFzZSIsImJpbmRpbmdzIl0sWyJtb2R1bGVfcm9vdCIsIm91dCIsIkRlYnVnIiwiYmluZGluZ3MiXSxbIm1vZHVsZV9yb290IiwiRGVidWciLCJiaW5kaW5ncyJdLFsibW9kdWxlX3Jvb3QiLCJvdXQiLCJSZWxlYXNlIiwiYmluZGluZ3MiXSxbIm1vZHVsZV9yb290IiwiUmVsZWFzZSIsImJpbmRpbmdzIl0sWyJtb2R1bGVfcm9vdCIsImJ1aWxkIiwiZGVmYXVsdCIsImJpbmRpbmdzIl0sWyJtb2R1bGVfcm9vdCIsImNvbXBpbGVkIiwidmVyc2lvbiIsInBsYXRmb3JtIiwiYXJjaCIsImJpbmRpbmdzIl1dfTtlLmV4cG9ydHM9dD1mdW5jdGlvbihlKXsic3RyaW5nIj09dHlwZW9mIGU/ZT17YmluZGluZ3M6ZX06ZXx8KGU9e30pLE9iamVjdC5rZXlzKGMpLm1hcChmdW5jdGlvbih0KXt0IGluIGV8fChlW3RdPWNbdF0pfSksZS5tb2R1bGVfcm9vdHx8KGUubW9kdWxlX3Jvb3Q9dC5nZXRSb290KHQuZ2V0RmlsZU5hbWUoKSkpLCIubm9kZSIhPW4uZXh0bmFtZShlLmJpbmRpbmdzKSYmKGUuYmluZGluZ3MrPSIubm9kZSIpO2Zvcih2YXIgcyxpLHIsYT1yZXF1aXJlLGg9W10sbD0wLHU9ZS50cnkubGVuZ3RoO2w8dTtsKyspe3M9by5hcHBseShudWxsLGUudHJ5W2xdLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XXx8dH0pKSxoLnB1c2gocyk7dHJ5e3JldHVybiBpPWUucGF0aD9hLnJlc29sdmUocyk6YShzKSxlLnBhdGh8fChpLnBhdGg9cyksaX1jYXRjaChlKXtpZighL25vdCBmaW5kL2kudGVzdChlLm1lc3NhZ2UpKXRocm93IGV9fXRocm93KHI9bmV3IEVycm9yKCJDb3VsZCBub3QgbG9jYXRlIHRoZSBiaW5kaW5ncyBmaWxlLiBUcmllZDpcbiIraC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGUuYXJyb3crdH0pLmpvaW4oIlxuIikpKS50cmllcz1oLHJ9LHQuZ2V0RmlsZU5hbWU9ZnVuY3Rpb24oZSl7dmFyIHQscz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZSxyPUVycm9yLnN0YWNrVHJhY2VMaW1pdCxuPXt9O3JldHVybiBFcnJvci5zdGFja1RyYWNlTGltaXQ9MTAsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9ZnVuY3Rpb24ocyxyKXtmb3IodmFyIG49MCxvPXIubGVuZ3RoO248bztuKyspaWYoKHQ9cltuXS5nZXRGaWxlTmFtZSgpKSE9PWkpe2lmKCFlKXJldHVybjtpZih0IT09ZSlyZXR1cm59fSxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShuKSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1zLEVycm9yLnN0YWNrVHJhY2VMaW1pdD1yLHR9LHQuZ2V0Um9vdD1mdW5jdGlvbihlKXtmb3IodmFyIHQscz1hKGUpOzspe2lmKCIuIj09PXMmJihzPXByb2Nlc3MuY3dkKCkpLGgobyhzLCJwYWNrYWdlLmpzb24iKSl8fGgobyhzLCJub2RlX21vZHVsZXMiKSkpcmV0dXJuIHM7aWYodD09PXMpdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBtb2R1bGUgcm9vdCBnaXZlbiBmaWxlOiAiJytlKyciLiBEbyB5b3UgaGF2ZSBhIGBwYWNrYWdlLmpzb25gIGZpbGU/ICcpO3Q9cyxzPW8ocywiLi4iKX19fSkuY2FsbCh0LCIvaW5kZXguanMiKX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0Ijtjb25zdCBpPVswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwxLDAsMSwxLDEsMSwxLDAsMCwxLDEsMCwxLDEsMCwxLDEsMSwxLDEsMSwxLDEsMSwxLDAsMCwwLDAsMCwwLDAsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDAsMCwwLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwwLDEsMCwxLDBdO2Z1bmN0aW9uIHIoZSx0LHMpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpP2VbdF0ucHVzaChzKTplW3RdPVtzXX1lLmV4cG9ydHM9e2Zvcm1hdDpmdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LmtleXMoZSkubWFwKHQ9Pnt2YXIgcz1lW3RdO3JldHVybiBBcnJheS5pc0FycmF5KHMpfHwocz1bc10pLHMubWFwKGU9Plt0XS5jb25jYXQoT2JqZWN0LmtleXMoZSkubWFwKHQ9Pnt2YXIgcz1lW3RdO3JldHVybiBBcnJheS5pc0FycmF5KHMpfHwocz1bc10pLHMubWFwKGU9PiEwPT09ZT90OmAke3R9PSR7ZX1gKS5qb2luKCI7ICIpfSkpLmpvaW4oIjsgIikpLmpvaW4oIiwgIil9KS5qb2luKCIsICIpfSxwYXJzZTpmdW5jdGlvbihlKXtjb25zdCB0PXt9O2lmKHZvaWQgMD09PWV8fCIiPT09ZSlyZXR1cm4gdDtmb3IodmFyIHMsbixvPXt9LGE9ITEsaD0hMSxjPSExLGw9LTEsdT0tMSxmPTA7ZjxlLmxlbmd0aDtmKyspe2NvbnN0IF89ZS5jaGFyQ29kZUF0KGYpO2lmKHZvaWQgMD09PXMpaWYoLTE9PT11JiYxPT09aVtfXSktMT09PWwmJihsPWYpO2Vsc2UgaWYoMzI9PT1ffHw5PT09XyktMT09PXUmJi0xIT09bCYmKHU9Zik7ZWxzZXtpZig1OSE9PV8mJjQ0IT09Xyl0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7Zn1gKTt7aWYoLTE9PT1sKXRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtmfWApOy0xPT09dSYmKHU9Zik7Y29uc3QgaT1lLnNsaWNlKGwsdSk7NDQ9PT1fPyhyKHQsaSxvKSxvPXt9KTpzPWksbD11PS0xfX1lbHNlIGlmKHZvaWQgMD09PW4paWYoLTE9PT11JiYxPT09aVtfXSktMT09PWwmJihsPWYpO2Vsc2UgaWYoMzI9PT1ffHw5PT09XyktMT09PXUmJi0xIT09bCYmKHU9Zik7ZWxzZSBpZig1OT09PV98fDQ0PT09Xyl7aWYoLTE9PT1sKXRocm93IG5ldyBFcnJvcihgdW5leHBlY3RlZCBjaGFyYWN0ZXIgYXQgaW5kZXggJHtmfWApOy0xPT09dSYmKHU9ZikscihvLGUuc2xpY2UobCx1KSwhMCksNDQ9PT1fJiYocih0LHMsbyksbz17fSxzPXZvaWQgMCksbD11PS0xfWVsc2V7aWYoNjEhPT1ffHwtMT09PWx8fC0xIT09dSl0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7Zn1gKTtuPWUuc2xpY2UobCxmKSxsPXU9LTF9ZWxzZSBpZihoKXtpZigxIT09aVtfXSl0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7Zn1gKTstMT09PWw/bD1mOmF8fChhPSEwKSxoPSExfWVsc2UgaWYoYylpZigxPT09aVtfXSktMT09PWwmJihsPWYpO2Vsc2UgaWYoMzQ9PT1fJiYtMSE9PWwpYz0hMSx1PWY7ZWxzZXtpZig5MiE9PV8pdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2Z9YCk7aD0hMH1lbHNlIGlmKDM0PT09XyYmNjE9PT1lLmNoYXJDb2RlQXQoZi0xKSljPSEwO2Vsc2UgaWYoLTE9PT11JiYxPT09aVtfXSktMT09PWwmJihsPWYpO2Vsc2UgaWYoLTE9PT1sfHwzMiE9PV8mJjkhPT1fKXtpZig1OSE9PV8mJjQ0IT09Xyl0aHJvdyBuZXcgRXJyb3IoYHVuZXhwZWN0ZWQgY2hhcmFjdGVyIGF0IGluZGV4ICR7Zn1gKTtpZigtMT09PWwpdGhyb3cgbmV3IEVycm9yKGB1bmV4cGVjdGVkIGNoYXJhY3RlciBhdCBpbmRleCAke2Z9YCk7LTE9PT11JiYodT1mKTt2YXIgZD1lLnNsaWNlKGwsdSk7YSYmKGQ9ZC5yZXBsYWNlKC9cXC9nLCIiKSxhPSExKSxyKG8sbixkKSw0ND09PV8mJihyKHQscyxvKSxvPXt9LHM9dm9pZCAwKSxuPXZvaWQgMCxsPXU9LTF9ZWxzZS0xPT09dSYmKHU9Zil9aWYoLTE9PT1sfHxjKXRocm93IG5ldyBFcnJvcigidW5leHBlY3RlZCBlbmQgb2YgaW5wdXQiKTstMT09PXUmJih1PWYpO2NvbnN0IF89ZS5zbGljZShsLHUpO3JldHVybiB2b2lkIDA9PT1zP3IodCxfLHt9KToodm9pZCAwPT09bj9yKG8sXywhMCk6cihvLG4sYT9fLnJlcGxhY2UoL1xcL2csIiIpOl8pLHIodCxzLG8pKSx0fX19LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7Ci8qIQogKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnQKICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+CiAqIE1JVCBMaWNlbnNlZAogKi9jb25zdCBpPXMoMCkscj1zKDEpLG49cygyNiksbz1zKDQpLGE9cygxMyksaD1zKDIpLGM9aS5CdWZmZXIsbD0wLHU9MSxmPTIsZD0zLF89NCxwPTU7ZnVuY3Rpb24gbShlLHQpe3JldHVybiAxPT09ZS5sZW5ndGg/ZVswXTplLmxlbmd0aD4xP28uY29uY2F0KGUsdCk6aC5FTVBUWV9CVUZGRVJ9ZS5leHBvcnRzPWNsYXNze2NvbnN0cnVjdG9yKGUsdCxzKXt0aGlzLl9iaW5hcnlUeXBlPXN8fGguQklOQVJZX1RZUEVTWzBdLHRoaXMuX2V4dGVuc2lvbnM9ZXx8e30sdGhpcy5fbWF4UGF5bG9hZD0wfHQsdGhpcy5fYnVmZmVyZWRCeXRlcz0wLHRoaXMuX2J1ZmZlcnM9W10sdGhpcy5fY29tcHJlc3NlZD0hMSx0aGlzLl9wYXlsb2FkTGVuZ3RoPTAsdGhpcy5fZnJhZ21lbnRlZD0wLHRoaXMuX21hc2tlZD0hMSx0aGlzLl9maW49ITEsdGhpcy5fbWFzaz1udWxsLHRoaXMuX29wY29kZT0wLHRoaXMuX3RvdGFsUGF5bG9hZExlbmd0aD0wLHRoaXMuX21lc3NhZ2VMZW5ndGg9MCx0aGlzLl9mcmFnbWVudHM9W10sdGhpcy5fY2xlYW51cENhbGxiYWNrPW51bGwsdGhpcy5faGFkRXJyb3I9ITEsdGhpcy5fZGVhZD0hMSx0aGlzLl9sb29wPSExLHRoaXMub25tZXNzYWdlPW51bGwsdGhpcy5vbmNsb3NlPW51bGwsdGhpcy5vbmVycm9yPW51bGwsdGhpcy5vbnBpbmc9bnVsbCx0aGlzLm9ucG9uZz1udWxsLHRoaXMuX3N0YXRlPWx9cmVhZEJ1ZmZlcihlKXt2YXIgdCxzLGk9MDtpZih0aGlzLl9idWZmZXJlZEJ5dGVzLT1lLGU9PT10aGlzLl9idWZmZXJzWzBdLmxlbmd0aClyZXR1cm4gdGhpcy5fYnVmZmVycy5zaGlmdCgpO2lmKGU8dGhpcy5fYnVmZmVyc1swXS5sZW5ndGgpcmV0dXJuIHQ9dGhpcy5fYnVmZmVyc1swXS5zbGljZSgwLGUpLHRoaXMuX2J1ZmZlcnNbMF09dGhpcy5fYnVmZmVyc1swXS5zbGljZShlKSx0O2Zvcih0PWMuYWxsb2NVbnNhZmUoZSk7ZT4wOyllPj0ocz10aGlzLl9idWZmZXJzWzBdLmxlbmd0aCk/KHRoaXMuX2J1ZmZlcnNbMF0uY29weSh0LGkpLGkrPXMsdGhpcy5fYnVmZmVycy5zaGlmdCgpKToodGhpcy5fYnVmZmVyc1swXS5jb3B5KHQsaSwwLGUpLHRoaXMuX2J1ZmZlcnNbMF09dGhpcy5fYnVmZmVyc1swXS5zbGljZShlKSksZS09cztyZXR1cm4gdH1oYXNCdWZmZXJlZEJ5dGVzKGUpe3JldHVybiB0aGlzLl9idWZmZXJlZEJ5dGVzPj1lfHwodGhpcy5fbG9vcD0hMSx0aGlzLl9kZWFkJiZ0aGlzLmNsZWFudXAodGhpcy5fY2xlYW51cENhbGxiYWNrKSwhMSl9YWRkKGUpe3RoaXMuX2RlYWR8fCh0aGlzLl9idWZmZXJlZEJ5dGVzKz1lLmxlbmd0aCx0aGlzLl9idWZmZXJzLnB1c2goZSksdGhpcy5zdGFydExvb3AoKSl9c3RhcnRMb29wKCl7Zm9yKHRoaXMuX2xvb3A9ITA7dGhpcy5fbG9vcDspc3dpdGNoKHRoaXMuX3N0YXRlKXtjYXNlIGw6dGhpcy5nZXRJbmZvKCk7YnJlYWs7Y2FzZSB1OnRoaXMuZ2V0UGF5bG9hZExlbmd0aDE2KCk7YnJlYWs7Y2FzZSBmOnRoaXMuZ2V0UGF5bG9hZExlbmd0aDY0KCk7YnJlYWs7Y2FzZSBkOnRoaXMuZ2V0TWFzaygpO2JyZWFrO2Nhc2UgXzp0aGlzLmdldERhdGEoKTticmVhaztkZWZhdWx0OnRoaXMuX2xvb3A9ITF9fWdldEluZm8oKXtpZighdGhpcy5oYXNCdWZmZXJlZEJ5dGVzKDIpKXJldHVybjtjb25zdCBlPXRoaXMucmVhZEJ1ZmZlcigyKTtpZigwIT0oNDgmZVswXSkpcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoIlJTVjIgYW5kIFJTVjMgbXVzdCBiZSBjbGVhciIpLDEwMDIpO2NvbnN0IHQ9NjQ9PSg2NCZlWzBdKTtpZighdHx8dGhpcy5fZXh0ZW5zaW9uc1tyLmV4dGVuc2lvbk5hbWVdKXtpZih0aGlzLl9maW49MTI4PT0oMTI4JmVbMF0pLHRoaXMuX29wY29kZT0xNSZlWzBdLHRoaXMuX3BheWxvYWRMZW5ndGg9MTI3JmVbMV0sMD09PXRoaXMuX29wY29kZSl7aWYodClyZXR1cm4gdm9pZCB0aGlzLmVycm9yKG5ldyBFcnJvcigiUlNWMSBtdXN0IGJlIGNsZWFyIiksMTAwMik7aWYoIXRoaXMuX2ZyYWdtZW50ZWQpcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoYGludmFsaWQgb3Bjb2RlOiAke3RoaXMuX29wY29kZX1gKSwxMDAyKTt0aGlzLl9vcGNvZGU9dGhpcy5fZnJhZ21lbnRlZH1lbHNlIGlmKDE9PT10aGlzLl9vcGNvZGV8fDI9PT10aGlzLl9vcGNvZGUpe2lmKHRoaXMuX2ZyYWdtZW50ZWQpcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoYGludmFsaWQgb3Bjb2RlOiAke3RoaXMuX29wY29kZX1gKSwxMDAyKTt0aGlzLl9jb21wcmVzc2VkPXR9ZWxzZXtpZighKHRoaXMuX29wY29kZT43JiZ0aGlzLl9vcGNvZGU8MTEpKXJldHVybiB2b2lkIHRoaXMuZXJyb3IobmV3IEVycm9yKGBpbnZhbGlkIG9wY29kZTogJHt0aGlzLl9vcGNvZGV9YCksMTAwMik7aWYoIXRoaXMuX2ZpbilyZXR1cm4gdm9pZCB0aGlzLmVycm9yKG5ldyBFcnJvcigiRklOIG11c3QgYmUgc2V0IiksMTAwMik7aWYodClyZXR1cm4gdm9pZCB0aGlzLmVycm9yKG5ldyBFcnJvcigiUlNWMSBtdXN0IGJlIGNsZWFyIiksMTAwMik7aWYodGhpcy5fcGF5bG9hZExlbmd0aD4xMjUpcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoImludmFsaWQgcGF5bG9hZCBsZW5ndGgiKSwxMDAyKX10aGlzLl9maW58fHRoaXMuX2ZyYWdtZW50ZWR8fCh0aGlzLl9mcmFnbWVudGVkPXRoaXMuX29wY29kZSksdGhpcy5fbWFza2VkPTEyOD09KDEyOCZlWzFdKSwxMjY9PT10aGlzLl9wYXlsb2FkTGVuZ3RoP3RoaXMuX3N0YXRlPXU6MTI3PT09dGhpcy5fcGF5bG9hZExlbmd0aD90aGlzLl9zdGF0ZT1mOnRoaXMuaGF2ZUxlbmd0aCgpfWVsc2UgdGhpcy5lcnJvcihuZXcgRXJyb3IoIlJTVjEgbXVzdCBiZSBjbGVhciIpLDEwMDIpfWdldFBheWxvYWRMZW5ndGgxNigpe3RoaXMuaGFzQnVmZmVyZWRCeXRlcygyKSYmKHRoaXMuX3BheWxvYWRMZW5ndGg9dGhpcy5yZWFkQnVmZmVyKDIpLnJlYWRVSW50MTZCRSgwLCEwKSx0aGlzLmhhdmVMZW5ndGgoKSl9Z2V0UGF5bG9hZExlbmd0aDY0KCl7aWYoIXRoaXMuaGFzQnVmZmVyZWRCeXRlcyg4KSlyZXR1cm47Y29uc3QgZT10aGlzLnJlYWRCdWZmZXIoOCksdD1lLnJlYWRVSW50MzJCRSgwLCEwKTt0Pk1hdGgucG93KDIsMjEpLTE/dGhpcy5lcnJvcihuZXcgRXJyb3IoIm1heCBwYXlsb2FkIHNpemUgZXhjZWVkZWQiKSwxMDA5KToodGhpcy5fcGF5bG9hZExlbmd0aD10Kk1hdGgucG93KDIsMzIpK2UucmVhZFVJbnQzMkJFKDQsITApLHRoaXMuaGF2ZUxlbmd0aCgpKX1oYXZlTGVuZ3RoKCl7dGhpcy5fb3Bjb2RlPDgmJnRoaXMubWF4UGF5bG9hZEV4Y2VlZGVkKHRoaXMuX3BheWxvYWRMZW5ndGgpfHwodGhpcy5fbWFza2VkP3RoaXMuX3N0YXRlPWQ6dGhpcy5fc3RhdGU9Xyl9Z2V0TWFzaygpe3RoaXMuaGFzQnVmZmVyZWRCeXRlcyg0KSYmKHRoaXMuX21hc2s9dGhpcy5yZWFkQnVmZmVyKDQpLHRoaXMuX3N0YXRlPV8pfWdldERhdGEoKXt2YXIgZT1oLkVNUFRZX0JVRkZFUjtpZih0aGlzLl9wYXlsb2FkTGVuZ3RoKXtpZighdGhpcy5oYXNCdWZmZXJlZEJ5dGVzKHRoaXMuX3BheWxvYWRMZW5ndGgpKXJldHVybjtlPXRoaXMucmVhZEJ1ZmZlcih0aGlzLl9wYXlsb2FkTGVuZ3RoKSx0aGlzLl9tYXNrZWQmJm8udW5tYXNrKGUsdGhpcy5fbWFzayl9dGhpcy5fb3Bjb2RlPjc/dGhpcy5jb250cm9sTWVzc2FnZShlKTp0aGlzLl9jb21wcmVzc2VkPyh0aGlzLl9zdGF0ZT1wLHRoaXMuZGVjb21wcmVzcyhlKSk6dGhpcy5wdXNoRnJhZ21lbnQoZSkmJnRoaXMuZGF0YU1lc3NhZ2UoKX1kZWNvbXByZXNzKGUpe3RoaXMuX2V4dGVuc2lvbnNbci5leHRlbnNpb25OYW1lXS5kZWNvbXByZXNzKGUsdGhpcy5fZmluLChlLHQpPT57ZT90aGlzLmVycm9yKGUsMTAwOT09PWUuY2xvc2VDb2RlPzEwMDk6MTAwNyk6KHRoaXMucHVzaEZyYWdtZW50KHQpJiZ0aGlzLmRhdGFNZXNzYWdlKCksdGhpcy5zdGFydExvb3AoKSl9KX1kYXRhTWVzc2FnZSgpe2lmKHRoaXMuX2Zpbil7Y29uc3QgdD10aGlzLl9tZXNzYWdlTGVuZ3RoLHM9dGhpcy5fZnJhZ21lbnRzO2lmKHRoaXMuX3RvdGFsUGF5bG9hZExlbmd0aD0wLHRoaXMuX21lc3NhZ2VMZW5ndGg9MCx0aGlzLl9mcmFnbWVudGVkPTAsdGhpcy5fZnJhZ21lbnRzPVtdLDI9PT10aGlzLl9vcGNvZGUpe3ZhciBlO2U9Im5vZGVidWZmZXIiPT09dGhpcy5fYmluYXJ5VHlwZT9tKHMsdCk6ImFycmF5YnVmZmVyIj09PXRoaXMuX2JpbmFyeVR5cGU/ZnVuY3Rpb24oZSl7cmV0dXJuIDA9PT1lLmJ5dGVPZmZzZXQmJmUuYnl0ZUxlbmd0aD09PWUuYnVmZmVyLmJ5dGVMZW5ndGg/ZS5idWZmZXI6ZS5idWZmZXIuc2xpY2UoZS5ieXRlT2Zmc2V0LGUuYnl0ZU9mZnNldCtlLmJ5dGVMZW5ndGgpfShtKHMsdCkpOnMsdGhpcy5vbm1lc3NhZ2UoZSl9ZWxzZXtjb25zdCBlPW0ocyx0KTtpZighbihlKSlyZXR1cm4gdm9pZCB0aGlzLmVycm9yKG5ldyBFcnJvcigiaW52YWxpZCB1dGY4IHNlcXVlbmNlIiksMTAwNyk7dGhpcy5vbm1lc3NhZ2UoZS50b1N0cmluZygpKX19dGhpcy5fc3RhdGU9bH1jb250cm9sTWVzc2FnZShlKXtpZig4IT09dGhpcy5fb3Bjb2RlKTk9PT10aGlzLl9vcGNvZGU/dGhpcy5vbnBpbmcoZSk6dGhpcy5vbnBvbmcoZSksdGhpcy5fc3RhdGU9bDtlbHNlIGlmKDA9PT1lLmxlbmd0aCl0aGlzLm9uY2xvc2UoMWUzLCIiKSx0aGlzLl9sb29wPSExLHRoaXMuY2xlYW51cCh0aGlzLl9jbGVhbnVwQ2FsbGJhY2spO2Vsc2UgaWYoMT09PWUubGVuZ3RoKXRoaXMuZXJyb3IobmV3IEVycm9yKCJpbnZhbGlkIHBheWxvYWQgbGVuZ3RoIiksMTAwMik7ZWxzZXtjb25zdCB0PWUucmVhZFVJbnQxNkJFKDAsITApO2lmKCFhLmlzVmFsaWRFcnJvckNvZGUodCkpcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoYGludmFsaWQgc3RhdHVzIGNvZGU6ICR7dH1gKSwxMDAyKTtjb25zdCBzPWUuc2xpY2UoMik7aWYoIW4ocykpcmV0dXJuIHZvaWQgdGhpcy5lcnJvcihuZXcgRXJyb3IoImludmFsaWQgdXRmOCBzZXF1ZW5jZSIpLDEwMDcpO3RoaXMub25jbG9zZSh0LHMudG9TdHJpbmcoKSksdGhpcy5fbG9vcD0hMSx0aGlzLmNsZWFudXAodGhpcy5fY2xlYW51cENhbGxiYWNrKX19ZXJyb3IoZSx0KXt0aGlzLm9uZXJyb3IoZSx0KSx0aGlzLl9oYWRFcnJvcj0hMCx0aGlzLl9sb29wPSExLHRoaXMuY2xlYW51cCh0aGlzLl9jbGVhbnVwQ2FsbGJhY2spfW1heFBheWxvYWRFeGNlZWRlZChlKXtpZigwPT09ZXx8dGhpcy5fbWF4UGF5bG9hZDwxKXJldHVybiExO2NvbnN0IHQ9dGhpcy5fdG90YWxQYXlsb2FkTGVuZ3RoK2U7cmV0dXJuIHQ8PXRoaXMuX21heFBheWxvYWQ/KHRoaXMuX3RvdGFsUGF5bG9hZExlbmd0aD10LCExKToodGhpcy5lcnJvcihuZXcgRXJyb3IoIm1heCBwYXlsb2FkIHNpemUgZXhjZWVkZWQiKSwxMDA5KSwhMCl9cHVzaEZyYWdtZW50KGUpe2lmKDA9PT1lLmxlbmd0aClyZXR1cm4hMDtjb25zdCB0PXRoaXMuX21lc3NhZ2VMZW5ndGgrZS5sZW5ndGg7cmV0dXJuIHRoaXMuX21heFBheWxvYWQ8MXx8dDw9dGhpcy5fbWF4UGF5bG9hZD8odGhpcy5fbWVzc2FnZUxlbmd0aD10LHRoaXMuX2ZyYWdtZW50cy5wdXNoKGUpLCEwKToodGhpcy5lcnJvcihuZXcgRXJyb3IoIm1heCBwYXlsb2FkIHNpemUgZXhjZWVkZWQiKSwxMDA5KSwhMSl9Y2xlYW51cChlKXt0aGlzLl9kZWFkPSEwLHRoaXMuX2hhZEVycm9yfHwhdGhpcy5fbG9vcCYmdGhpcy5fc3RhdGUhPT1wPyh0aGlzLl9leHRlbnNpb25zPW51bGwsdGhpcy5fZnJhZ21lbnRzPW51bGwsdGhpcy5fYnVmZmVycz1udWxsLHRoaXMuX21hc2s9bnVsbCx0aGlzLl9jbGVhbnVwQ2FsbGJhY2s9bnVsbCx0aGlzLm9ubWVzc2FnZT1udWxsLHRoaXMub25jbG9zZT1udWxsLHRoaXMub25lcnJvcj1udWxsLHRoaXMub25waW5nPW51bGwsdGhpcy5vbnBvbmc9bnVsbCxlJiZlKCkpOnRoaXMuX2NsZWFudXBDYWxsYmFjaz1lfX19LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7Ci8qIQogKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnQKICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+CiAqIE1JVCBMaWNlbnNlZAogKi9lLmV4cG9ydHM9e2lzVmFsaWRFcnJvckNvZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGU+PTFlMyYmZTw9MTAxMyYmMTAwNCE9PWUmJjEwMDUhPT1lJiYxMDA2IT09ZXx8ZT49M2UzJiZlPD00OTk5fSwxMDAwOiJub3JtYWwiLDEwMDE6ImdvaW5nIGF3YXkiLDEwMDI6InByb3RvY29sIGVycm9yIiwxMDAzOiJ1bnN1cHBvcnRlZCBkYXRhIiwxMDA0OiJyZXNlcnZlZCIsMTAwNToicmVzZXJ2ZWQgZm9yIGV4dGVuc2lvbnMiLDEwMDY6InJlc2VydmVkIGZvciBleHRlbnNpb25zIiwxMDA3OiJpbmNvbnNpc3RlbnQgb3IgaW52YWxpZCBkYXRhIiwxMDA4OiJwb2xpY3kgdmlvbGF0aW9uIiwxMDA5OiJtZXNzYWdlIHRvbyBiaWciLDEwMTA6ImV4dGVuc2lvbiBoYW5kc2hha2UgbWlzc2luZyIsMTAxMToiYW4gdW5leHBlY3RlZCBjb25kaXRpb24gcHJldmVudGVkIHRoZSByZXF1ZXN0IGZyb20gYmVpbmcgZnVsZmlsbGVkIiwxMDEyOiJzZXJ2aWNlIHJlc3RhcnQiLDEwMTM6InRyeSBhZ2FpbiBsYXRlciJ9fSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiOwovKiEKICogd3M6IGEgbm9kZS5qcyB3ZWJzb2NrZXQgY2xpZW50CiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPgogKiBNSVQgTGljZW5zZWQKICovY29uc3QgaT1zKDApLHI9cygzKSxuPXMoMSksbz1zKDQpLGE9cygxMyksaD1zKDIpLGM9aS5CdWZmZXI7Y2xhc3MgbHtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuX2V4dGVuc2lvbnM9dHx8e30sdGhpcy5fc29ja2V0PWUsdGhpcy5fZmlyc3RGcmFnbWVudD0hMCx0aGlzLl9jb21wcmVzcz0hMSx0aGlzLl9idWZmZXJlZEJ5dGVzPTAsdGhpcy5fZGVmbGF0aW5nPSExLHRoaXMuX3F1ZXVlPVtdfXN0YXRpYyBmcmFtZShlLHQpe2NvbnN0IHM9ZS5sZW5ndGg8MTAyNHx8dC5tYXNrJiZ0LnJlYWRPbmx5O3ZhciBpPXQubWFzaz82OjIsbj1lLmxlbmd0aDtlLmxlbmd0aD49NjU1MzY/KGkrPTgsbj0xMjcpOmUubGVuZ3RoPjEyNSYmKGkrPTIsbj0xMjYpO2NvbnN0IGE9Yy5hbGxvY1Vuc2FmZShzP2UubGVuZ3RoK2k6aSk7aWYoYVswXT10LmZpbj8xMjh8dC5vcGNvZGU6dC5vcGNvZGUsdC5yc3YxJiYoYVswXXw9NjQpLDEyNj09PW4/YS53cml0ZVVJbnQxNkJFKGUubGVuZ3RoLDIsITApOjEyNz09PW4mJihhLndyaXRlVUludDMyQkUoMCwyLCEwKSxhLndyaXRlVUludDMyQkUoZS5sZW5ndGgsNiwhMCkpLCF0Lm1hc2spcmV0dXJuIGFbMV09bixzPyhlLmNvcHkoYSxpKSxbYV0pOlthLGVdO2NvbnN0IGg9ci5yYW5kb21CeXRlcyg0KTtyZXR1cm4gYVsxXT0xMjh8bixhW2ktNF09aFswXSxhW2ktM109aFsxXSxhW2ktMl09aFsyXSxhW2ktMV09aFszXSxzPyhvLm1hc2soZSxoLGEsaSxlLmxlbmd0aCksW2FdKTooby5tYXNrKGUsaCxlLDAsZS5sZW5ndGgpLFthLGVdKX1jbG9zZShlLHQscyxpKXt2YXIgcjtpZih2b2lkIDA9PT1lKWU9MWUzO2Vsc2UgaWYoIm51bWJlciIhPXR5cGVvZiBlfHwhYS5pc1ZhbGlkRXJyb3JDb2RlKGUpKXRocm93IG5ldyBFcnJvcigiZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHZhbGlkIGVycm9yIGNvZGUgbnVtYmVyIik7dm9pZCAwPT09dHx8IiI9PT10PzFlMz09PWU/cj1oLkVNUFRZX0JVRkZFUjoocj1jLmFsbG9jVW5zYWZlKDIpKS53cml0ZVVJbnQxNkJFKGUsMCwhMCk6KChyPWMuYWxsb2NVbnNhZmUoMitjLmJ5dGVMZW5ndGgodCkpKS53cml0ZVVJbnQxNkJFKGUsMCwhMCksci53cml0ZSh0LDIpKSx0aGlzLl9kZWZsYXRpbmc/dGhpcy5lbnF1ZXVlKFt0aGlzLmRvQ2xvc2UscixzLGldKTp0aGlzLmRvQ2xvc2UocixzLGkpfWRvQ2xvc2UoZSx0LHMpe3RoaXMuc2VuZEZyYW1lKGwuZnJhbWUoZSx7ZmluOiEwLHJzdjE6ITEsb3Bjb2RlOjgsbWFzazp0LHJlYWRPbmx5OiExfSkscyl9cGluZyhlLHQpe3ZhciBzPSEwO2MuaXNCdWZmZXIoZSl8fChlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXI/ZT1jLmZyb20oZSk6QXJyYXlCdWZmZXIuaXNWaWV3KGUpP2U9dShlKTooZT1jLmZyb20oZSkscz0hMSkpLHRoaXMuX2RlZmxhdGluZz90aGlzLmVucXVldWUoW3RoaXMuZG9QaW5nLGUsdCxzXSk6dGhpcy5kb1BpbmcoZSx0LHMpfWRvUGluZyhlLHQscyl7dGhpcy5zZW5kRnJhbWUobC5mcmFtZShlLHtmaW46ITAscnN2MTohMSxvcGNvZGU6OSxtYXNrOnQscmVhZE9ubHk6c30pKX1wb25nKGUsdCl7dmFyIHM9ITA7Yy5pc0J1ZmZlcihlKXx8KGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9lPWMuZnJvbShlKTpBcnJheUJ1ZmZlci5pc1ZpZXcoZSk/ZT11KGUpOihlPWMuZnJvbShlKSxzPSExKSksdGhpcy5fZGVmbGF0aW5nP3RoaXMuZW5xdWV1ZShbdGhpcy5kb1BvbmcsZSx0LHNdKTp0aGlzLmRvUG9uZyhlLHQscyl9ZG9Qb25nKGUsdCxzKXt0aGlzLnNlbmRGcmFtZShsLmZyYW1lKGUse2ZpbjohMCxyc3YxOiExLG9wY29kZToxMCxtYXNrOnQscmVhZE9ubHk6c30pKX1zZW5kKGUsdCxzKXt2YXIgaT10LmJpbmFyeT8yOjEscj10LmNvbXByZXNzLG89ITA7Yy5pc0J1ZmZlcihlKXx8KGUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9lPWMuZnJvbShlKTpBcnJheUJ1ZmZlci5pc1ZpZXcoZSk/ZT11KGUpOihlPWMuZnJvbShlKSxvPSExKSk7Y29uc3QgYT10aGlzLl9leHRlbnNpb25zW24uZXh0ZW5zaW9uTmFtZV07aWYodGhpcy5fZmlyc3RGcmFnbWVudD8odGhpcy5fZmlyc3RGcmFnbWVudD0hMSxyJiZhJiYocj1lLmxlbmd0aD49YS5fdGhyZXNob2xkKSx0aGlzLl9jb21wcmVzcz1yKToocj0hMSxpPTApLHQuZmluJiYodGhpcy5fZmlyc3RGcmFnbWVudD0hMCksYSl7Y29uc3Qgbj17ZmluOnQuZmluLHJzdjE6cixvcGNvZGU6aSxtYXNrOnQubWFzayxyZWFkT25seTpvfTt0aGlzLl9kZWZsYXRpbmc/dGhpcy5lbnF1ZXVlKFt0aGlzLmRpc3BhdGNoLGUsdGhpcy5fY29tcHJlc3MsbixzXSk6dGhpcy5kaXNwYXRjaChlLHRoaXMuX2NvbXByZXNzLG4scyl9ZWxzZSB0aGlzLnNlbmRGcmFtZShsLmZyYW1lKGUse2Zpbjp0LmZpbixyc3YxOiExLG9wY29kZTppLG1hc2s6dC5tYXNrLHJlYWRPbmx5Om99KSxzKX1kaXNwYXRjaChlLHQscyxpKXtpZighdClyZXR1cm4gdm9pZCB0aGlzLnNlbmRGcmFtZShsLmZyYW1lKGUscyksaSk7Y29uc3Qgcj10aGlzLl9leHRlbnNpb25zW24uZXh0ZW5zaW9uTmFtZV07dGhpcy5fZGVmbGF0aW5nPSEwLHIuY29tcHJlc3MoZSxzLmZpbiwoZSx0KT0+e3MucmVhZE9ubHk9ITEsdGhpcy5zZW5kRnJhbWUobC5mcmFtZSh0LHMpLGkpLHRoaXMuX2RlZmxhdGluZz0hMSx0aGlzLmRlcXVldWUoKX0pfWRlcXVldWUoKXtmb3IoOyF0aGlzLl9kZWZsYXRpbmcmJnRoaXMuX3F1ZXVlLmxlbmd0aDspe2NvbnN0IGU9dGhpcy5fcXVldWUuc2hpZnQoKTt0aGlzLl9idWZmZXJlZEJ5dGVzLT1lWzFdLmxlbmd0aCxlWzBdLmFwcGx5KHRoaXMsZS5zbGljZSgxKSl9fWVucXVldWUoZSl7dGhpcy5fYnVmZmVyZWRCeXRlcys9ZVsxXS5sZW5ndGgsdGhpcy5fcXVldWUucHVzaChlKX1zZW5kRnJhbWUoZSx0KXsyPT09ZS5sZW5ndGg/KHRoaXMuX3NvY2tldC53cml0ZShlWzBdKSx0aGlzLl9zb2NrZXQud3JpdGUoZVsxXSx0KSk6dGhpcy5fc29ja2V0LndyaXRlKGVbMF0sdCl9fWZ1bmN0aW9uIHUoZSl7Y29uc3QgdD1jLmZyb20oZS5idWZmZXIpO3JldHVybiBlLmJ5dGVMZW5ndGghPT1lLmJ1ZmZlci5ieXRlTGVuZ3RoP3Quc2xpY2UoZS5ieXRlT2Zmc2V0LGUuYnl0ZU9mZnNldCtlLmJ5dGVMZW5ndGgpOnR9ZS5leHBvcnRzPWx9LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLHQuZGVmYXVsdD1mdW5jdGlvbihlLHQscyl7cmV0dXJue25hbWU6IlZlcnR4UHJvdG9TdHViIixpbnN0YW5jZTpuZXcgbyhlLHQscyl9fTt2YXIgaT1zKDE2KSxyPXMubihpKTtmdW5jdGlvbiBuKGUsdCl7Zm9yKHZhciBzPTA7czx0Lmxlbmd0aDtzKyspe3ZhciBpPXRbc107aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsInZhbHVlImluIGkmJihpLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxpLmtleSxpKX19dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQscyxpKXt2YXIgcj10aGlzO2lmKGZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksIXQpdGhyb3cgbmV3IEVycm9yKCJUaGUgcnVudGltZVByb3RvU3R1YlVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIiKTtpZighcyl0aHJvdyBuZXcgRXJyb3IoIlRoZSBidXMgaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7aWYoIWkpdGhyb3cgbmV3IEVycm9yKCJUaGUgY29uZmlnIGlzIGEgbmVlZGVkIHBhcmFtZXRlciIpO2lmKCFpLnVybCl0aHJvdyBuZXcgRXJyb3IoIlRoZSBjb25maWcudXJsIGlzIGEgbmVlZGVkIHBhcmFtZXRlciIpO2lmKCFpLnJ1bnRpbWVVUkwpdGhyb3cgbmV3IEVycm9yKCJUaGUgY29uZmlnLnJ1bnRpbWVVUkwgaXMgYSBuZWVkZWQgcGFyYW1ldGVyIik7dmFyIG49dGhpczt0aGlzLl9pZD0wLHRoaXMuX2NvbnRpbnVvdXNPcGVuPSEwLHRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkw9dCx0aGlzLl9idXM9cyx0aGlzLl9jb25maWc9aSx0aGlzLl9ydW50aW1lU2Vzc2lvblVSTD1pLnJ1bnRpbWVVUkwsdGhpcy5fcmVPcGVuPSExLHMuYWRkTGlzdGVuZXIoIioiLGZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCJbVmVydHhQcm90b1N0dWJdIG91dGdvaW5nIG1lc3NhZ2U6ICIsZSksbi5fb3BlbihmdW5jdGlvbigpe24uX2ZpbHRlcihlKSYmKGUuYm9keXx8KGUuYm9keT17fSksZS5ib2R5LnZpYT1yLl9ydW50aW1lUHJvdG9TdHViVVJMLGNvbnNvbGUubG9nKCJbVmVydHhQcm90b1N0dWI6IFByb3RvU3R1YiAtPiBNTl0iLGUpLG4uX3NvY2suc2VuZChKU09OLnN0cmluZ2lmeShlKSkpfSl9KSxuLl9zZW5kU3RhdHVzKCJjcmVhdGVkIil9cmV0dXJuIGZ1bmN0aW9uKGUsdCxzKXt0JiZuKGUucHJvdG90eXBlLHQpLHMmJm4oZSxzKX0oZSxbe2tleToiY29ubmVjdCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9jb250aW51b3VzT3Blbj0hMCx0aGlzLl9vcGVuKGZ1bmN0aW9uKCl7fSl9fSx7a2V5OiJkaXNjb25uZWN0Iix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2NvbnRpbnVvdXNPcGVuPSExLHRoaXMuX3NvY2smJnRoaXMuX3NlbmRDbG9zZSgpfX0se2tleToiX3NlbmRPcGVuIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuX3NlbmRTdGF0dXMoImluLXByb2dyZXNzIiksdC5faWQrKzt2YXIgcz17aWQ6dC5faWQsdHlwZToib3BlbiIsZnJvbTp0Ll9ydW50aW1lU2Vzc2lvblVSTCx0bzoibW46L3Nlc3Npb24ifTt0Ll9yZU9wZW4mJihzLnR5cGU9InJlLW9wZW4iKTt2YXIgaT0hMTt0Ll9zZXNzaW9uQ2FsbGJhY2s9ZnVuY3Rpb24ocil7InJlc3BvbnNlIj09PXIudHlwZSZyLmlkPT09cy5pZCYmKGk9ITAsMjAwPT09ci5ib2R5LmNvZGU/KHIuYm9keS5ydW50aW1lVG9rZW4mJih0Ll9yZU9wZW49ITAsdC5fcnVudGltZVNlc3Npb25VUkw9dC5fY29uZmlnLnJ1bnRpbWVVUkwrIi8iK3IuYm9keS5ydW50aW1lVG9rZW4pLHQuX3NlbmRTdGF0dXMoImxpdmUiKSxlKCkpOnQuX3NlbmRTdGF0dXMoImZhaWxlZCIsci5ib2R5LmRlc2MpKX0sdC5fc29jay5zZW5kKEpTT04uc3RyaW5naWZ5KHMpKSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aXx8dC5fc2VuZFN0YXR1cygiZGlzY29ubmVjdGVkIiwiVGltZW91dCBmcm9tIG1uOi9zZXNzaW9uIil9LDNlMyl9fSx7a2V5OiJfc2VuZENsb3NlIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2lkKys7dmFyIGU9e2lkOnRoaXMuX2lkLHR5cGU6ImNsb3NlIixmcm9tOnRoaXMuX3J1bnRpbWVTZXNzaW9uVVJMLHRvOiJtbjovc2Vzc2lvbiJ9O3RoaXMuX3JlT3Blbj0hMSx0aGlzLl9ydW50aW1lU2Vzc2lvblVSTD10aGlzLl9jb25maWcuX3J1bnRpbWVVUkwsdGhpcy5fc29jay5zZW5kKEpTT04uc3RyaW5naWZ5KGUpKX19LHtrZXk6Il9zZW5kU3RhdHVzIix2YWx1ZTpmdW5jdGlvbihlLHQpe2NvbnNvbGUubG9nKCJbVmVydHhQcm90b3N0dWIgc3RhdHVzIGNoYW5nZWRdIHRvICIsZSksdGhpcy5fc3RhdGU9ZTt2YXIgcz17dHlwZToidXBkYXRlIixmcm9tOnRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkwsdG86dGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCsiL3N0YXR1cyIsYm9keTp7dmFsdWU6ZX19O3QmJihzLmJvZHkuZGVzYz10KSx0aGlzLl9idXMucG9zdE1lc3NhZ2Uocyl9fSx7a2V5OiJfd2FpdFJlYWR5Iix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzOzE9PT10Ll9zb2NrLnJlYWR5U3RhdGU/ZSgpOnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0Ll93YWl0UmVhZHkoZSl9KX19LHtrZXk6Il9maWx0ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe3JldHVybiFlLmJvZHl8fGUuYm9keS52aWEhPT10aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMfX0se2tleToiX2RlbGl2ZXIiLHZhbHVlOmZ1bmN0aW9uKGUpe2UuYm9keXx8KGUuYm9keT17fSksZS5ib2R5LnZpYT10aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMLGNvbnNvbGUubG9nKCJbVmVydHhQcm90b1N0dWI6IE1OIC0+IFByb3RvU3R1Yl0iLGUpLHRoaXMuX2J1cy5wb3N0TWVzc2FnZShlKX19LHtrZXk6Il9vcGVuIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzO3RoaXMuX2NvbnRpbnVvdXNPcGVuJiYodC5fc29jaz90Ll93YWl0UmVhZHkoZSk6KCJ3cyI9PT10Ll9jb25maWcudXJsLnN1YnN0cmluZygwLDIpP3QuX3NvY2s9bmV3IHIuYSh0Ll9jb25maWcudXJsKTp0Ll9zb2NrPW5ldyBTb2NrSlModC5fY29uZmlnLnVybCksdC5fc29jay5vbm9wZW49ZnVuY3Rpb24oKXt0Ll9zZW5kT3BlbihmdW5jdGlvbigpe2UoKX0pfSx0Ll9zb2NrLm9ubWVzc2FnZT1mdW5jdGlvbihlKXt2YXIgcz1KU09OLnBhcnNlKGUuZGF0YSk7Y29uc29sZS5sb2coIltWZXJ0eFByb3RvU3R1YjogTU4gLT4gU09DS0VUIE9OIE1FU1NBR0VdIixzKSwibW46L3Nlc3Npb24iPT09cy5mcm9tP3QuX3Nlc3Npb25DYWxsYmFjayYmdC5fc2Vzc2lvbkNhbGxiYWNrKHMpOnQuX2ZpbHRlcihzKSYmdC5fZGVsaXZlcihzKX0sdC5fc29jay5vbmNsb3NlPWZ1bmN0aW9uKGUpe3ZhciBzO3M9MWUzPT09ZS5jb2RlPyJOb3JtYWwgY2xvc3VyZSwgbWVhbmluZyB0aGF0IHRoZSBwdXJwb3NlIGZvciB3aGljaCB0aGUgY29ubmVjdGlvbiB3YXMgZXN0YWJsaXNoZWQgaGFzIGJlZW4gZnVsZmlsbGVkLiI6MTAwMT09PWUuY29kZT8iQW4gZW5kcG9pbnQgaXMgJ2dvaW5nIGF3YXknLCBzdWNoIGFzIGEgc2VydmVyIGdvaW5nIGRvd24gb3IgYSBicm93c2VyIGhhdmluZyBuYXZpZ2F0ZWQgYXdheSBmcm9tIGEgcGFnZS4iOjEwMDI9PT1lLmNvZGU/IkFuIGVuZHBvaW50IGlzIHRlcm1pbmF0aW5nIHRoZSBjb25uZWN0aW9uIGR1ZSB0byBhIHByb3RvY29sIGVycm9yIjoxMDAzPT09ZS5jb2RlPyJBbiBlbmRwb2ludCBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBiZWNhdXNlIGl0IGhhcyByZWNlaXZlZCBhIHR5cGUgb2YgZGF0YSBpdCBjYW5ub3QgYWNjZXB0IChlLmcuLCBhbiBlbmRwb2ludCB0aGF0IHVuZGVyc3RhbmRzIG9ubHkgdGV4dCBkYXRhIE1BWSBzZW5kIHRoaXMgaWYgaXQgcmVjZWl2ZXMgYSBiaW5hcnkgbWVzc2FnZSkuIjoxMDA0PT09ZS5jb2RlPyJSZXNlcnZlZC4gVGhlIHNwZWNpZmljIG1lYW5pbmcgbWlnaHQgYmUgZGVmaW5lZCBpbiB0aGUgZnV0dXJlLiI6MTAwNT09PWUuY29kZT8iTm8gc3RhdHVzIGNvZGUgd2FzIGFjdHVhbGx5IHByZXNlbnQuIjoxMDA2PT09ZS5jb2RlPyJUaGUgY29ubmVjdGlvbiB3YXMgY2xvc2VkIGFibm9ybWFsbHksIGUuZy4sIHdpdGhvdXQgc2VuZGluZyBvciByZWNlaXZpbmcgYSBDbG9zZSBjb250cm9sIGZyYW1lIjoxMDA3PT09ZS5jb2RlPyJBbiBlbmRwb2ludCBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBiZWNhdXNlIGl0IGhhcyByZWNlaXZlZCBkYXRhIHdpdGhpbiBhIG1lc3NhZ2UgdGhhdCB3YXMgbm90IGNvbnNpc3RlbnQgd2l0aCB0aGUgdHlwZSBvZiB0aGUgbWVzc2FnZSAoZS5nLiwgbm9uLVVURi04IFtodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNjI5XSBkYXRhIHdpdGhpbiBhIHRleHQgbWVzc2FnZSkuIjoxMDA4PT09ZS5jb2RlPydBbiBlbmRwb2ludCBpcyB0ZXJtaW5hdGluZyB0aGUgY29ubmVjdGlvbiBiZWNhdXNlIGl0IGhhcyByZWNlaXZlZCBhIG1lc3NhZ2UgdGhhdCAidmlvbGF0ZXMgaXRzIHBvbGljeSIuIFRoaXMgcmVhc29uIGlzIGdpdmVuIGVpdGhlciBpZiB0aGVyZSBpcyBubyBvdGhlciBzdXRpYmxlIHJlYXNvbiwgb3IgaWYgdGhlcmUgaXMgYSBuZWVkIHRvIGhpZGUgc3BlY2lmaWMgZGV0YWlscyBhYm91dCB0aGUgcG9saWN5Lic6MTAwOT09PWUuY29kZT8iQW4gZW5kcG9pbnQgaXMgdGVybWluYXRpbmcgdGhlIGNvbm5lY3Rpb24gYmVjYXVzZSBpdCBoYXMgcmVjZWl2ZWQgYSBtZXNzYWdlIHRoYXQgaXMgdG9vIGJpZyBmb3IgaXQgdG8gcHJvY2Vzcy4iOjEwMTA9PT1lLmNvZGU/IkFuIGVuZHBvaW50IChjbGllbnQpIGlzIHRlcm1pbmF0aW5nIHRoZSBjb25uZWN0aW9uIGJlY2F1c2UgaXQgaGFzIGV4cGVjdGVkIHRoZSBzZXJ2ZXIgdG8gbmVnb3RpYXRlIG9uZSBvciBtb3JlIGV4dGVuc2lvbiwgYnV0IHRoZSBzZXJ2ZXIgZGlkbid0IHJldHVybiB0aGVtIGluIHRoZSByZXNwb25zZSBtZXNzYWdlIG9mIHRoZSBXZWJTb2NrZXQgaGFuZHNoYWtlLiA8YnIgLz4gU3BlY2lmaWNhbGx5LCB0aGUgZXh0ZW5zaW9ucyB0aGF0IGFyZSBuZWVkZWQgYXJlOiAiK2UucmVhc29uOjEwMTE9PT1lLmNvZGU/IkEgc2VydmVyIGlzIHRlcm1pbmF0aW5nIHRoZSBjb25uZWN0aW9uIGJlY2F1c2UgaXQgZW5jb3VudGVyZWQgYW4gdW5leHBlY3RlZCBjb25kaXRpb24gdGhhdCBwcmV2ZW50ZWQgaXQgZnJvbSBmdWxmaWxsaW5nIHRoZSByZXF1ZXN0LiI6MTAxNT09PWUuY29kZT8iVGhlIGNvbm5lY3Rpb24gd2FzIGNsb3NlZCBkdWUgdG8gYSBmYWlsdXJlIHRvIHBlcmZvcm0gYSBUTFMgaGFuZHNoYWtlIChlLmcuLCB0aGUgc2VydmVyIGNlcnRpZmljYXRlIGNhbid0IGJlIHZlcmlmaWVkKS4iOiJVbmtub3duIHJlYXNvbiIsZGVsZXRlIHQuX3NvY2ssdC5fc2VuZFN0YXR1cygiZGlzY29ubmVjdGVkIixzKX0pKX19LHtrZXk6ImNvbmZpZyIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2NvbmZpZ319LHtrZXk6InJ1bnRpbWVTZXNzaW9uIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcnVudGltZVNlc3Npb25VUkx9fV0pLGV9KCl9LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7Ci8qIQogKiB3czogYSBub2RlLmpzIHdlYnNvY2tldCBjbGllbnQKICogQ29weXJpZ2h0KGMpIDIwMTEgRWluYXIgT3R0byBTdGFuZ3ZpayA8ZWluYXJvc0BnbWFpbC5jb20+CiAqIE1JVCBMaWNlbnNlZAogKi9jb25zdCBpPXMoNSk7aS5TZXJ2ZXI9cygyOSksaS5SZWNlaXZlcj1zKDEyKSxpLlNlbmRlcj1zKDE0KSxlLmV4cG9ydHM9aX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9cmVxdWlyZSgiaHR0cHMiKX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9cmVxdWlyZSgiYnVmZmVyIil9LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7ZnVuY3Rpb24gaShlKXtpZighKHRoaXMgaW5zdGFuY2VvZiBpKSlyZXR1cm4gbmV3IGkoZSk7ZT1lfHx7fSx0aGlzLmNvbmN1cnJlbmN5PWUuY29uY3VycmVuY3l8fDEvMCx0aGlzLnBlbmRpbmc9MCx0aGlzLmpvYnM9W10sdGhpcy5jYnM9W10sdGhpcy5fZG9uZT1mdW5jdGlvbigpe3RoaXMucGVuZGluZy0tLHRoaXMuX3J1bigpfS5iaW5kKHRoaXMpfVsicHVzaCIsInVuc2hpZnQiLCJzcGxpY2UiXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2kucHJvdG90eXBlW2VdPWZ1bmN0aW9uKCl7dmFyIHQ9QXJyYXkucHJvdG90eXBlW2VdLmFwcGx5KHRoaXMuam9icyxhcmd1bWVudHMpO3JldHVybiB0aGlzLl9ydW4oKSx0fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpLnByb3RvdHlwZSwibGVuZ3RoIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGVuZGluZyt0aGlzLmpvYnMubGVuZ3RofX0pLGkucHJvdG90eXBlLl9ydW49ZnVuY3Rpb24oKXtpZih0aGlzLnBlbmRpbmchPT10aGlzLmNvbmN1cnJlbmN5KXtpZih0aGlzLmpvYnMubGVuZ3RoKXt2YXIgZT10aGlzLmpvYnMuc2hpZnQoKTt0aGlzLnBlbmRpbmcrKyxlKHRoaXMuX2RvbmUpLHRoaXMuX3J1bigpfWlmKDA9PT10aGlzLnBlbmRpbmcpZm9yKDswIT09dGhpcy5jYnMubGVuZ3RoOyl7dmFyIHQ9dGhpcy5jYnMucG9wKCk7cHJvY2Vzcy5uZXh0VGljayh0KX19fSxpLnByb3RvdHlwZS5vbkRvbmU9ZnVuY3Rpb24oZSl7ImZ1bmN0aW9uIj09dHlwZW9mIGUmJih0aGlzLmNicy5wdXNoKGUpLHRoaXMuX3J1bigpKX0sZS5leHBvcnRzPWl9LGZ1bmN0aW9uKGUsdCl7ZS5leHBvcnRzPXJlcXVpcmUoInpsaWIiKX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0Ijt0cnl7ZS5leHBvcnRzPXMoMTApKCJidWZmZXJ1dGlsIil9Y2F0Y2godCl7ZS5leHBvcnRzPXMoMjQpfX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9cmVxdWlyZSgiZnMiKX0sZnVuY3Rpb24oZSx0KXtlLmV4cG9ydHM9cmVxdWlyZSgicGF0aCIpfSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiOwovKiEKICogYnVmZmVydXRpbDogV2ViU29ja2V0IGJ1ZmZlciB1dGlscwogKiBDb3B5cmlnaHQoYykgMjAxNSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT4KICogTUlUIExpY2Vuc2VkCiAqL2UuZXhwb3J0cz17bWFzazooZSx0LHMsaSxyKT0+e2Zvcih2YXIgbj0wO248cjtuKyspc1tpK25dPWVbbl1edFszJm5dfSx1bm1hc2s6KGUsdCk9Pntjb25zdCBzPWUubGVuZ3RoO2Zvcih2YXIgaT0wO2k8cztpKyspZVtpXV49dFszJmldfX19LGZ1bmN0aW9uKGUsdCxzKXsidXNlIHN0cmljdCI7Y2xhc3MgaXtjb25zdHJ1Y3RvcihlLHQpe3RoaXMudGFyZ2V0PXQsdGhpcy50eXBlPWV9fWNsYXNzIHIgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoIm1lc3NhZ2UiLHQpLHRoaXMuZGF0YT1lfX1jbGFzcyBuIGV4dGVuZHMgaXtjb25zdHJ1Y3RvcihlLHQscyl7c3VwZXIoImNsb3NlIixzKSx0aGlzLndhc0NsZWFuPXMuX2Nsb3NlRnJhbWVSZWNlaXZlZCYmcy5fY2xvc2VGcmFtZVNlbnQsdGhpcy5yZWFzb249dCx0aGlzLmNvZGU9ZX19Y2xhc3MgbyBleHRlbmRzIGl7Y29uc3RydWN0b3IoZSl7c3VwZXIoIm9wZW4iLGUpfX1jb25zdCBhPXthZGRFdmVudExpc3RlbmVyKGUsdCl7ZnVuY3Rpb24gcyhlKXt0LmNhbGwodGhpcyxuZXcgcihlLHRoaXMpKX1mdW5jdGlvbiBpKGUscyl7dC5jYWxsKHRoaXMsbmV3IG4oZSxzLHRoaXMpKX1mdW5jdGlvbiBhKGUpe2UudHlwZT0iZXJyb3IiLGUudGFyZ2V0PXRoaXMsdC5jYWxsKHRoaXMsZSl9ZnVuY3Rpb24gaCgpe3QuY2FsbCh0aGlzLG5ldyBvKHRoaXMpKX0iZnVuY3Rpb24iPT10eXBlb2YgdCYmKCJtZXNzYWdlIj09PWU/KHMuX2xpc3RlbmVyPXQsdGhpcy5vbihlLHMpKToiY2xvc2UiPT09ZT8oaS5fbGlzdGVuZXI9dCx0aGlzLm9uKGUsaSkpOiJlcnJvciI9PT1lPyhhLl9saXN0ZW5lcj10LHRoaXMub24oZSxhKSk6Im9wZW4iPT09ZT8oaC5fbGlzdGVuZXI9dCx0aGlzLm9uKGUsaCkpOnRoaXMub24oZSx0KSl9LHJlbW92ZUV2ZW50TGlzdGVuZXIoZSx0KXtjb25zdCBzPXRoaXMubGlzdGVuZXJzKGUpO2Zvcih2YXIgaT0wO2k8cy5sZW5ndGg7aSsrKXNbaV0hPT10JiZzW2ldLl9saXN0ZW5lciE9PXR8fHRoaXMucmVtb3ZlTGlzdGVuZXIoZSxzW2ldKX19O2UuZXhwb3J0cz1hfSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiOwovKiEKICogd3M6IGEgbm9kZS5qcyB3ZWJzb2NrZXQgY2xpZW50CiAqIENvcHlyaWdodChjKSAyMDExIEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPgogKiBNSVQgTGljZW5zZWQKICovdHJ5e2NvbnN0IHQ9cygyNyk7ZS5leHBvcnRzPSJvYmplY3QiPT10eXBlb2YgdD90LlZhbGlkYXRpb24uaXNWYWxpZFVURjg6dH1jYXRjaCh0KXtlLmV4cG9ydHM9KCgpPT4hMCl9fSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiO3RyeXtlLmV4cG9ydHM9cygxMCkoInZhbGlkYXRpb24iKX1jYXRjaCh0KXtlLmV4cG9ydHM9cygyOCl9fSxmdW5jdGlvbihlLHQscyl7InVzZSBzdHJpY3QiOwovKiEKICogVVRGLTggdmFsaWRhdGU6IFVURi04IHZhbGlkYXRpb24gZm9yIFdlYlNvY2tldHMuCiAqIENvcHlyaWdodChjKSAyMDE1IEVpbmFyIE90dG8gU3Rhbmd2aWsgPGVpbmFyb3NAZ21haWwuY29tPgogKiBNSVQgTGljZW5zZWQKICovZS5leHBvcnRzPShlPT57aWYoIUJ1ZmZlci5pc0J1ZmZlcihlKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJGaXJzdCBhcmd1bWVudCBuZWVkcyB0byBiZSBhIGJ1ZmZlciIpO2Zvcih2YXIgdD1lLmxlbmd0aCxzPTA7czx0OylpZihlW3NdPDEyOClzKys7ZWxzZSBpZigxOTI9PSgyMjQmZVtzXSkpe2lmKHMrMT09PXR8fDEyOCE9KDE5MiZlW3MrMV0pfHwxOTI9PSgyNTQmZVtzXSkpcmV0dXJuITE7cys9Mn1lbHNlIGlmKDIyND09KDI0MCZlW3NdKSl7aWYocysyPj10fHwxMjghPSgxOTImZVtzKzFdKXx8MTI4IT0oMTkyJmVbcysyXSl8fDIyND09PWVbc10mJjEyOD09KDIyNCZlW3MrMV0pfHwyMzc9PT1lW3NdJiYxNjA9PSgyMjQmZVtzKzFdKSlyZXR1cm4hMTtzKz0zfWVsc2V7aWYoMjQwIT0oMjQ4JmVbc10pKXJldHVybiExO2lmKHMrMz49dHx8MTI4IT0oMTkyJmVbcysxXSl8fDEyOCE9KDE5MiZlW3MrMl0pfHwxMjghPSgxOTImZVtzKzNdKXx8MjQwPT09ZVtzXSYmMTI4PT0oMjQwJmVbcysxXSl8fDI0ND09PWVbc10mJmVbcysxXT4xNDN8fGVbc10+MjQ0KXJldHVybiExO3MrPTR9cmV0dXJuITB9KX0sZnVuY3Rpb24oZSx0LHMpeyJ1c2Ugc3RyaWN0IjsKLyohCiAqIHdzOiBhIG5vZGUuanMgd2Vic29ja2V0IGNsaWVudAogKiBDb3B5cmlnaHQoYykgMjAxMSBFaW5hciBPdHRvIFN0YW5ndmlrIDxlaW5hcm9zQGdtYWlsLmNvbT4KICogTUlUIExpY2Vuc2VkCiAqL2NvbnN0IGk9cygwKSxyPXMoNiksbj1zKDMpLG89cyg3KSxhPXMoOCksaD1zKDkpLGM9cygxKSxsPXMoMTEpLHU9cygyKSxmPXMoNSksZD1pLkJ1ZmZlcjtmdW5jdGlvbiBfKCl7dGhpcy5kZXN0cm95KCl9ZnVuY3Rpb24gcChlLHQscyl7ZS53cml0YWJsZSYmKHM9c3x8YS5TVEFUVVNfQ09ERVNbdF0sZS53cml0ZShgSFRUUC8xLjEgJHt0fSAke2EuU1RBVFVTX0NPREVTW3RdfVxyXG5gKyJDb25uZWN0aW9uOiBjbG9zZVxyXG5Db250ZW50LXR5cGU6IHRleHQvaHRtbFxyXG4iK2BDb250ZW50LUxlbmd0aDogJHtkLmJ5dGVMZW5ndGgocyl9XHJcbmArIlxyXG4iK3MpKSxlLnJlbW92ZUxpc3RlbmVyKCJlcnJvciIsXyksZS5kZXN0cm95KCl9ZS5leHBvcnRzPWNsYXNzIGV4dGVuZHMgcntjb25zdHJ1Y3RvcihlLHQpe2lmKHN1cGVyKCksbnVsbD09KGU9T2JqZWN0LmFzc2lnbih7bWF4UGF5bG9hZDoxMDQ4NTc2MDAscGVyTWVzc2FnZURlZmxhdGU6ITEsaGFuZGxlUHJvdG9jb2xzOm51bGwsY2xpZW50VHJhY2tpbmc6ITAsdmVyaWZ5Q2xpZW50Om51bGwsbm9TZXJ2ZXI6ITEsYmFja2xvZzpudWxsLHNlcnZlcjpudWxsLGhvc3Q6bnVsbCxwYXRoOm51bGwscG9ydDpudWxsfSxlKSkucG9ydCYmIWUuc2VydmVyJiYhZS5ub1NlcnZlcil0aHJvdyBuZXcgVHlwZUVycm9yKCJtaXNzaW5nIG9yIGludmFsaWQgb3B0aW9ucyIpO251bGwhPWUucG9ydD8odGhpcy5fc2VydmVyPWEuY3JlYXRlU2VydmVyKChlLHQpPT57Y29uc3Qgcz1hLlNUQVRVU19DT0RFU1s0MjZdO3Qud3JpdGVIZWFkKDQyNix7IkNvbnRlbnQtTGVuZ3RoIjpzLmxlbmd0aCwiQ29udGVudC1UeXBlIjoidGV4dC9wbGFpbiJ9KSx0LmVuZChzKX0pLHRoaXMuX3NlcnZlci5saXN0ZW4oZS5wb3J0LGUuaG9zdCxlLmJhY2tsb2csdCkpOmUuc2VydmVyJiYodGhpcy5fc2VydmVyPWUuc2VydmVyKSx0aGlzLl9zZXJ2ZXImJih0aGlzLl91bHRyb249bmV3IG8odGhpcy5fc2VydmVyKSx0aGlzLl91bHRyb24ub24oImxpc3RlbmluZyIsKCk9PnRoaXMuZW1pdCgibGlzdGVuaW5nIikpLHRoaXMuX3VsdHJvbi5vbigiZXJyb3IiLGU9PnRoaXMuZW1pdCgiZXJyb3IiLGUpKSx0aGlzLl91bHRyb24ub24oInVwZ3JhZGUiLChlLHQscyk9Pnt0aGlzLmhhbmRsZVVwZ3JhZGUoZSx0LHMsdD0+e3RoaXMuZW1pdCgiY29ubmVjdGlvbiIsdCxlKX0pfSkpLCEwPT09ZS5wZXJNZXNzYWdlRGVmbGF0ZSYmKGUucGVyTWVzc2FnZURlZmxhdGU9e30pLGUuY2xpZW50VHJhY2tpbmcmJih0aGlzLmNsaWVudHM9bmV3IFNldCksdGhpcy5vcHRpb25zPWV9Y2xvc2UoZSl7aWYodGhpcy5jbGllbnRzKWZvcihjb25zdCBlIG9mIHRoaXMuY2xpZW50cyllLnRlcm1pbmF0ZSgpO2NvbnN0IHQ9dGhpcy5fc2VydmVyO2lmKHQmJih0aGlzLl91bHRyb24uZGVzdHJveSgpLHRoaXMuX3VsdHJvbj10aGlzLl9zZXJ2ZXI9bnVsbCxudWxsIT10aGlzLm9wdGlvbnMucG9ydCkpcmV0dXJuIHQuY2xvc2UoZSk7ZSYmZSgpfXNob3VsZEhhbmRsZShlKXtyZXR1cm4hdGhpcy5vcHRpb25zLnBhdGh8fGgucGFyc2UoZS51cmwpLnBhdGhuYW1lPT09dGhpcy5vcHRpb25zLnBhdGh9aGFuZGxlVXBncmFkZShlLHQscyxpKXt0Lm9uKCJlcnJvciIsXyk7Y29uc3Qgcj0rZS5oZWFkZXJzWyJzZWMtd2Vic29ja2V0LXZlcnNpb24iXSxuPXt9O2lmKCJHRVQiIT09ZS5tZXRob2R8fCJ3ZWJzb2NrZXQiIT09ZS5oZWFkZXJzLnVwZ3JhZGUudG9Mb3dlckNhc2UoKXx8IWUuaGVhZGVyc1sic2VjLXdlYnNvY2tldC1rZXkiXXx8OCE9PXImJjEzIT09cnx8IXRoaXMuc2hvdWxkSGFuZGxlKGUpKXJldHVybiBwKHQsNDAwKTtpZih0aGlzLm9wdGlvbnMucGVyTWVzc2FnZURlZmxhdGUpe2NvbnN0IHM9bmV3IGModGhpcy5vcHRpb25zLnBlck1lc3NhZ2VEZWZsYXRlLCEwLHRoaXMub3B0aW9ucy5tYXhQYXlsb2FkKTt0cnl7Y29uc3QgaT1sLnBhcnNlKGUuaGVhZGVyc1sic2VjLXdlYnNvY2tldC1leHRlbnNpb25zIl0pO2lbYy5leHRlbnNpb25OYW1lXSYmKHMuYWNjZXB0KGlbYy5leHRlbnNpb25OYW1lXSksbltjLmV4dGVuc2lvbk5hbWVdPXMpfWNhdGNoKGUpe3JldHVybiBwKHQsNDAwKX19dmFyIG89KGUuaGVhZGVyc1sic2VjLXdlYnNvY2tldC1wcm90b2NvbCJdfHwiIikuc3BsaXQoLywgKi8pO2lmKHRoaXMub3B0aW9ucy5oYW5kbGVQcm90b2NvbHMpe2lmKCExPT09KG89dGhpcy5vcHRpb25zLmhhbmRsZVByb3RvY29scyhvLGUpKSlyZXR1cm4gcCh0LDQwMSl9ZWxzZSBvPW9bMF07aWYodGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudCl7Y29uc3QgYT17b3JpZ2luOmUuaGVhZGVyc1tgJHs4PT09cj8ic2VjLXdlYnNvY2tldC1vcmlnaW4iOiJvcmlnaW4ifWBdLHNlY3VyZTohKCFlLmNvbm5lY3Rpb24uYXV0aG9yaXplZCYmIWUuY29ubmVjdGlvbi5lbmNyeXB0ZWQpLHJlcTplfTtpZigyPT09dGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudC5sZW5ndGgpcmV0dXJuIHZvaWQgdGhpcy5vcHRpb25zLnZlcmlmeUNsaWVudChhLChhLGgsYyk9PntpZighYSlyZXR1cm4gcCh0LGh8fDQwMSxjKTt0aGlzLmNvbXBsZXRlVXBncmFkZShvLG4scixlLHQscyxpKX0pO2lmKCF0aGlzLm9wdGlvbnMudmVyaWZ5Q2xpZW50KGEpKXJldHVybiBwKHQsNDAxKX10aGlzLmNvbXBsZXRlVXBncmFkZShvLG4scixlLHQscyxpKX1jb21wbGV0ZVVwZ3JhZGUoZSx0LHMsaSxyLG8sYSl7aWYoIXIucmVhZGFibGV8fCFyLndyaXRhYmxlKXJldHVybiByLmRlc3Ryb3koKTtjb25zdCBoPVsiSFRUUC8xLjEgMTAxIFN3aXRjaGluZyBQcm90b2NvbHMiLCJVcGdyYWRlOiB3ZWJzb2NrZXQiLCJDb25uZWN0aW9uOiBVcGdyYWRlIixgU2VjLVdlYlNvY2tldC1BY2NlcHQ6ICR7bi5jcmVhdGVIYXNoKCJzaGExIikudXBkYXRlKGkuaGVhZGVyc1sic2VjLXdlYnNvY2tldC1rZXkiXSt1LkdVSUQsImJpbmFyeSIpLmRpZ2VzdCgiYmFzZTY0Iil9YF07aWYoZSYmaC5wdXNoKGBTZWMtV2ViU29ja2V0LVByb3RvY29sOiAke2V9YCksdFtjLmV4dGVuc2lvbk5hbWVdKXtjb25zdCBlPXRbYy5leHRlbnNpb25OYW1lXS5wYXJhbXMscz1sLmZvcm1hdCh7W2MuZXh0ZW5zaW9uTmFtZV06W2VdfSk7aC5wdXNoKGBTZWMtV2ViU29ja2V0LUV4dGVuc2lvbnM6ICR7c31gKX10aGlzLmVtaXQoImhlYWRlcnMiLGgsaSksci53cml0ZShoLmNvbmNhdCgiXHJcbiIpLmpvaW4oIlxyXG4iKSk7Y29uc3QgZD1uZXcgZihbcixvXSxudWxsLHttYXhQYXlsb2FkOnRoaXMub3B0aW9ucy5tYXhQYXlsb2FkLHByb3RvY29sVmVyc2lvbjpzLGV4dGVuc2lvbnM6dCxwcm90b2NvbDplfSk7dGhpcy5jbGllbnRzJiYodGhpcy5jbGllbnRzLmFkZChkKSxkLm9uKCJjbG9zZSIsKCk9PnRoaXMuY2xpZW50cy5kZWxldGUoZCkpKSxyLnJlbW92ZUxpc3RlbmVyKCJlcnJvciIsXyksYShkKX19fV0pfSk7",
      "sourceCodeClassname": "default",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "12.70",
    "description": "Protostub to exchange messages with vertx",
    "language": "javascript",
    "cguid": "41338ea57960781be06f8cf3c78cbf70f",
    "type": "ProtoStubs",
    "constraints": {
      "node": true
    },
    "objectName": "default",
    "configuration": {
      "url": "wss://msg-node.hysmart.rethink.ptinovacao.pt/localhost/ws"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "VertxAppProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "sharing-cities-dsm",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "15.30",
    "description": "Protostub to exchange messages with vertx",
    "language": "javascript",
    "cguid": "46c0d57ffd1f5fe7888e6ba971acb4e79",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "sharing-cities-dsm",
    "configuration": {
      "url": "https://msg-node.localhost:9091/eventbus",
      "vertxbus_ping_interval": 10000,
      "host": "sharing-cities-dsm",
      "streams": [],
      "publicWallets": {
        "identity": {
          "userProfile": {
            "guid": "user-guid://public-wallets",
            "userURL": "user://public-wallets"
          }
        }
      },
      "timeoutValue": 500,
      "version": 0.8
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "StravaProtoStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "fitness.strava.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "9.20",
    "description": "Protostub of Strava",
    "language": "javascript",
    "cguid": "44995c04510b283b19af39626f5f6c39b",
    "type": "ProtoStubs",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "fitness.strava.com",
    "configuration": {
      "sessions_query_interval": 300000,
      "domain": "localhost"
    },
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}