{
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChvKXtpZihuW29dKXJldHVybiBuW29dLmV4cG9ydHM7dmFyIHI9bltvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsdCksci5sPSEwLHIuZXhwb3J0c312YXIgbj17fTtyZXR1cm4gdC5tPWUsdC5jPW4sdC5kPWZ1bmN0aW9uKGUsbixvKXt0Lm8oZSxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om99KX0sdC5uPWZ1bmN0aW9uKGUpe3ZhciBuPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQobiwiYSIsbiksbn0sdC5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSx0LnA9IiIsdCh0LnM9MCl9KFtmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG8oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiByKGUsdCxuKXtyZXR1cm57bmFtZToiSU1TSVdQcm94eVN0dWIiLGluc3RhbmNlOm5ldyBhKGUsdCxuKX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZShlLHQpe2Zvcih2YXIgbj0wO3QubGVuZ3RoPm47bisrKXt2YXIgbz10W25dO28uZW51bWVyYWJsZT1vLmVudW1lcmFibGV8fCExLG8uY29uZmlndXJhYmxlPSEwLCJ2YWx1ZSJpbiBvJiYoby53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsby5rZXksbyl9fXJldHVybiBmdW5jdGlvbih0LG4sbyl7cmV0dXJuIG4mJmUodC5wcm90b3R5cGUsbiksbyYmZSh0LG8pLHR9fSgpO3QuZGVmYXVsdD1yO3ZhciBzPSJyZXRoaW5rLXByb2plY3QuZXUiLGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQsbixyKXt2YXIgaT10aGlzO28odGhpcyxlKSx0aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkw9dCx0aGlzLm1lc3NhZ2VCdXM9bix0aGlzLmNvbmZpZz1yLHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcigiKiIsZnVuY3Rpb24oZSl7ZS50bz09PSJkb21haW4taWRwOi8vIitzJiZpLnJlcXVlc3RUb0lkcChlKX0pLHRoaXMuX3NlbmRTdGF0dXMoImNyZWF0ZWQiKX1yZXR1cm4gaShlLFt7a2V5OiJfc2VuZFN0YXR1cyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2NvbnNvbGUubG9nKCJbU2xhY2sgSWRwIFByb3h5IHN0YXR1cyBjaGFuZ2VkXSB0byAiLGUpLG4uX3N0YXRlPWU7dmFyIG89e3R5cGU6InVwZGF0ZSIsZnJvbTpuLnJ1bnRpbWVQcm90b1N0dWJVUkwsdG86bi5ydW50aW1lUHJvdG9TdHViVVJMKyIvc3RhdHVzIixib2R5Ont2YWx1ZTplfX07dCYmKG8uYm9keS5kZXNjPXQpLG4ubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShvKX19LHtrZXk6InJlcXVlc3RUb0lkcCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWUuYm9keS5wYXJhbXM7c3dpdGNoKGUuYm9keS5tZXRob2Qpe2Nhc2UiZ2VuZXJhdGVBc3NlcnRpb24iOnRoaXMuZ2VuZXJhdGVBc3NlcnRpb24obi5jb250ZW50cyxuLm9yaWdpbixuLnVzZXJuYW1lSGludCkudGhlbihmdW5jdGlvbihuKXtyZXR1cm4gdC5yZXBseU1lc3NhZ2UoZSxuKX0pLmNhdGNoKGZ1bmN0aW9uKG4pe3JldHVybiB0LnJlcGx5TWVzc2FnZShlLG4pfSk7YnJlYWs7Y2FzZSJ2YWxpZGF0ZUFzc2VydGlvbiI6dGhpcy5yZXBseU1lc3NhZ2UoZSx7aWRlbnRpdHk6ImlkZW50aXR5QGlkcC5jb20iLGNvbnRlbnRzOiJjb250ZW50In0pfX19LHtrZXk6ImdlbmVyYXRlQXNzZXJ0aW9uIix2YWx1ZTpmdW5jdGlvbihlLHQsbil7dmFyIG89dGhpcztyZXR1cm4gY29uc29sZS5sb2coImNvbnRlbnRzLT4iLGUpLGNvbnNvbGUubG9nKCJvcmlnaW4tPiIsdCksY29uc29sZS5sb2coImhpbnQtPiIsbiksbmV3IFByb21pc2UoZnVuY3Rpb24oZSx0KXtpZihuKXt2YXIgcj1vLl91cmxQYXJzZXIobiwiYWNjZXNzX3Rva2VuIiksaT1NYXRoLmZsb29yKERhdGUubm93KCkvMWUzKStvLl91cmxQYXJzZXIobiwiZXhwaXJlc19pbiIpO2ZldGNoKCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvdXNlcmluZm8/YWNjZXNzX3Rva2VuPSIrcikudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gZS5qc29uKCl9KS50aGVuKGZ1bmN0aW9uKHQpe3ZhciBuPXtwaWN0dXJlOnQucGljdHVyZSxlbWFpbDp0LmVtYWlsLGZhbWlseV9uYW1lOnQuZmFtaWx5X25hbWUsZ2l2ZW5fbmFtZTp0LmdpdmVuX25hbWV9LG89YnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDpyLGVtYWlsOnQuZW1haWwsaWQ6dC5pZH0pKSxhPXtpbmZvOntleHBpcmVzOml9LGFzc2VydGlvbjpvLGlkcDp7ZG9tYWluOnMscHJvdG9jb2w6Ik9BdXRoIDIuMCJ9LGluZm9Ub2tlbjpuLGludGVyd29ya2luZzp7YWNjZXNzX3Rva2VuOnIsZG9tYWluOnN9fTtjb25zb2xlLmxvZygiUkVTT0xWSU5HIFRISVMgT0JKRUNUIixhKSxlKGEpfSkuY2F0Y2godCl9ZWxzZXt2YXIgYT0iaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3YyL2F1dGg/c2NvcGU9ZW1haWwlMjBwcm9maWxlJnN0YXRlPSUyRnByb2ZpbGUmcmVkaXJlY3RfdXJpPSIrbG9jYXRpb24ucHJvdG9jb2wrIi8vIitsb2NhdGlvbi5ob3N0bmFtZSsiJnJlc3BvbnNlX3R5cGU9dG9rZW4mY2xpZW50X2lkPTgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSI7Y29uc29sZS5sb2coImZpcnN0IHVybCAiLGEsImRvbmUiKSx0KHtuYW1lOiJJZFBMb2dpbkVycm9yIixsb2dpblVybDphfSl9fSl9fSx7a2V5OiJfdXJsUGFyc2VyIix2YWx1ZTpmdW5jdGlvbihlLHQpe3Q9dC5yZXBsYWNlKC9bXFtdLywiXFxbIikucmVwbGFjZSgvW1xdXS8sIlxcXSIpO3ZhciBuPSJbXFwjJj9dIit0KyI9KFteJiNdKikiLG89UmVnRXhwKG4pLHI9by5leGVjKGUpO3JldHVybiBudWxsPT09cj8iIjpyWzFdfX0se2tleToicmVwbHlNZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsdG86ZS5mcm9tLGZyb206ZS50byxib2R5Ontjb2RlOjIwMCx2YWx1ZTp0fX0pfX1dKSxlfSgpfV0pLmRlZmF1bHR9KTs=",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "version": "10.60",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChvKXtpZihuW29dKXJldHVybiBuW29dLmV4cG9ydHM7dmFyIHI9bltvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsdCksci5sPSEwLHIuZXhwb3J0c312YXIgbj17fTtyZXR1cm4gdC5tPWUsdC5jPW4sdC5kPWZ1bmN0aW9uKGUsbixvKXt0Lm8oZSxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om99KX0sdC5uPWZ1bmN0aW9uKGUpe3ZhciBuPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQobiwiYSIsbiksbn0sdC5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSx0LnA9IiIsdCh0LnM9MCl9KFtmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG8oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiByKGUsdCl7dD10LnJlcGxhY2UoL1tcW10vLCJcXFsiKS5yZXBsYWNlKC9bXF1dLywiXFxdIik7dmFyIG49IltcXCMmP10iK3QrIj0oW14mI10qKSIsbz1SZWdFeHAobikscj1vLmV4ZWMoZSk7cmV0dXJuIG51bGw9PT1yPyIiOnJbMV19ZnVuY3Rpb24gaShlLHQpe3ZhciBuPW5ldyBYTUxIdHRwUmVxdWVzdDtyZXR1cm4id2l0aENyZWRlbnRpYWxzImluIG4/bi5vcGVuKGUsdCwhMCk6InVuZGVmaW5lZCIhPXR5cGVvZiBYRG9tYWluUmVxdWVzdD8obj1uZXcgWERvbWFpblJlcXVlc3Qsbi5vcGVuKGUsdCkpOm49bnVsbCxuZXcgUHJvbWlzZShmdW5jdGlvbihlLHQpe24/KG4ub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKG8pe2lmKDQ9PT1uLnJlYWR5U3RhdGUpaWYoMjAwPT09bi5zdGF0dXMpe3ZhciByPUpTT04ucGFyc2Uobi5yZXNwb25zZVRleHQpO2Uocil9ZWxzZSB0KDQwMD09PW4uc3RhdHVzPyJUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4iOiJzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQiKX0sbi5zZW5kKCkpOnQoIkNPUlMgbm90IHN1cHBvcnRlZCIpfSl9ZnVuY3Rpb24gcyhlLHQsbil7cmV0dXJue25hbWU6IklkcFByb3h5UHJvdG9TdHViIixpbnN0YW5jZTpuZXcgZyhlLHQsbil9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDt0Lmxlbmd0aD5uO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKTt0LmRlZmF1bHQ9czt2YXIgYz17fSx1PTAsZj17Y2xpZW50U2VjcmV0OiJYeDRyS3VjYjVaWVRhWGxjWlg5SExmWlciLGNsaWVudElEOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLHJlZGlyZWN0VVJJOmxvY2F0aW9uLnByb3RvY29sKyIvLyIrbG9jYXRpb24uaG9zdG5hbWUsaXNzdWVyOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLHRva2VuRW5kcG9pbnQ6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8iLGp3a3NVcmk6Imh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My9jZXJ0cz8iLGF1dGhvcmlzYXRpb25FbmRwb2ludDoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGg/Iix1c2VyaW5mbzoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0iLHRva2VuSW5mbzoiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0iLGFjY2Vzc1R5cGU6Im9mZmxpbmUiLHR5cGU6ImNvZGUgdG9rZW4gaWRfdG9rZW4iLHNjb3BlOiJvcGVuaWQlMjBlbWFpbCUyMHByb2ZpbGUiLHN0YXRlOiJzdGF0ZSJ9LHA9ZnVuY3Rpb24oZSl7dmFyIHQ9ZixuPXQudG9rZW5FbmRwb2ludCsiY29kZT0iK2UrIiZjbGllbnRfaWQ9Iit0LmNsaWVudElEKyImY2xpZW50X3NlY3JldD0iK3QuY2xpZW50U2VjcmV0KyImcmVkaXJlY3RfdXJpPSIrdC5yZWRpcmVjdFVSSSsiJmdyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlJmFjY2Vzc190eXBlPSIrdC5hY2Nlc3NUeXBlO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlLHQpe2koIlBPU1QiLG4pLnRoZW4oZnVuY3Rpb24odCl7ZSh0KX0sZnVuY3Rpb24oZSl7dChlKX0pfSl9LGw9ZnVuY3Rpb24oZSl7dmFyIHQ9ZixuPXQudG9rZW5FbmRwb2ludCsiY2xpZW50X2lkPSIrdC5jbGllbnRJRCsiJmNsaWVudF9zZWNyZXQ9Iit0LmNsaWVudFNlY3JldCsiJnJlZnJlc2hfdG9rZW49IitlKyImZ3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuIjtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSx0KXtpKCJQT1NUIixuKS50aGVuKGZ1bmN0aW9uKHQpe2UodCl9LGZ1bmN0aW9uKGUpe3QoZSl9KX0pfSxkPXt2YWxpZGF0ZUFzc2VydGlvbjpmdW5jdGlvbihlLHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LG4pe3ZhciBvPWF0b2IoZSkscj1KU09OLnBhcnNlKG8pLGk9ci50b2tlbklELnNwbGl0KCIuIikscz1KU09OLnBhcnNlKGF0b2IoaVsxXSkpO3Qoe2lkZW50aXR5OnMuZW1haWwsY29udGVudHM6cy5ub25jZX0pfSl9LHJlZnJlc2hBc3NlcnRpb246ZnVuY3Rpb24oZSl7dmFyIHQ9ZjtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixvKXtlLmluZm8ucmVmcmVzaFRva2VuJiZsKGUuaW5mby5yZWZyZXNoVG9rZW4pLnRoZW4oZnVuY3Rpb24obyl7aSgiR0VUIix0LnVzZXJpbmZvK28uYWNjZXNzX3Rva2VuKS50aGVuKGZ1bmN0aW9uKHIpe3ZhciBzPXthY2Nlc3NUb2tlbjpvLmFjY2Vzc190b2tlbixpZFRva2VuOm8uaWRfdG9rZW4scmVmcmVzaFRva2VuOmUuaW5mby5yZWZyZXNoVG9rZW4sdG9rZW5UeXBlOmUuaW5mby50b2tlblR5cGUsaW5mb1Rva2VuOnJ9O2koIkdFVCIsdC50b2tlbkluZm8rby5pZF90b2tlbikudGhlbihmdW5jdGlvbih0KXtzLnRva2VuSURKU09OPXQscy5leHBpcmVzPXQuZXhwLHMuZW1haWw9dC5lbWFpbDt2YXIgaT1KU09OLnBhcnNlKGF0b2IoZS5hc3NlcnRpb24pKSxhPWkudG9rZW5JRC5zcGxpdCgiLiIpLGM9SlNPTi5wYXJzZShhdG9iKGFbMV0pKSx1PWMubm9uY2UsZj1vLmlkX3Rva2VuLHA9Zi5zcGxpdCgiLiIpLGw9SlNPTi5wYXJzZShhdG9iKHBbMV0pKTtsLm5vbmNlPXU7dmFyIGQ9YnRvYShKU09OLnN0cmluZ2lmeShsKSksZz1wWzBdKyIuIitkKyIuIitwWzJdLGs9YnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDpnLHRva2VuSURKU09OOnR9KSk7bih7YXNzZXJ0aW9uOmssaWRwOntkb21haW46Imdvb2dsZS5jb20iLHByb3RvY29sOiJPSURDIn0saW5mbzpzLGluZm9Ub2tlbjpyfSl9KX0pfSl9KX0sZ2VuZXJhdGVBc3NlcnRpb246ZnVuY3Rpb24oZSx0LG4pe3ZhciBvPWY7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQscyl7aWYobil7dmFyIGE9KHIobiwiYWNjZXNzX3Rva2VuIikscihuLCJpZF90b2tlbiIpLHIobiwiY29kZSIpKTtwKGEpLnRoZW4oZnVuY3Rpb24oZSl7aSgiR0VUIixvLnVzZXJpbmZvK2UuYWNjZXNzX3Rva2VuKS50aGVuKGZ1bmN0aW9uKG4pe3ZhciByPXthY2Nlc3NUb2tlbjplLmFjY2Vzc190b2tlbixpZFRva2VuOmUuaWRfdG9rZW4scmVmcmVzaFRva2VuOmUucmVmcmVzaF90b2tlbix0b2tlblR5cGU6ZS50b2tlbl90eXBlLGluZm9Ub2tlbjpufTtpKCJHRVQiLG8udG9rZW5JbmZvK2UuaWRfdG9rZW4pLnRoZW4oZnVuY3Rpb24obyl7ci50b2tlbklESlNPTj1vLHIuZXhwaXJlcz1vLmV4cCxyLmVtYWlsPW8uZW1haWw7dmFyIGk9YnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDplLmlkX3Rva2VuLHRva2VuSURKU09OOm99KSkscz17ZG9tYWluOiJnb29nbGUuY29tIixwcm90b2NvbDoiT0lEQyJ9LGE9e2Fzc2VydGlvbjppLGlkcDpzLGluZm86cixpbmZvVG9rZW46bn07Y1t1XT1hLCsrdSx0KGEpfSxmdW5jdGlvbihlKXtzKGUpfSl9LGZ1bmN0aW9uKGUpe3MoZSl9KX0sZnVuY3Rpb24oZSl7cyhlKX0pfWVsc2V7cyh7bmFtZToiSWRQTG9naW5FcnJvciIsbG9naW5Vcmw6by5hdXRob3Jpc2F0aW9uRW5kcG9pbnQrInNjb3BlPSIrby5zY29wZSsiJmNsaWVudF9pZD0iK28uY2xpZW50SUQrIiZyZWRpcmVjdF91cmk9IitvLnJlZGlyZWN0VVJJKyImcmVzcG9uc2VfdHlwZT1jb2RlJnN0YXRlPSIrby5zdGF0ZSsiJnByb21wdD1jb25zZW50JmFjY2Vzc190eXBlPSIrby5hY2Nlc3NUeXBlKyImbm9uY2U9IitlfSl9fSl9fSxnPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scil7byh0aGlzLGUpO3ZhciBpPXRoaXM7aS5ydW50aW1lUHJvdG9TdHViVVJMPXQsaS5tZXNzYWdlQnVzPW4saS5jb25maWc9cixjb25zb2xlLmxvZygiW0dvb2dsZSBJZHBQcm94eV0gc3RhcnRpbmciLHQpLGkubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcigiKiIsZnVuY3Rpb24oZSl7ImRvbWFpbi1pZHA6Ly9nb29nbGUuY29tIj09PWUudG8mJmkucmVxdWVzdFRvSWRwKGUpfSksaS5fc2VuZFN0YXR1cygiY3JlYXRlZCIpfXJldHVybiBhKGUsW3trZXk6InJlcXVlc3RUb0lkcCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWUuYm9keS5wYXJhbXM7c3dpdGNoKGUuYm9keS5tZXRob2Qpe2Nhc2UiZ2VuZXJhdGVBc3NlcnRpb24iOmQuZ2VuZXJhdGVBc3NlcnRpb24obi5jb250ZW50cyxuLm9yaWdpbixuLnVzZXJuYW1lSGludCkudGhlbihmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSxmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSk7YnJlYWs7Y2FzZSJ2YWxpZGF0ZUFzc2VydGlvbiI6ZC52YWxpZGF0ZUFzc2VydGlvbihuLmFzc2VydGlvbixuLm9yaWdpbikudGhlbihmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSxmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSk7YnJlYWs7Y2FzZSJyZWZyZXNoQXNzZXJ0aW9uIjpkLnJlZnJlc2hBc3NlcnRpb24obi5pZGVudGl0eSkudGhlbihmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSxmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSl9fX0se2tleToicmVwbHlNZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlLHQpe3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh7aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsdG86ZS5mcm9tLGZyb206ZS50byxib2R5Ontjb2RlOjIwMCx2YWx1ZTp0fX0pfX0se2tleToiX3NlbmRTdGF0dXMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dmFyIG49dGhpcztjb25zb2xlLmxvZygiW0dvb2dsZUlkcFByb3h5LnNlbmRTdGF0dXNdICIsZSksbi5fc3RhdGU9ZTt2YXIgbz17dHlwZToidXBkYXRlIixmcm9tOm4ucnVudGltZVByb3RvU3R1YlVSTCx0bzpuLnJ1bnRpbWVQcm90b1N0dWJVUkwrIi9zdGF0dXMiLGJvZHk6e3ZhbHVlOmV9fTt0JiYoby5ib2R5LmRlc2M9dCksbi5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG8pfX1dKSxlfSgpfV0pLmRlZmF1bHR9KTs=",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5b1a3f36f7f0e18c87091ca1e915ce795",
    "version": "15.90",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsbil7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1uKCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSxuKToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT1uKCk6ZS5hY3RpdmF0ZT1uKCl9KHRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbihvKXtpZih0W29dKXJldHVybiB0W29dLmV4cG9ydHM7dmFyIHI9dFtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsbiksci5sPSEwLHIuZXhwb3J0c312YXIgdD17fTtyZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxvKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsbil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pfSxuLnA9IiIsbihuLnM9MCl9KFtmdW5jdGlvbihlLG4sdCl7InVzZSBzdHJpY3QiO2Z1bmN0aW9uIG8oZSxuKXtpZighKGUgaW5zdGFuY2VvZiBuKSl0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKX1mdW5jdGlvbiByKGUsbil7bj1uLnJlcGxhY2UoL1tcW10vLCJcXFsiKS5yZXBsYWNlKC9bXF1dLywiXFxdIik7dmFyIHQ9IltcXCMmP10iK24rIj0oW14mI10qKSIsbz1SZWdFeHAodCkscj1vLmV4ZWMoZSk7cmV0dXJuIG51bGw9PT1yPyIiOnJbMV19ZnVuY3Rpb24gaShlLG4pe3ZhciB0PW5ldyBYTUxIdHRwUmVxdWVzdDtyZXR1cm4id2l0aENyZWRlbnRpYWxzImluIHQ/dC5vcGVuKGUsbiwhMCk6InVuZGVmaW5lZCIhPXR5cGVvZiBYRG9tYWluUmVxdWVzdD8odD1uZXcgWERvbWFpblJlcXVlc3QsdC5vcGVuKGUsbikpOnQ9bnVsbCxuZXcgUHJvbWlzZShmdW5jdGlvbihlLG4pe3Q/KHQub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKG8pe2lmKDQ9PT10LnJlYWR5U3RhdGUpaWYoMjAwPT09dC5zdGF0dXMpe3ZhciByPUpTT04ucGFyc2UodC5yZXNwb25zZVRleHQpO2Uocil9ZWxzZSBuKDQwMD09PXQuc3RhdHVzPyJUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4iOiJzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQiKX0sdC5zZW5kKCkpOm4oIkNPUlMgbm90IHN1cHBvcnRlZCIpfSl9ZnVuY3Rpb24gcyhlLG4sdCl7cmV0dXJue25hbWU6IlNsYWNrUHJveHlTdHViIixpbnN0YW5jZTpuZXcgZChlLG4sdCl9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSxuKXtmb3IodmFyIHQ9MDtuLmxlbmd0aD50O3QrKyl7dmFyIG89blt0XTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24obix0LG8pe3JldHVybiB0JiZlKG4ucHJvdG90eXBlLHQpLG8mJmUobixvKSxufX0oKTtuLmRlZmF1bHQ9czt2YXIgYT17Y2xpZW50SUQ6IjExNTMzNjAzODcyLjcyNDM0OTM0MzU2IixjbGllbnRTZWNyZXQ6ImQ0MjdlZjNjOTU3ZDY4YTI5MmRjN2M0ZTIwYjc4MzMwIixyZWRpcmVjdFVSSTpsb2NhdGlvbi5vcmlnaW4sY29kZUVuZHBvaW50OiJodHRwczovL3NsYWNrLmNvbS9vYXV0aC9hdXRob3JpemU/Iix0b2tlbkVuZHBvaW50OiJodHRwczovL3NsYWNrLmNvbS9hcGkvb2F1dGguYWNjZXNzPyIsaW5mb0VuZHBvaW50OiJodHRwczovL3NsYWNrLmNvbS9hcGkvdXNlcnMuaW5mbz8iLHNjb3BlOiJjbGllbnQifSx1PWZ1bmN0aW9uKGUpe3ZhciBuPWEsdD1uLnRva2VuRW5kcG9pbnQrImNsaWVudF9pZD0iK24uY2xpZW50SUQrIiZjbGllbnRfc2VjcmV0PSIrbi5jbGllbnRTZWNyZXQrIiZjb2RlPSIrZSsiJnJlZGlyZWN0X3VyaT0iK24ucmVkaXJlY3RVUkk7cmV0dXJuIGNvbnNvbGUubG9nKCJVUkwiLHQpLG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsbil7aSgiR0VUIix0KS50aGVuKGZ1bmN0aW9uKG4pe2Uobil9LGZ1bmN0aW9uKGUpe24oZSl9KX0pfSxsPXt2YWxpZGF0ZUFzc2VydGlvbjpmdW5jdGlvbihlLG4pe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LG8pe2NvbnNvbGUubG9nKCJhc3NlcnRpb24gLSA+IixlKSxjb25zb2xlLmxvZygib3JpZ2luIC0gPiIsbiksY29uc29sZS5sb2coIk1ZUFJPWFkgLSBWQUxJREFUSU5HIiksdCh7aWRlbnRpdHk6ImlkZW50aXR5QGlkcC5jb20iLGNvbnRlbnRzOiJjb250ZW50In0pfSl9LGdlbmVyYXRlQXNzZXJ0aW9uOmZ1bmN0aW9uKGUsbix0KXtyZXR1cm4gY29uc29sZS5sb2coImNvbnRlbnRzLT4iLGUpLGNvbnNvbGUubG9nKCJvcmlnaW4tPiIsbiksY29uc29sZS5sb2coImhpbnQtPiIsdCksbmV3IFByb21pc2UoZnVuY3Rpb24oZSxuKXt2YXIgbz1hO2lmKHQpe3ZhciBzPXIodCwiY29kZSIpO2NvbnNvbGUubG9nKCJjb2RlIixzKSx1KHMpLnRoZW4oZnVuY3Rpb24obil7Y29uc29sZS5sb2coInZhbHVlIEFGVEVSIGV4Y2hhbmdlQ29kZSIsbiksaSgiR0VUIixvLmluZm9FbmRwb2ludCsidG9rZW49IituLmFjY2Vzc190b2tlbisiJnVzZXI9IituLnVzZXJfaWQpLnRoZW4oZnVuY3Rpb24odCl7Y29uc29sZS5sb2coImluZm8tPiIsdCk7dmFyIG89dC51c2VyLnByb2ZpbGUscj17cGljdHVyZTpvLmltYWdlX29yaWdpbmFsLGVtYWlsOm8uZW1haWwsZmFtaWx5X25hbWU6by5sYXN0X25hbWUsZ2l2ZW5fbmFtZTpvLmZpcnN0X25hbWUsaWQ6dC51c2VyLmlkfSxpPWJ0b2EoSlNPTi5zdHJpbmdpZnkoe3Rva2VuSUQ6bi5hY2Nlc3NfdG9rZW4sZW1haWw6by5lbWFpbCxpZDp0LnVzZXIuaWR9KSkscz17YXNzZXJ0aW9uOmksaWRwOntkb21haW46InNsYWNrLmNvbSIscHJvdG9jb2w6Ik9BdXRoIDIuMCJ9LGluZm9Ub2tlbjpyLGludGVyd29ya2luZzp7YWNjZXNzX3Rva2VuOm4uYWNjZXNzX3Rva2VuLGRvbWFpbjoic2xhY2suY29tIn0saW5mbzp7ZXhwaXJlczozMTUzNmU1fX07Y29uc29sZS5sb2coIlJFU09MVklORyBUSElTIE9CSkVDVCIscyksZShzKX0sZnVuY3Rpb24oZSl7Y29uc29sZS5sb2coImVycm9yLT4iLGUpfSl9KX1lbHNle3ZhciBjPW8uY29kZUVuZHBvaW50KyJjbGllbnRfaWQ9IitvLmNsaWVudElEKyImc2NvcGU9IitvLnNjb3BlKyImcmVkaXJlY3RfdXJpPSIrby5yZWRpcmVjdFVSSTtjb25zb2xlLmxvZygiZmlyc3QgdXJsICIsYywiZG9uZSIpLG4oe25hbWU6IklkUExvZ2luRXJyb3IiLGxvZ2luVXJsOmN9KX19KX19LGQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKG4sdCxyKXtvKHRoaXMsZSk7dmFyIGk9dGhpcztpLnJ1bnRpbWVQcm90b1N0dWJVUkw9bixpLm1lc3NhZ2VCdXM9dCxpLmNvbmZpZz1yLGkubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcigiKiIsZnVuY3Rpb24oZSl7ImRvbWFpbi1pZHA6Ly9zbGFjay5jb20iPT09ZS50byYmaS5yZXF1ZXN0VG9JZHAoZSl9KSxpLl9zZW5kU3RhdHVzKCJjcmVhdGVkIil9cmV0dXJuIGMoZSxbe2tleToicmVxdWVzdFRvSWRwIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgbj10aGlzLHQ9ZS5ib2R5LnBhcmFtcztzd2l0Y2goZS5ib2R5Lm1ldGhvZCl7Y2FzZSJnZW5lcmF0ZUFzc2VydGlvbiI6bC5nZW5lcmF0ZUFzc2VydGlvbih0LmNvbnRlbnRzLHQub3JpZ2luLHQudXNlcm5hbWVIaW50KS50aGVuKGZ1bmN0aW9uKHQpe24ucmVwbHlNZXNzYWdlKGUsdCl9LGZ1bmN0aW9uKHQpe24ucmVwbHlNZXNzYWdlKGUsdCl9KTticmVhaztjYXNlInZhbGlkYXRlQXNzZXJ0aW9uIjpsLnZhbGlkYXRlQXNzZXJ0aW9uKHQuYXNzZXJ0aW9uLHQub3JpZ2luKS50aGVuKGZ1bmN0aW9uKHQpe24ucmVwbHlNZXNzYWdlKGUsdCl9LGZ1bmN0aW9uKHQpe24ucmVwbHlNZXNzYWdlKGUsdCl9KX19fSx7a2V5OiJyZXBseU1lc3NhZ2UiLHZhbHVlOmZ1bmN0aW9uKGUsbil7dGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHtpZDplLmlkLHR5cGU6InJlc3BvbnNlIix0bzplLmZyb20sZnJvbTplLnRvLGJvZHk6e2NvZGU6MjAwLHZhbHVlOm59fSl9fSx7a2V5OiJfc2VuZFN0YXR1cyIsdmFsdWU6ZnVuY3Rpb24oZSxuKXt2YXIgdD10aGlzO2NvbnNvbGUubG9nKCJbU2xhY2sgSWRwIFByb3h5IHN0YXR1cyBjaGFuZ2VkXSB0byAiLGUpLHQuX3N0YXRlPWU7dmFyIG89e3R5cGU6InVwZGF0ZSIsZnJvbTp0LnJ1bnRpbWVQcm90b1N0dWJVUkwsdG86dC5ydW50aW1lUHJvdG9TdHViVVJMKyIvc3RhdHVzIixib2R5Ont2YWx1ZTplfX07biYmKG8uYm9keS5kZXNjPW4pLHQubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShvKX19XSksZX0oKX1dKS5kZWZhdWx0fSk7",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "version": "22.00",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MicrosoftProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MicrosoftProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-a23b7159-3d89-f5a6-a8d9-3aab90077d433",
    "version": 1.3,
    "description": "Description of MicrosoftProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": false,
    "objectName": "microsoft.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "OrangeProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "OrangeProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-a23b7159-3d89-f5a6-a8d9-3aab90077d434",
    "version": 0.2,
    "description": "Description of OrangeProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": false,
    "objectName": "orange.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHRoaXMsIGZ1bmN0aW9uKCkgewpyZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewoKLyoqKioqKi8gCQkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKLyoqKioqKi8gCQlpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7CgovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlleHBvcnRzOiB7fSwKLyoqKioqKi8gCQkJaWQ6IG1vZHVsZUlkLAovKioqKioqLyAJCQlsb2FkZWQ6IGZhbHNlCi8qKioqKiovIAkJfTsKCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7CgovKioqKioqLyAJCS8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWQKLyoqKioqKi8gCQltb2R1bGUubG9hZGVkID0gdHJ1ZTsKCi8qKioqKiovIAkJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKLyoqKioqKi8gCQlyZXR1cm4gbW9kdWxlLmV4cG9ydHM7Ci8qKioqKiovIAl9CgoKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwoKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwoKLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCXJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApOwovKioqKioqLyB9KQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAoWwovKiAwICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCSd1c2Ugc3RyaWN0JzsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgl2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsKCglleHBvcnRzLmRlZmF1bHQgPSBhY3RpdmF0ZTsKCglmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCgkvKioNCgkqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5DQoJKi8KCgl2YXIgaWRwID0gewoKCSAgLyoqDQoJICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZA0KCSAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uDQoJICAqDQoJICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZA0KCSAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uDQoJICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0DQoJICAqLwoJICB2YWxpZGF0ZUFzc2VydGlvbjogZnVuY3Rpb24gdmFsaWRhdGVBc3NlcnRpb24oYXNzZXJ0aW9uLCBvcmlnaW4pIHsKCgkgICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZAoJICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgoJICAgICAgLy8gYXRvYiBtYXkgbmVlZCB0byBiZSByZXF1aXJlZCBmb3Igbm9kZWpzCgkgICAgICAvLyB2YXIgYXRvYiA9IHJlcXVpcmUoJ2F0b2InKTsKCSAgICAgIHZhciBkZWNvZGVkQ29udGVudCA9IGF0b2IoYXNzZXJ0aW9uKTsKCSAgICAgIHZhciBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7CgoJICAgICAgdmFyIGlkVG9rZW5TcGxpdGVkID0gY29udGVudC50b2tlbklELnNwbGl0KCcuJyk7CgoJICAgICAgdmFyIGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTsKCgkgICAgICByZXNvbHZlKHsgaWRlbnRpdHk6IGlkVG9rZW4uZW1haWwsIGNvbnRlbnRzOiBpZFRva2VuLm5vbmNlIH0pOwoJICAgIH0pOwoJICB9LAoKCSAgLyoqDQoJICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbg0KCSAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb24NCgkgICoNCgkgICogQHBhcmFtICB7Y29udGVudHN9IFRoZSBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWQNCgkgICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvbg0KCSAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXINCgkgICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb24NCgkgICovCgkgIGdlbmVyYXRlQXNzZXJ0aW9uOiBmdW5jdGlvbiBnZW5lcmF0ZUFzc2VydGlvbihjb250ZW50cywgb3JpZ2luLCBoaW50KSB7CgoJICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgoJICAgICAgLy90aGUgaGludCBmaWVsZCBjb250YWlucyB0aGUgaW5mb3JtYXRpb24gb2J0YWluZWQgYWZ0ZXIgdGhlIHVzZXIgYXV0aGVudGljYXRpb24KCSAgICAgIC8vIGlmIHRoZSBoaW50IGNvbnRlbnQgaXMgbm90IHByZXNlbnQsIHRoZW4gcmVqZWN0cyB0aGUgdmFsdWUgd2l0aCB0aGUgVVJMIHRvIG9wZW4gdGhlIHBhZ2UgdG8gYXV0aGVudGljYXRlIHRoZSB1c2VyCgkgICAgICBpZiAoIWhpbnQpIHsKCgkgICAgICAgIC8vIHRoaXMgaXMgdGVtcG9yYXJ5CgkgICAgICAgIHJlamVjdCh7IG5hbWU6ICdJZFBMb2dpbkVycm9yJywgbG9naW5Vcmw6ICdyZXF1ZXN0VXJsJyB9KTsKCSAgICAgICAgLy9sZXQgdXJsID0gImh0dHBzOi8vbG9jYWxob3N0LyNzdGF0ZT1zdGF0ZSZjb2RlPTQvMTRwd2N0S2g4TU9kbDR2aGYxTG80c1pmZ1pkLTE4Z3I1YmdTbW9YaC1MVSZhY2Nlc3NfdG9rZW49eWEyOS5HbHY0QTJUMmxEV3lRTlpyTVNRT0FNV0J0SVZGMmYxeVlxVms2X3Z4WHBOeVFPcGVZUGVVbTNsWURNNXNXVHd5cy16TTB4UWxXMGk3SXR6cXlDeENzSjdkY0dsX3lmYUM0bHhXTXJOZ2dMdUtBXzI3bU1BM0JCeVlCTlJKJnRva2VuX3R5cGU9QmVhcmVyJmV4cGlyZXNfaW49MzYwMCZpZF90b2tlbj1leUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SW1aa1kyRmhOak15TkRCbFpESTRaV0ZsTXpneFpERTJORE5rTkdOak9UTTFObVJqTXprM1pXSWlmUS5leUpwYzNNaU9pSmhZMk52ZFc1MGN5NW5iMjluYkdVdVkyOXRJaXdpYVdGMElqb3hORGczTmpBeE5URXpMQ0psZUhBaU9qRTBPRGMyTURVeE1UTXNJbUYwWDJoaGMyZ2lPaUpzV1VWRVlVOXVabGRvVFdSR1FtRkNObFV0VDNobklpd2lZWFZrSWpvaU9EQTRNekk1TlRZMk1ERXlMWFJ4Y2poeGIyZ3hNVEU1TkRKblpESnJaekF3TjNRd2N6aG1NamMzY205cExtRndjSE11WjI5dloyeGxkWE5sY21OdmJuUmxiblF1WTI5dElpd2ljM1ZpSWpvaU1URXhPVE0wTWpNek5qTXlOVEl3TURjM056UXpJaXdpWTE5b1lYTm9Jam9pYlhwWFRXaE1aMnhXWWtaQ2JEVXpPVWN5YzFGblp5SXNJbVZ0WVdsc1gzWmxjbWxtYVdWa0lqcDBjblZsTENKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKdWIyNWpaU0k2SWs1RVozTk5WRTEzVEVSRmMwMTZVWE5PUkdkelRWUk5jMDVwZHpWTVJGRjVURVJGZWs1RGR6Tk5hWGQ0VFhwUmMwMXFVVE5NUkVWNlRFUkZjMDFUZDNoTVJGVnpUVU4zZWt4RVJYcE5RM2Q0VEVSRk1VeEVRWE5PUkdkelRWUk5kMHhFUlhOTlZFRnpUV2wzZUUxNlFYTk5VM2Q0VEVSQmMwMXFTWHBNUkVWM1RubDNlRTE2YTNOTlZGVXhURVJKZDA1NWQzaE5ha2x6VFdwUmQweEVTVEJPYVhkNFRXcE5jMDFVVVhwTVJFVjRUbE4zZVUxNlJYTk5WR013VEVSRmQwNVRkelZOUTNkNFRFUkZOVTlEZDNoTmFrRnpUa1JGYzAxcVJYaE1SRWt3VGtOM2VVNUVXWE5OYWtWNVRFUnJlRXhFVVhsTVJHTXlURVJGTUU1RGQzaE9ha2x6VFZSWk1FeEVSWGROZVhkNVRWUkZjMDFVU1RSTVJFbHpUa1JuYzAxNlNYTk5WRWt6VEVSRk0wOVRkM2xOYWxselRXcE5la3hFU1hkT2FYZDVUbFJSYzA5VVRYTk5WRmt4VEVSSmQwMTVkekJQVTNjeVRtbDNlRTlFYTNOTmFsRjZURVJKZVUxcGR6UlBRM2Q1VFZSVmMwMXFUVEJNUkZVeVRFUkZlazlEZDNoTlZGRnpUVlJWTlV4RVJUTk5VM2Q1VFhwQmMwMVVRVEpNUkVVMVRubDNORTVEZDNoT1JHTnpUMVJyYzAxVVRYZE1SRWw2VGxOM2VVMUVaM05QUkZGelRXcHJjMDFVVFRGTVJGazBURVJSTVV4RVJUVlBVM2Q2VGtOM01VOURkM2xOUkdOelQwUk5jMDFxVVhoTVJFbDNUa04zZUU1cVdYTk5hbEV3VEVSRk5VNXBkM2hOYW1kelRtbDNlRTFxVlhOTlZFazFURVJKTUU5RGR6Uk5VM2N6VEVSRk1FMVRkM2xOVkUxelRWUmpNVXhFYXpGTVJGVjRURVJyTVV4RVNYcE5RM2Q0VFVSQmMwMVVVVEZNUkVVelQxTjNlRTlVVVhOTlZGVTBURVJaZWt4RVJUVk5lWGQ0VDBSSmMwMVVUWE5PVTNkNlRYbDNlRTFxU1hOUFJHZHpUVlJOZDB4RVNYTk5WR3Q0VEVSRmVrOVRkM2xOUkdkelRXcE5OVXhFUlhsUFUzZDRUVVJGYzAxVVZYbE1SRVY1VEVSSmVFMXBkM2hQVTNjelQwTjNlRTE2YTNOTmFrMTNURVJSZDB4RVJYaE5hWGQ0VG1wWmMwMTZVWE5OYWsxNlRFUlJOVXhFUlhoT1UzY3hUME4zZUUxRVJYTk5hbEY0VEVSSmQweEVUWHBNUkVVd1RtbDNNazVwZHpWTlEzZDRUWHBqYzAxVWEzTk5WRmt6VEVSRk1VMURkM2hPVkVselRWUmpNMHhFU1RGTlEzZDVUWHByYzAxVVl6Vk1SR015VEVSVk1VeEVSWGxOUTNkNFRXcHJjMDFVVlRGTVJFMHpURVJaTkV4RVJUSlBRM2N4VFZOM2VVMXFWWE5OYWtFMFRFUkZlRTE1ZDNsTlUzZDRUbE4zZVUxNWQzaE5SR3R6VFZSbmVVeEVRWE5QUkVGelRWUlZOVXhFUlhsTlEzZDRUMFJuYzA1RVFYTk9WRVZ6VDBOM2VFOVVSWE5PYWtselQwUm5jMDFxUVhoTVJFVjVUbE4zZUUxcGR6RlBRM2Q0VG1wVmMwMTZaM05OVkVWelQwUlJjMDE2UVhOUFZGRnpUMVJOYzAxNWQzbE5SRWx6VDBSamMwMVVSVFZNUkZVMVRFUkZNMDVEZDNoTmFrMXpUVlJOYzAxVVNYZE1SRWwzVDBOM2VVMUVUWE5OVkVFMVRFUmplRXhFU1hsT2VYYzBUVU4zZUUxVGQzaE5lbWR6VFZSUk5VeEVSWHBPVTNkNFQwUmpjMDlFVlhOT1JHZHpUVlJuZUV4RVdUUk1SRVV4VFVOM2VrOVRkM2xPUkZGelQwUlJjMDFVUVRSTVJFRnpUVlJaTlV4RVJUVlBVM2Q1VGtSamMwMVVTVFJNUkVrMVRFUmplRXhFU1hsUFUzZDRUME4zZUUxNlVYTk5ha1Y0VEVSRk5VMXBkM2hOZWtWelRWUm5NRXhFYTNwTVJFbDVUbmwzZVU1RVRYTk5ha2wzVEVSSmQwNVRkM2hPUkdkelRWUkpORXhFU1hkUFUzY3pUWGwzTVU5RGQzaFBSRVZ6VFZSQmQweEVSWHBNUkZFeFRFUlpNVXhFUlhsT1EzZDZUMU4zZUUxRVdYTk5WRkV4VEVSSmVVNTVkM2hPVkd0elQxUmpjMDFVUlRWTVJHTjRURVJGTlUxcGQzaE5lbU56VGtScmMwMXBkM3BNUkVWelRVTjNlQ0lzSW1WdFlXbHNJam9pYjNCbGJtbGtkR1Z6ZERFd1FHZHRZV2xzTG1OdmJTSjkuQTFIN2t5dG1qbVpjOW5JYzVDNjc0Q0xfZURsel8xM1lMZWZwRExDck9DbGVmYXRfRzVhQ1c4b3ZFLXZhU3ljZWY3cllBMVp4SnQwcVAxcHZMUDlrOW1kU3l3VVhVdUg0em1zWUQwa2hQQUhWTUxpU1llY2xiYlpVMnVTb2dlS2NHN0JqSzZwMUYzd1J0dWprWUtuMFFwS093Ri1YU0lUY3NVdUlEYXlBTEZQYzF4NUxIakF0WWtLVTBZMDdUaUZ5WmlWanJDLWVaQjZETEpKQkNpZTNFMnExYjZwVzhLbndJOVZ5elhGLU13RzVEWTgzYW13SjNTYXVLWlpsdXU0NTY1WjlzdFdwLXZMSks2SVVKS29IV094R2REWGR6TmhQOXVHUmo4d1N2Z0JfUlpuUE90Ym9KbTlHMG9Mdl8ycXQtTDNyMU1hakU4YThLMjVLMkgyVWV3JmF1dGh1c2VyPTEmc2Vzc2lvbl9zdGF0ZT05Y2EzZWMyYmQyNGZkZWNiOTVkNjgzZGM2ZjU4YWM5ZjZkOWE2MmYzLi40ZjAwJnByb21wdD1ub25lIjsKCSAgICAgICAgLy9yZXNvbHZlKHVybCk7CgkgICAgICB9IGVsc2UgewoKCSAgICAgICAgdmFyIGFzc2VydGlvbiA9ICJleUowYjJ0bGJrbEVJam9pWlhsS2FHSkhZMmxQYVVwVFZYcEpNVTVwU1hOSmJYUndXa05KTmtsdFdtdFpNa1pvVG1wTmVVNUVRbXhhUkVrMFdsZEdiRTE2WjNoYVJFVXlUa1JPYTA1SFRtcFBWRTB4VG0xU2FrMTZhek5hVjBscFpsRXVaWGxLY0dNelRXbFBhVXB2WkVoU2QyTjZiM1pNTWtacVdUSTVNV0p1VW5wTWJXUjJZakprYzFwVE5XcGlNakJwVEVOS2NGbFlVV2xQYWtVd1QwUmpNazFVUVROT2VtZHpTVzFXTkdORFNUWk5WRkUwVG5wWmVFNUVUVE5QUTNkcFdWaFNabUZIUm5waFEwazJTV3R6TWxReFJUUmpNVXAwVG1wQ2RVNHpVa2RYYmtaM1lUSmtRMVJ0WTJsTVEwcG9aRmRSYVU5cFNUUk5SR2Q2VFdwck1VNXFXWGROVkVsMFpFaEdlVTlJUm5aaFJFVjRUVlJyTUUxdFpHdE5iWFJ1VFVSQk0yUkVRbnBQUjFsNVRucGtlV0l5YTNWWldFSjNZM2sxYm1JeU9XNWlSMVl4WXpKV2VWa3lPWFZrUjFaMVpFTTFhbUl5TUdsTVEwcDZaRmRKYVU5cFNYaE5WRVUxVFhwUmVVMTZUVEpOZWtreFRXcEJkMDU2WXpOT1JFMXBURU5LYkdKWFJuQmlSamt5V2xoS2NGcHRiR3hhUTBrMlpFaEtNVnBUZDJsWldIQjNTV3B2YVU5RVFUUk5la2sxVGxSWk1rMUVSWGxNV0ZKNFkycG9lR0l5WjNoTlZFVTFUa1JLYmxwRVNuSmFla0YzVGpOUmQyTjZhRzFOYW1NelkyMDVjRXh0Um5kalNFMTFXakk1ZGxveWVHeGtXRTVzWTIxT2RtSnVVbXhpYmxGMVdUSTVkRWxwZDJsaWJUbDFXVEpWYVU5cFNrOVNSMlI2VkZaU1RtUXdlRVZTV0U1T1pXeEdlbFJyVW01ak1ERlZWRmhPVDJGWVl6RlVSVkpTWlZWNFJWSlljRTlSTTJONlZGZHNNMlZGTVRaVldFNU9ZV3hGZWxSRlVrWmxhM2hGVWxoT1RsVXpaRFJVUlZKV1l6QXhSR1F6Y0UxU1JWWTJWRlZPTTJWRmVFVlNWRVpOVWtWR2VsUnJVbTVqTURGVlZGaGtUVkpGVm5wVVZsSkNZekF4Y0dRemFFNWxhMFo2VkZaT00yVkZlRVZSV0U1T1lXeFdOVlJGVWtwTlJYaEZVbGh3VUZFelpEUlVWbEpHWXpBeFZWVlVWazFTUjAweFZFVlNUazFGZUVWVFdHeFBVVE5rTkZSc1VsSmpNREZWVlZoa1RWSkZiSHBVVjNCS1pVVjRSVkpVVmsxU1JWVXdWRlZPTTJWRk9WVlZXRTVQWlZoa05WUlljRVpqTURGVlZGUlNUVkpHUlRGVVJWSkdaVlU1VkdSNlFrNWxXR1EwVkRGT00yVlZNWEZTV0U1T1ZrVnJlbFJGVWtwTlZURndaRE5zVUZVelkzbFViRTR6VFdzMU5XUXphRkJXUmtaNlZGWlNRbVZGZUVWVVdHaE5Va1ZXTmxSVlRqTmxWVEUyVlZoT1RsWkhkRE5VUlZKS1l6QXhjVlJZYkUxU1JWVjZWREJPTTJWRk5WVlRXRTVPWVd0RmVGUkZVbkpOUlhoRlUxaHNUMUV6WkRWVVdHd3paVlV4Tm1FelRrNVdSMk40VkVWU1JtVlZlRVZTV0dSUFpWaGtORlJYYkRObFZURlZVVmhPVDFKRmJIcFVXSEJ1WXpBeFZWbDZVazFTUld3MlZGZHNNMlZWTVZWV1dFNU9Wa2RrZWxSWGNGWk5SWGhGVTFSQ1VGVXpaRFZVV0hCT1l6QXhjVlJVU2sxU1JXdDNWRlpPTTJWRk1VVmFNMDVPWldzeGVsUldVbHBsYTNoRlUxUkNUbEV6WTNwVWEwNHpaVVUxUlZWWVRrNVdSa1o2Vkd4U1VtTXdNVlZoZWxKTlVrVlZlRlJGVWxKTlJYaEZVbFJXVUZFell6QlVWazR6VGtVNVZHUXphRTlXUm14NlZHeFNhbU13TVZWVlZFWk5Va1ZyZDFSc1RqTmxSVEZGVjFoT1RsWkdWVEZVUlZKR1pEQTVWR1F6YUU5Vk0yUTBWR3hTUm1Nd01WVlNWRVpOVWtkTmVWUkZVa1prTURGVVpETm9UbFpIWkhwVVZsSmFUVlY0UlZKWVpGQlJNMk41VkZoc00yVkZPVlZYV0U1T1lXdHJlbFJGVWtaTmF6RTFaRE5vVUZaRlJucFVWbEp5WlZWNFJWSlVVazVsV0dRMFZGZHdVbU13TVZWVFZFWk5Va1ZWZWxRd1RqTk5WVFZ3WkROd1RtRllZekZVYkU0elRXczVSR1I2Vms1bFdHTjVWREJPTTAxVk1VUmtla0pQWlZoa05WUldVbXBqTURFMlUxaE9UbUZ0ZEhwVWJGSldZekF4VlZGVVFrMVNSVlV4VkRCT00wNVZOVVJrTTJoUVZrZGtlbFJXVW1wak1ERnhWVlJDVFZKRlZqTlVibXd6WlZVeFJWRllUazVXUlRCNlZFVlNUazFGZUVWU1ZGSk9VVE5rTkZRd1VuSmpNREUxWkROb1VGWkhkSHBVVlU0elpWVXhObEZZVGs1V1JrVXdWRVZTU21Rd01YQmtNMmhPWlcxMGVsUldVazVsUlhoRlVsUkdVRlV6WkRSVVdIQmFZekF4VlZkVVFrMVNSa1V4VkVWU1JtVkZOVlJrTTJoT1pXdEdlbFF3VWtwak1ERnhVVlJTVFZKRlZUQlViRTR6WlZVeE5sVllUazVoYTFZMFZFVlNSbVZGTlZSa00yeE9ZV3hzZWxSc1VrSmpNREZWVWxoc1RWSkhaRFZVUlZKS1pEQTFOV1F6YkU1V1JXeDZWRzV3UW1Nd09WVmhNMDVQWVd0c2VsUnNVbkpqTURVMllUTk9UMUpIZEhwVVZsSldUVVY0UlZKVVJrNWxXR1EwVkd0U1VtTXdNWEZSV0hCTlVrVlZNRlJ1YkRObFZUVkZVMWhPVGxaR1ZYZFVSVkpLVFRCNFJXRjZWazFTUlZWNVZHeE9NMlZGT1ZWUldFNU9Wa1V4TmxSRlVrWk5NRFZFWkROc1RtRnJSbnBVVmxKS1RWVjRSVmRZYkUxU1JWVjRWREJPTTJWVk5WVlNXRTVPWVd4Rk1WUkZVbEpOVlhoRlVsUkdUbFV6WXpCVVYyd3paVlV4UldFelRrNVdSM014VkVWU1drNVZlRVZhZWtwTlVrVlZNRlJ0YkROa01IaEZVbGhrVFZKRlZqUlViV3d6WlVVeFZWTllUazVXUjNRMFZFVlNVazFyZUVWU1dHaE9VVE5rTlZSc1RqTk5SVGxVWkhwR1RtVllZM2hVVjJ3elpWVXhSVk5ZVGs1V1JXdDNWRVZTU21WVk5VUmtNMmhRVmtVeGVsUldVbHBqTURGeFZsaG9UVkpGVlRCVWJFNHpaVlV4TmxaWVRrNWhhekI1VkVWU1JrMVZPVVJrTTJ4T1ZrZDBlbFJ0Y0ZKak1EVlZWRmhPVGxaSFpEUlVSVkpHVGtVMVZHUXphRkJTUmxaNlZGZHdSbVZWZUVWaGVrSk5Va1ZXTlZSclRqTmxSVEUyVlZoT1RtRnJNSGhVUlZKR1pWVXhSR1I2Vms5bFdHUTBWRlZTY21Nd01WVlVXR1JOVWtWVmVGUXhUak5sVlRWRlVsaE9UbFpHVlhoVVJWSldaVlY0UlZOWWFGQlJNMlExVkd0U1NtTXdNWEZTV0hCTlVrVXhlbFJXVWtwa01IaEZVbFJHVDFVelpEVlVWM0JHWXpBeGNWTlVUazFTUmxWNlZFVlNTazFyZUVWWmVrNU5Va1V4TmxSRlVtNWxhM2hGVTFoa1RsVXpZekZVV0d3elpWVXhjVlpZVGs5V1JXeDZWREJTVm1Nd01WVmFNMlJOVWtWV05sUlliRE5sUlRFMldqTk9UMlZyYkhwVVYzQlNaVlY0UlZOWWJFNWhXR1ExVkd0U2FtTXdPVlZXV0U1T1ZrZE5lbFJGVWtwbFZUVTFaRE5vVUZKR1JucFVWM0JPVGxWNFJWSllaRTloV0dRMFZHdFNWbU13TVZWWFZFNU5Va1ZXTmxSWWJETk5WVEUxWkROc1RWSkZNWHBVVms0elpEQjRSVkpVTUdsTVEwcHNZbGRHY0dKRFNUWkpiVGwzV2xjMWNGcElVbXhqTTFGNFRVVkNibUpYUm5CaVF6VnFZakl3YVdaUkxsVk9jbEZEZVY5MWNrcEZaWEkzTlMxSmNWcHVjR2hVTkRoRmVHdEhNazlxVVV4c1RGUnRZMVJHVEhsTlpUZDRYMnR1V0c1T1NXRlFUbEppVFhGU2FWWTBaRTF4TmpFMmJYbFhkRXB2WWxWd1NWTmlTbkZhVEMxbU0wOWpiM0kxTFRjM2NqVlhSUzFXVjJVNVJEbGZOelJXYlhSUWFtVjJaSEkzZGtwRU5sWlJMVFV5V2xoNFdtMU1lRGRUYzJkUldrdDRVbUp4U0c0NGJ6ZEVaM1poUTB0dldEbFBTM0l3V1ZCME9HUldhMUUxVm5walJXNTBOa1JrVjFoMVVVWnJVVkpVV1VGTFNYRnZjbkJCU201dmVYWlZSMGxKTmtGV1RtWnVjbVpWVms1b2EwcEhWelpIWkdOS2IxQkNka05EYlhveFIwZDBWV2xJVEVSU1VEaFBjRGhuVmxOa1ZreFpTblp4VEc5S1FqaHZYMGh4VVRKV05sTmpkMXBpUW1WRE1tcExWV2RmV1haZmQxZDBPVkpSZVhwd1FXOWxSM1V0VWxaMFIxQjJja2RGWVVWQmRrbEZXSGszYzFaTWFXTkhNSGx1VlhWWGR5SXNJblJ2YTJWdVNVUktVMDlPSWpwN0ltbHpjeUk2SW1oMGRIQnpPaTh2WVdOamIzVnVkSE11WjI5dloyeGxMbU52YlNJc0ltbGhkQ0k2SWpFME9EYzJNVEEzTnpnaUxDSmxlSEFpT2lJeE5EZzNOakUwTXpjNElpd2lZWFJmYUdGemFDSTZJa3MyVDFFNGMxSnROakJ1TjNSR1duRndhMmRDVG1jaUxDSmhkV1FpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSnpkV0lpT2lJeE1URTVNelF5TXpNMk16STFNakF3TnpjM05ETWlMQ0psYldGcGJGOTJaWEpwWm1sbFpDSTZJblJ5ZFdVaUxDSmhlbkFpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSnViMjVqWlNJNklrNUVaM05OVkUxM1RFUkZjMDE2VVhOT1JHZHpUVlJOYzA1cGR6Vk1SRkY1VEVSRmVrNURkek5OYVhkNFRYcFJjMDFxVVROTVJFVjZURVJGYzAxVGQzaE1SRlZ6VFVOM2VreEVSWHBOUTNkNFRFUkZNVXhFUVhOT1JHZHpUVlJOZDB4RVJYTk5WRUZ6VFdsM2VFMTZRWE5OVTNkNFRFUkJjMDFxVlhsTVJFa3dURVJGZWs5RGQzaE5WRVZ6VFZSUk5VeEVZelZNUkUwd1RFUkplVTVEZDNoT1ZGRnpUVlJSZDB4RVNYTk5ha2w0VEVSRk5VeEVSVFJOUTNkNFQxUlJjMDU1ZDNsTmVrVnpUVlJOTkV4RVVUVk1SRVY1VDFOM01FMTVkM2hQVTNkNVRXcEZjMDFVU1ROTVJFa3hUV2wzZVU5VGR6Sk9VM2N5VG5sM2VFOVVVWE5OVkVGNFRFUk5lRXhFUlhwTlEzZDVUWHBSYzAxVWEzZE1SRWx6VFdwTmVVeEVSVE5QUTNkNFRsUkpjMDFxUVRGTVJHc3dURVJKZVU1RGQzbE5lWGQ1VFhwcmMwMVVaekZNUkVWNVRFUkZkMDU1ZDNoTmFYZDVUVlJCYzA1RVNYTk5lbWR6VFZSak5FeEVTWHBOYVhkNVRWUlZjMDFVWjNOTmFsVXdURVJKTUU5VGQzbE5lazF6VFdwTk1reEVTVEJOVTNkNFRVUm5jMDE2VFhOTlZGbDZURVJKTUUxRGR6Tk9RM2Q0VGtSUmMwMVVVWE5PVkZGelRWUnJORXhFUlRGTVJGRXdURVJGTlU5RGR6Uk5VM2MwVDFOM2VFNVVXWE5PVkdOelRWUlJNVXhFU1RCT1UzZDRUVVJaYzAxVVZUVk1SRVYzVDFOM2VFNVRkM2hPVkVWelRWUkZNVXhFWXpKTVJFVjNUVk4zZUUxVVozTk5WRmt4VEVSRmQwOURkekpOZVhkNFQxUlpjMDFxU1ROTVJFVXlUWGwzZUU5VVFYTk5WR3Q1VEVSRk5FMTVkM2hOYWxGelRWUkpNVXhFUlROUFEzY3hUbWwzZWsxcGR6Vk9VM2N5VDBOM05VMTVkekpQUTNjeFRVTjNNRTU1ZDNsTlZHTnpUWHBKYzAxcWEzTk9WRlZ6VFZSQk1FeEVSVFZQUTNjMVRrTjNlRTlVWjNOTlZHTnpUV3BSTUV4RVJYZE9lWGQ1VFVSQmMwMVVUVE5NUkUwd1RFUkZORTFEZDNoUFJHdHpUWGwzZUU5VWEzTk5RM2Q1VFhwQmMwMVVVVFJNUkVsM1RXbDNlRTE2YTNOTlZFMTRURVJGTVU5VGQzaE5lbGx6VFZSWk1FeEVVVFZNUkVWNFRsTjNlRTE2UVhOUFJFbHpUV3BCTkV4RVJUUk9VM2Q1VFhwUmMwMXFSWGhNUkVWNFRsTjNlVTFxV1hOT1ZFRnpUVlJGZVV4RVozbE1SRWwzVG5sM2VVMVVTWE5PZWtGelQxUnJjMDVxU1hOT1ZHdHpUbnByYzA1RWEzTk5WRlV3VEVSRk1VMTVkM2hPUkZGelRXcEJla3hFUlRST2VYZDVUa1JKYzAxVVZUQk1SRWt6VEVSck5VeEVSVEpPVTNkNFQxUkJjMDFVVFhwTVJFVXpUa04zZVUxcVFYTk5WRWt4VEVSWmVVeEVSVEZQUTNkNVRsUkZjMDFxVVRWTVJGRXhURVJGTVUxVGR6Uk5hWGQ1VFVScmMwMVVhelZNUkZrMVRFUm5Na3hFUlRST2FYZDNURVJGZDB4RVJYaE9hWGQ0VFZSSmMwMVVhM2hNUkZFeVRFUkZlRTFEZDNsT1UzY3dUMU4zTVUxNWR6Rk5hWGQ1VFVSSmMwMVVTVEJNUkVsNVRrTjNlRTlVVFhOTlZGbHpUV3BWZUV4RVJUUk9VM2Q1VFhwVmMwMXFUVEpNUkVVeFQwTjNlVTFVYTNOT2FsRnpUbFJOYzAxVVozaE1SRVUwVGxOM2VFOUVWWE5OYWtWNVRFUnJNRXhFUlhsT1EzZDRUWHBSYzAxcVRURk1SRVY1VFVOM05VNTVkM2hOUkd0elRWUk5kMHhFUlRGUFUzZDVUa1JGYzAxVVZURk1SRlY1VEVSSmVFOURkM2xPUkVselRXcEZla3hFVFhOTlZFbDNURVJGTVU1VGQzbE5ha1Z6VFdwSk0weEVWVE5NUkVreVRFUmpNMHhFVFhwTVJHZDZURVJKZDAxVGR6Vk5lWGQ1VFdwVmMwNVVTWE5QUkZWelRWUm5kMHhFUlhwTmVYZDRUWHBuYzA1NlNYTk5hbEY1VEVSSmVVMXBkM2xPUkdOelQxUlZjMDFVWXpOTVJFbDVUbmwzZUU5RVVYTk5hazAxVEVSRmQwNXBkM2hPUkZWelRWUlpNMHhFUlhwTmVYY3hUWGwzZVV4RVRYTk5VM2QzVEVSRlBTSXNJbVZ0WVdsc0lqb2liM0JsYm1sa2RHVnpkREV3UUdkdFlXbHNMbU52YlNJc0ltRnNaeUk2SWxKVE1qVTJJaXdpYTJsa0lqb2labVJqWVdFMk16STBNR1ZrTWpobFlXVXpPREZrTVRZME0yUTBZMk01TXpVMlpHTXpPVGRsWWlKOWZRPT0iOwoJICAgICAgICB2YXIgaWRwQnVuZGxlID0geyBkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJyB9OwoJICAgICAgICB2YXIgaWRlbnRpdHlCdW5kbGUgPSB7ICJhY2Nlc3NUb2tlbiI6ICJ5YTI5LkdsdjRBMW5fSFNjUkJOdFRfT0VxNm82Ql9WSGJwLTFjSnF0ci05N2tUYTQwZWpwcUcwZlRiQWh0ck1sYWpWa1lMRjMzUXRjeFFBVGZad1ZxYXVuN0xYby03LTRJdEw1RkNNQzNtOVZ3Uko4U0QzU3JiTW9RX19LYzhWNmgiLCAiaWRUb2tlbiI6ICJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SW1aa1kyRmhOak15TkRCbFpESTRaV0ZsTXpneFpERTJORE5rTkdOak9UTTFObVJqTXprM1pXSWlmUS5leUpwYzNNaU9pSm9kSFJ3Y3pvdkwyRmpZMjkxYm5SekxtZHZiMmRzWlM1amIyMGlMQ0pwWVhRaU9qRTBPRGMyTVRBM056Z3NJbVY0Y0NJNk1UUTROell4TkRNM09Dd2lZWFJmYUdGemFDSTZJa3MyVDFFNGMxSnROakJ1TjNSR1duRndhMmRDVG1jaUxDSmhkV1FpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSnpkV0lpT2lJeE1URTVNelF5TXpNMk16STFNakF3TnpjM05ETWlMQ0psYldGcGJGOTJaWEpwWm1sbFpDSTZkSEoxWlN3aVlYcHdJam9pT0RBNE16STVOVFkyTURFeUxYUnhjamh4YjJneE1URTVOREpuWkRKclp6QXdOM1F3Y3pobU1qYzNjbTlwTG1Gd2NITXVaMjl2WjJ4bGRYTmxjbU52Ym5SbGJuUXVZMjl0SWl3aWJtOXVZMlVpT2lKT1JHZHpUVlJOZDB4RVJYTk5lbEZ6VGtSbmMwMVVUWE5PYVhjMVRFUlJlVXhFUlhwT1EzY3pUV2wzZUUxNlVYTk5hbEV6VEVSRmVreEVSWE5OVTNkNFRFUlZjMDFEZDNwTVJFVjZUVU4zZUV4RVJURk1SRUZ6VGtSbmMwMVVUWGRNUkVWelRWUkJjMDFwZDNoTmVrRnpUVk4zZUV4RVFYTk5hbFY1VEVSSk1FeEVSWHBQUTNkNFRWUkZjMDFVVVRWTVJHTTFURVJOTUV4RVNYbE9RM2Q0VGxSUmMwMVVVWGRNUkVselRXcEplRXhFUlRWTVJFVTBUVU4zZUU5VVVYTk9lWGQ1VFhwRmMwMVVUVFJNUkZFMVRFUkZlVTlUZHpCTmVYZDRUMU4zZVUxcVJYTk5WRWt6VEVSSk1VMXBkM2xQVTNjeVRsTjNNazU1ZDNoUFZGRnpUVlJCZUV4RVRYaE1SRVY2VFVOM2VVMTZVWE5OVkd0M1RFUkpjMDFxVFhsTVJFVXpUME4zZUU1VVNYTk5ha0V4VEVSck1FeEVTWGxPUTNkNVRYbDNlVTE2YTNOTlZHY3hURVJGZVV4RVJYZE9lWGQ0VFdsM2VVMVVRWE5PUkVselRYcG5jMDFVWXpSTVJFbDZUV2wzZVUxVVZYTk5WR2R6VFdwVk1FeEVTVEJQVTNkNVRYcE5jMDFxVFRKTVJFa3dUVk4zZUUxRVozTk5lazF6VFZSWmVreEVTVEJOUTNjelRrTjNlRTVFVVhOTlZGRnpUbFJSYzAxVWF6Uk1SRVV4VEVSUk1FeEVSVFZQUTNjMFRWTjNORTlUZDNoT1ZGbHpUbFJqYzAxVVVURk1SRWt3VGxOM2VFMUVXWE5OVkZVMVRFUkZkMDlUZDNoT1UzZDRUbFJGYzAxVVJURk1SR015VEVSRmQwMVRkM2hOVkdkelRWUlpNVXhFUlhkUFEzY3lUWGwzZUU5VVdYTk5ha2t6VEVSRk1rMTVkM2hQVkVGelRWUnJlVXhFUlRSTmVYZDRUV3BSYzAxVVNURk1SRVV6VDBOM01VNXBkM3BOYVhjMVRsTjNNazlEZHpWTmVYY3lUME4zTVUxRGR6Qk9lWGQ1VFZSamMwMTZTWE5OYW10elRsUlZjMDFVUVRCTVJFVTFUME4zTlU1RGQzaFBWR2R6VFZSamMwMXFVVEJNUkVWM1RubDNlVTFFUVhOTlZFMHpURVJOTUV4RVJUUk5RM2Q0VDBScmMwMTVkM2hQVkd0elRVTjNlVTE2UVhOTlZGRTBURVJKZDAxcGQzaE5lbXR6VFZSTmVFeEVSVEZQVTNkNFRYcFpjMDFVV1RCTVJGRTFURVJGZUU1VGQzaE5la0Z6VDBSSmMwMXFRVFJNUkVVMFRsTjNlVTE2VVhOTmFrVjRURVJGZUU1VGQzbE5hbGx6VGxSQmMwMVVSWGxNUkdkNVRFUkpkMDU1ZDNsTlZFbHpUbnBCYzA5VWEzTk9ha2x6VGxScmMwNTZhM05PUkd0elRWUlZNRXhFUlRGTmVYZDRUa1JSYzAxcVFYcE1SRVUwVG5sM2VVNUVTWE5OVkZVd1RFUkpNMHhFYXpWTVJFVXlUbE4zZUU5VVFYTk5WRTE2VEVSRk0wNURkM2xOYWtGelRWUkpNVXhFV1hsTVJFVXhUME4zZVU1VVJYTk5hbEUxVEVSUk1VeEVSVEZOVTNjMFRXbDNlVTFFYTNOTlZHczFURVJaTlV4RVp6Sk1SRVUwVG1sM2QweEVSWGRNUkVWNFRtbDNlRTFVU1hOTlZHdDRURVJSTWt4RVJYaE5RM2Q1VGxOM01FOVRkekZOZVhjeFRXbDNlVTFFU1hOTlZFa3dURVJKZVU1RGQzaFBWRTF6VFZSWmMwMXFWWGhNUkVVMFRsTjNlVTE2VlhOTmFrMHlURVJGTVU5RGQzbE5WR3R6VG1wUmMwNVVUWE5OVkdkNFRFUkZORTVUZDNoUFJGVnpUV3BGZVV4RWF6Qk1SRVY1VGtOM2VFMTZVWE5OYWsweFRFUkZlVTFEZHpWT2VYZDRUVVJyYzAxVVRYZE1SRVV4VDFOM2VVNUVSWE5OVkZVeFRFUlZlVXhFU1hoUFEzZDVUa1JKYzAxcVJYcE1SRTF6VFZSSmQweEVSVEZPVTNkNVRXcEZjMDFxU1ROTVJGVXpURVJKTWt4RVl6Tk1SRTE2VEVSbmVreEVTWGROVTNjMVRYbDNlVTFxVlhOT1ZFbHpUMFJWYzAxVVozZE1SRVY2VFhsM2VFMTZaM05PZWtselRXcFJlVXhFU1hsTmFYZDVUa1JqYzA5VVZYTk5WR016VEVSSmVVNTVkM2hQUkZGelRXcE5OVXhFUlhkT2FYZDRUa1JWYzAxVVdUTk1SRVY2VFhsM01VMTVkM2xNUkUxelRWTjNkMHhFUlQwaUxDSmxiV0ZwYkNJNkltOXdaVzVwWkhSbGMzUXhNRUJuYldGcGJDNWpiMjBpZlEuVU5yUUN5X3VySkVlcjc1LUlxWm5waFQ0OEV4a0cyT2pRTGxMVG1jVEZMeU1lN3hfa25Ybk5JYVBOUmJNcVJpVjRkTXE2MTZteVd0Sm9iVXBJU2JKcVpMLWYzT2NvcjUtNzdyNVdFLVZXZTlEOV83NFZtdFBqZXZkcjd2SkQ2VlEtNTJaWHhabUx4N1NzZ1FaS3hSYnFIbjhvN0RndmFDS29YOU9LcjBZUHQ4ZFZrUTVWemNFbnQ2RGRXWHVRRmtRUlRZQUtJcW9ycEFKbm95dlVHSUk2QVZOZm5yZlVWTmhrSkdXNkdkY0pvUEJ2Q0NtejFHR3RVaUhMRFJQOE9wOGdWU2RWTFlKdnFMb0pCOG9fSHFRMlY2U2N3WmJCZUMyaktVZ19Zdl93V3Q5UlF5enBBb2VHdS1SVnRHUHZyR0VhRUF2SUVYeTdzVkxpY0cweW5VdVd3IiwgInRva2VuVHlwZSI6ICJCZWFyZXIiLCAiaW5mb1Rva2VuIjogeyAic3ViIjogIjExMTkzNDIzMzYzMjUyMDA3Nzc0MyIsICJuYW1lIjogInRlc3QgT3BlbklEIiwgImdpdmVuX25hbWUiOiAidGVzdCIsICJmYW1pbHlfbmFtZSI6ICJPcGVuSUQiLCAicGljdHVyZSI6ICJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVdhQ3JqVk1NVi1RL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFzLzhPbFZxQ3BTQjljL3Bob3RvLmpwZyIsICJlbWFpbCI6ICJvcGVuaWR0ZXN0MTBAZ21haWwuY29tIiwgImVtYWlsX3ZlcmlmaWVkIjogdHJ1ZSwgImxvY2FsZSI6ICJlbi1HQiIgfSwgInRva2VuSURKU09OIjogeyAiaXNzIjogImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSIsICJpYXQiOiAiMTQ4NzYxMDc3OCIsICJleHAiOiAiMTQ4NzYxNDM3OCIsICJhdF9oYXNoIjogIks2T1E4c1JtNjBuN3RGWnFwa2dCTmciLCAiYXVkIjogIjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsICJzdWIiOiAiMTExOTM0MjMzNjMyNTIwMDc3NzQzIiwgImVtYWlsX3ZlcmlmaWVkIjogInRydWUiLCAiYXpwIjogIjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsICJub25jZSI6ICJORGdzTVRNd0xERXNNelFzTkRnc01UTXNOaXc1TERReUxERXpOQ3czTWl3eE16UXNNalEzTERFekxERXNNU3d4TERVc01Dd3pMREV6TUN3eExERTFMREFzTkRnc01UTXdMREVzTVRBc01pd3hNekFzTVN3eExEQXNNalV5TERJMExERXpPQ3d4TVRFc01UUTVMRGM1TERNMExESXlOQ3d4TlRRc01UUXdMRElzTWpJeExERTVMREU0TUN3eE9UUXNOeXd5TXpFc01UTTRMRFE1TERFeU9TdzBNeXd4T1N3eU1qRXNNVEkzTERJMU1pd3lPU3cyTlN3Mk55d3hPVFFzTVRBeExETXhMREV6TUN3eU16UXNNVGt3TERJc01qTXlMREUzT0N3eE5USXNNakExTERrMExESXlOQ3d5TXl3eU16a3NNVGcxTERFeUxERXdOeXd4TWl3eU1UQXNORElzTXpnc01UYzRMREl6TWl3eU1UVXNNVGdzTWpVMExESTBPU3d5TXpNc01qTTJMREkwTVN3eE1EZ3NNek1zTVRZekxESTBNQ3czTkN3eE5EUXNNVFFzTlRRc01UazRMREUxTERRMExERTVPQ3c0TVN3NE9Td3hOVFlzTlRjc01UUTFMREkwTlN3eE1EWXNNVFU1TERFd09Td3hOU3d4TlRFc01URTFMRGMyTERFd01Td3hNVGdzTVRZMUxERXdPQ3cyTXl3eE9UWXNNakkzTERFMk15d3hPVEFzTVRreUxERTRNeXd4TWpRc01USTFMREUzT0N3MU5pd3pNaXc1TlN3Mk9DdzVNeXcyT0N3MU1DdzBOeXd5TVRjc016SXNNamtzTlRVc01UQTBMREU1T0N3NU5Dd3hPVGdzTVRjc01qUTBMREV3Tnl3eU1EQXNNVE0zTERNMExERTRNQ3d4T0Rrc015d3hPVGtzTUN3eU16QXNNVFE0TERJd01pd3hNemtzTVRNeExERTFPU3d4TXpZc01UWTBMRFE1TERFeE5Td3hNekFzT0RJc01qQTRMREU0TlN3eU16UXNNakV4TERFeE5Td3lNallzTlRBc01URXlMRGd5TERJd055d3lNVElzTnpBc09Ua3NOaklzTlRrc056a3NORGtzTVRVMExERTFNeXd4TkRRc01qQXpMREU0Tnl3eU5ESXNNVFUwTERJM0xEazVMREUyTlN3eE9UQXNNVE16TERFM05Dd3lNakFzTVRJMUxEWXlMREUxT0N3eU5URXNNalE1TERRMUxERTFNU3c0TWl3eU1Ea3NNVGs1TERZNUxEZzJMREU0Tml3d0xERXdMREV4Tml3eE1USXNNVGt4TERRMkxERXhNQ3d5TlN3ME9TdzFNeXcxTWl3eU1ESXNNVEkwTERJeU5Dd3hPVE1zTVRZc01qVXhMREU0TlN3eU16VXNNak0yTERFMU9Dd3lNVGtzTmpRc05UTXNNVGd4TERFNE5Td3hPRFVzTWpFeUxEazBMREV5TkN3eE16UXNNak0xTERFeU1DdzVOeXd4TURrc01UTXdMREUxT1N3eU5ERXNNVFUxTERVeUxESXhPQ3d5TkRJc01qRXpMRE1zTVRJd0xERTFOU3d5TWpFc01qSTNMRFUzTERJMkxEYzNMRE16TERnekxESXdNU3c1TXl3eU1qVXNOVElzT0RVc01UZ3dMREV6TXl3eE16Z3NOeklzTWpReUxESXlNaXd5TkRjc09UVXNNVGMzTERJeU55d3hPRFFzTWpNNUxERXdOaXd4TkRVc01UWTNMREV6TXl3MU15d3lMRE1zTVN3d0xERT0iLCAiZW1haWwiOiAib3BlbmlkdGVzdDEwQGdtYWlsLmNvbSIsICJhbGciOiAiUlMyNTYiLCAia2lkIjogImZkY2FhNjMyNDBlZDI4ZWFlMzgxZDE2NDNkNGNjOTM1NmRjMzk3ZWIiIH0sICJleHBpcmVzIjogIjE0ODc2MTQzNzgiLCAiZW1haWwiOiAib3BlbmlkdGVzdDEwQGdtYWlsLmNvbSIgfTsKCSAgICAgICAgdmFyIGluZm9Ub2tlbiA9IHsgInN1YiI6ICIxMTE5MzQyMzM2MzI1MjAwNzc3NDMiLCAibmFtZSI6ICJ0ZXN0IE9wZW5JRCIsICJnaXZlbl9uYW1lIjogInRlc3QiLCAiZmFtaWx5X25hbWUiOiAiT3BlbklEIiwgInBpY3R1cmUiOiAiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1XYUNyalZNTVYtUS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBcy84T2xWcUNwU0I5Yy9waG90by5qcGciLCAiZW1haWwiOiAib3BlbmlkdGVzdDEwQGdtYWlsLmNvbSIsICJlbWFpbF92ZXJpZmllZCI6IHRydWUsICJsb2NhbGUiOiAiZW4tR0IiIH07CgoJICAgICAgICByZXNvbHZlKHsgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBpbmZvOiBpZGVudGl0eUJ1bmRsZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW4gfSk7CgkgICAgICB9CgkgICAgfSk7CgkgIH0KCX07CgoJLyoqDQoJKiBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViDQoJKi8KCgl2YXIgTm9kZWpzUHJveHlTdHViID0gZnVuY3Rpb24gKCkgewoKCSAgLyoqDQoJICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViDQoJICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIHJlY2VpdmVkIGlkcFByb3h5DQoJICAqDQoJICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTA0KCSAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb24NCgkgICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uDQoJICAqLwoJICBmdW5jdGlvbiBOb2RlanNQcm94eVN0dWIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHsKCSAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9kZWpzUHJveHlTdHViKTsKCgkgICAgdmFyIF90aGlzID0gdGhpczsKCSAgICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDsKCSAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzOwoJICAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZzsKCgkgICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHsKCgkgICAgICAvL1RPRE8gYWRkIHRoZSByZXNwZWN0aXZlIGxpc3RlbmVyCgkgICAgICBpZiAobXNnLnRvID09PSAnZG9tYWluLWlkcDovL2dvb2dsZS5jb20nKSB7CgoJICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTsKCSAgICAgIH0KCSAgICB9KTsKCSAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpOwoJICB9CgoJICAvKioNCgkgICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvbg0KCSAgKg0KCSAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzDQoJICAqLwoKCgkgIF9jcmVhdGVDbGFzcyhOb2RlanNQcm94eVN0dWIsIFt7CgkgICAga2V5OiAncmVxdWVzdFRvSWRwJywKCSAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWVzdFRvSWRwKG1zZykgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCSAgICAgIHZhciBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7CgoJICAgICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHsKCSAgICAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOgoJICAgICAgICAgIGlkcC5nZW5lcmF0ZUFzc2VydGlvbihwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CgkgICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7CgkgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CgkgICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7CgkgICAgICAgICAgfSk7CgkgICAgICAgICAgYnJlYWs7CgkgICAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzoKCSAgICAgICAgICBpZHAudmFsaWRhdGVBc3NlcnRpb24ocGFyYW1zLmFzc2VydGlvbiwgcGFyYW1zLm9yaWdpbikudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKCSAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTsKCSAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKCSAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTsKCSAgICAgICAgICB9KTsKCSAgICAgICAgICBicmVhazsKCSAgICAgICAgZGVmYXVsdDoKCSAgICAgICAgICBicmVhazsKCSAgICAgIH0KCSAgICB9CgoJICAgIC8qKg0KCSAgICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkDQoJICAgICoNCgkgICAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWQNCgkgICAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmQNCgkgICAgKi8KCgkgIH0sIHsKCSAgICBrZXk6ICdyZXBseU1lc3NhZ2UnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkgewoJICAgICAgdmFyIF90aGlzID0gdGhpczsKCgkgICAgICB2YXIgbWVzc2FnZSA9IHsgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sCgkgICAgICAgIGJvZHk6IHsgY29kZTogMjAwLCB2YWx1ZTogdmFsdWUgfSB9OwoKCSAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7CgkgICAgfQoJICB9LCB7CgkgICAga2V5OiAnX3NlbmRTdGF0dXMnLAoJICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZFN0YXR1cyh2YWx1ZSwgcmVhc29uKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKCSAgICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuc2VuZFN0YXR1c10gJywgdmFsdWUpOwoKCSAgICAgIF90aGlzLl9zdGF0ZSA9IHZhbHVlOwoKCSAgICAgIHZhciBtc2cgPSB7CgkgICAgICAgIHR5cGU6ICd1cGRhdGUnLAoJICAgICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLAoJICAgICAgICB0bzogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJywKCSAgICAgICAgYm9keTogewoJICAgICAgICAgIHZhbHVlOiB2YWx1ZQoJICAgICAgICB9CgkgICAgICB9OwoKCSAgICAgIGlmIChyZWFzb24pIHsKCSAgICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjsKCSAgICAgIH0KCgkgICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7CgkgICAgfQoJICB9XSk7CgoJICByZXR1cm4gTm9kZWpzUHJveHlTdHViOwoJfSgpOwoKCS8qKg0KCSAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLg0KCSAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTA0KCSAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvbg0KCSAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvbg0KCSAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViDQoJICovCgoKCWZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHsKCSAgcmV0dXJuIHsKCSAgICBuYW1lOiAnTm9kZWpzUHJveHlTdHViJywKCSAgICBpbnN0YW5jZTogbmV3IE5vZGVqc1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKQoJICB9OwoJfQoJbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107CgovKioqLyB9Ci8qKioqKiovIF0pCn0pOwo7",
      "sourceCodeClassname": "NodejsProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-a23b7159-3d89-f5a6-a8d9-3aab90077d435",
    "version": 0.2,
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "constraints": {
      "node": true
    },
    "interworking": false,
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}