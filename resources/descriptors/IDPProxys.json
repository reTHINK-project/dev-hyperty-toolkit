{
  "orange.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "OrangeProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": "5-ece5dff3-c750-4c40-df02-a9f732c1c6780",
    "type": "IDPProxys",
    "version": "0.1",
    "description": "Description of OrangeProxyStub",
    "objectName": "OrangeProxyStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "microsoft.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MicrosoftProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": "5-ece5dff3-c750-4c40-df02-a9f732c1c6781",
    "type": "IDPProxys",
    "version": 0.2,
    "description": "Description of MicrosoftProxyStub",
    "objectName": "MicrosoftProxyStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "google.com": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsKJ3VzZSBzdHJpY3QnOwoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBhY3RpdmF0ZTsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKdmFyIGlkZW50aXRpZXMgPSB7fTsKdmFyIG5JZGVudGl0eSA9IDA7Cgp2YXIgZ29vZ2xlSW5mbyA9IHsKICBjbGllbnRTZWNyZXQ6ICdYeDRyS3VjYjVaWVRhWGxjWlg5SExmWlcnLAogIGNsaWVudElEOiAnODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJywKICByZWRpcmVjdFVSSTogbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUsIC8vbG9jYXRpb24ub3JpZ2luLAogIGlzc3VlcjogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsCiAgdG9rZW5FbmRwb2ludDogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8nLAogIGp3a3NVcmk6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvY2VydHM/JywKICBhdXRob3Jpc2F0aW9uRW5kcG9pbnQ6ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvYXV0aD8nLAogIHVzZXJpbmZvOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nLAogIHRva2VuSW5mbzogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbmluZm8/aWRfdG9rZW49JywKICBhY2Nlc3NUeXBlOiAnb2ZmbGluZScsCiAgdHlwZTogJ2NvZGUgdG9rZW4gaWRfdG9rZW4nLAogIHNjb3BlOiAnb3BlbmlkJTIwZW1haWwlMjBwcm9maWxlJywKICBzdGF0ZTogJ3N0YXRlJwp9OwoKLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzCmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHsKICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFtdLywgJ1xcXFsnKS5yZXBsYWNlKC9bXF1dLywgJ1xcXF0nKTsKICB2YXIgcmVnZXhTID0gJ1tcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknOwogIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTsKICB2YXIgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTsKICBpZiAocmVzdWx0cyA9PT0gbnVsbCkgcmV0dXJuICcnO2Vsc2UgcmV0dXJuIHJlc3VsdHNbMV07Cn0KCmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkgewogIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7CiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7CiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHsKICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuCiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLgogICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7CiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7CiAgfSBlbHNlIHsKICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLgogICAgeGhyID0gbnVsbDsKICB9CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGlmICh4aHIpIHsKICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7CiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgIHZhciBpbmZvID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTsKICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7CiAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgICAgeGhyLnNlbmQoKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7CiAgICB9CiAgfSk7Cn0KCi8qKgoqIEZ1bmN0aW9uIHRvIGV4Y2hhbmdlIHRoZSBjb2RlIHJlY2VpdmVkIHRvIHRoZSBpZCBUb2tlbiwgYWNjZXNzIHRva2VuIGFuZCBhIHJlZnJlc2ggdG9rZW4KKgoqLwp2YXIgZXhjaGFuZ2VDb2RlID0gZnVuY3Rpb24gZXhjaGFuZ2VDb2RlKGNvZGUpIHsKICB2YXIgaSA9IGdvb2dsZUluZm87CgogIHZhciBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY29kZT0nICsgY29kZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZncmFudF90eXBlPWF1dGhvcml6YXRpb25fY29kZSc7CgogIC8vbGV0IFVSTCA9ID0gaS50b2tlbkVuZHBvaW50ICsgJ2NsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZnJlc2hfdG9rZW49JyArIGNvZGUgKyAnJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlbic7CgogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHsKICAgICAgcmVzb2x2ZShpbmZvKTsKICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICByZWplY3QoZXJyb3IpOwogICAgfSk7CiAgfSk7Cn07CgovKioKKiBJZGVudGl0eSBQcm92aWRlciBQcm94eQoqLwp2YXIgSWRwUHJveHkgPSB7CgogIC8qKgogICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkCiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uCiAgKgogICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkCiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uCiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdAogICovCiAgdmFsaWRhdGVBc3NlcnRpb246IGZ1bmN0aW9uIHZhbGlkYXRlQXNzZXJ0aW9uKGFzc2VydGlvbiwgb3JpZ2luKSB7CgogICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZAogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgIHZhciBkZWNvZGVkQ29udGVudCA9IGF0b2IoYXNzZXJ0aW9uKTsKICAgICAgdmFyIGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTsKCiAgICAgIHZhciBpZFRva2VuU3BsaXRlZCA9IGNvbnRlbnQudG9rZW5JRC5zcGxpdCgnLicpOwoKICAgICAgdmFyIGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTsKCiAgICAgIHJlc29sdmUoeyBpZGVudGl0eTogaWRUb2tlbi5lbWFpbCwgY29udGVudHM6IGlkVG9rZW4gfSk7CiAgICB9KTsKICAgIC8qcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7CiAgICAgIGxldCBpID0gZ29vZ2xlSW5mbzsKICAgICAgIGxldCBkZWNvZGVkQ29udGVudCA9IGF0b2IoYXNzZXJ0aW9uKTsKICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTsKICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpLnRva2VuSW5mbyArIGNvbnRlbnQudG9rZW5JRCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHsKICAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHJlc3VsdCkgPT09IEpTT04uc3RyaW5naWZ5KGNvbnRlbnQudG9rZW5JREpTT04pKSB7CiAgICAgICAgICByZXNvbHZlKHtpZGVudGl0eTogY29udGVudC50b2tlbklESlNPTi5lbWFpbCwgY29udGVudHM6IGNvbnRlbnQudG9rZW5JREpTT059KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmVqZWN0KCdpbnZhbGlkJyk7CiAgICAgICAgfQogICAgICB9LCBmdW5jdGlvbihlcnIpIHsKICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgIH0pOwogICAgfSk7Ki8KICB9LAoKICAvKioKICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbgogICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uCiAgKgogICogQHBhcmFtICB7Y29udGVudHN9IFRoZSBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWQKICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb24KICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlcgogICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb24KICAqLwogIGdlbmVyYXRlQXNzZXJ0aW9uOiBmdW5jdGlvbiBnZW5lcmF0ZUFzc2VydGlvbihjb250ZW50cywgb3JpZ2luLCBoaW50KSB7CiAgICB2YXIgaSA9IGdvb2dsZUluZm87CgogICAgLy9zdGFydCB0aGUgbG9naW4gcGhhc2UKICAgIC8vVE9ETyBsYXRlciBzaG91bGQgYmUgZGVmaW5lZCBhIGJldHRlciBhcHByb2FjaAogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgaWYgKCFoaW50KSB7CiAgICAgICAgLyp0cnkgewogICAgICAgICAgaWYgKHdpbmRvdykgewogICAgICAgICAgICByZXNvbHZlKCd1cmwnKTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnJvcikgeyovCgogICAgICAgIHZhciByZXF1ZXN0VXJsID0gaS5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgKyAnc2NvcGU9JyArIGkuc2NvcGUgKyAnJmNsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZyZXNwb25zZV90eXBlPScgKyBpLnR5cGUgKyAnJnN0YXRlPScgKyBpLnN0YXRlICsgJyZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlICsgJyZub25jZT0nICsgY29udGVudHM7CgogICAgICAgIHJlamVjdCh7IG5hbWU6ICdJZFBMb2dpbkVycm9yJywgbG9naW5Vcmw6IHJlcXVlc3RVcmwgfSk7CgogICAgICAgIC8vICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gdGhlIHJlcXVlc3QgaGF2ZSBhbHJlYWR5IGJlZW4gbWFkZSwgc28gaWRwUFJveHkgd2lsbCBleGNoYW5nZSB0aGUgdG9rZW5zIGFsb25nIHRvIHRoZSBpZHAsIHRvIG9idGFpbiB0aGUgaW5mb3JtYXRpb24gbmVjZXNzYXJ5CiAgICAgICAgdmFyIGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTsKICAgICAgICB2YXIgaWRUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnaWRfdG9rZW4nKTsKICAgICAgICB2YXIgY29kZSA9IHVybFBhcnNlcihoaW50LCAnY29kZScpOwoKICAgICAgICBleGNoYW5nZUNvZGUoY29kZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKCiAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlcgogICAgICAgICAgdmFyIGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47CiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbiAoaW5mb1Rva2VuKSB7CgogICAgICAgICAgICB2YXIgaWRlbnRpdHlCdW5kbGUgPSB7IGFjY2Vzc1Rva2VuOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGlkVG9rZW46IHZhbHVlLmlkX3Rva2VuLCByZWZyZXNoVG9rZW46IHZhbHVlLnJlZnJlc2hfdG9rZW4sIHRva2VuVHlwZTogdmFsdWUudG9rZW5fdHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW4gfTsKCiAgICAgICAgICAgIHZhciBpZFRva2VuVVJMID0gaS50b2tlbkluZm8gKyB2YWx1ZS5pZF90b2tlbjsKCiAgICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIGlkVG9rZW4KICAgICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpZFRva2VuVVJMKS50aGVuKGZ1bmN0aW9uIChpZFRva2VuKSB7CgogICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjsKICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbi5leHA7CiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsOwoKICAgICAgICAgICAgICB2YXIgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7IHRva2VuSUQ6IHZhbHVlLmlkX3Rva2VuLCB0b2tlbklESlNPTjogaWRUb2tlbiB9KSk7CiAgICAgICAgICAgICAgdmFyIGlkcEJ1bmRsZSA9IHsgZG9tYWluOiAnZ29vZ2xlLmNvbScsIHByb3RvY29sOiAnT0lEQycgfTsKCiAgICAgICAgICAgICAgLy9UT0RPIGRlbGV0ZSBsYXRlciB0aGUgZmllbGQgaW5mb1Rva2VuLCBhbmQgZGVsZXRlIHRoZSBuZWVkIGluIHRoZSBleGFtcGxlCiAgICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0geyBhc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbiB9OwoKICAgICAgICAgICAgICBpZGVudGl0aWVzW25JZGVudGl0eV0gPSByZXR1cm5WYWx1ZTsKICAgICAgICAgICAgICArK25JZGVudGl0eTsKCiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7CgogICAgICAgICAgICAgIHJlamVjdChlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKCiAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7CgogICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH0KfTsKCi8qKgoqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWIKKi8KCnZhciBJZHBQcm94eVByb3RvU3R1YiA9IGZ1bmN0aW9uICgpIHsKCiAgLyoqCiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YgogICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgaWRwUHJveHkgcmVjZWl2ZWQKICAqCiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkwKICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvbgogICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uCiAgKi8KICBmdW5jdGlvbiBJZHBQcm94eVByb3RvU3R1YihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElkcFByb3h5UHJvdG9TdHViKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7CiAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzOwogICAgX3RoaXMuY29uZmlnID0gY29uZmlnOwoKICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgIGlmIChtc2cudG8gPT09ICdkb21haW4taWRwOi8vZ29vZ2xlLmNvbScpIHsKCiAgICAgICAgX3RoaXMucmVxdWVzdFRvSWRwKG1zZyk7CiAgICAgIH0KICAgIH0pOwogIH0KCiAgLyoqCiAgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uCiAgKgogICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1cwogICovCgoKICBfY3JlYXRlQ2xhc3MoSWRwUHJveHlQcm90b1N0dWIsIFt7CiAgICBrZXk6ICdyZXF1ZXN0VG9JZHAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RUb0lkcChtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtczsKCiAgICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7CiAgICAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOgogICAgICAgICAgSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICd2YWxpZGF0ZUFzc2VydGlvbic6CiAgICAgICAgICBJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvbihwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWQKICAgICoKICAgICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkCiAgICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZAogICAgKi8KCiAgfSwgewogICAga2V5OiAncmVwbHlNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLAogICAgICAgIGJvZHk6IHsgY29kZTogMjAwLCB2YWx1ZTogdmFsdWUgfSB9OwoKICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBJZHBQcm94eVByb3RvU3R1YjsKfSgpOwoKLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7CgovKioKICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuCiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTAogKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb24KICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uCiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViCiAqLwoKCmZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHsKICByZXR1cm4gewogICAgbmFtZTogJ0lkcFByb3h5UHJvdG9TdHViJywKICAgIGluc3RhbmNlOiBuZXcgSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZykKICB9Owp9Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKfSx7fV19LHt9LFsxXSkoMSkKfSk7",
      "sourceCodeClassname": "IdpProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": "5-ece5dff3-c750-4c40-df02-a9f732c1c6782",
    "type": "IDPProxys",
    "version": 0.2,
    "description": "Description of IdpProxyStub",
    "objectName": "IdpProxyStub",
    "configuration": {},
    "constraints": "",
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "slack.com": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "SlackProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-ece5dff3-c750-4c40-df02-a9f732c1c6783",
    "version": 0.4,
    "description": "Description of SlackProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": "",
    "interworking": true,
    "objectName": "SlackProxyStub",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  },
  "rethink-project.eu": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "IMSIWProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-ece5dff3-c750-4c40-df02-a9f732c1c6784",
    "version": 0.5,
    "description": "Description of IMSIWProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": "",
    "interworking": true,
    "objectName": "IMSIWProxyStub",
    "configuration": {},
    "messageSchemas": "",
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}
