{
  "IdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n\n/*\n\tSo that an application can use Google's OAuth 2.0 authentication system for user login,\n\tfirst is required to set up a project in the Google Developers Console to obtain OAuth 2.0 credentials and set a redirect URI.\n\tA test account was created to set the project in the Google Developers Console to obtain OAuth 2.0 credentials,\twith the following credentials:\n      \tusername: openidtest10@gmail.com\n        password: testOpenID10\n\tTo add more URI's, follow the steps:\n\t1º choose the project ( can be the My OpenID Project)\t from  https://console.developers.google.com/projectselector/apis/credentials using the credentials provided above.\n\t2º Open The Client Web 1 listed in OAuth 2.0 Client ID's\n\t3º Add the URI  in the authorized redirect URI section.\n  4º change the REDIRECT parameter bellow with the pretended URI\n */\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: location.protocol + '//' + location.hostname, //location.origin,\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code token id_token',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\n/**\n* Function to exchange the code received to the id Token, access token and a refresh token\n*\n*/\nvar exchangeCode = function exchangeCode(code) {\n  var i = googleInfo;\n\n  var URL = i.tokenEndpoint + 'code=' + code + '&client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' + i.redirectURI + '&grant_type=authorization_code&access_type=' + i.accessType;\n\n  //let URL = = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + code + '&grant_type=refresh_token';\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function (info) {\n      console.log('[IDPROXY.exchangeCode:info]', info);\n      resolve(info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar exchangeRefreshToken = function exchangeRefreshToken(refreshToken) {\n  var i = googleInfo;\n\n  var URL = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + refreshToken + '&grant_type=refresh_token';\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\n/**\n* Identity Provider Proxy\n*/\nvar IdpProxy = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.info('validateAssertionProxy');\n    console.info('validateAssertionProxy:atob(assertion)', atob(assertion));\n\n    //TODO check the values with the hash received\n    //  return new Promise(function(resolve,reject) {\n\n    var decodedContent2 = atob(assertion);\n    var content = JSON.parse(decodedContent2);\n    var idTokenSplited = content.tokenID.split('.');\n    var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n    //resolve({identity: idToken.email, contents: idToken.nonce});\n\n    //});\n\n    return new Promise(function (resolve, reject) {\n      var i = googleInfo;\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      sendHTTPRequest('GET', i.tokenInfo + content.tokenID).then(function (result) {\n        if (JSON.stringify(result) === JSON.stringify(content.tokenIDJSON)) {\n          resolve({ identity: content.tokenIDJSON.email, contents: content.tokenIDJSON });\n        } else {\n          reject('invalid');\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n\n  refreshAssertion: function refreshAssertion(identity) {\n    //console.log('PROXY:refreshAssertion:oldIdentity', identity);\n    var i = googleInfo;\n\n    return new Promise(function (resolve, reject) {\n      if (identity.info.refreshToken) {\n        exchangeRefreshToken(identity.info.refreshToken).then(function (value) {\n          var infoTokenURL = i.userinfo + value.access_token;\n          sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n\n            var identityBundle = { accessToken: value.access_token, idToken: value.id_token, refreshToken: identity.info.refreshToken, tokenType: identity.info.tokenType, infoToken: infoToken };\n            var idTokenURL = i.tokenInfo + value.id_token;\n\n            //obtain information about the user idToken\n            sendHTTPRequest('GET', idTokenURL).then(function (idToken) {\n\n              identityBundle.tokenIDJSON = idToken;\n              identityBundle.expires = idToken.exp;\n              identityBundle.email = idToken.email;\n\n              var oldIDToken = JSON.parse(atob(identity.assertion));\n              var oldIdTokenSplited = oldIDToken.tokenID.split('.');\n              var oldDecodedIDToken = JSON.parse(atob(oldIdTokenSplited[1]));\n              var idNonce = oldDecodedIDToken.nonce;\n\n              var receivedIDToken = value.id_token;\n              var idTokenSplited = receivedIDToken.split('.');\n              var decodedIDToken = JSON.parse(atob(idTokenSplited[1]));\n\n              decodedIDToken.nonce = idNonce;\n              var insertedNonce = btoa(JSON.stringify(decodedIDToken));\n              var newIDToken = idTokenSplited[0] + '.' + insertedNonce + '.' + idTokenSplited[2];\n\n              var assertion = btoa(JSON.stringify({ tokenID: newIDToken, tokenIDJSON: idToken }));\n              var idpBundle = { domain: 'google.com', protocol: 'OIDC' };\n\n              //TODO delete later the field infoToken, and delete the need in the example\n              var returnValue = { assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken };\n              //console.log('PROXY:refreshAssertion:newIdentity', returnValue);\n              resolve(returnValue);\n            });\n          });\n        });\n      }\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertion:contents]', contents);\n    console.log('[IDPROXY.generateAssertion:origin]', origin);\n    console.log('[IDPROXY.generateAssertion:hint]', hint);\n    var i = googleInfo;\n\n    //start the login phase\n    //TODO later should be defined a better approach\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n        /*try {\n          if (window) {\n            resolve('url');\n          }\n        } catch (error) {*/\n\n        console.log('GOOGLE_PROXY_NO_HINT: ', requestUrl);\n\n        var requestUrl = i.authorisationEndpoint + 'scope=' + i.scope + '&client_id=' + i.clientID + '&redirect_uri=' + i.redirectURI + '&response_type=code' + /*i.type +*/'&state=' + i.state + '&prompt=consent&access_type=' + i.accessType + '&nonce=' + contents;\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n\n        //  }\n      } else {\n        // the request have already been made, so idpPRoxy will exchange the tokens along to the idp, to obtain the information necessary\n        var accessToken = urlParser(hint, 'access_token');\n        var idToken = urlParser(hint, 'id_token');\n        var code = urlParser(hint, 'code');\n\n        console.log('GOOGLE_PROXY_HINT: ', hint);\n\n        exchangeCode(code).then(function (value) {\n\n          //obtain information about the user\n          var infoTokenURL = i.userinfo + value.access_token;\n          sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n\n            var identityBundle = { accessToken: value.access_token, idToken: value.id_token, refreshToken: value.refresh_token, tokenType: value.token_type, infoToken: infoToken };\n\n            var idTokenURL = i.tokenInfo + value.id_token;\n\n            //obtain information about the user idToken\n            sendHTTPRequest('GET', idTokenURL).then(function (idToken) {\n\n              identityBundle.tokenIDJSON = idToken;\n              identityBundle.expires = idToken.exp;\n              identityBundle.email = idToken.email;\n\n              var assertion = btoa(JSON.stringify({ tokenID: value.id_token, tokenIDJSON: idToken }));\n              var idpBundle = { domain: 'google.com', protocol: 'OIDC' };\n\n              //TODO delete later the field infoToken, and delete the need in the example\n              var returnValue = { assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken };\n\n              identities[nIdentity] = returnValue;\n              ++nIdentity;\n\n              console.log('[IDPROXY.generateAssertion:returnValue]', JSON.stringify(returnValue));\n\n              resolve(returnValue);\n            }, function (e) {\n\n              reject(e);\n            });\n          }, function (error) {\n\n            reject(error);\n          });\n        }, function (err) {\n\n          reject(err);\n        });\n      }\n    });\n  }\n};\n\n/**\n* Identity Provider Proxy Protocol Stub\n*/\n\nvar IdpProxyProtoStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function IdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, IdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    console.log('Google->Google constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === 'domain-idp://google.com') {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(IdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          console.info('generateAssertion');\n          IdpProxy.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          console.info('validateAssertion');\n          IdpProxy.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return IdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'IdpProxyProtoStub',\n    instance: new IdpProxyProtoStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9JZHBQcm94eVN0dWIuaWRwLmpzPzE0YmIiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJpZGVudGl0aWVzIiwibklkZW50aXR5IiwiZ29vZ2xlSW5mbyIsImNsaWVudFNlY3JldCIsImNsaWVudElEIiwicmVkaXJlY3RVUkkiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJpc3N1ZXIiLCJ0b2tlbkVuZHBvaW50Iiwiandrc1VyaSIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsInVzZXJpbmZvIiwidG9rZW5JbmZvIiwiYWNjZXNzVHlwZSIsInR5cGUiLCJzY29wZSIsInN0YXRlIiwidXJsUGFyc2VyIiwidXJsIiwibmFtZSIsInJlcGxhY2UiLCJyZWdleFMiLCJyZWdleCIsIlJlZ0V4cCIsInJlc3VsdHMiLCJleGVjIiwic2VuZEhUVFBSZXF1ZXN0IiwibWV0aG9kIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImUiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiaW5mbyIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJleGNoYW5nZUNvZGUiLCJjb2RlIiwiaSIsIlVSTCIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJleGNoYW5nZVJlZnJlc2hUb2tlbiIsInJlZnJlc2hUb2tlbiIsIklkcFByb3h5IiwidmFsaWRhdGVBc3NlcnRpb24iLCJhc3NlcnRpb24iLCJvcmlnaW4iLCJhdG9iIiwiZGVjb2RlZENvbnRlbnQyIiwiY29udGVudCIsImlkVG9rZW5TcGxpdGVkIiwidG9rZW5JRCIsInNwbGl0IiwiaWRUb2tlbiIsImRlY29kZWRDb250ZW50Iiwic3RyaW5naWZ5IiwicmVzdWx0IiwidG9rZW5JREpTT04iLCJpZGVudGl0eSIsImVtYWlsIiwiY29udGVudHMiLCJjYXRjaCIsImVyciIsInJlZnJlc2hBc3NlcnRpb24iLCJ2YWx1ZSIsImluZm9Ub2tlblVSTCIsImFjY2Vzc190b2tlbiIsImluZm9Ub2tlbiIsImlkZW50aXR5QnVuZGxlIiwiYWNjZXNzVG9rZW4iLCJpZF90b2tlbiIsInRva2VuVHlwZSIsImlkVG9rZW5VUkwiLCJleHBpcmVzIiwiZXhwIiwib2xkSURUb2tlbiIsIm9sZElkVG9rZW5TcGxpdGVkIiwib2xkRGVjb2RlZElEVG9rZW4iLCJpZE5vbmNlIiwibm9uY2UiLCJyZWNlaXZlZElEVG9rZW4iLCJkZWNvZGVkSURUb2tlbiIsImluc2VydGVkTm9uY2UiLCJidG9hIiwibmV3SURUb2tlbiIsImlkcEJ1bmRsZSIsImRvbWFpbiIsInJldHVyblZhbHVlIiwiaWRwIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwicmVxdWVzdFVybCIsImxvZ2luVXJsIiwicmVmcmVzaF90b2tlbiIsInRva2VuX3R5cGUiLCJJZHBQcm94eVByb3RvU3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJfdGhpcyIsIm1lc3NhZ2VCdXMiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJwYXJhbXMiLCJib2R5IiwidXNlcm5hbWVIaW50IiwicmVwbHlNZXNzYWdlIiwibWVzc2FnZSIsImlkIiwiZnJvbSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkE2WndCQSxROzs7O0FBN1p4QixJQUFJQyxhQUFhLEVBQWpCO0FBQ0EsSUFBSUMsWUFBWSxDQUFoQjs7QUFFQTs7Ozs7Ozs7Ozs7OztBQWFBLElBQUlDLGFBQWE7QUFDZkMsZ0JBQXVCLDBCQURSO0FBRWZDLFlBQXVCLDBFQUZSO0FBR2ZDLGVBQXVCQyxTQUFTQyxRQUFULEdBQW9CLElB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O0FBR1JPLFlBQUlKLE1BQU1ILG1CQUFOLEdBQTRCLFNBSHhCO0FBSVJXLGNBQU07QUFDSjNDLGlCQUFPQTtBQURIO0FBSkUsT0FBVjs7QUFTQSxVQUFJa0QsTUFBSixFQUFZO0FBQ1ZaLFlBQUlLLElBQUosQ0FBU1MsSUFBVCxHQUFnQkYsTUFBaEI7QUFDRDs7QUFFRGYsWUFBTUMsVUFBTixDQUFpQmEsV0FBakIsQ0FBNkJYLEdBQTdCO0FBQ0Q7Ozs7OztBQUdIOztBQUVBOzs7Ozs7Ozs7QUFPZSxTQUFTcEgsUUFBVCxDQUFrQnFCLEdBQWxCLEVBQXVCMEYsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTDFGLFVBQU0sbUJBREQ7QUFFTDZHLGNBQVUsSUFBSXRCLGlCQUFKLENBQXNCeEYsR0FBdEIsRUFBMkIwRixHQUEzQixFQUFnQ0MsTUFBaEM7QUFGTCxHQUFQO0FBSUQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBpZGVudGl0aWVzID0ge307XG5sZXQgbklkZW50aXR5ID0gMDtcblxuLypcblx0U28gdGhhdCBhbiBhcHBsaWNhdGlvbiBjYW4gdXNlIEdvb2dsZSdzIE9BdXRoIDIuMCBhdXRoZW50aWNhdGlvbiBzeXN0ZW0gZm9yIHVzZXIgbG9naW4sXG5cdGZpcnN0IGlzIHJlcXVpcmVkIHRvIHNldCB1cCBhIHByb2plY3QgaW4gdGhlIEdvb2dsZSBEZXZlbG9wZXJzIENvbnNvbGUgdG8gb2J0YWluIE9BdXRoIDIuMCBjcmVkZW50aWFscyBhbmQgc2V0IGEgcmVkaXJlY3QgVVJJLlxuXHRBIHRlc3QgYWNjb3VudCB3YXMgY3JlYXRlZCB0byBzZXQgdGhlIHByb2plY3QgaW4gdGhlIEdvb2dsZSBEZXZlbG9wZXJzIENvbnNvbGUgdG8gb2J0YWluIE9BdXRoIDIuMCBjcmVkZW50aWFscyxcdHdpdGggdGhlIGZvbGxvd2luZyBjcmVkZW50aWFsczpcbiAgICAgIFx0dXNlcm5hbWU6IG9wZW5pZHRlc3QxMEBnbWFpbC5jb21cbiAgICAgICAgcGFzc3dvcmQ6IHRlc3RPcGVuSUQxMFxuXHRUbyBhZGQgbW9yZSBVUkkncywgZm9sbG93IHRoZSBzdGVwczpcblx0McK6IGNob29zZSB0aGUgcHJvamVjdCAoIGNhbiBiZSB0aGUgTXkgT3BlbklEIFByb2plY3QpXHQgZnJvbSAgaHR0cHM6Ly9jb25zb2xlLmRldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm9qZWN0c2VsZWN0b3IvYXBpcy9jcmVkZW50aWFscyB1c2luZyB0aGUgY3JlZGVudGlhbHMgcHJvdmlkZWQgYWJvdmUuXG5cdDLCuiBPcGVuIFRoZSBDbGllbnQgV2ViIDEgbGlzdGVkIGluIE9BdXRoIDIuMCBDbGllbnQgSUQnc1xuXHQzwrogQWRkIHRoZSBVUkkgIGluIHRoZSBhdXRob3JpemVkIHJlZGlyZWN0IFVSSSBzZWN0aW9uLlxuICA0wrogY2hhbmdlIHRoZSBSRURJUkVDVCBwYXJhbWV0ZXIgYmVsbG93IHdpdGggdGhlIHByZXRlbmRlZCBVUklcbiAqL1xuXG5sZXQgZ29vZ2xlSW5mbyA9IHtcbiAgY2xpZW50U2VjcmV0OiAgICAgICAgICAnWHg0ckt1Y2I1WllUYVhsY1pYOUhMZlpXJyxcbiAgY2xpZW50SUQ6ICAgICAgICAgICAgICAnODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSwgLy9sb2NhdGlvbi5vcmlnaW4sXG4gIGlzc3VlcjogICAgICAgICAgICAgICAgJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsXG4gIHRva2VuRW5kcG9pbnQ6ICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8nLFxuICBqd2tzVXJpOiAgICAgICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvY2VydHM/JyxcbiAgYXV0aG9yaXNhdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGg/JyxcbiAgdXNlcmluZm86ICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nLFxuICB0b2tlbkluZm86ICAgICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW5pbmZvP2lkX3Rva2VuPScsXG4gIGFjY2Vzc1R5cGU6ICAgICAgICAgICAgJ29mZmxpbmUnLFxuICB0eXBlOiAgICAgICAgICAgICAgICAgICdjb2RlIHRva2VuIGlkX3Rva2VuJyxcbiAgc2NvcGU6ICAgICAgICAgICAgICAgICAnb3BlbmlkJTIwZW1haWwlMjBwcm9maWxlJyxcbiAgc3RhdGU6ICAgICAgICAgICAgICAgICAnc3RhdGUnXG59O1xuXG4vL2Z1bmN0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIFVSTCB0byBvYmF0aW4gY2VydGFpbiB2YWx1ZXNcbmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxcXF0nKTtcbiAgbGV0IHJlZ2V4UyA9ICdbXFxcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknO1xuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4Uyk7XG4gIGxldCByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xuICBpZiAocmVzdWx0cyA9PT0gbnVsbClcbiAgcmV0dXJuICcnO1xuICBlbHNlXG4gIHJldHVybiByZXN1bHRzWzFdO1xufVxuXG5mdW5jdGlvbiBzZW5kSFRUUFJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPSAndW5kZWZpbmVkJykge1xuICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuXG4gICAgLy8gWERvbWFpblJlcXVlc3Qgb25seSBleGlzdHMgaW4gSUUsIGFuZCBpcyBJRSdzIHdheSBvZiBtYWtpbmcgQ09SUyByZXF1ZXN0cy5cbiAgICB4aHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBDT1JTIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG4gICAgeGhyID0gbnVsbDtcbiAgfVxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcbiAgICBpZiAoeGhyKSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICBsZXQgaW5mbyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICByZXNvbHZlKGluZm8pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgICAgICByZWplY3QoJ1RoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSB0b2tlbicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4qIEZ1bmN0aW9uIHRvIGV4Y2hhbmdlIHRoZSBjb2RlIHJlY2VpdmVkIHRvIHRoZSBpZCBUb2tlbiwgYWNjZXNzIHRva2VuIGFuZCBhIHJlZnJlc2ggdG9rZW5cbipcbiovXG5sZXQgZXhjaGFuZ2VDb2RlID0gKGZ1bmN0aW9uKGNvZGUpIHtcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gIGxldCBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY29kZT0nICsgY29kZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZncmFudF90eXBlPWF1dGhvcml6YXRpb25fY29kZSZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlO1xuXG4gIC8vbGV0IFVSTCA9ID0gaS50b2tlbkVuZHBvaW50ICsgJ2NsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZnJlc2hfdG9rZW49JyArIGNvZGUgKyAnJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlbic7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZXhjaGFuZ2VDb2RlOmluZm9dJywgaW5mbyk7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cbmxldCBleGNoYW5nZVJlZnJlc2hUb2tlbiA9IChmdW5jdGlvbihyZWZyZXNoVG9rZW4pIHtcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gIGxldCBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVmcmVzaF90b2tlbj0nICsgcmVmcmVzaFRva2VuICsgJyZncmFudF90eXBlPXJlZnJlc2hfdG9rZW4nO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24oaW5mbykge1xuICAgICAgcmVzb2x2ZShpbmZvKTtcbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcblxuICB9KTtcbn0pO1xuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHlcbiovXG5sZXQgSWRwUHJveHkgPSB7XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcbiAgICBjb25zb2xlLmluZm8oJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHknKVxuICAgIGNvbnNvbGUuaW5mbygndmFsaWRhdGVBc3NlcnRpb25Qcm94eTphdG9iKGFzc2VydGlvbiknLCBhdG9iKGFzc2VydGlvbikpO1xuXG4gICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZFxuICAvLyAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIGxldCBkZWNvZGVkQ29udGVudDIgPSBhdG9iKGFzc2VydGlvbik7XG4gICAgICBsZXQgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQyKTtcbiAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IGNvbnRlbnQudG9rZW5JRC5zcGxpdCgnLicpO1xuICAgICAgbGV0IGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcblxuICAgICAgLy9yZXNvbHZlKHtpZGVudGl0eTogaWRUb2tlbi5lbWFpbCwgY29udGVudHM6IGlkVG9rZW4ubm9uY2V9KTtcblxuICAgIC8vfSk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcbiAgICAgIGxldCBpID0gZ29vZ2xlSW5mbztcbiAgICAgIGxldCBkZWNvZGVkQ29udGVudCA9IGF0b2IoYXNzZXJ0aW9uKTtcbiAgICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7XG4gICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGkudG9rZW5JbmZvICsgY29udGVudC50b2tlbklEKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShyZXN1bHQpID09PSBKU09OLnN0cmluZ2lmeShjb250ZW50LnRva2VuSURKU09OKSkge1xuICAgICAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBjb250ZW50LnRva2VuSURKU09OLmVtYWlsLCBjb250ZW50czogY29udGVudC50b2tlbklESlNPTn0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuXG4gIHJlZnJlc2hBc3NlcnRpb246IChpZGVudGl0eSkgPT4ge1xuICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246b2xkSWRlbnRpdHknLCBpZGVudGl0eSk7XG4gICAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKGlkZW50aXR5LmluZm8ucmVmcmVzaFRva2VuKSB7XG4gICAgICAgIGV4Y2hhbmdlUmVmcmVzaFRva2VuKGlkZW50aXR5LmluZm8ucmVmcmVzaFRva2VuKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaW5mb1Rva2VuKSB7XG5cbiAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiBpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbiwgdG9rZW5UeXBlOiBpZGVudGl0eS5pbmZvLnRva2VuVHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuO1xuXG4gICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaWRUb2tlbikge1xuXG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjtcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZXhwaXJlcyA9IGlkVG9rZW4uZXhwO1xuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5lbWFpbCA9IGlkVG9rZW4uZW1haWw7XG5cbiAgICAgICAgICAgICAgbGV0IG9sZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRlbnRpdHkuYXNzZXJ0aW9uKSk7XG4gICAgICAgICAgICAgIGxldCBvbGRJZFRva2VuU3BsaXRlZCA9IG9sZElEVG9rZW4udG9rZW5JRC5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICBsZXQgb2xkRGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2Iob2xkSWRUb2tlblNwbGl0ZWRbMV0pKTtcbiAgICAgICAgICAgICAgbGV0IGlkTm9uY2UgPSBvbGREZWNvZGVkSURUb2tlbi5ub25jZTtcblxuICAgICAgICAgICAgICBsZXQgcmVjZWl2ZWRJRFRva2VuID0gdmFsdWUuaWRfdG9rZW47XG4gICAgICAgICAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IHJlY2VpdmVkSURUb2tlbi5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICBsZXQgZGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcblxuICAgICAgICAgICAgICBkZWNvZGVkSURUb2tlbi5ub25jZSA9IGlkTm9uY2U7XG4gICAgICAgICAgICAgIGxldCBpbnNlcnRlZE5vbmNlID0gYnRvYShKU09OLnN0cmluZ2lmeShkZWNvZGVkSURUb2tlbikpO1xuICAgICAgICAgICAgICBsZXQgbmV3SURUb2tlbiA9IGlkVG9rZW5TcGxpdGVkWzBdICsgJy4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGVkTm9uY2UgKyAnLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRUb2tlblNwbGl0ZWRbMl07XG5cbiAgICAgICAgICAgICAgbGV0IGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3Rva2VuSUQ6IG5ld0lEVG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VufSkpO1xuICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ2dvb2dsZS5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcblxuICAgICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgICAgICAgICAgbGV0IHJldHVyblZhbHVlID0ge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpuZXdJZGVudGl0eScsIHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246aGludF0nLCBoaW50KTtcbiAgICBsZXQgaSA9IGdvb2dsZUluZm87XG5cbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIC8vVE9ETyBsYXRlciBzaG91bGQgYmUgZGVmaW5lZCBhIGJldHRlciBhcHByb2FjaFxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmICghaGludCkge1xuICAgICAgICAvKnRyeSB7XG4gICAgICAgICAgaWYgKHdpbmRvdykge1xuICAgICAgICAgICAgcmVzb2x2ZSgndXJsJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikgeyovXG5cbiAgICAgICAgY29uc29sZS5sb2coJ0dPT0dMRV9QUk9YWV9OT19ISU5UOiAnLCByZXF1ZXN0VXJsKTtcblxuICAgICAgICBsZXQgcmVxdWVzdFVybCA9IGkuYXV0aG9yaXNhdGlvbkVuZHBvaW50ICsgJ3Njb3BlPScgKyBpLnNjb3BlICsgJyZjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJnJlZGlyZWN0X3VyaT0nICsgaS5yZWRpcmVjdFVSSSArICcmcmVzcG9uc2VfdHlwZT1jb2RlJyArIC8qaS50eXBlICsqLyAnJnN0YXRlPScgKyBpLnN0YXRlICsgJyZwcm9tcHQ9Y29uc2VudCZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlICsgJyZub25jZT0nICsgY29udGVudHM7XG4gICAgICAgIHJlamVjdCh7bmFtZTogJ0lkUExvZ2luRXJyb3InLCBsb2dpblVybDogcmVxdWVzdFVybH0pO1xuXG4gICAgICAvLyAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGUgcmVxdWVzdCBoYXZlIGFscmVhZHkgYmVlbiBtYWRlLCBzbyBpZHBQUm94eSB3aWxsIGV4Y2hhbmdlIHRoZSB0b2tlbnMgYWxvbmcgdG8gdGhlIGlkcCwgdG8gb2J0YWluIHRoZSBpbmZvcm1hdGlvbiBuZWNlc3NhcnlcbiAgICAgICAgbGV0IGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTtcbiAgICAgICAgbGV0IGlkVG9rZW4gPSB1cmxQYXJzZXIoaGludCwgJ2lkX3Rva2VuJyk7XG4gICAgICAgIGxldCBjb2RlID0gdXJsUGFyc2VyKGhpbnQsICdjb2RlJyk7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0dPT0dMRV9QUk9YWV9ISU5UOiAnLCBoaW50KTtcblxuICAgICAgICBleGNoYW5nZUNvZGUoY29kZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXJcbiAgICAgICAgICBsZXQgaW5mb1Rva2VuVVJMID0gaS51c2VyaW5mbyArIHZhbHVlLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcblxuICAgICAgICAgICAgbGV0IGlkZW50aXR5QnVuZGxlID0ge2FjY2Vzc1Rva2VuOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGlkVG9rZW46IHZhbHVlLmlkX3Rva2VuLCByZWZyZXNoVG9rZW46IHZhbHVlLnJlZnJlc2hfdG9rZW4sIHRva2VuVHlwZTogdmFsdWUudG9rZW5fdHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuXG4gICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XG5cbiAgICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIGlkVG9rZW5cbiAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XG5cbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUudG9rZW5JREpTT04gPSBpZFRva2VuO1xuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbi5leHA7XG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmVtYWlsID0gaWRUb2tlbi5lbWFpbDtcblxuICAgICAgICAgICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogdmFsdWUuaWRfdG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VufSkpO1xuICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ2dvb2dsZS5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcblxuICAgICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgICAgICAgICAgbGV0IHJldHVyblZhbHVlID0ge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcblxuICAgICAgICAgICAgICBpZGVudGl0aWVzW25JZGVudGl0eV0gPSByZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgICAgKytuSWRlbnRpdHk7XG5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uOnJldHVyblZhbHVlXScsIEpTT04uc3RyaW5naWZ5KHJldHVyblZhbHVlKSk7XG5cbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlKSB7XG5cbiAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcblxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG5cbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiovXG5jbGFzcyBJZHBQcm94eVByb3RvU3R1YiB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcbiAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7XG4gICBfdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgIGNvbnNvbGUubG9nKCdHb29nbGUtPkdvb2dsZSBjb25zdHJ1Y3RvcicpO1xuXG4gICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7XG4gICAgIGlmIChtc2cudG8gPT09ICdkb21haW4taWRwOi8vZ29vZ2xlLmNvbScpIHtcblxuICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xuICAgICB9XG4gICB9KTtcbiAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cbiAgKlxuICAqIEBwYXJhbSB7bWVzc2FnZX0gIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2VCdXNcbiAgKi9cbiAgcmVxdWVzdFRvSWRwKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcbiAgICAvL2NvbnNvbGUuaW5mbygncmVxdWVzdFRvSWRwOicsIG1zZy5ib2R5Lm1ldGhvZCk7XG5cbiAgICBzd2l0Y2ggKG1zZy5ib2R5Lm1ldGhvZCkge1xuICAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOlxuICAgICAgICBjb25zb2xlLmluZm8oJ2dlbmVyYXRlQXNzZXJ0aW9uJyk7XG4gICAgICAgIElkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuICAgICAgICBjb25zb2xlLmluZm8oJ3ZhbGlkYXRlQXNzZXJ0aW9uJyk7XG4gICAgICAgIElkcFByb3h5LnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3JlZnJlc2hBc3NlcnRpb24nOlxuICAgICAgICBjb25zb2xlLmluZm8oJ3JlZnJlc2hBc3NlcnRpb24nKTtcbiAgICAgICAgSWRwUHJveHkucmVmcmVzaEFzc2VydGlvbihwYXJhbXMuaWRlbnRpdHkpLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKlxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxuICAqL1xuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50byxcbiAgICAgICAgICAgICAgICAgICBib2R5OiB7Y29kZTogMjAwLCB2YWx1ZTogdmFsdWV9fTtcblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cblxuICBfc2VuZFN0YXR1cyh2YWx1ZSwgcmVhc29uKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuc2VuZFN0YXR1c10gJywgdmFsdWUpO1xuXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICBsZXQgbXNnID0ge1xuICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVhc29uKSB7XG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuICAgIH1cblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgfVxufVxuXG4vLyBleHBvcnQgZGVmYXVsdCBJZHBQcm94eVByb3RvU3R1YjtcblxuLyoqXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnSWRwUHJveHlQcm90b1N0dWInLFxuICAgIGluc3RhbmNlOiBuZXcgSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZylcbiAgfTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL0lkcFByb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "2.00",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5b1a3f36f7f0e18c87091ca1e915ce795",
    "constraints": {
      "browser": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar domain = 'rethink-project.eu';\n\n/**\n * Identity Provider Proxy Protocol Stub\n */\n\nvar IMSIWProxyStub = function () {\n\n\t/**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n\tfunction IMSIWProxyStub(runtimeProtoStubURL, bus, config) {\n\t\tvar _this2 = this;\n\n\t\t_classCallCheck(this, IMSIWProxyStub);\n\n\t\tthis.runtimeProtoStubURL = runtimeProtoStubURL;\n\t\tthis.messageBus = bus;\n\t\tthis.config = config;\n\n\t\tthis.messageBus.addListener('*', function (msg) {\n\t\t\t//TODO add the respective listener\n\t\t\tif (msg.to === 'domain-idp://' + domain) {\n\t\t\t\t_this2.requestToIdp(msg);\n\t\t\t}\n\t\t});\n\n\t\tthis._sendStatus('created');\n\t}\n\n\t_createClass(IMSIWProxyStub, [{\n\t\tkey: '_sendStatus',\n\t\tvalue: function _sendStatus(value, reason) {\n\t\t\tvar _this = this;\n\n\t\t\tconsole.log('[Slack Idp Proxy status changed] to ', value);\n\n\t\t\t_this._state = value;\n\n\t\t\tvar msg = {\n\t\t\t\ttype: 'update',\n\t\t\t\tfrom: _this.runtimeProtoStubURL,\n\t\t\t\tto: _this.runtimeProtoStubURL + '/status',\n\t\t\t\tbody: {\n\t\t\t\t\tvalue: value\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (reason) {\n\t\t\t\tmsg.body.desc = reason;\n\t\t\t}\n\n\t\t\t_this.messageBus.postMessage(msg);\n\t\t}\n\n\t\t/**\n   * Function that see the intended method in the message received and call the respective function\n   *\n   * @param {message}  message received in the messageBus\n   */\n\n\t}, {\n\t\tkey: 'requestToIdp',\n\t\tvalue: function requestToIdp(msg) {\n\t\t\tvar _this3 = this;\n\n\t\t\tvar params = msg.body.params;\n\n\t\t\tswitch (msg.body.method) {\n\t\t\t\tcase 'generateAssertion':\n\t\t\t\t\tthis.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n\t\t\t\t\t\treturn _this3.replyMessage(msg, value);\n\t\t\t\t\t}).catch(function (error) {\n\t\t\t\t\t\treturn _this3.replyMessage(msg, error);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'validateAssertion':\n\t\t\t\t\tthis.replyMessage(msg, { identity: 'identity@idp.com', contents: 'content' });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'generateAssertion',\n\t\tvalue: function generateAssertion(contents, origin, hint) {\n\t\t\tvar _this4 = this;\n\n\t\t\tconsole.log('contents->', contents);\n\t\t\tconsole.log('origin->', origin);\n\t\t\tconsole.log('hint->', hint);\n\n\t\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\t\t//the hint field contains the information obtained after the user authentication\n\t\t\t\t// if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n\t\t\t\tif (!hint) {\n\t\t\t\t\tvar requestUrl = 'https://accounts.google.com/o/oauth2/v2/auth?scope=email%20profile&state=%2Fprofile&redirect_uri=' + location.protocol + '//' + location.hostname + '&response_type=token&client_id=808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com';\n\t\t\t\t\tconsole.log('first url ', requestUrl, 'done');\n\t\t\t\t\treject({ name: 'IdPLoginError', loginUrl: requestUrl });\n\t\t\t\t} else {\n\t\t\t\t\tvar accessToken = _this4._urlParser(hint, 'access_token');\n\t\t\t\t\tvar expires = Math.floor(Date.now() / 1000) + _this4._urlParser(hint, 'expires_in');\n\t\t\t\t\tfetch('https://www.googleapis.com/oauth2/v1/userinfo?access_token=' + accessToken).then(function (res_user) {\n\t\t\t\t\t\treturn res_user.json();\n\t\t\t\t\t}).then(function (body) {\n\t\t\t\t\t\tvar infoToken = { picture: body.picture, email: body.email, family_name: body.family_name, given_name: body.given_name };\n\t\t\t\t\t\tvar assertion = btoa(JSON.stringify({ tokenID: accessToken, email: body.email, id: body.id }));\n\t\t\t\t\t\tvar toResolve = { info: { expires: expires }, assertion: assertion, idp: { domain: domain, protocol: 'OAuth 2.0' }, infoToken: infoToken, interworking: { access_token: accessToken, domain: domain } };\n\t\t\t\t\t\tconsole.log('RESOLVING THIS OBJECT', toResolve);\n\t\t\t\t\t\tresolve(toResolve);\n\t\t\t\t\t}).catch(reject);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: '_urlParser',\n\t\tvalue: function _urlParser(url, name) {\n\t\t\tname = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n\t\t\tvar regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n\t\t\tvar regex = new RegExp(regexS);\n\t\t\tvar results = regex.exec(url);\n\t\t\tif (results === null) return '';else return results[1];\n\t\t}\n\n\t\t/**\n   * This function receives a message and a value. It replies the value to the sender of the message received\n   *\n   * @param  {message}   message received\n   * @param  {value}     value to include in the new message to send\n   */\n\n\t}, {\n\t\tkey: 'replyMessage',\n\t\tvalue: function replyMessage(msg, value) {\n\t\t\tvar message = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { code: 200, value: value } };\n\n\t\t\tthis.messageBus.postMessage(message);\n\t\t}\n\t}]);\n\n\treturn IMSIWProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n\treturn {\n\t\tname: 'IMSIWProxyStub',\n\t\tinstance: new IMSIWProxyStub(url, bus, config)\n\t};\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NpcC5yZXRoaW5rLXByb2plY3QuZXUvSU1TSVdQcm94eVN0dWIuaWRwLmpzPzBlNTIiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJkb21haW4iLCJJTVNJV1Byb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJtZXNzYWdlQnVzIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwidmFsdWUiLCJyZWFzb24iLCJfdGhpcyIsImNvbnNvbGUiLCJsb2ciLCJfc3RhdGUiLCJ0eXBlIiwiZnJvbSIsImJvZHkiLCJkZXNjIiwicG9zdE1lc3NhZ2UiLCJwYXJhbXMiLCJtZXRob2QiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImNvbnRlbnRzIiwib3JpZ2luIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInJlcGx5TWVzc2FnZSIsImNhdGNoIiwiZXJyb3IiLCJpZGVudGl0eSIsImhpbnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3RVcmwiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJuYW1lIiwibG9naW5VcmwiLCJhY2Nlc3NUb2tlbiIsIl91cmxQYXJzZXIiLCJleHBpcmVzIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsImZldGNoIiwicmVzX3VzZXIiLCJqc29uIiwiaW5mb1Rva2VuIiwicGljdHVyZSIsImVtYWlsIiwiZmFtaWx5X25hbWUiLCJnaXZlbl9uYW1lIiwiYXNzZXJ0aW9uIiwiYnRvYSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b2tlbklEIiwiaWQiLCJ0b1Jlc29sdmUiLCJpbmZvIiwiaWRwIiwiaW50ZXJ3b3JraW5nIiwiYWNjZXNzX3Rva2VuIiwidXJsIiwicmVwbGFjZSIsInJlZ2V4UyIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJt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WUFBWTlCLElBQVosR0FBbUIsV0FBaEM7QUFDQSxPQUFJK0IsUUFBUSxJQUFJQyxNQUFKLENBQVdGLE1BQVgsQ0FBWjtBQUNBLE9BQUlHLFVBQVVGLE1BQU1HLElBQU4sQ0FBV04sR0FBWCxDQUFkO0FBQ0EsT0FBSUssWUFBWSxJQUFoQixFQUNDLE9BQU8sRUFBUCxDQURELEtBR0MsT0FBT0EsUUFBUSxDQUFSLENBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7OytCQU1hbkUsRyxFQUFLSSxLLEVBQU87QUFDeEIsT0FBSWlFLFVBQVUsRUFBQ2IsSUFBSXhELElBQUl3RCxFQUFULEVBQWE5QyxNQUFNLFVBQW5CLEVBQStCVCxJQUFJRCxJQUFJVyxJQUF2QyxFQUE2Q0EsTUFBTVgsSUFBSUMsRUFBdkQsRUFBMkRXLE1BQU0sRUFBQzBELE1BQU0sR0FBUCxFQUFZbEUsT0FBT0EsS0FBbkIsRUFBakUsRUFBZDs7QUFFQSxRQUFLTixVQUFMLENBQWdCZ0IsV0FBaEIsQ0FBNEJ1RCxPQUE1QjtBQUNBOzs7Ozs7QUFHRjs7Ozs7Ozs7O0FBT2UsU0FBUzdFLFFBQVQsQ0FBa0JzRSxHQUFsQixFQUF1QmxFLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNsRCxRQUFPO0FBQ05xQyxRQUFNLGdCQURBO0FBRU5xQyxZQUFVLElBQUk3RSxjQUFKLENBQW1Cb0UsR0FBbkIsRUFBd0JsRSxHQUF4QixFQUE2QkMsTUFBN0I7QUFGSixFQUFQO0FBSUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBkb21haW4gPSAncmV0aGluay1wcm9qZWN0LmV1J1xuXG4vKipcbiAqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiAqL1xuY2xhc3MgSU1TSVdQcm94eVN0dWIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuXHQgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxuXHQgKlxuXHQgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcblx0ICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG5cdCAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuXHQgKi9cblx0Y29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcblx0XHR0aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMXG5cdFx0dGhpcy5tZXNzYWdlQnVzID0gYnVzXG5cdFx0dGhpcy5jb25maWcgPSBjb25maWdcblxuXHRcdHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIG1zZyA9PiB7XG5cdFx0XHQvL1RPRE8gYWRkIHRoZSByZXNwZWN0aXZlIGxpc3RlbmVyXG5cdFx0XHRpZiAobXNnLnRvID09PSBgZG9tYWluLWlkcDovLyR7ZG9tYWlufWApIHtcblx0XHRcdFx0dGhpcy5yZXF1ZXN0VG9JZHAobXNnKVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHR0aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJylcblx0fVxuXG5cdF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcblx0XHRsZXQgX3RoaXMgPSB0aGlzXG5cblx0XHRjb25zb2xlLmxvZygnW1NsYWNrIElkcCBQcm94eSBzdGF0dXMgY2hhbmdlZF0gdG8gJywgdmFsdWUpXG5cblx0XHRfdGhpcy5fc3RhdGUgPSB2YWx1ZVxuXG5cdFx0bGV0IG1zZyA9IHtcblx0XHRcdHR5cGU6ICd1cGRhdGUnLFxuXHRcdFx0ZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcblx0XHRcdHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxuXHRcdFx0Ym9keToge1xuXHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocmVhc29uKSB7XG5cdFx0XHRtc2cuYm9keS5kZXNjID0gcmVhc29uXG5cdFx0fVxuXG5cdFx0X3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpXG5cdH1cblxuXHQvKipcblx0ICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuXHQgKlxuXHQgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG5cdCAqL1xuXHRyZXF1ZXN0VG9JZHAobXNnKSB7XG5cdFx0bGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtc1xuXG5cdFx0c3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcblx0XHRjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XG5cdFx0XHR0aGlzLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludClcblx0XHRcdFx0LnRoZW4odmFsdWUgPT4gdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkpXG5cdFx0XHRcdC5jYXRjaChlcnJvciA9PiB0aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKSlcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuXHRcdFx0dGhpcy5yZXBseU1lc3NhZ2UobXNnLCB7aWRlbnRpdHk6ICdpZGVudGl0eUBpZHAuY29tJywgY29udGVudHM6ICdjb250ZW50J30pXG5cdFx0XHRicmVha1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRicmVha1xuXHRcdH1cblx0fVxuXG5cdGdlbmVyYXRlQXNzZXJ0aW9uIChjb250ZW50cywgb3JpZ2luLCBoaW50KSAge1xuXG5cdFx0Y29uc29sZS5sb2coJ2NvbnRlbnRzLT4nLCBjb250ZW50cylcblx0XHRjb25zb2xlLmxvZygnb3JpZ2luLT4nLCBvcmlnaW4pXG5cdFx0Y29uc29sZS5sb2coJ2hpbnQtPicsIGhpbnQpXG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG5cdFx0XHQvL3RoZSBoaW50IGZpZWxkIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBvYnRhaW5lZCBhZnRlciB0aGUgdXNlciBhdXRoZW50aWNhdGlvblxuXHRcdFx0Ly8gaWYgdGhlIGhpbnQgY29udGVudCBpcyBub3QgcHJlc2VudCwgdGhlbiByZWplY3RzIHRoZSB2YWx1ZSB3aXRoIHRoZSBVUkwgdG8gb3BlbiB0aGUgcGFnZSB0byBhdXRoZW50aWNhdGUgdGhlIHVzZXJcblx0XHRcdGlmICghaGludCkge1xuXHRcdFx0XHRsZXQgcmVxdWVzdFVybCA9YGh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoP3Njb3BlPWVtYWlsJTIwcHJvZmlsZSZzdGF0ZT0lMkZwcm9maWxlJnJlZGlyZWN0X3VyaT0ke2xvY2F0aW9uLnByb3RvY29sfS8vJHtsb2NhdGlvbi5ob3N0bmFtZX0mcmVzcG9uc2VfdHlwZT10b2tlbiZjbGllbnRfaWQ9ODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tYFxuXHRcdFx0XHRjb25zb2xlLmxvZygnZmlyc3QgdXJsICcsIHJlcXVlc3RVcmwsICdkb25lJylcblx0XHRcdFx0cmVqZWN0KHtuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsfSlcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBhY2Nlc3NUb2tlbiA9IHRoaXMuX3VybFBhcnNlcihoaW50LCAnYWNjZXNzX3Rva2VuJylcblx0XHRcdFx0bGV0IGV4cGlyZXMgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKSArIHRoaXMuX3VybFBhcnNlcihoaW50LCAnZXhwaXJlc19pbicpXG5cdFx0XHRcdGZldGNoKGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvdXNlcmluZm8/YWNjZXNzX3Rva2VuPSR7YWNjZXNzVG9rZW59YClcblx0XHRcdFx0XHQudGhlbihyZXNfdXNlciA9PiByZXNfdXNlci5qc29uKCkpXG5cdFx0XHRcdFx0LnRoZW4oYm9keSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgaW5mb1Rva2VuID0ge3BpY3R1cmU6IGJvZHkucGljdHVyZSwgZW1haWw6IGJvZHkuZW1haWwsIGZhbWlseV9uYW1lOiBib2R5LmZhbWlseV9uYW1lLCBnaXZlbl9uYW1lOiBib2R5LmdpdmVuX25hbWV9XG5cdFx0XHRcdFx0XHRsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogYWNjZXNzVG9rZW4sIGVtYWlsOiBib2R5LmVtYWlsLCBpZDogYm9keS5pZH0pKVxuXHRcdFx0XHRcdFx0bGV0IHRvUmVzb2x2ZSA9IHtpbmZvOiB7IGV4cGlyZXM6IGV4cGlyZXMgfSwgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDoge2RvbWFpbjogZG9tYWluLCBwcm90b2NvbDogJ09BdXRoIDIuMCd9LCBpbmZvVG9rZW46IGluZm9Ub2tlbiwgaW50ZXJ3b3JraW5nOiB7YWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbiwgZG9tYWluOiBkb21haW4gfX1cblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdSRVNPTFZJTkcgVEhJUyBPQkpFQ1QnLCB0b1Jlc29sdmUpXG5cdFx0XHRcdFx0XHRyZXNvbHZlKHRvUmVzb2x2ZSlcblx0XHRcdFx0XHR9KS5jYXRjaChyZWplY3QpXG5cdFx0XHR9XG5cdFx0fSlcblx0fVxuXG5cdF91cmxQYXJzZXIodXJsLCBuYW1lKSB7XG5cdFx0bmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxcXF0nKVxuXHRcdGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJ1xuXHRcdGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKVxuXHRcdGxldCByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpXG5cdFx0aWYgKHJlc3VsdHMgPT09IG51bGwpXG5cdFx0XHRyZXR1cm4gJydcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gcmVzdWx0c1sxXVxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG5cdCAqXG5cdCAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuXHQgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcblx0ICovXG5cdHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XG5cdFx0bGV0IG1lc3NhZ2UgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZX19XG5cblx0XHR0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSlcblx0fVxufVxuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuXHRyZXR1cm4ge1xuXHRcdG5hbWU6ICdJTVNJV1Byb3h5U3R1YicsXG5cdFx0aW5zdGFuY2U6IG5ldyBJTVNJV1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuXHR9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvc2lwLnJldGhpbmstcHJvamVjdC5ldS9JTVNJV1Byb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "2.00",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar slackInfo = {\n  clientID: '11533603872.72434934356',\n  clientSecret: 'd427ef3c957d68a292dc7c4e20b78330',\n  redirectURI: location.origin,\n  codeEndpoint: 'https://slack.com/oauth/authorize?',\n  tokenEndpoint: 'https://slack.com/api/oauth.access?',\n  infoEndpoint: 'https://slack.com/api/users.info?',\n  scope: 'client'\n};\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\n/**\n* Function to exchange the code received to the id Token, access token and a refresh token\n*\n*/\nvar exchangeCode = function exchangeCode(code) {\n\n  var s = slackInfo;\n  var URL = s.tokenEndpoint + 'client_id=' + s.clientID + '&client_secret=' + s.clientSecret + '&code=' + code + '&redirect_uri=' + s.redirectURI;\n\n  console.log('URL', URL);\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('GET', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\n/**\n* Identity Provider Proxy\n*/\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    return new Promise(function (resolve, reject) {\n\n      console.log('assertion - >', assertion);\n      console.log('origin - >', origin);\n      console.log('MYPROXY - VALIDATING');\n      resolve({ identity: 'identity@idp.com', contents: 'content' });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n\n    console.log('contents->', contents);\n    console.log('origin->', origin);\n    console.log('hint->', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      //the hint field contains the information obtained after the user authentication\n      // if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n      var s = slackInfo;\n      if (!hint) {\n        //let requestUrl = https://slack.com/oauth/authorize?client_id=11533603872.72434934356&scope=chat:write:user&redirect_uri=https://www.getpostman.com/oauth2/callback;\n\n        var requestUrl = s.codeEndpoint + 'client_id=' + s.clientID + '&scope=' + s.scope + '&redirect_uri=' + s.redirectURI;\n\n        console.log('first url ', requestUrl, 'done');\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n      } else {\n        var code = urlParser(hint, 'code');\n        console.log('code', code);\n        exchangeCode(code).then(function (value) {\n\n          console.log('value AFTER exchangeCode', value);\n\n          var infoUrl = s.infoEndpoint + 'token=' + value.access_token + '&user=' + value.user_id;\n\n          sendHTTPRequest('GET', infoUrl).then(function (info) {\n            console.log('info->', info);\n\n            var profile = info.user.profile;\n            var infoToken = { picture: profile.image_original, email: profile.email, family_name: profile.last_name, given_name: profile.first_name, id: info.user.id };\n\n            var assertion = btoa(JSON.stringify({ tokenID: value.access_token, email: profile.email, id: info.user.id }));\n\n            var toResolve = { assertion: assertion, idp: { domain: 'slack.com', protocol: 'OAuth 2.0' }, infoToken: infoToken, interworking: { access_token: value.access_token, domain: 'slack.com' }, info: { expires: 3153600000 } };\n            console.log('RESOLVING THIS OBJECT', toResolve);\n            resolve(toResolve);\n          }, function (error) {\n            console.log('error->', error);\n          });\n        });\n      }\n    });\n  }\n};\n\n/**\n* Identity Provider Proxy Protocol Stub\n*/\n\nvar SlackProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function SlackProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, SlackProxyStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://slack.com') {\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(SlackProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[Slack Idp Proxy status changed] to ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return SlackProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'SlackProxyStub',\n    instance: new SlackProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NsYWNrL1NsYWNrUHJveHlTdHViLmlkcC5qcz8xNGYyIl0sIm5hbWVzIjpbImFjdGl2YXRlIiwic2xhY2tJbmZvIiwiY2xpZW50SUQiLCJjbGllbnRTZWNyZXQiLCJyZWRpcmVjdFVSSSIsImxvY2F0aW9uIiwib3JpZ2luIiwiY29kZUVuZHBvaW50IiwidG9rZW5FbmRwb2ludCIsImluZm9FbmRwb2ludCIsInNjb3BlIiwidXJsUGFyc2VyIiwidXJsIiwibmFtZSIsInJlcGxhY2UiLCJyZWdleFMiLCJyZWdleCIsIlJlZ0V4cCIsInJlc3VsdHMiLCJleGVjIiwic2VuZEhUVFBSZXF1ZXN0IiwibWV0aG9kIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImUiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiaW5mbyIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJleGNoYW5nZUNvZGUiLCJjb2RlIiwicyIsIlVSTCIsImNvbnNvbGUiLCJsb2ciLCJ0aGVuIiwiZXJyb3IiLCJpZHAiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsImlkZW50aXR5IiwiY29udGVudHMiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImhpbnQiLCJyZXF1ZXN0VXJsIiwibG9naW5VcmwiLCJ2YWx1ZSIsImluZm9VcmwiLCJhY2Nlc3NfdG9rZW4iLCJ1c2VyX2lkIiwicHJvZmlsZSIsInVzZXIiLCJpbmZvVG9rZW4iLCJwaWN0dXJlIiwiaW1hZ2Vfb3JpZ2luYWwiLCJlbWFpbCIsImZhbWlseV9uYW1lIiwibGFzdF9uYW1lIiwiZ2l2ZW5fbmFtZSIsImZpcnN0X25hbWUiLCJpZCIsImJ0b2EiLCJzdHJpbmdpZnkiLCJ0b2tlbklEIiwidG9SZXNvbHZlIiwiZG9tYWluIiwicHJvdG9jb2wiLCJpbnRlcndvcmtpbmciLCJleHBpcmVzIiwiU2xhY2tQcm94eVN0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiX3RoaXMiLCJtZXNzYWdlQnVzIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwicGFyYW1zIiwiYm9keSIsInVzZXJuYW1lSGludCIsInJlcGx5TWVzc2FnZSIsIm1lc3NhZ2UiLCJ0eXBlIiwiZnJvbSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkF1UXdCQSxROzs7O0FBdFF4QixJQUFJQyxZQUFZO0FBQ2RDLFlBQVUseUJBREk7QUFFZEMsZ0JBQWMsa0NBRkE7QUFHZEMsZUFBYUMsU0FBU0MsTUFIUjtBQUlkQyxnQkFBYyxvQ0FKQTtBQUtkQyxpQkFBZSxxQ0FMRDtBQU1kQyxnQkFBYyxtQ0FOQTtBQU9kQyxTQUFPO0FBUE8sQ0FBaEI7O0FBVUE7QUFDQSxTQUFTQyxTQUFULENBQW1CQyxHQUFuQixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDNUJBLFNBQU9BLEtBQUtDLE9BQUwsQ0FBYSxNQUFiLEVBQXFCLE1BQXJCLEVBQTZCQSxPQUE3QixDQUFxQyxNQUFyQyxFQUE2QyxNQUE3QyxDQUFQO0FBQ0EsTUFBSUMsU0FBUyxZQUFZRixJQUFaLEdBQW1CLFdBQWhDO0FBQ0EsTUFBSUcsUUFBUSxJQUFJQyxNQUFKLENBQVdGLE1BQVgsQ0FBWjtBQUNBLE1BQUlHLFVBQVVGLE1BQU1HLElBQU4sQ0FBV1AsR0FBWCxDQUFkO0FBQ0EsTUFBSU0sWUFBWSxJQUFoQixFQUNBLE9BQU8sRUFBUCxDQURBLEtBR0EsT0FBT0EsUUFBUSxDQUFSLENBQVA7QUFDRDs7QUFFRCxTQUFTRSxlQUFULENBQXlCQyxNQUF6QixFQUFpQ1QsR0FBakMsRUFBc0M7QUFDcEMsTUFBSVUsTUFBTSxJQUFJQyxjQUFKLEVB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VSxJQUF2QyxFQUE2Q0EsTUFBTVYsSUFBSUMsRUFBdkQsRUFBMkRJLE1BQU0sRUFBQ25ELE1BQU0sR0FBUCxFQUFZZ0IsT0FBT0EsS0FBbkIsRUFBakUsRUFBZDs7QUFFQTJCLFlBQU1DLFVBQU4sQ0FBaUJhLFdBQWpCLENBQTZCSCxPQUE3QjtBQUNEOzs7Z0NBRVd0QyxLLEVBQU8wQyxNLEVBQVE7QUFDekIsVUFBSWYsUUFBUSxJQUFaOztBQUVBeEMsY0FBUUMsR0FBUixDQUFZLHNDQUFaLEVBQW9EWSxLQUFwRDs7QUFFQTJCLFlBQU1nQixNQUFOLEdBQWUzQyxLQUFmOztBQUVBLFVBQUk4QixNQUFNO0FBQ1JTLGNBQU0sUUFERTtBQUVSQyxjQUFNYixNQUFNSCxtQkFGSjtBQUdSTyxZQUFJSixNQUFNSCxtQkFBTixHQUE0QixTQUh4QjtBQUlSVyxjQUFNO0FBQ0puQyxpQkFBT0E7QUFESDtBQUpFLE9BQVY7O0FBU0EsVUFBSTBDLE1BQUosRUFBWTtBQUNWWixZQUFJSyxJQUFKLENBQVNTLElBQVQsR0FBZ0JGLE1BQWhCO0FBQ0Q7O0FBRURmLFlBQU1DLFVBQU4sQ0FBaUJhLFdBQWpCLENBQTZCWCxHQUE3QjtBQUNEOzs7Ozs7QUFHSDs7Ozs7Ozs7O0FBT2UsU0FBU3JGLFFBQVQsQ0FBa0JZLEdBQWxCLEVBQXVCb0UsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTHBFLFVBQU0sZ0JBREQ7QUFFTHVGLGNBQVUsSUFBSXRCLGNBQUosQ0FBbUJsRSxHQUFuQixFQUF3Qm9FLEdBQXhCLEVBQTZCQyxNQUE3QjtBQUZMLEdBQVA7QUFJRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5sZXQgc2xhY2tJbmZvID0ge1xuICBjbGllbnRJRDogJzExNTMzNjAzODcyLjcyNDM0OTM0MzU2JyxcbiAgY2xpZW50U2VjcmV0OiAnZDQyN2VmM2M5NTdkNjhhMjkyZGM3YzRlMjBiNzgzMzAnLFxuICByZWRpcmVjdFVSSTogbG9jYXRpb24ub3JpZ2luLFxuICBjb2RlRW5kcG9pbnQ6ICdodHRwczovL3NsYWNrLmNvbS9vYXV0aC9hdXRob3JpemU/JyxcbiAgdG9rZW5FbmRwb2ludDogJ2h0dHBzOi8vc2xhY2suY29tL2FwaS9vYXV0aC5hY2Nlc3M/JyxcbiAgaW5mb0VuZHBvaW50OiAnaHR0cHM6Ly9zbGFjay5jb20vYXBpL3VzZXJzLmluZm8/JyxcbiAgc2NvcGU6ICdjbGllbnQnXG59O1xuXG4vL2Z1bmN0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIFVSTCB0byBvYmF0aW4gY2VydGFpbiB2YWx1ZXNcbmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxcXF0nKTtcbiAgbGV0IHJlZ2V4UyA9ICdbXFxcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknO1xuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4Uyk7XG4gIGxldCByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xuICBpZiAocmVzdWx0cyA9PT0gbnVsbClcbiAgcmV0dXJuICcnO1xuICBlbHNlXG4gIHJldHVybiByZXN1bHRzWzFdO1xufVxuXG5mdW5jdGlvbiBzZW5kSFRUUFJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPSAndW5kZWZpbmVkJykge1xuICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuXG4gICAgLy8gWERvbWFpblJlcXVlc3Qgb25seSBleGlzdHMgaW4gSUUsIGFuZCBpcyBJRSdzIHdheSBvZiBtYWtpbmcgQ09SUyByZXF1ZXN0cy5cbiAgICB4aHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBDT1JTIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG4gICAgeGhyID0gbnVsbDtcbiAgfVxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcbiAgICBpZiAoeGhyKSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICBsZXQgaW5mbyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICByZXNvbHZlKGluZm8pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgICAgICByZWplY3QoJ1RoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSB0b2tlbicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4qIEZ1bmN0aW9uIHRvIGV4Y2hhbmdlIHRoZSBjb2RlIHJlY2VpdmVkIHRvIHRoZSBpZCBUb2tlbiwgYWNjZXNzIHRva2VuIGFuZCBhIHJlZnJlc2ggdG9rZW5cbipcbiovXG5sZXQgZXhjaGFuZ2VDb2RlID0gKGZ1bmN0aW9uKGNvZGUpIHtcblxuICBsZXQgcyA9IHNsYWNrSW5mbztcbiAgbGV0IFVSTCA9IHMudG9rZW5FbmRwb2ludCArICdjbGllbnRfaWQ9JyArIHMuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIHMuY2xpZW50U2VjcmV0ICsgJyZjb2RlPScgKyBjb2RlICsgJyZyZWRpcmVjdF91cmk9JyArICBzLnJlZGlyZWN0VVJJO1xuXG4gIGNvbnNvbGUubG9nKCdVUkwnLCBVUkwpO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cbi8qKlxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eVxuKi9cbmxldCBpZHAgPSB7XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgY29uc29sZS5sb2coJ2Fzc2VydGlvbiAtID4nLCBhc3NlcnRpb24pO1xuICAgICAgY29uc29sZS5sb2coJ29yaWdpbiAtID4nLCBvcmlnaW4pO1xuICAgICAgY29uc29sZS5sb2coJ01ZUFJPWFkgLSBWQUxJREFUSU5HJyk7XG4gICAgICByZXNvbHZlKHtpZGVudGl0eTogJ2lkZW50aXR5QGlkcC5jb20nLCBjb250ZW50czogJ2NvbnRlbnQnfSk7XG5cbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byBnZW5lcmF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb25cbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb25cbiAgKlxuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG4gIGdlbmVyYXRlQXNzZXJ0aW9uOiAoY29udGVudHMsIG9yaWdpbiwgaGludCkgPT4ge1xuXG4gICAgY29uc29sZS5sb2coJ2NvbnRlbnRzLT4nLCBjb250ZW50cyk7XG4gICAgY29uc29sZS5sb2coJ29yaWdpbi0+Jywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnaGludC0+JywgaGludCk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIC8vdGhlIGhpbnQgZmllbGQgY29udGFpbnMgdGhlIGluZm9ybWF0aW9uIG9idGFpbmVkIGFmdGVyIHRoZSB1c2VyIGF1dGhlbnRpY2F0aW9uXG4gICAgICAvLyBpZiB0aGUgaGludCBjb250ZW50IGlzIG5vdCBwcmVzZW50LCB0aGVuIHJlamVjdHMgdGhlIHZhbHVlIHdpdGggdGhlIFVSTCB0byBvcGVuIHRoZSBwYWdlIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlclxuICAgICAgbGV0IHMgPSBzbGFja0luZm87XG4gICAgICBpZiAoIWhpbnQpIHtcbiAgICAgICAgLy9sZXQgcmVxdWVzdFVybCA9IGh0dHBzOi8vc2xhY2suY29tL29hdXRoL2F1dGhvcml6ZT9jbGllbnRfaWQ9MTE1MzM2MDM4NzIuNzI0MzQ5MzQzNTYmc2NvcGU9Y2hhdDp3cml0ZTp1c2VyJnJlZGlyZWN0X3VyaT1odHRwczovL3d3dy5nZXRwb3N0bWFuLmNvbS9vYXV0aDIvY2FsbGJhY2s7XG5cbiAgICAgICAgbGV0IHJlcXVlc3RVcmwgPSBzLmNvZGVFbmRwb2ludCArICdjbGllbnRfaWQ9JyArIHMuY2xpZW50SUQgKyAnJnNjb3BlPScgKyBzLnNjb3BlICsgJyZyZWRpcmVjdF91cmk9JyArICBzLnJlZGlyZWN0VVJJO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdmaXJzdCB1cmwgJywgcmVxdWVzdFVybCwgJ2RvbmUnKTtcbiAgICAgICAgcmVqZWN0KHtuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsfSk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBjb2RlID0gdXJsUGFyc2VyKGhpbnQsICdjb2RlJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjb2RlJywgY29kZSk7XG4gICAgICAgIGV4Y2hhbmdlQ29kZShjb2RlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygndmFsdWUgQUZURVIgZXhjaGFuZ2VDb2RlJywgdmFsdWUpO1xuXG4gICAgICAgICAgbGV0IGluZm9VcmwgPSBzLmluZm9FbmRwb2ludCArICd0b2tlbj0nICsgdmFsdWUuYWNjZXNzX3Rva2VuICsgJyZ1c2VyPScgKyB2YWx1ZS51c2VyX2lkO1xuXG4gICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVXJsKS50aGVuKGZ1bmN0aW9uKGluZm8pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbmZvLT4nLCBpbmZvKTtcblxuICAgICAgICAgICAgbGV0IHByb2ZpbGUgPSBpbmZvLnVzZXIucHJvZmlsZTtcbiAgICAgICAgICAgIGxldCBpbmZvVG9rZW4gPSB7cGljdHVyZTogcHJvZmlsZS5pbWFnZV9vcmlnaW5hbCwgZW1haWw6IHByb2ZpbGUuZW1haWwsIGZhbWlseV9uYW1lOiBwcm9maWxlLmxhc3RfbmFtZSwgZ2l2ZW5fbmFtZTogcHJvZmlsZS5maXJzdF9uYW1lLCBpZDogaW5mby51c2VyLmlkIH07XG5cbiAgICAgICAgICAgIGxldCBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHt0b2tlbklEOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGVtYWlsOiBwcm9maWxlLmVtYWlsLCBpZDogaW5mby51c2VyLmlkfSkpO1xuXG4gICAgICAgICAgICBsZXQgdG9SZXNvbHZlID0ge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IHtkb21haW46ICdzbGFjay5jb20nLCBwcm90b2NvbDogJ09BdXRoIDIuMCd9LCBpbmZvVG9rZW46IGluZm9Ub2tlbiwgaW50ZXJ3b3JraW5nOiB7YWNjZXNzX3Rva2VuOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGRvbWFpbjogJ3NsYWNrLmNvbScgfSwgaW5mbyA6IHtleHBpcmVzOiAzMTUzNjAwMDAwfX07XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUkVTT0xWSU5HIFRISVMgT0JKRUNUJywgdG9SZXNvbHZlKTtcbiAgICAgICAgICAgIHJlc29sdmUodG9SZXNvbHZlKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yLT4nLCBlcnJvcik7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiovXG5jbGFzcyBTbGFja1Byb3h5U3R1YiB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xuICAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcbiAgICAgIGlmIChtc2cudG8gPT09ICdkb21haW4taWRwOi8vc2xhY2suY29tJykge1xuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuICAqXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xuICAqL1xuICByZXF1ZXN0VG9JZHAobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xuXG4gICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgaWRwLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuICAgICAgICBpZHAudmFsaWRhdGVBc3NlcnRpb24ocGFyYW1zLmFzc2VydGlvbiwgcGFyYW1zLm9yaWdpbikudGhlbihcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKlxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxuICAqL1xuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX07XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG5cbiAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBjb25zb2xlLmxvZygnW1NsYWNrIElkcCBQcm94eSBzdGF0dXMgY2hhbmdlZF0gdG8gJywgdmFsdWUpO1xuXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICBsZXQgbXNnID0ge1xuICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVhc29uKSB7XG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuICAgIH1cblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgfVxufVxuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdTbGFja1Byb3h5U3R1YicsXG4gICAgaW5zdGFuY2U6IG5ldyBTbGFja1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuICB9O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9zbGFjay9TbGFja1Byb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "2.00",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\nvar https = __webpack_require__(1);\nvar btoa = __webpack_require__(2);\nvar atob = __webpack_require__(3);\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\n//let URL = i.tokenEndpoint + 'code=' + code + '&client_id=' +\n//        i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' +\n//        i.redirectURI + '&grant_type=authorization_code';\n\nfunction sendHTTPRequest(method, url) {\n  return new Promise(function (resolve, reject) {\n    //return makeLocalRequest(method, url, undefined);\n    console.log('sendHTTPRequest:url', url);\n    var splitedText = url.split('/');\n    var host = splitedText[2];\n    var replacedURL = url.replace(splitedText[0] + '//' + splitedText[2], '');\n    var options = {\n      hostname: host,\n      port: 443,\n      path: replacedURL,\n      method: method\n    };\n    console.log('sendHTTPRequest:options', options);\n\n    var req = https.request(options, function (res) {\n      console.log('sendHTTPRequest:statusCode:', res.statusCode);\n      console.log('sendHTTPRequest:headers:', res.headers);\n      var stream = '';\n      res.on('data', function (d) {\n        stream += d;\n      });\n      res.on('end', function () {\n        console.log('sendHTTPRequest:data:', stream);\n        resolve(stream);\n      });\n    });\n\n    req.on('error', function (e) {\n      console.error('https_return: ' + e);\n    });\n    req.end();\n  });\n}\n\n/**\n* @returns {variable<string>}\n**/\nfunction mapProtocol(url) {\n  var protocolmap = {\n    'localhost://': 'https://',\n    'undefined://': 'https://',\n    'hyperty-catalogue://': 'https://',\n    'https://': 'https://',\n    'http://': 'https://'\n  };\n\n  var foundProtocol = false;\n  var resultURL = undefined;\n  for (var protocol in protocolmap) {\n    if (url.slice(0, protocol.length) === protocol) {\n      resultURL = protocolmap[protocol] + url.slice(protocol.length, url.length);\n      foundProtocol = true;\n      break;\n    }\n  }\n\n  if (!foundProtocol) {\n    throw new Error('Invalid protocol of url: ' + url);\n  }\n  return resultURL;\n}\n\nvar getAuth = function getAuth(contents) {\n  var i = googleInfo;\n\n  return new Promise(function (resolve, reject) {\n    var URL = i.authorisationEndpoint + 'scope=' + i.scope + '&client_id=' + i.clientID + '&redirect_uri=' + i.redirectURI + '&response_type=' + i.type + '&state=' + i.state + '&access_type=' + i.accessType + '&nonce=' + contents + '&prompt=none';\n\n    sendHTTPRequest('POST', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      console.log('ERROR:', error);\n      reject(error);\n    });\n  });\n};\n\n/**\n* Function to exchange the code received to the id Token, access token and a refresh token\n*\n*/\nvar exchangeCode = function exchangeCode(code) {\n  var i = googleInfo;\n\n  return new Promise(function (resolve, reject) {\n\n    var URL = i.tokenEndpoint + 'code=' + code + '&client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' + i.redirectURI + '&grant_type=authorization_code';\n\n    sendHTTPRequest('POST', URL).then(function (info) {\n      console.log('[IDPROXY.exchangeCode:info]', info);\n      resolve(info);\n    }, function (error) {\n      console.log('[IDPROXY.exchangeCode:err]', error.message);\n      //reject(error);\n    });\n  });\n};\n\n/**\n* Identity Provider Proxy\n*/\n\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJS');\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n\n      // atob may need to be required for nodejs\n      // var atob = require('atob');\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n\n      var idTokenSplited = content.tokenID.split('.');\n\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertion:contents]', contents);\n    console.log('[IDPROXY.generateAssertion:origin]', origin);\n    console.log('[IDPROXY.generateAssertion:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      console.log('generateMessageResponse:');\n      return resolve(generateMessageResponse);\n\n      //the hint field contains the information obtained after the user authentication\n      // if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n      var i = googleInfo;\n\n      if (!hint) {\n\n        getAuth(contents).then(function (result) {\n          console.log('RESULT:', result);\n          resolve(result);\n        });\n      } else {\n\n        // the request have already been made, so idpPRoxy will exchange the tokens along to the idp, to obtain the information necessary\n        var accessToken = urlParser(hint, 'access_token');\n        var idToken = urlParser(hint, 'id_token');\n        var code = urlParser(hint, 'code');\n\n        exchangeCode(code).then(function (value) {\n\n          console.log('TIAGO exchange code');\n\n          //obtain information about the user\n          var infoTokenURL = i.userinfo + value.access_token;\n          sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n\n            console.log('TIAGO info token url');\n            var identityBundle = { accessToken: value.access_token, idToken: value.id_token, refreshToken: value.refresh_token, tokenType: value.token_type, infoToken: infoToken };\n\n            var idTokenURL = i.tokenInfo + value.id_token;\n\n            //obtain information about the user idToken\n            sendHTTPRequest('GET', idTokenURL).then(function (idToken) {\n\n              console.log('TIAGO id token url');\n              identityBundle.tokenIDJSON = idToken;\n              identityBundle.expires = idToken.exp;\n              identityBundle.email = idToken.email;\n\n              var assertion = btoa(JSON.stringify({ tokenID: value.id_token, tokenIDJSON: idToken }));\n              var idpBundle = { domain: 'google.com', protocol: 'OIDC' };\n\n              //TODO delete later the field infoToken, and delete the need in the example\n              var returnValue = { assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken };\n\n              identities[nIdentity] = returnValue;\n              ++nIdentity;\n\n              console.log('[IDPROXY.generateAssertion:returnValue]', returnValue);\n              resolve(returnValue);\n            }, function (e) {\n\n              reject(e);\n            });\n          }, function (error) {\n\n            reject(error);\n          });\n        }, function (err) {\n          console.log('[IDPROXY.generateAssertion:exchangeCode]', err);\n          //reject(err);\n        });\n      }\n    });\n  }\n\n  /**\n  * Identity Provider Proxy Protocol Stub\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('Google->NODEJS constructor');\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://google.com') {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}\n\nvar generateMessageResponse = { assertion: \"eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqTmpaVFJoT1Rka05UQXlZV1l3TlRobFlqWTJZV000WkRjek1HRTFPVEpoWWpkalpXRTNaakVpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWpJeVJuSTVhWFpvTldKNWVHVXRhMWRPT0dsdmExRWlMQ0p1YjI1alpTSTZJbVY1U1hkSmFtOHdUME4zYVUxVFNUWk5WRTEzVEVOSmVVbHFiM2hNUTBsNlNXcHZlazVEZDJsT1EwazJUa1JuYzBscVZXbFBha1Y2VEVOSk1rbHFiekpNUTBrelNXcHZOVXhEU1RSSmFtOHdUV2wzYVU5VFNUWk5WRTB3VEVOSmVFMURTVFpPZWtselNXcEZlRWxxYjNoTmVsRnpTV3BGZVVscWIzbE9SR056U1dwRmVrbHFiM2hOZVhkcFRWUlJhVTlxUlhOSmFrVXhTV3B2ZUV4RFNYaE9hVWsyVFZOM2FVMVVZMmxQYWxWelNXcEZORWxxYjNkTVEwbDRUMU5KTmsxNWQybE5ha0ZwVDJwRmVrMURkMmxOYWtWcFQycEZjMGxxU1hsSmFtOTRUbE4zYVUxcVRXbFBha0Z6U1dwSk1FbHFiekJQUTNkcFRXcFZhVTlxUlhwTlEzZHBUV3BaYVU5cVJYTkpha2t6U1dwdmVFMURkMmxOYW1kcFQycEpjMGxxU1RWSmFtOTRUWHBCYzBscVRYZEphbTk0VEVOSmVrMVRTVFpOVTNkcFRYcEphVTlxUVhOSmFrMTZTV3B2ZUU1VVFYTkphazB3U1dwdk5VeERTWHBPVTBrMlQwUm5jMGxxVFRKSmFtOTRUbXBCYzBscVRUTkphbTk1VGtScmMwbHFUVFJKYW05NFRrUkJjMGxxVFRWSmFtOTVUWHByYzBscVVYZEphbTk0VFVSQmMwbHFVWGhKYW05NlRrTjNhVTVFU1dsUGFra3hUVk4zYVU1RVRXbFBha1V3VFdsM2FVNUVVV2xQYWtVMVQxTjNhVTVFVldsUGFrbDNURU5KTUU1cFNUWk5WRTB6VEVOSk1FNTVTVFpOYWtGNVRFTkpNRTlEU1RaTlZHZHpTV3BSTlVscWIzaFBSRTF6U1dwVmQwbHFiM2hPVkdkelNXcFZlRWxxYjNsTmVtTnpTV3BWZVVscWIzbE9WRkZ6U1dwVmVrbHFiekpQUTNkcFRsUlJhVTlxU1hwT2FYZHBUbFJWYVU5cVJYbE9VM2RwVGxSWmFVOXFXVFZNUTBreFRubEpOazFVVVhOSmFsVTBTV3B2TkU5RGQybE9WR3RwVDJwRmVVOURkMmxPYWtGcFQycEZlVTVEZDJsT2FrVnBUMnBKZDAxRGQybE9ha2xwVDJwSmQwOVRkMmxPYWsxcFQycEZOVTVEZDJsT2FsRnBUMnBGTUU1RGQybE9hbFZwVDJwSmQwMTVkMmxPYWxscFQycEZNVXhEU1RKT2VVazJUV3BCZWt4RFNUSlBRMGsyVFdwQmQweERTVEpQVTBrMlRYcEpjMGxxWTNkSmFtOTVUVlJSYzBscVkzaEphbTk1VGxSRmMwbHFZM2xKYW04MFRWTjNhVTU2VFdsUGFrVTBUME4zYVU1NlVXbFBha1V5VFdsM2FVNTZWV2xQYWtWM1RsTjNhVTU2V1dsUGFtTTFURU5KTTA1NVNUWlBSR056U1dwak5FbHFiekpQUTNkcFRucHJhVTlxUlRCTlUzZHBUMFJCYVU5cVdYZE1RMGswVFZOSk5rOUVaM05KYW1kNVNXcHZORTVEZDJsUFJFMXBUMnBaTVV4RFNUUk9RMGsyVGtSWmMwbHFaekZKYW05NFRVUkJjMGxxWnpKSmFtOTVUV3BuYzBscVp6TkphbTgwVDBOM2FVOUVaMmxQYWtsM1RXbDNhVTlFYTJsUGFrMTVURU5KTlUxRFNUWk5WR041VEVOSk5VMVRTVFpOVkVFMVRFTkpOVTFwU1RaT1ZFRnpTV3ByZWtscWIzbE5SRmx6U1dwck1FbHFiM2xOVkZGelNXcHJNVWxxYjNsT1JGRnpTV3ByTWtscWIzaE5SRlZ6U1dwck0wbHFiekZQVTNkcFQxUm5hVTlxUlhoTlEzZHBUMVJyYVU5cVJUSk1RMGw0VFVSQmFVOXFSVFZPZVhkcFRWUkJlRWxxYjNsTlJFMXpTV3BGZDAxcFNUWk9hWGRwVFZSQmVrbHFiM2hOUTNkcFRWUkJNRWxxYnpCTmVYZHBUVlJCTVVscWJ6Tk1RMGw0VFVSWmFVOXFUVEZNUTBsNFRVUmphVTlxU1RCUFEzZHBUVlJCTkVscWIzaE9SRmx6U1dwRmQwOVRTVFpOVkZWM1RFTkplRTFVUVdsUGFrVTFUWGwzYVUxVVJYaEphbTk1VGtSUmMwbHFSWGhOYVVrMlRWUlpNa3hEU1hoTlZFMXBUMnBGZWs5VGQybE5WRVV3U1dwdmVFOUVTWE5KYWtWNFRsTkpOazU2WjNOSmFrVjRUbWxKTmsxVVZYaE1RMGw0VFZSamFVOXFSVFJNUTBsNFRWUm5hVTlxVVhOSmFrVjRUMU5KTms1cVVYTkpha1Y1VFVOSk5rNVVWWE5KYWtWNVRWTkpOazFxUlRGTVEwbDRUV3BKYVU5cVJYaE5VM2RwVFZSSmVrbHFiM2hQVkd0elNXcEZlVTVEU1RaUFZHZHpTV3BGZVU1VFNUWlBRM2RwVFZSSk1rbHFiM3BNUTBsNFRXcGphVTlxVVhsTVEwbDRUV3BuYVU5cVJYZFBVM2RwVFZSSk5VbHFiM2hQVkZWelNXcEZlazFEU1RaT2VrRnpTV3BGZWsxVFNUWk9ha0Z6U1dwRmVrMXBTVFpOVkUwMVRFTkplRTE2VFdsUGFrVTFUa04zYVUxVVRUQkphbTk0VFZSRmMwbHFSWHBPVTBrMlRWUlpla3hEU1hoTmVsbHBUMnBGTlUxcGQybE5WRTB6U1dwdk1rMXBkMmxOVkUwMFNXcHZlRTU1ZDJsTlZFMDFTV3B2ZVUxRVRYTkpha1V3VFVOSk5rMVVSVE5NUTBsNFRrUkZhVTlxVVRGTVEwbDRUa1JKYVU5cVJUQk5hWGRwVFZSUmVrbHFiM2hQVTNkcFRWUlJNRWxxYjNoT2FsbHpTV3BGTUU1VFNUWlBWRUZ6U1dwRk1FNXBTVFpOVkdONFRFTkplRTVFWTJsUGFtczFURU5KZUU1RVoybFBha1V6VFVOM2FVMVVVVFZKYW05NFRsUlJjMGxxUlRGTlEwazJUWHBqYzBscVJURk5VMGsyVFdwQk5FeERTWGhPVkVscFQycEZNRTU1ZDJsTlZGVjZTV3B2ZUUxNWQybE5WRlV3U1dwdmVFOVVXWE5KYWtVeFRsTkpOazVVV1hOSmFrVXhUbWxKTmsxVVp6Sk1RMGw0VGxSamFVOXFSVFJOUTNkcFRWUlZORWxxYjNoUFZGRnpTV3BGTVU5VFNUWk5ha2wzVEVOSmVFNXFRV2xQYWtWNVRXbDNhVTFVV1hoSmFtOHdUbWwzYVUxVVdYbEphbTk1VFdwSmMwbHFSVEpOZVVrMlRWUmpNa3hEU1hoT2FsRnBUMnBqZDB4RFNYaE9hbFZwVDJwVk5VeERTWGhPYWxscFQycEZla3hEU1hoT2FtTnBUMnBKZVUxNWQybE5WRmswU1dwdk5VMVRkMmxOVkZrMVNXcHZlRTFFWjNOSmFrVXpUVU5KTmsxVVl6Tk1RMGw0VG5wRmFVOXFTWGhPUTNkcFRWUmplVWxxYnpOTmFYZHBUVlJqZWtscWIzcE5RM2RwVFZSak1FbHFiM2xOYWtselNXcEZNMDVUU1RaT1JFbHpTV3BGTTA1cFNUWk5ha2t3VEVOSmVFNTZZMmxQYWtsM1RWTjNhVTFVWXpSSmFtOHhUV2wzYVUxVVl6VkphbTk1VFZSRmMwbHFSVFJOUTBrMlRXcFJNa3hEU1hoUFJFVnBUMnBGTkU1RGQybE5WR2Q1U1dwdmVVMVRkMmxOVkdkNlNXcHZOVTVwZDJsTlZHY3dTV3B2ZUU1RWEzTkpha1UwVGxOSk5rOVVhM05KYWtVMFRtbEpOazFVUVhoTVEwbDRUMFJqYVU5cVJUQk9lWGRwVFZSbk5FbHFiM2hPZWsxelNXcEZORTlUU1RaTmFsRTBURU5KZUU5VVFXbFBha1V5VG1sM2FVMVVhM2hKYW05NlRWTjNhVTFVYTNsSmFtOTRUbXByYzBscVJUVk5lVWsyVDFSTmMwbHFSVFZPUTBrMlRXcEZNRXhEU1hoUFZGVnBUMnBGZVU1RGQybE5WR3N5U1dwdmVVOURkMmxOVkdzelNXcHZNazFUZDJsTlZHczBTV3B2TVU5VGQybE5WR3MxU1dwdmVrOURkMmxOYWtGM1NXcHZlRTFFUVhOSmFrbDNUVk5KTms1VVJYTkpha2wzVFdsSk5rNUVaM05KYWtsM1RYbEpOazlVYTNOSmFrbDNUa05KTmsxVWEzaE1RMGw1VFVSVmFVOXFSVFZPZVhkcFRXcEJNa2xxYnpGUFEzZHBUV3BCTTBscWIzaFBSRUZ6U1dwSmQwOURTVFpOVkZVd1RFTkplVTFFYTJsUGFrVXlUbmwzYVUxcVJYZEphbTk0VFdwRmMwbHFTWGhOVTBrMlRXcEJNVXhEU1hsTlZFbHBUMnBKZWs1cGQybE5ha1Y2U1dwdmVVMVRkMmxOYWtVd1NXcHZlRTlFWTNOSmFrbDRUbE5KTmsxcVRYcE1RMGw1VFZSWmFVOXFTVEZOZVhkcFRXcEZNMGxxYnpKT2FYZHBUV3BGTkVscWJ6Sk9hWGRwVFdwRk5VbHFiM2hQUkVselNXcEplVTFEU1RaTmFrMHhURU5KZVUxcVJXbFBha2w0VFdsM2FVMXFTWGxKYW05NlRXbDNhVTFxU1hwSmFtOTRUWHBaYzBscVNYbE9RMGsyVG5wRmMwbHFTWGxPVTBrMlRWUm5NMHhEU1hsTmFsbHBUMnBKZVU5RGQybE5ha2t6U1dwdmVVMTZUWE5KYWtsNVQwTkpOazU2VVhOSmFrbDVUMU5KTmsxVVJUUk1RMGw1VFhwQmFVOXFSWGxOUTNkcFRXcE5lRWxxYnpKUFUzZHBUV3BOZVVscWIzaFBWRUZ6U1dwSmVrMTVTVFpPZWsxelNXcEplazVEU1RaTlZGRjRURU5KZVUxNlZXbFBhbEY1VEVOSmVVMTZXV2xQYW1zMFRFTkplVTE2WTJsUGFrMDFURU5KZVUxNloybFBha1V4VFhsM2FVMXFUVFZKYW04MVRXbDNhVTFxVVhkSmFtOHpUME4zYVUxcVVYaEphbTk1VG1sM2FVMXFVWGxKYW05NVRWUnJjMGxxU1RCTmVVazJUVlJyTkV4RFNYbE9SRkZwVDJwRk1rOURkMmxOYWxFeFNXcHZlRTU2WTNOSmFra3dUbWxKTms1cVZYTkpha2t3VG5sSk5rMXFTWGhNUTBsNVRrUm5hVTlxU1hkTmFYZHBUV3BSTlVscWIzaE9hazF6U1dwSk1VMURTVFpOVkVrMFRFTkplVTVVUldsUGFsRTFURU5KZVU1VVNXbFBha1Y0VFZOM2FVMXFWWHBKYW05NFRWUkJjMGxxU1RGT1EwazJUVlJWYzBscVNURk9VMGsyVG1wbmMwbHFTVEZPYVVrMlRXcEplRXhEU1hsT1ZHTnBUMnBKZVU5RGQybE5hbFUwU1dwdmVrNTVkMmxOYWxVMVNXcHZlVTU1ZDJsTmFsbDNTV3B2TkUxcGQybE5hbGw0U1dwdmVFOVVaM05KYWtreVRXbEpOazVUZDJsTmFsbDZTV3B2TTB4RFNYbE9hbEZwVDJwSmVFOURkMmxOYWxreFNXcHZlRTFxVFhOSmFra3lUbWxKTmsxcVNUUk1RMGw1VG1wamFVOXFSVEJOUTNkcFRXcFpORWxxYnpKUFEzZHBUV3BaTlVscWIzaE9SRVZ6U1dwSk0wMURTVFpOVkdONFRFTkplVTU2UldsUGFtY3dURU5KZVU1NlNXbFBha1UxVFdsM2FVMXFZM3BKYW05M1RFTkplVTU2VVdsUGFrbDRURU5KZVU1NlZXbFBhbGw0VEVOSmVVNTZXV2xQYWtWNVRFTkplVTU2WTJsUGFrazBURU5KZVU1NloybFBha2x6U1dwSk0wOVRTVFpOVkZWelNXcEpORTFEU1RaTlZGVXpURU5KZVU5RVJXbFBhbFY1VEVOSmVVOUVTV2xQYWtsM1QwTjNhVTFxWjNwSmFtOTRUWHByYzBscVNUUk9RMGsyVFdwbmMwbHFTVFJPVTBrMlRtcEJjMGxxU1RST2FVazJUa1JGYzBscVNUUk9lVWsyVFdwUmMwbHFTVFJQUTBrMlRXcEpNMHhEU1hsUFJHdHBUMnBKYzBscVNUVk5RMGsyVFhsM2FVMXFhM2hKYW05NFRFTkplVTlVU1dsUGFrRnpTV3BKTlUxNVNUWk5XREE5SWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam94TlRFd05qTXlPVGs1TENKbGVIQWlPakUxTVRBMk16WTFPVGw5Lk9hNGhFMXJ5bGtDMWNmTy1tWk9IYlQtSFZuSUd6QURDWk1qdFRkdU5PNG9ocWdXSVJJSldDaHZiclpHR0ZXckEyR3UyMEVVUkltNG5CV21xU01Mcm5maHpYYVZRNW56QUlHeGpWXzZQOWFtTFBIeFFZbXJFcU5FakNPME0yejFVQUI5VFVwcEhMcm5FMXlzS3VDM2NIaDdUN2ptazdvM3RlWFRqMTBmV1BXUGs5dXhtZWYwX01wRjA1SHBUNEpGbmJFeWVZR2M5TmtISzd3RGZNWG1sNjRGV3BPaGtncElXYlcyY0l6anJzTjlCSUdacVRvLUw2QUM2VEFfUXRyYVB6djRoUFgyc296NnM5TGRmekJtcFQ2ZzlJdUk4djlnOGxKRFRTZEptM2tFdnNXNDZ3S3h2cHAxOTdIdDRDcW1JRzZnS3ppdENNZ3BjWU5wMkJRVWVpQSIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiIyMkZyOWl2aDVieXhlLWtXTjhpb2tRIiwibm9uY2UiOiJleUl3SWpvME9Dd2lNU0k2TVRNd0xDSXlJam94TENJeklqb3pOQ3dpTkNJNk5EZ3NJalVpT2pFekxDSTJJam8yTENJM0lqbzVMQ0k0SWpvME1pd2lPU0k2TVRNMExDSXhNQ0k2TnpJc0lqRXhJam94TXpRc0lqRXlJam95TkRjc0lqRXpJam94TXl3aU1UUWlPakVzSWpFMUlqb3hMQ0l4TmlJNk1Td2lNVGNpT2pVc0lqRTRJam93TENJeE9TSTZNeXdpTWpBaU9qRXpNQ3dpTWpFaU9qRXNJakl5SWpveE5Td2lNak1pT2pBc0lqSTBJam8wT0N3aU1qVWlPakV6TUN3aU1qWWlPakVzSWpJM0lqb3hNQ3dpTWpnaU9qSXNJakk1SWpveE16QXNJak13SWpveExDSXpNU0k2TVN3aU16SWlPakFzSWpNeklqb3hOVEFzSWpNMElqbzVMQ0l6TlNJNk9EZ3NJak0ySWpveE5qQXNJak0zSWpveU5Ea3NJak00SWpveE5EQXNJak01SWpveU16a3NJalF3SWpveE1EQXNJalF4SWpvek5Dd2lORElpT2pJMU1Td2lORE1pT2pFME1pd2lORFFpT2pFNU9Td2lORFVpT2pJd0xDSTBOaUk2TVRNM0xDSTBOeUk2TWpBeUxDSTBPQ0k2TVRnc0lqUTVJam94T0RNc0lqVXdJam94TlRnc0lqVXhJam95TXpjc0lqVXlJam95TlRRc0lqVXpJam8yT0N3aU5UUWlPakl6Tml3aU5UVWlPakV5TlN3aU5UWWlPalk1TENJMU55STZNVFFzSWpVNElqbzRPQ3dpTlRraU9qRXlPQ3dpTmpBaU9qRXlOQ3dpTmpFaU9qSXdNQ3dpTmpJaU9qSXdPU3dpTmpNaU9qRTVOQ3dpTmpRaU9qRTBOQ3dpTmpVaU9qSXdNeXdpTmpZaU9qRTFMQ0kyTnlJNk1qQXpMQ0kyT0NJNk1qQXdMQ0kyT1NJNk16SXNJamN3SWpveU1UUXNJamN4SWpveU5URXNJamN5SWpvNE1Td2lOek1pT2pFNE9Dd2lOelFpT2pFMk1pd2lOelVpT2pFd05Td2lOellpT2pjNUxDSTNOeUk2T0Rjc0lqYzRJam8yT0N3aU56a2lPakUwTVN3aU9EQWlPall3TENJNE1TSTZPRGdzSWpneUlqbzROQ3dpT0RNaU9qWTFMQ0k0TkNJNk5EWXNJamcxSWpveE1EQXNJamcySWpveU1qZ3NJamczSWpvNE9Dd2lPRGdpT2pJd01pd2lPRGtpT2pNeUxDSTVNQ0k2TVRjeUxDSTVNU0k2TVRBNUxDSTVNaUk2TlRBc0lqa3pJam95TURZc0lqazBJam95TVRRc0lqazFJam95TkRRc0lqazJJam94TURVc0lqazNJam8xT1N3aU9UZ2lPakV4TUN3aU9Ua2lPakUyTENJeE1EQWlPakU1Tnl3aU1UQXhJam95TURNc0lqRXdNaUk2Tml3aU1UQXpJam94TUN3aU1UQTBJam8wTXl3aU1UQTFJam8zTENJeE1EWWlPak0xTENJeE1EY2lPakkwT0N3aU1UQTRJam94TkRZc0lqRXdPU0k2TVRVd0xDSXhNVEFpT2pFNU15d2lNVEV4SWpveU5EUXNJakV4TWlJNk1UWTJMQ0l4TVRNaU9qRXpPU3dpTVRFMElqb3hPRElzSWpFeE5TSTZOemdzSWpFeE5pSTZNVFV4TENJeE1UY2lPakU0TENJeE1UZ2lPalFzSWpFeE9TSTZOalFzSWpFeU1DSTZOVFVzSWpFeU1TSTZNakUxTENJeE1qSWlPakV4TVN3aU1USXpJam94T1Rrc0lqRXlOQ0k2T1Rnc0lqRXlOU0k2T0N3aU1USTJJam96TENJeE1qY2lPalF5TENJeE1qZ2lPakV3T1N3aU1USTVJam94T1RVc0lqRXpNQ0k2TnpBc0lqRXpNU0k2TmpBc0lqRXpNaUk2TVRNNUxDSXhNek1pT2pFNU5Dd2lNVE0wSWpveE1URXNJakV6TlNJNk1UWXpMQ0l4TXpZaU9qRTVNaXdpTVRNM0lqbzJNaXdpTVRNNElqb3hOeXdpTVRNNUlqb3lNRE1zSWpFME1DSTZNVEUzTENJeE5ERWlPalExTENJeE5ESWlPakUwTWl3aU1UUXpJam94T1N3aU1UUTBJam94TmpZc0lqRTBOU0k2T1RBc0lqRTBOaUk2TVRjeExDSXhORGNpT2prNUxDSXhORGdpT2pFM01Dd2lNVFE1SWpveE5UUXNJakUxTUNJNk16Y3NJakUxTVNJNk1qQTRMQ0l4TlRJaU9qRTBOeXdpTVRVeklqb3hNeXdpTVRVMElqb3hPVFlzSWpFMU5TSTZOVFlzSWpFMU5pSTZNVGcyTENJeE5UY2lPakU0TUN3aU1UVTRJam94T1RRc0lqRTFPU0k2TWpJd0xDSXhOakFpT2pFeU1pd2lNVFl4SWpvME5pd2lNVFl5SWpveU1qSXNJakUyTXlJNk1UYzJMQ0l4TmpRaU9qY3dMQ0l4TmpVaU9qVTVMQ0l4TmpZaU9qRXpMQ0l4TmpjaU9qSXlNeXdpTVRZNElqbzVNU3dpTVRZNUlqb3hNRGdzSWpFM01DSTZNVGMzTENJeE56RWlPakl4TkN3aU1UY3lJam8zTWl3aU1UY3pJam96TUN3aU1UYzBJam95TWpJc0lqRTNOU0k2TkRJc0lqRTNOaUk2TWpJMExDSXhOemNpT2pJd01Td2lNVGM0SWpvMU1pd2lNVGM1SWpveU1URXNJakU0TUNJNk1qUTJMQ0l4T0RFaU9qRTROQ3dpTVRneUlqb3lNU3dpTVRneklqbzVOaXdpTVRnMElqb3hORGtzSWpFNE5TSTZPVGtzSWpFNE5pSTZNVEF4TENJeE9EY2lPakUwTnl3aU1UZzRJam94TnpNc0lqRTRPU0k2TWpRNExDSXhPVEFpT2pFMk5pd2lNVGt4SWpvek1Td2lNVGt5SWpveE5qa3NJakU1TXlJNk9UTXNJakU1TkNJNk1qRTBMQ0l4T1RVaU9qRXlOQ3dpTVRrMklqb3lPQ3dpTVRrM0lqbzJNU3dpTVRrNElqbzFPU3dpTVRrNUlqb3pPQ3dpTWpBd0lqb3hNREFzSWpJd01TSTZOVEVzSWpJd01pSTZORGdzSWpJd015STZPVGtzSWpJd05DSTZNVGt4TENJeU1EVWlPakU1Tnl3aU1qQTJJam8xT0N3aU1qQTNJam94T0RBc0lqSXdPQ0k2TVRVMExDSXlNRGtpT2pFMk55d2lNakV3SWpveE1qRXNJakl4TVNJNk1qQTFMQ0l5TVRJaU9qSXpOaXdpTWpFeklqb3lNU3dpTWpFMElqb3hPRGNzSWpJeE5TSTZNak16TENJeU1UWWlPakkxTXl3aU1qRTNJam8yTml3aU1qRTRJam8yTml3aU1qRTVJam94T0RJc0lqSXlNQ0k2TWpNMUxDSXlNakVpT2pJeE1pd2lNakl5SWpvek1pd2lNakl6SWpveE16WXNJakl5TkNJNk56RXNJakl5TlNJNk1UZzNMQ0l5TWpZaU9qSXlPQ3dpTWpJM0lqb3lNek1zSWpJeU9DSTZOelFzSWpJeU9TSTZNVEU0TENJeU16QWlPakV5TUN3aU1qTXhJam8yT1N3aU1qTXlJam94T1RBc0lqSXpNeUk2TnpNc0lqSXpOQ0k2TVRReExDSXlNelVpT2pReUxDSXlNellpT2prNExDSXlNemNpT2pNNUxDSXlNemdpT2pFMU15d2lNak01SWpvNU1pd2lNalF3SWpvM09Dd2lNalF4SWpveU5pd2lNalF5SWpveU1Ua3NJakkwTXlJNk1UazRMQ0l5TkRRaU9qRTJPQ3dpTWpRMUlqb3hOemNzSWpJME5pSTZOalVzSWpJME55STZNakl4TENJeU5EZ2lPakl3TWl3aU1qUTVJam94TmpNc0lqSTFNQ0k2TVRJNExDSXlOVEVpT2pRNUxDSXlOVElpT2pFeE1Td2lNalV6SWpveE1UQXNJakkxTkNJNk1UVXNJakkxTlNJNk5qZ3NJakkxTmlJNk1qSXhMQ0l5TlRjaU9qSXlPQ3dpTWpVNElqb3pOeXdpTWpVNUlqb3lOeXdpTWpZd0lqbzRNaXdpTWpZeElqb3hPVGdzSWpJMk1pSTZOU3dpTWpZeklqbzNMQ0l5TmpRaU9qSXhPQ3dpTWpZMUlqb3hNak1zSWpJMk5pSTZNakk0TENJeU5qY2lPakUwTUN3aU1qWTRJam8yT0N3aU1qWTVJam94TkRFc0lqSTNNQ0k2TVRjeExDSXlOekVpT2pnMExDSXlOeklpT2pFNU1pd2lNamN6SWpvd0xDSXlOelFpT2pJeExDSXlOelVpT2pZeExDSXlOellpT2pFeUxDSXlOemNpT2pJNExDSXlOemdpT2pJc0lqSTNPU0k2TVRVc0lqSTRNQ0k2TVRVM0xDSXlPREVpT2pVeUxDSXlPRElpT2pJd09Dd2lNamd6SWpveE16a3NJakk0TkNJNk1qZ3NJakk0TlNJNk5qQXNJakk0TmlJNk5ERXNJakk0TnlJNk1qUXNJakk0T0NJNk1qSTNMQ0l5T0RraU9qSXNJakk1TUNJNk15d2lNamt4SWpveExDSXlPVElpT2pBc0lqSTVNeUk2TVgwPSIsImlzcyI6Imh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSIsImlhdCI6IjE1MTA2MzI5OTkiLCJleHAiOiIxNTEwNjM2NTk5IiwiYWxnIjoiUlMyNTYiLCJraWQiOiIzY2U0YTk3ZDUwMmFmMDU4ZWI2NmFjOGQ3MzBhNTkyYWI3Y2VhN2YxIn19\",\n  idp: {\n    domain: \"google.com\",\n    protocol: \"OIDC\"\n  }, info: {\n    accessToken: \"ya29.GlsEBdnBCw-KLmpgfhQZE4PhEJXlGmWmrJYO1L-r-uy7yvyK31CLzQuh8YWzvQk19LU_ab6G7mRdGHSa2ynGm2F2U9iBz6guiWinJ2QbqRxoTN9U5G__8AqTKlWg\",\n    idToken: \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjNjZTRhOTdkNTAyYWYwNThlYjY2YWM4ZDczMGE1OTJhYjdjZWE3ZjEifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDMxNTQ0OTE3MTEyNzUxMjYzNDIiLCJlbWFpbCI6InRlc3RhbmR0aGluazMyMUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6IjIyRnI5aXZoNWJ5eGUta1dOOGlva1EiLCJub25jZSI6ImV5SXdJam8wT0N3aU1TSTZNVE13TENJeUlqb3hMQ0l6SWpvek5Dd2lOQ0k2TkRnc0lqVWlPakV6TENJMklqbzJMQ0kzSWpvNUxDSTRJam8wTWl3aU9TSTZNVE0wTENJeE1DSTZOeklzSWpFeElqb3hNelFzSWpFeUlqb3lORGNzSWpFeklqb3hNeXdpTVRRaU9qRXNJakUxSWpveExDSXhOaUk2TVN3aU1UY2lPalVzSWpFNElqb3dMQ0l4T1NJNk15d2lNakFpT2pFek1Dd2lNakVpT2pFc0lqSXlJam94TlN3aU1qTWlPakFzSWpJMElqbzBPQ3dpTWpVaU9qRXpNQ3dpTWpZaU9qRXNJakkzSWpveE1Dd2lNamdpT2pJc0lqSTVJam94TXpBc0lqTXdJam94TENJek1TSTZNU3dpTXpJaU9qQXNJak16SWpveE5UQXNJak0wSWpvNUxDSXpOU0k2T0Rnc0lqTTJJam94TmpBc0lqTTNJam95TkRrc0lqTTRJam94TkRBc0lqTTVJam95TXprc0lqUXdJam94TURBc0lqUXhJam96TkN3aU5ESWlPakkxTVN3aU5ETWlPakUwTWl3aU5EUWlPakU1T1N3aU5EVWlPakl3TENJME5pSTZNVE0zTENJME55STZNakF5TENJME9DSTZNVGdzSWpRNUlqb3hPRE1zSWpVd0lqb3hOVGdzSWpVeElqb3lNemNzSWpVeUlqb3lOVFFzSWpVeklqbzJPQ3dpTlRRaU9qSXpOaXdpTlRVaU9qRXlOU3dpTlRZaU9qWTVMQ0kxTnlJNk1UUXNJalU0SWpvNE9Dd2lOVGtpT2pFeU9Dd2lOakFpT2pFeU5Dd2lOakVpT2pJd01Dd2lOaklpT2pJd09Td2lOak1pT2pFNU5Dd2lOalFpT2pFME5Dd2lOalVpT2pJd015d2lOallpT2pFMUxDSTJOeUk2TWpBekxDSTJPQ0k2TWpBd0xDSTJPU0k2TXpJc0lqY3dJam95TVRRc0lqY3hJam95TlRFc0lqY3lJam80TVN3aU56TWlPakU0T0N3aU56UWlPakUyTWl3aU56VWlPakV3TlN3aU56WWlPamM1TENJM055STZPRGNzSWpjNElqbzJPQ3dpTnpraU9qRTBNU3dpT0RBaU9qWXdMQ0k0TVNJNk9EZ3NJamd5SWpvNE5Dd2lPRE1pT2pZMUxDSTROQ0k2TkRZc0lqZzFJam94TURBc0lqZzJJam95TWpnc0lqZzNJam80T0N3aU9EZ2lPakl3TWl3aU9Ea2lPak15TENJNU1DSTZNVGN5TENJNU1TSTZNVEE1TENJNU1pSTZOVEFzSWpreklqb3lNRFlzSWprMElqb3lNVFFzSWprMUlqb3lORFFzSWprMklqb3hNRFVzSWprM0lqbzFPU3dpT1RnaU9qRXhNQ3dpT1RraU9qRTJMQ0l4TURBaU9qRTVOeXdpTVRBeElqb3lNRE1zSWpFd01pSTZOaXdpTVRBeklqb3hNQ3dpTVRBMElqbzBNeXdpTVRBMUlqbzNMQ0l4TURZaU9qTTFMQ0l4TURjaU9qSTBPQ3dpTVRBNElqb3hORFlzSWpFd09TSTZNVFV3TENJeE1UQWlPakU1TXl3aU1URXhJam95TkRRc0lqRXhNaUk2TVRZMkxDSXhNVE1pT2pFek9Td2lNVEUwSWpveE9ESXNJakV4TlNJNk56Z3NJakV4TmlJNk1UVXhMQ0l4TVRjaU9qRTRMQ0l4TVRnaU9qUXNJakV4T1NJNk5qUXNJakV5TUNJNk5UVXNJakV5TVNJNk1qRTFMQ0l4TWpJaU9qRXhNU3dpTVRJeklqb3hPVGtzSWpFeU5DSTZPVGdzSWpFeU5TSTZPQ3dpTVRJMklqb3pMQ0l4TWpjaU9qUXlMQ0l4TWpnaU9qRXdPU3dpTVRJNUlqb3hPVFVzSWpFek1DSTZOekFzSWpFek1TSTZOakFzSWpFek1pSTZNVE01TENJeE16TWlPakU1TkN3aU1UTTBJam94TVRFc0lqRXpOU0k2TVRZekxDSXhNellpT2pFNU1pd2lNVE0zSWpvMk1pd2lNVE00SWpveE55d2lNVE01SWpveU1ETXNJakUwTUNJNk1URTNMQ0l4TkRFaU9qUTFMQ0l4TkRJaU9qRTBNaXdpTVRReklqb3hPU3dpTVRRMElqb3hOallzSWpFME5TSTZPVEFzSWpFME5pSTZNVGN4TENJeE5EY2lPams1TENJeE5EZ2lPakUzTUN3aU1UUTVJam94TlRRc0lqRTFNQ0k2TXpjc0lqRTFNU0k2TWpBNExDSXhOVElpT2pFME55d2lNVFV6SWpveE15d2lNVFUwSWpveE9UWXNJakUxTlNJNk5UWXNJakUxTmlJNk1UZzJMQ0l4TlRjaU9qRTRNQ3dpTVRVNElqb3hPVFFzSWpFMU9TSTZNakl3TENJeE5qQWlPakV5TWl3aU1UWXhJam8wTml3aU1UWXlJam95TWpJc0lqRTJNeUk2TVRjMkxDSXhOalFpT2pjd0xDSXhOalVpT2pVNUxDSXhOallpT2pFekxDSXhOamNpT2pJeU15d2lNVFk0SWpvNU1Td2lNVFk1SWpveE1EZ3NJakUzTUNJNk1UYzNMQ0l4TnpFaU9qSXhOQ3dpTVRjeUlqbzNNaXdpTVRjeklqb3pNQ3dpTVRjMElqb3lNaklzSWpFM05TSTZORElzSWpFM05pSTZNakkwTENJeE56Y2lPakl3TVN3aU1UYzRJam8xTWl3aU1UYzVJam95TVRFc0lqRTRNQ0k2TWpRMkxDSXhPREVpT2pFNE5Dd2lNVGd5SWpveU1Td2lNVGd6SWpvNU5pd2lNVGcwSWpveE5Ea3NJakU0TlNJNk9Ua3NJakU0TmlJNk1UQXhMQ0l4T0RjaU9qRTBOeXdpTVRnNElqb3hOek1zSWpFNE9TSTZNalE0TENJeE9UQWlPakUyTml3aU1Ua3hJam96TVN3aU1Ua3lJam94Tmprc0lqRTVNeUk2T1RNc0lqRTVOQ0k2TWpFMExDSXhPVFVpT2pFeU5Dd2lNVGsySWpveU9Dd2lNVGszSWpvMk1Td2lNVGs0SWpvMU9Td2lNVGs1SWpvek9Dd2lNakF3SWpveE1EQXNJakl3TVNJNk5URXNJakl3TWlJNk5EZ3NJakl3TXlJNk9Ua3NJakl3TkNJNk1Ua3hMQ0l5TURVaU9qRTVOeXdpTWpBMklqbzFPQ3dpTWpBM0lqb3hPREFzSWpJd09DSTZNVFUwTENJeU1Ea2lPakUyTnl3aU1qRXdJam94TWpFc0lqSXhNU0k2TWpBMUxDSXlNVElpT2pJek5pd2lNakV6SWpveU1Td2lNakUwSWpveE9EY3NJakl4TlNJNk1qTXpMQ0l5TVRZaU9qSTFNeXdpTWpFM0lqbzJOaXdpTWpFNElqbzJOaXdpTWpFNUlqb3hPRElzSWpJeU1DSTZNak0xTENJeU1qRWlPakl4TWl3aU1qSXlJam96TWl3aU1qSXpJam94TXpZc0lqSXlOQ0k2TnpFc0lqSXlOU0k2TVRnM0xDSXlNallpT2pJeU9Dd2lNakkzSWpveU16TXNJakl5T0NJNk56UXNJakl5T1NJNk1URTRMQ0l5TXpBaU9qRXlNQ3dpTWpNeElqbzJPU3dpTWpNeUlqb3hPVEFzSWpJek15STZOek1zSWpJek5DSTZNVFF4TENJeU16VWlPalF5TENJeU16WWlPams0TENJeU16Y2lPak01TENJeU16Z2lPakUxTXl3aU1qTTVJam81TWl3aU1qUXdJam8zT0N3aU1qUXhJam95Tml3aU1qUXlJam95TVRrc0lqSTBNeUk2TVRrNExDSXlORFFpT2pFMk9Dd2lNalExSWpveE56Y3NJakkwTmlJNk5qVXNJakkwTnlJNk1qSXhMQ0l5TkRnaU9qSXdNaXdpTWpRNUlqb3hOak1zSWpJMU1DSTZNVEk0TENJeU5URWlPalE1TENJeU5USWlPakV4TVN3aU1qVXpJam94TVRBc0lqSTFOQ0k2TVRVc0lqSTFOU0k2Tmpnc0lqSTFOaUk2TWpJeExDSXlOVGNpT2pJeU9Dd2lNalU0SWpvek55d2lNalU1SWpveU55d2lNall3SWpvNE1pd2lNall4SWpveE9UZ3NJakkyTWlJNk5Td2lNall6SWpvM0xDSXlOalFpT2pJeE9Dd2lNalkxSWpveE1qTXNJakkyTmlJNk1qSTRMQ0l5TmpjaU9qRTBNQ3dpTWpZNElqbzJPQ3dpTWpZNUlqb3hOREVzSWpJM01DSTZNVGN4TENJeU56RWlPamcwTENJeU56SWlPakU1TWl3aU1qY3pJam93TENJeU56UWlPakl4TENJeU56VWlPall4TENJeU56WWlPakV5TENJeU56Y2lPakk0TENJeU56Z2lPaklzSWpJM09TSTZNVFVzSWpJNE1DSTZNVFUzTENJeU9ERWlPalV5TENJeU9ESWlPakl3T0N3aU1qZ3pJam94TXprc0lqSTROQ0k2TWpnc0lqSTROU0k2TmpBc0lqSTROaUk2TkRFc0lqSTROeUk2TWpRc0lqSTRPQ0k2TWpJM0xDSXlPRGtpT2pJc0lqSTVNQ0k2TXl3aU1qa3hJam94TENJeU9USWlPakFzSWpJNU15STZNWDA9IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoxNTEwNjMyOTk5LCJleHAiOjE1MTA2MzY1OTl9.Oa4hE1rylkC1cfO-mZOHbT-HVnIGzADCZMjtTduNO4ohqgWIRIJWChvbrZGGFWrA2Gu20EURIm4nBWmqSMLrnfhzXaVQ5nzAIGxjV_6P9amLPHxQYmrEqNEjCO0M2z1UAB9TUppHLrnE1ysKuC3cHh7T7jmk7o3teXTj10fWPWPk9uxmef0_MpF05HpT4JFnbEyeYGc9NkHK7wDfMXml64FWpOhkgpIWbW2cIzjrsN9BIGZqTo-L6AC6TA_QtraPzv4hPX2soz6s9LdfzBmpT6g9IuI8v9g8lJDTSdJm3kEvsW46wKxvpp197Ht4CqmIG6gKzitCMgpcYNp2BQUeiA\", \"refreshToken\": \"1/LBBKBTnJwoKroYzPHboK6iA-i-afFWMLH2VABBb6Bhk\",\n    tokenType: \"Bearer\",\n    infoToken: {\n      sub: \"103154491711275126342\",\n      name: \"test think\",\n      given_name: \"test\",\n      family_name: \"think\",\n      picture: \"https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg\",\n      email: \"testandthink321@gmail.com\",\n      email_verified: true,\n      locale: \"en\" },\n    tokenIDJSON: {\n      azp: \"808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com\",\n      aud: \"808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com\",\n      sub: \"103154491711275126342\",\n      email: \"testandthink321@gmail.com\",\n      email_verified: \"true\",\n      at_hash: \"22Fr9ivh5byxe-kWN8iokQ\",\n      nonce: \"eyIwIjo0OCwiMSI6MTMwLCIyIjoxLCIzIjozNCwiNCI6NDgsIjUiOjEzLCI2Ijo2LCI3Ijo5LCI4Ijo0MiwiOSI6MTM0LCIxMCI6NzIsIjExIjoxMzQsIjEyIjoyNDcsIjEzIjoxMywiMTQiOjEsIjE1IjoxLCIxNiI6MSwiMTciOjUsIjE4IjowLCIxOSI6MywiMjAiOjEzMCwiMjEiOjEsIjIyIjoxNSwiMjMiOjAsIjI0Ijo0OCwiMjUiOjEzMCwiMjYiOjEsIjI3IjoxMCwiMjgiOjIsIjI5IjoxMzAsIjMwIjoxLCIzMSI6MSwiMzIiOjAsIjMzIjoxNTAsIjM0Ijo5LCIzNSI6ODgsIjM2IjoxNjAsIjM3IjoyNDksIjM4IjoxNDAsIjM5IjoyMzksIjQwIjoxMDAsIjQxIjozNCwiNDIiOjI1MSwiNDMiOjE0MiwiNDQiOjE5OSwiNDUiOjIwLCI0NiI6MTM3LCI0NyI6MjAyLCI0OCI6MTgsIjQ5IjoxODMsIjUwIjoxNTgsIjUxIjoyMzcsIjUyIjoyNTQsIjUzIjo2OCwiNTQiOjIzNiwiNTUiOjEyNSwiNTYiOjY5LCI1NyI6MTQsIjU4Ijo4OCwiNTkiOjEyOCwiNjAiOjEyNCwiNjEiOjIwMCwiNjIiOjIwOSwiNjMiOjE5NCwiNjQiOjE0NCwiNjUiOjIwMywiNjYiOjE1LCI2NyI6MjAzLCI2OCI6MjAwLCI2OSI6MzIsIjcwIjoyMTQsIjcxIjoyNTEsIjcyIjo4MSwiNzMiOjE4OCwiNzQiOjE2MiwiNzUiOjEwNSwiNzYiOjc5LCI3NyI6ODcsIjc4Ijo2OCwiNzkiOjE0MSwiODAiOjYwLCI4MSI6ODgsIjgyIjo4NCwiODMiOjY1LCI4NCI6NDYsIjg1IjoxMDAsIjg2IjoyMjgsIjg3Ijo4OCwiODgiOjIwMiwiODkiOjMyLCI5MCI6MTcyLCI5MSI6MTA5LCI5MiI6NTAsIjkzIjoyMDYsIjk0IjoyMTQsIjk1IjoyNDQsIjk2IjoxMDUsIjk3Ijo1OSwiOTgiOjExMCwiOTkiOjE2LCIxMDAiOjE5NywiMTAxIjoyMDMsIjEwMiI6NiwiMTAzIjoxMCwiMTA0Ijo0MywiMTA1Ijo3LCIxMDYiOjM1LCIxMDciOjI0OCwiMTA4IjoxNDYsIjEwOSI6MTUwLCIxMTAiOjE5MywiMTExIjoyNDQsIjExMiI6MTY2LCIxMTMiOjEzOSwiMTE0IjoxODIsIjExNSI6NzgsIjExNiI6MTUxLCIxMTciOjE4LCIxMTgiOjQsIjExOSI6NjQsIjEyMCI6NTUsIjEyMSI6MjE1LCIxMjIiOjExMSwiMTIzIjoxOTksIjEyNCI6OTgsIjEyNSI6OCwiMTI2IjozLCIxMjciOjQyLCIxMjgiOjEwOSwiMTI5IjoxOTUsIjEzMCI6NzAsIjEzMSI6NjAsIjEzMiI6MTM5LCIxMzMiOjE5NCwiMTM0IjoxMTEsIjEzNSI6MTYzLCIxMzYiOjE5MiwiMTM3Ijo2MiwiMTM4IjoxNywiMTM5IjoyMDMsIjE0MCI6MTE3LCIxNDEiOjQ1LCIxNDIiOjE0MiwiMTQzIjoxOSwiMTQ0IjoxNjYsIjE0NSI6OTAsIjE0NiI6MTcxLCIxNDciOjk5LCIxNDgiOjE3MCwiMTQ5IjoxNTQsIjE1MCI6MzcsIjE1MSI6MjA4LCIxNTIiOjE0NywiMTUzIjoxMywiMTU0IjoxOTYsIjE1NSI6NTYsIjE1NiI6MTg2LCIxNTciOjE4MCwiMTU4IjoxOTQsIjE1OSI6MjIwLCIxNjAiOjEyMiwiMTYxIjo0NiwiMTYyIjoyMjIsIjE2MyI6MTc2LCIxNjQiOjcwLCIxNjUiOjU5LCIxNjYiOjEzLCIxNjciOjIyMywiMTY4Ijo5MSwiMTY5IjoxMDgsIjE3MCI6MTc3LCIxNzEiOjIxNCwiMTcyIjo3MiwiMTczIjozMCwiMTc0IjoyMjIsIjE3NSI6NDIsIjE3NiI6MjI0LCIxNzciOjIwMSwiMTc4Ijo1MiwiMTc5IjoyMTEsIjE4MCI6MjQ2LCIxODEiOjE4NCwiMTgyIjoyMSwiMTgzIjo5NiwiMTg0IjoxNDksIjE4NSI6OTksIjE4NiI6MTAxLCIxODciOjE0NywiMTg4IjoxNzMsIjE4OSI6MjQ4LCIxOTAiOjE2NiwiMTkxIjozMSwiMTkyIjoxNjksIjE5MyI6OTMsIjE5NCI6MjE0LCIxOTUiOjEyNCwiMTk2IjoyOCwiMTk3Ijo2MSwiMTk4Ijo1OSwiMTk5IjozOCwiMjAwIjoxMDAsIjIwMSI6NTEsIjIwMiI6NDgsIjIwMyI6OTksIjIwNCI6MTkxLCIyMDUiOjE5NywiMjA2Ijo1OCwiMjA3IjoxODAsIjIwOCI6MTU0LCIyMDkiOjE2NywiMjEwIjoxMjEsIjIxMSI6MjA1LCIyMTIiOjIzNiwiMjEzIjoyMSwiMjE0IjoxODcsIjIxNSI6MjMzLCIyMTYiOjI1MywiMjE3Ijo2NiwiMjE4Ijo2NiwiMjE5IjoxODIsIjIyMCI6MjM1LCIyMjEiOjIxMiwiMjIyIjozMiwiMjIzIjoxMzYsIjIyNCI6NzEsIjIyNSI6MTg3LCIyMjYiOjIyOCwiMjI3IjoyMzMsIjIyOCI6NzQsIjIyOSI6MTE4LCIyMzAiOjEyMCwiMjMxIjo2OSwiMjMyIjoxOTAsIjIzMyI6NzMsIjIzNCI6MTQxLCIyMzUiOjQyLCIyMzYiOjk4LCIyMzciOjM5LCIyMzgiOjE1MywiMjM5Ijo5MiwiMjQwIjo3OCwiMjQxIjoyNiwiMjQyIjoyMTksIjI0MyI6MTk4LCIyNDQiOjE2OCwiMjQ1IjoxNzcsIjI0NiI6NjUsIjI0NyI6MjIxLCIyNDgiOjIwMiwiMjQ5IjoxNjMsIjI1MCI6MTI4LCIyNTEiOjQ5LCIyNTIiOjExMSwiMjUzIjoxMTAsIjI1NCI6MTUsIjI1NSI6NjgsIjI1NiI6MjIxLCIyNTciOjIyOCwiMjU4IjozNywiMjU5IjoyNywiMjYwIjo4MiwiMjYxIjoxOTgsIjI2MiI6NSwiMjYzIjo3LCIyNjQiOjIxOCwiMjY1IjoxMjMsIjI2NiI6MjI4LCIyNjciOjE0MCwiMjY4Ijo2OCwiMjY5IjoxNDEsIjI3MCI6MTcxLCIyNzEiOjg0LCIyNzIiOjE5MiwiMjczIjowLCIyNzQiOjIxLCIyNzUiOjYxLCIyNzYiOjEyLCIyNzciOjI4LCIyNzgiOjIsIjI3OSI6MTUsIjI4MCI6MTU3LCIyODEiOjUyLCIyODIiOjIwOCwiMjgzIjoxMzksIjI4NCI6MjgsIjI4NSI6NjAsIjI4NiI6NDEsIjI4NyI6MjQsIjI4OCI6MjI3LCIyODkiOjIsIjI5MCI6MywiMjkxIjoxLCIyOTIiOjAsIjI5MyI6MX0=\",\n      iss: \"https://accounts.google.com\",\n      iat: \"1510632999\",\n      exp: \"1510636599\",\n      alg: \"RS256\",\n      kid: \"3ce4a97d502af058eb66ac8d730a592ab7cea7f1\" },\n    expires: \"1910636599\",\n    email: \"testandthink321@gmail.com\" },\n  infoToken: {\n    sub: \"103154491711275126342\",\n    name: \"test think\",\n    given_name: \"test\",\n    family_name: \"think\",\n    picture: \"https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg\",\n    email: \"testandthink321@gmail.com\",\n    email_verified: true,\n    locale: \"en\" },\n  identity: \"user://google.com/testandthink321@gmail.com\",\n  messageInfo: {\n    userProfile: {\n      username: \"testandthink321@gmail.com\",\n      cn: \"testandthink321\",\n      avatar: \"https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg\",\n      locale: \"en\",\n      userURL: \"user://google.com/testandthink321@gmail.com\" },\n    idp: \"google.com\",\n    assertion: \"eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqTmpaVFJoT1Rka05UQXlZV1l3TlRobFlqWTJZV000WkRjek1HRTFPVEpoWWpkalpXRTNaakVpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWpJeVJuSTVhWFpvTldKNWVHVXRhMWRPT0dsdmExRWlMQ0p1YjI1alpTSTZJbVY1U1hkSmFtOHdUME4zYVUxVFNUWk5WRTEzVEVOSmVVbHFiM2hNUTBsNlNXcHZlazVEZDJsT1EwazJUa1JuYzBscVZXbFBha1Y2VEVOSk1rbHFiekpNUTBrelNXcHZOVXhEU1RSSmFtOHdUV2wzYVU5VFNUWk5WRTB3VEVOSmVFMURTVFpPZWtselNXcEZlRWxxYjNoTmVsRnpTV3BGZVVscWIzbE9SR056U1dwRmVrbHFiM2hOZVhkcFRWUlJhVTlxUlhOSmFrVXhTV3B2ZUV4RFNYaE9hVWsyVFZOM2FVMVVZMmxQYWxWelNXcEZORWxxYjNkTVEwbDRUMU5KTmsxNWQybE5ha0ZwVDJwRmVrMURkMmxOYWtWcFQycEZjMGxxU1hsSmFtOTRUbE4zYVUxcVRXbFBha0Z6U1dwSk1FbHFiekJQUTNkcFRXcFZhVTlxUlhwTlEzZHBUV3BaYVU5cVJYTkpha2t6U1dwdmVFMURkMmxOYW1kcFQycEpjMGxxU1RWSmFtOTRUWHBCYzBscVRYZEphbTk0VEVOSmVrMVRTVFpOVTNkcFRYcEphVTlxUVhOSmFrMTZTV3B2ZUU1VVFYTkphazB3U1dwdk5VeERTWHBPVTBrMlQwUm5jMGxxVFRKSmFtOTRUbXBCYzBscVRUTkphbTk1VGtScmMwbHFUVFJKYW05NFRrUkJjMGxxVFRWSmFtOTVUWHByYzBscVVYZEphbTk0VFVSQmMwbHFVWGhKYW05NlRrTjNhVTVFU1dsUGFra3hUVk4zYVU1RVRXbFBha1V3VFdsM2FVNUVVV2xQYWtVMVQxTjNhVTVFVldsUGFrbDNURU5KTUU1cFNUWk5WRTB6VEVOSk1FNTVTVFpOYWtGNVRFTkpNRTlEU1RaTlZHZHpTV3BSTlVscWIzaFBSRTF6U1dwVmQwbHFiM2hPVkdkelNXcFZlRWxxYjNsTmVtTnpTV3BWZVVscWIzbE9WRkZ6U1dwVmVrbHFiekpQUTNkcFRsUlJhVTlxU1hwT2FYZHBUbFJWYVU5cVJYbE9VM2RwVGxSWmFVOXFXVFZNUTBreFRubEpOazFVVVhOSmFsVTBTV3B2TkU5RGQybE9WR3RwVDJwRmVVOURkMmxPYWtGcFQycEZlVTVEZDJsT2FrVnBUMnBKZDAxRGQybE9ha2xwVDJwSmQwOVRkMmxPYWsxcFQycEZOVTVEZDJsT2FsRnBUMnBGTUU1RGQybE9hbFZwVDJwSmQwMTVkMmxPYWxscFQycEZNVXhEU1RKT2VVazJUV3BCZWt4RFNUSlBRMGsyVFdwQmQweERTVEpQVTBrMlRYcEpjMGxxWTNkSmFtOTVUVlJSYzBscVkzaEphbTk1VGxSRmMwbHFZM2xKYW04MFRWTjNhVTU2VFdsUGFrVTBUME4zYVU1NlVXbFBha1V5VFdsM2FVNTZWV2xQYWtWM1RsTjNhVTU2V1dsUGFtTTFURU5KTTA1NVNUWlBSR056U1dwak5FbHFiekpQUTNkcFRucHJhVTlxUlRCTlUzZHBUMFJCYVU5cVdYZE1RMGswVFZOSk5rOUVaM05KYW1kNVNXcHZORTVEZDJsUFJFMXBUMnBaTVV4RFNUUk9RMGsyVGtSWmMwbHFaekZKYW05NFRVUkJjMGxxWnpKSmFtOTVUV3BuYzBscVp6TkphbTgwVDBOM2FVOUVaMmxQYWtsM1RXbDNhVTlFYTJsUGFrMTVURU5KTlUxRFNUWk5WR041VEVOSk5VMVRTVFpOVkVFMVRFTkpOVTFwU1RaT1ZFRnpTV3ByZWtscWIzbE5SRmx6U1dwck1FbHFiM2xOVkZGelNXcHJNVWxxYjNsT1JGRnpTV3ByTWtscWIzaE5SRlZ6U1dwck0wbHFiekZQVTNkcFQxUm5hVTlxUlhoTlEzZHBUMVJyYVU5cVJUSk1RMGw0VFVSQmFVOXFSVFZPZVhkcFRWUkJlRWxxYjNsTlJFMXpTV3BGZDAxcFNUWk9hWGRwVFZSQmVrbHFiM2hOUTNkcFRWUkJNRWxxYnpCTmVYZHBUVlJCTVVscWJ6Tk1RMGw0VFVSWmFVOXFUVEZNUTBsNFRVUmphVTlxU1RCUFEzZHBUVlJCTkVscWIzaE9SRmx6U1dwRmQwOVRTVFpOVkZWM1RFTkplRTFVUVdsUGFrVTFUWGwzYVUxVVJYaEphbTk1VGtSUmMwbHFSWGhOYVVrMlRWUlpNa3hEU1hoTlZFMXBUMnBGZWs5VGQybE5WRVV3U1dwdmVFOUVTWE5KYWtWNFRsTkpOazU2WjNOSmFrVjRUbWxKTmsxVVZYaE1RMGw0VFZSamFVOXFSVFJNUTBsNFRWUm5hVTlxVVhOSmFrVjRUMU5KTms1cVVYTkpha1Y1VFVOSk5rNVVWWE5KYWtWNVRWTkpOazFxUlRGTVEwbDRUV3BKYVU5cVJYaE5VM2RwVFZSSmVrbHFiM2hQVkd0elNXcEZlVTVEU1RaUFZHZHpTV3BGZVU1VFNUWlBRM2RwVFZSSk1rbHFiM3BNUTBsNFRXcGphVTlxVVhsTVEwbDRUV3BuYVU5cVJYZFBVM2RwVFZSSk5VbHFiM2hQVkZWelNXcEZlazFEU1RaT2VrRnpTV3BGZWsxVFNUWk9ha0Z6U1dwRmVrMXBTVFpOVkUwMVRFTkplRTE2VFdsUGFrVTFUa04zYVUxVVRUQkphbTk0VFZSRmMwbHFSWHBPVTBrMlRWUlpla3hEU1hoTmVsbHBUMnBGTlUxcGQybE5WRTB6U1dwdk1rMXBkMmxOVkUwMFNXcHZlRTU1ZDJsTlZFMDFTV3B2ZVUxRVRYTkpha1V3VFVOSk5rMVVSVE5NUTBsNFRrUkZhVTlxVVRGTVEwbDRUa1JKYVU5cVJUQk5hWGRwVFZSUmVrbHFiM2hQVTNkcFRWUlJNRWxxYjNoT2FsbHpTV3BGTUU1VFNUWlBWRUZ6U1dwRk1FNXBTVFpOVkdONFRFTkplRTVFWTJsUGFtczFURU5KZUU1RVoybFBha1V6VFVOM2FVMVVVVFZKYW05NFRsUlJjMGxxUlRGTlEwazJUWHBqYzBscVJURk5VMGsyVFdwQk5FeERTWGhPVkVscFQycEZNRTU1ZDJsTlZGVjZTV3B2ZUUxNWQybE5WRlV3U1dwdmVFOVVXWE5KYWtVeFRsTkpOazVVV1hOSmFrVXhUbWxKTmsxVVp6Sk1RMGw0VGxSamFVOXFSVFJOUTNkcFRWUlZORWxxYjNoUFZGRnpTV3BGTVU5VFNUWk5ha2wzVEVOSmVFNXFRV2xQYWtWNVRXbDNhVTFVV1hoSmFtOHdUbWwzYVUxVVdYbEphbTk1VFdwSmMwbHFSVEpOZVVrMlRWUmpNa3hEU1hoT2FsRnBUMnBqZDB4RFNYaE9hbFZwVDJwVk5VeERTWGhPYWxscFQycEZla3hEU1hoT2FtTnBUMnBKZVUxNWQybE5WRmswU1dwdk5VMVRkMmxOVkZrMVNXcHZlRTFFWjNOSmFrVXpUVU5KTmsxVVl6Tk1RMGw0VG5wRmFVOXFTWGhPUTNkcFRWUmplVWxxYnpOTmFYZHBUVlJqZWtscWIzcE5RM2RwVFZSak1FbHFiM2xOYWtselNXcEZNMDVUU1RaT1JFbHpTV3BGTTA1cFNUWk5ha2t3VEVOSmVFNTZZMmxQYWtsM1RWTjNhVTFVWXpSSmFtOHhUV2wzYVUxVVl6VkphbTk1VFZSRmMwbHFSVFJOUTBrMlRXcFJNa3hEU1hoUFJFVnBUMnBGTkU1RGQybE5WR2Q1U1dwdmVVMVRkMmxOVkdkNlNXcHZOVTVwZDJsTlZHY3dTV3B2ZUU1RWEzTkpha1UwVGxOSk5rOVVhM05KYWtVMFRtbEpOazFVUVhoTVEwbDRUMFJqYVU5cVJUQk9lWGRwVFZSbk5FbHFiM2hPZWsxelNXcEZORTlUU1RaTmFsRTBURU5KZUU5VVFXbFBha1V5VG1sM2FVMVVhM2hKYW05NlRWTjNhVTFVYTNsSmFtOTRUbXByYzBscVJUVk5lVWsyVDFSTmMwbHFSVFZPUTBrMlRXcEZNRXhEU1hoUFZGVnBUMnBGZVU1RGQybE5WR3N5U1dwdmVVOURkMmxOVkdzelNXcHZNazFUZDJsTlZHczBTV3B2TVU5VGQybE5WR3MxU1dwdmVrOURkMmxOYWtGM1NXcHZlRTFFUVhOSmFrbDNUVk5KTms1VVJYTkpha2wzVFdsSk5rNUVaM05KYWtsM1RYbEpOazlVYTNOSmFrbDNUa05KTmsxVWEzaE1RMGw1VFVSVmFVOXFSVFZPZVhkcFRXcEJNa2xxYnpGUFEzZHBUV3BCTTBscWIzaFBSRUZ6U1dwSmQwOURTVFpOVkZVd1RFTkplVTFFYTJsUGFrVXlUbmwzYVUxcVJYZEphbTk0VFdwRmMwbHFTWGhOVTBrMlRXcEJNVXhEU1hsTlZFbHBUMnBKZWs1cGQybE5ha1Y2U1dwdmVVMVRkMmxOYWtVd1NXcHZlRTlFWTNOSmFrbDRUbE5KTmsxcVRYcE1RMGw1VFZSWmFVOXFTVEZOZVhkcFRXcEZNMGxxYnpKT2FYZHBUV3BGTkVscWJ6Sk9hWGRwVFdwRk5VbHFiM2hQUkVselNXcEplVTFEU1RaTmFrMHhURU5KZVUxcVJXbFBha2w0VFdsM2FVMXFTWGxKYW05NlRXbDNhVTFxU1hwSmFtOTRUWHBaYzBscVNYbE9RMGsyVG5wRmMwbHFTWGxPVTBrMlRWUm5NMHhEU1hsTmFsbHBUMnBKZVU5RGQybE5ha2t6U1dwdmVVMTZUWE5KYWtsNVQwTkpOazU2VVhOSmFrbDVUMU5KTmsxVVJUUk1RMGw1VFhwQmFVOXFSWGxOUTNkcFRXcE5lRWxxYnpKUFUzZHBUV3BOZVVscWIzaFBWRUZ6U1dwSmVrMTVTVFpPZWsxelNXcEplazVEU1RaTlZGRjRURU5KZVUxNlZXbFBhbEY1VEVOSmVVMTZXV2xQYW1zMFRFTkplVTE2WTJsUGFrMDFURU5KZVUxNloybFBha1V4VFhsM2FVMXFUVFZKYW04MVRXbDNhVTFxVVhkSmFtOHpUME4zYVUxcVVYaEphbTk1VG1sM2FVMXFVWGxKYW05NVRWUnJjMGxxU1RCTmVVazJUVlJyTkV4RFNYbE9SRkZwVDJwRk1rOURkMmxOYWxFeFNXcHZlRTU2WTNOSmFra3dUbWxKTms1cVZYTkpha2t3VG5sSk5rMXFTWGhNUTBsNVRrUm5hVTlxU1hkTmFYZHBUV3BSTlVscWIzaE9hazF6U1dwSk1VMURTVFpOVkVrMFRFTkplVTVVUldsUGFsRTFURU5KZVU1VVNXbFBha1Y0VFZOM2FVMXFWWHBKYW05NFRWUkJjMGxxU1RGT1EwazJUVlJWYzBscVNURk9VMGsyVG1wbmMwbHFTVEZPYVVrMlRXcEplRXhEU1hsT1ZHTnBUMnBKZVU5RGQybE5hbFUwU1dwdmVrNTVkMmxOYWxVMVNXcHZlVTU1ZDJsTmFsbDNTV3B2TkUxcGQybE5hbGw0U1dwdmVFOVVaM05KYWtreVRXbEpOazVUZDJsTmFsbDZTV3B2TTB4RFNYbE9hbEZwVDJwSmVFOURkMmxOYWxreFNXcHZlRTFxVFhOSmFra3lUbWxKTmsxcVNUUk1RMGw1VG1wamFVOXFSVEJOUTNkcFRXcFpORWxxYnpKUFEzZHBUV3BaTlVscWIzaE9SRVZ6U1dwSk0wMURTVFpOVkdONFRFTkplVTU2UldsUGFtY3dURU5KZVU1NlNXbFBha1UxVFdsM2FVMXFZM3BKYW05M1RFTkplVTU2VVdsUGFrbDRURU5KZVU1NlZXbFBhbGw0VEVOSmVVNTZXV2xQYWtWNVRFTkplVTU2WTJsUGFrazBURU5KZVU1NloybFBha2x6U1dwSk0wOVRTVFpOVkZWelNXcEpORTFEU1RaTlZGVXpURU5KZVU5RVJXbFBhbFY1VEVOSmVVOUVTV2xQYWtsM1QwTjNhVTFxWjNwSmFtOTRUWHByYzBscVNUUk9RMGsyVFdwbmMwbHFTVFJPVTBrMlRtcEJjMGxxU1RST2FVazJUa1JGYzBscVNUUk9lVWsyVFdwUmMwbHFTVFJQUTBrMlRXcEpNMHhEU1hsUFJHdHBUMnBKYzBscVNUVk5RMGsyVFhsM2FVMXFhM2hKYW05NFRFTkplVTlVU1dsUGFrRnpTV3BKTlUxNVNUWk5XREE5SWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam94TlRFd05qTXlPVGs1TENKbGVIQWlPakUxTVRBMk16WTFPVGw5Lk9hNGhFMXJ5bGtDMWNmTy1tWk9IYlQtSFZuSUd6QURDWk1qdFRkdU5PNG9ocWdXSVJJSldDaHZiclpHR0ZXckEyR3UyMEVVUkltNG5CV21xU01Mcm5maHpYYVZRNW56QUlHeGpWXzZQOWFtTFBIeFFZbXJFcU5FakNPME0yejFVQUI5VFVwcEhMcm5FMXlzS3VDM2NIaDdUN2ptazdvM3RlWFRqMTBmV1BXUGs5dXhtZWYwX01wRjA1SHBUNEpGbmJFeWVZR2M5TmtISzd3RGZNWG1sNjRGV3BPaGtncElXYlcyY0l6anJzTjlCSUdacVRvLUw2QUM2VEFfUXRyYVB6djRoUFgyc296NnM5TGRmekJtcFQ2ZzlJdUk4djlnOGxKRFRTZEptM2tFdnNXNDZ3S3h2cHAxOTdIdDRDcW1JRzZnS3ppdENNZ3BjWU5wMkJRVWVpQSIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiIyMkZyOWl2aDVieXhlLWtXTjhpb2tRIiwibm9uY2UiOiJleUl3SWpvME9Dd2lNU0k2TVRNd0xDSXlJam94TENJeklqb3pOQ3dpTkNJNk5EZ3NJalVpT2pFekxDSTJJam8yTENJM0lqbzVMQ0k0SWpvME1pd2lPU0k2TVRNMExDSXhNQ0k2TnpJc0lqRXhJam94TXpRc0lqRXlJam95TkRjc0lqRXpJam94TXl3aU1UUWlPakVzSWpFMUlqb3hMQ0l4TmlJNk1Td2lNVGNpT2pVc0lqRTRJam93TENJeE9TSTZNeXdpTWpBaU9qRXpNQ3dpTWpFaU9qRXNJakl5SWpveE5Td2lNak1pT2pBc0lqSTBJam8wT0N3aU1qVWlPakV6TUN3aU1qWWlPakVzSWpJM0lqb3hNQ3dpTWpnaU9qSXNJakk1SWpveE16QXNJak13SWpveExDSXpNU0k2TVN3aU16SWlPakFzSWpNeklqb3hOVEFzSWpNMElqbzVMQ0l6TlNJNk9EZ3NJak0ySWpveE5qQXNJak0zSWpveU5Ea3NJak00SWpveE5EQXNJak01SWpveU16a3NJalF3SWpveE1EQXNJalF4SWpvek5Dd2lORElpT2pJMU1Td2lORE1pT2pFME1pd2lORFFpT2pFNU9Td2lORFVpT2pJd0xDSTBOaUk2TVRNM0xDSTBOeUk2TWpBeUxDSTBPQ0k2TVRnc0lqUTVJam94T0RNc0lqVXdJam94TlRnc0lqVXhJam95TXpjc0lqVXlJam95TlRRc0lqVXpJam8yT0N3aU5UUWlPakl6Tml3aU5UVWlPakV5TlN3aU5UWWlPalk1TENJMU55STZNVFFzSWpVNElqbzRPQ3dpTlRraU9qRXlPQ3dpTmpBaU9qRXlOQ3dpTmpFaU9qSXdNQ3dpTmpJaU9qSXdPU3dpTmpNaU9qRTVOQ3dpTmpRaU9qRTBOQ3dpTmpVaU9qSXdNeXdpTmpZaU9qRTFMQ0kyTnlJNk1qQXpMQ0kyT0NJNk1qQXdMQ0kyT1NJNk16SXNJamN3SWpveU1UUXNJamN4SWpveU5URXNJamN5SWpvNE1Td2lOek1pT2pFNE9Dd2lOelFpT2pFMk1pd2lOelVpT2pFd05Td2lOellpT2pjNUxDSTNOeUk2T0Rjc0lqYzRJam8yT0N3aU56a2lPakUwTVN3aU9EQWlPall3TENJNE1TSTZPRGdzSWpneUlqbzROQ3dpT0RNaU9qWTFMQ0k0TkNJNk5EWXNJamcxSWpveE1EQXNJamcySWpveU1qZ3NJamczSWpvNE9Dd2lPRGdpT2pJd01pd2lPRGtpT2pNeUxDSTVNQ0k2TVRjeUxDSTVNU0k2TVRBNUxDSTVNaUk2TlRBc0lqa3pJam95TURZc0lqazBJam95TVRRc0lqazFJam95TkRRc0lqazJJam94TURVc0lqazNJam8xT1N3aU9UZ2lPakV4TUN3aU9Ua2lPakUyTENJeE1EQWlPakU1Tnl3aU1UQXhJam95TURNc0lqRXdNaUk2Tml3aU1UQXpJam94TUN3aU1UQTBJam8wTXl3aU1UQTFJam8zTENJeE1EWWlPak0xTENJeE1EY2lPakkwT0N3aU1UQTRJam94TkRZc0lqRXdPU0k2TVRVd0xDSXhNVEFpT2pFNU15d2lNVEV4SWpveU5EUXNJakV4TWlJNk1UWTJMQ0l4TVRNaU9qRXpPU3dpTVRFMElqb3hPRElzSWpFeE5TSTZOemdzSWpFeE5pSTZNVFV4TENJeE1UY2lPakU0TENJeE1UZ2lPalFzSWpFeE9TSTZOalFzSWpFeU1DSTZOVFVzSWpFeU1TSTZNakUxTENJeE1qSWlPakV4TVN3aU1USXpJam94T1Rrc0lqRXlOQ0k2T1Rnc0lqRXlOU0k2T0N3aU1USTJJam96TENJeE1qY2lPalF5TENJeE1qZ2lPakV3T1N3aU1USTVJam94T1RVc0lqRXpNQ0k2TnpBc0lqRXpNU0k2TmpBc0lqRXpNaUk2TVRNNUxDSXhNek1pT2pFNU5Dd2lNVE0wSWpveE1URXNJakV6TlNJNk1UWXpMQ0l4TXpZaU9qRTVNaXdpTVRNM0lqbzJNaXdpTVRNNElqb3hOeXdpTVRNNUlqb3lNRE1zSWpFME1DSTZNVEUzTENJeE5ERWlPalExTENJeE5ESWlPakUwTWl3aU1UUXpJam94T1N3aU1UUTBJam94TmpZc0lqRTBOU0k2T1RBc0lqRTBOaUk2TVRjeExDSXhORGNpT2prNUxDSXhORGdpT2pFM01Dd2lNVFE1SWpveE5UUXNJakUxTUNJNk16Y3NJakUxTVNJNk1qQTRMQ0l4TlRJaU9qRTBOeXdpTVRVeklqb3hNeXdpTVRVMElqb3hPVFlzSWpFMU5TSTZOVFlzSWpFMU5pSTZNVGcyTENJeE5UY2lPakU0TUN3aU1UVTRJam94T1RRc0lqRTFPU0k2TWpJd0xDSXhOakFpT2pFeU1pd2lNVFl4SWpvME5pd2lNVFl5SWpveU1qSXNJakUyTXlJNk1UYzJMQ0l4TmpRaU9qY3dMQ0l4TmpVaU9qVTVMQ0l4TmpZaU9qRXpMQ0l4TmpjaU9qSXlNeXdpTVRZNElqbzVNU3dpTVRZNUlqb3hNRGdzSWpFM01DSTZNVGMzTENJeE56RWlPakl4TkN3aU1UY3lJam8zTWl3aU1UY3pJam96TUN3aU1UYzBJam95TWpJc0lqRTNOU0k2TkRJc0lqRTNOaUk2TWpJMExDSXhOemNpT2pJd01Td2lNVGM0SWpvMU1pd2lNVGM1SWpveU1URXNJakU0TUNJNk1qUTJMQ0l4T0RFaU9qRTROQ3dpTVRneUlqb3lNU3dpTVRneklqbzVOaXdpTVRnMElqb3hORGtzSWpFNE5TSTZPVGtzSWpFNE5pSTZNVEF4TENJeE9EY2lPakUwTnl3aU1UZzRJam94TnpNc0lqRTRPU0k2TWpRNExDSXhPVEFpT2pFMk5pd2lNVGt4SWpvek1Td2lNVGt5SWpveE5qa3NJakU1TXlJNk9UTXNJakU1TkNJNk1qRTBMQ0l4T1RVaU9qRXlOQ3dpTVRrMklqb3lPQ3dpTVRrM0lqbzJNU3dpTVRrNElqbzFPU3dpTVRrNUlqb3pPQ3dpTWpBd0lqb3hNREFzSWpJd01TSTZOVEVzSWpJd01pSTZORGdzSWpJd015STZPVGtzSWpJd05DSTZNVGt4TENJeU1EVWlPakU1Tnl3aU1qQTJJam8xT0N3aU1qQTNJam94T0RBc0lqSXdPQ0k2TVRVMExDSXlNRGtpT2pFMk55d2lNakV3SWpveE1qRXNJakl4TVNJNk1qQTFMQ0l5TVRJaU9qSXpOaXdpTWpFeklqb3lNU3dpTWpFMElqb3hPRGNzSWpJeE5TSTZNak16TENJeU1UWWlPakkxTXl3aU1qRTNJam8yTml3aU1qRTRJam8yTml3aU1qRTVJam94T0RJc0lqSXlNQ0k2TWpNMUxDSXlNakVpT2pJeE1pd2lNakl5SWpvek1pd2lNakl6SWpveE16WXNJakl5TkNJNk56RXNJakl5TlNJNk1UZzNMQ0l5TWpZaU9qSXlPQ3dpTWpJM0lqb3lNek1zSWpJeU9DSTZOelFzSWpJeU9TSTZNVEU0TENJeU16QWlPakV5TUN3aU1qTXhJam8yT1N3aU1qTXlJam94T1RBc0lqSXpNeUk2TnpNc0lqSXpOQ0k2TVRReExDSXlNelVpT2pReUxDSXlNellpT2prNExDSXlNemNpT2pNNUxDSXlNemdpT2pFMU15d2lNak01SWpvNU1pd2lNalF3SWpvM09Dd2lNalF4SWpveU5pd2lNalF5SWpveU1Ua3NJakkwTXlJNk1UazRMQ0l5TkRRaU9qRTJPQ3dpTWpRMUlqb3hOemNzSWpJME5pSTZOalVzSWpJME55STZNakl4TENJeU5EZ2lPakl3TWl3aU1qUTVJam94TmpNc0lqSTFNQ0k2TVRJNExDSXlOVEVpT2pRNUxDSXlOVElpT2pFeE1Td2lNalV6SWpveE1UQXNJakkxTkNJNk1UVXNJakkxTlNJNk5qZ3NJakkxTmlJNk1qSXhMQ0l5TlRjaU9qSXlPQ3dpTWpVNElqb3pOeXdpTWpVNUlqb3lOeXdpTWpZd0lqbzRNaXdpTWpZeElqb3hPVGdzSWpJMk1pSTZOU3dpTWpZeklqbzNMQ0l5TmpRaU9qSXhPQ3dpTWpZMUlqb3hNak1zSWpJMk5pSTZNakk0TENJeU5qY2lPakUwTUN3aU1qWTRJam8yT0N3aU1qWTVJam94TkRFc0lqSTNNQ0k2TVRjeExDSXlOekVpT2pnMExDSXlOeklpT2pFNU1pd2lNamN6SWpvd0xDSXlOelFpT2pJeExDSXlOelVpT2pZeExDSXlOellpT2pFeUxDSXlOemNpT2pJNExDSXlOemdpT2pJc0lqSTNPU0k2TVRVc0lqSTRNQ0k2TVRVM0xDSXlPREVpT2pVeUxDSXlPRElpT2pJd09Dd2lNamd6SWpveE16a3NJakk0TkNJNk1qZ3NJakk0TlNJNk5qQXNJakk0TmlJNk5ERXNJakk0TnlJNk1qUXNJakk0T0NJNk1qSTNMQ0l5T0RraU9qSXNJakk1TUNJNk15d2lNamt4SWpveExDSXlPVElpT2pBc0lqSTVNeUk2TVgwPSIsImlzcyI6Imh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSIsImlhdCI6IjE1MTA2MzI5OTkiLCJleHAiOiIxNTEwNjM2NTk5IiwiYWxnIjoiUlMyNTYiLCJraWQiOiIzY2U0YTk3ZDUwMmFmMDU4ZWI2NmFjOGQ3MzBhNTkyYWI3Y2VhN2YxIn19\",\n    expires: \"1510636599\" }\n  //keyPair:{ public: new Uint8Array([48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,150,9,88,160,249,140,239,100,34,251,142,199,20,137,202,18,183,158,237,254,68,236,125,69,14,88,128,124,200,209,194,144,203,15,203,200,32,214,251,81,188,162,105,79,87,68,141,60,88,84,65,46,100,228,88,202,32,172,109,50,206,214,244,105,59,110,16,197,203,6,10,43,7,35,248,146,150,193,244,166,139,182,78,151,18,4,64,55,215,111,199,98,8,3,42,109,195,70,60,139,194,111,163,192,62,17,203,117,45,142,19,166,90,171,99,170,154,37,208,147,13,196,56,186,180,194,220,122,46,222,176,70,59,13,223,91,108,177,214,72,30,222,42,224,201,52,211,246,184,21,96,149,99,101,147,173,248,166,31,169,93,214,124,28,61,59,38,100,51,48,99,191,197,58,180,154,167,121,205,236,21,187,233,253,66,66,182,235,212,32,136,71,187,228,233,74,118,120,69,190,73,141,42,98,39,153,92,78,26,219,198,168,177,65,221,202,163,128,49,111,110,15,68,221,228,37,27,82,198,5,7,218,123,228,140,68,141,171,84,192,0,21,61,12,28,2,15,157,52,208,139,28,60,41,24,227,2,3,1,0,1]),\n  //private: { new Uint8Array([48,130,4,188,2,1,0,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,4,130,4,166,48,130,4,162,2,1,0,2,130,1,1,0,150,9,88,160,249,140,239,100,34,251,142,199,20,137,202,18,183,158,237,254,68,236,125,69,14,88,128,124,200,209,194,144,203,15,203,200,32,214,251,81,188,162,105,79,87,68,141,60,88,84,65,46,100,228,88,202,32,172,109,50,206,214,244,105,59,110,16,197,203,6,10,43,7,35,248,146,150,193,244,166,139,182,78,151,18,4,64,55,215,111,199,98,8,3,42,109,195,70,60,139,194,111,163,192,62,17,203,117,45,142,19,166,90,171,99,170,154,37,208,147,13,196,56,186,180,194,220,122,46,222,176,70,59,13,223,91,108,177,214,72,30,222,42,224,201,52,211,246,184,21,96,149,99,101,147,173,248,166,31,169,93,214,124,28,61,59,38,100,51,48,99,191,197,58,180,154,167,121,205,236,21,187,233,253,66,66,182,235,212,32,136,71,187,228,233,74,118,120,69,190,73,141,42,98,39,153,92,78,26,219,198,168,177,65,221,202,163,128,49,111,110,15,68,221,228,37,27,82,198,5,7,218,123,228,140,68,141,171,84,192,0,21,61,12,28,2,15,157,52,208,139,28,60,41,24,227,2,3,1,0,1,2,130,1,0,1,17,2,240,195,80,0,78,241,104,12,2,151,234,71,123,66,62,137,30,221,101,141,153,186,142,224,38,237,148,126,199,97,178,31,54,219,200,230,19,106,211,0,10,246,42,0,190,84,229,187,21,139,43,182,87,218,203,68,76,26,167,240,210,120,170,43,200,174,204,149,176,234,240,62,4,62,15,21,223,237,217,76,184,181,44,232,228,156,184,62,46,17,9,131,99,220,1,249,76,136,89,113,33,92,218,63,220,121,135,150,43,43,95,124,42,10,112,202,9,62,226,163,86,151,18,0,45,132,7,215,181,143,60,203,121,77,78,249,133,16,173,121,117,141,188,24,75,232,178,87,95,115,146,170,103,219,204,121,21,246,221,184,9,84,253,91,32,213,65,163,165,22,39,63,36,85,168,196,75,87,45,200,113,55,26,221,194,162,166,48,229,102,218,210,86,97,156,85,122,73,126,51,98,8,247,41,191,153,162,208,183,114,95,133,34,7,92,135,41,97,172,68,59,23,206,27,80,120,9,33,0,232,237,57,207,206,238,120,18,40,243,159,139,99,106,69,206,245,153,180,186,92,232,250,149,2,129,129,0,206,187,21,82,195,220,105,190,62,43,139,140,107,77,76,80,177,30,16,20,186,254,242,81,255,204,19,78,18,131,230,62,45,139,91,138,173,186,88,82,228,29,54,15,111,134,10,218,238,123,190,23,28,158,248,7,171,15,209,85,39,237,104,57,233,189,168,236,63,217,231,32,111,234,216,27,217,162,137,41,43,124,167,152,1,166,238,238,150,233,245,150,77,148,224,144,205,46,63,100,240,215,215,132,194,151,85,22,183,146,186,5,24,155,159,41,195,93,6,90,57,142,183,103,125,59,121,173,2,129,129,0,185,203,69,46,216,186,46,147,175,38,172,42,83,236,5,27,146,236,134,37,197,67,22,232,25,252,157,171,183,108,51,221,180,139,28,177,154,123,132,246,254,101,193,218,54,50,182,252,48,236,34,164,19,225,181,200,198,176,186,20,216,66,101,110,9,183,243,245,211,172,38,197,64,57,85,89,206,45,5,119,133,231,102,92,238,210,111,62,178,109,212,55,48,249,147,23,31,71,241,175,185,94,207,104,184,196,227,20,37,254,198,42,92,1,255,225,162,190,236,236,122,28,235,6,47,219,78,207,2,129,128,1,136,117,162,5,125,206,242,240,55,22,115,214,31,222,159,2,145,60,129,74,217,181,38,82,133,74,231,91,79,203,23,78,243,39,156,161,169,46,26,127,66,144,50,17,27,167,92,244,67,202,167,21,57,64,145,157,253,34,10,69,159,135,20,86,221,103,49,73,79,238,92,217,55,158,158,166,64,132,79,223,216,174,205,123,197,167,35,241,206,142,89,172,253,155,164,183,64,206,139,139,21,174,173,119,91,243,239,149,48,235,92,58,80,125,31,172,41,54,112,216,216,108,23,194,95,252,137,2,129,128,123,138,152,116,48,20,141,8,18,189,74,89,210,247,235,229,139,234,206,192,170,204,147,156,190,58,229,180,219,0,141,244,108,42,220,103,148,107,113,220,179,8,130,192,80,173,164,83,73,76,155,52,51,44,48,174,82,192,12,219,243,121,34,236,234,117,113,57,19,9,51,182,145,160,14,10,235,55,176,156,235,99,21,3,210,162,6,234,207,198,140,8,46,254,165,58,8,200,212,2,158,230,86,80,50,28,105,74,106,129,96,207,165,226,134,125,72,180,95,226,86,200,135,214,211,87,166,173,2,129,128,89,67,208,155,234,36,112,154,120,64,51,0,63,74,27,77,35,197,44,97,136,216,144,43,8,204,63,206,55,195,98,43,200,249,255,165,242,242,88,248,56,216,246,126,248,99,9,224,159,141,111,176,18,118,224,125,136,143,252,126,254,49,136,86,165,234,154,144,238,162,86,193,194,70,227,58,3,11,64,235,179,159,229,26,247,8,62,107,66,168,177,71,61,155,61,245,37,33,9,146,217,216,168,99,106,43,246,124,208,41,127,46,188,252,139,240,105,59,108,18,232,10,73,147,57,48,13,210]);\n  //}\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Ob2RlanNQcm94eVN0dWIuaWRwLmpzP2I5MzgiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJpZGVudGl0aWVzIiwibklkZW50aXR5IiwiaHR0cHMiLCJyZXF1aXJlIiwiYnRvYSIsImF0b2IiLCJnb29nbGVJbmZvIiwiY2xpZW50U2VjcmV0IiwiY2xpZW50SUQiLCJyZWRpcmVjdFVSSSIsImlzc3VlciIsInRva2VuRW5kcG9pbnQiLCJqd2tzVXJpIiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidXNlcmluZm8iLCJ0b2tlbkluZm8iLCJhY2Nlc3NUeXBlIiwidHlwZSIsInNjb3BlIiwic3RhdGUiLCJ1cmxQYXJzZXIiLCJ1cmwiLCJuYW1lIiwicmVwbGFjZSIsInJlZ2V4UyIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJzZW5kSFRUUFJlcXVlc3QiLCJtZXRob2QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbnNvbGUiLCJsb2ciLCJzcGxpdGVkVGV4dCIsInNwbGl0IiwiaG9zdCIsInJlcGxhY2VkVVJMIiwib3B0aW9ucyIsImhvc3RuYW1lIiwicG9ydCIsInBhdGgiLCJyZXEiLCJyZXF1ZXN0IiwicmVzIiwic3RhdHVzQ29kZSIsImhlYWRlcnMiLCJzdHJlYW0iLCJvbiIsImQiLCJlIiwiZXJyb3IiLCJlbmQiLCJtYXBQcm90b2NvbCIsInByb3RvY29sbWFwIiwiZm91bmRQcm90b2NvbCIsInJlc3VsdFVSTCIsInVuZGVmaW5lZCIsInByb3RvY29sIiwic2xpY2UiLCJsZW5ndGgiLCJFcnJvciIsImdldEF1dGgiLCJjb250ZW50cyIsImkiLCJVUkwiLCJ0aGVuIiwiaW5mbyIsImV4Y2hhbmdlQ29kZSIsImNvZGUiLCJtZXNzYWdlIiwiaWRwIiwidmFsaWRhdGVBc3NlcnRpb24iLCJhc3NlcnRpb24iLCJvcmlnaW4iLCJkZWNvZGVkQ29udGVudCIsImNvbnRlbnQiLCJKU09OIiwicGFyc2UiLCJpZFRva2VuU3BsaXRlZCIsInRva2VuSUQiLCJpZFRva2VuIiwiaWRlbnRpdHkiLCJlbWFpbCIsIm5vbmNlIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwiZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UiLCJyZXN1bHQiLCJhY2Nlc3NUb2tlbiIsInZhbHVlIiwiaW5mb1Rva2VuVVJMIiwiYWNjZXNzX3Rva2VuIiwiaW5mb1Rva2VuIiwiaWRlbnRpdHlCdW5kbGUiLCJpZF90b2tlbiIsInJlZnJlc2hUb2tlbiIsInJlZnJlc2hfdG9rZW4iLCJ0b2tlblR5cGUiLCJ0b2tlbl90eXBlIiwiaWRUb2tlblVSTCIsInRva2VuSURKU09OIiwiZXhwaXJlcyIsImV4cCIsInN0cmluZ2lmeSIsImlkcEJ1bmRsZSIsImRvbWFpbiIsInJldHVyblZhbHVlIiwiZXJyIiwiTm9kZWpzUHJveHlTdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsIl90aGlzIiwibWVzc2FnZUJ1cyIsImFkZExpc3RlbmVyIiwibXNnIiwidG8iLCJyZXF1ZXN0VG9JZHAiLCJfc2VuZFN0YXR1cyIsInBhcmFtcyIsImJvZHkiLCJ1c2VybmFtZUhpbnQiLCJyZXBseU1lc3NhZ2UiLCJpZCIsImZyb20iLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsIl9zdGF0ZSIsImRlc2MiLCJpbnN0YW5jZSIsInN1YiIsImdpdmVuX25hbWUiLCJmYW1pbHlfbmFtZSIsInBpY3R1cmUiLCJlbWFpbF92ZXJpZmllZCIsImxvY2FsZSIsImF6cCIsImF1ZCIsImF0X2hhc2giLCJpc3MiLCJpYXQiLCJhbGciLCJraWQiLCJtZXNzYWdlSW5mbyIsInVzZXJQcm9maWxlIiwidXNlcm5hbWUiLCJjbiIsImF2YXRhciIsInVzZXJVUkwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQXdYd0JBLFE7Ozs7QUF4WHhCLElBQUlDLGFBQWEsRUFBakI7QUFDQSxJQUFJQyxZQUFZLENBQWhCO0FB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QUZLO0FBR1ZnSCxrQkFBVyxNQUhEO0FBSVZDLG1CQUFZLE9BSkY7QUFLVkMsZUFBUSw4RkFMRTtBQU1WbkQsYUFBTSwyQkFOSTtBQU9Wb0Qsc0JBQWUsSUFQTDtBQVFWQyxjQUFPLElBUkcsRUFKSDtBQWFQbkMsaUJBQVk7QUFDWm9DLFdBQUksMEVBRFE7QUFFWkMsV0FBSSwwRUFGUTtBQUdaUCxXQUFJLHVCQUhRO0FBSVpoRCxhQUFNLDJCQUpNO0FBS1pvRCxzQkFBZSxNQUxIO0FBTVpJLGVBQVEsd0JBTkk7QUFPWnZELGFBQU0sODlHQVBNO0FBUVp3RCxXQUFJLDZCQVJRO0FBU1pDLFdBQUksWUFUUTtBQVVadEMsV0FBSSxZQVZRO0FBV1p1QyxXQUFJLE9BWFE7QUFZWkMsV0FBSSwwQ0FaUSxFQWJMO0FBMEJQekMsYUFBUSxZQTFCRDtBQTJCUG5CLFdBQU0sMkJBM0JDLEVBSlA7QUFnQ0FVLGFBQVU7QUFDVnNDLFNBQUksdUJBRE07QUFFVi9HLFVBQUssWUFGSztBQUdWZ0gsZ0JBQVcsTUFIRDtBQUlWQyxpQkFBWSxPQUpGO0FBS1ZDLGFBQVEsOEZBTEU7QUFNVm5ELFdBQU0sMkJBTkk7QUFPVm9ELG9CQUFlLElBUEw7QUFRVkMsWUFBTyxJQVJHLEVBaENWO0FBeUNBdEQsWUFBUyw2Q0F6Q1Q7QUEwQ0E4RCxlQUFZO0FBQ1pDLGlCQUFZO0FBQ1pDLGdCQUFTLDJCQURHO0FBRVpDLFVBQUcsaUJBRlM7QUFHWkMsY0FBTyw4RkFISztBQUlaWixjQUFPLElBSks7QUFLWmEsZUFBUSw2Q0FMSSxFQURBO0FBT1o5RSxTQUFJLFlBUFE7QUFRWkUsZUFBVSxzbFpBUkU7QUFTWjZCLGFBQVEsWUFUSTtBQVVaO0FBQ0E7QUFDQTtBQXREQSxDQURBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaWRlbnRpdGllcyA9IHt9O1xubGV0IG5JZGVudGl0eSA9IDA7XG4vL2ltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbi8vbGV0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5sZXQgYnRvYSA9IHJlcXVpcmUoJ2J0b2EnKTtcbmxldCBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xuXG5sZXQgZ29vZ2xlSW5mbyA9IHtcbiAgY2xpZW50U2VjcmV0OiAgICAgICAgICAnWHg0ckt1Y2I1WllUYVhsY1pYOUhMZlpXJyxcbiAgY2xpZW50SUQ6ICAgICAgICAgICAgICAnODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICAnaHR0cHM6Ly9sb2NhbGhvc3QnLFxuICBpc3N1ZXI6ICAgICAgICAgICAgICAgICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20nLFxuICB0b2tlbkVuZHBvaW50OiAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjQvdG9rZW4/JyxcbiAgandrc1VyaTogICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzPycsXG4gIGF1dGhvcmlzYXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoPycsXG4gIHVzZXJpbmZvOiAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My91c2VyaW5mbz9hY2Nlc3NfdG9rZW49JyxcbiAgdG9rZW5JbmZvOiAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0nLFxuICBhY2Nlc3NUeXBlOiAgICAgICAgICAgICdvZmZsaW5lJyxcbiAgdHlwZTogICAgICAgICAgICAgICAgICAnY29kZScsXG4gIHNjb3BlOiAgICAgICAgICAgICAgICAgJ29wZW5pZCUyMGVtYWlsJTIwcHJvZmlsZScsXG4gIHN0YXRlOiAgICAgICAgICAgICAgICAgJ3N0YXRlJ1xufTtcblxuLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzXG5mdW5jdGlvbiB1cmxQYXJzZXIodXJsLCBuYW1lKSB7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXFxdJyk7XG4gIGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJztcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpO1xuICBsZXQgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKHJlc3VsdHMgPT09IG51bGwpXG4gIHJldHVybiAnJztcbiAgZWxzZVxuICByZXR1cm4gcmVzdWx0c1sxXTtcbn1cblxuXG4vL2xldCBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY29kZT0nICsgY29kZSArICcmY2xpZW50X2lkPScgK1xuICAvLyAgICAgICAgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZGlyZWN0X3VyaT0nICtcbiAgLy8gICAgICAgIGkucmVkaXJlY3RVUkkgKyAnJmdyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlJztcblxuZnVuY3Rpb24gc2VuZEhUVFBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuICAvL3JldHVybiBtYWtlTG9jYWxSZXF1ZXN0KG1ldGhvZCwgdXJsLCB1bmRlZmluZWQpO1xuICAgIGNvbnNvbGUubG9nKCdzZW5kSFRUUFJlcXVlc3Q6dXJsJywgdXJsKTtcbiAgICBsZXQgc3BsaXRlZFRleHQgPSB1cmwuc3BsaXQoJy8nKTtcbiAgICBsZXQgaG9zdCA9IHNwbGl0ZWRUZXh0WzJdO1xuICAgIGxldCByZXBsYWNlZFVSTCA9IHVybC5yZXBsYWNlKHNwbGl0ZWRUZXh0WzBdICsgJy8vJyArIHNwbGl0ZWRUZXh0WzJdLCAnJyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGhvc3RuYW1lOiBob3N0LFxuICAgICAgcG9ydDogNDQzLFxuICAgICAgcGF0aDogcmVwbGFjZWRVUkwsXG4gICAgICBtZXRob2Q6IG1ldGhvZFxuICAgIH07XG4gICAgY29uc29sZS5sb2coJ3NlbmRIVFRQUmVxdWVzdDpvcHRpb25zJywgb3B0aW9ucyk7XG5cbiAgICBjb25zdCByZXEgPSBodHRwcy5yZXF1ZXN0KG9wdGlvbnMsIChyZXMpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdzZW5kSFRUUFJlcXVlc3Q6c3RhdHVzQ29kZTonLCByZXMuc3RhdHVzQ29kZSk7XG4gICAgICBjb25zb2xlLmxvZygnc2VuZEhUVFBSZXF1ZXN0OmhlYWRlcnM6JywgcmVzLmhlYWRlcnMpO1xuICAgICAgbGV0IHN0cmVhbSA9ICcnO1xuICAgICAgcmVzLm9uKCdkYXRhJywgKGQpID0+IHtcbiAgICAgICAgc3RyZWFtICs9IGQ7XG4gICAgICB9KTtcbiAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnc2VuZEhUVFBSZXF1ZXN0OmRhdGE6Jywgc3RyZWFtKTtcbiAgICAgICAgcmVzb2x2ZShzdHJlYW0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXEub24oJ2Vycm9yJywgKGUpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ2h0dHBzX3JldHVybjogJyArIGUpO1xuICAgIH0pO1xuICAgIHJlcS5lbmQoKTtcblxuICB9KTtcbn1cblxuLyoqXG4qIEByZXR1cm5zIHt2YXJpYWJsZTxzdHJpbmc+fVxuKiovXG5mdW5jdGlvbiBtYXBQcm90b2NvbCh1cmwpIHtcbiAgbGV0IHByb3RvY29sbWFwID0ge1xuICAgICdsb2NhbGhvc3Q6Ly8nOiAnaHR0cHM6Ly8nLFxuICAgICd1bmRlZmluZWQ6Ly8nOiAnaHR0cHM6Ly8nLFxuICAgICdoeXBlcnR5LWNhdGFsb2d1ZTovLyc6ICdodHRwczovLycsXG4gICAgJ2h0dHBzOi8vJzogJ2h0dHBzOi8vJyxcbiAgICAnaHR0cDovLyc6ICdodHRwczovLydcbiAgfTtcblxuICBsZXQgZm91bmRQcm90b2NvbCA9IGZhbHNlO1xuICBsZXQgcmVzdWx0VVJMID0gdW5kZWZpbmVkO1xuICBmb3IgKGxldCBwcm90b2NvbCBpbiBwcm90b2NvbG1hcCkge1xuICAgIGlmICh1cmwuc2xpY2UoMCwgcHJvdG9jb2wubGVuZ3RoKSA9PT0gcHJvdG9jb2wpIHtcbiAgICAgIHJlc3VsdFVSTCA9IHByb3RvY29sbWFwW3Byb3RvY29sXSArIHVybC5zbGljZShwcm90b2NvbC5sZW5ndGgsIHVybC5sZW5ndGgpO1xuICAgICAgZm91bmRQcm90b2NvbCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIWZvdW5kUHJvdG9jb2wpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvdG9jb2wgb2YgdXJsOiAnICsgdXJsKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0VVJMO1xufVxuXG5cblxubGV0IGdldEF1dGggPSAoZnVuY3Rpb24oY29udGVudHMpIHtcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgVVJMID0gaS5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgKyAnc2NvcGU9JyArIGkuc2NvcGUgKyAnJmNsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZyZXNwb25zZV90eXBlPScgKyBpLnR5cGUgKyAnJnN0YXRlPScgKyBpLnN0YXRlICsgJyZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlICsgJyZub25jZT0nICsgY29udGVudHMgKyAnJnByb21wdD1ub25lJyA7XG5cbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24oaW5mbykge1xuICAgICAgcmVzb2x2ZShpbmZvKTtcbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coJ0VSUk9SOicsIGVycm9yKTtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xuXG59KVxuXG4vKipcbiogRnVuY3Rpb24gdG8gZXhjaGFuZ2UgdGhlIGNvZGUgcmVjZWl2ZWQgdG8gdGhlIGlkIFRva2VuLCBhY2Nlc3MgdG9rZW4gYW5kIGEgcmVmcmVzaCB0b2tlblxuKlxuKi9cbmxldCBleGNoYW5nZUNvZGUgPSAoZnVuY3Rpb24oY29kZSkge1xuICBsZXQgaSA9IGdvb2dsZUluZm87XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgbGV0IFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjb2RlPScgKyBjb2RlICsgJyZjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWRpcmVjdF91cmk9JyArIGkucmVkaXJlY3RVUkkgKyAnJmdyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlJztcblxuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZXhjaGFuZ2VDb2RlOmluZm9dJywgaW5mbyk7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZXhjaGFuZ2VDb2RlOmVycl0nLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIC8vcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcblxuICB9KTtcbn0pO1xuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHlcbiovXG5cbmxldCBpZHAgPSB7XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcbiAgICBjb25zb2xlLmxvZygndmFsaWRhdGVBc3NlcnRpb25Qcm94eU5PREVKUycpO1xuXG4gICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZFxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICAvLyBhdG9iIG1heSBuZWVkIHRvIGJlIHJlcXVpcmVkIGZvciBub2RlanNcbiAgICAgIC8vIHZhciBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xuICAgICAgbGV0IGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pO1xuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcblxuICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gY29udGVudC50b2tlbklELnNwbGl0KCcuJyk7XG5cbiAgICAgIGxldCBpZFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XG5cbiAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZX0pO1xuXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246aGludF0nLCBoaW50KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgY29uc29sZS5sb2coJ2dlbmVyYXRlTWVzc2FnZVJlc3BvbnNlOicpO1xuICAgICAgcmV0dXJuIHJlc29sdmUoZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UpO1xuXG4gICAgICAvL3RoZSBoaW50IGZpZWxkIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBvYnRhaW5lZCBhZnRlciB0aGUgdXNlciBhdXRoZW50aWNhdGlvblxuICAgICAgLy8gaWYgdGhlIGhpbnQgY29udGVudCBpcyBub3QgcHJlc2VudCwgdGhlbiByZWplY3RzIHRoZSB2YWx1ZSB3aXRoIHRoZSBVUkwgdG8gb3BlbiB0aGUgcGFnZSB0byBhdXRoZW50aWNhdGUgdGhlIHVzZXJcbiAgICAgIGxldCBpID0gZ29vZ2xlSW5mbztcblxuICAgICAgaWYgKCFoaW50KSB7XG5cblxuICAgICAgICBnZXRBdXRoKGNvbnRlbnRzKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnUkVTVUxUOicsIHJlc3VsdCk7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9KVxuXG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIC8vIHRoZSByZXF1ZXN0IGhhdmUgYWxyZWFkeSBiZWVuIG1hZGUsIHNvIGlkcFBSb3h5IHdpbGwgZXhjaGFuZ2UgdGhlIHRva2VucyBhbG9uZyB0byB0aGUgaWRwLCB0byBvYnRhaW4gdGhlIGluZm9ybWF0aW9uIG5lY2Vzc2FyeVxuICAgICAgICBsZXQgYWNjZXNzVG9rZW4gPSB1cmxQYXJzZXIoaGludCwgJ2FjY2Vzc190b2tlbicpO1xuICAgICAgICBsZXQgaWRUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnaWRfdG9rZW4nKTtcbiAgICAgICAgbGV0IGNvZGUgPSB1cmxQYXJzZXIoaGludCwgJ2NvZGUnKTtcblxuICAgICAgICBleGNoYW5nZUNvZGUoY29kZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgY29uc29sZS5sb2coJ1RJQUdPIGV4Y2hhbmdlIGNvZGUnKTtcblxuICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyXG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaW5mb1Rva2VuKSB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUSUFHTyBpbmZvIHRva2VuIHVybCcpO1xuICAgICAgICAgICAgbGV0IGlkZW50aXR5QnVuZGxlID0ge2FjY2Vzc1Rva2VuOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGlkVG9rZW46IHZhbHVlLmlkX3Rva2VuLCByZWZyZXNoVG9rZW46IHZhbHVlLnJlZnJlc2hfdG9rZW4sIHRva2VuVHlwZTogdmFsdWUudG9rZW5fdHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuXG4gICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XG5cbiAgICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIGlkVG9rZW5cbiAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XG5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1RJQUdPIGlkIHRva2VuIHVybCcpO1xuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS50b2tlbklESlNPTiA9IGlkVG9rZW47XG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmV4cGlyZXMgPSBpZFRva2VuLmV4cDtcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsO1xuXG4gICAgICAgICAgICAgIGxldCBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHt0b2tlbklEOiB2YWx1ZS5pZF90b2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XG4gICAgICAgICAgICAgIGxldCBpZHBCdW5kbGUgPSB7ZG9tYWluOiAnZ29vZ2xlLmNvbScsIHByb3RvY29sOiAnT0lEQyd9O1xuXG4gICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxuICAgICAgICAgICAgICBsZXQgcmV0dXJuVmFsdWUgPSB7YXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBpbmZvOiBpZGVudGl0eUJ1bmRsZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuXG4gICAgICAgICAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xuICAgICAgICAgICAgICArK25JZGVudGl0eTtcblxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246cmV0dXJuVmFsdWVdJywgcmV0dXJuVmFsdWUpO1xuICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246ZXhjaGFuZ2VDb2RlXScsIGVycik7XG4gICAgICAgICAgLy9yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICB9XG5cbn1cblxuLyoqXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiovXG5jbGFzcyBOb2RlanNQcm94eVN0dWIge1xuXG4gIC8qKlxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXG4gICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgcmVjZWl2ZWQgaWRwUHJveHlcbiAgKlxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICAqL1xuIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XG4gICBjb25zb2xlLmxvZygnR29vZ2xlLT5OT0RFSlMgY29uc3RydWN0b3InKTtcblxuICAgbGV0IF90aGlzID0gdGhpcztcbiAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1cztcbiAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xuXG4gICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcbiAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJykge1xuXG4gICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xuICAgICB9XG4gICB9KTtcbiAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cbiAgKlxuICAqIEBwYXJhbSB7bWVzc2FnZX0gIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2VCdXNcbiAgKi9cbiAgcmVxdWVzdFRvSWRwKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcblxuICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XG4gICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XG4gICAgICAgIGlkcC5nZW5lcmF0ZUFzc2VydGlvbihwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgaWRwLnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcbiAgKi9cbiAgcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG1lc3NhZ2UgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sXG4gICAgICAgICAgICAgICAgICAgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX07XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG5cbiAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcblxuICAgIF90aGlzLl9zdGF0ZSA9IHZhbHVlO1xuXG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxuICAgICAgYm9keToge1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHJlYXNvbikge1xuICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjtcbiAgICB9XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnTm9kZWpzUHJveHlTdHViJyxcbiAgICBpbnN0YW5jZTogbmV3IE5vZGVqc1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuICB9O1xufVxuXG5cblxubGV0IGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlID1cbnthc3NlcnRpb246XCJleUowYjJ0bGJrbEVJam9pWlhsS2FHSkhZMmxQYVVwVFZYcEpNVTVwU1hOSmJYUndXa05KTmtscVRtcGFWRkpvVDFSa2EwNVVRWGxaVjFsM1RsUm9iRmxxV1RKWlYwMDBXa1JqZWsxSFJURlBWRXBvV1dwa2FscFhSVE5hYWtWcFpsRXVaWGxLYUdWdVFXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LYUdSWFVXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LZW1SWFNXbFBhVWw0VFVSTmVFNVVVVEJQVkVVelRWUkZlVTU2VlhoTmFsbDZUa1JKYVV4RFNteGlWMFp3WWtOSk5rbHVVbXhqTTFKb1ltMVNNR0ZIYkhWaGVrMTVUVlZDYm1KWFJuQmlRelZxWWpJd2FVeERTbXhpVjBad1lrWTVNbHBZU25CYWJXeHNXa05KTm1SSVNqRmFVM2RwV1ZoU1ptRkhSbnBoUTBrMlNXcEplVkp1U1RWaFdGcHZUbGRLTldWSFZYUmhNV1JQVDBkc2RtRXhSV2xNUTBwMVlqSTFhbHBUU1RaSmJWWTFVMWhrU21GdE9IZFVNRTR6WVZVeFZGTlVXazVXUlRFelZFVk9TbVZWYkhGaU0yaE5VVEJzTmxOWGNIWmxhelZFWkRKc1QxRXdhekpVYTFKdVl6QnNjVlpYYkZCaGExWTJWRVZPU2sxcmJIRmlla3BOVVRCcmVsTlhjSFpPVlhoRVUxUlNTbUZ0T0hkVVYyd3pZVlU1VkZOVVdrNVdSVEIzVkVWT1NtVkZNVVJUVkZwUFpXdHNlbE5YY0VabFJXeHhZak5vVG1Wc1JucFRWM0JHWlZWc2NXSXpiRTlTUjA1NlUxZHdSbVZyYkhGaU0yaE9aVmhrY0ZSV1VsSmhWVGx4VWxoT1NtRnJWWGhUVjNCMlpVVjRSRk5ZYUU5aFZXc3lWRlpPTTJGVk1WVlpNbXhRWVd4V2VsTlhjRVpPUld4eFlqTmtUVkV3YkRSVU1VNUtUbXN4TldReWJFNWhhMFp3VkRKd1JtVnJNVVJrTW14T1lXdFdjRlF5Y0Vaak1HeHhVMWhzU21GdE9UUlViRTR6WVZVeGNWUlhiRkJoYTBaNlUxZHdTazFGYkhGaWVrSlFVVE5rY0ZSWGNGWmhWVGx4VWxod1RsRXpaSEJVVjNCYVlWVTVjVkpZVGtwaGEydDZVMWR3ZG1WRk1VUmtNbXhPWVcxa2NGUXljRXBqTUd4eFUxUldTbUZ0T1RSVVdIQkNZekJzY1ZSWVpFcGhiVGswVkVWT1NtVnJNVlJUVkZwT1ZUTmtjRlJZY0VwaFZUbHhVVmhPU21Gck1UWlRWM0IyWlVVMVZWRllUa3BoYXpCM1UxZHdkazVWZUVSVFdIQlBWVEJyTWxRd1VtNWpNR3h4VkZSS1NtRnRPVFJVYlhCQ1l6QnNjVlJVVGtwaGJUazFWR3RTY21Nd2JIRlVWRkpLWVcwNU5GUnJVa0pqTUd4eFZGUldTbUZ0T1RWVVdIQnlZekJzY1ZWWVpFcGhiVGswVkZWU1FtTXdiSEZWV0doS1lXMDVObFJyVGpOaFZUVkZVMWRzVUdGcmEzaFVWazR6WVZVMVJWUlhiRkJoYTFWM1ZGZHNNMkZWTlVWVlYyeFFZV3RWTVZReFRqTmhWVFZGVmxkc1VHRnJiRE5VUlU1S1RVVTFjRk5VV2s1V1JUQjZWRVZPU2sxRk5UVlRWRnBPWVd0R05WUkZUa3BOUlRsRVUxUmFUbFpIWkhwVFYzQlNUbFZzY1dJemFGQlNSVEY2VTFkd1ZtUXdiSEZpTTJoUFZrZGtlbE5YY0ZabFJXeHhZak5zVG1WdFRucFRWM0JXWlZWc2NXSXpiRTlXUmtaNlUxZHdWbVZyYkhGaWVrcFFVVE5rY0ZSc1VsSmhWVGx4VTFod1QyRllaSEJVYkZKV1lWVTVjVkpZYkU5Vk0yUndWR3hTV21GVk9YRlhWRlpOVVRCcmVGUnViRXBPYXpGVlZWaE9TbUZzVlRCVFYzQjJUa1U1UkdReWJFOVdSM1J3VkRKd1JtVlZPVVJrTW14UFlXdEdjRlF5Y0VabFZUVkVaREpzVDJGclZuQlVNbkJLWkRBeFJHUXliRTloYTJ4d1ZESndTbVF3T1ZSa01teFBZV3N4Y0ZReWNFWk9WVFZFWkRKc1QyRnNSbkJVTW5CR1RVVTFSR1F5YkU5aGJGWndWREp3U21Rd01UVmtNbXhQWVd4c2NGUXljRVpOVlhoRVUxUktUMlZWYXpKVVYzQkNaV3Q0UkZOVVNsQlJNR3N5VkZkd1FtUXdlRVJUVkVwUVZUQnJNbFJZY0Vwak1HeHhXVE5rU21GdE9UVlVWbEpTWXpCc2NWa3phRXBoYlRrMVZHeFNSbU13YkhGWk0yeEtZVzA0TUZSV1RqTmhWVFUyVkZkc1VHRnJWVEJVTUU0ellWVTFObFZYYkZCaGExVjVWRmRzTTJGVk5UWldWMnhRWVd0V00xUnNUak5oVlRVMlYxZHNVR0Z0VFRGVVJVNUtUVEExTlZOVVdsQlNSMDU2VTFkd2FrNUZiSEZpZWtwUVVUTmtjRlJ1Y0hKaFZUbHhVbFJDVGxVelpIQlVNRkpDWVZVNWNWZFlaRTFSTUdzd1ZGWk9TazVyT1VWYU0wNUtZVzFrTlZOWGNIWk9SVFZFWkRKc1VGSkZNWEJVTW5CYVRWVjRSRk5VVWs5Uk1Hc3lWR3RTV21Nd2JIRmFla1pLWVcwNU5GUlZVa0pqTUd4eFducEtTbUZ0T1RWVVYzQnVZekJzY1ZwNlRrcGhiVGd3VkRCT00yRlZPVVZhTW14UVlXdHNNMVJYYkROaFZUbEZZVEpzVUdGck1UVlVSVTVLVGxVeFJGTlVXazVXUjA0MVZFVk9TazVWTVZSVFZGcE9Wa1ZGTVZSRlRrcE9WVEZ3VTFSYVQxWkZSbnBUVjNCeVpXdHNjV0l6YkU1U1JteDZVMWR3Y2sxRmJIRmlNMnhPVmtaR2VsTlhjSEpOVld4eFlqTnNUMUpHUm5wVFYzQnlUV3RzY1dJemFFNVNSbFo2VTFkd2NrMHdiSEZpZWtaUVZUTmtjRlF4VW01aFZUbHhVbGhvVGxFelpIQlVNVkp5WVZVNWNWSlVTazFSTUd3MFZGVlNRbUZWT1hGU1ZGWlBaVmhrY0ZSV1VrSmxSV3h4WWpOc1RsSkZNWHBUVjNCR1pEQXhjRk5VV2s5aFdHUndWRlpTUW1WcmJIRmlNMmhPVVROa2NGUldVa0pOUld4eFlucENUbVZZWkhCVVZsSkNUVlZzY1dKNlRrMVJNR3cwVkZWU1dtRlZPWEZVVkVaTlVUQnNORlJWVW1waFZUbHhVMVJDVUZFelpIQlVWbEpDVGtWc2NXSXphRTlTUm14NlUxZHdSbVF3T1ZSVFZGcE9Wa1pXTTFSRlRrcGxSVEZWVVZkc1VHRnJWVEZVV0d3ellWVXhWVkpZYUVwaGJUazFWR3RTVW1Nd2JIRlNXR2hPWVZWck1sUldVbHBOYTNoRVUxaG9UbFpGTVhCVU1uQkdaV3M1VkdReWJFNVdSVlYzVTFkd2RtVkZPVVZUV0U1S1lXdFdORlJzVGtwT2F6VTJXak5PU21GclZqUlViV3hLVG1zeFZWWllhRTFSTUd3MFZGWlNhbUZWT1hGU1ZGSk5VVEJzTkZSV1VtNWhWVGx4VlZoT1NtRnJWalJVTVU1S1RtczFjVlZZVGtwaGExWTFWRlZPU2s1ck5WVldXRTVLWVd0V05WUldUa3BPYXpGeFVsUkdUVkV3YkRSVVYzQktZVlU1Y1ZKWWFFNVZNMlJ3VkZaU1NtVnJiSEZpTTJoUVZrZDBlbE5YY0VabFZUVkVVMVJhVUZaSFpIcFRWM0JHWlZVMVZGTlVXbEJSTTJSd1ZGWlNTazFyYkhGaU0zQk5VVEJzTkZSWGNHcGhWVGx4VlZoc1RWRXdiRFJVVjNCdVlWVTVjVkpZWkZCVk0yUndWRlpTU2s1VmJIRmlNMmhRVmtaV2VsTlhjRVpsYXpGRVUxUmFUMlZyUm5wVFYzQkdaV3N4VkZOVVdrOWhhMFo2VTFkd1JtVnJNWEJUVkZwT1ZrVXdNVlJGVGtwbFJURTJWRmRzVUdGclZURlVhMDR6WVZVeFZWUlVRa3BoYlRrMFZGWlNSbU13YkhGU1dIQlBWVEJyTWxSV1VscGxhM2hFVTFob1RtVnNiSEJVTW5CR1RsVXhjR1F5YkU1V1JUQjZVMWR3ZGsxck1YQmtNbXhPVmtVd01GTlhjSFpsUlRVMVpESnNUbFpGTURGVFYzQjJaVlV4UlZSWVRrcGhhMVYzVkZWT1NrNXJNVlZTVkU1TlVUQnNORlJyVWtaaFZUbHhWVlJHVFZFd2JEUlVhMUpLWVZVNWNWSlVRazVoV0dSd1ZGWlNVbVZyYkhGaU0yaFFWVE5rY0ZSV1VsSk5SV3h4WWpOb1QyRnNiSHBUVjNCR1RVVTFWRk5VV2xCV1JVWjZVMWR3UmsxRk5YQlRWRnBPVmtkT05GUkZUa3BsUlRWRldUSnNVR0Z0Y3pGVVJVNUtaVVUxUlZveWJGQmhhMVY2VkZWT00yRlZNVlZWVkZaS1lXMDVORlJzVWxKak1HeHhVbFJHVGxFd2F6SlVXSEJxWXpCc2NWSlVSazVWTUdzeVZGZHdRazVGZUVSVFdHaFBWa1ZzY0ZReWNFWk5SVFUxWkRKc1RsWkdWalpUVjNCMlpVVXhOV1F5YkU1V1JsVjNVMWR3ZG1WRk9WVlhXRTVLWVd0VmVGUnNUa3BPYXpWVlYxaE9TbUZyVlhoVWJXeEtUbXN4VlZwNlNrMVJNR3cwVkd4U2FtRlZPWEZTVkZKT1VUTmtjRlJXVWxaT1JXeHhZak5vVUZaR1JucFRWM0JHVFZVNVZGTlVXazVoYTJ3elZFVk9TbVZGTlhGUlYyeFFZV3RXTlZSWGJETmhWVEZWVjFob1NtRnRPSGRVYld3ellWVXhWVmRZYkVwaGJUazFWRmR3U21Nd2JIRlNWRXBPWlZWck1sUldVbXBOYTNoRVUxaG9UMkZzUm5CVU1uQnFaREI0UkZOWWFFOWhiRlp3VkRKd1ZrNVZlRVJUV0doUFlXeHNjRlF5Y0VabGEzaEVVMWhvVDJGdFRuQlVNbkJLWlZVeE5XUXliRTVXUm1zd1UxZHdkazVWTVZSa01teE9Wa1pyTVZOWGNIWmxSVEZGV2pOT1NtRnJWWHBVVlU1S1Rtc3hWVmw2VGsxUk1HdzBWRzV3Um1GVk9YRlRXR2hQVVROa2NGUldVbXBsVld4eFlucE9UbUZZWkhCVVZsSnFaV3RzY1dJemNFNVJNMlJ3VkZaU2FrMUZiSEZpTTJ4T1lXdHNlbE5YY0VaTk1EVlVVMVJhVDFKRmJIcFRWM0JHVFRBMWNGTlVXazVoYTJ0M1ZFVk9TbVZGTlRaWk1teFFZV3RzTTFSV1RqTmhWVEZWV1hwU1NtRnRPSGhVVjJ3ellWVXhWVmw2VmtwaGJUazFWRlpTUm1Nd2JIRlNWRkpPVVRCck1sUlhjRkpOYTNoRVUxaG9VRkpGVm5CVU1uQkdUa1UxUkdReWJFNVdSMlExVTFkd2RtVlZNVlJrTW14T1ZrZGtObE5YY0haT1ZUVndaREpzVGxaSFkzZFRWM0IyWlVVMVJXRXpUa3BoYTFVd1ZHeE9TazVyT1ZWaE0wNUtZV3RWTUZSdGJFcE9hekZWVVZob1RWRXdiRFJVTUZKcVlWVTVjVkpVUWs5bFdHUndWRlpTYms1RmJIRmlNMmhQWldzeGVsTlhjRVpPUlRsVVUxUmFUbUZzUlRCVVJVNUtaVVU1VlZGWGJGQmhhMVY1Vkcxc00yRlZNVlZoTTJoS1lXMDVObFJXVGpOaFZURlZZVE5zU21GdE9UUlViWEJ5WXpCc2NWSlVWazVsVldzeVZERlNUbU13YkhGU1ZGWlBVVEJyTWxSWGNFWk5SWGhFVTFob1VGWkdWbkJVTW5CR1pWVTFSR1F5YkU1V1IzTjVVMWR3ZG1WVk9VUmtNbXhPVmtkemVsTlhjSFpOYXpGVVpESnNUbFpIY3pCVFYzQjJUVlU1VkdReWJFNVdSM014VTFkd2RtVnJPVVJrTW14T1lXdEdNMU5YY0habFJURkZVVmhPU21GcmJETlVWazVLVG1zMVZWSllUa3BoYTJ3elZGZHNTazVyTlVWYU0wNUtZV3RzTTFSWWJFcE9hemxWWVROT1NtRnJiRE5VYTA1S1Rtc3hWV0V6YUUxUk1HdzFWRlZTVm1GVk9YRlNWRlpQWlZoa2NGUlhjRUpOYTJ4eFlucEdVRkV6WkhCVVYzQkNUVEJzY1dJemFGQlNSVVo2VTFkd1NtUXdPVVJUVkZwT1ZrWlZkMVJGVGtwbFZURkZZVEpzVUdGclZYbFVibXd6WVZVeGNWSllaRXBoYlRrMFZGZHdSbU13YkhGVFdHaE9WVEJyTWxSWGNFSk5WWGhFVTFoc1RsWkZiSEJVTW5CS1pXczFjR1F5YkU1aGExWTJVMWR3ZG1WVk1WUmtNbXhPWVd0VmQxTlhjSFpsUlRsRldUTk9TbUZyYkRSVWJFNUtUbXN4Y1ZSWWNFMVJNR3cxVkZaU1dtRlZPWEZUVkVaT1pWaGtjRlJYY0VaTk1HeHhZbnBLVDJGWVpIQlVWM0JHVGtWc2NXSjZTazloV0dSd1ZGZHdSazVWYkhGaU0yaFFVa1ZzZWxOWGNFcGxWVEZFVTFSYVRtRnJNSGhVUlU1S1pWVXhjVkpYYkZCaGEydzBWRmRzTTJGVk1YRlRXR3hLWVcwNU5sUlhiRE5oVlRGeFUxaHdTbUZ0T1RSVVdIQmFZekJzY1ZOWWJFOVJNR3N5Vkc1d1JtTXdiSEZUV0d4UFZUQnJNbFJXVW01Tk1IaEVVMWhzVG1Gc2JIQlVNbkJLWlZVNVJHUXliRTVoYTJ0NlUxZHdkbVZWTVRaVVdFNUtZV3RzTlZRd1RrcE9helUyVlZoT1NtRnJiRFZVTVU1S1Rtc3hWVkpVVWsxUk1HdzFWRmh3UW1GVk9YRlNXR3hPVVROa2NGUlhjRTVsUld4eFlucEtVRlV6WkhCVVYzQk9aVlZzY1dJemFGQldSVVo2VTFkd1NtVnJNVFZUVkZwUFpXc3hlbE5YY0VwbGF6VkVVMVJhVGxaR1JqUlVSVTVLWlZVeE5sWlhiRkJoYkVZMVZFVk9TbVZWTVRaWFYyeFFZVzF6TUZSRlRrcGxWVEUyV1RKc1VHRnJNREZVUlU1S1pWVXhObG95YkZCaGExVjRWRmhzTTJGVk1YRlVWRlpLWVcwNE1WUlhiRE5oVlRGeFZWaGtTbUZ0T0hwVU1FNHpZVlV4Y1ZWWWFFcGhiVGsxVkcxc00yRlZNWEZWV0d4S1lXMDVOVlJXVW5Kak1HeHhVMVJDVG1WVmF6SlVWbEp5VGtWNFJGTlliRTlTUmtad1ZESndSazFyT1VSa01teE9ZV3hGZUZOWGNIWmxSVFUyV1ROT1NtRnJhM2RVYld4S1RtczFjVlpZVGtwaGEydDNWRzVzU2s1ck1YRlRXR2hOVVRCc05WUnJVbTVoVlRseFUxaGtUbUZZWkhCVVYzQlNUbFZzY1dJemFFOWhhekY2VTFkd1NrMVZNVVJUVkZwT1ZrVnJNRlJGVGtwbFZUVlZVbGRzVUdGc1JURlVSVTVLWlZVMVZWTlhiRkJoYTFZMFZGWk9NMkZWTVhGV1dIQktZVzA1TkZSV1VrSmpNR3h4VTFSR1QxRXdhekpVVmxKV1l6QnNjVk5VUms5Vk1Hc3lWRzF3Ym1Nd2JIRlRWRVpQWVZWck1sUlhjRXBsUlhoRVUxaHNUMVpIVG5CVU1uQktaVlU1UkdReWJFNWhiRlV3VTFkd2RtVnJOVFZrTW14T1lXeFZNVk5YY0habFZUVTFaREpzVG1Gc2JETlRWM0IyVGtVeGNHUXliRTVoYkd3MFUxZHdkbVZGT1ZWYU0wNUtZV3RyZVZSWGJFcE9helZVWkRKc1RtRnNiRFpUVjNCMlRUQjRSRk5ZYkU5aGJFWndWREp3U21WRk9VUmtNbXhPWVd4cmVGTlhjSFpsUlRGeFZGaE9TbUZyYTNsVWJXeEtUbXN4Y1ZOVVVrMVJNR3cxVkcxd2FtRlZPWEZTVkVKT1VUTmtjRlJYY0ZwT1JXeHhZbnBLVUZFelpIQlVWM0JhVGxWc2NXSXphRTlTUlZaNlUxZHdTazB3TVVSVFZGcE9Wa2RPTkZSRlRrcGxWVFUyVWxkc1VHRnRZM2RVUlU1S1pWVTFObE5YYkZCaGExVXhWRmRzTTJGVk1YRlpNM0JLWVcwNU0xUkZUa3BsVlRVMlZWZHNVR0ZyYkRSVVJVNUtaVlUxTmxaWGJGQmhiR3cwVkVWT1NtVlZOVFpYVjJ4UVlXdFdOVlJGVGtwbFZUVTJXVEpzVUdGcmF6QlVSVTVLWlZVMU5sb3liRkJoYTJ4NlUxZHdTazB3T1ZSVFZGcE9Wa1pXZWxOWGNFcE9SVEZFVTFSYVRsWkdWWHBVUlU1S1pWVTVSVkpYYkZCaGJGWTFWRVZPU21WVk9VVlRWMnhRWVd0c00xUXdUak5oVlRGeFdqTndTbUZ0T1RSVVdIQnlZekJzY1ZOVVVrOVJNR3N5VkZkd2JtTXdiSEZUVkZKUFZUQnJNbFJ0Y0VKak1HeHhVMVJTVDJGVmF6SlVhMUpHWXpCc2NWTlVVazlsVldzeVZGZHdVbU13YkhGVFZGSlFVVEJyTWxSWGNFcE5NSGhFVTFoc1VGSkhkSEJVTW5CS1l6QnNjVk5VVms1Uk1Hc3lWRmhzTTJGVk1YRmhNMmhLWVcwNU5GUkZUa3BsVlRsVlUxZHNVR0ZyUm5wVFYzQktUbFV4TlZOVVdrNVhSRUU1U1dsM2FXRllUbnBKYW05cFlVaFNNR05JVFRaTWVUbG9XVEpPZG1SWE5UQmplVFZ1WWpJNWJtSkhWWFZaTWpsMFNXbDNhV0ZYUmpCSmFtOTRUbFJGZDA1cVRYbFBWR3MxVEVOS2JHVklRV2xQYWtVeFRWUkJNazE2V1RGUFZHdzVMazloTkdoRk1YSjViR3RETVdObVR5MXRXazlJWWxRdFNGWnVTVWQ2UVVSRFdrMXFkRlJrZFU1UE5HOW9jV2RYU1ZKSlNsZERhSFppY2xwSFIwWlhja0V5UjNVeU1FVlZVa2x0Tkc1Q1YyMXhVMDFNY201bWFIcFlZVlpSTlc1NlFVbEhlR3BXWHpaUU9XRnRURkJJZUZGWmJYSkZjVTVGYWtOUE1FMHllakZWUVVJNVZGVndjRWhNY201Rk1YbHpTM1ZETTJOSWFEZFVOMnB0YXpkdk0zUmxXRlJxTVRCbVYxQlhVR3M1ZFhodFpXWXdYMDF3UmpBMVNIQlVORXBHYm1KRmVXVlpSMk01VG10SVN6ZDNSR1pOV0cxc05qUkdWM0JQYUd0bmNFbFhZbGN5WTBsNmFuSnpUamxDU1VkYWNWUnZMVXcyUVVNMlZFRmZVWFJ5WVZCNmRqUm9VRmd5YzI5Nk5uTTVUR1JtZWtKdGNGUTJaemxKZFVrNGRqbG5PR3hLUkZSVFpFcHRNMnRGZG5OWE5EWjNTM2gyY0hBeE9UZElkRFJEY1cxSlJ6Wm5TM3BwZEVOTlozQmpXVTV3TWtKUlZXVnBRU0lzSW5SdmEyVnVTVVJLVTA5T0lqcDdJbUY2Y0NJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbUYxWkNJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbk4xWWlJNklqRXdNekUxTkRRNU1UY3hNVEkzTlRFeU5qTTBNaUlzSW1WdFlXbHNJam9pZEdWemRHRnVaSFJvYVc1ck16SXhRR2R0WVdsc0xtTnZiU0lzSW1WdFlXbHNYM1psY21sbWFXVmtJam9pZEhKMVpTSXNJbUYwWDJoaGMyZ2lPaUl5TWtaeU9XbDJhRFZpZVhobExXdFhUamhwYjJ0Uklpd2libTl1WTJVaU9pSmxlVWwzU1dwdk1FOURkMmxOVTBrMlRWUk5kMHhEU1hsSmFtOTRURU5KZWtscWIzcE9RM2RwVGtOSk5rNUVaM05KYWxWcFQycEZla3hEU1RKSmFtOHlURU5KTTBscWJ6Vk1RMGswU1dwdk1FMXBkMmxQVTBrMlRWUk5NRXhEU1hoTlEwazJUbnBKYzBscVJYaEphbTk0VFhwUmMwbHFSWGxKYW05NVRrUmpjMGxxUlhwSmFtOTRUWGwzYVUxVVVXbFBha1Z6U1dwRk1VbHFiM2hNUTBsNFRtbEpOazFUZDJsTlZHTnBUMnBWYzBscVJUUkphbTkzVEVOSmVFOVRTVFpOZVhkcFRXcEJhVTlxUlhwTlEzZHBUV3BGYVU5cVJYTkpha2w1U1dwdmVFNVRkMmxOYWsxcFQycEJjMGxxU1RCSmFtOHdUME4zYVUxcVZXbFBha1Y2VFVOM2FVMXFXV2xQYWtWelNXcEpNMGxxYjNoTlEzZHBUV3BuYVU5cVNYTkpha2sxU1dwdmVFMTZRWE5KYWsxM1NXcHZlRXhEU1hwTlUwazJUVk4zYVUxNlNXbFBha0Z6U1dwTmVrbHFiM2hPVkVGelNXcE5NRWxxYnpWTVEwbDZUbE5KTms5RVozTkphazB5U1dwdmVFNXFRWE5KYWswelNXcHZlVTVFYTNOSmFrMDBTV3B2ZUU1RVFYTkphazAxU1dwdmVVMTZhM05KYWxGM1NXcHZlRTFFUVhOSmFsRjRTV3B2ZWs1RGQybE9SRWxwVDJwSk1VMVRkMmxPUkUxcFQycEZNRTFwZDJsT1JGRnBUMnBGTlU5VGQybE9SRlZwVDJwSmQweERTVEJPYVVrMlRWUk5NMHhEU1RCT2VVazJUV3BCZVV4RFNUQlBRMGsyVFZSbmMwbHFVVFZKYW05NFQwUk5jMGxxVlhkSmFtOTRUbFJuYzBscVZYaEphbTk1VFhwamMwbHFWWGxKYW05NVRsUlJjMGxxVlhwSmFtOHlUME4zYVU1VVVXbFBha2w2VG1sM2FVNVVWV2xQYWtWNVRsTjNhVTVVV1dsUGFsazFURU5KTVU1NVNUWk5WRkZ6U1dwVk5FbHFielJQUTNkcFRsUnJhVTlxUlhsUFEzZHBUbXBCYVU5cVJYbE9RM2RwVG1wRmFVOXFTWGROUTNkcFRtcEphVTlxU1hkUFUzZHBUbXBOYVU5cVJUVk9RM2RwVG1wUmFVOXFSVEJPUTNkcFRtcFZhVTlxU1hkTmVYZHBUbXBaYVU5cVJURk1RMGt5VG5sSk5rMXFRWHBNUTBreVQwTkpOazFxUVhkTVEwa3lUMU5KTmsxNlNYTkphbU4zU1dwdmVVMVVVWE5KYW1ONFNXcHZlVTVVUlhOSmFtTjVTV3B2TkUxVGQybE9lazFwVDJwRk5FOURkMmxPZWxGcFQycEZNazFwZDJsT2VsVnBUMnBGZDA1VGQybE9lbGxwVDJwak5VeERTVE5PZVVrMlQwUmpjMGxxWXpSSmFtOHlUME4zYVU1NmEybFBha1V3VFZOM2FVOUVRV2xQYWxsM1RFTkpORTFUU1RaUFJHZHpTV3BuZVVscWJ6Uk9RM2RwVDBSTmFVOXFXVEZNUTBrMFRrTkpOazVFV1hOSmFtY3hTV3B2ZUUxRVFYTkphbWN5U1dwdmVVMXFaM05KYW1jelNXcHZORTlEZDJsUFJHZHBUMnBKZDAxcGQybFBSR3RwVDJwTmVVeERTVFZOUTBrMlRWUmplVXhEU1RWTlUwazJUVlJCTlV4RFNUVk5hVWsyVGxSQmMwbHFhM3BKYW05NVRVUlpjMGxxYXpCSmFtOTVUVlJSYzBscWF6RkphbTk1VGtSUmMwbHFhekpKYW05NFRVUlZjMGxxYXpOSmFtOHhUMU4zYVU5VVoybFBha1Y0VFVOM2FVOVVhMmxQYWtVeVRFTkplRTFFUVdsUGFrVTFUbmwzYVUxVVFYaEphbTk1VFVSTmMwbHFSWGROYVVrMlRtbDNhVTFVUVhwSmFtOTRUVU4zYVUxVVFUQkphbTh3VFhsM2FVMVVRVEZKYW04elRFTkplRTFFV1dsUGFrMHhURU5KZUUxRVkybFBha2t3VDBOM2FVMVVRVFJKYW05NFRrUlpjMGxxUlhkUFUwazJUVlJWZDB4RFNYaE5WRUZwVDJwRk5VMTVkMmxOVkVWNFNXcHZlVTVFVVhOSmFrVjRUV2xKTmsxVVdUSk1RMGw0VFZSTmFVOXFSWHBQVTNkcFRWUkZNRWxxYjNoUFJFbHpTV3BGZUU1VFNUWk9lbWR6U1dwRmVFNXBTVFpOVkZWNFRFTkplRTFVWTJsUGFrVTBURU5KZUUxVVoybFBhbEZ6U1dwRmVFOVRTVFpPYWxGelNXcEZlVTFEU1RaT1ZGVnpTV3BGZVUxVFNUWk5ha1V4VEVOSmVFMXFTV2xQYWtWNFRWTjNhVTFVU1hwSmFtOTRUMVJyYzBscVJYbE9RMGsyVDFSbmMwbHFSWGxPVTBrMlQwTjNhVTFVU1RKSmFtOTZURU5KZUUxcVkybFBhbEY1VEVOSmVFMXFaMmxQYWtWM1QxTjNhVTFVU1RWSmFtOTRUMVJWYzBscVJYcE5RMGsyVG5wQmMwbHFSWHBOVTBrMlRtcEJjMGxxUlhwTmFVazJUVlJOTlV4RFNYaE5lazFwVDJwRk5VNURkMmxOVkUwd1NXcHZlRTFVUlhOSmFrVjZUbE5KTmsxVVdYcE1RMGw0VFhwWmFVOXFSVFZOYVhkcFRWUk5NMGxxYnpKTmFYZHBUVlJOTkVscWIzaE9lWGRwVFZSTk5VbHFiM2xOUkUxelNXcEZNRTFEU1RaTlZFVXpURU5KZUU1RVJXbFBhbEV4VEVOSmVFNUVTV2xQYWtVd1RXbDNhVTFVVVhwSmFtOTRUMU4zYVUxVVVUQkphbTk0VG1wWmMwbHFSVEJPVTBrMlQxUkJjMGxxUlRCT2FVazJUVlJqZUV4RFNYaE9SR05wVDJwck5VeERTWGhPUkdkcFQycEZNMDFEZDJsTlZGRTFTV3B2ZUU1VVVYTkpha1V4VFVOSk5rMTZZM05KYWtVeFRWTkpOazFxUVRSTVEwbDRUbFJKYVU5cVJUQk9lWGRwVFZSVmVrbHFiM2hOZVhkcFRWUlZNRWxxYjNoUFZGbHpTV3BGTVU1VFNUWk9WRmx6U1dwRk1VNXBTVFpOVkdjeVRFTkplRTVVWTJsUGFrVTBUVU4zYVUxVVZUUkphbTk0VDFSUmMwbHFSVEZQVTBrMlRXcEpkMHhEU1hoT2FrRnBUMnBGZVUxcGQybE5WRmw0U1dwdk1FNXBkMmxOVkZsNVNXcHZlVTFxU1hOSmFrVXlUWGxKTmsxVVl6Sk1RMGw0VG1wUmFVOXFZM2RNUTBsNFRtcFZhVTlxVlRWTVEwbDRUbXBaYVU5cVJYcE1RMGw0VG1wamFVOXFTWGxOZVhkcFRWUlpORWxxYnpWTlUzZHBUVlJaTlVscWIzaE5SR2R6U1dwRk0wMURTVFpOVkdNelRFTkplRTU2UldsUGFrbDRUa04zYVUxVVkzbEphbTh6VFdsM2FVMVVZM3BKYW05NlRVTjNhVTFVWXpCSmFtOTVUV3BKYzBscVJUTk9VMGsyVGtSSmMwbHFSVE5PYVVrMlRXcEpNRXhEU1hoT2VtTnBUMnBKZDAxVGQybE5WR00wU1dwdk1VMXBkMmxOVkdNMVNXcHZlVTFVUlhOSmFrVTBUVU5KTmsxcVVUSk1RMGw0VDBSRmFVOXFSVFJPUTNkcFRWUm5lVWxxYjNsTlUzZHBUVlJuZWtscWJ6Vk9hWGRwVFZSbk1FbHFiM2hPUkd0elNXcEZORTVUU1RaUFZHdHpTV3BGTkU1cFNUWk5WRUY0VEVOSmVFOUVZMmxQYWtVd1RubDNhVTFVWnpSSmFtOTRUbnBOYzBscVJUUlBVMGsyVFdwUk5FeERTWGhQVkVGcFQycEZNazVwZDJsTlZHdDRTV3B2ZWsxVGQybE5WR3Q1U1dwdmVFNXFhM05KYWtVMVRYbEpOazlVVFhOSmFrVTFUa05KTmsxcVJUQk1RMGw0VDFSVmFVOXFSWGxPUTNkcFRWUnJNa2xxYjNsUFEzZHBUVlJyTTBscWJ6Sk5VM2RwVFZSck5FbHFiekZQVTNkcFRWUnJOVWxxYjNwUFEzZHBUV3BCZDBscWIzaE5SRUZ6U1dwSmQwMVRTVFpPVkVWelNXcEpkMDFwU1RaT1JHZHpTV3BKZDAxNVNUWlBWR3R6U1dwSmQwNURTVFpOVkd0NFRFTkplVTFFVldsUGFrVTFUbmwzYVUxcVFUSkphbTh4VDBOM2FVMXFRVE5KYW05NFQwUkJjMGxxU1hkUFEwazJUVlJWTUV4RFNYbE5SR3RwVDJwRk1rNTVkMmxOYWtWM1NXcHZlRTFxUlhOSmFrbDRUVk5KTmsxcVFURk1RMGw1VFZSSmFVOXFTWHBPYVhkcFRXcEZla2xxYjNsTlUzZHBUV3BGTUVscWIzaFBSR056U1dwSmVFNVRTVFpOYWsxNlRFTkplVTFVV1dsUGFra3hUWGwzYVUxcVJUTkphbTh5VG1sM2FVMXFSVFJKYW04eVRtbDNhVTFxUlRWSmFtOTRUMFJKYzBscVNYbE5RMGsyVFdwTk1VeERTWGxOYWtWcFQycEplRTFwZDJsTmFrbDVTV3B2ZWsxcGQybE5ha2w2U1dwdmVFMTZXWE5KYWtsNVRrTkpOazU2UlhOSmFrbDVUbE5KTmsxVVp6Tk1RMGw1VFdwWmFVOXFTWGxQUTNkcFRXcEpNMGxxYjNsTmVrMXpTV3BKZVU5RFNUWk9lbEZ6U1dwSmVVOVRTVFpOVkVVMFRFTkplVTE2UVdsUGFrVjVUVU4zYVUxcVRYaEphbTh5VDFOM2FVMXFUWGxKYW05NFQxUkJjMGxxU1hwTmVVazJUbnBOYzBscVNYcE9RMGsyVFZSUmVFeERTWGxOZWxWcFQycFJlVXhEU1hsTmVsbHBUMnByTkV4RFNYbE5lbU5wVDJwTk5VeERTWGxOZW1kcFQycEZNVTE1ZDJsTmFrMDFTV3B2TlUxcGQybE5hbEYzU1dwdk0wOURkMmxOYWxGNFNXcHZlVTVwZDJsTmFsRjVTV3B2ZVUxVWEzTkpha2t3VFhsSk5rMVVhelJNUTBsNVRrUlJhVTlxUlRKUFEzZHBUV3BSTVVscWIzaE9lbU56U1dwSk1FNXBTVFpPYWxWelNXcEpNRTU1U1RaTmFrbDRURU5KZVU1RVoybFBha2wzVFdsM2FVMXFVVFZKYW05NFRtcE5jMGxxU1RGTlEwazJUVlJKTkV4RFNYbE9WRVZwVDJwUk5VeERTWGxPVkVscFQycEZlRTFUZDJsTmFsVjZTV3B2ZUUxVVFYTkpha2t4VGtOSk5rMVVWWE5KYWtreFRsTkpOazVxWjNOSmFra3hUbWxKTmsxcVNYaE1RMGw1VGxSamFVOXFTWGxQUTNkcFRXcFZORWxxYjNwT2VYZHBUV3BWTlVscWIzbE9lWGRwVFdwWmQwbHFielJOYVhkcFRXcFplRWxxYjNoUFZHZHpTV3BKTWsxcFNUWk9VM2RwVFdwWmVrbHFiek5NUTBsNVRtcFJhVTlxU1hoUFEzZHBUV3BaTVVscWIzaE5hazF6U1dwSk1rNXBTVFpOYWtrMFRFTkplVTVxWTJsUGFrVXdUVU4zYVUxcVdUUkphbTh5VDBOM2FVMXFXVFZKYW05NFRrUkZjMGxxU1ROTlEwazJUVlJqZUV4RFNYbE9la1ZwVDJwbk1FeERTWGxPZWtscFQycEZOVTFwZDJsTmFtTjZTV3B2ZDB4RFNYbE9lbEZwVDJwSmVFeERTWGxPZWxWcFQycFplRXhEU1hsT2VsbHBUMnBGZVV4RFNYbE9lbU5wVDJwSk5FeERTWGxPZW1kcFQycEpjMGxxU1ROUFUwazJUVlJWYzBscVNUUk5RMGsyVFZSVk0weERTWGxQUkVWcFQycFZlVXhEU1hsUFJFbHBUMnBKZDA5RGQybE5hbWQ2U1dwdmVFMTZhM05KYWtrMFRrTkpOazFxWjNOSmFrazBUbE5KTms1cVFYTkpha2swVG1sSk5rNUVSWE5KYWtrMFRubEpOazFxVVhOSmFrazBUME5KTmsxcVNUTk1RMGw1VDBScmFVOXFTWE5KYWtrMVRVTkpOazE1ZDJsTmFtdDRTV3B2ZUV4RFNYbFBWRWxwVDJwQmMwbHFTVFZOZVVrMlRWZ3dQU0lzSW1semN5STZJbWgwZEhCek9pOHZZV05qYjNWdWRITXVaMjl2WjJ4bExtTnZiU0lzSW1saGRDSTZJakUxTVRBMk16STVPVGtpTENKbGVIQWlPaUl4TlRFd05qTTJOVGs1SWl3aVlXeG5Jam9pVWxNeU5UWWlMQ0pyYVdRaU9pSXpZMlUwWVRrM1pEVXdNbUZtTURVNFpXSTJObUZqT0dRM016QmhOVGt5WVdJM1kyVmhOMll4SW4xOVwiLFxuaWRwOntcbmRvbWFpbjpcImdvb2dsZS5jb21cIixcbnByb3RvY29sOlwiT0lEQ1wiXG59LGluZm86e1xuYWNjZXNzVG9rZW46XCJ5YTI5Lkdsc0VCZG5CQ3ctS0xtcGdmaFFaRTRQaEVKWGxHbVdtckpZTzFMLXItdXk3eXZ5SzMxQ0x6UXVoOFlXenZRazE5TFVfYWI2RzdtUmRHSFNhMnluR20yRjJVOWlCejZndWlXaW5KMlFicVJ4b1ROOVU1R19fOEFxVEtsV2dcIixcbmlkVG9rZW46XCJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpOalpUUmhPVGRrTlRBeVlXWXdOVGhsWWpZMllXTTRaRGN6TUdFMU9USmhZamRqWldFM1pqRWlmUS5leUpoZW5BaU9pSTRNRGd6TWprMU5qWXdNVEl0ZEhGeU9IRnZhREV4TVRrME1tZGtNbXRuTURBM2REQnpPR1l5TnpkeWIya3VZWEJ3Y3k1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMGlMQ0poZFdRaU9pSTRNRGd6TWprMU5qWXdNVEl0ZEhGeU9IRnZhREV4TVRrME1tZGtNbXRuTURBM2REQnpPR1l5TnpkeWIya3VZWEJ3Y3k1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMGlMQ0p6ZFdJaU9pSXhNRE14TlRRME9URTNNVEV5TnpVeE1qWXpORElpTENKbGJXRnBiQ0k2SW5SbGMzUmhibVIwYUdsdWF6TXlNVUJuYldGcGJDNWpiMjBpTENKbGJXRnBiRjkyWlhKcFptbGxaQ0k2ZEhKMVpTd2lZWFJmYUdGemFDSTZJakl5Um5JNWFYWm9OV0o1ZUdVdGExZE9PR2x2YTFFaUxDSnViMjVqWlNJNkltVjVTWGRKYW04d1QwTjNhVTFUU1RaTlZFMTNURU5KZVVscWIzaE1RMGw2U1dwdmVrNURkMmxPUTBrMlRrUm5jMGxxVldsUGFrVjZURU5KTWtscWJ6Sk1RMGt6U1dwdk5VeERTVFJKYW04d1RXbDNhVTlUU1RaTlZFMHdURU5KZUUxRFNUWk9la2x6U1dwRmVFbHFiM2hOZWxGelNXcEZlVWxxYjNsT1JHTnpTV3BGZWtscWIzaE5lWGRwVFZSUmFVOXFSWE5KYWtVeFNXcHZlRXhEU1hoT2FVazJUVk4zYVUxVVkybFBhbFZ6U1dwRk5FbHFiM2RNUTBsNFQxTkpOazE1ZDJsTmFrRnBUMnBGZWsxRGQybE5ha1ZwVDJwRmMwbHFTWGxKYW05NFRsTjNhVTFxVFdsUGFrRnpTV3BKTUVscWJ6QlBRM2RwVFdwVmFVOXFSWHBOUTNkcFRXcFphVTlxUlhOSmFra3pTV3B2ZUUxRGQybE5hbWRwVDJwSmMwbHFTVFZKYW05NFRYcEJjMGxxVFhkSmFtOTRURU5KZWsxVFNUWk5VM2RwVFhwSmFVOXFRWE5KYWsxNlNXcHZlRTVVUVhOSmFrMHdTV3B2TlV4RFNYcE9VMGsyVDBSbmMwbHFUVEpKYW05NFRtcEJjMGxxVFROSmFtOTVUa1JyYzBscVRUUkphbTk0VGtSQmMwbHFUVFZKYW05NVRYcHJjMGxxVVhkSmFtOTRUVVJCYzBscVVYaEphbTk2VGtOM2FVNUVTV2xQYWtreFRWTjNhVTVFVFdsUGFrVXdUV2wzYVU1RVVXbFBha1UxVDFOM2FVNUVWV2xQYWtsM1RFTkpNRTVwU1RaTlZFMHpURU5KTUU1NVNUWk5ha0Y1VEVOSk1FOURTVFpOVkdkelNXcFJOVWxxYjNoUFJFMXpTV3BWZDBscWIzaE9WR2R6U1dwVmVFbHFiM2xOZW1OelNXcFZlVWxxYjNsT1ZGRnpTV3BWZWtscWJ6SlBRM2RwVGxSUmFVOXFTWHBPYVhkcFRsUlZhVTlxUlhsT1UzZHBUbFJaYVU5cVdUVk1RMGt4VG5sSk5rMVVVWE5KYWxVMFNXcHZORTlEZDJsT1ZHdHBUMnBGZVU5RGQybE9ha0ZwVDJwRmVVNURkMmxPYWtWcFQycEpkMDFEZDJsT2FrbHBUMnBKZDA5VGQybE9hazFwVDJwRk5VNURkMmxPYWxGcFQycEZNRTVEZDJsT2FsVnBUMnBKZDAxNWQybE9hbGxwVDJwRk1VeERTVEpPZVVrMlRXcEJla3hEU1RKUFEwazJUV3BCZDB4RFNUSlBVMGsyVFhwSmMwbHFZM2RKYW05NVRWUlJjMGxxWTNoSmFtOTVUbFJGYzBscVkzbEphbTgwVFZOM2FVNTZUV2xQYWtVMFQwTjNhVTU2VVdsUGFrVXlUV2wzYVU1NlZXbFBha1YzVGxOM2FVNTZXV2xQYW1NMVRFTkpNMDU1U1RaUFJHTnpTV3BqTkVscWJ6SlBRM2RwVG5wcmFVOXFSVEJOVTNkcFQwUkJhVTlxV1hkTVEwazBUVk5KTms5RVozTkphbWQ1U1dwdk5FNURkMmxQUkUxcFQycFpNVXhEU1RST1EwazJUa1JaYzBscVp6RkphbTk0VFVSQmMwbHFaekpKYW05NVRXcG5jMGxxWnpOSmFtODBUME4zYVU5RVoybFBha2wzVFdsM2FVOUVhMmxQYWsxNVRFTkpOVTFEU1RaTlZHTjVURU5KTlUxVFNUWk5WRUUxVEVOSk5VMXBTVFpPVkVGelNXcHJla2xxYjNsTlJGbHpTV3ByTUVscWIzbE5WRkZ6U1dwck1VbHFiM2xPUkZGelNXcHJNa2xxYjNoTlJGVnpTV3ByTTBscWJ6RlBVM2RwVDFSbmFVOXFSWGhOUTNkcFQxUnJhVTlxUlRKTVEwbDRUVVJCYVU5cVJUVk9lWGRwVFZSQmVFbHFiM2xOUkUxelNXcEZkMDFwU1RaT2FYZHBUVlJCZWtscWIzaE5RM2RwVFZSQk1FbHFiekJOZVhkcFRWUkJNVWxxYnpOTVEwbDRUVVJaYVU5cVRURk1RMGw0VFVSamFVOXFTVEJQUTNkcFRWUkJORWxxYjNoT1JGbHpTV3BGZDA5VFNUWk5WRlYzVEVOSmVFMVVRV2xQYWtVMVRYbDNhVTFVUlhoSmFtOTVUa1JSYzBscVJYaE5hVWsyVFZSWk1reERTWGhOVkUxcFQycEZlazlUZDJsTlZFVXdTV3B2ZUU5RVNYTkpha1Y0VGxOSk5rNTZaM05KYWtWNFRtbEpOazFVVlhoTVEwbDRUVlJqYVU5cVJUUk1RMGw0VFZSbmFVOXFVWE5KYWtWNFQxTkpOazVxVVhOSmFrVjVUVU5KTms1VVZYTkpha1Y1VFZOSk5rMXFSVEZNUTBsNFRXcEphVTlxUlhoTlUzZHBUVlJKZWtscWIzaFBWR3R6U1dwRmVVNURTVFpQVkdkelNXcEZlVTVUU1RaUFEzZHBUVlJKTWtscWIzcE1RMGw0VFdwamFVOXFVWGxNUTBsNFRXcG5hVTlxUlhkUFUzZHBUVlJKTlVscWIzaFBWRlZ6U1dwRmVrMURTVFpPZWtGelNXcEZlazFUU1RaT2FrRnpTV3BGZWsxcFNUWk5WRTAxVEVOSmVFMTZUV2xQYWtVMVRrTjNhVTFVVFRCSmFtOTRUVlJGYzBscVJYcE9VMGsyVFZSWmVreERTWGhOZWxscFQycEZOVTFwZDJsTlZFMHpTV3B2TWsxcGQybE5WRTAwU1dwdmVFNTVkMmxOVkUwMVNXcHZlVTFFVFhOSmFrVXdUVU5KTmsxVVJUTk1RMGw0VGtSRmFVOXFVVEZNUTBsNFRrUkphVTlxUlRCTmFYZHBUVlJSZWtscWIzaFBVM2RwVFZSUk1FbHFiM2hPYWxselNXcEZNRTVUU1RaUFZFRnpTV3BGTUU1cFNUWk5WR040VEVOSmVFNUVZMmxQYW1zMVRFTkplRTVFWjJsUGFrVXpUVU4zYVUxVVVUVkphbTk0VGxSUmMwbHFSVEZOUTBrMlRYcGpjMGxxUlRGTlUwazJUV3BCTkV4RFNYaE9WRWxwVDJwRk1FNTVkMmxOVkZWNlNXcHZlRTE1ZDJsTlZGVXdTV3B2ZUU5VVdYTkpha1V4VGxOSk5rNVVXWE5KYWtVeFRtbEpOazFVWnpKTVEwbDRUbFJqYVU5cVJUUk5RM2RwVFZSVk5FbHFiM2hQVkZGelNXcEZNVTlUU1RaTmFrbDNURU5KZUU1cVFXbFBha1Y1VFdsM2FVMVVXWGhKYW04d1RtbDNhVTFVV1hsSmFtOTVUV3BKYzBscVJUSk5lVWsyVFZSak1reERTWGhPYWxGcFQycGpkMHhEU1hoT2FsVnBUMnBWTlV4RFNYaE9hbGxwVDJwRmVreERTWGhPYW1OcFQycEplVTE1ZDJsTlZGazBTV3B2TlUxVGQybE5WRmsxU1dwdmVFMUVaM05KYWtVelRVTkpOazFVWXpOTVEwbDRUbnBGYVU5cVNYaE9RM2RwVFZSamVVbHFiek5OYVhkcFRWUmpla2xxYjNwTlEzZHBUVlJqTUVscWIzbE5ha2x6U1dwRk0wNVRTVFpPUkVselNXcEZNMDVwU1RaTmFra3dURU5KZUU1NlkybFBha2wzVFZOM2FVMVVZelJKYW04eFRXbDNhVTFVWXpWSmFtOTVUVlJGYzBscVJUUk5RMGsyVFdwUk1reERTWGhQUkVWcFQycEZORTVEZDJsTlZHZDVTV3B2ZVUxVGQybE5WR2Q2U1dwdk5VNXBkMmxOVkdjd1NXcHZlRTVFYTNOSmFrVTBUbE5KTms5VWEzTkpha1UwVG1sSk5rMVVRWGhNUTBsNFQwUmphVTlxUlRCT2VYZHBUVlJuTkVscWIzaE9lazF6U1dwRk5FOVRTVFpOYWxFMFRFTkplRTlVUVdsUGFrVXlUbWwzYVUxVWEzaEphbTk2VFZOM2FVMVVhM2xKYW05NFRtcHJjMGxxUlRWTmVVazJUMVJOYzBscVJUVk9RMGsyVFdwRk1FeERTWGhQVkZWcFQycEZlVTVEZDJsTlZHc3lTV3B2ZVU5RGQybE5WR3N6U1dwdk1rMVRkMmxOVkdzMFNXcHZNVTlUZDJsTlZHczFTV3B2ZWs5RGQybE5ha0YzU1dwdmVFMUVRWE5KYWtsM1RWTkpOazVVUlhOSmFrbDNUV2xKTms1RVozTkpha2wzVFhsSk5rOVVhM05KYWtsM1RrTkpOazFVYTNoTVEwbDVUVVJWYVU5cVJUVk9lWGRwVFdwQk1rbHFiekZQUTNkcFRXcEJNMGxxYjNoUFJFRnpTV3BKZDA5RFNUWk5WRlV3VEVOSmVVMUVhMmxQYWtVeVRubDNhVTFxUlhkSmFtOTRUV3BGYzBscVNYaE5VMGsyVFdwQk1VeERTWGxOVkVscFQycEplazVwZDJsTmFrVjZTV3B2ZVUxVGQybE5ha1V3U1dwdmVFOUVZM05KYWtsNFRsTkpOazFxVFhwTVEwbDVUVlJaYVU5cVNURk5lWGRwVFdwRk0wbHFiekpPYVhkcFRXcEZORWxxYnpKT2FYZHBUV3BGTlVscWIzaFBSRWx6U1dwSmVVMURTVFpOYWsweFRFTkplVTFxUldsUGFrbDRUV2wzYVUxcVNYbEphbTk2VFdsM2FVMXFTWHBKYW05NFRYcFpjMGxxU1hsT1EwazJUbnBGYzBscVNYbE9VMGsyVFZSbk0weERTWGxOYWxscFQycEplVTlEZDJsTmFra3pTV3B2ZVUxNlRYTkpha2w1VDBOSk5rNTZVWE5KYWtsNVQxTkpOazFVUlRSTVEwbDVUWHBCYVU5cVJYbE5RM2RwVFdwTmVFbHFiekpQVTNkcFRXcE5lVWxxYjNoUFZFRnpTV3BKZWsxNVNUWk9lazF6U1dwSmVrNURTVFpOVkZGNFRFTkplVTE2VldsUGFsRjVURU5KZVUxNldXbFBhbXMwVEVOSmVVMTZZMmxQYWswMVRFTkplVTE2WjJsUGFrVXhUWGwzYVUxcVRUVkphbTgxVFdsM2FVMXFVWGRKYW04elQwTjNhVTFxVVhoSmFtOTVUbWwzYVUxcVVYbEphbTk1VFZScmMwbHFTVEJOZVVrMlRWUnJORXhEU1hsT1JGRnBUMnBGTWs5RGQybE5hbEV4U1dwdmVFNTZZM05KYWtrd1RtbEpOazVxVlhOSmFra3dUbmxKTmsxcVNYaE1RMGw1VGtSbmFVOXFTWGROYVhkcFRXcFJOVWxxYjNoT2FrMXpTV3BKTVUxRFNUWk5WRWswVEVOSmVVNVVSV2xQYWxFMVRFTkplVTVVU1dsUGFrVjRUVk4zYVUxcVZYcEphbTk0VFZSQmMwbHFTVEZPUTBrMlRWUlZjMGxxU1RGT1UwazJUbXBuYzBscVNURk9hVWsyVFdwSmVFeERTWGxPVkdOcFQycEplVTlEZDJsTmFsVTBTV3B2ZWs1NWQybE5hbFUxU1dwdmVVNTVkMmxOYWxsM1NXcHZORTFwZDJsTmFsbDRTV3B2ZUU5VVozTkpha2t5VFdsSk5rNVRkMmxOYWxsNlNXcHZNMHhEU1hsT2FsRnBUMnBKZUU5RGQybE5hbGt4U1dwdmVFMXFUWE5KYWtreVRtbEpOazFxU1RSTVEwbDVUbXBqYVU5cVJUQk5RM2RwVFdwWk5FbHFiekpQUTNkcFRXcFpOVWxxYjNoT1JFVnpTV3BKTTAxRFNUWk5WR040VEVOSmVVNTZSV2xQYW1jd1RFTkplVTU2U1dsUGFrVTFUV2wzYVUxcVkzcEphbTkzVEVOSmVVNTZVV2xQYWtsNFRFTkplVTU2VldsUGFsbDRURU5KZVU1NldXbFBha1Y1VEVOSmVVNTZZMmxQYWtrMFRFTkplVTU2WjJsUGFrbHpTV3BKTTA5VFNUWk5WRlZ6U1dwSk5FMURTVFpOVkZVelRFTkplVTlFUldsUGFsVjVURU5KZVU5RVNXbFBha2wzVDBOM2FVMXFaM3BKYW05NFRYcHJjMGxxU1RST1EwazJUV3BuYzBscVNUUk9VMGsyVG1wQmMwbHFTVFJPYVVrMlRrUkZjMGxxU1RST2VVazJUV3BSYzBscVNUUlBRMGsyVFdwSk0weERTWGxQUkd0cFQycEpjMGxxU1RWTlEwazJUWGwzYVUxcWEzaEphbTk0VEVOSmVVOVVTV2xQYWtGelNXcEpOVTE1U1RaTldEQTlJaXdpYVhOeklqb2lhSFIwY0hNNkx5OWhZMk52ZFc1MGN5NW5iMjluYkdVdVkyOXRJaXdpYVdGMElqb3hOVEV3TmpNeU9UazVMQ0psZUhBaU9qRTFNVEEyTXpZMU9UbDkuT2E0aEUxcnlsa0MxY2ZPLW1aT0hiVC1IVm5JR3pBRENaTWp0VGR1Tk80b2hxZ1dJUklKV0NodmJyWkdHRldyQTJHdTIwRVVSSW00bkJXbXFTTUxybmZoelhhVlE1bnpBSUd4alZfNlA5YW1MUEh4UVltckVxTkVqQ08wTTJ6MVVBQjlUVXBwSExybkUxeXNLdUMzY0hoN1Q3am1rN28zdGVYVGoxMGZXUFdQazl1eG1lZjBfTXBGMDVIcFQ0SkZuYkV5ZVlHYzlOa0hLN3dEZk1YbWw2NEZXcE9oa2dwSVdiVzJjSXpqcnNOOUJJR1pxVG8tTDZBQzZUQV9RdHJhUHp2NGhQWDJzb3o2czlMZGZ6Qm1wVDZnOUl1STh2OWc4bEpEVFNkSm0za0V2c1c0NndLeHZwcDE5N0h0NENxbUlHNmdLeml0Q01ncGNZTnAyQlFVZWlBXCIsXCJyZWZyZXNoVG9rZW5cIjpcIjEvTEJCS0JUbkp3b0tyb1l6UEhib0s2aUEtaS1hZkZXTUxIMlZBQkJiNkJoa1wiLFxudG9rZW5UeXBlOlwiQmVhcmVyXCIsXG5pbmZvVG9rZW46e1xuc3ViOlwiMTAzMTU0NDkxNzExMjc1MTI2MzQyXCIsXG5uYW1lOlwidGVzdCB0aGlua1wiLFxuZ2l2ZW5fbmFtZTpcInRlc3RcIixcbmZhbWlseV9uYW1lOlwidGhpbmtcIixcbnBpY3R1cmU6XCJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZ1wiLFxuZW1haWw6XCJ0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tXCIsXG5lbWFpbF92ZXJpZmllZDp0cnVlLFxubG9jYWxlOlwiZW5cIn0sXG50b2tlbklESlNPTjp7XG5henA6XCI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbmF1ZDpcIjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbVwiLFxuc3ViOlwiMTAzMTU0NDkxNzExMjc1MTI2MzQyXCIsXG5lbWFpbDpcInRlc3RhbmR0aGluazMyMUBnbWFpbC5jb21cIixcbmVtYWlsX3ZlcmlmaWVkOlwidHJ1ZVwiLFxuYXRfaGFzaDpcIjIyRnI5aXZoNWJ5eGUta1dOOGlva1FcIixcbm5vbmNlOlwiZXlJd0lqbzBPQ3dpTVNJNk1UTXdMQ0l5SWpveExDSXpJam96TkN3aU5DSTZORGdzSWpVaU9qRXpMQ0kySWpvMkxDSTNJam81TENJNElqbzBNaXdpT1NJNk1UTTBMQ0l4TUNJNk56SXNJakV4SWpveE16UXNJakV5SWpveU5EY3NJakV6SWpveE15d2lNVFFpT2pFc0lqRTFJam94TENJeE5pSTZNU3dpTVRjaU9qVXNJakU0SWpvd0xDSXhPU0k2TXl3aU1qQWlPakV6TUN3aU1qRWlPakVzSWpJeUlqb3hOU3dpTWpNaU9qQXNJakkwSWpvME9Dd2lNalVpT2pFek1Dd2lNallpT2pFc0lqSTNJam94TUN3aU1qZ2lPaklzSWpJNUlqb3hNekFzSWpNd0lqb3hMQ0l6TVNJNk1Td2lNeklpT2pBc0lqTXpJam94TlRBc0lqTTBJam81TENJek5TSTZPRGdzSWpNMklqb3hOakFzSWpNM0lqb3lORGtzSWpNNElqb3hOREFzSWpNNUlqb3lNemtzSWpRd0lqb3hNREFzSWpReElqb3pOQ3dpTkRJaU9qSTFNU3dpTkRNaU9qRTBNaXdpTkRRaU9qRTVPU3dpTkRVaU9qSXdMQ0kwTmlJNk1UTTNMQ0kwTnlJNk1qQXlMQ0kwT0NJNk1UZ3NJalE1SWpveE9ETXNJalV3SWpveE5UZ3NJalV4SWpveU16Y3NJalV5SWpveU5UUXNJalV6SWpvMk9Dd2lOVFFpT2pJek5pd2lOVFVpT2pFeU5Td2lOVFlpT2pZNUxDSTFOeUk2TVRRc0lqVTRJam80T0N3aU5Ua2lPakV5T0N3aU5qQWlPakV5TkN3aU5qRWlPakl3TUN3aU5qSWlPakl3T1N3aU5qTWlPakU1TkN3aU5qUWlPakUwTkN3aU5qVWlPakl3TXl3aU5qWWlPakUxTENJMk55STZNakF6TENJMk9DSTZNakF3TENJMk9TSTZNeklzSWpjd0lqb3lNVFFzSWpjeElqb3lOVEVzSWpjeUlqbzRNU3dpTnpNaU9qRTRPQ3dpTnpRaU9qRTJNaXdpTnpVaU9qRXdOU3dpTnpZaU9qYzVMQ0kzTnlJNk9EY3NJamM0SWpvMk9Dd2lOemtpT2pFME1Td2lPREFpT2pZd0xDSTRNU0k2T0Rnc0lqZ3lJam80TkN3aU9ETWlPalkxTENJNE5DSTZORFlzSWpnMUlqb3hNREFzSWpnMklqb3lNamdzSWpnM0lqbzRPQ3dpT0RnaU9qSXdNaXdpT0RraU9qTXlMQ0k1TUNJNk1UY3lMQ0k1TVNJNk1UQTVMQ0k1TWlJNk5UQXNJamt6SWpveU1EWXNJamswSWpveU1UUXNJamsxSWpveU5EUXNJamsySWpveE1EVXNJamszSWpvMU9Td2lPVGdpT2pFeE1Dd2lPVGtpT2pFMkxDSXhNREFpT2pFNU55d2lNVEF4SWpveU1ETXNJakV3TWlJNk5pd2lNVEF6SWpveE1Dd2lNVEEwSWpvME15d2lNVEExSWpvM0xDSXhNRFlpT2pNMUxDSXhNRGNpT2pJME9Dd2lNVEE0SWpveE5EWXNJakV3T1NJNk1UVXdMQ0l4TVRBaU9qRTVNeXdpTVRFeElqb3lORFFzSWpFeE1pSTZNVFkyTENJeE1UTWlPakV6T1N3aU1URTBJam94T0RJc0lqRXhOU0k2Tnpnc0lqRXhOaUk2TVRVeExDSXhNVGNpT2pFNExDSXhNVGdpT2pRc0lqRXhPU0k2TmpRc0lqRXlNQ0k2TlRVc0lqRXlNU0k2TWpFMUxDSXhNaklpT2pFeE1Td2lNVEl6SWpveE9Ua3NJakV5TkNJNk9UZ3NJakV5TlNJNk9Dd2lNVEkySWpvekxDSXhNamNpT2pReUxDSXhNamdpT2pFd09Td2lNVEk1SWpveE9UVXNJakV6TUNJNk56QXNJakV6TVNJNk5qQXNJakV6TWlJNk1UTTVMQ0l4TXpNaU9qRTVOQ3dpTVRNMElqb3hNVEVzSWpFek5TSTZNVFl6TENJeE16WWlPakU1TWl3aU1UTTNJam8yTWl3aU1UTTRJam94Tnl3aU1UTTVJam95TURNc0lqRTBNQ0k2TVRFM0xDSXhOREVpT2pRMUxDSXhORElpT2pFME1pd2lNVFF6SWpveE9Td2lNVFEwSWpveE5qWXNJakUwTlNJNk9UQXNJakUwTmlJNk1UY3hMQ0l4TkRjaU9qazVMQ0l4TkRnaU9qRTNNQ3dpTVRRNUlqb3hOVFFzSWpFMU1DSTZNemNzSWpFMU1TSTZNakE0TENJeE5USWlPakUwTnl3aU1UVXpJam94TXl3aU1UVTBJam94T1RZc0lqRTFOU0k2TlRZc0lqRTFOaUk2TVRnMkxDSXhOVGNpT2pFNE1Dd2lNVFU0SWpveE9UUXNJakUxT1NJNk1qSXdMQ0l4TmpBaU9qRXlNaXdpTVRZeElqbzBOaXdpTVRZeUlqb3lNaklzSWpFMk15STZNVGMyTENJeE5qUWlPamN3TENJeE5qVWlPalU1TENJeE5qWWlPakV6TENJeE5qY2lPakl5TXl3aU1UWTRJam81TVN3aU1UWTVJam94TURnc0lqRTNNQ0k2TVRjM0xDSXhOekVpT2pJeE5Dd2lNVGN5SWpvM01pd2lNVGN6SWpvek1Dd2lNVGMwSWpveU1qSXNJakUzTlNJNk5ESXNJakUzTmlJNk1qSTBMQ0l4TnpjaU9qSXdNU3dpTVRjNElqbzFNaXdpTVRjNUlqb3lNVEVzSWpFNE1DSTZNalEyTENJeE9ERWlPakU0TkN3aU1UZ3lJam95TVN3aU1UZ3pJam81Tml3aU1UZzBJam94TkRrc0lqRTROU0k2T1Rrc0lqRTROaUk2TVRBeExDSXhPRGNpT2pFME55d2lNVGc0SWpveE56TXNJakU0T1NJNk1qUTRMQ0l4T1RBaU9qRTJOaXdpTVRreElqb3pNU3dpTVRreUlqb3hOamtzSWpFNU15STZPVE1zSWpFNU5DSTZNakUwTENJeE9UVWlPakV5TkN3aU1UazJJam95T0N3aU1UazNJam8yTVN3aU1UazRJam8xT1N3aU1UazVJam96T0N3aU1qQXdJam94TURBc0lqSXdNU0k2TlRFc0lqSXdNaUk2TkRnc0lqSXdNeUk2T1Rrc0lqSXdOQ0k2TVRreExDSXlNRFVpT2pFNU55d2lNakEySWpvMU9Dd2lNakEzSWpveE9EQXNJakl3T0NJNk1UVTBMQ0l5TURraU9qRTJOeXdpTWpFd0lqb3hNakVzSWpJeE1TSTZNakExTENJeU1USWlPakl6Tml3aU1qRXpJam95TVN3aU1qRTBJam94T0Rjc0lqSXhOU0k2TWpNekxDSXlNVFlpT2pJMU15d2lNakUzSWpvMk5pd2lNakU0SWpvMk5pd2lNakU1SWpveE9ESXNJakl5TUNJNk1qTTFMQ0l5TWpFaU9qSXhNaXdpTWpJeUlqb3pNaXdpTWpJeklqb3hNellzSWpJeU5DSTZOekVzSWpJeU5TSTZNVGczTENJeU1qWWlPakl5T0N3aU1qSTNJam95TXpNc0lqSXlPQ0k2TnpRc0lqSXlPU0k2TVRFNExDSXlNekFpT2pFeU1Dd2lNak14SWpvMk9Td2lNak15SWpveE9UQXNJakl6TXlJNk56TXNJakl6TkNJNk1UUXhMQ0l5TXpVaU9qUXlMQ0l5TXpZaU9qazRMQ0l5TXpjaU9qTTVMQ0l5TXpnaU9qRTFNeXdpTWpNNUlqbzVNaXdpTWpRd0lqbzNPQ3dpTWpReElqb3lOaXdpTWpReUlqb3lNVGtzSWpJME15STZNVGs0TENJeU5EUWlPakUyT0N3aU1qUTFJam94Tnpjc0lqSTBOaUk2TmpVc0lqSTBOeUk2TWpJeExDSXlORGdpT2pJd01pd2lNalE1SWpveE5qTXNJakkxTUNJNk1USTRMQ0l5TlRFaU9qUTVMQ0l5TlRJaU9qRXhNU3dpTWpVeklqb3hNVEFzSWpJMU5DSTZNVFVzSWpJMU5TSTZOamdzSWpJMU5pSTZNakl4TENJeU5UY2lPakl5T0N3aU1qVTRJam96Tnl3aU1qVTVJam95Tnl3aU1qWXdJam80TWl3aU1qWXhJam94T1Rnc0lqSTJNaUk2TlN3aU1qWXpJam8zTENJeU5qUWlPakl4T0N3aU1qWTFJam94TWpNc0lqSTJOaUk2TWpJNExDSXlOamNpT2pFME1Dd2lNalk0SWpvMk9Dd2lNalk1SWpveE5ERXNJakkzTUNJNk1UY3hMQ0l5TnpFaU9qZzBMQ0l5TnpJaU9qRTVNaXdpTWpjeklqb3dMQ0l5TnpRaU9qSXhMQ0l5TnpVaU9qWXhMQ0l5TnpZaU9qRXlMQ0l5TnpjaU9qSTRMQ0l5TnpnaU9qSXNJakkzT1NJNk1UVXNJakk0TUNJNk1UVTNMQ0l5T0RFaU9qVXlMQ0l5T0RJaU9qSXdPQ3dpTWpneklqb3hNemtzSWpJNE5DSTZNamdzSWpJNE5TSTZOakFzSWpJNE5pSTZOREVzSWpJNE55STZNalFzSWpJNE9DSTZNakkzTENJeU9Ea2lPaklzSWpJNU1DSTZNeXdpTWpreElqb3hMQ0l5T1RJaU9qQXNJakk1TXlJNk1YMD1cIixcbmlzczpcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbVwiLFxuaWF0OlwiMTUxMDYzMjk5OVwiLFxuZXhwOlwiMTUxMDYzNjU5OVwiLFxuYWxnOlwiUlMyNTZcIixcbmtpZDpcIjNjZTRhOTdkNTAyYWYwNThlYjY2YWM4ZDczMGE1OTJhYjdjZWE3ZjFcIn0sXG5leHBpcmVzOlwiMTkxMDYzNjU5OVwiLFxuZW1haWw6XCJ0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tXCJ9LFxuaW5mb1Rva2VuOntcbnN1YjpcIjEwMzE1NDQ5MTcxMTI3NTEyNjM0MlwiLFxubmFtZTpcInRlc3QgdGhpbmtcIixcbmdpdmVuX25hbWU6XCJ0ZXN0XCIsXG5mYW1pbHlfbmFtZTpcInRoaW5rXCIsXG5waWN0dXJlOlwiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1YZFVJcWRNa0NXQS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBQS80MjUycnNjYnY1TS9waG90by5qcGdcIixcbmVtYWlsOlwidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbVwiLFxuZW1haWxfdmVyaWZpZWQ6dHJ1ZSxcbmxvY2FsZTpcImVuXCJ9LFxuaWRlbnRpdHk6XCJ1c2VyOi8vZ29vZ2xlLmNvbS90ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tXCIsXG5tZXNzYWdlSW5mbzp7XG51c2VyUHJvZmlsZTp7XG51c2VybmFtZTpcInRlc3RhbmR0aGluazMyMUBnbWFpbC5jb21cIixcbmNuOlwidGVzdGFuZHRoaW5rMzIxXCIsXG5hdmF0YXI6XCJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZ1wiLFxubG9jYWxlOlwiZW5cIixcbnVzZXJVUkw6XCJ1c2VyOi8vZ29vZ2xlLmNvbS90ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tXCJ9LFxuaWRwOlwiZ29vZ2xlLmNvbVwiLFxuYXNzZXJ0aW9uOlwiZXlKMGIydGxia2xFSWpvaVpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHFUbXBhVkZKb1QxUmthMDVVUVhsWlYxbDNUbFJvYkZscVdUSlpWMDAwV2tSamVrMUhSVEZQVkVwb1dXcGthbHBYUlROYWFrVnBabEV1WlhsS2FHVnVRV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2FHUlhVV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2VtUlhTV2xQYVVsNFRVUk5lRTVVVVRCUFZFVXpUVlJGZVU1NlZYaE5hbGw2VGtSSmFVeERTbXhpVjBad1lrTkpOa2x1VW14ak0xSm9ZbTFTTUdGSGJIVmhlazE1VFZWQ2JtSlhSbkJpUXpWcVlqSXdhVXhEU214aVYwWndZa1k1TWxwWVNuQmFiV3hzV2tOSk5tUklTakZhVTNkcFdWaFNabUZIUm5waFEwazJTV3BKZVZKdVNUVmhXRnB2VGxkS05XVkhWWFJoTVdSUFQwZHNkbUV4UldsTVEwcDFZakkxYWxwVFNUWkpiVlkxVTFoa1NtRnRPSGRVTUU0ellWVXhWRk5VV2s1V1JURXpWRVZPU21WVmJIRmlNMmhOVVRCc05sTlhjSFpsYXpWRVpESnNUMUV3YXpKVWExSnVZekJzY1ZaWGJGQmhhMVkyVkVWT1NrMXJiSEZpZWtwTlVUQnJlbE5YY0haT1ZYaEVVMVJTU21GdE9IZFVWMnd6WVZVNVZGTlVXazVXUlRCM1ZFVk9TbVZGTVVSVFZGcFBaV3RzZWxOWGNFWmxSV3h4WWpOb1RtVnNSbnBUVjNCR1pWVnNjV0l6YkU5U1IwNTZVMWR3Um1WcmJIRmlNMmhPWlZoa2NGUldVbEpoVlRseFVsaE9TbUZyVlhoVFYzQjJaVVY0UkZOWWFFOWhWV3N5VkZaT00yRlZNVlZaTW14UVlXeFdlbE5YY0VaT1JXeHhZak5rVFZFd2JEUlVNVTVLVG1zeE5XUXliRTVoYTBad1ZESndSbVZyTVVSa01teE9ZV3RXY0ZReWNFWmpNR3h4VTFoc1NtRnRPVFJVYkU0ellWVXhjVlJYYkZCaGEwWjZVMWR3U2sxRmJIRmlla0pRVVROa2NGUlhjRlpoVlRseFVsaHdUbEV6WkhCVVYzQmFZVlU1Y1ZKWVRrcGhhMnQ2VTFkd2RtVkZNVVJrTW14T1lXMWtjRlF5Y0Vwak1HeHhVMVJXU21GdE9UUlVXSEJDWXpCc2NWUllaRXBoYlRrMFZFVk9TbVZyTVZSVFZGcE9WVE5rY0ZSWWNFcGhWVGx4VVZoT1NtRnJNVFpUVjNCMlpVVTFWVkZZVGtwaGF6QjNVMWR3ZGs1VmVFUlRXSEJQVlRCck1sUXdVbTVqTUd4eFZGUktTbUZ0T1RSVWJYQkNZekJzY1ZSVVRrcGhiVGsxVkd0U2NtTXdiSEZVVkZKS1lXMDVORlJyVWtKak1HeHhWRlJXU21GdE9UVlVXSEJ5WXpCc2NWVllaRXBoYlRrMFZGVlNRbU13YkhGVldHaEtZVzA1TmxSclRqTmhWVFZGVTFkc1VHRnJhM2hVVms0ellWVTFSVlJYYkZCaGExVjNWRmRzTTJGVk5VVlZWMnhRWVd0Vk1WUXhUak5oVlRWRlZsZHNVR0ZyYkROVVJVNUtUVVUxY0ZOVVdrNVdSVEI2VkVWT1NrMUZOVFZUVkZwT1lXdEdOVlJGVGtwTlJUbEVVMVJhVGxaSFpIcFRWM0JTVGxWc2NXSXphRkJTUlRGNlUxZHdWbVF3YkhGaU0yaFBWa2RrZWxOWGNGWmxSV3h4WWpOc1RtVnRUbnBUVjNCV1pWVnNjV0l6YkU5V1JrWjZVMWR3Vm1WcmJIRmlla3BRVVROa2NGUnNVbEpoVlRseFUxaHdUMkZZWkhCVWJGSldZVlU1Y1ZKWWJFOVZNMlJ3Vkd4U1dtRlZPWEZYVkZaTlVUQnJlRlJ1YkVwT2F6RlZWVmhPU21Gc1ZUQlRWM0IyVGtVNVJHUXliRTlXUjNSd1ZESndSbVZWT1VSa01teFBZV3RHY0ZReWNFWmxWVFZFWkRKc1QyRnJWbkJVTW5CS1pEQXhSR1F5YkU5aGEyeHdWREp3U21Rd09WUmtNbXhQWVdzeGNGUXljRVpPVlRWRVpESnNUMkZzUm5CVU1uQkdUVVUxUkdReWJFOWhiRlp3VkRKd1NtUXdNVFZrTW14UFlXeHNjRlF5Y0VaTlZYaEVVMVJLVDJWVmF6SlVWM0JDWld0NFJGTlVTbEJSTUdzeVZGZHdRbVF3ZUVSVFZFcFFWVEJyTWxSWWNFcGpNR3h4V1ROa1NtRnRPVFZVVmxKU1l6QnNjVmt6YUVwaGJUazFWR3hTUm1Nd2JIRlpNMnhLWVcwNE1GUldUak5oVlRVMlZGZHNVR0ZyVlRCVU1FNHpZVlUxTmxWWGJGQmhhMVY1VkZkc00yRlZOVFpXVjJ4UVlXdFdNMVJzVGpOaFZUVTJWMWRzVUdGdFRURlVSVTVLVFRBMU5WTlVXbEJTUjA1NlUxZHdhazVGYkhGaWVrcFFVVE5rY0ZSdWNISmhWVGx4VWxSQ1RsVXpaSEJVTUZKQ1lWVTVjVmRZWkUxUk1Hc3dWRlpPU2s1ck9VVmFNMDVLWVcxa05WTlhjSFpPUlRWRVpESnNVRkpGTVhCVU1uQmFUVlY0UkZOVVVrOVJNR3N5Vkd0U1dtTXdiSEZhZWtaS1lXMDVORlJWVWtKak1HeHhXbnBLU21GdE9UVlVWM0J1WXpCc2NWcDZUa3BoYlRnd1ZEQk9NMkZWT1VWYU1teFFZV3RzTTFSWGJETmhWVGxGWVRKc1VHRnJNVFZVUlU1S1RsVXhSRk5VV2s1V1IwNDFWRVZPU2s1Vk1WUlRWRnBPVmtWRk1WUkZUa3BPVlRGd1UxUmFUMVpGUm5wVFYzQnlaV3RzY1dJemJFNVNSbXg2VTFkd2NrMUZiSEZpTTJ4T1ZrWkdlbE5YY0hKTlZXeHhZak5zVDFKR1JucFRWM0J5VFd0c2NXSXphRTVTUmxaNlUxZHdjazB3YkhGaWVrWlFWVE5rY0ZReFVtNWhWVGx4VWxob1RsRXpaSEJVTVZKeVlWVTVjVkpVU2sxUk1HdzBWRlZTUW1GVk9YRlNWRlpQWlZoa2NGUldVa0psUld4eFlqTnNUbEpGTVhwVFYzQkdaREF4Y0ZOVVdrOWhXR1J3VkZaU1FtVnJiSEZpTTJoT1VUTmtjRlJXVWtKTlJXeHhZbnBDVG1WWVpIQlVWbEpDVFZWc2NXSjZUazFSTUd3MFZGVlNXbUZWT1hGVVZFWk5VVEJzTkZSVlVtcGhWVGx4VTFSQ1VGRXpaSEJVVmxKQ1RrVnNjV0l6YUU5U1JteDZVMWR3Um1Rd09WUlRWRnBPVmtaV00xUkZUa3BsUlRGVlVWZHNVR0ZyVlRGVVdHd3pZVlV4VlZKWWFFcGhiVGsxVkd0U1VtTXdiSEZTV0doT1lWVnJNbFJXVWxwTmEzaEVVMWhvVGxaRk1YQlVNbkJHWldzNVZHUXliRTVXUlZWM1UxZHdkbVZGT1VWVFdFNUtZV3RXTkZSc1RrcE9helUyV2pOT1NtRnJWalJVYld4S1Rtc3hWVlpZYUUxUk1HdzBWRlpTYW1GVk9YRlNWRkpOVVRCc05GUldVbTVoVlRseFZWaE9TbUZyVmpSVU1VNUtUbXMxY1ZWWVRrcGhhMVkxVkZWT1NrNXJOVlZXV0U1S1lXdFdOVlJXVGtwT2F6RnhVbFJHVFZFd2JEUlVWM0JLWVZVNWNWSllhRTVWTTJSd1ZGWlNTbVZyYkhGaU0yaFFWa2QwZWxOWGNFWmxWVFZFVTFSYVVGWkhaSHBUVjNCR1pWVTFWRk5VV2xCUk0yUndWRlpTU2sxcmJIRmlNM0JOVVRCc05GUlhjR3BoVlRseFZWaHNUVkV3YkRSVVYzQnVZVlU1Y1ZKWVpGQlZNMlJ3VkZaU1NrNVZiSEZpTTJoUVZrWldlbE5YY0VabGF6RkVVMVJhVDJWclJucFRWM0JHWldzeFZGTlVXazloYTBaNlUxZHdSbVZyTVhCVFZGcE9Wa1V3TVZSRlRrcGxSVEUyVkZkc1VHRnJWVEZVYTA0ellWVXhWVlJVUWtwaGJUazBWRlpTUm1Nd2JIRlNXSEJQVlRCck1sUldVbHBsYTNoRVUxaG9UbVZzYkhCVU1uQkdUbFV4Y0dReWJFNVdSVEI2VTFkd2RrMXJNWEJrTW14T1ZrVXdNRk5YY0habFJUVTFaREpzVGxaRk1ERlRWM0IyWlZVeFJWUllUa3BoYTFWM1ZGVk9TazVyTVZWU1ZFNU5VVEJzTkZSclVrWmhWVGx4VlZSR1RWRXdiRFJVYTFKS1lWVTVjVkpVUWs1aFdHUndWRlpTVW1WcmJIRmlNMmhRVlROa2NGUldVbEpOUld4eFlqTm9UMkZzYkhwVFYzQkdUVVUxVkZOVVdsQldSVVo2VTFkd1JrMUZOWEJUVkZwT1ZrZE9ORlJGVGtwbFJUVkZXVEpzVUdGdGN6RlVSVTVLWlVVMVJWb3liRkJoYTFWNlZGVk9NMkZWTVZWVlZGWktZVzA1TkZSc1VsSmpNR3h4VWxSR1RsRXdhekpVV0hCcVl6QnNjVkpVUms1Vk1Hc3lWRmR3UWs1RmVFUlRXR2hQVmtWc2NGUXljRVpOUlRVMVpESnNUbFpHVmpaVFYzQjJaVVV4TldReWJFNVdSbFYzVTFkd2RtVkZPVlZYV0U1S1lXdFZlRlJzVGtwT2F6VlZWMWhPU21GclZYaFViV3hLVG1zeFZWcDZTazFSTUd3MFZHeFNhbUZWT1hGU1ZGSk9VVE5rY0ZSV1VsWk9SV3h4WWpOb1VGWkdSbnBUVjNCR1RWVTVWRk5VV2s1aGEyd3pWRVZPU21WRk5YRlJWMnhRWVd0V05WUlhiRE5oVlRGVlYxaG9TbUZ0T0hkVWJXd3pZVlV4VlZkWWJFcGhiVGsxVkZkd1NtTXdiSEZTVkVwT1pWVnJNbFJXVW1wTmEzaEVVMWhvVDJGc1JuQlVNbkJxWkRCNFJGTllhRTloYkZad1ZESndWazVWZUVSVFdHaFBZV3hzY0ZReWNFWmxhM2hFVTFob1QyRnRUbkJVTW5CS1pWVXhOV1F5YkU1V1Jtc3dVMWR3ZGs1Vk1WUmtNbXhPVmtack1WTlhjSFpsUlRGRldqTk9TbUZyVlhwVVZVNUtUbXN4VlZsNlRrMVJNR3cwVkc1d1JtRlZPWEZUV0doUFVUTmtjRlJXVW1wbFZXeHhZbnBPVG1GWVpIQlVWbEpxWld0c2NXSXpjRTVSTTJSd1ZGWlNhazFGYkhGaU0yeE9ZV3RzZWxOWGNFWk5NRFZVVTFSYVQxSkZiSHBUVjNCR1RUQTFjRk5VV2s1aGEydDNWRVZPU21WRk5UWlpNbXhRWVd0c00xUldUak5oVlRGVldYcFNTbUZ0T0hoVVYyd3pZVlV4VlZsNlZrcGhiVGsxVkZaU1JtTXdiSEZTVkZKT1VUQnJNbFJYY0ZKTmEzaEVVMWhvVUZKRlZuQlVNbkJHVGtVMVJHUXliRTVXUjJRMVUxZHdkbVZWTVZSa01teE9Wa2RrTmxOWGNIWk9WVFZ3WkRKc1RsWkhZM2RUVjNCMlpVVTFSV0V6VGtwaGExVXdWR3hPU2s1ck9WVmhNMDVLWVd0Vk1GUnRiRXBPYXpGVlVWaG9UVkV3YkRSVU1GSnFZVlU1Y1ZKVVFrOWxXR1J3VkZaU2JrNUZiSEZpTTJoUFpXc3hlbE5YY0VaT1JUbFVVMVJhVG1Gc1JUQlVSVTVLWlVVNVZWRlhiRkJoYTFWNVZHMXNNMkZWTVZWaE0yaEtZVzA1TmxSV1RqTmhWVEZWWVROc1NtRnRPVFJVYlhCeVl6QnNjVkpVVms1bFZXc3lWREZTVG1Nd2JIRlNWRlpQVVRCck1sUlhjRVpOUlhoRVUxaG9VRlpHVm5CVU1uQkdaVlUxUkdReWJFNVdSM041VTFkd2RtVlZPVVJrTW14T1ZrZHplbE5YY0haTmF6RlVaREpzVGxaSGN6QlRWM0IyVFZVNVZHUXliRTVXUjNNeFUxZHdkbVZyT1VSa01teE9ZV3RHTTFOWGNIWmxSVEZGVVZoT1NtRnJiRE5VVms1S1RtczFWVkpZVGtwaGEyd3pWRmRzU2s1ck5VVmFNMDVLWVd0c00xUlliRXBPYXpsVllUTk9TbUZyYkROVWEwNUtUbXN4VldFemFFMVJNR3cxVkZWU1ZtRlZPWEZTVkZaUFpWaGtjRlJYY0VKTmEyeHhZbnBHVUZFelpIQlVWM0JDVFRCc2NXSXphRkJTUlVaNlUxZHdTbVF3T1VSVFZGcE9Wa1pWZDFSRlRrcGxWVEZGWVRKc1VHRnJWWGxVYm13ellWVXhjVkpZWkVwaGJUazBWRmR3Um1Nd2JIRlRXR2hPVlRCck1sUlhjRUpOVlhoRVUxaHNUbFpGYkhCVU1uQktaV3MxY0dReWJFNWhhMVkyVTFkd2RtVlZNVlJrTW14T1lXdFZkMU5YY0habFJUbEZXVE5PU21GcmJEUlViRTVLVG1zeGNWUlljRTFSTUd3MVZGWlNXbUZWT1hGVFZFWk9aVmhrY0ZSWGNFWk5NR3h4WW5wS1QyRllaSEJVVjNCR1RrVnNjV0o2U2s5aFdHUndWRmR3Ums1VmJIRmlNMmhRVWtWc2VsTlhjRXBsVlRGRVUxUmFUbUZyTUhoVVJVNUtaVlV4Y1ZKWGJGQmhhMncwVkZkc00yRlZNWEZUV0d4S1lXMDVObFJYYkROaFZURnhVMWh3U21GdE9UUlVXSEJhWXpCc2NWTlliRTlSTUdzeVZHNXdSbU13YkhGVFdHeFBWVEJyTWxSV1VtNU5NSGhFVTFoc1RtRnNiSEJVTW5CS1pWVTVSR1F5YkU1aGEydDZVMWR3ZG1WVk1UWlVXRTVLWVd0c05WUXdUa3BPYXpVMlZWaE9TbUZyYkRWVU1VNUtUbXN4VlZKVVVrMVJNR3cxVkZod1FtRlZPWEZTV0d4T1VUTmtjRlJYY0U1bFJXeHhZbnBLVUZVelpIQlVWM0JPWlZWc2NXSXphRkJXUlVaNlUxZHdTbVZyTVRWVFZGcFBaV3N4ZWxOWGNFcGxhelZFVTFSYVRsWkdSalJVUlU1S1pWVXhObFpYYkZCaGJFWTFWRVZPU21WVk1UWlhWMnhRWVcxek1GUkZUa3BsVlRFMldUSnNVR0ZyTURGVVJVNUtaVlV4TmxveWJGQmhhMVY0VkZoc00yRlZNWEZVVkZaS1lXMDRNVlJYYkROaFZURnhWVmhrU21GdE9IcFVNRTR6WVZVeGNWVllhRXBoYlRrMVZHMXNNMkZWTVhGVldHeEtZVzA1TlZSV1VuSmpNR3h4VTFSQ1RtVlZhekpVVmxKeVRrVjRSRk5ZYkU5U1JrWndWREp3Umsxck9VUmtNbXhPWVd4RmVGTlhjSFpsUlRVMldUTk9TbUZyYTNkVWJXeEtUbXMxY1ZaWVRrcGhhMnQzVkc1c1NrNXJNWEZUV0doTlVUQnNOVlJyVW01aFZUbHhVMWhrVG1GWVpIQlVWM0JTVGxWc2NXSXphRTloYXpGNlUxZHdTazFWTVVSVFZGcE9Wa1ZyTUZSRlRrcGxWVFZWVWxkc1VHRnNSVEZVUlU1S1pWVTFWVk5YYkZCaGExWTBWRlpPTTJGVk1YRldXSEJLWVcwNU5GUldVa0pqTUd4eFUxUkdUMUV3YXpKVVZsSldZekJzY1ZOVVJrOVZNR3N5Vkcxd2JtTXdiSEZUVkVaUFlWVnJNbFJYY0VwbFJYaEVVMWhzVDFaSFRuQlVNbkJLWlZVNVJHUXliRTVoYkZVd1UxZHdkbVZyTlRWa01teE9ZV3hWTVZOWGNIWmxWVFUxWkRKc1RtRnNiRE5UVjNCMlRrVXhjR1F5YkU1aGJHdzBVMWR3ZG1WRk9WVmFNMDVLWVd0cmVWUlhiRXBPYXpWVVpESnNUbUZzYkRaVFYzQjJUVEI0UkZOWWJFOWhiRVp3VkRKd1NtVkZPVVJrTW14T1lXeHJlRk5YY0habFJURnhWRmhPU21GcmEzbFViV3hLVG1zeGNWTlVVazFSTUd3MVZHMXdhbUZWT1hGU1ZFSk9VVE5rY0ZSWGNGcE9SV3h4WW5wS1VGRXpaSEJVVjNCYVRsVnNjV0l6YUU5U1JWWjZVMWR3U2swd01VUlRWRnBPVmtkT05GUkZUa3BsVlRVMlVsZHNVR0Z0WTNkVVJVNUtaVlUxTmxOWGJGQmhhMVV4VkZkc00yRlZNWEZaTTNCS1lXMDVNMVJGVGtwbFZUVTJWVmRzVUdGcmJEUlVSVTVLWlZVMU5sWlhiRkJoYkd3MFZFVk9TbVZWTlRaWFYyeFFZV3RXTlZSRlRrcGxWVFUyV1RKc1VHRnJhekJVUlU1S1pWVTFObG95YkZCaGEyeDZVMWR3U2swd09WUlRWRnBPVmtaV2VsTlhjRXBPUlRGRVUxUmFUbFpHVlhwVVJVNUtaVlU1UlZKWGJGQmhiRlkxVkVWT1NtVlZPVVZUVjJ4UVlXdHNNMVF3VGpOaFZURnhXak53U21GdE9UUlVXSEJ5WXpCc2NWTlVVazlSTUdzeVZGZHdibU13YkhGVFZGSlBWVEJyTWxSdGNFSmpNR3h4VTFSU1QyRlZhekpVYTFKR1l6QnNjVk5VVWs5bFZXc3lWRmR3VW1Nd2JIRlRWRkpRVVRCck1sUlhjRXBOTUhoRVUxaHNVRkpIZEhCVU1uQktZekJzY1ZOVVZrNVJNR3N5VkZoc00yRlZNWEZoTTJoS1lXMDVORlJGVGtwbFZUbFZVMWRzVUdGclJucFRWM0JLVGxVeE5WTlVXazVYUkVFNVNXbDNhV0ZZVG5wSmFtOXBZVWhTTUdOSVRUWk1lVGxvV1RKT2RtUlhOVEJqZVRWdVlqSTVibUpIVlhWWk1qbDBTV2wzYVdGWFJqQkphbTk0VGxSRmQwNXFUWGxQVkdzMVRFTktiR1ZJUVdsUGFrVXhUVlJCTWsxNldURlBWR3c1TGs5aE5HaEZNWEo1Ykd0RE1XTm1UeTF0V2s5SVlsUXRTRlp1U1VkNlFVUkRXazFxZEZSa2RVNVBORzlvY1dkWFNWSkpTbGREYUhaaWNscEhSMFpYY2tFeVIzVXlNRVZWVWtsdE5HNUNWMjF4VTAxTWNtNW1hSHBZWVZaUk5XNTZRVWxIZUdwV1h6WlFPV0Z0VEZCSWVGRlpiWEpGY1U1RmFrTlBNRTB5ZWpGVlFVSTVWRlZ3Y0VoTWNtNUZNWGx6UzNWRE0yTklhRGRVTjJwdGF6ZHZNM1JsV0ZScU1UQm1WMUJYVUdzNWRYaHRaV1l3WDAxd1JqQTFTSEJVTkVwR2JtSkZlV1ZaUjJNNVRtdElTemQzUkdaTldHMXNOalJHVjNCUGFHdG5jRWxYWWxjeVkwbDZhbkp6VGpsQ1NVZGFjVlJ2TFV3MlFVTTJWRUZmVVhSeVlWQjZkalJvVUZneWMyOTZObk01VEdSbWVrSnRjRlEyWnpsSmRVazRkamxuT0d4S1JGUlRaRXB0TTJ0RmRuTlhORFozUzNoMmNIQXhPVGRJZERSRGNXMUpSelpuUzNwcGRFTk5aM0JqV1U1d01rSlJWV1ZwUVNJc0luUnZhMlZ1U1VSS1UwOU9JanA3SW1GNmNDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW1GMVpDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW5OMVlpSTZJakV3TXpFMU5EUTVNVGN4TVRJM05URXlOak0wTWlJc0ltVnRZV2xzSWpvaWRHVnpkR0Z1WkhSb2FXNXJNekl4UUdkdFlXbHNMbU52YlNJc0ltVnRZV2xzWDNabGNtbG1hV1ZrSWpvaWRISjFaU0lzSW1GMFgyaGhjMmdpT2lJeU1rWnlPV2wyYURWaWVYaGxMV3RYVGpocGIydFJJaXdpYm05dVkyVWlPaUpsZVVsM1NXcHZNRTlEZDJsTlUwazJUVlJOZDB4RFNYbEphbTk0VEVOSmVrbHFiM3BPUTNkcFRrTkpOazVFWjNOSmFsVnBUMnBGZWt4RFNUSkphbTh5VEVOSk0wbHFielZNUTBrMFNXcHZNRTFwZDJsUFUwazJUVlJOTUV4RFNYaE5RMGsyVG5wSmMwbHFSWGhKYW05NFRYcFJjMGxxUlhsSmFtOTVUa1JqYzBscVJYcEphbTk0VFhsM2FVMVVVV2xQYWtWelNXcEZNVWxxYjNoTVEwbDRUbWxKTmsxVGQybE5WR05wVDJwVmMwbHFSVFJKYW05M1RFTkplRTlUU1RaTmVYZHBUV3BCYVU5cVJYcE5RM2RwVFdwRmFVOXFSWE5KYWtsNVNXcHZlRTVUZDJsTmFrMXBUMnBCYzBscVNUQkphbTh3VDBOM2FVMXFWV2xQYWtWNlRVTjNhVTFxV1dsUGFrVnpTV3BKTTBscWIzaE5RM2RwVFdwbmFVOXFTWE5KYWtrMVNXcHZlRTE2UVhOSmFrMTNTV3B2ZUV4RFNYcE5VMGsyVFZOM2FVMTZTV2xQYWtGelNXcE5la2xxYjNoT1ZFRnpTV3BOTUVscWJ6Vk1RMGw2VGxOSk5rOUVaM05KYWsweVNXcHZlRTVxUVhOSmFrMHpTV3B2ZVU1RWEzTkphazAwU1dwdmVFNUVRWE5KYWswMVNXcHZlVTE2YTNOSmFsRjNTV3B2ZUUxRVFYTkphbEY0U1dwdmVrNURkMmxPUkVscFQycEpNVTFUZDJsT1JFMXBUMnBGTUUxcGQybE9SRkZwVDJwRk5VOVRkMmxPUkZWcFQycEpkMHhEU1RCT2FVazJUVlJOTTB4RFNUQk9lVWsyVFdwQmVVeERTVEJQUTBrMlRWUm5jMGxxVVRWSmFtOTRUMFJOYzBscVZYZEphbTk0VGxSbmMwbHFWWGhKYW05NVRYcGpjMGxxVlhsSmFtOTVUbFJSYzBscVZYcEphbTh5VDBOM2FVNVVVV2xQYWtsNlRtbDNhVTVVVldsUGFrVjVUbE4zYVU1VVdXbFBhbGsxVEVOSk1VNTVTVFpOVkZGelNXcFZORWxxYnpSUFEzZHBUbFJyYVU5cVJYbFBRM2RwVG1wQmFVOXFSWGxPUTNkcFRtcEZhVTlxU1hkTlEzZHBUbXBKYVU5cVNYZFBVM2RwVG1wTmFVOXFSVFZPUTNkcFRtcFJhVTlxUlRCT1EzZHBUbXBWYVU5cVNYZE5lWGRwVG1wWmFVOXFSVEZNUTBreVRubEpOazFxUVhwTVEwa3lUME5KTmsxcVFYZE1RMGt5VDFOSk5rMTZTWE5KYW1OM1NXcHZlVTFVVVhOSmFtTjRTV3B2ZVU1VVJYTkphbU41U1dwdk5FMVRkMmxPZWsxcFQycEZORTlEZDJsT2VsRnBUMnBGTWsxcGQybE9lbFZwVDJwRmQwNVRkMmxPZWxscFQycGpOVXhEU1ROT2VVazJUMFJqYzBscVl6UkphbTh5VDBOM2FVNTZhMmxQYWtVd1RWTjNhVTlFUVdsUGFsbDNURU5KTkUxVFNUWlBSR2R6U1dwbmVVbHFielJPUTNkcFQwUk5hVTlxV1RGTVEwazBUa05KTms1RVdYTkphbWN4U1dwdmVFMUVRWE5KYW1jeVNXcHZlVTFxWjNOSmFtY3pTV3B2TkU5RGQybFBSR2RwVDJwSmQwMXBkMmxQUkd0cFQycE5lVXhEU1RWTlEwazJUVlJqZVV4RFNUVk5VMGsyVFZSQk5VeERTVFZOYVVrMlRsUkJjMGxxYTNwSmFtOTVUVVJaYzBscWF6QkphbTk1VFZSUmMwbHFhekZKYW05NVRrUlJjMGxxYXpKSmFtOTRUVVJWYzBscWF6TkphbTh4VDFOM2FVOVVaMmxQYWtWNFRVTjNhVTlVYTJsUGFrVXlURU5KZUUxRVFXbFBha1UxVG5sM2FVMVVRWGhKYW05NVRVUk5jMGxxUlhkTmFVazJUbWwzYVUxVVFYcEphbTk0VFVOM2FVMVVRVEJKYW04d1RYbDNhVTFVUVRGSmFtOHpURU5KZUUxRVdXbFBhazB4VEVOSmVFMUVZMmxQYWtrd1QwTjNhVTFVUVRSSmFtOTRUa1JaYzBscVJYZFBVMGsyVFZSVmQweERTWGhOVkVGcFQycEZOVTE1ZDJsTlZFVjRTV3B2ZVU1RVVYTkpha1Y0VFdsSk5rMVVXVEpNUTBsNFRWUk5hVTlxUlhwUFUzZHBUVlJGTUVscWIzaFBSRWx6U1dwRmVFNVRTVFpPZW1kelNXcEZlRTVwU1RaTlZGVjRURU5KZUUxVVkybFBha1UwVEVOSmVFMVVaMmxQYWxGelNXcEZlRTlUU1RaT2FsRnpTV3BGZVUxRFNUWk9WRlZ6U1dwRmVVMVRTVFpOYWtVeFRFTkplRTFxU1dsUGFrVjRUVk4zYVUxVVNYcEphbTk0VDFScmMwbHFSWGxPUTBrMlQxUm5jMGxxUlhsT1UwazJUME4zYVUxVVNUSkphbTk2VEVOSmVFMXFZMmxQYWxGNVRFTkplRTFxWjJsUGFrVjNUMU4zYVUxVVNUVkphbTk0VDFSVmMwbHFSWHBOUTBrMlRucEJjMGxxUlhwTlUwazJUbXBCYzBscVJYcE5hVWsyVFZSTk5VeERTWGhOZWsxcFQycEZOVTVEZDJsTlZFMHdTV3B2ZUUxVVJYTkpha1Y2VGxOSk5rMVVXWHBNUTBsNFRYcFphVTlxUlRWTmFYZHBUVlJOTTBscWJ6Sk5hWGRwVFZSTk5FbHFiM2hPZVhkcFRWUk5OVWxxYjNsTlJFMXpTV3BGTUUxRFNUWk5WRVV6VEVOSmVFNUVSV2xQYWxFeFRFTkplRTVFU1dsUGFrVXdUV2wzYVUxVVVYcEphbTk0VDFOM2FVMVVVVEJKYW05NFRtcFpjMGxxUlRCT1UwazJUMVJCYzBscVJUQk9hVWsyVFZSamVFeERTWGhPUkdOcFQycHJOVXhEU1hoT1JHZHBUMnBGTTAxRGQybE5WRkUxU1dwdmVFNVVVWE5KYWtVeFRVTkpOazE2WTNOSmFrVXhUVk5KTmsxcVFUUk1RMGw0VGxSSmFVOXFSVEJPZVhkcFRWUlZla2xxYjNoTmVYZHBUVlJWTUVscWIzaFBWRmx6U1dwRk1VNVRTVFpPVkZselNXcEZNVTVwU1RaTlZHY3lURU5KZUU1VVkybFBha1UwVFVOM2FVMVVWVFJKYW05NFQxUlJjMGxxUlRGUFUwazJUV3BKZDB4RFNYaE9ha0ZwVDJwRmVVMXBkMmxOVkZsNFNXcHZNRTVwZDJsTlZGbDVTV3B2ZVUxcVNYTkpha1V5VFhsSk5rMVVZekpNUTBsNFRtcFJhVTlxWTNkTVEwbDRUbXBWYVU5cVZUVk1RMGw0VG1wWmFVOXFSWHBNUTBsNFRtcGphVTlxU1hsTmVYZHBUVlJaTkVscWJ6Vk5VM2RwVFZSWk5VbHFiM2hOUkdkelNXcEZNMDFEU1RaTlZHTXpURU5KZUU1NlJXbFBha2w0VGtOM2FVMVVZM2xKYW04elRXbDNhVTFVWTNwSmFtOTZUVU4zYVUxVVl6QkphbTk1VFdwSmMwbHFSVE5PVTBrMlRrUkpjMGxxUlROT2FVazJUV3BKTUV4RFNYaE9lbU5wVDJwSmQwMVRkMmxOVkdNMFNXcHZNVTFwZDJsTlZHTTFTV3B2ZVUxVVJYTkpha1UwVFVOSk5rMXFVVEpNUTBsNFQwUkZhVTlxUlRST1EzZHBUVlJuZVVscWIzbE5VM2RwVFZSbmVrbHFielZPYVhkcFRWUm5NRWxxYjNoT1JHdHpTV3BGTkU1VFNUWlBWR3R6U1dwRk5FNXBTVFpOVkVGNFRFTkplRTlFWTJsUGFrVXdUbmwzYVUxVVp6UkphbTk0VG5wTmMwbHFSVFJQVTBrMlRXcFJORXhEU1hoUFZFRnBUMnBGTWs1cGQybE5WR3Q0U1dwdmVrMVRkMmxOVkd0NVNXcHZlRTVxYTNOSmFrVTFUWGxKTms5VVRYTkpha1UxVGtOSk5rMXFSVEJNUTBsNFQxUlZhVTlxUlhsT1EzZHBUVlJyTWtscWIzbFBRM2RwVFZSck0wbHFiekpOVTNkcFRWUnJORWxxYnpGUFUzZHBUVlJyTlVscWIzcFBRM2RwVFdwQmQwbHFiM2hOUkVGelNXcEpkMDFUU1RaT1ZFVnpTV3BKZDAxcFNUWk9SR2R6U1dwSmQwMTVTVFpQVkd0elNXcEpkMDVEU1RaTlZHdDRURU5KZVUxRVZXbFBha1UxVG5sM2FVMXFRVEpKYW04eFQwTjNhVTFxUVROSmFtOTRUMFJCYzBscVNYZFBRMGsyVFZSVk1FeERTWGxOUkd0cFQycEZNazU1ZDJsTmFrVjNTV3B2ZUUxcVJYTkpha2w0VFZOSk5rMXFRVEZNUTBsNVRWUkphVTlxU1hwT2FYZHBUV3BGZWtscWIzbE5VM2RwVFdwRk1FbHFiM2hQUkdOelNXcEplRTVUU1RaTmFrMTZURU5KZVUxVVdXbFBha2t4VFhsM2FVMXFSVE5KYW04eVRtbDNhVTFxUlRSSmFtOHlUbWwzYVUxcVJUVkphbTk0VDBSSmMwbHFTWGxOUTBrMlRXcE5NVXhEU1hsTmFrVnBUMnBKZUUxcGQybE5ha2w1U1dwdmVrMXBkMmxOYWtsNlNXcHZlRTE2V1hOSmFrbDVUa05KTms1NlJYTkpha2w1VGxOSk5rMVVaek5NUTBsNVRXcFphVTlxU1hsUFEzZHBUV3BKTTBscWIzbE5lazF6U1dwSmVVOURTVFpPZWxGelNXcEplVTlUU1RaTlZFVTBURU5KZVUxNlFXbFBha1Y1VFVOM2FVMXFUWGhKYW04eVQxTjNhVTFxVFhsSmFtOTRUMVJCYzBscVNYcE5lVWsyVG5wTmMwbHFTWHBPUTBrMlRWUlJlRXhEU1hsTmVsVnBUMnBSZVV4RFNYbE5lbGxwVDJwck5FeERTWGxOZW1OcFQycE5OVXhEU1hsTmVtZHBUMnBGTVUxNWQybE5hazAxU1dwdk5VMXBkMmxOYWxGM1NXcHZNMDlEZDJsTmFsRjRTV3B2ZVU1cGQybE5hbEY1U1dwdmVVMVVhM05KYWtrd1RYbEpOazFVYXpSTVEwbDVUa1JSYVU5cVJUSlBRM2RwVFdwUk1VbHFiM2hPZW1OelNXcEpNRTVwU1RaT2FsVnpTV3BKTUU1NVNUWk5ha2w0VEVOSmVVNUVaMmxQYWtsM1RXbDNhVTFxVVRWSmFtOTRUbXBOYzBscVNURk5RMGsyVFZSSk5FeERTWGxPVkVWcFQycFJOVXhEU1hsT1ZFbHBUMnBGZUUxVGQybE5hbFY2U1dwdmVFMVVRWE5KYWtreFRrTkpOazFVVlhOSmFra3hUbE5KTms1cVozTkpha2t4VG1sSk5rMXFTWGhNUTBsNVRsUmphVTlxU1hsUFEzZHBUV3BWTkVscWIzcE9lWGRwVFdwVk5VbHFiM2xPZVhkcFRXcFpkMGxxYnpSTmFYZHBUV3BaZUVscWIzaFBWR2R6U1dwSk1rMXBTVFpPVTNkcFRXcFpla2xxYnpOTVEwbDVUbXBSYVU5cVNYaFBRM2RwVFdwWk1VbHFiM2hOYWsxelNXcEpNazVwU1RaTmFrazBURU5KZVU1cVkybFBha1V3VFVOM2FVMXFXVFJKYW04eVQwTjNhVTFxV1RWSmFtOTRUa1JGYzBscVNUTk5RMGsyVFZSamVFeERTWGxPZWtWcFQycG5NRXhEU1hsT2VrbHBUMnBGTlUxcGQybE5hbU42U1dwdmQweERTWGxPZWxGcFQycEplRXhEU1hsT2VsVnBUMnBaZUV4RFNYbE9lbGxwVDJwRmVVeERTWGxPZW1OcFQycEpORXhEU1hsT2VtZHBUMnBKYzBscVNUTlBVMGsyVFZSVmMwbHFTVFJOUTBrMlRWUlZNMHhEU1hsUFJFVnBUMnBWZVV4RFNYbFBSRWxwVDJwSmQwOURkMmxOYW1kNlNXcHZlRTE2YTNOSmFrazBUa05KTmsxcVozTkpha2swVGxOSk5rNXFRWE5KYWtrMFRtbEpOazVFUlhOSmFrazBUbmxKTmsxcVVYTkpha2swVDBOSk5rMXFTVE5NUTBsNVQwUnJhVTlxU1hOSmFrazFUVU5KTmsxNWQybE5hbXQ0U1dwdmVFeERTWGxQVkVscFQycEJjMGxxU1RWTmVVazJUVmd3UFNJc0ltbHpjeUk2SW1oMGRIQnpPaTh2WVdOamIzVnVkSE11WjI5dloyeGxMbU52YlNJc0ltbGhkQ0k2SWpFMU1UQTJNekk1T1RraUxDSmxlSEFpT2lJeE5URXdOak0yTlRrNUlpd2lZV3huSWpvaVVsTXlOVFlpTENKcmFXUWlPaUl6WTJVMFlUazNaRFV3TW1GbU1EVTRaV0kyTm1Gak9HUTNNekJoTlRreVlXSTNZMlZoTjJZeEluMTlcIixcbmV4cGlyZXM6XCIxNTEwNjM2NTk5XCJ9LFxuLy9rZXlQYWlyOnsgcHVibGljOiBuZXcgVWludDhBcnJheShbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMTUwLDksODgsMTYwLDI0OSwxNDAsMjM5LDEwMCwzNCwyNTEsMTQyLDE5OSwyMCwxMzcsMjAyLDE4LDE4MywxNTgsMjM3LDI1NCw2OCwyMzYsMTI1LDY5LDE0LDg4LDEyOCwxMjQsMjAwLDIwOSwxOTQsMTQ0LDIwMywxNSwyMDMsMjAwLDMyLDIxNCwyNTEsODEsMTg4LDE2MiwxMDUsNzksODcsNjgsMTQxLDYwLDg4LDg0LDY1LDQ2LDEwMCwyMjgsODgsMjAyLDMyLDE3MiwxMDksNTAsMjA2LDIxNCwyNDQsMTA1LDU5LDExMCwxNiwxOTcsMjAzLDYsMTAsNDMsNywzNSwyNDgsMTQ2LDE1MCwxOTMsMjQ0LDE2NiwxMzksMTgyLDc4LDE1MSwxOCw0LDY0LDU1LDIxNSwxMTEsMTk5LDk4LDgsMyw0MiwxMDksMTk1LDcwLDYwLDEzOSwxOTQsMTExLDE2MywxOTIsNjIsMTcsMjAzLDExNyw0NSwxNDIsMTksMTY2LDkwLDE3MSw5OSwxNzAsMTU0LDM3LDIwOCwxNDcsMTMsMTk2LDU2LDE4NiwxODAsMTk0LDIyMCwxMjIsNDYsMjIyLDE3Niw3MCw1OSwxMywyMjMsOTEsMTA4LDE3NywyMTQsNzIsMzAsMjIyLDQyLDIyNCwyMDEsNTIsMjExLDI0NiwxODQsMjEsOTYsMTQ5LDk5LDEwMSwxNDcsMTczLDI0OCwxNjYsMzEsMTY5LDkzLDIxNCwxMjQsMjgsNjEsNTksMzgsMTAwLDUxLDQ4LDk5LDE5MSwxOTcsNTgsMTgwLDE1NCwxNjcsMTIxLDIwNSwyMzYsMjEsMTg3LDIzMywyNTMsNjYsNjYsMTgyLDIzNSwyMTIsMzIsMTM2LDcxLDE4NywyMjgsMjMzLDc0LDExOCwxMjAsNjksMTkwLDczLDE0MSw0Miw5OCwzOSwxNTMsOTIsNzgsMjYsMjE5LDE5OCwxNjgsMTc3LDY1LDIyMSwyMDIsMTYzLDEyOCw0OSwxMTEsMTEwLDE1LDY4LDIyMSwyMjgsMzcsMjcsODIsMTk4LDUsNywyMTgsMTIzLDIyOCwxNDAsNjgsMTQxLDE3MSw4NCwxOTIsMCwyMSw2MSwxMiwyOCwyLDE1LDE1Nyw1MiwyMDgsMTM5LDI4LDYwLDQxLDI0LDIyNywyLDMsMSwwLDFdKSxcbi8vcHJpdmF0ZTogeyBuZXcgVWludDhBcnJheShbNDgsMTMwLDQsMTg4LDIsMSwwLDQ4LDEzLDYsOSw0MiwxMzQsNzIsMTM0LDI0NywxMywxLDEsMSw1LDAsNCwxMzAsNCwxNjYsNDgsMTMwLDQsMTYyLDIsMSwwLDIsMTMwLDEsMSwwLDE1MCw5LDg4LDE2MCwyNDksMTQwLDIzOSwxMDAsMzQsMjUxLDE0MiwxOTksMjAsMTM3LDIwMiwxOCwxODMsMTU4LDIzNywyNTQsNjgsMjM2LDEyNSw2OSwxNCw4OCwxMjgsMTI0LDIwMCwyMDksMTk0LDE0NCwyMDMsMTUsMjAzLDIwMCwzMiwyMTQsMjUxLDgxLDE4OCwxNjIsMTA1LDc5LDg3LDY4LDE0MSw2MCw4OCw4NCw2NSw0NiwxMDAsMjI4LDg4LDIwMiwzMiwxNzIsMTA5LDUwLDIwNiwyMTQsMjQ0LDEwNSw1OSwxMTAsMTYsMTk3LDIwMyw2LDEwLDQzLDcsMzUsMjQ4LDE0NiwxNTAsMTkzLDI0NCwxNjYsMTM5LDE4Miw3OCwxNTEsMTgsNCw2NCw1NSwyMTUsMTExLDE5OSw5OCw4LDMsNDIsMTA5LDE5NSw3MCw2MCwxMzksMTk0LDExMSwxNjMsMTkyLDYyLDE3LDIwMywxMTcsNDUsMTQyLDE5LDE2Niw5MCwxNzEsOTksMTcwLDE1NCwzNywyMDgsMTQ3LDEzLDE5Niw1NiwxODYsMTgwLDE5NCwyMjAsMTIyLDQ2LDIyMiwxNzYsNzAsNTksMTMsMjIzLDkxLDEwOCwxNzcsMjE0LDcyLDMwLDIyMiw0MiwyMjQsMjAxLDUyLDIxMSwyNDYsMTg0LDIxLDk2LDE0OSw5OSwxMDEsMTQ3LDE3MywyNDgsMTY2LDMxLDE2OSw5MywyMTQsMTI0LDI4LDYxLDU5LDM4LDEwMCw1MSw0OCw5OSwxOTEsMTk3LDU4LDE4MCwxNTQsMTY3LDEyMSwyMDUsMjM2LDIxLDE4NywyMzMsMjUzLDY2LDY2LDE4MiwyMzUsMjEyLDMyLDEzNiw3MSwxODcsMjI4LDIzMyw3NCwxMTgsMTIwLDY5LDE5MCw3MywxNDEsNDIsOTgsMzksMTUzLDkyLDc4LDI2LDIxOSwxOTgsMTY4LDE3Nyw2NSwyMjEsMjAyLDE2MywxMjgsNDksMTExLDExMCwxNSw2OCwyMjEsMjI4LDM3LDI3LDgyLDE5OCw1LDcsMjE4LDEyMywyMjgsMTQwLDY4LDE0MSwxNzEsODQsMTkyLDAsMjEsNjEsMTIsMjgsMiwxNSwxNTcsNTIsMjA4LDEzOSwyOCw2MCw0MSwyNCwyMjcsMiwzLDEsMCwxLDIsMTMwLDEsMCwxLDE3LDIsMjQwLDE5NSw4MCwwLDc4LDI0MSwxMDQsMTIsMiwxNTEsMjM0LDcxLDEyMyw2Niw2MiwxMzcsMzAsMjIxLDEwMSwxNDEsMTUzLDE4NiwxNDIsMjI0LDM4LDIzNywxNDgsMTI2LDE5OSw5NywxNzgsMzEsNTQsMjE5LDIwMCwyMzAsMTksMTA2LDIxMSwwLDEwLDI0Niw0MiwwLDE5MCw4NCwyMjksMTg3LDIxLDEzOSw0MywxODIsODcsMjE4LDIwMyw2OCw3NiwyNiwxNjcsMjQwLDIxMCwxMjAsMTcwLDQzLDIwMCwxNzQsMjA0LDE0OSwxNzYsMjM0LDI0MCw2Miw0LDYyLDE1LDIxLDIyMywyMzcsMjE3LDc2LDE4NCwxODEsNDQsMjMyLDIyOCwxNTYsMTg0LDYyLDQ2LDE3LDksMTMxLDk5LDIyMCwxLDI0OSw3NiwxMzYsODksMTEzLDMzLDkyLDIxOCw2MywyMjAsMTIxLDEzNSwxNTAsNDMsNDMsOTUsMTI0LDQyLDEwLDExMiwyMDIsOSw2MiwyMjYsMTYzLDg2LDE1MSwxOCwwLDQ1LDEzMiw3LDIxNSwxODEsMTQzLDYwLDIwMywxMjEsNzcsNzgsMjQ5LDEzMywxNiwxNzMsMTIxLDExNywxNDEsMTg4LDI0LDc1LDIzMiwxNzgsODcsOTUsMTE1LDE0NiwxNzAsMTAzLDIxOSwyMDQsMTIxLDIxLDI0NiwyMjEsMTg0LDksODQsMjUzLDkxLDMyLDIxMyw2NSwxNjMsMTY1LDIyLDM5LDYzLDM2LDg1LDE2OCwxOTYsNzUsODcsNDUsMjAwLDExMyw1NSwyNiwyMjEsMTk0LDE2MiwxNjYsNDgsMjI5LDEwMiwyMTgsMjEwLDg2LDk3LDE1Niw4NSwxMjIsNzMsMTI2LDUxLDk4LDgsMjQ3LDQxLDE5MSwxNTMsMTYyLDIwOCwxODMsMTE0LDk1LDEzMywzNCw3LDkyLDEzNSw0MSw5NywxNzIsNjgsNTksMjMsMjA2LDI3LDgwLDEyMCw5LDMzLDAsMjMyLDIzNyw1NywyMDcsMjA2LDIzOCwxMjAsMTgsNDAsMjQzLDE1OSwxMzksOTksMTA2LDY5LDIwNiwyNDUsMTUzLDE4MCwxODYsOTIsMjMyLDI1MCwxNDksMiwxMjksMTI5LDAsMjA2LDE4NywyMSw4MiwxOTUsMjIwLDEwNSwxOTAsNjIsNDMsMTM5LDE0MCwxMDcsNzcsNzYsODAsMTc3LDMwLDE2LDIwLDE4NiwyNTQsMjQyLDgxLDI1NSwyMDQsMTksNzgsMTgsMTMxLDIzMCw2Miw0NSwxMzksOTEsMTM4LDE3MywxODYsODgsODIsMjI4LDI5LDU0LDE1LDExMSwxMzQsMTAsMjE4LDIzOCwxMjMsMTkwLDIzLDI4LDE1OCwyNDgsNywxNzEsMTUsMjA5LDg1LDM5LDIzNywxMDQsNTcsMjMzLDE4OSwxNjgsMjM2LDYzLDIxNywyMzEsMzIsMTExLDIzNCwyMTYsMjcsMjE3LDE2MiwxMzcsNDEsNDMsMTI0LDE2NywxNTIsMSwxNjYsMjM4LDIzOCwxNTAsMjMzLDI0NSwxNTAsNzcsMTQ4LDIyNCwxNDQsMjA1LDQ2LDYzLDEwMCwyNDAsMjE1LDIxNSwxMzIsMTk0LDE1MSw4NSwyMiwxODMsMTQ2LDE4Niw1LDI0LDE1NSwxNTksNDEsMTk1LDkzLDYsOTAsNTcsMTQyLDE4MywxMDMsMTI1LDU5LDEyMSwxNzMsMiwxMjksMTI5LDAsMTg1LDIwMyw2OSw0NiwyMTYsMTg2LDQ2LDE0NywxNzUsMzgsMTcyLDQyLDgzLDIzNiw1LDI3LDE0NiwyMzYsMTM0LDM3LDE5Nyw2NywyMiwyMzIsMjUsMjUyLDE1NywxNzEsMTgzLDEwOCw1MSwyMjEsMTgwLDEzOSwyOCwxNzcsMTU0LDEyMywxMzIsMjQ2LDI1NCwxMDEsMTkzLDIxOCw1NCw1MCwxODIsMjUyLDQ4LDIzNiwzNCwxNjQsMTksMjI1LDE4MSwyMDAsMTk4LDE3NiwxODYsMjAsMjE2LDY2LDEwMSwxMTAsOSwxODMsMjQzLDI0NSwyMTEsMTcyLDM4LDE5Nyw2NCw1Nyw4NSw4OSwyMDYsNDUsNSwxMTksMTMzLDIzMSwxMDIsOTIsMjM4LDIxMCwxMTEsNjIsMTc4LDEwOSwyMTIsNTUsNDgsMjQ5LDE0NywyMywzMSw3MSwyNDEsMTc1LDE4NSw5NCwyMDcsMTA0LDE4NCwxOTYsMjI3LDIwLDM3LDI1NCwxOTgsNDIsOTIsMSwyNTUsMjI1LDE2MiwxOTAsMjM2LDIzNiwxMjIsMjgsMjM1LDYsNDcsMjE5LDc4LDIwNywyLDEyOSwxMjgsMSwxMzYsMTE3LDE2Miw1LDEyNSwyMDYsMjQyLDI0MCw1NSwyMiwxMTUsMjE0LDMxLDIyMiwxNTksMiwxNDUsNjAsMTI5LDc0LDIxNywxODEsMzgsODIsMTMzLDc0LDIzMSw5MSw3OSwyMDMsMjMsNzgsMjQzLDM5LDE1NiwxNjEsMTY5LDQ2LDI2LDEyNyw2NiwxNDQsNTAsMTcsMjcsMTY3LDkyLDI0NCw2NywyMDIsMTY3LDIxLDU3LDY0LDE0NSwxNTcsMjUzLDM0LDEwLDY5LDE1OSwxMzUsMjAsODYsMjIxLDEwMyw0OSw3Myw3OSwyMzgsOTIsMjE3LDU1LDE1OCwxNTgsMTY2LDY0LDEzMiw3OSwyMjMsMjE2LDE3NCwyMDUsMTIzLDE5NywxNjcsMzUsMjQxLDIwNiwxNDIsODksMTcyLDI1MywxNTUsMTY0LDE4Myw2NCwyMDYsMTM5LDEzOSwyMSwxNzQsMTczLDExOSw5MSwyNDMsMjM5LDE0OSw0OCwyMzUsOTIsNTgsODAsMTI1LDMxLDE3Miw0MSw1NCwxMTIsMjE2LDIxNiwxMDgsMjMsMTk0LDk1LDI1MiwxMzcsMiwxMjksMTI4LDEyMywxMzgsMTUyLDExNiw0OCwyMCwxNDEsOCwxOCwxODksNzQsODksMjEwLDI0NywyMzUsMjI5LDEzOSwyMzQsMjA2LDE5MiwxNzAsMjA0LDE0NywxNTYsMTkwLDU4LDIyOSwxODAsMjE5LDAsMTQxLDI0NCwxMDgsNDIsMjIwLDEwMywxNDgsMTA3LDExMywyMjAsMTc5LDgsMTMwLDE5Miw4MCwxNzMsMTY0LDgzLDczLDc2LDE1NSw1Miw1MSw0NCw0OCwxNzQsODIsMTkyLDEyLDIxOSwyNDMsMTIxLDM0LDIzNiwyMzQsMTE3LDExMyw1NywxOSw5LDUxLDE4MiwxNDUsMTYwLDE0LDEwLDIzNSw1NSwxNzYsMTU2LDIzNSw5OSwyMSwzLDIxMCwxNjIsNiwyMzQsMjA3LDE5OCwxNDAsOCw0NiwyNTQsMTY1LDU4LDgsMjAwLDIxMiwyLDE1OCwyMzAsODYsODAsNTAsMjgsMTA1LDc0LDEwNiwxMjksOTYsMjA3LDE2NSwyMjYsMTM0LDEyNSw3MiwxODAsOTUsMjI2LDg2LDIwMCwxMzUsMjE0LDIxMSw4NywxNjYsMTczLDIsMTI5LDEyOCw4OSw2NywyMDgsMTU1LDIzNCwzNiwxMTIsMTU0LDEyMCw2NCw1MSwwLDYzLDc0LDI3LDc3LDM1LDE5Nyw0NCw5NywxMzYsMjE2LDE0NCw0Myw4LDIwNCw2MywyMDYsNTUsMTk1LDk4LDQzLDIwMCwyNDksMjU1LDE2NSwyNDIsMjQyLDg4LDI0OCw1NiwyMTYsMjQ2LDEyNiwyNDgsOTksOSwyMjQsMTU5LDE0MSwxMTEsMTc2LDE4LDExOCwyMjQsMTI1LDEzNiwxNDMsMjUyLDEyNiwyNTQsNDksMTM2LDg2LDE2NSwyMzQsMTU0LDE0NCwyMzgsMTYyLDg2LDE5MywxOTQsNzAsMjI3LDU4LDMsMTEsNjQsMjM1LDE3OSwxNTksMjI5LDI2LDI0Nyw4LDYyLDEwNyw2NiwxNjgsMTc3LDcxLDYxLDE1NSw2MSwyNDUsMzcsMzMsOSwxNDYsMjE3LDIxNiwxNjgsOTksMTA2LDQzLDI0NiwxMjQsMjA4LDQxLDEyNyw0NiwxODgsMjUyLDEzOSwyNDAsMTA1LDU5LDEwOCwxOCwyMzIsMTAsNzMsMTQ3LDU3LDQ4LDEzLDIxMF0pO1xuLy99XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9nb29nbGUvTm9kZWpzUHJveHlTdHViLmlkcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = require(\"https\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwc1wiPzEwZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImh0dHBzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiaHR0cHNcIlxuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("(function () {\n  \"use strict\";\n\n  function btoa(str) {\n    var buffer\n      ;\n\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = new Buffer(str.toString(), 'binary');\n    }\n\n    return buffer.toString('base64');\n  }\n\n  module.exports = btoa;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9ub2RlX21vZHVsZXMvYnRvYS9pbmRleC5qcz9mZWMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgZnVuY3Rpb24gYnRvYShzdHIpIHtcbiAgICB2YXIgYnVmZmVyXG4gICAgICA7XG5cbiAgICBpZiAoc3RyIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICBidWZmZXIgPSBzdHI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoc3RyLnRvU3RyaW5nKCksICdiaW5hcnknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuXG4gIG1vZHVsZS5leHBvcnRzID0gYnRvYTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL25vZGVfbW9kdWxlcy9idG9hL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction atob(str) {\n  return new Buffer(str, 'base64').toString('binary');\n}\n\nmodule.exports = atob.atob = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9ub2RlX21vZHVsZXMvYXRvYi9ub2RlLWF0b2IuanM/M2JiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBhdG9iKHN0cikge1xuICByZXR1cm4gbmV3IEJ1ZmZlcihzdHIsICdiYXNlNjQnKS50b1N0cmluZygnYmluYXJ5Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXRvYi5hdG9iID0gYXRvYjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9nb29nbGUvbm9kZV9tb2R1bGVzL2F0b2Ivbm9kZS1hdG9iLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ]);
});",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "52c91699f84b479f34e9f7abce2255fff",
    "constraints": {
      "node": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsForBrowserProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\n//const https = require('https');\n//let btoa = require('btoa');\n//let atob = require('atob');\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJSFAKEBrowser:assertion', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n\n      // atob may need to be required for nodejs\n      // var atob = require('atob');\n\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      var idTokenSplited = content.tokenID.split('.');\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertionFAKE:contents]', contents);\n    console.log('[IDPROXY.generateAssertionFAKE:origin]', origin);\n    console.log('[IDPROXY.generateAssertionFAKE:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      console.log('generateMessageResponse:');\n      return resolve(generateMessageResponse);\n    });\n  }\n\n  /**\n  * Identity Provider Proxy Protocol Stub\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('FAKE NODEJS constructor');\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://nodejs-idp') {\n        _this.requestToIdp(msg);\n      }\n    });\n\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n      * This function receives a message and a value. It replies the value to the sender of the message received\n      *\n      * @param  {message}   message received\n      * @param  {value}     value to include in the new message to send\n      */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[NodeJS.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvRmFrZU5vZGVqc0ZvckJyb3dzZXJQcm94eVN0dWIuaWRwLmpzPzZhYmYiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJpZGVudGl0aWVzIiwibklkZW50aXR5IiwiZ29vZ2xlSW5mbyIsImNsaWVudFNlY3JldCIsImNsaWVudElEIiwicmVkaXJlY3RVUkkiLCJpc3N1ZXIiLCJ0b2tlbkVuZHBvaW50Iiwiandrc1VyaSIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsInVzZXJpbmZvIiwidG9rZW5JbmZvIiwiYWNjZXNzVHlwZSIsInR5cGUiLCJzY29wZSIsInN0YXRlIiwiaWRwIiwidmFsaWRhdGVBc3NlcnRpb24iLCJhc3NlcnRpb24iLCJvcmlnaW4iLCJjb25zb2xlIiwibG9nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkZWNvZGVkQ29udGVudCIsImF0b2IiLCJjb250ZW50IiwiSlNPTiIsInBhcnNlIiwiaWRUb2tlblNwbGl0ZWQiLCJ0b2tlbklEIiwic3BsaXQiLCJpZFRva2VuIiwiaWRlbnRpdHkiLCJlbWFpbCIsImNvbnRlbnRzIiwibm9uY2UiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImhpbnQiLCJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSIsIk5vZGVqc1Byb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJfdGhpcyIsIm1lc3NhZ2VCdXMiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJwYXJhbXMiLCJib2R5IiwibWV0aG9kIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInZhbHVlIiwicmVwbHlNZXNzYWdlIiwiZXJyb3IiLCJtZXNzYWdlIiwiaWQiLCJmcm9tIiwiY29kZSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyIsInVybCIsIm5h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QSxVQUFJVCxNQUFNO0FBQ1JuQyxjQUFNLFFBREU7QUFFUmlELGNBQU1qQixNQUFNSCxtQkFGSjtBQUdSTyxZQUFJSixNQUFNSCxtQkFBTixHQUE0QixTQUh4QjtBQUlSVyxjQUFNO0FBQ0pJLGlCQUFPQTtBQURIO0FBSkUsT0FBVjs7QUFTQSxVQUFJUSxNQUFKLEVBQVk7QUFDVmpCLFlBQUlLLElBQUosQ0FBU2MsSUFBVCxHQUFnQkYsTUFBaEI7QUFDRDs7QUFFRHBCLFlBQU1DLFVBQU4sQ0FBaUJrQixXQUFqQixDQUE2QmhCLEdBQTdCO0FBQ0Q7Ozs7OztBQUdIOzs7Ozs7Ozs7QUFPZSxTQUFTakQsUUFBVCxDQUFrQnFFLEdBQWxCLEVBQXVCekIsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTHlCLFVBQU0saUJBREQ7QUFFTEMsY0FBVSxJQUFJN0IsZUFBSixDQUFvQjJCLEdBQXBCLEVBQXlCekIsR0FBekIsRUFBOEJDLE1BQTlCO0FBRkwsR0FBUDtBQUlEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaWRlbnRpdGllcyA9IHt9O1xubGV0IG5JZGVudGl0eSA9IDA7XG4vL2ltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbi8vbGV0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XG4vL2NvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbi8vbGV0IGJ0b2EgPSByZXF1aXJlKCdidG9hJyk7XG4vL2xldCBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xuXG5sZXQgZ29vZ2xlSW5mbyA9IHtcbiAgY2xpZW50U2VjcmV0OiAgICAgICAgICAnWHg0ckt1Y2I1WllUYVhsY1pYOUhMZlpXJyxcbiAgY2xpZW50SUQ6ICAgICAgICAgICAgICAnODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICAnaHR0cHM6Ly9sb2NhbGhvc3QnLFxuICBpc3N1ZXI6ICAgICAgICAgICAgICAgICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20nLFxuICB0b2tlbkVuZHBvaW50OiAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjQvdG9rZW4/JyxcbiAgandrc1VyaTogICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzPycsXG4gIGF1dGhvcmlzYXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoPycsXG4gIHVzZXJpbmZvOiAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My91c2VyaW5mbz9hY2Nlc3NfdG9rZW49JyxcbiAgdG9rZW5JbmZvOiAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0nLFxuICBhY2Nlc3NUeXBlOiAgICAgICAgICAgICdvZmZsaW5lJyxcbiAgdHlwZTogICAgICAgICAgICAgICAgICAnY29kZScsXG4gIHNjb3BlOiAgICAgICAgICAgICAgICAgJ29wZW5pZCUyMGVtYWlsJTIwcHJvZmlsZScsXG4gIHN0YXRlOiAgICAgICAgICAgICAgICAgJ3N0YXRlJ1xufTtcblxuXG5sZXQgaWRwID0ge1xuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSB0aGUgaW1wbGVtZW50YXRpb25cbiAgKlxuICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gICAgICAgT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdFxuICAqL1xuICB2YWxpZGF0ZUFzc2VydGlvbjogKGFzc2VydGlvbiwgb3JpZ2luKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHlOT0RFSlNGQUtFQnJvd3Nlcjphc3NlcnRpb24nLCBhc3NlcnRpb24pO1xuXG4gICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZFxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICAvLyBhdG9iIG1heSBuZWVkIHRvIGJlIHJlcXVpcmVkIGZvciBub2RlanNcbiAgICAgIC8vIHZhciBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xuXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XG4gICAgICBsZXQgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQpO1xuICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gY29udGVudC50b2tlbklELnNwbGl0KCcuJyk7XG4gICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xuXG4gICAgICByZXNvbHZlKHtpZGVudGl0eTogaWRUb2tlbi5lbWFpbCwgY29udGVudHM6IGlkVG9rZW4ubm9uY2V9KTtcblxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7Y29udGVudHN9IFRoZSBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXG4gICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyXG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cbiAgKi9cbiAgZ2VuZXJhdGVBc3NlcnRpb246IChjb250ZW50cywgb3JpZ2luLCBoaW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRTpjb250ZW50c10nLCBjb250ZW50cyk7XG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRTpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb25GQUtFOmhpbnRdJywgaGludCk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZTonKTtcbiAgICAgIHJldHVybiByZXNvbHZlKGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlKTtcblxuICAgIH0pO1xuXG4gIH1cblxufVxuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxuKi9cbmNsYXNzIE5vZGVqc1Byb3h5U3R1YiB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgIGNvbnNvbGUubG9nKCdGQUtFIE5PREVKUyBjb25zdHJ1Y3RvcicpO1xuICAgbGV0IF90aGlzID0gdGhpcztcbiAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1cztcbiAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xuXG4gICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcbiAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9ub2RlanMtaWRwJykge1xuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcbiAgICAgfVxuICAgfSk7XG5cbiAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cbiAgKlxuICAqIEBwYXJhbSB7bWVzc2FnZX0gIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2VCdXNcbiAgKi9cbiAgcmVxdWVzdFRvSWRwKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcblxuICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XG4gICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XG4gICAgICAgIGlkcC5nZW5lcmF0ZUFzc2VydGlvbihwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgaWRwLnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4vKipcbiAgKiBUaGlzIGZ1bmN0aW9uIHJlY2VpdmVzIGEgbWVzc2FnZSBhbmQgYSB2YWx1ZS4gSXQgcmVwbGllcyB0aGUgdmFsdWUgdG8gdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSByZWNlaXZlZFxuICAqXG4gICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXG4gICogQHBhcmFtICB7dmFsdWV9ICAgICB2YWx1ZSB0byBpbmNsdWRlIGluIHRoZSBuZXcgbWVzc2FnZSB0byBzZW5kXG4gICovXG4gIHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBtZXNzYWdlID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgICAgICAgICAgICAgIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZX19O1xuXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgfVxuXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgY29uc29sZS5sb2coJ1tOb2RlSlMuc2VuZFN0YXR1c10gJywgdmFsdWUpO1xuXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICBsZXQgbXNnID0ge1xuICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVhc29uKSB7XG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuICAgIH1cblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgfVxufVxuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdOb2RlanNQcm94eVN0dWInLFxuICAgIGluc3RhbmNlOiBuZXcgTm9kZWpzUHJveHlTdHViKHVybCwgYnVzLCBjb25maWcpXG4gIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvRmFrZU5vZGVqc0ZvckJyb3dzZXJQcm94eVN0dWIuaWRwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy for browser idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5d2606fd332d71526cafc4c13d80437b4",
    "constraints": {
      "browser": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\n//const https = require('https');\nvar btoa = __webpack_require__(1);\nvar atob = __webpack_require__(2);\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJSFAKE:assertion', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      var idTokenSplited = content.tokenID.split('.');\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertionFAKE:contents]', contents);\n    console.log('[IDPROXY.generateAssertionFAKE:origin]', origin);\n    console.log('[IDPROXY.generateAssertionFAKE:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      console.log('generateMessageResponse:');\n      return resolve(generateMessageResponse);\n    });\n  }\n\n  /**\n  * Identity Provider Proxy Protocol Stub\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('FAKE NODEJS constructor');\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://nodejs-idp') {\n        _this.requestToIdp(msg);\n      }\n    });\n\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[NodeJS.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}\n\nvar generateMessageResponse = { assertion: \"eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqTmpaVFJoT1Rka05UQXlZV1l3TlRobFlqWTJZV000WkRjek1HRTFPVEpoWWpkalpXRTNaakVpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWpJeVJuSTVhWFpvTldKNWVHVXRhMWRPT0dsdmExRWlMQ0p1YjI1alpTSTZJbVY1U1hkSmFtOHdUME4zYVUxVFNUWk5WRTEzVEVOSmVVbHFiM2hNUTBsNlNXcHZlazVEZDJsT1EwazJUa1JuYzBscVZXbFBha1Y2VEVOSk1rbHFiekpNUTBrelNXcHZOVXhEU1RSSmFtOHdUV2wzYVU5VFNUWk5WRTB3VEVOSmVFMURTVFpPZWtselNXcEZlRWxxYjNoTmVsRnpTV3BGZVVscWIzbE9SR056U1dwRmVrbHFiM2hOZVhkcFRWUlJhVTlxUlhOSmFrVXhTV3B2ZUV4RFNYaE9hVWsyVFZOM2FVMVVZMmxQYWxWelNXcEZORWxxYjNkTVEwbDRUMU5KTmsxNWQybE5ha0ZwVDJwRmVrMURkMmxOYWtWcFQycEZjMGxxU1hsSmFtOTRUbE4zYVUxcVRXbFBha0Z6U1dwSk1FbHFiekJQUTNkcFRXcFZhVTlxUlhwTlEzZHBUV3BaYVU5cVJYTkpha2t6U1dwdmVFMURkMmxOYW1kcFQycEpjMGxxU1RWSmFtOTRUWHBCYzBscVRYZEphbTk0VEVOSmVrMVRTVFpOVTNkcFRYcEphVTlxUVhOSmFrMTZTV3B2ZUU1VVFYTkphazB3U1dwdk5VeERTWHBPVTBrMlQwUm5jMGxxVFRKSmFtOTRUbXBCYzBscVRUTkphbTk1VGtScmMwbHFUVFJKYW05NFRrUkJjMGxxVFRWSmFtOTVUWHByYzBscVVYZEphbTk0VFVSQmMwbHFVWGhKYW05NlRrTjNhVTVFU1dsUGFra3hUVk4zYVU1RVRXbFBha1V3VFdsM2FVNUVVV2xQYWtVMVQxTjNhVTVFVldsUGFrbDNURU5KTUU1cFNUWk5WRTB6VEVOSk1FNTVTVFpOYWtGNVRFTkpNRTlEU1RaTlZHZHpTV3BSTlVscWIzaFBSRTF6U1dwVmQwbHFiM2hPVkdkelNXcFZlRWxxYjNsTmVtTnpTV3BWZVVscWIzbE9WRkZ6U1dwVmVrbHFiekpQUTNkcFRsUlJhVTlxU1hwT2FYZHBUbFJWYVU5cVJYbE9VM2RwVGxSWmFVOXFXVFZNUTBreFRubEpOazFVVVhOSmFsVTBTV3B2TkU5RGQybE9WR3RwVDJwRmVVOURkMmxPYWtGcFQycEZlVTVEZDJsT2FrVnBUMnBKZDAxRGQybE9ha2xwVDJwSmQwOVRkMmxPYWsxcFQycEZOVTVEZDJsT2FsRnBUMnBGTUU1RGQybE9hbFZwVDJwSmQwMTVkMmxPYWxscFQycEZNVXhEU1RKT2VVazJUV3BCZWt4RFNUSlBRMGsyVFdwQmQweERTVEpQVTBrMlRYcEpjMGxxWTNkSmFtOTVUVlJSYzBscVkzaEphbTk1VGxSRmMwbHFZM2xKYW04MFRWTjNhVTU2VFdsUGFrVTBUME4zYVU1NlVXbFBha1V5VFdsM2FVNTZWV2xQYWtWM1RsTjNhVTU2V1dsUGFtTTFURU5KTTA1NVNUWlBSR056U1dwak5FbHFiekpQUTNkcFRucHJhVTlxUlRCTlUzZHBUMFJCYVU5cVdYZE1RMGswVFZOSk5rOUVaM05KYW1kNVNXcHZORTVEZDJsUFJFMXBUMnBaTVV4RFNUUk9RMGsyVGtSWmMwbHFaekZKYW05NFRVUkJjMGxxWnpKSmFtOTVUV3BuYzBscVp6TkphbTgwVDBOM2FVOUVaMmxQYWtsM1RXbDNhVTlFYTJsUGFrMTVURU5KTlUxRFNUWk5WR041VEVOSk5VMVRTVFpOVkVFMVRFTkpOVTFwU1RaT1ZFRnpTV3ByZWtscWIzbE5SRmx6U1dwck1FbHFiM2xOVkZGelNXcHJNVWxxYjNsT1JGRnpTV3ByTWtscWIzaE5SRlZ6U1dwck0wbHFiekZQVTNkcFQxUm5hVTlxUlhoTlEzZHBUMVJyYVU5cVJUSk1RMGw0VFVSQmFVOXFSVFZPZVhkcFRWUkJlRWxxYjNsTlJFMXpTV3BGZDAxcFNUWk9hWGRwVFZSQmVrbHFiM2hOUTNkcFRWUkJNRWxxYnpCTmVYZHBUVlJCTVVscWJ6Tk1RMGw0VFVSWmFVOXFUVEZNUTBsNFRVUmphVTlxU1RCUFEzZHBUVlJCTkVscWIzaE9SRmx6U1dwRmQwOVRTVFpOVkZWM1RFTkplRTFVUVdsUGFrVTFUWGwzYVUxVVJYaEphbTk1VGtSUmMwbHFSWGhOYVVrMlRWUlpNa3hEU1hoTlZFMXBUMnBGZWs5VGQybE5WRVV3U1dwdmVFOUVTWE5KYWtWNFRsTkpOazU2WjNOSmFrVjRUbWxKTmsxVVZYaE1RMGw0VFZSamFVOXFSVFJNUTBsNFRWUm5hVTlxVVhOSmFrVjRUMU5KTms1cVVYTkpha1Y1VFVOSk5rNVVWWE5KYWtWNVRWTkpOazFxUlRGTVEwbDRUV3BKYVU5cVJYaE5VM2RwVFZSSmVrbHFiM2hQVkd0elNXcEZlVTVEU1RaUFZHZHpTV3BGZVU1VFNUWlBRM2RwVFZSSk1rbHFiM3BNUTBsNFRXcGphVTlxVVhsTVEwbDRUV3BuYVU5cVJYZFBVM2RwVFZSSk5VbHFiM2hQVkZWelNXcEZlazFEU1RaT2VrRnpTV3BGZWsxVFNUWk9ha0Z6U1dwRmVrMXBTVFpOVkUwMVRFTkplRTE2VFdsUGFrVTFUa04zYVUxVVRUQkphbTk0VFZSRmMwbHFSWHBPVTBrMlRWUlpla3hEU1hoTmVsbHBUMnBGTlUxcGQybE5WRTB6U1dwdk1rMXBkMmxOVkUwMFNXcHZlRTU1ZDJsTlZFMDFTV3B2ZVUxRVRYTkpha1V3VFVOSk5rMVVSVE5NUTBsNFRrUkZhVTlxVVRGTVEwbDRUa1JKYVU5cVJUQk5hWGRwVFZSUmVrbHFiM2hQVTNkcFRWUlJNRWxxYjNoT2FsbHpTV3BGTUU1VFNUWlBWRUZ6U1dwRk1FNXBTVFpOVkdONFRFTkplRTVFWTJsUGFtczFURU5KZUU1RVoybFBha1V6VFVOM2FVMVVVVFZKYW05NFRsUlJjMGxxUlRGTlEwazJUWHBqYzBscVJURk5VMGsyVFdwQk5FeERTWGhPVkVscFQycEZNRTU1ZDJsTlZGVjZTV3B2ZUUxNWQybE5WRlV3U1dwdmVFOVVXWE5KYWtVeFRsTkpOazVVV1hOSmFrVXhUbWxKTmsxVVp6Sk1RMGw0VGxSamFVOXFSVFJOUTNkcFRWUlZORWxxYjNoUFZGRnpTV3BGTVU5VFNUWk5ha2wzVEVOSmVFNXFRV2xQYWtWNVRXbDNhVTFVV1hoSmFtOHdUbWwzYVUxVVdYbEphbTk1VFdwSmMwbHFSVEpOZVVrMlRWUmpNa3hEU1hoT2FsRnBUMnBqZDB4RFNYaE9hbFZwVDJwVk5VeERTWGhPYWxscFQycEZla3hEU1hoT2FtTnBUMnBKZVUxNWQybE5WRmswU1dwdk5VMVRkMmxOVkZrMVNXcHZlRTFFWjNOSmFrVXpUVU5KTmsxVVl6Tk1RMGw0VG5wRmFVOXFTWGhPUTNkcFRWUmplVWxxYnpOTmFYZHBUVlJqZWtscWIzcE5RM2RwVFZSak1FbHFiM2xOYWtselNXcEZNMDVUU1RaT1JFbHpTV3BGTTA1cFNUWk5ha2t3VEVOSmVFNTZZMmxQYWtsM1RWTjNhVTFVWXpSSmFtOHhUV2wzYVUxVVl6VkphbTk1VFZSRmMwbHFSVFJOUTBrMlRXcFJNa3hEU1hoUFJFVnBUMnBGTkU1RGQybE5WR2Q1U1dwdmVVMVRkMmxOVkdkNlNXcHZOVTVwZDJsTlZHY3dTV3B2ZUU1RWEzTkpha1UwVGxOSk5rOVVhM05KYWtVMFRtbEpOazFVUVhoTVEwbDRUMFJqYVU5cVJUQk9lWGRwVFZSbk5FbHFiM2hPZWsxelNXcEZORTlUU1RaTmFsRTBURU5KZUU5VVFXbFBha1V5VG1sM2FVMVVhM2hKYW05NlRWTjNhVTFVYTNsSmFtOTRUbXByYzBscVJUVk5lVWsyVDFSTmMwbHFSVFZPUTBrMlRXcEZNRXhEU1hoUFZGVnBUMnBGZVU1RGQybE5WR3N5U1dwdmVVOURkMmxOVkdzelNXcHZNazFUZDJsTlZHczBTV3B2TVU5VGQybE5WR3MxU1dwdmVrOURkMmxOYWtGM1NXcHZlRTFFUVhOSmFrbDNUVk5KTms1VVJYTkpha2wzVFdsSk5rNUVaM05KYWtsM1RYbEpOazlVYTNOSmFrbDNUa05KTmsxVWEzaE1RMGw1VFVSVmFVOXFSVFZPZVhkcFRXcEJNa2xxYnpGUFEzZHBUV3BCTTBscWIzaFBSRUZ6U1dwSmQwOURTVFpOVkZVd1RFTkplVTFFYTJsUGFrVXlUbmwzYVUxcVJYZEphbTk0VFdwRmMwbHFTWGhOVTBrMlRXcEJNVXhEU1hsTlZFbHBUMnBKZWs1cGQybE5ha1Y2U1dwdmVVMVRkMmxOYWtVd1NXcHZlRTlFWTNOSmFrbDRUbE5KTmsxcVRYcE1RMGw1VFZSWmFVOXFTVEZOZVhkcFRXcEZNMGxxYnpKT2FYZHBUV3BGTkVscWJ6Sk9hWGRwVFdwRk5VbHFiM2hQUkVselNXcEplVTFEU1RaTmFrMHhURU5KZVUxcVJXbFBha2w0VFdsM2FVMXFTWGxKYW05NlRXbDNhVTFxU1hwSmFtOTRUWHBaYzBscVNYbE9RMGsyVG5wRmMwbHFTWGxPVTBrMlRWUm5NMHhEU1hsTmFsbHBUMnBKZVU5RGQybE5ha2t6U1dwdmVVMTZUWE5KYWtsNVQwTkpOazU2VVhOSmFrbDVUMU5KTmsxVVJUUk1RMGw1VFhwQmFVOXFSWGxOUTNkcFRXcE5lRWxxYnpKUFUzZHBUV3BOZVVscWIzaFBWRUZ6U1dwSmVrMTVTVFpPZWsxelNXcEplazVEU1RaTlZGRjRURU5KZVUxNlZXbFBhbEY1VEVOSmVVMTZXV2xQYW1zMFRFTkplVTE2WTJsUGFrMDFURU5KZVUxNloybFBha1V4VFhsM2FVMXFUVFZKYW04MVRXbDNhVTFxVVhkSmFtOHpUME4zYVUxcVVYaEphbTk1VG1sM2FVMXFVWGxKYW05NVRWUnJjMGxxU1RCTmVVazJUVlJyTkV4RFNYbE9SRkZwVDJwRk1rOURkMmxOYWxFeFNXcHZlRTU2WTNOSmFra3dUbWxKTms1cVZYTkpha2t3VG5sSk5rMXFTWGhNUTBsNVRrUm5hVTlxU1hkTmFYZHBUV3BSTlVscWIzaE9hazF6U1dwSk1VMURTVFpOVkVrMFRFTkplVTVVUldsUGFsRTFURU5KZVU1VVNXbFBha1Y0VFZOM2FVMXFWWHBKYW05NFRWUkJjMGxxU1RGT1EwazJUVlJWYzBscVNURk9VMGsyVG1wbmMwbHFTVEZPYVVrMlRXcEplRXhEU1hsT1ZHTnBUMnBKZVU5RGQybE5hbFUwU1dwdmVrNTVkMmxOYWxVMVNXcHZlVTU1ZDJsTmFsbDNTV3B2TkUxcGQybE5hbGw0U1dwdmVFOVVaM05KYWtreVRXbEpOazVUZDJsTmFsbDZTV3B2TTB4RFNYbE9hbEZwVDJwSmVFOURkMmxOYWxreFNXcHZlRTFxVFhOSmFra3lUbWxKTmsxcVNUUk1RMGw1VG1wamFVOXFSVEJOUTNkcFRXcFpORWxxYnpKUFEzZHBUV3BaTlVscWIzaE9SRVZ6U1dwSk0wMURTVFpOVkdONFRFTkplVTU2UldsUGFtY3dURU5KZVU1NlNXbFBha1UxVFdsM2FVMXFZM3BKYW05M1RFTkplVTU2VVdsUGFrbDRURU5KZVU1NlZXbFBhbGw0VEVOSmVVNTZXV2xQYWtWNVRFTkplVTU2WTJsUGFrazBURU5KZVU1NloybFBha2x6U1dwSk0wOVRTVFpOVkZWelNXcEpORTFEU1RaTlZGVXpURU5KZVU5RVJXbFBhbFY1VEVOSmVVOUVTV2xQYWtsM1QwTjNhVTFxWjNwSmFtOTRUWHByYzBscVNUUk9RMGsyVFdwbmMwbHFTVFJPVTBrMlRtcEJjMGxxU1RST2FVazJUa1JGYzBscVNUUk9lVWsyVFdwUmMwbHFTVFJQUTBrMlRXcEpNMHhEU1hsUFJHdHBUMnBKYzBscVNUVk5RMGsyVFhsM2FVMXFhM2hKYW05NFRFTkplVTlVU1dsUGFrRnpTV3BKTlUxNVNUWk5XREE5SWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam94TlRFd05qTXlPVGs1TENKbGVIQWlPakUxTVRBMk16WTFPVGw5Lk9hNGhFMXJ5bGtDMWNmTy1tWk9IYlQtSFZuSUd6QURDWk1qdFRkdU5PNG9ocWdXSVJJSldDaHZiclpHR0ZXckEyR3UyMEVVUkltNG5CV21xU01Mcm5maHpYYVZRNW56QUlHeGpWXzZQOWFtTFBIeFFZbXJFcU5FakNPME0yejFVQUI5VFVwcEhMcm5FMXlzS3VDM2NIaDdUN2ptazdvM3RlWFRqMTBmV1BXUGs5dXhtZWYwX01wRjA1SHBUNEpGbmJFeWVZR2M5TmtISzd3RGZNWG1sNjRGV3BPaGtncElXYlcyY0l6anJzTjlCSUdacVRvLUw2QUM2VEFfUXRyYVB6djRoUFgyc296NnM5TGRmekJtcFQ2ZzlJdUk4djlnOGxKRFRTZEptM2tFdnNXNDZ3S3h2cHAxOTdIdDRDcW1JRzZnS3ppdENNZ3BjWU5wMkJRVWVpQSIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiIyMkZyOWl2aDVieXhlLWtXTjhpb2tRIiwibm9uY2UiOiJleUl3SWpvME9Dd2lNU0k2TVRNd0xDSXlJam94TENJeklqb3pOQ3dpTkNJNk5EZ3NJalVpT2pFekxDSTJJam8yTENJM0lqbzVMQ0k0SWpvME1pd2lPU0k2TVRNMExDSXhNQ0k2TnpJc0lqRXhJam94TXpRc0lqRXlJam95TkRjc0lqRXpJam94TXl3aU1UUWlPakVzSWpFMUlqb3hMQ0l4TmlJNk1Td2lNVGNpT2pVc0lqRTRJam93TENJeE9TSTZNeXdpTWpBaU9qRXpNQ3dpTWpFaU9qRXNJakl5SWpveE5Td2lNak1pT2pBc0lqSTBJam8wT0N3aU1qVWlPakV6TUN3aU1qWWlPakVzSWpJM0lqb3hNQ3dpTWpnaU9qSXNJakk1SWpveE16QXNJak13SWpveExDSXpNU0k2TVN3aU16SWlPakFzSWpNeklqb3hOVEFzSWpNMElqbzVMQ0l6TlNJNk9EZ3NJak0ySWpveE5qQXNJak0zSWpveU5Ea3NJak00SWpveE5EQXNJak01SWpveU16a3NJalF3SWpveE1EQXNJalF4SWpvek5Dd2lORElpT2pJMU1Td2lORE1pT2pFME1pd2lORFFpT2pFNU9Td2lORFVpT2pJd0xDSTBOaUk2TVRNM0xDSTBOeUk2TWpBeUxDSTBPQ0k2TVRnc0lqUTVJam94T0RNc0lqVXdJam94TlRnc0lqVXhJam95TXpjc0lqVXlJam95TlRRc0lqVXpJam8yT0N3aU5UUWlPakl6Tml3aU5UVWlPakV5TlN3aU5UWWlPalk1TENJMU55STZNVFFzSWpVNElqbzRPQ3dpTlRraU9qRXlPQ3dpTmpBaU9qRXlOQ3dpTmpFaU9qSXdNQ3dpTmpJaU9qSXdPU3dpTmpNaU9qRTVOQ3dpTmpRaU9qRTBOQ3dpTmpVaU9qSXdNeXdpTmpZaU9qRTFMQ0kyTnlJNk1qQXpMQ0kyT0NJNk1qQXdMQ0kyT1NJNk16SXNJamN3SWpveU1UUXNJamN4SWpveU5URXNJamN5SWpvNE1Td2lOek1pT2pFNE9Dd2lOelFpT2pFMk1pd2lOelVpT2pFd05Td2lOellpT2pjNUxDSTNOeUk2T0Rjc0lqYzRJam8yT0N3aU56a2lPakUwTVN3aU9EQWlPall3TENJNE1TSTZPRGdzSWpneUlqbzROQ3dpT0RNaU9qWTFMQ0k0TkNJNk5EWXNJamcxSWpveE1EQXNJamcySWpveU1qZ3NJamczSWpvNE9Dd2lPRGdpT2pJd01pd2lPRGtpT2pNeUxDSTVNQ0k2TVRjeUxDSTVNU0k2TVRBNUxDSTVNaUk2TlRBc0lqa3pJam95TURZc0lqazBJam95TVRRc0lqazFJam95TkRRc0lqazJJam94TURVc0lqazNJam8xT1N3aU9UZ2lPakV4TUN3aU9Ua2lPakUyTENJeE1EQWlPakU1Tnl3aU1UQXhJam95TURNc0lqRXdNaUk2Tml3aU1UQXpJam94TUN3aU1UQTBJam8wTXl3aU1UQTFJam8zTENJeE1EWWlPak0xTENJeE1EY2lPakkwT0N3aU1UQTRJam94TkRZc0lqRXdPU0k2TVRVd0xDSXhNVEFpT2pFNU15d2lNVEV4SWpveU5EUXNJakV4TWlJNk1UWTJMQ0l4TVRNaU9qRXpPU3dpTVRFMElqb3hPRElzSWpFeE5TSTZOemdzSWpFeE5pSTZNVFV4TENJeE1UY2lPakU0TENJeE1UZ2lPalFzSWpFeE9TSTZOalFzSWpFeU1DSTZOVFVzSWpFeU1TSTZNakUxTENJeE1qSWlPakV4TVN3aU1USXpJam94T1Rrc0lqRXlOQ0k2T1Rnc0lqRXlOU0k2T0N3aU1USTJJam96TENJeE1qY2lPalF5TENJeE1qZ2lPakV3T1N3aU1USTVJam94T1RVc0lqRXpNQ0k2TnpBc0lqRXpNU0k2TmpBc0lqRXpNaUk2TVRNNUxDSXhNek1pT2pFNU5Dd2lNVE0wSWpveE1URXNJakV6TlNJNk1UWXpMQ0l4TXpZaU9qRTVNaXdpTVRNM0lqbzJNaXdpTVRNNElqb3hOeXdpTVRNNUlqb3lNRE1zSWpFME1DSTZNVEUzTENJeE5ERWlPalExTENJeE5ESWlPakUwTWl3aU1UUXpJam94T1N3aU1UUTBJam94TmpZc0lqRTBOU0k2T1RBc0lqRTBOaUk2TVRjeExDSXhORGNpT2prNUxDSXhORGdpT2pFM01Dd2lNVFE1SWpveE5UUXNJakUxTUNJNk16Y3NJakUxTVNJNk1qQTRMQ0l4TlRJaU9qRTBOeXdpTVRVeklqb3hNeXdpTVRVMElqb3hPVFlzSWpFMU5TSTZOVFlzSWpFMU5pSTZNVGcyTENJeE5UY2lPakU0TUN3aU1UVTRJam94T1RRc0lqRTFPU0k2TWpJd0xDSXhOakFpT2pFeU1pd2lNVFl4SWpvME5pd2lNVFl5SWpveU1qSXNJakUyTXlJNk1UYzJMQ0l4TmpRaU9qY3dMQ0l4TmpVaU9qVTVMQ0l4TmpZaU9qRXpMQ0l4TmpjaU9qSXlNeXdpTVRZNElqbzVNU3dpTVRZNUlqb3hNRGdzSWpFM01DSTZNVGMzTENJeE56RWlPakl4TkN3aU1UY3lJam8zTWl3aU1UY3pJam96TUN3aU1UYzBJam95TWpJc0lqRTNOU0k2TkRJc0lqRTNOaUk2TWpJMExDSXhOemNpT2pJd01Td2lNVGM0SWpvMU1pd2lNVGM1SWpveU1URXNJakU0TUNJNk1qUTJMQ0l4T0RFaU9qRTROQ3dpTVRneUlqb3lNU3dpTVRneklqbzVOaXdpTVRnMElqb3hORGtzSWpFNE5TSTZPVGtzSWpFNE5pSTZNVEF4TENJeE9EY2lPakUwTnl3aU1UZzRJam94TnpNc0lqRTRPU0k2TWpRNExDSXhPVEFpT2pFMk5pd2lNVGt4SWpvek1Td2lNVGt5SWpveE5qa3NJakU1TXlJNk9UTXNJakU1TkNJNk1qRTBMQ0l4T1RVaU9qRXlOQ3dpTVRrMklqb3lPQ3dpTVRrM0lqbzJNU3dpTVRrNElqbzFPU3dpTVRrNUlqb3pPQ3dpTWpBd0lqb3hNREFzSWpJd01TSTZOVEVzSWpJd01pSTZORGdzSWpJd015STZPVGtzSWpJd05DSTZNVGt4TENJeU1EVWlPakU1Tnl3aU1qQTJJam8xT0N3aU1qQTNJam94T0RBc0lqSXdPQ0k2TVRVMExDSXlNRGtpT2pFMk55d2lNakV3SWpveE1qRXNJakl4TVNJNk1qQTFMQ0l5TVRJaU9qSXpOaXdpTWpFeklqb3lNU3dpTWpFMElqb3hPRGNzSWpJeE5TSTZNak16TENJeU1UWWlPakkxTXl3aU1qRTNJam8yTml3aU1qRTRJam8yTml3aU1qRTVJam94T0RJc0lqSXlNQ0k2TWpNMUxDSXlNakVpT2pJeE1pd2lNakl5SWpvek1pd2lNakl6SWpveE16WXNJakl5TkNJNk56RXNJakl5TlNJNk1UZzNMQ0l5TWpZaU9qSXlPQ3dpTWpJM0lqb3lNek1zSWpJeU9DSTZOelFzSWpJeU9TSTZNVEU0TENJeU16QWlPakV5TUN3aU1qTXhJam8yT1N3aU1qTXlJam94T1RBc0lqSXpNeUk2TnpNc0lqSXpOQ0k2TVRReExDSXlNelVpT2pReUxDSXlNellpT2prNExDSXlNemNpT2pNNUxDSXlNemdpT2pFMU15d2lNak01SWpvNU1pd2lNalF3SWpvM09Dd2lNalF4SWpveU5pd2lNalF5SWpveU1Ua3NJakkwTXlJNk1UazRMQ0l5TkRRaU9qRTJPQ3dpTWpRMUlqb3hOemNzSWpJME5pSTZOalVzSWpJME55STZNakl4TENJeU5EZ2lPakl3TWl3aU1qUTVJam94TmpNc0lqSTFNQ0k2TVRJNExDSXlOVEVpT2pRNUxDSXlOVElpT2pFeE1Td2lNalV6SWpveE1UQXNJakkxTkNJNk1UVXNJakkxTlNJNk5qZ3NJakkxTmlJNk1qSXhMQ0l5TlRjaU9qSXlPQ3dpTWpVNElqb3pOeXdpTWpVNUlqb3lOeXdpTWpZd0lqbzRNaXdpTWpZeElqb3hPVGdzSWpJMk1pSTZOU3dpTWpZeklqbzNMQ0l5TmpRaU9qSXhPQ3dpTWpZMUlqb3hNak1zSWpJMk5pSTZNakk0TENJeU5qY2lPakUwTUN3aU1qWTRJam8yT0N3aU1qWTVJam94TkRFc0lqSTNNQ0k2TVRjeExDSXlOekVpT2pnMExDSXlOeklpT2pFNU1pd2lNamN6SWpvd0xDSXlOelFpT2pJeExDSXlOelVpT2pZeExDSXlOellpT2pFeUxDSXlOemNpT2pJNExDSXlOemdpT2pJc0lqSTNPU0k2TVRVc0lqSTRNQ0k2TVRVM0xDSXlPREVpT2pVeUxDSXlPRElpT2pJd09Dd2lNamd6SWpveE16a3NJakk0TkNJNk1qZ3NJakk0TlNJNk5qQXNJakk0TmlJNk5ERXNJakk0TnlJNk1qUXNJakk0T0NJNk1qSTNMQ0l5T0RraU9qSXNJakk1TUNJNk15d2lNamt4SWpveExDSXlPVElpT2pBc0lqSTVNeUk2TVgwPSIsImlzcyI6Imh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSIsImlhdCI6IjE1MTA2MzI5OTkiLCJleHAiOiIxNTEwNjM2NTk5IiwiYWxnIjoiUlMyNTYiLCJraWQiOiIzY2U0YTk3ZDUwMmFmMDU4ZWI2NmFjOGQ3MzBhNTkyYWI3Y2VhN2YxIn19\",\n  idp: {\n    domain: \"nodejs-idp\",\n    protocol: \"OIDC\"\n  }, info: {\n    accessToken: \"ya29.GlsEBdnBCw-KLmpgfhQZE4PhEJXlGmWmrJYO1L-r-uy7yvyK31CLzQuh8YWzvQk19LU_ab6G7mRdGHSa2ynGm2F2U9iBz6guiWinJ2QbqRxoTN9U5G__8AqTKlWg\",\n    idToken: \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjNjZTRhOTdkNTAyYWYwNThlYjY2YWM4ZDczMGE1OTJhYjdjZWE3ZjEifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDMxNTQ0OTE3MTEyNzUxMjYzNDIiLCJlbWFpbCI6InRlc3RhbmR0aGluazMyMUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6IjIyRnI5aXZoNWJ5eGUta1dOOGlva1EiLCJub25jZSI6ImV5SXdJam8wT0N3aU1TSTZNVE13TENJeUlqb3hMQ0l6SWpvek5Dd2lOQ0k2TkRnc0lqVWlPakV6TENJMklqbzJMQ0kzSWpvNUxDSTRJam8wTWl3aU9TSTZNVE0wTENJeE1DSTZOeklzSWpFeElqb3hNelFzSWpFeUlqb3lORGNzSWpFeklqb3hNeXdpTVRRaU9qRXNJakUxSWpveExDSXhOaUk2TVN3aU1UY2lPalVzSWpFNElqb3dMQ0l4T1NJNk15d2lNakFpT2pFek1Dd2lNakVpT2pFc0lqSXlJam94TlN3aU1qTWlPakFzSWpJMElqbzBPQ3dpTWpVaU9qRXpNQ3dpTWpZaU9qRXNJakkzSWpveE1Dd2lNamdpT2pJc0lqSTVJam94TXpBc0lqTXdJam94TENJek1TSTZNU3dpTXpJaU9qQXNJak16SWpveE5UQXNJak0wSWpvNUxDSXpOU0k2T0Rnc0lqTTJJam94TmpBc0lqTTNJam95TkRrc0lqTTRJam94TkRBc0lqTTVJam95TXprc0lqUXdJam94TURBc0lqUXhJam96TkN3aU5ESWlPakkxTVN3aU5ETWlPakUwTWl3aU5EUWlPakU1T1N3aU5EVWlPakl3TENJME5pSTZNVE0zTENJME55STZNakF5TENJME9DSTZNVGdzSWpRNUlqb3hPRE1zSWpVd0lqb3hOVGdzSWpVeElqb3lNemNzSWpVeUlqb3lOVFFzSWpVeklqbzJPQ3dpTlRRaU9qSXpOaXdpTlRVaU9qRXlOU3dpTlRZaU9qWTVMQ0kxTnlJNk1UUXNJalU0SWpvNE9Dd2lOVGtpT2pFeU9Dd2lOakFpT2pFeU5Dd2lOakVpT2pJd01Dd2lOaklpT2pJd09Td2lOak1pT2pFNU5Dd2lOalFpT2pFME5Dd2lOalVpT2pJd015d2lOallpT2pFMUxDSTJOeUk2TWpBekxDSTJPQ0k2TWpBd0xDSTJPU0k2TXpJc0lqY3dJam95TVRRc0lqY3hJam95TlRFc0lqY3lJam80TVN3aU56TWlPakU0T0N3aU56UWlPakUyTWl3aU56VWlPakV3TlN3aU56WWlPamM1TENJM055STZPRGNzSWpjNElqbzJPQ3dpTnpraU9qRTBNU3dpT0RBaU9qWXdMQ0k0TVNJNk9EZ3NJamd5SWpvNE5Dd2lPRE1pT2pZMUxDSTROQ0k2TkRZc0lqZzFJam94TURBc0lqZzJJam95TWpnc0lqZzNJam80T0N3aU9EZ2lPakl3TWl3aU9Ea2lPak15TENJNU1DSTZNVGN5TENJNU1TSTZNVEE1TENJNU1pSTZOVEFzSWpreklqb3lNRFlzSWprMElqb3lNVFFzSWprMUlqb3lORFFzSWprMklqb3hNRFVzSWprM0lqbzFPU3dpT1RnaU9qRXhNQ3dpT1RraU9qRTJMQ0l4TURBaU9qRTVOeXdpTVRBeElqb3lNRE1zSWpFd01pSTZOaXdpTVRBeklqb3hNQ3dpTVRBMElqbzBNeXdpTVRBMUlqbzNMQ0l4TURZaU9qTTFMQ0l4TURjaU9qSTBPQ3dpTVRBNElqb3hORFlzSWpFd09TSTZNVFV3TENJeE1UQWlPakU1TXl3aU1URXhJam95TkRRc0lqRXhNaUk2TVRZMkxDSXhNVE1pT2pFek9Td2lNVEUwSWpveE9ESXNJakV4TlNJNk56Z3NJakV4TmlJNk1UVXhMQ0l4TVRjaU9qRTRMQ0l4TVRnaU9qUXNJakV4T1NJNk5qUXNJakV5TUNJNk5UVXNJakV5TVNJNk1qRTFMQ0l4TWpJaU9qRXhNU3dpTVRJeklqb3hPVGtzSWpFeU5DSTZPVGdzSWpFeU5TSTZPQ3dpTVRJMklqb3pMQ0l4TWpjaU9qUXlMQ0l4TWpnaU9qRXdPU3dpTVRJNUlqb3hPVFVzSWpFek1DSTZOekFzSWpFek1TSTZOakFzSWpFek1pSTZNVE01TENJeE16TWlPakU1TkN3aU1UTTBJam94TVRFc0lqRXpOU0k2TVRZekxDSXhNellpT2pFNU1pd2lNVE0zSWpvMk1pd2lNVE00SWpveE55d2lNVE01SWpveU1ETXNJakUwTUNJNk1URTNMQ0l4TkRFaU9qUTFMQ0l4TkRJaU9qRTBNaXdpTVRReklqb3hPU3dpTVRRMElqb3hOallzSWpFME5TSTZPVEFzSWpFME5pSTZNVGN4TENJeE5EY2lPams1TENJeE5EZ2lPakUzTUN3aU1UUTVJam94TlRRc0lqRTFNQ0k2TXpjc0lqRTFNU0k2TWpBNExDSXhOVElpT2pFME55d2lNVFV6SWpveE15d2lNVFUwSWpveE9UWXNJakUxTlNJNk5UWXNJakUxTmlJNk1UZzJMQ0l4TlRjaU9qRTRNQ3dpTVRVNElqb3hPVFFzSWpFMU9TSTZNakl3TENJeE5qQWlPakV5TWl3aU1UWXhJam8wTml3aU1UWXlJam95TWpJc0lqRTJNeUk2TVRjMkxDSXhOalFpT2pjd0xDSXhOalVpT2pVNUxDSXhOallpT2pFekxDSXhOamNpT2pJeU15d2lNVFk0SWpvNU1Td2lNVFk1SWpveE1EZ3NJakUzTUNJNk1UYzNMQ0l4TnpFaU9qSXhOQ3dpTVRjeUlqbzNNaXdpTVRjeklqb3pNQ3dpTVRjMElqb3lNaklzSWpFM05TSTZORElzSWpFM05pSTZNakkwTENJeE56Y2lPakl3TVN3aU1UYzRJam8xTWl3aU1UYzVJam95TVRFc0lqRTRNQ0k2TWpRMkxDSXhPREVpT2pFNE5Dd2lNVGd5SWpveU1Td2lNVGd6SWpvNU5pd2lNVGcwSWpveE5Ea3NJakU0TlNJNk9Ua3NJakU0TmlJNk1UQXhMQ0l4T0RjaU9qRTBOeXdpTVRnNElqb3hOek1zSWpFNE9TSTZNalE0TENJeE9UQWlPakUyTml3aU1Ua3hJam96TVN3aU1Ua3lJam94Tmprc0lqRTVNeUk2T1RNc0lqRTVOQ0k2TWpFMExDSXhPVFVpT2pFeU5Dd2lNVGsySWpveU9Dd2lNVGszSWpvMk1Td2lNVGs0SWpvMU9Td2lNVGs1SWpvek9Dd2lNakF3SWpveE1EQXNJakl3TVNJNk5URXNJakl3TWlJNk5EZ3NJakl3TXlJNk9Ua3NJakl3TkNJNk1Ua3hMQ0l5TURVaU9qRTVOeXdpTWpBMklqbzFPQ3dpTWpBM0lqb3hPREFzSWpJd09DSTZNVFUwTENJeU1Ea2lPakUyTnl3aU1qRXdJam94TWpFc0lqSXhNU0k2TWpBMUxDSXlNVElpT2pJek5pd2lNakV6SWpveU1Td2lNakUwSWpveE9EY3NJakl4TlNJNk1qTXpMQ0l5TVRZaU9qSTFNeXdpTWpFM0lqbzJOaXdpTWpFNElqbzJOaXdpTWpFNUlqb3hPRElzSWpJeU1DSTZNak0xTENJeU1qRWlPakl4TWl3aU1qSXlJam96TWl3aU1qSXpJam94TXpZc0lqSXlOQ0k2TnpFc0lqSXlOU0k2TVRnM0xDSXlNallpT2pJeU9Dd2lNakkzSWpveU16TXNJakl5T0NJNk56UXNJakl5T1NJNk1URTRMQ0l5TXpBaU9qRXlNQ3dpTWpNeElqbzJPU3dpTWpNeUlqb3hPVEFzSWpJek15STZOek1zSWpJek5DSTZNVFF4TENJeU16VWlPalF5TENJeU16WWlPams0TENJeU16Y2lPak01TENJeU16Z2lPakUxTXl3aU1qTTVJam81TWl3aU1qUXdJam8zT0N3aU1qUXhJam95Tml3aU1qUXlJam95TVRrc0lqSTBNeUk2TVRrNExDSXlORFFpT2pFMk9Dd2lNalExSWpveE56Y3NJakkwTmlJNk5qVXNJakkwTnlJNk1qSXhMQ0l5TkRnaU9qSXdNaXdpTWpRNUlqb3hOak1zSWpJMU1DSTZNVEk0TENJeU5URWlPalE1TENJeU5USWlPakV4TVN3aU1qVXpJam94TVRBc0lqSTFOQ0k2TVRVc0lqSTFOU0k2Tmpnc0lqSTFOaUk2TWpJeExDSXlOVGNpT2pJeU9Dd2lNalU0SWpvek55d2lNalU1SWpveU55d2lNall3SWpvNE1pd2lNall4SWpveE9UZ3NJakkyTWlJNk5Td2lNall6SWpvM0xDSXlOalFpT2pJeE9Dd2lNalkxSWpveE1qTXNJakkyTmlJNk1qSTRMQ0l5TmpjaU9qRTBNQ3dpTWpZNElqbzJPQ3dpTWpZNUlqb3hOREVzSWpJM01DSTZNVGN4TENJeU56RWlPamcwTENJeU56SWlPakU1TWl3aU1qY3pJam93TENJeU56UWlPakl4TENJeU56VWlPall4TENJeU56WWlPakV5TENJeU56Y2lPakk0TENJeU56Z2lPaklzSWpJM09TSTZNVFVzSWpJNE1DSTZNVFUzTENJeU9ERWlPalV5TENJeU9ESWlPakl3T0N3aU1qZ3pJam94TXprc0lqSTROQ0k2TWpnc0lqSTROU0k2TmpBc0lqSTROaUk2TkRFc0lqSTROeUk2TWpRc0lqSTRPQ0k2TWpJM0xDSXlPRGtpT2pJc0lqSTVNQ0k2TXl3aU1qa3hJam94TENJeU9USWlPakFzSWpJNU15STZNWDA9IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoxNTEwNjMyOTk5LCJleHAiOjE1MTA2MzY1OTl9.Oa4hE1rylkC1cfO-mZOHbT-HVnIGzADCZMjtTduNO4ohqgWIRIJWChvbrZGGFWrA2Gu20EURIm4nBWmqSMLrnfhzXaVQ5nzAIGxjV_6P9amLPHxQYmrEqNEjCO0M2z1UAB9TUppHLrnE1ysKuC3cHh7T7jmk7o3teXTj10fWPWPk9uxmef0_MpF05HpT4JFnbEyeYGc9NkHK7wDfMXml64FWpOhkgpIWbW2cIzjrsN9BIGZqTo-L6AC6TA_QtraPzv4hPX2soz6s9LdfzBmpT6g9IuI8v9g8lJDTSdJm3kEvsW46wKxvpp197Ht4CqmIG6gKzitCMgpcYNp2BQUeiA\", \"refreshToken\": \"1/LBBKBTnJwoKroYzPHboK6iA-i-afFWMLH2VABBb6Bhk\",\n    tokenType: \"Bearer\",\n    infoToken: {\n      sub: \"103154491711275126342\",\n      name: \"test think\",\n      given_name: \"test\",\n      family_name: \"think\",\n      picture: \"https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg\",\n      email: \"testandthink321@gmail.com\",\n      email_verified: true,\n      locale: \"en\" },\n    tokenIDJSON: {\n      azp: \"808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com\",\n      aud: \"808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com\",\n      sub: \"103154491711275126342\",\n      email: \"testandthink321@gmail.com\",\n      email_verified: \"true\",\n      at_hash: \"22Fr9ivh5byxe-kWN8iokQ\",\n      nonce: \"eyIwIjo0OCwiMSI6MTMwLCIyIjoxLCIzIjozNCwiNCI6NDgsIjUiOjEzLCI2Ijo2LCI3Ijo5LCI4Ijo0MiwiOSI6MTM0LCIxMCI6NzIsIjExIjoxMzQsIjEyIjoyNDcsIjEzIjoxMywiMTQiOjEsIjE1IjoxLCIxNiI6MSwiMTciOjUsIjE4IjowLCIxOSI6MywiMjAiOjEzMCwiMjEiOjEsIjIyIjoxNSwiMjMiOjAsIjI0Ijo0OCwiMjUiOjEzMCwiMjYiOjEsIjI3IjoxMCwiMjgiOjIsIjI5IjoxMzAsIjMwIjoxLCIzMSI6MSwiMzIiOjAsIjMzIjoxNTAsIjM0Ijo5LCIzNSI6ODgsIjM2IjoxNjAsIjM3IjoyNDksIjM4IjoxNDAsIjM5IjoyMzksIjQwIjoxMDAsIjQxIjozNCwiNDIiOjI1MSwiNDMiOjE0MiwiNDQiOjE5OSwiNDUiOjIwLCI0NiI6MTM3LCI0NyI6MjAyLCI0OCI6MTgsIjQ5IjoxODMsIjUwIjoxNTgsIjUxIjoyMzcsIjUyIjoyNTQsIjUzIjo2OCwiNTQiOjIzNiwiNTUiOjEyNSwiNTYiOjY5LCI1NyI6MTQsIjU4Ijo4OCwiNTkiOjEyOCwiNjAiOjEyNCwiNjEiOjIwMCwiNjIiOjIwOSwiNjMiOjE5NCwiNjQiOjE0NCwiNjUiOjIwMywiNjYiOjE1LCI2NyI6MjAzLCI2OCI6MjAwLCI2OSI6MzIsIjcwIjoyMTQsIjcxIjoyNTEsIjcyIjo4MSwiNzMiOjE4OCwiNzQiOjE2MiwiNzUiOjEwNSwiNzYiOjc5LCI3NyI6ODcsIjc4Ijo2OCwiNzkiOjE0MSwiODAiOjYwLCI4MSI6ODgsIjgyIjo4NCwiODMiOjY1LCI4NCI6NDYsIjg1IjoxMDAsIjg2IjoyMjgsIjg3Ijo4OCwiODgiOjIwMiwiODkiOjMyLCI5MCI6MTcyLCI5MSI6MTA5LCI5MiI6NTAsIjkzIjoyMDYsIjk0IjoyMTQsIjk1IjoyNDQsIjk2IjoxMDUsIjk3Ijo1OSwiOTgiOjExMCwiOTkiOjE2LCIxMDAiOjE5NywiMTAxIjoyMDMsIjEwMiI6NiwiMTAzIjoxMCwiMTA0Ijo0MywiMTA1Ijo3LCIxMDYiOjM1LCIxMDciOjI0OCwiMTA4IjoxNDYsIjEwOSI6MTUwLCIxMTAiOjE5MywiMTExIjoyNDQsIjExMiI6MTY2LCIxMTMiOjEzOSwiMTE0IjoxODIsIjExNSI6NzgsIjExNiI6MTUxLCIxMTciOjE4LCIxMTgiOjQsIjExOSI6NjQsIjEyMCI6NTUsIjEyMSI6MjE1LCIxMjIiOjExMSwiMTIzIjoxOTksIjEyNCI6OTgsIjEyNSI6OCwiMTI2IjozLCIxMjciOjQyLCIxMjgiOjEwOSwiMTI5IjoxOTUsIjEzMCI6NzAsIjEzMSI6NjAsIjEzMiI6MTM5LCIxMzMiOjE5NCwiMTM0IjoxMTEsIjEzNSI6MTYzLCIxMzYiOjE5MiwiMTM3Ijo2MiwiMTM4IjoxNywiMTM5IjoyMDMsIjE0MCI6MTE3LCIxNDEiOjQ1LCIxNDIiOjE0MiwiMTQzIjoxOSwiMTQ0IjoxNjYsIjE0NSI6OTAsIjE0NiI6MTcxLCIxNDciOjk5LCIxNDgiOjE3MCwiMTQ5IjoxNTQsIjE1MCI6MzcsIjE1MSI6MjA4LCIxNTIiOjE0NywiMTUzIjoxMywiMTU0IjoxOTYsIjE1NSI6NTYsIjE1NiI6MTg2LCIxNTciOjE4MCwiMTU4IjoxOTQsIjE1OSI6MjIwLCIxNjAiOjEyMiwiMTYxIjo0NiwiMTYyIjoyMjIsIjE2MyI6MTc2LCIxNjQiOjcwLCIxNjUiOjU5LCIxNjYiOjEzLCIxNjciOjIyMywiMTY4Ijo5MSwiMTY5IjoxMDgsIjE3MCI6MTc3LCIxNzEiOjIxNCwiMTcyIjo3MiwiMTczIjozMCwiMTc0IjoyMjIsIjE3NSI6NDIsIjE3NiI6MjI0LCIxNzciOjIwMSwiMTc4Ijo1MiwiMTc5IjoyMTEsIjE4MCI6MjQ2LCIxODEiOjE4NCwiMTgyIjoyMSwiMTgzIjo5NiwiMTg0IjoxNDksIjE4NSI6OTksIjE4NiI6MTAxLCIxODciOjE0NywiMTg4IjoxNzMsIjE4OSI6MjQ4LCIxOTAiOjE2NiwiMTkxIjozMSwiMTkyIjoxNjksIjE5MyI6OTMsIjE5NCI6MjE0LCIxOTUiOjEyNCwiMTk2IjoyOCwiMTk3Ijo2MSwiMTk4Ijo1OSwiMTk5IjozOCwiMjAwIjoxMDAsIjIwMSI6NTEsIjIwMiI6NDgsIjIwMyI6OTksIjIwNCI6MTkxLCIyMDUiOjE5NywiMjA2Ijo1OCwiMjA3IjoxODAsIjIwOCI6MTU0LCIyMDkiOjE2NywiMjEwIjoxMjEsIjIxMSI6MjA1LCIyMTIiOjIzNiwiMjEzIjoyMSwiMjE0IjoxODcsIjIxNSI6MjMzLCIyMTYiOjI1MywiMjE3Ijo2NiwiMjE4Ijo2NiwiMjE5IjoxODIsIjIyMCI6MjM1LCIyMjEiOjIxMiwiMjIyIjozMiwiMjIzIjoxMzYsIjIyNCI6NzEsIjIyNSI6MTg3LCIyMjYiOjIyOCwiMjI3IjoyMzMsIjIyOCI6NzQsIjIyOSI6MTE4LCIyMzAiOjEyMCwiMjMxIjo2OSwiMjMyIjoxOTAsIjIzMyI6NzMsIjIzNCI6MTQxLCIyMzUiOjQyLCIyMzYiOjk4LCIyMzciOjM5LCIyMzgiOjE1MywiMjM5Ijo5MiwiMjQwIjo3OCwiMjQxIjoyNiwiMjQyIjoyMTksIjI0MyI6MTk4LCIyNDQiOjE2OCwiMjQ1IjoxNzcsIjI0NiI6NjUsIjI0NyI6MjIxLCIyNDgiOjIwMiwiMjQ5IjoxNjMsIjI1MCI6MTI4LCIyNTEiOjQ5LCIyNTIiOjExMSwiMjUzIjoxMTAsIjI1NCI6MTUsIjI1NSI6NjgsIjI1NiI6MjIxLCIyNTciOjIyOCwiMjU4IjozNywiMjU5IjoyNywiMjYwIjo4MiwiMjYxIjoxOTgsIjI2MiI6NSwiMjYzIjo3LCIyNjQiOjIxOCwiMjY1IjoxMjMsIjI2NiI6MjI4LCIyNjciOjE0MCwiMjY4Ijo2OCwiMjY5IjoxNDEsIjI3MCI6MTcxLCIyNzEiOjg0LCIyNzIiOjE5MiwiMjczIjowLCIyNzQiOjIxLCIyNzUiOjYxLCIyNzYiOjEyLCIyNzciOjI4LCIyNzgiOjIsIjI3OSI6MTUsIjI4MCI6MTU3LCIyODEiOjUyLCIyODIiOjIwOCwiMjgzIjoxMzksIjI4NCI6MjgsIjI4NSI6NjAsIjI4NiI6NDEsIjI4NyI6MjQsIjI4OCI6MjI3LCIyODkiOjIsIjI5MCI6MywiMjkxIjoxLCIyOTIiOjAsIjI5MyI6MX0=\",\n      iss: \"https://accounts.google.com\",\n      iat: \"1510632999\",\n      exp: \"1510636599\",\n      alg: \"RS256\",\n      kid: \"3ce4a97d502af058eb66ac8d730a592ab7cea7f1\" },\n    expires: \"1910636599\",\n    email: \"testandthink321@gmail.com\" },\n  infoToken: {\n    sub: \"103154491711275126342\",\n    name: \"test think\",\n    given_name: \"test\",\n    family_name: \"think\",\n    picture: \"https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg\",\n    email: \"testandthink321@gmail.com\",\n    email_verified: true,\n    locale: \"en\" },\n  identity: \"user://google.com/testandthink321@gmail.com\",\n  messageInfo: {\n    userProfile: {\n      username: \"testandthink321@gmail.com\",\n      cn: \"testandthink321\",\n      avatar: \"https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg\",\n      locale: \"en\",\n      userURL: \"user://google.com/testandthink321@gmail.com\" },\n    idp: \"nodejs-idp\",\n    assertion: \"eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqTmpaVFJoT1Rka05UQXlZV1l3TlRobFlqWTJZV000WkRjek1HRTFPVEpoWWpkalpXRTNaakVpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWpJeVJuSTVhWFpvTldKNWVHVXRhMWRPT0dsdmExRWlMQ0p1YjI1alpTSTZJbVY1U1hkSmFtOHdUME4zYVUxVFNUWk5WRTEzVEVOSmVVbHFiM2hNUTBsNlNXcHZlazVEZDJsT1EwazJUa1JuYzBscVZXbFBha1Y2VEVOSk1rbHFiekpNUTBrelNXcHZOVXhEU1RSSmFtOHdUV2wzYVU5VFNUWk5WRTB3VEVOSmVFMURTVFpPZWtselNXcEZlRWxxYjNoTmVsRnpTV3BGZVVscWIzbE9SR056U1dwRmVrbHFiM2hOZVhkcFRWUlJhVTlxUlhOSmFrVXhTV3B2ZUV4RFNYaE9hVWsyVFZOM2FVMVVZMmxQYWxWelNXcEZORWxxYjNkTVEwbDRUMU5KTmsxNWQybE5ha0ZwVDJwRmVrMURkMmxOYWtWcFQycEZjMGxxU1hsSmFtOTRUbE4zYVUxcVRXbFBha0Z6U1dwSk1FbHFiekJQUTNkcFRXcFZhVTlxUlhwTlEzZHBUV3BaYVU5cVJYTkpha2t6U1dwdmVFMURkMmxOYW1kcFQycEpjMGxxU1RWSmFtOTRUWHBCYzBscVRYZEphbTk0VEVOSmVrMVRTVFpOVTNkcFRYcEphVTlxUVhOSmFrMTZTV3B2ZUU1VVFYTkphazB3U1dwdk5VeERTWHBPVTBrMlQwUm5jMGxxVFRKSmFtOTRUbXBCYzBscVRUTkphbTk1VGtScmMwbHFUVFJKYW05NFRrUkJjMGxxVFRWSmFtOTVUWHByYzBscVVYZEphbTk0VFVSQmMwbHFVWGhKYW05NlRrTjNhVTVFU1dsUGFra3hUVk4zYVU1RVRXbFBha1V3VFdsM2FVNUVVV2xQYWtVMVQxTjNhVTVFVldsUGFrbDNURU5KTUU1cFNUWk5WRTB6VEVOSk1FNTVTVFpOYWtGNVRFTkpNRTlEU1RaTlZHZHpTV3BSTlVscWIzaFBSRTF6U1dwVmQwbHFiM2hPVkdkelNXcFZlRWxxYjNsTmVtTnpTV3BWZVVscWIzbE9WRkZ6U1dwVmVrbHFiekpQUTNkcFRsUlJhVTlxU1hwT2FYZHBUbFJWYVU5cVJYbE9VM2RwVGxSWmFVOXFXVFZNUTBreFRubEpOazFVVVhOSmFsVTBTV3B2TkU5RGQybE9WR3RwVDJwRmVVOURkMmxPYWtGcFQycEZlVTVEZDJsT2FrVnBUMnBKZDAxRGQybE9ha2xwVDJwSmQwOVRkMmxPYWsxcFQycEZOVTVEZDJsT2FsRnBUMnBGTUU1RGQybE9hbFZwVDJwSmQwMTVkMmxPYWxscFQycEZNVXhEU1RKT2VVazJUV3BCZWt4RFNUSlBRMGsyVFdwQmQweERTVEpQVTBrMlRYcEpjMGxxWTNkSmFtOTVUVlJSYzBscVkzaEphbTk1VGxSRmMwbHFZM2xKYW04MFRWTjNhVTU2VFdsUGFrVTBUME4zYVU1NlVXbFBha1V5VFdsM2FVNTZWV2xQYWtWM1RsTjNhVTU2V1dsUGFtTTFURU5KTTA1NVNUWlBSR056U1dwak5FbHFiekpQUTNkcFRucHJhVTlxUlRCTlUzZHBUMFJCYVU5cVdYZE1RMGswVFZOSk5rOUVaM05KYW1kNVNXcHZORTVEZDJsUFJFMXBUMnBaTVV4RFNUUk9RMGsyVGtSWmMwbHFaekZKYW05NFRVUkJjMGxxWnpKSmFtOTVUV3BuYzBscVp6TkphbTgwVDBOM2FVOUVaMmxQYWtsM1RXbDNhVTlFYTJsUGFrMTVURU5KTlUxRFNUWk5WR041VEVOSk5VMVRTVFpOVkVFMVRFTkpOVTFwU1RaT1ZFRnpTV3ByZWtscWIzbE5SRmx6U1dwck1FbHFiM2xOVkZGelNXcHJNVWxxYjNsT1JGRnpTV3ByTWtscWIzaE5SRlZ6U1dwck0wbHFiekZQVTNkcFQxUm5hVTlxUlhoTlEzZHBUMVJyYVU5cVJUSk1RMGw0VFVSQmFVOXFSVFZPZVhkcFRWUkJlRWxxYjNsTlJFMXpTV3BGZDAxcFNUWk9hWGRwVFZSQmVrbHFiM2hOUTNkcFRWUkJNRWxxYnpCTmVYZHBUVlJCTVVscWJ6Tk1RMGw0VFVSWmFVOXFUVEZNUTBsNFRVUmphVTlxU1RCUFEzZHBUVlJCTkVscWIzaE9SRmx6U1dwRmQwOVRTVFpOVkZWM1RFTkplRTFVUVdsUGFrVTFUWGwzYVUxVVJYaEphbTk1VGtSUmMwbHFSWGhOYVVrMlRWUlpNa3hEU1hoTlZFMXBUMnBGZWs5VGQybE5WRVV3U1dwdmVFOUVTWE5KYWtWNFRsTkpOazU2WjNOSmFrVjRUbWxKTmsxVVZYaE1RMGw0VFZSamFVOXFSVFJNUTBsNFRWUm5hVTlxVVhOSmFrVjRUMU5KTms1cVVYTkpha1Y1VFVOSk5rNVVWWE5KYWtWNVRWTkpOazFxUlRGTVEwbDRUV3BKYVU5cVJYaE5VM2RwVFZSSmVrbHFiM2hQVkd0elNXcEZlVTVEU1RaUFZHZHpTV3BGZVU1VFNUWlBRM2RwVFZSSk1rbHFiM3BNUTBsNFRXcGphVTlxVVhsTVEwbDRUV3BuYVU5cVJYZFBVM2RwVFZSSk5VbHFiM2hQVkZWelNXcEZlazFEU1RaT2VrRnpTV3BGZWsxVFNUWk9ha0Z6U1dwRmVrMXBTVFpOVkUwMVRFTkplRTE2VFdsUGFrVTFUa04zYVUxVVRUQkphbTk0VFZSRmMwbHFSWHBPVTBrMlRWUlpla3hEU1hoTmVsbHBUMnBGTlUxcGQybE5WRTB6U1dwdk1rMXBkMmxOVkUwMFNXcHZlRTU1ZDJsTlZFMDFTV3B2ZVUxRVRYTkpha1V3VFVOSk5rMVVSVE5NUTBsNFRrUkZhVTlxVVRGTVEwbDRUa1JKYVU5cVJUQk5hWGRwVFZSUmVrbHFiM2hQVTNkcFRWUlJNRWxxYjNoT2FsbHpTV3BGTUU1VFNUWlBWRUZ6U1dwRk1FNXBTVFpOVkdONFRFTkplRTVFWTJsUGFtczFURU5KZUU1RVoybFBha1V6VFVOM2FVMVVVVFZKYW05NFRsUlJjMGxxUlRGTlEwazJUWHBqYzBscVJURk5VMGsyVFdwQk5FeERTWGhPVkVscFQycEZNRTU1ZDJsTlZGVjZTV3B2ZUUxNWQybE5WRlV3U1dwdmVFOVVXWE5KYWtVeFRsTkpOazVVV1hOSmFrVXhUbWxKTmsxVVp6Sk1RMGw0VGxSamFVOXFSVFJOUTNkcFRWUlZORWxxYjNoUFZGRnpTV3BGTVU5VFNUWk5ha2wzVEVOSmVFNXFRV2xQYWtWNVRXbDNhVTFVV1hoSmFtOHdUbWwzYVUxVVdYbEphbTk1VFdwSmMwbHFSVEpOZVVrMlRWUmpNa3hEU1hoT2FsRnBUMnBqZDB4RFNYaE9hbFZwVDJwVk5VeERTWGhPYWxscFQycEZla3hEU1hoT2FtTnBUMnBKZVUxNWQybE5WRmswU1dwdk5VMVRkMmxOVkZrMVNXcHZlRTFFWjNOSmFrVXpUVU5KTmsxVVl6Tk1RMGw0VG5wRmFVOXFTWGhPUTNkcFRWUmplVWxxYnpOTmFYZHBUVlJqZWtscWIzcE5RM2RwVFZSak1FbHFiM2xOYWtselNXcEZNMDVUU1RaT1JFbHpTV3BGTTA1cFNUWk5ha2t3VEVOSmVFNTZZMmxQYWtsM1RWTjNhVTFVWXpSSmFtOHhUV2wzYVUxVVl6VkphbTk1VFZSRmMwbHFSVFJOUTBrMlRXcFJNa3hEU1hoUFJFVnBUMnBGTkU1RGQybE5WR2Q1U1dwdmVVMVRkMmxOVkdkNlNXcHZOVTVwZDJsTlZHY3dTV3B2ZUU1RWEzTkpha1UwVGxOSk5rOVVhM05KYWtVMFRtbEpOazFVUVhoTVEwbDRUMFJqYVU5cVJUQk9lWGRwVFZSbk5FbHFiM2hPZWsxelNXcEZORTlUU1RaTmFsRTBURU5KZUU5VVFXbFBha1V5VG1sM2FVMVVhM2hKYW05NlRWTjNhVTFVYTNsSmFtOTRUbXByYzBscVJUVk5lVWsyVDFSTmMwbHFSVFZPUTBrMlRXcEZNRXhEU1hoUFZGVnBUMnBGZVU1RGQybE5WR3N5U1dwdmVVOURkMmxOVkdzelNXcHZNazFUZDJsTlZHczBTV3B2TVU5VGQybE5WR3MxU1dwdmVrOURkMmxOYWtGM1NXcHZlRTFFUVhOSmFrbDNUVk5KTms1VVJYTkpha2wzVFdsSk5rNUVaM05KYWtsM1RYbEpOazlVYTNOSmFrbDNUa05KTmsxVWEzaE1RMGw1VFVSVmFVOXFSVFZPZVhkcFRXcEJNa2xxYnpGUFEzZHBUV3BCTTBscWIzaFBSRUZ6U1dwSmQwOURTVFpOVkZVd1RFTkplVTFFYTJsUGFrVXlUbmwzYVUxcVJYZEphbTk0VFdwRmMwbHFTWGhOVTBrMlRXcEJNVXhEU1hsTlZFbHBUMnBKZWs1cGQybE5ha1Y2U1dwdmVVMVRkMmxOYWtVd1NXcHZlRTlFWTNOSmFrbDRUbE5KTmsxcVRYcE1RMGw1VFZSWmFVOXFTVEZOZVhkcFRXcEZNMGxxYnpKT2FYZHBUV3BGTkVscWJ6Sk9hWGRwVFdwRk5VbHFiM2hQUkVselNXcEplVTFEU1RaTmFrMHhURU5KZVUxcVJXbFBha2w0VFdsM2FVMXFTWGxKYW05NlRXbDNhVTFxU1hwSmFtOTRUWHBaYzBscVNYbE9RMGsyVG5wRmMwbHFTWGxPVTBrMlRWUm5NMHhEU1hsTmFsbHBUMnBKZVU5RGQybE5ha2t6U1dwdmVVMTZUWE5KYWtsNVQwTkpOazU2VVhOSmFrbDVUMU5KTmsxVVJUUk1RMGw1VFhwQmFVOXFSWGxOUTNkcFRXcE5lRWxxYnpKUFUzZHBUV3BOZVVscWIzaFBWRUZ6U1dwSmVrMTVTVFpPZWsxelNXcEplazVEU1RaTlZGRjRURU5KZVUxNlZXbFBhbEY1VEVOSmVVMTZXV2xQYW1zMFRFTkplVTE2WTJsUGFrMDFURU5KZVUxNloybFBha1V4VFhsM2FVMXFUVFZKYW04MVRXbDNhVTFxVVhkSmFtOHpUME4zYVUxcVVYaEphbTk1VG1sM2FVMXFVWGxKYW05NVRWUnJjMGxxU1RCTmVVazJUVlJyTkV4RFNYbE9SRkZwVDJwRk1rOURkMmxOYWxFeFNXcHZlRTU2WTNOSmFra3dUbWxKTms1cVZYTkpha2t3VG5sSk5rMXFTWGhNUTBsNVRrUm5hVTlxU1hkTmFYZHBUV3BSTlVscWIzaE9hazF6U1dwSk1VMURTVFpOVkVrMFRFTkplVTVVUldsUGFsRTFURU5KZVU1VVNXbFBha1Y0VFZOM2FVMXFWWHBKYW05NFRWUkJjMGxxU1RGT1EwazJUVlJWYzBscVNURk9VMGsyVG1wbmMwbHFTVEZPYVVrMlRXcEplRXhEU1hsT1ZHTnBUMnBKZVU5RGQybE5hbFUwU1dwdmVrNTVkMmxOYWxVMVNXcHZlVTU1ZDJsTmFsbDNTV3B2TkUxcGQybE5hbGw0U1dwdmVFOVVaM05KYWtreVRXbEpOazVUZDJsTmFsbDZTV3B2TTB4RFNYbE9hbEZwVDJwSmVFOURkMmxOYWxreFNXcHZlRTFxVFhOSmFra3lUbWxKTmsxcVNUUk1RMGw1VG1wamFVOXFSVEJOUTNkcFRXcFpORWxxYnpKUFEzZHBUV3BaTlVscWIzaE9SRVZ6U1dwSk0wMURTVFpOVkdONFRFTkplVTU2UldsUGFtY3dURU5KZVU1NlNXbFBha1UxVFdsM2FVMXFZM3BKYW05M1RFTkplVTU2VVdsUGFrbDRURU5KZVU1NlZXbFBhbGw0VEVOSmVVNTZXV2xQYWtWNVRFTkplVTU2WTJsUGFrazBURU5KZVU1NloybFBha2x6U1dwSk0wOVRTVFpOVkZWelNXcEpORTFEU1RaTlZGVXpURU5KZVU5RVJXbFBhbFY1VEVOSmVVOUVTV2xQYWtsM1QwTjNhVTFxWjNwSmFtOTRUWHByYzBscVNUUk9RMGsyVFdwbmMwbHFTVFJPVTBrMlRtcEJjMGxxU1RST2FVazJUa1JGYzBscVNUUk9lVWsyVFdwUmMwbHFTVFJQUTBrMlRXcEpNMHhEU1hsUFJHdHBUMnBKYzBscVNUVk5RMGsyVFhsM2FVMXFhM2hKYW05NFRFTkplVTlVU1dsUGFrRnpTV3BKTlUxNVNUWk5XREE5SWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam94TlRFd05qTXlPVGs1TENKbGVIQWlPakUxTVRBMk16WTFPVGw5Lk9hNGhFMXJ5bGtDMWNmTy1tWk9IYlQtSFZuSUd6QURDWk1qdFRkdU5PNG9ocWdXSVJJSldDaHZiclpHR0ZXckEyR3UyMEVVUkltNG5CV21xU01Mcm5maHpYYVZRNW56QUlHeGpWXzZQOWFtTFBIeFFZbXJFcU5FakNPME0yejFVQUI5VFVwcEhMcm5FMXlzS3VDM2NIaDdUN2ptazdvM3RlWFRqMTBmV1BXUGs5dXhtZWYwX01wRjA1SHBUNEpGbmJFeWVZR2M5TmtISzd3RGZNWG1sNjRGV3BPaGtncElXYlcyY0l6anJzTjlCSUdacVRvLUw2QUM2VEFfUXRyYVB6djRoUFgyc296NnM5TGRmekJtcFQ2ZzlJdUk4djlnOGxKRFRTZEptM2tFdnNXNDZ3S3h2cHAxOTdIdDRDcW1JRzZnS3ppdENNZ3BjWU5wMkJRVWVpQSIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiIyMkZyOWl2aDVieXhlLWtXTjhpb2tRIiwibm9uY2UiOiJleUl3SWpvME9Dd2lNU0k2TVRNd0xDSXlJam94TENJeklqb3pOQ3dpTkNJNk5EZ3NJalVpT2pFekxDSTJJam8yTENJM0lqbzVMQ0k0SWpvME1pd2lPU0k2TVRNMExDSXhNQ0k2TnpJc0lqRXhJam94TXpRc0lqRXlJam95TkRjc0lqRXpJam94TXl3aU1UUWlPakVzSWpFMUlqb3hMQ0l4TmlJNk1Td2lNVGNpT2pVc0lqRTRJam93TENJeE9TSTZNeXdpTWpBaU9qRXpNQ3dpTWpFaU9qRXNJakl5SWpveE5Td2lNak1pT2pBc0lqSTBJam8wT0N3aU1qVWlPakV6TUN3aU1qWWlPakVzSWpJM0lqb3hNQ3dpTWpnaU9qSXNJakk1SWpveE16QXNJak13SWpveExDSXpNU0k2TVN3aU16SWlPakFzSWpNeklqb3hOVEFzSWpNMElqbzVMQ0l6TlNJNk9EZ3NJak0ySWpveE5qQXNJak0zSWpveU5Ea3NJak00SWpveE5EQXNJak01SWpveU16a3NJalF3SWpveE1EQXNJalF4SWpvek5Dd2lORElpT2pJMU1Td2lORE1pT2pFME1pd2lORFFpT2pFNU9Td2lORFVpT2pJd0xDSTBOaUk2TVRNM0xDSTBOeUk2TWpBeUxDSTBPQ0k2TVRnc0lqUTVJam94T0RNc0lqVXdJam94TlRnc0lqVXhJam95TXpjc0lqVXlJam95TlRRc0lqVXpJam8yT0N3aU5UUWlPakl6Tml3aU5UVWlPakV5TlN3aU5UWWlPalk1TENJMU55STZNVFFzSWpVNElqbzRPQ3dpTlRraU9qRXlPQ3dpTmpBaU9qRXlOQ3dpTmpFaU9qSXdNQ3dpTmpJaU9qSXdPU3dpTmpNaU9qRTVOQ3dpTmpRaU9qRTBOQ3dpTmpVaU9qSXdNeXdpTmpZaU9qRTFMQ0kyTnlJNk1qQXpMQ0kyT0NJNk1qQXdMQ0kyT1NJNk16SXNJamN3SWpveU1UUXNJamN4SWpveU5URXNJamN5SWpvNE1Td2lOek1pT2pFNE9Dd2lOelFpT2pFMk1pd2lOelVpT2pFd05Td2lOellpT2pjNUxDSTNOeUk2T0Rjc0lqYzRJam8yT0N3aU56a2lPakUwTVN3aU9EQWlPall3TENJNE1TSTZPRGdzSWpneUlqbzROQ3dpT0RNaU9qWTFMQ0k0TkNJNk5EWXNJamcxSWpveE1EQXNJamcySWpveU1qZ3NJamczSWpvNE9Dd2lPRGdpT2pJd01pd2lPRGtpT2pNeUxDSTVNQ0k2TVRjeUxDSTVNU0k2TVRBNUxDSTVNaUk2TlRBc0lqa3pJam95TURZc0lqazBJam95TVRRc0lqazFJam95TkRRc0lqazJJam94TURVc0lqazNJam8xT1N3aU9UZ2lPakV4TUN3aU9Ua2lPakUyTENJeE1EQWlPakU1Tnl3aU1UQXhJam95TURNc0lqRXdNaUk2Tml3aU1UQXpJam94TUN3aU1UQTBJam8wTXl3aU1UQTFJam8zTENJeE1EWWlPak0xTENJeE1EY2lPakkwT0N3aU1UQTRJam94TkRZc0lqRXdPU0k2TVRVd0xDSXhNVEFpT2pFNU15d2lNVEV4SWpveU5EUXNJakV4TWlJNk1UWTJMQ0l4TVRNaU9qRXpPU3dpTVRFMElqb3hPRElzSWpFeE5TSTZOemdzSWpFeE5pSTZNVFV4TENJeE1UY2lPakU0TENJeE1UZ2lPalFzSWpFeE9TSTZOalFzSWpFeU1DSTZOVFVzSWpFeU1TSTZNakUxTENJeE1qSWlPakV4TVN3aU1USXpJam94T1Rrc0lqRXlOQ0k2T1Rnc0lqRXlOU0k2T0N3aU1USTJJam96TENJeE1qY2lPalF5TENJeE1qZ2lPakV3T1N3aU1USTVJam94T1RVc0lqRXpNQ0k2TnpBc0lqRXpNU0k2TmpBc0lqRXpNaUk2TVRNNUxDSXhNek1pT2pFNU5Dd2lNVE0wSWpveE1URXNJakV6TlNJNk1UWXpMQ0l4TXpZaU9qRTVNaXdpTVRNM0lqbzJNaXdpTVRNNElqb3hOeXdpTVRNNUlqb3lNRE1zSWpFME1DSTZNVEUzTENJeE5ERWlPalExTENJeE5ESWlPakUwTWl3aU1UUXpJam94T1N3aU1UUTBJam94TmpZc0lqRTBOU0k2T1RBc0lqRTBOaUk2TVRjeExDSXhORGNpT2prNUxDSXhORGdpT2pFM01Dd2lNVFE1SWpveE5UUXNJakUxTUNJNk16Y3NJakUxTVNJNk1qQTRMQ0l4TlRJaU9qRTBOeXdpTVRVeklqb3hNeXdpTVRVMElqb3hPVFlzSWpFMU5TSTZOVFlzSWpFMU5pSTZNVGcyTENJeE5UY2lPakU0TUN3aU1UVTRJam94T1RRc0lqRTFPU0k2TWpJd0xDSXhOakFpT2pFeU1pd2lNVFl4SWpvME5pd2lNVFl5SWpveU1qSXNJakUyTXlJNk1UYzJMQ0l4TmpRaU9qY3dMQ0l4TmpVaU9qVTVMQ0l4TmpZaU9qRXpMQ0l4TmpjaU9qSXlNeXdpTVRZNElqbzVNU3dpTVRZNUlqb3hNRGdzSWpFM01DSTZNVGMzTENJeE56RWlPakl4TkN3aU1UY3lJam8zTWl3aU1UY3pJam96TUN3aU1UYzBJam95TWpJc0lqRTNOU0k2TkRJc0lqRTNOaUk2TWpJMExDSXhOemNpT2pJd01Td2lNVGM0SWpvMU1pd2lNVGM1SWpveU1URXNJakU0TUNJNk1qUTJMQ0l4T0RFaU9qRTROQ3dpTVRneUlqb3lNU3dpTVRneklqbzVOaXdpTVRnMElqb3hORGtzSWpFNE5TSTZPVGtzSWpFNE5pSTZNVEF4TENJeE9EY2lPakUwTnl3aU1UZzRJam94TnpNc0lqRTRPU0k2TWpRNExDSXhPVEFpT2pFMk5pd2lNVGt4SWpvek1Td2lNVGt5SWpveE5qa3NJakU1TXlJNk9UTXNJakU1TkNJNk1qRTBMQ0l4T1RVaU9qRXlOQ3dpTVRrMklqb3lPQ3dpTVRrM0lqbzJNU3dpTVRrNElqbzFPU3dpTVRrNUlqb3pPQ3dpTWpBd0lqb3hNREFzSWpJd01TSTZOVEVzSWpJd01pSTZORGdzSWpJd015STZPVGtzSWpJd05DSTZNVGt4TENJeU1EVWlPakU1Tnl3aU1qQTJJam8xT0N3aU1qQTNJam94T0RBc0lqSXdPQ0k2TVRVMExDSXlNRGtpT2pFMk55d2lNakV3SWpveE1qRXNJakl4TVNJNk1qQTFMQ0l5TVRJaU9qSXpOaXdpTWpFeklqb3lNU3dpTWpFMElqb3hPRGNzSWpJeE5TSTZNak16TENJeU1UWWlPakkxTXl3aU1qRTNJam8yTml3aU1qRTRJam8yTml3aU1qRTVJam94T0RJc0lqSXlNQ0k2TWpNMUxDSXlNakVpT2pJeE1pd2lNakl5SWpvek1pd2lNakl6SWpveE16WXNJakl5TkNJNk56RXNJakl5TlNJNk1UZzNMQ0l5TWpZaU9qSXlPQ3dpTWpJM0lqb3lNek1zSWpJeU9DSTZOelFzSWpJeU9TSTZNVEU0TENJeU16QWlPakV5TUN3aU1qTXhJam8yT1N3aU1qTXlJam94T1RBc0lqSXpNeUk2TnpNc0lqSXpOQ0k2TVRReExDSXlNelVpT2pReUxDSXlNellpT2prNExDSXlNemNpT2pNNUxDSXlNemdpT2pFMU15d2lNak01SWpvNU1pd2lNalF3SWpvM09Dd2lNalF4SWpveU5pd2lNalF5SWpveU1Ua3NJakkwTXlJNk1UazRMQ0l5TkRRaU9qRTJPQ3dpTWpRMUlqb3hOemNzSWpJME5pSTZOalVzSWpJME55STZNakl4TENJeU5EZ2lPakl3TWl3aU1qUTVJam94TmpNc0lqSTFNQ0k2TVRJNExDSXlOVEVpT2pRNUxDSXlOVElpT2pFeE1Td2lNalV6SWpveE1UQXNJakkxTkNJNk1UVXNJakkxTlNJNk5qZ3NJakkxTmlJNk1qSXhMQ0l5TlRjaU9qSXlPQ3dpTWpVNElqb3pOeXdpTWpVNUlqb3lOeXdpTWpZd0lqbzRNaXdpTWpZeElqb3hPVGdzSWpJMk1pSTZOU3dpTWpZeklqbzNMQ0l5TmpRaU9qSXhPQ3dpTWpZMUlqb3hNak1zSWpJMk5pSTZNakk0TENJeU5qY2lPakUwTUN3aU1qWTRJam8yT0N3aU1qWTVJam94TkRFc0lqSTNNQ0k2TVRjeExDSXlOekVpT2pnMExDSXlOeklpT2pFNU1pd2lNamN6SWpvd0xDSXlOelFpT2pJeExDSXlOelVpT2pZeExDSXlOellpT2pFeUxDSXlOemNpT2pJNExDSXlOemdpT2pJc0lqSTNPU0k2TVRVc0lqSTRNQ0k2TVRVM0xDSXlPREVpT2pVeUxDSXlPRElpT2pJd09Dd2lNamd6SWpveE16a3NJakk0TkNJNk1qZ3NJakk0TlNJNk5qQXNJakk0TmlJNk5ERXNJakk0TnlJNk1qUXNJakk0T0NJNk1qSTNMQ0l5T0RraU9qSXNJakk1TUNJNk15d2lNamt4SWpveExDSXlPVElpT2pBc0lqSTVNeUk2TVgwPSIsImlzcyI6Imh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSIsImlhdCI6IjE1MTA2MzI5OTkiLCJleHAiOiIxNTEwNjM2NTk5IiwiYWxnIjoiUlMyNTYiLCJraWQiOiIzY2U0YTk3ZDUwMmFmMDU4ZWI2NmFjOGQ3MzBhNTkyYWI3Y2VhN2YxIn19\",\n    expires: \"1510636599\" }\n  //keyPair:{ public: new Uint8Array([48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,150,9,88,160,249,140,239,100,34,251,142,199,20,137,202,18,183,158,237,254,68,236,125,69,14,88,128,124,200,209,194,144,203,15,203,200,32,214,251,81,188,162,105,79,87,68,141,60,88,84,65,46,100,228,88,202,32,172,109,50,206,214,244,105,59,110,16,197,203,6,10,43,7,35,248,146,150,193,244,166,139,182,78,151,18,4,64,55,215,111,199,98,8,3,42,109,195,70,60,139,194,111,163,192,62,17,203,117,45,142,19,166,90,171,99,170,154,37,208,147,13,196,56,186,180,194,220,122,46,222,176,70,59,13,223,91,108,177,214,72,30,222,42,224,201,52,211,246,184,21,96,149,99,101,147,173,248,166,31,169,93,214,124,28,61,59,38,100,51,48,99,191,197,58,180,154,167,121,205,236,21,187,233,253,66,66,182,235,212,32,136,71,187,228,233,74,118,120,69,190,73,141,42,98,39,153,92,78,26,219,198,168,177,65,221,202,163,128,49,111,110,15,68,221,228,37,27,82,198,5,7,218,123,228,140,68,141,171,84,192,0,21,61,12,28,2,15,157,52,208,139,28,60,41,24,227,2,3,1,0,1]),\n  //private: { new Uint8Array([48,130,4,188,2,1,0,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,4,130,4,166,48,130,4,162,2,1,0,2,130,1,1,0,150,9,88,160,249,140,239,100,34,251,142,199,20,137,202,18,183,158,237,254,68,236,125,69,14,88,128,124,200,209,194,144,203,15,203,200,32,214,251,81,188,162,105,79,87,68,141,60,88,84,65,46,100,228,88,202,32,172,109,50,206,214,244,105,59,110,16,197,203,6,10,43,7,35,248,146,150,193,244,166,139,182,78,151,18,4,64,55,215,111,199,98,8,3,42,109,195,70,60,139,194,111,163,192,62,17,203,117,45,142,19,166,90,171,99,170,154,37,208,147,13,196,56,186,180,194,220,122,46,222,176,70,59,13,223,91,108,177,214,72,30,222,42,224,201,52,211,246,184,21,96,149,99,101,147,173,248,166,31,169,93,214,124,28,61,59,38,100,51,48,99,191,197,58,180,154,167,121,205,236,21,187,233,253,66,66,182,235,212,32,136,71,187,228,233,74,118,120,69,190,73,141,42,98,39,153,92,78,26,219,198,168,177,65,221,202,163,128,49,111,110,15,68,221,228,37,27,82,198,5,7,218,123,228,140,68,141,171,84,192,0,21,61,12,28,2,15,157,52,208,139,28,60,41,24,227,2,3,1,0,1,2,130,1,0,1,17,2,240,195,80,0,78,241,104,12,2,151,234,71,123,66,62,137,30,221,101,141,153,186,142,224,38,237,148,126,199,97,178,31,54,219,200,230,19,106,211,0,10,246,42,0,190,84,229,187,21,139,43,182,87,218,203,68,76,26,167,240,210,120,170,43,200,174,204,149,176,234,240,62,4,62,15,21,223,237,217,76,184,181,44,232,228,156,184,62,46,17,9,131,99,220,1,249,76,136,89,113,33,92,218,63,220,121,135,150,43,43,95,124,42,10,112,202,9,62,226,163,86,151,18,0,45,132,7,215,181,143,60,203,121,77,78,249,133,16,173,121,117,141,188,24,75,232,178,87,95,115,146,170,103,219,204,121,21,246,221,184,9,84,253,91,32,213,65,163,165,22,39,63,36,85,168,196,75,87,45,200,113,55,26,221,194,162,166,48,229,102,218,210,86,97,156,85,122,73,126,51,98,8,247,41,191,153,162,208,183,114,95,133,34,7,92,135,41,97,172,68,59,23,206,27,80,120,9,33,0,232,237,57,207,206,238,120,18,40,243,159,139,99,106,69,206,245,153,180,186,92,232,250,149,2,129,129,0,206,187,21,82,195,220,105,190,62,43,139,140,107,77,76,80,177,30,16,20,186,254,242,81,255,204,19,78,18,131,230,62,45,139,91,138,173,186,88,82,228,29,54,15,111,134,10,218,238,123,190,23,28,158,248,7,171,15,209,85,39,237,104,57,233,189,168,236,63,217,231,32,111,234,216,27,217,162,137,41,43,124,167,152,1,166,238,238,150,233,245,150,77,148,224,144,205,46,63,100,240,215,215,132,194,151,85,22,183,146,186,5,24,155,159,41,195,93,6,90,57,142,183,103,125,59,121,173,2,129,129,0,185,203,69,46,216,186,46,147,175,38,172,42,83,236,5,27,146,236,134,37,197,67,22,232,25,252,157,171,183,108,51,221,180,139,28,177,154,123,132,246,254,101,193,218,54,50,182,252,48,236,34,164,19,225,181,200,198,176,186,20,216,66,101,110,9,183,243,245,211,172,38,197,64,57,85,89,206,45,5,119,133,231,102,92,238,210,111,62,178,109,212,55,48,249,147,23,31,71,241,175,185,94,207,104,184,196,227,20,37,254,198,42,92,1,255,225,162,190,236,236,122,28,235,6,47,219,78,207,2,129,128,1,136,117,162,5,125,206,242,240,55,22,115,214,31,222,159,2,145,60,129,74,217,181,38,82,133,74,231,91,79,203,23,78,243,39,156,161,169,46,26,127,66,144,50,17,27,167,92,244,67,202,167,21,57,64,145,157,253,34,10,69,159,135,20,86,221,103,49,73,79,238,92,217,55,158,158,166,64,132,79,223,216,174,205,123,197,167,35,241,206,142,89,172,253,155,164,183,64,206,139,139,21,174,173,119,91,243,239,149,48,235,92,58,80,125,31,172,41,54,112,216,216,108,23,194,95,252,137,2,129,128,123,138,152,116,48,20,141,8,18,189,74,89,210,247,235,229,139,234,206,192,170,204,147,156,190,58,229,180,219,0,141,244,108,42,220,103,148,107,113,220,179,8,130,192,80,173,164,83,73,76,155,52,51,44,48,174,82,192,12,219,243,121,34,236,234,117,113,57,19,9,51,182,145,160,14,10,235,55,176,156,235,99,21,3,210,162,6,234,207,198,140,8,46,254,165,58,8,200,212,2,158,230,86,80,50,28,105,74,106,129,96,207,165,226,134,125,72,180,95,226,86,200,135,214,211,87,166,173,2,129,128,89,67,208,155,234,36,112,154,120,64,51,0,63,74,27,77,35,197,44,97,136,216,144,43,8,204,63,206,55,195,98,43,200,249,255,165,242,242,88,248,56,216,246,126,248,99,9,224,159,141,111,176,18,118,224,125,136,143,252,126,254,49,136,86,165,234,154,144,238,162,86,193,194,70,227,58,3,11,64,235,179,159,229,26,247,8,62,107,66,168,177,71,61,155,61,245,37,33,9,146,217,216,168,99,106,43,246,124,208,41,127,46,188,252,139,240,105,59,108,18,232,10,73,147,57,48,13,210]);\n  //}\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvRmFrZU5vZGVqc1Byb3h5U3R1Yi5pZHAuanM/MTU2ZiJdLCJuYW1lcyI6WyJhY3RpdmF0ZSIsImlkZW50aXRpZXMiLCJuSWRlbnRpdHkiLCJidG9hIiwicmVxdWlyZSIsImF0b2IiLCJnb29nbGVJbmZvIiwiY2xpZW50U2VjcmV0IiwiY2xpZW50SUQiLCJyZWRpcmVjdFVSSSIsImlzc3VlciIsInRva2VuRW5kcG9pbnQiLCJqd2tzVXJpIiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidXNlcmluZm8iLCJ0b2tlbkluZm8iLCJhY2Nlc3NUeXBlIiwidHlwZSIsInNjb3BlIiwic3RhdGUiLCJpZHAiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsIm9yaWdpbiIsImNvbnNvbGUiLCJsb2ciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRlY29kZWRDb250ZW50IiwiY29udGVudCIsIkpTT04iLCJwYXJzZSIsImlkVG9rZW5TcGxpdGVkIiwidG9rZW5JRCIsInNwbGl0IiwiaWRUb2tlbiIsImlkZW50aXR5IiwiZW1haWwiLCJjb250ZW50cyIsIm5vbmNlIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwiZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UiLCJOb2RlanNQcm94eVN0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiX3RoaXMiLCJtZXNzYWdlQnVzIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwicGFyYW1zIiwiYm9keSIsIm1ldGhvZCIsInVzZXJuYW1lSGludCIsInRoZW4iLCJ2YWx1ZSIsInJlcGx5TWVzc2FnZSIsImVycm9yIiwibWVzc2FnZSIsImlkIiwiZnJvbSIsImNvZGUiLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsIl9zdGF0ZSIsImRlc2MiLCJ1cmwiLCJuYW1lIiwiaW5zdGFuY2UiLCJkb21haW4iLCJwcm90b2NvbCIsImluZm8iLCJhY2Nlc3NUb2tlbiIsInRva2VuVHlwZSIsImluZm9Ub2tlbiIsInN1YiIsImdpdmVuX25hbWUiLCJmYW1pbHlfbmFtZSIsInBpY3R1cmUiLCJlbWFpbF92ZXJpZmllZCIsImxvY2FsZSIsInRva2VuSURKU09OIiwiYXpwIiwiYXVkIiwiYXRfaGFzaCIsImlzcyIsImlhdCIsImV4cCIsImFsZyIsImtpZCIsImV4cGlyZXMiLCJtZXNzYWdlSW5mbyIsInVzZXJQcm9maWxlIiwidXNlcm5hbWUiLCJjbiIsImF2YXRhciIsInVzZXJVUkwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQXFMd0JBLFE7Ozs7QUFyTHhCLElBQUlDLGFBQWEsRUFBakI7QUFDQSxJQUFJQyxZQUFZLENBQWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsT0FBTyxtQkFBQUMsQ0FBUSxDQUFSLENBQVg7QUFDQSxJQUFJQyxPQUFPLG1CQUFBRCxDQUFRLENBQVIsQ0FBWDs7QUFFQSxJQUFJRSxhQUFhO0FBQ2ZDLGdCQUF1QiwwQkFEUjtBQUVmQyxZQUF1QiwwRUFGUjtBQUdmQyxlQUF1QixtQkFIUjtBQUlmQyxVQUF1Qiw2QkFKUjtBQUtmQyxpQkFBdUIsNkNBTFI7QUFNZkMsV0FBdUIsNkNBTlI7QUFPZkMseUJBQXVCLCtDQVBSO0FBUWZDLFlBQXVCLDZEQVJSO0FBU2ZDLGFBQXVCLDBEQVRSO0FBVWZDLGNBQXVCLFNBVlI7QUFXZkMsUUFBdUIsTUFYUjtBQVlmQyxTQUF1QiwwQkFaUjtBQWFmQyxTQUF1QjtBQWJSLENBQWpCOztBQWtCQSxJQUFJQyxNQUFNOztBQUVSOzs7Ozs7OztBQVFBQyxxQkFBbUIsMkJBQUNDLFNBQUQsRUFBWUMsTUFBWixFQUF1QjtBQUN4Q0MsWUFBUUMsR0FBUixDQUFZLDRDQUFaLEVBQTBESCxTQUExRDs7QUFFQTtBQUNBLFdBQU8sSUFBSUksT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBaUJDLE1BQWpCLEVBQXlC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ZGVudGl0eSA9IDA7XG4vL2ltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbi8vbGV0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XG4vL2NvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbmxldCBidG9hID0gcmVxdWlyZSgnYnRvYScpO1xubGV0IGF0b2IgPSByZXF1aXJlKCdhdG9iJyk7XG5cbmxldCBnb29nbGVJbmZvID0ge1xuICBjbGllbnRTZWNyZXQ6ICAgICAgICAgICdYeDRyS3VjYjVaWVRhWGxjWlg5SExmWlcnLFxuICBjbGllbnRJRDogICAgICAgICAgICAgICc4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nLFxuICByZWRpcmVjdFVSSTogICAgICAgICAgICdodHRwczovL2xvY2FsaG9zdCcsXG4gIGlzc3VlcjogICAgICAgICAgICAgICAgJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsXG4gIHRva2VuRW5kcG9pbnQ6ICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8nLFxuICBqd2tzVXJpOiAgICAgICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvY2VydHM/JyxcbiAgYXV0aG9yaXNhdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3YyL2F1dGg/JyxcbiAgdXNlcmluZm86ICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nLFxuICB0b2tlbkluZm86ICAgICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW5pbmZvP2lkX3Rva2VuPScsXG4gIGFjY2Vzc1R5cGU6ICAgICAgICAgICAgJ29mZmxpbmUnLFxuICB0eXBlOiAgICAgICAgICAgICAgICAgICdjb2RlJyxcbiAgc2NvcGU6ICAgICAgICAgICAgICAgICAnb3BlbmlkJTIwZW1haWwlMjBwcm9maWxlJyxcbiAgc3RhdGU6ICAgICAgICAgICAgICAgICAnc3RhdGUnXG59O1xuXG5cblxubGV0IGlkcCA9IHtcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byB2YWxpZGF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb24gcmVjZWl2ZWRcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHthc3NlcnRpb259ICAgIElkZW50aXR5IEFzc2VydGlvbiB0byBiZSB2YWxpZGF0ZWRcbiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBpZGVudGl0eSBhc3NlcnRpb24gdmFsaWRhdGlvbiByZXN1bHRcbiAgKi9cbiAgdmFsaWRhdGVBc3NlcnRpb246IChhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xuICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZUFzc2VydGlvblByb3h5Tk9ERUpTRkFLRTphc3NlcnRpb24nLCBhc3NlcnRpb24pO1xuXG4gICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZFxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuICAgICAgbGV0IGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pO1xuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcbiAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IGNvbnRlbnQudG9rZW5JRC5zcGxpdCgnLicpO1xuICAgICAgbGV0IGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcblxuICAgICAgcmVzb2x2ZSh7aWRlbnRpdHk6IGlkVG9rZW4uZW1haWwsIGNvbnRlbnRzOiBpZFRva2VuLm5vbmNlfSk7XG5cbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byBnZW5lcmF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb25cbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb25cbiAgKlxuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG4gIGdlbmVyYXRlQXNzZXJ0aW9uOiAoY29udGVudHMsIG9yaWdpbiwgaGludCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbkZBS0U6Y29udGVudHNdJywgY29udGVudHMpO1xuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbkZBS0U6b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRTpoaW50XScsIGhpbnQpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBjb25zb2xlLmxvZygnZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2U6Jyk7XG4gICAgICByZXR1cm4gcmVzb2x2ZShnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSk7XG5cbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxuKi9cbmNsYXNzIE5vZGVqc1Byb3h5U3R1YiB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgIGNvbnNvbGUubG9nKCdGQUtFIE5PREVKUyBjb25zdHJ1Y3RvcicpO1xuICAgbGV0IF90aGlzID0gdGhpcztcbiAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1cztcbiAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xuXG4gICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcbiAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9ub2RlanMtaWRwJykge1xuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcbiAgICAgfVxuICAgfSk7XG5cbiAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gfVxuXG4gLyoqXG4gKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xuICovXG4gcmVxdWVzdFRvSWRwKG1zZykge1xuICAgbGV0IF90aGlzID0gdGhpcztcbiAgIGxldCBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7XG5cbiAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XG4gICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICBpZHAuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKFxuICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgKTtcbiAgICAgICBicmVhaztcbiAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuICAgICAgIGlkcC52YWxpZGF0ZUFzc2VydGlvbihwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKFxuICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgKTtcbiAgICAgICBicmVhaztcbiAgICAgZGVmYXVsdDpcbiAgICAgICBicmVhaztcbiAgIH1cbiB9XG5cblxuICAvKipcbiAgKiBUaGlzIGZ1bmN0aW9uIHJlY2VpdmVzIGEgbWVzc2FnZSBhbmQgYSB2YWx1ZS4gSXQgcmVwbGllcyB0aGUgdmFsdWUgdG8gdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSByZWNlaXZlZFxuICAqXG4gICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXG4gICogQHBhcmFtICB7dmFsdWV9ICAgICB2YWx1ZSB0byBpbmNsdWRlIGluIHRoZSBuZXcgbWVzc2FnZSB0byBzZW5kXG4gICovXG4gIHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBtZXNzYWdlID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgICAgICAgICAgICAgIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZX19O1xuXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgfVxuXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgY29uc29sZS5sb2coJ1tOb2RlSlMuc2VuZFN0YXR1c10gJywgdmFsdWUpO1xuXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICBsZXQgbXNnID0ge1xuICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVhc29uKSB7XG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuICAgIH1cblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgfVxufVxuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdOb2RlanNQcm94eVN0dWInLFxuICAgIGluc3RhbmNlOiBuZXcgTm9kZWpzUHJveHlTdHViKHVybCwgYnVzLCBjb25maWcpXG4gIH07XG59XG5cblxubGV0IGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlID1cbnthc3NlcnRpb246XCJleUowYjJ0bGJrbEVJam9pWlhsS2FHSkhZMmxQYVVwVFZYcEpNVTVwU1hOSmJYUndXa05KTmtscVRtcGFWRkpvVDFSa2EwNVVRWGxaVjFsM1RsUm9iRmxxV1RKWlYwMDBXa1JqZWsxSFJURlBWRXBvV1dwa2FscFhSVE5hYWtWcFpsRXVaWGxLYUdWdVFXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LYUdSWFVXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LZW1SWFNXbFBhVWw0VFVSTmVFNVVVVEJQVkVVelRWUkZlVTU2VlhoTmFsbDZUa1JKYVV4RFNteGlWMFp3WWtOSk5rbHVVbXhqTTFKb1ltMVNNR0ZIYkhWaGVrMTVUVlZDYm1KWFJuQmlRelZxWWpJd2FVeERTbXhpVjBad1lrWTVNbHBZU25CYWJXeHNXa05KTm1SSVNqRmFVM2RwV1ZoU1ptRkhSbnBoUTBrMlNXcEplVkp1U1RWaFdGcHZUbGRLTldWSFZYUmhNV1JQVDBkc2RtRXhSV2xNUTBwMVlqSTFhbHBUU1RaSmJWWTFVMWhrU21GdE9IZFVNRTR6WVZVeFZGTlVXazVXUlRFelZFVk9TbVZWYkhGaU0yaE5VVEJzTmxOWGNIWmxhelZFWkRKc1QxRXdhekpVYTFKdVl6QnNjVlpYYkZCaGExWTJWRVZPU2sxcmJIRmlla3BOVVRCcmVsTlhjSFpPVlhoRVUxUlNTbUZ0T0hkVVYyd3pZVlU1VkZOVVdrNVdSVEIzVkVWT1NtVkZNVVJUVkZwUFpXdHNlbE5YY0VabFJXeHhZak5vVG1Wc1JucFRWM0JHWlZWc2NXSXpiRTlTUjA1NlUxZHdSbVZyYkhGaU0yaE9aVmhrY0ZSV1VsSmhWVGx4VWxoT1NtRnJWWGhUVjNCMlpVVjRSRk5ZYUU5aFZXc3lWRlpPTTJGVk1WVlpNbXhRWVd4V2VsTlhjRVpPUld4eFlqTmtUVkV3YkRSVU1VNUtUbXN4TldReWJFNWhhMFp3VkRKd1JtVnJNVVJrTW14T1lXdFdjRlF5Y0Vaak1HeHhVMWhzU21GdE9UUlViRTR6WVZVeGNWUlhiRkJoYTBaNlUxZHdTazFGYkhGaWVrSlFVVE5rY0ZSWGNGWmhWVGx4VWxod1RsRXpaSEJVVjNCYVlWVTVjVkpZVGtwaGEydDZVMWR3ZG1WRk1VUmtNbXhPWVcxa2NGUXljRXBqTUd4eFUxUldTbUZ0T1RSVVdIQkNZekJzY1ZSWVpFcGhiVGswVkVWT1NtVnJNVlJUVkZwT1ZUTmtjRlJZY0VwaFZUbHhVVmhPU21Gck1UWlRWM0IyWlVVMVZWRllUa3BoYXpCM1UxZHdkazVWZUVSVFdIQlBWVEJyTWxRd1VtNWpNR3h4VkZSS1NtRnRPVFJVYlhCQ1l6QnNjVlJVVGtwaGJUazFWR3RTY21Nd2JIRlVWRkpLWVcwNU5GUnJVa0pqTUd4eFZGUldTbUZ0T1RWVVdIQnlZekJzY1ZWWVpFcGhiVGswVkZWU1FtTXdiSEZWV0doS1lXMDVObFJyVGpOaFZUVkZVMWRzVUdGcmEzaFVWazR6WVZVMVJWUlhiRkJoYTFWM1ZGZHNNMkZWTlVWVlYyeFFZV3RWTVZReFRqTmhWVFZGVmxkc1VHRnJiRE5VUlU1S1RVVTFjRk5VV2s1V1JUQjZWRVZPU2sxRk5UVlRWRnBPWVd0R05WUkZUa3BOUlRsRVUxUmFUbFpIWkhwVFYzQlNUbFZzY1dJemFGQlNSVEY2VTFkd1ZtUXdiSEZpTTJoUFZrZGtlbE5YY0ZabFJXeHhZak5zVG1WdFRucFRWM0JXWlZWc2NXSXpiRTlXUmtaNlUxZHdWbVZyYkhGaWVrcFFVVE5rY0ZSc1VsSmhWVGx4VTFod1QyRllaSEJVYkZKV1lWVTVjVkpZYkU5Vk0yUndWR3hTV21GVk9YRlhWRlpOVVRCcmVGUnViRXBPYXpGVlZWaE9TbUZzVlRCVFYzQjJUa1U1UkdReWJFOVdSM1J3VkRKd1JtVlZPVVJrTW14UFlXdEdjRlF5Y0VabFZUVkVaREpzVDJGclZuQlVNbkJLWkRBeFJHUXliRTloYTJ4d1ZESndTbVF3T1ZSa01teFBZV3N4Y0ZReWNFWk9WVFZFWkRKc1QyRnNSbkJVTW5CR1RVVTFSR1F5YkU5aGJGWndWREp3U21Rd01UVmtNbXhQWVd4c2NGUXljRVpOVlhoRVUxUktUMlZWYXpKVVYzQkNaV3Q0UkZOVVNsQlJNR3N5VkZkd1FtUXdlRVJUVkVwUVZUQnJNbFJZY0Vwak1HeHhXVE5rU21GdE9UVlVWbEpTWXpCc2NWa3phRXBoYlRrMVZHeFNSbU13YkhGWk0yeEtZVzA0TUZSV1RqTmhWVFUyVkZkc1VHRnJWVEJVTUU0ellWVTFObFZYYkZCaGExVjVWRmRzTTJGVk5UWldWMnhRWVd0V00xUnNUak5oVlRVMlYxZHNVR0Z0VFRGVVJVNUtUVEExTlZOVVdsQlNSMDU2VTFkd2FrNUZiSEZpZWtwUVVUTmtjRlJ1Y0hKaFZUbHhVbFJDVGxVelpIQlVNRkpDWVZVNWNWZFlaRTFSTUdzd1ZGWk9TazVyT1VWYU0wNUtZVzFrTlZOWGNIWk9SVFZFWkRKc1VGSkZNWEJVTW5CYVRWVjRSRk5VVWs5Uk1Hc3lWR3RTV21Nd2JIRmFla1pLWVcwNU5GUlZVa0pqTUd4eFducEtTbUZ0T1RWVVYzQnVZekJzY1ZwNlRrcGhiVGd3VkRCT00yRlZPVVZhTW14UVlXdHNNMVJYYkROaFZUbEZZVEpzVUdGck1UVlVSVTVLVGxVeFJGTlVXazVXUjA0MVZFVk9TazVWTVZSVFZGcE9Wa1ZGTVZSRlRrcE9WVEZ3VTFSYVQxWkZSbnBUVjNCeVpXdHNjV0l6YkU1U1JteDZVMWR3Y2sxRmJIRmlNMnhPVmtaR2VsTlhjSEpOVld4eFlqTnNUMUpHUm5wVFYzQnlUV3RzY1dJemFFNVNSbFo2VTFkd2NrMHdiSEZpZWtaUVZUTmtjRlF4VW01aFZUbHhVbGhvVGxFelpIQlVNVkp5WVZVNWNWSlVTazFSTUd3MFZGVlNRbUZWT1hGU1ZGWlBaVmhrY0ZSV1VrSmxSV3h4WWpOc1RsSkZNWHBUVjNCR1pEQXhjRk5VV2s5aFdHUndWRlpTUW1WcmJIRmlNMmhPVVROa2NGUldVa0pOUld4eFlucENUbVZZWkhCVVZsSkNUVlZzY1dKNlRrMVJNR3cwVkZWU1dtRlZPWEZVVkVaTlVUQnNORlJWVW1waFZUbHhVMVJDVUZFelpIQlVWbEpDVGtWc2NXSXphRTlTUm14NlUxZHdSbVF3T1ZSVFZGcE9Wa1pXTTFSRlRrcGxSVEZWVVZkc1VHRnJWVEZVV0d3ellWVXhWVkpZYUVwaGJUazFWR3RTVW1Nd2JIRlNXR2hPWVZWck1sUldVbHBOYTNoRVUxaG9UbFpGTVhCVU1uQkdaV3M1VkdReWJFNVdSVlYzVTFkd2RtVkZPVVZUV0U1S1lXdFdORlJzVGtwT2F6VTJXak5PU21GclZqUlViV3hLVG1zeFZWWllhRTFSTUd3MFZGWlNhbUZWT1hGU1ZGSk5VVEJzTkZSV1VtNWhWVGx4VlZoT1NtRnJWalJVTVU1S1RtczFjVlZZVGtwaGExWTFWRlZPU2s1ck5WVldXRTVLWVd0V05WUldUa3BPYXpGeFVsUkdUVkV3YkRSVVYzQktZVlU1Y1ZKWWFFNVZNMlJ3VkZaU1NtVnJiSEZpTTJoUVZrZDBlbE5YY0VabFZUVkVVMVJhVUZaSFpIcFRWM0JHWlZVMVZGTlVXbEJSTTJSd1ZGWlNTazFyYkhGaU0zQk5VVEJzTkZSWGNHcGhWVGx4VlZoc1RWRXdiRFJVVjNCdVlWVTVjVkpZWkZCVk0yUndWRlpTU2s1VmJIRmlNMmhRVmtaV2VsTlhjRVpsYXpGRVUxUmFUMlZyUm5wVFYzQkdaV3N4VkZOVVdrOWhhMFo2VTFkd1JtVnJNWEJUVkZwT1ZrVXdNVlJGVGtwbFJURTJWRmRzVUdGclZURlVhMDR6WVZVeFZWUlVRa3BoYlRrMFZGWlNSbU13YkhGU1dIQlBWVEJyTWxSV1VscGxhM2hFVTFob1RtVnNiSEJVTW5CR1RsVXhjR1F5YkU1V1JUQjZVMWR3ZGsxck1YQmtNbXhPVmtVd01GTlhjSFpsUlRVMVpESnNUbFpGTURGVFYzQjJaVlV4UlZSWVRrcGhhMVYzVkZWT1NrNXJNVlZTVkU1TlVUQnNORlJyVWtaaFZUbHhWVlJHVFZFd2JEUlVhMUpLWVZVNWNWSlVRazVoV0dSd1ZGWlNVbVZyYkhGaU0yaFFWVE5rY0ZSV1VsSk5SV3h4WWpOb1QyRnNiSHBUVjNCR1RVVTFWRk5VV2xCV1JVWjZVMWR3UmsxRk5YQlRWRnBPVmtkT05GUkZUa3BsUlRWRldUSnNVR0Z0Y3pGVVJVNUtaVVUxUlZveWJGQmhhMVY2VkZWT00yRlZNVlZWVkZaS1lXMDVORlJzVWxKak1HeHhVbFJHVGxFd2F6SlVXSEJxWXpCc2NWSlVSazVWTUdzeVZGZHdRazVGZUVSVFdHaFBWa1ZzY0ZReWNFWk5SVFUxWkRKc1RsWkdWalpUVjNCMlpVVXhOV1F5YkU1V1JsVjNVMWR3ZG1WRk9WVlhXRTVLWVd0VmVGUnNUa3BPYXpWVlYxaE9TbUZyVlhoVWJXeEtUbXN4VlZwNlNrMVJNR3cwVkd4U2FtRlZPWEZTVkZKT1VUTmtjRlJXVWxaT1JXeHhZak5vVUZaR1JucFRWM0JHVFZVNVZGTlVXazVoYTJ3elZFVk9TbVZGTlhGUlYyeFFZV3RXTlZSWGJETmhWVEZWVjFob1NtRnRPSGRVYld3ellWVXhWVmRZYkVwaGJUazFWRmR3U21Nd2JIRlNWRXBPWlZWck1sUldVbXBOYTNoRVUxaG9UMkZzUm5CVU1uQnFaREI0UkZOWWFFOWhiRlp3VkRKd1ZrNVZlRVJUV0doUFlXeHNjRlF5Y0VabGEzaEVVMWhvVDJGdFRuQlVNbkJLWlZVeE5XUXliRTVXUm1zd1UxZHdkazVWTVZSa01teE9Wa1pyTVZOWGNIWmxSVEZGV2pOT1NtRnJWWHBVVlU1S1Rtc3hWVmw2VGsxUk1HdzBWRzV3Um1GVk9YRlRXR2hQVVROa2NGUldVbXBsVld4eFlucE9UbUZZWkhCVVZsSnFaV3RzY1dJemNFNVJNMlJ3VkZaU2FrMUZiSEZpTTJ4T1lXdHNlbE5YY0VaTk1EVlVVMVJhVDFKRmJIcFRWM0JHVFRBMWNGTlVXazVoYTJ0M1ZFVk9TbVZGTlRaWk1teFFZV3RzTTFSV1RqTmhWVEZWV1hwU1NtRnRPSGhVVjJ3ellWVXhWVmw2VmtwaGJUazFWRlpTUm1Nd2JIRlNWRkpPVVRCck1sUlhjRkpOYTNoRVUxaG9VRkpGVm5CVU1uQkdUa1UxUkdReWJFNVdSMlExVTFkd2RtVlZNVlJrTW14T1ZrZGtObE5YY0haT1ZUVndaREpzVGxaSFkzZFRWM0IyWlVVMVJXRXpUa3BoYTFVd1ZHeE9TazVyT1ZWaE0wNUtZV3RWTUZSdGJFcE9hekZWVVZob1RWRXdiRFJVTUZKcVlWVTVjVkpVUWs5bFdHUndWRlpTYms1RmJIRmlNMmhQWldzeGVsTlhjRVpPUlRsVVUxUmFUbUZzUlRCVVJVNUtaVVU1VlZGWGJGQmhhMVY1Vkcxc00yRlZNVlZoTTJoS1lXMDVObFJXVGpOaFZURlZZVE5zU21GdE9UUlViWEJ5WXpCc2NWSlVWazVsVldzeVZERlNUbU13YkhGU1ZGWlBVVEJyTWxSWGNFWk5SWGhFVTFob1VGWkdWbkJVTW5CR1pWVTFSR1F5YkU1V1IzTjVVMWR3ZG1WVk9VUmtNbXhPVmtkemVsTlhjSFpOYXpGVVpESnNUbFpIY3pCVFYzQjJUVlU1VkdReWJFNVdSM014VTFkd2RtVnJPVVJrTW14T1lXdEdNMU5YY0habFJURkZVVmhPU21GcmJETlVWazVLVG1zMVZWSllUa3BoYTJ3elZGZHNTazVyTlVWYU0wNUtZV3RzTTFSWWJFcE9hemxWWVROT1NtRnJiRE5VYTA1S1Rtc3hWV0V6YUUxUk1HdzFWRlZTVm1GVk9YRlNWRlpQWlZoa2NGUlhjRUpOYTJ4eFlucEdVRkV6WkhCVVYzQkNUVEJzY1dJemFGQlNSVVo2VTFkd1NtUXdPVVJUVkZwT1ZrWlZkMVJGVGtwbFZURkZZVEpzVUdGclZYbFVibXd6WVZVeGNWSllaRXBoYlRrMFZGZHdSbU13YkhGVFdHaE9WVEJyTWxSWGNFSk5WWGhFVTFoc1RsWkZiSEJVTW5CS1pXczFjR1F5YkU1aGExWTJVMWR3ZG1WVk1WUmtNbXhPWVd0VmQxTlhjSFpsUlRsRldUTk9TbUZyYkRSVWJFNUtUbXN4Y1ZSWWNFMVJNR3cxVkZaU1dtRlZPWEZUVkVaT1pWaGtjRlJYY0VaTk1HeHhZbnBLVDJGWVpIQlVWM0JHVGtWc2NXSjZTazloV0dSd1ZGZHdSazVWYkhGaU0yaFFVa1ZzZWxOWGNFcGxWVEZFVTFSYVRtRnJNSGhVUlU1S1pWVXhjVkpYYkZCaGEydzBWRmRzTTJGVk1YRlRXR3hLWVcwNU5sUlhiRE5oVlRGeFUxaHdTbUZ0T1RSVVdIQmFZekJzY1ZOWWJFOVJNR3N5Vkc1d1JtTXdiSEZUV0d4UFZUQnJNbFJXVW01Tk1IaEVVMWhzVG1Gc2JIQlVNbkJLWlZVNVJHUXliRTVoYTJ0NlUxZHdkbVZWTVRaVVdFNUtZV3RzTlZRd1RrcE9helUyVlZoT1NtRnJiRFZVTVU1S1Rtc3hWVkpVVWsxUk1HdzFWRmh3UW1GVk9YRlNXR3hPVVROa2NGUlhjRTVsUld4eFlucEtVRlV6WkhCVVYzQk9aVlZzY1dJemFGQldSVVo2VTFkd1NtVnJNVFZUVkZwUFpXc3hlbE5YY0VwbGF6VkVVMVJhVGxaR1JqUlVSVTVLWlZVeE5sWlhiRkJoYkVZMVZFVk9TbVZWTVRaWFYyeFFZVzF6TUZSRlRrcGxWVEUyV1RKc1VHRnJNREZVUlU1S1pWVXhObG95YkZCaGExVjRWRmhzTTJGVk1YRlVWRlpLWVcwNE1WUlhiRE5oVlRGeFZWaGtTbUZ0T0hwVU1FNHpZVlV4Y1ZWWWFFcGhiVGsxVkcxc00yRlZNWEZWV0d4S1lXMDVOVlJXVW5Kak1HeHhVMVJDVG1WVmF6SlVWbEp5VGtWNFJGTlliRTlTUmtad1ZESndSazFyT1VSa01teE9ZV3hGZUZOWGNIWmxSVFUyV1ROT1NtRnJhM2RVYld4S1RtczFjVlpZVGtwaGEydDNWRzVzU2s1ck1YRlRXR2hOVVRCc05WUnJVbTVoVlRseFUxaGtUbUZZWkhCVVYzQlNUbFZzY1dJemFFOWhhekY2VTFkd1NrMVZNVVJUVkZwT1ZrVnJNRlJGVGtwbFZUVlZVbGRzVUdGc1JURlVSVTVLWlZVMVZWTlhiRkJoYTFZMFZGWk9NMkZWTVhGV1dIQktZVzA1TkZSV1VrSmpNR3h4VTFSR1QxRXdhekpVVmxKV1l6QnNjVk5VUms5Vk1Hc3lWRzF3Ym1Nd2JIRlRWRVpQWVZWck1sUlhjRXBsUlhoRVUxaHNUMVpIVG5CVU1uQktaVlU1UkdReWJFNWhiRlV3VTFkd2RtVnJOVFZrTW14T1lXeFZNVk5YY0habFZUVTFaREpzVG1Gc2JETlRWM0IyVGtVeGNHUXliRTVoYkd3MFUxZHdkbVZGT1ZWYU0wNUtZV3RyZVZSWGJFcE9helZVWkRKc1RtRnNiRFpUVjNCMlRUQjRSRk5ZYkU5aGJFWndWREp3U21WRk9VUmtNbXhPWVd4cmVGTlhjSFpsUlRGeFZGaE9TbUZyYTNsVWJXeEtUbXN4Y1ZOVVVrMVJNR3cxVkcxd2FtRlZPWEZTVkVKT1VUTmtjRlJYY0ZwT1JXeHhZbnBLVUZFelpIQlVWM0JhVGxWc2NXSXphRTlTUlZaNlUxZHdTazB3TVVSVFZGcE9Wa2RPTkZSRlRrcGxWVFUyVWxkc1VHRnRZM2RVUlU1S1pWVTFObE5YYkZCaGExVXhWRmRzTTJGVk1YRlpNM0JLWVcwNU0xUkZUa3BsVlRVMlZWZHNVR0ZyYkRSVVJVNUtaVlUxTmxaWGJGQmhiR3cwVkVWT1NtVlZOVFpYVjJ4UVlXdFdOVlJGVGtwbFZUVTJXVEpzVUdGcmF6QlVSVTVLWlZVMU5sb3liRkJoYTJ4NlUxZHdTazB3T1ZSVFZGcE9Wa1pXZWxOWGNFcE9SVEZFVTFSYVRsWkdWWHBVUlU1S1pWVTVSVkpYYkZCaGJGWTFWRVZPU21WVk9VVlRWMnhRWVd0c00xUXdUak5oVlRGeFdqTndTbUZ0T1RSVVdIQnlZekJzY1ZOVVVrOVJNR3N5VkZkd2JtTXdiSEZUVkZKUFZUQnJNbFJ0Y0VKak1HeHhVMVJTVDJGVmF6SlVhMUpHWXpCc2NWTlVVazlsVldzeVZGZHdVbU13YkhGVFZGSlFVVEJyTWxSWGNFcE5NSGhFVTFoc1VGSkhkSEJVTW5CS1l6QnNjVk5VVms1Uk1Hc3lWRmhzTTJGVk1YRmhNMmhLWVcwNU5GUkZUa3BsVlRsVlUxZHNVR0ZyUm5wVFYzQktUbFV4TlZOVVdrNVhSRUU1U1dsM2FXRllUbnBKYW05cFlVaFNNR05JVFRaTWVUbG9XVEpPZG1SWE5UQmplVFZ1WWpJNWJtSkhWWFZaTWpsMFNXbDNhV0ZYUmpCSmFtOTRUbFJGZDA1cVRYbFBWR3MxVEVOS2JHVklRV2xQYWtVeFRWUkJNazE2V1RGUFZHdzVMazloTkdoRk1YSjViR3RETVdObVR5MXRXazlJWWxRdFNGWnVTVWQ2UVVSRFdrMXFkRlJrZFU1UE5HOW9jV2RYU1ZKSlNsZERhSFppY2xwSFIwWlhja0V5UjNVeU1FVlZVa2x0Tkc1Q1YyMXhVMDFNY201bWFIcFlZVlpSTlc1NlFVbEhlR3BXWHpaUU9XRnRURkJJZUZGWmJYSkZjVTVGYWtOUE1FMHllakZWUVVJNVZGVndjRWhNY201Rk1YbHpTM1ZETTJOSWFEZFVOMnB0YXpkdk0zUmxXRlJxTVRCbVYxQlhVR3M1ZFhodFpXWXdYMDF3UmpBMVNIQlVORXBHYm1KRmVXVlpSMk01VG10SVN6ZDNSR1pOV0cxc05qUkdWM0JQYUd0bmNFbFhZbGN5WTBsNmFuSnpUamxDU1VkYWNWUnZMVXcyUVVNMlZFRmZVWFJ5WVZCNmRqUm9VRmd5YzI5Nk5uTTVUR1JtZWtKdGNGUTJaemxKZFVrNGRqbG5PR3hLUkZSVFpFcHRNMnRGZG5OWE5EWjNTM2gyY0hBeE9UZElkRFJEY1cxSlJ6Wm5TM3BwZEVOTlozQmpXVTV3TWtKUlZXVnBRU0lzSW5SdmEyVnVTVVJLVTA5T0lqcDdJbUY2Y0NJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbUYxWkNJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbk4xWWlJNklqRXdNekUxTkRRNU1UY3hNVEkzTlRFeU5qTTBNaUlzSW1WdFlXbHNJam9pZEdWemRHRnVaSFJvYVc1ck16SXhRR2R0WVdsc0xtTnZiU0lzSW1WdFlXbHNYM1psY21sbWFXVmtJam9pZEhKMVpTSXNJbUYwWDJoaGMyZ2lPaUl5TWtaeU9XbDJhRFZpZVhobExXdFhUamhwYjJ0Uklpd2libTl1WTJVaU9pSmxlVWwzU1dwdk1FOURkMmxOVTBrMlRWUk5kMHhEU1hsSmFtOTRURU5KZWtscWIzcE9RM2RwVGtOSk5rNUVaM05KYWxWcFQycEZla3hEU1RKSmFtOHlURU5KTTBscWJ6Vk1RMGswU1dwdk1FMXBkMmxQVTBrMlRWUk5NRXhEU1hoTlEwazJUbnBKYzBscVJYaEphbTk0VFhwUmMwbHFSWGxKYW05NVRrUmpjMGxxUlhwSmFtOTRUWGwzYVUxVVVXbFBha1Z6U1dwRk1VbHFiM2hNUTBsNFRtbEpOazFUZDJsTlZHTnBUMnBWYzBscVJUUkphbTkzVEVOSmVFOVRTVFpOZVhkcFRXcEJhVTlxUlhwTlEzZHBUV3BGYVU5cVJYTkpha2w1U1dwdmVFNVRkMmxOYWsxcFQycEJjMGxxU1RCSmFtOHdUME4zYVUxcVZXbFBha1Y2VFVOM2FVMXFXV2xQYWtWelNXcEpNMGxxYjNoTlEzZHBUV3BuYVU5cVNYTkpha2sxU1dwdmVFMTZRWE5KYWsxM1NXcHZlRXhEU1hwTlUwazJUVk4zYVUxNlNXbFBha0Z6U1dwTmVrbHFiM2hPVkVGelNXcE5NRWxxYnpWTVEwbDZUbE5KTms5RVozTkphazB5U1dwdmVFNXFRWE5KYWswelNXcHZlVTVFYTNOSmFrMDBTV3B2ZUU1RVFYTkphazAxU1dwdmVVMTZhM05KYWxGM1NXcHZlRTFFUVhOSmFsRjRTV3B2ZWs1RGQybE9SRWxwVDJwSk1VMVRkMmxPUkUxcFQycEZNRTFwZDJsT1JGRnBUMnBGTlU5VGQybE9SRlZwVDJwSmQweERTVEJPYVVrMlRWUk5NMHhEU1RCT2VVazJUV3BCZVV4RFNUQlBRMGsyVFZSbmMwbHFVVFZKYW05NFQwUk5jMGxxVlhkSmFtOTRUbFJuYzBscVZYaEphbTk1VFhwamMwbHFWWGxKYW05NVRsUlJjMGxxVlhwSmFtOHlUME4zYVU1VVVXbFBha2w2VG1sM2FVNVVWV2xQYWtWNVRsTjNhVTVVV1dsUGFsazFURU5KTVU1NVNUWk5WRkZ6U1dwVk5FbHFielJQUTNkcFRsUnJhVTlxUlhsUFEzZHBUbXBCYVU5cVJYbE9RM2RwVG1wRmFVOXFTWGROUTNkcFRtcEphVTlxU1hkUFUzZHBUbXBOYVU5cVJUVk9RM2RwVG1wUmFVOXFSVEJPUTNkcFRtcFZhVTlxU1hkTmVYZHBUbXBaYVU5cVJURk1RMGt5VG5sSk5rMXFRWHBNUTBreVQwTkpOazFxUVhkTVEwa3lUMU5KTmsxNlNYTkphbU4zU1dwdmVVMVVVWE5KYW1ONFNXcHZlVTVVUlhOSmFtTjVTV3B2TkUxVGQybE9lazFwVDJwRk5FOURkMmxPZWxGcFQycEZNazFwZDJsT2VsVnBUMnBGZDA1VGQybE9lbGxwVDJwak5VeERTVE5PZVVrMlQwUmpjMGxxWXpSSmFtOHlUME4zYVU1NmEybFBha1V3VFZOM2FVOUVRV2xQYWxsM1RFTkpORTFUU1RaUFJHZHpTV3BuZVVscWJ6Uk9RM2RwVDBSTmFVOXFXVEZNUTBrMFRrTkpOazVFV1hOSmFtY3hTV3B2ZUUxRVFYTkphbWN5U1dwdmVVMXFaM05KYW1jelNXcHZORTlEZDJsUFJHZHBUMnBKZDAxcGQybFBSR3RwVDJwTmVVeERTVFZOUTBrMlRWUmplVXhEU1RWTlUwazJUVlJCTlV4RFNUVk5hVWsyVGxSQmMwbHFhM3BKYW05NVRVUlpjMGxxYXpCSmFtOTVUVlJSYzBscWF6RkphbTk1VGtSUmMwbHFhekpKYW05NFRVUlZjMGxxYXpOSmFtOHhUMU4zYVU5VVoybFBha1Y0VFVOM2FVOVVhMmxQYWtVeVRFTkplRTFFUVdsUGFrVTFUbmwzYVUxVVFYaEphbTk1VFVSTmMwbHFSWGROYVVrMlRtbDNhVTFVUVhwSmFtOTRUVU4zYVUxVVFUQkphbTh3VFhsM2FVMVVRVEZKYW04elRFTkplRTFFV1dsUGFrMHhURU5KZUUxRVkybFBha2t3VDBOM2FVMVVRVFJKYW05NFRrUlpjMGxxUlhkUFUwazJUVlJWZDB4RFNYaE5WRUZwVDJwRk5VMTVkMmxOVkVWNFNXcHZlVTVFVVhOSmFrVjRUV2xKTmsxVVdUSk1RMGw0VFZSTmFVOXFSWHBQVTNkcFRWUkZNRWxxYjNoUFJFbHpTV3BGZUU1VFNUWk9lbWR6U1dwRmVFNXBTVFpOVkZWNFRFTkplRTFVWTJsUGFrVTBURU5KZUUxVVoybFBhbEZ6U1dwRmVFOVRTVFpPYWxGelNXcEZlVTFEU1RaT1ZGVnpTV3BGZVUxVFNUWk5ha1V4VEVOSmVFMXFTV2xQYWtWNFRWTjNhVTFVU1hwSmFtOTRUMVJyYzBscVJYbE9RMGsyVDFSbmMwbHFSWGxPVTBrMlQwTjNhVTFVU1RKSmFtOTZURU5KZUUxcVkybFBhbEY1VEVOSmVFMXFaMmxQYWtWM1QxTjNhVTFVU1RWSmFtOTRUMVJWYzBscVJYcE5RMGsyVG5wQmMwbHFSWHBOVTBrMlRtcEJjMGxxUlhwTmFVazJUVlJOTlV4RFNYaE5lazFwVDJwRk5VNURkMmxOVkUwd1NXcHZlRTFVUlhOSmFrVjZUbE5KTmsxVVdYcE1RMGw0VFhwWmFVOXFSVFZOYVhkcFRWUk5NMGxxYnpKTmFYZHBUVlJOTkVscWIzaE9lWGRwVFZSTk5VbHFiM2xOUkUxelNXcEZNRTFEU1RaTlZFVXpURU5KZUU1RVJXbFBhbEV4VEVOSmVFNUVTV2xQYWtVd1RXbDNhVTFVVVhwSmFtOTRUMU4zYVUxVVVUQkphbTk0VG1wWmMwbHFSVEJPVTBrMlQxUkJjMGxxUlRCT2FVazJUVlJqZUV4RFNYaE9SR05wVDJwck5VeERTWGhPUkdkcFQycEZNMDFEZDJsTlZGRTFTV3B2ZUU1VVVYTkpha1V4VFVOSk5rMTZZM05KYWtVeFRWTkpOazFxUVRSTVEwbDRUbFJKYVU5cVJUQk9lWGRwVFZSVmVrbHFiM2hOZVhkcFRWUlZNRWxxYjNoUFZGbHpTV3BGTVU1VFNUWk9WRmx6U1dwRk1VNXBTVFpOVkdjeVRFTkplRTVVWTJsUGFrVTBUVU4zYVUxVVZUUkphbTk0VDFSUmMwbHFSVEZQVTBrMlRXcEpkMHhEU1hoT2FrRnBUMnBGZVUxcGQybE5WRmw0U1dwdk1FNXBkMmxOVkZsNVNXcHZlVTFxU1hOSmFrVXlUWGxKTmsxVVl6Sk1RMGw0VG1wUmFVOXFZM2RNUTBsNFRtcFZhVTlxVlRWTVEwbDRUbXBaYVU5cVJYcE1RMGw0VG1wamFVOXFTWGxOZVhkcFRWUlpORWxxYnpWTlUzZHBUVlJaTlVscWIzaE5SR2R6U1dwRk0wMURTVFpOVkdNelRFTkplRTU2UldsUGFrbDRUa04zYVUxVVkzbEphbTh6VFdsM2FVMVVZM3BKYW05NlRVTjNhVTFVWXpCSmFtOTVUV3BKYzBscVJUTk9VMGsyVGtSSmMwbHFSVE5PYVVrMlRXcEpNRXhEU1hoT2VtTnBUMnBKZDAxVGQybE5WR00wU1dwdk1VMXBkMmxOVkdNMVNXcHZlVTFVUlhOSmFrVTBUVU5KTmsxcVVUSk1RMGw0VDBSRmFVOXFSVFJPUTNkcFRWUm5lVWxxYjNsTlUzZHBUVlJuZWtscWJ6Vk9hWGRwVFZSbk1FbHFiM2hPUkd0elNXcEZORTVUU1RaUFZHdHpTV3BGTkU1cFNUWk5WRUY0VEVOSmVFOUVZMmxQYWtVd1RubDNhVTFVWnpSSmFtOTRUbnBOYzBscVJUUlBVMGsyVFdwUk5FeERTWGhQVkVGcFQycEZNazVwZDJsTlZHdDRTV3B2ZWsxVGQybE5WR3Q1U1dwdmVFNXFhM05KYWtVMVRYbEpOazlVVFhOSmFrVTFUa05KTmsxcVJUQk1RMGw0VDFSVmFVOXFSWGxPUTNkcFRWUnJNa2xxYjNsUFEzZHBUVlJyTTBscWJ6Sk5VM2RwVFZSck5FbHFiekZQVTNkcFRWUnJOVWxxYjNwUFEzZHBUV3BCZDBscWIzaE5SRUZ6U1dwSmQwMVRTVFpPVkVWelNXcEpkMDFwU1RaT1JHZHpTV3BKZDAxNVNUWlBWR3R6U1dwSmQwNURTVFpOVkd0NFRFTkplVTFFVldsUGFrVTFUbmwzYVUxcVFUSkphbTh4VDBOM2FVMXFRVE5KYW05NFQwUkJjMGxxU1hkUFEwazJUVlJWTUV4RFNYbE5SR3RwVDJwRk1rNTVkMmxOYWtWM1NXcHZlRTFxUlhOSmFrbDRUVk5KTmsxcVFURk1RMGw1VFZSSmFVOXFTWHBPYVhkcFRXcEZla2xxYjNsTlUzZHBUV3BGTUVscWIzaFBSR056U1dwSmVFNVRTVFpOYWsxNlRFTkplVTFVV1dsUGFra3hUWGwzYVUxcVJUTkphbTh5VG1sM2FVMXFSVFJKYW04eVRtbDNhVTFxUlRWSmFtOTRUMFJKYzBscVNYbE5RMGsyVFdwTk1VeERTWGxOYWtWcFQycEplRTFwZDJsTmFrbDVTV3B2ZWsxcGQybE5ha2w2U1dwdmVFMTZXWE5KYWtsNVRrTkpOazU2UlhOSmFrbDVUbE5KTmsxVVp6Tk1RMGw1VFdwWmFVOXFTWGxQUTNkcFRXcEpNMGxxYjNsTmVrMXpTV3BKZVU5RFNUWk9lbEZ6U1dwSmVVOVRTVFpOVkVVMFRFTkplVTE2UVdsUGFrVjVUVU4zYVUxcVRYaEphbTh5VDFOM2FVMXFUWGxKYW05NFQxUkJjMGxxU1hwTmVVazJUbnBOYzBscVNYcE9RMGsyVFZSUmVFeERTWGxOZWxWcFQycFJlVXhEU1hsTmVsbHBUMnByTkV4RFNYbE5lbU5wVDJwTk5VeERTWGxOZW1kcFQycEZNVTE1ZDJsTmFrMDFTV3B2TlUxcGQybE5hbEYzU1dwdk0wOURkMmxOYWxGNFNXcHZlVTVwZDJsTmFsRjVTV3B2ZVUxVWEzTkpha2t3VFhsSk5rMVVhelJNUTBsNVRrUlJhVTlxUlRKUFEzZHBUV3BSTVVscWIzaE9lbU56U1dwSk1FNXBTVFpPYWxWelNXcEpNRTU1U1RaTmFrbDRURU5KZVU1RVoybFBha2wzVFdsM2FVMXFVVFZKYW05NFRtcE5jMGxxU1RGTlEwazJUVlJKTkV4RFNYbE9WRVZwVDJwUk5VeERTWGxPVkVscFQycEZlRTFUZDJsTmFsVjZTV3B2ZUUxVVFYTkpha2t4VGtOSk5rMVVWWE5KYWtreFRsTkpOazVxWjNOSmFra3hUbWxKTmsxcVNYaE1RMGw1VGxSamFVOXFTWGxQUTNkcFRXcFZORWxxYjNwT2VYZHBUV3BWTlVscWIzbE9lWGRwVFdwWmQwbHFielJOYVhkcFRXcFplRWxxYjNoUFZHZHpTV3BKTWsxcFNUWk9VM2RwVFdwWmVrbHFiek5NUTBsNVRtcFJhVTlxU1hoUFEzZHBUV3BaTVVscWIzaE5hazF6U1dwSk1rNXBTVFpOYWtrMFRFTkplVTVxWTJsUGFrVXdUVU4zYVUxcVdUUkphbTh5VDBOM2FVMXFXVFZKYW05NFRrUkZjMGxxU1ROTlEwazJUVlJqZUV4RFNYbE9la1ZwVDJwbk1FeERTWGxPZWtscFQycEZOVTFwZDJsTmFtTjZTV3B2ZDB4RFNYbE9lbEZwVDJwSmVFeERTWGxPZWxWcFQycFplRXhEU1hsT2VsbHBUMnBGZVV4RFNYbE9lbU5wVDJwSk5FeERTWGxPZW1kcFQycEpjMGxxU1ROUFUwazJUVlJWYzBscVNUUk5RMGsyVFZSVk0weERTWGxQUkVWcFQycFZlVXhEU1hsUFJFbHBUMnBKZDA5RGQybE5hbWQ2U1dwdmVFMTZhM05KYWtrMFRrTkpOazFxWjNOSmFrazBUbE5KTms1cVFYTkpha2swVG1sSk5rNUVSWE5KYWtrMFRubEpOazFxVVhOSmFrazBUME5KTmsxcVNUTk1RMGw1VDBScmFVOXFTWE5KYWtrMVRVTkpOazE1ZDJsTmFtdDRTV3B2ZUV4RFNYbFBWRWxwVDJwQmMwbHFTVFZOZVVrMlRWZ3dQU0lzSW1semN5STZJbWgwZEhCek9pOHZZV05qYjNWdWRITXVaMjl2WjJ4bExtTnZiU0lzSW1saGRDSTZJakUxTVRBMk16STVPVGtpTENKbGVIQWlPaUl4TlRFd05qTTJOVGs1SWl3aVlXeG5Jam9pVWxNeU5UWWlMQ0pyYVdRaU9pSXpZMlUwWVRrM1pEVXdNbUZtTURVNFpXSTJObUZqT0dRM016QmhOVGt5WVdJM1kyVmhOMll4SW4xOVwiLFxuaWRwOntcbmRvbWFpbjpcIm5vZGVqcy1pZHBcIixcbnByb3RvY29sOlwiT0lEQ1wiXG59LGluZm86e1xuYWNjZXNzVG9rZW46XCJ5YTI5Lkdsc0VCZG5CQ3ctS0xtcGdmaFFaRTRQaEVKWGxHbVdtckpZTzFMLXItdXk3eXZ5SzMxQ0x6UXVoOFlXenZRazE5TFVfYWI2RzdtUmRHSFNhMnluR20yRjJVOWlCejZndWlXaW5KMlFicVJ4b1ROOVU1R19fOEFxVEtsV2dcIixcbmlkVG9rZW46XCJleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpOalpUUmhPVGRrTlRBeVlXWXdOVGhsWWpZMllXTTRaRGN6TUdFMU9USmhZamRqWldFM1pqRWlmUS5leUpoZW5BaU9pSTRNRGd6TWprMU5qWXdNVEl0ZEhGeU9IRnZhREV4TVRrME1tZGtNbXRuTURBM2REQnpPR1l5TnpkeWIya3VZWEJ3Y3k1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMGlMQ0poZFdRaU9pSTRNRGd6TWprMU5qWXdNVEl0ZEhGeU9IRnZhREV4TVRrME1tZGtNbXRuTURBM2REQnpPR1l5TnpkeWIya3VZWEJ3Y3k1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMGlMQ0p6ZFdJaU9pSXhNRE14TlRRME9URTNNVEV5TnpVeE1qWXpORElpTENKbGJXRnBiQ0k2SW5SbGMzUmhibVIwYUdsdWF6TXlNVUJuYldGcGJDNWpiMjBpTENKbGJXRnBiRjkyWlhKcFptbGxaQ0k2ZEhKMVpTd2lZWFJmYUdGemFDSTZJakl5Um5JNWFYWm9OV0o1ZUdVdGExZE9PR2x2YTFFaUxDSnViMjVqWlNJNkltVjVTWGRKYW04d1QwTjNhVTFUU1RaTlZFMTNURU5KZVVscWIzaE1RMGw2U1dwdmVrNURkMmxPUTBrMlRrUm5jMGxxVldsUGFrVjZURU5KTWtscWJ6Sk1RMGt6U1dwdk5VeERTVFJKYW04d1RXbDNhVTlUU1RaTlZFMHdURU5KZUUxRFNUWk9la2x6U1dwRmVFbHFiM2hOZWxGelNXcEZlVWxxYjNsT1JHTnpTV3BGZWtscWIzaE5lWGRwVFZSUmFVOXFSWE5KYWtVeFNXcHZlRXhEU1hoT2FVazJUVk4zYVUxVVkybFBhbFZ6U1dwRk5FbHFiM2RNUTBsNFQxTkpOazE1ZDJsTmFrRnBUMnBGZWsxRGQybE5ha1ZwVDJwRmMwbHFTWGxKYW05NFRsTjNhVTFxVFdsUGFrRnpTV3BKTUVscWJ6QlBRM2RwVFdwVmFVOXFSWHBOUTNkcFRXcFphVTlxUlhOSmFra3pTV3B2ZUUxRGQybE5hbWRwVDJwSmMwbHFTVFZKYW05NFRYcEJjMGxxVFhkSmFtOTRURU5KZWsxVFNUWk5VM2RwVFhwSmFVOXFRWE5KYWsxNlNXcHZlRTVVUVhOSmFrMHdTV3B2TlV4RFNYcE9VMGsyVDBSbmMwbHFUVEpKYW05NFRtcEJjMGxxVFROSmFtOTVUa1JyYzBscVRUUkphbTk0VGtSQmMwbHFUVFZKYW05NVRYcHJjMGxxVVhkSmFtOTRUVVJCYzBscVVYaEphbTk2VGtOM2FVNUVTV2xQYWtreFRWTjNhVTVFVFdsUGFrVXdUV2wzYVU1RVVXbFBha1UxVDFOM2FVNUVWV2xQYWtsM1RFTkpNRTVwU1RaTlZFMHpURU5KTUU1NVNUWk5ha0Y1VEVOSk1FOURTVFpOVkdkelNXcFJOVWxxYjNoUFJFMXpTV3BWZDBscWIzaE9WR2R6U1dwVmVFbHFiM2xOZW1OelNXcFZlVWxxYjNsT1ZGRnpTV3BWZWtscWJ6SlBRM2RwVGxSUmFVOXFTWHBPYVhkcFRsUlZhVTlxUlhsT1UzZHBUbFJaYVU5cVdUVk1RMGt4VG5sSk5rMVVVWE5KYWxVMFNXcHZORTlEZDJsT1ZHdHBUMnBGZVU5RGQybE9ha0ZwVDJwRmVVNURkMmxPYWtWcFQycEpkMDFEZDJsT2FrbHBUMnBKZDA5VGQybE9hazFwVDJwRk5VNURkMmxPYWxGcFQycEZNRTVEZDJsT2FsVnBUMnBKZDAxNWQybE9hbGxwVDJwRk1VeERTVEpPZVVrMlRXcEJla3hEU1RKUFEwazJUV3BCZDB4RFNUSlBVMGsyVFhwSmMwbHFZM2RKYW05NVRWUlJjMGxxWTNoSmFtOTVUbFJGYzBscVkzbEphbTgwVFZOM2FVNTZUV2xQYWtVMFQwTjNhVTU2VVdsUGFrVXlUV2wzYVU1NlZXbFBha1YzVGxOM2FVNTZXV2xQYW1NMVRFTkpNMDU1U1RaUFJHTnpTV3BqTkVscWJ6SlBRM2RwVG5wcmFVOXFSVEJOVTNkcFQwUkJhVTlxV1hkTVEwazBUVk5KTms5RVozTkphbWQ1U1dwdk5FNURkMmxQUkUxcFQycFpNVXhEU1RST1EwazJUa1JaYzBscVp6RkphbTk0VFVSQmMwbHFaekpKYW05NVRXcG5jMGxxWnpOSmFtODBUME4zYVU5RVoybFBha2wzVFdsM2FVOUVhMmxQYWsxNVRFTkpOVTFEU1RaTlZHTjVURU5KTlUxVFNUWk5WRUUxVEVOSk5VMXBTVFpPVkVGelNXcHJla2xxYjNsTlJGbHpTV3ByTUVscWIzbE5WRkZ6U1dwck1VbHFiM2xPUkZGelNXcHJNa2xxYjNoTlJGVnpTV3ByTTBscWJ6RlBVM2RwVDFSbmFVOXFSWGhOUTNkcFQxUnJhVTlxUlRKTVEwbDRUVVJCYVU5cVJUVk9lWGRwVFZSQmVFbHFiM2xOUkUxelNXcEZkMDFwU1RaT2FYZHBUVlJCZWtscWIzaE5RM2RwVFZSQk1FbHFiekJOZVhkcFRWUkJNVWxxYnpOTVEwbDRUVVJaYVU5cVRURk1RMGw0VFVSamFVOXFTVEJQUTNkcFRWUkJORWxxYjNoT1JGbHpTV3BGZDA5VFNUWk5WRlYzVEVOSmVFMVVRV2xQYWtVMVRYbDNhVTFVUlhoSmFtOTVUa1JSYzBscVJYaE5hVWsyVFZSWk1reERTWGhOVkUxcFQycEZlazlUZDJsTlZFVXdTV3B2ZUU5RVNYTkpha1Y0VGxOSk5rNTZaM05KYWtWNFRtbEpOazFVVlhoTVEwbDRUVlJqYVU5cVJUUk1RMGw0VFZSbmFVOXFVWE5KYWtWNFQxTkpOazVxVVhOSmFrVjVUVU5KTms1VVZYTkpha1Y1VFZOSk5rMXFSVEZNUTBsNFRXcEphVTlxUlhoTlUzZHBUVlJKZWtscWIzaFBWR3R6U1dwRmVVNURTVFpQVkdkelNXcEZlVTVUU1RaUFEzZHBUVlJKTWtscWIzcE1RMGw0VFdwamFVOXFVWGxNUTBsNFRXcG5hVTlxUlhkUFUzZHBUVlJKTlVscWIzaFBWRlZ6U1dwRmVrMURTVFpPZWtGelNXcEZlazFUU1RaT2FrRnpTV3BGZWsxcFNUWk5WRTAxVEVOSmVFMTZUV2xQYWtVMVRrTjNhVTFVVFRCSmFtOTRUVlJGYzBscVJYcE9VMGsyVFZSWmVreERTWGhOZWxscFQycEZOVTFwZDJsTlZFMHpTV3B2TWsxcGQybE5WRTAwU1dwdmVFNTVkMmxOVkUwMVNXcHZlVTFFVFhOSmFrVXdUVU5KTmsxVVJUTk1RMGw0VGtSRmFVOXFVVEZNUTBsNFRrUkphVTlxUlRCTmFYZHBUVlJSZWtscWIzaFBVM2RwVFZSUk1FbHFiM2hPYWxselNXcEZNRTVUU1RaUFZFRnpTV3BGTUU1cFNUWk5WR040VEVOSmVFNUVZMmxQYW1zMVRFTkplRTVFWjJsUGFrVXpUVU4zYVUxVVVUVkphbTk0VGxSUmMwbHFSVEZOUTBrMlRYcGpjMGxxUlRGTlUwazJUV3BCTkV4RFNYaE9WRWxwVDJwRk1FNTVkMmxOVkZWNlNXcHZlRTE1ZDJsTlZGVXdTV3B2ZUU5VVdYTkpha1V4VGxOSk5rNVVXWE5KYWtVeFRtbEpOazFVWnpKTVEwbDRUbFJqYVU5cVJUUk5RM2RwVFZSVk5FbHFiM2hQVkZGelNXcEZNVTlUU1RaTmFrbDNURU5KZUU1cVFXbFBha1Y1VFdsM2FVMVVXWGhKYW04d1RtbDNhVTFVV1hsSmFtOTVUV3BKYzBscVJUSk5lVWsyVFZSak1reERTWGhPYWxGcFQycGpkMHhEU1hoT2FsVnBUMnBWTlV4RFNYaE9hbGxwVDJwRmVreERTWGhPYW1OcFQycEplVTE1ZDJsTlZGazBTV3B2TlUxVGQybE5WRmsxU1dwdmVFMUVaM05KYWtVelRVTkpOazFVWXpOTVEwbDRUbnBGYVU5cVNYaE9RM2RwVFZSamVVbHFiek5OYVhkcFRWUmpla2xxYjNwTlEzZHBUVlJqTUVscWIzbE5ha2x6U1dwRk0wNVRTVFpPUkVselNXcEZNMDVwU1RaTmFra3dURU5KZUU1NlkybFBha2wzVFZOM2FVMVVZelJKYW04eFRXbDNhVTFVWXpWSmFtOTVUVlJGYzBscVJUUk5RMGsyVFdwUk1reERTWGhQUkVWcFQycEZORTVEZDJsTlZHZDVTV3B2ZVUxVGQybE5WR2Q2U1dwdk5VNXBkMmxOVkdjd1NXcHZlRTVFYTNOSmFrVTBUbE5KTms5VWEzTkpha1UwVG1sSk5rMVVRWGhNUTBsNFQwUmphVTlxUlRCT2VYZHBUVlJuTkVscWIzaE9lazF6U1dwRk5FOVRTVFpOYWxFMFRFTkplRTlVUVdsUGFrVXlUbWwzYVUxVWEzaEphbTk2VFZOM2FVMVVhM2xKYW05NFRtcHJjMGxxUlRWTmVVazJUMVJOYzBscVJUVk9RMGsyVFdwRk1FeERTWGhQVkZWcFQycEZlVTVEZDJsTlZHc3lTV3B2ZVU5RGQybE5WR3N6U1dwdk1rMVRkMmxOVkdzMFNXcHZNVTlUZDJsTlZHczFTV3B2ZWs5RGQybE5ha0YzU1dwdmVFMUVRWE5KYWtsM1RWTkpOazVVUlhOSmFrbDNUV2xKTms1RVozTkpha2wzVFhsSk5rOVVhM05KYWtsM1RrTkpOazFVYTNoTVEwbDVUVVJWYVU5cVJUVk9lWGRwVFdwQk1rbHFiekZQUTNkcFRXcEJNMGxxYjNoUFJFRnpTV3BKZDA5RFNUWk5WRlV3VEVOSmVVMUVhMmxQYWtVeVRubDNhVTFxUlhkSmFtOTRUV3BGYzBscVNYaE5VMGsyVFdwQk1VeERTWGxOVkVscFQycEplazVwZDJsTmFrVjZTV3B2ZVUxVGQybE5ha1V3U1dwdmVFOUVZM05KYWtsNFRsTkpOazFxVFhwTVEwbDVUVlJaYVU5cVNURk5lWGRwVFdwRk0wbHFiekpPYVhkcFRXcEZORWxxYnpKT2FYZHBUV3BGTlVscWIzaFBSRWx6U1dwSmVVMURTVFpOYWsweFRFTkplVTFxUldsUGFrbDRUV2wzYVUxcVNYbEphbTk2VFdsM2FVMXFTWHBKYW05NFRYcFpjMGxxU1hsT1EwazJUbnBGYzBscVNYbE9VMGsyVFZSbk0weERTWGxOYWxscFQycEplVTlEZDJsTmFra3pTV3B2ZVUxNlRYTkpha2w1VDBOSk5rNTZVWE5KYWtsNVQxTkpOazFVUlRSTVEwbDVUWHBCYVU5cVJYbE5RM2RwVFdwTmVFbHFiekpQVTNkcFRXcE5lVWxxYjNoUFZFRnpTV3BKZWsxNVNUWk9lazF6U1dwSmVrNURTVFpOVkZGNFRFTkplVTE2VldsUGFsRjVURU5KZVUxNldXbFBhbXMwVEVOSmVVMTZZMmxQYWswMVRFTkplVTE2WjJsUGFrVXhUWGwzYVUxcVRUVkphbTgxVFdsM2FVMXFVWGRKYW04elQwTjNhVTFxVVhoSmFtOTVUbWwzYVUxcVVYbEphbTk1VFZScmMwbHFTVEJOZVVrMlRWUnJORXhEU1hsT1JGRnBUMnBGTWs5RGQybE5hbEV4U1dwdmVFNTZZM05KYWtrd1RtbEpOazVxVlhOSmFra3dUbmxKTmsxcVNYaE1RMGw1VGtSbmFVOXFTWGROYVhkcFRXcFJOVWxxYjNoT2FrMXpTV3BKTVUxRFNUWk5WRWswVEVOSmVVNVVSV2xQYWxFMVRFTkplVTVVU1dsUGFrVjRUVk4zYVUxcVZYcEphbTk0VFZSQmMwbHFTVEZPUTBrMlRWUlZjMGxxU1RGT1UwazJUbXBuYzBscVNURk9hVWsyVFdwSmVFeERTWGxPVkdOcFQycEplVTlEZDJsTmFsVTBTV3B2ZWs1NWQybE5hbFUxU1dwdmVVNTVkMmxOYWxsM1NXcHZORTFwZDJsTmFsbDRTV3B2ZUU5VVozTkpha2t5VFdsSk5rNVRkMmxOYWxsNlNXcHZNMHhEU1hsT2FsRnBUMnBKZUU5RGQybE5hbGt4U1dwdmVFMXFUWE5KYWtreVRtbEpOazFxU1RSTVEwbDVUbXBqYVU5cVJUQk5RM2RwVFdwWk5FbHFiekpQUTNkcFRXcFpOVWxxYjNoT1JFVnpTV3BKTTAxRFNUWk5WR040VEVOSmVVNTZSV2xQYW1jd1RFTkplVTU2U1dsUGFrVTFUV2wzYVUxcVkzcEphbTkzVEVOSmVVNTZVV2xQYWtsNFRFTkplVTU2VldsUGFsbDRURU5KZVU1NldXbFBha1Y1VEVOSmVVNTZZMmxQYWtrMFRFTkplVTU2WjJsUGFrbHpTV3BKTTA5VFNUWk5WRlZ6U1dwSk5FMURTVFpOVkZVelRFTkplVTlFUldsUGFsVjVURU5KZVU5RVNXbFBha2wzVDBOM2FVMXFaM3BKYW05NFRYcHJjMGxxU1RST1EwazJUV3BuYzBscVNUUk9VMGsyVG1wQmMwbHFTVFJPYVVrMlRrUkZjMGxxU1RST2VVazJUV3BSYzBscVNUUlBRMGsyVFdwSk0weERTWGxQUkd0cFQycEpjMGxxU1RWTlEwazJUWGwzYVUxcWEzaEphbTk0VEVOSmVVOVVTV2xQYWtGelNXcEpOVTE1U1RaTldEQTlJaXdpYVhOeklqb2lhSFIwY0hNNkx5OWhZMk52ZFc1MGN5NW5iMjluYkdVdVkyOXRJaXdpYVdGMElqb3hOVEV3TmpNeU9UazVMQ0psZUhBaU9qRTFNVEEyTXpZMU9UbDkuT2E0aEUxcnlsa0MxY2ZPLW1aT0hiVC1IVm5JR3pBRENaTWp0VGR1Tk80b2hxZ1dJUklKV0NodmJyWkdHRldyQTJHdTIwRVVSSW00bkJXbXFTTUxybmZoelhhVlE1bnpBSUd4alZfNlA5YW1MUEh4UVltckVxTkVqQ08wTTJ6MVVBQjlUVXBwSExybkUxeXNLdUMzY0hoN1Q3am1rN28zdGVYVGoxMGZXUFdQazl1eG1lZjBfTXBGMDVIcFQ0SkZuYkV5ZVlHYzlOa0hLN3dEZk1YbWw2NEZXcE9oa2dwSVdiVzJjSXpqcnNOOUJJR1pxVG8tTDZBQzZUQV9RdHJhUHp2NGhQWDJzb3o2czlMZGZ6Qm1wVDZnOUl1STh2OWc4bEpEVFNkSm0za0V2c1c0NndLeHZwcDE5N0h0NENxbUlHNmdLeml0Q01ncGNZTnAyQlFVZWlBXCIsXCJyZWZyZXNoVG9rZW5cIjpcIjEvTEJCS0JUbkp3b0tyb1l6UEhib0s2aUEtaS1hZkZXTUxIMlZBQkJiNkJoa1wiLFxudG9rZW5UeXBlOlwiQmVhcmVyXCIsXG5pbmZvVG9rZW46e1xuc3ViOlwiMTAzMTU0NDkxNzExMjc1MTI2MzQyXCIsXG5uYW1lOlwidGVzdCB0aGlua1wiLFxuZ2l2ZW5fbmFtZTpcInRlc3RcIixcbmZhbWlseV9uYW1lOlwidGhpbmtcIixcbnBpY3R1cmU6XCJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZ1wiLFxuZW1haWw6XCJ0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tXCIsXG5lbWFpbF92ZXJpZmllZDp0cnVlLFxubG9jYWxlOlwiZW5cIn0sXG50b2tlbklESlNPTjp7XG5henA6XCI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbmF1ZDpcIjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbVwiLFxuc3ViOlwiMTAzMTU0NDkxNzExMjc1MTI2MzQyXCIsXG5lbWFpbDpcInRlc3RhbmR0aGluazMyMUBnbWFpbC5jb21cIixcbmVtYWlsX3ZlcmlmaWVkOlwidHJ1ZVwiLFxuYXRfaGFzaDpcIjIyRnI5aXZoNWJ5eGUta1dOOGlva1FcIixcbm5vbmNlOlwiZXlJd0lqbzBPQ3dpTVNJNk1UTXdMQ0l5SWpveExDSXpJam96TkN3aU5DSTZORGdzSWpVaU9qRXpMQ0kySWpvMkxDSTNJam81TENJNElqbzBNaXdpT1NJNk1UTTBMQ0l4TUNJNk56SXNJakV4SWpveE16UXNJakV5SWpveU5EY3NJakV6SWpveE15d2lNVFFpT2pFc0lqRTFJam94TENJeE5pSTZNU3dpTVRjaU9qVXNJakU0SWpvd0xDSXhPU0k2TXl3aU1qQWlPakV6TUN3aU1qRWlPakVzSWpJeUlqb3hOU3dpTWpNaU9qQXNJakkwSWpvME9Dd2lNalVpT2pFek1Dd2lNallpT2pFc0lqSTNJam94TUN3aU1qZ2lPaklzSWpJNUlqb3hNekFzSWpNd0lqb3hMQ0l6TVNJNk1Td2lNeklpT2pBc0lqTXpJam94TlRBc0lqTTBJam81TENJek5TSTZPRGdzSWpNMklqb3hOakFzSWpNM0lqb3lORGtzSWpNNElqb3hOREFzSWpNNUlqb3lNemtzSWpRd0lqb3hNREFzSWpReElqb3pOQ3dpTkRJaU9qSTFNU3dpTkRNaU9qRTBNaXdpTkRRaU9qRTVPU3dpTkRVaU9qSXdMQ0kwTmlJNk1UTTNMQ0kwTnlJNk1qQXlMQ0kwT0NJNk1UZ3NJalE1SWpveE9ETXNJalV3SWpveE5UZ3NJalV4SWpveU16Y3NJalV5SWpveU5UUXNJalV6SWpvMk9Dd2lOVFFpT2pJek5pd2lOVFVpT2pFeU5Td2lOVFlpT2pZNUxDSTFOeUk2TVRRc0lqVTRJam80T0N3aU5Ua2lPakV5T0N3aU5qQWlPakV5TkN3aU5qRWlPakl3TUN3aU5qSWlPakl3T1N3aU5qTWlPakU1TkN3aU5qUWlPakUwTkN3aU5qVWlPakl3TXl3aU5qWWlPakUxTENJMk55STZNakF6TENJMk9DSTZNakF3TENJMk9TSTZNeklzSWpjd0lqb3lNVFFzSWpjeElqb3lOVEVzSWpjeUlqbzRNU3dpTnpNaU9qRTRPQ3dpTnpRaU9qRTJNaXdpTnpVaU9qRXdOU3dpTnpZaU9qYzVMQ0kzTnlJNk9EY3NJamM0SWpvMk9Dd2lOemtpT2pFME1Td2lPREFpT2pZd0xDSTRNU0k2T0Rnc0lqZ3lJam80TkN3aU9ETWlPalkxTENJNE5DSTZORFlzSWpnMUlqb3hNREFzSWpnMklqb3lNamdzSWpnM0lqbzRPQ3dpT0RnaU9qSXdNaXdpT0RraU9qTXlMQ0k1TUNJNk1UY3lMQ0k1TVNJNk1UQTVMQ0k1TWlJNk5UQXNJamt6SWpveU1EWXNJamswSWpveU1UUXNJamsxSWpveU5EUXNJamsySWpveE1EVXNJamszSWpvMU9Td2lPVGdpT2pFeE1Dd2lPVGtpT2pFMkxDSXhNREFpT2pFNU55d2lNVEF4SWpveU1ETXNJakV3TWlJNk5pd2lNVEF6SWpveE1Dd2lNVEEwSWpvME15d2lNVEExSWpvM0xDSXhNRFlpT2pNMUxDSXhNRGNpT2pJME9Dd2lNVEE0SWpveE5EWXNJakV3T1NJNk1UVXdMQ0l4TVRBaU9qRTVNeXdpTVRFeElqb3lORFFzSWpFeE1pSTZNVFkyTENJeE1UTWlPakV6T1N3aU1URTBJam94T0RJc0lqRXhOU0k2Tnpnc0lqRXhOaUk2TVRVeExDSXhNVGNpT2pFNExDSXhNVGdpT2pRc0lqRXhPU0k2TmpRc0lqRXlNQ0k2TlRVc0lqRXlNU0k2TWpFMUxDSXhNaklpT2pFeE1Td2lNVEl6SWpveE9Ua3NJakV5TkNJNk9UZ3NJakV5TlNJNk9Dd2lNVEkySWpvekxDSXhNamNpT2pReUxDSXhNamdpT2pFd09Td2lNVEk1SWpveE9UVXNJakV6TUNJNk56QXNJakV6TVNJNk5qQXNJakV6TWlJNk1UTTVMQ0l4TXpNaU9qRTVOQ3dpTVRNMElqb3hNVEVzSWpFek5TSTZNVFl6TENJeE16WWlPakU1TWl3aU1UTTNJam8yTWl3aU1UTTRJam94Tnl3aU1UTTVJam95TURNc0lqRTBNQ0k2TVRFM0xDSXhOREVpT2pRMUxDSXhORElpT2pFME1pd2lNVFF6SWpveE9Td2lNVFEwSWpveE5qWXNJakUwTlNJNk9UQXNJakUwTmlJNk1UY3hMQ0l4TkRjaU9qazVMQ0l4TkRnaU9qRTNNQ3dpTVRRNUlqb3hOVFFzSWpFMU1DSTZNemNzSWpFMU1TSTZNakE0TENJeE5USWlPakUwTnl3aU1UVXpJam94TXl3aU1UVTBJam94T1RZc0lqRTFOU0k2TlRZc0lqRTFOaUk2TVRnMkxDSXhOVGNpT2pFNE1Dd2lNVFU0SWpveE9UUXNJakUxT1NJNk1qSXdMQ0l4TmpBaU9qRXlNaXdpTVRZeElqbzBOaXdpTVRZeUlqb3lNaklzSWpFMk15STZNVGMyTENJeE5qUWlPamN3TENJeE5qVWlPalU1TENJeE5qWWlPakV6TENJeE5qY2lPakl5TXl3aU1UWTRJam81TVN3aU1UWTVJam94TURnc0lqRTNNQ0k2TVRjM0xDSXhOekVpT2pJeE5Dd2lNVGN5SWpvM01pd2lNVGN6SWpvek1Dd2lNVGMwSWpveU1qSXNJakUzTlNJNk5ESXNJakUzTmlJNk1qSTBMQ0l4TnpjaU9qSXdNU3dpTVRjNElqbzFNaXdpTVRjNUlqb3lNVEVzSWpFNE1DSTZNalEyTENJeE9ERWlPakU0TkN3aU1UZ3lJam95TVN3aU1UZ3pJam81Tml3aU1UZzBJam94TkRrc0lqRTROU0k2T1Rrc0lqRTROaUk2TVRBeExDSXhPRGNpT2pFME55d2lNVGc0SWpveE56TXNJakU0T1NJNk1qUTRMQ0l4T1RBaU9qRTJOaXdpTVRreElqb3pNU3dpTVRreUlqb3hOamtzSWpFNU15STZPVE1zSWpFNU5DSTZNakUwTENJeE9UVWlPakV5TkN3aU1UazJJam95T0N3aU1UazNJam8yTVN3aU1UazRJam8xT1N3aU1UazVJam96T0N3aU1qQXdJam94TURBc0lqSXdNU0k2TlRFc0lqSXdNaUk2TkRnc0lqSXdNeUk2T1Rrc0lqSXdOQ0k2TVRreExDSXlNRFVpT2pFNU55d2lNakEySWpvMU9Dd2lNakEzSWpveE9EQXNJakl3T0NJNk1UVTBMQ0l5TURraU9qRTJOeXdpTWpFd0lqb3hNakVzSWpJeE1TSTZNakExTENJeU1USWlPakl6Tml3aU1qRXpJam95TVN3aU1qRTBJam94T0Rjc0lqSXhOU0k2TWpNekxDSXlNVFlpT2pJMU15d2lNakUzSWpvMk5pd2lNakU0SWpvMk5pd2lNakU1SWpveE9ESXNJakl5TUNJNk1qTTFMQ0l5TWpFaU9qSXhNaXdpTWpJeUlqb3pNaXdpTWpJeklqb3hNellzSWpJeU5DSTZOekVzSWpJeU5TSTZNVGczTENJeU1qWWlPakl5T0N3aU1qSTNJam95TXpNc0lqSXlPQ0k2TnpRc0lqSXlPU0k2TVRFNExDSXlNekFpT2pFeU1Dd2lNak14SWpvMk9Td2lNak15SWpveE9UQXNJakl6TXlJNk56TXNJakl6TkNJNk1UUXhMQ0l5TXpVaU9qUXlMQ0l5TXpZaU9qazRMQ0l5TXpjaU9qTTVMQ0l5TXpnaU9qRTFNeXdpTWpNNUlqbzVNaXdpTWpRd0lqbzNPQ3dpTWpReElqb3lOaXdpTWpReUlqb3lNVGtzSWpJME15STZNVGs0TENJeU5EUWlPakUyT0N3aU1qUTFJam94Tnpjc0lqSTBOaUk2TmpVc0lqSTBOeUk2TWpJeExDSXlORGdpT2pJd01pd2lNalE1SWpveE5qTXNJakkxTUNJNk1USTRMQ0l5TlRFaU9qUTVMQ0l5TlRJaU9qRXhNU3dpTWpVeklqb3hNVEFzSWpJMU5DSTZNVFVzSWpJMU5TSTZOamdzSWpJMU5pSTZNakl4TENJeU5UY2lPakl5T0N3aU1qVTRJam96Tnl3aU1qVTVJam95Tnl3aU1qWXdJam80TWl3aU1qWXhJam94T1Rnc0lqSTJNaUk2TlN3aU1qWXpJam8zTENJeU5qUWlPakl4T0N3aU1qWTFJam94TWpNc0lqSTJOaUk2TWpJNExDSXlOamNpT2pFME1Dd2lNalk0SWpvMk9Dd2lNalk1SWpveE5ERXNJakkzTUNJNk1UY3hMQ0l5TnpFaU9qZzBMQ0l5TnpJaU9qRTVNaXdpTWpjeklqb3dMQ0l5TnpRaU9qSXhMQ0l5TnpVaU9qWXhMQ0l5TnpZaU9qRXlMQ0l5TnpjaU9qSTRMQ0l5TnpnaU9qSXNJakkzT1NJNk1UVXNJakk0TUNJNk1UVTNMQ0l5T0RFaU9qVXlMQ0l5T0RJaU9qSXdPQ3dpTWpneklqb3hNemtzSWpJNE5DSTZNamdzSWpJNE5TSTZOakFzSWpJNE5pSTZOREVzSWpJNE55STZNalFzSWpJNE9DSTZNakkzTENJeU9Ea2lPaklzSWpJNU1DSTZNeXdpTWpreElqb3hMQ0l5T1RJaU9qQXNJakk1TXlJNk1YMD1cIixcbmlzczpcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbVwiLFxuaWF0OlwiMTUxMDYzMjk5OVwiLFxuZXhwOlwiMTUxMDYzNjU5OVwiLFxuYWxnOlwiUlMyNTZcIixcbmtpZDpcIjNjZTRhOTdkNTAyYWYwNThlYjY2YWM4ZDczMGE1OTJhYjdjZWE3ZjFcIn0sXG5leHBpcmVzOlwiMTkxMDYzNjU5OVwiLFxuZW1haWw6XCJ0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tXCJ9LFxuaW5mb1Rva2VuOntcbnN1YjpcIjEwMzE1NDQ5MTcxMTI3NTEyNjM0MlwiLFxubmFtZTpcInRlc3QgdGhpbmtcIixcbmdpdmVuX25hbWU6XCJ0ZXN0XCIsXG5mYW1pbHlfbmFtZTpcInRoaW5rXCIsXG5waWN0dXJlOlwiaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1YZFVJcWRNa0NXQS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBQS80MjUycnNjYnY1TS9waG90by5qcGdcIixcbmVtYWlsOlwidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbVwiLFxuZW1haWxfdmVyaWZpZWQ6dHJ1ZSxcbmxvY2FsZTpcImVuXCJ9LFxuaWRlbnRpdHk6XCJ1c2VyOi8vZ29vZ2xlLmNvbS90ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tXCIsXG5tZXNzYWdlSW5mbzp7XG51c2VyUHJvZmlsZTp7XG51c2VybmFtZTpcInRlc3RhbmR0aGluazMyMUBnbWFpbC5jb21cIixcbmNuOlwidGVzdGFuZHRoaW5rMzIxXCIsXG5hdmF0YXI6XCJodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZ1wiLFxubG9jYWxlOlwiZW5cIixcbnVzZXJVUkw6XCJ1c2VyOi8vZ29vZ2xlLmNvbS90ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tXCJ9LFxuaWRwOlwibm9kZWpzLWlkcFwiLFxuYXNzZXJ0aW9uOlwiZXlKMGIydGxia2xFSWpvaVpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHFUbXBhVkZKb1QxUmthMDVVUVhsWlYxbDNUbFJvYkZscVdUSlpWMDAwV2tSamVrMUhSVEZQVkVwb1dXcGthbHBYUlROYWFrVnBabEV1WlhsS2FHVnVRV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2FHUlhVV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2VtUlhTV2xQYVVsNFRVUk5lRTVVVVRCUFZFVXpUVlJGZVU1NlZYaE5hbGw2VGtSSmFVeERTbXhpVjBad1lrTkpOa2x1VW14ak0xSm9ZbTFTTUdGSGJIVmhlazE1VFZWQ2JtSlhSbkJpUXpWcVlqSXdhVXhEU214aVYwWndZa1k1TWxwWVNuQmFiV3hzV2tOSk5tUklTakZhVTNkcFdWaFNabUZIUm5waFEwazJTV3BKZVZKdVNUVmhXRnB2VGxkS05XVkhWWFJoTVdSUFQwZHNkbUV4UldsTVEwcDFZakkxYWxwVFNUWkpiVlkxVTFoa1NtRnRPSGRVTUU0ellWVXhWRk5VV2s1V1JURXpWRVZPU21WVmJIRmlNMmhOVVRCc05sTlhjSFpsYXpWRVpESnNUMUV3YXpKVWExSnVZekJzY1ZaWGJGQmhhMVkyVkVWT1NrMXJiSEZpZWtwTlVUQnJlbE5YY0haT1ZYaEVVMVJTU21GdE9IZFVWMnd6WVZVNVZGTlVXazVXUlRCM1ZFVk9TbVZGTVVSVFZGcFBaV3RzZWxOWGNFWmxSV3h4WWpOb1RtVnNSbnBUVjNCR1pWVnNjV0l6YkU5U1IwNTZVMWR3Um1WcmJIRmlNMmhPWlZoa2NGUldVbEpoVlRseFVsaE9TbUZyVlhoVFYzQjJaVVY0UkZOWWFFOWhWV3N5VkZaT00yRlZNVlZaTW14UVlXeFdlbE5YY0VaT1JXeHhZak5rVFZFd2JEUlVNVTVLVG1zeE5XUXliRTVoYTBad1ZESndSbVZyTVVSa01teE9ZV3RXY0ZReWNFWmpNR3h4VTFoc1NtRnRPVFJVYkU0ellWVXhjVlJYYkZCaGEwWjZVMWR3U2sxRmJIRmlla0pRVVROa2NGUlhjRlpoVlRseFVsaHdUbEV6WkhCVVYzQmFZVlU1Y1ZKWVRrcGhhMnQ2VTFkd2RtVkZNVVJrTW14T1lXMWtjRlF5Y0Vwak1HeHhVMVJXU21GdE9UUlVXSEJDWXpCc2NWUllaRXBoYlRrMFZFVk9TbVZyTVZSVFZGcE9WVE5rY0ZSWWNFcGhWVGx4VVZoT1NtRnJNVFpUVjNCMlpVVTFWVkZZVGtwaGF6QjNVMWR3ZGs1VmVFUlRXSEJQVlRCck1sUXdVbTVqTUd4eFZGUktTbUZ0T1RSVWJYQkNZekJzY1ZSVVRrcGhiVGsxVkd0U2NtTXdiSEZVVkZKS1lXMDVORlJyVWtKak1HeHhWRlJXU21GdE9UVlVXSEJ5WXpCc2NWVllaRXBoYlRrMFZGVlNRbU13YkhGVldHaEtZVzA1TmxSclRqTmhWVFZGVTFkc1VHRnJhM2hVVms0ellWVTFSVlJYYkZCaGExVjNWRmRzTTJGVk5VVlZWMnhRWVd0Vk1WUXhUak5oVlRWRlZsZHNVR0ZyYkROVVJVNUtUVVUxY0ZOVVdrNVdSVEI2VkVWT1NrMUZOVFZUVkZwT1lXdEdOVlJGVGtwTlJUbEVVMVJhVGxaSFpIcFRWM0JTVGxWc2NXSXphRkJTUlRGNlUxZHdWbVF3YkhGaU0yaFBWa2RrZWxOWGNGWmxSV3h4WWpOc1RtVnRUbnBUVjNCV1pWVnNjV0l6YkU5V1JrWjZVMWR3Vm1WcmJIRmlla3BRVVROa2NGUnNVbEpoVlRseFUxaHdUMkZZWkhCVWJGSldZVlU1Y1ZKWWJFOVZNMlJ3Vkd4U1dtRlZPWEZYVkZaTlVUQnJlRlJ1YkVwT2F6RlZWVmhPU21Gc1ZUQlRWM0IyVGtVNVJHUXliRTlXUjNSd1ZESndSbVZWT1VSa01teFBZV3RHY0ZReWNFWmxWVFZFWkRKc1QyRnJWbkJVTW5CS1pEQXhSR1F5YkU5aGEyeHdWREp3U21Rd09WUmtNbXhQWVdzeGNGUXljRVpPVlRWRVpESnNUMkZzUm5CVU1uQkdUVVUxUkdReWJFOWhiRlp3VkRKd1NtUXdNVFZrTW14UFlXeHNjRlF5Y0VaTlZYaEVVMVJLVDJWVmF6SlVWM0JDWld0NFJGTlVTbEJSTUdzeVZGZHdRbVF3ZUVSVFZFcFFWVEJyTWxSWWNFcGpNR3h4V1ROa1NtRnRPVFZVVmxKU1l6QnNjVmt6YUVwaGJUazFWR3hTUm1Nd2JIRlpNMnhLWVcwNE1GUldUak5oVlRVMlZGZHNVR0ZyVlRCVU1FNHpZVlUxTmxWWGJGQmhhMVY1VkZkc00yRlZOVFpXVjJ4UVlXdFdNMVJzVGpOaFZUVTJWMWRzVUdGdFRURlVSVTVLVFRBMU5WTlVXbEJTUjA1NlUxZHdhazVGYkhGaWVrcFFVVE5rY0ZSdWNISmhWVGx4VWxSQ1RsVXpaSEJVTUZKQ1lWVTVjVmRZWkUxUk1Hc3dWRlpPU2s1ck9VVmFNMDVLWVcxa05WTlhjSFpPUlRWRVpESnNVRkpGTVhCVU1uQmFUVlY0UkZOVVVrOVJNR3N5Vkd0U1dtTXdiSEZhZWtaS1lXMDVORlJWVWtKak1HeHhXbnBLU21GdE9UVlVWM0J1WXpCc2NWcDZUa3BoYlRnd1ZEQk9NMkZWT1VWYU1teFFZV3RzTTFSWGJETmhWVGxGWVRKc1VHRnJNVFZVUlU1S1RsVXhSRk5VV2s1V1IwNDFWRVZPU2s1Vk1WUlRWRnBPVmtWRk1WUkZUa3BPVlRGd1UxUmFUMVpGUm5wVFYzQnlaV3RzY1dJemJFNVNSbXg2VTFkd2NrMUZiSEZpTTJ4T1ZrWkdlbE5YY0hKTlZXeHhZak5zVDFKR1JucFRWM0J5VFd0c2NXSXphRTVTUmxaNlUxZHdjazB3YkhGaWVrWlFWVE5rY0ZReFVtNWhWVGx4VWxob1RsRXpaSEJVTVZKeVlWVTVjVkpVU2sxUk1HdzBWRlZTUW1GVk9YRlNWRlpQWlZoa2NGUldVa0psUld4eFlqTnNUbEpGTVhwVFYzQkdaREF4Y0ZOVVdrOWhXR1J3VkZaU1FtVnJiSEZpTTJoT1VUTmtjRlJXVWtKTlJXeHhZbnBDVG1WWVpIQlVWbEpDVFZWc2NXSjZUazFSTUd3MFZGVlNXbUZWT1hGVVZFWk5VVEJzTkZSVlVtcGhWVGx4VTFSQ1VGRXpaSEJVVmxKQ1RrVnNjV0l6YUU5U1JteDZVMWR3Um1Rd09WUlRWRnBPVmtaV00xUkZUa3BsUlRGVlVWZHNVR0ZyVlRGVVdHd3pZVlV4VlZKWWFFcGhiVGsxVkd0U1VtTXdiSEZTV0doT1lWVnJNbFJXVWxwTmEzaEVVMWhvVGxaRk1YQlVNbkJHWldzNVZHUXliRTVXUlZWM1UxZHdkbVZGT1VWVFdFNUtZV3RXTkZSc1RrcE9helUyV2pOT1NtRnJWalJVYld4S1Rtc3hWVlpZYUUxUk1HdzBWRlpTYW1GVk9YRlNWRkpOVVRCc05GUldVbTVoVlRseFZWaE9TbUZyVmpSVU1VNUtUbXMxY1ZWWVRrcGhhMVkxVkZWT1NrNXJOVlZXV0U1S1lXdFdOVlJXVGtwT2F6RnhVbFJHVFZFd2JEUlVWM0JLWVZVNWNWSllhRTVWTTJSd1ZGWlNTbVZyYkhGaU0yaFFWa2QwZWxOWGNFWmxWVFZFVTFSYVVGWkhaSHBUVjNCR1pWVTFWRk5VV2xCUk0yUndWRlpTU2sxcmJIRmlNM0JOVVRCc05GUlhjR3BoVlRseFZWaHNUVkV3YkRSVVYzQnVZVlU1Y1ZKWVpGQlZNMlJ3VkZaU1NrNVZiSEZpTTJoUVZrWldlbE5YY0VabGF6RkVVMVJhVDJWclJucFRWM0JHWldzeFZGTlVXazloYTBaNlUxZHdSbVZyTVhCVFZGcE9Wa1V3TVZSRlRrcGxSVEUyVkZkc1VHRnJWVEZVYTA0ellWVXhWVlJVUWtwaGJUazBWRlpTUm1Nd2JIRlNXSEJQVlRCck1sUldVbHBsYTNoRVUxaG9UbVZzYkhCVU1uQkdUbFV4Y0dReWJFNVdSVEI2VTFkd2RrMXJNWEJrTW14T1ZrVXdNRk5YY0habFJUVTFaREpzVGxaRk1ERlRWM0IyWlZVeFJWUllUa3BoYTFWM1ZGVk9TazVyTVZWU1ZFNU5VVEJzTkZSclVrWmhWVGx4VlZSR1RWRXdiRFJVYTFKS1lWVTVjVkpVUWs1aFdHUndWRlpTVW1WcmJIRmlNMmhRVlROa2NGUldVbEpOUld4eFlqTm9UMkZzYkhwVFYzQkdUVVUxVkZOVVdsQldSVVo2VTFkd1JrMUZOWEJUVkZwT1ZrZE9ORlJGVGtwbFJUVkZXVEpzVUdGdGN6RlVSVTVLWlVVMVJWb3liRkJoYTFWNlZGVk9NMkZWTVZWVlZGWktZVzA1TkZSc1VsSmpNR3h4VWxSR1RsRXdhekpVV0hCcVl6QnNjVkpVUms1Vk1Hc3lWRmR3UWs1RmVFUlRXR2hQVmtWc2NGUXljRVpOUlRVMVpESnNUbFpHVmpaVFYzQjJaVVV4TldReWJFNVdSbFYzVTFkd2RtVkZPVlZYV0U1S1lXdFZlRlJzVGtwT2F6VlZWMWhPU21GclZYaFViV3hLVG1zeFZWcDZTazFSTUd3MFZHeFNhbUZWT1hGU1ZGSk9VVE5rY0ZSV1VsWk9SV3h4WWpOb1VGWkdSbnBUVjNCR1RWVTVWRk5VV2s1aGEyd3pWRVZPU21WRk5YRlJWMnhRWVd0V05WUlhiRE5oVlRGVlYxaG9TbUZ0T0hkVWJXd3pZVlV4VlZkWWJFcGhiVGsxVkZkd1NtTXdiSEZTVkVwT1pWVnJNbFJXVW1wTmEzaEVVMWhvVDJGc1JuQlVNbkJxWkRCNFJGTllhRTloYkZad1ZESndWazVWZUVSVFdHaFBZV3hzY0ZReWNFWmxhM2hFVTFob1QyRnRUbkJVTW5CS1pWVXhOV1F5YkU1V1Jtc3dVMWR3ZGs1Vk1WUmtNbXhPVmtack1WTlhjSFpsUlRGRldqTk9TbUZyVlhwVVZVNUtUbXN4VlZsNlRrMVJNR3cwVkc1d1JtRlZPWEZUV0doUFVUTmtjRlJXVW1wbFZXeHhZbnBPVG1GWVpIQlVWbEpxWld0c2NXSXpjRTVSTTJSd1ZGWlNhazFGYkhGaU0yeE9ZV3RzZWxOWGNFWk5NRFZVVTFSYVQxSkZiSHBUVjNCR1RUQTFjRk5VV2s1aGEydDNWRVZPU21WRk5UWlpNbXhRWVd0c00xUldUak5oVlRGVldYcFNTbUZ0T0hoVVYyd3pZVlV4VlZsNlZrcGhiVGsxVkZaU1JtTXdiSEZTVkZKT1VUQnJNbFJYY0ZKTmEzaEVVMWhvVUZKRlZuQlVNbkJHVGtVMVJHUXliRTVXUjJRMVUxZHdkbVZWTVZSa01teE9Wa2RrTmxOWGNIWk9WVFZ3WkRKc1RsWkhZM2RUVjNCMlpVVTFSV0V6VGtwaGExVXdWR3hPU2s1ck9WVmhNMDVLWVd0Vk1GUnRiRXBPYXpGVlVWaG9UVkV3YkRSVU1GSnFZVlU1Y1ZKVVFrOWxXR1J3VkZaU2JrNUZiSEZpTTJoUFpXc3hlbE5YY0VaT1JUbFVVMVJhVG1Gc1JUQlVSVTVLWlVVNVZWRlhiRkJoYTFWNVZHMXNNMkZWTVZWaE0yaEtZVzA1TmxSV1RqTmhWVEZWWVROc1NtRnRPVFJVYlhCeVl6QnNjVkpVVms1bFZXc3lWREZTVG1Nd2JIRlNWRlpQVVRCck1sUlhjRVpOUlhoRVUxaG9VRlpHVm5CVU1uQkdaVlUxUkdReWJFNVdSM041VTFkd2RtVlZPVVJrTW14T1ZrZHplbE5YY0haTmF6RlVaREpzVGxaSGN6QlRWM0IyVFZVNVZHUXliRTVXUjNNeFUxZHdkbVZyT1VSa01teE9ZV3RHTTFOWGNIWmxSVEZGVVZoT1NtRnJiRE5VVms1S1RtczFWVkpZVGtwaGEyd3pWRmRzU2s1ck5VVmFNMDVLWVd0c00xUlliRXBPYXpsVllUTk9TbUZyYkROVWEwNUtUbXN4VldFemFFMVJNR3cxVkZWU1ZtRlZPWEZTVkZaUFpWaGtjRlJYY0VKTmEyeHhZbnBHVUZFelpIQlVWM0JDVFRCc2NXSXphRkJTUlVaNlUxZHdTbVF3T1VSVFZGcE9Wa1pWZDFSRlRrcGxWVEZGWVRKc1VHRnJWWGxVYm13ellWVXhjVkpZWkVwaGJUazBWRmR3Um1Nd2JIRlRXR2hPVlRCck1sUlhjRUpOVlhoRVUxaHNUbFpGYkhCVU1uQktaV3MxY0dReWJFNWhhMVkyVTFkd2RtVlZNVlJrTW14T1lXdFZkMU5YY0habFJUbEZXVE5PU21GcmJEUlViRTVLVG1zeGNWUlljRTFSTUd3MVZGWlNXbUZWT1hGVFZFWk9aVmhrY0ZSWGNFWk5NR3h4WW5wS1QyRllaSEJVVjNCR1RrVnNjV0o2U2s5aFdHUndWRmR3Ums1VmJIRmlNMmhRVWtWc2VsTlhjRXBsVlRGRVUxUmFUbUZyTUhoVVJVNUtaVlV4Y1ZKWGJGQmhhMncwVkZkc00yRlZNWEZUV0d4S1lXMDVObFJYYkROaFZURnhVMWh3U21GdE9UUlVXSEJhWXpCc2NWTlliRTlSTUdzeVZHNXdSbU13YkhGVFdHeFBWVEJyTWxSV1VtNU5NSGhFVTFoc1RtRnNiSEJVTW5CS1pWVTVSR1F5YkU1aGEydDZVMWR3ZG1WVk1UWlVXRTVLWVd0c05WUXdUa3BPYXpVMlZWaE9TbUZyYkRWVU1VNUtUbXN4VlZKVVVrMVJNR3cxVkZod1FtRlZPWEZTV0d4T1VUTmtjRlJYY0U1bFJXeHhZbnBLVUZVelpIQlVWM0JPWlZWc2NXSXphRkJXUlVaNlUxZHdTbVZyTVRWVFZGcFBaV3N4ZWxOWGNFcGxhelZFVTFSYVRsWkdSalJVUlU1S1pWVXhObFpYYkZCaGJFWTFWRVZPU21WVk1UWlhWMnhRWVcxek1GUkZUa3BsVlRFMldUSnNVR0ZyTURGVVJVNUtaVlV4TmxveWJGQmhhMVY0VkZoc00yRlZNWEZVVkZaS1lXMDRNVlJYYkROaFZURnhWVmhrU21GdE9IcFVNRTR6WVZVeGNWVllhRXBoYlRrMVZHMXNNMkZWTVhGVldHeEtZVzA1TlZSV1VuSmpNR3h4VTFSQ1RtVlZhekpVVmxKeVRrVjRSRk5ZYkU5U1JrWndWREp3Umsxck9VUmtNbXhPWVd4RmVGTlhjSFpsUlRVMldUTk9TbUZyYTNkVWJXeEtUbXMxY1ZaWVRrcGhhMnQzVkc1c1NrNXJNWEZUV0doTlVUQnNOVlJyVW01aFZUbHhVMWhrVG1GWVpIQlVWM0JTVGxWc2NXSXphRTloYXpGNlUxZHdTazFWTVVSVFZGcE9Wa1ZyTUZSRlRrcGxWVFZWVWxkc1VHRnNSVEZVUlU1S1pWVTFWVk5YYkZCaGExWTBWRlpPTTJGVk1YRldXSEJLWVcwNU5GUldVa0pqTUd4eFUxUkdUMUV3YXpKVVZsSldZekJzY1ZOVVJrOVZNR3N5Vkcxd2JtTXdiSEZUVkVaUFlWVnJNbFJYY0VwbFJYaEVVMWhzVDFaSFRuQlVNbkJLWlZVNVJHUXliRTVoYkZVd1UxZHdkbVZyTlRWa01teE9ZV3hWTVZOWGNIWmxWVFUxWkRKc1RtRnNiRE5UVjNCMlRrVXhjR1F5YkU1aGJHdzBVMWR3ZG1WRk9WVmFNMDVLWVd0cmVWUlhiRXBPYXpWVVpESnNUbUZzYkRaVFYzQjJUVEI0UkZOWWJFOWhiRVp3VkRKd1NtVkZPVVJrTW14T1lXeHJlRk5YY0habFJURnhWRmhPU21GcmEzbFViV3hLVG1zeGNWTlVVazFSTUd3MVZHMXdhbUZWT1hGU1ZFSk9VVE5rY0ZSWGNGcE9SV3h4WW5wS1VGRXpaSEJVVjNCYVRsVnNjV0l6YUU5U1JWWjZVMWR3U2swd01VUlRWRnBPVmtkT05GUkZUa3BsVlRVMlVsZHNVR0Z0WTNkVVJVNUtaVlUxTmxOWGJGQmhhMVV4VkZkc00yRlZNWEZaTTNCS1lXMDVNMVJGVGtwbFZUVTJWVmRzVUdGcmJEUlVSVTVLWlZVMU5sWlhiRkJoYkd3MFZFVk9TbVZWTlRaWFYyeFFZV3RXTlZSRlRrcGxWVFUyV1RKc1VHRnJhekJVUlU1S1pWVTFObG95YkZCaGEyeDZVMWR3U2swd09WUlRWRnBPVmtaV2VsTlhjRXBPUlRGRVUxUmFUbFpHVlhwVVJVNUtaVlU1UlZKWGJGQmhiRlkxVkVWT1NtVlZPVVZUVjJ4UVlXdHNNMVF3VGpOaFZURnhXak53U21GdE9UUlVXSEJ5WXpCc2NWTlVVazlSTUdzeVZGZHdibU13YkhGVFZGSlBWVEJyTWxSdGNFSmpNR3h4VTFSU1QyRlZhekpVYTFKR1l6QnNjVk5VVWs5bFZXc3lWRmR3VW1Nd2JIRlRWRkpRVVRCck1sUlhjRXBOTUhoRVUxaHNVRkpIZEhCVU1uQktZekJzY1ZOVVZrNVJNR3N5VkZoc00yRlZNWEZoTTJoS1lXMDVORlJGVGtwbFZUbFZVMWRzVUdGclJucFRWM0JLVGxVeE5WTlVXazVYUkVFNVNXbDNhV0ZZVG5wSmFtOXBZVWhTTUdOSVRUWk1lVGxvV1RKT2RtUlhOVEJqZVRWdVlqSTVibUpIVlhWWk1qbDBTV2wzYVdGWFJqQkphbTk0VGxSRmQwNXFUWGxQVkdzMVRFTktiR1ZJUVdsUGFrVXhUVlJCTWsxNldURlBWR3c1TGs5aE5HaEZNWEo1Ykd0RE1XTm1UeTF0V2s5SVlsUXRTRlp1U1VkNlFVUkRXazFxZEZSa2RVNVBORzlvY1dkWFNWSkpTbGREYUhaaWNscEhSMFpYY2tFeVIzVXlNRVZWVWtsdE5HNUNWMjF4VTAxTWNtNW1hSHBZWVZaUk5XNTZRVWxIZUdwV1h6WlFPV0Z0VEZCSWVGRlpiWEpGY1U1RmFrTlBNRTB5ZWpGVlFVSTVWRlZ3Y0VoTWNtNUZNWGx6UzNWRE0yTklhRGRVTjJwdGF6ZHZNM1JsV0ZScU1UQm1WMUJYVUdzNWRYaHRaV1l3WDAxd1JqQTFTSEJVTkVwR2JtSkZlV1ZaUjJNNVRtdElTemQzUkdaTldHMXNOalJHVjNCUGFHdG5jRWxYWWxjeVkwbDZhbkp6VGpsQ1NVZGFjVlJ2TFV3MlFVTTJWRUZmVVhSeVlWQjZkalJvVUZneWMyOTZObk01VEdSbWVrSnRjRlEyWnpsSmRVazRkamxuT0d4S1JGUlRaRXB0TTJ0RmRuTlhORFozUzNoMmNIQXhPVGRJZERSRGNXMUpSelpuUzNwcGRFTk5aM0JqV1U1d01rSlJWV1ZwUVNJc0luUnZhMlZ1U1VSS1UwOU9JanA3SW1GNmNDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW1GMVpDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW5OMVlpSTZJakV3TXpFMU5EUTVNVGN4TVRJM05URXlOak0wTWlJc0ltVnRZV2xzSWpvaWRHVnpkR0Z1WkhSb2FXNXJNekl4UUdkdFlXbHNMbU52YlNJc0ltVnRZV2xzWDNabGNtbG1hV1ZrSWpvaWRISjFaU0lzSW1GMFgyaGhjMmdpT2lJeU1rWnlPV2wyYURWaWVYaGxMV3RYVGpocGIydFJJaXdpYm05dVkyVWlPaUpsZVVsM1NXcHZNRTlEZDJsTlUwazJUVlJOZDB4RFNYbEphbTk0VEVOSmVrbHFiM3BPUTNkcFRrTkpOazVFWjNOSmFsVnBUMnBGZWt4RFNUSkphbTh5VEVOSk0wbHFielZNUTBrMFNXcHZNRTFwZDJsUFUwazJUVlJOTUV4RFNYaE5RMGsyVG5wSmMwbHFSWGhKYW05NFRYcFJjMGxxUlhsSmFtOTVUa1JqYzBscVJYcEphbTk0VFhsM2FVMVVVV2xQYWtWelNXcEZNVWxxYjNoTVEwbDRUbWxKTmsxVGQybE5WR05wVDJwVmMwbHFSVFJKYW05M1RFTkplRTlUU1RaTmVYZHBUV3BCYVU5cVJYcE5RM2RwVFdwRmFVOXFSWE5KYWtsNVNXcHZlRTVUZDJsTmFrMXBUMnBCYzBscVNUQkphbTh3VDBOM2FVMXFWV2xQYWtWNlRVTjNhVTFxV1dsUGFrVnpTV3BKTTBscWIzaE5RM2RwVFdwbmFVOXFTWE5KYWtrMVNXcHZlRTE2UVhOSmFrMTNTV3B2ZUV4RFNYcE5VMGsyVFZOM2FVMTZTV2xQYWtGelNXcE5la2xxYjNoT1ZFRnpTV3BOTUVscWJ6Vk1RMGw2VGxOSk5rOUVaM05KYWsweVNXcHZlRTVxUVhOSmFrMHpTV3B2ZVU1RWEzTkphazAwU1dwdmVFNUVRWE5KYWswMVNXcHZlVTE2YTNOSmFsRjNTV3B2ZUUxRVFYTkphbEY0U1dwdmVrNURkMmxPUkVscFQycEpNVTFUZDJsT1JFMXBUMnBGTUUxcGQybE9SRkZwVDJwRk5VOVRkMmxPUkZWcFQycEpkMHhEU1RCT2FVazJUVlJOTTB4RFNUQk9lVWsyVFdwQmVVeERTVEJQUTBrMlRWUm5jMGxxVVRWSmFtOTRUMFJOYzBscVZYZEphbTk0VGxSbmMwbHFWWGhKYW05NVRYcGpjMGxxVlhsSmFtOTVUbFJSYzBscVZYcEphbTh5VDBOM2FVNVVVV2xQYWtsNlRtbDNhVTVVVldsUGFrVjVUbE4zYVU1VVdXbFBhbGsxVEVOSk1VNTVTVFpOVkZGelNXcFZORWxxYnpSUFEzZHBUbFJyYVU5cVJYbFBRM2RwVG1wQmFVOXFSWGxPUTNkcFRtcEZhVTlxU1hkTlEzZHBUbXBKYVU5cVNYZFBVM2RwVG1wTmFVOXFSVFZPUTNkcFRtcFJhVTlxUlRCT1EzZHBUbXBWYVU5cVNYZE5lWGRwVG1wWmFVOXFSVEZNUTBreVRubEpOazFxUVhwTVEwa3lUME5KTmsxcVFYZE1RMGt5VDFOSk5rMTZTWE5KYW1OM1NXcHZlVTFVVVhOSmFtTjRTV3B2ZVU1VVJYTkphbU41U1dwdk5FMVRkMmxPZWsxcFQycEZORTlEZDJsT2VsRnBUMnBGTWsxcGQybE9lbFZwVDJwRmQwNVRkMmxPZWxscFQycGpOVXhEU1ROT2VVazJUMFJqYzBscVl6UkphbTh5VDBOM2FVNTZhMmxQYWtVd1RWTjNhVTlFUVdsUGFsbDNURU5KTkUxVFNUWlBSR2R6U1dwbmVVbHFielJPUTNkcFQwUk5hVTlxV1RGTVEwazBUa05KTms1RVdYTkphbWN4U1dwdmVFMUVRWE5KYW1jeVNXcHZlVTFxWjNOSmFtY3pTV3B2TkU5RGQybFBSR2RwVDJwSmQwMXBkMmxQUkd0cFQycE5lVXhEU1RWTlEwazJUVlJqZVV4RFNUVk5VMGsyVFZSQk5VeERTVFZOYVVrMlRsUkJjMGxxYTNwSmFtOTVUVVJaYzBscWF6QkphbTk1VFZSUmMwbHFhekZKYW05NVRrUlJjMGxxYXpKSmFtOTRUVVJWYzBscWF6TkphbTh4VDFOM2FVOVVaMmxQYWtWNFRVTjNhVTlVYTJsUGFrVXlURU5KZUUxRVFXbFBha1UxVG5sM2FVMVVRWGhKYW05NVRVUk5jMGxxUlhkTmFVazJUbWwzYVUxVVFYcEphbTk0VFVOM2FVMVVRVEJKYW04d1RYbDNhVTFVUVRGSmFtOHpURU5KZUUxRVdXbFBhazB4VEVOSmVFMUVZMmxQYWtrd1QwTjNhVTFVUVRSSmFtOTRUa1JaYzBscVJYZFBVMGsyVFZSVmQweERTWGhOVkVGcFQycEZOVTE1ZDJsTlZFVjRTV3B2ZVU1RVVYTkpha1Y0VFdsSk5rMVVXVEpNUTBsNFRWUk5hVTlxUlhwUFUzZHBUVlJGTUVscWIzaFBSRWx6U1dwRmVFNVRTVFpPZW1kelNXcEZlRTVwU1RaTlZGVjRURU5KZUUxVVkybFBha1UwVEVOSmVFMVVaMmxQYWxGelNXcEZlRTlUU1RaT2FsRnpTV3BGZVUxRFNUWk9WRlZ6U1dwRmVVMVRTVFpOYWtVeFRFTkplRTFxU1dsUGFrVjRUVk4zYVUxVVNYcEphbTk0VDFScmMwbHFSWGxPUTBrMlQxUm5jMGxxUlhsT1UwazJUME4zYVUxVVNUSkphbTk2VEVOSmVFMXFZMmxQYWxGNVRFTkplRTFxWjJsUGFrVjNUMU4zYVUxVVNUVkphbTk0VDFSVmMwbHFSWHBOUTBrMlRucEJjMGxxUlhwTlUwazJUbXBCYzBscVJYcE5hVWsyVFZSTk5VeERTWGhOZWsxcFQycEZOVTVEZDJsTlZFMHdTV3B2ZUUxVVJYTkpha1Y2VGxOSk5rMVVXWHBNUTBsNFRYcFphVTlxUlRWTmFYZHBUVlJOTTBscWJ6Sk5hWGRwVFZSTk5FbHFiM2hPZVhkcFRWUk5OVWxxYjNsTlJFMXpTV3BGTUUxRFNUWk5WRVV6VEVOSmVFNUVSV2xQYWxFeFRFTkplRTVFU1dsUGFrVXdUV2wzYVUxVVVYcEphbTk0VDFOM2FVMVVVVEJKYW05NFRtcFpjMGxxUlRCT1UwazJUMVJCYzBscVJUQk9hVWsyVFZSamVFeERTWGhPUkdOcFQycHJOVXhEU1hoT1JHZHBUMnBGTTAxRGQybE5WRkUxU1dwdmVFNVVVWE5KYWtVeFRVTkpOazE2WTNOSmFrVXhUVk5KTmsxcVFUUk1RMGw0VGxSSmFVOXFSVEJPZVhkcFRWUlZla2xxYjNoTmVYZHBUVlJWTUVscWIzaFBWRmx6U1dwRk1VNVRTVFpPVkZselNXcEZNVTVwU1RaTlZHY3lURU5KZUU1VVkybFBha1UwVFVOM2FVMVVWVFJKYW05NFQxUlJjMGxxUlRGUFUwazJUV3BKZDB4RFNYaE9ha0ZwVDJwRmVVMXBkMmxOVkZsNFNXcHZNRTVwZDJsTlZGbDVTV3B2ZVUxcVNYTkpha1V5VFhsSk5rMVVZekpNUTBsNFRtcFJhVTlxWTNkTVEwbDRUbXBWYVU5cVZUVk1RMGw0VG1wWmFVOXFSWHBNUTBsNFRtcGphVTlxU1hsTmVYZHBUVlJaTkVscWJ6Vk5VM2RwVFZSWk5VbHFiM2hOUkdkelNXcEZNMDFEU1RaTlZHTXpURU5KZUU1NlJXbFBha2w0VGtOM2FVMVVZM2xKYW04elRXbDNhVTFVWTNwSmFtOTZUVU4zYVUxVVl6QkphbTk1VFdwSmMwbHFSVE5PVTBrMlRrUkpjMGxxUlROT2FVazJUV3BKTUV4RFNYaE9lbU5wVDJwSmQwMVRkMmxOVkdNMFNXcHZNVTFwZDJsTlZHTTFTV3B2ZVUxVVJYTkpha1UwVFVOSk5rMXFVVEpNUTBsNFQwUkZhVTlxUlRST1EzZHBUVlJuZVVscWIzbE5VM2RwVFZSbmVrbHFielZPYVhkcFRWUm5NRWxxYjNoT1JHdHpTV3BGTkU1VFNUWlBWR3R6U1dwRk5FNXBTVFpOVkVGNFRFTkplRTlFWTJsUGFrVXdUbmwzYVUxVVp6UkphbTk0VG5wTmMwbHFSVFJQVTBrMlRXcFJORXhEU1hoUFZFRnBUMnBGTWs1cGQybE5WR3Q0U1dwdmVrMVRkMmxOVkd0NVNXcHZlRTVxYTNOSmFrVTFUWGxKTms5VVRYTkpha1UxVGtOSk5rMXFSVEJNUTBsNFQxUlZhVTlxUlhsT1EzZHBUVlJyTWtscWIzbFBRM2RwVFZSck0wbHFiekpOVTNkcFRWUnJORWxxYnpGUFUzZHBUVlJyTlVscWIzcFBRM2RwVFdwQmQwbHFiM2hOUkVGelNXcEpkMDFUU1RaT1ZFVnpTV3BKZDAxcFNUWk9SR2R6U1dwSmQwMTVTVFpQVkd0elNXcEpkMDVEU1RaTlZHdDRURU5KZVUxRVZXbFBha1UxVG5sM2FVMXFRVEpKYW04eFQwTjNhVTFxUVROSmFtOTRUMFJCYzBscVNYZFBRMGsyVFZSVk1FeERTWGxOUkd0cFQycEZNazU1ZDJsTmFrVjNTV3B2ZUUxcVJYTkpha2w0VFZOSk5rMXFRVEZNUTBsNVRWUkphVTlxU1hwT2FYZHBUV3BGZWtscWIzbE5VM2RwVFdwRk1FbHFiM2hQUkdOelNXcEplRTVUU1RaTmFrMTZURU5KZVUxVVdXbFBha2t4VFhsM2FVMXFSVE5KYW04eVRtbDNhVTFxUlRSSmFtOHlUbWwzYVUxcVJUVkphbTk0VDBSSmMwbHFTWGxOUTBrMlRXcE5NVXhEU1hsTmFrVnBUMnBKZUUxcGQybE5ha2w1U1dwdmVrMXBkMmxOYWtsNlNXcHZlRTE2V1hOSmFrbDVUa05KTms1NlJYTkpha2w1VGxOSk5rMVVaek5NUTBsNVRXcFphVTlxU1hsUFEzZHBUV3BKTTBscWIzbE5lazF6U1dwSmVVOURTVFpPZWxGelNXcEplVTlUU1RaTlZFVTBURU5KZVUxNlFXbFBha1Y1VFVOM2FVMXFUWGhKYW04eVQxTjNhVTFxVFhsSmFtOTRUMVJCYzBscVNYcE5lVWsyVG5wTmMwbHFTWHBPUTBrMlRWUlJlRXhEU1hsTmVsVnBUMnBSZVV4RFNYbE5lbGxwVDJwck5FeERTWGxOZW1OcFQycE5OVXhEU1hsTmVtZHBUMnBGTVUxNWQybE5hazAxU1dwdk5VMXBkMmxOYWxGM1NXcHZNMDlEZDJsTmFsRjRTV3B2ZVU1cGQybE5hbEY1U1dwdmVVMVVhM05KYWtrd1RYbEpOazFVYXpSTVEwbDVUa1JSYVU5cVJUSlBRM2RwVFdwUk1VbHFiM2hPZW1OelNXcEpNRTVwU1RaT2FsVnpTV3BKTUU1NVNUWk5ha2w0VEVOSmVVNUVaMmxQYWtsM1RXbDNhVTFxVVRWSmFtOTRUbXBOYzBscVNURk5RMGsyVFZSSk5FeERTWGxPVkVWcFQycFJOVXhEU1hsT1ZFbHBUMnBGZUUxVGQybE5hbFY2U1dwdmVFMVVRWE5KYWtreFRrTkpOazFVVlhOSmFra3hUbE5KTms1cVozTkpha2t4VG1sSk5rMXFTWGhNUTBsNVRsUmphVTlxU1hsUFEzZHBUV3BWTkVscWIzcE9lWGRwVFdwVk5VbHFiM2xPZVhkcFRXcFpkMGxxYnpSTmFYZHBUV3BaZUVscWIzaFBWR2R6U1dwSk1rMXBTVFpPVTNkcFRXcFpla2xxYnpOTVEwbDVUbXBSYVU5cVNYaFBRM2RwVFdwWk1VbHFiM2hOYWsxelNXcEpNazVwU1RaTmFrazBURU5KZVU1cVkybFBha1V3VFVOM2FVMXFXVFJKYW04eVQwTjNhVTFxV1RWSmFtOTRUa1JGYzBscVNUTk5RMGsyVFZSamVFeERTWGxPZWtWcFQycG5NRXhEU1hsT2VrbHBUMnBGTlUxcGQybE5hbU42U1dwdmQweERTWGxPZWxGcFQycEplRXhEU1hsT2VsVnBUMnBaZUV4RFNYbE9lbGxwVDJwRmVVeERTWGxPZW1OcFQycEpORXhEU1hsT2VtZHBUMnBKYzBscVNUTlBVMGsyVFZSVmMwbHFTVFJOUTBrMlRWUlZNMHhEU1hsUFJFVnBUMnBWZVV4RFNYbFBSRWxwVDJwSmQwOURkMmxOYW1kNlNXcHZlRTE2YTNOSmFrazBUa05KTmsxcVozTkpha2swVGxOSk5rNXFRWE5KYWtrMFRtbEpOazVFUlhOSmFrazBUbmxKTmsxcVVYTkpha2swVDBOSk5rMXFTVE5NUTBsNVQwUnJhVTlxU1hOSmFrazFUVU5KTmsxNWQybE5hbXQ0U1dwdmVFeERTWGxQVkVscFQycEJjMGxxU1RWTmVVazJUVmd3UFNJc0ltbHpjeUk2SW1oMGRIQnpPaTh2WVdOamIzVnVkSE11WjI5dloyeGxMbU52YlNJc0ltbGhkQ0k2SWpFMU1UQTJNekk1T1RraUxDSmxlSEFpT2lJeE5URXdOak0yTlRrNUlpd2lZV3huSWpvaVVsTXlOVFlpTENKcmFXUWlPaUl6WTJVMFlUazNaRFV3TW1GbU1EVTRaV0kyTm1Gak9HUTNNekJoTlRreVlXSTNZMlZoTjJZeEluMTlcIixcbmV4cGlyZXM6XCIxNTEwNjM2NTk5XCJ9LFxuLy9rZXlQYWlyOnsgcHVibGljOiBuZXcgVWludDhBcnJheShbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMTUwLDksODgsMTYwLDI0OSwxNDAsMjM5LDEwMCwzNCwyNTEsMTQyLDE5OSwyMCwxMzcsMjAyLDE4LDE4MywxNTgsMjM3LDI1NCw2OCwyMzYsMTI1LDY5LDE0LDg4LDEyOCwxMjQsMjAwLDIwOSwxOTQsMTQ0LDIwMywxNSwyMDMsMjAwLDMyLDIxNCwyNTEsODEsMTg4LDE2MiwxMDUsNzksODcsNjgsMTQxLDYwLDg4LDg0LDY1LDQ2LDEwMCwyMjgsODgsMjAyLDMyLDE3MiwxMDksNTAsMjA2LDIxNCwyNDQsMTA1LDU5LDExMCwxNiwxOTcsMjAzLDYsMTAsNDMsNywzNSwyNDgsMTQ2LDE1MCwxOTMsMjQ0LDE2NiwxMzksMTgyLDc4LDE1MSwxOCw0LDY0LDU1LDIxNSwxMTEsMTk5LDk4LDgsMyw0MiwxMDksMTk1LDcwLDYwLDEzOSwxOTQsMTExLDE2MywxOTIsNjIsMTcsMjAzLDExNyw0NSwxNDIsMTksMTY2LDkwLDE3MSw5OSwxNzAsMTU0LDM3LDIwOCwxNDcsMTMsMTk2LDU2LDE4NiwxODAsMTk0LDIyMCwxMjIsNDYsMjIyLDE3Niw3MCw1OSwxMywyMjMsOTEsMTA4LDE3NywyMTQsNzIsMzAsMjIyLDQyLDIyNCwyMDEsNTIsMjExLDI0NiwxODQsMjEsOTYsMTQ5LDk5LDEwMSwxNDcsMTczLDI0OCwxNjYsMzEsMTY5LDkzLDIxNCwxMjQsMjgsNjEsNTksMzgsMTAwLDUxLDQ4LDk5LDE5MSwxOTcsNTgsMTgwLDE1NCwxNjcsMTIxLDIwNSwyMzYsMjEsMTg3LDIzMywyNTMsNjYsNjYsMTgyLDIzNSwyMTIsMzIsMTM2LDcxLDE4NywyMjgsMjMzLDc0LDExOCwxMjAsNjksMTkwLDczLDE0MSw0Miw5OCwzOSwxNTMsOTIsNzgsMjYsMjE5LDE5OCwxNjgsMTc3LDY1LDIyMSwyMDIsMTYzLDEyOCw0OSwxMTEsMTEwLDE1LDY4LDIyMSwyMjgsMzcsMjcsODIsMTk4LDUsNywyMTgsMTIzLDIyOCwxNDAsNjgsMTQxLDE3MSw4NCwxOTIsMCwyMSw2MSwxMiwyOCwyLDE1LDE1Nyw1MiwyMDgsMTM5LDI4LDYwLDQxLDI0LDIyNywyLDMsMSwwLDFdKSxcbi8vcHJpdmF0ZTogeyBuZXcgVWludDhBcnJheShbNDgsMTMwLDQsMTg4LDIsMSwwLDQ4LDEzLDYsOSw0MiwxMzQsNzIsMTM0LDI0NywxMywxLDEsMSw1LDAsNCwxMzAsNCwxNjYsNDgsMTMwLDQsMTYyLDIsMSwwLDIsMTMwLDEsMSwwLDE1MCw5LDg4LDE2MCwyNDksMTQwLDIzOSwxMDAsMzQsMjUxLDE0MiwxOTksMjAsMTM3LDIwMiwxOCwxODMsMTU4LDIzNywyNTQsNjgsMjM2LDEyNSw2OSwxNCw4OCwxMjgsMTI0LDIwMCwyMDksMTk0LDE0NCwyMDMsMTUsMjAzLDIwMCwzMiwyMTQsMjUxLDgxLDE4OCwxNjIsMTA1LDc5LDg3LDY4LDE0MSw2MCw4OCw4NCw2NSw0NiwxMDAsMjI4LDg4LDIwMiwzMiwxNzIsMTA5LDUwLDIwNiwyMTQsMjQ0LDEwNSw1OSwxMTAsMTYsMTk3LDIwMyw2LDEwLDQzLDcsMzUsMjQ4LDE0NiwxNTAsMTkzLDI0NCwxNjYsMTM5LDE4Miw3OCwxNTEsMTgsNCw2NCw1NSwyMTUsMTExLDE5OSw5OCw4LDMsNDIsMTA5LDE5NSw3MCw2MCwxMzksMTk0LDExMSwxNjMsMTkyLDYyLDE3LDIwMywxMTcsNDUsMTQyLDE5LDE2Niw5MCwxNzEsOTksMTcwLDE1NCwzNywyMDgsMTQ3LDEzLDE5Niw1NiwxODYsMTgwLDE5NCwyMjAsMTIyLDQ2LDIyMiwxNzYsNzAsNTksMTMsMjIzLDkxLDEwOCwxNzcsMjE0LDcyLDMwLDIyMiw0MiwyMjQsMjAxLDUyLDIxMSwyNDYsMTg0LDIxLDk2LDE0OSw5OSwxMDEsMTQ3LDE3MywyNDgsMTY2LDMxLDE2OSw5MywyMTQsMTI0LDI4LDYxLDU5LDM4LDEwMCw1MSw0OCw5OSwxOTEsMTk3LDU4LDE4MCwxNTQsMTY3LDEyMSwyMDUsMjM2LDIxLDE4NywyMzMsMjUzLDY2LDY2LDE4MiwyMzUsMjEyLDMyLDEzNiw3MSwxODcsMjI4LDIzMyw3NCwxMTgsMTIwLDY5LDE5MCw3MywxNDEsNDIsOTgsMzksMTUzLDkyLDc4LDI2LDIxOSwxOTgsMTY4LDE3Nyw2NSwyMjEsMjAyLDE2MywxMjgsNDksMTExLDExMCwxNSw2OCwyMjEsMjI4LDM3LDI3LDgyLDE5OCw1LDcsMjE4LDEyMywyMjgsMTQwLDY4LDE0MSwxNzEsODQsMTkyLDAsMjEsNjEsMTIsMjgsMiwxNSwxNTcsNTIsMjA4LDEzOSwyOCw2MCw0MSwyNCwyMjcsMiwzLDEsMCwxLDIsMTMwLDEsMCwxLDE3LDIsMjQwLDE5NSw4MCwwLDc4LDI0MSwxMDQsMTIsMiwxNTEsMjM0LDcxLDEyMyw2Niw2MiwxMzcsMzAsMjIxLDEwMSwxNDEsMTUzLDE4NiwxNDIsMjI0LDM4LDIzNywxNDgsMTI2LDE5OSw5NywxNzgsMzEsNTQsMjE5LDIwMCwyMzAsMTksMTA2LDIxMSwwLDEwLDI0Niw0MiwwLDE5MCw4NCwyMjksMTg3LDIxLDEzOSw0MywxODIsODcsMjE4LDIwMyw2OCw3NiwyNiwxNjcsMjQwLDIxMCwxMjAsMTcwLDQzLDIwMCwxNzQsMjA0LDE0OSwxNzYsMjM0LDI0MCw2Miw0LDYyLDE1LDIxLDIyMywyMzcsMjE3LDc2LDE4NCwxODEsNDQsMjMyLDIyOCwxNTYsMTg0LDYyLDQ2LDE3LDksMTMxLDk5LDIyMCwxLDI0OSw3NiwxMzYsODksMTEzLDMzLDkyLDIxOCw2MywyMjAsMTIxLDEzNSwxNTAsNDMsNDMsOTUsMTI0LDQyLDEwLDExMiwyMDIsOSw2MiwyMjYsMTYzLDg2LDE1MSwxOCwwLDQ1LDEzMiw3LDIxNSwxODEsMTQzLDYwLDIwMywxMjEsNzcsNzgsMjQ5LDEzMywxNiwxNzMsMTIxLDExNywxNDEsMTg4LDI0LDc1LDIzMiwxNzgsODcsOTUsMTE1LDE0NiwxNzAsMTAzLDIxOSwyMDQsMTIxLDIxLDI0NiwyMjEsMTg0LDksODQsMjUzLDkxLDMyLDIxMyw2NSwxNjMsMTY1LDIyLDM5LDYzLDM2LDg1LDE2OCwxOTYsNzUsODcsNDUsMjAwLDExMyw1NSwyNiwyMjEsMTk0LDE2MiwxNjYsNDgsMjI5LDEwMiwyMTgsMjEwLDg2LDk3LDE1Niw4NSwxMjIsNzMsMTI2LDUxLDk4LDgsMjQ3LDQxLDE5MSwxNTMsMTYyLDIwOCwxODMsMTE0LDk1LDEzMywzNCw3LDkyLDEzNSw0MSw5NywxNzIsNjgsNTksMjMsMjA2LDI3LDgwLDEyMCw5LDMzLDAsMjMyLDIzNyw1NywyMDcsMjA2LDIzOCwxMjAsMTgsNDAsMjQzLDE1OSwxMzksOTksMTA2LDY5LDIwNiwyNDUsMTUzLDE4MCwxODYsOTIsMjMyLDI1MCwxNDksMiwxMjksMTI5LDAsMjA2LDE4NywyMSw4MiwxOTUsMjIwLDEwNSwxOTAsNjIsNDMsMTM5LDE0MCwxMDcsNzcsNzYsODAsMTc3LDMwLDE2LDIwLDE4NiwyNTQsMjQyLDgxLDI1NSwyMDQsMTksNzgsMTgsMTMxLDIzMCw2Miw0NSwxMzksOTEsMTM4LDE3MywxODYsODgsODIsMjI4LDI5LDU0LDE1LDExMSwxMzQsMTAsMjE4LDIzOCwxMjMsMTkwLDIzLDI4LDE1OCwyNDgsNywxNzEsMTUsMjA5LDg1LDM5LDIzNywxMDQsNTcsMjMzLDE4OSwxNjgsMjM2LDYzLDIxNywyMzEsMzIsMTExLDIzNCwyMTYsMjcsMjE3LDE2MiwxMzcsNDEsNDMsMTI0LDE2NywxNTIsMSwxNjYsMjM4LDIzOCwxNTAsMjMzLDI0NSwxNTAsNzcsMTQ4LDIyNCwxNDQsMjA1LDQ2LDYzLDEwMCwyNDAsMjE1LDIxNSwxMzIsMTk0LDE1MSw4NSwyMiwxODMsMTQ2LDE4Niw1LDI0LDE1NSwxNTksNDEsMTk1LDkzLDYsOTAsNTcsMTQyLDE4MywxMDMsMTI1LDU5LDEyMSwxNzMsMiwxMjksMTI5LDAsMTg1LDIwMyw2OSw0NiwyMTYsMTg2LDQ2LDE0NywxNzUsMzgsMTcyLDQyLDgzLDIzNiw1LDI3LDE0NiwyMzYsMTM0LDM3LDE5Nyw2NywyMiwyMzIsMjUsMjUyLDE1NywxNzEsMTgzLDEwOCw1MSwyMjEsMTgwLDEzOSwyOCwxNzcsMTU0LDEyMywxMzIsMjQ2LDI1NCwxMDEsMTkzLDIxOCw1NCw1MCwxODIsMjUyLDQ4LDIzNiwzNCwxNjQsMTksMjI1LDE4MSwyMDAsMTk4LDE3NiwxODYsMjAsMjE2LDY2LDEwMSwxMTAsOSwxODMsMjQzLDI0NSwyMTEsMTcyLDM4LDE5Nyw2NCw1Nyw4NSw4OSwyMDYsNDUsNSwxMTksMTMzLDIzMSwxMDIsOTIsMjM4LDIxMCwxMTEsNjIsMTc4LDEwOSwyMTIsNTUsNDgsMjQ5LDE0NywyMywzMSw3MSwyNDEsMTc1LDE4NSw5NCwyMDcsMTA0LDE4NCwxOTYsMjI3LDIwLDM3LDI1NCwxOTgsNDIsOTIsMSwyNTUsMjI1LDE2MiwxOTAsMjM2LDIzNiwxMjIsMjgsMjM1LDYsNDcsMjE5LDc4LDIwNywyLDEyOSwxMjgsMSwxMzYsMTE3LDE2Miw1LDEyNSwyMDYsMjQyLDI0MCw1NSwyMiwxMTUsMjE0LDMxLDIyMiwxNTksMiwxNDUsNjAsMTI5LDc0LDIxNywxODEsMzgsODIsMTMzLDc0LDIzMSw5MSw3OSwyMDMsMjMsNzgsMjQzLDM5LDE1NiwxNjEsMTY5LDQ2LDI2LDEyNyw2NiwxNDQsNTAsMTcsMjcsMTY3LDkyLDI0NCw2NywyMDIsMTY3LDIxLDU3LDY0LDE0NSwxNTcsMjUzLDM0LDEwLDY5LDE1OSwxMzUsMjAsODYsMjIxLDEwMyw0OSw3Myw3OSwyMzgsOTIsMjE3LDU1LDE1OCwxNTgsMTY2LDY0LDEzMiw3OSwyMjMsMjE2LDE3NCwyMDUsMTIzLDE5NywxNjcsMzUsMjQxLDIwNiwxNDIsODksMTcyLDI1MywxNTUsMTY0LDE4Myw2NCwyMDYsMTM5LDEzOSwyMSwxNzQsMTczLDExOSw5MSwyNDMsMjM5LDE0OSw0OCwyMzUsOTIsNTgsODAsMTI1LDMxLDE3Miw0MSw1NCwxMTIsMjE2LDIxNiwxMDgsMjMsMTk0LDk1LDI1MiwxMzcsMiwxMjksMTI4LDEyMywxMzgsMTUyLDExNiw0OCwyMCwxNDEsOCwxOCwxODksNzQsODksMjEwLDI0NywyMzUsMjI5LDEzOSwyMzQsMjA2LDE5MiwxNzAsMjA0LDE0NywxNTYsMTkwLDU4LDIyOSwxODAsMjE5LDAsMTQxLDI0NCwxMDgsNDIsMjIwLDEwMywxNDgsMTA3LDExMywyMjAsMTc5LDgsMTMwLDE5Miw4MCwxNzMsMTY0LDgzLDczLDc2LDE1NSw1Miw1MSw0NCw0OCwxNzQsODIsMTkyLDEyLDIxOSwyNDMsMTIxLDM0LDIzNiwyMzQsMTE3LDExMyw1NywxOSw5LDUxLDE4MiwxNDUsMTYwLDE0LDEwLDIzNSw1NSwxNzYsMTU2LDIzNSw5OSwyMSwzLDIxMCwxNjIsNiwyMzQsMjA3LDE5OCwxNDAsOCw0NiwyNTQsMTY1LDU4LDgsMjAwLDIxMiwyLDE1OCwyMzAsODYsODAsNTAsMjgsMTA1LDc0LDEwNiwxMjksOTYsMjA3LDE2NSwyMjYsMTM0LDEyNSw3MiwxODAsOTUsMjI2LDg2LDIwMCwxMzUsMjE0LDIxMSw4NywxNjYsMTczLDIsMTI5LDEyOCw4OSw2NywyMDgsMTU1LDIzNCwzNiwxMTIsMTU0LDEyMCw2NCw1MSwwLDYzLDc0LDI3LDc3LDM1LDE5Nyw0NCw5NywxMzYsMjE2LDE0NCw0Myw4LDIwNCw2MywyMDYsNTUsMTk1LDk4LDQzLDIwMCwyNDksMjU1LDE2NSwyNDIsMjQyLDg4LDI0OCw1NiwyMTYsMjQ2LDEyNiwyNDgsOTksOSwyMjQsMTU5LDE0MSwxMTEsMTc2LDE4LDExOCwyMjQsMTI1LDEzNiwxNDMsMjUyLDEyNiwyNTQsNDksMTM2LDg2LDE2NSwyMzQsMTU0LDE0NCwyMzgsMTYyLDg2LDE5MywxOTQsNzAsMjI3LDU4LDMsMTEsNjQsMjM1LDE3OSwxNTksMjI5LDI2LDI0Nyw4LDYyLDEwNyw2NiwxNjgsMTc3LDcxLDYxLDE1NSw2MSwyNDUsMzcsMzMsOSwxNDYsMjE3LDIxNiwxNjgsOTksMTA2LDQzLDI0NiwxMjQsMjA4LDQxLDEyNyw0NiwxODgsMjUyLDEzOSwyNDAsMTA1LDU5LDEwOCwxOCwyMzIsMTAsNzMsMTQ3LDU3LDQ4LDEzLDIxMF0pO1xuLy99XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9ub2RlanMtaWRwL0Zha2VOb2RlanNQcm94eVN0dWIuaWRwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("(function () {\n  \"use strict\";\n\n  function btoa(str) {\n    var buffer\n      ;\n\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = new Buffer(str.toString(), 'binary');\n    }\n\n    return buffer.toString('base64');\n  }\n\n  module.exports = btoa;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2J0b2EvaW5kZXguanM/YjlhMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGZ1bmN0aW9uIGJ0b2Eoc3RyKSB7XG4gICAgdmFyIGJ1ZmZlclxuICAgICAgO1xuXG4gICAgaWYgKHN0ciBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgYnVmZmVyID0gc3RyO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgPSBuZXcgQnVmZmVyKHN0ci50b1N0cmluZygpLCAnYmluYXJ5Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZygnYmFzZTY0Jyk7XG4gIH1cblxuICBtb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2J0b2EvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction atob(str) {\n  return new Buffer(str, 'base64').toString('binary');\n}\n\nmodule.exports = atob.atob = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2F0b2Ivbm9kZS1hdG9iLmpzPzM3NGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gYXRvYihzdHIpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIoc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGF0b2IuYXRvYiA9IGF0b2I7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvbm9kZWpzLWlkcC9ub2RlX21vZHVsZXMvYXRvYi9ub2RlLWF0b2IuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);
});",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "57378b186a1ba1a7af6d8190014c85afc",
    "constraints": {
      "node": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}