{
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "IMSIWProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-f8a9782c-c6d5-2154-0742-26b4b992e30a0",
    "version": 0.8999999999999999,
    "description": "Description of IMSIWProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHRoaXMsIGZ1bmN0aW9uKCkgewpyZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlpOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJbDogZmFsc2UsCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkCi8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOwovKioqKioqLwovKioqKioqLyAJCS8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlczsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7Ci8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgewovKioqKioqLyAJCQkJY29uZmlndXJhYmxlOiBmYWxzZSwKLyoqKioqKi8gCQkJCWVudW1lcmFibGU6IHRydWUsCi8qKioqKiovIAkJCQlnZXQ6IGdldHRlcgovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkgewovKioqKioqLyAJCXZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgPwovKioqKioqLyAJCQlmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOgovKioqKioqLyAJCQlmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9OwovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTsKLyoqKioqKi8gCQlyZXR1cm4gZ2V0dGVyOwovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbAovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9OwovKioqKioqLwovKioqKioqLyAJLy8gX193ZWJwYWNrX3B1YmxpY19wYXRoX18KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ucCA9ICIiOwovKioqKioqLwovKioqKioqLyAJLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzCi8qKioqKiovIAlyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTsKLyoqKioqKi8gfSkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gKFsKLyogMCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBhY3RpdmF0ZTsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKdmFyIGlkZW50aXRpZXMgPSB7fTsKdmFyIG5JZGVudGl0eSA9IDA7CgovKgoJU28gdGhhdCBhbiBhcHBsaWNhdGlvbiBjYW4gdXNlIEdvb2dsZSdzIE9BdXRoIDIuMCBhdXRoZW50aWNhdGlvbiBzeXN0ZW0gZm9yIHVzZXIgbG9naW4sCglmaXJzdCBpcyByZXF1aXJlZCB0byBzZXQgdXAgYSBwcm9qZWN0IGluIHRoZSBHb29nbGUgRGV2ZWxvcGVycyBDb25zb2xlIHRvIG9idGFpbiBPQXV0aCAyLjAgY3JlZGVudGlhbHMgYW5kIHNldCBhIHJlZGlyZWN0IFVSSS4KCUEgdGVzdCBhY2NvdW50IHdhcyBjcmVhdGVkIHRvIHNldCB0aGUgcHJvamVjdCBpbiB0aGUgR29vZ2xlIERldmVsb3BlcnMgQ29uc29sZSB0byBvYnRhaW4gT0F1dGggMi4wIGNyZWRlbnRpYWxzLAl3aXRoIHRoZSBmb2xsb3dpbmcgY3JlZGVudGlhbHM6CiAgICAgIAl1c2VybmFtZTogb3BlbmlkdGVzdDEwQGdtYWlsLmNvbQogICAgICAgIHBhc3N3b3JkOiB0ZXN0T3BlbklEMTAKCVRvIGFkZCBtb3JlIFVSSSdzLCBmb2xsb3cgdGhlIHN0ZXBzOgoJMcK6IGNob29zZSB0aGUgcHJvamVjdCAoIGNhbiBiZSB0aGUgTXkgT3BlbklEIFByb2plY3QpCSBmcm9tICBodHRwczovL2NvbnNvbGUuZGV2ZWxvcGVycy5nb29nbGUuY29tL3Byb2plY3RzZWxlY3Rvci9hcGlzL2NyZWRlbnRpYWxzIHVzaW5nIHRoZSBjcmVkZW50aWFscyBwcm92aWRlZCBhYm92ZS4KCTLCuiBPcGVuIFRoZSBDbGllbnQgV2ViIDEgbGlzdGVkIGluIE9BdXRoIDIuMCBDbGllbnQgSUQncwoJM8K6IEFkZCB0aGUgVVJJICBpbiB0aGUgYXV0aG9yaXplZCByZWRpcmVjdCBVUkkgc2VjdGlvbi4KICA0wrogY2hhbmdlIHRoZSBSRURJUkVDVCBwYXJhbWV0ZXIgYmVsbG93IHdpdGggdGhlIHByZXRlbmRlZCBVUkkKICovCgp2YXIgZ29vZ2xlSW5mbyA9IHsKICBjbGllbnRTZWNyZXQ6ICdYeDRyS3VjYjVaWVRhWGxjWlg5SExmWlcnLAogIGNsaWVudElEOiAnODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJywKICByZWRpcmVjdFVSSTogbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUsIC8vbG9jYXRpb24ub3JpZ2luLAogIGlzc3VlcjogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsCiAgdG9rZW5FbmRwb2ludDogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8nLAogIGp3a3NVcmk6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvY2VydHM/JywKICBhdXRob3Jpc2F0aW9uRW5kcG9pbnQ6ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvYXV0aD8nLAogIHVzZXJpbmZvOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nLAogIHRva2VuSW5mbzogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbmluZm8/aWRfdG9rZW49JywKICBhY2Nlc3NUeXBlOiAnb2ZmbGluZScsCiAgdHlwZTogJ2NvZGUgdG9rZW4gaWRfdG9rZW4nLAogIHNjb3BlOiAnb3BlbmlkJTIwZW1haWwlMjBwcm9maWxlJywKICBzdGF0ZTogJ3N0YXRlJwp9OwoKLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzCmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHsKICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFtdLywgJ1xcXFsnKS5yZXBsYWNlKC9bXF1dLywgJ1xcXF0nKTsKICB2YXIgcmVnZXhTID0gJ1tcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknOwogIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTsKICB2YXIgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTsKICBpZiAocmVzdWx0cyA9PT0gbnVsbCkgcmV0dXJuICcnO2Vsc2UgcmV0dXJuIHJlc3VsdHNbMV07Cn0KCmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkgewogIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7CiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7CiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHsKICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuCiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLgogICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7CiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7CiAgfSBlbHNlIHsKICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLgogICAgeGhyID0gbnVsbDsKICB9CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGlmICh4aHIpIHsKICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7CiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgIHZhciBpbmZvID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTsKICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7CiAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuJyk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgICAgeGhyLnNlbmQoKTsKICAgIH0gZWxzZSB7CiAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7CiAgICB9CiAgfSk7Cn0KCi8qKgoqIEZ1bmN0aW9uIHRvIGV4Y2hhbmdlIHRoZSBjb2RlIHJlY2VpdmVkIHRvIHRoZSBpZCBUb2tlbiwgYWNjZXNzIHRva2VuIGFuZCBhIHJlZnJlc2ggdG9rZW4KKgoqLwp2YXIgZXhjaGFuZ2VDb2RlID0gZnVuY3Rpb24gZXhjaGFuZ2VDb2RlKGNvZGUpIHsKICB2YXIgaSA9IGdvb2dsZUluZm87CgogIHZhciBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY29kZT0nICsgY29kZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZncmFudF90eXBlPWF1dGhvcml6YXRpb25fY29kZSZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlOwoKICAvL2xldCBVUkwgPSA9IGkudG9rZW5FbmRwb2ludCArICdjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWZyZXNoX3Rva2VuPScgKyBjb2RlICsgJyZncmFudF90eXBlPXJlZnJlc2hfdG9rZW4nOwoKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgVVJMKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7CiAgICAgIHJlc29sdmUoaW5mbyk7CiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgcmVqZWN0KGVycm9yKTsKICAgIH0pOwogIH0pOwp9OwoKdmFyIGV4Y2hhbmdlUmVmcmVzaFRva2VuID0gZnVuY3Rpb24gZXhjaGFuZ2VSZWZyZXNoVG9rZW4ocmVmcmVzaFRva2VuKSB7CiAgdmFyIGkgPSBnb29nbGVJbmZvOwoKICB2YXIgVVJMID0gaS50b2tlbkVuZHBvaW50ICsgJ2NsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZnJlc2hfdG9rZW49JyArIHJlZnJlc2hUb2tlbiArICcmZ3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuJzsKCiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbiAoaW5mbykgewogICAgICByZXNvbHZlKGluZm8pOwogICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIHJlamVjdChlcnJvcik7CiAgICB9KTsKICB9KTsKfTsKCi8qKgoqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5CiovCnZhciBJZHBQcm94eSA9IHsKCiAgLyoqCiAgKiBGdW5jdGlvbiB0byB2YWxpZGF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb24gcmVjZWl2ZWQKICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSB0aGUgaW1wbGVtZW50YXRpb24KICAqCiAgKiBAcGFyYW0gIHthc3NlcnRpb259ICAgIElkZW50aXR5IEFzc2VydGlvbiB0byBiZSB2YWxpZGF0ZWQKICAqIEBwYXJhbSAge29yaWdpbn0gICAgICAgT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb24KICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0CiAgKi8KICB2YWxpZGF0ZUFzc2VydGlvbjogZnVuY3Rpb24gdmFsaWRhdGVBc3NlcnRpb24oYXNzZXJ0aW9uLCBvcmlnaW4pIHsKCiAgICAvL1RPRE8gY2hlY2sgdGhlIHZhbHVlcyB3aXRoIHRoZSBoYXNoIHJlY2VpdmVkCiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgdmFyIGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pOwogICAgICB2YXIgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQpOwoKICAgICAgdmFyIGlkVG9rZW5TcGxpdGVkID0gY29udGVudC50b2tlbklELnNwbGl0KCcuJyk7CgogICAgICB2YXIgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpOwoKICAgICAgcmVzb2x2ZSh7IGlkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZSB9KTsKICAgIH0pOwogICAgLypyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHsKICAgICAgbGV0IGkgPSBnb29nbGVJbmZvOwogICAgICAgbGV0IGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pOwogICAgICBsZXQgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQpOwogICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGkudG9rZW5JbmZvICsgY29udGVudC50b2tlbklEKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkgewogICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSA9PT0gSlNPTi5zdHJpbmdpZnkoY29udGVudC50b2tlbklESlNPTikpIHsKICAgICAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBjb250ZW50LnRva2VuSURKU09OLmVtYWlsLCBjb250ZW50czogY29udGVudC50b2tlbklESlNPTn0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZWplY3QoJ2ludmFsaWQnKTsKICAgICAgICB9CiAgICAgIH0sIGZ1bmN0aW9uKGVycikgewogICAgICAgICByZWplY3QoZXJyKTsKICAgICAgfSk7CiAgICB9KTsqLwogIH0sCgogIHJlZnJlc2hBc3NlcnRpb246IGZ1bmN0aW9uIHJlZnJlc2hBc3NlcnRpb24oaWRlbnRpdHkpIHsKICAgIHZhciBpID0gZ29vZ2xlSW5mbzsKCiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBpZiAoaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4pIHsKICAgICAgICBleGNoYW5nZVJlZnJlc2hUb2tlbihpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgIHZhciBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuOwogICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24gKGluZm9Ub2tlbikgewoKICAgICAgICAgICAgdmFyIGlkZW50aXR5QnVuZGxlID0geyBhY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiBpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbiwgdG9rZW5UeXBlOiBpZGVudGl0eS5pbmZvLnRva2VuVHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW4gfTsKICAgICAgICAgICAgdmFyIGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuOwoKICAgICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgaWRUb2tlbgogICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24gKGlkVG9rZW4pIHsKCiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUudG9rZW5JREpTT04gPSBpZFRva2VuOwogICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmV4cGlyZXMgPSBpZFRva2VuLmV4cDsKICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5lbWFpbCA9IGlkVG9rZW4uZW1haWw7CgogICAgICAgICAgICAgIHZhciBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHsgdG9rZW5JRDogdmFsdWUuaWRfdG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VuIH0pKTsKICAgICAgICAgICAgICB2YXIgaWRwQnVuZGxlID0geyBkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJyB9OwoKICAgICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGUKICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSB7IGFzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VuIH07CiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH0sCgogIC8qKgogICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uCiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb24KICAqCiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZAogICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvbgogICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyCiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvbgogICovCiAgZ2VuZXJhdGVBc3NlcnRpb246IGZ1bmN0aW9uIGdlbmVyYXRlQXNzZXJ0aW9uKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpIHsKICAgIHZhciBpID0gZ29vZ2xlSW5mbzsKCiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZQogICAgLy9UT0RPIGxhdGVyIHNob3VsZCBiZSBkZWZpbmVkIGEgYmV0dGVyIGFwcHJvYWNoCiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICBpZiAoIWhpbnQpIHsKICAgICAgICAvKnRyeSB7CiAgICAgICAgICBpZiAod2luZG93KSB7CiAgICAgICAgICAgIHJlc29sdmUoJ3VybCcpOwogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7Ki8KCiAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSBpLmF1dGhvcmlzYXRpb25FbmRwb2ludCArICdzY29wZT0nICsgaS5zY29wZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZyZWRpcmVjdF91cmk9JyArIGkucmVkaXJlY3RVUkkgKyAnJnJlc3BvbnNlX3R5cGU9Y29kZScgKyAvKmkudHlwZSArKi8nJnN0YXRlPScgKyBpLnN0YXRlICsgJyZwcm9tcHQ9Y29uc2VudCZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlICsgJyZub25jZT0nICsgY29udGVudHM7CiAgICAgICAgcmVqZWN0KHsgbmFtZTogJ0lkUExvZ2luRXJyb3InLCBsb2dpblVybDogcmVxdWVzdFVybCB9KTsKCiAgICAgICAgLy8gIH0KICAgICAgfSBlbHNlIHsKICAgICAgICAvLyB0aGUgcmVxdWVzdCBoYXZlIGFscmVhZHkgYmVlbiBtYWRlLCBzbyBpZHBQUm94eSB3aWxsIGV4Y2hhbmdlIHRoZSB0b2tlbnMgYWxvbmcgdG8gdGhlIGlkcCwgdG8gb2J0YWluIHRoZSBpbmZvcm1hdGlvbiBuZWNlc3NhcnkKICAgICAgICB2YXIgYWNjZXNzVG9rZW4gPSB1cmxQYXJzZXIoaGludCwgJ2FjY2Vzc190b2tlbicpOwogICAgICAgIHZhciBpZFRva2VuID0gdXJsUGFyc2VyKGhpbnQsICdpZF90b2tlbicpOwogICAgICAgIHZhciBjb2RlID0gdXJsUGFyc2VyKGhpbnQsICdjb2RlJyk7CgogICAgICAgIGV4Y2hhbmdlQ29kZShjb2RlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewoKICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyCiAgICAgICAgICB2YXIgaW5mb1Rva2VuVVJMID0gaS51c2VyaW5mbyArIHZhbHVlLmFjY2Vzc190b2tlbjsKICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaW5mb1Rva2VuVVJMKS50aGVuKGZ1bmN0aW9uIChpbmZvVG9rZW4pIHsKCiAgICAgICAgICAgIHZhciBpZGVudGl0eUJ1bmRsZSA9IHsgYWNjZXNzVG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgaWRUb2tlbjogdmFsdWUuaWRfdG9rZW4sIHJlZnJlc2hUb2tlbjogdmFsdWUucmVmcmVzaF90b2tlbiwgdG9rZW5UeXBlOiB2YWx1ZS50b2tlbl90eXBlLCBpbmZvVG9rZW46IGluZm9Ub2tlbiB9OwoKICAgICAgICAgICAgdmFyIGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuOwoKICAgICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgaWRUb2tlbgogICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24gKGlkVG9rZW4pIHsKCiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUudG9rZW5JREpTT04gPSBpZFRva2VuOwogICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmV4cGlyZXMgPSBpZFRva2VuLmV4cDsKICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5lbWFpbCA9IGlkVG9rZW4uZW1haWw7CgogICAgICAgICAgICAgIHZhciBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHsgdG9rZW5JRDogdmFsdWUuaWRfdG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VuIH0pKTsKICAgICAgICAgICAgICB2YXIgaWRwQnVuZGxlID0geyBkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJyB9OwoKICAgICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGUKICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSB7IGFzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VuIH07CgogICAgICAgICAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlOwogICAgICAgICAgICAgICsrbklkZW50aXR5OwoKICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHsKCiAgICAgICAgICAgICAgcmVqZWN0KGUpOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewoKICAgICAgICAgICAgcmVqZWN0KGVycm9yKTsKICAgICAgICAgIH0pOwogICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKCiAgICAgICAgICByZWplY3QoZXJyKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfQp9OwoKLyoqCiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YgoqLwoKdmFyIElkcFByb3h5UHJvdG9TdHViID0gZnVuY3Rpb24gKCkgewoKICAvKioKICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViCiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZAogICoKICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTAogICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uCiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb24KICAqLwogIGZ1bmN0aW9uIElkcFByb3h5UHJvdG9TdHViKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSWRwUHJveHlQcm90b1N0dWIpOwoKICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDsKICAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7CiAgICBfdGhpcy5jb25maWcgPSBjb25maWc7CgogICAgY29uc29sZS5sb2coJ1tHb29nbGUgSWRwUHJveHldIHN0YXJ0aW5nJywgcnVudGltZVByb3RvU3R1YlVSTCk7CgogICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHsKICAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJykgewoKICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTsKICAgICAgfQogICAgfSk7CiAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpOwogIH0KCiAgLyoqCiAgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uCiAgKgogICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1cwogICovCgoKICBfY3JlYXRlQ2xhc3MoSWRwUHJveHlQcm90b1N0dWIsIFt7CiAgICBrZXk6ICdyZXF1ZXN0VG9JZHAnLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RUb0lkcChtc2cpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdmFyIHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtczsKCiAgICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7CiAgICAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOgogICAgICAgICAgSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICd2YWxpZGF0ZUFzc2VydGlvbic6CiAgICAgICAgICBJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvbihwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICdyZWZyZXNoQXNzZXJ0aW9uJzoKICAgICAgICAgIElkcFByb3h5LnJlZnJlc2hBc3NlcnRpb24ocGFyYW1zLmlkZW50aXR5KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOwogICAgICAgICAgfSk7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgLyoqCiAgICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkCiAgICAqCiAgICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZAogICAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmQKICAgICovCgogIH0sIHsKICAgIGtleTogJ3JlcGx5TWVzc2FnZScsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHZhciBtZXNzYWdlID0geyBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywKICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHZhbHVlIH0gfTsKCiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3NlbmRTdGF0dXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuc2VuZFN0YXR1c10gJywgdmFsdWUpOwoKICAgICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7CgogICAgICB2YXIgbXNnID0gewogICAgICAgIHR5cGU6ICd1cGRhdGUnLAogICAgICAgIGZyb206IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsCiAgICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsCiAgICAgICAgYm9keTogewogICAgICAgICAgdmFsdWU6IHZhbHVlCiAgICAgICAgfQogICAgICB9OwoKICAgICAgaWYgKHJlYXNvbikgewogICAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247CiAgICAgIH0KCiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBJZHBQcm94eVByb3RvU3R1YjsKfSgpOwoKLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7CgovKioKICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuCiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTAogKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb24KICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uCiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViCiAqLwoKCmZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHsKICByZXR1cm4gewogICAgbmFtZTogJ0lkcFByb3h5UHJvdG9TdHViJywKICAgIGluc3RhbmNlOiBuZXcgSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZykKICB9Owp9Cm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOwoKLyoqKi8gfSkKLyoqKioqKi8gXSk7Cn0pOw==",
      "sourceCodeClassname": "IdpProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-f8a9782c-c6d5-2154-0742-26b4b992e30a1",
    "version": 2.1000000000000005,
    "description": "Description of IdpProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": false,
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-f8a9782c-c6d5-2154-0742-26b4b992e30a2",
    "version": "5.30",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MicrosoftProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MicrosoftProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-f8a9782c-c6d5-2154-0742-26b4b992e30a3",
    "version": 1.3,
    "description": "Description of MicrosoftProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": false,
    "objectName": "microsoft.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "OrangeProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHRoaXMsIGZ1bmN0aW9uKCkgewpyZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewoKLyoqKioqKi8gCQkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKLyoqKioqKi8gCQlpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7CgovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlleHBvcnRzOiB7fSwKLyoqKioqKi8gCQkJaWQ6IG1vZHVsZUlkLAovKioqKioqLyAJCQlsb2FkZWQ6IGZhbHNlCi8qKioqKiovIAkJfTsKCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7CgovKioqKioqLyAJCS8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWQKLyoqKioqKi8gCQltb2R1bGUubG9hZGVkID0gdHJ1ZTsKCi8qKioqKiovIAkJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKLyoqKioqKi8gCQlyZXR1cm4gbW9kdWxlLmV4cG9ydHM7Ci8qKioqKiovIAl9CgoKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwoKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwoKLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCXJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApOwovKioqKioqLyB9KQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAoWwovKiAwICovCi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKCSJ1c2Ugc3RyaWN0IjsKCglPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CgkgIHZhbHVlOiB0cnVlCgl9KTsKCgl2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsKCglleHBvcnRzLmRlZmF1bHQgPSBhY3RpdmF0ZTsKCglmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCgkvKioNCgkqIElkZW50aXR5UHJveHkgLS0gTk9ERSBPUEVOSUQgQ09OTkVDVCBTZXJ2ZXINCgkqDQoJKiBJbml0aWFsIHNwZWNpZmljYXRpb246IEQ0LjENCgkqDQoJKiBUaGUgSWRlbnRpdHlNb2R1bGUgaXMgYSBjb21wb25lbnQgbWFuYWdpbmcgdXNlciBJZGVudGl0eS4gSXQgZG93bmxvYWRzLCBpbnN0YW50aWF0ZXMNCgkqIGFuZCBtYW5hZ2UgSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgKElkUCkgZm9yIGl0cyBvd24gdXNlciBpZGVudGl0eSBvciBmb3IgZXh0ZXJuYWwNCgkqIHVzZXIgaWRlbnRpdHkgdmVyaWZpY2F0aW9uLg0KCSoNCgkqIFRoZSBJZFAgY29udGFpbnMgbWV0aG9kcyBhbmQgcGFyYW1ldGVycyB0byBhY3R1YWxseSBhY2Nlc3MgYW5kIG1ha2UgcmVxdWVzdA0KCSogdG8gdGhlIElkUCBTZXJ2ZXIuIEFsdGVybmF0aXZlbHkgc29tZSBmdW5jdGlvbm5hbGl0aWVzIGNhbiBiZSBkb25lIGxvY2FsbHkuDQoJKg0KCSovCgl2YXIgU0NIRU1FID0gImh0dHBzOi8vIiwKCSAgICBTT1VSQ0VVUkwgPSAiZW5lcmd5cS5pZHAucmV0aGluay5vcmFuZ2UtbGFicy5mciIsCgoJLy9TT1VSQ0VVUkwgPSAnMTkyLjE2OC45OS4xMDA6ODA4MCcsCglBVVRIUEFUSCA9ICIvcHJveHkvYXV0aG9yaXplIiwKCSAgICBWRVJJRllQQVRIID0gIi9wcm94eS92ZXJpZnkiLAoJICAgIERPTkVQQVRIID0gIi9wcm94eS9kb25lIiwKCSAgICBLRVlQQVRIID0gJy9wcm94eS9rZXknLAoJICAgIElEUEFUSCA9ICcvcHJveHkvaWQnLAoJICAgIFBST1hZVFlQRSA9ICdyZXRoaW5rLW9pZGMnLAoJICAgIElEU0NPUEUgPSAnb3BlbmlkJywKCSAgICBGVUxMU0NPUEUgPSAnb3BlbmlkIHdlYnJ0YycsCgkgICAgVFlQRSA9ICdpZF90b2tlbiB0b2tlbic7CgkvL3ZhciBUWVBFICAgICAgID0gICAnY29kZSc7CgoJdmFyIGlkcF9hZGRyID0geyAnZG9tYWluJzogU09VUkNFVVJMLCAncHJvdG9jb2wnOiBQUk9YWVRZUEUgfTsKCglpZiAodHlwZW9mIGNvbnNvbGUgPT0gInVuZGVmaW5lZCIpIHsKCSAgdW5kZWZpbmVkLmNvbnNvbGUgPSB7CgkgICAgbG9nOiBmdW5jdGlvbiBsb2coKSB7fSwKCSAgICB3YXJuOiBmdW5jdGlvbiB3YXJuKCkge30KCSAgfTsKCX0KCgkvL2Z1bmN0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIFVSTCB0byBvYmF0aW4gY2VydGFpbiB2YWx1ZXMKCWZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHsKCSAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xbXS8sICdcXFxbJykucmVwbGFjZSgvW1xdXS8sICdcXFxdJyk7CgkgIHZhciByZWdleFMgPSAnW1xcIyY/XScgKyBuYW1lICsgJz0oW14mI10qKSc7CgkgIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTsKCSAgdmFyIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7CgkgIGlmIChyZXN1bHRzID09PSBudWxsKSByZXR1cm4gJyc7ZWxzZSByZXR1cm4gcmVzdWx0c1sxXTsKCX0KCglmdW5jdGlvbiBnZXRQcm94eUtleSgpIHsKCSAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCSAgICB2YXIgeG1saHR0cCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwoJICAgIHhtbGh0dHAub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkgewoJICAgICAgaWYgKHhtbGh0dHAucmVhZHlTdGF0ZSA9PSA0ICYmIHhtbGh0dHAuc3RhdHVzID09IDIwMCkgewoJICAgICAgICB2YXIgcmVzID0gSlNPTi5wYXJzZSh4bWxodHRwLnJlc3BvbnNlVGV4dCk7CgkgICAgICAgIHJlcy5lcnJvciAhPSB1bmRlZmluZWQgPyByZWplY3QocmVzLmVycm9yKSA6IHJlc29sdmUocmVzKTsKCSAgICAgIH0KCSAgICB9OwoJICAgIHhtbGh0dHAub3BlbigiR0VUIiwgU0NIRU1FICsgU09VUkNFVVJMICsgS0VZUEFUSCwgdHJ1ZSk7CgkgICAgeG1saHR0cC5zZW5kKCk7CgkgIH0pOwoJfWZ1bmN0aW9uIGdldFByb3h5SUQoKSB7CgkgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgkgICAgdmFyIHhtbGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCSAgICB4bWxodHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHsKCSAgICAgIGlmICh4bWxodHRwLnJlYWR5U3RhdGUgPT0gNCAmJiB4bWxodHRwLnN0YXR1cyA9PSAyMDApIHsKCSAgICAgICAgdmFyIHJlcyA9IEpTT04ucGFyc2UoeG1saHR0cC5yZXNwb25zZVRleHQpOwoJICAgICAgICByZXMuZXJyb3IgIT0gdW5kZWZpbmVkID8gcmVqZWN0KHJlcy5lcnJvcikgOiByZXNvbHZlKHJlcy5rZXkpOwoJICAgICAgfQoJICAgIH07CgkgICAgeG1saHR0cC5vcGVuKCJHRVQiLCBTQ0hFTUUgKyBTT1VSQ0VVUkwgKyBJRFBBVEgsIHRydWUpOwoJICAgIHhtbGh0dHAuc2VuZCgpOwoJICB9KTsKCX0KCWZ1bmN0aW9uIGdldElkQXNzZXJ0aW9uKCkgewoJICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoJICAgIHZhciB4bWxodHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CgkgICAgeG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CgkgICAgICBpZiAoeG1saHR0cC5yZWFkeVN0YXRlID09IDQgJiYgeG1saHR0cC5zdGF0dXMgPT0gMjAwKSB7CgkgICAgICAgIHZhciByZXMgPSBKU09OLnBhcnNlKHhtbGh0dHAucmVzcG9uc2VUZXh0KTsKCSAgICAgICAgcmVzLmVycm9yICE9IHVuZGVmaW5lZCA/IHJlamVjdChyZXMuZXJyb3IpIDogcmVzb2x2ZShyZXMua2V5KTsKCSAgICAgIH0KCSAgICB9OwoJICAgIHhtbGh0dHAub3BlbigiR0VUIiwgU0NIRU1FICsgU09VUkNFVVJMICsgSURQQVRILCB0cnVlKTsKCSAgICB4bWxodHRwLnNlbmQoKTsKCSAgfSk7Cgl9CglmdW5jdGlvbiBzdHIyYWIoc3RyKSB7CgkgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoc3RyLmxlbmd0aCk7CgkgIHZhciBidWZWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTsKCSAgZm9yICh2YXIgaSA9IDAsIHN0ckxlbiA9IHN0ci5sZW5ndGg7IGkgPCBzdHJMZW47IGkrKykgewoJICAgIGJ1ZlZpZXdbaV0gPSBzdHIuY2hhckNvZGVBdChpKTsKCSAgfQoJICByZXR1cm4gYnVmOwoJfQoKCWZ1bmN0aW9uIGFiMnN0cihidWYpIHsKCSAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoYnVmKSk7Cgl9CgoJLy8gSURQIFByb3h5IGNvZGUKCXZhciBpZHAgPSB7CgkgIC8qKg0KCSAgKiBHZW5lcmF0aW9uIG9mIGFuIElkQXNzZXJ0aW9uIHRocm91Z2ggT0lEQyBJZFANCgkgICovCgkgIGdlbmVyYXRlQXNzZXJ0aW9uOiBmdW5jdGlvbiBnZW5lcmF0ZUFzc2VydGlvbihjb250ZW50cywgb3JpZ2luLCBoaW50KSB7CgkgICAgaWYgKGhpbnQpIHsKCgkgICAgICB2YXIgaWRUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnaWRfdG9rZW4nKTsKCgkgICAgICB2YXIgaWRwQnVuZGxlID0geyBkb21haW46ICdvcmFuZ2UuZnInLCBwcm90b2NvbDogJ09JREMnIH07CgkgICAgICB2YXIgaWRlbnRpdHlCdW5kbGUgPSB7IGFzc2VydGlvbjogaWRUb2tlbiwgaWRwOiBpZHBCdW5kbGUgfTsKCgkgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGlkZW50aXR5QnVuZGxlKTsKCSAgICB9IGVsc2UgewoJICAgICAgLy9Db21wdXRlIG5vbmNlICsgY29udGVudAoJICAgICAgdmFyIG5vbmNlID0gYnRvYShKU09OLnN0cmluZ2lmeSh7ICdzZHAnOiBjb250ZW50cywgJ24nOiBNYXRoLnJhbmRvbSgpIH0pKTsKCSAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgkgICAgICAgIHJldHVybiBnZXRQcm94eUlEKCkudGhlbihmdW5jdGlvbiAoSUQpIHsKCSAgICAgICAgICB2YXIgX3VybCA9IFNDSEVNRSArIFNPVVJDRVVSTCArIEFVVEhQQVRIICsgJz9zY29wZT0nICsgSURTQ09QRSArICcmY2xpZW50X2lkPScgKyBJRCArICcmcmVkaXJlY3RfdXJpPScgKyBTQ0hFTUUgKyBTT1VSQ0VVUkwgKyBET05FUEFUSCArICcmcmVzcG9uc2VfdHlwZT0nICsgVFlQRSArICcmbm9uY2U9JyArIG5vbmNlOwoKCSAgICAgICAgICAvL3JlbW92ZWQgV2VicnRjIHNjb3BlIGFuZCBydGNzZHAKCgkgICAgICAgICAgcmVqZWN0KHsgJ25hbWUnOiAnSWRwTG9naW5FcnJvcicsICdsb2dpblVybCc6IF91cmwgfSk7CgkgICAgICAgIH0pOwoJICAgICAgfSk7CgkgICAgfQoJICB9LAoJICAvKioNCgkgICogVmVyaWZpY2F0aW9uIG9mIGEgcmVjZWl2ZWQgSWRBc3NlcnRpb24gdmFsaWRpdHkNCgkgICogQ2FuIGFsc28gYmUgdXNlZCB0byB2YWxpZGF0ZSB0b2tlbiByZWNlaXZlZCBieSBJZFANCgkgICogQHBhcmFtICB7RE9NU3RyaW5nfSBhc3NlcnRpb24gYXNzZXJ0aW9uDQoJICAqLwoJICB2YWxpZGF0ZUFzc2VydGlvbjogZnVuY3Rpb24gdmFsaWRhdGVBc3NlcnRpb24oYXNzZXJ0aW9uIC8qLCBvcmlnaW4gKi8pIHsKCSAgICBhc3NlcnRpb24gPSBhc3NlcnRpb24uc3BsaXQoIi4iKTsKCSAgICB2YXIgaGVhZGVyID0gYXNzZXJ0aW9uWzBdLAoJICAgICAgICBwYXlsb2FkID0gYXNzZXJ0aW9uWzFdLAoJICAgICAgICBzaWduYXR1cmUgPSBhc3NlcnRpb25bMl07CgkgICAgLy9UT0RPIHRoZXJlIGlzIHByb2JhYmx5IGEgYmV0dGVyIHdheSB0byBkbyB0aGF0PwoJICAgIHNpZ25hdHVyZSA9IHNpZ25hdHVyZS5yZXBsYWNlKC9fL2csICIvIikucmVwbGFjZSgvLS9nLCAiKyIpOwoJICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CgkgICAgICByZXR1cm4gZ2V0UHJveHlLZXkoKS50aGVuKGZ1bmN0aW9uIChLZXkpIHsKCSAgICAgICAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KCdqd2snLCBLZXksIHsgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JywgaGFzaDogeyBuYW1lOiAiU0hBLTI1NiIgfSB9LCB0cnVlLCBbJ3ZlcmlmeSddKTsKCSAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKEpXSykgewoJICAgICAgICByZXR1cm4gKAoJICAgICAgICAgIC8vY3J5cHRvLnZlcmlmeShhbGdvLCBrZXksIHNpZ25hdHVyZSwgdGV4dDJ2ZXJpZnkpOwoJICAgICAgICAgIGNyeXB0by5zdWJ0bGUudmVyaWZ5KCdSU0FTU0EtUEtDUzEtdjFfNScsIEpXSywgc3RyMmFiKGF0b2Ioc2lnbmF0dXJlKSksIC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZSwKCSAgICAgICAgICBzdHIyYWIoaGVhZGVyICsgIi4iICsgcGF5bG9hZCkpCgkgICAgICAgICk7CgkgICAgICB9KSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhCgkgICAgICAudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CgkgICAgICAgIGlmICghcmVzdWx0KSByZWplY3QoeyAnbmFtZSc6ICdJZHBFcnJvcicsICdtZXNzYWdlJzogJ0ludmFsaWQgc2lnbmF0dXJlIG9uIGlkZW50aXR5IGFzc2VydGlvbicgfSk7ZWxzZSB7CgkgICAgICAgICAgdmFyIGpzb24gPSBKU09OLnBhcnNlKGF0b2IocGF5bG9hZCkpOwoJICAgICAgICAgIC8vIGhhY2sgdG8gZ2V0IG9ubHkgdGhlIG5hbWUgYW5kIHJlbW92ZSBhbnkgQG1haWwuY29tCgkgICAgICAgICAgLy8gTW96aWxsYSB3YW50IHVzIHRvIHByb3ZpZGUgYSB1c2VybmFtZSB3aXRoIG5hbWVARE9NQUlOCgkgICAgICAgICAgLy8gd2hlcmUgRE9NQUlOIGlzIElkUCBQcm94eSBET01BSU4KCSAgICAgICAgICB2YXIgbmFtZSA9IGpzb24uc3ViLnNwbGl0KCdAJylbMF07CgkgICAgICAgICAgLy8gRGVjb2RlIG5vbmNlIHRvIGdldCBjb250ZW50cwoJICAgICAgICAgIHZhciBjb250ZW50cyA9IEpTT04ucGFyc2UoYXRvYihqc29uLm5vbmNlKSkuc2RwOwoJICAgICAgICAgIHJlc29sdmUoeyAnaWRlbnRpdHknOiBuYW1lICsgJ0AnICsgaWRwX2FkZHIuZG9tYWluLCAnY29udGVudHMnOiBjb250ZW50cyB9KTsKCSAgICAgICAgfQoJICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7CgkgICAgICAgIHJldHVybiByZWplY3QoeyAnbmFtZSc6ICdJZHBFcnJvcicsICdtZXNzYWdlJzogZXJyb3IgfSk7CgkgICAgICB9KTsKCSAgICB9KTsKCSAgfQoJfTsKCglpZiAodHlwZW9mIHJ0Y0lkZW50aXR5UHJvdmlkZXIgIT0gJ3VuZGVmaW5lZCcpIHsKCSAgcnRjSWRlbnRpdHlQcm92aWRlci5yZWdpc3RlcihpZHApOwoJICBjb25zb2xlLmxvZygiUHJveHkgbG9hZGVkIik7Cgl9IGVsc2UgewoJICBjb25zb2xlLndhcm4oJ0lkUCBub3QgcnVubmluZyBpbiB0aGUgcmlnaHQgc2FuZGJveCcpOwoJfQoKCS8qKg0KCSogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1Yg0KCSovCgoJdmFyIFJldGhpbmtPaWRjUHJvdG9TdHViID0gZnVuY3Rpb24gKCkgewoKCSAgLyoqDQoJICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViDQoJICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkDQoJICAqDQoJICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTA0KCSAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb24NCgkgICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uDQoJICAqLwoJICBmdW5jdGlvbiBSZXRoaW5rT2lkY1Byb3RvU3R1YihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykgewoJICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXRoaW5rT2lkY1Byb3RvU3R1Yik7CgoJICAgIHZhciBfdGhpcyA9IHRoaXM7CgkgICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7CgkgICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1czsKCSAgICBfdGhpcy5jb25maWcgPSBjb25maWc7CgoJICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7CgkgICAgICBpZiAobXNnLnRvID09ICdkb21haW4taWRwOi8vb3JhbmdlLmZyJykgewoJICAgICAgICAvKmxldCBuZXdWYWx1ZSA9IElkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uKCk7DQoJICAgICAgICBsZXQgbWVzc2FnZSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywNCgkgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiBuZXdWYWx1ZSwgYnVzOiBidXMsIHJ1bnRpbWVQcm90b1N0dWJVUkw6IHJ1bnRpbWVQcm90b1N0dWJVUkx9fTsNCgkgICAgICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTsqLwoJICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTsKCSAgICAgIH0KCSAgICB9KTsKCSAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpOwoJICB9CgoJICAvKioNCgkgICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvbg0KCSAgKg0KCSAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzDQoJICAqLwoKCgkgIF9jcmVhdGVDbGFzcyhSZXRoaW5rT2lkY1Byb3RvU3R1YiwgW3sKCSAgICBrZXk6ICJyZXF1ZXN0VG9JZHAiLAoJICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0VG9JZHAobXNnKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoJICAgICAgdmFyIHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtczsKCgkgICAgICBzd2l0Y2ggKG1zZy5ib2R5Lm1ldGhvZCkgewoJICAgICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6CgkgICAgICAgICAgaWRwLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKCSAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTsKCSAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKCSAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTsKCSAgICAgICAgICB9KTsKCSAgICAgICAgICBicmVhazsKCSAgICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOgoJICAgICAgICAgIGlkcC52YWxpZGF0ZUFzc2VydGlvbihwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewoJICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOwoJICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewoJICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOwoJICAgICAgICAgIH0pOwoJICAgICAgICAgIGJyZWFrOwoJICAgICAgICBkZWZhdWx0OgoJICAgICAgICAgIGJyZWFrOwoJICAgICAgfQoJICAgIH0KCgkgICAgLyoqDQoJICAgICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWQNCgkgICAgKg0KCSAgICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZA0KCSAgICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZA0KCSAgICAqLwoKCSAgfSwgewoJICAgIGtleTogInJlcGx5TWVzc2FnZSIsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7CgkgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKCSAgICAgIHZhciBtZXNzYWdlID0geyBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywKCSAgICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZSB9IH07CgoJICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTsKCSAgICB9CgkgIH0sIHsKCSAgICBrZXk6ICJfc2VuZFN0YXR1cyIsCgkgICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHsKCSAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgoJICAgICAgY29uc29sZS5sb2coJ1tHb29nbGVJZHBQcm94eS5zZW5kU3RhdHVzXSAnLCB2YWx1ZSk7CgoJICAgICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7CgoJICAgICAgdmFyIG1zZyA9IHsKCSAgICAgICAgdHlwZTogJ3VwZGF0ZScsCgkgICAgICAgIGZyb206IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsCgkgICAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLAoJICAgICAgICBib2R5OiB7CgkgICAgICAgICAgdmFsdWU6IHZhbHVlCgkgICAgICAgIH0KCSAgICAgIH07CgoJICAgICAgaWYgKHJlYXNvbikgewoJICAgICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uOwoJICAgICAgfQoKCSAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTsKCSAgICB9CgkgIH1dKTsKCgkgIHJldHVybiBSZXRoaW5rT2lkY1Byb3RvU3R1YjsKCX0oKTsKCgkvLyBleHBvcnQgZGVmYXVsdCBJZHBQcm94eVByb3RvU3R1YjsKCgkvKioNCgkgKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi4NCgkgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkwNCgkgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb24NCgkgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb24NCgkgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1Yg0KCSAqLwoKCglmdW5jdGlvbiBhY3RpdmF0ZSh1cmwsIGJ1cywgY29uZmlnKSB7CgkgIHJldHVybiB7CgkgICAgbmFtZTogJ1JldGhpbmtPaWRjUHJvdG9TdHViJywKCSAgICBpbnN0YW5jZTogbmV3IFJldGhpbmtPaWRjUHJvdG9TdHViKHVybCwgYnVzLCBjb25maWcpCgkgIH07Cgl9Cgltb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbImRlZmF1bHQiXTsKCi8qKiovIH0KLyoqKioqKi8gXSkKfSk7Cjs=",
      "sourceCodeClassname": "OrangeProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-f8a9782c-c6d5-2154-0742-26b4b992e30a4",
    "version": 0.2,
    "description": "Description of OrangeProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": false,
    "objectName": "orange.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "NodejsProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-f8a9782c-c6d5-2154-0742-26b4b992e30a5",
    "version": 0.2,
    "description": "Description of NodejsProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": false,
    "objectName": "node.google.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}