{
  "FacebookIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsbil7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1uKCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSxuKToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT1uKCk6ZS5hY3RpdmF0ZT1uKCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIG49e307ZnVuY3Rpb24gdChvKXtpZihuW29dKXJldHVybiBuW29dLmV4cG9ydHM7dmFyIHI9bltvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsdCksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gdC5tPWUsdC5jPW4sdC5kPWZ1bmN0aW9uKGUsbixvKXt0Lm8oZSxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om99KX0sdC5uPWZ1bmN0aW9uKGUpe3ZhciBuPWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiB0LmQobiwiYSIsbiksbn0sdC5vPWZ1bmN0aW9uKGUsbil7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLG4pfSx0LnA9IiIsdCh0LnM9MCl9KFtmdW5jdGlvbihlLG4sdCl7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KSxuLmRlZmF1bHQ9ZnVuY3Rpb24oZSxuLHQpe3JldHVybntuYW1lOiJGYWNlYm9va0lkcFByb3h5UHJvdG9TdHViIixpbnN0YW5jZTpuZXcgaShlLG4sdCl9fTt2YXIgbz10KDEpLHI9dCgyKSxzPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7ZGVmYXVsdDplfX0odCgzKSk7dmFyIGk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gbihlLHQscyl7cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoIShlIGluc3RhbmNlb2YgbikpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsbikscy5pZHBVcmw9ImRvbWFpbi1pZHA6Ly9mYWNlYm9vay5jb20iLHMuZG9tYWluPSJmYWNlYm9vay5jb20iLHMuaWRwUHJveHk9by5JZHBQcm94eSxzLmNvbnZlcnRVc2VyUHJvZmlsZT1yLmNvbnZlcnRVc2VyUHJvZmlsZSxzLnVzZXJJbmZvRW5kcG9pbnQ9ci51c2VySW5mb0VuZHBvaW50LHMuYXV0aG9yaXNhdGlvbkVuZHBvaW50PXIuYXV0aG9yaXNhdGlvbkVuZHBvaW50LHMudmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludD1yLnZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQsZnVuY3Rpb24oZSxuKXtpZighZSl0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpO3JldHVybiFufHwib2JqZWN0IiE9dHlwZW9mIG4mJiJmdW5jdGlvbiIhPXR5cGVvZiBuP2U6bn0odGhpcywobi5fX3Byb3RvX198fE9iamVjdC5nZXRQcm90b3R5cGVPZihuKSkuY2FsbCh0aGlzLGUsdCxzKSl9cmV0dXJuIGZ1bmN0aW9uKGUsbil7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIG4mJm51bGwhPT1uKXRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgIit0eXBlb2Ygbik7ZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuJiZuLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksbiYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSxuKTplLl9fcHJvdG9fXz1uKX0obixzLmRlZmF1bHQpLG59KCl9LGZ1bmN0aW9uKGUsbix0KXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3ZhciBvPXZvaWQgMCxyPXZvaWQgMCxzPXZvaWQgMCxpPXZvaWQgMCxjPXZvaWQgMCxhPXZvaWQgMDtmdW5jdGlvbiB1KGUsbil7bj1uLnJlcGxhY2UoL1tcW10vLCJcXFsiKS5yZXBsYWNlKC9bXF1dLywiXFxdIik7dmFyIHQ9bmV3IFJlZ0V4cCgiW1xcIyY/XSIrbisiPShbXiYjXSopIikuZXhlYyhlKTtyZXR1cm4gbnVsbD09PXQ/IiI6dFsxXX1mdW5jdGlvbiBmKGUsbil7dmFyIHQ9bmV3IFhNTEh0dHBSZXF1ZXN0O3JldHVybiJ3aXRoQ3JlZGVudGlhbHMiaW4gdD90Lm9wZW4oZSxuLCEwKToidW5kZWZpbmVkIiE9dHlwZW9mIFhEb21haW5SZXF1ZXN0Pyh0PW5ldyBYRG9tYWluUmVxdWVzdCkub3BlbihlLG4pOnQ9bnVsbCxuZXcgUHJvbWlzZShmdW5jdGlvbihlLG4pe3Q/KHQub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKG8pe2lmKDQ9PT10LnJlYWR5U3RhdGUpaWYoMjAwPT09dC5zdGF0dXMpe3ZhciByPUpTT04ucGFyc2UodC5yZXNwb25zZVRleHQpO2Uocil9ZWxzZSA0MDA9PT10LnN0YXR1cz9uKCJUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4iKTpuKCJzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQiKX0sdC5zZW5kKCkpOm4oIkNPUlMgbm90IHN1cHBvcnRlZCIpfSl9dmFyIGw9ZnVuY3Rpb24oZSxuLHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyLHMpe2YoIkdFVCIsbyh0KSkudGhlbihmdW5jdGlvbihvKXtjb25zb2xlLmxvZygiW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbl0gb2J0YWluZWQgdXNlciBwcm9maWxlICIsbyk7dmFyIHM9YnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDp0LmFjY2Vzc190b2tlbix0b2tlbklESlNPTjpvLHB1YmxpY0tleTplfSkpO2NvbnNvbGUubG9nKCJbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uXSBhdG9iIGFzc2VydGlvbjoiLGF0b2IocykpO3ZhciBjPXthc3NlcnRpb246cyxpZHA6e2RvbWFpbjppLHByb3RvY29sOiJPQVVUSDIifSxleHBpcmVzOm4sdXNlclByb2ZpbGU6b307Y29uc29sZS5sb2coIltPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIHJldHVybmluZzogIixKU09OLnN0cmluZ2lmeShjKSkscihjKX0pfSl9LHA9bi5nZXRFeHBpcmVzPWZ1bmN0aW9uKGUpe3ZhciBuPXUoZSwiZXhwaXJlc19pbiIpO3JldHVybiBuP24rPU1hdGguZmxvb3IoRGF0ZS5ub3coKS8xZTMpOm49MzE1MzZlNStNYXRoLmZsb29yKERhdGUubm93KCkvMWUzKSxufSxkPWZ1bmN0aW9uKGUsbix0LG8scil7dmFyIHM9e2RvbWFpbjppLHJlc291cmNlczplLGFjY2Vzc1Rva2VuOm4sZXhwaXJlczp0LGlucHV0Om99O3JldHVybiByJiYocy5yZWZyZXNoPXIpLHN9O24uSWRwUHJveHk9e3ZhbGlkYXRlQXNzZXJ0aW9uOmZ1bmN0aW9uKGUsbix0KXtyZXR1cm4gY29uc29sZS5pbmZvKCJbT0FVVEgyLnZhbGlkYXRlQXNzZXJ0aW9uXSBhc3NlcnRpb246ICIsYXRvYihuKSksbz1lLnVzZXJJbmZvRW5kcG9pbnQsaT1lLmRvbWFpbixuZXcgUHJvbWlzZShmdW5jdGlvbih0LG8pe3ZhciByPWF0b2Iobikscz1KU09OLnBhcnNlKHIpO2YoIkdFVCIsZS52YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50KHthY2Nlc3NfdG9rZW46cy50b2tlbklELGlucHV0OnMudG9rZW5JREpTT059KSkudGhlbihmdW5jdGlvbihuKXtKU09OLnN0cmluZ2lmeShuKT09PUpTT04uc3RyaW5naWZ5KHMudG9rZW5JREpTT04pP3Qoe2lkZW50aXR5OmUuY29udmVydFVzZXJQcm9maWxlKG4pLmlkLGNvbnRlbnRzOnMucHVibGljS2V5fSk6bygiaW52YWxpZCIpfSkuY2F0Y2goZnVuY3Rpb24oZSl7byhlKX0pfSl9LGdlbmVyYXRlQXNzZXJ0aW9uOmZ1bmN0aW9uKGUsbix0LGMpe2NvbnNvbGUubG9nKCJbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbmZpZ10iLGUpLGNvbnNvbGUubG9nKCJbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXSIsbiksY29uc29sZS5sb2coIltPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXSIsdCksY29uc29sZS5sb2coIltPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246aGludF0iLGMpLG89ZS51c2VySW5mb0VuZHBvaW50LHI9ZS50b2tlbkVuZHBvaW50LHM9ZS5hdXRob3Jpc2F0aW9uRW5kcG9pbnQsaT1lLmRvbWFpbjtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oZSx0KXtpZihjKXt2YXIgbz11KGMsImV4cGlyZXNfaW4iKTtvP28rPU1hdGguZmxvb3IoRGF0ZS5ub3coKS8xZTMpOm89MzE1MzZlNStNYXRoLmZsb29yKERhdGUubm93KCkvMWUzKTt2YXIgaT11KGMsImFjY2Vzc190b2tlbiIpO2UoaT9sKG4sbyx7YWNjZXNzX3Rva2VuOml9KTpmdW5jdGlvbihlLG4sdCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG8scyl7dmFyIGk9dSh0LCJjb2RlIik7aXx8cygiW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlXSBjb2RlIG5vdCByZXR1cm5lZCBieSB0aGUgYXV0aGVudGljYXRpb246ICIsdCksZigiUE9TVCIscihpKSkudGhlbihmdW5jdGlvbih0KXt0Lmhhc093blByb3BlcnR5KCJhY2Nlc3NfdG9rZW4iKT9vKGwoZSxuLHQpKTpzKCJbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVdIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAiLHQpfSxmdW5jdGlvbihlKXtzKGUpfSl9KX0obixvLGMpKX1lbHNlIHQoe25hbWU6IklkUExvZ2luRXJyb3IiLGxvZ2luVXJsOnMobil9KX0sZnVuY3Rpb24oZSl7cmVqZWN0KGUpfSl9LGdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50OmZ1bmN0aW9uKGUsbil7Y29uc29sZS5sb2coIltPQVVUSDIuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6Y29uZmlnXSIsZSksY29uc29sZS5sb2coIltPQVVUSDIuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6cmVzb3VyY2VzXSIsbiksYT1lLmFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50O3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlLHQpe2UoYShuKSl9LGZ1bmN0aW9uKGUpe3JlamVjdChlKX0pfSxnZXRBY2Nlc3NUb2tlbjpmdW5jdGlvbihlLG4sdCl7Y29uc29sZS5sb2coIltPQVVUSDIuZ2V0QWNjZXNzVG9rZW46Y29uZmlnXSIsZSksY29uc29sZS5sb2coIltPQVVUSDIuZ2V0QWNjZXNzVG9rZW46bG9naW5dIix0KSxjPWUuYWNjZXNzVG9rZW5FbmRwb2ludCxpPWUuZG9tYWluO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlLG8pe3ZhciByPXAodCkscz11KHQsImFjY2Vzc190b2tlbiIpO2Uocz9kKG4scyxyLHQpOmZ1bmN0aW9uKGUsbil7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsbyl7dmFyIHI9dShuLCJjb2RlIik7cnx8bygiW09BVVRIMi5nZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW5dIGNvZGUgbm90IHJldHVybmVkIGJ5IHRoZSBsb2dpbiByZXN1bHQ6ICIsbiksZigiUE9TVCIsYyhyLGUpKS50aGVuKGZ1bmN0aW9uKG4pe2lmKG4uaGFzT3duUHJvcGVydHkoImFjY2Vzc190b2tlbiIpKXt2YXIgcj1wKG4pO3QoZChlLG4uYWNjZXNzX3Rva2VuLHIsbikpfWVsc2UgbygiW09BVVRIMi5nZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW5dIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAiLG4pfSxmdW5jdGlvbihlKXtvKGUpfSl9KX0obix0KSl9LGZ1bmN0aW9uKGUpe3JlamVjdChlKX0pfX19LGZ1bmN0aW9uKGUsbix0KXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KG4sIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pLG4uY29udmVydFVzZXJQcm9maWxlPWZ1bmN0aW9uKGUpe2NvbnNvbGUubG9nKCJbRmFjZWJvb2xVc2VyUHJvZmlsZUNvbnZlcnRlcl0gIixlKSxlLm5hbWU9ZS5maXJzdF9uYW1lKyIgIitlLmxhc3RfbmFtZSxlLnVzZXJVUkw9InVzZXI6Ly9mYWNlYm9vay5jb20vIitlLm5hbWUsZS5waWN0dXJlPWUucGljdHVyZS5kYXRhLnVybCxlLmhhc093blByb3BlcnR5KCJwcmVmZXJyZWRfdXNlcm5hbWUiKXx8KGUucHJlZmVycmVkX3VzZXJuYW1lPWUubGFzdF9uYW1lKTtyZXR1cm4gZX0sbi51c2VySW5mb0VuZHBvaW50PWZ1bmN0aW9uKGUpe3JldHVybiByLnVzZXJpbmZvK2UuYWNjZXNzX3Rva2VufSxuLmF1dGhvcmlzYXRpb25FbmRwb2ludD1mdW5jdGlvbihlKXt2YXIgbj1yLmF1dGhvcmlzYXRpb25FbmRwb2ludCsicmVkaXJlY3RfdXJpPSIrbysiJnJlc3BvbnNlX3R5cGU9IityLnR5cGUrIiZjbGllbnRfaWQ9IityLmNsaWVudElEKyImZ3JhbnRlZF9zY29wZXM9IityLmdyYW50ZWRfc2NvcGVzKyImbm9uY2U9IitlKyImc3RhdGU9IitlO3JldHVybiBjb25zb2xlLmxvZygiW1NsYWNrLmF1dGhvcmlzYXRpb25FbmRwb2ludF0gIixuKSxufSxuLnZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuIHIudXNlcmluZm8rZS5hY2Nlc3NfdG9rZW59O3ZhciBvPWxvY2F0aW9uLnByb3RvY29sKyIvLyIrbG9jYXRpb24uaG9zdG5hbWUrKCIiIT09bG9jYXRpb24ucG9ydD8iOiIrbG9jYXRpb24ucG9ydDoiIikscj17Y2xpZW50SUQ6IjUxNjg1MDA3ODY4NTI5MCIsYXV0aG9yaXNhdGlvbkVuZHBvaW50OiJodHRwczovL3d3dy5mYWNlYm9vay5jb20vdjIuMTEvZGlhbG9nL29hdXRoPyIsdXNlcmluZm86Imh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3YyLjIvbWUvP2ZpZWxkcz1pZCxmaXJzdF9uYW1lLGxhc3RfbmFtZSxuYW1lLHBpY3R1cmUsZW1haWwmYWNjZXNzX3Rva2VuPSIsdHlwZToidG9rZW4iLGdyYW50ZWRfc2NvcGVzOiJlbWFpbCxwdWJsaWNfcHJvZmlsZSIsc3RhdGU6InN0YXRlIixkb21haW46ImZhY2Vib29rLmNvbSJ9fSxmdW5jdGlvbihlLG4sdCl7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSxuKXtmb3IodmFyIHQ9MDt0PG4ubGVuZ3RoO3QrKyl7dmFyIG89blt0XTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24obix0LG8pe3JldHVybiB0JiZlKG4ucHJvdG90eXBlLHQpLG8mJmUobixvKSxufX0oKTt2YXIgcj12b2lkIDAscz12b2lkIDAsaT12b2lkIDAsYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUobix0LG8peyFmdW5jdGlvbihlLG4pe2lmKCEoZSBpbnN0YW5jZW9mIG4pKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSh0aGlzLGUpO3ZhciBjPXRoaXM7Yy5ydW50aW1lUHJvdG9TdHViVVJMPW4sYy5tZXNzYWdlQnVzPXQsYy5jb25maWc9byxyPW8uaWRwUHJveHkscz1vLmNvbnZlcnRVc2VyUHJvZmlsZSxpPW8uYWNjZXNzVG9rZW5JbnB1dCxjb25zb2xlLmxvZygiW0Fic3RyYWN0SWRwUHJveHldIGNvbnN0cnVjdG9yIiksYy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCIqIixmdW5jdGlvbihlKXtlLnRvPT09by5pZHBVcmwmJmMucmVxdWVzdFRvSWRwKGUpfSksYy5fc2VuZFN0YXR1cygiY3JlYXRlZCIpfXJldHVybiBvKGUsW3trZXk6InJlcXVlc3RUb0lkcCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIG49dGhpcyx0PWUuYm9keS5wYXJhbXM7c3dpdGNoKGNvbnNvbGUuaW5mbygiW0Fic3RyYWN0SWRwUHJveHlQcm90b1N0dWJdIHJlY2VpdmluZyByZXF1ZXN0OiAiLGUpLGUuYm9keS5tZXRob2Qpe2Nhc2UiZ2VuZXJhdGVBc3NlcnRpb24iOnIuZ2VuZXJhdGVBc3NlcnRpb24obi5jb25maWcsdC5jb250ZW50cyx0Lm9yaWdpbix0LnVzZXJuYW1lSGludCkudGhlbihmdW5jdGlvbih0KXt0LnVzZXJQcm9maWxlPXModC51c2VyUHJvZmlsZSksbi5yZXBseU1lc3NhZ2UoZSx0KX0sZnVuY3Rpb24odCl7bi5yZXBseU1lc3NhZ2UoZSx0LDQwMSl9KTticmVhaztjYXNlInZhbGlkYXRlQXNzZXJ0aW9uIjpyLnZhbGlkYXRlQXNzZXJ0aW9uKG4uY29uZmlnLHQuYXNzZXJ0aW9uLHQub3JpZ2luKS50aGVuKGZ1bmN0aW9uKHQpe24ucmVwbHlNZXNzYWdlKGUsdCl9LGZ1bmN0aW9uKHQpe24ucmVwbHlNZXNzYWdlKGUsdCl9KTticmVhaztjYXNlInJlZnJlc2hBc3NlcnRpb24iOnIucmVmcmVzaEFzc2VydGlvbih0LmlkZW50aXR5KS50aGVuKGZ1bmN0aW9uKHQpe24ucmVwbHlNZXNzYWdlKGUsdCl9LGZ1bmN0aW9uKHQpe24ucmVwbHlNZXNzYWdlKGUsdCx2YWx1ZSw0MDEpfSk7YnJlYWs7Y2FzZSJnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCI6ci5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChuLmNvbmZpZyx0LnJlc291cmNlcykudGhlbihmdW5jdGlvbih0KXtuLnJlcGx5TWVzc2FnZShlLHQpfSxmdW5jdGlvbih0KXtuLnJlcGx5TWVzc2FnZShlLHQsNDAxKX0pO2JyZWFrO2Nhc2UiZ2V0QWNjZXNzVG9rZW4iOnIuZ2V0QWNjZXNzVG9rZW4obi5jb25maWcsdC5yZXNvdXJjZXMsdC5sb2dpbikudGhlbihmdW5jdGlvbih0KXtjb25zb2xlLmluZm8oIk9JREMuZ2V0QWNjZXNzVG9rZW4gcmVzdWx0OiAiLHQpLHQuaW5wdXQ9aSh0LmlucHV0KSxuLnJlcGx5TWVzc2FnZShlLHQpfSxmdW5jdGlvbih0KXtuLnJlcGx5TWVzc2FnZShlLHQsNDAxKX0pO2JyZWFrO2Nhc2UicmVmcmVzaEFjY2Vzc1Rva2VuIjpyLnJlZnJlc2hBY2Nlc3NUb2tlbihuLmNvbmZpZyx0LnRva2VuKS50aGVuKGZ1bmN0aW9uKHQpe2NvbnNvbGUuaW5mbygiT0lEQy5yZWZyZXNoQWNjZXNzVG9rZW4gcmVzdWx0OiAiLHQpLG4ucmVwbHlNZXNzYWdlKGUsdCl9LGZ1bmN0aW9uKHQpe24ucmVwbHlNZXNzYWdlKGUsdCw0MDEpfSl9fX0se2tleToicmVwbHlNZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlLG4pe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg+MiYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXToyMDAsbz17aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsdG86ZS5mcm9tLGZyb206ZS50byxib2R5Ontjb2RlOnR9fTt0PDMwMD9vLmJvZHkudmFsdWU9bjpvLmJvZHkuZGVzY3JpcHRpb249bixjb25zb2xlLmxvZygiW0Fic3RyYWN0SWRwUHJveHlQcm90b1N0dWIucmVwbHlNZXNzYWdlXSAiLG8pLHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShvKX19LHtrZXk6Il9zZW5kU3RhdHVzIix2YWx1ZTpmdW5jdGlvbihlLG4pe2NvbnNvbGUubG9nKCJbQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yi5zZW5kU3RhdHVzXSAiLGUpLHRoaXMuX3N0YXRlPWU7dmFyIHQ9e3R5cGU6InVwZGF0ZSIsZnJvbTp0aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsdG86dGhpcy5ydW50aW1lUHJvdG9TdHViVVJMKyIvc3RhdHVzIixib2R5Ont2YWx1ZTplfX07biYmKHQuYm9keS5kZXNjPW4pLHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh0KX19XSksZX0oKTtuLmRlZmF1bHQ9Y31dKS5kZWZhdWx0fSk7",
      "sourceCodeClassname": "facebook.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "10.30",
    "description": "IDPProxy for Facebook idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "50ef75417b00e8340d1ddf496be07274a",
    "constraints": {
      "browser": true
    },
    "objectName": "facebook.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "GoogleIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "10.40",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5fe88c210039898a45c75f6de8c56f417",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "10.40",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "52c91699f84b479f34e9f7abce2255fff",
    "constraints": {
      "node": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MicrosoftProxyStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihvKXtpZih0W29dKXJldHVybiB0W29dLmV4cG9ydHM7dmFyIHI9dFtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsbiksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxvKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9IiIsbihuLnM9MCl9KFtmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKTt0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybntuYW1lOiJNaWNyb3NvZnRQcm94eVN0dWIiLGluc3RhbmNlOm5ldyBhKGUsdCxuKX19O3ZhciByPXtjbGllbnRJRDoiMDAwMDAwMDA0QzE4MzkxRiIscmVkaXJlY3RVUkk6bG9jYXRpb24ub3JpZ2luLHRva2VuRW5kcG9pbnQ6Imh0dHBzOi8vbG9naW4ubGl2ZS5jb20vb2F1dGgyMF9hdXRob3JpemUuc3JmPyIsdHlwZToidG9rZW4iLHNjb3BlOiJ3bC5zaWduaW4sd2wuYmFzaWMiLG1vZGU6ImZyYWdtZW50In0saT1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LG4pe3ZhciBvPUpTT04ucGFyc2UoYXRvYihlKSk7dCh7aWRlbnRpdHk6by5lbWFpbCxjb250ZW50czpvLm5vbmNlfSl9KX0scz1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsbyl7aWYobil7dmFyIGk9bi5zcGxpdCgiLyIpWzNdLnNwbGl0KCIuIikscz1KU09OLnBhcnNlKGF0b2IoaVsxXSkpO3Qoe2Fzc2VydGlvbjppWzFdLGlkcDp7ZG9tYWluOiJtaWNyb3NvZnQuY29tIixwcm90b2NvbDoiT0lEQyJ9LGluZm9Ub2tlbjpzfSl9ZWxzZXtvKHtuYW1lOiJJZFBMb2dpbkVycm9yIixsb2dpblVybDpyLnRva2VuRW5kcG9pbnQrInJlc3BvbnNlX3R5cGU9IityLnR5cGUrIiZjbGllbnRfaWQ9IityLmNsaWVudElEKyImc2NvcGU9IityLnNjb3BlKyImbm9uY2U9IitlKyImcmVzcG9uc2VfbW9kZT0iK3IubW9kZSsiJnJlZGlyZWN0X3VyaT0iK3IucmVkaXJlY3RVUkl9KX19KX0sYT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLG8peyFmdW5jdGlvbihlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIHQpKXRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpfSh0aGlzLGUpO3ZhciByPXRoaXM7ci5ydW50aW1lUHJvdG9TdHViVVJMPXQsci5tZXNzYWdlQnVzPW4sci5jb25maWc9byxyLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoIioiLGZ1bmN0aW9uKGUpeyJkb21haW4taWRwOi8vbWljcm9zb2Z0LmNvbSI9PT1lLnRvJiZyLnJlcXVlc3RUb0lkcChlKX0pLHIuX3NlbmRTdGF0dXMoImNyZWF0ZWQiKX1yZXR1cm4gbyhlLFt7a2V5OiJyZXF1ZXN0VG9JZHAiLHZhbHVlOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj1lLmJvZHkucGFyYW1zO3N3aXRjaChlLmJvZHkubWV0aG9kKXtjYXNlImdlbmVyYXRlQXNzZXJ0aW9uIjpzKG4uY29udGVudHMsbi5vcmlnaW4sbi51c2VybmFtZUhpbnQpLnRoZW4oZnVuY3Rpb24obil7dC5yZXBseU1lc3NhZ2UoZSxuKX0sZnVuY3Rpb24obil7dC5yZXBseU1lc3NhZ2UoZSxuKX0pO2JyZWFrO2Nhc2UidmFsaWRhdGVBc3NlcnRpb24iOmkobi5hc3NlcnRpb24sbi5vcmlnaW4pLnRoZW4oZnVuY3Rpb24obil7dC5yZXBseU1lc3NhZ2UoZSxuKX0sZnVuY3Rpb24obil7dC5yZXBseU1lc3NhZ2UoZSxuKX0pfX19LHtrZXk6InJlcGx5TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj17aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsdG86ZS5mcm9tLGZyb206ZS50byxib2R5Ontjb2RlOjIwMCx2YWx1ZTp0fX07dGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG4pfX0se2tleToiX3NlbmRTdGF0dXMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7Y29uc29sZS5sb2coIltHb29nbGVJZHBQcm94eS5zZW5kU3RhdHVzXSAiLGUpLHRoaXMuX3N0YXRlPWU7dmFyIG49e3R5cGU6InVwZGF0ZSIsZnJvbTp0aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsdG86dGhpcy5ydW50aW1lUHJvdG9TdHViVVJMKyIvc3RhdHVzIixib2R5Ont2YWx1ZTplfX07dCYmKG4uYm9keS5kZXNjPXQpLHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShuKX19XSksZX0oKX1dKS5kZWZhdWx0fSk7",
      "sourceCodeClassname": "microsoft.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "10.30",
    "description": "IDPProxy for microsoft idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "546e0f62b1aa6b322a17c85cf925e1dba",
    "constraints": {
      "browser": true
    },
    "objectName": "microsoft.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsForBrowserProxyStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihvKXtpZih0W29dKXJldHVybiB0W29dLmV4cG9ydHM7dmFyIHI9dFtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsbiksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxvKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9IiIsbihuLnM9MCl9KFtmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKTt0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybntuYW1lOiJOb2RlanNQcm94eVN0dWIiLGluc3RhbmNlOm5ldyBpKGUsdCxuKX19O3ZhciByPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGNvbnNvbGUubG9nKCJ2YWxpZGF0ZUFzc2VydGlvblByb3h5Tk9ERUpTRkFLRUJyb3dzZXI6YXNzZXJ0aW9uIixlKSxuZXcgUHJvbWlzZShmdW5jdGlvbih0LG4pe3ZhciBvPWF0b2IoZSkscj1KU09OLnBhcnNlKG8pLnRva2VuSUQuc3BsaXQoIi4iKSxzPUpTT04ucGFyc2UoYXRvYihyWzFdKSk7dCh7aWRlbnRpdHk6cy5lbWFpbCxjb250ZW50czpzLm5vbmNlfSl9KX0scz1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGNvbnNvbGUubG9nKCJbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbkZBS0VfQlJPV1NFUjpjb250ZW50c10iLGUpLGNvbnNvbGUubG9nKCJbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbkZBS0VfQlJPV1NFUjpvcmlnaW5dIix0KSxjb25zb2xlLmxvZygiW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb25GQUtFX0JST1dTRVI6aGludF0iLG4pLG5ldyBQcm9taXNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGNvbnNvbGUubG9nKCJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZToiKSxlKGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlKX0pfSxpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4sbyl7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksY29uc29sZS5sb2coIkZBS0UgTk9ERUpTIGNvbnN0cnVjdG9yIik7dmFyIHI9dGhpcztyLnJ1bnRpbWVQcm90b1N0dWJVUkw9dCxyLm1lc3NhZ2VCdXM9bixyLmNvbmZpZz1vLHIubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcigiKiIsZnVuY3Rpb24oZSl7ImRvbWFpbi1pZHA6Ly9ub2RlanMtaWRwIj09PWUudG8mJnIucmVxdWVzdFRvSWRwKGUpfSksci5fc2VuZFN0YXR1cygiY3JlYXRlZCIpfXJldHVybiBvKGUsW3trZXk6InJlcXVlc3RUb0lkcCIsdmFsdWU6ZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcyxuPWUuYm9keS5wYXJhbXM7c3dpdGNoKGUuYm9keS5tZXRob2Qpe2Nhc2UiZ2VuZXJhdGVBc3NlcnRpb24iOnMobi5jb250ZW50cyxuLm9yaWdpbixuLnVzZXJuYW1lSGludCkudGhlbihmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSxmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSk7YnJlYWs7Y2FzZSJ2YWxpZGF0ZUFzc2VydGlvbiI6cihuLmFzc2VydGlvbixuLm9yaWdpbikudGhlbihmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSxmdW5jdGlvbihuKXt0LnJlcGx5TWVzc2FnZShlLG4pfSl9fX0se2tleToicmVwbHlNZXNzYWdlIix2YWx1ZTpmdW5jdGlvbihlLHQpe3ZhciBuPXtpZDplLmlkLHR5cGU6InJlc3BvbnNlIix0bzplLmZyb20sZnJvbTplLnRvLGJvZHk6e2NvZGU6MjAwLHZhbHVlOnR9fTt0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2Uobil9fSx7a2V5OiJfc2VuZFN0YXR1cyIsdmFsdWU6ZnVuY3Rpb24oZSx0KXtjb25zb2xlLmxvZygiW05vZGVKUy5zZW5kU3RhdHVzXSAiLGUpLHRoaXMuX3N0YXRlPWU7dmFyIG49e3R5cGU6InVwZGF0ZSIsZnJvbTp0aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsdG86dGhpcy5ydW50aW1lUHJvdG9TdHViVVJMKyIvc3RhdHVzIixib2R5Ont2YWx1ZTplfX07dCYmKG4uYm9keS5kZXNjPXQpLHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShuKX19XSksZX0oKX1dKS5kZWZhdWx0fSk7",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "10.30",
    "description": "IDPProxy for browser idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5d2606fd332d71526cafc4c13d80437b4",
    "constraints": {
      "browser": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "10.30",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "57378b186a1ba1a7af6d8190014c85afc",
    "constraints": {
      "node": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "IWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoImFjdGl2YXRlIixbXSx0KToib2JqZWN0Ij09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5hY3RpdmF0ZT10KCk6ZS5hY3RpdmF0ZT10KCl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7dmFyIHQ9e307ZnVuY3Rpb24gbihvKXtpZih0W29dKXJldHVybiB0W29dLmV4cG9ydHM7dmFyIHI9dFtvXT17aTpvLGw6ITEsZXhwb3J0czp7fX07cmV0dXJuIGVbb10uY2FsbChyLmV4cG9ydHMscixyLmV4cG9ydHMsbiksci5sPSEwLHIuZXhwb3J0c31yZXR1cm4gbi5tPWUsbi5jPXQsbi5kPWZ1bmN0aW9uKGUsdCxvKXtuLm8oZSx0KXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Om99KX0sbi5uPWZ1bmN0aW9uKGUpe3ZhciB0PWUmJmUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBlLmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIGV9O3JldHVybiBuLmQodCwiYSIsdCksdH0sbi5vPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLHQpfSxuLnA9IiIsbihuLnM9MCl9KFtmdW5jdGlvbihlLHQsbil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt2YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIG89dFtuXTtvLmVudW1lcmFibGU9by5lbnVtZXJhYmxlfHwhMSxvLmNvbmZpZ3VyYWJsZT0hMCwidmFsdWUiaW4gbyYmKG8ud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLG8ua2V5LG8pfX1yZXR1cm4gZnVuY3Rpb24odCxuLG8pe3JldHVybiBuJiZlKHQucHJvdG90eXBlLG4pLG8mJmUodCxvKSx0fX0oKTt0LmRlZmF1bHQ9ZnVuY3Rpb24oZSx0LG4pe3JldHVybntuYW1lOiJJTVNJV1Byb3h5U3R1YiIsaW5zdGFuY2U6bmV3IGkoZSx0LG4pfX07dmFyIHI9InJldGhpbmstcHJvamVjdC5ldSIsaT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCxuLG8pe3ZhciBpPXRoaXM7IWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIil9KHRoaXMsZSksdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMPXQsdGhpcy5tZXNzYWdlQnVzPW4sdGhpcy5jb25maWc9byx0aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoIioiLGZ1bmN0aW9uKGUpe2UudG89PT0iZG9tYWluLWlkcDovLyIrciYmaS5yZXF1ZXN0VG9JZHAoZSl9KSx0aGlzLl9zZW5kU3RhdHVzKCJjcmVhdGVkIil9cmV0dXJuIG8oZSxbe2tleToiX3NlbmRTdGF0dXMiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7Y29uc29sZS5sb2coIltTbGFjayBJZHAgUHJveHkgc3RhdHVzIGNoYW5nZWRdIHRvICIsZSksdGhpcy5fc3RhdGU9ZTt2YXIgbj17dHlwZToidXBkYXRlIixmcm9tOnRoaXMucnVudGltZVByb3RvU3R1YlVSTCx0bzp0aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwrIi9zdGF0dXMiLGJvZHk6e3ZhbHVlOmV9fTt0JiYobi5ib2R5LmRlc2M9dCksdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG4pfX0se2tleToicmVxdWVzdFRvSWRwIix2YWx1ZTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLG49ZS5ib2R5LnBhcmFtcztzd2l0Y2goZS5ib2R5Lm1ldGhvZCl7Y2FzZSJnZW5lcmF0ZUFzc2VydGlvbiI6dGhpcy5nZW5lcmF0ZUFzc2VydGlvbihuLmNvbnRlbnRzLG4ub3JpZ2luLG4udXNlcm5hbWVIaW50KS50aGVuKGZ1bmN0aW9uKG4pe3JldHVybiB0LnJlcGx5TWVzc2FnZShlLG4pfSkuY2F0Y2goZnVuY3Rpb24obil7cmV0dXJuIHQucmVwbHlNZXNzYWdlKGUsbil9KTticmVhaztjYXNlInZhbGlkYXRlQXNzZXJ0aW9uIjp0aGlzLnJlcGx5TWVzc2FnZShlLHtpZGVudGl0eToiaWRlbnRpdHlAaWRwLmNvbSIsY29udGVudHM6ImNvbnRlbnQifSl9fX0se2tleToiZ2VuZXJhdGVBc3NlcnRpb24iLHZhbHVlOmZ1bmN0aW9uKGUsdCxuKXt2YXIgbz10aGlzO3JldHVybiBjb25zb2xlLmxvZygiY29udGVudHMtPiIsZSksY29uc29sZS5sb2coIm9yaWdpbi0+Iix0KSxjb25zb2xlLmxvZygiaGludC0+IixuKSxuZXcgUHJvbWlzZShmdW5jdGlvbihlLHQpe2lmKG4pe3ZhciBpPW8uX3VybFBhcnNlcihuLCJhY2Nlc3NfdG9rZW4iKSxzPU1hdGguZmxvb3IoRGF0ZS5ub3coKS8xZTMpK28uX3VybFBhcnNlcihuLCJleHBpcmVzX2luIik7ZmV0Y2goImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92MS91c2VyaW5mbz9hY2Nlc3NfdG9rZW49IitpKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlLmpzb24oKX0pLnRoZW4oZnVuY3Rpb24odCl7dmFyIG49e3BpY3R1cmU6dC5waWN0dXJlLGVtYWlsOnQuZW1haWwsZmFtaWx5X25hbWU6dC5mYW1pbHlfbmFtZSxnaXZlbl9uYW1lOnQuZ2l2ZW5fbmFtZX0sbz1idG9hKEpTT04uc3RyaW5naWZ5KHt0b2tlbklEOmksZW1haWw6dC5lbWFpbCxpZDp0LmlkfSkpLGE9e2luZm86e2V4cGlyZXM6c30sYXNzZXJ0aW9uOm8saWRwOntkb21haW46cixwcm90b2NvbDoiT0F1dGggMi4wIn0saW5mb1Rva2VuOm4saW50ZXJ3b3JraW5nOnthY2Nlc3NfdG9rZW46aSxkb21haW46cn19O2NvbnNvbGUubG9nKCJSRVNPTFZJTkcgVEhJUyBPQkpFQ1QiLGEpLGUoYSl9KS5jYXRjaCh0KX1lbHNle3ZhciBhPSJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdjIvYXV0aD9zY29wZT1lbWFpbCUyMHByb2ZpbGUmc3RhdGU9JTJGcHJvZmlsZSZyZWRpcmVjdF91cmk9Iitsb2NhdGlvbi5wcm90b2NvbCsiLy8iK2xvY2F0aW9uLmhvc3RuYW1lKyImcmVzcG9uc2VfdHlwZT10b2tlbiZjbGllbnRfaWQ9ODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIjtjb25zb2xlLmxvZygiZmlyc3QgdXJsICIsYSwiZG9uZSIpLHQoe25hbWU6IklkUExvZ2luRXJyb3IiLGxvZ2luVXJsOmF9KX19KX19LHtrZXk6Il91cmxQYXJzZXIiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7dD10LnJlcGxhY2UoL1tcW10vLCJcXFsiKS5yZXBsYWNlKC9bXF1dLywiXFxdIik7dmFyIG49bmV3IFJlZ0V4cCgiW1xcIyY/XSIrdCsiPShbXiYjXSopIikuZXhlYyhlKTtyZXR1cm4gbnVsbD09PW4/IiI6blsxXX19LHtrZXk6InJlcGx5TWVzc2FnZSIsdmFsdWU6ZnVuY3Rpb24oZSx0KXt2YXIgbj17aWQ6ZS5pZCx0eXBlOiJyZXNwb25zZSIsdG86ZS5mcm9tLGZyb206ZS50byxib2R5Ontjb2RlOjIwMCx2YWx1ZTp0fX07dGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG4pfX1dKSxlfSgpfV0pLmRlZmF1bHR9KTs=",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "10.30",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "constraints": {
      "browser": true,
      "onlyAccessToken": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "10.30",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "EdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHsKcmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXAKLyoqKioqKi8gCS8vIFRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307Ci8qKioqKiovCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewovKioqKioqLwovKioqKioqLyAJCS8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZQovKioqKioqLyAJCWlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7Ci8qKioqKiovIAkJCXJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHsKLyoqKioqKi8gCQkJaTogbW9kdWxlSWQsCi8qKioqKiovIAkJCWw6IGZhbHNlLAovKioqKioqLyAJCQlleHBvcnRzOiB7fQovKioqKioqLyAJCX07Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZAovKioqKioqLyAJCW1vZHVsZS5sID0gdHJ1ZTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLyAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCX0KLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikgewovKioqKioqLyAJCWlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHsKLyoqKioqKi8gCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsKLyoqKioqKi8gCQkJCWNvbmZpZ3VyYWJsZTogZmFsc2UsCi8qKioqKiovIAkJCQllbnVtZXJhYmxlOiB0cnVlLAovKioqKioqLyAJCQkJZ2V0OiBnZXR0ZXIKLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJfQovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHsKLyoqKioqKi8gCQl2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8KLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDoKLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7Ci8qKioqKiovIAkJcmV0dXJuIGdldHRlcjsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKLyoqKioqKi8KLyoqKioqKi8gCS8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7Ci8qKioqKiovIH0pCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIChbCi8qIDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwpldmFsKCJcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFjdGl2YXRlO1xuXG52YXIgX09BVVRIID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9TbGFjayA9IF9fd2VicGFja19yZXF1aXJlX18oIShmdW5jdGlvbiB3ZWJwYWNrTWlzc2luZ01vZHVsZSgpIHsgdmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgXFxcIi4vU2xhY2tcXFwiXCIpOyBlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7IHRocm93IGU7IH0oKSkpO1xuXG52YXIgX0Fic3RyYWN0SWRwUHJveHlTdHViID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9BYnN0cmFjdElkcFByb3h5U3R1YjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BYnN0cmFjdElkcFByb3h5U3R1Yik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4qIFNsYWNrIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiovXG52YXIgU2xhY2tQcm94eVN0dWIgPSBmdW5jdGlvbiAoX0Fic3RyYWN0SWRwUHJveHlQcm90KSB7XG4gIF9pbmhlcml0cyhTbGFja1Byb3h5U3R1YiwgX0Fic3RyYWN0SWRwUHJveHlQcm90KTtcblxuICAvKipcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgKi9cbiAgZnVuY3Rpb24gU2xhY2tQcm94eVN0dWIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU2xhY2tQcm94eVN0dWIpO1xuXG4gICAgY29uZmlnLmlkcFVybCA9ICdkb21haW4taWRwOi8vc2xhY2suY29tJztcbiAgICBjb25maWcuaWRwUHJveHkgPSBfT0FVVEguSWRwUHJveHk7XG4gICAgLy8gICAgIGNvbmZpZy5pZHBJbmZvID0gc2xhY2tJbmZvO1xuICAgIGNvbmZpZy5kb21haW4gPSAnc2xhY2suY29tJztcbiAgICBjb25maWcuY29udmVydFVzZXJQcm9maWxlID0gX1NsYWNrLmNvbnZlcnRVc2VyUHJvZmlsZTtcbiAgICBjb25maWcudXNlckluZm9FbmRwb2ludCA9IF9TbGFjay51c2VySW5mb0VuZHBvaW50O1xuICAgIGNvbmZpZy52YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50ID0gX1NsYWNrLnZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQ7XG4gICAgY29uZmlnLmF1dGhvcmlzYXRpb25FbmRwb2ludCA9IF9TbGFjay5hdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG4gICAgY29uZmlnLnRva2VuRW5kcG9pbnQgPSBfU2xhY2sudG9rZW5FbmRwb2ludDtcbiAgICBjb25maWcuYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBfU2xhY2suYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG4gICAgY29uZmlnLmFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBfU2xhY2suYWNjZXNzVG9rZW5FbmRwb2ludDtcbiAgICBjb25maWcuYWNjZXNzVG9rZW5JbnB1dCA9IF9TbGFjay5hY2Nlc3NUb2tlbklucHV0O1xuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoU2xhY2tQcm94eVN0dWIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTbGFja1Byb3h5U3R1YikpLmNhbGwodGhpcywgcnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpKTtcbiAgfVxuXG4gIHJldHVybiBTbGFja1Byb3h5U3R1Yjtcbn0oX0Fic3RyYWN0SWRwUHJveHlTdHViMi5kZWZhdWx0KTtcblxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG5cbi8qKlxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxuICovXG5cblxuZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdTbGFja1Byb3h5U3R1YicsXG4gICAgaW5zdGFuY2U6IG5ldyBTbGFja1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuICB9O1xufS8vIyBzb3VyY2VVUkw9W21vZHVsZV1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTR2WkdWMkxYQnliM1J2YzNSMVluTXZjM0pqTDJsa2NIQnliM2g1TDJWa2NDOUZaSEJRY205NGVWTjBkV0l1YVdSd0xtcHpQMlZsWlRFaVhTd2libUZ0WlhNaU9sc2lZV04wYVhaaGRHVWlMQ0pUYkdGamExQnliM2g1VTNSMVlpSXNJbkoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dpTENKaWRYTWlMQ0pqYjI1bWFXY2lMQ0pwWkhCVmNtd2lMQ0pwWkhCUWNtOTRlU0lzSWtsa2NGQnliM2g1SWl3aVpHOXRZV2x1SWl3aVkyOXVkbVZ5ZEZWelpYSlFjbTltYVd4bElpd2lkWE5sY2tsdVptOUZibVJ3YjJsdWRDSXNJblpoYkdsa1lYUmxRWE56WlhKMGFXOXVSVzVrY0c5cGJuUWlMQ0poZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5RaUxDSjBiMnRsYmtWdVpIQnZhVzUwSWl3aVlXTmpaWE56Vkc5clpXNUJkWFJvYjNKcGMyRjBhVzl1Ulc1a2NHOXBiblFpTENKaFkyTmxjM05VYjJ0bGJrVnVaSEJ2YVc1MElpd2lZV05qWlhOelZHOXJaVzVKYm5CMWRDSXNJa0ZpYzNSeVlXTjBTV1J3VUhKdmVIbFFjbTkwYjFOMGRXSWlMQ0oxY213aUxDSnVZVzFsSWl3aWFXNXpkR0Z1WTJVaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08ydENRVGhETUVKQkxGRTdPMEZCT1VNeFFqczdRVUZEUVRzN1FVRkpRVHM3T3pzN096czdPenM3TzBGQlJVRTdPenRKUVVkTlF5eGpPenM3UVVGRlJqczdPenM3T3pzN1FVRlJSQ3d3UWtGQldVTXNiVUpCUVZvc1JVRkJhVU5ETEVkQlFXcERMRVZCUVhORFF5eE5RVUYwUXl4RlFVRTRRenRCUVVGQk96dEJRVU0xUTBFc1YwRkJUME1zVFVGQlVDeEhRVUZuUWl4M1FrRkJhRUk3UVVGRFFVUXNWMEZCVDBVc1VVRkJVQ3hIUVVGclFrTXNaVUZCYkVJN1FVRkRURHRCUVVOTFNDeFhRVUZQU1N4TlFVRlFMRWRCUVdkQ0xGZEJRV2hDTzBGQlEwRktMRmRCUVU5TExHdENRVUZRTEVkQlFUUkNRU3g1UWtGQk5VSTdRVUZEUVV3c1YwRkJUMDBzWjBKQlFWQXNSMEZCTUVKQkxIVkNRVUV4UWp0QlFVTkJUaXhYUVVGUFR5eDVRa0ZCVUN4SFFVRnRRMEVzWjBOQlFXNURPMEZCUTBGUUxGZEJRVTlSTEhGQ1FVRlFMRWRCUVN0Q1FTdzBRa0ZCTDBJN1FVRkRRVklzVjBGQlQxTXNZVUZCVUN4SFFVRjFRa0VzYjBKQlFYWkNPMEZCUTBGVUxGZEJRVTlWTEdkRFFVRlFMRWRCUVRCRFFTeDFRMEZCTVVNN1FVRkRRVllzVjBGQlQxY3NiVUpCUVZBc1IwRkJOa0pCTERCQ1FVRTNRanRCUVVOQldDeFhRVUZQV1N4blFrRkJVQ3hIUVVFd1FrRXNkVUpCUVRGQ08wRkJXalJETERKSVFXRjBRMlFzYlVKQlluTkRMRVZCWVdwQ1F5eEhRV0pwUWl4RlFXRmFReXhOUVdKWk8wRkJZemRET3pzN1JVRjRRbmxDWVN3NFFqczdRVUV5UWpOQ096dEJRVVZCT3pzN096czdPenM3UVVGUFpTeFRRVUZUYWtJc1VVRkJWQ3hEUVVGclFtdENMRWRCUVd4Q0xFVkJRWFZDWml4SFFVRjJRaXhGUVVFMFFrTXNUVUZCTlVJc1JVRkJiME03UVVGRGFrUXNVMEZCVHp0QlFVTk1aU3hWUVVGTkxHZENRVVJFTzBGQlJVeERMR05CUVZVc1NVRkJTVzVDTEdOQlFVb3NRMEZCYlVKcFFpeEhRVUZ1UWl4RlFVRjNRbVlzUjBGQmVFSXNSVUZCTmtKRExFMUJRVGRDTzBGQlJrd3NSMEZCVUR0QlFVbEVJaXdpWm1sc1pTSTZJakF1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2UwbGtjRkJ5YjNoNWZTQm1jbTl0SUZ3aUxpNHZUMEZWVkVoY0lseHVhVzF3YjNKMElIdGpiMjUyWlhKMFZYTmxjbEJ5YjJacGJHVXNJSFZ6WlhKSmJtWnZSVzVrY0c5cGJuUXNJRnh1SUNCaGRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUXNJSFJ2YTJWdVJXNWtjRzlwYm5Rc0lGeHVJQ0JoWTJObGMzTlViMnRsYmtGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRDd2dYRzRnSUdGalkyVnpjMVJ2YTJWdVJXNWtjRzlwYm5Rc0lHRmpZMlZ6YzFSdmEyVnVTVzV3ZFhRc0lIWmhiR2xrWVhSbFFYTnpaWEowYVc5dVJXNWtjRzlwYm5SOUlHWnliMjBnWENJdUwxTnNZV05yWENKY2JtbHRjRzl5ZENCQlluTjBjbUZqZEVsa2NGQnliM2g1VUhKdmRHOVRkSFZpSUdaeWIyMGdYQ0l1TGk5QlluTjBjbUZqZEVsa2NGQnliM2g1VTNSMVlsd2lYRzVjYmk4cUtseHVLaUJUYkdGamF5QkpaR1Z1ZEdsMGVTQlFjbTkyYVdSbGNpQlFjbTk0ZVNCUWNtOTBiMk52YkNCVGRIVmlYRzRxTDF4dVkyeGhjM01nVTJ4aFkydFFjbTk0ZVZOMGRXSWdaWGgwWlc1a2N5QkJZbk4wY21GamRFbGtjRkJ5YjNoNVVISnZkRzlUZEhWaUlIdGNiaUFnWEc0Z0lDQWdMeW9xWEc0Z0lDQWdLaUJEYjI1emRISjFZM1J2Y2lCdlppQjBhR1VnU1dSd1VISnZlSGtnVTNSMVlseHVJQ0FnSUNvZ1ZHaGxJR052Ym5OMGNuVmpkRzl5SUdGa1pDQmhJR3hwYzNSbGJtVnlJR2x1SUhSb1pTQnRaWE56WVdkbFFuVnpJSEpsWTJWcGRtVmtJR0Z1WkNCemRHRnlkQ0JoSUhkbFlpQjNiM0pyWlhJZ2QybDBhQ0IwYUdVZ2FXUndVSEp2ZUhrZ2NtVmpaV2wyWldSY2JpQWdJQ0FxWEc0Z0lDQWdLaUJBY0dGeVlXMGdJSHRWVWt3dVVuVnVkR2x0WlZWU1RIMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRXSlZVa3hjYmlBZ0lDQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVXVUV1Z6YzJGblpYMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkWE5RYjNOMFRXVnpjMkZuWlNBZ0lDQWdZMjl1Wm1sbmRYSmhkR2x2Ymx4dUlDQWdJQ29nUUhCaGNtRnRJQ0I3VUhKdmRHOVRkSFZpUkdWelkzSnBjSFJ2Y2k1RGIyNW1hV2QxY21GMGFXOXVSR0YwWVV4cGMzUjlJR052Ym1acFozVnlZWFJwYjI0Z0lDQWdJQ0JqYjI1bWFXZDFjbUYwYVc5dVhHNGdJQ0FnS2k5Y2JpQWdJR052Ym5OMGNuVmpkRzl5S0hKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3c0lHSjFjeXdnWTI5dVptbG5LU0I3WEc0Z0lDQWdJR052Ym1acFp5NXBaSEJWY213Z1BTQW5aRzl0WVdsdUxXbGtjRG92TDNOc1lXTnJMbU52YlNjN1hHNGdJQ0FnSUdOdmJtWnBaeTVwWkhCUWNtOTRlU0E5SUVsa2NGQnliM2g1TzF4dUx5OGdJQ0FnSUdOdmJtWnBaeTVwWkhCSmJtWnZJRDBnYzJ4aFkydEpibVp2TzF4dUlDQWdJQ0JqYjI1bWFXY3VaRzl0WVdsdUlEMGdKM05zWVdOckxtTnZiU2M3WEc0Z0lDQWdJR052Ym1acFp5NWpiMjUyWlhKMFZYTmxjbEJ5YjJacGJHVWdQU0JqYjI1MlpYSjBWWE5sY2xCeWIyWnBiR1U3WEc0Z0lDQWdJR052Ym1acFp5NTFjMlZ5U1c1bWIwVnVaSEJ2YVc1MElEMGdkWE5sY2tsdVptOUZibVJ3YjJsdWREdGNiaUFnSUNBZ1kyOXVabWxuTG5aaGJHbGtZWFJsUVhOelpYSjBhVzl1Ulc1a2NHOXBiblFnUFNCMllXeHBaR0YwWlVGemMyVnlkR2x2YmtWdVpIQnZhVzUwTzF4dUlDQWdJQ0JqYjI1bWFXY3VZWFYwYUc5eWFYTmhkR2x2YmtWdVpIQnZhVzUwSUQwZ1lYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBPMXh1SUNBZ0lDQmpiMjVtYVdjdWRHOXJaVzVGYm1Sd2IybHVkQ0E5SUhSdmEyVnVSVzVrY0c5cGJuUTdYRzRnSUNBZ0lHTnZibVpwWnk1aFkyTmxjM05VYjJ0bGJrRjFkR2h2Y21sellYUnBiMjVGYm1Sd2IybHVkQ0E5SUdGalkyVnpjMVJ2YTJWdVFYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBPMXh1SUNBZ0lDQmpiMjVtYVdjdVlXTmpaWE56Vkc5clpXNUZibVJ3YjJsdWRDQTlJR0ZqWTJWemMxUnZhMlZ1Ulc1a2NHOXBiblE3WEc0Z0lDQWdJR052Ym1acFp5NWhZMk5sYzNOVWIydGxia2x1Y0hWMElEMGdZV05qWlhOelZHOXJaVzVKYm5CMWREdGNiaUFnSUNBZ2MzVndaWElvY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVEN3Z1luVnpMQ0JqYjI1bWFXY3BPMXh1SUNBZ2ZWeHVJQ0I5WEc0Z0lGeHVJQ0F2THlCbGVIQnZjblFnWkdWbVlYVnNkQ0JKWkhCUWNtOTRlVkJ5YjNSdlUzUjFZanRjYmlBZ1hHNGdJQzhxS2x4dUlDQWdLaUJVYnlCaFkzUnBkbUYwWlNCMGFHbHpJSEJ5YjNSdlkyOXNJSE4wZFdJc0lIVnphVzVuSUhSb1pTQnpZVzFsSUcxbGRHaHZaQ0JtYjNJZ1lXeHNJSEJ5YjNSdmMzUjFZaTVjYmlBZ0lDb2dRSEJoY21GdElDQjdWVkpNTGxKMWJuUnBiV1ZWVWt4OUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd2djblZ1ZEdsdFpWQnliM1J2VTNWaVZWSk1YRzRnSUNBcUlFQndZWEpoYlNBZ2UwMWxjM05oWjJVdVRXVnpjMkZuWlgwZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRYTlFiM04wVFdWemMyRm5aU0FnSUNBZ1kyOXVabWxuZFhKaGRHbHZibHh1SUNBZ0tpQkFjR0Z5WVcwZ0lIdFFjbTkwYjFOMGRXSkVaWE5qY21sd2RHOXlMa052Ym1acFozVnlZWFJwYjI1RVlYUmhUR2x6ZEgwZ1kyOXVabWxuZFhKaGRHbHZiaUFnSUNBZ0lHTnZibVpwWjNWeVlYUnBiMjVjYmlBZ0lDb2dRSEpsZEhWeWJpQjdUMkpxWldOMGZTQlBZbXBsWTNRZ2QybDBhQ0J1WVcxbElHRnVaQ0JwYm5OMFlXNWpaU0J2WmlCUWNtOTBiMU4wZFdKY2JpQWdJQ292WEc0Z0lHVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUdGamRHbDJZWFJsS0hWeWJDd2dZblZ6TENCamIyNW1hV2NwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdibUZ0WlRvZ0oxTnNZV05yVUhKdmVIbFRkSFZpSnl4Y2JpQWdJQ0FnSUdsdWMzUmhibU5sT2lCdVpYY2dVMnhoWTJ0UWNtOTRlVk4wZFdJb2RYSnNMQ0JpZFhNc0lHTnZibVpwWnlsY2JpQWdJQ0I5TzF4dUlDQjlYRzRnSUZ4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMaTlrWlhZdGNISnZkRzl6ZEhWaWN5OXpjbU12YVdSd2NISnZlSGt2WldSd0wwVmtjRkJ5YjNoNVUzUjFZaTVwWkhBdWFuTWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8wXG4iKTsKCi8qKiovIH0pLAovKiAxICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKZXZhbCgiXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbi8vbGV0IGlkZW50aXRpZXMgPSB7fTtcbi8vbGV0IG5JZGVudGl0eSA9IDA7XG4vL2xldCByZWRpcmVjdFVSSSA9IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgIT09ICcnID8gJzonICsgbG9jYXRpb24ucG9ydCA6ICcnKTtcbnZhciB1c2VySW5mb0VuZHBvaW50ID0gdm9pZCAwO1xudmFyIHRva2VuRW5kcG9pbnQgPSB2b2lkIDA7XG52YXIgYXV0aG9yaXNhdGlvbkVuZHBvaW50ID0gdm9pZCAwO1xudmFyIGRvbWFpbiA9IHZvaWQgMDtcbnZhciBhY2Nlc3NUb2tlbkVuZHBvaW50ID0gdm9pZCAwO1xudmFyIGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50ID0gdm9pZCAwO1xuXG4vL2Z1bmN0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIFVSTCB0byBvYmF0aW4gY2VydGFpbiB2YWx1ZXNcbmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxcXF0nKTtcbiAgdmFyIHJlZ2V4UyA9ICdbXFxcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknO1xuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4Uyk7XG4gIHZhciByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xuICBpZiAocmVzdWx0cyA9PT0gbnVsbCkgcmV0dXJuICcnO2Vsc2UgcmV0dXJuIHJlc3VsdHNbMV07XG59XG5cbmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkge1xuICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBYRG9tYWluUmVxdWVzdC5cbiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLlxuICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIENPUlMgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci5cbiAgICB4aHIgPSBudWxsO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHhocikge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIHZhciBpbmZvID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIHJlc29sdmUoaW5mbyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh4aHIuc3RhdHVzID09PSA0MDApIHtcbiAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnc29tZXRoaW5nIGVsc2Ugb3RoZXIgdGhhbiAyMDAgd2FzIHJldHVybmVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgeGhyLnNlbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KCdDT1JTIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG52YXIgZXhjaGFuZ2VSZWZyZXNoVG9rZW4gPSBmdW5jdGlvbiBleGNoYW5nZVJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW4pIHtcbiAgdmFyIGkgPSBnb29nbGVJbmZvO1xuXG4gIHZhciBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVmcmVzaF90b2tlbj0nICsgcmVmcmVzaFRva2VuICsgJyZncmFudF90eXBlPXJlZnJlc2hfdG9rZW4nO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgVVJMKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4gPSBmdW5jdGlvbiBnZW5lcmF0ZUFzc2VydGlvbldpdGhBY2Nlc3NUb2tlbihjb250ZW50cywgZXhwaXJlcywgaW5mbykge1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCB1c2VySW5mb0VuZHBvaW50KGluZm8pKS50aGVuKGZ1bmN0aW9uIChpbmZvVG9rZW4pIHtcbiAgICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uXSBvYnRhaW5lZCB1c2VyIHByb2ZpbGUgJywgaW5mb1Rva2VuKTtcblxuICAgICAgdmFyIGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoeyB0b2tlbklEOiBpbmZvLmFjY2Vzc190b2tlbiwgdG9rZW5JREpTT046IGluZm9Ub2tlbiwgcHVibGljS2V5OiBjb250ZW50cyB9KSk7XG4gICAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbl0gYXRvYiBhc3NlcnRpb246JywgYXRvYihhc3NlcnRpb24pKTtcbiAgICAgIHZhciBpZHBCdW5kbGUgPSB7IGRvbWFpbjogZG9tYWluLCBwcm90b2NvbDogJ09BVVRIMicgfTtcblxuICAgICAgLy9UT0RPIGRlbGV0ZSBsYXRlciB0aGUgZmllbGQgaW5mb1Rva2VuLCBhbmQgZGVsZXRlIHRoZSBuZWVkIGluIHRoZSBleGFtcGxlXG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSB7IGFzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgZXhwaXJlczogZXhwaXJlcywgdXNlclByb2ZpbGU6IGluZm9Ub2tlbiB9O1xuXG4gICAgICAvKiAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xuICAgICAgICAgICAgKytuSWRlbnRpdHk7XG4gICAgICAqL1xuICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIHJldHVybmluZzogJywgSlNPTi5zdHJpbmdpZnkocmV0dXJuVmFsdWUpKTtcblxuICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIGdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVUb2tlbiA9IGZ1bmN0aW9uIGdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVUb2tlbihjb250ZW50cywgZXhwaXJlcywgaGludCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjb2RlID0gdXJsUGFyc2VyKGhpbnQsICdjb2RlJyk7XG5cbiAgICBpZiAoIWNvZGUpIHJlamVjdCgnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlXSBjb2RlIG5vdCByZXR1cm5lZCBieSB0aGUgYXV0aGVudGljYXRpb246ICcsIGhpbnQpO1xuXG4gICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgdG9rZW5FbmRwb2ludChjb2RlKSkudGhlbihmdW5jdGlvbiAoaW5mbykge1xuXG4gICAgICBpZiAoaW5mby5oYXNPd25Qcm9wZXJ0eSgnYWNjZXNzX3Rva2VuJykpIHJlc29sdmUoZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4oY29udGVudHMsIGV4cGlyZXMsIGluZm8pKTtlbHNlIHJlamVjdCgnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlXSBhY2Nlc3MgdG9rZW4gbm90IHJldHVybmVkIGluIHRoZSBleGNoYW5nZSBjb2RlIHJlc3VsdDogJywgaW5mbyk7XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnZhciBnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4gPSBmdW5jdGlvbiBnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4ocmVzb3VyY2VzLCBsb2dpbikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjb2RlID0gdXJsUGFyc2VyKGxvZ2luLCAnY29kZScpO1xuXG4gICAgaWYgKCFjb2RlKSByZWplY3QoJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuXSBjb2RlIG5vdCByZXR1cm5lZCBieSB0aGUgbG9naW4gcmVzdWx0OiAnLCBsb2dpbik7XG5cbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBhY2Nlc3NUb2tlbkVuZHBvaW50KGNvZGUpKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG5cbiAgICAgIGlmIChpbmZvLmhhc093blByb3BlcnR5KCdhY2Nlc3NfdG9rZW4nKSkge1xuICAgICAgICB2YXIgZXhwaXJlcyA9IGdldEV4cGlyZXMoaW5mbyk7XG4gICAgICAgIHJlc29sdmUoYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBpbmZvLmFjY2Vzc190b2tlbiwgZXhwaXJlcywgaW5mbykpO1xuICAgICAgfSBlbHNlIHJlamVjdCgnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW5dIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAnLCBpbmZvKTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIGdldEV4cGlyZXMgPSBleHBvcnRzLmdldEV4cGlyZXMgPSBmdW5jdGlvbiBnZXRFeHBpcmVzKHVybCkge1xuICB2YXIgZXhwaXJlcyA9IHVybFBhcnNlcih1cmwsICdleHBpcmVzX2luJyk7XG5cbiAgaWYgKGV4cGlyZXMpIGV4cGlyZXMgPSBleHBpcmVzICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7ZWxzZSBleHBpcmVzID0gMzE1MzYwMDAwMCArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4gIHJldHVybiBleHBpcmVzO1xufTtcblxudmFyIGFjY2Vzc1Rva2VuUmVzdWx0ID0gZnVuY3Rpb24gYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgaW5wdXQsIHJlZnJlc2gpIHtcblxuICB2YXIgcmVzdWx0ID0geyBkb21haW46IGRvbWFpbiwgcmVzb3VyY2VzOiByZXNvdXJjZXMsIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbiwgZXhwaXJlczogZXhwaXJlcywgaW5wdXQ6IGlucHV0IH07XG5cbiAgaWYgKHJlZnJlc2gpIHJlc3VsdC5yZWZyZXNoID0gcmVmcmVzaDtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5XG4qL1xudmFyIElkcFByb3h5ID0gZXhwb3J0cy5JZHBQcm94eSA9IHtcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byB2YWxpZGF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb24gcmVjZWl2ZWRcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtpZHBJbmZvfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiBmdW5jdGlvbiB2YWxpZGF0ZUFzc2VydGlvbihjb25maWcsIGFzc2VydGlvbiwgb3JpZ2luKSB7XG4gICAgY29uc29sZS5pbmZvKCdbT0FVVEgyLnZhbGlkYXRlQXNzZXJ0aW9uXSBhc3NlcnRpb246ICcsIGF0b2IoYXNzZXJ0aW9uKSk7XG4gICAgdXNlckluZm9FbmRwb2ludCA9IGNvbmZpZy51c2VySW5mb0VuZHBvaW50O1xuICAgIGRvbWFpbiA9IGNvbmZpZy5kb21haW47XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgLy8gICAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgICB2YXIgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XG4gICAgICB2YXIgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQpO1xuICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBjb25maWcudmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludCh7IGFjY2Vzc190b2tlbjogY29udGVudC50b2tlbklELCBpbnB1dDogY29udGVudC50b2tlbklESlNPTiB9KSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShyZXN1bHQpID09PSBKU09OLnN0cmluZ2lmeShjb250ZW50LnRva2VuSURKU09OKSkge1xuICAgICAgICAgIC8vICAgICAgICBpZiAocmVzdWx0Lmhhc093blByb3BlcnR5KCduYW1lJykpIHtcbiAgICAgICAgICByZXNvbHZlKHsgaWRlbnRpdHk6IGNvbmZpZy5jb252ZXJ0VXNlclByb2ZpbGUocmVzdWx0KS5pZCwgY29udGVudHM6IGNvbnRlbnQucHVibGljS2V5IH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIC8qXG4gICAgcmVmcmVzaEFzc2VydGlvbjogKGlkZW50aXR5KSA9PiB7XG4gICAgICAvL2NvbnNvbGUubG9nKCdQUk9YWTpyZWZyZXNoQXNzZXJ0aW9uOm9sZElkZW50aXR5JywgaWRlbnRpdHkpO1xuICAgICAgbGV0IGkgPSBnb29nbGVJbmZvO1xuICBcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKGlkZW50aXR5LmluZm8ucmVmcmVzaFRva2VuKSB7XG4gICAgICAgICAgZXhjaGFuZ2VSZWZyZXNoVG9rZW4oaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4pLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGxldCBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaW5mb1Rva2VuKSB7XG4gIFxuICAgICAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7YWNjZXNzVG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgaWRUb2tlbjogdmFsdWUuaWRfdG9rZW4sIHJlZnJlc2hUb2tlbjogaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4sIHRva2VuVHlwZTogaWRlbnRpdHkuaW5mby50b2tlblR5cGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcbiAgICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuO1xuICBcbiAgICAgICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgaWRUb2tlblxuICAgICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaWRUb2tlbikge1xuICBcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS50b2tlbklESlNPTiA9IGlkVG9rZW47XG4gICAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZXhwaXJlcyA9IGlkVG9rZW4uZXhwO1xuICAgICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmVtYWlsID0gaWRUb2tlbi5lbWFpbDtcbiAgXG4gICAgICAgICAgICAgICAgbGV0IG9sZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRlbnRpdHkuYXNzZXJ0aW9uKSk7XG4gICAgICAgICAgICAgICAgbGV0IG9sZElkVG9rZW5TcGxpdGVkID0gb2xkSURUb2tlbi50b2tlbklELnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgICAgbGV0IG9sZERlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKG9sZElkVG9rZW5TcGxpdGVkWzFdKSk7XG4gICAgICAgICAgICAgICAgbGV0IGlkTm9uY2UgPSBvbGREZWNvZGVkSURUb2tlbi5ub25jZTtcbiAgXG4gICAgICAgICAgICAgICAgbGV0IHJlY2VpdmVkSURUb2tlbiA9IHZhbHVlLmlkX3Rva2VuO1xuICAgICAgICAgICAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IHJlY2VpdmVkSURUb2tlbi5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICAgIGxldCBkZWNvZGVkSURUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xuICBcbiAgICAgICAgICAgICAgICBkZWNvZGVkSURUb2tlbi5ub25jZSA9IGlkTm9uY2U7XG4gICAgICAgICAgICAgICAgbGV0IGluc2VydGVkTm9uY2UgPSBidG9hKEpTT04uc3RyaW5naWZ5KGRlY29kZWRJRFRva2VuKSk7XG4gICAgICAgICAgICAgICAgbGV0IG5ld0lEVG9rZW4gPSBpZFRva2VuU3BsaXRlZFswXSArICcuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGVkTm9uY2UgKyAnLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZFRva2VuU3BsaXRlZFsyXTtcbiAgXG4gICAgICAgICAgICAgICAgbGV0IGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3Rva2VuSUQ6IG5ld0lEVG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VufSkpO1xuICAgICAgICAgICAgICAgIGxldCBpZHBCdW5kbGUgPSB7ZG9tYWluOiAnZ29vZ2xlLmNvbScsIHByb3RvY29sOiAnT0lEQyd9O1xuICBcbiAgICAgICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgICAgICAgICAgICBsZXQgcmV0dXJuVmFsdWUgPSB7YXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBpbmZvOiBpZGVudGl0eUJ1bmRsZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246bmV3SWRlbnRpdHknLCByZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sKi9cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byBnZW5lcmF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb25cbiAgKlxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbjogZnVuY3Rpb24gZ2VuZXJhdGVBc3NlcnRpb24oY29uZmlnLCBjb250ZW50cywgb3JpZ2luLCBoaW50KSB7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29uZmlnXScsIGNvbmZpZyk7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmhpbnRdJywgaGludCk7XG4gICAgLy8gICAgbGV0IGkgPSBpZHBJbmZvO1xuICAgIHVzZXJJbmZvRW5kcG9pbnQgPSBjb25maWcudXNlckluZm9FbmRwb2ludDtcbiAgICB0b2tlbkVuZHBvaW50ID0gY29uZmlnLnRva2VuRW5kcG9pbnQ7XG4gICAgYXV0aG9yaXNhdGlvbkVuZHBvaW50ID0gY29uZmlnLmF1dGhvcmlzYXRpb25FbmRwb2ludDtcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xuXG4gICAgdmFyIF90aGlzID0gdW5kZWZpbmVkO1xuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmICghaGludCkge1xuXG4gICAgICAgIC8vICAgICAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbl0gTk9fSElOVDogcmVqZWN0aW5nIHdpdGggcmVxdWVzdFVybCAnLCByZXF1ZXN0VXJsKTtcblxuICAgICAgICByZWplY3QoeyBuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiBhdXRob3Jpc2F0aW9uRW5kcG9pbnQoY29udGVudHMpIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlIHJlcXVlc3QgaGF2ZSBhbHJlYWR5IGJlZW4gbWFkZSwgc28gaWRwUFJveHkgd2lsbCB0cnkgdG8gYWNjZXNzIHRoZSB1c2VyIGluZm9ybWF0aW9uXG4gICAgICAgIHZhciBleHBpcmVzID0gdXJsUGFyc2VyKGhpbnQsICdleHBpcmVzX2luJyk7XG5cbiAgICAgICAgaWYgKGV4cGlyZXMpIGV4cGlyZXMgPSBleHBpcmVzICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7ZWxzZSBleHBpcmVzID0gMzE1MzYwMDAwMCArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4gICAgICAgIHZhciBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnYWNjZXNzX3Rva2VuJyk7XG5cbiAgICAgICAgaWYgKGFjY2Vzc1Rva2VuKSByZXNvbHZlKGdlbmVyYXRlQXNzZXJ0aW9uV2l0aEFjY2Vzc1Rva2VuKGNvbnRlbnRzLCBleHBpcmVzLCB7IGFjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4gfSkpO2Vsc2UgcmVzb2x2ZShnZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlVG9rZW4oY29udGVudHMsIGV4cGlyZXMsIGhpbnQpKTtcbiAgICAgIH1cbiAgICB9LCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICByZWplY3QoZSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2V0IGFuIEFjY2VzcyBUb2tlblxuICAqXG4gICogQHBhcmFtICB7Y29uZmlnfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXG4gICogQHBhcmFtICB7cmVzb3VyY2VzfSBPYmplY3QgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cbiAgKi9cblxuICBnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDogZnVuY3Rpb24gZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQoY29uZmlnLCByZXNvdXJjZXMpIHtcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDpjb25maWddJywgY29uZmlnKTtcbiAgICAvLyAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XG4gICAgLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6cmVzb3VyY2VzXScsIHJlc291cmNlcyk7XG4gICAgLy8gICAgbGV0IGkgPSBpZHBJbmZvO1xuICAgIGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50ID0gY29uZmlnLmFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50O1xuXG4gICAgdmFyIF90aGlzID0gdW5kZWZpbmVkO1xuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgcmVzb2x2ZShhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChyZXNvdXJjZXMpKTtcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICByZWplY3QoZSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2V0IGFuIEFjY2VzcyBUb2tlblxuICAqXG4gICogQHBhcmFtICB7aWRwSW5mb30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEBwYXJhbSAge2xvZ2lufSBvcHRpb25hbCBsb2dpbiByZXN1bHRcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuXG4gIGdldEFjY2Vzc1Rva2VuOiBmdW5jdGlvbiBnZXRBY2Nlc3NUb2tlbihjb25maWcsIHJlc291cmNlcywgbG9naW4pIHtcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbjpjb25maWddJywgY29uZmlnKTtcbiAgICAvLyAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XG4gICAgLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW46bG9naW5dJywgbG9naW4pO1xuICAgIC8vICAgIGxldCBpID0gaWRwSW5mbztcbiAgICBhY2Nlc3NUb2tlbkVuZHBvaW50ID0gY29uZmlnLmFjY2Vzc1Rva2VuRW5kcG9pbnQ7XG4gICAgZG9tYWluID0gY29uZmlnLmRvbWFpbjtcblxuICAgIHZhciBfdGhpcyA9IHVuZGVmaW5lZDtcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAvLyB0aGUgdXNlciBpcyBsb2dnZWRpbiwgdHJ5IHRvIGV4dHJhY3QgdGhlIEFjY2VzcyBUb2tlbiBhbmQgaXRzIGV4cGlyZXNcbiAgICAgIHZhciBleHBpcmVzID0gZ2V0RXhwaXJlcyhsb2dpbik7XG5cbiAgICAgIHZhciBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihsb2dpbiwgJ2FjY2Vzc190b2tlbicpO1xuXG4gICAgICBpZiAoYWNjZXNzVG9rZW4pIHJlc29sdmUoYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgbG9naW4pKTtlbHNlIHJlc29sdmUoZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuKHJlc291cmNlcywgbG9naW4pKTtcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICByZWplY3QoZSk7XG4gICAgfSk7XG4gIH1cblxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk0dlpHVjJMWEJ5YjNSdmMzUjFZbk12YzNKakwybGtjSEJ5YjNoNUwwOUJWVlJJTG1welB6WXlPREFpWFN3aWJtRnRaWE1pT2xzaWRYTmxja2x1Wm05RmJtUndiMmx1ZENJc0luUnZhMlZ1Ulc1a2NHOXBiblFpTENKaGRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUWlMQ0prYjIxaGFXNGlMQ0poWTJObGMzTlViMnRsYmtWdVpIQnZhVzUwSWl3aVlXTmpaWE56Vkc5clpXNUJkWFJvYjNKcGMyRjBhVzl1Ulc1a2NHOXBiblFpTENKMWNteFFZWEp6WlhJaUxDSjFjbXdpTENKdVlXMWxJaXdpY21Wd2JHRmpaU0lzSW5KbFoyVjRVeUlzSW5KbFoyVjRJaXdpVW1WblJYaHdJaXdpY21WemRXeDBjeUlzSW1WNFpXTWlMQ0p6Wlc1a1NGUlVVRkpsY1hWbGMzUWlMQ0p0WlhSb2IyUWlMQ0o0YUhJaUxDSllUVXhJZEhSd1VtVnhkV1Z6ZENJc0ltOXdaVzRpTENKWVJHOXRZV2x1VW1WeGRXVnpkQ0lzSWxCeWIyMXBjMlVpTENKeVpYTnZiSFpsSWl3aWNtVnFaV04wSWl3aWIyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbElpd2laU0lzSW5KbFlXUjVVM1JoZEdVaUxDSnpkR0YwZFhNaUxDSnBibVp2SWl3aVNsTlBUaUlzSW5CaGNuTmxJaXdpY21WemNHOXVjMlZVWlhoMElpd2ljMlZ1WkNJc0ltVjRZMmhoYm1kbFVtVm1jbVZ6YUZSdmEyVnVJaXdpY21WbWNtVnphRlJ2YTJWdUlpd2lhU0lzSW1kdmIyZHNaVWx1Wm04aUxDSlZVa3dpTENKamJHbGxiblJKUkNJc0ltTnNhV1Z1ZEZObFkzSmxkQ0lzSW5Sb1pXNGlMQ0psY25KdmNpSXNJbWRsYm1WeVlYUmxRWE56WlhKMGFXOXVWMmwwYUVGalkyVnpjMVJ2YTJWdUlpd2lZMjl1ZEdWdWRITWlMQ0psZUhCcGNtVnpJaXdpYVc1bWIxUnZhMlZ1SWl3aVkyOXVjMjlzWlNJc0lteHZaeUlzSW1GemMyVnlkR2x2YmlJc0ltSjBiMkVpTENKemRISnBibWRwWm5raUxDSjBiMnRsYmtsRUlpd2lZV05qWlhOelgzUnZhMlZ1SWl3aWRHOXJaVzVKUkVwVFQwNGlMQ0p3ZFdKc2FXTkxaWGtpTENKaGRHOWlJaXdpYVdSd1FuVnVaR3hsSWl3aWNISnZkRzlqYjJ3aUxDSnlaWFIxY201V1lXeDFaU0lzSW1sa2NDSXNJblZ6WlhKUWNtOW1hV3hsSWl3aVoyVnVaWEpoZEdWQmMzTmxjblJwYjI1WGFYUm9RMjlrWlZSdmEyVnVJaXdpYUdsdWRDSXNJbU52WkdVaUxDSm9ZWE5QZDI1UWNtOXdaWEowZVNJc0ltZGxkRUZqWTJWemMxUnZhMlZ1VjJsMGFFTnZaR1ZVYjJ0bGJpSXNJbkpsYzI5MWNtTmxjeUlzSW14dloybHVJaXdpWjJWMFJYaHdhWEpsY3lJc0ltRmpZMlZ6YzFSdmEyVnVVbVZ6ZFd4MElpd2lUV0YwYUNJc0ltWnNiMjl5SWl3aVJHRjBaU0lzSW01dmR5SXNJbUZqWTJWemMxUnZhMlZ1SWl3aWFXNXdkWFFpTENKeVpXWnlaWE5vSWl3aWNtVnpkV3gwSWl3aVNXUndVSEp2ZUhraUxDSjJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJpSXNJbU52Ym1acFp5SXNJbTl5YVdkcGJpSXNJbVJsWTI5a1pXUkRiMjUwWlc1MElpd2lZMjl1ZEdWdWRDSXNJblpoYkdsa1lYUmxRWE56WlhKMGFXOXVSVzVrY0c5cGJuUWlMQ0pwWkdWdWRHbDBlU0lzSW1OdmJuWmxjblJWYzJWeVVISnZabWxzWlNJc0ltbGtJaXdpWTJGMFkyZ2lMQ0psY25JaUxDSm5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJpSXNJbDkwYUdseklpd2liRzluYVc1VmNtd2lMQ0puWlhSQlkyTmxjM05VYjJ0bGJrRjFkR2h2Y21sellYUnBiMjVGYm1Sd2IybHVkQ0lzSW1kbGRFRmpZMlZ6YzFSdmEyVnVJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVN4SlFVRkpRU3g1UWtGQlNqdEJRVU5CTEVsQlFVbERMSE5DUVVGS08wRkJRMEVzU1VGQlNVTXNPRUpCUVVvN1FVRkRRU3hKUVVGSlF5eGxRVUZLTzBGQlEwRXNTVUZCU1VNc05FSkJRVW83UVVGRFFTeEpRVUZKUXl4NVEwRkJTanM3UVVGRlFUdEJRVU5CTEZOQlFWTkRMRk5CUVZRc1EwRkJiVUpETEVkQlFXNUNMRVZCUVhkQ1F5eEpRVUY0UWl4RlFVRTRRanRCUVVNMVFrRXNVMEZCVDBFc1MwRkJTME1zVDBGQlRDeERRVUZoTEUxQlFXSXNSVUZCY1VJc1RVRkJja0lzUlVGQk5rSkJMRTlCUVRkQ0xFTkJRWEZETEUxQlFYSkRMRVZCUVRaRExFMUJRVGRETEVOQlFWQTdRVUZEUVN4TlFVRkpReXhUUVVGVExGbEJRVmxHTEVsQlFWb3NSMEZCYlVJc1YwRkJhRU03UVVGRFFTeE5RVUZKUnl4UlFVRlJMRWxCUVVsRExFMUJRVW9zUTBGQlYwWXNUVUZCV0N4RFFVRmFPMEZCUTBFc1RVRkJTVWNzVlVGQlZVWXNUVUZCVFVjc1NVRkJUaXhEUVVGWFVDeEhRVUZZTEVOQlFXUTdRVUZEUVN4TlFVRkpUU3haUVVGWkxFbEJRV2hDTEVWQlEwVXNUMEZCVHl4RlFVRlFMRU5CUkVZc1MwRkhSU3hQUVVGUFFTeFJRVUZSTEVOQlFWSXNRMEZCVUR0QlFVTklPenRCUVVWRUxGTkJRVk5GTEdWQlFWUXNRMEZCZVVKRExFMUJRWHBDTEVWQlFXbERWQ3hIUVVGcVF5eEZRVUZ6UXp0QlFVTndReXhOUVVGSlZTeE5RVUZOTEVsQlFVbERMR05CUVVvc1JVRkJWanRCUVVOQkxFMUJRVWtzY1VKQlFYRkNSQ3hIUVVGNlFpeEZRVUU0UWp0QlFVTTFRa0VzVVVGQlNVVXNTVUZCU2l4RFFVRlRTQ3hOUVVGVUxFVkJRV2xDVkN4SFFVRnFRaXhGUVVGelFpeEpRVUYwUWp0QlFVTkVMRWRCUmtRc1RVRkZUeXhKUVVGSkxFOUJRVTloTEdOQlFWQXNTVUZCZVVJc1YwRkJOMElzUlVGQk1FTTdRVUZETDBNN1FVRkRRVHRCUVVOQlNDeFZRVUZOTEVsQlFVbEhMR05CUVVvc1JVRkJUanRCUVVOQlNDeFJRVUZKUlN4SlFVRktMRU5CUVZOSUxFMUJRVlFzUlVGQmFVSlVMRWRCUVdwQ08wRkJRMFFzUjBGTVRTeE5RVXRCTzBGQlEwdzdRVUZEUVZVc1ZVRkJUU3hKUVVGT08wRkJRMFE3UVVGRFJDeFRRVUZQTEVsQlFVbEpMRTlCUVVvc1EwRkJXU3hWUVVGVlF5eFBRVUZXTEVWQlFXMUNReXhOUVVGdVFpeEZRVUV5UWp0QlFVTTFReXhSUVVGSlRpeEhRVUZLTEVWQlFWTTdRVUZEVUVFc1ZVRkJTVThzYTBKQlFVb3NSMEZCZVVJc1ZVRkJWVU1zUTBGQlZpeEZRVUZoTzBGQlEzQkRMRmxCUVVsU0xFbEJRVWxUTEZWQlFVb3NTMEZCYlVJc1EwRkJka0lzUlVGQk1FSTdRVUZEZUVJc1kwRkJTVlFzU1VGQlNWVXNUVUZCU2l4TFFVRmxMRWRCUVc1Q0xFVkJRWGRDTzBGQlEzUkNMR2RDUVVGSlF5eFBRVUZQUXl4TFFVRkxReXhMUVVGTUxFTkJRVmRpTEVsQlFVbGpMRmxCUVdZc1EwRkJXRHRCUVVOQlZDeHZRa0ZCVVUwc1NVRkJVanRCUVVORUxGZEJTRVFzVFVGSFR5eEpRVUZKV0N4SlFVRkpWU3hOUVVGS0xFdEJRV1VzUjBGQmJrSXNSVUZCZDBJN1FVRkROMEpLTEcxQ1FVRlBMSGxEUVVGUU8wRkJRMFFzVjBGR1RTeE5RVVZCTzBGQlEweEJMRzFDUVVGUExEUkRRVUZRTzBGQlEwUTdRVUZEUmp0QlFVTkdMRTlCV0VRN1FVRlpRVTRzVlVGQlNXVXNTVUZCU2p0QlFVTkVMRXRCWkVRc1RVRmpUenRCUVVOTVZDeGhRVUZQTEc5Q1FVRlFPMEZCUTBRN1FVRkRSaXhIUVd4Q1RTeERRVUZRTzBGQmJVSkVPenRCUVVWRUxFbEJRVWxWTEhWQ1FVRjNRaXhUUVVGNFFrRXNiMEpCUVhkQ0xFTkJRVlZETEZsQlFWWXNSVUZCZDBJN1FVRkRiRVFzVFVGQlNVTXNTVUZCU1VNc1ZVRkJVanM3UVVGRlFTeE5RVUZKUXl4TlFVRk5SaXhGUVVGRmJFTXNZVUZCUml4SFFVRnJRaXhaUVVGc1FpeEhRVUZwUTJ0RExFVkJRVVZITEZGQlFXNURMRWRCUVRoRExHbENRVUU1UXl4SFFVRnJSVWdzUlVGQlJVa3NXVUZCY0VVc1IwRkJiVVlzYVVKQlFXNUdMRWRCUVhWSFRDeFpRVUYyUnl4SFFVRnpTQ3d5UWtGQmFFazdPMEZCUlVFc1UwRkJUeXhKUVVGSllpeFBRVUZLTEVOQlFWa3NWVUZCVlVNc1QwRkJWaXhGUVVGdFFrTXNUVUZCYmtJc1JVRkJNa0k3UVVGRE5VTlNMRzlDUVVGblFpeE5RVUZvUWl4RlFVRjNRbk5DTEVkQlFYaENMRVZCUVRaQ1J5eEpRVUUzUWl4RFFVRnJReXhWUVVGVldpeEpRVUZXTEVWQlFXZENPMEZCUTJoRVRpeGpRVUZSVFN4SlFVRlNPMEZCUTBRc1MwRkdSQ3hGUVVWSExGVkJRVlZoTEV0QlFWWXNSVUZCYVVJN1FVRkRiRUpzUWl4aFFVRlBhMElzUzBGQlVEdEJRVU5FTEV0QlNrUTdRVUZOUkN4SFFWQk5MRU5CUVZBN1FVRlJSQ3hEUVdKRU96dEJRV1ZCTEVsQlFVbERMRzFEUVVGeFF5eFRRVUZ5UTBFc1owTkJRWEZETEVOQlFWVkRMRkZCUVZZc1JVRkJiMEpETEU5QlFYQkNMRVZCUVRaQ2FFSXNTVUZCTjBJc1JVRkJiVU03TzBGQlJURkZMRk5CUVU4c1NVRkJTVkFzVDBGQlNpeERRVUZaTEZWQlFWVkRMRTlCUVZZc1JVRkJiVUpETEUxQlFXNUNMRVZCUVRKQ08wRkJRelZEVWl4dlFrRkJaMElzUzBGQmFFSXNSVUZCZFVKbUxHbENRVUZwUWpSQ0xFbEJRV3BDTEVOQlFYWkNMRVZCUVN0RFdTeEpRVUV2UXl4RFFVRnZSQ3hWUVVGVlN5eFRRVUZXTEVWQlFYRkNPMEZCUTNaRlF5eGpRVUZSUXl4SFFVRlNMRU5CUVZrc2JVUkJRVm9zUlVGQmFVVkdMRk5CUVdwRk96dEJRVVZCTEZWQlFVbEhMRmxCUVZsRExFdEJRVXR3UWl4TFFVRkxjVUlzVTBGQlRDeERRVUZsTEVWQlFVVkRMRk5CUVZOMlFpeExRVUZMZDBJc1dVRkJhRUlzUlVGQk9FSkRMR0ZCUVdGU0xGTkJRVE5ETEVWQlFYTkVVeXhYUVVGWFdDeFJRVUZxUlN4RlFVRm1MRU5CUVV3c1EwRkJhRUk3UVVGRFFVY3NZMEZCVVVNc1IwRkJVaXhEUVVGWkxEUkRRVUZhTEVWQlFUQkVVU3hMUVVGTFVDeFRRVUZNTEVOQlFURkVPMEZCUTBFc1ZVRkJTVkVzV1VGQldTeEZRVUZGY2tRc1VVRkJVVUVzVFVGQlZpeEZRVUZyUW5ORUxGVkJRVlVzVVVGQk5VSXNSVUZCYUVJN08wRkJSVUU3UVVGRFFTeFZRVUZKUXl4alFVRmpMRVZCUVVWV0xGZEJRVmRCTEZOQlFXSXNSVUZCZDBKWExFdEJRVXRJTEZOQlFUZENMRVZCUVhkRFdpeFRRVUZUUVN4UFFVRnFSQ3hGUVVFd1JHZENMR0ZCUVdGbUxGTkJRWFpGTEVWQlFXeENPenRCUVVWT096czdRVUZIVFVNc1kwRkJVVU1zUjBGQlVpeERRVUZaTEhkRFFVRmFMRVZCUVhORWJFSXNTMEZCUzNGQ0xGTkJRVXdzUTBGQlpWRXNWMEZCWml4RFFVRjBSRHM3UVVGRlFYQkRMR05CUVZGdlF5eFhRVUZTTzBGQlEwUXNTMEZvUWtRN1FVRnBRa1FzUjBGc1FrMHNRMEZCVUR0QlFXMUNSQ3hEUVhKQ1JEczdRVUYxUWtFc1NVRkJTVWNzYVVOQlFXdERMRk5CUVd4RFFTdzRRa0ZCYTBNc1EwRkJWMnhDTEZGQlFWZ3NSVUZCY1VKRExFOUJRWEpDTEVWQlFUaENhMElzU1VGQk9VSXNSVUZCYjBNN1FVRkRlRVVzVTBGQlR5eEpRVUZKZWtNc1QwRkJTaXhEUVVGWkxGVkJRVlZETEU5QlFWWXNSVUZCYlVKRExFMUJRVzVDTEVWQlFUSkNPMEZCUXpWRExGRkJRVWwzUXl4UFFVRlBla1FzVlVGQlZYZEVMRWxCUVZZc1JVRkJaMElzVFVGQmFFSXNRMEZCV0RzN1FVRkZRU3hSUVVGSkxFTkJRVU5ETEVsQlFVd3NSVUZCVjNoRExFOUJRVThzT0VWQlFWQXNSVUZCZFVaMVF5eEpRVUYyUmpzN1FVRkZWQzlETEc5Q1FVRm5RaXhOUVVGb1FpeEZRVUYzUW1Rc1kwRkJZemhFTEVsQlFXUXNRMEZCZUVJc1JVRkJOa04yUWl4SlFVRTNReXhEUVVGclJDeFZRVUZWV2l4SlFVRldMRVZCUVdkQ096dEJRVVZvUlN4VlFVRkpRU3hMUVVGTGIwTXNZMEZCVEN4RFFVRnZRaXhqUVVGd1FpeERRVUZLTEVWQlEwVXhReXhSUVVGUmIwSXNhVU5CUVd0RFF5eFJRVUZzUXl4RlFVRTBRME1zVDBGQk5VTXNSVUZCY1VSb1FpeEpRVUZ5UkN4RFFVRlNMRVZCUkVZc1MwRkZTMHdzVDBGQlR5dzBSa0ZCVUN4RlFVRnhSMHNzU1VGQmNrYzdRVUZEVGl4TFFVeEVMRVZCUzBjc1ZVRkJWV0VzUzBGQlZpeEZRVUZwUWp0QlFVTnNRbXhDTEdGQlFVOXJRaXhMUVVGUU8wRkJRMFFzUzBGUVJEdEJRVk5JTEVkQlpFMHNRMEZCVUR0QlFXVkVMRU5CYUVKRU96dEJRV3RDUVN4SlFVRkpkMElzT0VKQlFTdENMRk5CUVM5Q1FTd3lRa0ZCSzBJc1EwRkJWVU1zVTBGQlZpeEZRVUZ4UWtNc1MwRkJja0lzUlVGQk5FSTdRVUZETjBRc1UwRkJUeXhKUVVGSk9VTXNUMEZCU2l4RFFVRlpMRlZCUVZWRExFOUJRVllzUlVGQmJVSkRMRTFCUVc1Q0xFVkJRVEpDTzBGQlF6VkRMRkZCUVVsM1F5eFBRVUZQZWtRc1ZVRkJWVFpFTEV0QlFWWXNSVUZCYVVJc1RVRkJha0lzUTBGQldEczdRVUZGUVN4UlFVRkpMRU5CUVVOS0xFbEJRVXdzUlVGQlYzaERMRTlCUVU4c09FVkJRVkFzUlVGQmRVWTBReXhMUVVGMlJqczdRVUZGVkhCRUxHOUNRVUZuUWl4TlFVRm9RaXhGUVVGM1FsZ3NiMEpCUVc5Q01rUXNTVUZCY0VJc1EwRkJlRUlzUlVGQmJVUjJRaXhKUVVGdVJDeERRVUYzUkN4VlFVRlZXaXhKUVVGV0xFVkJRV2RDT3p0QlFVVjBSU3hWUVVGSlFTeExRVUZMYjBNc1kwRkJUQ3hEUVVGdlFpeGpRVUZ3UWl4RFFVRktMRVZCUVhsRE8wRkJRM1pETEZsQlFVbHdRaXhWUVVGVmQwSXNWMEZCVjNoRExFbEJRVmdzUTBGQlpEdEJRVU5CVGl4blFrRkJVeXRETEd0Q1FVRnJRa2dzVTBGQmJFSXNSVUZCTmtKMFF5eExRVUZMZDBJc1dVRkJiRU1zUlVGQlowUlNMRTlCUVdoRUxFVkJRWGxFYUVJc1NVRkJla1FzUTBGQlZEdEJRVU5FTEU5QlNFUXNUVUZIVDB3c1QwRkJUeXc0UmtGQlVDeEZRVUYxUjBzc1NVRkJka2M3UVVGRFVpeExRVTVFTEVWQlRVY3NWVUZCVldFc1MwRkJWaXhGUVVGcFFqdEJRVU5zUW14Q0xHRkJRVTlyUWl4TFFVRlFPMEZCUTBRc1MwRlNSRHRCUVZWSUxFZEJaazBzUTBGQlVEdEJRV2RDUkN4RFFXcENSRHM3UVVGdFFrOHNTVUZCU1RKQ0xHdERRVUZqTEZOQlFXUkJMRlZCUVdNc1EwRkJWVGRFTEVkQlFWWXNSVUZCWlR0QlFVTjBReXhOUVVGSmNVTXNWVUZCVlhSRExGVkJRVlZETEVkQlFWWXNSVUZCWlN4WlFVRm1MRU5CUVdRN08wRkJSVUVzVFVGQlNYRkRMRTlCUVVvc1JVRkJZVUVzVlVGQlZVRXNWVUZCVlRCQ0xFdEJRVXRETEV0QlFVd3NRMEZCVjBNc1MwRkJTME1zUjBGQlRDeExRVUZoTEVsQlFYaENMRU5CUVhCQ0xFTkJRV0lzUzBGRFN6ZENMRlZCUVZVc1lVRkJZVEJDTEV0QlFVdERMRXRCUVV3c1EwRkJWME1zUzBGQlMwTXNSMEZCVEN4TFFVRmhMRWxCUVhoQ0xFTkJRWFpDT3p0QlFVVk1MRk5CUVU4M1FpeFBRVUZRTzBGQlJVUXNRMEZTVFRzN1FVRlhVQ3hKUVVGSmVVSXNiMEpCUVhGQ0xGTkJRWEpDUVN4cFFrRkJjVUlzUTBGQlZVZ3NVMEZCVml4RlFVRnhRbEVzVjBGQmNrSXNSVUZCYTBNNVFpeFBRVUZzUXl4RlFVRXlReXRDTEV0QlFUTkRMRVZCUVd0RVF5eFBRVUZzUkN4RlFVRXlSRHM3UVVGRmJFWXNUVUZCU1VNc1UwRkJVeXhGUVVGRk1VVXNVVUZCVVVFc1RVRkJWaXhGUVVGclFpdEVMRmRCUVZkQkxGTkJRVGRDTEVWQlFYZERVU3hoUVVGaFFTeFhRVUZ5UkN4RlFVRnJSVGxDTEZOQlFWTkJMRTlCUVRORkxFVkJRVzlHSzBJc1QwRkJUMEVzUzBGQk0wWXNSVUZCWWpzN1FVRkZRU3hOUVVGSlF5eFBRVUZLTEVWQlFXRkRMRTlCUVU5RUxFOUJRVkFzUjBGQmFVSkJMRTlCUVdwQ096dEJRVVZpTEZOQlFVOURMRTFCUVZBN1FVRkZSQ3hEUVZKRU96dEJRVlZCT3pzN1FVRkhUeXhKUVVGSlF5dzRRa0ZCVnpzN1FVRkZjRUk3T3pzN096czdPenRCUVZOQlF5eHhRa0ZCYlVJc01rSkJRVU5ETEUxQlFVUXNSVUZCVTJoRExGTkJRVlFzUlVGQmIwSnBReXhOUVVGd1FpeEZRVUVyUWp0QlFVTm9SRzVETEZsQlFWRnNRaXhKUVVGU0xFTkJRV0VzZDBOQlFXSXNSVUZCZFVReVFpeExRVUZMVUN4VFFVRk1MRU5CUVhaRU8wRkJRMEZvUkN4MVFrRkJiVUpuUml4UFFVRlBhRVlzWjBKQlFURkNPMEZCUTBGSExHRkJRVk0yUlN4UFFVRlBOMFVzVFVGQmFFSTdPMEZCUlVFc1YwRkJUeXhKUVVGSmEwSXNUMEZCU2l4RFFVRlpMRlZCUVZWRExFOUJRVllzUlVGQmJVSkRMRTFCUVc1Q0xFVkJRVEpDTzBGQlEyeEVPMEZCUTAwc1ZVRkJTVEpFTEdsQ1FVRnBRak5DTEV0QlFVdFFMRk5CUVV3c1EwRkJja0k3UVVGRFFTeFZRVUZKYlVNc1ZVRkJWWFJFTEV0QlFVdERMRXRCUVV3c1EwRkJWMjlFTEdOQlFWZ3NRMEZCWkR0QlFVTkJia1VzYzBKQlFXZENMRXRCUVdoQ0xFVkJRWFZDYVVVc1QwRkJUMGtzZVVKQlFWQXNRMEZCYVVNc1JVRkJRMmhETEdOQlFXTXJRaXhSUVVGUmFFTXNUMEZCZGtJc1JVRkJaME4zUWl4UFFVRlBVU3hSUVVGUk9VSXNWMEZCTDBNc1JVRkJha01zUTBGQmRrSXNSVUZCZFVoaUxFbEJRWFpJTEVOQlFUUklMR3RDUVVGVk8wRkJRM0JKTEZsQlFVbFlMRXRCUVV0eFFpeFRRVUZNTEVOQlFXVXlRaXhOUVVGbUxFMUJRVEpDYUVRc1MwRkJTM0ZDTEZOQlFVd3NRMEZCWldsRExGRkJRVkU1UWl4WFFVRjJRaXhEUVVFdlFpeEZRVUZ2UlR0QlFVTnNSVHRCUVVOQkwwSXNhMEpCUVZFc1JVRkJSU3RFTEZWQlFWVk1MRTlCUVU5TkxHdENRVUZRTEVOQlFUQkNWQ3hOUVVFeFFpeEZRVUZyUTFVc1JVRkJPVU1zUlVGQmEwUTFReXhWUVVGVmQwTXNVVUZCVVRkQ0xGTkJRWEJGTEVWQlFWSTdRVUZEUkN4VFFVaEVMRTFCUjA4N1FVRkRUQzlDTEdsQ1FVRlBMRk5CUVZBN1FVRkRSRHRCUVVOR0xFOUJVRVFzUlVGUFIybEZMRXRCVUVnc1EwRlBVeXhsUVVGUE8wRkJRMlJxUlN4bFFVRlBhMFVzUjBGQlVEdEJRVU5FTEU5QlZFUTdRVUZWUkN4TFFXUk5MRU5CUVZBN1FVRmxSQ3hIUVM5Q2JVSTdRVUZuUTNCQ096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVd0RVFUczdPenM3T3pzN08wRkJVMEZETEhGQ1FVRnRRaXd5UWtGQlExWXNUVUZCUkN4RlFVRlRja01zVVVGQlZDeEZRVUZ0UW5ORExFMUJRVzVDTEVWQlFUSkNia0lzU1VGQk0wSXNSVUZCYjBNN1FVRkRja1JvUWl4WlFVRlJReXhIUVVGU0xFTkJRVmtzYlVOQlFWb3NSVUZCYVVScFF5eE5RVUZxUkR0QlFVTkJiRU1zV1VGQlVVTXNSMEZCVWl4RFFVRlpMSEZEUVVGYUxFVkJRVzFFU2l4UlFVRnVSRHRCUVVOQlJ5eFpRVUZSUXl4SFFVRlNMRU5CUVZrc2JVTkJRVm9zUlVGQmFVUnJReXhOUVVGcVJEdEJRVU5CYmtNc1dVRkJVVU1zUjBGQlVpeERRVUZaTEdsRFFVRmFMRVZCUVN0RFpTeEpRVUV2UXp0QlFVTktPMEZCUTBrNVJDeDFRa0ZCYlVKblJpeFBRVUZQYUVZc1owSkJRVEZDTzBGQlEwRkRMRzlDUVVGblFpdEZMRTlCUVU4dlJTeGhRVUYyUWp0QlFVTkJReXcwUWtGQmQwSTRSU3hQUVVGUE9VVXNjVUpCUVM5Q08wRkJRMEZETEdGQlFWTTJSU3hQUVVGUE4wVXNUVUZCYUVJN08wRkJSVUVzVVVGQlNYZEdMR2xDUVVGS08wRkJRMEU3UVVGRFFTeFhRVUZQTEVsQlFVbDBSU3hQUVVGS0xFTkJRVmtzVlVGQlZVTXNUMEZCVml4RlFVRnRRa01zVFVGQmJrSXNSVUZCTWtJN1FVRkROVU1zVlVGQlNTeERRVUZEZFVNc1NVRkJUQ3hGUVVGWE96dEJRVVZxUWpzN1FVRkZVWFpETEdWQlFVOHNSVUZCUldZc1RVRkJUU3hsUVVGU0xFVkJRWGxDYjBZc1ZVRkJWVEZHTEhOQ1FVRnpRbmxETEZGQlFYUkNMRU5CUVc1RExFVkJRVkE3UVVGRlJDeFBRVTVFTEUxQlRVODdRVUZEVER0QlFVTkJMRmxCUVVsRExGVkJRVlYwUXl4VlFVRlZkMFFzU1VGQlZpeEZRVUZuUWl4WlFVRm9RaXhEUVVGa096dEJRVVZCTEZsQlFVbHNRaXhQUVVGS0xFVkJRV0ZCTEZWQlFWVkJMRlZCUVZVd1FpeExRVUZMUXl4TFFVRk1MRU5CUVZkRExFdEJRVXRETEVkQlFVd3NTMEZCWVN4SlFVRjRRaXhEUVVGd1FpeERRVUZpTEV0QlEwczNRaXhWUVVGVkxHRkJRV0V3UWl4TFFVRkxReXhMUVVGTUxFTkJRVmRETEV0QlFVdERMRWRCUVV3c1MwRkJZU3hKUVVGNFFpeERRVUYyUWpzN1FVRkZUQ3haUVVGSlF5eGpRVUZqY0VVc1ZVRkJWWGRFTEVsQlFWWXNSVUZCWjBJc1kwRkJhRUlzUTBGQmJFSTdPMEZCUlVFc1dVRkJTVmtzVjBGQlNpeEZRVUZwUW5CRUxGRkJRVk52UWl4cFEwRkJhVU5ETEZGQlFXcERMRVZCUVRKRFF5eFBRVUV6UXl4RlFVRnRSQ3hGUVVGRFVTeGpRVUZqYzBJc1YwRkJaaXhGUVVGdVJDeERRVUZVTEVWQlFXcENMRXRCUTB0d1JDeFJRVUZUZFVNc0swSkJRU3RDYkVJc1VVRkJMMElzUlVGQmVVTkRMRTlCUVhwRExFVkJRV3RFYTBJc1NVRkJiRVFzUTBGQlZEdEJRVU5PTzBGQlEwWXNTMEZ1UWswc1JVRnRRa29zVlVGQlZYSkRMRU5CUVZZc1JVRkJZVHM3UVVGRlpFWXNZVUZCVDBVc1EwRkJVRHRCUVVORUxFdEJkRUpOTEVOQlFWQTdRVUYxUWtRc1IwRXZTRzFDT3p0QlFXbEpjRUk3T3pzN096czdPMEZCVVVGdlJTeDFRMEZCY1VNc05rTkJRVU5pTEUxQlFVUXNSVUZCVTJRc1UwRkJWQ3hGUVVGMVFqdEJRVU14UkhCQ0xGbEJRVkZETEVkQlFWSXNRMEZCV1N4eFJFRkJXaXhGUVVGdFJXbERMRTFCUVc1Rk8wRkJRMG83UVVGRFFUdEJRVU5KYkVNc1dVRkJVVU1zUjBGQlVpeERRVUZaTEhkRVFVRmFMRVZCUVhORmJVSXNVMEZCZEVVN1FVRkRTanRCUVVOSk4wUXNkVU5CUVcxRE1rVXNUMEZCVHpORkxHZERRVUV4UXpzN1FVRkZRU3hSUVVGSmMwWXNhVUpCUVVvN1FVRkRRVHRCUVVOQkxGZEJRVThzU1VGQlNYUkZMRTlCUVVvc1EwRkJXU3hWUVVGVlF5eFBRVUZXTEVWQlFXMUNReXhOUVVGdVFpeEZRVUV5UWpzN1FVRkZNVU5FTEdOQlFWTnFRaXhwUTBGQmFVTTJSQ3hUUVVGcVF5eERRVUZVTzBGQlJVZ3NTMEZLVFN4RlFVbEtMRlZCUVZWNlF5eERRVUZXTEVWQlFXRTdPMEZCUldSR0xHRkJRVTlGTEVOQlFWQTdRVUZEUkN4TFFWQk5MRU5CUVZBN1FVRlJSQ3hIUVROS2JVSTdPMEZCTmtwd1FqczdPenM3T3pzN096dEJRVlZCY1VVc2EwSkJRV2RDTEhkQ1FVRkRaQ3hOUVVGRUxFVkJRVk5rTEZOQlFWUXNSVUZCYjBKRExFdEJRWEJDTEVWQlFUaENPMEZCUXpWRGNrSXNXVUZCVVVNc1IwRkJVaXhEUVVGWkxHZERRVUZhTEVWQlFUaERhVU1zVFVGQk9VTTdRVUZEU2p0QlFVTkJPMEZCUTBsc1F5eFpRVUZSUXl4SFFVRlNMRU5CUVZrc0swSkJRVm9zUlVGQk5rTnZRaXhMUVVFM1F6dEJRVU5LTzBGQlEwa3ZSQ3d3UWtGQmMwSTBSU3hQUVVGUE5VVXNiVUpCUVRkQ08wRkJRMEZFTEdGQlFWTTJSU3hQUVVGUE4wVXNUVUZCYUVJN08wRkJSVUVzVVVGQlNYZEdMR2xDUVVGS08wRkJRMEU3UVVGRFFTeFhRVUZQTEVsQlFVbDBSU3hQUVVGS0xFTkJRVmtzVlVGQlZVTXNUMEZCVml4RlFVRnRRa01zVFVGQmJrSXNSVUZCTWtJN1FVRkRNVU03UVVGRFFTeFZRVUZKY1VJc1ZVRkJWWGRDTEZkQlFWZEVMRXRCUVZnc1EwRkJaRHM3UVVGRlFTeFZRVUZKVHl4alFVRmpjRVVzVlVGQlZUWkVMRXRCUVZZc1JVRkJhVUlzWTBGQmFrSXNRMEZCYkVJN08wRkJSVUVzVlVGQlNVOHNWMEZCU2l4RlFVRnBRbkJFTEZGQlFWTXJReXhyUWtGQmEwSklMRk5CUVd4Q0xFVkJRVFpDVVN4WFFVRTNRaXhGUVVFd1F6bENMRTlCUVRGRExFVkJRVzFFZFVJc1MwRkJia1FzUTBGQlZDeEZRVUZxUWl4TFFVTkxOME1zVVVGQlV6SkRMRFJDUVVFMFFrTXNVMEZCTlVJc1JVRkJkVU5ETEV0QlFYWkRMRU5CUVZRN1FVRkRVaXhMUVZKTkxFVkJVVW9zVlVGQlZURkRMRU5CUVZZc1JVRkJZVHM3UVVGRlpFWXNZVUZCVDBVc1EwRkJVRHRCUVVORUxFdEJXRTBzUTBGQlVEdEJRVmxFT3p0QlFUbE1iVUlzUTBGQlppSXNJbVpwYkdVaU9pSXhMbXB6SWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaVhHNHZMMnhsZENCcFpHVnVkR2wwYVdWeklEMGdlMzA3WEc0dkwyeGxkQ0J1U1dSbGJuUnBkSGtnUFNBd08xeHVMeTlzWlhRZ2NtVmthWEpsWTNSVlVra2dQU0JzYjJOaGRHbHZiaTV3Y205MGIyTnZiQ0FySUNjdkx5Y2dLeUJzYjJOaGRHbHZiaTVvYjNOMGJtRnRaU0FySUNoc2IyTmhkR2x2Ymk1d2IzSjBJQ0U5UFNBbkp5QS9JQ2M2SnlBcklHeHZZMkYwYVc5dUxuQnZjblFnT2lBbkp5azdYRzVzWlhRZ2RYTmxja2x1Wm05RmJtUndiMmx1ZER0Y2JteGxkQ0IwYjJ0bGJrVnVaSEJ2YVc1ME8xeHViR1YwSUdGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWREdGNibXhsZENCa2IyMWhhVzQ3WEc1c1pYUWdZV05qWlhOelZHOXJaVzVGYm1Sd2IybHVkRHRjYm14bGRDQmhZMk5sYzNOVWIydGxia0YxZEdodmNtbHpZWFJwYjI1RmJtUndiMmx1ZER0Y2JseHVMeTltZFc1amRHbHZiaUIwYnlCd1lYSnpaU0IwYUdVZ2NYVmxjbmtnYzNSeWFXNW5JR2x1SUhSb1pTQm5hWFpsYmlCVlVrd2dkRzhnYjJKaGRHbHVJR05sY25SaGFXNGdkbUZzZFdWelhHNW1kVzVqZEdsdmJpQjFjbXhRWVhKelpYSW9kWEpzTENCdVlXMWxLU0I3WEc0Z0lHNWhiV1VnUFNCdVlXMWxMbkpsY0d4aFkyVW9MMXRjWEZ0ZEx5d2dKMXhjWEZ4Y1hGc25LUzV5WlhCc1lXTmxLQzliWEZ4ZFhTOHNJQ2RjWEZ4Y1hGeGRKeWs3WEc0Z0lHeGxkQ0J5WldkbGVGTWdQU0FuVzF4Y1hGd2pKajlkSnlBcklHNWhiV1VnS3lBblBTaGJYaVlqWFNvcEp6dGNiaUFnYkdWMElISmxaMlY0SUQwZ2JtVjNJRkpsWjBWNGNDaHlaV2RsZUZNcE8xeHVJQ0JzWlhRZ2NtVnpkV3gwY3lBOUlISmxaMlY0TG1WNFpXTW9kWEpzS1R0Y2JpQWdhV1lnS0hKbGMzVnNkSE1nUFQwOUlHNTFiR3dwWEc0Z0lDQWdjbVYwZFhKdUlDY25PMXh1SUNCbGJITmxYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkSE5iTVYwN1hHNTlYRzVjYm1aMWJtTjBhVzl1SUhObGJtUklWRlJRVW1WeGRXVnpkQ2h0WlhSb2IyUXNJSFZ5YkNrZ2UxeHVJQ0JzWlhRZ2VHaHlJRDBnYm1WM0lGaE5URWgwZEhCU1pYRjFaWE4wS0NrN1hHNGdJR2xtSUNnbmQybDBhRU55WldSbGJuUnBZV3h6SnlCcGJpQjRhSElwSUh0Y2JpQWdJQ0I0YUhJdWIzQmxiaWh0WlhSb2IyUXNJSFZ5YkN3Z2RISjFaU2s3WEc0Z0lIMGdaV3h6WlNCcFppQW9kSGx3Wlc5bUlGaEViMjFoYVc1U1pYRjFaWE4wSUNFOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdMeThnVDNSb1pYSjNhWE5sTENCamFHVmpheUJwWmlCWVJHOXRZV2x1VW1WeGRXVnpkQzVjYmlBZ0lDQXZMeUJZUkc5dFlXbHVVbVZ4ZFdWemRDQnZibXg1SUdWNGFYTjBjeUJwYmlCSlJTd2dZVzVrSUdseklFbEZKM01nZDJGNUlHOW1JRzFoYTJsdVp5QkRUMUpUSUhKbGNYVmxjM1J6TGx4dUlDQWdJSGhvY2lBOUlHNWxkeUJZUkc5dFlXbHVVbVZ4ZFdWemRDZ3BPMXh1SUNBZ0lIaG9jaTV2Y0dWdUtHMWxkR2h2WkN3Z2RYSnNLVHRjYmlBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0F2THlCUGRHaGxjbmRwYzJVc0lFTlBVbE1nYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ0JpZVNCMGFHVWdZbkp2ZDNObGNpNWNiaUFnSUNCNGFISWdQU0J1ZFd4c08xeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ2FXWWdLSGhvY2lrZ2UxeHVJQ0FnSUNBZ2VHaHlMbTl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU0E5SUdaMWJtTjBhVzl1SUNobEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoNGFISXVjbVZoWkhsVGRHRjBaU0E5UFQwZ05Da2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDRhSEl1YzNSaGRIVnpJRDA5UFNBeU1EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwYm1adklEMGdTbE5QVGk1d1lYSnpaU2g0YUhJdWNtVnpjRzl1YzJWVVpYaDBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2FXNW1ieWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDRhSEl1YzNSaGRIVnpJRDA5UFNBME1EQXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENnblZHaGxjbVVnZDJGeklHRnVJR1Z5Y205eUlIQnliMk5sYzNOcGJtY2dkR2hsSUhSdmEyVnVKeWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25jMjl0WlhSb2FXNW5JR1ZzYzJVZ2IzUm9aWElnZEdoaGJpQXlNREFnZDJGeklISmxkSFZ5Ym1Wa0p5azdYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOU8xeHVJQ0FnSUNBZ2VHaHlMbk5sYm1Rb0tUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY21WcVpXTjBLQ2REVDFKVElHNXZkQ0J6ZFhCd2IzSjBaV1FuS1R0Y2JpQWdJQ0I5WEc0Z0lIMHBPMXh1ZlZ4dVhHNXNaWFFnWlhoamFHRnVaMlZTWldaeVpYTm9WRzlyWlc0Z1BTQW9ablZ1WTNScGIyNGdLSEpsWm5KbGMyaFViMnRsYmlrZ2UxeHVJQ0JzWlhRZ2FTQTlJR2R2YjJkc1pVbHVabTg3WEc1Y2JpQWdiR1YwSUZWU1RDQTlJR2t1ZEc5clpXNUZibVJ3YjJsdWRDQXJJQ2RqYkdsbGJuUmZhV1E5SnlBcklHa3VZMnhwWlc1MFNVUWdLeUFuSm1Oc2FXVnVkRjl6WldOeVpYUTlKeUFySUdrdVkyeHBaVzUwVTJWamNtVjBJQ3NnSnlaeVpXWnlaWE5vWDNSdmEyVnVQU2NnS3lCeVpXWnlaWE5vVkc5clpXNGdLeUFuSm1keVlXNTBYM1I1Y0dVOWNtVm1jbVZ6YUY5MGIydGxiaWM3WEc1Y2JpQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVJQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQnpaVzVrU0ZSVVVGSmxjWFZsYzNRb0oxQlBVMVFuTENCVlVrd3BMblJvWlc0b1puVnVZM1JwYjI0Z0tHbHVabThwSUh0Y2JpQWdJQ0FnSUhKbGMyOXNkbVVvYVc1bWJ5azdYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNGdLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQnlaV3BsWTNRb1pYSnliM0lwTzF4dUlDQWdJSDBwTzF4dVhHNGdJSDBwTzF4dWZTazdYRzVjYm14bGRDQm5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJsZHBkR2hCWTJObGMzTlViMnRsYmlBOUlDZ2dablZ1WTNScGIyNGdLR052Ym5SbGJuUnpMQ0JsZUhCcGNtVnpMQ0JwYm1adktTQjdYRzVjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlDaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNCelpXNWtTRlJVVUZKbGNYVmxjM1FvSjBkRlZDY3NJSFZ6WlhKSmJtWnZSVzVrY0c5cGJuUW9hVzVtYnlrcExuUm9aVzRvWm5WdVkzUnBiMjRnS0dsdVptOVViMnRsYmlrZ2UxeHVJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRQUVZWVVNESXVaMlZ1WlhKaGRHVkJjM05sY25ScGIyNWRJRzlpZEdGcGJtVmtJSFZ6WlhJZ2NISnZabWxzWlNBbkxDQnBibVp2Vkc5clpXNHBPMXh1WEc0Z0lDQWdJQ0JzWlhRZ1lYTnpaWEowYVc5dUlEMGdZblJ2WVNoS1UwOU9Mbk4wY21sdVoybG1lU2g3SUhSdmEyVnVTVVE2SUdsdVptOHVZV05qWlhOelgzUnZhMlZ1TENCMGIydGxia2xFU2xOUFRqb2dhVzVtYjFSdmEyVnVMQ0J3ZFdKc2FXTkxaWGs2SUdOdmJuUmxiblJ6SUgwcEtUdGNiaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiVDBGVlZFZ3lMbWRsYm1WeVlYUmxRWE56WlhKMGFXOXVYU0JoZEc5aUlHRnpjMlZ5ZEdsdmJqb25MQ0JoZEc5aUtHRnpjMlZ5ZEdsdmJpa3BPMXh1SUNBZ0lDQWdiR1YwSUdsa2NFSjFibVJzWlNBOUlIc2daRzl0WVdsdU9pQmtiMjFoYVc0c0lIQnliM1J2WTI5c09pQW5UMEZWVkVneUp5QjlPMXh1WEc0Z0lDQWdJQ0F2TDFSUFJFOGdaR1ZzWlhSbElHeGhkR1Z5SUhSb1pTQm1hV1ZzWkNCcGJtWnZWRzlyWlc0c0lHRnVaQ0JrWld4bGRHVWdkR2hsSUc1bFpXUWdhVzRnZEdobElHVjRZVzF3YkdWY2JpQWdJQ0FnSUd4bGRDQnlaWFIxY201V1lXeDFaU0E5SUhzZ1lYTnpaWEowYVc5dU9pQmhjM05sY25ScGIyNHNJR2xrY0RvZ2FXUndRblZ1Wkd4bExDQmxlSEJwY21Wek9pQmxlSEJwY21WekxDQjFjMlZ5VUhKdlptbHNaVG9nYVc1bWIxUnZhMlZ1SUgwN1hHNWNiaThxSUNBZ0lDQWdhV1JsYm5ScGRHbGxjMXR1U1dSbGJuUnBkSGxkSUQwZ2NtVjBkWEp1Vm1Gc2RXVTdYRzRnSUNBZ0lDQXJLMjVKWkdWdWRHbDBlVHRjYmlvdlhHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25XMDlCVlZSSU1pNW5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJsMGdjbVYwZFhKdWFXNW5PaUFuTENCS1UwOU9Mbk4wY21sdVoybG1lU2h5WlhSMWNtNVdZV3gxWlNrcE8xeHVYRzRnSUNBZ0lDQnlaWE52YkhabEtISmxkSFZ5YmxaaGJIVmxLVHRjYmlBZ0lDQjlLVHRjYmlBZ2ZTazdYRzU5S1R0Y2JseHViR1YwSUdkbGJtVnlZWFJsUVhOelpYSjBhVzl1VjJsMGFFTnZaR1ZVYjJ0bGJpQTlJQ2htZFc1amRHbHZiaUFvSUdOdmJuUmxiblJ6TENCbGVIQnBjbVZ6TENCb2FXNTBLU0I3WEc0Z0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ2JHVjBJR052WkdVZ1BTQjFjbXhRWVhKelpYSW9hR2x1ZEN3Z0oyTnZaR1VuS1R0Y2JseHVJQ0FnSUdsbUlDZ2hZMjlrWlNrZ2NtVnFaV04wS0NkYlQwRlZWRWd5TG1kbGJtVnlZWFJsUVhOelpYSjBhVzl1VjJsMGFFTnZaR1ZkSUdOdlpHVWdibTkwSUhKbGRIVnlibVZrSUdKNUlIUm9aU0JoZFhSb1pXNTBhV05oZEdsdmJqb2dKeXdnYUdsdWRDazdYRzVjYmlBZ0lDQWdJSE5sYm1SSVZGUlFVbVZ4ZFdWemRDZ25VRTlUVkNjc0lIUnZhMlZ1Ulc1a2NHOXBiblFvWTI5a1pTa3BMblJvWlc0b1puVnVZM1JwYjI0Z0tHbHVabThwSUh0Y2JseHVJQ0FnSUNBZ0lDQnBaaUFvYVc1bWJ5NW9ZWE5QZDI1UWNtOXdaWEowZVNnbllXTmpaWE56WDNSdmEyVnVKeWtwSUZ4dUlDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb1oyVnVaWEpoZEdWQmMzTmxjblJwYjI1WGFYUm9RV05qWlhOelZHOXJaVzRvSUdOdmJuUmxiblJ6TENCbGVIQnBjbVZ6TENCcGJtWnZLU0FwTzF4dUlDQWdJQ0FnSUNCbGJITmxJSEpsYW1WamRDZ25XMDlCVlZSSU1pNW5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJsZHBkR2hEYjJSbFhTQmhZMk5sYzNNZ2RHOXJaVzRnYm05MElISmxkSFZ5Ym1Wa0lHbHVJSFJvWlNCbGVHTm9ZVzVuWlNCamIyUmxJSEpsYzNWc2REb2dKeXdnYVc1bWJ5azdYRzRnSUNBZ0lDQjlMQ0JtZFc1amRHbHZiaUFvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y205eUtUdGNiaUFnSUNBZ0lIMHBPMXh1WEc0Z0lIMHBPMXh1ZlNrN1hHNWNibXhsZENCblpYUkJZMk5sYzNOVWIydGxibGRwZEdoRGIyUmxWRzlyWlc0Z1BTQW9ablZ1WTNScGIyNGdLSEpsYzI5MWNtTmxjeXdnYkc5bmFXNHBJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlDaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNCc1pYUWdZMjlrWlNBOUlIVnliRkJoY25ObGNpaHNiMmRwYml3Z0oyTnZaR1VuS1R0Y2JseHVJQ0FnSUdsbUlDZ2hZMjlrWlNrZ2NtVnFaV04wS0NkYlQwRlZWRWd5TG1kbGRFRmpZMlZ6YzFSdmEyVnVWMmwwYUVOdlpHVlViMnRsYmwwZ1kyOWtaU0J1YjNRZ2NtVjBkWEp1WldRZ1lua2dkR2hsSUd4dloybHVJSEpsYzNWc2REb2dKeXdnYkc5bmFXNHBPMXh1WEc0Z0lDQWdJQ0J6Wlc1a1NGUlVVRkpsY1hWbGMzUW9KMUJQVTFRbkxDQmhZMk5sYzNOVWIydGxia1Z1WkhCdmFXNTBLR052WkdVcEtTNTBhR1Z1S0daMWJtTjBhVzl1SUNocGJtWnZLU0I3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x1Wm04dWFHRnpUM2R1VUhKdmNHVnlkSGtvSjJGalkyVnpjMTkwYjJ0bGJpY3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR1Y0Y0dseVpYTWdQU0JuWlhSRmVIQnBjbVZ6S0dsdVptOHBPMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVnS0dGalkyVnpjMVJ2YTJWdVVtVnpkV3gwS0hKbGMyOTFjbU5sY3l3Z2FXNW1ieTVoWTJObGMzTmZkRzlyWlc0c0lHVjRjR2x5WlhNc0lHbHVabThwS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUhKbGFtVmpkQ2duVzA5QlZWUklNaTVuWlhSQlkyTmxjM05VYjJ0bGJsZHBkR2hEYjJSbFZHOXJaVzVkSUdGalkyVnpjeUIwYjJ0bGJpQnViM1FnY21WMGRYSnVaV1FnYVc0Z2RHaGxJR1Y0WTJoaGJtZGxJR052WkdVZ2NtVnpkV3gwT2lBbkxDQnBibVp2S1R0Y2JpQWdJQ0FnSUgwc0lHWjFibU4wYVc5dUlDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnliM0lwTzF4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnZlNrN1hHNTlLVHRjYmx4dVpYaHdiM0owSUd4bGRDQm5aWFJGZUhCcGNtVnpJRDBnS0daMWJtTjBhVzl1SUNoMWNtd3BJSHRjYmlBZ2JHVjBJR1Y0Y0dseVpYTWdQU0IxY214UVlYSnpaWElvZFhKc0xDQW5aWGh3YVhKbGMxOXBiaWNwTzF4dVhHNGdJR2xtSUNobGVIQnBjbVZ6S1NCbGVIQnBjbVZ6SUQwZ1pYaHdhWEpsY3lBcklFMWhkR2d1Wm14dmIzSW9SR0YwWlM1dWIzY29LU0F2SURFd01EQXBPMXh1SUNCbGJITmxJR1Y0Y0dseVpYTWdQU0F6TVRVek5qQXdNREF3SUNzZ1RXRjBhQzVtYkc5dmNpaEVZWFJsTG01dmR5Z3BJQzhnTVRBd01DazdYRzVjYmlBZ2NtVjBkWEp1SUdWNGNHbHlaWE03WEc1Y2JuMHBPMXh1WEc1Y2JteGxkQ0JoWTJObGMzTlViMnRsYmxKbGMzVnNkQ0E5SUNobWRXNWpkR2x2YmlBb2NtVnpiM1Z5WTJWekxDQmhZMk5sYzNOVWIydGxiaXdnWlhod2FYSmxjeXdnYVc1d2RYUXNJSEpsWm5KbGMyZ3BJSHRjYmx4dUlDQnNaWFFnY21WemRXeDBJRDBnZXlCa2IyMWhhVzQ2SUdSdmJXRnBiaXdnY21WemIzVnlZMlZ6T2lCeVpYTnZkWEpqWlhNc0lHRmpZMlZ6YzFSdmEyVnVPaUJoWTJObGMzTlViMnRsYml3Z1pYaHdhWEpsY3pvZ1pYaHdhWEpsY3l3Z2FXNXdkWFE2SUdsdWNIVjBJSDA3WEc1Y2JpQWdhV1lnS0hKbFpuSmxjMmdwSUhKbGMzVnNkQzV5WldaeVpYTm9JRDBnY21WbWNtVnphRHRjYmx4dUlDQnlaWFIxY200Z2NtVnpkV3gwTzF4dVhHNTlLVHRjYmx4dUx5b3FYRzRxSUVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5SUZCeWIzaDVYRzRxTDF4dVpYaHdiM0owSUd4bGRDQkpaSEJRY205NGVTQTlJSHRjYmx4dUlDQXZLaXBjYmlBZ0tpQkdkVzVqZEdsdmJpQjBieUIyWVd4cFpHRjBaU0JoYmlCcFpHVnVkR2wwZVNCQmMzTmxjblJwYjI0Z2NtVmpaV2wyWldSY2JpQWdLaUJVVDBSUElHRmtaQ0JrWlhSaGFXeHpJRzltSUhSb1pTQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z1lXNWtJR2x0Y0hKdmRtVWdkR2hsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVYRzRnSUNwY2JpQWdLaUJBY0dGeVlXMGdJSHRwWkhCSmJtWnZmU0FnSUNBZ0lFOWlhbVZqZENCcGJtWnZjbTFoZEdsdmJpQmhZbTkxZENCSlpGQWdaVzVrY0c5cGJuUnpYRzRnSUNvZ1FIQmhjbUZ0SUNCN1lYTnpaWEowYVc5dWZTQWdJQ0JKWkdWdWRHbDBlU0JCYzNObGNuUnBiMjRnZEc4Z1ltVWdkbUZzYVdSaGRHVmtYRzRnSUNvZ1FIQmhjbUZ0SUNCN2IzSnBaMmx1ZlNBZ0lDQWdJQ0JQY21sbmFXNGdjR0Z5WVcxbGRHVnlJSFJvWVhRZ2FXUmxiblJwWm1sbGN5QjBhR1VnYjNKcFoybHVJRzltSUhSb1pTQlNWRU5RWldWeVEyOXVibVZqZEdsdmJseHVJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUNBZ0lDQWdVbVYwZFhKdWN5QmhJSEJ5YjIxcGMyVWdkMmwwYUNCMGFHVWdhV1JsYm5ScGRIa2dZWE56WlhKMGFXOXVJSFpoYkdsa1lYUnBiMjRnY21WemRXeDBYRzRnSUNvdlhHNGdJSFpoYkdsa1lYUmxRWE56WlhKMGFXOXVPaUFvWTI5dVptbG5MQ0JoYzNObGNuUnBiMjRzSUc5eWFXZHBiaWtnUFQ0Z2UxeHVJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25XMDlCVlZSSU1pNTJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJsMGdZWE56WlhKMGFXOXVPaUFuTENCaGRHOWlLR0Z6YzJWeWRHbHZiaWtwTzF4dUlDQWdJSFZ6WlhKSmJtWnZSVzVrY0c5cGJuUWdQU0JqYjI1bWFXY3VkWE5sY2tsdVptOUZibVJ3YjJsdWREdGNiaUFnSUNCa2IyMWhhVzRnUFNCamIyNW1hV2N1Wkc5dFlXbHVPMXh1WEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVJQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmk4dklDQWdJQ0FnYkdWMElHa2dQU0JwWkhCSmJtWnZPMXh1SUNBZ0lDQWdiR1YwSUdSbFkyOWtaV1JEYjI1MFpXNTBJRDBnWVhSdllpaGhjM05sY25ScGIyNHBPMXh1SUNBZ0lDQWdiR1YwSUdOdmJuUmxiblFnUFNCS1UwOU9MbkJoY25ObEtHUmxZMjlrWldSRGIyNTBaVzUwS1R0Y2JpQWdJQ0FnSUhObGJtUklWRlJRVW1WeGRXVnpkQ2duUjBWVUp5d2dZMjl1Wm1sbkxuWmhiR2xrWVhSbFFYTnpaWEowYVc5dVJXNWtjRzlwYm5Rb2UyRmpZMlZ6YzE5MGIydGxiam9nWTI5dWRHVnVkQzUwYjJ0bGJrbEVMQ0JwYm5CMWREb2dZMjl1ZEdWdWRDNTBiMnRsYmtsRVNsTlBUaUI5S1NrdWRHaGxiaWh5WlhOMWJIUWdQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9TbE5QVGk1emRISnBibWRwWm5rb2NtVnpkV3gwS1NBOVBUMGdTbE5QVGk1emRISnBibWRwWm5rb1kyOXVkR1Z1ZEM1MGIydGxia2xFU2xOUFRpa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDNW9ZWE5QZDI1UWNtOXdaWEowZVNnbmJtRnRaU2NwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDdJR2xrWlc1MGFYUjVPaUJqYjI1bWFXY3VZMjl1ZG1WeWRGVnpaWEpRY205bWFXeGxLSEpsYzNWc2RDa3VhV1FzSUdOdmJuUmxiblJ6T2lCamIyNTBaVzUwTG5CMVlteHBZMHRsZVNCOUtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9KMmx1ZG1Gc2FXUW5LVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrdVkyRjBZMmdvWlhKeUlEMCtJSHRjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y2lrN1hHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUtUdGNiaUFnZlN4Y2JpQWdMeXBjYmlBZ0lDQnlaV1p5WlhOb1FYTnpaWEowYVc5dU9pQW9hV1JsYm5ScGRIa3BJRDArSUh0Y2JpQWdJQ0FnSUM4dlkyOXVjMjlzWlM1c2IyY29KMUJTVDFoWk9uSmxabkpsYzJoQmMzTmxjblJwYjI0NmIyeGtTV1JsYm5ScGRIa25MQ0JwWkdWdWRHbDBlU2s3WEc0Z0lDQWdJQ0JzWlhRZ2FTQTlJR2R2YjJkc1pVbHVabTg3WEc0Z0lGeHVJQ0FnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYVdSbGJuUnBkSGt1YVc1bWJ5NXlaV1p5WlhOb1ZHOXJaVzRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmxlR05vWVc1blpWSmxabkpsYzJoVWIydGxiaWhwWkdWdWRHbDBlUzVwYm1adkxuSmxabkpsYzJoVWIydGxiaWt1ZEdobGJpaG1kVzVqZEdsdmJpaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbHVabTlVYjJ0bGJsVlNUQ0E5SUdrdWRYTmxjbWx1Wm04Z0t5QjJZV3gxWlM1aFkyTmxjM05mZEc5clpXNDdYRzRnSUNBZ0lDQWdJQ0FnSUNCelpXNWtTRlJVVUZKbGNYVmxjM1FvSjBkRlZDY3NJR2x1Wm05VWIydGxibFZTVENrdWRHaGxiaWhtZFc1amRHbHZiaWhwYm1adlZHOXJaVzRwSUh0Y2JpQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwWkdWdWRHbDBlVUoxYm1Sc1pTQTlJSHRoWTJObGMzTlViMnRsYmpvZ2RtRnNkV1V1WVdOalpYTnpYM1J2YTJWdUxDQnBaRlJ2YTJWdU9pQjJZV3gxWlM1cFpGOTBiMnRsYml3Z2NtVm1jbVZ6YUZSdmEyVnVPaUJwWkdWdWRHbDBlUzVwYm1adkxuSmxabkpsYzJoVWIydGxiaXdnZEc5clpXNVVlWEJsT2lCcFpHVnVkR2wwZVM1cGJtWnZMblJ2YTJWdVZIbHdaU3dnYVc1bWIxUnZhMlZ1T2lCcGJtWnZWRzlyWlc1OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JVYjJ0bGJsVlNUQ0E5SUdrdWRHOXJaVzVKYm1adklDc2dkbUZzZFdVdWFXUmZkRzlyWlc0N1hHNGdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMjlpZEdGcGJpQnBibVp2Y20xaGRHbHZiaUJoWW05MWRDQjBhR1VnZFhObGNpQnBaRlJ2YTJWdVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGJtUklWRlJRVW1WeGRXVnpkQ2duUjBWVUp5d2dhV1JVYjJ0bGJsVlNUQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaHBaRlJ2YTJWdUtTQjdYRzRnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsa1pXNTBhWFI1UW5WdVpHeGxMblJ2YTJWdVNVUktVMDlPSUQwZ2FXUlViMnRsYmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpHVnVkR2wwZVVKMWJtUnNaUzVsZUhCcGNtVnpJRDBnYVdSVWIydGxiaTVsZUhBN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUmxiblJwZEhsQ2RXNWtiR1V1WlcxaGFXd2dQU0JwWkZSdmEyVnVMbVZ0WVdsc08xeHVJQ0JjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2IyeGtTVVJVYjJ0bGJpQTlJRXBUVDA0dWNHRnljMlVvWVhSdllpaHBaR1Z1ZEdsMGVTNWhjM05sY25ScGIyNHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2IyeGtTV1JVYjJ0bGJsTndiR2wwWldRZ1BTQnZiR1JKUkZSdmEyVnVMblJ2YTJWdVNVUXVjM0JzYVhRb0p5NG5LVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2IyeGtSR1ZqYjJSbFpFbEVWRzlyWlc0Z1BTQktVMDlPTG5CaGNuTmxLR0YwYjJJb2IyeGtTV1JVYjJ0bGJsTndiR2wwWldSYk1WMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FXUk9iMjVqWlNBOUlHOXNaRVJsWTI5a1pXUkpSRlJ2YTJWdUxtNXZibU5sTzF4dUlDQmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY21WalpXbDJaV1JKUkZSdmEyVnVJRDBnZG1Gc2RXVXVhV1JmZEc5clpXNDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsa1ZHOXJaVzVUY0d4cGRHVmtJRDBnY21WalpXbDJaV1JKUkZSdmEyVnVMbk53YkdsMEtDY3VKeWs3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHUmxZMjlrWldSSlJGUnZhMlZ1SUQwZ1NsTlBUaTV3WVhKelpTaGhkRzlpS0dsa1ZHOXJaVzVUY0d4cGRHVmtXekZkS1NrN1hHNGdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWTI5a1pXUkpSRlJ2YTJWdUxtNXZibU5sSUQwZ2FXUk9iMjVqWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhVzV6WlhKMFpXUk9iMjVqWlNBOUlHSjBiMkVvU2xOUFRpNXpkSEpwYm1kcFpua29aR1ZqYjJSbFpFbEVWRzlyWlc0cEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYm1WM1NVUlViMnRsYmlBOUlHbGtWRzlyWlc1VGNHeHBkR1ZrV3pCZElDc2dKeTRuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXpaWEowWldST2IyNWpaU0FySUNjdUp5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xrVkc5clpXNVRjR3hwZEdWa1d6SmRPMXh1SUNCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZWE56WlhKMGFXOXVJRDBnWW5SdllTaEtVMDlPTG5OMGNtbHVaMmxtZVNoN2RHOXJaVzVKUkRvZ2JtVjNTVVJVYjJ0bGJpd2dkRzlyWlc1SlJFcFRUMDQ2SUdsa1ZHOXJaVzU5S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2xrY0VKMWJtUnNaU0E5SUh0a2IyMWhhVzQ2SUNkbmIyOW5iR1V1WTI5dEp5d2djSEp2ZEc5amIydzZJQ2RQU1VSREozMDdYRzRnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dlZFOUVUeUJrWld4bGRHVWdiR0YwWlhJZ2RHaGxJR1pwWld4a0lHbHVabTlVYjJ0bGJpd2dZVzVrSUdSbGJHVjBaU0IwYUdVZ2JtVmxaQ0JwYmlCMGFHVWdaWGhoYlhCc1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5WlhSMWNtNVdZV3gxWlNBOUlIdGhjM05sY25ScGIyNDZJR0Z6YzJWeWRHbHZiaXdnYVdSd09pQnBaSEJDZFc1a2JHVXNJR2x1Wm04NklHbGtaVzUwYVhSNVFuVnVaR3hsTENCcGJtWnZWRzlyWlc0NklHbHVabTlVYjJ0bGJuMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblVGSlBXRms2Y21WbWNtVnphRUZ6YzJWeWRHbHZianB1WlhkSlpHVnVkR2wwZVNjc0lISmxkSFZ5YmxaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsZEhWeWJsWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlN3cUwxeHVYRzRnSUM4cUtseHVJQ0FxSUVaMWJtTjBhVzl1SUhSdklHZGxibVZ5WVhSbElHRnVJR2xrWlc1MGFYUjVJRUZ6YzJWeWRHbHZibHh1SUNBcVhHNGdJQ29nUUhCaGNtRnRJQ0I3YVdSd1NXNW1iMzBnSUNBZ0lDQlBZbXBsWTNRZ2FXNW1iM0p0WVhScGIyNGdZV0p2ZFhRZ1NXUlFJR1Z1WkhCdmFXNTBjMXh1SUNBcUlFQndZWEpoYlNBZ2UyTnZiblJsYm5SemZTQlVhR1VnWTI5dWRHVnVkSE1nYVc1amJIVmtaWE1nYVc1bWIzSnRZWFJwYjI0Z1lXSnZkWFFnZEdobElHbGtaVzUwYVhSNUlISmxZMlZwZG1Wa1hHNGdJQ29nUUhCaGNtRnRJQ0I3YjNKcFoybHVmU0JQY21sbmFXNGdjR0Z5WVcxbGRHVnlJSFJvWVhRZ2FXUmxiblJwWm1sbGN5QjBhR1VnYjNKcFoybHVJRzltSUhSb1pTQlNWRU5RWldWeVEyOXVibVZqZEdsdmJseHVJQ0FxSUVCd1lYSmhiU0FnZTNWelpYSnVZVzFsU0dsdWRIMGdiM0IwYVc5dVlXd2dkWE5sY201aGJXVklhVzUwSUhCaGNtRnRaWFJsY2x4dUlDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJSEpsZEhWeWJuTWdZU0J3Y205dGFYTmxJSGRwZEdnZ1lXNGdhV1JsYm5ScGRIa2dZWE56WlhKMGFXOXVYRzRnSUNvdlhHNGdJR2RsYm1WeVlYUmxRWE56WlhKMGFXOXVPaUFvWTI5dVptbG5MQ0JqYjI1MFpXNTBjeXdnYjNKcFoybHVMQ0JvYVc1MEtTQTlQaUI3WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0UFFWVlVTREl1WjJWdVpYSmhkR1ZCYzNObGNuUnBiMjQ2WTI5dVptbG5YU2NzSUdOdmJtWnBaeWs3WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0UFFWVlVTREl1WjJWdVpYSmhkR1ZCYzNObGNuUnBiMjQ2WTI5dWRHVnVkSE5kSnl3Z1kyOXVkR1Z1ZEhNcE8xeHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJUMEZWVkVneUxtZGxibVZ5WVhSbFFYTnpaWEowYVc5dU9tOXlhV2RwYmwwbkxDQnZjbWxuYVc0cE8xeHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJUMEZWVkVneUxtZGxibVZ5WVhSbFFYTnpaWEowYVc5dU9taHBiblJkSnl3Z2FHbHVkQ2s3WEc0dkx5QWdJQ0JzWlhRZ2FTQTlJR2xrY0VsdVptODdYRzRnSUNBZ2RYTmxja2x1Wm05RmJtUndiMmx1ZENBOUlHTnZibVpwWnk1MWMyVnlTVzVtYjBWdVpIQnZhVzUwTzF4dUlDQWdJSFJ2YTJWdVJXNWtjRzlwYm5RZ1BTQmpiMjVtYVdjdWRHOXJaVzVGYm1Sd2IybHVkRHRjYmlBZ0lDQmhkWFJvYjNKcGMyRjBhVzl1Ulc1a2NHOXBiblFnUFNCamIyNW1hV2N1WVhWMGFHOXlhWE5oZEdsdmJrVnVaSEJ2YVc1ME8xeHVJQ0FnSUdSdmJXRnBiaUE5SUdOdmJtWnBaeTVrYjIxaGFXNDdYRzVjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUM4dmMzUmhjblFnZEdobElHeHZaMmx1SUhCb1lYTmxYRzRnSUNBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUlDaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNiaUFnSUNBZ0lHbG1JQ2doYUdsdWRDa2dlMXh1WEc0dkx5QWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRQUVZWVVNESXVaMlZ1WlhKaGRHVkJjM05sY25ScGIyNWRJRTVQWDBoSlRsUTZJSEpsYW1WamRHbHVaeUIzYVhSb0lISmxjWFZsYzNSVmNtd2dKeXdnY21WeGRXVnpkRlZ5YkNrN1hHNWNiaUFnSUNBZ0lDQWdjbVZxWldOMEtIc2dibUZ0WlRvZ0owbGtVRXh2WjJsdVJYSnliM0luTENCc2IyZHBibFZ5YkRvZ1lYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBLR052Ym5SbGJuUnpLU0I5S1R0Y2JseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdkR2hsSUhKbGNYVmxjM1FnYUdGMlpTQmhiSEpsWVdSNUlHSmxaVzRnYldGa1pTd2djMjhnYVdSd1VGSnZlSGtnZDJsc2JDQjBjbmtnZEc4Z1lXTmpaWE56SUhSb1pTQjFjMlZ5SUdsdVptOXliV0YwYVc5dVhHNGdJQ0FnSUNBZ0lHeGxkQ0JsZUhCcGNtVnpJRDBnZFhKc1VHRnljMlZ5S0docGJuUXNJQ2RsZUhCcGNtVnpYMmx1SnlrN1hHNWNiaUFnSUNBZ0lDQWdhV1lnS0dWNGNHbHlaWE1wSUdWNGNHbHlaWE1nUFNCbGVIQnBjbVZ6SUNzZ1RXRjBhQzVtYkc5dmNpaEVZWFJsTG01dmR5Z3BJQzhnTVRBd01DazdYRzRnSUNBZ0lDQWdJR1ZzYzJVZ1pYaHdhWEpsY3lBOUlETXhOVE0yTURBd01EQWdLeUJOWVhSb0xtWnNiMjl5S0VSaGRHVXVibTkzS0NrZ0x5QXhNREF3S1R0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnWVdOalpYTnpWRzlyWlc0Z1BTQjFjbXhRWVhKelpYSW9hR2x1ZEN3Z0oyRmpZMlZ6YzE5MGIydGxiaWNwTzF4dVhHNGdJQ0FnSUNBZ0lHbG1JQ2hoWTJObGMzTlViMnRsYmlrZ2NtVnpiMngyWlNnZ1oyVnVaWEpoZEdWQmMzTmxjblJwYjI1WGFYUm9RV05qWlhOelZHOXJaVzRvWTI5dWRHVnVkSE1zSUdWNGNHbHlaWE1zZTJGalkyVnpjMTkwYjJ0bGJqb2dZV05qWlhOelZHOXJaVzU5SUNrZ0tUdGNiaUFnSUNBZ0lDQWdaV3h6WlNCeVpYTnZiSFpsS0NCblpXNWxjbUYwWlVGemMyVnlkR2x2YmxkcGRHaERiMlJsVkc5clpXNG9ZMjl1ZEdWdWRITXNJR1Y0Y0dseVpYTXNJR2hwYm5RcElDazdYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNGdLR1VwSUh0Y2JseHVJQ0FnSUNBZ2NtVnFaV04wS0dVcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5TEZ4dVhHNGdJQzhxS2x4dUlDQXFJRVoxYm1OMGFXOXVJSFJ2SUdkbGRDQmhiaUJCWTJObGMzTWdWRzlyWlc1Y2JpQWdLbHh1SUNBcUlFQndZWEpoYlNBZ2UyTnZibVpwWjMwZ0lDQWdJQ0JQWW1wbFkzUWdhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdTV1JRSUdWdVpIQnZhVzUwYzF4dUlDQXFJRUJ3WVhKaGJTQWdlM0psYzI5MWNtTmxjMzBnVDJKcVpXTjBJR052Ym5SbGJuUnpJR2x1WTJ4MVpHVnpJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJSFJvWlNCcFpHVnVkR2wwZVNCeVpXTmxhWFpsWkZ4dUlDQXFJRUJ5WlhSMWNtNGdlMUJ5YjIxcGMyVjlJSEpsZEhWeWJuTWdZU0J3Y205dGFYTmxJSGRwZEdnZ1lXNGdhV1JsYm5ScGRIa2dZWE56WlhKMGFXOXVYRzRnSUNvdlhHNWNiaUFnWjJWMFFXTmpaWE56Vkc5clpXNUJkWFJvYjNKcGMyRjBhVzl1Ulc1a2NHOXBiblE2SUNoamIyNW1hV2NzSUhKbGMyOTFjbU5sY3lrZ1BUNGdlMXh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiVDBGVlZFZ3lMbWRsZEVGalkyVnpjMVJ2YTJWdVFYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBPbU52Ym1acFoxMG5MQ0JqYjI1bWFXY3BPMXh1THk4Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0UFFWVlVTREl1WjJWdVpYSmhkR1ZCYzNObGNuUnBiMjQ2WTI5dWRHVnVkSE5kSnl3Z1kyOXVkR1Z1ZEhNcE8xeHVMeThnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRQUVZWVVNESXVaMlZ1WlhKaGRHVkJjM05sY25ScGIyNDZiM0pwWjJsdVhTY3NJRzl5YVdkcGJpazdYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRQUVZWVVNESXVaMlYwUVdOalpYTnpWRzlyWlc1QmRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUTZjbVZ6YjNWeVkyVnpYU2NzSUhKbGMyOTFjbU5sY3lrN1hHNHZMeUFnSUNCc1pYUWdhU0E5SUdsa2NFbHVabTg3WEc0Z0lDQWdZV05qWlhOelZHOXJaVzVCZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5RZ1BTQmpiMjVtYVdjdVlXTmpaWE56Vkc5clpXNUJkWFJvYjNKcGMyRjBhVzl1Ulc1a2NHOXBiblE3WEc1Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lDOHZjM1JoY25RZ2RHaGxJR3h2WjJsdUlIQm9ZWE5sWEc0Z0lDQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVJQ2h5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmx4dUlDQWdJQ0FnSUNCeVpYTnZiSFpsS0NCaFkyTmxjM05VYjJ0bGJrRjFkR2h2Y21sellYUnBiMjVGYm1Sd2IybHVkQ2h5WlhOdmRYSmpaWE1wS1R0Y2JseHVJQ0FnSUgwc0lHWjFibU4wYVc5dUlDaGxLU0I3WEc1Y2JpQWdJQ0FnSUhKbGFtVmpkQ2hsS1R0Y2JpQWdJQ0I5S1R0Y2JpQWdmU3hjYmlBZ1hHNGdJQzhxS2x4dUlDQXFJRVoxYm1OMGFXOXVJSFJ2SUdkbGRDQmhiaUJCWTJObGMzTWdWRzlyWlc1Y2JpQWdLbHh1SUNBcUlFQndZWEpoYlNBZ2UybGtjRWx1Wm05OUlDQWdJQ0FnVDJKcVpXTjBJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJRWxrVUNCbGJtUndiMmx1ZEhOY2JpQWdLaUJBY0dGeVlXMGdJSHRqYjI1MFpXNTBjMzBnVkdobElHTnZiblJsYm5SeklHbHVZMngxWkdWeklHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElIUm9aU0JwWkdWdWRHbDBlU0J5WldObGFYWmxaRnh1SUNBcUlFQndZWEpoYlNBZ2UyOXlhV2RwYm4wZ1QzSnBaMmx1SUhCaGNtRnRaWFJsY2lCMGFHRjBJR2xrWlc1MGFXWnBaWE1nZEdobElHOXlhV2RwYmlCdlppQjBhR1VnVWxSRFVHVmxja052Ym01bFkzUnBiMjVjYmlBZ0tpQkFjR0Z5WVcwZ0lIdHNiMmRwYm4wZ2IzQjBhVzl1WVd3Z2JHOW5hVzRnY21WemRXeDBYRzRnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ2NtVjBkWEp1Y3lCaElIQnliMjFwYzJVZ2QybDBhQ0JoYmlCcFpHVnVkR2wwZVNCaGMzTmxjblJwYjI1Y2JpQWdLaTljYmx4dUlDQm5aWFJCWTJObGMzTlViMnRsYmpvZ0tHTnZibVpwWnl3Z2NtVnpiM1Z5WTJWekxDQnNiMmRwYmlrZ1BUNGdlMXh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiVDBGVlZFZ3lMbWRsZEVGalkyVnpjMVJ2YTJWdU9tTnZibVpwWjEwbkxDQmpiMjVtYVdjcE8xeHVMeThnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRQUVZWVVNESXVaMlZ1WlhKaGRHVkJjM05sY25ScGIyNDZZMjl1ZEdWdWRITmRKeXdnWTI5dWRHVnVkSE1wTzF4dUx5OGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdFBRVlZVU0RJdVoyVnVaWEpoZEdWQmMzTmxjblJwYjI0NmIzSnBaMmx1WFNjc0lHOXlhV2RwYmlrN1hHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdFBRVlZVU0RJdVoyVjBRV05qWlhOelZHOXJaVzQ2Ykc5bmFXNWRKeXdnYkc5bmFXNHBPMXh1THk4Z0lDQWdiR1YwSUdrZ1BTQnBaSEJKYm1adk8xeHVJQ0FnSUdGalkyVnpjMVJ2YTJWdVJXNWtjRzlwYm5RZ1BTQmpiMjVtYVdjdVlXTmpaWE56Vkc5clpXNUZibVJ3YjJsdWREdGNiaUFnSUNCa2IyMWhhVzRnUFNCamIyNW1hV2N1Wkc5dFlXbHVPMXh1WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNBdkwzTjBZWEowSUhSb1pTQnNiMmRwYmlCd2FHRnpaVnh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYRzRnSUNBZ0lDQWdJQzh2SUhSb1pTQjFjMlZ5SUdseklHeHZaMmRsWkdsdUxDQjBjbmtnZEc4Z1pYaDBjbUZqZENCMGFHVWdRV05qWlhOeklGUnZhMlZ1SUdGdVpDQnBkSE1nWlhod2FYSmxjMXh1SUNBZ0lDQWdJQ0JzWlhRZ1pYaHdhWEpsY3lBOUlHZGxkRVY0Y0dseVpYTW9iRzluYVc0cE8xeHVYRzRnSUNBZ0lDQWdJR3hsZENCaFkyTmxjM05VYjJ0bGJpQTlJSFZ5YkZCaGNuTmxjaWhzYjJkcGJpd2dKMkZqWTJWemMxOTBiMnRsYmljcE8xeHVYRzRnSUNBZ0lDQWdJR2xtSUNoaFkyTmxjM05VYjJ0bGJpa2djbVZ6YjJ4MlpTZ2dZV05qWlhOelZHOXJaVzVTWlhOMWJIUW9jbVZ6YjNWeVkyVnpMQ0JoWTJObGMzTlViMnRsYml3Z1pYaHdhWEpsY3l3Z2JHOW5hVzRwSUNrN1hHNGdJQ0FnSUNBZ0lHVnNjMlVnY21WemIyeDJaU2dnWjJWMFFXTmpaWE56Vkc5clpXNVhhWFJvUTI5a1pWUnZhMlZ1S0hKbGMyOTFjbU5sY3l3Z2JHOW5hVzRwSUNrN1hHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0Z0tHVXBJSHRjYmx4dUlDQWdJQ0FnY21WcVpXTjBLR1VwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzVjYmx4dVhHNTlPMXh1WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTR2WkdWMkxYQnliM1J2YzNSMVluTXZjM0pqTDJsa2NIQnliM2g1TDA5QlZWUklMbXB6SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzFcbiIpOwoKLyoqKi8gfSksCi8qIDIgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwpldmFsKCJcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIElkcFByb3h5ID0gdm9pZCAwO1xudmFyIGlkcEluZm8gPSB2b2lkIDA7XG52YXIgY29udmVydFVzZXJQcm9maWxlID0gdm9pZCAwO1xudmFyIHVzZXJJbmZvRW5kcG9pbnQgPSB2b2lkIDA7XG52YXIgYWNjZXNzVG9rZW5JbnB1dCA9IHZvaWQgMDtcblxuLyoqXG4qIEFic3RyYWN0IElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWIgdG8gYmUgZXh0ZW5kZWQgYnkgcmVhbCBJZHAgUHJveGllc1xuKi9cblxudmFyIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gIGZ1bmN0aW9uIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yik7XG5cbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7XG4gICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIElkcFByb3h5ID0gY29uZmlnLmlkcFByb3h5O1xuICAgIGNvbnZlcnRVc2VyUHJvZmlsZSA9IGNvbmZpZy5jb252ZXJ0VXNlclByb2ZpbGU7XG4gICAgYWNjZXNzVG9rZW5JbnB1dCA9IGNvbmZpZy5hY2Nlc3NUb2tlbklucHV0O1xuXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5XSBjb25zdHJ1Y3RvcicpO1xuXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChtc2cudG8gPT09IGNvbmZpZy5pZHBVcmwpIHtcblxuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuICAqXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xuICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIsIFt7XG4gICAga2V5OiAncmVxdWVzdFRvSWRwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWVzdFRvSWRwKG1zZykge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgIHZhciBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7XG4gICAgICAvL2NvbnNvbGUuaW5mbygncmVxdWVzdFRvSWRwOicsIG1zZy5ib2R5Lm1ldGhvZCk7XG4gICAgICBjb25zb2xlLmluZm8oJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViXSByZWNlaXZpbmcgcmVxdWVzdDogJywgbXNnKTtcblxuICAgICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOlxuICAgICAgICAgIElkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uKF90aGlzLmNvbmZpZywgcGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuXG4gICAgICAgICAgICB2YWx1ZS51c2VyUHJvZmlsZSA9IGNvbnZlcnRVc2VyUHJvZmlsZSh2YWx1ZS51c2VyUHJvZmlsZSk7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgICAvLyAgICAgICBjb25zb2xlLmluZm8oJ3ZhbGlkYXRlQXNzZXJ0aW9uJyk7XG4gICAgICAgICAgSWRwUHJveHkudmFsaWRhdGVBc3NlcnRpb24oX3RoaXMuY29uZmlnLCBwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZWZyZXNoQXNzZXJ0aW9uJzpcbiAgICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdyZWZyZXNoQXNzZXJ0aW9uJyk7XG4gICAgICAgICAgSWRwUHJveHkucmVmcmVzaEFzc2VydGlvbihwYXJhbXMuaWRlbnRpdHkpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2dldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50JzpcbiAgICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICAgIElkcFByb3h5LmdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50KF90aGlzLmNvbmZpZywgcGFyYW1zLnJlc291cmNlcykudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZ2V0QWNjZXNzVG9rZW4nOlxuICAgICAgICAgIC8vICAgICBjb25zb2xlLmluZm8oJ2dldEFjY2Vzc1Rva2VuJyk7XG4gICAgICAgICAgSWRwUHJveHkuZ2V0QWNjZXNzVG9rZW4oX3RoaXMuY29uZmlnLCBwYXJhbXMucmVzb3VyY2VzLCBwYXJhbXMubG9naW4pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ09JREMuZ2V0QWNjZXNzVG9rZW4gcmVzdWx0OiAnLCB2YWx1ZSk7XG4gICAgICAgICAgICB2YWx1ZS5pbnB1dCA9IGFjY2Vzc1Rva2VuSW5wdXQodmFsdWUuaW5wdXQpO1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZWZyZXNoQWNjZXNzVG9rZW4nOlxuICAgICAgICAgIC8vICAgICBjb25zb2xlLmluZm8oJ2dldEFjY2Vzc1Rva2VuJyk7XG4gICAgICAgICAgSWRwUHJveHkucmVmcmVzaEFjY2Vzc1Rva2VuKF90aGlzLmNvbmZpZywgcGFyYW1zLnRva2VuKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdPSURDLnJlZnJlc2hBY2Nlc3NUb2tlbiByZXN1bHQ6ICcsIHZhbHVlKTtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgdmFsdWUuaW5wdXQgPSBhY2Nlc3NUb2tlbklucHV0KHZhbHVlLmlucHV0KTtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKlxuICAgICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXBseU1lc3NhZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHZhbHVlIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yi5yZXBseU1lc3NhZ2VdICcsIG1lc3NhZ2UpO1xuXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zZW5kU3RhdHVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcblxuICAgICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICAgIHZhciBtc2cgPSB7XG4gICAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgICB0bzogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJyxcbiAgICAgICAgYm9keToge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAocmVhc29uKSB7XG4gICAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yjtcbn0oKTtcblxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG5cbi8qKlxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxuICovXG5cblxuZXhwb3J0cy5kZWZhdWx0ID0gQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YjsvLyMgc291cmNlVVJMPVttb2R1bGVdXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk0dlpHVjJMWEJ5YjNSdmMzUjFZbk12YzNKakwybGtjSEJ5YjNoNUwwRmljM1J5WVdOMFNXUndVSEp2ZUhsVGRIVmlMbXB6UHpJM01qUWlYU3dpYm1GdFpYTWlPbHNpU1dSd1VISnZlSGtpTENKcFpIQkpibVp2SWl3aVkyOXVkbVZ5ZEZWelpYSlFjbTltYVd4bElpd2lkWE5sY2tsdVptOUZibVJ3YjJsdWRDSXNJbUZqWTJWemMxUnZhMlZ1U1c1d2RYUWlMQ0pCWW5OMGNtRmpkRWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlJaXdpY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENJc0ltSjFjeUlzSW1OdmJtWnBaeUlzSWw5MGFHbHpJaXdpYldWemMyRm5aVUoxY3lJc0ltbGtjRkJ5YjNoNUlpd2lZMjl1YzI5c1pTSXNJbXh2WnlJc0ltRmtaRXhwYzNSbGJtVnlJaXdpYlhObklpd2lkRzhpTENKcFpIQlZjbXdpTENKeVpYRjFaWE4wVkc5SlpIQWlMQ0pmYzJWdVpGTjBZWFIxY3lJc0luQmhjbUZ0Y3lJc0ltSnZaSGtpTENKcGJtWnZJaXdpYldWMGFHOWtJaXdpWjJWdVpYSmhkR1ZCYzNObGNuUnBiMjRpTENKamIyNTBaVzUwY3lJc0ltOXlhV2RwYmlJc0luVnpaWEp1WVcxbFNHbHVkQ0lzSW5Sb1pXNGlMQ0oyWVd4MVpTSXNJblZ6WlhKUWNtOW1hV3hsSWl3aWNtVndiSGxOWlhOellXZGxJaXdpWlhKeWIzSWlMQ0oyWVd4cFpHRjBaVUZ6YzJWeWRHbHZiaUlzSW1GemMyVnlkR2x2YmlJc0luSmxabkpsYzJoQmMzTmxjblJwYjI0aUxDSnBaR1Z1ZEdsMGVTSXNJbWRsZEVGalkyVnpjMVJ2YTJWdVFYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBJaXdpY21WemIzVnlZMlZ6SWl3aVoyVjBRV05qWlhOelZHOXJaVzRpTENKc2IyZHBiaUlzSW1sdWNIVjBJaXdpY21WbWNtVnphRUZqWTJWemMxUnZhMlZ1SWl3aWRHOXJaVzRpTENKdFpYTnpZV2RsSWl3aWFXUWlMQ0owZVhCbElpd2labkp2YlNJc0ltTnZaR1VpTENKd2IzTjBUV1Z6YzJGblpTSXNJbkpsWVhOdmJpSXNJbDl6ZEdGMFpTSXNJbVJsYzJNaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3UVVGQlFTeEpRVUZKUVN4cFFrRkJTanRCUVVOQkxFbEJRVWxETEdkQ1FVRktPMEZCUTBFc1NVRkJTVU1zTWtKQlFVbzdRVUZEUVN4SlFVRkpReXg1UWtGQlNqdEJRVU5CTEVsQlFVbERMSGxDUVVGS096dEJRVVZCT3pzN08wbEJSMDFETEhsQ096dEJRVVZLT3pzN096czdPenRCUVZGQkxIRkRRVUZaUXl4dFFrRkJXaXhGUVVGcFEwTXNSMEZCYWtNc1JVRkJjME5ETEUxQlFYUkRMRVZCUVRoRE8wRkJRVUU3TzBGQlF6VkRMRkZCUVVsRExGRkJRVkVzU1VGQldqdEJRVU5CUVN4VlFVRk5TQ3h0UWtGQlRpeEhRVUUwUWtFc2JVSkJRVFZDTzBGQlEwRkhMRlZCUVUxRExGVkJRVTRzUjBGQmJVSklMRWRCUVc1Q08wRkJRMEZGTEZWQlFVMUVMRTFCUVU0c1IwRkJaVUVzVFVGQlpqdEJRVU5CVWl4bFFVRlhVU3hQUVVGUFJ5eFJRVUZzUWp0QlFVTkJWQ3g1UWtGQmNVSk5MRTlCUVU5T0xHdENRVUUxUWp0QlFVTkJSU3gxUWtGQmJVSkpMRTlCUVU5S0xHZENRVUV4UWpzN1FVRkhRVkVzV1VGQlVVTXNSMEZCVWl4RFFVRlpMR2REUVVGYU96dEJRVVZCU2l4VlFVRk5ReXhWUVVGT0xFTkJRV2xDU1N4WFFVRnFRaXhEUVVFMlFpeEhRVUUzUWl4RlFVRnJReXhWUVVGVlF5eEhRVUZXTEVWQlFXVTdRVUZETDBNc1ZVRkJTVUVzU1VGQlNVTXNSVUZCU2l4TFFVRlhVaXhQUVVGUFV5eE5RVUYwUWl4RlFVRTRRanM3UVVGRk5VSlNMR05CUVUxVExGbEJRVTRzUTBGQmJVSklMRWRCUVc1Q08wRkJRMFE3UVVGRFJpeExRVXhFTzBGQlRVRk9MRlZCUVUxVkxGZEJRVTRzUTBGQmEwSXNVMEZCYkVJN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN08ybERRVXRoU2l4SExFVkJRVXM3UVVGRGFFSXNWVUZCU1U0c1VVRkJVU3hKUVVGYU8wRkJRMEVzVlVGQlNWY3NVMEZCVTB3c1NVRkJTVTBzU1VGQlNpeERRVUZUUkN4TlFVRjBRanRCUVVOQk8wRkJRMEZTTEdOQlFWRlZMRWxCUVZJc1EwRkJZU3hwUkVGQllpeEZRVUZuUlZBc1IwRkJhRVU3TzBGQlJVRXNZMEZCVVVFc1NVRkJTVTBzU1VGQlNpeERRVUZUUlN4TlFVRnFRanRCUVVORkxHRkJRVXNzYlVKQlFVdzdRVUZEUlhaQ0xHMUNRVUZUZDBJc2FVSkJRVlFzUTBGQk1rSm1MRTFCUVUxRUxFMUJRV3BETEVWQlFYbERXU3hQUVVGUFN5eFJRVUZvUkN4RlFVRXdSRXdzVDBGQlQwMHNUVUZCYWtVc1JVRkJlVVZPTEU5QlFVOVBMRmxCUVdoR0xFVkJRVGhHUXl4SlFVRTVSaXhEUVVORkxGVkJRVlZETEV0QlFWWXNSVUZCYVVJN08wRkJSV1pCTEd0Q1FVRk5ReXhYUVVGT0xFZEJRVzlDTlVJc2JVSkJRVzFDTWtJc1RVRkJUVU1zVjBGQmVrSXNRMEZCY0VJN1FVRkRRWEpDTEd0Q1FVRk5jMElzV1VGQlRpeERRVUZ0UW1oQ0xFZEJRVzVDTEVWQlFYZENZeXhMUVVGNFFqdEJRVU5FTEZkQlRFZ3NSVUZQUlN4VlFVRlZSeXhMUVVGV0xFVkJRV2xDTzBGQlFVVjJRaXhyUWtGQlRYTkNMRmxCUVU0c1EwRkJiVUpvUWl4SFFVRnVRaXhGUVVGM1FtbENMRXRCUVhoQ08wRkJRV2xETEZkQlVIUkVPMEZCVTBFN1FVRkRSaXhoUVVGTExHMUNRVUZNTzBGQlEwVTdRVUZEUVdoRExHMUNRVUZUYVVNc2FVSkJRVlFzUTBGQk1rSjRRaXhOUVVGTlJDeE5RVUZxUXl4RlFVRjVRMWtzVDBGQlQyTXNVMEZCYUVRc1JVRkJNa1JrTEU5QlFVOU5MRTFCUVd4RkxFVkJRVEJGUlN4SlFVRXhSU3hEUVVORkxGVkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkJSWEJDTEd0Q1FVRk5jMElzV1VGQlRpeERRVUZ0UW1oQ0xFZEJRVzVDTEVWQlFYZENZeXhMUVVGNFFqdEJRVUZwUXl4WFFVUjBSQ3hGUVVkRkxGVkJRVlZITEV0QlFWWXNSVUZCYVVJN1FVRkJSWFpDTEd0Q1FVRk5jMElzV1VGQlRpeERRVUZ0UW1oQ0xFZEJRVzVDTEVWQlFYZENhVUlzUzBGQmVFSTdRVUZCYVVNc1YwRklkRVE3UVVGTFFUdEJRVU5HTEdGQlFVc3NhMEpCUVV3N1FVRkRSVHRCUVVOQmFFTXNiVUpCUVZOdFF5eG5Ra0ZCVkN4RFFVRXdRbVlzVDBGQlQyZENMRkZCUVdwRExFVkJRVEpEVWl4SlFVRXpReXhEUVVORkxGVkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkJSWEJDTEd0Q1FVRk5jMElzV1VGQlRpeERRVUZ0UW1oQ0xFZEJRVzVDTEVWQlFYZENZeXhMUVVGNFFqdEJRVUZwUXl4WFFVUjBSQ3hGUVVkRkxGVkJRVlZITEV0QlFWWXNSVUZCYVVJN1FVRkJSWFpDTEd0Q1FVRk5jMElzV1VGQlRpeERRVUZ0UW1oQ0xFZEJRVzVDTEVWQlFYZENhVUlzUzBGQmVFSTdRVUZCYVVNc1YwRklkRVE3UVVGTFFUdEJRVU5HTEdGQlFVc3NjVU5CUVV3N1FVRkRSVHRCUVVOQmFFTXNiVUpCUVZOeFF5eHRRMEZCVkN4RFFVRTJRelZDTEUxQlFVMUVMRTFCUVc1RUxFVkJRVEpFV1N4UFFVRlBhMElzVTBGQmJFVXNSVUZCTmtWV0xFbEJRVGRGTEVOQlEwVXNWVUZCVlVNc1MwRkJWaXhGUVVGcFFqdEJRVU5tY0VJc2EwSkJRVTF6UWl4WlFVRk9MRU5CUVcxQ2FFSXNSMEZCYmtJc1JVRkJkMEpqTEV0QlFYaENPMEZCUTBRc1YwRklTQ3hGUVV0RkxGVkJRVlZITEV0QlFWWXNSVUZCYVVJN1FVRkJSWFpDTEd0Q1FVRk5jMElzV1VGQlRpeERRVUZ0UW1oQ0xFZEJRVzVDTEVWQlFYZENhVUlzUzBGQmVFSTdRVUZCYVVNc1YwRk1kRVE3UVVGUFFUdEJRVU5HTEdGQlFVc3NaMEpCUVV3N1FVRkRSVHRCUVVOQmFFTXNiVUpCUVZOMVF5eGpRVUZVTEVOQlFYZENPVUlzVFVGQlRVUXNUVUZCT1VJc1JVRkJjME5aTEU5QlFVOXJRaXhUUVVFM1F5eEZRVUYzUkd4Q0xFOUJRVTl2UWl4TFFVRXZSQ3hGUVVGelJWb3NTVUZCZEVVc1EwRkRSU3hWUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJacVFpeHZRa0ZCVVZVc1NVRkJVaXhEUVVGaExEaENRVUZpTEVWQlFUWkRUeXhMUVVFM1F6dEJRVU5CUVN4clFrRkJUVmtzUzBGQlRpeEhRVUZqY2tNc2FVSkJRV2xDZVVJc1RVRkJUVmtzUzBGQmRrSXNRMEZCWkR0QlFVTkJhRU1zYTBKQlFVMXpRaXhaUVVGT0xFTkJRVzFDYUVJc1IwRkJia0lzUlVGQmQwSmpMRXRCUVhoQ08wRkJRMFFzVjBGTVNDeEZRVTlGTEZWQlFWVkhMRXRCUVZZc1JVRkJhVUk3UVVGQlJYWkNMR3RDUVVGTmMwSXNXVUZCVGl4RFFVRnRRbWhDTEVkQlFXNUNMRVZCUVhkQ2FVSXNTMEZCZUVJN1FVRkJhVU1zVjBGUWRFUTdRVUZUUVR0QlFVTkdMR0ZCUVVzc2IwSkJRVXc3UVVGRFJUdEJRVU5CYUVNc2JVSkJRVk13UXl4clFrRkJWQ3hEUVVFMFFtcERMRTFCUVUxRUxFMUJRV3hETEVWQlFUQkRXU3hQUVVGUGRVSXNTMEZCYWtRc1JVRkJkMFJtTEVsQlFYaEVMRU5CUTBVc1ZVRkJWVU1zUzBGQlZpeEZRVUZwUWp0QlFVTm1ha0lzYjBKQlFWRlZMRWxCUVZJc1EwRkJZU3hyUTBGQllpeEZRVUZwUkU4c1MwRkJha1E3UVVGRFdqdEJRVU5aY0VJc2EwSkJRVTF6UWl4WlFVRk9MRU5CUVcxQ2FFSXNSMEZCYmtJc1JVRkJkMEpqTEV0QlFYaENPMEZCUTBRc1YwRk1TQ3hGUVU5RkxGVkJRVlZITEV0QlFWWXNSVUZCYVVJN1FVRkJSWFpDTEd0Q1FVRk5jMElzV1VGQlRpeERRVUZ0UW1oQ0xFZEJRVzVDTEVWQlFYZENhVUlzUzBGQmVFSTdRVUZCYVVNc1YwRlFkRVE3UVVGVFFUdEJRVU5HTzBGQlEwVTdRVUV2UkVvN1FVRnBSVVE3TzBGQlJVUTdPenM3T3pzN096dHBRMEZOWVdwQ0xFY3NSVUZCUzJNc1N5eEZRVUZQTzBGQlEzWkNMRlZCUVVsd1FpeFJRVUZSTEVsQlFWbzdPMEZCUlVFc1ZVRkJTVzFETEZWQlFWVTdRVUZEV2tNc1dVRkJTVGxDTEVsQlFVazRRaXhGUVVSSkxFVkJRMEZETEUxQlFVMHNWVUZFVGl4RlFVTnJRamxDTEVsQlFVbEVMRWxCUVVsblF5eEpRVVF4UWl4RlFVTm5RMEVzVFVGQlRXaERMRWxCUVVsRExFVkJSREZETzBGQlJWcExMR05CUVUwc1JVRkJSVEpDTEUxQlFVMHNSMEZCVWl4RlFVRmhia0lzVDBGQlQwRXNTMEZCY0VJN1FVRkdUU3hQUVVGa096dEJRVXRCYWtJc1kwRkJVVU1zUjBGQlVpeERRVUZaTERKRFFVRmFMRVZCUVhsRUswSXNUMEZCZWtRN08wRkJSVUZ1UXl4WlFVRk5ReXhWUVVGT0xFTkJRV2xDZFVNc1YwRkJha0lzUTBGQk5rSk1MRTlCUVRkQ08wRkJRMFE3T3p0blEwRkZWMllzU3l4RlFVRlBjVUlzVFN4RlFVRlJPMEZCUTNwQ0xGVkJRVWw2UXl4UlFVRlJMRWxCUVZvN08wRkJSVUZITEdOQlFWRkRMRWRCUVZJc1EwRkJXU3g1UTBGQldpeEZRVUYxUkdkQ0xFdEJRWFpFT3p0QlFVVkJjRUlzV1VGQlRUQkRMRTFCUVU0c1IwRkJaWFJDTEV0QlFXWTdPMEZCUlVFc1ZVRkJTV1FzVFVGQlRUdEJRVU5TSzBJc1kwRkJUU3hSUVVSRk8wRkJSVkpETEdOQlFVMTBReXhOUVVGTlNDeHRRa0ZHU2p0QlFVZFNWU3haUVVGSlVDeE5RVUZOU0N4dFFrRkJUaXhIUVVFMFFpeFRRVWg0UWp0QlFVbFNaU3hqUVVGTk8wRkJRMHBSTEdsQ1FVRlBRVHRCUVVSSU8wRkJTa1VzVDBGQlZqczdRVUZUUVN4VlFVRkpjVUlzVFVGQlNpeEZRVUZaTzBGQlExWnVReXhaUVVGSlRTeEpRVUZLTEVOQlFWTXJRaXhKUVVGVUxFZEJRV2RDUml4TlFVRm9RanRCUVVORU96dEJRVVZFZWtNc1dVRkJUVU1zVlVGQlRpeERRVUZwUW5WRExGZEJRV3BDTEVOQlFUWkNiRU1zUjBGQk4wSTdRVUZEUkRzN096czdPMEZCUjBnN08wRkJSVUU3T3pzN096czdPenRyUWtGUFpWWXNlVUlpTENKbWFXeGxJam9pTWk1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbXhsZENCSlpIQlFjbTk0ZVR0Y2JteGxkQ0JwWkhCSmJtWnZPMXh1YkdWMElHTnZiblpsY25SVmMyVnlVSEp2Wm1sc1pUdGNibXhsZENCMWMyVnlTVzVtYjBWdVpIQnZhVzUwTzF4dWJHVjBJR0ZqWTJWemMxUnZhMlZ1U1c1d2RYUTdYRzVjYmk4cUtseHVLaUJCWW5OMGNtRmpkQ0JKWkdWdWRHbDBlU0JRY205MmFXUmxjaUJRY205NGVTQlFjbTkwYjJOdmJDQlRkSFZpSUhSdklHSmxJR1Y0ZEdWdVpHVmtJR0o1SUhKbFlXd2dTV1J3SUZCeWIzaHBaWE5jYmlvdlhHNWpiR0Z6Y3lCQlluTjBjbUZqZEVsa2NGQnliM2g1VUhKdmRHOVRkSFZpSUh0Y2JseHVJQ0F2S2lwY2JpQWdLaUJEYjI1emRISjFZM1J2Y2lCdlppQjBhR1VnU1dSd1VISnZlSGtnVTNSMVlseHVJQ0FxSUZSb1pTQmpiMjV6ZEhKMVkzUnZjaUJoWkdRZ1lTQnNhWE4wWlc1bGNpQnBiaUIwYUdVZ2JXVnpjMkZuWlVKMWN5QnlaV05sYVhabFpDQmhibVFnYzNSaGNuUWdZU0IzWldJZ2QyOXlhMlZ5SUhkcGRHZ2dkR2hsSUdsa2NGQnliM2g1SUhKbFkyVnBkbVZrWEc0Z0lDcGNiaUFnS2lCQWNHRnlZVzBnSUh0VlVrd3VVblZ1ZEdsdFpWVlNUSDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENCeWRXNTBhVzFsVUhKdmRHOVRkV0pWVWt4Y2JpQWdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxMazFsYzNOaFoyVjlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZblZ6VUc5emRFMWxjM05oWjJVZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2JpQWdLaUJBY0dGeVlXMGdJSHRRY205MGIxTjBkV0pFWlhOamNtbHdkRzl5TGtOdmJtWnBaM1Z5WVhScGIyNUVZWFJoVEdsemRIMGdZMjl1Wm1sbmRYSmhkR2x2YmlBZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2JpQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ3dnWW5WekxDQmpiMjVtYVdjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJRjkwYUdsekxuSjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd2dQU0J5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNTzF4dUlDQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTWdQU0JpZFhNN1hHNGdJQ0FnWDNSb2FYTXVZMjl1Wm1sbklEMGdZMjl1Wm1sbk8xeHVJQ0FnSUVsa2NGQnliM2g1SUQwZ1kyOXVabWxuTG1sa2NGQnliM2g1TzF4dUlDQWdJR052Ym5abGNuUlZjMlZ5VUhKdlptbHNaU0E5SUdOdmJtWnBaeTVqYjI1MlpYSjBWWE5sY2xCeWIyWnBiR1U3WEc0Z0lDQWdZV05qWlhOelZHOXJaVzVKYm5CMWRDQTlJR052Ym1acFp5NWhZMk5sYzNOVWIydGxia2x1Y0hWME8xeHVYRzVjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzBGaWMzUnlZV04wU1dSd1VISnZlSGxkSUdOdmJuTjBjblZqZEc5eUp5azdYRzVjYmlBZ0lDQmZkR2hwY3k1dFpYTnpZV2RsUW5WekxtRmtaRXhwYzNSbGJtVnlLQ2NxSnl3Z1puVnVZM1JwYjI0Z0tHMXpaeWtnZTF4dUlDQWdJQ0FnYVdZZ0tHMXpaeTUwYnlBOVBUMGdZMjl1Wm1sbkxtbGtjRlZ5YkNrZ2UxeHVYRzRnSUNBZ0lDQWdJRjkwYUdsekxuSmxjWFZsYzNSVWIwbGtjQ2h0YzJjcE8xeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcE8xeHVJQ0FnSUY5MGFHbHpMbDl6Wlc1a1UzUmhkSFZ6S0NkamNtVmhkR1ZrSnlrN1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0tpQkdkVzVqZEdsdmJpQjBhR0YwSUhObFpTQjBhR1VnYVc1MFpXNWtaV1FnYldWMGFHOWtJR2x1SUhSb1pTQnRaWE56WVdkbElISmxZMlZwZG1Wa0lHRnVaQ0JqWVd4c0lIUm9aU0J5WlhOd1pXTjBhWFpsSUdaMWJtTjBhVzl1WEc0Z0lDcGNiaUFnS2lCQWNHRnlZVzBnZTIxbGMzTmhaMlY5SUNCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdsdUlIUm9aU0J0WlhOellXZGxRblZ6WEc0Z0lDb3ZYRzRnSUhKbGNYVmxjM1JVYjBsa2NDaHRjMmNwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lHeGxkQ0J3WVhKaGJYTWdQU0J0YzJjdVltOWtlUzV3WVhKaGJYTTdYRzRnSUNBZ0x5OWpiMjV6YjJ4bExtbHVabThvSjNKbGNYVmxjM1JVYjBsa2NEb25MQ0J0YzJjdVltOWtlUzV0WlhSb2IyUXBPMXh1SUNBZ0lHTnZibk52YkdVdWFXNW1ieWduVzBGaWMzUnlZV04wU1dSd1VISnZlSGxRY205MGIxTjBkV0pkSUhKbFkyVnBkbWx1WnlCeVpYRjFaWE4wT2lBbkxDQnRjMmNwTzF4dVhHNGdJQ0FnYzNkcGRHTm9JQ2h0YzJjdVltOWtlUzV0WlhSb2IyUXBJSHRjYmlBZ0lDQWdJR05oYzJVZ0oyZGxibVZ5WVhSbFFYTnpaWEowYVc5dUp6cGNiaUFnSUNBZ0lDQWdTV1J3VUhKdmVIa3VaMlZ1WlhKaGRHVkJjM05sY25ScGIyNG9YM1JvYVhNdVkyOXVabWxuTENCd1lYSmhiWE11WTI5dWRHVnVkSE1zSUhCaGNtRnRjeTV2Y21sbmFXNHNJSEJoY21GdGN5NTFjMlZ5Ym1GdFpVaHBiblFwTG5Sb1pXNG9YRzRnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbExuVnpaWEpRY205bWFXeGxJRDBnWTI5dWRtVnlkRlZ6WlhKUWNtOW1hV3hsS0haaGJIVmxMblZ6WlhKUWNtOW1hV3hsS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJRjkwYUdsekxuSmxjR3g1VFdWemMyRm5aU2h0YzJjc0lIWmhiSFZsS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z0tHVnljbTl5S1NCN0lGOTBhR2x6TG5KbGNHeDVUV1Z6YzJGblpTaHRjMmNzSUdWeWNtOXlLVHNnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdOaGMyVWdKM1poYkdsa1lYUmxRWE56WlhKMGFXOXVKenBjYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZDJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJpY3BPMXh1SUNBZ0lDQWdJQ0JKWkhCUWNtOTRlUzUyWVd4cFpHRjBaVUZ6YzJWeWRHbHZiaWhmZEdocGN5NWpiMjVtYVdjc0lIQmhjbUZ0Y3k1aGMzTmxjblJwYjI0c0lIQmhjbUZ0Y3k1dmNtbG5hVzRwTG5Sb1pXNG9YRzRnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnS0haaGJIVmxLU0I3SUY5MGFHbHpMbkpsY0d4NVRXVnpjMkZuWlNodGMyY3NJSFpoYkhWbEtUc2dmU3hjYmx4dUlDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlDaGxjbkp2Y2lrZ2V5QmZkR2hwY3k1eVpYQnNlVTFsYzNOaFoyVW9iWE5uTENCbGNuSnZjaWs3SUgxY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2R5WldaeVpYTm9RWE56WlhKMGFXOXVKenBjYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbmNtVm1jbVZ6YUVGemMyVnlkR2x2YmljcE8xeHVJQ0FnSUNBZ0lDQkpaSEJRY205NGVTNXlaV1p5WlhOb1FYTnpaWEowYVc5dUtIQmhjbUZ0Y3k1cFpHVnVkR2wwZVNrdWRHaGxiaWhjYmlBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUhzZ1gzUm9hWE11Y21Wd2JIbE5aWE56WVdkbEtHMXpaeXdnZG1Gc2RXVXBPeUI5TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLR1Z5Y205eUtTQjdJRjkwYUdsekxuSmxjR3g1VFdWemMyRm5aU2h0YzJjc0lHVnljbTl5S1RzZ2ZWeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNiaUFnSUNBZ0lHTmhjMlVnSjJkbGRFRmpZMlZ6YzFSdmEyVnVRWFYwYUc5eWFYTmhkR2x2YmtWdVpIQnZhVzUwSnpwY2JpQWdJQ0FnSUNBZ0x5OGdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25aMlYwUVdOalpYTnpWRzlyWlc0bktUdGNiaUFnSUNBZ0lDQWdTV1J3VUhKdmVIa3VaMlYwUVdOalpYTnpWRzlyWlc1QmRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUW9YM1JvYVhNdVkyOXVabWxuTENCd1lYSmhiWE11Y21WemIzVnlZMlZ6S1M1MGFHVnVLRnh1SUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWNtVndiSGxOWlhOellXZGxLRzF6Wnl3Z2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlBb1pYSnliM0lwSUhzZ1gzUm9hWE11Y21Wd2JIbE5aWE56WVdkbEtHMXpaeXdnWlhKeWIzSXBPeUI5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnWTJGelpTQW5aMlYwUVdOalpYTnpWRzlyWlc0bk9seHVJQ0FnSUNBZ0lDQXZMeUFnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2RuWlhSQlkyTmxjM05VYjJ0bGJpY3BPMXh1SUNBZ0lDQWdJQ0JKWkhCUWNtOTRlUzVuWlhSQlkyTmxjM05VYjJ0bGJpaGZkR2hwY3k1amIyNW1hV2NzSUhCaGNtRnRjeTV5WlhOdmRYSmpaWE1zSUhCaGNtRnRjeTVzYjJkcGJpa3VkR2hsYmloY2JpQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25UMGxFUXk1blpYUkJZMk5sYzNOVWIydGxiaUJ5WlhOMWJIUTZJQ2NzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsTG1sdWNIVjBJRDBnWVdOalpYTnpWRzlyWlc1SmJuQjFkQ2gyWVd4MVpTNXBibkIxZENrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXlaWEJzZVUxbGMzTmhaMlVvYlhObkxDQjJZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlDaGxjbkp2Y2lrZ2V5QmZkR2hwY3k1eVpYQnNlVTFsYzNOaFoyVW9iWE5uTENCbGNuSnZjaWs3SUgxY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2R5WldaeVpYTm9RV05qWlhOelZHOXJaVzRuT2x4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZG5aWFJCWTJObGMzTlViMnRsYmljcE8xeHVJQ0FnSUNBZ0lDQkpaSEJRY205NGVTNXlaV1p5WlhOb1FXTmpaWE56Vkc5clpXNG9YM1JvYVhNdVkyOXVabWxuTENCd1lYSmhiWE11ZEc5clpXNHBMblJvWlc0b1hHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMDlKUkVNdWNtVm1jbVZ6YUVGalkyVnpjMVJ2YTJWdUlISmxjM1ZzZERvZ0p5d2dkbUZzZFdVcE8xeHVMeThnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaUzVwYm5CMWRDQTlJR0ZqWTJWemMxUnZhMlZ1U1c1d2RYUW9kbUZzZFdVdWFXNXdkWFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdYM1JvYVhNdWNtVndiSGxOWlhOellXZGxLRzF6Wnl3Z2RtRnNkV1VwTzF4dUlDQWdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlBb1pYSnliM0lwSUhzZ1gzUm9hWE11Y21Wd2JIbE5aWE56WVdkbEtHMXpaeXdnWlhKeWIzSXBPeUI5WEc0Z0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lHSnlaV0ZyTzF4dUlDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWR2hwY3lCbWRXNWpkR2x2YmlCeVpXTmxhWFpsY3lCaElHMWxjM05oWjJVZ1lXNWtJR0VnZG1Gc2RXVXVJRWwwSUhKbGNHeHBaWE1nZEdobElIWmhiSFZsSUhSdklIUm9aU0J6Wlc1a1pYSWdiMllnZEdobElHMWxjM05oWjJVZ2NtVmpaV2wyWldSY2JpQWdLbHh1SUNBcUlFQndZWEpoYlNBZ2UyMWxjM05oWjJWOUlDQWdiV1Z6YzJGblpTQnlaV05sYVhabFpGeHVJQ0FxSUVCd1lYSmhiU0FnZTNaaGJIVmxmU0FnSUNBZ2RtRnNkV1VnZEc4Z2FXNWpiSFZrWlNCcGJpQjBhR1VnYm1WM0lHMWxjM05oWjJVZ2RHOGdjMlZ1WkZ4dUlDQXFMMXh1SUNCeVpYQnNlVTFsYzNOaFoyVW9iWE5uTENCMllXeDFaU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnNaWFFnYldWemMyRm5aU0E5SUh0Y2JpQWdJQ0FnSUdsa09pQnRjMmN1YVdRc0lIUjVjR1U2SUNkeVpYTndiMjV6WlNjc0lIUnZPaUJ0YzJjdVpuSnZiU3dnWm5KdmJUb2diWE5uTG5SdkxGeHVJQ0FnSUNBZ1ltOWtlVG9nZXlCamIyUmxPaUF5TURBc0lIWmhiSFZsT2lCMllXeDFaU0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR052Ym5OdmJHVXViRzluS0NkYlFXSnpkSEpoWTNSSlpIQlFjbTk0ZVZCeWIzUnZVM1IxWWk1eVpYQnNlVTFsYzNOaFoyVmRJQ2NzSUcxbGMzTmhaMlVwTzF4dVhHNGdJQ0FnWDNSb2FYTXViV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsS1R0Y2JpQWdmVnh1WEc0Z0lGOXpaVzVrVTNSaGRIVnpLSFpoYkhWbExDQnlaV0Z6YjI0cElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dVhHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdEJZbk4wY21GamRFbGtjRkJ5YjNoNVVISnZkRzlUZEhWaUxuTmxibVJUZEdGMGRYTmRJQ2NzSUhaaGJIVmxLVHRjYmx4dUlDQWdJRjkwYUdsekxsOXpkR0YwWlNBOUlIWmhiSFZsTzF4dVhHNGdJQ0FnYkdWMElHMXpaeUE5SUh0Y2JpQWdJQ0FnSUhSNWNHVTZJQ2QxY0dSaGRHVW5MRnh1SUNBZ0lDQWdabkp2YlRvZ1gzUm9hWE11Y25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVEN4Y2JpQWdJQ0FnSUhSdk9pQmZkR2hwY3k1eWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTUlDc2dKeTl6ZEdGMGRYTW5MRnh1SUNBZ0lDQWdZbTlrZVRvZ2UxeHVJQ0FnSUNBZ0lDQjJZV3gxWlRvZ2RtRnNkV1ZjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdhV1lnS0hKbFlYTnZiaWtnZTF4dUlDQWdJQ0FnYlhObkxtSnZaSGt1WkdWell5QTlJSEpsWVhOdmJqdGNiaUFnSUNCOVhHNWNiaUFnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6TG5CdmMzUk5aWE56WVdkbEtHMXpaeWs3WEc0Z0lIMWNibjFjYmx4dUx5OGdaWGh3YjNKMElHUmxabUYxYkhRZ1NXUndVSEp2ZUhsUWNtOTBiMU4wZFdJN1hHNWNiaThxS2x4dUlDb2dWRzhnWVdOMGFYWmhkR1VnZEdocGN5QndjbTkwYjJOdmJDQnpkSFZpTENCMWMybHVaeUIwYUdVZ2MyRnRaU0J0WlhSb2IyUWdabTl5SUdGc2JDQndjbTkwYjNOMGRXSXVYRzRnS2lCQWNHRnlZVzBnSUh0VlVrd3VVblZ1ZEdsdFpWVlNUSDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENCeWRXNTBhVzFsVUhKdmRHOVRkV0pWVWt4Y2JpQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVXVUV1Z6YzJGblpYMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkWE5RYjNOMFRXVnpjMkZuWlNBZ0lDQWdZMjl1Wm1sbmRYSmhkR2x2Ymx4dUlDb2dRSEJoY21GdElDQjdVSEp2ZEc5VGRIVmlSR1Z6WTNKcGNIUnZjaTVEYjI1bWFXZDFjbUYwYVc5dVJHRjBZVXhwYzNSOUlHTnZibVpwWjNWeVlYUnBiMjRnSUNBZ0lDQmpiMjVtYVdkMWNtRjBhVzl1WEc0Z0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOUlFOWlhbVZqZENCM2FYUm9JRzVoYldVZ1lXNWtJR2x1YzNSaGJtTmxJRzltSUZCeWIzUnZVM1IxWWx4dUlDb3ZYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkJZbk4wY21GamRFbGtjRkJ5YjNoNVVISnZkRzlUZEhWaU8xeHVYRzVjYmx4dUx5OGdWMFZDVUVGRFN5QkdUMDlVUlZJZ0x5OWNiaTh2SUM0dUwyUmxkaTF3Y205MGIzTjBkV0p6TDNOeVl5OXBaSEJ3Y205NGVTOUJZbk4wY21GamRFbGtjRkJ5YjNoNVUzUjFZaTVxY3lKZExDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzJcbiIpOwoKLyoqKi8gfSkKLyoqKioqKi8gXSlbImRlZmF1bHQiXTsKfSk7",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.50",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "582a5e03d757035ff408e0cefba2c3e64",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "EdpIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "edpdistribuicao.pt",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "5.00",
    "description": "IDPProxy for EDP Distribuição IDP",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "58c9e486c9a492fd9f1e0d5d3f5dd39f6",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "edpdistribuicao.pt",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MobieIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "mobie.pt",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.30",
    "description": "IDPProxy for Mobi.e plataform",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "59f507ef6489fb23385c0d18eaa5aa4bf",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "mobie.pt",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}