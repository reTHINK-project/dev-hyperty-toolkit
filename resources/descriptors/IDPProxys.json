{
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "version": "2.30",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5b1a3f36f7f0e18c87091ca1e915ce795",
    "version": "7.40",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHRoaXMsIGZ1bmN0aW9uKCkgewpyZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlpOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJbDogZmFsc2UsCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkCi8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOwovKioqKioqLwovKioqKioqLyAJCS8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlczsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7Ci8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgewovKioqKioqLyAJCQkJY29uZmlndXJhYmxlOiBmYWxzZSwKLyoqKioqKi8gCQkJCWVudW1lcmFibGU6IHRydWUsCi8qKioqKiovIAkJCQlnZXQ6IGdldHRlcgovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkgewovKioqKioqLyAJCXZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgPwovKioqKioqLyAJCQlmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOgovKioqKioqLyAJCQlmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9OwovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTsKLyoqKioqKi8gCQlyZXR1cm4gZ2V0dGVyOwovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbAovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9OwovKioqKioqLwovKioqKioqLyAJLy8gX193ZWJwYWNrX3B1YmxpY19wYXRoX18KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ucCA9ICIiOwovKioqKioqLwovKioqKioqLyAJLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzCi8qKioqKiovIAlyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTsKLyoqKioqKi8gfSkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gKFsKLyogMCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwoKdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7CgpleHBvcnRzLmRlZmF1bHQgPSBhY3RpdmF0ZTsKCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKdmFyIHNsYWNrSW5mbyA9IHsKICBjbGllbnRJRDogJzExNTMzNjAzODcyLjcyNDM0OTM0MzU2JywKICBjbGllbnRTZWNyZXQ6ICdkNDI3ZWYzYzk1N2Q2OGEyOTJkYzdjNGUyMGI3ODMzMCcsCiAgcmVkaXJlY3RVUkk6IGxvY2F0aW9uLm9yaWdpbiwKICBjb2RlRW5kcG9pbnQ6ICdodHRwczovL3NsYWNrLmNvbS9vYXV0aC9hdXRob3JpemU/JywKICB0b2tlbkVuZHBvaW50OiAnaHR0cHM6Ly9zbGFjay5jb20vYXBpL29hdXRoLmFjY2Vzcz8nLAogIGluZm9FbmRwb2ludDogJ2h0dHBzOi8vc2xhY2suY29tL2FwaS91c2Vycy5pbmZvPycsCiAgc2NvcGU6ICdjbGllbnQnCn07CgovL2Z1bmN0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIFVSTCB0byBvYmF0aW4gY2VydGFpbiB2YWx1ZXMKZnVuY3Rpb24gdXJsUGFyc2VyKHVybCwgbmFtZSkgewogIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcW10vLCAnXFxcWycpLnJlcGxhY2UoL1tcXV0vLCAnXFxcXScpOwogIHZhciByZWdleFMgPSAnW1xcIyY/XScgKyBuYW1lICsgJz0oW14mI10qKSc7CiAgdmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpOwogIHZhciByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpOwogIGlmIChyZXN1bHRzID09PSBudWxsKSByZXR1cm4gJyc7ZWxzZSByZXR1cm4gcmVzdWx0c1sxXTsKfQoKZnVuY3Rpb24gc2VuZEhUVFBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7CiAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHsKICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTsKICB9IGVsc2UgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPSAndW5kZWZpbmVkJykgewogICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBYRG9tYWluUmVxdWVzdC4KICAgIC8vIFhEb21haW5SZXF1ZXN0IG9ubHkgZXhpc3RzIGluIElFLCBhbmQgaXMgSUUncyB3YXkgb2YgbWFraW5nIENPUlMgcmVxdWVzdHMuCiAgICB4aHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTsKICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTsKICB9IGVsc2UgewogICAgLy8gT3RoZXJ3aXNlLCBDT1JTIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuCiAgICB4aHIgPSBudWxsOwogIH0KICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgaWYgKHhocikgewogICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHsKICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHsKICAgICAgICAgICAgdmFyIGluZm8gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgICByZXNvbHZlKGluZm8pOwogICAgICAgICAgfSBlbHNlIGlmICh4aHIuc3RhdHVzID09PSA0MDApIHsKICAgICAgICAgICAgcmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4nKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlamVjdCgnc29tZXRoaW5nIGVsc2Ugb3RoZXIgdGhhbiAyMDAgd2FzIHJldHVybmVkJyk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9OwogICAgICB4aHIuc2VuZCgpOwogICAgfSBlbHNlIHsKICAgICAgcmVqZWN0KCdDT1JTIG5vdCBzdXBwb3J0ZWQnKTsKICAgIH0KICB9KTsKfQoKLyoqCiogRnVuY3Rpb24gdG8gZXhjaGFuZ2UgdGhlIGNvZGUgcmVjZWl2ZWQgdG8gdGhlIGlkIFRva2VuLCBhY2Nlc3MgdG9rZW4gYW5kIGEgcmVmcmVzaCB0b2tlbgoqCiovCnZhciBleGNoYW5nZUNvZGUgPSBmdW5jdGlvbiBleGNoYW5nZUNvZGUoY29kZSkgewoKICB2YXIgcyA9IHNsYWNrSW5mbzsKICB2YXIgVVJMID0gcy50b2tlbkVuZHBvaW50ICsgJ2NsaWVudF9pZD0nICsgcy5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgcy5jbGllbnRTZWNyZXQgKyAnJmNvZGU9JyArIGNvZGUgKyAnJnJlZGlyZWN0X3VyaT0nICsgcy5yZWRpcmVjdFVSSTsKCiAgY29uc29sZS5sb2coJ1VSTCcsIFVSTCk7CgogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIFVSTCkudGhlbihmdW5jdGlvbiAoaW5mbykgewogICAgICByZXNvbHZlKGluZm8pOwogICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIHJlamVjdChlcnJvcik7CiAgICB9KTsKICB9KTsKfTsKCi8qKgoqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5CiovCnZhciBpZHAgPSB7CgogIC8qKgogICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkCiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uCiAgKgogICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkCiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uCiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdAogICovCiAgdmFsaWRhdGVBc3NlcnRpb246IGZ1bmN0aW9uIHZhbGlkYXRlQXNzZXJ0aW9uKGFzc2VydGlvbiwgb3JpZ2luKSB7CiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewoKICAgICAgY29uc29sZS5sb2coJ2Fzc2VydGlvbiAtID4nLCBhc3NlcnRpb24pOwogICAgICBjb25zb2xlLmxvZygnb3JpZ2luIC0gPicsIG9yaWdpbik7CiAgICAgIGNvbnNvbGUubG9nKCdNWVBST1hZIC0gVkFMSURBVElORycpOwogICAgICByZXNvbHZlKHsgaWRlbnRpdHk6ICdpZGVudGl0eUBpZHAuY29tJywgY29udGVudHM6ICdjb250ZW50JyB9KTsKICAgIH0pOwogIH0sCgogIC8qKgogICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uCiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb24KICAqCiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZAogICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvbgogICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyCiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvbgogICovCiAgZ2VuZXJhdGVBc3NlcnRpb246IGZ1bmN0aW9uIGdlbmVyYXRlQXNzZXJ0aW9uKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpIHsKCiAgICBjb25zb2xlLmxvZygnY29udGVudHMtPicsIGNvbnRlbnRzKTsKICAgIGNvbnNvbGUubG9nKCdvcmlnaW4tPicsIG9yaWdpbik7CiAgICBjb25zb2xlLmxvZygnaGludC0+JywgaGludCk7CgogICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKCiAgICAgIC8vdGhlIGhpbnQgZmllbGQgY29udGFpbnMgdGhlIGluZm9ybWF0aW9uIG9idGFpbmVkIGFmdGVyIHRoZSB1c2VyIGF1dGhlbnRpY2F0aW9uCiAgICAgIC8vIGlmIHRoZSBoaW50IGNvbnRlbnQgaXMgbm90IHByZXNlbnQsIHRoZW4gcmVqZWN0cyB0aGUgdmFsdWUgd2l0aCB0aGUgVVJMIHRvIG9wZW4gdGhlIHBhZ2UgdG8gYXV0aGVudGljYXRlIHRoZSB1c2VyCiAgICAgIHZhciBzID0gc2xhY2tJbmZvOwogICAgICBpZiAoIWhpbnQpIHsKICAgICAgICAvL2xldCByZXF1ZXN0VXJsID0gaHR0cHM6Ly9zbGFjay5jb20vb2F1dGgvYXV0aG9yaXplP2NsaWVudF9pZD0xMTUzMzYwMzg3Mi43MjQzNDkzNDM1NiZzY29wZT1jaGF0OndyaXRlOnVzZXImcmVkaXJlY3RfdXJpPWh0dHBzOi8vd3d3LmdldHBvc3RtYW4uY29tL29hdXRoMi9jYWxsYmFjazsKCiAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSBzLmNvZGVFbmRwb2ludCArICdjbGllbnRfaWQ9JyArIHMuY2xpZW50SUQgKyAnJnNjb3BlPScgKyBzLnNjb3BlICsgJyZyZWRpcmVjdF91cmk9JyArIHMucmVkaXJlY3RVUkk7CgogICAgICAgIGNvbnNvbGUubG9nKCdmaXJzdCB1cmwgJywgcmVxdWVzdFVybCwgJ2RvbmUnKTsKICAgICAgICByZWplY3QoeyBuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBjb2RlID0gdXJsUGFyc2VyKGhpbnQsICdjb2RlJyk7CiAgICAgICAgY29uc29sZS5sb2coJ2NvZGUnLCBjb2RlKTsKICAgICAgICBleGNoYW5nZUNvZGUoY29kZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHsKCiAgICAgICAgICBjb25zb2xlLmxvZygndmFsdWUgQUZURVIgZXhjaGFuZ2VDb2RlJywgdmFsdWUpOwoKICAgICAgICAgIHZhciBpbmZvVXJsID0gcy5pbmZvRW5kcG9pbnQgKyAndG9rZW49JyArIHZhbHVlLmFjY2Vzc190b2tlbiArICcmdXNlcj0nICsgdmFsdWUudXNlcl9pZDsKCiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9VcmwpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ2luZm8tPicsIGluZm8pOwoKICAgICAgICAgICAgdmFyIHByb2ZpbGUgPSBpbmZvLnVzZXIucHJvZmlsZTsKICAgICAgICAgICAgdmFyIGluZm9Ub2tlbiA9IHsgcGljdHVyZTogcHJvZmlsZS5pbWFnZV9vcmlnaW5hbCwgZW1haWw6IHByb2ZpbGUuZW1haWwsIGZhbWlseV9uYW1lOiBwcm9maWxlLmxhc3RfbmFtZSwgZ2l2ZW5fbmFtZTogcHJvZmlsZS5maXJzdF9uYW1lLCBpZDogaW5mby51c2VyLmlkIH07CgogICAgICAgICAgICB2YXIgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7IHRva2VuSUQ6IHZhbHVlLmFjY2Vzc190b2tlbiwgZW1haWw6IHByb2ZpbGUuZW1haWwsIGlkOiBpbmZvLnVzZXIuaWQgfSkpOwoKICAgICAgICAgICAgdmFyIHRvUmVzb2x2ZSA9IHsgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogeyBkb21haW46ICdzbGFjay5jb20nLCBwcm90b2NvbDogJ09BdXRoIDIuMCcgfSwgaW5mb1Rva2VuOiBpbmZvVG9rZW4sIGludGVyd29ya2luZzogeyBhY2Nlc3NfdG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgZG9tYWluOiAnc2xhY2suY29tJyB9LCBpbmZvOiB7IGV4cGlyZXM6IDMxNTM2MDAwMDAgfSB9OwogICAgICAgICAgICBjb25zb2xlLmxvZygnUkVTT0xWSU5HIFRISVMgT0JKRUNUJywgdG9SZXNvbHZlKTsKICAgICAgICAgICAgcmVzb2x2ZSh0b1Jlc29sdmUpOwogICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvci0+JywgZXJyb3IpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH0KfTsKCi8qKgoqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWIKKi8KCnZhciBTbGFja1Byb3h5U3R1YiA9IGZ1bmN0aW9uICgpIHsKCiAgLyoqCiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YgogICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgcmVjZWl2ZWQgaWRwUHJveHkKICAqCiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkwKICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvbgogICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uCiAgKi8KICBmdW5jdGlvbiBTbGFja1Byb3h5U3R1YihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNsYWNrUHJveHlTdHViKTsKCiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7CiAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzOwogICAgX3RoaXMuY29uZmlnID0gY29uZmlnOwoKICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7CiAgICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXIKICAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9zbGFjay5jb20nKSB7CiAgICAgICAgX3RoaXMucmVxdWVzdFRvSWRwKG1zZyk7CiAgICAgIH0KICAgIH0pOwogICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2NyZWF0ZWQnKTsKICB9CgogIC8qKgogICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvbgogICoKICAqIEBwYXJhbSB7bWVzc2FnZX0gIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2VCdXMKICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFNsYWNrUHJveHlTdHViLCBbewogICAga2V5OiAncmVxdWVzdFRvSWRwJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0VG9JZHAobXNnKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7CgogICAgICBzd2l0Y2ggKG1zZy5ib2R5Lm1ldGhvZCkgewogICAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzoKICAgICAgICAgIGlkcC5nZW5lcmF0ZUFzc2VydGlvbihwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTsKICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7CiAgICAgICAgICB9KTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzoKICAgICAgICAgIGlkcC52YWxpZGF0ZUFzc2VydGlvbihwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7CiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOwogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWQKICAgICoKICAgICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkCiAgICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZAogICAgKi8KCiAgfSwgewogICAga2V5OiAncmVwbHlNZXNzYWdlJywKICAgIHZhbHVlOiBmdW5jdGlvbiByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIG1lc3NhZ2UgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHZhbHVlIH0gfTsKCiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAnX3NlbmRTdGF0dXMnLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGNvbnNvbGUubG9nKCdbU2xhY2sgSWRwIFByb3h5IHN0YXR1cyBjaGFuZ2VkXSB0byAnLCB2YWx1ZSk7CgogICAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTsKCiAgICAgIHZhciBtc2cgPSB7CiAgICAgICAgdHlwZTogJ3VwZGF0ZScsCiAgICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCwKICAgICAgICB0bzogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJywKICAgICAgICBib2R5OiB7CiAgICAgICAgICB2YWx1ZTogdmFsdWUKICAgICAgICB9CiAgICAgIH07CgogICAgICBpZiAocmVhc29uKSB7CiAgICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjsKICAgICAgfQoKICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNsYWNrUHJveHlTdHViOwp9KCk7CgovKioKICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuCiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTAogKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb24KICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uCiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViCiAqLwoKCmZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHsKICByZXR1cm4gewogICAgbmFtZTogJ1NsYWNrUHJveHlTdHViJywKICAgIGluc3RhbmNlOiBuZXcgU2xhY2tQcm94eVN0dWIodXJsLCBidXMsIGNvbmZpZykKICB9Owp9CgovKioqLyB9KQovKioqKioqLyBdKVsiZGVmYXVsdCJdOwp9KTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dmQyVmljR0ZqYXk5MWJtbDJaWEp6WVd4TmIyUjFiR1ZFWldacGJtbDBhVzl1SWl3aWQyVmljR0ZqYXpvdkx5OTNaV0p3WVdOckwySnZiM1J6ZEhKaGNDQmlNR1JtT0RVek1HRm1NemxrTTJGaU5tUTBOU0lzSW5kbFluQmhZMnM2THk4dkxpNHZaR1YyTFhCeWIzUnZjM1IxWW5NdmMzSmpMMmxrY0hCeWIzaDVMM05zWVdOckwxTnNZV05yVUhKdmVIbFRkSFZpTG1sa2NDNXFjeUpkTENKdVlXMWxjeUk2V3lKaFkzUnBkbUYwWlNJc0luTnNZV05yU1c1bWJ5SXNJbU5zYVdWdWRFbEVJaXdpWTJ4cFpXNTBVMlZqY21WMElpd2ljbVZrYVhKbFkzUlZVa2tpTENKc2IyTmhkR2x2YmlJc0ltOXlhV2RwYmlJc0ltTnZaR1ZGYm1Sd2IybHVkQ0lzSW5SdmEyVnVSVzVrY0c5cGJuUWlMQ0pwYm1adlJXNWtjRzlwYm5RaUxDSnpZMjl3WlNJc0luVnliRkJoY25ObGNpSXNJblZ5YkNJc0ltNWhiV1VpTENKeVpYQnNZV05sSWl3aWNtVm5aWGhUSWl3aWNtVm5aWGdpTENKU1pXZEZlSEFpTENKeVpYTjFiSFJ6SWl3aVpYaGxZeUlzSW5ObGJtUklWRlJRVW1WeGRXVnpkQ0lzSW0xbGRHaHZaQ0lzSW5ob2NpSXNJbGhOVEVoMGRIQlNaWEYxWlhOMElpd2liM0JsYmlJc0lsaEViMjFoYVc1U1pYRjFaWE4wSWl3aVVISnZiV2x6WlNJc0luSmxjMjlzZG1VaUxDSnlaV3BsWTNRaUxDSnZibkpsWVdSNWMzUmhkR1ZqYUdGdVoyVWlMQ0psSWl3aWNtVmhaSGxUZEdGMFpTSXNJbk4wWVhSMWN5SXNJbWx1Wm04aUxDSktVMDlPSWl3aWNHRnljMlVpTENKeVpYTndiMjV6WlZSbGVIUWlMQ0p6Wlc1a0lpd2laWGhqYUdGdVoyVkRiMlJsSWl3aVkyOWtaU0lzSW5NaUxDSlZVa3dpTENKamIyNXpiMnhsSWl3aWJHOW5JaXdpZEdobGJpSXNJbVZ5Y205eUlpd2lhV1J3SWl3aWRtRnNhV1JoZEdWQmMzTmxjblJwYjI0aUxDSmhjM05sY25ScGIyNGlMQ0pwWkdWdWRHbDBlU0lzSW1OdmJuUmxiblJ6SWl3aVoyVnVaWEpoZEdWQmMzTmxjblJwYjI0aUxDSm9hVzUwSWl3aWNtVnhkV1Z6ZEZWeWJDSXNJbXh2WjJsdVZYSnNJaXdpZG1Gc2RXVWlMQ0pwYm1adlZYSnNJaXdpWVdOalpYTnpYM1J2YTJWdUlpd2lkWE5sY2w5cFpDSXNJbkJ5YjJacGJHVWlMQ0oxYzJWeUlpd2lhVzVtYjFSdmEyVnVJaXdpY0dsamRIVnlaU0lzSW1sdFlXZGxYMjl5YVdkcGJtRnNJaXdpWlcxaGFXd2lMQ0ptWVcxcGJIbGZibUZ0WlNJc0lteGhjM1JmYm1GdFpTSXNJbWRwZG1WdVgyNWhiV1VpTENKbWFYSnpkRjl1WVcxbElpd2lhV1FpTENKaWRHOWhJaXdpYzNSeWFXNW5hV1o1SWl3aWRHOXJaVzVKUkNJc0luUnZVbVZ6YjJ4MlpTSXNJbVJ2YldGcGJpSXNJbkJ5YjNSdlkyOXNJaXdpYVc1MFpYSjNiM0pyYVc1bklpd2laWGh3YVhKbGN5SXNJbE5zWVdOclVISnZlSGxUZEhWaUlpd2ljblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ0lzSW1KMWN5SXNJbU52Ym1acFp5SXNJbDkwYUdseklpd2liV1Z6YzJGblpVSjFjeUlzSW1Ga1pFeHBjM1JsYm1WeUlpd2liWE5uSWl3aWRHOGlMQ0p5WlhGMVpYTjBWRzlKWkhBaUxDSmZjMlZ1WkZOMFlYUjFjeUlzSW5CaGNtRnRjeUlzSW1KdlpIa2lMQ0oxYzJWeWJtRnRaVWhwYm5RaUxDSnlaWEJzZVUxbGMzTmhaMlVpTENKdFpYTnpZV2RsSWl3aWRIbHdaU0lzSW1aeWIyMGlMQ0p3YjNOMFRXVnpjMkZuWlNJc0luSmxZWE52YmlJc0lsOXpkR0YwWlNJc0ltUmxjMk1pTENKcGJuTjBZVzVqWlNKZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1EwRkJRenRCUVVORUxFODdRVU5XUVR0QlFVTkJPenRCUVVWQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHM3UVVGRlFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFN1FVRkRRVHM3TzBGQlIwRTdRVUZEUVRzN1FVRkZRVHRCUVVOQk96dEJRVVZCTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEVzWVVGQlN6dEJRVU5NTzBGQlEwRTdPMEZCUlVFN1FVRkRRVHRCUVVOQk8wRkJRMEVzYlVOQlFUSkNMREJDUVVFd1FpeEZRVUZGTzBGQlEzWkVMSGxEUVVGcFF5eGxRVUZsTzBGQlEyaEVPMEZCUTBFN1FVRkRRVHM3UVVGRlFUdEJRVU5CTERoRVFVRnpSQ3dyUkVGQkswUTdPMEZCUlhKSU8wRkJRMEU3TzBGQlJVRTdRVUZEUVRzN096czdPenM3T3pzN096czdPenRyUWtNd1RYZENRU3hST3pzN08wRkJkRkY0UWl4SlFVRkpReXhaUVVGWk8wRkJRMlJETEZsQlFWVXNlVUpCUkVrN1FVRkZaRU1zWjBKQlFXTXNhME5CUmtFN1FVRkhaRU1zWlVGQllVTXNVMEZCVTBNc1RVRklVanRCUVVsa1F5eG5Ra0ZCWXl4dlEwRktRVHRCUVV0a1F5eHBRa0ZCWlN4eFEwRk1SRHRCUVUxa1F5eG5Ra0ZCWXl4dFEwRk9RVHRCUVU5a1F5eFRRVUZQTzBGQlVFOHNRMEZCYUVJN08wRkJWVUU3UVVGRFFTeFRRVUZUUXl4VFFVRlVMRU5CUVcxQ1F5eEhRVUZ1UWl4RlFVRjNRa01zU1VGQmVFSXNSVUZCT0VJN1FVRkROVUpCTEZOQlFVOUJMRXRCUVV0RExFOUJRVXdzUTBGQllTeE5RVUZpTEVWQlFYRkNMRTFCUVhKQ0xFVkJRVFpDUVN4UFFVRTNRaXhEUVVGeFF5eE5RVUZ5UXl4RlFVRTJReXhOUVVFM1F5eERRVUZRTzBGQlEwRXNUVUZCU1VNc1UwRkJVeXhaUVVGWlJpeEpRVUZhTEVkQlFXMUNMRmRCUVdoRE8wRkJRMEVzVFVGQlNVY3NVVUZCVVN4SlFVRkpReXhOUVVGS0xFTkJRVmRHTEUxQlFWZ3NRMEZCV2p0QlFVTkJMRTFCUVVsSExGVkJRVlZHTEUxQlFVMUhMRWxCUVU0c1EwRkJWMUFzUjBGQldDeERRVUZrTzBGQlEwRXNUVUZCU1Uwc1dVRkJXU3hKUVVGb1FpeEZRVU5CTEU5QlFVOHNSVUZCVUN4RFFVUkJMRXRCUjBFc1QwRkJUMEVzVVVGQlVTeERRVUZTTEVOQlFWQTdRVUZEUkRzN1FVRkZSQ3hUUVVGVFJTeGxRVUZVTEVOQlFYbENReXhOUVVGNlFpeEZRVUZwUTFRc1IwRkJha01zUlVGQmMwTTdRVUZEY0VNc1RVRkJTVlVzVFVGQlRTeEpRVUZKUXl4alFVRktMRVZCUVZZN1FVRkRRU3hOUVVGSkxIRkNRVUZ4UWtRc1IwRkJla0lzUlVGQk9FSTdRVUZETlVKQkxGRkJRVWxGTEVsQlFVb3NRMEZCVTBnc1RVRkJWQ3hGUVVGcFFsUXNSMEZCYWtJc1JVRkJjMElzU1VGQmRFSTdRVUZEUkN4SFFVWkVMRTFCUlU4c1NVRkJTU3hQUVVGUFlTeGpRVUZRTEVsQlFYbENMRmRCUVRkQ0xFVkJRVEJETzBGQlF5OURPMEZCUTBFN1FVRkRRVWdzVlVGQlRTeEpRVUZKUnl4alFVRktMRVZCUVU0N1FVRkRRVWdzVVVGQlNVVXNTVUZCU2l4RFFVRlRTQ3hOUVVGVUxFVkJRV2xDVkN4SFFVRnFRanRCUVVORUxFZEJURTBzVFVGTFFUdEJRVU5NTzBGQlEwRlZMRlZCUVUwc1NVRkJUanRCUVVORU8wRkJRMFFzVTBGQlR5eEpRVUZKU1N4UFFVRktMRU5CUVZrc1ZVRkJVME1zVDBGQlZDeEZRVUZwUWtNc1RVRkJha0lzUlVGQmVVSTdRVUZETVVNc1VVRkJTVTRzUjBGQlNpeEZRVUZUTzBGQlExQkJMRlZCUVVsUExHdENRVUZLTEVkQlFYbENMRlZCUVZORExFTkJRVlFzUlVGQldUdEJRVU51UXl4WlFVRkpVaXhKUVVGSlV5eFZRVUZLTEV0QlFXMUNMRU5CUVhaQ0xFVkJRVEJDTzBGQlEzaENMR05CUVVsVUxFbEJRVWxWTEUxQlFVb3NTMEZCWlN4SFFVRnVRaXhGUVVGM1FqdEJRVU4wUWl4blFrRkJTVU1zVDBGQlQwTXNTMEZCUzBNc1MwRkJUQ3hEUVVGWFlpeEpRVUZKWXl4WlFVRm1MRU5CUVZnN1FVRkRRVlFzYjBKQlFWRk5MRWxCUVZJN1FVRkRSQ3hYUVVoRUxFMUJSMDhzU1VGQlNWZ3NTVUZCU1ZVc1RVRkJTaXhMUVVGbExFZEJRVzVDTEVWQlFYZENPMEZCUXpkQ1NpeHRRa0ZCVHl4NVEwRkJVRHRCUVVORUxGZEJSazBzVFVGRlFUdEJRVU5NUVN4dFFrRkJUeXcwUTBGQlVEdEJRVU5FTzBGQlEwWTdRVUZEUml4UFFWaEVPMEZCV1VGT0xGVkJRVWxsTEVsQlFVbzdRVUZEUkN4TFFXUkVMRTFCWTA4N1FVRkRURlFzWVVGQlR5eHZRa0ZCVUR0QlFVTkVPMEZCUTBZc1IwRnNRazBzUTBGQlVEdEJRVzFDUkRzN1FVRkZSRHM3T3p0QlFVbEJMRWxCUVVsVkxHVkJRV2RDTEZOQlFXaENRU3haUVVGblFpeERRVUZUUXl4SlFVRlVMRVZCUVdVN08wRkJSV3BETEUxQlFVbERMRWxCUVVsMlF5eFRRVUZTTzBGQlEwRXNUVUZCU1hkRExFMUJRVTFFTEVWQlFVVm9ReXhoUVVGR0xFZEJRV3RDTEZsQlFXeENMRWRCUVdsRFowTXNSVUZCUlhSRExGRkJRVzVETEVkQlFUaERMR2xDUVVFNVF5eEhRVUZyUlhORExFVkJRVVZ5UXl4WlFVRndSU3hIUVVGdFJpeFJRVUZ1Uml4SFFVRTRSbTlETEVsQlFUbEdMRWRCUVhGSExHZENRVUZ5Unl4SFFVRjVTRU1zUlVGQlJYQkRMRmRCUVhKSk96dEJRVVZCYzBNc1ZVRkJVVU1zUjBGQlVpeERRVUZaTEV0QlFWb3NSVUZCYlVKR0xFZEJRVzVDT3p0QlFVVkJMRk5CUVU4c1NVRkJTV1lzVDBGQlNpeERRVUZaTEZWQlFWTkRMRTlCUVZRc1JVRkJhMEpETEUxQlFXeENMRVZCUVRCQ08wRkJRek5EVWl4dlFrRkJaMElzUzBGQmFFSXNSVUZCZFVKeFFpeEhRVUYyUWl4RlFVRTBRa2NzU1VGQk5VSXNRMEZCYVVNc1ZVRkJVMWdzU1VGQlZDeEZRVUZsTzBGQlF6bERUaXhqUVVGUlRTeEpRVUZTTzBGQlEwUXNTMEZHUkN4RlFVVkhMRlZCUVZOWkxFdEJRVlFzUlVGQlowSTdRVUZEYWtKcVFpeGhRVUZQYVVJc1MwRkJVRHRCUVVORUxFdEJTa1E3UVVGTlJDeEhRVkJOTEVOQlFWQTdRVUZSUkN4RFFXWkVPenRCUVdsQ1FUczdPMEZCUjBFc1NVRkJTVU1zVFVGQlRUczdRVUZGVWpzN096czdPenM3UVVGUlFVTXNjVUpCUVcxQ0xESkNRVUZEUXl4VFFVRkVMRVZCUVZreFF5eE5RVUZhTEVWQlFYVkNPMEZCUTNoRExGZEJRVThzU1VGQlNXOUNMRTlCUVVvc1EwRkJXU3hWUVVGVFF5eFBRVUZVTEVWQlFXbENReXhOUVVGcVFpeEZRVUY1UWpzN1FVRkZNVU5qTEdOQlFWRkRMRWRCUVZJc1EwRkJXU3hsUVVGYUxFVkJRVFpDU3l4VFFVRTNRanRCUVVOQlRpeGpRVUZSUXl4SFFVRlNMRU5CUVZrc1dVRkJXaXhGUVVFd1FuSkRMRTFCUVRGQ08wRkJRMEZ2UXl4alFVRlJReXhIUVVGU0xFTkJRVmtzYzBKQlFWbzdRVUZEUVdoQ0xHTkJRVkVzUlVGQlEzTkNMRlZCUVZVc2EwSkJRVmdzUlVGQkswSkRMRlZCUVZVc1UwRkJla01zUlVGQlVqdEJRVVZFTEV0QlVFMHNRMEZCVUR0QlFWRkVMRWRCYmtKUE96dEJRWEZDVWpzN096czdPenM3TzBGQlUwRkRMSEZDUVVGdFFpd3lRa0ZCUTBRc1VVRkJSQ3hGUVVGWE5VTXNUVUZCV0N4RlFVRnRRamhETEVsQlFXNUNMRVZCUVRSQ096dEJRVVUzUTFZc1dVRkJVVU1zUjBGQlVpeERRVUZaTEZsQlFWb3NSVUZCTUVKUExGRkJRVEZDTzBGQlEwRlNMRmxCUVZGRExFZEJRVklzUTBGQldTeFZRVUZhTEVWQlFYZENja01zVFVGQmVFSTdRVUZEUVc5RExGbEJRVkZETEVkQlFWSXNRMEZCV1N4UlFVRmFMRVZCUVhOQ1V5eEpRVUYwUWpzN1FVRkZRU3hYUVVGUExFbEJRVWt4UWl4UFFVRktMRU5CUVZrc1ZVRkJVME1zVDBGQlZDeEZRVUZyUWtNc1RVRkJiRUlzUlVGQk1FSTdPMEZCUlRORE8wRkJRMEU3UVVGRFFTeFZRVUZKV1N4SlFVRkpka01zVTBGQlVqdEJRVU5CTEZWQlFVa3NRMEZCUTIxRUxFbEJRVXdzUlVGQlZ6dEJRVU5VT3p0QlFVVkJMRmxCUVVsRExHRkJRV0ZpTEVWQlFVVnFReXhaUVVGR0xFZEJRV2xDTEZsQlFXcENMRWRCUVdkRGFVTXNSVUZCUlhSRExGRkJRV3hETEVkQlFUWkRMRk5CUVRkRExFZEJRWGxFYzBNc1JVRkJSVGxDTEV0QlFUTkVMRWRCUVcxRkxHZENRVUZ1UlN4SFFVRjFSamhDTEVWQlFVVndReXhYUVVFeFJ6czdRVUZGUVhORExHZENRVUZSUXl4SFFVRlNMRU5CUVZrc1dVRkJXaXhGUVVFd1FsVXNWVUZCTVVJc1JVRkJjME1zVFVGQmRFTTdRVUZEUVhwQ0xHVkJRVThzUlVGQlEyWXNUVUZCVFN4bFFVRlFMRVZCUVhkQ2VVTXNWVUZCVlVRc1ZVRkJiRU1zUlVGQlVEdEJRVVZFTEU5QlVrUXNUVUZSVHp0QlFVTk1MRmxCUVVsa0xFOUJRVTgxUWl4VlFVRlZlVU1zU1VGQlZpeEZRVUZuUWl4TlFVRm9RaXhEUVVGWU8wRkJRMEZXTEdkQ1FVRlJReXhIUVVGU0xFTkJRVmtzVFVGQldpeEZRVUZ2UWtvc1NVRkJjRUk3UVVGRFFVUXNjVUpCUVdGRExFbEJRV0lzUlVGQmJVSkxMRWxCUVc1Q0xFTkJRWGRDTEZWQlFWTlhMRXRCUVZRc1JVRkJaMEk3TzBGQlJYUkRZaXhyUWtGQlVVTXNSMEZCVWl4RFFVRlpMREJDUVVGYUxFVkJRWGREV1N4TFFVRjRRenM3UVVGRlFTeGpRVUZKUXl4VlFVRlZhRUlzUlVGQlJTOUNMRmxCUVVZc1IwRkJhVUlzVVVGQmFrSXNSMEZCTkVJNFF5eE5RVUZOUlN4WlFVRnNReXhIUVVGcFJDeFJRVUZxUkN4SFFVRTBSRVlzVFVGQlRVY3NUMEZCYUVZN08wRkJSVUYwUXl3d1FrRkJaMElzUzBGQmFFSXNSVUZCZFVKdlF5eFBRVUYyUWl4RlFVRm5RMW9zU1VGQmFFTXNRMEZCY1VNc1ZVRkJVMWdzU1VGQlZDeEZRVUZsTzBGQlEyeEVVeXh2UWtGQlVVTXNSMEZCVWl4RFFVRlpMRkZCUVZvc1JVRkJjMEpXTEVsQlFYUkNPenRCUVVWQkxHZENRVUZKTUVJc1ZVRkJWVEZDTEV0QlFVc3lRaXhKUVVGTUxFTkJRVlZFTEU5QlFYaENPMEZCUTBFc1owSkJRVWxGTEZsQlFWa3NSVUZCUTBNc1UwRkJVMGdzVVVGQlVVa3NZMEZCYkVJc1JVRkJhME5ETEU5QlFVOU1MRkZCUVZGTExFdEJRV3BFTEVWQlFYZEVReXhoUVVGaFRpeFJRVUZSVHl4VFFVRTNSU3hGUVVGM1JrTXNXVUZCV1ZJc1VVRkJVVk1zVlVGQk5VY3NSVUZCZDBoRExFbEJRVWx3UXl4TFFVRkxNa0lzU1VGQlRDeERRVUZWVXl4RlFVRjBTU3hGUVVGb1FqczdRVUZGUVN4blFrRkJTWEpDTEZsQlFWbHpRaXhMUVVGTGNFTXNTMEZCUzNGRExGTkJRVXdzUTBGQlpTeEZRVUZEUXl4VFFVRlRha0lzVFVGQlRVVXNXVUZCYUVJc1JVRkJPRUpQTEU5QlFVOU1MRkZCUVZGTExFdEJRVGRETEVWQlFXOUVTeXhKUVVGSmNFTXNTMEZCU3pKQ0xFbEJRVXdzUTBGQlZWTXNSVUZCYkVVc1JVRkJaaXhEUVVGTUxFTkJRV2hDT3p0QlFVVkJMR2RDUVVGSlNTeFpRVUZaTEVWQlFVTjZRaXhYUVVGWFFTeFRRVUZhTEVWQlFYVkNSaXhMUVVGTExFVkJRVU0wUWl4UlFVRlJMRmRCUVZRc1JVRkJjMEpETEZWQlFWVXNWMEZCYUVNc1JVRkJOVUlzUlVGQk1FVmtMRmRCUVZkQkxGTkJRWEpHTEVWQlFXZEhaU3hqUVVGakxFVkJRVU51UWl4alFVRmpSaXhOUVVGTlJTeFpRVUZ5UWl4RlFVRnRRMmxDTEZGQlFWRXNWMEZCTTBNc1JVRkJPVWNzUlVGQmQwdDZReXhOUVVGUExFVkJRVU0wUXl4VFFVRlRMRlZCUVZZc1JVRkJMMHNzUlVGQmFFSTdRVUZEUVc1RExHOUNRVUZSUXl4SFFVRlNMRU5CUVZrc2RVSkJRVm9zUlVGQmNVTTRRaXhUUVVGeVF6dEJRVU5CT1VNc2IwSkJRVkU0UXl4VFFVRlNPMEZCUTBRc1YwRllSQ3hGUVZkSExGVkJRVk0xUWl4TFFVRlVMRVZCUVdkQ08wRkJRMnBDU0N4dlFrRkJVVU1zUjBGQlVpeERRVUZaTEZOQlFWb3NSVUZCZFVKRkxFdEJRWFpDTzBGQlEwUXNWMEZpUkR0QlFXVkVMRk5CY2tKRU8wRkJkVUpFTzBGQlEwWXNTMEY0UTAwc1EwRkJVRHRCUVhsRFJEdEJRVGRGVHl4RFFVRldPenRCUVdkR1FUczdPenRKUVVkTmFVTXNZenM3UVVGRlNqczdPenM3T3pzN1FVRlJRU3d3UWtGQldVTXNiVUpCUVZvc1JVRkJhVU5ETEVkQlFXcERMRVZCUVhORFF5eE5RVUYwUXl4RlFVRTRRenRCUVVGQk96dEJRVU0xUXl4UlFVRkpReXhSUVVGUkxFbEJRVm83UVVGRFFVRXNWVUZCVFVnc2JVSkJRVTRzUjBGQk5FSkJMRzFDUVVFMVFqdEJRVU5CUnl4VlFVRk5ReXhWUVVGT0xFZEJRVzFDU0N4SFFVRnVRanRCUVVOQlJTeFZRVUZOUkN4TlFVRk9MRWRCUVdWQkxFMUJRV1k3TzBGQlJVRkRMRlZCUVUxRExGVkJRVTRzUTBGQmFVSkRMRmRCUVdwQ0xFTkJRVFpDTEVkQlFUZENMRVZCUVd0RExGVkJRVk5ETEVkQlFWUXNSVUZCWXp0QlFVTTVRenRCUVVOQkxGVkJRVWxCTEVsQlFVbERMRVZCUVVvc1MwRkJWeXgzUWtGQlppeEZRVUY1UXp0QlFVTjJRMG9zWTBGQlRVc3NXVUZCVGl4RFFVRnRRa1lzUjBGQmJrSTdRVUZEUkR0QlFVTkdMRXRCVEVRN1FVRk5RVWdzVlVGQlRVMHNWMEZCVGl4RFFVRnJRaXhUUVVGc1FqdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdhVU5CUzJGSUxFY3NSVUZCU3p0QlFVTm9RaXhWUVVGSlNDeFJRVUZSTEVsQlFWbzdRVUZEUVN4VlFVRkpUeXhUUVVGVFNpeEpRVUZKU3l4SlFVRktMRU5CUVZORUxFMUJRWFJDT3p0QlFVVkJMR05CUVZGS0xFbEJRVWxMTEVsQlFVb3NRMEZCVTNKRkxFMUJRV3BDTzBGQlEwVXNZVUZCU3l4dFFrRkJURHRCUVVORmVVSXNZMEZCU1Vzc2FVSkJRVW9zUTBGQmMwSnpReXhQUVVGUGRrTXNVVUZCTjBJc1JVRkJkVU4xUXl4UFFVRlBia1lzVFVGQk9VTXNSVUZCYzBSdFJpeFBRVUZQUlN4WlFVRTNSQ3hGUVVFeVJTOURMRWxCUVRORkxFTkJRMFVzVlVGQlUxY3NTMEZCVkN4RlFVRm5RanRCUVVGRk1rSXNhMEpCUVUxVkxGbEJRVTRzUTBGQmJVSlFMRWRCUVc1Q0xFVkJRWGRDT1VJc1MwRkJlRUk3UVVGQlowTXNWMEZFY0VRc1JVRkhSU3hWUVVGVFZpeExRVUZVTEVWQlFXZENPMEZCUVVWeFF5eHJRa0ZCVFZVc1dVRkJUaXhEUVVGdFFsQXNSMEZCYmtJc1JVRkJkMEo0UXl4TFFVRjRRanRCUVVGblF5eFhRVWh3UkR0QlFVdEJPMEZCUTBZc1lVRkJTeXh0UWtGQlREdEJRVU5GUXl4alFVRkpReXhwUWtGQlNpeERRVUZ6UWpCRExFOUJRVTk2UXl4VFFVRTNRaXhGUVVGM1EzbERMRTlCUVU5dVJpeE5RVUV2UXl4RlFVRjFSSE5ETEVsQlFYWkVMRU5CUTBVc1ZVRkJVMWNzUzBGQlZDeEZRVUZuUWp0QlFVRkZNa0lzYTBKQlFVMVZMRmxCUVU0c1EwRkJiVUpRTEVkQlFXNUNMRVZCUVhkQ09VSXNTMEZCZUVJN1FVRkJaME1zVjBGRWNFUXNSVUZIUlN4VlFVRlRWaXhMUVVGVUxFVkJRV2RDTzBGQlFVVnhReXhyUWtGQlRWVXNXVUZCVGl4RFFVRnRRbEFzUjBGQmJrSXNSVUZCZDBKNFF5eExRVUY0UWp0QlFVRm5ReXhYUVVod1JEdEJRVXRCTzBGQlEwWTdRVUZEUlR0QlFXaENTanRCUVd0Q1JEczdRVUZGUkRzN096czdPenM3TzJsRFFVMWhkME1zUnl4RlFVRkxPVUlzU3l4RlFVRlBPMEZCUTNaQ0xGVkJRVWt5UWl4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNWY3NWVUZCVlN4RlFVRkRlRUlzU1VGQlNXZENMRWxCUVVsb1FpeEZRVUZVTEVWQlFXRjVRaXhOUVVGTkxGVkJRVzVDTEVWQlFTdENVaXhKUVVGSlJDeEpRVUZKVlN4SlFVRjJReXhGUVVFMlEwRXNUVUZCVFZZc1NVRkJTVU1zUlVGQmRrUXNSVUZCTWtSSkxFMUJRVTBzUlVGQlEyNUVMRTFCUVUwc1IwRkJVQ3hGUVVGWlowSXNUMEZCVDBFc1MwRkJia0lzUlVGQmFrVXNSVUZCWkRzN1FVRkZRVEpDTEZsQlFVMURMRlZCUVU0c1EwRkJhVUpoTEZkQlFXcENMRU5CUVRaQ1NDeFBRVUUzUWp0QlFVTkVPenM3WjBOQlJWZDBReXhMTEVWQlFVOHdReXhOTEVWQlFWRTdRVUZEZWtJc1ZVRkJTV1lzVVVGQlVTeEpRVUZhT3p0QlFVVkJlRU1zWTBGQlVVTXNSMEZCVWl4RFFVRlpMSE5EUVVGYUxFVkJRVzlFV1N4TFFVRndSRHM3UVVGRlFUSkNMRmxCUVUxblFpeE5RVUZPTEVkQlFXVXpReXhMUVVGbU96dEJRVVZCTEZWQlFVazRRaXhOUVVGTk8wRkJRMUpUTEdOQlFVMHNVVUZFUlR0QlFVVlNReXhqUVVGTllpeE5RVUZOU0N4dFFrRkdTanRCUVVkU1R5eFpRVUZKU2l4TlFVRk5TQ3h0UWtGQlRpeEhRVUUwUWl4VFFVaDRRanRCUVVsU1Z5eGpRVUZOTzBGQlEwcHVReXhwUWtGQlQwRTdRVUZFU0R0QlFVcEZMRTlCUVZZN08wRkJVMEVzVlVGQlNUQkRMRTFCUVVvc1JVRkJXVHRCUVVOV1dpeFpRVUZKU3l4SlFVRktMRU5CUVZOVExFbEJRVlFzUjBGQlowSkdMRTFCUVdoQ08wRkJRMFE3TzBGQlJVUm1MRmxCUVUxRExGVkJRVTRzUTBGQmFVSmhMRmRCUVdwQ0xFTkJRVFpDV0N4SFFVRTNRanRCUVVORU96czdPenM3UVVGSFNEczdPenM3T3pzN08wRkJUMlVzVTBGQlUzSkdMRkZCUVZRc1EwRkJhMEpaTEVkQlFXeENMRVZCUVhWQ2IwVXNSMEZCZGtJc1JVRkJORUpETEUxQlFUVkNMRVZCUVc5RE8wRkJRMnBFTEZOQlFVODdRVUZEVEhCRkxGVkJRVTBzWjBKQlJFUTdRVUZGVEhWR0xHTkJRVlVzU1VGQlNYUkNMR05CUVVvc1EwRkJiVUpzUlN4SFFVRnVRaXhGUVVGM1FtOUZMRWRCUVhoQ0xFVkJRVFpDUXl4TlFVRTNRanRCUVVaTUxFZEJRVkE3UVVGSlJDeERJaXdpWm1sc1pTSTZJbE5zWVdOclVISnZlSGxUZEhWaUxtbGtjQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpaG1kVzVqZEdsdmJpQjNaV0p3WVdOclZXNXBkbVZ5YzJGc1RXOWtkV3hsUkdWbWFXNXBkR2x2YmloeWIyOTBMQ0JtWVdOMGIzSjVLU0I3WEc1Y2RHbG1LSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeUFtSmlCMGVYQmxiMllnYlc5a2RXeGxJRDA5UFNBbmIySnFaV04wSnlsY2JseDBYSFJ0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1poWTNSdmNua29LVHRjYmx4MFpXeHpaU0JwWmloMGVYQmxiMllnWkdWbWFXNWxJRDA5UFNBblpuVnVZM1JwYjI0bklDWW1JR1JsWm1sdVpTNWhiV1FwWEc1Y2RGeDBaR1ZtYVc1bEtGd2lZV04wYVhaaGRHVmNJaXdnVzEwc0lHWmhZM1J2Y25rcE8xeHVYSFJsYkhObElHbG1LSFI1Y0dWdlppQmxlSEJ2Y25SeklEMDlQU0FuYjJKcVpXTjBKeWxjYmx4MFhIUmxlSEJ2Y25Selcxd2lZV04wYVhaaGRHVmNJbDBnUFNCbVlXTjBiM0o1S0NrN1hHNWNkR1ZzYzJWY2JseDBYSFJ5YjI5MFcxd2lZV04wYVhaaGRHVmNJbDBnUFNCbVlXTjBiM0o1S0NrN1hHNTlLU2gwYUdsekxDQm1kVzVqZEdsdmJpZ3BJSHRjYm5KbGRIVnliaUJjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z2QyVmljR0ZqYXk5MWJtbDJaWEp6WVd4TmIyUjFiR1ZFWldacGJtbDBhVzl1SWl3aUlGeDBMeThnVkdobElHMXZaSFZzWlNCallXTm9aVnh1SUZ4MGRtRnlJR2x1YzNSaGJHeGxaRTF2WkhWc1pYTWdQU0I3ZlR0Y2JseHVJRngwTHk4Z1ZHaGxJSEpsY1hWcGNtVWdablZ1WTNScGIyNWNiaUJjZEdaMWJtTjBhVzl1SUY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4b2JXOWtkV3hsU1dRcElIdGNibHh1SUZ4MFhIUXZMeUJEYUdWamF5QnBaaUJ0YjJSMWJHVWdhWE1nYVc0Z1kyRmphR1ZjYmlCY2RGeDBhV1lvYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjBwSUh0Y2JpQmNkRngwWEhSeVpYUjFjbTRnYVc1emRHRnNiR1ZrVFc5a2RXeGxjMXR0YjJSMWJHVkpaRjB1Wlhod2IzSjBjenRjYmlCY2RGeDBmVnh1SUZ4MFhIUXZMeUJEY21WaGRHVWdZU0J1WlhjZ2JXOWtkV3hsSUNoaGJtUWdjSFYwSUdsMElHbHVkRzhnZEdobElHTmhZMmhsS1Z4dUlGeDBYSFIyWVhJZ2JXOWtkV3hsSUQwZ2FXNXpkR0ZzYkdWa1RXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwZ1BTQjdYRzRnWEhSY2RGeDBhVG9nYlc5a2RXeGxTV1FzWEc0Z1hIUmNkRngwYkRvZ1ptRnNjMlVzWEc0Z1hIUmNkRngwWlhod2IzSjBjem9nZTMxY2JpQmNkRngwZlR0Y2JseHVJRngwWEhRdkx5QkZlR1ZqZFhSbElIUm9aU0J0YjJSMWJHVWdablZ1WTNScGIyNWNiaUJjZEZ4MGJXOWtkV3hsYzF0dGIyUjFiR1ZKWkYwdVkyRnNiQ2h0YjJSMWJHVXVaWGh3YjNKMGN5d2diVzlrZFd4bExDQnRiMlIxYkdVdVpYaHdiM0owY3l3Z1gxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5azdYRzVjYmlCY2RGeDBMeThnUm14aFp5QjBhR1VnYlc5a2RXeGxJR0Z6SUd4dllXUmxaRnh1SUZ4MFhIUnRiMlIxYkdVdWJDQTlJSFJ5ZFdVN1hHNWNiaUJjZEZ4MEx5OGdVbVYwZFhKdUlIUm9aU0JsZUhCdmNuUnpJRzltSUhSb1pTQnRiMlIxYkdWY2JpQmNkRngwY21WMGRYSnVJRzF2WkhWc1pTNWxlSEJ2Y25Sek8xeHVJRngwZlZ4dVhHNWNiaUJjZEM4dklHVjRjRzl6WlNCMGFHVWdiVzlrZFd4bGN5QnZZbXBsWTNRZ0tGOWZkMlZpY0dGamExOXRiMlIxYkdWelgxOHBYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtMGdQU0J0YjJSMWJHVnpPMXh1WEc0Z1hIUXZMeUJsZUhCdmMyVWdkR2hsSUcxdlpIVnNaU0JqWVdOb1pWeHVJRngwWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1aklEMGdhVzV6ZEdGc2JHVmtUVzlrZFd4bGN6dGNibHh1SUZ4MEx5OGdaR1ZtYVc1bElHZGxkSFJsY2lCbWRXNWpkR2x2YmlCbWIzSWdhR0Z5Ylc5dWVTQmxlSEJ2Y25SelhHNGdYSFJmWDNkbFluQmhZMnRmY21WeGRXbHlaVjlmTG1RZ1BTQm1kVzVqZEdsdmJpaGxlSEJ2Y25SekxDQnVZVzFsTENCblpYUjBaWElwSUh0Y2JpQmNkRngwYVdZb0lWOWZkMlZpY0dGamExOXlaWEYxYVhKbFgxOHVieWhsZUhCdmNuUnpMQ0J1WVcxbEtTa2dlMXh1SUZ4MFhIUmNkRTlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCdVlXMWxMQ0I3WEc0Z1hIUmNkRngwWEhSamIyNW1hV2QxY21GaWJHVTZJR1poYkhObExGeHVJRngwWEhSY2RGeDBaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUJjZEZ4MFhIUmNkR2RsZERvZ1oyVjBkR1Z5WEc0Z1hIUmNkRngwZlNrN1hHNGdYSFJjZEgxY2JpQmNkSDA3WEc1Y2JpQmNkQzh2SUdkbGRFUmxabUYxYkhSRmVIQnZjblFnWm5WdVkzUnBiMjRnWm05eUlHTnZiWEJoZEdsaWFXeHBkSGtnZDJsMGFDQnViMjR0YUdGeWJXOXVlU0J0YjJSMWJHVnpYRzRnWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtNGdQU0JtZFc1amRHbHZiaWh0YjJSMWJHVXBJSHRjYmlCY2RGeDBkbUZ5SUdkbGRIUmxjaUE5SUcxdlpIVnNaU0FtSmlCdGIyUjFiR1V1WDE5bGMwMXZaSFZzWlNBL1hHNGdYSFJjZEZ4MFpuVnVZM1JwYjI0Z1oyVjBSR1ZtWVhWc2RDZ3BJSHNnY21WMGRYSnVJRzF2WkhWc1pWc25aR1ZtWVhWc2RDZGRPeUI5SURwY2JpQmNkRngwWEhSbWRXNWpkR2x2YmlCblpYUk5iMlIxYkdWRmVIQnZjblJ6S0NrZ2V5QnlaWFIxY200Z2JXOWtkV3hsT3lCOU8xeHVJRngwWEhSZlgzZGxZbkJoWTJ0ZmNtVnhkV2x5WlY5ZkxtUW9aMlYwZEdWeUxDQW5ZU2NzSUdkbGRIUmxjaWs3WEc0Z1hIUmNkSEpsZEhWeWJpQm5aWFIwWlhJN1hHNGdYSFI5TzF4dVhHNGdYSFF2THlCUFltcGxZM1F1Y0hKdmRHOTBlWEJsTG1oaGMwOTNibEJ5YjNCbGNuUjVMbU5oYkd4Y2JpQmNkRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMTh1YnlBOUlHWjFibU4wYVc5dUtHOWlhbVZqZEN3Z2NISnZjR1Z5ZEhrcElIc2djbVYwZFhKdUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaHZZbXBsWTNRc0lIQnliM0JsY25SNUtUc2dmVHRjYmx4dUlGeDBMeThnWDE5M1pXSndZV05yWDNCMVlteHBZMTl3WVhSb1gxOWNiaUJjZEY5ZmQyVmljR0ZqYTE5eVpYRjFhWEpsWDE4dWNDQTlJRndpWENJN1hHNWNiaUJjZEM4dklFeHZZV1FnWlc1MGNua2diVzlrZFd4bElHRnVaQ0J5WlhSMWNtNGdaWGh3YjNKMGMxeHVJRngwY21WMGRYSnVJRjlmZDJWaWNHRmphMTl5WlhGMWFYSmxYMThvWDE5M1pXSndZV05yWDNKbGNYVnBjbVZmWHk1eklEMGdNQ2s3WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdkMlZpY0dGamF5OWliMjkwYzNSeVlYQWdZakJrWmpnMU16Qmhaak01WkROaFlqWmtORFVpTENKY2JteGxkQ0J6YkdGamEwbHVabThnUFNCN1hHNGdJR05zYVdWdWRFbEVPaUFuTVRFMU16TTJNRE00TnpJdU56STBNelE1TXpRek5UWW5MRnh1SUNCamJHbGxiblJUWldOeVpYUTZJQ2RrTkRJM1pXWXpZemsxTjJRMk9HRXlPVEprWXpkak5HVXlNR0kzT0RNek1DY3NYRzRnSUhKbFpHbHlaV04wVlZKSk9pQnNiMk5oZEdsdmJpNXZjbWxuYVc0c1hHNGdJR052WkdWRmJtUndiMmx1ZERvZ0oyaDBkSEJ6T2k4dmMyeGhZMnN1WTI5dEwyOWhkWFJvTDJGMWRHaHZjbWw2WlQ4bkxGeHVJQ0IwYjJ0bGJrVnVaSEJ2YVc1ME9pQW5hSFIwY0hNNkx5OXpiR0ZqYXk1amIyMHZZWEJwTDI5aGRYUm9MbUZqWTJWemN6OG5MRnh1SUNCcGJtWnZSVzVrY0c5cGJuUTZJQ2RvZEhSd2N6b3ZMM05zWVdOckxtTnZiUzloY0drdmRYTmxjbk11YVc1bWJ6OG5MRnh1SUNCelkyOXdaVG9nSjJOc2FXVnVkQ2RjYm4wN1hHNWNiaTh2Wm5WdVkzUnBiMjRnZEc4Z2NHRnljMlVnZEdobElIRjFaWEo1SUhOMGNtbHVaeUJwYmlCMGFHVWdaMmwyWlc0Z1ZWSk1JSFJ2SUc5aVlYUnBiaUJqWlhKMFlXbHVJSFpoYkhWbGMxeHVablZ1WTNScGIyNGdkWEpzVUdGeWMyVnlLSFZ5YkN3Z2JtRnRaU2tnZTF4dUlDQnVZVzFsSUQwZ2JtRnRaUzV5WlhCc1lXTmxLQzliWEZ4YlhTOHNJQ2RjWEZ4Y1hGeGJKeWt1Y21Wd2JHRmpaU2d2VzF4Y1hWMHZMQ0FuWEZ4Y1hGeGNYU2NwTzF4dUlDQnNaWFFnY21WblpYaFRJRDBnSjF0Y1hGeGNJeVkvWFNjZ0t5QnVZVzFsSUNzZ0p6MG9XMTRtSTEwcUtTYzdYRzRnSUd4bGRDQnlaV2RsZUNBOUlHNWxkeUJTWldkRmVIQW9jbVZuWlhoVEtUdGNiaUFnYkdWMElISmxjM1ZzZEhNZ1BTQnlaV2RsZUM1bGVHVmpLSFZ5YkNrN1hHNGdJR2xtSUNoeVpYTjFiSFJ6SUQwOVBTQnVkV3hzS1Z4dUlDQnlaWFIxY200Z0p5YzdYRzRnSUdWc2MyVmNiaUFnY21WMGRYSnVJSEpsYzNWc2RITmJNVjA3WEc1OVhHNWNibVoxYm1OMGFXOXVJSE5sYm1SSVZGUlFVbVZ4ZFdWemRDaHRaWFJvYjJRc0lIVnliQ2tnZTF4dUlDQnNaWFFnZUdoeUlEMGdibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBLQ2s3WEc0Z0lHbG1JQ2duZDJsMGFFTnlaV1JsYm5ScFlXeHpKeUJwYmlCNGFISXBJSHRjYmlBZ0lDQjRhSEl1YjNCbGJpaHRaWFJvYjJRc0lIVnliQ3dnZEhKMVpTazdYRzRnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUZoRWIyMWhhVzVTWlhGMVpYTjBJQ0U5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0x5OGdUM1JvWlhKM2FYTmxMQ0JqYUdWamF5QnBaaUJZUkc5dFlXbHVVbVZ4ZFdWemRDNWNiaUFnSUNBdkx5QllSRzl0WVdsdVVtVnhkV1Z6ZENCdmJteDVJR1Y0YVhOMGN5QnBiaUJKUlN3Z1lXNWtJR2x6SUVsRkozTWdkMkY1SUc5bUlHMWhhMmx1WnlCRFQxSlRJSEpsY1hWbGMzUnpMbHh1SUNBZ0lIaG9jaUE5SUc1bGR5QllSRzl0WVdsdVVtVnhkV1Z6ZENncE8xeHVJQ0FnSUhob2NpNXZjR1Z1S0cxbGRHaHZaQ3dnZFhKc0tUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQXZMeUJQZEdobGNuZHBjMlVzSUVOUFVsTWdhWE1nYm05MElITjFjSEJ2Y25SbFpDQmllU0IwYUdVZ1luSnZkM05sY2k1Y2JpQWdJQ0I0YUhJZ1BTQnVkV3hzTzF4dUlDQjlYRzRnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4dUlDQWdJR2xtSUNoNGFISXBJSHRjYmlBZ0lDQWdJSGhvY2k1dmJuSmxZV1I1YzNSaGRHVmphR0Z1WjJVZ1BTQm1kVzVqZEdsdmJpaGxLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDRhSEl1Y21WaFpIbFRkR0YwWlNBOVBUMGdOQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2g0YUhJdWMzUmhkSFZ6SUQwOVBTQXlNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcGJtWnZJRDBnU2xOUFRpNXdZWEp6WlNoNGFISXVjbVZ6Y0c5dWMyVlVaWGgwS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9hVzVtYnlrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElHbG1JQ2g0YUhJdWMzUmhkSFZ6SUQwOVBTQTBNREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDZ25WR2hsY21VZ2QyRnpJR0Z1SUdWeWNtOXlJSEJ5YjJObGMzTnBibWNnZEdobElIUnZhMlZ1SnlrN1hHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2duYzI5dFpYUm9hVzVuSUdWc2MyVWdiM1JvWlhJZ2RHaGhiaUF5TURBZ2QyRnpJSEpsZEhWeWJtVmtKeWs3WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdlR2h5TG5ObGJtUW9LVHRjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2NtVnFaV04wS0NkRFQxSlRJRzV2ZENCemRYQndiM0owWldRbktUdGNiaUFnSUNCOVhHNGdJSDBwTzF4dWZWeHVYRzR2S2lwY2Jpb2dSblZ1WTNScGIyNGdkRzhnWlhoamFHRnVaMlVnZEdobElHTnZaR1VnY21WalpXbDJaV1FnZEc4Z2RHaGxJR2xrSUZSdmEyVnVMQ0JoWTJObGMzTWdkRzlyWlc0Z1lXNWtJR0VnY21WbWNtVnphQ0IwYjJ0bGJseHVLbHh1S2k5Y2JteGxkQ0JsZUdOb1lXNW5aVU52WkdVZ1BTQW9ablZ1WTNScGIyNG9ZMjlrWlNrZ2UxeHVYRzRnSUd4bGRDQnpJRDBnYzJ4aFkydEpibVp2TzF4dUlDQnNaWFFnVlZKTUlEMGdjeTUwYjJ0bGJrVnVaSEJ2YVc1MElDc2dKMk5zYVdWdWRGOXBaRDBuSUNzZ2N5NWpiR2xsYm5SSlJDQXJJQ2NtWTJ4cFpXNTBYM05sWTNKbGREMG5JQ3NnY3k1amJHbGxiblJUWldOeVpYUWdLeUFuSm1OdlpHVTlKeUFySUdOdlpHVWdLeUFuSm5KbFpHbHlaV04wWDNWeWFUMG5JQ3NnSUhNdWNtVmthWEpsWTNSVlVrazdYRzVjYmlBZ1kyOXVjMjlzWlM1c2IyY29KMVZTVENjc0lGVlNUQ2s3WEc1Y2JpQWdjbVYwZFhKdUlHNWxkeUJRY205dGFYTmxLR1oxYm1OMGFXOXVLSEpsYzI5c2RtVXNJSEpsYW1WamRDa2dlMXh1SUNBZ0lITmxibVJJVkZSUVVtVnhkV1Z6ZENnblIwVlVKeXdnVlZKTUtTNTBhR1Z1S0daMWJtTjBhVzl1S0dsdVptOHBJSHRjYmlBZ0lDQWdJSEpsYzI5c2RtVW9hVzVtYnlrN1hHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0b1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUhKbGFtVmpkQ2hsY25KdmNpazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ2ZTazdYRzU5S1R0Y2JseHVMeW9xWEc0cUlFbGtaVzUwYVhSNUlGQnliM1pwWkdWeUlGQnliM2g1WEc0cUwxeHViR1YwSUdsa2NDQTlJSHRjYmx4dUlDQXZLaXBjYmlBZ0tpQkdkVzVqZEdsdmJpQjBieUIyWVd4cFpHRjBaU0JoYmlCcFpHVnVkR2wwZVNCQmMzTmxjblJwYjI0Z2NtVmpaV2wyWldSY2JpQWdLaUJVVDBSUElHRmtaQ0JrWlhSaGFXeHpJRzltSUhSb1pTQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z1lXNWtJR2x0Y0hKdmRtVWdkR2hsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVYRzRnSUNwY2JpQWdLaUJBY0dGeVlXMGdJSHRoYzNObGNuUnBiMjU5SUNBZ0lFbGtaVzUwYVhSNUlFRnpjMlZ5ZEdsdmJpQjBieUJpWlNCMllXeHBaR0YwWldSY2JpQWdLaUJBY0dGeVlXMGdJSHR2Y21sbmFXNTlJQ0FnSUNBZ0lFOXlhV2RwYmlCd1lYSmhiV1YwWlhJZ2RHaGhkQ0JwWkdWdWRHbG1hV1Z6SUhSb1pTQnZjbWxuYVc0Z2IyWWdkR2hsSUZKVVExQmxaWEpEYjI1dVpXTjBhVzl1WEc0Z0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdJQ0FnSUNCU1pYUjFjbTV6SUdFZ2NISnZiV2x6WlNCM2FYUm9JSFJvWlNCcFpHVnVkR2wwZVNCaGMzTmxjblJwYjI0Z2RtRnNhV1JoZEdsdmJpQnlaWE4xYkhSY2JpQWdLaTljYmlBZ2RtRnNhV1JoZEdWQmMzTmxjblJwYjI0NklDaGhjM05sY25ScGIyNHNJRzl5YVdkcGJpa2dQVDRnZTF4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMSEpsYW1WamRDa2dlMXh1WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnbllYTnpaWEowYVc5dUlDMGdQaWNzSUdGemMyVnlkR2x2YmlrN1hHNGdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25iM0pwWjJsdUlDMGdQaWNzSUc5eWFXZHBiaWs3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblRWbFFVazlZV1NBdElGWkJURWxFUVZSSlRrY25LVHRjYmlBZ0lDQWdJSEpsYzI5c2RtVW9lMmxrWlc1MGFYUjVPaUFuYVdSbGJuUnBkSGxBYVdSd0xtTnZiU2NzSUdOdmJuUmxiblJ6T2lBblkyOXVkR1Z1ZENkOUtUdGNibHh1SUNBZ0lIMHBPMXh1SUNCOUxGeHVYRzRnSUM4cUtseHVJQ0FxSUVaMWJtTjBhVzl1SUhSdklHZGxibVZ5WVhSbElHRnVJR2xrWlc1MGFYUjVJRUZ6YzJWeWRHbHZibHh1SUNBcUlGUlBSRThnWVdSa0lHUmxkR0ZwYkhNZ2IyWWdkR2hsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVMQ0JoYm1RZ2FXMXdjbTkyWlNCcGJYQnNaVzFsYm5SaGRHbHZibHh1SUNBcVhHNGdJQ29nUUhCaGNtRnRJQ0I3WTI5dWRHVnVkSE45SUZSb1pTQmpiMjUwWlc1MGN5QnBibU5zZFdSbGN5QnBibVp2Y20xaGRHbHZiaUJoWW05MWRDQjBhR1VnYVdSbGJuUnBkSGtnY21WalpXbDJaV1JjYmlBZ0tpQkFjR0Z5WVcwZ0lIdHZjbWxuYVc1OUlFOXlhV2RwYmlCd1lYSmhiV1YwWlhJZ2RHaGhkQ0JwWkdWdWRHbG1hV1Z6SUhSb1pTQnZjbWxuYVc0Z2IyWWdkR2hsSUZKVVExQmxaWEpEYjI1dVpXTjBhVzl1WEc0Z0lDb2dRSEJoY21GdElDQjdkWE5sY201aGJXVklhVzUwZlNCdmNIUnBiMjVoYkNCMWMyVnlibUZ0WlVocGJuUWdjR0Z5WVcxbGRHVnlYRzRnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ2NtVjBkWEp1Y3lCaElIQnliMjFwYzJVZ2QybDBhQ0JoYmlCcFpHVnVkR2wwZVNCaGMzTmxjblJwYjI1Y2JpQWdLaTljYmlBZ1oyVnVaWEpoZEdWQmMzTmxjblJwYjI0NklDaGpiMjUwWlc1MGN5d2diM0pwWjJsdUxDQm9hVzUwS1NBOVBpQjdYRzVjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduWTI5dWRHVnVkSE10UGljc0lHTnZiblJsYm5SektUdGNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25iM0pwWjJsdUxUNG5MQ0J2Y21sbmFXNHBPMXh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RvYVc1MExUNG5MQ0JvYVc1MEtUdGNibHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpaHlaWE52YkhabExDQnlaV3BsWTNRcElIdGNibHh1SUNBZ0lDQWdMeTkwYUdVZ2FHbHVkQ0JtYVdWc1pDQmpiMjUwWVdsdWN5QjBhR1VnYVc1bWIzSnRZWFJwYjI0Z2IySjBZV2x1WldRZ1lXWjBaWElnZEdobElIVnpaWElnWVhWMGFHVnVkR2xqWVhScGIyNWNiaUFnSUNBZ0lDOHZJR2xtSUhSb1pTQm9hVzUwSUdOdmJuUmxiblFnYVhNZ2JtOTBJSEJ5WlhObGJuUXNJSFJvWlc0Z2NtVnFaV04wY3lCMGFHVWdkbUZzZFdVZ2QybDBhQ0IwYUdVZ1ZWSk1JSFJ2SUc5d1pXNGdkR2hsSUhCaFoyVWdkRzhnWVhWMGFHVnVkR2xqWVhSbElIUm9aU0IxYzJWeVhHNGdJQ0FnSUNCc1pYUWdjeUE5SUhOc1lXTnJTVzVtYnp0Y2JpQWdJQ0FnSUdsbUlDZ2hhR2x1ZENrZ2UxeHVJQ0FnSUNBZ0lDQXZMMnhsZENCeVpYRjFaWE4wVlhKc0lEMGdhSFIwY0hNNkx5OXpiR0ZqYXk1amIyMHZiMkYxZEdndllYVjBhRzl5YVhwbFAyTnNhV1Z1ZEY5cFpEMHhNVFV6TXpZd016ZzNNaTQzTWpRek5Ea3pORE0xTmlaelkyOXdaVDFqYUdGME9uZHlhWFJsT25WelpYSW1jbVZrYVhKbFkzUmZkWEpwUFdoMGRIQnpPaTh2ZDNkM0xtZGxkSEJ2YzNSdFlXNHVZMjl0TDI5aGRYUm9NaTlqWVd4c1ltRmphenRjYmx4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ4ZFdWemRGVnliQ0E5SUhNdVkyOWtaVVZ1WkhCdmFXNTBJQ3NnSjJOc2FXVnVkRjlwWkQwbklDc2djeTVqYkdsbGJuUkpSQ0FySUNjbWMyTnZjR1U5SnlBcklITXVjMk52Y0dVZ0t5QW5KbkpsWkdseVpXTjBYM1Z5YVQwbklDc2dJSE11Y21Wa2FYSmxZM1JWVWtrN1hHNWNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJacGNuTjBJSFZ5YkNBbkxDQnlaWEYxWlhOMFZYSnNMQ0FuWkc5dVpTY3BPMXh1SUNBZ0lDQWdJQ0J5WldwbFkzUW9lMjVoYldVNklDZEpaRkJNYjJkcGJrVnljbTl5Snl3Z2JHOW5hVzVWY213NklISmxjWFZsYzNSVmNteDlLVHRjYmx4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHTnZaR1VnUFNCMWNteFFZWEp6WlhJb2FHbHVkQ3dnSjJOdlpHVW5LVHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oyTnZaR1VuTENCamIyUmxLVHRjYmlBZ0lDQWdJQ0FnWlhoamFHRnVaMlZEYjJSbEtHTnZaR1VwTG5Sb1pXNG9ablZ1WTNScGIyNG9kbUZzZFdVcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZDJZV3gxWlNCQlJsUkZVaUJsZUdOb1lXNW5aVU52WkdVbkxDQjJZV3gxWlNrN1hHNWNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2FXNW1iMVZ5YkNBOUlITXVhVzVtYjBWdVpIQnZhVzUwSUNzZ0ozUnZhMlZ1UFNjZ0t5QjJZV3gxWlM1aFkyTmxjM05mZEc5clpXNGdLeUFuSm5WelpYSTlKeUFySUhaaGJIVmxMblZ6WlhKZmFXUTdYRzVjYmlBZ0lDQWdJQ0FnSUNCelpXNWtTRlJVVUZKbGNYVmxjM1FvSjBkRlZDY3NJR2x1Wm05VmNtd3BMblJvWlc0b1puVnVZM1JwYjI0b2FXNW1ieWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXNiMmNvSjJsdVptOHRQaWNzSUdsdVptOHBPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY0hKdlptbHNaU0E5SUdsdVptOHVkWE5sY2k1d2NtOW1hV3hsTzF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsdVptOVViMnRsYmlBOUlIdHdhV04wZFhKbE9pQndjbTltYVd4bExtbHRZV2RsWDI5eWFXZHBibUZzTENCbGJXRnBiRG9nY0hKdlptbHNaUzVsYldGcGJDd2dabUZ0YVd4NVgyNWhiV1U2SUhCeWIyWnBiR1V1YkdGemRGOXVZVzFsTENCbmFYWmxibDl1WVcxbE9pQndjbTltYVd4bExtWnBjbk4wWDI1aGJXVXNJR2xrT2lCcGJtWnZMblZ6WlhJdWFXUWdmVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdGemMyVnlkR2x2YmlBOUlHSjBiMkVvU2xOUFRpNXpkSEpwYm1kcFpua29lM1J2YTJWdVNVUTZJSFpoYkhWbExtRmpZMlZ6YzE5MGIydGxiaXdnWlcxaGFXdzZJSEJ5YjJacGJHVXVaVzFoYVd3c0lHbGtPaUJwYm1adkxuVnpaWEl1YVdSOUtTazdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0IwYjFKbGMyOXNkbVVnUFNCN1lYTnpaWEowYVc5dU9pQmhjM05sY25ScGIyNHNJR2xrY0RvZ2UyUnZiV0ZwYmpvZ0ozTnNZV05yTG1OdmJTY3NJSEJ5YjNSdlkyOXNPaUFuVDBGMWRHZ2dNaTR3SjMwc0lHbHVabTlVYjJ0bGJqb2dhVzVtYjFSdmEyVnVMQ0JwYm5SbGNuZHZjbXRwYm1jNklIdGhZMk5sYzNOZmRHOXJaVzQ2SUhaaGJIVmxMbUZqWTJWemMxOTBiMnRsYml3Z1pHOXRZV2x1T2lBbmMyeGhZMnN1WTI5dEp5QjlMQ0JwYm1adklEb2dlMlY0Y0dseVpYTTZJRE14TlRNMk1EQXdNREI5ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkU1JWTlBURlpKVGtjZ1ZFaEpVeUJQUWtwRlExUW5MQ0IwYjFKbGMyOXNkbVVwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaDBiMUpsYzI5c2RtVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwc0lHWjFibU4wYVc5dUtHVnljbTl5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblpYSnliM0l0UGljc0lHVnljbTl5S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlLVHRjYmx4dUlDQWdJQ0FnSUNCOUtUdGNibHh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNCOVhHNTlPMXh1WEc0dktpcGNiaW9nU1dSbGJuUnBkSGtnVUhKdmRtbGtaWElnVUhKdmVIa2dVSEp2ZEc5amIyd2dVM1IxWWx4dUtpOWNibU5zWVhOeklGTnNZV05yVUhKdmVIbFRkSFZpSUh0Y2JseHVJQ0F2S2lwY2JpQWdLaUJEYjI1emRISjFZM1J2Y2lCdlppQjBhR1VnU1dSd1VISnZlSGtnVTNSMVlseHVJQ0FxSUZSb1pTQmpiMjV6ZEhKMVkzUnZjaUJoWkdRZ1lTQnNhWE4wWlc1bGNpQnBiaUIwYUdVZ2JXVnpjMkZuWlVKMWN5QnlaV05sYVhabFpDQmhibVFnYzNSaGNuUWdZU0IzWldJZ2QyOXlhMlZ5SUhkcGRHZ2dkR2hsSUhKbFkyVnBkbVZrSUdsa2NGQnliM2g1WEc0Z0lDcGNiaUFnS2lCQWNHRnlZVzBnSUh0VlVrd3VVblZ1ZEdsdFpWVlNUSDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENCeWRXNTBhVzFsVUhKdmRHOVRkV0pWVWt4Y2JpQWdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxMazFsYzNOaFoyVjlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZblZ6VUc5emRFMWxjM05oWjJVZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2JpQWdLaUJBY0dGeVlXMGdJSHRRY205MGIxTjBkV0pFWlhOamNtbHdkRzl5TGtOdmJtWnBaM1Z5WVhScGIyNUVZWFJoVEdsemRIMGdZMjl1Wm1sbmRYSmhkR2x2YmlBZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2JpQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSW9jblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ3dnWW5WekxDQmpiMjVtYVdjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJRjkwYUdsekxuSjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd2dQU0J5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNTzF4dUlDQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTWdQU0JpZFhNN1hHNGdJQ0FnWDNSb2FYTXVZMjl1Wm1sbklEMGdZMjl1Wm1sbk8xeHVYRzRnSUNBZ1gzUm9hWE11YldWemMyRm5aVUoxY3k1aFpHUk1hWE4wWlc1bGNpZ25LaWNzSUdaMWJtTjBhVzl1S0cxelp5a2dlMXh1SUNBZ0lDQWdMeTlVVDBSUElHRmtaQ0IwYUdVZ2NtVnpjR1ZqZEdsMlpTQnNhWE4wWlc1bGNseHVJQ0FnSUNBZ2FXWWdLRzF6Wnk1MGJ5QTlQVDBnSjJSdmJXRnBiaTFwWkhBNkx5OXpiR0ZqYXk1amIyMG5LU0I3WEc0Z0lDQWdJQ0FnSUY5MGFHbHpMbkpsY1hWbGMzUlViMGxrY0NodGMyY3BPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBPMXh1SUNBZ0lGOTBhR2x6TGw5elpXNWtVM1JoZEhWektDZGpjbVZoZEdWa0p5azdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJHZFc1amRHbHZiaUIwYUdGMElITmxaU0IwYUdVZ2FXNTBaVzVrWldRZ2JXVjBhRzlrSUdsdUlIUm9aU0J0WlhOellXZGxJSEpsWTJWcGRtVmtJR0Z1WkNCallXeHNJSFJvWlNCeVpYTndaV04wYVhabElHWjFibU4wYVc5dVhHNGdJQ3BjYmlBZ0tpQkFjR0Z5WVcwZ2UyMWxjM05oWjJWOUlDQnRaWE56WVdkbElISmxZMlZwZG1Wa0lHbHVJSFJvWlNCdFpYTnpZV2RsUW5WelhHNGdJQ292WEc0Z0lISmxjWFZsYzNSVWIwbGtjQ2h0YzJjcElIdGNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJR3hsZENCd1lYSmhiWE1nUFNCdGMyY3VZbTlrZVM1d1lYSmhiWE03WEc1Y2JpQWdJQ0J6ZDJsMFkyZ2dLRzF6Wnk1aWIyUjVMbTFsZEdodlpDa2dlMXh1SUNBZ0lDQWdZMkZ6WlNBbloyVnVaWEpoZEdWQmMzTmxjblJwYjI0bk9seHVJQ0FnSUNBZ0lDQnBaSEF1WjJWdVpYSmhkR1ZCYzNObGNuUnBiMjRvY0dGeVlXMXpMbU52Ym5SbGJuUnpMQ0J3WVhKaGJYTXViM0pwWjJsdUxDQndZWEpoYlhNdWRYTmxjbTVoYldWSWFXNTBLUzUwYUdWdUtGeHVJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdJRjkwYUdsekxuSmxjR3g1VFdWemMyRm5aU2h0YzJjc0lIWmhiSFZsS1R0OUxGeHVYRzRnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRvWlhKeWIzSXBJSHNnWDNSb2FYTXVjbVZ3YkhsTlpYTnpZV2RsS0cxelp5d2daWEp5YjNJcE8zMWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUNkMllXeHBaR0YwWlVGemMyVnlkR2x2YmljNlhHNGdJQ0FnSUNBZ0lHbGtjQzUyWVd4cFpHRjBaVUZ6YzJWeWRHbHZiaWh3WVhKaGJYTXVZWE56WlhKMGFXOXVMQ0J3WVhKaGJYTXViM0pwWjJsdUtTNTBhR1Z1S0Z4dUlDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUtIWmhiSFZsS1NCN0lGOTBhR2x6TG5KbGNHeDVUV1Z6YzJGblpTaHRjMmNzSUhaaGJIVmxLVHQ5TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNG9aWEp5YjNJcElIc2dYM1JvYVhNdWNtVndiSGxOWlhOellXZGxLRzF6Wnl3Z1pYSnliM0lwTzMxY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdLaUJVYUdseklHWjFibU4wYVc5dUlISmxZMlZwZG1WeklHRWdiV1Z6YzJGblpTQmhibVFnWVNCMllXeDFaUzRnU1hRZ2NtVndiR2xsY3lCMGFHVWdkbUZzZFdVZ2RHOGdkR2hsSUhObGJtUmxjaUJ2WmlCMGFHVWdiV1Z6YzJGblpTQnlaV05sYVhabFpGeHVJQ0FxWEc0Z0lDb2dRSEJoY21GdElDQjdiV1Z6YzJGblpYMGdJQ0J0WlhOellXZGxJSEpsWTJWcGRtVmtYRzRnSUNvZ1FIQmhjbUZ0SUNCN2RtRnNkV1Y5SUNBZ0lDQjJZV3gxWlNCMGJ5QnBibU5zZFdSbElHbHVJSFJvWlNCdVpYY2diV1Z6YzJGblpTQjBieUJ6Wlc1a1hHNGdJQ292WEc0Z0lISmxjR3g1VFdWemMyRm5aU2h0YzJjc0lIWmhiSFZsS1NCN1hHNGdJQ0FnYkdWMElGOTBhR2x6SUQwZ2RHaHBjenRjYmx4dUlDQWdJR3hsZENCdFpYTnpZV2RsSUQwZ2UybGtPaUJ0YzJjdWFXUXNJSFI1Y0dVNklDZHlaWE53YjI1elpTY3NJSFJ2T2lCdGMyY3Vabkp2YlN3Z1puSnZiVG9nYlhObkxuUnZMQ0JpYjJSNU9pQjdZMjlrWlRvZ01qQXdMQ0IyWVd4MVpUb2dkbUZzZFdWOWZUdGNibHh1SUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iV1Z6YzJGblpTazdYRzRnSUgxY2JseHVJQ0JmYzJWdVpGTjBZWFIxY3loMllXeDFaU3dnY21WaGMyOXVLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiVTJ4aFkyc2dTV1J3SUZCeWIzaDVJSE4wWVhSMWN5QmphR0Z1WjJWa1hTQjBieUFuTENCMllXeDFaU2s3WEc1Y2JpQWdJQ0JmZEdocGN5NWZjM1JoZEdVZ1BTQjJZV3gxWlR0Y2JseHVJQ0FnSUd4bGRDQnRjMmNnUFNCN1hHNGdJQ0FnSUNCMGVYQmxPaUFuZFhCa1lYUmxKeXhjYmlBZ0lDQWdJR1p5YjIwNklGOTBhR2x6TG5KMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3c1hHNGdJQ0FnSUNCMGJ6b2dYM1JvYVhNdWNuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDQXJJQ2N2YzNSaGRIVnpKeXhjYmlBZ0lDQWdJR0p2WkhrNklIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVNklIWmhiSFZsWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVHRjYmx4dUlDQWdJR2xtSUNoeVpXRnpiMjRwSUh0Y2JpQWdJQ0FnSUcxelp5NWliMlI1TG1SbGMyTWdQU0J5WldGemIyNDdYRzRnSUNBZ2ZWeHVYRzRnSUNBZ1gzUm9hWE11YldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRjMmNwTzF4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1ZHOGdZV04wYVhaaGRHVWdkR2hwY3lCd2NtOTBiMk52YkNCemRIVmlMQ0IxYzJsdVp5QjBhR1VnYzJGdFpTQnRaWFJvYjJRZ1ptOXlJR0ZzYkNCd2NtOTBiM04wZFdJdVhHNGdLaUJBY0dGeVlXMGdJSHRWVWt3dVVuVnVkR2x0WlZWU1RIMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRXSlZVa3hjYmlBcUlFQndZWEpoYlNBZ2UwMWxjM05oWjJVdVRXVnpjMkZuWlgwZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaWRYTlFiM04wVFdWemMyRm5aU0FnSUNBZ1kyOXVabWxuZFhKaGRHbHZibHh1SUNvZ1FIQmhjbUZ0SUNCN1VISnZkRzlUZEhWaVJHVnpZM0pwY0hSdmNpNURiMjVtYVdkMWNtRjBhVzl1UkdGMFlVeHBjM1I5SUdOdmJtWnBaM1Z5WVhScGIyNGdJQ0FnSUNCamIyNW1hV2QxY21GMGFXOXVYRzRnS2lCQWNtVjBkWEp1SUh0UFltcGxZM1I5SUU5aWFtVmpkQ0IzYVhSb0lHNWhiV1VnWVc1a0lHbHVjM1JoYm1ObElHOW1JRkJ5YjNSdlUzUjFZbHh1SUNvdlhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCaFkzUnBkbUYwWlNoMWNtd3NJR0oxY3l3Z1kyOXVabWxuS1NCN1hHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2JtRnRaVG9nSjFOc1lXTnJVSEp2ZUhsVGRIVmlKeXhjYmlBZ0lDQnBibk4wWVc1alpUb2dibVYzSUZOc1lXTnJVSEp2ZUhsVGRIVmlLSFZ5YkN3Z1luVnpMQ0JqYjI1bWFXY3BYRzRnSUgwN1hHNTlYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z0xpNHZaR1YyTFhCeWIzUnZjM1IxWW5NdmMzSmpMMmxrY0hCeWIzaDVMM05zWVdOckwxTnNZV05yVUhKdmVIbFRkSFZpTG1sa2NDNXFjeUpkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "version": "13.70",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MicrosoftProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "MicrosoftProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-a23b7159-3d89-f5a6-a8d9-3aab90077d433",
    "version": 1.3,
    "description": "Description of MicrosoftProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": false,
    "objectName": "microsoft.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "OrangeProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "OrangeProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-a23b7159-3d89-f5a6-a8d9-3aab90077d434",
    "version": 0.2,
    "description": "Description of OrangeProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": false,
    "objectName": "orange.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "NodejsProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "cguid": "5-a23b7159-3d89-f5a6-a8d9-3aab90077d435",
    "version": 0.2,
    "description": "Description of NodejsProxyStub",
    "language": "Javascript",
    "type": "IDPProxys",
    "constraints": {
      "browser": true
    },
    "interworking": false,
    "objectName": "node.google.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}