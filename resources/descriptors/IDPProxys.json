{
  "FacebookIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHsKcmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXAKLyoqKioqKi8gCS8vIFRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307Ci8qKioqKiovCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewovKioqKioqLwovKioqKioqLyAJCS8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZQovKioqKioqLyAJCWlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7Ci8qKioqKiovIAkJCXJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHsKLyoqKioqKi8gCQkJaTogbW9kdWxlSWQsCi8qKioqKiovIAkJCWw6IGZhbHNlLAovKioqKioqLyAJCQlleHBvcnRzOiB7fQovKioqKioqLyAJCX07Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZAovKioqKioqLyAJCW1vZHVsZS5sID0gdHJ1ZTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLyAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCX0KLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikgewovKioqKioqLyAJCWlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHsKLyoqKioqKi8gCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsKLyoqKioqKi8gCQkJCWNvbmZpZ3VyYWJsZTogZmFsc2UsCi8qKioqKiovIAkJCQllbnVtZXJhYmxlOiB0cnVlLAovKioqKioqLyAJCQkJZ2V0OiBnZXR0ZXIKLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJfQovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHsKLyoqKioqKi8gCQl2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8KLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDoKLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7Ci8qKioqKiovIAkJcmV0dXJuIGdldHRlcjsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKLyoqKioqKi8KLyoqKioqKi8gCS8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7Ci8qKioqKiovIH0pCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIChbCi8qIDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwpldmFsKCJcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFjdGl2YXRlO1xuXG52YXIgX09BVVRIID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9GYWNlYm9vayA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfQWJzdHJhY3RJZHBQcm94eVN0dWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX0Fic3RyYWN0SWRwUHJveHlTdHViMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Fic3RyYWN0SWRwUHJveHlTdHViKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuLy9pbXBvcnQge2ZhY2Vib29rSW5mb30gZnJvbSBcIi4vRmFjZWJvb2tJbmZvXCJcblxuXG4vKipcbiogR29vZ2xlIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiovXG52YXIgRmFjZWJvb2tJZHBQcm94eVByb3RvU3R1YiA9IGZ1bmN0aW9uIChfQWJzdHJhY3RJZHBQcm94eVByb3QpIHtcbiAgX2luaGVyaXRzKEZhY2Vib29rSWRwUHJveHlQcm90b1N0dWIsIF9BYnN0cmFjdElkcFByb3h5UHJvdCk7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gIGZ1bmN0aW9uIEZhY2Vib29rSWRwUHJveHlQcm90b1N0dWIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmFjZWJvb2tJZHBQcm94eVByb3RvU3R1Yik7XG5cbiAgICBjb25maWcuaWRwVXJsID0gJ2RvbWFpbi1pZHA6Ly9mYWNlYm9vay5jb20nO1xuICAgIGNvbmZpZy5kb21haW4gPSAnZmFjZWJvb2suY29tJztcbiAgICBjb25maWcuaWRwUHJveHkgPSBfT0FVVEguSWRwUHJveHk7XG4gICAgLy8gICAgIGNvbmZpZy5pZHBJbmZvID0gZmFjZWJvb2tJbmZvO1xuICAgIGNvbmZpZy5jb252ZXJ0VXNlclByb2ZpbGUgPSBfRmFjZWJvb2suY29udmVydFVzZXJQcm9maWxlO1xuICAgIGNvbmZpZy51c2VySW5mb0VuZHBvaW50ID0gX0ZhY2Vib29rLnVzZXJJbmZvRW5kcG9pbnQ7XG4gICAgY29uZmlnLmF1dGhvcmlzYXRpb25FbmRwb2ludCA9IF9GYWNlYm9vay5hdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG4gICAgY29uZmlnLnZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQgPSBfRmFjZWJvb2sudmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludDtcbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEZhY2Vib29rSWRwUHJveHlQcm90b1N0dWIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihGYWNlYm9va0lkcFByb3h5UHJvdG9TdHViKSkuY2FsbCh0aGlzLCBydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykpO1xuICB9XG5cbiAgcmV0dXJuIEZhY2Vib29rSWRwUHJveHlQcm90b1N0dWI7XG59KF9BYnN0cmFjdElkcFByb3h5U3R1YjIuZGVmYXVsdCk7XG5cbi8vIGV4cG9ydCBkZWZhdWx0IElkcFByb3h5UHJvdG9TdHViO1xuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuXG5cbmZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnRmFjZWJvb2tJZHBQcm94eVByb3RvU3R1YicsXG4gICAgaW5zdGFuY2U6IG5ldyBGYWNlYm9va0lkcFByb3h5UHJvdG9TdHViKHVybCwgYnVzLCBjb25maWcpXG4gIH07XG59Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpNHZaR1YyTFhCeWIzUnZjM1IxWW5NdmMzSmpMMmxrY0hCeWIzaDVMMlpoWTJWaWIyOXJMMFpoWTJWaWIyOXJTV1J3VUhKdmVIbFRkSFZpTG1sa2NDNXFjejlpTjJJNUlsMHNJbTVoYldWeklqcGJJbUZqZEdsMllYUmxJaXdpUm1GalpXSnZiMnRKWkhCUWNtOTRlVkJ5YjNSdlUzUjFZaUlzSW5KMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3aUxDSmlkWE1pTENKamIyNW1hV2NpTENKcFpIQlZjbXdpTENKa2IyMWhhVzRpTENKcFpIQlFjbTk0ZVNJc0ltTnZiblpsY25SVmMyVnlVSEp2Wm1sc1pTSXNJblZ6WlhKSmJtWnZSVzVrY0c5cGJuUWlMQ0poZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5RaUxDSjJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJrVnVaSEJ2YVc1MElpd2lkWEpzSWl3aWJtRnRaU0lzSW1sdWMzUmhibU5sSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0clFrRjVRM2RDUVN4Uk96dEJRWHBEZUVJN08wRkJSVUU3TzBGQlJVRTdPenM3T3pzN096czdPMEZCU0VFN096dEJRVXRCT3pzN1NVRkhUVU1zZVVJN096dEJRVVZLT3pzN096czdPenRCUVZGQkxIRkRRVUZaUXl4dFFrRkJXaXhGUVVGcFEwTXNSMEZCYWtNc1JVRkJjME5ETEUxQlFYUkRMRVZCUVRoRE8wRkJRVUU3TzBGQlF6VkRRU3hYUVVGUFF5eE5RVUZRTEVkQlFXZENMREpDUVVGb1FqdEJRVU5CUkN4WFFVRlBSU3hOUVVGUUxFZEJRV2RDTEdOQlFXaENPMEZCUTBGR0xGZEJRVTlITEZGQlFWQTdRVUZEUVR0QlFVTkJTQ3hYUVVGUFNTeHJRa0ZCVUR0QlFVTkJTaXhYUVVGUFN5eG5Ra0ZCVUR0QlFVTkJUQ3hYUVVGUFRTeHhRa0ZCVUR0QlFVTkJUaXhYUVVGUFR5eDVRa0ZCVUR0QlFWSTBReXhwU2tGVGRFTlVMRzFDUVZSelF5eEZRVk5xUWtNc1IwRlVhVUlzUlVGVFdrTXNUVUZVV1R0QlFWVTNRenM3T3pzN1FVRkhTRHM3UVVGRlFUczdPenM3T3pzN08wRkJUMlVzVTBGQlUwb3NVVUZCVkN4RFFVRnJRbGtzUjBGQmJFSXNSVUZCZFVKVUxFZEJRWFpDTEVWQlFUUkNReXhOUVVFMVFpeEZRVUZ2UXp0QlFVTnFSQ3hUUVVGUE8wRkJRMHhUTEZWQlFVMHNNa0pCUkVRN1FVRkZURU1zWTBGQlZTeEpRVUZKWWl4NVFrRkJTaXhEUVVFNFFsY3NSMEZCT1VJc1JVRkJiVU5VTEVkQlFXNURMRVZCUVhkRFF5eE5RVUY0UXp0QlFVWk1MRWRCUVZBN1FVRkpSQ0lzSW1acGJHVWlPaUl3TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dTV1J3VUhKdmVIa2dmU0JtY205dElGd2lMaTR2VDBGVlZFaGNJbHh1THk5cGJYQnZjblFnZTJaaFkyVmliMjlyU1c1bWIzMGdabkp2YlNCY0lpNHZSbUZqWldKdmIydEpibVp2WENKY2JtbHRjRzl5ZENCN0lHTnZiblpsY25SVmMyVnlVSEp2Wm1sc1pTd2dkWE5sY2tsdVptOUZibVJ3YjJsdWRDeGNiaUFnSUdGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRDd2dkbUZzYVdSaGRHVkJjM05sY25ScGIyNUZibVJ3YjJsdWRDQjlJR1p5YjIwZ1hDSXVMMFpoWTJWaWIyOXJYQ0pjYm1sdGNHOXlkQ0JCWW5OMGNtRmpkRWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlJR1p5YjIwZ1hDSXVMaTlCWW5OMGNtRmpkRWxrY0ZCeWIzaDVVM1IxWWx3aVhHNWNiaThxS2x4dUtpQkhiMjluYkdVZ1NXUmxiblJwZEhrZ1VISnZkbWxrWlhJZ1VISnZlSGtnVUhKdmRHOWpiMndnVTNSMVlseHVLaTljYm1Oc1lYTnpJRVpoWTJWaWIyOXJTV1J3VUhKdmVIbFFjbTkwYjFOMGRXSWdaWGgwWlc1a2N5QkJZbk4wY21GamRFbGtjRkJ5YjNoNVVISnZkRzlUZEhWaUlIdGNibHh1SUNBdktpcGNiaUFnS2lCRGIyNXpkSEoxWTNSdmNpQnZaaUIwYUdVZ1NXUndVSEp2ZUhrZ1UzUjFZbHh1SUNBcUlGUm9aU0JqYjI1emRISjFZM1J2Y2lCaFpHUWdZU0JzYVhOMFpXNWxjaUJwYmlCMGFHVWdiV1Z6YzJGblpVSjFjeUJ5WldObGFYWmxaQ0JoYm1RZ2MzUmhjblFnWVNCM1pXSWdkMjl5YTJWeUlIZHBkR2dnZEdobElHbGtjRkJ5YjNoNUlISmxZMlZwZG1Wa1hHNGdJQ3BjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFZVa3d1VW5WdWRHbHRaVlZTVEgwZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDQnlkVzUwYVcxbFVISnZkRzlUZFdKVlVreGNiaUFnS2lCQWNHRnlZVzBnSUh0TlpYTnpZV2RsTGsxbGMzTmhaMlY5SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WelVHOXpkRTFsYzNOaFoyVWdJQ0FnSUdOdmJtWnBaM1Z5WVhScGIyNWNiaUFnS2lCQWNHRnlZVzBnSUh0UWNtOTBiMU4wZFdKRVpYTmpjbWx3ZEc5eUxrTnZibVpwWjNWeVlYUnBiMjVFWVhSaFRHbHpkSDBnWTI5dVptbG5kWEpoZEdsdmJpQWdJQ0FnSUdOdmJtWnBaM1Z5WVhScGIyNWNiaUFnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lvY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVEN3Z1luVnpMQ0JqYjI1bWFXY3BJSHRjYmlBZ0lDQmpiMjVtYVdjdWFXUndWWEpzSUQwZ0oyUnZiV0ZwYmkxcFpIQTZMeTltWVdObFltOXZheTVqYjIwbk8xeHVJQ0FnSUdOdmJtWnBaeTVrYjIxaGFXNGdQU0FuWm1GalpXSnZiMnN1WTI5dEp6dGNiaUFnSUNCamIyNW1hV2N1YVdSd1VISnZlSGtnUFNCSlpIQlFjbTk0ZVR0Y2JpQWdJQ0F2THlBZ0lDQWdZMjl1Wm1sbkxtbGtjRWx1Wm04Z1BTQm1ZV05sWW05dmEwbHVabTg3WEc0Z0lDQWdZMjl1Wm1sbkxtTnZiblpsY25SVmMyVnlVSEp2Wm1sc1pTQTlJR052Ym5abGNuUlZjMlZ5VUhKdlptbHNaVHRjYmlBZ0lDQmpiMjVtYVdjdWRYTmxja2x1Wm05RmJtUndiMmx1ZENBOUlIVnpaWEpKYm1adlJXNWtjRzlwYm5RN1hHNGdJQ0FnWTI5dVptbG5MbUYxZEdodmNtbHpZWFJwYjI1RmJtUndiMmx1ZENBOUlHRjFkR2h2Y21sellYUnBiMjVGYm1Sd2IybHVkRHRjYmlBZ0lDQmpiMjVtYVdjdWRtRnNhV1JoZEdWQmMzTmxjblJwYjI1RmJtUndiMmx1ZENBOUlIWmhiR2xrWVhSbFFYTnpaWEowYVc5dVJXNWtjRzlwYm5RN1hHNGdJQ0FnYzNWd1pYSW9jblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ3dnWW5WekxDQmpiMjVtYVdjcE8xeHVJQ0I5WEc1OVhHNWNiaTh2SUdWNGNHOXlkQ0JrWldaaGRXeDBJRWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlPMXh1WEc0dktpcGNiaUFxSUZSdklHRmpkR2wyWVhSbElIUm9hWE1nY0hKdmRHOWpiMndnYzNSMVlpd2dkWE5wYm1jZ2RHaGxJSE5oYldVZ2JXVjBhRzlrSUdadmNpQmhiR3dnY0hKdmRHOXpkSFZpTGx4dUlDb2dRSEJoY21GdElDQjdWVkpNTGxKMWJuUnBiV1ZWVWt4OUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd2djblZ1ZEdsdFpWQnliM1J2VTNWaVZWSk1YRzRnS2lCQWNHRnlZVzBnSUh0TlpYTnpZV2RsTGsxbGMzTmhaMlY5SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WelVHOXpkRTFsYzNOaFoyVWdJQ0FnSUdOdmJtWnBaM1Z5WVhScGIyNWNiaUFxSUVCd1lYSmhiU0FnZTFCeWIzUnZVM1IxWWtSbGMyTnlhWEIwYjNJdVEyOXVabWxuZFhKaGRHbHZia1JoZEdGTWFYTjBmU0JqYjI1bWFXZDFjbUYwYVc5dUlDQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJseHVJQ29nUUhKbGRIVnliaUI3VDJKcVpXTjBmU0JQWW1wbFkzUWdkMmwwYUNCdVlXMWxJR0Z1WkNCcGJuTjBZVzVqWlNCdlppQlFjbTkwYjFOMGRXSmNiaUFxTDF4dVpYaHdiM0owSUdSbFptRjFiSFFnWm5WdVkzUnBiMjRnWVdOMGFYWmhkR1VvZFhKc0xDQmlkWE1zSUdOdmJtWnBaeWtnZTF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUc1aGJXVTZJQ2RHWVdObFltOXZhMGxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlKeXhjYmlBZ0lDQnBibk4wWVc1alpUb2dibVYzSUVaaFkyVmliMjlyU1dSd1VISnZlSGxRY205MGIxTjBkV0lvZFhKc0xDQmlkWE1zSUdOdmJtWnBaeWxjYmlBZ2ZUdGNibjFjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMaTlrWlhZdGNISnZkRzl6ZEhWaWN5OXpjbU12YVdSd2NISnZlSGt2Wm1GalpXSnZiMnN2Um1GalpXSnZiMnRKWkhCUWNtOTRlVk4wZFdJdWFXUndMbXB6SWwwc0luTnZkWEpqWlZKdmIzUWlPaUlpZlE9PVxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzBcbiIpOwoKLyoqKi8gfSksCi8qIDEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwpldmFsKCJcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxuLy9sZXQgaWRlbnRpdGllcyA9IHt9O1xuLy9sZXQgbklkZW50aXR5ID0gMDtcbi8vbGV0IHJlZGlyZWN0VVJJID0gbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUgKyAobG9jYXRpb24ucG9ydCAhPT0gJycgPyAnOicgKyBsb2NhdGlvbi5wb3J0IDogJycpO1xudmFyIHVzZXJJbmZvRW5kcG9pbnQgPSB2b2lkIDA7XG52YXIgdG9rZW5FbmRwb2ludCA9IHZvaWQgMDtcbnZhciBhdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSB2b2lkIDA7XG52YXIgZG9tYWluID0gdm9pZCAwO1xudmFyIGFjY2Vzc1Rva2VuRW5kcG9pbnQgPSB2b2lkIDA7XG52YXIgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSB2b2lkIDA7XG5cbi8vZnVuY3Rpb24gdG8gcGFyc2UgdGhlIHF1ZXJ5IHN0cmluZyBpbiB0aGUgZ2l2ZW4gVVJMIHRvIG9iYXRpbiBjZXJ0YWluIHZhbHVlc1xuZnVuY3Rpb24gdXJsUGFyc2VyKHVybCwgbmFtZSkge1xuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXFxcXScpO1xuICB2YXIgcmVnZXhTID0gJ1tcXFxcIyY/XScgKyBuYW1lICsgJz0oW14mI10qKSc7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTtcbiAgdmFyIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG4gIGlmIChyZXN1bHRzID09PSBudWxsKSByZXR1cm4gJyc7ZWxzZSByZXR1cm4gcmVzdWx0c1sxXTtcbn1cblxuZnVuY3Rpb24gc2VuZEhUVFBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGlmIFhEb21haW5SZXF1ZXN0LlxuICAgIC8vIFhEb21haW5SZXF1ZXN0IG9ubHkgZXhpc3RzIGluIElFLCBhbmQgaXMgSUUncyB3YXkgb2YgbWFraW5nIENPUlMgcmVxdWVzdHMuXG4gICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwpO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLlxuICAgIHhociA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoeGhyKSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgdmFyIGluZm8gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgICAgcmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWplY3QoJ0NPUlMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBleGNoYW5nZVJlZnJlc2hUb2tlbiA9IGZ1bmN0aW9uIGV4Y2hhbmdlUmVmcmVzaFRva2VuKHJlZnJlc2hUb2tlbikge1xuICB2YXIgaSA9IGdvb2dsZUluZm87XG5cbiAgdmFyIFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWZyZXNoX3Rva2VuPScgKyByZWZyZXNoVG9rZW4gKyAnJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlbic7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgIHJlc29sdmUoaW5mbyk7XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbnZhciBnZW5lcmF0ZUFzc2VydGlvbldpdGhBY2Nlc3NUb2tlbiA9IGZ1bmN0aW9uIGdlbmVyYXRlQXNzZXJ0aW9uV2l0aEFjY2Vzc1Rva2VuKGNvbnRlbnRzLCBleHBpcmVzLCBpbmZvKSB7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIHVzZXJJbmZvRW5kcG9pbnQoaW5mbykpLnRoZW4oZnVuY3Rpb24gKGluZm9Ub2tlbikge1xuICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIHVzZXIgcHJvZmlsZSAnLCBpbmZvVG9rZW4pO1xuXG4gICAgICB2YXIgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7IHRva2VuSUQ6IGluZm8uYWNjZXNzX3Rva2VuLCB0b2tlbklESlNPTjogaW5mb1Rva2VuLCBwdWJsaWNLZXk6IGNvbnRlbnRzIH0pKTtcbiAgICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uXSBhdG9iIGFzc2VydGlvbjonLCBhdG9iKGFzc2VydGlvbikpO1xuICAgICAgdmFyIGlkcEJ1bmRsZSA9IHsgZG9tYWluOiBkb21haW4sIHByb3RvY29sOiAnT0FVVEgyJyB9O1xuXG4gICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IHsgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBleHBpcmVzOiBleHBpcmVzLCB1c2VyUHJvZmlsZTogaW5mb1Rva2VuIH07XG5cbiAgICAgIC8qICAgICAgaWRlbnRpdGllc1tuSWRlbnRpdHldID0gcmV0dXJuVmFsdWU7XG4gICAgICAgICAgICArK25JZGVudGl0eTtcbiAgICAgICovXG4gICAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbl0gcmV0dXJuaW5nOiAnLCBKU09OLnN0cmluZ2lmeShyZXR1cm5WYWx1ZSkpO1xuXG4gICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgZ2VuZXJhdGVBc3NlcnRpb25XaXRoQ29kZVRva2VuID0gZnVuY3Rpb24gZ2VuZXJhdGVBc3NlcnRpb25XaXRoQ29kZVRva2VuKGNvbnRlbnRzLCBleHBpcmVzLCBoaW50KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNvZGUgPSB1cmxQYXJzZXIoaGludCwgJ2NvZGUnKTtcblxuICAgIGlmICghY29kZSkgcmVqZWN0KCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVdIGNvZGUgbm90IHJldHVybmVkIGJ5IHRoZSBhdXRoZW50aWNhdGlvbjogJywgaGludCk7XG5cbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCB0b2tlbkVuZHBvaW50KGNvZGUpKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG5cbiAgICAgIGlmIChpbmZvLmhhc093blByb3BlcnR5KCdhY2Nlc3NfdG9rZW4nKSkgcmVzb2x2ZShnZW5lcmF0ZUFzc2VydGlvbldpdGhBY2Nlc3NUb2tlbihjb250ZW50cywgZXhwaXJlcywgaW5mbykpO2Vsc2UgcmVqZWN0KCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVdIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAnLCBpbmZvKTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIGdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbiA9IGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbihyZXNvdXJjZXMsIGxvZ2luKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNvZGUgPSB1cmxQYXJzZXIobG9naW4sICdjb2RlJyk7XG5cbiAgICBpZiAoIWNvZGUpIHJlamVjdCgnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW5dIGNvZGUgbm90IHJldHVybmVkIGJ5IHRoZSBsb2dpbiByZXN1bHQ6ICcsIGxvZ2luKTtcblxuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIGFjY2Vzc1Rva2VuRW5kcG9pbnQoY29kZSkpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcblxuICAgICAgaWYgKGluZm8uaGFzT3duUHJvcGVydHkoJ2FjY2Vzc190b2tlbicpKSB7XG4gICAgICAgIHZhciBleHBpcmVzID0gZ2V0RXhwaXJlcyhpbmZvKTtcbiAgICAgICAgcmVzb2x2ZShhY2Nlc3NUb2tlblJlc3VsdChyZXNvdXJjZXMsIGluZm8uYWNjZXNzX3Rva2VuLCBleHBpcmVzLCBpbmZvKSk7XG4gICAgICB9IGVsc2UgcmVqZWN0KCdbT0FVVEgyLmdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbl0gYWNjZXNzIHRva2VuIG5vdCByZXR1cm5lZCBpbiB0aGUgZXhjaGFuZ2UgY29kZSByZXN1bHQ6ICcsIGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgZ2V0RXhwaXJlcyA9IGZ1bmN0aW9uIGdldEV4cGlyZXModXJsKSB7XG4gIHZhciBleHBpcmVzID0gdXJsUGFyc2VyKHVybCwgJ2V4cGlyZXNfaW4nKTtcblxuICBpZiAoZXhwaXJlcykgZXhwaXJlcyA9IGV4cGlyZXMgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtlbHNlIGV4cGlyZXMgPSAzMTUzNjAwMDAwICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgcmV0dXJuIGV4cGlyZXM7XG59O1xuXG52YXIgYWNjZXNzVG9rZW5SZXN1bHQgPSBmdW5jdGlvbiBhY2Nlc3NUb2tlblJlc3VsdChyZXNvdXJjZXMsIGFjY2Vzc1Rva2VuLCBleHBpcmVzLCBpbnB1dCwgcmVmcmVzaCkge1xuXG4gIHZhciByZXN1bHQgPSB7IGRvbWFpbjogZG9tYWluLCByZXNvdXJjZXM6IHJlc291cmNlcywgYWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuLCBleHBpcmVzOiBleHBpcmVzLCBpbnB1dDogaW5wdXQgfTtcblxuICBpZiAocmVmcmVzaCkgcmVzdWx0LnJlZnJlc2ggPSByZWZyZXNoO1xuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHlcbiovXG52YXIgSWRwUHJveHkgPSBleHBvcnRzLklkcFByb3h5ID0ge1xuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSB0aGUgaW1wbGVtZW50YXRpb25cbiAgKlxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcbiAgKiBAcGFyYW0gIHthc3NlcnRpb259ICAgIElkZW50aXR5IEFzc2VydGlvbiB0byBiZSB2YWxpZGF0ZWRcbiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBpZGVudGl0eSBhc3NlcnRpb24gdmFsaWRhdGlvbiByZXN1bHRcbiAgKi9cbiAgdmFsaWRhdGVBc3NlcnRpb246IGZ1bmN0aW9uIHZhbGlkYXRlQXNzZXJ0aW9uKGNvbmZpZywgYXNzZXJ0aW9uLCBvcmlnaW4pIHtcbiAgICBjb25zb2xlLmluZm8oJ1tPQVVUSDIudmFsaWRhdGVBc3NlcnRpb25dIGFzc2VydGlvbjogJywgYXRvYihhc3NlcnRpb24pKTtcbiAgICB1c2VySW5mb0VuZHBvaW50ID0gY29uZmlnLnVzZXJJbmZvRW5kcG9pbnQ7XG4gICAgZG9tYWluID0gY29uZmlnLmRvbWFpbjtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAvLyAgICAgIGxldCBpID0gaWRwSW5mbztcbiAgICAgIHZhciBkZWNvZGVkQ29udGVudCA9IGF0b2IoYXNzZXJ0aW9uKTtcbiAgICAgIHZhciBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7XG4gICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGNvbmZpZy52YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50KHsgYWNjZXNzX3Rva2VuOiBjb250ZW50LnRva2VuSUQsIGlucHV0OiBjb250ZW50LnRva2VuSURKU09OIH0pKS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHJlc3VsdCkgPT09IEpTT04uc3RyaW5naWZ5KGNvbnRlbnQudG9rZW5JREpTT04pKSB7XG4gICAgICAgICAgLy8gICAgICAgIGlmIChyZXN1bHQuaGFzT3duUHJvcGVydHkoJ25hbWUnKSkge1xuICAgICAgICAgIHJlc29sdmUoeyBpZGVudGl0eTogY29uZmlnLmNvbnZlcnRVc2VyUHJvZmlsZShyZXN1bHQpLmlkLCBjb250ZW50czogY29udGVudC5wdWJsaWNLZXkgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgLypcbiAgICByZWZyZXNoQXNzZXJ0aW9uOiAoaWRlbnRpdHkpID0+IHtcbiAgICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246b2xkSWRlbnRpdHknLCBpZGVudGl0eSk7XG4gICAgICBsZXQgaSA9IGdvb2dsZUluZm87XG4gIFxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICBleGNoYW5nZVJlZnJlc2hUb2tlbihpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcbiAgXG4gICAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiBpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbiwgdG9rZW5UeXBlOiBpZGVudGl0eS5pbmZvLnRva2VuVHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuICAgICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XG4gIFxuICAgICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXG4gICAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XG4gIFxuICAgICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjtcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbi5leHA7XG4gICAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsO1xuICBcbiAgICAgICAgICAgICAgICBsZXQgb2xkSURUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZGVudGl0eS5hc3NlcnRpb24pKTtcbiAgICAgICAgICAgICAgICBsZXQgb2xkSWRUb2tlblNwbGl0ZWQgPSBvbGRJRFRva2VuLnRva2VuSUQuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICBsZXQgb2xkRGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2Iob2xkSWRUb2tlblNwbGl0ZWRbMV0pKTtcbiAgICAgICAgICAgICAgICBsZXQgaWROb25jZSA9IG9sZERlY29kZWRJRFRva2VuLm5vbmNlO1xuICBcbiAgICAgICAgICAgICAgICBsZXQgcmVjZWl2ZWRJRFRva2VuID0gdmFsdWUuaWRfdG9rZW47XG4gICAgICAgICAgICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gcmVjZWl2ZWRJRFRva2VuLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgICAgbGV0IGRlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XG4gIFxuICAgICAgICAgICAgICAgIGRlY29kZWRJRFRva2VuLm5vbmNlID0gaWROb25jZTtcbiAgICAgICAgICAgICAgICBsZXQgaW5zZXJ0ZWROb25jZSA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoZGVjb2RlZElEVG9rZW4pKTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3SURUb2tlbiA9IGlkVG9rZW5TcGxpdGVkWzBdICsgJy4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWROb25jZSArICcuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkVG9rZW5TcGxpdGVkWzJdO1xuICBcbiAgICAgICAgICAgICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogbmV3SURUb2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XG4gICAgICAgICAgICAgICAgbGV0IGlkcEJ1bmRsZSA9IHtkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJ307XG4gIFxuICAgICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxuICAgICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpuZXdJZGVudGl0eScsIHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwqL1xuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxuICAqXG4gICogQHBhcmFtICB7aWRwSW5mb30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG4gIGdlbmVyYXRlQXNzZXJ0aW9uOiBmdW5jdGlvbiBnZW5lcmF0ZUFzc2VydGlvbihjb25maWcsIGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpIHtcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpjb25maWddJywgY29uZmlnKTtcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246aGludF0nLCBoaW50KTtcbiAgICAvLyAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgdXNlckluZm9FbmRwb2ludCA9IGNvbmZpZy51c2VySW5mb0VuZHBvaW50O1xuICAgIHRva2VuRW5kcG9pbnQgPSBjb25maWcudG9rZW5FbmRwb2ludDtcbiAgICBhdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBjb25maWcuYXV0aG9yaXNhdGlvbkVuZHBvaW50O1xuICAgIGRvbWFpbiA9IGNvbmZpZy5kb21haW47XG5cbiAgICB2YXIgX3RoaXMgPSB1bmRlZmluZWQ7XG4gICAgLy9zdGFydCB0aGUgbG9naW4gcGhhc2VcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKCFoaW50KSB7XG5cbiAgICAgICAgLy8gICAgICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uXSBOT19ISU5UOiByZWplY3Rpbmcgd2l0aCByZXF1ZXN0VXJsICcsIHJlcXVlc3RVcmwpO1xuXG4gICAgICAgIHJlamVjdCh7IG5hbWU6ICdJZFBMb2dpbkVycm9yJywgbG9naW5Vcmw6IGF1dGhvcmlzYXRpb25FbmRwb2ludChjb250ZW50cykgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGUgcmVxdWVzdCBoYXZlIGFscmVhZHkgYmVlbiBtYWRlLCBzbyBpZHBQUm94eSB3aWxsIHRyeSB0byBhY2Nlc3MgdGhlIHVzZXIgaW5mb3JtYXRpb25cbiAgICAgICAgdmFyIGV4cGlyZXMgPSB1cmxQYXJzZXIoaGludCwgJ2V4cGlyZXNfaW4nKTtcblxuICAgICAgICBpZiAoZXhwaXJlcykgZXhwaXJlcyA9IGV4cGlyZXMgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtlbHNlIGV4cGlyZXMgPSAzMTUzNjAwMDAwICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgICAgICAgdmFyIGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTtcblxuICAgICAgICBpZiAoYWNjZXNzVG9rZW4pIHJlc29sdmUoZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4oY29udGVudHMsIGV4cGlyZXMsIHsgYWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbiB9KSk7ZWxzZSByZXNvbHZlKGdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVUb2tlbihjb250ZW50cywgZXhwaXJlcywgaGludCkpO1xuICAgICAgfVxuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byBnZXQgYW4gQWNjZXNzIFRva2VuXG4gICpcbiAgKiBAcGFyYW0gIHtjb25maWd9ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcbiAgKiBAcGFyYW0gIHtyZXNvdXJjZXN9IE9iamVjdCBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuXG4gIGdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50OiBmdW5jdGlvbiBnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChjb25maWcsIHJlc291cmNlcykge1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50OmNvbmZpZ10nLCBjb25maWcpO1xuICAgIC8vICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcbiAgICAvLyAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDpyZXNvdXJjZXNdJywgcmVzb3VyY2VzKTtcbiAgICAvLyAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG5cbiAgICB2YXIgX3RoaXMgPSB1bmRlZmluZWQ7XG4gICAgLy9zdGFydCB0aGUgbG9naW4gcGhhc2VcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICByZXNvbHZlKGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50KHJlc291cmNlcykpO1xuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byBnZXQgYW4gQWNjZXNzIFRva2VuXG4gICpcbiAgKiBAcGFyYW0gIHtpZHBJbmZvfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXG4gICogQHBhcmFtICB7Y29udGVudHN9IFRoZSBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXG4gICogQHBhcmFtICB7bG9naW59IG9wdGlvbmFsIGxvZ2luIHJlc3VsdFxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG5cbiAgZ2V0QWNjZXNzVG9rZW46IGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuKGNvbmZpZywgcmVzb3VyY2VzLCBsb2dpbikge1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdldEFjY2Vzc1Rva2VuOmNvbmZpZ10nLCBjb25maWcpO1xuICAgIC8vICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcbiAgICAvLyAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbjpsb2dpbl0nLCBsb2dpbik7XG4gICAgLy8gICAgbGV0IGkgPSBpZHBJbmZvO1xuICAgIGFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5FbmRwb2ludDtcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xuXG4gICAgdmFyIF90aGlzID0gdW5kZWZpbmVkO1xuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIC8vIHRoZSB1c2VyIGlzIGxvZ2dlZGluLCB0cnkgdG8gZXh0cmFjdCB0aGUgQWNjZXNzIFRva2VuIGFuZCBpdHMgZXhwaXJlc1xuICAgICAgdmFyIGV4cGlyZXMgPSBnZXRFeHBpcmVzKGxvZ2luKTtcblxuICAgICAgdmFyIGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGxvZ2luLCAnYWNjZXNzX3Rva2VuJyk7XG5cbiAgICAgIGlmIChhY2Nlc3NUb2tlbikgcmVzb2x2ZShhY2Nlc3NUb2tlblJlc3VsdChyZXNvdXJjZXMsIGFjY2Vzc1Rva2VuLCBleHBpcmVzLCBsb2dpbikpO2Vsc2UgcmVzb2x2ZShnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4ocmVzb3VyY2VzLCBsb2dpbikpO1xuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfVxuXG59Oy8vIyBzb3VyY2VVUkw9W21vZHVsZV1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTR2WkdWMkxYQnliM1J2YzNSMVluTXZjM0pqTDJsa2NIQnliM2g1TDA5QlZWUklMbXB6UHpZeU9EQWlYU3dpYm1GdFpYTWlPbHNpZFhObGNrbHVabTlGYm1Sd2IybHVkQ0lzSW5SdmEyVnVSVzVrY0c5cGJuUWlMQ0poZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5RaUxDSmtiMjFoYVc0aUxDSmhZMk5sYzNOVWIydGxia1Z1WkhCdmFXNTBJaXdpWVdOalpYTnpWRzlyWlc1QmRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUWlMQ0oxY214UVlYSnpaWElpTENKMWNtd2lMQ0p1WVcxbElpd2ljbVZ3YkdGalpTSXNJbkpsWjJWNFV5SXNJbkpsWjJWNElpd2lVbVZuUlhod0lpd2ljbVZ6ZFd4MGN5SXNJbVY0WldNaUxDSnpaVzVrU0ZSVVVGSmxjWFZsYzNRaUxDSnRaWFJvYjJRaUxDSjRhSElpTENKWVRVeElkSFJ3VW1WeGRXVnpkQ0lzSW05d1pXNGlMQ0pZUkc5dFlXbHVVbVZ4ZFdWemRDSXNJbEJ5YjIxcGMyVWlMQ0p5WlhOdmJIWmxJaXdpY21WcVpXTjBJaXdpYjI1eVpXRmtlWE4wWVhSbFkyaGhibWRsSWl3aVpTSXNJbkpsWVdSNVUzUmhkR1VpTENKemRHRjBkWE1pTENKcGJtWnZJaXdpU2xOUFRpSXNJbkJoY25ObElpd2ljbVZ6Y0c5dWMyVlVaWGgwSWl3aWMyVnVaQ0lzSW1WNFkyaGhibWRsVW1WbWNtVnphRlJ2YTJWdUlpd2ljbVZtY21WemFGUnZhMlZ1SWl3aWFTSXNJbWR2YjJkc1pVbHVabThpTENKVlVrd2lMQ0pqYkdsbGJuUkpSQ0lzSW1Oc2FXVnVkRk5sWTNKbGRDSXNJblJvWlc0aUxDSmxjbkp2Y2lJc0ltZGxibVZ5WVhSbFFYTnpaWEowYVc5dVYybDBhRUZqWTJWemMxUnZhMlZ1SWl3aVkyOXVkR1Z1ZEhNaUxDSmxlSEJwY21Weklpd2lhVzVtYjFSdmEyVnVJaXdpWTI5dWMyOXNaU0lzSW14dlp5SXNJbUZ6YzJWeWRHbHZiaUlzSW1KMGIyRWlMQ0p6ZEhKcGJtZHBabmtpTENKMGIydGxia2xFSWl3aVlXTmpaWE56WDNSdmEyVnVJaXdpZEc5clpXNUpSRXBUVDA0aUxDSndkV0pzYVdOTFpYa2lMQ0poZEc5aUlpd2lhV1J3UW5WdVpHeGxJaXdpY0hKdmRHOWpiMndpTENKeVpYUjFjbTVXWVd4MVpTSXNJbWxrY0NJc0luVnpaWEpRY205bWFXeGxJaXdpWjJWdVpYSmhkR1ZCYzNObGNuUnBiMjVYYVhSb1EyOWtaVlJ2YTJWdUlpd2lhR2x1ZENJc0ltTnZaR1VpTENKb1lYTlBkMjVRY205d1pYSjBlU0lzSW1kbGRFRmpZMlZ6YzFSdmEyVnVWMmwwYUVOdlpHVlViMnRsYmlJc0luSmxjMjkxY21ObGN5SXNJbXh2WjJsdUlpd2laMlYwUlhod2FYSmxjeUlzSW1GalkyVnpjMVJ2YTJWdVVtVnpkV3gwSWl3aVRXRjBhQ0lzSW1ac2IyOXlJaXdpUkdGMFpTSXNJbTV2ZHlJc0ltRmpZMlZ6YzFSdmEyVnVJaXdpYVc1d2RYUWlMQ0p5WldaeVpYTm9JaXdpY21WemRXeDBJaXdpU1dSd1VISnZlSGtpTENKMllXeHBaR0YwWlVGemMyVnlkR2x2YmlJc0ltTnZibVpwWnlJc0ltOXlhV2RwYmlJc0ltUmxZMjlrWldSRGIyNTBaVzUwSWl3aVkyOXVkR1Z1ZENJc0luWmhiR2xrWVhSbFFYTnpaWEowYVc5dVJXNWtjRzlwYm5RaUxDSnBaR1Z1ZEdsMGVTSXNJbU52Ym5abGNuUlZjMlZ5VUhKdlptbHNaU0lzSW1sa0lpd2lZMkYwWTJnaUxDSmxjbklpTENKblpXNWxjbUYwWlVGemMyVnlkR2x2YmlJc0lsOTBhR2x6SWl3aWJHOW5hVzVWY213aUxDSm5aWFJCWTJObGMzTlViMnRsYmtGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRDSXNJbWRsZEVGalkyVnpjMVJ2YTJWdUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRU3hKUVVGSlFTeDVRa0ZCU2p0QlFVTkJMRWxCUVVsRExITkNRVUZLTzBGQlEwRXNTVUZCU1VNc09FSkJRVW83UVVGRFFTeEpRVUZKUXl4bFFVRktPMEZCUTBFc1NVRkJTVU1zTkVKQlFVbzdRVUZEUVN4SlFVRkpReXg1UTBGQlNqczdRVUZGUVR0QlFVTkJMRk5CUVZORExGTkJRVlFzUTBGQmJVSkRMRWRCUVc1Q0xFVkJRWGRDUXl4SlFVRjRRaXhGUVVFNFFqdEJRVU0xUWtFc1UwRkJUMEVzUzBGQlMwTXNUMEZCVEN4RFFVRmhMRTFCUVdJc1JVRkJjVUlzVFVGQmNrSXNSVUZCTmtKQkxFOUJRVGRDTEVOQlFYRkRMRTFCUVhKRExFVkJRVFpETEUxQlFUZERMRU5CUVZBN1FVRkRRU3hOUVVGSlF5eFRRVUZUTEZsQlFWbEdMRWxCUVZvc1IwRkJiVUlzVjBGQmFFTTdRVUZEUVN4TlFVRkpSeXhSUVVGUkxFbEJRVWxETEUxQlFVb3NRMEZCVjBZc1RVRkJXQ3hEUVVGYU8wRkJRMEVzVFVGQlNVY3NWVUZCVlVZc1RVRkJUVWNzU1VGQlRpeERRVUZYVUN4SFFVRllMRU5CUVdRN1FVRkRRU3hOUVVGSlRTeFpRVUZaTEVsQlFXaENMRVZCUTBVc1QwRkJUeXhGUVVGUUxFTkJSRVlzUzBGSFJTeFBRVUZQUVN4UlFVRlJMRU5CUVZJc1EwRkJVRHRCUVVOSU96dEJRVVZFTEZOQlFWTkZMR1ZCUVZRc1EwRkJlVUpETEUxQlFYcENMRVZCUVdsRFZDeEhRVUZxUXl4RlFVRnpRenRCUVVOd1F5eE5RVUZKVlN4TlFVRk5MRWxCUVVsRExHTkJRVW9zUlVGQlZqdEJRVU5CTEUxQlFVa3NjVUpCUVhGQ1JDeEhRVUY2UWl4RlFVRTRRanRCUVVNMVFrRXNVVUZCU1VVc1NVRkJTaXhEUVVGVFNDeE5RVUZVTEVWQlFXbENWQ3hIUVVGcVFpeEZRVUZ6UWl4SlFVRjBRanRCUVVORUxFZEJSa1FzVFVGRlR5eEpRVUZKTEU5QlFVOWhMR05CUVZBc1NVRkJlVUlzVjBGQk4wSXNSVUZCTUVNN1FVRkRMME03UVVGRFFUdEJRVU5CU0N4VlFVRk5MRWxCUVVsSExHTkJRVW9zUlVGQlRqdEJRVU5CU0N4UlFVRkpSU3hKUVVGS0xFTkJRVk5JTEUxQlFWUXNSVUZCYVVKVUxFZEJRV3BDTzBGQlEwUXNSMEZNVFN4TlFVdEJPMEZCUTB3N1FVRkRRVlVzVlVGQlRTeEpRVUZPTzBGQlEwUTdRVUZEUkN4VFFVRlBMRWxCUVVsSkxFOUJRVW9zUTBGQldTeFZRVUZWUXl4UFFVRldMRVZCUVcxQ1F5eE5RVUZ1UWl4RlFVRXlRanRCUVVNMVF5eFJRVUZKVGl4SFFVRktMRVZCUVZNN1FVRkRVRUVzVlVGQlNVOHNhMEpCUVVvc1IwRkJlVUlzVlVGQlZVTXNRMEZCVml4RlFVRmhPMEZCUTNCRExGbEJRVWxTTEVsQlFVbFRMRlZCUVVvc1MwRkJiVUlzUTBGQmRrSXNSVUZCTUVJN1FVRkRlRUlzWTBGQlNWUXNTVUZCU1ZVc1RVRkJTaXhMUVVGbExFZEJRVzVDTEVWQlFYZENPMEZCUTNSQ0xHZENRVUZKUXl4UFFVRlBReXhMUVVGTFF5eExRVUZNTEVOQlFWZGlMRWxCUVVsakxGbEJRV1lzUTBGQldEdEJRVU5CVkN4dlFrRkJVVTBzU1VGQlVqdEJRVU5FTEZkQlNFUXNUVUZIVHl4SlFVRkpXQ3hKUVVGSlZTeE5RVUZLTEV0QlFXVXNSMEZCYmtJc1JVRkJkMEk3UVVGRE4wSktMRzFDUVVGUExIbERRVUZRTzBGQlEwUXNWMEZHVFN4TlFVVkJPMEZCUTB4QkxHMUNRVUZQTERSRFFVRlFPMEZCUTBRN1FVRkRSanRCUVVOR0xFOUJXRVE3UVVGWlFVNHNWVUZCU1dVc1NVRkJTanRCUVVORUxFdEJaRVFzVFVGalR6dEJRVU5NVkN4aFFVRlBMRzlDUVVGUU8wRkJRMFE3UVVGRFJpeEhRV3hDVFN4RFFVRlFPMEZCYlVKRU96dEJRVVZFTEVsQlFVbFZMSFZDUVVGM1FpeFRRVUY0UWtFc2IwSkJRWGRDTEVOQlFWVkRMRmxCUVZZc1JVRkJkMEk3UVVGRGJFUXNUVUZCU1VNc1NVRkJTVU1zVlVGQlVqczdRVUZGUVN4TlFVRkpReXhOUVVGTlJpeEZRVUZGYkVNc1lVRkJSaXhIUVVGclFpeFpRVUZzUWl4SFFVRnBRMnRETEVWQlFVVkhMRkZCUVc1RExFZEJRVGhETEdsQ1FVRTVReXhIUVVGclJVZ3NSVUZCUlVrc1dVRkJjRVVzUjBGQmJVWXNhVUpCUVc1R0xFZEJRWFZIVEN4WlFVRjJSeXhIUVVGelNDd3lRa0ZCYUVrN08wRkJSVUVzVTBGQlR5eEpRVUZKWWl4UFFVRktMRU5CUVZrc1ZVRkJWVU1zVDBGQlZpeEZRVUZ0UWtNc1RVRkJia0lzUlVGQk1rSTdRVUZETlVOU0xHOUNRVUZuUWl4TlFVRm9RaXhGUVVGM1FuTkNMRWRCUVhoQ0xFVkJRVFpDUnl4SlFVRTNRaXhEUVVGclF5eFZRVUZWV2l4SlFVRldMRVZCUVdkQ08wRkJRMmhFVGl4alFVRlJUU3hKUVVGU08wRkJRMFFzUzBGR1JDeEZRVVZITEZWQlFWVmhMRXRCUVZZc1JVRkJhVUk3UVVGRGJFSnNRaXhoUVVGUGEwSXNTMEZCVUR0QlFVTkVMRXRCU2tRN1FVRk5SQ3hIUVZCTkxFTkJRVkE3UVVGUlJDeERRV0pFT3p0QlFXVkJMRWxCUVVsRExHMURRVUZ4UXl4VFFVRnlRMEVzWjBOQlFYRkRMRU5CUVZWRExGRkJRVllzUlVGQmIwSkRMRTlCUVhCQ0xFVkJRVFpDYUVJc1NVRkJOMElzUlVGQmJVTTdPMEZCUlRGRkxGTkJRVThzU1VGQlNWQXNUMEZCU2l4RFFVRlpMRlZCUVZWRExFOUJRVllzUlVGQmJVSkRMRTFCUVc1Q0xFVkJRVEpDTzBGQlF6VkRVaXh2UWtGQlowSXNTMEZCYUVJc1JVRkJkVUptTEdsQ1FVRnBRalJDTEVsQlFXcENMRU5CUVhaQ0xFVkJRU3REV1N4SlFVRXZReXhEUVVGdlJDeFZRVUZWU3l4VFFVRldMRVZCUVhGQ08wRkJRM1pGUXl4alFVRlJReXhIUVVGU0xFTkJRVmtzYlVSQlFWb3NSVUZCYVVWR0xGTkJRV3BGT3p0QlFVVkJMRlZCUVVsSExGbEJRVmxETEV0QlFVdHdRaXhMUVVGTGNVSXNVMEZCVEN4RFFVRmxMRVZCUVVWRExGTkJRVk4yUWl4TFFVRkxkMElzV1VGQmFFSXNSVUZCT0VKRExHRkJRV0ZTTEZOQlFUTkRMRVZCUVhORVV5eFhRVUZYV0N4UlFVRnFSU3hGUVVGbUxFTkJRVXdzUTBGQmFFSTdRVUZEUVVjc1kwRkJVVU1zUjBGQlVpeERRVUZaTERSRFFVRmFMRVZCUVRCRVVTeExRVUZMVUN4VFFVRk1MRU5CUVRGRU8wRkJRMEVzVlVGQlNWRXNXVUZCV1N4RlFVRkZja1FzVVVGQlVVRXNUVUZCVml4RlFVRnJRbk5FTEZWQlFWVXNVVUZCTlVJc1JVRkJhRUk3TzBGQlJVRTdRVUZEUVN4VlFVRkpReXhqUVVGakxFVkJRVVZXTEZkQlFWZEJMRk5CUVdJc1JVRkJkMEpYTEV0QlFVdElMRk5CUVRkQ0xFVkJRWGREV2l4VFFVRlRRU3hQUVVGcVJDeEZRVUV3UkdkQ0xHRkJRV0ZtTEZOQlFYWkZMRVZCUVd4Q096dEJRVVZPT3pzN1FVRkhUVU1zWTBGQlVVTXNSMEZCVWl4RFFVRlpMSGREUVVGYUxFVkJRWE5FYkVJc1MwRkJTM0ZDTEZOQlFVd3NRMEZCWlZFc1YwRkJaaXhEUVVGMFJEczdRVUZGUVhCRExHTkJRVkZ2UXl4WFFVRlNPMEZCUTBRc1MwRm9Ra1E3UVVGcFFrUXNSMEZzUWswc1EwRkJVRHRCUVcxQ1JDeERRWEpDUkRzN1FVRjFRa0VzU1VGQlNVY3NhVU5CUVd0RExGTkJRV3hEUVN3NFFrRkJhME1zUTBGQlYyeENMRkZCUVZnc1JVRkJjVUpETEU5QlFYSkNMRVZCUVRoQ2EwSXNTVUZCT1VJc1JVRkJiME03UVVGRGVFVXNVMEZCVHl4SlFVRkpla01zVDBGQlNpeERRVUZaTEZWQlFWVkRMRTlCUVZZc1JVRkJiVUpETEUxQlFXNUNMRVZCUVRKQ08wRkJRelZETEZGQlFVbDNReXhQUVVGUGVrUXNWVUZCVlhkRUxFbEJRVllzUlVGQlowSXNUVUZCYUVJc1EwRkJXRHM3UVVGRlFTeFJRVUZKTEVOQlFVTkRMRWxCUVV3c1JVRkJWM2hETEU5QlFVOHNPRVZCUVZBc1JVRkJkVVoxUXl4SlFVRjJSanM3UVVGRlZDOURMRzlDUVVGblFpeE5RVUZvUWl4RlFVRjNRbVFzWTBGQll6aEVMRWxCUVdRc1EwRkJlRUlzUlVGQk5rTjJRaXhKUVVFM1F5eERRVUZyUkN4VlFVRlZXaXhKUVVGV0xFVkJRV2RDT3p0QlFVVm9SU3hWUVVGSlFTeExRVUZMYjBNc1kwRkJUQ3hEUVVGdlFpeGpRVUZ3UWl4RFFVRktMRVZCUTBVeFF5eFJRVUZSYjBJc2FVTkJRV3REUXl4UlFVRnNReXhGUVVFMFEwTXNUMEZCTlVNc1JVRkJjVVJvUWl4SlFVRnlSQ3hEUVVGU0xFVkJSRVlzUzBGRlMwd3NUMEZCVHl3MFJrRkJVQ3hGUVVGeFIwc3NTVUZCY2tjN1FVRkRUaXhMUVV4RUxFVkJTMGNzVlVGQlZXRXNTMEZCVml4RlFVRnBRanRCUVVOc1FteENMR0ZCUVU5clFpeExRVUZRTzBGQlEwUXNTMEZRUkR0QlFWTklMRWRCWkUwc1EwRkJVRHRCUVdWRUxFTkJhRUpFT3p0QlFXdENRU3hKUVVGSmQwSXNPRUpCUVN0Q0xGTkJRUzlDUVN3eVFrRkJLMElzUTBGQlZVTXNVMEZCVml4RlFVRnhRa01zUzBGQmNrSXNSVUZCTkVJN1FVRkROMFFzVTBGQlR5eEpRVUZKT1VNc1QwRkJTaXhEUVVGWkxGVkJRVlZETEU5QlFWWXNSVUZCYlVKRExFMUJRVzVDTEVWQlFUSkNPMEZCUXpWRExGRkJRVWwzUXl4UFFVRlBla1FzVlVGQlZUWkVMRXRCUVZZc1JVRkJhVUlzVFVGQmFrSXNRMEZCV0RzN1FVRkZRU3hSUVVGSkxFTkJRVU5LTEVsQlFVd3NSVUZCVjNoRExFOUJRVThzT0VWQlFWQXNSVUZCZFVZMFF5eExRVUYyUmpzN1FVRkZWSEJFTEc5Q1FVRm5RaXhOUVVGb1FpeEZRVUYzUWxnc2IwSkJRVzlDTWtRc1NVRkJjRUlzUTBGQmVFSXNSVUZCYlVSMlFpeEpRVUZ1UkN4RFFVRjNSQ3hWUVVGVldpeEpRVUZXTEVWQlFXZENPenRCUVVWMFJTeFZRVUZKUVN4TFFVRkxiME1zWTBGQlRDeERRVUZ2UWl4alFVRndRaXhEUVVGS0xFVkJRWGxETzBGQlEzWkRMRmxCUVVsd1FpeFZRVUZWZDBJc1YwRkJWM2hETEVsQlFWZ3NRMEZCWkR0QlFVTkJUaXhuUWtGQlV5dERMR3RDUVVGclFrZ3NVMEZCYkVJc1JVRkJOa0owUXl4TFFVRkxkMElzV1VGQmJFTXNSVUZCWjBSU0xFOUJRV2hFTEVWQlFYbEVhRUlzU1VGQmVrUXNRMEZCVkR0QlFVTkVMRTlCU0VRc1RVRkhUMHdzVDBGQlR5dzRSa0ZCVUN4RlFVRjFSMHNzU1VGQmRrYzdRVUZEVWl4TFFVNUVMRVZCVFVjc1ZVRkJWV0VzUzBGQlZpeEZRVUZwUWp0QlFVTnNRbXhDTEdGQlFVOXJRaXhMUVVGUU8wRkJRMFFzUzBGU1JEdEJRVlZJTEVkQlprMHNRMEZCVUR0QlFXZENSQ3hEUVdwQ1JEczdRVUZ0UWtFc1NVRkJTVEpDTEdGQlFXTXNVMEZCWkVFc1ZVRkJZeXhEUVVGVk4wUXNSMEZCVml4RlFVRmxPMEZCUXk5Q0xFMUJRVWx4UXl4VlFVRlZkRU1zVlVGQlZVTXNSMEZCVml4RlFVRmxMRmxCUVdZc1EwRkJaRHM3UVVGRlFTeE5RVUZKY1VNc1QwRkJTaXhGUVVGaFFTeFZRVUZWUVN4VlFVRlZNRUlzUzBGQlMwTXNTMEZCVEN4RFFVRlhReXhMUVVGTFF5eEhRVUZNTEV0QlFXRXNTVUZCZUVJc1EwRkJjRUlzUTBGQllpeExRVU5MTjBJc1ZVRkJWU3hoUVVGaE1FSXNTMEZCUzBNc1MwRkJUQ3hEUVVGWFF5eExRVUZMUXl4SFFVRk1MRXRCUVdFc1NVRkJlRUlzUTBGQmRrSTdPMEZCUlV3c1UwRkJUemRDTEU5QlFWQTdRVUZGUkN4RFFWSkVPenRCUVZWQkxFbEJRVWw1UWl4dlFrRkJjVUlzVTBGQmNrSkJMR2xDUVVGeFFpeERRVUZWU0N4VFFVRldMRVZCUVhGQ1VTeFhRVUZ5UWl4RlFVRnJRemxDTEU5QlFXeERMRVZCUVRKREswSXNTMEZCTTBNc1JVRkJhMFJETEU5QlFXeEVMRVZCUVRKRU96dEJRVVZzUml4TlFVRkpReXhUUVVGVExFVkJRVVV4UlN4UlFVRlJRU3hOUVVGV0xFVkJRV3RDSzBRc1YwRkJWMEVzVTBGQk4wSXNSVUZCZDBOUkxHRkJRV0ZCTEZkQlFYSkVMRVZCUVd0Rk9VSXNVMEZCVTBFc1QwRkJNMFVzUlVGQmIwWXJRaXhQUVVGUFFTeExRVUV6Uml4RlFVRmlPenRCUVVWQkxFMUJRVWxETEU5QlFVb3NSVUZCWVVNc1QwRkJUMFFzVDBGQlVDeEhRVUZwUWtFc1QwRkJha0k3TzBGQlJXSXNVMEZCVDBNc1RVRkJVRHRCUVVWRUxFTkJVa1E3TzBGQlZVRTdPenRCUVVkUExFbEJRVWxETERoQ1FVRlhPenRCUVVWd1FqczdPenM3T3pzN08wRkJVMEZETEhGQ1FVRnRRaXd5UWtGQlEwTXNUVUZCUkN4RlFVRlRhRU1zVTBGQlZDeEZRVUZ2UW1sRExFMUJRWEJDTEVWQlFTdENPMEZCUTJoRWJrTXNXVUZCVVd4Q0xFbEJRVklzUTBGQllTeDNRMEZCWWl4RlFVRjFSREpDTEV0QlFVdFFMRk5CUVV3c1EwRkJka1E3UVVGRFFXaEVMSFZDUVVGdFFtZEdMRTlCUVU5b1JpeG5Ra0ZCTVVJN1FVRkRRVWNzWVVGQlV6WkZMRTlCUVU4M1JTeE5RVUZvUWpzN1FVRkZRU3hYUVVGUExFbEJRVWxyUWl4UFFVRktMRU5CUVZrc1ZVRkJWVU1zVDBGQlZpeEZRVUZ0UWtNc1RVRkJia0lzUlVGQk1rSTdRVUZEYkVRN1FVRkRUU3hWUVVGSk1rUXNhVUpCUVdsQ00wSXNTMEZCUzFBc1UwRkJUQ3hEUVVGeVFqdEJRVU5CTEZWQlFVbHRReXhWUVVGVmRFUXNTMEZCUzBNc1MwRkJUQ3hEUVVGWGIwUXNZMEZCV0N4RFFVRmtPMEZCUTBGdVJTeHpRa0ZCWjBJc1MwRkJhRUlzUlVGQmRVSnBSU3hQUVVGUFNTeDVRa0ZCVUN4RFFVRnBReXhGUVVGRGFFTXNZMEZCWXl0Q0xGRkJRVkZvUXl4UFFVRjJRaXhGUVVGblEzZENMRTlCUVU5UkxGRkJRVkU1UWl4WFFVRXZReXhGUVVGcVF5eERRVUYyUWl4RlFVRjFTR0lzU1VGQmRrZ3NRMEZCTkVnc2EwSkJRVlU3UVVGRGNFa3NXVUZCU1Znc1MwRkJTM0ZDTEZOQlFVd3NRMEZCWlRKQ0xFMUJRV1lzVFVGQk1rSm9SQ3hMUVVGTGNVSXNVMEZCVEN4RFFVRmxhVU1zVVVGQlVUbENMRmRCUVhaQ0xFTkJRUzlDTEVWQlFXOUZPMEZCUTJ4Rk8wRkJRMEV2UWl4clFrRkJVU3hGUVVGRkswUXNWVUZCVlV3c1QwRkJUMDBzYTBKQlFWQXNRMEZCTUVKVUxFMUJRVEZDTEVWQlFXdERWU3hGUVVFNVF5eEZRVUZyUkRWRExGVkJRVlYzUXl4UlFVRlJOMElzVTBGQmNFVXNSVUZCVWp0QlFVTkVMRk5CU0VRc1RVRkhUenRCUVVOTUwwSXNhVUpCUVU4c1UwRkJVRHRCUVVORU8wRkJRMFlzVDBGUVJDeEZRVTlIYVVVc1MwRlFTQ3hEUVU5VExHVkJRVTg3UVVGRFpHcEZMR1ZCUVU5clJTeEhRVUZRTzBGQlEwUXNUMEZVUkR0QlFWVkVMRXRCWkUwc1EwRkJVRHRCUVdWRUxFZEJMMEp0UWp0QlFXZERjRUk3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJhMFJCT3pzN096czdPenM3UVVGVFFVTXNjVUpCUVcxQ0xESkNRVUZEVml4TlFVRkVMRVZCUVZOeVF5eFJRVUZVTEVWQlFXMUNjME1zVFVGQmJrSXNSVUZCTWtKdVFpeEpRVUV6UWl4RlFVRnZRenRCUVVOeVJHaENMRmxCUVZGRExFZEJRVklzUTBGQldTeHRRMEZCV2l4RlFVRnBSR2xETEUxQlFXcEVPMEZCUTBGc1F5eFpRVUZSUXl4SFFVRlNMRU5CUVZrc2NVTkJRVm9zUlVGQmJVUktMRkZCUVc1RU8wRkJRMEZITEZsQlFWRkRMRWRCUVZJc1EwRkJXU3h0UTBGQldpeEZRVUZwUkd0RExFMUJRV3BFTzBGQlEwRnVReXhaUVVGUlF5eEhRVUZTTEVOQlFWa3NhVU5CUVZvc1JVRkJLME5sTEVsQlFTOURPMEZCUTBvN1FVRkRTVGxFTEhWQ1FVRnRRbWRHTEU5QlFVOW9SaXhuUWtGQk1VSTdRVUZEUVVNc2IwSkJRV2RDSzBVc1QwRkJUeTlGTEdGQlFYWkNPMEZCUTBGRExEUkNRVUYzUWpoRkxFOUJRVTg1UlN4eFFrRkJMMEk3UVVGRFFVTXNZVUZCVXpaRkxFOUJRVTgzUlN4TlFVRm9RanM3UVVGRlFTeFJRVUZKZDBZc2FVSkJRVW83UVVGRFFUdEJRVU5CTEZkQlFVOHNTVUZCU1hSRkxFOUJRVW9zUTBGQldTeFZRVUZWUXl4UFFVRldMRVZCUVcxQ1F5eE5RVUZ1UWl4RlFVRXlRanRCUVVNMVF5eFZRVUZKTEVOQlFVTjFReXhKUVVGTUxFVkJRVmM3TzBGQlJXcENPenRCUVVWUmRrTXNaVUZCVHl4RlFVRkZaaXhOUVVGTkxHVkJRVklzUlVGQmVVSnZSaXhWUVVGVk1VWXNjMEpCUVhOQ2VVTXNVVUZCZEVJc1EwRkJia01zUlVGQlVEdEJRVVZFTEU5QlRrUXNUVUZOVHp0QlFVTk1PMEZCUTBFc1dVRkJTVU1zVlVGQlZYUkRMRlZCUVZWM1JDeEpRVUZXTEVWQlFXZENMRmxCUVdoQ0xFTkJRV1E3TzBGQlJVRXNXVUZCU1d4Q0xFOUJRVW9zUlVGQllVRXNWVUZCVlVFc1ZVRkJWVEJDTEV0QlFVdERMRXRCUVV3c1EwRkJWME1zUzBGQlMwTXNSMEZCVEN4TFFVRmhMRWxCUVhoQ0xFTkJRWEJDTEVOQlFXSXNTMEZEU3pkQ0xGVkJRVlVzWVVGQllUQkNMRXRCUVV0RExFdEJRVXdzUTBGQlYwTXNTMEZCUzBNc1IwRkJUQ3hMUVVGaExFbEJRWGhDTEVOQlFYWkNPenRCUVVWTUxGbEJRVWxETEdOQlFXTndSU3hWUVVGVmQwUXNTVUZCVml4RlFVRm5RaXhqUVVGb1FpeERRVUZzUWpzN1FVRkZRU3haUVVGSldTeFhRVUZLTEVWQlFXbENjRVFzVVVGQlUyOUNMR2xEUVVGcFEwTXNVVUZCYWtNc1JVRkJNa05ETEU5QlFUTkRMRVZCUVcxRUxFVkJRVU5STEdOQlFXTnpRaXhYUVVGbUxFVkJRVzVFTEVOQlFWUXNSVUZCYWtJc1MwRkRTM0JFTEZGQlFWTjFReXdyUWtGQkswSnNRaXhSUVVFdlFpeEZRVUY1UTBNc1QwRkJla01zUlVGQmEwUnJRaXhKUVVGc1JDeERRVUZVTzBGQlEwNDdRVUZEUml4TFFXNUNUU3hGUVcxQ1NpeFZRVUZWY2tNc1EwRkJWaXhGUVVGaE96dEJRVVZrUml4aFFVRlBSU3hEUVVGUU8wRkJRMFFzUzBGMFFrMHNRMEZCVUR0QlFYVkNSQ3hIUVM5SWJVSTdPMEZCYVVsd1FqczdPenM3T3pzN1FVRlJRVzlGTEhWRFFVRnhReXcyUTBGQlEySXNUVUZCUkN4RlFVRlRaQ3hUUVVGVUxFVkJRWFZDTzBGQlF6RkVjRUlzV1VGQlVVTXNSMEZCVWl4RFFVRlpMSEZFUVVGYUxFVkJRVzFGYVVNc1RVRkJia1U3UVVGRFNqdEJRVU5CTzBGQlEwbHNReXhaUVVGUlF5eEhRVUZTTEVOQlFWa3NkMFJCUVZvc1JVRkJjMFZ0UWl4VFFVRjBSVHRCUVVOS08wRkJRMGszUkN4MVEwRkJiVU15UlN4UFFVRlBNMFVzWjBOQlFURkRPenRCUVVWQkxGRkJRVWx6Uml4cFFrRkJTanRCUVVOQk8wRkJRMEVzVjBGQlR5eEpRVUZKZEVVc1QwRkJTaXhEUVVGWkxGVkJRVlZETEU5QlFWWXNSVUZCYlVKRExFMUJRVzVDTEVWQlFUSkNPenRCUVVVeFEwUXNZMEZCVTJwQ0xHbERRVUZwUXpaRUxGTkJRV3BETEVOQlFWUTdRVUZGU0N4TFFVcE5MRVZCU1Vvc1ZVRkJWWHBETEVOQlFWWXNSVUZCWVRzN1FVRkZaRVlzWVVGQlQwVXNRMEZCVUR0QlFVTkVMRXRCVUUwc1EwRkJVRHRCUVZGRUxFZEJNMHB0UWpzN1FVRTJTbkJDT3pzN096czdPenM3TzBGQlZVRnhSU3hyUWtGQlowSXNkMEpCUVVOa0xFMUJRVVFzUlVGQlUyUXNVMEZCVkN4RlFVRnZRa01zUzBGQmNFSXNSVUZCT0VJN1FVRkROVU55UWl4WlFVRlJReXhIUVVGU0xFTkJRVmtzWjBOQlFWb3NSVUZCT0VOcFF5eE5RVUU1UXp0QlFVTktPMEZCUTBFN1FVRkRTV3hETEZsQlFWRkRMRWRCUVZJc1EwRkJXU3dyUWtGQldpeEZRVUUyUTI5Q0xFdEJRVGRETzBGQlEwbzdRVUZEU1M5RUxEQkNRVUZ6UWpSRkxFOUJRVTgxUlN4dFFrRkJOMEk3UVVGRFFVUXNZVUZCVXpaRkxFOUJRVTgzUlN4TlFVRm9RanM3UVVGRlFTeFJRVUZKZDBZc2FVSkJRVW83UVVGRFFUdEJRVU5CTEZkQlFVOHNTVUZCU1hSRkxFOUJRVW9zUTBGQldTeFZRVUZWUXl4UFFVRldMRVZCUVcxQ1F5eE5RVUZ1UWl4RlFVRXlRanRCUVVNeFF6dEJRVU5CTEZWQlFVbHhRaXhWUVVGVmQwSXNWMEZCVjBRc1MwRkJXQ3hEUVVGa096dEJRVVZCTEZWQlFVbFBMR05CUVdOd1JTeFZRVUZWTmtRc1MwRkJWaXhGUVVGcFFpeGpRVUZxUWl4RFFVRnNRanM3UVVGRlFTeFZRVUZKVHl4WFFVRktMRVZCUVdsQ2NFUXNVVUZCVXl0RExHdENRVUZyUWtnc1UwRkJiRUlzUlVGQk5rSlJMRmRCUVRkQ0xFVkJRVEJET1VJc1QwRkJNVU1zUlVGQmJVUjFRaXhMUVVGdVJDeERRVUZVTEVWQlFXcENMRXRCUTBzM1F5eFJRVUZUTWtNc05FSkJRVFJDUXl4VFFVRTFRaXhGUVVGMVEwTXNTMEZCZGtNc1EwRkJWRHRCUVVOU0xFdEJVazBzUlVGUlNpeFZRVUZWTVVNc1EwRkJWaXhGUVVGaE96dEJRVVZrUml4aFFVRlBSU3hEUVVGUU8wRkJRMFFzUzBGWVRTeERRVUZRTzBGQldVUTdPMEZCT1V4dFFpeERRVUZtSWl3aVptbHNaU0k2SWpFdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjYmk4dmJHVjBJR2xrWlc1MGFYUnBaWE1nUFNCN2ZUdGNiaTh2YkdWMElHNUpaR1Z1ZEdsMGVTQTlJREE3WEc0dkwyeGxkQ0J5WldScGNtVmpkRlZTU1NBOUlHeHZZMkYwYVc5dUxuQnliM1J2WTI5c0lDc2dKeTh2SnlBcklHeHZZMkYwYVc5dUxtaHZjM1J1WVcxbElDc2dLR3h2WTJGMGFXOXVMbkJ2Y25RZ0lUMDlJQ2NuSUQ4Z0p6b25JQ3NnYkc5allYUnBiMjR1Y0c5eWRDQTZJQ2NuS1R0Y2JteGxkQ0IxYzJWeVNXNW1iMFZ1WkhCdmFXNTBPMXh1YkdWMElIUnZhMlZ1Ulc1a2NHOXBiblE3WEc1c1pYUWdZWFYwYUc5eWFYTmhkR2x2YmtWdVpIQnZhVzUwTzF4dWJHVjBJR1J2YldGcGJqdGNibXhsZENCaFkyTmxjM05VYjJ0bGJrVnVaSEJ2YVc1ME8xeHViR1YwSUdGalkyVnpjMVJ2YTJWdVFYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBPMXh1WEc0dkwyWjFibU4wYVc5dUlIUnZJSEJoY25ObElIUm9aU0J4ZFdWeWVTQnpkSEpwYm1jZ2FXNGdkR2hsSUdkcGRtVnVJRlZTVENCMGJ5QnZZbUYwYVc0Z1kyVnlkR0ZwYmlCMllXeDFaWE5jYm1aMWJtTjBhVzl1SUhWeWJGQmhjbk5sY2loMWNtd3NJRzVoYldVcElIdGNiaUFnYm1GdFpTQTlJRzVoYldVdWNtVndiR0ZqWlNndlcxeGNXMTB2TENBblhGeGNYRnhjV3ljcExuSmxjR3hoWTJVb0wxdGNYRjFkTHl3Z0oxeGNYRnhjWEYwbktUdGNiaUFnYkdWMElISmxaMlY0VXlBOUlDZGJYRnhjWENNbVAxMG5JQ3NnYm1GdFpTQXJJQ2M5S0Z0ZUppTmRLaWtuTzF4dUlDQnNaWFFnY21WblpYZ2dQU0J1WlhjZ1VtVm5SWGh3S0hKbFoyVjRVeWs3WEc0Z0lHeGxkQ0J5WlhOMWJIUnpJRDBnY21WblpYZ3VaWGhsWXloMWNtd3BPMXh1SUNCcFppQW9jbVZ6ZFd4MGN5QTlQVDBnYm5Wc2JDbGNiaUFnSUNCeVpYUjFjbTRnSnljN1hHNGdJR1ZzYzJWY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4MGMxc3hYVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMlZ1WkVoVVZGQlNaWEYxWlhOMEtHMWxkR2h2WkN3Z2RYSnNLU0I3WEc0Z0lHeGxkQ0I0YUhJZ1BTQnVaWGNnV0UxTVNIUjBjRkpsY1hWbGMzUW9LVHRjYmlBZ2FXWWdLQ2QzYVhSb1EzSmxaR1Z1ZEdsaGJITW5JR2x1SUhob2Npa2dlMXh1SUNBZ0lIaG9jaTV2Y0dWdUtHMWxkR2h2WkN3Z2RYSnNMQ0IwY25WbEtUdGNiaUFnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnV0VSdmJXRnBibEpsY1hWbGMzUWdJVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBdkx5QlBkR2hsY25kcGMyVXNJR05vWldOcklHbG1JRmhFYjIxaGFXNVNaWEYxWlhOMExseHVJQ0FnSUM4dklGaEViMjFoYVc1U1pYRjFaWE4wSUc5dWJIa2daWGhwYzNSeklHbHVJRWxGTENCaGJtUWdhWE1nU1VVbmN5QjNZWGtnYjJZZ2JXRnJhVzVuSUVOUFVsTWdjbVZ4ZFdWemRITXVYRzRnSUNBZ2VHaHlJRDBnYm1WM0lGaEViMjFoYVc1U1pYRjFaWE4wS0NrN1hHNGdJQ0FnZUdoeUxtOXdaVzRvYldWMGFHOWtMQ0IxY213cE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHZJRTkwYUdWeWQybHpaU3dnUTA5U1V5QnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0lHSjVJSFJvWlNCaWNtOTNjMlZ5TGx4dUlDQWdJSGhvY2lBOUlHNTFiR3c3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1SUNoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQWdJQ0JwWmlBb2VHaHlLU0I3WEc0Z0lDQWdJQ0I0YUhJdWIyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbElEMGdablZ1WTNScGIyNGdLR1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSGhvY2k1eVpXRmtlVk4wWVhSbElEMDlQU0EwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hob2NpNXpkR0YwZFhNZ1BUMDlJREl3TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbHVabThnUFNCS1UwOU9MbkJoY25ObEtIaG9jaTV5WlhOd2IyNXpaVlJsZUhRcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2hwYm1adktUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hob2NpNXpkR0YwZFhNZ1BUMDlJRFF3TUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RVYUdWeVpTQjNZWE1nWVc0Z1pYSnliM0lnY0hKdlkyVnpjMmx1WnlCMGFHVWdkRzlyWlc0bktUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVnFaV04wS0NkemIyMWxkR2hwYm1jZ1pXeHpaU0J2ZEdobGNpQjBhR0Z1SURJd01DQjNZWE1nY21WMGRYSnVaV1FuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDA3WEc0Z0lDQWdJQ0I0YUhJdWMyVnVaQ2dwTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaV3BsWTNRb0owTlBVbE1nYm05MElITjFjSEJ2Y25SbFpDY3BPMXh1SUNBZ0lIMWNiaUFnZlNrN1hHNTlYRzVjYm14bGRDQmxlR05vWVc1blpWSmxabkpsYzJoVWIydGxiaUE5SUNobWRXNWpkR2x2YmlBb2NtVm1jbVZ6YUZSdmEyVnVLU0I3WEc0Z0lHeGxkQ0JwSUQwZ1oyOXZaMnhsU1c1bWJ6dGNibHh1SUNCc1pYUWdWVkpNSUQwZ2FTNTBiMnRsYmtWdVpIQnZhVzUwSUNzZ0oyTnNhV1Z1ZEY5cFpEMG5JQ3NnYVM1amJHbGxiblJKUkNBcklDY21ZMnhwWlc1MFgzTmxZM0psZEQwbklDc2dhUzVqYkdsbGJuUlRaV055WlhRZ0t5QW5KbkpsWm5KbGMyaGZkRzlyWlc0OUp5QXJJSEpsWm5KbGMyaFViMnRsYmlBcklDY21aM0poYm5SZmRIbHdaVDF5WldaeVpYTm9YM1J2YTJWdUp6dGNibHh1SUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVJQ0FnSUhObGJtUklWRlJRVW1WeGRXVnpkQ2duVUU5VFZDY3NJRlZTVENrdWRHaGxiaWhtZFc1amRHbHZiaUFvYVc1bWJ5a2dlMXh1SUNBZ0lDQWdjbVZ6YjJ4MlpTaHBibVp2S1R0Y2JpQWdJQ0I5TENCbWRXNWpkR2x2YmlBb1pYSnliM0lwSUh0Y2JpQWdJQ0FnSUhKbGFtVmpkQ2hsY25KdmNpazdYRzRnSUNBZ2ZTazdYRzVjYmlBZ2ZTazdYRzU5S1R0Y2JseHViR1YwSUdkbGJtVnlZWFJsUVhOelpYSjBhVzl1VjJsMGFFRmpZMlZ6YzFSdmEyVnVJRDBnS0NCbWRXNWpkR2x2YmlBb1kyOXVkR1Z1ZEhNc0lHVjRjR2x5WlhNc0lHbHVabThwSUh0Y2JseHVJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJSE5sYm1SSVZGUlFVbVZ4ZFdWemRDZ25SMFZVSnl3Z2RYTmxja2x1Wm05RmJtUndiMmx1ZENocGJtWnZLU2t1ZEdobGJpaG1kVzVqZEdsdmJpQW9hVzVtYjFSdmEyVnVLU0I3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblcwOUJWVlJJTWk1blpXNWxjbUYwWlVGemMyVnlkR2x2YmwwZ2IySjBZV2x1WldRZ2RYTmxjaUJ3Y205bWFXeGxJQ2NzSUdsdVptOVViMnRsYmlrN1hHNWNiaUFnSUNBZ0lHeGxkQ0JoYzNObGNuUnBiMjRnUFNCaWRHOWhLRXBUVDA0dWMzUnlhVzVuYVdaNUtIc2dkRzlyWlc1SlJEb2dhVzVtYnk1aFkyTmxjM05mZEc5clpXNHNJSFJ2YTJWdVNVUktVMDlPT2lCcGJtWnZWRzlyWlc0c0lIQjFZbXhwWTB0bGVUb2dZMjl1ZEdWdWRITWdmU2twTzF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdFBRVlZVU0RJdVoyVnVaWEpoZEdWQmMzTmxjblJwYjI1ZElHRjBiMklnWVhOelpYSjBhVzl1T2ljc0lHRjBiMklvWVhOelpYSjBhVzl1S1NrN1hHNGdJQ0FnSUNCc1pYUWdhV1J3UW5WdVpHeGxJRDBnZXlCa2IyMWhhVzQ2SUdSdmJXRnBiaXdnY0hKdmRHOWpiMnc2SUNkUFFWVlVTREluSUgwN1hHNWNiaUFnSUNBZ0lDOHZWRTlFVHlCa1pXeGxkR1VnYkdGMFpYSWdkR2hsSUdacFpXeGtJR2x1Wm05VWIydGxiaXdnWVc1a0lHUmxiR1YwWlNCMGFHVWdibVZsWkNCcGJpQjBhR1VnWlhoaGJYQnNaVnh1SUNBZ0lDQWdiR1YwSUhKbGRIVnlibFpoYkhWbElEMGdleUJoYzNObGNuUnBiMjQ2SUdGemMyVnlkR2x2Yml3Z2FXUndPaUJwWkhCQ2RXNWtiR1VzSUdWNGNHbHlaWE02SUdWNGNHbHlaWE1zSUhWelpYSlFjbTltYVd4bE9pQnBibVp2Vkc5clpXNGdmVHRjYmx4dUx5b2dJQ0FnSUNCcFpHVnVkR2wwYVdWelcyNUpaR1Z1ZEdsMGVWMGdQU0J5WlhSMWNtNVdZV3gxWlR0Y2JpQWdJQ0FnSUNzcmJrbGtaVzUwYVhSNU8xeHVLaTljYmlBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkYlQwRlZWRWd5TG1kbGJtVnlZWFJsUVhOelpYSjBhVzl1WFNCeVpYUjFjbTVwYm1jNklDY3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtISmxkSFZ5YmxaaGJIVmxLU2s3WEc1Y2JpQWdJQ0FnSUhKbGMyOXNkbVVvY21WMGRYSnVWbUZzZFdVcE8xeHVJQ0FnSUgwcE8xeHVJQ0I5S1R0Y2JuMHBPMXh1WEc1c1pYUWdaMlZ1WlhKaGRHVkJjM05sY25ScGIyNVhhWFJvUTI5a1pWUnZhMlZ1SUQwZ0tHWjFibU4wYVc5dUlDZ2dZMjl1ZEdWdWRITXNJR1Y0Y0dseVpYTXNJR2hwYm5RcElIdGNiaUFnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1SUNoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQWdJQ0JzWlhRZ1kyOWtaU0E5SUhWeWJGQmhjbk5sY2lob2FXNTBMQ0FuWTI5a1pTY3BPMXh1WEc0Z0lDQWdhV1lnS0NGamIyUmxLU0J5WldwbFkzUW9KMXRQUVZWVVNESXVaMlZ1WlhKaGRHVkJjM05sY25ScGIyNVhhWFJvUTI5a1pWMGdZMjlrWlNCdWIzUWdjbVYwZFhKdVpXUWdZbmtnZEdobElHRjFkR2hsYm5ScFkyRjBhVzl1T2lBbkxDQm9hVzUwS1R0Y2JseHVJQ0FnSUNBZ2MyVnVaRWhVVkZCU1pYRjFaWE4wS0NkUVQxTlVKeXdnZEc5clpXNUZibVJ3YjJsdWRDaGpiMlJsS1NrdWRHaGxiaWhtZFc1amRHbHZiaUFvYVc1bWJ5a2dlMXh1WEc0Z0lDQWdJQ0FnSUdsbUlDaHBibVp2TG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2RoWTJObGMzTmZkRzlyWlc0bktTa2dYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2huWlc1bGNtRjBaVUZ6YzJWeWRHbHZibGRwZEdoQlkyTmxjM05VYjJ0bGJpZ2dZMjl1ZEdWdWRITXNJR1Y0Y0dseVpYTXNJR2x1Wm04cElDazdYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2NtVnFaV04wS0NkYlQwRlZWRWd5TG1kbGJtVnlZWFJsUVhOelpYSjBhVzl1VjJsMGFFTnZaR1ZkSUdGalkyVnpjeUIwYjJ0bGJpQnViM1FnY21WMGRYSnVaV1FnYVc0Z2RHaGxJR1Y0WTJoaGJtZGxJR052WkdVZ2NtVnpkV3gwT2lBbkxDQnBibVp2S1R0Y2JpQWdJQ0FnSUgwc0lHWjFibU4wYVc5dUlDaGxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnliM0lwTzF4dUlDQWdJQ0FnZlNrN1hHNWNiaUFnZlNrN1hHNTlLVHRjYmx4dWJHVjBJR2RsZEVGalkyVnpjMVJ2YTJWdVYybDBhRU52WkdWVWIydGxiaUE5SUNobWRXNWpkR2x2YmlBb2NtVnpiM1Z5WTJWekxDQnNiMmRwYmlrZ2UxeHVJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJR3hsZENCamIyUmxJRDBnZFhKc1VHRnljMlZ5S0d4dloybHVMQ0FuWTI5a1pTY3BPMXh1WEc0Z0lDQWdhV1lnS0NGamIyUmxLU0J5WldwbFkzUW9KMXRQUVZWVVNESXVaMlYwUVdOalpYTnpWRzlyWlc1WGFYUm9RMjlrWlZSdmEyVnVYU0JqYjJSbElHNXZkQ0J5WlhSMWNtNWxaQ0JpZVNCMGFHVWdiRzluYVc0Z2NtVnpkV3gwT2lBbkxDQnNiMmRwYmlrN1hHNWNiaUFnSUNBZ0lITmxibVJJVkZSUVVtVnhkV1Z6ZENnblVFOVRWQ2NzSUdGalkyVnpjMVJ2YTJWdVJXNWtjRzlwYm5Rb1kyOWtaU2twTG5Sb1pXNG9ablZ1WTNScGIyNGdLR2x1Wm04cElIdGNibHh1SUNBZ0lDQWdJQ0JwWmlBb2FXNW1ieTVvWVhOUGQyNVFjbTl3WlhKMGVTZ25ZV05qWlhOelgzUnZhMlZ1SnlrcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ1pYaHdhWEpsY3lBOUlHZGxkRVY0Y0dseVpYTW9hVzVtYnlrN1hHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTQW9ZV05qWlhOelZHOXJaVzVTWlhOMWJIUW9jbVZ6YjNWeVkyVnpMQ0JwYm1adkxtRmpZMlZ6YzE5MGIydGxiaXdnWlhod2FYSmxjeXdnYVc1bWJ5a3BPMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdjbVZxWldOMEtDZGJUMEZWVkVneUxtZGxkRUZqWTJWemMxUnZhMlZ1VjJsMGFFTnZaR1ZVYjJ0bGJsMGdZV05qWlhOeklIUnZhMlZ1SUc1dmRDQnlaWFIxY201bFpDQnBiaUIwYUdVZ1pYaGphR0Z1WjJVZ1kyOWtaU0J5WlhOMWJIUTZJQ2NzSUdsdVptOHBPMXh1SUNBZ0lDQWdmU3dnWm5WdVkzUnBiMjRnS0dWeWNtOXlLU0I3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25KdmNpazdYRzRnSUNBZ0lDQjlLVHRjYmx4dUlDQjlLVHRjYm4wcE8xeHVYRzVzWlhRZ1oyVjBSWGh3YVhKbGN5QTlJQ2htZFc1amRHbHZiaUFvZFhKc0tTQjdYRzRnSUd4bGRDQmxlSEJwY21WeklEMGdkWEpzVUdGeWMyVnlLSFZ5YkN3Z0oyVjRjR2x5WlhOZmFXNG5LVHRjYmx4dUlDQnBaaUFvWlhod2FYSmxjeWtnWlhod2FYSmxjeUE5SUdWNGNHbHlaWE1nS3lCTllYUm9MbVpzYjI5eUtFUmhkR1V1Ym05M0tDa2dMeUF4TURBd0tUdGNiaUFnWld4elpTQmxlSEJwY21WeklEMGdNekUxTXpZd01EQXdNQ0FySUUxaGRHZ3VabXh2YjNJb1JHRjBaUzV1YjNjb0tTQXZJREV3TURBcE8xeHVYRzRnSUhKbGRIVnliaUJsZUhCcGNtVnpPMXh1WEc1OUtUdGNibHh1YkdWMElHRmpZMlZ6YzFSdmEyVnVVbVZ6ZFd4MElEMGdLR1oxYm1OMGFXOXVJQ2h5WlhOdmRYSmpaWE1zSUdGalkyVnpjMVJ2YTJWdUxDQmxlSEJwY21WekxDQnBibkIxZEN3Z2NtVm1jbVZ6YUNrZ2UxeHVYRzRnSUd4bGRDQnlaWE4xYkhRZ1BTQjdJR1J2YldGcGJqb2daRzl0WVdsdUxDQnlaWE52ZFhKalpYTTZJSEpsYzI5MWNtTmxjeXdnWVdOalpYTnpWRzlyWlc0NklHRmpZMlZ6YzFSdmEyVnVMQ0JsZUhCcGNtVnpPaUJsZUhCcGNtVnpMQ0JwYm5CMWREb2dhVzV3ZFhRZ2ZUdGNibHh1SUNCcFppQW9jbVZtY21WemFDa2djbVZ6ZFd4MExuSmxabkpsYzJnZ1BTQnlaV1p5WlhOb08xeHVYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYRzVjYm4wcE8xeHVYRzR2S2lwY2Jpb2dTV1JsYm5ScGRIa2dVSEp2ZG1sa1pYSWdVSEp2ZUhsY2Jpb3ZYRzVsZUhCdmNuUWdiR1YwSUVsa2NGQnliM2g1SUQwZ2UxeHVYRzRnSUM4cUtseHVJQ0FxSUVaMWJtTjBhVzl1SUhSdklIWmhiR2xrWVhSbElHRnVJR2xrWlc1MGFYUjVJRUZ6YzJWeWRHbHZiaUJ5WldObGFYWmxaRnh1SUNBcUlGUlBSRThnWVdSa0lHUmxkR0ZwYkhNZ2IyWWdkR2hsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVMQ0JoYm1RZ2FXMXdjbTkyWlNCMGFHVWdhVzF3YkdWdFpXNTBZWFJwYjI1Y2JpQWdLbHh1SUNBcUlFQndZWEpoYlNBZ2UybGtjRWx1Wm05OUlDQWdJQ0FnVDJKcVpXTjBJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJRWxrVUNCbGJtUndiMmx1ZEhOY2JpQWdLaUJBY0dGeVlXMGdJSHRoYzNObGNuUnBiMjU5SUNBZ0lFbGtaVzUwYVhSNUlFRnpjMlZ5ZEdsdmJpQjBieUJpWlNCMllXeHBaR0YwWldSY2JpQWdLaUJBY0dGeVlXMGdJSHR2Y21sbmFXNTlJQ0FnSUNBZ0lFOXlhV2RwYmlCd1lYSmhiV1YwWlhJZ2RHaGhkQ0JwWkdWdWRHbG1hV1Z6SUhSb1pTQnZjbWxuYVc0Z2IyWWdkR2hsSUZKVVExQmxaWEpEYjI1dVpXTjBhVzl1WEc0Z0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdJQ0FnSUNCU1pYUjFjbTV6SUdFZ2NISnZiV2x6WlNCM2FYUm9JSFJvWlNCcFpHVnVkR2wwZVNCaGMzTmxjblJwYjI0Z2RtRnNhV1JoZEdsdmJpQnlaWE4xYkhSY2JpQWdLaTljYmlBZ2RtRnNhV1JoZEdWQmMzTmxjblJwYjI0NklDaGpiMjVtYVdjc0lHRnpjMlZ5ZEdsdmJpd2diM0pwWjJsdUtTQTlQaUI3WEc0Z0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkYlQwRlZWRWd5TG5aaGJHbGtZWFJsUVhOelpYSjBhVzl1WFNCaGMzTmxjblJwYjI0NklDY3NJR0YwYjJJb1lYTnpaWEowYVc5dUtTazdYRzRnSUNBZ2RYTmxja2x1Wm05RmJtUndiMmx1ZENBOUlHTnZibVpwWnk1MWMyVnlTVzVtYjBWdVpIQnZhVzUwTzF4dUlDQWdJR1J2YldGcGJpQTlJR052Ym1acFp5NWtiMjFoYVc0N1hHNWNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVMeThnSUNBZ0lDQnNaWFFnYVNBOUlHbGtjRWx1Wm04N1hHNGdJQ0FnSUNCc1pYUWdaR1ZqYjJSbFpFTnZiblJsYm5RZ1BTQmhkRzlpS0dGemMyVnlkR2x2YmlrN1hHNGdJQ0FnSUNCc1pYUWdZMjl1ZEdWdWRDQTlJRXBUVDA0dWNHRnljMlVvWkdWamIyUmxaRU52Ym5SbGJuUXBPMXh1SUNBZ0lDQWdjMlZ1WkVoVVZGQlNaWEYxWlhOMEtDZEhSVlFuTENCamIyNW1hV2N1ZG1Gc2FXUmhkR1ZCYzNObGNuUnBiMjVGYm1Sd2IybHVkQ2g3WVdOalpYTnpYM1J2YTJWdU9pQmpiMjUwWlc1MExuUnZhMlZ1U1VRc0lHbHVjSFYwT2lCamIyNTBaVzUwTG5SdmEyVnVTVVJLVTA5T0lIMHBLUzUwYUdWdUtISmxjM1ZzZENBOVBpQjdYRzRnSUNBZ0lDQWdJR2xtSUNoS1UwOU9Mbk4wY21sdVoybG1lU2h5WlhOMWJIUXBJRDA5UFNCS1UwOU9Mbk4wY21sdVoybG1lU2hqYjI1MFpXNTBMblJ2YTJWdVNVUktVMDlPS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQzh2SUNBZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwTG1oaGMwOTNibEJ5YjNCbGNuUjVLQ2R1WVcxbEp5a3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hzZ2FXUmxiblJwZEhrNklHTnZibVpwWnk1amIyNTJaWEowVlhObGNsQnliMlpwYkdVb2NtVnpkV3gwS1M1cFpDd2dZMjl1ZEdWdWRITTZJR052Ym5SbGJuUXVjSFZpYkdsalMyVjVJSDBwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENnbmFXNTJZV3hwWkNjcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLUzVqWVhSamFDaGxjbklnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnlLVHRjYmlBZ0lDQWdJSDBwTzF4dUlDQWdJSDBwTzF4dUlDQjlMRnh1SUNBdktseHVJQ0FnSUhKbFpuSmxjMmhCYzNObGNuUnBiMjQ2SUNocFpHVnVkR2wwZVNrZ1BUNGdlMXh1SUNBZ0lDQWdMeTlqYjI1emIyeGxMbXh2WnlnblVGSlBXRms2Y21WbWNtVnphRUZ6YzJWeWRHbHZianB2YkdSSlpHVnVkR2wwZVNjc0lHbGtaVzUwYVhSNUtUdGNiaUFnSUNBZ0lHeGxkQ0JwSUQwZ1oyOXZaMnhsU1c1bWJ6dGNiaUFnWEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHBaR1Z1ZEdsMGVTNXBibVp2TG5KbFpuSmxjMmhVYjJ0bGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUdWNFkyaGhibWRsVW1WbWNtVnphRlJ2YTJWdUtHbGtaVzUwYVhSNUxtbHVabTh1Y21WbWNtVnphRlJ2YTJWdUtTNTBhR1Z1S0daMWJtTjBhVzl1S0haaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVc1bWIxUnZhMlZ1VlZKTUlEMGdhUzUxYzJWeWFXNW1ieUFySUhaaGJIVmxMbUZqWTJWemMxOTBiMnRsYmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sYm1SSVZGUlFVbVZ4ZFdWemRDZ25SMFZVSnl3Z2FXNW1iMVJ2YTJWdVZWSk1LUzUwYUdWdUtHWjFibU4wYVc5dUtHbHVabTlVYjJ0bGJpa2dlMXh1SUNCY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbGtaVzUwYVhSNVFuVnVaR3hsSUQwZ2UyRmpZMlZ6YzFSdmEyVnVPaUIyWVd4MVpTNWhZMk5sYzNOZmRHOXJaVzRzSUdsa1ZHOXJaVzQ2SUhaaGJIVmxMbWxrWDNSdmEyVnVMQ0J5WldaeVpYTm9WRzlyWlc0NklHbGtaVzUwYVhSNUxtbHVabTh1Y21WbWNtVnphRlJ2YTJWdUxDQjBiMnRsYmxSNWNHVTZJR2xrWlc1MGFYUjVMbWx1Wm04dWRHOXJaVzVVZVhCbExDQnBibVp2Vkc5clpXNDZJR2x1Wm05VWIydGxibjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcFpGUnZhMlZ1VlZKTUlEMGdhUzUwYjJ0bGJrbHVabThnS3lCMllXeDFaUzVwWkY5MGIydGxianRjYmlBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dmIySjBZV2x1SUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUhSb1pTQjFjMlZ5SUdsa1ZHOXJaVzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZ1WkVoVVZGQlNaWEYxWlhOMEtDZEhSVlFuTENCcFpGUnZhMlZ1VlZKTUtTNTBhR1Z1S0daMWJtTjBhVzl1S0dsa1ZHOXJaVzRwSUh0Y2JpQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1JsYm5ScGRIbENkVzVrYkdVdWRHOXJaVzVKUkVwVFQwNGdQU0JwWkZSdmEyVnVPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xrWlc1MGFYUjVRblZ1Wkd4bExtVjRjR2x5WlhNZ1BTQnBaRlJ2YTJWdUxtVjRjRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkdWdWRHbDBlVUoxYm1Sc1pTNWxiV0ZwYkNBOUlHbGtWRzlyWlc0dVpXMWhhV3c3WEc0Z0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2YkdSSlJGUnZhMlZ1SUQwZ1NsTlBUaTV3WVhKelpTaGhkRzlpS0dsa1pXNTBhWFI1TG1GemMyVnlkR2x2YmlrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2YkdSSlpGUnZhMlZ1VTNCc2FYUmxaQ0E5SUc5c1pFbEVWRzlyWlc0dWRHOXJaVzVKUkM1emNHeHBkQ2duTGljcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2YkdSRVpXTnZaR1ZrU1VSVWIydGxiaUE5SUVwVFQwNHVjR0Z5YzJVb1lYUnZZaWh2YkdSSlpGUnZhMlZ1VTNCc2FYUmxaRnN4WFNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwWkU1dmJtTmxJRDBnYjJ4a1JHVmpiMlJsWkVsRVZHOXJaVzR1Ym05dVkyVTdYRzRnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnlaV05sYVhabFpFbEVWRzlyWlc0Z1BTQjJZV3gxWlM1cFpGOTBiMnRsYmp0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JVYjJ0bGJsTndiR2wwWldRZ1BTQnlaV05sYVhabFpFbEVWRzlyWlc0dWMzQnNhWFFvSnk0bktUdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnWkdWamIyUmxaRWxFVkc5clpXNGdQU0JLVTA5T0xuQmhjbk5sS0dGMGIySW9hV1JVYjJ0bGJsTndiR2wwWldSYk1WMHBLVHRjYmlBZ1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVmpiMlJsWkVsRVZHOXJaVzR1Ym05dVkyVWdQU0JwWkU1dmJtTmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcGJuTmxjblJsWkU1dmJtTmxJRDBnWW5SdllTaEtVMDlPTG5OMGNtbHVaMmxtZVNoa1pXTnZaR1ZrU1VSVWIydGxiaWtwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVaWGRKUkZSdmEyVnVJRDBnYVdSVWIydGxibE53YkdsMFpXUmJNRjBnS3lBbkxpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwYm5ObGNuUmxaRTV2Ym1ObElDc2dKeTRuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXUlViMnRsYmxOd2JHbDBaV1JiTWwwN1hHNGdJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaGMzTmxjblJwYjI0Z1BTQmlkRzloS0VwVFQwNHVjM1J5YVc1bmFXWjVLSHQwYjJ0bGJrbEVPaUJ1WlhkSlJGUnZhMlZ1TENCMGIydGxia2xFU2xOUFRqb2dhV1JVYjJ0bGJuMHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FXUndRblZ1Wkd4bElEMGdlMlJ2YldGcGJqb2dKMmR2YjJkc1pTNWpiMjBuTENCd2NtOTBiMk52YkRvZ0owOUpSRU1uZlR0Y2JpQWdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeTlVVDBSUElHUmxiR1YwWlNCc1lYUmxjaUIwYUdVZ1ptbGxiR1FnYVc1bWIxUnZhMlZ1TENCaGJtUWdaR1ZzWlhSbElIUm9aU0J1WldWa0lHbHVJSFJvWlNCbGVHRnRjR3hsWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElISmxkSFZ5YmxaaGJIVmxJRDBnZTJGemMyVnlkR2x2YmpvZ1lYTnpaWEowYVc5dUxDQnBaSEE2SUdsa2NFSjFibVJzWlN3Z2FXNW1iem9nYVdSbGJuUnBkSGxDZFc1a2JHVXNJR2x1Wm05VWIydGxiam9nYVc1bWIxUnZhMlZ1ZlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2RRVWs5WVdUcHlaV1p5WlhOb1FYTnpaWEowYVc5dU9tNWxkMGxrWlc1MGFYUjVKeXdnY21WMGRYSnVWbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjMjlzZG1Vb2NtVjBkWEp1Vm1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh1SUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlMQ292WEc1Y2JpQWdMeW9xWEc0Z0lDb2dSblZ1WTNScGIyNGdkRzhnWjJWdVpYSmhkR1VnWVc0Z2FXUmxiblJwZEhrZ1FYTnpaWEowYVc5dVhHNGdJQ3BjYmlBZ0tpQkFjR0Z5WVcwZ0lIdHBaSEJKYm1admZTQWdJQ0FnSUU5aWFtVmpkQ0JwYm1admNtMWhkR2x2YmlCaFltOTFkQ0JKWkZBZ1pXNWtjRzlwYm5SelhHNGdJQ29nUUhCaGNtRnRJQ0I3WTI5dWRHVnVkSE45SUZSb1pTQmpiMjUwWlc1MGN5QnBibU5zZFdSbGN5QnBibVp2Y20xaGRHbHZiaUJoWW05MWRDQjBhR1VnYVdSbGJuUnBkSGtnY21WalpXbDJaV1JjYmlBZ0tpQkFjR0Z5WVcwZ0lIdHZjbWxuYVc1OUlFOXlhV2RwYmlCd1lYSmhiV1YwWlhJZ2RHaGhkQ0JwWkdWdWRHbG1hV1Z6SUhSb1pTQnZjbWxuYVc0Z2IyWWdkR2hsSUZKVVExQmxaWEpEYjI1dVpXTjBhVzl1WEc0Z0lDb2dRSEJoY21GdElDQjdkWE5sY201aGJXVklhVzUwZlNCdmNIUnBiMjVoYkNCMWMyVnlibUZ0WlVocGJuUWdjR0Z5WVcxbGRHVnlYRzRnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ2NtVjBkWEp1Y3lCaElIQnliMjFwYzJVZ2QybDBhQ0JoYmlCcFpHVnVkR2wwZVNCaGMzTmxjblJwYjI1Y2JpQWdLaTljYmlBZ1oyVnVaWEpoZEdWQmMzTmxjblJwYjI0NklDaGpiMjVtYVdjc0lHTnZiblJsYm5SekxDQnZjbWxuYVc0c0lHaHBiblFwSUQwK0lIdGNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25XMDlCVlZSSU1pNW5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJqcGpiMjVtYVdkZEp5d2dZMjl1Wm1sbktUdGNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25XMDlCVlZSSU1pNW5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJqcGpiMjUwWlc1MGMxMG5MQ0JqYjI1MFpXNTBjeWs3WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0UFFWVlVTREl1WjJWdVpYSmhkR1ZCYzNObGNuUnBiMjQ2YjNKcFoybHVYU2NzSUc5eWFXZHBiaWs3WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0UFFWVlVTREl1WjJWdVpYSmhkR1ZCYzNObGNuUnBiMjQ2YUdsdWRGMG5MQ0JvYVc1MEtUdGNiaTh2SUNBZ0lHeGxkQ0JwSUQwZ2FXUndTVzVtYnp0Y2JpQWdJQ0IxYzJWeVNXNW1iMFZ1WkhCdmFXNTBJRDBnWTI5dVptbG5MblZ6WlhKSmJtWnZSVzVrY0c5cGJuUTdYRzRnSUNBZ2RHOXJaVzVGYm1Sd2IybHVkQ0E5SUdOdmJtWnBaeTUwYjJ0bGJrVnVaSEJ2YVc1ME8xeHVJQ0FnSUdGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRDQTlJR052Ym1acFp5NWhkWFJvYjNKcGMyRjBhVzl1Ulc1a2NHOXBiblE3WEc0Z0lDQWdaRzl0WVdsdUlEMGdZMjl1Wm1sbkxtUnZiV0ZwYmp0Y2JseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEc0Z0lDQWdMeTl6ZEdGeWRDQjBhR1VnYkc5bmFXNGdjR2hoYzJWY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRm9hVzUwS1NCN1hHNWNiaTh2SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblcwOUJWVlJJTWk1blpXNWxjbUYwWlVGemMyVnlkR2x2YmwwZ1RrOWZTRWxPVkRvZ2NtVnFaV04wYVc1bklIZHBkR2dnY21WeGRXVnpkRlZ5YkNBbkxDQnlaWEYxWlhOMFZYSnNLVHRjYmx4dUlDQWdJQ0FnSUNCeVpXcGxZM1FvZXlCdVlXMWxPaUFuU1dSUVRHOW5hVzVGY25KdmNpY3NJR3h2WjJsdVZYSnNPaUJoZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5Rb1kyOXVkR1Z1ZEhNcElIMHBPMXh1WEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0F2THlCMGFHVWdjbVZ4ZFdWemRDQm9ZWFpsSUdGc2NtVmhaSGtnWW1WbGJpQnRZV1JsTENCemJ5QnBaSEJRVW05NGVTQjNhV3hzSUhSeWVTQjBieUJoWTJObGMzTWdkR2hsSUhWelpYSWdhVzVtYjNKdFlYUnBiMjVjYmlBZ0lDQWdJQ0FnYkdWMElHVjRjR2x5WlhNZ1BTQjFjbXhRWVhKelpYSW9hR2x1ZEN3Z0oyVjRjR2x5WlhOZmFXNG5LVHRjYmx4dUlDQWdJQ0FnSUNCcFppQW9aWGh3YVhKbGN5a2daWGh3YVhKbGN5QTlJR1Y0Y0dseVpYTWdLeUJOWVhSb0xtWnNiMjl5S0VSaGRHVXVibTkzS0NrZ0x5QXhNREF3S1R0Y2JpQWdJQ0FnSUNBZ1pXeHpaU0JsZUhCcGNtVnpJRDBnTXpFMU16WXdNREF3TUNBcklFMWhkR2d1Wm14dmIzSW9SR0YwWlM1dWIzY29LU0F2SURFd01EQXBPMXh1WEc0Z0lDQWdJQ0FnSUd4bGRDQmhZMk5sYzNOVWIydGxiaUE5SUhWeWJGQmhjbk5sY2lob2FXNTBMQ0FuWVdOalpYTnpYM1J2YTJWdUp5azdYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tHRmpZMlZ6YzFSdmEyVnVLU0J5WlhOdmJIWmxLQ0JuWlc1bGNtRjBaVUZ6YzJWeWRHbHZibGRwZEdoQlkyTmxjM05VYjJ0bGJpaGpiMjUwWlc1MGN5d2daWGh3YVhKbGN5eDdZV05qWlhOelgzUnZhMlZ1T2lCaFkyTmxjM05VYjJ0bGJuMGdLU0FwTzF4dUlDQWdJQ0FnSUNCbGJITmxJSEpsYzI5c2RtVW9JR2RsYm1WeVlYUmxRWE56WlhKMGFXOXVWMmwwYUVOdlpHVlViMnRsYmloamIyNTBaVzUwY3l3Z1pYaHdhWEpsY3l3Z2FHbHVkQ2tnS1R0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TENCbWRXNWpkR2x2YmlBb1pTa2dlMXh1WEc0Z0lDQWdJQ0J5WldwbFkzUW9aU2s3WEc0Z0lDQWdmU2s3WEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHOGdaMlYwSUdGdUlFRmpZMlZ6Y3lCVWIydGxibHh1SUNBcVhHNGdJQ29nUUhCaGNtRnRJQ0I3WTI5dVptbG5mU0FnSUNBZ0lFOWlhbVZqZENCcGJtWnZjbTFoZEdsdmJpQmhZbTkxZENCSlpGQWdaVzVrY0c5cGJuUnpYRzRnSUNvZ1FIQmhjbUZ0SUNCN2NtVnpiM1Z5WTJWemZTQlBZbXBsWTNRZ1kyOXVkR1Z1ZEhNZ2FXNWpiSFZrWlhNZ2FXNW1iM0p0WVhScGIyNGdZV0p2ZFhRZ2RHaGxJR2xrWlc1MGFYUjVJSEpsWTJWcGRtVmtYRzRnSUNvZ1FISmxkSFZ5YmlCN1VISnZiV2x6WlgwZ2NtVjBkWEp1Y3lCaElIQnliMjFwYzJVZ2QybDBhQ0JoYmlCcFpHVnVkR2wwZVNCaGMzTmxjblJwYjI1Y2JpQWdLaTljYmx4dUlDQm5aWFJCWTJObGMzTlViMnRsYmtGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWREb2dLR052Ym1acFp5d2djbVZ6YjNWeVkyVnpLU0E5UGlCN1hHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdFBRVlZVU0RJdVoyVjBRV05qWlhOelZHOXJaVzVCZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5RNlkyOXVabWxuWFNjc0lHTnZibVpwWnlrN1hHNHZMeUFnSUNCamIyNXpiMnhsTG14dlp5Z25XMDlCVlZSSU1pNW5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJqcGpiMjUwWlc1MGMxMG5MQ0JqYjI1MFpXNTBjeWs3WEc0dkx5QWdJQ0JqYjI1emIyeGxMbXh2WnlnblcwOUJWVlJJTWk1blpXNWxjbUYwWlVGemMyVnlkR2x2YmpwdmNtbG5hVzVkSnl3Z2IzSnBaMmx1S1R0Y2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnblcwOUJWVlJJTWk1blpYUkJZMk5sYzNOVWIydGxia0YxZEdodmNtbHpZWFJwYjI1RmJtUndiMmx1ZERweVpYTnZkWEpqWlhOZEp5d2djbVZ6YjNWeVkyVnpLVHRjYmk4dklDQWdJR3hsZENCcElEMGdhV1J3U1c1bWJ6dGNiaUFnSUNCaFkyTmxjM05VYjJ0bGJrRjFkR2h2Y21sellYUnBiMjVGYm1Sd2IybHVkQ0E5SUdOdmJtWnBaeTVoWTJObGMzTlViMnRsYmtGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWREdGNibHh1SUNBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0FnTHk5emRHRnlkQ0IwYUdVZ2JHOW5hVzRnY0doaGMyVmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0Z0tISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHVYRzRnSUNBZ0lDQWdJSEpsYzI5c2RtVW9JR0ZqWTJWemMxUnZhMlZ1UVhWMGFHOXlhWE5oZEdsdmJrVnVaSEJ2YVc1MEtISmxjMjkxY21ObGN5a3BPMXh1WEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRnS0dVcElIdGNibHh1SUNBZ0lDQWdjbVZxWldOMEtHVXBPMXh1SUNBZ0lIMHBPMXh1SUNCOUxGeHVJQ0JjYmlBZ0x5b3FYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHOGdaMlYwSUdGdUlFRmpZMlZ6Y3lCVWIydGxibHh1SUNBcVhHNGdJQ29nUUhCaGNtRnRJQ0I3YVdSd1NXNW1iMzBnSUNBZ0lDQlBZbXBsWTNRZ2FXNW1iM0p0WVhScGIyNGdZV0p2ZFhRZ1NXUlFJR1Z1WkhCdmFXNTBjMXh1SUNBcUlFQndZWEpoYlNBZ2UyTnZiblJsYm5SemZTQlVhR1VnWTI5dWRHVnVkSE1nYVc1amJIVmtaWE1nYVc1bWIzSnRZWFJwYjI0Z1lXSnZkWFFnZEdobElHbGtaVzUwYVhSNUlISmxZMlZwZG1Wa1hHNGdJQ29nUUhCaGNtRnRJQ0I3YjNKcFoybHVmU0JQY21sbmFXNGdjR0Z5WVcxbGRHVnlJSFJvWVhRZ2FXUmxiblJwWm1sbGN5QjBhR1VnYjNKcFoybHVJRzltSUhSb1pTQlNWRU5RWldWeVEyOXVibVZqZEdsdmJseHVJQ0FxSUVCd1lYSmhiU0FnZTJ4dloybHVmU0J2Y0hScGIyNWhiQ0JzYjJkcGJpQnlaWE4xYkhSY2JpQWdLaUJBY21WMGRYSnVJSHRRY205dGFYTmxmU0J5WlhSMWNtNXpJR0VnY0hKdmJXbHpaU0IzYVhSb0lHRnVJR2xrWlc1MGFYUjVJR0Z6YzJWeWRHbHZibHh1SUNBcUwxeHVYRzRnSUdkbGRFRmpZMlZ6YzFSdmEyVnVPaUFvWTI5dVptbG5MQ0J5WlhOdmRYSmpaWE1zSUd4dloybHVLU0E5UGlCN1hHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdFBRVlZVU0RJdVoyVjBRV05qWlhOelZHOXJaVzQ2WTI5dVptbG5YU2NzSUdOdmJtWnBaeWs3WEc0dkx5QWdJQ0JqYjI1emIyeGxMbXh2WnlnblcwOUJWVlJJTWk1blpXNWxjbUYwWlVGemMyVnlkR2x2YmpwamIyNTBaVzUwYzEwbkxDQmpiMjUwWlc1MGN5azdYRzR2THlBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzA5QlZWUklNaTVuWlc1bGNtRjBaVUZ6YzJWeWRHbHZianB2Y21sbmFXNWRKeXdnYjNKcFoybHVLVHRjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzA5QlZWUklNaTVuWlhSQlkyTmxjM05VYjJ0bGJqcHNiMmRwYmwwbkxDQnNiMmRwYmlrN1hHNHZMeUFnSUNCc1pYUWdhU0E5SUdsa2NFbHVabTg3WEc0Z0lDQWdZV05qWlhOelZHOXJaVzVGYm1Sd2IybHVkQ0E5SUdOdmJtWnBaeTVoWTJObGMzTlViMnRsYmtWdVpIQnZhVzUwTzF4dUlDQWdJR1J2YldGcGJpQTlJR052Ym1acFp5NWtiMjFoYVc0N1hHNWNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4dUlDQWdJQzh2YzNSaGNuUWdkR2hsSUd4dloybHVJSEJvWVhObFhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1SUNoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdkR2hsSUhWelpYSWdhWE1nYkc5bloyVmthVzRzSUhSeWVTQjBieUJsZUhSeVlXTjBJSFJvWlNCQlkyTmxjM01nVkc5clpXNGdZVzVrSUdsMGN5QmxlSEJwY21WelhHNGdJQ0FnSUNBZ0lHeGxkQ0JsZUhCcGNtVnpJRDBnWjJWMFJYaHdhWEpsY3loc2IyZHBiaWs3WEc1Y2JpQWdJQ0FnSUNBZ2JHVjBJR0ZqWTJWemMxUnZhMlZ1SUQwZ2RYSnNVR0Z5YzJWeUtHeHZaMmx1TENBbllXTmpaWE56WDNSdmEyVnVKeWs3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR0ZqWTJWemMxUnZhMlZ1S1NCeVpYTnZiSFpsS0NCaFkyTmxjM05VYjJ0bGJsSmxjM1ZzZENoeVpYTnZkWEpqWlhNc0lHRmpZMlZ6YzFSdmEyVnVMQ0JsZUhCcGNtVnpMQ0JzYjJkcGJpa2dLVHRjYmlBZ0lDQWdJQ0FnWld4elpTQnlaWE52YkhabEtDQm5aWFJCWTJObGMzTlViMnRsYmxkcGRHaERiMlJsVkc5clpXNG9jbVZ6YjNWeVkyVnpMQ0JzYjJkcGJpa2dLVHRjYmlBZ0lDQjlMQ0JtZFc1amRHbHZiaUFvWlNrZ2UxeHVYRzRnSUNBZ0lDQnlaV3BsWTNRb1pTazdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JseHVYRzVjYm4wN1hHNWNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUxpOWtaWFl0Y0hKdmRHOXpkSFZpY3k5emNtTXZhV1J3Y0hKdmVIa3ZUMEZWVkVndWFuTWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8xXG4iKTsKCi8qKiovIH0pLAovKiAyICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKZXZhbCgiXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmNvbnZlcnRVc2VyUHJvZmlsZSA9IGNvbnZlcnRVc2VyUHJvZmlsZTtcbmV4cG9ydHMudXNlckluZm9FbmRwb2ludCA9IHVzZXJJbmZvRW5kcG9pbnQ7XG5leHBvcnRzLmF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGF1dGhvcmlzYXRpb25FbmRwb2ludDtcbmV4cG9ydHMudmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludCA9IHZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQ7XG5cbi8qXG5cdFNvIHRoYXQgYW4gYXBwbGljYXRpb24gY2FuIHVzZSBGYWNlYm9vaydzIE9BdXRoIDIuMCBhdXRoZW50aWNhdGlvbiBzeXN0ZW0gZm9yIHVzZXIgbG9naW4sXG4gIGZpcnN0IGlzIHJlcXVpcmVkIHRvIHNldCB1cCBhIHByb2plY3QgaW4gdGhlIEZhY2Vib29rIERldmVsb3BlcnMgQ29uc29sZSAoaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9hcHBzLykgXG4gIHRvIG9idGFpbiBPQXV0aCAyLjAgY3JlZGVudGlhbHMgYW5kIHNldCBhIHJlZGlyZWN0IFVSSS5cbiAqL1xudmFyIHJlZGlyZWN0VVJJID0gbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUgKyAobG9jYXRpb24ucG9ydCAhPT0gJycgPyAnOicgKyBsb2NhdGlvbi5wb3J0IDogJycpO1xuXG52YXIgZmFjZWJvb2tJbmZvID0ge1xuICBcImNsaWVudElEXCI6IFwiNTE2ODUwMDc4Njg1MjkwXCIsXG4gIFwiYXV0aG9yaXNhdGlvbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3YyLjExL2RpYWxvZy9vYXV0aD9cIixcbiAgXCJ1c2VyaW5mb1wiOiBcImh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3YyLjIvbWUvP2ZpZWxkcz1pZCxmaXJzdF9uYW1lLGxhc3RfbmFtZSxuYW1lLHBpY3R1cmUsZW1haWwmYWNjZXNzX3Rva2VuPVwiLFxuICBcInR5cGVcIjogXCJ0b2tlblwiLFxuICBcImdyYW50ZWRfc2NvcGVzXCI6IFwiZW1haWwscHVibGljX3Byb2ZpbGVcIixcbiAgXCJzdGF0ZVwiOiBcInN0YXRlXCIsXG4gIFwiZG9tYWluXCI6IFwiZmFjZWJvb2suY29tXCJcbn07XG5cbi8vIGZ1bmN0aW9uIHRvIGNvbnZlcnQgZ29vZ2xlIHVzZXIgcHJvZmlsZSBpbmZvIGludG8gc3RhbmRhcmQgcmVUSElOSyB1c2VyIHByb2ZpbGUgb2JqZWN0XG5cbmZ1bmN0aW9uIGNvbnZlcnRVc2VyUHJvZmlsZSh1c2VyUHJvZmlsZSkge1xuXG4gIGNvbnNvbGUubG9nKCdbRmFjZWJvb2xVc2VyUHJvZmlsZUNvbnZlcnRlcl0gJywgdXNlclByb2ZpbGUpO1xuICB1c2VyUHJvZmlsZS5uYW1lID0gdXNlclByb2ZpbGUuZmlyc3RfbmFtZSArICcgJyArIHVzZXJQcm9maWxlLmxhc3RfbmFtZTtcblxuICB1c2VyUHJvZmlsZS51c2VyVVJMID0gJ3VzZXI6Ly9mYWNlYm9vay5jb20vJyArIHVzZXJQcm9maWxlLm5hbWU7XG5cbiAgdXNlclByb2ZpbGUucGljdHVyZSA9IHVzZXJQcm9maWxlLnBpY3R1cmUuZGF0YS51cmw7XG5cbiAgaWYgKCF1c2VyUHJvZmlsZS5oYXNPd25Qcm9wZXJ0eSgncHJlZmVycmVkX3VzZXJuYW1lJykpIHVzZXJQcm9maWxlLnByZWZlcnJlZF91c2VybmFtZSA9IHVzZXJQcm9maWxlLmxhc3RfbmFtZTtcblxuICByZXR1cm4gdXNlclByb2ZpbGU7XG59XG5cbmZ1bmN0aW9uIHVzZXJJbmZvRW5kcG9pbnQoaW5mbykge1xuXG4gIHJldHVybiBmYWNlYm9va0luZm8udXNlcmluZm8gKyBpbmZvLmFjY2Vzc190b2tlbjtcbn1cblxuZnVuY3Rpb24gYXV0aG9yaXNhdGlvbkVuZHBvaW50KG5vbmNlKSB7XG5cbiAgdmFyIHVybCA9IGZhY2Vib29rSW5mby5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgKyAncmVkaXJlY3RfdXJpPScgKyByZWRpcmVjdFVSSSArICcmcmVzcG9uc2VfdHlwZT0nICsgZmFjZWJvb2tJbmZvLnR5cGUgKyAnJmNsaWVudF9pZD0nICsgZmFjZWJvb2tJbmZvLmNsaWVudElEICsgJyZncmFudGVkX3Njb3Blcz0nICsgZmFjZWJvb2tJbmZvLmdyYW50ZWRfc2NvcGVzICsgJyZub25jZT0nICsgbm9uY2UgKyAnJnN0YXRlPScgKyBub25jZTtcbiAgY29uc29sZS5sb2coJ1tTbGFjay5hdXRob3Jpc2F0aW9uRW5kcG9pbnRdICcsIHVybCk7XG4gIHJldHVybiB1cmw7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQoaW5mbykge1xuXG4gIHJldHVybiBmYWNlYm9va0luZm8udXNlcmluZm8gKyBpbmZvLmFjY2Vzc190b2tlbjtcbn0vLyMgc291cmNlVVJMPVttb2R1bGVdXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk0dlpHVjJMWEJ5YjNSdmMzUjFZbk12YzNKakwybGtjSEJ5YjNoNUwyWmhZMlZpYjI5ckwwWmhZMlZpYjI5ckxtcHpQemsxWW1RaVhTd2libUZ0WlhNaU9sc2lZMjl1ZG1WeWRGVnpaWEpRY205bWFXeGxJaXdpZFhObGNrbHVabTlGYm1Sd2IybHVkQ0lzSW1GMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRDSXNJblpoYkdsa1lYUmxRWE56WlhKMGFXOXVSVzVrY0c5cGJuUWlMQ0p5WldScGNtVmpkRlZTU1NJc0lteHZZMkYwYVc5dUlpd2ljSEp2ZEc5amIyd2lMQ0pvYjNOMGJtRnRaU0lzSW5CdmNuUWlMQ0ptWVdObFltOXZhMGx1Wm04aUxDSjFjMlZ5VUhKdlptbHNaU0lzSW1OdmJuTnZiR1VpTENKc2IyY2lMQ0p1WVcxbElpd2labWx5YzNSZmJtRnRaU0lzSW14aGMzUmZibUZ0WlNJc0luVnpaWEpWVWt3aUxDSndhV04wZFhKbElpd2laR0YwWVNJc0luVnliQ0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpY0hKbFptVnljbVZrWDNWelpYSnVZVzFsSWl3aWFXNW1ieUlzSW5WelpYSnBibVp2SWl3aVlXTmpaWE56WDNSdmEyVnVJaXdpYm05dVkyVWlMQ0owZVhCbElpd2lZMnhwWlc1MFNVUWlMQ0puY21GdWRHVmtYM05qYjNCbGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN096czdVVUZ6UW1kQ1FTeHJRaXhIUVVGQlFTeHJRanRSUVd0Q1FVTXNaMElzUjBGQlFVRXNaMEk3VVVGTlFVTXNjVUlzUjBGQlFVRXNjVUk3VVVGaFFVTXNlVUlzUjBGQlFVRXNlVUk3TzBGQk1VUm9RanM3T3pzN1FVRkxRU3hKUVVGSlF5eGpRVUZqUXl4VFFVRlRReXhSUVVGVUxFZEJRVzlDTEVsQlFYQkNMRWRCUVRKQ1JDeFRRVUZUUlN4UlFVRndReXhKUVVGblJFWXNVMEZCVTBjc1NVRkJWQ3hMUVVGclFpeEZRVUZzUWl4SFFVRjFRaXhOUVVGTlNDeFRRVUZUUnl4SlFVRjBReXhIUVVFMlF5eEZRVUUzUml4RFFVRnNRanM3UVVGRlFTeEpRVUZKUXl4bFFVRmxPMEZCUTJwQ0xHTkJRWGRDTEdsQ1FVUlFPMEZCUldwQ0xESkNRVUY1UWl3NFEwRkdVanRCUVVkcVFpeGpRVUY1UWl4eFIwRklVanRCUVVscVFpeFZRVUY1UWl4UFFVcFNPMEZCUzJwQ0xHOUNRVUY1UWl4elFrRk1VanRCUVUxcVFpeFhRVUY1UWl4UFFVNVNPMEZCVDJwQ0xGbEJRWGxDTzBGQlVGSXNRMEZCYmtJN08wRkJXVUU3TzBGQlJVOHNVMEZCVTFRc2EwSkJRVlFzUTBGQk5FSlZMRmRCUVRWQ0xFVkJRWGxET3p0QlFVVTVRME1zVlVGQlVVTXNSMEZCVWl4RFFVRlpMR2xEUVVGYUxFVkJRU3REUml4WFFVRXZRenRCUVVOQlFTeGpRVUZaUnl4SlFVRmFMRWRCUVcxQ1NDeFpRVUZaU1N4VlFVRmFMRWRCUVhsQ0xFZEJRWHBDTEVkQlFTdENTaXhaUVVGWlN5eFRRVUU1UkRzN1FVRkZRVXdzWTBGQldVMHNUMEZCV2l4SFFVRnpRaXg1UWtGQmVVSk9MRmxCUVZsSExFbEJRVE5FT3p0QlFVVkJTQ3hqUVVGWlR5eFBRVUZhTEVkQlFYTkNVQ3haUVVGWlR5eFBRVUZhTEVOQlFXOUNReXhKUVVGd1FpeERRVUY1UWtNc1IwRkJMME03TzBGQlJVRXNUVUZCU1N4RFFVRkRWQ3haUVVGWlZTeGpRVUZhTEVOQlFUSkNMRzlDUVVFelFpeERRVUZNTEVWQlEwRldMRmxCUVZsWExHdENRVUZhTEVkQlFXbERXQ3haUVVGWlN5eFRRVUUzUXpzN1FVRkhRU3hUUVVGUFRDeFhRVUZRTzBGQlEwUTdPMEZCU1Uwc1UwRkJVMVFzWjBKQlFWUXNRMEZCTUVKeFFpeEpRVUV4UWl4RlFVRm5RenM3UVVGRmNrTXNVMEZCVDJJc1lVRkJZV01zVVVGQllpeEhRVUYzUWtRc1MwRkJTMFVzV1VGQmNFTTdRVUZGUkRzN1FVRkZUU3hUUVVGVGRFSXNjVUpCUVZRc1EwRkJLMEoxUWl4TFFVRXZRaXhGUVVGelF6czdRVUZGTTBNc1RVRkJTVTRzVFVGQlRWWXNZVUZCWVZBc2NVSkJRV0lzUjBGRFRpeGxRVVJOTEVkQlExbEZMRmRCUkZvc1IwRkZUaXhwUWtGR1RTeEhRVVZqU3l4aFFVRmhhVUlzU1VGR00wSXNSMEZIVGl4aFFVaE5MRWRCUjFWcVFpeGhRVUZoYTBJc1VVRklka0lzUjBGSlRpeHJRa0ZLVFN4SFFVbGxiRUlzWVVGQllXMUNMR05CU2pWQ0xFZEJTMDRzVTBGTVRTeEhRVXROU0N4TFFVeE9MRWRCVFU0c1UwRk9UU3hIUVUxTlFTeExRVTVvUWp0QlFVOUJaQ3hWUVVGUlF5eEhRVUZTTEVOQlFWa3NaME5CUVZvc1JVRkJPRU5QTEVkQlFUbERPMEZCUTBFc1UwRkJUMEVzUjBGQlVEdEJRVU5FT3p0QlFVVk5MRk5CUVZOb1FpeDVRa0ZCVkN4RFFVRnRRMjFDTEVsQlFXNURMRVZCUVhsRE96dEJRVVU1UXl4VFFVRlBZaXhoUVVGaFl5eFJRVUZpTEVkQlFYZENSQ3hMUVVGTFJTeFpRVUZ3UXp0QlFVVkVJaXdpWm1sc1pTSTZJakl1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SmNiaThxWEc1Y2RGTnZJSFJvWVhRZ1lXNGdZWEJ3YkdsallYUnBiMjRnWTJGdUlIVnpaU0JHWVdObFltOXZheWR6SUU5QmRYUm9JREl1TUNCaGRYUm9aVzUwYVdOaGRHbHZiaUJ6ZVhOMFpXMGdabTl5SUhWelpYSWdiRzluYVc0c1hHNGdJR1pwY25OMElHbHpJSEpsY1hWcGNtVmtJSFJ2SUhObGRDQjFjQ0JoSUhCeWIycGxZM1FnYVc0Z2RHaGxJRVpoWTJWaWIyOXJJRVJsZG1Wc2IzQmxjbk1nUTI5dWMyOXNaU0FvYUhSMGNITTZMeTlrWlhabGJHOXdaWEp6TG1aaFkyVmliMjlyTG1OdmJTOWhjSEJ6THlrZ1hHNGdJSFJ2SUc5aWRHRnBiaUJQUVhWMGFDQXlMakFnWTNKbFpHVnVkR2xoYkhNZ1lXNWtJSE5sZENCaElISmxaR2x5WldOMElGVlNTUzVjYmlBcUwxeHViR1YwSUhKbFpHbHlaV04wVlZKSklEMGdiRzlqWVhScGIyNHVjSEp2ZEc5amIyd2dLeUFuTHk4bklDc2diRzlqWVhScGIyNHVhRzl6ZEc1aGJXVWdLeUFvYkc5allYUnBiMjR1Y0c5eWRDQWhQVDBnSnljZ1B5QW5PaWNnS3lCc2IyTmhkR2x2Ymk1d2IzSjBJRG9nSnljcE8xeHVYRzVzWlhRZ1ptRmpaV0p2YjJ0SmJtWnZJRDBnZTF4dUlDQmNJbU5zYVdWdWRFbEVYQ0k2SUNBZ0lDQWdJQ0FnSUNBZ0lGd2lOVEUyT0RVd01EYzROamcxTWprd1hDSXNYRzRnSUZ3aVlYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBYQ0k2SUZ3aWFIUjBjSE02THk5M2QzY3VabUZqWldKdmIyc3VZMjl0TDNZeUxqRXhMMlJwWVd4dlp5OXZZWFYwYUQ5Y0lpeGNiaUFnWENKMWMyVnlhVzVtYjF3aU9pQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKb2RIUndjem92TDJkeVlYQm9MbVpoWTJWaWIyOXJMbU52YlM5Mk1pNHlMMjFsTHo5bWFXVnNaSE05YVdRc1ptbHljM1JmYm1GdFpTeHNZWE4wWDI1aGJXVXNibUZ0WlN4d2FXTjBkWEpsTEdWdFlXbHNKbUZqWTJWemMxOTBiMnRsYmoxY0lpeGNiaUFnWENKMGVYQmxYQ0k2SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWENKMGIydGxibHdpTEZ4dUlDQmNJbWR5WVc1MFpXUmZjMk52Y0dWelhDSTZJQ0FnSUNBZ0lDQmNJbVZ0WVdsc0xIQjFZbXhwWTE5d2NtOW1hV3hsWENJc1hHNGdJRndpYzNSaGRHVmNJam9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRndpYzNSaGRHVmNJaXhjYmlBZ1hDSmtiMjFoYVc1Y0lqb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hDSm1ZV05sWW05dmF5NWpiMjFjSWx4dWZUdGNibHh1WEc1Y2JpOHZJR1oxYm1OMGFXOXVJSFJ2SUdOdmJuWmxjblFnWjI5dloyeGxJSFZ6WlhJZ2NISnZabWxzWlNCcGJtWnZJR2x1ZEc4Z2MzUmhibVJoY21RZ2NtVlVTRWxPU3lCMWMyVnlJSEJ5YjJacGJHVWdiMkpxWldOMFhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpiMjUyWlhKMFZYTmxjbEJ5YjJacGJHVW9kWE5sY2xCeWIyWnBiR1VwSUh0Y2JseHVJQ0JqYjI1emIyeGxMbXh2WnlnblcwWmhZMlZpYjI5c1ZYTmxjbEJ5YjJacGJHVkRiMjUyWlhKMFpYSmRJQ2NzSUhWelpYSlFjbTltYVd4bElDazdYRzRnSUhWelpYSlFjbTltYVd4bExtNWhiV1VnUFNCMWMyVnlVSEp2Wm1sc1pTNW1hWEp6ZEY5dVlXMWxJQ3NnSnlBbklDc2dkWE5sY2xCeWIyWnBiR1V1YkdGemRGOXVZVzFsTzF4dVhHNGdJSFZ6WlhKUWNtOW1hV3hsTG5WelpYSlZVa3dnUFNBbmRYTmxjam92TDJaaFkyVmliMjlyTG1OdmJTOG5JQ3NnZFhObGNsQnliMlpwYkdVdWJtRnRaVHRjYmx4dUlDQjFjMlZ5VUhKdlptbHNaUzV3YVdOMGRYSmxJRDBnZFhObGNsQnliMlpwYkdVdWNHbGpkSFZ5WlM1a1lYUmhMblZ5YkR0Y2JseHVJQ0JwWmlBb0lYVnpaWEpRY205bWFXeGxMbWhoYzA5M2JsQnliM0JsY25SNUtDZHdjbVZtWlhKeVpXUmZkWE5sY201aGJXVW5LU2tnWEc0Z0lIVnpaWEpRY205bWFXeGxMbkJ5WldabGNuSmxaRjkxYzJWeWJtRnRaU0E5SUhWelpYSlFjbTltYVd4bExteGhjM1JmYm1GdFpUdGNibHh1WEc0Z0lISmxkSFZ5YmlCMWMyVnlVSEp2Wm1sc1pUdGNibjFjYmx4dVhHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQjFjMlZ5U1c1bWIwVnVaSEJ2YVc1MEtHbHVabThwSUh0Y2JseHVJQ0J5WlhSMWNtNGdabUZqWldKdmIydEpibVp2TG5WelpYSnBibVp2SUNzZ2FXNW1ieTVoWTJObGMzTmZkRzlyWlc0N1hHNWNibjFjYmx4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRDaHViMjVqWlNrZ2UxeHVYRzRnSUd4bGRDQjFjbXdnUFNCbVlXTmxZbTl2YTBsdVptOHVZWFYwYUc5eWFYTmhkR2x2YmtWdVpIQnZhVzUwSUZ4dUlDQWdJQ3NnSjNKbFpHbHlaV04wWDNWeWFUMG5JQ3NnY21Wa2FYSmxZM1JWVWtsY2JpQWdJQ0FySUNjbWNtVnpjRzl1YzJWZmRIbHdaVDBuSUNzZ1ptRmpaV0p2YjJ0SmJtWnZMblI1Y0dWY2JpQWdJQ0FySUNjbVkyeHBaVzUwWDJsa1BTY2dLeUJtWVdObFltOXZhMGx1Wm04dVkyeHBaVzUwU1VSY2JpQWdJQ0FySUNjbVozSmhiblJsWkY5elkyOXdaWE05SnlBcklHWmhZMlZpYjI5clNXNW1ieTVuY21GdWRHVmtYM05qYjNCbGMxeHVJQ0FnSUNzZ0p5WnViMjVqWlQwbklDc2dibTl1WTJWY2JpQWdJQ0FySUNjbWMzUmhkR1U5SnlBcklHNXZibU5sTzF4dUlDQmpiMjV6YjJ4bExteHZaeWduVzFOc1lXTnJMbUYxZEdodmNtbHpZWFJwYjI1RmJtUndiMmx1ZEYwZ0p5d2dkWEpzS1R0Y2JpQWdjbVYwZFhKdUlIVnliRHRjYm4xY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlIWmhiR2xrWVhSbFFYTnpaWEowYVc5dVJXNWtjRzlwYm5Rb2FXNW1ieWtnZTF4dVhHNGdJSEpsZEhWeWJpQm1ZV05sWW05dmEwbHVabTh1ZFhObGNtbHVabThnS3lCcGJtWnZMbUZqWTJWemMxOTBiMnRsYmp0Y2JseHVmVnh1WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTR2WkdWMkxYQnliM1J2YzNSMVluTXZjM0pqTDJsa2NIQnliM2g1TDJaaFkyVmliMjlyTDBaaFkyVmliMjlyTG1weklsMHNJbk52ZFhKalpWSnZiM1FpT2lJaWZRPT1cbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8yXG4iKTsKCi8qKiovIH0pLAovKiAzICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKZXZhbCgiXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBJZHBQcm94eSA9IHZvaWQgMDtcbnZhciBpZHBJbmZvID0gdm9pZCAwO1xudmFyIGNvbnZlcnRVc2VyUHJvZmlsZSA9IHZvaWQgMDtcbnZhciB1c2VySW5mb0VuZHBvaW50ID0gdm9pZCAwO1xudmFyIGFjY2Vzc1Rva2VuSW5wdXQgPSB2b2lkIDA7XG5cbi8qKlxuKiBBYnN0cmFjdCBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViIHRvIGJlIGV4dGVuZGVkIGJ5IHJlYWwgSWRwIFByb3hpZXNcbiovXG5cbnZhciBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViID0gZnVuY3Rpb24gKCkge1xuXG4gIC8qKlxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXG4gICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgaWRwUHJveHkgcmVjZWl2ZWRcbiAgKlxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICAqL1xuICBmdW5jdGlvbiBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIpO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xuICAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcbiAgICBJZHBQcm94eSA9IGNvbmZpZy5pZHBQcm94eTtcbiAgICBjb252ZXJ0VXNlclByb2ZpbGUgPSBjb25maWcuY29udmVydFVzZXJQcm9maWxlO1xuICAgIGFjY2Vzc1Rva2VuSW5wdXQgPSBjb25maWcuYWNjZXNzVG9rZW5JbnB1dDtcblxuICAgIGNvbnNvbGUubG9nKCdbQWJzdHJhY3RJZHBQcm94eV0gY29uc3RydWN0b3InKTtcblxuICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7XG4gICAgICBpZiAobXNnLnRvID09PSBjb25maWcuaWRwVXJsKSB7XG5cbiAgICAgICAgX3RoaXMucmVxdWVzdFRvSWRwKG1zZyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2NyZWF0ZWQnKTtcbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cbiAgKlxuICAqIEBwYXJhbSB7bWVzc2FnZX0gIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2VCdXNcbiAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLCBbe1xuICAgIGtleTogJ3JlcXVlc3RUb0lkcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RUb0lkcChtc2cpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xuICAgICAgLy9jb25zb2xlLmluZm8oJ3JlcXVlc3RUb0lkcDonLCBtc2cuYm9keS5tZXRob2QpO1xuICAgICAgY29uc29sZS5pbmZvKCdbQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yl0gcmVjZWl2aW5nIHJlcXVlc3Q6ICcsIG1zZyk7XG5cbiAgICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XG4gICAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgICBJZHBQcm94eS5nZW5lcmF0ZUFzc2VydGlvbihfdGhpcy5jb25maWcsIHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcblxuICAgICAgICAgICAgdmFsdWUudXNlclByb2ZpbGUgPSBjb252ZXJ0VXNlclByb2ZpbGUodmFsdWUudXNlclByb2ZpbGUpO1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd2YWxpZGF0ZUFzc2VydGlvbic6XG4gICAgICAgICAgLy8gICAgICAgY29uc29sZS5pbmZvKCd2YWxpZGF0ZUFzc2VydGlvbicpO1xuICAgICAgICAgIElkcFByb3h5LnZhbGlkYXRlQXNzZXJ0aW9uKF90aGlzLmNvbmZpZywgcGFyYW1zLmFzc2VydGlvbiwgcGFyYW1zLm9yaWdpbikudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVmcmVzaEFzc2VydGlvbic6XG4gICAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygncmVmcmVzaEFzc2VydGlvbicpO1xuICAgICAgICAgIElkcFByb3h5LnJlZnJlc2hBc3NlcnRpb24ocGFyYW1zLmlkZW50aXR5KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCc6XG4gICAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygnZ2V0QWNjZXNzVG9rZW4nKTtcbiAgICAgICAgICBJZHBQcm94eS5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChfdGhpcy5jb25maWcsIHBhcmFtcy5yZXNvdXJjZXMpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2dldEFjY2Vzc1Rva2VuJzpcbiAgICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICAgIElkcFByb3h5LmdldEFjY2Vzc1Rva2VuKF90aGlzLmNvbmZpZywgcGFyYW1zLnJlc291cmNlcywgcGFyYW1zLmxvZ2luKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFsdWUuaW5wdXQgPSBhY2Nlc3NUb2tlbklucHV0KHZhbHVlLmlucHV0KTtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKlxuICAgICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXBseU1lc3NhZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHZhbHVlIH1cbiAgICAgIH07XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yi5yZXBseU1lc3NhZ2VdICcsIG1lc3NhZ2UpO1xuXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ19zZW5kU3RhdHVzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcblxuICAgICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICAgIHZhciBtc2cgPSB7XG4gICAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgICB0bzogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJyxcbiAgICAgICAgYm9keToge1xuICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBpZiAocmVhc29uKSB7XG4gICAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XG4gICAgICB9XG5cbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yjtcbn0oKTtcblxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG5cbi8qKlxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxuICovXG5cblxuZXhwb3J0cy5kZWZhdWx0ID0gQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YjsvLyMgc291cmNlVVJMPVttb2R1bGVdXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk0dlpHVjJMWEJ5YjNSdmMzUjFZbk12YzNKakwybGtjSEJ5YjNoNUwwRmljM1J5WVdOMFNXUndVSEp2ZUhsVGRIVmlMbXB6UHpJM01qUWlYU3dpYm1GdFpYTWlPbHNpU1dSd1VISnZlSGtpTENKcFpIQkpibVp2SWl3aVkyOXVkbVZ5ZEZWelpYSlFjbTltYVd4bElpd2lkWE5sY2tsdVptOUZibVJ3YjJsdWRDSXNJbUZqWTJWemMxUnZhMlZ1U1c1d2RYUWlMQ0pCWW5OMGNtRmpkRWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlJaXdpY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENJc0ltSjFjeUlzSW1OdmJtWnBaeUlzSWw5MGFHbHpJaXdpYldWemMyRm5aVUoxY3lJc0ltbGtjRkJ5YjNoNUlpd2lZMjl1YzI5c1pTSXNJbXh2WnlJc0ltRmtaRXhwYzNSbGJtVnlJaXdpYlhObklpd2lkRzhpTENKcFpIQlZjbXdpTENKeVpYRjFaWE4wVkc5SlpIQWlMQ0pmYzJWdVpGTjBZWFIxY3lJc0luQmhjbUZ0Y3lJc0ltSnZaSGtpTENKcGJtWnZJaXdpYldWMGFHOWtJaXdpWjJWdVpYSmhkR1ZCYzNObGNuUnBiMjRpTENKamIyNTBaVzUwY3lJc0ltOXlhV2RwYmlJc0luVnpaWEp1WVcxbFNHbHVkQ0lzSW5Sb1pXNGlMQ0oyWVd4MVpTSXNJblZ6WlhKUWNtOW1hV3hsSWl3aWNtVndiSGxOWlhOellXZGxJaXdpWlhKeWIzSWlMQ0oyWVd4cFpHRjBaVUZ6YzJWeWRHbHZiaUlzSW1GemMyVnlkR2x2YmlJc0luSmxabkpsYzJoQmMzTmxjblJwYjI0aUxDSnBaR1Z1ZEdsMGVTSXNJbWRsZEVGalkyVnpjMVJ2YTJWdVFYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBJaXdpY21WemIzVnlZMlZ6SWl3aVoyVjBRV05qWlhOelZHOXJaVzRpTENKc2IyZHBiaUlzSW1sdWNIVjBJaXdpYldWemMyRm5aU0lzSW1sa0lpd2lkSGx3WlNJc0ltWnliMjBpTENKamIyUmxJaXdpY0c5emRFMWxjM05oWjJVaUxDSnlaV0Z6YjI0aUxDSmZjM1JoZEdVaUxDSmtaWE5qSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPMEZCUVVFc1NVRkJTVUVzYVVKQlFVbzdRVUZEUVN4SlFVRkpReXhuUWtGQlNqdEJRVU5CTEVsQlFVbERMREpDUVVGS08wRkJRMEVzU1VGQlNVTXNlVUpCUVVvN1FVRkRRU3hKUVVGSlF5eDVRa0ZCU2pzN1FVRkZRVHM3T3p0SlFVZE5ReXg1UWpzN1FVRkZTanM3T3pzN096czdRVUZSUVN4eFEwRkJXVU1zYlVKQlFWb3NSVUZCYVVORExFZEJRV3BETEVWQlFYTkRReXhOUVVGMFF5eEZRVUU0UXp0QlFVRkJPenRCUVVNMVF5eFJRVUZKUXl4UlFVRlJMRWxCUVZvN1FVRkRRVUVzVlVGQlRVZ3NiVUpCUVU0c1IwRkJORUpCTEcxQ1FVRTFRanRCUVVOQlJ5eFZRVUZOUXl4VlFVRk9MRWRCUVcxQ1NDeEhRVUZ1UWp0QlFVTkJSU3hWUVVGTlJDeE5RVUZPTEVkQlFXVkJMRTFCUVdZN1FVRkRRVklzWlVGQlYxRXNUMEZCVDBjc1VVRkJiRUk3UVVGRFFWUXNlVUpCUVhGQ1RTeFBRVUZQVGl4clFrRkJOVUk3UVVGRFFVVXNkVUpCUVcxQ1NTeFBRVUZQU2l4blFrRkJNVUk3TzBGQlIwRlJMRmxCUVZGRExFZEJRVklzUTBGQldTeG5RMEZCV2pzN1FVRkZRVW9zVlVGQlRVTXNWVUZCVGl4RFFVRnBRa2tzVjBGQmFrSXNRMEZCTmtJc1IwRkJOMElzUlVGQmEwTXNWVUZCVlVNc1IwRkJWaXhGUVVGbE8wRkJReTlETEZWQlFVbEJMRWxCUVVsRExFVkJRVW9zUzBGQlYxSXNUMEZCVDFNc1RVRkJkRUlzUlVGQk9FSTdPMEZCUlRWQ1VpeGpRVUZOVXl4WlFVRk9MRU5CUVcxQ1NDeEhRVUZ1UWp0QlFVTkVPMEZCUTBZc1MwRk1SRHRCUVUxQlRpeFZRVUZOVlN4WFFVRk9MRU5CUVd0Q0xGTkJRV3hDTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3p0cFEwRkxZVW9zUnl4RlFVRkxPMEZCUTJoQ0xGVkJRVWxPTEZGQlFWRXNTVUZCV2p0QlFVTkJMRlZCUVVsWExGTkJRVk5NTEVsQlFVbE5MRWxCUVVvc1EwRkJVMFFzVFVGQmRFSTdRVUZEUVR0QlFVTkJVaXhqUVVGUlZTeEpRVUZTTEVOQlFXRXNhVVJCUVdJc1JVRkJaMFZRTEVkQlFXaEZPenRCUVVWQkxHTkJRVkZCTEVsQlFVbE5MRWxCUVVvc1EwRkJVMFVzVFVGQmFrSTdRVUZEUlN4aFFVRkxMRzFDUVVGTU8wRkJRMFYyUWl4dFFrRkJVM2RDTEdsQ1FVRlVMRU5CUVRKQ1ppeE5RVUZOUkN4TlFVRnFReXhGUVVGNVExa3NUMEZCVDBzc1VVRkJhRVFzUlVGQk1FUk1MRTlCUVU5TkxFMUJRV3BGTEVWQlFYbEZUaXhQUVVGUFR5eFpRVUZvUml4RlFVRTRSa01zU1VGQk9VWXNRMEZEUlN4VlFVRlZReXhMUVVGV0xFVkJRV2xDT3p0QlFVVm1RU3hyUWtGQlRVTXNWMEZCVGl4SFFVRnZRalZDTEcxQ1FVRnRRakpDTEUxQlFVMURMRmRCUVhwQ0xFTkJRWEJDTzBGQlEwRnlRaXhyUWtGQlRYTkNMRmxCUVU0c1EwRkJiVUpvUWl4SFFVRnVRaXhGUVVGM1FtTXNTMEZCZUVJN1FVRkRSQ3hYUVV4SUxFVkJUMFVzVlVGQlZVY3NTMEZCVml4RlFVRnBRanRCUVVGRmRrSXNhMEpCUVUxelFpeFpRVUZPTEVOQlFXMUNhRUlzUjBGQmJrSXNSVUZCZDBKcFFpeExRVUY0UWp0QlFVRnBReXhYUVZCMFJEdEJRVk5CTzBGQlEwWXNZVUZCU3l4dFFrRkJURHRCUVVORk8wRkJRMEZvUXl4dFFrRkJVMmxETEdsQ1FVRlVMRU5CUVRKQ2VFSXNUVUZCVFVRc1RVRkJha01zUlVGQmVVTlpMRTlCUVU5akxGTkJRV2hFTEVWQlFUSkVaQ3hQUVVGUFRTeE5RVUZzUlN4RlFVRXdSVVVzU1VGQk1VVXNRMEZEUlN4VlFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlFVVndRaXhyUWtGQlRYTkNMRmxCUVU0c1EwRkJiVUpvUWl4SFFVRnVRaXhGUVVGM1FtTXNTMEZCZUVJN1FVRkJhVU1zVjBGRWRFUXNSVUZIUlN4VlFVRlZSeXhMUVVGV0xFVkJRV2xDTzBGQlFVVjJRaXhyUWtGQlRYTkNMRmxCUVU0c1EwRkJiVUpvUWl4SFFVRnVRaXhGUVVGM1FtbENMRXRCUVhoQ08wRkJRV2xETEZkQlNIUkVPMEZCUzBFN1FVRkRSaXhoUVVGTExHdENRVUZNTzBGQlEwVTdRVUZEUVdoRExHMUNRVUZUYlVNc1owSkJRVlFzUTBGQk1FSm1MRTlCUVU5blFpeFJRVUZxUXl4RlFVRXlRMUlzU1VGQk0wTXNRMEZEUlN4VlFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlFVVndRaXhyUWtGQlRYTkNMRmxCUVU0c1EwRkJiVUpvUWl4SFFVRnVRaXhGUVVGM1FtTXNTMEZCZUVJN1FVRkJhVU1zVjBGRWRFUXNSVUZIUlN4VlFVRlZSeXhMUVVGV0xFVkJRV2xDTzBGQlFVVjJRaXhyUWtGQlRYTkNMRmxCUVU0c1EwRkJiVUpvUWl4SFFVRnVRaXhGUVVGM1FtbENMRXRCUVhoQ08wRkJRV2xETEZkQlNIUkVPMEZCUzBFN1FVRkRSaXhoUVVGTExIRkRRVUZNTzBGQlEwVTdRVUZEUVdoRExHMUNRVUZUY1VNc2JVTkJRVlFzUTBGQk5rTTFRaXhOUVVGTlJDeE5RVUZ1UkN4RlFVRXlSRmtzVDBGQlQydENMRk5CUVd4RkxFVkJRVFpGVml4SlFVRTNSU3hEUVVORkxGVkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkRabkJDTEd0Q1FVRk5jMElzV1VGQlRpeERRVUZ0UW1oQ0xFZEJRVzVDTEVWQlFYZENZeXhMUVVGNFFqdEJRVU5FTEZkQlNFZ3NSVUZMUlN4VlFVRlZSeXhMUVVGV0xFVkJRV2xDTzBGQlFVVjJRaXhyUWtGQlRYTkNMRmxCUVU0c1EwRkJiVUpvUWl4SFFVRnVRaXhGUVVGM1FtbENMRXRCUVhoQ08wRkJRV2xETEZkQlRIUkVPMEZCVDBFN1FVRkRSaXhoUVVGTExHZENRVUZNTzBGQlEwVTdRVUZEUVdoRExHMUNRVUZUZFVNc1kwRkJWQ3hEUVVGM1FqbENMRTFCUVUxRUxFMUJRVGxDTEVWQlFYTkRXU3hQUVVGUGEwSXNVMEZCTjBNc1JVRkJkMFJzUWl4UFFVRlBiMElzUzBGQkwwUXNSVUZCYzBWYUxFbEJRWFJGTEVOQlEwVXNWVUZCVlVNc1MwRkJWaXhGUVVGcFFqdEJRVU5tUVN4clFrRkJUVmtzUzBGQlRpeEhRVUZqY2tNc2FVSkJRV2xDZVVJc1RVRkJUVmtzUzBGQmRrSXNRMEZCWkR0QlFVTkJhRU1zYTBKQlFVMXpRaXhaUVVGT0xFTkJRVzFDYUVJc1IwRkJia0lzUlVGQmQwSmpMRXRCUVhoQ08wRkJRMFFzVjBGS1NDeEZRVTFGTEZWQlFWVkhMRXRCUVZZc1JVRkJhVUk3UVVGQlJYWkNMR3RDUVVGTmMwSXNXVUZCVGl4RFFVRnRRbWhDTEVkQlFXNUNMRVZCUVhkQ2FVSXNTMEZCZUVJN1FVRkJhVU1zVjBGT2RFUTdRVUZSUVR0QlFVTkdPMEZCUTBVN1FVRnNSRW83UVVGdlJFUTdPMEZCUlVRN096czdPenM3T3p0cFEwRk5ZV3BDTEVjc1JVRkJTMk1zU3l4RlFVRlBPMEZCUTNaQ0xGVkJRVWx3UWl4UlFVRlJMRWxCUVZvN08wRkJSVUVzVlVGQlNXbERMRlZCUVZVN1FVRkRXa01zV1VGQlNUVkNMRWxCUVVrMFFpeEZRVVJKTEVWQlEwRkRMRTFCUVUwc1ZVRkVUaXhGUVVOclFqVkNMRWxCUVVsRUxFbEJRVWs0UWl4SlFVUXhRaXhGUVVOblEwRXNUVUZCVFRsQ0xFbEJRVWxETEVWQlJERkRPMEZCUlZwTExHTkJRVTBzUlVGQlJYbENMRTFCUVUwc1IwRkJVaXhGUVVGaGFrSXNUMEZCVDBFc1MwRkJjRUk3UVVGR1RTeFBRVUZrT3p0QlFVdEJha0lzWTBGQlVVTXNSMEZCVWl4RFFVRlpMREpEUVVGYUxFVkJRWGxFTmtJc1QwRkJla1E3TzBGQlJVRnFReXhaUVVGTlF5eFZRVUZPTEVOQlFXbENjVU1zVjBGQmFrSXNRMEZCTmtKTUxFOUJRVGRDTzBGQlEwUTdPenRuUTBGRlYySXNTeXhGUVVGUGJVSXNUU3hGUVVGUk8wRkJRM3BDTEZWQlFVbDJReXhSUVVGUkxFbEJRVm83TzBGQlJVRkhMR05CUVZGRExFZEJRVklzUTBGQldTeDVRMEZCV2l4RlFVRjFSR2RDTEV0QlFYWkVPenRCUVVWQmNFSXNXVUZCVFhkRExFMUJRVTRzUjBGQlpYQkNMRXRCUVdZN08wRkJSVUVzVlVGQlNXUXNUVUZCVFR0QlFVTlNOa0lzWTBGQlRTeFJRVVJGTzBGQlJWSkRMR05CUVUxd1F5eE5RVUZOU0N4dFFrRkdTanRCUVVkU1ZTeFpRVUZKVUN4TlFVRk5TQ3h0UWtGQlRpeEhRVUUwUWl4VFFVaDRRanRCUVVsU1pTeGpRVUZOTzBGQlEwcFJMR2xDUVVGUFFUdEJRVVJJTzBGQlNrVXNUMEZCVmpzN1FVRlRRU3hWUVVGSmJVSXNUVUZCU2l4RlFVRlpPMEZCUTFacVF5eFpRVUZKVFN4SlFVRktMRU5CUVZNMlFpeEpRVUZVTEVkQlFXZENSaXhOUVVGb1FqdEJRVU5FT3p0QlFVVkVka01zV1VGQlRVTXNWVUZCVGl4RFFVRnBRbkZETEZkQlFXcENMRU5CUVRaQ2FFTXNSMEZCTjBJN1FVRkRSRHM3T3pzN08wRkJSMGc3TzBGQlJVRTdPenM3T3pzN096dHJRa0ZQWlZZc2VVSWlMQ0ptYVd4bElqb2lNeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklteGxkQ0JKWkhCUWNtOTRlVHRjYm14bGRDQnBaSEJKYm1adk8xeHViR1YwSUdOdmJuWmxjblJWYzJWeVVISnZabWxzWlR0Y2JteGxkQ0IxYzJWeVNXNW1iMFZ1WkhCdmFXNTBPMXh1YkdWMElHRmpZMlZ6YzFSdmEyVnVTVzV3ZFhRN1hHNWNiaThxS2x4dUtpQkJZbk4wY21GamRDQkpaR1Z1ZEdsMGVTQlFjbTkyYVdSbGNpQlFjbTk0ZVNCUWNtOTBiMk52YkNCVGRIVmlJSFJ2SUdKbElHVjRkR1Z1WkdWa0lHSjVJSEpsWVd3Z1NXUndJRkJ5YjNocFpYTmNiaW92WEc1amJHRnpjeUJCWW5OMGNtRmpkRWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlJSHRjYmx4dUlDQXZLaXBjYmlBZ0tpQkRiMjV6ZEhKMVkzUnZjaUJ2WmlCMGFHVWdTV1J3VUhKdmVIa2dVM1IxWWx4dUlDQXFJRlJvWlNCamIyNXpkSEoxWTNSdmNpQmhaR1FnWVNCc2FYTjBaVzVsY2lCcGJpQjBhR1VnYldWemMyRm5aVUoxY3lCeVpXTmxhWFpsWkNCaGJtUWdjM1JoY25RZ1lTQjNaV0lnZDI5eWEyVnlJSGRwZEdnZ2RHaGxJR2xrY0ZCeWIzaDVJSEpsWTJWcGRtVmtYRzRnSUNwY2JpQWdLaUJBY0dGeVlXMGdJSHRWVWt3dVVuVnVkR2x0WlZWU1RIMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRXSlZVa3hjYmlBZ0tpQkFjR0Z5WVcwZ0lIdE5aWE56WVdkbExrMWxjM05oWjJWOUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luVnpVRzl6ZEUxbGMzTmhaMlVnSUNBZ0lHTnZibVpwWjNWeVlYUnBiMjVjYmlBZ0tpQkFjR0Z5WVcwZ0lIdFFjbTkwYjFOMGRXSkVaWE5qY21sd2RHOXlMa052Ym1acFozVnlZWFJwYjI1RVlYUmhUR2x6ZEgwZ1kyOXVabWxuZFhKaGRHbHZiaUFnSUNBZ0lHTnZibVpwWjNWeVlYUnBiMjVjYmlBZ0tpOWNiaUFnWTI5dWMzUnlkV04wYjNJb2NuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDd2dZblZ6TENCamIyNW1hV2NwSUh0Y2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh1SUNBZ0lGOTBhR2x6TG5KMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3Z1BTQnlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1PMXh1SUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZDZFhNZ1BTQmlkWE03WEc0Z0lDQWdYM1JvYVhNdVkyOXVabWxuSUQwZ1kyOXVabWxuTzF4dUlDQWdJRWxrY0ZCeWIzaDVJRDBnWTI5dVptbG5MbWxrY0ZCeWIzaDVPMXh1SUNBZ0lHTnZiblpsY25SVmMyVnlVSEp2Wm1sc1pTQTlJR052Ym1acFp5NWpiMjUyWlhKMFZYTmxjbEJ5YjJacGJHVTdYRzRnSUNBZ1lXTmpaWE56Vkc5clpXNUpibkIxZENBOUlHTnZibVpwWnk1aFkyTmxjM05VYjJ0bGJrbHVjSFYwTzF4dVhHNWNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25XMEZpYzNSeVlXTjBTV1J3VUhKdmVIbGRJR052Ym5OMGNuVmpkRzl5SnlrN1hHNWNiaUFnSUNCZmRHaHBjeTV0WlhOellXZGxRblZ6TG1Ga1pFeHBjM1JsYm1WeUtDY3FKeXdnWm5WdVkzUnBiMjRnS0cxelp5a2dlMXh1SUNBZ0lDQWdhV1lnS0cxelp5NTBieUE5UFQwZ1kyOXVabWxuTG1sa2NGVnliQ2tnZTF4dVhHNGdJQ0FnSUNBZ0lGOTBhR2x6TG5KbGNYVmxjM1JVYjBsa2NDaHRjMmNwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dUlDQWdJRjkwYUdsekxsOXpaVzVrVTNSaGRIVnpLQ2RqY21WaGRHVmtKeWs3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCR2RXNWpkR2x2YmlCMGFHRjBJSE5sWlNCMGFHVWdhVzUwWlc1a1pXUWdiV1YwYUc5a0lHbHVJSFJvWlNCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdGdVpDQmpZV3hzSUhSb1pTQnlaWE53WldOMGFYWmxJR1oxYm1OMGFXOXVYRzRnSUNwY2JpQWdLaUJBY0dGeVlXMGdlMjFsYzNOaFoyVjlJQ0J0WlhOellXZGxJSEpsWTJWcGRtVmtJR2x1SUhSb1pTQnRaWE56WVdkbFFuVnpYRzRnSUNvdlhHNGdJSEpsY1hWbGMzUlViMGxrY0NodGMyY3BJSHRjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHVJQ0FnSUd4bGRDQndZWEpoYlhNZ1BTQnRjMmN1WW05a2VTNXdZWEpoYlhNN1hHNGdJQ0FnTHk5amIyNXpiMnhsTG1sdVptOG9KM0psY1hWbGMzUlViMGxrY0RvbkxDQnRjMmN1WW05a2VTNXRaWFJvYjJRcE8xeHVJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25XMEZpYzNSeVlXTjBTV1J3VUhKdmVIbFFjbTkwYjFOMGRXSmRJSEpsWTJWcGRtbHVaeUJ5WlhGMVpYTjBPaUFuTENCdGMyY3BPMXh1WEc0Z0lDQWdjM2RwZEdOb0lDaHRjMmN1WW05a2VTNXRaWFJvYjJRcElIdGNiaUFnSUNBZ0lHTmhjMlVnSjJkbGJtVnlZWFJsUVhOelpYSjBhVzl1SnpwY2JpQWdJQ0FnSUNBZ1NXUndVSEp2ZUhrdVoyVnVaWEpoZEdWQmMzTmxjblJwYjI0b1gzUm9hWE11WTI5dVptbG5MQ0J3WVhKaGJYTXVZMjl1ZEdWdWRITXNJSEJoY21GdGN5NXZjbWxuYVc0c0lIQmhjbUZ0Y3k1MWMyVnlibUZ0WlVocGJuUXBMblJvWlc0b1hHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhiSFZsTG5WelpYSlFjbTltYVd4bElEMGdZMjl1ZG1WeWRGVnpaWEpRY205bWFXeGxLSFpoYkhWbExuVnpaWEpRY205bWFXeGxLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5KbGNHeDVUV1Z6YzJGblpTaHRjMmNzSUhaaGJIVmxLVHRjYmlBZ0lDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRnS0dWeWNtOXlLU0I3SUY5MGFHbHpMbkpsY0d4NVRXVnpjMkZuWlNodGMyY3NJR1Z5Y205eUtUc2dmVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnSUNCaWNtVmhhenRjYmlBZ0lDQWdJR05oYzJVZ0ozWmhiR2xrWVhSbFFYTnpaWEowYVc5dUp6cGNiaUFnSUNBZ0lDQWdMeThnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkMllXeHBaR0YwWlVGemMyVnlkR2x2YmljcE8xeHVJQ0FnSUNBZ0lDQkpaSEJRY205NGVTNTJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJpaGZkR2hwY3k1amIyNW1hV2NzSUhCaGNtRnRjeTVoYzNObGNuUnBiMjRzSUhCaGNtRnRjeTV2Y21sbmFXNHBMblJvWlc0b1hHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdJRjkwYUdsekxuSmxjR3g1VFdWemMyRm5aU2h0YzJjc0lIWmhiSFZsS1RzZ2ZTeGNibHh1SUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUNobGNuSnZjaWtnZXlCZmRHaHBjeTV5WlhCc2VVMWxjM05oWjJVb2JYTm5MQ0JsY25KdmNpazdJSDFjYmlBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEc0Z0lDQWdJQ0JqWVhObElDZHlaV1p5WlhOb1FYTnpaWEowYVc5dUp6cGNiaUFnSUNBZ0lDQWdMeThnSUNBZ0lHTnZibk52YkdVdWFXNW1ieWduY21WbWNtVnphRUZ6YzJWeWRHbHZiaWNwTzF4dUlDQWdJQ0FnSUNCSlpIQlFjbTk0ZVM1eVpXWnlaWE5vUVhOelpYSjBhVzl1S0hCaGNtRnRjeTVwWkdWdWRHbDBlU2t1ZEdobGJpaGNiaUFnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHNnWDNSb2FYTXVjbVZ3YkhsTlpYTnpZV2RsS0cxelp5d2dkbUZzZFdVcE95QjlMRnh1WEc0Z0lDQWdJQ0FnSUNBZ1puVnVZM1JwYjI0Z0tHVnljbTl5S1NCN0lGOTBhR2x6TG5KbGNHeDVUV1Z6YzJGblpTaHRjMmNzSUdWeWNtOXlLVHNnZlZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0FnSUdOaGMyVWdKMmRsZEVGalkyVnpjMVJ2YTJWdVFYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBKenBjYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbloyVjBRV05qWlhOelZHOXJaVzRuS1R0Y2JpQWdJQ0FnSUNBZ1NXUndVSEp2ZUhrdVoyVjBRV05qWlhOelZHOXJaVzVCZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5Rb1gzUm9hWE11WTI5dVptbG5MQ0J3WVhKaGJYTXVjbVZ6YjNWeVkyVnpLUzUwYUdWdUtGeHVJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1gzUm9hWE11Y21Wd2JIbE5aWE56WVdkbEtHMXpaeXdnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUFvWlhKeWIzSXBJSHNnWDNSb2FYTXVjbVZ3YkhsTlpYTnpZV2RsS0cxelp5d2daWEp5YjNJcE95QjlYRzRnSUNBZ0lDQWdJQ2s3WEc0Z0lDQWdJQ0FnSUdKeVpXRnJPMXh1SUNBZ0lDQWdZMkZ6WlNBbloyVjBRV05qWlhOelZHOXJaVzRuT2x4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZG5aWFJCWTJObGMzTlViMnRsYmljcE8xeHVJQ0FnSUNBZ0lDQkpaSEJRY205NGVTNW5aWFJCWTJObGMzTlViMnRsYmloZmRHaHBjeTVqYjI1bWFXY3NJSEJoY21GdGN5NXlaWE52ZFhKalpYTXNJSEJoY21GdGN5NXNiMmRwYmlrdWRHaGxiaWhjYmlBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbExtbHVjSFYwSUQwZ1lXTmpaWE56Vkc5clpXNUpibkIxZENoMllXeDFaUzVwYm5CMWRDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRHaHBjeTV5WlhCc2VVMWxjM05oWjJVb2JYTm5MQ0IyWVd4MVpTazdYRzRnSUNBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJQ2hsY25KdmNpa2dleUJmZEdocGN5NXlaWEJzZVUxbGMzTmhaMlVvYlhObkxDQmxjbkp2Y2lrN0lIMWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmtaV1poZFd4ME9seHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnS2lCVWFHbHpJR1oxYm1OMGFXOXVJSEpsWTJWcGRtVnpJR0VnYldWemMyRm5aU0JoYm1RZ1lTQjJZV3gxWlM0Z1NYUWdjbVZ3YkdsbGN5QjBhR1VnZG1Gc2RXVWdkRzhnZEdobElITmxibVJsY2lCdlppQjBhR1VnYldWemMyRm5aU0J5WldObGFYWmxaRnh1SUNBcVhHNGdJQ29nUUhCaGNtRnRJQ0I3YldWemMyRm5aWDBnSUNCdFpYTnpZV2RsSUhKbFkyVnBkbVZrWEc0Z0lDb2dRSEJoY21GdElDQjdkbUZzZFdWOUlDQWdJQ0IyWVd4MVpTQjBieUJwYm1Oc2RXUmxJR2x1SUhSb1pTQnVaWGNnYldWemMyRm5aU0IwYnlCelpXNWtYRzRnSUNvdlhHNGdJSEpsY0d4NVRXVnpjMkZuWlNodGMyY3NJSFpoYkhWbEtTQjdYRzRnSUNBZ2JHVjBJRjkwYUdseklEMGdkR2hwY3p0Y2JseHVJQ0FnSUd4bGRDQnRaWE56WVdkbElEMGdlMXh1SUNBZ0lDQWdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnZEc4NklHMXpaeTVtY205dExDQm1jbTl0T2lCdGMyY3VkRzhzWEc0Z0lDQWdJQ0JpYjJSNU9pQjdJR052WkdVNklESXdNQ3dnZG1Gc2RXVTZJSFpoYkhWbElIMWNiaUFnSUNCOU8xeHVYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRCWW5OMGNtRmpkRWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlMbkpsY0d4NVRXVnpjMkZuWlYwZ0p5d2diV1Z6YzJGblpTazdYRzVjYmlBZ0lDQmZkR2hwY3k1dFpYTnpZV2RsUW5WekxuQnZjM1JOWlhOellXZGxLRzFsYzNOaFoyVXBPMXh1SUNCOVhHNWNiaUFnWDNObGJtUlRkR0YwZFhNb2RtRnNkV1VzSUhKbFlYTnZiaWtnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQmpiMjV6YjJ4bExteHZaeWduVzBGaWMzUnlZV04wU1dSd1VISnZlSGxRY205MGIxTjBkV0l1YzJWdVpGTjBZWFIxYzEwZ0p5d2dkbUZzZFdVcE8xeHVYRzRnSUNBZ1gzUm9hWE11WDNOMFlYUmxJRDBnZG1Gc2RXVTdYRzVjYmlBZ0lDQnNaWFFnYlhObklEMGdlMXh1SUNBZ0lDQWdkSGx3WlRvZ0ozVndaR0YwWlNjc1hHNGdJQ0FnSUNCbWNtOXRPaUJmZEdocGN5NXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1MRnh1SUNBZ0lDQWdkRzg2SUY5MGFHbHpMbkoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dnS3lBbkwzTjBZWFIxY3ljc1hHNGdJQ0FnSUNCaWIyUjVPaUI3WEc0Z0lDQWdJQ0FnSUhaaGJIVmxPaUIyWVd4MVpWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwN1hHNWNiaUFnSUNCcFppQW9jbVZoYzI5dUtTQjdYRzRnSUNBZ0lDQnRjMmN1WW05a2VTNWtaWE5qSUQwZ2NtVmhjMjl1TzF4dUlDQWdJSDFjYmx4dUlDQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYlhObktUdGNiaUFnZlZ4dWZWeHVYRzR2THlCbGVIQnZjblFnWkdWbVlYVnNkQ0JKWkhCUWNtOTRlVkJ5YjNSdlUzUjFZanRjYmx4dUx5b3FYRzRnS2lCVWJ5QmhZM1JwZG1GMFpTQjBhR2x6SUhCeWIzUnZZMjlzSUhOMGRXSXNJSFZ6YVc1bklIUm9aU0J6WVcxbElHMWxkR2h2WkNCbWIzSWdZV3hzSUhCeWIzUnZjM1IxWWk1Y2JpQXFJRUJ3WVhKaGJTQWdlMVZTVEM1U2RXNTBhVzFsVlZKTWZTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1JSEoxYm5ScGJXVlFjbTkwYjFOMVlsVlNURnh1SUNvZ1FIQmhjbUZ0SUNCN1RXVnpjMkZuWlM1TlpYTnpZV2RsZlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKMWMxQnZjM1JOWlhOellXZGxJQ0FnSUNCamIyNW1hV2QxY21GMGFXOXVYRzRnS2lCQWNHRnlZVzBnSUh0UWNtOTBiMU4wZFdKRVpYTmpjbWx3ZEc5eUxrTnZibVpwWjNWeVlYUnBiMjVFWVhSaFRHbHpkSDBnWTI5dVptbG5kWEpoZEdsdmJpQWdJQ0FnSUdOdmJtWnBaM1Z5WVhScGIyNWNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnVDJKcVpXTjBJSGRwZEdnZ2JtRnRaU0JoYm1RZ2FXNXpkR0Z1WTJVZ2IyWWdVSEp2ZEc5VGRIVmlYRzRnS2k5Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUVGaWMzUnlZV04wU1dSd1VISnZlSGxRY205MGIxTjBkV0k3WEc1Y2JseHVYRzR2THlCWFJVSlFRVU5MSUVaUFQxUkZVaUF2TDF4dUx5OGdMaTR2WkdWMkxYQnliM1J2YzNSMVluTXZjM0pqTDJsa2NIQnliM2g1TDBGaWMzUnlZV04wU1dSd1VISnZlSGxUZEhWaUxtcHpJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vM1xuIik7CgovKioqLyB9KQovKioqKioqLyBdKVsiZGVmYXVsdCJdOwp9KTs=",
      "sourceCodeClassname": "facebook.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.80",
    "description": "IDPProxy for Facebook idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "50ef75417b00e8340d1ddf496be07274a",
    "constraints": {
      "browser": true
    },
    "objectName": "facebook.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "GoogleIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "7.50",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5fe88c210039898a45c75f6de8c56f417",
    "constraints": {
      "browser": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "7.50",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "52c91699f84b479f34e9f7abce2255fff",
    "constraints": {
      "node": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MicrosoftProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "microsoft.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.80",
    "description": "IDPProxy for microsoft idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "546e0f62b1aa6b322a17c85cf925e1dba",
    "constraints": {
      "browser": true
    },
    "objectName": "microsoft.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsForBrowserProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "8.40",
    "description": "IDPProxy for browser idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5d2606fd332d71526cafc4c13d80437b4",
    "constraints": {
      "browser": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "8.40",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "57378b186a1ba1a7af6d8190014c85afc",
    "constraints": {
      "node": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.80",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "constraints": {
      "browser": true,
      "onlyAccessToken": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "6.80",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}