{
  "FacebookIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = activate;\n\nvar _OAUTH = __webpack_require__(1);\n\nvar _FacebookInfo = __webpack_require__(2);\n\nvar _AbstractIdpProxyStub = __webpack_require__(3);\n\nvar _AbstractIdpProxyStub2 = _interopRequireDefault(_AbstractIdpProxyStub);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n* Google Identity Provider Proxy Protocol Stub\n*/\nvar FacebookIdpProxyProtoStub = function (_AbstractIdpProxyProt) {\n  _inherits(FacebookIdpProxyProtoStub, _AbstractIdpProxyProt);\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function FacebookIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, FacebookIdpProxyProtoStub);\n\n    config.idpUrl = 'domain-idp://facebook.com';\n    config.idpProxy = _OAUTH.IdpProxy;\n    config.idpInfo = _FacebookInfo.facebookInfo;\n    return _possibleConstructorReturn(this, (FacebookIdpProxyProtoStub.__proto__ || Object.getPrototypeOf(FacebookIdpProxyProtoStub)).call(this, runtimeProtoStubURL, bus, config));\n  }\n\n  return FacebookIdpProxyProtoStub;\n}(_AbstractIdpProxyStub2.default);\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'FacebookIdpProxyProtoStub',\n    instance: new FacebookIdpProxyProtoStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2ZhY2Vib29rL0ZhY2Vib29rSWRwUHJveHlTdHViLmlkcC5qcz9iN2I5Il0sIm5hbWVzIjpbImFjdGl2YXRlIiwiRmFjZWJvb2tJZHBQcm94eVByb3RvU3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJpZHBVcmwiLCJpZHBQcm94eSIsImlkcEluZm8iLCJ1cmwiLCJuYW1lIiwiaW5zdGFuY2UiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQWtDMEJBLFE7O0FBbEMxQjs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7O0FBRUE7OztJQUdNQyx5Qjs7O0FBRUY7Ozs7Ozs7O0FBUUQscUNBQVlDLG1CQUFaLEVBQWlDQyxHQUFqQyxFQUFzQ0MsTUFBdEMsRUFBOEM7QUFBQTs7QUFDNUNBLFdBQU9DLE1BQVAsR0FBZ0IsMkJBQWhCO0FBQ0FELFdBQU9FLFFBQVA7QUFDQUYsV0FBT0csT0FBUDtBQUg0QyxpSkFJdENMLG1CQUpzQyxFQUlqQkMsR0FKaUIsRUFJWkMsTUFKWTtBQUs3Qzs7Ozs7QUFHRjs7QUFFQTs7Ozs7Ozs7O0FBT2UsU0FBU0osUUFBVCxDQUFrQlEsR0FBbEIsRUFBdUJMLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNqRCxTQUFPO0FBQ0xLLFVBQU0sMkJBREQ7QUFFTEMsY0FBVSxJQUFJVCx5QkFBSixDQUE4Qk8sR0FBOUIsRUFBbUNMLEdBQW5DLEVBQXdDQyxNQUF4QztBQUZMLEdBQVA7QUFJRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJZHBQcm94eX0gZnJvbSBcIi4uL09BVVRIXCJcbmltcG9ydCB7ZmFjZWJvb2tJbmZvfSBmcm9tIFwiLi9GYWNlYm9va0luZm9cIlxuaW1wb3J0IEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIgZnJvbSBcIi4uL0Fic3RyYWN0SWRwUHJveHlTdHViXCJcblxuLyoqXG4qIEdvb2dsZSBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViXG4qL1xuY2xhc3MgRmFjZWJvb2tJZHBQcm94eVByb3RvU3R1YiBleHRlbmRzIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIge1xuICBcbiAgICAvKipcbiAgICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXG4gICAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxuICAgICpcbiAgICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgICAqL1xuICAgY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICAgY29uZmlnLmlkcFVybCA9ICdkb21haW4taWRwOi8vZmFjZWJvb2suY29tJztcbiAgICAgY29uZmlnLmlkcFByb3h5ID0gSWRwUHJveHk7XG4gICAgIGNvbmZpZy5pZHBJbmZvID0gZmFjZWJvb2tJbmZvO1xuICAgICBzdXBlcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZyk7XG4gICB9XG4gIH1cbiAgXG4gIC8vIGV4cG9ydCBkZWZhdWx0IElkcFByb3h5UHJvdG9TdHViO1xuICBcbiAgLyoqXG4gICAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICAgKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxuICAgKi9cbiAgZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAnRmFjZWJvb2tJZHBQcm94eVByb3RvU3R1YicsXG4gICAgICBpbnN0YW5jZTogbmV3IEZhY2Vib29rSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZylcbiAgICB9O1xuICB9XG4gIFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZmFjZWJvb2svRmFjZWJvb2tJZHBQcm94eVN0dWIuaWRwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar identities = {};\nvar nIdentity = 0;\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\n/**\n* Function to exchange the code received to the id Token, access token and a refresh token\n*\n*/\n/*let exchangeCode = (function(code) {\n  let i = googleInfo;\n\n  let URL = i.tokenEndpoint + 'code=' + code + '&client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' + i.redirectURI + '&grant_type=authorization_code&access_type=' + i.accessType;\n\n\n  return new Promise(function(resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function(info) {\n      console.log('[GoogleIdpProxy.exchangeCode] returned info: ', info);\n      resolve(info);\n    }, function(error) {\n      reject(error);\n    });\n\n  });\n});\n\nlet exchangeRefreshToken = (function(refreshToken) {\n  let i = googleInfo;\n\n  let URL = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + refreshToken + '&grant_type=refresh_token';\n\n  return new Promise(function(resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function(info) {\n      resolve(info);\n    }, function(error) {\n      reject(error);\n    });\n\n  });\n});*/\n\n/**\n* Identity Provider Proxy\n*/\nvar IdpProxy = exports.IdpProxy = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(idpInfo, assertion, origin) {\n    console.info('[GoogleIdpProxy.validateAssertionProxy] assertion: ', atob(assertion));\n    //    console.info('validateAssertionProxy:atob(assertion)', atob(assertion));\n\n    //TODO check the values with the hash received\n    //  return new Promise(function(resolve,reject) {\n\n    var decodedContent2 = atob(assertion);\n    var content = JSON.parse(decodedContent2);\n    var idTokenSplited = content.tokenID.split('.');\n    var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n    //resolve({identity: idToken.email, contents: idToken.nonce});\n\n    //});\n\n    return new Promise(function (resolve, reject) {\n      var i = idpInfo;\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      sendHTTPRequest('GET', i.tokenInfo + content.tokenID).then(function (result) {\n        if (JSON.stringify(result) === JSON.stringify(content.tokenIDJSON)) {\n          resolve({ identity: content.tokenIDJSON.email, contents: content.tokenIDJSON });\n        } else {\n          reject('invalid');\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n  /*\n    refreshAssertion: (identity) => {\n      //console.log('PROXY:refreshAssertion:oldIdentity', identity);\n      let i = googleInfo;\n  \n      return new Promise(function(resolve, reject) {\n        if (identity.info.refreshToken) {\n          exchangeRefreshToken(identity.info.refreshToken).then(function(value) {\n            let infoTokenURL = i.userinfo + value.access_token;\n            sendHTTPRequest('GET', infoTokenURL).then(function(infoToken) {\n  \n              let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: identity.info.refreshToken, tokenType: identity.info.tokenType, infoToken: infoToken};\n              let idTokenURL = i.tokenInfo + value.id_token;\n  \n              //obtain information about the user idToken\n              sendHTTPRequest('GET', idTokenURL).then(function(idToken) {\n  \n                identityBundle.tokenIDJSON = idToken;\n                identityBundle.expires = idToken.exp;\n                identityBundle.email = idToken.email;\n  \n                let oldIDToken = JSON.parse(atob(identity.assertion));\n                let oldIdTokenSplited = oldIDToken.tokenID.split('.');\n                let oldDecodedIDToken = JSON.parse(atob(oldIdTokenSplited[1]));\n                let idNonce = oldDecodedIDToken.nonce;\n  \n                let receivedIDToken = value.id_token;\n                let idTokenSplited = receivedIDToken.split('.');\n                let decodedIDToken = JSON.parse(atob(idTokenSplited[1]));\n  \n                decodedIDToken.nonce = idNonce;\n                let insertedNonce = btoa(JSON.stringify(decodedIDToken));\n                let newIDToken = idTokenSplited[0] + '.' +\n                                   insertedNonce + '.' +\n                                   idTokenSplited[2];\n  \n                let assertion = btoa(JSON.stringify({tokenID: newIDToken, tokenIDJSON: idToken}));\n                let idpBundle = {domain: 'google.com', protocol: 'OIDC'};\n  \n                //TODO delete later the field infoToken, and delete the need in the example\n                let returnValue = {assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken};\n                //console.log('PROXY:refreshAssertion:newIdentity', returnValue);\n                resolve(returnValue);\n              });\n            });\n          });\n        }\n      });\n    },*/\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(idpInfo, contents, origin, hint) {\n    console.log('[GoogleIdpProxy.generateAssertion:contents]', contents);\n    console.log('[GoogleIdpProxy.generateAssertion:origin]', origin);\n    console.log('[GoogleIdpProxy.generateAssertion:hint]', hint);\n    var i = idpInfo;\n\n    //start the login phase\n    //TODO later should be defined a better approach\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n        /*try {\n          if (window) { \n            resolve('url');\n          }\n        } catch (error) {*/\n\n        var requestUrl = i.authorisationEndpoint + 'redirect_uri=' + redirectURI\n        //        + '&prompt=consent&response_type=' + i.type \n        + '&response_type=' + i.type + '&client_id=' + i.clientID + '&granted_scopes=' + i.granted_scopes\n        //        + '&access_type=' + i.accessType\n        //        + '&nonce=' + contents\n        + '&state=' + i.state;\n\n        //        let requestUrl = i.authorisationEndpoint + 'scope=' + i.scope + '&client_id=' + i.clientID + '&redirect_uri=' + i.redirectURI + '&response_type=code' + /*i.type +*/ '&state=' + i.state + '&prompt=consent&access_type=' + i.accessType + '&nonce=' + contents;\n        console.log('[GoogleIdpProxy.generateAssertion] NO_HINT: rejecting with requestUrl ', requestUrl);\n\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n\n        //  } \n      } else {\n        // the request have already been made, so idpPRoxy will exchange the tokens along to the idp, to obtain the information necessary\n        var accessToken = urlParser(hint, 'access_token');\n        var expires = Math.floor(Date.now() / 1000) + urlParser(hint, 'expires_in');\n        //        let idToken = urlParser(hint, 'id_token');\n        //        let code = urlParser(hint, 'code');\n\n        //console.log('GOOGLE_PROXY_HINT: ', hint);\n\n        //       exchangeCode(code).then(function(value) {\n        //       console.log('[GoogleIdpProxy.generateAssertion] obtained exchanged Token ', value);\n\n        //obtain information about the user\n        //let infoTokenURL = i.userinfo + value.access_token;\n        var infoTokenURL = i.userinfo + accessToken;\n        sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n          console.log('[GoogleIdpProxy.generateAssertion] obtained infoToken ', infoToken);\n\n          //            let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: value.refresh_token, tokenType: value.token_type, infoToken: infoToken};\n\n          //            let idTokenURL = i.tokenInfo + value.id_token;\n\n          var userProfile = {\n            identifier: infoToken.id,\n            name: infoToken.name,\n            picture: infoToken.picture.data.url\n          };\n\n          if (infoToken.hasOwnProperty('email')) userProfile.email = infoToken.email;else userProfile.email = infoToken.id + '@facebook.com';\n\n          var identityBundle = {\n            accessToken: accessToken,\n            //              idToken: idToken,\n            //              refreshToken: value.refresh_token,\n            tokenType: 'Bearer',\n            infoToken: userProfile\n          };\n\n          //            let idTokenURL = i.tokenInfo + idToken;\n\n          //obtain information about the user idToken\n          /*          sendHTTPRequest('GET', idTokenURL).then(function(idTokenJSON) {\n                      console.log('[GoogleIdpProxy.generateAssertion] obtained idToken ', idTokenJSON);\n                      \n                      identityBundle.tokenIDJSON = idTokenJSON;*/\n          identityBundle.expires = expires;\n          identityBundle.email = infoToken.email;\n\n          var assertion = btoa(JSON.stringify({ tokenID: accessToken, tokenIDJSON: infoToken }));\n          var idpBundle = { domain: 'facebook.com', protocol: 'OAUTH2' };\n\n          //TODO delete later the field infoToken, and delete the need in the example\n          var returnValue = { assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken };\n\n          identities[nIdentity] = returnValue;\n          ++nIdentity;\n\n          console.log('[GoogleIdpProxy.generateAssertion] returning: ', JSON.stringify(returnValue));\n\n          resolve(returnValue);\n        }, function (e) {\n\n          reject(e);\n        });\n        /*            }, function(error) {\n        \n                    reject(error);\n                  });\n              }, function(err) {\n        \n                  reject(err);\n                });*/\n      }\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L09BVVRILmpzPzYyODAiXSwibmFtZXMiOlsiaWRlbnRpdGllcyIsIm5JZGVudGl0eSIsInJlZGlyZWN0VVJJIiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsInVybFBhcnNlciIsInVybCIsIm5hbWUiLCJyZXBsYWNlIiwicmVnZXhTIiwicmVnZXgiLCJSZWdFeHAiLCJyZXN1bHRzIiwiZXhlYyIsInNlbmRIVFRQUmVxdWVzdCIsIm1ldGhvZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIlhEb21haW5SZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsImluZm8iLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwiSWRwUHJveHkiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImlkcEluZm8iLCJhc3NlcnRpb24iLCJvcmlnaW4iLCJjb25zb2xlIiwiYXRvYiIsImRlY29kZWRDb250ZW50MiIsImNvbnRlbnQiLCJpZFRva2VuU3BsaXRlZCIsInRva2VuSUQiLCJzcGxpdCIsImlkVG9rZW4iLCJpIiwiZGVjb2RlZENvbnRlbnQiLCJ0b2tlbkluZm8iLCJ0aGVuIiwic3RyaW5naWZ5IiwicmVzdWx0IiwidG9rZW5JREpTT04iLCJpZGVudGl0eSIsImVtYWlsIiwiY29udGVudHMiLCJjYXRjaCIsImVyciIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiaGludCIsImxvZyIsInJlcXVlc3RVcmwiLCJhdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJ0eXBlIiwiY2xpZW50SUQiLCJncmFudGVkX3Njb3BlcyIsInN0YXRlIiwibG9naW5VcmwiLCJhY2Nlc3NUb2tlbiIsImV4cGlyZXMiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwiaW5mb1Rva2VuVVJMIiwidXNlcmluZm8iLCJpbmZvVG9rZW4iLCJ1c2VyUHJvZmlsZSIsImlkZW50aWZpZXIiLCJpZCIsInBpY3R1cmUiLCJkYXRhIiwiaGFzT3duUHJvcGVydHkiLCJpZGVudGl0eUJ1bmRsZSIsInRva2VuVHlwZSIsImJ0b2EiLCJpZHBCdW5kbGUiLCJkb21haW4iLCJyZXR1cm5WYWx1ZSIsImlkcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBSUEsYUFBYSxFQUFqQjtBQUNBLElBQUlDLFlBQVksQ0FBaEI7QUFDQSxJQUFJQyxjQUFjQyxTQUFTQyxRQUFULEdBQW9CLElBQXBCLEdBQTJCRCxTQUFTRSxRQUFwQyxJQUFnREYsU0FBU0csSUFBVCxLQUFrQixFQUFsQixHQUF1QixNQUFNSCxTQUFTRyxJQUF0QyxHQUE2QyxFQUE3RixDQUFsQjs7QUFJQTtBQUNBLFNBQVNDLFNBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QjtBQUM1QkEsU0FBT0EsS0FBS0MsT0FBTCxDQUFhLE1BQWIsRUFBcUIsTUFBckIsRUFBNkJBLE9BQTdCLENBQXFDLE1BQXJDLEVBQTZDLE1BQTdDLENBQVA7QUFDQSxNQUFJQyxTQUFTLFlBQVlGLElBQVosR0FBbUIsV0FBaEM7QUFDQSxNQUFJRyxRQUFRLElBQUlDLE1BQUosQ0FBV0YsTUFBWCxDQUFaO0FBQ0EsTUFBSUcsVUFBVUYsTUFBTUcsSUFBTixDQUFXUCxHQUFYLENBQWQ7QUFDQSxNQUFJTSxZQUFZLElBQWhCLEVBQ0EsT0FBTyxFQUFQLENBREEsS0FHQSxPQUFPQSxRQUFRLENBQVIsQ0FBUDtBQUNEOztBQUVELFNBQVNFLGVBQVQsQ0FBeUJDLE1BQXpCLEVBQWlDVCxHQUFqQyxFQUFzQztBQUNwQyxNQUFJVSxNQUFNLElBQUlDLGNBQUosRUFBVjtBQUNBLE1BQUkscUJBQXFCRCxHQUF6QixFQUE4QjtBQUM1QkEsUUFBSUUsSUFBSixDQUFTSCxNQUFULEVBQWlCVCxHQUFqQixFQUFzQixJQUF0QjtBQUNELEdBRkQsTUFFTyxJQUFJLE9BQU9hLGNB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UDtBQW9HRDtBQWxObUIsQ0FBZiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5sZXQgaWRlbnRpdGllcyA9IHt9O1xubGV0IG5JZGVudGl0eSA9IDA7XG5sZXQgcmVkaXJlY3RVUkkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICE9PSAnJyA/ICc6JyArIGxvY2F0aW9uLnBvcnQgOiAnJyApO1xuXG5cblxuLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzXG5mdW5jdGlvbiB1cmxQYXJzZXIodXJsLCBuYW1lKSB7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXFxdJyk7XG4gIGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJztcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpO1xuICBsZXQgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKHJlc3VsdHMgPT09IG51bGwpXG4gIHJldHVybiAnJztcbiAgZWxzZVxuICByZXR1cm4gcmVzdWx0c1sxXTtcbn1cblxuZnVuY3Rpb24gc2VuZEhUVFBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGlmIFhEb21haW5SZXF1ZXN0LlxuICAgIC8vIFhEb21haW5SZXF1ZXN0IG9ubHkgZXhpc3RzIGluIElFLCBhbmQgaXMgSUUncyB3YXkgb2YgbWFraW5nIENPUlMgcmVxdWVzdHMuXG4gICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwpO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLlxuICAgIHhociA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG4gICAgaWYgKHhocikge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgbGV0IGluZm8gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgICAgcmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWplY3QoJ0NPUlMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuKiBGdW5jdGlvbiB0byBleGNoYW5nZSB0aGUgY29kZSByZWNlaXZlZCB0byB0aGUgaWQgVG9rZW4sIGFjY2VzcyB0b2tlbiBhbmQgYSByZWZyZXNoIHRva2VuXG4qXG4qL1xuLypsZXQgZXhjaGFuZ2VDb2RlID0gKGZ1bmN0aW9uKGNvZGUpIHtcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gIGxldCBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY29kZT0nICsgY29kZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZncmFudF90eXBlPWF1dGhvcml6YXRpb25fY29kZSZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlO1xuXG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmV4Y2hhbmdlQ29kZV0gcmV0dXJuZWQgaW5mbzogJywgaW5mbyk7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cbmxldCBleGNoYW5nZVJlZnJlc2hUb2tlbiA9IChmdW5jdGlvbihyZWZyZXNoVG9rZW4pIHtcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gIGxldCBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVmcmVzaF90b2tlbj0nICsgcmVmcmVzaFRva2VuICsgJyZncmFudF90eXBlPXJlZnJlc2hfdG9rZW4nO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24oaW5mbykge1xuICAgICAgcmVzb2x2ZShpbmZvKTtcbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcblxuICB9KTtcbn0pOyovXG5cbi8qKlxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eVxuKi9cbmV4cG9ydCBsZXQgSWRwUHJveHkgPSB7XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7aWRwSW5mb30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xuICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gICAgICAgT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdFxuICAqL1xuICB2YWxpZGF0ZUFzc2VydGlvbjogKGlkcEluZm8sIGFzc2VydGlvbiwgb3JpZ2luKSA9PiB7XG4gICAgY29uc29sZS5pbmZvKCdbR29vZ2xlSWRwUHJveHkudmFsaWRhdGVBc3NlcnRpb25Qcm94eV0gYXNzZXJ0aW9uOiAnLCBhdG9iKGFzc2VydGlvbikpXG4vLyAgICBjb25zb2xlLmluZm8oJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHk6YXRvYihhc3NlcnRpb24pJywgYXRvYihhc3NlcnRpb24pKTtcblxuICAgIC8vVE9ETyBjaGVjayB0aGUgdmFsdWVzIHdpdGggdGhlIGhhc2ggcmVjZWl2ZWRcbiAgLy8gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQyID0gYXRvYihhc3NlcnRpb24pO1xuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50Mik7XG4gICAgICBsZXQgaWRUb2tlblNwbGl0ZWQgPSBjb250ZW50LnRva2VuSUQuc3BsaXQoJy4nKTtcbiAgICAgIGxldCBpZFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XG5cbiAgICAgIC8vcmVzb2x2ZSh7aWRlbnRpdHk6IGlkVG9rZW4uZW1haWwsIGNvbnRlbnRzOiBpZFRva2VuLm5vbmNlfSk7XG5cbiAgICAvL30pO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG4gICAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XG4gICAgICBsZXQgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQpO1xuICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpLnRva2VuSW5mbyArIGNvbnRlbnQudG9rZW5JRCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSA9PT0gSlNPTi5zdHJpbmdpZnkoY29udGVudC50b2tlbklESlNPTikpIHtcbiAgICAgICAgICByZXNvbHZlKHtpZGVudGl0eTogY29udGVudC50b2tlbklESlNPTi5lbWFpbCwgY29udGVudHM6IGNvbnRlbnQudG9rZW5JREpTT059KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2ludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbi8qXG4gIHJlZnJlc2hBc3NlcnRpb246IChpZGVudGl0eSkgPT4ge1xuICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246b2xkSWRlbnRpdHknLCBpZGVudGl0eSk7XG4gICAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKGlkZW50aXR5LmluZm8ucmVmcmVzaFRva2VuKSB7XG4gICAgICAgIGV4Y2hhbmdlUmVmcmVzaFRva2VuKGlkZW50aXR5LmluZm8ucmVmcmVzaFRva2VuKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaW5mb1Rva2VuKSB7XG5cbiAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiBpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbiwgdG9rZW5UeXBlOiBpZGVudGl0eS5pbmZvLnRva2VuVHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuO1xuXG4gICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaWRUb2tlbikge1xuXG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjtcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZXhwaXJlcyA9IGlkVG9rZW4uZXhwO1xuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5lbWFpbCA9IGlkVG9rZW4uZW1haWw7XG5cbiAgICAgICAgICAgICAgbGV0IG9sZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRlbnRpdHkuYXNzZXJ0aW9uKSk7XG4gICAgICAgICAgICAgIGxldCBvbGRJZFRva2VuU3BsaXRlZCA9IG9sZElEVG9rZW4udG9rZW5JRC5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICBsZXQgb2xkRGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2Iob2xkSWRUb2tlblNwbGl0ZWRbMV0pKTtcbiAgICAgICAgICAgICAgbGV0IGlkTm9uY2UgPSBvbGREZWNvZGVkSURUb2tlbi5ub25jZTtcblxuICAgICAgICAgICAgICBsZXQgcmVjZWl2ZWRJRFRva2VuID0gdmFsdWUuaWRfdG9rZW47XG4gICAgICAgICAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IHJlY2VpdmVkSURUb2tlbi5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICBsZXQgZGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcblxuICAgICAgICAgICAgICBkZWNvZGVkSURUb2tlbi5ub25jZSA9IGlkTm9uY2U7XG4gICAgICAgICAgICAgIGxldCBpbnNlcnRlZE5vbmNlID0gYnRvYShKU09OLnN0cmluZ2lmeShkZWNvZGVkSURUb2tlbikpO1xuICAgICAgICAgICAgICBsZXQgbmV3SURUb2tlbiA9IGlkVG9rZW5TcGxpdGVkWzBdICsgJy4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGVkTm9uY2UgKyAnLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRUb2tlblNwbGl0ZWRbMl07XG5cbiAgICAgICAgICAgICAgbGV0IGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3Rva2VuSUQ6IG5ld0lEVG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VufSkpO1xuICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ2dvb2dsZS5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcblxuICAgICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgICAgICAgICAgbGV0IHJldHVyblZhbHVlID0ge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpuZXdJZGVudGl0eScsIHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sKi9cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byBnZW5lcmF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb25cbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb25cbiAgKlxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbjogKGlkcEluZm8sIGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcbiAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb246aGludF0nLCBoaW50KTtcbiAgICBsZXQgaSA9IGlkcEluZm87XG5cbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIC8vVE9ETyBsYXRlciBzaG91bGQgYmUgZGVmaW5lZCBhIGJldHRlciBhcHByb2FjaFxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmICghaGludCkge1xuICAgICAgICAvKnRyeSB7XG4gICAgICAgICAgaWYgKHdpbmRvdykgeyBcbiAgICAgICAgICAgIHJlc29sdmUoJ3VybCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsqL1xuXG4gICAgICAgIGxldCByZXF1ZXN0VXJsID0gaS5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgKyAncmVkaXJlY3RfdXJpPScgKyByZWRpcmVjdFVSSSBcbi8vICAgICAgICArICcmcHJvbXB0PWNvbnNlbnQmcmVzcG9uc2VfdHlwZT0nICsgaS50eXBlIFxuICAgICAgICArICcmcmVzcG9uc2VfdHlwZT0nICsgaS50eXBlIFxuICAgICAgICArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEIFxuICAgICAgICArICcmZ3JhbnRlZF9zY29wZXM9JyArIGkuZ3JhbnRlZF9zY29wZXMgXG4vLyAgICAgICAgKyAnJmFjY2Vzc190eXBlPScgKyBpLmFjY2Vzc1R5cGVcbi8vICAgICAgICArICcmbm9uY2U9JyArIGNvbnRlbnRzXG4gICAgICAgICsgJyZzdGF0ZT0nICsgaS5zdGF0ZSA7XG4gICAgICAgICAgICBcbi8vICAgICAgICBsZXQgcmVxdWVzdFVybCA9IGkuYXV0aG9yaXNhdGlvbkVuZHBvaW50ICsgJ3Njb3BlPScgKyBpLnNjb3BlICsgJyZjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJnJlZGlyZWN0X3VyaT0nICsgaS5yZWRpcmVjdFVSSSArICcmcmVzcG9uc2VfdHlwZT1jb2RlJyArIC8qaS50eXBlICsqLyAnJnN0YXRlPScgKyBpLnN0YXRlICsgJyZwcm9tcHQ9Y29uc2VudCZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlICsgJyZub25jZT0nICsgY29udGVudHM7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb25dIE5PX0hJTlQ6IHJlamVjdGluZyB3aXRoIHJlcXVlc3RVcmwgJywgcmVxdWVzdFVybCk7XG5cbiAgICAgICAgcmVqZWN0KHtuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsfSk7XG5cbiAgICAgIC8vICB9IFxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0aGUgcmVxdWVzdCBoYXZlIGFscmVhZHkgYmVlbiBtYWRlLCBzbyBpZHBQUm94eSB3aWxsIGV4Y2hhbmdlIHRoZSB0b2tlbnMgYWxvbmcgdG8gdGhlIGlkcCwgdG8gb2J0YWluIHRoZSBpbmZvcm1hdGlvbiBuZWNlc3NhcnlcbiAgICAgICAgbGV0IGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTtcbiAgICAgICAgbGV0IGV4cGlyZXMgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKSArIHVybFBhcnNlcihoaW50LCAnZXhwaXJlc19pbicpO1xuICAgICAgICAvLyAgICAgICAgbGV0IGlkVG9rZW4gPSB1cmxQYXJzZXIoaGludCwgJ2lkX3Rva2VuJyk7XG4vLyAgICAgICAgbGV0IGNvZGUgPSB1cmxQYXJzZXIoaGludCwgJ2NvZGUnKTtcblxuICAgICAgICAvL2NvbnNvbGUubG9nKCdHT09HTEVfUFJPWFlfSElOVDogJywgaGludCk7XG5cbi8vICAgICAgIGV4Y2hhbmdlQ29kZShjb2RlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gLy8gICAgICAgY29uc29sZS5sb2coJ1tHb29nbGVJZHBQcm94eS5nZW5lcmF0ZUFzc2VydGlvbl0gb2J0YWluZWQgZXhjaGFuZ2VkIFRva2VuICcsIHZhbHVlKTtcbiAgICAgICAgXG4gICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXJcbiAgICAgICAgICAvL2xldCBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgIGxldCBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgYWNjZXNzVG9rZW47XG4gICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaW5mb1Rva2VuKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uXSBvYnRhaW5lZCBpbmZvVG9rZW4gJywgaW5mb1Rva2VuKTtcbiAgICAgICAgICAgIFxuLy8gICAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7YWNjZXNzVG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgaWRUb2tlbjogdmFsdWUuaWRfdG9rZW4sIHJlZnJlc2hUb2tlbjogdmFsdWUucmVmcmVzaF90b2tlbiwgdG9rZW5UeXBlOiB2YWx1ZS50b2tlbl90eXBlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XG4gICAgICAgICAgICBcbi8vICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuO1xuXG4gICAgICAgICAgICBsZXQgdXNlclByb2ZpbGUgPSB7XG4gICAgICAgICAgICAgIGlkZW50aWZpZXI6IGluZm9Ub2tlbi5pZCxcbiAgICAgICAgICAgICAgbmFtZTogaW5mb1Rva2VuLm5hbWUsXG4gICAgICAgICAgICAgIHBpY3R1cmU6IGluZm9Ub2tlbi5waWN0dXJlLmRhdGEudXJsLFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5mb1Rva2VuLmhhc093blByb3BlcnR5KCdlbWFpbCcpKSB1c2VyUHJvZmlsZS5lbWFpbCA9IGluZm9Ub2tlbi5lbWFpbDtcbiAgICAgICAgICAgIGVsc2UgdXNlclByb2ZpbGUuZW1haWwgPSBpbmZvVG9rZW4uaWQgKyAnQGZhY2Vib29rLmNvbSc7XG5cbiAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHtcbiAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuLFxuLy8gICAgICAgICAgICAgIGlkVG9rZW46IGlkVG9rZW4sXG4vLyAgICAgICAgICAgICAgcmVmcmVzaFRva2VuOiB2YWx1ZS5yZWZyZXNoX3Rva2VuLFxuICAgICAgICAgICAgICB0b2tlblR5cGU6ICdCZWFyZXInLCAgXG4gICAgICAgICAgICAgIGluZm9Ub2tlbjogdXNlclByb2ZpbGVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBcbi8vICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIGlkVG9rZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIGlkVG9rZW5cbiAgLyogICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpZFRva2VuVVJMKS50aGVuKGZ1bmN0aW9uKGlkVG9rZW5KU09OKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIGlkVG9rZW4gJywgaWRUb2tlbkpTT04pO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUudG9rZW5JREpTT04gPSBpZFRva2VuSlNPTjsqL1xuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gZXhwaXJlcztcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpbmZvVG9rZW4uZW1haWw7XG5cbiAgICAgICAgICAgICAgbGV0IGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3Rva2VuSUQ6IGFjY2Vzc1Rva2VuLCB0b2tlbklESlNPTjogaW5mb1Rva2VufSkpO1xuICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ2ZhY2Vib29rLmNvbScsIHByb3RvY29sOiAnT0FVVEgyJ307XG5cbiAgICAgICAgICAgICAgLy9UT0RPIGRlbGV0ZSBsYXRlciB0aGUgZmllbGQgaW5mb1Rva2VuLCBhbmQgZGVsZXRlIHRoZSBuZWVkIGluIHRoZSBleGFtcGxlXG4gICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XG5cbiAgICAgICAgICAgICAgaWRlbnRpdGllc1tuSWRlbnRpdHldID0gcmV0dXJuVmFsdWU7XG4gICAgICAgICAgICAgICsrbklkZW50aXR5O1xuXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb25dIHJldHVybmluZzogJywgSlNPTi5zdHJpbmdpZnkocmV0dXJuVmFsdWUpKTtcblxuICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9KTtcbi8qICAgICAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcblxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuXG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pOyovXG5cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvT0FVVEguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n\tSo that an application can use Facebook's OAuth 2.0 authentication system for user login,\n\tfirst is required to set up a project in the Facebook Developers Console (https://developers.facebook.com/apps/) to obtain OAuth 2.0 credentials and set a redirect URI.\n */\n\nvar facebookInfo = exports.facebookInfo = {\n  \"clientID\": \"516850078685290\",\n  \"authorisationEndpoint\": \"https://www.facebook.com/v2.11/dialog/oauth?\",\n  \"userinfo\": \"https://graph.facebook.com/v2.11/me/?fields=id,name,picture,email&access_token=\",\n  \"type\": \"token\",\n  \"granted_scopes\": \"email,public_profile\",\n  \"state\": \"state\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2ZhY2Vib29rL0ZhY2Vib29rSW5mby5qcz8xNTdjIl0sIm5hbWVzIjpbImZhY2Vib29rSW5mbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7QUFLTyxJQUFJQSxzQ0FBZTtBQUNsQixjQUF3QixpQkFETjtBQUVsQiwyQkFBeUIsOENBRlA7QUFHbEIsY0FBeUIsaUZBSFA7QUFJbEIsVUFBeUIsT0FKUDtBQUtsQixvQkFBeUIsc0JBTFA7QUFNbEIsV0FBeUI7QUFOUCxDQUFuQiIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0U28gdGhhdCBhbiBhcHBsaWNhdGlvbiBjYW4gdXNlIEZhY2Vib29rJ3MgT0F1dGggMi4wIGF1dGhlbnRpY2F0aW9uIHN5c3RlbSBmb3IgdXNlciBsb2dpbixcblx0Zmlyc3QgaXMgcmVxdWlyZWQgdG8gc2V0IHVwIGEgcHJvamVjdCBpbiB0aGUgRmFjZWJvb2sgRGV2ZWxvcGVycyBDb25zb2xlIChodHRwczovL2RldmVsb3BlcnMuZmFjZWJvb2suY29tL2FwcHMvKSB0byBvYnRhaW4gT0F1dGggMi4wIGNyZWRlbnRpYWxzIGFuZCBzZXQgYSByZWRpcmVjdCBVUkkuXG4gKi9cblxuZXhwb3J0IGxldCBmYWNlYm9va0luZm8gPSB7XG4gICAgICAgIFwiY2xpZW50SURcIjogICAgICAgICAgICAgXCI1MTY4NTAwNzg2ODUyOTBcIixcbiAgICAgICAgXCJhdXRob3Jpc2F0aW9uRW5kcG9pbnRcIjogXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vdjIuMTEvZGlhbG9nL29hdXRoP1wiLFxuICAgICAgICBcInVzZXJpbmZvXCI6ICAgICAgICAgICAgICBcImh0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL3YyLjExL21lLz9maWVsZHM9aWQsbmFtZSxwaWN0dXJlLGVtYWlsJmFjY2Vzc190b2tlbj1cIixcbiAgICAgICAgXCJ0eXBlXCI6ICAgICAgICAgICAgICAgICAgXCJ0b2tlblwiLFxuICAgICAgICBcImdyYW50ZWRfc2NvcGVzXCI6ICAgICAgICBcImVtYWlsLHB1YmxpY19wcm9maWxlXCIsXG4gICAgICAgIFwic3RhdGVcIjogICAgICAgICAgICAgICAgIFwic3RhdGVcIlxuICAgICAgfTtcblxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2ZhY2Vib29rL0ZhY2Vib29rSW5mby5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdpProxy = void 0;\nvar idpInfo = void 0;\n/**\n* Abstract Identity Provider Proxy Protocol Stub to be extended by real Idp Proxies\n*/\n\nvar AbstractIdpProxyProtoStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function AbstractIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, AbstractIdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    IdpProxy = config.idpProxy;\n    idpInfo = config.idpInfo;\n\n    console.log('[GoogleIdpProxy] constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === config.idpUrl) {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(AbstractIdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n      console.info('[GoogleIdpProxy] receiving request: ', msg);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          IdpProxy.generateAssertion(idpInfo, params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          //       console.info('validateAssertion');\n          IdpProxy.validateAssertion(idpInfo, params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          //     console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      console.log('[IdpProxy.replyMessage] ', message);\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return AbstractIdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nexports.default = AbstractIdpProxyProtoStub;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L0Fic3RyYWN0SWRwUHJveHlTdHViLmpzPzI3MjQiXSwibmFtZXMiOlsiSWRwUHJveHkiLCJpZHBJbmZvIiwiQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJfdGhpcyIsIm1lc3NhZ2VCdXMiLCJpZHBQcm94eSIsImNvbnNvbGUiLCJsb2ciLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwiaWRwVXJsIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJwYXJhbXMiLCJib2R5IiwiaW5mbyIsIm1ldGhvZCIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiY29udGVudHMiLCJvcmlnaW4iLCJ1c2VybmFtZUhpbnQiLCJ0aGVuIiwidmFsdWUiLCJyZXBseU1lc3NhZ2UiLCJlcnJvciIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiYXNzZXJ0aW9uIiwicmVmcmVzaEFzc2VydGlvbiIsImlkZW50aXR5IiwibWVzc2FnZSIsImlkIiwidHlwZSIsImZyb20iLCJjb2RlIiwicG9zdE1lc3NhZ2UiLCJyZWFzb24iLCJfc3RhdGUiLCJkZXNjIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBSUEsaUJBQUo7QUFDQSxJQUFJQyxnQkFBSjtBQUNBOzs7O0lBR01DLHlCOztBQUVGOzs7Ozs7OztBQVFELHFDQUFZQyxtQkFBWixFQUFpQ0MsR0FBakMsRUFBc0NDLE1BQXRDLEVBQStDO0FBQUE7O0FBQzdDLFFBQUlDLFFBQVEsSUFBWjtBQUNBQSxVQUFNSCxtQkFBTixHQUE0QkEsbUJBQTVCO0FBQ0FHLFVBQU1DLFVBQU4sR0FBbUJILEdBQW5CO0FBQ0FFLFVBQU1ELE1BQU4sR0FBZUEsTUFBZjs7QUFFQUwsZUFBV0ssT0FBT0csUUFBbEI7QUFDQVAsY0FBVUksT0FBT0osT0FBakI7O0FBRUFRLFlBQVFDLEdBQVIsQ0FBWSw4QkFBWjs7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LENBQVN1QixJQUFULEdBQWdCRixNQUFoQjtBQUNEOztBQUVEakMsWUFBTUMsVUFBTixDQUFpQitCLFdBQWpCLENBQTZCMUIsR0FBN0I7QUFDRDs7Ozs7O0FBR0g7O0FBRUE7Ozs7Ozs7OztrQkFPZVYseUIiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBJZHBQcm94eTtcbmxldCBpZHBJbmZvO1xuLyoqXG4qIEFic3RyYWN0IElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWIgdG8gYmUgZXh0ZW5kZWQgYnkgcmVhbCBJZHAgUHJveGllc1xuKi9cbmNsYXNzIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIge1xuICBcbiAgICAvKipcbiAgICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXG4gICAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxuICAgICpcbiAgICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgICAqL1xuICAgY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcgKSB7XG4gICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xuICAgICBfdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgICAgSWRwUHJveHkgPSBjb25maWcuaWRwUHJveHk7XG4gICAgIGlkcEluZm8gPSBjb25maWcuaWRwSW5mbztcbiAgXG4gICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHldIGNvbnN0cnVjdG9yJyk7XG4gIFxuICAgICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7XG4gICAgICAgaWYgKG1zZy50byA9PT0gY29uZmlnLmlkcFVybCApIHtcbiAgXG4gICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcbiAgICAgICB9XG4gICAgIH0pO1xuICAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xuICAgfVxuICBcbiAgICAvKipcbiAgICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG4gICAgKi9cbiAgICByZXF1ZXN0VG9JZHAobXNnKSB7XG4gICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcbiAgICAgIC8vY29uc29sZS5pbmZvKCdyZXF1ZXN0VG9JZHA6JywgbXNnLmJvZHkubWV0aG9kKTtcbiAgICAgIGNvbnNvbGUuaW5mbygnW0dvb2dsZUlkcFByb3h5XSByZWNlaXZpbmcgcmVxdWVzdDogJywgbXNnKTtcbiAgICAgIFxuICAgICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOlxuICAgICAgICAgIElkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uKGlkcEluZm8sIHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcbiAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTt9LFxuICBcbiAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuICAgLy8gICAgICAgY29uc29sZS5pbmZvKCd2YWxpZGF0ZUFzc2VydGlvbicpO1xuICAgICAgICAgIElkcFByb3h5LnZhbGlkYXRlQXNzZXJ0aW9uKGlkcEluZm8sIHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcbiAgXG4gICAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlZnJlc2hBc3NlcnRpb24nOlxuICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdyZWZyZXNoQXNzZXJ0aW9uJyk7XG4gICAgICAgICAgSWRwUHJveHkucmVmcmVzaEFzc2VydGlvbihwYXJhbXMuaWRlbnRpdHkpLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcbiAgXG4gICAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICAgICk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICBcbiAgICAvKipcbiAgICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKlxuICAgICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcbiAgICAqL1xuICAgIHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XG4gICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICBcbiAgICAgIGxldCBtZXNzYWdlID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgICAgICAgICAgICAgICAgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX07XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbSWRwUHJveHkucmVwbHlNZXNzYWdlXSAnLCBtZXNzYWdlKTtcbiAgXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgXG4gICAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgXG4gICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcbiAgXG4gICAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTtcbiAgXG4gICAgICBsZXQgbXNnID0ge1xuICAgICAgICB0eXBlOiAndXBkYXRlJyxcbiAgICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgXG4gICAgICBpZiAocmVhc29uKSB7XG4gICAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XG4gICAgICB9XG4gIFxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG4gIFxuICAvKipcbiAgICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXG4gICAqL1xuICBleHBvcnQgZGVmYXVsdCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViO1xuICBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L0Fic3RyYWN0SWRwUHJveHlTdHViLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "facebook.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy for Facebook idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "50ef75417b00e8340d1ddf496be07274a",
    "constraints": {
      "browser": true
    },
    "objectName": "facebook.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "GoogleIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = activate;\n\nvar _OIDC = __webpack_require__(1);\n\nvar _GoogleInfo = __webpack_require__(2);\n\nvar _AbstractIdpProxyStub = __webpack_require__(3);\n\nvar _AbstractIdpProxyStub2 = _interopRequireDefault(_AbstractIdpProxyStub);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n* Google Identity Provider Proxy Protocol Stub\n*/\nvar GoogleIdpProxyProtoStub = function (_AbstractIdpProxyProt) {\n  _inherits(GoogleIdpProxyProtoStub, _AbstractIdpProxyProt);\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function GoogleIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, GoogleIdpProxyProtoStub);\n\n    config.idpUrl = 'domain-idp://google.com';\n    config.idpProxy = _OIDC.IdpProxy;\n    config.idpInfo = _GoogleInfo.googleInfo;\n    return _possibleConstructorReturn(this, (GoogleIdpProxyProtoStub.__proto__ || Object.getPrototypeOf(GoogleIdpProxyProtoStub)).call(this, runtimeProtoStubURL, bus, config));\n  }\n\n  return GoogleIdpProxyProtoStub;\n}(_AbstractIdpProxyStub2.default);\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'GoogleIdpProxyProtoStub',\n    instance: new GoogleIdpProxyProtoStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Hb29nbGVJZHBQcm94eVN0dWIuaWRwLmpzP2Q3MTYiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJHb29nbGVJZHBQcm94eVByb3RvU3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJpZHBVcmwiLCJpZHBQcm94eSIsImlkcEluZm8iLCJ1cmwiLCJuYW1lIiwiaW5zdGFuY2UiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQWtDMEJBLFE7O0FBbEMxQjs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7O0FBRUE7OztJQUdNQyx1Qjs7O0FBRUY7Ozs7Ozs7O0FBUUQsbUNBQVlDLG1CQUFaLEVBQWlDQyxHQUFqQyxFQUFzQ0MsTUFBdEMsRUFBOEM7QUFBQTs7QUFDNUNBLFdBQU9DLE1BQVAsR0FBZ0IseUJBQWhCO0FBQ0FELFdBQU9FLFFBQVA7QUFDQUYsV0FBT0csT0FBUDtBQUg0Qyw2SUFJdENMLG1CQUpzQyxFQUlqQkMsR0FKaUIsRUFJWkMsTUFKWTtBQUs3Qzs7Ozs7QUFHRjs7QUFFQTs7Ozs7Ozs7O0FBT2UsU0FBU0osUUFBVCxDQUFrQlEsR0FBbEIsRUFBdUJMLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNqRCxTQUFPO0FBQ0xLLFVBQU0seUJBREQ7QUFFTEMsY0FBVSxJQUFJVCx1QkFBSixDQUE0Qk8sR0FBNUIsRUFBaUNMLEdBQWpDLEVBQXNDQyxNQUF0QztBQUZMLEdBQVA7QUFJRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJZHBQcm94eX0gZnJvbSBcIi4uL09JRENcIlxuaW1wb3J0IHtnb29nbGVJbmZvfSBmcm9tIFwiLi9Hb29nbGVJbmZvXCJcbmltcG9ydCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIGZyb20gXCIuLi9BYnN0cmFjdElkcFByb3h5U3R1YlwiXG5cbi8qKlxuKiBHb29nbGUgSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxuKi9cbmNsYXNzIEdvb2dsZUlkcFByb3h5UHJvdG9TdHViIGV4dGVuZHMgQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YiB7XG4gIFxuICAgIC8qKlxuICAgICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXG4gICAgKlxuICAgICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICAgICovXG4gICBjb25zdHJ1Y3RvcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xuICAgICBjb25maWcuaWRwVXJsID0gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJztcbiAgICAgY29uZmlnLmlkcFByb3h5ID0gSWRwUHJveHk7XG4gICAgIGNvbmZpZy5pZHBJbmZvID0gZ29vZ2xlSW5mbztcbiAgICAgc3VwZXIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpO1xuICAgfVxuICB9XG4gIFxuICAvLyBleHBvcnQgZGVmYXVsdCBJZHBQcm94eVByb3RvU3R1YjtcbiAgXG4gIC8qKlxuICAgKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cbiAgICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAgICovXG4gIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogJ0dvb2dsZUlkcFByb3h5UHJvdG9TdHViJyxcbiAgICAgIGluc3RhbmNlOiBuZXcgR29vZ2xlSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZylcbiAgICB9O1xuICB9XG4gIFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL0dvb2dsZUlkcFByb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar identities = {};\nvar nIdentity = 0;\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\n/**\n* Function to exchange the code received to the id Token, access token and a refresh token\n*\n*/\n/*let exchangeCode = (function(code) {\n  let i = googleInfo;\n\n  let URL = i.tokenEndpoint + 'code=' + code + '&client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' + i.redirectURI + '&grant_type=authorization_code&access_type=' + i.accessType;\n\n\n  return new Promise(function(resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function(info) {\n      console.log('[GoogleIdpProxy.exchangeCode] returned info: ', info);\n      resolve(info);\n    }, function(error) {\n      reject(error);\n    });\n\n  });\n});\n\nlet exchangeRefreshToken = (function(refreshToken) {\n  let i = googleInfo;\n\n  let URL = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + refreshToken + '&grant_type=refresh_token';\n\n  return new Promise(function(resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function(info) {\n      resolve(info);\n    }, function(error) {\n      reject(error);\n    });\n\n  });\n});*/\n\n/**\n* Identity Provider Proxy\n*/\nvar IdpProxy = exports.IdpProxy = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(idpInfo, assertion, origin) {\n    console.info('[GoogleIdpProxy.validateAssertionProxy] assertion: ', atob(assertion));\n    //    console.info('validateAssertionProxy:atob(assertion)', atob(assertion));\n\n    //TODO check the values with the hash received\n    //  return new Promise(function(resolve,reject) {\n\n    var decodedContent2 = atob(assertion);\n    var content = JSON.parse(decodedContent2);\n    var idTokenSplited = content.tokenID.split('.');\n    var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n    //resolve({identity: idToken.email, contents: idToken.nonce});\n\n    //});\n\n    return new Promise(function (resolve, reject) {\n      var i = idpInfo;\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      sendHTTPRequest('GET', i.tokenInfo + content.tokenID).then(function (result) {\n        if (JSON.stringify(result) === JSON.stringify(content.tokenIDJSON)) {\n          resolve({ identity: content.tokenIDJSON.email, contents: content.tokenIDJSON });\n        } else {\n          reject('invalid');\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n  /*\n    refreshAssertion: (identity) => {\n      //console.log('PROXY:refreshAssertion:oldIdentity', identity);\n      let i = googleInfo;\n  \n      return new Promise(function(resolve, reject) {\n        if (identity.info.refreshToken) {\n          exchangeRefreshToken(identity.info.refreshToken).then(function(value) {\n            let infoTokenURL = i.userinfo + value.access_token;\n            sendHTTPRequest('GET', infoTokenURL).then(function(infoToken) {\n  \n              let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: identity.info.refreshToken, tokenType: identity.info.tokenType, infoToken: infoToken};\n              let idTokenURL = i.tokenInfo + value.id_token;\n  \n              //obtain information about the user idToken\n              sendHTTPRequest('GET', idTokenURL).then(function(idToken) {\n  \n                identityBundle.tokenIDJSON = idToken;\n                identityBundle.expires = idToken.exp;\n                identityBundle.email = idToken.email;\n  \n                let oldIDToken = JSON.parse(atob(identity.assertion));\n                let oldIdTokenSplited = oldIDToken.tokenID.split('.');\n                let oldDecodedIDToken = JSON.parse(atob(oldIdTokenSplited[1]));\n                let idNonce = oldDecodedIDToken.nonce;\n  \n                let receivedIDToken = value.id_token;\n                let idTokenSplited = receivedIDToken.split('.');\n                let decodedIDToken = JSON.parse(atob(idTokenSplited[1]));\n  \n                decodedIDToken.nonce = idNonce;\n                let insertedNonce = btoa(JSON.stringify(decodedIDToken));\n                let newIDToken = idTokenSplited[0] + '.' +\n                                   insertedNonce + '.' +\n                                   idTokenSplited[2];\n  \n                let assertion = btoa(JSON.stringify({tokenID: newIDToken, tokenIDJSON: idToken}));\n                let idpBundle = {domain: 'google.com', protocol: 'OIDC'};\n  \n                //TODO delete later the field infoToken, and delete the need in the example\n                let returnValue = {assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken};\n                //console.log('PROXY:refreshAssertion:newIdentity', returnValue);\n                resolve(returnValue);\n              });\n            });\n          });\n        }\n      });\n    },*/\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(idpInfo, contents, origin, hint) {\n    console.log('[GoogleIdpProxy.generateAssertion:contents]', contents);\n    console.log('[GoogleIdpProxy.generateAssertion:origin]', origin);\n    console.log('[GoogleIdpProxy.generateAssertion:hint]', hint);\n    var i = idpInfo;\n\n    //start the login phase\n    //TODO later should be defined a better approach\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n        /*try {\n          if (window) { \n            resolve('url');\n          }\n        } catch (error) {*/\n\n        var requestUrl = i.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&prompt=consent&response_type=' + i.type + '&client_id=' + i.clientID + '&scope=' + i.scope + '&access_type=' + i.accessType + '&nonce=' + contents + '&state=' + i.state;\n\n        //        let requestUrl = i.authorisationEndpoint + 'scope=' + i.scope + '&client_id=' + i.clientID + '&redirect_uri=' + i.redirectURI + '&response_type=code' + /*i.type +*/ '&state=' + i.state + '&prompt=consent&access_type=' + i.accessType + '&nonce=' + contents;\n        console.log('[GoogleIdpProxy.generateAssertion] NO_HINT: rejecting with requestUrl ', requestUrl);\n\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n\n        //  } \n      } else {\n        // the request have already been made, so idpPRoxy will exchange the tokens along to the idp, to obtain the information necessary\n        var accessToken = urlParser(hint, 'access_token');\n        var idToken = urlParser(hint, 'id_token');\n        var code = urlParser(hint, 'code');\n\n        //console.log('GOOGLE_PROXY_HINT: ', hint);\n\n        //       exchangeCode(code).then(function(value) {\n        //       console.log('[GoogleIdpProxy.generateAssertion] obtained exchanged Token ', value);\n\n        //obtain information about the user\n        //let infoTokenURL = i.userinfo + value.access_token;\n        var infoTokenURL = i.userinfo + accessToken;\n        sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n          console.log('[GoogleIdpProxy.generateAssertion] obtained infoToken ', infoToken);\n\n          //            let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: value.refresh_token, tokenType: value.token_type, infoToken: infoToken};\n\n          //            let idTokenURL = i.tokenInfo + value.id_token;\n\n          var identityBundle = {\n            accessToken: accessToken,\n            idToken: idToken,\n            //              refreshToken: value.refresh_token,\n            tokenType: 'Bearer',\n            infoToken: infoToken\n          };\n\n          var idTokenURL = i.tokenInfo + idToken;\n\n          //obtain information about the user idToken\n          sendHTTPRequest('GET', idTokenURL).then(function (idTokenJSON) {\n            console.log('[GoogleIdpProxy.generateAssertion] obtained idToken ', idTokenJSON);\n\n            identityBundle.tokenIDJSON = idTokenJSON;\n            identityBundle.expires = idTokenJSON.exp;\n            identityBundle.email = idTokenJSON.email;\n\n            var assertion = btoa(JSON.stringify({ tokenID: idToken, tokenIDJSON: idTokenJSON }));\n            var idpBundle = { domain: 'google.com', protocol: 'OIDC' };\n\n            //TODO delete later the field infoToken, and delete the need in the example\n            var returnValue = { assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken };\n\n            identities[nIdentity] = returnValue;\n            ++nIdentity;\n\n            console.log('[GoogleIdpProxy.generateAssertion] returning: ', JSON.stringify(returnValue));\n\n            resolve(returnValue);\n          }, function (e) {\n\n            reject(e);\n          });\n        }, function (error) {\n\n          reject(error);\n        });\n        /*        }, function(err) {\n        \n                  reject(err);\n                });*/\n      }\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L09JREMuanM/MzcwYSJdLCJuYW1lcyI6WyJpZGVudGl0aWVzIiwibklkZW50aXR5IiwicmVkaXJlY3RVUkkiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwb3J0IiwidXJsUGFyc2VyIiwidXJsIiwibmFtZSIsInJlcGxhY2UiLCJyZWdleFMiLCJyZWdleCIsIlJlZ0V4cCIsInJlc3VsdHMiLCJleGVjIiwic2VuZEhUVFBSZXF1ZXN0IiwibWV0aG9kIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImUiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiaW5mbyIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJJZHBQcm94eSIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiaWRwSW5mbyIsImFzc2VydGlvbiIsIm9yaWdpbiIsImNvbnNvbGUiLCJhdG9iIiwiZGVjb2RlZENvbnRlbnQyIiwiY29udGVudCIsImlkVG9rZW5TcGxpdGVkIiwidG9rZW5JRCIsInNwbGl0IiwiaWRUb2tlbiIsImkiLCJkZWNvZGVkQ29udGVudCIsInRva2VuSW5mbyIsInRoZW4iLCJzdHJpbmdpZnkiLCJyZXN1bHQiLCJ0b2tlbklESlNPTiIsImlkZW50aXR5IiwiZW1haWwiLCJjb250ZW50cyIsImNhdGNoIiwiZXJyIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwibG9nIiwicmVxdWVzdFVybCIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsInR5cGUiLCJjbGllbnRJRCIsInNjb3BlIiwiYWNjZXNzVHlwZSIsInN0YXRlIiwibG9naW5VcmwiLCJhY2Nlc3NUb2tlbiIsImNvZGUiLCJpbmZvVG9rZW5VUkwiLCJ1c2VyaW5mbyIsImluZm9Ub2tlbiIsImlkZW50aXR5QnVuZGxlIiwidG9rZW5UeXBlIiwiaWRUb2tlblVSTCIsImlkVG9rZW5KU09OIiwiZXhwaXJlcyIsImV4cCIsImJ0b2EiLCJpZHBCdW5kbGUiLCJkb21haW4iLCJyZXR1cm5WYWx1ZSIsImlkcCIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSxJQUFJQSxhQUFhLEVBQWpCO0FBQ0EsSUFBSUMsWUFBWSxDQUFoQjtBQUNBLElBQUlDLGNBQWNDLFNBQVNDLFFBQVQsR0FBb0IsSUFBcEIsR0FBMkJELFNBQVNFLFFBQXBDLElBQWdERixTQUFTRyxJQUFULEtBQWtCLEVBQWxCLEdBQXVCLE1BQU1ILFNBQVNHLElBQXRDLEdBQTZDLEVBQTdGLENBQWxCOztBQUlBO0FBQ0EsU0FBU0MsU0FBVCxDQUFtQkMsR0FBbkIsRUFBd0JDLElBQXhCLEVBQThCO0FBQzVCQSxTQUFPQSxLQUFLQyxPQUFMLENBQWEsTUFBYixFQUFxQixNQUFyQixFQUE2QkEsT0FBN0IsQ0FBcUMsTUFBckMsRUFBNkMsTUFBN0MsQ0FBUDtBQUNBLE1BQUlDLFNBQVMsWUFBWUYsSUFBWixHQUFtQixXQUFoQztBQUNBLE1BQUlHLFFBQVEsSUFBSUMsTUFBSixDQUFXRixNQUFYLENBQVo7QUFDQSxNQUFJRyxVQUFVRixNQUFNRyxJQUFOLENBQVdQLEdBQVgsQ0FBZDtBQUNBLE1BQUlNLFlBQVksSUFBaEIsRUFDQSxPQUFPLEVBQVAsQ0FEQSxLQUdBLE9BQU9BLFFBQVEsQ0FBUixDQUFQO0FBQ0Q7O0FBRUQsU0FBU0UsZUFBVCxDQUF5QkMsTUFBekIsRUFBaUNULEdBQWpDLEVBQXNDO0FBQ3BDLE1BQUlVLE1BQU0sSUFBSUMsY0FBSixFQUFWO0FBQ0EsTUFBSSxxQkFBcUJELEdBQXpCLEVBQThCO0FBQzVCQSxRQUFJRSxJQUFKLENBQVNILE1BQVQsRUFBaUJULEdBQWpCLEVBQXNCLElBQXRCO0FBQ0QsR0FGRCxNQUVPLElBQUksT0FBT2EsY0FBUCxJQUF5QixXQUE3QixFQUEwQztBQUMvQztBQUNBO0FBQ0FILFVBQU0s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LCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxubGV0IGlkZW50aXRpZXMgPSB7fTtcbmxldCBuSWRlbnRpdHkgPSAwO1xubGV0IHJlZGlyZWN0VVJJID0gbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUgKyAobG9jYXRpb24ucG9ydCAhPT0gJycgPyAnOicgKyBsb2NhdGlvbi5wb3J0IDogJycgKTtcblxuXG5cbi8vZnVuY3Rpb24gdG8gcGFyc2UgdGhlIHF1ZXJ5IHN0cmluZyBpbiB0aGUgZ2l2ZW4gVVJMIHRvIG9iYXRpbiBjZXJ0YWluIHZhbHVlc1xuZnVuY3Rpb24gdXJsUGFyc2VyKHVybCwgbmFtZSkge1xuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXFxcXScpO1xuICBsZXQgcmVnZXhTID0gJ1tcXFxcIyY/XScgKyBuYW1lICsgJz0oW14mI10qKSc7XG4gIGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTtcbiAgbGV0IHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG4gIGlmIChyZXN1bHRzID09PSBudWxsKVxuICByZXR1cm4gJyc7XG4gIGVsc2VcbiAgcmV0dXJuIHJlc3VsdHNbMV07XG59XG5cbmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkge1xuICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBYRG9tYWluUmVxdWVzdC5cbiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLlxuICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIENPUlMgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci5cbiAgICB4aHIgPSBudWxsO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuICAgIGlmICh4aHIpIHtcbiAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIGxldCBpbmZvID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIHJlc29sdmUoaW5mbyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh4aHIuc3RhdHVzID09PSA0MDApIHtcbiAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnc29tZXRoaW5nIGVsc2Ugb3RoZXIgdGhhbiAyMDAgd2FzIHJldHVybmVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgeGhyLnNlbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KCdDT1JTIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiogRnVuY3Rpb24gdG8gZXhjaGFuZ2UgdGhlIGNvZGUgcmVjZWl2ZWQgdG8gdGhlIGlkIFRva2VuLCBhY2Nlc3MgdG9rZW4gYW5kIGEgcmVmcmVzaCB0b2tlblxuKlxuKi9cbi8qbGV0IGV4Y2hhbmdlQ29kZSA9IChmdW5jdGlvbihjb2RlKSB7XG4gIGxldCBpID0gZ29vZ2xlSW5mbztcblxuICBsZXQgVVJMID0gaS50b2tlbkVuZHBvaW50ICsgJ2NvZGU9JyArIGNvZGUgKyAnJmNsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZGlyZWN0X3VyaT0nICsgaS5yZWRpcmVjdFVSSSArICcmZ3JhbnRfdHlwZT1hdXRob3JpemF0aW9uX2NvZGUmYWNjZXNzX3R5cGU9JyArIGkuYWNjZXNzVHlwZTtcblxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24oaW5mbykge1xuICAgICAgY29uc29sZS5sb2coJ1tHb29nbGVJZHBQcm94eS5leGNoYW5nZUNvZGVdIHJldHVybmVkIGluZm86ICcsIGluZm8pO1xuICAgICAgcmVzb2x2ZShpbmZvKTtcbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcblxuICB9KTtcbn0pO1xuXG5sZXQgZXhjaGFuZ2VSZWZyZXNoVG9rZW4gPSAoZnVuY3Rpb24ocmVmcmVzaFRva2VuKSB7XG4gIGxldCBpID0gZ29vZ2xlSW5mbztcblxuICBsZXQgVVJMID0gaS50b2tlbkVuZHBvaW50ICsgJ2NsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZnJlc2hfdG9rZW49JyArIHJlZnJlc2hUb2tlbiArICcmZ3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuJztcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgVVJMKS50aGVuKGZ1bmN0aW9uKGluZm8pIHtcbiAgICAgIHJlc29sdmUoaW5mbyk7XG4gICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG5cbiAgfSk7XG59KTsqL1xuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHlcbiovXG5leHBvcnQgbGV0IElkcFByb3h5ID0ge1xuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSB0aGUgaW1wbGVtZW50YXRpb25cbiAgKlxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcbiAgKiBAcGFyYW0gIHthc3NlcnRpb259ICAgIElkZW50aXR5IEFzc2VydGlvbiB0byBiZSB2YWxpZGF0ZWRcbiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBpZGVudGl0eSBhc3NlcnRpb24gdmFsaWRhdGlvbiByZXN1bHRcbiAgKi9cbiAgdmFsaWRhdGVBc3NlcnRpb246IChpZHBJbmZvLCBhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xuICAgIGNvbnNvbGUuaW5mbygnW0dvb2dsZUlkcFByb3h5LnZhbGlkYXRlQXNzZXJ0aW9uUHJveHldIGFzc2VydGlvbjogJywgYXRvYihhc3NlcnRpb24pKVxuLy8gICAgY29uc29sZS5pbmZvKCd2YWxpZGF0ZUFzc2VydGlvblByb3h5OmF0b2IoYXNzZXJ0aW9uKScsIGF0b2IoYXNzZXJ0aW9uKSk7XG5cbiAgICAvL1RPRE8gY2hlY2sgdGhlIHZhbHVlcyB3aXRoIHRoZSBoYXNoIHJlY2VpdmVkXG4gIC8vICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGRlY29kZWRDb250ZW50MiA9IGF0b2IoYXNzZXJ0aW9uKTtcbiAgICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudDIpO1xuICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gY29udGVudC50b2tlbklELnNwbGl0KCcuJyk7XG4gICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xuXG4gICAgICAvL3Jlc29sdmUoe2lkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZX0pO1xuXG4gICAgLy99KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuICAgICAgbGV0IGkgPSBpZHBJbmZvO1xuICAgICAgbGV0IGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pO1xuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaS50b2tlbkluZm8gKyBjb250ZW50LnRva2VuSUQpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHJlc3VsdCkgPT09IEpTT04uc3RyaW5naWZ5KGNvbnRlbnQudG9rZW5JREpTT04pKSB7XG4gICAgICAgICAgcmVzb2x2ZSh7aWRlbnRpdHk6IGNvbnRlbnQudG9rZW5JREpTT04uZW1haWwsIGNvbnRlbnRzOiBjb250ZW50LnRva2VuSURKU09OfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4vKlxuICByZWZyZXNoQXNzZXJ0aW9uOiAoaWRlbnRpdHkpID0+IHtcbiAgICAvL2NvbnNvbGUubG9nKCdQUk9YWTpyZWZyZXNoQXNzZXJ0aW9uOm9sZElkZW50aXR5JywgaWRlbnRpdHkpO1xuICAgIGxldCBpID0gZ29vZ2xlSW5mbztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikge1xuICAgICAgICBleGNoYW5nZVJlZnJlc2hUb2tlbihpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGxldCBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaW5mb1Rva2VuVVJMKS50aGVuKGZ1bmN0aW9uKGluZm9Ub2tlbikge1xuXG4gICAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7YWNjZXNzVG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgaWRUb2tlbjogdmFsdWUuaWRfdG9rZW4sIHJlZnJlc2hUb2tlbjogaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4sIHRva2VuVHlwZTogaWRlbnRpdHkuaW5mby50b2tlblR5cGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcbiAgICAgICAgICAgIGxldCBpZFRva2VuVVJMID0gaS50b2tlbkluZm8gKyB2YWx1ZS5pZF90b2tlbjtcblxuICAgICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgaWRUb2tlblxuICAgICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpZFRva2VuVVJMKS50aGVuKGZ1bmN0aW9uKGlkVG9rZW4pIHtcblxuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS50b2tlbklESlNPTiA9IGlkVG9rZW47XG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmV4cGlyZXMgPSBpZFRva2VuLmV4cDtcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsO1xuXG4gICAgICAgICAgICAgIGxldCBvbGRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkZW50aXR5LmFzc2VydGlvbikpO1xuICAgICAgICAgICAgICBsZXQgb2xkSWRUb2tlblNwbGl0ZWQgPSBvbGRJRFRva2VuLnRva2VuSUQuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgbGV0IG9sZERlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKG9sZElkVG9rZW5TcGxpdGVkWzFdKSk7XG4gICAgICAgICAgICAgIGxldCBpZE5vbmNlID0gb2xkRGVjb2RlZElEVG9rZW4ubm9uY2U7XG5cbiAgICAgICAgICAgICAgbGV0IHJlY2VpdmVkSURUb2tlbiA9IHZhbHVlLmlkX3Rva2VuO1xuICAgICAgICAgICAgICBsZXQgaWRUb2tlblNwbGl0ZWQgPSByZWNlaXZlZElEVG9rZW4uc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgbGV0IGRlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XG5cbiAgICAgICAgICAgICAgZGVjb2RlZElEVG9rZW4ubm9uY2UgPSBpZE5vbmNlO1xuICAgICAgICAgICAgICBsZXQgaW5zZXJ0ZWROb25jZSA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoZGVjb2RlZElEVG9rZW4pKTtcbiAgICAgICAgICAgICAgbGV0IG5ld0lEVG9rZW4gPSBpZFRva2VuU3BsaXRlZFswXSArICcuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZE5vbmNlICsgJy4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkVG9rZW5TcGxpdGVkWzJdO1xuXG4gICAgICAgICAgICAgIGxldCBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHt0b2tlbklEOiBuZXdJRFRva2VuLCB0b2tlbklESlNPTjogaWRUb2tlbn0pKTtcbiAgICAgICAgICAgICAgbGV0IGlkcEJ1bmRsZSA9IHtkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJ307XG5cbiAgICAgICAgICAgICAgLy9UT0RPIGRlbGV0ZSBsYXRlciB0aGUgZmllbGQgaW5mb1Rva2VuLCBhbmQgZGVsZXRlIHRoZSBuZWVkIGluIHRoZSBleGFtcGxlXG4gICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246bmV3SWRlbnRpdHknLCByZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LCovXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtpZHBJbmZvfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXG4gICogQHBhcmFtICB7Y29udGVudHN9IFRoZSBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXG4gICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyXG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cbiAgKi9cbiAgZ2VuZXJhdGVBc3NlcnRpb246IChpZHBJbmZvLCBjb250ZW50cywgb3JpZ2luLCBoaW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1tHb29nbGVJZHBQcm94eS5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XG4gICAgY29uc29sZS5sb2coJ1tHb29nbGVJZHBQcm94eS5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uOmhpbnRdJywgaGludCk7XG4gICAgbGV0IGkgPSBpZHBJbmZvO1xuXG4gICAgLy9zdGFydCB0aGUgbG9naW4gcGhhc2VcbiAgICAvL1RPRE8gbGF0ZXIgc2hvdWxkIGJlIGRlZmluZWQgYSBiZXR0ZXIgYXBwcm9hY2hcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAoIWhpbnQpIHtcbiAgICAgICAgLyp0cnkge1xuICAgICAgICAgIGlmICh3aW5kb3cpIHsgXG4gICAgICAgICAgICByZXNvbHZlKCd1cmwnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7Ki9cblxuICAgICAgICBsZXQgcmVxdWVzdFVybCA9IGkuYXV0aG9yaXNhdGlvbkVuZHBvaW50ICsgJ3JlZGlyZWN0X3VyaT0nICsgcmVkaXJlY3RVUkkgXG4gICAgICAgICsgJyZwcm9tcHQ9Y29uc2VudCZyZXNwb25zZV90eXBlPScgKyBpLnR5cGUgXG4gICAgICAgICsgJyZjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgXG4gICAgICAgICsgJyZzY29wZT0nICsgaS5zY29wZSBcbiAgICAgICAgKyAnJmFjY2Vzc190eXBlPScgKyBpLmFjY2Vzc1R5cGVcbiAgICAgICAgKyAnJm5vbmNlPScgKyBjb250ZW50c1xuICAgICAgICArICcmc3RhdGU9JyArIGkuc3RhdGUgO1xuICAgICAgICAgICAgXG4vLyAgICAgICAgbGV0IHJlcXVlc3RVcmwgPSBpLmF1dGhvcmlzYXRpb25FbmRwb2ludCArICdzY29wZT0nICsgaS5zY29wZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZyZWRpcmVjdF91cmk9JyArIGkucmVkaXJlY3RVUkkgKyAnJnJlc3BvbnNlX3R5cGU9Y29kZScgKyAvKmkudHlwZSArKi8gJyZzdGF0ZT0nICsgaS5zdGF0ZSArICcmcHJvbXB0PWNvbnNlbnQmYWNjZXNzX3R5cGU9JyArIGkuYWNjZXNzVHlwZSArICcmbm9uY2U9JyArIGNvbnRlbnRzO1xuICAgICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uXSBOT19ISU5UOiByZWplY3Rpbmcgd2l0aCByZXF1ZXN0VXJsICcsIHJlcXVlc3RVcmwpO1xuXG4gICAgICAgIHJlamVjdCh7bmFtZTogJ0lkUExvZ2luRXJyb3InLCBsb2dpblVybDogcmVxdWVzdFVybH0pO1xuXG4gICAgICAvLyAgfSBcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlIHJlcXVlc3QgaGF2ZSBhbHJlYWR5IGJlZW4gbWFkZSwgc28gaWRwUFJveHkgd2lsbCBleGNoYW5nZSB0aGUgdG9rZW5zIGFsb25nIHRvIHRoZSBpZHAsIHRvIG9idGFpbiB0aGUgaW5mb3JtYXRpb24gbmVjZXNzYXJ5XG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnYWNjZXNzX3Rva2VuJyk7XG4gICAgICAgIGxldCBpZFRva2VuID0gdXJsUGFyc2VyKGhpbnQsICdpZF90b2tlbicpO1xuICAgICAgICBsZXQgY29kZSA9IHVybFBhcnNlcihoaW50LCAnY29kZScpO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coJ0dPT0dMRV9QUk9YWV9ISU5UOiAnLCBoaW50KTtcblxuLy8gICAgICAgZXhjaGFuZ2VDb2RlKGNvZGUpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAvLyAgICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uXSBvYnRhaW5lZCBleGNoYW5nZWQgVG9rZW4gJywgdmFsdWUpO1xuICAgICAgICBcbiAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlclxuICAgICAgICAgIC8vbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyBhY2Nlc3NUb2tlbjtcbiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIGluZm9Ub2tlbiAnLCBpbmZvVG9rZW4pO1xuICAgICAgICAgICAgXG4vLyAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiB2YWx1ZS5yZWZyZXNoX3Rva2VuLCB0b2tlblR5cGU6IHZhbHVlLnRva2VuX3R5cGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcbiAgICAgICAgICAgIFxuLy8gICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XG5cbiAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHtcbiAgICAgICAgICAgICAgYWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgICBpZFRva2VuOiBpZFRva2VuLFxuLy8gICAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogdmFsdWUucmVmcmVzaF90b2tlbixcbiAgICAgICAgICAgICAgdG9rZW5UeXBlOiAnQmVhcmVyJywgIFxuICAgICAgICAgICAgICBpbmZvVG9rZW46IGluZm9Ub2tlblxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIGlkVG9rZW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIGlkVG9rZW5cbiAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuSlNPTikge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uXSBvYnRhaW5lZCBpZFRva2VuICcsIGlkVG9rZW5KU09OKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbkpTT047XG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmV4cGlyZXMgPSBpZFRva2VuSlNPTi5leHA7XG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmVtYWlsID0gaWRUb2tlbkpTT04uZW1haWw7XG5cbiAgICAgICAgICAgICAgbGV0IGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3Rva2VuSUQ6IGlkVG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VuSlNPTn0pKTtcbiAgICAgICAgICAgICAgbGV0IGlkcEJ1bmRsZSA9IHtkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJ307XG5cbiAgICAgICAgICAgICAgLy9UT0RPIGRlbGV0ZSBsYXRlciB0aGUgZmllbGQgaW5mb1Rva2VuLCBhbmQgZGVsZXRlIHRoZSBuZWVkIGluIHRoZSBleGFtcGxlXG4gICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XG5cbiAgICAgICAgICAgICAgaWRlbnRpdGllc1tuSWRlbnRpdHldID0gcmV0dXJuVmFsdWU7XG4gICAgICAgICAgICAgICsrbklkZW50aXR5O1xuXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb25dIHJldHVybmluZzogJywgSlNPTi5zdHJpbmdpZnkocmV0dXJuVmFsdWUpKTtcblxuICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuLyogICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuXG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pOyovXG5cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvT0lEQy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*\n\tSo that an application can use Google's OAuth 2.0 authentication system for user login,\n\tfirst is required to set up a project in the Google Developers Console to obtain OAuth 2.0 credentials and set a redirect URI.\n\tA test account was created to set the project in the Google Developers Console to obtain OAuth 2.0 credentials,\twith the following credentials:\n      \tusername: openidtest10@gmail.com\n        password: testOpenID10\n\tTo add more URI's, follow the steps:\n\t1º choose the project ( can be the My OpenID Project)\t from  https://console.developers.google.com/projectselector/apis/credentials using the credentials provided above.\n\t2º Open The Client Web 1 listed in OAuth 2.0 Client ID's\n\t3º Add the URI  in the authorized redirect URI section.\n  4º change the REDIRECT parameter bellow with the pretended URI\n */\nvar googleInfo = exports.googleInfo = {\n  \"clientID\": \"808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com\",\n  \"issuer\": \"https://accounts.google.com\",\n  \"tokenEndpoint\": \"https://www.googleapis.com/oauth2/v4/token?\",\n  \"jwksUri\": \"https://www.googleapis.com/oauth2/v3/certs?\",\n  \"authorisationEndpoint\": \"https://accounts.google.com/o/oauth2/auth?\",\n  \"userinfo\": \"https://www.googleapis.com/oauth2/v3/userinfo?access_token=\",\n  \"tokenInfo\": \"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\",\n  \"accessType\": \"online\",\n  \"type\": \"token id_token\",\n  \"scope\": \"openid%20email%20profile\",\n  \"state\": \"state\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Hb29nbGVJbmZvLmpzPzc2ZDciXSwibmFtZXMiOlsiZ29vZ2xlSW5mbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0FBWU8sSUFBSUEsa0NBQWE7QUFDaEIsY0FBd0IsMEVBRFI7QUFFaEIsWUFBeUIsNkJBRlQ7QUFHaEIsbUJBQXlCLDZDQUhUO0FBSWhCLGFBQXlCLDZDQUpUO0FBS2hCLDJCQUF5Qiw0Q0FMVDtBQU1oQixjQUF5Qiw2REFOVDtBQU9oQixlQUF5QiwwREFQVDtBQVFoQixnQkFBeUIsUUFSVDtBQVNoQixVQUF5QixnQkFUVDtBQVVoQixXQUF5QiwwQkFWVDtBQVdoQixXQUF5QjtBQVhULENBQWpCIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRTbyB0aGF0IGFuIGFwcGxpY2F0aW9uIGNhbiB1c2UgR29vZ2xlJ3MgT0F1dGggMi4wIGF1dGhlbnRpY2F0aW9uIHN5c3RlbSBmb3IgdXNlciBsb2dpbixcblx0Zmlyc3QgaXMgcmVxdWlyZWQgdG8gc2V0IHVwIGEgcHJvamVjdCBpbiB0aGUgR29vZ2xlIERldmVsb3BlcnMgQ29uc29sZSB0byBvYnRhaW4gT0F1dGggMi4wIGNyZWRlbnRpYWxzIGFuZCBzZXQgYSByZWRpcmVjdCBVUkkuXG5cdEEgdGVzdCBhY2NvdW50IHdhcyBjcmVhdGVkIHRvIHNldCB0aGUgcHJvamVjdCBpbiB0aGUgR29vZ2xlIERldmVsb3BlcnMgQ29uc29sZSB0byBvYnRhaW4gT0F1dGggMi4wIGNyZWRlbnRpYWxzLFx0d2l0aCB0aGUgZm9sbG93aW5nIGNyZWRlbnRpYWxzOlxuICAgICAgXHR1c2VybmFtZTogb3BlbmlkdGVzdDEwQGdtYWlsLmNvbVxuICAgICAgICBwYXNzd29yZDogdGVzdE9wZW5JRDEwXG5cdFRvIGFkZCBtb3JlIFVSSSdzLCBmb2xsb3cgdGhlIHN0ZXBzOlxuXHQxwrogY2hvb3NlIHRoZSBwcm9qZWN0ICggY2FuIGJlIHRoZSBNeSBPcGVuSUQgUHJvamVjdClcdCBmcm9tICBodHRwczovL2NvbnNvbGUuZGV2ZWxvcGVycy5nb29nbGUuY29tL3Byb2plY3RzZWxlY3Rvci9hcGlzL2NyZWRlbnRpYWxzIHVzaW5nIHRoZSBjcmVkZW50aWFscyBwcm92aWRlZCBhYm92ZS5cblx0MsK6IE9wZW4gVGhlIENsaWVudCBXZWIgMSBsaXN0ZWQgaW4gT0F1dGggMi4wIENsaWVudCBJRCdzXG5cdDPCuiBBZGQgdGhlIFVSSSAgaW4gdGhlIGF1dGhvcml6ZWQgcmVkaXJlY3QgVVJJIHNlY3Rpb24uXG4gIDTCuiBjaGFuZ2UgdGhlIFJFRElSRUNUIHBhcmFtZXRlciBiZWxsb3cgd2l0aCB0aGUgcHJldGVuZGVkIFVSSVxuICovXG5leHBvcnQgbGV0IGdvb2dsZUluZm8gPSB7XG4gICAgICAgIFwiY2xpZW50SURcIjogICAgICAgICAgICAgXCI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbiAgICAgICAgXCJpc3N1ZXJcIjogICAgICAgICAgICAgICAgXCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb21cIixcbiAgICAgICAgXCJ0b2tlbkVuZHBvaW50XCI6ICAgICAgICAgXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjQvdG9rZW4/XCIsXG4gICAgICAgIFwiandrc1VyaVwiOiAgICAgICAgICAgICAgIFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzP1wiLFxuICAgICAgICBcImF1dGhvcmlzYXRpb25FbmRwb2ludFwiOiBcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoP1wiLFxuICAgICAgICBcInVzZXJpbmZvXCI6ICAgICAgICAgICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My91c2VyaW5mbz9hY2Nlc3NfdG9rZW49XCIsXG4gICAgICAgIFwidG9rZW5JbmZvXCI6ICAgICAgICAgICAgIFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj1cIixcbiAgICAgICAgXCJhY2Nlc3NUeXBlXCI6ICAgICAgICAgICAgXCJvbmxpbmVcIixcbiAgICAgICAgXCJ0eXBlXCI6ICAgICAgICAgICAgICAgICAgXCJ0b2tlbiBpZF90b2tlblwiLFxuICAgICAgICBcInNjb3BlXCI6ICAgICAgICAgICAgICAgICBcIm9wZW5pZCUyMGVtYWlsJTIwcHJvZmlsZVwiLFxuICAgICAgICBcInN0YXRlXCI6ICAgICAgICAgICAgICAgICBcInN0YXRlXCJcbiAgICAgIH07XG5cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9nb29nbGUvR29vZ2xlSW5mby5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdpProxy = void 0;\nvar idpInfo = void 0;\n/**\n* Abstract Identity Provider Proxy Protocol Stub to be extended by real Idp Proxies\n*/\n\nvar AbstractIdpProxyProtoStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function AbstractIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, AbstractIdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    IdpProxy = config.idpProxy;\n    idpInfo = config.idpInfo;\n\n    console.log('[GoogleIdpProxy] constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === config.idpUrl) {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(AbstractIdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n      console.info('[GoogleIdpProxy] receiving request: ', msg);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          IdpProxy.generateAssertion(idpInfo, params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          //       console.info('validateAssertion');\n          IdpProxy.validateAssertion(idpInfo, params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          //     console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      console.log('[IdpProxy.replyMessage] ', message);\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return AbstractIdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nexports.default = AbstractIdpProxyProtoStub;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L0Fic3RyYWN0SWRwUHJveHlTdHViLmpzPzI3MjQiXSwibmFtZXMiOlsiSWRwUHJveHkiLCJpZHBJbmZvIiwiQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJfdGhpcyIsIm1lc3NhZ2VCdXMiLCJpZHBQcm94eSIsImNvbnNvbGUiLCJsb2ciLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwiaWRwVXJsIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJwYXJhbXMiLCJib2R5IiwiaW5mbyIsIm1ldGhvZCIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiY29udGVudHMiLCJvcmlnaW4iLCJ1c2VybmFtZUhpbnQiLCJ0aGVuIiwidmFsdWUiLCJyZXBseU1lc3NhZ2UiLCJlcnJvciIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiYXNzZXJ0aW9uIiwicmVmcmVzaEFzc2VydGlvbiIsImlkZW50aXR5IiwibWVzc2FnZSIsImlkIiwidHlwZSIsImZyb20iLCJjb2RlIiwicG9zdE1lc3NhZ2UiLCJyZWFzb24iLCJfc3RhdGUiLCJkZXNjIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsSUFBSUEsaUJBQUo7QUFDQSxJQUFJQyxnQkFBSjtBQUNBOzs7O0lBR01DLHlCOztBQUVGOzs7Ozs7OztBQVFELHFDQUFZQyxtQkFBWixFQUFpQ0MsR0FBakMsRUFBc0NDLE1BQXRDLEVBQStDO0FBQUE7O0FBQzdDLFFBQUlDLFFBQVEsSUFBWjtBQUNBQSxVQUFNSCxtQkFBTixHQUE0QkEsbUJBQTVCO0FBQ0FHLFVBQU1DLFVBQU4sR0FBbUJILEdBQW5CO0FBQ0FFLFVBQU1ELE1BQU4sR0FBZUEsTUFBZjs7QUFFQUwsZUFBV0ssT0FBT0csUUFBbEI7QUFDQVAsY0FBVUksT0FBT0osT0FBakI7O0FBRUFRLFlBQVFDLEdBQVIsQ0FBWSw4QkFBWjs7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LENBQVN1QixJQUFULEdBQWdCRixNQUFoQjtBQUNEOztBQUVEakMsWUFBTUMsVUFBTixDQUFpQitCLFdBQWpCLENBQTZCMUIsR0FBN0I7QUFDRDs7Ozs7O0FBR0g7O0FBRUE7Ozs7Ozs7OztrQkFPZVYseUIiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBJZHBQcm94eTtcbmxldCBpZHBJbmZvO1xuLyoqXG4qIEFic3RyYWN0IElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWIgdG8gYmUgZXh0ZW5kZWQgYnkgcmVhbCBJZHAgUHJveGllc1xuKi9cbmNsYXNzIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIge1xuICBcbiAgICAvKipcbiAgICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXG4gICAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxuICAgICpcbiAgICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgICAqL1xuICAgY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcgKSB7XG4gICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xuICAgICBfdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgICAgSWRwUHJveHkgPSBjb25maWcuaWRwUHJveHk7XG4gICAgIGlkcEluZm8gPSBjb25maWcuaWRwSW5mbztcbiAgXG4gICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHldIGNvbnN0cnVjdG9yJyk7XG4gIFxuICAgICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7XG4gICAgICAgaWYgKG1zZy50byA9PT0gY29uZmlnLmlkcFVybCApIHtcbiAgXG4gICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcbiAgICAgICB9XG4gICAgIH0pO1xuICAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xuICAgfVxuICBcbiAgICAvKipcbiAgICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG4gICAgKi9cbiAgICByZXF1ZXN0VG9JZHAobXNnKSB7XG4gICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcbiAgICAgIC8vY29uc29sZS5pbmZvKCdyZXF1ZXN0VG9JZHA6JywgbXNnLmJvZHkubWV0aG9kKTtcbiAgICAgIGNvbnNvbGUuaW5mbygnW0dvb2dsZUlkcFByb3h5XSByZWNlaXZpbmcgcmVxdWVzdDogJywgbXNnKTtcbiAgICAgIFxuICAgICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOlxuICAgICAgICAgIElkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uKGlkcEluZm8sIHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcbiAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTt9LFxuICBcbiAgICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuICAgLy8gICAgICAgY29uc29sZS5pbmZvKCd2YWxpZGF0ZUFzc2VydGlvbicpO1xuICAgICAgICAgIElkcFByb3h5LnZhbGlkYXRlQXNzZXJ0aW9uKGlkcEluZm8sIHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcbiAgXG4gICAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlZnJlc2hBc3NlcnRpb24nOlxuICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdyZWZyZXNoQXNzZXJ0aW9uJyk7XG4gICAgICAgICAgSWRwUHJveHkucmVmcmVzaEFzc2VydGlvbihwYXJhbXMuaWRlbnRpdHkpLnRoZW4oXG4gICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcbiAgXG4gICAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICAgICk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICBcbiAgICAvKipcbiAgICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKlxuICAgICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcbiAgICAqL1xuICAgIHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XG4gICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICBcbiAgICAgIGxldCBtZXNzYWdlID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgICAgICAgICAgICAgICAgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX07XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbSWRwUHJveHkucmVwbHlNZXNzYWdlXSAnLCBtZXNzYWdlKTtcbiAgXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIH1cbiAgXG4gICAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgXG4gICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcbiAgXG4gICAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTtcbiAgXG4gICAgICBsZXQgbXNnID0ge1xuICAgICAgICB0eXBlOiAndXBkYXRlJyxcbiAgICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfVxuICAgICAgfTtcbiAgXG4gICAgICBpZiAocmVhc29uKSB7XG4gICAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XG4gICAgICB9XG4gIFxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG4gIFxuICAvKipcbiAgICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXG4gICAqL1xuICBleHBvcnQgZGVmYXVsdCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViO1xuICBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L0Fic3RyYWN0SWRwUHJveHlTdHViLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5fe88c210039898a45c75f6de8c56f417",
    "constraints": {
      "browser": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\nvar https = __webpack_require__(1);\nvar btoa = __webpack_require__(2);\nvar atob = __webpack_require__(3);\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\n//let URL = i.tokenEndpoint + 'code=' + code + '&client_id=' +\n//        i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' +\n//        i.redirectURI + '&grant_type=authorization_code';\n\nfunction sendHTTPRequest(method, url) {\n  return new Promise(function (resolve, reject) {\n    //return makeLocalRequest(method, url, undefined);\n    console.log('sendHTTPRequest:url', url);\n    var splitedText = url.split('/');\n    var host = splitedText[2];\n    var replacedURL = url.replace(splitedText[0] + '//' + splitedText[2], '');\n    var options = {\n      hostname: host,\n      port: 443,\n      path: replacedURL,\n      method: method\n    };\n    console.log('sendHTTPRequest:options', options);\n\n    var req = https.request(options, function (res) {\n      console.log('sendHTTPRequest:statusCode:', res.statusCode);\n      console.log('sendHTTPRequest:headers:', res.headers);\n      var stream = '';\n      res.on('data', function (d) {\n        stream += d;\n      });\n      res.on('end', function () {\n        console.log('sendHTTPRequest:data:', stream);\n        resolve(stream);\n      });\n    });\n\n    req.on('error', function (e) {\n      console.error('https_return: ' + e);\n    });\n    req.end();\n  });\n}\n\n/**\n* @returns {variable<string>}\n**/\nfunction mapProtocol(url) {\n  var protocolmap = {\n    'localhost://': 'https://',\n    'undefined://': 'https://',\n    'hyperty-catalogue://': 'https://',\n    'https://': 'https://',\n    'http://': 'https://'\n  };\n\n  var foundProtocol = false;\n  var resultURL = undefined;\n  for (var protocol in protocolmap) {\n    if (url.slice(0, protocol.length) === protocol) {\n      resultURL = protocolmap[protocol] + url.slice(protocol.length, url.length);\n      foundProtocol = true;\n      break;\n    }\n  }\n\n  if (!foundProtocol) {\n    throw new Error('Invalid protocol of url: ' + url);\n  }\n  return resultURL;\n}\n\nvar getAuth = function getAuth(contents) {\n  var i = googleInfo;\n\n  return new Promise(function (resolve, reject) {\n    var URL = i.authorisationEndpoint + 'scope=' + i.scope + '&client_id=' + i.clientID + '&redirect_uri=' + i.redirectURI + '&response_type=' + i.type + '&state=' + i.state + '&access_type=' + i.accessType + '&nonce=' + contents + '&prompt=none';\n\n    sendHTTPRequest('POST', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      console.log('ERROR:', error);\n      reject(error);\n    });\n  });\n};\n\n/**\n* Function to exchange the code received to the id Token, access token and a refresh token\n*\n*/\nvar exchangeCode = function exchangeCode(code) {\n  var i = googleInfo;\n\n  return new Promise(function (resolve, reject) {\n\n    var URL = i.tokenEndpoint + 'code=' + code + '&client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' + i.redirectURI + '&grant_type=authorization_code';\n\n    sendHTTPRequest('POST', URL).then(function (info) {\n      console.log('[IDPROXY.exchangeCode:info]', info);\n      resolve(info);\n    }, function (error) {\n      console.log('[IDPROXY.exchangeCode:err]', error.message);\n      //reject(error);\n    });\n  });\n};\n\n/**\n* Identity Provider Proxy\n*/\n\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJS', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n\n      // atob may need to be required for nodejs\n      // var atob = require('atob');\n      var decodedContent = atob(assertion);\n      console.log('validateAssertionProxyNODEJS:decodedContent', decodedContent);\n\n      var content = JSON.parse(decodedContent);\n      console.log('validateAssertionProxyNODEJS:content', content);\n\n      var idTokenSplited = content.tokenID.split('.');\n\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertion:contents]', contents);\n    console.log('[IDPROXY.generateAssertion:origin]', origin);\n    console.log('[IDPROXY.generateAssertion:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      //the hint field contains the information obtained after the user authentication\n      // if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n      var i = googleInfo;\n\n      if (!hint) {\n        resolve('hint');\n      } else {\n\n        console.log('generateMessageResponse:');\n        return resolve(generateMessageResponse);\n\n        // the request have already been made, so idpPRoxy will exchange the tokens along to the idp, to obtain the information necessary\n        var accessToken = urlParser(hint, 'access_token');\n        var idToken = urlParser(hint, 'id_token');\n        var code = urlParser(hint, 'code');\n\n        exchangeCode(code).then(function (value) {\n\n          console.log('TIAGO exchange code');\n\n          //obtain information about the user\n          var infoTokenURL = i.userinfo + value.access_token;\n          sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n\n            console.log('TIAGO info token url');\n            var identityBundle = { accessToken: value.access_token, idToken: value.id_token, refreshToken: value.refresh_token, tokenType: value.token_type, infoToken: infoToken };\n\n            var idTokenURL = i.tokenInfo + value.id_token;\n\n            //obtain information about the user idToken\n            sendHTTPRequest('GET', idTokenURL).then(function (idToken) {\n\n              console.log('TIAGO id token url');\n              identityBundle.tokenIDJSON = idToken;\n              identityBundle.expires = idToken.exp;\n              identityBundle.email = idToken.email;\n\n              var assertion = btoa(JSON.stringify({ tokenID: value.id_token, tokenIDJSON: idToken }));\n              var idpBundle = { domain: 'google.com', protocol: 'OIDC' };\n\n              //TODO delete later the field infoToken, and delete the need in the example\n              var returnValue = { assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken };\n\n              identities[nIdentity] = returnValue;\n              ++nIdentity;\n\n              console.log('[IDPROXY.generateAssertion:returnValue]', returnValue);\n              resolve(returnValue);\n            }, function (e) {\n\n              reject(e);\n            });\n          }, function (error) {\n\n            reject(error);\n          });\n        }, function (err) {\n          console.log('[IDPROXY.generateAssertion:exchangeCode]', err);\n          //reject(err);\n        });\n      }\n    });\n  }\n\n  /**\n  * Identity Provider Proxy Protocol Stub\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('Google->NODEJS constructor');\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://google.com') {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}\n\nvar generateMessageResponse = { assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n  idp: {\n    domain: 'nodejs-idp',\n    protocol: 'OIDC' },\n  info: {\n    accessToken: 'ya29.GlsbBalGJJmVi_N5IDyqMI3JxkO5eLV4333I93eQBCpNAofEqtU4UkWHh8drVlrViVTqt6Jk3P86_CDt4sKVh0G9AbTk1rVW3MAxcFhEUFE-KMXdDK_KsMf6fNQk',\n    idToken: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDMxNTQ0OTE3MTEyNzUxMjYzNDIiLCJlbWFpbCI6InRlc3RhbmR0aGluazMyMUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6Ii03dmE2M1VvdWVEMkx6S1czRl82OFEiLCJub25jZSI6Ils0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0iLCJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJpYXQiOjE1MTI2NDYwODAsImV4cCI6MTUxMjY0OTY4MH0.teI1m90VrAEgKtv3PIG7J6sAhd_QY7mi3QsWLYbakWJqL6f4gmFyddEwqKxGY4x7sMLtj-Uc0ZKuWX_qE7K6iwjhMlzbTHK8LehyILOCY7Xsuoa6MqfT1Wp8Bg0TfJHuOnbZ_ymxPMQKOkfZiPVS5iqsO3bneQzTr0JbqtQ7xWsJS6nz-iA6rEdKjfC70amW0iSI--lWmX7sZaTeZc7ug4r4Z5-zLF39zwQPOwEQAlT-ZA_y1gO_4VueDeZmWmVuz2kJO_91h6qE5nZOtwWVuCrdw-9Iaw7z2DPes_j5RD8lDovR6JM0dj2JqzL9VpTcmF27AJsc1jhQLsLWblcxZw',\n    refreshToken: '1/6cCGEWyzx2uO2bH2F1A8v6KDTG4rP0CXc-XUQ12-U0o',\n    tokenType: 'Bearer',\n    infoToken: {\n      sub: '103154491711275126342',\n      name: 'test think',\n      given_name: 'test',\n      family_name: 'think',\n      picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      email: 'testandthink321@gmail.com',\n      email_verified: true,\n      locale: 'en' },\n    tokenIDJSON: { 'azp': '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      aud: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      sub: '103154491711275126342',\n      email: 'testandthink321@gmail.com',\n      email_verified: 'true',\n      at_hash: '-7va63UoueD2LzKW3F_68Q',\n      nonce: '[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1]',\n      iss: 'https://accounts.nodejs-idp',\n      iat: '1512646080',\n      exp: '1512649680',\n      alg: 'RS256',\n      kid: '477d17972d2a001074d586b588976d234296801e' },\n    expires: '1512649680',\n    email: 'testandthink321@gmail.com' },\n  infoToken: { sub: '103154491711275126342',\n    name: 'test think',\n    given_name: 'test',\n    family_name: 'think',\n    picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n    email: 'testandthink321@gmail.com',\n    email_verified: true,\n    locale: 'en' },\n  identity: 'user://nodejs-idp/testandthink321@gmail.com',\n  messageInfo: { userProfile: { username: 'testandthink321@gmail.com',\n      cn: 'testandthink321',\n      avatar: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      locale: 'en',\n      userURL: 'user://nodejs-idp/testandthink321@gmail.com' },\n    idp: 'nodejs-idp',\n    assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n    expires: '1512649680' }\n  /*\n  keyPair:{\n  public:[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1],\n  private:[48,130,4,191,2,1,0,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,4,130,4,169,48,130,4,165,2,1,0,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1,2,130,1,0,103,244,137,118,116,82,14,203,102,107,253,88,12,199,222,60,243,136,86,157,74,224,190,53,113,57,157,250,49,130,96,31,252,136,152,70,143,17,215,96,103,51,18,35,141,212,210,205,9,216,83,70,245,71,138,119,112,229,164,176,9,37,81,161,193,154,68,249,115,106,201,6,12,225,144,126,141,210,141,242,128,159,221,163,222,21,233,230,167,206,59,24,250,233,81,122,102,26,6,233,72,133,47,77,155,238,86,6,139,24,131,163,179,112,48,247,142,6,207,204,173,223,140,199,150,95,123,152,202,155,131,238,62,96,133,4,217,51,121,30,38,178,189,216,44,35,241,93,7,62,90,111,216,66,209,243,128,234,141,84,135,181,13,38,220,114,245,240,178,95,220,206,11,186,234,213,66,121,83,68,89,75,46,183,145,183,147,160,215,118,198,125,181,146,30,251,58,87,47,209,237,97,24,47,179,6,110,242,99,150,226,148,198,174,146,101,213,87,178,10,223,105,18,56,53,22,212,158,170,176,51,86,145,125,124,44,9,85,19,144,246,170,78,124,30,32,12,166,174,139,77,63,173,82,10,153,2,129,129,0,248,18,143,246,137,136,145,219,178,39,27,94,64,90,47,163,114,60,63,187,131,143,244,16,42,128,231,117,92,98,219,155,62,107,252,17,245,45,160,225,103,142,72,36,193,150,235,214,175,62,212,56,45,9,0,60,114,107,134,228,204,131,131,214,94,201,148,159,99,139,181,13,119,38,30,107,166,165,203,43,34,20,207,171,32,58,167,62,196,153,103,204,213,247,48,111,227,59,95,97,194,187,53,10,247,108,58,86,28,29,113,8,110,171,220,245,11,82,233,223,91,68,166,117,174,187,62,77,2,129,129,0,235,118,2,105,239,212,30,104,157,41,109,11,248,152,22,236,97,40,153,131,228,5,86,187,113,126,144,76,141,79,110,250,146,152,49,58,156,201,176,92,189,209,30,112,108,175,204,204,247,164,46,129,239,98,127,49,145,218,63,193,124,174,18,98,201,99,154,162,138,78,159,253,3,248,3,209,36,239,193,155,193,5,19,236,37,78,118,135,250,199,7,141,248,120,36,136,93,98,174,60,18,215,93,174,107,141,116,145,167,221,210,169,247,67,254,222,161,134,63,221,90,87,42,99,227,81,173,151,2,129,129,0,133,23,168,103,83,232,146,160,181,23,40,38,204,13,214,203,49,41,195,227,189,181,8,243,119,106,75,67,250,250,10,234,98,118,26,250,35,121,132,124,10,76,26,198,165,154,108,19,117,88,23,17,192,143,184,177,181,141,157,4,185,248,193,77,204,243,7,170,240,4,111,113,183,0,27,136,20,19,149,74,33,241,218,108,236,80,171,148,16,116,97,109,83,74,88,145,94,239,102,192,19,114,207,5,128,51,111,164,237,86,154,99,52,197,62,57,182,6,152,245,61,137,58,105,159,2,84,109,2,129,129,0,226,67,111,132,95,91,101,177,63,189,44,53,193,184,92,230,223,98,133,74,209,86,52,7,65,195,206,100,81,178,144,65,167,151,42,79,89,149,18,173,188,21,244,251,49,230,41,150,153,46,35,38,231,99,174,56,115,32,215,253,85,147,108,197,147,34,236,216,222,177,57,90,136,114,207,48,46,31,90,220,18,58,143,239,111,214,27,95,6,36,53,229,62,108,45,39,1,30,47,178,56,164,206,56,42,208,46,193,61,31,147,45,147,23,187,22,50,255,111,229,132,199,152,75,142,136,209,151,2,129,129,0,165,56,232,76,55,57,240,159,92,207,220,143,130,30,57,234,251,172,171,180,54,159,229,96,246,73,112,146,75,157,242,201,161,218,37,176,35,170,50,90,148,102,191,199,239,174,78,72,67,85,199,45,149,145,132,161,212,33,157,75,216,79,39,233,18,210,255,26,72,229,239,44,12,147,158,176,192,95,126,32,175,23,226,131,139,197,175,193,62,8,151,252,68,154,94,89,189,125,90,30,36,175,73,230,194,13,233,247,123,60,241,47,171,51,189,112,111,213,141,89,70,249,236,63,236,110,115,208]\n  }*/\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Ob2RlanNQcm94eVN0dWIuaWRwLmpzP2I5MzgiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJpZGVudGl0aWVzIiwibklkZW50aXR5IiwiaHR0cHMiLCJyZXF1aXJlIiwiYnRvYSIsImF0b2IiLCJnb29nbGVJbmZvIiwiY2xpZW50U2VjcmV0IiwiY2xpZW50SUQiLCJyZWRpcmVjdFVSSSIsImlzc3VlciIsInRva2VuRW5kcG9pbnQiLCJqd2tzVXJpIiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidXNlcmluZm8iLCJ0b2tlbkluZm8iLCJhY2Nlc3NUeXBlIiwidHlwZSIsInNjb3BlIiwic3RhdGUiLCJ1cmxQYXJzZXIiLCJ1cmwiLCJuYW1lIiwicmVwbGFjZSIsInJlZ2V4UyIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJzZW5kSFRUUFJlcXVlc3QiLCJtZXRob2QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbnNvbGUiLCJsb2ciLCJzcGxpdGVkVGV4dCIsInNwbGl0IiwiaG9zdCIsInJlcGxhY2VkVVJMIiwib3B0aW9ucyIsImhvc3RuYW1lIiwicG9ydCIsInBhdGgiLCJyZXEiLCJyZXF1ZXN0IiwicmVzIiwic3RhdHVzQ29kZSIsImhlYWRlcnMiLCJzdHJlYW0iLCJvbiIsImQiLCJlIiwiZXJyb3IiLCJlbmQiLCJtYXBQcm90b2NvbCIsInByb3RvY29sbWFwIiwiZm91bmRQcm90b2NvbCIsInJlc3VsdFVSTCIsInVuZGVmaW5lZCIsInByb3RvY29sIiwic2xpY2UiLCJsZW5ndGgiLCJFcnJvciIsImdldEF1dGgiLCJjb250ZW50cyIsImkiLCJVUkwiLCJ0aGVuIiwiaW5mbyIsImV4Y2hhbmdlQ29kZSIsImNvZGUiLCJtZXNzYWdlIiwiaWRwIiwidmFsaWRhdGVBc3NlcnRpb24iLCJhc3NlcnRpb24iLCJvcmlnaW4iLCJkZWNvZGVkQ29udGVudCIsImNvbnRlbnQiLCJKU09OIiwicGFyc2UiLCJpZFRva2VuU3BsaXRlZCIsInRva2VuSUQiLCJpZFRva2VuIiwiaWRlbnRpdHkiLCJlbWFpbCIsIm5vbmNlIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwiZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UiLCJhY2Nlc3NUb2tlbiIsInZhbHVlIiwiaW5mb1Rva2VuVVJMIiwiYWNjZXNzX3Rva2VuIiwiaW5mb1Rva2VuIiwiaWRlbnRpdHlCdW5kbGUiLCJpZF90b2tlbiIsInJlZnJlc2hUb2tlbiIsInJlZnJlc2hfdG9rZW4iLCJ0b2tlblR5cGUiLCJ0b2tlbl90eXBlIiwiaWRUb2tlblVSTCIsInRva2VuSURKU09OIiwiZXhwaXJlcyIsImV4cCIsInN0cmluZ2lmeSIsImlkcEJ1bmRsZSIsImRvbWFpbiIsInJldHVyblZhbHVlIiwiZXJyIiwiTm9kZWpzUHJveHlTdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsIl90aGlzIiwibWVzc2FnZUJ1cyIsImFkZExpc3RlbmVyIiwibXNnIiwidG8iLCJyZXF1ZXN0VG9JZHAiLCJfc2VuZFN0YXR1cyIsInBhcmFtcyIsImJvZHkiLCJ1c2VybmFtZUhpbnQiLCJyZXBseU1lc3NhZ2UiLCJpZCIsImZyb20iLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsIl9zdGF0ZSIsImRlc2MiLCJpbnN0YW5jZSIsInN1YiIsImdpdmVuX25hbWUiLCJmYW1pbHlfbmFtZSIsInBpY3R1cmUiLCJlbWFpbF92ZXJpZmllZCIsImxvY2FsZSIsImF1ZCIsImF0X2hhc2giLCJpc3MiLCJpYXQiLCJhbGciLCJraWQiLCJtZXNzYWdlSW5mbyIsInVzZXJQcm9maWxlIiwidXNlcm5hbWUiLCJjbiIsImF2YXRhciIsInVzZXJVUkwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQTBYd0JBLFE7Ozs7QUExWHhCLElBQUlDLGFBQWEsRUFBakI7QUFDQSxJQUFJQyxZQUFZLENBQWhCO0FBQ0E7QUFDQTtBQUNBLElB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QyxtQkFBWSxPQUpGO0FBS1ZDLGVBQVEsOEZBTEU7QUFNVmxELGFBQU0sMkJBTkk7QUFPVm1ELHNCQUFlLElBUEw7QUFRVkMsY0FBTyxJQVJHLEVBTEw7QUFjTG5DLGlCQUFZLEVBQUMsT0FBTSwwRUFBUDtBQUNab0MsV0FBSSwwRUFEUTtBQUVaTixXQUFJLHVCQUZRO0FBR1ovQyxhQUFNLDJCQUhNO0FBSVptRCxzQkFBZSxNQUpIO0FBS1pHLGVBQVEsd0JBTEk7QUFNWnJELGFBQU0sKy9CQU5NO0FBT1pzRCxXQUFJLDZCQVBRO0FBUVpDLFdBQUksWUFSUTtBQVNackMsV0FBSSxZQVRRO0FBVVpzQyxXQUFJLE9BVlE7QUFXWkMsV0FBSSwwQ0FYUSxFQWRQO0FBMEJMeEMsYUFBUSxZQTFCSDtBQTJCTGxCLFdBQU0sMkJBM0JELEVBTEw7QUFpQ0FTLGFBQVUsRUFBQ3NDLEtBQUksdUJBQUw7QUFDVjlHLFVBQUssWUFESztBQUVWK0csZ0JBQVcsTUFGRDtBQUdWQyxpQkFBWSxPQUhGO0FBSVZDLGFBQVEsOEZBSkU7QUFLVmxELFdBQU0sMkJBTEk7QUFNVm1ELG9CQUFlLElBTkw7QUFPVkMsWUFBTyxJQVBHLEVBakNWO0FBeUNBckQsWUFBUyw2Q0F6Q1Q7QUEwQ0E0RCxlQUFZLEVBQUNDLGFBQVksRUFBQ0MsVUFBUywyQkFBVjtBQUN6QkMsVUFBRyxpQkFEc0I7QUFFekJDLGNBQU8sOEZBRmtCO0FBR3pCWCxjQUFPLElBSGtCO0FBSXpCWSxlQUFRLDZDQUppQixFQUFiO0FBS1o1RSxTQUFJLFlBTFE7QUFNWkUsZUFBVSxrNkpBTkU7QUFPWjRCLGFBQVEsWUFQSTtBQVFaOzs7OztBQWxEQSxDQURBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaWRlbnRpdGllcyA9IHt9O1xubGV0IG5JZGVudGl0eSA9IDA7XG4vL2ltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbi8vbGV0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XG5jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5sZXQgYnRvYSA9IHJlcXVpcmUoJ2J0b2EnKTtcbmxldCBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xuXG5sZXQgZ29vZ2xlSW5mbyA9IHtcbiAgY2xpZW50U2VjcmV0OiAgICAgICAgICAnWHg0ckt1Y2I1WllUYVhsY1pYOUhMZlpXJyxcbiAgY2xpZW50SUQ6ICAgICAgICAgICAgICAnODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICAnaHR0cHM6Ly9sb2NhbGhvc3QnLFxuICBpc3N1ZXI6ICAgICAgICAgICAgICAgICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20nLFxuICB0b2tlbkVuZHBvaW50OiAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjQvdG9rZW4/JyxcbiAgandrc1VyaTogICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzPycsXG4gIGF1dGhvcmlzYXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoPycsXG4gIHVzZXJpbmZvOiAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My91c2VyaW5mbz9hY2Nlc3NfdG9rZW49JyxcbiAgdG9rZW5JbmZvOiAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0nLFxuICBhY2Nlc3NUeXBlOiAgICAgICAgICAgICdvZmZsaW5lJyxcbiAgdHlwZTogICAgICAgICAgICAgICAgICAnY29kZScsXG4gIHNjb3BlOiAgICAgICAgICAgICAgICAgJ29wZW5pZCUyMGVtYWlsJTIwcHJvZmlsZScsXG4gIHN0YXRlOiAgICAgICAgICAgICAgICAgJ3N0YXRlJ1xufTtcblxuLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzXG5mdW5jdGlvbiB1cmxQYXJzZXIodXJsLCBuYW1lKSB7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXFxdJyk7XG4gIGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJztcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpO1xuICBsZXQgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKHJlc3VsdHMgPT09IG51bGwpXG4gIHJldHVybiAnJztcbiAgZWxzZVxuICByZXR1cm4gcmVzdWx0c1sxXTtcbn1cblxuXG4vL2xldCBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY29kZT0nICsgY29kZSArICcmY2xpZW50X2lkPScgK1xuICAvLyAgICAgICAgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZGlyZWN0X3VyaT0nICtcbiAgLy8gICAgICAgIGkucmVkaXJlY3RVUkkgKyAnJmdyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlJztcblxuZnVuY3Rpb24gc2VuZEhUVFBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuICAvL3JldHVybiBtYWtlTG9jYWxSZXF1ZXN0KG1ldGhvZCwgdXJsLCB1bmRlZmluZWQpO1xuICAgIGNvbnNvbGUubG9nKCdzZW5kSFRUUFJlcXVlc3Q6dXJsJywgdXJsKTtcbiAgICBsZXQgc3BsaXRlZFRleHQgPSB1cmwuc3BsaXQoJy8nKTtcbiAgICBsZXQgaG9zdCA9IHNwbGl0ZWRUZXh0WzJdO1xuICAgIGxldCByZXBsYWNlZFVSTCA9IHVybC5yZXBsYWNlKHNwbGl0ZWRUZXh0WzBdICsgJy8vJyArIHNwbGl0ZWRUZXh0WzJdLCAnJyk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGhvc3RuYW1lOiBob3N0LFxuICAgICAgcG9ydDogNDQzLFxuICAgICAgcGF0aDogcmVwbGFjZWRVUkwsXG4gICAgICBtZXRob2Q6IG1ldGhvZFxuICAgIH07XG4gICAgY29uc29sZS5sb2coJ3NlbmRIVFRQUmVxdWVzdDpvcHRpb25zJywgb3B0aW9ucyk7XG5cbiAgICBjb25zdCByZXEgPSBodHRwcy5yZXF1ZXN0KG9wdGlvbnMsIChyZXMpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdzZW5kSFRUUFJlcXVlc3Q6c3RhdHVzQ29kZTonLCByZXMuc3RhdHVzQ29kZSk7XG4gICAgICBjb25zb2xlLmxvZygnc2VuZEhUVFBSZXF1ZXN0OmhlYWRlcnM6JywgcmVzLmhlYWRlcnMpO1xuICAgICAgbGV0IHN0cmVhbSA9ICcnO1xuICAgICAgcmVzLm9uKCdkYXRhJywgKGQpID0+IHtcbiAgICAgICAgc3RyZWFtICs9IGQ7XG4gICAgICB9KTtcbiAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnc2VuZEhUVFBSZXF1ZXN0OmRhdGE6Jywgc3RyZWFtKTtcbiAgICAgICAgcmVzb2x2ZShzdHJlYW0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXEub24oJ2Vycm9yJywgKGUpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ2h0dHBzX3JldHVybjogJyArIGUpO1xuICAgIH0pO1xuICAgIHJlcS5lbmQoKTtcblxuICB9KTtcbn1cblxuLyoqXG4qIEByZXR1cm5zIHt2YXJpYWJsZTxzdHJpbmc+fVxuKiovXG5mdW5jdGlvbiBtYXBQcm90b2NvbCh1cmwpIHtcbiAgbGV0IHByb3RvY29sbWFwID0ge1xuICAgICdsb2NhbGhvc3Q6Ly8nOiAnaHR0cHM6Ly8nLFxuICAgICd1bmRlZmluZWQ6Ly8nOiAnaHR0cHM6Ly8nLFxuICAgICdoeXBlcnR5LWNhdGFsb2d1ZTovLyc6ICdodHRwczovLycsXG4gICAgJ2h0dHBzOi8vJzogJ2h0dHBzOi8vJyxcbiAgICAnaHR0cDovLyc6ICdodHRwczovLydcbiAgfTtcblxuICBsZXQgZm91bmRQcm90b2NvbCA9IGZhbHNlO1xuICBsZXQgcmVzdWx0VVJMID0gdW5kZWZpbmVkO1xuICBmb3IgKGxldCBwcm90b2NvbCBpbiBwcm90b2NvbG1hcCkge1xuICAgIGlmICh1cmwuc2xpY2UoMCwgcHJvdG9jb2wubGVuZ3RoKSA9PT0gcHJvdG9jb2wpIHtcbiAgICAgIHJlc3VsdFVSTCA9IHByb3RvY29sbWFwW3Byb3RvY29sXSArIHVybC5zbGljZShwcm90b2NvbC5sZW5ndGgsIHVybC5sZW5ndGgpO1xuICAgICAgZm91bmRQcm90b2NvbCA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIWZvdW5kUHJvdG9jb2wpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvdG9jb2wgb2YgdXJsOiAnICsgdXJsKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0VVJMO1xufVxuXG5cblxubGV0IGdldEF1dGggPSAoZnVuY3Rpb24oY29udGVudHMpIHtcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgVVJMID0gaS5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgKyAnc2NvcGU9JyArIGkuc2NvcGUgKyAnJmNsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZyZXNwb25zZV90eXBlPScgKyBpLnR5cGUgKyAnJnN0YXRlPScgKyBpLnN0YXRlICsgJyZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlICsgJyZub25jZT0nICsgY29udGVudHMgKyAnJnByb21wdD1ub25lJyA7XG5cbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24oaW5mbykge1xuICAgICAgcmVzb2x2ZShpbmZvKTtcbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coJ0VSUk9SOicsIGVycm9yKTtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xuXG59KVxuXG4vKipcbiogRnVuY3Rpb24gdG8gZXhjaGFuZ2UgdGhlIGNvZGUgcmVjZWl2ZWQgdG8gdGhlIGlkIFRva2VuLCBhY2Nlc3MgdG9rZW4gYW5kIGEgcmVmcmVzaCB0b2tlblxuKlxuKi9cbmxldCBleGNoYW5nZUNvZGUgPSAoZnVuY3Rpb24oY29kZSkge1xuICBsZXQgaSA9IGdvb2dsZUluZm87XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgbGV0IFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjb2RlPScgKyBjb2RlICsgJyZjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWRpcmVjdF91cmk9JyArIGkucmVkaXJlY3RVUkkgKyAnJmdyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlJztcblxuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZXhjaGFuZ2VDb2RlOmluZm9dJywgaW5mbyk7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZXhjaGFuZ2VDb2RlOmVycl0nLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIC8vcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcblxuICB9KTtcbn0pO1xuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHlcbiovXG5cbmxldCBpZHAgPSB7XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcbiAgICBjb25zb2xlLmxvZygndmFsaWRhdGVBc3NlcnRpb25Qcm94eU5PREVKUycsIGFzc2VydGlvbik7XG5cbiAgICAvL1RPRE8gY2hlY2sgdGhlIHZhbHVlcyB3aXRoIHRoZSBoYXNoIHJlY2VpdmVkXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIC8vIGF0b2IgbWF5IG5lZWQgdG8gYmUgcmVxdWlyZWQgZm9yIG5vZGVqc1xuICAgICAgLy8gdmFyIGF0b2IgPSByZXF1aXJlKCdhdG9iJyk7XG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XG4gICAgICBjb25zb2xlLmxvZygndmFsaWRhdGVBc3NlcnRpb25Qcm94eU5PREVKUzpkZWNvZGVkQ29udGVudCcsIGRlY29kZWRDb250ZW50KTtcblxuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcbiAgICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZUFzc2VydGlvblByb3h5Tk9ERUpTOmNvbnRlbnQnLCBjb250ZW50KTtcblxuXG4gICAgICBsZXQgaWRUb2tlblNwbGl0ZWQgPSBjb250ZW50LnRva2VuSUQuc3BsaXQoJy4nKTtcblxuXG4gICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xuXG5cbiAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZX0pO1xuXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246aGludF0nLCBoaW50KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXG5cbiAgICAgIC8vdGhlIGhpbnQgZmllbGQgY29udGFpbnMgdGhlIGluZm9ybWF0aW9uIG9idGFpbmVkIGFmdGVyIHRoZSB1c2VyIGF1dGhlbnRpY2F0aW9uXG4gICAgICAvLyBpZiB0aGUgaGludCBjb250ZW50IGlzIG5vdCBwcmVzZW50LCB0aGVuIHJlamVjdHMgdGhlIHZhbHVlIHdpdGggdGhlIFVSTCB0byBvcGVuIHRoZSBwYWdlIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlclxuICAgICAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gICAgICBpZiAoIWhpbnQpIHtcbiAgICAgICAgICByZXNvbHZlKCdoaW50Jyk7XG4gICAgICB9IGVsc2Uge1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZTonKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UpO1xuXG4gICAgICAgIC8vIHRoZSByZXF1ZXN0IGhhdmUgYWxyZWFkeSBiZWVuIG1hZGUsIHNvIGlkcFBSb3h5IHdpbGwgZXhjaGFuZ2UgdGhlIHRva2VucyBhbG9uZyB0byB0aGUgaWRwLCB0byBvYnRhaW4gdGhlIGluZm9ybWF0aW9uIG5lY2Vzc2FyeVxuICAgICAgICBsZXQgYWNjZXNzVG9rZW4gPSB1cmxQYXJzZXIoaGludCwgJ2FjY2Vzc190b2tlbicpO1xuICAgICAgICBsZXQgaWRUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnaWRfdG9rZW4nKTtcbiAgICAgICAgbGV0IGNvZGUgPSB1cmxQYXJzZXIoaGludCwgJ2NvZGUnKTtcblxuICAgICAgICBleGNoYW5nZUNvZGUoY29kZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuXG4gICAgICAgICAgY29uc29sZS5sb2coJ1RJQUdPIGV4Y2hhbmdlIGNvZGUnKTtcblxuICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyXG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaW5mb1Rva2VuKSB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUSUFHTyBpbmZvIHRva2VuIHVybCcpO1xuICAgICAgICAgICAgbGV0IGlkZW50aXR5QnVuZGxlID0ge2FjY2Vzc1Rva2VuOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGlkVG9rZW46IHZhbHVlLmlkX3Rva2VuLCByZWZyZXNoVG9rZW46IHZhbHVlLnJlZnJlc2hfdG9rZW4sIHRva2VuVHlwZTogdmFsdWUudG9rZW5fdHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuXG4gICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XG5cbiAgICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIGlkVG9rZW5cbiAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XG5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1RJQUdPIGlkIHRva2VuIHVybCcpO1xuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS50b2tlbklESlNPTiA9IGlkVG9rZW47XG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmV4cGlyZXMgPSBpZFRva2VuLmV4cDtcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsO1xuXG4gICAgICAgICAgICAgIGxldCBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHt0b2tlbklEOiB2YWx1ZS5pZF90b2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XG4gICAgICAgICAgICAgIGxldCBpZHBCdW5kbGUgPSB7ZG9tYWluOiAnZ29vZ2xlLmNvbScsIHByb3RvY29sOiAnT0lEQyd9O1xuXG4gICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxuICAgICAgICAgICAgICBsZXQgcmV0dXJuVmFsdWUgPSB7YXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBpbmZvOiBpZGVudGl0eUJ1bmRsZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuXG4gICAgICAgICAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xuICAgICAgICAgICAgICArK25JZGVudGl0eTtcblxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246cmV0dXJuVmFsdWVdJywgcmV0dXJuVmFsdWUpO1xuICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246ZXhjaGFuZ2VDb2RlXScsIGVycik7XG4gICAgICAgICAgLy9yZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICB9XG5cbn1cblxuLyoqXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiovXG5jbGFzcyBOb2RlanNQcm94eVN0dWIge1xuXG4gIC8qKlxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXG4gICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgcmVjZWl2ZWQgaWRwUHJveHlcbiAgKlxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICAqL1xuIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XG4gICBjb25zb2xlLmxvZygnR29vZ2xlLT5OT0RFSlMgY29uc3RydWN0b3InKTtcblxuICAgbGV0IF90aGlzID0gdGhpcztcbiAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1cztcbiAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xuXG4gICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcbiAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJykge1xuXG4gICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xuICAgICB9XG4gICB9KTtcbiAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cbiAgKlxuICAqIEBwYXJhbSB7bWVzc2FnZX0gIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2VCdXNcbiAgKi9cbiAgcmVxdWVzdFRvSWRwKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcblxuICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XG4gICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XG4gICAgICAgIGlkcC5nZW5lcmF0ZUFzc2VydGlvbihwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgaWRwLnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcbiAgKi9cbiAgcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG1lc3NhZ2UgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sXG4gICAgICAgICAgICAgICAgICAgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX07XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG5cbiAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcblxuICAgIF90aGlzLl9zdGF0ZSA9IHZhbHVlO1xuXG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxuICAgICAgYm9keToge1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHJlYXNvbikge1xuICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjtcbiAgICB9XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gIH1cbn1cblxuLyoqXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnTm9kZWpzUHJveHlTdHViJyxcbiAgICBpbnN0YW5jZTogbmV3IE5vZGVqc1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuICB9O1xufVxuXG5cblxubGV0IGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlID1cbnthc3NlcnRpb246XG4nZXlKMGIydGxia2xFSWpvaVpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHFVVE5PTWxGNFRucHJNMDF0VVhsWlZFRjNUVlJCTTA1SFVURlBSRnBwVGxSbk5FOVVZekphUkVsNlRrUkpOVTVxWjNkTlYxVnBabEV1WlhsS2FHVnVRV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2FHUlhVV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2VtUlhTV2xQYVVsNFRVUk5lRTVVVVRCUFZFVXpUVlJGZVU1NlZYaE5hbGw2VGtSSmFVeERTbXhpVjBad1lrTkpOa2x1VW14ak0xSm9ZbTFTTUdGSGJIVmhlazE1VFZWQ2JtSlhSbkJpUXpWcVlqSXdhVXhEU214aVYwWndZa1k1TWxwWVNuQmFiV3hzV2tOSk5tUklTakZhVTNkcFdWaFNabUZIUm5waFEwazJTV2t3TTJSdFJUSk5NVloyWkZkV1JVMXJlRFpUTVdONlVtdzRNazlHUldsTVEwcDFZakkxYWxwVFNUWkpiSE13VDBOM2VFMTZRWE5OVTNkNlRrTjNNRTlEZDNoTmVYY3lURVJyYzA1RVNYTk5WRTB3VEVSamVVeEVSWHBPUTNkNVRrUmpjMDFVVFhOTlUzZDRURVJGYzA1VGQzZE1SRTF6VFZSTmQweEVSWE5OVkZWelRVTjNNRTlEZDNoTmVrRnpUVk4zZUUxRGQzbE1SRVY2VFVOM2VFeEVSWE5OUTNkNVRXcG5jMDVFVFhOTlZFRjRURVJGZVV4RVJYbE5VM2N6VEVSRk1VNTVkek5OVTNjMFRWTjNNVTlEZDNsTlZHdHpUWHBKYzAxVVFYTk5WRUUwVEVSRk5VMTVkM2hPZW10elRXcEZlVXhFUlhoT2FYZDVUbFJWYzA1VWEzTk5ha1V6VEVSTmVVeEVSVEpOVTNkNVRVUkZjMDVVVFhOTlZHTjRURVJKZVU1cGQzaFBWR3R6VFZSTk0weEVTWGROYVhkNFRucEZjMDVxUVhOUFJFbHpUbFJOYzAxVVNURk1SRmw1VEVSRk0wNTVkM2hOYWxselRWUlpNVXhFU1RCTVJFVXdUVk4zZWsxRGQzaE9VM2Q1VFdwWmMwNVVhM05OVkVFelRFUk5NRXhFWTNOTlZFMXpUVlJSTlV4RVJYaE5hWGQ0VFdwVmMwMVVRWE5OYWsxM1RFUkZOVTFUZDNoT1ZGbHpUVlJaTUV4RVJUTk9lWGQ0VFVOM2VFOUVWWE5OVkUxelRtcFpjMDE1ZDNsTlZHTnpUVlJaTWt4RVNUQk9RM2MxVFVOM2VFMVVhM05OVkVWNFRFUkpNMHhFUlRCT1UzZDRUVVJSYzA1NlJYTk5WR2MxVEVSRk1rNXBkM2xOYWxselRXcFZNVXhFUlhwTmVYYzBUWGwzZUU1VVJYTk5hazE0VEVSRmQwMVRkM2hPVkVWelQwUnJjMDFxU1hOTlZHdHpUbXBWYzAxVVZUQk1SRVYzVEVSVmVreEVTWGRQUTNkNVRWUm5jMDFxVlhsTVJFbDRUMU4zZWs1NWR6Rk5RM2Q1VFZSSmMwOUVXWE5OVkZFeFRFUkZkMDU1ZDNoTmVrbHpUMVJCYzAxcVRYcE1SRWwzVFdsM2VVMXFZM05OVkVFMFRFUkZlRTVEZDNoT1JFVnpUV3ByYzA1NlRYTk5WR2N6VEVSTmVFeEVSWHBNUkVsNlRrTjNkMHhFU1hwTmFYZDVUa04zZUU5VVJYTk5lbFZ6VFZSUk5VeEVSVE5QVTNkNFRYcG5jMDFxUlRCTVJFVXhUMU4zZVU1RVZYTk5WRmw1VEVSRk1FOURkM2xOYWtWelRWUkZORXhFUlROTVJFVjNUbE4zTkU5VGQzaE9WRVZ6VFZSUk1reEVTWGRQVTNjeFRsTjNlVTE2V1hOT2FrVnpUVlJSZWt4RVNYcE5lWGQ1VFdwbmMwMVVRWE5OVkVVeFRFUm5jMDlFUlhOTlZHc3pURVJSTVV4RVJYbE5lWGQ0VDBSamMwMXFTWHBNUkVVelRtbDNlVTVVVVhOTlZGa3hURVJaTlV4RVJUQk5lWGQ1VDFOM2VFMUVRWE5OVkVVd1RFUkZNMHhFUlhwTlEzZDVUV3BaYzAxcVNYcE1SRTE2VEVSRmVFeEVTVEJOUTNjMFRWTjNNazFUZDNoT2VrbHpUVlJyZUV4RVJURk9lWGQ1VGtSWmMwMXFRWGxNUkdjelRFUkZlazFUZDNsTmFrVnpUMFJuYzA1RVozTk5WRWt6VEVSRk1VOVRkM2hOVkd0elRWUlpkMHhFUlRGTmFYZDRUVlJqYzA1cVJYTk5hbFY2VEVSRk0wNURkekpPVTNkNVRWUlJjMDFxUVhwTVJFbDRUME4zTWsxNWR6Rk5RM2N6VDBOM2VFNXFRWE5OVkdkNFRFUkplVTFUZDNsTlZFVnpUVlJKTkV4RVkzZE1SRVV6VDBOM2VFOVVSWE5OVkdOM1RFUkJjMDFVVFhOTlZFbDVURVJGTTAxNWQzaE5hWGQ1VFVSTmMwMXFWWGxNUkZGelRWUm5NRXhFU1hsT1UzZDVUbFJKYzA1NWR6Sk5hWGMxVG1sM2VFMVVXWE5OVkZWelRXcEZNa3hFUlRGUFEzY3hUbE4zTkU1VGR6QlBRM2Q0VG1sM05VeEVTWGRPYVhkNFRWUnJjMDU2VVhOTlZFVjVURVJKTUUxNWQzaE5lbGx6VDBSUmMwMVVaekJNUkVsNVRYbDNlVTVVVVhOTlZFRjRURVJyZUV4RVdYaE1SRVYzVEVScmVFeEVaekZNUkVVMVRXbDNlRTVFWTNOTlZGRXdURVJWTTB4RVNUVk1SRmt5VEVSSmVrOURkM2hQVkd0elRXcFJNRXhFUlRWTmVYZDRUMVJSYzAxVVZYZE1SRWw2VFdsM2VVMUVRWE5OVkVFelRFUkpjMDE1ZDNoTVJFRnpUVll3YVV4RFNuQmpNMDFwVDJsS2IyUklVbmRqZW05MlRESkdhbGt5T1RGaWJsSjZURzFrZG1JeVpITmFVelZxWWpJd2FVeERTbkJaV0ZGcFQycEZNVTFVU1RKT1JGbDNUMFJCYzBsdFZqUmpRMGsyVFZSVmVFMXFXVEJQVkZrMFRVZ3dMblJsU1RGdE9UQldja0ZGWjB0MGRqTlFTVWMzU2paelFXaGtYMUZaTjIxcE0xRnpWMHhaWW1GclYwcHhURFptTkdkdFJubGtaRVYzY1V0NFIxazBlRGR6VFV4MGFpMVZZekJhUzNWWFdGOXhSVGRMTm1sM2FtaE5iSHBpVkVoTE9FeGxhSGxKVEU5RFdUZFljM1Z2WVRaTmNXWlVNVmR3T0VKbk1GUm1Ta2gxVDI1aVdsOTViWGhRVFZGTFQydG1XbWxRVmxNMWFYRnpUek5pYm1WUmVsUnlNRXBpY1hSUk4zaFhjMHBUTm01NkxXbEJObkpGWkV0cVprTTNNR0Z0VnpCcFUwa3RMV3hYYlZnM2MxcGhWR1ZhWXpkMVp6UnlORm8xTFhwTVJqTTVlbmRSVUU5M1JWRkJiRlF0V2tGZmVURm5UMTgwVm5WbFJHVmFiVmR0Vm5WNk1tdEtUMTg1TVdnMmNVVTFibHBQZEhkWFZuVkRjbVIzTFRsSllYYzNlakpFVUdWelgybzFVa1E0YkVSdmRsSTJTazB3WkdveVNuRjZURGxXY0ZSamJVWXlOMEZLYzJNeGFtaFJUSE5NVjJKc1kzaGFkeUlzSW5SdmEyVnVTVVJLVTA5T0lqcDdJbUY2Y0NJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbUYxWkNJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbk4xWWlJNklqRXdNekUxTkRRNU1UY3hNVEkzTlRFeU5qTTBNaUlzSW1WdFlXbHNJam9pZEdWemRHRnVaSFJvYVc1ck16SXhRR2R0WVdsc0xtTnZiU0lzSW1WdFlXbHNYM1psY21sbWFXVmtJam9pZEhKMVpTSXNJbUYwWDJoaGMyZ2lPaUl0TjNaaE5qTlZiM1ZsUkRKTWVrdFhNMFpmTmpoUklpd2libTl1WTJVaU9pSmJORGdzTVRNd0xERXNNelFzTkRnc01UTXNOaXc1TERReUxERXpOQ3czTWl3eE16UXNNalEzTERFekxERXNNU3d4TERVc01Dd3pMREV6TUN3eExERTFMREFzTkRnc01UTXdMREVzTVRBc01pd3hNekFzTVN3eExEQXNNakk0TERRekxERXdNU3d4TWl3eE1qRXNOeXd4TlRjc056RXNPREVzTlRnc01qRTVMRE15TERFd0xERXdPQ3d4T1RNc01UYzVMREl4TWl3eE1UWXNNalUxTERVNUxESXhOeXd6TWl3eE5qRXNNakF4TERVekxERTNNU3d5TWpZc01UazVMREV6Tnl3eU1ESXNNVGN4TERZd0xEZ3lMRFV6TERFeU5TdzJNaXd4Tnpjc01USTJMREUyTlN3eU5Dd3hOREVzTXpBc01UVXNNakkyTERVNUxERXdOeXd6TkN3M0xERXpMREUwT1N3eE1USXNNVEkxTERFd0xESXpNQ3d4T1RFc01UVTJMREUyTkN3eE56Y3NNVEFzTVRnMUxERXpMRFkyTERNc01qRTNMREUyTml3eU5EUXNPVEFzTVRFNUxERXhNU3d5Tnl3eE5EVXNNVEEwTERjeExERTRPU3d4TmpZc01qSTJMREkxTlN3eE16TXNPRE1zTVRVeExESXpNU3d4TURFc01UVXhMRGc1TERJeUxERTVMRFkxTERFMU5Dd3hNQ3cxTXl3eU1EZ3NNakU0TERJMU1pd3lNVGtzTXpjc05UQXNNakV5TERnMkxERTBOU3d4TURjc01UTXlMRGt3TERJek15d3lNRElzTWpJM0xERXdPQ3d4TVRRc01UUXhMREk1TERjekxERTROeXd6TVN3eE15d3lNelFzTUN3eU16SXNNalFzTVRreExETTFMREUwT1N3eE56a3NNVE00TERJeE5Dd3hOVGtzTWpRMUxERTJNaXd4TkRnc01qSXhMREV4T0N3eE55d3hNRFVzT0Rrc01UVXhMREUwTml3eU1Ea3NOVFVzTWpNMkxEWXhMREUwTXl3eU16TXNNakk0TERFd0xERXhOU3c0TERneExERTVOeXcwTlN3eE1qTXNNVGczTERJeU15d3hOellzTWpVMExERTJOU3cyT1N3eE5ETXNNamtzTVRBd0xERXhOQ3d4Tnl3eE16QXNNakkyTERJeU15d3pNeXd4TVN3eU5EQXNPREVzTmpFc01UY3lMREU1TVN3eE5UY3NNalEyTERJd01pdzROeXd4TXpFc01qSXhMRGc0TERRNExERXlOeXd4TlRrc01URTVMREUyTUN3eE5USXNNVEUzTERZeExESTFNeXd4TnpRc05qVXNNakUwTERJd015d3lNVGdzTmpNc05UQXNOemdzTVRZd0xERTRNU3d5TWpFc01qRXhMREV5T0N3M01Dd3hOemdzTVRreExERTNNQ3d3TERFekxERXlNaXd4TnpNc01USXNNakF6TERJMU1pdzBMREU0TkN3eU1qVXNNalV5TERjc05qSXNPVFlzTVRFMkxERTFMREl4Tml3eE5UZ3NOVFVzT0RVc05EZ3NNVFlzT1N3eU1EWXNNVEU1TERjMExERXhNaXd5TkRNc01UTTJMRGcwTERFNE5Dd3lNak1zTWpVMExERXdNU3c1TVN3Mk1Td3hNQ3c1TVN3NE5Td3hPVElzTVRRM0xERTBOQ3cxTnl3eU9TdzJOaXd5TXpnc01UazVMREkwTkN3eE9UTXNNVGswTERFMU1Dd3lNeklzTWpBd0xERXdOeXd5TERNc01Td3dMREZkSWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam9pTVRVeE1qWTBOakE0TUNJc0ltVjRjQ0k2SWpFMU1USTJORGsyT0RBaUxDSmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalEzTjJReE56azNNbVF5WVRBd01UQTNOR1ExT0RaaU5UZzRPVGMyWkRJek5ESTVOamd3TVdVaWZYMD0nLFxuaWRwOntcbmRvbWFpbjonbm9kZWpzLWlkcCcsXG5wcm90b2NvbDonT0lEQyd9LFxuaW5mbzp7XG5hY2Nlc3NUb2tlbjoneWEyOS5HbHNiQmFsR0pKbVZpX041SUR5cU1JM0p4a081ZUxWNDMzM0k5M2VRQkNwTkFvZkVxdFU0VWtXSGg4ZHJWbHJWaVZUcXQ2SmszUDg2X0NEdDRzS1ZoMEc5QWJUazFyVlczTUF4Y0ZoRVVGRS1LTVhkREtfS3NNZjZmTlFrJyxcbmlkVG9rZW46J2V5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalEzTjJReE56azNNbVF5WVRBd01UQTNOR1ExT0RaaU5UZzRPVGMyWkRJek5ESTVOamd3TVdVaWZRLmV5SmhlbkFpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSmhkV1FpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSnpkV0lpT2lJeE1ETXhOVFEwT1RFM01URXlOelV4TWpZek5ESWlMQ0psYldGcGJDSTZJblJsYzNSaGJtUjBhR2x1YXpNeU1VQm5iV0ZwYkM1amIyMGlMQ0psYldGcGJGOTJaWEpwWm1sbFpDSTZkSEoxWlN3aVlYUmZhR0Z6YUNJNklpMDNkbUUyTTFWdmRXVkVNa3g2UzFjelJsODJPRkVpTENKdWIyNWpaU0k2SWxzME9Dd3hNekFzTVN3ek5DdzBPQ3d4TXl3MkxEa3NORElzTVRNMExEY3lMREV6TkN3eU5EY3NNVE1zTVN3eExERXNOU3d3TERNc01UTXdMREVzTVRVc01DdzBPQ3d4TXpBc01Td3hNQ3d5TERFek1Dd3hMREVzTUN3eU1qZ3NORE1zTVRBeExERXlMREV5TVN3M0xERTFOeXczTVN3NE1TdzFPQ3d5TVRrc016SXNNVEFzTVRBNExERTVNeXd4Tnprc01qRXlMREV4Tml3eU5UVXNOVGtzTWpFM0xETXlMREUyTVN3eU1ERXNOVE1zTVRjeExESXlOaXd4T1Rrc01UTTNMREl3TWl3eE56RXNOakFzT0RJc05UTXNNVEkxTERZeUxERTNOeXd4TWpZc01UWTFMREkwTERFME1Td3pNQ3d4TlN3eU1qWXNOVGtzTVRBM0xETTBMRGNzTVRNc01UUTVMREV4TWl3eE1qVXNNVEFzTWpNd0xERTVNU3d4TlRZc01UWTBMREUzTnl3eE1Dd3hPRFVzTVRNc05qWXNNeXd5TVRjc01UWTJMREkwTkN3NU1Dd3hNVGtzTVRFeExESTNMREUwTlN3eE1EUXNOekVzTVRnNUxERTJOaXd5TWpZc01qVTFMREV6TXl3NE15d3hOVEVzTWpNeExERXdNU3d4TlRFc09Ea3NNaklzTVRrc05qVXNNVFUwTERFd0xEVXpMREl3T0N3eU1UZ3NNalV5TERJeE9Td3pOeXcxTUN3eU1USXNPRFlzTVRRMUxERXdOeXd4TXpJc09UQXNNak16TERJd01pd3lNamNzTVRBNExERXhOQ3d4TkRFc01qa3NOek1zTVRnM0xETXhMREV6TERJek5Dd3dMREl6TWl3eU5Dd3hPVEVzTXpVc01UUTVMREUzT1N3eE16Z3NNakUwTERFMU9Td3lORFVzTVRZeUxERTBPQ3d5TWpFc01URTRMREUzTERFd05TdzRPU3d4TlRFc01UUTJMREl3T1N3MU5Td3lNellzTmpFc01UUXpMREl6TXl3eU1qZ3NNVEFzTVRFMUxEZ3NPREVzTVRrM0xEUTFMREV5TXl3eE9EY3NNakl6TERFM05pd3lOVFFzTVRZMUxEWTVMREUwTXl3eU9Td3hNREFzTVRFMExERTNMREV6TUN3eU1qWXNNakl6TERNekxERXhMREkwTUN3NE1TdzJNU3d4TnpJc01Ua3hMREUxTnl3eU5EWXNNakF5TERnM0xERXpNU3d5TWpFc09EZ3NORGdzTVRJM0xERTFPU3d4TVRrc01UWXdMREUxTWl3eE1UY3NOakVzTWpVekxERTNOQ3cyTlN3eU1UUXNNakF6TERJeE9DdzJNeXcxTUN3M09Dd3hOakFzTVRneExESXlNU3d5TVRFc01USTRMRGN3TERFM09Dd3hPVEVzTVRjd0xEQXNNVE1zTVRJeUxERTNNeXd4TWl3eU1ETXNNalV5TERRc01UZzBMREl5TlN3eU5USXNOeXcyTWl3NU5pd3hNVFlzTVRVc01qRTJMREUxT0N3MU5TdzROU3cwT0N3eE5pdzVMREl3Tml3eE1Ua3NOelFzTVRFeUxESTBNeXd4TXpZc09EUXNNVGcwTERJeU15d3lOVFFzTVRBeExEa3hMRFl4TERFd0xEa3hMRGcxTERFNU1pd3hORGNzTVRRMExEVTNMREk1TERZMkxESXpPQ3d4T1Rrc01qUTBMREU1TXl3eE9UUXNNVFV3TERJek1pd3lNREFzTVRBM0xESXNNeXd4TERBc01WMGlMQ0pwYzNNaU9pSm9kSFJ3Y3pvdkwyRmpZMjkxYm5SekxtZHZiMmRzWlM1amIyMGlMQ0pwWVhRaU9qRTFNVEkyTkRZd09EQXNJbVY0Y0NJNk1UVXhNalkwT1RZNE1IMC50ZUkxbTkwVnJBRWdLdHYzUElHN0o2c0FoZF9RWTdtaTNRc1dMWWJha1dKcUw2ZjRnbUZ5ZGRFd3FLeEdZNHg3c01MdGotVWMwWkt1V1hfcUU3SzZpd2poTWx6YlRISzhMZWh5SUxPQ1k3WHN1b2E2TXFmVDFXcDhCZzBUZkpIdU9uYlpfeW14UE1RS09rZlppUFZTNWlxc08zYm5lUXpUcjBKYnF0UTd4V3NKUzZuei1pQTZyRWRLamZDNzBhbVcwaVNJLS1sV21YN3NaYVRlWmM3dWc0cjRaNS16TEYzOXp3UVBPd0VRQWxULVpBX3kxZ09fNFZ1ZURlWm1XbVZ1ejJrSk9fOTFoNnFFNW5aT3R3V1Z1Q3Jkdy05SWF3N3oyRFBlc19qNVJEOGxEb3ZSNkpNMGRqMkpxekw5VnBUY21GMjdBSnNjMWpoUUxzTFdibGN4WncnLFxucmVmcmVzaFRva2VuOicxLzZjQ0dFV3l6eDJ1TzJiSDJGMUE4djZLRFRHNHJQMENYYy1YVVExMi1VMG8nLFxudG9rZW5UeXBlOidCZWFyZXInLFxuaW5mb1Rva2VuOntcbnN1YjonMTAzMTU0NDkxNzExMjc1MTI2MzQyJyxcbm5hbWU6J3Rlc3QgdGhpbmsnLFxuZ2l2ZW5fbmFtZTondGVzdCcsXG5mYW1pbHlfbmFtZTondGhpbmsnLFxucGljdHVyZTonaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1YZFVJcWRNa0NXQS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBQS80MjUycnNjYnY1TS9waG90by5qcGcnLFxuZW1haWw6J3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxuZW1haWxfdmVyaWZpZWQ6dHJ1ZSxcbmxvY2FsZTonZW4nfSxcbnRva2VuSURKU09OOnsnYXpwJzonODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcbmF1ZDonODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcbnN1YjonMTAzMTU0NDkxNzExMjc1MTI2MzQyJyxcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcbmVtYWlsX3ZlcmlmaWVkOid0cnVlJyxcbmF0X2hhc2g6Jy03dmE2M1VvdWVEMkx6S1czRl82OFEnLFxubm9uY2U6J1s0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0nLFxuaXNzOidodHRwczovL2FjY291bnRzLm5vZGVqcy1pZHAnLFxuaWF0OicxNTEyNjQ2MDgwJyxcbmV4cDonMTUxMjY0OTY4MCcsXG5hbGc6J1JTMjU2JyxcbmtpZDonNDc3ZDE3OTcyZDJhMDAxMDc0ZDU4NmI1ODg5NzZkMjM0Mjk2ODAxZSd9LFxuZXhwaXJlczonMTUxMjY0OTY4MCcsXG5lbWFpbDondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSd9LFxuaW5mb1Rva2VuOntzdWI6JzEwMzE1NDQ5MTcxMTI3NTEyNjM0MicsXG5uYW1lOid0ZXN0IHRoaW5rJyxcbmdpdmVuX25hbWU6J3Rlc3QnLFxuZmFtaWx5X25hbWU6J3RoaW5rJyxcbnBpY3R1cmU6J2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tWGRVSXFkTWtDV0EvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQUEvNDI1MnJzY2J2NU0vcGhvdG8uanBnJyxcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcbmVtYWlsX3ZlcmlmaWVkOnRydWUsXG5sb2NhbGU6J2VuJ30sXG5pZGVudGl0eTondXNlcjovL25vZGVqcy1pZHAvdGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXG5tZXNzYWdlSW5mbzp7dXNlclByb2ZpbGU6e3VzZXJuYW1lOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcbmNuOid0ZXN0YW5kdGhpbmszMjEnLFxuYXZhdGFyOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZycsXG5sb2NhbGU6J2VuJyxcbnVzZXJVUkw6J3VzZXI6Ly9ub2RlanMtaWRwL3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nfSxcbmlkcDonbm9kZWpzLWlkcCcsXG5hc3NlcnRpb246J2V5SjBiMnRsYmtsRUlqb2laWGxLYUdKSFkybFBhVXBUVlhwSk1VNXBTWE5KYlhSd1drTkpOa2xxVVROT01sRjRUbnByTTAxdFVYbFpWRUYzVFZSQk0wNUhVVEZQUkZwcFRsUm5ORTlVWXpKYVJFbDZUa1JKTlU1cVozZE5WMVZwWmxFdVpYbEthR1Z1UVdsUGFVazBUVVJuZWsxcWF6Rk9hbGwzVFZSSmRHUklSbmxQU0VaMllVUkZlRTFVYXpCTmJXUnJUVzEwYmsxRVFUTmtSRUo2VDBkWmVVNTZaSGxpTW10MVdWaENkMk41Tlc1aU1qbHVZa2RXTVdNeVZubFpNamwxWkVkV2RXUkROV3BpTWpCcFRFTkthR1JYVVdsUGFVazBUVVJuZWsxcWF6Rk9hbGwzVFZSSmRHUklSbmxQU0VaMllVUkZlRTFVYXpCTmJXUnJUVzEwYmsxRVFUTmtSRUo2VDBkWmVVNTZaSGxpTW10MVdWaENkMk41Tlc1aU1qbHVZa2RXTVdNeVZubFpNamwxWkVkV2RXUkROV3BpTWpCcFRFTktlbVJYU1dsUGFVbDRUVVJOZUU1VVVUQlBWRVV6VFZSRmVVNTZWWGhOYWxsNlRrUkphVXhEU214aVYwWndZa05KTmtsdVVteGpNMUpvWW0xU01HRkhiSFZoZWsxNVRWVkNibUpYUm5CaVF6VnFZakl3YVV4RFNteGlWMFp3WWtZNU1scFlTbkJhYld4c1drTkpObVJJU2pGYVUzZHBXVmhTWm1GSFJucGhRMGsyU1drd00yUnRSVEpOTVZaMlpGZFdSVTFyZURaVE1XTjZVbXc0TWs5R1JXbE1RMHAxWWpJMWFscFRTVFpKYkhNd1QwTjNlRTE2UVhOTlUzZDZUa04zTUU5RGQzaE5lWGN5VEVScmMwNUVTWE5OVkUwd1RFUmplVXhFUlhwT1EzZDVUa1JqYzAxVVRYTk5VM2Q0VEVSRmMwNVRkM2RNUkUxelRWUk5kMHhFUlhOTlZGVnpUVU4zTUU5RGQzaE5la0Z6VFZOM2VFMURkM2xNUkVWNlRVTjNlRXhFUlhOTlEzZDVUV3BuYzA1RVRYTk5WRUY0VEVSRmVVeEVSWGxOVTNjelRFUkZNVTU1ZHpOTlUzYzBUVk4zTVU5RGQzbE5WR3R6VFhwSmMwMVVRWE5OVkVFMFRFUkZOVTE1ZDNoT2VtdHpUV3BGZVV4RVJYaE9hWGQ1VGxSVmMwNVVhM05OYWtVelRFUk5lVXhFUlRKTlUzZDVUVVJGYzA1VVRYTk5WR040VEVSSmVVNXBkM2hQVkd0elRWUk5NMHhFU1hkTmFYZDRUbnBGYzA1cVFYTlBSRWx6VGxSTmMwMVVTVEZNUkZsNVRFUkZNMDU1ZDNoTmFsbHpUVlJaTVV4RVNUQk1SRVV3VFZOM2VrMURkM2hPVTNkNVRXcFpjMDVVYTNOTlZFRXpURVJOTUV4RVkzTk5WRTF6VFZSUk5VeEVSWGhOYVhkNFRXcFZjMDFVUVhOTmFrMTNURVJGTlUxVGQzaE9WRmx6VFZSWk1FeEVSVE5PZVhkNFRVTjNlRTlFVlhOTlZFMXpUbXBaYzAxNWQzbE5WR056VFZSWk1reEVTVEJPUTNjMVRVTjNlRTFVYTNOTlZFVjRURVJKTTB4RVJUQk9VM2Q0VFVSUmMwNTZSWE5OVkdjMVRFUkZNazVwZDNsTmFsbHpUV3BWTVV4RVJYcE5lWGMwVFhsM2VFNVVSWE5OYWsxNFRFUkZkMDFUZDNoT1ZFVnpUMFJyYzAxcVNYTk5WR3R6VG1wVmMwMVVWVEJNUkVWM1RFUlZla3hFU1hkUFEzZDVUVlJuYzAxcVZYbE1SRWw0VDFOM2VrNTVkekZOUTNkNVRWUkpjMDlFV1hOTlZGRXhURVJGZDA1NWQzaE5la2x6VDFSQmMwMXFUWHBNUkVsM1RXbDNlVTFxWTNOTlZFRTBURVJGZUU1RGQzaE9SRVZ6VFdwcmMwNTZUWE5OVkdjelRFUk5lRXhFUlhwTVJFbDZUa04zZDB4RVNYcE5hWGQ1VGtOM2VFOVVSWE5OZWxWelRWUlJOVXhFUlROUFUzZDRUWHBuYzAxcVJUQk1SRVV4VDFOM2VVNUVWWE5OVkZsNVRFUkZNRTlEZDNsTmFrVnpUVlJGTkV4RVJUTk1SRVYzVGxOM05FOVRkM2hPVkVWelRWUlJNa3hFU1hkUFUzY3hUbE4zZVUxNldYTk9ha1Z6VFZSUmVreEVTWHBOZVhkNVRXcG5jMDFVUVhOTlZFVXhURVJuYzA5RVJYTk5WR3N6VEVSUk1VeEVSWGxOZVhkNFQwUmpjMDFxU1hwTVJFVXpUbWwzZVU1VVVYTk5WRmt4VEVSWk5VeEVSVEJOZVhkNVQxTjNlRTFFUVhOTlZFVXdURVJGTTB4RVJYcE5RM2Q1VFdwWmMwMXFTWHBNUkUxNlRFUkZlRXhFU1RCTlEzYzBUVk4zTWsxVGQzaE9la2x6VFZScmVFeEVSVEZPZVhkNVRrUlpjMDFxUVhsTVJHY3pURVJGZWsxVGQzbE5ha1Z6VDBSbmMwNUVaM05OVkVrelRFUkZNVTlUZDNoTlZHdHpUVlJaZDB4RVJURk5hWGQ0VFZSamMwNXFSWE5OYWxWNlRFUkZNMDVEZHpKT1UzZDVUVlJSYzAxcVFYcE1SRWw0VDBOM01rMTVkekZOUTNjelQwTjNlRTVxUVhOTlZHZDRURVJKZVUxVGQzbE5WRVZ6VFZSSk5FeEVZM2RNUkVVelQwTjNlRTlVUlhOTlZHTjNURVJCYzAxVVRYTk5WRWw1VEVSRk0wMTVkM2hOYVhkNVRVUk5jMDFxVlhsTVJGRnpUVlJuTUV4RVNYbE9VM2Q1VGxSSmMwNTVkekpOYVhjMVRtbDNlRTFVV1hOTlZGVnpUV3BGTWt4RVJURlBRM2N4VGxOM05FNVRkekJQUTNkNFRtbDNOVXhFU1hkT2FYZDRUVlJyYzA1NlVYTk5WRVY1VEVSSk1FMTVkM2hOZWxselQwUlJjMDFVWnpCTVJFbDVUWGwzZVU1VVVYTk5WRUY0VEVScmVFeEVXWGhNUkVWM1RFUnJlRXhFWnpGTVJFVTFUV2wzZUU1RVkzTk5WRkV3VEVSVk0weEVTVFZNUkZreVRFUkplazlEZDNoUFZHdHpUV3BSTUV4RVJUVk5lWGQ0VDFSUmMwMVVWWGRNUkVsNlRXbDNlVTFFUVhOTlZFRXpURVJKYzAxNWQzaE1SRUZ6VFZZd2FVeERTbkJqTTAxcFQybEtiMlJJVW5kamVtOTJUREpHYWxreU9URmlibEo2VEcxa2RtSXlaSE5hVXpWcVlqSXdhVXhEU25CWldGRnBUMnBGTVUxVVNUSk9SRmwzVDBSQmMwbHRWalJqUTBrMlRWUlZlRTFxV1RCUFZGazBUVWd3TG5SbFNURnRPVEJXY2tGRlowdDBkak5RU1VjM1NqWnpRV2hrWDFGWk4yMXBNMUZ6VjB4WlltRnJWMHB4VERabU5HZHRSbmxrWkVWM2NVdDRSMWswZURkelRVeDBhaTFWWXpCYVMzVlhXRjl4UlRkTE5tbDNhbWhOYkhwaVZFaExPRXhsYUhsSlRFOURXVGRZYzNWdllUWk5jV1pVTVZkd09FSm5NRlJtU2toMVQyNWlXbDk1YlhoUVRWRkxUMnRtV21sUVZsTTFhWEZ6VHpOaWJtVlJlbFJ5TUVwaWNYUlJOM2hYYzBwVE5tNTZMV2xCTm5KRlpFdHFaa00zTUdGdFZ6QnBVMGt0TFd4WGJWZzNjMXBoVkdWYVl6ZDFaelJ5TkZvMUxYcE1Sak01ZW5kUlVFOTNSVkZCYkZRdFdrRmZlVEZuVDE4MFZuVmxSR1ZhYlZkdFZuVjZNbXRLVDE4NU1XZzJjVVUxYmxwUGRIZFhWblZEY21SM0xUbEpZWGMzZWpKRVVHVnpYMm8xVWtRNGJFUnZkbEkyU2swd1pHb3lTbkY2VERsV2NGUmpiVVl5TjBGS2MyTXhhbWhSVEhOTVYySnNZM2hhZHlJc0luUnZhMlZ1U1VSS1UwOU9JanA3SW1GNmNDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW1GMVpDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW5OMVlpSTZJakV3TXpFMU5EUTVNVGN4TVRJM05URXlOak0wTWlJc0ltVnRZV2xzSWpvaWRHVnpkR0Z1WkhSb2FXNXJNekl4UUdkdFlXbHNMbU52YlNJc0ltVnRZV2xzWDNabGNtbG1hV1ZrSWpvaWRISjFaU0lzSW1GMFgyaGhjMmdpT2lJdE4zWmhOak5WYjNWbFJESk1la3RYTTBaZk5qaFJJaXdpYm05dVkyVWlPaUpiTkRnc01UTXdMREVzTXpRc05EZ3NNVE1zTml3NUxEUXlMREV6TkN3M01pd3hNelFzTWpRM0xERXpMREVzTVN3eExEVXNNQ3d6TERFek1Dd3hMREUxTERBc05EZ3NNVE13TERFc01UQXNNaXd4TXpBc01Td3hMREFzTWpJNExEUXpMREV3TVN3eE1pd3hNakVzTnl3eE5UY3NOekVzT0RFc05UZ3NNakU1TERNeUxERXdMREV3T0N3eE9UTXNNVGM1TERJeE1pd3hNVFlzTWpVMUxEVTVMREl4Tnl3ek1pd3hOakVzTWpBeExEVXpMREUzTVN3eU1qWXNNVGs1TERFek55d3lNRElzTVRjeExEWXdMRGd5TERVekxERXlOU3cyTWl3eE56Y3NNVEkyTERFMk5Td3lOQ3d4TkRFc016QXNNVFVzTWpJMkxEVTVMREV3Tnl3ek5DdzNMREV6TERFME9Td3hNVElzTVRJMUxERXdMREl6TUN3eE9URXNNVFUyTERFMk5Dd3hOemNzTVRBc01UZzFMREV6TERZMkxETXNNakUzTERFMk5pd3lORFFzT1RBc01URTVMREV4TVN3eU55d3hORFVzTVRBMExEY3hMREU0T1N3eE5qWXNNakkyTERJMU5Td3hNek1zT0RNc01UVXhMREl6TVN3eE1ERXNNVFV4TERnNUxESXlMREU1TERZMUxERTFOQ3d4TUN3MU15d3lNRGdzTWpFNExESTFNaXd5TVRrc016Y3NOVEFzTWpFeUxEZzJMREUwTlN3eE1EY3NNVE15TERrd0xESXpNeXd5TURJc01qSTNMREV3T0N3eE1UUXNNVFF4TERJNUxEY3pMREU0Tnl3ek1Td3hNeXd5TXpRc01Dd3lNeklzTWpRc01Ua3hMRE0xTERFME9Td3hOemtzTVRNNExESXhOQ3d4TlRrc01qUTFMREUyTWl3eE5EZ3NNakl4TERFeE9Dd3hOeXd4TURVc09Ea3NNVFV4TERFME5pd3lNRGtzTlRVc01qTTJMRFl4TERFME15d3lNek1zTWpJNExERXdMREV4TlN3NExEZ3hMREU1Tnl3ME5Td3hNak1zTVRnM0xESXlNeXd4TnpZc01qVTBMREUyTlN3Mk9Td3hORE1zTWprc01UQXdMREV4TkN3eE55d3hNekFzTWpJMkxESXlNeXd6TXl3eE1Td3lOREFzT0RFc05qRXNNVGN5TERFNU1Td3hOVGNzTWpRMkxESXdNaXc0Tnl3eE16RXNNakl4TERnNExEUTRMREV5Tnl3eE5Ua3NNVEU1TERFMk1Dd3hOVElzTVRFM0xEWXhMREkxTXl3eE56UXNOalVzTWpFMExESXdNeXd5TVRnc05qTXNOVEFzTnpnc01UWXdMREU0TVN3eU1qRXNNakV4TERFeU9DdzNNQ3d4Tnpnc01Ua3hMREUzTUN3d0xERXpMREV5TWl3eE56TXNNVElzTWpBekxESTFNaXcwTERFNE5Dd3lNalVzTWpVeUxEY3NOaklzT1RZc01URTJMREUxTERJeE5pd3hOVGdzTlRVc09EVXNORGdzTVRZc09Td3lNRFlzTVRFNUxEYzBMREV4TWl3eU5ETXNNVE0yTERnMExERTROQ3d5TWpNc01qVTBMREV3TVN3NU1TdzJNU3d4TUN3NU1TdzROU3d4T1RJc01UUTNMREUwTkN3MU55d3lPU3cyTml3eU16Z3NNVGs1TERJME5Dd3hPVE1zTVRrMExERTFNQ3d5TXpJc01qQXdMREV3Tnl3eUxETXNNU3d3TERGZElpd2lhWE56SWpvaWFIUjBjSE02THk5aFkyTnZkVzUwY3k1bmIyOW5iR1V1WTI5dElpd2lhV0YwSWpvaU1UVXhNalkwTmpBNE1DSXNJbVY0Y0NJNklqRTFNVEkyTkRrMk9EQWlMQ0poYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpRM04yUXhOemszTW1ReVlUQXdNVEEzTkdRMU9EWmlOVGc0T1RjMlpESXpOREk1Tmpnd01XVWlmWDA9JyxcbmV4cGlyZXM6JzE1MTI2NDk2ODAnfSxcbi8qXG5rZXlQYWlyOntcbnB1YmxpYzpbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdLFxucHJpdmF0ZTpbNDgsMTMwLDQsMTkxLDIsMSwwLDQ4LDEzLDYsOSw0MiwxMzQsNzIsMTM0LDI0NywxMywxLDEsMSw1LDAsNCwxMzAsNCwxNjksNDgsMTMwLDQsMTY1LDIsMSwwLDIsMTMwLDEsMSwwLDIyOCw0MywxMDEsMTIsMTIxLDcsMTU3LDcxLDgxLDU4LDIxOSwzMiwxMCwxMDgsMTkzLDE3OSwyMTIsMTE2LDI1NSw1OSwyMTcsMzIsMTYxLDIwMSw1MywxNzEsMjI2LDE5OSwxMzcsMjAyLDE3MSw2MCw4Miw1MywxMjUsNjIsMTc3LDEyNiwxNjUsMjQsMTQxLDMwLDE1LDIyNiw1OSwxMDcsMzQsNywxMywxNDksMTEyLDEyNSwxMCwyMzAsMTkxLDE1NiwxNjQsMTc3LDEwLDE4NSwxMyw2NiwzLDIxNywxNjYsMjQ0LDkwLDExOSwxMTEsMjcsMTQ1LDEwNCw3MSwxODksMTY2LDIyNiwyNTUsMTMzLDgzLDE1MSwyMzEsMTAxLDE1MSw4OSwyMiwxOSw2NSwxNTQsMTAsNTMsMjA4LDIxOCwyNTIsMjE5LDM3LDUwLDIxMiw4NiwxNDUsMTA3LDEzMiw5MCwyMzMsMjAyLDIyNywxMDgsMTE0LDE0MSwyOSw3MywxODcsMzEsMTMsMjM0LDAsMjMyLDI0LDE5MSwzNSwxNDksMTc5LDEzOCwyMTQsMTU5LDI0NSwxNjIsMTQ4LDIyMSwxMTgsMTcsMTA1LDg5LDE1MSwxNDYsMjA5LDU1LDIzNiw2MSwxNDMsMjMzLDIyOCwxMCwxMTUsOCw4MSwxOTcsNDUsMTIzLDE4NywyMjMsMTc2LDI1NCwxNjUsNjksMTQzLDI5LDEwMCwxMTQsMTcsMTMwLDIyNiwyMjMsMzMsMTEsMjQwLDgxLDYxLDE3MiwxOTEsMTU3LDI0NiwyMDIsODcsMTMxLDIyMSw4OCw0OCwxMjcsMTU5LDExOSwxNjAsMTUyLDExNyw2MSwyNTMsMTc0LDY1LDIxNCwyMDMsMjE4LDYzLDUwLDc4LDE2MCwxODEsMjIxLDIxMSwxMjgsNzAsMTc4LDE5MSwxNzAsMCwxMywxMjIsMTczLDEyLDIwMywyNTIsNCwxODQsMjI1LDI1Miw3LDYyLDk2LDExNiwxNSwyMTYsMTU4LDU1LDg1LDQ4LDE2LDksMjA2LDExOSw3NCwxMTIsMjQzLDEzNiw4NCwxODQsMjIzLDI1NCwxMDEsOTEsNjEsMTAsOTEsODUsMTkyLDE0NywxNDQsNTcsMjksNjYsMjM4LDE5OSwyNDQsMTkzLDE5NCwxNTAsMjMyLDIwMCwxMDcsMiwzLDEsMCwxLDIsMTMwLDEsMCwxMDMsMjQ0LDEzNywxMTgsMTE2LDgyLDE0LDIwMywxMDIsMTA3LDI1Myw4OCwxMiwxOTksMjIyLDYwLDI0MywxMzYsODYsMTU3LDc0LDIyNCwxOTAsNTMsMTEzLDU3LDE1NywyNTAsNDksMTMwLDk2LDMxLDI1MiwxMzYsMTUyLDcwLDE0MywxNywyMTUsOTYsMTAzLDUxLDE4LDM1LDE0MSwyMTIsMjEwLDIwNSw5LDIxNiw4Myw3MCwyNDUsNzEsMTM4LDExOSwxMTIsMjI5LDE2NCwxNzYsOSwzNyw4MSwxNjEsMTkzLDE1NCw2OCwyNDksMTE1LDEwNiwyMDEsNiwxMiwyMjUsMTQ0LDEyNiwxNDEsMjEwLDE0MSwyNDIsMTI4LDE1OSwyMjEsMTYzLDIyMiwyMSwyMzMsMjMwLDE2NywyMDYsNTksMjQsMjUwLDIzMyw4MSwxMjIsMTAyLDI2LDYsMjMzLDcyLDEzMyw0Nyw3NywxNTUsMjM4LDg2LDYsMTM5LDI0LDEzMSwxNjMsMTc5LDExMiw0OCwyNDcsMTQyLDYsMjA3LDIwNCwxNzMsMjIzLDE0MCwxOTksMTUwLDk1LDEyMywxNTIsMjAyLDE1NSwxMzEsMjM4LDYyLDk2LDEzMyw0LDIxNyw1MSwxMjEsMzAsMzgsMTc4LDE4OSwyMTYsNDQsMzUsMjQxLDkzLDcsNjIsOTAsMTExLDIxNiw2NiwyMDksMjQzLDEyOCwyMzQsMTQxLDg0LDEzNSwxODEsMTMsMzgsMjIwLDExNCwyNDUsMjQwLDE3OCw5NSwyMjAsMjA2LDExLDE4NiwyMzQsMjEzLDY2LDEyMSw4Myw2OCw4OSw3NSw0NiwxODMsMTQ1LDE4MywxNDcsMTYwLDIxNSwxMTgsMTk4LDEyNSwxODEsMTQ2LDMwLDI1MSw1OCw4Nyw0NywyMDksMjM3LDk3LDI0LDQ3LDE3OSw2LDExMCwyNDIsOTksMTUwLDIyNiwxNDgsMTk4LDE3NCwxNDYsMTAxLDIxMyw4NywxNzgsMTAsMjIzLDEwNSwxOCw1Niw1MywyMiwyMTIsMTU4LDE3MCwxNzYsNTEsODYsMTQ1LDEyNSwxMjQsNDQsOSw4NSwxOSwxNDQsMjQ2LDE3MCw3OCwxMjQsMzAsMzIsMTIsMTY2LDE3NCwxMzksNzcsNjMsMTczLDgyLDEwLDE1MywyLDEyOSwxMjksMCwyNDgsMTgsMTQzLDI0NiwxMzcsMTM2LDE0NSwyMTksMTc4LDM5LDI3LDk0LDY0LDkwLDQ3LDE2MywxMTQsNjAsNjMsMTg3LDEzMSwxNDMsMjQ0LDE2LDQyLDEyOCwyMzEsMTE3LDkyLDk4LDIxOSwxNTUsNjIsMTA3LDI1MiwxNywyNDUsNDUsMTYwLDIyNSwxMDMsMTQyLDcyLDM2LDE5MywxNTAsMjM1LDIxNCwxNzUsNjIsMjEyLDU2LDQ1LDksMCw2MCwxMTQsMTA3LDEzNCwyMjgsMjA0LDEzMSwxMzEsMjE0LDk0LDIwMSwxNDgsMTU5LDk5LDEzOSwxODEsMTMsMTE5LDM4LDMwLDEwNywxNjYsMTY1LDIwMyw0MywzNCwyMCwyMDcsMTcxLDMyLDU4LDE2Nyw2MiwxOTYsMTUzLDEwMywyMDQsMjEzLDI0Nyw0OCwxMTEsMjI3LDU5LDk1LDk3LDE5NCwxODcsNTMsMTAsMjQ3LDEwOCw1OCw4NiwyOCwyOSwxMTMsOCwxMTAsMTcxLDIyMCwyNDUsMTEsODIsMjMzLDIyMyw5MSw2OCwxNjYsMTE3LDE3NCwxODcsNjIsNzcsMiwxMjksMTI5LDAsMjM1LDExOCwyLDEwNSwyMzksMjEyLDMwLDEwNCwxNTcsNDEsMTA5LDExLDI0OCwxNTIsMjIsMjM2LDk3LDQwLDE1MywxMzEsMjI4LDUsODYsMTg3LDExMywxMjYsMTQ0LDc2LDE0MSw3OSwxMTAsMjUwLDE0NiwxNTIsNDksNTgsMTU2LDIwMSwxNzYsOTIsMTg5LDIwOSwzMCwxMTIsMTA4LDE3NSwyMDQsMjA0LDI0NywxNjQsNDYsMTI5LDIzOSw5OCwxMjcsNDksMTQ1LDIxOCw2MywxOTMsMTI0LDE3NCwxOCw5OCwyMDEsOTksMTU0LDE2MiwxMzgsNzgsMTU5LDI1MywzLDI0OCwzLDIwOSwzNiwyMzksMTkzLDE1NSwxOTMsNSwxOSwyMzYsMzcsNzgsMTE4LDEzNSwyNTAsMTk5LDcsMTQxLDI0OCwxMjAsMzYsMTM2LDkzLDk4LDE3NCw2MCwxOCwyMTUsOTMsMTc0LDEwNywxNDEsMTE2LDE0NSwxNjcsMjIxLDIxMCwxNjksMjQ3LDY3LDI1NCwyMjIsMTYxLDEzNCw2MywyMjEsOTAsODcsNDIsOTksMjI3LDgxLDE3MywxNTEsMiwxMjksMTI5LDAsMTMzLDIzLDE2OCwxMDMsODMsMjMyLDE0NiwxNjAsMTgxLDIzLDQwLDM4LDIwNCwxMywyMTQsMjAzLDQ5LDQxLDE5NSwyMjcsMTg5LDE4MSw4LDI0MywxMTksMTA2LDc1LDY3LDI1MCwyNTAsMTAsMjM0LDk4LDExOCwyNiwyNTAsMzUsMTIxLDEzMiwxMjQsMTAsNzYsMjYsMTk4LDE2NSwxNTQsMTA4LDE5LDExNyw4OCwyMywxNywxOTIsMTQzLDE4NCwxNzcsMTgxLDE0MSwxNTcsNCwxODUsMjQ4LDE5Myw3NywyMDQsMjQzLDcsMTcwLDI0MCw0LDExMSwxMTMsMTgzLDAsMjcsMTM2LDIwLDE5LDE0OSw3NCwzMywyNDEsMjE4LDEwOCwyMzYsODAsMTcxLDE0OCwxNiwxMTYsOTcsMTA5LDgzLDc0LDg4LDE0NSw5NCwyMzksMTAyLDE5MiwxOSwxMTQsMjA3LDUsMTI4LDUxLDExMSwxNjQsMjM3LDg2LDE1NCw5OSw1MiwxOTcsNjIsNTcsMTgyLDYsMTUyLDI0NSw2MSwxMzcsNTgsMTA1LDE1OSwyLDg0LDEwOSwyLDEyOSwxMjksMCwyMjYsNjcsMTExLDEzMiw5NSw5MSwxMDEsMTc3LDYzLDE4OSw0NCw1MywxOTMsMTg0LDkyLDIzMCwyMjMsOTgsMTMzLDc0LDIwOSw4Niw1Miw3LDY1LDE5NSwyMDYsMTAwLDgxLDE3OCwxNDQsNjUsMTY3LDE1MSw0Miw3OSw4OSwxNDksMTgsMTczLDE4OCwyMSwyNDQsMjUxLDQ5LDIzMCw0MSwxNTAsMTUzLDQ2LDM1LDM4LDIzMSw5OSwxNzQsNTYsMTE1LDMyLDIxNSwyNTMsODUsMTQ3LDEwOCwxOTcsMTQ3LDM0LDIzNiwyMTYsMjIyLDE3Nyw1Nyw5MCwxMzYsMTE0LDIwNyw0OCw0NiwzMSw5MCwyMjAsMTgsNTgsMTQzLDIzOSwxMTEsMjE0LDI3LDk1LDYsMzYsNTMsMjI5LDYyLDEwOCw0NSwzOSwxLDMwLDQ3LDE3OCw1NiwxNjQsMjA2LDU2LDQyLDIwOCw0NiwxOTMsNjEsMzEsMTQ3LDQ1LDE0NywyMywxODcsMjIsNTAsMjU1LDExMSwyMjksMTMyLDE5OSwxNTIsNzUsMTQyLDEzNiwyMDksMTUxLDIsMTI5LDEyOSwwLDE2NSw1NiwyMzIsNzYsNTUsNTcsMjQwLDE1OSw5MiwyMDcsMjIwLDE0MywxMzAsMzAsNTcsMjM0LDI1MSwxNzIsMTcxLDE4MCw1NCwxNTksMjI5LDk2LDI0Niw3MywxMTIsMTQ2LDc1LDE1NywyNDIsMjAxLDE2MSwyMTgsMzcsMTc2LDM1LDE3MCw1MCw5MCwxNDgsMTAyLDE5MSwxOTksMjM5LDE3NCw3OCw3Miw2Nyw4NSwxOTksNDUsMTQ5LDE0NSwxMzIsMTYxLDIxMiwzMywxNTcsNzUsMjE2LDc5LDM5LDIzMywxOCwyMTAsMjU1LDI2LDcyLDIyOSwyMzksNDQsMTIsMTQ3LDE1OCwxNzYsMTkyLDk1LDEyNiwzMiwxNzUsMjMsMjI2LDEzMSwxMzksMTk3LDE3NSwxOTMsNjIsOCwxNTEsMjUyLDY4LDE1NCw5NCw4OSwxODksMTI1LDkwLDMwLDM2LDE3NSw3MywyMzAsMTk0LDEzLDIzMywyNDcsMTIzLDYwLDI0MSw0NywxNzEsNTEsMTg5LDExMiwxMTEsMjEzLDE0MSw4OSw3MCwyNDksMjM2LDYzLDIzNiwxMTAsMTE1LDIwOF1cbn0qL1xufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL05vZGVqc1Byb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = require(\"https\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwc1wiPzEwZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImh0dHBzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiaHR0cHNcIlxuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("(function () {\n  \"use strict\";\n\n  function btoa(str) {\n    var buffer\n      ;\n\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = new Buffer(str.toString(), 'binary');\n    }\n\n    return buffer.toString('base64');\n  }\n\n  module.exports = btoa;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9ub2RlX21vZHVsZXMvYnRvYS9pbmRleC5qcz9mZWMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgZnVuY3Rpb24gYnRvYShzdHIpIHtcbiAgICB2YXIgYnVmZmVyXG4gICAgICA7XG5cbiAgICBpZiAoc3RyIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICBidWZmZXIgPSBzdHI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IG5ldyBCdWZmZXIoc3RyLnRvU3RyaW5nKCksICdiaW5hcnknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuXG4gIG1vZHVsZS5leHBvcnRzID0gYnRvYTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL25vZGVfbW9kdWxlcy9idG9hL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction atob(str) {\n  return new Buffer(str, 'base64').toString('binary');\n}\n\nmodule.exports = atob.atob = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9ub2RlX21vZHVsZXMvYXRvYi9ub2RlLWF0b2IuanM/M2JiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBhdG9iKHN0cikge1xuICByZXR1cm4gbmV3IEJ1ZmZlcihzdHIsICdiYXNlNjQnKS50b1N0cmluZygnYmluYXJ5Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXRvYi5hdG9iID0gYXRvYjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9nb29nbGUvbm9kZV9tb2R1bGVzL2F0b2Ivbm9kZS1hdG9iLmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ]);
});",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "52c91699f84b479f34e9f7abce2255fff",
    "constraints": {
      "node": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MicrosoftProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar microsoftInfo = {\n  clientID: '7e2f3589-4b38-4b1c-a321-c9251de00ef2',\n  redirectURI: location.origin,\n  tokenEndpoint: 'https://login.windows.net/common/oauth2/authorize?',\n  type: 'id_token',\n  scope: 'openid',\n  mode: 'fragment'\n};\n\n/*\nINSTRUCTIONS TO ADD ANOTHER DOMAINS TO BE AUTHORISED\n\nHow to change information (using the rethinkProject2020@outlook.com account):\nuser: rethinkProject2020@outlook.com\npass: 45%asd34!zD2&\n\nother test accounts:\nuser: openidtest10@outlook.com\npass: testOpenID10\n\n1º https://portal.azure.com/ -> example\n2º go to the left side bar -> more services -> Azure active directory\n3º open a small box on the rigth saying \"App registrations\".\n4º on right of the page -> \"rethink Project\" -> redirect URIs\n5º Add the URI to be authorised for the requests.\n\nTO ADD MORE USERS THAT ARE ALLOW TO MADE REQUEST (maybe because is a trial account, it is required  to add users to the list of the users that can make requests for the OIDC )\n\n1º https://portal.azure.com/ -> example\n2º go to the left side bar -> more services -> Azure active directory\n3º open a small box on the middle saying \"Users and groups\".\n4º on right of the page -> \"All users\" -> top button \" + add\"\n5º fill with the information and click create\n*/\n\n/**\n* Identity Provider Proxy\n*/\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    return new Promise(function (resolve, reject) {\n\n      var idToken = JSON.parse(atob(assertion));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n\n    //start the login phase\n    //TODO later should be defined a better approach\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n        var m = microsoftInfo;\n\n        //let requestUrl = 'https://login.windows.net/common/oauth2/authorize?response_type=id_token&client_id=7e2f3589-4b38-4b1c-a321-c9251de00ef2&scope=openid&nonce=7362CAEA-9CA5-4B43-9BA3-34D7C303EBA7&response_mode=fragment&redirect_uri=' + location.origin;\n\n        var requestUrl = m.tokenEndpoint + 'response_type=' + m.type + '&client_id=' + m.clientID + '&scope=' + m.scope + '&nonce=' + contents + '&response_mode=' + m.mode + '&redirect_uri=' + m.redirectURI;\n\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n      } else {\n\n        //later verify the token and use the information from the JWT\n\n        var token = hint.split('/');\n        var tokenSplited = token[3];\n\n        var hintSplited = tokenSplited.split('.');\n\n        var idToken = JSON.parse(atob(hintSplited[1]));\n\n        var idpBundle = { domain: 'microsoft.com', protocol: 'OIDC' };\n        var identityBundle = { assertion: hintSplited[1], idp: idpBundle, infoToken: idToken };\n        resolve(identityBundle);\n      }\n    });\n  }\n};\n\n/**\n* Identity Provider Proxy Protocol Stub\n*/\n\nvar MicrosoftProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function MicrosoftProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, MicrosoftProxyStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === 'domain-idp://microsoft.com') {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(MicrosoftProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return MicrosoftProxyStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'MicrosoftProxyStub',\n    instance: new MicrosoftProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L21pY3Jvc29mdC9NaWNyb3NvZnRQcm94eVN0dWIuaWRwLmpzPzZlMjciXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJtaWNyb3NvZnRJbmZvIiwiY2xpZW50SUQiLCJyZWRpcmVjdFVSSSIsImxvY2F0aW9uIiwib3JpZ2luIiwidG9rZW5FbmRwb2ludCIsInR5cGUiLCJzY29wZSIsIm1vZGUiLCJpZHAiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaWRUb2tlbiIsIkpTT04iLCJwYXJzZSIsImF0b2IiLCJpZGVudGl0eSIsImVtYWlsIiwiY29udGVudHMiLCJub25jZSIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiaGludCIsIm0iLCJyZXF1ZXN0VXJsIiwibmFtZSIsImxvZ2luVXJsIiwidG9rZW4iLCJzcGxpdCIsInRva2VuU3BsaXRlZCIsImhpbnRTcGxpdGVkIiwiaWRwQnVuZGxlIiwiZG9tYWluIiwicHJvdG9jb2wiLCJpZGVudGl0eUJ1bmRsZSIsImluZm9Ub2tlbiIsIk1pY3Jvc29mdFByb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJfdGhpcyIsIm1lc3NhZ2VCdXMiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJwYXJhbXMiLCJib2R5IiwibWV0aG9kIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInZhbHVlIiwicmVwbHlNZXNzYWdlIiwiZXJyb3IiLCJtZXNzYWdlIiwiaWQiLCJmcm9tIiwiY29kZSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiY29uc29sZSIsImxvZyIsIl9zdGF0ZSIsImRlc2MiLCJ1cmwiLCJpbnN0YW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBK013QkEsUTs7OztBQS9NeEIsSUFBSUMsZ0JBQWdC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LElBQVo7O0FBRUFxQixjQUFRQyxHQUFSLENBQVksOEJBQVosRUFBNENWLEtBQTVDOztBQUVBWixZQUFNdUIsTUFBTixHQUFlWCxLQUFmOztBQUVBLFVBQUlULE1BQU07QUFDUnZDLGNBQU0sUUFERTtBQUVScUQsY0FBTWpCLE1BQU1ILG1CQUZKO0FBR1JPLFlBQUlKLE1BQU1ILG1CQUFOLEdBQTRCLFNBSHhCO0FBSVJXLGNBQU07QUFDSkksaUJBQU9BO0FBREg7QUFKRSxPQUFWOztBQVNBLFVBQUlRLE1BQUosRUFBWTtBQUNWakIsWUFBSUssSUFBSixDQUFTZ0IsSUFBVCxHQUFnQkosTUFBaEI7QUFDRDs7QUFFRHBCLFlBQU1DLFVBQU4sQ0FBaUJrQixXQUFqQixDQUE2QmhCLEdBQTdCO0FBQ0Q7Ozs7OztBQUlIOztBQUVBOzs7Ozs7Ozs7QUFPZSxTQUFTOUMsUUFBVCxDQUFrQm9FLEdBQWxCLEVBQXVCM0IsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTGQsVUFBTSxvQkFERDtBQUVMeUMsY0FBVSxJQUFJOUIsa0JBQUosQ0FBdUI2QixHQUF2QixFQUE0QjNCLEdBQTVCLEVBQWlDQyxNQUFqQztBQUZMLEdBQVA7QUFJRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1pY3Jvc29mdEluZm8gPSB7XG4gIGNsaWVudElEOiAgICAgICAgICAgICAgJzdlMmYzNTg5LTRiMzgtNGIxYy1hMzIxLWM5MjUxZGUwMGVmMicsXG4gIHJlZGlyZWN0VVJJOiAgICAgICAgICAgbG9jYXRpb24ub3JpZ2luLFxuICB0b2tlbkVuZHBvaW50OiAgICAgICAgICdodHRwczovL2xvZ2luLndpbmRvd3MubmV0L2NvbW1vbi9vYXV0aDIvYXV0aG9yaXplPycsXG4gIHR5cGU6ICAgICAgICAgICAgICAgICAgJ2lkX3Rva2VuJyxcbiAgc2NvcGU6ICAgICAgICAgICAgICAgICAnb3BlbmlkJyxcbiAgbW9kZTogICAgICAgICAgICAgICAgICAnZnJhZ21lbnQnXG59O1xuXG4vKlxuSU5TVFJVQ1RJT05TIFRPIEFERCBBTk9USEVSIERPTUFJTlMgVE8gQkUgQVVUSE9SSVNFRFxuXG5Ib3cgdG8gY2hhbmdlIGluZm9ybWF0aW9uICh1c2luZyB0aGUgcmV0aGlua1Byb2plY3QyMDIwQG91dGxvb2suY29tIGFjY291bnQpOlxudXNlcjogcmV0aGlua1Byb2plY3QyMDIwQG91dGxvb2suY29tXG5wYXNzOiA0NSVhc2QzNCF6RDImXG5cbm90aGVyIHRlc3QgYWNjb3VudHM6XG51c2VyOiBvcGVuaWR0ZXN0MTBAb3V0bG9vay5jb21cbnBhc3M6IHRlc3RPcGVuSUQxMFxuXG4xwrogaHR0cHM6Ly9wb3J0YWwuYXp1cmUuY29tLyAtPiBleGFtcGxlXG4ywrogZ28gdG8gdGhlIGxlZnQgc2lkZSBiYXIgLT4gbW9yZSBzZXJ2aWNlcyAtPiBBenVyZSBhY3RpdmUgZGlyZWN0b3J5XG4zwrogb3BlbiBhIHNtYWxsIGJveCBvbiB0aGUgcmlndGggc2F5aW5nIFwiQXBwIHJlZ2lzdHJhdGlvbnNcIi5cbjTCuiBvbiByaWdodCBvZiB0aGUgcGFnZSAtPiBcInJldGhpbmsgUHJvamVjdFwiIC0+IHJlZGlyZWN0IFVSSXNcbjXCuiBBZGQgdGhlIFVSSSB0byBiZSBhdXRob3Jpc2VkIGZvciB0aGUgcmVxdWVzdHMuXG5cblRPIEFERCBNT1JFIFVTRVJTIFRIQVQgQVJFIEFMTE9XIFRPIE1BREUgUkVRVUVTVCAobWF5YmUgYmVjYXVzZSBpcyBhIHRyaWFsIGFjY291bnQsIGl0IGlzIHJlcXVpcmVkICB0byBhZGQgdXNlcnMgdG8gdGhlIGxpc3Qgb2YgdGhlIHVzZXJzIHRoYXQgY2FuIG1ha2UgcmVxdWVzdHMgZm9yIHRoZSBPSURDIClcblxuMcK6IGh0dHBzOi8vcG9ydGFsLmF6dXJlLmNvbS8gLT4gZXhhbXBsZVxuMsK6IGdvIHRvIHRoZSBsZWZ0IHNpZGUgYmFyIC0+IG1vcmUgc2VydmljZXMgLT4gQXp1cmUgYWN0aXZlIGRpcmVjdG9yeVxuM8K6IG9wZW4gYSBzbWFsbCBib3ggb24gdGhlIG1pZGRsZSBzYXlpbmcgXCJVc2VycyBhbmQgZ3JvdXBzXCIuXG40wrogb24gcmlnaHQgb2YgdGhlIHBhZ2UgLT4gXCJBbGwgdXNlcnNcIiAtPiB0b3AgYnV0dG9uIFwiICsgYWRkXCJcbjXCuiBmaWxsIHdpdGggdGhlIGluZm9ybWF0aW9uIGFuZCBjbGljayBjcmVhdGVcbiovXG5cbi8qKlxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eVxuKi9cbmxldCBpZHAgPSB7XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoYXNzZXJ0aW9uKSk7XG5cbiAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZX0pO1xuXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcblxuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgLy9UT0RPIGxhdGVyIHNob3VsZCBiZSBkZWZpbmVkIGEgYmV0dGVyIGFwcHJvYWNoXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKCFoaW50KSB7XG4gICAgICAgIGxldCBtID0gbWljcm9zb2Z0SW5mbztcblxuICAgICAgICAvL2xldCByZXF1ZXN0VXJsID0gJ2h0dHBzOi8vbG9naW4ud2luZG93cy5uZXQvY29tbW9uL29hdXRoMi9hdXRob3JpemU/cmVzcG9uc2VfdHlwZT1pZF90b2tlbiZjbGllbnRfaWQ9N2UyZjM1ODktNGIzOC00YjFjLWEzMjEtYzkyNTFkZTAwZWYyJnNjb3BlPW9wZW5pZCZub25jZT03MzYyQ0FFQS05Q0E1LTRCNDMtOUJBMy0zNEQ3QzMwM0VCQTcmcmVzcG9uc2VfbW9kZT1mcmFnbWVudCZyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLm9yaWdpbjtcblxuICAgICAgICBsZXQgcmVxdWVzdFVybCA9IG0udG9rZW5FbmRwb2ludCArICdyZXNwb25zZV90eXBlPScgKyBtLnR5cGUgKyAnJmNsaWVudF9pZD0nICsgbS5jbGllbnRJRCArICcmc2NvcGU9JyArIG0uc2NvcGUgKyAnJm5vbmNlPScgKyAgY29udGVudHMgKyAnJnJlc3BvbnNlX21vZGU9JyArIG0ubW9kZSArICcmcmVkaXJlY3RfdXJpPScgKyAgbS5yZWRpcmVjdFVSSTtcblxuICAgICAgICByZWplY3Qoe25hbWU6ICdJZFBMb2dpbkVycm9yJywgbG9naW5Vcmw6IHJlcXVlc3RVcmx9KTtcblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICAvL2xhdGVyIHZlcmlmeSB0aGUgdG9rZW4gYW5kIHVzZSB0aGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgSldUXG5cbiAgICAgICAgbGV0IHRva2VuID0gaGludC5zcGxpdCgnLycpO1xuICAgICAgICBsZXQgdG9rZW5TcGxpdGVkID0gdG9rZW5bM107XG5cbiAgICAgICAgbGV0IGhpbnRTcGxpdGVkID0gdG9rZW5TcGxpdGVkLnNwbGl0KCcuJyk7XG5cbiAgICAgICAgbGV0IGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaGludFNwbGl0ZWRbMV0pKTtcblxuICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ21pY3Jvc29mdC5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcbiAgICAgICAgbGV0IGlkZW50aXR5QnVuZGxlID0ge2Fzc2VydGlvbjogaGludFNwbGl0ZWRbMV0sIGlkcDogaWRwQnVuZGxlLCBpbmZvVG9rZW46IGlkVG9rZW59O1xuICAgICAgICByZXNvbHZlKGlkZW50aXR5QnVuZGxlKTtcblxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxuKi9cbmNsYXNzIE1pY3Jvc29mdFByb3h5U3R1YiB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcbiAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7XG4gICBfdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9taWNyb3NvZnQuY29tJykge1xuXG4gICAgICAgX3RoaXMucmVxdWVzdFRvSWRwKG1zZyk7XG4gICAgIH1cbiAgIH0pO1xuICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2NyZWF0ZWQnKTtcbiB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuICAqXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xuICAqL1xuICByZXF1ZXN0VG9JZHAobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xuXG4gICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgaWRwLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuICAgICAgICBpZHAudmFsaWRhdGVBc3NlcnRpb24ocGFyYW1zLmFzc2VydGlvbiwgcGFyYW1zLm9yaWdpbikudGhlbihcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKlxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxuICAqL1xuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50byxcbiAgICAgICAgICAgICAgICAgICBib2R5OiB7Y29kZTogMjAwLCB2YWx1ZTogdmFsdWV9fTtcblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cblxuICBfc2VuZFN0YXR1cyh2YWx1ZSwgcmVhc29uKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuc2VuZFN0YXR1c10gJywgdmFsdWUpO1xuXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICBsZXQgbXNnID0ge1xuICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVhc29uKSB7XG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuICAgIH1cblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgfVxuXG59XG5cbi8vIGV4cG9ydCBkZWZhdWx0IElkcFByb3h5UHJvdG9TdHViO1xuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdNaWNyb3NvZnRQcm94eVN0dWInLFxuICAgIGluc3RhbmNlOiBuZXcgTWljcm9zb2Z0UHJveHlTdHViKHVybCwgYnVzLCBjb25maWcpXG4gIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L21pY3Jvc29mdC9NaWNyb3NvZnRQcm94eVN0dWIuaWRwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "microsoft.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy for microsoft idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "546e0f62b1aa6b322a17c85cf925e1dba",
    "constraints": {
      "browser": true
    },
    "objectName": "microsoft.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsForBrowserProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\n//const https = require('https');\n//let btoa = require('btoa');\n//let atob = require('atob');\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJSFAKEBrowser:assertion', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n\n      // atob may need to be required for nodejs\n      // var atob = require('atob');\n\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      var idTokenSplited = content.tokenID.split('.');\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertionFAKE_BROWSER:contents]', contents);\n    console.log('[IDPROXY.generateAssertionFAKE_BROWSER:origin]', origin);\n    console.log('[IDPROXY.generateAssertionFAKE_BROWSER:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      console.log('generateMessageResponse:');\n      return resolve(generateMessageResponse);\n    });\n  }\n\n  /**\n  * Identity Provider Proxy Protocol Stub\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('FAKE NODEJS constructor');\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://nodejs-idp') {\n        _this.requestToIdp(msg);\n      }\n    });\n\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n      * This function receives a message and a value. It replies the value to the sender of the message received\n      *\n      * @param  {message}   message received\n      * @param  {value}     value to include in the new message to send\n      */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[NodeJS.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvRmFrZU5vZGVqc0ZvckJyb3dzZXJQcm94eVN0dWIuaWRwLmpzPzZhYmYiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJpZGVudGl0aWVzIiwibklkZW50aXR5IiwiZ29vZ2xlSW5mbyIsImNsaWVudFNlY3JldCIsImNsaWVudElEIiwicmVkaXJlY3RVUkkiLCJpc3N1ZXIiLCJ0b2tlbkVuZHBvaW50Iiwiandrc1VyaSIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsInVzZXJpbmZvIiwidG9rZW5JbmZvIiwiYWNjZXNzVHlwZSIsInR5cGUiLCJzY29wZSIsInN0YXRlIiwiaWRwIiwidmFsaWRhdGVBc3NlcnRpb24iLCJhc3NlcnRpb24iLCJvcmlnaW4iLCJjb25zb2xlIiwibG9nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkZWNvZGVkQ29udGVudCIsImF0b2IiLCJjb250ZW50IiwiSlNPTiIsInBhcnNlIiwiaWRUb2tlblNwbGl0ZWQiLCJ0b2tlbklEIiwic3BsaXQiLCJpZFRva2VuIiwiaWRlbnRpdHkiLCJlbWFpbCIsImNvbnRlbnRzIiwibm9uY2UiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImhpbnQiLCJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSIsIk5vZGVqc1Byb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJfdGhpcyIsIm1lc3NhZ2VCdXMiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJwYXJhbXMiLCJib2R5IiwibWV0aG9kIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInZhbHVlIiwicmVwbHlNZXNzYWdlIiwiZXJyb3IiLCJtZXNzYWdlIiwiaWQiLCJmcm9tIiwiY29kZSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyIsInVybCIsIm5h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QSxVQUFJVCxNQUFNO0FBQ1JuQyxjQUFNLFFBREU7QUFFUmlELGNBQU1qQixNQUFNSCxtQkFGSjtBQUdSTyxZQUFJSixNQUFNSCxtQkFBTixHQUE0QixTQUh4QjtBQUlSVyxjQUFNO0FBQ0pJLGlCQUFPQTtBQURIO0FBSkUsT0FBVjs7QUFTQSxVQUFJUSxNQUFKLEVBQVk7QUFDVmpCLFlBQUlLLElBQUosQ0FBU2MsSUFBVCxHQUFnQkYsTUFBaEI7QUFDRDs7QUFFRHBCLFlBQU1DLFVBQU4sQ0FBaUJrQixXQUFqQixDQUE2QmhCLEdBQTdCO0FBQ0Q7Ozs7OztBQUdIOzs7Ozs7Ozs7QUFPZSxTQUFTakQsUUFBVCxDQUFrQnFFLEdBQWxCLEVBQXVCekIsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTHlCLFVBQU0saUJBREQ7QUFFTEMsY0FBVSxJQUFJN0IsZUFBSixDQUFvQjJCLEdBQXBCLEVBQXlCekIsR0FBekIsRUFBOEJDLE1BQTlCO0FBRkwsR0FBUDtBQUlEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaWRlbnRpdGllcyA9IHt9O1xubGV0IG5JZGVudGl0eSA9IDA7XG4vL2ltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcbi8vbGV0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XG4vL2NvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcbi8vbGV0IGJ0b2EgPSByZXF1aXJlKCdidG9hJyk7XG4vL2xldCBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xuXG5sZXQgZ29vZ2xlSW5mbyA9IHtcbiAgY2xpZW50U2VjcmV0OiAgICAgICAgICAnWHg0ckt1Y2I1WllUYVhsY1pYOUhMZlpXJyxcbiAgY2xpZW50SUQ6ICAgICAgICAgICAgICAnODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICAnaHR0cHM6Ly9sb2NhbGhvc3QnLFxuICBpc3N1ZXI6ICAgICAgICAgICAgICAgICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20nLFxuICB0b2tlbkVuZHBvaW50OiAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjQvdG9rZW4/JyxcbiAgandrc1VyaTogICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzPycsXG4gIGF1dGhvcmlzYXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoPycsXG4gIHVzZXJpbmZvOiAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My91c2VyaW5mbz9hY2Nlc3NfdG9rZW49JyxcbiAgdG9rZW5JbmZvOiAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0nLFxuICBhY2Nlc3NUeXBlOiAgICAgICAgICAgICdvZmZsaW5lJyxcbiAgdHlwZTogICAgICAgICAgICAgICAgICAnY29kZScsXG4gIHNjb3BlOiAgICAgICAgICAgICAgICAgJ29wZW5pZCUyMGVtYWlsJTIwcHJvZmlsZScsXG4gIHN0YXRlOiAgICAgICAgICAgICAgICAgJ3N0YXRlJ1xufTtcblxuXG5sZXQgaWRwID0ge1xuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSB0aGUgaW1wbGVtZW50YXRpb25cbiAgKlxuICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gICAgICAgT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdFxuICAqL1xuICB2YWxpZGF0ZUFzc2VydGlvbjogKGFzc2VydGlvbiwgb3JpZ2luKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHlOT0RFSlNGQUtFQnJvd3Nlcjphc3NlcnRpb24nLCBhc3NlcnRpb24pO1xuXG4gICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZFxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICAvLyBhdG9iIG1heSBuZWVkIHRvIGJlIHJlcXVpcmVkIGZvciBub2RlanNcbiAgICAgIC8vIHZhciBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xuXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XG4gICAgICBsZXQgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQpO1xuICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gY29udGVudC50b2tlbklELnNwbGl0KCcuJyk7XG4gICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xuXG4gICAgICByZXNvbHZlKHtpZGVudGl0eTogaWRUb2tlbi5lbWFpbCwgY29udGVudHM6IGlkVG9rZW4ubm9uY2V9KTtcblxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7Y29udGVudHN9IFRoZSBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXG4gICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyXG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cbiAgKi9cbiAgZ2VuZXJhdGVBc3NlcnRpb246IChjb250ZW50cywgb3JpZ2luLCBoaW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRV9CUk9XU0VSOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb25GQUtFX0JST1dTRVI6b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRV9CUk9XU0VSOmhpbnRdJywgaGludCk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZTonKTtcbiAgICAgIHJldHVybiByZXNvbHZlKGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlKTtcblxuICAgIH0pO1xuXG4gIH1cblxufVxuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxuKi9cbmNsYXNzIE5vZGVqc1Byb3h5U3R1YiB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgIGNvbnNvbGUubG9nKCdGQUtFIE5PREVKUyBjb25zdHJ1Y3RvcicpO1xuICAgbGV0IF90aGlzID0gdGhpcztcbiAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1cztcbiAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xuXG4gICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcbiAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9ub2RlanMtaWRwJykge1xuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcbiAgICAgfVxuICAgfSk7XG5cbiAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cbiAgKlxuICAqIEBwYXJhbSB7bWVzc2FnZX0gIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2VCdXNcbiAgKi9cbiAgcmVxdWVzdFRvSWRwKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcblxuICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XG4gICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XG4gICAgICAgIGlkcC5nZW5lcmF0ZUFzc2VydGlvbihwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgaWRwLnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXG5cbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4vKipcbiAgKiBUaGlzIGZ1bmN0aW9uIHJlY2VpdmVzIGEgbWVzc2FnZSBhbmQgYSB2YWx1ZS4gSXQgcmVwbGllcyB0aGUgdmFsdWUgdG8gdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSByZWNlaXZlZFxuICAqXG4gICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXG4gICogQHBhcmFtICB7dmFsdWV9ICAgICB2YWx1ZSB0byBpbmNsdWRlIGluIHRoZSBuZXcgbWVzc2FnZSB0byBzZW5kXG4gICovXG4gIHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBtZXNzYWdlID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgICAgICAgICAgICAgIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZX19O1xuXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgfVxuXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgY29uc29sZS5sb2coJ1tOb2RlSlMuc2VuZFN0YXR1c10gJywgdmFsdWUpO1xuXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICBsZXQgbXNnID0ge1xuICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVhc29uKSB7XG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuICAgIH1cblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgfVxufVxuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdOb2RlanNQcm94eVN0dWInLFxuICAgIGluc3RhbmNlOiBuZXcgTm9kZWpzUHJveHlTdHViKHVybCwgYnVzLCBjb25maWcpXG4gIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvRmFrZU5vZGVqc0ZvckJyb3dzZXJQcm94eVN0dWIuaWRwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy for browser idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5d2606fd332d71526cafc4c13d80437b4",
    "constraints": {
      "browser": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\n//const https = require('https');\nvar btoa = __webpack_require__(1);\nvar atob = __webpack_require__(2);\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJSFAKE:assertion', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      var idTokenSplited = content.tokenID.split('.');\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertionFAKE:contents]', contents);\n    console.log('[IDPROXY.generateAssertionFAKE:origin]', origin);\n    console.log('[IDPROXY.generateAssertionFAKE:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      console.log('generateMessageResponse:');\n      return resolve(generateMessageResponse);\n    });\n  }\n\n  /**\n  * Identity Provider Proxy Protocol Stub\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('FAKE NODEJS constructor');\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://nodejs-idp') {\n        _this.requestToIdp(msg);\n      }\n    });\n\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[NodeJS.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}\n\nvar generateMessageResponse = { assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n  idp: {\n    domain: 'nodejs-idp',\n    protocol: 'OIDC' },\n  info: {\n    accessToken: 'ya29.GlsbBalGJJmVi_N5IDyqMI3JxkO5eLV4333I93eQBCpNAofEqtU4UkWHh8drVlrViVTqt6Jk3P86_CDt4sKVh0G9AbTk1rVW3MAxcFhEUFE-KMXdDK_KsMf6fNQk',\n    idToken: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDMxNTQ0OTE3MTEyNzUxMjYzNDIiLCJlbWFpbCI6InRlc3RhbmR0aGluazMyMUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6Ii03dmE2M1VvdWVEMkx6S1czRl82OFEiLCJub25jZSI6Ils0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0iLCJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJpYXQiOjE1MTI2NDYwODAsImV4cCI6MTUxMjY0OTY4MH0.teI1m90VrAEgKtv3PIG7J6sAhd_QY7mi3QsWLYbakWJqL6f4gmFyddEwqKxGY4x7sMLtj-Uc0ZKuWX_qE7K6iwjhMlzbTHK8LehyILOCY7Xsuoa6MqfT1Wp8Bg0TfJHuOnbZ_ymxPMQKOkfZiPVS5iqsO3bneQzTr0JbqtQ7xWsJS6nz-iA6rEdKjfC70amW0iSI--lWmX7sZaTeZc7ug4r4Z5-zLF39zwQPOwEQAlT-ZA_y1gO_4VueDeZmWmVuz2kJO_91h6qE5nZOtwWVuCrdw-9Iaw7z2DPes_j5RD8lDovR6JM0dj2JqzL9VpTcmF27AJsc1jhQLsLWblcxZw',\n    refreshToken: '1/6cCGEWyzx2uO2bH2F1A8v6KDTG4rP0CXc-XUQ12-U0o',\n    tokenType: 'Bearer',\n    infoToken: {\n      sub: '103154491711275126342',\n      name: 'test think',\n      given_name: 'test',\n      family_name: 'think',\n      picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      email: 'testandthink321@gmail.com',\n      email_verified: true,\n      locale: 'en' },\n    tokenIDJSON: { 'azp': '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      aud: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      sub: '103154491711275126342',\n      email: 'testandthink321@gmail.com',\n      email_verified: 'true',\n      at_hash: '-7va63UoueD2LzKW3F_68Q',\n      nonce: '[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1]',\n      iss: 'https://accounts.nodejs-idp',\n      iat: '1512646080',\n      exp: '1512649680',\n      alg: 'RS256',\n      kid: '477d17972d2a001074d586b588976d234296801e' },\n    expires: '1512649680',\n    email: 'testandthink321@gmail.com' },\n  infoToken: {\n    sub: '103154491711275126342',\n    name: 'test think',\n    given_name: 'test',\n    family_name: 'think',\n    picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n    email: 'testandthink321@gmail.com',\n    email_verified: true,\n    locale: 'en' },\n  identity: 'user://nodejs-idp/testandthink321@gmail.com',\n  messageInfo: {\n    userProfile: {\n      username: 'testandthink321@gmail.com',\n      cn: 'testandthink321',\n      avatar: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      locale: 'en',\n      userURL: 'user://nodejs-idp/testandthink321@gmail.com' },\n    idp: 'nodejs-idp',\n    assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n    expires: '1512649680' }\n  /*\n  keyPair:{\n  public:[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1],\n  private:[48,130,4,191,2,1,0,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,4,130,4,169,48,130,4,165,2,1,0,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1,2,130,1,0,103,244,137,118,116,82,14,203,102,107,253,88,12,199,222,60,243,136,86,157,74,224,190,53,113,57,157,250,49,130,96,31,252,136,152,70,143,17,215,96,103,51,18,35,141,212,210,205,9,216,83,70,245,71,138,119,112,229,164,176,9,37,81,161,193,154,68,249,115,106,201,6,12,225,144,126,141,210,141,242,128,159,221,163,222,21,233,230,167,206,59,24,250,233,81,122,102,26,6,233,72,133,47,77,155,238,86,6,139,24,131,163,179,112,48,247,142,6,207,204,173,223,140,199,150,95,123,152,202,155,131,238,62,96,133,4,217,51,121,30,38,178,189,216,44,35,241,93,7,62,90,111,216,66,209,243,128,234,141,84,135,181,13,38,220,114,245,240,178,95,220,206,11,186,234,213,66,121,83,68,89,75,46,183,145,183,147,160,215,118,198,125,181,146,30,251,58,87,47,209,237,97,24,47,179,6,110,242,99,150,226,148,198,174,146,101,213,87,178,10,223,105,18,56,53,22,212,158,170,176,51,86,145,125,124,44,9,85,19,144,246,170,78,124,30,32,12,166,174,139,77,63,173,82,10,153,2,129,129,0,248,18,143,246,137,136,145,219,178,39,27,94,64,90,47,163,114,60,63,187,131,143,244,16,42,128,231,117,92,98,219,155,62,107,252,17,245,45,160,225,103,142,72,36,193,150,235,214,175,62,212,56,45,9,0,60,114,107,134,228,204,131,131,214,94,201,148,159,99,139,181,13,119,38,30,107,166,165,203,43,34,20,207,171,32,58,167,62,196,153,103,204,213,247,48,111,227,59,95,97,194,187,53,10,247,108,58,86,28,29,113,8,110,171,220,245,11,82,233,223,91,68,166,117,174,187,62,77,2,129,129,0,235,118,2,105,239,212,30,104,157,41,109,11,248,152,22,236,97,40,153,131,228,5,86,187,113,126,144,76,141,79,110,250,146,152,49,58,156,201,176,92,189,209,30,112,108,175,204,204,247,164,46,129,239,98,127,49,145,218,63,193,124,174,18,98,201,99,154,162,138,78,159,253,3,248,3,209,36,239,193,155,193,5,19,236,37,78,118,135,250,199,7,141,248,120,36,136,93,98,174,60,18,215,93,174,107,141,116,145,167,221,210,169,247,67,254,222,161,134,63,221,90,87,42,99,227,81,173,151,2,129,129,0,133,23,168,103,83,232,146,160,181,23,40,38,204,13,214,203,49,41,195,227,189,181,8,243,119,106,75,67,250,250,10,234,98,118,26,250,35,121,132,124,10,76,26,198,165,154,108,19,117,88,23,17,192,143,184,177,181,141,157,4,185,248,193,77,204,243,7,170,240,4,111,113,183,0,27,136,20,19,149,74,33,241,218,108,236,80,171,148,16,116,97,109,83,74,88,145,94,239,102,192,19,114,207,5,128,51,111,164,237,86,154,99,52,197,62,57,182,6,152,245,61,137,58,105,159,2,84,109,2,129,129,0,226,67,111,132,95,91,101,177,63,189,44,53,193,184,92,230,223,98,133,74,209,86,52,7,65,195,206,100,81,178,144,65,167,151,42,79,89,149,18,173,188,21,244,251,49,230,41,150,153,46,35,38,231,99,174,56,115,32,215,253,85,147,108,197,147,34,236,216,222,177,57,90,136,114,207,48,46,31,90,220,18,58,143,239,111,214,27,95,6,36,53,229,62,108,45,39,1,30,47,178,56,164,206,56,42,208,46,193,61,31,147,45,147,23,187,22,50,255,111,229,132,199,152,75,142,136,209,151,2,129,129,0,165,56,232,76,55,57,240,159,92,207,220,143,130,30,57,234,251,172,171,180,54,159,229,96,246,73,112,146,75,157,242,201,161,218,37,176,35,170,50,90,148,102,191,199,239,174,78,72,67,85,199,45,149,145,132,161,212,33,157,75,216,79,39,233,18,210,255,26,72,229,239,44,12,147,158,176,192,95,126,32,175,23,226,131,139,197,175,193,62,8,151,252,68,154,94,89,189,125,90,30,36,175,73,230,194,13,233,247,123,60,241,47,171,51,189,112,111,213,141,89,70,249,236,63,236,110,115,208]\n  }*/\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvRmFrZU5vZGVqc1Byb3h5U3R1Yi5pZHAuanM/MTU2ZiJdLCJuYW1lcyI6WyJhY3RpdmF0ZSIsImlkZW50aXRpZXMiLCJuSWRlbnRpdHkiLCJidG9hIiwicmVxdWlyZSIsImF0b2IiLCJnb29nbGVJbmZvIiwiY2xpZW50U2VjcmV0IiwiY2xpZW50SUQiLCJyZWRpcmVjdFVSSSIsImlzc3VlciIsInRva2VuRW5kcG9pbnQiLCJqd2tzVXJpIiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidXNlcmluZm8iLCJ0b2tlbkluZm8iLCJhY2Nlc3NUeXBlIiwidHlwZSIsInNjb3BlIiwic3RhdGUiLCJpZHAiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsIm9yaWdpbiIsImNvbnNvbGUiLCJsb2ciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRlY29kZWRDb250ZW50IiwiY29udGVudCIsIkpTT04iLCJwYXJzZSIsImlkVG9rZW5TcGxpdGVkIiwidG9rZW5JRCIsInNwbGl0IiwiaWRUb2tlbiIsImlkZW50aXR5IiwiZW1haWwiLCJjb250ZW50cyIsIm5vbmNlIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwiZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UiLCJOb2RlanNQcm94eVN0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiX3RoaXMiLCJtZXNzYWdlQnVzIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwicGFyYW1zIiwiYm9keSIsIm1ldGhvZCIsInVzZXJuYW1lSGludCIsInRoZW4iLCJ2YWx1ZSIsInJlcGx5TWVzc2FnZSIsImVycm9yIiwibWVzc2FnZSIsImlkIiwiZnJvbSIsImNvZGUiLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsIl9zdGF0ZSIsImRlc2MiLCJ1cmwiLCJuYW1lIiwiaW5zdGFuY2UiLCJkb21haW4iLCJwcm90b2NvbCIsImluZm8iLCJhY2Nlc3NUb2tlbiIsInJlZnJlc2hUb2tlbiIsInRva2VuVHlwZSIsImluZm9Ub2tlbiIsInN1YiIsImdpdmVuX25hbWUiLCJmYW1pbHlfbmFtZSIsInBpY3R1cmUiLCJlbWFpbF92ZXJpZmllZCIsImxvY2FsZSIsInRva2VuSURKU09OIiwiYXVkIiwiYXRfaGFzaCIsImlzcyIsImlhdCIsImV4cCIsImFsZyIsImtpZCIsImV4cGlyZXMiLCJtZXNzYWdlSW5mbyIsInVzZXJQcm9maWxlIiwidXNlcm5hbWUiLCJjbiIsImF2YXRhciIsInVzZXJVUkwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQXVMd0JBLFE7Ozs7QUF2THhCLElBQUlDLGFBQWEsRUFBakI7QUFDQSxJQUFJQyxZQUFZLENBQWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsT0FBTyxtQkFBQUMsQ0FBUSxDQUFSLENBQVg7QUFDQSxJQUFJQyxPQUFPLG1CQUFBRCxDQUFRLENBQVIsQ0FBWDs7QUFFQSxJQUFJRSxhQUFhO0FBQ2ZDLGdCQUF1QiwwQkFEUjtBQUVmQyxZQUF1QiwwRUFGUjtBQUdmQyxlQUF1QixtQkFIUjtBQUlmQyxVQUF1Qiw2QkFKUjtBQUtmQyxpQkFBdUIsNkNBTFI7QUFNZkMsV0FBdUIsNkNBTlI7QUFPZkMseUJBQXVCLCtDQVBSO0FBUWZDLFlBQXVCLDZEQVJSO0FBU2ZDLGFBQXVCLDBEQVRSO0FBVWZDLGNBQXVCLFNBVlI7QUFXZkMsUUFBdUIsTUFYUjtBQVlmQyxTQUF1QiwwQkFaUjtBQWFmQyxTQUF1QjtBQWJSLENBQWpCOztBQWtCQSxJQUFJQyxNQUFNOztBQUVSOzs7Ozs7OztBQVFBQyxxQkFBbUIsMkJBQUNDLFNBQUQsRUFBWUMsTUFBWixFQUF1QjtBQUN4Q0MsWUFBUUMsR0FBUixDQUFZLDRDQUFaLEVBQTBESCxTQUExRDs7QUFFQTtBQUNBLFdBQU8sSUFBSUksT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBaUJDLE1B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bnRpdHkgPSAwO1xuLy9pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XG4vL2xldCBmZXRjaCA9IHJlcXVpcmUoXCJub2RlLWZldGNoXCIpO1xuLy9jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XG5sZXQgYnRvYSA9IHJlcXVpcmUoJ2J0b2EnKTtcbmxldCBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xuXG5sZXQgZ29vZ2xlSW5mbyA9IHtcbiAgY2xpZW50U2VjcmV0OiAgICAgICAgICAnWHg0ckt1Y2I1WllUYVhsY1pYOUhMZlpXJyxcbiAgY2xpZW50SUQ6ICAgICAgICAgICAgICAnODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICAnaHR0cHM6Ly9sb2NhbGhvc3QnLFxuICBpc3N1ZXI6ICAgICAgICAgICAgICAgICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20nLFxuICB0b2tlbkVuZHBvaW50OiAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjQvdG9rZW4/JyxcbiAgandrc1VyaTogICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzPycsXG4gIGF1dGhvcmlzYXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoPycsXG4gIHVzZXJpbmZvOiAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My91c2VyaW5mbz9hY2Nlc3NfdG9rZW49JyxcbiAgdG9rZW5JbmZvOiAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0nLFxuICBhY2Nlc3NUeXBlOiAgICAgICAgICAgICdvZmZsaW5lJyxcbiAgdHlwZTogICAgICAgICAgICAgICAgICAnY29kZScsXG4gIHNjb3BlOiAgICAgICAgICAgICAgICAgJ29wZW5pZCUyMGVtYWlsJTIwcHJvZmlsZScsXG4gIHN0YXRlOiAgICAgICAgICAgICAgICAgJ3N0YXRlJ1xufTtcblxuXG5cbmxldCBpZHAgPSB7XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcbiAgICBjb25zb2xlLmxvZygndmFsaWRhdGVBc3NlcnRpb25Qcm94eU5PREVKU0ZBS0U6YXNzZXJ0aW9uJywgYXNzZXJ0aW9uKTtcblxuICAgIC8vVE9ETyBjaGVjayB0aGUgdmFsdWVzIHdpdGggdGhlIGhhc2ggcmVjZWl2ZWRcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcbiAgICAgIGxldCBkZWNvZGVkQ29udGVudCA9IGF0b2IoYXNzZXJ0aW9uKTtcbiAgICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7XG4gICAgICBsZXQgaWRUb2tlblNwbGl0ZWQgPSBjb250ZW50LnRva2VuSUQuc3BsaXQoJy4nKTtcbiAgICAgIGxldCBpZFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XG5cbiAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZX0pO1xuXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb25GQUtFOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb25GQUtFOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbkZBS0U6aGludF0nLCBoaW50KTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuXG4gICAgICBjb25zb2xlLmxvZygnZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2U6Jyk7XG4gICAgICByZXR1cm4gcmVzb2x2ZShnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSk7XG5cblxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViXG4qL1xuY2xhc3MgTm9kZWpzUHJveHlTdHViIHtcblxuICAvKipcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIHJlY2VpdmVkIGlkcFByb3h5XG4gICpcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgKi9cbiBjb25zdHJ1Y3RvcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xuICAgY29uc29sZS5sb2coJ0ZBS0UgTk9ERUpTIGNvbnN0cnVjdG9yJyk7XG4gICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7XG4gICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xuICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xuXG4gICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7XG5cbiAgICAgLy9UT0RPIGFkZCB0aGUgcmVzcGVjdGl2ZSBsaXN0ZW5lclxuICAgICBpZiAobXNnLnRvID09PSAnZG9tYWluLWlkcDovL25vZGVqcy1pZHAnKSB7XG4gICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xuICAgICB9XG4gICB9KTtcblxuICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2NyZWF0ZWQnKTtcbiB9XG5cbiAvKipcbiAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG4gKi9cbiByZXF1ZXN0VG9JZHAobXNnKSB7XG4gICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcblxuICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOlxuICAgICAgIGlkcC5nZW5lcmF0ZUFzc2VydGlvbihwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXG4gICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO31cbiAgICAgICApO1xuICAgICAgIGJyZWFrO1xuICAgICBjYXNlICd2YWxpZGF0ZUFzc2VydGlvbic6XG4gICAgICAgaWRwLnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO31cbiAgICAgICApO1xuICAgICAgIGJyZWFrO1xuICAgICBkZWZhdWx0OlxuICAgICAgIGJyZWFrO1xuICAgfVxuIH1cblxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcbiAgKi9cbiAgcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG1lc3NhZ2UgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sXG4gICAgICAgICAgICAgICAgICAgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX07XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG5cbiAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBjb25zb2xlLmxvZygnW05vZGVKUy5zZW5kU3RhdHVzXSAnLCB2YWx1ZSk7XG5cbiAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTtcblxuICAgIGxldCBtc2cgPSB7XG4gICAgICB0eXBlOiAndXBkYXRlJyxcbiAgICAgIGZyb206IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsXG4gICAgICB0bzogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJyxcbiAgICAgIGJvZHk6IHtcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmIChyZWFzb24pIHtcbiAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XG4gICAgfVxuXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICB9XG59XG5cbi8qKlxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhY3RpdmF0ZSh1cmwsIGJ1cywgY29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ05vZGVqc1Byb3h5U3R1YicsXG4gICAgaW5zdGFuY2U6IG5ldyBOb2RlanNQcm94eVN0dWIodXJsLCBidXMsIGNvbmZpZylcbiAgfTtcbn1cblxuXG5sZXQgZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UgPVxue2Fzc2VydGlvbjpcbidleUowYjJ0bGJrbEVJam9pWlhsS2FHSkhZMmxQYVVwVFZYcEpNVTVwU1hOSmJYUndXa05KTmtscVVUTk9NbEY0VG5wck0wMXRVWGxaVkVGM1RWUkJNMDVIVVRGUFJGcHBUbFJuTkU5VVl6SmFSRWw2VGtSSk5VNXFaM2ROVjFWcFpsRXVaWGxLYUdWdVFXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LYUdSWFVXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LZW1SWFNXbFBhVWw0VFVSTmVFNVVVVEJQVkVVelRWUkZlVTU2VlhoTmFsbDZUa1JKYVV4RFNteGlWMFp3WWtOSk5rbHVVbXhqTTFKb1ltMVNNR0ZIYkhWaGVrMTVUVlZDYm1KWFJuQmlRelZxWWpJd2FVeERTbXhpVjBad1lrWTVNbHBZU25CYWJXeHNXa05KTm1SSVNqRmFVM2RwV1ZoU1ptRkhSbnBoUTBrMlNXa3dNMlJ0UlRKTk1WWjJaRmRXUlUxcmVEWlRNV042VW13NE1rOUdSV2xNUTBwMVlqSTFhbHBUU1RaSmJITXdUME4zZUUxNlFYTk5VM2Q2VGtOM01FOURkM2hOZVhjeVRFUnJjMDVFU1hOTlZFMHdURVJqZVV4RVJYcE9RM2Q1VGtSamMwMVVUWE5OVTNkNFRFUkZjMDVUZDNkTVJFMXpUVlJOZDB4RVJYTk5WRlZ6VFVOM01FOURkM2hOZWtGelRWTjNlRTFEZDNsTVJFVjZUVU4zZUV4RVJYTk5RM2Q1VFdwbmMwNUVUWE5OVkVGNFRFUkZlVXhFUlhsTlUzY3pURVJGTVU1NWR6Tk5VM2MwVFZOM01VOURkM2xOVkd0elRYcEpjMDFVUVhOTlZFRTBURVJGTlUxNWQzaE9lbXR6VFdwRmVVeEVSWGhPYVhkNVRsUlZjMDVVYTNOTmFrVXpURVJOZVV4RVJUSk5VM2Q1VFVSRmMwNVVUWE5OVkdONFRFUkplVTVwZDNoUFZHdHpUVlJOTTB4RVNYZE5hWGQ0VG5wRmMwNXFRWE5QUkVselRsUk5jMDFVU1RGTVJGbDVURVJGTTA1NWQzaE5hbGx6VFZSWk1VeEVTVEJNUkVVd1RWTjNlazFEZDNoT1UzZDVUV3BaYzA1VWEzTk5WRUV6VEVSTk1FeEVZM05OVkUxelRWUlJOVXhFUlhoTmFYZDRUV3BWYzAxVVFYTk5hazEzVEVSRk5VMVRkM2hPVkZselRWUlpNRXhFUlROT2VYZDRUVU4zZUU5RVZYTk5WRTF6VG1wWmMwMTVkM2xOVkdOelRWUlpNa3hFU1RCT1EzYzFUVU4zZUUxVWEzTk5WRVY0VEVSSk0weEVSVEJPVTNkNFRVUlJjMDU2UlhOTlZHYzFURVJGTWs1cGQzbE5hbGx6VFdwVk1VeEVSWHBOZVhjMFRYbDNlRTVVUlhOTmFrMTRURVJGZDAxVGQzaE9WRVZ6VDBScmMwMXFTWE5OVkd0elRtcFZjMDFVVlRCTVJFVjNURVJWZWt4RVNYZFBRM2Q1VFZSbmMwMXFWWGxNUkVsNFQxTjNlazU1ZHpGTlEzZDVUVlJKYzA5RVdYTk5WRkV4VEVSRmQwNTVkM2hOZWtselQxUkJjMDFxVFhwTVJFbDNUV2wzZVUxcVkzTk5WRUUwVEVSRmVFNURkM2hPUkVWelRXcHJjMDU2VFhOTlZHY3pURVJOZUV4RVJYcE1SRWw2VGtOM2QweEVTWHBOYVhkNVRrTjNlRTlVUlhOTmVsVnpUVlJSTlV4RVJUTlBVM2Q0VFhwbmMwMXFSVEJNUkVVeFQxTjNlVTVFVlhOTlZGbDVURVJGTUU5RGQzbE5ha1Z6VFZSRk5FeEVSVE5NUkVWM1RsTjNORTlUZDNoT1ZFVnpUVlJSTWt4RVNYZFBVM2N4VGxOM2VVMTZXWE5PYWtWelRWUlJla3hFU1hwTmVYZDVUV3BuYzAxVVFYTk5WRVV4VEVSbmMwOUVSWE5OVkdzelRFUlJNVXhFUlhsTmVYZDRUMFJqYzAxcVNYcE1SRVV6VG1sM2VVNVVVWE5OVkZreFRFUlpOVXhFUlRCTmVYZDVUMU4zZUUxRVFYTk5WRVV3VEVSRk0weEVSWHBOUTNkNVRXcFpjMDFxU1hwTVJFMTZURVJGZUV4RVNUQk5RM2MwVFZOM01rMVRkM2hPZWtselRWUnJlRXhFUlRGT2VYZDVUa1JaYzAxcVFYbE1SR2N6VEVSRmVrMVRkM2xOYWtWelQwUm5jMDVFWjNOTlZFa3pURVJGTVU5VGQzaE5WR3R6VFZSWmQweEVSVEZOYVhkNFRWUmpjMDVxUlhOTmFsVjZURVJGTTA1RGR6Sk9VM2Q1VFZSUmMwMXFRWHBNUkVsNFQwTjNNazE1ZHpGTlEzY3pUME4zZUU1cVFYTk5WR2Q0VEVSSmVVMVRkM2xOVkVWelRWUkpORXhFWTNkTVJFVXpUME4zZUU5VVJYTk5WR04zVEVSQmMwMVVUWE5OVkVsNVRFUkZNMDE1ZDNoTmFYZDVUVVJOYzAxcVZYbE1SRkZ6VFZSbk1FeEVTWGxPVTNkNVRsUkpjMDU1ZHpKTmFYYzFUbWwzZUUxVVdYTk5WRlZ6VFdwRk1reEVSVEZQUTNjeFRsTjNORTVUZHpCUFEzZDRUbWwzTlV4RVNYZE9hWGQ0VFZScmMwNTZVWE5OVkVWNVRFUkpNRTE1ZDNoTmVsbHpUMFJSYzAxVVp6Qk1SRWw1VFhsM2VVNVVVWE5OVkVGNFRFUnJlRXhFV1hoTVJFVjNURVJyZUV4RVp6Rk1SRVUxVFdsM2VFNUVZM05OVkZFd1RFUlZNMHhFU1RWTVJGa3lURVJKZWs5RGQzaFBWR3R6VFdwUk1FeEVSVFZOZVhkNFQxUlJjMDFVVlhkTVJFbDZUV2wzZVUxRVFYTk5WRUV6VEVSSmMwMTVkM2hNUkVGelRWWXdhVXhEU25Cak0wMXBUMmxLYjJSSVVuZGplbTkyVERKR2Fsa3lPVEZpYmxKNlRHMWtkbUl5WkhOYVV6VnFZakl3YVV4RFNuQlpXRkZwVDJwRk1VMVVTVEpPUkZsM1QwUkJjMGx0VmpSalEwazJUVlJWZUUxcVdUQlBWRmswVFVnd0xuUmxTVEZ0T1RCV2NrRkZaMHQwZGpOUVNVYzNTalp6UVdoa1gxRlpOMjFwTTFGelYweFpZbUZyVjBweFREWm1OR2R0Um5sa1pFVjNjVXQ0UjFrMGVEZHpUVXgwYWkxVll6QmFTM1ZYV0Y5eFJUZExObWwzYW1oTmJIcGlWRWhMT0V4bGFIbEpURTlEV1RkWWMzVnZZVFpOY1daVU1WZHdPRUpuTUZSbVNraDFUMjVpV2w5NWJYaFFUVkZMVDJ0bVdtbFFWbE0xYVhGelR6TmlibVZSZWxSeU1FcGljWFJSTjNoWGMwcFRObTU2TFdsQk5uSkZaRXRxWmtNM01HRnRWekJwVTBrdExXeFhiVmczYzFwaFZHVmFZemQxWnpSeU5GbzFMWHBNUmpNNWVuZFJVRTkzUlZGQmJGUXRXa0ZmZVRGblQxODBWblZsUkdWYWJWZHRWblY2TW10S1QxODVNV2cyY1VVMWJscFBkSGRYVm5WRGNtUjNMVGxKWVhjM2VqSkVVR1Z6WDJvMVVrUTRiRVJ2ZGxJMlNrMHdaR295U25GNlREbFdjRlJqYlVZeU4wRktjMk14YW1oUlRITk1WMkpzWTNoYWR5SXNJblJ2YTJWdVNVUktVMDlPSWpwN0ltRjZjQ0k2SWpnd09ETXlPVFUyTmpBeE1pMTBjWEk0Y1c5b01URXhPVFF5WjJReWEyY3dNRGQwTUhNNFpqSTNOM0p2YVM1aGNIQnpMbWR2YjJkc1pYVnpaWEpqYjI1MFpXNTBMbU52YlNJc0ltRjFaQ0k2SWpnd09ETXlPVFUyTmpBeE1pMTBjWEk0Y1c5b01URXhPVFF5WjJReWEyY3dNRGQwTUhNNFpqSTNOM0p2YVM1aGNIQnpMbWR2YjJkc1pYVnpaWEpqYjI1MFpXNTBMbU52YlNJc0luTjFZaUk2SWpFd016RTFORFE1TVRjeE1USTNOVEV5TmpNME1pSXNJbVZ0WVdsc0lqb2lkR1Z6ZEdGdVpIUm9hVzVyTXpJeFFHZHRZV2xzTG1OdmJTSXNJbVZ0WVdsc1gzWmxjbWxtYVdWa0lqb2lkSEoxWlNJc0ltRjBYMmhoYzJnaU9pSXROM1poTmpOVmIzVmxSREpNZWt0WE0wWmZOamhSSWl3aWJtOXVZMlVpT2lKYk5EZ3NNVE13TERFc016UXNORGdzTVRNc05pdzVMRFF5TERFek5DdzNNaXd4TXpRc01qUTNMREV6TERFc01Td3hMRFVzTUN3ekxERXpNQ3d4TERFMUxEQXNORGdzTVRNd0xERXNNVEFzTWl3eE16QXNNU3d4TERBc01qSTRMRFF6TERFd01Td3hNaXd4TWpFc055d3hOVGNzTnpFc09ERXNOVGdzTWpFNUxETXlMREV3TERFd09Dd3hPVE1zTVRjNUxESXhNaXd4TVRZc01qVTFMRFU1TERJeE55d3pNaXd4TmpFc01qQXhMRFV6TERFM01Td3lNallzTVRrNUxERXpOeXd5TURJc01UY3hMRFl3TERneUxEVXpMREV5TlN3Mk1pd3hOemNzTVRJMkxERTJOU3d5TkN3eE5ERXNNekFzTVRVc01qSTJMRFU1TERFd055d3pOQ3czTERFekxERTBPU3d4TVRJc01USTFMREV3TERJek1Dd3hPVEVzTVRVMkxERTJOQ3d4Tnpjc01UQXNNVGcxTERFekxEWTJMRE1zTWpFM0xERTJOaXd5TkRRc09UQXNNVEU1TERFeE1Td3lOeXd4TkRVc01UQTBMRGN4TERFNE9Td3hOallzTWpJMkxESTFOU3d4TXpNc09ETXNNVFV4TERJek1Td3hNREVzTVRVeExEZzVMREl5TERFNUxEWTFMREUxTkN3eE1DdzFNeXd5TURnc01qRTRMREkxTWl3eU1Ua3NNemNzTlRBc01qRXlMRGcyTERFME5Td3hNRGNzTVRNeUxEa3dMREl6TXl3eU1ESXNNakkzTERFd09Dd3hNVFFzTVRReExESTVMRGN6TERFNE55d3pNU3d4TXl3eU16UXNNQ3d5TXpJc01qUXNNVGt4TERNMUxERTBPU3d4Tnprc01UTTRMREl4TkN3eE5Ua3NNalExTERFMk1pd3hORGdzTWpJeExERXhPQ3d4Tnl3eE1EVXNPRGtzTVRVeExERTBOaXd5TURrc05UVXNNak0yTERZeExERTBNeXd5TXpNc01qSTRMREV3TERFeE5TdzRMRGd4TERFNU55dzBOU3d4TWpNc01UZzNMREl5TXl3eE56WXNNalUwTERFMk5TdzJPU3d4TkRNc01qa3NNVEF3TERFeE5Dd3hOeXd4TXpBc01qSTJMREl5TXl3ek15d3hNU3d5TkRBc09ERXNOakVzTVRjeUxERTVNU3d4TlRjc01qUTJMREl3TWl3NE55d3hNekVzTWpJeExEZzRMRFE0TERFeU55d3hOVGtzTVRFNUxERTJNQ3d4TlRJc01URTNMRFl4TERJMU15d3hOelFzTmpVc01qRTBMREl3TXl3eU1UZ3NOak1zTlRBc056Z3NNVFl3TERFNE1Td3lNakVzTWpFeExERXlPQ3czTUN3eE56Z3NNVGt4TERFM01Dd3dMREV6TERFeU1pd3hOek1zTVRJc01qQXpMREkxTWl3MExERTROQ3d5TWpVc01qVXlMRGNzTmpJc09UWXNNVEUyTERFMUxESXhOaXd4TlRnc05UVXNPRFVzTkRnc01UWXNPU3d5TURZc01URTVMRGMwTERFeE1pd3lORE1zTVRNMkxEZzBMREU0TkN3eU1qTXNNalUwTERFd01TdzVNU3cyTVN3eE1DdzVNU3c0TlN3eE9USXNNVFEzTERFME5DdzFOeXd5T1N3Mk5pd3lNemdzTVRrNUxESTBOQ3d4T1RNc01UazBMREUxTUN3eU16SXNNakF3TERFd055d3lMRE1zTVN3d0xERmRJaXdpYVhOeklqb2lhSFIwY0hNNkx5OWhZMk52ZFc1MGN5NW5iMjluYkdVdVkyOXRJaXdpYVdGMElqb2lNVFV4TWpZME5qQTRNQ0lzSW1WNGNDSTZJakUxTVRJMk5EazJPREFpTENKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlgwPScsXG5pZHA6e1xuZG9tYWluOidub2RlanMtaWRwJyxcbnByb3RvY29sOidPSURDJ30sXG5pbmZvOntcbmFjY2Vzc1Rva2VuOid5YTI5Lkdsc2JCYWxHSkptVmlfTjVJRHlxTUkzSnhrTzVlTFY0MzMzSTkzZVFCQ3BOQW9mRXF0VTRVa1dIaDhkclZsclZpVlRxdDZKazNQODZfQ0R0NHNLVmgwRzlBYlRrMXJWVzNNQXhjRmhFVUZFLUtNWGRES19Lc01mNmZOUWsnLFxuaWRUb2tlbjonZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadycsXG5yZWZyZXNoVG9rZW46JzEvNmNDR0VXeXp4MnVPMmJIMkYxQTh2NktEVEc0clAwQ1hjLVhVUTEyLVUwbycsXG50b2tlblR5cGU6J0JlYXJlcicsXG5pbmZvVG9rZW46e1xuc3ViOicxMDMxNTQ0OTE3MTEyNzUxMjYzNDInLFxubmFtZTondGVzdCB0aGluaycsXG5naXZlbl9uYW1lOid0ZXN0JyxcbmZhbWlseV9uYW1lOid0aGluaycsXG5waWN0dXJlOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZycsXG5lbWFpbDondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXG5lbWFpbF92ZXJpZmllZDp0cnVlLFxubG9jYWxlOidlbid9LFxudG9rZW5JREpTT046eydhenAnOic4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nLFxuYXVkOic4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nLFxuc3ViOicxMDMxNTQ0OTE3MTEyNzUxMjYzNDInLFxuZW1haWw6J3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxuZW1haWxfdmVyaWZpZWQ6J3RydWUnLFxuYXRfaGFzaDonLTd2YTYzVW91ZUQyTHpLVzNGXzY4UScsXG5ub25jZTonWzQ4LDEzMCwxLDM0LDQ4LDEzLDYsOSw0MiwxMzQsNzIsMTM0LDI0NywxMywxLDEsMSw1LDAsMywxMzAsMSwxNSwwLDQ4LDEzMCwxLDEwLDIsMTMwLDEsMSwwLDIyOCw0MywxMDEsMTIsMTIxLDcsMTU3LDcxLDgxLDU4LDIxOSwzMiwxMCwxMDgsMTkzLDE3OSwyMTIsMTE2LDI1NSw1OSwyMTcsMzIsMTYxLDIwMSw1MywxNzEsMjI2LDE5OSwxMzcsMjAyLDE3MSw2MCw4Miw1MywxMjUsNjIsMTc3LDEyNiwxNjUsMjQsMTQxLDMwLDE1LDIyNiw1OSwxMDcsMzQsNywxMywxNDksMTEyLDEyNSwxMCwyMzAsMTkxLDE1NiwxNjQsMTc3LDEwLDE4NSwxMyw2NiwzLDIxNywxNjYsMjQ0LDkwLDExOSwxMTEsMjcsMTQ1LDEwNCw3MSwxODksMTY2LDIyNiwyNTUsMTMzLDgzLDE1MSwyMzEsMTAxLDE1MSw4OSwyMiwxOSw2NSwxNTQsMTAsNTMsMjA4LDIxOCwyNTIsMjE5LDM3LDUwLDIxMiw4NiwxNDUsMTA3LDEzMiw5MCwyMzMsMjAyLDIyNywxMDgsMTE0LDE0MSwyOSw3MywxODcsMzEsMTMsMjM0LDAsMjMyLDI0LDE5MSwzNSwxNDksMTc5LDEzOCwyMTQsMTU5LDI0NSwxNjIsMTQ4LDIyMSwxMTgsMTcsMTA1LDg5LDE1MSwxNDYsMjA5LDU1LDIzNiw2MSwxNDMsMjMzLDIyOCwxMCwxMTUsOCw4MSwxOTcsNDUsMTIzLDE4NywyMjMsMTc2LDI1NCwxNjUsNjksMTQzLDI5LDEwMCwxMTQsMTcsMTMwLDIyNiwyMjMsMzMsMTEsMjQwLDgxLDYxLDE3MiwxOTEsMTU3LDI0NiwyMDIsODcsMTMxLDIyMSw4OCw0OCwxMjcsMTU5LDExOSwxNjAsMTUyLDExNyw2MSwyNTMsMTc0LDY1LDIxNCwyMDMsMjE4LDYzLDUwLDc4LDE2MCwxODEsMjIxLDIxMSwxMjgsNzAsMTc4LDE5MSwxNzAsMCwxMywxMjIsMTczLDEyLDIwMywyNTIsNCwxODQsMjI1LDI1Miw3LDYyLDk2LDExNiwxNSwyMTYsMTU4LDU1LDg1LDQ4LDE2LDksMjA2LDExOSw3NCwxMTIsMjQzLDEzNiw4NCwxODQsMjIzLDI1NCwxMDEsOTEsNjEsMTAsOTEsODUsMTkyLDE0NywxNDQsNTcsMjksNjYsMjM4LDE5OSwyNDQsMTkzLDE5NCwxNTAsMjMyLDIwMCwxMDcsMiwzLDEsMCwxXScsXG5pc3M6J2h0dHBzOi8vYWNjb3VudHMubm9kZWpzLWlkcCcsXG5pYXQ6JzE1MTI2NDYwODAnLFxuZXhwOicxNTEyNjQ5NjgwJyxcbmFsZzonUlMyNTYnLFxua2lkOic0NzdkMTc5NzJkMmEwMDEwNzRkNTg2YjU4ODk3NmQyMzQyOTY4MDFlJ30sXG5leHBpcmVzOicxNTEyNjQ5NjgwJyxcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJ30sXG5pbmZvVG9rZW46e1xuc3ViOicxMDMxNTQ0OTE3MTEyNzUxMjYzNDInLFxubmFtZTondGVzdCB0aGluaycsXG5naXZlbl9uYW1lOid0ZXN0JyxcbmZhbWlseV9uYW1lOid0aGluaycsXG5waWN0dXJlOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZycsXG5lbWFpbDondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXG5lbWFpbF92ZXJpZmllZDp0cnVlLFxubG9jYWxlOidlbid9LFxuaWRlbnRpdHk6J3VzZXI6Ly9ub2RlanMtaWRwL3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxubWVzc2FnZUluZm86e1xudXNlclByb2ZpbGU6e1xudXNlcm5hbWU6J3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxuY246J3Rlc3RhbmR0aGluazMyMScsXG5hdmF0YXI6J2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tWGRVSXFkTWtDV0EvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQUEvNDI1MnJzY2J2NU0vcGhvdG8uanBnJyxcbmxvY2FsZTonZW4nLFxudXNlclVSTDondXNlcjovL25vZGVqcy1pZHAvdGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSd9LFxuaWRwOidub2RlanMtaWRwJyxcbmFzc2VydGlvbjonZXlKMGIydGxia2xFSWpvaVpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHFVVE5PTWxGNFRucHJNMDF0VVhsWlZFRjNUVlJCTTA1SFVURlBSRnBwVGxSbk5FOVVZekphUkVsNlRrUkpOVTVxWjNkTlYxVnBabEV1WlhsS2FHVnVRV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2FHUlhVV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2VtUlhTV2xQYVVsNFRVUk5lRTVVVVRCUFZFVXpUVlJGZVU1NlZYaE5hbGw2VGtSSmFVeERTbXhpVjBad1lrTkpOa2x1VW14ak0xSm9ZbTFTTUdGSGJIVmhlazE1VFZWQ2JtSlhSbkJpUXpWcVlqSXdhVXhEU214aVYwWndZa1k1TWxwWVNuQmFiV3hzV2tOSk5tUklTakZhVTNkcFdWaFNabUZIUm5waFEwazJTV2t3TTJSdFJUSk5NVloyWkZkV1JVMXJlRFpUTVdONlVtdzRNazlHUldsTVEwcDFZakkxYWxwVFNUWkpiSE13VDBOM2VFMTZRWE5OVTNkNlRrTjNNRTlEZDNoTmVYY3lURVJyYzA1RVNYTk5WRTB3VEVSamVVeEVSWHBPUTNkNVRrUmpjMDFVVFhOTlUzZDRURVJGYzA1VGQzZE1SRTF6VFZSTmQweEVSWE5OVkZWelRVTjNNRTlEZDNoTmVrRnpUVk4zZUUxRGQzbE1SRVY2VFVOM2VFeEVSWE5OUTNkNVRXcG5jMDVFVFhOTlZFRjRURVJGZVV4RVJYbE5VM2N6VEVSRk1VNTVkek5OVTNjMFRWTjNNVTlEZDNsTlZHdHpUWHBKYzAxVVFYTk5WRUUwVEVSRk5VMTVkM2hPZW10elRXcEZlVXhFUlhoT2FYZDVUbFJWYzA1VWEzTk5ha1V6VEVSTmVVeEVSVEpOVTNkNVRVUkZjMDVVVFhOTlZHTjRURVJKZVU1cGQzaFBWR3R6VFZSTk0weEVTWGROYVhkNFRucEZjMDVxUVhOUFJFbHpUbFJOYzAxVVNURk1SRmw1VEVSRk0wNTVkM2hOYWxselRWUlpNVXhFU1RCTVJFVXdUVk4zZWsxRGQzaE9VM2Q1VFdwWmMwNVVhM05OVkVFelRFUk5NRXhFWTNOTlZFMXpUVlJSTlV4RVJYaE5hWGQ0VFdwVmMwMVVRWE5OYWsxM1RFUkZOVTFUZDNoT1ZGbHpUVlJaTUV4RVJUTk9lWGQ0VFVOM2VFOUVWWE5OVkUxelRtcFpjMDE1ZDNsTlZHTnpUVlJaTWt4RVNUQk9RM2MxVFVOM2VFMVVhM05OVkVWNFRFUkpNMHhFUlRCT1UzZDRUVVJSYzA1NlJYTk5WR2MxVEVSRk1rNXBkM2xOYWxselRXcFZNVXhFUlhwTmVYYzBUWGwzZUU1VVJYTk5hazE0VEVSRmQwMVRkM2hPVkVWelQwUnJjMDFxU1hOTlZHdHpUbXBWYzAxVVZUQk1SRVYzVEVSVmVreEVTWGRQUTNkNVRWUm5jMDFxVlhsTVJFbDRUMU4zZWs1NWR6Rk5RM2Q1VFZSSmMwOUVXWE5OVkZFeFRFUkZkMDU1ZDNoTmVrbHpUMVJCYzAxcVRYcE1SRWwzVFdsM2VVMXFZM05OVkVFMFRFUkZlRTVEZDNoT1JFVnpUV3ByYzA1NlRYTk5WR2N6VEVSTmVFeEVSWHBNUkVsNlRrTjNkMHhFU1hwTmFYZDVUa04zZUU5VVJYTk5lbFZ6VFZSUk5VeEVSVE5QVTNkNFRYcG5jMDFxUlRCTVJFVXhUMU4zZVU1RVZYTk5WRmw1VEVSRk1FOURkM2xOYWtWelRWUkZORXhFUlROTVJFVjNUbE4zTkU5VGQzaE9WRVZ6VFZSUk1reEVTWGRQVTNjeFRsTjNlVTE2V1hOT2FrVnpUVlJSZWt4RVNYcE5lWGQ1VFdwbmMwMVVRWE5OVkVVeFRFUm5jMDlFUlhOTlZHc3pURVJSTVV4RVJYbE5lWGQ0VDBSamMwMXFTWHBNUkVVelRtbDNlVTVVVVhOTlZGa3hURVJaTlV4RVJUQk5lWGQ1VDFOM2VFMUVRWE5OVkVVd1RFUkZNMHhFUlhwTlEzZDVUV3BaYzAxcVNYcE1SRTE2VEVSRmVFeEVTVEJOUTNjMFRWTjNNazFUZDNoT2VrbHpUVlJyZUV4RVJURk9lWGQ1VGtSWmMwMXFRWGxNUkdjelRFUkZlazFUZDNsTmFrVnpUMFJuYzA1RVozTk5WRWt6VEVSRk1VOVRkM2hOVkd0elRWUlpkMHhFUlRGTmFYZDRUVlJqYzA1cVJYTk5hbFY2VEVSRk0wNURkekpPVTNkNVRWUlJjMDFxUVhwTVJFbDRUME4zTWsxNWR6Rk5RM2N6VDBOM2VFNXFRWE5OVkdkNFRFUkplVTFUZDNsTlZFVnpUVlJKTkV4RVkzZE1SRVV6VDBOM2VFOVVSWE5OVkdOM1RFUkJjMDFVVFhOTlZFbDVURVJGTTAxNWQzaE5hWGQ1VFVSTmMwMXFWWGxNUkZGelRWUm5NRXhFU1hsT1UzZDVUbFJKYzA1NWR6Sk5hWGMxVG1sM2VFMVVXWE5OVkZWelRXcEZNa3hFUlRGUFEzY3hUbE4zTkU1VGR6QlBRM2Q0VG1sM05VeEVTWGRPYVhkNFRWUnJjMDU2VVhOTlZFVjVURVJKTUUxNWQzaE5lbGx6VDBSUmMwMVVaekJNUkVsNVRYbDNlVTVVVVhOTlZFRjRURVJyZUV4RVdYaE1SRVYzVEVScmVFeEVaekZNUkVVMVRXbDNlRTVFWTNOTlZGRXdURVJWTTB4RVNUVk1SRmt5VEVSSmVrOURkM2hQVkd0elRXcFJNRXhFUlRWTmVYZDRUMVJSYzAxVVZYZE1SRWw2VFdsM2VVMUVRWE5OVkVFelRFUkpjMDE1ZDNoTVJFRnpUVll3YVV4RFNuQmpNMDFwVDJsS2IyUklVbmRqZW05MlRESkdhbGt5T1RGaWJsSjZURzFrZG1JeVpITmFVelZxWWpJd2FVeERTbkJaV0ZGcFQycEZNVTFVU1RKT1JGbDNUMFJCYzBsdFZqUmpRMGsyVFZSVmVFMXFXVEJQVkZrMFRVZ3dMblJsU1RGdE9UQldja0ZGWjB0MGRqTlFTVWMzU2paelFXaGtYMUZaTjIxcE0xRnpWMHhaWW1GclYwcHhURFptTkdkdFJubGtaRVYzY1V0NFIxazBlRGR6VFV4MGFpMVZZekJhUzNWWFdGOXhSVGRMTm1sM2FtaE5iSHBpVkVoTE9FeGxhSGxKVEU5RFdUZFljM1Z2WVRaTmNXWlVNVmR3T0VKbk1GUm1Ta2gxVDI1aVdsOTViWGhRVFZGTFQydG1XbWxRVmxNMWFYRnpUek5pYm1WUmVsUnlNRXBpY1hSUk4zaFhjMHBUTm01NkxXbEJObkpGWkV0cVprTTNNR0Z0VnpCcFUwa3RMV3hYYlZnM2MxcGhWR1ZhWXpkMVp6UnlORm8xTFhwTVJqTTVlbmRSVUU5M1JWRkJiRlF0V2tGZmVURm5UMTgwVm5WbFJHVmFiVmR0Vm5WNk1tdEtUMTg1TVdnMmNVVTFibHBQZEhkWFZuVkRjbVIzTFRsSllYYzNlakpFVUdWelgybzFVa1E0YkVSdmRsSTJTazB3WkdveVNuRjZURGxXY0ZSamJVWXlOMEZLYzJNeGFtaFJUSE5NVjJKc1kzaGFkeUlzSW5SdmEyVnVTVVJLVTA5T0lqcDdJbUY2Y0NJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbUYxWkNJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbk4xWWlJNklqRXdNekUxTkRRNU1UY3hNVEkzTlRFeU5qTTBNaUlzSW1WdFlXbHNJam9pZEdWemRHRnVaSFJvYVc1ck16SXhRR2R0WVdsc0xtTnZiU0lzSW1WdFlXbHNYM1psY21sbWFXVmtJam9pZEhKMVpTSXNJbUYwWDJoaGMyZ2lPaUl0TjNaaE5qTlZiM1ZsUkRKTWVrdFhNMFpmTmpoUklpd2libTl1WTJVaU9pSmJORGdzTVRNd0xERXNNelFzTkRnc01UTXNOaXc1TERReUxERXpOQ3czTWl3eE16UXNNalEzTERFekxERXNNU3d4TERVc01Dd3pMREV6TUN3eExERTFMREFzTkRnc01UTXdMREVzTVRBc01pd3hNekFzTVN3eExEQXNNakk0TERRekxERXdNU3d4TWl3eE1qRXNOeXd4TlRjc056RXNPREVzTlRnc01qRTVMRE15TERFd0xERXdPQ3d4T1RNc01UYzVMREl4TWl3eE1UWXNNalUxTERVNUxESXhOeXd6TWl3eE5qRXNNakF4TERVekxERTNNU3d5TWpZc01UazVMREV6Tnl3eU1ESXNNVGN4TERZd0xEZ3lMRFV6TERFeU5TdzJNaXd4Tnpjc01USTJMREUyTlN3eU5Dd3hOREVzTXpBc01UVXNNakkyTERVNUxERXdOeXd6TkN3M0xERXpMREUwT1N3eE1USXNNVEkxTERFd0xESXpNQ3d4T1RFc01UVTJMREUyTkN3eE56Y3NNVEFzTVRnMUxERXpMRFkyTERNc01qRTNMREUyTml3eU5EUXNPVEFzTVRFNUxERXhNU3d5Tnl3eE5EVXNNVEEwTERjeExERTRPU3d4TmpZc01qSTJMREkxTlN3eE16TXNPRE1zTVRVeExESXpNU3d4TURFc01UVXhMRGc1TERJeUxERTVMRFkxTERFMU5Dd3hNQ3cxTXl3eU1EZ3NNakU0TERJMU1pd3lNVGtzTXpjc05UQXNNakV5TERnMkxERTBOU3d4TURjc01UTXlMRGt3TERJek15d3lNRElzTWpJM0xERXdPQ3d4TVRRc01UUXhMREk1TERjekxERTROeXd6TVN3eE15d3lNelFzTUN3eU16SXNNalFzTVRreExETTFMREUwT1N3eE56a3NNVE00TERJeE5Dd3hOVGtzTWpRMUxERTJNaXd4TkRnc01qSXhMREV4T0N3eE55d3hNRFVzT0Rrc01UVXhMREUwTml3eU1Ea3NOVFVzTWpNMkxEWXhMREUwTXl3eU16TXNNakk0TERFd0xERXhOU3c0TERneExERTVOeXcwTlN3eE1qTXNNVGczTERJeU15d3hOellzTWpVMExERTJOU3cyT1N3eE5ETXNNamtzTVRBd0xERXhOQ3d4Tnl3eE16QXNNakkyTERJeU15d3pNeXd4TVN3eU5EQXNPREVzTmpFc01UY3lMREU1TVN3eE5UY3NNalEyTERJd01pdzROeXd4TXpFc01qSXhMRGc0TERRNExERXlOeXd4TlRrc01URTVMREUyTUN3eE5USXNNVEUzTERZeExESTFNeXd4TnpRc05qVXNNakUwTERJd015d3lNVGdzTmpNc05UQXNOemdzTVRZd0xERTRNU3d5TWpFc01qRXhMREV5T0N3M01Dd3hOemdzTVRreExERTNNQ3d3TERFekxERXlNaXd4TnpNc01USXNNakF6TERJMU1pdzBMREU0TkN3eU1qVXNNalV5TERjc05qSXNPVFlzTVRFMkxERTFMREl4Tml3eE5UZ3NOVFVzT0RVc05EZ3NNVFlzT1N3eU1EWXNNVEU1TERjMExERXhNaXd5TkRNc01UTTJMRGcwTERFNE5Dd3lNak1zTWpVMExERXdNU3c1TVN3Mk1Td3hNQ3c1TVN3NE5Td3hPVElzTVRRM0xERTBOQ3cxTnl3eU9TdzJOaXd5TXpnc01UazVMREkwTkN3eE9UTXNNVGswTERFMU1Dd3lNeklzTWpBd0xERXdOeXd5TERNc01Td3dMREZkSWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam9pTVRVeE1qWTBOakE0TUNJc0ltVjRjQ0k2SWpFMU1USTJORGsyT0RBaUxDSmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalEzTjJReE56azNNbVF5WVRBd01UQTNOR1ExT0RaaU5UZzRPVGMyWkRJek5ESTVOamd3TVdVaWZYMD0nLFxuZXhwaXJlczonMTUxMjY0OTY4MCd9LFxuLypcbmtleVBhaXI6e1xucHVibGljOls0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0sXG5wcml2YXRlOls0OCwxMzAsNCwxOTEsMiwxLDAsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCw0LDEzMCw0LDE2OSw0OCwxMzAsNCwxNjUsMiwxLDAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDEsMiwxMzAsMSwwLDEwMywyNDQsMTM3LDExOCwxMTYsODIsMTQsMjAzLDEwMiwxMDcsMjUzLDg4LDEyLDE5OSwyMjIsNjAsMjQzLDEzNiw4NiwxNTcsNzQsMjI0LDE5MCw1MywxMTMsNTcsMTU3LDI1MCw0OSwxMzAsOTYsMzEsMjUyLDEzNiwxNTIsNzAsMTQzLDE3LDIxNSw5NiwxMDMsNTEsMTgsMzUsMTQxLDIxMiwyMTAsMjA1LDksMjE2LDgzLDcwLDI0NSw3MSwxMzgsMTE5LDExMiwyMjksMTY0LDE3Niw5LDM3LDgxLDE2MSwxOTMsMTU0LDY4LDI0OSwxMTUsMTA2LDIwMSw2LDEyLDIyNSwxNDQsMTI2LDE0MSwyMTAsMTQxLDI0MiwxMjgsMTU5LDIyMSwxNjMsMjIyLDIxLDIzMywyMzAsMTY3LDIwNiw1OSwyNCwyNTAsMjMzLDgxLDEyMiwxMDIsMjYsNiwyMzMsNzIsMTMzLDQ3LDc3LDE1NSwyMzgsODYsNiwxMzksMjQsMTMxLDE2MywxNzksMTEyLDQ4LDI0NywxNDIsNiwyMDcsMjA0LDE3MywyMjMsMTQwLDE5OSwxNTAsOTUsMTIzLDE1MiwyMDIsMTU1LDEzMSwyMzgsNjIsOTYsMTMzLDQsMjE3LDUxLDEyMSwzMCwzOCwxNzgsMTg5LDIxNiw0NCwzNSwyNDEsOTMsNyw2Miw5MCwxMTEsMjE2LDY2LDIwOSwyNDMsMTI4LDIzNCwxNDEsODQsMTM1LDE4MSwxMywzOCwyMjAsMTE0LDI0NSwyNDAsMTc4LDk1LDIyMCwyMDYsMTEsMTg2LDIzNCwyMTMsNjYsMTIxLDgzLDY4LDg5LDc1LDQ2LDE4MywxNDUsMTgzLDE0NywxNjAsMjE1LDExOCwxOTgsMTI1LDE4MSwxNDYsMzAsMjUxLDU4LDg3LDQ3LDIwOSwyMzcsOTcsMjQsNDcsMTc5LDYsMTEwLDI0Miw5OSwxNTAsMjI2LDE0OCwxOTgsMTc0LDE0NiwxMDEsMjEzLDg3LDE3OCwxMCwyMjMsMTA1LDE4LDU2LDUzLDIyLDIxMiwxNTgsMTcwLDE3Niw1MSw4NiwxNDUsMTI1LDEyNCw0NCw5LDg1LDE5LDE0NCwyNDYsMTcwLDc4LDEyNCwzMCwzMiwxMiwxNjYsMTc0LDEzOSw3Nyw2MywxNzMsODIsMTAsMTUzLDIsMTI5LDEyOSwwLDI0OCwxOCwxNDMsMjQ2LDEzNywxMzYsMTQ1LDIxOSwxNzgsMzksMjcsOTQsNjQsOTAsNDcsMTYzLDExNCw2MCw2MywxODcsMTMxLDE0MywyNDQsMTYsNDIsMTI4LDIzMSwxMTcsOTIsOTgsMjE5LDE1NSw2MiwxMDcsMjUyLDE3LDI0NSw0NSwxNjAsMjI1LDEwMywxNDIsNzIsMzYsMTkzLDE1MCwyMzUsMjE0LDE3NSw2MiwyMTIsNTYsNDUsOSwwLDYwLDExNCwxMDcsMTM0LDIyOCwyMDQsMTMxLDEzMSwyMTQsOTQsMjAxLDE0OCwxNTksOTksMTM5LDE4MSwxMywxMTksMzgsMzAsMTA3LDE2NiwxNjUsMjAzLDQzLDM0LDIwLDIwNywxNzEsMzIsNTgsMTY3LDYyLDE5NiwxNTMsMTAzLDIwNCwyMTMsMjQ3LDQ4LDExMSwyMjcsNTksOTUsOTcsMTk0LDE4Nyw1MywxMCwyNDcsMTA4LDU4LDg2LDI4LDI5LDExMyw4LDExMCwxNzEsMjIwLDI0NSwxMSw4MiwyMzMsMjIzLDkxLDY4LDE2NiwxMTcsMTc0LDE4Nyw2Miw3NywyLDEyOSwxMjksMCwyMzUsMTE4LDIsMTA1LDIzOSwyMTIsMzAsMTA0LDE1Nyw0MSwxMDksMTEsMjQ4LDE1MiwyMiwyMzYsOTcsNDAsMTUzLDEzMSwyMjgsNSw4NiwxODcsMTEzLDEyNiwxNDQsNzYsMTQxLDc5LDExMCwyNTAsMTQ2LDE1Miw0OSw1OCwxNTYsMjAxLDE3Niw5MiwxODksMjA5LDMwLDExMiwxMDgsMTc1LDIwNCwyMDQsMjQ3LDE2NCw0NiwxMjksMjM5LDk4LDEyNyw0OSwxNDUsMjE4LDYzLDE5MywxMjQsMTc0LDE4LDk4LDIwMSw5OSwxNTQsMTYyLDEzOCw3OCwxNTksMjUzLDMsMjQ4LDMsMjA5LDM2LDIzOSwxOTMsMTU1LDE5Myw1LDE5LDIzNiwzNyw3OCwxMTgsMTM1LDI1MCwxOTksNywxNDEsMjQ4LDEyMCwzNiwxMzYsOTMsOTgsMTc0LDYwLDE4LDIxNSw5MywxNzQsMTA3LDE0MSwxMTYsMTQ1LDE2NywyMjEsMjEwLDE2OSwyNDcsNjcsMjU0LDIyMiwxNjEsMTM0LDYzLDIyMSw5MCw4Nyw0Miw5OSwyMjcsODEsMTczLDE1MSwyLDEyOSwxMjksMCwxMzMsMjMsMTY4LDEwMyw4MywyMzIsMTQ2LDE2MCwxODEsMjMsNDAsMzgsMjA0LDEzLDIxNCwyMDMsNDksNDEsMTk1LDIyNywxODksMTgxLDgsMjQzLDExOSwxMDYsNzUsNjcsMjUwLDI1MCwxMCwyMzQsOTgsMTE4LDI2LDI1MCwzNSwxMjEsMTMyLDEyNCwxMCw3NiwyNiwxOTgsMTY1LDE1NCwxMDgsMTksMTE3LDg4LDIzLDE3LDE5MiwxNDMsMTg0LDE3NywxODEsMTQxLDE1Nyw0LDE4NSwyNDgsMTkzLDc3LDIwNCwyNDMsNywxNzAsMjQwLDQsMTExLDExMywxODMsMCwyNywxMzYsMjAsMTksMTQ5LDc0LDMzLDI0MSwyMTgsMTA4LDIzNiw4MCwxNzEsMTQ4LDE2LDExNiw5NywxMDksODMsNzQsODgsMTQ1LDk0LDIzOSwxMDIsMTkyLDE5LDExNCwyMDcsNSwxMjgsNTEsMTExLDE2NCwyMzcsODYsMTU0LDk5LDUyLDE5Nyw2Miw1NywxODIsNiwxNTIsMjQ1LDYxLDEzNyw1OCwxMDUsMTU5LDIsODQsMTA5LDIsMTI5LDEyOSwwLDIyNiw2NywxMTEsMTMyLDk1LDkxLDEwMSwxNzcsNjMsMTg5LDQ0LDUzLDE5MywxODQsOTIsMjMwLDIyMyw5OCwxMzMsNzQsMjA5LDg2LDUyLDcsNjUsMTk1LDIwNiwxMDAsODEsMTc4LDE0NCw2NSwxNjcsMTUxLDQyLDc5LDg5LDE0OSwxOCwxNzMsMTg4LDIxLDI0NCwyNTEsNDksMjMwLDQxLDE1MCwxNTMsNDYsMzUsMzgsMjMxLDk5LDE3NCw1NiwxMTUsMzIsMjE1LDI1Myw4NSwxNDcsMTA4LDE5NywxNDcsMzQsMjM2LDIxNiwyMjIsMTc3LDU3LDkwLDEzNiwxMTQsMjA3LDQ4LDQ2LDMxLDkwLDIyMCwxOCw1OCwxNDMsMjM5LDExMSwyMTQsMjcsOTUsNiwzNiw1MywyMjksNjIsMTA4LDQ1LDM5LDEsMzAsNDcsMTc4LDU2LDE2NCwyMDYsNTYsNDIsMjA4LDQ2LDE5Myw2MSwzMSwxNDcsNDUsMTQ3LDIzLDE4NywyMiw1MCwyNTUsMTExLDIyOSwxMzIsMTk5LDE1Miw3NSwxNDIsMTM2LDIwOSwxNTEsMiwxMjksMTI5LDAsMTY1LDU2LDIzMiw3Niw1NSw1NywyNDAsMTU5LDkyLDIwNywyMjAsMTQzLDEzMCwzMCw1NywyMzQsMjUxLDE3MiwxNzEsMTgwLDU0LDE1OSwyMjksOTYsMjQ2LDczLDExMiwxNDYsNzUsMTU3LDI0MiwyMDEsMTYxLDIxOCwzNywxNzYsMzUsMTcwLDUwLDkwLDE0OCwxMDIsMTkxLDE5OSwyMzksMTc0LDc4LDcyLDY3LDg1LDE5OSw0NSwxNDksMTQ1LDEzMiwxNjEsMjEyLDMzLDE1Nyw3NSwyMTYsNzksMzksMjMzLDE4LDIxMCwyNTUsMjYsNzIsMjI5LDIzOSw0NCwxMiwxNDcsMTU4LDE3NiwxOTIsOTUsMTI2LDMyLDE3NSwyMywyMjYsMTMxLDEzOSwxOTcsMTc1LDE5Myw2Miw4LDE1MSwyNTIsNjgsMTU0LDk0LDg5LDE4OSwxMjUsOTAsMzAsMzYsMTc1LDczLDIzMCwxOTQsMTMsMjMzLDI0NywxMjMsNjAsMjQxLDQ3LDE3MSw1MSwxODksMTEyLDExMSwyMTMsMTQxLDg5LDcwLDI0OSwyMzYsNjMsMjM2LDExMCwxMTUsMjA4XVxufSovXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9ub2RlanMtaWRwL0Zha2VOb2RlanNQcm94eVN0dWIuaWRwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("(function () {\n  \"use strict\";\n\n  function btoa(str) {\n    var buffer\n      ;\n\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = new Buffer(str.toString(), 'binary');\n    }\n\n    return buffer.toString('base64');\n  }\n\n  module.exports = btoa;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2J0b2EvaW5kZXguanM/YjlhMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUMiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGZ1bmN0aW9uIGJ0b2Eoc3RyKSB7XG4gICAgdmFyIGJ1ZmZlclxuICAgICAgO1xuXG4gICAgaWYgKHN0ciBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgICAgYnVmZmVyID0gc3RyO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIgPSBuZXcgQnVmZmVyKHN0ci50b1N0cmluZygpLCAnYmluYXJ5Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZygnYmFzZTY0Jyk7XG4gIH1cblxuICBtb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2J0b2EvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction atob(str) {\n  return new Buffer(str, 'base64').toString('binary');\n}\n\nmodule.exports = atob.atob = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2F0b2Ivbm9kZS1hdG9iLmpzPzM3NGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gYXRvYihzdHIpIHtcbiAgcmV0dXJuIG5ldyBCdWZmZXIoc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGF0b2IuYXRvYiA9IGF0b2I7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvbm9kZWpzLWlkcC9ub2RlX21vZHVsZXMvYXRvYi9ub2RlLWF0b2IuanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);
});",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "57378b186a1ba1a7af6d8190014c85afc",
    "constraints": {
      "node": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar domain = 'rethink-project.eu';\n\n/**\n * Identity Provider Proxy Protocol Stub\n */\n\nvar IMSIWProxyStub = function () {\n\n\t/**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n\tfunction IMSIWProxyStub(runtimeProtoStubURL, bus, config) {\n\t\tvar _this2 = this;\n\n\t\t_classCallCheck(this, IMSIWProxyStub);\n\n\t\tthis.runtimeProtoStubURL = runtimeProtoStubURL;\n\t\tthis.messageBus = bus;\n\t\tthis.config = config;\n\n\t\tthis.messageBus.addListener('*', function (msg) {\n\t\t\t//TODO add the respective listener\n\t\t\tif (msg.to === 'domain-idp://' + domain) {\n\t\t\t\t_this2.requestToIdp(msg);\n\t\t\t}\n\t\t});\n\n\t\tthis._sendStatus('created');\n\t}\n\n\t_createClass(IMSIWProxyStub, [{\n\t\tkey: '_sendStatus',\n\t\tvalue: function _sendStatus(value, reason) {\n\t\t\tvar _this = this;\n\n\t\t\tconsole.log('[Slack Idp Proxy status changed] to ', value);\n\n\t\t\t_this._state = value;\n\n\t\t\tvar msg = {\n\t\t\t\ttype: 'update',\n\t\t\t\tfrom: _this.runtimeProtoStubURL,\n\t\t\t\tto: _this.runtimeProtoStubURL + '/status',\n\t\t\t\tbody: {\n\t\t\t\t\tvalue: value\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (reason) {\n\t\t\t\tmsg.body.desc = reason;\n\t\t\t}\n\n\t\t\t_this.messageBus.postMessage(msg);\n\t\t}\n\n\t\t/**\n   * Function that see the intended method in the message received and call the respective function\n   *\n   * @param {message}  message received in the messageBus\n   */\n\n\t}, {\n\t\tkey: 'requestToIdp',\n\t\tvalue: function requestToIdp(msg) {\n\t\t\tvar _this3 = this;\n\n\t\t\tvar params = msg.body.params;\n\n\t\t\tswitch (msg.body.method) {\n\t\t\t\tcase 'generateAssertion':\n\t\t\t\t\tthis.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n\t\t\t\t\t\treturn _this3.replyMessage(msg, value);\n\t\t\t\t\t}).catch(function (error) {\n\t\t\t\t\t\treturn _this3.replyMessage(msg, error);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'validateAssertion':\n\t\t\t\t\tthis.replyMessage(msg, { identity: 'identity@idp.com', contents: 'content' });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'generateAssertion',\n\t\tvalue: function generateAssertion(contents, origin, hint) {\n\t\t\tvar _this4 = this;\n\n\t\t\tconsole.log('contents->', contents);\n\t\t\tconsole.log('origin->', origin);\n\t\t\tconsole.log('hint->', hint);\n\n\t\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\t\t//the hint field contains the information obtained after the user authentication\n\t\t\t\t// if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n\t\t\t\tif (!hint) {\n\t\t\t\t\tvar requestUrl = 'https://accounts.google.com/o/oauth2/v2/auth?scope=email%20profile&state=%2Fprofile&redirect_uri=' + location.protocol + '//' + location.hostname + '&response_type=token&client_id=808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com';\n\t\t\t\t\tconsole.log('first url ', requestUrl, 'done');\n\t\t\t\t\treject({ name: 'IdPLoginError', loginUrl: requestUrl });\n\t\t\t\t} else {\n\t\t\t\t\tvar accessToken = _this4._urlParser(hint, 'access_token');\n\t\t\t\t\tvar expires = Math.floor(Date.now() / 1000) + _this4._urlParser(hint, 'expires_in');\n\t\t\t\t\tfetch('https://www.googleapis.com/oauth2/v1/userinfo?access_token=' + accessToken).then(function (res_user) {\n\t\t\t\t\t\treturn res_user.json();\n\t\t\t\t\t}).then(function (body) {\n\t\t\t\t\t\tvar infoToken = { picture: body.picture, email: body.email, family_name: body.family_name, given_name: body.given_name };\n\t\t\t\t\t\tvar assertion = btoa(JSON.stringify({ tokenID: accessToken, email: body.email, id: body.id }));\n\t\t\t\t\t\tvar toResolve = { info: { expires: expires }, assertion: assertion, idp: { domain: domain, protocol: 'OAuth 2.0' }, infoToken: infoToken, interworking: { access_token: accessToken, domain: domain } };\n\t\t\t\t\t\tconsole.log('RESOLVING THIS OBJECT', toResolve);\n\t\t\t\t\t\tresolve(toResolve);\n\t\t\t\t\t}).catch(reject);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: '_urlParser',\n\t\tvalue: function _urlParser(url, name) {\n\t\t\tname = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n\t\t\tvar regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n\t\t\tvar regex = new RegExp(regexS);\n\t\t\tvar results = regex.exec(url);\n\t\t\tif (results === null) return '';else return results[1];\n\t\t}\n\n\t\t/**\n   * This function receives a message and a value. It replies the value to the sender of the message received\n   *\n   * @param  {message}   message received\n   * @param  {value}     value to include in the new message to send\n   */\n\n\t}, {\n\t\tkey: 'replyMessage',\n\t\tvalue: function replyMessage(msg, value) {\n\t\t\tvar message = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { code: 200, value: value } };\n\n\t\t\tthis.messageBus.postMessage(message);\n\t\t}\n\t}]);\n\n\treturn IMSIWProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n\treturn {\n\t\tname: 'IMSIWProxyStub',\n\t\tinstance: new IMSIWProxyStub(url, bus, config)\n\t};\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NpcC5yZXRoaW5rLXByb2plY3QuZXUvSU1TSVdQcm94eVN0dWIuaWRwLmpzPzBlNTIiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJkb21haW4iLCJJTVNJV1Byb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJtZXNzYWdlQnVzIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwidmFsdWUiLCJyZWFzb24iLCJfdGhpcyIsImNvbnNvbGUiLCJsb2ciLCJfc3RhdGUiLCJ0eXBlIiwiZnJvbSIsImJvZHkiLCJkZXNjIiwicG9zdE1lc3NhZ2UiLCJwYXJhbXMiLCJtZXRob2QiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImNvbnRlbnRzIiwib3JpZ2luIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInJlcGx5TWVzc2FnZSIsImNhdGNoIiwiZXJyb3IiLCJpZGVudGl0eSIsImhpbnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3RVcmwiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJuYW1lIiwibG9naW5VcmwiLCJhY2Nlc3NUb2tlbiIsIl91cmxQYXJzZXIiLCJleHBpcmVzIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsImZldGNoIiwicmVzX3VzZXIiLCJqc29uIiwiaW5mb1Rva2VuIiwicGljdHVyZSIsImVtYWlsIiwiZmFtaWx5X25hbWUiLCJnaXZlbl9uYW1lIiwiYXNzZXJ0aW9uIiwiYnRvYSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b2tlbklEIiwiaWQiLCJ0b1Jlc29sdmUiLCJpbmZvIiwiaWRwIiwiaW50ZXJ3b3JraW5nIiwiYWNjZXNzX3Rva2VuIiwidXJsIiwicmVwbGFjZSIsInJlZ2V4UyIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJt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WUFBWTlCLElBQVosR0FBbUIsV0FBaEM7QUFDQSxPQUFJK0IsUUFBUSxJQUFJQyxNQUFKLENBQVdGLE1BQVgsQ0FBWjtBQUNBLE9BQUlHLFVBQVVGLE1BQU1HLElBQU4sQ0FBV04sR0FBWCxDQUFkO0FBQ0EsT0FBSUssWUFBWSxJQUFoQixFQUNDLE9BQU8sRUFBUCxDQURELEtBR0MsT0FBT0EsUUFBUSxDQUFSLENBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7OytCQU1hbkUsRyxFQUFLSSxLLEVBQU87QUFDeEIsT0FBSWlFLFVBQVUsRUFBQ2IsSUFBSXhELElBQUl3RCxFQUFULEVBQWE5QyxNQUFNLFVBQW5CLEVBQStCVCxJQUFJRCxJQUFJVyxJQUF2QyxFQUE2Q0EsTUFBTVgsSUFBSUMsRUFBdkQsRUFBMkRXLE1BQU0sRUFBQzBELE1BQU0sR0FBUCxFQUFZbEUsT0FBT0EsS0FBbkIsRUFBakUsRUFBZDs7QUFFQSxRQUFLTixVQUFMLENBQWdCZ0IsV0FBaEIsQ0FBNEJ1RCxPQUE1QjtBQUNBOzs7Ozs7QUFHRjs7Ozs7Ozs7O0FBT2UsU0FBUzdFLFFBQVQsQ0FBa0JzRSxHQUFsQixFQUF1QmxFLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNsRCxRQUFPO0FBQ05xQyxRQUFNLGdCQURBO0FBRU5xQyxZQUFVLElBQUk3RSxjQUFKLENBQW1Cb0UsR0FBbkIsRUFBd0JsRSxHQUF4QixFQUE2QkMsTUFBN0I7QUFGSixFQUFQO0FBSUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBkb21haW4gPSAncmV0aGluay1wcm9qZWN0LmV1J1xuXG4vKipcbiAqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiAqL1xuY2xhc3MgSU1TSVdQcm94eVN0dWIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuXHQgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxuXHQgKlxuXHQgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcblx0ICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG5cdCAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuXHQgKi9cblx0Y29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcblx0XHR0aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMXG5cdFx0dGhpcy5tZXNzYWdlQnVzID0gYnVzXG5cdFx0dGhpcy5jb25maWcgPSBjb25maWdcblxuXHRcdHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIG1zZyA9PiB7XG5cdFx0XHQvL1RPRE8gYWRkIHRoZSByZXNwZWN0aXZlIGxpc3RlbmVyXG5cdFx0XHRpZiAobXNnLnRvID09PSBgZG9tYWluLWlkcDovLyR7ZG9tYWlufWApIHtcblx0XHRcdFx0dGhpcy5yZXF1ZXN0VG9JZHAobXNnKVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHR0aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJylcblx0fVxuXG5cdF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcblx0XHRsZXQgX3RoaXMgPSB0aGlzXG5cblx0XHRjb25zb2xlLmxvZygnW1NsYWNrIElkcCBQcm94eSBzdGF0dXMgY2hhbmdlZF0gdG8gJywgdmFsdWUpXG5cblx0XHRfdGhpcy5fc3RhdGUgPSB2YWx1ZVxuXG5cdFx0bGV0IG1zZyA9IHtcblx0XHRcdHR5cGU6ICd1cGRhdGUnLFxuXHRcdFx0ZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcblx0XHRcdHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxuXHRcdFx0Ym9keToge1xuXHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocmVhc29uKSB7XG5cdFx0XHRtc2cuYm9keS5kZXNjID0gcmVhc29uXG5cdFx0fVxuXG5cdFx0X3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpXG5cdH1cblxuXHQvKipcblx0ICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuXHQgKlxuXHQgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG5cdCAqL1xuXHRyZXF1ZXN0VG9JZHAobXNnKSB7XG5cdFx0bGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtc1xuXG5cdFx0c3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcblx0XHRjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XG5cdFx0XHR0aGlzLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludClcblx0XHRcdFx0LnRoZW4odmFsdWUgPT4gdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkpXG5cdFx0XHRcdC5jYXRjaChlcnJvciA9PiB0aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKSlcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuXHRcdFx0dGhpcy5yZXBseU1lc3NhZ2UobXNnLCB7aWRlbnRpdHk6ICdpZGVudGl0eUBpZHAuY29tJywgY29udGVudHM6ICdjb250ZW50J30pXG5cdFx0XHRicmVha1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRicmVha1xuXHRcdH1cblx0fVxuXG5cdGdlbmVyYXRlQXNzZXJ0aW9uIChjb250ZW50cywgb3JpZ2luLCBoaW50KSAge1xuXG5cdFx0Y29uc29sZS5sb2coJ2NvbnRlbnRzLT4nLCBjb250ZW50cylcblx0XHRjb25zb2xlLmxvZygnb3JpZ2luLT4nLCBvcmlnaW4pXG5cdFx0Y29uc29sZS5sb2coJ2hpbnQtPicsIGhpbnQpXG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG5cdFx0XHQvL3RoZSBoaW50IGZpZWxkIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBvYnRhaW5lZCBhZnRlciB0aGUgdXNlciBhdXRoZW50aWNhdGlvblxuXHRcdFx0Ly8gaWYgdGhlIGhpbnQgY29udGVudCBpcyBub3QgcHJlc2VudCwgdGhlbiByZWplY3RzIHRoZSB2YWx1ZSB3aXRoIHRoZSBVUkwgdG8gb3BlbiB0aGUgcGFnZSB0byBhdXRoZW50aWNhdGUgdGhlIHVzZXJcblx0XHRcdGlmICghaGludCkge1xuXHRcdFx0XHRsZXQgcmVxdWVzdFVybCA9YGh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoP3Njb3BlPWVtYWlsJTIwcHJvZmlsZSZzdGF0ZT0lMkZwcm9maWxlJnJlZGlyZWN0X3VyaT0ke2xvY2F0aW9uLnByb3RvY29sfS8vJHtsb2NhdGlvbi5ob3N0bmFtZX0mcmVzcG9uc2VfdHlwZT10b2tlbiZjbGllbnRfaWQ9ODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tYFxuXHRcdFx0XHRjb25zb2xlLmxvZygnZmlyc3QgdXJsICcsIHJlcXVlc3RVcmwsICdkb25lJylcblx0XHRcdFx0cmVqZWN0KHtuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsfSlcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBhY2Nlc3NUb2tlbiA9IHRoaXMuX3VybFBhcnNlcihoaW50LCAnYWNjZXNzX3Rva2VuJylcblx0XHRcdFx0bGV0IGV4cGlyZXMgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKSArIHRoaXMuX3VybFBhcnNlcihoaW50LCAnZXhwaXJlc19pbicpXG5cdFx0XHRcdGZldGNoKGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvdXNlcmluZm8/YWNjZXNzX3Rva2VuPSR7YWNjZXNzVG9rZW59YClcblx0XHRcdFx0XHQudGhlbihyZXNfdXNlciA9PiByZXNfdXNlci5qc29uKCkpXG5cdFx0XHRcdFx0LnRoZW4oYm9keSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgaW5mb1Rva2VuID0ge3BpY3R1cmU6IGJvZHkucGljdHVyZSwgZW1haWw6IGJvZHkuZW1haWwsIGZhbWlseV9uYW1lOiBib2R5LmZhbWlseV9uYW1lLCBnaXZlbl9uYW1lOiBib2R5LmdpdmVuX25hbWV9XG5cdFx0XHRcdFx0XHRsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogYWNjZXNzVG9rZW4sIGVtYWlsOiBib2R5LmVtYWlsLCBpZDogYm9keS5pZH0pKVxuXHRcdFx0XHRcdFx0bGV0IHRvUmVzb2x2ZSA9IHtpbmZvOiB7IGV4cGlyZXM6IGV4cGlyZXMgfSwgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDoge2RvbWFpbjogZG9tYWluLCBwcm90b2NvbDogJ09BdXRoIDIuMCd9LCBpbmZvVG9rZW46IGluZm9Ub2tlbiwgaW50ZXJ3b3JraW5nOiB7YWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbiwgZG9tYWluOiBkb21haW4gfX1cblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdSRVNPTFZJTkcgVEhJUyBPQkpFQ1QnLCB0b1Jlc29sdmUpXG5cdFx0XHRcdFx0XHRyZXNvbHZlKHRvUmVzb2x2ZSlcblx0XHRcdFx0XHR9KS5jYXRjaChyZWplY3QpXG5cdFx0XHR9XG5cdFx0fSlcblx0fVxuXG5cdF91cmxQYXJzZXIodXJsLCBuYW1lKSB7XG5cdFx0bmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxcXF0nKVxuXHRcdGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJ1xuXHRcdGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKVxuXHRcdGxldCByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpXG5cdFx0aWYgKHJlc3VsdHMgPT09IG51bGwpXG5cdFx0XHRyZXR1cm4gJydcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gcmVzdWx0c1sxXVxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG5cdCAqXG5cdCAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuXHQgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcblx0ICovXG5cdHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XG5cdFx0bGV0IG1lc3NhZ2UgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZX19XG5cblx0XHR0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSlcblx0fVxufVxuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuXHRyZXR1cm4ge1xuXHRcdG5hbWU6ICdJTVNJV1Byb3h5U3R1YicsXG5cdFx0aW5zdGFuY2U6IG5ldyBJTVNJV1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuXHR9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvc2lwLnJldGhpbmstcHJvamVjdC5ldS9JTVNJV1Byb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar slackInfo = {\n  clientID: '11533603872.72434934356',\n  clientSecret: 'd427ef3c957d68a292dc7c4e20b78330',\n  redirectURI: location.origin,\n  codeEndpoint: 'https://slack.com/oauth/authorize?',\n  tokenEndpoint: 'https://slack.com/api/oauth.access?',\n  infoEndpoint: 'https://slack.com/api/users.info?',\n  scope: 'client'\n};\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\n/**\n* Function to exchange the code received to the id Token, access token and a refresh token\n*\n*/\nvar exchangeCode = function exchangeCode(code) {\n\n  var s = slackInfo;\n  var URL = s.tokenEndpoint + 'client_id=' + s.clientID + '&client_secret=' + s.clientSecret + '&code=' + code + '&redirect_uri=' + s.redirectURI;\n\n  console.log('URL', URL);\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('GET', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\n/**\n* Identity Provider Proxy\n*/\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    return new Promise(function (resolve, reject) {\n\n      console.log('assertion - >', assertion);\n      console.log('origin - >', origin);\n      console.log('MYPROXY - VALIDATING');\n      resolve({ identity: 'identity@idp.com', contents: 'content' });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n\n    console.log('contents->', contents);\n    console.log('origin->', origin);\n    console.log('hint->', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      //the hint field contains the information obtained after the user authentication\n      // if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n      var s = slackInfo;\n      if (!hint) {\n        //let requestUrl = https://slack.com/oauth/authorize?client_id=11533603872.72434934356&scope=chat:write:user&redirect_uri=https://www.getpostman.com/oauth2/callback;\n\n        var requestUrl = s.codeEndpoint + 'client_id=' + s.clientID + '&scope=' + s.scope + '&redirect_uri=' + s.redirectURI;\n\n        console.log('first url ', requestUrl, 'done');\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n      } else {\n        var code = urlParser(hint, 'code');\n        console.log('code', code);\n        exchangeCode(code).then(function (value) {\n\n          console.log('value AFTER exchangeCode', value);\n\n          var infoUrl = s.infoEndpoint + 'token=' + value.access_token + '&user=' + value.user_id;\n\n          sendHTTPRequest('GET', infoUrl).then(function (info) {\n            console.log('info->', info);\n\n            var profile = info.user.profile;\n            var infoToken = { picture: profile.image_original, email: profile.email, family_name: profile.last_name, given_name: profile.first_name, id: info.user.id };\n\n            var assertion = btoa(JSON.stringify({ tokenID: value.access_token, email: profile.email, id: info.user.id }));\n\n            var toResolve = { assertion: assertion, idp: { domain: 'slack.com', protocol: 'OAuth 2.0' }, infoToken: infoToken, interworking: { access_token: value.access_token, domain: 'slack.com' }, info: { expires: 3153600000 } };\n            console.log('RESOLVING THIS OBJECT', toResolve);\n            resolve(toResolve);\n          }, function (error) {\n            console.log('error->', error);\n          });\n        });\n      }\n    });\n  }\n};\n\n/**\n* Identity Provider Proxy Protocol Stub\n*/\n\nvar SlackProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function SlackProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, SlackProxyStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://slack.com') {\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(SlackProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[Slack Idp Proxy status changed] to ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return SlackProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'SlackProxyStub',\n    instance: new SlackProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NsYWNrL1NsYWNrUHJveHlTdHViLmlkcC5qcz8xNGYyIl0sIm5hbWVzIjpbImFjdGl2YXRlIiwic2xhY2tJbmZvIiwiY2xpZW50SUQiLCJjbGllbnRTZWNyZXQiLCJyZWRpcmVjdFVSSSIsImxvY2F0aW9uIiwib3JpZ2luIiwiY29kZUVuZHBvaW50IiwidG9rZW5FbmRwb2ludCIsImluZm9FbmRwb2ludCIsInNjb3BlIiwidXJsUGFyc2VyIiwidXJsIiwibmFtZSIsInJlcGxhY2UiLCJyZWdleFMiLCJyZWdleCIsIlJlZ0V4cCIsInJlc3VsdHMiLCJleGVjIiwic2VuZEhUVFBSZXF1ZXN0IiwibWV0aG9kIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImUiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiaW5mbyIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJleGNoYW5nZUNvZGUiLCJjb2RlIiwicyIsIlVSTCIsImNvbnNvbGUiLCJsb2ciLCJ0aGVuIiwiZXJyb3IiLCJpZHAiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsImlkZW50aXR5IiwiY29udGVudHMiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImhpbnQiLCJyZXF1ZXN0VXJsIiwibG9naW5VcmwiLCJ2YWx1ZSIsImluZm9VcmwiLCJhY2Nlc3NfdG9rZW4iLCJ1c2VyX2lkIiwicHJvZmlsZSIsInVzZXIiLCJpbmZvVG9rZW4iLCJwaWN0dXJlIiwiaW1hZ2Vfb3JpZ2luYWwiLCJlbWFpbCIsImZhbWlseV9uYW1lIiwibGFzdF9uYW1lIiwiZ2l2ZW5fbmFtZSIsImZpcnN0X25hbWUiLCJpZCIsImJ0b2EiLCJzdHJpbmdpZnkiLCJ0b2tlbklEIiwidG9SZXNvbHZlIiwiZG9tYWluIiwicHJvdG9jb2wiLCJpbnRlcndvcmtpbmciLCJleHBpcmVzIiwiU2xhY2tQcm94eVN0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiX3RoaXMiLCJtZXNzYWdlQnVzIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwicGFyYW1zIiwiYm9keSIsInVzZXJuYW1lSGludCIsInJlcGx5TWVzc2FnZSIsIm1lc3NhZ2UiLCJ0eXBlIiwiZnJvbSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkF1UXdCQSxROzs7O0FBdFF4QixJQUFJQyxZQUFZO0FBQ2RDLFlBQVUseUJBREk7QUFFZEMsZ0JBQWMsa0NBRkE7QUFHZEMsZUFBYUMsU0FBU0MsTUFIUjtBQUlkQyxnQkFBYyxvQ0FKQTtBQUtkQyxpQkFBZSxxQ0FMRDtBQU1kQyxnQkFBYyxtQ0FOQTtBQU9kQyxTQUFPO0FBUE8sQ0FBaEI7O0FBVUE7QUFDQSxTQUFTQyxTQUFULENBQW1CQyxHQUFuQixFQUF3QkMsSUFBeEIsRUFBOEI7QUFDNUJBLFNBQU9BLEtBQUtDLE9BQUwsQ0FBYSxNQUFiLEVBQXFCLE1BQXJCLEVBQTZCQSxPQUE3QixDQUFxQyxNQUFyQyxFQUE2QyxNQUE3QyxDQUFQO0FBQ0EsTUFBSUMsU0FBUyxZQUFZRixJQUFaLEdBQW1CLFdBQWhDO0FBQ0EsTUFBSUcsUUFBUSxJQUFJQyxNQUFKLENBQVdGLE1BQVgsQ0FBWjtBQUNBLE1BQUlHLFVBQVVGLE1BQU1HLElBQU4sQ0FBV1AsR0FBWCxDQUFkO0FBQ0EsTUFBSU0sWUFBWSxJQUFoQixFQUNBLE9BQU8sRUFBUCxDQURBLEtBR0EsT0FBT0EsUUFBUSxDQUFSLENBQVA7QUFDRDs7QUFFRCxTQUFTRSxlQUFULENBQXlCQyxNQUF6QixFQUFpQ1QsR0FBakMsRUFBc0M7QUFDcEMsTUFBSVUsTUFBTSxJQUFJQyxjQUFKLEVB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VSxJQUF2QyxFQUE2Q0EsTUFBTVYsSUFBSUMsRUFBdkQsRUFBMkRJLE1BQU0sRUFBQ25ELE1BQU0sR0FBUCxFQUFZZ0IsT0FBT0EsS0FBbkIsRUFBakUsRUFBZDs7QUFFQTJCLFlBQU1DLFVBQU4sQ0FBaUJhLFdBQWpCLENBQTZCSCxPQUE3QjtBQUNEOzs7Z0NBRVd0QyxLLEVBQU8wQyxNLEVBQVE7QUFDekIsVUFBSWYsUUFBUSxJQUFaOztBQUVBeEMsY0FBUUMsR0FBUixDQUFZLHNDQUFaLEVBQW9EWSxLQUFwRDs7QUFFQTJCLFlBQU1nQixNQUFOLEdBQWUzQyxLQUFmOztBQUVBLFVBQUk4QixNQUFNO0FBQ1JTLGNBQU0sUUFERTtBQUVSQyxjQUFNYixNQUFNSCxtQkFGSjtBQUdSTyxZQUFJSixNQUFNSCxtQkFBTixHQUE0QixTQUh4QjtBQUlSVyxjQUFNO0FBQ0puQyxpQkFBT0E7QUFESDtBQUpFLE9BQVY7O0FBU0EsVUFBSTBDLE1BQUosRUFBWTtBQUNWWixZQUFJSyxJQUFKLENBQVNTLElBQVQsR0FBZ0JGLE1BQWhCO0FBQ0Q7O0FBRURmLFlBQU1DLFVBQU4sQ0FBaUJhLFdBQWpCLENBQTZCWCxHQUE3QjtBQUNEOzs7Ozs7QUFHSDs7Ozs7Ozs7O0FBT2UsU0FBU3JGLFFBQVQsQ0FBa0JZLEdBQWxCLEVBQXVCb0UsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTHBFLFVBQU0sZ0JBREQ7QUFFTHVGLGNBQVUsSUFBSXRCLGNBQUosQ0FBbUJsRSxHQUFuQixFQUF3Qm9FLEdBQXhCLEVBQTZCQyxNQUE3QjtBQUZMLEdBQVA7QUFJRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5sZXQgc2xhY2tJbmZvID0ge1xuICBjbGllbnRJRDogJzExNTMzNjAzODcyLjcyNDM0OTM0MzU2JyxcbiAgY2xpZW50U2VjcmV0OiAnZDQyN2VmM2M5NTdkNjhhMjkyZGM3YzRlMjBiNzgzMzAnLFxuICByZWRpcmVjdFVSSTogbG9jYXRpb24ub3JpZ2luLFxuICBjb2RlRW5kcG9pbnQ6ICdodHRwczovL3NsYWNrLmNvbS9vYXV0aC9hdXRob3JpemU/JyxcbiAgdG9rZW5FbmRwb2ludDogJ2h0dHBzOi8vc2xhY2suY29tL2FwaS9vYXV0aC5hY2Nlc3M/JyxcbiAgaW5mb0VuZHBvaW50OiAnaHR0cHM6Ly9zbGFjay5jb20vYXBpL3VzZXJzLmluZm8/JyxcbiAgc2NvcGU6ICdjbGllbnQnXG59O1xuXG4vL2Z1bmN0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIFVSTCB0byBvYmF0aW4gY2VydGFpbiB2YWx1ZXNcbmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxcXF0nKTtcbiAgbGV0IHJlZ2V4UyA9ICdbXFxcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknO1xuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4Uyk7XG4gIGxldCByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xuICBpZiAocmVzdWx0cyA9PT0gbnVsbClcbiAgcmV0dXJuICcnO1xuICBlbHNlXG4gIHJldHVybiByZXN1bHRzWzFdO1xufVxuXG5mdW5jdGlvbiBzZW5kSFRUUFJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPSAndW5kZWZpbmVkJykge1xuICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuXG4gICAgLy8gWERvbWFpblJlcXVlc3Qgb25seSBleGlzdHMgaW4gSUUsIGFuZCBpcyBJRSdzIHdheSBvZiBtYWtpbmcgQ09SUyByZXF1ZXN0cy5cbiAgICB4aHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBDT1JTIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG4gICAgeGhyID0gbnVsbDtcbiAgfVxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcbiAgICBpZiAoeGhyKSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICBsZXQgaW5mbyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICByZXNvbHZlKGluZm8pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgICAgICByZWplY3QoJ1RoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSB0b2tlbicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4qIEZ1bmN0aW9uIHRvIGV4Y2hhbmdlIHRoZSBjb2RlIHJlY2VpdmVkIHRvIHRoZSBpZCBUb2tlbiwgYWNjZXNzIHRva2VuIGFuZCBhIHJlZnJlc2ggdG9rZW5cbipcbiovXG5sZXQgZXhjaGFuZ2VDb2RlID0gKGZ1bmN0aW9uKGNvZGUpIHtcblxuICBsZXQgcyA9IHNsYWNrSW5mbztcbiAgbGV0IFVSTCA9IHMudG9rZW5FbmRwb2ludCArICdjbGllbnRfaWQ9JyArIHMuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIHMuY2xpZW50U2VjcmV0ICsgJyZjb2RlPScgKyBjb2RlICsgJyZyZWRpcmVjdF91cmk9JyArICBzLnJlZGlyZWN0VVJJO1xuXG4gIGNvbnNvbGUubG9nKCdVUkwnLCBVUkwpO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cbi8qKlxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eVxuKi9cbmxldCBpZHAgPSB7XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgY29uc29sZS5sb2coJ2Fzc2VydGlvbiAtID4nLCBhc3NlcnRpb24pO1xuICAgICAgY29uc29sZS5sb2coJ29yaWdpbiAtID4nLCBvcmlnaW4pO1xuICAgICAgY29uc29sZS5sb2coJ01ZUFJPWFkgLSBWQUxJREFUSU5HJyk7XG4gICAgICByZXNvbHZlKHtpZGVudGl0eTogJ2lkZW50aXR5QGlkcC5jb20nLCBjb250ZW50czogJ2NvbnRlbnQnfSk7XG5cbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byBnZW5lcmF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb25cbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb25cbiAgKlxuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG4gIGdlbmVyYXRlQXNzZXJ0aW9uOiAoY29udGVudHMsIG9yaWdpbiwgaGludCkgPT4ge1xuXG4gICAgY29uc29sZS5sb2coJ2NvbnRlbnRzLT4nLCBjb250ZW50cyk7XG4gICAgY29uc29sZS5sb2coJ29yaWdpbi0+Jywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnaGludC0+JywgaGludCk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIC8vdGhlIGhpbnQgZmllbGQgY29udGFpbnMgdGhlIGluZm9ybWF0aW9uIG9idGFpbmVkIGFmdGVyIHRoZSB1c2VyIGF1dGhlbnRpY2F0aW9uXG4gICAgICAvLyBpZiB0aGUgaGludCBjb250ZW50IGlzIG5vdCBwcmVzZW50LCB0aGVuIHJlamVjdHMgdGhlIHZhbHVlIHdpdGggdGhlIFVSTCB0byBvcGVuIHRoZSBwYWdlIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlclxuICAgICAgbGV0IHMgPSBzbGFja0luZm87XG4gICAgICBpZiAoIWhpbnQpIHtcbiAgICAgICAgLy9sZXQgcmVxdWVzdFVybCA9IGh0dHBzOi8vc2xhY2suY29tL29hdXRoL2F1dGhvcml6ZT9jbGllbnRfaWQ9MTE1MzM2MDM4NzIuNzI0MzQ5MzQzNTYmc2NvcGU9Y2hhdDp3cml0ZTp1c2VyJnJlZGlyZWN0X3VyaT1odHRwczovL3d3dy5nZXRwb3N0bWFuLmNvbS9vYXV0aDIvY2FsbGJhY2s7XG5cbiAgICAgICAgbGV0IHJlcXVlc3RVcmwgPSBzLmNvZGVFbmRwb2ludCArICdjbGllbnRfaWQ9JyArIHMuY2xpZW50SUQgKyAnJnNjb3BlPScgKyBzLnNjb3BlICsgJyZyZWRpcmVjdF91cmk9JyArICBzLnJlZGlyZWN0VVJJO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdmaXJzdCB1cmwgJywgcmVxdWVzdFVybCwgJ2RvbmUnKTtcbiAgICAgICAgcmVqZWN0KHtuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsfSk7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBjb2RlID0gdXJsUGFyc2VyKGhpbnQsICdjb2RlJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjb2RlJywgY29kZSk7XG4gICAgICAgIGV4Y2hhbmdlQ29kZShjb2RlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygndmFsdWUgQUZURVIgZXhjaGFuZ2VDb2RlJywgdmFsdWUpO1xuXG4gICAgICAgICAgbGV0IGluZm9VcmwgPSBzLmluZm9FbmRwb2ludCArICd0b2tlbj0nICsgdmFsdWUuYWNjZXNzX3Rva2VuICsgJyZ1c2VyPScgKyB2YWx1ZS51c2VyX2lkO1xuXG4gICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVXJsKS50aGVuKGZ1bmN0aW9uKGluZm8pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdpbmZvLT4nLCBpbmZvKTtcblxuICAgICAgICAgICAgbGV0IHByb2ZpbGUgPSBpbmZvLnVzZXIucHJvZmlsZTtcbiAgICAgICAgICAgIGxldCBpbmZvVG9rZW4gPSB7cGljdHVyZTogcHJvZmlsZS5pbWFnZV9vcmlnaW5hbCwgZW1haWw6IHByb2ZpbGUuZW1haWwsIGZhbWlseV9uYW1lOiBwcm9maWxlLmxhc3RfbmFtZSwgZ2l2ZW5fbmFtZTogcHJvZmlsZS5maXJzdF9uYW1lLCBpZDogaW5mby51c2VyLmlkIH07XG5cbiAgICAgICAgICAgIGxldCBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHt0b2tlbklEOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGVtYWlsOiBwcm9maWxlLmVtYWlsLCBpZDogaW5mby51c2VyLmlkfSkpO1xuXG4gICAgICAgICAgICBsZXQgdG9SZXNvbHZlID0ge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IHtkb21haW46ICdzbGFjay5jb20nLCBwcm90b2NvbDogJ09BdXRoIDIuMCd9LCBpbmZvVG9rZW46IGluZm9Ub2tlbiwgaW50ZXJ3b3JraW5nOiB7YWNjZXNzX3Rva2VuOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGRvbWFpbjogJ3NsYWNrLmNvbScgfSwgaW5mbyA6IHtleHBpcmVzOiAzMTUzNjAwMDAwfX07XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnUkVTT0xWSU5HIFRISVMgT0JKRUNUJywgdG9SZXNvbHZlKTtcbiAgICAgICAgICAgIHJlc29sdmUodG9SZXNvbHZlKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yLT4nLCBlcnJvcik7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSk7XG5cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufTtcblxuLyoqXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiovXG5jbGFzcyBTbGFja1Byb3h5U3R1YiB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xuICAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcblxuICAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcbiAgICAgIGlmIChtc2cudG8gPT09ICdkb21haW4taWRwOi8vc2xhY2suY29tJykge1xuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuICAqXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xuICAqL1xuICByZXF1ZXN0VG9JZHAobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xuXG4gICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgaWRwLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuICAgICAgICBpZHAudmFsaWRhdGVBc3NlcnRpb24ocGFyYW1zLmFzc2VydGlvbiwgcGFyYW1zLm9yaWdpbikudGhlbihcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKlxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxuICAqL1xuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX07XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICB9XG5cbiAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBjb25zb2xlLmxvZygnW1NsYWNrIElkcCBQcm94eSBzdGF0dXMgY2hhbmdlZF0gdG8gJywgdmFsdWUpO1xuXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICBsZXQgbXNnID0ge1xuICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVhc29uKSB7XG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuICAgIH1cblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgfVxufVxuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdTbGFja1Byb3h5U3R1YicsXG4gICAgaW5zdGFuY2U6IG5ldyBTbGFja1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuICB9O1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9zbGFjay9TbGFja1Byb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.10",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}