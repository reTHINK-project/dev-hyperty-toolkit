{
  "FacebookIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = activate;\n\nvar _OAUTH = __webpack_require__(1);\n\nvar _Facebook = __webpack_require__(2);\n\nvar _AbstractIdpProxyStub = __webpack_require__(3);\n\nvar _AbstractIdpProxyStub2 = _interopRequireDefault(_AbstractIdpProxyStub);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n//import {facebookInfo} from \"./FacebookInfo\"\n\n\n/**\n* Google Identity Provider Proxy Protocol Stub\n*/\nvar FacebookIdpProxyProtoStub = function (_AbstractIdpProxyProt) {\n  _inherits(FacebookIdpProxyProtoStub, _AbstractIdpProxyProt);\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function FacebookIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, FacebookIdpProxyProtoStub);\n\n    config.idpUrl = 'domain-idp://facebook.com';\n    config.domain = 'facebook.com';\n    config.idpProxy = _OAUTH.IdpProxy;\n    //     config.idpInfo = facebookInfo;\n    config.convertUserProfile = _Facebook.convertUserProfile;\n    config.userInfoEndpoint = _Facebook.userInfoEndpoint;\n    config.authorisationEndpoint = _Facebook.authorisationEndpoint;\n    config.validateAssertionEndpoint = _Facebook.validateAssertionEndpoint;\n    return _possibleConstructorReturn(this, (FacebookIdpProxyProtoStub.__proto__ || Object.getPrototypeOf(FacebookIdpProxyProtoStub)).call(this, runtimeProtoStubURL, bus, config));\n  }\n\n  return FacebookIdpProxyProtoStub;\n}(_AbstractIdpProxyStub2.default);\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'FacebookIdpProxyProtoStub',\n    instance: new FacebookIdpProxyProtoStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2ZhY2Vib29rL0ZhY2Vib29rSWRwUHJveHlTdHViLmlkcC5qcz9iN2I5Il0sIm5hbWVzIjpbImFjdGl2YXRlIiwiRmFjZWJvb2tJZHBQcm94eVByb3RvU3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJpZHBVcmwiLCJkb21haW4iLCJpZHBQcm94eSIsIklkcFByb3h5IiwiY29udmVydFVzZXJQcm9maWxlIiwidXNlckluZm9FbmRwb2ludCIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsInZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQiLCJBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIiwidXJsIiwibmFtZSIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkF5Q3dCQSxROztBQXpDeEI7O0FBRUE7O0FBRUE7Ozs7Ozs7Ozs7O0FBSEE7OztBQUtBOzs7SUFHTUMseUI7OztBQUVKOzs7Ozs7OztBQVFBLHFDQUFZQyxtQkFBWixFQUFpQ0MsR0FBakMsRUFBc0NDLE1BQXRDLEVBQThDO0FBQUE7O0FBQzVDQSxXQUFPQyxNQUFQLEdBQWdCLDJCQUFoQjtBQUNBRCxXQUFPRSxNQUFQLEdBQWdCLGNBQWhCO0FBQ0FGLFdBQU9HLFFBQVAsR0FBa0JDLGVBQWxCO0FBQ0E7QUFDQUosV0FBT0ssa0JBQVAsR0FBNEJBLDRCQUE1QjtBQUNBTCxXQUFPTSxnQkFBUCxHQUEwQkEsMEJBQTFCO0FBQ0FOLFdBQU9PLHFCQUFQLEdBQStCQSwrQkFBL0I7QUFDQVAsV0FBT1EseUJBQVAsR0FBbUNBLG1DQUFuQztBQVI0QyxpSkFTdENWLG1CQVRzQyxFQVNqQkMsR0FUaUIsRUFTWkMsTUFUWTtBQVU3Qzs7O0VBcEJxQ1MsOEI7O0FBdUJ4Qzs7QUFFQTs7Ozs7Ozs7O0FBT2UsU0FBU2IsUUFBVCxDQUFrQmMsR0FBbEIsRUFBdUJYLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNqRCxTQUFPO0FBQ0xXLFVBQU0sMkJBREQ7QUFFTEMsY0FBVSxJQUFJZix5QkFBSixDQUE4QmEsR0FBOUIsRUFBbUNYLEdBQW5DLEVBQXdDQyxNQUF4QztBQUZMLEdBQVA7QUFJRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWRwUHJveHkgfSBmcm9tIFwiLi4vT0FVVEhcIlxuLy9pbXBvcnQge2ZhY2Vib29rSW5mb30gZnJvbSBcIi4vRmFjZWJvb2tJbmZvXCJcbmltcG9ydCB7IGNvbnZlcnRVc2VyUHJvZmlsZSwgdXNlckluZm9FbmRwb2ludCxcbiAgIGF1dGhvcmlzYXRpb25FbmRwb2ludCwgdmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludCB9IGZyb20gXCIuL0ZhY2Vib29rXCJcbmltcG9ydCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIGZyb20gXCIuLi9BYnN0cmFjdElkcFByb3h5U3R1YlwiXG5cbi8qKlxuKiBHb29nbGUgSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxuKi9cbmNsYXNzIEZhY2Vib29rSWRwUHJveHlQcm90b1N0dWIgZXh0ZW5kcyBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIHtcblxuICAvKipcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgKi9cbiAgY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBjb25maWcuaWRwVXJsID0gJ2RvbWFpbi1pZHA6Ly9mYWNlYm9vay5jb20nO1xuICAgIGNvbmZpZy5kb21haW4gPSAnZmFjZWJvb2suY29tJztcbiAgICBjb25maWcuaWRwUHJveHkgPSBJZHBQcm94eTtcbiAgICAvLyAgICAgY29uZmlnLmlkcEluZm8gPSBmYWNlYm9va0luZm87XG4gICAgY29uZmlnLmNvbnZlcnRVc2VyUHJvZmlsZSA9IGNvbnZlcnRVc2VyUHJvZmlsZTtcbiAgICBjb25maWcudXNlckluZm9FbmRwb2ludCA9IHVzZXJJbmZvRW5kcG9pbnQ7XG4gICAgY29uZmlnLmF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGF1dGhvcmlzYXRpb25FbmRwb2ludDtcbiAgICBjb25maWcudmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludCA9IHZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQ7XG4gICAgc3VwZXIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpO1xuICB9XG59XG5cbi8vIGV4cG9ydCBkZWZhdWx0IElkcFByb3h5UHJvdG9TdHViO1xuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdGYWNlYm9va0lkcFByb3h5UHJvdG9TdHViJyxcbiAgICBpbnN0YW5jZTogbmV3IEZhY2Vib29rSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZylcbiAgfTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZmFjZWJvb2svRmFjZWJvb2tJZHBQcm94eVN0dWIuaWRwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n//let identities = {};\n//let nIdentity = 0;\n//let redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\nvar userInfoEndpoint = void 0;\nvar tokenEndpoint = void 0;\nvar authorisationEndpoint = void 0;\nvar domain = void 0;\nvar accessTokenEndpoint = void 0;\nvar accessTokenAuthorisationEndpoint = void 0;\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\nvar exchangeRefreshToken = function exchangeRefreshToken(refreshToken) {\n  var i = googleInfo;\n\n  var URL = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + refreshToken + '&grant_type=refresh_token';\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar generateAssertionWithAccessToken = function generateAssertionWithAccessToken(contents, expires, info) {\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('GET', userInfoEndpoint(info)).then(function (infoToken) {\n      console.log('[OAUTH2.generateAssertion] obtained user profile ', infoToken);\n\n      var assertion = btoa(JSON.stringify({ tokenID: info.access_token, tokenIDJSON: infoToken, publicKey: contents }));\n      console.log('[OAUTH2.generateAssertion] atob assertion:', atob(assertion));\n      var idpBundle = { domain: domain, protocol: 'OAUTH2' };\n\n      //TODO delete later the field infoToken, and delete the need in the example\n      var returnValue = { assertion: assertion, idp: idpBundle, expires: expires, userProfile: infoToken };\n\n      /*      identities[nIdentity] = returnValue;\n            ++nIdentity;\n      */\n      console.log('[OAUTH2.generateAssertion] returning: ', JSON.stringify(returnValue));\n\n      resolve(returnValue);\n    });\n  });\n};\n\nvar generateAssertionWithCodeToken = function generateAssertionWithCodeToken(contents, expires, hint) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(hint, 'code');\n\n    if (!code) reject('[OAUTH2.generateAssertionWithCode] code not returned by the authentication: ', hint);\n\n    sendHTTPRequest('POST', tokenEndpoint(code)).then(function (info) {\n\n      if (info.hasOwnProperty('access_token')) resolve(generateAssertionWithAccessToken(contents, expires, info));else reject('[OAUTH2.generateAssertionWithCode] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar getAccessTokenWithCodeToken = function getAccessTokenWithCodeToken(resources, login) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(login, 'code');\n\n    if (!code) reject('[OAUTH2.getAccessTokenWithCodeToken] code not returned by the login result: ', login);\n\n    sendHTTPRequest('POST', accessTokenEndpoint(code)).then(function (info) {\n\n      if (info.hasOwnProperty('access_token')) {\n        var expires = getExpires(info);\n        resolve(accessTokenResult(resources, info.access_token, expires, info));\n      } else reject('[OAUTH2.getAccessTokenWithCodeToken] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar getExpires = exports.getExpires = function getExpires(url) {\n  var expires = urlParser(url, 'expires_in');\n\n  if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n  return expires;\n};\n\nvar accessTokenResult = function accessTokenResult(resources, accessToken, expires, input, refresh) {\n\n  var result = { domain: domain, resources: resources, accessToken: accessToken, expires: expires, input: input };\n\n  if (refresh) result.refresh = refresh;\n\n  return result;\n};\n\n/**\n* Identity Provider Proxy\n*/\nvar IdpProxy = exports.IdpProxy = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(config, assertion, origin) {\n    console.info('[OAUTH2.validateAssertion] assertion: ', atob(assertion));\n    userInfoEndpoint = config.userInfoEndpoint;\n    domain = config.domain;\n\n    return new Promise(function (resolve, reject) {\n      //      let i = idpInfo;\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      sendHTTPRequest('GET', config.validateAssertionEndpoint({ access_token: content.tokenID, input: content.tokenIDJSON })).then(function (result) {\n        if (JSON.stringify(result) === JSON.stringify(content.tokenIDJSON)) {\n          //        if (result.hasOwnProperty('name')) {\n          resolve({ identity: config.convertUserProfile(result).id, contents: content.publicKey });\n        } else {\n          reject('invalid');\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n  /*\n    refreshAssertion: (identity) => {\n      //console.log('PROXY:refreshAssertion:oldIdentity', identity);\n      let i = googleInfo;\n  \n      return new Promise(function(resolve, reject) {\n        if (identity.info.refreshToken) {\n          exchangeRefreshToken(identity.info.refreshToken).then(function(value) {\n            let infoTokenURL = i.userinfo + value.access_token;\n            sendHTTPRequest('GET', infoTokenURL).then(function(infoToken) {\n  \n              let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: identity.info.refreshToken, tokenType: identity.info.tokenType, infoToken: infoToken};\n              let idTokenURL = i.tokenInfo + value.id_token;\n  \n              //obtain information about the user idToken\n              sendHTTPRequest('GET', idTokenURL).then(function(idToken) {\n  \n                identityBundle.tokenIDJSON = idToken;\n                identityBundle.expires = idToken.exp;\n                identityBundle.email = idToken.email;\n  \n                let oldIDToken = JSON.parse(atob(identity.assertion));\n                let oldIdTokenSplited = oldIDToken.tokenID.split('.');\n                let oldDecodedIDToken = JSON.parse(atob(oldIdTokenSplited[1]));\n                let idNonce = oldDecodedIDToken.nonce;\n  \n                let receivedIDToken = value.id_token;\n                let idTokenSplited = receivedIDToken.split('.');\n                let decodedIDToken = JSON.parse(atob(idTokenSplited[1]));\n  \n                decodedIDToken.nonce = idNonce;\n                let insertedNonce = btoa(JSON.stringify(decodedIDToken));\n                let newIDToken = idTokenSplited[0] + '.' +\n                                   insertedNonce + '.' +\n                                   idTokenSplited[2];\n  \n                let assertion = btoa(JSON.stringify({tokenID: newIDToken, tokenIDJSON: idToken}));\n                let idpBundle = {domain: 'google.com', protocol: 'OIDC'};\n  \n                //TODO delete later the field infoToken, and delete the need in the example\n                let returnValue = {assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken};\n                //console.log('PROXY:refreshAssertion:newIdentity', returnValue);\n                resolve(returnValue);\n              });\n            });\n          });\n        }\n      });\n    },*/\n\n  /**\n  * Function to generate an identity Assertion\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(config, contents, origin, hint) {\n    console.log('[OAUTH2.generateAssertion:config]', config);\n    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.generateAssertion:hint]', hint);\n    //    let i = idpInfo;\n    userInfoEndpoint = config.userInfoEndpoint;\n    tokenEndpoint = config.tokenEndpoint;\n    authorisationEndpoint = config.authorisationEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n\n        //        console.log('[OAUTH2.generateAssertion] NO_HINT: rejecting with requestUrl ', requestUrl);\n\n        reject({ name: 'IdPLoginError', loginUrl: authorisationEndpoint(contents) });\n      } else {\n        // the request have already been made, so idpPRoxy will try to access the user information\n        var expires = urlParser(hint, 'expires_in');\n\n        if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n        var accessToken = urlParser(hint, 'access_token');\n\n        if (accessToken) resolve(generateAssertionWithAccessToken(contents, expires, { access_token: accessToken }));else resolve(generateAssertionWithCodeToken(contents, expires, hint));\n      }\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\n  * Function to get an Access Token\n  *\n  * @param  {config}      Object information about IdP endpoints\n  * @param  {resources} Object contents includes information about the identity received\n  * @return {Promise} returns a promise with an identity assertion\n  */\n\n  getAccessTokenAuthorisationEndpoint: function getAccessTokenAuthorisationEndpoint(config, resources) {\n    console.log('[OAUTH2.getAccessTokenAuthorisationEndpoint:config]', config);\n    //    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    //    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.getAccessTokenAuthorisationEndpoint:resources]', resources);\n    //    let i = idpInfo;\n    accessTokenAuthorisationEndpoint = config.accessTokenAuthorisationEndpoint;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n\n      resolve(accessTokenAuthorisationEndpoint(resources));\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\n  * Function to get an Access Token\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {login} optional login result\n  * @return {Promise} returns a promise with an identity assertion\n  */\n\n  getAccessToken: function getAccessToken(config, resources, login) {\n    console.log('[OAUTH2.getAccessToken:config]', config);\n    //    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    //    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.getAccessToken:login]', login);\n    //    let i = idpInfo;\n    accessTokenEndpoint = config.accessTokenEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // the user is loggedin, try to extract the Access Token and its expires\n      var expires = getExpires(login);\n\n      var accessToken = urlParser(login, 'access_token');\n\n      if (accessToken) resolve(accessTokenResult(resources, accessToken, expires, login));else resolve(getAccessTokenWithCodeToken(resources, login));\n    }, function (e) {\n\n      reject(e);\n    });\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L09BVVRILmpzPzYyODAiXSwibmFtZXMiOlsidXNlckluZm9FbmRwb2ludCIsInRva2VuRW5kcG9pbnQiLCJhdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJkb21haW4iLCJhY2Nlc3NUb2tlbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJ1cmxQYXJzZXIiLCJ1cmwiLCJuYW1lIiwicmVwbGFjZSIsInJlZ2V4UyIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJzZW5kSFRUUFJlcXVlc3QiLCJtZXRob2QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJYRG9tYWluUmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJpbmZvIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwic2VuZCIsImV4Y2hhbmdlUmVmcmVzaFRva2VuIiwicmVmcmVzaFRva2VuIiwiaSIsImdvb2dsZUluZm8iLCJVUkwiLCJjbGllbnRJRCIsImNsaWVudFNlY3JldCIsInRoZW4iLCJlcnJvciIsImdlbmVyYXRlQXNzZXJ0aW9uV2l0aEFjY2Vzc1Rva2VuIiwiY29udGVudHMiLCJleHBpcmVzIiwiaW5mb1Rva2VuIiwiY29uc29sZSIsImxvZyIsImFzc2VydGlvbiIsImJ0b2EiLCJzdHJpbmdpZnkiLCJ0b2tlbklEIiwiYWNjZXNzX3Rva2VuIiwidG9rZW5JREpTT04iLCJwdWJsaWNLZXkiLCJhdG9iIiwiaWRwQnVuZGxlIiwicHJvdG9jb2wiLCJyZXR1cm5WYWx1ZSIsImlkcCIsInVzZXJQcm9maWxlIiwiZ2VuZXJhdGVBc3NlcnRpb25XaXRoQ29kZVRva2VuIiwiaGludCIsImNvZGUiLCJoYXNPd25Qcm9wZXJ0eSIsImdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbiIsInJlc291cmNlcyIsImxvZ2luIiwiZ2V0RXhwaXJlcyIsImFjY2Vzc1Rva2VuUmVzdWx0IiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsImFjY2Vzc1Rva2VuIiwiaW5wdXQiLCJyZWZyZXNoIiwicmVzdWx0IiwiSWRwUHJveHkiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImNvbmZpZyIsIm9yaWdpbiIsImRlY29kZWRDb250ZW50IiwiY29udGVudCIsInZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQiLCJpZGVudGl0eSIsImNvbnZlcnRVc2VyUHJvZmlsZSIsImlkIiwiY2F0Y2giLCJlcnIiLCJnZW5lcmF0ZUFzc2VydGlvbiIsIl90aGlzIiwibG9naW5VcmwiLCJnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCIsImdldEFjY2Vzc1Rva2VuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSx5QkFBSjtBQUNBLElBQUlDLHNCQUFKO0FBQ0EsSUFBSUMsOEJBQUo7QUFDQSxJQUFJQyxlQUFKO0FBQ0EsSUFBSUMsNEJBQUo7QUFDQSxJQUFJQyx5Q0FBSjs7QUFFQTtBQUNBLFNBQVNDLFNBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QjtBQUM1QkEsU0FBT0EsS0FBS0MsT0FBTCxDQUFhLE1BQWIsRUFBcUIsTUFBckIsRUFBNkJBLE9BQTdCLENBQXFDLE1BQXJDLEVBQTZDLE1BQTdDLENBQVA7QUFDQSxNQUFJQyxTQUFTLFlBQVlGLElBQVosR0FBbUIsV0FBaEM7QUFDQSxNQUFJRyxRQUFRLElBQUlDLE1BQUosQ0FBV0YsTUFBWCxDQUFaO0FBQ0EsTUFBSUcsVUFBVUYsTUFBTUcsSUFBTixDQUFXUCxHQUFYLENBQWQ7QUFDQSxNQUFJTSxZQUFZLElBQWhCLEVBQ0UsT0FBTyxFQUFQLENBREYsS0FHRSxPQUFPQSxRQUFRLENBQVIsQ0FBUDtBQUNIOztBQUVELFNBQVNFLGVBQVQsQ0FBeUJDLE1BQXpCLEVBQWlDVCxH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QUFDQSxVQUFJcUIsVUFBVXdCLFdBQVdELEtBQVgsQ0FBZDs7QUFFQSxVQUFJTyxjQUFjcEUsVUFBVTZELEtBQVYsRUFBaUIsY0FBakIsQ0FBbEI7O0FBRUEsVUFBSU8sV0FBSixFQUFpQnBELFFBQVMrQyxrQkFBa0JILFNBQWxCLEVBQTZCUSxXQUE3QixFQUEwQzlCLE9BQTFDLEVBQW1EdUIsS0FBbkQsQ0FBVCxFQUFqQixLQUNLN0MsUUFBUzJDLDRCQUE0QkMsU0FBNUIsRUFBdUNDLEtBQXZDLENBQVQ7QUFDUixLQVJNLEVBUUosVUFBVTFDLENBQVYsRUFBYTs7QUFFZEYsYUFBT0UsQ0FBUDtBQUNELEtBWE0sQ0FBUDtBQVlEOztBQTlMbUIsQ0FBZiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vL2xldCBpZGVudGl0aWVzID0ge307XG4vL2xldCBuSWRlbnRpdHkgPSAwO1xuLy9sZXQgcmVkaXJlY3RVUkkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICE9PSAnJyA/ICc6JyArIGxvY2F0aW9uLnBvcnQgOiAnJyk7XG5sZXQgdXNlckluZm9FbmRwb2ludDtcbmxldCB0b2tlbkVuZHBvaW50O1xubGV0IGF1dGhvcmlzYXRpb25FbmRwb2ludDtcbmxldCBkb21haW47XG5sZXQgYWNjZXNzVG9rZW5FbmRwb2ludDtcbmxldCBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDtcblxuLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzXG5mdW5jdGlvbiB1cmxQYXJzZXIodXJsLCBuYW1lKSB7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXFxdJyk7XG4gIGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJztcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpO1xuICBsZXQgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKHJlc3VsdHMgPT09IG51bGwpXG4gICAgcmV0dXJuICcnO1xuICBlbHNlXG4gICAgcmV0dXJuIHJlc3VsdHNbMV07XG59XG5cbmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkge1xuICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBYRG9tYWluUmVxdWVzdC5cbiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLlxuICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIENPUlMgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci5cbiAgICB4aHIgPSBudWxsO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHhocikge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIGxldCBpbmZvID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIHJlc29sdmUoaW5mbyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh4aHIuc3RhdHVzID09PSA0MDApIHtcbiAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnc29tZXRoaW5nIGVsc2Ugb3RoZXIgdGhhbiAyMDAgd2FzIHJldHVybmVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgeGhyLnNlbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KCdDT1JTIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG5sZXQgZXhjaGFuZ2VSZWZyZXNoVG9rZW4gPSAoZnVuY3Rpb24gKHJlZnJlc2hUb2tlbikge1xuICBsZXQgaSA9IGdvb2dsZUluZm87XG5cbiAgbGV0IFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWZyZXNoX3Rva2VuPScgKyByZWZyZXNoVG9rZW4gKyAnJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlbic7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgIHJlc29sdmUoaW5mbyk7XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cbmxldCBnZW5lcmF0ZUFzc2VydGlvbldpdGhBY2Nlc3NUb2tlbiA9ICggZnVuY3Rpb24gKGNvbnRlbnRzLCBleHBpcmVzLCBpbmZvKSB7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIHVzZXJJbmZvRW5kcG9pbnQoaW5mbykpLnRoZW4oZnVuY3Rpb24gKGluZm9Ub2tlbikge1xuICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIHVzZXIgcHJvZmlsZSAnLCBpbmZvVG9rZW4pO1xuXG4gICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7IHRva2VuSUQ6IGluZm8uYWNjZXNzX3Rva2VuLCB0b2tlbklESlNPTjogaW5mb1Rva2VuLCBwdWJsaWNLZXk6IGNvbnRlbnRzIH0pKTtcbiAgICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uXSBhdG9iIGFzc2VydGlvbjonLCBhdG9iKGFzc2VydGlvbikpO1xuICAgICAgbGV0IGlkcEJ1bmRsZSA9IHsgZG9tYWluOiBkb21haW4sIHByb3RvY29sOiAnT0FVVEgyJyB9O1xuXG4gICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHsgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBleHBpcmVzOiBleHBpcmVzLCB1c2VyUHJvZmlsZTogaW5mb1Rva2VuIH07XG5cbi8qICAgICAgaWRlbnRpdGllc1tuSWRlbnRpdHldID0gcmV0dXJuVmFsdWU7XG4gICAgICArK25JZGVudGl0eTtcbiovXG4gICAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbl0gcmV0dXJuaW5nOiAnLCBKU09OLnN0cmluZ2lmeShyZXR1cm5WYWx1ZSkpO1xuXG4gICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxubGV0IGdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVUb2tlbiA9IChmdW5jdGlvbiAoIGNvbnRlbnRzLCBleHBpcmVzLCBoaW50KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbGV0IGNvZGUgPSB1cmxQYXJzZXIoaGludCwgJ2NvZGUnKTtcblxuICAgIGlmICghY29kZSkgcmVqZWN0KCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVdIGNvZGUgbm90IHJldHVybmVkIGJ5IHRoZSBhdXRoZW50aWNhdGlvbjogJywgaGludCk7XG5cbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIHRva2VuRW5kcG9pbnQoY29kZSkpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcblxuICAgICAgICBpZiAoaW5mby5oYXNPd25Qcm9wZXJ0eSgnYWNjZXNzX3Rva2VuJykpIFxuICAgICAgICAgIHJlc29sdmUoZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4oIGNvbnRlbnRzLCBleHBpcmVzLCBpbmZvKSApO1xuICAgICAgICBlbHNlIHJlamVjdCgnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlXSBhY2Nlc3MgdG9rZW4gbm90IHJldHVybmVkIGluIHRoZSBleGNoYW5nZSBjb2RlIHJlc3VsdDogJywgaW5mbyk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cbmxldCBnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4gPSAoZnVuY3Rpb24gKHJlc291cmNlcywgbG9naW4pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgY29kZSA9IHVybFBhcnNlcihsb2dpbiwgJ2NvZGUnKTtcblxuICAgIGlmICghY29kZSkgcmVqZWN0KCdbT0FVVEgyLmdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbl0gY29kZSBub3QgcmV0dXJuZWQgYnkgdGhlIGxvZ2luIHJlc3VsdDogJywgbG9naW4pO1xuXG4gICAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBhY2Nlc3NUb2tlbkVuZHBvaW50KGNvZGUpKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG5cbiAgICAgICAgaWYgKGluZm8uaGFzT3duUHJvcGVydHkoJ2FjY2Vzc190b2tlbicpKSB7XG4gICAgICAgICAgbGV0IGV4cGlyZXMgPSBnZXRFeHBpcmVzKGluZm8pO1xuICAgICAgICAgIHJlc29sdmUgKGFjY2Vzc1Rva2VuUmVzdWx0KHJlc291cmNlcywgaW5mby5hY2Nlc3NfdG9rZW4sIGV4cGlyZXMsIGluZm8pKTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCgnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW5dIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAnLCBpbmZvKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgfSk7XG59KTtcblxuZXhwb3J0IGxldCBnZXRFeHBpcmVzID0gKGZ1bmN0aW9uICh1cmwpIHtcbiAgbGV0IGV4cGlyZXMgPSB1cmxQYXJzZXIodXJsLCAnZXhwaXJlc19pbicpO1xuXG4gIGlmIChleHBpcmVzKSBleHBpcmVzID0gZXhwaXJlcyArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuICBlbHNlIGV4cGlyZXMgPSAzMTUzNjAwMDAwICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgcmV0dXJuIGV4cGlyZXM7XG5cbn0pO1xuXG5cbmxldCBhY2Nlc3NUb2tlblJlc3VsdCA9IChmdW5jdGlvbiAocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgaW5wdXQsIHJlZnJlc2gpIHtcblxuICBsZXQgcmVzdWx0ID0geyBkb21haW46IGRvbWFpbiwgcmVzb3VyY2VzOiByZXNvdXJjZXMsIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbiwgZXhwaXJlczogZXhwaXJlcywgaW5wdXQ6IGlucHV0IH07XG5cbiAgaWYgKHJlZnJlc2gpIHJlc3VsdC5yZWZyZXNoID0gcmVmcmVzaDtcblxuICByZXR1cm4gcmVzdWx0O1xuXG59KTtcblxuLyoqXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5XG4qL1xuZXhwb3J0IGxldCBJZHBQcm94eSA9IHtcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byB2YWxpZGF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb24gcmVjZWl2ZWRcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtpZHBJbmZvfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoY29uZmlnLCBhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xuICAgIGNvbnNvbGUuaW5mbygnW09BVVRIMi52YWxpZGF0ZUFzc2VydGlvbl0gYXNzZXJ0aW9uOiAnLCBhdG9iKGFzc2VydGlvbikpO1xuICAgIHVzZXJJbmZvRW5kcG9pbnQgPSBjb25maWcudXNlckluZm9FbmRwb2ludDtcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbi8vICAgICAgbGV0IGkgPSBpZHBJbmZvO1xuICAgICAgbGV0IGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pO1xuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgY29uZmlnLnZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQoe2FjY2Vzc190b2tlbjogY29udGVudC50b2tlbklELCBpbnB1dDogY29udGVudC50b2tlbklESlNPTiB9KSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSA9PT0gSlNPTi5zdHJpbmdpZnkoY29udGVudC50b2tlbklESlNPTikpIHtcbiAgICAgICAgICAvLyAgICAgICAgaWYgKHJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpKSB7XG4gICAgICAgICAgcmVzb2x2ZSh7IGlkZW50aXR5OiBjb25maWcuY29udmVydFVzZXJQcm9maWxlKHJlc3VsdCkuaWQsIGNvbnRlbnRzOiBjb250ZW50LnB1YmxpY0tleSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2ludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgLypcbiAgICByZWZyZXNoQXNzZXJ0aW9uOiAoaWRlbnRpdHkpID0+IHtcbiAgICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246b2xkSWRlbnRpdHknLCBpZGVudGl0eSk7XG4gICAgICBsZXQgaSA9IGdvb2dsZUluZm87XG4gIFxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICBleGNoYW5nZVJlZnJlc2hUb2tlbihpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcbiAgXG4gICAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiBpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbiwgdG9rZW5UeXBlOiBpZGVudGl0eS5pbmZvLnRva2VuVHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuICAgICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XG4gIFxuICAgICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXG4gICAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XG4gIFxuICAgICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjtcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbi5leHA7XG4gICAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsO1xuICBcbiAgICAgICAgICAgICAgICBsZXQgb2xkSURUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZGVudGl0eS5hc3NlcnRpb24pKTtcbiAgICAgICAgICAgICAgICBsZXQgb2xkSWRUb2tlblNwbGl0ZWQgPSBvbGRJRFRva2VuLnRva2VuSUQuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICBsZXQgb2xkRGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2Iob2xkSWRUb2tlblNwbGl0ZWRbMV0pKTtcbiAgICAgICAgICAgICAgICBsZXQgaWROb25jZSA9IG9sZERlY29kZWRJRFRva2VuLm5vbmNlO1xuICBcbiAgICAgICAgICAgICAgICBsZXQgcmVjZWl2ZWRJRFRva2VuID0gdmFsdWUuaWRfdG9rZW47XG4gICAgICAgICAgICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gcmVjZWl2ZWRJRFRva2VuLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgICAgbGV0IGRlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XG4gIFxuICAgICAgICAgICAgICAgIGRlY29kZWRJRFRva2VuLm5vbmNlID0gaWROb25jZTtcbiAgICAgICAgICAgICAgICBsZXQgaW5zZXJ0ZWROb25jZSA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoZGVjb2RlZElEVG9rZW4pKTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3SURUb2tlbiA9IGlkVG9rZW5TcGxpdGVkWzBdICsgJy4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWROb25jZSArICcuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkVG9rZW5TcGxpdGVkWzJdO1xuICBcbiAgICAgICAgICAgICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogbmV3SURUb2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XG4gICAgICAgICAgICAgICAgbGV0IGlkcEJ1bmRsZSA9IHtkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJ307XG4gIFxuICAgICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxuICAgICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpuZXdJZGVudGl0eScsIHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwqL1xuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxuICAqXG4gICogQHBhcmFtICB7aWRwSW5mb30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG4gIGdlbmVyYXRlQXNzZXJ0aW9uOiAoY29uZmlnLCBjb250ZW50cywgb3JpZ2luLCBoaW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29uZmlnXScsIGNvbmZpZyk7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmhpbnRdJywgaGludCk7XG4vLyAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgdXNlckluZm9FbmRwb2ludCA9IGNvbmZpZy51c2VySW5mb0VuZHBvaW50O1xuICAgIHRva2VuRW5kcG9pbnQgPSBjb25maWcudG9rZW5FbmRwb2ludDtcbiAgICBhdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBjb25maWcuYXV0aG9yaXNhdGlvbkVuZHBvaW50O1xuICAgIGRvbWFpbiA9IGNvbmZpZy5kb21haW47XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmICghaGludCkge1xuXG4vLyAgICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIE5PX0hJTlQ6IHJlamVjdGluZyB3aXRoIHJlcXVlc3RVcmwgJywgcmVxdWVzdFVybCk7XG5cbiAgICAgICAgcmVqZWN0KHsgbmFtZTogJ0lkUExvZ2luRXJyb3InLCBsb2dpblVybDogYXV0aG9yaXNhdGlvbkVuZHBvaW50KGNvbnRlbnRzKSB9KTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlIHJlcXVlc3QgaGF2ZSBhbHJlYWR5IGJlZW4gbWFkZSwgc28gaWRwUFJveHkgd2lsbCB0cnkgdG8gYWNjZXNzIHRoZSB1c2VyIGluZm9ybWF0aW9uXG4gICAgICAgIGxldCBleHBpcmVzID0gdXJsUGFyc2VyKGhpbnQsICdleHBpcmVzX2luJyk7XG5cbiAgICAgICAgaWYgKGV4cGlyZXMpIGV4cGlyZXMgPSBleHBpcmVzICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICAgIGVsc2UgZXhwaXJlcyA9IDMxNTM2MDAwMDAgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxuICAgICAgICBsZXQgYWNjZXNzVG9rZW4gPSB1cmxQYXJzZXIoaGludCwgJ2FjY2Vzc190b2tlbicpO1xuXG4gICAgICAgIGlmIChhY2Nlc3NUb2tlbikgcmVzb2x2ZSggZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4oY29udGVudHMsIGV4cGlyZXMse2FjY2Vzc190b2tlbjogYWNjZXNzVG9rZW59ICkgKTtcbiAgICAgICAgZWxzZSByZXNvbHZlKCBnZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlVG9rZW4oY29udGVudHMsIGV4cGlyZXMsIGhpbnQpICk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgcmVqZWN0KGUpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cbiAgKlxuICAqIEBwYXJhbSAge2NvbmZpZ30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xuICAqIEBwYXJhbSAge3Jlc291cmNlc30gT2JqZWN0IGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG5cbiAgZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6IChjb25maWcsIHJlc291cmNlcykgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50OmNvbmZpZ10nLCBjb25maWcpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6cmVzb3VyY2VzXScsIHJlc291cmNlcyk7XG4vLyAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICByZXNvbHZlKCBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChyZXNvdXJjZXMpKTtcblxuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfSxcbiAgXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cbiAgKlxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHtsb2dpbn0gb3B0aW9uYWwgbG9naW4gcmVzdWx0XG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cbiAgKi9cblxuICBnZXRBY2Nlc3NUb2tlbjogKGNvbmZpZywgcmVzb3VyY2VzLCBsb2dpbikgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdldEFjY2Vzc1Rva2VuOmNvbmZpZ10nLCBjb25maWcpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW46bG9naW5dJywgbG9naW4pO1xuLy8gICAgbGV0IGkgPSBpZHBJbmZvO1xuICAgIGFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5FbmRwb2ludDtcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIHRoZSB1c2VyIGlzIGxvZ2dlZGluLCB0cnkgdG8gZXh0cmFjdCB0aGUgQWNjZXNzIFRva2VuIGFuZCBpdHMgZXhwaXJlc1xuICAgICAgICBsZXQgZXhwaXJlcyA9IGdldEV4cGlyZXMobG9naW4pO1xuXG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihsb2dpbiwgJ2FjY2Vzc190b2tlbicpO1xuXG4gICAgICAgIGlmIChhY2Nlc3NUb2tlbikgcmVzb2x2ZSggYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgbG9naW4pICk7XG4gICAgICAgIGVsc2UgcmVzb2x2ZSggZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuKHJlc291cmNlcywgbG9naW4pICk7XG4gICAgfSwgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgcmVqZWN0KGUpO1xuICAgIH0pO1xuICB9XG5cblxuXG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L09BVVRILmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertUserProfile = convertUserProfile;\nexports.userInfoEndpoint = userInfoEndpoint;\nexports.authorisationEndpoint = authorisationEndpoint;\nexports.validateAssertionEndpoint = validateAssertionEndpoint;\n\n/*\n\tSo that an application can use Facebook's OAuth 2.0 authentication system for user login,\n  first is required to set up a project in the Facebook Developers Console (https://developers.facebook.com/apps/) \n  to obtain OAuth 2.0 credentials and set a redirect URI.\n */\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\nvar facebookInfo = {\n  \"clientID\": \"516850078685290\",\n  \"authorisationEndpoint\": \"https://www.facebook.com/v2.11/dialog/oauth?\",\n  \"userinfo\": \"https://graph.facebook.com/v2.2/me/?fields=id,first_name,last_name,name,picture,email&access_token=\",\n  \"type\": \"token\",\n  \"granted_scopes\": \"email,public_profile\",\n  \"state\": \"state\",\n  \"domain\": \"facebook.com\"\n};\n\n// function to convert google user profile info into standard reTHINK user profile object\n\nfunction convertUserProfile(userProfile) {\n\n  console.log('[FaceboolUserProfileConverter] ', userProfile);\n  userProfile.name = userProfile.first_name + ' ' + userProfile.last_name;\n\n  userProfile.userURL = 'user://facebook.com/' + userProfile.name;\n\n  userProfile.picture = userProfile.picture.data.url;\n\n  if (!userProfile.hasOwnProperty('preferred_username')) userProfile.preferred_username = userProfile.last_name;\n\n  return userProfile;\n}\n\nfunction userInfoEndpoint(info) {\n\n  return facebookInfo.userinfo + info.access_token;\n}\n\nfunction authorisationEndpoint(nonce) {\n\n  var url = facebookInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + facebookInfo.type + '&client_id=' + facebookInfo.clientID + '&granted_scopes=' + facebookInfo.granted_scopes + '&nonce=' + nonce + '&state=' + nonce;\n  console.log('[Slack.authorisationEndpoint] ', url);\n  return url;\n}\n\nfunction validateAssertionEndpoint(info) {\n\n  return facebookInfo.userinfo + info.access_token;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2ZhY2Vib29rL0ZhY2Vib29rLmpzPzk1YmQiXSwibmFtZXMiOlsiY29udmVydFVzZXJQcm9maWxlIiwidXNlckluZm9FbmRwb2ludCIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsInZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQiLCJyZWRpcmVjdFVSSSIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInBvcnQiLCJmYWNlYm9va0luZm8iLCJ1c2VyUHJvZmlsZSIsImNvbnNvbGUiLCJsb2ciLCJuYW1lIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsInVzZXJVUkwiLCJwaWN0dXJlIiwiZGF0YSIsInVybCIsImhhc093blByb3BlcnR5IiwicHJlZmVycmVkX3VzZXJuYW1lIiwiaW5mbyIsInVzZXJpbmZvIiwiYWNjZXNzX3Rva2VuIiwibm9uY2UiLCJ0eXBlIiwiY2xpZW50SUQiLCJncmFudGVkX3Njb3BlcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFzQmdCQSxrQixHQUFBQSxrQjtRQWtCQUMsZ0IsR0FBQUEsZ0I7UUFNQUMscUIsR0FBQUEscUI7UUFhQUMseUIsR0FBQUEseUI7O0FBMURoQjs7Ozs7QUFLQSxJQUFJQyxjQUFjQyxTQUFTQyxRQUFULEdBQW9CLElBQXBCLEdBQTJCRCxTQUFTRSxRQUFwQyxJQUFnREYsU0FBU0csSUFBVCxLQUFrQixFQUFsQixHQUF1QixNQUFNSCxTQUFTRyxJQUF0QyxHQUE2QyxFQUE3RixDQUFsQjs7QUFFQSxJQUFJQyxlQUFlO0FBQ2pCLGNBQXdCLGlCQURQO0FBRWpCLDJCQUF5Qiw4Q0FGUjtBQUdqQixjQUF5QixxR0FIUjtBQUlqQixVQUF5QixPQUpSO0FBS2pCLG9CQUF5QixzQkFMUjtBQU1qQixXQUF5QixPQU5SO0FBT2pCLFlBQXlCO0FBUFIsQ0FBbkI7O0FBWUE7O0FBRU8sU0FBU1Qsa0JBQVQsQ0FBNEJVLFdBQTVCLEVBQXlDOztBQUU5Q0MsVUFBUUMsR0FBUixDQUFZLGlDQUFaLEVBQStDRixXQUEvQztBQUNBQSxjQUFZRyxJQUFaLEdBQW1CSCxZQUFZSSxVQUFaLEdBQXlCLEdBQXpCLEdBQStCSixZQUFZSyxTQUE5RDs7QUFFQUwsY0FBWU0sT0FBWixHQUFzQix5QkFBeUJOLFlBQVlHLElBQTNEOztBQUVBSCxjQUFZTyxPQUFaLEdBQXNCUCxZQUFZTyxPQUFaLENBQW9CQyxJQUFwQixDQUF5QkMsR0FBL0M7O0FBRUEsTUFBSSxDQUFDVCxZQUFZVSxjQUFaLENBQTJCLG9CQUEzQixDQUFMLEVBQ0FWLFlBQVlXLGtCQUFaLEdBQWlDWCxZQUFZSyxTQUE3Qzs7QUFHQSxTQUFPTCxXQUFQO0FBQ0Q7O0FBSU0sU0FBU1QsZ0JBQVQsQ0FBMEJxQixJQUExQixFQUFnQzs7QUFFckMsU0FBT2IsYUFBYWMsUUFBYixHQUF3QkQsS0FBS0UsWUFBcEM7QUFFRDs7QUFFTSxTQUFTdEIscUJBQVQsQ0FBK0J1QixLQUEvQixFQUFzQzs7QUFFM0MsTUFBSU4sTUFBTVYsYUFBYVAscUJBQWIsR0FDTixlQURNLEdBQ1lFLFdBRFosR0FFTixpQkFGTSxHQUVjSyxhQUFhaUIsSUFGM0IsR0FHTixhQUhNLEdBR1VqQixhQUFha0IsUUFIdkIsR0FJTixrQkFKTSxHQUllbEIsYUFBYW1CLGNBSjVCLEdBS04sU0FMTSxHQUtNSCxLQUxOLEdBTU4sU0FOTSxHQU1NQSxLQU5oQjtBQU9BZCxVQUFRQyxHQUFSLENBQVksZ0NBQVosRUFBOENPLEdBQTlDO0FBQ0EsU0FBT0EsR0FBUDtBQUNEOztBQUVNLFNBQVNoQix5QkFBVCxDQUFtQ21CLElBQW5DLEVBQXlDOztBQUU5QyxTQUFPYixhQUFhYyxRQUFiLEdBQXdCRCxLQUFLRSxZQUFwQztBQUVEIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qXG5cdFNvIHRoYXQgYW4gYXBwbGljYXRpb24gY2FuIHVzZSBGYWNlYm9vaydzIE9BdXRoIDIuMCBhdXRoZW50aWNhdGlvbiBzeXN0ZW0gZm9yIHVzZXIgbG9naW4sXG4gIGZpcnN0IGlzIHJlcXVpcmVkIHRvIHNldCB1cCBhIHByb2plY3QgaW4gdGhlIEZhY2Vib29rIERldmVsb3BlcnMgQ29uc29sZSAoaHR0cHM6Ly9kZXZlbG9wZXJzLmZhY2Vib29rLmNvbS9hcHBzLykgXG4gIHRvIG9idGFpbiBPQXV0aCAyLjAgY3JlZGVudGlhbHMgYW5kIHNldCBhIHJlZGlyZWN0IFVSSS5cbiAqL1xubGV0IHJlZGlyZWN0VVJJID0gbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUgKyAobG9jYXRpb24ucG9ydCAhPT0gJycgPyAnOicgKyBsb2NhdGlvbi5wb3J0IDogJycpO1xuXG5sZXQgZmFjZWJvb2tJbmZvID0ge1xuICBcImNsaWVudElEXCI6ICAgICAgICAgICAgIFwiNTE2ODUwMDc4Njg1MjkwXCIsXG4gIFwiYXV0aG9yaXNhdGlvbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3YyLjExL2RpYWxvZy9vYXV0aD9cIixcbiAgXCJ1c2VyaW5mb1wiOiAgICAgICAgICAgICAgXCJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92Mi4yL21lLz9maWVsZHM9aWQsZmlyc3RfbmFtZSxsYXN0X25hbWUsbmFtZSxwaWN0dXJlLGVtYWlsJmFjY2Vzc190b2tlbj1cIixcbiAgXCJ0eXBlXCI6ICAgICAgICAgICAgICAgICAgXCJ0b2tlblwiLFxuICBcImdyYW50ZWRfc2NvcGVzXCI6ICAgICAgICBcImVtYWlsLHB1YmxpY19wcm9maWxlXCIsXG4gIFwic3RhdGVcIjogICAgICAgICAgICAgICAgIFwic3RhdGVcIixcbiAgXCJkb21haW5cIjogICAgICAgICAgICAgICAgXCJmYWNlYm9vay5jb21cIlxufTtcblxuXG5cbi8vIGZ1bmN0aW9uIHRvIGNvbnZlcnQgZ29vZ2xlIHVzZXIgcHJvZmlsZSBpbmZvIGludG8gc3RhbmRhcmQgcmVUSElOSyB1c2VyIHByb2ZpbGUgb2JqZWN0XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VXNlclByb2ZpbGUodXNlclByb2ZpbGUpIHtcblxuICBjb25zb2xlLmxvZygnW0ZhY2Vib29sVXNlclByb2ZpbGVDb252ZXJ0ZXJdICcsIHVzZXJQcm9maWxlICk7XG4gIHVzZXJQcm9maWxlLm5hbWUgPSB1c2VyUHJvZmlsZS5maXJzdF9uYW1lICsgJyAnICsgdXNlclByb2ZpbGUubGFzdF9uYW1lO1xuXG4gIHVzZXJQcm9maWxlLnVzZXJVUkwgPSAndXNlcjovL2ZhY2Vib29rLmNvbS8nICsgdXNlclByb2ZpbGUubmFtZTtcblxuICB1c2VyUHJvZmlsZS5waWN0dXJlID0gdXNlclByb2ZpbGUucGljdHVyZS5kYXRhLnVybDtcblxuICBpZiAoIXVzZXJQcm9maWxlLmhhc093blByb3BlcnR5KCdwcmVmZXJyZWRfdXNlcm5hbWUnKSkgXG4gIHVzZXJQcm9maWxlLnByZWZlcnJlZF91c2VybmFtZSA9IHVzZXJQcm9maWxlLmxhc3RfbmFtZTtcblxuXG4gIHJldHVybiB1c2VyUHJvZmlsZTtcbn1cblxuXG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VySW5mb0VuZHBvaW50KGluZm8pIHtcblxuICByZXR1cm4gZmFjZWJvb2tJbmZvLnVzZXJpbmZvICsgaW5mby5hY2Nlc3NfdG9rZW47XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhvcmlzYXRpb25FbmRwb2ludChub25jZSkge1xuXG4gIGxldCB1cmwgPSBmYWNlYm9va0luZm8uYXV0aG9yaXNhdGlvbkVuZHBvaW50IFxuICAgICsgJ3JlZGlyZWN0X3VyaT0nICsgcmVkaXJlY3RVUklcbiAgICArICcmcmVzcG9uc2VfdHlwZT0nICsgZmFjZWJvb2tJbmZvLnR5cGVcbiAgICArICcmY2xpZW50X2lkPScgKyBmYWNlYm9va0luZm8uY2xpZW50SURcbiAgICArICcmZ3JhbnRlZF9zY29wZXM9JyArIGZhY2Vib29rSW5mby5ncmFudGVkX3Njb3Blc1xuICAgICsgJyZub25jZT0nICsgbm9uY2VcbiAgICArICcmc3RhdGU9JyArIG5vbmNlO1xuICBjb25zb2xlLmxvZygnW1NsYWNrLmF1dGhvcmlzYXRpb25FbmRwb2ludF0gJywgdXJsKTtcbiAgcmV0dXJuIHVybDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQoaW5mbykge1xuXG4gIHJldHVybiBmYWNlYm9va0luZm8udXNlcmluZm8gKyBpbmZvLmFjY2Vzc190b2tlbjtcblxufVxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2ZhY2Vib29rL0ZhY2Vib29rLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdpProxy = void 0;\nvar idpInfo = void 0;\nvar convertUserProfile = void 0;\nvar userInfoEndpoint = void 0;\nvar accessTokenInput = void 0;\n\n/**\n* Abstract Identity Provider Proxy Protocol Stub to be extended by real Idp Proxies\n*/\n\nvar AbstractIdpProxyProtoStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function AbstractIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, AbstractIdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n    IdpProxy = config.idpProxy;\n    convertUserProfile = config.convertUserProfile;\n    accessTokenInput = config.accessTokenInput;\n\n    console.log('[AbstractIdpProxy] constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === config.idpUrl) {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(AbstractIdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n      console.info('[AbstractIdpProxyProtoStub] receiving request: ', msg);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          IdpProxy.generateAssertion(_this.config, params.contents, params.origin, params.usernameHint).then(function (value) {\n\n            value.userProfile = convertUserProfile(value.userProfile);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          //       console.info('validateAssertion');\n          IdpProxy.validateAssertion(_this.config, params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          //     console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessTokenAuthorisationEndpoint':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessTokenAuthorisationEndpoint(_this.config, params.resources).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessToken(_this.config, params.resources, params.login).then(function (value) {\n            console.info('OIDC.getAccessToken result: ', value);\n            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.refreshAccessToken(_this.config, params.token).then(function (value) {\n            console.info('OIDC.refreshAccessToken result: ', value);\n            //            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = {\n        id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value }\n      };\n\n      console.log('[AbstractIdpProxyProtoStub.replyMessage] ', message);\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[AbstractIdpProxyProtoStub.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return AbstractIdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nexports.default = AbstractIdpProxyProtoStub;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L0Fic3RyYWN0SWRwUHJveHlTdHViLmpzPzI3MjQiXSwibmFtZXMiOlsiSWRwUHJveHkiLCJpZHBJbmZvIiwiY29udmVydFVzZXJQcm9maWxlIiwidXNlckluZm9FbmRwb2ludCIsImFjY2Vzc1Rva2VuSW5wdXQiLCJBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsIl90aGlzIiwibWVzc2FnZUJ1cyIsImlkcFByb3h5IiwiY29uc29sZSIsImxvZyIsImFkZExpc3RlbmVyIiwibXNnIiwidG8iLCJpZHBVcmwiLCJyZXF1ZXN0VG9JZHAiLCJfc2VuZFN0YXR1cyIsInBhcmFtcyIsImJvZHkiLCJpbmZvIiwibWV0aG9kIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJjb250ZW50cyIsIm9yaWdpbiIsInVzZXJuYW1lSGludCIsInRoZW4iLCJ2YWx1ZSIsInVzZXJQcm9maWxlIiwicmVwbHlNZXNzYWdlIiwiZXJyb3IiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsInJlZnJlc2hBc3NlcnRpb24iLCJpZGVudGl0eSIsImdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwicmVzb3VyY2VzIiwiZ2V0QWNjZXNzVG9rZW4iLCJsb2dpbiIsImlucHV0IiwicmVmcmVzaEFjY2Vzc1Rva2VuIiwidG9rZW4iLCJtZXNzYWdlIiwiaWQiLCJ0eXBlIiwiZnJvbSIsImNvZGUiLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsIl9zdGF0ZSIsImRlc2MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxpQkFBSjtBQUNBLElBQUlDLGdCQUFKO0FBQ0EsSUFBSUMsMkJBQUo7QUFDQSxJQUFJQyx5QkFBSjtBQUNBLElBQUlDLHlCQUFKOztBQUVBOzs7O0lBR01DLHlCOztBQUVKOzs7Ozs7OztBQVFBLHFDQUFZ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akIsY0FBUUMsR0FBUixDQUFZLDJDQUFaLEVBQXlEK0IsT0FBekQ7O0FBRUFuQyxZQUFNQyxVQUFOLENBQWlCdUMsV0FBakIsQ0FBNkJMLE9BQTdCO0FBQ0Q7OztnQ0FFV2YsSyxFQUFPcUIsTSxFQUFRO0FBQ3pCLFVBQUl6QyxRQUFRLElBQVo7O0FBRUFHLGNBQVFDLEdBQVIsQ0FBWSx5Q0FBWixFQUF1RGdCLEtBQXZEOztBQUVBcEIsWUFBTTBDLE1BQU4sR0FBZXRCLEtBQWY7O0FBRUEsVUFBSWQsTUFBTTtBQUNSK0IsY0FBTSxRQURFO0FBRVJDLGNBQU10QyxNQUFNSCxtQkFGSjtBQUdSVSxZQUFJUCxNQUFNSCxtQkFBTixHQUE0QixTQUh4QjtBQUlSZSxjQUFNO0FBQ0pRLGlCQUFPQTtBQURIO0FBSkUsT0FBVjs7QUFTQSxVQUFJcUIsTUFBSixFQUFZO0FBQ1ZuQyxZQUFJTSxJQUFKLENBQVMrQixJQUFULEdBQWdCRixNQUFoQjtBQUNEOztBQUVEekMsWUFBTUMsVUFBTixDQUFpQnVDLFdBQWpCLENBQTZCbEMsR0FBN0I7QUFDRDs7Ozs7O0FBR0g7O0FBRUE7Ozs7Ozs7OztrQkFPZVYseUIiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBJZHBQcm94eTtcbmxldCBpZHBJbmZvO1xubGV0IGNvbnZlcnRVc2VyUHJvZmlsZTtcbmxldCB1c2VySW5mb0VuZHBvaW50O1xubGV0IGFjY2Vzc1Rva2VuSW5wdXQ7XG5cbi8qKlxuKiBBYnN0cmFjdCBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViIHRvIGJlIGV4dGVuZGVkIGJ5IHJlYWwgSWRwIFByb3hpZXNcbiovXG5jbGFzcyBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIHtcblxuICAvKipcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgKi9cbiAgY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7XG4gICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIElkcFByb3h5ID0gY29uZmlnLmlkcFByb3h5O1xuICAgIGNvbnZlcnRVc2VyUHJvZmlsZSA9IGNvbmZpZy5jb252ZXJ0VXNlclByb2ZpbGU7XG4gICAgYWNjZXNzVG9rZW5JbnB1dCA9IGNvbmZpZy5hY2Nlc3NUb2tlbklucHV0O1xuXG5cbiAgICBjb25zb2xlLmxvZygnW0Fic3RyYWN0SWRwUHJveHldIGNvbnN0cnVjdG9yJyk7XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKG1zZy50byA9PT0gY29uZmlnLmlkcFVybCkge1xuXG4gICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uXG4gICpcbiAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG4gICovXG4gIHJlcXVlc3RUb0lkcChtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7XG4gICAgLy9jb25zb2xlLmluZm8oJ3JlcXVlc3RUb0lkcDonLCBtc2cuYm9keS5tZXRob2QpO1xuICAgIGNvbnNvbGUuaW5mbygnW0Fic3RyYWN0SWRwUHJveHlQcm90b1N0dWJdIHJlY2VpdmluZyByZXF1ZXN0OiAnLCBtc2cpO1xuXG4gICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb24oX3RoaXMuY29uZmlnLCBwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICAgICAgICAgIHZhbHVlLnVzZXJQcm9maWxlID0gY29udmVydFVzZXJQcm9maWxlKHZhbHVlLnVzZXJQcm9maWxlKTtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTsgfVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgLy8gICAgICAgY29uc29sZS5pbmZvKCd2YWxpZGF0ZUFzc2VydGlvbicpO1xuICAgICAgICBJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvbihfdGhpcy5jb25maWcsIHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTsgfSxcblxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWZyZXNoQXNzZXJ0aW9uJzpcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygncmVmcmVzaEFzc2VydGlvbicpO1xuICAgICAgICBJZHBQcm94eS5yZWZyZXNoQXNzZXJ0aW9uKHBhcmFtcy5pZGVudGl0eSkudGhlbihcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOyB9LFxuXG4gICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTsgfVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2dldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50JzpcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygnZ2V0QWNjZXNzVG9rZW4nKTtcbiAgICAgICAgSWRwUHJveHkuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQoX3RoaXMuY29uZmlnLCBwYXJhbXMucmVzb3VyY2VzKS50aGVuKFxuICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZ2V0QWNjZXNzVG9rZW4nOlxuICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICBJZHBQcm94eS5nZXRBY2Nlc3NUb2tlbihfdGhpcy5jb25maWcsIHBhcmFtcy5yZXNvdXJjZXMsIHBhcmFtcy5sb2dpbikudGhlbihcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnT0lEQy5nZXRBY2Nlc3NUb2tlbiByZXN1bHQ6ICcsIHZhbHVlKTtcbiAgICAgICAgICAgIHZhbHVlLmlucHV0ID0gYWNjZXNzVG9rZW5JbnB1dCh2YWx1ZS5pbnB1dCk7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWZyZXNoQWNjZXNzVG9rZW4nOlxuICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICBJZHBQcm94eS5yZWZyZXNoQWNjZXNzVG9rZW4oX3RoaXMuY29uZmlnLCBwYXJhbXMudG9rZW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ09JREMucmVmcmVzaEFjY2Vzc1Rva2VuIHJlc3VsdDogJywgdmFsdWUpO1xuLy8gICAgICAgICAgICB2YWx1ZS5pbnB1dCA9IGFjY2Vzc1Rva2VuSW5wdXQodmFsdWUuaW5wdXQpO1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKlxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxuICAqL1xuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZSB9XG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKCdbQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yi5yZXBseU1lc3NhZ2VdICcsIG1lc3NhZ2UpO1xuXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgfVxuXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcblxuICAgIF90aGlzLl9zdGF0ZSA9IHZhbHVlO1xuXG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxuICAgICAgYm9keToge1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHJlYXNvbikge1xuICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjtcbiAgICB9XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gIH1cbn1cblxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG5cbi8qKlxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxuICovXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9BYnN0cmFjdElkcFByb3h5U3R1Yi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "facebook.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "33.10",
    "description": "IDPProxy for Facebook idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "50ef75417b00e8340d1ddf496be07274a",
    "constraints": {
      "browser": true
    },
    "objectName": "facebook.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "GoogleIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = activate;\n\nvar _OIDC = __webpack_require__(1);\n\nvar _GoogleInfo = __webpack_require__(2);\n\nvar _GoogleConverter = __webpack_require__(3);\n\nvar _AbstractIdpProxyStub = __webpack_require__(4);\n\nvar _AbstractIdpProxyStub2 = _interopRequireDefault(_AbstractIdpProxyStub);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n* Google Identity Provider Proxy Protocol Stub\n*/\nvar GoogleIdpProxyProtoStub = function (_AbstractIdpProxyProt) {\n  _inherits(GoogleIdpProxyProtoStub, _AbstractIdpProxyProt);\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function GoogleIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, GoogleIdpProxyProtoStub);\n\n    config.domain = 'google.com';\n    config.idpUrl = 'domain-idp://google.com';\n    config.idpProxy = _OIDC.IdpProxy;\n    config.idpInfo = _GoogleInfo.googleInfo;\n    config.apiInfo = _GoogleInfo.googleAPIInfo;\n    config.accessTokenAuthorisationEndpoint = _GoogleInfo.accessTokenAuthorisationEndpoint;\n    config.accessTokenEndpoint = _GoogleInfo.accessTokenEndpoint;\n    config.refreshAccessTokenEndpoint = _GoogleInfo.refreshAccessTokenEndpoint;\n    config.accessTokenInput = _GoogleInfo.accessTokenInput;\n    config.authorisationEndpoint = _GoogleInfo.authorisationEndpoint;\n    config.convertUserProfile = _GoogleConverter.convertUserProfile;\n    config.mapping = _GoogleInfo.mapping;\n    return _possibleConstructorReturn(this, (GoogleIdpProxyProtoStub.__proto__ || Object.getPrototypeOf(GoogleIdpProxyProtoStub)).call(this, runtimeProtoStubURL, bus, config));\n  }\n\n  return GoogleIdpProxyProtoStub;\n}(_AbstractIdpProxyStub2.default);\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'GoogleIdpProxyProtoStub',\n    instance: new GoogleIdpProxyProtoStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Hb29nbGVJZHBQcm94eVN0dWIuaWRwLmpzP2Q3MTYiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJHb29nbGVJZHBQcm94eVByb3RvU3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJkb21haW4iLCJpZHBVcmwiLCJpZHBQcm94eSIsIklkcFByb3h5IiwiaWRwSW5mbyIsImdvb2dsZUluZm8iLCJhcGlJbmZvIiwiZ29vZ2xlQVBJSW5mbyIsImFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5FbmRwb2ludCIsInJlZnJlc2hBY2Nlc3NUb2tlbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5JbnB1dCIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsImNvbnZlcnRVc2VyUHJvZmlsZSIsIm1hcHBpbmciLCJBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIiwidXJsIiwibmFtZSIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkE0Q3dCQSxROztBQTVDeEI7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7OztBQUVBOzs7SUFHTUMsdUI7OztBQUVKOzs7Ozs7OztBQVFBLG1DQUFZQyxtQkFBWixFQUFpQ0MsR0FBakMsRUFBc0NDLE1BQXRDLEVBQThDO0FBQUE7O0FBQzVDQSxXQUFPQyxNQUFQLEdBQWdCLFlBQWhCO0FBQ0FELFdBQU9FLE1BQVAsR0FBZ0IseUJBQWhCO0FBQ0FGLFdBQU9HLFFBQVAsR0FBa0JDLGNBQWxCO0FBQ0FKLFdBQU9LLE9BQVAsR0FBaUJDLHNCQUFqQjtBQUNBTixXQUFPTyxPQUFQLEdBQWlCQyx5QkFBakI7QUFDQVIsV0FBT1MsZ0NBQVAsR0FBMENBLDRDQUExQztBQUNBVCxXQUFPVSxtQkFBUCxHQUE2QkEsK0JBQTdCO0FBQ0FWLFdBQU9XLDBCQUFQLEdBQW9DQSxzQ0FBcEM7QUFDQVgsV0FBT1ksZ0JBQVAsR0FBMEJBLDRCQUExQjtBQUNBWixXQUFPYSxxQkFBUCxHQUErQkEsaUNBQS9CO0FBQ0FiLFdBQU9jLGtCQUFQLEdBQTRCQSxtQ0FBNUI7QUFDQWQsV0FBT2UsT0FBUCxHQUFpQkEsbUJBQWpCO0FBWjRDLDZJQWF0Q2pCLG1CQWJzQyxFQWFqQkMsR0FiaUIsRUFhWkMsTUFiWTtBQWM3Qzs7O0VBeEJtQ2dCLDhCOztBQTJCdEM7O0FBRUE7Ozs7Ozs7OztBQU9lLFNBQVNwQixRQUFULENBQWtCcUIsR0FBbEIsRUFBdUJsQixHQUF2QixFQUE0QkMsTUFBNUIsRUFBb0M7QUFDakQsU0FBTztBQUNMa0IsVUFBTSx5QkFERDtBQUVMQyxjQUFVLElBQUl0Qix1QkFBSixDQUE0Qm9CLEdBQTVCLEVBQWlDbEIsR0FBakMsRUFBc0NDLE1BQXRDO0FBRkwsR0FBUDtBQUlEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZHBQcm94eSB9IGZyb20gXCIuLi9PSURDXCJcbmltcG9ydCB7IGdvb2dsZUluZm8sIGdvb2dsZUFQSUluZm8sIGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50LCBhY2Nlc3NUb2tlbkVuZHBvaW50LCBhdXRob3Jpc2F0aW9uRW5kcG9pbnQsIGFjY2Vzc1Rva2VuSW5wdXQsIG1hcHBpbmcsIHJlZnJlc2hBY2Nlc3NUb2tlbkVuZHBvaW50IH0gZnJvbSBcIi4vR29vZ2xlSW5mb1wiXG5pbXBvcnQgeyBjb252ZXJ0VXNlclByb2ZpbGUgfSBmcm9tIFwiLi9Hb29nbGVDb252ZXJ0ZXJcIlxuaW1wb3J0IEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIgZnJvbSBcIi4uL0Fic3RyYWN0SWRwUHJveHlTdHViXCJcblxuLyoqXG4qIEdvb2dsZSBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViXG4qL1xuY2xhc3MgR29vZ2xlSWRwUHJveHlQcm90b1N0dWIgZXh0ZW5kcyBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIHtcblxuICAvKipcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgKi9cbiAgY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBjb25maWcuZG9tYWluID0gJ2dvb2dsZS5jb20nO1xuICAgIGNvbmZpZy5pZHBVcmwgPSAnZG9tYWluLWlkcDovL2dvb2dsZS5jb20nO1xuICAgIGNvbmZpZy5pZHBQcm94eSA9IElkcFByb3h5O1xuICAgIGNvbmZpZy5pZHBJbmZvID0gZ29vZ2xlSW5mbztcbiAgICBjb25maWcuYXBpSW5mbyA9IGdvb2dsZUFQSUluZm87XG4gICAgY29uZmlnLmFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50ID0gYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG4gICAgY29uZmlnLmFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBhY2Nlc3NUb2tlbkVuZHBvaW50O1xuICAgIGNvbmZpZy5yZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludCA9IHJlZnJlc2hBY2Nlc3NUb2tlbkVuZHBvaW50O1xuICAgIGNvbmZpZy5hY2Nlc3NUb2tlbklucHV0ID0gYWNjZXNzVG9rZW5JbnB1dDtcbiAgICBjb25maWcuYXV0aG9yaXNhdGlvbkVuZHBvaW50ID0gYXV0aG9yaXNhdGlvbkVuZHBvaW50O1xuICAgIGNvbmZpZy5jb252ZXJ0VXNlclByb2ZpbGUgPSBjb252ZXJ0VXNlclByb2ZpbGU7XG4gICAgY29uZmlnLm1hcHBpbmcgPSBtYXBwaW5nO1xuICAgIHN1cGVyKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKTtcbiAgfVxufVxuXG4vLyBleHBvcnQgZGVmYXVsdCBJZHBQcm94eVByb3RvU3R1YjtcblxuLyoqXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnR29vZ2xlSWRwUHJveHlQcm90b1N0dWInLFxuICAgIGluc3RhbmNlOiBuZXcgR29vZ2xlSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZylcbiAgfTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL0dvb2dsZUlkcFByb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// import {getExpires} from './OAUTH';\n\nvar identities = {};\nvar nIdentity = 0;\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\n//let tokenEndpoint;\n//let authorisationEndpoint;\nvar accessTokenEndpoint = void 0;\nvar refreshAccessTokenEndpoint = void 0;\nvar domain = void 0;\nvar accessTokenAuthorisationEndpoint = void 0;\n\nvar getExpiresAtJSON = exports.getExpiresAtJSON = function getExpiresAtJSON(json) {\n  var expires = json.hasOwnProperty('expires_in') ? json.expires_in : false;\n\n  if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n  return Number(expires);\n};\n\nvar getExpires = exports.getExpires = function getExpires(url) {\n  var expires = urlParser(url, 'expires_in');\n\n  if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n  return Number(expires);\n};\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return false;else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\nvar getAccessTokenWithCodeToken = function getAccessTokenWithCodeToken(resources, url) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(url, 'code');\n\n    if (!code) reject('[OIDC.getAccessTokenWithCodeToken] code not include in the url: ', url);\n\n    sendHTTPRequest('POST', accessTokenEndpoint(code)).then(function (info) {\n\n      console.info('[OIDC.getAccessTokenWithCodeToken] response: ', info);\n\n      if (info.hasOwnProperty('access_token')) {\n\n        var expires = getExpiresAtJSON(info);\n        var refresh = info.hasOwnProperty('refresh_token') ? info.refresh_token : false;\n        resolve(accessTokenResult(resources, info.access_token, expires, info, refresh));\n      } else reject('[OIDC.getAccessTokenWithCodeToken] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar accessTokenResult = function accessTokenResult(resources, accessToken, expires, input, refresh) {\n\n  var result = { domain: domain, resources: resources, accessToken: accessToken, expires: expires, input: input };\n\n  if (refresh) result.refresh = refresh;\n\n  return result;\n};\n\n/**\n* Function to exchange the code received to the id Token, access token and a refresh token\n*\n*/\n/*let exchangeCode = (function(code) {\n  let i = googleInfo;\n\n  let URL = i.tokenEndpoint + 'code=' + code + '&client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' + i.redirectURI + '&grant_type=authorization_code&access_type=' + i.accessType;\n\n\n  return new Promise(function(resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function(info) {\n      console.log('[OIDC.exchangeCode] returned info: ', info);\n      resolve(info);\n    }, function(error) {\n      reject(error);\n    });\n\n  });\n});\n\nlet exchangeRefreshToken = (function(refreshToken) {\n  let i = googleInfo;\n\n  let URL = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + refreshToken + '&grant_type=refresh_token';\n\n  return new Promise(function(resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function(info) {\n      resolve(info);\n    }, function(error) {\n      reject(error);\n    });\n\n  });\n});*/\n\n/**\n* Identity Provider Proxy\n*/\nvar IdpProxy = exports.IdpProxy = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(config, assertion, origin) {\n    console.info('[OIDC.validateAssertionProxy] assertion: ', atob(assertion));\n    //    console.info('validateAssertionProxy:atob(assertion)', atob(assertion));\n\n    //TODO check the values with the hash received\n    //  return new Promise(function(resolve,reject) {\n\n    var decodedContent2 = atob(assertion);\n    var content = JSON.parse(decodedContent2);\n    var idTokenSplited = content.tokenID.split('.');\n    var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n    //resolve({identity: idToken.email, contents: idToken.nonce});\n\n    //});\n\n    return new Promise(function (resolve, reject) {\n      var i = config.idpInfo;\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      sendHTTPRequest('GET', i.tokenInfo + content.tokenID).then(function (result) {\n        if (JSON.stringify(result) === JSON.stringify(content.tokenIDJSON)) {\n          resolve({ identity: content.tokenIDJSON.email, contents: content.tokenIDJSON });\n        } else {\n          reject('invalid');\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n\n  refreshAssertion: function refreshAssertion(identity) {\n    //console.log('PROXY:refreshAssertion:oldIdentity', identity);\n    //    let i = googleInfo;\n\n    return new Promise(function (resolve, reject) {\n      /*      if (identity.info.refreshToken) {\n              exchangeRefreshToken(identity.info.refreshToken).then(function(value) {\n                let infoTokenURL = i.userinfo + value.access_token;\n                sendHTTPRequest('GET', infoTokenURL).then(function(infoToken) {\n      \n                  let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: identity.info.refreshToken, tokenType: identity.info.tokenType, infoToken: infoToken};\n                  let idTokenURL = i.tokenInfo + value.id_token;\n      \n                  //obtain information about the user idToken\n                  sendHTTPRequest('GET', idTokenURL).then(function(idToken) {\n      \n                    identityBundle.tokenIDJSON = idToken;\n                    identityBundle.expires = idToken.exp;\n                    identityBundle.email = idToken.email;\n      \n                    let oldIDToken = JSON.parse(atob(identity.assertion));\n                    let oldIdTokenSplited = oldIDToken.tokenID.split('.');\n                    let oldDecodedIDToken = JSON.parse(atob(oldIdTokenSplited[1]));\n                    let idNonce = oldDecodedIDToken.nonce;\n      \n                    let receivedIDToken = value.id_token;\n                    let idTokenSplited = receivedIDToken.split('.');\n                    let decodedIDToken = JSON.parse(atob(idTokenSplited[1]));\n      \n                    decodedIDToken.nonce = idNonce;\n                    let insertedNonce = btoa(JSON.stringify(decodedIDToken));\n                    let newIDToken = idTokenSplited[0] + '.' +\n                                       insertedNonce + '.' +\n                                       idTokenSplited[2];\n      \n                    let assertion = btoa(JSON.stringify({tokenID: newIDToken, tokenIDJSON: idToken}));\n                    let idpBundle = {domain: 'google.com', protocol: 'OIDC'};\n      \n                    //TODO delete later the field infoToken, and delete the need in the example\n                    let returnValue = {assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken};\n                    //console.log('PROXY:refreshAssertion:newIdentity', returnValue);\n                    resolve(returnValue);\n                  });\n                });\n              });\n            }*/\n      resolve(identity);\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(config, contents, origin, hint) {\n    console.log('[OIDC.generateAssertion:contents]', contents);\n    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[OIDC.generateAssertion:hint]', hint);\n    var i = config.idpInfo;\n\n    //start the login phase\n    //TODO later should be defined a better approach\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n        /*try {\n          if (window) {\n            resolve('url');\n          }\n        } catch (error) {*/\n\n        var requestUrl = i.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&prompt=consent&response_type=' + i.type + '&client_id=' + i.clientID + '&scope=' + i.scope + '&access_type=' + i.accessType + '&nonce=' + contents + '&state=' + i.state;\n\n        //        let requestUrl = i.authorisationEndpoint + 'scope=' + i.scope + '&client_id=' + i.clientID + '&redirect_uri=' + i.redirectURI + '&response_type=code' + /*i.type +*/ '&state=' + i.state + '&prompt=consent&access_type=' + i.accessType + '&nonce=' + contents;\n        console.log('[OIDC.generateAssertion] NO_HINT: rejecting with requestUrl ', requestUrl);\n\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n\n        //  }\n      } else {\n        // the request have already been made, so idpPRoxy will exchange the tokens along to the idp, to obtain the information necessary\n        var accessToken = urlParser(hint, 'access_token');\n        var idToken = urlParser(hint, 'id_token');\n        var code = urlParser(hint, 'code');\n\n        //console.log('GOOGLE_PROXY_HINT: ', hint);\n\n        //       exchangeCode(code).then(function(value) {\n        //       console.log('[OIDC.generateAssertion] obtained exchanged Token ', value);\n\n        //obtain information about the user\n        //let infoTokenURL = i.userinfo + value.access_token;\n        var infoTokenURL = i.userinfo + accessToken;\n        sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n          console.log('[OIDC.generateAssertion] obtained infoToken ', infoToken);\n\n          //            let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: value.refresh_token, tokenType: value.token_type, infoToken: infoToken};\n\n          //            let idTokenURL = i.tokenInfo + value.id_token;\n          /*\n                      let identityBundle = {\n                        accessToken: accessToken,\n                        idToken: idToken,\n          //              refreshToken: value.refresh_token,\n                        tokenType: 'Bearer',\n                        infoToken: infoToken\n                      };*/\n\n          var idTokenURL = i.tokenInfo + idToken;\n\n          //obtain information about the user idToken\n          sendHTTPRequest('GET', idTokenURL).then(function (idTokenJSON) {\n            console.log('[OIDC.generateAssertion] obtained idToken ', idTokenJSON);\n\n            /*              identityBundle.tokenIDJSON = idTokenJSON;\n                          identityBundle.expires = idTokenJSON.exp;\n                          identityBundle.email = idTokenJSON.email;*/\n\n            var assertion = btoa(JSON.stringify({ tokenID: idToken, tokenIDJSON: idTokenJSON }));\n            var idpBundle = { domain: i.domain, protocol: 'OIDC' };\n\n            //TODO delete later the field infoToken, and delete the need in the example\n            // TODO replace \"refresh: true\" by the real refresh token\n            var returnValue = { assertion: assertion, idp: idpBundle, expires: idTokenJSON.exp, userProfile: infoToken, refresh: true };\n\n            identities[nIdentity] = returnValue;\n            ++nIdentity;\n\n            console.log('[OIDC.generateAssertion] returning: ', JSON.stringify(returnValue));\n\n            resolve(returnValue);\n          }, function (e) {\n\n            reject(e);\n          });\n        }, function (error) {\n\n          reject(error);\n        });\n        /*        }, function(err) {\n        \n                  reject(err);\n                });*/\n      }\n    });\n  },\n\n  /**\n  * Function to get an Access Token endpoint\n  *\n  * @param  {config}      Object information about IdP endpoints\n  * @param  {resources} Object contents includes information about the identity received\n  * @return {Promise} returns a promise with an identity assertion\n  */\n\n  getAccessTokenAuthorisationEndpoint: function getAccessTokenAuthorisationEndpoint(config, resources) {\n    console.log('[OIDC.getAccessTokenAuthorisationEndpoint:config]', config);\n    //    console.log('[OIDC.generateAssertion:contents]', contents);\n    //    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[OIDC.getAccessTokenAuthorisationEndpoint:resources]', resources);\n    //    let i = idpInfo;\n    accessTokenAuthorisationEndpoint = config.accessTokenAuthorisationEndpoint;\n    var mapping = config.mapping;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // TODO replace by resources[0]\n      resolve(accessTokenAuthorisationEndpoint(mapping(resources)));\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\n  * Function to get an Access Token\n  *\n  * @param  {login} optional login result\n  * @return {Promise} returns a promise with an identity assertion\n  */\n\n  getAccessToken: function getAccessToken(config, resources, login) {\n    console.log('[OIDC.getAccessToken:config]', config);\n    //    console.log('[OIDC.generateAssertion:contents]', contents);\n    //    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[OIDC.getAccessToken:login]', login);\n    //    let i = idpInfo;\n    accessTokenEndpoint = config.accessTokenEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // the user is loggedin, try to extract the Access Token and its expires\n      var expires = getExpires(login);\n\n      var accessToken = urlParser(login, 'access_token');\n\n      if (accessToken) resolve(accessTokenResult(resources, accessToken, expires, login));else resolve(getAccessTokenWithCodeToken(resources, login));\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\n    * Function to get an Access Token\n    *\n    * @param  {login} optional login result\n    * @return {Promise} returns a promise with an identity assertion\n    */\n\n  refreshAccessToken: function refreshAccessToken(config, token) {\n    console.log('[OIDC.refreshAccessToken:config]', config);\n    //    console.log('[OIDC.generateAssertion:contents]', contents);\n    //    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[OIDC.refreshAccessToken:outdated token]', token);\n    //    let i = idpInfo;\n    refreshAccessTokenEndpoint = config.refreshAccessTokenEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // the user is loggedin, try to extract the Access Token and its expires\n\n      var refresh = token.refresh;\n\n      if (!refresh) reject('[OIDC.refreshAccessToken] refresh token not available in the access token', token);\n\n      sendHTTPRequest('POST', refreshAccessTokenEndpoint(refresh)).then(function (info) {\n\n        console.info('[OIDC.refreshAccessToken] response: ', info);\n\n        if (info.hasOwnProperty('access_token')) {\n\n          var expires = getExpiresAtJSON(info);\n          resolve(accessTokenResult(token.resources, info.access_token, expires, info, refresh));\n        } else reject('[OIDC.refreshAccessToken] new access token not returned in the response: ', info);\n      }, function (error) {\n        reject(error);\n      });\n\n      //      });\n    }, function (e) {\n\n      reject(e);\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L09JREMuanM/MzcwYSJdLCJuYW1lcyI6WyJpZGVudGl0aWVzIiwibklkZW50aXR5IiwicmVkaXJlY3RVUkkiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwb3J0IiwiYWNjZXNzVG9rZW5FbmRwb2ludCIsInJlZnJlc2hBY2Nlc3NUb2tlbkVuZHBvaW50IiwiZG9tYWluIiwiYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJnZXRFeHBpcmVzQXRKU09OIiwianNvbiIsImV4cGlyZXMiLCJoYXNPd25Qcm9wZXJ0eSIsImV4cGlyZXNfaW4iLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwiTnVtYmVyIiwiZ2V0RXhwaXJlcyIsInVybCIsInVybFBhcnNlciIsIm5hbWUiLCJyZXBsYWNlIiwicmVnZXhTIiwicmVnZXgiLCJSZWdFeHAiLCJyZXN1bHRzIiwiZXhlYyIsInNlbmRIVFRQUmVxdWVzdCIsIm1ldGhvZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIlhEb21haW5SZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsImluZm8iLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwiZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuIiwicmVzb3VyY2VzIiwiY29kZSIsInRoZW4iLCJjb25zb2xlIiwicmVmcmVzaCIsInJlZnJlc2hfdG9rZW4iLCJhY2Nlc3NUb2tlblJlc3VsdCIsImFjY2Vzc190b2tlbiIsImVycm9yIiwiYWNjZXNzVG9rZW4iLCJpbnB1dCIsInJlc3VsdCIsIklkcFByb3h5IiwidmFsaWRhdGVBc3NlcnRpb24iLCJjb25maWciLCJhc3NlcnRpb24iLCJvcmlnaW4iLCJhdG9iIiwiZGVjb2RlZENvbnRlbnQyIiwiY29udGVudCIsImlkVG9rZW5TcGxpdGVkIiwidG9rZW5JRCIsInNwbGl0IiwiaWRUb2tlbiIsImkiLCJpZHBJbmZvIiwiZGVjb2RlZENvbnRlbnQiLCJ0b2tlbkluZm8iLCJzdHJpbmdpZnkiLCJ0b2tlbklESlNPTiIsImlkZW50aXR5IiwiZW1haWwiLCJjb250ZW50cyIsImNhdGNoIiwiZXJyIiwicmVmcmVzaEFzc2VydGlvbiIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiaGludCIsImxvZyIsInJlcXVlc3RVcmwiLCJhdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJ0eXBlIiwiY2xpZW50SUQiLCJzY29wZSIsImFjY2Vzc1R5cGUiLCJzdGF0ZSIsImxvZ2luVXJsIiwiaW5mb1Rva2VuVVJMIiwidXNlcmluZm8iLCJpbmZvVG9rZW4iLCJpZFRva2VuVVJMIiwiaWRUb2tlbkpTT04iLCJidG9hIiwiaWRwQnVuZGxlIiwicmV0dXJuVmFsdWUiLCJpZHAiLCJleHAiLCJ1c2VyUHJvZmlsZSIsImdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwibWFwcGluZyIsIl90aGlzIiwiZ2V0QWNjZXNzVG9rZW4iLCJsb2dpbiIsInJlZnJlc2hBY2Nlc3NUb2tlbiIsInRva2VuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUVBLElBQUlBLGFBQWEsRUFBakI7QUFDQSxJQUFJQyxZQUFZLENBQWhCO0FBQ0EsSUFBSUMsY0FBY0MsU0FBU0MsUUFBVCxHQUFvQixJQUFwQixHQUEyQkQsU0FBU0UsUUFBcEMsSUFBZ0RGLFNBQVNHLElBQVQsS0FBa0IsRUFBbEIsR0FBdUIsTUFBTUgsU0FBU0csSUFBdEMsR0FBNkMsRUFBN0YsQ0FBbEI7O0FBR0E7QUFDQTtBQUNBLElBQUlDLDRCQUFKO0FBQ0EsSUFBSUMsbUNBQUo7QUFDQSxJQUFJQyxlQUFKO0FBQ0EsSUFBSUMseUNBQUo7O0FBRU8sSUFBSUMsOENBQW9CLFNBQXBCQSxnQkFBb0IsQ0FBVUMsSUFBVixFQUFnQjtBQUM3QyxNQUFJQyxVQUFVRCxL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QyxPQUEzQixDQUF4QixFQUE2REYsSUFBN0QsQ0FBa0UsVUFBVVIsSUFBVixFQUFnQjs7QUFFaEZTLGdCQUFRVCxJQUFSLENBQWEsc0NBQWIsRUFBcURBLElBQXJEOztBQUVBLFlBQUlBLEtBQUs5QixjQUFMLENBQW9CLGNBQXBCLENBQUosRUFBeUM7O0FBRXZDLGNBQUlELFVBQVVGLGlCQUFpQmlDLElBQWpCLENBQWQ7QUFDQU4sa0JBQVNrQixrQkFBa0IwRCxNQUFNaEUsU0FBeEIsRUFBbUNOLEtBQUthLFlBQXhDLEVBQXNENUMsT0FBdEQsRUFBK0QrQixJQUEvRCxFQUFxRVUsT0FBckUsQ0FBVDtBQUNELFNBSkQsTUFJT2YsT0FBTywyRUFBUCxFQUFvRkssSUFBcEY7QUFDUixPQVRELEVBU0csVUFBVWMsS0FBVixFQUFpQjtBQUNsQm5CLGVBQU9tQixLQUFQO0FBQ0QsT0FYRDs7QUFhVjtBQUVLLEtBdEJNLEVBc0JKLFVBQVVqQixDQUFWLEVBQWE7O0FBRWRGLGFBQU9FLENBQVA7QUFDRCxLQXpCTSxDQUFQO0FBMEJEO0FBdFRtQixDQUFmIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQge2dldEV4cGlyZXN9IGZyb20gJy4vT0FVVEgnO1xuXG5sZXQgaWRlbnRpdGllcyA9IHt9O1xubGV0IG5JZGVudGl0eSA9IDA7XG5sZXQgcmVkaXJlY3RVUkkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICE9PSAnJyA/ICc6JyArIGxvY2F0aW9uLnBvcnQgOiAnJyApO1xuXG5cbi8vbGV0IHRva2VuRW5kcG9pbnQ7XG4vL2xldCBhdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG5sZXQgYWNjZXNzVG9rZW5FbmRwb2ludDtcbmxldCByZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludDtcbmxldCBkb21haW47XG5sZXQgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG5cbmV4cG9ydCBsZXQgZ2V0RXhwaXJlc0F0SlNPTiA9IChmdW5jdGlvbiAoanNvbikge1xuICBsZXQgZXhwaXJlcyA9IGpzb24uaGFzT3duUHJvcGVydHkoJ2V4cGlyZXNfaW4nKSA/IGpzb24uZXhwaXJlc19pbiA6IGZhbHNlXG5cbiAgaWYgKGV4cGlyZXMpIGV4cGlyZXMgPSBleHBpcmVzICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gIGVsc2UgZXhwaXJlcyA9IDMxNTM2MDAwMDAgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxuICByZXR1cm4gTnVtYmVyKGV4cGlyZXMpO1xuXG59KTtcblxuZXhwb3J0IGxldCBnZXRFeHBpcmVzID0gKGZ1bmN0aW9uICh1cmwpIHtcbiAgbGV0IGV4cGlyZXMgPSB1cmxQYXJzZXIodXJsLCAnZXhwaXJlc19pbicpO1xuXG4gIGlmIChleHBpcmVzKSBleHBpcmVzID0gZXhwaXJlcyArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuICBlbHNlIGV4cGlyZXMgPSAzMTUzNjAwMDAwICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgcmV0dXJuIE51bWJlcihleHBpcmVzKTtcblxufSk7XG4gXG4vL2Z1bmN0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIFVSTCB0byBvYmF0aW4gY2VydGFpbiB2YWx1ZXNcbmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHtcbiAgbmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxcXF0nKTtcbiAgbGV0IHJlZ2V4UyA9ICdbXFxcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknO1xuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4Uyk7XG4gIGxldCByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpO1xuICBpZiAocmVzdWx0cyA9PT0gbnVsbClcbiAgcmV0dXJuIGZhbHNlO1xuICBlbHNlXG4gIHJldHVybiByZXN1bHRzWzFdO1xufVxuXG5mdW5jdGlvbiBzZW5kSFRUUFJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBYRG9tYWluUmVxdWVzdCAhPSAndW5kZWZpbmVkJykge1xuICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuXG4gICAgLy8gWERvbWFpblJlcXVlc3Qgb25seSBleGlzdHMgaW4gSUUsIGFuZCBpcyBJRSdzIHdheSBvZiBtYWtpbmcgQ09SUyByZXF1ZXN0cy5cbiAgICB4aHIgPSBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBDT1JTIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIuXG4gICAgeGhyID0gbnVsbDtcbiAgfVxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcbiAgICBpZiAoeGhyKSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICBsZXQgaW5mbyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICByZXNvbHZlKGluZm8pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7XG4gICAgICAgICAgICByZWplY3QoJ1RoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSB0b2tlbicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHhoci5zZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9KTtcbn1cblxubGV0IGdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbiA9IChmdW5jdGlvbiAocmVzb3VyY2VzLCB1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgY29kZSA9IHVybFBhcnNlcih1cmwsICdjb2RlJyk7XG5cbiAgICBpZiAoIWNvZGUpIHJlamVjdCgnW09JREMuZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuXSBjb2RlIG5vdCBpbmNsdWRlIGluIHRoZSB1cmw6ICcsIHVybCk7XG5cbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIGFjY2Vzc1Rva2VuRW5kcG9pbnQoY29kZSkpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcblxuICAgICAgICBjb25zb2xlLmluZm8oJ1tPSURDLmdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbl0gcmVzcG9uc2U6ICcsIGluZm8pO1xuXG4gICAgICAgIGlmIChpbmZvLmhhc093blByb3BlcnR5KCdhY2Nlc3NfdG9rZW4nKSkge1xuXG4gICAgICAgICAgbGV0IGV4cGlyZXMgPSBnZXRFeHBpcmVzQXRKU09OKGluZm8pO1xuICAgICAgICAgIGxldCByZWZyZXNoID0gaW5mby5oYXNPd25Qcm9wZXJ0eSgncmVmcmVzaF90b2tlbicpID8gaW5mby5yZWZyZXNoX3Rva2VuIDogZmFsc2U7XG4gICAgICAgICAgcmVzb2x2ZSAoYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBpbmZvLmFjY2Vzc190b2tlbiwgZXhwaXJlcywgaW5mbywgcmVmcmVzaCkpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KCdbT0lEQy5nZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW5dIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAnLCBpbmZvKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgfSk7XG59KTtcblxubGV0IGFjY2Vzc1Rva2VuUmVzdWx0ID0gKGZ1bmN0aW9uIChyZXNvdXJjZXMsIGFjY2Vzc1Rva2VuLCBleHBpcmVzLCBpbnB1dCwgcmVmcmVzaCkge1xuXG4gIGxldCByZXN1bHQgPSB7IGRvbWFpbjogZG9tYWluLCByZXNvdXJjZXM6IHJlc291cmNlcywgYWNjZXNzVG9rZW46IGFjY2Vzc1Rva2VuLCBleHBpcmVzOiBleHBpcmVzLCBpbnB1dDogaW5wdXQgfTtcblxuICBpZiAocmVmcmVzaCkgcmVzdWx0LnJlZnJlc2ggPSByZWZyZXNoO1xuXG4gIHJldHVybiByZXN1bHQ7XG5cbn0pO1xuXG5cbi8qKlxuKiBGdW5jdGlvbiB0byBleGNoYW5nZSB0aGUgY29kZSByZWNlaXZlZCB0byB0aGUgaWQgVG9rZW4sIGFjY2VzcyB0b2tlbiBhbmQgYSByZWZyZXNoIHRva2VuXG4qXG4qL1xuLypsZXQgZXhjaGFuZ2VDb2RlID0gKGZ1bmN0aW9uKGNvZGUpIHtcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xuXG4gIGxldCBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY29kZT0nICsgY29kZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZncmFudF90eXBlPWF1dGhvcml6YXRpb25fY29kZSZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlO1xuXG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XG4gICAgICBjb25zb2xlLmxvZygnW09JREMuZXhjaGFuZ2VDb2RlXSByZXR1cm5lZCBpbmZvOiAnLCBpbmZvKTtcbiAgICAgIHJlc29sdmUoaW5mbyk7XG4gICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG5cbiAgfSk7XG59KTtcblxubGV0IGV4Y2hhbmdlUmVmcmVzaFRva2VuID0gKGZ1bmN0aW9uKHJlZnJlc2hUb2tlbikge1xuICBsZXQgaSA9IGdvb2dsZUluZm87XG5cbiAgbGV0IFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWZyZXNoX3Rva2VuPScgKyByZWZyZXNoVG9rZW4gKyAnJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlbic7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7Ki9cblxuLyoqXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5XG4qL1xuZXhwb3J0IGxldCBJZHBQcm94eSA9IHtcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byB2YWxpZGF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb24gcmVjZWl2ZWRcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtpZHBJbmZvfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoY29uZmlnLCBhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xuICAgIGNvbnNvbGUuaW5mbygnW09JREMudmFsaWRhdGVBc3NlcnRpb25Qcm94eV0gYXNzZXJ0aW9uOiAnLCBhdG9iKGFzc2VydGlvbikpXG4vLyAgICBjb25zb2xlLmluZm8oJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHk6YXRvYihhc3NlcnRpb24pJywgYXRvYihhc3NlcnRpb24pKTtcblxuICAgIC8vVE9ETyBjaGVjayB0aGUgdmFsdWVzIHdpdGggdGhlIGhhc2ggcmVjZWl2ZWRcbiAgLy8gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQyID0gYXRvYihhc3NlcnRpb24pO1xuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50Mik7XG4gICAgICBsZXQgaWRUb2tlblNwbGl0ZWQgPSBjb250ZW50LnRva2VuSUQuc3BsaXQoJy4nKTtcbiAgICAgIGxldCBpZFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XG5cbiAgICAgIC8vcmVzb2x2ZSh7aWRlbnRpdHk6IGlkVG9rZW4uZW1haWwsIGNvbnRlbnRzOiBpZFRva2VuLm5vbmNlfSk7XG5cbiAgICAvL30pO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG4gICAgICBsZXQgaSA9IGNvbmZpZy5pZHBJbmZvO1xuICAgICAgbGV0IGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pO1xuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaS50b2tlbkluZm8gKyBjb250ZW50LnRva2VuSUQpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKEpTT04uc3RyaW5naWZ5KHJlc3VsdCkgPT09IEpTT04uc3RyaW5naWZ5KGNvbnRlbnQudG9rZW5JREpTT04pKSB7XG4gICAgICAgICAgcmVzb2x2ZSh7aWRlbnRpdHk6IGNvbnRlbnQudG9rZW5JREpTT04uZW1haWwsIGNvbnRlbnRzOiBjb250ZW50LnRva2VuSURKU09OfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVmcmVzaEFzc2VydGlvbjogKGlkZW50aXR5KSA9PiB7XG4gICAgLy9jb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpvbGRJZGVudGl0eScsIGlkZW50aXR5KTtcbi8vICAgIGxldCBpID0gZ29vZ2xlSW5mbztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbi8qICAgICAgaWYgKGlkZW50aXR5LmluZm8ucmVmcmVzaFRva2VuKSB7XG4gICAgICAgIGV4Y2hhbmdlUmVmcmVzaFRva2VuKGlkZW50aXR5LmluZm8ucmVmcmVzaFRva2VuKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaW5mb1Rva2VuKSB7XG5cbiAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiBpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbiwgdG9rZW5UeXBlOiBpZGVudGl0eS5pbmZvLnRva2VuVHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuO1xuXG4gICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaWRUb2tlbikge1xuXG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjtcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZXhwaXJlcyA9IGlkVG9rZW4uZXhwO1xuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5lbWFpbCA9IGlkVG9rZW4uZW1haWw7XG5cbiAgICAgICAgICAgICAgbGV0IG9sZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRlbnRpdHkuYXNzZXJ0aW9uKSk7XG4gICAgICAgICAgICAgIGxldCBvbGRJZFRva2VuU3BsaXRlZCA9IG9sZElEVG9rZW4udG9rZW5JRC5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICBsZXQgb2xkRGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2Iob2xkSWRUb2tlblNwbGl0ZWRbMV0pKTtcbiAgICAgICAgICAgICAgbGV0IGlkTm9uY2UgPSBvbGREZWNvZGVkSURUb2tlbi5ub25jZTtcblxuICAgICAgICAgICAgICBsZXQgcmVjZWl2ZWRJRFRva2VuID0gdmFsdWUuaWRfdG9rZW47XG4gICAgICAgICAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IHJlY2VpdmVkSURUb2tlbi5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICBsZXQgZGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcblxuICAgICAgICAgICAgICBkZWNvZGVkSURUb2tlbi5ub25jZSA9IGlkTm9uY2U7XG4gICAgICAgICAgICAgIGxldCBpbnNlcnRlZE5vbmNlID0gYnRvYShKU09OLnN0cmluZ2lmeShkZWNvZGVkSURUb2tlbikpO1xuICAgICAgICAgICAgICBsZXQgbmV3SURUb2tlbiA9IGlkVG9rZW5TcGxpdGVkWzBdICsgJy4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydGVkTm9uY2UgKyAnLicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRUb2tlblNwbGl0ZWRbMl07XG5cbiAgICAgICAgICAgICAgbGV0IGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3Rva2VuSUQ6IG5ld0lEVG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VufSkpO1xuICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ2dvb2dsZS5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcblxuICAgICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgICAgICAgICAgbGV0IHJldHVyblZhbHVlID0ge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpuZXdJZGVudGl0eScsIHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9Ki9cbiAgICAgIHJlc29sdmUoIGlkZW50aXR5ICk7XG4gICAgfSk7XG5cblxuICB9LFxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7aWRwSW5mb30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG4gIGdlbmVyYXRlQXNzZXJ0aW9uOiAoY29uZmlnLCBjb250ZW50cywgb3JpZ2luLCBoaW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcbiAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uOmhpbnRdJywgaGludCk7XG4gICAgbGV0IGkgPSBjb25maWcuaWRwSW5mbztcblxuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgLy9UT0RPIGxhdGVyIHNob3VsZCBiZSBkZWZpbmVkIGEgYmV0dGVyIGFwcHJvYWNoXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKCFoaW50KSB7XG4gICAgICAgIC8qdHJ5IHtcbiAgICAgICAgICBpZiAod2luZG93KSB7XG4gICAgICAgICAgICByZXNvbHZlKCd1cmwnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7Ki9cblxuICAgICAgICBsZXQgcmVxdWVzdFVybCA9IGkuYXV0aG9yaXNhdGlvbkVuZHBvaW50ICsgJ3JlZGlyZWN0X3VyaT0nICsgcmVkaXJlY3RVUklcbiAgICAgICAgKyAnJnByb21wdD1jb25zZW50JnJlc3BvbnNlX3R5cGU9JyArIGkudHlwZVxuICAgICAgICArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEXG4gICAgICAgICsgJyZzY29wZT0nICsgaS5zY29wZVxuICAgICAgICArICcmYWNjZXNzX3R5cGU9JyArIGkuYWNjZXNzVHlwZVxuICAgICAgICArICcmbm9uY2U9JyArIGNvbnRlbnRzXG4gICAgICAgICsgJyZzdGF0ZT0nICsgaS5zdGF0ZSA7XG5cbi8vICAgICAgICBsZXQgcmVxdWVzdFVybCA9IGkuYXV0aG9yaXNhdGlvbkVuZHBvaW50ICsgJ3Njb3BlPScgKyBpLnNjb3BlICsgJyZjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJnJlZGlyZWN0X3VyaT0nICsgaS5yZWRpcmVjdFVSSSArICcmcmVzcG9uc2VfdHlwZT1jb2RlJyArIC8qaS50eXBlICsqLyAnJnN0YXRlPScgKyBpLnN0YXRlICsgJyZwcm9tcHQ9Y29uc2VudCZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlICsgJyZub25jZT0nICsgY29udGVudHM7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbl0gTk9fSElOVDogcmVqZWN0aW5nIHdpdGggcmVxdWVzdFVybCAnLCByZXF1ZXN0VXJsKTtcblxuICAgICAgICByZWplY3Qoe25hbWU6ICdJZFBMb2dpbkVycm9yJywgbG9naW5Vcmw6IHJlcXVlc3RVcmx9KTtcblxuICAgICAgLy8gIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlIHJlcXVlc3QgaGF2ZSBhbHJlYWR5IGJlZW4gbWFkZSwgc28gaWRwUFJveHkgd2lsbCBleGNoYW5nZSB0aGUgdG9rZW5zIGFsb25nIHRvIHRoZSBpZHAsIHRvIG9idGFpbiB0aGUgaW5mb3JtYXRpb24gbmVjZXNzYXJ5XG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnYWNjZXNzX3Rva2VuJyk7XG4gICAgICAgIGxldCBpZFRva2VuID0gdXJsUGFyc2VyKGhpbnQsICdpZF90b2tlbicpO1xuICAgICAgICBsZXQgY29kZSA9IHVybFBhcnNlcihoaW50LCAnY29kZScpO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coJ0dPT0dMRV9QUk9YWV9ISU5UOiAnLCBoaW50KTtcblxuLy8gICAgICAgZXhjaGFuZ2VDb2RlKGNvZGUpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAvLyAgICAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIGV4Y2hhbmdlZCBUb2tlbiAnLCB2YWx1ZSk7XG5cbiAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlclxuICAgICAgICAgIC8vbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyBhY2Nlc3NUb2tlbjtcbiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbl0gb2J0YWluZWQgaW5mb1Rva2VuICcsIGluZm9Ub2tlbik7XG5cbi8vICAgICAgICAgICAgbGV0IGlkZW50aXR5QnVuZGxlID0ge2FjY2Vzc1Rva2VuOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGlkVG9rZW46IHZhbHVlLmlkX3Rva2VuLCByZWZyZXNoVG9rZW46IHZhbHVlLnJlZnJlc2hfdG9rZW4sIHRva2VuVHlwZTogdmFsdWUudG9rZW5fdHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuXG4vLyAgICAgICAgICAgIGxldCBpZFRva2VuVVJMID0gaS50b2tlbkluZm8gKyB2YWx1ZS5pZF90b2tlbjtcbi8qXG4gICAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7XG4gICAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbixcbiAgICAgICAgICAgICAgaWRUb2tlbjogaWRUb2tlbixcbi8vICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IHZhbHVlLnJlZnJlc2hfdG9rZW4sXG4gICAgICAgICAgICAgIHRva2VuVHlwZTogJ0JlYXJlcicsXG4gICAgICAgICAgICAgIGluZm9Ub2tlbjogaW5mb1Rva2VuXG4gICAgICAgICAgICB9OyovXG5cbiAgICAgICAgICAgIGxldCBpZFRva2VuVVJMID0gaS50b2tlbkluZm8gKyBpZFRva2VuO1xuXG4gICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaWRUb2tlbkpTT04pIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uXSBvYnRhaW5lZCBpZFRva2VuICcsIGlkVG9rZW5KU09OKTtcblxuLyogICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbkpTT047XG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmV4cGlyZXMgPSBpZFRva2VuSlNPTi5leHA7XG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmVtYWlsID0gaWRUb2tlbkpTT04uZW1haWw7Ki9cblxuICAgICAgICAgICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogaWRUb2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW5KU09OfSkpO1xuICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogaS5kb21haW4sIHByb3RvY29sOiAnT0lEQyd9O1xuXG4gICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxuICAgICAgICAgICAgICAvLyBUT0RPIHJlcGxhY2UgXCJyZWZyZXNoOiB0cnVlXCIgYnkgdGhlIHJlYWwgcmVmcmVzaCB0b2tlblxuICAgICAgICAgICAgICBsZXQgcmV0dXJuVmFsdWUgPSB7YXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBleHBpcmVzOiBpZFRva2VuSlNPTi5leHAsIHVzZXJQcm9maWxlOiBpbmZvVG9rZW4sIHJlZnJlc2g6IHRydWV9O1xuXG4gICAgICAgICAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xuICAgICAgICAgICAgICArK25JZGVudGl0eTtcblxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb25dIHJldHVybmluZzogJywgSlNPTi5zdHJpbmdpZnkocmV0dXJuVmFsdWUpKTtcblxuICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcblxuICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuLyogICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuXG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pOyovXG5cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byBnZXQgYW4gQWNjZXNzIFRva2VuIGVuZHBvaW50XG4gICpcbiAgKiBAcGFyYW0gIHtjb25maWd9ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcbiAgKiBAcGFyYW0gIHtyZXNvdXJjZXN9IE9iamVjdCBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuXG4gIGdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50OiAoY29uZmlnLCByZXNvdXJjZXMpID0+IHtcbiAgICBjb25zb2xlLmxvZygnW09JREMuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6Y29uZmlnXScsIGNvbmZpZyk7XG4vLyAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDpyZXNvdXJjZXNdJywgcmVzb3VyY2VzKTtcbi8vICAgIGxldCBpID0gaWRwSW5mbztcbiAgICBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGNvbmZpZy5hY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDtcbiAgICBjb25zdCBtYXBwaW5nID0gY29uZmlnLm1hcHBpbmc7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIC8vIFRPRE8gcmVwbGFjZSBieSByZXNvdXJjZXNbMF1cbiAgICAgIHJlc29sdmUoYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQobWFwcGluZyhyZXNvdXJjZXMpKSk7XG5cbiAgICB9LCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICByZWplY3QoZSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2V0IGFuIEFjY2VzcyBUb2tlblxuICAqXG4gICogQHBhcmFtICB7bG9naW59IG9wdGlvbmFsIGxvZ2luIHJlc3VsdFxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG5cbiAgZ2V0QWNjZXNzVG9rZW46IChjb25maWcsIHJlc291cmNlcywgbG9naW4pID0+IHtcbiAgICBjb25zb2xlLmxvZygnW09JREMuZ2V0QWNjZXNzVG9rZW46Y29uZmlnXScsIGNvbmZpZyk7XG4vLyAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZXRBY2Nlc3NUb2tlbjpsb2dpbl0nLCBsb2dpbik7XG4vLyAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgYWNjZXNzVG9rZW5FbmRwb2ludCA9IGNvbmZpZy5hY2Nlc3NUb2tlbkVuZHBvaW50O1xuICAgIGRvbWFpbiA9IGNvbmZpZy5kb21haW47XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgLy8gdGhlIHVzZXIgaXMgbG9nZ2VkaW4sIHRyeSB0byBleHRyYWN0IHRoZSBBY2Nlc3MgVG9rZW4gYW5kIGl0cyBleHBpcmVzXG4gICAgICAgIGxldCBleHBpcmVzID0gZ2V0RXhwaXJlcyhsb2dpbik7XG5cbiAgICAgICAgbGV0IGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGxvZ2luLCAnYWNjZXNzX3Rva2VuJyk7XG5cbiAgICAgICAgaWYgKGFjY2Vzc1Rva2VuKSByZXNvbHZlKCBhY2Nlc3NUb2tlblJlc3VsdChyZXNvdXJjZXMsIGFjY2Vzc1Rva2VuLCBleHBpcmVzLCBsb2dpbikgKTtcbiAgICAgICAgZWxzZSByZXNvbHZlKCBnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4ocmVzb3VyY2VzLCBsb2dpbikgKTtcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICByZWplY3QoZSk7XG4gICAgfSk7XG4gIH0sXG5cbi8qKlxuICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cbiAgKlxuICAqIEBwYXJhbSAge2xvZ2lufSBvcHRpb25hbCBsb2dpbiByZXN1bHRcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuXG4gcmVmcmVzaEFjY2Vzc1Rva2VuOiAoY29uZmlnLCB0b2tlbikgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbT0lEQy5yZWZyZXNoQWNjZXNzVG9rZW46Y29uZmlnXScsIGNvbmZpZyk7XG4gIC8vICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XG4gIC8vICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW09JREMucmVmcmVzaEFjY2Vzc1Rva2VuOm91dGRhdGVkIHRva2VuXScsIHRva2VuKTtcbiAgLy8gICAgbGV0IGkgPSBpZHBJbmZvO1xuICByZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludCA9IGNvbmZpZy5yZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludDtcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIHRoZSB1c2VyIGlzIGxvZ2dlZGluLCB0cnkgdG8gZXh0cmFjdCB0aGUgQWNjZXNzIFRva2VuIGFuZCBpdHMgZXhwaXJlc1xuXG4gICAgICAgIGxldCByZWZyZXNoID0gdG9rZW4ucmVmcmVzaDtcblxuICAgICAgICBpZiAoIXJlZnJlc2gpIHJlamVjdCgnW09JREMucmVmcmVzaEFjY2Vzc1Rva2VuXSByZWZyZXNoIHRva2VuIG5vdCBhdmFpbGFibGUgaW4gdGhlIGFjY2VzcyB0b2tlbicsIHRva2VuKTtcbiAgICBcbiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCByZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludChyZWZyZXNoKSkudGhlbihmdW5jdGlvbiAoaW5mbykge1xuICAgIFxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbT0lEQy5yZWZyZXNoQWNjZXNzVG9rZW5dIHJlc3BvbnNlOiAnLCBpbmZvKTtcbiAgICBcbiAgICAgICAgICAgIGlmIChpbmZvLmhhc093blByb3BlcnR5KCdhY2Nlc3NfdG9rZW4nKSkge1xuICAgIFxuICAgICAgICAgICAgICBsZXQgZXhwaXJlcyA9IGdldEV4cGlyZXNBdEpTT04oaW5mbyk7XG4gICAgICAgICAgICAgIHJlc29sdmUgKGFjY2Vzc1Rva2VuUmVzdWx0KHRva2VuLnJlc291cmNlcywgaW5mby5hY2Nlc3NfdG9rZW4sIGV4cGlyZXMsIGluZm8sIHJlZnJlc2gpKTtcbiAgICAgICAgICAgIH0gZWxzZSByZWplY3QoJ1tPSURDLnJlZnJlc2hBY2Nlc3NUb2tlbl0gbmV3IGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIHJlc3BvbnNlOiAnLCBpbmZvKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgXG4vLyAgICAgIH0pO1xuICAgIFxuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfSAgXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9PSURDLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accessTokenEndpoint = accessTokenEndpoint;\nexports.refreshAccessTokenEndpoint = refreshAccessTokenEndpoint;\nexports.revokeAccessTokenEndpoint = revokeAccessTokenEndpoint;\nexports.mapping = mapping;\nexports.accessTokenAuthorisationEndpoint = accessTokenAuthorisationEndpoint;\nexports.authorisationEndpoint = authorisationEndpoint;\nexports.accessTokenInput = accessTokenInput;\n/*\n\tSo that an application can use Google's OAuth 2.0 authentication system for user login,\n\tfirst is required to set up a project in the Google Developers Console to obtain OAuth 2.0 credentials and set a redirect URI.\n\tA test account was created to set the project in the Google Developers Console to obtain OAuth 2.0 credentials,\twith the following credentials:\n      \tusername: openidtest10@gmail.com\n        password: testOpenID10\n\tTo add more URI's, follow the steps:\n\t1º choose the project ( can be the My OpenID Project)\t from  https://console.developers.google.com/projectselector/apis/credentials using the credentials provided above.\n\t2º Open The Client Web 1 listed in OAuth 2.0 Client ID's\n\t3º Add the URI  in the authorized redirect URI section.\n  4º change the REDIRECT parameter bellow with the pretended URI\n */\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\nvar googleInfo = exports.googleInfo = {\n  \"clientID\": \"808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com\",\n  \"issuer\": \"https://accounts.google.com\",\n  \"tokenEndpoint\": \"https://www.googleapis.com/oauth2/v4/token?\",\n  \"jwksUri\": \"https://www.googleapis.com/oauth2/v3/certs?\",\n  \"authorisationEndpoint\": \"https://accounts.google.com/o/oauth2/auth?\",\n  \"userinfo\": \"https://www.googleapis.com/oauth2/v3/userinfo?access_token=\",\n  \"tokenInfo\": \"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\",\n  \"accessType\": \"online\",\n  \"type\": \"token id_token\",\n  \"scope\": \"openid%20email%20profile\",\n  \"state\": \"state\",\n  \"domain\": \"google.com\"\n};\n\nvar googleAPIInfo = exports.googleAPIInfo = {\n  \"clientID\": \"808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com\",\n  \"issuer\": \"https://accounts.google.com\",\n  \"tokenEndpoint\": \"https://www.googleapis.com/oauth2/v4/token?\",\n  \"revokeEndpoint\": \"https://accounts.google.com/o/oauth2/revoke?\",\n  \"jwksUri\": \"https://www.googleapis.com/oauth2/v3/certs?\",\n  \"authorisationEndpoint\": \"https://accounts.google.com/o/oauth2/auth?\",\n  \"userinfo\": \"https://www.googleapis.com/oauth2/v3/userinfo?access_token=\",\n  \"tokenInfo\": \"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\",\n  \"accessType\": \"offline\",\n  \"type\": \"code\",\n  // TODO - scope is read from message (support multiple Google APIs)\n  \"scope\": \"https://www.googleapis.com/auth/fitness.activity.read\",\n  \"state\": \"state\",\n  \"domain\": \"google.com\",\n  'grant_type': \"authorization_code\",\n  'secret': \"Xx4rKucb5ZYTaXlcZX9HLfZW\"\n};\n\nfunction accessTokenEndpoint(code) {\n\n  return googleAPIInfo.tokenEndpoint + 'client_id=' + googleAPIInfo.clientID + '&code=' + code + '&grant_type=authorization_code' + '&access_type=' + 'offline' + '&client_secret=' + googleAPIInfo.secret + '&redirect_uri=' + redirectURI;\n}\n\nfunction refreshAccessTokenEndpoint(refresh) {\n\n  return googleAPIInfo.tokenEndpoint + 'client_id=' + googleAPIInfo.clientID + '&refresh_token=' + refresh + '&grant_type=refresh_token' + '&client_secret=' + googleAPIInfo.secret;\n}\n\nfunction revokeAccessTokenEndpoint(token) {\n\n  return googleAPIInfo.revokeEndpoint + '&token=' + token;\n}\n\nfunction mapping(resource) {\n  if (!resource) {\n    return \"fitness.activity.read\";\n  }\n  switch (resource) {\n    case \"user_activity_context\":\n      return \"fitness.activity.read\";\n      break;\n\n    default:\n      return \"fitness.activity.read\";\n      break;\n  }\n}\n\nfunction accessTokenAuthorisationEndpoint(API) {\n  var url = googleAPIInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + googleAPIInfo.type + '&client_id=' + googleAPIInfo.clientID + '&scope=' + 'https://www.googleapis.com/auth/' + API + '&access_type=' + googleAPIInfo.accessType\n  //    + '&include_granted_scopes=true'\n  //    + '&prompt=none'\n  + '&state=' + googleAPIInfo.state;\n  console.log('[GoogleInfo.accessTokenAuthorisationEndpoint] ', url);\n  return url;\n}\n\nfunction authorisationEndpoint(nonce) {\n\n  var url = googleAPIInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + googleAPIInfo.type + '&client_id=' + googleAPIInfo.clientID + '&scope=' + googleAPIInfo.scope + '&access_type=' + googleAPIInfo.accessType + '&state=' + nonce;\n  console.log('[GoogleInfo.authorisationEndpoint] ', url);\n  return url;\n}\n\nfunction accessTokenInput(info) {\n\n  return { info: info };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Hb29nbGVJbmZvLmpzPzc2ZDciXSwibmFtZXMiOlsiYWNjZXNzVG9rZW5FbmRwb2ludCIsInJlZnJlc2hBY2Nlc3NUb2tlbkVuZHBvaW50IiwicmV2b2tlQWNjZXNzVG9rZW5FbmRwb2ludCIsIm1hcHBpbmciLCJhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsImFjY2Vzc1Rva2VuSW5wdXQiLCJyZWRpcmVjdFVSSSIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInBvcnQiLCJnb29nbGVJbmZvIiwiZ29vZ2xlQVBJSW5mbyIsImNvZGUiLCJ0b2tlbkVuZHBvaW50IiwiY2xpZW50SUQiLCJzZWNyZXQiLCJyZWZyZXNoIiwidG9rZW4iLCJyZXZva2VFbmRwb2ludCIsInJlc291cmNlIiwiQVBJIiwidXJsIiwidHlwZSIsImFjY2Vzc1R5cGUiLCJzdGF0ZSIsImNvbnNvbGUiLCJsb2ciLCJub25jZSIsInNjb3BlIiwiaW5mbyJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFtRGdCQSxtQixHQUFBQSxtQjtRQVdBQywwQixHQUFBQSwwQjtRQVNBQyx5QixHQUFBQSx5QjtRQU1BQyxPLEdBQUFBLE87UUFlQUMsZ0MsR0FBQUEsZ0M7UUFjQUMscUIsR0FBQUEscUI7UUFhQUMsZ0IsR0FBQUEsZ0I7QUF2SGhCOzs7Ozs7Ozs7Ozs7QUFZQSxJQUFJQyxjQUFjQyxTQUFTQyxRQUFULEdBQW9CLElBQXBCLEdBQTJCRCxTQUFTRSxRQUFwQyxJQUFnREYsU0FBU0csSUFBVCxLQUFrQixFQUFsQixHQUF1QixNQUFNSCxTQUFTRyxJQUF0QyxHQUE2QyxFQUE3RixDQUFsQjs7QUFFTyxJQUFJQyxrQ0FBYTtBQUN0QixjQUFZLDBFQURVO0FBRXRCLFlBQVUsNkJBRlk7QUFHdEIsbUJBQWlCLDZDQUhLO0FBSXRCLGFBQVcsNkNB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YW4gdXNlIEdvb2dsZSdzIE9BdXRoIDIuMCBhdXRoZW50aWNhdGlvbiBzeXN0ZW0gZm9yIHVzZXIgbG9naW4sXG5cdGZpcnN0IGlzIHJlcXVpcmVkIHRvIHNldCB1cCBhIHByb2plY3QgaW4gdGhlIEdvb2dsZSBEZXZlbG9wZXJzIENvbnNvbGUgdG8gb2J0YWluIE9BdXRoIDIuMCBjcmVkZW50aWFscyBhbmQgc2V0IGEgcmVkaXJlY3QgVVJJLlxuXHRBIHRlc3QgYWNjb3VudCB3YXMgY3JlYXRlZCB0byBzZXQgdGhlIHByb2plY3QgaW4gdGhlIEdvb2dsZSBEZXZlbG9wZXJzIENvbnNvbGUgdG8gb2J0YWluIE9BdXRoIDIuMCBjcmVkZW50aWFscyxcdHdpdGggdGhlIGZvbGxvd2luZyBjcmVkZW50aWFsczpcbiAgICAgIFx0dXNlcm5hbWU6IG9wZW5pZHRlc3QxMEBnbWFpbC5jb21cbiAgICAgICAgcGFzc3dvcmQ6IHRlc3RPcGVuSUQxMFxuXHRUbyBhZGQgbW9yZSBVUkkncywgZm9sbG93IHRoZSBzdGVwczpcblx0McK6IGNob29zZSB0aGUgcHJvamVjdCAoIGNhbiBiZSB0aGUgTXkgT3BlbklEIFByb2plY3QpXHQgZnJvbSAgaHR0cHM6Ly9jb25zb2xlLmRldmVsb3BlcnMuZ29vZ2xlLmNvbS9wcm9qZWN0c2VsZWN0b3IvYXBpcy9jcmVkZW50aWFscyB1c2luZyB0aGUgY3JlZGVudGlhbHMgcHJvdmlkZWQgYWJvdmUuXG5cdDLCuiBPcGVuIFRoZSBDbGllbnQgV2ViIDEgbGlzdGVkIGluIE9BdXRoIDIuMCBDbGllbnQgSUQnc1xuXHQzwrogQWRkIHRoZSBVUkkgIGluIHRoZSBhdXRob3JpemVkIHJlZGlyZWN0IFVSSSBzZWN0aW9uLlxuICA0wrogY2hhbmdlIHRoZSBSRURJUkVDVCBwYXJhbWV0ZXIgYmVsbG93IHdpdGggdGhlIHByZXRlbmRlZCBVUklcbiAqL1xubGV0IHJlZGlyZWN0VVJJID0gbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUgKyAobG9jYXRpb24ucG9ydCAhPT0gJycgPyAnOicgKyBsb2NhdGlvbi5wb3J0IDogJycpO1xuXG5leHBvcnQgbGV0IGdvb2dsZUluZm8gPSB7XG4gIFwiY2xpZW50SURcIjogXCI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbiAgXCJpc3N1ZXJcIjogXCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb21cIixcbiAgXCJ0b2tlbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuP1wiLFxuICBcImp3a3NVcmlcIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvY2VydHM/XCIsXG4gIFwiYXV0aG9yaXNhdGlvbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGg/XCIsXG4gIFwidXNlcmluZm9cIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdXNlcmluZm8/YWNjZXNzX3Rva2VuPVwiLFxuICBcInRva2VuSW5mb1wiOiBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbmluZm8/aWRfdG9rZW49XCIsXG4gIFwiYWNjZXNzVHlwZVwiOiBcIm9ubGluZVwiLFxuICBcInR5cGVcIjogXCJ0b2tlbiBpZF90b2tlblwiLFxuICBcInNjb3BlXCI6IFwib3BlbmlkJTIwZW1haWwlMjBwcm9maWxlXCIsXG4gIFwic3RhdGVcIjogXCJzdGF0ZVwiLFxuICBcImRvbWFpblwiOiBcImdvb2dsZS5jb21cIlxufTtcblxuXG5leHBvcnQgbGV0IGdvb2dsZUFQSUluZm8gPSB7XG4gIFwiY2xpZW50SURcIjogXCI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbiAgXCJpc3N1ZXJcIjogXCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb21cIixcbiAgXCJ0b2tlbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuP1wiLFxuICBcInJldm9rZUVuZHBvaW50XCI6IFwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3Jldm9rZT9cIixcbiAgXCJqd2tzVXJpXCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzP1wiLFxuICBcImF1dGhvcmlzYXRpb25FbmRwb2ludFwiOiBcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoP1wiLFxuICBcInVzZXJpbmZvXCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj1cIixcbiAgXCJ0b2tlbkluZm9cIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW5pbmZvP2lkX3Rva2VuPVwiLFxuICBcImFjY2Vzc1R5cGVcIjogXCJvZmZsaW5lXCIsXG4gIFwidHlwZVwiOiBcImNvZGVcIixcbiAgLy8gVE9ETyAtIHNjb3BlIGlzIHJlYWQgZnJvbSBtZXNzYWdlIChzdXBwb3J0IG11bHRpcGxlIEdvb2dsZSBBUElzKVxuICBcInNjb3BlXCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9maXRuZXNzLmFjdGl2aXR5LnJlYWRcIixcbiAgXCJzdGF0ZVwiOiBcInN0YXRlXCIsXG4gIFwiZG9tYWluXCI6IFwiZ29vZ2xlLmNvbVwiLFxuICAnZ3JhbnRfdHlwZSc6IFwiYXV0aG9yaXphdGlvbl9jb2RlXCIsXG4gICdzZWNyZXQnOiBcIlh4NHJLdWNiNVpZVGFYbGNaWDlITGZaV1wiXG59O1xuXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGFjY2Vzc1Rva2VuRW5kcG9pbnQoY29kZSkge1xuXG4gIHJldHVybiBnb29nbGVBUElJbmZvLnRva2VuRW5kcG9pbnRcbiAgICArICdjbGllbnRfaWQ9JyArIGdvb2dsZUFQSUluZm8uY2xpZW50SURcbiAgICArICcmY29kZT0nICsgY29kZVxuICAgICsgJyZncmFudF90eXBlPWF1dGhvcml6YXRpb25fY29kZSdcbiAgICArICcmYWNjZXNzX3R5cGU9JyArICdvZmZsaW5lJ1xuICAgICsgJyZjbGllbnRfc2VjcmV0PScgKyBnb29nbGVBUElJbmZvLnNlY3JldFxuICAgICsgJyZyZWRpcmVjdF91cmk9JyArIHJlZGlyZWN0VVJJO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQocmVmcmVzaCkge1xuXG4gIHJldHVybiBnb29nbGVBUElJbmZvLnRva2VuRW5kcG9pbnRcbiAgICArICdjbGllbnRfaWQ9JyArIGdvb2dsZUFQSUluZm8uY2xpZW50SURcbiAgICArICcmcmVmcmVzaF90b2tlbj0nICsgcmVmcmVzaFxuICAgICsgJyZncmFudF90eXBlPXJlZnJlc2hfdG9rZW4nXG4gICAgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGdvb2dsZUFQSUluZm8uc2VjcmV0XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXZva2VBY2Nlc3NUb2tlbkVuZHBvaW50KHRva2VuKSB7XG5cbiAgcmV0dXJuIGdvb2dsZUFQSUluZm8ucmV2b2tlRW5kcG9pbnRcbiAgICArICcmdG9rZW49JyArIHRva2VuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXBwaW5nKHJlc291cmNlKSB7XG4gIGlmICghcmVzb3VyY2UpIHtcbiAgICByZXR1cm4gXCJmaXRuZXNzLmFjdGl2aXR5LnJlYWRcIjtcbiAgfVxuICBzd2l0Y2ggKHJlc291cmNlKSB7XG4gICAgY2FzZSBcInVzZXJfYWN0aXZpdHlfY29udGV4dFwiOlxuICAgICAgcmV0dXJuIFwiZml0bmVzcy5hY3Rpdml0eS5yZWFkXCI7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJmaXRuZXNzLmFjdGl2aXR5LnJlYWRcIjtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChBUEkpIHtcbiAgbGV0IHVybCA9IGdvb2dsZUFQSUluZm8uYXV0aG9yaXNhdGlvbkVuZHBvaW50XG4gICAgKyAncmVkaXJlY3RfdXJpPScgKyByZWRpcmVjdFVSSVxuICAgICsgJyZyZXNwb25zZV90eXBlPScgKyBnb29nbGVBUElJbmZvLnR5cGVcbiAgICArICcmY2xpZW50X2lkPScgKyBnb29nbGVBUElJbmZvLmNsaWVudElEXG4gICAgKyAnJnNjb3BlPScgKyAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC8nICsgQVBJXG4gICAgKyAnJmFjY2Vzc190eXBlPScgKyBnb29nbGVBUElJbmZvLmFjY2Vzc1R5cGVcbi8vICAgICsgJyZpbmNsdWRlX2dyYW50ZWRfc2NvcGVzPXRydWUnXG4vLyAgICArICcmcHJvbXB0PW5vbmUnXG4gICAgKyAnJnN0YXRlPScgKyBnb29nbGVBUElJbmZvLnN0YXRlO1xuICBjb25zb2xlLmxvZygnW0dvb2dsZUluZm8uYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnRdICcsIHVybCk7XG4gIHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdXRob3Jpc2F0aW9uRW5kcG9pbnQobm9uY2UpIHtcblxuICBsZXQgdXJsID0gZ29vZ2xlQVBJSW5mby5hdXRob3Jpc2F0aW9uRW5kcG9pbnRcbiAgICArICdyZWRpcmVjdF91cmk9JyArIHJlZGlyZWN0VVJJXG4gICAgKyAnJnJlc3BvbnNlX3R5cGU9JyArIGdvb2dsZUFQSUluZm8udHlwZVxuICAgICsgJyZjbGllbnRfaWQ9JyArIGdvb2dsZUFQSUluZm8uY2xpZW50SURcbiAgICArICcmc2NvcGU9JyArIGdvb2dsZUFQSUluZm8uc2NvcGVcbiAgICArICcmYWNjZXNzX3R5cGU9JyArIGdvb2dsZUFQSUluZm8uYWNjZXNzVHlwZVxuICAgICsgJyZzdGF0ZT0nICsgbm9uY2U7XG4gIGNvbnNvbGUubG9nKCdbR29vZ2xlSW5mby5hdXRob3Jpc2F0aW9uRW5kcG9pbnRdICcsIHVybCk7XG4gIHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY2Nlc3NUb2tlbklucHV0KGluZm8pIHtcblxuICByZXR1cm4ge2luZm99O1xufVxuXG5cblxuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Hb29nbGVJbmZvLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertUserProfile = convertUserProfile;\n\n// function to convert google user profile info into standard reTHINK user profile object\n\nfunction convertUserProfile(googleUserProfile) {\n\n  googleUserProfile.userURL = 'user://google.com/' + googleUserProfile.email;\n\n  if (!googleUserProfile.hasOwnProperty('preferred_username')) googleUserProfile.preferred_username = googleUserProfile.email.split('@')[0];\n\n  return googleUserProfile;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Hb29nbGVDb252ZXJ0ZXIuanM/MzkzMSJdLCJuYW1lcyI6WyJjb252ZXJ0VXNlclByb2ZpbGUiLCJnb29nbGVVc2VyUHJvZmlsZSIsInVzZXJVUkwiLCJlbWFpbCIsImhhc093blByb3BlcnR5IiwicHJlZmVycmVkX3VzZXJuYW1lIiwic3BsaXQiXSwibWFwcGluZ3MiOiI7Ozs7O1FBR2dCQSxrQixHQUFBQSxrQjs7QUFGaEI7O0FBRU8sU0FBU0Esa0JBQVQsQ0FBNEJDLGlCQUE1QixFQUErQzs7QUFFcERBLG9CQUFrQkMsT0FBbEIsR0FBNEIsdUJBQXVCRCxrQkFBa0JFLEtBQXJFOztBQUVBLE1BQUksQ0FBQ0Ysa0JBQWtCRyxjQUFsQixDQUFpQyxvQkFBakMsQ0FBTCxFQUNFSCxrQkFBa0JJLGtCQUFsQixHQUF1Q0osa0JBQWtCRSxLQUFsQixDQUF3QkcsS0FBeEIsQ0FBOEIsR0FBOUIsRUFBbUMsQ0FBbkMsQ0FBdkM7O0FBRUYsU0FBT0wsaUJBQVA7QUFDRCIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBmdW5jdGlvbiB0byBjb252ZXJ0IGdvb2dsZSB1c2VyIHByb2ZpbGUgaW5mbyBpbnRvIHN0YW5kYXJkIHJlVEhJTksgdXNlciBwcm9maWxlIG9iamVjdFxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFVzZXJQcm9maWxlKGdvb2dsZVVzZXJQcm9maWxlKSB7XG5cbiAgZ29vZ2xlVXNlclByb2ZpbGUudXNlclVSTCA9ICd1c2VyOi8vZ29vZ2xlLmNvbS8nICsgZ29vZ2xlVXNlclByb2ZpbGUuZW1haWw7XG5cbiAgaWYgKCFnb29nbGVVc2VyUHJvZmlsZS5oYXNPd25Qcm9wZXJ0eSgncHJlZmVycmVkX3VzZXJuYW1lJykpIFxuICAgIGdvb2dsZVVzZXJQcm9maWxlLnByZWZlcnJlZF91c2VybmFtZSA9IGdvb2dsZVVzZXJQcm9maWxlLmVtYWlsLnNwbGl0KCdAJylbMF07XG5cbiAgcmV0dXJuIGdvb2dsZVVzZXJQcm9maWxlO1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9nb29nbGUvR29vZ2xlQ29udmVydGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdpProxy = void 0;\nvar idpInfo = void 0;\nvar convertUserProfile = void 0;\nvar userInfoEndpoint = void 0;\nvar accessTokenInput = void 0;\n\n/**\n* Abstract Identity Provider Proxy Protocol Stub to be extended by real Idp Proxies\n*/\n\nvar AbstractIdpProxyProtoStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function AbstractIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, AbstractIdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n    IdpProxy = config.idpProxy;\n    convertUserProfile = config.convertUserProfile;\n    accessTokenInput = config.accessTokenInput;\n\n    console.log('[AbstractIdpProxy] constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === config.idpUrl) {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(AbstractIdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n      console.info('[AbstractIdpProxyProtoStub] receiving request: ', msg);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          IdpProxy.generateAssertion(_this.config, params.contents, params.origin, params.usernameHint).then(function (value) {\n\n            value.userProfile = convertUserProfile(value.userProfile);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          //       console.info('validateAssertion');\n          IdpProxy.validateAssertion(_this.config, params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          //     console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessTokenAuthorisationEndpoint':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessTokenAuthorisationEndpoint(_this.config, params.resources).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessToken(_this.config, params.resources, params.login).then(function (value) {\n            console.info('OIDC.getAccessToken result: ', value);\n            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.refreshAccessToken(_this.config, params.token).then(function (value) {\n            console.info('OIDC.refreshAccessToken result: ', value);\n            //            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = {\n        id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value }\n      };\n\n      console.log('[AbstractIdpProxyProtoStub.replyMessage] ', message);\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[AbstractIdpProxyProtoStub.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return AbstractIdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nexports.default = AbstractIdpProxyProtoStub;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L0Fic3RyYWN0SWRwUHJveHlTdHViLmpzPzI3MjQiXSwibmFtZXMiOlsiSWRwUHJveHkiLCJpZHBJbmZvIiwiY29udmVydFVzZXJQcm9maWxlIiwidXNlckluZm9FbmRwb2ludCIsImFjY2Vzc1Rva2VuSW5wdXQiLCJBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsIl90aGlzIiwibWVzc2FnZUJ1cyIsImlkcFByb3h5IiwiY29uc29sZSIsImxvZyIsImFkZExpc3RlbmVyIiwibXNnIiwidG8iLCJpZHBVcmwiLCJyZXF1ZXN0VG9JZHAiLCJfc2VuZFN0YXR1cyIsInBhcmFtcyIsImJvZHkiLCJpbmZvIiwibWV0aG9kIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJjb250ZW50cyIsIm9yaWdpbiIsInVzZXJuYW1lSGludCIsInRoZW4iLCJ2YWx1ZSIsInVzZXJQcm9maWxlIiwicmVwbHlNZXNzYWdlIiwiZXJyb3IiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsInJlZnJlc2hBc3NlcnRpb24iLCJpZGVudGl0eSIsImdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwicmVzb3VyY2VzIiwiZ2V0QWNjZXNzVG9rZW4iLCJsb2dpbiIsImlucHV0IiwicmVmcmVzaEFjY2Vzc1Rva2VuIiwidG9rZW4iLCJtZXNzYWdlIiwiaWQiLCJ0eXBlIiwiZnJvbSIsImNvZGUiLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsIl9zdGF0ZSIsImRlc2MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxpQkFBSjtBQUNBLElBQUlDLGdCQUFKO0FBQ0EsSUFBSUMsMkJBQUo7QUFDQSxJQUFJQyx5QkFBSjtBQUNBLElBQUlDLHlCQUFKOztBQUVBOzs7O0lBR01DLHlCOztBQUVKOzs7Ozs7OztBQVFBLHFDQUFZ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akIsY0FBUUMsR0FBUixDQUFZLDJDQUFaLEVBQXlEK0IsT0FBekQ7O0FBRUFuQyxZQUFNQyxVQUFOLENBQWlCdUMsV0FBakIsQ0FBNkJMLE9BQTdCO0FBQ0Q7OztnQ0FFV2YsSyxFQUFPcUIsTSxFQUFRO0FBQ3pCLFVBQUl6QyxRQUFRLElBQVo7O0FBRUFHLGNBQVFDLEdBQVIsQ0FBWSx5Q0FBWixFQUF1RGdCLEtBQXZEOztBQUVBcEIsWUFBTTBDLE1BQU4sR0FBZXRCLEtBQWY7O0FBRUEsVUFBSWQsTUFBTTtBQUNSK0IsY0FBTSxRQURFO0FBRVJDLGNBQU10QyxNQUFNSCxtQkFGSjtBQUdSVSxZQUFJUCxNQUFNSCxtQkFBTixHQUE0QixTQUh4QjtBQUlSZSxjQUFNO0FBQ0pRLGlCQUFPQTtBQURIO0FBSkUsT0FBVjs7QUFTQSxVQUFJcUIsTUFBSixFQUFZO0FBQ1ZuQyxZQUFJTSxJQUFKLENBQVMrQixJQUFULEdBQWdCRixNQUFoQjtBQUNEOztBQUVEekMsWUFBTUMsVUFBTixDQUFpQnVDLFdBQWpCLENBQTZCbEMsR0FBN0I7QUFDRDs7Ozs7O0FBR0g7O0FBRUE7Ozs7Ozs7OztrQkFPZVYseUIiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBJZHBQcm94eTtcbmxldCBpZHBJbmZvO1xubGV0IGNvbnZlcnRVc2VyUHJvZmlsZTtcbmxldCB1c2VySW5mb0VuZHBvaW50O1xubGV0IGFjY2Vzc1Rva2VuSW5wdXQ7XG5cbi8qKlxuKiBBYnN0cmFjdCBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViIHRvIGJlIGV4dGVuZGVkIGJ5IHJlYWwgSWRwIFByb3hpZXNcbiovXG5jbGFzcyBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIHtcblxuICAvKipcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgKi9cbiAgY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7XG4gICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIElkcFByb3h5ID0gY29uZmlnLmlkcFByb3h5O1xuICAgIGNvbnZlcnRVc2VyUHJvZmlsZSA9IGNvbmZpZy5jb252ZXJ0VXNlclByb2ZpbGU7XG4gICAgYWNjZXNzVG9rZW5JbnB1dCA9IGNvbmZpZy5hY2Nlc3NUb2tlbklucHV0O1xuXG5cbiAgICBjb25zb2xlLmxvZygnW0Fic3RyYWN0SWRwUHJveHldIGNvbnN0cnVjdG9yJyk7XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKG1zZy50byA9PT0gY29uZmlnLmlkcFVybCkge1xuXG4gICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uXG4gICpcbiAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG4gICovXG4gIHJlcXVlc3RUb0lkcChtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7XG4gICAgLy9jb25zb2xlLmluZm8oJ3JlcXVlc3RUb0lkcDonLCBtc2cuYm9keS5tZXRob2QpO1xuICAgIGNvbnNvbGUuaW5mbygnW0Fic3RyYWN0SWRwUHJveHlQcm90b1N0dWJdIHJlY2VpdmluZyByZXF1ZXN0OiAnLCBtc2cpO1xuXG4gICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb24oX3RoaXMuY29uZmlnLCBwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICAgICAgICAgIHZhbHVlLnVzZXJQcm9maWxlID0gY29udmVydFVzZXJQcm9maWxlKHZhbHVlLnVzZXJQcm9maWxlKTtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTsgfVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgLy8gICAgICAgY29uc29sZS5pbmZvKCd2YWxpZGF0ZUFzc2VydGlvbicpO1xuICAgICAgICBJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvbihfdGhpcy5jb25maWcsIHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTsgfSxcblxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWZyZXNoQXNzZXJ0aW9uJzpcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygncmVmcmVzaEFzc2VydGlvbicpO1xuICAgICAgICBJZHBQcm94eS5yZWZyZXNoQXNzZXJ0aW9uKHBhcmFtcy5pZGVudGl0eSkudGhlbihcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOyB9LFxuXG4gICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTsgfVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2dldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50JzpcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygnZ2V0QWNjZXNzVG9rZW4nKTtcbiAgICAgICAgSWRwUHJveHkuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQoX3RoaXMuY29uZmlnLCBwYXJhbXMucmVzb3VyY2VzKS50aGVuKFxuICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZ2V0QWNjZXNzVG9rZW4nOlxuICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICBJZHBQcm94eS5nZXRBY2Nlc3NUb2tlbihfdGhpcy5jb25maWcsIHBhcmFtcy5yZXNvdXJjZXMsIHBhcmFtcy5sb2dpbikudGhlbihcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnT0lEQy5nZXRBY2Nlc3NUb2tlbiByZXN1bHQ6ICcsIHZhbHVlKTtcbiAgICAgICAgICAgIHZhbHVlLmlucHV0ID0gYWNjZXNzVG9rZW5JbnB1dCh2YWx1ZS5pbnB1dCk7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWZyZXNoQWNjZXNzVG9rZW4nOlxuICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICBJZHBQcm94eS5yZWZyZXNoQWNjZXNzVG9rZW4oX3RoaXMuY29uZmlnLCBwYXJhbXMudG9rZW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ09JREMucmVmcmVzaEFjY2Vzc1Rva2VuIHJlc3VsdDogJywgdmFsdWUpO1xuLy8gICAgICAgICAgICB2YWx1ZS5pbnB1dCA9IGFjY2Vzc1Rva2VuSW5wdXQodmFsdWUuaW5wdXQpO1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKlxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxuICAqL1xuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZSB9XG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKCdbQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yi5yZXBseU1lc3NhZ2VdICcsIG1lc3NhZ2UpO1xuXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgfVxuXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcblxuICAgIF90aGlzLl9zdGF0ZSA9IHZhbHVlO1xuXG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxuICAgICAgYm9keToge1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHJlYXNvbikge1xuICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjtcbiAgICB9XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gIH1cbn1cblxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG5cbi8qKlxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxuICovXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9BYnN0cmFjdElkcFByb3h5U3R1Yi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "35.30",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5fe88c210039898a45c75f6de8c56f417",
    "constraints": {
      "browser": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "interworking": true
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\nvar https = __webpack_require__(1);\nvar btoa = __webpack_require__(2);\nvar atob = __webpack_require__(3);\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\n//let URL = i.tokenEndpoint + 'code=' + code + '&client_id=' +\n//        i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' +\n//        i.redirectURI + '&grant_type=authorization_code';\n\nfunction sendHTTPRequest(method, url) {\n  return new Promise(function (resolve, reject) {\n    //return makeLocalRequest(method, url, undefined);\n    console.log('sendHTTPRequest:url', url);\n    var splitedText = url.split('/');\n    var host = splitedText[2];\n    var replacedURL = url.replace(splitedText[0] + '//' + splitedText[2], '');\n    var options = {\n      hostname: host,\n      port: 443,\n      path: replacedURL,\n      method: method\n    };\n    console.log('sendHTTPRequest:options', options);\n\n    var req = https.request(options, function (res) {\n      console.log('sendHTTPRequest:statusCode:', res.statusCode);\n      console.log('sendHTTPRequest:headers:', res.headers);\n      var stream = '';\n      res.on('data', function (d) {\n        stream += d;\n      });\n      res.on('end', function () {\n        console.log('sendHTTPRequest:data:', stream);\n        resolve(stream);\n      });\n    });\n\n    req.on('error', function (e) {\n      console.error('https_return: ' + e);\n    });\n    req.end();\n  });\n}\n\n/**\r\n* @returns {variable<string>}\r\n**/\nfunction mapProtocol(url) {\n  var protocolmap = {\n    'localhost://': 'https://',\n    'undefined://': 'https://',\n    'hyperty-catalogue://': 'https://',\n    'https://': 'https://',\n    'http://': 'https://'\n  };\n\n  var foundProtocol = false;\n  var resultURL = undefined;\n  for (var protocol in protocolmap) {\n    if (url.slice(0, protocol.length) === protocol) {\n      resultURL = protocolmap[protocol] + url.slice(protocol.length, url.length);\n      foundProtocol = true;\n      break;\n    }\n  }\n\n  if (!foundProtocol) {\n    throw new Error('Invalid protocol of url: ' + url);\n  }\n  return resultURL;\n}\n\nvar getAuth = function getAuth(contents) {\n  var i = googleInfo;\n\n  return new Promise(function (resolve, reject) {\n    var URL = i.authorisationEndpoint + 'scope=' + i.scope + '&client_id=' + i.clientID + '&redirect_uri=' + i.redirectURI + '&response_type=' + i.type + '&state=' + i.state + '&access_type=' + i.accessType + '&nonce=' + contents + '&prompt=none';\n\n    sendHTTPRequest('POST', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      console.log('ERROR:', error);\n      reject(error);\n    });\n  });\n};\n\n/**\r\n* Function to exchange the code received to the id Token, access token and a refresh token\r\n*\r\n*/\nvar exchangeCode = function exchangeCode(code) {\n  var i = googleInfo;\n\n  return new Promise(function (resolve, reject) {\n\n    var URL = i.tokenEndpoint + 'code=' + code + '&client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' + i.redirectURI + '&grant_type=authorization_code';\n\n    sendHTTPRequest('POST', URL).then(function (info) {\n      console.log('[IDPROXY.exchangeCode:info]', info);\n      resolve(info);\n    }, function (error) {\n      console.log('[IDPROXY.exchangeCode:err]', error.message);\n      //reject(error);\n    });\n  });\n};\n\n/**\r\n* Identity Provider Proxy\r\n*/\n\nvar idp = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJS', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n\n      // atob may need to be required for nodejs\n      // var atob = require('atob');\n      var decodedContent = atob(assertion);\n      console.log('validateAssertionProxyNODEJS:decodedContent', decodedContent);\n\n      var content = JSON.parse(decodedContent);\n      console.log('validateAssertionProxyNODEJS:content', content);\n\n      var idTokenSplited = content.tokenID.split('.');\n\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  * TODO add details of the implementation, and improve implementation\r\n  *\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertion:contents]', contents);\n    console.log('[IDPROXY.generateAssertion:origin]', origin);\n    console.log('[IDPROXY.generateAssertion:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      //the hint field contains the information obtained after the user authentication\n      // if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n      var i = googleInfo;\n\n      if (!hint) {\n        resolve('hint');\n      } else {\n\n        console.log('generateMessageResponse:');\n        return resolve(generateMessageResponse);\n\n        // the request have already been made, so idpPRoxy will exchange the tokens along to the idp, to obtain the information necessary\n        var accessToken = urlParser(hint, 'access_token');\n        var idToken = urlParser(hint, 'id_token');\n        var code = urlParser(hint, 'code');\n\n        exchangeCode(code).then(function (value) {\n\n          console.log('TIAGO exchange code');\n\n          //obtain information about the user\n          var infoTokenURL = i.userinfo + value.access_token;\n          sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n\n            console.log('TIAGO info token url');\n            var identityBundle = { accessToken: value.access_token, idToken: value.id_token, refreshToken: value.refresh_token, tokenType: value.token_type, infoToken: infoToken };\n\n            var idTokenURL = i.tokenInfo + value.id_token;\n\n            //obtain information about the user idToken\n            sendHTTPRequest('GET', idTokenURL).then(function (idToken) {\n\n              console.log('TIAGO id token url');\n              identityBundle.tokenIDJSON = idToken;\n              identityBundle.expires = idToken.exp;\n              identityBundle.email = idToken.email;\n\n              var assertion = btoa(JSON.stringify({ tokenID: value.id_token, tokenIDJSON: idToken }));\n              var idpBundle = { domain: 'google.com', protocol: 'OIDC' };\n\n              //TODO delete later the field infoToken, and delete the need in the example\n              var returnValue = { assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken };\n\n              identities[nIdentity] = returnValue;\n              ++nIdentity;\n\n              console.log('[IDPROXY.generateAssertion:returnValue]', returnValue);\n              resolve(returnValue);\n            }, function (e) {\n\n              reject(e);\n            });\n          }, function (error) {\n\n            reject(error);\n          });\n        }, function (err) {\n          console.log('[IDPROXY.generateAssertion:exchangeCode]', err);\n          //reject(err);\n        });\n      }\n    });\n  }\n\n  /**\r\n  * Identity Provider Proxy Protocol Stub\r\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('Google->NODEJS constructor');\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://google.com') {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n    * This function receives a message and a value. It replies the value to the sender of the message received\r\n    *\r\n    * @param  {message}   message received\r\n    * @param  {value}     value to include in the new message to send\r\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}\n\nvar generateMessageResponse = { assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n  idp: {\n    domain: 'nodejs-idp',\n    protocol: 'OIDC' },\n  info: {\n    accessToken: 'ya29.GlsbBalGJJmVi_N5IDyqMI3JxkO5eLV4333I93eQBCpNAofEqtU4UkWHh8drVlrViVTqt6Jk3P86_CDt4sKVh0G9AbTk1rVW3MAxcFhEUFE-KMXdDK_KsMf6fNQk',\n    idToken: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDMxNTQ0OTE3MTEyNzUxMjYzNDIiLCJlbWFpbCI6InRlc3RhbmR0aGluazMyMUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6Ii03dmE2M1VvdWVEMkx6S1czRl82OFEiLCJub25jZSI6Ils0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0iLCJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJpYXQiOjE1MTI2NDYwODAsImV4cCI6MTUxMjY0OTY4MH0.teI1m90VrAEgKtv3PIG7J6sAhd_QY7mi3QsWLYbakWJqL6f4gmFyddEwqKxGY4x7sMLtj-Uc0ZKuWX_qE7K6iwjhMlzbTHK8LehyILOCY7Xsuoa6MqfT1Wp8Bg0TfJHuOnbZ_ymxPMQKOkfZiPVS5iqsO3bneQzTr0JbqtQ7xWsJS6nz-iA6rEdKjfC70amW0iSI--lWmX7sZaTeZc7ug4r4Z5-zLF39zwQPOwEQAlT-ZA_y1gO_4VueDeZmWmVuz2kJO_91h6qE5nZOtwWVuCrdw-9Iaw7z2DPes_j5RD8lDovR6JM0dj2JqzL9VpTcmF27AJsc1jhQLsLWblcxZw',\n    refreshToken: '1/6cCGEWyzx2uO2bH2F1A8v6KDTG4rP0CXc-XUQ12-U0o',\n    tokenType: 'Bearer',\n    infoToken: {\n      sub: '103154491711275126342',\n      name: 'test think',\n      given_name: 'test',\n      family_name: 'think',\n      picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      email: 'testandthink321@gmail.com',\n      email_verified: true,\n      locale: 'en' },\n    tokenIDJSON: { 'azp': '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      aud: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      sub: '103154491711275126342',\n      email: 'testandthink321@gmail.com',\n      email_verified: 'true',\n      at_hash: '-7va63UoueD2LzKW3F_68Q',\n      nonce: '[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1]',\n      iss: 'https://accounts.nodejs-idp',\n      iat: '1512646080',\n      exp: '1512649680',\n      alg: 'RS256',\n      kid: '477d17972d2a001074d586b588976d234296801e' },\n    expires: '1512649680',\n    email: 'testandthink321@gmail.com' },\n  infoToken: { sub: '103154491711275126342',\n    name: 'test think',\n    given_name: 'test',\n    family_name: 'think',\n    picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n    email: 'testandthink321@gmail.com',\n    email_verified: true,\n    locale: 'en' },\n  identity: 'user://nodejs-idp/testandthink321@gmail.com',\n  messageInfo: { userProfile: { username: 'testandthink321@gmail.com',\n      cn: 'testandthink321',\n      avatar: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      locale: 'en',\n      userURL: 'user://nodejs-idp/testandthink321@gmail.com' },\n    idp: 'nodejs-idp',\n    assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n    expires: '1512649680' }\n  /*\r\n  keyPair:{\r\n  public:[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1],\r\n  private:[48,130,4,191,2,1,0,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,4,130,4,169,48,130,4,165,2,1,0,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1,2,130,1,0,103,244,137,118,116,82,14,203,102,107,253,88,12,199,222,60,243,136,86,157,74,224,190,53,113,57,157,250,49,130,96,31,252,136,152,70,143,17,215,96,103,51,18,35,141,212,210,205,9,216,83,70,245,71,138,119,112,229,164,176,9,37,81,161,193,154,68,249,115,106,201,6,12,225,144,126,141,210,141,242,128,159,221,163,222,21,233,230,167,206,59,24,250,233,81,122,102,26,6,233,72,133,47,77,155,238,86,6,139,24,131,163,179,112,48,247,142,6,207,204,173,223,140,199,150,95,123,152,202,155,131,238,62,96,133,4,217,51,121,30,38,178,189,216,44,35,241,93,7,62,90,111,216,66,209,243,128,234,141,84,135,181,13,38,220,114,245,240,178,95,220,206,11,186,234,213,66,121,83,68,89,75,46,183,145,183,147,160,215,118,198,125,181,146,30,251,58,87,47,209,237,97,24,47,179,6,110,242,99,150,226,148,198,174,146,101,213,87,178,10,223,105,18,56,53,22,212,158,170,176,51,86,145,125,124,44,9,85,19,144,246,170,78,124,30,32,12,166,174,139,77,63,173,82,10,153,2,129,129,0,248,18,143,246,137,136,145,219,178,39,27,94,64,90,47,163,114,60,63,187,131,143,244,16,42,128,231,117,92,98,219,155,62,107,252,17,245,45,160,225,103,142,72,36,193,150,235,214,175,62,212,56,45,9,0,60,114,107,134,228,204,131,131,214,94,201,148,159,99,139,181,13,119,38,30,107,166,165,203,43,34,20,207,171,32,58,167,62,196,153,103,204,213,247,48,111,227,59,95,97,194,187,53,10,247,108,58,86,28,29,113,8,110,171,220,245,11,82,233,223,91,68,166,117,174,187,62,77,2,129,129,0,235,118,2,105,239,212,30,104,157,41,109,11,248,152,22,236,97,40,153,131,228,5,86,187,113,126,144,76,141,79,110,250,146,152,49,58,156,201,176,92,189,209,30,112,108,175,204,204,247,164,46,129,239,98,127,49,145,218,63,193,124,174,18,98,201,99,154,162,138,78,159,253,3,248,3,209,36,239,193,155,193,5,19,236,37,78,118,135,250,199,7,141,248,120,36,136,93,98,174,60,18,215,93,174,107,141,116,145,167,221,210,169,247,67,254,222,161,134,63,221,90,87,42,99,227,81,173,151,2,129,129,0,133,23,168,103,83,232,146,160,181,23,40,38,204,13,214,203,49,41,195,227,189,181,8,243,119,106,75,67,250,250,10,234,98,118,26,250,35,121,132,124,10,76,26,198,165,154,108,19,117,88,23,17,192,143,184,177,181,141,157,4,185,248,193,77,204,243,7,170,240,4,111,113,183,0,27,136,20,19,149,74,33,241,218,108,236,80,171,148,16,116,97,109,83,74,88,145,94,239,102,192,19,114,207,5,128,51,111,164,237,86,154,99,52,197,62,57,182,6,152,245,61,137,58,105,159,2,84,109,2,129,129,0,226,67,111,132,95,91,101,177,63,189,44,53,193,184,92,230,223,98,133,74,209,86,52,7,65,195,206,100,81,178,144,65,167,151,42,79,89,149,18,173,188,21,244,251,49,230,41,150,153,46,35,38,231,99,174,56,115,32,215,253,85,147,108,197,147,34,236,216,222,177,57,90,136,114,207,48,46,31,90,220,18,58,143,239,111,214,27,95,6,36,53,229,62,108,45,39,1,30,47,178,56,164,206,56,42,208,46,193,61,31,147,45,147,23,187,22,50,255,111,229,132,199,152,75,142,136,209,151,2,129,129,0,165,56,232,76,55,57,240,159,92,207,220,143,130,30,57,234,251,172,171,180,54,159,229,96,246,73,112,146,75,157,242,201,161,218,37,176,35,170,50,90,148,102,191,199,239,174,78,72,67,85,199,45,149,145,132,161,212,33,157,75,216,79,39,233,18,210,255,26,72,229,239,44,12,147,158,176,192,95,126,32,175,23,226,131,139,197,175,193,62,8,151,252,68,154,94,89,189,125,90,30,36,175,73,230,194,13,233,247,123,60,241,47,171,51,189,112,111,213,141,89,70,249,236,63,236,110,115,208]\r\n  }*/\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Ob2RlanNQcm94eVN0dWIuaWRwLmpzP2I5MzgiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJpZGVudGl0aWVzIiwibklkZW50aXR5IiwiaHR0cHMiLCJyZXF1aXJlIiwiYnRvYSIsImF0b2IiLCJnb29nbGVJbmZvIiwiY2xpZW50U2VjcmV0IiwiY2xpZW50SUQiLCJyZWRpcmVjdFVSSSIsImlzc3VlciIsInRva2VuRW5kcG9pbnQiLCJqd2tzVXJpIiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidXNlcmluZm8iLCJ0b2tlbkluZm8iLCJhY2Nlc3NUeXBlIiwidHlwZSIsInNjb3BlIiwic3RhdGUiLCJ1cmxQYXJzZXIiLCJ1cmwiLCJuYW1lIiwicmVwbGFjZSIsInJlZ2V4UyIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJzZW5kSFRUUFJlcXVlc3QiLCJtZXRob2QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImNvbnNvbGUiLCJsb2ciLCJzcGxpdGVkVGV4dCIsInNwbGl0IiwiaG9zdCIsInJlcGxhY2VkVVJMIiwib3B0aW9ucyIsImhvc3RuYW1lIiwicG9ydCIsInBhdGgiLCJyZXEiLCJyZXF1ZXN0IiwicmVzIiwic3RhdHVzQ29kZSIsImhlYWRlcnMiLCJzdHJlYW0iLCJvbiIsImQiLCJlIiwiZXJyb3IiLCJlbmQiLCJtYXBQcm90b2NvbCIsInByb3RvY29sbWFwIiwiZm91bmRQcm90b2NvbCIsInJlc3VsdFVSTCIsInVuZGVmaW5lZCIsInByb3RvY29sIiwic2xpY2UiLCJsZW5ndGgiLCJFcnJvciIsImdldEF1dGgiLCJjb250ZW50cyIsImkiLCJVUkwiLCJ0aGVuIiwiaW5mbyIsImV4Y2hhbmdlQ29kZSIsImNvZGUiLCJtZXNzYWdlIiwiaWRwIiwidmFsaWRhdGVBc3NlcnRpb24iLCJhc3NlcnRpb24iLCJvcmlnaW4iLCJkZWNvZGVkQ29udGVudCIsImNvbnRlbnQiLCJKU09OIiwicGFyc2UiLCJpZFRva2VuU3BsaXRlZCIsInRva2VuSUQiLCJpZFRva2VuIiwiaWRlbnRpdHkiLCJlbWFpbCIsIm5vbmNlIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwiZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UiLCJhY2Nlc3NUb2tlbiIsInZhbHVlIiwiaW5mb1Rva2VuVVJMIiwiYWNjZXNzX3Rva2VuIiwiaW5mb1Rva2VuIiwiaWRlbnRpdHlCdW5kbGUiLCJpZF90b2tlbiIsInJlZnJlc2hUb2tlbiIsInJlZnJlc2hfdG9rZW4iLCJ0b2tlblR5cGUiLCJ0b2tlbl90eXBlIiwiaWRUb2tlblVSTCIsInRva2VuSURKU09OIiwiZXhwaXJlcyIsImV4cCIsInN0cmluZ2lmeSIsImlkcEJ1bmRsZSIsImRvbWFpbiIsInJldHVyblZhbHVlIiwiZXJyIiwiTm9kZWpzUHJveHlTdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsIl90aGlzIiwibWVzc2FnZUJ1cyIsImFkZExpc3RlbmVyIiwibXNnIiwidG8iLCJyZXF1ZXN0VG9JZHAiLCJfc2VuZFN0YXR1cyIsInBhcmFtcyIsImJvZHkiLCJ1c2VybmFtZUhpbnQiLCJyZXBseU1lc3NhZ2UiLCJpZCIsImZyb20iLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsIl9zdGF0ZSIsImRlc2MiLCJpbnN0YW5jZSIsInN1YiIsImdpdmVuX25hbWUiLCJmYW1pbHlfbmFtZSIsInBpY3R1cmUiLCJlbWFpbF92ZXJpZmllZCIsImxvY2FsZSIsImF1ZCIsImF0X2hhc2giLCJpc3MiLCJpYXQiLCJhbGciLCJraWQiLCJtZXNzYWdlSW5mbyIsInVzZXJQcm9maWxlIiwidXNlcm5hbWUiLCJjbiIsImF2YXRhciIsInVzZXJVUkwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQTBYd0JBLFE7Ozs7QUExWHhCLElBQUlDLGFBQWEsRUFBakI7QUFDQSxJQUFJQyxZQUFZLENBQWhCO0FBQ0E7QUFDQTtBQUNBLElB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QyxtQkFBWSxPQUpGO0FBS1ZDLGVBQVEsOEZBTEU7QUFNVmxELGFBQU0sMkJBTkk7QUFPVm1ELHNCQUFlLElBUEw7QUFRVkMsY0FBTyxJQVJHLEVBTEw7QUFjTG5DLGlCQUFZLEVBQUMsT0FBTSwwRUFBUDtBQUNab0MsV0FBSSwwRUFEUTtBQUVaTixXQUFJLHVCQUZRO0FBR1ovQyxhQUFNLDJCQUhNO0FBSVptRCxzQkFBZSxNQUpIO0FBS1pHLGVBQVEsd0JBTEk7QUFNWnJELGFBQU0sKy9CQU5NO0FBT1pzRCxXQUFJLDZCQVBRO0FBUVpDLFdBQUksWUFSUTtBQVNackMsV0FBSSxZQVRRO0FBVVpzQyxXQUFJLE9BVlE7QUFXWkMsV0FBSSwwQ0FYUSxFQWRQO0FBMEJMeEMsYUFBUSxZQTFCSDtBQTJCTGxCLFdBQU0sMkJBM0JELEVBTEw7QUFpQ0FTLGFBQVUsRUFBQ3NDLEtBQUksdUJBQUw7QUFDVjlHLFVBQUssWUFESztBQUVWK0csZ0JBQVcsTUFGRDtBQUdWQyxpQkFBWSxPQUhGO0FBSVZDLGFBQVEsOEZBSkU7QUFLVmxELFdBQU0sMkJBTEk7QUFNVm1ELG9CQUFlLElBTkw7QUFPVkMsWUFBTyxJQVBHLEVBakNWO0FBeUNBckQsWUFBUyw2Q0F6Q1Q7QUEwQ0E0RCxlQUFZLEVBQUNDLGFBQVksRUFBQ0MsVUFBUywyQkFBVjtBQUN6QkMsVUFBRyxpQkFEc0I7QUFFekJDLGNBQU8sOEZBRmtCO0FBR3pCWCxjQUFPLElBSGtCO0FBSXpCWSxlQUFRLDZDQUppQixFQUFiO0FBS1o1RSxTQUFJLFlBTFE7QUFNWkUsZUFBVSxrNkpBTkU7QUFPWjRCLGFBQVEsWUFQSTtBQVFaOzs7OztBQWxEQSxDQURBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaWRlbnRpdGllcyA9IHt9O1xyXG5sZXQgbklkZW50aXR5ID0gMDtcclxuLy9pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XHJcbi8vbGV0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XHJcbmNvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcclxubGV0IGJ0b2EgPSByZXF1aXJlKCdidG9hJyk7XHJcbmxldCBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xyXG5cclxubGV0IGdvb2dsZUluZm8gPSB7XHJcbiAgY2xpZW50U2VjcmV0OiAgICAgICAgICAnWHg0ckt1Y2I1WllUYVhsY1pYOUhMZlpXJyxcclxuICBjbGllbnRJRDogICAgICAgICAgICAgICc4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nLFxyXG4gIHJlZGlyZWN0VVJJOiAgICAgICAgICAgJ2h0dHBzOi8vbG9jYWxob3N0JyxcclxuICBpc3N1ZXI6ICAgICAgICAgICAgICAgICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20nLFxyXG4gIHRva2VuRW5kcG9pbnQ6ICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8nLFxyXG4gIGp3a3NVcmk6ICAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My9jZXJ0cz8nLFxyXG4gIGF1dGhvcmlzYXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoPycsXHJcbiAgdXNlcmluZm86ICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nLFxyXG4gIHRva2VuSW5mbzogICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbmluZm8/aWRfdG9rZW49JyxcclxuICBhY2Nlc3NUeXBlOiAgICAgICAgICAgICdvZmZsaW5lJyxcclxuICB0eXBlOiAgICAgICAgICAgICAgICAgICdjb2RlJyxcclxuICBzY29wZTogICAgICAgICAgICAgICAgICdvcGVuaWQlMjBlbWFpbCUyMHByb2ZpbGUnLFxyXG4gIHN0YXRlOiAgICAgICAgICAgICAgICAgJ3N0YXRlJ1xyXG59O1xyXG5cclxuLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzXHJcbmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHtcclxuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXFxcXScpO1xyXG4gIGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJztcclxuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4Uyk7XHJcbiAgbGV0IHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XHJcbiAgaWYgKHJlc3VsdHMgPT09IG51bGwpXHJcbiAgcmV0dXJuICcnO1xyXG4gIGVsc2VcclxuICByZXR1cm4gcmVzdWx0c1sxXTtcclxufVxyXG5cclxuXHJcbi8vbGV0IFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjb2RlPScgKyBjb2RlICsgJyZjbGllbnRfaWQ9JyArXHJcbiAgLy8gICAgICAgIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWRpcmVjdF91cmk9JyArXHJcbiAgLy8gICAgICAgIGkucmVkaXJlY3RVUkkgKyAnJmdyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlJztcclxuXHJcbmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG4gIC8vcmV0dXJuIG1ha2VMb2NhbFJlcXVlc3QobWV0aG9kLCB1cmwsIHVuZGVmaW5lZCk7XHJcbiAgICBjb25zb2xlLmxvZygnc2VuZEhUVFBSZXF1ZXN0OnVybCcsIHVybCk7XHJcbiAgICBsZXQgc3BsaXRlZFRleHQgPSB1cmwuc3BsaXQoJy8nKTtcclxuICAgIGxldCBob3N0ID0gc3BsaXRlZFRleHRbMl07XHJcbiAgICBsZXQgcmVwbGFjZWRVUkwgPSB1cmwucmVwbGFjZShzcGxpdGVkVGV4dFswXSArICcvLycgKyBzcGxpdGVkVGV4dFsyXSwgJycpO1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgaG9zdG5hbWU6IGhvc3QsXHJcbiAgICAgIHBvcnQ6IDQ0MyxcclxuICAgICAgcGF0aDogcmVwbGFjZWRVUkwsXHJcbiAgICAgIG1ldGhvZDogbWV0aG9kXHJcbiAgICB9O1xyXG4gICAgY29uc29sZS5sb2coJ3NlbmRIVFRQUmVxdWVzdDpvcHRpb25zJywgb3B0aW9ucyk7XHJcblxyXG4gICAgY29uc3QgcmVxID0gaHR0cHMucmVxdWVzdChvcHRpb25zLCAocmVzKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdzZW5kSFRUUFJlcXVlc3Q6c3RhdHVzQ29kZTonLCByZXMuc3RhdHVzQ29kZSk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdzZW5kSFRUUFJlcXVlc3Q6aGVhZGVyczonLCByZXMuaGVhZGVycyk7XHJcbiAgICAgIGxldCBzdHJlYW0gPSAnJztcclxuICAgICAgcmVzLm9uKCdkYXRhJywgKGQpID0+IHtcclxuICAgICAgICBzdHJlYW0gKz0gZDtcclxuICAgICAgfSk7XHJcbiAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdzZW5kSFRUUFJlcXVlc3Q6ZGF0YTonLCBzdHJlYW0pO1xyXG4gICAgICAgIHJlc29sdmUoc3RyZWFtKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXEub24oJ2Vycm9yJywgKGUpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignaHR0cHNfcmV0dXJuOiAnICsgZSk7XHJcbiAgICB9KTtcclxuICAgIHJlcS5lbmQoKTtcclxuXHJcbiAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4qIEByZXR1cm5zIHt2YXJpYWJsZTxzdHJpbmc+fVxyXG4qKi9cclxuZnVuY3Rpb24gbWFwUHJvdG9jb2wodXJsKSB7XHJcbiAgbGV0IHByb3RvY29sbWFwID0ge1xyXG4gICAgJ2xvY2FsaG9zdDovLyc6ICdodHRwczovLycsXHJcbiAgICAndW5kZWZpbmVkOi8vJzogJ2h0dHBzOi8vJyxcclxuICAgICdoeXBlcnR5LWNhdGFsb2d1ZTovLyc6ICdodHRwczovLycsXHJcbiAgICAnaHR0cHM6Ly8nOiAnaHR0cHM6Ly8nLFxyXG4gICAgJ2h0dHA6Ly8nOiAnaHR0cHM6Ly8nXHJcbiAgfTtcclxuXHJcbiAgbGV0IGZvdW5kUHJvdG9jb2wgPSBmYWxzZTtcclxuICBsZXQgcmVzdWx0VVJMID0gdW5kZWZpbmVkO1xyXG4gIGZvciAobGV0IHByb3RvY29sIGluIHByb3RvY29sbWFwKSB7XHJcbiAgICBpZiAodXJsLnNsaWNlKDAsIHByb3RvY29sLmxlbmd0aCkgPT09IHByb3RvY29sKSB7XHJcbiAgICAgIHJlc3VsdFVSTCA9IHByb3RvY29sbWFwW3Byb3RvY29sXSArIHVybC5zbGljZShwcm90b2NvbC5sZW5ndGgsIHVybC5sZW5ndGgpO1xyXG4gICAgICBmb3VuZFByb3RvY29sID0gdHJ1ZTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpZiAoIWZvdW5kUHJvdG9jb2wpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwcm90b2NvbCBvZiB1cmw6ICcgKyB1cmwpO1xyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0VVJMO1xyXG59XHJcblxyXG5cclxuXHJcbmxldCBnZXRBdXRoID0gKGZ1bmN0aW9uKGNvbnRlbnRzKSB7XHJcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICBsZXQgVVJMID0gaS5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgKyAnc2NvcGU9JyArIGkuc2NvcGUgKyAnJmNsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZyZXNwb25zZV90eXBlPScgKyBpLnR5cGUgKyAnJnN0YXRlPScgKyBpLnN0YXRlICsgJyZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlICsgJyZub25jZT0nICsgY29udGVudHMgKyAnJnByb21wdD1ub25lJyA7XHJcblxyXG4gICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgVVJMKS50aGVuKGZ1bmN0aW9uKGluZm8pIHtcclxuICAgICAgcmVzb2x2ZShpbmZvKTtcclxuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdFUlJPUjonLCBlcnJvcik7XHJcbiAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICB9KTtcclxuICB9KTtcclxuXHJcbn0pXHJcblxyXG4vKipcclxuKiBGdW5jdGlvbiB0byBleGNoYW5nZSB0aGUgY29kZSByZWNlaXZlZCB0byB0aGUgaWQgVG9rZW4sIGFjY2VzcyB0b2tlbiBhbmQgYSByZWZyZXNoIHRva2VuXHJcbipcclxuKi9cclxubGV0IGV4Y2hhbmdlQ29kZSA9IChmdW5jdGlvbihjb2RlKSB7XHJcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgbGV0IFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjb2RlPScgKyBjb2RlICsgJyZjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWRpcmVjdF91cmk9JyArIGkucmVkaXJlY3RVUkkgKyAnJmdyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlJztcclxuXHJcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24oaW5mbykge1xyXG4gICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZXhjaGFuZ2VDb2RlOmluZm9dJywgaW5mbyk7XHJcbiAgICAgIHJlc29sdmUoaW5mbyk7XHJcbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZXhjaGFuZ2VDb2RlOmVycl0nLCBlcnJvci5tZXNzYWdlKTtcclxuICAgICAgLy9yZWplY3QoZXJyb3IpO1xyXG4gICAgfSk7XHJcblxyXG4gIH0pO1xyXG59KTtcclxuXHJcbi8qKlxyXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5XHJcbiovXHJcblxyXG5sZXQgaWRwID0ge1xyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxyXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBpZGVudGl0eSBhc3NlcnRpb24gdmFsaWRhdGlvbiByZXN1bHRcclxuICAqL1xyXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZUFzc2VydGlvblByb3h5Tk9ERUpTJywgYXNzZXJ0aW9uKTtcclxuXHJcbiAgICAvL1RPRE8gY2hlY2sgdGhlIHZhbHVlcyB3aXRoIHRoZSBoYXNoIHJlY2VpdmVkXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcclxuXHJcbiAgICAgIC8vIGF0b2IgbWF5IG5lZWQgdG8gYmUgcmVxdWlyZWQgZm9yIG5vZGVqc1xyXG4gICAgICAvLyB2YXIgYXRvYiA9IHJlcXVpcmUoJ2F0b2InKTtcclxuICAgICAgbGV0IGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pO1xyXG4gICAgICBjb25zb2xlLmxvZygndmFsaWRhdGVBc3NlcnRpb25Qcm94eU5PREVKUzpkZWNvZGVkQ29udGVudCcsIGRlY29kZWRDb250ZW50KTtcclxuXHJcbiAgICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZUFzc2VydGlvblByb3h5Tk9ERUpTOmNvbnRlbnQnLCBjb250ZW50KTtcclxuXHJcblxyXG4gICAgICBsZXQgaWRUb2tlblNwbGl0ZWQgPSBjb250ZW50LnRva2VuSUQuc3BsaXQoJy4nKTtcclxuXHJcblxyXG4gICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xyXG5cclxuXHJcbiAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZX0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXHJcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb25cclxuICAqXHJcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxyXG4gICovXHJcbiAgZ2VuZXJhdGVBc3NlcnRpb246IChjb250ZW50cywgb3JpZ2luLCBoaW50KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xyXG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xyXG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uOmhpbnRdJywgaGludCk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuXHJcblxyXG4gICAgICAvL3RoZSBoaW50IGZpZWxkIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBvYnRhaW5lZCBhZnRlciB0aGUgdXNlciBhdXRoZW50aWNhdGlvblxyXG4gICAgICAvLyBpZiB0aGUgaGludCBjb250ZW50IGlzIG5vdCBwcmVzZW50LCB0aGVuIHJlamVjdHMgdGhlIHZhbHVlIHdpdGggdGhlIFVSTCB0byBvcGVuIHRoZSBwYWdlIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlclxyXG4gICAgICBsZXQgaSA9IGdvb2dsZUluZm87XHJcblxyXG4gICAgICBpZiAoIWhpbnQpIHtcclxuICAgICAgICAgIHJlc29sdmUoJ2hpbnQnKTtcclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ2dlbmVyYXRlTWVzc2FnZVJlc3BvbnNlOicpO1xyXG4gICAgICAgIHJldHVybiByZXNvbHZlKGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgLy8gdGhlIHJlcXVlc3QgaGF2ZSBhbHJlYWR5IGJlZW4gbWFkZSwgc28gaWRwUFJveHkgd2lsbCBleGNoYW5nZSB0aGUgdG9rZW5zIGFsb25nIHRvIHRoZSBpZHAsIHRvIG9idGFpbiB0aGUgaW5mb3JtYXRpb24gbmVjZXNzYXJ5XHJcbiAgICAgICAgbGV0IGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTtcclxuICAgICAgICBsZXQgaWRUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnaWRfdG9rZW4nKTtcclxuICAgICAgICBsZXQgY29kZSA9IHVybFBhcnNlcihoaW50LCAnY29kZScpO1xyXG5cclxuICAgICAgICBleGNoYW5nZUNvZGUoY29kZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdUSUFHTyBleGNoYW5nZSBjb2RlJyk7XHJcblxyXG4gICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXJcclxuICAgICAgICAgIGxldCBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuO1xyXG4gICAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaW5mb1Rva2VuKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnVElBR08gaW5mbyB0b2tlbiB1cmwnKTtcclxuICAgICAgICAgICAgbGV0IGlkZW50aXR5QnVuZGxlID0ge2FjY2Vzc1Rva2VuOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGlkVG9rZW46IHZhbHVlLmlkX3Rva2VuLCByZWZyZXNoVG9rZW46IHZhbHVlLnJlZnJlc2hfdG9rZW4sIHRva2VuVHlwZTogdmFsdWUudG9rZW5fdHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xyXG5cclxuICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuO1xyXG5cclxuICAgICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgaWRUb2tlblxyXG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24oaWRUb2tlbikge1xyXG5cclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnVElBR08gaWQgdG9rZW4gdXJsJyk7XHJcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUudG9rZW5JREpTT04gPSBpZFRva2VuO1xyXG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmV4cGlyZXMgPSBpZFRva2VuLmV4cDtcclxuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5lbWFpbCA9IGlkVG9rZW4uZW1haWw7XHJcblxyXG4gICAgICAgICAgICAgIGxldCBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHt0b2tlbklEOiB2YWx1ZS5pZF90b2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XHJcbiAgICAgICAgICAgICAgbGV0IGlkcEJ1bmRsZSA9IHtkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJ307XHJcblxyXG4gICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxyXG4gICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XHJcblxyXG4gICAgICAgICAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xyXG4gICAgICAgICAgICAgICsrbklkZW50aXR5O1xyXG5cclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246cmV0dXJuVmFsdWVdJywgcmV0dXJuVmFsdWUpO1xyXG4gICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVmFsdWUpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihlKSB7XHJcblxyXG4gICAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xyXG5cclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uOmV4Y2hhbmdlQ29kZV0nLCBlcnIpO1xyXG4gICAgICAgICAgLy9yZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG59XHJcblxyXG4vKipcclxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViXHJcbiovXHJcbmNsYXNzIE5vZGVqc1Byb3h5U3R1YiB7XHJcblxyXG4gIC8qKlxyXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcclxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIHJlY2VpdmVkIGlkcFByb3h5XHJcbiAgKlxyXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXHJcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxyXG4gICovXHJcbiBjb25zdHJ1Y3RvcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xyXG4gICBjb25zb2xlLmxvZygnR29vZ2xlLT5OT0RFSlMgY29uc3RydWN0b3InKTtcclxuXHJcbiAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xyXG4gICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xyXG4gICBfdGhpcy5jb25maWcgPSBjb25maWc7XHJcblxyXG4gICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7XHJcblxyXG4gICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcclxuICAgICBpZiAobXNnLnRvID09PSAnZG9tYWluLWlkcDovL2dvb2dsZS5jb20nKSB7XHJcblxyXG4gICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xyXG4gICAgIH1cclxuICAgfSk7XHJcbiAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XHJcbiB9XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSB7bWVzc2FnZX0gIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2VCdXNcclxuICAqL1xyXG4gIHJlcXVlc3RUb0lkcChtc2cpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xyXG5cclxuICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XHJcbiAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcclxuICAgICAgICBpZHAuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKFxyXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXHJcblxyXG4gICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO31cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICd2YWxpZGF0ZUFzc2VydGlvbic6XHJcbiAgICAgICAgaWRwLnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXHJcbiAgKlxyXG4gICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXHJcbiAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcclxuICAqL1xyXG4gIHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBtZXNzYWdlID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxyXG4gICAgICAgICAgICAgICAgICAgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX07XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tHb29nbGVJZHBQcm94eS5zZW5kU3RhdHVzXSAnLCB2YWx1ZSk7XHJcblxyXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3VwZGF0ZScsXHJcbiAgICAgIGZyb206IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsXHJcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxyXG4gICAgICBib2R5OiB7XHJcbiAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHJlYXNvbikge1xyXG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xyXG4gICAgfVxyXG5cclxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cclxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXHJcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ05vZGVqc1Byb3h5U3R1YicsXHJcbiAgICBpbnN0YW5jZTogbmV3IE5vZGVqc1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxyXG4gIH07XHJcbn1cclxuXHJcblxyXG5cclxubGV0IGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlID1cclxue2Fzc2VydGlvbjpcclxuJ2V5SjBiMnRsYmtsRUlqb2laWGxLYUdKSFkybFBhVXBUVlhwSk1VNXBTWE5KYlhSd1drTkpOa2xxVVROT01sRjRUbnByTTAxdFVYbFpWRUYzVFZSQk0wNUhVVEZQUkZwcFRsUm5ORTlVWXpKYVJFbDZUa1JKTlU1cVozZE5WMVZwWmxFdVpYbEthR1Z1UVdsUGFVazBUVVJuZWsxcWF6Rk9hbGwzVFZSSmRHUklSbmxQU0VaMllVUkZlRTFVYXpCTmJXUnJUVzEwYmsxRVFUTmtSRUo2VDBkWmVVNTZaSGxpTW10MVdWaENkMk41Tlc1aU1qbHVZa2RXTVdNeVZubFpNamwxWkVkV2RXUkROV3BpTWpCcFRFTkthR1JYVVdsUGFVazBUVVJuZWsxcWF6Rk9hbGwzVFZSSmRHUklSbmxQU0VaMllVUkZlRTFVYXpCTmJXUnJUVzEwYmsxRVFUTmtSRUo2VDBkWmVVNTZaSGxpTW10MVdWaENkMk41Tlc1aU1qbHVZa2RXTVdNeVZubFpNamwxWkVkV2RXUkROV3BpTWpCcFRFTktlbVJYU1dsUGFVbDRUVVJOZUU1VVVUQlBWRVV6VFZSRmVVNTZWWGhOYWxsNlRrUkphVXhEU214aVYwWndZa05KTmtsdVVteGpNMUpvWW0xU01HRkhiSFZoZWsxNVRWVkNibUpYUm5CaVF6VnFZakl3YVV4RFNteGlWMFp3WWtZNU1scFlTbkJhYld4c1drTkpObVJJU2pGYVUzZHBXVmhTWm1GSFJucGhRMGsyU1drd00yUnRSVEpOTVZaMlpGZFdSVTFyZURaVE1XTjZVbXc0TWs5R1JXbE1RMHAxWWpJMWFscFRTVFpKYkhNd1QwTjNlRTE2UVhOTlUzZDZUa04zTUU5RGQzaE5lWGN5VEVScmMwNUVTWE5OVkUwd1RFUmplVXhFUlhwT1EzZDVUa1JqYzAxVVRYTk5VM2Q0VEVSRmMwNVRkM2RNUkUxelRWUk5kMHhFUlhOTlZGVnpUVU4zTUU5RGQzaE5la0Z6VFZOM2VFMURkM2xNUkVWNlRVTjNlRXhFUlhOTlEzZDVUV3BuYzA1RVRYTk5WRUY0VEVSRmVVeEVSWGxOVTNjelRFUkZNVTU1ZHpOTlUzYzBUVk4zTVU5RGQzbE5WR3R6VFhwSmMwMVVRWE5OVkVFMFRFUkZOVTE1ZDNoT2VtdHpUV3BGZVV4RVJYaE9hWGQ1VGxSVmMwNVVhM05OYWtVelRFUk5lVXhFUlRKTlUzZDVUVVJGYzA1VVRYTk5WR040VEVSSmVVNXBkM2hQVkd0elRWUk5NMHhFU1hkTmFYZDRUbnBGYzA1cVFYTlBSRWx6VGxSTmMwMVVTVEZNUkZsNVRFUkZNMDU1ZDNoTmFsbHpUVlJaTVV4RVNUQk1SRVV3VFZOM2VrMURkM2hPVTNkNVRXcFpjMDVVYTNOTlZFRXpURVJOTUV4RVkzTk5WRTF6VFZSUk5VeEVSWGhOYVhkNFRXcFZjMDFVUVhOTmFrMTNURVJGTlUxVGQzaE9WRmx6VFZSWk1FeEVSVE5PZVhkNFRVTjNlRTlFVlhOTlZFMXpUbXBaYzAxNWQzbE5WR056VFZSWk1reEVTVEJPUTNjMVRVTjNlRTFVYTNOTlZFVjRURVJKTTB4RVJUQk9VM2Q0VFVSUmMwNTZSWE5OVkdjMVRFUkZNazVwZDNsTmFsbHpUV3BWTVV4RVJYcE5lWGMwVFhsM2VFNVVSWE5OYWsxNFRFUkZkMDFUZDNoT1ZFVnpUMFJyYzAxcVNYTk5WR3R6VG1wVmMwMVVWVEJNUkVWM1RFUlZla3hFU1hkUFEzZDVUVlJuYzAxcVZYbE1SRWw0VDFOM2VrNTVkekZOUTNkNVRWUkpjMDlFV1hOTlZGRXhURVJGZDA1NWQzaE5la2x6VDFSQmMwMXFUWHBNUkVsM1RXbDNlVTFxWTNOTlZFRTBURVJGZUU1RGQzaE9SRVZ6VFdwcmMwNTZUWE5OVkdjelRFUk5lRXhFUlhwTVJFbDZUa04zZDB4RVNYcE5hWGQ1VGtOM2VFOVVSWE5OZWxWelRWUlJOVXhFUlROUFUzZDRUWHBuYzAxcVJUQk1SRVV4VDFOM2VVNUVWWE5OVkZsNVRFUkZNRTlEZDNsTmFrVnpUVlJGTkV4RVJUTk1SRVYzVGxOM05FOVRkM2hPVkVWelRWUlJNa3hFU1hkUFUzY3hUbE4zZVUxNldYTk9ha1Z6VFZSUmVreEVTWHBOZVhkNVRXcG5jMDFVUVhOTlZFVXhURVJuYzA5RVJYTk5WR3N6VEVSUk1VeEVSWGxOZVhkNFQwUmpjMDFxU1hwTVJFVXpUbWwzZVU1VVVYTk5WRmt4VEVSWk5VeEVSVEJOZVhkNVQxTjNlRTFFUVhOTlZFVXdURVJGTTB4RVJYcE5RM2Q1VFdwWmMwMXFTWHBNUkUxNlRFUkZlRXhFU1RCTlEzYzBUVk4zTWsxVGQzaE9la2x6VFZScmVFeEVSVEZPZVhkNVRrUlpjMDFxUVhsTVJHY3pURVJGZWsxVGQzbE5ha1Z6VDBSbmMwNUVaM05OVkVrelRFUkZNVTlUZDNoTlZHdHpUVlJaZDB4RVJURk5hWGQ0VFZSamMwNXFSWE5OYWxWNlRFUkZNMDVEZHpKT1UzZDVUVlJSYzAxcVFYcE1SRWw0VDBOM01rMTVkekZOUTNjelQwTjNlRTVxUVhOTlZHZDRURVJKZVUxVGQzbE5WRVZ6VFZSSk5FeEVZM2RNUkVVelQwTjNlRTlVUlhOTlZHTjNURVJCYzAxVVRYTk5WRWw1VEVSRk0wMTVkM2hOYVhkNVRVUk5jMDFxVlhsTVJGRnpUVlJuTUV4RVNYbE9VM2Q1VGxSSmMwNTVkekpOYVhjMVRtbDNlRTFVV1hOTlZGVnpUV3BGTWt4RVJURlBRM2N4VGxOM05FNVRkekJQUTNkNFRtbDNOVXhFU1hkT2FYZDRUVlJyYzA1NlVYTk5WRVY1VEVSSk1FMTVkM2hOZWxselQwUlJjMDFVWnpCTVJFbDVUWGwzZVU1VVVYTk5WRUY0VEVScmVFeEVXWGhNUkVWM1RFUnJlRXhFWnpGTVJFVTFUV2wzZUU1RVkzTk5WRkV3VEVSVk0weEVTVFZNUkZreVRFUkplazlEZDNoUFZHdHpUV3BSTUV4RVJUVk5lWGQ0VDFSUmMwMVVWWGRNUkVsNlRXbDNlVTFFUVhOTlZFRXpURVJKYzAxNWQzaE1SRUZ6VFZZd2FVeERTbkJqTTAxcFQybEtiMlJJVW5kamVtOTJUREpHYWxreU9URmlibEo2VEcxa2RtSXlaSE5hVXpWcVlqSXdhVXhEU25CWldGRnBUMnBGTVUxVVNUSk9SRmwzVDBSQmMwbHRWalJqUTBrMlRWUlZlRTFxV1RCUFZGazBUVWd3TG5SbFNURnRPVEJXY2tGRlowdDBkak5RU1VjM1NqWnpRV2hrWDFGWk4yMXBNMUZ6VjB4WlltRnJWMHB4VERabU5HZHRSbmxrWkVWM2NVdDRSMWswZURkelRVeDBhaTFWWXpCYVMzVlhXRjl4UlRkTE5tbDNhbWhOYkhwaVZFaExPRXhsYUhsSlRFOURXVGRZYzNWdllUWk5jV1pVTVZkd09FSm5NRlJtU2toMVQyNWlXbDk1YlhoUVRWRkxUMnRtV21sUVZsTTFhWEZ6VHpOaWJtVlJlbFJ5TUVwaWNYUlJOM2hYYzBwVE5tNTZMV2xCTm5KRlpFdHFaa00zTUdGdFZ6QnBVMGt0TFd4WGJWZzNjMXBoVkdWYVl6ZDFaelJ5TkZvMUxYcE1Sak01ZW5kUlVFOTNSVkZCYkZRdFdrRmZlVEZuVDE4MFZuVmxSR1ZhYlZkdFZuVjZNbXRLVDE4NU1XZzJjVVUxYmxwUGRIZFhWblZEY21SM0xUbEpZWGMzZWpKRVVHVnpYMm8xVWtRNGJFUnZkbEkyU2swd1pHb3lTbkY2VERsV2NGUmpiVVl5TjBGS2MyTXhhbWhSVEhOTVYySnNZM2hhZHlJc0luUnZhMlZ1U1VSS1UwOU9JanA3SW1GNmNDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW1GMVpDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW5OMVlpSTZJakV3TXpFMU5EUTVNVGN4TVRJM05URXlOak0wTWlJc0ltVnRZV2xzSWpvaWRHVnpkR0Z1WkhSb2FXNXJNekl4UUdkdFlXbHNMbU52YlNJc0ltVnRZV2xzWDNabGNtbG1hV1ZrSWpvaWRISjFaU0lzSW1GMFgyaGhjMmdpT2lJdE4zWmhOak5WYjNWbFJESk1la3RYTTBaZk5qaFJJaXdpYm05dVkyVWlPaUpiTkRnc01UTXdMREVzTXpRc05EZ3NNVE1zTml3NUxEUXlMREV6TkN3M01pd3hNelFzTWpRM0xERXpMREVzTVN3eExEVXNNQ3d6TERFek1Dd3hMREUxTERBc05EZ3NNVE13TERFc01UQXNNaXd4TXpBc01Td3hMREFzTWpJNExEUXpMREV3TVN3eE1pd3hNakVzTnl3eE5UY3NOekVzT0RFc05UZ3NNakU1TERNeUxERXdMREV3T0N3eE9UTXNNVGM1TERJeE1pd3hNVFlzTWpVMUxEVTVMREl4Tnl3ek1pd3hOakVzTWpBeExEVXpMREUzTVN3eU1qWXNNVGs1TERFek55d3lNRElzTVRjeExEWXdMRGd5TERVekxERXlOU3cyTWl3eE56Y3NNVEkyTERFMk5Td3lOQ3d4TkRFc016QXNNVFVzTWpJMkxEVTVMREV3Tnl3ek5DdzNMREV6TERFME9Td3hNVElzTVRJMUxERXdMREl6TUN3eE9URXNNVFUyTERFMk5Dd3hOemNzTVRBc01UZzFMREV6TERZMkxETXNNakUzTERFMk5pd3lORFFzT1RBc01URTVMREV4TVN3eU55d3hORFVzTVRBMExEY3hMREU0T1N3eE5qWXNNakkyTERJMU5Td3hNek1zT0RNc01UVXhMREl6TVN3eE1ERXNNVFV4TERnNUxESXlMREU1TERZMUxERTFOQ3d4TUN3MU15d3lNRGdzTWpFNExESTFNaXd5TVRrc016Y3NOVEFzTWpFeUxEZzJMREUwTlN3eE1EY3NNVE15TERrd0xESXpNeXd5TURJc01qSTNMREV3T0N3eE1UUXNNVFF4TERJNUxEY3pMREU0Tnl3ek1Td3hNeXd5TXpRc01Dd3lNeklzTWpRc01Ua3hMRE0xTERFME9Td3hOemtzTVRNNExESXhOQ3d4TlRrc01qUTFMREUyTWl3eE5EZ3NNakl4TERFeE9Dd3hOeXd4TURVc09Ea3NNVFV4TERFME5pd3lNRGtzTlRVc01qTTJMRFl4TERFME15d3lNek1zTWpJNExERXdMREV4TlN3NExEZ3hMREU1Tnl3ME5Td3hNak1zTVRnM0xESXlNeXd4TnpZc01qVTBMREUyTlN3Mk9Td3hORE1zTWprc01UQXdMREV4TkN3eE55d3hNekFzTWpJMkxESXlNeXd6TXl3eE1Td3lOREFzT0RFc05qRXNNVGN5TERFNU1Td3hOVGNzTWpRMkxESXdNaXc0Tnl3eE16RXNNakl4TERnNExEUTRMREV5Tnl3eE5Ua3NNVEU1TERFMk1Dd3hOVElzTVRFM0xEWXhMREkxTXl3eE56UXNOalVzTWpFMExESXdNeXd5TVRnc05qTXNOVEFzTnpnc01UWXdMREU0TVN3eU1qRXNNakV4TERFeU9DdzNNQ3d4Tnpnc01Ua3hMREUzTUN3d0xERXpMREV5TWl3eE56TXNNVElzTWpBekxESTFNaXcwTERFNE5Dd3lNalVzTWpVeUxEY3NOaklzT1RZc01URTJMREUxTERJeE5pd3hOVGdzTlRVc09EVXNORGdzTVRZc09Td3lNRFlzTVRFNUxEYzBMREV4TWl3eU5ETXNNVE0yTERnMExERTROQ3d5TWpNc01qVTBMREV3TVN3NU1TdzJNU3d4TUN3NU1TdzROU3d4T1RJc01UUTNMREUwTkN3MU55d3lPU3cyTml3eU16Z3NNVGs1TERJME5Dd3hPVE1zTVRrMExERTFNQ3d5TXpJc01qQXdMREV3Tnl3eUxETXNNU3d3TERGZElpd2lhWE56SWpvaWFIUjBjSE02THk5aFkyTnZkVzUwY3k1bmIyOW5iR1V1WTI5dElpd2lhV0YwSWpvaU1UVXhNalkwTmpBNE1DSXNJbVY0Y0NJNklqRTFNVEkyTkRrMk9EQWlMQ0poYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpRM04yUXhOemszTW1ReVlUQXdNVEEzTkdRMU9EWmlOVGc0T1RjMlpESXpOREk1Tmpnd01XVWlmWDA9JyxcclxuaWRwOntcclxuZG9tYWluOidub2RlanMtaWRwJyxcclxucHJvdG9jb2w6J09JREMnfSxcclxuaW5mbzp7XHJcbmFjY2Vzc1Rva2VuOid5YTI5Lkdsc2JCYWxHSkptVmlfTjVJRHlxTUkzSnhrTzVlTFY0MzMzSTkzZVFCQ3BOQW9mRXF0VTRVa1dIaDhkclZsclZpVlRxdDZKazNQODZfQ0R0NHNLVmgwRzlBYlRrMXJWVzNNQXhjRmhFVUZFLUtNWGRES19Lc01mNmZOUWsnLFxyXG5pZFRva2VuOidleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpRM04yUXhOemszTW1ReVlUQXdNVEEzTkdRMU9EWmlOVGc0T1RjMlpESXpOREk1Tmpnd01XVWlmUS5leUpoZW5BaU9pSTRNRGd6TWprMU5qWXdNVEl0ZEhGeU9IRnZhREV4TVRrME1tZGtNbXRuTURBM2REQnpPR1l5TnpkeWIya3VZWEJ3Y3k1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMGlMQ0poZFdRaU9pSTRNRGd6TWprMU5qWXdNVEl0ZEhGeU9IRnZhREV4TVRrME1tZGtNbXRuTURBM2REQnpPR1l5TnpkeWIya3VZWEJ3Y3k1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMGlMQ0p6ZFdJaU9pSXhNRE14TlRRME9URTNNVEV5TnpVeE1qWXpORElpTENKbGJXRnBiQ0k2SW5SbGMzUmhibVIwYUdsdWF6TXlNVUJuYldGcGJDNWpiMjBpTENKbGJXRnBiRjkyWlhKcFptbGxaQ0k2ZEhKMVpTd2lZWFJmYUdGemFDSTZJaTAzZG1FMk0xVnZkV1ZFTWt4NlMxY3pSbDgyT0ZFaUxDSnViMjVqWlNJNklsczBPQ3d4TXpBc01Td3pOQ3cwT0N3eE15dzJMRGtzTkRJc01UTTBMRGN5TERFek5Dd3lORGNzTVRNc01Td3hMREVzTlN3d0xETXNNVE13TERFc01UVXNNQ3cwT0N3eE16QXNNU3d4TUN3eUxERXpNQ3d4TERFc01Dd3lNamdzTkRNc01UQXhMREV5TERFeU1TdzNMREUxTnl3M01TdzRNU3cxT0N3eU1Ua3NNeklzTVRBc01UQTRMREU1TXl3eE56a3NNakV5TERFeE5pd3lOVFVzTlRrc01qRTNMRE15TERFMk1Td3lNREVzTlRNc01UY3hMREl5Tml3eE9Ua3NNVE0zTERJd01pd3hOekVzTmpBc09ESXNOVE1zTVRJMUxEWXlMREUzTnl3eE1qWXNNVFkxTERJMExERTBNU3d6TUN3eE5Td3lNallzTlRrc01UQTNMRE0wTERjc01UTXNNVFE1TERFeE1pd3hNalVzTVRBc01qTXdMREU1TVN3eE5UWXNNVFkwTERFM055d3hNQ3d4T0RVc01UTXNOallzTXl3eU1UY3NNVFkyTERJME5DdzVNQ3d4TVRrc01URXhMREkzTERFME5Td3hNRFFzTnpFc01UZzVMREUyTml3eU1qWXNNalUxTERFek15dzRNeXd4TlRFc01qTXhMREV3TVN3eE5URXNPRGtzTWpJc01Ua3NOalVzTVRVMExERXdMRFV6TERJd09Dd3lNVGdzTWpVeUxESXhPU3d6Tnl3MU1Dd3lNVElzT0RZc01UUTFMREV3Tnl3eE16SXNPVEFzTWpNekxESXdNaXd5TWpjc01UQTRMREV4TkN3eE5ERXNNamtzTnpNc01UZzNMRE14TERFekxESXpOQ3d3TERJek1pd3lOQ3d4T1RFc016VXNNVFE1TERFM09Td3hNemdzTWpFMExERTFPU3d5TkRVc01UWXlMREUwT0N3eU1qRXNNVEU0TERFM0xERXdOU3c0T1N3eE5URXNNVFEyTERJd09TdzFOU3d5TXpZc05qRXNNVFF6TERJek15d3lNamdzTVRBc01URTFMRGdzT0RFc01UazNMRFExTERFeU15d3hPRGNzTWpJekxERTNOaXd5TlRRc01UWTFMRFk1TERFME15d3lPU3d4TURBc01URTBMREUzTERFek1Dd3lNallzTWpJekxETXpMREV4TERJME1DdzRNU3cyTVN3eE56SXNNVGt4TERFMU55d3lORFlzTWpBeUxEZzNMREV6TVN3eU1qRXNPRGdzTkRnc01USTNMREUxT1N3eE1Ua3NNVFl3TERFMU1pd3hNVGNzTmpFc01qVXpMREUzTkN3Mk5Td3lNVFFzTWpBekxESXhPQ3cyTXl3MU1DdzNPQ3d4TmpBc01UZ3hMREl5TVN3eU1URXNNVEk0TERjd0xERTNPQ3d4T1RFc01UY3dMREFzTVRNc01USXlMREUzTXl3eE1pd3lNRE1zTWpVeUxEUXNNVGcwTERJeU5Td3lOVElzTnl3Mk1pdzVOaXd4TVRZc01UVXNNakUyTERFMU9DdzFOU3c0TlN3ME9Dd3hOaXc1TERJd05pd3hNVGtzTnpRc01URXlMREkwTXl3eE16WXNPRFFzTVRnMExESXlNeXd5TlRRc01UQXhMRGt4TERZeExERXdMRGt4TERnMUxERTVNaXd4TkRjc01UUTBMRFUzTERJNUxEWTJMREl6T0N3eE9Ua3NNalEwTERFNU15d3hPVFFzTVRVd0xESXpNaXd5TURBc01UQTNMRElzTXl3eExEQXNNVjBpTENKcGMzTWlPaUpvZEhSd2N6b3ZMMkZqWTI5MWJuUnpMbWR2YjJkc1pTNWpiMjBpTENKcFlYUWlPakUxTVRJMk5EWXdPREFzSW1WNGNDSTZNVFV4TWpZME9UWTRNSDAudGVJMW05MFZyQUVnS3R2M1BJRzdKNnNBaGRfUVk3bWkzUXNXTFliYWtXSnFMNmY0Z21GeWRkRXdxS3hHWTR4N3NNTHRqLVVjMFpLdVdYX3FFN0s2aXdqaE1semJUSEs4TGVoeUlMT0NZN1hzdW9hNk1xZlQxV3A4QmcwVGZKSHVPbmJaX3lteFBNUUtPa2ZaaVBWUzVpcXNPM2JuZVF6VHIwSmJxdFE3eFdzSlM2bnotaUE2ckVkS2pmQzcwYW1XMGlTSS0tbFdtWDdzWmFUZVpjN3VnNHI0WjUtekxGMzl6d1FQT3dFUUFsVC1aQV95MWdPXzRWdWVEZVptV21WdXoya0pPXzkxaDZxRTVuWk90d1dWdUNyZHctOUlhdzd6MkRQZXNfajVSRDhsRG92UjZKTTBkajJKcXpMOVZwVGNtRjI3QUpzYzFqaFFMc0xXYmxjeFp3JyxcclxucmVmcmVzaFRva2VuOicxLzZjQ0dFV3l6eDJ1TzJiSDJGMUE4djZLRFRHNHJQMENYYy1YVVExMi1VMG8nLFxyXG50b2tlblR5cGU6J0JlYXJlcicsXHJcbmluZm9Ub2tlbjp7XHJcbnN1YjonMTAzMTU0NDkxNzExMjc1MTI2MzQyJyxcclxubmFtZTondGVzdCB0aGluaycsXHJcbmdpdmVuX25hbWU6J3Rlc3QnLFxyXG5mYW1pbHlfbmFtZTondGhpbmsnLFxyXG5waWN0dXJlOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZycsXHJcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcclxuZW1haWxfdmVyaWZpZWQ6dHJ1ZSxcclxubG9jYWxlOidlbid9LFxyXG50b2tlbklESlNPTjp7J2F6cCc6JzgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbScsXHJcbmF1ZDonODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcclxuc3ViOicxMDMxNTQ0OTE3MTEyNzUxMjYzNDInLFxyXG5lbWFpbDondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXHJcbmVtYWlsX3ZlcmlmaWVkOid0cnVlJyxcclxuYXRfaGFzaDonLTd2YTYzVW91ZUQyTHpLVzNGXzY4UScsXHJcbm5vbmNlOidbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdJyxcclxuaXNzOidodHRwczovL2FjY291bnRzLm5vZGVqcy1pZHAnLFxyXG5pYXQ6JzE1MTI2NDYwODAnLFxyXG5leHA6JzE1MTI2NDk2ODAnLFxyXG5hbGc6J1JTMjU2Jyxcclxua2lkOic0NzdkMTc5NzJkMmEwMDEwNzRkNTg2YjU4ODk3NmQyMzQyOTY4MDFlJ30sXHJcbmV4cGlyZXM6JzE1MTI2NDk2ODAnLFxyXG5lbWFpbDondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSd9LFxyXG5pbmZvVG9rZW46e3N1YjonMTAzMTU0NDkxNzExMjc1MTI2MzQyJyxcclxubmFtZTondGVzdCB0aGluaycsXHJcbmdpdmVuX25hbWU6J3Rlc3QnLFxyXG5mYW1pbHlfbmFtZTondGhpbmsnLFxyXG5waWN0dXJlOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZycsXHJcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcclxuZW1haWxfdmVyaWZpZWQ6dHJ1ZSxcclxubG9jYWxlOidlbid9LFxyXG5pZGVudGl0eTondXNlcjovL25vZGVqcy1pZHAvdGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXHJcbm1lc3NhZ2VJbmZvOnt1c2VyUHJvZmlsZTp7dXNlcm5hbWU6J3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxyXG5jbjondGVzdGFuZHRoaW5rMzIxJyxcclxuYXZhdGFyOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZycsXHJcbmxvY2FsZTonZW4nLFxyXG51c2VyVVJMOid1c2VyOi8vbm9kZWpzLWlkcC90ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJ30sXHJcbmlkcDonbm9kZWpzLWlkcCcsXHJcbmFzc2VydGlvbjonZXlKMGIydGxia2xFSWpvaVpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHFVVE5PTWxGNFRucHJNMDF0VVhsWlZFRjNUVlJCTTA1SFVURlBSRnBwVGxSbk5FOVVZekphUkVsNlRrUkpOVTVxWjNkTlYxVnBabEV1WlhsS2FHVnVRV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2FHUlhVV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2VtUlhTV2xQYVVsNFRVUk5lRTVVVVRCUFZFVXpUVlJGZVU1NlZYaE5hbGw2VGtSSmFVeERTbXhpVjBad1lrTkpOa2x1VW14ak0xSm9ZbTFTTUdGSGJIVmhlazE1VFZWQ2JtSlhSbkJpUXpWcVlqSXdhVXhEU214aVYwWndZa1k1TWxwWVNuQmFiV3hzV2tOSk5tUklTakZhVTNkcFdWaFNabUZIUm5waFEwazJTV2t3TTJSdFJUSk5NVloyWkZkV1JVMXJlRFpUTVdONlVtdzRNazlHUldsTVEwcDFZakkxYWxwVFNUWkpiSE13VDBOM2VFMTZRWE5OVTNkNlRrTjNNRTlEZDNoTmVYY3lURVJyYzA1RVNYTk5WRTB3VEVSamVVeEVSWHBPUTNkNVRrUmpjMDFVVFhOTlUzZDRURVJGYzA1VGQzZE1SRTF6VFZSTmQweEVSWE5OVkZWelRVTjNNRTlEZDNoTmVrRnpUVk4zZUUxRGQzbE1SRVY2VFVOM2VFeEVSWE5OUTNkNVRXcG5jMDVFVFhOTlZFRjRURVJGZVV4RVJYbE5VM2N6VEVSRk1VNTVkek5OVTNjMFRWTjNNVTlEZDNsTlZHdHpUWHBKYzAxVVFYTk5WRUUwVEVSRk5VMTVkM2hPZW10elRXcEZlVXhFUlhoT2FYZDVUbFJWYzA1VWEzTk5ha1V6VEVSTmVVeEVSVEpOVTNkNVRVUkZjMDVVVFhOTlZHTjRURVJKZVU1cGQzaFBWR3R6VFZSTk0weEVTWGROYVhkNFRucEZjMDVxUVhOUFJFbHpUbFJOYzAxVVNURk1SRmw1VEVSRk0wNTVkM2hOYWxselRWUlpNVXhFU1RCTVJFVXdUVk4zZWsxRGQzaE9VM2Q1VFdwWmMwNVVhM05OVkVFelRFUk5NRXhFWTNOTlZFMXpUVlJSTlV4RVJYaE5hWGQ0VFdwVmMwMVVRWE5OYWsxM1RFUkZOVTFUZDNoT1ZGbHpUVlJaTUV4RVJUTk9lWGQ0VFVOM2VFOUVWWE5OVkUxelRtcFpjMDE1ZDNsTlZHTnpUVlJaTWt4RVNUQk9RM2MxVFVOM2VFMVVhM05OVkVWNFRFUkpNMHhFUlRCT1UzZDRUVVJSYzA1NlJYTk5WR2MxVEVSRk1rNXBkM2xOYWxselRXcFZNVXhFUlhwTmVYYzBUWGwzZUU1VVJYTk5hazE0VEVSRmQwMVRkM2hPVkVWelQwUnJjMDFxU1hOTlZHdHpUbXBWYzAxVVZUQk1SRVYzVEVSVmVreEVTWGRQUTNkNVRWUm5jMDFxVlhsTVJFbDRUMU4zZWs1NWR6Rk5RM2Q1VFZSSmMwOUVXWE5OVkZFeFRFUkZkMDU1ZDNoTmVrbHpUMVJCYzAxcVRYcE1SRWwzVFdsM2VVMXFZM05OVkVFMFRFUkZlRTVEZDNoT1JFVnpUV3ByYzA1NlRYTk5WR2N6VEVSTmVFeEVSWHBNUkVsNlRrTjNkMHhFU1hwTmFYZDVUa04zZUU5VVJYTk5lbFZ6VFZSUk5VeEVSVE5QVTNkNFRYcG5jMDFxUlRCTVJFVXhUMU4zZVU1RVZYTk5WRmw1VEVSRk1FOURkM2xOYWtWelRWUkZORXhFUlROTVJFVjNUbE4zTkU5VGQzaE9WRVZ6VFZSUk1reEVTWGRQVTNjeFRsTjNlVTE2V1hOT2FrVnpUVlJSZWt4RVNYcE5lWGQ1VFdwbmMwMVVRWE5OVkVVeFRFUm5jMDlFUlhOTlZHc3pURVJSTVV4RVJYbE5lWGQ0VDBSamMwMXFTWHBNUkVVelRtbDNlVTVVVVhOTlZGa3hURVJaTlV4RVJUQk5lWGQ1VDFOM2VFMUVRWE5OVkVVd1RFUkZNMHhFUlhwTlEzZDVUV3BaYzAxcVNYcE1SRTE2VEVSRmVFeEVTVEJOUTNjMFRWTjNNazFUZDNoT2VrbHpUVlJyZUV4RVJURk9lWGQ1VGtSWmMwMXFRWGxNUkdjelRFUkZlazFUZDNsTmFrVnpUMFJuYzA1RVozTk5WRWt6VEVSRk1VOVRkM2hOVkd0elRWUlpkMHhFUlRGTmFYZDRUVlJqYzA1cVJYTk5hbFY2VEVSRk0wNURkekpPVTNkNVRWUlJjMDFxUVhwTVJFbDRUME4zTWsxNWR6Rk5RM2N6VDBOM2VFNXFRWE5OVkdkNFRFUkplVTFUZDNsTlZFVnpUVlJKTkV4RVkzZE1SRVV6VDBOM2VFOVVSWE5OVkdOM1RFUkJjMDFVVFhOTlZFbDVURVJGTTAxNWQzaE5hWGQ1VFVSTmMwMXFWWGxNUkZGelRWUm5NRXhFU1hsT1UzZDVUbFJKYzA1NWR6Sk5hWGMxVG1sM2VFMVVXWE5OVkZWelRXcEZNa3hFUlRGUFEzY3hUbE4zTkU1VGR6QlBRM2Q0VG1sM05VeEVTWGRPYVhkNFRWUnJjMDU2VVhOTlZFVjVURVJKTUUxNWQzaE5lbGx6VDBSUmMwMVVaekJNUkVsNVRYbDNlVTVVVVhOTlZFRjRURVJyZUV4RVdYaE1SRVYzVEVScmVFeEVaekZNUkVVMVRXbDNlRTVFWTNOTlZGRXdURVJWTTB4RVNUVk1SRmt5VEVSSmVrOURkM2hQVkd0elRXcFJNRXhFUlRWTmVYZDRUMVJSYzAxVVZYZE1SRWw2VFdsM2VVMUVRWE5OVkVFelRFUkpjMDE1ZDNoTVJFRnpUVll3YVV4RFNuQmpNMDFwVDJsS2IyUklVbmRqZW05MlRESkdhbGt5T1RGaWJsSjZURzFrZG1JeVpITmFVelZxWWpJd2FVeERTbkJaV0ZGcFQycEZNVTFVU1RKT1JGbDNUMFJCYzBsdFZqUmpRMGsyVFZSVmVFMXFXVEJQVkZrMFRVZ3dMblJsU1RGdE9UQldja0ZGWjB0MGRqTlFTVWMzU2paelFXaGtYMUZaTjIxcE0xRnpWMHhaWW1GclYwcHhURFptTkdkdFJubGtaRVYzY1V0NFIxazBlRGR6VFV4MGFpMVZZekJhUzNWWFdGOXhSVGRMTm1sM2FtaE5iSHBpVkVoTE9FeGxhSGxKVEU5RFdUZFljM1Z2WVRaTmNXWlVNVmR3T0VKbk1GUm1Ta2gxVDI1aVdsOTViWGhRVFZGTFQydG1XbWxRVmxNMWFYRnpUek5pYm1WUmVsUnlNRXBpY1hSUk4zaFhjMHBUTm01NkxXbEJObkpGWkV0cVprTTNNR0Z0VnpCcFUwa3RMV3hYYlZnM2MxcGhWR1ZhWXpkMVp6UnlORm8xTFhwTVJqTTVlbmRSVUU5M1JWRkJiRlF0V2tGZmVURm5UMTgwVm5WbFJHVmFiVmR0Vm5WNk1tdEtUMTg1TVdnMmNVVTFibHBQZEhkWFZuVkRjbVIzTFRsSllYYzNlakpFVUdWelgybzFVa1E0YkVSdmRsSTJTazB3WkdveVNuRjZURGxXY0ZSamJVWXlOMEZLYzJNeGFtaFJUSE5NVjJKc1kzaGFkeUlzSW5SdmEyVnVTVVJLVTA5T0lqcDdJbUY2Y0NJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbUYxWkNJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbk4xWWlJNklqRXdNekUxTkRRNU1UY3hNVEkzTlRFeU5qTTBNaUlzSW1WdFlXbHNJam9pZEdWemRHRnVaSFJvYVc1ck16SXhRR2R0WVdsc0xtTnZiU0lzSW1WdFlXbHNYM1psY21sbWFXVmtJam9pZEhKMVpTSXNJbUYwWDJoaGMyZ2lPaUl0TjNaaE5qTlZiM1ZsUkRKTWVrdFhNMFpmTmpoUklpd2libTl1WTJVaU9pSmJORGdzTVRNd0xERXNNelFzTkRnc01UTXNOaXc1TERReUxERXpOQ3czTWl3eE16UXNNalEzTERFekxERXNNU3d4TERVc01Dd3pMREV6TUN3eExERTFMREFzTkRnc01UTXdMREVzTVRBc01pd3hNekFzTVN3eExEQXNNakk0TERRekxERXdNU3d4TWl3eE1qRXNOeXd4TlRjc056RXNPREVzTlRnc01qRTVMRE15TERFd0xERXdPQ3d4T1RNc01UYzVMREl4TWl3eE1UWXNNalUxTERVNUxESXhOeXd6TWl3eE5qRXNNakF4TERVekxERTNNU3d5TWpZc01UazVMREV6Tnl3eU1ESXNNVGN4TERZd0xEZ3lMRFV6TERFeU5TdzJNaXd4Tnpjc01USTJMREUyTlN3eU5Dd3hOREVzTXpBc01UVXNNakkyTERVNUxERXdOeXd6TkN3M0xERXpMREUwT1N3eE1USXNNVEkxTERFd0xESXpNQ3d4T1RFc01UVTJMREUyTkN3eE56Y3NNVEFzTVRnMUxERXpMRFkyTERNc01qRTNMREUyTml3eU5EUXNPVEFzTVRFNUxERXhNU3d5Tnl3eE5EVXNNVEEwTERjeExERTRPU3d4TmpZc01qSTJMREkxTlN3eE16TXNPRE1zTVRVeExESXpNU3d4TURFc01UVXhMRGc1TERJeUxERTVMRFkxTERFMU5Dd3hNQ3cxTXl3eU1EZ3NNakU0TERJMU1pd3lNVGtzTXpjc05UQXNNakV5TERnMkxERTBOU3d4TURjc01UTXlMRGt3TERJek15d3lNRElzTWpJM0xERXdPQ3d4TVRRc01UUXhMREk1TERjekxERTROeXd6TVN3eE15d3lNelFzTUN3eU16SXNNalFzTVRreExETTFMREUwT1N3eE56a3NNVE00TERJeE5Dd3hOVGtzTWpRMUxERTJNaXd4TkRnc01qSXhMREV4T0N3eE55d3hNRFVzT0Rrc01UVXhMREUwTml3eU1Ea3NOVFVzTWpNMkxEWXhMREUwTXl3eU16TXNNakk0TERFd0xERXhOU3c0TERneExERTVOeXcwTlN3eE1qTXNNVGczTERJeU15d3hOellzTWpVMExERTJOU3cyT1N3eE5ETXNNamtzTVRBd0xERXhOQ3d4Tnl3eE16QXNNakkyTERJeU15d3pNeXd4TVN3eU5EQXNPREVzTmpFc01UY3lMREU1TVN3eE5UY3NNalEyTERJd01pdzROeXd4TXpFc01qSXhMRGc0TERRNExERXlOeXd4TlRrc01URTVMREUyTUN3eE5USXNNVEUzTERZeExESTFNeXd4TnpRc05qVXNNakUwTERJd015d3lNVGdzTmpNc05UQXNOemdzTVRZd0xERTRNU3d5TWpFc01qRXhMREV5T0N3M01Dd3hOemdzTVRreExERTNNQ3d3TERFekxERXlNaXd4TnpNc01USXNNakF6TERJMU1pdzBMREU0TkN3eU1qVXNNalV5TERjc05qSXNPVFlzTVRFMkxERTFMREl4Tml3eE5UZ3NOVFVzT0RVc05EZ3NNVFlzT1N3eU1EWXNNVEU1TERjMExERXhNaXd5TkRNc01UTTJMRGcwTERFNE5Dd3lNak1zTWpVMExERXdNU3c1TVN3Mk1Td3hNQ3c1TVN3NE5Td3hPVElzTVRRM0xERTBOQ3cxTnl3eU9TdzJOaXd5TXpnc01UazVMREkwTkN3eE9UTXNNVGswTERFMU1Dd3lNeklzTWpBd0xERXdOeXd5TERNc01Td3dMREZkSWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam9pTVRVeE1qWTBOakE0TUNJc0ltVjRjQ0k2SWpFMU1USTJORGsyT0RBaUxDSmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalEzTjJReE56azNNbVF5WVRBd01UQTNOR1ExT0RaaU5UZzRPVGMyWkRJek5ESTVOamd3TVdVaWZYMD0nLFxyXG5leHBpcmVzOicxNTEyNjQ5NjgwJ30sXHJcbi8qXHJcbmtleVBhaXI6e1xyXG5wdWJsaWM6WzQ4LDEzMCwxLDM0LDQ4LDEzLDYsOSw0MiwxMzQsNzIsMTM0LDI0NywxMywxLDEsMSw1LDAsMywxMzAsMSwxNSwwLDQ4LDEzMCwxLDEwLDIsMTMwLDEsMSwwLDIyOCw0MywxMDEsMTIsMTIxLDcsMTU3LDcxLDgxLDU4LDIxOSwzMiwxMCwxMDgsMTkzLDE3OSwyMTIsMTE2LDI1NSw1OSwyMTcsMzIsMTYxLDIwMSw1MywxNzEsMjI2LDE5OSwxMzcsMjAyLDE3MSw2MCw4Miw1MywxMjUsNjIsMTc3LDEyNiwxNjUsMjQsMTQxLDMwLDE1LDIyNiw1OSwxMDcsMzQsNywxMywxNDksMTEyLDEyNSwxMCwyMzAsMTkxLDE1NiwxNjQsMTc3LDEwLDE4NSwxMyw2NiwzLDIxNywxNjYsMjQ0LDkwLDExOSwxMTEsMjcsMTQ1LDEwNCw3MSwxODksMTY2LDIyNiwyNTUsMTMzLDgzLDE1MSwyMzEsMTAxLDE1MSw4OSwyMiwxOSw2NSwxNTQsMTAsNTMsMjA4LDIxOCwyNTIsMjE5LDM3LDUwLDIxMiw4NiwxNDUsMTA3LDEzMiw5MCwyMzMsMjAyLDIyNywxMDgsMTE0LDE0MSwyOSw3MywxODcsMzEsMTMsMjM0LDAsMjMyLDI0LDE5MSwzNSwxNDksMTc5LDEzOCwyMTQsMTU5LDI0NSwxNjIsMTQ4LDIyMSwxMTgsMTcsMTA1LDg5LDE1MSwxNDYsMjA5LDU1LDIzNiw2MSwxNDMsMjMzLDIyOCwxMCwxMTUsOCw4MSwxOTcsNDUsMTIzLDE4NywyMjMsMTc2LDI1NCwxNjUsNjksMTQzLDI5LDEwMCwxMTQsMTcsMTMwLDIyNiwyMjMsMzMsMTEsMjQwLDgxLDYxLDE3MiwxOTEsMTU3LDI0NiwyMDIsODcsMTMxLDIyMSw4OCw0OCwxMjcsMTU5LDExOSwxNjAsMTUyLDExNyw2MSwyNTMsMTc0LDY1LDIxNCwyMDMsMjE4LDYzLDUwLDc4LDE2MCwxODEsMjIxLDIxMSwxMjgsNzAsMTc4LDE5MSwxNzAsMCwxMywxMjIsMTczLDEyLDIwMywyNTIsNCwxODQsMjI1LDI1Miw3LDYyLDk2LDExNiwxNSwyMTYsMTU4LDU1LDg1LDQ4LDE2LDksMjA2LDExOSw3NCwxMTIsMjQzLDEzNiw4NCwxODQsMjIzLDI1NCwxMDEsOTEsNjEsMTAsOTEsODUsMTkyLDE0NywxNDQsNTcsMjksNjYsMjM4LDE5OSwyNDQsMTkzLDE5NCwxNTAsMjMyLDIwMCwxMDcsMiwzLDEsMCwxXSxcclxucHJpdmF0ZTpbNDgsMTMwLDQsMTkxLDIsMSwwLDQ4LDEzLDYsOSw0MiwxMzQsNzIsMTM0LDI0NywxMywxLDEsMSw1LDAsNCwxMzAsNCwxNjksNDgsMTMwLDQsMTY1LDIsMSwwLDIsMTMwLDEsMSwwLDIyOCw0MywxMDEsMTIsMTIxLDcsMTU3LDcxLDgxLDU4LDIxOSwzMiwxMCwxMDgsMTkzLDE3OSwyMTIsMTE2LDI1NSw1OSwyMTcsMzIsMTYxLDIwMSw1MywxNzEsMjI2LDE5OSwxMzcsMjAyLDE3MSw2MCw4Miw1MywxMjUsNjIsMTc3LDEyNiwxNjUsMjQsMTQxLDMwLDE1LDIyNiw1OSwxMDcsMzQsNywxMywxNDksMTEyLDEyNSwxMCwyMzAsMTkxLDE1NiwxNjQsMTc3LDEwLDE4NSwxMyw2NiwzLDIxNywxNjYsMjQ0LDkwLDExOSwxMTEsMjcsMTQ1LDEwNCw3MSwxODksMTY2LDIyNiwyNTUsMTMzLDgzLDE1MSwyMzEsMTAxLDE1MSw4OSwyMiwxOSw2NSwxNTQsMTAsNTMsMjA4LDIxOCwyNTIsMjE5LDM3LDUwLDIxMiw4NiwxNDUsMTA3LDEzMiw5MCwyMzMsMjAyLDIyNywxMDgsMTE0LDE0MSwyOSw3MywxODcsMzEsMTMsMjM0LDAsMjMyLDI0LDE5MSwzNSwxNDksMTc5LDEzOCwyMTQsMTU5LDI0NSwxNjIsMTQ4LDIyMSwxMTgsMTcsMTA1LDg5LDE1MSwxNDYsMjA5LDU1LDIzNiw2MSwxNDMsMjMzLDIyOCwxMCwxMTUsOCw4MSwxOTcsNDUsMTIzLDE4NywyMjMsMTc2LDI1NCwxNjUsNjksMTQzLDI5LDEwMCwxMTQsMTcsMTMwLDIyNiwyMjMsMzMsMTEsMjQwLDgxLDYxLDE3MiwxOTEsMTU3LDI0NiwyMDIsODcsMTMxLDIyMSw4OCw0OCwxMjcsMTU5LDExOSwxNjAsMTUyLDExNyw2MSwyNTMsMTc0LDY1LDIxNCwyMDMsMjE4LDYzLDUwLDc4LDE2MCwxODEsMjIxLDIxMSwxMjgsNzAsMTc4LDE5MSwxNzAsMCwxMywxMjIsMTczLDEyLDIwMywyNTIsNCwxODQsMjI1LDI1Miw3LDYyLDk2LDExNiwxNSwyMTYsMTU4LDU1LDg1LDQ4LDE2LDksMjA2LDExOSw3NCwxMTIsMjQzLDEzNiw4NCwxODQsMjIzLDI1NCwxMDEsOTEsNjEsMTAsOTEsODUsMTkyLDE0NywxNDQsNTcsMjksNjYsMjM4LDE5OSwyNDQsMTkzLDE5NCwxNTAsMjMyLDIwMCwxMDcsMiwzLDEsMCwxLDIsMTMwLDEsMCwxMDMsMjQ0LDEzNywxMTgsMTE2LDgyLDE0LDIwMywxMDIsMTA3LDI1Myw4OCwxMiwxOTksMjIyLDYwLDI0MywxMzYsODYsMTU3LDc0LDIyNCwxOTAsNTMsMTEzLDU3LDE1NywyNTAsNDksMTMwLDk2LDMxLDI1MiwxMzYsMTUyLDcwLDE0MywxNywyMTUsOTYsMTAzLDUxLDE4LDM1LDE0MSwyMTIsMjEwLDIwNSw5LDIxNiw4Myw3MCwyNDUsNzEsMTM4LDExOSwxMTIsMjI5LDE2NCwxNzYsOSwzNyw4MSwxNjEsMTkzLDE1NCw2OCwyNDksMTE1LDEwNiwyMDEsNiwxMiwyMjUsMTQ0LDEyNiwxNDEsMjEwLDE0MSwyNDIsMTI4LDE1OSwyMjEsMTYzLDIyMiwyMSwyMzMsMjMwLDE2NywyMDYsNTksMjQsMjUwLDIzMyw4MSwxMjIsMTAyLDI2LDYsMjMzLDcyLDEzMyw0Nyw3NywxNTUsMjM4LDg2LDYsMTM5LDI0LDEzMSwxNjMsMTc5LDExMiw0OCwyNDcsMTQyLDYsMjA3LDIwNCwxNzMsMjIzLDE0MCwxOTksMTUwLDk1LDEyMywxNTIsMjAyLDE1NSwxMzEsMjM4LDYyLDk2LDEzMyw0LDIxNyw1MSwxMjEsMzAsMzgsMTc4LDE4OSwyMTYsNDQsMzUsMjQxLDkzLDcsNjIsOTAsMTExLDIxNiw2NiwyMDksMjQzLDEyOCwyMzQsMTQxLDg0LDEzNSwxODEsMTMsMzgsMjIwLDExNCwyNDUsMjQwLDE3OCw5NSwyMjAsMjA2LDExLDE4NiwyMzQsMjEzLDY2LDEyMSw4Myw2OCw4OSw3NSw0NiwxODMsMTQ1LDE4MywxNDcsMTYwLDIxNSwxMTgsMTk4LDEyNSwxODEsMTQ2LDMwLDI1MSw1OCw4Nyw0NywyMDksMjM3LDk3LDI0LDQ3LDE3OSw2LDExMCwyNDIsOTksMTUwLDIyNiwxNDgsMTk4LDE3NCwxNDYsMTAxLDIxMyw4NywxNzgsMTAsMjIzLDEwNSwxOCw1Niw1MywyMiwyMTIsMTU4LDE3MCwxNzYsNTEsODYsMTQ1LDEyNSwxMjQsNDQsOSw4NSwxOSwxNDQsMjQ2LDE3MCw3OCwxMjQsMzAsMzIsMTIsMTY2LDE3NCwxMzksNzcsNjMsMTczLDgyLDEwLDE1MywyLDEyOSwxMjksMCwyNDgsMTgsMTQzLDI0NiwxMzcsMTM2LDE0NSwyMTksMTc4LDM5LDI3LDk0LDY0LDkwLDQ3LDE2MywxMTQsNjAsNjMsMTg3LDEzMSwxNDMsMjQ0LDE2LDQyLDEyOCwyMzEsMTE3LDkyLDk4LDIxOSwxNTUsNjIsMTA3LDI1MiwxNywyNDUsNDUsMTYwLDIyNSwxMDMsMTQyLDcyLDM2LDE5MywxNTAsMjM1LDIxNCwxNzUsNjIsMjEyLDU2LDQ1LDksMCw2MCwxMTQsMTA3LDEzNCwyMjgsMjA0LDEzMSwxMzEsMjE0LDk0LDIwMSwxNDgsMTU5LDk5LDEzOSwxODEsMTMsMTE5LDM4LDMwLDEwNywxNjYsMTY1LDIwMyw0MywzNCwyMCwyMDcsMTcxLDMyLDU4LDE2Nyw2MiwxOTYsMTUzLDEwMywyMDQsMjEzLDI0Nyw0OCwxMTEsMjI3LDU5LDk1LDk3LDE5NCwxODcsNTMsMTAsMjQ3LDEwOCw1OCw4NiwyOCwyOSwxMTMsOCwxMTAsMTcxLDIyMCwyNDUsMTEsODIsMjMzLDIyMyw5MSw2OCwxNjYsMTE3LDE3NCwxODcsNjIsNzcsMiwxMjksMTI5LDAsMjM1LDExOCwyLDEwNSwyMzksMjEyLDMwLDEwNCwxNTcsNDEsMTA5LDExLDI0OCwxNTIsMjIsMjM2LDk3LDQwLDE1MywxMzEsMjI4LDUsODYsMTg3LDExMywxMjYsMTQ0LDc2LDE0MSw3OSwxMTAsMjUwLDE0NiwxNTIsNDksNTgsMTU2LDIwMSwxNzYsOTIsMTg5LDIwOSwzMCwxMTIsMTA4LDE3NSwyMDQsMjA0LDI0NywxNjQsNDYsMTI5LDIzOSw5OCwxMjcsNDksMTQ1LDIxOCw2MywxOTMsMTI0LDE3NCwxOCw5OCwyMDEsOTksMTU0LDE2MiwxMzgsNzgsMTU5LDI1MywzLDI0OCwzLDIwOSwzNiwyMzksMTkzLDE1NSwxOTMsNSwxOSwyMzYsMzcsNzgsMTE4LDEzNSwyNTAsMTk5LDcsMTQxLDI0OCwxMjAsMzYsMTM2LDkzLDk4LDE3NCw2MCwxOCwyMTUsOTMsMTc0LDEwNywxNDEsMTE2LDE0NSwxNjcsMjIxLDIxMCwxNjksMjQ3LDY3LDI1NCwyMjIsMTYxLDEzNCw2MywyMjEsOTAsODcsNDIsOTksMjI3LDgxLDE3MywxNTEsMiwxMjksMTI5LDAsMTMzLDIzLDE2OCwxMDMsODMsMjMyLDE0NiwxNjAsMTgxLDIzLDQwLDM4LDIwNCwxMywyMTQsMjAzLDQ5LDQxLDE5NSwyMjcsMTg5LDE4MSw4LDI0MywxMTksMTA2LDc1LDY3LDI1MCwyNTAsMTAsMjM0LDk4LDExOCwyNiwyNTAsMzUsMTIxLDEzMiwxMjQsMTAsNzYsMjYsMTk4LDE2NSwxNTQsMTA4LDE5LDExNyw4OCwyMywxNywxOTIsMTQzLDE4NCwxNzcsMTgxLDE0MSwxNTcsNCwxODUsMjQ4LDE5Myw3NywyMDQsMjQzLDcsMTcwLDI0MCw0LDExMSwxMTMsMTgzLDAsMjcsMTM2LDIwLDE5LDE0OSw3NCwzMywyNDEsMjE4LDEwOCwyMzYsODAsMTcxLDE0OCwxNiwxMTYsOTcsMTA5LDgzLDc0LDg4LDE0NSw5NCwyMzksMTAyLDE5MiwxOSwxMTQsMjA3LDUsMTI4LDUxLDExMSwxNjQsMjM3LDg2LDE1NCw5OSw1MiwxOTcsNjIsNTcsMTgyLDYsMTUyLDI0NSw2MSwxMzcsNTgsMTA1LDE1OSwyLDg0LDEwOSwyLDEyOSwxMjksMCwyMjYsNjcsMTExLDEzMiw5NSw5MSwxMDEsMTc3LDYzLDE4OSw0NCw1MywxOTMsMTg0LDkyLDIzMCwyMjMsOTgsMTMzLDc0LDIwOSw4Niw1Miw3LDY1LDE5NSwyMDYsMTAwLDgxLDE3OCwxNDQsNjUsMTY3LDE1MSw0Miw3OSw4OSwxNDksMTgsMTczLDE4OCwyMSwyNDQsMjUxLDQ5LDIzMCw0MSwxNTAsMTUzLDQ2LDM1LDM4LDIzMSw5OSwxNzQsNTYsMTE1LDMyLDIxNSwyNTMsODUsMTQ3LDEwOCwxOTcsMTQ3LDM0LDIzNiwyMTYsMjIyLDE3Nyw1Nyw5MCwxMzYsMTE0LDIwNyw0OCw0NiwzMSw5MCwyMjAsMTgsNTgsMTQzLDIzOSwxMTEsMjE0LDI3LDk1LDYsMzYsNTMsMjI5LDYyLDEwOCw0NSwzOSwxLDMwLDQ3LDE3OCw1NiwxNjQsMjA2LDU2LDQyLDIwOCw0NiwxOTMsNjEsMzEsMTQ3LDQ1LDE0NywyMywxODcsMjIsNTAsMjU1LDExMSwyMjksMTMyLDE5OSwxNTIsNzUsMTQyLDEzNiwyMDksMTUxLDIsMTI5LDEyOSwwLDE2NSw1NiwyMzIsNzYsNTUsNTcsMjQwLDE1OSw5MiwyMDcsMjIwLDE0MywxMzAsMzAsNTcsMjM0LDI1MSwxNzIsMTcxLDE4MCw1NCwxNTksMjI5LDk2LDI0Niw3MywxMTIsMTQ2LDc1LDE1NywyNDIsMjAxLDE2MSwyMTgsMzcsMTc2LDM1LDE3MCw1MCw5MCwxNDgsMTAyLDE5MSwxOTksMjM5LDE3NCw3OCw3Miw2Nyw4NSwxOTksNDUsMTQ5LDE0NSwxMzIsMTYxLDIxMiwzMywxNTcsNzUsMjE2LDc5LDM5LDIzMywxOCwyMTAsMjU1LDI2LDcyLDIyOSwyMzksNDQsMTIsMTQ3LDE1OCwxNzYsMTkyLDk1LDEyNiwzMiwxNzUsMjMsMjI2LDEzMSwxMzksMTk3LDE3NSwxOTMsNjIsOCwxNTEsMjUyLDY4LDE1NCw5NCw4OSwxODksMTI1LDkwLDMwLDM2LDE3NSw3MywyMzAsMTk0LDEzLDIzMywyNDcsMTIzLDYwLDI0MSw0NywxNzEsNTEsMTg5LDExMiwxMTEsMjEzLDE0MSw4OSw3MCwyNDksMjM2LDYzLDIzNiwxMTAsMTE1LDIwOF1cclxufSovXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL05vZGVqc1Byb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = require(\"https\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwc1wiPzEwZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImh0dHBzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiaHR0cHNcIlxuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("(function () {\n  \"use strict\";\n\n  function btoa(str) {\n    var buffer;\n\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = Buffer.from(str.toString(), 'binary');\n    }\n\n    return buffer.toString('base64');\n  }\n\n  module.exports = btoa;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9ub2RlX21vZHVsZXMvYnRvYS9pbmRleC5qcz9mZWMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGZ1bmN0aW9uIGJ0b2Eoc3RyKSB7XG4gICAgdmFyIGJ1ZmZlcjtcblxuICAgIGlmIChzdHIgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgIGJ1ZmZlciA9IHN0cjtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyID0gQnVmZmVyLmZyb20oc3RyLnRvU3RyaW5nKCksICdiaW5hcnknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuXG4gIG1vZHVsZS5leHBvcnRzID0gYnRvYTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL25vZGVfbW9kdWxlcy9idG9hL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction atob(str) {\n  return Buffer.from(str, 'base64').toString('binary');\n}\n\nmodule.exports = atob.atob = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9ub2RlX21vZHVsZXMvYXRvYi9ub2RlLWF0b2IuanM/M2JiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBhdG9iKHN0cikge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGF0b2IuYXRvYiA9IGF0b2I7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL25vZGVfbW9kdWxlcy9hdG9iL25vZGUtYXRvYi5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ]);
});",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "35.30",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "52c91699f84b479f34e9f7abce2255fff",
    "constraints": {
      "node": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MicrosoftProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar microsoftInfo = {\n  clientID: '000000004C18391F',\n  redirectURI: location.origin,\n  tokenEndpoint: 'https://login.live.com/oauth20_authorize.srf?',\n  type: 'token',\n  scope: 'wl.signin,wl.basic',\n  mode: 'fragment'\n};\n\n/*\nINSTRUCTIONS TO ADD ANOTHER DOMAINS TO BE AUTHORISED\n\nHow to change information (using the rethinkProject2020@outlook.com account):\nuser: rethinkProject2020@outlook.com\npass: 45%asd34!zD2&\n\nother test accounts:\nuser: openidtest10@outlook.com\npass: testOpenID10\n\n1º https://portal.azure.com/ -> example\n2º go to the left side bar -> more services -> Azure active directory\n3º open a small box on the rigth saying \"App registrations\".\n4º on right of the page -> \"rethink Project\" -> redirect URIs\n5º Add the URI to be authorised for the requests.\n\nTO ADD MORE USERS THAT ARE ALLOW TO MADE REQUEST (maybe because is a trial account, it is required  to add users to the list of the users that can make requests for the OIDC )\n\n1º https://portal.azure.com/ -> example\n2º go to the left side bar -> more services -> Azure active directory\n3º open a small box on the middle saying \"Users and groups\".\n4º on right of the page -> \"All users\" -> top button \" + add\"\n5º fill with the information and click create\n*/\n\n/**\n* Identity Provider Proxy\n*/\nvar idp = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    return new Promise(function (resolve, reject) {\n\n      var idToken = JSON.parse(atob(assertion));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\n  * Function to generate an identity Assertion\n  * TODO add details of the implementation, and improve implementation\n  *\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n\n    //start the login phase\n    //TODO later should be defined a better approach\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n        var m = microsoftInfo;\n\n        //let requestUrl = 'https://login.windows.net/common/oauth2/authorize?response_type=id_token&client_id=7e2f3589-4b38-4b1c-a321-c9251de00ef2&scope=openid&nonce=7362CAEA-9CA5-4B43-9BA3-34D7C303EBA7&response_mode=fragment&redirect_uri=' + location.origin;\n\n        var requestUrl = m.tokenEndpoint + 'response_type=' + m.type + '&client_id=' + m.clientID + '&scope=' + m.scope + '&nonce=' + contents + '&response_mode=' + m.mode + '&redirect_uri=' + m.redirectURI;\n\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n      } else {\n\n        //later verify the token and use the information from the JWT\n\n        var token = hint.split('/');\n        var tokenSplited = token[3];\n\n        var hintSplited = tokenSplited.split('.');\n\n        var idToken = JSON.parse(atob(hintSplited[1]));\n\n        var idpBundle = { domain: 'microsoft.com', protocol: 'OIDC' };\n        var identityBundle = { assertion: hintSplited[1], idp: idpBundle, infoToken: idToken };\n        resolve(identityBundle);\n      }\n    });\n  }\n};\n\n/**\n* Identity Provider Proxy Protocol Stub\n*/\n\nvar MicrosoftProxyStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function MicrosoftProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, MicrosoftProxyStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === 'domain-idp://microsoft.com') {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(MicrosoftProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return MicrosoftProxyStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'MicrosoftProxyStub',\n    instance: new MicrosoftProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L21pY3Jvc29mdC9NaWNyb3NvZnRQcm94eVN0dWIuaWRwLmpzPzZlMjciXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJtaWNyb3NvZnRJbmZvIiwiY2xpZW50SUQiLCJyZWRpcmVjdFVSSSIsImxvY2F0aW9uIiwib3JpZ2luIiwidG9rZW5FbmRwb2ludCIsInR5cGUiLCJzY29wZSIsIm1vZGUiLCJpZHAiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaWRUb2tlbiIsIkpTT04iLCJwYXJzZSIsImF0b2IiLCJpZGVudGl0eSIsImVtYWlsIiwiY29udGVudHMiLCJub25jZSIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiaGludCIsIm0iLCJyZXF1ZXN0VXJsIiwibmFtZSIsImxvZ2luVXJsIiwidG9rZW4iLCJzcGxpdCIsInRva2VuU3BsaXRlZCIsImhpbnRTcGxpdGVkIiwiaWRwQnVuZGxlIiwiZG9tYWluIiwicHJvdG9jb2wiLCJpZGVudGl0eUJ1bmRsZSIsImluZm9Ub2tlbiIsIk1pY3Jvc29mdFByb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJfdGhpcyIsIm1lc3NhZ2VCdXMiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJwYXJhbXMiLCJib2R5IiwibWV0aG9kIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInZhbHVlIiwicmVwbHlNZXNzYWdlIiwiZXJyb3IiLCJtZXNzYWdlIiwiaWQiLCJmcm9tIiwiY29kZSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiY29uc29sZSIsImxvZyIsIl9zdGF0ZSIsImRlc2MiLCJ1cmwiLCJpbnN0YW5jZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBK013QkEsUTs7OztBQS9NeEIsSUFBSUMsZ0JBQWdC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USxJQUFaOztBQUVBcUIsY0FBUUMsR0FBUixDQUFZLDhCQUFaLEVBQTRDVixLQUE1Qzs7QUFFQVosWUFBTXVCLE1BQU4sR0FBZVgsS0FBZjs7QUFFQSxVQUFJVCxNQUFNO0FBQ1J2QyxjQUFNLFFBREU7QUFFUnFELGNBQU1qQixNQUFNSCxtQkFGSjtBQUdSTyxZQUFJSixNQUFNSCxtQkFBTixHQUE0QixTQUh4QjtBQUlSVyxjQUFNO0FBQ0pJLGlCQUFPQTtBQURIO0FBSkUsT0FBVjs7QUFTQSxVQUFJUSxNQUFKLEVBQVk7QUFDVmpCLFlBQUlLLElBQUosQ0FBU2dCLElBQVQsR0FBZ0JKLE1BQWhCO0FBQ0Q7O0FBRURwQixZQUFNQyxVQUFOLENBQWlCa0IsV0FBakIsQ0FBNkJoQixHQUE3QjtBQUNEOzs7Ozs7QUFJSDs7QUFFQTs7Ozs7Ozs7O0FBT2UsU0FBUzlDLFFBQVQsQ0FBa0JvRSxHQUFsQixFQUF1QjNCLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNqRCxTQUFPO0FBQ0xkLFVBQU0sb0JBREQ7QUFFTHlDLGNBQVUsSUFBSTlCLGtCQUFKLENBQXVCNkIsR0FBdkIsRUFBNEIzQixHQUE1QixFQUFpQ0MsTUFBakM7QUFGTCxHQUFQO0FBSUQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBtaWNyb3NvZnRJbmZvID0ge1xuICBjbGllbnRJRDogICAgICAgICAgICAgICcwMDAwMDAwMDRDMTgzOTFGJyxcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICBsb2NhdGlvbi5vcmlnaW4sXG4gIHRva2VuRW5kcG9pbnQ6ICAgICAgICAgJ2h0dHBzOi8vbG9naW4ubGl2ZS5jb20vb2F1dGgyMF9hdXRob3JpemUuc3JmPycsXG4gIHR5cGU6ICAgICAgICAgICAgICAgICAgJ3Rva2VuJyxcbiAgc2NvcGU6ICAgICAgICAgICAgICAgICAnd2wuc2lnbmluLHdsLmJhc2ljJyxcbiAgbW9kZTogICAgICAgICAgICAgICAgICAnZnJhZ21lbnQnXG59O1xuXG4vKlxuSU5TVFJVQ1RJT05TIFRPIEFERCBBTk9USEVSIERPTUFJTlMgVE8gQkUgQVVUSE9SSVNFRFxuXG5Ib3cgdG8gY2hhbmdlIGluZm9ybWF0aW9uICh1c2luZyB0aGUgcmV0aGlua1Byb2plY3QyMDIwQG91dGxvb2suY29tIGFjY291bnQpOlxudXNlcjogcmV0aGlua1Byb2plY3QyMDIwQG91dGxvb2suY29tXG5wYXNzOiA0NSVhc2QzNCF6RDImXG5cbm90aGVyIHRlc3QgYWNjb3VudHM6XG51c2VyOiBvcGVuaWR0ZXN0MTBAb3V0bG9vay5jb21cbnBhc3M6IHRlc3RPcGVuSUQxMFxuXG4xwrogaHR0cHM6Ly9wb3J0YWwuYXp1cmUuY29tLyAtPiBleGFtcGxlXG4ywrogZ28gdG8gdGhlIGxlZnQgc2lkZSBiYXIgLT4gbW9yZSBzZXJ2aWNlcyAtPiBBenVyZSBhY3RpdmUgZGlyZWN0b3J5XG4zwrogb3BlbiBhIHNtYWxsIGJveCBvbiB0aGUgcmlndGggc2F5aW5nIFwiQXBwIHJlZ2lzdHJhdGlvbnNcIi5cbjTCuiBvbiByaWdodCBvZiB0aGUgcGFnZSAtPiBcInJldGhpbmsgUHJvamVjdFwiIC0+IHJlZGlyZWN0IFVSSXNcbjXCuiBBZGQgdGhlIFVSSSB0byBiZSBhdXRob3Jpc2VkIGZvciB0aGUgcmVxdWVzdHMuXG5cblRPIEFERCBNT1JFIFVTRVJTIFRIQVQgQVJFIEFMTE9XIFRPIE1BREUgUkVRVUVTVCAobWF5YmUgYmVjYXVzZSBpcyBhIHRyaWFsIGFjY291bnQsIGl0IGlzIHJlcXVpcmVkICB0byBhZGQgdXNlcnMgdG8gdGhlIGxpc3Qgb2YgdGhlIHVzZXJzIHRoYXQgY2FuIG1ha2UgcmVxdWVzdHMgZm9yIHRoZSBPSURDIClcblxuMcK6IGh0dHBzOi8vcG9ydGFsLmF6dXJlLmNvbS8gLT4gZXhhbXBsZVxuMsK6IGdvIHRvIHRoZSBsZWZ0IHNpZGUgYmFyIC0+IG1vcmUgc2VydmljZXMgLT4gQXp1cmUgYWN0aXZlIGRpcmVjdG9yeVxuM8K6IG9wZW4gYSBzbWFsbCBib3ggb24gdGhlIG1pZGRsZSBzYXlpbmcgXCJVc2VycyBhbmQgZ3JvdXBzXCIuXG40wrogb24gcmlnaHQgb2YgdGhlIHBhZ2UgLT4gXCJBbGwgdXNlcnNcIiAtPiB0b3AgYnV0dG9uIFwiICsgYWRkXCJcbjXCuiBmaWxsIHdpdGggdGhlIGluZm9ybWF0aW9uIGFuZCBjbGljayBjcmVhdGVcbiovXG5cbi8qKlxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eVxuKi9cbmxldCBpZHAgPSB7XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoYXNzZXJ0aW9uKSk7XG5cbiAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZX0pO1xuXG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcblxuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgLy9UT0RPIGxhdGVyIHNob3VsZCBiZSBkZWZpbmVkIGEgYmV0dGVyIGFwcHJvYWNoXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKCFoaW50KSB7XG4gICAgICAgIGxldCBtID0gbWljcm9zb2Z0SW5mbztcblxuICAgICAgICAvL2xldCByZXF1ZXN0VXJsID0gJ2h0dHBzOi8vbG9naW4ud2luZG93cy5uZXQvY29tbW9uL29hdXRoMi9hdXRob3JpemU/cmVzcG9uc2VfdHlwZT1pZF90b2tlbiZjbGllbnRfaWQ9N2UyZjM1ODktNGIzOC00YjFjLWEzMjEtYzkyNTFkZTAwZWYyJnNjb3BlPW9wZW5pZCZub25jZT03MzYyQ0FFQS05Q0E1LTRCNDMtOUJBMy0zNEQ3QzMwM0VCQTcmcmVzcG9uc2VfbW9kZT1mcmFnbWVudCZyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLm9yaWdpbjtcblxuICAgICAgICBsZXQgcmVxdWVzdFVybCA9IG0udG9rZW5FbmRwb2ludCArICdyZXNwb25zZV90eXBlPScgKyBtLnR5cGUgKyAnJmNsaWVudF9pZD0nICsgbS5jbGllbnRJRCArICcmc2NvcGU9JyArIG0uc2NvcGUgKyAnJm5vbmNlPScgKyAgY29udGVudHMgKyAnJnJlc3BvbnNlX21vZGU9JyArIG0ubW9kZSArICcmcmVkaXJlY3RfdXJpPScgKyAgbS5yZWRpcmVjdFVSSTtcblxuICAgICAgICByZWplY3Qoe25hbWU6ICdJZFBMb2dpbkVycm9yJywgbG9naW5Vcmw6IHJlcXVlc3RVcmx9KTtcblxuICAgICAgfSBlbHNlIHtcblxuICAgICAgICAvL2xhdGVyIHZlcmlmeSB0aGUgdG9rZW4gYW5kIHVzZSB0aGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgSldUXG5cbiAgICAgICAgbGV0IHRva2VuID0gaGludC5zcGxpdCgnLycpO1xuICAgICAgICBsZXQgdG9rZW5TcGxpdGVkID0gdG9rZW5bM107XG5cbiAgICAgICAgbGV0IGhpbnRTcGxpdGVkID0gdG9rZW5TcGxpdGVkLnNwbGl0KCcuJyk7XG5cbiAgICAgICAgbGV0IGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaGludFNwbGl0ZWRbMV0pKTtcblxuICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ21pY3Jvc29mdC5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcbiAgICAgICAgbGV0IGlkZW50aXR5QnVuZGxlID0ge2Fzc2VydGlvbjogaGludFNwbGl0ZWRbMV0sIGlkcDogaWRwQnVuZGxlLCBpbmZvVG9rZW46IGlkVG9rZW59O1xuICAgICAgICByZXNvbHZlKGlkZW50aXR5QnVuZGxlKTtcblxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxuKi9cbmNsYXNzIE1pY3Jvc29mdFByb3h5U3R1YiB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcbiAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7XG4gICBfdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9taWNyb3NvZnQuY29tJykge1xuXG4gICAgICAgX3RoaXMucmVxdWVzdFRvSWRwKG1zZyk7XG4gICAgIH1cbiAgIH0pO1xuICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2NyZWF0ZWQnKTtcbiB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuICAqXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xuICAqL1xuICByZXF1ZXN0VG9JZHAobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xuXG4gICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgaWRwLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuICAgICAgICBpZHAudmFsaWRhdGVBc3NlcnRpb24ocGFyYW1zLmFzc2VydGlvbiwgcGFyYW1zLm9yaWdpbikudGhlbihcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcblxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKlxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxuICAqL1xuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50byxcbiAgICAgICAgICAgICAgICAgICBib2R5OiB7Y29kZTogMjAwLCB2YWx1ZTogdmFsdWV9fTtcblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG4gIH1cblxuICBfc2VuZFN0YXR1cyh2YWx1ZSwgcmVhc29uKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuc2VuZFN0YXR1c10gJywgdmFsdWUpO1xuXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cbiAgICBsZXQgbXNnID0ge1xuICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICBib2R5OiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAocmVhc29uKSB7XG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuICAgIH1cblxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgfVxuXG59XG5cbi8vIGV4cG9ydCBkZWZhdWx0IElkcFByb3h5UHJvdG9TdHViO1xuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdNaWNyb3NvZnRQcm94eVN0dWInLFxuICAgIGluc3RhbmNlOiBuZXcgTWljcm9zb2Z0UHJveHlTdHViKHVybCwgYnVzLCBjb25maWcpXG4gIH07XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L21pY3Jvc29mdC9NaWNyb3NvZnRQcm94eVN0dWIuaWRwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "microsoft.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "34.00",
    "description": "IDPProxy for microsoft idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "546e0f62b1aa6b322a17c85cf925e1dba",
    "constraints": {
      "browser": true
    },
    "objectName": "microsoft.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsForBrowserProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\n//const https = require('https');\n//let btoa = require('btoa');\n//let atob = require('atob');\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\nvar idp = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJSFAKEBrowser:assertion', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n\n      // atob may need to be required for nodejs\n      // var atob = require('atob');\n\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      var idTokenSplited = content.tokenID.split('.');\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  * TODO add details of the implementation, and improve implementation\r\n  *\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertionFAKE_BROWSER:contents]', contents);\n    console.log('[IDPROXY.generateAssertionFAKE_BROWSER:origin]', origin);\n    console.log('[IDPROXY.generateAssertionFAKE_BROWSER:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      console.log('generateMessageResponse:');\n      return resolve(generateMessageResponse);\n    });\n  }\n\n  /**\r\n  * Identity Provider Proxy Protocol Stub\r\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('FAKE NODEJS constructor');\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://nodejs-idp') {\n        _this.requestToIdp(msg);\n      }\n    });\n\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n      * This function receives a message and a value. It replies the value to the sender of the message received\r\n      *\r\n      * @param  {message}   message received\r\n      * @param  {value}     value to include in the new message to send\r\n      */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[NodeJS.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvRmFrZU5vZGVqc0ZvckJyb3dzZXJQcm94eVN0dWIuaWRwLmpzPzZhYmYiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJpZGVudGl0aWVzIiwibklkZW50aXR5IiwiZ29vZ2xlSW5mbyIsImNsaWVudFNlY3JldCIsImNsaWVudElEIiwicmVkaXJlY3RVUkkiLCJpc3N1ZXIiLCJ0b2tlbkVuZHBvaW50Iiwiandrc1VyaSIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsInVzZXJpbmZvIiwidG9rZW5JbmZvIiwiYWNjZXNzVHlwZSIsInR5cGUiLCJzY29wZSIsInN0YXRlIiwiaWRwIiwidmFsaWRhdGVBc3NlcnRpb24iLCJhc3NlcnRpb24iLCJvcmlnaW4iLCJjb25zb2xlIiwibG9nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJkZWNvZGVkQ29udGVudCIsImF0b2IiLCJjb250ZW50IiwiSlNPTiIsInBhcnNlIiwiaWRUb2tlblNwbGl0ZWQiLCJ0b2tlbklEIiwic3BsaXQiLCJpZFRva2VuIiwiaWRlbnRpdHkiLCJlbWFpbCIsImNvbnRlbnRzIiwibm9uY2UiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImhpbnQiLCJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSIsIk5vZGVqc1Byb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJfdGhpcyIsIm1lc3NhZ2VCdXMiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJwYXJhbXMiLCJib2R5IiwibWV0aG9kIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInZhbHVlIiwicmVwbHlNZXNzYWdlIiwiZXJyb3IiLCJtZXNzYWdlIiwiaWQiLCJmcm9tIiwiY29kZSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyIsInVybCIsIm5h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QSxVQUFJVCxNQUFNO0FBQ1JuQyxjQUFNLFFBREU7QUFFUmlELGNBQU1qQixNQUFNSCxtQkFGSjtBQUdSTyxZQUFJSixNQUFNSCxtQkFBTixHQUE0QixTQUh4QjtBQUlSVyxjQUFNO0FBQ0pJLGlCQUFPQTtBQURIO0FBSkUsT0FBVjs7QUFTQSxVQUFJUSxNQUFKLEVBQVk7QUFDVmpCLFlBQUlLLElBQUosQ0FBU2MsSUFBVCxHQUFnQkYsTUFBaEI7QUFDRDs7QUFFRHBCLFlBQU1DLFVBQU4sQ0FBaUJrQixXQUFqQixDQUE2QmhCLEdBQTdCO0FBQ0Q7Ozs7OztBQUdIOzs7Ozs7Ozs7QUFPZSxTQUFTakQsUUFBVCxDQUFrQnFFLEdBQWxCLEVBQXVCekIsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTHlCLFVBQU0saUJBREQ7QUFFTEMsY0FBVSxJQUFJN0IsZUFBSixDQUFvQjJCLEdBQXBCLEVBQXlCekIsR0FBekIsRUFBOEJDLE1BQTlCO0FBRkwsR0FBUDtBQUlEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgaWRlbnRpdGllcyA9IHt9O1xyXG5sZXQgbklkZW50aXR5ID0gMDtcclxuLy9pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XHJcbi8vbGV0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XHJcbi8vY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xyXG4vL2xldCBidG9hID0gcmVxdWlyZSgnYnRvYScpO1xyXG4vL2xldCBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xyXG5cclxubGV0IGdvb2dsZUluZm8gPSB7XHJcbiAgY2xpZW50U2VjcmV0OiAgICAgICAgICAnWHg0ckt1Y2I1WllUYVhsY1pYOUhMZlpXJyxcclxuICBjbGllbnRJRDogICAgICAgICAgICAgICc4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nLFxyXG4gIHJlZGlyZWN0VVJJOiAgICAgICAgICAgJ2h0dHBzOi8vbG9jYWxob3N0JyxcclxuICBpc3N1ZXI6ICAgICAgICAgICAgICAgICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20nLFxyXG4gIHRva2VuRW5kcG9pbnQ6ICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8nLFxyXG4gIGp3a3NVcmk6ICAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My9jZXJ0cz8nLFxyXG4gIGF1dGhvcmlzYXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoPycsXHJcbiAgdXNlcmluZm86ICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nLFxyXG4gIHRva2VuSW5mbzogICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbmluZm8/aWRfdG9rZW49JyxcclxuICBhY2Nlc3NUeXBlOiAgICAgICAgICAgICdvZmZsaW5lJyxcclxuICB0eXBlOiAgICAgICAgICAgICAgICAgICdjb2RlJyxcclxuICBzY29wZTogICAgICAgICAgICAgICAgICdvcGVuaWQlMjBlbWFpbCUyMHByb2ZpbGUnLFxyXG4gIHN0YXRlOiAgICAgICAgICAgICAgICAgJ3N0YXRlJ1xyXG59O1xyXG5cclxuXHJcbmxldCBpZHAgPSB7XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXHJcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdFxyXG4gICovXHJcbiAgdmFsaWRhdGVBc3NlcnRpb246IChhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHlOT0RFSlNGQUtFQnJvd3Nlcjphc3NlcnRpb24nLCBhc3NlcnRpb24pO1xyXG5cclxuICAgIC8vVE9ETyBjaGVjayB0aGUgdmFsdWVzIHdpdGggdGhlIGhhc2ggcmVjZWl2ZWRcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG5cclxuICAgICAgLy8gYXRvYiBtYXkgbmVlZCB0byBiZSByZXF1aXJlZCBmb3Igbm9kZWpzXHJcbiAgICAgIC8vIHZhciBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xyXG5cclxuICAgICAgbGV0IGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pO1xyXG4gICAgICBsZXQgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQpO1xyXG4gICAgICBsZXQgaWRUb2tlblNwbGl0ZWQgPSBjb250ZW50LnRva2VuSUQuc3BsaXQoJy4nKTtcclxuICAgICAgbGV0IGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcclxuXHJcbiAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZX0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXHJcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb25cclxuICAqXHJcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxyXG4gICovXHJcbiAgZ2VuZXJhdGVBc3NlcnRpb246IChjb250ZW50cywgb3JpZ2luLCBoaW50KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb25GQUtFX0JST1dTRVI6Y29udGVudHNdJywgY29udGVudHMpO1xyXG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRV9CUk9XU0VSOm9yaWdpbl0nLCBvcmlnaW4pO1xyXG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRV9CUk9XU0VSOmhpbnRdJywgaGludCk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgY29uc29sZS5sb2coJ2dlbmVyYXRlTWVzc2FnZVJlc3BvbnNlOicpO1xyXG4gICAgICByZXR1cm4gcmVzb2x2ZShnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcclxuKi9cclxuY2xhc3MgTm9kZWpzUHJveHlTdHViIHtcclxuXHJcbiAgLyoqXHJcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxyXG4gICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgcmVjZWl2ZWQgaWRwUHJveHlcclxuICAqXHJcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAgKi9cclxuIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XHJcbiAgIGNvbnNvbGUubG9nKCdGQUtFIE5PREVKUyBjb25zdHJ1Y3RvcicpO1xyXG4gICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcclxuICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1cztcclxuICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xyXG5cclxuICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xyXG5cclxuICAgICAvL1RPRE8gYWRkIHRoZSByZXNwZWN0aXZlIGxpc3RlbmVyXHJcbiAgICAgaWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly9ub2RlanMtaWRwJykge1xyXG4gICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xyXG4gICAgIH1cclxuICAgfSk7XHJcblxyXG4gICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xyXG4gfVxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cclxuICAqXHJcbiAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXHJcbiAgKi9cclxuICByZXF1ZXN0VG9JZHAobXNnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcclxuXHJcbiAgICBzd2l0Y2ggKG1zZy5ib2R5Lm1ldGhvZCkge1xyXG4gICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XHJcbiAgICAgICAgaWRwLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcclxuICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTt9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxyXG4gICAgICAgIGlkcC52YWxpZGF0ZUFzc2VydGlvbihwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKFxyXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXHJcblxyXG4gICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO31cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbi8qKlxyXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqXHJcbiAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxyXG4gICovXHJcbiAgcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IG1lc3NhZ2UgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sXHJcbiAgICAgICAgICAgICAgICAgICBib2R5OiB7Y29kZTogMjAwLCB2YWx1ZTogdmFsdWV9fTtcclxuXHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBjb25zb2xlLmxvZygnW05vZGVKUy5zZW5kU3RhdHVzXSAnLCB2YWx1ZSk7XHJcblxyXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3VwZGF0ZScsXHJcbiAgICAgIGZyb206IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsXHJcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxyXG4gICAgICBib2R5OiB7XHJcbiAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHJlYXNvbikge1xyXG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xyXG4gICAgfVxyXG5cclxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cclxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXHJcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ05vZGVqc1Byb3h5U3R1YicsXHJcbiAgICBpbnN0YW5jZTogbmV3IE5vZGVqc1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxyXG4gIH07XHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9ub2RlanMtaWRwL0Zha2VOb2RlanNGb3JCcm93c2VyUHJveHlTdHViLmlkcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "34.60",
    "description": "IDPProxy for browser idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5d2606fd332d71526cafc4c13d80437b4",
    "constraints": {
      "browser": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\n//const https = require('https');\nvar btoa = __webpack_require__(1);\nvar atob = __webpack_require__(2);\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\nvar idp = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJSFAKE:assertion', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      var idTokenSplited = content.tokenID.split('.');\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  * TODO add details of the implementation, and improve implementation\r\n  *\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertionFAKE:contents]', contents);\n    console.log('[IDPROXY.generateAssertionFAKE:origin]', origin);\n    console.log('[IDPROXY.generateAssertionFAKE:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      console.log('generateMessageResponse:');\n      return resolve(generateMessageResponse);\n    });\n  }\n\n  /**\r\n  * Identity Provider Proxy Protocol Stub\r\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('FAKE NODEJS constructor');\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://nodejs-idp') {\n        _this.requestToIdp(msg);\n      }\n    });\n\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n    * This function receives a message and a value. It replies the value to the sender of the message received\r\n    *\r\n    * @param  {message}   message received\r\n    * @param  {value}     value to include in the new message to send\r\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[NodeJS.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}\n\nvar generateMessageResponse = { assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n  idp: {\n    domain: 'nodejs-idp',\n    protocol: 'OIDC' },\n  info: {\n    accessToken: 'ya29.GlsbBalGJJmVi_N5IDyqMI3JxkO5eLV4333I93eQBCpNAofEqtU4UkWHh8drVlrViVTqt6Jk3P86_CDt4sKVh0G9AbTk1rVW3MAxcFhEUFE-KMXdDK_KsMf6fNQk',\n    idToken: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDMxNTQ0OTE3MTEyNzUxMjYzNDIiLCJlbWFpbCI6InRlc3RhbmR0aGluazMyMUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6Ii03dmE2M1VvdWVEMkx6S1czRl82OFEiLCJub25jZSI6Ils0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0iLCJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJpYXQiOjE1MTI2NDYwODAsImV4cCI6MTUxMjY0OTY4MH0.teI1m90VrAEgKtv3PIG7J6sAhd_QY7mi3QsWLYbakWJqL6f4gmFyddEwqKxGY4x7sMLtj-Uc0ZKuWX_qE7K6iwjhMlzbTHK8LehyILOCY7Xsuoa6MqfT1Wp8Bg0TfJHuOnbZ_ymxPMQKOkfZiPVS5iqsO3bneQzTr0JbqtQ7xWsJS6nz-iA6rEdKjfC70amW0iSI--lWmX7sZaTeZc7ug4r4Z5-zLF39zwQPOwEQAlT-ZA_y1gO_4VueDeZmWmVuz2kJO_91h6qE5nZOtwWVuCrdw-9Iaw7z2DPes_j5RD8lDovR6JM0dj2JqzL9VpTcmF27AJsc1jhQLsLWblcxZw',\n    refreshToken: '1/6cCGEWyzx2uO2bH2F1A8v6KDTG4rP0CXc-XUQ12-U0o',\n    tokenType: 'Bearer',\n    infoToken: {\n      sub: '103154491711275126342',\n      name: 'test think',\n      given_name: 'test',\n      family_name: 'think',\n      picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      email: 'testandthink321@gmail.com',\n      email_verified: true,\n      locale: 'en' },\n    tokenIDJSON: { 'azp': '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      aud: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      sub: '103154491711275126342',\n      email: 'testandthink321@gmail.com',\n      email_verified: 'true',\n      at_hash: '-7va63UoueD2LzKW3F_68Q',\n      nonce: '[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1]',\n      iss: 'https://accounts.nodejs-idp',\n      iat: '1512646080',\n      exp: '1512649680',\n      alg: 'RS256',\n      kid: '477d17972d2a001074d586b588976d234296801e' },\n    expires: '1512649680',\n    email: 'testandthink321@gmail.com' },\n  infoToken: {\n    sub: '103154491711275126342',\n    name: 'test think',\n    given_name: 'test',\n    family_name: 'think',\n    picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n    email: 'testandthink321@gmail.com',\n    email_verified: true,\n    locale: 'en' },\n  identity: 'user://nodejs-idp/testandthink321@gmail.com',\n  messageInfo: {\n    userProfile: {\n      username: 'testandthink321@gmail.com',\n      cn: 'testandthink321',\n      avatar: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      locale: 'en',\n      userURL: 'user://nodejs-idp/testandthink321@gmail.com' },\n    idp: 'nodejs-idp',\n    assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n    expires: '1512649680' }\n  /*\r\n  keyPair:{\r\n  public:[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1],\r\n  private:[48,130,4,191,2,1,0,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,4,130,4,169,48,130,4,165,2,1,0,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1,2,130,1,0,103,244,137,118,116,82,14,203,102,107,253,88,12,199,222,60,243,136,86,157,74,224,190,53,113,57,157,250,49,130,96,31,252,136,152,70,143,17,215,96,103,51,18,35,141,212,210,205,9,216,83,70,245,71,138,119,112,229,164,176,9,37,81,161,193,154,68,249,115,106,201,6,12,225,144,126,141,210,141,242,128,159,221,163,222,21,233,230,167,206,59,24,250,233,81,122,102,26,6,233,72,133,47,77,155,238,86,6,139,24,131,163,179,112,48,247,142,6,207,204,173,223,140,199,150,95,123,152,202,155,131,238,62,96,133,4,217,51,121,30,38,178,189,216,44,35,241,93,7,62,90,111,216,66,209,243,128,234,141,84,135,181,13,38,220,114,245,240,178,95,220,206,11,186,234,213,66,121,83,68,89,75,46,183,145,183,147,160,215,118,198,125,181,146,30,251,58,87,47,209,237,97,24,47,179,6,110,242,99,150,226,148,198,174,146,101,213,87,178,10,223,105,18,56,53,22,212,158,170,176,51,86,145,125,124,44,9,85,19,144,246,170,78,124,30,32,12,166,174,139,77,63,173,82,10,153,2,129,129,0,248,18,143,246,137,136,145,219,178,39,27,94,64,90,47,163,114,60,63,187,131,143,244,16,42,128,231,117,92,98,219,155,62,107,252,17,245,45,160,225,103,142,72,36,193,150,235,214,175,62,212,56,45,9,0,60,114,107,134,228,204,131,131,214,94,201,148,159,99,139,181,13,119,38,30,107,166,165,203,43,34,20,207,171,32,58,167,62,196,153,103,204,213,247,48,111,227,59,95,97,194,187,53,10,247,108,58,86,28,29,113,8,110,171,220,245,11,82,233,223,91,68,166,117,174,187,62,77,2,129,129,0,235,118,2,105,239,212,30,104,157,41,109,11,248,152,22,236,97,40,153,131,228,5,86,187,113,126,144,76,141,79,110,250,146,152,49,58,156,201,176,92,189,209,30,112,108,175,204,204,247,164,46,129,239,98,127,49,145,218,63,193,124,174,18,98,201,99,154,162,138,78,159,253,3,248,3,209,36,239,193,155,193,5,19,236,37,78,118,135,250,199,7,141,248,120,36,136,93,98,174,60,18,215,93,174,107,141,116,145,167,221,210,169,247,67,254,222,161,134,63,221,90,87,42,99,227,81,173,151,2,129,129,0,133,23,168,103,83,232,146,160,181,23,40,38,204,13,214,203,49,41,195,227,189,181,8,243,119,106,75,67,250,250,10,234,98,118,26,250,35,121,132,124,10,76,26,198,165,154,108,19,117,88,23,17,192,143,184,177,181,141,157,4,185,248,193,77,204,243,7,170,240,4,111,113,183,0,27,136,20,19,149,74,33,241,218,108,236,80,171,148,16,116,97,109,83,74,88,145,94,239,102,192,19,114,207,5,128,51,111,164,237,86,154,99,52,197,62,57,182,6,152,245,61,137,58,105,159,2,84,109,2,129,129,0,226,67,111,132,95,91,101,177,63,189,44,53,193,184,92,230,223,98,133,74,209,86,52,7,65,195,206,100,81,178,144,65,167,151,42,79,89,149,18,173,188,21,244,251,49,230,41,150,153,46,35,38,231,99,174,56,115,32,215,253,85,147,108,197,147,34,236,216,222,177,57,90,136,114,207,48,46,31,90,220,18,58,143,239,111,214,27,95,6,36,53,229,62,108,45,39,1,30,47,178,56,164,206,56,42,208,46,193,61,31,147,45,147,23,187,22,50,255,111,229,132,199,152,75,142,136,209,151,2,129,129,0,165,56,232,76,55,57,240,159,92,207,220,143,130,30,57,234,251,172,171,180,54,159,229,96,246,73,112,146,75,157,242,201,161,218,37,176,35,170,50,90,148,102,191,199,239,174,78,72,67,85,199,45,149,145,132,161,212,33,157,75,216,79,39,233,18,210,255,26,72,229,239,44,12,147,158,176,192,95,126,32,175,23,226,131,139,197,175,193,62,8,151,252,68,154,94,89,189,125,90,30,36,175,73,230,194,13,233,247,123,60,241,47,171,51,189,112,111,213,141,89,70,249,236,63,236,110,115,208]\r\n  }*/\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvRmFrZU5vZGVqc1Byb3h5U3R1Yi5pZHAuanM/MTU2ZiJdLCJuYW1lcyI6WyJhY3RpdmF0ZSIsImlkZW50aXRpZXMiLCJuSWRlbnRpdHkiLCJidG9hIiwicmVxdWlyZSIsImF0b2IiLCJnb29nbGVJbmZvIiwiY2xpZW50U2VjcmV0IiwiY2xpZW50SUQiLCJyZWRpcmVjdFVSSSIsImlzc3VlciIsInRva2VuRW5kcG9pbnQiLCJqd2tzVXJpIiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidXNlcmluZm8iLCJ0b2tlbkluZm8iLCJhY2Nlc3NUeXBlIiwidHlwZSIsInNjb3BlIiwic3RhdGUiLCJpZHAiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsIm9yaWdpbiIsImNvbnNvbGUiLCJsb2ciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRlY29kZWRDb250ZW50IiwiY29udGVudCIsIkpTT04iLCJwYXJzZSIsImlkVG9rZW5TcGxpdGVkIiwidG9rZW5JRCIsInNwbGl0IiwiaWRUb2tlbiIsImlkZW50aXR5IiwiZW1haWwiLCJjb250ZW50cyIsIm5vbmNlIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwiZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UiLCJOb2RlanNQcm94eVN0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiX3RoaXMiLCJtZXNzYWdlQnVzIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwicGFyYW1zIiwiYm9keSIsIm1ldGhvZCIsInVzZXJuYW1lSGludCIsInRoZW4iLCJ2YWx1ZSIsInJlcGx5TWVzc2FnZSIsImVycm9yIiwibWVzc2FnZSIsImlkIiwiZnJvbSIsImNvZGUiLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsIl9zdGF0ZSIsImRlc2MiLCJ1cmwiLCJuYW1lIiwiaW5zdGFuY2UiLCJkb21haW4iLCJwcm90b2NvbCIsImluZm8iLCJhY2Nlc3NUb2tlbiIsInJlZnJlc2hUb2tlbiIsInRva2VuVHlwZSIsImluZm9Ub2tlbiIsInN1YiIsImdpdmVuX25hbWUiLCJmYW1pbHlfbmFtZSIsInBpY3R1cmUiLCJlbWFpbF92ZXJpZmllZCIsImxvY2FsZSIsInRva2VuSURKU09OIiwiYXVkIiwiYXRfaGFzaCIsImlzcyIsImlhdCIsImV4cCIsImFsZyIsImtpZCIsImV4cGlyZXMiLCJtZXNzYWdlSW5mbyIsInVzZXJQcm9maWxlIiwidXNlcm5hbWUiLCJjbiIsImF2YXRhciIsInVzZXJVUkwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O2tCQXVMd0JBLFE7Ozs7QUF2THhCLElBQUlDLGFBQWEsRUFBakI7QUFDQSxJQUFJQyxZQUFZLENBQWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUMsT0FBTyxtQkFBQUMsQ0FBUSxDQUFSLENBQVg7QUFDQSxJQUFJQyxPQUFPLG1CQUFBRCxDQUFRLENBQVIsQ0FBWDs7QUFFQSxJQUFJRSxhQUFhO0FBQ2ZDLGdCQUF1QiwwQkFEUjtBQUVmQyxZQUF1QiwwRUFGUjtBQUdmQyxlQUF1QixtQkFIUjtBQUlmQyxVQUF1Qiw2QkFKUjtBQUtmQyxpQkFBdUIsNkNBTFI7QUFNZkMsV0FBdUIsNkNBTlI7QUFPZkMseUJBQXVCLCtDQVBSO0FBUWZDLFlBQXVCLDZEQVJSO0FBU2ZDLGFBQXVCLDBEQVRSO0FBVWZDLGNBQXVCLFNBVlI7QUFXZkMsUUFBdUIsTUFYUjtBQVlmQyxTQUF1QiwwQkFaUjtBQWFmQyxTQUF1QjtBQWJSLENBQWpCOztBQWtCQSxJQUFJQyxNQUFNOztBQUVSOzs7Ozs7OztBQVFBQyxxQkFBbUIsMkJBQUNDLFNBQUQsRUFBWUMsTUFBWixFQUF1QjtBQUN4Q0MsWUFBUUMsR0FBUixDQUFZLDRDQUFaLEVBQTBESCxTQUExRDs7QUFFQTtBQUNBLFdBQU8sSUFBSUksT0FBSixDQUFZLFVBQVNDLE9BQVQsRUFBaUJDLE1B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ZGVudGl0eSA9IDA7XHJcbi8vaW1wb3J0IGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xyXG4vL2xldCBmZXRjaCA9IHJlcXVpcmUoXCJub2RlLWZldGNoXCIpO1xyXG4vL2NvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcclxubGV0IGJ0b2EgPSByZXF1aXJlKCdidG9hJyk7XHJcbmxldCBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xyXG5cclxubGV0IGdvb2dsZUluZm8gPSB7XHJcbiAgY2xpZW50U2VjcmV0OiAgICAgICAgICAnWHg0ckt1Y2I1WllUYVhsY1pYOUhMZlpXJyxcclxuICBjbGllbnRJRDogICAgICAgICAgICAgICc4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nLFxyXG4gIHJlZGlyZWN0VVJJOiAgICAgICAgICAgJ2h0dHBzOi8vbG9jYWxob3N0JyxcclxuICBpc3N1ZXI6ICAgICAgICAgICAgICAgICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20nLFxyXG4gIHRva2VuRW5kcG9pbnQ6ICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8nLFxyXG4gIGp3a3NVcmk6ICAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My9jZXJ0cz8nLFxyXG4gIGF1dGhvcmlzYXRpb25FbmRwb2ludDogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoPycsXHJcbiAgdXNlcmluZm86ICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nLFxyXG4gIHRva2VuSW5mbzogICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbmluZm8/aWRfdG9rZW49JyxcclxuICBhY2Nlc3NUeXBlOiAgICAgICAgICAgICdvZmZsaW5lJyxcclxuICB0eXBlOiAgICAgICAgICAgICAgICAgICdjb2RlJyxcclxuICBzY29wZTogICAgICAgICAgICAgICAgICdvcGVuaWQlMjBlbWFpbCUyMHByb2ZpbGUnLFxyXG4gIHN0YXRlOiAgICAgICAgICAgICAgICAgJ3N0YXRlJ1xyXG59O1xyXG5cclxuXHJcblxyXG5sZXQgaWRwID0ge1xyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxyXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBpZGVudGl0eSBhc3NlcnRpb24gdmFsaWRhdGlvbiByZXN1bHRcclxuICAqL1xyXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoYXNzZXJ0aW9uLCBvcmlnaW4pID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZUFzc2VydGlvblByb3h5Tk9ERUpTRkFLRTphc3NlcnRpb24nLCBhc3NlcnRpb24pO1xyXG5cclxuICAgIC8vVE9ETyBjaGVjayB0aGUgdmFsdWVzIHdpdGggdGhlIGhhc2ggcmVjZWl2ZWRcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XHJcbiAgICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7XHJcbiAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IGNvbnRlbnQudG9rZW5JRC5zcGxpdCgnLicpO1xyXG4gICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xyXG5cclxuICAgICAgcmVzb2x2ZSh7aWRlbnRpdHk6IGlkVG9rZW4uZW1haWwsIGNvbnRlbnRzOiBpZFRva2VuLm5vbmNlfSk7XHJcblxyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byBnZW5lcmF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb25cclxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSBpbXBsZW1lbnRhdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXHJcbiAgKi9cclxuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbkZBS0U6Y29udGVudHNdJywgY29udGVudHMpO1xyXG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRTpvcmlnaW5dJywgb3JpZ2luKTtcclxuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbkZBS0U6aGludF0nLCBoaW50KTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG5cclxuICAgICAgY29uc29sZS5sb2coJ2dlbmVyYXRlTWVzc2FnZVJlc3BvbnNlOicpO1xyXG4gICAgICByZXR1cm4gcmVzb2x2ZShnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSk7XHJcblxyXG5cclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxyXG4qL1xyXG5jbGFzcyBOb2RlanNQcm94eVN0dWIge1xyXG5cclxuICAvKipcclxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXHJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxyXG4gICpcclxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqL1xyXG4gY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcclxuICAgY29uc29sZS5sb2coJ0ZBS0UgTk9ERUpTIGNvbnN0cnVjdG9yJyk7XHJcbiAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xyXG4gICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xyXG4gICBfdGhpcy5jb25maWcgPSBjb25maWc7XHJcblxyXG4gICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7XHJcblxyXG4gICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcclxuICAgICBpZiAobXNnLnRvID09PSAnZG9tYWluLWlkcDovL25vZGVqcy1pZHAnKSB7XHJcbiAgICAgICAgX3RoaXMucmVxdWVzdFRvSWRwKG1zZyk7XHJcbiAgICAgfVxyXG4gICB9KTtcclxuXHJcbiAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XHJcbiB9XHJcblxyXG4gLyoqXHJcbiAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cclxuICpcclxuICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xyXG4gKi9cclxuIHJlcXVlc3RUb0lkcChtc2cpIHtcclxuICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcclxuXHJcbiAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XHJcbiAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOlxyXG4gICAgICAgaWRwLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcclxuICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXHJcblxyXG4gICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxyXG4gICAgICAgKTtcclxuICAgICAgIGJyZWFrO1xyXG4gICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcclxuICAgICAgIGlkcC52YWxpZGF0ZUFzc2VydGlvbihwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKFxyXG4gICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcclxuXHJcbiAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XHJcbiAgICAgICApO1xyXG4gICAgICAgYnJlYWs7XHJcbiAgICAgZGVmYXVsdDpcclxuICAgICAgIGJyZWFrO1xyXG4gICB9XHJcbiB9XHJcblxyXG5cclxuICAvKipcclxuICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXHJcbiAgKlxyXG4gICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXHJcbiAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcclxuICAqL1xyXG4gIHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBtZXNzYWdlID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxyXG4gICAgICAgICAgICAgICAgICAgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX07XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tOb2RlSlMuc2VuZFN0YXR1c10gJywgdmFsdWUpO1xyXG5cclxuICAgIF90aGlzLl9zdGF0ZSA9IHZhbHVlO1xyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICd1cGRhdGUnLFxyXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxyXG4gICAgICB0bzogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJyxcclxuICAgICAgYm9keToge1xyXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChyZWFzb24pIHtcclxuICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXHJcbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhY3RpdmF0ZSh1cmwsIGJ1cywgY29uZmlnKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWU6ICdOb2RlanNQcm94eVN0dWInLFxyXG4gICAgaW5zdGFuY2U6IG5ldyBOb2RlanNQcm94eVN0dWIodXJsLCBidXMsIGNvbmZpZylcclxuICB9O1xyXG59XHJcblxyXG5cclxubGV0IGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlID1cclxue2Fzc2VydGlvbjpcclxuJ2V5SjBiMnRsYmtsRUlqb2laWGxLYUdKSFkybFBhVXBUVlhwSk1VNXBTWE5KYlhSd1drTkpOa2xxVVROT01sRjRUbnByTTAxdFVYbFpWRUYzVFZSQk0wNUhVVEZQUkZwcFRsUm5ORTlVWXpKYVJFbDZUa1JKTlU1cVozZE5WMVZwWmxFdVpYbEthR1Z1UVdsUGFVazBUVVJuZWsxcWF6Rk9hbGwzVFZSSmRHUklSbmxQU0VaMllVUkZlRTFVYXpCTmJXUnJUVzEwYmsxRVFUTmtSRUo2VDBkWmVVNTZaSGxpTW10MVdWaENkMk41Tlc1aU1qbHVZa2RXTVdNeVZubFpNamwxWkVkV2RXUkROV3BpTWpCcFRFTkthR1JYVVdsUGFVazBUVVJuZWsxcWF6Rk9hbGwzVFZSSmRHUklSbmxQU0VaMllVUkZlRTFVYXpCTmJXUnJUVzEwYmsxRVFUTmtSRUo2VDBkWmVVNTZaSGxpTW10MVdWaENkMk41Tlc1aU1qbHVZa2RXTVdNeVZubFpNamwxWkVkV2RXUkROV3BpTWpCcFRFTktlbVJYU1dsUGFVbDRUVVJOZUU1VVVUQlBWRVV6VFZSRmVVNTZWWGhOYWxsNlRrUkphVXhEU214aVYwWndZa05KTmtsdVVteGpNMUpvWW0xU01HRkhiSFZoZWsxNVRWVkNibUpYUm5CaVF6VnFZakl3YVV4RFNteGlWMFp3WWtZNU1scFlTbkJhYld4c1drTkpObVJJU2pGYVUzZHBXVmhTWm1GSFJucGhRMGsyU1drd00yUnRSVEpOTVZaMlpGZFdSVTFyZURaVE1XTjZVbXc0TWs5R1JXbE1RMHAxWWpJMWFscFRTVFpKYkhNd1QwTjNlRTE2UVhOTlUzZDZUa04zTUU5RGQzaE5lWGN5VEVScmMwNUVTWE5OVkUwd1RFUmplVXhFUlhwT1EzZDVUa1JqYzAxVVRYTk5VM2Q0VEVSRmMwNVRkM2RNUkUxelRWUk5kMHhFUlhOTlZGVnpUVU4zTUU5RGQzaE5la0Z6VFZOM2VFMURkM2xNUkVWNlRVTjNlRXhFUlhOTlEzZDVUV3BuYzA1RVRYTk5WRUY0VEVSRmVVeEVSWGxOVTNjelRFUkZNVTU1ZHpOTlUzYzBUVk4zTVU5RGQzbE5WR3R6VFhwSmMwMVVRWE5OVkVFMFRFUkZOVTE1ZDNoT2VtdHpUV3BGZVV4RVJYaE9hWGQ1VGxSVmMwNVVhM05OYWtVelRFUk5lVXhFUlRKTlUzZDVUVVJGYzA1VVRYTk5WR040VEVSSmVVNXBkM2hQVkd0elRWUk5NMHhFU1hkTmFYZDRUbnBGYzA1cVFYTlBSRWx6VGxSTmMwMVVTVEZNUkZsNVRFUkZNMDU1ZDNoTmFsbHpUVlJaTVV4RVNUQk1SRVV3VFZOM2VrMURkM2hPVTNkNVRXcFpjMDVVYTNOTlZFRXpURVJOTUV4RVkzTk5WRTF6VFZSUk5VeEVSWGhOYVhkNFRXcFZjMDFVUVhOTmFrMTNURVJGTlUxVGQzaE9WRmx6VFZSWk1FeEVSVE5PZVhkNFRVTjNlRTlFVlhOTlZFMXpUbXBaYzAxNWQzbE5WR056VFZSWk1reEVTVEJPUTNjMVRVTjNlRTFVYTNOTlZFVjRURVJKTTB4RVJUQk9VM2Q0VFVSUmMwNTZSWE5OVkdjMVRFUkZNazVwZDNsTmFsbHpUV3BWTVV4RVJYcE5lWGMwVFhsM2VFNVVSWE5OYWsxNFRFUkZkMDFUZDNoT1ZFVnpUMFJyYzAxcVNYTk5WR3R6VG1wVmMwMVVWVEJNUkVWM1RFUlZla3hFU1hkUFEzZDVUVlJuYzAxcVZYbE1SRWw0VDFOM2VrNTVkekZOUTNkNVRWUkpjMDlFV1hOTlZGRXhURVJGZDA1NWQzaE5la2x6VDFSQmMwMXFUWHBNUkVsM1RXbDNlVTFxWTNOTlZFRTBURVJGZUU1RGQzaE9SRVZ6VFdwcmMwNTZUWE5OVkdjelRFUk5lRXhFUlhwTVJFbDZUa04zZDB4RVNYcE5hWGQ1VGtOM2VFOVVSWE5OZWxWelRWUlJOVXhFUlROUFUzZDRUWHBuYzAxcVJUQk1SRVV4VDFOM2VVNUVWWE5OVkZsNVRFUkZNRTlEZDNsTmFrVnpUVlJGTkV4RVJUTk1SRVYzVGxOM05FOVRkM2hPVkVWelRWUlJNa3hFU1hkUFUzY3hUbE4zZVUxNldYTk9ha1Z6VFZSUmVreEVTWHBOZVhkNVRXcG5jMDFVUVhOTlZFVXhURVJuYzA5RVJYTk5WR3N6VEVSUk1VeEVSWGxOZVhkNFQwUmpjMDFxU1hwTVJFVXpUbWwzZVU1VVVYTk5WRmt4VEVSWk5VeEVSVEJOZVhkNVQxTjNlRTFFUVhOTlZFVXdURVJGTTB4RVJYcE5RM2Q1VFdwWmMwMXFTWHBNUkUxNlRFUkZlRXhFU1RCTlEzYzBUVk4zTWsxVGQzaE9la2x6VFZScmVFeEVSVEZPZVhkNVRrUlpjMDFxUVhsTVJHY3pURVJGZWsxVGQzbE5ha1Z6VDBSbmMwNUVaM05OVkVrelRFUkZNVTlUZDNoTlZHdHpUVlJaZDB4RVJURk5hWGQ0VFZSamMwNXFSWE5OYWxWNlRFUkZNMDVEZHpKT1UzZDVUVlJSYzAxcVFYcE1SRWw0VDBOM01rMTVkekZOUTNjelQwTjNlRTVxUVhOTlZHZDRURVJKZVUxVGQzbE5WRVZ6VFZSSk5FeEVZM2RNUkVVelQwTjNlRTlVUlhOTlZHTjNURVJCYzAxVVRYTk5WRWw1VEVSRk0wMTVkM2hOYVhkNVRVUk5jMDFxVlhsTVJGRnpUVlJuTUV4RVNYbE9VM2Q1VGxSSmMwNTVkekpOYVhjMVRtbDNlRTFVV1hOTlZGVnpUV3BGTWt4RVJURlBRM2N4VGxOM05FNVRkekJQUTNkNFRtbDNOVXhFU1hkT2FYZDRUVlJyYzA1NlVYTk5WRVY1VEVSSk1FMTVkM2hOZWxselQwUlJjMDFVWnpCTVJFbDVUWGwzZVU1VVVYTk5WRUY0VEVScmVFeEVXWGhNUkVWM1RFUnJlRXhFWnpGTVJFVTFUV2wzZUU1RVkzTk5WRkV3VEVSVk0weEVTVFZNUkZreVRFUkplazlEZDNoUFZHdHpUV3BSTUV4RVJUVk5lWGQ0VDFSUmMwMVVWWGRNUkVsNlRXbDNlVTFFUVhOTlZFRXpURVJKYzAxNWQzaE1SRUZ6VFZZd2FVeERTbkJqTTAxcFQybEtiMlJJVW5kamVtOTJUREpHYWxreU9URmlibEo2VEcxa2RtSXlaSE5hVXpWcVlqSXdhVXhEU25CWldGRnBUMnBGTVUxVVNUSk9SRmwzVDBSQmMwbHRWalJqUTBrMlRWUlZlRTFxV1RCUFZGazBUVWd3TG5SbFNURnRPVEJXY2tGRlowdDBkak5RU1VjM1NqWnpRV2hrWDFGWk4yMXBNMUZ6VjB4WlltRnJWMHB4VERabU5HZHRSbmxrWkVWM2NVdDRSMWswZURkelRVeDBhaTFWWXpCYVMzVlhXRjl4UlRkTE5tbDNhbWhOYkhwaVZFaExPRXhsYUhsSlRFOURXVGRZYzNWdllUWk5jV1pVTVZkd09FSm5NRlJtU2toMVQyNWlXbDk1YlhoUVRWRkxUMnRtV21sUVZsTTFhWEZ6VHpOaWJtVlJlbFJ5TUVwaWNYUlJOM2hYYzBwVE5tNTZMV2xCTm5KRlpFdHFaa00zTUdGdFZ6QnBVMGt0TFd4WGJWZzNjMXBoVkdWYVl6ZDFaelJ5TkZvMUxYcE1Sak01ZW5kUlVFOTNSVkZCYkZRdFdrRmZlVEZuVDE4MFZuVmxSR1ZhYlZkdFZuVjZNbXRLVDE4NU1XZzJjVVUxYmxwUGRIZFhWblZEY21SM0xUbEpZWGMzZWpKRVVHVnpYMm8xVWtRNGJFUnZkbEkyU2swd1pHb3lTbkY2VERsV2NGUmpiVVl5TjBGS2MyTXhhbWhSVEhOTVYySnNZM2hhZHlJc0luUnZhMlZ1U1VSS1UwOU9JanA3SW1GNmNDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW1GMVpDSTZJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiU0lzSW5OMVlpSTZJakV3TXpFMU5EUTVNVGN4TVRJM05URXlOak0wTWlJc0ltVnRZV2xzSWpvaWRHVnpkR0Z1WkhSb2FXNXJNekl4UUdkdFlXbHNMbU52YlNJc0ltVnRZV2xzWDNabGNtbG1hV1ZrSWpvaWRISjFaU0lzSW1GMFgyaGhjMmdpT2lJdE4zWmhOak5WYjNWbFJESk1la3RYTTBaZk5qaFJJaXdpYm05dVkyVWlPaUpiTkRnc01UTXdMREVzTXpRc05EZ3NNVE1zTml3NUxEUXlMREV6TkN3M01pd3hNelFzTWpRM0xERXpMREVzTVN3eExEVXNNQ3d6TERFek1Dd3hMREUxTERBc05EZ3NNVE13TERFc01UQXNNaXd4TXpBc01Td3hMREFzTWpJNExEUXpMREV3TVN3eE1pd3hNakVzTnl3eE5UY3NOekVzT0RFc05UZ3NNakU1TERNeUxERXdMREV3T0N3eE9UTXNNVGM1TERJeE1pd3hNVFlzTWpVMUxEVTVMREl4Tnl3ek1pd3hOakVzTWpBeExEVXpMREUzTVN3eU1qWXNNVGs1TERFek55d3lNRElzTVRjeExEWXdMRGd5TERVekxERXlOU3cyTWl3eE56Y3NNVEkyTERFMk5Td3lOQ3d4TkRFc016QXNNVFVzTWpJMkxEVTVMREV3Tnl3ek5DdzNMREV6TERFME9Td3hNVElzTVRJMUxERXdMREl6TUN3eE9URXNNVFUyTERFMk5Dd3hOemNzTVRBc01UZzFMREV6TERZMkxETXNNakUzTERFMk5pd3lORFFzT1RBc01URTVMREV4TVN3eU55d3hORFVzTVRBMExEY3hMREU0T1N3eE5qWXNNakkyTERJMU5Td3hNek1zT0RNc01UVXhMREl6TVN3eE1ERXNNVFV4TERnNUxESXlMREU1TERZMUxERTFOQ3d4TUN3MU15d3lNRGdzTWpFNExESTFNaXd5TVRrc016Y3NOVEFzTWpFeUxEZzJMREUwTlN3eE1EY3NNVE15TERrd0xESXpNeXd5TURJc01qSTNMREV3T0N3eE1UUXNNVFF4TERJNUxEY3pMREU0Tnl3ek1Td3hNeXd5TXpRc01Dd3lNeklzTWpRc01Ua3hMRE0xTERFME9Td3hOemtzTVRNNExESXhOQ3d4TlRrc01qUTFMREUyTWl3eE5EZ3NNakl4TERFeE9Dd3hOeXd4TURVc09Ea3NNVFV4TERFME5pd3lNRGtzTlRVc01qTTJMRFl4TERFME15d3lNek1zTWpJNExERXdMREV4TlN3NExEZ3hMREU1Tnl3ME5Td3hNak1zTVRnM0xESXlNeXd4TnpZc01qVTBMREUyTlN3Mk9Td3hORE1zTWprc01UQXdMREV4TkN3eE55d3hNekFzTWpJMkxESXlNeXd6TXl3eE1Td3lOREFzT0RFc05qRXNNVGN5TERFNU1Td3hOVGNzTWpRMkxESXdNaXc0Tnl3eE16RXNNakl4TERnNExEUTRMREV5Tnl3eE5Ua3NNVEU1TERFMk1Dd3hOVElzTVRFM0xEWXhMREkxTXl3eE56UXNOalVzTWpFMExESXdNeXd5TVRnc05qTXNOVEFzTnpnc01UWXdMREU0TVN3eU1qRXNNakV4TERFeU9DdzNNQ3d4Tnpnc01Ua3hMREUzTUN3d0xERXpMREV5TWl3eE56TXNNVElzTWpBekxESTFNaXcwTERFNE5Dd3lNalVzTWpVeUxEY3NOaklzT1RZc01URTJMREUxTERJeE5pd3hOVGdzTlRVc09EVXNORGdzTVRZc09Td3lNRFlzTVRFNUxEYzBMREV4TWl3eU5ETXNNVE0yTERnMExERTROQ3d5TWpNc01qVTBMREV3TVN3NU1TdzJNU3d4TUN3NU1TdzROU3d4T1RJc01UUTNMREUwTkN3MU55d3lPU3cyTml3eU16Z3NNVGs1TERJME5Dd3hPVE1zTVRrMExERTFNQ3d5TXpJc01qQXdMREV3Tnl3eUxETXNNU3d3TERGZElpd2lhWE56SWpvaWFIUjBjSE02THk5aFkyTnZkVzUwY3k1bmIyOW5iR1V1WTI5dElpd2lhV0YwSWpvaU1UVXhNalkwTmpBNE1DSXNJbVY0Y0NJNklqRTFNVEkyTkRrMk9EQWlMQ0poYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpRM04yUXhOemszTW1ReVlUQXdNVEEzTkdRMU9EWmlOVGc0T1RjMlpESXpOREk1Tmpnd01XVWlmWDA9JyxcclxuaWRwOntcclxuZG9tYWluOidub2RlanMtaWRwJyxcclxucHJvdG9jb2w6J09JREMnfSxcclxuaW5mbzp7XHJcbmFjY2Vzc1Rva2VuOid5YTI5Lkdsc2JCYWxHSkptVmlfTjVJRHlxTUkzSnhrTzVlTFY0MzMzSTkzZVFCQ3BOQW9mRXF0VTRVa1dIaDhkclZsclZpVlRxdDZKazNQODZfQ0R0NHNLVmgwRzlBYlRrMXJWVzNNQXhjRmhFVUZFLUtNWGRES19Lc01mNmZOUWsnLFxyXG5pZFRva2VuOidleUpoYkdjaU9pSlNVekkxTmlJc0ltdHBaQ0k2SWpRM04yUXhOemszTW1ReVlUQXdNVEEzTkdRMU9EWmlOVGc0T1RjMlpESXpOREk1Tmpnd01XVWlmUS5leUpoZW5BaU9pSTRNRGd6TWprMU5qWXdNVEl0ZEhGeU9IRnZhREV4TVRrME1tZGtNbXRuTURBM2REQnpPR1l5TnpkeWIya3VZWEJ3Y3k1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMGlMQ0poZFdRaU9pSTRNRGd6TWprMU5qWXdNVEl0ZEhGeU9IRnZhREV4TVRrME1tZGtNbXRuTURBM2REQnpPR1l5TnpkeWIya3VZWEJ3Y3k1bmIyOW5iR1YxYzJWeVkyOXVkR1Z1ZEM1amIyMGlMQ0p6ZFdJaU9pSXhNRE14TlRRME9URTNNVEV5TnpVeE1qWXpORElpTENKbGJXRnBiQ0k2SW5SbGMzUmhibVIwYUdsdWF6TXlNVUJuYldGcGJDNWpiMjBpTENKbGJXRnBiRjkyWlhKcFptbGxaQ0k2ZEhKMVpTd2lZWFJmYUdGemFDSTZJaTAzZG1FMk0xVnZkV1ZFTWt4NlMxY3pSbDgyT0ZFaUxDSnViMjVqWlNJNklsczBPQ3d4TXpBc01Td3pOQ3cwT0N3eE15dzJMRGtzTkRJc01UTTBMRGN5TERFek5Dd3lORGNzTVRNc01Td3hMREVzTlN3d0xETXNNVE13TERFc01UVXNNQ3cwT0N3eE16QXNNU3d4TUN3eUxERXpNQ3d4TERFc01Dd3lNamdzTkRNc01UQXhMREV5TERFeU1TdzNMREUxTnl3M01TdzRNU3cxT0N3eU1Ua3NNeklzTVRBc01UQTRMREU1TXl3eE56a3NNakV5TERFeE5pd3lOVFVzTlRrc01qRTNMRE15TERFMk1Td3lNREVzTlRNc01UY3hMREl5Tml3eE9Ua3NNVE0zTERJd01pd3hOekVzTmpBc09ESXNOVE1zTVRJMUxEWXlMREUzTnl3eE1qWXNNVFkxTERJMExERTBNU3d6TUN3eE5Td3lNallzTlRrc01UQTNMRE0wTERjc01UTXNNVFE1TERFeE1pd3hNalVzTVRBc01qTXdMREU1TVN3eE5UWXNNVFkwTERFM055d3hNQ3d4T0RVc01UTXNOallzTXl3eU1UY3NNVFkyTERJME5DdzVNQ3d4TVRrc01URXhMREkzTERFME5Td3hNRFFzTnpFc01UZzVMREUyTml3eU1qWXNNalUxTERFek15dzRNeXd4TlRFc01qTXhMREV3TVN3eE5URXNPRGtzTWpJc01Ua3NOalVzTVRVMExERXdMRFV6TERJd09Dd3lNVGdzTWpVeUxESXhPU3d6Tnl3MU1Dd3lNVElzT0RZc01UUTFMREV3Tnl3eE16SXNPVEFzTWpNekxESXdNaXd5TWpjc01UQTRMREV4TkN3eE5ERXNNamtzTnpNc01UZzNMRE14TERFekxESXpOQ3d3TERJek1pd3lOQ3d4T1RFc016VXNNVFE1TERFM09Td3hNemdzTWpFMExERTFPU3d5TkRVc01UWXlMREUwT0N3eU1qRXNNVEU0TERFM0xERXdOU3c0T1N3eE5URXNNVFEyTERJd09TdzFOU3d5TXpZc05qRXNNVFF6TERJek15d3lNamdzTVRBc01URTFMRGdzT0RFc01UazNMRFExTERFeU15d3hPRGNzTWpJekxERTNOaXd5TlRRc01UWTFMRFk1TERFME15d3lPU3d4TURBc01URTBMREUzTERFek1Dd3lNallzTWpJekxETXpMREV4TERJME1DdzRNU3cyTVN3eE56SXNNVGt4TERFMU55d3lORFlzTWpBeUxEZzNMREV6TVN3eU1qRXNPRGdzTkRnc01USTNMREUxT1N3eE1Ua3NNVFl3TERFMU1pd3hNVGNzTmpFc01qVXpMREUzTkN3Mk5Td3lNVFFzTWpBekxESXhPQ3cyTXl3MU1DdzNPQ3d4TmpBc01UZ3hMREl5TVN3eU1URXNNVEk0TERjd0xERTNPQ3d4T1RFc01UY3dMREFzTVRNc01USXlMREUzTXl3eE1pd3lNRE1zTWpVeUxEUXNNVGcwTERJeU5Td3lOVElzTnl3Mk1pdzVOaXd4TVRZc01UVXNNakUyTERFMU9DdzFOU3c0TlN3ME9Dd3hOaXc1TERJd05pd3hNVGtzTnpRc01URXlMREkwTXl3eE16WXNPRFFzTVRnMExESXlNeXd5TlRRc01UQXhMRGt4TERZeExERXdMRGt4TERnMUxERTVNaXd4TkRjc01UUTBMRFUzTERJNUxEWTJMREl6T0N3eE9Ua3NNalEwTERFNU15d3hPVFFzTVRVd0xESXpNaXd5TURBc01UQTNMRElzTXl3eExEQXNNVjBpTENKcGMzTWlPaUpvZEhSd2N6b3ZMMkZqWTI5MWJuUnpMbWR2YjJkc1pTNWpiMjBpTENKcFlYUWlPakUxTVRJMk5EWXdPREFzSW1WNGNDSTZNVFV4TWpZME9UWTRNSDAudGVJMW05MFZyQUVnS3R2M1BJRzdKNnNBaGRfUVk3bWkzUXNXTFliYWtXSnFMNmY0Z21GeWRkRXdxS3hHWTR4N3NNTHRqLVVjMFpLdVdYX3FFN0s2aXdqaE1semJUSEs4TGVoeUlMT0NZN1hzdW9hNk1xZlQxV3A4QmcwVGZKSHVPbmJaX3lteFBNUUtPa2ZaaVBWUzVpcXNPM2JuZVF6VHIwSmJxdFE3eFdzSlM2bnotaUE2ckVkS2pmQzcwYW1XMGlTSS0tbFdtWDdzWmFUZVpjN3VnNHI0WjUtekxGMzl6d1FQT3dFUUFsVC1aQV95MWdPXzRWdWVEZVptV21WdXoya0pPXzkxaDZxRTVuWk90d1dWdUNyZHctOUlhdzd6MkRQZXNfajVSRDhsRG92UjZKTTBkajJKcXpMOVZwVGNtRjI3QUpzYzFqaFFMc0xXYmxjeFp3JyxcclxucmVmcmVzaFRva2VuOicxLzZjQ0dFV3l6eDJ1TzJiSDJGMUE4djZLRFRHNHJQMENYYy1YVVExMi1VMG8nLFxyXG50b2tlblR5cGU6J0JlYXJlcicsXHJcbmluZm9Ub2tlbjp7XHJcbnN1YjonMTAzMTU0NDkxNzExMjc1MTI2MzQyJyxcclxubmFtZTondGVzdCB0aGluaycsXHJcbmdpdmVuX25hbWU6J3Rlc3QnLFxyXG5mYW1pbHlfbmFtZTondGhpbmsnLFxyXG5waWN0dXJlOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZycsXHJcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcclxuZW1haWxfdmVyaWZpZWQ6dHJ1ZSxcclxubG9jYWxlOidlbid9LFxyXG50b2tlbklESlNPTjp7J2F6cCc6JzgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbScsXHJcbmF1ZDonODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcclxuc3ViOicxMDMxNTQ0OTE3MTEyNzUxMjYzNDInLFxyXG5lbWFpbDondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXHJcbmVtYWlsX3ZlcmlmaWVkOid0cnVlJyxcclxuYXRfaGFzaDonLTd2YTYzVW91ZUQyTHpLVzNGXzY4UScsXHJcbm5vbmNlOidbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdJyxcclxuaXNzOidodHRwczovL2FjY291bnRzLm5vZGVqcy1pZHAnLFxyXG5pYXQ6JzE1MTI2NDYwODAnLFxyXG5leHA6JzE1MTI2NDk2ODAnLFxyXG5hbGc6J1JTMjU2Jyxcclxua2lkOic0NzdkMTc5NzJkMmEwMDEwNzRkNTg2YjU4ODk3NmQyMzQyOTY4MDFlJ30sXHJcbmV4cGlyZXM6JzE1MTI2NDk2ODAnLFxyXG5lbWFpbDondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSd9LFxyXG5pbmZvVG9rZW46e1xyXG5zdWI6JzEwMzE1NDQ5MTcxMTI3NTEyNjM0MicsXHJcbm5hbWU6J3Rlc3QgdGhpbmsnLFxyXG5naXZlbl9uYW1lOid0ZXN0JyxcclxuZmFtaWx5X25hbWU6J3RoaW5rJyxcclxucGljdHVyZTonaHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tLy1YZFVJcWRNa0NXQS9BQUFBQUFBQUFBSS9BQUFBQUFBQUFBQS80MjUycnNjYnY1TS9waG90by5qcGcnLFxyXG5lbWFpbDondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXHJcbmVtYWlsX3ZlcmlmaWVkOnRydWUsXHJcbmxvY2FsZTonZW4nfSxcclxuaWRlbnRpdHk6J3VzZXI6Ly9ub2RlanMtaWRwL3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxyXG5tZXNzYWdlSW5mbzp7XHJcbnVzZXJQcm9maWxlOntcclxudXNlcm5hbWU6J3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxyXG5jbjondGVzdGFuZHRoaW5rMzIxJyxcclxuYXZhdGFyOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZycsXHJcbmxvY2FsZTonZW4nLFxyXG51c2VyVVJMOid1c2VyOi8vbm9kZWpzLWlkcC90ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJ30sXHJcbmlkcDonbm9kZWpzLWlkcCcsXHJcbmFzc2VydGlvbjonZXlKMGIydGxia2xFSWpvaVpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHFVVE5PTWxGNFRucHJNMDF0VVhsWlZFRjNUVlJCTTA1SFVURlBSRnBwVGxSbk5FOVVZekphUkVsNlRrUkpOVTVxWjNkTlYxVnBabEV1WlhsS2FHVnVRV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2FHUlhVV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2VtUlhTV2xQYVVsNFRVUk5lRTVVVVRCUFZFVXpUVlJGZVU1NlZYaE5hbGw2VGtSSmFVeERTbXhpVjBad1lrTkpOa2x1VW14ak0xSm9ZbTFTTUdGSGJIVmhlazE1VFZWQ2JtSlhSbkJpUXpWcVlqSXdhVXhEU214aVYwWndZa1k1TWxwWVNuQmFiV3hzV2tOSk5tUklTakZhVTNkcFdWaFNabUZIUm5waFEwazJTV2t3TTJSdFJUSk5NVloyWkZkV1JVMXJlRFpUTVdONlVtdzRNazlHUldsTVEwcDFZakkxYWxwVFNUWkpiSE13VDBOM2VFMTZRWE5OVTNkNlRrTjNNRTlEZDNoTmVYY3lURVJyYzA1RVNYTk5WRTB3VEVSamVVeEVSWHBPUTNkNVRrUmpjMDFVVFhOTlUzZDRURVJGYzA1VGQzZE1SRTF6VFZSTmQweEVSWE5OVkZWelRVTjNNRTlEZDNoTmVrRnpUVk4zZUUxRGQzbE1SRVY2VFVOM2VFeEVSWE5OUTNkNVRXcG5jMDVFVFhOTlZFRjRURVJGZVV4RVJYbE5VM2N6VEVSRk1VNTVkek5OVTNjMFRWTjNNVTlEZDNsTlZHdHpUWHBKYzAxVVFYTk5WRUUwVEVSRk5VMTVkM2hPZW10elRXcEZlVXhFUlhoT2FYZDVUbFJWYzA1VWEzTk5ha1V6VEVSTmVVeEVSVEpOVTNkNVRVUkZjMDVVVFhOTlZHTjRURVJKZVU1cGQzaFBWR3R6VFZSTk0weEVTWGROYVhkNFRucEZjMDVxUVhOUFJFbHpUbFJOYzAxVVNURk1SRmw1VEVSRk0wNTVkM2hOYWxselRWUlpNVXhFU1RCTVJFVXdUVk4zZWsxRGQzaE9VM2Q1VFdwWmMwNVVhM05OVkVFelRFUk5NRXhFWTNOTlZFMXpUVlJSTlV4RVJYaE5hWGQ0VFdwVmMwMVVRWE5OYWsxM1RFUkZOVTFUZDNoT1ZGbHpUVlJaTUV4RVJUTk9lWGQ0VFVOM2VFOUVWWE5OVkUxelRtcFpjMDE1ZDNsTlZHTnpUVlJaTWt4RVNUQk9RM2MxVFVOM2VFMVVhM05OVkVWNFRFUkpNMHhFUlRCT1UzZDRUVVJSYzA1NlJYTk5WR2MxVEVSRk1rNXBkM2xOYWxselRXcFZNVXhFUlhwTmVYYzBUWGwzZUU1VVJYTk5hazE0VEVSRmQwMVRkM2hPVkVWelQwUnJjMDFxU1hOTlZHdHpUbXBWYzAxVVZUQk1SRVYzVEVSVmVreEVTWGRQUTNkNVRWUm5jMDFxVlhsTVJFbDRUMU4zZWs1NWR6Rk5RM2Q1VFZSSmMwOUVXWE5OVkZFeFRFUkZkMDU1ZDNoTmVrbHpUMVJCYzAxcVRYcE1SRWwzVFdsM2VVMXFZM05OVkVFMFRFUkZlRTVEZDNoT1JFVnpUV3ByYzA1NlRYTk5WR2N6VEVSTmVFeEVSWHBNUkVsNlRrTjNkMHhFU1hwTmFYZDVUa04zZUU5VVJYTk5lbFZ6VFZSUk5VeEVSVE5QVTNkNFRYcG5jMDFxUlRCTVJFVXhUMU4zZVU1RVZYTk5WRmw1VEVSRk1FOURkM2xOYWtWelRWUkZORXhFUlROTVJFVjNUbE4zTkU5VGQzaE9WRVZ6VFZSUk1reEVTWGRQVTNjeFRsTjNlVTE2V1hOT2FrVnpUVlJSZWt4RVNYcE5lWGQ1VFdwbmMwMVVRWE5OVkVVeFRFUm5jMDlFUlhOTlZHc3pURVJSTVV4RVJYbE5lWGQ0VDBSamMwMXFTWHBNUkVVelRtbDNlVTVVVVhOTlZGa3hURVJaTlV4RVJUQk5lWGQ1VDFOM2VFMUVRWE5OVkVVd1RFUkZNMHhFUlhwTlEzZDVUV3BaYzAxcVNYcE1SRTE2VEVSRmVFeEVTVEJOUTNjMFRWTjNNazFUZDNoT2VrbHpUVlJyZUV4RVJURk9lWGQ1VGtSWmMwMXFRWGxNUkdjelRFUkZlazFUZDNsTmFrVnpUMFJuYzA1RVozTk5WRWt6VEVSRk1VOVRkM2hOVkd0elRWUlpkMHhFUlRGTmFYZDRUVlJqYzA1cVJYTk5hbFY2VEVSRk0wNURkekpPVTNkNVRWUlJjMDFxUVhwTVJFbDRUME4zTWsxNWR6Rk5RM2N6VDBOM2VFNXFRWE5OVkdkNFRFUkplVTFUZDNsTlZFVnpUVlJKTkV4RVkzZE1SRVV6VDBOM2VFOVVSWE5OVkdOM1RFUkJjMDFVVFhOTlZFbDVURVJGTTAxNWQzaE5hWGQ1VFVSTmMwMXFWWGxNUkZGelRWUm5NRXhFU1hsT1UzZDVUbFJKYzA1NWR6Sk5hWGMxVG1sM2VFMVVXWE5OVkZWelRXcEZNa3hFUlRGUFEzY3hUbE4zTkU1VGR6QlBRM2Q0VG1sM05VeEVTWGRPYVhkNFRWUnJjMDU2VVhOTlZFVjVURVJKTUUxNWQzaE5lbGx6VDBSUmMwMVVaekJNUkVsNVRYbDNlVTVVVVhOTlZFRjRURVJyZUV4RVdYaE1SRVYzVEVScmVFeEVaekZNUkVVMVRXbDNlRTVFWTNOTlZGRXdURVJWTTB4RVNUVk1SRmt5VEVSSmVrOURkM2hQVkd0elRXcFJNRXhFUlRWTmVYZDRUMVJSYzAxVVZYZE1SRWw2VFdsM2VVMUVRWE5OVkVFelRFUkpjMDE1ZDNoTVJFRnpUVll3YVV4RFNuQmpNMDFwVDJsS2IyUklVbmRqZW05MlRESkdhbGt5T1RGaWJsSjZURzFrZG1JeVpITmFVelZxWWpJd2FVeERTbkJaV0ZGcFQycEZNVTFVU1RKT1JGbDNUMFJCYzBsdFZqUmpRMGsyVFZSVmVFMXFXVEJQVkZrMFRVZ3dMblJsU1RGdE9UQldja0ZGWjB0MGRqTlFTVWMzU2paelFXaGtYMUZaTjIxcE0xRnpWMHhaWW1GclYwcHhURFptTkdkdFJubGtaRVYzY1V0NFIxazBlRGR6VFV4MGFpMVZZekJhUzNWWFdGOXhSVGRMTm1sM2FtaE5iSHBpVkVoTE9FeGxhSGxKVEU5RFdUZFljM1Z2WVRaTmNXWlVNVmR3T0VKbk1GUm1Ta2gxVDI1aVdsOTViWGhRVFZGTFQydG1XbWxRVmxNMWFYRnpUek5pYm1WUmVsUnlNRXBpY1hSUk4zaFhjMHBUTm01NkxXbEJObkpGWkV0cVprTTNNR0Z0VnpCcFUwa3RMV3hYYlZnM2MxcGhWR1ZhWXpkMVp6UnlORm8xTFhwTVJqTTVlbmRSVUU5M1JWRkJiRlF0V2tGZmVURm5UMTgwVm5WbFJHVmFiVmR0Vm5WNk1tdEtUMTg1TVdnMmNVVTFibHBQZEhkWFZuVkRjbVIzTFRsSllYYzNlakpFVUdWelgybzFVa1E0YkVSdmRsSTJTazB3WkdveVNuRjZURGxXY0ZSamJVWXlOMEZLYzJNeGFtaFJUSE5NVjJKc1kzaGFkeUlzSW5SdmEyVnVTVVJLVTA5T0lqcDdJbUY2Y0NJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbUYxWkNJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbk4xWWlJNklqRXdNekUxTkRRNU1UY3hNVEkzTlRFeU5qTTBNaUlzSW1WdFlXbHNJam9pZEdWemRHRnVaSFJvYVc1ck16SXhRR2R0WVdsc0xtTnZiU0lzSW1WdFlXbHNYM1psY21sbWFXVmtJam9pZEhKMVpTSXNJbUYwWDJoaGMyZ2lPaUl0TjNaaE5qTlZiM1ZsUkRKTWVrdFhNMFpmTmpoUklpd2libTl1WTJVaU9pSmJORGdzTVRNd0xERXNNelFzTkRnc01UTXNOaXc1TERReUxERXpOQ3czTWl3eE16UXNNalEzTERFekxERXNNU3d4TERVc01Dd3pMREV6TUN3eExERTFMREFzTkRnc01UTXdMREVzTVRBc01pd3hNekFzTVN3eExEQXNNakk0TERRekxERXdNU3d4TWl3eE1qRXNOeXd4TlRjc056RXNPREVzTlRnc01qRTVMRE15TERFd0xERXdPQ3d4T1RNc01UYzVMREl4TWl3eE1UWXNNalUxTERVNUxESXhOeXd6TWl3eE5qRXNNakF4TERVekxERTNNU3d5TWpZc01UazVMREV6Tnl3eU1ESXNNVGN4TERZd0xEZ3lMRFV6TERFeU5TdzJNaXd4Tnpjc01USTJMREUyTlN3eU5Dd3hOREVzTXpBc01UVXNNakkyTERVNUxERXdOeXd6TkN3M0xERXpMREUwT1N3eE1USXNNVEkxTERFd0xESXpNQ3d4T1RFc01UVTJMREUyTkN3eE56Y3NNVEFzTVRnMUxERXpMRFkyTERNc01qRTNMREUyTml3eU5EUXNPVEFzTVRFNUxERXhNU3d5Tnl3eE5EVXNNVEEwTERjeExERTRPU3d4TmpZc01qSTJMREkxTlN3eE16TXNPRE1zTVRVeExESXpNU3d4TURFc01UVXhMRGc1TERJeUxERTVMRFkxTERFMU5Dd3hNQ3cxTXl3eU1EZ3NNakU0TERJMU1pd3lNVGtzTXpjc05UQXNNakV5TERnMkxERTBOU3d4TURjc01UTXlMRGt3TERJek15d3lNRElzTWpJM0xERXdPQ3d4TVRRc01UUXhMREk1TERjekxERTROeXd6TVN3eE15d3lNelFzTUN3eU16SXNNalFzTVRreExETTFMREUwT1N3eE56a3NNVE00TERJeE5Dd3hOVGtzTWpRMUxERTJNaXd4TkRnc01qSXhMREV4T0N3eE55d3hNRFVzT0Rrc01UVXhMREUwTml3eU1Ea3NOVFVzTWpNMkxEWXhMREUwTXl3eU16TXNNakk0TERFd0xERXhOU3c0TERneExERTVOeXcwTlN3eE1qTXNNVGczTERJeU15d3hOellzTWpVMExERTJOU3cyT1N3eE5ETXNNamtzTVRBd0xERXhOQ3d4Tnl3eE16QXNNakkyTERJeU15d3pNeXd4TVN3eU5EQXNPREVzTmpFc01UY3lMREU1TVN3eE5UY3NNalEyTERJd01pdzROeXd4TXpFc01qSXhMRGc0TERRNExERXlOeXd4TlRrc01URTVMREUyTUN3eE5USXNNVEUzTERZeExESTFNeXd4TnpRc05qVXNNakUwTERJd015d3lNVGdzTmpNc05UQXNOemdzTVRZd0xERTRNU3d5TWpFc01qRXhMREV5T0N3M01Dd3hOemdzTVRreExERTNNQ3d3TERFekxERXlNaXd4TnpNc01USXNNakF6TERJMU1pdzBMREU0TkN3eU1qVXNNalV5TERjc05qSXNPVFlzTVRFMkxERTFMREl4Tml3eE5UZ3NOVFVzT0RVc05EZ3NNVFlzT1N3eU1EWXNNVEU1TERjMExERXhNaXd5TkRNc01UTTJMRGcwTERFNE5Dd3lNak1zTWpVMExERXdNU3c1TVN3Mk1Td3hNQ3c1TVN3NE5Td3hPVElzTVRRM0xERTBOQ3cxTnl3eU9TdzJOaXd5TXpnc01UazVMREkwTkN3eE9UTXNNVGswTERFMU1Dd3lNeklzTWpBd0xERXdOeXd5TERNc01Td3dMREZkSWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam9pTVRVeE1qWTBOakE0TUNJc0ltVjRjQ0k2SWpFMU1USTJORGsyT0RBaUxDSmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalEzTjJReE56azNNbVF5WVRBd01UQTNOR1ExT0RaaU5UZzRPVGMyWkRJek5ESTVOamd3TVdVaWZYMD0nLFxyXG5leHBpcmVzOicxNTEyNjQ5NjgwJ30sXHJcbi8qXHJcbmtleVBhaXI6e1xyXG5wdWJsaWM6WzQ4LDEzMCwxLDM0LDQ4LDEzLDYsOSw0MiwxMzQsNzIsMTM0LDI0NywxMywxLDEsMSw1LDAsMywxMzAsMSwxNSwwLDQ4LDEzMCwxLDEwLDIsMTMwLDEsMSwwLDIyOCw0MywxMDEsMTIsMTIxLDcsMTU3LDcxLDgxLDU4LDIxOSwzMiwxMCwxMDgsMTkzLDE3OSwyMTIsMTE2LDI1NSw1OSwyMTcsMzIsMTYxLDIwMSw1MywxNzEsMjI2LDE5OSwxMzcsMjAyLDE3MSw2MCw4Miw1MywxMjUsNjIsMTc3LDEyNiwxNjUsMjQsMTQxLDMwLDE1LDIyNiw1OSwxMDcsMzQsNywxMywxNDksMTEyLDEyNSwxMCwyMzAsMTkxLDE1NiwxNjQsMTc3LDEwLDE4NSwxMyw2NiwzLDIxNywxNjYsMjQ0LDkwLDExOSwxMTEsMjcsMTQ1LDEwNCw3MSwxODksMTY2LDIyNiwyNTUsMTMzLDgzLDE1MSwyMzEsMTAxLDE1MSw4OSwyMiwxOSw2NSwxNTQsMTAsNTMsMjA4LDIxOCwyNTIsMjE5LDM3LDUwLDIxMiw4NiwxNDUsMTA3LDEzMiw5MCwyMzMsMjAyLDIyNywxMDgsMTE0LDE0MSwyOSw3MywxODcsMzEsMTMsMjM0LDAsMjMyLDI0LDE5MSwzNSwxNDksMTc5LDEzOCwyMTQsMTU5LDI0NSwxNjIsMTQ4LDIyMSwxMTgsMTcsMTA1LDg5LDE1MSwxNDYsMjA5LDU1LDIzNiw2MSwxNDMsMjMzLDIyOCwxMCwxMTUsOCw4MSwxOTcsNDUsMTIzLDE4NywyMjMsMTc2LDI1NCwxNjUsNjksMTQzLDI5LDEwMCwxMTQsMTcsMTMwLDIyNiwyMjMsMzMsMTEsMjQwLDgxLDYxLDE3MiwxOTEsMTU3LDI0NiwyMDIsODcsMTMxLDIyMSw4OCw0OCwxMjcsMTU5LDExOSwxNjAsMTUyLDExNyw2MSwyNTMsMTc0LDY1LDIxNCwyMDMsMjE4LDYzLDUwLDc4LDE2MCwxODEsMjIxLDIxMSwxMjgsNzAsMTc4LDE5MSwxNzAsMCwxMywxMjIsMTczLDEyLDIwMywyNTIsNCwxODQsMjI1LDI1Miw3LDYyLDk2LDExNiwxNSwyMTYsMTU4LDU1LDg1LDQ4LDE2LDksMjA2LDExOSw3NCwxMTIsMjQzLDEzNiw4NCwxODQsMjIzLDI1NCwxMDEsOTEsNjEsMTAsOTEsODUsMTkyLDE0NywxNDQsNTcsMjksNjYsMjM4LDE5OSwyNDQsMTkzLDE5NCwxNTAsMjMyLDIwMCwxMDcsMiwzLDEsMCwxXSxcclxucHJpdmF0ZTpbNDgsMTMwLDQsMTkxLDIsMSwwLDQ4LDEzLDYsOSw0MiwxMzQsNzIsMTM0LDI0NywxMywxLDEsMSw1LDAsNCwxMzAsNCwxNjksNDgsMTMwLDQsMTY1LDIsMSwwLDIsMTMwLDEsMSwwLDIyOCw0MywxMDEsMTIsMTIxLDcsMTU3LDcxLDgxLDU4LDIxOSwzMiwxMCwxMDgsMTkzLDE3OSwyMTIsMTE2LDI1NSw1OSwyMTcsMzIsMTYxLDIwMSw1MywxNzEsMjI2LDE5OSwxMzcsMjAyLDE3MSw2MCw4Miw1MywxMjUsNjIsMTc3LDEyNiwxNjUsMjQsMTQxLDMwLDE1LDIyNiw1OSwxMDcsMzQsNywxMywxNDksMTEyLDEyNSwxMCwyMzAsMTkxLDE1NiwxNjQsMTc3LDEwLDE4NSwxMyw2NiwzLDIxNywxNjYsMjQ0LDkwLDExOSwxMTEsMjcsMTQ1LDEwNCw3MSwxODksMTY2LDIyNiwyNTUsMTMzLDgzLDE1MSwyMzEsMTAxLDE1MSw4OSwyMiwxOSw2NSwxNTQsMTAsNTMsMjA4LDIxOCwyNTIsMjE5LDM3LDUwLDIxMiw4NiwxNDUsMTA3LDEzMiw5MCwyMzMsMjAyLDIyNywxMDgsMTE0LDE0MSwyOSw3MywxODcsMzEsMTMsMjM0LDAsMjMyLDI0LDE5MSwzNSwxNDksMTc5LDEzOCwyMTQsMTU5LDI0NSwxNjIsMTQ4LDIyMSwxMTgsMTcsMTA1LDg5LDE1MSwxNDYsMjA5LDU1LDIzNiw2MSwxNDMsMjMzLDIyOCwxMCwxMTUsOCw4MSwxOTcsNDUsMTIzLDE4NywyMjMsMTc2LDI1NCwxNjUsNjksMTQzLDI5LDEwMCwxMTQsMTcsMTMwLDIyNiwyMjMsMzMsMTEsMjQwLDgxLDYxLDE3MiwxOTEsMTU3LDI0NiwyMDIsODcsMTMxLDIyMSw4OCw0OCwxMjcsMTU5LDExOSwxNjAsMTUyLDExNyw2MSwyNTMsMTc0LDY1LDIxNCwyMDMsMjE4LDYzLDUwLDc4LDE2MCwxODEsMjIxLDIxMSwxMjgsNzAsMTc4LDE5MSwxNzAsMCwxMywxMjIsMTczLDEyLDIwMywyNTIsNCwxODQsMjI1LDI1Miw3LDYyLDk2LDExNiwxNSwyMTYsMTU4LDU1LDg1LDQ4LDE2LDksMjA2LDExOSw3NCwxMTIsMjQzLDEzNiw4NCwxODQsMjIzLDI1NCwxMDEsOTEsNjEsMTAsOTEsODUsMTkyLDE0NywxNDQsNTcsMjksNjYsMjM4LDE5OSwyNDQsMTkzLDE5NCwxNTAsMjMyLDIwMCwxMDcsMiwzLDEsMCwxLDIsMTMwLDEsMCwxMDMsMjQ0LDEzNywxMTgsMTE2LDgyLDE0LDIwMywxMDIsMTA3LDI1Myw4OCwxMiwxOTksMjIyLDYwLDI0MywxMzYsODYsMTU3LDc0LDIyNCwxOTAsNTMsMTEzLDU3LDE1NywyNTAsNDksMTMwLDk2LDMxLDI1MiwxMzYsMTUyLDcwLDE0MywxNywyMTUsOTYsMTAzLDUxLDE4LDM1LDE0MSwyMTIsMjEwLDIwNSw5LDIxNiw4Myw3MCwyNDUsNzEsMTM4LDExOSwxMTIsMjI5LDE2NCwxNzYsOSwzNyw4MSwxNjEsMTkzLDE1NCw2OCwyNDksMTE1LDEwNiwyMDEsNiwxMiwyMjUsMTQ0LDEyNiwxNDEsMjEwLDE0MSwyNDIsMTI4LDE1OSwyMjEsMTYzLDIyMiwyMSwyMzMsMjMwLDE2NywyMDYsNTksMjQsMjUwLDIzMyw4MSwxMjIsMTAyLDI2LDYsMjMzLDcyLDEzMyw0Nyw3NywxNTUsMjM4LDg2LDYsMTM5LDI0LDEzMSwxNjMsMTc5LDExMiw0OCwyNDcsMTQyLDYsMjA3LDIwNCwxNzMsMjIzLDE0MCwxOTksMTUwLDk1LDEyMywxNTIsMjAyLDE1NSwxMzEsMjM4LDYyLDk2LDEzMyw0LDIxNyw1MSwxMjEsMzAsMzgsMTc4LDE4OSwyMTYsNDQsMzUsMjQxLDkzLDcsNjIsOTAsMTExLDIxNiw2NiwyMDksMjQzLDEyOCwyMzQsMTQxLDg0LDEzNSwxODEsMTMsMzgsMjIwLDExNCwyNDUsMjQwLDE3OCw5NSwyMjAsMjA2LDExLDE4NiwyMzQsMjEzLDY2LDEyMSw4Myw2OCw4OSw3NSw0NiwxODMsMTQ1LDE4MywxNDcsMTYwLDIxNSwxMTgsMTk4LDEyNSwxODEsMTQ2LDMwLDI1MSw1OCw4Nyw0NywyMDksMjM3LDk3LDI0LDQ3LDE3OSw2LDExMCwyNDIsOTksMTUwLDIyNiwxNDgsMTk4LDE3NCwxNDYsMTAxLDIxMyw4NywxNzgsMTAsMjIzLDEwNSwxOCw1Niw1MywyMiwyMTIsMTU4LDE3MCwxNzYsNTEsODYsMTQ1LDEyNSwxMjQsNDQsOSw4NSwxOSwxNDQsMjQ2LDE3MCw3OCwxMjQsMzAsMzIsMTIsMTY2LDE3NCwxMzksNzcsNjMsMTczLDgyLDEwLDE1MywyLDEyOSwxMjksMCwyNDgsMTgsMTQzLDI0NiwxMzcsMTM2LDE0NSwyMTksMTc4LDM5LDI3LDk0LDY0LDkwLDQ3LDE2MywxMTQsNjAsNjMsMTg3LDEzMSwxNDMsMjQ0LDE2LDQyLDEyOCwyMzEsMTE3LDkyLDk4LDIxOSwxNTUsNjIsMTA3LDI1MiwxNywyNDUsNDUsMTYwLDIyNSwxMDMsMTQyLDcyLDM2LDE5MywxNTAsMjM1LDIxNCwxNzUsNjIsMjEyLDU2LDQ1LDksMCw2MCwxMTQsMTA3LDEzNCwyMjgsMjA0LDEzMSwxMzEsMjE0LDk0LDIwMSwxNDgsMTU5LDk5LDEzOSwxODEsMTMsMTE5LDM4LDMwLDEwNywxNjYsMTY1LDIwMyw0MywzNCwyMCwyMDcsMTcxLDMyLDU4LDE2Nyw2MiwxOTYsMTUzLDEwMywyMDQsMjEzLDI0Nyw0OCwxMTEsMjI3LDU5LDk1LDk3LDE5NCwxODcsNTMsMTAsMjQ3LDEwOCw1OCw4NiwyOCwyOSwxMTMsOCwxMTAsMTcxLDIyMCwyNDUsMTEsODIsMjMzLDIyMyw5MSw2OCwxNjYsMTE3LDE3NCwxODcsNjIsNzcsMiwxMjksMTI5LDAsMjM1LDExOCwyLDEwNSwyMzksMjEyLDMwLDEwNCwxNTcsNDEsMTA5LDExLDI0OCwxNTIsMjIsMjM2LDk3LDQwLDE1MywxMzEsMjI4LDUsODYsMTg3LDExMywxMjYsMTQ0LDc2LDE0MSw3OSwxMTAsMjUwLDE0NiwxNTIsNDksNTgsMTU2LDIwMSwxNzYsOTIsMTg5LDIwOSwzMCwxMTIsMTA4LDE3NSwyMDQsMjA0LDI0NywxNjQsNDYsMTI5LDIzOSw5OCwxMjcsNDksMTQ1LDIxOCw2MywxOTMsMTI0LDE3NCwxOCw5OCwyMDEsOTksMTU0LDE2MiwxMzgsNzgsMTU5LDI1MywzLDI0OCwzLDIwOSwzNiwyMzksMTkzLDE1NSwxOTMsNSwxOSwyMzYsMzcsNzgsMTE4LDEzNSwyNTAsMTk5LDcsMTQxLDI0OCwxMjAsMzYsMTM2LDkzLDk4LDE3NCw2MCwxOCwyMTUsOTMsMTc0LDEwNywxNDEsMTE2LDE0NSwxNjcsMjIxLDIxMCwxNjksMjQ3LDY3LDI1NCwyMjIsMTYxLDEzNCw2MywyMjEsOTAsODcsNDIsOTksMjI3LDgxLDE3MywxNTEsMiwxMjksMTI5LDAsMTMzLDIzLDE2OCwxMDMsODMsMjMyLDE0NiwxNjAsMTgxLDIzLDQwLDM4LDIwNCwxMywyMTQsMjAzLDQ5LDQxLDE5NSwyMjcsMTg5LDE4MSw4LDI0MywxMTksMTA2LDc1LDY3LDI1MCwyNTAsMTAsMjM0LDk4LDExOCwyNiwyNTAsMzUsMTIxLDEzMiwxMjQsMTAsNzYsMjYsMTk4LDE2NSwxNTQsMTA4LDE5LDExNyw4OCwyMywxNywxOTIsMTQzLDE4NCwxNzcsMTgxLDE0MSwxNTcsNCwxODUsMjQ4LDE5Myw3NywyMDQsMjQzLDcsMTcwLDI0MCw0LDExMSwxMTMsMTgzLDAsMjcsMTM2LDIwLDE5LDE0OSw3NCwzMywyNDEsMjE4LDEwOCwyMzYsODAsMTcxLDE0OCwxNiwxMTYsOTcsMTA5LDgzLDc0LDg4LDE0NSw5NCwyMzksMTAyLDE5MiwxOSwxMTQsMjA3LDUsMTI4LDUxLDExMSwxNjQsMjM3LDg2LDE1NCw5OSw1MiwxOTcsNjIsNTcsMTgyLDYsMTUyLDI0NSw2MSwxMzcsNTgsMTA1LDE1OSwyLDg0LDEwOSwyLDEyOSwxMjksMCwyMjYsNjcsMTExLDEzMiw5NSw5MSwxMDEsMTc3LDYzLDE4OSw0NCw1MywxOTMsMTg0LDkyLDIzMCwyMjMsOTgsMTMzLDc0LDIwOSw4Niw1Miw3LDY1LDE5NSwyMDYsMTAwLDgxLDE3OCwxNDQsNjUsMTY3LDE1MSw0Miw3OSw4OSwxNDksMTgsMTczLDE4OCwyMSwyNDQsMjUxLDQ5LDIzMCw0MSwxNTAsMTUzLDQ2LDM1LDM4LDIzMSw5OSwxNzQsNTYsMTE1LDMyLDIxNSwyNTMsODUsMTQ3LDEwOCwxOTcsMTQ3LDM0LDIzNiwyMTYsMjIyLDE3Nyw1Nyw5MCwxMzYsMTE0LDIwNyw0OCw0NiwzMSw5MCwyMjAsMTgsNTgsMTQzLDIzOSwxMTEsMjE0LDI3LDk1LDYsMzYsNTMsMjI5LDYyLDEwOCw0NSwzOSwxLDMwLDQ3LDE3OCw1NiwxNjQsMjA2LDU2LDQyLDIwOCw0NiwxOTMsNjEsMzEsMTQ3LDQ1LDE0NywyMywxODcsMjIsNTAsMjU1LDExMSwyMjksMTMyLDE5OSwxNTIsNzUsMTQyLDEzNiwyMDksMTUxLDIsMTI5LDEyOSwwLDE2NSw1NiwyMzIsNzYsNTUsNTcsMjQwLDE1OSw5MiwyMDcsMjIwLDE0MywxMzAsMzAsNTcsMjM0LDI1MSwxNzIsMTcxLDE4MCw1NCwxNTksMjI5LDk2LDI0Niw3MywxMTIsMTQ2LDc1LDE1NywyNDIsMjAxLDE2MSwyMTgsMzcsMTc2LDM1LDE3MCw1MCw5MCwxNDgsMTAyLDE5MSwxOTksMjM5LDE3NCw3OCw3Miw2Nyw4NSwxOTksNDUsMTQ5LDE0NSwxMzIsMTYxLDIxMiwzMywxNTcsNzUsMjE2LDc5LDM5LDIzMywxOCwyMTAsMjU1LDI2LDcyLDIyOSwyMzksNDQsMTIsMTQ3LDE1OCwxNzYsMTkyLDk1LDEyNiwzMiwxNzUsMjMsMjI2LDEzMSwxMzksMTk3LDE3NSwxOTMsNjIsOCwxNTEsMjUyLDY4LDE1NCw5NCw4OSwxODksMTI1LDkwLDMwLDM2LDE3NSw3MywyMzAsMTk0LDEzLDIzMywyNDcsMTIzLDYwLDI0MSw0NywxNzEsNTEsMTg5LDExMiwxMTEsMjEzLDE0MSw4OSw3MCwyNDksMjM2LDYzLDIzNiwxMTAsMTE1LDIwOF1cclxufSovXHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvbm9kZWpzLWlkcC9GYWtlTm9kZWpzUHJveHlTdHViLmlkcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("(function () {\n  \"use strict\";\n\n  function btoa(str) {\n    var buffer;\n\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = Buffer.from(str.toString(), 'binary');\n    }\n\n    return buffer.toString('base64');\n  }\n\n  module.exports = btoa;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2J0b2EvaW5kZXguanM/YjlhMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBmdW5jdGlvbiBidG9hKHN0cikge1xuICAgIHZhciBidWZmZXI7XG5cbiAgICBpZiAoc3RyIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICBidWZmZXIgPSBzdHI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHN0ci50b1N0cmluZygpLCAnYmluYXJ5Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZygnYmFzZTY0Jyk7XG4gIH1cblxuICBtb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2J0b2EvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction atob(str) {\n  return Buffer.from(str, 'base64').toString('binary');\n}\n\nmodule.exports = atob.atob = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2F0b2Ivbm9kZS1hdG9iLmpzPzM3NGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gYXRvYihzdHIpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN0ciwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdiaW5hcnknKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhdG9iLmF0b2IgPSBhdG9iO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2F0b2Ivbm9kZS1hdG9iLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);
});",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "34.60",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "57378b186a1ba1a7af6d8190014c85afc",
    "constraints": {
      "node": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar domain = 'rethink-project.eu';\n\n/**\n * Identity Provider Proxy Protocol Stub\n */\n\nvar IMSIWProxyStub = function () {\n\n\t/**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n\tfunction IMSIWProxyStub(runtimeProtoStubURL, bus, config) {\n\t\tvar _this2 = this;\n\n\t\t_classCallCheck(this, IMSIWProxyStub);\n\n\t\tthis.runtimeProtoStubURL = runtimeProtoStubURL;\n\t\tthis.messageBus = bus;\n\t\tthis.config = config;\n\n\t\tthis.messageBus.addListener('*', function (msg) {\n\t\t\t//TODO add the respective listener\n\t\t\tif (msg.to === 'domain-idp://' + domain) {\n\t\t\t\t_this2.requestToIdp(msg);\n\t\t\t}\n\t\t});\n\n\t\tthis._sendStatus('created');\n\t}\n\n\t_createClass(IMSIWProxyStub, [{\n\t\tkey: '_sendStatus',\n\t\tvalue: function _sendStatus(value, reason) {\n\t\t\tvar _this = this;\n\n\t\t\tconsole.log('[Slack Idp Proxy status changed] to ', value);\n\n\t\t\t_this._state = value;\n\n\t\t\tvar msg = {\n\t\t\t\ttype: 'update',\n\t\t\t\tfrom: _this.runtimeProtoStubURL,\n\t\t\t\tto: _this.runtimeProtoStubURL + '/status',\n\t\t\t\tbody: {\n\t\t\t\t\tvalue: value\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (reason) {\n\t\t\t\tmsg.body.desc = reason;\n\t\t\t}\n\n\t\t\t_this.messageBus.postMessage(msg);\n\t\t}\n\n\t\t/**\n   * Function that see the intended method in the message received and call the respective function\n   *\n   * @param {message}  message received in the messageBus\n   */\n\n\t}, {\n\t\tkey: 'requestToIdp',\n\t\tvalue: function requestToIdp(msg) {\n\t\t\tvar _this3 = this;\n\n\t\t\tvar params = msg.body.params;\n\n\t\t\tswitch (msg.body.method) {\n\t\t\t\tcase 'generateAssertion':\n\t\t\t\t\tthis.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n\t\t\t\t\t\treturn _this3.replyMessage(msg, value);\n\t\t\t\t\t}).catch(function (error) {\n\t\t\t\t\t\treturn _this3.replyMessage(msg, error);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'validateAssertion':\n\t\t\t\t\tthis.replyMessage(msg, { identity: 'identity@idp.com', contents: 'content' });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'generateAssertion',\n\t\tvalue: function generateAssertion(contents, origin, hint) {\n\t\t\tvar _this4 = this;\n\n\t\t\tconsole.log('contents->', contents);\n\t\t\tconsole.log('origin->', origin);\n\t\t\tconsole.log('hint->', hint);\n\n\t\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\t\t//the hint field contains the information obtained after the user authentication\n\t\t\t\t// if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n\t\t\t\tif (!hint) {\n\t\t\t\t\tvar requestUrl = 'https://accounts.google.com/o/oauth2/v2/auth?scope=email%20profile&state=%2Fprofile&redirect_uri=' + location.protocol + '//' + location.hostname + '&response_type=token&client_id=808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com';\n\t\t\t\t\tconsole.log('first url ', requestUrl, 'done');\n\t\t\t\t\treject({ name: 'IdPLoginError', loginUrl: requestUrl });\n\t\t\t\t} else {\n\t\t\t\t\tvar accessToken = _this4._urlParser(hint, 'access_token');\n\t\t\t\t\tvar expires = Math.floor(Date.now() / 1000) + _this4._urlParser(hint, 'expires_in');\n\t\t\t\t\tfetch('https://www.googleapis.com/oauth2/v1/userinfo?access_token=' + accessToken).then(function (res_user) {\n\t\t\t\t\t\treturn res_user.json();\n\t\t\t\t\t}).then(function (body) {\n\t\t\t\t\t\tvar infoToken = { picture: body.picture, email: body.email, family_name: body.family_name, given_name: body.given_name };\n\t\t\t\t\t\tvar assertion = btoa(JSON.stringify({ tokenID: accessToken, email: body.email, id: body.id }));\n\t\t\t\t\t\tvar toResolve = { info: { expires: expires }, assertion: assertion, idp: { domain: domain, protocol: 'OAuth 2.0' }, infoToken: infoToken, interworking: { access_token: accessToken, domain: domain } };\n\t\t\t\t\t\tconsole.log('RESOLVING THIS OBJECT', toResolve);\n\t\t\t\t\t\tresolve(toResolve);\n\t\t\t\t\t}).catch(reject);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: '_urlParser',\n\t\tvalue: function _urlParser(url, name) {\n\t\t\tname = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n\t\t\tvar regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n\t\t\tvar regex = new RegExp(regexS);\n\t\t\tvar results = regex.exec(url);\n\t\t\tif (results === null) return '';else return results[1];\n\t\t}\n\n\t\t/**\n   * This function receives a message and a value. It replies the value to the sender of the message received\n   *\n   * @param  {message}   message received\n   * @param  {value}     value to include in the new message to send\n   */\n\n\t}, {\n\t\tkey: 'replyMessage',\n\t\tvalue: function replyMessage(msg, value) {\n\t\t\tvar message = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { code: 200, value: value } };\n\n\t\t\tthis.messageBus.postMessage(message);\n\t\t}\n\t}]);\n\n\treturn IMSIWProxyStub;\n}();\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n\treturn {\n\t\tname: 'IMSIWProxyStub',\n\t\tinstance: new IMSIWProxyStub(url, bus, config)\n\t};\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NpcC5yZXRoaW5rLXByb2plY3QuZXUvSU1TSVdQcm94eVN0dWIuaWRwLmpzPzBlNTIiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJkb21haW4iLCJJTVNJV1Byb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJtZXNzYWdlQnVzIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwidmFsdWUiLCJyZWFzb24iLCJfdGhpcyIsImNvbnNvbGUiLCJsb2ciLCJfc3RhdGUiLCJ0eXBlIiwiZnJvbSIsImJvZHkiLCJkZXNjIiwicG9zdE1lc3NhZ2UiLCJwYXJhbXMiLCJtZXRob2QiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImNvbnRlbnRzIiwib3JpZ2luIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInJlcGx5TWVzc2FnZSIsImNhdGNoIiwiZXJyb3IiLCJpZGVudGl0eSIsImhpbnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlcXVlc3RVcmwiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJuYW1lIiwibG9naW5VcmwiLCJhY2Nlc3NUb2tlbiIsIl91cmxQYXJzZXIiLCJleHBpcmVzIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsImZldGNoIiwicmVzX3VzZXIiLCJqc29uIiwiaW5mb1Rva2VuIiwicGljdHVyZSIsImVtYWlsIiwiZmFtaWx5X25hbWUiLCJnaXZlbl9uYW1lIiwiYXNzZXJ0aW9uIiwiYnRvYSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b2tlbklEIiwiaWQiLCJ0b1Jlc29sdmUiLCJpbmZvIiwiaWRwIiwiaW50ZXJ3b3JraW5nIiwiYWNjZXNzX3Rva2VuIiwidXJsIiwicmVwbGFjZSIsInJlZ2V4UyIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJt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WUFBWTlCLElBQVosR0FBbUIsV0FBaEM7QUFDQSxPQUFJK0IsUUFBUSxJQUFJQyxNQUFKLENBQVdGLE1BQVgsQ0FBWjtBQUNBLE9BQUlHLFVBQVVGLE1BQU1HLElBQU4sQ0FBV04sR0FBWCxDQUFkO0FBQ0EsT0FBSUssWUFBWSxJQUFoQixFQUNDLE9BQU8sRUFBUCxDQURELEtBR0MsT0FBT0EsUUFBUSxDQUFSLENBQVA7QUFDRDs7QUFFRDs7Ozs7Ozs7OytCQU1hbkUsRyxFQUFLSSxLLEVBQU87QUFDeEIsT0FBSWlFLFVBQVUsRUFBQ2IsSUFBSXhELElBQUl3RCxFQUFULEVBQWE5QyxNQUFNLFVBQW5CLEVBQStCVCxJQUFJRCxJQUFJVyxJQUF2QyxFQUE2Q0EsTUFBTVgsSUFBSUMsRUFBdkQsRUFBMkRXLE1BQU0sRUFBQzBELE1BQU0sR0FBUCxFQUFZbEUsT0FBT0EsS0FBbkIsRUFBakUsRUFBZDs7QUFFQSxRQUFLTixVQUFMLENBQWdCZ0IsV0FBaEIsQ0FBNEJ1RCxPQUE1QjtBQUNBOzs7Ozs7QUFHRjs7Ozs7Ozs7O0FBT2UsU0FBUzdFLFFBQVQsQ0FBa0JzRSxHQUFsQixFQUF1QmxFLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNsRCxRQUFPO0FBQ05xQyxRQUFNLGdCQURBO0FBRU5xQyxZQUFVLElBQUk3RSxjQUFKLENBQW1Cb0UsR0FBbkIsRUFBd0JsRSxHQUF4QixFQUE2QkMsTUFBN0I7QUFGSixFQUFQO0FBSUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBkb21haW4gPSAncmV0aGluay1wcm9qZWN0LmV1J1xuXG4vKipcbiAqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiAqL1xuY2xhc3MgSU1TSVdQcm94eVN0dWIge1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuXHQgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxuXHQgKlxuXHQgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcblx0ICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG5cdCAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuXHQgKi9cblx0Y29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcblx0XHR0aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMXG5cdFx0dGhpcy5tZXNzYWdlQnVzID0gYnVzXG5cdFx0dGhpcy5jb25maWcgPSBjb25maWdcblxuXHRcdHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIG1zZyA9PiB7XG5cdFx0XHQvL1RPRE8gYWRkIHRoZSByZXNwZWN0aXZlIGxpc3RlbmVyXG5cdFx0XHRpZiAobXNnLnRvID09PSBgZG9tYWluLWlkcDovLyR7ZG9tYWlufWApIHtcblx0XHRcdFx0dGhpcy5yZXF1ZXN0VG9JZHAobXNnKVxuXHRcdFx0fVxuXHRcdH0pXG5cblx0XHR0aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJylcblx0fVxuXG5cdF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcblx0XHRsZXQgX3RoaXMgPSB0aGlzXG5cblx0XHRjb25zb2xlLmxvZygnW1NsYWNrIElkcCBQcm94eSBzdGF0dXMgY2hhbmdlZF0gdG8gJywgdmFsdWUpXG5cblx0XHRfdGhpcy5fc3RhdGUgPSB2YWx1ZVxuXG5cdFx0bGV0IG1zZyA9IHtcblx0XHRcdHR5cGU6ICd1cGRhdGUnLFxuXHRcdFx0ZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcblx0XHRcdHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxuXHRcdFx0Ym9keToge1xuXHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAocmVhc29uKSB7XG5cdFx0XHRtc2cuYm9keS5kZXNjID0gcmVhc29uXG5cdFx0fVxuXG5cdFx0X3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpXG5cdH1cblxuXHQvKipcblx0ICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuXHQgKlxuXHQgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG5cdCAqL1xuXHRyZXF1ZXN0VG9JZHAobXNnKSB7XG5cdFx0bGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtc1xuXG5cdFx0c3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcblx0XHRjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XG5cdFx0XHR0aGlzLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludClcblx0XHRcdFx0LnRoZW4odmFsdWUgPT4gdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkpXG5cdFx0XHRcdC5jYXRjaChlcnJvciA9PiB0aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKSlcblx0XHRcdGJyZWFrXG5cdFx0Y2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuXHRcdFx0dGhpcy5yZXBseU1lc3NhZ2UobXNnLCB7aWRlbnRpdHk6ICdpZGVudGl0eUBpZHAuY29tJywgY29udGVudHM6ICdjb250ZW50J30pXG5cdFx0XHRicmVha1xuXHRcdGRlZmF1bHQ6XG5cdFx0XHRicmVha1xuXHRcdH1cblx0fVxuXG5cdGdlbmVyYXRlQXNzZXJ0aW9uIChjb250ZW50cywgb3JpZ2luLCBoaW50KSAge1xuXG5cdFx0Y29uc29sZS5sb2coJ2NvbnRlbnRzLT4nLCBjb250ZW50cylcblx0XHRjb25zb2xlLmxvZygnb3JpZ2luLT4nLCBvcmlnaW4pXG5cdFx0Y29uc29sZS5sb2coJ2hpbnQtPicsIGhpbnQpXG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG5cdFx0XHQvL3RoZSBoaW50IGZpZWxkIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBvYnRhaW5lZCBhZnRlciB0aGUgdXNlciBhdXRoZW50aWNhdGlvblxuXHRcdFx0Ly8gaWYgdGhlIGhpbnQgY29udGVudCBpcyBub3QgcHJlc2VudCwgdGhlbiByZWplY3RzIHRoZSB2YWx1ZSB3aXRoIHRoZSBVUkwgdG8gb3BlbiB0aGUgcGFnZSB0byBhdXRoZW50aWNhdGUgdGhlIHVzZXJcblx0XHRcdGlmICghaGludCkge1xuXHRcdFx0XHRsZXQgcmVxdWVzdFVybCA9YGh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoP3Njb3BlPWVtYWlsJTIwcHJvZmlsZSZzdGF0ZT0lMkZwcm9maWxlJnJlZGlyZWN0X3VyaT0ke2xvY2F0aW9uLnByb3RvY29sfS8vJHtsb2NhdGlvbi5ob3N0bmFtZX0mcmVzcG9uc2VfdHlwZT10b2tlbiZjbGllbnRfaWQ9ODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tYFxuXHRcdFx0XHRjb25zb2xlLmxvZygnZmlyc3QgdXJsICcsIHJlcXVlc3RVcmwsICdkb25lJylcblx0XHRcdFx0cmVqZWN0KHtuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsfSlcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxldCBhY2Nlc3NUb2tlbiA9IHRoaXMuX3VybFBhcnNlcihoaW50LCAnYWNjZXNzX3Rva2VuJylcblx0XHRcdFx0bGV0IGV4cGlyZXMgPSBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKSArIHRoaXMuX3VybFBhcnNlcihoaW50LCAnZXhwaXJlc19pbicpXG5cdFx0XHRcdGZldGNoKGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvdXNlcmluZm8/YWNjZXNzX3Rva2VuPSR7YWNjZXNzVG9rZW59YClcblx0XHRcdFx0XHQudGhlbihyZXNfdXNlciA9PiByZXNfdXNlci5qc29uKCkpXG5cdFx0XHRcdFx0LnRoZW4oYm9keSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgaW5mb1Rva2VuID0ge3BpY3R1cmU6IGJvZHkucGljdHVyZSwgZW1haWw6IGJvZHkuZW1haWwsIGZhbWlseV9uYW1lOiBib2R5LmZhbWlseV9uYW1lLCBnaXZlbl9uYW1lOiBib2R5LmdpdmVuX25hbWV9XG5cdFx0XHRcdFx0XHRsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogYWNjZXNzVG9rZW4sIGVtYWlsOiBib2R5LmVtYWlsLCBpZDogYm9keS5pZH0pKVxuXHRcdFx0XHRcdFx0bGV0IHRvUmVzb2x2ZSA9IHtpbmZvOiB7IGV4cGlyZXM6IGV4cGlyZXMgfSwgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDoge2RvbWFpbjogZG9tYWluLCBwcm90b2NvbDogJ09BdXRoIDIuMCd9LCBpbmZvVG9rZW46IGluZm9Ub2tlbiwgaW50ZXJ3b3JraW5nOiB7YWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbiwgZG9tYWluOiBkb21haW4gfX1cblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdSRVNPTFZJTkcgVEhJUyBPQkpFQ1QnLCB0b1Jlc29sdmUpXG5cdFx0XHRcdFx0XHRyZXNvbHZlKHRvUmVzb2x2ZSlcblx0XHRcdFx0XHR9KS5jYXRjaChyZWplY3QpXG5cdFx0XHR9XG5cdFx0fSlcblx0fVxuXG5cdF91cmxQYXJzZXIodXJsLCBuYW1lKSB7XG5cdFx0bmFtZSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFxcWycpLnJlcGxhY2UoL1tcXF1dLywgJ1xcXFxcXF0nKVxuXHRcdGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJ1xuXHRcdGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKVxuXHRcdGxldCByZXN1bHRzID0gcmVnZXguZXhlYyh1cmwpXG5cdFx0aWYgKHJlc3VsdHMgPT09IG51bGwpXG5cdFx0XHRyZXR1cm4gJydcblx0XHRlbHNlXG5cdFx0XHRyZXR1cm4gcmVzdWx0c1sxXVxuXHR9XG5cblx0LyoqXG5cdCAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG5cdCAqXG5cdCAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuXHQgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcblx0ICovXG5cdHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XG5cdFx0bGV0IG1lc3NhZ2UgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZX19XG5cblx0XHR0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSlcblx0fVxufVxuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuXHRyZXR1cm4ge1xuXHRcdG5hbWU6ICdJTVNJV1Byb3h5U3R1YicsXG5cdFx0aW5zdGFuY2U6IG5ldyBJTVNJV1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuXHR9XG59XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvc2lwLnJldGhpbmstcHJvamVjdC5ldS9JTVNJV1Byb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "33.00",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "constraints": {
      "browser": true,
      "onlyAccessToken": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = activate;\n\nvar _OAUTH = __webpack_require__(1);\n\nvar _Slack = __webpack_require__(2);\n\nvar _AbstractIdpProxyStub = __webpack_require__(3);\n\nvar _AbstractIdpProxyStub2 = _interopRequireDefault(_AbstractIdpProxyStub);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\n* Slack Identity Provider Proxy Protocol Stub\n*/\nvar SlackProxyStub = function (_AbstractIdpProxyProt) {\n  _inherits(SlackProxyStub, _AbstractIdpProxyProt);\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function SlackProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, SlackProxyStub);\n\n    config.idpUrl = 'domain-idp://slack.com';\n    config.idpProxy = _OAUTH.IdpProxy;\n    //     config.idpInfo = slackInfo;\n    config.domain = 'slack.com';\n    config.convertUserProfile = _Slack.convertUserProfile;\n    config.userInfoEndpoint = _Slack.userInfoEndpoint;\n    config.validateAssertionEndpoint = _Slack.validateAssertionEndpoint;\n    config.authorisationEndpoint = _Slack.authorisationEndpoint;\n    config.tokenEndpoint = _Slack.tokenEndpoint;\n    config.accessTokenAuthorisationEndpoint = _Slack.accessTokenAuthorisationEndpoint;\n    config.accessTokenEndpoint = _Slack.accessTokenEndpoint;\n    config.accessTokenInput = _Slack.accessTokenInput;\n    return _possibleConstructorReturn(this, (SlackProxyStub.__proto__ || Object.getPrototypeOf(SlackProxyStub)).call(this, runtimeProtoStubURL, bus, config));\n  }\n\n  return SlackProxyStub;\n}(_AbstractIdpProxyStub2.default);\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'SlackProxyStub',\n    instance: new SlackProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NsYWNrL1NsYWNrUHJveHlTdHViLmlkcC5qcz8xNGYyIl0sIm5hbWVzIjpbImFjdGl2YXRlIiwiU2xhY2tQcm94eVN0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiaWRwVXJsIiwiaWRwUHJveHkiLCJJZHBQcm94eSIsImRvbWFpbiIsImNvbnZlcnRVc2VyUHJvZmlsZSIsInVzZXJJbmZvRW5kcG9pbnQiLCJ2YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50IiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidG9rZW5FbmRwb2ludCIsImFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5FbmRwb2ludCIsImFjY2Vzc1Rva2VuSW5wdXQiLCJBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIiwidXJsIiwibmFtZSIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7OztrQkE4QzBCQSxROztBQTlDMUI7O0FBQ0E7O0FBSUE7Ozs7Ozs7Ozs7OztBQUVBOzs7SUFHTUMsYzs7O0FBRUY7Ozs7Ozs7O0FBUUQsMEJBQVlDLG1CQUFaLEVBQWlDQyxHQUFqQyxFQUFzQ0MsTUFBdEMsRUFBOEM7QUFBQTs7QUFDNUNBLFdBQU9DLE1BQVAsR0FBZ0Isd0JBQWhCO0FBQ0FELFdBQU9FLFFBQVAsR0FBa0JDLGVBQWxCO0FBQ0w7QUFDS0gsV0FBT0ksTUFBUCxHQUFnQixXQUFoQjtBQUNBSixXQUFPSyxrQkFBUCxHQUE0QkEseUJBQTVCO0FBQ0FMLFdBQU9NLGdCQUFQLEdBQTBCQSx1QkFBMUI7QUFDQU4sV0FBT08seUJBQVAsR0FBbUNBLGdDQUFuQztBQUNBUCxXQUFPUSxxQkFBUCxHQUErQkEsNEJBQS9CO0FBQ0FSLFdBQU9TLGFBQVAsR0FBdUJBLG9CQUF2QjtBQUNBVCxXQUFPVSxnQ0FBUCxHQUEwQ0EsdUNBQTFDO0FBQ0FWLFdBQU9XLG1CQUFQLEdBQTZCQSwwQkFBN0I7QUFDQVgsV0FBT1ksZ0JBQVAsR0FBMEJBLHVCQUExQjtBQVo0QywySEFhdENkLG1CQWJzQyxFQWFqQkMsR0FiaUIsRUFhWkMsTUFiWTtBQWM3Qzs7O0VBeEJ5QmEsOEI7O0FBMkIzQjs7QUFFQTs7Ozs7Ozs7O0FBT2UsU0FBU2pCLFFBQVQsQ0FBa0JrQixHQUFsQixFQUF1QmYsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTGUsVUFBTSxnQkFERDtBQUVMQyxjQUFVLElBQUluQixjQUFKLENBQW1CaUIsR0FBbkIsRUFBd0JmLEdBQXhCLEVBQTZCQyxNQUE3QjtBQUZMLEdBQVA7QUFJRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJZHBQcm94eX0gZnJvbSBcIi4uL09BVVRIXCJcbmltcG9ydCB7Y29udmVydFVzZXJQcm9maWxlLCB1c2VySW5mb0VuZHBvaW50LCBcbiAgYXV0aG9yaXNhdGlvbkVuZHBvaW50LCB0b2tlbkVuZHBvaW50LCBcbiAgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQsIFxuICBhY2Nlc3NUb2tlbkVuZHBvaW50LCBhY2Nlc3NUb2tlbklucHV0LCB2YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50fSBmcm9tIFwiLi9TbGFja1wiXG5pbXBvcnQgQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YiBmcm9tIFwiLi4vQWJzdHJhY3RJZHBQcm94eVN0dWJcIlxuXG4vKipcbiogU2xhY2sgSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxuKi9cbmNsYXNzIFNsYWNrUHJveHlTdHViIGV4dGVuZHMgQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YiB7XG4gIFxuICAgIC8qKlxuICAgICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXG4gICAgKlxuICAgICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICAgICovXG4gICBjb25zdHJ1Y3RvcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xuICAgICBjb25maWcuaWRwVXJsID0gJ2RvbWFpbi1pZHA6Ly9zbGFjay5jb20nO1xuICAgICBjb25maWcuaWRwUHJveHkgPSBJZHBQcm94eTtcbi8vICAgICBjb25maWcuaWRwSW5mbyA9IHNsYWNrSW5mbztcbiAgICAgY29uZmlnLmRvbWFpbiA9ICdzbGFjay5jb20nO1xuICAgICBjb25maWcuY29udmVydFVzZXJQcm9maWxlID0gY29udmVydFVzZXJQcm9maWxlO1xuICAgICBjb25maWcudXNlckluZm9FbmRwb2ludCA9IHVzZXJJbmZvRW5kcG9pbnQ7XG4gICAgIGNvbmZpZy52YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50ID0gdmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludDtcbiAgICAgY29uZmlnLmF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGF1dGhvcmlzYXRpb25FbmRwb2ludDtcbiAgICAgY29uZmlnLnRva2VuRW5kcG9pbnQgPSB0b2tlbkVuZHBvaW50O1xuICAgICBjb25maWcuYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDtcbiAgICAgY29uZmlnLmFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBhY2Nlc3NUb2tlbkVuZHBvaW50O1xuICAgICBjb25maWcuYWNjZXNzVG9rZW5JbnB1dCA9IGFjY2Vzc1Rva2VuSW5wdXQ7XG4gICAgIHN1cGVyKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKTtcbiAgIH1cbiAgfVxuICBcbiAgLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG4gIFxuICAvKipcbiAgICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxuICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXG4gICAqL1xuICBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhY3RpdmF0ZSh1cmwsIGJ1cywgY29uZmlnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdTbGFja1Byb3h5U3R1YicsXG4gICAgICBpbnN0YW5jZTogbmV3IFNsYWNrUHJveHlTdHViKHVybCwgYnVzLCBjb25maWcpXG4gICAgfTtcbiAgfVxuICBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NsYWNrL1NsYWNrUHJveHlTdHViLmlkcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n//let identities = {};\n//let nIdentity = 0;\n//let redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\nvar userInfoEndpoint = void 0;\nvar tokenEndpoint = void 0;\nvar authorisationEndpoint = void 0;\nvar domain = void 0;\nvar accessTokenEndpoint = void 0;\nvar accessTokenAuthorisationEndpoint = void 0;\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\nvar exchangeRefreshToken = function exchangeRefreshToken(refreshToken) {\n  var i = googleInfo;\n\n  var URL = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + refreshToken + '&grant_type=refresh_token';\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar generateAssertionWithAccessToken = function generateAssertionWithAccessToken(contents, expires, info) {\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('GET', userInfoEndpoint(info)).then(function (infoToken) {\n      console.log('[OAUTH2.generateAssertion] obtained user profile ', infoToken);\n\n      var assertion = btoa(JSON.stringify({ tokenID: info.access_token, tokenIDJSON: infoToken, publicKey: contents }));\n      console.log('[OAUTH2.generateAssertion] atob assertion:', atob(assertion));\n      var idpBundle = { domain: domain, protocol: 'OAUTH2' };\n\n      //TODO delete later the field infoToken, and delete the need in the example\n      var returnValue = { assertion: assertion, idp: idpBundle, expires: expires, userProfile: infoToken };\n\n      /*      identities[nIdentity] = returnValue;\n            ++nIdentity;\n      */\n      console.log('[OAUTH2.generateAssertion] returning: ', JSON.stringify(returnValue));\n\n      resolve(returnValue);\n    });\n  });\n};\n\nvar generateAssertionWithCodeToken = function generateAssertionWithCodeToken(contents, expires, hint) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(hint, 'code');\n\n    if (!code) reject('[OAUTH2.generateAssertionWithCode] code not returned by the authentication: ', hint);\n\n    sendHTTPRequest('POST', tokenEndpoint(code)).then(function (info) {\n\n      if (info.hasOwnProperty('access_token')) resolve(generateAssertionWithAccessToken(contents, expires, info));else reject('[OAUTH2.generateAssertionWithCode] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar getAccessTokenWithCodeToken = function getAccessTokenWithCodeToken(resources, login) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(login, 'code');\n\n    if (!code) reject('[OAUTH2.getAccessTokenWithCodeToken] code not returned by the login result: ', login);\n\n    sendHTTPRequest('POST', accessTokenEndpoint(code)).then(function (info) {\n\n      if (info.hasOwnProperty('access_token')) {\n        var expires = getExpires(info);\n        resolve(accessTokenResult(resources, info.access_token, expires, info));\n      } else reject('[OAUTH2.getAccessTokenWithCodeToken] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar getExpires = exports.getExpires = function getExpires(url) {\n  var expires = urlParser(url, 'expires_in');\n\n  if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n  return expires;\n};\n\nvar accessTokenResult = function accessTokenResult(resources, accessToken, expires, input, refresh) {\n\n  var result = { domain: domain, resources: resources, accessToken: accessToken, expires: expires, input: input };\n\n  if (refresh) result.refresh = refresh;\n\n  return result;\n};\n\n/**\n* Identity Provider Proxy\n*/\nvar IdpProxy = exports.IdpProxy = {\n\n  /**\n  * Function to validate an identity Assertion received\n  * TODO add details of the implementation, and improve the implementation\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {assertion}    Identity Assertion to be validated\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\n  * @return {Promise}      Returns a promise with the identity assertion validation result\n  */\n  validateAssertion: function validateAssertion(config, assertion, origin) {\n    console.info('[OAUTH2.validateAssertion] assertion: ', atob(assertion));\n    userInfoEndpoint = config.userInfoEndpoint;\n    domain = config.domain;\n\n    return new Promise(function (resolve, reject) {\n      //      let i = idpInfo;\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      sendHTTPRequest('GET', config.validateAssertionEndpoint({ access_token: content.tokenID, input: content.tokenIDJSON })).then(function (result) {\n        if (JSON.stringify(result) === JSON.stringify(content.tokenIDJSON)) {\n          //        if (result.hasOwnProperty('name')) {\n          resolve({ identity: config.convertUserProfile(result).id, contents: content.publicKey });\n        } else {\n          reject('invalid');\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n  /*\n    refreshAssertion: (identity) => {\n      //console.log('PROXY:refreshAssertion:oldIdentity', identity);\n      let i = googleInfo;\n  \n      return new Promise(function(resolve, reject) {\n        if (identity.info.refreshToken) {\n          exchangeRefreshToken(identity.info.refreshToken).then(function(value) {\n            let infoTokenURL = i.userinfo + value.access_token;\n            sendHTTPRequest('GET', infoTokenURL).then(function(infoToken) {\n  \n              let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: identity.info.refreshToken, tokenType: identity.info.tokenType, infoToken: infoToken};\n              let idTokenURL = i.tokenInfo + value.id_token;\n  \n              //obtain information about the user idToken\n              sendHTTPRequest('GET', idTokenURL).then(function(idToken) {\n  \n                identityBundle.tokenIDJSON = idToken;\n                identityBundle.expires = idToken.exp;\n                identityBundle.email = idToken.email;\n  \n                let oldIDToken = JSON.parse(atob(identity.assertion));\n                let oldIdTokenSplited = oldIDToken.tokenID.split('.');\n                let oldDecodedIDToken = JSON.parse(atob(oldIdTokenSplited[1]));\n                let idNonce = oldDecodedIDToken.nonce;\n  \n                let receivedIDToken = value.id_token;\n                let idTokenSplited = receivedIDToken.split('.');\n                let decodedIDToken = JSON.parse(atob(idTokenSplited[1]));\n  \n                decodedIDToken.nonce = idNonce;\n                let insertedNonce = btoa(JSON.stringify(decodedIDToken));\n                let newIDToken = idTokenSplited[0] + '.' +\n                                   insertedNonce + '.' +\n                                   idTokenSplited[2];\n  \n                let assertion = btoa(JSON.stringify({tokenID: newIDToken, tokenIDJSON: idToken}));\n                let idpBundle = {domain: 'google.com', protocol: 'OIDC'};\n  \n                //TODO delete later the field infoToken, and delete the need in the example\n                let returnValue = {assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken};\n                //console.log('PROXY:refreshAssertion:newIdentity', returnValue);\n                resolve(returnValue);\n              });\n            });\n          });\n        }\n      });\n    },*/\n\n  /**\n  * Function to generate an identity Assertion\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {usernameHint} optional usernameHint parameter\n  * @return {Promise} returns a promise with an identity assertion\n  */\n  generateAssertion: function generateAssertion(config, contents, origin, hint) {\n    console.log('[OAUTH2.generateAssertion:config]', config);\n    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.generateAssertion:hint]', hint);\n    //    let i = idpInfo;\n    userInfoEndpoint = config.userInfoEndpoint;\n    tokenEndpoint = config.tokenEndpoint;\n    authorisationEndpoint = config.authorisationEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n\n        //        console.log('[OAUTH2.generateAssertion] NO_HINT: rejecting with requestUrl ', requestUrl);\n\n        reject({ name: 'IdPLoginError', loginUrl: authorisationEndpoint(contents) });\n      } else {\n        // the request have already been made, so idpPRoxy will try to access the user information\n        var expires = urlParser(hint, 'expires_in');\n\n        if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n        var accessToken = urlParser(hint, 'access_token');\n\n        if (accessToken) resolve(generateAssertionWithAccessToken(contents, expires, { access_token: accessToken }));else resolve(generateAssertionWithCodeToken(contents, expires, hint));\n      }\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\n  * Function to get an Access Token\n  *\n  * @param  {config}      Object information about IdP endpoints\n  * @param  {resources} Object contents includes information about the identity received\n  * @return {Promise} returns a promise with an identity assertion\n  */\n\n  getAccessTokenAuthorisationEndpoint: function getAccessTokenAuthorisationEndpoint(config, resources) {\n    console.log('[OAUTH2.getAccessTokenAuthorisationEndpoint:config]', config);\n    //    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    //    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.getAccessTokenAuthorisationEndpoint:resources]', resources);\n    //    let i = idpInfo;\n    accessTokenAuthorisationEndpoint = config.accessTokenAuthorisationEndpoint;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n\n      resolve(accessTokenAuthorisationEndpoint(resources));\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\n  * Function to get an Access Token\n  *\n  * @param  {idpInfo}      Object information about IdP endpoints\n  * @param  {contents} The contents includes information about the identity received\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\n  * @param  {login} optional login result\n  * @return {Promise} returns a promise with an identity assertion\n  */\n\n  getAccessToken: function getAccessToken(config, resources, login) {\n    console.log('[OAUTH2.getAccessToken:config]', config);\n    //    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    //    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.getAccessToken:login]', login);\n    //    let i = idpInfo;\n    accessTokenEndpoint = config.accessTokenEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // the user is loggedin, try to extract the Access Token and its expires\n      var expires = getExpires(login);\n\n      var accessToken = urlParser(login, 'access_token');\n\n      if (accessToken) resolve(accessTokenResult(resources, accessToken, expires, login));else resolve(getAccessTokenWithCodeToken(resources, login));\n    }, function (e) {\n\n      reject(e);\n    });\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L09BVVRILmpzPzYyODAiXSwibmFtZXMiOlsidXNlckluZm9FbmRwb2ludCIsInRva2VuRW5kcG9pbnQiLCJhdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJkb21haW4iLCJhY2Nlc3NUb2tlbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJ1cmxQYXJzZXIiLCJ1cmwiLCJuYW1lIiwicmVwbGFjZSIsInJlZ2V4UyIsInJlZ2V4IiwiUmVnRXhwIiwicmVzdWx0cyIsImV4ZWMiLCJzZW5kSFRUUFJlcXVlc3QiLCJtZXRob2QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJYRG9tYWluUmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiZSIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJpbmZvIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0Iiwic2VuZCIsImV4Y2hhbmdlUmVmcmVzaFRva2VuIiwicmVmcmVzaFRva2VuIiwiaSIsImdvb2dsZUluZm8iLCJVUkwiLCJjbGllbnRJRCIsImNsaWVudFNlY3JldCIsInRoZW4iLCJlcnJvciIsImdlbmVyYXRlQXNzZXJ0aW9uV2l0aEFjY2Vzc1Rva2VuIiwiY29udGVudHMiLCJleHBpcmVzIiwiaW5mb1Rva2VuIiwiY29uc29sZSIsImxvZyIsImFzc2VydGlvbiIsImJ0b2EiLCJzdHJpbmdpZnkiLCJ0b2tlbklEIiwiYWNjZXNzX3Rva2VuIiwidG9rZW5JREpTT04iLCJwdWJsaWNLZXkiLCJhdG9iIiwiaWRwQnVuZGxlIiwicHJvdG9jb2wiLCJyZXR1cm5WYWx1ZSIsImlkcCIsInVzZXJQcm9maWxlIiwiZ2VuZXJhdGVBc3NlcnRpb25XaXRoQ29kZVRva2VuIiwiaGludCIsImNvZGUiLCJoYXNPd25Qcm9wZXJ0eSIsImdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbiIsInJlc291cmNlcyIsImxvZ2luIiwiZ2V0RXhwaXJlcyIsImFjY2Vzc1Rva2VuUmVzdWx0IiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsImFjY2Vzc1Rva2VuIiwiaW5wdXQiLCJyZWZyZXNoIiwicmVzdWx0IiwiSWRwUHJveHkiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImNvbmZpZyIsIm9yaWdpbiIsImRlY29kZWRDb250ZW50IiwiY29udGVudCIsInZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQiLCJpZGVudGl0eSIsImNvbnZlcnRVc2VyUHJvZmlsZSIsImlkIiwiY2F0Y2giLCJlcnIiLCJnZW5lcmF0ZUFzc2VydGlvbiIsIl90aGlzIiwibG9naW5VcmwiLCJnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCIsImdldEFjY2Vzc1Rva2VuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQSx5QkFBSjtBQUNBLElBQUlDLHNCQUFKO0FBQ0EsSUFBSUMsOEJBQUo7QUFDQSxJQUFJQyxlQUFKO0FBQ0EsSUFBSUMsNEJBQUo7QUFDQSxJQUFJQyx5Q0FBSjs7QUFFQTtBQUNBLFNBQVNDLFNBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCQyxJQUF4QixFQUE4QjtBQUM1QkEsU0FBT0EsS0FBS0MsT0FBTCxDQUFhLE1BQWIsRUFBcUIsTUFBckIsRUFBNkJBLE9BQTdCLENBQXFDLE1BQXJDLEVBQTZDLE1BQTdDLENBQVA7QUFDQSxNQUFJQyxTQUFTLFlBQVlGLElBQVosR0FBbUIsV0FBaEM7QUFDQSxNQUFJRyxRQUFRLElBQUlDLE1BQUosQ0FBV0YsTUFBWCxDQUFaO0FBQ0EsTUFBSUcsVUFBVUYsTUFBTUcsSUFBTixDQUFXUCxHQUFYLENBQWQ7QUFDQSxNQUFJTSxZQUFZLElBQWhCLEVBQ0UsT0FBTyxFQUFQLENBREYsS0FHRSxPQUFPQSxRQUFRLENBQVIsQ0FBUDtBQUNIOztBQUVELFNBQVNFLGVBQVQsQ0FBeUJDLE1BQXpCLEVBQWlDVCxH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QUFDQSxVQUFJcUIsVUFBVXdCLFdBQVdELEtBQVgsQ0FBZDs7QUFFQSxVQUFJTyxjQUFjcEUsVUFBVTZELEtBQVYsRUFBaUIsY0FBakIsQ0FBbEI7O0FBRUEsVUFBSU8sV0FBSixFQUFpQnBELFFBQVMrQyxrQkFBa0JILFNBQWxCLEVBQTZCUSxXQUE3QixFQUEwQzlCLE9BQTFDLEVBQW1EdUIsS0FBbkQsQ0FBVCxFQUFqQixLQUNLN0MsUUFBUzJDLDRCQUE0QkMsU0FBNUIsRUFBdUNDLEtBQXZDLENBQVQ7QUFDUixLQVJNLEVBUUosVUFBVTFDLENBQVYsRUFBYTs7QUFFZEYsYUFBT0UsQ0FBUDtBQUNELEtBWE0sQ0FBUDtBQVlEOztBQTlMbUIsQ0FBZiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vL2xldCBpZGVudGl0aWVzID0ge307XG4vL2xldCBuSWRlbnRpdHkgPSAwO1xuLy9sZXQgcmVkaXJlY3RVUkkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICE9PSAnJyA/ICc6JyArIGxvY2F0aW9uLnBvcnQgOiAnJyk7XG5sZXQgdXNlckluZm9FbmRwb2ludDtcbmxldCB0b2tlbkVuZHBvaW50O1xubGV0IGF1dGhvcmlzYXRpb25FbmRwb2ludDtcbmxldCBkb21haW47XG5sZXQgYWNjZXNzVG9rZW5FbmRwb2ludDtcbmxldCBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDtcblxuLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzXG5mdW5jdGlvbiB1cmxQYXJzZXIodXJsLCBuYW1lKSB7XG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXFxdJyk7XG4gIGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJztcbiAgbGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpO1xuICBsZXQgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcbiAgaWYgKHJlc3VsdHMgPT09IG51bGwpXG4gICAgcmV0dXJuICcnO1xuICBlbHNlXG4gICAgcmV0dXJuIHJlc3VsdHNbMV07XG59XG5cbmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkge1xuICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHtcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpZiBYRG9tYWluUmVxdWVzdC5cbiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLlxuICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPdGhlcndpc2UsIENPUlMgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci5cbiAgICB4aHIgPSBudWxsO1xuICB9XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKHhocikge1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgIGxldCBpbmZvID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIHJlc29sdmUoaW5mbyk7XG4gICAgICAgICAgfSBlbHNlIGlmICh4aHIuc3RhdHVzID09PSA0MDApIHtcbiAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnc29tZXRoaW5nIGVsc2Ugb3RoZXIgdGhhbiAyMDAgd2FzIHJldHVybmVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgeGhyLnNlbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVqZWN0KCdDT1JTIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG5sZXQgZXhjaGFuZ2VSZWZyZXNoVG9rZW4gPSAoZnVuY3Rpb24gKHJlZnJlc2hUb2tlbikge1xuICBsZXQgaSA9IGdvb2dsZUluZm87XG5cbiAgbGV0IFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWZyZXNoX3Rva2VuPScgKyByZWZyZXNoVG9rZW4gKyAnJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlbic7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcbiAgICAgIHJlc29sdmUoaW5mbyk7XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZWplY3QoZXJyb3IpO1xuICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cbmxldCBnZW5lcmF0ZUFzc2VydGlvbldpdGhBY2Nlc3NUb2tlbiA9ICggZnVuY3Rpb24gKGNvbnRlbnRzLCBleHBpcmVzLCBpbmZvKSB7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIHVzZXJJbmZvRW5kcG9pbnQoaW5mbykpLnRoZW4oZnVuY3Rpb24gKGluZm9Ub2tlbikge1xuICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIHVzZXIgcHJvZmlsZSAnLCBpbmZvVG9rZW4pO1xuXG4gICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7IHRva2VuSUQ6IGluZm8uYWNjZXNzX3Rva2VuLCB0b2tlbklESlNPTjogaW5mb1Rva2VuLCBwdWJsaWNLZXk6IGNvbnRlbnRzIH0pKTtcbiAgICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uXSBhdG9iIGFzc2VydGlvbjonLCBhdG9iKGFzc2VydGlvbikpO1xuICAgICAgbGV0IGlkcEJ1bmRsZSA9IHsgZG9tYWluOiBkb21haW4sIHByb3RvY29sOiAnT0FVVEgyJyB9O1xuXG4gICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHsgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBleHBpcmVzOiBleHBpcmVzLCB1c2VyUHJvZmlsZTogaW5mb1Rva2VuIH07XG5cbi8qICAgICAgaWRlbnRpdGllc1tuSWRlbnRpdHldID0gcmV0dXJuVmFsdWU7XG4gICAgICArK25JZGVudGl0eTtcbiovXG4gICAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbl0gcmV0dXJuaW5nOiAnLCBKU09OLnN0cmluZ2lmeShyZXR1cm5WYWx1ZSkpO1xuXG4gICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcblxubGV0IGdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVUb2tlbiA9IChmdW5jdGlvbiAoIGNvbnRlbnRzLCBleHBpcmVzLCBoaW50KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgbGV0IGNvZGUgPSB1cmxQYXJzZXIoaGludCwgJ2NvZGUnKTtcblxuICAgIGlmICghY29kZSkgcmVqZWN0KCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVdIGNvZGUgbm90IHJldHVybmVkIGJ5IHRoZSBhdXRoZW50aWNhdGlvbjogJywgaGludCk7XG5cbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIHRva2VuRW5kcG9pbnQoY29kZSkpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcblxuICAgICAgICBpZiAoaW5mby5oYXNPd25Qcm9wZXJ0eSgnYWNjZXNzX3Rva2VuJykpIFxuICAgICAgICAgIHJlc29sdmUoZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4oIGNvbnRlbnRzLCBleHBpcmVzLCBpbmZvKSApO1xuICAgICAgICBlbHNlIHJlamVjdCgnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlXSBhY2Nlc3MgdG9rZW4gbm90IHJldHVybmVkIGluIHRoZSBleGNoYW5nZSBjb2RlIHJlc3VsdDogJywgaW5mbyk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuXG4gIH0pO1xufSk7XG5cbmxldCBnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4gPSAoZnVuY3Rpb24gKHJlc291cmNlcywgbG9naW4pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgY29kZSA9IHVybFBhcnNlcihsb2dpbiwgJ2NvZGUnKTtcblxuICAgIGlmICghY29kZSkgcmVqZWN0KCdbT0FVVEgyLmdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbl0gY29kZSBub3QgcmV0dXJuZWQgYnkgdGhlIGxvZ2luIHJlc3VsdDogJywgbG9naW4pO1xuXG4gICAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBhY2Nlc3NUb2tlbkVuZHBvaW50KGNvZGUpKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG5cbiAgICAgICAgaWYgKGluZm8uaGFzT3duUHJvcGVydHkoJ2FjY2Vzc190b2tlbicpKSB7XG4gICAgICAgICAgbGV0IGV4cGlyZXMgPSBnZXRFeHBpcmVzKGluZm8pO1xuICAgICAgICAgIHJlc29sdmUgKGFjY2Vzc1Rva2VuUmVzdWx0KHJlc291cmNlcywgaW5mby5hY2Nlc3NfdG9rZW4sIGV4cGlyZXMsIGluZm8pKTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCgnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW5dIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAnLCBpbmZvKTtcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG5cbiAgfSk7XG59KTtcblxuZXhwb3J0IGxldCBnZXRFeHBpcmVzID0gKGZ1bmN0aW9uICh1cmwpIHtcbiAgbGV0IGV4cGlyZXMgPSB1cmxQYXJzZXIodXJsLCAnZXhwaXJlc19pbicpO1xuXG4gIGlmIChleHBpcmVzKSBleHBpcmVzID0gZXhwaXJlcyArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuICBlbHNlIGV4cGlyZXMgPSAzMTUzNjAwMDAwICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgcmV0dXJuIGV4cGlyZXM7XG5cbn0pO1xuXG5cbmxldCBhY2Nlc3NUb2tlblJlc3VsdCA9IChmdW5jdGlvbiAocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgaW5wdXQsIHJlZnJlc2gpIHtcblxuICBsZXQgcmVzdWx0ID0geyBkb21haW46IGRvbWFpbiwgcmVzb3VyY2VzOiByZXNvdXJjZXMsIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbiwgZXhwaXJlczogZXhwaXJlcywgaW5wdXQ6IGlucHV0IH07XG5cbiAgaWYgKHJlZnJlc2gpIHJlc3VsdC5yZWZyZXNoID0gcmVmcmVzaDtcblxuICByZXR1cm4gcmVzdWx0O1xuXG59KTtcblxuLyoqXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5XG4qL1xuZXhwb3J0IGxldCBJZHBQcm94eSA9IHtcblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byB2YWxpZGF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb24gcmVjZWl2ZWRcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXG4gICpcbiAgKiBAcGFyYW0gIHtpZHBJbmZvfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoY29uZmlnLCBhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xuICAgIGNvbnNvbGUuaW5mbygnW09BVVRIMi52YWxpZGF0ZUFzc2VydGlvbl0gYXNzZXJ0aW9uOiAnLCBhdG9iKGFzc2VydGlvbikpO1xuICAgIHVzZXJJbmZvRW5kcG9pbnQgPSBjb25maWcudXNlckluZm9FbmRwb2ludDtcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbi8vICAgICAgbGV0IGkgPSBpZHBJbmZvO1xuICAgICAgbGV0IGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pO1xuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgY29uZmlnLnZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQoe2FjY2Vzc190b2tlbjogY29udGVudC50b2tlbklELCBpbnB1dDogY29udGVudC50b2tlbklESlNPTiB9KSkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSA9PT0gSlNPTi5zdHJpbmdpZnkoY29udGVudC50b2tlbklESlNPTikpIHtcbiAgICAgICAgICAvLyAgICAgICAgaWYgKHJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnbmFtZScpKSB7XG4gICAgICAgICAgcmVzb2x2ZSh7IGlkZW50aXR5OiBjb25maWcuY29udmVydFVzZXJQcm9maWxlKHJlc3VsdCkuaWQsIGNvbnRlbnRzOiBjb250ZW50LnB1YmxpY0tleSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2ludmFsaWQnKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgLypcbiAgICByZWZyZXNoQXNzZXJ0aW9uOiAoaWRlbnRpdHkpID0+IHtcbiAgICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246b2xkSWRlbnRpdHknLCBpZGVudGl0eSk7XG4gICAgICBsZXQgaSA9IGdvb2dsZUluZm87XG4gIFxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4pIHtcbiAgICAgICAgICBleGNoYW5nZVJlZnJlc2hUb2tlbihpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcbiAgXG4gICAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiBpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbiwgdG9rZW5UeXBlOiBpZGVudGl0eS5pbmZvLnRva2VuVHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xuICAgICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XG4gIFxuICAgICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXG4gICAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XG4gIFxuICAgICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjtcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbi5leHA7XG4gICAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsO1xuICBcbiAgICAgICAgICAgICAgICBsZXQgb2xkSURUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZGVudGl0eS5hc3NlcnRpb24pKTtcbiAgICAgICAgICAgICAgICBsZXQgb2xkSWRUb2tlblNwbGl0ZWQgPSBvbGRJRFRva2VuLnRva2VuSUQuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICBsZXQgb2xkRGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2Iob2xkSWRUb2tlblNwbGl0ZWRbMV0pKTtcbiAgICAgICAgICAgICAgICBsZXQgaWROb25jZSA9IG9sZERlY29kZWRJRFRva2VuLm5vbmNlO1xuICBcbiAgICAgICAgICAgICAgICBsZXQgcmVjZWl2ZWRJRFRva2VuID0gdmFsdWUuaWRfdG9rZW47XG4gICAgICAgICAgICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gcmVjZWl2ZWRJRFRva2VuLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgICAgbGV0IGRlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XG4gIFxuICAgICAgICAgICAgICAgIGRlY29kZWRJRFRva2VuLm5vbmNlID0gaWROb25jZTtcbiAgICAgICAgICAgICAgICBsZXQgaW5zZXJ0ZWROb25jZSA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoZGVjb2RlZElEVG9rZW4pKTtcbiAgICAgICAgICAgICAgICBsZXQgbmV3SURUb2tlbiA9IGlkVG9rZW5TcGxpdGVkWzBdICsgJy4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWROb25jZSArICcuJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkVG9rZW5TcGxpdGVkWzJdO1xuICBcbiAgICAgICAgICAgICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogbmV3SURUb2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XG4gICAgICAgICAgICAgICAgbGV0IGlkcEJ1bmRsZSA9IHtkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJ307XG4gIFxuICAgICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxuICAgICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpuZXdJZGVudGl0eScsIHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwqL1xuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxuICAqXG4gICogQHBhcmFtICB7aWRwSW5mb30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxuICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG4gIGdlbmVyYXRlQXNzZXJ0aW9uOiAoY29uZmlnLCBjb250ZW50cywgb3JpZ2luLCBoaW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29uZmlnXScsIGNvbmZpZyk7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmhpbnRdJywgaGludCk7XG4vLyAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgdXNlckluZm9FbmRwb2ludCA9IGNvbmZpZy51c2VySW5mb0VuZHBvaW50O1xuICAgIHRva2VuRW5kcG9pbnQgPSBjb25maWcudG9rZW5FbmRwb2ludDtcbiAgICBhdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBjb25maWcuYXV0aG9yaXNhdGlvbkVuZHBvaW50O1xuICAgIGRvbWFpbiA9IGNvbmZpZy5kb21haW47XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmICghaGludCkge1xuXG4vLyAgICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIE5PX0hJTlQ6IHJlamVjdGluZyB3aXRoIHJlcXVlc3RVcmwgJywgcmVxdWVzdFVybCk7XG5cbiAgICAgICAgcmVqZWN0KHsgbmFtZTogJ0lkUExvZ2luRXJyb3InLCBsb2dpblVybDogYXV0aG9yaXNhdGlvbkVuZHBvaW50KGNvbnRlbnRzKSB9KTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlIHJlcXVlc3QgaGF2ZSBhbHJlYWR5IGJlZW4gbWFkZSwgc28gaWRwUFJveHkgd2lsbCB0cnkgdG8gYWNjZXNzIHRoZSB1c2VyIGluZm9ybWF0aW9uXG4gICAgICAgIGxldCBleHBpcmVzID0gdXJsUGFyc2VyKGhpbnQsICdleHBpcmVzX2luJyk7XG5cbiAgICAgICAgaWYgKGV4cGlyZXMpIGV4cGlyZXMgPSBleHBpcmVzICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG4gICAgICAgIGVsc2UgZXhwaXJlcyA9IDMxNTM2MDAwMDAgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcblxuICAgICAgICBsZXQgYWNjZXNzVG9rZW4gPSB1cmxQYXJzZXIoaGludCwgJ2FjY2Vzc190b2tlbicpO1xuXG4gICAgICAgIGlmIChhY2Nlc3NUb2tlbikgcmVzb2x2ZSggZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4oY29udGVudHMsIGV4cGlyZXMse2FjY2Vzc190b2tlbjogYWNjZXNzVG9rZW59ICkgKTtcbiAgICAgICAgZWxzZSByZXNvbHZlKCBnZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlVG9rZW4oY29udGVudHMsIGV4cGlyZXMsIGhpbnQpICk7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgcmVqZWN0KGUpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cbiAgKlxuICAqIEBwYXJhbSAge2NvbmZpZ30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xuICAqIEBwYXJhbSAge3Jlc291cmNlc30gT2JqZWN0IGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXG4gICovXG5cbiAgZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6IChjb25maWcsIHJlc291cmNlcykgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50OmNvbmZpZ10nLCBjb25maWcpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6cmVzb3VyY2VzXScsIHJlc291cmNlcyk7XG4vLyAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgICByZXNvbHZlKCBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChyZXNvdXJjZXMpKTtcblxuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfSxcbiAgXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cbiAgKlxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcGFyYW0gIHtsb2dpbn0gb3B0aW9uYWwgbG9naW4gcmVzdWx0XG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cbiAgKi9cblxuICBnZXRBY2Nlc3NUb2tlbjogKGNvbmZpZywgcmVzb3VyY2VzLCBsb2dpbikgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdldEFjY2Vzc1Rva2VuOmNvbmZpZ10nLCBjb25maWcpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW46bG9naW5dJywgbG9naW4pO1xuLy8gICAgbGV0IGkgPSBpZHBJbmZvO1xuICAgIGFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5FbmRwb2ludDtcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIC8vIHRoZSB1c2VyIGlzIGxvZ2dlZGluLCB0cnkgdG8gZXh0cmFjdCB0aGUgQWNjZXNzIFRva2VuIGFuZCBpdHMgZXhwaXJlc1xuICAgICAgICBsZXQgZXhwaXJlcyA9IGdldEV4cGlyZXMobG9naW4pO1xuXG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihsb2dpbiwgJ2FjY2Vzc190b2tlbicpO1xuXG4gICAgICAgIGlmIChhY2Nlc3NUb2tlbikgcmVzb2x2ZSggYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgbG9naW4pICk7XG4gICAgICAgIGVsc2UgcmVzb2x2ZSggZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuKHJlc291cmNlcywgbG9naW4pICk7XG4gICAgfSwgZnVuY3Rpb24gKGUpIHtcblxuICAgICAgcmVqZWN0KGUpO1xuICAgIH0pO1xuICB9XG5cblxuXG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L09BVVRILmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertUserProfile = convertUserProfile;\nexports.accessTokenInput = accessTokenInput;\nexports.userInfoEndpoint = userInfoEndpoint;\nexports.validateAssertionEndpoint = validateAssertionEndpoint;\nexports.authorisationEndpoint = authorisationEndpoint;\nexports.tokenEndpoint = tokenEndpoint;\nexports.accessTokenAuthorisationEndpoint = accessTokenAuthorisationEndpoint;\nexports.accessTokenEndpoint = accessTokenEndpoint;\n/*\n\tSo that an application can use Slack's OAuth 2.0 authentication system for user login,\n  first is required to set up a project in the Facebook Developers Console (https://developers.facebook.com/apps/) \n  to obtain OAuth 2.0 credentials and set a redirect URI.\n */\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\n// Information to be used to obtain Slack Access Tokens to interwork with Slack chat serviço\n\nvar slackAccessTokenInfo = {\n  clientID: '11533603872.72434934356',\n  \"authorisationEndpoint\": \"https://slack.com/oauth/authorize?\",\n  \"userinfo\": \"https://slack.com/api/users.info?token=\",\n  \"type\": \"token\",\n  \"granted_scopes\": \"client\",\n  \"state\": \"state\",\n  \"accessType\": \"online\",\n  tokenEndpoint: 'https://slack.com/api/oauth.access?',\n  scope: 'client',\n  clientSecret: 'd427ef3c957d68a292dc7c4e20b78330'\n};\n\n// Information to be used to generate and validate Slack IdAssertions\n// ie Slack is used as an Identity Provider\n\nvar slackIdAssertionInfo = {\n  clientID: '11533603872.291565187299',\n  \"authorisationEndpoint\": \"https://slack.com/oauth/authorize?\",\n  \"userinfo\": \"https://slack.com/api/users.info?token=\",\n  \"type\": \"token\",\n  \"granted_scopes\": \"identity.basic,identity.avatar,identity.email\",\n  \"state\": \"state\",\n  \"accessType\": \"online\",\n  tokenEndpoint: 'https://slack.com/api/oauth.access?',\n  scope: 'client',\n  clientSecret: '721ee11eb303817b6b8ee41b785746de'\n};\n\n// function to convert Slack user profile info into standard reTHINK user profile object\n\nfunction convertUserProfile(userSlack) {\n\n  console.log('[SlackUserProfileConverter] ', userSlack);\n  var userProfile = userSlack.user.profile;\n  userProfile.userURL = 'user://slack.com/' + userSlack.user.name;\n\n  userProfile.picture = userProfile.image_original ? userProfile.image_original : userProfile.image_72;\n\n  userProfile.id = userSlack.user.id;\n\n  if (!userProfile.hasOwnProperty('preferred_username')) userProfile.preferred_username = userSlack.user.name;\n\n  userProfile.name = userSlack.user.name;\n\n  return userProfile;\n}\n\nfunction accessTokenInput(info) {\n\n  console.log('[Slack.getAccessTokenInput] from ', info);\n\n  return { user_id: info.user_id, team_id: info.team_id };\n}\n\nfunction userInfoEndpoint(info) {\n\n  return slackIdAssertionInfo.userinfo + info.access_token + '&user=' + info.user_id;\n}\n\nfunction validateAssertionEndpoint(info) {\n\n  return slackIdAssertionInfo.userinfo + info.access_token + '&user=' + info.input.user.id;\n}\n\nfunction authorisationEndpoint(nonce) {\n\n  var url = slackIdAssertionInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + slackIdAssertionInfo.type + '&client_id=' + slackIdAssertionInfo.clientID + '&scope=' + slackIdAssertionInfo.scope + '&access_type=' + slackIdAssertionInfo.accessType + '&state=' + nonce;\n  console.log('[Slack.authorisationEndpoint] ', url);\n  return url;\n}\n\nfunction tokenEndpoint(code) {\n\n  return slackIdAssertionInfo.tokenEndpoint + 'client_id=' + slackIdAssertionInfo.clientID + '&client_secret=' + slackIdAssertionInfo.clientSecret + '&code=' + code + '&redirect_uri=' + redirectURI;\n}\n\nfunction accessTokenAuthorisationEndpoint() {\n\n  var url = slackAccessTokenInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + slackAccessTokenInfo.type + '&client_id=' + slackAccessTokenInfo.clientID + '&scope=' + slackAccessTokenInfo.scope + '&access_type=' + slackAccessTokenInfo.accessType + '&state=' + slackAccessTokenInfo.state;\n  console.log('[Slack.accessTokenAuthorisationEndpoint] ', url);\n  return url;\n}\n\nfunction accessTokenEndpoint(code) {\n\n  return slackAccessTokenInfo.tokenEndpoint + 'client_id=' + slackAccessTokenInfo.clientID + '&client_secret=' + slackAccessTokenInfo.clientSecret + '&code=' + code + '&redirect_uri=' + redirectURI;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NsYWNrL1NsYWNrLmpzP2ZjNTciXSwibmFtZXMiOlsiY29udmVydFVzZXJQcm9maWxlIiwiYWNjZXNzVG9rZW5JbnB1dCIsInVzZXJJbmZvRW5kcG9pbnQiLCJ2YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50IiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidG9rZW5FbmRwb2ludCIsImFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5FbmRwb2ludCIsInJlZGlyZWN0VVJJIiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsInNsYWNrQWNjZXNzVG9rZW5JbmZvIiwiY2xpZW50SUQiLCJzY29wZSIsImNsaWVudFNlY3JldCIsInNsYWNrSWRBc3NlcnRpb25JbmZvIiwidXNlclNsYWNrIiwiY29uc29sZSIsImxvZyIsInVzZXJQcm9maWxlIiwidXNlciIsInByb2ZpbGUiLCJ1c2VyVVJMIiwibmFtZSIsInBpY3R1cmUiLCJpbWFnZV9vcmlnaW5hbCIsImltYWdlXzcyIiwiaWQiLCJoYXNPd25Qcm9wZXJ0eSIsInByZWZlcnJlZF91c2VybmFtZSIsImluZm8iLCJ1c2VyX2lkIiwidGVhbV9pZCIsInVzZXJpbmZvIiwiYWNjZXNzX3Rva2VuIiwiaW5wdXQiLCJub25jZSIsInVybCIsInR5cGUiLCJhY2Nlc3NUeXBlIiwiY29kZSIsInN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7OztRQXlDZ0JBLGtCLEdBQUFBLGtCO1FBbUJBQyxnQixHQUFBQSxnQjtRQVFBQyxnQixHQUFBQSxnQjtRQU9BQyx5QixHQUFBQSx5QjtRQU9BQyxxQixHQUFBQSxxQjtRQWFBQyxhLEdBQUFBLGE7UUFVQUMsZ0MsR0FBQUEsZ0M7UUFhQUMsbUIsR0FBQUEsbUI7QUF0SGhCOzs7OztBQUtBLElBQUlDLGNBQWNDLFNBQVNDLFFBQVQsR0FBb0IsSUFBcEIsR0FB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QUZHLEdBRWlCRyxxQkFBcUJELFlBRnRDLEdBR0gsUUFIRyxHQUdRMEIsSUFIUixHQUlILGdCQUpHLEdBSWdCbEMsV0FKdkI7QUFNRDs7QUFFTSxTQUFTRixnQ0FBVCxHQUE0Qzs7QUFFakQsTUFBSWlDLE1BQU0xQixxQkFBcUJULHFCQUFyQixHQUNOLGVBRE0sR0FDWUksV0FEWixHQUVOLGlCQUZNLEdBRWNLLHFCQUFxQjJCLElBRm5DLEdBR04sYUFITSxHQUdVM0IscUJBQXFCQyxRQUgvQixHQUlOLFNBSk0sR0FJTUQscUJBQXFCRSxLQUozQixHQUtOLGVBTE0sR0FLWUYscUJBQXFCNEIsVUFMakMsR0FNTixTQU5NLEdBTU01QixxQkFBcUI4QixLQU5yQztBQU9BeEIsVUFBUUMsR0FBUixDQUFZLDJDQUFaLEVBQXlEbUIsR0FBekQ7QUFDQSxTQUFPQSxHQUFQO0FBQ0Q7O0FBRU0sU0FBU2hDLG1CQUFULENBQTZCbUMsSUFBN0IsRUFBbUM7O0FBRXhDLFNBQU83QixxQkFBcUJSLGFBQXJCLEdBQ0gsWUFERyxHQUNZUSxxQkFBcUJDLFFBRGpDLEdBRUgsaUJBRkcsR0FFaUJELHFCQUFxQkcsWUFGdEMsR0FHSCxRQUhHLEdBR1EwQixJQUhSLEdBSUgsZ0JBSkcsR0FJZ0JsQyxXQUp2QjtBQU1EIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRTbyB0aGF0IGFuIGFwcGxpY2F0aW9uIGNhbiB1c2UgU2xhY2sncyBPQXV0aCAyLjAgYXV0aGVudGljYXRpb24gc3lzdGVtIGZvciB1c2VyIGxvZ2luLFxuICBmaXJzdCBpcyByZXF1aXJlZCB0byBzZXQgdXAgYSBwcm9qZWN0IGluIHRoZSBGYWNlYm9vayBEZXZlbG9wZXJzIENvbnNvbGUgKGh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vYXBwcy8pIFxuICB0byBvYnRhaW4gT0F1dGggMi4wIGNyZWRlbnRpYWxzIGFuZCBzZXQgYSByZWRpcmVjdCBVUkkuXG4gKi9cbmxldCByZWRpcmVjdFVSSSA9IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgIT09ICcnID8gJzonICsgbG9jYXRpb24ucG9ydCA6ICcnKTtcblxuLy8gSW5mb3JtYXRpb24gdG8gYmUgdXNlZCB0byBvYnRhaW4gU2xhY2sgQWNjZXNzIFRva2VucyB0byBpbnRlcndvcmsgd2l0aCBTbGFjayBjaGF0IHNlcnZpw6dvXG5cbmxldCBzbGFja0FjY2Vzc1Rva2VuSW5mbyA9IHtcbiAgY2xpZW50SUQ6ICcxMTUzMzYwMzg3Mi43MjQzNDkzNDM1NicsXG4gIFwiYXV0aG9yaXNhdGlvbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly9zbGFjay5jb20vb2F1dGgvYXV0aG9yaXplP1wiLFxuICBcInVzZXJpbmZvXCI6IFwiaHR0cHM6Ly9zbGFjay5jb20vYXBpL3VzZXJzLmluZm8/dG9rZW49XCIsXG4gIFwidHlwZVwiOiBcInRva2VuXCIsXG4gIFwiZ3JhbnRlZF9zY29wZXNcIjogXCJjbGllbnRcIixcbiAgXCJzdGF0ZVwiOiBcInN0YXRlXCIsXG4gIFwiYWNjZXNzVHlwZVwiOiBcIm9ubGluZVwiLFxuICB0b2tlbkVuZHBvaW50OiAnaHR0cHM6Ly9zbGFjay5jb20vYXBpL29hdXRoLmFjY2Vzcz8nLFxuICBzY29wZTogJ2NsaWVudCcsXG4gIGNsaWVudFNlY3JldDogJ2Q0MjdlZjNjOTU3ZDY4YTI5MmRjN2M0ZTIwYjc4MzMwJ1xufTtcblxuLy8gSW5mb3JtYXRpb24gdG8gYmUgdXNlZCB0byBnZW5lcmF0ZSBhbmQgdmFsaWRhdGUgU2xhY2sgSWRBc3NlcnRpb25zXG4vLyBpZSBTbGFjayBpcyB1c2VkIGFzIGFuIElkZW50aXR5IFByb3ZpZGVyXG5cbmxldCBzbGFja0lkQXNzZXJ0aW9uSW5mbyA9IHtcbiAgY2xpZW50SUQ6ICcxMTUzMzYwMzg3Mi4yOTE1NjUxODcyOTknLFxuICBcImF1dGhvcmlzYXRpb25FbmRwb2ludFwiOiBcImh0dHBzOi8vc2xhY2suY29tL29hdXRoL2F1dGhvcml6ZT9cIixcbiAgXCJ1c2VyaW5mb1wiOiBcImh0dHBzOi8vc2xhY2suY29tL2FwaS91c2Vycy5pbmZvP3Rva2VuPVwiLFxuICBcInR5cGVcIjogXCJ0b2tlblwiLFxuICBcImdyYW50ZWRfc2NvcGVzXCI6IFwiaWRlbnRpdHkuYmFzaWMsaWRlbnRpdHkuYXZhdGFyLGlkZW50aXR5LmVtYWlsXCIsXG4gIFwic3RhdGVcIjogXCJzdGF0ZVwiLFxuICBcImFjY2Vzc1R5cGVcIjogXCJvbmxpbmVcIixcbiAgdG9rZW5FbmRwb2ludDogJ2h0dHBzOi8vc2xhY2suY29tL2FwaS9vYXV0aC5hY2Nlc3M/JyxcbiAgc2NvcGU6ICdjbGllbnQnLFxuICBjbGllbnRTZWNyZXQ6ICc3MjFlZTExZWIzMDM4MTdiNmI4ZWU0MWI3ODU3NDZkZSdcbn07XG5cblxuLy8gZnVuY3Rpb24gdG8gY29udmVydCBTbGFjayB1c2VyIHByb2ZpbGUgaW5mbyBpbnRvIHN0YW5kYXJkIHJlVEhJTksgdXNlciBwcm9maWxlIG9iamVjdFxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFVzZXJQcm9maWxlKHVzZXJTbGFjaykge1xuXG5cbiAgY29uc29sZS5sb2coJ1tTbGFja1VzZXJQcm9maWxlQ29udmVydGVyXSAnLCB1c2VyU2xhY2spO1xuICBsZXQgdXNlclByb2ZpbGUgPSB1c2VyU2xhY2sudXNlci5wcm9maWxlO1xuICB1c2VyUHJvZmlsZS51c2VyVVJMID0gJ3VzZXI6Ly9zbGFjay5jb20vJyArIHVzZXJTbGFjay51c2VyLm5hbWU7XG5cbiAgdXNlclByb2ZpbGUucGljdHVyZSA9ICh1c2VyUHJvZmlsZS5pbWFnZV9vcmlnaW5hbCkgPyB1c2VyUHJvZmlsZS5pbWFnZV9vcmlnaW5hbCA6IHVzZXJQcm9maWxlLmltYWdlXzcyO1xuXG4gIHVzZXJQcm9maWxlLmlkID0gdXNlclNsYWNrLnVzZXIuaWQ7XG5cbiAgaWYgKCF1c2VyUHJvZmlsZS5oYXNPd25Qcm9wZXJ0eSgncHJlZmVycmVkX3VzZXJuYW1lJykpXG4gICAgdXNlclByb2ZpbGUucHJlZmVycmVkX3VzZXJuYW1lID0gdXNlclNsYWNrLnVzZXIubmFtZTtcblxuICB1c2VyUHJvZmlsZS5uYW1lID0gdXNlclNsYWNrLnVzZXIubmFtZTtcblxuICByZXR1cm4gdXNlclByb2ZpbGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY2Nlc3NUb2tlbklucHV0KGluZm8pIHtcblxuXG4gIGNvbnNvbGUubG9nKCdbU2xhY2suZ2V0QWNjZXNzVG9rZW5JbnB1dF0gZnJvbSAnLCBpbmZvKTtcblxuICByZXR1cm4ge3VzZXJfaWQ6IGluZm8udXNlcl9pZCwgdGVhbV9pZDogaW5mby50ZWFtX2lkIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VySW5mb0VuZHBvaW50KGluZm8pIHtcblxuICByZXR1cm4gc2xhY2tJZEFzc2VydGlvbkluZm8udXNlcmluZm8gKyBpbmZvLmFjY2Vzc190b2tlblxuICAgKyAnJnVzZXI9JyArIGluZm8udXNlcl9pZDtcblxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludChpbmZvKSB7XG5cbiAgcmV0dXJuIHNsYWNrSWRBc3NlcnRpb25JbmZvLnVzZXJpbmZvICsgaW5mby5hY2Nlc3NfdG9rZW5cbiAgICsgJyZ1c2VyPScgKyBpbmZvLmlucHV0LnVzZXIuaWQ7XG5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF1dGhvcmlzYXRpb25FbmRwb2ludChub25jZSkge1xuXG4gIGxldCB1cmwgPSBzbGFja0lkQXNzZXJ0aW9uSW5mby5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgXG4gICAgKyAncmVkaXJlY3RfdXJpPScgKyByZWRpcmVjdFVSSVxuICAgICsgJyZyZXNwb25zZV90eXBlPScgKyBzbGFja0lkQXNzZXJ0aW9uSW5mby50eXBlXG4gICAgKyAnJmNsaWVudF9pZD0nICsgc2xhY2tJZEFzc2VydGlvbkluZm8uY2xpZW50SURcbiAgICArICcmc2NvcGU9JyArIHNsYWNrSWRBc3NlcnRpb25JbmZvLnNjb3BlXG4gICAgKyAnJmFjY2Vzc190eXBlPScgKyBzbGFja0lkQXNzZXJ0aW9uSW5mby5hY2Nlc3NUeXBlXG4gICAgKyAnJnN0YXRlPScgKyBub25jZTtcbiAgY29uc29sZS5sb2coJ1tTbGFjay5hdXRob3Jpc2F0aW9uRW5kcG9pbnRdICcsIHVybCk7XG4gIHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2tlbkVuZHBvaW50KGNvZGUpIHtcblxuICByZXR1cm4gc2xhY2tJZEFzc2VydGlvbkluZm8udG9rZW5FbmRwb2ludCBcbiAgICArICdjbGllbnRfaWQ9JyArIHNsYWNrSWRBc3NlcnRpb25JbmZvLmNsaWVudElEXG4gICAgKyAnJmNsaWVudF9zZWNyZXQ9JyArIHNsYWNrSWRBc3NlcnRpb25JbmZvLmNsaWVudFNlY3JldFxuICAgICsgJyZjb2RlPScgKyBjb2RlIFxuICAgICsgJyZyZWRpcmVjdF91cmk9JyArIHJlZGlyZWN0VVJJO1xuXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCgpIHtcblxuICBsZXQgdXJsID0gc2xhY2tBY2Nlc3NUb2tlbkluZm8uYXV0aG9yaXNhdGlvbkVuZHBvaW50IFxuICAgICsgJ3JlZGlyZWN0X3VyaT0nICsgcmVkaXJlY3RVUklcbiAgICArICcmcmVzcG9uc2VfdHlwZT0nICsgc2xhY2tBY2Nlc3NUb2tlbkluZm8udHlwZVxuICAgICsgJyZjbGllbnRfaWQ9JyArIHNsYWNrQWNjZXNzVG9rZW5JbmZvLmNsaWVudElEXG4gICAgKyAnJnNjb3BlPScgKyBzbGFja0FjY2Vzc1Rva2VuSW5mby5zY29wZVxuICAgICsgJyZhY2Nlc3NfdHlwZT0nICsgc2xhY2tBY2Nlc3NUb2tlbkluZm8uYWNjZXNzVHlwZVxuICAgICsgJyZzdGF0ZT0nICsgc2xhY2tBY2Nlc3NUb2tlbkluZm8uc3RhdGU7XG4gIGNvbnNvbGUubG9nKCdbU2xhY2suYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnRdICcsIHVybCk7XG4gIHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY2Nlc3NUb2tlbkVuZHBvaW50KGNvZGUpIHtcblxuICByZXR1cm4gc2xhY2tBY2Nlc3NUb2tlbkluZm8udG9rZW5FbmRwb2ludCBcbiAgICArICdjbGllbnRfaWQ9JyArIHNsYWNrQWNjZXNzVG9rZW5JbmZvLmNsaWVudElEXG4gICAgKyAnJmNsaWVudF9zZWNyZXQ9JyArIHNsYWNrQWNjZXNzVG9rZW5JbmZvLmNsaWVudFNlY3JldFxuICAgICsgJyZjb2RlPScgKyBjb2RlIFxuICAgICsgJyZyZWRpcmVjdF91cmk9JyArIHJlZGlyZWN0VVJJO1xuXG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NsYWNrL1NsYWNrLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdpProxy = void 0;\nvar idpInfo = void 0;\nvar convertUserProfile = void 0;\nvar userInfoEndpoint = void 0;\nvar accessTokenInput = void 0;\n\n/**\n* Abstract Identity Provider Proxy Protocol Stub to be extended by real Idp Proxies\n*/\n\nvar AbstractIdpProxyProtoStub = function () {\n\n  /**\n  * Constructor of the IdpProxy Stub\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\n  *\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n  * @param  {Message.Message}                           busPostMessage     configuration\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n  */\n  function AbstractIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, AbstractIdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n    IdpProxy = config.idpProxy;\n    convertUserProfile = config.convertUserProfile;\n    accessTokenInput = config.accessTokenInput;\n\n    console.log('[AbstractIdpProxy] constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === config.idpUrl) {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\n  * Function that see the intended method in the message received and call the respective function\n  *\n  * @param {message}  message received in the messageBus\n  */\n\n\n  _createClass(AbstractIdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n      console.info('[AbstractIdpProxyProtoStub] receiving request: ', msg);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          IdpProxy.generateAssertion(_this.config, params.contents, params.origin, params.usernameHint).then(function (value) {\n\n            value.userProfile = convertUserProfile(value.userProfile);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          //       console.info('validateAssertion');\n          IdpProxy.validateAssertion(_this.config, params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          //     console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessTokenAuthorisationEndpoint':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessTokenAuthorisationEndpoint(_this.config, params.resources).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessToken(_this.config, params.resources, params.login).then(function (value) {\n            console.info('OIDC.getAccessToken result: ', value);\n            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.refreshAccessToken(_this.config, params.token).then(function (value) {\n            console.info('OIDC.refreshAccessToken result: ', value);\n            //            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\n    * This function receives a message and a value. It replies the value to the sender of the message received\n    *\n    * @param  {message}   message received\n    * @param  {value}     value to include in the new message to send\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = {\n        id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value }\n      };\n\n      console.log('[AbstractIdpProxyProtoStub.replyMessage] ', message);\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[AbstractIdpProxyProtoStub.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return AbstractIdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\n * To activate this protocol stub, using the same method for all protostub.\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\n * @param  {Message.Message}                           busPostMessage     configuration\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\n * @return {Object} Object with name and instance of ProtoStub\n */\n\n\nexports.default = AbstractIdpProxyProtoStub;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L0Fic3RyYWN0SWRwUHJveHlTdHViLmpzPzI3MjQiXSwibmFtZXMiOlsiSWRwUHJveHkiLCJpZHBJbmZvIiwiY29udmVydFVzZXJQcm9maWxlIiwidXNlckluZm9FbmRwb2ludCIsImFjY2Vzc1Rva2VuSW5wdXQiLCJBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsIl90aGlzIiwibWVzc2FnZUJ1cyIsImlkcFByb3h5IiwiY29uc29sZSIsImxvZyIsImFkZExpc3RlbmVyIiwibXNnIiwidG8iLCJpZHBVcmwiLCJyZXF1ZXN0VG9JZHAiLCJfc2VuZFN0YXR1cyIsInBhcmFtcyIsImJvZHkiLCJpbmZvIiwibWV0aG9kIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJjb250ZW50cyIsIm9yaWdpbiIsInVzZXJuYW1lSGludCIsInRoZW4iLCJ2YWx1ZSIsInVzZXJQcm9maWxlIiwicmVwbHlNZXNzYWdlIiwiZXJyb3IiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsInJlZnJlc2hBc3NlcnRpb24iLCJpZGVudGl0eSIsImdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwicmVzb3VyY2VzIiwiZ2V0QWNjZXNzVG9rZW4iLCJsb2dpbiIsImlucHV0IiwicmVmcmVzaEFjY2Vzc1Rva2VuIiwidG9rZW4iLCJtZXNzYWdlIiwiaWQiLCJ0eXBlIiwiZnJvbSIsImNvZGUiLCJwb3N0TWVzc2FnZSIsInJlYXNvbiIsIl9zdGF0ZSIsImRlc2MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxpQkFBSjtBQUNBLElBQUlDLGdCQUFKO0FBQ0EsSUFBSUMsMkJBQUo7QUFDQSxJQUFJQyx5QkFBSjtBQUNBLElBQUlDLHlCQUFKOztBQUVBOzs7O0lBR01DLHlCOztBQUVKOzs7Ozs7OztBQVFBLHFDQUFZ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akIsY0FBUUMsR0FBUixDQUFZLDJDQUFaLEVBQXlEK0IsT0FBekQ7O0FBRUFuQyxZQUFNQyxVQUFOLENBQWlCdUMsV0FBakIsQ0FBNkJMLE9BQTdCO0FBQ0Q7OztnQ0FFV2YsSyxFQUFPcUIsTSxFQUFRO0FBQ3pCLFVBQUl6QyxRQUFRLElBQVo7O0FBRUFHLGNBQVFDLEdBQVIsQ0FBWSx5Q0FBWixFQUF1RGdCLEtBQXZEOztBQUVBcEIsWUFBTTBDLE1BQU4sR0FBZXRCLEtBQWY7O0FBRUEsVUFBSWQsTUFBTTtBQUNSK0IsY0FBTSxRQURFO0FBRVJDLGNBQU10QyxNQUFNSCxtQkFGSjtBQUdSVSxZQUFJUCxNQUFNSCxtQkFBTixHQUE0QixTQUh4QjtBQUlSZSxjQUFNO0FBQ0pRLGlCQUFPQTtBQURIO0FBSkUsT0FBVjs7QUFTQSxVQUFJcUIsTUFBSixFQUFZO0FBQ1ZuQyxZQUFJTSxJQUFKLENBQVMrQixJQUFULEdBQWdCRixNQUFoQjtBQUNEOztBQUVEekMsWUFBTUMsVUFBTixDQUFpQnVDLFdBQWpCLENBQTZCbEMsR0FBN0I7QUFDRDs7Ozs7O0FBR0g7O0FBRUE7Ozs7Ozs7OztrQkFPZVYseUIiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBJZHBQcm94eTtcbmxldCBpZHBJbmZvO1xubGV0IGNvbnZlcnRVc2VyUHJvZmlsZTtcbmxldCB1c2VySW5mb0VuZHBvaW50O1xubGV0IGFjY2Vzc1Rva2VuSW5wdXQ7XG5cbi8qKlxuKiBBYnN0cmFjdCBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViIHRvIGJlIGV4dGVuZGVkIGJ5IHJlYWwgSWRwIFByb3hpZXNcbiovXG5jbGFzcyBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIHtcblxuICAvKipcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXG4gICpcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cbiAgKi9cbiAgY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7XG4gICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIElkcFByb3h5ID0gY29uZmlnLmlkcFByb3h5O1xuICAgIGNvbnZlcnRVc2VyUHJvZmlsZSA9IGNvbmZpZy5jb252ZXJ0VXNlclByb2ZpbGU7XG4gICAgYWNjZXNzVG9rZW5JbnB1dCA9IGNvbmZpZy5hY2Nlc3NUb2tlbklucHV0O1xuXG5cbiAgICBjb25zb2xlLmxvZygnW0Fic3RyYWN0SWRwUHJveHldIGNvbnN0cnVjdG9yJyk7XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKG1zZy50byA9PT0gY29uZmlnLmlkcFVybCkge1xuXG4gICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uXG4gICpcbiAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG4gICovXG4gIHJlcXVlc3RUb0lkcChtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7XG4gICAgLy9jb25zb2xlLmluZm8oJ3JlcXVlc3RUb0lkcDonLCBtc2cuYm9keS5tZXRob2QpO1xuICAgIGNvbnNvbGUuaW5mbygnW0Fic3RyYWN0SWRwUHJveHlQcm90b1N0dWJdIHJlY2VpdmluZyByZXF1ZXN0OiAnLCBtc2cpO1xuXG4gICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcbiAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb24oX3RoaXMuY29uZmlnLCBwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICAgICAgICAgIHZhbHVlLnVzZXJQcm9maWxlID0gY29udmVydFVzZXJQcm9maWxlKHZhbHVlLnVzZXJQcm9maWxlKTtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTtcbiAgICAgICAgICB9LFxuXG4gICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTsgfVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgLy8gICAgICAgY29uc29sZS5pbmZvKCd2YWxpZGF0ZUFzc2VydGlvbicpO1xuICAgICAgICBJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvbihfdGhpcy5jb25maWcsIHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTsgfSxcblxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWZyZXNoQXNzZXJ0aW9uJzpcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygncmVmcmVzaEFzc2VydGlvbicpO1xuICAgICAgICBJZHBQcm94eS5yZWZyZXNoQXNzZXJ0aW9uKHBhcmFtcy5pZGVudGl0eSkudGhlbihcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOyB9LFxuXG4gICAgICAgICAgZnVuY3Rpb24gKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTsgfVxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2dldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50JzpcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygnZ2V0QWNjZXNzVG9rZW4nKTtcbiAgICAgICAgSWRwUHJveHkuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQoX3RoaXMuY29uZmlnLCBwYXJhbXMucmVzb3VyY2VzKS50aGVuKFxuICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZ2V0QWNjZXNzVG9rZW4nOlxuICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICBJZHBQcm94eS5nZXRBY2Nlc3NUb2tlbihfdGhpcy5jb25maWcsIHBhcmFtcy5yZXNvdXJjZXMsIHBhcmFtcy5sb2dpbikudGhlbihcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnT0lEQy5nZXRBY2Nlc3NUb2tlbiByZXN1bHQ6ICcsIHZhbHVlKTtcbiAgICAgICAgICAgIHZhbHVlLmlucHV0ID0gYWNjZXNzVG9rZW5JbnB1dCh2YWx1ZS5pbnB1dCk7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWZyZXNoQWNjZXNzVG9rZW4nOlxuICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICBJZHBQcm94eS5yZWZyZXNoQWNjZXNzVG9rZW4oX3RoaXMuY29uZmlnLCBwYXJhbXMudG9rZW4pLnRoZW4oXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ09JREMucmVmcmVzaEFjY2Vzc1Rva2VuIHJlc3VsdDogJywgdmFsdWUpO1xuLy8gICAgICAgICAgICB2YWx1ZS5pbnB1dCA9IGFjY2Vzc1Rva2VuSW5wdXQodmFsdWUuaW5wdXQpO1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcbiAgKlxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxuICAqL1xuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgYm9keTogeyBjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZSB9XG4gICAgfTtcblxuICAgIGNvbnNvbGUubG9nKCdbQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yi5yZXBseU1lc3NhZ2VdICcsIG1lc3NhZ2UpO1xuXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgfVxuXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcblxuICAgIF90aGlzLl9zdGF0ZSA9IHZhbHVlO1xuXG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHR5cGU6ICd1cGRhdGUnLFxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxuICAgICAgYm9keToge1xuICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHJlYXNvbikge1xuICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjtcbiAgICB9XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gIH1cbn1cblxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG5cbi8qKlxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxuICovXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9BYnN0cmFjdElkcFByb3h5U3R1Yi5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "33.00",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}