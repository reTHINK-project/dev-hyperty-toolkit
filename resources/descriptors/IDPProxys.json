{
  "FacebookIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "facebook.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "22.70",
    "description": "IDPProxy for Facebook idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "50ef75417b00e8340d1ddf496be07274a",
    "constraints": {
      "browser": true
    },
    "objectName": "facebook.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "GoogleIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHsKcmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXAKLyoqKioqKi8gCS8vIFRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307Ci8qKioqKiovCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewovKioqKioqLwovKioqKioqLyAJCS8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZQovKioqKioqLyAJCWlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7Ci8qKioqKiovIAkJCXJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHsKLyoqKioqKi8gCQkJaTogbW9kdWxlSWQsCi8qKioqKiovIAkJCWw6IGZhbHNlLAovKioqKioqLyAJCQlleHBvcnRzOiB7fQovKioqKioqLyAJCX07Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZAovKioqKioqLyAJCW1vZHVsZS5sID0gdHJ1ZTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLyAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCX0KLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikgewovKioqKioqLyAJCWlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHsKLyoqKioqKi8gCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsKLyoqKioqKi8gCQkJCWNvbmZpZ3VyYWJsZTogZmFsc2UsCi8qKioqKiovIAkJCQllbnVtZXJhYmxlOiB0cnVlLAovKioqKioqLyAJCQkJZ2V0OiBnZXR0ZXIKLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJfQovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHsKLyoqKioqKi8gCQl2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8KLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDoKLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7Ci8qKioqKiovIAkJcmV0dXJuIGdldHRlcjsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKLyoqKioqKi8KLyoqKioqKi8gCS8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7Ci8qKioqKiovIH0pCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIChbCi8qIDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwpldmFsKCJcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFjdGl2YXRlO1xuXG52YXIgX09JREMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX0dvb2dsZUluZm8gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX0dvb2dsZUNvbnZlcnRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfQWJzdHJhY3RJZHBQcm94eVN0dWIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX0Fic3RyYWN0SWRwUHJveHlTdHViMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Fic3RyYWN0SWRwUHJveHlTdHViKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcclxuKiBHb29nbGUgSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxyXG4qL1xudmFyIEdvb2dsZUlkcFByb3h5UHJvdG9TdHViID0gZnVuY3Rpb24gKF9BYnN0cmFjdElkcFByb3h5UHJvdCkge1xuICBfaW5oZXJpdHMoR29vZ2xlSWRwUHJveHlQcm90b1N0dWIsIF9BYnN0cmFjdElkcFByb3h5UHJvdCk7XG5cbiAgLyoqXHJcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxyXG4gICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgaWRwUHJveHkgcmVjZWl2ZWRcclxuICAqXHJcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAgKi9cbiAgZnVuY3Rpb24gR29vZ2xlSWRwUHJveHlQcm90b1N0dWIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR29vZ2xlSWRwUHJveHlQcm90b1N0dWIpO1xuXG4gICAgY29uZmlnLmRvbWFpbiA9ICdnb29nbGUuY29tJztcbiAgICBjb25maWcuaWRwVXJsID0gJ2RvbWFpbi1pZHA6Ly9nb29nbGUuY29tJztcbiAgICBjb25maWcuaWRwUHJveHkgPSBfT0lEQy5JZHBQcm94eTtcbiAgICBjb25maWcuaWRwSW5mbyA9IF9Hb29nbGVJbmZvLmdvb2dsZUluZm87XG4gICAgY29uZmlnLmFwaUluZm8gPSBfR29vZ2xlSW5mby5nb29nbGVBUElJbmZvO1xuICAgIGNvbmZpZy5hY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCA9IF9Hb29nbGVJbmZvLmFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50O1xuICAgIGNvbmZpZy5hY2Nlc3NUb2tlbkVuZHBvaW50ID0gX0dvb2dsZUluZm8uYWNjZXNzVG9rZW5FbmRwb2ludDtcbiAgICBjb25maWcucmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBfR29vZ2xlSW5mby5yZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludDtcbiAgICBjb25maWcuYWNjZXNzVG9rZW5JbnB1dCA9IF9Hb29nbGVJbmZvLmFjY2Vzc1Rva2VuSW5wdXQ7XG4gICAgY29uZmlnLmF1dGhvcmlzYXRpb25FbmRwb2ludCA9IF9Hb29nbGVJbmZvLmF1dGhvcmlzYXRpb25FbmRwb2ludDtcbiAgICBjb25maWcuY29udmVydFVzZXJQcm9maWxlID0gX0dvb2dsZUNvbnZlcnRlci5jb252ZXJ0VXNlclByb2ZpbGU7XG4gICAgY29uZmlnLm1hcHBpbmcgPSBfR29vZ2xlSW5mby5tYXBwaW5nO1xuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoR29vZ2xlSWRwUHJveHlQcm90b1N0dWIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihHb29nbGVJZHBQcm94eVByb3RvU3R1YikpLmNhbGwodGhpcywgcnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpKTtcbiAgfVxuXG4gIHJldHVybiBHb29nbGVJZHBQcm94eVByb3RvU3R1Yjtcbn0oX0Fic3RyYWN0SWRwUHJveHlTdHViMi5kZWZhdWx0KTtcblxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG5cbi8qKlxyXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cclxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXHJcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcclxuICovXG5cblxuZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdHb29nbGVJZHBQcm94eVByb3RvU3R1YicsXG4gICAgaW5zdGFuY2U6IG5ldyBHb29nbGVJZHBQcm94eVByb3RvU3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuICB9O1xufS8vIyBzb3VyY2VVUkw9W21vZHVsZV1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTh1TGk5a1pYWXRjSEp2ZEc5emRIVmljeTl6Y21NdmFXUndjSEp2ZUhrdloyOXZaMnhsTDBkdmIyZHNaVWxrY0ZCeWIzaDVVM1IxWWk1cFpIQXVhbk0vWldNNFlTSmRMQ0p1WVcxbGN5STZXeUpoWTNScGRtRjBaU0lzSWtkdmIyZHNaVWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlJaXdpY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENJc0ltSjFjeUlzSW1OdmJtWnBaeUlzSW1SdmJXRnBiaUlzSW1sa2NGVnliQ0lzSW1sa2NGQnliM2g1SWl3aVNXUndVSEp2ZUhraUxDSnBaSEJKYm1adklpd2laMjl2WjJ4bFNXNW1ieUlzSW1Gd2FVbHVabThpTENKbmIyOW5iR1ZCVUVsSmJtWnZJaXdpWVdOalpYTnpWRzlyWlc1QmRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUWlMQ0poWTJObGMzTlViMnRsYmtWdVpIQnZhVzUwSWl3aWNtVm1jbVZ6YUVGalkyVnpjMVJ2YTJWdVJXNWtjRzlwYm5RaUxDSmhZMk5sYzNOVWIydGxia2x1Y0hWMElpd2lZWFYwYUc5eWFYTmhkR2x2YmtWdVpIQnZhVzUwSWl3aVkyOXVkbVZ5ZEZWelpYSlFjbTltYVd4bElpd2liV0Z3Y0dsdVp5SXNJa0ZpYzNSeVlXTjBTV1J3VUhKdmVIbFFjbTkwYjFOMGRXSWlMQ0oxY213aUxDSnVZVzFsSWl3aWFXNXpkR0Z1WTJVaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08ydENRVFJEZDBKQkxGRTdPMEZCTlVONFFqczdRVUZEUVRzN1FVRkRRVHM3UVVGRFFUczdPenM3T3pzN096czdPMEZCUlVFN096dEpRVWROUXl4MVFqczdPMEZCUlVvN096czdPenM3TzBGQlVVRXNiVU5CUVZsRExHMUNRVUZhTEVWQlFXbERReXhIUVVGcVF5eEZRVUZ6UTBNc1RVRkJkRU1zUlVGQk9FTTdRVUZCUVRzN1FVRkROVU5CTEZkQlFVOURMRTFCUVZBc1IwRkJaMElzV1VGQmFFSTdRVUZEUVVRc1YwRkJUMFVzVFVGQlVDeEhRVUZuUWl4NVFrRkJhRUk3UVVGRFFVWXNWMEZCVDBjc1VVRkJVQ3hIUVVGclFrTXNZMEZCYkVJN1FVRkRRVW9zVjBGQlQwc3NUMEZCVUN4SFFVRnBRa01zYzBKQlFXcENPMEZCUTBGT0xGZEJRVTlQTEU5QlFWQXNSMEZCYVVKRExIbENRVUZxUWp0QlFVTkJVaXhYUVVGUFV5eG5RMEZCVUN4SFFVRXdRMEVzTkVOQlFURkRPMEZCUTBGVUxGZEJRVTlWTEcxQ1FVRlFMRWRCUVRaQ1FTd3JRa0ZCTjBJN1FVRkRRVllzVjBGQlQxY3NNRUpCUVZBc1IwRkJiME5CTEhORFFVRndRenRCUVVOQldDeFhRVUZQV1N4blFrRkJVQ3hIUVVFd1FrRXNORUpCUVRGQ08wRkJRMEZhTEZkQlFVOWhMSEZDUVVGUUxFZEJRU3RDUVN4cFEwRkJMMEk3UVVGRFFXSXNWMEZCVDJNc2EwSkJRVkFzUjBGQk5FSkJMRzFEUVVFMVFqdEJRVU5CWkN4WFFVRlBaU3hQUVVGUUxFZEJRV2xDUVN4dFFrRkJha0k3UVVGYU5FTXNOa2xCWVhSRGFrSXNiVUpCWW5ORExFVkJZV3BDUXl4SFFXSnBRaXhGUVdGYVF5eE5RV0paTzBGQll6ZERPenM3UlVGNFFtMURaMElzT0VJN08wRkJNa0owUXpzN1FVRkZRVHM3T3pzN096czdPMEZCVDJVc1UwRkJVM0JDTEZGQlFWUXNRMEZCYTBKeFFpeEhRVUZzUWl4RlFVRjFRbXhDTEVkQlFYWkNMRVZCUVRSQ1F5eE5RVUUxUWl4RlFVRnZRenRCUVVOcVJDeFRRVUZQTzBGQlEweHJRaXhWUVVGTkxIbENRVVJFTzBGQlJVeERMR05CUVZVc1NVRkJTWFJDTEhWQ1FVRktMRU5CUVRSQ2IwSXNSMEZCTlVJc1JVRkJhVU5zUWl4SFFVRnFReXhGUVVGelEwTXNUVUZCZEVNN1FVRkdUQ3hIUVVGUU8wRkJTVVFpTENKbWFXeGxJam9pTUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQjdJRWxrY0ZCeWIzaDVJSDBnWm5KdmJTQmNJaTR1TDA5SlJFTmNJbHh5WEc1cGJYQnZjblFnZXlCbmIyOW5iR1ZKYm1adkxDQm5iMjluYkdWQlVFbEpibVp2TENCaFkyTmxjM05VYjJ0bGJrRjFkR2h2Y21sellYUnBiMjVGYm1Sd2IybHVkQ3dnWVdOalpYTnpWRzlyWlc1RmJtUndiMmx1ZEN3Z1lYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBMQ0JoWTJObGMzTlViMnRsYmtsdWNIVjBMQ0J0WVhCd2FXNW5MQ0J5WldaeVpYTm9RV05qWlhOelZHOXJaVzVGYm1Sd2IybHVkQ0I5SUdaeWIyMGdYQ0l1TDBkdmIyZHNaVWx1Wm05Y0lseHlYRzVwYlhCdmNuUWdleUJqYjI1MlpYSjBWWE5sY2xCeWIyWnBiR1VnZlNCbWNtOXRJRndpTGk5SGIyOW5iR1ZEYjI1MlpYSjBaWEpjSWx4eVhHNXBiWEJ2Y25RZ1FXSnpkSEpoWTNSSlpIQlFjbTk0ZVZCeWIzUnZVM1IxWWlCbWNtOXRJRndpTGk0dlFXSnpkSEpoWTNSSlpIQlFjbTk0ZVZOMGRXSmNJbHh5WEc1Y2NseHVMeW9xWEhKY2Jpb2dSMjl2WjJ4bElFbGtaVzUwYVhSNUlGQnliM1pwWkdWeUlGQnliM2g1SUZCeWIzUnZZMjlzSUZOMGRXSmNjbHh1S2k5Y2NseHVZMnhoYzNNZ1IyOXZaMnhsU1dSd1VISnZlSGxRY205MGIxTjBkV0lnWlhoMFpXNWtjeUJCWW5OMGNtRmpkRWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlJSHRjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnS2lCRGIyNXpkSEoxWTNSdmNpQnZaaUIwYUdVZ1NXUndVSEp2ZUhrZ1UzUjFZbHh5WEc0Z0lDb2dWR2hsSUdOdmJuTjBjblZqZEc5eUlHRmtaQ0JoSUd4cGMzUmxibVZ5SUdsdUlIUm9aU0J0WlhOellXZGxRblZ6SUhKbFkyVnBkbVZrSUdGdVpDQnpkR0Z5ZENCaElIZGxZaUIzYjNKclpYSWdkMmwwYUNCMGFHVWdhV1J3VUhKdmVIa2djbVZqWldsMlpXUmNjbHh1SUNBcVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0VlVrd3VVblZ1ZEdsdFpWVlNUSDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENCeWRXNTBhVzFsVUhKdmRHOVRkV0pWVWt4Y2NseHVJQ0FxSUVCd1lYSmhiU0FnZTAxbGMzTmhaMlV1VFdWemMyRm5aWDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpZFhOUWIzTjBUV1Z6YzJGblpTQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN1VISnZkRzlUZEhWaVJHVnpZM0pwY0hSdmNpNURiMjVtYVdkMWNtRjBhVzl1UkdGMFlVeHBjM1I5SUdOdmJtWnBaM1Z5WVhScGIyNGdJQ0FnSUNCamIyNW1hV2QxY21GMGFXOXVYSEpjYmlBZ0tpOWNjbHh1SUNCamIyNXpkSEoxWTNSdmNpaHlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1MQ0JpZFhNc0lHTnZibVpwWnlrZ2UxeHlYRzRnSUNBZ1kyOXVabWxuTG1SdmJXRnBiaUE5SUNkbmIyOW5iR1V1WTI5dEp6dGNjbHh1SUNBZ0lHTnZibVpwWnk1cFpIQlZjbXdnUFNBblpHOXRZV2x1TFdsa2NEb3ZMMmR2YjJkc1pTNWpiMjBuTzF4eVhHNGdJQ0FnWTI5dVptbG5MbWxrY0ZCeWIzaDVJRDBnU1dSd1VISnZlSGs3WEhKY2JpQWdJQ0JqYjI1bWFXY3VhV1J3U1c1bWJ5QTlJR2R2YjJkc1pVbHVabTg3WEhKY2JpQWdJQ0JqYjI1bWFXY3VZWEJwU1c1bWJ5QTlJR2R2YjJkc1pVRlFTVWx1Wm04N1hISmNiaUFnSUNCamIyNW1hV2N1WVdOalpYTnpWRzlyWlc1QmRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUWdQU0JoWTJObGMzTlViMnRsYmtGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWREdGNjbHh1SUNBZ0lHTnZibVpwWnk1aFkyTmxjM05VYjJ0bGJrVnVaSEJ2YVc1MElEMGdZV05qWlhOelZHOXJaVzVGYm1Sd2IybHVkRHRjY2x4dUlDQWdJR052Ym1acFp5NXlaV1p5WlhOb1FXTmpaWE56Vkc5clpXNUZibVJ3YjJsdWRDQTlJSEpsWm5KbGMyaEJZMk5sYzNOVWIydGxia1Z1WkhCdmFXNTBPMXh5WEc0Z0lDQWdZMjl1Wm1sbkxtRmpZMlZ6YzFSdmEyVnVTVzV3ZFhRZ1BTQmhZMk5sYzNOVWIydGxia2x1Y0hWME8xeHlYRzRnSUNBZ1kyOXVabWxuTG1GMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRDQTlJR0YxZEdodmNtbHpZWFJwYjI1RmJtUndiMmx1ZER0Y2NseHVJQ0FnSUdOdmJtWnBaeTVqYjI1MlpYSjBWWE5sY2xCeWIyWnBiR1VnUFNCamIyNTJaWEowVlhObGNsQnliMlpwYkdVN1hISmNiaUFnSUNCamIyNW1hV2N1YldGd2NHbHVaeUE5SUcxaGNIQnBibWM3WEhKY2JpQWdJQ0J6ZFhCbGNpaHlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1MQ0JpZFhNc0lHTnZibVpwWnlrN1hISmNiaUFnZlZ4eVhHNTlYSEpjYmx4eVhHNHZMeUJsZUhCdmNuUWdaR1ZtWVhWc2RDQkpaSEJRY205NGVWQnliM1J2VTNSMVlqdGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQlVieUJoWTNScGRtRjBaU0IwYUdseklIQnliM1J2WTI5c0lITjBkV0lzSUhWemFXNW5JSFJvWlNCellXMWxJRzFsZEdodlpDQm1iM0lnWVd4c0lIQnliM1J2YzNSMVlpNWNjbHh1SUNvZ1FIQmhjbUZ0SUNCN1ZWSk1MbEoxYm5ScGJXVlZVa3g5SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3Z2NuVnVkR2x0WlZCeWIzUnZVM1ZpVlZKTVhISmNiaUFxSUVCd1lYSmhiU0FnZTAxbGMzTmhaMlV1VFdWemMyRm5aWDBnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpZFhOUWIzTjBUV1Z6YzJGblpTQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJseHlYRzRnS2lCQWNHRnlZVzBnSUh0UWNtOTBiMU4wZFdKRVpYTmpjbWx3ZEc5eUxrTnZibVpwWjNWeVlYUnBiMjVFWVhSaFRHbHpkSDBnWTI5dVptbG5kWEpoZEdsdmJpQWdJQ0FnSUdOdmJtWnBaM1Z5WVhScGIyNWNjbHh1SUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlNCUFltcGxZM1FnZDJsMGFDQnVZVzFsSUdGdVpDQnBibk4wWVc1alpTQnZaaUJRY205MGIxTjBkV0pjY2x4dUlDb3ZYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJR0ZqZEdsMllYUmxLSFZ5YkN3Z1luVnpMQ0JqYjI1bWFXY3BJSHRjY2x4dUlDQnlaWFIxY200Z2UxeHlYRzRnSUNBZ2JtRnRaVG9nSjBkdmIyZHNaVWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlKeXhjY2x4dUlDQWdJR2x1YzNSaGJtTmxPaUJ1WlhjZ1IyOXZaMnhsU1dSd1VISnZlSGxRY205MGIxTjBkV0lvZFhKc0xDQmlkWE1zSUdOdmJtWnBaeWxjY2x4dUlDQjlPMXh5WEc1OVhISmNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUx5NHVMMlJsZGkxd2NtOTBiM04wZFdKekwzTnlZeTlwWkhCd2NtOTRlUzluYjI5bmJHVXZSMjl2WjJ4bFNXUndVSEp2ZUhsVGRIVmlMbWxrY0M1cWN5SmRMQ0p6YjNWeVkyVlNiMjkwSWpvaUluMD1cbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy8wXG4iKTsKCi8qKiovIH0pLAovKiAxICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKZXZhbCgiXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vLyBpbXBvcnQge2dldEV4cGlyZXN9IGZyb20gJy4vT0FVVEgnO1xuXG52YXIgaWRlbnRpdGllcyA9IHt9O1xudmFyIG5JZGVudGl0eSA9IDA7XG52YXIgcmVkaXJlY3RVUkkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICE9PSAnJyA/ICc6JyArIGxvY2F0aW9uLnBvcnQgOiAnJyk7XG5cbi8vbGV0IHRva2VuRW5kcG9pbnQ7XG4vL2xldCBhdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG52YXIgYWNjZXNzVG9rZW5FbmRwb2ludCA9IHZvaWQgMDtcbnZhciByZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludCA9IHZvaWQgMDtcbnZhciBkb21haW4gPSB2b2lkIDA7XG52YXIgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSB2b2lkIDA7XG5cbnZhciBnZXRFeHBpcmVzQXRKU09OID0gZXhwb3J0cy5nZXRFeHBpcmVzQXRKU09OID0gZnVuY3Rpb24gZ2V0RXhwaXJlc0F0SlNPTihqc29uKSB7XG4gIHZhciBleHBpcmVzID0ganNvbi5oYXNPd25Qcm9wZXJ0eSgnZXhwaXJlc19pbicpID8ganNvbi5leHBpcmVzX2luIDogZmFsc2U7XG5cbiAgaWYgKGV4cGlyZXMpIGV4cGlyZXMgPSBleHBpcmVzICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7ZWxzZSBleHBpcmVzID0gMzE1MzYwMDAwMCArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4gIHJldHVybiBOdW1iZXIoZXhwaXJlcyk7XG59O1xuXG52YXIgZ2V0RXhwaXJlcyA9IGV4cG9ydHMuZ2V0RXhwaXJlcyA9IGZ1bmN0aW9uIGdldEV4cGlyZXModXJsKSB7XG4gIHZhciBleHBpcmVzID0gdXJsUGFyc2VyKHVybCwgJ2V4cGlyZXNfaW4nKTtcblxuICBpZiAoZXhwaXJlcykgZXhwaXJlcyA9IGV4cGlyZXMgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtlbHNlIGV4cGlyZXMgPSAzMTUzNjAwMDAwICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgcmV0dXJuIE51bWJlcihleHBpcmVzKTtcbn07XG5cbi8vZnVuY3Rpb24gdG8gcGFyc2UgdGhlIHF1ZXJ5IHN0cmluZyBpbiB0aGUgZ2l2ZW4gVVJMIHRvIG9iYXRpbiBjZXJ0YWluIHZhbHVlc1xuZnVuY3Rpb24gdXJsUGFyc2VyKHVybCwgbmFtZSkge1xuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXFxcXScpO1xuICB2YXIgcmVnZXhTID0gJ1tcXFxcIyY/XScgKyBuYW1lICsgJz0oW14mI10qKSc7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTtcbiAgdmFyIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG4gIGlmIChyZXN1bHRzID09PSBudWxsKSByZXR1cm4gZmFsc2U7ZWxzZSByZXR1cm4gcmVzdWx0c1sxXTtcbn1cblxuZnVuY3Rpb24gc2VuZEhUVFBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGlmIFhEb21haW5SZXF1ZXN0LlxuICAgIC8vIFhEb21haW5SZXF1ZXN0IG9ubHkgZXhpc3RzIGluIElFLCBhbmQgaXMgSUUncyB3YXkgb2YgbWFraW5nIENPUlMgcmVxdWVzdHMuXG4gICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwpO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLlxuICAgIHhociA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoeGhyKSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgdmFyIGluZm8gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgICAgcmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWplY3QoJ0NPUlMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbnZhciBnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4gPSBmdW5jdGlvbiBnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4ocmVzb3VyY2VzLCB1cmwpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgY29kZSA9IHVybFBhcnNlcih1cmwsICdjb2RlJyk7XG5cbiAgICBpZiAoIWNvZGUpIHJlamVjdCgnW09JREMuZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuXSBjb2RlIG5vdCBpbmNsdWRlIGluIHRoZSB1cmw6ICcsIHVybCk7XG5cbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBhY2Nlc3NUb2tlbkVuZHBvaW50KGNvZGUpKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG5cbiAgICAgIGNvbnNvbGUuaW5mbygnW09JREMuZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuXSByZXNwb25zZTogJywgaW5mbyk7XG5cbiAgICAgIGlmIChpbmZvLmhhc093blByb3BlcnR5KCdhY2Nlc3NfdG9rZW4nKSkge1xuXG4gICAgICAgIHZhciBleHBpcmVzID0gZ2V0RXhwaXJlc0F0SlNPTihpbmZvKTtcbiAgICAgICAgdmFyIHJlZnJlc2ggPSBpbmZvLmhhc093blByb3BlcnR5KCdyZWZyZXNoX3Rva2VuJykgPyBpbmZvLnJlZnJlc2hfdG9rZW4gOiBmYWxzZTtcbiAgICAgICAgcmVzb2x2ZShhY2Nlc3NUb2tlblJlc3VsdChyZXNvdXJjZXMsIGluZm8uYWNjZXNzX3Rva2VuLCBleHBpcmVzLCBpbmZvLCByZWZyZXNoKSk7XG4gICAgICB9IGVsc2UgcmVqZWN0KCdbT0lEQy5nZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW5dIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAnLCBpbmZvKTtcbiAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfSk7XG4gIH0pO1xufTtcblxudmFyIGFjY2Vzc1Rva2VuUmVzdWx0ID0gZnVuY3Rpb24gYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgaW5wdXQsIHJlZnJlc2gpIHtcblxuICB2YXIgcmVzdWx0ID0geyBkb21haW46IGRvbWFpbiwgcmVzb3VyY2VzOiByZXNvdXJjZXMsIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbiwgZXhwaXJlczogZXhwaXJlcywgaW5wdXQ6IGlucHV0IH07XG5cbiAgaWYgKHJlZnJlc2gpIHJlc3VsdC5yZWZyZXNoID0gcmVmcmVzaDtcblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXHJcbiogRnVuY3Rpb24gdG8gZXhjaGFuZ2UgdGhlIGNvZGUgcmVjZWl2ZWQgdG8gdGhlIGlkIFRva2VuLCBhY2Nlc3MgdG9rZW4gYW5kIGEgcmVmcmVzaCB0b2tlblxyXG4qXHJcbiovXG4vKmxldCBleGNoYW5nZUNvZGUgPSAoZnVuY3Rpb24oY29kZSkge1xyXG4gIGxldCBpID0gZ29vZ2xlSW5mbztcclxuXHJcbiAgbGV0IFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjb2RlPScgKyBjb2RlICsgJyZjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWRpcmVjdF91cmk9JyArIGkucmVkaXJlY3RVUkkgKyAnJmdyYW50X3R5cGU9YXV0aG9yaXphdGlvbl9jb2RlJmFjY2Vzc190eXBlPScgKyBpLmFjY2Vzc1R5cGU7XHJcblxyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24oaW5mbykge1xyXG4gICAgICBjb25zb2xlLmxvZygnW09JREMuZXhjaGFuZ2VDb2RlXSByZXR1cm5lZCBpbmZvOiAnLCBpbmZvKTtcclxuICAgICAgcmVzb2x2ZShpbmZvKTtcclxuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxubGV0IGV4Y2hhbmdlUmVmcmVzaFRva2VuID0gKGZ1bmN0aW9uKHJlZnJlc2hUb2tlbikge1xyXG4gIGxldCBpID0gZ29vZ2xlSW5mbztcclxuXHJcbiAgbGV0IFVSTCA9IGkudG9rZW5FbmRwb2ludCArICdjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWZyZXNoX3Rva2VuPScgKyByZWZyZXNoVG9rZW4gKyAnJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlbic7XHJcblxyXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XHJcbiAgICAgIHJlc29sdmUoaW5mbyk7XHJcbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgfSk7XHJcblxyXG4gIH0pO1xyXG59KTsqL1xuXG4vKipcclxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eVxyXG4qL1xudmFyIElkcFByb3h5ID0gZXhwb3J0cy5JZHBQcm94eSA9IHtcblxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxyXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcclxuICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBpZGVudGl0eSBhc3NlcnRpb24gdmFsaWRhdGlvbiByZXN1bHRcclxuICAqL1xuICB2YWxpZGF0ZUFzc2VydGlvbjogZnVuY3Rpb24gdmFsaWRhdGVBc3NlcnRpb24oY29uZmlnLCBhc3NlcnRpb24sIG9yaWdpbikge1xuICAgIGNvbnNvbGUuaW5mbygnW09JREMudmFsaWRhdGVBc3NlcnRpb25Qcm94eV0gYXNzZXJ0aW9uOiAnLCBhdG9iKGFzc2VydGlvbikpO1xuICAgIC8vICAgIGNvbnNvbGUuaW5mbygndmFsaWRhdGVBc3NlcnRpb25Qcm94eTphdG9iKGFzc2VydGlvbiknLCBhdG9iKGFzc2VydGlvbikpO1xuXG4gICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZFxuICAgIC8vICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgIHZhciBkZWNvZGVkQ29udGVudDIgPSBhdG9iKGFzc2VydGlvbik7XG4gICAgdmFyIGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50Mik7XG4gICAgdmFyIGlkVG9rZW5TcGxpdGVkID0gY29udGVudC50b2tlbklELnNwbGl0KCcuJyk7XG4gICAgdmFyIGlkVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcblxuICAgIC8vcmVzb2x2ZSh7aWRlbnRpdHk6IGlkVG9rZW4uZW1haWwsIGNvbnRlbnRzOiBpZFRva2VuLm5vbmNlfSk7XG5cbiAgICAvL30pO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBpID0gY29uZmlnLmlkcEluZm87XG4gICAgICB2YXIgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XG4gICAgICB2YXIgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQpO1xuICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpLnRva2VuSW5mbyArIGNvbnRlbnQudG9rZW5JRCkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShyZXN1bHQpID09PSBKU09OLnN0cmluZ2lmeShjb250ZW50LnRva2VuSURKU09OKSkge1xuICAgICAgICAgIHJlc29sdmUoeyBpZGVudGl0eTogY29udGVudC50b2tlbklESlNPTi5lbWFpbCwgY29udGVudHM6IGNvbnRlbnQudG9rZW5JREpTT04gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdpbnZhbGlkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZWZyZXNoQXNzZXJ0aW9uOiBmdW5jdGlvbiByZWZyZXNoQXNzZXJ0aW9uKGlkZW50aXR5KSB7XG4gICAgY29uc29sZS5sb2coJ09JREMucmVmcmVzaEFzc2VydGlvbjpvbGRJZGVudGl0eScsIGlkZW50aXR5KTtcbiAgICAvLyAgICBsZXQgaSA9IGdvb2dsZUluZm87XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgLyogICAgICBpZiAoaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4pIHtcclxuICAgICAgICAgICAgICBleGNoYW5nZVJlZnJlc2hUb2tlbihpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcclxuICAgICAgXHJcbiAgICAgICAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiBpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbiwgdG9rZW5UeXBlOiBpZGVudGl0eS5pbmZvLnRva2VuVHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xyXG4gICAgICAgICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XHJcbiAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXHJcbiAgICAgICAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XHJcbiAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjtcclxuICAgICAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbi5leHA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsO1xyXG4gICAgICBcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb2xkSURUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZGVudGl0eS5hc3NlcnRpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb2xkSWRUb2tlblNwbGl0ZWQgPSBvbGRJRFRva2VuLnRva2VuSUQuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb2xkRGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2Iob2xkSWRUb2tlblNwbGl0ZWRbMV0pKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaWROb25jZSA9IG9sZERlY29kZWRJRFRva2VuLm5vbmNlO1xyXG4gICAgICBcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVjZWl2ZWRJRFRva2VuID0gdmFsdWUuaWRfdG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gcmVjZWl2ZWRJRFRva2VuLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XHJcbiAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGRlY29kZWRJRFRva2VuLm5vbmNlID0gaWROb25jZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5zZXJ0ZWROb25jZSA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoZGVjb2RlZElEVG9rZW4pKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3SURUb2tlbiA9IGlkVG9rZW5TcGxpdGVkWzBdICsgJy4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWROb25jZSArICcuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkVG9rZW5TcGxpdGVkWzJdO1xyXG4gICAgICBcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogbmV3SURUb2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkcEJ1bmRsZSA9IHtkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJ307XHJcbiAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpuZXdJZGVudGl0eScsIHJldHVyblZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSovXG4gICAgICByZXNvbHZlKGlkZW50aXR5KTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxyXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtICB7aWRwSW5mb30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xyXG4gICogQHBhcmFtICB7Y29udGVudHN9IFRoZSBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcclxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cclxuICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlclxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cclxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbjogZnVuY3Rpb24gZ2VuZXJhdGVBc3NlcnRpb24oY29uZmlnLCBjb250ZW50cywgb3JpZ2luLCBoaW50KSB7XG4gICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcbiAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XG4gICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uOmhpbnRdJywgaGludCk7XG4gICAgdmFyIGkgPSBjb25maWcuaWRwSW5mbztcblxuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXG4gICAgLy9UT0RPIGxhdGVyIHNob3VsZCBiZSBkZWZpbmVkIGEgYmV0dGVyIGFwcHJvYWNoXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmICghaGludCkge1xuICAgICAgICAvKnRyeSB7XHJcbiAgICAgICAgICBpZiAod2luZG93KSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoJ3VybCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7Ki9cblxuICAgICAgICB2YXIgcmVxdWVzdFVybCA9IGkuYXV0aG9yaXNhdGlvbkVuZHBvaW50ICsgJ3JlZGlyZWN0X3VyaT0nICsgcmVkaXJlY3RVUkkgKyAnJnByb21wdD1jb25zZW50JnJlc3BvbnNlX3R5cGU9JyArIGkudHlwZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZzY29wZT0nICsgaS5zY29wZSArICcmYWNjZXNzX3R5cGU9JyArIGkuYWNjZXNzVHlwZSArICcmbm9uY2U9JyArIGNvbnRlbnRzICsgJyZzdGF0ZT0nICsgaS5zdGF0ZTtcblxuICAgICAgICAvLyAgICAgICAgbGV0IHJlcXVlc3RVcmwgPSBpLmF1dGhvcmlzYXRpb25FbmRwb2ludCArICdzY29wZT0nICsgaS5zY29wZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZyZWRpcmVjdF91cmk9JyArIGkucmVkaXJlY3RVUkkgKyAnJnJlc3BvbnNlX3R5cGU9Y29kZScgKyAvKmkudHlwZSArKi8gJyZzdGF0ZT0nICsgaS5zdGF0ZSArICcmcHJvbXB0PWNvbnNlbnQmYWNjZXNzX3R5cGU9JyArIGkuYWNjZXNzVHlwZSArICcmbm9uY2U9JyArIGNvbnRlbnRzO1xuICAgICAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb25dIE5PX0hJTlQ6IHJlamVjdGluZyB3aXRoIHJlcXVlc3RVcmwgJywgcmVxdWVzdFVybCk7XG5cbiAgICAgICAgcmVqZWN0KHsgbmFtZTogJ0lkUExvZ2luRXJyb3InLCBsb2dpblVybDogcmVxdWVzdFVybCB9KTtcblxuICAgICAgICAvLyAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdGhlIHJlcXVlc3QgaGF2ZSBhbHJlYWR5IGJlZW4gbWFkZSwgc28gaWRwUFJveHkgd2lsbCBleGNoYW5nZSB0aGUgdG9rZW5zIGFsb25nIHRvIHRoZSBpZHAsIHRvIG9idGFpbiB0aGUgaW5mb3JtYXRpb24gbmVjZXNzYXJ5XG4gICAgICAgIHZhciBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnYWNjZXNzX3Rva2VuJyk7XG4gICAgICAgIHZhciBpZFRva2VuID0gdXJsUGFyc2VyKGhpbnQsICdpZF90b2tlbicpO1xuICAgICAgICB2YXIgY29kZSA9IHVybFBhcnNlcihoaW50LCAnY29kZScpO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coJ0dPT0dMRV9QUk9YWV9ISU5UOiAnLCBoaW50KTtcblxuICAgICAgICAvLyAgICAgICBleGNoYW5nZUNvZGUoY29kZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyAgICAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIGV4Y2hhbmdlZCBUb2tlbiAnLCB2YWx1ZSk7XG5cbiAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXJcbiAgICAgICAgLy9sZXQgaW5mb1Rva2VuVVJMID0gaS51c2VyaW5mbyArIHZhbHVlLmFjY2Vzc190b2tlbjtcbiAgICAgICAgdmFyIGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyBhY2Nlc3NUb2tlbjtcbiAgICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdHRVQnLCBpbmZvVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24gKGluZm9Ub2tlbikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbl0gb2J0YWluZWQgaW5mb1Rva2VuICcsIGluZm9Ub2tlbik7XG5cbiAgICAgICAgICAvLyAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiB2YWx1ZS5yZWZyZXNoX3Rva2VuLCB0b2tlblR5cGU6IHZhbHVlLnRva2VuX3R5cGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcblxuICAgICAgICAgIC8vICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuO1xuICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRUb2tlbjogaWRUb2tlbixcclxuICAgICAgICAgIC8vICAgICAgICAgICAgICByZWZyZXNoVG9rZW46IHZhbHVlLnJlZnJlc2hfdG9rZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuVHlwZTogJ0JlYXJlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZm9Ub2tlbjogaW5mb1Rva2VuXHJcbiAgICAgICAgICAgICAgICAgICAgICB9OyovXG5cbiAgICAgICAgICB2YXIgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgaWRUb2tlbjtcblxuICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIGlkVG9rZW5cbiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24gKGlkVG9rZW5KU09OKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIGlkVG9rZW4gJywgaWRUb2tlbkpTT04pO1xuXG4gICAgICAgICAgICAvKiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUudG9rZW5JREpTT04gPSBpZFRva2VuSlNPTjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbkpTT04uZXhwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmVtYWlsID0gaWRUb2tlbkpTT04uZW1haWw7Ki9cblxuICAgICAgICAgICAgdmFyIGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoeyB0b2tlbklEOiBpZFRva2VuLCB0b2tlbklESlNPTjogaWRUb2tlbkpTT04gfSkpO1xuICAgICAgICAgICAgdmFyIGlkcEJ1bmRsZSA9IHsgZG9tYWluOiBpLmRvbWFpbiwgcHJvdG9jb2w6ICdPSURDJyB9O1xuXG4gICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgICAgICAgIC8vIFRPRE8gcmVwbGFjZSBcInJlZnJlc2g6IHRydWVcIiBieSB0aGUgcmVhbCByZWZyZXNoIHRva2VuXG4gICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSB7IGFzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgZXhwaXJlczogaWRUb2tlbkpTT04uZXhwLCB1c2VyUHJvZmlsZTogaW5mb1Rva2VuLCByZWZyZXNoOiB0cnVlIH07XG5cbiAgICAgICAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xuICAgICAgICAgICAgKytuSWRlbnRpdHk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbl0gcmV0dXJuaW5nOiAnLCBKU09OLnN0cmluZ2lmeShyZXR1cm5WYWx1ZSkpO1xuXG4gICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuXG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8qICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTsqL1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gZ2V0IGFuIEFjY2VzcyBUb2tlbiBlbmRwb2ludFxyXG4gICpcclxuICAqIEBwYXJhbSAge2NvbmZpZ30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xyXG4gICogQHBhcmFtICB7cmVzb3VyY2VzfSBPYmplY3QgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxyXG4gICovXG5cbiAgZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6IGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50KGNvbmZpZywgcmVzb3VyY2VzKSB7XG4gICAgY29uc29sZS5sb2coJ1tPSURDLmdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50OmNvbmZpZ10nLCBjb25maWcpO1xuICAgIC8vICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XG4gICAgLy8gICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDpyZXNvdXJjZXNdJywgcmVzb3VyY2VzKTtcbiAgICAvLyAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG4gICAgdmFyIG1hcHBpbmcgPSBjb25maWcubWFwcGluZztcblxuICAgIHZhciBfdGhpcyA9IHVuZGVmaW5lZDtcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAvLyBUT0RPIHJlcGxhY2UgYnkgcmVzb3VyY2VzWzBdXG4gICAgICByZXNvbHZlKGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50KG1hcHBpbmcocmVzb3VyY2VzKSkpO1xuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cclxuICAqXHJcbiAgKiBAcGFyYW0gIHtsb2dpbn0gb3B0aW9uYWwgbG9naW4gcmVzdWx0XHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxyXG4gICovXG5cbiAgZ2V0QWNjZXNzVG9rZW46IGZ1bmN0aW9uIGdldEFjY2Vzc1Rva2VuKGNvbmZpZywgcmVzb3VyY2VzLCBsb2dpbikge1xuICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZXRBY2Nlc3NUb2tlbjpjb25maWddJywgY29uZmlnKTtcbiAgICAvLyAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuICAgIC8vICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW09JREMuZ2V0QWNjZXNzVG9rZW46bG9naW5dJywgbG9naW4pO1xuICAgIC8vICAgIGxldCBpID0gaWRwSW5mbztcbiAgICBhY2Nlc3NUb2tlbkVuZHBvaW50ID0gY29uZmlnLmFjY2Vzc1Rva2VuRW5kcG9pbnQ7XG4gICAgZG9tYWluID0gY29uZmlnLmRvbWFpbjtcblxuICAgIHZhciBfdGhpcyA9IHVuZGVmaW5lZDtcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAvLyB0aGUgdXNlciBpcyBsb2dnZWRpbiwgdHJ5IHRvIGV4dHJhY3QgdGhlIEFjY2VzcyBUb2tlbiBhbmQgaXRzIGV4cGlyZXNcbiAgICAgIHZhciBleHBpcmVzID0gZ2V0RXhwaXJlcyhsb2dpbik7XG5cbiAgICAgIHZhciBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihsb2dpbiwgJ2FjY2Vzc190b2tlbicpO1xuXG4gICAgICBpZiAoYWNjZXNzVG9rZW4pIHJlc29sdmUoYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgbG9naW4pKTtlbHNlIHJlc29sdmUoZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuKHJlc291cmNlcywgbG9naW4pKTtcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICByZWplY3QoZSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgLyoqXHJcbiAgICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cclxuICAgICpcclxuICAgICogQHBhcmFtICB7bG9naW59IG9wdGlvbmFsIGxvZ2luIHJlc3VsdFxyXG4gICAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxyXG4gICAgKi9cblxuICByZWZyZXNoQWNjZXNzVG9rZW46IGZ1bmN0aW9uIHJlZnJlc2hBY2Nlc3NUb2tlbihjb25maWcsIHRva2VuKSB7XG4gICAgY29uc29sZS5sb2coJ1tPSURDLnJlZnJlc2hBY2Nlc3NUb2tlbjpjb25maWddJywgY29uZmlnKTtcbiAgICAvLyAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xuICAgIC8vICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcbiAgICBjb25zb2xlLmxvZygnW09JREMucmVmcmVzaEFjY2Vzc1Rva2VuOm91dGRhdGVkIHRva2VuXScsIHRva2VuKTtcbiAgICAvLyAgICBsZXQgaSA9IGlkcEluZm87XG4gICAgcmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBjb25maWcucmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQ7XG4gICAgZG9tYWluID0gY29uZmlnLmRvbWFpbjtcblxuICAgIHZhciBfdGhpcyA9IHVuZGVmaW5lZDtcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAvLyB0aGUgdXNlciBpcyBsb2dnZWRpbiwgdHJ5IHRvIGV4dHJhY3QgdGhlIEFjY2VzcyBUb2tlbiBhbmQgaXRzIGV4cGlyZXNcblxuICAgICAgdmFyIHJlZnJlc2ggPSB0b2tlbi5yZWZyZXNoO1xuXG4gICAgICBpZiAoIXJlZnJlc2gpIHJlamVjdCgnW09JREMucmVmcmVzaEFjY2Vzc1Rva2VuXSByZWZyZXNoIHRva2VuIG5vdCBhdmFpbGFibGUgaW4gdGhlIGFjY2VzcyB0b2tlbicsIHRva2VuKTtcblxuICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgcmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQocmVmcmVzaCkpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcblxuICAgICAgICBjb25zb2xlLmluZm8oJ1tPSURDLnJlZnJlc2hBY2Nlc3NUb2tlbl0gcmVzcG9uc2U6ICcsIGluZm8pO1xuXG4gICAgICAgIGlmIChpbmZvLmhhc093blByb3BlcnR5KCdhY2Nlc3NfdG9rZW4nKSkge1xuXG4gICAgICAgICAgdmFyIGV4cGlyZXMgPSBnZXRFeHBpcmVzQXRKU09OKGluZm8pO1xuICAgICAgICAgIHJlc29sdmUoYWNjZXNzVG9rZW5SZXN1bHQodG9rZW4ucmVzb3VyY2VzLCBpbmZvLmFjY2Vzc190b2tlbiwgZXhwaXJlcywgaW5mbywgcmVmcmVzaCkpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KCdbT0lEQy5yZWZyZXNoQWNjZXNzVG9rZW5dIG5ldyBhY2Nlc3MgdG9rZW4gbm90IHJldHVybmVkIGluIHRoZSByZXNwb25zZTogJywgaW5mbyk7XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uIChlKSB7XG5cbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfVxufTsvLyMgc291cmNlVVJMPVttb2R1bGVdXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk4dUxpOWtaWFl0Y0hKdmRHOXpkSFZpY3k5emNtTXZhV1J3Y0hKdmVIa3ZUMGxFUXk1cWN6OHhOekk0SWwwc0ltNWhiV1Z6SWpwYkltbGtaVzUwYVhScFpYTWlMQ0p1U1dSbGJuUnBkSGtpTENKeVpXUnBjbVZqZEZWU1NTSXNJbXh2WTJGMGFXOXVJaXdpY0hKdmRHOWpiMndpTENKb2IzTjBibUZ0WlNJc0luQnZjblFpTENKaFkyTmxjM05VYjJ0bGJrVnVaSEJ2YVc1MElpd2ljbVZtY21WemFFRmpZMlZ6YzFSdmEyVnVSVzVrY0c5cGJuUWlMQ0prYjIxaGFXNGlMQ0poWTJObGMzTlViMnRsYmtGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRDSXNJbWRsZEVWNGNHbHlaWE5CZEVwVFQwNGlMQ0pxYzI5dUlpd2laWGh3YVhKbGN5SXNJbWhoYzA5M2JsQnliM0JsY25SNUlpd2laWGh3YVhKbGMxOXBiaUlzSWsxaGRHZ2lMQ0ptYkc5dmNpSXNJa1JoZEdVaUxDSnViM2NpTENKT2RXMWlaWElpTENKblpYUkZlSEJwY21Weklpd2lkWEpzSWl3aWRYSnNVR0Z5YzJWeUlpd2libUZ0WlNJc0luSmxjR3hoWTJVaUxDSnlaV2RsZUZNaUxDSnlaV2RsZUNJc0lsSmxaMFY0Y0NJc0luSmxjM1ZzZEhNaUxDSmxlR1ZqSWl3aWMyVnVaRWhVVkZCU1pYRjFaWE4wSWl3aWJXVjBhRzlrSWl3aWVHaHlJaXdpV0UxTVNIUjBjRkpsY1hWbGMzUWlMQ0p2Y0dWdUlpd2lXRVJ2YldGcGJsSmxjWFZsYzNRaUxDSlFjbTl0YVhObElpd2ljbVZ6YjJ4MlpTSXNJbkpsYW1WamRDSXNJbTl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU0lzSW1VaUxDSnlaV0ZrZVZOMFlYUmxJaXdpYzNSaGRIVnpJaXdpYVc1bWJ5SXNJa3BUVDA0aUxDSndZWEp6WlNJc0luSmxjM0J2Ym5ObFZHVjRkQ0lzSW5ObGJtUWlMQ0puWlhSQlkyTmxjM05VYjJ0bGJsZHBkR2hEYjJSbFZHOXJaVzRpTENKeVpYTnZkWEpqWlhNaUxDSmpiMlJsSWl3aWRHaGxiaUlzSW1OdmJuTnZiR1VpTENKeVpXWnlaWE5vSWl3aWNtVm1jbVZ6YUY5MGIydGxiaUlzSW1GalkyVnpjMVJ2YTJWdVVtVnpkV3gwSWl3aVlXTmpaWE56WDNSdmEyVnVJaXdpWlhKeWIzSWlMQ0poWTJObGMzTlViMnRsYmlJc0ltbHVjSFYwSWl3aWNtVnpkV3gwSWl3aVNXUndVSEp2ZUhraUxDSjJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJpSXNJbU52Ym1acFp5SXNJbUZ6YzJWeWRHbHZiaUlzSW05eWFXZHBiaUlzSW1GMGIySWlMQ0prWldOdlpHVmtRMjl1ZEdWdWRESWlMQ0pqYjI1MFpXNTBJaXdpYVdSVWIydGxibE53YkdsMFpXUWlMQ0owYjJ0bGJrbEVJaXdpYzNCc2FYUWlMQ0pwWkZSdmEyVnVJaXdpYVNJc0ltbGtjRWx1Wm04aUxDSmtaV052WkdWa1EyOXVkR1Z1ZENJc0luUnZhMlZ1U1c1bWJ5SXNJbk4wY21sdVoybG1lU0lzSW5SdmEyVnVTVVJLVTA5T0lpd2lhV1JsYm5ScGRIa2lMQ0psYldGcGJDSXNJbU52Ym5SbGJuUnpJaXdpWTJGMFkyZ2lMQ0psY25JaUxDSnlaV1p5WlhOb1FYTnpaWEowYVc5dUlpd2liRzluSWl3aVoyVnVaWEpoZEdWQmMzTmxjblJwYjI0aUxDSm9hVzUwSWl3aWNtVnhkV1Z6ZEZWeWJDSXNJbUYxZEdodmNtbHpZWFJwYjI1RmJtUndiMmx1ZENJc0luUjVjR1VpTENKamJHbGxiblJKUkNJc0luTmpiM0JsSWl3aVlXTmpaWE56Vkhsd1pTSXNJbk4wWVhSbElpd2liRzluYVc1VmNtd2lMQ0pwYm1adlZHOXJaVzVWVWt3aUxDSjFjMlZ5YVc1bWJ5SXNJbWx1Wm05VWIydGxiaUlzSW1sa1ZHOXJaVzVWVWt3aUxDSnBaRlJ2YTJWdVNsTlBUaUlzSW1KMGIyRWlMQ0pwWkhCQ2RXNWtiR1VpTENKeVpYUjFjbTVXWVd4MVpTSXNJbWxrY0NJc0ltVjRjQ0lzSW5WelpYSlFjbTltYVd4bElpd2laMlYwUVdOalpYTnpWRzlyWlc1QmRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUWlMQ0p0WVhCd2FXNW5JaXdpWDNSb2FYTWlMQ0puWlhSQlkyTmxjM05VYjJ0bGJpSXNJbXh2WjJsdUlpd2ljbVZtY21WemFFRmpZMlZ6YzFSdmEyVnVJaXdpZEc5clpXNGlYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFN08wRkJSVUVzU1VGQlNVRXNZVUZCWVN4RlFVRnFRanRCUVVOQkxFbEJRVWxETEZsQlFWa3NRMEZCYUVJN1FVRkRRU3hKUVVGSlF5eGpRVUZqUXl4VFFVRlRReXhSUVVGVUxFZEJRVzlDTEVsQlFYQkNMRWRCUVRKQ1JDeFRRVUZUUlN4UlFVRndReXhKUVVGblJFWXNVMEZCVTBjc1NVRkJWQ3hMUVVGclFpeEZRVUZzUWl4SFFVRjFRaXhOUVVGTlNDeFRRVUZUUnl4SlFVRjBReXhIUVVFMlF5eEZRVUUzUml4RFFVRnNRanM3UVVGSFFUdEJRVU5CTzBGQlEwRXNTVUZCU1VNc05FSkJRVW83UVVGRFFTeEpRVUZKUXl4dFEwRkJTanRCUVVOQkxFbEJRVWxETEdWQlFVbzdRVUZEUVN4SlFVRkpReXg1UTBGQlNqczdRVUZGVHl4SlFVRkpReXc0UTBGQmIwSXNVMEZCY0VKQkxHZENRVUZ2UWl4RFFVRlZReXhKUVVGV0xFVkJRV2RDTzBGQlF6ZERMRTFCUVVsRExGVkJRVlZFTEV0QlFVdEZMR05CUVV3c1EwRkJiMElzV1VGQmNFSXNTVUZCYjBOR0xFdEJRVXRITEZWQlFYcERMRWRCUVhORUxFdEJRWEJGT3p0QlFVVkJMRTFCUVVsR0xFOUJRVW9zUlVGQllVRXNWVUZCVlVFc1ZVRkJWVWNzUzBGQlMwTXNTMEZCVEN4RFFVRlhReXhMUVVGTFF5eEhRVUZNTEV0QlFXRXNTVUZCZUVJc1EwRkJjRUlzUTBGQllpeExRVU5MVGl4VlFVRlZMR0ZCUVdGSExFdEJRVXRETEV0QlFVd3NRMEZCVjBNc1MwRkJTME1zUjBGQlRDeExRVUZoTEVsQlFYaENMRU5CUVhaQ096dEJRVVZNTEZOQlFVOURMRTlCUVU5UUxFOUJRVkFzUTBGQlVEdEJRVVZFTEVOQlVrMDdPMEZCVlVFc1NVRkJTVkVzYTBOQlFXTXNVMEZCWkVFc1ZVRkJZeXhEUVVGVlF5eEhRVUZXTEVWQlFXVTdRVUZEZEVNc1RVRkJTVlFzVlVGQlZWVXNWVUZCVlVRc1IwRkJWaXhGUVVGbExGbEJRV1lzUTBGQlpEczdRVUZGUVN4TlFVRkpWQ3hQUVVGS0xFVkJRV0ZCTEZWQlFWVkJMRlZCUVZWSExFdEJRVXRETEV0QlFVd3NRMEZCVjBNc1MwRkJTME1zUjBGQlRDeExRVUZoTEVsQlFYaENMRU5CUVhCQ0xFTkJRV0lzUzBGRFMwNHNWVUZCVlN4aFFVRmhSeXhMUVVGTFF5eExRVUZNTEVOQlFWZERMRXRCUVV0RExFZEJRVXdzUzBGQllTeEpRVUY0UWl4RFFVRjJRanM3UVVGRlRDeFRRVUZQUXl4UFFVRlBVQ3hQUVVGUUxFTkJRVkE3UVVGRlJDeERRVkpOT3p0QlFWVlFPMEZCUTBFc1UwRkJVMVVzVTBGQlZDeERRVUZ0UWtRc1IwRkJia0lzUlVGQmQwSkZMRWxCUVhoQ0xFVkJRVGhDTzBGQlF6VkNRU3hUUVVGUFFTeExRVUZMUXl4UFFVRk1MRU5CUVdFc1RVRkJZaXhGUVVGeFFpeE5RVUZ5UWl4RlFVRTJRa0VzVDBGQk4wSXNRMEZCY1VNc1RVRkJja01zUlVGQk5rTXNUVUZCTjBNc1EwRkJVRHRCUVVOQkxFMUJRVWxETEZOQlFWTXNXVUZCV1VZc1NVRkJXaXhIUVVGdFFpeFhRVUZvUXp0QlFVTkJMRTFCUVVsSExGRkJRVkVzU1VGQlNVTXNUVUZCU2l4RFFVRlhSaXhOUVVGWUxFTkJRVm83UVVGRFFTeE5RVUZKUnl4VlFVRlZSaXhOUVVGTlJ5eEpRVUZPTEVOQlFWZFNMRWRCUVZnc1EwRkJaRHRCUVVOQkxFMUJRVWxQTEZsQlFWa3NTVUZCYUVJc1JVRkRRU3hQUVVGUExFdEJRVkFzUTBGRVFTeExRVWRCTEU5QlFVOUJMRkZCUVZFc1EwRkJVaXhEUVVGUU8wRkJRMFE3TzBGQlJVUXNVMEZCVTBVc1pVRkJWQ3hEUVVGNVFrTXNUVUZCZWtJc1JVRkJhVU5XTEVkQlFXcERMRVZCUVhORE8wRkJRM0JETEUxQlFVbFhMRTFCUVUwc1NVRkJTVU1zWTBGQlNpeEZRVUZXTzBGQlEwRXNUVUZCU1N4eFFrRkJjVUpFTEVkQlFYcENMRVZCUVRoQ08wRkJRelZDUVN4UlFVRkpSU3hKUVVGS0xFTkJRVk5JTEUxQlFWUXNSVUZCYVVKV0xFZEJRV3BDTEVWQlFYTkNMRWxCUVhSQ08wRkJRMFFzUjBGR1JDeE5RVVZQTEVsQlFVa3NUMEZCVDJNc1kwRkJVQ3hKUVVGNVFpeFhRVUUzUWl4RlFVRXdRenRCUVVNdlF6dEJRVU5CTzBGQlEwRklMRlZCUVUwc1NVRkJTVWNzWTBGQlNpeEZRVUZPTzBGQlEwRklMRkZCUVVsRkxFbEJRVW9zUTBGQlUwZ3NUVUZCVkN4RlFVRnBRbFlzUjBGQmFrSTdRVUZEUkN4SFFVeE5MRTFCUzBFN1FVRkRURHRCUVVOQlZ5eFZRVUZOTEVsQlFVNDdRVUZEUkR0QlFVTkVMRk5CUVU4c1NVRkJTVWtzVDBGQlNpeERRVUZaTEZWQlFWTkRMRTlCUVZRc1JVRkJhVUpETEUxQlFXcENMRVZCUVhsQ08wRkJRekZETEZGQlFVbE9MRWRCUVVvc1JVRkJVenRCUVVOUVFTeFZRVUZKVHl4clFrRkJTaXhIUVVGNVFpeFZRVUZUUXl4RFFVRlVMRVZCUVZrN1FVRkRia01zV1VGQlNWSXNTVUZCU1ZNc1ZVRkJTaXhMUVVGdFFpeERRVUYyUWl4RlFVRXdRanRCUVVONFFpeGpRVUZKVkN4SlFVRkpWU3hOUVVGS0xFdEJRV1VzUjBGQmJrSXNSVUZCZDBJN1FVRkRkRUlzWjBKQlFVbERMRTlCUVU5RExFdEJRVXRETEV0QlFVd3NRMEZCVjJJc1NVRkJTV01zV1VGQlppeERRVUZZTzBGQlEwRlVMRzlDUVVGUlRTeEpRVUZTTzBGQlEwUXNWMEZJUkN4TlFVZFBMRWxCUVVsWUxFbEJRVWxWTEUxQlFVb3NTMEZCWlN4SFFVRnVRaXhGUVVGM1FqdEJRVU0zUWtvc2JVSkJRVThzZVVOQlFWQTdRVUZEUkN4WFFVWk5MRTFCUlVFN1FVRkRURUVzYlVKQlFVOHNORU5CUVZBN1FVRkRSRHRCUVVOR08wRkJRMFlzVDBGWVJEdEJRVmxCVGl4VlFVRkpaU3hKUVVGS08wRkJRMFFzUzBGa1JDeE5RV05QTzBGQlEweFVMR0ZCUVU4c2IwSkJRVkE3UVVGRFJEdEJRVU5HTEVkQmJFSk5MRU5CUVZBN1FVRnRRa1E3TzBGQlJVUXNTVUZCU1ZVc09FSkJRU3RDTEZOQlFTOUNRU3d5UWtGQkswSXNRMEZCVlVNc1UwRkJWaXhGUVVGeFFqVkNMRWRCUVhKQ0xFVkJRVEJDTzBGQlF6TkVMRk5CUVU4c1NVRkJTV1VzVDBGQlNpeERRVUZaTEZWQlFWVkRMRTlCUVZZc1JVRkJiVUpETEUxQlFXNUNMRVZCUVRKQ08wRkJRelZETEZGQlFVbFpMRTlCUVU4MVFpeFZRVUZWUkN4SFFVRldMRVZCUVdVc1RVRkJaaXhEUVVGWU96dEJRVVZCTEZGQlFVa3NRMEZCUXpaQ0xFbEJRVXdzUlVGQlYxb3NUMEZCVHl4clJVRkJVQ3hGUVVFeVJXcENMRWRCUVRORk96dEJRVVZVVXl4dlFrRkJaMElzVFVGQmFFSXNSVUZCZDBKNFFpeHZRa0ZCYjBJMFF5eEpRVUZ3UWl4RFFVRjRRaXhGUVVGdFJFTXNTVUZCYmtRc1EwRkJkMFFzVlVGQlZWSXNTVUZCVml4RlFVRm5RanM3UVVGRmRFVlRMR05CUVZGVUxFbEJRVklzUTBGQllTd3JRMEZCWWl4RlFVRTRSRUVzU1VGQk9VUTdPMEZCUlVFc1ZVRkJTVUVzUzBGQlN6bENMR05CUVV3c1EwRkJiMElzWTBGQmNFSXNRMEZCU2l4RlFVRjVRenM3UVVGRmRrTXNXVUZCU1VRc1ZVRkJWVVlzYVVKQlFXbENhVU1zU1VGQmFrSXNRMEZCWkR0QlFVTkJMRmxCUVVsVkxGVkJRVlZXTEV0QlFVczVRaXhqUVVGTUxFTkJRVzlDTEdWQlFYQkNMRWxCUVhWRE9FSXNTMEZCUzFjc1lVRkJOVU1zUjBGQk5FUXNTMEZCTVVVN1FVRkRRV3BDTEdkQ1FVRlRhMElzYTBKQlFXdENUaXhUUVVGc1FpeEZRVUUyUWs0c1MwRkJTMkVzV1VGQmJFTXNSVUZCWjBRMVF5eFBRVUZvUkN4RlFVRjVSQ3RDTEVsQlFYcEVMRVZCUVN0RVZTeFBRVUV2UkN4RFFVRlVPMEZCUTBRc1QwRk1SQ3hOUVV0UFppeFBRVUZQTERSR1FVRlFMRVZCUVhGSFN5eEpRVUZ5Unp0QlFVTlNMRXRCVmtRc1JVRlZSeXhWUVVGVll5eExRVUZXTEVWQlFXbENPMEZCUTJ4Q2JrSXNZVUZCVDIxQ0xFdEJRVkE3UVVGRFJDeExRVnBFTzBGQlkwZ3NSMEZ1UWswc1EwRkJVRHRCUVc5Q1JDeERRWEpDUkRzN1FVRjFRa0VzU1VGQlNVWXNiMEpCUVhGQ0xGTkJRWEpDUVN4cFFrRkJjVUlzUTBGQlZVNHNVMEZCVml4RlFVRnhRbE1zVjBGQmNrSXNSVUZCYTBNNVF5eFBRVUZzUXl4RlFVRXlReXRETEV0QlFUTkRMRVZCUVd0RVRpeFBRVUZzUkN4RlFVRXlSRHM3UVVGRmJFWXNUVUZCU1U4c1UwRkJVeXhGUVVGRmNFUXNVVUZCVVVFc1RVRkJWaXhGUVVGclFubERMRmRCUVZkQkxGTkJRVGRDTEVWQlFYZERVeXhoUVVGaFFTeFhRVUZ5UkN4RlFVRnJSVGxETEZOQlFWTkJMRTlCUVRORkxFVkJRVzlHSzBNc1QwRkJUMEVzUzBGQk0wWXNSVUZCWWpzN1FVRkZRU3hOUVVGSlRpeFBRVUZLTEVWQlFXRlBMRTlCUVU5UUxFOUJRVkFzUjBGQmFVSkJMRTlCUVdwQ096dEJRVVZpTEZOQlFVOVBMRTFCUVZBN1FVRkZSQ3hEUVZKRU96dEJRVmRCT3pzN08wRkJTVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJaME5CT3pzN1FVRkhUeXhKUVVGSlF5dzRRa0ZCVnpzN1FVRkZjRUk3T3pzN096czdPenRCUVZOQlF5eHhRa0ZCYlVJc01rSkJRVU5ETEUxQlFVUXNSVUZCVTBNc1UwRkJWQ3hGUVVGdlFrTXNUVUZCY0VJc1JVRkJLMEk3UVVGRGFFUmlMRmxCUVZGVUxFbEJRVklzUTBGQllTd3lRMEZCWWl4RlFVRXdSSFZDTEV0QlFVdEdMRk5CUVV3c1EwRkJNVVE3UVVGRFNqczdRVUZGU1R0QlFVTkdPenRCUVVWSkxGRkJRVWxITEd0Q1FVRnJRa1FzUzBGQlMwWXNVMEZCVEN4RFFVRjBRanRCUVVOQkxGRkJRVWxKTEZWQlFWVjRRaXhMUVVGTFF5eExRVUZNTEVOQlFWZHpRaXhsUVVGWUxFTkJRV1E3UVVGRFFTeFJRVUZKUlN4cFFrRkJhVUpFTEZGQlFWRkZMRTlCUVZJc1EwRkJaMEpETEV0QlFXaENMRU5CUVhOQ0xFZEJRWFJDTEVOQlFYSkNPMEZCUTBFc1VVRkJTVU1zVlVGQlZUVkNMRXRCUVV0RExFdEJRVXdzUTBGQlYzRkNMRXRCUVV0SExHVkJRV1VzUTBGQlppeERRVUZNTEVOQlFWZ3NRMEZCWkRzN1FVRkZRVHM3UVVGRlJqczdRVUZGUVN4WFFVRlBMRWxCUVVscVF5eFBRVUZLTEVOQlFWa3NWVUZCVTBNc1QwRkJWQ3hGUVVGcFFrTXNUVUZCYWtJc1JVRkJlVUk3UVVGRE1VTXNWVUZCU1cxRExFbEJRVWxXTEU5QlFVOVhMRTlCUVdZN1FVRkRRU3hWUVVGSlF5eHBRa0ZCYVVKVUxFdEJRVXRHTEZOQlFVd3NRMEZCY2tJN1FVRkRRU3hWUVVGSlNTeFZRVUZWZUVJc1MwRkJTME1zUzBGQlRDeERRVUZYT0VJc1kwRkJXQ3hEUVVGa08wRkJRMEUzUXl4elFrRkJaMElzUzBGQmFFSXNSVUZCZFVJeVF5eEZRVUZGUnl4VFFVRkdMRWRCUVdOU0xGRkJRVkZGTEU5QlFUZERMRVZCUVhORWJrSXNTVUZCZEVRc1EwRkJNa1FzYTBKQlFWVTdRVUZEYmtVc1dVRkJTVkFzUzBGQlMybERMRk5CUVV3c1EwRkJaV3BDTEUxQlFXWXNUVUZCTWtKb1FpeExRVUZMYVVNc1UwRkJUQ3hEUVVGbFZDeFJRVUZSVlN4WFFVRjJRaXhEUVVFdlFpeEZRVUZ2UlR0QlFVTnNSWHBETEd0Q1FVRlJMRVZCUVVNd1F5eFZRVUZWV0N4UlFVRlJWU3hYUVVGU0xFTkJRVzlDUlN4TFFVRXZRaXhGUVVGelEwTXNWVUZCVldJc1VVRkJVVlVzVjBGQmVFUXNSVUZCVWp0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTWVFTXNhVUpCUVU4c1UwRkJVRHRCUVVORU8wRkJRMFlzVDBGT1JDeEZRVTFITkVNc1MwRk9TQ3hEUVUxVExHVkJRVTg3UVVGRFpEVkRMR1ZCUVU4MlF5eEhRVUZRTzBGQlEwUXNUMEZTUkR0QlFWTkVMRXRCWWswc1EwRkJVRHRCUVdORUxFZEJla050UWpzN1FVRXlRM0JDUXl4dlFrRkJhMElzTUVKQlFVTk1MRkZCUVVRc1JVRkJZenRCUVVNNVFqTkNMRmxCUVZGcFF5eEhRVUZTTEVOQlFWa3NiVU5CUVZvc1JVRkJhVVJPTEZGQlFXcEVPMEZCUTBvN08wRkJSVWtzVjBGQlR5eEpRVUZKTTBNc1QwRkJTaXhEUVVGWkxGVkJRVk5ETEU5QlFWUXNSVUZCYTBKRExFMUJRV3hDTEVWQlFUQkNPMEZCUTJwRU96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUVhsRFRVUXNZMEZCVXpCRExGRkJRVlE3UVVGRFJDeExRVE5EVFN4RFFVRlFPMEZCT0VORUxFZEJOMFp0UWpzN1FVRXJSbkJDT3pzN096czdPenM3TzBGQlZVRlBMSEZDUVVGdFFpd3lRa0ZCUTNaQ0xFMUJRVVFzUlVGQlUydENMRkZCUVZRc1JVRkJiVUpvUWl4TlFVRnVRaXhGUVVFeVFuTkNMRWxCUVROQ0xFVkJRVzlETzBGQlEzSkVia01zV1VGQlVXbERMRWRCUVZJc1EwRkJXU3h0UTBGQldpeEZRVUZwUkVvc1VVRkJha1E3UVVGRFFUZENMRmxCUVZGcFF5eEhRVUZTTEVOQlFWa3NhVU5CUVZvc1JVRkJLME53UWl4TlFVRXZRenRCUVVOQllpeFpRVUZSYVVNc1IwRkJVaXhEUVVGWkxDdENRVUZhTEVWQlFUWkRSU3hKUVVFM1F6dEJRVU5CTEZGQlFVbGtMRWxCUVVsV0xFOUJRVTlYTEU5QlFXWTdPMEZCUlVFN1FVRkRRVHRCUVVOQkxGZEJRVThzU1VGQlNYUkRMRTlCUVVvc1EwRkJXU3hWUVVGVFF5eFBRVUZVTEVWQlFXdENReXhOUVVGc1FpeEZRVUV3UWp0QlFVTXpReXhWUVVGSkxFTkJRVU5wUkN4SlFVRk1MRVZCUVZjN1FVRkRWRHM3T3pzN08wRkJUVUVzV1VGQlNVTXNZVUZCWVdZc1JVRkJSV2RDTEhGQ1FVRkdMRWRCUVRCQ0xHVkJRVEZDTEVkQlFUUkRlRVlzVjBGQk5VTXNSMEZEWml4blEwRkVaU3hIUVVOdlFuZEZMRVZCUVVWcFFpeEpRVVIwUWl4SFFVVm1MR0ZCUm1Vc1IwRkZRMnBDTEVWQlFVVnJRaXhSUVVaSUxFZEJSMllzVTBGSVpTeEhRVWRJYkVJc1JVRkJSVzFDTEV0QlNFTXNSMEZKWml4bFFVcGxMRWRCU1VkdVFpeEZRVUZGYjBJc1ZVRktUQ3hIUVV0bUxGTkJUR1VzUjBGTFNGb3NVVUZNUnl4SFFVMW1MRk5CVG1Vc1IwRk5TRklzUlVGQlJYRkNMRXRCVG1oQ096dEJRVkZTTzBGQlExRXhReXhuUWtGQlVXbERMRWRCUVZJc1EwRkJXU3c0UkVGQldpeEZRVUUwUlVjc1ZVRkJOVVU3TzBGQlJVRnNSQ3hsUVVGUExFVkJRVU5tTEUxQlFVMHNaVUZCVUN4RlFVRjNRbmRGTEZWQlFWVlFMRlZCUVd4RExFVkJRVkE3TzBGQlJVWTdRVUZGUXl4UFFYUkNSQ3hOUVhOQ1R6dEJRVU5NTzBGQlEwRXNXVUZCU1RsQ0xHTkJRV053UXl4VlFVRlZhVVVzU1VGQlZpeEZRVUZuUWl4alFVRm9RaXhEUVVGc1FqdEJRVU5CTEZsQlFVbG1MRlZCUVZWc1JDeFZRVUZWYVVVc1NVRkJWaXhGUVVGblFpeFZRVUZvUWl4RFFVRmtPMEZCUTBFc1dVRkJTWEpETEU5QlFVODFRaXhWUVVGVmFVVXNTVUZCVml4RlFVRm5RaXhOUVVGb1FpeERRVUZZT3p0QlFVVkJPenRCUVVWU08wRkJRME03TzBGQlJWTTdRVUZEUVR0QlFVTkJMRmxCUVVsVExHVkJRV1YyUWl4RlFVRkZkMElzVVVGQlJpeEhRVUZoZGtNc1YwRkJhRU03UVVGRFFUVkNMSGRDUVVGblFpeExRVUZvUWl4RlFVRjFRbXRGTEZsQlFYWkNMRVZCUVhGRE4wTXNTVUZCY2tNc1EwRkJNRU1zVlVGQlV5dERMRk5CUVZRc1JVRkJiMEk3UVVGRE5VUTVReXhyUWtGQlVXbERMRWRCUVZJc1EwRkJXU3c0UTBGQldpeEZRVUUwUkdFc1UwRkJOVVE3TzBGQlJWbzdPMEZCUlVFN1FVRkRRVHM3T3pzN096czdPMEZCVTFrc1kwRkJTVU1zWVVGQllURkNMRVZCUVVWSExGTkJRVVlzUjBGQlkwb3NUMEZCTDBJN08wRkJSVUU3UVVGRFFURkRMREJDUVVGblFpeExRVUZvUWl4RlFVRjFRbkZGTEZWQlFYWkNMRVZCUVcxRGFFUXNTVUZCYmtNc1EwRkJkME1zVlVGQlUybEVMRmRCUVZRc1JVRkJjMEk3UVVGRE5VUm9SQ3h2UWtGQlVXbERMRWRCUVZJc1EwRkJXU3cwUTBGQldpeEZRVUV3UkdVc1YwRkJNVVE3TzBGQlJXUTdPenM3UVVGSll5eG5Ra0ZCU1hCRExGbEJRVmx4UXl4TFFVRkxla1FzUzBGQlMybERMRk5CUVV3c1EwRkJaU3hGUVVGRFVDeFRRVUZUUlN4UFFVRldMRVZCUVcxQ1RTeGhRVUZoYzBJc1YwRkJhRU1zUlVGQlppeERRVUZNTEVOQlFXaENPMEZCUTBFc1owSkJRVWxGTEZsQlFWa3NSVUZCUXpsR0xGRkJRVkZwUlN4RlFVRkZha1VzVFVGQldDeEZRVUZ0UWt3c1ZVRkJWU3hOUVVFM1FpeEZRVUZvUWpzN1FVRkZRVHRCUVVOQk8wRkJRMEVzWjBKQlFVbHZSeXhqUVVGakxFVkJRVU4yUXl4WFFVRlhRU3hUUVVGYUxFVkJRWFZDZDBNc1MwRkJTMFlzVTBGQk5VSXNSVUZCZFVNeFJpeFRRVUZUZDBZc1dVRkJXVXNzUjBGQk5VUXNSVUZCYVVWRExHRkJRV0ZTTEZOQlFUbEZMRVZCUVhsR04wTXNVMEZCVXl4SlFVRnNSeXhGUVVGc1FqczdRVUZGUVhSRUxIVkNRVUZYUXl4VFFVRllMRWxCUVhkQ2RVY3NWMEZCZUVJN1FVRkRRU3hqUVVGRmRrY3NVMEZCUmpzN1FVRkZRVzlFTEc5Q1FVRlJhVU1zUjBGQlVpeERRVUZaTEhORFFVRmFMRVZCUVc5RWVrTXNTMEZCUzJsRExGTkJRVXdzUTBGQlpUQkNMRmRCUVdZc1EwRkJjRVE3TzBGQlJVRnNSU3h2UWtGQlVXdEZMRmRCUVZJN1FVRkRSQ3hYUVhCQ1JDeEZRVzlDUnl4VlFVRlRMMFFzUTBGQlZDeEZRVUZaT3p0QlFVVmlSaXh0UWtGQlQwVXNRMEZCVUR0QlFVTkVMRmRCZGtKRU8wRkJkMEpFTEZOQk1VTkVMRVZCTUVOSExGVkJRVk5wUWl4TFFVRlVMRVZCUVdkQ096dEJRVVZxUW01Q0xHbENRVUZQYlVJc1MwRkJVRHRCUVVORUxGTkJOME5FTzBGQk9FTldPenM3TzBGQlMwODdRVUZEUml4TFFYcEdUU3hEUVVGUU8wRkJNRVpFTEVkQk0wMXRRanM3UVVFMlRYQkNPenM3T3pzN096dEJRVkZCYTBRc2RVTkJRWEZETERaRFFVRkROVU1zVFVGQlJDeEZRVUZUWkN4VFFVRlVMRVZCUVhWQ08wRkJRekZFUnl4WlFVRlJhVU1zUjBGQlVpeERRVUZaTEcxRVFVRmFMRVZCUVdsRmRFSXNUVUZCYWtVN1FVRkRTanRCUVVOQk8wRkJRMGxZTEZsQlFWRnBReXhIUVVGU0xFTkJRVmtzYzBSQlFWb3NSVUZCYjBWd1F5eFRRVUZ3UlR0QlFVTktPMEZCUTBsNFF5eDFRMEZCYlVOelJDeFBRVUZQZEVRc1owTkJRVEZETzBGQlEwRXNVVUZCVFcxSExGVkJRVlUzUXl4UFFVRlBOa01zVDBGQmRrSTdPMEZCUlVFc1VVRkJTVU1zYVVKQlFVbzdRVUZEUVR0QlFVTkJMRmRCUVU4c1NVRkJTWHBGTEU5QlFVb3NRMEZCV1N4VlFVRlZReXhQUVVGV0xFVkJRVzFDUXl4TlFVRnVRaXhGUVVFeVFqdEJRVU0xUXp0QlFVTkJSQ3hqUVVGUk5VSXNhVU5CUVdsRGJVY3NVVUZCVVRORUxGTkJRVklzUTBGQmFrTXNRMEZCVWp0QlFVVkVMRXRCU2swc1JVRkpTaXhWUVVGVlZDeERRVUZXTEVWQlFXRTdPMEZCUldSR0xHRkJRVTlGTEVOQlFWQTdRVUZEUkN4TFFWQk5MRU5CUVZBN1FVRlJSQ3hIUVhoUGJVSTdPMEZCTUU5d1FqczdPenM3T3p0QlFVOUJjMFVzYTBKQlFXZENMSGRDUVVGREwwTXNUVUZCUkN4RlFVRlRaQ3hUUVVGVUxFVkJRVzlDT0VRc1MwRkJjRUlzUlVGQk9FSTdRVUZETlVNelJDeFpRVUZSYVVNc1IwRkJVaXhEUVVGWkxEaENRVUZhTEVWQlFUUkRkRUlzVFVGQk5VTTdRVUZEU2p0QlFVTkJPMEZCUTBsWUxGbEJRVkZwUXl4SFFVRlNMRU5CUVZrc05rSkJRVm9zUlVGQk1rTXdRaXhMUVVFelF6dEJRVU5LTzBGQlEwbDZSeXd3UWtGQmMwSjVSQ3hQUVVGUGVrUXNiVUpCUVRkQ08wRkJRMEZGTEdGQlFWTjFSQ3hQUVVGUGRrUXNUVUZCYUVJN08wRkJSVUVzVVVGQlNYRkhMR2xDUVVGS08wRkJRMEU3UVVGRFFTeFhRVUZQTEVsQlFVbDZSU3hQUVVGS0xFTkJRVmtzVlVGQlZVTXNUMEZCVml4RlFVRnRRa01zVFVGQmJrSXNSVUZCTWtJN1FVRkRNVU03UVVGRFFTeFZRVUZKTVVJc1ZVRkJWVkVzVjBGQlZ6SkdMRXRCUVZnc1EwRkJaRHM3UVVGRlFTeFZRVUZKY2tRc1kwRkJZM0JETEZWQlFWVjVSaXhMUVVGV0xFVkJRV2xDTEdOQlFXcENMRU5CUVd4Q096dEJRVVZCTEZWQlFVbHlSQ3hYUVVGS0xFVkJRV2xDY2tJc1VVRkJVMnRDTEd0Q1FVRnJRazRzVTBGQmJFSXNSVUZCTmtKVExGZEJRVGRDTEVWQlFUQkRPVU1zVDBGQk1VTXNSVUZCYlVSdFJ5eExRVUZ1UkN4RFFVRlVMRVZCUVdwQ0xFdEJRMHN4UlN4UlFVRlRWeXcwUWtGQk5FSkRMRk5CUVRWQ0xFVkJRWFZET0VRc1MwRkJka01zUTBGQlZEdEJRVU5TTEV0QlVrMHNSVUZSU2l4VlFVRlZka1VzUTBGQlZpeEZRVUZoT3p0QlFVVmtSaXhoUVVGUFJTeERRVUZRTzBGQlEwUXNTMEZZVFN4RFFVRlFPMEZCV1VRc1IwRjRVVzFDT3p0QlFUQlJkRUk3T3pzN096czdRVUZQUTNkRkxITkNRVUZ2UWl3MFFrRkJRMnBFTEUxQlFVUXNSVUZCVTJ0RUxFdEJRVlFzUlVGQmJVSTdRVUZEY0VNM1JDeFpRVUZSYVVNc1IwRkJVaXhEUVVGWkxHdERRVUZhTEVWQlFXZEVkRUlzVFVGQmFFUTdRVUZEUmp0QlFVTkJPMEZCUTBWWUxGbEJRVkZwUXl4SFFVRlNMRU5CUVZrc01FTkJRVm9zUlVGQmQwUTBRaXhMUVVGNFJEdEJRVU5HTzBGQlEwRXhSeXhwUTBGQk5rSjNSQ3hQUVVGUGVFUXNNRUpCUVhCRE8wRkJRMFZETEdGQlFWTjFSQ3hQUVVGUGRrUXNUVUZCYUVJN08wRkJSVUVzVVVGQlNYRkhMR2xDUVVGS08wRkJRMEU3UVVGRFFTeFhRVUZQTEVsQlFVbDZSU3hQUVVGS0xFTkJRVmtzVlVGQlZVTXNUMEZCVml4RlFVRnRRa01zVFVGQmJrSXNSVUZCTWtJN1FVRkRNVU03TzBGQlJVRXNWVUZCU1dVc1ZVRkJWVFJFTEUxQlFVMDFSQ3hQUVVGd1FqczdRVUZGUVN4VlFVRkpMRU5CUVVOQkxFOUJRVXdzUlVGQlkyWXNUMEZCVHl3eVJVRkJVQ3hGUVVGdlJqSkZMRXRCUVhCR096dEJRVVZhYmtZc2MwSkJRV2RDTEUxQlFXaENMRVZCUVhkQ2RrSXNNa0pCUVRKQ09FTXNUMEZCTTBJc1EwRkJlRUlzUlVGQk5rUkdMRWxCUVRkRUxFTkJRV3RGTEZWQlFWVlNMRWxCUVZZc1JVRkJaMEk3TzBGQlJXaEdVeXhuUWtGQlVWUXNTVUZCVWl4RFFVRmhMSE5EUVVGaUxFVkJRWEZFUVN4SlFVRnlSRHM3UVVGRlFTeFpRVUZKUVN4TFFVRkxPVUlzWTBGQlRDeERRVUZ2UWl4alFVRndRaXhEUVVGS0xFVkJRWGxET3p0QlFVVjJReXhqUVVGSlJDeFZRVUZWUml4cFFrRkJhVUpwUXl4SlFVRnFRaXhEUVVGa08wRkJRMEZPTEd0Q1FVRlRhMElzYTBKQlFXdENNRVFzVFVGQlRXaEZMRk5CUVhoQ0xFVkJRVzFEVGl4TFFVRkxZU3haUVVGNFF5eEZRVUZ6UkRWRExFOUJRWFJFTEVWQlFTdEVLMElzU1VGQkwwUXNSVUZCY1VWVkxFOUJRWEpGTEVOQlFWUTdRVUZEUkN4VFFVcEVMRTFCU1U5bUxFOUJRVThzTWtWQlFWQXNSVUZCYjBaTExFbEJRWEJHTzBGQlExSXNUMEZVUkN4RlFWTkhMRlZCUVZWakxFdEJRVllzUlVGQmFVSTdRVUZEYkVKdVFpeGxRVUZQYlVJc1MwRkJVRHRCUVVORUxFOUJXRVE3TzBGQllWWTdRVUZGU3l4TFFYUkNUU3hGUVhOQ1NpeFZRVUZWYWtJc1EwRkJWaXhGUVVGaE96dEJRVVZrUml4aFFVRlBSU3hEUVVGUU8wRkJRMFFzUzBGNlFrMHNRMEZCVUR0QlFUQkNSRHRCUVhSVWJVSXNRMEZCWmlJc0ltWnBiR1VpT2lJeExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHk4Z2FXMXdiM0owSUh0blpYUkZlSEJwY21WemZTQm1jbTl0SUNjdUwwOUJWVlJJSnp0Y2NseHVYSEpjYm14bGRDQnBaR1Z1ZEdsMGFXVnpJRDBnZTMwN1hISmNibXhsZENCdVNXUmxiblJwZEhrZ1BTQXdPMXh5WEc1c1pYUWdjbVZrYVhKbFkzUlZVa2tnUFNCc2IyTmhkR2x2Ymk1d2NtOTBiMk52YkNBcklDY3ZMeWNnS3lCc2IyTmhkR2x2Ymk1b2IzTjBibUZ0WlNBcklDaHNiMk5oZEdsdmJpNXdiM0owSUNFOVBTQW5KeUEvSUNjNkp5QXJJR3h2WTJGMGFXOXVMbkJ2Y25RZ09pQW5KeUFwTzF4eVhHNWNjbHh1WEhKY2JpOHZiR1YwSUhSdmEyVnVSVzVrY0c5cGJuUTdYSEpjYmk4dmJHVjBJR0YxZEdodmNtbHpZWFJwYjI1RmJtUndiMmx1ZER0Y2NseHViR1YwSUdGalkyVnpjMVJ2YTJWdVJXNWtjRzlwYm5RN1hISmNibXhsZENCeVpXWnlaWE5vUVdOalpYTnpWRzlyWlc1RmJtUndiMmx1ZER0Y2NseHViR1YwSUdSdmJXRnBianRjY2x4dWJHVjBJR0ZqWTJWemMxUnZhMlZ1UVhWMGFHOXlhWE5oZEdsdmJrVnVaSEJ2YVc1ME8xeHlYRzVjY2x4dVpYaHdiM0owSUd4bGRDQm5aWFJGZUhCcGNtVnpRWFJLVTA5T0lEMGdLR1oxYm1OMGFXOXVJQ2hxYzI5dUtTQjdYSEpjYmlBZ2JHVjBJR1Y0Y0dseVpYTWdQU0JxYzI5dUxtaGhjMDkzYmxCeWIzQmxjblI1S0NkbGVIQnBjbVZ6WDJsdUp5a2dQeUJxYzI5dUxtVjRjR2x5WlhOZmFXNGdPaUJtWVd4elpWeHlYRzVjY2x4dUlDQnBaaUFvWlhod2FYSmxjeWtnWlhod2FYSmxjeUE5SUdWNGNHbHlaWE1nS3lCTllYUm9MbVpzYjI5eUtFUmhkR1V1Ym05M0tDa2dMeUF4TURBd0tUdGNjbHh1SUNCbGJITmxJR1Y0Y0dseVpYTWdQU0F6TVRVek5qQXdNREF3SUNzZ1RXRjBhQzVtYkc5dmNpaEVZWFJsTG01dmR5Z3BJQzhnTVRBd01DazdYSEpjYmx4eVhHNGdJSEpsZEhWeWJpQk9kVzFpWlhJb1pYaHdhWEpsY3lrN1hISmNibHh5WEc1OUtUdGNjbHh1WEhKY2JtVjRjRzl5ZENCc1pYUWdaMlYwUlhod2FYSmxjeUE5SUNobWRXNWpkR2x2YmlBb2RYSnNLU0I3WEhKY2JpQWdiR1YwSUdWNGNHbHlaWE1nUFNCMWNteFFZWEp6WlhJb2RYSnNMQ0FuWlhod2FYSmxjMTlwYmljcE8xeHlYRzVjY2x4dUlDQnBaaUFvWlhod2FYSmxjeWtnWlhod2FYSmxjeUE5SUdWNGNHbHlaWE1nS3lCTllYUm9MbVpzYjI5eUtFUmhkR1V1Ym05M0tDa2dMeUF4TURBd0tUdGNjbHh1SUNCbGJITmxJR1Y0Y0dseVpYTWdQU0F6TVRVek5qQXdNREF3SUNzZ1RXRjBhQzVtYkc5dmNpaEVZWFJsTG01dmR5Z3BJQzhnTVRBd01DazdYSEpjYmx4eVhHNGdJSEpsZEhWeWJpQk9kVzFpWlhJb1pYaHdhWEpsY3lrN1hISmNibHh5WEc1OUtUdGNjbHh1SUZ4eVhHNHZMMloxYm1OMGFXOXVJSFJ2SUhCaGNuTmxJSFJvWlNCeGRXVnllU0J6ZEhKcGJtY2dhVzRnZEdobElHZHBkbVZ1SUZWU1RDQjBieUJ2WW1GMGFXNGdZMlZ5ZEdGcGJpQjJZV3gxWlhOY2NseHVablZ1WTNScGIyNGdkWEpzVUdGeWMyVnlLSFZ5YkN3Z2JtRnRaU2tnZTF4eVhHNGdJRzVoYldVZ1BTQnVZVzFsTG5KbGNHeGhZMlVvTDF0Y1hGdGRMeXdnSjF4Y1hGeGNYRnNuS1M1eVpYQnNZV05sS0M5YlhGeGRYUzhzSUNkY1hGeGNYRnhkSnlrN1hISmNiaUFnYkdWMElISmxaMlY0VXlBOUlDZGJYRnhjWENNbVAxMG5JQ3NnYm1GdFpTQXJJQ2M5S0Z0ZUppTmRLaWtuTzF4eVhHNGdJR3hsZENCeVpXZGxlQ0E5SUc1bGR5QlNaV2RGZUhBb2NtVm5aWGhUS1R0Y2NseHVJQ0JzWlhRZ2NtVnpkV3gwY3lBOUlISmxaMlY0TG1WNFpXTW9kWEpzS1R0Y2NseHVJQ0JwWmlBb2NtVnpkV3gwY3lBOVBUMGdiblZzYkNsY2NseHVJQ0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnWld4elpWeHlYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUnpXekZkTzF4eVhHNTlYSEpjYmx4eVhHNW1kVzVqZEdsdmJpQnpaVzVrU0ZSVVVGSmxjWFZsYzNRb2JXVjBhRzlrTENCMWNtd3BJSHRjY2x4dUlDQnNaWFFnZUdoeUlEMGdibVYzSUZoTlRFaDBkSEJTWlhGMVpYTjBLQ2s3WEhKY2JpQWdhV1lnS0NkM2FYUm9RM0psWkdWdWRHbGhiSE1uSUdsdUlIaG9jaWtnZTF4eVhHNGdJQ0FnZUdoeUxtOXdaVzRvYldWMGFHOWtMQ0IxY213c0lIUnlkV1VwTzF4eVhHNGdJSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JRmhFYjIxaGFXNVNaWEYxWlhOMElDRTlJQ2QxYm1SbFptbHVaV1FuS1NCN1hISmNiaUFnSUNBdkx5QlBkR2hsY25kcGMyVXNJR05vWldOcklHbG1JRmhFYjIxaGFXNVNaWEYxWlhOMExseHlYRzRnSUNBZ0x5OGdXRVJ2YldGcGJsSmxjWFZsYzNRZ2IyNXNlU0JsZUdsemRITWdhVzRnU1VVc0lHRnVaQ0JwY3lCSlJTZHpJSGRoZVNCdlppQnRZV3RwYm1jZ1EwOVNVeUJ5WlhGMVpYTjBjeTVjY2x4dUlDQWdJSGhvY2lBOUlHNWxkeUJZUkc5dFlXbHVVbVZ4ZFdWemRDZ3BPMXh5WEc0Z0lDQWdlR2h5TG05d1pXNG9iV1YwYUc5a0xDQjFjbXdwTzF4eVhHNGdJSDBnWld4elpTQjdYSEpjYmlBZ0lDQXZMeUJQZEdobGNuZHBjMlVzSUVOUFVsTWdhWE1nYm05MElITjFjSEJ2Y25SbFpDQmllU0IwYUdVZ1luSnZkM05sY2k1Y2NseHVJQ0FnSUhob2NpQTlJRzUxYkd3N1hISmNiaUFnZlZ4eVhHNGdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMSEpsYW1WamRDa2dlMXh5WEc0Z0lDQWdhV1lnS0hob2Npa2dlMXh5WEc0Z0lDQWdJQ0I0YUhJdWIyNXlaV0ZrZVhOMFlYUmxZMmhoYm1kbElEMGdablZ1WTNScGIyNG9aU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2g0YUhJdWNtVmhaSGxUZEdGMFpTQTlQVDBnTkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tIaG9jaTV6ZEdGMGRYTWdQVDA5SURJd01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVc1bWJ5QTlJRXBUVDA0dWNHRnljMlVvZUdoeUxuSmxjM0J2Ym5ObFZHVjRkQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9hVzVtYnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hob2NpNXpkR0YwZFhNZ1BUMDlJRFF3TUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvSjFSb1pYSmxJSGRoY3lCaGJpQmxjbkp2Y2lCd2NtOWpaWE56YVc1bklIUm9aU0IwYjJ0bGJpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2R6YjIxbGRHaHBibWNnWld4elpTQnZkR2hsY2lCMGFHRnVJREl3TUNCM1lYTWdjbVYwZFhKdVpXUW5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwN1hISmNiaUFnSUNBZ0lIaG9jaTV6Wlc1a0tDazdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQnlaV3BsWTNRb0owTlBVbE1nYm05MElITjFjSEJ2Y25SbFpDY3BPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lIMHBPMXh5WEc1OVhISmNibHh5WEc1c1pYUWdaMlYwUVdOalpYTnpWRzlyWlc1WGFYUm9RMjlrWlZSdmEyVnVJRDBnS0daMWJtTjBhVzl1SUNoeVpYTnZkWEpqWlhNc0lIVnliQ2tnZTF4eVhHNGdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaUFvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEhKY2JpQWdJQ0JzWlhRZ1kyOWtaU0E5SUhWeWJGQmhjbk5sY2loMWNtd3NJQ2RqYjJSbEp5azdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tDRmpiMlJsS1NCeVpXcGxZM1FvSjF0UFNVUkRMbWRsZEVGalkyVnpjMVJ2YTJWdVYybDBhRU52WkdWVWIydGxibDBnWTI5a1pTQnViM1FnYVc1amJIVmtaU0JwYmlCMGFHVWdkWEpzT2lBbkxDQjFjbXdwTzF4eVhHNWNjbHh1SUNBZ0lDQWdjMlZ1WkVoVVZGQlNaWEYxWlhOMEtDZFFUMU5VSnl3Z1lXTmpaWE56Vkc5clpXNUZibVJ3YjJsdWRDaGpiMlJsS1NrdWRHaGxiaWhtZFc1amRHbHZiaUFvYVc1bWJ5a2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjF0UFNVUkRMbWRsZEVGalkyVnpjMVJ2YTJWdVYybDBhRU52WkdWVWIydGxibDBnY21WemNHOXVjMlU2SUNjc0lHbHVabThwTzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2FXNW1ieTVvWVhOUGQyNVFjbTl3WlhKMGVTZ25ZV05qWlhOelgzUnZhMlZ1SnlrcElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQnNaWFFnWlhod2FYSmxjeUE5SUdkbGRFVjRjR2x5WlhOQmRFcFRUMDRvYVc1bWJ5azdYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjbVZtY21WemFDQTlJR2x1Wm04dWFHRnpUM2R1VUhKdmNHVnlkSGtvSjNKbFpuSmxjMmhmZEc5clpXNG5LU0EvSUdsdVptOHVjbVZtY21WemFGOTBiMnRsYmlBNklHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTQW9ZV05qWlhOelZHOXJaVzVTWlhOMWJIUW9jbVZ6YjNWeVkyVnpMQ0JwYm1adkxtRmpZMlZ6YzE5MGIydGxiaXdnWlhod2FYSmxjeXdnYVc1bWJ5d2djbVZtY21WemFDa3BPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0J5WldwbFkzUW9KMXRQU1VSRExtZGxkRUZqWTJWemMxUnZhMlZ1VjJsMGFFTnZaR1ZVYjJ0bGJsMGdZV05qWlhOeklIUnZhMlZ1SUc1dmRDQnlaWFIxY201bFpDQnBiaUIwYUdVZ1pYaGphR0Z1WjJVZ1kyOWtaU0J5WlhOMWJIUTZJQ2NzSUdsdVptOHBPMXh5WEc0Z0lDQWdJQ0I5TENCbWRXNWpkR2x2YmlBb1pYSnliM0lwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaV3BsWTNRb1pYSnliM0lwTzF4eVhHNGdJQ0FnSUNCOUtUdGNjbHh1WEhKY2JpQWdmU2s3WEhKY2JuMHBPMXh5WEc1Y2NseHViR1YwSUdGalkyVnpjMVJ2YTJWdVVtVnpkV3gwSUQwZ0tHWjFibU4wYVc5dUlDaHlaWE52ZFhKalpYTXNJR0ZqWTJWemMxUnZhMlZ1TENCbGVIQnBjbVZ6TENCcGJuQjFkQ3dnY21WbWNtVnphQ2tnZTF4eVhHNWNjbHh1SUNCc1pYUWdjbVZ6ZFd4MElEMGdleUJrYjIxaGFXNDZJR1J2YldGcGJpd2djbVZ6YjNWeVkyVnpPaUJ5WlhOdmRYSmpaWE1zSUdGalkyVnpjMVJ2YTJWdU9pQmhZMk5sYzNOVWIydGxiaXdnWlhod2FYSmxjem9nWlhod2FYSmxjeXdnYVc1d2RYUTZJR2x1Y0hWMElIMDdYSEpjYmx4eVhHNGdJR2xtSUNoeVpXWnlaWE5vS1NCeVpYTjFiSFF1Y21WbWNtVnphQ0E5SUhKbFpuSmxjMmc3WEhKY2JseHlYRzRnSUhKbGRIVnliaUJ5WlhOMWJIUTdYSEpjYmx4eVhHNTlLVHRjY2x4dVhISmNibHh5WEc0dktpcGNjbHh1S2lCR2RXNWpkR2x2YmlCMGJ5QmxlR05vWVc1blpTQjBhR1VnWTI5a1pTQnlaV05sYVhabFpDQjBieUIwYUdVZ2FXUWdWRzlyWlc0c0lHRmpZMlZ6Y3lCMGIydGxiaUJoYm1RZ1lTQnlaV1p5WlhOb0lIUnZhMlZ1WEhKY2JpcGNjbHh1S2k5Y2NseHVMeXBzWlhRZ1pYaGphR0Z1WjJWRGIyUmxJRDBnS0daMWJtTjBhVzl1S0dOdlpHVXBJSHRjY2x4dUlDQnNaWFFnYVNBOUlHZHZiMmRzWlVsdVptODdYSEpjYmx4eVhHNGdJR3hsZENCVlVrd2dQU0JwTG5SdmEyVnVSVzVrY0c5cGJuUWdLeUFuWTI5a1pUMG5JQ3NnWTI5a1pTQXJJQ2NtWTJ4cFpXNTBYMmxrUFNjZ0t5QnBMbU5zYVdWdWRFbEVJQ3NnSnlaamJHbGxiblJmYzJWamNtVjBQU2NnS3lCcExtTnNhV1Z1ZEZObFkzSmxkQ0FySUNjbWNtVmthWEpsWTNSZmRYSnBQU2NnS3lCcExuSmxaR2x5WldOMFZWSkpJQ3NnSnlabmNtRnVkRjkwZVhCbFBXRjFkR2h2Y21sNllYUnBiMjVmWTI5a1pTWmhZMk5sYzNOZmRIbHdaVDBuSUNzZ2FTNWhZMk5sYzNOVWVYQmxPMXh5WEc1Y2NseHVYSEpjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObEtHWjFibU4wYVc5dUtISmxjMjlzZG1Vc0lISmxhbVZqZENrZ2UxeHlYRzRnSUNBZ2MyVnVaRWhVVkZCU1pYRjFaWE4wS0NkUVQxTlVKeXdnVlZKTUtTNTBhR1Z1S0daMWJtTjBhVzl1S0dsdVptOHBJSHRjY2x4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdFBTVVJETG1WNFkyaGhibWRsUTI5a1pWMGdjbVYwZFhKdVpXUWdhVzVtYnpvZ0p5d2dhVzVtYnlrN1hISmNiaUFnSUNBZ0lISmxjMjlzZG1Vb2FXNW1ieWs3WEhKY2JpQWdJQ0I5TENCbWRXNWpkR2x2YmlobGNuSnZjaWtnZTF4eVhHNGdJQ0FnSUNCeVpXcGxZM1FvWlhKeWIzSXBPMXh5WEc0Z0lDQWdmU2s3WEhKY2JseHlYRzRnSUgwcE8xeHlYRzU5S1R0Y2NseHVYSEpjYm14bGRDQmxlR05vWVc1blpWSmxabkpsYzJoVWIydGxiaUE5SUNobWRXNWpkR2x2YmloeVpXWnlaWE5vVkc5clpXNHBJSHRjY2x4dUlDQnNaWFFnYVNBOUlHZHZiMmRzWlVsdVptODdYSEpjYmx4eVhHNGdJR3hsZENCVlVrd2dQU0JwTG5SdmEyVnVSVzVrY0c5cGJuUWdLeUFuWTJ4cFpXNTBYMmxrUFNjZ0t5QnBMbU5zYVdWdWRFbEVJQ3NnSnlaamJHbGxiblJmYzJWamNtVjBQU2NnS3lCcExtTnNhV1Z1ZEZObFkzSmxkQ0FySUNjbWNtVm1jbVZ6YUY5MGIydGxiajBuSUNzZ2NtVm1jbVZ6YUZSdmEyVnVJQ3NnSnlabmNtRnVkRjkwZVhCbFBYSmxabkpsYzJoZmRHOXJaVzRuTzF4eVhHNWNjbHh1SUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNiaUFnSUNCelpXNWtTRlJVVUZKbGNYVmxjM1FvSjFCUFUxUW5MQ0JWVWt3cExuUm9aVzRvWm5WdVkzUnBiMjRvYVc1bWJ5a2dlMXh5WEc0Z0lDQWdJQ0J5WlhOdmJIWmxLR2x1Wm04cE8xeHlYRzRnSUNBZ2ZTd2dablZ1WTNScGIyNG9aWEp5YjNJcElIdGNjbHh1SUNBZ0lDQWdjbVZxWldOMEtHVnljbTl5S1R0Y2NseHVJQ0FnSUgwcE8xeHlYRzVjY2x4dUlDQjlLVHRjY2x4dWZTazdLaTljY2x4dVhISmNiaThxS2x4eVhHNHFJRWxrWlc1MGFYUjVJRkJ5YjNacFpHVnlJRkJ5YjNoNVhISmNiaW92WEhKY2JtVjRjRzl5ZENCc1pYUWdTV1J3VUhKdmVIa2dQU0I3WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHOGdkbUZzYVdSaGRHVWdZVzRnYVdSbGJuUnBkSGtnUVhOelpYSjBhVzl1SUhKbFkyVnBkbVZrWEhKY2JpQWdLaUJVVDBSUElHRmtaQ0JrWlhSaGFXeHpJRzltSUhSb1pTQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z1lXNWtJR2x0Y0hKdmRtVWdkR2hsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVYSEpjYmlBZ0tseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN2FXUndTVzVtYjMwZ0lDQWdJQ0JQWW1wbFkzUWdhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdTV1JRSUdWdVpIQnZhVzUwYzF4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3WVhOelpYSjBhVzl1ZlNBZ0lDQkpaR1Z1ZEdsMGVTQkJjM05sY25ScGIyNGdkRzhnWW1VZ2RtRnNhV1JoZEdWa1hISmNiaUFnS2lCQWNHRnlZVzBnSUh0dmNtbG5hVzU5SUNBZ0lDQWdJRTl5YVdkcGJpQndZWEpoYldWMFpYSWdkR2hoZENCcFpHVnVkR2xtYVdWeklIUm9aU0J2Y21sbmFXNGdiMllnZEdobElGSlVRMUJsWlhKRGIyNXVaV04wYVc5dVhISmNiaUFnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNBZ0lDQWdJRkpsZEhWeWJuTWdZU0J3Y205dGFYTmxJSGRwZEdnZ2RHaGxJR2xrWlc1MGFYUjVJR0Z6YzJWeWRHbHZiaUIyWVd4cFpHRjBhVzl1SUhKbGMzVnNkRnh5WEc0Z0lDb3ZYSEpjYmlBZ2RtRnNhV1JoZEdWQmMzTmxjblJwYjI0NklDaGpiMjVtYVdjc0lHRnpjMlZ5ZEdsdmJpd2diM0pwWjJsdUtTQTlQaUI3WEhKY2JpQWdJQ0JqYjI1emIyeGxMbWx1Wm04b0oxdFBTVVJETG5aaGJHbGtZWFJsUVhOelpYSjBhVzl1VUhKdmVIbGRJR0Z6YzJWeWRHbHZiam9nSnl3Z1lYUnZZaWhoYzNObGNuUnBiMjRwS1Z4eVhHNHZMeUFnSUNCamIyNXpiMnhsTG1sdVptOG9KM1poYkdsa1lYUmxRWE56WlhKMGFXOXVVSEp2ZUhrNllYUnZZaWhoYzNObGNuUnBiMjRwSnl3Z1lYUnZZaWhoYzNObGNuUnBiMjRwS1R0Y2NseHVYSEpjYmlBZ0lDQXZMMVJQUkU4Z1kyaGxZMnNnZEdobElIWmhiSFZsY3lCM2FYUm9JSFJvWlNCb1lYTm9JSEpsWTJWcGRtVmtYSEpjYmlBZ0x5OGdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMSEpsYW1WamRDa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ2JHVjBJR1JsWTI5a1pXUkRiMjUwWlc1ME1pQTlJR0YwYjJJb1lYTnpaWEowYVc5dUtUdGNjbHh1SUNBZ0lDQWdiR1YwSUdOdmJuUmxiblFnUFNCS1UwOU9MbkJoY25ObEtHUmxZMjlrWldSRGIyNTBaVzUwTWlrN1hISmNiaUFnSUNBZ0lHeGxkQ0JwWkZSdmEyVnVVM0JzYVhSbFpDQTlJR052Ym5SbGJuUXVkRzlyWlc1SlJDNXpjR3hwZENnbkxpY3BPMXh5WEc0Z0lDQWdJQ0JzWlhRZ2FXUlViMnRsYmlBOUlFcFRUMDR1Y0dGeWMyVW9ZWFJ2WWlocFpGUnZhMlZ1VTNCc2FYUmxaRnN4WFNrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnTHk5eVpYTnZiSFpsS0h0cFpHVnVkR2wwZVRvZ2FXUlViMnRsYmk1bGJXRnBiQ3dnWTI5dWRHVnVkSE02SUdsa1ZHOXJaVzR1Ym05dVkyVjlLVHRjY2x4dVhISmNiaUFnSUNBdkwzMHBPMXh5WEc1Y2NseHVJQ0FnSUhKbGRIVnliaUJ1WlhjZ1VISnZiV2x6WlNobWRXNWpkR2x2YmloeVpYTnZiSFpsTEhKbGFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNCc1pYUWdhU0E5SUdOdmJtWnBaeTVwWkhCSmJtWnZPMXh5WEc0Z0lDQWdJQ0JzWlhRZ1pHVmpiMlJsWkVOdmJuUmxiblFnUFNCaGRHOWlLR0Z6YzJWeWRHbHZiaWs3WEhKY2JpQWdJQ0FnSUd4bGRDQmpiMjUwWlc1MElEMGdTbE5QVGk1d1lYSnpaU2hrWldOdlpHVmtRMjl1ZEdWdWRDazdYSEpjYmlBZ0lDQWdJSE5sYm1SSVZGUlFVbVZ4ZFdWemRDZ25SMFZVSnl3Z2FTNTBiMnRsYmtsdVptOGdLeUJqYjI1MFpXNTBMblJ2YTJWdVNVUXBMblJvWlc0b2NtVnpkV3gwSUQwK0lIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1NsTlBUaTV6ZEhKcGJtZHBabmtvY21WemRXeDBLU0E5UFQwZ1NsTlBUaTV6ZEhKcGJtZHBabmtvWTI5dWRHVnVkQzUwYjJ0bGJrbEVTbE5QVGlrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvZTJsa1pXNTBhWFI1T2lCamIyNTBaVzUwTG5SdmEyVnVTVVJLVTA5T0xtVnRZV2xzTENCamIyNTBaVzUwY3pvZ1kyOXVkR1Z1ZEM1MGIydGxia2xFU2xOUFRuMHBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQnlaV3BsWTNRb0oybHVkbUZzYVdRbktUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUgwcExtTmhkR05vS0dWeWNpQTlQaUI3WEhKY2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0dWeWNpazdYSEpjYmlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlNrN1hISmNiaUFnZlN4Y2NseHVYSEpjYmlBZ2NtVm1jbVZ6YUVGemMyVnlkR2x2YmpvZ0tHbGtaVzUwYVhSNUtTQTlQaUI3WEhKY2JpQWdJQ0JqYjI1emIyeGxMbXh2WnlnblQwbEVReTV5WldaeVpYTm9RWE56WlhKMGFXOXVPbTlzWkVsa1pXNTBhWFI1Snl3Z2FXUmxiblJwZEhrcE8xeHlYRzR2THlBZ0lDQnNaWFFnYVNBOUlHZHZiMmRzWlVsdVptODdYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4eVhHNHZLaUFnSUNBZ0lHbG1JQ2hwWkdWdWRHbDBlUzVwYm1adkxuSmxabkpsYzJoVWIydGxiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHVjRZMmhoYm1kbFVtVm1jbVZ6YUZSdmEyVnVLR2xrWlc1MGFYUjVMbWx1Wm04dWNtVm1jbVZ6YUZSdmEyVnVLUzUwYUdWdUtHWjFibU4wYVc5dUtIWmhiSFZsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2FXNW1iMVJ2YTJWdVZWSk1JRDBnYVM1MWMyVnlhVzVtYnlBcklIWmhiSFZsTG1GalkyVnpjMTkwYjJ0bGJqdGNjbHh1SUNBZ0lDQWdJQ0FnSUhObGJtUklWRlJRVW1WeGRXVnpkQ2duUjBWVUp5d2dhVzVtYjFSdmEyVnVWVkpNS1M1MGFHVnVLR1oxYm1OMGFXOXVLR2x1Wm05VWIydGxiaWtnZTF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2xrWlc1MGFYUjVRblZ1Wkd4bElEMGdlMkZqWTJWemMxUnZhMlZ1T2lCMllXeDFaUzVoWTJObGMzTmZkRzlyWlc0c0lHbGtWRzlyWlc0NklIWmhiSFZsTG1sa1gzUnZhMlZ1TENCeVpXWnlaWE5vVkc5clpXNDZJR2xrWlc1MGFYUjVMbWx1Wm04dWNtVm1jbVZ6YUZSdmEyVnVMQ0IwYjJ0bGJsUjVjR1U2SUdsa1pXNTBhWFI1TG1sdVptOHVkRzlyWlc1VWVYQmxMQ0JwYm1adlZHOXJaVzQ2SUdsdVptOVViMnRsYm4wN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBaRlJ2YTJWdVZWSk1JRDBnYVM1MGIydGxia2x1Wm04Z0t5QjJZV3gxWlM1cFpGOTBiMnRsYmp0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZiMkowWVdsdUlHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElIUm9aU0IxYzJWeUlHbGtWRzlyWlc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWdVpFaFVWRkJTWlhGMVpYTjBLQ2RIUlZRbkxDQnBaRlJ2YTJWdVZWSk1LUzUwYUdWdUtHWjFibU4wYVc5dUtHbGtWRzlyWlc0cElIdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdSbGJuUnBkSGxDZFc1a2JHVXVkRzlyWlc1SlJFcFRUMDRnUFNCcFpGUnZhMlZ1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUdsa1pXNTBhWFI1UW5WdVpHeGxMbVY0Y0dseVpYTWdQU0JwWkZSdmEyVnVMbVY0Y0R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpHVnVkR2wwZVVKMWJtUnNaUzVsYldGcGJDQTlJR2xrVkc5clpXNHVaVzFoYVd3N1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdmJHUkpSRlJ2YTJWdUlEMGdTbE5QVGk1d1lYSnpaU2hoZEc5aUtHbGtaVzUwYVhSNUxtRnpjMlZ5ZEdsdmJpa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdmJHUkpaRlJ2YTJWdVUzQnNhWFJsWkNBOUlHOXNaRWxFVkc5clpXNHVkRzlyWlc1SlJDNXpjR3hwZENnbkxpY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCdmJHUkVaV052WkdWa1NVUlViMnRsYmlBOUlFcFRUMDR1Y0dGeWMyVW9ZWFJ2WWlodmJHUkpaRlJ2YTJWdVUzQnNhWFJsWkZzeFhTa3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcFpFNXZibU5sSUQwZ2IyeGtSR1ZqYjJSbFpFbEVWRzlyWlc0dWJtOXVZMlU3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5WldObGFYWmxaRWxFVkc5clpXNGdQU0IyWVd4MVpTNXBaRjkwYjJ0bGJqdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnYVdSVWIydGxibE53YkdsMFpXUWdQU0J5WldObGFYWmxaRWxFVkc5clpXNHVjM0JzYVhRb0p5NG5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1pHVmpiMlJsWkVsRVZHOXJaVzRnUFNCS1UwOU9MbkJoY25ObEtHRjBiMklvYVdSVWIydGxibE53YkdsMFpXUmJNVjBwS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1ZqYjJSbFpFbEVWRzlyWlc0dWJtOXVZMlVnUFNCcFpFNXZibU5sTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBibk5sY25SbFpFNXZibU5sSUQwZ1luUnZZU2hLVTA5T0xuTjBjbWx1WjJsbWVTaGtaV052WkdWa1NVUlViMnRsYmlrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J1WlhkSlJGUnZhMlZ1SUQwZ2FXUlViMnRsYmxOd2JHbDBaV1JiTUYwZ0t5QW5MaWNnSzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGJuTmxjblJsWkU1dmJtTmxJQ3NnSnk0bklDdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1JVYjJ0bGJsTndiR2wwWldSYk1sMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQmhjM05sY25ScGIyNGdQU0JpZEc5aEtFcFRUMDR1YzNSeWFXNW5hV1o1S0h0MGIydGxia2xFT2lCdVpYZEpSRlJ2YTJWdUxDQjBiMnRsYmtsRVNsTlBUam9nYVdSVWIydGxibjBwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1J3UW5WdVpHeGxJRDBnZTJSdmJXRnBiam9nSjJkdmIyZHNaUzVqYjIwbkxDQndjbTkwYjJOdmJEb2dKMDlKUkVNbmZUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk5VVQwUlBJR1JsYkdWMFpTQnNZWFJsY2lCMGFHVWdabWxsYkdRZ2FXNW1iMVJ2YTJWdUxDQmhibVFnWkdWc1pYUmxJSFJvWlNCdVpXVmtJR2x1SUhSb1pTQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSEpsZEhWeWJsWmhiSFZsSUQwZ2UyRnpjMlZ5ZEdsdmJqb2dZWE56WlhKMGFXOXVMQ0JwWkhBNklHbGtjRUoxYm1Sc1pTd2dhVzVtYnpvZ2FXUmxiblJwZEhsQ2RXNWtiR1VzSUdsdVptOVViMnRsYmpvZ2FXNW1iMVJ2YTJWdWZUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMMk52Ym5OdmJHVXViRzluS0NkUVVrOVlXVHB5WldaeVpYTm9RWE56WlhKMGFXOXVPbTVsZDBsa1pXNTBhWFI1Snl3Z2NtVjBkWEp1Vm1Gc2RXVXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSEpsYzI5c2RtVW9jbVYwZFhKdVZtRnNkV1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0I5S2k5Y2NseHVJQ0FnSUNBZ2NtVnpiMngyWlNnZ2FXUmxiblJwZEhrZ0tUdGNjbHh1SUNBZ0lIMHBPMXh5WEc1Y2NseHVYSEpjYmlBZ2ZTeGNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdLaUJHZFc1amRHbHZiaUIwYnlCblpXNWxjbUYwWlNCaGJpQnBaR1Z1ZEdsMGVTQkJjM05sY25ScGIyNWNjbHh1SUNBcUlGUlBSRThnWVdSa0lHUmxkR0ZwYkhNZ2IyWWdkR2hsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVMQ0JoYm1RZ2FXMXdjbTkyWlNCcGJYQnNaVzFsYm5SaGRHbHZibHh5WEc0Z0lDcGNjbHh1SUNBcUlFQndZWEpoYlNBZ2UybGtjRWx1Wm05OUlDQWdJQ0FnVDJKcVpXTjBJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJRWxrVUNCbGJtUndiMmx1ZEhOY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTJOdmJuUmxiblJ6ZlNCVWFHVWdZMjl1ZEdWdWRITWdhVzVqYkhWa1pYTWdhVzVtYjNKdFlYUnBiMjRnWVdKdmRYUWdkR2hsSUdsa1pXNTBhWFI1SUhKbFkyVnBkbVZrWEhKY2JpQWdLaUJBY0dGeVlXMGdJSHR2Y21sbmFXNTlJRTl5YVdkcGJpQndZWEpoYldWMFpYSWdkR2hoZENCcFpHVnVkR2xtYVdWeklIUm9aU0J2Y21sbmFXNGdiMllnZEdobElGSlVRMUJsWlhKRGIyNXVaV04wYVc5dVhISmNiaUFnS2lCQWNHRnlZVzBnSUh0MWMyVnlibUZ0WlVocGJuUjlJRzl3ZEdsdmJtRnNJSFZ6WlhKdVlXMWxTR2x1ZENCd1lYSmhiV1YwWlhKY2NseHVJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUhKbGRIVnlibk1nWVNCd2NtOXRhWE5sSUhkcGRHZ2dZVzRnYVdSbGJuUnBkSGtnWVhOelpYSjBhVzl1WEhKY2JpQWdLaTljY2x4dUlDQm5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJqb2dLR052Ym1acFp5d2dZMjl1ZEdWdWRITXNJRzl5YVdkcGJpd2dhR2x1ZENrZ1BUNGdlMXh5WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0UFNVUkRMbWRsYm1WeVlYUmxRWE56WlhKMGFXOXVPbU52Ym5SbGJuUnpYU2NzSUdOdmJuUmxiblJ6S1R0Y2NseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJUMGxFUXk1blpXNWxjbUYwWlVGemMyVnlkR2x2YmpwdmNtbG5hVzVkSnl3Z2IzSnBaMmx1S1R0Y2NseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJUMGxFUXk1blpXNWxjbUYwWlVGemMyVnlkR2x2Ympwb2FXNTBYU2NzSUdocGJuUXBPMXh5WEc0Z0lDQWdiR1YwSUdrZ1BTQmpiMjVtYVdjdWFXUndTVzVtYnp0Y2NseHVYSEpjYmlBZ0lDQXZMM04wWVhKMElIUm9aU0JzYjJkcGJpQndhR0Z6WlZ4eVhHNGdJQ0FnTHk5VVQwUlBJR3hoZEdWeUlITm9iM1ZzWkNCaVpTQmtaV1pwYm1Wa0lHRWdZbVYwZEdWeUlHRndjSEp2WVdOb1hISmNiaUFnSUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hISmNiaUFnSUNBZ0lHbG1JQ2doYUdsdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4cWRISjVJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gzYVc1a2IzY3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTZ25kWEpzSnlrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pYSnliM0lwSUhzcUwxeHlYRzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ4ZFdWemRGVnliQ0E5SUdrdVlYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBJQ3NnSjNKbFpHbHlaV04wWDNWeWFUMG5JQ3NnY21Wa2FYSmxZM1JWVWtsY2NseHVJQ0FnSUNBZ0lDQXJJQ2NtY0hKdmJYQjBQV052Ym5ObGJuUW1jbVZ6Y0c5dWMyVmZkSGx3WlQwbklDc2dhUzUwZVhCbFhISmNiaUFnSUNBZ0lDQWdLeUFuSm1Oc2FXVnVkRjlwWkQwbklDc2dhUzVqYkdsbGJuUkpSRnh5WEc0Z0lDQWdJQ0FnSUNzZ0p5WnpZMjl3WlQwbklDc2dhUzV6WTI5d1pWeHlYRzRnSUNBZ0lDQWdJQ3NnSnlaaFkyTmxjM05mZEhsd1pUMG5JQ3NnYVM1aFkyTmxjM05VZVhCbFhISmNiaUFnSUNBZ0lDQWdLeUFuSm01dmJtTmxQU2NnS3lCamIyNTBaVzUwYzF4eVhHNGdJQ0FnSUNBZ0lDc2dKeVp6ZEdGMFpUMG5JQ3NnYVM1emRHRjBaU0E3WEhKY2JseHlYRzR2THlBZ0lDQWdJQ0FnYkdWMElISmxjWFZsYzNSVmNtd2dQU0JwTG1GMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRDQXJJQ2R6WTI5d1pUMG5JQ3NnYVM1elkyOXdaU0FySUNjbVkyeHBaVzUwWDJsa1BTY2dLeUJwTG1Oc2FXVnVkRWxFSUNzZ0p5WnlaV1JwY21WamRGOTFjbWs5SnlBcklHa3VjbVZrYVhKbFkzUlZVa2tnS3lBbkpuSmxjM0J2Ym5ObFgzUjVjR1U5WTI5a1pTY2dLeUF2S21rdWRIbHdaU0FyS2k4Z0p5WnpkR0YwWlQwbklDc2dhUzV6ZEdGMFpTQXJJQ2NtY0hKdmJYQjBQV052Ym5ObGJuUW1ZV05qWlhOelgzUjVjR1U5SnlBcklHa3VZV05qWlhOelZIbHdaU0FySUNjbWJtOXVZMlU5SnlBcklHTnZiblJsYm5Sek8xeHlYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkYlQwbEVReTVuWlc1bGNtRjBaVUZ6YzJWeWRHbHZibDBnVGs5ZlNFbE9WRG9nY21WcVpXTjBhVzVuSUhkcGRHZ2djbVZ4ZFdWemRGVnliQ0FuTENCeVpYRjFaWE4wVlhKc0tUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2NtVnFaV04wS0h0dVlXMWxPaUFuU1dSUVRHOW5hVzVGY25KdmNpY3NJR3h2WjJsdVZYSnNPaUJ5WlhGMVpYTjBWWEpzZlNrN1hISmNibHh5WEc0Z0lDQWdJQ0F2THlBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnZlNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QjBhR1VnY21WeGRXVnpkQ0JvWVhabElHRnNjbVZoWkhrZ1ltVmxiaUJ0WVdSbExDQnpieUJwWkhCUVVtOTRlU0IzYVd4c0lHVjRZMmhoYm1kbElIUm9aU0IwYjJ0bGJuTWdZV3h2Ym1jZ2RHOGdkR2hsSUdsa2NDd2dkRzhnYjJKMFlXbHVJSFJvWlNCcGJtWnZjbTFoZEdsdmJpQnVaV05sYzNOaGNubGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1lXTmpaWE56Vkc5clpXNGdQU0IxY214UVlYSnpaWElvYUdsdWRDd2dKMkZqWTJWemMxOTBiMnRsYmljcE8xeHlYRzRnSUNBZ0lDQWdJR3hsZENCcFpGUnZhMlZ1SUQwZ2RYSnNVR0Z5YzJWeUtHaHBiblFzSUNkcFpGOTBiMnRsYmljcE8xeHlYRzRnSUNBZ0lDQWdJR3hsZENCamIyUmxJRDBnZFhKc1VHRnljMlZ5S0docGJuUXNJQ2RqYjJSbEp5azdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZZMjl1YzI5c1pTNXNiMmNvSjBkUFQwZE1SVjlRVWs5WVdWOUlTVTVVT2lBbkxDQm9hVzUwS1R0Y2NseHVYSEpjYmk4dklDQWdJQ0FnSUdWNFkyaGhibWRsUTI5a1pTaGpiMlJsS1M1MGFHVnVLR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdYSEpjYmlBdkx5QWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5Z25XMDlKUkVNdVoyVnVaWEpoZEdWQmMzTmxjblJwYjI1ZElHOWlkR0ZwYm1Wa0lHVjRZMmhoYm1kbFpDQlViMnRsYmlBbkxDQjJZV3gxWlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0x5OXZZblJoYVc0Z2FXNW1iM0p0WVhScGIyNGdZV0p2ZFhRZ2RHaGxJSFZ6WlhKY2NseHVJQ0FnSUNBZ0lDQWdJQzh2YkdWMElHbHVabTlVYjJ0bGJsVlNUQ0E5SUdrdWRYTmxjbWx1Wm04Z0t5QjJZV3gxWlM1aFkyTmxjM05mZEc5clpXNDdYSEpjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdhVzVtYjFSdmEyVnVWVkpNSUQwZ2FTNTFjMlZ5YVc1bWJ5QXJJR0ZqWTJWemMxUnZhMlZ1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdjMlZ1WkVoVVZGQlNaWEYxWlhOMEtDZEhSVlFuTENCcGJtWnZWRzlyWlc1VlVrd3BMblJvWlc0b1puVnVZM1JwYjI0b2FXNW1iMVJ2YTJWdUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiVDBsRVF5NW5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJsMGdiMkowWVdsdVpXUWdhVzVtYjFSdmEyVnVJQ2NzSUdsdVptOVViMnRsYmlrN1hISmNibHh5WEc0dkx5QWdJQ0FnSUNBZ0lDQWdJR3hsZENCcFpHVnVkR2wwZVVKMWJtUnNaU0E5SUh0aFkyTmxjM05VYjJ0bGJqb2dkbUZzZFdVdVlXTmpaWE56WDNSdmEyVnVMQ0JwWkZSdmEyVnVPaUIyWVd4MVpTNXBaRjkwYjJ0bGJpd2djbVZtY21WemFGUnZhMlZ1T2lCMllXeDFaUzV5WldaeVpYTm9YM1J2YTJWdUxDQjBiMnRsYmxSNWNHVTZJSFpoYkhWbExuUnZhMlZ1WDNSNWNHVXNJR2x1Wm05VWIydGxiam9nYVc1bWIxUnZhMlZ1ZlR0Y2NseHVYSEpjYmk4dklDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsa1ZHOXJaVzVWVWt3Z1BTQnBMblJ2YTJWdVNXNW1ieUFySUhaaGJIVmxMbWxrWDNSdmEyVnVPMXh5WEc0dktseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JsYm5ScGRIbENkVzVrYkdVZ1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZV05qWlhOelZHOXJaVzQ2SUdGalkyVnpjMVJ2YTJWdUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGtWRzlyWlc0NklHbGtWRzlyWlc0c1hISmNiaTh2SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaV1p5WlhOb1ZHOXJaVzQ2SUhaaGJIVmxMbkpsWm5KbGMyaGZkRzlyWlc0c1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2RHOXJaVzVVZVhCbE9pQW5RbVZoY21WeUp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnBibVp2Vkc5clpXNDZJR2x1Wm05VWIydGxibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlPeW92WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JVYjJ0bGJsVlNUQ0E5SUdrdWRHOXJaVzVKYm1adklDc2dhV1JVYjJ0bGJqdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2YjJKMFlXbHVJR2x1Wm05eWJXRjBhVzl1SUdGaWIzVjBJSFJvWlNCMWMyVnlJR2xrVkc5clpXNWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2MyVnVaRWhVVkZCU1pYRjFaWE4wS0NkSFJWUW5MQ0JwWkZSdmEyVnVWVkpNS1M1MGFHVnVLR1oxYm1OMGFXOXVLR2xrVkc5clpXNUtVMDlPS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRQU1VSRExtZGxibVZ5WVhSbFFYTnpaWEowYVc5dVhTQnZZblJoYVc1bFpDQnBaRlJ2YTJWdUlDY3NJR2xrVkc5clpXNUtVMDlPS1R0Y2NseHVYSEpjYmk4cUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkdWdWRHbDBlVUoxYm1Sc1pTNTBiMnRsYmtsRVNsTlBUaUE5SUdsa1ZHOXJaVzVLVTA5T08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbGtaVzUwYVhSNVFuVnVaR3hsTG1WNGNHbHlaWE1nUFNCcFpGUnZhMlZ1U2xOUFRpNWxlSEE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdSbGJuUnBkSGxDZFc1a2JHVXVaVzFoYVd3Z1BTQnBaRlJ2YTJWdVNsTlBUaTVsYldGcGJEc3FMMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdZWE56WlhKMGFXOXVJRDBnWW5SdllTaEtVMDlPTG5OMGNtbHVaMmxtZVNoN2RHOXJaVzVKUkRvZ2FXUlViMnRsYml3Z2RHOXJaVzVKUkVwVFQwNDZJR2xrVkc5clpXNUtVMDlPZlNrcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JwWkhCQ2RXNWtiR1VnUFNCN1pHOXRZV2x1T2lCcExtUnZiV0ZwYml3Z2NISnZkRzlqYjJ3NklDZFBTVVJESjMwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2VkU5RVR5QmtaV3hsZEdVZ2JHRjBaWElnZEdobElHWnBaV3hrSUdsdVptOVViMnRsYml3Z1lXNWtJR1JsYkdWMFpTQjBhR1VnYm1WbFpDQnBiaUIwYUdVZ1pYaGhiWEJzWlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklGUlBSRThnY21Wd2JHRmpaU0JjSW5KbFpuSmxjMmc2SUhSeWRXVmNJaUJpZVNCMGFHVWdjbVZoYkNCeVpXWnlaWE5vSUhSdmEyVnVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhKbGRIVnlibFpoYkhWbElEMGdlMkZ6YzJWeWRHbHZiam9nWVhOelpYSjBhVzl1TENCcFpIQTZJR2xrY0VKMWJtUnNaU3dnWlhod2FYSmxjem9nYVdSVWIydGxia3BUVDA0dVpYaHdMQ0IxYzJWeVVISnZabWxzWlRvZ2FXNW1iMVJ2YTJWdUxDQnlaV1p5WlhOb09pQjBjblZsZlR0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1JsYm5ScGRHbGxjMXR1U1dSbGJuUnBkSGxkSUQwZ2NtVjBkWEp1Vm1Gc2RXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdLeXR1U1dSbGJuUnBkSGs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiVDBsRVF5NW5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJsMGdjbVYwZFhKdWFXNW5PaUFuTENCS1UwOU9Mbk4wY21sdVoybG1lU2h5WlhSMWNtNVdZV3gxWlNrcE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmJIWmxLSEpsZEhWeWJsWmhiSFZsS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0b1pTa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpXcGxZM1FvWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0b1pYSnliM0lwSUh0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSnZjaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQjlLVHRjY2x4dUx5b2dJQ0FnSUNBZ0lIMHNJR1oxYm1OMGFXOXVLR1Z5Y2lrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lISmxhbVZqZENobGNuSXBPMXh5WEc0Z0lDQWdJQ0FnSUgwcE95b3ZYSEpjYmx4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOUtUdGNjbHh1SUNCOUxGeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQXFJRVoxYm1OMGFXOXVJSFJ2SUdkbGRDQmhiaUJCWTJObGMzTWdWRzlyWlc0Z1pXNWtjRzlwYm5SY2NseHVJQ0FxWEhKY2JpQWdLaUJBY0dGeVlXMGdJSHRqYjI1bWFXZDlJQ0FnSUNBZ1QySnFaV04wSUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUVsa1VDQmxibVJ3YjJsdWRITmNjbHh1SUNBcUlFQndZWEpoYlNBZ2UzSmxjMjkxY21ObGMzMGdUMkpxWldOMElHTnZiblJsYm5SeklHbHVZMngxWkdWeklHbHVabTl5YldGMGFXOXVJR0ZpYjNWMElIUm9aU0JwWkdWdWRHbDBlU0J5WldObGFYWmxaRnh5WEc0Z0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdjbVYwZFhKdWN5QmhJSEJ5YjIxcGMyVWdkMmwwYUNCaGJpQnBaR1Z1ZEdsMGVTQmhjM05sY25ScGIyNWNjbHh1SUNBcUwxeHlYRzVjY2x4dUlDQm5aWFJCWTJObGMzTlViMnRsYmtGMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWREb2dLR052Ym1acFp5d2djbVZ6YjNWeVkyVnpLU0E5UGlCN1hISmNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25XMDlKUkVNdVoyVjBRV05qWlhOelZHOXJaVzVCZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5RNlkyOXVabWxuWFNjc0lHTnZibVpwWnlrN1hISmNiaTh2SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiVDBsRVF5NW5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJqcGpiMjUwWlc1MGMxMG5MQ0JqYjI1MFpXNTBjeWs3WEhKY2JpOHZJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJUMGxFUXk1blpXNWxjbUYwWlVGemMyVnlkR2x2YmpwdmNtbG5hVzVkSnl3Z2IzSnBaMmx1S1R0Y2NseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJUMGxFUXk1blpYUkJZMk5sYzNOVWIydGxia0YxZEdodmNtbHpZWFJwYjI1RmJtUndiMmx1ZERweVpYTnZkWEpqWlhOZEp5d2djbVZ6YjNWeVkyVnpLVHRjY2x4dUx5OGdJQ0FnYkdWMElHa2dQU0JwWkhCSmJtWnZPMXh5WEc0Z0lDQWdZV05qWlhOelZHOXJaVzVCZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5RZ1BTQmpiMjVtYVdjdVlXTmpaWE56Vkc5clpXNUJkWFJvYjNKcGMyRjBhVzl1Ulc1a2NHOXBiblE3WEhKY2JpQWdJQ0JqYjI1emRDQnRZWEJ3YVc1bklEMGdZMjl1Wm1sbkxtMWhjSEJwYm1jN1hISmNibHh5WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNjbHh1SUNBZ0lDOHZjM1JoY25RZ2RHaGxJR3h2WjJsdUlIQm9ZWE5sWEhKY2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4eVhHNGdJQ0FnSUNBdkx5QlVUMFJQSUhKbGNHeGhZMlVnWW5rZ2NtVnpiM1Z5WTJWeld6QmRYSEpjYmlBZ0lDQWdJSEpsYzI5c2RtVW9ZV05qWlhOelZHOXJaVzVCZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5Rb2JXRndjR2x1WnloeVpYTnZkWEpqWlhNcEtTazdYSEpjYmx4eVhHNGdJQ0FnZlN3Z1puVnVZM1JwYjI0Z0tHVXBJSHRjY2x4dVhISmNiaUFnSUNBZ0lISmxhbVZqZENobEtUdGNjbHh1SUNBZ0lIMHBPMXh5WEc0Z0lIMHNYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nUm5WdVkzUnBiMjRnZEc4Z1oyVjBJR0Z1SUVGalkyVnpjeUJVYjJ0bGJseHlYRzRnSUNwY2NseHVJQ0FxSUVCd1lYSmhiU0FnZTJ4dloybHVmU0J2Y0hScGIyNWhiQ0JzYjJkcGJpQnlaWE4xYkhSY2NseHVJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUhKbGRIVnlibk1nWVNCd2NtOXRhWE5sSUhkcGRHZ2dZVzRnYVdSbGJuUnBkSGtnWVhOelpYSjBhVzl1WEhKY2JpQWdLaTljY2x4dVhISmNiaUFnWjJWMFFXTmpaWE56Vkc5clpXNDZJQ2hqYjI1bWFXY3NJSEpsYzI5MWNtTmxjeXdnYkc5bmFXNHBJRDArSUh0Y2NseHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJUMGxFUXk1blpYUkJZMk5sYzNOVWIydGxianBqYjI1bWFXZGRKeXdnWTI5dVptbG5LVHRjY2x4dUx5OGdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdFBTVVJETG1kbGJtVnlZWFJsUVhOelpYSjBhVzl1T21OdmJuUmxiblJ6WFNjc0lHTnZiblJsYm5SektUdGNjbHh1THk4Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0UFNVUkRMbWRsYm1WeVlYUmxRWE56WlhKMGFXOXVPbTl5YVdkcGJsMG5MQ0J2Y21sbmFXNHBPMXh5WEc0Z0lDQWdZMjl1YzI5c1pTNXNiMmNvSjF0UFNVUkRMbWRsZEVGalkyVnpjMVJ2YTJWdU9teHZaMmx1WFNjc0lHeHZaMmx1S1R0Y2NseHVMeThnSUNBZ2JHVjBJR2tnUFNCcFpIQkpibVp2TzF4eVhHNGdJQ0FnWVdOalpYTnpWRzlyWlc1RmJtUndiMmx1ZENBOUlHTnZibVpwWnk1aFkyTmxjM05VYjJ0bGJrVnVaSEJ2YVc1ME8xeHlYRzRnSUNBZ1pHOXRZV2x1SUQwZ1kyOXVabWxuTG1SdmJXRnBianRjY2x4dVhISmNiaUFnSUNCc1pYUWdYM1JvYVhNZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnTHk5emRHRnlkQ0IwYUdVZ2JHOW5hVzRnY0doaGMyVmNjbHh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTaG1kVzVqZEdsdmJpQW9jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2RHaGxJSFZ6WlhJZ2FYTWdiRzluWjJWa2FXNHNJSFJ5ZVNCMGJ5QmxlSFJ5WVdOMElIUm9aU0JCWTJObGMzTWdWRzlyWlc0Z1lXNWtJR2wwY3lCbGVIQnBjbVZ6WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR1Y0Y0dseVpYTWdQU0JuWlhSRmVIQnBjbVZ6S0d4dloybHVLVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUdGalkyVnpjMVJ2YTJWdUlEMGdkWEpzVUdGeWMyVnlLR3h2WjJsdUxDQW5ZV05qWlhOelgzUnZhMlZ1SnlrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGhZMk5sYzNOVWIydGxiaWtnY21WemIyeDJaU2dnWVdOalpYTnpWRzlyWlc1U1pYTjFiSFFvY21WemIzVnlZMlZ6TENCaFkyTmxjM05VYjJ0bGJpd2daWGh3YVhKbGN5d2diRzluYVc0cElDazdYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQnlaWE52YkhabEtDQm5aWFJCWTJObGMzTlViMnRsYmxkcGRHaERiMlJsVkc5clpXNG9jbVZ6YjNWeVkyVnpMQ0JzYjJkcGJpa2dLVHRjY2x4dUlDQWdJSDBzSUdaMWJtTjBhVzl1SUNobEtTQjdYSEpjYmx4eVhHNGdJQ0FnSUNCeVpXcGxZM1FvWlNrN1hISmNiaUFnSUNCOUtUdGNjbHh1SUNCOUxGeHlYRzVjY2x4dUx5b3FYSEpjYmlBZ0tpQkdkVzVqZEdsdmJpQjBieUJuWlhRZ1lXNGdRV05qWlhOeklGUnZhMlZ1WEhKY2JpQWdLbHh5WEc0Z0lDb2dRSEJoY21GdElDQjdiRzluYVc1OUlHOXdkR2x2Ym1Gc0lHeHZaMmx1SUhKbGMzVnNkRnh5WEc0Z0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdjbVYwZFhKdWN5QmhJSEJ5YjIxcGMyVWdkMmwwYUNCaGJpQnBaR1Z1ZEdsMGVTQmhjM05sY25ScGIyNWNjbHh1SUNBcUwxeHlYRzVjY2x4dUlISmxabkpsYzJoQlkyTmxjM05VYjJ0bGJqb2dLR052Ym1acFp5d2dkRzlyWlc0cElEMCtJSHRjY2x4dUlDQWdJR052Ym5OdmJHVXViRzluS0NkYlQwbEVReTV5WldaeVpYTm9RV05qWlhOelZHOXJaVzQ2WTI5dVptbG5YU2NzSUdOdmJtWnBaeWs3WEhKY2JpQWdMeThnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRQU1VSRExtZGxibVZ5WVhSbFFYTnpaWEowYVc5dU9tTnZiblJsYm5SelhTY3NJR052Ym5SbGJuUnpLVHRjY2x4dUlDQXZMeUFnSUNCamIyNXpiMnhsTG14dlp5Z25XMDlKUkVNdVoyVnVaWEpoZEdWQmMzTmxjblJwYjI0NmIzSnBaMmx1WFNjc0lHOXlhV2RwYmlrN1hISmNiaUFnSUNCamIyNXpiMnhsTG14dlp5Z25XMDlKUkVNdWNtVm1jbVZ6YUVGalkyVnpjMVJ2YTJWdU9tOTFkR1JoZEdWa0lIUnZhMlZ1WFNjc0lIUnZhMlZ1S1R0Y2NseHVJQ0F2THlBZ0lDQnNaWFFnYVNBOUlHbGtjRWx1Wm04N1hISmNiaUFnY21WbWNtVnphRUZqWTJWemMxUnZhMlZ1Ulc1a2NHOXBiblFnUFNCamIyNW1hV2N1Y21WbWNtVnphRUZqWTJWemMxUnZhMlZ1Ulc1a2NHOXBiblE3WEhKY2JpQWdJQ0JrYjIxaGFXNGdQU0JqYjI1bWFXY3VaRzl0WVdsdU8xeHlYRzVjY2x4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYSEpjYmlBZ0lDQXZMM04wWVhKMElIUm9aU0JzYjJkcGJpQndhR0Z6WlZ4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1SUNoeVpYTnZiSFpsTENCeVpXcGxZM1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQXZMeUIwYUdVZ2RYTmxjaUJwY3lCc2IyZG5aV1JwYml3Z2RISjVJSFJ2SUdWNGRISmhZM1FnZEdobElFRmpZMlZ6Y3lCVWIydGxiaUJoYm1RZ2FYUnpJR1Y0Y0dseVpYTmNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSEpsWm5KbGMyZ2dQU0IwYjJ0bGJpNXlaV1p5WlhOb08xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9JWEpsWm5KbGMyZ3BJSEpsYW1WamRDZ25XMDlKUkVNdWNtVm1jbVZ6YUVGalkyVnpjMVJ2YTJWdVhTQnlaV1p5WlhOb0lIUnZhMlZ1SUc1dmRDQmhkbUZwYkdGaWJHVWdhVzRnZEdobElHRmpZMlZ6Y3lCMGIydGxiaWNzSUhSdmEyVnVLVHRjY2x4dUlDQWdJRnh5WEc0Z0lDQWdJQ0FnSUNBZ2MyVnVaRWhVVkZCU1pYRjFaWE4wS0NkUVQxTlVKeXdnY21WbWNtVnphRUZqWTJWemMxUnZhMlZ1Ulc1a2NHOXBiblFvY21WbWNtVnphQ2twTG5Sb1pXNG9ablZ1WTNScGIyNGdLR2x1Wm04cElIdGNjbHh1SUNBZ0lGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMXRQU1VSRExuSmxabkpsYzJoQlkyTmxjM05VYjJ0bGJsMGdjbVZ6Y0c5dWMyVTZJQ2NzSUdsdVptOHBPMXh5WEc0Z0lDQWdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hwYm1adkxtaGhjMDkzYmxCeWIzQmxjblI1S0NkaFkyTmxjM05mZEc5clpXNG5LU2tnZTF4eVhHNGdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHVjRjR2x5WlhNZ1BTQm5aWFJGZUhCcGNtVnpRWFJLVTA5T0tHbHVabThwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVnS0dGalkyVnpjMVJ2YTJWdVVtVnpkV3gwS0hSdmEyVnVMbkpsYzI5MWNtTmxjeXdnYVc1bWJ5NWhZMk5sYzNOZmRHOXJaVzRzSUdWNGNHbHlaWE1zSUdsdVptOHNJSEpsWm5KbGMyZ3BLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU0JsYkhObElISmxhbVZqZENnblcwOUpSRU11Y21WbWNtVnphRUZqWTJWemMxUnZhMlZ1WFNCdVpYY2dZV05qWlhOeklIUnZhMlZ1SUc1dmRDQnlaWFIxY201bFpDQnBiaUIwYUdVZ2NtVnpjRzl1YzJVNklDY3NJR2x1Wm04cE8xeHlYRzRnSUNBZ0lDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0Z0tHVnljbTl5S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25KdmNpazdYSEpjYmlBZ0lDQWdJQ0FnSUNCOUtUdGNjbHh1SUNBZ0lGeHlYRzR2THlBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnWEhKY2JpQWdJQ0I5TENCbWRXNWpkR2x2YmlBb1pTa2dlMXh5WEc1Y2NseHVJQ0FnSUNBZ2NtVnFaV04wS0dVcE8xeHlYRzRnSUNBZ2ZTazdYSEpjYmlBZ2ZTQWdYSEpjYm4wN1hISmNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUx5NHVMMlJsZGkxd2NtOTBiM04wZFdKekwzTnlZeTlwWkhCd2NtOTRlUzlQU1VSRExtcHpJbDBzSW5OdmRYSmpaVkp2YjNRaU9pSWlmUT09XG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMVxuIik7CgovKioqLyB9KSwKLyogMiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CmV2YWwoIlxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5hY2Nlc3NUb2tlbkVuZHBvaW50ID0gYWNjZXNzVG9rZW5FbmRwb2ludDtcbmV4cG9ydHMucmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQgPSByZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludDtcbmV4cG9ydHMucmV2b2tlQWNjZXNzVG9rZW5FbmRwb2ludCA9IHJldm9rZUFjY2Vzc1Rva2VuRW5kcG9pbnQ7XG5leHBvcnRzLm1hcHBpbmcgPSBtYXBwaW5nO1xuZXhwb3J0cy5hY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50O1xuZXhwb3J0cy5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBhdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XG5leHBvcnRzLmFjY2Vzc1Rva2VuSW5wdXQgPSBhY2Nlc3NUb2tlbklucHV0O1xuLypcclxuXHRTbyB0aGF0IGFuIGFwcGxpY2F0aW9uIGNhbiB1c2UgR29vZ2xlJ3MgT0F1dGggMi4wIGF1dGhlbnRpY2F0aW9uIHN5c3RlbSBmb3IgdXNlciBsb2dpbixcclxuXHRmaXJzdCBpcyByZXF1aXJlZCB0byBzZXQgdXAgYSBwcm9qZWN0IGluIHRoZSBHb29nbGUgRGV2ZWxvcGVycyBDb25zb2xlIHRvIG9idGFpbiBPQXV0aCAyLjAgY3JlZGVudGlhbHMgYW5kIHNldCBhIHJlZGlyZWN0IFVSSS5cclxuXHRBIHRlc3QgYWNjb3VudCB3YXMgY3JlYXRlZCB0byBzZXQgdGhlIHByb2plY3QgaW4gdGhlIEdvb2dsZSBEZXZlbG9wZXJzIENvbnNvbGUgdG8gb2J0YWluIE9BdXRoIDIuMCBjcmVkZW50aWFscyxcdHdpdGggdGhlIGZvbGxvd2luZyBjcmVkZW50aWFsczpcclxuICAgICAgXHR1c2VybmFtZTogb3BlbmlkdGVzdDEwQGdtYWlsLmNvbVxyXG4gICAgICAgIHBhc3N3b3JkOiB0ZXN0T3BlbklEMTBcclxuXHRUbyBhZGQgbW9yZSBVUkkncywgZm9sbG93IHRoZSBzdGVwczpcclxuXHQxwrogY2hvb3NlIHRoZSBwcm9qZWN0ICggY2FuIGJlIHRoZSBNeSBPcGVuSUQgUHJvamVjdClcdCBmcm9tICBodHRwczovL2NvbnNvbGUuZGV2ZWxvcGVycy5nb29nbGUuY29tL3Byb2plY3RzZWxlY3Rvci9hcGlzL2NyZWRlbnRpYWxzIHVzaW5nIHRoZSBjcmVkZW50aWFscyBwcm92aWRlZCBhYm92ZS5cclxuXHQywrogT3BlbiBUaGUgQ2xpZW50IFdlYiAxIGxpc3RlZCBpbiBPQXV0aCAyLjAgQ2xpZW50IElEJ3NcclxuXHQzwrogQWRkIHRoZSBVUkkgIGluIHRoZSBhdXRob3JpemVkIHJlZGlyZWN0IFVSSSBzZWN0aW9uLlxyXG4gIDTCuiBjaGFuZ2UgdGhlIFJFRElSRUNUIHBhcmFtZXRlciBiZWxsb3cgd2l0aCB0aGUgcHJldGVuZGVkIFVSSVxyXG4gKi9cbnZhciByZWRpcmVjdFVSSSA9IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgIT09ICcnID8gJzonICsgbG9jYXRpb24ucG9ydCA6ICcnKTtcblxudmFyIGdvb2dsZUluZm8gPSBleHBvcnRzLmdvb2dsZUluZm8gPSB7XG4gIFwiY2xpZW50SURcIjogXCI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbiAgXCJpc3N1ZXJcIjogXCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb21cIixcbiAgXCJ0b2tlbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuP1wiLFxuICBcImp3a3NVcmlcIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvY2VydHM/XCIsXG4gIFwiYXV0aG9yaXNhdGlvbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGg/XCIsXG4gIFwidXNlcmluZm9cIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdXNlcmluZm8/YWNjZXNzX3Rva2VuPVwiLFxuICBcInRva2VuSW5mb1wiOiBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbmluZm8/aWRfdG9rZW49XCIsXG4gIFwiYWNjZXNzVHlwZVwiOiBcIm9ubGluZVwiLFxuICBcInR5cGVcIjogXCJ0b2tlbiBpZF90b2tlblwiLFxuICBcInNjb3BlXCI6IFwib3BlbmlkJTIwZW1haWwlMjBwcm9maWxlXCIsXG4gIFwic3RhdGVcIjogXCJzdGF0ZVwiLFxuICBcImRvbWFpblwiOiBcImdvb2dsZS5jb21cIlxufTtcblxudmFyIGdvb2dsZUFQSUluZm8gPSBleHBvcnRzLmdvb2dsZUFQSUluZm8gPSB7XG4gIFwiY2xpZW50SURcIjogXCI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbiAgXCJpc3N1ZXJcIjogXCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb21cIixcbiAgXCJ0b2tlbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuP1wiLFxuICBcInJldm9rZUVuZHBvaW50XCI6IFwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3Jldm9rZT9cIixcbiAgXCJqd2tzVXJpXCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzP1wiLFxuICBcImF1dGhvcmlzYXRpb25FbmRwb2ludFwiOiBcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoP1wiLFxuICBcInVzZXJpbmZvXCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj1cIixcbiAgXCJ0b2tlbkluZm9cIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW5pbmZvP2lkX3Rva2VuPVwiLFxuICBcImFjY2Vzc1R5cGVcIjogXCJvZmZsaW5lXCIsXG4gIFwidHlwZVwiOiBcImNvZGVcIixcbiAgLy8gVE9ETyAtIHNjb3BlIGlzIHJlYWQgZnJvbSBtZXNzYWdlIChzdXBwb3J0IG11bHRpcGxlIEdvb2dsZSBBUElzKVxuICBcInNjb3BlXCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC9maXRuZXNzLmxvY2F0aW9uLnJlYWRcIixcbiAgXCJzdGF0ZVwiOiBcInN0YXRlXCIsXG4gIFwiZG9tYWluXCI6IFwiZ29vZ2xlLmNvbVwiLFxuICAnZ3JhbnRfdHlwZSc6IFwiYXV0aG9yaXphdGlvbl9jb2RlXCIsXG4gICdzZWNyZXQnOiBcIlh4NHJLdWNiNVpZVGFYbGNaWDlITGZaV1wiXG59O1xuXG5mdW5jdGlvbiBhY2Nlc3NUb2tlbkVuZHBvaW50KGNvZGUpIHtcblxuICByZXR1cm4gZ29vZ2xlQVBJSW5mby50b2tlbkVuZHBvaW50ICsgJ2NsaWVudF9pZD0nICsgZ29vZ2xlQVBJSW5mby5jbGllbnRJRCArICcmY29kZT0nICsgY29kZSArICcmZ3JhbnRfdHlwZT1hdXRob3JpemF0aW9uX2NvZGUnICsgJyZhY2Nlc3NfdHlwZT0nICsgJ29mZmxpbmUnICsgJyZjbGllbnRfc2VjcmV0PScgKyBnb29nbGVBUElJbmZvLnNlY3JldCArICcmcmVkaXJlY3RfdXJpPScgKyByZWRpcmVjdFVSSTtcbn1cblxuZnVuY3Rpb24gcmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQocmVmcmVzaCkge1xuXG4gIHJldHVybiBnb29nbGVBUElJbmZvLnRva2VuRW5kcG9pbnQgKyAnY2xpZW50X2lkPScgKyBnb29nbGVBUElJbmZvLmNsaWVudElEICsgJyZyZWZyZXNoX3Rva2VuPScgKyByZWZyZXNoICsgJyZncmFudF90eXBlPXJlZnJlc2hfdG9rZW4nICsgJyZjbGllbnRfc2VjcmV0PScgKyBnb29nbGVBUElJbmZvLnNlY3JldDtcbn1cblxuZnVuY3Rpb24gcmV2b2tlQWNjZXNzVG9rZW5FbmRwb2ludCh0b2tlbikge1xuXG4gIHJldHVybiBnb29nbGVBUElJbmZvLnJldm9rZUVuZHBvaW50ICsgJyZ0b2tlbj0nICsgdG9rZW47XG59XG5cbmZ1bmN0aW9uIG1hcHBpbmcocmVzb3VyY2UpIHtcbiAgaWYgKCFyZXNvdXJjZSkge1xuICAgIHJldHVybiBcImZpdG5lc3MubG9jYXRpb24ucmVhZCUyMGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZml0bmVzcy5hY3Rpdml0eS5yZWFkXCI7XG4gIH1cbiAgc3dpdGNoIChyZXNvdXJjZSkge1xuICAgIGNhc2UgXCJ1c2VyX2FjdGl2aXR5X2NvbnRleHRcIjpcbiAgICAgIHJldHVybiBcImZpdG5lc3MubG9jYXRpb24ucmVhZCUyMGh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZml0bmVzcy5hY3Rpdml0eS5yZWFkXCI7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJmaXRuZXNzLmxvY2F0aW9uLnJlYWQlMjBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2ZpdG5lc3MuYWN0aXZpdHkucmVhZFwiO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQoQVBJKSB7XG4gIHZhciB1cmwgPSBnb29nbGVBUElJbmZvLmF1dGhvcmlzYXRpb25FbmRwb2ludCArICdyZWRpcmVjdF91cmk9JyArIHJlZGlyZWN0VVJJICsgJyZyZXNwb25zZV90eXBlPScgKyBnb29nbGVBUElJbmZvLnR5cGUgKyAnJmNsaWVudF9pZD0nICsgZ29vZ2xlQVBJSW5mby5jbGllbnRJRCArICcmc2NvcGU9JyArICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoLycgKyBBUEkgKyAnJmFjY2Vzc190eXBlPScgKyBnb29nbGVBUElJbmZvLmFjY2Vzc1R5cGVcbiAgLy8gICAgKyAnJmluY2x1ZGVfZ3JhbnRlZF9zY29wZXM9dHJ1ZSdcbiAgLy8gICAgKyAnJnByb21wdD1ub25lJ1xuICArICcmc3RhdGU9JyArIGdvb2dsZUFQSUluZm8uc3RhdGU7XG4gIGNvbnNvbGUubG9nKCdbR29vZ2xlSW5mby5hY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludF0gJywgdXJsKTtcbiAgcmV0dXJuIHVybDtcbn1cblxuZnVuY3Rpb24gYXV0aG9yaXNhdGlvbkVuZHBvaW50KG5vbmNlKSB7XG5cbiAgdmFyIHVybCA9IGdvb2dsZUFQSUluZm8uYXV0aG9yaXNhdGlvbkVuZHBvaW50ICsgJ3JlZGlyZWN0X3VyaT0nICsgcmVkaXJlY3RVUkkgKyAnJnJlc3BvbnNlX3R5cGU9JyArIGdvb2dsZUFQSUluZm8udHlwZSArICcmY2xpZW50X2lkPScgKyBnb29nbGVBUElJbmZvLmNsaWVudElEICsgJyZzY29wZT0nICsgZ29vZ2xlQVBJSW5mby5zY29wZSArICcmYWNjZXNzX3R5cGU9JyArIGdvb2dsZUFQSUluZm8uYWNjZXNzVHlwZSArICcmc3RhdGU9JyArIG5vbmNlO1xuICBjb25zb2xlLmxvZygnW0dvb2dsZUluZm8uYXV0aG9yaXNhdGlvbkVuZHBvaW50XSAnLCB1cmwpO1xuICByZXR1cm4gdXJsO1xufVxuXG5mdW5jdGlvbiBhY2Nlc3NUb2tlbklucHV0KGluZm8pIHtcblxuICByZXR1cm4geyBpbmZvOiBpbmZvIH07XG59Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOHVMaTlrWlhZdGNISnZkRzl6ZEhWaWN5OXpjbU12YVdSd2NISnZlSGt2WjI5dloyeGxMMGR2YjJkc1pVbHVabTh1YW5NL01ESTVNaUpkTENKdVlXMWxjeUk2V3lKaFkyTmxjM05VYjJ0bGJrVnVaSEJ2YVc1MElpd2ljbVZtY21WemFFRmpZMlZ6YzFSdmEyVnVSVzVrY0c5cGJuUWlMQ0p5WlhadmEyVkJZMk5sYzNOVWIydGxia1Z1WkhCdmFXNTBJaXdpYldGd2NHbHVaeUlzSW1GalkyVnpjMVJ2YTJWdVFYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBJaXdpWVhWMGFHOXlhWE5oZEdsdmJrVnVaSEJ2YVc1MElpd2lZV05qWlhOelZHOXJaVzVKYm5CMWRDSXNJbkpsWkdseVpXTjBWVkpKSWl3aWJHOWpZWFJwYjI0aUxDSndjbTkwYjJOdmJDSXNJbWh2YzNSdVlXMWxJaXdpY0c5eWRDSXNJbWR2YjJkc1pVbHVabThpTENKbmIyOW5iR1ZCVUVsSmJtWnZJaXdpWTI5a1pTSXNJblJ2YTJWdVJXNWtjRzlwYm5RaUxDSmpiR2xsYm5SSlJDSXNJbk5sWTNKbGRDSXNJbkpsWm5KbGMyZ2lMQ0owYjJ0bGJpSXNJbkpsZG05clpVVnVaSEJ2YVc1MElpd2ljbVZ6YjNWeVkyVWlMQ0pCVUVraUxDSjFjbXdpTENKMGVYQmxJaXdpWVdOalpYTnpWSGx3WlNJc0luTjBZWFJsSWl3aVkyOXVjMjlzWlNJc0lteHZaeUlzSW01dmJtTmxJaXdpYzJOdmNHVWlMQ0pwYm1adklsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dFJRVzFFWjBKQkxHMUNMRWRCUVVGQkxHMUNPMUZCVjBGRExEQkNMRWRCUVVGQkxEQkNPMUZCVTBGRExIbENMRWRCUVVGQkxIbENPMUZCVFVGRExFOHNSMEZCUVVFc1R6dFJRV1ZCUXl4blF5eEhRVUZCUVN4blF6dFJRV05CUXl4eFFpeEhRVUZCUVN4eFFqdFJRV0ZCUXl4blFpeEhRVUZCUVN4blFqdEJRWFpJYUVJN096czdPenM3T3pzN096dEJRVmxCTEVsQlFVbERMR05CUVdORExGTkJRVk5ETEZGQlFWUXNSMEZCYjBJc1NVRkJjRUlzUjBGQk1rSkVMRk5CUVZORkxGRkJRWEJETEVsQlFXZEVSaXhUUVVGVFJ5eEpRVUZVTEV0QlFXdENMRVZCUVd4Q0xFZEJRWFZDTEUxQlFVMUlMRk5CUVZOSExFbEJRWFJETEVkQlFUWkRMRVZCUVRkR0xFTkJRV3hDT3p0QlFVVlBMRWxCUVVsRExHdERRVUZoTzBGQlEzUkNMR05CUVZrc01FVkJSRlU3UVVGRmRFSXNXVUZCVlN3MlFrRkdXVHRCUVVkMFFpeHRRa0ZCYVVJc05rTkJTRXM3UVVGSmRFSXNZVUZCVnl3MlEwRktWenRCUVV0MFFpd3lRa0ZCZVVJc05FTkJURWc3UVVGTmRFSXNZMEZCV1N3MlJFRk9WVHRCUVU5MFFpeGxRVUZoTERCRVFWQlRPMEZCVVhSQ0xHZENRVUZqTEZGQlVsRTdRVUZUZEVJc1ZVRkJVU3huUWtGVVl6dEJRVlYwUWl4WFFVRlRMREJDUVZaaE8wRkJWM1JDTEZkQlFWTXNUMEZZWVR0QlFWbDBRaXhaUVVGVk8wRkJXbGtzUTBGQmFrSTdPMEZCWjBKQkxFbEJRVWxETEhkRFFVRm5RanRCUVVONlFpeGpRVUZaTERCRlFVUmhPMEZCUlhwQ0xGbEJRVlVzTmtKQlJtVTdRVUZIZWtJc2JVSkJRV2xDTERaRFFVaFJPMEZCU1hwQ0xHOUNRVUZyUWl3NFEwRktUenRCUVV0NlFpeGhRVUZYTERaRFFVeGpPMEZCVFhwQ0xESkNRVUY1UWl3MFEwRk9RVHRCUVU5NlFpeGpRVUZaTERaRVFWQmhPMEZCVVhwQ0xHVkJRV0VzTUVSQlVsazdRVUZUZWtJc1owSkJRV01zVTBGVVZ6dEJRVlY2UWl4VlFVRlJMRTFCVm1sQ08wRkJWM3BDTzBGQlEwRXNWMEZCVXl4MVJFRmFaMEk3UVVGaGVrSXNWMEZCVXl4UFFXSm5RanRCUVdONlFpeFpRVUZWTEZsQlpHVTdRVUZsZWtJc1owSkJRV01zYjBKQlpsYzdRVUZuUW5wQ0xGbEJRVlU3UVVGb1FtVXNRMEZCY0VJN08wRkJjVUpCTEZOQlFWTmlMRzFDUVVGVUxFTkJRVFpDWXl4SlFVRTNRaXhGUVVGdFF6czdRVUZGZUVNc1UwRkJUMFFzWTBGQlkwVXNZVUZCWkN4SFFVTklMRmxCUkVjc1IwRkRXVVlzWTBGQlkwY3NVVUZFTVVJc1IwRkZTQ3hSUVVaSExFZEJSVkZHTEVsQlJsSXNSMEZIU0N4blEwRklSeXhIUVVsSUxHVkJTa2NzUjBGSlpTeFRRVXBtTEVkQlMwZ3NhVUpCVEVjc1IwRkxhVUpFTEdOQlFXTkpMRTFCVEM5Q0xFZEJUVWdzWjBKQlRrY3NSMEZOWjBKV0xGZEJUblpDTzBGQlQwUTdPMEZCUlUwc1UwRkJVMDRzTUVKQlFWUXNRMEZCYjBOcFFpeFBRVUZ3UXl4RlFVRTJRenM3UVVGRmJFUXNVMEZCVDB3c1kwRkJZMFVzWVVGQlpDeEhRVU5JTEZsQlJFY3NSMEZEV1VZc1kwRkJZMGNzVVVGRU1VSXNSMEZGU0N4cFFrRkdSeXhIUVVWcFFrVXNUMEZHYWtJc1IwRkhTQ3d5UWtGSVJ5eEhRVWxJTEdsQ1FVcEhMRWRCU1dsQ1RDeGpRVUZqU1N4TlFVcDBRenRCUVV0RU96dEJRVVZOTEZOQlFWTm1MSGxDUVVGVUxFTkJRVzFEYVVJc1MwRkJia01zUlVGQk1FTTdPMEZCUlM5RExGTkJRVTlPTEdOQlFXTlBMR05CUVdRc1IwRkRTQ3hUUVVSSExFZEJRMU5FTEV0QlJHaENPMEZCUlVRN08wRkJSVTBzVTBGQlUyaENMRTlCUVZRc1EwRkJhVUpyUWl4UlFVRnFRaXhGUVVFeVFqdEJRVU5vUXl4TlFVRkpMRU5CUVVOQkxGRkJRVXdzUlVGQlpUdEJRVU5pTEZkQlFVOHNLMFZCUVZBN1FVRkRSRHRCUVVORUxGVkJRVkZCTEZGQlFWSTdRVUZEUlN4VFFVRkxMSFZDUVVGTU8wRkJRMFVzWVVGQlR5d3JSVUZCVUR0QlFVTkJPenRCUVVWR08wRkJRMFVzWVVGQlR5d3JSVUZCVUR0QlFVTkJPMEZCVUVvN1FVRlRSRHM3UVVGRlRTeFRRVUZUYWtJc1owTkJRVlFzUTBGQk1FTnJRaXhIUVVFeFF5eEZRVUVyUXp0QlFVTndSQ3hOUVVGSlF5eE5RVUZOVml4alFVRmpVaXh4UWtGQlpDeEhRVU5PTEdWQlJFMHNSMEZEV1VVc1YwRkVXaXhIUVVWT0xHbENRVVpOTEVkQlJXTk5MR05CUVdOWExFbEJSalZDTEVkQlIwNHNZVUZJVFN4SFFVZFZXQ3hqUVVGalJ5eFJRVWg0UWl4SFFVbE9MRk5CU2swc1IwRkpUU3hyUTBGS1RpeEhRVWt5UTAwc1IwRktNME1zUjBGTFRpeGxRVXhOTEVkQlMxbFVMR05CUVdOWk8wRkJRM1JETzBGQlEwRTdRVUZRV1N4SlFWRk9MRk5CVWswc1IwRlJUVm9zWTBGQlkyRXNTMEZTT1VJN1FVRlRRVU1zVlVGQlVVTXNSMEZCVWl4RFFVRlpMR2RFUVVGYUxFVkJRVGhFVEN4SFFVRTVSRHRCUVVOQkxGTkJRVTlCTEVkQlFWQTdRVUZEUkRzN1FVRkZUU3hUUVVGVGJFSXNjVUpCUVZRc1EwRkJLMEozUWl4TFFVRXZRaXhGUVVGelF6czdRVUZGTTBNc1RVRkJTVTRzVFVGQlRWWXNZMEZCWTFJc2NVSkJRV1FzUjBGRFRpeGxRVVJOTEVkQlExbEZMRmRCUkZvc1IwRkZUaXhwUWtGR1RTeEhRVVZqVFN4alFVRmpWeXhKUVVZMVFpeEhRVWRPTEdGQlNFMHNSMEZIVlZnc1kwRkJZMGNzVVVGSWVFSXNSMEZKVGl4VFFVcE5MRWRCU1UxSUxHTkJRV05wUWl4TFFVcHdRaXhIUVV0T0xHVkJURTBzUjBGTFdXcENMR05CUVdOWkxGVkJUREZDTEVkQlRVNHNVMEZPVFN4SFFVMU5TU3hMUVU1b1FqdEJRVTlCUml4VlFVRlJReXhIUVVGU0xFTkJRVmtzY1VOQlFWb3NSVUZCYlVSTUxFZEJRVzVFTzBGQlEwRXNVMEZCVDBFc1IwRkJVRHRCUVVORU96dEJRVVZOTEZOQlFWTnFRaXhuUWtGQlZDeERRVUV3UW5sQ0xFbEJRVEZDTEVWQlFXZERPenRCUVVWeVF5eFRRVUZQTEVWQlFVTkJMRlZCUVVRc1JVRkJVRHRCUVVORUlpd2labWxzWlNJNklqSXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktseHlYRzVjZEZOdklIUm9ZWFFnWVc0Z1lYQndiR2xqWVhScGIyNGdZMkZ1SUhWelpTQkhiMjluYkdVbmN5QlBRWFYwYUNBeUxqQWdZWFYwYUdWdWRHbGpZWFJwYjI0Z2MzbHpkR1Z0SUdadmNpQjFjMlZ5SUd4dloybHVMRnh5WEc1Y2RHWnBjbk4wSUdseklISmxjWFZwY21Wa0lIUnZJSE5sZENCMWNDQmhJSEJ5YjJwbFkzUWdhVzRnZEdobElFZHZiMmRzWlNCRVpYWmxiRzl3WlhKeklFTnZibk52YkdVZ2RHOGdiMkowWVdsdUlFOUJkWFJvSURJdU1DQmpjbVZrWlc1MGFXRnNjeUJoYm1RZ2MyVjBJR0VnY21Wa2FYSmxZM1FnVlZKSkxseHlYRzVjZEVFZ2RHVnpkQ0JoWTJOdmRXNTBJSGRoY3lCamNtVmhkR1ZrSUhSdklITmxkQ0IwYUdVZ2NISnZhbVZqZENCcGJpQjBhR1VnUjI5dloyeGxJRVJsZG1Wc2IzQmxjbk1nUTI5dWMyOXNaU0IwYnlCdlluUmhhVzRnVDBGMWRHZ2dNaTR3SUdOeVpXUmxiblJwWVd4ekxGeDBkMmwwYUNCMGFHVWdabTlzYkc5M2FXNW5JR055WldSbGJuUnBZV3h6T2x4eVhHNGdJQ0FnSUNCY2RIVnpaWEp1WVcxbE9pQnZjR1Z1YVdSMFpYTjBNVEJBWjIxaGFXd3VZMjl0WEhKY2JpQWdJQ0FnSUNBZ2NHRnpjM2R2Y21RNklIUmxjM1JQY0dWdVNVUXhNRnh5WEc1Y2RGUnZJR0ZrWkNCdGIzSmxJRlZTU1NkekxDQm1iMnhzYjNjZ2RHaGxJSE4wWlhCek9seHlYRzVjZERIQ3VpQmphRzl2YzJVZ2RHaGxJSEJ5YjJwbFkzUWdLQ0JqWVc0Z1ltVWdkR2hsSUUxNUlFOXdaVzVKUkNCUWNtOXFaV04wS1Z4MElHWnliMjBnSUdoMGRIQnpPaTh2WTI5dWMyOXNaUzVrWlhabGJHOXdaWEp6TG1kdmIyZHNaUzVqYjIwdmNISnZhbVZqZEhObGJHVmpkRzl5TDJGd2FYTXZZM0psWkdWdWRHbGhiSE1nZFhOcGJtY2dkR2hsSUdOeVpXUmxiblJwWVd4eklIQnliM1pwWkdWa0lHRmliM1psTGx4eVhHNWNkRExDdWlCUGNHVnVJRlJvWlNCRGJHbGxiblFnVjJWaUlERWdiR2x6ZEdWa0lHbHVJRTlCZFhSb0lESXVNQ0JEYkdsbGJuUWdTVVFuYzF4eVhHNWNkRFBDdWlCQlpHUWdkR2hsSUZWU1NTQWdhVzRnZEdobElHRjFkR2h2Y21sNlpXUWdjbVZrYVhKbFkzUWdWVkpKSUhObFkzUnBiMjR1WEhKY2JpQWdOTUs2SUdOb1lXNW5aU0IwYUdVZ1VrVkVTVkpGUTFRZ2NHRnlZVzFsZEdWeUlHSmxiR3h2ZHlCM2FYUm9JSFJvWlNCd2NtVjBaVzVrWldRZ1ZWSkpYSEpjYmlBcUwxeHlYRzVzWlhRZ2NtVmthWEpsWTNSVlVra2dQU0JzYjJOaGRHbHZiaTV3Y205MGIyTnZiQ0FySUNjdkx5Y2dLeUJzYjJOaGRHbHZiaTVvYjNOMGJtRnRaU0FySUNoc2IyTmhkR2x2Ymk1d2IzSjBJQ0U5UFNBbkp5QS9JQ2M2SnlBcklHeHZZMkYwYVc5dUxuQnZjblFnT2lBbkp5azdYSEpjYmx4eVhHNWxlSEJ2Y25RZ2JHVjBJR2R2YjJkc1pVbHVabThnUFNCN1hISmNiaUFnWENKamJHbGxiblJKUkZ3aU9pQmNJamd3T0RNeU9UVTJOakF4TWkxMGNYSTRjVzlvTVRFeE9UUXlaMlF5YTJjd01EZDBNSE00WmpJM04zSnZhUzVoY0hCekxtZHZiMmRzWlhWelpYSmpiMjUwWlc1MExtTnZiVndpTEZ4eVhHNGdJRndpYVhOemRXVnlYQ0k2SUZ3aWFIUjBjSE02THk5aFkyTnZkVzUwY3k1bmIyOW5iR1V1WTI5dFhDSXNYSEpjYmlBZ1hDSjBiMnRsYmtWdVpIQnZhVzUwWENJNklGd2lhSFIwY0hNNkx5OTNkM2N1WjI5dloyeGxZWEJwY3k1amIyMHZiMkYxZEdneUwzWTBMM1J2YTJWdVAxd2lMRnh5WEc0Z0lGd2lhbmRyYzFWeWFWd2lPaUJjSW1oMGRIQnpPaTh2ZDNkM0xtZHZiMmRzWldGd2FYTXVZMjl0TDI5aGRYUm9NaTkyTXk5alpYSjBjejljSWl4Y2NseHVJQ0JjSW1GMWRHaHZjbWx6WVhScGIyNUZibVJ3YjJsdWRGd2lPaUJjSW1oMGRIQnpPaTh2WVdOamIzVnVkSE11WjI5dloyeGxMbU52YlM5dkwyOWhkWFJvTWk5aGRYUm9QMXdpTEZ4eVhHNGdJRndpZFhObGNtbHVabTljSWpvZ1hDSm9kSFJ3Y3pvdkwzZDNkeTVuYjI5bmJHVmhjR2x6TG1OdmJTOXZZWFYwYURJdmRqTXZkWE5sY21sdVptOC9ZV05qWlhOelgzUnZhMlZ1UFZ3aUxGeHlYRzRnSUZ3aWRHOXJaVzVKYm1adlhDSTZJRndpYUhSMGNITTZMeTkzZDNjdVoyOXZaMnhsWVhCcGN5NWpiMjB2YjJGMWRHZ3lMM1l6TDNSdmEyVnVhVzVtYno5cFpGOTBiMnRsYmoxY0lpeGNjbHh1SUNCY0ltRmpZMlZ6YzFSNWNHVmNJam9nWENKdmJteHBibVZjSWl4Y2NseHVJQ0JjSW5SNWNHVmNJam9nWENKMGIydGxiaUJwWkY5MGIydGxibHdpTEZ4eVhHNGdJRndpYzJOdmNHVmNJam9nWENKdmNHVnVhV1FsTWpCbGJXRnBiQ1V5TUhCeWIyWnBiR1ZjSWl4Y2NseHVJQ0JjSW5OMFlYUmxYQ0k2SUZ3aWMzUmhkR1ZjSWl4Y2NseHVJQ0JjSW1SdmJXRnBibHdpT2lCY0ltZHZiMmRzWlM1amIyMWNJbHh5WEc1OU8xeHlYRzVjY2x4dVhISmNibVY0Y0c5eWRDQnNaWFFnWjI5dloyeGxRVkJKU1c1bWJ5QTlJSHRjY2x4dUlDQmNJbU5zYVdWdWRFbEVYQ0k2SUZ3aU9EQTRNekk1TlRZMk1ERXlMWFJ4Y2poeGIyZ3hNVEU1TkRKblpESnJaekF3TjNRd2N6aG1NamMzY205cExtRndjSE11WjI5dloyeGxkWE5sY21OdmJuUmxiblF1WTI5dFhDSXNYSEpjYmlBZ1hDSnBjM04xWlhKY0lqb2dYQ0pvZEhSd2N6b3ZMMkZqWTI5MWJuUnpMbWR2YjJkc1pTNWpiMjFjSWl4Y2NseHVJQ0JjSW5SdmEyVnVSVzVrY0c5cGJuUmNJam9nWENKb2RIUndjem92TDNkM2R5NW5iMjluYkdWaGNHbHpMbU52YlM5dllYVjBhREl2ZGpRdmRHOXJaVzQvWENJc1hISmNiaUFnWENKeVpYWnZhMlZGYm1Sd2IybHVkRndpT2lCY0ltaDBkSEJ6T2k4dllXTmpiM1Z1ZEhNdVoyOXZaMnhsTG1OdmJTOXZMMjloZFhSb01pOXlaWFp2YTJVL1hDSXNYSEpjYmlBZ1hDSnFkMnR6VlhKcFhDSTZJRndpYUhSMGNITTZMeTkzZDNjdVoyOXZaMnhsWVhCcGN5NWpiMjB2YjJGMWRHZ3lMM1l6TDJObGNuUnpQMXdpTEZ4eVhHNGdJRndpWVhWMGFHOXlhWE5oZEdsdmJrVnVaSEJ2YVc1MFhDSTZJRndpYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0TDI4dmIyRjFkR2d5TDJGMWRHZy9YQ0lzWEhKY2JpQWdYQ0oxYzJWeWFXNW1iMXdpT2lCY0ltaDBkSEJ6T2k4dmQzZDNMbWR2YjJkc1pXRndhWE11WTI5dEwyOWhkWFJvTWk5Mk15OTFjMlZ5YVc1bWJ6OWhZMk5sYzNOZmRHOXJaVzQ5WENJc1hISmNiaUFnWENKMGIydGxia2x1Wm05Y0lqb2dYQ0pvZEhSd2N6b3ZMM2QzZHk1bmIyOW5iR1ZoY0dsekxtTnZiUzl2WVhWMGFESXZkak12ZEc5clpXNXBibVp2UDJsa1gzUnZhMlZ1UFZ3aUxGeHlYRzRnSUZ3aVlXTmpaWE56Vkhsd1pWd2lPaUJjSW05bVpteHBibVZjSWl4Y2NseHVJQ0JjSW5SNWNHVmNJam9nWENKamIyUmxYQ0lzWEhKY2JpQWdMeThnVkU5RVR5QXRJSE5qYjNCbElHbHpJSEpsWVdRZ1puSnZiU0J0WlhOellXZGxJQ2h6ZFhCd2IzSjBJRzExYkhScGNHeGxJRWR2YjJkc1pTQkJVRWx6S1Z4eVhHNGdJRndpYzJOdmNHVmNJam9nWENKb2RIUndjem92TDNkM2R5NW5iMjluYkdWaGNHbHpMbU52YlM5aGRYUm9MMlpwZEc1bGMzTXViRzlqWVhScGIyNHVjbVZoWkZ3aUxGeHlYRzRnSUZ3aWMzUmhkR1ZjSWpvZ1hDSnpkR0YwWlZ3aUxGeHlYRzRnSUZ3aVpHOXRZV2x1WENJNklGd2laMjl2WjJ4bExtTnZiVndpTEZ4eVhHNGdJQ2RuY21GdWRGOTBlWEJsSnpvZ1hDSmhkWFJvYjNKcGVtRjBhVzl1WDJOdlpHVmNJaXhjY2x4dUlDQW5jMlZqY21WMEp6b2dYQ0pZZURSeVMzVmpZalZhV1ZSaFdHeGpXbGc1U0V4bVdsZGNJbHh5WEc1OU8xeHlYRzVjY2x4dVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWVdOalpYTnpWRzlyWlc1RmJtUndiMmx1ZENoamIyUmxLU0I3WEhKY2JseHlYRzRnSUhKbGRIVnliaUJuYjI5bmJHVkJVRWxKYm1adkxuUnZhMlZ1Ulc1a2NHOXBiblJjY2x4dUlDQWdJQ3NnSjJOc2FXVnVkRjlwWkQwbklDc2daMjl2WjJ4bFFWQkpTVzVtYnk1amJHbGxiblJKUkZ4eVhHNGdJQ0FnS3lBbkptTnZaR1U5SnlBcklHTnZaR1ZjY2x4dUlDQWdJQ3NnSnlabmNtRnVkRjkwZVhCbFBXRjFkR2h2Y21sNllYUnBiMjVmWTI5a1pTZGNjbHh1SUNBZ0lDc2dKeVpoWTJObGMzTmZkSGx3WlQwbklDc2dKMjltWm14cGJtVW5YSEpjYmlBZ0lDQXJJQ2NtWTJ4cFpXNTBYM05sWTNKbGREMG5JQ3NnWjI5dloyeGxRVkJKU1c1bWJ5NXpaV055WlhSY2NseHVJQ0FnSUNzZ0p5WnlaV1JwY21WamRGOTFjbWs5SnlBcklISmxaR2x5WldOMFZWSkpPMXh5WEc1OVhISmNibHh5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnY21WbWNtVnphRUZqWTJWemMxUnZhMlZ1Ulc1a2NHOXBiblFvY21WbWNtVnphQ2tnZTF4eVhHNWNjbHh1SUNCeVpYUjFjbTRnWjI5dloyeGxRVkJKU1c1bWJ5NTBiMnRsYmtWdVpIQnZhVzUwWEhKY2JpQWdJQ0FySUNkamJHbGxiblJmYVdROUp5QXJJR2R2YjJkc1pVRlFTVWx1Wm04dVkyeHBaVzUwU1VSY2NseHVJQ0FnSUNzZ0p5WnlaV1p5WlhOb1gzUnZhMlZ1UFNjZ0t5QnlaV1p5WlhOb1hISmNiaUFnSUNBcklDY21aM0poYm5SZmRIbHdaVDF5WldaeVpYTm9YM1J2YTJWdUoxeHlYRzRnSUNBZ0t5QW5KbU5zYVdWdWRGOXpaV055WlhROUp5QXJJR2R2YjJkc1pVRlFTVWx1Wm04dWMyVmpjbVYwWEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCeVpYWnZhMlZCWTJObGMzTlViMnRsYmtWdVpIQnZhVzUwS0hSdmEyVnVLU0I3WEhKY2JseHlYRzRnSUhKbGRIVnliaUJuYjI5bmJHVkJVRWxKYm1adkxuSmxkbTlyWlVWdVpIQnZhVzUwWEhKY2JpQWdJQ0FySUNjbWRHOXJaVzQ5SnlBcklIUnZhMlZ1WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCdFlYQndhVzVuS0hKbGMyOTFjbU5sS1NCN1hISmNiaUFnYVdZZ0tDRnlaWE52ZFhKalpTa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGd2labWwwYm1WemN5NXNiMk5oZEdsdmJpNXlaV0ZrSlRJd2FIUjBjSE02THk5M2QzY3VaMjl2WjJ4bFlYQnBjeTVqYjIwdllYVjBhQzltYVhSdVpYTnpMbUZqZEdsMmFYUjVMbkpsWVdSY0lqdGNjbHh1SUNCOVhISmNiaUFnYzNkcGRHTm9JQ2h5WlhOdmRYSmpaU2tnZTF4eVhHNGdJQ0FnWTJGelpTQmNJblZ6WlhKZllXTjBhWFpwZEhsZlkyOXVkR1Y0ZEZ3aU9seHlYRzRnSUNBZ0lDQnlaWFIxY200Z1hDSm1hWFJ1WlhOekxteHZZMkYwYVc5dUxuSmxZV1FsTWpCb2RIUndjem92TDNkM2R5NW5iMjluYkdWaGNHbHpMbU52YlM5aGRYUm9MMlpwZEc1bGMzTXVZV04wYVhacGRIa3VjbVZoWkZ3aU8xeHlYRzRnSUNBZ0lDQmljbVZoYXp0Y2NseHVYSEpjYmlBZ0lDQmtaV1poZFd4ME9seHlYRzRnSUNBZ0lDQnlaWFIxY200Z1hDSm1hWFJ1WlhOekxteHZZMkYwYVc5dUxuSmxZV1FsTWpCb2RIUndjem92TDNkM2R5NW5iMjluYkdWaGNHbHpMbU52YlM5aGRYUm9MMlpwZEc1bGMzTXVZV04wYVhacGRIa3VjbVZoWkZ3aU8xeHlYRzRnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0I5WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCaFkyTmxjM05VYjJ0bGJrRjFkR2h2Y21sellYUnBiMjVGYm1Sd2IybHVkQ2hCVUVrcElIdGNjbHh1SUNCc1pYUWdkWEpzSUQwZ1oyOXZaMnhsUVZCSlNXNW1ieTVoZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5SY2NseHVJQ0FnSUNzZ0ozSmxaR2x5WldOMFgzVnlhVDBuSUNzZ2NtVmthWEpsWTNSVlVrbGNjbHh1SUNBZ0lDc2dKeVp5WlhOd2IyNXpaVjkwZVhCbFBTY2dLeUJuYjI5bmJHVkJVRWxKYm1adkxuUjVjR1ZjY2x4dUlDQWdJQ3NnSnlaamJHbGxiblJmYVdROUp5QXJJR2R2YjJkc1pVRlFTVWx1Wm04dVkyeHBaVzUwU1VSY2NseHVJQ0FnSUNzZ0p5WnpZMjl3WlQwbklDc2dKMmgwZEhCek9pOHZkM2QzTG1kdmIyZHNaV0Z3YVhNdVkyOXRMMkYxZEdndkp5QXJJRUZRU1Z4eVhHNGdJQ0FnS3lBbkptRmpZMlZ6YzE5MGVYQmxQU2NnS3lCbmIyOW5iR1ZCVUVsSmJtWnZMbUZqWTJWemMxUjVjR1ZjY2x4dUx5OGdJQ0FnS3lBbkptbHVZMngxWkdWZlozSmhiblJsWkY5elkyOXdaWE05ZEhKMVpTZGNjbHh1THk4Z0lDQWdLeUFuSm5CeWIyMXdkRDF1YjI1bEoxeHlYRzRnSUNBZ0t5QW5Kbk4wWVhSbFBTY2dLeUJuYjI5bmJHVkJVRWxKYm1adkxuTjBZWFJsTzF4eVhHNGdJR052Ym5OdmJHVXViRzluS0NkYlIyOXZaMnhsU1c1bWJ5NWhZMk5sYzNOVWIydGxia0YxZEdodmNtbHpZWFJwYjI1RmJtUndiMmx1ZEYwZ0p5d2dkWEpzS1R0Y2NseHVJQ0J5WlhSMWNtNGdkWEpzTzF4eVhHNTlYSEpjYmx4eVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1lYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBLRzV2Ym1ObEtTQjdYSEpjYmx4eVhHNGdJR3hsZENCMWNtd2dQU0JuYjI5bmJHVkJVRWxKYm1adkxtRjFkR2h2Y21sellYUnBiMjVGYm1Sd2IybHVkRnh5WEc0Z0lDQWdLeUFuY21Wa2FYSmxZM1JmZFhKcFBTY2dLeUJ5WldScGNtVmpkRlZTU1Z4eVhHNGdJQ0FnS3lBbkpuSmxjM0J2Ym5ObFgzUjVjR1U5SnlBcklHZHZiMmRzWlVGUVNVbHVabTh1ZEhsd1pWeHlYRzRnSUNBZ0t5QW5KbU5zYVdWdWRGOXBaRDBuSUNzZ1oyOXZaMnhsUVZCSlNXNW1ieTVqYkdsbGJuUkpSRnh5WEc0Z0lDQWdLeUFuSm5OamIzQmxQU2NnS3lCbmIyOW5iR1ZCVUVsSmJtWnZMbk5qYjNCbFhISmNiaUFnSUNBcklDY21ZV05qWlhOelgzUjVjR1U5SnlBcklHZHZiMmRzWlVGUVNVbHVabTh1WVdOalpYTnpWSGx3WlZ4eVhHNGdJQ0FnS3lBbkpuTjBZWFJsUFNjZ0t5QnViMjVqWlR0Y2NseHVJQ0JqYjI1emIyeGxMbXh2WnlnblcwZHZiMmRzWlVsdVptOHVZWFYwYUc5eWFYTmhkR2x2YmtWdVpIQnZhVzUwWFNBbkxDQjFjbXdwTzF4eVhHNGdJSEpsZEhWeWJpQjFjbXc3WEhKY2JuMWNjbHh1WEhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCaFkyTmxjM05VYjJ0bGJrbHVjSFYwS0dsdVptOHBJSHRjY2x4dVhISmNiaUFnY21WMGRYSnVJSHRwYm1admZUdGNjbHh1ZlZ4eVhHNWNibHh1WEc0dkx5QlhSVUpRUVVOTElFWlBUMVJGVWlBdkwxeHVMeThnTGk4dUxpOWtaWFl0Y0hKdmRHOXpkSFZpY3k5emNtTXZhV1J3Y0hKdmVIa3ZaMjl2WjJ4bEwwZHZiMmRzWlVsdVptOHVhbk1pWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMlxuIik7CgovKioqLyB9KSwKLyogMyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CmV2YWwoIlxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jb252ZXJ0VXNlclByb2ZpbGUgPSBjb252ZXJ0VXNlclByb2ZpbGU7XG5cbi8vIGZ1bmN0aW9uIHRvIGNvbnZlcnQgZ29vZ2xlIHVzZXIgcHJvZmlsZSBpbmZvIGludG8gc3RhbmRhcmQgcmVUSElOSyB1c2VyIHByb2ZpbGUgb2JqZWN0XG5cbmZ1bmN0aW9uIGNvbnZlcnRVc2VyUHJvZmlsZShnb29nbGVVc2VyUHJvZmlsZSkge1xuXG4gIGdvb2dsZVVzZXJQcm9maWxlLnVzZXJVUkwgPSAndXNlcjovL2dvb2dsZS5jb20vJyArIGdvb2dsZVVzZXJQcm9maWxlLmVtYWlsO1xuXG4gIGlmICghZ29vZ2xlVXNlclByb2ZpbGUuaGFzT3duUHJvcGVydHkoJ3ByZWZlcnJlZF91c2VybmFtZScpKSBnb29nbGVVc2VyUHJvZmlsZS5wcmVmZXJyZWRfdXNlcm5hbWUgPSBnb29nbGVVc2VyUHJvZmlsZS5lbWFpbC5zcGxpdCgnQCcpWzBdO1xuXG4gIHJldHVybiBnb29nbGVVc2VyUHJvZmlsZTtcbn0vLyMgc291cmNlVVJMPVttb2R1bGVdXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk4dUxpOWtaWFl0Y0hKdmRHOXpkSFZpY3k5emNtTXZhV1J3Y0hKdmVIa3ZaMjl2WjJ4bEwwZHZiMmRzWlVOdmJuWmxjblJsY2k1cWN6OWtPVGMySWwwc0ltNWhiV1Z6SWpwYkltTnZiblpsY25SVmMyVnlVSEp2Wm1sc1pTSXNJbWR2YjJkc1pWVnpaWEpRY205bWFXeGxJaXdpZFhObGNsVlNUQ0lzSW1WdFlXbHNJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0p3Y21WbVpYSnlaV1JmZFhObGNtNWhiV1VpTENKemNHeHBkQ0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3VVVGSFowSkJMR3RDTEVkQlFVRkJMR3RDT3p0QlFVWm9RanM3UVVGRlR5eFRRVUZUUVN4clFrRkJWQ3hEUVVFMFFrTXNhVUpCUVRWQ0xFVkJRU3RET3p0QlFVVndSRUVzYjBKQlFXdENReXhQUVVGc1FpeEhRVUUwUWl4MVFrRkJkVUpFTEd0Q1FVRnJRa1VzUzBGQmNrVTdPMEZCUlVFc1RVRkJTU3hEUVVGRFJpeHJRa0ZCYTBKSExHTkJRV3hDTEVOQlFXbERMRzlDUVVGcVF5eERRVUZNTEVWQlEwVklMR3RDUVVGclFra3NhMEpCUVd4Q0xFZEJRWFZEU2l4clFrRkJhMEpGTEV0QlFXeENMRU5CUVhkQ1J5eExRVUY0UWl4RFFVRTRRaXhIUVVFNVFpeEZRVUZ0UXl4RFFVRnVReXhEUVVGMlF6czdRVUZGUml4VFFVRlBUQ3hwUWtGQlVEdEJRVU5FSWl3aVptbHNaU0k2SWpNdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpjY2x4dUx5OGdablZ1WTNScGIyNGdkRzhnWTI5dWRtVnlkQ0JuYjI5bmJHVWdkWE5sY2lCd2NtOW1hV3hsSUdsdVptOGdhVzUwYnlCemRHRnVaR0Z5WkNCeVpWUklTVTVMSUhWelpYSWdjSEp2Wm1sc1pTQnZZbXBsWTNSY2NseHVYSEpjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJqYjI1MlpYSjBWWE5sY2xCeWIyWnBiR1VvWjI5dloyeGxWWE5sY2xCeWIyWnBiR1VwSUh0Y2NseHVYSEpjYmlBZ1oyOXZaMnhsVlhObGNsQnliMlpwYkdVdWRYTmxjbFZTVENBOUlDZDFjMlZ5T2k4dloyOXZaMnhsTG1OdmJTOG5JQ3NnWjI5dloyeGxWWE5sY2xCeWIyWnBiR1V1WlcxaGFXdzdYSEpjYmx4eVhHNGdJR2xtSUNnaFoyOXZaMnhsVlhObGNsQnliMlpwYkdVdWFHRnpUM2R1VUhKdmNHVnlkSGtvSjNCeVpXWmxjbkpsWkY5MWMyVnlibUZ0WlNjcEtTQmNjbHh1SUNBZ0lHZHZiMmRzWlZWelpYSlFjbTltYVd4bExuQnlaV1psY25KbFpGOTFjMlZ5Ym1GdFpTQTlJR2R2YjJkc1pWVnpaWEpRY205bWFXeGxMbVZ0WVdsc0xuTndiR2wwS0NkQUp5bGJNRjA3WEhKY2JseHlYRzRnSUhKbGRIVnliaUJuYjI5bmJHVlZjMlZ5VUhKdlptbHNaVHRjY2x4dWZWeHlYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z0xpOHVMaTlrWlhZdGNISnZkRzl6ZEhWaWN5OXpjbU12YVdSd2NISnZlSGt2WjI5dloyeGxMMGR2YjJkc1pVTnZiblpsY25SbGNpNXFjeUpkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vM1xuIik7CgovKioqLyB9KSwKLyogNCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CmV2YWwoIlxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgSWRwUHJveHkgPSB2b2lkIDA7XG52YXIgaWRwSW5mbyA9IHZvaWQgMDtcbnZhciBjb252ZXJ0VXNlclByb2ZpbGUgPSB2b2lkIDA7XG52YXIgdXNlckluZm9FbmRwb2ludCA9IHZvaWQgMDtcbnZhciBhY2Nlc3NUb2tlbklucHV0ID0gdm9pZCAwO1xuXG4vKipcclxuKiBBYnN0cmFjdCBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViIHRvIGJlIGV4dGVuZGVkIGJ5IHJlYWwgSWRwIFByb3hpZXNcclxuKi9cblxudmFyIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLyoqXHJcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxyXG4gICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgaWRwUHJveHkgcmVjZWl2ZWRcclxuICAqXHJcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAgKi9cbiAgZnVuY3Rpb24gQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViKTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7XG4gICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1cztcbiAgICBfdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgSWRwUHJveHkgPSBjb25maWcuaWRwUHJveHk7XG4gICAgY29udmVydFVzZXJQcm9maWxlID0gY29uZmlnLmNvbnZlcnRVc2VyUHJvZmlsZTtcbiAgICBhY2Nlc3NUb2tlbklucHV0ID0gY29uZmlnLmFjY2Vzc1Rva2VuSW5wdXQ7XG5cbiAgICBjb25zb2xlLmxvZygnW0Fic3RyYWN0SWRwUHJveHldIGNvbnN0cnVjdG9yJyk7XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgaWYgKG1zZy50byA9PT0gY29uZmlnLmlkcFVybCkge1xuXG4gICAgICAgIF90aGlzLnJlcXVlc3RUb0lkcChtc2cpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XG4gIH1cblxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cclxuICAqXHJcbiAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXHJcbiAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLCBbe1xuICAgIGtleTogJ3JlcXVlc3RUb0lkcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RUb0lkcChtc2cpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xuICAgICAgLy9jb25zb2xlLmluZm8oJ3JlcXVlc3RUb0lkcDonLCBtc2cuYm9keS5tZXRob2QpO1xuICAgICAgY29uc29sZS5pbmZvKCdbQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yl0gcmVjZWl2aW5nIHJlcXVlc3Q6ICcsIG1zZyk7XG5cbiAgICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XG4gICAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgICBJZHBQcm94eS5nZW5lcmF0ZUFzc2VydGlvbihfdGhpcy5jb25maWcsIHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcblxuICAgICAgICAgICAgdmFsdWUudXNlclByb2ZpbGUgPSBjb252ZXJ0VXNlclByb2ZpbGUodmFsdWUudXNlclByb2ZpbGUpO1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IsIDQwMSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcbiAgICAgICAgICAvLyAgICAgICBjb25zb2xlLmluZm8oJ3ZhbGlkYXRlQXNzZXJ0aW9uJyk7XG4gICAgICAgICAgSWRwUHJveHkudmFsaWRhdGVBc3NlcnRpb24oX3RoaXMuY29uZmlnLCBwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZWZyZXNoQXNzZXJ0aW9uJzpcbiAgICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdyZWZyZXNoQXNzZXJ0aW9uJyk7XG4gICAgICAgICAgSWRwUHJveHkucmVmcmVzaEFzc2VydGlvbihwYXJhbXMuaWRlbnRpdHkpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvciwgdmFsdWUsIDQwMSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2dldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50JzpcbiAgICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICAgIElkcFByb3h5LmdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50KF90aGlzLmNvbmZpZywgcGFyYW1zLnJlc291cmNlcykudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yLCA0MDEpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdnZXRBY2Nlc3NUb2tlbic6XG4gICAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygnZ2V0QWNjZXNzVG9rZW4nKTtcbiAgICAgICAgICBJZHBQcm94eS5nZXRBY2Nlc3NUb2tlbihfdGhpcy5jb25maWcsIHBhcmFtcy5yZXNvdXJjZXMsIHBhcmFtcy5sb2dpbikudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnT0lEQy5nZXRBY2Nlc3NUb2tlbiByZXN1bHQ6ICcsIHZhbHVlKTtcbiAgICAgICAgICAgIHZhbHVlLmlucHV0ID0gYWNjZXNzVG9rZW5JbnB1dCh2YWx1ZS5pbnB1dCk7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvciwgNDAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVmcmVzaEFjY2Vzc1Rva2VuJzpcbiAgICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdnZXRBY2Nlc3NUb2tlbicpO1xuICAgICAgICAgIElkcFByb3h5LnJlZnJlc2hBY2Nlc3NUb2tlbihfdGhpcy5jb25maWcsIHBhcmFtcy50b2tlbikudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnT0lEQy5yZWZyZXNoQWNjZXNzVG9rZW4gcmVzdWx0OiAnLCB2YWx1ZSk7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgIHZhbHVlLmlucHV0ID0gYWNjZXNzVG9rZW5JbnB1dCh2YWx1ZS5pbnB1dCk7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvciwgNDAxKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcclxuICAgICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAgICpcclxuICAgICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXHJcbiAgICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxyXG4gICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncmVwbHlNZXNzYWdlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcbiAgICAgIHZhciBjb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAyMDA7XG5cbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHZhciBtZXNzYWdlID0ge1xuICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50byxcbiAgICAgICAgYm9keTogeyBjb2RlOiBjb2RlIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChjb2RlIDwgMzAwKSBtZXNzYWdlLmJvZHkudmFsdWUgPSB2YWx1ZTtlbHNlIG1lc3NhZ2UuYm9keS5kZXNjcmlwdGlvbiA9IHZhbHVlO1xuXG4gICAgICBjb25zb2xlLmxvZygnW0Fic3RyYWN0SWRwUHJveHlQcm90b1N0dWIucmVwbHlNZXNzYWdlXSAnLCBtZXNzYWdlKTtcblxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc2VuZFN0YXR1cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1Yi5zZW5kU3RhdHVzXSAnLCB2YWx1ZSk7XG5cbiAgICAgIF90aGlzLl9zdGF0ZSA9IHZhbHVlO1xuXG4gICAgICB2YXIgbXNnID0ge1xuICAgICAgICB0eXBlOiAndXBkYXRlJyxcbiAgICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcbiAgICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG4gICAgICAgIGJvZHk6IHtcbiAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKHJlYXNvbikge1xuICAgICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWI7XG59KCk7XG5cbi8vIGV4cG9ydCBkZWZhdWx0IElkcFByb3h5UHJvdG9TdHViO1xuXG4vKipcclxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXHJcbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXHJcbiAqL1xuXG5cbmV4cG9ydHMuZGVmYXVsdCA9IEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWI7Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOHVMaTlrWlhZdGNISnZkRzl6ZEhWaWN5OXpjbU12YVdSd2NISnZlSGt2UVdKemRISmhZM1JKWkhCUWNtOTRlVk4wZFdJdWFuTS9NelEyWXlKZExDSnVZVzFsY3lJNld5SkpaSEJRY205NGVTSXNJbWxrY0VsdVptOGlMQ0pqYjI1MlpYSjBWWE5sY2xCeWIyWnBiR1VpTENKMWMyVnlTVzVtYjBWdVpIQnZhVzUwSWl3aVlXTmpaWE56Vkc5clpXNUpibkIxZENJc0lrRmljM1J5WVdOMFNXUndVSEp2ZUhsUWNtOTBiMU4wZFdJaUxDSnlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1JaXdpWW5Weklpd2lZMjl1Wm1sbklpd2lYM1JvYVhNaUxDSnRaWE56WVdkbFFuVnpJaXdpYVdSd1VISnZlSGtpTENKamIyNXpiMnhsSWl3aWJHOW5JaXdpWVdSa1RHbHpkR1Z1WlhJaUxDSnRjMmNpTENKMGJ5SXNJbWxrY0ZWeWJDSXNJbkpsY1hWbGMzUlViMGxrY0NJc0lsOXpaVzVrVTNSaGRIVnpJaXdpY0dGeVlXMXpJaXdpWW05a2VTSXNJbWx1Wm04aUxDSnRaWFJvYjJRaUxDSm5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJpSXNJbU52Ym5SbGJuUnpJaXdpYjNKcFoybHVJaXdpZFhObGNtNWhiV1ZJYVc1MElpd2lkR2hsYmlJc0luWmhiSFZsSWl3aWRYTmxjbEJ5YjJacGJHVWlMQ0p5WlhCc2VVMWxjM05oWjJVaUxDSmxjbkp2Y2lJc0luWmhiR2xrWVhSbFFYTnpaWEowYVc5dUlpd2lZWE56WlhKMGFXOXVJaXdpY21WbWNtVnphRUZ6YzJWeWRHbHZiaUlzSW1sa1pXNTBhWFI1SWl3aVoyVjBRV05qWlhOelZHOXJaVzVCZFhSb2IzSnBjMkYwYVc5dVJXNWtjRzlwYm5RaUxDSnlaWE52ZFhKalpYTWlMQ0puWlhSQlkyTmxjM05VYjJ0bGJpSXNJbXh2WjJsdUlpd2lhVzV3ZFhRaUxDSnlaV1p5WlhOb1FXTmpaWE56Vkc5clpXNGlMQ0owYjJ0bGJpSXNJbU52WkdVaUxDSnRaWE56WVdkbElpd2lhV1FpTENKMGVYQmxJaXdpWm5KdmJTSXNJbVJsYzJOeWFYQjBhVzl1SWl3aWNHOXpkRTFsYzNOaFoyVWlMQ0p5WldGemIyNGlMQ0pmYzNSaGRHVWlMQ0prWlhOaklsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenM3TzBGQlFVRXNTVUZCU1VFc2FVSkJRVW83UVVGRFFTeEpRVUZKUXl4blFrRkJTanRCUVVOQkxFbEJRVWxETERKQ1FVRktPMEZCUTBFc1NVRkJTVU1zZVVKQlFVbzdRVUZEUVN4SlFVRkpReXg1UWtGQlNqczdRVUZGUVRzN096dEpRVWROUXl4NVFqczdRVUZGU2pzN096czdPenM3UVVGUlFTeHhRMEZCV1VNc2JVSkJRVm9zUlVGQmFVTkRMRWRCUVdwRExFVkJRWE5EUXl4TlFVRjBReXhGUVVFNFF6dEJRVUZCT3p0QlFVTTFReXhSUVVGSlF5eFJRVUZSTEVsQlFWbzdRVUZEUVVFc1ZVRkJUVWdzYlVKQlFVNHNSMEZCTkVKQkxHMUNRVUUxUWp0QlFVTkJSeXhWUVVGTlF5eFZRVUZPTEVkQlFXMUNTQ3hIUVVGdVFqdEJRVU5CUlN4VlFVRk5SQ3hOUVVGT0xFZEJRV1ZCTEUxQlFXWTdRVUZEUVZJc1pVRkJWMUVzVDBGQlQwY3NVVUZCYkVJN1FVRkRRVlFzZVVKQlFYRkNUU3hQUVVGUFRpeHJRa0ZCTlVJN1FVRkRRVVVzZFVKQlFXMUNTU3hQUVVGUFNpeG5Ra0ZCTVVJN08wRkJSMEZSTEZsQlFWRkRMRWRCUVZJc1EwRkJXU3huUTBGQldqczdRVUZGUVVvc1ZVRkJUVU1zVlVGQlRpeERRVUZwUWtrc1YwRkJha0lzUTBGQk5rSXNSMEZCTjBJc1JVRkJhME1zVlVGQlZVTXNSMEZCVml4RlFVRmxPMEZCUXk5RExGVkJRVWxCTEVsQlFVbERMRVZCUVVvc1MwRkJWMUlzVDBGQlQxTXNUVUZCZEVJc1JVRkJPRUk3TzBGQlJUVkNVaXhqUVVGTlV5eFpRVUZPTEVOQlFXMUNTQ3hIUVVGdVFqdEJRVU5FTzBGQlEwWXNTMEZNUkR0QlFVMUJUaXhWUVVGTlZTeFhRVUZPTEVOQlFXdENMRk5CUVd4Q08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096dHBRMEZMWVVvc1J5eEZRVUZMTzBGQlEyaENMRlZCUVVsT0xGRkJRVkVzU1VGQldqdEJRVU5CTEZWQlFVbFhMRk5CUVZOTUxFbEJRVWxOTEVsQlFVb3NRMEZCVTBRc1RVRkJkRUk3UVVGRFFUdEJRVU5CVWl4alFVRlJWU3hKUVVGU0xFTkJRV0VzYVVSQlFXSXNSVUZCWjBWUUxFZEJRV2hGT3p0QlFVVkJMR05CUVZGQkxFbEJRVWxOTEVsQlFVb3NRMEZCVTBVc1RVRkJha0k3UVVGRFJTeGhRVUZMTEcxQ1FVRk1PMEZCUTBWMlFpeHRRa0ZCVTNkQ0xHbENRVUZVTEVOQlFUSkNaaXhOUVVGTlJDeE5RVUZxUXl4RlFVRjVRMWtzVDBGQlQwc3NVVUZCYUVRc1JVRkJNRVJNTEU5QlFVOU5MRTFCUVdwRkxFVkJRWGxGVGl4UFFVRlBUeXhaUVVGb1JpeEZRVUU0UmtNc1NVRkJPVVlzUTBGRFJTeFZRVUZWUXl4TFFVRldMRVZCUVdsQ096dEJRVVZtUVN4clFrRkJUVU1zVjBGQlRpeEhRVUZ2UWpWQ0xHMUNRVUZ0UWpKQ0xFMUJRVTFETEZkQlFYcENMRU5CUVhCQ08wRkJRMEZ5UWl4clFrRkJUWE5DTEZsQlFVNHNRMEZCYlVKb1FpeEhRVUZ1UWl4RlFVRjNRbU1zUzBGQmVFSTdRVUZEUkN4WFFVeElMRVZCVDBVc1ZVRkJWVWNzUzBGQlZpeEZRVUZwUWp0QlFVRkZka0lzYTBKQlFVMXpRaXhaUVVGT0xFTkJRVzFDYUVJc1IwRkJia0lzUlVGQmQwSnBRaXhMUVVGNFFpeEZRVUVyUWl4SFFVRXZRanRCUVVGelF5eFhRVkF6UkR0QlFWTkJPMEZCUTBZc1lVRkJTeXh0UWtGQlREdEJRVU5GTzBGQlEwRm9ReXh0UWtGQlUybERMR2xDUVVGVUxFTkJRVEpDZUVJc1RVRkJUVVFzVFVGQmFrTXNSVUZCZVVOWkxFOUJRVTlqTEZOQlFXaEVMRVZCUVRKRVpDeFBRVUZQVFN4TlFVRnNSU3hGUVVFd1JVVXNTVUZCTVVVc1EwRkRSU3hWUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUVVWd1FpeHJRa0ZCVFhOQ0xGbEJRVTRzUTBGQmJVSm9RaXhIUVVGdVFpeEZRVUYzUW1Nc1MwRkJlRUk3UVVGQmFVTXNWMEZFZEVRc1JVRkhSU3hWUVVGVlJ5eExRVUZXTEVWQlFXbENPMEZCUVVWMlFpeHJRa0ZCVFhOQ0xGbEJRVTRzUTBGQmJVSm9RaXhIUVVGdVFpeEZRVUYzUW1sQ0xFdEJRWGhDTzBGQlFXbERMRmRCU0hSRU8wRkJTMEU3UVVGRFJpeGhRVUZMTEd0Q1FVRk1PMEZCUTBVN1FVRkRRV2hETEcxQ1FVRlRiVU1zWjBKQlFWUXNRMEZCTUVKbUxFOUJRVTluUWl4UlFVRnFReXhGUVVFeVExSXNTVUZCTTBNc1EwRkRSU3hWUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUVVWd1FpeHJRa0ZCVFhOQ0xGbEJRVTRzUTBGQmJVSm9RaXhIUVVGdVFpeEZRVUYzUW1Nc1MwRkJlRUk3UVVGQmFVTXNWMEZFZEVRc1JVRkhSU3hWUVVGVlJ5eExRVUZXTEVWQlFXbENPMEZCUVVWMlFpeHJRa0ZCVFhOQ0xGbEJRVTRzUTBGQmJVSm9RaXhIUVVGdVFpeEZRVUYzUW1sQ0xFdEJRWGhDTEVWQlFTdENTQ3hMUVVFdlFpeEZRVUZ6UXl4SFFVRjBRenRCUVVFMlF5eFhRVWhzUlR0QlFVdEJPMEZCUTBZc1lVRkJTeXh4UTBGQlREdEJRVU5GTzBGQlEwRTNRaXh0UWtGQlUzRkRMRzFEUVVGVUxFTkJRVFpETlVJc1RVRkJUVVFzVFVGQmJrUXNSVUZCTWtSWkxFOUJRVTlyUWl4VFFVRnNSU3hGUVVFMlJWWXNTVUZCTjBVc1EwRkRSU3hWUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJad1FpeHJRa0ZCVFhOQ0xGbEJRVTRzUTBGQmJVSm9RaXhIUVVGdVFpeEZRVUYzUW1Nc1MwRkJlRUk3UVVGRFJDeFhRVWhJTEVWQlMwVXNWVUZCVlVjc1MwRkJWaXhGUVVGcFFqdEJRVUZGZGtJc2EwSkJRVTF6UWl4WlFVRk9MRU5CUVcxQ2FFSXNSMEZCYmtJc1JVRkJkMEpwUWl4TFFVRjRRaXhGUVVFclFpeEhRVUV2UWp0QlFVRnpReXhYUVV3elJEdEJRVTlCTzBGQlEwWXNZVUZCU3l4blFrRkJURHRCUVVORk8wRkJRMEZvUXl4dFFrRkJVM1ZETEdOQlFWUXNRMEZCZDBJNVFpeE5RVUZOUkN4TlFVRTVRaXhGUVVGelExa3NUMEZCVDJ0Q0xGTkJRVGRETEVWQlFYZEViRUlzVDBGQlQyOUNMRXRCUVM5RUxFVkJRWE5GV2l4SlFVRjBSU3hEUVVORkxGVkJRVlZETEV0QlFWWXNSVUZCYVVJN1FVRkRabXBDTEc5Q1FVRlJWU3hKUVVGU0xFTkJRV0VzT0VKQlFXSXNSVUZCTmtOUExFdEJRVGRETzBGQlEwRkJMR3RDUVVGTldTeExRVUZPTEVkQlFXTnlReXhwUWtGQmFVSjVRaXhOUVVGTldTeExRVUYyUWl4RFFVRmtPMEZCUTBGb1F5eHJRa0ZCVFhOQ0xGbEJRVTRzUTBGQmJVSm9RaXhIUVVGdVFpeEZRVUYzUW1Nc1MwRkJlRUk3UVVGRFJDeFhRVXhJTEVWQlQwVXNWVUZCVlVjc1MwRkJWaXhGUVVGcFFqdEJRVUZGZGtJc2EwSkJRVTF6UWl4WlFVRk9MRU5CUVcxQ2FFSXNSMEZCYmtJc1JVRkJkMEpwUWl4TFFVRjRRaXhGUVVFclFpeEhRVUV2UWp0QlFVRnpReXhYUVZBelJEdEJRVk5CTzBGQlEwWXNZVUZCU3l4dlFrRkJURHRCUVVORk8wRkJRMEZvUXl4dFFrRkJVekJETEd0Q1FVRlVMRU5CUVRSQ2FrTXNUVUZCVFVRc1RVRkJiRU1zUlVGQk1FTlpMRTlCUVU5MVFpeExRVUZxUkN4RlFVRjNSR1lzU1VGQmVFUXNRMEZEUlN4VlFVRlZReXhMUVVGV0xFVkJRV2xDTzBGQlEyWnFRaXh2UWtGQlVWVXNTVUZCVWl4RFFVRmhMR3REUVVGaUxFVkJRV2xFVHl4TFFVRnFSRHRCUVVOYU8wRkJRMWx3UWl4clFrRkJUWE5DTEZsQlFVNHNRMEZCYlVKb1FpeEhRVUZ1UWl4RlFVRjNRbU1zUzBGQmVFSTdRVUZEUkN4WFFVeElMRVZCVDBVc1ZVRkJWVWNzUzBGQlZpeEZRVUZwUWp0QlFVRkZka0lzYTBKQlFVMXpRaXhaUVVGT0xFTkJRVzFDYUVJc1IwRkJia0lzUlVGQmQwSnBRaXhMUVVGNFFpeEZRVUVyUWl4SFFVRXZRanRCUVVGelF5eFhRVkF6UkR0QlFWTkJPMEZCUTBZN1FVRkRSVHRCUVM5RVNqdEJRV2xGUkRzN1FVRkZSRHM3T3pzN096czdPMmxEUVUxaGFrSXNSeXhGUVVGTFl5eExMRVZCUVcxQ08wRkJRVUVzVlVGQldtVXNTVUZCV1N4MVJVRkJUQ3hIUVVGTE96dEJRVU51UXl4VlFVRkpia01zVVVGQlVTeEpRVUZhT3p0QlFVVkJMRlZCUVVsdlF5eFZRVUZWTzBGQlExcERMRmxCUVVrdlFpeEpRVUZKSzBJc1JVRkVTU3hGUVVOQlF5eE5RVUZOTEZWQlJFNHNSVUZEYTBJdlFpeEpRVUZKUkN4SlFVRkphVU1zU1VGRU1VSXNSVUZEWjBOQkxFMUJRVTFxUXl4SlFVRkpReXhGUVVReFF6dEJRVVZhU3l4alFVRk5MRVZCUVVWMVFpeE5RVUZOUVN4SlFVRlNPMEZCUmswc1QwRkJaRHM3UVVGTFFTeFZRVUZKUVN4UFFVRlBMRWRCUVZnc1JVRkJhVUpETEZGQlFWRjRRaXhKUVVGU0xFTkJRV0ZSTEV0QlFXSXNSMEZCY1VKQkxFdEJRWEpDTEVOQlFXcENMRXRCUTB0blFpeFJRVUZSZUVJc1NVRkJVaXhEUVVGaE5FSXNWMEZCWWl4SFFVRXlRbkJDTEV0QlFUTkNPenRCUVVWTWFrSXNZMEZCVVVNc1IwRkJVaXhEUVVGWkxESkRRVUZhTEVWQlFYbEVaME1zVDBGQmVrUTdPMEZCUlVGd1F5eFpRVUZOUXl4VlFVRk9MRU5CUVdsQ2QwTXNWMEZCYWtJc1EwRkJOa0pNTEU5QlFUZENPMEZCUTBRN096dG5RMEZGVjJoQ0xFc3NSVUZCVDNOQ0xFMHNSVUZCVVR0QlFVTjZRaXhWUVVGSk1VTXNVVUZCVVN4SlFVRmFPenRCUVVWQlJ5eGpRVUZSUXl4SFFVRlNMRU5CUVZrc2VVTkJRVm9zUlVGQmRVUm5RaXhMUVVGMlJEczdRVUZGUVhCQ0xGbEJRVTB5UXl4TlFVRk9MRWRCUVdWMlFpeExRVUZtT3p0QlFVVkJMRlZCUVVsa0xFMUJRVTA3UVVGRFVtZERMR05CUVUwc1VVRkVSVHRCUVVWU1F5eGpRVUZOZGtNc1RVRkJUVWdzYlVKQlJrbzdRVUZIVWxVc1dVRkJTVkFzVFVGQlRVZ3NiVUpCUVU0c1IwRkJORUlzVTBGSWVFSTdRVUZKVW1Vc1kwRkJUVHRCUVVOS1VTeHBRa0ZCVDBFN1FVRkVTRHRCUVVwRkxFOUJRVlk3TzBGQlUwRXNWVUZCU1hOQ0xFMUJRVW9zUlVGQldUdEJRVU5XY0VNc1dVRkJTVTBzU1VGQlNpeERRVUZUWjBNc1NVRkJWQ3hIUVVGblFrWXNUVUZCYUVJN1FVRkRSRHM3UVVGRlJERkRMRmxCUVUxRExGVkJRVTRzUTBGQmFVSjNReXhYUVVGcVFpeERRVUUyUW01RExFZEJRVGRDTzBGQlEwUTdPenM3T3p0QlFVZElPenRCUVVWQk96czdPenM3T3pzN2EwSkJUMlZXTEhsQ0lpd2labWxzWlNJNklqUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKc1pYUWdTV1J3VUhKdmVIazdYSEpjYm14bGRDQnBaSEJKYm1adk8xeHlYRzVzWlhRZ1kyOXVkbVZ5ZEZWelpYSlFjbTltYVd4bE8xeHlYRzVzWlhRZ2RYTmxja2x1Wm05RmJtUndiMmx1ZER0Y2NseHViR1YwSUdGalkyVnpjMVJ2YTJWdVNXNXdkWFE3WEhKY2JseHlYRzR2S2lwY2NseHVLaUJCWW5OMGNtRmpkQ0JKWkdWdWRHbDBlU0JRY205MmFXUmxjaUJRY205NGVTQlFjbTkwYjJOdmJDQlRkSFZpSUhSdklHSmxJR1Y0ZEdWdVpHVmtJR0o1SUhKbFlXd2dTV1J3SUZCeWIzaHBaWE5jY2x4dUtpOWNjbHh1WTJ4aGMzTWdRV0p6ZEhKaFkzUkpaSEJRY205NGVWQnliM1J2VTNSMVlpQjdYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ29nUTI5dWMzUnlkV04wYjNJZ2IyWWdkR2hsSUVsa2NGQnliM2g1SUZOMGRXSmNjbHh1SUNBcUlGUm9aU0JqYjI1emRISjFZM1J2Y2lCaFpHUWdZU0JzYVhOMFpXNWxjaUJwYmlCMGFHVWdiV1Z6YzJGblpVSjFjeUJ5WldObGFYWmxaQ0JoYm1RZ2MzUmhjblFnWVNCM1pXSWdkMjl5YTJWeUlIZHBkR2dnZEdobElHbGtjRkJ5YjNoNUlISmxZMlZwZG1Wa1hISmNiaUFnS2x4eVhHNGdJQ29nUUhCaGNtRnRJQ0I3VlZKTUxsSjFiblJwYldWVlVreDlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dnY25WdWRHbHRaVkJ5YjNSdlUzVmlWVkpNWEhKY2JpQWdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxMazFsYzNOaFoyVjlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZblZ6VUc5emRFMWxjM05oWjJVZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2NseHVJQ0FxSUVCd1lYSmhiU0FnZTFCeWIzUnZVM1IxWWtSbGMyTnlhWEIwYjNJdVEyOXVabWxuZFhKaGRHbHZia1JoZEdGTWFYTjBmU0JqYjI1bWFXZDFjbUYwYVc5dUlDQWdJQ0FnWTI5dVptbG5kWEpoZEdsdmJseHlYRzRnSUNvdlhISmNiaUFnWTI5dWMzUnlkV04wYjNJb2NuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDd2dZblZ6TENCamIyNW1hV2NwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JpQWdJQ0JmZEdocGN5NXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1JRDBnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVER0Y2NseHVJQ0FnSUY5MGFHbHpMbTFsYzNOaFoyVkNkWE1nUFNCaWRYTTdYSEpjYmlBZ0lDQmZkR2hwY3k1amIyNW1hV2NnUFNCamIyNW1hV2M3WEhKY2JpQWdJQ0JKWkhCUWNtOTRlU0E5SUdOdmJtWnBaeTVwWkhCUWNtOTRlVHRjY2x4dUlDQWdJR052Ym5abGNuUlZjMlZ5VUhKdlptbHNaU0E5SUdOdmJtWnBaeTVqYjI1MlpYSjBWWE5sY2xCeWIyWnBiR1U3WEhKY2JpQWdJQ0JoWTJObGMzTlViMnRsYmtsdWNIVjBJRDBnWTI5dVptbG5MbUZqWTJWemMxUnZhMlZ1U1c1d2RYUTdYSEpjYmx4eVhHNWNjbHh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiUVdKemRISmhZM1JKWkhCUWNtOTRlVjBnWTI5dWMzUnlkV04wYjNJbktUdGNjbHh1WEhKY2JpQWdJQ0JmZEdocGN5NXRaWE56WVdkbFFuVnpMbUZrWkV4cGMzUmxibVZ5S0NjcUp5d2dablZ1WTNScGIyNGdLRzF6WnlrZ2UxeHlYRzRnSUNBZ0lDQnBaaUFvYlhObkxuUnZJRDA5UFNCamIyNW1hV2N1YVdSd1ZYSnNLU0I3WEhKY2JseHlYRzRnSUNBZ0lDQWdJRjkwYUdsekxuSmxjWFZsYzNSVWIwbGtjQ2h0YzJjcE8xeHlYRzRnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlLVHRjY2x4dUlDQWdJRjkwYUdsekxsOXpaVzVrVTNSaGRIVnpLQ2RqY21WaGRHVmtKeWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUVaMWJtTjBhVzl1SUhSb1lYUWdjMlZsSUhSb1pTQnBiblJsYm1SbFpDQnRaWFJvYjJRZ2FXNGdkR2hsSUcxbGMzTmhaMlVnY21WalpXbDJaV1FnWVc1a0lHTmhiR3dnZEdobElISmxjM0JsWTNScGRtVWdablZ1WTNScGIyNWNjbHh1SUNBcVhISmNiaUFnS2lCQWNHRnlZVzBnZTIxbGMzTmhaMlY5SUNCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdsdUlIUm9aU0J0WlhOellXZGxRblZ6WEhKY2JpQWdLaTljY2x4dUlDQnlaWEYxWlhOMFZHOUpaSEFvYlhObktTQjdYSEpjYmlBZ0lDQnNaWFFnWDNSb2FYTWdQU0IwYUdsek8xeHlYRzRnSUNBZ2JHVjBJSEJoY21GdGN5QTlJRzF6Wnk1aWIyUjVMbkJoY21GdGN6dGNjbHh1SUNBZ0lDOHZZMjl1YzI5c1pTNXBibVp2S0NkeVpYRjFaWE4wVkc5SlpIQTZKeXdnYlhObkxtSnZaSGt1YldWMGFHOWtLVHRjY2x4dUlDQWdJR052Ym5OdmJHVXVhVzVtYnlnblcwRmljM1J5WVdOMFNXUndVSEp2ZUhsUWNtOTBiMU4wZFdKZElISmxZMlZwZG1sdVp5QnlaWEYxWlhOME9pQW5MQ0J0YzJjcE8xeHlYRzVjY2x4dUlDQWdJSE4zYVhSamFDQW9iWE5uTG1KdlpIa3ViV1YwYUc5a0tTQjdYSEpjYmlBZ0lDQWdJR05oYzJVZ0oyZGxibVZ5WVhSbFFYTnpaWEowYVc5dUp6cGNjbHh1SUNBZ0lDQWdJQ0JKWkhCUWNtOTRlUzVuWlc1bGNtRjBaVUZ6YzJWeWRHbHZiaWhmZEdocGN5NWpiMjVtYVdjc0lIQmhjbUZ0Y3k1amIyNTBaVzUwY3l3Z2NHRnlZVzF6TG05eWFXZHBiaXdnY0dGeVlXMXpMblZ6WlhKdVlXMWxTR2x1ZENrdWRHaGxiaWhjY2x4dUlDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVdWRYTmxjbEJ5YjJacGJHVWdQU0JqYjI1MlpYSjBWWE5sY2xCeWIyWnBiR1VvZG1Gc2RXVXVkWE5sY2xCeWIyWnBiR1VwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXlaWEJzZVUxbGMzTmhaMlVvYlhObkxDQjJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUNobGNuSnZjaWtnZXlCZmRHaHBjeTV5WlhCc2VVMWxjM05oWjJVb2JYTm5MQ0JsY25KdmNpd2dOREF4S1RzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUdOaGMyVWdKM1poYkdsa1lYUmxRWE56WlhKMGFXOXVKenBjY2x4dUlDQWdJQ0FnSUNBdkx5QWdJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KM1poYkdsa1lYUmxRWE56WlhKMGFXOXVKeWs3WEhKY2JpQWdJQ0FnSUNBZ1NXUndVSEp2ZUhrdWRtRnNhV1JoZEdWQmMzTmxjblJwYjI0b1gzUm9hWE11WTI5dVptbG5MQ0J3WVhKaGJYTXVZWE56WlhKMGFXOXVMQ0J3WVhKaGJYTXViM0pwWjJsdUtTNTBhR1Z1S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdJRjkwYUdsekxuSmxjR3g1VFdWemMyRm5aU2h0YzJjc0lIWmhiSFZsS1RzZ2ZTeGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQW9aWEp5YjNJcElIc2dYM1JvYVhNdWNtVndiSGxOWlhOellXZGxLRzF6Wnl3Z1pYSnliM0lwT3lCOVhISmNiaUFnSUNBZ0lDQWdLVHRjY2x4dUlDQWdJQ0FnSUNCaWNtVmhhenRjY2x4dUlDQWdJQ0FnWTJGelpTQW5jbVZtY21WemFFRnpjMlZ5ZEdsdmJpYzZYSEpjYmlBZ0lDQWdJQ0FnTHk4Z0lDQWdJR052Ym5OdmJHVXVhVzVtYnlnbmNtVm1jbVZ6YUVGemMyVnlkR2x2YmljcE8xeHlYRzRnSUNBZ0lDQWdJRWxrY0ZCeWIzaDVMbkpsWm5KbGMyaEJjM05sY25ScGIyNG9jR0Z5WVcxekxtbGtaVzUwYVhSNUtTNTBhR1Z1S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdJRjkwYUdsekxuSmxjR3g1VFdWemMyRm5aU2h0YzJjc0lIWmhiSFZsS1RzZ2ZTeGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQm1kVzVqZEdsdmJpQW9aWEp5YjNJcElIc2dYM1JvYVhNdWNtVndiSGxOWlhOellXZGxLRzF6Wnl3Z1pYSnliM0lzSUhaaGJIVmxMQ0EwTURFcE95QjlYSEpjYmlBZ0lDQWdJQ0FnS1R0Y2NseHVJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ1kyRnpaU0FuWjJWMFFXTmpaWE56Vkc5clpXNUJkWFJvYjNKcGMyRjBhVzl1Ulc1a2NHOXBiblFuT2x4eVhHNGdJQ0FnSUNBZ0lDOHZJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMmRsZEVGalkyVnpjMVJ2YTJWdUp5azdYSEpjYmlBZ0lDQWdJQ0FnU1dSd1VISnZlSGt1WjJWMFFXTmpaWE56Vkc5clpXNUJkWFJvYjNKcGMyRjBhVzl1Ulc1a2NHOXBiblFvWDNSb2FYTXVZMjl1Wm1sbkxDQndZWEpoYlhNdWNtVnpiM1Z5WTJWektTNTBhR1Z1S0Z4eVhHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLSFpoYkhWbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBhR2x6TG5KbGNHeDVUV1Z6YzJGblpTaHRjMmNzSUhaaGJIVmxLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNGdLR1Z5Y205eUtTQjdJRjkwYUdsekxuSmxjR3g1VFdWemMyRm5aU2h0YzJjc0lHVnljbTl5TENBME1ERXBPeUI5WEhKY2JpQWdJQ0FnSUNBZ0tUdGNjbHh1SUNBZ0lDQWdJQ0JpY21WaGF6dGNjbHh1SUNBZ0lDQWdZMkZ6WlNBbloyVjBRV05qWlhOelZHOXJaVzRuT2x4eVhHNGdJQ0FnSUNBZ0lDOHZJQ0FnSUNCamIyNXpiMnhsTG1sdVptOG9KMmRsZEVGalkyVnpjMVJ2YTJWdUp5azdYSEpjYmlBZ0lDQWdJQ0FnU1dSd1VISnZlSGt1WjJWMFFXTmpaWE56Vkc5clpXNG9YM1JvYVhNdVkyOXVabWxuTENCd1lYSmhiWE11Y21WemIzVnlZMlZ6TENCd1lYSmhiWE11Ykc5bmFXNHBMblJvWlc0b1hISmNiaUFnSUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNXBibVp2S0NkUFNVUkRMbWRsZEVGalkyVnpjMVJ2YTJWdUlISmxjM1ZzZERvZ0p5d2dkbUZzZFdVcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaUzVwYm5CMWRDQTlJR0ZqWTJWemMxUnZhMlZ1U1c1d2RYUW9kbUZzZFdVdWFXNXdkWFFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXlaWEJzZVUxbGMzTmhaMlVvYlhObkxDQjJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUNobGNuSnZjaWtnZXlCZmRHaHBjeTV5WlhCc2VVMWxjM05oWjJVb2JYTm5MQ0JsY25KdmNpd2dOREF4S1RzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUdOaGMyVWdKM0psWm5KbGMyaEJZMk5sYzNOVWIydGxiaWM2WEhKY2JpQWdJQ0FnSUNBZ0x5OGdJQ0FnSUdOdmJuTnZiR1V1YVc1bWJ5Z25aMlYwUVdOalpYTnpWRzlyWlc0bktUdGNjbHh1SUNBZ0lDQWdJQ0JKWkhCUWNtOTRlUzV5WldaeVpYTm9RV05qWlhOelZHOXJaVzRvWDNSb2FYTXVZMjl1Wm1sbkxDQndZWEpoYlhNdWRHOXJaVzRwTG5Sb1pXNG9YSEpjYmlBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlBb2RtRnNkV1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZFBTVVJETG5KbFpuSmxjMmhCWTJObGMzTlViMnRsYmlCeVpYTjFiSFE2SUNjc0lIWmhiSFZsS1R0Y2NseHVMeThnSUNBZ0lDQWdJQ0FnSUNCMllXeDFaUzVwYm5CMWRDQTlJR0ZqWTJWemMxUnZhMlZ1U1c1d2RYUW9kbUZzZFdVdWFXNXdkWFFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmZEdocGN5NXlaWEJzZVUxbGMzTmhaMlVvYlhObkxDQjJZV3gxWlNrN1hISmNiaUFnSUNBZ0lDQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0FnSUdaMWJtTjBhVzl1SUNobGNuSnZjaWtnZXlCZmRHaHBjeTV5WlhCc2VVMWxjM05oWjJVb2JYTm5MQ0JsY25KdmNpd2dOREF4S1RzZ2ZWeHlYRzRnSUNBZ0lDQWdJQ2s3WEhKY2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUdSbFptRjFiSFE2WEhKY2JpQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0I5WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FxSUZSb2FYTWdablZ1WTNScGIyNGdjbVZqWldsMlpYTWdZU0J0WlhOellXZGxJR0Z1WkNCaElIWmhiSFZsTGlCSmRDQnlaWEJzYVdWeklIUm9aU0IyWVd4MVpTQjBieUIwYUdVZ2MyVnVaR1Z5SUc5bUlIUm9aU0J0WlhOellXZGxJSEpsWTJWcGRtVmtYSEpjYmlBZ0tseHlYRzRnSUNvZ1FIQmhjbUZ0SUNCN2JXVnpjMkZuWlgwZ0lDQnRaWE56WVdkbElISmxZMlZwZG1Wa1hISmNiaUFnS2lCQWNHRnlZVzBnSUh0MllXeDFaWDBnSUNBZ0lIWmhiSFZsSUhSdklHbHVZMngxWkdVZ2FXNGdkR2hsSUc1bGR5QnRaWE56WVdkbElIUnZJSE5sYm1SY2NseHVJQ0FxTDF4eVhHNGdJSEpsY0d4NVRXVnpjMkZuWlNodGMyY3NJSFpoYkhWbExDQmpiMlJsSUQwZ01qQXdLU0I3WEhKY2JpQWdJQ0JzWlhRZ1gzUm9hWE1nUFNCMGFHbHpPMXh5WEc1Y2NseHVJQ0FnSUd4bGRDQnRaWE56WVdkbElEMGdlMXh5WEc0Z0lDQWdJQ0JwWkRvZ2JYTm5MbWxrTENCMGVYQmxPaUFuY21WemNHOXVjMlVuTENCMGJ6b2diWE5uTG1aeWIyMHNJR1p5YjIwNklHMXpaeTUwYnl4Y2NseHVJQ0FnSUNBZ1ltOWtlVG9nZXlCamIyUmxPaUJqYjJSbElIMWNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tHTnZaR1VnUENBek1EQWdLU0J0WlhOellXZGxMbUp2WkhrdWRtRnNkV1VnUFNCMllXeDFaVHRjY2x4dUlDQWdJR1ZzYzJVZ2JXVnpjMkZuWlM1aWIyUjVMbVJsYzJOeWFYQjBhVzl1SUQwZ2RtRnNkV1U3WEhKY2JseHlYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRCWW5OMGNtRmpkRWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlMbkpsY0d4NVRXVnpjMkZuWlYwZ0p5d2diV1Z6YzJGblpTazdYSEpjYmx4eVhHNGdJQ0FnWDNSb2FYTXViV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodFpYTnpZV2RsS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUY5elpXNWtVM1JoZEhWektIWmhiSFZsTENCeVpXRnpiMjRwSUh0Y2NseHVJQ0FnSUd4bGRDQmZkR2hwY3lBOUlIUm9hWE03WEhKY2JseHlYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRCWW5OMGNtRmpkRWxrY0ZCeWIzaDVVSEp2ZEc5VGRIVmlMbk5sYm1SVGRHRjBkWE5kSUNjc0lIWmhiSFZsS1R0Y2NseHVYSEpjYmlBZ0lDQmZkR2hwY3k1ZmMzUmhkR1VnUFNCMllXeDFaVHRjY2x4dVhISmNiaUFnSUNCc1pYUWdiWE5uSUQwZ2UxeHlYRzRnSUNBZ0lDQjBlWEJsT2lBbmRYQmtZWFJsSnl4Y2NseHVJQ0FnSUNBZ1puSnZiVG9nWDNSb2FYTXVjblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ3hjY2x4dUlDQWdJQ0FnZEc4NklGOTBhR2x6TG5KMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3Z0t5QW5MM04wWVhSMWN5Y3NYSEpjYmlBZ0lDQWdJR0p2WkhrNklIdGNjbHh1SUNBZ0lDQWdJQ0IyWVd4MVpUb2dkbUZzZFdWY2NseHVJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0JwWmlBb2NtVmhjMjl1S1NCN1hISmNiaUFnSUNBZ0lHMXpaeTVpYjJSNUxtUmxjMk1nUFNCeVpXRnpiMjQ3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ1gzUm9hWE11YldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRjMmNwTzF4eVhHNGdJSDFjY2x4dWZWeHlYRzVjY2x4dUx5OGdaWGh3YjNKMElHUmxabUYxYkhRZ1NXUndVSEp2ZUhsUWNtOTBiMU4wZFdJN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ1ZHOGdZV04wYVhaaGRHVWdkR2hwY3lCd2NtOTBiMk52YkNCemRIVmlMQ0IxYzJsdVp5QjBhR1VnYzJGdFpTQnRaWFJvYjJRZ1ptOXlJR0ZzYkNCd2NtOTBiM04wZFdJdVhISmNiaUFxSUVCd1lYSmhiU0FnZTFWU1RDNVNkVzUwYVcxbFZWSk1mU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNSUhKMWJuUnBiV1ZRY205MGIxTjFZbFZTVEZ4eVhHNGdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxMazFsYzNOaFoyVjlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZblZ6VUc5emRFMWxjM05oWjJVZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2NseHVJQ29nUUhCaGNtRnRJQ0I3VUhKdmRHOVRkSFZpUkdWelkzSnBjSFJ2Y2k1RGIyNW1hV2QxY21GMGFXOXVSR0YwWVV4cGMzUjlJR052Ym1acFozVnlZWFJwYjI0Z0lDQWdJQ0JqYjI1bWFXZDFjbUYwYVc5dVhISmNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDBnVDJKcVpXTjBJSGRwZEdnZ2JtRnRaU0JoYm1RZ2FXNXpkR0Z1WTJVZ2IyWWdVSEp2ZEc5VGRIVmlYSEpjYmlBcUwxeHlYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkJZbk4wY21GamRFbGtjRkJ5YjNoNVVISnZkRzlUZEhWaU8xeHlYRzVjYmx4dVhHNHZMeUJYUlVKUVFVTkxJRVpQVDFSRlVpQXZMMXh1THk4Z0xpOHVMaTlrWlhZdGNISnZkRzl6ZEhWaWN5OXpjbU12YVdSd2NISnZlSGt2UVdKemRISmhZM1JKWkhCUWNtOTRlVk4wZFdJdWFuTWlYU3dpYzI5MWNtTmxVbTl2ZENJNklpSjlcbi8vIyBzb3VyY2VVUkw9d2VicGFjay1pbnRlcm5hbDovLy80XG4iKTsKCi8qKiovIH0pCi8qKioqKiovIF0pWyJkZWZhdWx0Il07Cn0pOw==",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "22.80",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5fe88c210039898a45c75f6de8c56f417",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "22.80",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "52c91699f84b479f34e9f7abce2255fff",
    "constraints": {
      "node": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MicrosoftProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "microsoft.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "22.70",
    "description": "IDPProxy for microsoft idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "546e0f62b1aa6b322a17c85cf925e1dba",
    "constraints": {
      "browser": true
    },
    "objectName": "microsoft.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsForBrowserProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "22.70",
    "description": "IDPProxy for browser idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5d2606fd332d71526cafc4c13d80437b4",
    "constraints": {
      "browser": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "22.70",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "57378b186a1ba1a7af6d8190014c85afc",
    "constraints": {
      "node": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbigpIHsKcmV0dXJuIC8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXAKLyoqKioqKi8gCS8vIFRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCXZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307Ci8qKioqKiovCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewovKioqKioqLwovKioqKioqLyAJCS8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZQovKioqKioqLyAJCWlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7Ci8qKioqKiovIAkJCXJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHsKLyoqKioqKi8gCQkJaTogbW9kdWxlSWQsCi8qKioqKiovIAkJCWw6IGZhbHNlLAovKioqKioqLyAJCQlleHBvcnRzOiB7fQovKioqKioqLyAJCX07Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJbW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZAovKioqKioqLyAJCW1vZHVsZS5sID0gdHJ1ZTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLyAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCX0KLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzOwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikgewovKioqKioqLyAJCWlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHsKLyoqKioqKi8gCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsKLyoqKioqKi8gCQkJCWNvbmZpZ3VyYWJsZTogZmFsc2UsCi8qKioqKiovIAkJCQllbnVtZXJhYmxlOiB0cnVlLAovKioqKioqLyAJCQkJZ2V0OiBnZXR0ZXIKLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJfQovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHsKLyoqKioqKi8gCQl2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8KLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDoKLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7Ci8qKioqKiovIAkJcmV0dXJuIGdldHRlcjsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKLyoqKioqKi8KLyoqKioqKi8gCS8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7Ci8qKioqKiovIH0pCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIChbCi8qIDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwpldmFsKCJcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gYWN0aXZhdGU7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBkb21haW4gPSAncmV0aGluay1wcm9qZWN0LmV1JztcblxuLyoqXHJcbiAqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcclxuICovXG5cbnZhciBJTVNJV1Byb3h5U3R1YiA9IGZ1bmN0aW9uICgpIHtcblxuXHQvKipcclxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXHJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxyXG4gICpcclxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqL1xuXHRmdW5jdGlvbiBJTVNJV1Byb3h5U3R1YihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xuXHRcdHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIElNU0lXUHJveHlTdHViKTtcblxuXHRcdHRoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7XG5cdFx0dGhpcy5tZXNzYWdlQnVzID0gYnVzO1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnO1xuXG5cdFx0dGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24gKG1zZykge1xuXHRcdFx0Ly9UT0RPIGFkZCB0aGUgcmVzcGVjdGl2ZSBsaXN0ZW5lclxuXHRcdFx0aWYgKG1zZy50byA9PT0gJ2RvbWFpbi1pZHA6Ly8nICsgZG9tYWluKSB7XG5cdFx0XHRcdF90aGlzMi5yZXF1ZXN0VG9JZHAobXNnKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuX3NlbmRTdGF0dXMoJ2NyZWF0ZWQnKTtcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhJTVNJV1Byb3h5U3R1YiwgW3tcblx0XHRrZXk6ICdfc2VuZFN0YXR1cycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcblx0XHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHRcdGNvbnNvbGUubG9nKCdbU2xhY2sgSWRwIFByb3h5IHN0YXR1cyBjaGFuZ2VkXSB0byAnLCB2YWx1ZSk7XG5cblx0XHRcdF90aGlzLl9zdGF0ZSA9IHZhbHVlO1xuXG5cdFx0XHR2YXIgbXNnID0ge1xuXHRcdFx0XHR0eXBlOiAndXBkYXRlJyxcblx0XHRcdFx0ZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcblx0XHRcdFx0dG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXG5cdFx0XHRcdGJvZHk6IHtcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHJlYXNvbikge1xuXHRcdFx0XHRtc2cuYm9keS5kZXNjID0gcmVhc29uO1xuXHRcdFx0fVxuXG5cdFx0XHRfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxyXG4gICAqXHJcbiAgICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xyXG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICdyZXF1ZXN0VG9JZHAnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0VG9JZHAobXNnKSB7XG5cdFx0XHR2YXIgX3RoaXMzID0gdGhpcztcblxuXHRcdFx0dmFyIHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcblxuXHRcdFx0c3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcblx0XHRcdFx0Y2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOlxuXHRcdFx0XHRcdHRoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzMy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG5cdFx0XHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gX3RoaXMzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuXHRcdFx0XHRcdHRoaXMucmVwbHlNZXNzYWdlKG1zZywgeyBpZGVudGl0eTogJ2lkZW50aXR5QGlkcC5jb20nLCBjb250ZW50czogJ2NvbnRlbnQnIH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2dlbmVyYXRlQXNzZXJ0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVBc3NlcnRpb24oY29udGVudHMsIG9yaWdpbiwgaGludCkge1xuXHRcdFx0dmFyIF90aGlzNCA9IHRoaXM7XG5cblx0XHRcdGNvbnNvbGUubG9nKCdjb250ZW50cy0+JywgY29udGVudHMpO1xuXHRcdFx0Y29uc29sZS5sb2coJ29yaWdpbi0+Jywgb3JpZ2luKTtcblx0XHRcdGNvbnNvbGUubG9nKCdoaW50LT4nLCBoaW50KTtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0XHQvL3RoZSBoaW50IGZpZWxkIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBvYnRhaW5lZCBhZnRlciB0aGUgdXNlciBhdXRoZW50aWNhdGlvblxuXHRcdFx0XHQvLyBpZiB0aGUgaGludCBjb250ZW50IGlzIG5vdCBwcmVzZW50LCB0aGVuIHJlamVjdHMgdGhlIHZhbHVlIHdpdGggdGhlIFVSTCB0byBvcGVuIHRoZSBwYWdlIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlclxuXHRcdFx0XHRpZiAoIWhpbnQpIHtcblx0XHRcdFx0XHR2YXIgcmVxdWVzdFVybCA9ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdjIvYXV0aD9zY29wZT1lbWFpbCUyMHByb2ZpbGUmc3RhdGU9JTJGcHJvZmlsZSZyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgJyZyZXNwb25zZV90eXBlPXRva2VuJmNsaWVudF9pZD04MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nO1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdmaXJzdCB1cmwgJywgcmVxdWVzdFVybCwgJ2RvbmUnKTtcblx0XHRcdFx0XHRyZWplY3QoeyBuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsIH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBhY2Nlc3NUb2tlbiA9IF90aGlzNC5fdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTtcblx0XHRcdFx0XHR2YXIgZXhwaXJlcyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApICsgX3RoaXM0Ll91cmxQYXJzZXIoaGludCwgJ2V4cGlyZXNfaW4nKTtcblx0XHRcdFx0XHRmZXRjaCgnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nICsgYWNjZXNzVG9rZW4pLnRoZW4oZnVuY3Rpb24gKHJlc191c2VyKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzX3VzZXIuanNvbigpO1xuXHRcdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKGJvZHkpIHtcblx0XHRcdFx0XHRcdHZhciBpbmZvVG9rZW4gPSB7IHBpY3R1cmU6IGJvZHkucGljdHVyZSwgZW1haWw6IGJvZHkuZW1haWwsIGZhbWlseV9uYW1lOiBib2R5LmZhbWlseV9uYW1lLCBnaXZlbl9uYW1lOiBib2R5LmdpdmVuX25hbWUgfTtcblx0XHRcdFx0XHRcdHZhciBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHsgdG9rZW5JRDogYWNjZXNzVG9rZW4sIGVtYWlsOiBib2R5LmVtYWlsLCBpZDogYm9keS5pZCB9KSk7XG5cdFx0XHRcdFx0XHR2YXIgdG9SZXNvbHZlID0geyBpbmZvOiB7IGV4cGlyZXM6IGV4cGlyZXMgfSwgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogeyBkb21haW46IGRvbWFpbiwgcHJvdG9jb2w6ICdPQXV0aCAyLjAnIH0sIGluZm9Ub2tlbjogaW5mb1Rva2VuLCBpbnRlcndvcmtpbmc6IHsgYWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbiwgZG9tYWluOiBkb21haW4gfSB9O1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ1JFU09MVklORyBUSElTIE9CSkVDVCcsIHRvUmVzb2x2ZSk7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKHRvUmVzb2x2ZSk7XG5cdFx0XHRcdFx0fSkuY2F0Y2gocmVqZWN0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnX3VybFBhcnNlcicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF91cmxQYXJzZXIodXJsLCBuYW1lKSB7XG5cdFx0XHRuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXFxcXScpO1xuXHRcdFx0dmFyIHJlZ2V4UyA9ICdbXFxcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknO1xuXHRcdFx0dmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpO1xuXHRcdFx0dmFyIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG5cdFx0XHRpZiAocmVzdWx0cyA9PT0gbnVsbCkgcmV0dXJuICcnO2Vsc2UgcmV0dXJuIHJlc3VsdHNbMV07XG5cdFx0fVxuXG5cdFx0LyoqXHJcbiAgICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAgKlxyXG4gICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxyXG4gICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxyXG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICdyZXBseU1lc3NhZ2UnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuXHRcdFx0dmFyIG1lc3NhZ2UgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHZhbHVlIH0gfTtcblxuXHRcdFx0dGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBJTVNJV1Byb3h5U3R1Yjtcbn0oKTtcblxuLyoqXHJcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxyXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxyXG4gKi9cblxuXG5mdW5jdGlvbiBhY3RpdmF0ZSh1cmwsIGJ1cywgY29uZmlnKSB7XG5cdHJldHVybiB7XG5cdFx0bmFtZTogJ0lNU0lXUHJveHlTdHViJyxcblx0XHRpbnN0YW5jZTogbmV3IElNU0lXUHJveHlTdHViKHVybCwgYnVzLCBjb25maWcpXG5cdH07XG59Ly8jIHNvdXJjZVVSTD1bbW9kdWxlXVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kbFluQmhZMnM2THk4dkxpOHVMaTlrWlhZdGNISnZkRzl6ZEhWaWN5OXpjbU12YVdSd2NISnZlSGt2YzJsd0xuSmxkR2hwYm1zdGNISnZhbVZqZEM1bGRTOUpUVk5KVjFCeWIzaDVVM1IxWWk1cFpIQXVhbk0vTVRoak5TSmRMQ0p1WVcxbGN5STZXeUpoWTNScGRtRjBaU0lzSW1SdmJXRnBiaUlzSWtsTlUwbFhVSEp2ZUhsVGRIVmlJaXdpY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENJc0ltSjFjeUlzSW1OdmJtWnBaeUlzSW0xbGMzTmhaMlZDZFhNaUxDSmhaR1JNYVhOMFpXNWxjaUlzSW0xelp5SXNJblJ2SWl3aWNtVnhkV1Z6ZEZSdlNXUndJaXdpWDNObGJtUlRkR0YwZFhNaUxDSjJZV3gxWlNJc0luSmxZWE52YmlJc0lsOTBhR2x6SWl3aVkyOXVjMjlzWlNJc0lteHZaeUlzSWw5emRHRjBaU0lzSW5SNWNHVWlMQ0ptY205dElpd2lZbTlrZVNJc0ltUmxjMk1pTENKd2IzTjBUV1Z6YzJGblpTSXNJbkJoY21GdGN5SXNJbTFsZEdodlpDSXNJbWRsYm1WeVlYUmxRWE56WlhKMGFXOXVJaXdpWTI5dWRHVnVkSE1pTENKdmNtbG5hVzRpTENKMWMyVnlibUZ0WlVocGJuUWlMQ0owYUdWdUlpd2ljbVZ3YkhsTlpYTnpZV2RsSWl3aVkyRjBZMmdpTENKbGNuSnZjaUlzSW1sa1pXNTBhWFI1SWl3aWFHbHVkQ0lzSWxCeWIyMXBjMlVpTENKeVpYTnZiSFpsSWl3aWNtVnFaV04wSWl3aWNtVnhkV1Z6ZEZWeWJDSXNJbXh2WTJGMGFXOXVJaXdpY0hKdmRHOWpiMndpTENKb2IzTjBibUZ0WlNJc0ltNWhiV1VpTENKc2IyZHBibFZ5YkNJc0ltRmpZMlZ6YzFSdmEyVnVJaXdpWDNWeWJGQmhjbk5sY2lJc0ltVjRjR2x5WlhNaUxDSk5ZWFJvSWl3aVpteHZiM0lpTENKRVlYUmxJaXdpYm05M0lpd2labVYwWTJnaUxDSnlaWE5mZFhObGNpSXNJbXB6YjI0aUxDSnBibVp2Vkc5clpXNGlMQ0p3YVdOMGRYSmxJaXdpWlcxaGFXd2lMQ0ptWVcxcGJIbGZibUZ0WlNJc0ltZHBkbVZ1WDI1aGJXVWlMQ0poYzNObGNuUnBiMjRpTENKaWRHOWhJaXdpU2xOUFRpSXNJbk4wY21sdVoybG1lU0lzSW5SdmEyVnVTVVFpTENKcFpDSXNJblJ2VW1WemIyeDJaU0lzSW1sdVptOGlMQ0pwWkhBaUxDSnBiblJsY25kdmNtdHBibWNpTENKaFkyTmxjM05mZEc5clpXNGlMQ0oxY213aUxDSnlaWEJzWVdObElpd2ljbVZuWlhoVElpd2ljbVZuWlhnaUxDSlNaV2RGZUhBaUxDSnlaWE4xYkhSeklpd2laWGhsWXlJc0ltMWxjM05oWjJVaUxDSmpiMlJsSWl3aWFXNXpkR0Z1WTJVaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPMnRDUVhkSmQwSkJMRkU3T3pzN1FVRjRTWGhDTEVsQlFVbERMRk5CUVZNc2IwSkJRV0k3TzBGQlJVRTdPenM3U1VGSFRVTXNZenM3UVVGRlREczdPenM3T3pzN1FVRlJRU3g1UWtGQldVTXNiVUpCUVZvc1JVRkJhVU5ETEVkQlFXcERMRVZCUVhORFF5eE5RVUYwUXl4RlFVRTRRenRCUVVGQk96dEJRVUZCT3p0QlFVTTNReXhQUVVGTFJpeHRRa0ZCVEN4SFFVRXlRa0VzYlVKQlFUTkNPMEZCUTBFc1QwRkJTMGNzVlVGQlRDeEhRVUZyUWtZc1IwRkJiRUk3UVVGRFFTeFBRVUZMUXl4TlFVRk1MRWRCUVdOQkxFMUJRV1E3TzBGQlJVRXNUMEZCUzBNc1ZVRkJUQ3hEUVVGblFrTXNWMEZCYUVJc1EwRkJORUlzUjBGQk5VSXNSVUZCYVVNc1pVRkJUenRCUVVOMlF6dEJRVU5CTEU5QlFVbERMRWxCUVVsRExFVkJRVW9zZFVKQlFUSkNVaXhOUVVFdlFpeEZRVUY1UXp0QlFVTjRReXhYUVVGTFV5eFpRVUZNTEVOQlFXdENSaXhIUVVGc1FqdEJRVU5CTzBGQlEwUXNSMEZNUkRzN1FVRlBRU3hQUVVGTFJ5eFhRVUZNTEVOQlFXbENMRk5CUVdwQ08wRkJRMEU3T3pzN09FSkJSVmRETEVzc1JVRkJUME1zVFN4RlFVRlJPMEZCUXpGQ0xFOUJRVWxETEZGQlFWRXNTVUZCV2pzN1FVRkZRVU1zVjBGQlVVTXNSMEZCVWl4RFFVRlpMSE5EUVVGYUxFVkJRVzlFU2l4TFFVRndSRHM3UVVGRlFVVXNVMEZCVFVjc1RVRkJUaXhIUVVGbFRDeExRVUZtT3p0QlFVVkJMRTlCUVVsS0xFMUJRVTA3UVVGRFZGVXNWVUZCVFN4UlFVUkhPMEZCUlZSRExGVkJRVTFNTEUxQlFVMVlMRzFDUVVaSU8wRkJSMVJOTEZGQlFVbExMRTFCUVUxWUxHMUNRVUZPTEVkQlFUUkNMRk5CU0haQ08wRkJTVlJwUWl4VlFVRk5PMEZCUTB4U0xGbEJRVTlCTzBGQlJFWTdRVUZLUnl4SlFVRldPenRCUVZOQkxFOUJRVWxETEUxQlFVb3NSVUZCV1R0QlFVTllUQ3hSUVVGSldTeEpRVUZLTEVOQlFWTkRMRWxCUVZRc1IwRkJaMEpTTEUxQlFXaENPMEZCUTBFN08wRkJSVVJETEZOQlFVMVNMRlZCUVU0c1EwRkJhVUpuUWl4WFFVRnFRaXhEUVVFMlFtUXNSMEZCTjBJN1FVRkRRVHM3UVVGRlJEczdPenM3T3pzN0swSkJTMkZCTEVjc1JVRkJTenRCUVVGQk96dEJRVU5xUWl4UFFVRkpaU3hUUVVGVFppeEpRVUZKV1N4SlFVRktMRU5CUVZOSExFMUJRWFJDT3p0QlFVVkJMRmRCUVZGbUxFbEJRVWxaTEVsQlFVb3NRMEZCVTBrc1RVRkJha0k3UVVGRFFTeFRRVUZMTEcxQ1FVRk1PMEZCUTBNc1ZVRkJTME1zYVVKQlFVd3NRMEZCZFVKR0xFOUJRVTlITEZGQlFUbENMRVZCUVhkRFNDeFBRVUZQU1N4TlFVRXZReXhGUVVGMVJFb3NUMEZCVDBzc1dVRkJPVVFzUlVGRFJVTXNTVUZFUml4RFFVTlBPMEZCUVVFc1lVRkJVeXhQUVVGTFF5eFpRVUZNTEVOQlFXdENkRUlzUjBGQmJFSXNSVUZCZFVKSkxFdEJRWFpDTEVOQlFWUTdRVUZCUVN4TlFVUlFMRVZCUlVWdFFpeExRVVpHTEVOQlJWRTdRVUZCUVN4aFFVRlRMRTlCUVV0RUxGbEJRVXdzUTBGQmEwSjBRaXhIUVVGc1FpeEZRVUYxUW5kQ0xFdEJRWFpDTEVOQlFWUTdRVUZCUVN4TlFVWlNPMEZCUjBFN1FVRkRSQ3hUUVVGTExHMUNRVUZNTzBGQlEwTXNWVUZCUzBZc1dVRkJUQ3hEUVVGclFuUkNMRWRCUVd4Q0xFVkJRWFZDTEVWQlFVTjVRaXhWUVVGVkxHdENRVUZZTEVWQlFTdENVQ3hWUVVGVkxGTkJRWHBETEVWQlFYWkNPMEZCUTBFN1FVRkRSRHRCUVVORE8wRkJWa1E3UVVGWlFUczdPMjlEUVVWclFrRXNVU3hGUVVGVlF5eE5MRVZCUVZGUExFa3NSVUZCVHp0QlFVRkJPenRCUVVVelEyNUNMRmRCUVZGRExFZEJRVklzUTBGQldTeFpRVUZhTEVWQlFUQkNWU3hSUVVFeFFqdEJRVU5CV0N4WFFVRlJReXhIUVVGU0xFTkJRVmtzVlVGQldpeEZRVUYzUWxjc1RVRkJlRUk3UVVGRFFWb3NWMEZCVVVNc1IwRkJVaXhEUVVGWkxGRkJRVm9zUlVGQmMwSnJRaXhKUVVGMFFqczdRVUZGUVN4VlFVRlBMRWxCUVVsRExFOUJRVW9zUTBGQldTeFZRVUZEUXl4UFFVRkVMRVZCUVZWRExFMUJRVllzUlVGQmNVSTdPMEZCUlhaRE8wRkJRMEU3UVVGRFFTeFJRVUZKTEVOQlFVTklMRWxCUVV3c1JVRkJWenRCUVVOV0xGTkJRVWxKTEcxSVFVRm5TRU1zVTBGQlUwTXNVVUZCZWtnc1ZVRkJjMGxFTEZOQlFWTkZMRkZCUVM5SkxEUkhRVUZLTzBGQlEwRXhRaXhoUVVGUlF5eEhRVUZTTEVOQlFWa3NXVUZCV2l4RlFVRXdRbk5DTEZWQlFURkNMRVZCUVhORExFMUJRWFJETzBGQlEwRkVMRmxCUVU4c1JVRkJRMHNzVFVGQlRTeGxRVUZRTEVWQlFYZENReXhWUVVGVlRDeFZRVUZzUXl4RlFVRlFPMEZCUTBFc1MwRktSQ3hOUVVsUE8wRkJRMDRzVTBGQlNVMHNZMEZCWXl4UFFVRkxReXhWUVVGTUxFTkJRV2RDV0N4SlFVRm9RaXhGUVVGelFpeGpRVUYwUWl4RFFVRnNRanRCUVVOQkxGTkJRVWxaTEZWQlFWVkRMRXRCUVV0RExFdEJRVXdzUTBGQlYwTXNTMEZCUzBNc1IwRkJUQ3hMUVVGaExFbEJRWGhDTEVsQlFXZERMRTlCUVV0TUxGVkJRVXdzUTBGQlowSllMRWxCUVdoQ0xFVkJRWE5DTEZsQlFYUkNMRU5CUVRsRE8wRkJRMEZwUWl3eVJVRkJiMFZRTEZkQlFYQkZMRVZCUTBWbUxFbEJSRVlzUTBGRFR6dEJRVUZCTEdGQlFWbDFRaXhUUVVGVFF5eEpRVUZVTEVWQlFWbzdRVUZCUVN4TlFVUlFMRVZCUlVWNFFpeEpRVVpHTEVOQlJVOHNaMEpCUVZFN1FVRkRZaXhWUVVGSmVVSXNXVUZCV1N4RlFVRkRReXhUUVVGVGJrTXNTMEZCUzIxRExFOUJRV1lzUlVGQmQwSkRMRTlCUVU5d1F5eExRVUZMYjBNc1MwRkJjRU1zUlVGQk1rTkRMR0ZCUVdGeVF5eExRVUZMY1VNc1YwRkJOMFFzUlVGQk1FVkRMRmxCUVZsMFF5eExRVUZMYzBNc1ZVRkJNMFlzUlVGQmFFSTdRVUZEUVN4VlFVRkpReXhaUVVGWlF5eExRVUZMUXl4TFFVRkxReXhUUVVGTUxFTkJRV1VzUlVGQlEwTXNVMEZCVTI1Q0xGZEJRVllzUlVGQmRVSlpMRTlCUVU5d1F5eExRVUZMYjBNc1MwRkJia01zUlVGQk1FTlJMRWxCUVVrMVF5eExRVUZMTkVNc1JVRkJia1FzUlVGQlppeERRVUZNTEVOQlFXaENPMEZCUTBFc1ZVRkJTVU1zV1VGQldTeEZRVUZEUXl4TlFVRk5MRVZCUVVWd1FpeFRRVUZUUVN4UFFVRllMRVZCUVZBc1JVRkJOa0poTEZkQlFWZEJMRk5CUVhoRExFVkJRVzFFVVN4TFFVRkxMRVZCUVVOc1JTeFJRVUZSUVN4TlFVRlVMRVZCUVdsQ2RVTXNWVUZCVlN4WFFVRXpRaXhGUVVGNFJDeEZRVUZwUjJNc1YwRkJWMEVzVTBGQk5VY3NSVUZCZFVoakxHTkJRV01zUlVGQlEwTXNZMEZCWTNwQ0xGZEJRV1lzUlVGQk5FSXpReXhSUVVGUlFTeE5RVUZ3UXl4RlFVRnlTU3hGUVVGb1FqdEJRVU5CWXl4alFVRlJReXhIUVVGU0xFTkJRVmtzZFVKQlFWb3NSVUZCY1VOcFJDeFRRVUZ5UXp0QlFVTkJOMElzWTBGQlVUWkNMRk5CUVZJN1FVRkRRU3hOUVZKR0xFVkJVVWxzUXl4TFFWSktMRU5CVVZWTkxFMUJVbFk3UVVGVFFUdEJRVU5FTEVsQmNrSk5MRU5CUVZBN1FVRnpRa0U3T3pzMlFrRkZWV2xETEVjc1JVRkJTelZDTEVrc1JVRkJUVHRCUVVOeVFrRXNWVUZCVDBFc1MwRkJTelpDTEU5QlFVd3NRMEZCWVN4TlFVRmlMRVZCUVhGQ0xFMUJRWEpDTEVWQlFUWkNRU3hQUVVFM1FpeERRVUZ4UXl4TlFVRnlReXhGUVVFMlF5eE5RVUUzUXl4RFFVRlFPMEZCUTBFc1QwRkJTVU1zVTBGQlV5eFpRVUZaT1VJc1NVRkJXaXhIUVVGdFFpeFhRVUZvUXp0QlFVTkJMRTlCUVVrclFpeFJRVUZSTEVsQlFVbERMRTFCUVVvc1EwRkJWMFlzVFVGQldDeERRVUZhTzBGQlEwRXNUMEZCU1Vjc1ZVRkJWVVlzVFVGQlRVY3NTVUZCVGl4RFFVRlhUaXhIUVVGWUxFTkJRV1E3UVVGRFFTeFBRVUZKU3l4WlFVRlpMRWxCUVdoQ0xFVkJRME1zVDBGQlR5eEZRVUZRTEVOQlJFUXNTMEZIUXl4UFFVRlBRU3hSUVVGUkxFTkJRVklzUTBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdLMEpCVFdGdVJTeEhMRVZCUVV0SkxFc3NSVUZCVHp0QlFVTjRRaXhQUVVGSmFVVXNWVUZCVlN4RlFVRkRZaXhKUVVGSmVFUXNTVUZCU1hkRUxFVkJRVlFzUlVGQllUbERMRTFCUVUwc1ZVRkJia0lzUlVGQkswSlVMRWxCUVVsRUxFbEJRVWxYTEVsQlFYWkRMRVZCUVRaRFFTeE5RVUZOV0N4SlFVRkpReXhGUVVGMlJDeEZRVUV5UkZjc1RVRkJUU3hGUVVGRE1FUXNUVUZCVFN4SFFVRlFMRVZCUVZsc1JTeFBRVUZQUVN4TFFVRnVRaXhGUVVGcVJTeEZRVUZrT3p0QlFVVkJMRkZCUVV0T0xGVkJRVXdzUTBGQlowSm5RaXhYUVVGb1FpeERRVUUwUW5WRUxFOUJRVFZDTzBGQlEwRTdPenM3T3p0QlFVZEdPenM3T3pzN096czdRVUZQWlN4VFFVRlROMFVzVVVGQlZDeERRVUZyUW5ORkxFZEJRV3hDTEVWQlFYVkNiRVVzUjBGQmRrSXNSVUZCTkVKRExFMUJRVFZDTEVWQlFXOURPMEZCUTJ4RUxGRkJRVTg3UVVGRFRuRkRMRkZCUVUwc1owSkJSRUU3UVVGRlRuRkRMRmxCUVZVc1NVRkJTVGRGTEdOQlFVb3NRMEZCYlVKdlJTeEhRVUZ1UWl4RlFVRjNRbXhGTEVkQlFYaENMRVZCUVRaQ1F5eE5RVUUzUWp0QlFVWktMRVZCUVZBN1FVRkpRU0lzSW1acGJHVWlPaUl3TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2liR1YwSUdSdmJXRnBiaUE5SUNkeVpYUm9hVzVyTFhCeWIycGxZM1F1WlhVblhISmNibHh5WEc0dktpcGNjbHh1SUNvZ1NXUmxiblJwZEhrZ1VISnZkbWxrWlhJZ1VISnZlSGtnVUhKdmRHOWpiMndnVTNSMVlseHlYRzRnS2k5Y2NseHVZMnhoYzNNZ1NVMVRTVmRRY205NGVWTjBkV0lnZTF4eVhHNWNjbHh1WEhRdktpcGNjbHh1WEhRZ0tpQkRiMjV6ZEhKMVkzUnZjaUJ2WmlCMGFHVWdTV1J3VUhKdmVIa2dVM1IxWWx4eVhHNWNkQ0FxSUZSb1pTQmpiMjV6ZEhKMVkzUnZjaUJoWkdRZ1lTQnNhWE4wWlc1bGNpQnBiaUIwYUdVZ2JXVnpjMkZuWlVKMWN5QnlaV05sYVhabFpDQmhibVFnYzNSaGNuUWdZU0IzWldJZ2QyOXlhMlZ5SUhkcGRHZ2dkR2hsSUhKbFkyVnBkbVZrSUdsa2NGQnliM2g1WEhKY2JseDBJQ3BjY2x4dVhIUWdLaUJBY0dGeVlXMGdJSHRWVWt3dVVuVnVkR2x0WlZWU1RIMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRXSlZVa3hjY2x4dVhIUWdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxMazFsYzNOaFoyVjlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZblZ6VUc5emRFMWxjM05oWjJVZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2NseHVYSFFnS2lCQWNHRnlZVzBnSUh0UWNtOTBiMU4wZFdKRVpYTmpjbWx3ZEc5eUxrTnZibVpwWjNWeVlYUnBiMjVFWVhSaFRHbHpkSDBnWTI5dVptbG5kWEpoZEdsdmJpQWdJQ0FnSUdOdmJtWnBaM1Z5WVhScGIyNWNjbHh1WEhRZ0tpOWNjbHh1WEhSamIyNXpkSEoxWTNSdmNpaHlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1MQ0JpZFhNc0lHTnZibVpwWnlrZ2UxeHlYRzVjZEZ4MGRHaHBjeTV5ZFc1MGFXMWxVSEp2ZEc5VGRIVmlWVkpNSUQwZ2NuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RGeHlYRzVjZEZ4MGRHaHBjeTV0WlhOellXZGxRblZ6SUQwZ1luVnpYSEpjYmx4MFhIUjBhR2x6TG1OdmJtWnBaeUE5SUdOdmJtWnBaMXh5WEc1Y2NseHVYSFJjZEhSb2FYTXViV1Z6YzJGblpVSjFjeTVoWkdSTWFYTjBaVzVsY2lnbktpY3NJRzF6WnlBOVBpQjdYSEpjYmx4MFhIUmNkQzh2VkU5RVR5QmhaR1FnZEdobElISmxjM0JsWTNScGRtVWdiR2x6ZEdWdVpYSmNjbHh1WEhSY2RGeDBhV1lnS0cxelp5NTBieUE5UFQwZ1lHUnZiV0ZwYmkxcFpIQTZMeThrZTJSdmJXRnBibjFnS1NCN1hISmNibHgwWEhSY2RGeDBkR2hwY3k1eVpYRjFaWE4wVkc5SlpIQW9iWE5uS1Z4eVhHNWNkRngwWEhSOVhISmNibHgwWEhSOUtWeHlYRzVjY2x4dVhIUmNkSFJvYVhNdVgzTmxibVJUZEdGMGRYTW9KMk55WldGMFpXUW5LVnh5WEc1Y2RIMWNjbHh1WEhKY2JseDBYM05sYm1SVGRHRjBkWE1vZG1Gc2RXVXNJSEpsWVhOdmJpa2dlMXh5WEc1Y2RGeDBiR1YwSUY5MGFHbHpJRDBnZEdocGMxeHlYRzVjY2x4dVhIUmNkR052Ym5OdmJHVXViRzluS0NkYlUyeGhZMnNnU1dSd0lGQnliM2g1SUhOMFlYUjFjeUJqYUdGdVoyVmtYU0IwYnlBbkxDQjJZV3gxWlNsY2NseHVYSEpjYmx4MFhIUmZkR2hwY3k1ZmMzUmhkR1VnUFNCMllXeDFaVnh5WEc1Y2NseHVYSFJjZEd4bGRDQnRjMmNnUFNCN1hISmNibHgwWEhSY2RIUjVjR1U2SUNkMWNHUmhkR1VuTEZ4eVhHNWNkRngwWEhSbWNtOXRPaUJmZEdocGN5NXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1MRnh5WEc1Y2RGeDBYSFIwYnpvZ1gzUm9hWE11Y25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVENBcklDY3ZjM1JoZEhWekp5eGNjbHh1WEhSY2RGeDBZbTlrZVRvZ2UxeHlYRzVjZEZ4MFhIUmNkSFpoYkhWbE9pQjJZV3gxWlZ4eVhHNWNkRngwWEhSOVhISmNibHgwWEhSOVhISmNibHh5WEc1Y2RGeDBhV1lnS0hKbFlYTnZiaWtnZTF4eVhHNWNkRngwWEhSdGMyY3VZbTlrZVM1a1pYTmpJRDBnY21WaGMyOXVYSEpjYmx4MFhIUjlYSEpjYmx4eVhHNWNkRngwWDNSb2FYTXViV1Z6YzJGblpVSjFjeTV3YjNOMFRXVnpjMkZuWlNodGMyY3BYSEpjYmx4MGZWeHlYRzVjY2x4dVhIUXZLaXBjY2x4dVhIUWdLaUJHZFc1amRHbHZiaUIwYUdGMElITmxaU0IwYUdVZ2FXNTBaVzVrWldRZ2JXVjBhRzlrSUdsdUlIUm9aU0J0WlhOellXZGxJSEpsWTJWcGRtVmtJR0Z1WkNCallXeHNJSFJvWlNCeVpYTndaV04wYVhabElHWjFibU4wYVc5dVhISmNibHgwSUNwY2NseHVYSFFnS2lCQWNHRnlZVzBnZTIxbGMzTmhaMlY5SUNCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdsdUlIUm9aU0J0WlhOellXZGxRblZ6WEhKY2JseDBJQ292WEhKY2JseDBjbVZ4ZFdWemRGUnZTV1J3S0cxelp5a2dlMXh5WEc1Y2RGeDBiR1YwSUhCaGNtRnRjeUE5SUcxelp5NWliMlI1TG5CaGNtRnRjMXh5WEc1Y2NseHVYSFJjZEhOM2FYUmphQ0FvYlhObkxtSnZaSGt1YldWMGFHOWtLU0I3WEhKY2JseDBYSFJqWVhObElDZG5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJpYzZYSEpjYmx4MFhIUmNkSFJvYVhNdVoyVnVaWEpoZEdWQmMzTmxjblJwYjI0b2NHRnlZVzF6TG1OdmJuUmxiblJ6TENCd1lYSmhiWE11YjNKcFoybHVMQ0J3WVhKaGJYTXVkWE5sY201aGJXVklhVzUwS1Z4eVhHNWNkRngwWEhSY2RDNTBhR1Z1S0haaGJIVmxJRDArSUhSb2FYTXVjbVZ3YkhsTlpYTnpZV2RsS0cxelp5d2dkbUZzZFdVcEtWeHlYRzVjZEZ4MFhIUmNkQzVqWVhSamFDaGxjbkp2Y2lBOVBpQjBhR2x6TG5KbGNHeDVUV1Z6YzJGblpTaHRjMmNzSUdWeWNtOXlLU2xjY2x4dVhIUmNkRngwWW5KbFlXdGNjbHh1WEhSY2RHTmhjMlVnSjNaaGJHbGtZWFJsUVhOelpYSjBhVzl1SnpwY2NseHVYSFJjZEZ4MGRHaHBjeTV5WlhCc2VVMWxjM05oWjJVb2JYTm5MQ0I3YVdSbGJuUnBkSGs2SUNkcFpHVnVkR2wwZVVCcFpIQXVZMjl0Snl3Z1kyOXVkR1Z1ZEhNNklDZGpiMjUwWlc1MEozMHBYSEpjYmx4MFhIUmNkR0p5WldGclhISmNibHgwWEhSa1pXWmhkV3gwT2x4eVhHNWNkRngwWEhSaWNtVmhhMXh5WEc1Y2RGeDBmVnh5WEc1Y2RIMWNjbHh1WEhKY2JseDBaMlZ1WlhKaGRHVkJjM05sY25ScGIyNGdLR052Ym5SbGJuUnpMQ0J2Y21sbmFXNHNJR2hwYm5RcElDQjdYSEpjYmx4eVhHNWNkRngwWTI5dWMyOXNaUzVzYjJjb0oyTnZiblJsYm5SekxUNG5MQ0JqYjI1MFpXNTBjeWxjY2x4dVhIUmNkR052Ym5OdmJHVXViRzluS0NkdmNtbG5hVzR0UGljc0lHOXlhV2RwYmlsY2NseHVYSFJjZEdOdmJuTnZiR1V1Ykc5bktDZG9hVzUwTFQ0bkxDQm9hVzUwS1Z4eVhHNWNjbHh1WEhSY2RISmxkSFZ5YmlCdVpYY2dVSEp2YldselpTZ29jbVZ6YjJ4MlpTd2djbVZxWldOMEtTQTlQaUI3WEhKY2JseHlYRzVjZEZ4MFhIUXZMM1JvWlNCb2FXNTBJR1pwWld4a0lHTnZiblJoYVc1eklIUm9aU0JwYm1admNtMWhkR2x2YmlCdlluUmhhVzVsWkNCaFpuUmxjaUIwYUdVZ2RYTmxjaUJoZFhSb1pXNTBhV05oZEdsdmJseHlYRzVjZEZ4MFhIUXZMeUJwWmlCMGFHVWdhR2x1ZENCamIyNTBaVzUwSUdseklHNXZkQ0J3Y21WelpXNTBMQ0IwYUdWdUlISmxhbVZqZEhNZ2RHaGxJSFpoYkhWbElIZHBkR2dnZEdobElGVlNUQ0IwYnlCdmNHVnVJSFJvWlNCd1lXZGxJSFJ2SUdGMWRHaGxiblJwWTJGMFpTQjBhR1VnZFhObGNseHlYRzVjZEZ4MFhIUnBaaUFvSVdocGJuUXBJSHRjY2x4dVhIUmNkRngwWEhSc1pYUWdjbVZ4ZFdWemRGVnliQ0E5WUdoMGRIQnpPaTh2WVdOamIzVnVkSE11WjI5dloyeGxMbU52YlM5dkwyOWhkWFJvTWk5Mk1pOWhkWFJvUDNOamIzQmxQV1Z0WVdsc0pUSXdjSEp2Wm1sc1pTWnpkR0YwWlQwbE1rWndjbTltYVd4bEpuSmxaR2x5WldOMFgzVnlhVDBrZTJ4dlkyRjBhVzl1TG5CeWIzUnZZMjlzZlM4dkpIdHNiMk5oZEdsdmJpNW9iM04wYm1GdFpYMG1jbVZ6Y0c5dWMyVmZkSGx3WlQxMGIydGxiaVpqYkdsbGJuUmZhV1E5T0RBNE16STVOVFkyTURFeUxYUnhjamh4YjJneE1URTVOREpuWkRKclp6QXdOM1F3Y3pobU1qYzNjbTlwTG1Gd2NITXVaMjl2WjJ4bGRYTmxjbU52Ym5SbGJuUXVZMjl0WUZ4eVhHNWNkRngwWEhSY2RHTnZibk52YkdVdWJHOW5LQ2RtYVhKemRDQjFjbXdnSnl3Z2NtVnhkV1Z6ZEZWeWJDd2dKMlJ2Ym1VbktWeHlYRzVjZEZ4MFhIUmNkSEpsYW1WamRDaDdibUZ0WlRvZ0owbGtVRXh2WjJsdVJYSnliM0luTENCc2IyZHBibFZ5YkRvZ2NtVnhkV1Z6ZEZWeWJIMHBYSEpjYmx4MFhIUmNkSDBnWld4elpTQjdYSEpjYmx4MFhIUmNkRngwYkdWMElHRmpZMlZ6YzFSdmEyVnVJRDBnZEdocGN5NWZkWEpzVUdGeWMyVnlLR2hwYm5Rc0lDZGhZMk5sYzNOZmRHOXJaVzRuS1Z4eVhHNWNkRngwWEhSY2RHeGxkQ0JsZUhCcGNtVnpJRDBnVFdGMGFDNW1iRzl2Y2loRVlYUmxMbTV2ZHlncElDOGdNVEF3TUNrZ0t5QjBhR2x6TGw5MWNteFFZWEp6WlhJb2FHbHVkQ3dnSjJWNGNHbHlaWE5mYVc0bktWeHlYRzVjZEZ4MFhIUmNkR1psZEdOb0tHQm9kSFJ3Y3pvdkwzZDNkeTVuYjI5bmJHVmhjR2x6TG1OdmJTOXZZWFYwYURJdmRqRXZkWE5sY21sdVptOC9ZV05qWlhOelgzUnZhMlZ1UFNSN1lXTmpaWE56Vkc5clpXNTlZQ2xjY2x4dVhIUmNkRngwWEhSY2RDNTBhR1Z1S0hKbGMxOTFjMlZ5SUQwK0lISmxjMTkxYzJWeUxtcHpiMjRvS1NsY2NseHVYSFJjZEZ4MFhIUmNkQzUwYUdWdUtHSnZaSGtnUFQ0Z2UxeHlYRzVjZEZ4MFhIUmNkRngwWEhSc1pYUWdhVzVtYjFSdmEyVnVJRDBnZTNCcFkzUjFjbVU2SUdKdlpIa3VjR2xqZEhWeVpTd2daVzFoYVd3NklHSnZaSGt1WlcxaGFXd3NJR1poYldsc2VWOXVZVzFsT2lCaWIyUjVMbVpoYldsc2VWOXVZVzFsTENCbmFYWmxibDl1WVcxbE9pQmliMlI1TG1kcGRtVnVYMjVoYldWOVhISmNibHgwWEhSY2RGeDBYSFJjZEd4bGRDQmhjM05sY25ScGIyNGdQU0JpZEc5aEtFcFRUMDR1YzNSeWFXNW5hV1o1S0h0MGIydGxia2xFT2lCaFkyTmxjM05VYjJ0bGJpd2daVzFoYVd3NklHSnZaSGt1WlcxaGFXd3NJR2xrT2lCaWIyUjVMbWxrZlNrcFhISmNibHgwWEhSY2RGeDBYSFJjZEd4bGRDQjBiMUpsYzI5c2RtVWdQU0I3YVc1bWJ6b2dleUJsZUhCcGNtVnpPaUJsZUhCcGNtVnpJSDBzSUdGemMyVnlkR2x2YmpvZ1lYTnpaWEowYVc5dUxDQnBaSEE2SUh0a2IyMWhhVzQ2SUdSdmJXRnBiaXdnY0hKdmRHOWpiMnc2SUNkUFFYVjBhQ0F5TGpBbmZTd2dhVzVtYjFSdmEyVnVPaUJwYm1adlZHOXJaVzRzSUdsdWRHVnlkMjl5YTJsdVp6b2dlMkZqWTJWemMxOTBiMnRsYmpvZ1lXTmpaWE56Vkc5clpXNHNJR1J2YldGcGJqb2daRzl0WVdsdUlIMTlYSEpjYmx4MFhIUmNkRngwWEhSY2RHTnZibk52YkdVdWJHOW5LQ2RTUlZOUFRGWkpUa2NnVkVoSlV5QlBRa3BGUTFRbkxDQjBiMUpsYzI5c2RtVXBYSEpjYmx4MFhIUmNkRngwWEhSY2RISmxjMjlzZG1Vb2RHOVNaWE52YkhabEtWeHlYRzVjZEZ4MFhIUmNkRngwZlNrdVkyRjBZMmdvY21WcVpXTjBLVnh5WEc1Y2RGeDBYSFI5WEhKY2JseDBYSFI5S1Z4eVhHNWNkSDFjY2x4dVhISmNibHgwWDNWeWJGQmhjbk5sY2loMWNtd3NJRzVoYldVcElIdGNjbHh1WEhSY2RHNWhiV1VnUFNCdVlXMWxMbkpsY0d4aFkyVW9MMXRjWEZ0ZEx5d2dKMXhjWEZ4Y1hGc25LUzV5WlhCc1lXTmxLQzliWEZ4ZFhTOHNJQ2RjWEZ4Y1hGeGRKeWxjY2x4dVhIUmNkR3hsZENCeVpXZGxlRk1nUFNBblcxeGNYRndqSmo5ZEp5QXJJRzVoYldVZ0t5QW5QU2hiWGlZalhTb3BKMXh5WEc1Y2RGeDBiR1YwSUhKbFoyVjRJRDBnYm1WM0lGSmxaMFY0Y0NoeVpXZGxlRk1wWEhKY2JseDBYSFJzWlhRZ2NtVnpkV3gwY3lBOUlISmxaMlY0TG1WNFpXTW9kWEpzS1Z4eVhHNWNkRngwYVdZZ0tISmxjM1ZzZEhNZ1BUMDlJRzUxYkd3cFhISmNibHgwWEhSY2RISmxkSFZ5YmlBbkoxeHlYRzVjZEZ4MFpXeHpaVnh5WEc1Y2RGeDBYSFJ5WlhSMWNtNGdjbVZ6ZFd4MGMxc3hYVnh5WEc1Y2RIMWNjbHh1WEhKY2JseDBMeW9xWEhKY2JseDBJQ29nVkdocGN5Qm1kVzVqZEdsdmJpQnlaV05sYVhabGN5QmhJRzFsYzNOaFoyVWdZVzVrSUdFZ2RtRnNkV1V1SUVsMElISmxjR3hwWlhNZ2RHaGxJSFpoYkhWbElIUnZJSFJvWlNCelpXNWtaWElnYjJZZ2RHaGxJRzFsYzNOaFoyVWdjbVZqWldsMlpXUmNjbHh1WEhRZ0tseHlYRzVjZENBcUlFQndZWEpoYlNBZ2UyMWxjM05oWjJWOUlDQWdiV1Z6YzJGblpTQnlaV05sYVhabFpGeHlYRzVjZENBcUlFQndZWEpoYlNBZ2UzWmhiSFZsZlNBZ0lDQWdkbUZzZFdVZ2RHOGdhVzVqYkhWa1pTQnBiaUIwYUdVZ2JtVjNJRzFsYzNOaFoyVWdkRzhnYzJWdVpGeHlYRzVjZENBcUwxeHlYRzVjZEhKbGNHeDVUV1Z6YzJGblpTaHRjMmNzSUhaaGJIVmxLU0I3WEhKY2JseDBYSFJzWlhRZ2JXVnpjMkZuWlNBOUlIdHBaRG9nYlhObkxtbGtMQ0IwZVhCbE9pQW5jbVZ6Y0c5dWMyVW5MQ0IwYnpvZ2JYTm5MbVp5YjIwc0lHWnliMjA2SUcxelp5NTBieXdnWW05a2VUb2dlMk52WkdVNklESXdNQ3dnZG1Gc2RXVTZJSFpoYkhWbGZYMWNjbHh1WEhKY2JseDBYSFIwYUdsekxtMWxjM05oWjJWQ2RYTXVjRzl6ZEUxbGMzTmhaMlVvYldWemMyRm5aU2xjY2x4dVhIUjlYSEpjYm4xY2NseHVYSEpjYmk4cUtseHlYRzRnS2lCVWJ5QmhZM1JwZG1GMFpTQjBhR2x6SUhCeWIzUnZZMjlzSUhOMGRXSXNJSFZ6YVc1bklIUm9aU0J6WVcxbElHMWxkR2h2WkNCbWIzSWdZV3hzSUhCeWIzUnZjM1IxWWk1Y2NseHVJQ29nUUhCaGNtRnRJQ0I3VlZKTUxsSjFiblJwYldWVlVreDlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dnY25WdWRHbHRaVkJ5YjNSdlUzVmlWVkpNWEhKY2JpQXFJRUJ3WVhKaGJTQWdlMDFsYzNOaFoyVXVUV1Z6YzJGblpYMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlkWE5RYjNOMFRXVnpjMkZuWlNBZ0lDQWdZMjl1Wm1sbmRYSmhkR2x2Ymx4eVhHNGdLaUJBY0dGeVlXMGdJSHRRY205MGIxTjBkV0pFWlhOamNtbHdkRzl5TGtOdmJtWnBaM1Z5WVhScGIyNUVZWFJoVEdsemRIMGdZMjl1Wm1sbmRYSmhkR2x2YmlBZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2NseHVJQ29nUUhKbGRIVnliaUI3VDJKcVpXTjBmU0JQWW1wbFkzUWdkMmwwYUNCdVlXMWxJR0Z1WkNCcGJuTjBZVzVqWlNCdlppQlFjbTkwYjFOMGRXSmNjbHh1SUNvdlhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElHWjFibU4wYVc5dUlHRmpkR2wyWVhSbEtIVnliQ3dnWW5WekxDQmpiMjVtYVdjcElIdGNjbHh1WEhSeVpYUjFjbTRnZTF4eVhHNWNkRngwYm1GdFpUb2dKMGxOVTBsWFVISnZlSGxUZEhWaUp5eGNjbHh1WEhSY2RHbHVjM1JoYm1ObE9pQnVaWGNnU1UxVFNWZFFjbTk0ZVZOMGRXSW9kWEpzTENCaWRYTXNJR052Ym1acFp5bGNjbHh1WEhSOVhISmNibjFjY2x4dVhISmNibHh1WEc1Y2JpOHZJRmRGUWxCQlEwc2dSazlQVkVWU0lDOHZYRzR2THlBdUx5NHVMMlJsZGkxd2NtOTBiM04wZFdKekwzTnlZeTlwWkhCd2NtOTRlUzl6YVhBdWNtVjBhR2x1YXkxd2NtOXFaV04wTG1WMUwwbE5VMGxYVUhKdmVIbFRkSFZpTG1sa2NDNXFjeUpkTENKemIzVnlZMlZTYjI5MElqb2lJbjA9XG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMFxuIik7CgovKioqLyB9KQovKioqKioqLyBdKVsiZGVmYXVsdCJdOwp9KTs=",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "22.70",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "constraints": {
      "browser": true,
      "onlyAccessToken": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "22.70",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "EdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "0.50",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "582a5e03d757035ff408e0cefba2c3e64",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "EdpIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "edpdistribuicao.pt",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "17.40",
    "description": "IDPProxy for EDP Distribuição IDP",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "58c9e486c9a492fd9f1e0d5d3f5dd39f6",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "edpdistribuicao.pt",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MobieIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "mobie.pt",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "12.70",
    "description": "IDPProxy for Mobi.e plataform",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "59f507ef6489fb23385c0d18eaa5aa4bf",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "mobie.pt",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}