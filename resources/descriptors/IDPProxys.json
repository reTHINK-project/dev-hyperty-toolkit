{
  "FacebookIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = activate;\n\nvar _OAUTH = __webpack_require__(1);\n\nvar _Facebook = __webpack_require__(2);\n\nvar _AbstractIdpProxyStub = __webpack_require__(3);\n\nvar _AbstractIdpProxyStub2 = _interopRequireDefault(_AbstractIdpProxyStub);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n//import {facebookInfo} from \"./FacebookInfo\"\n\n\n/**\r\n* Google Identity Provider Proxy Protocol Stub\r\n*/\nvar FacebookIdpProxyProtoStub = function (_AbstractIdpProxyProt) {\n  _inherits(FacebookIdpProxyProtoStub, _AbstractIdpProxyProt);\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function FacebookIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, FacebookIdpProxyProtoStub);\n\n    config.idpUrl = 'domain-idp://facebook.com';\n    config.domain = 'facebook.com';\n    config.idpProxy = _OAUTH.IdpProxy;\n    //     config.idpInfo = facebookInfo;\n    config.convertUserProfile = _Facebook.convertUserProfile;\n    config.userInfoEndpoint = _Facebook.userInfoEndpoint;\n    config.authorisationEndpoint = _Facebook.authorisationEndpoint;\n    config.validateAssertionEndpoint = _Facebook.validateAssertionEndpoint;\n    return _possibleConstructorReturn(this, (FacebookIdpProxyProtoStub.__proto__ || Object.getPrototypeOf(FacebookIdpProxyProtoStub)).call(this, runtimeProtoStubURL, bus, config));\n  }\n\n  return FacebookIdpProxyProtoStub;\n}(_AbstractIdpProxyStub2.default);\n\n// export default IdpProxyProtoStub;\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'FacebookIdpProxyProtoStub',\n    instance: new FacebookIdpProxyProtoStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZmFjZWJvb2svRmFjZWJvb2tJZHBQcm94eVN0dWIuaWRwLmpzP2U4ZjkiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJGYWNlYm9va0lkcFByb3h5UHJvdG9TdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsImlkcFVybCIsImRvbWFpbiIsImlkcFByb3h5IiwiSWRwUHJveHkiLCJjb252ZXJ0VXNlclByb2ZpbGUiLCJ1c2VySW5mb0VuZHBvaW50IiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludCIsIkFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIiLCJ1cmwiLCJuYW1lIiwiaW5zdGFuY2UiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQXlDd0JBLFE7O0FBekN4Qjs7QUFFQTs7QUFFQTs7Ozs7Ozs7Ozs7QUFIQTs7O0FBS0E7OztJQUdNQyx5Qjs7O0FBRUo7Ozs7Ozs7O0FBUUEscUNBQVlDLG1CQUFaLEVBQWlDQyxHQUFqQyxFQUFzQ0MsTUFBdEMsRUFBOEM7QUFBQTs7QUFDNUNBLFdBQU9DLE1BQVAsR0FBZ0IsMkJBQWhCO0FBQ0FELFdBQU9FLE1BQVAsR0FBZ0IsY0FBaEI7QUFDQUYsV0FBT0csUUFBUCxHQUFrQkMsZUFBbEI7QUFDQTtBQUNBSixXQUFPSyxrQkFBUCxHQUE0QkEsNEJBQTVCO0FBQ0FMLFdBQU9NLGdCQUFQLEdBQTBCQSwwQkFBMUI7QUFDQU4sV0FBT08scUJBQVAsR0FBK0JBLCtCQUEvQjtBQUNBUCxXQUFPUSx5QkFBUCxHQUFtQ0EsbUNBQW5DO0FBUjRDLGlKQVN0Q1YsbUJBVHNDLEVBU2pCQyxHQVRpQixFQVNaQyxNQVRZO0FBVTdDOzs7RUFwQnFDUyw4Qjs7QUF1QnhDOztBQUVBOzs7Ozs7Ozs7QUFPZSxTQUFTYixRQUFULENBQWtCYyxHQUFsQixFQUF1QlgsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTFcsVUFBTSwyQkFERDtBQUVMQyxjQUFVLElBQUlmLHlCQUFKLENBQThCYSxHQUE5QixFQUFtQ1gsR0FBbkMsRUFBd0NDLE1BQXhDO0FBRkwsR0FBUDtBQUlEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJZHBQcm94eSB9IGZyb20gXCIuLi9PQVVUSFwiXHJcbi8vaW1wb3J0IHtmYWNlYm9va0luZm99IGZyb20gXCIuL0ZhY2Vib29rSW5mb1wiXHJcbmltcG9ydCB7IGNvbnZlcnRVc2VyUHJvZmlsZSwgdXNlckluZm9FbmRwb2ludCxcclxuICAgYXV0aG9yaXNhdGlvbkVuZHBvaW50LCB2YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50IH0gZnJvbSBcIi4vRmFjZWJvb2tcIlxyXG5pbXBvcnQgQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YiBmcm9tIFwiLi4vQWJzdHJhY3RJZHBQcm94eVN0dWJcIlxyXG5cclxuLyoqXHJcbiogR29vZ2xlIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcclxuKi9cclxuY2xhc3MgRmFjZWJvb2tJZHBQcm94eVByb3RvU3R1YiBleHRlbmRzIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIge1xyXG5cclxuICAvKipcclxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXHJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxyXG4gICpcclxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XHJcbiAgICBjb25maWcuaWRwVXJsID0gJ2RvbWFpbi1pZHA6Ly9mYWNlYm9vay5jb20nO1xyXG4gICAgY29uZmlnLmRvbWFpbiA9ICdmYWNlYm9vay5jb20nO1xyXG4gICAgY29uZmlnLmlkcFByb3h5ID0gSWRwUHJveHk7XHJcbiAgICAvLyAgICAgY29uZmlnLmlkcEluZm8gPSBmYWNlYm9va0luZm87XHJcbiAgICBjb25maWcuY29udmVydFVzZXJQcm9maWxlID0gY29udmVydFVzZXJQcm9maWxlO1xyXG4gICAgY29uZmlnLnVzZXJJbmZvRW5kcG9pbnQgPSB1c2VySW5mb0VuZHBvaW50O1xyXG4gICAgY29uZmlnLmF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGF1dGhvcmlzYXRpb25FbmRwb2ludDtcclxuICAgIGNvbmZpZy52YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50ID0gdmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludDtcclxuICAgIHN1cGVyKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIGV4cG9ydCBkZWZhdWx0IElkcFByb3h5UHJvdG9TdHViO1xyXG5cclxuLyoqXHJcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxyXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnRmFjZWJvb2tJZHBQcm94eVByb3RvU3R1YicsXHJcbiAgICBpbnN0YW5jZTogbmV3IEZhY2Vib29rSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZylcclxuICB9O1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9mYWNlYm9vay9GYWNlYm9va0lkcFByb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n//let identities = {};\n//let nIdentity = 0;\n//let redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\nvar userInfoEndpoint = void 0;\nvar tokenEndpoint = void 0;\nvar authorisationEndpoint = void 0;\nvar domain = void 0;\nvar accessTokenEndpoint = void 0;\nvar accessTokenAuthorisationEndpoint = void 0;\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\nvar exchangeRefreshToken = function exchangeRefreshToken(refreshToken) {\n  var i = googleInfo;\n\n  var URL = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + refreshToken + '&grant_type=refresh_token';\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar generateAssertionWithAccessToken = function generateAssertionWithAccessToken(contents, expires, info) {\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('GET', userInfoEndpoint(info)).then(function (infoToken) {\n      console.log('[OAUTH2.generateAssertion] obtained user profile ', infoToken);\n\n      var assertion = btoa(JSON.stringify({ tokenID: info.access_token, tokenIDJSON: infoToken, publicKey: contents }));\n      console.log('[OAUTH2.generateAssertion] atob assertion:', atob(assertion));\n      var idpBundle = { domain: domain, protocol: 'OAUTH2' };\n\n      //TODO delete later the field infoToken, and delete the need in the example\n      var returnValue = { assertion: assertion, idp: idpBundle, expires: expires, userProfile: infoToken };\n\n      /*      identities[nIdentity] = returnValue;\r\n            ++nIdentity;\r\n      */\n      console.log('[OAUTH2.generateAssertion] returning: ', JSON.stringify(returnValue));\n\n      resolve(returnValue);\n    });\n  });\n};\n\nvar generateAssertionWithCodeToken = function generateAssertionWithCodeToken(contents, expires, hint) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(hint, 'code');\n\n    if (!code) reject('[OAUTH2.generateAssertionWithCode] code not returned by the authentication: ', hint);\n\n    sendHTTPRequest('POST', tokenEndpoint(code)).then(function (info) {\n\n      if (info.hasOwnProperty('access_token')) resolve(generateAssertionWithAccessToken(contents, expires, info));else reject('[OAUTH2.generateAssertionWithCode] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar getAccessTokenWithCodeToken = function getAccessTokenWithCodeToken(resources, login) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(login, 'code');\n\n    if (!code) reject('[OAUTH2.getAccessTokenWithCodeToken] code not returned by the login result: ', login);\n\n    sendHTTPRequest('POST', accessTokenEndpoint(code)).then(function (info) {\n\n      if (info.hasOwnProperty('access_token')) {\n        var expires = getExpires(info);\n        resolve(accessTokenResult(resources, info.access_token, expires, info));\n      } else reject('[OAUTH2.getAccessTokenWithCodeToken] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar getExpires = exports.getExpires = function getExpires(url) {\n  var expires = urlParser(url, 'expires_in');\n\n  if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n  return expires;\n};\n\nvar accessTokenResult = function accessTokenResult(resources, accessToken, expires, input, refresh) {\n\n  var result = { domain: domain, resources: resources, accessToken: accessToken, expires: expires, input: input };\n\n  if (refresh) result.refresh = refresh;\n\n  return result;\n};\n\n/**\r\n* Identity Provider Proxy\r\n*/\nvar IdpProxy = exports.IdpProxy = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {idpInfo}      Object information about IdP endpoints\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(config, assertion, origin) {\n    console.info('[OAUTH2.validateAssertion] assertion: ', atob(assertion));\n    userInfoEndpoint = config.userInfoEndpoint;\n    domain = config.domain;\n\n    return new Promise(function (resolve, reject) {\n      //      let i = idpInfo;\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      sendHTTPRequest('GET', config.validateAssertionEndpoint({ access_token: content.tokenID, input: content.tokenIDJSON })).then(function (result) {\n        if (JSON.stringify(result) === JSON.stringify(content.tokenIDJSON)) {\n          //        if (result.hasOwnProperty('name')) {\n          resolve({ identity: config.convertUserProfile(result).id, contents: content.publicKey });\n        } else {\n          reject('invalid');\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n  /*\r\n    refreshAssertion: (identity) => {\r\n      //console.log('PROXY:refreshAssertion:oldIdentity', identity);\r\n      let i = googleInfo;\r\n  \r\n      return new Promise(function(resolve, reject) {\r\n        if (identity.info.refreshToken) {\r\n          exchangeRefreshToken(identity.info.refreshToken).then(function(value) {\r\n            let infoTokenURL = i.userinfo + value.access_token;\r\n            sendHTTPRequest('GET', infoTokenURL).then(function(infoToken) {\r\n  \r\n              let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: identity.info.refreshToken, tokenType: identity.info.tokenType, infoToken: infoToken};\r\n              let idTokenURL = i.tokenInfo + value.id_token;\r\n  \r\n              //obtain information about the user idToken\r\n              sendHTTPRequest('GET', idTokenURL).then(function(idToken) {\r\n  \r\n                identityBundle.tokenIDJSON = idToken;\r\n                identityBundle.expires = idToken.exp;\r\n                identityBundle.email = idToken.email;\r\n  \r\n                let oldIDToken = JSON.parse(atob(identity.assertion));\r\n                let oldIdTokenSplited = oldIDToken.tokenID.split('.');\r\n                let oldDecodedIDToken = JSON.parse(atob(oldIdTokenSplited[1]));\r\n                let idNonce = oldDecodedIDToken.nonce;\r\n  \r\n                let receivedIDToken = value.id_token;\r\n                let idTokenSplited = receivedIDToken.split('.');\r\n                let decodedIDToken = JSON.parse(atob(idTokenSplited[1]));\r\n  \r\n                decodedIDToken.nonce = idNonce;\r\n                let insertedNonce = btoa(JSON.stringify(decodedIDToken));\r\n                let newIDToken = idTokenSplited[0] + '.' +\r\n                                   insertedNonce + '.' +\r\n                                   idTokenSplited[2];\r\n  \r\n                let assertion = btoa(JSON.stringify({tokenID: newIDToken, tokenIDJSON: idToken}));\r\n                let idpBundle = {domain: 'google.com', protocol: 'OIDC'};\r\n  \r\n                //TODO delete later the field infoToken, and delete the need in the example\r\n                let returnValue = {assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken};\r\n                //console.log('PROXY:refreshAssertion:newIdentity', returnValue);\r\n                resolve(returnValue);\r\n              });\r\n            });\r\n          });\r\n        }\r\n      });\r\n    },*/\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  *\r\n  * @param  {idpInfo}      Object information about IdP endpoints\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(config, contents, origin, hint) {\n    console.log('[OAUTH2.generateAssertion:config]', config);\n    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.generateAssertion:hint]', hint);\n    //    let i = idpInfo;\n    userInfoEndpoint = config.userInfoEndpoint;\n    tokenEndpoint = config.tokenEndpoint;\n    authorisationEndpoint = config.authorisationEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n\n        //        console.log('[OAUTH2.generateAssertion] NO_HINT: rejecting with requestUrl ', requestUrl);\n\n        reject({ name: 'IdPLoginError', loginUrl: authorisationEndpoint(contents) });\n      } else {\n        // the request have already been made, so idpPRoxy will try to access the user information\n        var expires = urlParser(hint, 'expires_in');\n\n        if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n        var accessToken = urlParser(hint, 'access_token');\n\n        if (accessToken) resolve(generateAssertionWithAccessToken(contents, expires, { access_token: accessToken }));else resolve(generateAssertionWithCodeToken(contents, expires, hint));\n      }\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\r\n  * Function to get an Access Token\r\n  *\r\n  * @param  {config}      Object information about IdP endpoints\r\n  * @param  {resources} Object contents includes information about the identity received\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n\n  getAccessTokenAuthorisationEndpoint: function getAccessTokenAuthorisationEndpoint(config, resources) {\n    console.log('[OAUTH2.getAccessTokenAuthorisationEndpoint:config]', config);\n    //    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    //    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.getAccessTokenAuthorisationEndpoint:resources]', resources);\n    //    let i = idpInfo;\n    accessTokenAuthorisationEndpoint = config.accessTokenAuthorisationEndpoint;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n\n      resolve(accessTokenAuthorisationEndpoint(resources));\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\r\n  * Function to get an Access Token\r\n  *\r\n  * @param  {idpInfo}      Object information about IdP endpoints\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {login} optional login result\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n\n  getAccessToken: function getAccessToken(config, resources, login) {\n    console.log('[OAUTH2.getAccessToken:config]', config);\n    //    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    //    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.getAccessToken:login]', login);\n    //    let i = idpInfo;\n    accessTokenEndpoint = config.accessTokenEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // the user is loggedin, try to extract the Access Token and its expires\n      var expires = getExpires(login);\n\n      var accessToken = urlParser(login, 'access_token');\n\n      if (accessToken) resolve(accessTokenResult(resources, accessToken, expires, login));else resolve(getAccessTokenWithCodeToken(resources, login));\n    }, function (e) {\n\n      reject(e);\n    });\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvT0FVVEguanM/MDk0OSJdLCJuYW1lcyI6WyJ1c2VySW5mb0VuZHBvaW50IiwidG9rZW5FbmRwb2ludCIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsImRvbWFpbiIsImFjY2Vzc1Rva2VuRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCIsInVybFBhcnNlciIsInVybCIsIm5hbWUiLCJyZXBsYWNlIiwicmVnZXhTIiwicmVnZXgiLCJSZWdFeHAiLCJyZXN1bHRzIiwiZXhlYyIsInNlbmRIVFRQUmVxdWVzdCIsIm1ldGhvZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIlhEb21haW5SZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsImluZm8iLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwiZXhjaGFuZ2VSZWZyZXNoVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJpIiwiZ29vZ2xlSW5mbyIsIlVSTCIsImNsaWVudElEIiwiY2xpZW50U2VjcmV0IiwidGhlbiIsImVycm9yIiwiZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4iLCJjb250ZW50cyIsImV4cGlyZXMiLCJpbmZvVG9rZW4iLCJjb25zb2xlIiwibG9nIiwiYXNzZXJ0aW9uIiwiYnRvYSIsInN0cmluZ2lmeSIsInRva2VuSUQiLCJhY2Nlc3NfdG9rZW4iLCJ0b2tlbklESlNPTiIsInB1YmxpY0tleSIsImF0b2IiLCJpZHBCdW5kbGUiLCJwcm90b2NvbCIsInJldHVyblZhbHVlIiwiaWRwIiwidXNlclByb2ZpbGUiLCJnZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlVG9rZW4iLCJoaW50IiwiY29kZSIsImhhc093blByb3BlcnR5IiwiZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuIiwicmVzb3VyY2VzIiwibG9naW4iLCJnZXRFeHBpcmVzIiwiYWNjZXNzVG9rZW5SZXN1bHQiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwiYWNjZXNzVG9rZW4iLCJpbnB1dCIsInJlZnJlc2giLCJyZXN1bHQiLCJJZHBQcm94eSIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiY29uZmlnIiwib3JpZ2luIiwiZGVjb2RlZENvbnRlbnQiLCJjb250ZW50IiwidmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludCIsImlkZW50aXR5IiwiY29udmVydFVzZXJQcm9maWxlIiwiaWQiLCJjYXRjaCIsImVyciIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiX3RoaXMiLCJsb2dpblVybCIsImdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwiZ2V0QWNjZXNzVG9rZW4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlBLHlCQUFKO0FBQ0EsSUFBSUMsc0JBQUo7QUFDQSxJQUFJQyw4QkFBSjtBQUNBLElBQUlDLGVBQUo7QUFDQSxJQUFJQyw0QkFBSjtBQUNBLElBQUlDLHlDQUFKOztBQUVBO0FBQ0EsU0FBU0MsU0FBVCxDQUFtQkMsR0FBbkIsRUFBd0JDLElBQXhCLEVBQThCO0FBQzVCQSxTQUFPQSxLQUFLQyxPQUFMLENBQWEsTUFBYixFQUFxQixNQUFyQixFQUE2QkEsT0FBN0IsQ0FBcUMsTUFBckMsRUFBNkMsTUFBN0MsQ0FBUDtBQUNBLE1BQUlDLFNBQVMsWUFBWUYsSUFBWixHQUFtQixXQUFoQztBQUNBLE1BQUlHLFFBQVEsSUFBSUMsTUFBSixDQUFXRixNQUFYLENBQVo7QUFDQSxNQUFJRyxVQUFVRixNQUFNRyxJQUFOLENBQVdQLEdBQVgsQ0FBZDtBQUNBLE1BQUlNLFlBQVksSUFBaEIsRUFDRSxPQUFPLEVBQVAsQ0FERixLQUdFLE9BQU9BLFFBQVEsQ0FBUixDQUFQO0FBQ0g7O0FBRUQsU0FBU0UsZUFBVCxDQUF5QkMsTUFBekIsRUFBaUNU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QztBQUNBLFVBQUlxQixVQUFVd0IsV0FBV0QsS0FBWCxDQUFkOztBQUVBLFVBQUlPLGNBQWNwRSxVQUFVNkQsS0FBVixFQUFpQixjQUFqQixDQUFsQjs7QUFFQSxVQUFJTyxXQUFKLEVBQWlCcEQsUUFBUytDLGtCQUFrQkgsU0FBbEIsRUFBNkJRLFdBQTdCLEVBQTBDOUIsT0FBMUMsRUFBbUR1QixLQUFuRCxDQUFULEVBQWpCLEtBQ0s3QyxRQUFTMkMsNEJBQTRCQyxTQUE1QixFQUF1Q0MsS0FBdkMsQ0FBVDtBQUNSLEtBUk0sRUFRSixVQUFVMUMsQ0FBVixFQUFhOztBQUVkRixhQUFPRSxDQUFQO0FBQ0QsS0FYTSxDQUFQO0FBWUQ7O0FBOUxtQixDQUFmIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLy9sZXQgaWRlbnRpdGllcyA9IHt9O1xyXG4vL2xldCBuSWRlbnRpdHkgPSAwO1xyXG4vL2xldCByZWRpcmVjdFVSSSA9IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgIT09ICcnID8gJzonICsgbG9jYXRpb24ucG9ydCA6ICcnKTtcclxubGV0IHVzZXJJbmZvRW5kcG9pbnQ7XHJcbmxldCB0b2tlbkVuZHBvaW50O1xyXG5sZXQgYXV0aG9yaXNhdGlvbkVuZHBvaW50O1xyXG5sZXQgZG9tYWluO1xyXG5sZXQgYWNjZXNzVG9rZW5FbmRwb2ludDtcclxubGV0IGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50O1xyXG5cclxuLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzXHJcbmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHtcclxuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXFxcXScpO1xyXG4gIGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJztcclxuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4Uyk7XHJcbiAgbGV0IHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XHJcbiAgaWYgKHJlc3VsdHMgPT09IG51bGwpXHJcbiAgICByZXR1cm4gJyc7XHJcbiAgZWxzZVxyXG4gICAgcmV0dXJuIHJlc3VsdHNbMV07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkge1xyXG4gIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XHJcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuXHJcbiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLlxyXG4gICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XHJcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLlxyXG4gICAgeGhyID0gbnVsbDtcclxuICB9XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGlmICh4aHIpIHtcclxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmZvID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7XHJcbiAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgeGhyLnNlbmQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmxldCBleGNoYW5nZVJlZnJlc2hUb2tlbiA9IChmdW5jdGlvbiAocmVmcmVzaFRva2VuKSB7XHJcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xyXG5cclxuICBsZXQgVVJMID0gaS50b2tlbkVuZHBvaW50ICsgJ2NsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZnJlc2hfdG9rZW49JyArIHJlZnJlc2hUb2tlbiArICcmZ3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuJztcclxuXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbiAoaW5mbykge1xyXG4gICAgICByZXNvbHZlKGluZm8pO1xyXG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxubGV0IGdlbmVyYXRlQXNzZXJ0aW9uV2l0aEFjY2Vzc1Rva2VuID0gKCBmdW5jdGlvbiAoY29udGVudHMsIGV4cGlyZXMsIGluZm8pIHtcclxuXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgdXNlckluZm9FbmRwb2ludChpbmZvKSkudGhlbihmdW5jdGlvbiAoaW5mb1Rva2VuKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uXSBvYnRhaW5lZCB1c2VyIHByb2ZpbGUgJywgaW5mb1Rva2VuKTtcclxuXHJcbiAgICAgIGxldCBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHsgdG9rZW5JRDogaW5mby5hY2Nlc3NfdG9rZW4sIHRva2VuSURKU09OOiBpbmZvVG9rZW4sIHB1YmxpY0tleTogY29udGVudHMgfSkpO1xyXG4gICAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbl0gYXRvYiBhc3NlcnRpb246JywgYXRvYihhc3NlcnRpb24pKTtcclxuICAgICAgbGV0IGlkcEJ1bmRsZSA9IHsgZG9tYWluOiBkb21haW4sIHByb3RvY29sOiAnT0FVVEgyJyB9O1xyXG5cclxuICAgICAgLy9UT0RPIGRlbGV0ZSBsYXRlciB0aGUgZmllbGQgaW5mb1Rva2VuLCBhbmQgZGVsZXRlIHRoZSBuZWVkIGluIHRoZSBleGFtcGxlXHJcbiAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHsgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBleHBpcmVzOiBleHBpcmVzLCB1c2VyUHJvZmlsZTogaW5mb1Rva2VuIH07XHJcblxyXG4vKiAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xyXG4gICAgICArK25JZGVudGl0eTtcclxuKi9cclxuICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIHJldHVybmluZzogJywgSlNPTi5zdHJpbmdpZnkocmV0dXJuVmFsdWUpKTtcclxuXHJcbiAgICAgIHJlc29sdmUocmV0dXJuVmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxubGV0IGdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVUb2tlbiA9IChmdW5jdGlvbiAoIGNvbnRlbnRzLCBleHBpcmVzLCBoaW50KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGxldCBjb2RlID0gdXJsUGFyc2VyKGhpbnQsICdjb2RlJyk7XHJcblxyXG4gICAgaWYgKCFjb2RlKSByZWplY3QoJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25XaXRoQ29kZV0gY29kZSBub3QgcmV0dXJuZWQgYnkgdGhlIGF1dGhlbnRpY2F0aW9uOiAnLCBoaW50KTtcclxuXHJcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIHRva2VuRW5kcG9pbnQoY29kZSkpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcclxuXHJcbiAgICAgICAgaWYgKGluZm8uaGFzT3duUHJvcGVydHkoJ2FjY2Vzc190b2tlbicpKSBcclxuICAgICAgICAgIHJlc29sdmUoZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4oIGNvbnRlbnRzLCBleHBpcmVzLCBpbmZvKSApO1xyXG4gICAgICAgIGVsc2UgcmVqZWN0KCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVdIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAnLCBpbmZvKTtcclxuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgfSk7XHJcblxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmxldCBnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4gPSAoZnVuY3Rpb24gKHJlc291cmNlcywgbG9naW4pIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgbGV0IGNvZGUgPSB1cmxQYXJzZXIobG9naW4sICdjb2RlJyk7XHJcblxyXG4gICAgaWYgKCFjb2RlKSByZWplY3QoJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuXSBjb2RlIG5vdCByZXR1cm5lZCBieSB0aGUgbG9naW4gcmVzdWx0OiAnLCBsb2dpbik7XHJcblxyXG4gICAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBhY2Nlc3NUb2tlbkVuZHBvaW50KGNvZGUpKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XHJcblxyXG4gICAgICAgIGlmIChpbmZvLmhhc093blByb3BlcnR5KCdhY2Nlc3NfdG9rZW4nKSkge1xyXG4gICAgICAgICAgbGV0IGV4cGlyZXMgPSBnZXRFeHBpcmVzKGluZm8pO1xyXG4gICAgICAgICAgcmVzb2x2ZSAoYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBpbmZvLmFjY2Vzc190b2tlbiwgZXhwaXJlcywgaW5mbykpO1xyXG4gICAgICAgIH0gZWxzZSByZWplY3QoJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuXSBhY2Nlc3MgdG9rZW4gbm90IHJldHVybmVkIGluIHRoZSBleGNoYW5nZSBjb2RlIHJlc3VsdDogJywgaW5mbyk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgIH0pO1xyXG5cclxuICB9KTtcclxufSk7XHJcblxyXG5leHBvcnQgbGV0IGdldEV4cGlyZXMgPSAoZnVuY3Rpb24gKHVybCkge1xyXG4gIGxldCBleHBpcmVzID0gdXJsUGFyc2VyKHVybCwgJ2V4cGlyZXNfaW4nKTtcclxuXHJcbiAgaWYgKGV4cGlyZXMpIGV4cGlyZXMgPSBleHBpcmVzICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgZWxzZSBleHBpcmVzID0gMzE1MzYwMDAwMCArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG5cclxuICByZXR1cm4gZXhwaXJlcztcclxuXHJcbn0pO1xyXG5cclxuXHJcbmxldCBhY2Nlc3NUb2tlblJlc3VsdCA9IChmdW5jdGlvbiAocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgaW5wdXQsIHJlZnJlc2gpIHtcclxuXHJcbiAgbGV0IHJlc3VsdCA9IHsgZG9tYWluOiBkb21haW4sIHJlc291cmNlczogcmVzb3VyY2VzLCBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4sIGV4cGlyZXM6IGV4cGlyZXMsIGlucHV0OiBpbnB1dCB9O1xyXG5cclxuICBpZiAocmVmcmVzaCkgcmVzdWx0LnJlZnJlc2ggPSByZWZyZXNoO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG5cclxufSk7XHJcblxyXG4vKipcclxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eVxyXG4qL1xyXG5leHBvcnQgbGV0IElkcFByb3h5ID0ge1xyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxyXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcclxuICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBpZGVudGl0eSBhc3NlcnRpb24gdmFsaWRhdGlvbiByZXN1bHRcclxuICAqL1xyXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoY29uZmlnLCBhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xyXG4gICAgY29uc29sZS5pbmZvKCdbT0FVVEgyLnZhbGlkYXRlQXNzZXJ0aW9uXSBhc3NlcnRpb246ICcsIGF0b2IoYXNzZXJ0aW9uKSk7XHJcbiAgICB1c2VySW5mb0VuZHBvaW50ID0gY29uZmlnLnVzZXJJbmZvRW5kcG9pbnQ7XHJcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbi8vICAgICAgbGV0IGkgPSBpZHBJbmZvO1xyXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XHJcbiAgICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7XHJcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgY29uZmlnLnZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQoe2FjY2Vzc190b2tlbjogY29udGVudC50b2tlbklELCBpbnB1dDogY29udGVudC50b2tlbklESlNPTiB9KSkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShyZXN1bHQpID09PSBKU09OLnN0cmluZ2lmeShjb250ZW50LnRva2VuSURKU09OKSkge1xyXG4gICAgICAgICAgLy8gICAgICAgIGlmIChyZXN1bHQuaGFzT3duUHJvcGVydHkoJ25hbWUnKSkge1xyXG4gICAgICAgICAgcmVzb2x2ZSh7IGlkZW50aXR5OiBjb25maWcuY29udmVydFVzZXJQcm9maWxlKHJlc3VsdCkuaWQsIGNvbnRlbnRzOiBjb250ZW50LnB1YmxpY0tleSB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdpbnZhbGlkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgLypcclxuICAgIHJlZnJlc2hBc3NlcnRpb246IChpZGVudGl0eSkgPT4ge1xyXG4gICAgICAvL2NvbnNvbGUubG9nKCdQUk9YWTpyZWZyZXNoQXNzZXJ0aW9uOm9sZElkZW50aXR5JywgaWRlbnRpdHkpO1xyXG4gICAgICBsZXQgaSA9IGdvb2dsZUluZm87XHJcbiAgXHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBpZiAoaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4pIHtcclxuICAgICAgICAgIGV4Y2hhbmdlUmVmcmVzaFRva2VuKGlkZW50aXR5LmluZm8ucmVmcmVzaFRva2VuKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuO1xyXG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcclxuICBcclxuICAgICAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7YWNjZXNzVG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgaWRUb2tlbjogdmFsdWUuaWRfdG9rZW4sIHJlZnJlc2hUb2tlbjogaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4sIHRva2VuVHlwZTogaWRlbnRpdHkuaW5mby50b2tlblR5cGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcclxuICAgICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XHJcbiAgXHJcbiAgICAgICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgaWRUb2tlblxyXG4gICAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XHJcbiAgXHJcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS50b2tlbklESlNPTiA9IGlkVG9rZW47XHJcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbi5leHA7XHJcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5lbWFpbCA9IGlkVG9rZW4uZW1haWw7XHJcbiAgXHJcbiAgICAgICAgICAgICAgICBsZXQgb2xkSURUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZGVudGl0eS5hc3NlcnRpb24pKTtcclxuICAgICAgICAgICAgICAgIGxldCBvbGRJZFRva2VuU3BsaXRlZCA9IG9sZElEVG9rZW4udG9rZW5JRC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG9sZERlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKG9sZElkVG9rZW5TcGxpdGVkWzFdKSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWROb25jZSA9IG9sZERlY29kZWRJRFRva2VuLm5vbmNlO1xyXG4gIFxyXG4gICAgICAgICAgICAgICAgbGV0IHJlY2VpdmVkSURUb2tlbiA9IHZhbHVlLmlkX3Rva2VuO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gcmVjZWl2ZWRJRFRva2VuLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcclxuICBcclxuICAgICAgICAgICAgICAgIGRlY29kZWRJRFRva2VuLm5vbmNlID0gaWROb25jZTtcclxuICAgICAgICAgICAgICAgIGxldCBpbnNlcnRlZE5vbmNlID0gYnRvYShKU09OLnN0cmluZ2lmeShkZWNvZGVkSURUb2tlbikpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG5ld0lEVG9rZW4gPSBpZFRva2VuU3BsaXRlZFswXSArICcuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWROb25jZSArICcuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRUb2tlblNwbGl0ZWRbMl07XHJcbiAgXHJcbiAgICAgICAgICAgICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogbmV3SURUb2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ2dvb2dsZS5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcclxuICBcclxuICAgICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxyXG4gICAgICAgICAgICAgICAgbGV0IHJldHVyblZhbHVlID0ge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246bmV3SWRlbnRpdHknLCByZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSwqL1xyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcclxuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXHJcbiAgKi9cclxuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbmZpZywgY29udGVudHMsIG9yaWdpbiwgaGludCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29uZmlnXScsIGNvbmZpZyk7XHJcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XHJcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcclxuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmhpbnRdJywgaGludCk7XHJcbi8vICAgIGxldCBpID0gaWRwSW5mbztcclxuICAgIHVzZXJJbmZvRW5kcG9pbnQgPSBjb25maWcudXNlckluZm9FbmRwb2ludDtcclxuICAgIHRva2VuRW5kcG9pbnQgPSBjb25maWcudG9rZW5FbmRwb2ludDtcclxuICAgIGF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGNvbmZpZy5hdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XHJcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xyXG5cclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgaWYgKCFoaW50KSB7XHJcblxyXG4vLyAgICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIE5PX0hJTlQ6IHJlamVjdGluZyB3aXRoIHJlcXVlc3RVcmwgJywgcmVxdWVzdFVybCk7XHJcblxyXG4gICAgICAgIHJlamVjdCh7IG5hbWU6ICdJZFBMb2dpbkVycm9yJywgbG9naW5Vcmw6IGF1dGhvcmlzYXRpb25FbmRwb2ludChjb250ZW50cykgfSk7XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIHRoZSByZXF1ZXN0IGhhdmUgYWxyZWFkeSBiZWVuIG1hZGUsIHNvIGlkcFBSb3h5IHdpbGwgdHJ5IHRvIGFjY2VzcyB0aGUgdXNlciBpbmZvcm1hdGlvblxyXG4gICAgICAgIGxldCBleHBpcmVzID0gdXJsUGFyc2VyKGhpbnQsICdleHBpcmVzX2luJyk7XHJcblxyXG4gICAgICAgIGlmIChleHBpcmVzKSBleHBpcmVzID0gZXhwaXJlcyArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgIGVsc2UgZXhwaXJlcyA9IDMxNTM2MDAwMDAgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcclxuXHJcbiAgICAgICAgbGV0IGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTtcclxuXHJcbiAgICAgICAgaWYgKGFjY2Vzc1Rva2VuKSByZXNvbHZlKCBnZW5lcmF0ZUFzc2VydGlvbldpdGhBY2Nlc3NUb2tlbihjb250ZW50cywgZXhwaXJlcyx7YWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbn0gKSApO1xyXG4gICAgICAgIGVsc2UgcmVzb2x2ZSggZ2VuZXJhdGVBc3NlcnRpb25XaXRoQ29kZVRva2VuKGNvbnRlbnRzLCBleHBpcmVzLCBoaW50KSApO1xyXG4gICAgICB9XHJcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgcmVqZWN0KGUpO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byBnZXQgYW4gQWNjZXNzIFRva2VuXHJcbiAgKlxyXG4gICogQHBhcmFtICB7Y29uZmlnfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXHJcbiAgKiBAcGFyYW0gIHtyZXNvdXJjZXN9IE9iamVjdCBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXHJcbiAgKi9cclxuXHJcbiAgZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6IChjb25maWcsIHJlc291cmNlcykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6Y29uZmlnXScsIGNvbmZpZyk7XHJcbi8vICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcclxuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XHJcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDpyZXNvdXJjZXNdJywgcmVzb3VyY2VzKTtcclxuLy8gICAgbGV0IGkgPSBpZHBJbmZvO1xyXG4gICAgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgICByZXNvbHZlKCBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChyZXNvdXJjZXMpKTtcclxuXHJcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgcmVqZWN0KGUpO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuICBcclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cclxuICAqXHJcbiAgKiBAcGFyYW0gIHtpZHBJbmZvfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXHJcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHBhcmFtICB7bG9naW59IG9wdGlvbmFsIGxvZ2luIHJlc3VsdFxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cclxuICAqL1xyXG5cclxuICBnZXRBY2Nlc3NUb2tlbjogKGNvbmZpZywgcmVzb3VyY2VzLCBsb2dpbikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW46Y29uZmlnXScsIGNvbmZpZyk7XHJcbi8vICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcclxuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XHJcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbjpsb2dpbl0nLCBsb2dpbik7XHJcbi8vICAgIGxldCBpID0gaWRwSW5mbztcclxuICAgIGFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5FbmRwb2ludDtcclxuICAgIGRvbWFpbiA9IGNvbmZpZy5kb21haW47XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIC8vIHRoZSB1c2VyIGlzIGxvZ2dlZGluLCB0cnkgdG8gZXh0cmFjdCB0aGUgQWNjZXNzIFRva2VuIGFuZCBpdHMgZXhwaXJlc1xyXG4gICAgICAgIGxldCBleHBpcmVzID0gZ2V0RXhwaXJlcyhsb2dpbik7XHJcblxyXG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihsb2dpbiwgJ2FjY2Vzc190b2tlbicpO1xyXG5cclxuICAgICAgICBpZiAoYWNjZXNzVG9rZW4pIHJlc29sdmUoIGFjY2Vzc1Rva2VuUmVzdWx0KHJlc291cmNlcywgYWNjZXNzVG9rZW4sIGV4cGlyZXMsIGxvZ2luKSApO1xyXG4gICAgICAgIGVsc2UgcmVzb2x2ZSggZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuKHJlc291cmNlcywgbG9naW4pICk7XHJcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgcmVqZWN0KGUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcblxyXG59O1xyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L09BVVRILmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertUserProfile = convertUserProfile;\nexports.userInfoEndpoint = userInfoEndpoint;\nexports.authorisationEndpoint = authorisationEndpoint;\nexports.validateAssertionEndpoint = validateAssertionEndpoint;\n\n/*\r\n\tSo that an application can use Facebook's OAuth 2.0 authentication system for user login,\r\n  first is required to set up a project in the Facebook Developers Console (https://developers.facebook.com/apps/) \r\n  to obtain OAuth 2.0 credentials and set a redirect URI.\r\n */\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\nvar facebookInfo = {\n  \"clientID\": \"516850078685290\",\n  \"authorisationEndpoint\": \"https://www.facebook.com/v2.11/dialog/oauth?\",\n  \"userinfo\": \"https://graph.facebook.com/v2.2/me/?fields=id,first_name,last_name,name,picture,email&access_token=\",\n  \"type\": \"token\",\n  \"granted_scopes\": \"email,public_profile\",\n  \"state\": \"state\",\n  \"domain\": \"facebook.com\"\n};\n\n// function to convert google user profile info into standard reTHINK user profile object\n\nfunction convertUserProfile(userProfile) {\n\n  console.log('[FaceboolUserProfileConverter] ', userProfile);\n  userProfile.name = userProfile.first_name + ' ' + userProfile.last_name;\n\n  userProfile.userURL = 'user://facebook.com/' + userProfile.name;\n\n  userProfile.picture = userProfile.picture.data.url;\n\n  if (!userProfile.hasOwnProperty('preferred_username')) userProfile.preferred_username = userProfile.last_name;\n\n  return userProfile;\n}\n\nfunction userInfoEndpoint(info) {\n\n  return facebookInfo.userinfo + info.access_token;\n}\n\nfunction authorisationEndpoint(nonce) {\n\n  var url = facebookInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + facebookInfo.type + '&client_id=' + facebookInfo.clientID + '&granted_scopes=' + facebookInfo.granted_scopes + '&nonce=' + nonce + '&state=' + nonce;\n  console.log('[Slack.authorisationEndpoint] ', url);\n  return url;\n}\n\nfunction validateAssertionEndpoint(info) {\n\n  return facebookInfo.userinfo + info.access_token;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZmFjZWJvb2svRmFjZWJvb2suanM/NTZiOCJdLCJuYW1lcyI6WyJjb252ZXJ0VXNlclByb2ZpbGUiLCJ1c2VySW5mb0VuZHBvaW50IiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludCIsInJlZGlyZWN0VVJJIiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsImZhY2Vib29rSW5mbyIsInVzZXJQcm9maWxlIiwiY29uc29sZSIsImxvZyIsIm5hbWUiLCJmaXJzdF9uYW1lIiwibGFzdF9uYW1lIiwidXNlclVSTCIsInBpY3R1cmUiLCJkYXRhIiwidXJsIiwiaGFzT3duUHJvcGVydHkiLCJwcmVmZXJyZWRfdXNlcm5hbWUiLCJpbmZvIiwidXNlcmluZm8iLCJhY2Nlc3NfdG9rZW4iLCJub25jZSIsInR5cGUiLCJjbGllbnRJRCIsImdyYW50ZWRfc2NvcGVzIl0sIm1hcHBpbmdzIjoiOzs7OztRQXNCZ0JBLGtCLEdBQUFBLGtCO1FBa0JBQyxnQixHQUFBQSxnQjtRQU1BQyxxQixHQUFBQSxxQjtRQWFBQyx5QixHQUFBQSx5Qjs7QUExRGhCOzs7OztBQUtBLElBQUlDLGNBQWNDLFNBQVNDLFFBQVQsR0FBb0IsSUFBcEIsR0FBMkJELFNBQVNFLFFBQXBDLElBQWdERixTQUFTRyxJQUFULEtBQWtCLEVBQWxCLEdBQXVCLE1BQU1ILFNBQVNHLElBQXRDLEdBQTZDLEVBQTdGLENBQWxCOztBQUVBLElBQUlDLGVBQWU7QUFDakIsY0FBd0IsaUJBRFA7QUFFakIsMkJBQXlCLDhDQUZSO0FBR2pCLGNBQXlCLHFHQUhSO0FBSWpCLFVBQXlCLE9BSlI7QUFLakIsb0JBQXlCLHNCQUxSO0FBTWpCLFdBQXlCLE9BTlI7QUFPakIsWUFBeUI7QUFQUixDQUFuQjs7QUFZQTs7QUFFTyxTQUFTVCxrQkFBVCxDQUE0QlUsV0FBNUIsRUFBeUM7O0FBRTlDQyxVQUFRQyxHQUFSLENBQVksaUNBQVosRUFBK0NGLFdBQS9DO0FBQ0FBLGNBQVlHLElBQVosR0FBbUJILFlBQVlJLFVBQVosR0FBeUIsR0FBekIsR0FBK0JKLFlBQVlLLFNBQTlEOztBQUVBTCxjQUFZTSxPQUFaLEdBQXNCLHlCQUF5Qk4sWUFBWUcsSUFBM0Q7O0FBRUFILGNBQVlPLE9BQVosR0FBc0JQLFlBQVlPLE9BQVosQ0FBb0JDLElBQXBCLENBQXlCQyxHQUEvQzs7QUFFQSxNQUFJLENBQUNULFlBQVlVLGNBQVosQ0FBMkIsb0JBQTNCLENBQUwsRUFDQVYsWUFBWVcsa0JBQVosR0FBaUNYLFlBQVlLLFNBQTdDOztBQUdBLFNBQU9MLFdBQVA7QUFDRDs7QUFJTSxTQUFTVCxnQkFBVCxDQUEwQnFCLElBQTFCLEVBQWdDOztBQUVyQyxTQUFPYixhQUFhYyxRQUFiLEdBQXdCRCxLQUFLRSxZQUFwQztBQUVEOztBQUVNLFNBQVN0QixxQkFBVCxDQUErQnVCLEtBQS9CLEVBQXNDOztBQUUzQyxNQUFJTixNQUFNVixhQUFhUCxxQkFBYixHQUNOLGVBRE0sR0FDWUUsV0FEWixHQUVOLGlCQUZNLEdBRWNLLGFBQWFpQixJQUYzQixHQUdOLGFBSE0sR0FHVWpCLGFBQWFrQixRQUh2QixHQUlOLGtCQUpNLEdBSWVsQixhQUFhbUIsY0FKNUIsR0FLTixTQUxNLEdBS01ILEtBTE4sR0FNTixTQU5NLEdBTU1BLEtBTmhCO0FBT0FkLFVBQVFDLEdBQVIsQ0FBWSxnQ0FBWixFQUE4Q08sR0FBOUM7QUFDQSxTQUFPQSxHQUFQO0FBQ0Q7O0FBRU0sU0FBU2hCLHlCQUFULENBQW1DbUIsSUFBbkMsRUFBeUM7O0FBRTlDLFNBQU9iLGFBQWFjLFFBQWIsR0FBd0JELEtBQUtFLFlBQXBDO0FBRUQiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4vKlxyXG5cdFNvIHRoYXQgYW4gYXBwbGljYXRpb24gY2FuIHVzZSBGYWNlYm9vaydzIE9BdXRoIDIuMCBhdXRoZW50aWNhdGlvbiBzeXN0ZW0gZm9yIHVzZXIgbG9naW4sXHJcbiAgZmlyc3QgaXMgcmVxdWlyZWQgdG8gc2V0IHVwIGEgcHJvamVjdCBpbiB0aGUgRmFjZWJvb2sgRGV2ZWxvcGVycyBDb25zb2xlIChodHRwczovL2RldmVsb3BlcnMuZmFjZWJvb2suY29tL2FwcHMvKSBcclxuICB0byBvYnRhaW4gT0F1dGggMi4wIGNyZWRlbnRpYWxzIGFuZCBzZXQgYSByZWRpcmVjdCBVUkkuXHJcbiAqL1xyXG5sZXQgcmVkaXJlY3RVUkkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICE9PSAnJyA/ICc6JyArIGxvY2F0aW9uLnBvcnQgOiAnJyk7XHJcblxyXG5sZXQgZmFjZWJvb2tJbmZvID0ge1xyXG4gIFwiY2xpZW50SURcIjogICAgICAgICAgICAgXCI1MTY4NTAwNzg2ODUyOTBcIixcclxuICBcImF1dGhvcmlzYXRpb25FbmRwb2ludFwiOiBcImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS92Mi4xMS9kaWFsb2cvb2F1dGg/XCIsXHJcbiAgXCJ1c2VyaW5mb1wiOiAgICAgICAgICAgICAgXCJodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS92Mi4yL21lLz9maWVsZHM9aWQsZmlyc3RfbmFtZSxsYXN0X25hbWUsbmFtZSxwaWN0dXJlLGVtYWlsJmFjY2Vzc190b2tlbj1cIixcclxuICBcInR5cGVcIjogICAgICAgICAgICAgICAgICBcInRva2VuXCIsXHJcbiAgXCJncmFudGVkX3Njb3Blc1wiOiAgICAgICAgXCJlbWFpbCxwdWJsaWNfcHJvZmlsZVwiLFxyXG4gIFwic3RhdGVcIjogICAgICAgICAgICAgICAgIFwic3RhdGVcIixcclxuICBcImRvbWFpblwiOiAgICAgICAgICAgICAgICBcImZhY2Vib29rLmNvbVwiXHJcbn07XHJcblxyXG5cclxuXHJcbi8vIGZ1bmN0aW9uIHRvIGNvbnZlcnQgZ29vZ2xlIHVzZXIgcHJvZmlsZSBpbmZvIGludG8gc3RhbmRhcmQgcmVUSElOSyB1c2VyIHByb2ZpbGUgb2JqZWN0XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFVzZXJQcm9maWxlKHVzZXJQcm9maWxlKSB7XHJcblxyXG4gIGNvbnNvbGUubG9nKCdbRmFjZWJvb2xVc2VyUHJvZmlsZUNvbnZlcnRlcl0gJywgdXNlclByb2ZpbGUgKTtcclxuICB1c2VyUHJvZmlsZS5uYW1lID0gdXNlclByb2ZpbGUuZmlyc3RfbmFtZSArICcgJyArIHVzZXJQcm9maWxlLmxhc3RfbmFtZTtcclxuXHJcbiAgdXNlclByb2ZpbGUudXNlclVSTCA9ICd1c2VyOi8vZmFjZWJvb2suY29tLycgKyB1c2VyUHJvZmlsZS5uYW1lO1xyXG5cclxuICB1c2VyUHJvZmlsZS5waWN0dXJlID0gdXNlclByb2ZpbGUucGljdHVyZS5kYXRhLnVybDtcclxuXHJcbiAgaWYgKCF1c2VyUHJvZmlsZS5oYXNPd25Qcm9wZXJ0eSgncHJlZmVycmVkX3VzZXJuYW1lJykpIFxyXG4gIHVzZXJQcm9maWxlLnByZWZlcnJlZF91c2VybmFtZSA9IHVzZXJQcm9maWxlLmxhc3RfbmFtZTtcclxuXHJcblxyXG4gIHJldHVybiB1c2VyUHJvZmlsZTtcclxufVxyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdXNlckluZm9FbmRwb2ludChpbmZvKSB7XHJcblxyXG4gIHJldHVybiBmYWNlYm9va0luZm8udXNlcmluZm8gKyBpbmZvLmFjY2Vzc190b2tlbjtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRob3Jpc2F0aW9uRW5kcG9pbnQobm9uY2UpIHtcclxuXHJcbiAgbGV0IHVybCA9IGZhY2Vib29rSW5mby5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgXHJcbiAgICArICdyZWRpcmVjdF91cmk9JyArIHJlZGlyZWN0VVJJXHJcbiAgICArICcmcmVzcG9uc2VfdHlwZT0nICsgZmFjZWJvb2tJbmZvLnR5cGVcclxuICAgICsgJyZjbGllbnRfaWQ9JyArIGZhY2Vib29rSW5mby5jbGllbnRJRFxyXG4gICAgKyAnJmdyYW50ZWRfc2NvcGVzPScgKyBmYWNlYm9va0luZm8uZ3JhbnRlZF9zY29wZXNcclxuICAgICsgJyZub25jZT0nICsgbm9uY2VcclxuICAgICsgJyZzdGF0ZT0nICsgbm9uY2U7XHJcbiAgY29uc29sZS5sb2coJ1tTbGFjay5hdXRob3Jpc2F0aW9uRW5kcG9pbnRdICcsIHVybCk7XHJcbiAgcmV0dXJuIHVybDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQoaW5mbykge1xyXG5cclxuICByZXR1cm4gZmFjZWJvb2tJbmZvLnVzZXJpbmZvICsgaW5mby5hY2Nlc3NfdG9rZW47XHJcblxyXG59XHJcblxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZmFjZWJvb2svRmFjZWJvb2suanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdpProxy = void 0;\nvar idpInfo = void 0;\nvar convertUserProfile = void 0;\nvar userInfoEndpoint = void 0;\nvar accessTokenInput = void 0;\n\n/**\r\n* Abstract Identity Provider Proxy Protocol Stub to be extended by real Idp Proxies\r\n*/\n\nvar AbstractIdpProxyProtoStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function AbstractIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, AbstractIdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n    IdpProxy = config.idpProxy;\n    convertUserProfile = config.convertUserProfile;\n    accessTokenInput = config.accessTokenInput;\n\n    console.log('[AbstractIdpProxy] constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === config.idpUrl) {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(AbstractIdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n      console.info('[AbstractIdpProxyProtoStub] receiving request: ', msg);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          IdpProxy.generateAssertion(_this.config, params.contents, params.origin, params.usernameHint).then(function (value) {\n\n            value.userProfile = convertUserProfile(value.userProfile);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          //       console.info('validateAssertion');\n          IdpProxy.validateAssertion(_this.config, params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          //     console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessTokenAuthorisationEndpoint':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessTokenAuthorisationEndpoint(_this.config, params.resources).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessToken(_this.config, params.resources, params.login).then(function (value) {\n            console.info('OIDC.getAccessToken result: ', value);\n            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.refreshAccessToken(_this.config, params.token).then(function (value) {\n            console.info('OIDC.refreshAccessToken result: ', value);\n            //            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n    * This function receives a message and a value. It replies the value to the sender of the message received\r\n    *\r\n    * @param  {message}   message received\r\n    * @param  {value}     value to include in the new message to send\r\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = {\n        id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value }\n      };\n\n      console.log('[AbstractIdpProxyProtoStub.replyMessage] ', message);\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[AbstractIdpProxyProtoStub.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return AbstractIdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nexports.default = AbstractIdpProxyProtoStub;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvQWJzdHJhY3RJZHBQcm94eVN0dWIuanM/MzQ2YyJdLCJuYW1lcyI6WyJJZHBQcm94eSIsImlkcEluZm8iLCJjb252ZXJ0VXNlclByb2ZpbGUiLCJ1c2VySW5mb0VuZHBvaW50IiwiYWNjZXNzVG9rZW5JbnB1dCIsIkFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiX3RoaXMiLCJtZXNzYWdlQnVzIiwiaWRwUHJveHkiLCJjb25zb2xlIiwibG9nIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsImlkcFVybCIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwicGFyYW1zIiwiYm9keSIsImluZm8iLCJtZXRob2QiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImNvbnRlbnRzIiwib3JpZ2luIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInZhbHVlIiwidXNlclByb2ZpbGUiLCJyZXBseU1lc3NhZ2UiLCJlcnJvciIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiYXNzZXJ0aW9uIiwicmVmcmVzaEFzc2VydGlvbiIsImlkZW50aXR5IiwiZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJyZXNvdXJjZXMiLCJnZXRBY2Nlc3NUb2tlbiIsImxvZ2luIiwiaW5wdXQiLCJyZWZyZXNoQWNjZXNzVG9rZW4iLCJ0b2tlbiIsIm1lc3NhZ2UiLCJpZCIsInR5cGUiLCJmcm9tIiwiY29kZSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUlBLGlCQUFKO0FBQ0EsSUFBSUMsZ0JBQUo7QUFDQSxJQUFJQywyQkFBSjtBQUNBLElBQUlDLHlCQUFKO0FBQ0EsSUFBSUMseUJBQUo7O0FBRUE7Ozs7SUFHTUMseUI7O0FBRUo7Ozs7Ozs7O0FBUUEscUNBQVlDLG1CQUFaLEVBQWlDQyxHQUFqQyxFQUFzQ0MsTUFBdEMsRUFBOEM7QUFBQTs7QUFDNUMsUUFBSUMsUUFBUSxJQUFaO0FBQ0FBLFVBQU1ILG1CQUFOLEdBQTRCQSxtQkFBNUI7QUFDQUcsVUFBTUMsVUFBTixHQUFtQkgsR0FBbkI7QUFDQUUsVUFBTUQsTUFBTixHQUFlQSxNQUFmO0FBQ0FSLGVBQVdRLE9BQU9HLFFBQWxCO0FBQ0FULHlCQUFxQk0sT0FBT04sa0JBQTVCO0FBQ0FFLHVCQUFtQkksT0FBT0osZ0JBQTFCOztBQUdBUSxZQUFRQyxHQUFSLENBQVksZ0NBQVo7O0FBRUFKLFVBQU1DLFVBQU4sQ0FBaUJJLFdBQWpCLENBQTZCLEdBQTdCLEVBQWtDLFVBQVVDLEdBQVYsRUFBZTtBQUMvQyxVQUFJQSxJQUFJQyxFQUFKLEtBQVdSLE9BQU9TLE1BQXRCLEVBQThCOztBQUU1QlIsY0FBTVMsWUFBTixDQUFtQkgsR0FBbkI7QUFDRDtBQUNGLEtBTEQ7QUFNQU4sVUFBTVUsV0FBTixDQUFrQixTQUFsQjtBQUNEOztBQUVEOzs7Ozs7Ozs7aUNBS2FKLEcsRUFBSztBQUNoQixVQUFJTixRQUFRLElBQVo7QUFDQSxVQUFJVyxTQUFTTCxJQUFJTSxJQUFKLENBQVNELE1BQXRCO0FBQ0E7QUFDQVIsY0FBUVUsSUFBUixDQUFhLGlEQUFiLEVBQWdFUCxHQUFoRTs7QUFFQSxjQUFRQSxJQUFJTSxJQUFKLENBQVNFLE1BQWpCO0FBQ0UsYUFBSyxtQkFBTDtBQUNFdkIsbUJBQVN3QixpQkFBVCxDQUEyQmYsTUFBTUQsTUFBakMsRUFBeUNZLE9BQU9LLFFBQWhELEVBQTBETCxPQUFPTSxNQUFqRSxFQUF5RU4sT0FBT08sWUFBaEYsRUFBOEZDLElBQTlGLENBQ0UsVUFBVUMsS0FBVixFQUFpQjs7QUFFZkEsa0JBQU1DLFdBQU4sR0FBb0I1QixtQkFBbUIyQixNQUFNQyxXQUF6QixDQUFwQjtBQUNBckIsa0JBQU1zQixZQUFOLENBQW1CaEIsR0FBbkIsRUFBd0JjLEtBQXhCO0FBQ0QsV0FMSCxFQU9FLFVBQVVHLEtBQVYsRUFBaUI7QUFBRXZCLGtCQUFNc0IsWUFBTixDQUFtQmhCLEdBQW5CLEVBQXdCaUIsS0FBeEI7QUFBaUMsV0FQdEQ7QUFTQTtBQUNGLGFBQUssbUJBQUw7QUFDRTtBQUNBaEMsbUJBQVNpQyxpQkFBVCxDQUEyQnhCLE1BQU1ELE1BQWpDLEVBQXlDWSxPQUFPYyxTQUFoRCxFQUEyRGQsT0FBT00sTUFBbEUsRUFBMEVFLElBQTFFLENBQ0UsVUFBVUMsS0FBVixFQUFpQjtBQUFFcEIsa0JBQU1zQixZQUFOLENBQW1CaEIsR0FBbkIsRUFBd0JjLEtBQXhCO0FBQWlDLFdBRHRELEVBR0UsVUFBVUcsS0FBVixFQUFpQjtBQUFFdkIsa0JBQU1zQixZQUFOLENBQW1CaEIsR0FBbkIsRUFBd0JpQixLQUF4QjtBQUFpQyxXQUh0RDtBQUtBO0FBQ0YsYUFBSyxrQkFBTDtBQUNFO0FBQ0FoQyxtQkFBU21DLGdCQUFULENBQTBCZixPQUFPZ0IsUUFBakMsRUFBMkNSLElBQTNDLENBQ0UsVUFBVUMsS0FBVixFQUFpQjtBQUFFcEIsa0JBQU1zQixZQUFOLENBQW1CaEIsR0FBbkIsRUFBd0JjLEtBQXhCO0FBQWlDLFdBRHRELEVBR0UsVUFBVUcsS0FBVixFQUFpQjtBQUFFdkIsa0JBQU1zQixZQUFOLENBQW1CaEIsR0FBbkIsRUFBd0JpQixLQUF4QjtBQUFpQyxXQUh0RDtBQUtBO0FBQ0YsYUFBSyxxQ0FBTDtBQUNFO0FBQ0FoQyxtQkFBU3FDLG1DQUFULENBQTZDNUIsTUFBTUQsTUFBbkQsRUFBMkRZLE9BQU9rQixTQUFsRSxFQUE2RVYsSUFBN0UsQ0FDRSxVQUFVQyxLQUFWLEVBQWlCO0FBQ2ZwQixrQkFBTXNCLFlBQU4sQ0FBbUJoQixHQUFuQixFQUF3QmMsS0FBeEI7QUFDRCxXQUhILEVBS0UsVUFBVUcsS0FBVixFQUFpQjtBQUFFdkIsa0JBQU1zQixZQUFOLENBQW1CaEIsR0FBbkIsRUFBd0JpQixLQUF4QjtBQUFpQyxXQUx0RDtBQU9BO0FBQ0YsYUFBSyxnQkFBTDtBQUNFO0FBQ0FoQyxtQkFBU3VDLGNBQVQsQ0FBd0I5QixNQUFNRCxNQUE5QixFQUFzQ1ksT0FBT2tCLFNBQTdDLEVBQXdEbEIsT0FBT29CLEtBQS9ELEVBQXNFWixJQUF0RSxDQUNFLFVBQVVDLEtBQVYsRUFBaUI7QUFDZmpCLG9CQUFRVSxJQUFSLENBQWEsOEJBQWIsRUFBNkNPLEtBQTdDO0FBQ0FBLGtCQUFNWSxLQUFOLEdBQWNyQyxpQkFBaUJ5QixNQUFNWSxLQUF2QixDQUFkO0FBQ0FoQyxrQkFBTXNCLFlBQU4sQ0FBbUJoQixHQUFuQixFQUF3QmMsS0FBeEI7QUFDRCxXQUxILEVBT0UsVUFBVUcsS0FBVixFQUFpQjtBQUFFdkIsa0JBQU1zQixZQUFOLENBQW1CaEIsR0FBbkIsRUFBd0JpQixLQUF4QjtBQUFpQyxXQVB0RDtBQVNBO0FBQ0YsYUFBSyxvQkFBTDtBQUNFO0FBQ0FoQyxtQkFBUzBDLGtCQUFULENBQTRCakMsTUFBTUQsTUFBbEMsRUFBMENZLE9BQU91QixLQUFqRCxFQUF3RGYsSUFBeEQsQ0FDRSxVQUFVQyxLQUFWLEVBQWlCO0FBQ2ZqQixvQkFBUVUsSUFBUixDQUFhLGtDQUFiLEVBQWlETyxLQUFqRDtBQUNaO0FBQ1lwQixrQkFBTXNCLFlBQU4sQ0FBbUJoQixHQUFuQixFQUF3QmMsS0FBeEI7QUFDRCxXQUxILEVBT0UsVUFBVUcsS0FBVixFQUFpQjtBQUFFdkIsa0JBQU1zQixZQUFOLENBQW1CaEIsR0FBbkIsRUFBd0JpQixLQUF4QjtBQUFpQyxXQVB0RDtBQVNBO0FBQ0Y7QUFDRTtBQS9ESjtBQWlFRDs7QUFFRDs7Ozs7Ozs7O2lDQU1hakIsRyxFQUFLYyxLLEVBQU87QUFDdkIsVUFBSXBCLFFBQVEsSUFBWjs7QUFFQSxVQUFJbUMsVUFBVTtBQUNaQyxZQUFJOUIsSUFBSThCLEVBREksRUFDQUMsTUFBTSxVQUROLEVBQ2tCOUIsSUFBSUQsSUFBSWdDLElBRDFCLEVBQ2dDQSxNQUFNaEMsSUFBSUMsRUFEMUM7QUFFWkssY0FBTSxFQUFFMkIsTUFBTSxHQUFSLEVBQWFuQixPQUFPQSxLQUFwQjtBQUZNLE9BQWQ7O0FBS0FqQixjQUFRQyxHQUFSLENBQVksMkNBQVosRUFBeUQrQixPQUF6RDs7QUFFQW5DLFlBQU1DLFVBQU4sQ0FBaUJ1QyxXQUFqQixDQUE2QkwsT0FBN0I7QUFDRDs7O2dDQUVXZixLLEVBQU9xQixNLEVBQVE7QUFDekIsVUFBSXpDLFFBQVEsSUFBWjs7QUFFQUcsY0FBUUMsR0FBUixDQUFZLHlDQUFaLEVBQXVEZ0IsS0FBdkQ7O0FBRUFwQixZQUFNMEMsTUFBTixHQUFldEIsS0FBZjs7QUFFQSxVQUFJZCxNQUFNO0FBQ1IrQixjQUFNLFFBREU7QUFFUkMsY0FBTXRDLE1BQU1ILG1CQUZKO0FBR1JVLFlBQUlQLE1BQU1ILG1CQUFOLEdBQTRCLFNBSHhCO0FBSVJlLGNBQU07QUFDSlEsaUJBQU9BO0FBREg7QUFKRSxPQUFWOztBQVNBLFVBQUlxQixNQUFKLEVBQVk7QUFDVm5DLFlBQUlNLElBQUosQ0FBUytCLElBQVQsR0FBZ0JGLE1BQWhCO0FBQ0Q7O0FBRUR6QyxZQUFNQyxVQUFOLENBQWlCdUMsV0FBakIsQ0FBNkJsQyxHQUE3QjtBQUNEOzs7Ozs7QUFHSDs7QUFFQTs7Ozs7Ozs7O2tCQU9lVix5QiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IElkcFByb3h5O1xyXG5sZXQgaWRwSW5mbztcclxubGV0IGNvbnZlcnRVc2VyUHJvZmlsZTtcclxubGV0IHVzZXJJbmZvRW5kcG9pbnQ7XHJcbmxldCBhY2Nlc3NUb2tlbklucHV0O1xyXG5cclxuLyoqXHJcbiogQWJzdHJhY3QgSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YiB0byBiZSBleHRlbmRlZCBieSByZWFsIElkcCBQcm94aWVzXHJcbiovXHJcbmNsYXNzIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIge1xyXG5cclxuICAvKipcclxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXHJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxyXG4gICpcclxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7XHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xyXG4gICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgSWRwUHJveHkgPSBjb25maWcuaWRwUHJveHk7XHJcbiAgICBjb252ZXJ0VXNlclByb2ZpbGUgPSBjb25maWcuY29udmVydFVzZXJQcm9maWxlO1xyXG4gICAgYWNjZXNzVG9rZW5JbnB1dCA9IGNvbmZpZy5hY2Nlc3NUb2tlbklucHV0O1xyXG5cclxuXHJcbiAgICBjb25zb2xlLmxvZygnW0Fic3RyYWN0SWRwUHJveHldIGNvbnN0cnVjdG9yJyk7XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgaWYgKG1zZy50byA9PT0gY29uZmlnLmlkcFVybCkge1xyXG5cclxuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xyXG4gICovXHJcbiAgcmVxdWVzdFRvSWRwKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7XHJcbiAgICAvL2NvbnNvbGUuaW5mbygncmVxdWVzdFRvSWRwOicsIG1zZy5ib2R5Lm1ldGhvZCk7XHJcbiAgICBjb25zb2xlLmluZm8oJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViXSByZWNlaXZpbmcgcmVxdWVzdDogJywgbXNnKTtcclxuXHJcbiAgICBzd2l0Y2ggKG1zZy5ib2R5Lm1ldGhvZCkge1xyXG4gICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XHJcbiAgICAgICAgSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb24oX3RoaXMuY29uZmlnLCBwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgIHZhbHVlLnVzZXJQcm9maWxlID0gY29udmVydFVzZXJQcm9maWxlKHZhbHVlLnVzZXJQcm9maWxlKTtcclxuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxyXG4gICAgICAgIC8vICAgICAgIGNvbnNvbGUuaW5mbygndmFsaWRhdGVBc3NlcnRpb24nKTtcclxuICAgICAgICBJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvbihfdGhpcy5jb25maWcsIHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOyB9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdyZWZyZXNoQXNzZXJ0aW9uJzpcclxuICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdyZWZyZXNoQXNzZXJ0aW9uJyk7XHJcbiAgICAgICAgSWRwUHJveHkucmVmcmVzaEFzc2VydGlvbihwYXJhbXMuaWRlbnRpdHkpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOyB9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCc6XHJcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygnZ2V0QWNjZXNzVG9rZW4nKTtcclxuICAgICAgICBJZHBQcm94eS5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChfdGhpcy5jb25maWcsIHBhcmFtcy5yZXNvdXJjZXMpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZ2V0QWNjZXNzVG9rZW4nOlxyXG4gICAgICAgIC8vICAgICBjb25zb2xlLmluZm8oJ2dldEFjY2Vzc1Rva2VuJyk7XHJcbiAgICAgICAgSWRwUHJveHkuZ2V0QWNjZXNzVG9rZW4oX3RoaXMuY29uZmlnLCBwYXJhbXMucmVzb3VyY2VzLCBwYXJhbXMubG9naW4pLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdPSURDLmdldEFjY2Vzc1Rva2VuIHJlc3VsdDogJywgdmFsdWUpO1xyXG4gICAgICAgICAgICB2YWx1ZS5pbnB1dCA9IGFjY2Vzc1Rva2VuSW5wdXQodmFsdWUuaW5wdXQpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XHJcbiAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdyZWZyZXNoQWNjZXNzVG9rZW4nOlxyXG4gICAgICAgIC8vICAgICBjb25zb2xlLmluZm8oJ2dldEFjY2Vzc1Rva2VuJyk7XHJcbiAgICAgICAgSWRwUHJveHkucmVmcmVzaEFjY2Vzc1Rva2VuKF90aGlzLmNvbmZpZywgcGFyYW1zLnRva2VuKS50aGVuKFxyXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnT0lEQy5yZWZyZXNoQWNjZXNzVG9rZW4gcmVzdWx0OiAnLCB2YWx1ZSk7XHJcbi8vICAgICAgICAgICAgdmFsdWUuaW5wdXQgPSBhY2Nlc3NUb2tlbklucHV0KHZhbHVlLmlucHV0KTtcclxuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqXHJcbiAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxyXG4gICovXHJcbiAgcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IG1lc3NhZ2UgPSB7XHJcbiAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxyXG4gICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHZhbHVlIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnJlcGx5TWVzc2FnZV0gJywgbWVzc2FnZSk7XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcclxuXHJcbiAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAndXBkYXRlJyxcclxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcclxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAocmVhc29uKSB7XHJcbiAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XHJcblxyXG4vKipcclxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXHJcbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvQWJzdHJhY3RJZHBQcm94eVN0dWIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "facebook.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "33.40",
    "description": "IDPProxy for Facebook idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "50ef75417b00e8340d1ddf496be07274a",
    "constraints": {
      "browser": true
    },
    "objectName": "facebook.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "GoogleIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = activate;\n\nvar _OIDC = __webpack_require__(1);\n\nvar _GoogleInfo = __webpack_require__(2);\n\nvar _GoogleConverter = __webpack_require__(3);\n\nvar _AbstractIdpProxyStub = __webpack_require__(4);\n\nvar _AbstractIdpProxyStub2 = _interopRequireDefault(_AbstractIdpProxyStub);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n* Google Identity Provider Proxy Protocol Stub\r\n*/\nvar GoogleIdpProxyProtoStub = function (_AbstractIdpProxyProt) {\n  _inherits(GoogleIdpProxyProtoStub, _AbstractIdpProxyProt);\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function GoogleIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, GoogleIdpProxyProtoStub);\n\n    config.domain = 'google.com';\n    config.idpUrl = 'domain-idp://google.com';\n    config.idpProxy = _OIDC.IdpProxy;\n    config.idpInfo = _GoogleInfo.googleInfo;\n    config.apiInfo = _GoogleInfo.googleAPIInfo;\n    config.accessTokenAuthorisationEndpoint = _GoogleInfo.accessTokenAuthorisationEndpoint;\n    config.accessTokenEndpoint = _GoogleInfo.accessTokenEndpoint;\n    config.refreshAccessTokenEndpoint = _GoogleInfo.refreshAccessTokenEndpoint;\n    config.accessTokenInput = _GoogleInfo.accessTokenInput;\n    config.authorisationEndpoint = _GoogleInfo.authorisationEndpoint;\n    config.convertUserProfile = _GoogleConverter.convertUserProfile;\n    config.mapping = _GoogleInfo.mapping;\n    return _possibleConstructorReturn(this, (GoogleIdpProxyProtoStub.__proto__ || Object.getPrototypeOf(GoogleIdpProxyProtoStub)).call(this, runtimeProtoStubURL, bus, config));\n  }\n\n  return GoogleIdpProxyProtoStub;\n}(_AbstractIdpProxyStub2.default);\n\n// export default IdpProxyProtoStub;\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'GoogleIdpProxyProtoStub',\n    instance: new GoogleIdpProxyProtoStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL0dvb2dsZUlkcFByb3h5U3R1Yi5pZHAuanM/ZWM4YSJdLCJuYW1lcyI6WyJhY3RpdmF0ZSIsIkdvb2dsZUlkcFByb3h5UHJvdG9TdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsImRvbWFpbiIsImlkcFVybCIsImlkcFByb3h5IiwiSWRwUHJveHkiLCJpZHBJbmZvIiwiZ29vZ2xlSW5mbyIsImFwaUluZm8iLCJnb29nbGVBUElJbmZvIiwiYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbkVuZHBvaW50IiwicmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbklucHV0IiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwiY29udmVydFVzZXJQcm9maWxlIiwibWFwcGluZyIsIkFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIiLCJ1cmwiLCJuYW1lIiwiaW5zdGFuY2UiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQTRDd0JBLFE7O0FBNUN4Qjs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7O0FBRUE7OztJQUdNQyx1Qjs7O0FBRUo7Ozs7Ozs7O0FBUUEsbUNBQVlDLG1CQUFaLEVBQWlDQyxHQUFqQyxFQUFzQ0MsTUFBdEMsRUFBOEM7QUFBQTs7QUFDNUNBLFdBQU9DLE1BQVAsR0FBZ0IsWUFBaEI7QUFDQUQsV0FBT0UsTUFBUCxHQUFnQix5QkFBaEI7QUFDQUYsV0FBT0csUUFBUCxHQUFrQkMsY0FBbEI7QUFDQUosV0FBT0ssT0FBUCxHQUFpQkMsc0JBQWpCO0FBQ0FOLFdBQU9PLE9BQVAsR0FBaUJDLHlCQUFqQjtBQUNBUixXQUFPUyxnQ0FBUCxHQUEwQ0EsNENBQTFDO0FBQ0FULFdBQU9VLG1CQUFQLEdBQTZCQSwrQkFBN0I7QUFDQVYsV0FBT1csMEJBQVAsR0FBb0NBLHNDQUFwQztBQUNBWCxXQUFPWSxnQkFBUCxHQUEwQkEsNEJBQTFCO0FBQ0FaLFdBQU9hLHFCQUFQLEdBQStCQSxpQ0FBL0I7QUFDQWIsV0FBT2Msa0JBQVAsR0FBNEJBLG1DQUE1QjtBQUNBZCxXQUFPZSxPQUFQLEdBQWlCQSxtQkFBakI7QUFaNEMsNklBYXRDakIsbUJBYnNDLEVBYWpCQyxHQWJpQixFQWFaQyxNQWJZO0FBYzdDOzs7RUF4Qm1DZ0IsOEI7O0FBMkJ0Qzs7QUFFQTs7Ozs7Ozs7O0FBT2UsU0FBU3BCLFFBQVQsQ0FBa0JxQixHQUFsQixFQUF1QmxCLEdBQXZCLEVBQTRCQyxNQUE1QixFQUFvQztBQUNqRCxTQUFPO0FBQ0xrQixVQUFNLHlCQUREO0FBRUxDLGNBQVUsSUFBSXRCLHVCQUFKLENBQTRCb0IsR0FBNUIsRUFBaUNsQixHQUFqQyxFQUFzQ0MsTUFBdEM7QUFGTCxHQUFQO0FBSUQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElkcFByb3h5IH0gZnJvbSBcIi4uL09JRENcIlxyXG5pbXBvcnQgeyBnb29nbGVJbmZvLCBnb29nbGVBUElJbmZvLCBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCwgYWNjZXNzVG9rZW5FbmRwb2ludCwgYXV0aG9yaXNhdGlvbkVuZHBvaW50LCBhY2Nlc3NUb2tlbklucHV0LCBtYXBwaW5nLCByZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludCB9IGZyb20gXCIuL0dvb2dsZUluZm9cIlxyXG5pbXBvcnQgeyBjb252ZXJ0VXNlclByb2ZpbGUgfSBmcm9tIFwiLi9Hb29nbGVDb252ZXJ0ZXJcIlxyXG5pbXBvcnQgQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YiBmcm9tIFwiLi4vQWJzdHJhY3RJZHBQcm94eVN0dWJcIlxyXG5cclxuLyoqXHJcbiogR29vZ2xlIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcclxuKi9cclxuY2xhc3MgR29vZ2xlSWRwUHJveHlQcm90b1N0dWIgZXh0ZW5kcyBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViIHtcclxuXHJcbiAgLyoqXHJcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxyXG4gICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgaWRwUHJveHkgcmVjZWl2ZWRcclxuICAqXHJcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAgKi9cclxuICBjb25zdHJ1Y3RvcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xyXG4gICAgY29uZmlnLmRvbWFpbiA9ICdnb29nbGUuY29tJztcclxuICAgIGNvbmZpZy5pZHBVcmwgPSAnZG9tYWluLWlkcDovL2dvb2dsZS5jb20nO1xyXG4gICAgY29uZmlnLmlkcFByb3h5ID0gSWRwUHJveHk7XHJcbiAgICBjb25maWcuaWRwSW5mbyA9IGdvb2dsZUluZm87XHJcbiAgICBjb25maWcuYXBpSW5mbyA9IGdvb2dsZUFQSUluZm87XHJcbiAgICBjb25maWcuYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDtcclxuICAgIGNvbmZpZy5hY2Nlc3NUb2tlbkVuZHBvaW50ID0gYWNjZXNzVG9rZW5FbmRwb2ludDtcclxuICAgIGNvbmZpZy5yZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludCA9IHJlZnJlc2hBY2Nlc3NUb2tlbkVuZHBvaW50O1xyXG4gICAgY29uZmlnLmFjY2Vzc1Rva2VuSW5wdXQgPSBhY2Nlc3NUb2tlbklucHV0O1xyXG4gICAgY29uZmlnLmF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGF1dGhvcmlzYXRpb25FbmRwb2ludDtcclxuICAgIGNvbmZpZy5jb252ZXJ0VXNlclByb2ZpbGUgPSBjb252ZXJ0VXNlclByb2ZpbGU7XHJcbiAgICBjb25maWcubWFwcGluZyA9IG1hcHBpbmc7XHJcbiAgICBzdXBlcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZyk7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBleHBvcnQgZGVmYXVsdCBJZHBQcm94eVByb3RvU3R1YjtcclxuXHJcbi8qKlxyXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cclxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXHJcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ0dvb2dsZUlkcFByb3h5UHJvdG9TdHViJyxcclxuICAgIGluc3RhbmNlOiBuZXcgR29vZ2xlSWRwUHJveHlQcm90b1N0dWIodXJsLCBidXMsIGNvbmZpZylcclxuICB9O1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9nb29nbGUvR29vZ2xlSWRwUHJveHlTdHViLmlkcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// import {getExpires} from './OAUTH';\n\nvar identities = {};\nvar nIdentity = 0;\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\n//let tokenEndpoint;\n//let authorisationEndpoint;\nvar accessTokenEndpoint = void 0;\nvar refreshAccessTokenEndpoint = void 0;\nvar domain = void 0;\nvar accessTokenAuthorisationEndpoint = void 0;\n\nvar getExpiresAtJSON = exports.getExpiresAtJSON = function getExpiresAtJSON(json) {\n  var expires = json.hasOwnProperty('expires_in') ? json.expires_in : false;\n\n  if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n  return Number(expires);\n};\n\nvar getExpires = exports.getExpires = function getExpires(url) {\n  var expires = urlParser(url, 'expires_in');\n\n  if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n  return Number(expires);\n};\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return false;else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\nvar getAccessTokenWithCodeToken = function getAccessTokenWithCodeToken(resources, url) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(url, 'code');\n\n    if (!code) reject('[OIDC.getAccessTokenWithCodeToken] code not include in the url: ', url);\n\n    sendHTTPRequest('POST', accessTokenEndpoint(code)).then(function (info) {\n\n      console.info('[OIDC.getAccessTokenWithCodeToken] response: ', info);\n\n      if (info.hasOwnProperty('access_token')) {\n\n        var expires = getExpiresAtJSON(info);\n        var refresh = info.hasOwnProperty('refresh_token') ? info.refresh_token : false;\n        resolve(accessTokenResult(resources, info.access_token, expires, info, refresh));\n      } else reject('[OIDC.getAccessTokenWithCodeToken] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar accessTokenResult = function accessTokenResult(resources, accessToken, expires, input, refresh) {\n\n  var result = { domain: domain, resources: resources, accessToken: accessToken, expires: expires, input: input };\n\n  if (refresh) result.refresh = refresh;\n\n  return result;\n};\n\n/**\r\n* Function to exchange the code received to the id Token, access token and a refresh token\r\n*\r\n*/\n/*let exchangeCode = (function(code) {\r\n  let i = googleInfo;\r\n\r\n  let URL = i.tokenEndpoint + 'code=' + code + '&client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' + i.redirectURI + '&grant_type=authorization_code&access_type=' + i.accessType;\r\n\r\n\r\n  return new Promise(function(resolve, reject) {\r\n    sendHTTPRequest('POST', URL).then(function(info) {\r\n      console.log('[OIDC.exchangeCode] returned info: ', info);\r\n      resolve(info);\r\n    }, function(error) {\r\n      reject(error);\r\n    });\r\n\r\n  });\r\n});\r\n\r\nlet exchangeRefreshToken = (function(refreshToken) {\r\n  let i = googleInfo;\r\n\r\n  let URL = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + refreshToken + '&grant_type=refresh_token';\r\n\r\n  return new Promise(function(resolve, reject) {\r\n    sendHTTPRequest('POST', URL).then(function(info) {\r\n      resolve(info);\r\n    }, function(error) {\r\n      reject(error);\r\n    });\r\n\r\n  });\r\n});*/\n\n/**\r\n* Identity Provider Proxy\r\n*/\nvar IdpProxy = exports.IdpProxy = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {idpInfo}      Object information about IdP endpoints\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(config, assertion, origin) {\n    console.info('[OIDC.validateAssertionProxy] assertion: ', atob(assertion));\n    //    console.info('validateAssertionProxy:atob(assertion)', atob(assertion));\n\n    //TODO check the values with the hash received\n    //  return new Promise(function(resolve,reject) {\n\n    var decodedContent2 = atob(assertion);\n    var content = JSON.parse(decodedContent2);\n    var idTokenSplited = content.tokenID.split('.');\n    var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n    //resolve({identity: idToken.email, contents: idToken.nonce});\n\n    //});\n\n    return new Promise(function (resolve, reject) {\n      var i = config.idpInfo;\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      sendHTTPRequest('GET', i.tokenInfo + content.tokenID).then(function (result) {\n        if (JSON.stringify(result) === JSON.stringify(content.tokenIDJSON)) {\n          resolve({ identity: content.tokenIDJSON.email, contents: content.tokenIDJSON });\n        } else {\n          reject('invalid');\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n\n  refreshAssertion: function refreshAssertion(identity) {\n    console.log('PROXY:refreshAssertion:oldIdentity', identity);\n    //    let i = googleInfo;\n\n    return new Promise(function (resolve, reject) {\n      /*      if (identity.info.refreshToken) {\r\n              exchangeRefreshToken(identity.info.refreshToken).then(function(value) {\r\n                let infoTokenURL = i.userinfo + value.access_token;\r\n                sendHTTPRequest('GET', infoTokenURL).then(function(infoToken) {\r\n      \r\n                  let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: identity.info.refreshToken, tokenType: identity.info.tokenType, infoToken: infoToken};\r\n                  let idTokenURL = i.tokenInfo + value.id_token;\r\n      \r\n                  //obtain information about the user idToken\r\n                  sendHTTPRequest('GET', idTokenURL).then(function(idToken) {\r\n      \r\n                    identityBundle.tokenIDJSON = idToken;\r\n                    identityBundle.expires = idToken.exp;\r\n                    identityBundle.email = idToken.email;\r\n      \r\n                    let oldIDToken = JSON.parse(atob(identity.assertion));\r\n                    let oldIdTokenSplited = oldIDToken.tokenID.split('.');\r\n                    let oldDecodedIDToken = JSON.parse(atob(oldIdTokenSplited[1]));\r\n                    let idNonce = oldDecodedIDToken.nonce;\r\n      \r\n                    let receivedIDToken = value.id_token;\r\n                    let idTokenSplited = receivedIDToken.split('.');\r\n                    let decodedIDToken = JSON.parse(atob(idTokenSplited[1]));\r\n      \r\n                    decodedIDToken.nonce = idNonce;\r\n                    let insertedNonce = btoa(JSON.stringify(decodedIDToken));\r\n                    let newIDToken = idTokenSplited[0] + '.' +\r\n                                       insertedNonce + '.' +\r\n                                       idTokenSplited[2];\r\n      \r\n                    let assertion = btoa(JSON.stringify({tokenID: newIDToken, tokenIDJSON: idToken}));\r\n                    let idpBundle = {domain: 'google.com', protocol: 'OIDC'};\r\n      \r\n                    //TODO delete later the field infoToken, and delete the need in the example\r\n                    let returnValue = {assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken};\r\n                    //console.log('PROXY:refreshAssertion:newIdentity', returnValue);\r\n                    resolve(returnValue);\r\n                  });\r\n                });\r\n              });\r\n            }*/\n      resolve(identity);\n    });\n  },\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  * TODO add details of the implementation, and improve implementation\r\n  *\r\n  * @param  {idpInfo}      Object information about IdP endpoints\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(config, contents, origin, hint) {\n    console.log('[OIDC.generateAssertion:contents]', contents);\n    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[OIDC.generateAssertion:hint]', hint);\n    var i = config.idpInfo;\n\n    //start the login phase\n    //TODO later should be defined a better approach\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n        /*try {\r\n          if (window) {\r\n            resolve('url');\r\n          }\r\n        } catch (error) {*/\n\n        var requestUrl = i.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&prompt=consent&response_type=' + i.type + '&client_id=' + i.clientID + '&scope=' + i.scope + '&access_type=' + i.accessType + '&nonce=' + contents + '&state=' + i.state;\n\n        //        let requestUrl = i.authorisationEndpoint + 'scope=' + i.scope + '&client_id=' + i.clientID + '&redirect_uri=' + i.redirectURI + '&response_type=code' + /*i.type +*/ '&state=' + i.state + '&prompt=consent&access_type=' + i.accessType + '&nonce=' + contents;\n        console.log('[OIDC.generateAssertion] NO_HINT: rejecting with requestUrl ', requestUrl);\n\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n\n        //  }\n      } else {\n        // the request have already been made, so idpPRoxy will exchange the tokens along to the idp, to obtain the information necessary\n        var accessToken = urlParser(hint, 'access_token');\n        var idToken = urlParser(hint, 'id_token');\n        var code = urlParser(hint, 'code');\n\n        //console.log('GOOGLE_PROXY_HINT: ', hint);\n\n        //       exchangeCode(code).then(function(value) {\n        //       console.log('[OIDC.generateAssertion] obtained exchanged Token ', value);\n\n        //obtain information about the user\n        //let infoTokenURL = i.userinfo + value.access_token;\n        var infoTokenURL = i.userinfo + accessToken;\n        sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n          console.log('[OIDC.generateAssertion] obtained infoToken ', infoToken);\n\n          //            let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: value.refresh_token, tokenType: value.token_type, infoToken: infoToken};\n\n          //            let idTokenURL = i.tokenInfo + value.id_token;\n          /*\r\n                      let identityBundle = {\r\n                        accessToken: accessToken,\r\n                        idToken: idToken,\r\n          //              refreshToken: value.refresh_token,\r\n                        tokenType: 'Bearer',\r\n                        infoToken: infoToken\r\n                      };*/\n\n          var idTokenURL = i.tokenInfo + idToken;\n\n          //obtain information about the user idToken\n          sendHTTPRequest('GET', idTokenURL).then(function (idTokenJSON) {\n            console.log('[OIDC.generateAssertion] obtained idToken ', idTokenJSON);\n\n            /*              identityBundle.tokenIDJSON = idTokenJSON;\r\n                          identityBundle.expires = idTokenJSON.exp;\r\n                          identityBundle.email = idTokenJSON.email;*/\n\n            var assertion = btoa(JSON.stringify({ tokenID: idToken, tokenIDJSON: idTokenJSON }));\n            var idpBundle = { domain: i.domain, protocol: 'OIDC' };\n\n            //TODO delete later the field infoToken, and delete the need in the example\n            // TODO replace \"refresh: true\" by the real refresh token\n            var returnValue = { assertion: assertion, idp: idpBundle, expires: idTokenJSON.exp, userProfile: infoToken, refresh: true };\n\n            identities[nIdentity] = returnValue;\n            ++nIdentity;\n\n            console.log('[OIDC.generateAssertion] returning: ', JSON.stringify(returnValue));\n\n            resolve(returnValue);\n          }, function (e) {\n\n            reject(e);\n          });\n        }, function (error) {\n\n          reject(error);\n        });\n        /*        }, function(err) {\r\n        \r\n                  reject(err);\r\n                });*/\n      }\n    });\n  },\n\n  /**\r\n  * Function to get an Access Token endpoint\r\n  *\r\n  * @param  {config}      Object information about IdP endpoints\r\n  * @param  {resources} Object contents includes information about the identity received\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n\n  getAccessTokenAuthorisationEndpoint: function getAccessTokenAuthorisationEndpoint(config, resources) {\n    console.log('[OIDC.getAccessTokenAuthorisationEndpoint:config]', config);\n    //    console.log('[OIDC.generateAssertion:contents]', contents);\n    //    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[OIDC.getAccessTokenAuthorisationEndpoint:resources]', resources);\n    //    let i = idpInfo;\n    accessTokenAuthorisationEndpoint = config.accessTokenAuthorisationEndpoint;\n    var mapping = config.mapping;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // TODO replace by resources[0]\n      resolve(accessTokenAuthorisationEndpoint(mapping(resources)));\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\r\n  * Function to get an Access Token\r\n  *\r\n  * @param  {login} optional login result\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n\n  getAccessToken: function getAccessToken(config, resources, login) {\n    console.log('[OIDC.getAccessToken:config]', config);\n    //    console.log('[OIDC.generateAssertion:contents]', contents);\n    //    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[OIDC.getAccessToken:login]', login);\n    //    let i = idpInfo;\n    accessTokenEndpoint = config.accessTokenEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // the user is loggedin, try to extract the Access Token and its expires\n      var expires = getExpires(login);\n\n      var accessToken = urlParser(login, 'access_token');\n\n      if (accessToken) resolve(accessTokenResult(resources, accessToken, expires, login));else resolve(getAccessTokenWithCodeToken(resources, login));\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\r\n    * Function to get an Access Token\r\n    *\r\n    * @param  {login} optional login result\r\n    * @return {Promise} returns a promise with an identity assertion\r\n    */\n\n  refreshAccessToken: function refreshAccessToken(config, token) {\n    console.log('[OIDC.refreshAccessToken:config]', config);\n    //    console.log('[OIDC.generateAssertion:contents]', contents);\n    //    console.log('[OIDC.generateAssertion:origin]', origin);\n    console.log('[OIDC.refreshAccessToken:outdated token]', token);\n    //    let i = idpInfo;\n    refreshAccessTokenEndpoint = config.refreshAccessTokenEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // the user is loggedin, try to extract the Access Token and its expires\n\n      var refresh = token.refresh;\n\n      if (!refresh) reject('[OIDC.refreshAccessToken] refresh token not available in the access token', token);\n\n      sendHTTPRequest('POST', refreshAccessTokenEndpoint(refresh)).then(function (info) {\n\n        console.info('[OIDC.refreshAccessToken] response: ', info);\n\n        if (info.hasOwnProperty('access_token')) {\n\n          var expires = getExpiresAtJSON(info);\n          resolve(accessTokenResult(token.resources, info.access_token, expires, info, refresh));\n        } else reject('[OIDC.refreshAccessToken] new access token not returned in the response: ', info);\n      }, function (error) {\n        reject(error);\n      });\n\n      //      });\n    }, function (e) {\n\n      reject(e);\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvT0lEQy5qcz8xNzI4Il0sIm5hbWVzIjpbImlkZW50aXRpZXMiLCJuSWRlbnRpdHkiLCJyZWRpcmVjdFVSSSIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsInBvcnQiLCJhY2Nlc3NUb2tlbkVuZHBvaW50IiwicmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQiLCJkb21haW4iLCJhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCIsImdldEV4cGlyZXNBdEpTT04iLCJqc29uIiwiZXhwaXJlcyIsImhhc093blByb3BlcnR5IiwiZXhwaXJlc19pbiIsIk1hdGgiLCJmbG9vciIsIkRhdGUiLCJub3ciLCJOdW1iZXIiLCJnZXRFeHBpcmVzIiwidXJsIiwidXJsUGFyc2VyIiwibmFtZSIsInJlcGxhY2UiLCJyZWdleFMiLCJyZWdleCIsIlJlZ0V4cCIsInJlc3VsdHMiLCJleGVjIiwic2VuZEhUVFBSZXF1ZXN0IiwibWV0aG9kIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImUiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiaW5mbyIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4iLCJyZXNvdXJjZXMiLCJjb2RlIiwidGhlbiIsImNvbnNvbGUiLCJyZWZyZXNoIiwicmVmcmVzaF90b2tlbiIsImFjY2Vzc1Rva2VuUmVzdWx0IiwiYWNjZXNzX3Rva2VuIiwiZXJyb3IiLCJhY2Nlc3NUb2tlbiIsImlucHV0IiwicmVzdWx0IiwiSWRwUHJveHkiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImNvbmZpZyIsImFzc2VydGlvbiIsIm9yaWdpbiIsImF0b2IiLCJkZWNvZGVkQ29udGVudDIiLCJjb250ZW50IiwiaWRUb2tlblNwbGl0ZWQiLCJ0b2tlbklEIiwic3BsaXQiLCJpZFRva2VuIiwiaSIsImlkcEluZm8iLCJkZWNvZGVkQ29udGVudCIsInRva2VuSW5mbyIsInN0cmluZ2lmeSIsInRva2VuSURKU09OIiwiaWRlbnRpdHkiLCJlbWFpbCIsImNvbnRlbnRzIiwiY2F0Y2giLCJlcnIiLCJyZWZyZXNoQXNzZXJ0aW9uIiwibG9nIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwicmVxdWVzdFVybCIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsInR5cGUiLCJjbGllbnRJRCIsInNjb3BlIiwiYWNjZXNzVHlwZSIsInN0YXRlIiwibG9naW5VcmwiLCJpbmZvVG9rZW5VUkwiLCJ1c2VyaW5mbyIsImluZm9Ub2tlbiIsImlkVG9rZW5VUkwiLCJpZFRva2VuSlNPTiIsImJ0b2EiLCJpZHBCdW5kbGUiLCJyZXR1cm5WYWx1ZSIsImlkcCIsImV4cCIsInVzZXJQcm9maWxlIiwiZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJtYXBwaW5nIiwiX3RoaXMiLCJnZXRBY2Nlc3NUb2tlbiIsImxvZ2luIiwicmVmcmVzaEFjY2Vzc1Rva2VuIiwidG9rZW4iXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7O0FBRUEsSUFBSUEsYUFBYSxFQUFqQjtBQUNBLElBQUlDLFlBQVksQ0FBaEI7QUFDQSxJQUFJQyxjQUFjQyxTQUFTQyxRQUFULEdBQW9CLElBQXBCLEdBQTJCRCxTQUFTRSxRQUFwQyxJQUFnREYsU0FBU0csSUFBVCxLQUFrQixFQUFsQixHQUF1QixNQUFNSCxTQUFTRyxJQUF0QyxHQUE2QyxFQUE3RixDQUFsQjs7QUFHQTtBQUNBO0FBQ0EsSUFBSUMsNEJBQUo7QUFDQSxJQUFJQyxtQ0FBSjtBQUNBLElBQUlDLGVBQUo7QUFDQSxJQUFJQyx5Q0FBSjs7QUFFTyxJQUFJQyw4Q0FBb0IsU0FBcEJBLGdCQUFvQixDQUFVQyxJQUFWLEVBQWdCO0FBQzdDLE1BQUlDLFVBQVVE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QXBGOztBQUVabkYsc0JBQWdCLE1BQWhCLEVBQXdCdkIsMkJBQTJCOEMsT0FBM0IsQ0FBeEIsRUFBNkRGLElBQTdELENBQWtFLFVBQVVSLElBQVYsRUFBZ0I7O0FBRWhGUyxnQkFBUVQsSUFBUixDQUFhLHNDQUFiLEVBQXFEQSxJQUFyRDs7QUFFQSxZQUFJQSxLQUFLOUIsY0FBTCxDQUFvQixjQUFwQixDQUFKLEVBQXlDOztBQUV2QyxjQUFJRCxVQUFVRixpQkFBaUJpQyxJQUFqQixDQUFkO0FBQ0FOLGtCQUFTa0Isa0JBQWtCMEQsTUFBTWhFLFNBQXhCLEVBQW1DTixLQUFLYSxZQUF4QyxFQUFzRDVDLE9BQXRELEVBQStEK0IsSUFBL0QsRUFBcUVVLE9BQXJFLENBQVQ7QUFDRCxTQUpELE1BSU9mLE9BQU8sMkVBQVAsRUFBb0ZLLElBQXBGO0FBQ1IsT0FURCxFQVNHLFVBQVVjLEtBQVYsRUFBaUI7QUFDbEJuQixlQUFPbUIsS0FBUDtBQUNELE9BWEQ7O0FBYVY7QUFFSyxLQXRCTSxFQXNCSixVQUFVakIsQ0FBVixFQUFhOztBQUVkRixhQUFPRSxDQUFQO0FBQ0QsS0F6Qk0sQ0FBUDtBQTBCRDtBQXRUbUIsQ0FBZiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHtnZXRFeHBpcmVzfSBmcm9tICcuL09BVVRIJztcclxuXHJcbmxldCBpZGVudGl0aWVzID0ge307XHJcbmxldCBuSWRlbnRpdHkgPSAwO1xyXG5sZXQgcmVkaXJlY3RVUkkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICE9PSAnJyA/ICc6JyArIGxvY2F0aW9uLnBvcnQgOiAnJyApO1xyXG5cclxuXHJcbi8vbGV0IHRva2VuRW5kcG9pbnQ7XHJcbi8vbGV0IGF1dGhvcmlzYXRpb25FbmRwb2ludDtcclxubGV0IGFjY2Vzc1Rva2VuRW5kcG9pbnQ7XHJcbmxldCByZWZyZXNoQWNjZXNzVG9rZW5FbmRwb2ludDtcclxubGV0IGRvbWFpbjtcclxubGV0IGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50O1xyXG5cclxuZXhwb3J0IGxldCBnZXRFeHBpcmVzQXRKU09OID0gKGZ1bmN0aW9uIChqc29uKSB7XHJcbiAgbGV0IGV4cGlyZXMgPSBqc29uLmhhc093blByb3BlcnR5KCdleHBpcmVzX2luJykgPyBqc29uLmV4cGlyZXNfaW4gOiBmYWxzZVxyXG5cclxuICBpZiAoZXhwaXJlcykgZXhwaXJlcyA9IGV4cGlyZXMgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcclxuICBlbHNlIGV4cGlyZXMgPSAzMTUzNjAwMDAwICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XHJcblxyXG4gIHJldHVybiBOdW1iZXIoZXhwaXJlcyk7XHJcblxyXG59KTtcclxuXHJcbmV4cG9ydCBsZXQgZ2V0RXhwaXJlcyA9IChmdW5jdGlvbiAodXJsKSB7XHJcbiAgbGV0IGV4cGlyZXMgPSB1cmxQYXJzZXIodXJsLCAnZXhwaXJlc19pbicpO1xyXG5cclxuICBpZiAoZXhwaXJlcykgZXhwaXJlcyA9IGV4cGlyZXMgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcclxuICBlbHNlIGV4cGlyZXMgPSAzMTUzNjAwMDAwICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XHJcblxyXG4gIHJldHVybiBOdW1iZXIoZXhwaXJlcyk7XHJcblxyXG59KTtcclxuIFxyXG4vL2Z1bmN0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIFVSTCB0byBvYmF0aW4gY2VydGFpbiB2YWx1ZXNcclxuZnVuY3Rpb24gdXJsUGFyc2VyKHVybCwgbmFtZSkge1xyXG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXFxdJyk7XHJcbiAgbGV0IHJlZ2V4UyA9ICdbXFxcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknO1xyXG4gIGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTtcclxuICBsZXQgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcclxuICBpZiAocmVzdWx0cyA9PT0gbnVsbClcclxuICByZXR1cm4gZmFsc2U7XHJcbiAgZWxzZVxyXG4gIHJldHVybiByZXN1bHRzWzFdO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZW5kSFRUUFJlcXVlc3QobWV0aG9kLCB1cmwpIHtcclxuICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xyXG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xyXG4gIH0gZWxzZSBpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9ICd1bmRlZmluZWQnKSB7XHJcbiAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGlmIFhEb21haW5SZXF1ZXN0LlxyXG4gICAgLy8gWERvbWFpblJlcXVlc3Qgb25seSBleGlzdHMgaW4gSUUsIGFuZCBpcyBJRSdzIHdheSBvZiBtYWtpbmcgQ09SUyByZXF1ZXN0cy5cclxuICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xyXG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBPdGhlcndpc2UsIENPUlMgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci5cclxuICAgIHhociA9IG51bGw7XHJcbiAgfVxyXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG4gICAgaWYgKHhocikge1xyXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oZSkge1xyXG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xyXG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICBsZXQgaW5mbyA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoaW5mbyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMgPT09IDQwMCkge1xyXG4gICAgICAgICAgICByZWplY3QoJ1RoZXJlIHdhcyBhbiBlcnJvciBwcm9jZXNzaW5nIHRoZSB0b2tlbicpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KCdzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgICAgIHhoci5zZW5kKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZWplY3QoJ0NPUlMgbm90IHN1cHBvcnRlZCcpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5sZXQgZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuID0gKGZ1bmN0aW9uIChyZXNvdXJjZXMsIHVybCkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICBsZXQgY29kZSA9IHVybFBhcnNlcih1cmwsICdjb2RlJyk7XHJcblxyXG4gICAgaWYgKCFjb2RlKSByZWplY3QoJ1tPSURDLmdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbl0gY29kZSBub3QgaW5jbHVkZSBpbiB0aGUgdXJsOiAnLCB1cmwpO1xyXG5cclxuICAgICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgYWNjZXNzVG9rZW5FbmRwb2ludChjb2RlKSkudGhlbihmdW5jdGlvbiAoaW5mbykge1xyXG5cclxuICAgICAgICBjb25zb2xlLmluZm8oJ1tPSURDLmdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbl0gcmVzcG9uc2U6ICcsIGluZm8pO1xyXG5cclxuICAgICAgICBpZiAoaW5mby5oYXNPd25Qcm9wZXJ0eSgnYWNjZXNzX3Rva2VuJykpIHtcclxuXHJcbiAgICAgICAgICBsZXQgZXhwaXJlcyA9IGdldEV4cGlyZXNBdEpTT04oaW5mbyk7XHJcbiAgICAgICAgICBsZXQgcmVmcmVzaCA9IGluZm8uaGFzT3duUHJvcGVydHkoJ3JlZnJlc2hfdG9rZW4nKSA/IGluZm8ucmVmcmVzaF90b2tlbiA6IGZhbHNlO1xyXG4gICAgICAgICAgcmVzb2x2ZSAoYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBpbmZvLmFjY2Vzc190b2tlbiwgZXhwaXJlcywgaW5mbywgcmVmcmVzaCkpO1xyXG4gICAgICAgIH0gZWxzZSByZWplY3QoJ1tPSURDLmdldEFjY2Vzc1Rva2VuV2l0aENvZGVUb2tlbl0gYWNjZXNzIHRva2VuIG5vdCByZXR1cm5lZCBpbiB0aGUgZXhjaGFuZ2UgY29kZSByZXN1bHQ6ICcsIGluZm8pO1xyXG4gICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxubGV0IGFjY2Vzc1Rva2VuUmVzdWx0ID0gKGZ1bmN0aW9uIChyZXNvdXJjZXMsIGFjY2Vzc1Rva2VuLCBleHBpcmVzLCBpbnB1dCwgcmVmcmVzaCkge1xyXG5cclxuICBsZXQgcmVzdWx0ID0geyBkb21haW46IGRvbWFpbiwgcmVzb3VyY2VzOiByZXNvdXJjZXMsIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbiwgZXhwaXJlczogZXhwaXJlcywgaW5wdXQ6IGlucHV0IH07XHJcblxyXG4gIGlmIChyZWZyZXNoKSByZXN1bHQucmVmcmVzaCA9IHJlZnJlc2g7XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcblxyXG59KTtcclxuXHJcblxyXG4vKipcclxuKiBGdW5jdGlvbiB0byBleGNoYW5nZSB0aGUgY29kZSByZWNlaXZlZCB0byB0aGUgaWQgVG9rZW4sIGFjY2VzcyB0b2tlbiBhbmQgYSByZWZyZXNoIHRva2VuXHJcbipcclxuKi9cclxuLypsZXQgZXhjaGFuZ2VDb2RlID0gKGZ1bmN0aW9uKGNvZGUpIHtcclxuICBsZXQgaSA9IGdvb2dsZUluZm87XHJcblxyXG4gIGxldCBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY29kZT0nICsgY29kZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZncmFudF90eXBlPWF1dGhvcml6YXRpb25fY29kZSZhY2Nlc3NfdHlwZT0nICsgaS5hY2Nlc3NUeXBlO1xyXG5cclxuXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgVVJMKS50aGVuKGZ1bmN0aW9uKGluZm8pIHtcclxuICAgICAgY29uc29sZS5sb2coJ1tPSURDLmV4Y2hhbmdlQ29kZV0gcmV0dXJuZWQgaW5mbzogJywgaW5mbyk7XHJcbiAgICAgIHJlc29sdmUoaW5mbyk7XHJcbiAgICB9LCBmdW5jdGlvbihlcnJvcikge1xyXG4gICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgfSk7XHJcblxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmxldCBleGNoYW5nZVJlZnJlc2hUb2tlbiA9IChmdW5jdGlvbihyZWZyZXNoVG9rZW4pIHtcclxuICBsZXQgaSA9IGdvb2dsZUluZm87XHJcblxyXG4gIGxldCBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVmcmVzaF90b2tlbj0nICsgcmVmcmVzaFRva2VuICsgJyZncmFudF90eXBlPXJlZnJlc2hfdG9rZW4nO1xyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24oaW5mbykge1xyXG4gICAgICByZXNvbHZlKGluZm8pO1xyXG4gICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgIH0pO1xyXG5cclxuICB9KTtcclxufSk7Ki9cclxuXHJcbi8qKlxyXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5XHJcbiovXHJcbmV4cG9ydCBsZXQgSWRwUHJveHkgPSB7XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXHJcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtICB7aWRwSW5mb30gICAgICBPYmplY3QgaW5mb3JtYXRpb24gYWJvdXQgSWRQIGVuZHBvaW50c1xyXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdFxyXG4gICovXHJcbiAgdmFsaWRhdGVBc3NlcnRpb246IChjb25maWcsIGFzc2VydGlvbiwgb3JpZ2luKSA9PiB7XHJcbiAgICBjb25zb2xlLmluZm8oJ1tPSURDLnZhbGlkYXRlQXNzZXJ0aW9uUHJveHldIGFzc2VydGlvbjogJywgYXRvYihhc3NlcnRpb24pKVxyXG4vLyAgICBjb25zb2xlLmluZm8oJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHk6YXRvYihhc3NlcnRpb24pJywgYXRvYihhc3NlcnRpb24pKTtcclxuXHJcbiAgICAvL1RPRE8gY2hlY2sgdGhlIHZhbHVlcyB3aXRoIHRoZSBoYXNoIHJlY2VpdmVkXHJcbiAgLy8gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG5cclxuICAgICAgbGV0IGRlY29kZWRDb250ZW50MiA9IGF0b2IoYXNzZXJ0aW9uKTtcclxuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50Mik7XHJcbiAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IGNvbnRlbnQudG9rZW5JRC5zcGxpdCgnLicpO1xyXG4gICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xyXG5cclxuICAgICAgLy9yZXNvbHZlKHtpZGVudGl0eTogaWRUb2tlbi5lbWFpbCwgY29udGVudHM6IGlkVG9rZW4ubm9uY2V9KTtcclxuXHJcbiAgICAvL30pO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG4gICAgICBsZXQgaSA9IGNvbmZpZy5pZHBJbmZvO1xyXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XHJcbiAgICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7XHJcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaS50b2tlbkluZm8gKyBjb250ZW50LnRva2VuSUQpLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSA9PT0gSlNPTi5zdHJpbmdpZnkoY29udGVudC50b2tlbklESlNPTikpIHtcclxuICAgICAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBjb250ZW50LnRva2VuSURKU09OLmVtYWlsLCBjb250ZW50czogY29udGVudC50b2tlbklESlNPTn0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ2ludmFsaWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pLmNhdGNoKGVyciA9PiB7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgcmVmcmVzaEFzc2VydGlvbjogKGlkZW50aXR5KSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpvbGRJZGVudGl0eScsIGlkZW50aXR5KTtcclxuLy8gICAgbGV0IGkgPSBnb29nbGVJbmZvO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuLyogICAgICBpZiAoaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4pIHtcclxuICAgICAgICBleGNoYW5nZVJlZnJlc2hUb2tlbihpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBpZGVudGl0eUJ1bmRsZSA9IHthY2Nlc3NUb2tlbjogdmFsdWUuYWNjZXNzX3Rva2VuLCBpZFRva2VuOiB2YWx1ZS5pZF90b2tlbiwgcmVmcmVzaFRva2VuOiBpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbiwgdG9rZW5UeXBlOiBpZGVudGl0eS5pbmZvLnRva2VuVHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW59O1xyXG4gICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XHJcblxyXG4gICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXHJcbiAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XHJcblxyXG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjtcclxuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbi5leHA7XHJcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsO1xyXG5cclxuICAgICAgICAgICAgICBsZXQgb2xkSURUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZGVudGl0eS5hc3NlcnRpb24pKTtcclxuICAgICAgICAgICAgICBsZXQgb2xkSWRUb2tlblNwbGl0ZWQgPSBvbGRJRFRva2VuLnRva2VuSUQuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgICBsZXQgb2xkRGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2Iob2xkSWRUb2tlblNwbGl0ZWRbMV0pKTtcclxuICAgICAgICAgICAgICBsZXQgaWROb25jZSA9IG9sZERlY29kZWRJRFRva2VuLm5vbmNlO1xyXG5cclxuICAgICAgICAgICAgICBsZXQgcmVjZWl2ZWRJRFRva2VuID0gdmFsdWUuaWRfdG9rZW47XHJcbiAgICAgICAgICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gcmVjZWl2ZWRJRFRva2VuLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgbGV0IGRlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XHJcblxyXG4gICAgICAgICAgICAgIGRlY29kZWRJRFRva2VuLm5vbmNlID0gaWROb25jZTtcclxuICAgICAgICAgICAgICBsZXQgaW5zZXJ0ZWROb25jZSA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoZGVjb2RlZElEVG9rZW4pKTtcclxuICAgICAgICAgICAgICBsZXQgbmV3SURUb2tlbiA9IGlkVG9rZW5TcGxpdGVkWzBdICsgJy4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWROb25jZSArICcuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkVG9rZW5TcGxpdGVkWzJdO1xyXG5cclxuICAgICAgICAgICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogbmV3SURUb2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XHJcbiAgICAgICAgICAgICAgbGV0IGlkcEJ1bmRsZSA9IHtkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJ307XHJcblxyXG4gICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxyXG4gICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XHJcbiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnUFJPWFk6cmVmcmVzaEFzc2VydGlvbjpuZXdJZGVudGl0eScsIHJldHVyblZhbHVlKTtcclxuICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSovXHJcbiAgICAgIHJlc29sdmUoIGlkZW50aXR5ICk7XHJcbiAgICB9KTtcclxuXHJcblxyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXHJcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb25cclxuICAqXHJcbiAgKiBAcGFyYW0gIHtpZHBJbmZvfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXHJcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxyXG4gICovXHJcbiAgZ2VuZXJhdGVBc3NlcnRpb246IChjb25maWcsIGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XHJcbiAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XHJcbiAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246aGludF0nLCBoaW50KTtcclxuICAgIGxldCBpID0gY29uZmlnLmlkcEluZm87XHJcblxyXG4gICAgLy9zdGFydCB0aGUgbG9naW4gcGhhc2VcclxuICAgIC8vVE9ETyBsYXRlciBzaG91bGQgYmUgZGVmaW5lZCBhIGJldHRlciBhcHByb2FjaFxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBpZiAoIWhpbnQpIHtcclxuICAgICAgICAvKnRyeSB7XHJcbiAgICAgICAgICBpZiAod2luZG93KSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoJ3VybCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7Ki9cclxuXHJcbiAgICAgICAgbGV0IHJlcXVlc3RVcmwgPSBpLmF1dGhvcmlzYXRpb25FbmRwb2ludCArICdyZWRpcmVjdF91cmk9JyArIHJlZGlyZWN0VVJJXHJcbiAgICAgICAgKyAnJnByb21wdD1jb25zZW50JnJlc3BvbnNlX3R5cGU9JyArIGkudHlwZVxyXG4gICAgICAgICsgJyZjbGllbnRfaWQ9JyArIGkuY2xpZW50SURcclxuICAgICAgICArICcmc2NvcGU9JyArIGkuc2NvcGVcclxuICAgICAgICArICcmYWNjZXNzX3R5cGU9JyArIGkuYWNjZXNzVHlwZVxyXG4gICAgICAgICsgJyZub25jZT0nICsgY29udGVudHNcclxuICAgICAgICArICcmc3RhdGU9JyArIGkuc3RhdGUgO1xyXG5cclxuLy8gICAgICAgIGxldCByZXF1ZXN0VXJsID0gaS5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgKyAnc2NvcGU9JyArIGkuc2NvcGUgKyAnJmNsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZyZXNwb25zZV90eXBlPWNvZGUnICsgLyppLnR5cGUgKyovICcmc3RhdGU9JyArIGkuc3RhdGUgKyAnJnByb21wdD1jb25zZW50JmFjY2Vzc190eXBlPScgKyBpLmFjY2Vzc1R5cGUgKyAnJm5vbmNlPScgKyBjb250ZW50cztcclxuICAgICAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb25dIE5PX0hJTlQ6IHJlamVjdGluZyB3aXRoIHJlcXVlc3RVcmwgJywgcmVxdWVzdFVybCk7XHJcblxyXG4gICAgICAgIHJlamVjdCh7bmFtZTogJ0lkUExvZ2luRXJyb3InLCBsb2dpblVybDogcmVxdWVzdFVybH0pO1xyXG5cclxuICAgICAgLy8gIH1cclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gdGhlIHJlcXVlc3QgaGF2ZSBhbHJlYWR5IGJlZW4gbWFkZSwgc28gaWRwUFJveHkgd2lsbCBleGNoYW5nZSB0aGUgdG9rZW5zIGFsb25nIHRvIHRoZSBpZHAsIHRvIG9idGFpbiB0aGUgaW5mb3JtYXRpb24gbmVjZXNzYXJ5XHJcbiAgICAgICAgbGV0IGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTtcclxuICAgICAgICBsZXQgaWRUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnaWRfdG9rZW4nKTtcclxuICAgICAgICBsZXQgY29kZSA9IHVybFBhcnNlcihoaW50LCAnY29kZScpO1xyXG5cclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdHT09HTEVfUFJPWFlfSElOVDogJywgaGludCk7XHJcblxyXG4vLyAgICAgICBleGNoYW5nZUNvZGUoY29kZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gLy8gICAgICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uXSBvYnRhaW5lZCBleGNoYW5nZWQgVG9rZW4gJywgdmFsdWUpO1xyXG5cclxuICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyXHJcbiAgICAgICAgICAvL2xldCBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuO1xyXG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyBhY2Nlc3NUb2tlbjtcclxuICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaW5mb1Rva2VuVVJMKS50aGVuKGZ1bmN0aW9uKGluZm9Ub2tlbikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIGluZm9Ub2tlbiAnLCBpbmZvVG9rZW4pO1xyXG5cclxuLy8gICAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7YWNjZXNzVG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgaWRUb2tlbjogdmFsdWUuaWRfdG9rZW4sIHJlZnJlc2hUb2tlbjogdmFsdWUucmVmcmVzaF90b2tlbiwgdG9rZW5UeXBlOiB2YWx1ZS50b2tlbl90eXBlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XHJcblxyXG4vLyAgICAgICAgICAgIGxldCBpZFRva2VuVVJMID0gaS50b2tlbkluZm8gKyB2YWx1ZS5pZF90b2tlbjtcclxuLypcclxuICAgICAgICAgICAgbGV0IGlkZW50aXR5QnVuZGxlID0ge1xyXG4gICAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBhY2Nlc3NUb2tlbixcclxuICAgICAgICAgICAgICBpZFRva2VuOiBpZFRva2VuLFxyXG4vLyAgICAgICAgICAgICAgcmVmcmVzaFRva2VuOiB2YWx1ZS5yZWZyZXNoX3Rva2VuLFxyXG4gICAgICAgICAgICAgIHRva2VuVHlwZTogJ0JlYXJlcicsXHJcbiAgICAgICAgICAgICAgaW5mb1Rva2VuOiBpbmZvVG9rZW5cclxuICAgICAgICAgICAgfTsqL1xyXG5cclxuICAgICAgICAgICAgbGV0IGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIGlkVG9rZW47XHJcblxyXG4gICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXHJcbiAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuSlNPTikge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbl0gb2J0YWluZWQgaWRUb2tlbiAnLCBpZFRva2VuSlNPTik7XHJcblxyXG4vKiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUudG9rZW5JREpTT04gPSBpZFRva2VuSlNPTjtcclxuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbkpTT04uZXhwO1xyXG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmVtYWlsID0gaWRUb2tlbkpTT04uZW1haWw7Ki9cclxuXHJcbiAgICAgICAgICAgICAgbGV0IGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3Rva2VuSUQ6IGlkVG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VuSlNPTn0pKTtcclxuICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogaS5kb21haW4sIHByb3RvY29sOiAnT0lEQyd9O1xyXG5cclxuICAgICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcclxuICAgICAgICAgICAgICAvLyBUT0RPIHJlcGxhY2UgXCJyZWZyZXNoOiB0cnVlXCIgYnkgdGhlIHJlYWwgcmVmcmVzaCB0b2tlblxyXG4gICAgICAgICAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHthc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGV4cGlyZXM6IGlkVG9rZW5KU09OLmV4cCwgdXNlclByb2ZpbGU6IGluZm9Ub2tlbiwgcmVmcmVzaDogdHJ1ZX07XHJcblxyXG4gICAgICAgICAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xyXG4gICAgICAgICAgICAgICsrbklkZW50aXR5O1xyXG5cclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb25dIHJldHVybmluZzogJywgSlNPTi5zdHJpbmdpZnkocmV0dXJuVmFsdWUpKTtcclxuXHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcblxyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfSk7XHJcbi8qICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuXHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTsqL1xyXG5cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byBnZXQgYW4gQWNjZXNzIFRva2VuIGVuZHBvaW50XHJcbiAgKlxyXG4gICogQHBhcmFtICB7Y29uZmlnfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXHJcbiAgKiBAcGFyYW0gIHtyZXNvdXJjZXN9IE9iamVjdCBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXHJcbiAgKi9cclxuXHJcbiAgZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6IChjb25maWcsIHJlc291cmNlcykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tPSURDLmdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50OmNvbmZpZ10nLCBjb25maWcpO1xyXG4vLyAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246Y29udGVudHNdJywgY29udGVudHMpO1xyXG4vLyAgICBjb25zb2xlLmxvZygnW09JREMuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XHJcbiAgICBjb25zb2xlLmxvZygnW09JREMuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6cmVzb3VyY2VzXScsIHJlc291cmNlcyk7XHJcbi8vICAgIGxldCBpID0gaWRwSW5mbztcclxuICAgIGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50ID0gY29uZmlnLmFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50O1xyXG4gICAgY29uc3QgbWFwcGluZyA9IGNvbmZpZy5tYXBwaW5nO1xyXG5cclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgLy8gVE9ETyByZXBsYWNlIGJ5IHJlc291cmNlc1swXVxyXG4gICAgICByZXNvbHZlKGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50KG1hcHBpbmcocmVzb3VyY2VzKSkpO1xyXG5cclxuICAgIH0sIGZ1bmN0aW9uIChlKSB7XHJcblxyXG4gICAgICByZWplY3QoZSk7XHJcbiAgICB9KTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cclxuICAqXHJcbiAgKiBAcGFyYW0gIHtsb2dpbn0gb3B0aW9uYWwgbG9naW4gcmVzdWx0XHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxyXG4gICovXHJcblxyXG4gIGdldEFjY2Vzc1Rva2VuOiAoY29uZmlnLCByZXNvdXJjZXMsIGxvZ2luKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW09JREMuZ2V0QWNjZXNzVG9rZW46Y29uZmlnXScsIGNvbmZpZyk7XHJcbi8vICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XHJcbi8vICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcclxuICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZXRBY2Nlc3NUb2tlbjpsb2dpbl0nLCBsb2dpbik7XHJcbi8vICAgIGxldCBpID0gaWRwSW5mbztcclxuICAgIGFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5FbmRwb2ludDtcclxuICAgIGRvbWFpbiA9IGNvbmZpZy5kb21haW47XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIC8vIHRoZSB1c2VyIGlzIGxvZ2dlZGluLCB0cnkgdG8gZXh0cmFjdCB0aGUgQWNjZXNzIFRva2VuIGFuZCBpdHMgZXhwaXJlc1xyXG4gICAgICAgIGxldCBleHBpcmVzID0gZ2V0RXhwaXJlcyhsb2dpbik7XHJcblxyXG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihsb2dpbiwgJ2FjY2Vzc190b2tlbicpO1xyXG5cclxuICAgICAgICBpZiAoYWNjZXNzVG9rZW4pIHJlc29sdmUoIGFjY2Vzc1Rva2VuUmVzdWx0KHJlc291cmNlcywgYWNjZXNzVG9rZW4sIGV4cGlyZXMsIGxvZ2luKSApO1xyXG4gICAgICAgIGVsc2UgcmVzb2x2ZSggZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuKHJlc291cmNlcywgbG9naW4pICk7XHJcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgcmVqZWN0KGUpO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbi8qKlxyXG4gICogRnVuY3Rpb24gdG8gZ2V0IGFuIEFjY2VzcyBUb2tlblxyXG4gICpcclxuICAqIEBwYXJhbSAge2xvZ2lufSBvcHRpb25hbCBsb2dpbiByZXN1bHRcclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXHJcbiAgKi9cclxuXHJcbiByZWZyZXNoQWNjZXNzVG9rZW46IChjb25maWcsIHRva2VuKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygnW09JREMucmVmcmVzaEFjY2Vzc1Rva2VuOmNvbmZpZ10nLCBjb25maWcpO1xyXG4gIC8vICAgIGNvbnNvbGUubG9nKCdbT0lEQy5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XHJcbiAgLy8gICAgY29uc29sZS5sb2coJ1tPSURDLmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xyXG4gICAgY29uc29sZS5sb2coJ1tPSURDLnJlZnJlc2hBY2Nlc3NUb2tlbjpvdXRkYXRlZCB0b2tlbl0nLCB0b2tlbik7XHJcbiAgLy8gICAgbGV0IGkgPSBpZHBJbmZvO1xyXG4gIHJlZnJlc2hBY2Nlc3NUb2tlbkVuZHBvaW50ID0gY29uZmlnLnJlZnJlc2hBY2Nlc3NUb2tlbkVuZHBvaW50O1xyXG4gICAgZG9tYWluID0gY29uZmlnLmRvbWFpbjtcclxuXHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgLy9zdGFydCB0aGUgbG9naW4gcGhhc2VcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgLy8gdGhlIHVzZXIgaXMgbG9nZ2VkaW4sIHRyeSB0byBleHRyYWN0IHRoZSBBY2Nlc3MgVG9rZW4gYW5kIGl0cyBleHBpcmVzXHJcblxyXG4gICAgICAgIGxldCByZWZyZXNoID0gdG9rZW4ucmVmcmVzaDtcclxuXHJcbiAgICAgICAgaWYgKCFyZWZyZXNoKSByZWplY3QoJ1tPSURDLnJlZnJlc2hBY2Nlc3NUb2tlbl0gcmVmcmVzaCB0b2tlbiBub3QgYXZhaWxhYmxlIGluIHRoZSBhY2Nlc3MgdG9rZW4nLCB0b2tlbik7XHJcbiAgICBcclxuICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIHJlZnJlc2hBY2Nlc3NUb2tlbkVuZHBvaW50KHJlZnJlc2gpKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XHJcbiAgICBcclxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbT0lEQy5yZWZyZXNoQWNjZXNzVG9rZW5dIHJlc3BvbnNlOiAnLCBpbmZvKTtcclxuICAgIFxyXG4gICAgICAgICAgICBpZiAoaW5mby5oYXNPd25Qcm9wZXJ0eSgnYWNjZXNzX3Rva2VuJykpIHtcclxuICAgIFxyXG4gICAgICAgICAgICAgIGxldCBleHBpcmVzID0gZ2V0RXhwaXJlc0F0SlNPTihpbmZvKTtcclxuICAgICAgICAgICAgICByZXNvbHZlIChhY2Nlc3NUb2tlblJlc3VsdCh0b2tlbi5yZXNvdXJjZXMsIGluZm8uYWNjZXNzX3Rva2VuLCBleHBpcmVzLCBpbmZvLCByZWZyZXNoKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSByZWplY3QoJ1tPSURDLnJlZnJlc2hBY2Nlc3NUb2tlbl0gbmV3IGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIHJlc3BvbnNlOiAnLCBpbmZvKTtcclxuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICBcclxuLy8gICAgICB9KTtcclxuICAgIFxyXG4gICAgfSwgZnVuY3Rpb24gKGUpIHtcclxuXHJcbiAgICAgIHJlamVjdChlKTtcclxuICAgIH0pO1xyXG4gIH0gIFxyXG59O1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvT0lEQy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accessTokenEndpoint = accessTokenEndpoint;\nexports.refreshAccessTokenEndpoint = refreshAccessTokenEndpoint;\nexports.revokeAccessTokenEndpoint = revokeAccessTokenEndpoint;\nexports.mapping = mapping;\nexports.accessTokenAuthorisationEndpoint = accessTokenAuthorisationEndpoint;\nexports.authorisationEndpoint = authorisationEndpoint;\nexports.accessTokenInput = accessTokenInput;\n/*\r\n\tSo that an application can use Google's OAuth 2.0 authentication system for user login,\r\n\tfirst is required to set up a project in the Google Developers Console to obtain OAuth 2.0 credentials and set a redirect URI.\r\n\tA test account was created to set the project in the Google Developers Console to obtain OAuth 2.0 credentials,\twith the following credentials:\r\n      \tusername: openidtest10@gmail.com\r\n        password: testOpenID10\r\n\tTo add more URI's, follow the steps:\r\n\t1º choose the project ( can be the My OpenID Project)\t from  https://console.developers.google.com/projectselector/apis/credentials using the credentials provided above.\r\n\t2º Open The Client Web 1 listed in OAuth 2.0 Client ID's\r\n\t3º Add the URI  in the authorized redirect URI section.\r\n  4º change the REDIRECT parameter bellow with the pretended URI\r\n */\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\nvar googleInfo = exports.googleInfo = {\n  \"clientID\": \"808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com\",\n  \"issuer\": \"https://accounts.google.com\",\n  \"tokenEndpoint\": \"https://www.googleapis.com/oauth2/v4/token?\",\n  \"jwksUri\": \"https://www.googleapis.com/oauth2/v3/certs?\",\n  \"authorisationEndpoint\": \"https://accounts.google.com/o/oauth2/auth?\",\n  \"userinfo\": \"https://www.googleapis.com/oauth2/v3/userinfo?access_token=\",\n  \"tokenInfo\": \"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\",\n  \"accessType\": \"online\",\n  \"type\": \"token id_token\",\n  \"scope\": \"openid%20email%20profile\",\n  \"state\": \"state\",\n  \"domain\": \"google.com\"\n};\n\nvar googleAPIInfo = exports.googleAPIInfo = {\n  \"clientID\": \"808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com\",\n  \"issuer\": \"https://accounts.google.com\",\n  \"tokenEndpoint\": \"https://www.googleapis.com/oauth2/v4/token?\",\n  \"revokeEndpoint\": \"https://accounts.google.com/o/oauth2/revoke?\",\n  \"jwksUri\": \"https://www.googleapis.com/oauth2/v3/certs?\",\n  \"authorisationEndpoint\": \"https://accounts.google.com/o/oauth2/auth?\",\n  \"userinfo\": \"https://www.googleapis.com/oauth2/v3/userinfo?access_token=\",\n  \"tokenInfo\": \"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\",\n  \"accessType\": \"offline\",\n  \"type\": \"code\",\n  // TODO - scope is read from message (support multiple Google APIs)\n  \"scope\": \"https://www.googleapis.com/auth/fitness.activity.read\",\n  \"state\": \"state\",\n  \"domain\": \"google.com\",\n  'grant_type': \"authorization_code\",\n  'secret': \"Xx4rKucb5ZYTaXlcZX9HLfZW\"\n};\n\nfunction accessTokenEndpoint(code) {\n\n  return googleAPIInfo.tokenEndpoint + 'client_id=' + googleAPIInfo.clientID + '&code=' + code + '&grant_type=authorization_code' + '&access_type=' + 'offline' + '&client_secret=' + googleAPIInfo.secret + '&redirect_uri=' + redirectURI;\n}\n\nfunction refreshAccessTokenEndpoint(refresh) {\n\n  return googleAPIInfo.tokenEndpoint + 'client_id=' + googleAPIInfo.clientID + '&refresh_token=' + refresh + '&grant_type=refresh_token' + '&client_secret=' + googleAPIInfo.secret;\n}\n\nfunction revokeAccessTokenEndpoint(token) {\n\n  return googleAPIInfo.revokeEndpoint + '&token=' + token;\n}\n\nfunction mapping(resource) {\n  if (!resource) {\n    return \"fitness.activity.read\";\n  }\n  switch (resource) {\n    case \"user_activity_context\":\n      return \"fitness.activity.read\";\n      break;\n\n    default:\n      return \"fitness.activity.read\";\n      break;\n  }\n}\n\nfunction accessTokenAuthorisationEndpoint(API) {\n  var url = googleAPIInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + googleAPIInfo.type + '&client_id=' + googleAPIInfo.clientID + '&scope=' + 'https://www.googleapis.com/auth/' + API + '&access_type=' + googleAPIInfo.accessType\n  //    + '&include_granted_scopes=true'\n  //    + '&prompt=none'\n  + '&state=' + googleAPIInfo.state;\n  console.log('[GoogleInfo.accessTokenAuthorisationEndpoint] ', url);\n  return url;\n}\n\nfunction authorisationEndpoint(nonce) {\n\n  var url = googleAPIInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + googleAPIInfo.type + '&client_id=' + googleAPIInfo.clientID + '&scope=' + googleAPIInfo.scope + '&access_type=' + googleAPIInfo.accessType + '&state=' + nonce;\n  console.log('[GoogleInfo.authorisationEndpoint] ', url);\n  return url;\n}\n\nfunction accessTokenInput(info) {\n\n  return { info: info };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL0dvb2dsZUluZm8uanM/MDI5MiJdLCJuYW1lcyI6WyJhY2Nlc3NUb2tlbkVuZHBvaW50IiwicmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQiLCJyZXZva2VBY2Nlc3NUb2tlbkVuZHBvaW50IiwibWFwcGluZyIsImFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5JbnB1dCIsInJlZGlyZWN0VVJJIiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3RuYW1lIiwicG9ydCIsImdvb2dsZUluZm8iLCJnb29nbGVBUElJbmZvIiwiY29kZSIsInRva2VuRW5kcG9pbnQiLCJjbGllbnRJRCIsInNlY3JldCIsInJlZnJlc2giLCJ0b2tlbiIsInJldm9rZUVuZHBvaW50IiwicmVzb3VyY2UiLCJBUEkiLCJ1cmwiLCJ0eXBlIiwiYWNjZXNzVHlwZSIsInN0YXRlIiwiY29uc29sZSIsImxvZyIsIm5vbmNlIiwic2NvcGUiLCJpbmZvIl0sIm1hcHBpbmdzIjoiOzs7OztRQW1EZ0JBLG1CLEdBQUFBLG1CO1FBV0FDLDBCLEdBQUFBLDBCO1FBU0FDLHlCLEdBQUFBLHlCO1FBTUFDLE8sR0FBQUEsTztRQWVBQyxnQyxHQUFBQSxnQztRQWNBQyxxQixHQUFBQSxxQjtRQWFBQyxnQixHQUFBQSxnQjtBQXZIaEI7Ozs7Ozs7Ozs7OztBQVlBLElBQUlDLGNBQWNDLFNBQVNDLFFBQVQsR0FBb0IsSUFBcEIsR0FBMkJELFNBQVNFLFFBQXBDLElBQWdERixTQUFTRyxJQUFULEtBQWtCLEVBQWxCLEdBQXVCLE1BQU1ILFNBQVNHLElBQXRDLEdBQTZDLEVBQTdGLENBQWxCOztBQUVPLElBQUlDLGtDQUFhO0FBQ3RCLGNBQVksMEVBRFU7QUFFdEIsWUFBVSw2QkFGWTtBQUd0QixtQkFBaUIsNkNBSEs7QUFJdEIsYUFBVyw2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b24gY2FuIHVzZSBHb29nbGUncyBPQXV0aCAyLjAgYXV0aGVudGljYXRpb24gc3lzdGVtIGZvciB1c2VyIGxvZ2luLFxyXG5cdGZpcnN0IGlzIHJlcXVpcmVkIHRvIHNldCB1cCBhIHByb2plY3QgaW4gdGhlIEdvb2dsZSBEZXZlbG9wZXJzIENvbnNvbGUgdG8gb2J0YWluIE9BdXRoIDIuMCBjcmVkZW50aWFscyBhbmQgc2V0IGEgcmVkaXJlY3QgVVJJLlxyXG5cdEEgdGVzdCBhY2NvdW50IHdhcyBjcmVhdGVkIHRvIHNldCB0aGUgcHJvamVjdCBpbiB0aGUgR29vZ2xlIERldmVsb3BlcnMgQ29uc29sZSB0byBvYnRhaW4gT0F1dGggMi4wIGNyZWRlbnRpYWxzLFx0d2l0aCB0aGUgZm9sbG93aW5nIGNyZWRlbnRpYWxzOlxyXG4gICAgICBcdHVzZXJuYW1lOiBvcGVuaWR0ZXN0MTBAZ21haWwuY29tXHJcbiAgICAgICAgcGFzc3dvcmQ6IHRlc3RPcGVuSUQxMFxyXG5cdFRvIGFkZCBtb3JlIFVSSSdzLCBmb2xsb3cgdGhlIHN0ZXBzOlxyXG5cdDHCuiBjaG9vc2UgdGhlIHByb2plY3QgKCBjYW4gYmUgdGhlIE15IE9wZW5JRCBQcm9qZWN0KVx0IGZyb20gIGh0dHBzOi8vY29uc29sZS5kZXZlbG9wZXJzLmdvb2dsZS5jb20vcHJvamVjdHNlbGVjdG9yL2FwaXMvY3JlZGVudGlhbHMgdXNpbmcgdGhlIGNyZWRlbnRpYWxzIHByb3ZpZGVkIGFib3ZlLlxyXG5cdDLCuiBPcGVuIFRoZSBDbGllbnQgV2ViIDEgbGlzdGVkIGluIE9BdXRoIDIuMCBDbGllbnQgSUQnc1xyXG5cdDPCuiBBZGQgdGhlIFVSSSAgaW4gdGhlIGF1dGhvcml6ZWQgcmVkaXJlY3QgVVJJIHNlY3Rpb24uXHJcbiAgNMK6IGNoYW5nZSB0aGUgUkVESVJFQ1QgcGFyYW1ldGVyIGJlbGxvdyB3aXRoIHRoZSBwcmV0ZW5kZWQgVVJJXHJcbiAqL1xyXG5sZXQgcmVkaXJlY3RVUkkgPSBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICE9PSAnJyA/ICc6JyArIGxvY2F0aW9uLnBvcnQgOiAnJyk7XHJcblxyXG5leHBvcnQgbGV0IGdvb2dsZUluZm8gPSB7XHJcbiAgXCJjbGllbnRJRFwiOiBcIjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbVwiLFxyXG4gIFwiaXNzdWVyXCI6IFwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tXCIsXHJcbiAgXCJ0b2tlbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuP1wiLFxyXG4gIFwiandrc1VyaVwiOiBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My9jZXJ0cz9cIixcclxuICBcImF1dGhvcmlzYXRpb25FbmRwb2ludFwiOiBcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9hdXRoP1wiLFxyXG4gIFwidXNlcmluZm9cIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdXNlcmluZm8/YWNjZXNzX3Rva2VuPVwiLFxyXG4gIFwidG9rZW5JbmZvXCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj1cIixcclxuICBcImFjY2Vzc1R5cGVcIjogXCJvbmxpbmVcIixcclxuICBcInR5cGVcIjogXCJ0b2tlbiBpZF90b2tlblwiLFxyXG4gIFwic2NvcGVcIjogXCJvcGVuaWQlMjBlbWFpbCUyMHByb2ZpbGVcIixcclxuICBcInN0YXRlXCI6IFwic3RhdGVcIixcclxuICBcImRvbWFpblwiOiBcImdvb2dsZS5jb21cIlxyXG59O1xyXG5cclxuXHJcbmV4cG9ydCBsZXQgZ29vZ2xlQVBJSW5mbyA9IHtcclxuICBcImNsaWVudElEXCI6IFwiODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tXCIsXHJcbiAgXCJpc3N1ZXJcIjogXCJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb21cIixcclxuICBcInRva2VuRW5kcG9pbnRcIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjQvdG9rZW4/XCIsXHJcbiAgXCJyZXZva2VFbmRwb2ludFwiOiBcImh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi9yZXZva2U/XCIsXHJcbiAgXCJqd2tzVXJpXCI6IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzP1wiLFxyXG4gIFwiYXV0aG9yaXNhdGlvbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGg/XCIsXHJcbiAgXCJ1c2VyaW5mb1wiOiBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My91c2VyaW5mbz9hY2Nlc3NfdG9rZW49XCIsXHJcbiAgXCJ0b2tlbkluZm9cIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW5pbmZvP2lkX3Rva2VuPVwiLFxyXG4gIFwiYWNjZXNzVHlwZVwiOiBcIm9mZmxpbmVcIixcclxuICBcInR5cGVcIjogXCJjb2RlXCIsXHJcbiAgLy8gVE9ETyAtIHNjb3BlIGlzIHJlYWQgZnJvbSBtZXNzYWdlIChzdXBwb3J0IG11bHRpcGxlIEdvb2dsZSBBUElzKVxyXG4gIFwic2NvcGVcIjogXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2ZpdG5lc3MuYWN0aXZpdHkucmVhZFwiLFxyXG4gIFwic3RhdGVcIjogXCJzdGF0ZVwiLFxyXG4gIFwiZG9tYWluXCI6IFwiZ29vZ2xlLmNvbVwiLFxyXG4gICdncmFudF90eXBlJzogXCJhdXRob3JpemF0aW9uX2NvZGVcIixcclxuICAnc2VjcmV0JzogXCJYeDRyS3VjYjVaWVRhWGxjWlg5SExmWldcIlxyXG59O1xyXG5cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWNjZXNzVG9rZW5FbmRwb2ludChjb2RlKSB7XHJcblxyXG4gIHJldHVybiBnb29nbGVBUElJbmZvLnRva2VuRW5kcG9pbnRcclxuICAgICsgJ2NsaWVudF9pZD0nICsgZ29vZ2xlQVBJSW5mby5jbGllbnRJRFxyXG4gICAgKyAnJmNvZGU9JyArIGNvZGVcclxuICAgICsgJyZncmFudF90eXBlPWF1dGhvcml6YXRpb25fY29kZSdcclxuICAgICsgJyZhY2Nlc3NfdHlwZT0nICsgJ29mZmxpbmUnXHJcbiAgICArICcmY2xpZW50X3NlY3JldD0nICsgZ29vZ2xlQVBJSW5mby5zZWNyZXRcclxuICAgICsgJyZyZWRpcmVjdF91cmk9JyArIHJlZGlyZWN0VVJJO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVmcmVzaEFjY2Vzc1Rva2VuRW5kcG9pbnQocmVmcmVzaCkge1xyXG5cclxuICByZXR1cm4gZ29vZ2xlQVBJSW5mby50b2tlbkVuZHBvaW50XHJcbiAgICArICdjbGllbnRfaWQ9JyArIGdvb2dsZUFQSUluZm8uY2xpZW50SURcclxuICAgICsgJyZyZWZyZXNoX3Rva2VuPScgKyByZWZyZXNoXHJcbiAgICArICcmZ3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuJ1xyXG4gICAgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGdvb2dsZUFQSUluZm8uc2VjcmV0XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZXZva2VBY2Nlc3NUb2tlbkVuZHBvaW50KHRva2VuKSB7XHJcblxyXG4gIHJldHVybiBnb29nbGVBUElJbmZvLnJldm9rZUVuZHBvaW50XHJcbiAgICArICcmdG9rZW49JyArIHRva2VuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXBwaW5nKHJlc291cmNlKSB7XHJcbiAgaWYgKCFyZXNvdXJjZSkge1xyXG4gICAgcmV0dXJuIFwiZml0bmVzcy5hY3Rpdml0eS5yZWFkXCI7XHJcbiAgfVxyXG4gIHN3aXRjaCAocmVzb3VyY2UpIHtcclxuICAgIGNhc2UgXCJ1c2VyX2FjdGl2aXR5X2NvbnRleHRcIjpcclxuICAgICAgcmV0dXJuIFwiZml0bmVzcy5hY3Rpdml0eS5yZWFkXCI7XHJcbiAgICAgIGJyZWFrO1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHJldHVybiBcImZpdG5lc3MuYWN0aXZpdHkucmVhZFwiO1xyXG4gICAgICBicmVhaztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChBUEkpIHtcclxuICBsZXQgdXJsID0gZ29vZ2xlQVBJSW5mby5hdXRob3Jpc2F0aW9uRW5kcG9pbnRcclxuICAgICsgJ3JlZGlyZWN0X3VyaT0nICsgcmVkaXJlY3RVUklcclxuICAgICsgJyZyZXNwb25zZV90eXBlPScgKyBnb29nbGVBUElJbmZvLnR5cGVcclxuICAgICsgJyZjbGllbnRfaWQ9JyArIGdvb2dsZUFQSUluZm8uY2xpZW50SURcclxuICAgICsgJyZzY29wZT0nICsgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvJyArIEFQSVxyXG4gICAgKyAnJmFjY2Vzc190eXBlPScgKyBnb29nbGVBUElJbmZvLmFjY2Vzc1R5cGVcclxuLy8gICAgKyAnJmluY2x1ZGVfZ3JhbnRlZF9zY29wZXM9dHJ1ZSdcclxuLy8gICAgKyAnJnByb21wdD1ub25lJ1xyXG4gICAgKyAnJnN0YXRlPScgKyBnb29nbGVBUElJbmZvLnN0YXRlO1xyXG4gIGNvbnNvbGUubG9nKCdbR29vZ2xlSW5mby5hY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludF0gJywgdXJsKTtcclxuICByZXR1cm4gdXJsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYXV0aG9yaXNhdGlvbkVuZHBvaW50KG5vbmNlKSB7XHJcblxyXG4gIGxldCB1cmwgPSBnb29nbGVBUElJbmZvLmF1dGhvcmlzYXRpb25FbmRwb2ludFxyXG4gICAgKyAncmVkaXJlY3RfdXJpPScgKyByZWRpcmVjdFVSSVxyXG4gICAgKyAnJnJlc3BvbnNlX3R5cGU9JyArIGdvb2dsZUFQSUluZm8udHlwZVxyXG4gICAgKyAnJmNsaWVudF9pZD0nICsgZ29vZ2xlQVBJSW5mby5jbGllbnRJRFxyXG4gICAgKyAnJnNjb3BlPScgKyBnb29nbGVBUElJbmZvLnNjb3BlXHJcbiAgICArICcmYWNjZXNzX3R5cGU9JyArIGdvb2dsZUFQSUluZm8uYWNjZXNzVHlwZVxyXG4gICAgKyAnJnN0YXRlPScgKyBub25jZTtcclxuICBjb25zb2xlLmxvZygnW0dvb2dsZUluZm8uYXV0aG9yaXNhdGlvbkVuZHBvaW50XSAnLCB1cmwpO1xyXG4gIHJldHVybiB1cmw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhY2Nlc3NUb2tlbklucHV0KGluZm8pIHtcclxuXHJcbiAgcmV0dXJuIHtpbmZvfTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Hb29nbGVJbmZvLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertUserProfile = convertUserProfile;\n\n// function to convert google user profile info into standard reTHINK user profile object\n\nfunction convertUserProfile(googleUserProfile) {\n\n  googleUserProfile.userURL = 'user://google.com/' + googleUserProfile.email;\n\n  if (!googleUserProfile.hasOwnProperty('preferred_username')) googleUserProfile.preferred_username = googleUserProfile.email.split('@')[0];\n\n  return googleUserProfile;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL0dvb2dsZUNvbnZlcnRlci5qcz9kOTc2Il0sIm5hbWVzIjpbImNvbnZlcnRVc2VyUHJvZmlsZSIsImdvb2dsZVVzZXJQcm9maWxlIiwidXNlclVSTCIsImVtYWlsIiwiaGFzT3duUHJvcGVydHkiLCJwcmVmZXJyZWRfdXNlcm5hbWUiLCJzcGxpdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFHZ0JBLGtCLEdBQUFBLGtCOztBQUZoQjs7QUFFTyxTQUFTQSxrQkFBVCxDQUE0QkMsaUJBQTVCLEVBQStDOztBQUVwREEsb0JBQWtCQyxPQUFsQixHQUE0Qix1QkFBdUJELGtCQUFrQkUsS0FBckU7O0FBRUEsTUFBSSxDQUFDRixrQkFBa0JHLGNBQWxCLENBQWlDLG9CQUFqQyxDQUFMLEVBQ0VILGtCQUFrQkksa0JBQWxCLEdBQXVDSixrQkFBa0JFLEtBQWxCLENBQXdCRyxLQUF4QixDQUE4QixHQUE5QixFQUFtQyxDQUFuQyxDQUF2Qzs7QUFFRixTQUFPTCxpQkFBUDtBQUNEIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLy8gZnVuY3Rpb24gdG8gY29udmVydCBnb29nbGUgdXNlciBwcm9maWxlIGluZm8gaW50byBzdGFuZGFyZCByZVRISU5LIHVzZXIgcHJvZmlsZSBvYmplY3RcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VXNlclByb2ZpbGUoZ29vZ2xlVXNlclByb2ZpbGUpIHtcclxuXHJcbiAgZ29vZ2xlVXNlclByb2ZpbGUudXNlclVSTCA9ICd1c2VyOi8vZ29vZ2xlLmNvbS8nICsgZ29vZ2xlVXNlclByb2ZpbGUuZW1haWw7XHJcblxyXG4gIGlmICghZ29vZ2xlVXNlclByb2ZpbGUuaGFzT3duUHJvcGVydHkoJ3ByZWZlcnJlZF91c2VybmFtZScpKSBcclxuICAgIGdvb2dsZVVzZXJQcm9maWxlLnByZWZlcnJlZF91c2VybmFtZSA9IGdvb2dsZVVzZXJQcm9maWxlLmVtYWlsLnNwbGl0KCdAJylbMF07XHJcblxyXG4gIHJldHVybiBnb29nbGVVc2VyUHJvZmlsZTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL0dvb2dsZUNvbnZlcnRlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdpProxy = void 0;\nvar idpInfo = void 0;\nvar convertUserProfile = void 0;\nvar userInfoEndpoint = void 0;\nvar accessTokenInput = void 0;\n\n/**\r\n* Abstract Identity Provider Proxy Protocol Stub to be extended by real Idp Proxies\r\n*/\n\nvar AbstractIdpProxyProtoStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function AbstractIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, AbstractIdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n    IdpProxy = config.idpProxy;\n    convertUserProfile = config.convertUserProfile;\n    accessTokenInput = config.accessTokenInput;\n\n    console.log('[AbstractIdpProxy] constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === config.idpUrl) {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(AbstractIdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n      console.info('[AbstractIdpProxyProtoStub] receiving request: ', msg);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          IdpProxy.generateAssertion(_this.config, params.contents, params.origin, params.usernameHint).then(function (value) {\n\n            value.userProfile = convertUserProfile(value.userProfile);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          //       console.info('validateAssertion');\n          IdpProxy.validateAssertion(_this.config, params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          //     console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessTokenAuthorisationEndpoint':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessTokenAuthorisationEndpoint(_this.config, params.resources).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessToken(_this.config, params.resources, params.login).then(function (value) {\n            console.info('OIDC.getAccessToken result: ', value);\n            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.refreshAccessToken(_this.config, params.token).then(function (value) {\n            console.info('OIDC.refreshAccessToken result: ', value);\n            //            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n    * This function receives a message and a value. It replies the value to the sender of the message received\r\n    *\r\n    * @param  {message}   message received\r\n    * @param  {value}     value to include in the new message to send\r\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = {\n        id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value }\n      };\n\n      console.log('[AbstractIdpProxyProtoStub.replyMessage] ', message);\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[AbstractIdpProxyProtoStub.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return AbstractIdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nexports.default = AbstractIdpProxyProtoStub;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvQWJzdHJhY3RJZHBQcm94eVN0dWIuanM/MzQ2YyJdLCJuYW1lcyI6WyJJZHBQcm94eSIsImlkcEluZm8iLCJjb252ZXJ0VXNlclByb2ZpbGUiLCJ1c2VySW5mb0VuZHBvaW50IiwiYWNjZXNzVG9rZW5JbnB1dCIsIkFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiX3RoaXMiLCJtZXNzYWdlQnVzIiwiaWRwUHJveHkiLCJjb25zb2xlIiwibG9nIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsImlkcFVybCIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwicGFyYW1zIiwiYm9keSIsImluZm8iLCJtZXRob2QiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImNvbnRlbnRzIiwib3JpZ2luIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInZhbHVlIiwidXNlclByb2ZpbGUiLCJyZXBseU1lc3NhZ2UiLCJlcnJvciIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiYXNzZXJ0aW9uIiwicmVmcmVzaEFzc2VydGlvbiIsImlkZW50aXR5IiwiZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJyZXNvdXJjZXMiLCJnZXRBY2Nlc3NUb2tlbiIsImxvZ2luIiwiaW5wdXQiLCJyZWZyZXNoQWNjZXNzVG9rZW4iLCJ0b2tlbiIsIm1lc3NhZ2UiLCJpZCIsInR5cGUiLCJmcm9tIiwiY29kZSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUlBLGlCQUFKO0FBQ0EsSUFBSUMsZ0JBQUo7QUFDQSxJQUFJQywyQkFBSjtBQUNBLElBQUlDLHlCQUFKO0FBQ0EsSUFBSUMseUJBQUo7O0FBRUE7Ozs7SUFHTUMseUI7O0FBRUo7Ozs7Ozs7O0FBUUEscUNB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S0FqQixjQUFRQyxHQUFSLENBQVksMkNBQVosRUFBeUQrQixPQUF6RDs7QUFFQW5DLFlBQU1DLFVBQU4sQ0FBaUJ1QyxXQUFqQixDQUE2QkwsT0FBN0I7QUFDRDs7O2dDQUVXZixLLEVBQU9xQixNLEVBQVE7QUFDekIsVUFBSXpDLFFBQVEsSUFBWjs7QUFFQUcsY0FBUUMsR0FBUixDQUFZLHlDQUFaLEVBQXVEZ0IsS0FBdkQ7O0FBRUFwQixZQUFNMEMsTUFBTixHQUFldEIsS0FBZjs7QUFFQSxVQUFJZCxNQUFNO0FBQ1IrQixjQUFNLFFBREU7QUFFUkMsY0FBTXRDLE1BQU1ILG1CQUZKO0FBR1JVLFlBQUlQLE1BQU1ILG1CQUFOLEdBQTRCLFNBSHhCO0FBSVJlLGNBQU07QUFDSlEsaUJBQU9BO0FBREg7QUFKRSxPQUFWOztBQVNBLFVBQUlxQixNQUFKLEVBQVk7QUFDVm5DLFlBQUlNLElBQUosQ0FBUytCLElBQVQsR0FBZ0JGLE1BQWhCO0FBQ0Q7O0FBRUR6QyxZQUFNQyxVQUFOLENBQWlCdUMsV0FBakIsQ0FBNkJsQyxHQUE3QjtBQUNEOzs7Ozs7QUFHSDs7QUFFQTs7Ozs7Ozs7O2tCQU9lVix5QiIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IElkcFByb3h5O1xyXG5sZXQgaWRwSW5mbztcclxubGV0IGNvbnZlcnRVc2VyUHJvZmlsZTtcclxubGV0IHVzZXJJbmZvRW5kcG9pbnQ7XHJcbmxldCBhY2Nlc3NUb2tlbklucHV0O1xyXG5cclxuLyoqXHJcbiogQWJzdHJhY3QgSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YiB0byBiZSBleHRlbmRlZCBieSByZWFsIElkcCBQcm94aWVzXHJcbiovXHJcbmNsYXNzIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIge1xyXG5cclxuICAvKipcclxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXHJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxyXG4gICpcclxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7XHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xyXG4gICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgSWRwUHJveHkgPSBjb25maWcuaWRwUHJveHk7XHJcbiAgICBjb252ZXJ0VXNlclByb2ZpbGUgPSBjb25maWcuY29udmVydFVzZXJQcm9maWxlO1xyXG4gICAgYWNjZXNzVG9rZW5JbnB1dCA9IGNvbmZpZy5hY2Nlc3NUb2tlbklucHV0O1xyXG5cclxuXHJcbiAgICBjb25zb2xlLmxvZygnW0Fic3RyYWN0SWRwUHJveHldIGNvbnN0cnVjdG9yJyk7XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgaWYgKG1zZy50byA9PT0gY29uZmlnLmlkcFVybCkge1xyXG5cclxuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xyXG4gICovXHJcbiAgcmVxdWVzdFRvSWRwKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7XHJcbiAgICAvL2NvbnNvbGUuaW5mbygncmVxdWVzdFRvSWRwOicsIG1zZy5ib2R5Lm1ldGhvZCk7XHJcbiAgICBjb25zb2xlLmluZm8oJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViXSByZWNlaXZpbmcgcmVxdWVzdDogJywgbXNnKTtcclxuXHJcbiAgICBzd2l0Y2ggKG1zZy5ib2R5Lm1ldGhvZCkge1xyXG4gICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XHJcbiAgICAgICAgSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb24oX3RoaXMuY29uZmlnLCBwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgIHZhbHVlLnVzZXJQcm9maWxlID0gY29udmVydFVzZXJQcm9maWxlKHZhbHVlLnVzZXJQcm9maWxlKTtcclxuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxyXG4gICAgICAgIC8vICAgICAgIGNvbnNvbGUuaW5mbygndmFsaWRhdGVBc3NlcnRpb24nKTtcclxuICAgICAgICBJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvbihfdGhpcy5jb25maWcsIHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOyB9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdyZWZyZXNoQXNzZXJ0aW9uJzpcclxuICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdyZWZyZXNoQXNzZXJ0aW9uJyk7XHJcbiAgICAgICAgSWRwUHJveHkucmVmcmVzaEFzc2VydGlvbihwYXJhbXMuaWRlbnRpdHkpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOyB9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCc6XHJcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygnZ2V0QWNjZXNzVG9rZW4nKTtcclxuICAgICAgICBJZHBQcm94eS5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChfdGhpcy5jb25maWcsIHBhcmFtcy5yZXNvdXJjZXMpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZ2V0QWNjZXNzVG9rZW4nOlxyXG4gICAgICAgIC8vICAgICBjb25zb2xlLmluZm8oJ2dldEFjY2Vzc1Rva2VuJyk7XHJcbiAgICAgICAgSWRwUHJveHkuZ2V0QWNjZXNzVG9rZW4oX3RoaXMuY29uZmlnLCBwYXJhbXMucmVzb3VyY2VzLCBwYXJhbXMubG9naW4pLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdPSURDLmdldEFjY2Vzc1Rva2VuIHJlc3VsdDogJywgdmFsdWUpO1xyXG4gICAgICAgICAgICB2YWx1ZS5pbnB1dCA9IGFjY2Vzc1Rva2VuSW5wdXQodmFsdWUuaW5wdXQpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XHJcbiAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdyZWZyZXNoQWNjZXNzVG9rZW4nOlxyXG4gICAgICAgIC8vICAgICBjb25zb2xlLmluZm8oJ2dldEFjY2Vzc1Rva2VuJyk7XHJcbiAgICAgICAgSWRwUHJveHkucmVmcmVzaEFjY2Vzc1Rva2VuKF90aGlzLmNvbmZpZywgcGFyYW1zLnRva2VuKS50aGVuKFxyXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnT0lEQy5yZWZyZXNoQWNjZXNzVG9rZW4gcmVzdWx0OiAnLCB2YWx1ZSk7XHJcbi8vICAgICAgICAgICAgdmFsdWUuaW5wdXQgPSBhY2Nlc3NUb2tlbklucHV0KHZhbHVlLmlucHV0KTtcclxuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqXHJcbiAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxyXG4gICovXHJcbiAgcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IG1lc3NhZ2UgPSB7XHJcbiAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxyXG4gICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHZhbHVlIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnJlcGx5TWVzc2FnZV0gJywgbWVzc2FnZSk7XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcclxuXHJcbiAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAndXBkYXRlJyxcclxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcclxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAocmVhc29uKSB7XHJcbiAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XHJcblxyXG4vKipcclxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXHJcbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvQWJzdHJhY3RJZHBQcm94eVN0dWIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "35.60",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5fe88c210039898a45c75f6de8c56f417",
    "constraints": {
      "browser": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy",
    "interworking": true
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\nvar https = __webpack_require__(1);\nvar btoa = __webpack_require__(2);\nvar atob = __webpack_require__(3);\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\n//let URL = i.tokenEndpoint + 'code=' + code + '&client_id=' +\n//        i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' +\n//        i.redirectURI + '&grant_type=authorization_code';\n\nfunction sendHTTPRequest(method, url) {\n  return new Promise(function (resolve, reject) {\n    //return makeLocalRequest(method, url, undefined);\n    console.log('sendHTTPRequest:url', url);\n    var splitedText = url.split('/');\n    var host = splitedText[2];\n    var replacedURL = url.replace(splitedText[0] + '//' + splitedText[2], '');\n    var options = {\n      hostname: host,\n      port: 443,\n      path: replacedURL,\n      method: method\n    };\n    console.log('sendHTTPRequest:options', options);\n\n    var req = https.request(options, function (res) {\n      console.log('sendHTTPRequest:statusCode:', res.statusCode);\n      console.log('sendHTTPRequest:headers:', res.headers);\n      var stream = '';\n      res.on('data', function (d) {\n        stream += d;\n      });\n      res.on('end', function () {\n        console.log('sendHTTPRequest:data:', stream);\n        resolve(stream);\n      });\n    });\n\n    req.on('error', function (e) {\n      console.error('https_return: ' + e);\n    });\n    req.end();\n  });\n}\n\n/**\r\n* @returns {variable<string>}\r\n**/\nfunction mapProtocol(url) {\n  var protocolmap = {\n    'localhost://': 'https://',\n    'undefined://': 'https://',\n    'hyperty-catalogue://': 'https://',\n    'https://': 'https://',\n    'http://': 'https://'\n  };\n\n  var foundProtocol = false;\n  var resultURL = undefined;\n  for (var protocol in protocolmap) {\n    if (url.slice(0, protocol.length) === protocol) {\n      resultURL = protocolmap[protocol] + url.slice(protocol.length, url.length);\n      foundProtocol = true;\n      break;\n    }\n  }\n\n  if (!foundProtocol) {\n    throw new Error('Invalid protocol of url: ' + url);\n  }\n  return resultURL;\n}\n\nvar getAuth = function getAuth(contents) {\n  var i = googleInfo;\n\n  return new Promise(function (resolve, reject) {\n    var URL = i.authorisationEndpoint + 'scope=' + i.scope + '&client_id=' + i.clientID + '&redirect_uri=' + i.redirectURI + '&response_type=' + i.type + '&state=' + i.state + '&access_type=' + i.accessType + '&nonce=' + contents + '&prompt=none';\n\n    sendHTTPRequest('POST', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      console.log('ERROR:', error);\n      reject(error);\n    });\n  });\n};\n\n/**\r\n* Function to exchange the code received to the id Token, access token and a refresh token\r\n*\r\n*/\nvar exchangeCode = function exchangeCode(code) {\n  var i = googleInfo;\n\n  return new Promise(function (resolve, reject) {\n\n    var URL = i.tokenEndpoint + 'code=' + code + '&client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&redirect_uri=' + i.redirectURI + '&grant_type=authorization_code';\n\n    sendHTTPRequest('POST', URL).then(function (info) {\n      console.log('[IDPROXY.exchangeCode:info]', info);\n      resolve(info);\n    }, function (error) {\n      console.log('[IDPROXY.exchangeCode:err]', error.message);\n      //reject(error);\n    });\n  });\n};\n\n/**\r\n* Identity Provider Proxy\r\n*/\n\nvar idp = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJS', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n\n      // atob may need to be required for nodejs\n      // var atob = require('atob');\n      var decodedContent = atob(assertion);\n      console.log('validateAssertionProxyNODEJS:decodedContent', decodedContent);\n\n      var content = JSON.parse(decodedContent);\n      console.log('validateAssertionProxyNODEJS:content', content);\n\n      var idTokenSplited = content.tokenID.split('.');\n\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  * TODO add details of the implementation, and improve implementation\r\n  *\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertion:contents]', contents);\n    console.log('[IDPROXY.generateAssertion:origin]', origin);\n    console.log('[IDPROXY.generateAssertion:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      //the hint field contains the information obtained after the user authentication\n      // if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n      var i = googleInfo;\n\n      if (!hint) {\n        resolve('hint');\n      } else {\n\n        console.log('generateMessageResponse:');\n        return resolve(generateMessageResponse);\n\n        // the request have already been made, so idpPRoxy will exchange the tokens along to the idp, to obtain the information necessary\n        var accessToken = urlParser(hint, 'access_token');\n        var idToken = urlParser(hint, 'id_token');\n        var code = urlParser(hint, 'code');\n\n        exchangeCode(code).then(function (value) {\n\n          console.log('TIAGO exchange code');\n\n          //obtain information about the user\n          var infoTokenURL = i.userinfo + value.access_token;\n          sendHTTPRequest('GET', infoTokenURL).then(function (infoToken) {\n\n            console.log('TIAGO info token url');\n            var identityBundle = { accessToken: value.access_token, idToken: value.id_token, refreshToken: value.refresh_token, tokenType: value.token_type, infoToken: infoToken };\n\n            var idTokenURL = i.tokenInfo + value.id_token;\n\n            //obtain information about the user idToken\n            sendHTTPRequest('GET', idTokenURL).then(function (idToken) {\n\n              console.log('TIAGO id token url');\n              identityBundle.tokenIDJSON = idToken;\n              identityBundle.expires = idToken.exp;\n              identityBundle.email = idToken.email;\n\n              var assertion = btoa(JSON.stringify({ tokenID: value.id_token, tokenIDJSON: idToken }));\n              var idpBundle = { domain: 'google.com', protocol: 'OIDC' };\n\n              //TODO delete later the field infoToken, and delete the need in the example\n              var returnValue = { assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken };\n\n              identities[nIdentity] = returnValue;\n              ++nIdentity;\n\n              console.log('[IDPROXY.generateAssertion:returnValue]', returnValue);\n              resolve(returnValue);\n            }, function (e) {\n\n              reject(e);\n            });\n          }, function (error) {\n\n            reject(error);\n          });\n        }, function (err) {\n          console.log('[IDPROXY.generateAssertion:exchangeCode]', err);\n          //reject(err);\n        });\n      }\n    });\n  }\n\n  /**\r\n  * Identity Provider Proxy Protocol Stub\r\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('Google->NODEJS constructor');\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://google.com') {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n    * This function receives a message and a value. It replies the value to the sender of the message received\r\n    *\r\n    * @param  {message}   message received\r\n    * @param  {value}     value to include in the new message to send\r\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}\n\nvar generateMessageResponse = { assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n  idp: {\n    domain: 'nodejs-idp',\n    protocol: 'OIDC' },\n  info: {\n    accessToken: 'ya29.GlsbBalGJJmVi_N5IDyqMI3JxkO5eLV4333I93eQBCpNAofEqtU4UkWHh8drVlrViVTqt6Jk3P86_CDt4sKVh0G9AbTk1rVW3MAxcFhEUFE-KMXdDK_KsMf6fNQk',\n    idToken: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDMxNTQ0OTE3MTEyNzUxMjYzNDIiLCJlbWFpbCI6InRlc3RhbmR0aGluazMyMUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6Ii03dmE2M1VvdWVEMkx6S1czRl82OFEiLCJub25jZSI6Ils0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0iLCJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJpYXQiOjE1MTI2NDYwODAsImV4cCI6MTUxMjY0OTY4MH0.teI1m90VrAEgKtv3PIG7J6sAhd_QY7mi3QsWLYbakWJqL6f4gmFyddEwqKxGY4x7sMLtj-Uc0ZKuWX_qE7K6iwjhMlzbTHK8LehyILOCY7Xsuoa6MqfT1Wp8Bg0TfJHuOnbZ_ymxPMQKOkfZiPVS5iqsO3bneQzTr0JbqtQ7xWsJS6nz-iA6rEdKjfC70amW0iSI--lWmX7sZaTeZc7ug4r4Z5-zLF39zwQPOwEQAlT-ZA_y1gO_4VueDeZmWmVuz2kJO_91h6qE5nZOtwWVuCrdw-9Iaw7z2DPes_j5RD8lDovR6JM0dj2JqzL9VpTcmF27AJsc1jhQLsLWblcxZw',\n    refreshToken: '1/6cCGEWyzx2uO2bH2F1A8v6KDTG4rP0CXc-XUQ12-U0o',\n    tokenType: 'Bearer',\n    infoToken: {\n      sub: '103154491711275126342',\n      name: 'test think',\n      given_name: 'test',\n      family_name: 'think',\n      picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      email: 'testandthink321@gmail.com',\n      email_verified: true,\n      locale: 'en' },\n    tokenIDJSON: { 'azp': '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      aud: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      sub: '103154491711275126342',\n      email: 'testandthink321@gmail.com',\n      email_verified: 'true',\n      at_hash: '-7va63UoueD2LzKW3F_68Q',\n      nonce: '[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1]',\n      iss: 'https://accounts.nodejs-idp',\n      iat: '1512646080',\n      exp: '1512649680',\n      alg: 'RS256',\n      kid: '477d17972d2a001074d586b588976d234296801e' },\n    expires: '1512649680',\n    email: 'testandthink321@gmail.com' },\n  infoToken: { sub: '103154491711275126342',\n    name: 'test think',\n    given_name: 'test',\n    family_name: 'think',\n    picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n    email: 'testandthink321@gmail.com',\n    email_verified: true,\n    locale: 'en' },\n  identity: 'user://nodejs-idp/testandthink321@gmail.com',\n  messageInfo: { userProfile: { username: 'testandthink321@gmail.com',\n      cn: 'testandthink321',\n      avatar: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      locale: 'en',\n      userURL: 'user://nodejs-idp/testandthink321@gmail.com' },\n    idp: 'nodejs-idp',\n    assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n    expires: '1512649680' }\n  /*\r\n  keyPair:{\r\n  public:[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1],\r\n  private:[48,130,4,191,2,1,0,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,4,130,4,169,48,130,4,165,2,1,0,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1,2,130,1,0,103,244,137,118,116,82,14,203,102,107,253,88,12,199,222,60,243,136,86,157,74,224,190,53,113,57,157,250,49,130,96,31,252,136,152,70,143,17,215,96,103,51,18,35,141,212,210,205,9,216,83,70,245,71,138,119,112,229,164,176,9,37,81,161,193,154,68,249,115,106,201,6,12,225,144,126,141,210,141,242,128,159,221,163,222,21,233,230,167,206,59,24,250,233,81,122,102,26,6,233,72,133,47,77,155,238,86,6,139,24,131,163,179,112,48,247,142,6,207,204,173,223,140,199,150,95,123,152,202,155,131,238,62,96,133,4,217,51,121,30,38,178,189,216,44,35,241,93,7,62,90,111,216,66,209,243,128,234,141,84,135,181,13,38,220,114,245,240,178,95,220,206,11,186,234,213,66,121,83,68,89,75,46,183,145,183,147,160,215,118,198,125,181,146,30,251,58,87,47,209,237,97,24,47,179,6,110,242,99,150,226,148,198,174,146,101,213,87,178,10,223,105,18,56,53,22,212,158,170,176,51,86,145,125,124,44,9,85,19,144,246,170,78,124,30,32,12,166,174,139,77,63,173,82,10,153,2,129,129,0,248,18,143,246,137,136,145,219,178,39,27,94,64,90,47,163,114,60,63,187,131,143,244,16,42,128,231,117,92,98,219,155,62,107,252,17,245,45,160,225,103,142,72,36,193,150,235,214,175,62,212,56,45,9,0,60,114,107,134,228,204,131,131,214,94,201,148,159,99,139,181,13,119,38,30,107,166,165,203,43,34,20,207,171,32,58,167,62,196,153,103,204,213,247,48,111,227,59,95,97,194,187,53,10,247,108,58,86,28,29,113,8,110,171,220,245,11,82,233,223,91,68,166,117,174,187,62,77,2,129,129,0,235,118,2,105,239,212,30,104,157,41,109,11,248,152,22,236,97,40,153,131,228,5,86,187,113,126,144,76,141,79,110,250,146,152,49,58,156,201,176,92,189,209,30,112,108,175,204,204,247,164,46,129,239,98,127,49,145,218,63,193,124,174,18,98,201,99,154,162,138,78,159,253,3,248,3,209,36,239,193,155,193,5,19,236,37,78,118,135,250,199,7,141,248,120,36,136,93,98,174,60,18,215,93,174,107,141,116,145,167,221,210,169,247,67,254,222,161,134,63,221,90,87,42,99,227,81,173,151,2,129,129,0,133,23,168,103,83,232,146,160,181,23,40,38,204,13,214,203,49,41,195,227,189,181,8,243,119,106,75,67,250,250,10,234,98,118,26,250,35,121,132,124,10,76,26,198,165,154,108,19,117,88,23,17,192,143,184,177,181,141,157,4,185,248,193,77,204,243,7,170,240,4,111,113,183,0,27,136,20,19,149,74,33,241,218,108,236,80,171,148,16,116,97,109,83,74,88,145,94,239,102,192,19,114,207,5,128,51,111,164,237,86,154,99,52,197,62,57,182,6,152,245,61,137,58,105,159,2,84,109,2,129,129,0,226,67,111,132,95,91,101,177,63,189,44,53,193,184,92,230,223,98,133,74,209,86,52,7,65,195,206,100,81,178,144,65,167,151,42,79,89,149,18,173,188,21,244,251,49,230,41,150,153,46,35,38,231,99,174,56,115,32,215,253,85,147,108,197,147,34,236,216,222,177,57,90,136,114,207,48,46,31,90,220,18,58,143,239,111,214,27,95,6,36,53,229,62,108,45,39,1,30,47,178,56,164,206,56,42,208,46,193,61,31,147,45,147,23,187,22,50,255,111,229,132,199,152,75,142,136,209,151,2,129,129,0,165,56,232,76,55,57,240,159,92,207,220,143,130,30,57,234,251,172,171,180,54,159,229,96,246,73,112,146,75,157,242,201,161,218,37,176,35,170,50,90,148,102,191,199,239,174,78,72,67,85,199,45,149,145,132,161,212,33,157,75,216,79,39,233,18,210,255,26,72,229,239,44,12,147,158,176,192,95,126,32,175,23,226,131,139,197,175,193,62,8,151,252,68,154,94,89,189,125,90,30,36,175,73,230,194,13,233,247,123,60,241,47,171,51,189,112,111,213,141,89,70,249,236,63,236,110,115,208]\r\n  }*/\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL05vZGVqc1Byb3h5U3R1Yi5pZHAuanM/M2YyMiJdLCJuYW1lcyI6WyJhY3RpdmF0ZSIsImlkZW50aXRpZXMiLCJuSWRlbnRpdHkiLCJodHRwcyIsInJlcXVpcmUiLCJidG9hIiwiYXRvYiIsImdvb2dsZUluZm8iLCJjbGllbnRTZWNyZXQiLCJjbGllbnRJRCIsInJlZGlyZWN0VVJJIiwiaXNzdWVyIiwidG9rZW5FbmRwb2ludCIsImp3a3NVcmkiLCJhdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJ1c2VyaW5mbyIsInRva2VuSW5mbyIsImFjY2Vzc1R5cGUiLCJ0eXBlIiwic2NvcGUiLCJzdGF0ZSIsInVybFBhcnNlciIsInVybCIsIm5hbWUiLCJyZXBsYWNlIiwicmVnZXhTIiwicmVnZXgiLCJSZWdFeHAiLCJyZXN1bHRzIiwiZXhlYyIsInNlbmRIVFRQUmVxdWVzdCIsIm1ldGhvZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiY29uc29sZSIsImxvZyIsInNwbGl0ZWRUZXh0Iiwic3BsaXQiLCJob3N0IiwicmVwbGFjZWRVUkwiLCJvcHRpb25zIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aCIsInJlcSIsInJlcXVlc3QiLCJyZXMiLCJzdGF0dXNDb2RlIiwiaGVhZGVycyIsInN0cmVhbSIsIm9uIiwiZCIsImUiLCJlcnJvciIsImVuZCIsIm1hcFByb3RvY29sIiwicHJvdG9jb2xtYXAiLCJmb3VuZFByb3RvY29sIiwicmVzdWx0VVJMIiwidW5kZWZpbmVkIiwicHJvdG9jb2wiLCJzbGljZSIsImxlbmd0aCIsIkVycm9yIiwiZ2V0QXV0aCIsImNvbnRlbnRzIiwiaSIsIlVSTCIsInRoZW4iLCJpbmZvIiwiZXhjaGFuZ2VDb2RlIiwiY29kZSIsIm1lc3NhZ2UiLCJpZHAiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsIm9yaWdpbiIsImRlY29kZWRDb250ZW50IiwiY29udGVudCIsIkpTT04iLCJwYXJzZSIsImlkVG9rZW5TcGxpdGVkIiwidG9rZW5JRCIsImlkVG9rZW4iLCJpZGVudGl0eSIsImVtYWlsIiwibm9uY2UiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImhpbnQiLCJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSIsImFjY2Vzc1Rva2VuIiwidmFsdWUiLCJpbmZvVG9rZW5VUkwiLCJhY2Nlc3NfdG9rZW4iLCJpbmZvVG9rZW4iLCJpZGVudGl0eUJ1bmRsZSIsImlkX3Rva2VuIiwicmVmcmVzaFRva2VuIiwicmVmcmVzaF90b2tlbiIsInRva2VuVHlwZSIsInRva2VuX3R5cGUiLCJpZFRva2VuVVJMIiwidG9rZW5JREpTT04iLCJleHBpcmVzIiwiZXhwIiwic3RyaW5naWZ5IiwiaWRwQnVuZGxlIiwiZG9tYWluIiwicmV0dXJuVmFsdWUiLCJlcnIiLCJOb2RlanNQcm94eVN0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiX3RoaXMiLCJtZXNzYWdlQnVzIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwicGFyYW1zIiwiYm9keSIsInVzZXJuYW1lSGludCIsInJlcGx5TWVzc2FnZSIsImlkIiwiZnJvbSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyIsImluc3RhbmNlIiwic3ViIiwiZ2l2ZW5fbmFtZSIsImZhbWlseV9uYW1lIiwicGljdHVyZSIsImVtYWlsX3ZlcmlmaWVkIiwibG9jYWxlIiwiYXVkIiwiYXRfaGFzaCIsImlzcyIsImlhdCIsImFsZyIsImtpZCIsIm1lc3NhZ2VJbmZvIiwidXNlclByb2ZpbGUiLCJ1c2VybmFtZSIsImNuIiwiYXZhdGFyIiwidXNlclVSTCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBMFh3QkEsUTs7OztBQTFYeEIsSUFBSUMsYUFBYSxFQUFqQjtBQUNBLElBQUlDLFlBQVksQ0FBaEI7QUFDQTtBQUNBO0FBQ0Es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SVZDLG1CQUFZLE9BSkY7QUFLVkMsZUFBUSw4RkFMRTtBQU1WbEQsYUFBTSwyQkFOSTtBQU9WbUQsc0JBQWUsSUFQTDtBQVFWQyxjQUFPLElBUkcsRUFMTDtBQWNMbkMsaUJBQVksRUFBQyxPQUFNLDBFQUFQO0FBQ1pvQyxXQUFJLDBFQURRO0FBRVpOLFdBQUksdUJBRlE7QUFHWi9DLGFBQU0sMkJBSE07QUFJWm1ELHNCQUFlLE1BSkg7QUFLWkcsZUFBUSx3QkFMSTtBQU1ackQsYUFBTSwrL0JBTk07QUFPWnNELFdBQUksNkJBUFE7QUFRWkMsV0FBSSxZQVJRO0FBU1pyQyxXQUFJLFlBVFE7QUFVWnNDLFdBQUksT0FWUTtBQVdaQyxXQUFJLDBDQVhRLEVBZFA7QUEwQkx4QyxhQUFRLFlBMUJIO0FBMkJMbEIsV0FBTSwyQkEzQkQsRUFMTDtBQWlDQVMsYUFBVSxFQUFDc0MsS0FBSSx1QkFBTDtBQUNWOUcsVUFBSyxZQURLO0FBRVYrRyxnQkFBVyxNQUZEO0FBR1ZDLGlCQUFZLE9BSEY7QUFJVkMsYUFBUSw4RkFKRTtBQUtWbEQsV0FBTSwyQkFMSTtBQU1WbUQsb0JBQWUsSUFOTDtBQU9WQyxZQUFPLElBUEcsRUFqQ1Y7QUF5Q0FyRCxZQUFTLDZDQXpDVDtBQTBDQTRELGVBQVksRUFBQ0MsYUFBWSxFQUFDQyxVQUFTLDJCQUFWO0FBQ3pCQyxVQUFHLGlCQURzQjtBQUV6QkMsY0FBTyw4RkFGa0I7QUFHekJYLGNBQU8sSUFIa0I7QUFJekJZLGVBQVEsNkNBSmlCLEVBQWI7QUFLWjVFLFNBQUksWUFMUTtBQU1aRSxlQUFVLGs2SkFORTtBQU9aNEIsYUFBUSxZQVBJO0FBUVo7Ozs7O0FBbERBLENBREEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBpZGVudGl0aWVzID0ge307XHJcbmxldCBuSWRlbnRpdHkgPSAwO1xyXG4vL2ltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcclxuLy9sZXQgZmV0Y2ggPSByZXF1aXJlKFwibm9kZS1mZXRjaFwiKTtcclxuY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xyXG5sZXQgYnRvYSA9IHJlcXVpcmUoJ2J0b2EnKTtcclxubGV0IGF0b2IgPSByZXF1aXJlKCdhdG9iJyk7XHJcblxyXG5sZXQgZ29vZ2xlSW5mbyA9IHtcclxuICBjbGllbnRTZWNyZXQ6ICAgICAgICAgICdYeDRyS3VjYjVaWVRhWGxjWlg5SExmWlcnLFxyXG4gIGNsaWVudElEOiAgICAgICAgICAgICAgJzgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbScsXHJcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICAnaHR0cHM6Ly9sb2NhbGhvc3QnLFxyXG4gIGlzc3VlcjogICAgICAgICAgICAgICAgJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsXHJcbiAgdG9rZW5FbmRwb2ludDogICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuPycsXHJcbiAgandrc1VyaTogICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzPycsXHJcbiAgYXV0aG9yaXNhdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3YyL2F1dGg/JyxcclxuICB1c2VyaW5mbzogICAgICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdXNlcmluZm8/YWNjZXNzX3Rva2VuPScsXHJcbiAgdG9rZW5JbmZvOiAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0nLFxyXG4gIGFjY2Vzc1R5cGU6ICAgICAgICAgICAgJ29mZmxpbmUnLFxyXG4gIHR5cGU6ICAgICAgICAgICAgICAgICAgJ2NvZGUnLFxyXG4gIHNjb3BlOiAgICAgICAgICAgICAgICAgJ29wZW5pZCUyMGVtYWlsJTIwcHJvZmlsZScsXHJcbiAgc3RhdGU6ICAgICAgICAgICAgICAgICAnc3RhdGUnXHJcbn07XHJcblxyXG4vL2Z1bmN0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgaW4gdGhlIGdpdmVuIFVSTCB0byBvYmF0aW4gY2VydGFpbiB2YWx1ZXNcclxuZnVuY3Rpb24gdXJsUGFyc2VyKHVybCwgbmFtZSkge1xyXG4gIG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXFxdJyk7XHJcbiAgbGV0IHJlZ2V4UyA9ICdbXFxcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknO1xyXG4gIGxldCByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTtcclxuICBsZXQgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKTtcclxuICBpZiAocmVzdWx0cyA9PT0gbnVsbClcclxuICByZXR1cm4gJyc7XHJcbiAgZWxzZVxyXG4gIHJldHVybiByZXN1bHRzWzFdO1xyXG59XHJcblxyXG5cclxuLy9sZXQgVVJMID0gaS50b2tlbkVuZHBvaW50ICsgJ2NvZGU9JyArIGNvZGUgKyAnJmNsaWVudF9pZD0nICtcclxuICAvLyAgICAgICAgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZGlyZWN0X3VyaT0nICtcclxuICAvLyAgICAgICAgaS5yZWRpcmVjdFVSSSArICcmZ3JhbnRfdHlwZT1hdXRob3JpemF0aW9uX2NvZGUnO1xyXG5cclxuZnVuY3Rpb24gc2VuZEhUVFBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XHJcbiAgLy9yZXR1cm4gbWFrZUxvY2FsUmVxdWVzdChtZXRob2QsIHVybCwgdW5kZWZpbmVkKTtcclxuICAgIGNvbnNvbGUubG9nKCdzZW5kSFRUUFJlcXVlc3Q6dXJsJywgdXJsKTtcclxuICAgIGxldCBzcGxpdGVkVGV4dCA9IHVybC5zcGxpdCgnLycpO1xyXG4gICAgbGV0IGhvc3QgPSBzcGxpdGVkVGV4dFsyXTtcclxuICAgIGxldCByZXBsYWNlZFVSTCA9IHVybC5yZXBsYWNlKHNwbGl0ZWRUZXh0WzBdICsgJy8vJyArIHNwbGl0ZWRUZXh0WzJdLCAnJyk7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBob3N0bmFtZTogaG9zdCxcclxuICAgICAgcG9ydDogNDQzLFxyXG4gICAgICBwYXRoOiByZXBsYWNlZFVSTCxcclxuICAgICAgbWV0aG9kOiBtZXRob2RcclxuICAgIH07XHJcbiAgICBjb25zb2xlLmxvZygnc2VuZEhUVFBSZXF1ZXN0Om9wdGlvbnMnLCBvcHRpb25zKTtcclxuXHJcbiAgICBjb25zdCByZXEgPSBodHRwcy5yZXF1ZXN0KG9wdGlvbnMsIChyZXMpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ3NlbmRIVFRQUmVxdWVzdDpzdGF0dXNDb2RlOicsIHJlcy5zdGF0dXNDb2RlKTtcclxuICAgICAgY29uc29sZS5sb2coJ3NlbmRIVFRQUmVxdWVzdDpoZWFkZXJzOicsIHJlcy5oZWFkZXJzKTtcclxuICAgICAgbGV0IHN0cmVhbSA9ICcnO1xyXG4gICAgICByZXMub24oJ2RhdGEnLCAoZCkgPT4ge1xyXG4gICAgICAgIHN0cmVhbSArPSBkO1xyXG4gICAgICB9KTtcclxuICAgICAgcmVzLm9uKCdlbmQnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3NlbmRIVFRQUmVxdWVzdDpkYXRhOicsIHN0cmVhbSk7XHJcbiAgICAgICAgcmVzb2x2ZShzdHJlYW0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJlcS5vbignZXJyb3InLCAoZSkgPT4ge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdodHRwc19yZXR1cm46ICcgKyBlKTtcclxuICAgIH0pO1xyXG4gICAgcmVxLmVuZCgpO1xyXG5cclxuICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiogQHJldHVybnMge3ZhcmlhYmxlPHN0cmluZz59XHJcbioqL1xyXG5mdW5jdGlvbiBtYXBQcm90b2NvbCh1cmwpIHtcclxuICBsZXQgcHJvdG9jb2xtYXAgPSB7XHJcbiAgICAnbG9jYWxob3N0Oi8vJzogJ2h0dHBzOi8vJyxcclxuICAgICd1bmRlZmluZWQ6Ly8nOiAnaHR0cHM6Ly8nLFxyXG4gICAgJ2h5cGVydHktY2F0YWxvZ3VlOi8vJzogJ2h0dHBzOi8vJyxcclxuICAgICdodHRwczovLyc6ICdodHRwczovLycsXHJcbiAgICAnaHR0cDovLyc6ICdodHRwczovLydcclxuICB9O1xyXG5cclxuICBsZXQgZm91bmRQcm90b2NvbCA9IGZhbHNlO1xyXG4gIGxldCByZXN1bHRVUkwgPSB1bmRlZmluZWQ7XHJcbiAgZm9yIChsZXQgcHJvdG9jb2wgaW4gcHJvdG9jb2xtYXApIHtcclxuICAgIGlmICh1cmwuc2xpY2UoMCwgcHJvdG9jb2wubGVuZ3RoKSA9PT0gcHJvdG9jb2wpIHtcclxuICAgICAgcmVzdWx0VVJMID0gcHJvdG9jb2xtYXBbcHJvdG9jb2xdICsgdXJsLnNsaWNlKHByb3RvY29sLmxlbmd0aCwgdXJsLmxlbmd0aCk7XHJcbiAgICAgIGZvdW5kUHJvdG9jb2wgPSB0cnVlO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmICghZm91bmRQcm90b2NvbCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHByb3RvY29sIG9mIHVybDogJyArIHVybCk7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHRVUkw7XHJcbn1cclxuXHJcblxyXG5cclxubGV0IGdldEF1dGggPSAoZnVuY3Rpb24oY29udGVudHMpIHtcclxuICBsZXQgaSA9IGdvb2dsZUluZm87XHJcblxyXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGxldCBVUkwgPSBpLmF1dGhvcmlzYXRpb25FbmRwb2ludCArICdzY29wZT0nICsgaS5zY29wZSArICcmY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZyZWRpcmVjdF91cmk9JyArIGkucmVkaXJlY3RVUkkgKyAnJnJlc3BvbnNlX3R5cGU9JyArIGkudHlwZSArICcmc3RhdGU9JyArIGkuc3RhdGUgKyAnJmFjY2Vzc190eXBlPScgKyBpLmFjY2Vzc1R5cGUgKyAnJm5vbmNlPScgKyBjb250ZW50cyArICcmcHJvbXB0PW5vbmUnIDtcclxuXHJcbiAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBVUkwpLnRoZW4oZnVuY3Rpb24oaW5mbykge1xyXG4gICAgICByZXNvbHZlKGluZm8pO1xyXG4gICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5sb2coJ0VSUk9SOicsIGVycm9yKTtcclxuICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG5cclxufSlcclxuXHJcbi8qKlxyXG4qIEZ1bmN0aW9uIHRvIGV4Y2hhbmdlIHRoZSBjb2RlIHJlY2VpdmVkIHRvIHRoZSBpZCBUb2tlbiwgYWNjZXNzIHRva2VuIGFuZCBhIHJlZnJlc2ggdG9rZW5cclxuKlxyXG4qL1xyXG5sZXQgZXhjaGFuZ2VDb2RlID0gKGZ1bmN0aW9uKGNvZGUpIHtcclxuICBsZXQgaSA9IGdvb2dsZUluZm87XHJcblxyXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICBsZXQgVVJMID0gaS50b2tlbkVuZHBvaW50ICsgJ2NvZGU9JyArIGNvZGUgKyAnJmNsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZGlyZWN0X3VyaT0nICsgaS5yZWRpcmVjdFVSSSArICcmZ3JhbnRfdHlwZT1hdXRob3JpemF0aW9uX2NvZGUnO1xyXG5cclxuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbihpbmZvKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5leGNoYW5nZUNvZGU6aW5mb10nLCBpbmZvKTtcclxuICAgICAgcmVzb2x2ZShpbmZvKTtcclxuICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5leGNoYW5nZUNvZGU6ZXJyXScsIGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAvL3JlamVjdChlcnJvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLyoqXHJcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHlcclxuKi9cclxuXHJcbmxldCBpZHAgPSB7XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXHJcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdFxyXG4gICovXHJcbiAgdmFsaWRhdGVBc3NlcnRpb246IChhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHlOT0RFSlMnLCBhc3NlcnRpb24pO1xyXG5cclxuICAgIC8vVE9ETyBjaGVjayB0aGUgdmFsdWVzIHdpdGggdGhlIGhhc2ggcmVjZWl2ZWRcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG5cclxuICAgICAgLy8gYXRvYiBtYXkgbmVlZCB0byBiZSByZXF1aXJlZCBmb3Igbm9kZWpzXHJcbiAgICAgIC8vIHZhciBhdG9iID0gcmVxdWlyZSgnYXRvYicpO1xyXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XHJcbiAgICAgIGNvbnNvbGUubG9nKCd2YWxpZGF0ZUFzc2VydGlvblByb3h5Tk9ERUpTOmRlY29kZWRDb250ZW50JywgZGVjb2RlZENvbnRlbnQpO1xyXG5cclxuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcclxuICAgICAgY29uc29sZS5sb2coJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHlOT0RFSlM6Y29udGVudCcsIGNvbnRlbnQpO1xyXG5cclxuXHJcbiAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IGNvbnRlbnQudG9rZW5JRC5zcGxpdCgnLicpO1xyXG5cclxuXHJcbiAgICAgIGxldCBpZFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XHJcblxyXG5cclxuICAgICAgcmVzb2x2ZSh7aWRlbnRpdHk6IGlkVG9rZW4uZW1haWwsIGNvbnRlbnRzOiBpZFRva2VuLm5vbmNlfSk7XHJcblxyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byBnZW5lcmF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb25cclxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSBpbXBsZW1lbnRhdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXHJcbiAgKi9cclxuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XHJcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XHJcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246aGludF0nLCBoaW50KTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG5cclxuXHJcbiAgICAgIC8vdGhlIGhpbnQgZmllbGQgY29udGFpbnMgdGhlIGluZm9ybWF0aW9uIG9idGFpbmVkIGFmdGVyIHRoZSB1c2VyIGF1dGhlbnRpY2F0aW9uXHJcbiAgICAgIC8vIGlmIHRoZSBoaW50IGNvbnRlbnQgaXMgbm90IHByZXNlbnQsIHRoZW4gcmVqZWN0cyB0aGUgdmFsdWUgd2l0aCB0aGUgVVJMIHRvIG9wZW4gdGhlIHBhZ2UgdG8gYXV0aGVudGljYXRlIHRoZSB1c2VyXHJcbiAgICAgIGxldCBpID0gZ29vZ2xlSW5mbztcclxuXHJcbiAgICAgIGlmICghaGludCkge1xyXG4gICAgICAgICAgcmVzb2x2ZSgnaGludCcpO1xyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2U6Jyk7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UpO1xyXG5cclxuICAgICAgICAvLyB0aGUgcmVxdWVzdCBoYXZlIGFscmVhZHkgYmVlbiBtYWRlLCBzbyBpZHBQUm94eSB3aWxsIGV4Y2hhbmdlIHRoZSB0b2tlbnMgYWxvbmcgdG8gdGhlIGlkcCwgdG8gb2J0YWluIHRoZSBpbmZvcm1hdGlvbiBuZWNlc3NhcnlcclxuICAgICAgICBsZXQgYWNjZXNzVG9rZW4gPSB1cmxQYXJzZXIoaGludCwgJ2FjY2Vzc190b2tlbicpO1xyXG4gICAgICAgIGxldCBpZFRva2VuID0gdXJsUGFyc2VyKGhpbnQsICdpZF90b2tlbicpO1xyXG4gICAgICAgIGxldCBjb2RlID0gdXJsUGFyc2VyKGhpbnQsICdjb2RlJyk7XHJcblxyXG4gICAgICAgIGV4Y2hhbmdlQ29kZShjb2RlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ1RJQUdPIGV4Y2hhbmdlIGNvZGUnKTtcclxuXHJcbiAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlclxyXG4gICAgICAgICAgbGV0IGluZm9Ub2tlblVSTCA9IGkudXNlcmluZm8gKyB2YWx1ZS5hY2Nlc3NfdG9rZW47XHJcbiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUSUFHTyBpbmZvIHRva2VuIHVybCcpO1xyXG4gICAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7YWNjZXNzVG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgaWRUb2tlbjogdmFsdWUuaWRfdG9rZW4sIHJlZnJlc2hUb2tlbjogdmFsdWUucmVmcmVzaF90b2tlbiwgdG9rZW5UeXBlOiB2YWx1ZS50b2tlbl90eXBlLCBpbmZvVG9rZW46IGluZm9Ub2tlbn07XHJcblxyXG4gICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XHJcblxyXG4gICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXHJcbiAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XHJcblxyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUSUFHTyBpZCB0b2tlbiB1cmwnKTtcclxuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS50b2tlbklESlNPTiA9IGlkVG9rZW47XHJcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZXhwaXJlcyA9IGlkVG9rZW4uZXhwO1xyXG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmVtYWlsID0gaWRUb2tlbi5lbWFpbDtcclxuXHJcbiAgICAgICAgICAgICAgbGV0IGFzc2VydGlvbiA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3Rva2VuSUQ6IHZhbHVlLmlkX3Rva2VuLCB0b2tlbklESlNPTjogaWRUb2tlbn0pKTtcclxuICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ2dvb2dsZS5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcclxuXHJcbiAgICAgICAgICAgICAgLy9UT0RPIGRlbGV0ZSBsYXRlciB0aGUgZmllbGQgaW5mb1Rva2VuLCBhbmQgZGVsZXRlIHRoZSBuZWVkIGluIHRoZSBleGFtcGxlXHJcbiAgICAgICAgICAgICAgbGV0IHJldHVyblZhbHVlID0ge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcclxuXHJcbiAgICAgICAgICAgICAgaWRlbnRpdGllc1tuSWRlbnRpdHldID0gcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgICAgICAgKytuSWRlbnRpdHk7XHJcblxyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbjpyZXR1cm5WYWx1ZV0nLCByZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcblxyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb246ZXhjaGFuZ2VDb2RlXScsIGVycik7XHJcbiAgICAgICAgICAvL3JlamVjdChlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbi8qKlxyXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcclxuKi9cclxuY2xhc3MgTm9kZWpzUHJveHlTdHViIHtcclxuXHJcbiAgLyoqXHJcbiAgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxyXG4gICogVGhlIGNvbnN0cnVjdG9yIGFkZCBhIGxpc3RlbmVyIGluIHRoZSBtZXNzYWdlQnVzIHJlY2VpdmVkIGFuZCBzdGFydCBhIHdlYiB3b3JrZXIgd2l0aCB0aGUgcmVjZWl2ZWQgaWRwUHJveHlcclxuICAqXHJcbiAgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAgKi9cclxuIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XHJcbiAgIGNvbnNvbGUubG9nKCdHb29nbGUtPk5PREVKUyBjb25zdHJ1Y3RvcicpO1xyXG5cclxuICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7XHJcbiAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7XHJcbiAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuXHJcbiAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcclxuXHJcbiAgICAgLy9UT0RPIGFkZCB0aGUgcmVzcGVjdGl2ZSBsaXN0ZW5lclxyXG4gICAgIGlmIChtc2cudG8gPT09ICdkb21haW4taWRwOi8vZ29vZ2xlLmNvbScpIHtcclxuXHJcbiAgICAgICAgX3RoaXMucmVxdWVzdFRvSWRwKG1zZyk7XHJcbiAgICAgfVxyXG4gICB9KTtcclxuICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2NyZWF0ZWQnKTtcclxuIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xyXG4gICovXHJcbiAgcmVxdWVzdFRvSWRwKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7XHJcblxyXG4gICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcclxuICAgICAgY2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOlxyXG4gICAgICAgIGlkcC5nZW5lcmF0ZUFzc2VydGlvbihwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcclxuICAgICAgICBpZHAudmFsaWRhdGVBc3NlcnRpb24ocGFyYW1zLmFzc2VydGlvbiwgcGFyYW1zLm9yaWdpbikudGhlbihcclxuICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTt9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqXHJcbiAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxyXG4gICovXHJcbiAgcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IG1lc3NhZ2UgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sXHJcbiAgICAgICAgICAgICAgICAgICBib2R5OiB7Y29kZTogMjAwLCB2YWx1ZTogdmFsdWV9fTtcclxuXHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcclxuXHJcbiAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAndXBkYXRlJyxcclxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcclxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAocmVhc29uKSB7XHJcbiAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxyXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnTm9kZWpzUHJveHlTdHViJyxcclxuICAgIGluc3RhbmNlOiBuZXcgTm9kZWpzUHJveHlTdHViKHVybCwgYnVzLCBjb25maWcpXHJcbiAgfTtcclxufVxyXG5cclxuXHJcblxyXG5sZXQgZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UgPVxyXG57YXNzZXJ0aW9uOlxyXG4nZXlKMGIydGxia2xFSWpvaVpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHFVVE5PTWxGNFRucHJNMDF0VVhsWlZFRjNUVlJCTTA1SFVURlBSRnBwVGxSbk5FOVVZekphUkVsNlRrUkpOVTVxWjNkTlYxVnBabEV1WlhsS2FHVnVRV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2FHUlhVV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2VtUlhTV2xQYVVsNFRVUk5lRTVVVVRCUFZFVXpUVlJGZVU1NlZYaE5hbGw2VGtSSmFVeERTbXhpVjBad1lrTkpOa2x1VW14ak0xSm9ZbTFTTUdGSGJIVmhlazE1VFZWQ2JtSlhSbkJpUXpWcVlqSXdhVXhEU214aVYwWndZa1k1TWxwWVNuQmFiV3hzV2tOSk5tUklTakZhVTNkcFdWaFNabUZIUm5waFEwazJTV2t3TTJSdFJUSk5NVloyWkZkV1JVMXJlRFpUTVdONlVtdzRNazlHUldsTVEwcDFZakkxYWxwVFNUWkpiSE13VDBOM2VFMTZRWE5OVTNkNlRrTjNNRTlEZDNoTmVYY3lURVJyYzA1RVNYTk5WRTB3VEVSamVVeEVSWHBPUTNkNVRrUmpjMDFVVFhOTlUzZDRURVJGYzA1VGQzZE1SRTF6VFZSTmQweEVSWE5OVkZWelRVTjNNRTlEZDNoTmVrRnpUVk4zZUUxRGQzbE1SRVY2VFVOM2VFeEVSWE5OUTNkNVRXcG5jMDVFVFhOTlZFRjRURVJGZVV4RVJYbE5VM2N6VEVSRk1VNTVkek5OVTNjMFRWTjNNVTlEZDNsTlZHdHpUWHBKYzAxVVFYTk5WRUUwVEVSRk5VMTVkM2hPZW10elRXcEZlVXhFUlhoT2FYZDVUbFJWYzA1VWEzTk5ha1V6VEVSTmVVeEVSVEpOVTNkNVRVUkZjMDVVVFhOTlZHTjRURVJKZVU1cGQzaFBWR3R6VFZSTk0weEVTWGROYVhkNFRucEZjMDVxUVhOUFJFbHpUbFJOYzAxVVNURk1SRmw1VEVSRk0wNTVkM2hOYWxselRWUlpNVXhFU1RCTVJFVXdUVk4zZWsxRGQzaE9VM2Q1VFdwWmMwNVVhM05OVkVFelRFUk5NRXhFWTNOTlZFMXpUVlJSTlV4RVJYaE5hWGQ0VFdwVmMwMVVRWE5OYWsxM1RFUkZOVTFUZDNoT1ZGbHpUVlJaTUV4RVJUTk9lWGQ0VFVOM2VFOUVWWE5OVkUxelRtcFpjMDE1ZDNsTlZHTnpUVlJaTWt4RVNUQk9RM2MxVFVOM2VFMVVhM05OVkVWNFRFUkpNMHhFUlRCT1UzZDRUVVJSYzA1NlJYTk5WR2MxVEVSRk1rNXBkM2xOYWxselRXcFZNVXhFUlhwTmVYYzBUWGwzZUU1VVJYTk5hazE0VEVSRmQwMVRkM2hPVkVWelQwUnJjMDFxU1hOTlZHdHpUbXBWYzAxVVZUQk1SRVYzVEVSVmVreEVTWGRQUTNkNVRWUm5jMDFxVlhsTVJFbDRUMU4zZWs1NWR6Rk5RM2Q1VFZSSmMwOUVXWE5OVkZFeFRFUkZkMDU1ZDNoTmVrbHpUMVJCYzAxcVRYcE1SRWwzVFdsM2VVMXFZM05OVkVFMFRFUkZlRTVEZDNoT1JFVnpUV3ByYzA1NlRYTk5WR2N6VEVSTmVFeEVSWHBNUkVsNlRrTjNkMHhFU1hwTmFYZDVUa04zZUU5VVJYTk5lbFZ6VFZSUk5VeEVSVE5QVTNkNFRYcG5jMDFxUlRCTVJFVXhUMU4zZVU1RVZYTk5WRmw1VEVSRk1FOURkM2xOYWtWelRWUkZORXhFUlROTVJFVjNUbE4zTkU5VGQzaE9WRVZ6VFZSUk1reEVTWGRQVTNjeFRsTjNlVTE2V1hOT2FrVnpUVlJSZWt4RVNYcE5lWGQ1VFdwbmMwMVVRWE5OVkVVeFRFUm5jMDlFUlhOTlZHc3pURVJSTVV4RVJYbE5lWGQ0VDBSamMwMXFTWHBNUkVVelRtbDNlVTVVVVhOTlZGa3hURVJaTlV4RVJUQk5lWGQ1VDFOM2VFMUVRWE5OVkVVd1RFUkZNMHhFUlhwTlEzZDVUV3BaYzAxcVNYcE1SRTE2VEVSRmVFeEVTVEJOUTNjMFRWTjNNazFUZDNoT2VrbHpUVlJyZUV4RVJURk9lWGQ1VGtSWmMwMXFRWGxNUkdjelRFUkZlazFUZDNsTmFrVnpUMFJuYzA1RVozTk5WRWt6VEVSRk1VOVRkM2hOVkd0elRWUlpkMHhFUlRGTmFYZDRUVlJqYzA1cVJYTk5hbFY2VEVSRk0wNURkekpPVTNkNVRWUlJjMDFxUVhwTVJFbDRUME4zTWsxNWR6Rk5RM2N6VDBOM2VFNXFRWE5OVkdkNFRFUkplVTFUZDNsTlZFVnpUVlJKTkV4RVkzZE1SRVV6VDBOM2VFOVVSWE5OVkdOM1RFUkJjMDFVVFhOTlZFbDVURVJGTTAxNWQzaE5hWGQ1VFVSTmMwMXFWWGxNUkZGelRWUm5NRXhFU1hsT1UzZDVUbFJKYzA1NWR6Sk5hWGMxVG1sM2VFMVVXWE5OVkZWelRXcEZNa3hFUlRGUFEzY3hUbE4zTkU1VGR6QlBRM2Q0VG1sM05VeEVTWGRPYVhkNFRWUnJjMDU2VVhOTlZFVjVURVJKTUUxNWQzaE5lbGx6VDBSUmMwMVVaekJNUkVsNVRYbDNlVTVVVVhOTlZFRjRURVJyZUV4RVdYaE1SRVYzVEVScmVFeEVaekZNUkVVMVRXbDNlRTVFWTNOTlZGRXdURVJWTTB4RVNUVk1SRmt5VEVSSmVrOURkM2hQVkd0elRXcFJNRXhFUlRWTmVYZDRUMVJSYzAxVVZYZE1SRWw2VFdsM2VVMUVRWE5OVkVFelRFUkpjMDE1ZDNoTVJFRnpUVll3YVV4RFNuQmpNMDFwVDJsS2IyUklVbmRqZW05MlRESkdhbGt5T1RGaWJsSjZURzFrZG1JeVpITmFVelZxWWpJd2FVeERTbkJaV0ZGcFQycEZNVTFVU1RKT1JGbDNUMFJCYzBsdFZqUmpRMGsyVFZSVmVFMXFXVEJQVkZrMFRVZ3dMblJsU1RGdE9UQldja0ZGWjB0MGRqTlFTVWMzU2paelFXaGtYMUZaTjIxcE0xRnpWMHhaWW1GclYwcHhURFptTkdkdFJubGtaRVYzY1V0NFIxazBlRGR6VFV4MGFpMVZZekJhUzNWWFdGOXhSVGRMTm1sM2FtaE5iSHBpVkVoTE9FeGxhSGxKVEU5RFdUZFljM1Z2WVRaTmNXWlVNVmR3T0VKbk1GUm1Ta2gxVDI1aVdsOTViWGhRVFZGTFQydG1XbWxRVmxNMWFYRnpUek5pYm1WUmVsUnlNRXBpY1hSUk4zaFhjMHBUTm01NkxXbEJObkpGWkV0cVprTTNNR0Z0VnpCcFUwa3RMV3hYYlZnM2MxcGhWR1ZhWXpkMVp6UnlORm8xTFhwTVJqTTVlbmRSVUU5M1JWRkJiRlF0V2tGZmVURm5UMTgwVm5WbFJHVmFiVmR0Vm5WNk1tdEtUMTg1TVdnMmNVVTFibHBQZEhkWFZuVkRjbVIzTFRsSllYYzNlakpFVUdWelgybzFVa1E0YkVSdmRsSTJTazB3WkdveVNuRjZURGxXY0ZSamJVWXlOMEZLYzJNeGFtaFJUSE5NVjJKc1kzaGFkeUlzSW5SdmEyVnVTVVJLVTA5T0lqcDdJbUY2Y0NJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbUYxWkNJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbk4xWWlJNklqRXdNekUxTkRRNU1UY3hNVEkzTlRFeU5qTTBNaUlzSW1WdFlXbHNJam9pZEdWemRHRnVaSFJvYVc1ck16SXhRR2R0WVdsc0xtTnZiU0lzSW1WdFlXbHNYM1psY21sbWFXVmtJam9pZEhKMVpTSXNJbUYwWDJoaGMyZ2lPaUl0TjNaaE5qTlZiM1ZsUkRKTWVrdFhNMFpmTmpoUklpd2libTl1WTJVaU9pSmJORGdzTVRNd0xERXNNelFzTkRnc01UTXNOaXc1TERReUxERXpOQ3czTWl3eE16UXNNalEzTERFekxERXNNU3d4TERVc01Dd3pMREV6TUN3eExERTFMREFzTkRnc01UTXdMREVzTVRBc01pd3hNekFzTVN3eExEQXNNakk0TERRekxERXdNU3d4TWl3eE1qRXNOeXd4TlRjc056RXNPREVzTlRnc01qRTVMRE15TERFd0xERXdPQ3d4T1RNc01UYzVMREl4TWl3eE1UWXNNalUxTERVNUxESXhOeXd6TWl3eE5qRXNNakF4TERVekxERTNNU3d5TWpZc01UazVMREV6Tnl3eU1ESXNNVGN4TERZd0xEZ3lMRFV6TERFeU5TdzJNaXd4Tnpjc01USTJMREUyTlN3eU5Dd3hOREVzTXpBc01UVXNNakkyTERVNUxERXdOeXd6TkN3M0xERXpMREUwT1N3eE1USXNNVEkxTERFd0xESXpNQ3d4T1RFc01UVTJMREUyTkN3eE56Y3NNVEFzTVRnMUxERXpMRFkyTERNc01qRTNMREUyTml3eU5EUXNPVEFzTVRFNUxERXhNU3d5Tnl3eE5EVXNNVEEwTERjeExERTRPU3d4TmpZc01qSTJMREkxTlN3eE16TXNPRE1zTVRVeExESXpNU3d4TURFc01UVXhMRGc1TERJeUxERTVMRFkxTERFMU5Dd3hNQ3cxTXl3eU1EZ3NNakU0TERJMU1pd3lNVGtzTXpjc05UQXNNakV5TERnMkxERTBOU3d4TURjc01UTXlMRGt3TERJek15d3lNRElzTWpJM0xERXdPQ3d4TVRRc01UUXhMREk1TERjekxERTROeXd6TVN3eE15d3lNelFzTUN3eU16SXNNalFzTVRreExETTFMREUwT1N3eE56a3NNVE00TERJeE5Dd3hOVGtzTWpRMUxERTJNaXd4TkRnc01qSXhMREV4T0N3eE55d3hNRFVzT0Rrc01UVXhMREUwTml3eU1Ea3NOVFVzTWpNMkxEWXhMREUwTXl3eU16TXNNakk0TERFd0xERXhOU3c0TERneExERTVOeXcwTlN3eE1qTXNNVGczTERJeU15d3hOellzTWpVMExERTJOU3cyT1N3eE5ETXNNamtzTVRBd0xERXhOQ3d4Tnl3eE16QXNNakkyTERJeU15d3pNeXd4TVN3eU5EQXNPREVzTmpFc01UY3lMREU1TVN3eE5UY3NNalEyTERJd01pdzROeXd4TXpFc01qSXhMRGc0TERRNExERXlOeXd4TlRrc01URTVMREUyTUN3eE5USXNNVEUzTERZeExESTFNeXd4TnpRc05qVXNNakUwTERJd015d3lNVGdzTmpNc05UQXNOemdzTVRZd0xERTRNU3d5TWpFc01qRXhMREV5T0N3M01Dd3hOemdzTVRreExERTNNQ3d3TERFekxERXlNaXd4TnpNc01USXNNakF6TERJMU1pdzBMREU0TkN3eU1qVXNNalV5TERjc05qSXNPVFlzTVRFMkxERTFMREl4Tml3eE5UZ3NOVFVzT0RVc05EZ3NNVFlzT1N3eU1EWXNNVEU1TERjMExERXhNaXd5TkRNc01UTTJMRGcwTERFNE5Dd3lNak1zTWpVMExERXdNU3c1TVN3Mk1Td3hNQ3c1TVN3NE5Td3hPVElzTVRRM0xERTBOQ3cxTnl3eU9TdzJOaXd5TXpnc01UazVMREkwTkN3eE9UTXNNVGswTERFMU1Dd3lNeklzTWpBd0xERXdOeXd5TERNc01Td3dMREZkSWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam9pTVRVeE1qWTBOakE0TUNJc0ltVjRjQ0k2SWpFMU1USTJORGsyT0RBaUxDSmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalEzTjJReE56azNNbVF5WVRBd01UQTNOR1ExT0RaaU5UZzRPVGMyWkRJek5ESTVOamd3TVdVaWZYMD0nLFxyXG5pZHA6e1xyXG5kb21haW46J25vZGVqcy1pZHAnLFxyXG5wcm90b2NvbDonT0lEQyd9LFxyXG5pbmZvOntcclxuYWNjZXNzVG9rZW46J3lhMjkuR2xzYkJhbEdKSm1WaV9ONUlEeXFNSTNKeGtPNWVMVjQzMzNJOTNlUUJDcE5Bb2ZFcXRVNFVrV0hoOGRyVmxyVmlWVHF0NkprM1A4Nl9DRHQ0c0tWaDBHOUFiVGsxclZXM01BeGNGaEVVRkUtS01YZERLX0tzTWY2Zk5RaycsXHJcbmlkVG9rZW46J2V5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalEzTjJReE56azNNbVF5WVRBd01UQTNOR1ExT0RaaU5UZzRPVGMyWkRJek5ESTVOamd3TVdVaWZRLmV5SmhlbkFpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSmhkV1FpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSnpkV0lpT2lJeE1ETXhOVFEwT1RFM01URXlOelV4TWpZek5ESWlMQ0psYldGcGJDSTZJblJsYzNSaGJtUjBhR2x1YXpNeU1VQm5iV0ZwYkM1amIyMGlMQ0psYldGcGJGOTJaWEpwWm1sbFpDSTZkSEoxWlN3aVlYUmZhR0Z6YUNJNklpMDNkbUUyTTFWdmRXVkVNa3g2UzFjelJsODJPRkVpTENKdWIyNWpaU0k2SWxzME9Dd3hNekFzTVN3ek5DdzBPQ3d4TXl3MkxEa3NORElzTVRNMExEY3lMREV6TkN3eU5EY3NNVE1zTVN3eExERXNOU3d3TERNc01UTXdMREVzTVRVc01DdzBPQ3d4TXpBc01Td3hNQ3d5TERFek1Dd3hMREVzTUN3eU1qZ3NORE1zTVRBeExERXlMREV5TVN3M0xERTFOeXczTVN3NE1TdzFPQ3d5TVRrc016SXNNVEFzTVRBNExERTVNeXd4Tnprc01qRXlMREV4Tml3eU5UVXNOVGtzTWpFM0xETXlMREUyTVN3eU1ERXNOVE1zTVRjeExESXlOaXd4T1Rrc01UTTNMREl3TWl3eE56RXNOakFzT0RJc05UTXNNVEkxTERZeUxERTNOeXd4TWpZc01UWTFMREkwTERFME1Td3pNQ3d4TlN3eU1qWXNOVGtzTVRBM0xETTBMRGNzTVRNc01UUTVMREV4TWl3eE1qVXNNVEFzTWpNd0xERTVNU3d4TlRZc01UWTBMREUzTnl3eE1Dd3hPRFVzTVRNc05qWXNNeXd5TVRjc01UWTJMREkwTkN3NU1Dd3hNVGtzTVRFeExESTNMREUwTlN3eE1EUXNOekVzTVRnNUxERTJOaXd5TWpZc01qVTFMREV6TXl3NE15d3hOVEVzTWpNeExERXdNU3d4TlRFc09Ea3NNaklzTVRrc05qVXNNVFUwTERFd0xEVXpMREl3T0N3eU1UZ3NNalV5TERJeE9Td3pOeXcxTUN3eU1USXNPRFlzTVRRMUxERXdOeXd4TXpJc09UQXNNak16TERJd01pd3lNamNzTVRBNExERXhOQ3d4TkRFc01qa3NOek1zTVRnM0xETXhMREV6TERJek5Dd3dMREl6TWl3eU5Dd3hPVEVzTXpVc01UUTVMREUzT1N3eE16Z3NNakUwTERFMU9Td3lORFVzTVRZeUxERTBPQ3d5TWpFc01URTRMREUzTERFd05TdzRPU3d4TlRFc01UUTJMREl3T1N3MU5Td3lNellzTmpFc01UUXpMREl6TXl3eU1qZ3NNVEFzTVRFMUxEZ3NPREVzTVRrM0xEUTFMREV5TXl3eE9EY3NNakl6TERFM05pd3lOVFFzTVRZMUxEWTVMREUwTXl3eU9Td3hNREFzTVRFMExERTNMREV6TUN3eU1qWXNNakl6TERNekxERXhMREkwTUN3NE1TdzJNU3d4TnpJc01Ua3hMREUxTnl3eU5EWXNNakF5TERnM0xERXpNU3d5TWpFc09EZ3NORGdzTVRJM0xERTFPU3d4TVRrc01UWXdMREUxTWl3eE1UY3NOakVzTWpVekxERTNOQ3cyTlN3eU1UUXNNakF6TERJeE9DdzJNeXcxTUN3M09Dd3hOakFzTVRneExESXlNU3d5TVRFc01USTRMRGN3TERFM09Dd3hPVEVzTVRjd0xEQXNNVE1zTVRJeUxERTNNeXd4TWl3eU1ETXNNalV5TERRc01UZzBMREl5TlN3eU5USXNOeXcyTWl3NU5pd3hNVFlzTVRVc01qRTJMREUxT0N3MU5TdzROU3cwT0N3eE5pdzVMREl3Tml3eE1Ua3NOelFzTVRFeUxESTBNeXd4TXpZc09EUXNNVGcwTERJeU15d3lOVFFzTVRBeExEa3hMRFl4TERFd0xEa3hMRGcxTERFNU1pd3hORGNzTVRRMExEVTNMREk1TERZMkxESXpPQ3d4T1Rrc01qUTBMREU1TXl3eE9UUXNNVFV3TERJek1pd3lNREFzTVRBM0xESXNNeXd4TERBc01WMGlMQ0pwYzNNaU9pSm9kSFJ3Y3pvdkwyRmpZMjkxYm5SekxtZHZiMmRzWlM1amIyMGlMQ0pwWVhRaU9qRTFNVEkyTkRZd09EQXNJbVY0Y0NJNk1UVXhNalkwT1RZNE1IMC50ZUkxbTkwVnJBRWdLdHYzUElHN0o2c0FoZF9RWTdtaTNRc1dMWWJha1dKcUw2ZjRnbUZ5ZGRFd3FLeEdZNHg3c01MdGotVWMwWkt1V1hfcUU3SzZpd2poTWx6YlRISzhMZWh5SUxPQ1k3WHN1b2E2TXFmVDFXcDhCZzBUZkpIdU9uYlpfeW14UE1RS09rZlppUFZTNWlxc08zYm5lUXpUcjBKYnF0UTd4V3NKUzZuei1pQTZyRWRLamZDNzBhbVcwaVNJLS1sV21YN3NaYVRlWmM3dWc0cjRaNS16TEYzOXp3UVBPd0VRQWxULVpBX3kxZ09fNFZ1ZURlWm1XbVZ1ejJrSk9fOTFoNnFFNW5aT3R3V1Z1Q3Jkdy05SWF3N3oyRFBlc19qNVJEOGxEb3ZSNkpNMGRqMkpxekw5VnBUY21GMjdBSnNjMWpoUUxzTFdibGN4WncnLFxyXG5yZWZyZXNoVG9rZW46JzEvNmNDR0VXeXp4MnVPMmJIMkYxQTh2NktEVEc0clAwQ1hjLVhVUTEyLVUwbycsXHJcbnRva2VuVHlwZTonQmVhcmVyJyxcclxuaW5mb1Rva2VuOntcclxuc3ViOicxMDMxNTQ0OTE3MTEyNzUxMjYzNDInLFxyXG5uYW1lOid0ZXN0IHRoaW5rJyxcclxuZ2l2ZW5fbmFtZTondGVzdCcsXHJcbmZhbWlseV9uYW1lOid0aGluaycsXHJcbnBpY3R1cmU6J2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tWGRVSXFkTWtDV0EvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQUEvNDI1MnJzY2J2NU0vcGhvdG8uanBnJyxcclxuZW1haWw6J3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxyXG5lbWFpbF92ZXJpZmllZDp0cnVlLFxyXG5sb2NhbGU6J2VuJ30sXHJcbnRva2VuSURKU09OOnsnYXpwJzonODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcclxuYXVkOic4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nLFxyXG5zdWI6JzEwMzE1NDQ5MTcxMTI3NTEyNjM0MicsXHJcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcclxuZW1haWxfdmVyaWZpZWQ6J3RydWUnLFxyXG5hdF9oYXNoOictN3ZhNjNVb3VlRDJMektXM0ZfNjhRJyxcclxubm9uY2U6J1s0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0nLFxyXG5pc3M6J2h0dHBzOi8vYWNjb3VudHMubm9kZWpzLWlkcCcsXHJcbmlhdDonMTUxMjY0NjA4MCcsXHJcbmV4cDonMTUxMjY0OTY4MCcsXHJcbmFsZzonUlMyNTYnLFxyXG5raWQ6JzQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUnfSxcclxuZXhwaXJlczonMTUxMjY0OTY4MCcsXHJcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJ30sXHJcbmluZm9Ub2tlbjp7c3ViOicxMDMxNTQ0OTE3MTEyNzUxMjYzNDInLFxyXG5uYW1lOid0ZXN0IHRoaW5rJyxcclxuZ2l2ZW5fbmFtZTondGVzdCcsXHJcbmZhbWlseV9uYW1lOid0aGluaycsXHJcbnBpY3R1cmU6J2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tWGRVSXFkTWtDV0EvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQUEvNDI1MnJzY2J2NU0vcGhvdG8uanBnJyxcclxuZW1haWw6J3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxyXG5lbWFpbF92ZXJpZmllZDp0cnVlLFxyXG5sb2NhbGU6J2VuJ30sXHJcbmlkZW50aXR5Oid1c2VyOi8vbm9kZWpzLWlkcC90ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcclxubWVzc2FnZUluZm86e3VzZXJQcm9maWxlOnt1c2VybmFtZTondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXHJcbmNuOid0ZXN0YW5kdGhpbmszMjEnLFxyXG5hdmF0YXI6J2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tWGRVSXFkTWtDV0EvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQUEvNDI1MnJzY2J2NU0vcGhvdG8uanBnJyxcclxubG9jYWxlOidlbicsXHJcbnVzZXJVUkw6J3VzZXI6Ly9ub2RlanMtaWRwL3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nfSxcclxuaWRwOidub2RlanMtaWRwJyxcclxuYXNzZXJ0aW9uOidleUowYjJ0bGJrbEVJam9pWlhsS2FHSkhZMmxQYVVwVFZYcEpNVTVwU1hOSmJYUndXa05KTmtscVVUTk9NbEY0VG5wck0wMXRVWGxaVkVGM1RWUkJNMDVIVVRGUFJGcHBUbFJuTkU5VVl6SmFSRWw2VGtSSk5VNXFaM2ROVjFWcFpsRXVaWGxLYUdWdVFXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LYUdSWFVXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LZW1SWFNXbFBhVWw0VFVSTmVFNVVVVEJQVkVVelRWUkZlVTU2VlhoTmFsbDZUa1JKYVV4RFNteGlWMFp3WWtOSk5rbHVVbXhqTTFKb1ltMVNNR0ZIYkhWaGVrMTVUVlZDYm1KWFJuQmlRelZxWWpJd2FVeERTbXhpVjBad1lrWTVNbHBZU25CYWJXeHNXa05KTm1SSVNqRmFVM2RwV1ZoU1ptRkhSbnBoUTBrMlNXa3dNMlJ0UlRKTk1WWjJaRmRXUlUxcmVEWlRNV042VW13NE1rOUdSV2xNUTBwMVlqSTFhbHBUU1RaSmJITXdUME4zZUUxNlFYTk5VM2Q2VGtOM01FOURkM2hOZVhjeVRFUnJjMDVFU1hOTlZFMHdURVJqZVV4RVJYcE9RM2Q1VGtSamMwMVVUWE5OVTNkNFRFUkZjMDVUZDNkTVJFMXpUVlJOZDB4RVJYTk5WRlZ6VFVOM01FOURkM2hOZWtGelRWTjNlRTFEZDNsTVJFVjZUVU4zZUV4RVJYTk5RM2Q1VFdwbmMwNUVUWE5OVkVGNFRFUkZlVXhFUlhsTlUzY3pURVJGTVU1NWR6Tk5VM2MwVFZOM01VOURkM2xOVkd0elRYcEpjMDFVUVhOTlZFRTBURVJGTlUxNWQzaE9lbXR6VFdwRmVVeEVSWGhPYVhkNVRsUlZjMDVVYTNOTmFrVXpURVJOZVV4RVJUSk5VM2Q1VFVSRmMwNVVUWE5OVkdONFRFUkplVTVwZDNoUFZHdHpUVlJOTTB4RVNYZE5hWGQ0VG5wRmMwNXFRWE5QUkVselRsUk5jMDFVU1RGTVJGbDVURVJGTTA1NWQzaE5hbGx6VFZSWk1VeEVTVEJNUkVVd1RWTjNlazFEZDNoT1UzZDVUV3BaYzA1VWEzTk5WRUV6VEVSTk1FeEVZM05OVkUxelRWUlJOVXhFUlhoTmFYZDRUV3BWYzAxVVFYTk5hazEzVEVSRk5VMVRkM2hPVkZselRWUlpNRXhFUlROT2VYZDRUVU4zZUU5RVZYTk5WRTF6VG1wWmMwMTVkM2xOVkdOelRWUlpNa3hFU1RCT1EzYzFUVU4zZUUxVWEzTk5WRVY0VEVSSk0weEVSVEJPVTNkNFRVUlJjMDU2UlhOTlZHYzFURVJGTWs1cGQzbE5hbGx6VFdwVk1VeEVSWHBOZVhjMFRYbDNlRTVVUlhOTmFrMTRURVJGZDAxVGQzaE9WRVZ6VDBScmMwMXFTWE5OVkd0elRtcFZjMDFVVlRCTVJFVjNURVJWZWt4RVNYZFBRM2Q1VFZSbmMwMXFWWGxNUkVsNFQxTjNlazU1ZHpGTlEzZDVUVlJKYzA5RVdYTk5WRkV4VEVSRmQwNTVkM2hOZWtselQxUkJjMDFxVFhwTVJFbDNUV2wzZVUxcVkzTk5WRUUwVEVSRmVFNURkM2hPUkVWelRXcHJjMDU2VFhOTlZHY3pURVJOZUV4RVJYcE1SRWw2VGtOM2QweEVTWHBOYVhkNVRrTjNlRTlVUlhOTmVsVnpUVlJSTlV4RVJUTlBVM2Q0VFhwbmMwMXFSVEJNUkVVeFQxTjNlVTVFVlhOTlZGbDVURVJGTUU5RGQzbE5ha1Z6VFZSRk5FeEVSVE5NUkVWM1RsTjNORTlUZDNoT1ZFVnpUVlJSTWt4RVNYZFBVM2N4VGxOM2VVMTZXWE5PYWtWelRWUlJla3hFU1hwTmVYZDVUV3BuYzAxVVFYTk5WRVV4VEVSbmMwOUVSWE5OVkdzelRFUlJNVXhFUlhsTmVYZDRUMFJqYzAxcVNYcE1SRVV6VG1sM2VVNVVVWE5OVkZreFRFUlpOVXhFUlRCTmVYZDVUMU4zZUUxRVFYTk5WRVV3VEVSRk0weEVSWHBOUTNkNVRXcFpjMDFxU1hwTVJFMTZURVJGZUV4RVNUQk5RM2MwVFZOM01rMVRkM2hPZWtselRWUnJlRXhFUlRGT2VYZDVUa1JaYzAxcVFYbE1SR2N6VEVSRmVrMVRkM2xOYWtWelQwUm5jMDVFWjNOTlZFa3pURVJGTVU5VGQzaE5WR3R6VFZSWmQweEVSVEZOYVhkNFRWUmpjMDVxUlhOTmFsVjZURVJGTTA1RGR6Sk9VM2Q1VFZSUmMwMXFRWHBNUkVsNFQwTjNNazE1ZHpGTlEzY3pUME4zZUU1cVFYTk5WR2Q0VEVSSmVVMVRkM2xOVkVWelRWUkpORXhFWTNkTVJFVXpUME4zZUU5VVJYTk5WR04zVEVSQmMwMVVUWE5OVkVsNVRFUkZNMDE1ZDNoTmFYZDVUVVJOYzAxcVZYbE1SRkZ6VFZSbk1FeEVTWGxPVTNkNVRsUkpjMDU1ZHpKTmFYYzFUbWwzZUUxVVdYTk5WRlZ6VFdwRk1reEVSVEZQUTNjeFRsTjNORTVUZHpCUFEzZDRUbWwzTlV4RVNYZE9hWGQ0VFZScmMwNTZVWE5OVkVWNVRFUkpNRTE1ZDNoTmVsbHpUMFJSYzAxVVp6Qk1SRWw1VFhsM2VVNVVVWE5OVkVGNFRFUnJlRXhFV1hoTVJFVjNURVJyZUV4RVp6Rk1SRVUxVFdsM2VFNUVZM05OVkZFd1RFUlZNMHhFU1RWTVJGa3lURVJKZWs5RGQzaFBWR3R6VFdwUk1FeEVSVFZOZVhkNFQxUlJjMDFVVlhkTVJFbDZUV2wzZVUxRVFYTk5WRUV6VEVSSmMwMTVkM2hNUkVGelRWWXdhVXhEU25Cak0wMXBUMmxLYjJSSVVuZGplbTkyVERKR2Fsa3lPVEZpYmxKNlRHMWtkbUl5WkhOYVV6VnFZakl3YVV4RFNuQlpXRkZwVDJwRk1VMVVTVEpPUkZsM1QwUkJjMGx0VmpSalEwazJUVlJWZUUxcVdUQlBWRmswVFVnd0xuUmxTVEZ0T1RCV2NrRkZaMHQwZGpOUVNVYzNTalp6UVdoa1gxRlpOMjFwTTFGelYweFpZbUZyVjBweFREWm1OR2R0Um5sa1pFVjNjVXQ0UjFrMGVEZHpUVXgwYWkxVll6QmFTM1ZYV0Y5eFJUZExObWwzYW1oTmJIcGlWRWhMT0V4bGFIbEpURTlEV1RkWWMzVnZZVFpOY1daVU1WZHdPRUpuTUZSbVNraDFUMjVpV2w5NWJYaFFUVkZMVDJ0bVdtbFFWbE0xYVhGelR6TmlibVZSZWxSeU1FcGljWFJSTjNoWGMwcFRObTU2TFdsQk5uSkZaRXRxWmtNM01HRnRWekJwVTBrdExXeFhiVmczYzFwaFZHVmFZemQxWnpSeU5GbzFMWHBNUmpNNWVuZFJVRTkzUlZGQmJGUXRXa0ZmZVRGblQxODBWblZsUkdWYWJWZHRWblY2TW10S1QxODVNV2cyY1VVMWJscFBkSGRYVm5WRGNtUjNMVGxKWVhjM2VqSkVVR1Z6WDJvMVVrUTRiRVJ2ZGxJMlNrMHdaR295U25GNlREbFdjRlJqYlVZeU4wRktjMk14YW1oUlRITk1WMkpzWTNoYWR5SXNJblJ2YTJWdVNVUktVMDlPSWpwN0ltRjZjQ0k2SWpnd09ETXlPVFUyTmpBeE1pMTBjWEk0Y1c5b01URXhPVFF5WjJReWEyY3dNRGQwTUhNNFpqSTNOM0p2YVM1aGNIQnpMbWR2YjJkc1pYVnpaWEpqYjI1MFpXNTBMbU52YlNJc0ltRjFaQ0k2SWpnd09ETXlPVFUyTmpBeE1pMTBjWEk0Y1c5b01URXhPVFF5WjJReWEyY3dNRGQwTUhNNFpqSTNOM0p2YVM1aGNIQnpMbWR2YjJkc1pYVnpaWEpqYjI1MFpXNTBMbU52YlNJc0luTjFZaUk2SWpFd016RTFORFE1TVRjeE1USTNOVEV5TmpNME1pSXNJbVZ0WVdsc0lqb2lkR1Z6ZEdGdVpIUm9hVzVyTXpJeFFHZHRZV2xzTG1OdmJTSXNJbVZ0WVdsc1gzWmxjbWxtYVdWa0lqb2lkSEoxWlNJc0ltRjBYMmhoYzJnaU9pSXROM1poTmpOVmIzVmxSREpNZWt0WE0wWmZOamhSSWl3aWJtOXVZMlVpT2lKYk5EZ3NNVE13TERFc016UXNORGdzTVRNc05pdzVMRFF5TERFek5DdzNNaXd4TXpRc01qUTNMREV6TERFc01Td3hMRFVzTUN3ekxERXpNQ3d4TERFMUxEQXNORGdzTVRNd0xERXNNVEFzTWl3eE16QXNNU3d4TERBc01qSTRMRFF6TERFd01Td3hNaXd4TWpFc055d3hOVGNzTnpFc09ERXNOVGdzTWpFNUxETXlMREV3TERFd09Dd3hPVE1zTVRjNUxESXhNaXd4TVRZc01qVTFMRFU1TERJeE55d3pNaXd4TmpFc01qQXhMRFV6TERFM01Td3lNallzTVRrNUxERXpOeXd5TURJc01UY3hMRFl3TERneUxEVXpMREV5TlN3Mk1pd3hOemNzTVRJMkxERTJOU3d5TkN3eE5ERXNNekFzTVRVc01qSTJMRFU1TERFd055d3pOQ3czTERFekxERTBPU3d4TVRJc01USTFMREV3TERJek1Dd3hPVEVzTVRVMkxERTJOQ3d4Tnpjc01UQXNNVGcxTERFekxEWTJMRE1zTWpFM0xERTJOaXd5TkRRc09UQXNNVEU1TERFeE1Td3lOeXd4TkRVc01UQTBMRGN4TERFNE9Td3hOallzTWpJMkxESTFOU3d4TXpNc09ETXNNVFV4TERJek1Td3hNREVzTVRVeExEZzVMREl5TERFNUxEWTFMREUxTkN3eE1DdzFNeXd5TURnc01qRTRMREkxTWl3eU1Ua3NNemNzTlRBc01qRXlMRGcyTERFME5Td3hNRGNzTVRNeUxEa3dMREl6TXl3eU1ESXNNakkzTERFd09Dd3hNVFFzTVRReExESTVMRGN6TERFNE55d3pNU3d4TXl3eU16UXNNQ3d5TXpJc01qUXNNVGt4TERNMUxERTBPU3d4Tnprc01UTTRMREl4TkN3eE5Ua3NNalExTERFMk1pd3hORGdzTWpJeExERXhPQ3d4Tnl3eE1EVXNPRGtzTVRVeExERTBOaXd5TURrc05UVXNNak0yTERZeExERTBNeXd5TXpNc01qSTRMREV3TERFeE5TdzRMRGd4TERFNU55dzBOU3d4TWpNc01UZzNMREl5TXl3eE56WXNNalUwTERFMk5TdzJPU3d4TkRNc01qa3NNVEF3TERFeE5Dd3hOeXd4TXpBc01qSTJMREl5TXl3ek15d3hNU3d5TkRBc09ERXNOakVzTVRjeUxERTVNU3d4TlRjc01qUTJMREl3TWl3NE55d3hNekVzTWpJeExEZzRMRFE0TERFeU55d3hOVGtzTVRFNUxERTJNQ3d4TlRJc01URTNMRFl4TERJMU15d3hOelFzTmpVc01qRTBMREl3TXl3eU1UZ3NOak1zTlRBc056Z3NNVFl3TERFNE1Td3lNakVzTWpFeExERXlPQ3czTUN3eE56Z3NNVGt4TERFM01Dd3dMREV6TERFeU1pd3hOek1zTVRJc01qQXpMREkxTWl3MExERTROQ3d5TWpVc01qVXlMRGNzTmpJc09UWXNNVEUyTERFMUxESXhOaXd4TlRnc05UVXNPRFVzTkRnc01UWXNPU3d5TURZc01URTVMRGMwTERFeE1pd3lORE1zTVRNMkxEZzBMREU0TkN3eU1qTXNNalUwTERFd01TdzVNU3cyTVN3eE1DdzVNU3c0TlN3eE9USXNNVFEzTERFME5DdzFOeXd5T1N3Mk5pd3lNemdzTVRrNUxESTBOQ3d4T1RNc01UazBMREUxTUN3eU16SXNNakF3TERFd055d3lMRE1zTVN3d0xERmRJaXdpYVhOeklqb2lhSFIwY0hNNkx5OWhZMk52ZFc1MGN5NW5iMjluYkdVdVkyOXRJaXdpYVdGMElqb2lNVFV4TWpZME5qQTRNQ0lzSW1WNGNDSTZJakUxTVRJMk5EazJPREFpTENKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlgwPScsXHJcbmV4cGlyZXM6JzE1MTI2NDk2ODAnfSxcclxuLypcclxua2V5UGFpcjp7XHJcbnB1YmxpYzpbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdLFxyXG5wcml2YXRlOls0OCwxMzAsNCwxOTEsMiwxLDAsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCw0LDEzMCw0LDE2OSw0OCwxMzAsNCwxNjUsMiwxLDAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDEsMiwxMzAsMSwwLDEwMywyNDQsMTM3LDExOCwxMTYsODIsMTQsMjAzLDEwMiwxMDcsMjUzLDg4LDEyLDE5OSwyMjIsNjAsMjQzLDEzNiw4NiwxNTcsNzQsMjI0LDE5MCw1MywxMTMsNTcsMTU3LDI1MCw0OSwxMzAsOTYsMzEsMjUyLDEzNiwxNTIsNzAsMTQzLDE3LDIxNSw5NiwxMDMsNTEsMTgsMzUsMTQxLDIxMiwyMTAsMjA1LDksMjE2LDgzLDcwLDI0NSw3MSwxMzgsMTE5LDExMiwyMjksMTY0LDE3Niw5LDM3LDgxLDE2MSwxOTMsMTU0LDY4LDI0OSwxMTUsMTA2LDIwMSw2LDEyLDIyNSwxNDQsMTI2LDE0MSwyMTAsMTQxLDI0MiwxMjgsMTU5LDIyMSwxNjMsMjIyLDIxLDIzMywyMzAsMTY3LDIwNiw1OSwyNCwyNTAsMjMzLDgxLDEyMiwxMDIsMjYsNiwyMzMsNzIsMTMzLDQ3LDc3LDE1NSwyMzgsODYsNiwxMzksMjQsMTMxLDE2MywxNzksMTEyLDQ4LDI0NywxNDIsNiwyMDcsMjA0LDE3MywyMjMsMTQwLDE5OSwxNTAsOTUsMTIzLDE1MiwyMDIsMTU1LDEzMSwyMzgsNjIsOTYsMTMzLDQsMjE3LDUxLDEyMSwzMCwzOCwxNzgsMTg5LDIxNiw0NCwzNSwyNDEsOTMsNyw2Miw5MCwxMTEsMjE2LDY2LDIwOSwyNDMsMTI4LDIzNCwxNDEsODQsMTM1LDE4MSwxMywzOCwyMjAsMTE0LDI0NSwyNDAsMTc4LDk1LDIyMCwyMDYsMTEsMTg2LDIzNCwyMTMsNjYsMTIxLDgzLDY4LDg5LDc1LDQ2LDE4MywxNDUsMTgzLDE0NywxNjAsMjE1LDExOCwxOTgsMTI1LDE4MSwxNDYsMzAsMjUxLDU4LDg3LDQ3LDIwOSwyMzcsOTcsMjQsNDcsMTc5LDYsMTEwLDI0Miw5OSwxNTAsMjI2LDE0OCwxOTgsMTc0LDE0NiwxMDEsMjEzLDg3LDE3OCwxMCwyMjMsMTA1LDE4LDU2LDUzLDIyLDIxMiwxNTgsMTcwLDE3Niw1MSw4NiwxNDUsMTI1LDEyNCw0NCw5LDg1LDE5LDE0NCwyNDYsMTcwLDc4LDEyNCwzMCwzMiwxMiwxNjYsMTc0LDEzOSw3Nyw2MywxNzMsODIsMTAsMTUzLDIsMTI5LDEyOSwwLDI0OCwxOCwxNDMsMjQ2LDEzNywxMzYsMTQ1LDIxOSwxNzgsMzksMjcsOTQsNjQsOTAsNDcsMTYzLDExNCw2MCw2MywxODcsMTMxLDE0MywyNDQsMTYsNDIsMTI4LDIzMSwxMTcsOTIsOTgsMjE5LDE1NSw2MiwxMDcsMjUyLDE3LDI0NSw0NSwxNjAsMjI1LDEwMywxNDIsNzIsMzYsMTkzLDE1MCwyMzUsMjE0LDE3NSw2MiwyMTIsNTYsNDUsOSwwLDYwLDExNCwxMDcsMTM0LDIyOCwyMDQsMTMxLDEzMSwyMTQsOTQsMjAxLDE0OCwxNTksOTksMTM5LDE4MSwxMywxMTksMzgsMzAsMTA3LDE2NiwxNjUsMjAzLDQzLDM0LDIwLDIwNywxNzEsMzIsNTgsMTY3LDYyLDE5NiwxNTMsMTAzLDIwNCwyMTMsMjQ3LDQ4LDExMSwyMjcsNTksOTUsOTcsMTk0LDE4Nyw1MywxMCwyNDcsMTA4LDU4LDg2LDI4LDI5LDExMyw4LDExMCwxNzEsMjIwLDI0NSwxMSw4MiwyMzMsMjIzLDkxLDY4LDE2NiwxMTcsMTc0LDE4Nyw2Miw3NywyLDEyOSwxMjksMCwyMzUsMTE4LDIsMTA1LDIzOSwyMTIsMzAsMTA0LDE1Nyw0MSwxMDksMTEsMjQ4LDE1MiwyMiwyMzYsOTcsNDAsMTUzLDEzMSwyMjgsNSw4NiwxODcsMTEzLDEyNiwxNDQsNzYsMTQxLDc5LDExMCwyNTAsMTQ2LDE1Miw0OSw1OCwxNTYsMjAxLDE3Niw5MiwxODksMjA5LDMwLDExMiwxMDgsMTc1LDIwNCwyMDQsMjQ3LDE2NCw0NiwxMjksMjM5LDk4LDEyNyw0OSwxNDUsMjE4LDYzLDE5MywxMjQsMTc0LDE4LDk4LDIwMSw5OSwxNTQsMTYyLDEzOCw3OCwxNTksMjUzLDMsMjQ4LDMsMjA5LDM2LDIzOSwxOTMsMTU1LDE5Myw1LDE5LDIzNiwzNyw3OCwxMTgsMTM1LDI1MCwxOTksNywxNDEsMjQ4LDEyMCwzNiwxMzYsOTMsOTgsMTc0LDYwLDE4LDIxNSw5MywxNzQsMTA3LDE0MSwxMTYsMTQ1LDE2NywyMjEsMjEwLDE2OSwyNDcsNjcsMjU0LDIyMiwxNjEsMTM0LDYzLDIyMSw5MCw4Nyw0Miw5OSwyMjcsODEsMTczLDE1MSwyLDEyOSwxMjksMCwxMzMsMjMsMTY4LDEwMyw4MywyMzIsMTQ2LDE2MCwxODEsMjMsNDAsMzgsMjA0LDEzLDIxNCwyMDMsNDksNDEsMTk1LDIyNywxODksMTgxLDgsMjQzLDExOSwxMDYsNzUsNjcsMjUwLDI1MCwxMCwyMzQsOTgsMTE4LDI2LDI1MCwzNSwxMjEsMTMyLDEyNCwxMCw3NiwyNiwxOTgsMTY1LDE1NCwxMDgsMTksMTE3LDg4LDIzLDE3LDE5MiwxNDMsMTg0LDE3NywxODEsMTQxLDE1Nyw0LDE4NSwyNDgsMTkzLDc3LDIwNCwyNDMsNywxNzAsMjQwLDQsMTExLDExMywxODMsMCwyNywxMzYsMjAsMTksMTQ5LDc0LDMzLDI0MSwyMTgsMTA4LDIzNiw4MCwxNzEsMTQ4LDE2LDExNiw5NywxMDksODMsNzQsODgsMTQ1LDk0LDIzOSwxMDIsMTkyLDE5LDExNCwyMDcsNSwxMjgsNTEsMTExLDE2NCwyMzcsODYsMTU0LDk5LDUyLDE5Nyw2Miw1NywxODIsNiwxNTIsMjQ1LDYxLDEzNyw1OCwxMDUsMTU5LDIsODQsMTA5LDIsMTI5LDEyOSwwLDIyNiw2NywxMTEsMTMyLDk1LDkxLDEwMSwxNzcsNjMsMTg5LDQ0LDUzLDE5MywxODQsOTIsMjMwLDIyMyw5OCwxMzMsNzQsMjA5LDg2LDUyLDcsNjUsMTk1LDIwNiwxMDAsODEsMTc4LDE0NCw2NSwxNjcsMTUxLDQyLDc5LDg5LDE0OSwxOCwxNzMsMTg4LDIxLDI0NCwyNTEsNDksMjMwLDQxLDE1MCwxNTMsNDYsMzUsMzgsMjMxLDk5LDE3NCw1NiwxMTUsMzIsMjE1LDI1Myw4NSwxNDcsMTA4LDE5NywxNDcsMzQsMjM2LDIxNiwyMjIsMTc3LDU3LDkwLDEzNiwxMTQsMjA3LDQ4LDQ2LDMxLDkwLDIyMCwxOCw1OCwxNDMsMjM5LDExMSwyMTQsMjcsOTUsNiwzNiw1MywyMjksNjIsMTA4LDQ1LDM5LDEsMzAsNDcsMTc4LDU2LDE2NCwyMDYsNTYsNDIsMjA4LDQ2LDE5Myw2MSwzMSwxNDcsNDUsMTQ3LDIzLDE4NywyMiw1MCwyNTUsMTExLDIyOSwxMzIsMTk5LDE1Miw3NSwxNDIsMTM2LDIwOSwxNTEsMiwxMjksMTI5LDAsMTY1LDU2LDIzMiw3Niw1NSw1NywyNDAsMTU5LDkyLDIwNywyMjAsMTQzLDEzMCwzMCw1NywyMzQsMjUxLDE3MiwxNzEsMTgwLDU0LDE1OSwyMjksOTYsMjQ2LDczLDExMiwxNDYsNzUsMTU3LDI0MiwyMDEsMTYxLDIxOCwzNywxNzYsMzUsMTcwLDUwLDkwLDE0OCwxMDIsMTkxLDE5OSwyMzksMTc0LDc4LDcyLDY3LDg1LDE5OSw0NSwxNDksMTQ1LDEzMiwxNjEsMjEyLDMzLDE1Nyw3NSwyMTYsNzksMzksMjMzLDE4LDIxMCwyNTUsMjYsNzIsMjI5LDIzOSw0NCwxMiwxNDcsMTU4LDE3NiwxOTIsOTUsMTI2LDMyLDE3NSwyMywyMjYsMTMxLDEzOSwxOTcsMTc1LDE5Myw2Miw4LDE1MSwyNTIsNjgsMTU0LDk0LDg5LDE4OSwxMjUsOTAsMzAsMzYsMTc1LDczLDIzMCwxOTQsMTMsMjMzLDI0NywxMjMsNjAsMjQxLDQ3LDE3MSw1MSwxODksMTEyLDExMSwyMTMsMTQxLDg5LDcwLDI0OSwyMzYsNjMsMjM2LDExMCwxMTUsMjA4XVxyXG59Ki9cclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9Ob2RlanNQcm94eVN0dWIuaWRwLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("module.exports = require(\"https\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJodHRwc1wiPzEwZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcImh0dHBzXCIpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiaHR0cHNcIlxuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

eval("(function () {\n  \"use strict\";\n\n  function btoa(str) {\n    var buffer;\n\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = Buffer.from(str.toString(), 'binary');\n    }\n\n    return buffer.toString('base64');\n  }\n\n  module.exports = btoa;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9ub2RlX21vZHVsZXMvYnRvYS9pbmRleC5qcz9mZWMwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLENBQUMiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGZ1bmN0aW9uIGJ0b2Eoc3RyKSB7XG4gICAgdmFyIGJ1ZmZlcjtcblxuICAgIGlmIChzdHIgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgIGJ1ZmZlciA9IHN0cjtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmZmVyID0gQnVmZmVyLmZyb20oc3RyLnRvU3RyaW5nKCksICdiaW5hcnknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuXG4gIG1vZHVsZS5leHBvcnRzID0gYnRvYTtcbn0oKSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL25vZGVfbW9kdWxlcy9idG9hL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction atob(str) {\n  return Buffer.from(str, 'base64').toString('binary');\n}\n\nmodule.exports = atob.atob = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L2dvb2dsZS9ub2RlX21vZHVsZXMvYXRvYi9ub2RlLWF0b2IuanM/M2JiZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBhdG9iKHN0cikge1xuICByZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAnYmFzZTY0JykudG9TdHJpbmcoJ2JpbmFyeScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGF0b2IuYXRvYiA9IGF0b2I7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvZ29vZ2xlL25vZGVfbW9kdWxlcy9hdG9iL25vZGUtYXRvYi5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ]);
});",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "35.60",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "52c91699f84b479f34e9f7abce2255fff",
    "constraints": {
      "node": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "MicrosoftProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar microsoftInfo = {\n  clientID: '000000004C18391F',\n  redirectURI: location.origin,\n  tokenEndpoint: 'https://login.live.com/oauth20_authorize.srf?',\n  type: 'token',\n  scope: 'wl.signin,wl.basic',\n  mode: 'fragment'\n};\n\n/*\r\nINSTRUCTIONS TO ADD ANOTHER DOMAINS TO BE AUTHORISED\r\n\r\nHow to change information (using the rethinkProject2020@outlook.com account):\r\nuser: rethinkProject2020@outlook.com\r\npass: 45%asd34!zD2&\r\n\r\nother test accounts:\r\nuser: openidtest10@outlook.com\r\npass: testOpenID10\r\n\r\n1º https://portal.azure.com/ -> example\r\n2º go to the left side bar -> more services -> Azure active directory\r\n3º open a small box on the rigth saying \"App registrations\".\r\n4º on right of the page -> \"rethink Project\" -> redirect URIs\r\n5º Add the URI to be authorised for the requests.\r\n\r\nTO ADD MORE USERS THAT ARE ALLOW TO MADE REQUEST (maybe because is a trial account, it is required  to add users to the list of the users that can make requests for the OIDC )\r\n\r\n1º https://portal.azure.com/ -> example\r\n2º go to the left side bar -> more services -> Azure active directory\r\n3º open a small box on the middle saying \"Users and groups\".\r\n4º on right of the page -> \"All users\" -> top button \" + add\"\r\n5º fill with the information and click create\r\n*/\n\n/**\r\n* Identity Provider Proxy\r\n*/\nvar idp = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    return new Promise(function (resolve, reject) {\n\n      var idToken = JSON.parse(atob(assertion));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  * TODO add details of the implementation, and improve implementation\r\n  *\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n\n    //start the login phase\n    //TODO later should be defined a better approach\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n        var m = microsoftInfo;\n\n        //let requestUrl = 'https://login.windows.net/common/oauth2/authorize?response_type=id_token&client_id=7e2f3589-4b38-4b1c-a321-c9251de00ef2&scope=openid&nonce=7362CAEA-9CA5-4B43-9BA3-34D7C303EBA7&response_mode=fragment&redirect_uri=' + location.origin;\n\n        var requestUrl = m.tokenEndpoint + 'response_type=' + m.type + '&client_id=' + m.clientID + '&scope=' + m.scope + '&nonce=' + contents + '&response_mode=' + m.mode + '&redirect_uri=' + m.redirectURI;\n\n        reject({ name: 'IdPLoginError', loginUrl: requestUrl });\n      } else {\n\n        //later verify the token and use the information from the JWT\n\n        var token = hint.split('/');\n        var tokenSplited = token[3];\n\n        var hintSplited = tokenSplited.split('.');\n\n        var idToken = JSON.parse(atob(hintSplited[1]));\n\n        var idpBundle = { domain: 'microsoft.com', protocol: 'OIDC' };\n        var identityBundle = { assertion: hintSplited[1], idp: idpBundle, infoToken: idToken };\n        resolve(identityBundle);\n      }\n    });\n  }\n};\n\n/**\r\n* Identity Provider Proxy Protocol Stub\r\n*/\n\nvar MicrosoftProxyStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function MicrosoftProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, MicrosoftProxyStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === 'domain-idp://microsoft.com') {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(MicrosoftProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n    * This function receives a message and a value. It replies the value to the sender of the message received\r\n    *\r\n    * @param  {message}   message received\r\n    * @param  {value}     value to include in the new message to send\r\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[GoogleIdpProxy.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return MicrosoftProxyStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'MicrosoftProxyStub',\n    instance: new MicrosoftProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvbWljcm9zb2Z0L01pY3Jvc29mdFByb3h5U3R1Yi5pZHAuanM/NDJlZSJdLCJuYW1lcyI6WyJhY3RpdmF0ZSIsIm1pY3Jvc29mdEluZm8iLCJjbGllbnRJRCIsInJlZGlyZWN0VVJJIiwibG9jYXRpb24iLCJvcmlnaW4iLCJ0b2tlbkVuZHBvaW50IiwidHlwZSIsInNjb3BlIiwibW9kZSIsImlkcCIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiYXNzZXJ0aW9uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpZFRva2VuIiwiSlNPTiIsInBhcnNlIiwiYXRvYiIsImlkZW50aXR5IiwiZW1haWwiLCJjb250ZW50cyIsIm5vbmNlIiwiZ2VuZXJhdGVBc3NlcnRpb24iLCJoaW50IiwibSIsInJlcXVlc3RVcmwiLCJuYW1lIiwibG9naW5VcmwiLCJ0b2tlbiIsInNwbGl0IiwidG9rZW5TcGxpdGVkIiwiaGludFNwbGl0ZWQiLCJpZHBCdW5kbGUiLCJkb21haW4iLCJwcm90b2NvbCIsImlkZW50aXR5QnVuZGxlIiwiaW5mb1Rva2VuIiwiTWljcm9zb2Z0UHJveHlTdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsIl90aGlzIiwibWVzc2FnZUJ1cyIsImFkZExpc3RlbmVyIiwibXNnIiwidG8iLCJyZXF1ZXN0VG9JZHAiLCJfc2VuZFN0YXR1cyIsInBhcmFtcyIsImJvZHkiLCJtZXRob2QiLCJ1c2VybmFtZUhpbnQiLCJ0aGVuIiwidmFsdWUiLCJyZXBseU1lc3NhZ2UiLCJlcnJvciIsIm1lc3NhZ2UiLCJpZCIsImZyb20iLCJjb2RlIiwicG9zdE1lc3NhZ2UiLCJyZWFzb24iLCJjb25zb2xlIiwibG9nIiwiX3N0YXRlIiwiZGVzYyIsInVybCIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkErTXdCQSxROzs7O0FBL014QixJQUFJQyxnQkFB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QUFRLElBQVo7O0FBRUFxQixjQUFRQyxHQUFSLENBQVksOEJBQVosRUFBNENWLEtBQTVDOztBQUVBWixZQUFNdUIsTUFBTixHQUFlWCxLQUFmOztBQUVBLFVBQUlULE1BQU07QUFDUnZDLGNBQU0sUUFERTtBQUVScUQsY0FBTWpCLE1BQU1ILG1CQUZKO0FBR1JPLFlBQUlKLE1BQU1ILG1CQUFOLEdBQTRCLFNBSHhCO0FBSVJXLGNBQU07QUFDSkksaUJBQU9BO0FBREg7QUFKRSxPQUFWOztBQVNBLFVBQUlRLE1BQUosRUFBWTtBQUNWakIsWUFBSUssSUFBSixDQUFTZ0IsSUFBVCxHQUFnQkosTUFBaEI7QUFDRDs7QUFFRHBCLFlBQU1DLFVBQU4sQ0FBaUJrQixXQUFqQixDQUE2QmhCLEdBQTdCO0FBQ0Q7Ozs7OztBQUlIOztBQUVBOzs7Ozs7Ozs7QUFPZSxTQUFTOUMsUUFBVCxDQUFrQm9FLEdBQWxCLEVBQXVCM0IsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2pELFNBQU87QUFDTGQsVUFBTSxvQkFERDtBQUVMeUMsY0FBVSxJQUFJOUIsa0JBQUosQ0FBdUI2QixHQUF2QixFQUE0QjNCLEdBQTVCLEVBQWlDQyxNQUFqQztBQUZMLEdBQVA7QUFJRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IG1pY3Jvc29mdEluZm8gPSB7XHJcbiAgY2xpZW50SUQ6ICAgICAgICAgICAgICAnMDAwMDAwMDA0QzE4MzkxRicsXHJcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICBsb2NhdGlvbi5vcmlnaW4sXHJcbiAgdG9rZW5FbmRwb2ludDogICAgICAgICAnaHR0cHM6Ly9sb2dpbi5saXZlLmNvbS9vYXV0aDIwX2F1dGhvcml6ZS5zcmY/JyxcclxuICB0eXBlOiAgICAgICAgICAgICAgICAgICd0b2tlbicsXHJcbiAgc2NvcGU6ICAgICAgICAgICAgICAgICAnd2wuc2lnbmluLHdsLmJhc2ljJyxcclxuICBtb2RlOiAgICAgICAgICAgICAgICAgICdmcmFnbWVudCdcclxufTtcclxuXHJcbi8qXHJcbklOU1RSVUNUSU9OUyBUTyBBREQgQU5PVEhFUiBET01BSU5TIFRPIEJFIEFVVEhPUklTRURcclxuXHJcbkhvdyB0byBjaGFuZ2UgaW5mb3JtYXRpb24gKHVzaW5nIHRoZSByZXRoaW5rUHJvamVjdDIwMjBAb3V0bG9vay5jb20gYWNjb3VudCk6XHJcbnVzZXI6IHJldGhpbmtQcm9qZWN0MjAyMEBvdXRsb29rLmNvbVxyXG5wYXNzOiA0NSVhc2QzNCF6RDImXHJcblxyXG5vdGhlciB0ZXN0IGFjY291bnRzOlxyXG51c2VyOiBvcGVuaWR0ZXN0MTBAb3V0bG9vay5jb21cclxucGFzczogdGVzdE9wZW5JRDEwXHJcblxyXG4xwrogaHR0cHM6Ly9wb3J0YWwuYXp1cmUuY29tLyAtPiBleGFtcGxlXHJcbjLCuiBnbyB0byB0aGUgbGVmdCBzaWRlIGJhciAtPiBtb3JlIHNlcnZpY2VzIC0+IEF6dXJlIGFjdGl2ZSBkaXJlY3RvcnlcclxuM8K6IG9wZW4gYSBzbWFsbCBib3ggb24gdGhlIHJpZ3RoIHNheWluZyBcIkFwcCByZWdpc3RyYXRpb25zXCIuXHJcbjTCuiBvbiByaWdodCBvZiB0aGUgcGFnZSAtPiBcInJldGhpbmsgUHJvamVjdFwiIC0+IHJlZGlyZWN0IFVSSXNcclxuNcK6IEFkZCB0aGUgVVJJIHRvIGJlIGF1dGhvcmlzZWQgZm9yIHRoZSByZXF1ZXN0cy5cclxuXHJcblRPIEFERCBNT1JFIFVTRVJTIFRIQVQgQVJFIEFMTE9XIFRPIE1BREUgUkVRVUVTVCAobWF5YmUgYmVjYXVzZSBpcyBhIHRyaWFsIGFjY291bnQsIGl0IGlzIHJlcXVpcmVkICB0byBhZGQgdXNlcnMgdG8gdGhlIGxpc3Qgb2YgdGhlIHVzZXJzIHRoYXQgY2FuIG1ha2UgcmVxdWVzdHMgZm9yIHRoZSBPSURDIClcclxuXHJcbjHCuiBodHRwczovL3BvcnRhbC5henVyZS5jb20vIC0+IGV4YW1wbGVcclxuMsK6IGdvIHRvIHRoZSBsZWZ0IHNpZGUgYmFyIC0+IG1vcmUgc2VydmljZXMgLT4gQXp1cmUgYWN0aXZlIGRpcmVjdG9yeVxyXG4zwrogb3BlbiBhIHNtYWxsIGJveCBvbiB0aGUgbWlkZGxlIHNheWluZyBcIlVzZXJzIGFuZCBncm91cHNcIi5cclxuNMK6IG9uIHJpZ2h0IG9mIHRoZSBwYWdlIC0+IFwiQWxsIHVzZXJzXCIgLT4gdG9wIGJ1dHRvbiBcIiArIGFkZFwiXHJcbjXCuiBmaWxsIHdpdGggdGhlIGluZm9ybWF0aW9uIGFuZCBjbGljayBjcmVhdGVcclxuKi9cclxuXHJcbi8qKlxyXG4qIElkZW50aXR5IFByb3ZpZGVyIFByb3h5XHJcbiovXHJcbmxldCBpZHAgPSB7XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXHJcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdFxyXG4gICovXHJcbiAgdmFsaWRhdGVBc3NlcnRpb246IChhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XHJcblxyXG4gICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihhc3NlcnRpb24pKTtcclxuXHJcbiAgICAgIHJlc29sdmUoe2lkZW50aXR5OiBpZFRva2VuLmVtYWlsLCBjb250ZW50czogaWRUb2tlbi5ub25jZX0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gZ2VuZXJhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uXHJcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgaW1wbGVtZW50YXRpb25cclxuICAqXHJcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB3aXRoIGFuIGlkZW50aXR5IGFzc2VydGlvblxyXG4gICovXHJcbiAgZ2VuZXJhdGVBc3NlcnRpb246IChjb250ZW50cywgb3JpZ2luLCBoaW50KSA9PiB7XHJcblxyXG4gICAgLy9zdGFydCB0aGUgbG9naW4gcGhhc2VcclxuICAgIC8vVE9ETyBsYXRlciBzaG91bGQgYmUgZGVmaW5lZCBhIGJldHRlciBhcHByb2FjaFxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBpZiAoIWhpbnQpIHtcclxuICAgICAgICBsZXQgbSA9IG1pY3Jvc29mdEluZm87XHJcblxyXG4gICAgICAgIC8vbGV0IHJlcXVlc3RVcmwgPSAnaHR0cHM6Ly9sb2dpbi53aW5kb3dzLm5ldC9jb21tb24vb2F1dGgyL2F1dGhvcml6ZT9yZXNwb25zZV90eXBlPWlkX3Rva2VuJmNsaWVudF9pZD03ZTJmMzU4OS00YjM4LTRiMWMtYTMyMS1jOTI1MWRlMDBlZjImc2NvcGU9b3BlbmlkJm5vbmNlPTczNjJDQUVBLTlDQTUtNEI0My05QkEzLTM0RDdDMzAzRUJBNyZyZXNwb25zZV9tb2RlPWZyYWdtZW50JnJlZGlyZWN0X3VyaT0nICsgbG9jYXRpb24ub3JpZ2luO1xyXG5cclxuICAgICAgICBsZXQgcmVxdWVzdFVybCA9IG0udG9rZW5FbmRwb2ludCArICdyZXNwb25zZV90eXBlPScgKyBtLnR5cGUgKyAnJmNsaWVudF9pZD0nICsgbS5jbGllbnRJRCArICcmc2NvcGU9JyArIG0uc2NvcGUgKyAnJm5vbmNlPScgKyAgY29udGVudHMgKyAnJnJlc3BvbnNlX21vZGU9JyArIG0ubW9kZSArICcmcmVkaXJlY3RfdXJpPScgKyAgbS5yZWRpcmVjdFVSSTtcclxuXHJcbiAgICAgICAgcmVqZWN0KHtuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsfSk7XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAvL2xhdGVyIHZlcmlmeSB0aGUgdG9rZW4gYW5kIHVzZSB0aGUgaW5mb3JtYXRpb24gZnJvbSB0aGUgSldUXHJcblxyXG4gICAgICAgIGxldCB0b2tlbiA9IGhpbnQuc3BsaXQoJy8nKTtcclxuICAgICAgICBsZXQgdG9rZW5TcGxpdGVkID0gdG9rZW5bM107XHJcblxyXG4gICAgICAgIGxldCBoaW50U3BsaXRlZCA9IHRva2VuU3BsaXRlZC5zcGxpdCgnLicpO1xyXG5cclxuICAgICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihoaW50U3BsaXRlZFsxXSkpO1xyXG5cclxuICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ21pY3Jvc29mdC5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcclxuICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7YXNzZXJ0aW9uOiBoaW50U3BsaXRlZFsxXSwgaWRwOiBpZHBCdW5kbGUsIGluZm9Ub2tlbjogaWRUb2tlbn07XHJcbiAgICAgICAgcmVzb2x2ZShpZGVudGl0eUJ1bmRsZSk7XHJcblxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViXHJcbiovXHJcbmNsYXNzIE1pY3Jvc29mdFByb3h5U3R1YiB7XHJcblxyXG4gIC8qKlxyXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcclxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXHJcbiAgKlxyXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXHJcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxyXG4gICovXHJcbiBjb25zdHJ1Y3RvcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xyXG4gICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcclxuICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1cztcclxuICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xyXG5cclxuICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xyXG4gICAgIGlmIChtc2cudG8gPT09ICdkb21haW4taWRwOi8vbWljcm9zb2Z0LmNvbScpIHtcclxuXHJcbiAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcclxuICAgICB9XHJcbiAgIH0pO1xyXG4gICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xyXG4gfVxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRoYXQgc2VlIHRoZSBpbnRlbmRlZCBtZXRob2QgaW4gdGhlIG1lc3NhZ2UgcmVjZWl2ZWQgYW5kIGNhbGwgdGhlIHJlc3BlY3RpdmUgZnVuY3Rpb25cclxuICAqXHJcbiAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXHJcbiAgKi9cclxuICByZXF1ZXN0VG9JZHAobXNnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcclxuXHJcbiAgICBzd2l0Y2ggKG1zZy5ib2R5Lm1ldGhvZCkge1xyXG4gICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XHJcbiAgICAgICAgaWRwLmdlbmVyYXRlQXNzZXJ0aW9uKHBhcmFtcy5jb250ZW50cywgcGFyYW1zLm9yaWdpbiwgcGFyYW1zLnVzZXJuYW1lSGludCkudGhlbihcclxuICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTt9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxyXG4gICAgICAgIGlkcC52YWxpZGF0ZUFzc2VydGlvbihwYXJhbXMuYXNzZXJ0aW9uLCBwYXJhbXMub3JpZ2luKS50aGVuKFxyXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXHJcblxyXG4gICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO31cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBUaGlzIGZ1bmN0aW9uIHJlY2VpdmVzIGEgbWVzc2FnZSBhbmQgYSB2YWx1ZS4gSXQgcmVwbGllcyB0aGUgdmFsdWUgdG8gdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSByZWNlaXZlZFxyXG4gICpcclxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxyXG4gICogQHBhcmFtICB7dmFsdWV9ICAgICB2YWx1ZSB0byBpbmNsdWRlIGluIHRoZSBuZXcgbWVzc2FnZSB0byBzZW5kXHJcbiAgKi9cclxuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgbWVzc2FnZSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50byxcclxuICAgICAgICAgICAgICAgICAgIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZX19O1xyXG5cclxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgfVxyXG5cclxuICBfc2VuZFN0YXR1cyh2YWx1ZSwgcmVhc29uKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuc2VuZFN0YXR1c10gJywgdmFsdWUpO1xyXG5cclxuICAgIF90aGlzLl9zdGF0ZSA9IHZhbHVlO1xyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICd1cGRhdGUnLFxyXG4gICAgICBmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxyXG4gICAgICB0bzogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJyxcclxuICAgICAgYm9keToge1xyXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGlmIChyZWFzb24pIHtcclxuICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjtcclxuICAgIH1cclxuXHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XHJcblxyXG4vKipcclxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXHJcbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhY3RpdmF0ZSh1cmwsIGJ1cywgY29uZmlnKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIG5hbWU6ICdNaWNyb3NvZnRQcm94eVN0dWInLFxyXG4gICAgaW5zdGFuY2U6IG5ldyBNaWNyb3NvZnRQcm94eVN0dWIodXJsLCBidXMsIGNvbmZpZylcclxuICB9O1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9taWNyb3NvZnQvTWljcm9zb2Z0UHJveHlTdHViLmlkcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "microsoft.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "34.30",
    "description": "IDPProxy for microsoft idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "546e0f62b1aa6b322a17c85cf925e1dba",
    "constraints": {
      "browser": true
    },
    "objectName": "microsoft.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsForBrowserProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\n//const https = require('https');\n//let btoa = require('btoa');\n//let atob = require('atob');\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\nvar idp = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJSFAKEBrowser:assertion', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n\n      // atob may need to be required for nodejs\n      // var atob = require('atob');\n\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      var idTokenSplited = content.tokenID.split('.');\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  * TODO add details of the implementation, and improve implementation\r\n  *\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertionFAKE_BROWSER:contents]', contents);\n    console.log('[IDPROXY.generateAssertionFAKE_BROWSER:origin]', origin);\n    console.log('[IDPROXY.generateAssertionFAKE_BROWSER:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      console.log('generateMessageResponse:');\n      return resolve(generateMessageResponse);\n    });\n  }\n\n  /**\r\n  * Identity Provider Proxy Protocol Stub\r\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('FAKE NODEJS constructor');\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://nodejs-idp') {\n        _this.requestToIdp(msg);\n      }\n    });\n\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n      * This function receives a message and a value. It replies the value to the sender of the message received\r\n      *\r\n      * @param  {message}   message received\r\n      * @param  {value}     value to include in the new message to send\r\n      */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[NodeJS.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvbm9kZWpzLWlkcC9GYWtlTm9kZWpzRm9yQnJvd3NlclByb3h5U3R1Yi5pZHAuanM/ZmRlMiJdLCJuYW1lcyI6WyJhY3RpdmF0ZSIsImlkZW50aXRpZXMiLCJuSWRlbnRpdHkiLCJnb29nbGVJbmZvIiwiY2xpZW50U2VjcmV0IiwiY2xpZW50SUQiLCJyZWRpcmVjdFVSSSIsImlzc3VlciIsInRva2VuRW5kcG9pbnQiLCJqd2tzVXJpIiwiYXV0aG9yaXNhdGlvbkVuZHBvaW50IiwidXNlcmluZm8iLCJ0b2tlbkluZm8iLCJhY2Nlc3NUeXBlIiwidHlwZSIsInNjb3BlIiwic3RhdGUiLCJpZHAiLCJ2YWxpZGF0ZUFzc2VydGlvbiIsImFzc2VydGlvbiIsIm9yaWdpbiIsImNvbnNvbGUiLCJsb2ciLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRlY29kZWRDb250ZW50IiwiYXRvYiIsImNvbnRlbnQiLCJKU09OIiwicGFyc2UiLCJpZFRva2VuU3BsaXRlZCIsInRva2VuSUQiLCJzcGxpdCIsImlkVG9rZW4iLCJpZGVudGl0eSIsImVtYWlsIiwiY29udGVudHMiLCJub25jZSIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiaGludCIsImdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlIiwiTm9kZWpzUHJveHlTdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsIl90aGlzIiwibWVzc2FnZUJ1cyIsImFkZExpc3RlbmVyIiwibXNnIiwidG8iLCJyZXF1ZXN0VG9JZHAiLCJfc2VuZFN0YXR1cyIsInBhcmFtcyIsImJvZHkiLCJtZXRob2QiLCJ1c2VybmFtZUhpbnQiLCJ0aGVuIiwidmFsdWUiLCJyZXBseU1lc3NhZ2UiLCJlcnJvciIsIm1lc3NhZ2UiLCJpZCIsImZyb20iLCJjb2RlIiwicG9zdE1lc3NhZ2UiLCJyZWFzb24iLCJfc3RhdGUiLCJkZXNjIiwidXJsIiwi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QUVBLFVBQUlULE1BQU07QUFDUm5DLGNBQU0sUUFERTtBQUVSaUQsY0FBTWpCLE1BQU1ILG1CQUZKO0FBR1JPLFlBQUlKLE1BQU1ILG1CQUFOLEdBQTRCLFNBSHhCO0FBSVJXLGNBQU07QUFDSkksaUJBQU9BO0FBREg7QUFKRSxPQUFWOztBQVNBLFVBQUlRLE1BQUosRUFBWTtBQUNWakIsWUFBSUssSUFBSixDQUFTYyxJQUFULEdBQWdCRixNQUFoQjtBQUNEOztBQUVEcEIsWUFBTUMsVUFBTixDQUFpQmtCLFdBQWpCLENBQTZCaEIsR0FBN0I7QUFDRDs7Ozs7O0FBR0g7Ozs7Ozs7OztBQU9lLFNBQVNqRCxRQUFULENBQWtCcUUsR0FBbEIsRUFBdUJ6QixHQUF2QixFQUE0QkMsTUFBNUIsRUFBb0M7QUFDakQsU0FBTztBQUNMeUIsVUFBTSxpQkFERDtBQUVMQyxjQUFVLElBQUk3QixlQUFKLENBQW9CMkIsR0FBcEIsRUFBeUJ6QixHQUF6QixFQUE4QkMsTUFBOUI7QUFGTCxHQUFQO0FBSUQiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBpZGVudGl0aWVzID0ge307XHJcbmxldCBuSWRlbnRpdHkgPSAwO1xyXG4vL2ltcG9ydCBmZXRjaCBmcm9tICdub2RlLWZldGNoJztcclxuLy9sZXQgZmV0Y2ggPSByZXF1aXJlKFwibm9kZS1mZXRjaFwiKTtcclxuLy9jb25zdCBodHRwcyA9IHJlcXVpcmUoJ2h0dHBzJyk7XHJcbi8vbGV0IGJ0b2EgPSByZXF1aXJlKCdidG9hJyk7XHJcbi8vbGV0IGF0b2IgPSByZXF1aXJlKCdhdG9iJyk7XHJcblxyXG5sZXQgZ29vZ2xlSW5mbyA9IHtcclxuICBjbGllbnRTZWNyZXQ6ICAgICAgICAgICdYeDRyS3VjYjVaWVRhWGxjWlg5SExmWlcnLFxyXG4gIGNsaWVudElEOiAgICAgICAgICAgICAgJzgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbScsXHJcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICAnaHR0cHM6Ly9sb2NhbGhvc3QnLFxyXG4gIGlzc3VlcjogICAgICAgICAgICAgICAgJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsXHJcbiAgdG9rZW5FbmRwb2ludDogICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuPycsXHJcbiAgandrc1VyaTogICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzPycsXHJcbiAgYXV0aG9yaXNhdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3YyL2F1dGg/JyxcclxuICB1c2VyaW5mbzogICAgICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdXNlcmluZm8/YWNjZXNzX3Rva2VuPScsXHJcbiAgdG9rZW5JbmZvOiAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0nLFxyXG4gIGFjY2Vzc1R5cGU6ICAgICAgICAgICAgJ29mZmxpbmUnLFxyXG4gIHR5cGU6ICAgICAgICAgICAgICAgICAgJ2NvZGUnLFxyXG4gIHNjb3BlOiAgICAgICAgICAgICAgICAgJ29wZW5pZCUyMGVtYWlsJTIwcHJvZmlsZScsXHJcbiAgc3RhdGU6ICAgICAgICAgICAgICAgICAnc3RhdGUnXHJcbn07XHJcblxyXG5cclxubGV0IGlkcCA9IHtcclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byB2YWxpZGF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb24gcmVjZWl2ZWRcclxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSB0aGUgaW1wbGVtZW50YXRpb25cclxuICAqXHJcbiAgKiBAcGFyYW0gIHthc3NlcnRpb259ICAgIElkZW50aXR5IEFzc2VydGlvbiB0byBiZSB2YWxpZGF0ZWRcclxuICAqIEBwYXJhbSAge29yaWdpbn0gICAgICAgT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgaWRlbnRpdHkgYXNzZXJ0aW9uIHZhbGlkYXRpb24gcmVzdWx0XHJcbiAgKi9cclxuICB2YWxpZGF0ZUFzc2VydGlvbjogKGFzc2VydGlvbiwgb3JpZ2luKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZygndmFsaWRhdGVBc3NlcnRpb25Qcm94eU5PREVKU0ZBS0VCcm93c2VyOmFzc2VydGlvbicsIGFzc2VydGlvbik7XHJcblxyXG4gICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZFxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XHJcblxyXG4gICAgICAvLyBhdG9iIG1heSBuZWVkIHRvIGJlIHJlcXVpcmVkIGZvciBub2RlanNcclxuICAgICAgLy8gdmFyIGF0b2IgPSByZXF1aXJlKCdhdG9iJyk7XHJcblxyXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XHJcbiAgICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7XHJcbiAgICAgIGxldCBpZFRva2VuU3BsaXRlZCA9IGNvbnRlbnQudG9rZW5JRC5zcGxpdCgnLicpO1xyXG4gICAgICBsZXQgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xyXG5cclxuICAgICAgcmVzb2x2ZSh7aWRlbnRpdHk6IGlkVG9rZW4uZW1haWwsIGNvbnRlbnRzOiBpZFRva2VuLm5vbmNlfSk7XHJcblxyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byBnZW5lcmF0ZSBhbiBpZGVudGl0eSBBc3NlcnRpb25cclxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSBpbXBsZW1lbnRhdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXHJcbiAgKi9cclxuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdbSURQUk9YWS5nZW5lcmF0ZUFzc2VydGlvbkZBS0VfQlJPV1NFUjpjb250ZW50c10nLCBjb250ZW50cyk7XHJcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb25GQUtFX0JST1dTRVI6b3JpZ2luXScsIG9yaWdpbik7XHJcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb25GQUtFX0JST1dTRVI6aGludF0nLCBoaW50KTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2U6Jyk7XHJcbiAgICAgIHJldHVybiByZXNvbHZlKGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlKTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxufVxyXG5cclxuLyoqXHJcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxyXG4qL1xyXG5jbGFzcyBOb2RlanNQcm94eVN0dWIge1xyXG5cclxuICAvKipcclxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXHJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxyXG4gICpcclxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqL1xyXG4gY29uc3RydWN0b3IocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpIHtcclxuICAgY29uc29sZS5sb2coJ0ZBS0UgTk9ERUpTIGNvbnN0cnVjdG9yJyk7XHJcbiAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgIF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgPSBydW50aW1lUHJvdG9TdHViVVJMO1xyXG4gICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xyXG4gICBfdGhpcy5jb25maWcgPSBjb25maWc7XHJcblxyXG4gICBfdGhpcy5tZXNzYWdlQnVzLmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7XHJcblxyXG4gICAgIC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcclxuICAgICBpZiAobXNnLnRvID09PSAnZG9tYWluLWlkcDovL25vZGVqcy1pZHAnKSB7XHJcbiAgICAgICAgX3RoaXMucmVxdWVzdFRvSWRwKG1zZyk7XHJcbiAgICAgfVxyXG4gICB9KTtcclxuXHJcbiAgIF90aGlzLl9zZW5kU3RhdHVzKCdjcmVhdGVkJyk7XHJcbiB9XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSB7bWVzc2FnZX0gIG1lc3NhZ2UgcmVjZWl2ZWQgaW4gdGhlIG1lc3NhZ2VCdXNcclxuICAqL1xyXG4gIHJlcXVlc3RUb0lkcChtc2cpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xyXG5cclxuICAgIHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XHJcbiAgICAgIGNhc2UgJ2dlbmVyYXRlQXNzZXJ0aW9uJzpcclxuICAgICAgICBpZHAuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKFxyXG4gICAgICAgICAgZnVuY3Rpb24odmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO30sXHJcblxyXG4gICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO31cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICd2YWxpZGF0ZUFzc2VydGlvbic6XHJcbiAgICAgICAgaWRwLnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbihlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7fVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuLyoqXHJcbiAgKiBUaGlzIGZ1bmN0aW9uIHJlY2VpdmVzIGEgbWVzc2FnZSBhbmQgYSB2YWx1ZS4gSXQgcmVwbGllcyB0aGUgdmFsdWUgdG8gdGhlIHNlbmRlciBvZiB0aGUgbWVzc2FnZSByZWNlaXZlZFxyXG4gICpcclxuICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxyXG4gICogQHBhcmFtICB7dmFsdWV9ICAgICB2YWx1ZSB0byBpbmNsdWRlIGluIHRoZSBuZXcgbWVzc2FnZSB0byBzZW5kXHJcbiAgKi9cclxuICByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgbWVzc2FnZSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50byxcclxuICAgICAgICAgICAgICAgICAgIGJvZHk6IHtjb2RlOiAyMDAsIHZhbHVlOiB2YWx1ZX19O1xyXG5cclxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgfVxyXG5cclxuICBfc2VuZFN0YXR1cyh2YWx1ZSwgcmVhc29uKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdbTm9kZUpTLnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcclxuXHJcbiAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAndXBkYXRlJyxcclxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcclxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAocmVhc29uKSB7XHJcbiAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxyXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnTm9kZWpzUHJveHlTdHViJyxcclxuICAgIGluc3RhbmNlOiBuZXcgTm9kZWpzUHJveHlTdHViKHVybCwgYnVzLCBjb25maWcpXHJcbiAgfTtcclxufVxyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvbm9kZWpzLWlkcC9GYWtlTm9kZWpzRm9yQnJvd3NlclByb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "34.90",
    "description": "IDPProxy for browser idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5d2606fd332d71526cafc4c13d80437b4",
    "constraints": {
      "browser": true,
      "onlyIdAssertionValidation": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar identities = {};\nvar nIdentity = 0;\n//import fetch from 'node-fetch';\n//let fetch = require(\"node-fetch\");\n//const https = require('https');\nvar btoa = __webpack_require__(1);\nvar atob = __webpack_require__(2);\n\nvar googleInfo = {\n  clientSecret: 'Xx4rKucb5ZYTaXlcZX9HLfZW',\n  clientID: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n  redirectURI: 'https://localhost',\n  issuer: 'https://accounts.google.com',\n  tokenEndpoint: 'https://www.googleapis.com/oauth2/v4/token?',\n  jwksUri: 'https://www.googleapis.com/oauth2/v3/certs?',\n  authorisationEndpoint: 'https://accounts.google.com/o/oauth2/v2/auth?',\n  userinfo: 'https://www.googleapis.com/oauth2/v3/userinfo?access_token=',\n  tokenInfo: 'https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=',\n  accessType: 'offline',\n  type: 'code',\n  scope: 'openid%20email%20profile',\n  state: 'state'\n};\n\nvar idp = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(assertion, origin) {\n    console.log('validateAssertionProxyNODEJSFAKE:assertion', assertion);\n\n    //TODO check the values with the hash received\n    return new Promise(function (resolve, reject) {\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      var idTokenSplited = content.tokenID.split('.');\n      var idToken = JSON.parse(atob(idTokenSplited[1]));\n\n      resolve({ identity: idToken.email, contents: idToken.nonce });\n    });\n  },\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  * TODO add details of the implementation, and improve implementation\r\n  *\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(contents, origin, hint) {\n    console.log('[IDPROXY.generateAssertionFAKE:contents]', contents);\n    console.log('[IDPROXY.generateAssertionFAKE:origin]', origin);\n    console.log('[IDPROXY.generateAssertionFAKE:hint]', hint);\n\n    return new Promise(function (resolve, reject) {\n\n      console.log('generateMessageResponse:');\n      return resolve(generateMessageResponse);\n    });\n  }\n\n  /**\r\n  * Identity Provider Proxy Protocol Stub\r\n  */\n};\nvar NodejsProxyStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function NodejsProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, NodejsProxyStub);\n\n    console.log('FAKE NODEJS constructor');\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n\n    _this.messageBus.addListener('*', function (msg) {\n\n      //TODO add the respective listener\n      if (msg.to === 'domain-idp://nodejs-idp') {\n        _this.requestToIdp(msg);\n      }\n    });\n\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(NodejsProxyStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          idp.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          idp.validateAssertion(params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n    * This function receives a message and a value. It replies the value to the sender of the message received\r\n    *\r\n    * @param  {message}   message received\r\n    * @param  {value}     value to include in the new message to send\r\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = { id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value } };\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[NodeJS.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return NodejsProxyStub;\n}();\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'NodejsProxyStub',\n    instance: new NodejsProxyStub(url, bus, config)\n  };\n}\n\nvar generateMessageResponse = { assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n  idp: {\n    domain: 'nodejs-idp',\n    protocol: 'OIDC' },\n  info: {\n    accessToken: 'ya29.GlsbBalGJJmVi_N5IDyqMI3JxkO5eLV4333I93eQBCpNAofEqtU4UkWHh8drVlrViVTqt6Jk3P86_CDt4sKVh0G9AbTk1rVW3MAxcFhEUFE-KMXdDK_KsMf6fNQk',\n    idToken: 'eyJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifQ.eyJhenAiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJhdWQiOiI4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20iLCJzdWIiOiIxMDMxNTQ0OTE3MTEyNzUxMjYzNDIiLCJlbWFpbCI6InRlc3RhbmR0aGluazMyMUBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiYXRfaGFzaCI6Ii03dmE2M1VvdWVEMkx6S1czRl82OFEiLCJub25jZSI6Ils0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0iLCJpc3MiOiJodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20iLCJpYXQiOjE1MTI2NDYwODAsImV4cCI6MTUxMjY0OTY4MH0.teI1m90VrAEgKtv3PIG7J6sAhd_QY7mi3QsWLYbakWJqL6f4gmFyddEwqKxGY4x7sMLtj-Uc0ZKuWX_qE7K6iwjhMlzbTHK8LehyILOCY7Xsuoa6MqfT1Wp8Bg0TfJHuOnbZ_ymxPMQKOkfZiPVS5iqsO3bneQzTr0JbqtQ7xWsJS6nz-iA6rEdKjfC70amW0iSI--lWmX7sZaTeZc7ug4r4Z5-zLF39zwQPOwEQAlT-ZA_y1gO_4VueDeZmWmVuz2kJO_91h6qE5nZOtwWVuCrdw-9Iaw7z2DPes_j5RD8lDovR6JM0dj2JqzL9VpTcmF27AJsc1jhQLsLWblcxZw',\n    refreshToken: '1/6cCGEWyzx2uO2bH2F1A8v6KDTG4rP0CXc-XUQ12-U0o',\n    tokenType: 'Bearer',\n    infoToken: {\n      sub: '103154491711275126342',\n      name: 'test think',\n      given_name: 'test',\n      family_name: 'think',\n      picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      email: 'testandthink321@gmail.com',\n      email_verified: true,\n      locale: 'en' },\n    tokenIDJSON: { 'azp': '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      aud: '808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com',\n      sub: '103154491711275126342',\n      email: 'testandthink321@gmail.com',\n      email_verified: 'true',\n      at_hash: '-7va63UoueD2LzKW3F_68Q',\n      nonce: '[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1]',\n      iss: 'https://accounts.nodejs-idp',\n      iat: '1512646080',\n      exp: '1512649680',\n      alg: 'RS256',\n      kid: '477d17972d2a001074d586b588976d234296801e' },\n    expires: '1512649680',\n    email: 'testandthink321@gmail.com' },\n  infoToken: {\n    sub: '103154491711275126342',\n    name: 'test think',\n    given_name: 'test',\n    family_name: 'think',\n    picture: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n    email: 'testandthink321@gmail.com',\n    email_verified: true,\n    locale: 'en' },\n  identity: 'user://nodejs-idp/testandthink321@gmail.com',\n  messageInfo: {\n    userProfile: {\n      username: 'testandthink321@gmail.com',\n      cn: 'testandthink321',\n      avatar: 'https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg',\n      locale: 'en',\n      userURL: 'user://nodejs-idp/testandthink321@gmail.com' },\n    idp: 'nodejs-idp',\n    assertion: 'eyJ0b2tlbklEIjoiZXlKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlEuZXlKaGVuQWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKaGRXUWlPaUk0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBpTENKemRXSWlPaUl4TURNeE5UUTBPVEUzTVRFeU56VXhNall6TkRJaUxDSmxiV0ZwYkNJNkluUmxjM1JoYm1SMGFHbHVhek15TVVCbmJXRnBiQzVqYjIwaUxDSmxiV0ZwYkY5MlpYSnBabWxsWkNJNmRISjFaU3dpWVhSZmFHRnphQ0k2SWkwM2RtRTJNMVZ2ZFdWRU1reDZTMWN6Umw4Mk9GRWlMQ0p1YjI1alpTSTZJbHMwT0N3eE16QXNNU3d6TkN3ME9Dd3hNeXcyTERrc05ESXNNVE0wTERjeUxERXpOQ3d5TkRjc01UTXNNU3d4TERFc05Td3dMRE1zTVRNd0xERXNNVFVzTUN3ME9Dd3hNekFzTVN3eE1Dd3lMREV6TUN3eExERXNNQ3d5TWpnc05ETXNNVEF4TERFeUxERXlNU3czTERFMU55dzNNU3c0TVN3MU9Dd3lNVGtzTXpJc01UQXNNVEE0TERFNU15d3hOemtzTWpFeUxERXhOaXd5TlRVc05Ua3NNakUzTERNeUxERTJNU3d5TURFc05UTXNNVGN4TERJeU5pd3hPVGtzTVRNM0xESXdNaXd4TnpFc05qQXNPRElzTlRNc01USTFMRFl5TERFM055d3hNallzTVRZMUxESTBMREUwTVN3ek1Dd3hOU3d5TWpZc05Ua3NNVEEzTERNMExEY3NNVE1zTVRRNUxERXhNaXd4TWpVc01UQXNNak13TERFNU1Td3hOVFlzTVRZMExERTNOeXd4TUN3eE9EVXNNVE1zTmpZc015d3lNVGNzTVRZMkxESTBOQ3c1TUN3eE1Ua3NNVEV4TERJM0xERTBOU3d4TURRc056RXNNVGc1TERFMk5pd3lNallzTWpVMUxERXpNeXc0TXl3eE5URXNNak14TERFd01Td3hOVEVzT0Rrc01qSXNNVGtzTmpVc01UVTBMREV3TERVekxESXdPQ3d5TVRnc01qVXlMREl4T1N3ek55dzFNQ3d5TVRJc09EWXNNVFExTERFd055d3hNeklzT1RBc01qTXpMREl3TWl3eU1qY3NNVEE0TERFeE5Dd3hOREVzTWprc056TXNNVGczTERNeExERXpMREl6TkN3d0xESXpNaXd5TkN3eE9URXNNelVzTVRRNUxERTNPU3d4TXpnc01qRTBMREUxT1N3eU5EVXNNVFl5TERFME9Dd3lNakVzTVRFNExERTNMREV3TlN3NE9Td3hOVEVzTVRRMkxESXdPU3cxTlN3eU16WXNOakVzTVRRekxESXpNeXd5TWpnc01UQXNNVEUxTERnc09ERXNNVGszTERRMUxERXlNeXd4T0Rjc01qSXpMREUzTml3eU5UUXNNVFkxTERZNUxERTBNeXd5T1N3eE1EQXNNVEUwTERFM0xERXpNQ3d5TWpZc01qSXpMRE16TERFeExESTBNQ3c0TVN3Mk1Td3hOeklzTVRreExERTFOeXd5TkRZc01qQXlMRGczTERFek1Td3lNakVzT0Rnc05EZ3NNVEkzTERFMU9Td3hNVGtzTVRZd0xERTFNaXd4TVRjc05qRXNNalV6TERFM05DdzJOU3d5TVRRc01qQXpMREl4T0N3Mk15dzFNQ3czT0N3eE5qQXNNVGd4TERJeU1Td3lNVEVzTVRJNExEY3dMREUzT0N3eE9URXNNVGN3TERBc01UTXNNVEl5TERFM015d3hNaXd5TURNc01qVXlMRFFzTVRnMExESXlOU3d5TlRJc055dzJNaXc1Tml3eE1UWXNNVFVzTWpFMkxERTFPQ3cxTlN3NE5TdzBPQ3d4Tml3NUxESXdOaXd4TVRrc056UXNNVEV5TERJME15d3hNellzT0RRc01UZzBMREl5TXl3eU5UUXNNVEF4TERreExEWXhMREV3TERreExEZzFMREU1TWl3eE5EY3NNVFEwTERVM0xESTVMRFkyTERJek9Dd3hPVGtzTWpRMExERTVNeXd4T1RRc01UVXdMREl6TWl3eU1EQXNNVEEzTERJc015d3hMREFzTVYwaUxDSnBjM01pT2lKb2RIUndjem92TDJGalkyOTFiblJ6TG1kdmIyZHNaUzVqYjIwaUxDSnBZWFFpT2pFMU1USTJORFl3T0RBc0ltVjRjQ0k2TVRVeE1qWTBPVFk0TUgwLnRlSTFtOTBWckFFZ0t0djNQSUc3SjZzQWhkX1FZN21pM1FzV0xZYmFrV0pxTDZmNGdtRnlkZEV3cUt4R1k0eDdzTUx0ai1VYzBaS3VXWF9xRTdLNml3amhNbHpiVEhLOExlaHlJTE9DWTdYc3VvYTZNcWZUMVdwOEJnMFRmSkh1T25iWl95bXhQTVFLT2tmWmlQVlM1aXFzTzNibmVRelRyMEpicXRRN3hXc0pTNm56LWlBNnJFZEtqZkM3MGFtVzBpU0ktLWxXbVg3c1phVGVaYzd1ZzRyNFo1LXpMRjM5endRUE93RVFBbFQtWkFfeTFnT180VnVlRGVabVdtVnV6MmtKT185MWg2cUU1blpPdHdXVnVDcmR3LTlJYXc3ejJEUGVzX2o1UkQ4bERvdlI2Sk0wZGoySnF6TDlWcFRjbUYyN0FKc2MxamhRTHNMV2JsY3hadyIsInRva2VuSURKU09OIjp7ImF6cCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsImF1ZCI6IjgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSIsInN1YiI6IjEwMzE1NDQ5MTcxMTI3NTEyNjM0MiIsImVtYWlsIjoidGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbSIsImVtYWlsX3ZlcmlmaWVkIjoidHJ1ZSIsImF0X2hhc2giOiItN3ZhNjNVb3VlRDJMektXM0ZfNjhRIiwibm9uY2UiOiJbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tIiwiaWF0IjoiMTUxMjY0NjA4MCIsImV4cCI6IjE1MTI2NDk2ODAiLCJhbGciOiJSUzI1NiIsImtpZCI6IjQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUifX0=',\n    expires: '1512649680' }\n  /*\r\n  keyPair:{\r\n  public:[48,130,1,34,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,3,130,1,15,0,48,130,1,10,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1],\r\n  private:[48,130,4,191,2,1,0,48,13,6,9,42,134,72,134,247,13,1,1,1,5,0,4,130,4,169,48,130,4,165,2,1,0,2,130,1,1,0,228,43,101,12,121,7,157,71,81,58,219,32,10,108,193,179,212,116,255,59,217,32,161,201,53,171,226,199,137,202,171,60,82,53,125,62,177,126,165,24,141,30,15,226,59,107,34,7,13,149,112,125,10,230,191,156,164,177,10,185,13,66,3,217,166,244,90,119,111,27,145,104,71,189,166,226,255,133,83,151,231,101,151,89,22,19,65,154,10,53,208,218,252,219,37,50,212,86,145,107,132,90,233,202,227,108,114,141,29,73,187,31,13,234,0,232,24,191,35,149,179,138,214,159,245,162,148,221,118,17,105,89,151,146,209,55,236,61,143,233,228,10,115,8,81,197,45,123,187,223,176,254,165,69,143,29,100,114,17,130,226,223,33,11,240,81,61,172,191,157,246,202,87,131,221,88,48,127,159,119,160,152,117,61,253,174,65,214,203,218,63,50,78,160,181,221,211,128,70,178,191,170,0,13,122,173,12,203,252,4,184,225,252,7,62,96,116,15,216,158,55,85,48,16,9,206,119,74,112,243,136,84,184,223,254,101,91,61,10,91,85,192,147,144,57,29,66,238,199,244,193,194,150,232,200,107,2,3,1,0,1,2,130,1,0,103,244,137,118,116,82,14,203,102,107,253,88,12,199,222,60,243,136,86,157,74,224,190,53,113,57,157,250,49,130,96,31,252,136,152,70,143,17,215,96,103,51,18,35,141,212,210,205,9,216,83,70,245,71,138,119,112,229,164,176,9,37,81,161,193,154,68,249,115,106,201,6,12,225,144,126,141,210,141,242,128,159,221,163,222,21,233,230,167,206,59,24,250,233,81,122,102,26,6,233,72,133,47,77,155,238,86,6,139,24,131,163,179,112,48,247,142,6,207,204,173,223,140,199,150,95,123,152,202,155,131,238,62,96,133,4,217,51,121,30,38,178,189,216,44,35,241,93,7,62,90,111,216,66,209,243,128,234,141,84,135,181,13,38,220,114,245,240,178,95,220,206,11,186,234,213,66,121,83,68,89,75,46,183,145,183,147,160,215,118,198,125,181,146,30,251,58,87,47,209,237,97,24,47,179,6,110,242,99,150,226,148,198,174,146,101,213,87,178,10,223,105,18,56,53,22,212,158,170,176,51,86,145,125,124,44,9,85,19,144,246,170,78,124,30,32,12,166,174,139,77,63,173,82,10,153,2,129,129,0,248,18,143,246,137,136,145,219,178,39,27,94,64,90,47,163,114,60,63,187,131,143,244,16,42,128,231,117,92,98,219,155,62,107,252,17,245,45,160,225,103,142,72,36,193,150,235,214,175,62,212,56,45,9,0,60,114,107,134,228,204,131,131,214,94,201,148,159,99,139,181,13,119,38,30,107,166,165,203,43,34,20,207,171,32,58,167,62,196,153,103,204,213,247,48,111,227,59,95,97,194,187,53,10,247,108,58,86,28,29,113,8,110,171,220,245,11,82,233,223,91,68,166,117,174,187,62,77,2,129,129,0,235,118,2,105,239,212,30,104,157,41,109,11,248,152,22,236,97,40,153,131,228,5,86,187,113,126,144,76,141,79,110,250,146,152,49,58,156,201,176,92,189,209,30,112,108,175,204,204,247,164,46,129,239,98,127,49,145,218,63,193,124,174,18,98,201,99,154,162,138,78,159,253,3,248,3,209,36,239,193,155,193,5,19,236,37,78,118,135,250,199,7,141,248,120,36,136,93,98,174,60,18,215,93,174,107,141,116,145,167,221,210,169,247,67,254,222,161,134,63,221,90,87,42,99,227,81,173,151,2,129,129,0,133,23,168,103,83,232,146,160,181,23,40,38,204,13,214,203,49,41,195,227,189,181,8,243,119,106,75,67,250,250,10,234,98,118,26,250,35,121,132,124,10,76,26,198,165,154,108,19,117,88,23,17,192,143,184,177,181,141,157,4,185,248,193,77,204,243,7,170,240,4,111,113,183,0,27,136,20,19,149,74,33,241,218,108,236,80,171,148,16,116,97,109,83,74,88,145,94,239,102,192,19,114,207,5,128,51,111,164,237,86,154,99,52,197,62,57,182,6,152,245,61,137,58,105,159,2,84,109,2,129,129,0,226,67,111,132,95,91,101,177,63,189,44,53,193,184,92,230,223,98,133,74,209,86,52,7,65,195,206,100,81,178,144,65,167,151,42,79,89,149,18,173,188,21,244,251,49,230,41,150,153,46,35,38,231,99,174,56,115,32,215,253,85,147,108,197,147,34,236,216,222,177,57,90,136,114,207,48,46,31,90,220,18,58,143,239,111,214,27,95,6,36,53,229,62,108,45,39,1,30,47,178,56,164,206,56,42,208,46,193,61,31,147,45,147,23,187,22,50,255,111,229,132,199,152,75,142,136,209,151,2,129,129,0,165,56,232,76,55,57,240,159,92,207,220,143,130,30,57,234,251,172,171,180,54,159,229,96,246,73,112,146,75,157,242,201,161,218,37,176,35,170,50,90,148,102,191,199,239,174,78,72,67,85,199,45,149,145,132,161,212,33,157,75,216,79,39,233,18,210,255,26,72,229,239,44,12,147,158,176,192,95,126,32,175,23,226,131,139,197,175,193,62,8,151,252,68,154,94,89,189,125,90,30,36,175,73,230,194,13,233,247,123,60,241,47,171,51,189,112,111,213,141,89,70,249,236,63,236,110,115,208]\r\n  }*/\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvbm9kZWpzLWlkcC9GYWtlTm9kZWpzUHJveHlTdHViLmlkcC5qcz9hZmE1Il0sIm5hbWVzIjpbImFjdGl2YXRlIiwiaWRlbnRpdGllcyIsIm5JZGVudGl0eSIsImJ0b2EiLCJyZXF1aXJlIiwiYXRvYiIsImdvb2dsZUluZm8iLCJjbGllbnRTZWNyZXQiLCJjbGllbnRJRCIsInJlZGlyZWN0VVJJIiwiaXNzdWVyIiwidG9rZW5FbmRwb2ludCIsImp3a3NVcmkiLCJhdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJ1c2VyaW5mbyIsInRva2VuSW5mbyIsImFjY2Vzc1R5cGUiLCJ0eXBlIiwic2NvcGUiLCJzdGF0ZSIsImlkcCIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiYXNzZXJ0aW9uIiwib3JpZ2luIiwiY29uc29sZSIsImxvZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZGVjb2RlZENvbnRlbnQiLCJjb250ZW50IiwiSlNPTiIsInBhcnNlIiwiaWRUb2tlblNwbGl0ZWQiLCJ0b2tlbklEIiwic3BsaXQiLCJpZFRva2VuIiwiaWRlbnRpdHkiLCJlbWFpbCIsImNvbnRlbnRzIiwibm9uY2UiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImhpbnQiLCJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZSIsIk5vZGVqc1Byb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJfdGhpcyIsIm1lc3NhZ2VCdXMiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJwYXJhbXMiLCJib2R5IiwibWV0aG9kIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInZhbHVlIiwicmVwbHlNZXNzYWdlIiwiZXJyb3IiLCJtZXNzYWdlIiwiaWQiLCJmcm9tIiwiY29kZSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyIsInVybCIsIm5hbWUiLCJpbnN0YW5jZSIsImRvbWFpbiIsInByb3RvY29sIiwiaW5mbyIsImFjY2Vzc1Rva2VuIiwicmVmcmVzaFRva2VuIiwidG9rZW5UeXBlIiwiaW5mb1Rva2VuIiwic3ViIiwiZ2l2ZW5fbmFtZSIsImZhbWlseV9uYW1lIiwicGljdHVyZSIsImVtYWlsX3ZlcmlmaWVkIiwibG9jYWxlIiwidG9rZW5JREpTT04iLCJhdWQiLCJhdF9oYXNoIiwiaXNzIiwiaWF0IiwiZXhwIiwiYWxnIiwia2lkIiwiZXhwaXJlcyIsIm1lc3NhZ2VJbmZvIiwidXNlclByb2ZpbGUiLCJ1c2VybmFtZSIsImNuIiwiYXZhdGFyIiwidXNlclVSTCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7a0JBdUx3QkEsUTs7OztBQXZMeEIsSUFBSUMsYUFBYSxFQUFqQjtBQUNBLElBQUlDLFlBQVksQ0FBaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJQyxPQUFPLG1CQUFBQyxDQUFRLENBQVIsQ0FBWDtBQUNBLElBQUlDLE9BQU8sbUJBQUFELENBQVEsQ0FBUixDQUFYOztBQUVBLElBQUlFLGFBQWE7QUFDZkMsZ0JBQXVCLDBCQURSO0FBRWZDLFlBQXVCLDBFQUZSO0FBR2ZDLGVBQXVCLG1CQUhSO0FBSWZDLFVBQXVCLDZCQUpSO0FBS2ZDLGlCQUF1Qiw2Q0FMUjtBQU1mQyxXQUF1Qiw2Q0FOUjtBQU9mQyx5QkFBdUIsK0NBUFI7QUFRZkMsWUFBdUIsNkRBUlI7QUFTZkMsYUFBdUIsMERBVFI7QUFVZkMsY0FBdUIsU0FWUjtBQVdmQyxRQUF1QixNQVhSO0FBWWZDLFNBQXVCLDBCQVpSO0FBYWZDLFNBQXVCO0FBYlIsQ0FBakI7O0FBa0JBLElBQUlDLE1BQU07O0FBRVI7Ozs7Ozs7O0FBUUFDLHFCQUFtQiwyQkFBQ0MsU0FBRCxFQUFZQyxNQUFaLEVBQXVCO0FBQ3hDQyxZQUFRQyxHQUFSLENBQVksNENBQVosRUFBMERILFNBQTFEOztBQUVBO0FBQ0EsV0FBTyxJQUFJSSxPQUFKLENBQVksVUFBU0MsT0FBVCxFQUFpQkMs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bklkZW50aXR5ID0gMDtcclxuLy9pbXBvcnQgZmV0Y2ggZnJvbSAnbm9kZS1mZXRjaCc7XHJcbi8vbGV0IGZldGNoID0gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIik7XHJcbi8vY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xyXG5sZXQgYnRvYSA9IHJlcXVpcmUoJ2J0b2EnKTtcclxubGV0IGF0b2IgPSByZXF1aXJlKCdhdG9iJyk7XHJcblxyXG5sZXQgZ29vZ2xlSW5mbyA9IHtcclxuICBjbGllbnRTZWNyZXQ6ICAgICAgICAgICdYeDRyS3VjYjVaWVRhWGxjWlg5SExmWlcnLFxyXG4gIGNsaWVudElEOiAgICAgICAgICAgICAgJzgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbScsXHJcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICAnaHR0cHM6Ly9sb2NhbGhvc3QnLFxyXG4gIGlzc3VlcjogICAgICAgICAgICAgICAgJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsXHJcbiAgdG9rZW5FbmRwb2ludDogICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3Y0L3Rva2VuPycsXHJcbiAgandrc1VyaTogICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL2NlcnRzPycsXHJcbiAgYXV0aG9yaXNhdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL3YyL2F1dGg/JyxcclxuICB1c2VyaW5mbzogICAgICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdXNlcmluZm8/YWNjZXNzX3Rva2VuPScsXHJcbiAgdG9rZW5JbmZvOiAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0nLFxyXG4gIGFjY2Vzc1R5cGU6ICAgICAgICAgICAgJ29mZmxpbmUnLFxyXG4gIHR5cGU6ICAgICAgICAgICAgICAgICAgJ2NvZGUnLFxyXG4gIHNjb3BlOiAgICAgICAgICAgICAgICAgJ29wZW5pZCUyMGVtYWlsJTIwcHJvZmlsZScsXHJcbiAgc3RhdGU6ICAgICAgICAgICAgICAgICAnc3RhdGUnXHJcbn07XHJcblxyXG5cclxuXHJcbmxldCBpZHAgPSB7XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gdmFsaWRhdGUgYW4gaWRlbnRpdHkgQXNzZXJ0aW9uIHJlY2VpdmVkXHJcbiAgKiBUT0RPIGFkZCBkZXRhaWxzIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgYW5kIGltcHJvdmUgdGhlIGltcGxlbWVudGF0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtICB7YXNzZXJ0aW9ufSAgICBJZGVudGl0eSBBc3NlcnRpb24gdG8gYmUgdmFsaWRhdGVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59ICAgICAgIE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdFxyXG4gICovXHJcbiAgdmFsaWRhdGVBc3NlcnRpb246IChhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ3ZhbGlkYXRlQXNzZXJ0aW9uUHJveHlOT0RFSlNGQUtFOmFzc2VydGlvbicsIGFzc2VydGlvbik7XHJcblxyXG4gICAgLy9UT0RPIGNoZWNrIHRoZSB2YWx1ZXMgd2l0aCB0aGUgaGFzaCByZWNlaXZlZFxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XHJcbiAgICAgIGxldCBkZWNvZGVkQ29udGVudCA9IGF0b2IoYXNzZXJ0aW9uKTtcclxuICAgICAgbGV0IGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcclxuICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gY29udGVudC50b2tlbklELnNwbGl0KCcuJyk7XHJcbiAgICAgIGxldCBpZFRva2VuID0gSlNPTi5wYXJzZShhdG9iKGlkVG9rZW5TcGxpdGVkWzFdKSk7XHJcblxyXG4gICAgICByZXNvbHZlKHtpZGVudGl0eTogaWRUb2tlbi5lbWFpbCwgY29udGVudHM6IGlkVG9rZW4ubm9uY2V9KTtcclxuXHJcbiAgICB9KTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxyXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIGltcGxlbWVudGF0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtICB7Y29udGVudHN9IFRoZSBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcclxuICAqIEBwYXJhbSAge29yaWdpbn0gT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cclxuICAqIEBwYXJhbSAge3VzZXJuYW1lSGludH0gb3B0aW9uYWwgdXNlcm5hbWVIaW50IHBhcmFtZXRlclxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cclxuICAqL1xyXG4gIGdlbmVyYXRlQXNzZXJ0aW9uOiAoY29udGVudHMsIG9yaWdpbiwgaGludCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRTpjb250ZW50c10nLCBjb250ZW50cyk7XHJcbiAgICBjb25zb2xlLmxvZygnW0lEUFJPWFkuZ2VuZXJhdGVBc3NlcnRpb25GQUtFOm9yaWdpbl0nLCBvcmlnaW4pO1xyXG4gICAgY29uc29sZS5sb2coJ1tJRFBST1hZLmdlbmVyYXRlQXNzZXJ0aW9uRkFLRTpoaW50XScsIGhpbnQpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2U6Jyk7XHJcbiAgICAgIHJldHVybiByZXNvbHZlKGdlbmVyYXRlTWVzc2FnZVJlc3BvbnNlKTtcclxuXHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViXHJcbiovXHJcbmNsYXNzIE5vZGVqc1Byb3h5U3R1YiB7XHJcblxyXG4gIC8qKlxyXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcclxuICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIHJlY2VpdmVkIGlkcFByb3h5XHJcbiAgKlxyXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXHJcbiAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxyXG4gICovXHJcbiBjb25zdHJ1Y3RvcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xyXG4gICBjb25zb2xlLmxvZygnRkFLRSBOT0RFSlMgY29uc3RydWN0b3InKTtcclxuICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7XHJcbiAgIF90aGlzLm1lc3NhZ2VCdXMgPSBidXM7XHJcbiAgIF90aGlzLmNvbmZpZyA9IGNvbmZpZztcclxuXHJcbiAgIF90aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcclxuXHJcbiAgICAgLy9UT0RPIGFkZCB0aGUgcmVzcGVjdGl2ZSBsaXN0ZW5lclxyXG4gICAgIGlmIChtc2cudG8gPT09ICdkb21haW4taWRwOi8vbm9kZWpzLWlkcCcpIHtcclxuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcclxuICAgICB9XHJcbiAgIH0pO1xyXG5cclxuICAgX3RoaXMuX3NlbmRTdGF0dXMoJ2NyZWF0ZWQnKTtcclxuIH1cclxuXHJcbiAvKipcclxuICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXHJcbiAqL1xyXG4gcmVxdWVzdFRvSWRwKG1zZykge1xyXG4gICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICBsZXQgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xyXG5cclxuICAgc3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcclxuICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XHJcbiAgICAgICBpZHAuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKFxyXG4gICAgICAgICBmdW5jdGlvbih2YWx1ZSkgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7fSxcclxuXHJcbiAgICAgICAgIGZ1bmN0aW9uKGVycm9yKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTt9XHJcbiAgICAgICApO1xyXG4gICAgICAgYnJlYWs7XHJcbiAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxyXG4gICAgICAgaWRwLnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXHJcbiAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7IF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTt9LFxyXG5cclxuICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO31cclxuICAgICAgICk7XHJcbiAgICAgICBicmVhaztcclxuICAgICBkZWZhdWx0OlxyXG4gICAgICAgYnJlYWs7XHJcbiAgIH1cclxuIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqXHJcbiAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxyXG4gICovXHJcbiAgcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IG1lc3NhZ2UgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sXHJcbiAgICAgICAgICAgICAgICAgICBib2R5OiB7Y29kZTogMjAwLCB2YWx1ZTogdmFsdWV9fTtcclxuXHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBjb25zb2xlLmxvZygnW05vZGVKUy5zZW5kU3RhdHVzXSAnLCB2YWx1ZSk7XHJcblxyXG4gICAgX3RoaXMuX3N0YXRlID0gdmFsdWU7XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3VwZGF0ZScsXHJcbiAgICAgIGZyb206IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsXHJcbiAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxyXG4gICAgICBib2R5OiB7XHJcbiAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHJlYXNvbikge1xyXG4gICAgICBtc2cuYm9keS5kZXNjID0gcmVhc29uO1xyXG4gICAgfVxyXG5cclxuICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cclxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXHJcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcclxuICByZXR1cm4ge1xyXG4gICAgbmFtZTogJ05vZGVqc1Byb3h5U3R1YicsXHJcbiAgICBpbnN0YW5jZTogbmV3IE5vZGVqc1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxyXG4gIH07XHJcbn1cclxuXHJcblxyXG5sZXQgZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2UgPVxyXG57YXNzZXJ0aW9uOlxyXG4nZXlKMGIydGxia2xFSWpvaVpYbEthR0pIWTJsUGFVcFRWWHBKTVU1cFNYTkpiWFJ3V2tOSk5rbHFVVE5PTWxGNFRucHJNMDF0VVhsWlZFRjNUVlJCTTA1SFVURlBSRnBwVGxSbk5FOVVZekphUkVsNlRrUkpOVTVxWjNkTlYxVnBabEV1WlhsS2FHVnVRV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2FHUlhVV2xQYVVrMFRVUm5lazFxYXpGT2FsbDNUVlJKZEdSSVJubFBTRVoyWVVSRmVFMVVhekJOYldSclRXMTBiazFFUVROa1JFSjZUMGRaZVU1NlpIbGlNbXQxV1ZoQ2QyTjVOVzVpTWpsdVlrZFdNV015Vm5sWk1qbDFaRWRXZFdSRE5XcGlNakJwVEVOS2VtUlhTV2xQYVVsNFRVUk5lRTVVVVRCUFZFVXpUVlJGZVU1NlZYaE5hbGw2VGtSSmFVeERTbXhpVjBad1lrTkpOa2x1VW14ak0xSm9ZbTFTTUdGSGJIVmhlazE1VFZWQ2JtSlhSbkJpUXpWcVlqSXdhVXhEU214aVYwWndZa1k1TWxwWVNuQmFiV3hzV2tOSk5tUklTakZhVTNkcFdWaFNabUZIUm5waFEwazJTV2t3TTJSdFJUSk5NVloyWkZkV1JVMXJlRFpUTVdONlVtdzRNazlHUldsTVEwcDFZakkxYWxwVFNUWkpiSE13VDBOM2VFMTZRWE5OVTNkNlRrTjNNRTlEZDNoTmVYY3lURVJyYzA1RVNYTk5WRTB3VEVSamVVeEVSWHBPUTNkNVRrUmpjMDFVVFhOTlUzZDRURVJGYzA1VGQzZE1SRTF6VFZSTmQweEVSWE5OVkZWelRVTjNNRTlEZDNoTmVrRnpUVk4zZUUxRGQzbE1SRVY2VFVOM2VFeEVSWE5OUTNkNVRXcG5jMDVFVFhOTlZFRjRURVJGZVV4RVJYbE5VM2N6VEVSRk1VNTVkek5OVTNjMFRWTjNNVTlEZDNsTlZHdHpUWHBKYzAxVVFYTk5WRUUwVEVSRk5VMTVkM2hPZW10elRXcEZlVXhFUlhoT2FYZDVUbFJWYzA1VWEzTk5ha1V6VEVSTmVVeEVSVEpOVTNkNVRVUkZjMDVVVFhOTlZHTjRURVJKZVU1cGQzaFBWR3R6VFZSTk0weEVTWGROYVhkNFRucEZjMDVxUVhOUFJFbHpUbFJOYzAxVVNURk1SRmw1VEVSRk0wNTVkM2hOYWxselRWUlpNVXhFU1RCTVJFVXdUVk4zZWsxRGQzaE9VM2Q1VFdwWmMwNVVhM05OVkVFelRFUk5NRXhFWTNOTlZFMXpUVlJSTlV4RVJYaE5hWGQ0VFdwVmMwMVVRWE5OYWsxM1RFUkZOVTFUZDNoT1ZGbHpUVlJaTUV4RVJUTk9lWGQ0VFVOM2VFOUVWWE5OVkUxelRtcFpjMDE1ZDNsTlZHTnpUVlJaTWt4RVNUQk9RM2MxVFVOM2VFMVVhM05OVkVWNFRFUkpNMHhFUlRCT1UzZDRUVVJSYzA1NlJYTk5WR2MxVEVSRk1rNXBkM2xOYWxselRXcFZNVXhFUlhwTmVYYzBUWGwzZUU1VVJYTk5hazE0VEVSRmQwMVRkM2hPVkVWelQwUnJjMDFxU1hOTlZHdHpUbXBWYzAxVVZUQk1SRVYzVEVSVmVreEVTWGRQUTNkNVRWUm5jMDFxVlhsTVJFbDRUMU4zZWs1NWR6Rk5RM2Q1VFZSSmMwOUVXWE5OVkZFeFRFUkZkMDU1ZDNoTmVrbHpUMVJCYzAxcVRYcE1SRWwzVFdsM2VVMXFZM05OVkVFMFRFUkZlRTVEZDNoT1JFVnpUV3ByYzA1NlRYTk5WR2N6VEVSTmVFeEVSWHBNUkVsNlRrTjNkMHhFU1hwTmFYZDVUa04zZUU5VVJYTk5lbFZ6VFZSUk5VeEVSVE5QVTNkNFRYcG5jMDFxUlRCTVJFVXhUMU4zZVU1RVZYTk5WRmw1VEVSRk1FOURkM2xOYWtWelRWUkZORXhFUlROTVJFVjNUbE4zTkU5VGQzaE9WRVZ6VFZSUk1reEVTWGRQVTNjeFRsTjNlVTE2V1hOT2FrVnpUVlJSZWt4RVNYcE5lWGQ1VFdwbmMwMVVRWE5OVkVVeFRFUm5jMDlFUlhOTlZHc3pURVJSTVV4RVJYbE5lWGQ0VDBSamMwMXFTWHBNUkVVelRtbDNlVTVVVVhOTlZGa3hURVJaTlV4RVJUQk5lWGQ1VDFOM2VFMUVRWE5OVkVVd1RFUkZNMHhFUlhwTlEzZDVUV3BaYzAxcVNYcE1SRTE2VEVSRmVFeEVTVEJOUTNjMFRWTjNNazFUZDNoT2VrbHpUVlJyZUV4RVJURk9lWGQ1VGtSWmMwMXFRWGxNUkdjelRFUkZlazFUZDNsTmFrVnpUMFJuYzA1RVozTk5WRWt6VEVSRk1VOVRkM2hOVkd0elRWUlpkMHhFUlRGTmFYZDRUVlJqYzA1cVJYTk5hbFY2VEVSRk0wNURkekpPVTNkNVRWUlJjMDFxUVhwTVJFbDRUME4zTWsxNWR6Rk5RM2N6VDBOM2VFNXFRWE5OVkdkNFRFUkplVTFUZDNsTlZFVnpUVlJKTkV4RVkzZE1SRVV6VDBOM2VFOVVSWE5OVkdOM1RFUkJjMDFVVFhOTlZFbDVURVJGTTAxNWQzaE5hWGQ1VFVSTmMwMXFWWGxNUkZGelRWUm5NRXhFU1hsT1UzZDVUbFJKYzA1NWR6Sk5hWGMxVG1sM2VFMVVXWE5OVkZWelRXcEZNa3hFUlRGUFEzY3hUbE4zTkU1VGR6QlBRM2Q0VG1sM05VeEVTWGRPYVhkNFRWUnJjMDU2VVhOTlZFVjVURVJKTUUxNWQzaE5lbGx6VDBSUmMwMVVaekJNUkVsNVRYbDNlVTVVVVhOTlZFRjRURVJyZUV4RVdYaE1SRVYzVEVScmVFeEVaekZNUkVVMVRXbDNlRTVFWTNOTlZGRXdURVJWTTB4RVNUVk1SRmt5VEVSSmVrOURkM2hQVkd0elRXcFJNRXhFUlRWTmVYZDRUMVJSYzAxVVZYZE1SRWw2VFdsM2VVMUVRWE5OVkVFelRFUkpjMDE1ZDNoTVJFRnpUVll3YVV4RFNuQmpNMDFwVDJsS2IyUklVbmRqZW05MlRESkdhbGt5T1RGaWJsSjZURzFrZG1JeVpITmFVelZxWWpJd2FVeERTbkJaV0ZGcFQycEZNVTFVU1RKT1JGbDNUMFJCYzBsdFZqUmpRMGsyVFZSVmVFMXFXVEJQVkZrMFRVZ3dMblJsU1RGdE9UQldja0ZGWjB0MGRqTlFTVWMzU2paelFXaGtYMUZaTjIxcE0xRnpWMHhaWW1GclYwcHhURFptTkdkdFJubGtaRVYzY1V0NFIxazBlRGR6VFV4MGFpMVZZekJhUzNWWFdGOXhSVGRMTm1sM2FtaE5iSHBpVkVoTE9FeGxhSGxKVEU5RFdUZFljM1Z2WVRaTmNXWlVNVmR3T0VKbk1GUm1Ta2gxVDI1aVdsOTViWGhRVFZGTFQydG1XbWxRVmxNMWFYRnpUek5pYm1WUmVsUnlNRXBpY1hSUk4zaFhjMHBUTm01NkxXbEJObkpGWkV0cVprTTNNR0Z0VnpCcFUwa3RMV3hYYlZnM2MxcGhWR1ZhWXpkMVp6UnlORm8xTFhwTVJqTTVlbmRSVUU5M1JWRkJiRlF0V2tGZmVURm5UMTgwVm5WbFJHVmFiVmR0Vm5WNk1tdEtUMTg1TVdnMmNVVTFibHBQZEhkWFZuVkRjbVIzTFRsSllYYzNlakpFVUdWelgybzFVa1E0YkVSdmRsSTJTazB3WkdveVNuRjZURGxXY0ZSamJVWXlOMEZLYzJNeGFtaFJUSE5NVjJKc1kzaGFkeUlzSW5SdmEyVnVTVVJLVTA5T0lqcDdJbUY2Y0NJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbUYxWkNJNklqZ3dPRE15T1RVMk5qQXhNaTEwY1hJNGNXOW9NVEV4T1RReVoyUXlhMmN3TURkME1ITTRaakkzTjNKdmFTNWhjSEJ6TG1kdmIyZHNaWFZ6WlhKamIyNTBaVzUwTG1OdmJTSXNJbk4xWWlJNklqRXdNekUxTkRRNU1UY3hNVEkzTlRFeU5qTTBNaUlzSW1WdFlXbHNJam9pZEdWemRHRnVaSFJvYVc1ck16SXhRR2R0WVdsc0xtTnZiU0lzSW1WdFlXbHNYM1psY21sbWFXVmtJam9pZEhKMVpTSXNJbUYwWDJoaGMyZ2lPaUl0TjNaaE5qTlZiM1ZsUkRKTWVrdFhNMFpmTmpoUklpd2libTl1WTJVaU9pSmJORGdzTVRNd0xERXNNelFzTkRnc01UTXNOaXc1TERReUxERXpOQ3czTWl3eE16UXNNalEzTERFekxERXNNU3d4TERVc01Dd3pMREV6TUN3eExERTFMREFzTkRnc01UTXdMREVzTVRBc01pd3hNekFzTVN3eExEQXNNakk0TERRekxERXdNU3d4TWl3eE1qRXNOeXd4TlRjc056RXNPREVzTlRnc01qRTVMRE15TERFd0xERXdPQ3d4T1RNc01UYzVMREl4TWl3eE1UWXNNalUxTERVNUxESXhOeXd6TWl3eE5qRXNNakF4TERVekxERTNNU3d5TWpZc01UazVMREV6Tnl3eU1ESXNNVGN4TERZd0xEZ3lMRFV6TERFeU5TdzJNaXd4Tnpjc01USTJMREUyTlN3eU5Dd3hOREVzTXpBc01UVXNNakkyTERVNUxERXdOeXd6TkN3M0xERXpMREUwT1N3eE1USXNNVEkxTERFd0xESXpNQ3d4T1RFc01UVTJMREUyTkN3eE56Y3NNVEFzTVRnMUxERXpMRFkyTERNc01qRTNMREUyTml3eU5EUXNPVEFzTVRFNUxERXhNU3d5Tnl3eE5EVXNNVEEwTERjeExERTRPU3d4TmpZc01qSTJMREkxTlN3eE16TXNPRE1zTVRVeExESXpNU3d4TURFc01UVXhMRGc1TERJeUxERTVMRFkxTERFMU5Dd3hNQ3cxTXl3eU1EZ3NNakU0TERJMU1pd3lNVGtzTXpjc05UQXNNakV5TERnMkxERTBOU3d4TURjc01UTXlMRGt3TERJek15d3lNRElzTWpJM0xERXdPQ3d4TVRRc01UUXhMREk1TERjekxERTROeXd6TVN3eE15d3lNelFzTUN3eU16SXNNalFzTVRreExETTFMREUwT1N3eE56a3NNVE00TERJeE5Dd3hOVGtzTWpRMUxERTJNaXd4TkRnc01qSXhMREV4T0N3eE55d3hNRFVzT0Rrc01UVXhMREUwTml3eU1Ea3NOVFVzTWpNMkxEWXhMREUwTXl3eU16TXNNakk0TERFd0xERXhOU3c0TERneExERTVOeXcwTlN3eE1qTXNNVGczTERJeU15d3hOellzTWpVMExERTJOU3cyT1N3eE5ETXNNamtzTVRBd0xERXhOQ3d4Tnl3eE16QXNNakkyTERJeU15d3pNeXd4TVN3eU5EQXNPREVzTmpFc01UY3lMREU1TVN3eE5UY3NNalEyTERJd01pdzROeXd4TXpFc01qSXhMRGc0TERRNExERXlOeXd4TlRrc01URTVMREUyTUN3eE5USXNNVEUzTERZeExESTFNeXd4TnpRc05qVXNNakUwTERJd015d3lNVGdzTmpNc05UQXNOemdzTVRZd0xERTRNU3d5TWpFc01qRXhMREV5T0N3M01Dd3hOemdzTVRreExERTNNQ3d3TERFekxERXlNaXd4TnpNc01USXNNakF6TERJMU1pdzBMREU0TkN3eU1qVXNNalV5TERjc05qSXNPVFlzTVRFMkxERTFMREl4Tml3eE5UZ3NOVFVzT0RVc05EZ3NNVFlzT1N3eU1EWXNNVEU1TERjMExERXhNaXd5TkRNc01UTTJMRGcwTERFNE5Dd3lNak1zTWpVMExERXdNU3c1TVN3Mk1Td3hNQ3c1TVN3NE5Td3hPVElzTVRRM0xERTBOQ3cxTnl3eU9TdzJOaXd5TXpnc01UazVMREkwTkN3eE9UTXNNVGswTERFMU1Dd3lNeklzTWpBd0xERXdOeXd5TERNc01Td3dMREZkSWl3aWFYTnpJam9pYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0SWl3aWFXRjBJam9pTVRVeE1qWTBOakE0TUNJc0ltVjRjQ0k2SWpFMU1USTJORGsyT0RBaUxDSmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalEzTjJReE56azNNbVF5WVRBd01UQTNOR1ExT0RaaU5UZzRPVGMyWkRJek5ESTVOamd3TVdVaWZYMD0nLFxyXG5pZHA6e1xyXG5kb21haW46J25vZGVqcy1pZHAnLFxyXG5wcm90b2NvbDonT0lEQyd9LFxyXG5pbmZvOntcclxuYWNjZXNzVG9rZW46J3lhMjkuR2xzYkJhbEdKSm1WaV9ONUlEeXFNSTNKeGtPNWVMVjQzMzNJOTNlUUJDcE5Bb2ZFcXRVNFVrV0hoOGRyVmxyVmlWVHF0NkprM1A4Nl9DRHQ0c0tWaDBHOUFiVGsxclZXM01BeGNGaEVVRkUtS01YZERLX0tzTWY2Zk5RaycsXHJcbmlkVG9rZW46J2V5SmhiR2NpT2lKU1V6STFOaUlzSW10cFpDSTZJalEzTjJReE56azNNbVF5WVRBd01UQTNOR1ExT0RaaU5UZzRPVGMyWkRJek5ESTVOamd3TVdVaWZRLmV5SmhlbkFpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSmhkV1FpT2lJNE1EZ3pNamsxTmpZd01USXRkSEZ5T0hGdmFERXhNVGswTW1ka01tdG5NREEzZERCek9HWXlOemR5YjJrdVlYQndjeTVuYjI5bmJHVjFjMlZ5WTI5dWRHVnVkQzVqYjIwaUxDSnpkV0lpT2lJeE1ETXhOVFEwT1RFM01URXlOelV4TWpZek5ESWlMQ0psYldGcGJDSTZJblJsYzNSaGJtUjBhR2x1YXpNeU1VQm5iV0ZwYkM1amIyMGlMQ0psYldGcGJGOTJaWEpwWm1sbFpDSTZkSEoxWlN3aVlYUmZhR0Z6YUNJNklpMDNkbUUyTTFWdmRXVkVNa3g2UzFjelJsODJPRkVpTENKdWIyNWpaU0k2SWxzME9Dd3hNekFzTVN3ek5DdzBPQ3d4TXl3MkxEa3NORElzTVRNMExEY3lMREV6TkN3eU5EY3NNVE1zTVN3eExERXNOU3d3TERNc01UTXdMREVzTVRVc01DdzBPQ3d4TXpBc01Td3hNQ3d5TERFek1Dd3hMREVzTUN3eU1qZ3NORE1zTVRBeExERXlMREV5TVN3M0xERTFOeXczTVN3NE1TdzFPQ3d5TVRrc016SXNNVEFzTVRBNExERTVNeXd4Tnprc01qRXlMREV4Tml3eU5UVXNOVGtzTWpFM0xETXlMREUyTVN3eU1ERXNOVE1zTVRjeExESXlOaXd4T1Rrc01UTTNMREl3TWl3eE56RXNOakFzT0RJc05UTXNNVEkxTERZeUxERTNOeXd4TWpZc01UWTFMREkwTERFME1Td3pNQ3d4TlN3eU1qWXNOVGtzTVRBM0xETTBMRGNzTVRNc01UUTVMREV4TWl3eE1qVXNNVEFzTWpNd0xERTVNU3d4TlRZc01UWTBMREUzTnl3eE1Dd3hPRFVzTVRNc05qWXNNeXd5TVRjc01UWTJMREkwTkN3NU1Dd3hNVGtzTVRFeExESTNMREUwTlN3eE1EUXNOekVzTVRnNUxERTJOaXd5TWpZc01qVTFMREV6TXl3NE15d3hOVEVzTWpNeExERXdNU3d4TlRFc09Ea3NNaklzTVRrc05qVXNNVFUwTERFd0xEVXpMREl3T0N3eU1UZ3NNalV5TERJeE9Td3pOeXcxTUN3eU1USXNPRFlzTVRRMUxERXdOeXd4TXpJc09UQXNNak16TERJd01pd3lNamNzTVRBNExERXhOQ3d4TkRFc01qa3NOek1zTVRnM0xETXhMREV6TERJek5Dd3dMREl6TWl3eU5Dd3hPVEVzTXpVc01UUTVMREUzT1N3eE16Z3NNakUwTERFMU9Td3lORFVzTVRZeUxERTBPQ3d5TWpFc01URTRMREUzTERFd05TdzRPU3d4TlRFc01UUTJMREl3T1N3MU5Td3lNellzTmpFc01UUXpMREl6TXl3eU1qZ3NNVEFzTVRFMUxEZ3NPREVzTVRrM0xEUTFMREV5TXl3eE9EY3NNakl6TERFM05pd3lOVFFzTVRZMUxEWTVMREUwTXl3eU9Td3hNREFzTVRFMExERTNMREV6TUN3eU1qWXNNakl6TERNekxERXhMREkwTUN3NE1TdzJNU3d4TnpJc01Ua3hMREUxTnl3eU5EWXNNakF5TERnM0xERXpNU3d5TWpFc09EZ3NORGdzTVRJM0xERTFPU3d4TVRrc01UWXdMREUxTWl3eE1UY3NOakVzTWpVekxERTNOQ3cyTlN3eU1UUXNNakF6TERJeE9DdzJNeXcxTUN3M09Dd3hOakFzTVRneExESXlNU3d5TVRFc01USTRMRGN3TERFM09Dd3hPVEVzTVRjd0xEQXNNVE1zTVRJeUxERTNNeXd4TWl3eU1ETXNNalV5TERRc01UZzBMREl5TlN3eU5USXNOeXcyTWl3NU5pd3hNVFlzTVRVc01qRTJMREUxT0N3MU5TdzROU3cwT0N3eE5pdzVMREl3Tml3eE1Ua3NOelFzTVRFeUxESTBNeXd4TXpZc09EUXNNVGcwTERJeU15d3lOVFFzTVRBeExEa3hMRFl4TERFd0xEa3hMRGcxTERFNU1pd3hORGNzTVRRMExEVTNMREk1TERZMkxESXpPQ3d4T1Rrc01qUTBMREU1TXl3eE9UUXNNVFV3TERJek1pd3lNREFzTVRBM0xESXNNeXd4TERBc01WMGlMQ0pwYzNNaU9pSm9kSFJ3Y3pvdkwyRmpZMjkxYm5SekxtZHZiMmRzWlM1amIyMGlMQ0pwWVhRaU9qRTFNVEkyTkRZd09EQXNJbVY0Y0NJNk1UVXhNalkwT1RZNE1IMC50ZUkxbTkwVnJBRWdLdHYzUElHN0o2c0FoZF9RWTdtaTNRc1dMWWJha1dKcUw2ZjRnbUZ5ZGRFd3FLeEdZNHg3c01MdGotVWMwWkt1V1hfcUU3SzZpd2poTWx6YlRISzhMZWh5SUxPQ1k3WHN1b2E2TXFmVDFXcDhCZzBUZkpIdU9uYlpfeW14UE1RS09rZlppUFZTNWlxc08zYm5lUXpUcjBKYnF0UTd4V3NKUzZuei1pQTZyRWRLamZDNzBhbVcwaVNJLS1sV21YN3NaYVRlWmM3dWc0cjRaNS16TEYzOXp3UVBPd0VRQWxULVpBX3kxZ09fNFZ1ZURlWm1XbVZ1ejJrSk9fOTFoNnFFNW5aT3R3V1Z1Q3Jkdy05SWF3N3oyRFBlc19qNVJEOGxEb3ZSNkpNMGRqMkpxekw5VnBUY21GMjdBSnNjMWpoUUxzTFdibGN4WncnLFxyXG5yZWZyZXNoVG9rZW46JzEvNmNDR0VXeXp4MnVPMmJIMkYxQTh2NktEVEc0clAwQ1hjLVhVUTEyLVUwbycsXHJcbnRva2VuVHlwZTonQmVhcmVyJyxcclxuaW5mb1Rva2VuOntcclxuc3ViOicxMDMxNTQ0OTE3MTEyNzUxMjYzNDInLFxyXG5uYW1lOid0ZXN0IHRoaW5rJyxcclxuZ2l2ZW5fbmFtZTondGVzdCcsXHJcbmZhbWlseV9uYW1lOid0aGluaycsXHJcbnBpY3R1cmU6J2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tWGRVSXFkTWtDV0EvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQUEvNDI1MnJzY2J2NU0vcGhvdG8uanBnJyxcclxuZW1haWw6J3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nLFxyXG5lbWFpbF92ZXJpZmllZDp0cnVlLFxyXG5sb2NhbGU6J2VuJ30sXHJcbnRva2VuSURKU09OOnsnYXpwJzonODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcclxuYXVkOic4MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nLFxyXG5zdWI6JzEwMzE1NDQ5MTcxMTI3NTEyNjM0MicsXHJcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcclxuZW1haWxfdmVyaWZpZWQ6J3RydWUnLFxyXG5hdF9oYXNoOictN3ZhNjNVb3VlRDJMektXM0ZfNjhRJyxcclxubm9uY2U6J1s0OCwxMzAsMSwzNCw0OCwxMyw2LDksNDIsMTM0LDcyLDEzNCwyNDcsMTMsMSwxLDEsNSwwLDMsMTMwLDEsMTUsMCw0OCwxMzAsMSwxMCwyLDEzMCwxLDEsMCwyMjgsNDMsMTAxLDEyLDEyMSw3LDE1Nyw3MSw4MSw1OCwyMTksMzIsMTAsMTA4LDE5MywxNzksMjEyLDExNiwyNTUsNTksMjE3LDMyLDE2MSwyMDEsNTMsMTcxLDIyNiwxOTksMTM3LDIwMiwxNzEsNjAsODIsNTMsMTI1LDYyLDE3NywxMjYsMTY1LDI0LDE0MSwzMCwxNSwyMjYsNTksMTA3LDM0LDcsMTMsMTQ5LDExMiwxMjUsMTAsMjMwLDE5MSwxNTYsMTY0LDE3NywxMCwxODUsMTMsNjYsMywyMTcsMTY2LDI0NCw5MCwxMTksMTExLDI3LDE0NSwxMDQsNzEsMTg5LDE2NiwyMjYsMjU1LDEzMyw4MywxNTEsMjMxLDEwMSwxNTEsODksMjIsMTksNjUsMTU0LDEwLDUzLDIwOCwyMTgsMjUyLDIxOSwzNyw1MCwyMTIsODYsMTQ1LDEwNywxMzIsOTAsMjMzLDIwMiwyMjcsMTA4LDExNCwxNDEsMjksNzMsMTg3LDMxLDEzLDIzNCwwLDIzMiwyNCwxOTEsMzUsMTQ5LDE3OSwxMzgsMjE0LDE1OSwyNDUsMTYyLDE0OCwyMjEsMTE4LDE3LDEwNSw4OSwxNTEsMTQ2LDIwOSw1NSwyMzYsNjEsMTQzLDIzMywyMjgsMTAsMTE1LDgsODEsMTk3LDQ1LDEyMywxODcsMjIzLDE3NiwyNTQsMTY1LDY5LDE0MywyOSwxMDAsMTE0LDE3LDEzMCwyMjYsMjIzLDMzLDExLDI0MCw4MSw2MSwxNzIsMTkxLDE1NywyNDYsMjAyLDg3LDEzMSwyMjEsODgsNDgsMTI3LDE1OSwxMTksMTYwLDE1MiwxMTcsNjEsMjUzLDE3NCw2NSwyMTQsMjAzLDIxOCw2Myw1MCw3OCwxNjAsMTgxLDIyMSwyMTEsMTI4LDcwLDE3OCwxOTEsMTcwLDAsMTMsMTIyLDE3MywxMiwyMDMsMjUyLDQsMTg0LDIyNSwyNTIsNyw2Miw5NiwxMTYsMTUsMjE2LDE1OCw1NSw4NSw0OCwxNiw5LDIwNiwxMTksNzQsMTEyLDI0MywxMzYsODQsMTg0LDIyMywyNTQsMTAxLDkxLDYxLDEwLDkxLDg1LDE5MiwxNDcsMTQ0LDU3LDI5LDY2LDIzOCwxOTksMjQ0LDE5MywxOTQsMTUwLDIzMiwyMDAsMTA3LDIsMywxLDAsMV0nLFxyXG5pc3M6J2h0dHBzOi8vYWNjb3VudHMubm9kZWpzLWlkcCcsXHJcbmlhdDonMTUxMjY0NjA4MCcsXHJcbmV4cDonMTUxMjY0OTY4MCcsXHJcbmFsZzonUlMyNTYnLFxyXG5raWQ6JzQ3N2QxNzk3MmQyYTAwMTA3NGQ1ODZiNTg4OTc2ZDIzNDI5NjgwMWUnfSxcclxuZXhwaXJlczonMTUxMjY0OTY4MCcsXHJcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJ30sXHJcbmluZm9Ub2tlbjp7XHJcbnN1YjonMTAzMTU0NDkxNzExMjc1MTI2MzQyJyxcclxubmFtZTondGVzdCB0aGluaycsXHJcbmdpdmVuX25hbWU6J3Rlc3QnLFxyXG5mYW1pbHlfbmFtZTondGhpbmsnLFxyXG5waWN0dXJlOidodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVhkVUlxZE1rQ1dBL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFBLzQyNTJyc2NidjVNL3Bob3RvLmpwZycsXHJcbmVtYWlsOid0ZXN0YW5kdGhpbmszMjFAZ21haWwuY29tJyxcclxuZW1haWxfdmVyaWZpZWQ6dHJ1ZSxcclxubG9jYWxlOidlbid9LFxyXG5pZGVudGl0eTondXNlcjovL25vZGVqcy1pZHAvdGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXHJcbm1lc3NhZ2VJbmZvOntcclxudXNlclByb2ZpbGU6e1xyXG51c2VybmFtZTondGVzdGFuZHRoaW5rMzIxQGdtYWlsLmNvbScsXHJcbmNuOid0ZXN0YW5kdGhpbmszMjEnLFxyXG5hdmF0YXI6J2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tWGRVSXFkTWtDV0EvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQUEvNDI1MnJzY2J2NU0vcGhvdG8uanBnJyxcclxubG9jYWxlOidlbicsXHJcbnVzZXJVUkw6J3VzZXI6Ly9ub2RlanMtaWRwL3Rlc3RhbmR0aGluazMyMUBnbWFpbC5jb20nfSxcclxuaWRwOidub2RlanMtaWRwJyxcclxuYXNzZXJ0aW9uOidleUowYjJ0bGJrbEVJam9pWlhsS2FHSkhZMmxQYVVwVFZYcEpNVTVwU1hOSmJYUndXa05KTmtscVVUTk9NbEY0VG5wck0wMXRVWGxaVkVGM1RWUkJNMDVIVVRGUFJGcHBUbFJuTkU5VVl6SmFSRWw2VGtSSk5VNXFaM2ROVjFWcFpsRXVaWGxLYUdWdVFXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LYUdSWFVXbFBhVWswVFVSbmVrMXFhekZPYWxsM1RWUkpkR1JJUm5sUFNFWjJZVVJGZUUxVWF6Qk5iV1JyVFcxMGJrMUVRVE5rUkVKNlQwZFplVTU2WkhsaU1tdDFXVmhDZDJONU5XNWlNamx1WWtkV01XTXlWbmxaTWpsMVpFZFdkV1JETldwaU1qQnBURU5LZW1SWFNXbFBhVWw0VFVSTmVFNVVVVEJQVkVVelRWUkZlVTU2VlhoTmFsbDZUa1JKYVV4RFNteGlWMFp3WWtOSk5rbHVVbXhqTTFKb1ltMVNNR0ZIYkhWaGVrMTVUVlZDYm1KWFJuQmlRelZxWWpJd2FVeERTbXhpVjBad1lrWTVNbHBZU25CYWJXeHNXa05KTm1SSVNqRmFVM2RwV1ZoU1ptRkhSbnBoUTBrMlNXa3dNMlJ0UlRKTk1WWjJaRmRXUlUxcmVEWlRNV042VW13NE1rOUdSV2xNUTBwMVlqSTFhbHBUU1RaSmJITXdUME4zZUUxNlFYTk5VM2Q2VGtOM01FOURkM2hOZVhjeVRFUnJjMDVFU1hOTlZFMHdURVJqZVV4RVJYcE9RM2Q1VGtSamMwMVVUWE5OVTNkNFRFUkZjMDVUZDNkTVJFMXpUVlJOZDB4RVJYTk5WRlZ6VFVOM01FOURkM2hOZWtGelRWTjNlRTFEZDNsTVJFVjZUVU4zZUV4RVJYTk5RM2Q1VFdwbmMwNUVUWE5OVkVGNFRFUkZlVXhFUlhsTlUzY3pURVJGTVU1NWR6Tk5VM2MwVFZOM01VOURkM2xOVkd0elRYcEpjMDFVUVhOTlZFRTBURVJGTlUxNWQzaE9lbXR6VFdwRmVVeEVSWGhPYVhkNVRsUlZjMDVVYTNOTmFrVXpURVJOZVV4RVJUSk5VM2Q1VFVSRmMwNVVUWE5OVkdONFRFUkplVTVwZDNoUFZHdHpUVlJOTTB4RVNYZE5hWGQ0VG5wRmMwNXFRWE5QUkVselRsUk5jMDFVU1RGTVJGbDVURVJGTTA1NWQzaE5hbGx6VFZSWk1VeEVTVEJNUkVVd1RWTjNlazFEZDNoT1UzZDVUV3BaYzA1VWEzTk5WRUV6VEVSTk1FeEVZM05OVkUxelRWUlJOVXhFUlhoTmFYZDRUV3BWYzAxVVFYTk5hazEzVEVSRk5VMVRkM2hPVkZselRWUlpNRXhFUlROT2VYZDRUVU4zZUU5RVZYTk5WRTF6VG1wWmMwMTVkM2xOVkdOelRWUlpNa3hFU1RCT1EzYzFUVU4zZUUxVWEzTk5WRVY0VEVSSk0weEVSVEJPVTNkNFRVUlJjMDU2UlhOTlZHYzFURVJGTWs1cGQzbE5hbGx6VFdwVk1VeEVSWHBOZVhjMFRYbDNlRTVVUlhOTmFrMTRURVJGZDAxVGQzaE9WRVZ6VDBScmMwMXFTWE5OVkd0elRtcFZjMDFVVlRCTVJFVjNURVJWZWt4RVNYZFBRM2Q1VFZSbmMwMXFWWGxNUkVsNFQxTjNlazU1ZHpGTlEzZDVUVlJKYzA5RVdYTk5WRkV4VEVSRmQwNTVkM2hOZWtselQxUkJjMDFxVFhwTVJFbDNUV2wzZVUxcVkzTk5WRUUwVEVSRmVFNURkM2hPUkVWelRXcHJjMDU2VFhOTlZHY3pURVJOZUV4RVJYcE1SRWw2VGtOM2QweEVTWHBOYVhkNVRrTjNlRTlVUlhOTmVsVnpUVlJSTlV4RVJUTlBVM2Q0VFhwbmMwMXFSVEJNUkVVeFQxTjNlVTVFVlhOTlZGbDVURVJGTUU5RGQzbE5ha1Z6VFZSRk5FeEVSVE5NUkVWM1RsTjNORTlUZDNoT1ZFVnpUVlJSTWt4RVNYZFBVM2N4VGxOM2VVMTZXWE5PYWtWelRWUlJla3hFU1hwTmVYZDVUV3BuYzAxVVFYTk5WRVV4VEVSbmMwOUVSWE5OVkdzelRFUlJNVXhFUlhsTmVYZDRUMFJqYzAxcVNYcE1SRVV6VG1sM2VVNVVVWE5OVkZreFRFUlpOVXhFUlRCTmVYZDVUMU4zZUUxRVFYTk5WRVV3VEVSRk0weEVSWHBOUTNkNVRXcFpjMDFxU1hwTVJFMTZURVJGZUV4RVNUQk5RM2MwVFZOM01rMVRkM2hPZWtselRWUnJlRXhFUlRGT2VYZDVUa1JaYzAxcVFYbE1SR2N6VEVSRmVrMVRkM2xOYWtWelQwUm5jMDVFWjNOTlZFa3pURVJGTVU5VGQzaE5WR3R6VFZSWmQweEVSVEZOYVhkNFRWUmpjMDVxUlhOTmFsVjZURVJGTTA1RGR6Sk9VM2Q1VFZSUmMwMXFRWHBNUkVsNFQwTjNNazE1ZHpGTlEzY3pUME4zZUU1cVFYTk5WR2Q0VEVSSmVVMVRkM2xOVkVWelRWUkpORXhFWTNkTVJFVXpUME4zZUU5VVJYTk5WR04zVEVSQmMwMVVUWE5OVkVsNVRFUkZNMDE1ZDNoTmFYZDVUVVJOYzAxcVZYbE1SRkZ6VFZSbk1FeEVTWGxPVTNkNVRsUkpjMDU1ZHpKTmFYYzFUbWwzZUUxVVdYTk5WRlZ6VFdwRk1reEVSVEZQUTNjeFRsTjNORTVUZHpCUFEzZDRUbWwzTlV4RVNYZE9hWGQ0VFZScmMwNTZVWE5OVkVWNVRFUkpNRTE1ZDNoTmVsbHpUMFJSYzAxVVp6Qk1SRWw1VFhsM2VVNVVVWE5OVkVGNFRFUnJlRXhFV1hoTVJFVjNURVJyZUV4RVp6Rk1SRVUxVFdsM2VFNUVZM05OVkZFd1RFUlZNMHhFU1RWTVJGa3lURVJKZWs5RGQzaFBWR3R6VFdwUk1FeEVSVFZOZVhkNFQxUlJjMDFVVlhkTVJFbDZUV2wzZVUxRVFYTk5WRUV6VEVSSmMwMTVkM2hNUkVGelRWWXdhVXhEU25Cak0wMXBUMmxLYjJSSVVuZGplbTkyVERKR2Fsa3lPVEZpYmxKNlRHMWtkbUl5WkhOYVV6VnFZakl3YVV4RFNuQlpXRkZwVDJwRk1VMVVTVEpPUkZsM1QwUkJjMGx0VmpSalEwazJUVlJWZUUxcVdUQlBWRmswVFVnd0xuUmxTVEZ0T1RCV2NrRkZaMHQwZGpOUVNVYzNTalp6UVdoa1gxRlpOMjFwTTFGelYweFpZbUZyVjBweFREWm1OR2R0Um5sa1pFVjNjVXQ0UjFrMGVEZHpUVXgwYWkxVll6QmFTM1ZYV0Y5eFJUZExObWwzYW1oTmJIcGlWRWhMT0V4bGFIbEpURTlEV1RkWWMzVnZZVFpOY1daVU1WZHdPRUpuTUZSbVNraDFUMjVpV2w5NWJYaFFUVkZMVDJ0bVdtbFFWbE0xYVhGelR6TmlibVZSZWxSeU1FcGljWFJSTjNoWGMwcFRObTU2TFdsQk5uSkZaRXRxWmtNM01HRnRWekJwVTBrdExXeFhiVmczYzFwaFZHVmFZemQxWnpSeU5GbzFMWHBNUmpNNWVuZFJVRTkzUlZGQmJGUXRXa0ZmZVRGblQxODBWblZsUkdWYWJWZHRWblY2TW10S1QxODVNV2cyY1VVMWJscFBkSGRYVm5WRGNtUjNMVGxKWVhjM2VqSkVVR1Z6WDJvMVVrUTRiRVJ2ZGxJMlNrMHdaR295U25GNlREbFdjRlJqYlVZeU4wRktjMk14YW1oUlRITk1WMkpzWTNoYWR5SXNJblJ2YTJWdVNVUktVMDlPSWpwN0ltRjZjQ0k2SWpnd09ETXlPVFUyTmpBeE1pMTBjWEk0Y1c5b01URXhPVFF5WjJReWEyY3dNRGQwTUhNNFpqSTNOM0p2YVM1aGNIQnpMbWR2YjJkc1pYVnpaWEpqYjI1MFpXNTBMbU52YlNJc0ltRjFaQ0k2SWpnd09ETXlPVFUyTmpBeE1pMTBjWEk0Y1c5b01URXhPVFF5WjJReWEyY3dNRGQwTUhNNFpqSTNOM0p2YVM1aGNIQnpMbWR2YjJkc1pYVnpaWEpqYjI1MFpXNTBMbU52YlNJc0luTjFZaUk2SWpFd016RTFORFE1TVRjeE1USTNOVEV5TmpNME1pSXNJbVZ0WVdsc0lqb2lkR1Z6ZEdGdVpIUm9hVzVyTXpJeFFHZHRZV2xzTG1OdmJTSXNJbVZ0WVdsc1gzWmxjbWxtYVdWa0lqb2lkSEoxWlNJc0ltRjBYMmhoYzJnaU9pSXROM1poTmpOVmIzVmxSREpNZWt0WE0wWmZOamhSSWl3aWJtOXVZMlVpT2lKYk5EZ3NNVE13TERFc016UXNORGdzTVRNc05pdzVMRFF5TERFek5DdzNNaXd4TXpRc01qUTNMREV6TERFc01Td3hMRFVzTUN3ekxERXpNQ3d4TERFMUxEQXNORGdzTVRNd0xERXNNVEFzTWl3eE16QXNNU3d4TERBc01qSTRMRFF6TERFd01Td3hNaXd4TWpFc055d3hOVGNzTnpFc09ERXNOVGdzTWpFNUxETXlMREV3TERFd09Dd3hPVE1zTVRjNUxESXhNaXd4TVRZc01qVTFMRFU1TERJeE55d3pNaXd4TmpFc01qQXhMRFV6TERFM01Td3lNallzTVRrNUxERXpOeXd5TURJc01UY3hMRFl3TERneUxEVXpMREV5TlN3Mk1pd3hOemNzTVRJMkxERTJOU3d5TkN3eE5ERXNNekFzTVRVc01qSTJMRFU1TERFd055d3pOQ3czTERFekxERTBPU3d4TVRJc01USTFMREV3TERJek1Dd3hPVEVzTVRVMkxERTJOQ3d4Tnpjc01UQXNNVGcxTERFekxEWTJMRE1zTWpFM0xERTJOaXd5TkRRc09UQXNNVEU1TERFeE1Td3lOeXd4TkRVc01UQTBMRGN4TERFNE9Td3hOallzTWpJMkxESTFOU3d4TXpNc09ETXNNVFV4TERJek1Td3hNREVzTVRVeExEZzVMREl5TERFNUxEWTFMREUxTkN3eE1DdzFNeXd5TURnc01qRTRMREkxTWl3eU1Ua3NNemNzTlRBc01qRXlMRGcyTERFME5Td3hNRGNzTVRNeUxEa3dMREl6TXl3eU1ESXNNakkzTERFd09Dd3hNVFFzTVRReExESTVMRGN6TERFNE55d3pNU3d4TXl3eU16UXNNQ3d5TXpJc01qUXNNVGt4TERNMUxERTBPU3d4Tnprc01UTTRMREl4TkN3eE5Ua3NNalExTERFMk1pd3hORGdzTWpJeExERXhPQ3d4Tnl3eE1EVXNPRGtzTVRVeExERTBOaXd5TURrc05UVXNNak0yTERZeExERTBNeXd5TXpNc01qSTRMREV3TERFeE5TdzRMRGd4TERFNU55dzBOU3d4TWpNc01UZzNMREl5TXl3eE56WXNNalUwTERFMk5TdzJPU3d4TkRNc01qa3NNVEF3TERFeE5Dd3hOeXd4TXpBc01qSTJMREl5TXl3ek15d3hNU3d5TkRBc09ERXNOakVzTVRjeUxERTVNU3d4TlRjc01qUTJMREl3TWl3NE55d3hNekVzTWpJeExEZzRMRFE0TERFeU55d3hOVGtzTVRFNUxERTJNQ3d4TlRJc01URTNMRFl4TERJMU15d3hOelFzTmpVc01qRTBMREl3TXl3eU1UZ3NOak1zTlRBc056Z3NNVFl3TERFNE1Td3lNakVzTWpFeExERXlPQ3czTUN3eE56Z3NNVGt4TERFM01Dd3dMREV6TERFeU1pd3hOek1zTVRJc01qQXpMREkxTWl3MExERTROQ3d5TWpVc01qVXlMRGNzTmpJc09UWXNNVEUyTERFMUxESXhOaXd4TlRnc05UVXNPRFVzTkRnc01UWXNPU3d5TURZc01URTVMRGMwTERFeE1pd3lORE1zTVRNMkxEZzBMREU0TkN3eU1qTXNNalUwTERFd01TdzVNU3cyTVN3eE1DdzVNU3c0TlN3eE9USXNNVFEzTERFME5DdzFOeXd5T1N3Mk5pd3lNemdzTVRrNUxESTBOQ3d4T1RNc01UazBMREUxTUN3eU16SXNNakF3TERFd055d3lMRE1zTVN3d0xERmRJaXdpYVhOeklqb2lhSFIwY0hNNkx5OWhZMk52ZFc1MGN5NW5iMjluYkdVdVkyOXRJaXdpYVdGMElqb2lNVFV4TWpZME5qQTRNQ0lzSW1WNGNDSTZJakUxTVRJMk5EazJPREFpTENKaGJHY2lPaUpTVXpJMU5pSXNJbXRwWkNJNklqUTNOMlF4TnprM01tUXlZVEF3TVRBM05HUTFPRFppTlRnNE9UYzJaREl6TkRJNU5qZ3dNV1VpZlgwPScsXHJcbmV4cGlyZXM6JzE1MTI2NDk2ODAnfSxcclxuLypcclxua2V5UGFpcjp7XHJcbnB1YmxpYzpbNDgsMTMwLDEsMzQsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCwzLDEzMCwxLDE1LDAsNDgsMTMwLDEsMTAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDFdLFxyXG5wcml2YXRlOls0OCwxMzAsNCwxOTEsMiwxLDAsNDgsMTMsNiw5LDQyLDEzNCw3MiwxMzQsMjQ3LDEzLDEsMSwxLDUsMCw0LDEzMCw0LDE2OSw0OCwxMzAsNCwxNjUsMiwxLDAsMiwxMzAsMSwxLDAsMjI4LDQzLDEwMSwxMiwxMjEsNywxNTcsNzEsODEsNTgsMjE5LDMyLDEwLDEwOCwxOTMsMTc5LDIxMiwxMTYsMjU1LDU5LDIxNywzMiwxNjEsMjAxLDUzLDE3MSwyMjYsMTk5LDEzNywyMDIsMTcxLDYwLDgyLDUzLDEyNSw2MiwxNzcsMTI2LDE2NSwyNCwxNDEsMzAsMTUsMjI2LDU5LDEwNywzNCw3LDEzLDE0OSwxMTIsMTI1LDEwLDIzMCwxOTEsMTU2LDE2NCwxNzcsMTAsMTg1LDEzLDY2LDMsMjE3LDE2NiwyNDQsOTAsMTE5LDExMSwyNywxNDUsMTA0LDcxLDE4OSwxNjYsMjI2LDI1NSwxMzMsODMsMTUxLDIzMSwxMDEsMTUxLDg5LDIyLDE5LDY1LDE1NCwxMCw1MywyMDgsMjE4LDI1MiwyMTksMzcsNTAsMjEyLDg2LDE0NSwxMDcsMTMyLDkwLDIzMywyMDIsMjI3LDEwOCwxMTQsMTQxLDI5LDczLDE4NywzMSwxMywyMzQsMCwyMzIsMjQsMTkxLDM1LDE0OSwxNzksMTM4LDIxNCwxNTksMjQ1LDE2MiwxNDgsMjIxLDExOCwxNywxMDUsODksMTUxLDE0NiwyMDksNTUsMjM2LDYxLDE0MywyMzMsMjI4LDEwLDExNSw4LDgxLDE5Nyw0NSwxMjMsMTg3LDIyMywxNzYsMjU0LDE2NSw2OSwxNDMsMjksMTAwLDExNCwxNywxMzAsMjI2LDIyMywzMywxMSwyNDAsODEsNjEsMTcyLDE5MSwxNTcsMjQ2LDIwMiw4NywxMzEsMjIxLDg4LDQ4LDEyNywxNTksMTE5LDE2MCwxNTIsMTE3LDYxLDI1MywxNzQsNjUsMjE0LDIwMywyMTgsNjMsNTAsNzgsMTYwLDE4MSwyMjEsMjExLDEyOCw3MCwxNzgsMTkxLDE3MCwwLDEzLDEyMiwxNzMsMTIsMjAzLDI1Miw0LDE4NCwyMjUsMjUyLDcsNjIsOTYsMTE2LDE1LDIxNiwxNTgsNTUsODUsNDgsMTYsOSwyMDYsMTE5LDc0LDExMiwyNDMsMTM2LDg0LDE4NCwyMjMsMjU0LDEwMSw5MSw2MSwxMCw5MSw4NSwxOTIsMTQ3LDE0NCw1NywyOSw2NiwyMzgsMTk5LDI0NCwxOTMsMTk0LDE1MCwyMzIsMjAwLDEwNywyLDMsMSwwLDEsMiwxMzAsMSwwLDEwMywyNDQsMTM3LDExOCwxMTYsODIsMTQsMjAzLDEwMiwxMDcsMjUzLDg4LDEyLDE5OSwyMjIsNjAsMjQzLDEzNiw4NiwxNTcsNzQsMjI0LDE5MCw1MywxMTMsNTcsMTU3LDI1MCw0OSwxMzAsOTYsMzEsMjUyLDEzNiwxNTIsNzAsMTQzLDE3LDIxNSw5NiwxMDMsNTEsMTgsMzUsMTQxLDIxMiwyMTAsMjA1LDksMjE2LDgzLDcwLDI0NSw3MSwxMzgsMTE5LDExMiwyMjksMTY0LDE3Niw5LDM3LDgxLDE2MSwxOTMsMTU0LDY4LDI0OSwxMTUsMTA2LDIwMSw2LDEyLDIyNSwxNDQsMTI2LDE0MSwyMTAsMTQxLDI0MiwxMjgsMTU5LDIyMSwxNjMsMjIyLDIxLDIzMywyMzAsMTY3LDIwNiw1OSwyNCwyNTAsMjMzLDgxLDEyMiwxMDIsMjYsNiwyMzMsNzIsMTMzLDQ3LDc3LDE1NSwyMzgsODYsNiwxMzksMjQsMTMxLDE2MywxNzksMTEyLDQ4LDI0NywxNDIsNiwyMDcsMjA0LDE3MywyMjMsMTQwLDE5OSwxNTAsOTUsMTIzLDE1MiwyMDIsMTU1LDEzMSwyMzgsNjIsOTYsMTMzLDQsMjE3LDUxLDEyMSwzMCwzOCwxNzgsMTg5LDIxNiw0NCwzNSwyNDEsOTMsNyw2Miw5MCwxMTEsMjE2LDY2LDIwOSwyNDMsMTI4LDIzNCwxNDEsODQsMTM1LDE4MSwxMywzOCwyMjAsMTE0LDI0NSwyNDAsMTc4LDk1LDIyMCwyMDYsMTEsMTg2LDIzNCwyMTMsNjYsMTIxLDgzLDY4LDg5LDc1LDQ2LDE4MywxNDUsMTgzLDE0NywxNjAsMjE1LDExOCwxOTgsMTI1LDE4MSwxNDYsMzAsMjUxLDU4LDg3LDQ3LDIwOSwyMzcsOTcsMjQsNDcsMTc5LDYsMTEwLDI0Miw5OSwxNTAsMjI2LDE0OCwxOTgsMTc0LDE0NiwxMDEsMjEzLDg3LDE3OCwxMCwyMjMsMTA1LDE4LDU2LDUzLDIyLDIxMiwxNTgsMTcwLDE3Niw1MSw4NiwxNDUsMTI1LDEyNCw0NCw5LDg1LDE5LDE0NCwyNDYsMTcwLDc4LDEyNCwzMCwzMiwxMiwxNjYsMTc0LDEzOSw3Nyw2MywxNzMsODIsMTAsMTUzLDIsMTI5LDEyOSwwLDI0OCwxOCwxNDMsMjQ2LDEzNywxMzYsMTQ1LDIxOSwxNzgsMzksMjcsOTQsNjQsOTAsNDcsMTYzLDExNCw2MCw2MywxODcsMTMxLDE0MywyNDQsMTYsNDIsMTI4LDIzMSwxMTcsOTIsOTgsMjE5LDE1NSw2MiwxMDcsMjUyLDE3LDI0NSw0NSwxNjAsMjI1LDEwMywxNDIsNzIsMzYsMTkzLDE1MCwyMzUsMjE0LDE3NSw2MiwyMTIsNTYsNDUsOSwwLDYwLDExNCwxMDcsMTM0LDIyOCwyMDQsMTMxLDEzMSwyMTQsOTQsMjAxLDE0OCwxNTksOTksMTM5LDE4MSwxMywxMTksMzgsMzAsMTA3LDE2NiwxNjUsMjAzLDQzLDM0LDIwLDIwNywxNzEsMzIsNTgsMTY3LDYyLDE5NiwxNTMsMTAzLDIwNCwyMTMsMjQ3LDQ4LDExMSwyMjcsNTksOTUsOTcsMTk0LDE4Nyw1MywxMCwyNDcsMTA4LDU4LDg2LDI4LDI5LDExMyw4LDExMCwxNzEsMjIwLDI0NSwxMSw4MiwyMzMsMjIzLDkxLDY4LDE2NiwxMTcsMTc0LDE4Nyw2Miw3NywyLDEyOSwxMjksMCwyMzUsMTE4LDIsMTA1LDIzOSwyMTIsMzAsMTA0LDE1Nyw0MSwxMDksMTEsMjQ4LDE1MiwyMiwyMzYsOTcsNDAsMTUzLDEzMSwyMjgsNSw4NiwxODcsMTEzLDEyNiwxNDQsNzYsMTQxLDc5LDExMCwyNTAsMTQ2LDE1Miw0OSw1OCwxNTYsMjAxLDE3Niw5MiwxODksMjA5LDMwLDExMiwxMDgsMTc1LDIwNCwyMDQsMjQ3LDE2NCw0NiwxMjksMjM5LDk4LDEyNyw0OSwxNDUsMjE4LDYzLDE5MywxMjQsMTc0LDE4LDk4LDIwMSw5OSwxNTQsMTYyLDEzOCw3OCwxNTksMjUzLDMsMjQ4LDMsMjA5LDM2LDIzOSwxOTMsMTU1LDE5Myw1LDE5LDIzNiwzNyw3OCwxMTgsMTM1LDI1MCwxOTksNywxNDEsMjQ4LDEyMCwzNiwxMzYsOTMsOTgsMTc0LDYwLDE4LDIxNSw5MywxNzQsMTA3LDE0MSwxMTYsMTQ1LDE2NywyMjEsMjEwLDE2OSwyNDcsNjcsMjU0LDIyMiwxNjEsMTM0LDYzLDIyMSw5MCw4Nyw0Miw5OSwyMjcsODEsMTczLDE1MSwyLDEyOSwxMjksMCwxMzMsMjMsMTY4LDEwMyw4MywyMzIsMTQ2LDE2MCwxODEsMjMsNDAsMzgsMjA0LDEzLDIxNCwyMDMsNDksNDEsMTk1LDIyNywxODksMTgxLDgsMjQzLDExOSwxMDYsNzUsNjcsMjUwLDI1MCwxMCwyMzQsOTgsMTE4LDI2LDI1MCwzNSwxMjEsMTMyLDEyNCwxMCw3NiwyNiwxOTgsMTY1LDE1NCwxMDgsMTksMTE3LDg4LDIzLDE3LDE5MiwxNDMsMTg0LDE3NywxODEsMTQxLDE1Nyw0LDE4NSwyNDgsMTkzLDc3LDIwNCwyNDMsNywxNzAsMjQwLDQsMTExLDExMywxODMsMCwyNywxMzYsMjAsMTksMTQ5LDc0LDMzLDI0MSwyMTgsMTA4LDIzNiw4MCwxNzEsMTQ4LDE2LDExNiw5NywxMDksODMsNzQsODgsMTQ1LDk0LDIzOSwxMDIsMTkyLDE5LDExNCwyMDcsNSwxMjgsNTEsMTExLDE2NCwyMzcsODYsMTU0LDk5LDUyLDE5Nyw2Miw1NywxODIsNiwxNTIsMjQ1LDYxLDEzNyw1OCwxMDUsMTU5LDIsODQsMTA5LDIsMTI5LDEyOSwwLDIyNiw2NywxMTEsMTMyLDk1LDkxLDEwMSwxNzcsNjMsMTg5LDQ0LDUzLDE5MywxODQsOTIsMjMwLDIyMyw5OCwxMzMsNzQsMjA5LDg2LDUyLDcsNjUsMTk1LDIwNiwxMDAsODEsMTc4LDE0NCw2NSwxNjcsMTUxLDQyLDc5LDg5LDE0OSwxOCwxNzMsMTg4LDIxLDI0NCwyNTEsNDksMjMwLDQxLDE1MCwxNTMsNDYsMzUsMzgsMjMxLDk5LDE3NCw1NiwxMTUsMzIsMjE1LDI1Myw4NSwxNDcsMTA4LDE5NywxNDcsMzQsMjM2LDIxNiwyMjIsMTc3LDU3LDkwLDEzNiwxMTQsMjA3LDQ4LDQ2LDMxLDkwLDIyMCwxOCw1OCwxNDMsMjM5LDExMSwyMTQsMjcsOTUsNiwzNiw1MywyMjksNjIsMTA4LDQ1LDM5LDEsMzAsNDcsMTc4LDU2LDE2NCwyMDYsNTYsNDIsMjA4LDQ2LDE5Myw2MSwzMSwxNDcsNDUsMTQ3LDIzLDE4NywyMiw1MCwyNTUsMTExLDIyOSwxMzIsMTk5LDE1Miw3NSwxNDIsMTM2LDIwOSwxNTEsMiwxMjksMTI5LDAsMTY1LDU2LDIzMiw3Niw1NSw1NywyNDAsMTU5LDkyLDIwNywyMjAsMTQzLDEzMCwzMCw1NywyMzQsMjUxLDE3MiwxNzEsMTgwLDU0LDE1OSwyMjksOTYsMjQ2LDczLDExMiwxNDYsNzUsMTU3LDI0MiwyMDEsMTYxLDIxOCwzNywxNzYsMzUsMTcwLDUwLDkwLDE0OCwxMDIsMTkxLDE5OSwyMzksMTc0LDc4LDcyLDY3LDg1LDE5OSw0NSwxNDksMTQ1LDEzMiwxNjEsMjEyLDMzLDE1Nyw3NSwyMTYsNzksMzksMjMzLDE4LDIxMCwyNTUsMjYsNzIsMjI5LDIzOSw0NCwxMiwxNDcsMTU4LDE3NiwxOTIsOTUsMTI2LDMyLDE3NSwyMywyMjYsMTMxLDEzOSwxOTcsMTc1LDE5Myw2Miw4LDE1MSwyNTIsNjgsMTU0LDk0LDg5LDE4OSwxMjUsOTAsMzAsMzYsMTc1LDczLDIzMCwxOTQsMTMsMjMzLDI0NywxMjMsNjAsMjQxLDQ3LDE3MSw1MSwxODksMTEyLDExMSwyMTMsMTQxLDg5LDcwLDI0OSwyMzYsNjMsMjM2LDExMCwxMTUsMjA4XVxyXG59Ki9cclxufTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvRmFrZU5vZGVqc1Byb3h5U3R1Yi5pZHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("(function () {\n  \"use strict\";\n\n  function btoa(str) {\n    var buffer;\n\n    if (str instanceof Buffer) {\n      buffer = str;\n    } else {\n      buffer = Buffer.from(str.toString(), 'binary');\n    }\n\n    return buffer.toString('base64');\n  }\n\n  module.exports = btoa;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2J0b2EvaW5kZXguanM/YjlhMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBmdW5jdGlvbiBidG9hKHN0cikge1xuICAgIHZhciBidWZmZXI7XG5cbiAgICBpZiAoc3RyIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgICBidWZmZXIgPSBzdHI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1ZmZlciA9IEJ1ZmZlci5mcm9tKHN0ci50b1N0cmluZygpLCAnYmluYXJ5Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1ZmZlci50b1N0cmluZygnYmFzZTY0Jyk7XG4gIH1cblxuICBtb2R1bGUuZXhwb3J0cyA9IGJ0b2E7XG59KCkpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2J0b2EvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction atob(str) {\n  return Buffer.from(str, 'base64').toString('binary');\n}\n\nmodule.exports = atob.atob = atob;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2F0b2Ivbm9kZS1hdG9iLmpzPzM3NGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gYXRvYihzdHIpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN0ciwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdiaW5hcnknKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhdG9iLmF0b2IgPSBhdG9iO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L25vZGVqcy1pZHAvbm9kZV9tb2R1bGVzL2F0b2Ivbm9kZS1hdG9iLmpzXG4vLyBtb2R1bGUgaWQgPSAyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n");

/***/ })
/******/ ]);
});",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "34.90",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "57378b186a1ba1a7af6d8190014c85afc",
    "constraints": {
      "node": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nexports.default = activate;\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar domain = 'rethink-project.eu';\n\n/**\r\n * Identity Provider Proxy Protocol Stub\r\n */\n\nvar IMSIWProxyStub = function () {\n\n\t/**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the received idpProxy\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n\tfunction IMSIWProxyStub(runtimeProtoStubURL, bus, config) {\n\t\tvar _this2 = this;\n\n\t\t_classCallCheck(this, IMSIWProxyStub);\n\n\t\tthis.runtimeProtoStubURL = runtimeProtoStubURL;\n\t\tthis.messageBus = bus;\n\t\tthis.config = config;\n\n\t\tthis.messageBus.addListener('*', function (msg) {\n\t\t\t//TODO add the respective listener\n\t\t\tif (msg.to === 'domain-idp://' + domain) {\n\t\t\t\t_this2.requestToIdp(msg);\n\t\t\t}\n\t\t});\n\n\t\tthis._sendStatus('created');\n\t}\n\n\t_createClass(IMSIWProxyStub, [{\n\t\tkey: '_sendStatus',\n\t\tvalue: function _sendStatus(value, reason) {\n\t\t\tvar _this = this;\n\n\t\t\tconsole.log('[Slack Idp Proxy status changed] to ', value);\n\n\t\t\t_this._state = value;\n\n\t\t\tvar msg = {\n\t\t\t\ttype: 'update',\n\t\t\t\tfrom: _this.runtimeProtoStubURL,\n\t\t\t\tto: _this.runtimeProtoStubURL + '/status',\n\t\t\t\tbody: {\n\t\t\t\t\tvalue: value\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (reason) {\n\t\t\t\tmsg.body.desc = reason;\n\t\t\t}\n\n\t\t\t_this.messageBus.postMessage(msg);\n\t\t}\n\n\t\t/**\r\n   * Function that see the intended method in the message received and call the respective function\r\n   *\r\n   * @param {message}  message received in the messageBus\r\n   */\n\n\t}, {\n\t\tkey: 'requestToIdp',\n\t\tvalue: function requestToIdp(msg) {\n\t\t\tvar _this3 = this;\n\n\t\t\tvar params = msg.body.params;\n\n\t\t\tswitch (msg.body.method) {\n\t\t\t\tcase 'generateAssertion':\n\t\t\t\t\tthis.generateAssertion(params.contents, params.origin, params.usernameHint).then(function (value) {\n\t\t\t\t\t\treturn _this3.replyMessage(msg, value);\n\t\t\t\t\t}).catch(function (error) {\n\t\t\t\t\t\treturn _this3.replyMessage(msg, error);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'validateAssertion':\n\t\t\t\t\tthis.replyMessage(msg, { identity: 'identity@idp.com', contents: 'content' });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: 'generateAssertion',\n\t\tvalue: function generateAssertion(contents, origin, hint) {\n\t\t\tvar _this4 = this;\n\n\t\t\tconsole.log('contents->', contents);\n\t\t\tconsole.log('origin->', origin);\n\t\t\tconsole.log('hint->', hint);\n\n\t\t\treturn new Promise(function (resolve, reject) {\n\n\t\t\t\t//the hint field contains the information obtained after the user authentication\n\t\t\t\t// if the hint content is not present, then rejects the value with the URL to open the page to authenticate the user\n\t\t\t\tif (!hint) {\n\t\t\t\t\tvar requestUrl = 'https://accounts.google.com/o/oauth2/v2/auth?scope=email%20profile&state=%2Fprofile&redirect_uri=' + location.protocol + '//' + location.hostname + '&response_type=token&client_id=808329566012-tqr8qoh111942gd2kg007t0s8f277roi.apps.googleusercontent.com';\n\t\t\t\t\tconsole.log('first url ', requestUrl, 'done');\n\t\t\t\t\treject({ name: 'IdPLoginError', loginUrl: requestUrl });\n\t\t\t\t} else {\n\t\t\t\t\tvar accessToken = _this4._urlParser(hint, 'access_token');\n\t\t\t\t\tvar expires = Math.floor(Date.now() / 1000) + _this4._urlParser(hint, 'expires_in');\n\t\t\t\t\tfetch('https://www.googleapis.com/oauth2/v1/userinfo?access_token=' + accessToken).then(function (res_user) {\n\t\t\t\t\t\treturn res_user.json();\n\t\t\t\t\t}).then(function (body) {\n\t\t\t\t\t\tvar infoToken = { picture: body.picture, email: body.email, family_name: body.family_name, given_name: body.given_name };\n\t\t\t\t\t\tvar assertion = btoa(JSON.stringify({ tokenID: accessToken, email: body.email, id: body.id }));\n\t\t\t\t\t\tvar toResolve = { info: { expires: expires }, assertion: assertion, idp: { domain: domain, protocol: 'OAuth 2.0' }, infoToken: infoToken, interworking: { access_token: accessToken, domain: domain } };\n\t\t\t\t\t\tconsole.log('RESOLVING THIS OBJECT', toResolve);\n\t\t\t\t\t\tresolve(toResolve);\n\t\t\t\t\t}).catch(reject);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}, {\n\t\tkey: '_urlParser',\n\t\tvalue: function _urlParser(url, name) {\n\t\t\tname = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n\t\t\tvar regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n\t\t\tvar regex = new RegExp(regexS);\n\t\t\tvar results = regex.exec(url);\n\t\t\tif (results === null) return '';else return results[1];\n\t\t}\n\n\t\t/**\r\n   * This function receives a message and a value. It replies the value to the sender of the message received\r\n   *\r\n   * @param  {message}   message received\r\n   * @param  {value}     value to include in the new message to send\r\n   */\n\n\t}, {\n\t\tkey: 'replyMessage',\n\t\tvalue: function replyMessage(msg, value) {\n\t\t\tvar message = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { code: 200, value: value } };\n\n\t\t\tthis.messageBus.postMessage(message);\n\t\t}\n\t}]);\n\n\treturn IMSIWProxyStub;\n}();\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n\treturn {\n\t\tname: 'IMSIWProxyStub',\n\t\tinstance: new IMSIWProxyStub(url, bus, config)\n\t};\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvc2lwLnJldGhpbmstcHJvamVjdC5ldS9JTVNJV1Byb3h5U3R1Yi5pZHAuanM/MThjNSJdLCJuYW1lcyI6WyJhY3RpdmF0ZSIsImRvbWFpbiIsIklNU0lXUHJveHlTdHViIiwicnVudGltZVByb3RvU3R1YlVSTCIsImJ1cyIsImNvbmZpZyIsIm1lc3NhZ2VCdXMiLCJhZGRMaXN0ZW5lciIsIm1zZyIsInRvIiwicmVxdWVzdFRvSWRwIiwiX3NlbmRTdGF0dXMiLCJ2YWx1ZSIsInJlYXNvbiIsIl90aGlzIiwiY29uc29sZSIsImxvZyIsIl9zdGF0ZSIsInR5cGUiLCJmcm9tIiwiYm9keSIsImRlc2MiLCJwb3N0TWVzc2FnZSIsInBhcmFtcyIsIm1ldGhvZCIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiY29udGVudHMiLCJvcmlnaW4iLCJ1c2VybmFtZUhpbnQiLCJ0aGVuIiwicmVwbHlNZXNzYWdlIiwiY2F0Y2giLCJlcnJvciIsImlkZW50aXR5IiwiaGludCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdFVybCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsIm5hbWUiLCJsb2dpblVybCIsImFjY2Vzc1Rva2VuIiwiX3VybFBhcnNlciIsImV4cGlyZXMiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwiZmV0Y2giLCJyZXNfdXNlciIsImpzb24iLCJpbmZvVG9rZW4iLCJwaWN0dXJlIiwiZW1haWwiLCJmYW1pbHlfbmFtZSIsImdpdmVuX25hbWUiLCJhc3NlcnRpb24iLCJidG9hIiwiSlNPTiIsInN0cmluZ2lmeSIsInRva2VuSUQiLCJpZCIsInRvUmVzb2x2ZSIsImluZm8iLCJpZHAiLCJpbnRlcndvcmtpbmciLCJhY2Nlc3NfdG9rZW4iLCJ1cmwiLCJyZXBsYWNlIiwicmVnZXhTIiwicmVnZXgiLCJSZWdFeHAiLCJyZXN1bHRzIiwiZXhlYyIs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UyxZQUFZOUIsSUFBWixHQUFtQixXQUFoQztBQUNBLE9BQUkrQixRQUFRLElBQUlDLE1BQUosQ0FBV0YsTUFBWCxDQUFaO0FBQ0EsT0FBSUcsVUFBVUYsTUFBTUcsSUFBTixDQUFXTixHQUFYLENBQWQ7QUFDQSxPQUFJSyxZQUFZLElBQWhCLEVBQ0MsT0FBTyxFQUFQLENBREQsS0FHQyxPQUFPQSxRQUFRLENBQVIsQ0FBUDtBQUNEOztBQUVEOzs7Ozs7Ozs7K0JBTWFuRSxHLEVBQUtJLEssRUFBTztBQUN4QixPQUFJaUUsVUFBVSxFQUFDYixJQUFJeEQsSUFBSXdELEVBQVQsRUFBYTlDLE1BQU0sVUFBbkIsRUFBK0JULElBQUlELElBQUlXLElBQXZDLEVBQTZDQSxNQUFNWCxJQUFJQyxFQUF2RCxFQUEyRFcsTUFBTSxFQUFDMEQsTUFBTSxHQUFQLEVBQVlsRSxPQUFPQSxLQUFuQixFQUFqRSxFQUFkOztBQUVBLFFBQUtOLFVBQUwsQ0FBZ0JnQixXQUFoQixDQUE0QnVELE9BQTVCO0FBQ0E7Ozs7OztBQUdGOzs7Ozs7Ozs7QUFPZSxTQUFTN0UsUUFBVCxDQUFrQnNFLEdBQWxCLEVBQXVCbEUsR0FBdkIsRUFBNEJDLE1BQTVCLEVBQW9DO0FBQ2xELFFBQU87QUFDTnFDLFFBQU0sZ0JBREE7QUFFTnFDLFlBQVUsSUFBSTdFLGNBQUosQ0FBbUJvRSxHQUFuQixFQUF3QmxFLEdBQXhCLEVBQTZCQyxNQUE3QjtBQUZKLEVBQVA7QUFJQSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGRvbWFpbiA9ICdyZXRoaW5rLXByb2plY3QuZXUnXHJcblxyXG4vKipcclxuICogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxyXG4gKi9cclxuY2xhc3MgSU1TSVdQcm94eVN0dWIge1xyXG5cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3RvciBvZiB0aGUgSWRwUHJveHkgU3R1YlxyXG5cdCAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIHJlY2VpdmVkIGlkcFByb3h5XHJcblx0ICpcclxuXHQgKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcclxuXHQgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuXHQgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xyXG5cdFx0dGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTFxyXG5cdFx0dGhpcy5tZXNzYWdlQnVzID0gYnVzXHJcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZ1xyXG5cclxuXHRcdHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIG1zZyA9PiB7XHJcblx0XHRcdC8vVE9ETyBhZGQgdGhlIHJlc3BlY3RpdmUgbGlzdGVuZXJcclxuXHRcdFx0aWYgKG1zZy50byA9PT0gYGRvbWFpbi1pZHA6Ly8ke2RvbWFpbn1gKSB7XHJcblx0XHRcdFx0dGhpcy5yZXF1ZXN0VG9JZHAobXNnKVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cclxuXHRcdHRoaXMuX3NlbmRTdGF0dXMoJ2NyZWF0ZWQnKVxyXG5cdH1cclxuXHJcblx0X3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xyXG5cdFx0bGV0IF90aGlzID0gdGhpc1xyXG5cclxuXHRcdGNvbnNvbGUubG9nKCdbU2xhY2sgSWRwIFByb3h5IHN0YXR1cyBjaGFuZ2VkXSB0byAnLCB2YWx1ZSlcclxuXHJcblx0XHRfdGhpcy5fc3RhdGUgPSB2YWx1ZVxyXG5cclxuXHRcdGxldCBtc2cgPSB7XHJcblx0XHRcdHR5cGU6ICd1cGRhdGUnLFxyXG5cdFx0XHRmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxyXG5cdFx0XHR0bzogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJyxcclxuXHRcdFx0Ym9keToge1xyXG5cdFx0XHRcdHZhbHVlOiB2YWx1ZVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHJlYXNvbikge1xyXG5cdFx0XHRtc2cuYm9keS5kZXNjID0gcmVhc29uXHJcblx0XHR9XHJcblxyXG5cdFx0X3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXHJcblx0ICovXHJcblx0cmVxdWVzdFRvSWRwKG1zZykge1xyXG5cdFx0bGV0IHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtc1xyXG5cclxuXHRcdHN3aXRjaCAobXNnLmJvZHkubWV0aG9kKSB7XHJcblx0XHRjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XHJcblx0XHRcdHRoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KVxyXG5cdFx0XHRcdC50aGVuKHZhbHVlID0+IHRoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpKVxyXG5cdFx0XHRcdC5jYXRjaChlcnJvciA9PiB0aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKSlcclxuXHRcdFx0YnJlYWtcclxuXHRcdGNhc2UgJ3ZhbGlkYXRlQXNzZXJ0aW9uJzpcclxuXHRcdFx0dGhpcy5yZXBseU1lc3NhZ2UobXNnLCB7aWRlbnRpdHk6ICdpZGVudGl0eUBpZHAuY29tJywgY29udGVudHM6ICdjb250ZW50J30pXHJcblx0XHRcdGJyZWFrXHJcblx0XHRkZWZhdWx0OlxyXG5cdFx0XHRicmVha1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0Z2VuZXJhdGVBc3NlcnRpb24gKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpICB7XHJcblxyXG5cdFx0Y29uc29sZS5sb2coJ2NvbnRlbnRzLT4nLCBjb250ZW50cylcclxuXHRcdGNvbnNvbGUubG9nKCdvcmlnaW4tPicsIG9yaWdpbilcclxuXHRcdGNvbnNvbGUubG9nKCdoaW50LT4nLCBoaW50KVxyXG5cclxuXHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG5cdFx0XHQvL3RoZSBoaW50IGZpZWxkIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBvYnRhaW5lZCBhZnRlciB0aGUgdXNlciBhdXRoZW50aWNhdGlvblxyXG5cdFx0XHQvLyBpZiB0aGUgaGludCBjb250ZW50IGlzIG5vdCBwcmVzZW50LCB0aGVuIHJlamVjdHMgdGhlIHZhbHVlIHdpdGggdGhlIFVSTCB0byBvcGVuIHRoZSBwYWdlIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlclxyXG5cdFx0XHRpZiAoIWhpbnQpIHtcclxuXHRcdFx0XHRsZXQgcmVxdWVzdFVybCA9YGh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbS9vL29hdXRoMi92Mi9hdXRoP3Njb3BlPWVtYWlsJTIwcHJvZmlsZSZzdGF0ZT0lMkZwcm9maWxlJnJlZGlyZWN0X3VyaT0ke2xvY2F0aW9uLnByb3RvY29sfS8vJHtsb2NhdGlvbi5ob3N0bmFtZX0mcmVzcG9uc2VfdHlwZT10b2tlbiZjbGllbnRfaWQ9ODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tYFxyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdmaXJzdCB1cmwgJywgcmVxdWVzdFVybCwgJ2RvbmUnKVxyXG5cdFx0XHRcdHJlamVjdCh7bmFtZTogJ0lkUExvZ2luRXJyb3InLCBsb2dpblVybDogcmVxdWVzdFVybH0pXHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bGV0IGFjY2Vzc1Rva2VuID0gdGhpcy5fdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKVxyXG5cdFx0XHRcdGxldCBleHBpcmVzID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCkgKyB0aGlzLl91cmxQYXJzZXIoaGludCwgJ2V4cGlyZXNfaW4nKVxyXG5cdFx0XHRcdGZldGNoKGBodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjEvdXNlcmluZm8/YWNjZXNzX3Rva2VuPSR7YWNjZXNzVG9rZW59YClcclxuXHRcdFx0XHRcdC50aGVuKHJlc191c2VyID0+IHJlc191c2VyLmpzb24oKSlcclxuXHRcdFx0XHRcdC50aGVuKGJvZHkgPT4ge1xyXG5cdFx0XHRcdFx0XHRsZXQgaW5mb1Rva2VuID0ge3BpY3R1cmU6IGJvZHkucGljdHVyZSwgZW1haWw6IGJvZHkuZW1haWwsIGZhbWlseV9uYW1lOiBib2R5LmZhbWlseV9uYW1lLCBnaXZlbl9uYW1lOiBib2R5LmdpdmVuX25hbWV9XHJcblx0XHRcdFx0XHRcdGxldCBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHt0b2tlbklEOiBhY2Nlc3NUb2tlbiwgZW1haWw6IGJvZHkuZW1haWwsIGlkOiBib2R5LmlkfSkpXHJcblx0XHRcdFx0XHRcdGxldCB0b1Jlc29sdmUgPSB7aW5mbzogeyBleHBpcmVzOiBleHBpcmVzIH0sIGFzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IHtkb21haW46IGRvbWFpbiwgcHJvdG9jb2w6ICdPQXV0aCAyLjAnfSwgaW5mb1Rva2VuOiBpbmZvVG9rZW4sIGludGVyd29ya2luZzoge2FjY2Vzc190b2tlbjogYWNjZXNzVG9rZW4sIGRvbWFpbjogZG9tYWluIH19XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKCdSRVNPTFZJTkcgVEhJUyBPQkpFQ1QnLCB0b1Jlc29sdmUpXHJcblx0XHRcdFx0XHRcdHJlc29sdmUodG9SZXNvbHZlKVxyXG5cdFx0XHRcdFx0fSkuY2F0Y2gocmVqZWN0KVxyXG5cdFx0XHR9XHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0X3VybFBhcnNlcih1cmwsIG5hbWUpIHtcclxuXHRcdG5hbWUgPSBuYW1lLnJlcGxhY2UoL1tcXFtdLywgJ1xcXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXFxdJylcclxuXHRcdGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJ1xyXG5cdFx0bGV0IHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpXHJcblx0XHRsZXQgcmVzdWx0cyA9IHJlZ2V4LmV4ZWModXJsKVxyXG5cdFx0aWYgKHJlc3VsdHMgPT09IG51bGwpXHJcblx0XHRcdHJldHVybiAnJ1xyXG5cdFx0ZWxzZVxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0c1sxXVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxyXG5cdCAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxyXG5cdCAqL1xyXG5cdHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XHJcblx0XHRsZXQgbWVzc2FnZSA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keToge2NvZGU6IDIwMCwgdmFsdWU6IHZhbHVlfX1cclxuXHJcblx0XHR0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSlcclxuXHR9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUbyBhY3RpdmF0ZSB0aGlzIHByb3RvY29sIHN0dWIsIHVzaW5nIHRoZSBzYW1lIG1ldGhvZCBmb3IgYWxsIHByb3Rvc3R1Yi5cclxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXHJcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcclxuXHRyZXR1cm4ge1xyXG5cdFx0bmFtZTogJ0lNU0lXUHJveHlTdHViJyxcclxuXHRcdGluc3RhbmNlOiBuZXcgSU1TSVdQcm94eVN0dWIodXJsLCBidXMsIGNvbmZpZylcclxuXHR9XHJcbn1cclxuXHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuLy4uL2Rldi1wcm90b3N0dWJzL3NyYy9pZHBwcm94eS9zaXAucmV0aGluay1wcm9qZWN0LmV1L0lNU0lXUHJveHlTdHViLmlkcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "33.30",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "constraints": {
      "browser": true,
      "onlyAccessToken": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = activate;\n\nvar _OAUTH = __webpack_require__(1);\n\nvar _Slack = __webpack_require__(2);\n\nvar _AbstractIdpProxyStub = __webpack_require__(3);\n\nvar _AbstractIdpProxyStub2 = _interopRequireDefault(_AbstractIdpProxyStub);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n* Slack Identity Provider Proxy Protocol Stub\r\n*/\nvar SlackProxyStub = function (_AbstractIdpProxyProt) {\n  _inherits(SlackProxyStub, _AbstractIdpProxyProt);\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function SlackProxyStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, SlackProxyStub);\n\n    config.idpUrl = 'domain-idp://slack.com';\n    config.idpProxy = _OAUTH.IdpProxy;\n    //     config.idpInfo = slackInfo;\n    config.domain = 'slack.com';\n    config.convertUserProfile = _Slack.convertUserProfile;\n    config.userInfoEndpoint = _Slack.userInfoEndpoint;\n    config.validateAssertionEndpoint = _Slack.validateAssertionEndpoint;\n    config.authorisationEndpoint = _Slack.authorisationEndpoint;\n    config.tokenEndpoint = _Slack.tokenEndpoint;\n    config.accessTokenAuthorisationEndpoint = _Slack.accessTokenAuthorisationEndpoint;\n    config.accessTokenEndpoint = _Slack.accessTokenEndpoint;\n    config.accessTokenInput = _Slack.accessTokenInput;\n    return _possibleConstructorReturn(this, (SlackProxyStub.__proto__ || Object.getPrototypeOf(SlackProxyStub)).call(this, runtimeProtoStubURL, bus, config));\n  }\n\n  return SlackProxyStub;\n}(_AbstractIdpProxyStub2.default);\n\n// export default IdpProxyProtoStub;\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nfunction activate(url, bus, config) {\n  return {\n    name: 'SlackProxyStub',\n    instance: new SlackProxyStub(url, bus, config)\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvc2xhY2svU2xhY2tQcm94eVN0dWIuaWRwLmpzPzJiMmUiXSwibmFtZXMiOlsiYWN0aXZhdGUiLCJTbGFja1Byb3h5U3R1YiIsInJ1bnRpbWVQcm90b1N0dWJVUkwiLCJidXMiLCJjb25maWciLCJpZHBVcmwiLCJpZHBQcm94eSIsIklkcFByb3h5IiwiZG9tYWluIiwiY29udmVydFVzZXJQcm9maWxlIiwidXNlckluZm9FbmRwb2ludCIsInZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQiLCJhdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJ0b2tlbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5JbnB1dCIsIkFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIiLCJ1cmwiLCJuYW1lIiwiaW5zdGFuY2UiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQThDMEJBLFE7O0FBOUMxQjs7QUFDQTs7QUFJQTs7Ozs7Ozs7Ozs7O0FBRUE7OztJQUdNQyxjOzs7QUFFRjs7Ozs7Ozs7QUFRRCwwQkFBWUMsbUJBQVosRUFBaUNDLEdBQWpDLEVBQXNDQyxNQUF0QyxFQUE4QztBQUFBOztBQUM1Q0EsV0FBT0MsTUFBUCxHQUFnQix3QkFBaEI7QUFDQUQsV0FBT0UsUUFBUCxHQUFrQkMsZUFBbEI7QUFDTDtBQUNLSCxXQUFPSSxNQUFQLEdBQWdCLFdBQWhCO0FBQ0FKLFdBQU9LLGtCQUFQLEdBQTRCQSx5QkFBNUI7QUFDQUwsV0FBT00sZ0JBQVAsR0FBMEJBLHVCQUExQjtBQUNBTixXQUFPTyx5QkFBUCxHQUFtQ0EsZ0NBQW5DO0FBQ0FQLFdBQU9RLHFCQUFQLEdBQStCQSw0QkFBL0I7QUFDQVIsV0FBT1MsYUFBUCxHQUF1QkEsb0JBQXZCO0FBQ0FULFdBQU9VLGdDQUFQLEdBQTBDQSx1Q0FBMUM7QUFDQVYsV0FBT1csbUJBQVAsR0FBNkJBLDBCQUE3QjtBQUNBWCxXQUFPWSxnQkFBUCxHQUEwQkEsdUJBQTFCO0FBWjRDLDJIQWF0Q2QsbUJBYnNDLEVBYWpCQyxHQWJpQixFQWFaQyxNQWJZO0FBYzdDOzs7RUF4QnlCYSw4Qjs7QUEyQjNCOztBQUVBOzs7Ozs7Ozs7QUFPZSxTQUFTakIsUUFBVCxDQUFrQmtCLEdBQWxCLEVBQXVCZixHQUF2QixFQUE0QkMsTUFBNUIsRUFBb0M7QUFDakQsU0FBTztBQUNMZSxVQUFNLGdCQUREO0FBRUxDLGNBQVUsSUFBSW5CLGNBQUosQ0FBbUJpQixHQUFuQixFQUF3QmYsR0FBeEIsRUFBNkJDLE1BQTdCO0FBRkwsR0FBUDtBQUlEIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0lkcFByb3h5fSBmcm9tIFwiLi4vT0FVVEhcIlxyXG5pbXBvcnQge2NvbnZlcnRVc2VyUHJvZmlsZSwgdXNlckluZm9FbmRwb2ludCwgXHJcbiAgYXV0aG9yaXNhdGlvbkVuZHBvaW50LCB0b2tlbkVuZHBvaW50LCBcclxuICBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCwgXHJcbiAgYWNjZXNzVG9rZW5FbmRwb2ludCwgYWNjZXNzVG9rZW5JbnB1dCwgdmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludH0gZnJvbSBcIi4vU2xhY2tcIlxyXG5pbXBvcnQgQWJzdHJhY3RJZHBQcm94eVByb3RvU3R1YiBmcm9tIFwiLi4vQWJzdHJhY3RJZHBQcm94eVN0dWJcIlxyXG5cclxuLyoqXHJcbiogU2xhY2sgSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YlxyXG4qL1xyXG5jbGFzcyBTbGFja1Byb3h5U3R1YiBleHRlbmRzIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIge1xyXG4gIFxyXG4gICAgLyoqXHJcbiAgICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXHJcbiAgICAqIFRoZSBjb25zdHJ1Y3RvciBhZGQgYSBsaXN0ZW5lciBpbiB0aGUgbWVzc2FnZUJ1cyByZWNlaXZlZCBhbmQgc3RhcnQgYSB3ZWIgd29ya2VyIHdpdGggdGhlIGlkcFByb3h5IHJlY2VpdmVkXHJcbiAgICAqXHJcbiAgICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICAgICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAgICAqL1xyXG4gICBjb25zdHJ1Y3RvcihydW50aW1lUHJvdG9TdHViVVJMLCBidXMsIGNvbmZpZykge1xyXG4gICAgIGNvbmZpZy5pZHBVcmwgPSAnZG9tYWluLWlkcDovL3NsYWNrLmNvbSc7XHJcbiAgICAgY29uZmlnLmlkcFByb3h5ID0gSWRwUHJveHk7XHJcbi8vICAgICBjb25maWcuaWRwSW5mbyA9IHNsYWNrSW5mbztcclxuICAgICBjb25maWcuZG9tYWluID0gJ3NsYWNrLmNvbSc7XHJcbiAgICAgY29uZmlnLmNvbnZlcnRVc2VyUHJvZmlsZSA9IGNvbnZlcnRVc2VyUHJvZmlsZTtcclxuICAgICBjb25maWcudXNlckluZm9FbmRwb2ludCA9IHVzZXJJbmZvRW5kcG9pbnQ7XHJcbiAgICAgY29uZmlnLnZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQgPSB2YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50O1xyXG4gICAgIGNvbmZpZy5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBhdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XHJcbiAgICAgY29uZmlnLnRva2VuRW5kcG9pbnQgPSB0b2tlbkVuZHBvaW50O1xyXG4gICAgIGNvbmZpZy5hY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50O1xyXG4gICAgIGNvbmZpZy5hY2Nlc3NUb2tlbkVuZHBvaW50ID0gYWNjZXNzVG9rZW5FbmRwb2ludDtcclxuICAgICBjb25maWcuYWNjZXNzVG9rZW5JbnB1dCA9IGFjY2Vzc1Rva2VuSW5wdXQ7XHJcbiAgICAgc3VwZXIocnVudGltZVByb3RvU3R1YlVSTCwgYnVzLCBjb25maWcpO1xyXG4gICB9XHJcbiAgfVxyXG4gIFxyXG4gIC8vIGV4cG9ydCBkZWZhdWx0IElkcFByb3h5UHJvdG9TdHViO1xyXG4gIFxyXG4gIC8qKlxyXG4gICAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxyXG4gICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxyXG4gICAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxyXG4gICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXHJcbiAgICovXHJcbiAgZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbmFtZTogJ1NsYWNrUHJveHlTdHViJyxcclxuICAgICAgaW5zdGFuY2U6IG5ldyBTbGFja1Byb3h5U3R1Yih1cmwsIGJ1cywgY29uZmlnKVxyXG4gICAgfTtcclxuICB9XHJcbiAgXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NsYWNrL1NsYWNrUHJveHlTdHViLmlkcC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n//let identities = {};\n//let nIdentity = 0;\n//let redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\nvar userInfoEndpoint = void 0;\nvar tokenEndpoint = void 0;\nvar authorisationEndpoint = void 0;\nvar domain = void 0;\nvar accessTokenEndpoint = void 0;\nvar accessTokenAuthorisationEndpoint = void 0;\n\n//function to parse the query string in the given URL to obatin certain values\nfunction urlParser(url, name) {\n  name = name.replace(/[\\[]/, '\\\\\\[').replace(/[\\]]/, '\\\\\\]');\n  var regexS = '[\\\\#&?]' + name + '=([^&#]*)';\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results === null) return '';else return results[1];\n}\n\nfunction sendHTTPRequest(method, url) {\n  var xhr = new XMLHttpRequest();\n  if ('withCredentials' in xhr) {\n    xhr.open(method, url, true);\n  } else if (typeof XDomainRequest != 'undefined') {\n    // Otherwise, check if XDomainRequest.\n    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n    xhr = new XDomainRequest();\n    xhr.open(method, url);\n  } else {\n    // Otherwise, CORS is not supported by the browser.\n    xhr = null;\n  }\n  return new Promise(function (resolve, reject) {\n    if (xhr) {\n      xhr.onreadystatechange = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var info = JSON.parse(xhr.responseText);\n            resolve(info);\n          } else if (xhr.status === 400) {\n            reject('There was an error processing the token');\n          } else {\n            reject('something else other than 200 was returned');\n          }\n        }\n      };\n      xhr.send();\n    } else {\n      reject('CORS not supported');\n    }\n  });\n}\n\nvar exchangeRefreshToken = function exchangeRefreshToken(refreshToken) {\n  var i = googleInfo;\n\n  var URL = i.tokenEndpoint + 'client_id=' + i.clientID + '&client_secret=' + i.clientSecret + '&refresh_token=' + refreshToken + '&grant_type=refresh_token';\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('POST', URL).then(function (info) {\n      resolve(info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar generateAssertionWithAccessToken = function generateAssertionWithAccessToken(contents, expires, info) {\n\n  return new Promise(function (resolve, reject) {\n    sendHTTPRequest('GET', userInfoEndpoint(info)).then(function (infoToken) {\n      console.log('[OAUTH2.generateAssertion] obtained user profile ', infoToken);\n\n      var assertion = btoa(JSON.stringify({ tokenID: info.access_token, tokenIDJSON: infoToken, publicKey: contents }));\n      console.log('[OAUTH2.generateAssertion] atob assertion:', atob(assertion));\n      var idpBundle = { domain: domain, protocol: 'OAUTH2' };\n\n      //TODO delete later the field infoToken, and delete the need in the example\n      var returnValue = { assertion: assertion, idp: idpBundle, expires: expires, userProfile: infoToken };\n\n      /*      identities[nIdentity] = returnValue;\r\n            ++nIdentity;\r\n      */\n      console.log('[OAUTH2.generateAssertion] returning: ', JSON.stringify(returnValue));\n\n      resolve(returnValue);\n    });\n  });\n};\n\nvar generateAssertionWithCodeToken = function generateAssertionWithCodeToken(contents, expires, hint) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(hint, 'code');\n\n    if (!code) reject('[OAUTH2.generateAssertionWithCode] code not returned by the authentication: ', hint);\n\n    sendHTTPRequest('POST', tokenEndpoint(code)).then(function (info) {\n\n      if (info.hasOwnProperty('access_token')) resolve(generateAssertionWithAccessToken(contents, expires, info));else reject('[OAUTH2.generateAssertionWithCode] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar getAccessTokenWithCodeToken = function getAccessTokenWithCodeToken(resources, login) {\n  return new Promise(function (resolve, reject) {\n    var code = urlParser(login, 'code');\n\n    if (!code) reject('[OAUTH2.getAccessTokenWithCodeToken] code not returned by the login result: ', login);\n\n    sendHTTPRequest('POST', accessTokenEndpoint(code)).then(function (info) {\n\n      if (info.hasOwnProperty('access_token')) {\n        var expires = getExpires(info);\n        resolve(accessTokenResult(resources, info.access_token, expires, info));\n      } else reject('[OAUTH2.getAccessTokenWithCodeToken] access token not returned in the exchange code result: ', info);\n    }, function (error) {\n      reject(error);\n    });\n  });\n};\n\nvar getExpires = exports.getExpires = function getExpires(url) {\n  var expires = urlParser(url, 'expires_in');\n\n  if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n  return expires;\n};\n\nvar accessTokenResult = function accessTokenResult(resources, accessToken, expires, input, refresh) {\n\n  var result = { domain: domain, resources: resources, accessToken: accessToken, expires: expires, input: input };\n\n  if (refresh) result.refresh = refresh;\n\n  return result;\n};\n\n/**\r\n* Identity Provider Proxy\r\n*/\nvar IdpProxy = exports.IdpProxy = {\n\n  /**\r\n  * Function to validate an identity Assertion received\r\n  * TODO add details of the implementation, and improve the implementation\r\n  *\r\n  * @param  {idpInfo}      Object information about IdP endpoints\r\n  * @param  {assertion}    Identity Assertion to be validated\r\n  * @param  {origin}       Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @return {Promise}      Returns a promise with the identity assertion validation result\r\n  */\n  validateAssertion: function validateAssertion(config, assertion, origin) {\n    console.info('[OAUTH2.validateAssertion] assertion: ', atob(assertion));\n    userInfoEndpoint = config.userInfoEndpoint;\n    domain = config.domain;\n\n    return new Promise(function (resolve, reject) {\n      //      let i = idpInfo;\n      var decodedContent = atob(assertion);\n      var content = JSON.parse(decodedContent);\n      sendHTTPRequest('GET', config.validateAssertionEndpoint({ access_token: content.tokenID, input: content.tokenIDJSON })).then(function (result) {\n        if (JSON.stringify(result) === JSON.stringify(content.tokenIDJSON)) {\n          //        if (result.hasOwnProperty('name')) {\n          resolve({ identity: config.convertUserProfile(result).id, contents: content.publicKey });\n        } else {\n          reject('invalid');\n        }\n      }).catch(function (err) {\n        reject(err);\n      });\n    });\n  },\n  /*\r\n    refreshAssertion: (identity) => {\r\n      //console.log('PROXY:refreshAssertion:oldIdentity', identity);\r\n      let i = googleInfo;\r\n  \r\n      return new Promise(function(resolve, reject) {\r\n        if (identity.info.refreshToken) {\r\n          exchangeRefreshToken(identity.info.refreshToken).then(function(value) {\r\n            let infoTokenURL = i.userinfo + value.access_token;\r\n            sendHTTPRequest('GET', infoTokenURL).then(function(infoToken) {\r\n  \r\n              let identityBundle = {accessToken: value.access_token, idToken: value.id_token, refreshToken: identity.info.refreshToken, tokenType: identity.info.tokenType, infoToken: infoToken};\r\n              let idTokenURL = i.tokenInfo + value.id_token;\r\n  \r\n              //obtain information about the user idToken\r\n              sendHTTPRequest('GET', idTokenURL).then(function(idToken) {\r\n  \r\n                identityBundle.tokenIDJSON = idToken;\r\n                identityBundle.expires = idToken.exp;\r\n                identityBundle.email = idToken.email;\r\n  \r\n                let oldIDToken = JSON.parse(atob(identity.assertion));\r\n                let oldIdTokenSplited = oldIDToken.tokenID.split('.');\r\n                let oldDecodedIDToken = JSON.parse(atob(oldIdTokenSplited[1]));\r\n                let idNonce = oldDecodedIDToken.nonce;\r\n  \r\n                let receivedIDToken = value.id_token;\r\n                let idTokenSplited = receivedIDToken.split('.');\r\n                let decodedIDToken = JSON.parse(atob(idTokenSplited[1]));\r\n  \r\n                decodedIDToken.nonce = idNonce;\r\n                let insertedNonce = btoa(JSON.stringify(decodedIDToken));\r\n                let newIDToken = idTokenSplited[0] + '.' +\r\n                                   insertedNonce + '.' +\r\n                                   idTokenSplited[2];\r\n  \r\n                let assertion = btoa(JSON.stringify({tokenID: newIDToken, tokenIDJSON: idToken}));\r\n                let idpBundle = {domain: 'google.com', protocol: 'OIDC'};\r\n  \r\n                //TODO delete later the field infoToken, and delete the need in the example\r\n                let returnValue = {assertion: assertion, idp: idpBundle, info: identityBundle, infoToken: infoToken};\r\n                //console.log('PROXY:refreshAssertion:newIdentity', returnValue);\r\n                resolve(returnValue);\r\n              });\r\n            });\r\n          });\r\n        }\r\n      });\r\n    },*/\n\n  /**\r\n  * Function to generate an identity Assertion\r\n  *\r\n  * @param  {idpInfo}      Object information about IdP endpoints\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {usernameHint} optional usernameHint parameter\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n  generateAssertion: function generateAssertion(config, contents, origin, hint) {\n    console.log('[OAUTH2.generateAssertion:config]', config);\n    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.generateAssertion:hint]', hint);\n    //    let i = idpInfo;\n    userInfoEndpoint = config.userInfoEndpoint;\n    tokenEndpoint = config.tokenEndpoint;\n    authorisationEndpoint = config.authorisationEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      if (!hint) {\n\n        //        console.log('[OAUTH2.generateAssertion] NO_HINT: rejecting with requestUrl ', requestUrl);\n\n        reject({ name: 'IdPLoginError', loginUrl: authorisationEndpoint(contents) });\n      } else {\n        // the request have already been made, so idpPRoxy will try to access the user information\n        var expires = urlParser(hint, 'expires_in');\n\n        if (expires) expires = expires + Math.floor(Date.now() / 1000);else expires = 3153600000 + Math.floor(Date.now() / 1000);\n\n        var accessToken = urlParser(hint, 'access_token');\n\n        if (accessToken) resolve(generateAssertionWithAccessToken(contents, expires, { access_token: accessToken }));else resolve(generateAssertionWithCodeToken(contents, expires, hint));\n      }\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\r\n  * Function to get an Access Token\r\n  *\r\n  * @param  {config}      Object information about IdP endpoints\r\n  * @param  {resources} Object contents includes information about the identity received\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n\n  getAccessTokenAuthorisationEndpoint: function getAccessTokenAuthorisationEndpoint(config, resources) {\n    console.log('[OAUTH2.getAccessTokenAuthorisationEndpoint:config]', config);\n    //    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    //    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.getAccessTokenAuthorisationEndpoint:resources]', resources);\n    //    let i = idpInfo;\n    accessTokenAuthorisationEndpoint = config.accessTokenAuthorisationEndpoint;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n\n      resolve(accessTokenAuthorisationEndpoint(resources));\n    }, function (e) {\n\n      reject(e);\n    });\n  },\n\n  /**\r\n  * Function to get an Access Token\r\n  *\r\n  * @param  {idpInfo}      Object information about IdP endpoints\r\n  * @param  {contents} The contents includes information about the identity received\r\n  * @param  {origin} Origin parameter that identifies the origin of the RTCPeerConnection\r\n  * @param  {login} optional login result\r\n  * @return {Promise} returns a promise with an identity assertion\r\n  */\n\n  getAccessToken: function getAccessToken(config, resources, login) {\n    console.log('[OAUTH2.getAccessToken:config]', config);\n    //    console.log('[OAUTH2.generateAssertion:contents]', contents);\n    //    console.log('[OAUTH2.generateAssertion:origin]', origin);\n    console.log('[OAUTH2.getAccessToken:login]', login);\n    //    let i = idpInfo;\n    accessTokenEndpoint = config.accessTokenEndpoint;\n    domain = config.domain;\n\n    var _this = undefined;\n    //start the login phase\n    return new Promise(function (resolve, reject) {\n      // the user is loggedin, try to extract the Access Token and its expires\n      var expires = getExpires(login);\n\n      var accessToken = urlParser(login, 'access_token');\n\n      if (accessToken) resolve(accessTokenResult(resources, accessToken, expires, login));else resolve(getAccessTokenWithCodeToken(resources, login));\n    }, function (e) {\n\n      reject(e);\n    });\n  }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvT0FVVEguanM/MDk0OSJdLCJuYW1lcyI6WyJ1c2VySW5mb0VuZHBvaW50IiwidG9rZW5FbmRwb2ludCIsImF1dGhvcmlzYXRpb25FbmRwb2ludCIsImRvbWFpbiIsImFjY2Vzc1Rva2VuRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCIsInVybFBhcnNlciIsInVybCIsIm5hbWUiLCJyZXBsYWNlIiwicmVnZXhTIiwicmVnZXgiLCJSZWdFeHAiLCJyZXN1bHRzIiwiZXhlYyIsInNlbmRIVFRQUmVxdWVzdCIsIm1ldGhvZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsIlhEb21haW5SZXF1ZXN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsImluZm8iLCJKU09OIiwicGFyc2UiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwiZXhjaGFuZ2VSZWZyZXNoVG9rZW4iLCJyZWZyZXNoVG9rZW4iLCJpIiwiZ29vZ2xlSW5mbyIsIlVSTCIsImNsaWVudElEIiwiY2xpZW50U2VjcmV0IiwidGhlbiIsImVycm9yIiwiZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4iLCJjb250ZW50cyIsImV4cGlyZXMiLCJpbmZvVG9rZW4iLCJjb25zb2xlIiwibG9nIiwiYXNzZXJ0aW9uIiwiYnRvYSIsInN0cmluZ2lmeSIsInRva2VuSUQiLCJhY2Nlc3NfdG9rZW4iLCJ0b2tlbklESlNPTiIsInB1YmxpY0tleSIsImF0b2IiLCJpZHBCdW5kbGUiLCJwcm90b2NvbCIsInJldHVyblZhbHVlIiwiaWRwIiwidXNlclByb2ZpbGUiLCJnZW5lcmF0ZUFzc2VydGlvbldpdGhDb2RlVG9rZW4iLCJoaW50IiwiY29kZSIsImhhc093blByb3BlcnR5IiwiZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuIiwicmVzb3VyY2VzIiwibG9naW4iLCJnZXRFeHBpcmVzIiwiYWNjZXNzVG9rZW5SZXN1bHQiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwiYWNjZXNzVG9rZW4iLCJpbnB1dCIsInJlZnJlc2giLCJyZXN1bHQiLCJJZHBQcm94eSIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiY29uZmlnIiwib3JpZ2luIiwiZGVjb2RlZENvbnRlbnQiLCJjb250ZW50IiwidmFsaWRhdGVBc3NlcnRpb25FbmRwb2ludCIsImlkZW50aXR5IiwiY29udmVydFVzZXJQcm9maWxlIiwiaWQiLCJjYXRjaCIsImVyciIsImdlbmVyYXRlQXNzZXJ0aW9uIiwiX3RoaXMiLCJsb2dpblVybCIsImdldEFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50IiwiZ2V0QWNjZXNzVG9rZW4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUlBLHlCQUFKO0FBQ0EsSUFBSUMsc0JBQUo7QUFDQSxJQUFJQyw4QkFBSjtBQUNBLElBQUlDLGVBQUo7QUFDQSxJQUFJQyw0QkFBSjtBQUNBLElBQUlDLHlDQUFKOztBQUVBO0FBQ0EsU0FBU0MsU0FBVCxDQUFtQkMsR0FBbkIsRUFBd0JDLElBQXhCLEVBQThCO0FBQzVCQSxTQUFPQSxLQUFLQyxPQUFMLENBQWEsTUFBYixFQUFxQixNQUFyQixFQUE2QkEsT0FBN0IsQ0FBcUMsTUFBckMsRUFBNkMsTUFBN0MsQ0FBUDtBQUNBLE1BQUlDLFNBQVMsWUFBWUYsSUFBWixHQUFtQixXQUFoQztBQUNBLE1BQUlHLFFBQVEsSUFBSUMsTUFBSixDQUFXRixNQUFYLENBQVo7QUFDQSxNQUFJRyxVQUFVRixNQUFNRyxJQUFOLENBQVdQLEdBQVgsQ0FBZDtBQUNBLE1BQUlNLFlBQVksSUFBaEIsRUFDRSxPQUFPLEVBQVAsQ0FERixLQUdFLE9BQU9BLFFBQVEsQ0FBUixDQUFQO0FBQ0g7O0FBRUQsU0FBU0UsZUFBVCxDQUF5QkMsTUFBekIsRUFBaUNU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QztBQUNBLFVBQUlxQixVQUFVd0IsV0FBV0QsS0FBWCxDQUFkOztBQUVBLFVBQUlPLGNBQWNwRSxVQUFVNkQsS0FBVixFQUFpQixjQUFqQixDQUFsQjs7QUFFQSxVQUFJTyxXQUFKLEVBQWlCcEQsUUFBUytDLGtCQUFrQkgsU0FBbEIsRUFBNkJRLFdBQTdCLEVBQTBDOUIsT0FBMUMsRUFBbUR1QixLQUFuRCxDQUFULEVBQWpCLEtBQ0s3QyxRQUFTMkMsNEJBQTRCQyxTQUE1QixFQUF1Q0MsS0FBdkMsQ0FBVDtBQUNSLEtBUk0sRUFRSixVQUFVMUMsQ0FBVixFQUFhOztBQUVkRixhQUFPRSxDQUFQO0FBQ0QsS0FYTSxDQUFQO0FBWUQ7O0FBOUxtQixDQUFmIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLy9sZXQgaWRlbnRpdGllcyA9IHt9O1xyXG4vL2xldCBuSWRlbnRpdHkgPSAwO1xyXG4vL2xldCByZWRpcmVjdFVSSSA9IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgIT09ICcnID8gJzonICsgbG9jYXRpb24ucG9ydCA6ICcnKTtcclxubGV0IHVzZXJJbmZvRW5kcG9pbnQ7XHJcbmxldCB0b2tlbkVuZHBvaW50O1xyXG5sZXQgYXV0aG9yaXNhdGlvbkVuZHBvaW50O1xyXG5sZXQgZG9tYWluO1xyXG5sZXQgYWNjZXNzVG9rZW5FbmRwb2ludDtcclxubGV0IGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50O1xyXG5cclxuLy9mdW5jdGlvbiB0byBwYXJzZSB0aGUgcXVlcnkgc3RyaW5nIGluIHRoZSBnaXZlbiBVUkwgdG8gb2JhdGluIGNlcnRhaW4gdmFsdWVzXHJcbmZ1bmN0aW9uIHVybFBhcnNlcih1cmwsIG5hbWUpIHtcclxuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXFxcXScpO1xyXG4gIGxldCByZWdleFMgPSAnW1xcXFwjJj9dJyArIG5hbWUgKyAnPShbXiYjXSopJztcclxuICBsZXQgcmVnZXggPSBuZXcgUmVnRXhwKHJlZ2V4Uyk7XHJcbiAgbGV0IHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XHJcbiAgaWYgKHJlc3VsdHMgPT09IG51bGwpXHJcbiAgICByZXR1cm4gJyc7XHJcbiAgZWxzZVxyXG4gICAgcmV0dXJuIHJlc3VsdHNbMV07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNlbmRIVFRQUmVxdWVzdChtZXRob2QsIHVybCkge1xyXG4gIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICBpZiAoJ3dpdGhDcmVkZW50aWFscycgaW4geGhyKSB7XHJcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XHJcbiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIC8vIE90aGVyd2lzZSwgY2hlY2sgaWYgWERvbWFpblJlcXVlc3QuXHJcbiAgICAvLyBYRG9tYWluUmVxdWVzdCBvbmx5IGV4aXN0cyBpbiBJRSwgYW5kIGlzIElFJ3Mgd2F5IG9mIG1ha2luZyBDT1JTIHJlcXVlc3RzLlxyXG4gICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XHJcbiAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLlxyXG4gICAgeGhyID0gbnVsbDtcclxuICB9XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGlmICh4aHIpIHtcclxuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmZvID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAoeGhyLnN0YXR1cyA9PT0gNDAwKSB7XHJcbiAgICAgICAgICAgIHJlamVjdCgnVGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHRva2VuJyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QoJ3NvbWV0aGluZyBlbHNlIG90aGVyIHRoYW4gMjAwIHdhcyByZXR1cm5lZCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuICAgICAgeGhyLnNlbmQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlamVjdCgnQ09SUyBub3Qgc3VwcG9ydGVkJyk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuXHJcbmxldCBleGNoYW5nZVJlZnJlc2hUb2tlbiA9IChmdW5jdGlvbiAocmVmcmVzaFRva2VuKSB7XHJcbiAgbGV0IGkgPSBnb29nbGVJbmZvO1xyXG5cclxuICBsZXQgVVJMID0gaS50b2tlbkVuZHBvaW50ICsgJ2NsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZnJlc2hfdG9rZW49JyArIHJlZnJlc2hUb2tlbiArICcmZ3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuJztcclxuXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIFVSTCkudGhlbihmdW5jdGlvbiAoaW5mbykge1xyXG4gICAgICByZXNvbHZlKGluZm8pO1xyXG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICB9KTtcclxuXHJcbiAgfSk7XHJcbn0pO1xyXG5cclxubGV0IGdlbmVyYXRlQXNzZXJ0aW9uV2l0aEFjY2Vzc1Rva2VuID0gKCBmdW5jdGlvbiAoY29udGVudHMsIGV4cGlyZXMsIGluZm8pIHtcclxuXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgdXNlckluZm9FbmRwb2ludChpbmZvKSkudGhlbihmdW5jdGlvbiAoaW5mb1Rva2VuKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uXSBvYnRhaW5lZCB1c2VyIHByb2ZpbGUgJywgaW5mb1Rva2VuKTtcclxuXHJcbiAgICAgIGxldCBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHsgdG9rZW5JRDogaW5mby5hY2Nlc3NfdG9rZW4sIHRva2VuSURKU09OOiBpbmZvVG9rZW4sIHB1YmxpY0tleTogY29udGVudHMgfSkpO1xyXG4gICAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbl0gYXRvYiBhc3NlcnRpb246JywgYXRvYihhc3NlcnRpb24pKTtcclxuICAgICAgbGV0IGlkcEJ1bmRsZSA9IHsgZG9tYWluOiBkb21haW4sIHByb3RvY29sOiAnT0FVVEgyJyB9O1xyXG5cclxuICAgICAgLy9UT0RPIGRlbGV0ZSBsYXRlciB0aGUgZmllbGQgaW5mb1Rva2VuLCBhbmQgZGVsZXRlIHRoZSBuZWVkIGluIHRoZSBleGFtcGxlXHJcbiAgICAgIGxldCByZXR1cm5WYWx1ZSA9IHsgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogaWRwQnVuZGxlLCBleHBpcmVzOiBleHBpcmVzLCB1c2VyUHJvZmlsZTogaW5mb1Rva2VuIH07XHJcblxyXG4vKiAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xyXG4gICAgICArK25JZGVudGl0eTtcclxuKi9cclxuICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIHJldHVybmluZzogJywgSlNPTi5zdHJpbmdpZnkocmV0dXJuVmFsdWUpKTtcclxuXHJcbiAgICAgIHJlc29sdmUocmV0dXJuVmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxubGV0IGdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVUb2tlbiA9IChmdW5jdGlvbiAoIGNvbnRlbnRzLCBleHBpcmVzLCBoaW50KSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGxldCBjb2RlID0gdXJsUGFyc2VyKGhpbnQsICdjb2RlJyk7XHJcblxyXG4gICAgaWYgKCFjb2RlKSByZWplY3QoJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25XaXRoQ29kZV0gY29kZSBub3QgcmV0dXJuZWQgYnkgdGhlIGF1dGhlbnRpY2F0aW9uOiAnLCBoaW50KTtcclxuXHJcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnUE9TVCcsIHRva2VuRW5kcG9pbnQoY29kZSkpLnRoZW4oZnVuY3Rpb24gKGluZm8pIHtcclxuXHJcbiAgICAgICAgaWYgKGluZm8uaGFzT3duUHJvcGVydHkoJ2FjY2Vzc190b2tlbicpKSBcclxuICAgICAgICAgIHJlc29sdmUoZ2VuZXJhdGVBc3NlcnRpb25XaXRoQWNjZXNzVG9rZW4oIGNvbnRlbnRzLCBleHBpcmVzLCBpbmZvKSApO1xyXG4gICAgICAgIGVsc2UgcmVqZWN0KCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uV2l0aENvZGVdIGFjY2VzcyB0b2tlbiBub3QgcmV0dXJuZWQgaW4gdGhlIGV4Y2hhbmdlIGNvZGUgcmVzdWx0OiAnLCBpbmZvKTtcclxuICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgfSk7XHJcblxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmxldCBnZXRBY2Nlc3NUb2tlbldpdGhDb2RlVG9rZW4gPSAoZnVuY3Rpb24gKHJlc291cmNlcywgbG9naW4pIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgbGV0IGNvZGUgPSB1cmxQYXJzZXIobG9naW4sICdjb2RlJyk7XHJcblxyXG4gICAgaWYgKCFjb2RlKSByZWplY3QoJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuXSBjb2RlIG5vdCByZXR1cm5lZCBieSB0aGUgbG9naW4gcmVzdWx0OiAnLCBsb2dpbik7XHJcblxyXG4gICAgICBzZW5kSFRUUFJlcXVlc3QoJ1BPU1QnLCBhY2Nlc3NUb2tlbkVuZHBvaW50KGNvZGUpKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XHJcblxyXG4gICAgICAgIGlmIChpbmZvLmhhc093blByb3BlcnR5KCdhY2Nlc3NfdG9rZW4nKSkge1xyXG4gICAgICAgICAgbGV0IGV4cGlyZXMgPSBnZXRFeHBpcmVzKGluZm8pO1xyXG4gICAgICAgICAgcmVzb2x2ZSAoYWNjZXNzVG9rZW5SZXN1bHQocmVzb3VyY2VzLCBpbmZvLmFjY2Vzc190b2tlbiwgZXhwaXJlcywgaW5mbykpO1xyXG4gICAgICAgIH0gZWxzZSByZWplY3QoJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuXSBhY2Nlc3MgdG9rZW4gbm90IHJldHVybmVkIGluIHRoZSBleGNoYW5nZSBjb2RlIHJlc3VsdDogJywgaW5mbyk7XHJcbiAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgIH0pO1xyXG5cclxuICB9KTtcclxufSk7XHJcblxyXG5leHBvcnQgbGV0IGdldEV4cGlyZXMgPSAoZnVuY3Rpb24gKHVybCkge1xyXG4gIGxldCBleHBpcmVzID0gdXJsUGFyc2VyKHVybCwgJ2V4cGlyZXNfaW4nKTtcclxuXHJcbiAgaWYgKGV4cGlyZXMpIGV4cGlyZXMgPSBleHBpcmVzICsgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XHJcbiAgZWxzZSBleHBpcmVzID0gMzE1MzYwMDAwMCArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG5cclxuICByZXR1cm4gZXhwaXJlcztcclxuXHJcbn0pO1xyXG5cclxuXHJcbmxldCBhY2Nlc3NUb2tlblJlc3VsdCA9IChmdW5jdGlvbiAocmVzb3VyY2VzLCBhY2Nlc3NUb2tlbiwgZXhwaXJlcywgaW5wdXQsIHJlZnJlc2gpIHtcclxuXHJcbiAgbGV0IHJlc3VsdCA9IHsgZG9tYWluOiBkb21haW4sIHJlc291cmNlczogcmVzb3VyY2VzLCBhY2Nlc3NUb2tlbjogYWNjZXNzVG9rZW4sIGV4cGlyZXM6IGV4cGlyZXMsIGlucHV0OiBpbnB1dCB9O1xyXG5cclxuICBpZiAocmVmcmVzaCkgcmVzdWx0LnJlZnJlc2ggPSByZWZyZXNoO1xyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG5cclxufSk7XHJcblxyXG4vKipcclxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eVxyXG4qL1xyXG5leHBvcnQgbGV0IElkcFByb3h5ID0ge1xyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxyXG4gICogVE9ETyBhZGQgZGV0YWlscyBvZiB0aGUgaW1wbGVtZW50YXRpb24sIGFuZCBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcclxuICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSAgICAgICBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSBpZGVudGl0eSBhc3NlcnRpb24gdmFsaWRhdGlvbiByZXN1bHRcclxuICAqL1xyXG4gIHZhbGlkYXRlQXNzZXJ0aW9uOiAoY29uZmlnLCBhc3NlcnRpb24sIG9yaWdpbikgPT4ge1xyXG4gICAgY29uc29sZS5pbmZvKCdbT0FVVEgyLnZhbGlkYXRlQXNzZXJ0aW9uXSBhc3NlcnRpb246ICcsIGF0b2IoYXNzZXJ0aW9uKSk7XHJcbiAgICB1c2VySW5mb0VuZHBvaW50ID0gY29uZmlnLnVzZXJJbmZvRW5kcG9pbnQ7XHJcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbi8vICAgICAgbGV0IGkgPSBpZHBJbmZvO1xyXG4gICAgICBsZXQgZGVjb2RlZENvbnRlbnQgPSBhdG9iKGFzc2VydGlvbik7XHJcbiAgICAgIGxldCBjb250ZW50ID0gSlNPTi5wYXJzZShkZWNvZGVkQ29udGVudCk7XHJcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgY29uZmlnLnZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQoe2FjY2Vzc190b2tlbjogY29udGVudC50b2tlbklELCBpbnB1dDogY29udGVudC50b2tlbklESlNPTiB9KSkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgIGlmIChKU09OLnN0cmluZ2lmeShyZXN1bHQpID09PSBKU09OLnN0cmluZ2lmeShjb250ZW50LnRva2VuSURKU09OKSkge1xyXG4gICAgICAgICAgLy8gICAgICAgIGlmIChyZXN1bHQuaGFzT3duUHJvcGVydHkoJ25hbWUnKSkge1xyXG4gICAgICAgICAgcmVzb2x2ZSh7IGlkZW50aXR5OiBjb25maWcuY29udmVydFVzZXJQcm9maWxlKHJlc3VsdCkuaWQsIGNvbnRlbnRzOiBjb250ZW50LnB1YmxpY0tleSB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdpbnZhbGlkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KS5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgLypcclxuICAgIHJlZnJlc2hBc3NlcnRpb246IChpZGVudGl0eSkgPT4ge1xyXG4gICAgICAvL2NvbnNvbGUubG9nKCdQUk9YWTpyZWZyZXNoQXNzZXJ0aW9uOm9sZElkZW50aXR5JywgaWRlbnRpdHkpO1xyXG4gICAgICBsZXQgaSA9IGdvb2dsZUluZm87XHJcbiAgXHJcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBpZiAoaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4pIHtcclxuICAgICAgICAgIGV4Y2hhbmdlUmVmcmVzaFRva2VuKGlkZW50aXR5LmluZm8ucmVmcmVzaFRva2VuKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuO1xyXG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbihpbmZvVG9rZW4pIHtcclxuICBcclxuICAgICAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7YWNjZXNzVG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgaWRUb2tlbjogdmFsdWUuaWRfdG9rZW4sIHJlZnJlc2hUb2tlbjogaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4sIHRva2VuVHlwZTogaWRlbnRpdHkuaW5mby50b2tlblR5cGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcclxuICAgICAgICAgICAgICBsZXQgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XHJcbiAgXHJcbiAgICAgICAgICAgICAgLy9vYnRhaW4gaW5mb3JtYXRpb24gYWJvdXQgdGhlIHVzZXIgaWRUb2tlblxyXG4gICAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbihpZFRva2VuKSB7XHJcbiAgXHJcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS50b2tlbklESlNPTiA9IGlkVG9rZW47XHJcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5leHBpcmVzID0gaWRUb2tlbi5leHA7XHJcbiAgICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5lbWFpbCA9IGlkVG9rZW4uZW1haWw7XHJcbiAgXHJcbiAgICAgICAgICAgICAgICBsZXQgb2xkSURUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZGVudGl0eS5hc3NlcnRpb24pKTtcclxuICAgICAgICAgICAgICAgIGxldCBvbGRJZFRva2VuU3BsaXRlZCA9IG9sZElEVG9rZW4udG9rZW5JRC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG9sZERlY29kZWRJRFRva2VuID0gSlNPTi5wYXJzZShhdG9iKG9sZElkVG9rZW5TcGxpdGVkWzFdKSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWROb25jZSA9IG9sZERlY29kZWRJRFRva2VuLm5vbmNlO1xyXG4gIFxyXG4gICAgICAgICAgICAgICAgbGV0IHJlY2VpdmVkSURUb2tlbiA9IHZhbHVlLmlkX3Rva2VuO1xyXG4gICAgICAgICAgICAgICAgbGV0IGlkVG9rZW5TcGxpdGVkID0gcmVjZWl2ZWRJRFRva2VuLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcclxuICBcclxuICAgICAgICAgICAgICAgIGRlY29kZWRJRFRva2VuLm5vbmNlID0gaWROb25jZTtcclxuICAgICAgICAgICAgICAgIGxldCBpbnNlcnRlZE5vbmNlID0gYnRvYShKU09OLnN0cmluZ2lmeShkZWNvZGVkSURUb2tlbikpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG5ld0lEVG9rZW4gPSBpZFRva2VuU3BsaXRlZFswXSArICcuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWROb25jZSArICcuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRUb2tlblNwbGl0ZWRbMl07XHJcbiAgXHJcbiAgICAgICAgICAgICAgICBsZXQgYXNzZXJ0aW9uID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dG9rZW5JRDogbmV3SURUb2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW59KSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaWRwQnVuZGxlID0ge2RvbWFpbjogJ2dvb2dsZS5jb20nLCBwcm90b2NvbDogJ09JREMnfTtcclxuICBcclxuICAgICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxyXG4gICAgICAgICAgICAgICAgbGV0IHJldHVyblZhbHVlID0ge2Fzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VufTtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246bmV3SWRlbnRpdHknLCByZXR1cm5WYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSwqL1xyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge2lkcEluZm99ICAgICAgT2JqZWN0IGluZm9ybWF0aW9uIGFib3V0IElkUCBlbmRwb2ludHNcclxuICAqIEBwYXJhbSAge2NvbnRlbnRzfSBUaGUgY29udGVudHMgaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGlkZW50aXR5IHJlY2VpdmVkXHJcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXHJcbiAgKiBAcGFyYW0gIHt1c2VybmFtZUhpbnR9IG9wdGlvbmFsIHVzZXJuYW1lSGludCBwYXJhbWV0ZXJcclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXHJcbiAgKi9cclxuICBnZW5lcmF0ZUFzc2VydGlvbjogKGNvbmZpZywgY29udGVudHMsIG9yaWdpbiwgaGludCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246Y29uZmlnXScsIGNvbmZpZyk7XHJcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpjb250ZW50c10nLCBjb250ZW50cyk7XHJcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZW5lcmF0ZUFzc2VydGlvbjpvcmlnaW5dJywgb3JpZ2luKTtcclxuICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmhpbnRdJywgaGludCk7XHJcbi8vICAgIGxldCBpID0gaWRwSW5mbztcclxuICAgIHVzZXJJbmZvRW5kcG9pbnQgPSBjb25maWcudXNlckluZm9FbmRwb2ludDtcclxuICAgIHRva2VuRW5kcG9pbnQgPSBjb25maWcudG9rZW5FbmRwb2ludDtcclxuICAgIGF1dGhvcmlzYXRpb25FbmRwb2ludCA9IGNvbmZpZy5hdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XHJcbiAgICBkb21haW4gPSBjb25maWcuZG9tYWluO1xyXG5cclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgaWYgKCFoaW50KSB7XHJcblxyXG4vLyAgICAgICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb25dIE5PX0hJTlQ6IHJlamVjdGluZyB3aXRoIHJlcXVlc3RVcmwgJywgcmVxdWVzdFVybCk7XHJcblxyXG4gICAgICAgIHJlamVjdCh7IG5hbWU6ICdJZFBMb2dpbkVycm9yJywgbG9naW5Vcmw6IGF1dGhvcmlzYXRpb25FbmRwb2ludChjb250ZW50cykgfSk7XHJcblxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIHRoZSByZXF1ZXN0IGhhdmUgYWxyZWFkeSBiZWVuIG1hZGUsIHNvIGlkcFBSb3h5IHdpbGwgdHJ5IHRvIGFjY2VzcyB0aGUgdXNlciBpbmZvcm1hdGlvblxyXG4gICAgICAgIGxldCBleHBpcmVzID0gdXJsUGFyc2VyKGhpbnQsICdleHBpcmVzX2luJyk7XHJcblxyXG4gICAgICAgIGlmIChleHBpcmVzKSBleHBpcmVzID0gZXhwaXJlcyArIE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xyXG4gICAgICAgIGVsc2UgZXhwaXJlcyA9IDMxNTM2MDAwMDAgKyBNYXRoLmZsb29yKERhdGUubm93KCkgLyAxMDAwKTtcclxuXHJcbiAgICAgICAgbGV0IGFjY2Vzc1Rva2VuID0gdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTtcclxuXHJcbiAgICAgICAgaWYgKGFjY2Vzc1Rva2VuKSByZXNvbHZlKCBnZW5lcmF0ZUFzc2VydGlvbldpdGhBY2Nlc3NUb2tlbihjb250ZW50cywgZXhwaXJlcyx7YWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbn0gKSApO1xyXG4gICAgICAgIGVsc2UgcmVzb2x2ZSggZ2VuZXJhdGVBc3NlcnRpb25XaXRoQ29kZVRva2VuKGNvbnRlbnRzLCBleHBpcmVzLCBoaW50KSApO1xyXG4gICAgICB9XHJcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgcmVqZWN0KGUpO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byBnZXQgYW4gQWNjZXNzIFRva2VuXHJcbiAgKlxyXG4gICogQHBhcmFtICB7Y29uZmlnfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXHJcbiAgKiBAcGFyYW0gIHtyZXNvdXJjZXN9IE9iamVjdCBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcclxuICAqIEByZXR1cm4ge1Byb21pc2V9IHJldHVybnMgYSBwcm9taXNlIHdpdGggYW4gaWRlbnRpdHkgYXNzZXJ0aW9uXHJcbiAgKi9cclxuXHJcbiAgZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6IChjb25maWcsIHJlc291cmNlcykgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ6Y29uZmlnXScsIGNvbmZpZyk7XHJcbi8vICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcclxuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XHJcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludDpyZXNvdXJjZXNdJywgcmVzb3VyY2VzKTtcclxuLy8gICAgbGV0IGkgPSBpZHBJbmZvO1xyXG4gICAgYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQ7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgICByZXNvbHZlKCBhY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChyZXNvdXJjZXMpKTtcclxuXHJcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgcmVqZWN0KGUpO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuICBcclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIGdldCBhbiBBY2Nlc3MgVG9rZW5cclxuICAqXHJcbiAgKiBAcGFyYW0gIHtpZHBJbmZvfSAgICAgIE9iamVjdCBpbmZvcm1hdGlvbiBhYm91dCBJZFAgZW5kcG9pbnRzXHJcbiAgKiBAcGFyYW0gIHtjb250ZW50c30gVGhlIGNvbnRlbnRzIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBpZGVudGl0eSByZWNlaXZlZFxyXG4gICogQHBhcmFtICB7b3JpZ2lufSBPcmlnaW4gcGFyYW1ldGVyIHRoYXQgaWRlbnRpZmllcyB0aGUgb3JpZ2luIG9mIHRoZSBSVENQZWVyQ29ubmVjdGlvblxyXG4gICogQHBhcmFtICB7bG9naW59IG9wdGlvbmFsIGxvZ2luIHJlc3VsdFxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cclxuICAqL1xyXG5cclxuICBnZXRBY2Nlc3NUb2tlbjogKGNvbmZpZywgcmVzb3VyY2VzLCBsb2dpbikgPT4ge1xyXG4gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2V0QWNjZXNzVG9rZW46Y29uZmlnXScsIGNvbmZpZyk7XHJcbi8vICAgIGNvbnNvbGUubG9nKCdbT0FVVEgyLmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcclxuLy8gICAgY29uc29sZS5sb2coJ1tPQVVUSDIuZ2VuZXJhdGVBc3NlcnRpb246b3JpZ2luXScsIG9yaWdpbik7XHJcbiAgICBjb25zb2xlLmxvZygnW09BVVRIMi5nZXRBY2Nlc3NUb2tlbjpsb2dpbl0nLCBsb2dpbik7XHJcbi8vICAgIGxldCBpID0gaWRwSW5mbztcclxuICAgIGFjY2Vzc1Rva2VuRW5kcG9pbnQgPSBjb25maWcuYWNjZXNzVG9rZW5FbmRwb2ludDtcclxuICAgIGRvbWFpbiA9IGNvbmZpZy5kb21haW47XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIC8vc3RhcnQgdGhlIGxvZ2luIHBoYXNlXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIC8vIHRoZSB1c2VyIGlzIGxvZ2dlZGluLCB0cnkgdG8gZXh0cmFjdCB0aGUgQWNjZXNzIFRva2VuIGFuZCBpdHMgZXhwaXJlc1xyXG4gICAgICAgIGxldCBleHBpcmVzID0gZ2V0RXhwaXJlcyhsb2dpbik7XHJcblxyXG4gICAgICAgIGxldCBhY2Nlc3NUb2tlbiA9IHVybFBhcnNlcihsb2dpbiwgJ2FjY2Vzc190b2tlbicpO1xyXG5cclxuICAgICAgICBpZiAoYWNjZXNzVG9rZW4pIHJlc29sdmUoIGFjY2Vzc1Rva2VuUmVzdWx0KHJlc291cmNlcywgYWNjZXNzVG9rZW4sIGV4cGlyZXMsIGxvZ2luKSApO1xyXG4gICAgICAgIGVsc2UgcmVzb2x2ZSggZ2V0QWNjZXNzVG9rZW5XaXRoQ29kZVRva2VuKHJlc291cmNlcywgbG9naW4pICk7XHJcbiAgICB9LCBmdW5jdGlvbiAoZSkge1xyXG5cclxuICAgICAgcmVqZWN0KGUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcblxyXG59O1xyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L09BVVRILmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertUserProfile = convertUserProfile;\nexports.accessTokenInput = accessTokenInput;\nexports.userInfoEndpoint = userInfoEndpoint;\nexports.validateAssertionEndpoint = validateAssertionEndpoint;\nexports.authorisationEndpoint = authorisationEndpoint;\nexports.tokenEndpoint = tokenEndpoint;\nexports.accessTokenAuthorisationEndpoint = accessTokenAuthorisationEndpoint;\nexports.accessTokenEndpoint = accessTokenEndpoint;\n/*\r\n\tSo that an application can use Slack's OAuth 2.0 authentication system for user login,\r\n  first is required to set up a project in the Facebook Developers Console (https://developers.facebook.com/apps/) \r\n  to obtain OAuth 2.0 credentials and set a redirect URI.\r\n */\nvar redirectURI = location.protocol + '//' + location.hostname + (location.port !== '' ? ':' + location.port : '');\n\n// Information to be used to obtain Slack Access Tokens to interwork with Slack chat serviço\n\nvar slackAccessTokenInfo = {\n  clientID: '11533603872.72434934356',\n  \"authorisationEndpoint\": \"https://slack.com/oauth/authorize?\",\n  \"userinfo\": \"https://slack.com/api/users.info?token=\",\n  \"type\": \"token\",\n  \"granted_scopes\": \"client\",\n  \"state\": \"state\",\n  \"accessType\": \"online\",\n  tokenEndpoint: 'https://slack.com/api/oauth.access?',\n  scope: 'client',\n  clientSecret: 'd427ef3c957d68a292dc7c4e20b78330'\n};\n\n// Information to be used to generate and validate Slack IdAssertions\n// ie Slack is used as an Identity Provider\n\nvar slackIdAssertionInfo = {\n  clientID: '11533603872.291565187299',\n  \"authorisationEndpoint\": \"https://slack.com/oauth/authorize?\",\n  \"userinfo\": \"https://slack.com/api/users.info?token=\",\n  \"type\": \"token\",\n  \"granted_scopes\": \"identity.basic,identity.avatar,identity.email\",\n  \"state\": \"state\",\n  \"accessType\": \"online\",\n  tokenEndpoint: 'https://slack.com/api/oauth.access?',\n  scope: 'client',\n  clientSecret: '721ee11eb303817b6b8ee41b785746de'\n};\n\n// function to convert Slack user profile info into standard reTHINK user profile object\n\nfunction convertUserProfile(userSlack) {\n\n  console.log('[SlackUserProfileConverter] ', userSlack);\n  var userProfile = userSlack.user.profile;\n  userProfile.userURL = 'user://slack.com/' + userSlack.user.name;\n\n  userProfile.picture = userProfile.image_original ? userProfile.image_original : userProfile.image_72;\n\n  userProfile.id = userSlack.user.id;\n\n  if (!userProfile.hasOwnProperty('preferred_username')) userProfile.preferred_username = userSlack.user.name;\n\n  userProfile.name = userSlack.user.name;\n\n  return userProfile;\n}\n\nfunction accessTokenInput(info) {\n\n  console.log('[Slack.getAccessTokenInput] from ', info);\n\n  return { user_id: info.user_id, team_id: info.team_id };\n}\n\nfunction userInfoEndpoint(info) {\n\n  return slackIdAssertionInfo.userinfo + info.access_token + '&user=' + info.user_id;\n}\n\nfunction validateAssertionEndpoint(info) {\n\n  return slackIdAssertionInfo.userinfo + info.access_token + '&user=' + info.input.user.id;\n}\n\nfunction authorisationEndpoint(nonce) {\n\n  var url = slackIdAssertionInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + slackIdAssertionInfo.type + '&client_id=' + slackIdAssertionInfo.clientID + '&scope=' + slackIdAssertionInfo.scope + '&access_type=' + slackIdAssertionInfo.accessType + '&state=' + nonce;\n  console.log('[Slack.authorisationEndpoint] ', url);\n  return url;\n}\n\nfunction tokenEndpoint(code) {\n\n  return slackIdAssertionInfo.tokenEndpoint + 'client_id=' + slackIdAssertionInfo.clientID + '&client_secret=' + slackIdAssertionInfo.clientSecret + '&code=' + code + '&redirect_uri=' + redirectURI;\n}\n\nfunction accessTokenAuthorisationEndpoint() {\n\n  var url = slackAccessTokenInfo.authorisationEndpoint + 'redirect_uri=' + redirectURI + '&response_type=' + slackAccessTokenInfo.type + '&client_id=' + slackAccessTokenInfo.clientID + '&scope=' + slackAccessTokenInfo.scope + '&access_type=' + slackAccessTokenInfo.accessType + '&state=' + slackAccessTokenInfo.state;\n  console.log('[Slack.accessTokenAuthorisationEndpoint] ', url);\n  return url;\n}\n\nfunction accessTokenEndpoint(code) {\n\n  return slackAccessTokenInfo.tokenEndpoint + 'client_id=' + slackAccessTokenInfo.clientID + '&client_secret=' + slackAccessTokenInfo.clientSecret + '&code=' + code + '&redirect_uri=' + redirectURI;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvc2xhY2svU2xhY2suanM/ZDhjNCJdLCJuYW1lcyI6WyJjb252ZXJ0VXNlclByb2ZpbGUiLCJhY2Nlc3NUb2tlbklucHV0IiwidXNlckluZm9FbmRwb2ludCIsInZhbGlkYXRlQXNzZXJ0aW9uRW5kcG9pbnQiLCJhdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJ0b2tlbkVuZHBvaW50IiwiYWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbkVuZHBvaW50IiwicmVkaXJlY3RVUkkiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwb3J0Iiwic2xhY2tBY2Nlc3NUb2tlbkluZm8iLCJjbGllbnRJRCIsInNjb3BlIiwiY2xpZW50U2VjcmV0Iiwic2xhY2tJZEFzc2VydGlvbkluZm8iLCJ1c2VyU2xhY2siLCJjb25zb2xlIiwibG9nIiwidXNlclByb2ZpbGUiLCJ1c2VyIiwicHJvZmlsZSIsInVzZXJVUkwiLCJuYW1lIiwicGljdHVyZSIsImltYWdlX29yaWdpbmFsIiwiaW1hZ2VfNzIiLCJpZCIsImhhc093blByb3BlcnR5IiwicHJlZmVycmVkX3VzZXJuYW1lIiwiaW5mbyIsInVzZXJfaWQiLCJ0ZWFtX2lkIiwidXNlcmluZm8iLCJhY2Nlc3NfdG9rZW4iLCJpbnB1dCIsIm5vbmNlIiwidXJsIiwidHlwZSIsImFjY2Vzc1R5cGUiLCJjb2RlIiwic3RhdGUiXSwibWFwcGluZ3MiOiI7Ozs7O1FBeUNnQkEsa0IsR0FBQUEsa0I7UUFtQkFDLGdCLEdBQUFBLGdCO1FBUUFDLGdCLEdBQUFBLGdCO1FBT0FDLHlCLEdBQUFBLHlCO1FBT0FDLHFCLEdBQUFBLHFCO1FBYUFDLGEsR0FBQUEsYTtRQVVBQyxnQyxHQUFBQSxnQztRQWFBQyxtQixHQUFBQSxtQjtBQXRIaEI7Ozs7O0FBS0EsSUFBSUMsY0FBY0MsU0FBU0MsUUFBVCxHQUFvQixJQUFwQixH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aUJBRkcsR0FFaUJHLHFCQUFxQkQsWUFGdEMsR0FHSCxRQUhHLEdBR1EwQixJQUhSLEdBSUgsZ0JBSkcsR0FJZ0JsQyxXQUp2QjtBQU1EOztBQUVNLFNBQVNGLGdDQUFULEdBQTRDOztBQUVqRCxNQUFJaUMsTUFBTTFCLHFCQUFxQlQscUJBQXJCLEdBQ04sZUFETSxHQUNZSSxXQURaLEdBRU4saUJBRk0sR0FFY0sscUJBQXFCMkIsSUFGbkMsR0FHTixhQUhNLEdBR1UzQixxQkFBcUJDLFFBSC9CLEdBSU4sU0FKTSxHQUlNRCxxQkFBcUJFLEtBSjNCLEdBS04sZUFMTSxHQUtZRixxQkFBcUI0QixVQUxqQyxHQU1OLFNBTk0sR0FNTTVCLHFCQUFxQjhCLEtBTnJDO0FBT0F4QixVQUFRQyxHQUFSLENBQVksMkNBQVosRUFBeURtQixHQUF6RDtBQUNBLFNBQU9BLEdBQVA7QUFDRDs7QUFFTSxTQUFTaEMsbUJBQVQsQ0FBNkJtQyxJQUE3QixFQUFtQzs7QUFFeEMsU0FBTzdCLHFCQUFxQlIsYUFBckIsR0FDSCxZQURHLEdBQ1lRLHFCQUFxQkMsUUFEakMsR0FFSCxpQkFGRyxHQUVpQkQscUJBQXFCRyxZQUZ0QyxHQUdILFFBSEcsR0FHUTBCLElBSFIsR0FJSCxnQkFKRyxHQUlnQmxDLFdBSnZCO0FBTUQiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcblx0U28gdGhhdCBhbiBhcHBsaWNhdGlvbiBjYW4gdXNlIFNsYWNrJ3MgT0F1dGggMi4wIGF1dGhlbnRpY2F0aW9uIHN5c3RlbSBmb3IgdXNlciBsb2dpbixcclxuICBmaXJzdCBpcyByZXF1aXJlZCB0byBzZXQgdXAgYSBwcm9qZWN0IGluIHRoZSBGYWNlYm9vayBEZXZlbG9wZXJzIENvbnNvbGUgKGh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vYXBwcy8pIFxyXG4gIHRvIG9idGFpbiBPQXV0aCAyLjAgY3JlZGVudGlhbHMgYW5kIHNldCBhIHJlZGlyZWN0IFVSSS5cclxuICovXHJcbmxldCByZWRpcmVjdFVSSSA9IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgKGxvY2F0aW9uLnBvcnQgIT09ICcnID8gJzonICsgbG9jYXRpb24ucG9ydCA6ICcnKTtcclxuXHJcbi8vIEluZm9ybWF0aW9uIHRvIGJlIHVzZWQgdG8gb2J0YWluIFNsYWNrIEFjY2VzcyBUb2tlbnMgdG8gaW50ZXJ3b3JrIHdpdGggU2xhY2sgY2hhdCBzZXJ2acOnb1xyXG5cclxubGV0IHNsYWNrQWNjZXNzVG9rZW5JbmZvID0ge1xyXG4gIGNsaWVudElEOiAnMTE1MzM2MDM4NzIuNzI0MzQ5MzQzNTYnLFxyXG4gIFwiYXV0aG9yaXNhdGlvbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly9zbGFjay5jb20vb2F1dGgvYXV0aG9yaXplP1wiLFxyXG4gIFwidXNlcmluZm9cIjogXCJodHRwczovL3NsYWNrLmNvbS9hcGkvdXNlcnMuaW5mbz90b2tlbj1cIixcclxuICBcInR5cGVcIjogXCJ0b2tlblwiLFxyXG4gIFwiZ3JhbnRlZF9zY29wZXNcIjogXCJjbGllbnRcIixcclxuICBcInN0YXRlXCI6IFwic3RhdGVcIixcclxuICBcImFjY2Vzc1R5cGVcIjogXCJvbmxpbmVcIixcclxuICB0b2tlbkVuZHBvaW50OiAnaHR0cHM6Ly9zbGFjay5jb20vYXBpL29hdXRoLmFjY2Vzcz8nLFxyXG4gIHNjb3BlOiAnY2xpZW50JyxcclxuICBjbGllbnRTZWNyZXQ6ICdkNDI3ZWYzYzk1N2Q2OGEyOTJkYzdjNGUyMGI3ODMzMCdcclxufTtcclxuXHJcbi8vIEluZm9ybWF0aW9uIHRvIGJlIHVzZWQgdG8gZ2VuZXJhdGUgYW5kIHZhbGlkYXRlIFNsYWNrIElkQXNzZXJ0aW9uc1xyXG4vLyBpZSBTbGFjayBpcyB1c2VkIGFzIGFuIElkZW50aXR5IFByb3ZpZGVyXHJcblxyXG5sZXQgc2xhY2tJZEFzc2VydGlvbkluZm8gPSB7XHJcbiAgY2xpZW50SUQ6ICcxMTUzMzYwMzg3Mi4yOTE1NjUxODcyOTknLFxyXG4gIFwiYXV0aG9yaXNhdGlvbkVuZHBvaW50XCI6IFwiaHR0cHM6Ly9zbGFjay5jb20vb2F1dGgvYXV0aG9yaXplP1wiLFxyXG4gIFwidXNlcmluZm9cIjogXCJodHRwczovL3NsYWNrLmNvbS9hcGkvdXNlcnMuaW5mbz90b2tlbj1cIixcclxuICBcInR5cGVcIjogXCJ0b2tlblwiLFxyXG4gIFwiZ3JhbnRlZF9zY29wZXNcIjogXCJpZGVudGl0eS5iYXNpYyxpZGVudGl0eS5hdmF0YXIsaWRlbnRpdHkuZW1haWxcIixcclxuICBcInN0YXRlXCI6IFwic3RhdGVcIixcclxuICBcImFjY2Vzc1R5cGVcIjogXCJvbmxpbmVcIixcclxuICB0b2tlbkVuZHBvaW50OiAnaHR0cHM6Ly9zbGFjay5jb20vYXBpL29hdXRoLmFjY2Vzcz8nLFxyXG4gIHNjb3BlOiAnY2xpZW50JyxcclxuICBjbGllbnRTZWNyZXQ6ICc3MjFlZTExZWIzMDM4MTdiNmI4ZWU0MWI3ODU3NDZkZSdcclxufTtcclxuXHJcblxyXG4vLyBmdW5jdGlvbiB0byBjb252ZXJ0IFNsYWNrIHVzZXIgcHJvZmlsZSBpbmZvIGludG8gc3RhbmRhcmQgcmVUSElOSyB1c2VyIHByb2ZpbGUgb2JqZWN0XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFVzZXJQcm9maWxlKHVzZXJTbGFjaykge1xyXG5cclxuXHJcbiAgY29uc29sZS5sb2coJ1tTbGFja1VzZXJQcm9maWxlQ29udmVydGVyXSAnLCB1c2VyU2xhY2spO1xyXG4gIGxldCB1c2VyUHJvZmlsZSA9IHVzZXJTbGFjay51c2VyLnByb2ZpbGU7XHJcbiAgdXNlclByb2ZpbGUudXNlclVSTCA9ICd1c2VyOi8vc2xhY2suY29tLycgKyB1c2VyU2xhY2sudXNlci5uYW1lO1xyXG5cclxuICB1c2VyUHJvZmlsZS5waWN0dXJlID0gKHVzZXJQcm9maWxlLmltYWdlX29yaWdpbmFsKSA/IHVzZXJQcm9maWxlLmltYWdlX29yaWdpbmFsIDogdXNlclByb2ZpbGUuaW1hZ2VfNzI7XHJcblxyXG4gIHVzZXJQcm9maWxlLmlkID0gdXNlclNsYWNrLnVzZXIuaWQ7XHJcblxyXG4gIGlmICghdXNlclByb2ZpbGUuaGFzT3duUHJvcGVydHkoJ3ByZWZlcnJlZF91c2VybmFtZScpKVxyXG4gICAgdXNlclByb2ZpbGUucHJlZmVycmVkX3VzZXJuYW1lID0gdXNlclNsYWNrLnVzZXIubmFtZTtcclxuXHJcbiAgdXNlclByb2ZpbGUubmFtZSA9IHVzZXJTbGFjay51c2VyLm5hbWU7XHJcblxyXG4gIHJldHVybiB1c2VyUHJvZmlsZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjY2Vzc1Rva2VuSW5wdXQoaW5mbykge1xyXG5cclxuXHJcbiAgY29uc29sZS5sb2coJ1tTbGFjay5nZXRBY2Nlc3NUb2tlbklucHV0XSBmcm9tICcsIGluZm8pO1xyXG5cclxuICByZXR1cm4ge3VzZXJfaWQ6IGluZm8udXNlcl9pZCwgdGVhbV9pZDogaW5mby50ZWFtX2lkIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VySW5mb0VuZHBvaW50KGluZm8pIHtcclxuXHJcbiAgcmV0dXJuIHNsYWNrSWRBc3NlcnRpb25JbmZvLnVzZXJpbmZvICsgaW5mby5hY2Nlc3NfdG9rZW5cclxuICAgKyAnJnVzZXI9JyArIGluZm8udXNlcl9pZDtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUFzc2VydGlvbkVuZHBvaW50KGluZm8pIHtcclxuXHJcbiAgcmV0dXJuIHNsYWNrSWRBc3NlcnRpb25JbmZvLnVzZXJpbmZvICsgaW5mby5hY2Nlc3NfdG9rZW5cclxuICAgKyAnJnVzZXI9JyArIGluZm8uaW5wdXQudXNlci5pZDtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhdXRob3Jpc2F0aW9uRW5kcG9pbnQobm9uY2UpIHtcclxuXHJcbiAgbGV0IHVybCA9IHNsYWNrSWRBc3NlcnRpb25JbmZvLmF1dGhvcmlzYXRpb25FbmRwb2ludCBcclxuICAgICsgJ3JlZGlyZWN0X3VyaT0nICsgcmVkaXJlY3RVUklcclxuICAgICsgJyZyZXNwb25zZV90eXBlPScgKyBzbGFja0lkQXNzZXJ0aW9uSW5mby50eXBlXHJcbiAgICArICcmY2xpZW50X2lkPScgKyBzbGFja0lkQXNzZXJ0aW9uSW5mby5jbGllbnRJRFxyXG4gICAgKyAnJnNjb3BlPScgKyBzbGFja0lkQXNzZXJ0aW9uSW5mby5zY29wZVxyXG4gICAgKyAnJmFjY2Vzc190eXBlPScgKyBzbGFja0lkQXNzZXJ0aW9uSW5mby5hY2Nlc3NUeXBlXHJcbiAgICArICcmc3RhdGU9JyArIG5vbmNlO1xyXG4gIGNvbnNvbGUubG9nKCdbU2xhY2suYXV0aG9yaXNhdGlvbkVuZHBvaW50XSAnLCB1cmwpO1xyXG4gIHJldHVybiB1cmw7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b2tlbkVuZHBvaW50KGNvZGUpIHtcclxuXHJcbiAgcmV0dXJuIHNsYWNrSWRBc3NlcnRpb25JbmZvLnRva2VuRW5kcG9pbnQgXHJcbiAgICArICdjbGllbnRfaWQ9JyArIHNsYWNrSWRBc3NlcnRpb25JbmZvLmNsaWVudElEXHJcbiAgICArICcmY2xpZW50X3NlY3JldD0nICsgc2xhY2tJZEFzc2VydGlvbkluZm8uY2xpZW50U2VjcmV0XHJcbiAgICArICcmY29kZT0nICsgY29kZSBcclxuICAgICsgJyZyZWRpcmVjdF91cmk9JyArIHJlZGlyZWN0VVJJO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFjY2Vzc1Rva2VuQXV0aG9yaXNhdGlvbkVuZHBvaW50KCkge1xyXG5cclxuICBsZXQgdXJsID0gc2xhY2tBY2Nlc3NUb2tlbkluZm8uYXV0aG9yaXNhdGlvbkVuZHBvaW50IFxyXG4gICAgKyAncmVkaXJlY3RfdXJpPScgKyByZWRpcmVjdFVSSVxyXG4gICAgKyAnJnJlc3BvbnNlX3R5cGU9JyArIHNsYWNrQWNjZXNzVG9rZW5JbmZvLnR5cGVcclxuICAgICsgJyZjbGllbnRfaWQ9JyArIHNsYWNrQWNjZXNzVG9rZW5JbmZvLmNsaWVudElEXHJcbiAgICArICcmc2NvcGU9JyArIHNsYWNrQWNjZXNzVG9rZW5JbmZvLnNjb3BlXHJcbiAgICArICcmYWNjZXNzX3R5cGU9JyArIHNsYWNrQWNjZXNzVG9rZW5JbmZvLmFjY2Vzc1R5cGVcclxuICAgICsgJyZzdGF0ZT0nICsgc2xhY2tBY2Nlc3NUb2tlbkluZm8uc3RhdGU7XHJcbiAgY29uc29sZS5sb2coJ1tTbGFjay5hY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludF0gJywgdXJsKTtcclxuICByZXR1cm4gdXJsO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWNjZXNzVG9rZW5FbmRwb2ludChjb2RlKSB7XHJcblxyXG4gIHJldHVybiBzbGFja0FjY2Vzc1Rva2VuSW5mby50b2tlbkVuZHBvaW50IFxyXG4gICAgKyAnY2xpZW50X2lkPScgKyBzbGFja0FjY2Vzc1Rva2VuSW5mby5jbGllbnRJRFxyXG4gICAgKyAnJmNsaWVudF9zZWNyZXQ9JyArIHNsYWNrQWNjZXNzVG9rZW5JbmZvLmNsaWVudFNlY3JldFxyXG4gICAgKyAnJmNvZGU9JyArIGNvZGUgXHJcbiAgICArICcmcmVkaXJlY3RfdXJpPScgKyByZWRpcmVjdFVSSTtcclxuXHJcbn1cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vLi4vZGV2LXByb3Rvc3R1YnMvc3JjL2lkcHByb3h5L3NsYWNrL1NsYWNrLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar IdpProxy = void 0;\nvar idpInfo = void 0;\nvar convertUserProfile = void 0;\nvar userInfoEndpoint = void 0;\nvar accessTokenInput = void 0;\n\n/**\r\n* Abstract Identity Provider Proxy Protocol Stub to be extended by real Idp Proxies\r\n*/\n\nvar AbstractIdpProxyProtoStub = function () {\n\n  /**\r\n  * Constructor of the IdpProxy Stub\r\n  * The constructor add a listener in the messageBus received and start a web worker with the idpProxy received\r\n  *\r\n  * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n  * @param  {Message.Message}                           busPostMessage     configuration\r\n  * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n  */\n  function AbstractIdpProxyProtoStub(runtimeProtoStubURL, bus, config) {\n    _classCallCheck(this, AbstractIdpProxyProtoStub);\n\n    var _this = this;\n    _this.runtimeProtoStubURL = runtimeProtoStubURL;\n    _this.messageBus = bus;\n    _this.config = config;\n    IdpProxy = config.idpProxy;\n    convertUserProfile = config.convertUserProfile;\n    accessTokenInput = config.accessTokenInput;\n\n    console.log('[AbstractIdpProxy] constructor');\n\n    _this.messageBus.addListener('*', function (msg) {\n      if (msg.to === config.idpUrl) {\n\n        _this.requestToIdp(msg);\n      }\n    });\n    _this._sendStatus('created');\n  }\n\n  /**\r\n  * Function that see the intended method in the message received and call the respective function\r\n  *\r\n  * @param {message}  message received in the messageBus\r\n  */\n\n\n  _createClass(AbstractIdpProxyProtoStub, [{\n    key: 'requestToIdp',\n    value: function requestToIdp(msg) {\n      var _this = this;\n      var params = msg.body.params;\n      //console.info('requestToIdp:', msg.body.method);\n      console.info('[AbstractIdpProxyProtoStub] receiving request: ', msg);\n\n      switch (msg.body.method) {\n        case 'generateAssertion':\n          IdpProxy.generateAssertion(_this.config, params.contents, params.origin, params.usernameHint).then(function (value) {\n\n            value.userProfile = convertUserProfile(value.userProfile);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'validateAssertion':\n          //       console.info('validateAssertion');\n          IdpProxy.validateAssertion(_this.config, params.assertion, params.origin).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAssertion':\n          //     console.info('refreshAssertion');\n          IdpProxy.refreshAssertion(params.identity).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessTokenAuthorisationEndpoint':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessTokenAuthorisationEndpoint(_this.config, params.resources).then(function (value) {\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'getAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.getAccessToken(_this.config, params.resources, params.login).then(function (value) {\n            console.info('OIDC.getAccessToken result: ', value);\n            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        case 'refreshAccessToken':\n          //     console.info('getAccessToken');\n          IdpProxy.refreshAccessToken(_this.config, params.token).then(function (value) {\n            console.info('OIDC.refreshAccessToken result: ', value);\n            //            value.input = accessTokenInput(value.input);\n            _this.replyMessage(msg, value);\n          }, function (error) {\n            _this.replyMessage(msg, error);\n          });\n          break;\n        default:\n          break;\n      }\n    }\n\n    /**\r\n    * This function receives a message and a value. It replies the value to the sender of the message received\r\n    *\r\n    * @param  {message}   message received\r\n    * @param  {value}     value to include in the new message to send\r\n    */\n\n  }, {\n    key: 'replyMessage',\n    value: function replyMessage(msg, value) {\n      var _this = this;\n\n      var message = {\n        id: msg.id, type: 'response', to: msg.from, from: msg.to,\n        body: { code: 200, value: value }\n      };\n\n      console.log('[AbstractIdpProxyProtoStub.replyMessage] ', message);\n\n      _this.messageBus.postMessage(message);\n    }\n  }, {\n    key: '_sendStatus',\n    value: function _sendStatus(value, reason) {\n      var _this = this;\n\n      console.log('[AbstractIdpProxyProtoStub.sendStatus] ', value);\n\n      _this._state = value;\n\n      var msg = {\n        type: 'update',\n        from: _this.runtimeProtoStubURL,\n        to: _this.runtimeProtoStubURL + '/status',\n        body: {\n          value: value\n        }\n      };\n\n      if (reason) {\n        msg.body.desc = reason;\n      }\n\n      _this.messageBus.postMessage(msg);\n    }\n  }]);\n\n  return AbstractIdpProxyProtoStub;\n}();\n\n// export default IdpProxyProtoStub;\n\n/**\r\n * To activate this protocol stub, using the same method for all protostub.\r\n * @param  {URL.RuntimeURL}                            runtimeProtoStubURL runtimeProtoSubURL\r\n * @param  {Message.Message}                           busPostMessage     configuration\r\n * @param  {ProtoStubDescriptor.ConfigurationDataList} configuration      configuration\r\n * @return {Object} Object with name and instance of ProtoStub\r\n */\n\n\nexports.default = AbstractIdpProxyProtoStub;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvQWJzdHJhY3RJZHBQcm94eVN0dWIuanM/MzQ2YyJdLCJuYW1lcyI6WyJJZHBQcm94eSIsImlkcEluZm8iLCJjb252ZXJ0VXNlclByb2ZpbGUiLCJ1c2VySW5mb0VuZHBvaW50IiwiYWNjZXNzVG9rZW5JbnB1dCIsIkFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIiLCJydW50aW1lUHJvdG9TdHViVVJMIiwiYnVzIiwiY29uZmlnIiwiX3RoaXMiLCJtZXNzYWdlQnVzIiwiaWRwUHJveHkiLCJjb25zb2xlIiwibG9nIiwiYWRkTGlzdGVuZXIiLCJtc2ciLCJ0byIsImlkcFVybCIsInJlcXVlc3RUb0lkcCIsIl9zZW5kU3RhdHVzIiwicGFyYW1zIiwiYm9keSIsImluZm8iLCJtZXRob2QiLCJnZW5lcmF0ZUFzc2VydGlvbiIsImNvbnRlbnRzIiwib3JpZ2luIiwidXNlcm5hbWVIaW50IiwidGhlbiIsInZhbHVlIiwidXNlclByb2ZpbGUiLCJyZXBseU1lc3NhZ2UiLCJlcnJvciIsInZhbGlkYXRlQXNzZXJ0aW9uIiwiYXNzZXJ0aW9uIiwicmVmcmVzaEFzc2VydGlvbiIsImlkZW50aXR5IiwiZ2V0QWNjZXNzVG9rZW5BdXRob3Jpc2F0aW9uRW5kcG9pbnQiLCJyZXNvdXJjZXMiLCJnZXRBY2Nlc3NUb2tlbiIsImxvZ2luIiwiaW5wdXQiLCJyZWZyZXNoQWNjZXNzVG9rZW4iLCJ0b2tlbiIsIm1lc3NhZ2UiLCJpZCIsInR5cGUiLCJmcm9tIiwiY29kZSIsInBvc3RNZXNzYWdlIiwicmVhc29uIiwiX3N0YXRlIiwiZGVzYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLElBQUlBLGlCQUFKO0FBQ0EsSUFBSUMsZ0JBQUo7QUFDQSxJQUFJQywyQkFBSjtBQUNBLElBQUlDLHlCQUFKO0FBQ0EsSUFBSUMseUJBQUo7O0FBRUE7Ozs7SUFHTUMseUI7O0FBRUo7Ozs7Ozs7O0FBUUEscUNB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S0FqQixjQUFRQyxHQUFSLENBQVksMkNBQVosRUFBeUQrQixPQUF6RDs7QUFFQW5DLFlBQU1DLFVBQU4sQ0FBaUJ1QyxXQUFqQixDQUE2QkwsT0FBN0I7QUFDRDs7O2dDQUVXZixLLEVBQU9xQixNLEVBQVE7QUFDekIsVUFBSXpDLFFBQVEsSUFBWjs7QUFFQUcsY0FBUUMsR0FBUixDQUFZLHlDQUFaLEVBQXVEZ0IsS0FBdkQ7O0FBRUFwQixZQUFNMEMsTUFBTixHQUFldEIsS0FBZjs7QUFFQSxVQUFJZCxNQUFNO0FBQ1IrQixjQUFNLFFBREU7QUFFUkMsY0FBTXRDLE1BQU1ILG1CQUZKO0FBR1JVLFlBQUlQLE1BQU1ILG1CQUFOLEdBQTRCLFNBSHhCO0FBSVJlLGNBQU07QUFDSlEsaUJBQU9BO0FBREg7QUFKRSxPQUFWOztBQVNBLFVBQUlxQixNQUFKLEVBQVk7QUFDVm5DLFlBQUlNLElBQUosQ0FBUytCLElBQVQsR0FBZ0JGLE1BQWhCO0FBQ0Q7O0FBRUR6QyxZQUFNQyxVQUFOLENBQWlCdUMsV0FBakIsQ0FBNkJsQyxHQUE3QjtBQUNEOzs7Ozs7QUFHSDs7QUFFQTs7Ozs7Ozs7O2tCQU9lVix5QiIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IElkcFByb3h5O1xyXG5sZXQgaWRwSW5mbztcclxubGV0IGNvbnZlcnRVc2VyUHJvZmlsZTtcclxubGV0IHVzZXJJbmZvRW5kcG9pbnQ7XHJcbmxldCBhY2Nlc3NUb2tlbklucHV0O1xyXG5cclxuLyoqXHJcbiogQWJzdHJhY3QgSWRlbnRpdHkgUHJvdmlkZXIgUHJveHkgUHJvdG9jb2wgU3R1YiB0byBiZSBleHRlbmRlZCBieSByZWFsIElkcCBQcm94aWVzXHJcbiovXHJcbmNsYXNzIEFic3RyYWN0SWRwUHJveHlQcm90b1N0dWIge1xyXG5cclxuICAvKipcclxuICAqIENvbnN0cnVjdG9yIG9mIHRoZSBJZHBQcm94eSBTdHViXHJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxyXG4gICpcclxuICAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXHJcbiAgKiBAcGFyYW0gIHtQcm90b1N0dWJEZXNjcmlwdG9yLkNvbmZpZ3VyYXRpb25EYXRhTGlzdH0gY29uZmlndXJhdGlvbiAgICAgIGNvbmZpZ3VyYXRpb25cclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7XHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gYnVzO1xyXG4gICAgX3RoaXMuY29uZmlnID0gY29uZmlnO1xyXG4gICAgSWRwUHJveHkgPSBjb25maWcuaWRwUHJveHk7XHJcbiAgICBjb252ZXJ0VXNlclByb2ZpbGUgPSBjb25maWcuY29udmVydFVzZXJQcm9maWxlO1xyXG4gICAgYWNjZXNzVG9rZW5JbnB1dCA9IGNvbmZpZy5hY2Nlc3NUb2tlbklucHV0O1xyXG5cclxuXHJcbiAgICBjb25zb2xlLmxvZygnW0Fic3RyYWN0SWRwUHJveHldIGNvbnN0cnVjdG9yJyk7XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHtcclxuICAgICAgaWYgKG1zZy50byA9PT0gY29uZmlnLmlkcFVybCkge1xyXG5cclxuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0aGF0IHNlZSB0aGUgaW50ZW5kZWQgbWV0aG9kIGluIHRoZSBtZXNzYWdlIHJlY2VpdmVkIGFuZCBjYWxsIHRoZSByZXNwZWN0aXZlIGZ1bmN0aW9uXHJcbiAgKlxyXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xyXG4gICovXHJcbiAgcmVxdWVzdFRvSWRwKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBwYXJhbXMgPSBtc2cuYm9keS5wYXJhbXM7XHJcbiAgICAvL2NvbnNvbGUuaW5mbygncmVxdWVzdFRvSWRwOicsIG1zZy5ib2R5Lm1ldGhvZCk7XHJcbiAgICBjb25zb2xlLmluZm8oJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViXSByZWNlaXZpbmcgcmVxdWVzdDogJywgbXNnKTtcclxuXHJcbiAgICBzd2l0Y2ggKG1zZy5ib2R5Lm1ldGhvZCkge1xyXG4gICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XHJcbiAgICAgICAgSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb24oX3RoaXMuY29uZmlnLCBwYXJhbXMuY29udGVudHMsIHBhcmFtcy5vcmlnaW4sIHBhcmFtcy51c2VybmFtZUhpbnQpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuXHJcbiAgICAgICAgICAgIHZhbHVlLnVzZXJQcm9maWxlID0gY29udmVydFVzZXJQcm9maWxlKHZhbHVlLnVzZXJQcm9maWxlKTtcclxuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxyXG4gICAgICAgIC8vICAgICAgIGNvbnNvbGUuaW5mbygndmFsaWRhdGVBc3NlcnRpb24nKTtcclxuICAgICAgICBJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvbihfdGhpcy5jb25maWcsIHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOyB9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdyZWZyZXNoQXNzZXJ0aW9uJzpcclxuICAgICAgICAvLyAgICAgY29uc29sZS5pbmZvKCdyZWZyZXNoQXNzZXJ0aW9uJyk7XHJcbiAgICAgICAgSWRwUHJveHkucmVmcmVzaEFzc2VydGlvbihwYXJhbXMuaWRlbnRpdHkpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpOyB9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdnZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludCc6XHJcbiAgICAgICAgLy8gICAgIGNvbnNvbGUuaW5mbygnZ2V0QWNjZXNzVG9rZW4nKTtcclxuICAgICAgICBJZHBQcm94eS5nZXRBY2Nlc3NUb2tlbkF1dGhvcmlzYXRpb25FbmRwb2ludChfdGhpcy5jb25maWcsIHBhcmFtcy5yZXNvdXJjZXMpLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZ2V0QWNjZXNzVG9rZW4nOlxyXG4gICAgICAgIC8vICAgICBjb25zb2xlLmluZm8oJ2dldEFjY2Vzc1Rva2VuJyk7XHJcbiAgICAgICAgSWRwUHJveHkuZ2V0QWNjZXNzVG9rZW4oX3RoaXMuY29uZmlnLCBwYXJhbXMucmVzb3VyY2VzLCBwYXJhbXMubG9naW4pLnRoZW4oXHJcbiAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdPSURDLmdldEFjY2Vzc1Rva2VuIHJlc3VsdDogJywgdmFsdWUpO1xyXG4gICAgICAgICAgICB2YWx1ZS5pbnB1dCA9IGFjY2Vzc1Rva2VuSW5wdXQodmFsdWUuaW5wdXQpO1xyXG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XHJcbiAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgIGZ1bmN0aW9uIChlcnJvcikgeyBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7IH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdyZWZyZXNoQWNjZXNzVG9rZW4nOlxyXG4gICAgICAgIC8vICAgICBjb25zb2xlLmluZm8oJ2dldEFjY2Vzc1Rva2VuJyk7XHJcbiAgICAgICAgSWRwUHJveHkucmVmcmVzaEFjY2Vzc1Rva2VuKF90aGlzLmNvbmZpZywgcGFyYW1zLnRva2VuKS50aGVuKFxyXG4gICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnT0lEQy5yZWZyZXNoQWNjZXNzVG9rZW4gcmVzdWx0OiAnLCB2YWx1ZSk7XHJcbi8vICAgICAgICAgICAgdmFsdWUuaW5wdXQgPSBhY2Nlc3NUb2tlbklucHV0KHZhbHVlLmlucHV0KTtcclxuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xyXG4gICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICBmdW5jdGlvbiAoZXJyb3IpIHsgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpOyB9XHJcbiAgICAgICAgKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogVGhpcyBmdW5jdGlvbiByZWNlaXZlcyBhIG1lc3NhZ2UgYW5kIGEgdmFsdWUuIEl0IHJlcGxpZXMgdGhlIHZhbHVlIHRvIHRoZSBzZW5kZXIgb2YgdGhlIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqXHJcbiAgKiBAcGFyYW0gIHttZXNzYWdlfSAgIG1lc3NhZ2UgcmVjZWl2ZWRcclxuICAqIEBwYXJhbSAge3ZhbHVlfSAgICAgdmFsdWUgdG8gaW5jbHVkZSBpbiB0aGUgbmV3IG1lc3NhZ2UgdG8gc2VuZFxyXG4gICovXHJcbiAgcmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IG1lc3NhZ2UgPSB7XHJcbiAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxyXG4gICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHZhbHVlIH1cclxuICAgIH07XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnJlcGx5TWVzc2FnZV0gJywgbWVzc2FnZSk7XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViLnNlbmRTdGF0dXNdICcsIHZhbHVlKTtcclxuXHJcbiAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTtcclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAndXBkYXRlJyxcclxuICAgICAgZnJvbTogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCxcclxuICAgICAgdG86IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwgKyAnL3N0YXR1cycsXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAocmVhc29uKSB7XHJcbiAgICAgIG1zZy5ib2R5LmRlc2MgPSByZWFzb247XHJcbiAgICB9XHJcblxyXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xyXG4gIH1cclxufVxyXG5cclxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XHJcblxyXG4vKipcclxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXHJcbiAqIEBwYXJhbSAge1VSTC5SdW50aW1lVVJMfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMIHJ1bnRpbWVQcm90b1N1YlVSTFxyXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cclxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXHJcbiAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IHdpdGggbmFtZSBhbmQgaW5zdGFuY2Ugb2YgUHJvdG9TdHViXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBBYnN0cmFjdElkcFByb3h5UHJvdG9TdHViO1xyXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi8uLi9kZXYtcHJvdG9zdHVicy9zcmMvaWRwcHJveHkvQWJzdHJhY3RJZHBQcm94eVN0dWIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ })
/******/ ])["default"];
});",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "33.30",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}