{
  "IdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHRoaXMsIGZ1bmN0aW9uKCkgewpyZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlpOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJbDogZmFsc2UsCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkCi8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOwovKioqKioqLwovKioqKioqLyAJCS8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlczsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7Ci8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgewovKioqKioqLyAJCQkJY29uZmlndXJhYmxlOiBmYWxzZSwKLyoqKioqKi8gCQkJCWVudW1lcmFibGU6IHRydWUsCi8qKioqKiovIAkJCQlnZXQ6IGdldHRlcgovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkgewovKioqKioqLyAJCXZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgPwovKioqKioqLyAJCQlmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOgovKioqKioqLyAJCQlmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9OwovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTsKLyoqKioqKi8gCQlyZXR1cm4gZ2V0dGVyOwovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbAovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9OwovKioqKioqLwovKioqKioqLyAJLy8gX193ZWJwYWNrX3B1YmxpY19wYXRoX18KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ucCA9ICIiOwovKioqKioqLwovKioqKioqLyAJLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzCi8qKioqKiovIAlyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTsKLyoqKioqKi8gfSkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gKFsKLyogMCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CmV2YWwoIlxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBhY3RpdmF0ZTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIGlkZW50aXRpZXMgPSB7fTtcbnZhciBuSWRlbnRpdHkgPSAwO1xuXG4vKlxuXHRTbyB0aGF0IGFuIGFwcGxpY2F0aW9uIGNhbiB1c2UgR29vZ2xlJ3MgT0F1dGggMi4wIGF1dGhlbnRpY2F0aW9uIHN5c3RlbSBmb3IgdXNlciBsb2dpbixcblx0Zmlyc3QgaXMgcmVxdWlyZWQgdG8gc2V0IHVwIGEgcHJvamVjdCBpbiB0aGUgR29vZ2xlIERldmVsb3BlcnMgQ29uc29sZSB0byBvYnRhaW4gT0F1dGggMi4wIGNyZWRlbnRpYWxzIGFuZCBzZXQgYSByZWRpcmVjdCBVUkkuXG5cdEEgdGVzdCBhY2NvdW50IHdhcyBjcmVhdGVkIHRvIHNldCB0aGUgcHJvamVjdCBpbiB0aGUgR29vZ2xlIERldmVsb3BlcnMgQ29uc29sZSB0byBvYnRhaW4gT0F1dGggMi4wIGNyZWRlbnRpYWxzLFx0d2l0aCB0aGUgZm9sbG93aW5nIGNyZWRlbnRpYWxzOlxuICAgICAgXHR1c2VybmFtZTogb3BlbmlkdGVzdDEwQGdtYWlsLmNvbVxuICAgICAgICBwYXNzd29yZDogdGVzdE9wZW5JRDEwXG5cdFRvIGFkZCBtb3JlIFVSSSdzLCBmb2xsb3cgdGhlIHN0ZXBzOlxuXHQxwrogY2hvb3NlIHRoZSBwcm9qZWN0ICggY2FuIGJlIHRoZSBNeSBPcGVuSUQgUHJvamVjdClcdCBmcm9tICBodHRwczovL2NvbnNvbGUuZGV2ZWxvcGVycy5nb29nbGUuY29tL3Byb2plY3RzZWxlY3Rvci9hcGlzL2NyZWRlbnRpYWxzIHVzaW5nIHRoZSBjcmVkZW50aWFscyBwcm92aWRlZCBhYm92ZS5cblx0MsK6IE9wZW4gVGhlIENsaWVudCBXZWIgMSBsaXN0ZWQgaW4gT0F1dGggMi4wIENsaWVudCBJRCdzXG5cdDPCuiBBZGQgdGhlIFVSSSAgaW4gdGhlIGF1dGhvcml6ZWQgcmVkaXJlY3QgVVJJIHNlY3Rpb24uXG4gIDTCuiBjaGFuZ2UgdGhlIFJFRElSRUNUIHBhcmFtZXRlciBiZWxsb3cgd2l0aCB0aGUgcHJldGVuZGVkIFVSSVxuICovXG5cbnZhciBnb29nbGVJbmZvID0ge1xuICBjbGllbnRTZWNyZXQ6ICdYeDRyS3VjYjVaWVRhWGxjWlg5SExmWlcnLFxuICBjbGllbnRJRDogJzgwODMyOTU2NjAxMi10cXI4cW9oMTExOTQyZ2Qya2cwMDd0MHM4ZjI3N3JvaS5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbScsXG4gIHJlZGlyZWN0VVJJOiBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArIChsb2NhdGlvbi5wb3J0ICE9PSAnJyA/ICc6JyArIGxvY2F0aW9uLnBvcnQgOiAnJyksXG4gIGlzc3VlcjogJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsXG4gIHRva2VuRW5kcG9pbnQ6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjQvdG9rZW4/JyxcbiAgandrc1VyaTogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My9jZXJ0cz8nLFxuICBhdXRob3Jpc2F0aW9uRW5kcG9pbnQ6ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvYXV0aD8nLFxuICB1c2VyaW5mbzogJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My91c2VyaW5mbz9hY2Nlc3NfdG9rZW49JyxcbiAgdG9rZW5JbmZvOiAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbz9pZF90b2tlbj0nLFxuICBhY2Nlc3NUeXBlOiAnb2ZmbGluZScsXG4gIHR5cGU6ICdjb2RlIHRva2VuIGlkX3Rva2VuJyxcbiAgc2NvcGU6ICdvcGVuaWQlMjBlbWFpbCUyMHByb2ZpbGUnLFxuICBzdGF0ZTogJ3N0YXRlJ1xufTtcbi8qXG5sZXQgZ29vZ2xlSW5mbyA9IHtcbiAgY2xpZW50SUQ6ICAgICAgICAgICAgICAnODA4MzI5NTY2MDEyLXRxcjhxb2gxMTE5NDJnZDJrZzAwN3QwczhmMjc3cm9pLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyxcbiAgcmVkaXJlY3RVUkk6ICAgICAgICAgICAgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdG5hbWUgKyAobG9jYXRpb24ucG9ydCAhPT0gJycgPyAnOicgKyBsb2NhdGlvbi5wb3J0IDogJycgKSwgXG4gIGlzc3VlcjogICAgICAgICAgICAgICAgJ2h0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbScsXG4gIHRva2VuRW5kcG9pbnQ6ICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92NC90b2tlbj8nLFxuICBqd2tzVXJpOiAgICAgICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvY2VydHM/JyxcbiAgYXV0aG9yaXNhdGlvbkVuZHBvaW50OiAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGg/JyxcbiAgdXNlcmluZm86ICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nLFxuICB0b2tlbkluZm86ICAgICAgICAgICAgICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW5pbmZvP2lkX3Rva2VuPScsXG4gIGFjY2Vzc1R5cGU6ICAgICAgICAgICAgJ29ubGluZScsXG4gIHR5cGU6ICAgICAgICAgICAgICAgICAgJ3Rva2VuJyxcbiAgc2NvcGU6ICAgICAgICAgICAgICAgICAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC91c2VyaW5mby5wcm9maWxlJyxcbiAgc3RhdGU6ICAgICAgICAgICAgICAgICAnc3RhdGUnXG59OyovXG5cbi8vZnVuY3Rpb24gdG8gcGFyc2UgdGhlIHF1ZXJ5IHN0cmluZyBpbiB0aGUgZ2l2ZW4gVVJMIHRvIG9iYXRpbiBjZXJ0YWluIHZhbHVlc1xuZnVuY3Rpb24gdXJsUGFyc2VyKHVybCwgbmFtZSkge1xuICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXFxcXScpO1xuICB2YXIgcmVnZXhTID0gJ1tcXFxcIyY/XScgKyBuYW1lICsgJz0oW14mI10qKSc7XG4gIHZhciByZWdleCA9IG5ldyBSZWdFeHAocmVnZXhTKTtcbiAgdmFyIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG4gIGlmIChyZXN1bHRzID09PSBudWxsKSByZXR1cm4gJyc7ZWxzZSByZXR1cm4gcmVzdWx0c1sxXTtcbn1cblxuZnVuY3Rpb24gc2VuZEhUVFBSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgaWYgKCd3aXRoQ3JlZGVudGlhbHMnIGluIHhocikge1xuICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBPdGhlcndpc2UsIGNoZWNrIGlmIFhEb21haW5SZXF1ZXN0LlxuICAgIC8vIFhEb21haW5SZXF1ZXN0IG9ubHkgZXhpc3RzIGluIElFLCBhbmQgaXMgSUUncyB3YXkgb2YgbWFraW5nIENPUlMgcmVxdWVzdHMuXG4gICAgeGhyID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgeGhyLm9wZW4obWV0aG9kLCB1cmwpO1xuICB9IGVsc2Uge1xuICAgIC8vIE90aGVyd2lzZSwgQ09SUyBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLlxuICAgIHhociA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBpZiAoeGhyKSB7XG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgdmFyIGluZm8gPSBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgcmVzb2x2ZShpbmZvKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHhoci5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgICAgcmVqZWN0KCdUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdG9rZW4nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdzb21ldGhpbmcgZWxzZSBvdGhlciB0aGFuIDIwMCB3YXMgcmV0dXJuZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB4aHIuc2VuZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWplY3QoJ0NPUlMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuKiBGdW5jdGlvbiB0byBleGNoYW5nZSB0aGUgY29kZSByZWNlaXZlZCB0byB0aGUgaWQgVG9rZW4sIGFjY2VzcyB0b2tlbiBhbmQgYSByZWZyZXNoIHRva2VuXG4qXG4qL1xudmFyIGV4Y2hhbmdlQ29kZSA9IGZ1bmN0aW9uIGV4Y2hhbmdlQ29kZShjb2RlKSB7XG4gIHZhciBpID0gZ29vZ2xlSW5mbztcblxuICB2YXIgVVJMID0gaS50b2tlbkVuZHBvaW50ICsgJ2NvZGU9JyArIGNvZGUgKyAnJmNsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmY2xpZW50X3NlY3JldD0nICsgaS5jbGllbnRTZWNyZXQgKyAnJnJlZGlyZWN0X3VyaT0nICsgaS5yZWRpcmVjdFVSSSArICcmZ3JhbnRfdHlwZT1hdXRob3JpemF0aW9uX2NvZGUmYWNjZXNzX3R5cGU9JyArIGkuYWNjZXNzVHlwZTtcblxuICAvL2xldCBVUkwgPSA9IGkudG9rZW5FbmRwb2ludCArICdjbGllbnRfaWQ9JyArIGkuY2xpZW50SUQgKyAnJmNsaWVudF9zZWNyZXQ9JyArIGkuY2xpZW50U2VjcmV0ICsgJyZyZWZyZXNoX3Rva2VuPScgKyBjb2RlICsgJyZncmFudF90eXBlPXJlZnJlc2hfdG9rZW4nO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgVVJMKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmV4Y2hhbmdlQ29kZV0gcmV0dXJuZWQgaW5mbzogJywgaW5mbyk7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG52YXIgZXhjaGFuZ2VSZWZyZXNoVG9rZW4gPSBmdW5jdGlvbiBleGNoYW5nZVJlZnJlc2hUb2tlbihyZWZyZXNoVG9rZW4pIHtcbiAgdmFyIGkgPSBnb29nbGVJbmZvO1xuXG4gIHZhciBVUkwgPSBpLnRva2VuRW5kcG9pbnQgKyAnY2xpZW50X2lkPScgKyBpLmNsaWVudElEICsgJyZjbGllbnRfc2VjcmV0PScgKyBpLmNsaWVudFNlY3JldCArICcmcmVmcmVzaF90b2tlbj0nICsgcmVmcmVzaFRva2VuICsgJyZncmFudF90eXBlPXJlZnJlc2hfdG9rZW4nO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgc2VuZEhUVFBSZXF1ZXN0KCdQT1NUJywgVVJMKS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICByZXNvbHZlKGluZm8pO1xuICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKipcbiogSWRlbnRpdHkgUHJvdmlkZXIgUHJveHlcbiovXG52YXIgSWRwUHJveHkgPSBleHBvcnRzLklkcFByb3h5ID0ge1xuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHZhbGlkYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvbiByZWNlaXZlZFxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSB0aGUgaW1wbGVtZW50YXRpb25cbiAgKlxuICAqIEBwYXJhbSAge2Fzc2VydGlvbn0gICAgSWRlbnRpdHkgQXNzZXJ0aW9uIHRvIGJlIHZhbGlkYXRlZFxuICAqIEBwYXJhbSAge29yaWdpbn0gICAgICAgT3JpZ2luIHBhcmFtZXRlciB0aGF0IGlkZW50aWZpZXMgdGhlIG9yaWdpbiBvZiB0aGUgUlRDUGVlckNvbm5lY3Rpb25cbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgIFJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIGlkZW50aXR5IGFzc2VydGlvbiB2YWxpZGF0aW9uIHJlc3VsdFxuICAqL1xuICB2YWxpZGF0ZUFzc2VydGlvbjogZnVuY3Rpb24gdmFsaWRhdGVBc3NlcnRpb24oYXNzZXJ0aW9uLCBvcmlnaW4pIHtcbiAgICBjb25zb2xlLmluZm8oJ1tHb29nbGVJZHBQcm94eS52YWxpZGF0ZUFzc2VydGlvblByb3h5XSBhc3NlcnRpb246ICcsIGF0b2IoYXNzZXJ0aW9uKSk7XG4gICAgLy8gICAgY29uc29sZS5pbmZvKCd2YWxpZGF0ZUFzc2VydGlvblByb3h5OmF0b2IoYXNzZXJ0aW9uKScsIGF0b2IoYXNzZXJ0aW9uKSk7XG5cbiAgICAvL1RPRE8gY2hlY2sgdGhlIHZhbHVlcyB3aXRoIHRoZSBoYXNoIHJlY2VpdmVkXG4gICAgLy8gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgdmFyIGRlY29kZWRDb250ZW50MiA9IGF0b2IoYXNzZXJ0aW9uKTtcbiAgICB2YXIgY29udGVudCA9IEpTT04ucGFyc2UoZGVjb2RlZENvbnRlbnQyKTtcbiAgICB2YXIgaWRUb2tlblNwbGl0ZWQgPSBjb250ZW50LnRva2VuSUQuc3BsaXQoJy4nKTtcbiAgICB2YXIgaWRUb2tlbiA9IEpTT04ucGFyc2UoYXRvYihpZFRva2VuU3BsaXRlZFsxXSkpO1xuXG4gICAgLy9yZXNvbHZlKHtpZGVudGl0eTogaWRUb2tlbi5lbWFpbCwgY29udGVudHM6IGlkVG9rZW4ubm9uY2V9KTtcblxuICAgIC8vfSk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGkgPSBnb29nbGVJbmZvO1xuICAgICAgdmFyIGRlY29kZWRDb250ZW50ID0gYXRvYihhc3NlcnRpb24pO1xuICAgICAgdmFyIGNvbnRlbnQgPSBKU09OLnBhcnNlKGRlY29kZWRDb250ZW50KTtcbiAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaS50b2tlbkluZm8gKyBjb250ZW50LnRva2VuSUQpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkocmVzdWx0KSA9PT0gSlNPTi5zdHJpbmdpZnkoY29udGVudC50b2tlbklESlNPTikpIHtcbiAgICAgICAgICByZXNvbHZlKHsgaWRlbnRpdHk6IGNvbnRlbnQudG9rZW5JREpTT04uZW1haWwsIGNvbnRlbnRzOiBjb250ZW50LnRva2VuSURKU09OIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnaW52YWxpZCcpO1xuICAgICAgICB9XG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVmcmVzaEFzc2VydGlvbjogZnVuY3Rpb24gcmVmcmVzaEFzc2VydGlvbihpZGVudGl0eSkge1xuICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246b2xkSWRlbnRpdHknLCBpZGVudGl0eSk7XG4gICAgdmFyIGkgPSBnb29nbGVJbmZvO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikge1xuICAgICAgICBleGNoYW5nZVJlZnJlc2hUb2tlbihpZGVudGl0eS5pbmZvLnJlZnJlc2hUb2tlbikudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgaW5mb1Rva2VuVVJMID0gaS51c2VyaW5mbyArIHZhbHVlLmFjY2Vzc190b2tlbjtcbiAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGluZm9Ub2tlblVSTCkudGhlbihmdW5jdGlvbiAoaW5mb1Rva2VuKSB7XG5cbiAgICAgICAgICAgIHZhciBpZGVudGl0eUJ1bmRsZSA9IHsgYWNjZXNzVG9rZW46IHZhbHVlLmFjY2Vzc190b2tlbiwgaWRUb2tlbjogdmFsdWUuaWRfdG9rZW4sIHJlZnJlc2hUb2tlbjogaWRlbnRpdHkuaW5mby5yZWZyZXNoVG9rZW4sIHRva2VuVHlwZTogaWRlbnRpdHkuaW5mby50b2tlblR5cGUsIGluZm9Ub2tlbjogaW5mb1Rva2VuIH07XG4gICAgICAgICAgICB2YXIgaWRUb2tlblVSTCA9IGkudG9rZW5JbmZvICsgdmFsdWUuaWRfdG9rZW47XG5cbiAgICAgICAgICAgIC8vb2J0YWluIGluZm9ybWF0aW9uIGFib3V0IHRoZSB1c2VyIGlkVG9rZW5cbiAgICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaWRUb2tlblVSTCkudGhlbihmdW5jdGlvbiAoaWRUb2tlbikge1xuXG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLnRva2VuSURKU09OID0gaWRUb2tlbjtcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZXhwaXJlcyA9IGlkVG9rZW4uZXhwO1xuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS5lbWFpbCA9IGlkVG9rZW4uZW1haWw7XG5cbiAgICAgICAgICAgICAgdmFyIG9sZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRlbnRpdHkuYXNzZXJ0aW9uKSk7XG4gICAgICAgICAgICAgIHZhciBvbGRJZFRva2VuU3BsaXRlZCA9IG9sZElEVG9rZW4udG9rZW5JRC5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICB2YXIgb2xkRGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2Iob2xkSWRUb2tlblNwbGl0ZWRbMV0pKTtcbiAgICAgICAgICAgICAgdmFyIGlkTm9uY2UgPSBvbGREZWNvZGVkSURUb2tlbi5ub25jZTtcblxuICAgICAgICAgICAgICB2YXIgcmVjZWl2ZWRJRFRva2VuID0gdmFsdWUuaWRfdG9rZW47XG4gICAgICAgICAgICAgIHZhciBpZFRva2VuU3BsaXRlZCA9IHJlY2VpdmVkSURUb2tlbi5zcGxpdCgnLicpO1xuICAgICAgICAgICAgICB2YXIgZGVjb2RlZElEVG9rZW4gPSBKU09OLnBhcnNlKGF0b2IoaWRUb2tlblNwbGl0ZWRbMV0pKTtcblxuICAgICAgICAgICAgICBkZWNvZGVkSURUb2tlbi5ub25jZSA9IGlkTm9uY2U7XG4gICAgICAgICAgICAgIHZhciBpbnNlcnRlZE5vbmNlID0gYnRvYShKU09OLnN0cmluZ2lmeShkZWNvZGVkSURUb2tlbikpO1xuICAgICAgICAgICAgICB2YXIgbmV3SURUb2tlbiA9IGlkVG9rZW5TcGxpdGVkWzBdICsgJy4nICsgaW5zZXJ0ZWROb25jZSArICcuJyArIGlkVG9rZW5TcGxpdGVkWzJdO1xuXG4gICAgICAgICAgICAgIHZhciBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHsgdG9rZW5JRDogbmV3SURUb2tlbiwgdG9rZW5JREpTT046IGlkVG9rZW4gfSkpO1xuICAgICAgICAgICAgICB2YXIgaWRwQnVuZGxlID0geyBkb21haW46ICdnb29nbGUuY29tJywgcHJvdG9jb2w6ICdPSURDJyB9O1xuXG4gICAgICAgICAgICAgIC8vVE9ETyBkZWxldGUgbGF0ZXIgdGhlIGZpZWxkIGluZm9Ub2tlbiwgYW5kIGRlbGV0ZSB0aGUgbmVlZCBpbiB0aGUgZXhhbXBsZVxuICAgICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSB7IGFzc2VydGlvbjogYXNzZXJ0aW9uLCBpZHA6IGlkcEJ1bmRsZSwgaW5mbzogaWRlbnRpdHlCdW5kbGUsIGluZm9Ub2tlbjogaW5mb1Rva2VuIH07XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ1BST1hZOnJlZnJlc2hBc3NlcnRpb246bmV3SWRlbnRpdHknLCByZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVmFsdWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGdlbmVyYXRlIGFuIGlkZW50aXR5IEFzc2VydGlvblxuICAqIFRPRE8gYWRkIGRldGFpbHMgb2YgdGhlIGltcGxlbWVudGF0aW9uLCBhbmQgaW1wcm92ZSBpbXBsZW1lbnRhdGlvblxuICAqXG4gICogQHBhcmFtICB7Y29udGVudHN9IFRoZSBjb250ZW50cyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaWRlbnRpdHkgcmVjZWl2ZWRcbiAgKiBAcGFyYW0gIHtvcmlnaW59IE9yaWdpbiBwYXJhbWV0ZXIgdGhhdCBpZGVudGlmaWVzIHRoZSBvcmlnaW4gb2YgdGhlIFJUQ1BlZXJDb25uZWN0aW9uXG4gICogQHBhcmFtICB7dXNlcm5hbWVIaW50fSBvcHRpb25hbCB1c2VybmFtZUhpbnQgcGFyYW1ldGVyXG4gICogQHJldHVybiB7UHJvbWlzZX0gcmV0dXJucyBhIHByb21pc2Ugd2l0aCBhbiBpZGVudGl0eSBhc3NlcnRpb25cbiAgKi9cbiAgZ2VuZXJhdGVBc3NlcnRpb246IGZ1bmN0aW9uIGdlbmVyYXRlQXNzZXJ0aW9uKGNvbnRlbnRzLCBvcmlnaW4sIGhpbnQpIHtcbiAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uOmNvbnRlbnRzXScsIGNvbnRlbnRzKTtcbiAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uOm9yaWdpbl0nLCBvcmlnaW4pO1xuICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb246aGludF0nLCBoaW50KTtcbiAgICB2YXIgaSA9IGdvb2dsZUluZm87XG5cbiAgICAvL3N0YXJ0IHRoZSBsb2dpbiBwaGFzZVxuICAgIC8vVE9ETyBsYXRlciBzaG91bGQgYmUgZGVmaW5lZCBhIGJldHRlciBhcHByb2FjaFxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBpZiAoIWhpbnQpIHtcbiAgICAgICAgLyp0cnkge1xuICAgICAgICAgIGlmICh3aW5kb3cpIHtcbiAgICAgICAgICAgIHJlc29sdmUoJ3VybCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsqL1xuXG4gICAgICAgIHZhciByZXF1ZXN0VXJsID0gaS5hdXRob3Jpc2F0aW9uRW5kcG9pbnQgKyAnc2NvcGU9JyArIGkuc2NvcGUgKyAnJmNsaWVudF9pZD0nICsgaS5jbGllbnRJRCArICcmcmVkaXJlY3RfdXJpPScgKyBpLnJlZGlyZWN0VVJJICsgJyZyZXNwb25zZV90eXBlPWNvZGUnICsgLyppLnR5cGUgKyovJyZzdGF0ZT0nICsgaS5zdGF0ZSArICcmcHJvbXB0PWNvbnNlbnQmYWNjZXNzX3R5cGU9JyArIGkuYWNjZXNzVHlwZSArICcmbm9uY2U9JyArIGNvbnRlbnRzO1xuICAgICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uXSBOT19ISU5UOiByZWplY3Rpbmcgd2l0aCByZXF1ZXN0VXJsICcsIHJlcXVlc3RVcmwpO1xuXG4gICAgICAgIHJlamVjdCh7IG5hbWU6ICdJZFBMb2dpbkVycm9yJywgbG9naW5Vcmw6IHJlcXVlc3RVcmwgfSk7XG5cbiAgICAgICAgLy8gIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHRoZSByZXF1ZXN0IGhhdmUgYWxyZWFkeSBiZWVuIG1hZGUsIHNvIGlkcFBSb3h5IHdpbGwgZXhjaGFuZ2UgdGhlIHRva2VucyBhbG9uZyB0byB0aGUgaWRwLCB0byBvYnRhaW4gdGhlIGluZm9ybWF0aW9uIG5lY2Vzc2FyeVxuICAgICAgICB2YXIgYWNjZXNzVG9rZW4gPSB1cmxQYXJzZXIoaGludCwgJ2FjY2Vzc190b2tlbicpO1xuICAgICAgICB2YXIgaWRUb2tlbiA9IHVybFBhcnNlcihoaW50LCAnaWRfdG9rZW4nKTtcbiAgICAgICAgdmFyIGNvZGUgPSB1cmxQYXJzZXIoaGludCwgJ2NvZGUnKTtcblxuICAgICAgICAvL2NvbnNvbGUubG9nKCdHT09HTEVfUFJPWFlfSElOVDogJywgaGludCk7XG5cbiAgICAgICAgZXhjaGFuZ2VDb2RlKGNvZGUpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG5cbiAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlclxuICAgICAgICAgIHZhciBpbmZvVG9rZW5VUkwgPSBpLnVzZXJpbmZvICsgdmFsdWUuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgIHNlbmRIVFRQUmVxdWVzdCgnR0VUJywgaW5mb1Rva2VuVVJMKS50aGVuKGZ1bmN0aW9uIChpbmZvVG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb25dIG9idGFpbmVkIGluZm9Ub2tlbiAnLCBpbmZvVG9rZW4pO1xuXG4gICAgICAgICAgICB2YXIgaWRlbnRpdHlCdW5kbGUgPSB7IGFjY2Vzc1Rva2VuOiB2YWx1ZS5hY2Nlc3NfdG9rZW4sIGlkVG9rZW46IHZhbHVlLmlkX3Rva2VuLCByZWZyZXNoVG9rZW46IHZhbHVlLnJlZnJlc2hfdG9rZW4sIHRva2VuVHlwZTogdmFsdWUudG9rZW5fdHlwZSwgaW5mb1Rva2VuOiBpbmZvVG9rZW4gfTtcblxuICAgICAgICAgICAgdmFyIGlkVG9rZW5VUkwgPSBpLnRva2VuSW5mbyArIHZhbHVlLmlkX3Rva2VuO1xuXG4gICAgICAgICAgICAvL29idGFpbiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdXNlciBpZFRva2VuXG4gICAgICAgICAgICBzZW5kSFRUUFJlcXVlc3QoJ0dFVCcsIGlkVG9rZW5VUkwpLnRoZW4oZnVuY3Rpb24gKGlkVG9rZW4pIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tHb29nbGVJZHBQcm94eS5nZW5lcmF0ZUFzc2VydGlvbl0gb2J0YWluZWQgaWRUb2tlbiAnLCBpZFRva2VuKTtcblxuICAgICAgICAgICAgICBpZGVudGl0eUJ1bmRsZS50b2tlbklESlNPTiA9IGlkVG9rZW47XG4gICAgICAgICAgICAgIGlkZW50aXR5QnVuZGxlLmV4cGlyZXMgPSBpZFRva2VuLmV4cDtcbiAgICAgICAgICAgICAgaWRlbnRpdHlCdW5kbGUuZW1haWwgPSBpZFRva2VuLmVtYWlsO1xuXG4gICAgICAgICAgICAgIHZhciBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHsgdG9rZW5JRDogdmFsdWUuaWRfdG9rZW4sIHRva2VuSURKU09OOiBpZFRva2VuIH0pKTtcbiAgICAgICAgICAgICAgdmFyIGlkcEJ1bmRsZSA9IHsgZG9tYWluOiAnZ29vZ2xlLmNvbScsIHByb3RvY29sOiAnT0lEQycgfTtcblxuICAgICAgICAgICAgICAvL1RPRE8gZGVsZXRlIGxhdGVyIHRoZSBmaWVsZCBpbmZvVG9rZW4sIGFuZCBkZWxldGUgdGhlIG5lZWQgaW4gdGhlIGV4YW1wbGVcbiAgICAgICAgICAgICAgdmFyIHJldHVyblZhbHVlID0geyBhc3NlcnRpb246IGFzc2VydGlvbiwgaWRwOiBpZHBCdW5kbGUsIGluZm86IGlkZW50aXR5QnVuZGxlLCBpbmZvVG9rZW46IGluZm9Ub2tlbiB9O1xuXG4gICAgICAgICAgICAgIGlkZW50aXRpZXNbbklkZW50aXR5XSA9IHJldHVyblZhbHVlO1xuICAgICAgICAgICAgICArK25JZGVudGl0eTtcblxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5LmdlbmVyYXRlQXNzZXJ0aW9uXSByZXR1cm5pbmc6ICcsIEpTT04uc3RyaW5naWZ5KHJldHVyblZhbHVlKSk7XG5cbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZSkge1xuXG4gICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG5cbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qKlxuKiBJZGVudGl0eSBQcm92aWRlciBQcm94eSBQcm90b2NvbCBTdHViXG4qL1xuXG52YXIgSWRwUHJveHlQcm90b1N0dWIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgLyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSBpZHBQcm94eSByZWNlaXZlZFxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG4gIGZ1bmN0aW9uIElkcFByb3h5UHJvdG9TdHViKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElkcFByb3h5UHJvdG9TdHViKTtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWJVUkw7XG4gICAgX3RoaXMubWVzc2FnZUJ1cyA9IGJ1cztcbiAgICBfdGhpcy5jb25maWcgPSBjb25maWc7XG5cbiAgICBjb25zb2xlLmxvZygnW0dvb2dsZUlkcFByb3h5XSBjb25zdHJ1Y3RvcicpO1xuXG4gICAgX3RoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgIGlmIChtc2cudG8gPT09ICdkb21haW4taWRwOi8vZ29vZ2xlLmNvbScpIHtcblxuICAgICAgICBfdGhpcy5yZXF1ZXN0VG9JZHAobXNnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBfdGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuICAqXG4gICogQHBhcmFtIHttZXNzYWdlfSAgbWVzc2FnZSByZWNlaXZlZCBpbiB0aGUgbWVzc2FnZUJ1c1xuICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKElkcFByb3h5UHJvdG9TdHViLCBbe1xuICAgIGtleTogJ3JlcXVlc3RUb0lkcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RUb0lkcChtc2cpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICB2YXIgcGFyYW1zID0gbXNnLmJvZHkucGFyYW1zO1xuICAgICAgLy9jb25zb2xlLmluZm8oJ3JlcXVlc3RUb0lkcDonLCBtc2cuYm9keS5tZXRob2QpO1xuICAgICAgY29uc29sZS5pbmZvKCdbR29vZ2xlSWRwUHJveHldIHJlY2VpdmluZyByZXF1ZXN0OiAnLCBtc2cpO1xuXG4gICAgICBzd2l0Y2ggKG1zZy5ib2R5Lm1ldGhvZCkge1xuICAgICAgICBjYXNlICdnZW5lcmF0ZUFzc2VydGlvbic6XG4gICAgICAgICAgSWRwUHJveHkuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgdmFsdWUpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgX3RoaXMucmVwbHlNZXNzYWdlKG1zZywgZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd2YWxpZGF0ZUFzc2VydGlvbic6XG4gICAgICAgICAgLy8gICAgICAgY29uc29sZS5pbmZvKCd2YWxpZGF0ZUFzc2VydGlvbicpO1xuICAgICAgICAgIElkcFByb3h5LnZhbGlkYXRlQXNzZXJ0aW9uKHBhcmFtcy5hc3NlcnRpb24sIHBhcmFtcy5vcmlnaW4pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5yZXBseU1lc3NhZ2UobXNnLCBlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlZnJlc2hBc3NlcnRpb24nOlxuICAgICAgICAgIC8vICAgICBjb25zb2xlLmluZm8oJ3JlZnJlc2hBc3NlcnRpb24nKTtcbiAgICAgICAgICBJZHBQcm94eS5yZWZyZXNoQXNzZXJ0aW9uKHBhcmFtcy5pZGVudGl0eSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIHZhbHVlKTtcbiAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIF90aGlzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKlxuICAgICogQHBhcmFtICB7bWVzc2FnZX0gICBtZXNzYWdlIHJlY2VpdmVkXG4gICAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcbiAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZXBseU1lc3NhZ2UnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdmFyIG1lc3NhZ2UgPSB7IGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLFxuICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgdmFsdWU6IHZhbHVlIH0gfTtcblxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdfc2VuZFN0YXR1cycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbR29vZ2xlSWRwUHJveHkuc2VuZFN0YXR1c10gJywgdmFsdWUpO1xuXG4gICAgICBfdGhpcy5fc3RhdGUgPSB2YWx1ZTtcblxuICAgICAgdmFyIG1zZyA9IHtcbiAgICAgICAgdHlwZTogJ3VwZGF0ZScsXG4gICAgICAgIGZyb206IF90aGlzLnJ1bnRpbWVQcm90b1N0dWJVUkwsXG4gICAgICAgIHRvOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChyZWFzb24pIHtcbiAgICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjtcbiAgICAgIH1cblxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJZHBQcm94eVByb3RvU3R1Yjtcbn0oKTtcblxuLy8gZXhwb3J0IGRlZmF1bHQgSWRwUHJveHlQcm90b1N0dWI7XG5cbi8qKlxuICogVG8gYWN0aXZhdGUgdGhpcyBwcm90b2NvbCBzdHViLCB1c2luZyB0aGUgc2FtZSBtZXRob2QgZm9yIGFsbCBwcm90b3N0dWIuXG4gKiBAcGFyYW0gIHtVUkwuUnVudGltZVVSTH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVudGltZVByb3RvU3R1YlVSTCBydW50aW1lUHJvdG9TdWJVUkxcbiAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gICAgICAgICAgICAgICAgICAgICAgICAgICBidXNQb3N0TWVzc2FnZSAgICAgY29uZmlndXJhdGlvblxuICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gKiBAcmV0dXJuIHtPYmplY3R9IE9iamVjdCB3aXRoIG5hbWUgYW5kIGluc3RhbmNlIG9mIFByb3RvU3R1YlxuICovXG5cblxuZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykge1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICdJZHBQcm94eVByb3RvU3R1YicsXG4gICAgaW5zdGFuY2U6IG5ldyBJZHBQcm94eVByb3RvU3R1Yih1cmwsIGJ1cywgY29uZmlnKVxuICB9O1xufS8vIyBzb3VyY2VVUkw9W21vZHVsZV1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluZGxZbkJoWTJzNkx5OHZMaTR2WkdWMkxYQnliM1J2YzNSMVluTXZjM0pqTDJsa2NIQnliM2g1TDJkdmIyZHNaUzlKWkhCUWNtOTRlVk4wZFdJdWFXUndMbXB6UHpFMFltSWlYU3dpYm1GdFpYTWlPbHNpWVdOMGFYWmhkR1VpTENKcFpHVnVkR2wwYVdWeklpd2lia2xrWlc1MGFYUjVJaXdpWjI5dloyeGxTVzVtYnlJc0ltTnNhV1Z1ZEZObFkzSmxkQ0lzSW1Oc2FXVnVkRWxFSWl3aWNtVmthWEpsWTNSVlVra2lMQ0pzYjJOaGRHbHZiaUlzSW5CeWIzUnZZMjlzSWl3aWFHOXpkRzVoYldVaUxDSndiM0owSWl3aWFYTnpkV1Z5SWl3aWRHOXJaVzVGYm1Sd2IybHVkQ0lzSW1wM2EzTlZjbWtpTENKaGRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUWlMQ0oxYzJWeWFXNW1ieUlzSW5SdmEyVnVTVzVtYnlJc0ltRmpZMlZ6YzFSNWNHVWlMQ0owZVhCbElpd2ljMk52Y0dVaUxDSnpkR0YwWlNJc0luVnliRkJoY25ObGNpSXNJblZ5YkNJc0ltNWhiV1VpTENKeVpYQnNZV05sSWl3aWNtVm5aWGhUSWl3aWNtVm5aWGdpTENKU1pXZEZlSEFpTENKeVpYTjFiSFJ6SWl3aVpYaGxZeUlzSW5ObGJtUklWRlJRVW1WeGRXVnpkQ0lzSW0xbGRHaHZaQ0lzSW5ob2NpSXNJbGhOVEVoMGRIQlNaWEYxWlhOMElpd2liM0JsYmlJc0lsaEViMjFoYVc1U1pYRjFaWE4wSWl3aVVISnZiV2x6WlNJc0luSmxjMjlzZG1VaUxDSnlaV3BsWTNRaUxDSnZibkpsWVdSNWMzUmhkR1ZqYUdGdVoyVWlMQ0psSWl3aWNtVmhaSGxUZEdGMFpTSXNJbk4wWVhSMWN5SXNJbWx1Wm04aUxDSktVMDlPSWl3aWNHRnljMlVpTENKeVpYTndiMjV6WlZSbGVIUWlMQ0p6Wlc1a0lpd2laWGhqYUdGdVoyVkRiMlJsSWl3aVkyOWtaU0lzSW1raUxDSlZVa3dpTENKMGFHVnVJaXdpWTI5dWMyOXNaU0lzSW14dlp5SXNJbVZ5Y205eUlpd2laWGhqYUdGdVoyVlNaV1p5WlhOb1ZHOXJaVzRpTENKeVpXWnlaWE5vVkc5clpXNGlMQ0pKWkhCUWNtOTRlU0lzSW5aaGJHbGtZWFJsUVhOelpYSjBhVzl1SWl3aVlYTnpaWEowYVc5dUlpd2liM0pwWjJsdUlpd2lZWFJ2WWlJc0ltUmxZMjlrWldSRGIyNTBaVzUwTWlJc0ltTnZiblJsYm5RaUxDSnBaRlJ2YTJWdVUzQnNhWFJsWkNJc0luUnZhMlZ1U1VRaUxDSnpjR3hwZENJc0ltbGtWRzlyWlc0aUxDSmtaV052WkdWa1EyOXVkR1Z1ZENJc0luTjBjbWx1WjJsbWVTSXNJbkpsYzNWc2RDSXNJblJ2YTJWdVNVUktVMDlPSWl3aWFXUmxiblJwZEhraUxDSmxiV0ZwYkNJc0ltTnZiblJsYm5Seklpd2lZMkYwWTJnaUxDSmxjbklpTENKeVpXWnlaWE5vUVhOelpYSjBhVzl1SWl3aWRtRnNkV1VpTENKcGJtWnZWRzlyWlc1VlVrd2lMQ0poWTJObGMzTmZkRzlyWlc0aUxDSnBibVp2Vkc5clpXNGlMQ0pwWkdWdWRHbDBlVUoxYm1Sc1pTSXNJbUZqWTJWemMxUnZhMlZ1SWl3aWFXUmZkRzlyWlc0aUxDSjBiMnRsYmxSNWNHVWlMQ0pwWkZSdmEyVnVWVkpNSWl3aVpYaHdhWEpsY3lJc0ltVjRjQ0lzSW05c1pFbEVWRzlyWlc0aUxDSnZiR1JKWkZSdmEyVnVVM0JzYVhSbFpDSXNJbTlzWkVSbFkyOWtaV1JKUkZSdmEyVnVJaXdpYVdST2IyNWpaU0lzSW01dmJtTmxJaXdpY21WalpXbDJaV1JKUkZSdmEyVnVJaXdpWkdWamIyUmxaRWxFVkc5clpXNGlMQ0pwYm5ObGNuUmxaRTV2Ym1ObElpd2lZblJ2WVNJc0ltNWxkMGxFVkc5clpXNGlMQ0pwWkhCQ2RXNWtiR1VpTENKa2IyMWhhVzRpTENKeVpYUjFjbTVXWVd4MVpTSXNJbWxrY0NJc0ltZGxibVZ5WVhSbFFYTnpaWEowYVc5dUlpd2lhR2x1ZENJc0luSmxjWFZsYzNSVmNtd2lMQ0pzYjJkcGJsVnliQ0lzSW5KbFpuSmxjMmhmZEc5clpXNGlMQ0owYjJ0bGJsOTBlWEJsSWl3aVNXUndVSEp2ZUhsUWNtOTBiMU4wZFdJaUxDSnlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1JaXdpWW5Weklpd2lZMjl1Wm1sbklpd2lYM1JvYVhNaUxDSnRaWE56WVdkbFFuVnpJaXdpWVdSa1RHbHpkR1Z1WlhJaUxDSnRjMmNpTENKMGJ5SXNJbkpsY1hWbGMzUlViMGxrY0NJc0lsOXpaVzVrVTNSaGRIVnpJaXdpY0dGeVlXMXpJaXdpWW05a2VTSXNJblZ6WlhKdVlXMWxTR2x1ZENJc0luSmxjR3g1VFdWemMyRm5aU0lzSW0xbGMzTmhaMlVpTENKcFpDSXNJbVp5YjIwaUxDSndiM04wVFdWemMyRm5aU0lzSW5KbFlYTnZiaUlzSWw5emRHRjBaU0lzSW1SbGMyTWlMQ0pwYm5OMFlXNWpaU0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN2EwSkJPR0YzUWtFc1VUczdPenRCUVRsaGVFSXNTVUZCU1VNc1lVRkJZU3hGUVVGcVFqdEJRVU5CTEVsQlFVbERMRmxCUVZrc1EwRkJhRUk3TzBGQlJVRTdPenM3T3pzN096czdPenM3UVVGaFFTeEpRVUZKUXl4aFFVRmhPMEZCUTJaRExHZENRVUYxUWl3d1FrRkVVanRCUVVWbVF5eFpRVUYxUWl3d1JVRkdVanRCUVVkbVF5eGxRVUYzUWtNc1UwRkJVME1zVVVGQlZDeEhRVUZ2UWl4SlFVRndRaXhIUVVFeVFrUXNVMEZCVTBVc1VVRkJjRU1zU1VGQlowUkdMRk5CUVZOSExFbEJRVlFzUzBGQmEwSXNSVUZCYkVJc1IwRkJkVUlzVFVGQlRVZ3NVMEZCVTBjc1NVRkJkRU1zUjBGQk5rTXNSVUZCTjBZc1EwRklWRHRCUVVsbVF5eFZRVUYxUWl3MlFrRktVanRCUVV0bVF5eHBRa0ZCZFVJc05rTkJURkk3UVVGTlprTXNWMEZCZFVJc05rTkJUbEk3UVVGUFprTXNlVUpCUVhWQ0xEUkRRVkJTTzBGQlVXWkRMRmxCUVhWQ0xEWkVRVkpTTzBGQlUyWkRMR0ZCUVhWQ0xEQkVRVlJTTzBGQlZXWkRMR05CUVhWQ0xGTkJWbEk3UVVGWFprTXNVVUZCZFVJc2NVSkJXRkk3UVVGWlprTXNVMEZCZFVJc01FSkJXbEk3UVVGaFprTXNVMEZCZFVJN1FVRmlVaXhEUVVGcVFqdEJRV1ZCT3pzN096czdPenM3T3pzN096czdPMEZCWjBKQk8wRkJRMEVzVTBGQlUwTXNVMEZCVkN4RFFVRnRRa01zUjBGQmJrSXNSVUZCZDBKRExFbEJRWGhDTEVWQlFUaENPMEZCUXpWQ1FTeFRRVUZQUVN4TFFVRkxReXhQUVVGTUxFTkJRV0VzVFVGQllpeEZRVUZ4UWl4TlFVRnlRaXhGUVVFMlFrRXNUMEZCTjBJc1EwRkJjVU1zVFVGQmNrTXNSVUZCTmtNc1RVRkJOME1zUTBGQlVEdEJRVU5CTEUxQlFVbERMRk5CUVZNc1dVRkJXVVlzU1VGQldpeEhRVUZ0UWl4WFFVRm9RenRCUVVOQkxFMUJRVWxITEZGQlFWRXNTVUZCU1VNc1RVRkJTaXhEUVVGWFJpeE5RVUZZTEVOQlFWbzdRVUZEUVN4TlFVRkpSeXhWUVVGVlJpeE5RVUZOUnl4SlFVRk9MRU5CUVZkUUxFZEJRVmdzUTBGQlpEdEJRVU5CTEUxQlFVbE5MRmxCUVZrc1NVRkJhRUlzUlVGRFFTeFBRVUZQTEVWQlFWQXNRMEZFUVN4TFFVZEJMRTlCUVU5QkxGRkJRVkVzUTBGQlVpeERRVUZRTzBGQlEwUTdPMEZCUlVRc1UwRkJVMFVzWlVGQlZDeERRVUY1UWtNc1RVRkJla0lzUlVGQmFVTlVMRWRCUVdwRExFVkJRWE5ETzBGQlEzQkRMRTFCUVVsVkxFMUJRVTBzU1VGQlNVTXNZMEZCU2l4RlFVRldPMEZCUTBFc1RVRkJTU3h4UWtGQmNVSkVMRWRCUVhwQ0xFVkJRVGhDTzBGQlF6VkNRU3hSUVVGSlJTeEpRVUZLTEVOQlFWTklMRTFCUVZRc1JVRkJhVUpVTEVkQlFXcENMRVZCUVhOQ0xFbEJRWFJDTzBGQlEwUXNSMEZHUkN4TlFVVlBMRWxCUVVrc1QwRkJUMkVzWTBGQlVDeEpRVUY1UWl4WFFVRTNRaXhGUVVFd1F6dEJRVU12UXp0QlFVTkJPMEZCUTBGSUxGVkJRVTBzU1VGQlNVY3NZMEZCU2l4RlFVRk9PMEZCUTBGSUxGRkJRVWxGTEVsQlFVb3NRMEZCVTBnc1RVRkJWQ3hGUVVGcFFsUXNSMEZCYWtJN1FVRkRSQ3hIUVV4TkxFMUJTMEU3UVVGRFREdEJRVU5CVlN4VlFVRk5MRWxCUVU0N1FVRkRSRHRCUVVORUxGTkJRVThzU1VGQlNVa3NUMEZCU2l4RFFVRlpMRlZCUVZORExFOUJRVlFzUlVGQmFVSkRMRTFCUVdwQ0xFVkJRWGxDTzBGQlF6RkRMRkZCUVVsT0xFZEJRVW9zUlVGQlV6dEJRVU5RUVN4VlFVRkpUeXhyUWtGQlNpeEhRVUY1UWl4VlFVRlRReXhEUVVGVUxFVkJRVms3UVVGRGJrTXNXVUZCU1ZJc1NVRkJTVk1zVlVGQlNpeExRVUZ0UWl4RFFVRjJRaXhGUVVFd1FqdEJRVU40UWl4alFVRkpWQ3hKUVVGSlZTeE5RVUZLTEV0QlFXVXNSMEZCYmtJc1JVRkJkMEk3UVVGRGRFSXNaMEpCUVVsRExFOUJRVTlETEV0QlFVdERMRXRCUVV3c1EwRkJWMklzU1VGQlNXTXNXVUZCWml4RFFVRllPMEZCUTBGVUxHOUNRVUZSVFN4SlFVRlNPMEZCUTBRc1YwRklSQ3hOUVVkUExFbEJRVWxZTEVsQlFVbFZMRTFCUVVvc1MwRkJaU3hIUVVGdVFpeEZRVUYzUWp0QlFVTTNRa29zYlVKQlFVOHNlVU5CUVZBN1FVRkRSQ3hYUVVaTkxFMUJSVUU3UVVGRFRFRXNiVUpCUVU4c05FTkJRVkE3UVVGRFJEdEJRVU5HTzBGQlEwWXNUMEZZUkR0QlFWbEJUaXhWUVVGSlpTeEpRVUZLTzBGQlEwUXNTMEZrUkN4TlFXTlBPMEZCUTB4VUxHRkJRVThzYjBKQlFWQTdRVUZEUkR0QlFVTkdMRWRCYkVKTkxFTkJRVkE3UVVGdFFrUTdPMEZCUlVRN096czdRVUZKUVN4SlFVRkpWU3hsUVVGblFpeFRRVUZvUWtFc1dVRkJaMElzUTBGQlUwTXNTVUZCVkN4RlFVRmxPMEZCUTJwRExFMUJRVWxETEVsQlFVa3ZReXhWUVVGU096dEJRVVZCTEUxQlFVbG5SQ3hOUVVGTlJDeEZRVUZGZEVNc1lVRkJSaXhIUVVGclFpeFBRVUZzUWl4SFFVRTBRbkZETEVsQlFUVkNMRWRCUVcxRExHRkJRVzVETEVkQlFXMUVReXhGUVVGRk4wTXNVVUZCY2tRc1IwRkJaMFVzYVVKQlFXaEZMRWRCUVc5R05rTXNSVUZCUlRsRExGbEJRWFJHTEVkQlFYRkhMR2RDUVVGeVJ5eEhRVUYzU0RoRExFVkJRVVUxUXl4WFFVRXhTQ3hIUVVGM1NTdzJRMEZCZUVrc1IwRkJkMHcwUXl4RlFVRkZha01zVlVGQmNFMDdPMEZCUlVFN08wRkJSVUVzVTBGQlR5eEpRVUZKYlVJc1QwRkJTaXhEUVVGWkxGVkJRVk5ETEU5QlFWUXNSVUZCYTBKRExFMUJRV3hDTEVWQlFUQkNPMEZCUXpORFVpeHZRa0ZCWjBJc1RVRkJhRUlzUlVGQmQwSnhRaXhIUVVGNFFpeEZRVUUyUWtNc1NVRkJOMElzUTBGQmEwTXNWVUZCVTFRc1NVRkJWQ3hGUVVGbE8wRkJReTlEVlN4alFVRlJReXhIUVVGU0xFTkJRVmtzSzBOQlFWb3NSVUZCTmtSWUxFbEJRVGRFTzBGQlEwRk9MR05CUVZGTkxFbEJRVkk3UVVGRFJDeExRVWhFTEVWQlIwY3NWVUZCVTFrc1MwRkJWQ3hGUVVGblFqdEJRVU5xUW1wQ0xHRkJRVTlwUWl4TFFVRlFPMEZCUTBRc1MwRk1SRHRCUVU5RUxFZEJVazBzUTBGQlVEdEJRVk5FTEVOQmFFSkVPenRCUVd0Q1FTeEpRVUZKUXl4MVFrRkJkMElzVTBGQmVFSkJMRzlDUVVGM1FpeERRVUZUUXl4WlFVRlVMRVZCUVhWQ08wRkJRMnBFTEUxQlFVbFFMRWxCUVVrdlF5eFZRVUZTT3p0QlFVVkJMRTFCUVVsblJDeE5RVUZOUkN4RlFVRkZkRU1zWVVGQlJpeEhRVUZyUWl4WlFVRnNRaXhIUVVGcFEzTkRMRVZCUVVVM1F5eFJRVUZ1UXl4SFFVRTRReXhwUWtGQk9VTXNSMEZCYTBVMlF5eEZRVUZGT1VNc1dVRkJjRVVzUjBGQmJVWXNhVUpCUVc1R0xFZEJRWFZIY1VRc1dVRkJka2NzUjBGQmMwZ3NNa0pCUVdoSk96dEJRVVZCTEZOQlFVOHNTVUZCU1hKQ0xFOUJRVW9zUTBGQldTeFZRVUZUUXl4UFFVRlVMRVZCUVd0Q1F5eE5RVUZzUWl4RlFVRXdRanRCUVVNelExSXNiMEpCUVdkQ0xFMUJRV2hDTEVWQlFYZENjVUlzUjBGQmVFSXNSVUZCTmtKRExFbEJRVGRDTEVOQlFXdERMRlZCUVZOVUxFbEJRVlFzUlVGQlpUdEJRVU12UTA0c1kwRkJVVTBzU1VGQlVqdEJRVU5FTEV0QlJrUXNSVUZGUnl4VlFVRlRXU3hMUVVGVUxFVkJRV2RDTzBGQlEycENha0lzWVVGQlQybENMRXRCUVZBN1FVRkRSQ3hMUVVwRU8wRkJUVVFzUjBGUVRTeERRVUZRTzBGQlVVUXNRMEZpUkRzN1FVRmxRVHM3TzBGQlIwOHNTVUZCU1Vjc09FSkJRVmM3TzBGQlJYQkNPenM3T3pzN096dEJRVkZCUXl4eFFrRkJiVUlzTWtKQlFVTkRMRk5CUVVRc1JVRkJXVU1zVFVGQldpeEZRVUYxUWp0QlFVTjRRMUlzV1VGQlVWWXNTVUZCVWl4RFFVRmhMSEZFUVVGaUxFVkJRVzlGYlVJc1MwRkJTMFlzVTBGQlRDeERRVUZ3UlR0QlFVTktPenRCUVVWSk8wRkJRMFk3TzBGQlJVa3NVVUZCU1Vjc2EwSkJRV3RDUkN4TFFVRkxSaXhUUVVGTUxFTkJRWFJDTzBGQlEwRXNVVUZCU1Vrc1ZVRkJWWEJDTEV0QlFVdERMRXRCUVV3c1EwRkJWMnRDTEdWQlFWZ3NRMEZCWkR0QlFVTkJMRkZCUVVsRkxHbENRVUZwUWtRc1VVRkJVVVVzVDBGQlVpeERRVUZuUWtNc1MwRkJhRUlzUTBGQmMwSXNSMEZCZEVJc1EwRkJja0k3UVVGRFFTeFJRVUZKUXl4VlFVRlZlRUlzUzBGQlMwTXNTMEZCVEN4RFFVRlhhVUlzUzBGQlMwY3NaVUZCWlN4RFFVRm1MRU5CUVV3c1EwRkJXQ3hEUVVGa096dEJRVVZCT3p0QlFVVkdPenRCUVVWQkxGZEJRVThzU1VGQlNUZENMRTlCUVVvc1EwRkJXU3hWUVVGVFF5eFBRVUZVTEVWQlFXbENReXhOUVVGcVFpeEZRVUY1UWp0QlFVTXhReXhWUVVGSldTeEpRVUZKTDBNc1ZVRkJVanRCUVVOQkxGVkJRVWxyUlN4cFFrRkJhVUpRTEV0QlFVdEdMRk5CUVV3c1EwRkJja0k3UVVGRFFTeFZRVUZKU1N4VlFVRlZjRUlzUzBGQlMwTXNTMEZCVEN4RFFVRlhkMElzWTBGQldDeERRVUZrTzBGQlEwRjJReXh6UWtGQlowSXNTMEZCYUVJc1JVRkJkVUp2UWl4RlFVRkZiRU1zVTBGQlJpeEhRVUZqWjBRc1VVRkJVVVVzVDBGQk4wTXNSVUZCYzBSa0xFbEJRWFJFTEVOQlFUSkVMR3RDUVVGVk8wRkJRMjVGTEZsQlFVbFNMRXRCUVVzd1FpeFRRVUZNTEVOQlFXVkRMRTFCUVdZc1RVRkJNa0l6UWl4TFFVRkxNRUlzVTBGQlRDeERRVUZsVGl4UlFVRlJVU3hYUVVGMlFpeERRVUV2UWl4RlFVRnZSVHRCUVVOc1JXNURMR3RDUVVGUkxFVkJRVU52UXl4VlFVRlZWQ3hSUVVGUlVTeFhRVUZTTEVOQlFXOUNSU3hMUVVFdlFpeEZRVUZ6UTBNc1ZVRkJWVmdzVVVGQlVWRXNWMEZCZUVRc1JVRkJVanRCUVVORUxGTkJSa1FzVFVGRlR6dEJRVU5NYkVNc2FVSkJRVThzVTBGQlVEdEJRVU5FTzBGQlEwWXNUMEZPUkN4RlFVMUhjME1zUzBGT1NDeERRVTFUTEdWQlFVODdRVUZEWkhSRExHVkJRVTkxUXl4SFFVRlFPMEZCUTBRc1QwRlNSRHRCUVZORUxFdEJZazBzUTBGQlVEdEJRV05FTEVkQmVFTnRRanM3UVVFd1EzQkNReXh2UWtGQmEwSXNNRUpCUVVOTUxGRkJRVVFzUlVGQll6dEJRVU01UWp0QlFVTkJMRkZCUVVsMlFpeEpRVUZKTDBNc1ZVRkJVanM3UVVGRlFTeFhRVUZQTEVsQlFVbHBReXhQUVVGS0xFTkJRVmtzVlVGQlUwTXNUMEZCVkN4RlFVRnJRa01zVFVGQmJFSXNSVUZCTUVJN1FVRkRNME1zVlVGQlNXMURMRk5CUVZNNVFpeEpRVUZVTEVOQlFXTmpMRmxCUVd4Q0xFVkJRV2RETzBGQlF6bENSQ3cyUWtGQmNVSnBRaXhUUVVGVE9VSXNTVUZCVkN4RFFVRmpZeXhaUVVGdVF5eEZRVUZwUkV3c1NVRkJha1FzUTBGQmMwUXNWVUZCVXpKQ0xFdEJRVlFzUlVGQlowSTdRVUZEY0VVc1kwRkJTVU1zWlVGQlpUbENMRVZCUVVWdVF5eFJRVUZHTEVkQlFXRm5SU3hOUVVGTlJTeFpRVUYwUXp0QlFVTkJia1FzTUVKQlFXZENMRXRCUVdoQ0xFVkJRWFZDYTBRc1dVRkJka0lzUlVGQmNVTTFRaXhKUVVGeVF5eERRVUV3UXl4VlFVRlRPRUlzVTBGQlZDeEZRVUZ2UWpzN1FVRkZOVVFzWjBKQlFVbERMR2xDUVVGcFFpeEZRVUZEUXl4aFFVRmhUQ3hOUVVGTlJTeFpRVUZ3UWl4RlFVRnJRMklzVTBGQlUxY3NUVUZCVFUwc1VVRkJha1FzUlVGQk1rUTFRaXhqUVVGalowSXNVMEZCVXpsQ0xFbEJRVlFzUTBGQlkyTXNXVUZCZGtZc1JVRkJjVWMyUWl4WFFVRlhZaXhUUVVGVE9VSXNTVUZCVkN4RFFVRmpNa01zVTBGQk9VZ3NSVUZCZVVsS0xGZEJRVmRCTEZOQlFYQktMRVZCUVhKQ08wRkJRMEVzWjBKQlFVbExMR0ZCUVdGeVF5eEZRVUZGYkVNc1UwRkJSaXhIUVVGakswUXNUVUZCVFUwc1VVRkJja003TzBGQlJVRTdRVUZEUVhaRUxEUkNRVUZuUWl4TFFVRm9RaXhGUVVGMVFubEVMRlZCUVhaQ0xFVkJRVzFEYmtNc1NVRkJia01zUTBGQmQwTXNWVUZCVTJkQ0xFOUJRVlFzUlVGQmEwSTdPMEZCUlhoRVpTdzJRa0ZCWlZnc1YwRkJaaXhIUVVFMlFrb3NUMEZCTjBJN1FVRkRRV1VzTmtKQlFXVkxMRTlCUVdZc1IwRkJlVUp3UWl4UlFVRlJjVUlzUjBGQmFrTTdRVUZEUVU0c05rSkJRV1ZVTEV0QlFXWXNSMEZCZFVKT0xGRkJRVkZOTEV0QlFTOUNPenRCUVVWQkxHdENRVUZKWjBJc1lVRkJZVGxETEV0QlFVdERMRXRCUVV3c1EwRkJWMmxDTEV0QlFVdFhMRk5CUVZOaUxGTkJRV1FzUTBGQldDeERRVUZxUWp0QlFVTkJMR3RDUVVGSkswSXNiMEpCUVc5Q1JDeFhRVUZYZUVJc1QwRkJXQ3hEUVVGdFFrTXNTMEZCYmtJc1EwRkJlVUlzUjBGQmVrSXNRMEZCZUVJN1FVRkRRU3hyUWtGQlNYbENMRzlDUVVGdlFtaEVMRXRCUVV0RExFdEJRVXdzUTBGQlYybENMRXRCUVVzMlFpeHJRa0ZCYTBJc1EwRkJiRUlzUTBGQlRDeERRVUZZTEVOQlFYaENPMEZCUTBFc2EwSkJRVWxGTEZWQlFWVkVMR3RDUVVGclFrVXNTMEZCYUVNN08wRkJSVUVzYTBKQlFVbERMR3RDUVVGclFtaENMRTFCUVUxTkxGRkJRVFZDTzBGQlEwRXNhMEpCUVVsd1FpeHBRa0ZCYVVJNFFpeG5Ra0ZCWjBJMVFpeExRVUZvUWl4RFFVRnpRaXhIUVVGMFFpeERRVUZ5UWp0QlFVTkJMR3RDUVVGSk5rSXNhVUpCUVdsQ2NFUXNTMEZCUzBNc1MwRkJUQ3hEUVVGWGFVSXNTMEZCUzBjc1pVRkJaU3hEUVVGbUxFTkJRVXdzUTBGQldDeERRVUZ5UWpzN1FVRkZRU3RDTERaQ1FVRmxSaXhMUVVGbUxFZEJRWFZDUkN4UFFVRjJRanRCUVVOQkxHdENRVUZKU1N4blFrRkJaMEpETEV0QlFVdDBSQ3hMUVVGTE1FSXNVMEZCVEN4RFFVRmxNRUlzWTBGQlppeERRVUZNTEVOQlFYQkNPMEZCUTBFc2EwSkJRVWxITEdGQlFXRnNReXhsUVVGbExFTkJRV1lzU1VGQmIwSXNSMEZCY0VJc1IwRkRSV2RETEdGQlJFWXNSMEZEYTBJc1IwRkViRUlzUjBGRlJXaERMR1ZCUVdVc1EwRkJaaXhEUVVadVFqczdRVUZKUVN4clFrRkJTVXdzV1VGQldYTkRMRXRCUVV0MFJDeExRVUZMTUVJc1UwRkJUQ3hEUVVGbExFVkJRVU5LTEZOQlFWTnBReXhWUVVGV0xFVkJRWE5DTTBJc1lVRkJZVW9zVDBGQmJrTXNSVUZCWml4RFFVRk1MRU5CUVdoQ08wRkJRMEVzYTBKQlFVbG5ReXhaUVVGWkxFVkJRVU5ETEZGQlFWRXNXVUZCVkN4RlFVRjFRamRHTEZWQlFWVXNUVUZCYWtNc1JVRkJhRUk3TzBGQlJVRTdRVUZEUVN4clFrRkJTVGhHTEdOQlFXTXNSVUZCUXpGRExGZEJRVmRCTEZOQlFWb3NSVUZCZFVJeVF5eExRVUZMU0N4VFFVRTFRaXhGUVVGMVEzcEVMRTFCUVUxM1F5eGpRVUUzUXl4RlFVRTJSRVFzVjBGQlYwRXNVMEZCZUVVc1JVRkJiRUk3UVVGRFFUdEJRVU5CTjBNc2MwSkJRVkZwUlN4WFFVRlNPMEZCUTBRc1lVRTFRa1E3UVVFMlFrUXNWMEZ1UTBRN1FVRnZRMFFzVTBGMFEwUTdRVUYxUTBRN1FVRkRSaXhMUVRGRFRTeERRVUZRTzBGQk1rTkVMRWRCZWtadFFqczdRVUV5Um5CQ096czdPenM3T3pzN1FVRlRRVVVzY1VKQlFXMUNMREpDUVVGRE4wSXNVVUZCUkN4RlFVRlhaQ3hOUVVGWUxFVkJRVzFDTkVNc1NVRkJia0lzUlVGQk5FSTdRVUZETjBOd1JDeFpRVUZSUXl4SFFVRlNMRU5CUVZrc05rTkJRVm9zUlVGQk1rUnhRaXhSUVVFelJEdEJRVU5CZEVJc1dVRkJVVU1zUjBGQlVpeERRVUZaTERKRFFVRmFMRVZCUVhsRVR5eE5RVUY2UkR0QlFVTkJVaXhaUVVGUlF5eEhRVUZTTEVOQlFWa3NlVU5CUVZvc1JVRkJkVVJ0UkN4SlFVRjJSRHRCUVVOQkxGRkJRVWwyUkN4SlFVRkpMME1zVlVGQlVqczdRVUZGUVR0QlFVTkJPMEZCUTBFc1YwRkJUeXhKUVVGSmFVTXNUMEZCU2l4RFFVRlpMRlZCUVZORExFOUJRVlFzUlVGQmEwSkRMRTFCUVd4Q0xFVkJRVEJDTzBGQlF6TkRMRlZCUVVrc1EwRkJRMjFGTEVsQlFVd3NSVUZCVnp0QlFVTlVPenM3T3pzN1FVRk5RU3haUVVGSlF5eGhRVUZoZUVRc1JVRkJSWEJETEhGQ1FVRkdMRWRCUVRCQ0xGRkJRVEZDTEVkQlFYRkRiME1zUlVGQlJTOUNMRXRCUVhaRExFZEJRU3RETEdGQlFTOURMRWRCUVN0RUswSXNSVUZCUlRkRExGRkJRV3BGTEVkQlFUUkZMR2RDUVVFMVJTeEhRVUVyUmpaRExFVkJRVVUxUXl4WFFVRnFSeXhIUVVFclJ5eHhRa0ZCTDBjc1IwRkJkVWtzV1VGQllTeFRRVUZ3U2l4SFFVRm5TelJETEVWQlFVVTVRaXhMUVVGc1N5eEhRVUV3U3l3NFFrRkJNVXNzUjBGQk1rMDRRaXhGUVVGRmFrTXNWVUZCTjAwc1IwRkJNRTRzVTBGQk1VNHNSMEZCYzA4d1JDeFJRVUYyVUR0QlFVTkJkRUlzWjBKQlFWRkRMRWRCUVZJc1EwRkJXU3gzUlVGQldpeEZRVUZ6Um05RUxGVkJRWFJHT3p0QlFVVkJjRVVzWlVGQlR5eEZRVUZEWml4TlFVRk5MR1ZCUVZBc1JVRkJkMEp2Uml4VlFVRlZSQ3hWUVVGc1F5eEZRVUZRT3p0QlFVVkdPMEZCUlVNc1QwRmtSQ3hOUVdOUE8wRkJRMHc3UVVGRFFTeFpRVUZKZEVJc1kwRkJZeTlFTEZWQlFWVnZSaXhKUVVGV0xFVkJRV2RDTEdOQlFXaENMRU5CUVd4Q08wRkJRMEVzV1VGQlNYSkRMRlZCUVZVdlF5eFZRVUZWYjBZc1NVRkJWaXhGUVVGblFpeFZRVUZvUWl4RFFVRmtPMEZCUTBFc1dVRkJTWGhFTEU5QlFVODFRaXhWUVVGVmIwWXNTVUZCVml4RlFVRm5RaXhOUVVGb1FpeERRVUZZT3p0QlFVVkJPenRCUVVWQmVrUXNjVUpCUVdGRExFbEJRV0lzUlVGQmJVSkhMRWxCUVc1Q0xFTkJRWGRDTEZWQlFWTXlRaXhMUVVGVUxFVkJRV2RDT3p0QlFVVjBRenRCUVVOQkxHTkJRVWxETEdWQlFXVTVRaXhGUVVGRmJrTXNVVUZCUml4SFFVRmhaMFVzVFVGQlRVVXNXVUZCZEVNN1FVRkRRVzVFTERCQ1FVRm5RaXhMUVVGb1FpeEZRVUYxUW10RUxGbEJRWFpDTEVWQlFYRkROVUlzU1VGQmNrTXNRMEZCTUVNc1ZVRkJVemhDTEZOQlFWUXNSVUZCYjBJN1FVRkROVVEzUWl4dlFrRkJVVU1zUjBGQlVpeERRVUZaTEhkRVFVRmFMRVZCUVhORk5FSXNVMEZCZEVVN08wRkJSVUVzWjBKQlFVbERMR2xDUVVGcFFpeEZRVUZEUXl4aFFVRmhUQ3hOUVVGTlJTeFpRVUZ3UWl4RlFVRnJRMklzVTBGQlUxY3NUVUZCVFUwc1VVRkJha1FzUlVGQk1rUTFRaXhqUVVGamMwSXNUVUZCVFRaQ0xHRkJRUzlGTEVWQlFUaEdkRUlzVjBGQlYxQXNUVUZCVFRoQ0xGVkJRUzlITEVWQlFUSklNMElzVjBGQlYwRXNVMEZCZEVrc1JVRkJja0k3TzBGQlJVRXNaMEpCUVVsTExHRkJRV0Z5UXl4RlFVRkZiRU1zVTBGQlJpeEhRVUZqSzBRc1RVRkJUVTBzVVVGQmNrTTdPMEZCUlVFN1FVRkRRWFpFTERSQ1FVRm5RaXhMUVVGb1FpeEZRVUYxUW5sRUxGVkJRWFpDTEVWQlFXMURia01zU1VGQmJrTXNRMEZCZDBNc1ZVRkJVMmRDTEU5QlFWUXNSVUZCYTBJN1FVRkRlRVJtTEhOQ1FVRlJReXhIUVVGU0xFTkJRVmtzYzBSQlFWb3NSVUZCYjBWakxFOUJRWEJGT3p0QlFVVkJaU3cyUWtGQlpWZ3NWMEZCWml4SFFVRTJRa29zVDBGQk4wSTdRVUZEUVdVc05rSkJRV1ZMTEU5QlFXWXNSMEZCZVVKd1FpeFJRVUZSY1VJc1IwRkJha003UVVGRFFVNHNOa0pCUVdWVUxFdEJRV1lzUjBGQmRVSk9MRkZCUVZGTkxFdEJRUzlDT3p0QlFVVkJMR3RDUVVGSlpDeFpRVUZaYzBNc1MwRkJTM1JFTEV0QlFVc3dRaXhUUVVGTUxFTkJRV1VzUlVGQlEwb3NVMEZCVTJFc1RVRkJUVTBzVVVGQmFFSXNSVUZCTUVKaUxHRkJRV0ZLTEU5QlFYWkRMRVZCUVdZc1EwRkJUQ3hEUVVGb1FqdEJRVU5CTEd0Q1FVRkpaME1zV1VGQldTeEZRVUZEUXl4UlFVRlJMRmxCUVZRc1JVRkJkVUkzUml4VlFVRlZMRTFCUVdwRExFVkJRV2hDT3p0QlFVVkJPMEZCUTBFc2EwSkJRVWs0Uml4alFVRmpMRVZCUVVNeFF5eFhRVUZYUVN4VFFVRmFMRVZCUVhWQ01rTXNTMEZCUzBnc1UwRkJOVUlzUlVGQmRVTjZSQ3hOUVVGTmQwTXNZMEZCTjBNc1JVRkJOa1JFTEZkQlFWZEJMRk5CUVhoRkxFVkJRV3hDT3p0QlFVVkJha1lzZVVKQlFWZERMRk5CUVZnc1NVRkJkMEp2Unl4WFFVRjRRanRCUVVOQkxHZENRVUZGY0Vjc1UwRkJSanM3UVVGRlFXMUVMSE5DUVVGUlF5eEhRVUZTTEVOQlFWa3NaMFJCUVZvc1JVRkJPRVJXTEV0QlFVc3dRaXhUUVVGTUxFTkJRV1ZuUXl4WFFVRm1MRU5CUVRsRU96dEJRVVZCYWtVc2MwSkJRVkZwUlN4WFFVRlNPMEZCUTBRc1lVRnVRa1FzUlVGdFFrY3NWVUZCVXpsRUxFTkJRVlFzUlVGQldUczdRVUZGWWtZc2NVSkJRVTlGTEVOQlFWQTdRVUZEUkN4aFFYUkNSRHRCUVhWQ1JDeFhRUzlDUkN4RlFTdENSeXhWUVVGVFpTeExRVUZVTEVWQlFXZENPenRCUVVWcVFtcENMRzFDUVVGUGFVSXNTMEZCVUR0QlFVTkVMRmRCYkVORU8wRkJiVU5FTEZOQmRrTkVMRVZCZFVOSExGVkJRVk56UWl4SFFVRlVMRVZCUVdNN08wRkJSV1oyUXl4cFFrRkJUM1ZETEVkQlFWQTdRVUZEUkN4VFFURkRSRHRCUVRSRFJEdEJRVU5HTEV0QmNFVk5MRU5CUVZBN1FVRnhSVVE3UVVGcVRHMUNMRU5CUVdZN08wRkJiMHhRT3pzN08wbEJSMDFwUXl4cFFqczdRVUZGU2pzN096czdPenM3UVVGUlJDdzJRa0ZCV1VNc2JVSkJRVm9zUlVGQmFVTkRMRWRCUVdwRExFVkJRWE5EUXl4TlFVRjBReXhGUVVFNFF6dEJRVUZCT3p0QlFVTTFReXhSUVVGSlF5eFJRVUZSTEVsQlFWbzdRVUZEUVVFc1ZVRkJUVWdzYlVKQlFVNHNSMEZCTkVKQkxHMUNRVUUxUWp0QlFVTkJSeXhWUVVGTlF5eFZRVUZPTEVkQlFXMUNTQ3hIUVVGdVFqdEJRVU5CUlN4VlFVRk5SQ3hOUVVGT0xFZEJRV1ZCTEUxQlFXWTdPMEZCUlVFMVJDeFpRVUZSUXl4SFFVRlNMRU5CUVZrc09FSkJRVm83TzBGQlJVRTBSQ3hWUVVGTlF5eFZRVUZPTEVOQlFXbENReXhYUVVGcVFpeERRVUUyUWl4SFFVRTNRaXhGUVVGclF5eFZRVUZUUXl4SFFVRlVMRVZCUVdNN1FVRkRPVU1zVlVGQlNVRXNTVUZCU1VNc1JVRkJTaXhMUVVGWExIbENRVUZtTEVWQlFUQkRPenRCUVVWNFEwb3NZMEZCVFVzc1dVRkJUaXhEUVVGdFFrWXNSMEZCYmtJN1FVRkRSRHRCUVVOR0xFdEJURVE3UVVGTlFVZ3NWVUZCVFUwc1YwRkJUaXhEUVVGclFpeFRRVUZzUWp0QlFVTkVPenRCUVVWQk96czdPenM3T3pzN2FVTkJTMkZJTEVjc1JVRkJTenRCUVVOb1FpeFZRVUZKU0N4UlFVRlJMRWxCUVZvN1FVRkRRU3hWUVVGSlR5eFRRVUZUU2l4SlFVRkpTeXhKUVVGS0xFTkJRVk5FTEUxQlFYUkNPMEZCUTBFN1FVRkRRWEJGTEdOQlFWRldMRWxCUVZJc1EwRkJZU3h6UTBGQllpeEZRVUZ4UkRCRkxFZEJRWEpFT3p0QlFVVkJMR05CUVZGQkxFbEJRVWxMTEVsQlFVb3NRMEZCVXpOR0xFMUJRV3BDTzBGQlEwVXNZVUZCU3l4dFFrRkJURHRCUVVORk1rSXNiVUpCUVZNNFF5eHBRa0ZCVkN4RFFVRXlRbWxDTEU5QlFVODVReXhSUVVGc1F5eEZRVUUwUXpoRExFOUJRVTgxUkN4TlFVRnVSQ3hGUVVFeVJEUkVMRTlCUVU5RkxGbEJRV3hGTEVWQlFXZEdka1VzU1VGQmFFWXNRMEZEUlN4VlFVRlRNa0lzUzBGQlZDeEZRVUZuUWp0QlFVRkZiVU1zYTBKQlFVMVZMRmxCUVU0c1EwRkJiVUpRTEVkQlFXNUNMRVZCUVhkQ2RFTXNTMEZCZUVJN1FVRkJaME1zVjBGRWNFUXNSVUZIUlN4VlFVRlRlRUlzUzBGQlZDeEZRVUZuUWp0QlFVRkZNa1FzYTBKQlFVMVZMRmxCUVU0c1EwRkJiVUpRTEVkQlFXNUNMRVZCUVhkQ09VUXNTMEZCZUVJN1FVRkJaME1zVjBGSWNFUTdRVUZMUVR0QlFVTkdMR0ZCUVVzc2JVSkJRVXc3UVVGRFREdEJRVU5QUnl4dFFrRkJVME1zYVVKQlFWUXNRMEZCTWtJNFJDeFBRVUZQTjBRc1UwRkJiRU1zUlVGQk5rTTJSQ3hQUVVGUE5VUXNUVUZCY0VRc1JVRkJORVJVTEVsQlFUVkVMRU5CUTBVc1ZVRkJVekpDTEV0QlFWUXNSVUZCWjBJN1FVRkJSVzFETEd0Q1FVRk5WU3haUVVGT0xFTkJRVzFDVUN4SFFVRnVRaXhGUVVGM1FuUkRMRXRCUVhoQ08wRkJRV2RETEZkQlJIQkVMRVZCUjBVc1ZVRkJVM2hDTEV0QlFWUXNSVUZCWjBJN1FVRkJSVEpFTEd0Q1FVRk5WU3haUVVGT0xFTkJRVzFDVUN4SFFVRnVRaXhGUVVGM1FqbEVMRXRCUVhoQ08wRkJRV2RETEZkQlNIQkVPMEZCUzBFN1FVRkRSaXhoUVVGTExHdENRVUZNTzBGQlEwZzdRVUZEUzBjc2JVSkJRVk52UWl4blFrRkJWQ3hEUVVFd1FqSkRMRTlCUVU5b1JDeFJRVUZxUXl4RlFVRXlRM0pDTEVsQlFUTkRMRU5CUTBVc1ZVRkJVekpDTEV0QlFWUXNSVUZCWjBJN1FVRkJSVzFETEd0Q1FVRk5WU3haUVVGT0xFTkJRVzFDVUN4SFFVRnVRaXhGUVVGM1FuUkRMRXRCUVhoQ08wRkJRV2RETEZkQlJIQkVMRVZCUjBVc1ZVRkJVM2hDTEV0QlFWUXNSVUZCWjBJN1FVRkJSVEpFTEd0Q1FVRk5WU3haUVVGT0xFTkJRVzFDVUN4SFFVRnVRaXhGUVVGM1FqbEVMRXRCUVhoQ08wRkJRV2RETEZkQlNIQkVPMEZCUzBZN1FVRkRSVHRCUVhoQ1NqdEJRVEJDUkRzN1FVRkZSRHM3T3pzN096czdPMmxEUVUxaE9FUXNSeXhGUVVGTGRFTXNTeXhGUVVGUE8wRkJRM1pDTEZWQlFVbHRReXhSUVVGUkxFbEJRVm83TzBGQlJVRXNWVUZCU1Zjc1ZVRkJWU3hGUVVGRFF5eEpRVUZKVkN4SlFVRkpVeXhGUVVGVUxFVkJRV0UxUnl4TlFVRk5MRlZCUVc1Q0xFVkJRU3RDYjBjc1NVRkJTVVFzU1VGQlNWVXNTVUZCZGtNc1JVRkJOa05CTEUxQlFVMVdMRWxCUVVsRExFVkJRWFpFTzBGQlEwTkpMR05CUVUwc1JVRkJRM3BGTEUxQlFVMHNSMEZCVUN4RlFVRlpPRUlzVDBGQlQwRXNTMEZCYmtJc1JVRkVVQ3hGUVVGa096dEJRVWRCYlVNc1dVRkJUVU1zVlVGQlRpeERRVUZwUW1Fc1YwRkJha0lzUTBGQk5rSklMRTlCUVRkQ08wRkJRMFE3T3p0blEwRkZWemxETEVzc1JVRkJUMnRFTEUwc1JVRkJVVHRCUVVONlFpeFZRVUZKWml4UlFVRlJMRWxCUVZvN08wRkJSVUUzUkN4alFVRlJReXhIUVVGU0xFTkJRVmtzT0VKQlFWb3NSVUZCTkVONVFpeExRVUUxUXpzN1FVRkZRVzFETEZsQlFVMW5RaXhOUVVGT0xFZEJRV1Z1UkN4TFFVRm1PenRCUVVWQkxGVkJRVWx6UXl4TlFVRk5PMEZCUTFKdVJ5eGpRVUZOTEZGQlJFVTdRVUZGVWpaSExHTkJRVTFpTEUxQlFVMUlMRzFDUVVaS08wRkJSMUpQTEZsQlFVbEtMRTFCUVUxSUxHMUNRVUZPTEVkQlFUUkNMRk5CU0hoQ08wRkJTVkpYTEdOQlFVMDdRVUZEU2pORExHbENRVUZQUVR0QlFVUklPMEZCU2tVc1QwRkJWanM3UVVGVFFTeFZRVUZKYTBRc1RVRkJTaXhGUVVGWk8wRkJRMVphTEZsQlFVbExMRWxCUVVvc1EwRkJVMU1zU1VGQlZDeEhRVUZuUWtZc1RVRkJhRUk3UVVGRFJEczdRVUZGUkdZc1dVRkJUVU1zVlVGQlRpeERRVUZwUW1Fc1YwRkJha0lzUTBGQk5rSllMRWRCUVRkQ08wRkJRMFE3T3pzN096dEJRVWRJT3p0QlFVVkJPenM3T3pzN096czdRVUZQWlN4VFFVRlRja2dzVVVGQlZDeERRVUZyUW5OQ0xFZEJRV3hDTEVWQlFYVkNNRVlzUjBGQmRrSXNSVUZCTkVKRExFMUJRVFZDTEVWQlFXOURPMEZCUTJwRUxGTkJRVTg3UVVGRFRERkdMRlZCUVUwc2JVSkJSRVE3UVVGRlREWkhMR05CUVZVc1NVRkJTWFJDTEdsQ1FVRktMRU5CUVhOQ2VFWXNSMEZCZEVJc1JVRkJNa0l3Uml4SFFVRXpRaXhGUVVGblEwTXNUVUZCYUVNN1FVRkdUQ3hIUVVGUU8wRkJTVVFpTENKbWFXeGxJam9pTUM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbXhsZENCcFpHVnVkR2wwYVdWeklEMGdlMzA3WEc1c1pYUWdia2xrWlc1MGFYUjVJRDBnTUR0Y2JseHVMeXBjYmx4MFUyOGdkR2hoZENCaGJpQmhjSEJzYVdOaGRHbHZiaUJqWVc0Z2RYTmxJRWR2YjJkc1pTZHpJRTlCZFhSb0lESXVNQ0JoZFhSb1pXNTBhV05oZEdsdmJpQnplWE4wWlcwZ1ptOXlJSFZ6WlhJZ2JHOW5hVzRzWEc1Y2RHWnBjbk4wSUdseklISmxjWFZwY21Wa0lIUnZJSE5sZENCMWNDQmhJSEJ5YjJwbFkzUWdhVzRnZEdobElFZHZiMmRzWlNCRVpYWmxiRzl3WlhKeklFTnZibk52YkdVZ2RHOGdiMkowWVdsdUlFOUJkWFJvSURJdU1DQmpjbVZrWlc1MGFXRnNjeUJoYm1RZ2MyVjBJR0VnY21Wa2FYSmxZM1FnVlZKSkxseHVYSFJCSUhSbGMzUWdZV05qYjNWdWRDQjNZWE1nWTNKbFlYUmxaQ0IwYnlCelpYUWdkR2hsSUhCeWIycGxZM1FnYVc0Z2RHaGxJRWR2YjJkc1pTQkVaWFpsYkc5d1pYSnpJRU52Ym5OdmJHVWdkRzhnYjJKMFlXbHVJRTlCZFhSb0lESXVNQ0JqY21Wa1pXNTBhV0ZzY3l4Y2RIZHBkR2dnZEdobElHWnZiR3h2ZDJsdVp5QmpjbVZrWlc1MGFXRnNjenBjYmlBZ0lDQWdJRngwZFhObGNtNWhiV1U2SUc5d1pXNXBaSFJsYzNReE1FQm5iV0ZwYkM1amIyMWNiaUFnSUNBZ0lDQWdjR0Z6YzNkdmNtUTZJSFJsYzNSUGNHVnVTVVF4TUZ4dVhIUlVieUJoWkdRZ2JXOXlaU0JWVWtrbmN5d2dabTlzYkc5M0lIUm9aU0J6ZEdWd2N6cGNibHgwTWNLNklHTm9iMjl6WlNCMGFHVWdjSEp2YW1WamRDQW9JR05oYmlCaVpTQjBhR1VnVFhrZ1QzQmxia2xFSUZCeWIycGxZM1FwWEhRZ1puSnZiU0FnYUhSMGNITTZMeTlqYjI1emIyeGxMbVJsZG1Wc2IzQmxjbk11WjI5dloyeGxMbU52YlM5d2NtOXFaV04wYzJWc1pXTjBiM0l2WVhCcGN5OWpjbVZrWlc1MGFXRnNjeUIxYzJsdVp5QjBhR1VnWTNKbFpHVnVkR2xoYkhNZ2NISnZkbWxrWldRZ1lXSnZkbVV1WEc1Y2RETEN1aUJQY0dWdUlGUm9aU0JEYkdsbGJuUWdWMlZpSURFZ2JHbHpkR1ZrSUdsdUlFOUJkWFJvSURJdU1DQkRiR2xsYm5RZ1NVUW5jMXh1WEhRendyb2dRV1JrSUhSb1pTQlZVa2tnSUdsdUlIUm9aU0JoZFhSb2IzSnBlbVZrSUhKbFpHbHlaV04wSUZWU1NTQnpaV04wYVc5dUxseHVJQ0Ewd3JvZ1kyaGhibWRsSUhSb1pTQlNSVVJKVWtWRFZDQndZWEpoYldWMFpYSWdZbVZzYkc5M0lIZHBkR2dnZEdobElIQnlaWFJsYm1SbFpDQlZVa2xjYmlBcUwxeHVYRzVzWlhRZ1oyOXZaMnhsU1c1bWJ5QTlJSHRjYmlBZ1kyeHBaVzUwVTJWamNtVjBPaUFnSUNBZ0lDQWdJQ0FuV0hnMGNrdDFZMkkxV2xsVVlWaHNZMXBZT1VoTVpscFhKeXhjYmlBZ1kyeHBaVzUwU1VRNklDQWdJQ0FnSUNBZ0lDQWdJQ0FuT0RBNE16STVOVFkyTURFeUxYUnhjamh4YjJneE1URTVOREpuWkRKclp6QXdOM1F3Y3pobU1qYzNjbTlwTG1Gd2NITXVaMjl2WjJ4bGRYTmxjbU52Ym5SbGJuUXVZMjl0Snl4Y2JpQWdjbVZrYVhKbFkzUlZVa2s2SUNBZ0lDQWdJQ0FnSUNBZ2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3Z0t5QW5MeThuSUNzZ2JHOWpZWFJwYjI0dWFHOXpkRzVoYldVZ0t5QW9iRzlqWVhScGIyNHVjRzl5ZENBaFBUMGdKeWNnUHlBbk9pY2dLeUJzYjJOaGRHbHZiaTV3YjNKMElEb2dKeWNnS1N3Z1hHNGdJR2x6YzNWbGNqb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oyaDBkSEJ6T2k4dllXTmpiM1Z1ZEhNdVoyOXZaMnhsTG1OdmJTY3NYRzRnSUhSdmEyVnVSVzVrY0c5cGJuUTZJQ0FnSUNBZ0lDQWdKMmgwZEhCek9pOHZkM2QzTG1kdmIyZHNaV0Z3YVhNdVkyOXRMMjloZFhSb01pOTJOQzkwYjJ0bGJqOG5MRnh1SUNCcWQydHpWWEpwT2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RvZEhSd2N6b3ZMM2QzZHk1bmIyOW5iR1ZoY0dsekxtTnZiUzl2WVhWMGFESXZkak12WTJWeWRITS9KeXhjYmlBZ1lYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBPaUFuYUhSMGNITTZMeTloWTJOdmRXNTBjeTVuYjI5bmJHVXVZMjl0TDI4dmIyRjFkR2d5TDJGMWRHZy9KeXhjYmlBZ2RYTmxjbWx1Wm04NklDQWdJQ0FnSUNBZ0lDQWdJQ0FuYUhSMGNITTZMeTkzZDNjdVoyOXZaMnhsWVhCcGN5NWpiMjB2YjJGMWRHZ3lMM1l6TDNWelpYSnBibVp2UDJGalkyVnpjMTkwYjJ0bGJqMG5MRnh1SUNCMGIydGxia2x1Wm04NklDQWdJQ0FnSUNBZ0lDQWdJQ2RvZEhSd2N6b3ZMM2QzZHk1bmIyOW5iR1ZoY0dsekxtTnZiUzl2WVhWMGFESXZkak12ZEc5clpXNXBibVp2UDJsa1gzUnZhMlZ1UFNjc1hHNGdJR0ZqWTJWemMxUjVjR1U2SUNBZ0lDQWdJQ0FnSUNBZ0oyOW1abXhwYm1VbkxGeHVJQ0IwZVhCbE9pQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDZGpiMlJsSUhSdmEyVnVJR2xrWDNSdmEyVnVKeXhjYmlBZ2MyTnZjR1U2SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYjNCbGJtbGtKVEl3WlcxaGFXd2xNakJ3Y205bWFXeGxKeXhjYmlBZ2MzUmhkR1U2SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYzNSaGRHVW5YRzU5TzF4dUx5cGNibXhsZENCbmIyOW5iR1ZKYm1adklEMGdlMXh1SUNCamJHbGxiblJKUkRvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2M0TURnek1qazFOall3TVRJdGRIRnlPSEZ2YURFeE1UazBNbWRrTW10bk1EQTNkREJ6T0dZeU56ZHliMmt1WVhCd2N5NW5iMjluYkdWMWMyVnlZMjl1ZEdWdWRDNWpiMjBuTEZ4dUlDQnlaV1JwY21WamRGVlNTVG9nSUNBZ0lDQWdJQ0FnSUNCc2IyTmhkR2x2Ymk1d2NtOTBiMk52YkNBcklDY3ZMeWNnS3lCc2IyTmhkR2x2Ymk1b2IzTjBibUZ0WlNBcklDaHNiMk5oZEdsdmJpNXdiM0owSUNFOVBTQW5KeUEvSUNjNkp5QXJJR3h2WTJGMGFXOXVMbkJ2Y25RZ09pQW5KeUFwTENCY2JpQWdhWE56ZFdWeU9pQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmFIUjBjSE02THk5aFkyTnZkVzUwY3k1bmIyOW5iR1V1WTI5dEp5eGNiaUFnZEc5clpXNUZibVJ3YjJsdWREb2dJQ0FnSUNBZ0lDQW5hSFIwY0hNNkx5OTNkM2N1WjI5dloyeGxZWEJwY3k1amIyMHZiMkYxZEdneUwzWTBMM1J2YTJWdVB5Y3NYRzRnSUdwM2EzTlZjbWs2SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKMmgwZEhCek9pOHZkM2QzTG1kdmIyZHNaV0Z3YVhNdVkyOXRMMjloZFhSb01pOTJNeTlqWlhKMGN6OG5MRnh1SUNCaGRYUm9iM0pwYzJGMGFXOXVSVzVrY0c5cGJuUTZJQ2RvZEhSd2N6b3ZMMkZqWTI5MWJuUnpMbWR2YjJkc1pTNWpiMjB2Ynk5dllYVjBhREl2WVhWMGFEOG5MRnh1SUNCMWMyVnlhVzVtYnpvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RvZEhSd2N6b3ZMM2QzZHk1bmIyOW5iR1ZoY0dsekxtTnZiUzl2WVhWMGFESXZkak12ZFhObGNtbHVabTgvWVdOalpYTnpYM1J2YTJWdVBTY3NYRzRnSUhSdmEyVnVTVzVtYnpvZ0lDQWdJQ0FnSUNBZ0lDQWdKMmgwZEhCek9pOHZkM2QzTG1kdmIyZHNaV0Z3YVhNdVkyOXRMMjloZFhSb01pOTJNeTkwYjJ0bGJtbHVabTgvYVdSZmRHOXJaVzQ5Snl4Y2JpQWdZV05qWlhOelZIbHdaVG9nSUNBZ0lDQWdJQ0FnSUNBbmIyNXNhVzVsSnl4Y2JpQWdkSGx3WlRvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBbmRHOXJaVzRuTEZ4dUlDQnpZMjl3WlRvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNkb2RIUndjem92TDNkM2R5NW5iMjluYkdWaGNHbHpMbU52YlM5aGRYUm9MM1Z6WlhKcGJtWnZMbkJ5YjJacGJHVW5MRnh1SUNCemRHRjBaVG9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2R6ZEdGMFpTZGNibjA3S2k5Y2JseHVMeTltZFc1amRHbHZiaUIwYnlCd1lYSnpaU0IwYUdVZ2NYVmxjbmtnYzNSeWFXNW5JR2x1SUhSb1pTQm5hWFpsYmlCVlVrd2dkRzhnYjJKaGRHbHVJR05sY25SaGFXNGdkbUZzZFdWelhHNW1kVzVqZEdsdmJpQjFjbXhRWVhKelpYSW9kWEpzTENCdVlXMWxLU0I3WEc0Z0lHNWhiV1VnUFNCdVlXMWxMbkpsY0d4aFkyVW9MMXRjWEZ0ZEx5d2dKMXhjWEZ4Y1hGc25LUzV5WlhCc1lXTmxLQzliWEZ4ZFhTOHNJQ2RjWEZ4Y1hGeGRKeWs3WEc0Z0lHeGxkQ0J5WldkbGVGTWdQU0FuVzF4Y1hGd2pKajlkSnlBcklHNWhiV1VnS3lBblBTaGJYaVlqWFNvcEp6dGNiaUFnYkdWMElISmxaMlY0SUQwZ2JtVjNJRkpsWjBWNGNDaHlaV2RsZUZNcE8xeHVJQ0JzWlhRZ2NtVnpkV3gwY3lBOUlISmxaMlY0TG1WNFpXTW9kWEpzS1R0Y2JpQWdhV1lnS0hKbGMzVnNkSE1nUFQwOUlHNTFiR3dwWEc0Z0lISmxkSFZ5YmlBbkp6dGNiaUFnWld4elpWeHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4MGMxc3hYVHRjYm4xY2JseHVablZ1WTNScGIyNGdjMlZ1WkVoVVZGQlNaWEYxWlhOMEtHMWxkR2h2WkN3Z2RYSnNLU0I3WEc0Z0lHeGxkQ0I0YUhJZ1BTQnVaWGNnV0UxTVNIUjBjRkpsY1hWbGMzUW9LVHRjYmlBZ2FXWWdLQ2QzYVhSb1EzSmxaR1Z1ZEdsaGJITW5JR2x1SUhob2Npa2dlMXh1SUNBZ0lIaG9jaTV2Y0dWdUtHMWxkR2h2WkN3Z2RYSnNMQ0IwY25WbEtUdGNiaUFnZlNCbGJITmxJR2xtSUNoMGVYQmxiMllnV0VSdmJXRnBibEpsY1hWbGMzUWdJVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBdkx5QlBkR2hsY25kcGMyVXNJR05vWldOcklHbG1JRmhFYjIxaGFXNVNaWEYxWlhOMExseHVJQ0FnSUM4dklGaEViMjFoYVc1U1pYRjFaWE4wSUc5dWJIa2daWGhwYzNSeklHbHVJRWxGTENCaGJtUWdhWE1nU1VVbmN5QjNZWGtnYjJZZ2JXRnJhVzVuSUVOUFVsTWdjbVZ4ZFdWemRITXVYRzRnSUNBZ2VHaHlJRDBnYm1WM0lGaEViMjFoYVc1U1pYRjFaWE4wS0NrN1hHNGdJQ0FnZUdoeUxtOXdaVzRvYldWMGFHOWtMQ0IxY213cE8xeHVJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDOHZJRTkwYUdWeWQybHpaU3dnUTA5U1V5QnBjeUJ1YjNRZ2MzVndjRzl5ZEdWa0lHSjVJSFJvWlNCaWNtOTNjMlZ5TGx4dUlDQWdJSGhvY2lBOUlHNTFiR3c3WEc0Z0lIMWNiaUFnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzY21WcVpXTjBLU0I3WEc0Z0lDQWdhV1lnS0hob2Npa2dlMXh1SUNBZ0lDQWdlR2h5TG05dWNtVmhaSGx6ZEdGMFpXTm9ZVzVuWlNBOUlHWjFibU4wYVc5dUtHVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIaG9jaTV5WldGa2VWTjBZWFJsSUQwOVBTQTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSGhvY2k1emRHRjBkWE1nUFQwOUlESXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsdVptOGdQU0JLVTA5T0xuQmhjbk5sS0hob2NpNXlaWE53YjI1elpWUmxlSFFwTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTaHBibVp2S1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSGhvY2k1emRHRjBkWE1nUFQwOUlEUXdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtDZFVhR1Z5WlNCM1lYTWdZVzRnWlhKeWIzSWdjSEp2WTJWemMybHVaeUIwYUdVZ2RHOXJaVzRuS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2R6YjIxbGRHaHBibWNnWld4elpTQnZkR2hsY2lCMGFHRnVJREl3TUNCM1lYTWdjbVYwZFhKdVpXUW5LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMDdYRzRnSUNBZ0lDQjRhSEl1YzJWdVpDZ3BPMXh1SUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNCeVpXcGxZM1FvSjBOUFVsTWdibTkwSUhOMWNIQnZjblJsWkNjcE8xeHVJQ0FnSUgxY2JpQWdmU2s3WEc1OVhHNWNiaThxS2x4dUtpQkdkVzVqZEdsdmJpQjBieUJsZUdOb1lXNW5aU0IwYUdVZ1kyOWtaU0J5WldObGFYWmxaQ0IwYnlCMGFHVWdhV1FnVkc5clpXNHNJR0ZqWTJWemN5QjBiMnRsYmlCaGJtUWdZU0J5WldaeVpYTm9JSFJ2YTJWdVhHNHFYRzRxTDF4dWJHVjBJR1Y0WTJoaGJtZGxRMjlrWlNBOUlDaG1kVzVqZEdsdmJpaGpiMlJsS1NCN1hHNGdJR3hsZENCcElEMGdaMjl2WjJ4bFNXNW1ienRjYmx4dUlDQnNaWFFnVlZKTUlEMGdhUzUwYjJ0bGJrVnVaSEJ2YVc1MElDc2dKMk52WkdVOUp5QXJJR052WkdVZ0t5QW5KbU5zYVdWdWRGOXBaRDBuSUNzZ2FTNWpiR2xsYm5SSlJDQXJJQ2NtWTJ4cFpXNTBYM05sWTNKbGREMG5JQ3NnYVM1amJHbGxiblJUWldOeVpYUWdLeUFuSm5KbFpHbHlaV04wWDNWeWFUMG5JQ3NnYVM1eVpXUnBjbVZqZEZWU1NTQXJJQ2NtWjNKaGJuUmZkSGx3WlQxaGRYUm9iM0pwZW1GMGFXOXVYMk52WkdVbVlXTmpaWE56WDNSNWNHVTlKeUFySUdrdVlXTmpaWE56Vkhsd1pUdGNibHh1SUNBdkwyeGxkQ0JWVWt3Z1BTQTlJR2t1ZEc5clpXNUZibVJ3YjJsdWRDQXJJQ2RqYkdsbGJuUmZhV1E5SnlBcklHa3VZMnhwWlc1MFNVUWdLeUFuSm1Oc2FXVnVkRjl6WldOeVpYUTlKeUFySUdrdVkyeHBaVzUwVTJWamNtVjBJQ3NnSnlaeVpXWnlaWE5vWDNSdmEyVnVQU2NnS3lCamIyUmxJQ3NnSnlabmNtRnVkRjkwZVhCbFBYSmxabkpsYzJoZmRHOXJaVzRuTzF4dVhHNGdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBJSHRjYmlBZ0lDQnpaVzVrU0ZSVVVGSmxjWFZsYzNRb0oxQlBVMVFuTENCVlVrd3BMblJvWlc0b1puVnVZM1JwYjI0b2FXNW1ieWtnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzVzYjJjb0oxdEhiMjluYkdWSlpIQlFjbTk0ZVM1bGVHTm9ZVzVuWlVOdlpHVmRJSEpsZEhWeWJtVmtJR2x1Wm04NklDY3NJR2x1Wm04cE8xeHVJQ0FnSUNBZ2NtVnpiMngyWlNocGJtWnZLVHRjYmlBZ0lDQjlMQ0JtZFc1amRHbHZiaWhsY25KdmNpa2dlMXh1SUNBZ0lDQWdjbVZxWldOMEtHVnljbTl5S1R0Y2JpQWdJQ0I5S1R0Y2JseHVJQ0I5S1R0Y2JuMHBPMXh1WEc1c1pYUWdaWGhqYUdGdVoyVlNaV1p5WlhOb1ZHOXJaVzRnUFNBb1puVnVZM1JwYjI0b2NtVm1jbVZ6YUZSdmEyVnVLU0I3WEc0Z0lHeGxkQ0JwSUQwZ1oyOXZaMnhsU1c1bWJ6dGNibHh1SUNCc1pYUWdWVkpNSUQwZ2FTNTBiMnRsYmtWdVpIQnZhVzUwSUNzZ0oyTnNhV1Z1ZEY5cFpEMG5JQ3NnYVM1amJHbGxiblJKUkNBcklDY21ZMnhwWlc1MFgzTmxZM0psZEQwbklDc2dhUzVqYkdsbGJuUlRaV055WlhRZ0t5QW5KbkpsWm5KbGMyaGZkRzlyWlc0OUp5QXJJSEpsWm5KbGMyaFViMnRsYmlBcklDY21aM0poYm5SZmRIbHdaVDF5WldaeVpYTm9YM1J2YTJWdUp6dGNibHh1SUNCeVpYUjFjbTRnYm1WM0lGQnliMjFwYzJVb1puVnVZM1JwYjI0b2NtVnpiMngyWlN3Z2NtVnFaV04wS1NCN1hHNGdJQ0FnYzJWdVpFaFVWRkJTWlhGMVpYTjBLQ2RRVDFOVUp5d2dWVkpNS1M1MGFHVnVLR1oxYm1OMGFXOXVLR2x1Wm04cElIdGNiaUFnSUNBZ0lISmxjMjlzZG1Vb2FXNW1ieWs3WEc0Z0lDQWdmU3dnWm5WdVkzUnBiMjRvWlhKeWIzSXBJSHRjYmlBZ0lDQWdJSEpsYW1WamRDaGxjbkp2Y2lrN1hHNGdJQ0FnZlNrN1hHNWNiaUFnZlNrN1hHNTlLVHRjYmx4dUx5b3FYRzRxSUVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5SUZCeWIzaDVYRzRxTDF4dVpYaHdiM0owSUd4bGRDQkpaSEJRY205NGVTQTlJSHRjYmx4dUlDQXZLaXBjYmlBZ0tpQkdkVzVqZEdsdmJpQjBieUIyWVd4cFpHRjBaU0JoYmlCcFpHVnVkR2wwZVNCQmMzTmxjblJwYjI0Z2NtVmpaV2wyWldSY2JpQWdLaUJVVDBSUElHRmtaQ0JrWlhSaGFXeHpJRzltSUhSb1pTQnBiWEJzWlcxbGJuUmhkR2x2Yml3Z1lXNWtJR2x0Y0hKdmRtVWdkR2hsSUdsdGNHeGxiV1Z1ZEdGMGFXOXVYRzRnSUNwY2JpQWdLaUJBY0dGeVlXMGdJSHRoYzNObGNuUnBiMjU5SUNBZ0lFbGtaVzUwYVhSNUlFRnpjMlZ5ZEdsdmJpQjBieUJpWlNCMllXeHBaR0YwWldSY2JpQWdLaUJBY0dGeVlXMGdJSHR2Y21sbmFXNTlJQ0FnSUNBZ0lFOXlhV2RwYmlCd1lYSmhiV1YwWlhJZ2RHaGhkQ0JwWkdWdWRHbG1hV1Z6SUhSb1pTQnZjbWxuYVc0Z2IyWWdkR2hsSUZKVVExQmxaWEpEYjI1dVpXTjBhVzl1WEc0Z0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdJQ0FnSUNCU1pYUjFjbTV6SUdFZ2NISnZiV2x6WlNCM2FYUm9JSFJvWlNCcFpHVnVkR2wwZVNCaGMzTmxjblJwYjI0Z2RtRnNhV1JoZEdsdmJpQnlaWE4xYkhSY2JpQWdLaTljYmlBZ2RtRnNhV1JoZEdWQmMzTmxjblJwYjI0NklDaGhjM05sY25ScGIyNHNJRzl5YVdkcGJpa2dQVDRnZTF4dUlDQWdJR052Ym5OdmJHVXVhVzVtYnlnblcwZHZiMmRzWlVsa2NGQnliM2g1TG5aaGJHbGtZWFJsUVhOelpYSjBhVzl1VUhKdmVIbGRJR0Z6YzJWeWRHbHZiam9nSnl3Z1lYUnZZaWhoYzNObGNuUnBiMjRwS1Z4dUx5OGdJQ0FnWTI5dWMyOXNaUzVwYm1adktDZDJZV3hwWkdGMFpVRnpjMlZ5ZEdsdmJsQnliM2g1T21GMGIySW9ZWE56WlhKMGFXOXVLU2NzSUdGMGIySW9ZWE56WlhKMGFXOXVLU2s3WEc1Y2JpQWdJQ0F2TDFSUFJFOGdZMmhsWTJzZ2RHaGxJSFpoYkhWbGN5QjNhWFJvSUhSb1pTQm9ZWE5vSUhKbFkyVnBkbVZrWEc0Z0lDOHZJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3h5WldwbFkzUXBJSHRjYmx4dUlDQWdJQ0FnYkdWMElHUmxZMjlrWldSRGIyNTBaVzUwTWlBOUlHRjBiMklvWVhOelpYSjBhVzl1S1R0Y2JpQWdJQ0FnSUd4bGRDQmpiMjUwWlc1MElEMGdTbE5QVGk1d1lYSnpaU2hrWldOdlpHVmtRMjl1ZEdWdWRESXBPMXh1SUNBZ0lDQWdiR1YwSUdsa1ZHOXJaVzVUY0d4cGRHVmtJRDBnWTI5dWRHVnVkQzUwYjJ0bGJrbEVMbk53YkdsMEtDY3VKeWs3WEc0Z0lDQWdJQ0JzWlhRZ2FXUlViMnRsYmlBOUlFcFRUMDR1Y0dGeWMyVW9ZWFJ2WWlocFpGUnZhMlZ1VTNCc2FYUmxaRnN4WFNrcE8xeHVYRzRnSUNBZ0lDQXZMM0psYzI5c2RtVW9lMmxrWlc1MGFYUjVPaUJwWkZSdmEyVnVMbVZ0WVdsc0xDQmpiMjUwWlc1MGN6b2dhV1JVYjJ0bGJpNXViMjVqWlgwcE8xeHVYRzRnSUNBZ0x5OTlLVHRjYmx4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVUhKdmJXbHpaU2htZFc1amRHbHZiaWh5WlhOdmJIWmxMSEpsYW1WamRDa2dlMXh1SUNBZ0lDQWdiR1YwSUdrZ1BTQm5iMjluYkdWSmJtWnZPMXh1SUNBZ0lDQWdiR1YwSUdSbFkyOWtaV1JEYjI1MFpXNTBJRDBnWVhSdllpaGhjM05sY25ScGIyNHBPMXh1SUNBZ0lDQWdiR1YwSUdOdmJuUmxiblFnUFNCS1UwOU9MbkJoY25ObEtHUmxZMjlrWldSRGIyNTBaVzUwS1R0Y2JpQWdJQ0FnSUhObGJtUklWRlJRVW1WeGRXVnpkQ2duUjBWVUp5d2dhUzUwYjJ0bGJrbHVabThnS3lCamIyNTBaVzUwTG5SdmEyVnVTVVFwTG5Sb1pXNG9jbVZ6ZFd4MElEMCtJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tFcFRUMDR1YzNSeWFXNW5hV1o1S0hKbGMzVnNkQ2tnUFQwOUlFcFRUMDR1YzNSeWFXNW5hV1o1S0dOdmJuUmxiblF1ZEc5clpXNUpSRXBUVDA0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2g3YVdSbGJuUnBkSGs2SUdOdmJuUmxiblF1ZEc5clpXNUpSRXBUVDA0dVpXMWhhV3dzSUdOdmJuUmxiblJ6T2lCamIyNTBaVzUwTG5SdmEyVnVTVVJLVTA5T2ZTazdYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLQ2RwYm5aaGJHbGtKeWs3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcExtTmhkR05vS0dWeWNpQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGFtVmpkQ2hsY25JcE8xeHVJQ0FnSUNBZ2ZTazdYRzRnSUNBZ2ZTazdYRzRnSUgwc1hHNWNiaUFnY21WbWNtVnphRUZ6YzJWeWRHbHZiam9nS0dsa1pXNTBhWFI1S1NBOVBpQjdYRzRnSUNBZ0x5OWpiMjV6YjJ4bExteHZaeWduVUZKUFdGazZjbVZtY21WemFFRnpjMlZ5ZEdsdmJqcHZiR1JKWkdWdWRHbDBlU2NzSUdsa1pXNTBhWFI1S1R0Y2JpQWdJQ0JzWlhRZ2FTQTlJR2R2YjJkc1pVbHVabTg3WEc1Y2JpQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvWm5WdVkzUnBiMjRvY21WemIyeDJaU3dnY21WcVpXTjBLU0I3WEc0Z0lDQWdJQ0JwWmlBb2FXUmxiblJwZEhrdWFXNW1ieTV5WldaeVpYTm9WRzlyWlc0cElIdGNiaUFnSUNBZ0lDQWdaWGhqYUdGdVoyVlNaV1p5WlhOb1ZHOXJaVzRvYVdSbGJuUnBkSGt1YVc1bWJ5NXlaV1p5WlhOb1ZHOXJaVzRwTG5Sb1pXNG9ablZ1WTNScGIyNG9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2FXNW1iMVJ2YTJWdVZWSk1JRDBnYVM1MWMyVnlhVzVtYnlBcklIWmhiSFZsTG1GalkyVnpjMTkwYjJ0bGJqdGNiaUFnSUNBZ0lDQWdJQ0J6Wlc1a1NGUlVVRkpsY1hWbGMzUW9KMGRGVkNjc0lHbHVabTlVYjJ0bGJsVlNUQ2t1ZEdobGJpaG1kVzVqZEdsdmJpaHBibVp2Vkc5clpXNHBJSHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUdsa1pXNTBhWFI1UW5WdVpHeGxJRDBnZTJGalkyVnpjMVJ2YTJWdU9pQjJZV3gxWlM1aFkyTmxjM05mZEc5clpXNHNJR2xrVkc5clpXNDZJSFpoYkhWbExtbGtYM1J2YTJWdUxDQnlaV1p5WlhOb1ZHOXJaVzQ2SUdsa1pXNTBhWFI1TG1sdVptOHVjbVZtY21WemFGUnZhMlZ1TENCMGIydGxibFI1Y0dVNklHbGtaVzUwYVhSNUxtbHVabTh1ZEc5clpXNVVlWEJsTENCcGJtWnZWRzlyWlc0NklHbHVabTlVYjJ0bGJuMDdYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JVYjJ0bGJsVlNUQ0E5SUdrdWRHOXJaVzVKYm1adklDc2dkbUZzZFdVdWFXUmZkRzlyWlc0N1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dmIySjBZV2x1SUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUhSb1pTQjFjMlZ5SUdsa1ZHOXJaVzVjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxibVJJVkZSUVVtVnhkV1Z6ZENnblIwVlVKeXdnYVdSVWIydGxibFZTVENrdWRHaGxiaWhtZFc1amRHbHZiaWhwWkZSdmEyVnVLU0I3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdSbGJuUnBkSGxDZFc1a2JHVXVkRzlyWlc1SlJFcFRUMDRnUFNCcFpGUnZhMlZ1TzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkdWdWRHbDBlVUoxYm1Sc1pTNWxlSEJwY21WeklEMGdhV1JVYjJ0bGJpNWxlSEE3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xrWlc1MGFYUjVRblZ1Wkd4bExtVnRZV2xzSUQwZ2FXUlViMnRsYmk1bGJXRnBiRHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2IyeGtTVVJVYjJ0bGJpQTlJRXBUVDA0dWNHRnljMlVvWVhSdllpaHBaR1Z1ZEdsMGVTNWhjM05sY25ScGIyNHBLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUc5c1pFbGtWRzlyWlc1VGNHeHBkR1ZrSUQwZ2IyeGtTVVJVYjJ0bGJpNTBiMnRsYmtsRUxuTndiR2wwS0NjdUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J2YkdSRVpXTnZaR1ZrU1VSVWIydGxiaUE5SUVwVFQwNHVjR0Z5YzJVb1lYUnZZaWh2YkdSSlpGUnZhMlZ1VTNCc2FYUmxaRnN4WFNrcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JPYjI1alpTQTlJRzlzWkVSbFkyOWtaV1JKUkZSdmEyVnVMbTV2Ym1ObE8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0J5WldObGFYWmxaRWxFVkc5clpXNGdQU0IyWVd4MVpTNXBaRjkwYjJ0bGJqdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJR2xrVkc5clpXNVRjR3hwZEdWa0lEMGdjbVZqWldsMlpXUkpSRlJ2YTJWdUxuTndiR2wwS0NjdUp5azdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeGxkQ0JrWldOdlpHVmtTVVJVYjJ0bGJpQTlJRXBUVDA0dWNHRnljMlVvWVhSdllpaHBaRlJ2YTJWdVUzQnNhWFJsWkZzeFhTa3BPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR1JsWTI5a1pXUkpSRlJ2YTJWdUxtNXZibU5sSUQwZ2FXUk9iMjVqWlR0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbHVjMlZ5ZEdWa1RtOXVZMlVnUFNCaWRHOWhLRXBUVDA0dWMzUnlhVzVuYVdaNUtHUmxZMjlrWldSSlJGUnZhMlZ1S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnVaWGRKUkZSdmEyVnVJRDBnYVdSVWIydGxibE53YkdsMFpXUmJNRjBnS3lBbkxpY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzV6WlhKMFpXUk9iMjVqWlNBcklDY3VKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkZSdmEyVnVVM0JzYVhSbFpGc3lYVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1lYTnpaWEowYVc5dUlEMGdZblJ2WVNoS1UwOU9Mbk4wY21sdVoybG1lU2g3ZEc5clpXNUpSRG9nYm1WM1NVUlViMnRsYml3Z2RHOXJaVzVKUkVwVFQwNDZJR2xrVkc5clpXNTlLU2s3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCcFpIQkNkVzVrYkdVZ1BTQjdaRzl0WVdsdU9pQW5aMjl2WjJ4bExtTnZiU2NzSUhCeWIzUnZZMjlzT2lBblQwbEVReWQ5TzF4dVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dlZFOUVUeUJrWld4bGRHVWdiR0YwWlhJZ2RHaGxJR1pwWld4a0lHbHVabTlVYjJ0bGJpd2dZVzVrSUdSbGJHVjBaU0IwYUdVZ2JtVmxaQ0JwYmlCMGFHVWdaWGhoYlhCc1pWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdjbVYwZFhKdVZtRnNkV1VnUFNCN1lYTnpaWEowYVc5dU9pQmhjM05sY25ScGIyNHNJR2xrY0RvZ2FXUndRblZ1Wkd4bExDQnBibVp2T2lCcFpHVnVkR2wwZVVKMWJtUnNaU3dnYVc1bWIxUnZhMlZ1T2lCcGJtWnZWRzlyWlc1OU8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBdkwyTnZibk52YkdVdWJHOW5LQ2RRVWs5WVdUcHlaV1p5WlhOb1FYTnpaWEowYVc5dU9tNWxkMGxrWlc1MGFYUjVKeXdnY21WMGRYSnVWbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTnZiSFpsS0hKbGRIVnlibFpoYkhWbEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQWdJSDBwTzF4dUlDQWdJQ0FnSUNCOUtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtUdGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdLaUJHZFc1amRHbHZiaUIwYnlCblpXNWxjbUYwWlNCaGJpQnBaR1Z1ZEdsMGVTQkJjM05sY25ScGIyNWNiaUFnS2lCVVQwUlBJR0ZrWkNCa1pYUmhhV3h6SUc5bUlIUm9aU0JwYlhCc1pXMWxiblJoZEdsdmJpd2dZVzVrSUdsdGNISnZkbVVnYVcxd2JHVnRaVzUwWVhScGIyNWNiaUFnS2x4dUlDQXFJRUJ3WVhKaGJTQWdlMk52Ym5SbGJuUnpmU0JVYUdVZ1kyOXVkR1Z1ZEhNZ2FXNWpiSFZrWlhNZ2FXNW1iM0p0WVhScGIyNGdZV0p2ZFhRZ2RHaGxJR2xrWlc1MGFYUjVJSEpsWTJWcGRtVmtYRzRnSUNvZ1FIQmhjbUZ0SUNCN2IzSnBaMmx1ZlNCUGNtbG5hVzRnY0dGeVlXMWxkR1Z5SUhSb1lYUWdhV1JsYm5ScFptbGxjeUIwYUdVZ2IzSnBaMmx1SUc5bUlIUm9aU0JTVkVOUVpXVnlRMjl1Ym1WamRHbHZibHh1SUNBcUlFQndZWEpoYlNBZ2UzVnpaWEp1WVcxbFNHbHVkSDBnYjNCMGFXOXVZV3dnZFhObGNtNWhiV1ZJYVc1MElIQmhjbUZ0WlhSbGNseHVJQ0FxSUVCeVpYUjFjbTRnZTFCeWIyMXBjMlY5SUhKbGRIVnlibk1nWVNCd2NtOXRhWE5sSUhkcGRHZ2dZVzRnYVdSbGJuUnBkSGtnWVhOelpYSjBhVzl1WEc0Z0lDb3ZYRzRnSUdkbGJtVnlZWFJsUVhOelpYSjBhVzl1T2lBb1kyOXVkR1Z1ZEhNc0lHOXlhV2RwYml3Z2FHbHVkQ2tnUFQ0Z2UxeHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGJSMjl2WjJ4bFNXUndVSEp2ZUhrdVoyVnVaWEpoZEdWQmMzTmxjblJwYjI0NlkyOXVkR1Z1ZEhOZEp5d2dZMjl1ZEdWdWRITXBPMXh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiUjI5dloyeGxTV1J3VUhKdmVIa3VaMlZ1WlhKaGRHVkJjM05sY25ScGIyNDZiM0pwWjJsdVhTY3NJRzl5YVdkcGJpazdYRzRnSUNBZ1kyOXVjMjlzWlM1c2IyY29KMXRIYjI5bmJHVkpaSEJRY205NGVTNW5aVzVsY21GMFpVRnpjMlZ5ZEdsdmJqcG9hVzUwWFNjc0lHaHBiblFwTzF4dUlDQWdJR3hsZENCcElEMGdaMjl2WjJ4bFNXNW1ienRjYmx4dUlDQWdJQzh2YzNSaGNuUWdkR2hsSUd4dloybHVJSEJvWVhObFhHNGdJQ0FnTHk5VVQwUlBJR3hoZEdWeUlITm9iM1ZzWkNCaVpTQmtaV1pwYm1Wa0lHRWdZbVYwZEdWeUlHRndjSEp2WVdOb1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRm9hVzUwS1NCN1hHNGdJQ0FnSUNBZ0lDOHFkSEo1SUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZDJsdVpHOTNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWE52YkhabEtDZDFjbXduS1R0Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y205eUtTQjdLaTljYmx4dUlDQWdJQ0FnSUNCc1pYUWdjbVZ4ZFdWemRGVnliQ0E5SUdrdVlYVjBhRzl5YVhOaGRHbHZia1Z1WkhCdmFXNTBJQ3NnSjNOamIzQmxQU2NnS3lCcExuTmpiM0JsSUNzZ0p5WmpiR2xsYm5SZmFXUTlKeUFySUdrdVkyeHBaVzUwU1VRZ0t5QW5KbkpsWkdseVpXTjBYM1Z5YVQwbklDc2dhUzV5WldScGNtVmpkRlZTU1NBcklDY21jbVZ6Y0c5dWMyVmZkSGx3WlQxamIyUmxKeUFySUM4cWFTNTBlWEJsSUNzcUx5QW5Kbk4wWVhSbFBTY2dLeUJwTG5OMFlYUmxJQ3NnSnlad2NtOXRjSFE5WTI5dWMyVnVkQ1poWTJObGMzTmZkSGx3WlQwbklDc2dhUzVoWTJObGMzTlVlWEJsSUNzZ0p5WnViMjVqWlQwbklDc2dZMjl1ZEdWdWRITTdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkYlIyOXZaMnhsU1dSd1VISnZlSGt1WjJWdVpYSmhkR1ZCYzNObGNuUnBiMjVkSUU1UFgwaEpUbFE2SUhKbGFtVmpkR2x1WnlCM2FYUm9JSEpsY1hWbGMzUlZjbXdnSnl3Z2NtVnhkV1Z6ZEZWeWJDazdYRzVjYmlBZ0lDQWdJQ0FnY21WcVpXTjBLSHR1WVcxbE9pQW5TV1JRVEc5bmFXNUZjbkp2Y2ljc0lHeHZaMmx1VlhKc09pQnlaWEYxWlhOMFZYSnNmU2s3WEc1Y2JpQWdJQ0FnSUM4dklDQjlYRzVjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJQzh2SUhSb1pTQnlaWEYxWlhOMElHaGhkbVVnWVd4eVpXRmtlU0JpWldWdUlHMWhaR1VzSUhOdklHbGtjRkJTYjNoNUlIZHBiR3dnWlhoamFHRnVaMlVnZEdobElIUnZhMlZ1Y3lCaGJHOXVaeUIwYnlCMGFHVWdhV1J3TENCMGJ5QnZZblJoYVc0Z2RHaGxJR2x1Wm05eWJXRjBhVzl1SUc1bFkyVnpjMkZ5ZVZ4dUlDQWdJQ0FnSUNCc1pYUWdZV05qWlhOelZHOXJaVzRnUFNCMWNteFFZWEp6WlhJb2FHbHVkQ3dnSjJGalkyVnpjMTkwYjJ0bGJpY3BPMXh1SUNBZ0lDQWdJQ0JzWlhRZ2FXUlViMnRsYmlBOUlIVnliRkJoY25ObGNpaG9hVzUwTENBbmFXUmZkRzlyWlc0bktUdGNiaUFnSUNBZ0lDQWdiR1YwSUdOdlpHVWdQU0IxY214UVlYSnpaWElvYUdsdWRDd2dKMk52WkdVbktUdGNibHh1SUNBZ0lDQWdJQ0F2TDJOdmJuTnZiR1V1Ykc5bktDZEhUMDlIVEVWZlVGSlBXRmxmU0VsT1ZEb2dKeXdnYUdsdWRDazdYRzVjYmlBZ0lDQWdJQ0FnWlhoamFHRnVaMlZEYjJSbEtHTnZaR1VwTG5Sb1pXNG9ablZ1WTNScGIyNG9kbUZzZFdVcElIdGNibHh1SUNBZ0lDQWdJQ0FnSUM4dmIySjBZV2x1SUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUhSb1pTQjFjMlZ5WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJR2x1Wm05VWIydGxibFZTVENBOUlHa3VkWE5sY21sdVptOGdLeUIyWVd4MVpTNWhZMk5sYzNOZmRHOXJaVzQ3WEc0Z0lDQWdJQ0FnSUNBZ2MyVnVaRWhVVkZCU1pYRjFaWE4wS0NkSFJWUW5MQ0JwYm1adlZHOXJaVzVWVWt3cExuUm9aVzRvWm5WdVkzUnBiMjRvYVc1bWIxUnZhMlZ1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblcwZHZiMmRzWlVsa2NGQnliM2g1TG1kbGJtVnlZWFJsUVhOelpYSjBhVzl1WFNCdlluUmhhVzVsWkNCcGJtWnZWRzlyWlc0Z0p5d2dhVzVtYjFSdmEyVnVLVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lGeHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbGtaVzUwYVhSNVFuVnVaR3hsSUQwZ2UyRmpZMlZ6YzFSdmEyVnVPaUIyWVd4MVpTNWhZMk5sYzNOZmRHOXJaVzRzSUdsa1ZHOXJaVzQ2SUhaaGJIVmxMbWxrWDNSdmEyVnVMQ0J5WldaeVpYTm9WRzlyWlc0NklIWmhiSFZsTG5KbFpuSmxjMmhmZEc5clpXNHNJSFJ2YTJWdVZIbHdaVG9nZG1Gc2RXVXVkRzlyWlc1ZmRIbHdaU3dnYVc1bWIxUnZhMlZ1T2lCcGJtWnZWRzlyWlc1OU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNCc1pYUWdhV1JVYjJ0bGJsVlNUQ0E5SUdrdWRHOXJaVzVKYm1adklDc2dkbUZzZFdVdWFXUmZkRzlyWlc0N1hHNWNiaUFnSUNBZ0lDQWdJQ0FnSUM4dmIySjBZV2x1SUdsdVptOXliV0YwYVc5dUlHRmliM1YwSUhSb1pTQjFjMlZ5SUdsa1ZHOXJaVzVjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxibVJJVkZSUVVtVnhkV1Z6ZENnblIwVlVKeXdnYVdSVWIydGxibFZTVENrdWRHaGxiaWhtZFc1amRHbHZiaWhwWkZSdmEyVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXViRzluS0NkYlIyOXZaMnhsU1dSd1VISnZlSGt1WjJWdVpYSmhkR1ZCYzNObGNuUnBiMjVkSUc5aWRHRnBibVZrSUdsa1ZHOXJaVzRnSnl3Z2FXUlViMnRsYmlrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkdWdWRHbDBlVUoxYm1Sc1pTNTBiMnRsYmtsRVNsTlBUaUE5SUdsa1ZHOXJaVzQ3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xrWlc1MGFYUjVRblZ1Wkd4bExtVjRjR2x5WlhNZ1BTQnBaRlJ2YTJWdUxtVjRjRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1JsYm5ScGRIbENkVzVrYkdVdVpXMWhhV3dnUFNCcFpGUnZhMlZ1TG1WdFlXbHNPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR3hsZENCaGMzTmxjblJwYjI0Z1BTQmlkRzloS0VwVFQwNHVjM1J5YVc1bmFXWjVLSHQwYjJ0bGJrbEVPaUIyWVd4MVpTNXBaRjkwYjJ0bGJpd2dkRzlyWlc1SlJFcFRUMDQ2SUdsa1ZHOXJaVzU5S1NrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUd4bGRDQnBaSEJDZFc1a2JHVWdQU0I3Wkc5dFlXbHVPaUFuWjI5dloyeGxMbU52YlNjc0lIQnliM1J2WTI5c09pQW5UMGxFUXlkOU8xeHVYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZWRTlFVHlCa1pXeGxkR1VnYkdGMFpYSWdkR2hsSUdacFpXeGtJR2x1Wm05VWIydGxiaXdnWVc1a0lHUmxiR1YwWlNCMGFHVWdibVZsWkNCcGJpQjBhR1VnWlhoaGJYQnNaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY21WMGRYSnVWbUZzZFdVZ1BTQjdZWE56WlhKMGFXOXVPaUJoYzNObGNuUnBiMjRzSUdsa2NEb2dhV1J3UW5WdVpHeGxMQ0JwYm1adk9pQnBaR1Z1ZEdsMGVVSjFibVJzWlN3Z2FXNW1iMVJ2YTJWdU9pQnBibVp2Vkc5clpXNTlPMXh1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2xrWlc1MGFYUnBaWE5iYmtsa1pXNTBhWFI1WFNBOUlISmxkSFZ5YmxaaGJIVmxPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQXJLMjVKWkdWdWRHbDBlVHRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emIyeGxMbXh2WnlnblcwZHZiMmRzWlVsa2NGQnliM2g1TG1kbGJtVnlZWFJsUVhOelpYSjBhVzl1WFNCeVpYUjFjbTVwYm1jNklDY3NJRXBUVDA0dWMzUnlhVzVuYVdaNUtISmxkSFZ5YmxaaGJIVmxLU2s3WEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemIyeDJaU2h5WlhSMWNtNVdZV3gxWlNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TENCbWRXNWpkR2x2YmlobEtTQjdYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVXBPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTazdYRzRnSUNBZ0lDQWdJQ0FnZlN3Z1puVnVZM1JwYjI0b1pYSnliM0lwSUh0Y2JseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLR1Z5Y205eUtUdGNiaUFnSUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTd2dablZ1WTNScGIyNG9aWEp5S1NCN1hHNWNiaUFnSUNBZ0lDQWdJQ0J5WldwbFkzUW9aWEp5S1R0Y2JpQWdJQ0FnSUNBZ2ZTazdYRzVjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVHRjYmlBZ2ZWeHVmVHRjYmx4dUx5b3FYRzRxSUVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5SUZCeWIzaDVJRkJ5YjNSdlkyOXNJRk4wZFdKY2Jpb3ZYRzVqYkdGemN5QkpaSEJRY205NGVWQnliM1J2VTNSMVlpQjdYRzVjYmlBZ0x5b3FYRzRnSUNvZ1EyOXVjM1J5ZFdOMGIzSWdiMllnZEdobElFbGtjRkJ5YjNoNUlGTjBkV0pjYmlBZ0tpQlVhR1VnWTI5dWMzUnlkV04wYjNJZ1lXUmtJR0VnYkdsemRHVnVaWElnYVc0Z2RHaGxJRzFsYzNOaFoyVkNkWE1nY21WalpXbDJaV1FnWVc1a0lITjBZWEowSUdFZ2QyVmlJSGR2Y210bGNpQjNhWFJvSUhSb1pTQnBaSEJRY205NGVTQnlaV05sYVhabFpGeHVJQ0FxWEc0Z0lDb2dRSEJoY21GdElDQjdWVkpNTGxKMWJuUnBiV1ZWVWt4OUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd2djblZ1ZEdsdFpWQnliM1J2VTNWaVZWSk1YRzRnSUNvZ1FIQmhjbUZ0SUNCN1RXVnpjMkZuWlM1TlpYTnpZV2RsZlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKMWMxQnZjM1JOWlhOellXZGxJQ0FnSUNCamIyNW1hV2QxY21GMGFXOXVYRzRnSUNvZ1FIQmhjbUZ0SUNCN1VISnZkRzlUZEhWaVJHVnpZM0pwY0hSdmNpNURiMjVtYVdkMWNtRjBhVzl1UkdGMFlVeHBjM1I5SUdOdmJtWnBaM1Z5WVhScGIyNGdJQ0FnSUNCamIyNW1hV2QxY21GMGFXOXVYRzRnSUNvdlhHNGdZMjl1YzNSeWRXTjBiM0lvY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVEN3Z1luVnpMQ0JqYjI1bWFXY3BJSHRjYmlBZ0lHeGxkQ0JmZEdocGN5QTlJSFJvYVhNN1hHNGdJQ0JmZEdocGN5NXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1JRDBnY25WdWRHbHRaVkJ5YjNSdlUzUjFZbFZTVER0Y2JpQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTWdQU0JpZFhNN1hHNGdJQ0JmZEdocGN5NWpiMjVtYVdjZ1BTQmpiMjVtYVdjN1hHNWNiaUFnSUdOdmJuTnZiR1V1Ykc5bktDZGJSMjl2WjJ4bFNXUndVSEp2ZUhsZElHTnZibk4wY25WamRHOXlKeWs3WEc1Y2JpQWdJRjkwYUdsekxtMWxjM05oWjJWQ2RYTXVZV1JrVEdsemRHVnVaWElvSnlvbkxDQm1kVzVqZEdsdmJpaHRjMmNwSUh0Y2JpQWdJQ0FnYVdZZ0tHMXpaeTUwYnlBOVBUMGdKMlJ2YldGcGJpMXBaSEE2THk5bmIyOW5iR1V1WTI5dEp5a2dlMXh1WEc0Z0lDQWdJQ0FnWDNSb2FYTXVjbVZ4ZFdWemRGUnZTV1J3S0cxelp5azdYRzRnSUNBZ0lIMWNiaUFnSUgwcE8xeHVJQ0FnWDNSb2FYTXVYM05sYm1SVGRHRjBkWE1vSjJOeVpXRjBaV1FuS1R0Y2JpQjlYRzVjYmlBZ0x5b3FYRzRnSUNvZ1JuVnVZM1JwYjI0Z2RHaGhkQ0J6WldVZ2RHaGxJR2x1ZEdWdVpHVmtJRzFsZEdodlpDQnBiaUIwYUdVZ2JXVnpjMkZuWlNCeVpXTmxhWFpsWkNCaGJtUWdZMkZzYkNCMGFHVWdjbVZ6Y0dWamRHbDJaU0JtZFc1amRHbHZibHh1SUNBcVhHNGdJQ29nUUhCaGNtRnRJSHR0WlhOellXZGxmU0FnYldWemMyRm5aU0J5WldObGFYWmxaQ0JwYmlCMGFHVWdiV1Z6YzJGblpVSjFjMXh1SUNBcUwxeHVJQ0J5WlhGMVpYTjBWRzlKWkhBb2JYTm5LU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNiaUFnSUNCc1pYUWdjR0Z5WVcxeklEMGdiWE5uTG1KdlpIa3VjR0Z5WVcxek8xeHVJQ0FnSUM4dlkyOXVjMjlzWlM1cGJtWnZLQ2R5WlhGMVpYTjBWRzlKWkhBNkp5d2diWE5uTG1KdlpIa3ViV1YwYUc5a0tUdGNiaUFnSUNCamIyNXpiMnhsTG1sdVptOG9KMXRIYjI5bmJHVkpaSEJRY205NGVWMGdjbVZqWldsMmFXNW5JSEpsY1hWbGMzUTZJQ2NzSUcxelp5azdYRzRnSUNBZ1hHNGdJQ0FnYzNkcGRHTm9JQ2h0YzJjdVltOWtlUzV0WlhSb2IyUXBJSHRjYmlBZ0lDQWdJR05oYzJVZ0oyZGxibVZ5WVhSbFFYTnpaWEowYVc5dUp6cGNiaUFnSUNBZ0lDQWdTV1J3VUhKdmVIa3VaMlZ1WlhKaGRHVkJjM05sY25ScGIyNG9jR0Z5WVcxekxtTnZiblJsYm5SekxDQndZWEpoYlhNdWIzSnBaMmx1TENCd1lYSmhiWE11ZFhObGNtNWhiV1ZJYVc1MEtTNTBhR1Z1S0Z4dUlDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUtIWmhiSFZsS1NCN0lGOTBhR2x6TG5KbGNHeDVUV1Z6YzJGblpTaHRjMmNzSUhaaGJIVmxLVHQ5TEZ4dVhHNGdJQ0FnSUNBZ0lDQWdablZ1WTNScGIyNG9aWEp5YjNJcElIc2dYM1JvYVhNdWNtVndiSGxOWlhOellXZGxLRzF6Wnl3Z1pYSnliM0lwTzMxY2JpQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdZbkpsWVdzN1hHNGdJQ0FnSUNCallYTmxJQ2QyWVd4cFpHRjBaVUZ6YzJWeWRHbHZiaWM2WEc0Z0x5OGdJQ0FnSUNBZ1kyOXVjMjlzWlM1cGJtWnZLQ2QyWVd4cFpHRjBaVUZ6YzJWeWRHbHZiaWNwTzF4dUlDQWdJQ0FnSUNCSlpIQlFjbTk0ZVM1MllXeHBaR0YwWlVGemMyVnlkR2x2Ymlod1lYSmhiWE11WVhOelpYSjBhVzl1TENCd1lYSmhiWE11YjNKcFoybHVLUzUwYUdWdUtGeHVJQ0FnSUNBZ0lDQWdJR1oxYm1OMGFXOXVLSFpoYkhWbEtTQjdJRjkwYUdsekxuSmxjR3g1VFdWemMyRm5aU2h0YzJjc0lIWmhiSFZsS1R0OUxGeHVYRzRnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRvWlhKeWIzSXBJSHNnWDNSb2FYTXVjbVZ3YkhsTlpYTnpZV2RsS0cxelp5d2daWEp5YjNJcE8zMWNiaUFnSUNBZ0lDQWdLVHRjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ0lDQmpZWE5sSUNkeVpXWnlaWE5vUVhOelpYSjBhVzl1SnpwY2JpQWdJQzh2SUNBZ0lDQmpiMjV6YjJ4bExtbHVabThvSjNKbFpuSmxjMmhCYzNObGNuUnBiMjRuS1R0Y2JpQWdJQ0FnSUNBZ1NXUndVSEp2ZUhrdWNtVm1jbVZ6YUVGemMyVnlkR2x2Ymlod1lYSmhiWE11YVdSbGJuUnBkSGtwTG5Sb1pXNG9YRzRnSUNBZ0lDQWdJQ0FnWm5WdVkzUnBiMjRvZG1Gc2RXVXBJSHNnWDNSb2FYTXVjbVZ3YkhsTlpYTnpZV2RsS0cxelp5d2dkbUZzZFdVcE8zMHNYRzVjYmlBZ0lDQWdJQ0FnSUNCbWRXNWpkR2x2YmlobGNuSnZjaWtnZXlCZmRHaHBjeTV5WlhCc2VVMWxjM05oWjJVb2JYTm5MQ0JsY25KdmNpazdmVnh1SUNBZ0lDQWdJQ0FwTzF4dUlDQWdJQ0FnWkdWbVlYVnNkRHBjYmlBZ0lDQWdJQ0FnWW5KbFlXczdYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDb2dWR2hwY3lCbWRXNWpkR2x2YmlCeVpXTmxhWFpsY3lCaElHMWxjM05oWjJVZ1lXNWtJR0VnZG1Gc2RXVXVJRWwwSUhKbGNHeHBaWE1nZEdobElIWmhiSFZsSUhSdklIUm9aU0J6Wlc1a1pYSWdiMllnZEdobElHMWxjM05oWjJVZ2NtVmpaV2wyWldSY2JpQWdLbHh1SUNBcUlFQndZWEpoYlNBZ2UyMWxjM05oWjJWOUlDQWdiV1Z6YzJGblpTQnlaV05sYVhabFpGeHVJQ0FxSUVCd1lYSmhiU0FnZTNaaGJIVmxmU0FnSUNBZ2RtRnNkV1VnZEc4Z2FXNWpiSFZrWlNCcGJpQjBhR1VnYm1WM0lHMWxjM05oWjJVZ2RHOGdjMlZ1WkZ4dUlDQXFMMXh1SUNCeVpYQnNlVTFsYzNOaFoyVW9iWE5uTENCMllXeDFaU2tnZTF4dUlDQWdJR3hsZENCZmRHaHBjeUE5SUhSb2FYTTdYRzVjYmlBZ0lDQnNaWFFnYldWemMyRm5aU0E5SUh0cFpEb2diWE5uTG1sa0xDQjBlWEJsT2lBbmNtVnpjRzl1YzJVbkxDQjBiem9nYlhObkxtWnliMjBzSUdaeWIyMDZJRzF6Wnk1MGJ5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYjJSNU9pQjdZMjlrWlRvZ01qQXdMQ0IyWVd4MVpUb2dkbUZzZFdWOWZUdGNibHh1SUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iV1Z6YzJGblpTazdYRzRnSUgxY2JseHVJQ0JmYzJWdVpGTjBZWFIxY3loMllXeDFaU3dnY21WaGMyOXVLU0I3WEc0Z0lDQWdiR1YwSUY5MGFHbHpJRDBnZEdocGN6dGNibHh1SUNBZ0lHTnZibk52YkdVdWJHOW5LQ2RiUjI5dloyeGxTV1J3VUhKdmVIa3VjMlZ1WkZOMFlYUjFjMTBnSnl3Z2RtRnNkV1VwTzF4dVhHNGdJQ0FnWDNSb2FYTXVYM04wWVhSbElEMGdkbUZzZFdVN1hHNWNiaUFnSUNCc1pYUWdiWE5uSUQwZ2UxeHVJQ0FnSUNBZ2RIbHdaVG9nSjNWd1pHRjBaU2NzWEc0Z0lDQWdJQ0JtY205dE9pQmZkR2hwY3k1eWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTUxGeHVJQ0FnSUNBZ2RHODZJRjkwYUdsekxuSjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd2dLeUFuTDNOMFlYUjFjeWNzWEc0Z0lDQWdJQ0JpYjJSNU9pQjdYRzRnSUNBZ0lDQWdJSFpoYkhWbE9pQjJZV3gxWlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDA3WEc1Y2JpQWdJQ0JwWmlBb2NtVmhjMjl1S1NCN1hHNGdJQ0FnSUNCdGMyY3VZbTlrZVM1a1pYTmpJRDBnY21WaGMyOXVPMXh1SUNBZ0lIMWNibHh1SUNBZ0lGOTBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iWE5uS1R0Y2JpQWdmVnh1ZlZ4dVhHNHZMeUJsZUhCdmNuUWdaR1ZtWVhWc2RDQkpaSEJRY205NGVWQnliM1J2VTNSMVlqdGNibHh1THlvcVhHNGdLaUJVYnlCaFkzUnBkbUYwWlNCMGFHbHpJSEJ5YjNSdlkyOXNJSE4wZFdJc0lIVnphVzVuSUhSb1pTQnpZVzFsSUcxbGRHaHZaQ0JtYjNJZ1lXeHNJSEJ5YjNSdmMzUjFZaTVjYmlBcUlFQndZWEpoYlNBZ2UxVlNUQzVTZFc1MGFXMWxWVkpNZlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTUlISjFiblJwYldWUWNtOTBiMU4xWWxWU1RGeHVJQ29nUUhCaGNtRnRJQ0I3VFdWemMyRm5aUzVOWlhOellXZGxmU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0oxYzFCdmMzUk5aWE56WVdkbElDQWdJQ0JqYjI1bWFXZDFjbUYwYVc5dVhHNGdLaUJBY0dGeVlXMGdJSHRRY205MGIxTjBkV0pFWlhOamNtbHdkRzl5TGtOdmJtWnBaM1Z5WVhScGIyNUVZWFJoVEdsemRIMGdZMjl1Wm1sbmRYSmhkR2x2YmlBZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2JpQXFJRUJ5WlhSMWNtNGdlMDlpYW1WamRIMGdUMkpxWldOMElIZHBkR2dnYm1GdFpTQmhibVFnYVc1emRHRnVZMlVnYjJZZ1VISnZkRzlUZEhWaVhHNGdLaTljYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJR0ZqZEdsMllYUmxLSFZ5YkN3Z1luVnpMQ0JqYjI1bWFXY3BJSHRjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0J1WVcxbE9pQW5TV1J3VUhKdmVIbFFjbTkwYjFOMGRXSW5MRnh1SUNBZ0lHbHVjM1JoYm1ObE9pQnVaWGNnU1dSd1VISnZlSGxRY205MGIxTjBkV0lvZFhKc0xDQmlkWE1zSUdOdmJtWnBaeWxjYmlBZ2ZUdGNibjFjYmx4dVhHNWNiaTh2SUZkRlFsQkJRMHNnUms5UFZFVlNJQzh2WEc0dkx5QXVMaTlrWlhZdGNISnZkRzl6ZEhWaWN5OXpjbU12YVdSd2NISnZlSGt2WjI5dloyeGxMMGxrY0ZCeWIzaDVVM1IxWWk1cFpIQXVhbk1pWFN3aWMyOTFjbU5sVW05dmRDSTZJaUo5XG4vLyMgc291cmNlVVJMPXdlYnBhY2staW50ZXJuYWw6Ly8vMFxuIik7CgovKioqLyB9KQovKioqKioqLyBdKVsiZGVmYXVsdCJdOwp9KTs=",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "4.20",
    "description": "IDPProxy for google idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5b1a3f36f7f0e18c87091ca1e915ce795",
    "constraints": {
      "browser": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "IMSIWProxyStub": {
    "sourcePackage": {
      "sourceCode": "KGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHsKCWlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JykKCQltb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKCWVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKQoJCWRlZmluZSgiYWN0aXZhdGUiLCBbXSwgZmFjdG9yeSk7CgllbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JykKCQlleHBvcnRzWyJhY3RpdmF0ZSJdID0gZmFjdG9yeSgpOwoJZWxzZQoJCXJvb3RbImFjdGl2YXRlIl0gPSBmYWN0b3J5KCk7Cn0pKHRoaXMsIGZ1bmN0aW9uKCkgewpyZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJaWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHsKLyoqKioqKi8gCQkJcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0gewovKioqKioqLyAJCQlpOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJbDogZmFsc2UsCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8gCQltb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkCi8qKioqKiovIAkJbW9kdWxlLmwgPSB0cnVlOwovKioqKioqLwovKioqKioqLyAJCS8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLwovKioqKioqLwovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7Ci8qKioqKiovCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlczsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0cwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7Ci8qKioqKiovIAkJaWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkgewovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgewovKioqKioqLyAJCQkJY29uZmlndXJhYmxlOiBmYWxzZSwKLyoqKioqKi8gCQkJCWVudW1lcmFibGU6IHRydWUsCi8qKioqKiovIAkJCQlnZXQ6IGdldHRlcgovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAl9OwovKioqKioqLwovKioqKioqLyAJLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkgewovKioqKioqLyAJCXZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgPwovKioqKioqLyAJCQlmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOgovKioqKioqLyAJCQlmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9OwovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTsKLyoqKioqKi8gCQlyZXR1cm4gZ2V0dGVyOwovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbAovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9OwovKioqKioqLwovKioqKioqLyAJLy8gX193ZWJwYWNrX3B1YmxpY19wYXRoX18KLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ucCA9ICIiOwovKioqKioqLwovKioqKioqLyAJLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzCi8qKioqKiovIAlyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTsKLyoqKioqKi8gfSkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gKFsKLyogMCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CmV2YWwoIlxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0dmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBhY3RpdmF0ZTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIGRvbWFpbiA9ICdyZXRoaW5rLXByb2plY3QuZXUnO1xuXG4vKipcbiAqIElkZW50aXR5IFByb3ZpZGVyIFByb3h5IFByb3RvY29sIFN0dWJcbiAqL1xuXG52YXIgSU1TSVdQcm94eVN0dWIgPSBmdW5jdGlvbiAoKSB7XG5cblx0LyoqXG4gICogQ29uc3RydWN0b3Igb2YgdGhlIElkcFByb3h5IFN0dWJcbiAgKiBUaGUgY29uc3RydWN0b3IgYWRkIGEgbGlzdGVuZXIgaW4gdGhlIG1lc3NhZ2VCdXMgcmVjZWl2ZWQgYW5kIHN0YXJ0IGEgd2ViIHdvcmtlciB3aXRoIHRoZSByZWNlaXZlZCBpZHBQcm94eVxuICAqXG4gICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1c1Bvc3RNZXNzYWdlICAgICBjb25maWd1cmF0aW9uXG4gICogQHBhcmFtICB7UHJvdG9TdHViRGVzY3JpcHRvci5Db25maWd1cmF0aW9uRGF0YUxpc3R9IGNvbmZpZ3VyYXRpb24gICAgICBjb25maWd1cmF0aW9uXG4gICovXG5cdGZ1bmN0aW9uIElNU0lXUHJveHlTdHViKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7XG5cdFx0dmFyIF90aGlzMiA9IHRoaXM7XG5cblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgSU1TSVdQcm94eVN0dWIpO1xuXG5cdFx0dGhpcy5ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcblx0XHR0aGlzLm1lc3NhZ2VCdXMgPSBidXM7XG5cdFx0dGhpcy5jb25maWcgPSBjb25maWc7XG5cblx0XHR0aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7XG5cdFx0XHQvL1RPRE8gYWRkIHRoZSByZXNwZWN0aXZlIGxpc3RlbmVyXG5cdFx0XHRpZiAobXNnLnRvID09PSAnZG9tYWluLWlkcDovLycgKyBkb21haW4pIHtcblx0XHRcdFx0X3RoaXMyLnJlcXVlc3RUb0lkcChtc2cpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5fc2VuZFN0YXR1cygnY3JlYXRlZCcpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKElNU0lXUHJveHlTdHViLCBbe1xuXHRcdGtleTogJ19zZW5kU3RhdHVzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX3NlbmRTdGF0dXModmFsdWUsIHJlYXNvbikge1xuXHRcdFx0dmFyIF90aGlzID0gdGhpcztcblxuXHRcdFx0Y29uc29sZS5sb2coJ1tTbGFjayBJZHAgUHJveHkgc3RhdHVzIGNoYW5nZWRdIHRvICcsIHZhbHVlKTtcblxuXHRcdFx0X3RoaXMuX3N0YXRlID0gdmFsdWU7XG5cblx0XHRcdHZhciBtc2cgPSB7XG5cdFx0XHRcdHR5cGU6ICd1cGRhdGUnLFxuXHRcdFx0XHRmcm9tOiBfdGhpcy5ydW50aW1lUHJvdG9TdHViVVJMLFxuXHRcdFx0XHR0bzogX3RoaXMucnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJyxcblx0XHRcdFx0Ym9keToge1xuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAocmVhc29uKSB7XG5cdFx0XHRcdG1zZy5ib2R5LmRlc2MgPSByZWFzb247XG5cdFx0XHR9XG5cblx0XHRcdF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcblx0XHR9XG5cblx0XHQvKipcbiAgICogRnVuY3Rpb24gdGhhdCBzZWUgdGhlIGludGVuZGVkIG1ldGhvZCBpbiB0aGUgbWVzc2FnZSByZWNlaXZlZCBhbmQgY2FsbCB0aGUgcmVzcGVjdGl2ZSBmdW5jdGlvblxuICAgKlxuICAgKiBAcGFyYW0ge21lc3NhZ2V9ICBtZXNzYWdlIHJlY2VpdmVkIGluIHRoZSBtZXNzYWdlQnVzXG4gICAqL1xuXG5cdH0sIHtcblx0XHRrZXk6ICdyZXF1ZXN0VG9JZHAnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByZXF1ZXN0VG9JZHAobXNnKSB7XG5cdFx0XHR2YXIgX3RoaXMzID0gdGhpcztcblxuXHRcdFx0dmFyIHBhcmFtcyA9IG1zZy5ib2R5LnBhcmFtcztcblxuXHRcdFx0c3dpdGNoIChtc2cuYm9keS5tZXRob2QpIHtcblx0XHRcdFx0Y2FzZSAnZ2VuZXJhdGVBc3NlcnRpb24nOlxuXHRcdFx0XHRcdHRoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocGFyYW1zLmNvbnRlbnRzLCBwYXJhbXMub3JpZ2luLCBwYXJhbXMudXNlcm5hbWVIaW50KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIF90aGlzMy5yZXBseU1lc3NhZ2UobXNnLCB2YWx1ZSk7XG5cdFx0XHRcdFx0fSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gX3RoaXMzLnJlcGx5TWVzc2FnZShtc2csIGVycm9yKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAndmFsaWRhdGVBc3NlcnRpb24nOlxuXHRcdFx0XHRcdHRoaXMucmVwbHlNZXNzYWdlKG1zZywgeyBpZGVudGl0eTogJ2lkZW50aXR5QGlkcC5jb20nLCBjb250ZW50czogJ2NvbnRlbnQnIH0pO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2dlbmVyYXRlQXNzZXJ0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVBc3NlcnRpb24oY29udGVudHMsIG9yaWdpbiwgaGludCkge1xuXHRcdFx0dmFyIF90aGlzNCA9IHRoaXM7XG5cblx0XHRcdGNvbnNvbGUubG9nKCdjb250ZW50cy0+JywgY29udGVudHMpO1xuXHRcdFx0Y29uc29sZS5sb2coJ29yaWdpbi0+Jywgb3JpZ2luKTtcblx0XHRcdGNvbnNvbGUubG9nKCdoaW50LT4nLCBoaW50KTtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblxuXHRcdFx0XHQvL3RoZSBoaW50IGZpZWxkIGNvbnRhaW5zIHRoZSBpbmZvcm1hdGlvbiBvYnRhaW5lZCBhZnRlciB0aGUgdXNlciBhdXRoZW50aWNhdGlvblxuXHRcdFx0XHQvLyBpZiB0aGUgaGludCBjb250ZW50IGlzIG5vdCBwcmVzZW50LCB0aGVuIHJlamVjdHMgdGhlIHZhbHVlIHdpdGggdGhlIFVSTCB0byBvcGVuIHRoZSBwYWdlIHRvIGF1dGhlbnRpY2F0ZSB0aGUgdXNlclxuXHRcdFx0XHRpZiAoIWhpbnQpIHtcblx0XHRcdFx0XHR2YXIgcmVxdWVzdFVybCA9ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vby9vYXV0aDIvdjIvYXV0aD9zY29wZT1lbWFpbCUyMHByb2ZpbGUmc3RhdGU9JTJGcHJvZmlsZSZyZWRpcmVjdF91cmk9JyArIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgJyZyZXNwb25zZV90eXBlPXRva2VuJmNsaWVudF9pZD04MDgzMjk1NjYwMTItdHFyOHFvaDExMTk0MmdkMmtnMDA3dDBzOGYyNzdyb2kuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20nO1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKCdmaXJzdCB1cmwgJywgcmVxdWVzdFVybCwgJ2RvbmUnKTtcblx0XHRcdFx0XHRyZWplY3QoeyBuYW1lOiAnSWRQTG9naW5FcnJvcicsIGxvZ2luVXJsOiByZXF1ZXN0VXJsIH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBhY2Nlc3NUb2tlbiA9IF90aGlzNC5fdXJsUGFyc2VyKGhpbnQsICdhY2Nlc3NfdG9rZW4nKTtcblx0XHRcdFx0XHR2YXIgZXhwaXJlcyA9IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApICsgX3RoaXM0Ll91cmxQYXJzZXIoaGludCwgJ2V4cGlyZXNfaW4nKTtcblx0XHRcdFx0XHRmZXRjaCgnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YxL3VzZXJpbmZvP2FjY2Vzc190b2tlbj0nICsgYWNjZXNzVG9rZW4pLnRoZW4oZnVuY3Rpb24gKHJlc191c2VyKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzX3VzZXIuanNvbigpO1xuXHRcdFx0XHRcdH0pLnRoZW4oZnVuY3Rpb24gKGJvZHkpIHtcblx0XHRcdFx0XHRcdHZhciBpbmZvVG9rZW4gPSB7IHBpY3R1cmU6IGJvZHkucGljdHVyZSwgZW1haWw6IGJvZHkuZW1haWwsIGZhbWlseV9uYW1lOiBib2R5LmZhbWlseV9uYW1lLCBnaXZlbl9uYW1lOiBib2R5LmdpdmVuX25hbWUgfTtcblx0XHRcdFx0XHRcdHZhciBhc3NlcnRpb24gPSBidG9hKEpTT04uc3RyaW5naWZ5KHsgdG9rZW5JRDogYWNjZXNzVG9rZW4sIGVtYWlsOiBib2R5LmVtYWlsLCBpZDogYm9keS5pZCB9KSk7XG5cdFx0XHRcdFx0XHR2YXIgdG9SZXNvbHZlID0geyBpbmZvOiB7IGV4cGlyZXM6IGV4cGlyZXMgfSwgYXNzZXJ0aW9uOiBhc3NlcnRpb24sIGlkcDogeyBkb21haW46IGRvbWFpbiwgcHJvdG9jb2w6ICdPQXV0aCAyLjAnIH0sIGluZm9Ub2tlbjogaW5mb1Rva2VuLCBpbnRlcndvcmtpbmc6IHsgYWNjZXNzX3Rva2VuOiBhY2Nlc3NUb2tlbiwgZG9tYWluOiBkb21haW4gfSB9O1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coJ1JFU09MVklORyBUSElTIE9CSkVDVCcsIHRvUmVzb2x2ZSk7XG5cdFx0XHRcdFx0XHRyZXNvbHZlKHRvUmVzb2x2ZSk7XG5cdFx0XHRcdFx0fSkuY2F0Y2gocmVqZWN0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnX3VybFBhcnNlcicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF91cmxQYXJzZXIodXJsLCBuYW1lKSB7XG5cdFx0XHRuYW1lID0gbmFtZS5yZXBsYWNlKC9bXFxbXS8sICdcXFxcXFxbJykucmVwbGFjZSgvW1xcXV0vLCAnXFxcXFxcXScpO1xuXHRcdFx0dmFyIHJlZ2V4UyA9ICdbXFxcXCMmP10nICsgbmFtZSArICc9KFteJiNdKiknO1xuXHRcdFx0dmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cChyZWdleFMpO1xuXHRcdFx0dmFyIHJlc3VsdHMgPSByZWdleC5leGVjKHVybCk7XG5cdFx0XHRpZiAocmVzdWx0cyA9PT0gbnVsbCkgcmV0dXJuICcnO2Vsc2UgcmV0dXJuIHJlc3VsdHNbMV07XG5cdFx0fVxuXG5cdFx0LyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gcmVjZWl2ZXMgYSBtZXNzYWdlIGFuZCBhIHZhbHVlLiBJdCByZXBsaWVzIHRoZSB2YWx1ZSB0byB0aGUgc2VuZGVyIG9mIHRoZSBtZXNzYWdlIHJlY2VpdmVkXG4gICAqXG4gICAqIEBwYXJhbSAge21lc3NhZ2V9ICAgbWVzc2FnZSByZWNlaXZlZFxuICAgKiBAcGFyYW0gIHt2YWx1ZX0gICAgIHZhbHVlIHRvIGluY2x1ZGUgaW4gdGhlIG5ldyBtZXNzYWdlIHRvIHNlbmRcbiAgICovXG5cblx0fSwge1xuXHRcdGtleTogJ3JlcGx5TWVzc2FnZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHJlcGx5TWVzc2FnZShtc2csIHZhbHVlKSB7XG5cdFx0XHR2YXIgbWVzc2FnZSA9IHsgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHsgY29kZTogMjAwLCB2YWx1ZTogdmFsdWUgfSB9O1xuXG5cdFx0XHR0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIElNU0lXUHJveHlTdHViO1xufSgpO1xuXG4vKipcbiAqIFRvIGFjdGl2YXRlIHRoaXMgcHJvdG9jb2wgc3R1YiwgdXNpbmcgdGhlIHNhbWUgbWV0aG9kIGZvciBhbGwgcHJvdG9zdHViLlxuICogQHBhcmFtICB7VVJMLlJ1bnRpbWVVUkx9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bnRpbWVQcm90b1N0dWJVUkwgcnVudGltZVByb3RvU3ViVVJMXG4gKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9ICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVzUG9zdE1lc3NhZ2UgICAgIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge1Byb3RvU3R1YkRlc2NyaXB0b3IuQ29uZmlndXJhdGlvbkRhdGFMaXN0fSBjb25maWd1cmF0aW9uICAgICAgY29uZmlndXJhdGlvblxuICogQHJldHVybiB7T2JqZWN0fSBPYmplY3Qgd2l0aCBuYW1lIGFuZCBpbnN0YW5jZSBvZiBQcm90b1N0dWJcbiAqL1xuXG5cbmZ1bmN0aW9uIGFjdGl2YXRlKHVybCwgYnVzLCBjb25maWcpIHtcblx0cmV0dXJuIHtcblx0XHRuYW1lOiAnSU1TSVdQcm94eVN0dWInLFxuXHRcdGluc3RhbmNlOiBuZXcgSU1TSVdQcm94eVN0dWIodXJsLCBidXMsIGNvbmZpZylcblx0fTtcbn0vLyMgc291cmNlVVJMPVttb2R1bGVdXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTh2TGk0dlpHVjJMWEJ5YjNSdmMzUjFZbk12YzNKakwybGtjSEJ5YjNoNUwzTnBjQzV5WlhSb2FXNXJMWEJ5YjJwbFkzUXVaWFV2U1UxVFNWZFFjbTk0ZVZOMGRXSXVhV1J3TG1welB6QmxOVElpWFN3aWJtRnRaWE1pT2xzaVlXTjBhWFpoZEdVaUxDSmtiMjFoYVc0aUxDSkpUVk5KVjFCeWIzaDVVM1IxWWlJc0luSjFiblJwYldWUWNtOTBiMU4wZFdKVlVrd2lMQ0ppZFhNaUxDSmpiMjVtYVdjaUxDSnRaWE56WVdkbFFuVnpJaXdpWVdSa1RHbHpkR1Z1WlhJaUxDSnRjMmNpTENKMGJ5SXNJbkpsY1hWbGMzUlViMGxrY0NJc0lsOXpaVzVrVTNSaGRIVnpJaXdpZG1Gc2RXVWlMQ0p5WldGemIyNGlMQ0pmZEdocGN5SXNJbU52Ym5OdmJHVWlMQ0pzYjJjaUxDSmZjM1JoZEdVaUxDSjBlWEJsSWl3aVpuSnZiU0lzSW1KdlpIa2lMQ0prWlhOaklpd2ljRzl6ZEUxbGMzTmhaMlVpTENKd1lYSmhiWE1pTENKdFpYUm9iMlFpTENKblpXNWxjbUYwWlVGemMyVnlkR2x2YmlJc0ltTnZiblJsYm5Seklpd2liM0pwWjJsdUlpd2lkWE5sY201aGJXVklhVzUwSWl3aWRHaGxiaUlzSW5KbGNHeDVUV1Z6YzJGblpTSXNJbU5oZEdOb0lpd2laWEp5YjNJaUxDSnBaR1Z1ZEdsMGVTSXNJbWhwYm5RaUxDSlFjbTl0YVhObElpd2ljbVZ6YjJ4MlpTSXNJbkpsYW1WamRDSXNJbkpsY1hWbGMzUlZjbXdpTENKc2IyTmhkR2x2YmlJc0luQnliM1J2WTI5c0lpd2lhRzl6ZEc1aGJXVWlMQ0p1WVcxbElpd2liRzluYVc1VmNtd2lMQ0poWTJObGMzTlViMnRsYmlJc0lsOTFjbXhRWVhKelpYSWlMQ0psZUhCcGNtVnpJaXdpVFdGMGFDSXNJbVpzYjI5eUlpd2lSR0YwWlNJc0ltNXZkeUlzSW1abGRHTm9JaXdpY21WelgzVnpaWElpTENKcWMyOXVJaXdpYVc1bWIxUnZhMlZ1SWl3aWNHbGpkSFZ5WlNJc0ltVnRZV2xzSWl3aVptRnRhV3g1WDI1aGJXVWlMQ0puYVhabGJsOXVZVzFsSWl3aVlYTnpaWEowYVc5dUlpd2lZblJ2WVNJc0lrcFRUMDRpTENKemRISnBibWRwWm5raUxDSjBiMnRsYmtsRUlpd2lhV1FpTENKMGIxSmxjMjlzZG1VaUxDSnBibVp2SWl3aWFXUndJaXdpYVc1MFpYSjNiM0pyYVc1bklpd2lZV05qWlhOelgzUnZhMlZ1SWl3aWRYSnNJaXdpY21Wd2JHRmpaU0lzSW5KbFoyVjRVeUlzSW5KbFoyVjRJaXdpVW1WblJYaHdJaXdpY21WemRXeDBjeUlzSW1WNFpXTWlMQ0p0WlhOellXZGxJaXdpWTI5a1pTSXNJbWx1YzNSaGJtTmxJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenM3T3p0clFrRjNTWGRDUVN4Uk96czdPMEZCZUVsNFFpeEpRVUZKUXl4VFFVRlRMRzlDUVVGaU96dEJRVVZCT3pzN08wbEJSMDFETEdNN08wRkJSVXc3T3pzN096czdPMEZCVVVFc2VVSkJRVmxETEcxQ1FVRmFMRVZCUVdsRFF5eEhRVUZxUXl4RlFVRnpRME1zVFVGQmRFTXNSVUZCT0VNN1FVRkJRVHM3UVVGQlFUczdRVUZETjBNc1QwRkJTMFlzYlVKQlFVd3NSMEZCTWtKQkxHMUNRVUV6UWp0QlFVTkJMRTlCUVV0SExGVkJRVXdzUjBGQmEwSkdMRWRCUVd4Q08wRkJRMEVzVDBGQlMwTXNUVUZCVEN4SFFVRmpRU3hOUVVGa096dEJRVVZCTEU5QlFVdERMRlZCUVV3c1EwRkJaMEpETEZkQlFXaENMRU5CUVRSQ0xFZEJRVFZDTEVWQlFXbERMR1ZCUVU4N1FVRkRka003UVVGRFFTeFBRVUZKUXl4SlFVRkpReXhGUVVGS0xIVkNRVUV5UWxJc1RVRkJMMElzUlVGQmVVTTdRVUZEZUVNc1YwRkJTMU1zV1VGQlRDeERRVUZyUWtZc1IwRkJiRUk3UVVGRFFUdEJRVU5FTEVkQlRFUTdPMEZCVDBFc1QwRkJTMGNzVjBGQlRDeERRVUZwUWl4VFFVRnFRanRCUVVOQk96czdPemhDUVVWWFF5eExMRVZCUVU5RExFMHNSVUZCVVR0QlFVTXhRaXhQUVVGSlF5eFJRVUZSTEVsQlFWbzdPMEZCUlVGRExGZEJRVkZETEVkQlFWSXNRMEZCV1N4elEwRkJXaXhGUVVGdlJFb3NTMEZCY0VRN08wRkJSVUZGTEZOQlFVMUhMRTFCUVU0c1IwRkJaVXdzUzBGQlpqczdRVUZGUVN4UFFVRkpTaXhOUVVGTk8wRkJRMVJWTEZWQlFVMHNVVUZFUnp0QlFVVlVReXhWUVVGTlRDeE5RVUZOV0N4dFFrRkdTRHRCUVVkVVRTeFJRVUZKU3l4TlFVRk5XQ3h0UWtGQlRpeEhRVUUwUWl4VFFVaDJRanRCUVVsVWFVSXNWVUZCVFR0QlFVTk1VaXhaUVVGUFFUdEJRVVJHTzBGQlNrY3NTVUZCVmpzN1FVRlRRU3hQUVVGSlF5eE5RVUZLTEVWQlFWazdRVUZEV0V3c1VVRkJTVmtzU1VGQlNpeERRVUZUUXl4SlFVRlVMRWRCUVdkQ1VpeE5RVUZvUWp0QlFVTkJPenRCUVVWRVF5eFRRVUZOVWl4VlFVRk9MRU5CUVdsQ1owSXNWMEZCYWtJc1EwRkJOa0prTEVkQlFUZENPMEZCUTBFN08wRkJSVVE3T3pzN096czdPeXRDUVV0aFFTeEhMRVZCUVVzN1FVRkJRVHM3UVVGRGFrSXNUMEZCU1dVc1UwRkJVMllzU1VGQlNWa3NTVUZCU2l4RFFVRlRSeXhOUVVGMFFqczdRVUZGUVN4WFFVRlJaaXhKUVVGSldTeEpRVUZLTEVOQlFWTkpMRTFCUVdwQ08wRkJRMEVzVTBGQlN5eHRRa0ZCVER0QlFVTkRMRlZCUVV0RExHbENRVUZNTEVOQlFYVkNSaXhQUVVGUFJ5eFJRVUU1UWl4RlFVRjNRMGdzVDBGQlQwa3NUVUZCTDBNc1JVRkJkVVJLTEU5QlFVOUxMRmxCUVRsRUxFVkJRMFZETEVsQlJFWXNRMEZEVHp0QlFVRkJMR0ZCUVZNc1QwRkJTME1zV1VGQlRDeERRVUZyUW5SQ0xFZEJRV3hDTEVWQlFYVkNTU3hMUVVGMlFpeERRVUZVTzBGQlFVRXNUVUZFVUN4RlFVVkZiVUlzUzBGR1JpeERRVVZSTzBGQlFVRXNZVUZCVXl4UFFVRkxSQ3haUVVGTUxFTkJRV3RDZEVJc1IwRkJiRUlzUlVGQmRVSjNRaXhMUVVGMlFpeERRVUZVTzBGQlFVRXNUVUZHVWp0QlFVZEJPMEZCUTBRc1UwRkJTeXh0UWtGQlREdEJRVU5ETEZWQlFVdEdMRmxCUVV3c1EwRkJhMEowUWl4SFFVRnNRaXhGUVVGMVFpeEZRVUZEZVVJc1ZVRkJWU3hyUWtGQldDeEZRVUVyUWxBc1ZVRkJWU3hUUVVGNlF5eEZRVUYyUWp0QlFVTkJPMEZCUTBRN1FVRkRRenRCUVZaRU8wRkJXVUU3T3p0dlEwRkZhMEpCTEZFc1JVRkJWVU1zVFN4RlFVRlJUeXhKTEVWQlFVODdRVUZCUVRzN1FVRkZNME51UWl4WFFVRlJReXhIUVVGU0xFTkJRVmtzV1VGQldpeEZRVUV3UWxVc1VVRkJNVUk3UVVGRFFWZ3NWMEZCVVVNc1IwRkJVaXhEUVVGWkxGVkJRVm9zUlVGQmQwSlhMRTFCUVhoQ08wRkJRMEZhTEZkQlFWRkRMRWRCUVZJc1EwRkJXU3hSUVVGYUxFVkJRWE5DYTBJc1NVRkJkRUk3TzBGQlJVRXNWVUZCVHl4SlFVRkpReXhQUVVGS0xFTkJRVmtzVlVGQlEwTXNUMEZCUkN4RlFVRlZReXhOUVVGV0xFVkJRWEZDT3p0QlFVVjJRenRCUVVOQk8wRkJRMEVzVVVGQlNTeERRVUZEU0N4SlFVRk1MRVZCUVZjN1FVRkRWaXhUUVVGSlNTeHRTRUZCWjBoRExGTkJRVk5ETEZGQlFYcElMRlZCUVhOSlJDeFRRVUZUUlN4UlFVRXZTU3cwUjBGQlNqdEJRVU5CTVVJc1lVRkJVVU1zUjBGQlVpeERRVUZaTEZsQlFWb3NSVUZCTUVKelFpeFZRVUV4UWl4RlFVRnpReXhOUVVGMFF6dEJRVU5CUkN4WlFVRlBMRVZCUVVOTExFMUJRVTBzWlVGQlVDeEZRVUYzUWtNc1ZVRkJWVXdzVlVGQmJFTXNSVUZCVUR0QlFVTkJMRXRCU2tRc1RVRkpUenRCUVVOT0xGTkJRVWxOTEdOQlFXTXNUMEZCUzBNc1ZVRkJUQ3hEUVVGblFsZ3NTVUZCYUVJc1JVRkJjMElzWTBGQmRFSXNRMEZCYkVJN1FVRkRRU3hUUVVGSldTeFZRVUZWUXl4TFFVRkxReXhMUVVGTUxFTkJRVmRETEV0QlFVdERMRWRCUVV3c1MwRkJZU3hKUVVGNFFpeEpRVUZuUXl4UFFVRkxUQ3hWUVVGTUxFTkJRV2RDV0N4SlFVRm9RaXhGUVVGelFpeFpRVUYwUWl4RFFVRTVRenRCUVVOQmFVSXNNa1ZCUVc5RlVDeFhRVUZ3UlN4RlFVTkZaaXhKUVVSR0xFTkJRMDg3UVVGQlFTeGhRVUZaZFVJc1UwRkJVME1zU1VGQlZDeEZRVUZhTzBGQlFVRXNUVUZFVUN4RlFVVkZlRUlzU1VGR1JpeERRVVZQTEdkQ1FVRlJPMEZCUTJJc1ZVRkJTWGxDTEZsQlFWa3NSVUZCUTBNc1UwRkJVMjVETEV0QlFVdHRReXhQUVVGbUxFVkJRWGRDUXl4UFFVRlBjRU1zUzBGQlMyOURMRXRCUVhCRExFVkJRVEpEUXl4aFFVRmhja01zUzBGQlMzRkRMRmRCUVRkRUxFVkJRVEJGUXl4WlFVRlpkRU1zUzBGQlMzTkRMRlZCUVROR0xFVkJRV2hDTzBGQlEwRXNWVUZCU1VNc1dVRkJXVU1zUzBGQlMwTXNTMEZCUzBNc1UwRkJUQ3hEUVVGbExFVkJRVU5ETEZOQlFWTnVRaXhYUVVGV0xFVkJRWFZDV1N4UFFVRlBjRU1zUzBGQlMyOURMRXRCUVc1RExFVkJRVEJEVVN4SlFVRkpOVU1zUzBGQlN6UkRMRVZCUVc1RUxFVkJRV1lzUTBGQlRDeERRVUZvUWp0QlFVTkJMRlZCUVVsRExGbEJRVmtzUlVGQlEwTXNUVUZCVFN4RlFVRkZjRUlzVTBGQlUwRXNUMEZCV0N4RlFVRlFMRVZCUVRaQ1lTeFhRVUZYUVN4VFFVRjRReXhGUVVGdFJGRXNTMEZCU3l4RlFVRkRiRVVzVVVGQlVVRXNUVUZCVkN4RlFVRnBRblZETEZWQlFWVXNWMEZCTTBJc1JVRkJlRVFzUlVGQmFVZGpMRmRCUVZkQkxGTkJRVFZITEVWQlFYVklZeXhqUVVGakxFVkJRVU5ETEdOQlFXTjZRaXhYUVVGbUxFVkJRVFJDTTBNc1VVRkJVVUVzVFVGQmNFTXNSVUZCY2trc1JVRkJhRUk3UVVGRFFXTXNZMEZCVVVNc1IwRkJVaXhEUVVGWkxIVkNRVUZhTEVWQlFYRkRhVVFzVTBGQmNrTTdRVUZEUVRkQ0xHTkJRVkUyUWl4VFFVRlNPMEZCUTBFc1RVRlNSaXhGUVZGSmJFTXNTMEZTU2l4RFFWRlZUU3hOUVZKV08wRkJVMEU3UVVGRFJDeEpRWEpDVFN4RFFVRlFPMEZCYzBKQk96czdOa0pCUlZWcFF5eEhMRVZCUVVzMVFpeEpMRVZCUVUwN1FVRkRja0pCTEZWQlFVOUJMRXRCUVVzMlFpeFBRVUZNTEVOQlFXRXNUVUZCWWl4RlFVRnhRaXhOUVVGeVFpeEZRVUUyUWtFc1QwRkJOMElzUTBGQmNVTXNUVUZCY2tNc1JVRkJOa01zVFVGQk4wTXNRMEZCVUR0QlFVTkJMRTlCUVVsRExGTkJRVk1zV1VGQldUbENMRWxCUVZvc1IwRkJiVUlzVjBGQmFFTTdRVUZEUVN4UFFVRkpLMElzVVVGQlVTeEpRVUZKUXl4TlFVRktMRU5CUVZkR0xFMUJRVmdzUTBGQldqdEJRVU5CTEU5QlFVbEhMRlZCUVZWR0xFMUJRVTFITEVsQlFVNHNRMEZCVjA0c1IwRkJXQ3hEUVVGa08wRkJRMEVzVDBGQlNVc3NXVUZCV1N4SlFVRm9RaXhGUVVORExFOUJRVThzUlVGQlVDeERRVVJFTEV0QlIwTXNUMEZCVDBFc1VVRkJVU3hEUVVGU0xFTkJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3l0Q1FVMWhia1VzUnl4RlFVRkxTU3hMTEVWQlFVODdRVUZEZUVJc1QwRkJTV2xGTEZWQlFWVXNSVUZCUTJJc1NVRkJTWGhFTEVsQlFVbDNSQ3hGUVVGVUxFVkJRV0U1UXl4TlFVRk5MRlZCUVc1Q0xFVkJRU3RDVkN4SlFVRkpSQ3hKUVVGSlZ5eEpRVUYyUXl4RlFVRTJRMEVzVFVGQlRWZ3NTVUZCU1VNc1JVRkJka1FzUlVGQk1rUlhMRTFCUVUwc1JVRkJRekJFTEUxQlFVMHNSMEZCVUN4RlFVRlpiRVVzVDBGQlQwRXNTMEZCYmtJc1JVRkJha1VzUlVGQlpEczdRVUZGUVN4UlFVRkxUaXhWUVVGTUxFTkJRV2RDWjBJc1YwRkJhRUlzUTBGQk5FSjFSQ3hQUVVFMVFqdEJRVU5CT3pzN096czdRVUZIUmpzN096czdPenM3TzBGQlQyVXNVMEZCVXpkRkxGRkJRVlFzUTBGQmEwSnpSU3hIUVVGc1FpeEZRVUYxUW14RkxFZEJRWFpDTEVWQlFUUkNReXhOUVVFMVFpeEZRVUZ2UXp0QlFVTnNSQ3hSUVVGUE8wRkJRMDV4UXl4UlFVRk5MR2RDUVVSQk8wRkJSVTV4UXl4WlFVRlZMRWxCUVVrM1JTeGpRVUZLTEVOQlFXMUNiMFVzUjBGQmJrSXNSVUZCZDBKc1JTeEhRVUY0UWl4RlFVRTJRa01zVFVGQk4wSTdRVUZHU2l4RlFVRlFPMEZCU1VFaUxDSm1hV3hsSWpvaU1DNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW14bGRDQmtiMjFoYVc0Z1BTQW5jbVYwYUdsdWF5MXdjbTlxWldOMExtVjFKMXh1WEc0dktpcGNiaUFxSUVsa1pXNTBhWFI1SUZCeWIzWnBaR1Z5SUZCeWIzaDVJRkJ5YjNSdlkyOXNJRk4wZFdKY2JpQXFMMXh1WTJ4aGMzTWdTVTFUU1ZkUWNtOTRlVk4wZFdJZ2UxeHVYRzVjZEM4cUtseHVYSFFnS2lCRGIyNXpkSEoxWTNSdmNpQnZaaUIwYUdVZ1NXUndVSEp2ZUhrZ1UzUjFZbHh1WEhRZ0tpQlVhR1VnWTI5dWMzUnlkV04wYjNJZ1lXUmtJR0VnYkdsemRHVnVaWElnYVc0Z2RHaGxJRzFsYzNOaFoyVkNkWE1nY21WalpXbDJaV1FnWVc1a0lITjBZWEowSUdFZ2QyVmlJSGR2Y210bGNpQjNhWFJvSUhSb1pTQnlaV05sYVhabFpDQnBaSEJRY205NGVWeHVYSFFnS2x4dVhIUWdLaUJBY0dGeVlXMGdJSHRWVWt3dVVuVnVkR2x0WlZWU1RIMGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ0J5ZFc1MGFXMWxVSEp2ZEc5VGRXSlZVa3hjYmx4MElDb2dRSEJoY21GdElDQjdUV1Z6YzJGblpTNU5aWE56WVdkbGZTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSjFjMUJ2YzNSTlpYTnpZV2RsSUNBZ0lDQmpiMjVtYVdkMWNtRjBhVzl1WEc1Y2RDQXFJRUJ3WVhKaGJTQWdlMUJ5YjNSdlUzUjFZa1JsYzJOeWFYQjBiM0l1UTI5dVptbG5kWEpoZEdsdmJrUmhkR0ZNYVhOMGZTQmpiMjVtYVdkMWNtRjBhVzl1SUNBZ0lDQWdZMjl1Wm1sbmRYSmhkR2x2Ymx4dVhIUWdLaTljYmx4MFkyOXVjM1J5ZFdOMGIzSW9jblZ1ZEdsdFpWQnliM1J2VTNSMVlsVlNUQ3dnWW5WekxDQmpiMjVtYVdjcElIdGNibHgwWEhSMGFHbHpMbkoxYm5ScGJXVlFjbTkwYjFOMGRXSlZVa3dnUFNCeWRXNTBhVzFsVUhKdmRHOVRkSFZpVlZKTVhHNWNkRngwZEdocGN5NXRaWE56WVdkbFFuVnpJRDBnWW5WelhHNWNkRngwZEdocGN5NWpiMjVtYVdjZ1BTQmpiMjVtYVdkY2JseHVYSFJjZEhSb2FYTXViV1Z6YzJGblpVSjFjeTVoWkdSTWFYTjBaVzVsY2lnbktpY3NJRzF6WnlBOVBpQjdYRzVjZEZ4MFhIUXZMMVJQUkU4Z1lXUmtJSFJvWlNCeVpYTndaV04wYVhabElHeHBjM1JsYm1WeVhHNWNkRngwWEhScFppQW9iWE5uTG5SdklEMDlQU0JnWkc5dFlXbHVMV2xrY0Rvdkx5UjdaRzl0WVdsdWZXQXBJSHRjYmx4MFhIUmNkRngwZEdocGN5NXlaWEYxWlhOMFZHOUpaSEFvYlhObktWeHVYSFJjZEZ4MGZWeHVYSFJjZEgwcFhHNWNibHgwWEhSMGFHbHpMbDl6Wlc1a1UzUmhkSFZ6S0NkamNtVmhkR1ZrSnlsY2JseDBmVnh1WEc1Y2RGOXpaVzVrVTNSaGRIVnpLSFpoYkhWbExDQnlaV0Z6YjI0cElIdGNibHgwWEhSc1pYUWdYM1JvYVhNZ1BTQjBhR2x6WEc1Y2JseDBYSFJqYjI1emIyeGxMbXh2WnlnblcxTnNZV05ySUVsa2NDQlFjbTk0ZVNCemRHRjBkWE1nWTJoaGJtZGxaRjBnZEc4Z0p5d2dkbUZzZFdVcFhHNWNibHgwWEhSZmRHaHBjeTVmYzNSaGRHVWdQU0IyWVd4MVpWeHVYRzVjZEZ4MGJHVjBJRzF6WnlBOUlIdGNibHgwWEhSY2RIUjVjR1U2SUNkMWNHUmhkR1VuTEZ4dVhIUmNkRngwWm5KdmJUb2dYM1JvYVhNdWNuVnVkR2x0WlZCeWIzUnZVM1IxWWxWU1RDeGNibHgwWEhSY2RIUnZPaUJmZEdocGN5NXlkVzUwYVcxbFVISnZkRzlUZEhWaVZWSk1JQ3NnSnk5emRHRjBkWE1uTEZ4dVhIUmNkRngwWW05a2VUb2dlMXh1WEhSY2RGeDBYSFIyWVd4MVpUb2dkbUZzZFdWY2JseDBYSFJjZEgxY2JseDBYSFI5WEc1Y2JseDBYSFJwWmlBb2NtVmhjMjl1S1NCN1hHNWNkRngwWEhSdGMyY3VZbTlrZVM1a1pYTmpJRDBnY21WaGMyOXVYRzVjZEZ4MGZWeHVYRzVjZEZ4MFgzUm9hWE11YldWemMyRm5aVUoxY3k1d2IzTjBUV1Z6YzJGblpTaHRjMmNwWEc1Y2RIMWNibHh1WEhRdktpcGNibHgwSUNvZ1JuVnVZM1JwYjI0Z2RHaGhkQ0J6WldVZ2RHaGxJR2x1ZEdWdVpHVmtJRzFsZEdodlpDQnBiaUIwYUdVZ2JXVnpjMkZuWlNCeVpXTmxhWFpsWkNCaGJtUWdZMkZzYkNCMGFHVWdjbVZ6Y0dWamRHbDJaU0JtZFc1amRHbHZibHh1WEhRZ0tseHVYSFFnS2lCQWNHRnlZVzBnZTIxbGMzTmhaMlY5SUNCdFpYTnpZV2RsSUhKbFkyVnBkbVZrSUdsdUlIUm9aU0J0WlhOellXZGxRblZ6WEc1Y2RDQXFMMXh1WEhSeVpYRjFaWE4wVkc5SlpIQW9iWE5uS1NCN1hHNWNkRngwYkdWMElIQmhjbUZ0Y3lBOUlHMXpaeTVpYjJSNUxuQmhjbUZ0YzF4dVhHNWNkRngwYzNkcGRHTm9JQ2h0YzJjdVltOWtlUzV0WlhSb2IyUXBJSHRjYmx4MFhIUmpZWE5sSUNkblpXNWxjbUYwWlVGemMyVnlkR2x2YmljNlhHNWNkRngwWEhSMGFHbHpMbWRsYm1WeVlYUmxRWE56WlhKMGFXOXVLSEJoY21GdGN5NWpiMjUwWlc1MGN5d2djR0Z5WVcxekxtOXlhV2RwYml3Z2NHRnlZVzF6TG5WelpYSnVZVzFsU0dsdWRDbGNibHgwWEhSY2RGeDBMblJvWlc0b2RtRnNkV1VnUFQ0Z2RHaHBjeTV5WlhCc2VVMWxjM05oWjJVb2JYTm5MQ0IyWVd4MVpTa3BYRzVjZEZ4MFhIUmNkQzVqWVhSamFDaGxjbkp2Y2lBOVBpQjBhR2x6TG5KbGNHeDVUV1Z6YzJGblpTaHRjMmNzSUdWeWNtOXlLU2xjYmx4MFhIUmNkR0p5WldGclhHNWNkRngwWTJGelpTQW5kbUZzYVdSaGRHVkJjM05sY25ScGIyNG5PbHh1WEhSY2RGeDBkR2hwY3k1eVpYQnNlVTFsYzNOaFoyVW9iWE5uTENCN2FXUmxiblJwZEhrNklDZHBaR1Z1ZEdsMGVVQnBaSEF1WTI5dEp5d2dZMjl1ZEdWdWRITTZJQ2RqYjI1MFpXNTBKMzBwWEc1Y2RGeDBYSFJpY21WaGExeHVYSFJjZEdSbFptRjFiSFE2WEc1Y2RGeDBYSFJpY21WaGExeHVYSFJjZEgxY2JseDBmVnh1WEc1Y2RHZGxibVZ5WVhSbFFYTnpaWEowYVc5dUlDaGpiMjUwWlc1MGN5d2diM0pwWjJsdUxDQm9hVzUwS1NBZ2UxeHVYRzVjZEZ4MFkyOXVjMjlzWlM1c2IyY29KMk52Ym5SbGJuUnpMVDRuTENCamIyNTBaVzUwY3lsY2JseDBYSFJqYjI1emIyeGxMbXh2WnlnbmIzSnBaMmx1TFQ0bkxDQnZjbWxuYVc0cFhHNWNkRngwWTI5dWMyOXNaUzVzYjJjb0oyaHBiblF0UGljc0lHaHBiblFwWEc1Y2JseDBYSFJ5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVYRzVjZEZ4MFhIUXZMM1JvWlNCb2FXNTBJR1pwWld4a0lHTnZiblJoYVc1eklIUm9aU0JwYm1admNtMWhkR2x2YmlCdlluUmhhVzVsWkNCaFpuUmxjaUIwYUdVZ2RYTmxjaUJoZFhSb1pXNTBhV05oZEdsdmJseHVYSFJjZEZ4MEx5OGdhV1lnZEdobElHaHBiblFnWTI5dWRHVnVkQ0JwY3lCdWIzUWdjSEpsYzJWdWRDd2dkR2hsYmlCeVpXcGxZM1J6SUhSb1pTQjJZV3gxWlNCM2FYUm9JSFJvWlNCVlVrd2dkRzhnYjNCbGJpQjBhR1VnY0dGblpTQjBieUJoZFhSb1pXNTBhV05oZEdVZ2RHaGxJSFZ6WlhKY2JseDBYSFJjZEdsbUlDZ2hhR2x1ZENrZ2UxeHVYSFJjZEZ4MFhIUnNaWFFnY21WeGRXVnpkRlZ5YkNBOVlHaDBkSEJ6T2k4dllXTmpiM1Z1ZEhNdVoyOXZaMnhsTG1OdmJTOXZMMjloZFhSb01pOTJNaTloZFhSb1AzTmpiM0JsUFdWdFlXbHNKVEl3Y0hKdlptbHNaU1p6ZEdGMFpUMGxNa1p3Y205bWFXeGxKbkpsWkdseVpXTjBYM1Z5YVQwa2UyeHZZMkYwYVc5dUxuQnliM1J2WTI5c2ZTOHZKSHRzYjJOaGRHbHZiaTVvYjNOMGJtRnRaWDBtY21WemNHOXVjMlZmZEhsd1pUMTBiMnRsYmlaamJHbGxiblJmYVdROU9EQTRNekk1TlRZMk1ERXlMWFJ4Y2poeGIyZ3hNVEU1TkRKblpESnJaekF3TjNRd2N6aG1NamMzY205cExtRndjSE11WjI5dloyeGxkWE5sY21OdmJuUmxiblF1WTI5dFlGeHVYSFJjZEZ4MFhIUmpiMjV6YjJ4bExteHZaeWduWm1seWMzUWdkWEpzSUNjc0lISmxjWFZsYzNSVmNtd3NJQ2RrYjI1bEp5bGNibHgwWEhSY2RGeDBjbVZxWldOMEtIdHVZVzFsT2lBblNXUlFURzluYVc1RmNuSnZjaWNzSUd4dloybHVWWEpzT2lCeVpYRjFaWE4wVlhKc2ZTbGNibHgwWEhSY2RIMGdaV3h6WlNCN1hHNWNkRngwWEhSY2RHeGxkQ0JoWTJObGMzTlViMnRsYmlBOUlIUm9hWE11WDNWeWJGQmhjbk5sY2lob2FXNTBMQ0FuWVdOalpYTnpYM1J2YTJWdUp5bGNibHgwWEhSY2RGeDBiR1YwSUdWNGNHbHlaWE1nUFNCTllYUm9MbVpzYjI5eUtFUmhkR1V1Ym05M0tDa2dMeUF4TURBd0tTQXJJSFJvYVhNdVgzVnliRkJoY25ObGNpaG9hVzUwTENBblpYaHdhWEpsYzE5cGJpY3BYRzVjZEZ4MFhIUmNkR1psZEdOb0tHQm9kSFJ3Y3pvdkwzZDNkeTVuYjI5bmJHVmhjR2x6TG1OdmJTOXZZWFYwYURJdmRqRXZkWE5sY21sdVptOC9ZV05qWlhOelgzUnZhMlZ1UFNSN1lXTmpaWE56Vkc5clpXNTlZQ2xjYmx4MFhIUmNkRngwWEhRdWRHaGxiaWh5WlhOZmRYTmxjaUE5UGlCeVpYTmZkWE5sY2k1cWMyOXVLQ2twWEc1Y2RGeDBYSFJjZEZ4MExuUm9aVzRvWW05a2VTQTlQaUI3WEc1Y2RGeDBYSFJjZEZ4MFhIUnNaWFFnYVc1bWIxUnZhMlZ1SUQwZ2UzQnBZM1IxY21VNklHSnZaSGt1Y0dsamRIVnlaU3dnWlcxaGFXdzZJR0p2WkhrdVpXMWhhV3dzSUdaaGJXbHNlVjl1WVcxbE9pQmliMlI1TG1aaGJXbHNlVjl1WVcxbExDQm5hWFpsYmw5dVlXMWxPaUJpYjJSNUxtZHBkbVZ1WDI1aGJXVjlYRzVjZEZ4MFhIUmNkRngwWEhSc1pYUWdZWE56WlhKMGFXOXVJRDBnWW5SdllTaEtVMDlPTG5OMGNtbHVaMmxtZVNoN2RHOXJaVzVKUkRvZ1lXTmpaWE56Vkc5clpXNHNJR1Z0WVdsc09pQmliMlI1TG1WdFlXbHNMQ0JwWkRvZ1ltOWtlUzVwWkgwcEtWeHVYSFJjZEZ4MFhIUmNkRngwYkdWMElIUnZVbVZ6YjJ4MlpTQTlJSHRwYm1adk9pQjdJR1Y0Y0dseVpYTTZJR1Y0Y0dseVpYTWdmU3dnWVhOelpYSjBhVzl1T2lCaGMzTmxjblJwYjI0c0lHbGtjRG9nZTJSdmJXRnBiam9nWkc5dFlXbHVMQ0J3Y205MGIyTnZiRG9nSjA5QmRYUm9JREl1TUNkOUxDQnBibVp2Vkc5clpXNDZJR2x1Wm05VWIydGxiaXdnYVc1MFpYSjNiM0pyYVc1bk9pQjdZV05qWlhOelgzUnZhMlZ1T2lCaFkyTmxjM05VYjJ0bGJpd2daRzl0WVdsdU9pQmtiMjFoYVc0Z2ZYMWNibHgwWEhSY2RGeDBYSFJjZEdOdmJuTnZiR1V1Ykc5bktDZFNSVk5QVEZaSlRrY2dWRWhKVXlCUFFrcEZRMVFuTENCMGIxSmxjMjlzZG1VcFhHNWNkRngwWEhSY2RGeDBYSFJ5WlhOdmJIWmxLSFJ2VW1WemIyeDJaU2xjYmx4MFhIUmNkRngwWEhSOUtTNWpZWFJqYUNoeVpXcGxZM1FwWEc1Y2RGeDBYSFI5WEc1Y2RGeDBmU2xjYmx4MGZWeHVYRzVjZEY5MWNteFFZWEp6WlhJb2RYSnNMQ0J1WVcxbEtTQjdYRzVjZEZ4MGJtRnRaU0E5SUc1aGJXVXVjbVZ3YkdGalpTZ3ZXMXhjVzEwdkxDQW5YRnhjWEZ4Y1d5Y3BMbkpsY0d4aFkyVW9MMXRjWEYxZEx5d2dKMXhjWEZ4Y1hGMG5LVnh1WEhSY2RHeGxkQ0J5WldkbGVGTWdQU0FuVzF4Y1hGd2pKajlkSnlBcklHNWhiV1VnS3lBblBTaGJYaVlqWFNvcEoxeHVYSFJjZEd4bGRDQnlaV2RsZUNBOUlHNWxkeUJTWldkRmVIQW9jbVZuWlhoVEtWeHVYSFJjZEd4bGRDQnlaWE4xYkhSeklEMGdjbVZuWlhndVpYaGxZeWgxY213cFhHNWNkRngwYVdZZ0tISmxjM1ZzZEhNZ1BUMDlJRzUxYkd3cFhHNWNkRngwWEhSeVpYUjFjbTRnSnlkY2JseDBYSFJsYkhObFhHNWNkRngwWEhSeVpYUjFjbTRnY21WemRXeDBjMXN4WFZ4dVhIUjlYRzVjYmx4MEx5b3FYRzVjZENBcUlGUm9hWE1nWm5WdVkzUnBiMjRnY21WalpXbDJaWE1nWVNCdFpYTnpZV2RsSUdGdVpDQmhJSFpoYkhWbExpQkpkQ0J5WlhCc2FXVnpJSFJvWlNCMllXeDFaU0IwYnlCMGFHVWdjMlZ1WkdWeUlHOW1JSFJvWlNCdFpYTnpZV2RsSUhKbFkyVnBkbVZrWEc1Y2RDQXFYRzVjZENBcUlFQndZWEpoYlNBZ2UyMWxjM05oWjJWOUlDQWdiV1Z6YzJGblpTQnlaV05sYVhabFpGeHVYSFFnS2lCQWNHRnlZVzBnSUh0MllXeDFaWDBnSUNBZ0lIWmhiSFZsSUhSdklHbHVZMngxWkdVZ2FXNGdkR2hsSUc1bGR5QnRaWE56WVdkbElIUnZJSE5sYm1SY2JseDBJQ292WEc1Y2RISmxjR3g1VFdWemMyRm5aU2h0YzJjc0lIWmhiSFZsS1NCN1hHNWNkRngwYkdWMElHMWxjM05oWjJVZ1BTQjdhV1E2SUcxelp5NXBaQ3dnZEhsd1pUb2dKM0psYzNCdmJuTmxKeXdnZEc4NklHMXpaeTVtY205dExDQm1jbTl0T2lCdGMyY3VkRzhzSUdKdlpIazZJSHRqYjJSbE9pQXlNREFzSUhaaGJIVmxPaUIyWVd4MVpYMTlYRzVjYmx4MFhIUjBhR2x6TG0xbGMzTmhaMlZDZFhNdWNHOXpkRTFsYzNOaFoyVW9iV1Z6YzJGblpTbGNibHgwZlZ4dWZWeHVYRzR2S2lwY2JpQXFJRlJ2SUdGamRHbDJZWFJsSUhSb2FYTWdjSEp2ZEc5amIyd2djM1IxWWl3Z2RYTnBibWNnZEdobElITmhiV1VnYldWMGFHOWtJR1p2Y2lCaGJHd2djSEp2ZEc5emRIVmlMbHh1SUNvZ1FIQmhjbUZ0SUNCN1ZWSk1MbEoxYm5ScGJXVlZVa3g5SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKMWJuUnBiV1ZRY205MGIxTjBkV0pWVWt3Z2NuVnVkR2x0WlZCeWIzUnZVM1ZpVlZKTVhHNGdLaUJBY0dGeVlXMGdJSHROWlhOellXZGxMazFsYzNOaFoyVjlJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZblZ6VUc5emRFMWxjM05oWjJVZ0lDQWdJR052Ym1acFozVnlZWFJwYjI1Y2JpQXFJRUJ3WVhKaGJTQWdlMUJ5YjNSdlUzUjFZa1JsYzJOeWFYQjBiM0l1UTI5dVptbG5kWEpoZEdsdmJrUmhkR0ZNYVhOMGZTQmpiMjVtYVdkMWNtRjBhVzl1SUNBZ0lDQWdZMjl1Wm1sbmRYSmhkR2x2Ymx4dUlDb2dRSEpsZEhWeWJpQjdUMkpxWldOMGZTQlBZbXBsWTNRZ2QybDBhQ0J1WVcxbElHRnVaQ0JwYm5OMFlXNWpaU0J2WmlCUWNtOTBiMU4wZFdKY2JpQXFMMXh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdZV04wYVhaaGRHVW9kWEpzTENCaWRYTXNJR052Ym1acFp5a2dlMXh1WEhSeVpYUjFjbTRnZTF4dVhIUmNkRzVoYldVNklDZEpUVk5KVjFCeWIzaDVVM1IxWWljc1hHNWNkRngwYVc1emRHRnVZMlU2SUc1bGR5QkpUVk5KVjFCeWIzaDVVM1IxWWloMWNtd3NJR0oxY3l3Z1kyOXVabWxuS1Z4dVhIUjlYRzU5WEc1Y2JseHVYRzVjYmk4dklGZEZRbEJCUTBzZ1JrOVBWRVZTSUM4dlhHNHZMeUF1TGk5a1pYWXRjSEp2ZEc5emRIVmljeTl6Y21NdmFXUndjSEp2ZUhrdmMybHdMbkpsZEdocGJtc3RjSEp2YW1WamRDNWxkUzlKVFZOSlYxQnliM2g1VTNSMVlpNXBaSEF1YW5NaVhTd2ljMjkxY21ObFVtOXZkQ0k2SWlKOVxuLy8jIHNvdXJjZVVSTD13ZWJwYWNrLWludGVybmFsOi8vLzBcbiIpOwoKLyoqKi8gfSkKLyoqKioqKi8gXSlbImRlZmF1bHQiXTsKfSk7",
      "sourceCodeClassname": "rethink-project.eu",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "4.20",
    "description": "IDPProxy rethink-project.eu description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "51d1a6bc8ef00faacd2f8f98218d99c6b",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "rethink-project.eu",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "SlackProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "slack.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "4.10",
    "description": "IDPProxy slack description",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "54c3d276bb3c7038dad08fd45a4b3b706",
    "constraints": {
      "browser": true
    },
    "interworking": true,
    "objectName": "slack.com",
    "configuration": {},
    "messageSchemas": "",
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "NodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "google.com",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "2.30",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "52c91699f84b479f34e9f7abce2255fff",
    "constraints": {
      "node": true
    },
    "objectName": "google.com",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsForBrowserProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "2.30",
    "description": "IDPProxy for browser idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "5d2606fd332d71526cafc4c13d80437b4",
    "constraints": {
      "browser": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "FakeNodejsProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "nodejs-idp",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "2.30",
    "description": "IDPProxy for node idp",
    "language": "javascript",
    "type": "IDPProxys",
    "cguid": "57378b186a1ba1a7af6d8190014c85afc",
    "constraints": {
      "node": true
    },
    "objectName": "nodejs-idp",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  },
  "GoogleIdpProxyStub": {
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "GoogleIdpProxyStub",
      "encoding": "base64",
      "signature": ""
    },
    "sourcePackageURL": "/sourcePackage",
    "version": "2.20",
    "description": "",
    "language": "Javascript",
    "type": "IDPProxys",
    "cguid": "5fe88c210039898a45c75f6de8c56f417",
    "constraints": {},
    "objectName": "GoogleIdpProxyStub",
    "configuration": {},
    "messageSchemas": [],
    "dataObjects": [],
    "signature": "",
    "accessControlPolicy": "somePolicy"
  }
}