{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for Runtime.js 
// version: 0.7.0
// Last build: Fri Nov 04 2016 16:46:19 GMT+0000 (WET)

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Runtime = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":20,"core-js/shim":413,"regenerator-runtime/runtime":415}],2:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };
},{"core-js/library/fn/json/stringify":21}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":22}],4:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":23}],5:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":24}],6:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":25}],7:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/get-prototype-of":26}],8:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/is-frozen"), __esModule: true };
},{"core-js/library/fn/object/is-frozen":27}],9:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":28}],10:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":29}],11:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":30}],12:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":31}],13:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":32}],14:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],15:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
},{"../core-js/object/define-property":5}],16:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _getPrototypeOf = require("../core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = require("../core-js/object/get-own-property-descriptor");

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};
},{"../core-js/object/get-own-property-descriptor":6,"../core-js/object/get-prototype-of":7}],17:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _setPrototypeOf = require("../core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require("../core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
},{"../core-js/object/create":4,"../core-js/object/set-prototype-of":10,"../helpers/typeof":19}],18:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};
},{"../helpers/typeof":19}],19:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":12,"../core-js/symbol/iterator":13}],20:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;
},{"../../modules/_core":141,"../../modules/core.regexp.escape":237}],21:[function(require,module,exports){
var core  = require('../../modules/_core')
  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};
},{"../../modules/_core":40}],22:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;
},{"../../modules/_core":40,"../../modules/es6.object.assign":106}],23:[function(require,module,exports){
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};
},{"../../modules/_core":40,"../../modules/es6.object.create":107}],24:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};
},{"../../modules/_core":40,"../../modules/es6.object.define-property":108}],25:[function(require,module,exports){
require('../../modules/es6.object.get-own-property-descriptor');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyDescriptor(it, key){
  return $Object.getOwnPropertyDescriptor(it, key);
};
},{"../../modules/_core":40,"../../modules/es6.object.get-own-property-descriptor":109}],26:[function(require,module,exports){
require('../../modules/es6.object.get-prototype-of');
module.exports = require('../../modules/_core').Object.getPrototypeOf;
},{"../../modules/_core":40,"../../modules/es6.object.get-prototype-of":110}],27:[function(require,module,exports){
require('../../modules/es6.object.is-frozen');
module.exports = require('../../modules/_core').Object.isFrozen;
},{"../../modules/_core":40,"../../modules/es6.object.is-frozen":111}],28:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;
},{"../../modules/_core":40,"../../modules/es6.object.keys":112}],29:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;
},{"../../modules/_core":40,"../../modules/es6.object.set-prototype-of":113}],30:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
module.exports = require('../modules/_core').Promise;
},{"../modules/_core":40,"../modules/es6.object.to-string":114,"../modules/es6.promise":115,"../modules/es6.string.iterator":116,"../modules/web.dom.iterable":120}],31:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;
},{"../../modules/_core":40,"../../modules/es6.object.to-string":114,"../../modules/es6.symbol":117,"../../modules/es7.symbol.async-iterator":118,"../../modules/es7.symbol.observable":119}],32:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');
},{"../../modules/_wks-ext":102,"../../modules/es6.string.iterator":116,"../../modules/web.dom.iterable":120}],33:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],34:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],35:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],36:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":59}],37:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":94,"./_to-iobject":96,"./_to-length":97}],38:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":39,"./_wks":103}],39:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],40:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],41:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":33}],42:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],43:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":48}],44:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":50,"./_is-object":59}],45:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],46:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":77,"./_object-keys":80,"./_object-pie":81}],47:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , ctx       = require('./_ctx')
  , hide      = require('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":40,"./_ctx":41,"./_global":50,"./_hide":52}],48:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],49:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":36,"./_ctx":41,"./_is-array-iter":57,"./_iter-call":60,"./_to-length":97,"./core.get-iterator-method":104}],50:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],51:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],52:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":43,"./_object-dp":72,"./_property-desc":83}],53:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":50}],54:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":43,"./_dom-create":44,"./_fails":48}],55:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],56:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":39}],57:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":65,"./_wks":103}],58:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":39}],59:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],60:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":36}],61:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":52,"./_object-create":71,"./_property-desc":83,"./_set-to-string-tag":88,"./_wks":103}],62:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":47,"./_has":51,"./_hide":52,"./_iter-create":61,"./_iterators":65,"./_library":67,"./_object-gpo":78,"./_redefine":85,"./_set-to-string-tag":88,"./_wks":103}],63:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":103}],64:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],65:[function(require,module,exports){
module.exports = {};
},{}],66:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":80,"./_to-iobject":96}],67:[function(require,module,exports){
module.exports = true;
},{}],68:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":48,"./_has":51,"./_is-object":59,"./_object-dp":72,"./_uid":100}],69:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};
},{"./_cof":39,"./_global":50,"./_task":93}],70:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":48,"./_iobject":56,"./_object-gops":77,"./_object-keys":80,"./_object-pie":81,"./_to-object":98}],71:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":36,"./_dom-create":44,"./_enum-bug-keys":45,"./_html":53,"./_object-dps":73,"./_shared-key":89}],72:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":36,"./_descriptors":43,"./_ie8-dom-define":54,"./_to-primitive":99}],73:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":36,"./_descriptors":43,"./_object-dp":72,"./_object-keys":80}],74:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":43,"./_has":51,"./_ie8-dom-define":54,"./_object-pie":81,"./_property-desc":83,"./_to-iobject":96,"./_to-primitive":99}],75:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":76,"./_to-iobject":96}],76:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":45,"./_object-keys-internal":79}],77:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],78:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":51,"./_shared-key":89,"./_to-object":98}],79:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":37,"./_has":51,"./_shared-key":89,"./_to-iobject":96}],80:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":45,"./_object-keys-internal":79}],81:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],82:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":40,"./_export":47,"./_fails":48}],83:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],84:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};
},{"./_hide":52}],85:[function(require,module,exports){
module.exports = require('./_hide');
},{"./_hide":52}],86:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object')
  , anObject = require('./_an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./_an-object":36,"./_ctx":41,"./_is-object":59,"./_object-gopd":74}],87:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , core        = require('./_core')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_core":40,"./_descriptors":43,"./_global":50,"./_object-dp":72,"./_wks":103}],88:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":51,"./_object-dp":72,"./_wks":103}],89:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":90,"./_uid":100}],90:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":50}],91:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":33,"./_an-object":36,"./_wks":103}],92:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":42,"./_to-integer":95}],93:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":39,"./_ctx":41,"./_dom-create":44,"./_global":50,"./_html":53,"./_invoke":55}],94:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":95}],95:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],96:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":42,"./_iobject":56}],97:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":95}],98:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":42}],99:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":59}],100:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],101:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":40,"./_global":50,"./_library":67,"./_object-dp":72,"./_wks-ext":102}],102:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":103}],103:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":50,"./_shared":90,"./_uid":100}],104:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":38,"./_core":40,"./_iterators":65,"./_wks":103}],105:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":34,"./_iter-define":62,"./_iter-step":64,"./_iterators":65,"./_to-iobject":96}],106:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":47,"./_object-assign":70}],107:[function(require,module,exports){
var $export = require('./_export')
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: require('./_object-create')});
},{"./_export":47,"./_object-create":71}],108:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":43,"./_export":47,"./_object-dp":72}],109:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = require('./_to-iobject')
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./_object-gopd":74,"./_object-sap":82,"./_to-iobject":96}],110:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = require('./_to-object')
  , $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./_object-gpo":78,"./_object-sap":82,"./_to-object":98}],111:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./_is-object":59,"./_object-sap":82}],112:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":80,"./_object-sap":82,"./_to-object":98}],113:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});
},{"./_export":47,"./_set-proto":86}],114:[function(require,module,exports){

},{}],115:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":33,"./_an-instance":35,"./_classof":38,"./_core":40,"./_ctx":41,"./_export":47,"./_for-of":49,"./_global":50,"./_is-object":59,"./_iter-detect":63,"./_library":67,"./_microtask":69,"./_redefine-all":84,"./_set-species":87,"./_set-to-string-tag":88,"./_species-constructor":91,"./_task":93,"./_wks":103}],116:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":62,"./_string-at":92}],117:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":36,"./_descriptors":43,"./_enum-keys":46,"./_export":47,"./_fails":48,"./_global":50,"./_has":51,"./_hide":52,"./_is-array":58,"./_keyof":66,"./_library":67,"./_meta":68,"./_object-create":71,"./_object-dp":72,"./_object-gopd":74,"./_object-gopn":76,"./_object-gopn-ext":75,"./_object-gops":77,"./_object-keys":80,"./_object-pie":81,"./_property-desc":83,"./_redefine":85,"./_set-to-string-tag":88,"./_shared":90,"./_to-iobject":96,"./_to-primitive":99,"./_uid":100,"./_wks":103,"./_wks-define":101,"./_wks-ext":102}],118:[function(require,module,exports){
require('./_wks-define')('asyncIterator');
},{"./_wks-define":101}],119:[function(require,module,exports){
require('./_wks-define')('observable');
},{"./_wks-define":101}],120:[function(require,module,exports){
require('./es6.array.iterator');
var global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , TO_STRING_TAG = require('./_wks')('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
},{"./_global":50,"./_hide":52,"./_iterators":65,"./_wks":103,"./es6.array.iterator":105}],121:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"dup":33}],122:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function(it, msg){
  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
  return +it;
};
},{"./_cof":136}],123:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};
},{"./_hide":158,"./_wks":235}],124:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"dup":35}],125:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./_is-object":167,"dup":36}],126:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};
},{"./_to-index":223,"./_to-length":226,"./_to-object":227}],127:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};
},{"./_to-index":223,"./_to-length":226,"./_to-object":227}],128:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":155}],129:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./_to-index":223,"./_to-iobject":225,"./_to-length":226,"dup":37}],130:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./_ctx')
  , IObject  = require('./_iobject')
  , toObject = require('./_to-object')
  , toLength = require('./_to-length')
  , asc      = require('./_array-species-create');
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./_array-species-create":133,"./_ctx":143,"./_iobject":163,"./_to-length":226,"./_to-object":227}],131:[function(require,module,exports){
var aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , IObject   = require('./_iobject')
  , toLength  = require('./_to-length');

module.exports = function(that, callbackfn, aLen, memo, isRight){
  aFunction(callbackfn);
  var O      = toObject(that)
    , self   = IObject(O)
    , length = toLength(O.length)
    , index  = isRight ? length - 1 : 0
    , i      = isRight ? -1 : 1;
  if(aLen < 2)for(;;){
    if(index in self){
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if(isRight ? index < 0 : length <= index){
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};
},{"./_a-function":121,"./_iobject":163,"./_to-length":226,"./_to-object":227}],132:[function(require,module,exports){
var isObject = require('./_is-object')
  , isArray  = require('./_is-array')
  , SPECIES  = require('./_wks')('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};
},{"./_is-array":165,"./_is-object":167,"./_wks":235}],133:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};
},{"./_array-species-constructor":132}],134:[function(require,module,exports){
'use strict';
var aFunction  = require('./_a-function')
  , isObject   = require('./_is-object')
  , invoke     = require('./_invoke')
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};
},{"./_a-function":121,"./_invoke":162,"./_is-object":167}],135:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"./_cof":136,"./_wks":235,"dup":38}],136:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39}],137:[function(require,module,exports){
'use strict';
var dP          = require('./_object-dp').f
  , create      = require('./_object-create')
  , redefineAll = require('./_redefine-all')
  , ctx         = require('./_ctx')
  , anInstance  = require('./_an-instance')
  , defined     = require('./_defined')
  , forOf       = require('./_for-of')
  , $iterDefine = require('./_iter-define')
  , step        = require('./_iter-step')
  , setSpecies  = require('./_set-species')
  , DESCRIPTORS = require('./_descriptors')
  , fastKey     = require('./_meta').fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./_an-instance":124,"./_ctx":143,"./_defined":145,"./_descriptors":146,"./_for-of":155,"./_iter-define":171,"./_iter-step":173,"./_meta":180,"./_object-create":184,"./_object-dp":185,"./_redefine-all":204,"./_set-species":209}],138:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof')
  , from    = require('./_array-from-iterable');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};
},{"./_array-from-iterable":128,"./_classof":135}],139:[function(require,module,exports){
'use strict';
var redefineAll       = require('./_redefine-all')
  , getWeak           = require('./_meta').getWeak
  , anObject          = require('./_an-object')
  , isObject          = require('./_is-object')
  , anInstance        = require('./_an-instance')
  , forOf             = require('./_for-of')
  , createArrayMethod = require('./_array-methods')
  , $has              = require('./_has')
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};
},{"./_an-instance":124,"./_an-object":125,"./_array-methods":130,"./_for-of":155,"./_has":157,"./_is-object":167,"./_meta":180,"./_redefine-all":204}],140:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , $export           = require('./_export')
  , redefine          = require('./_redefine')
  , redefineAll       = require('./_redefine-all')
  , meta              = require('./_meta')
  , forOf             = require('./_for-of')
  , anInstance        = require('./_an-instance')
  , isObject          = require('./_is-object')
  , fails             = require('./_fails')
  , $iterDetect       = require('./_iter-detect')
  , setToStringTag    = require('./_set-to-string-tag')
  , inheritIfRequired = require('./_inherit-if-required');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./_an-instance":124,"./_export":150,"./_fails":152,"./_for-of":155,"./_global":156,"./_inherit-if-required":161,"./_is-object":167,"./_iter-detect":172,"./_meta":180,"./_redefine":205,"./_redefine-all":204,"./_set-to-string-tag":210}],141:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"dup":40}],142:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp')
  , createDesc      = require('./_property-desc');

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};
},{"./_object-dp":185,"./_property-desc":203}],143:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./_a-function":121,"dup":41}],144:[function(require,module,exports){
'use strict';
var anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive')
  , NUMBER      = 'number';

module.exports = function(hint){
  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};
},{"./_an-object":125,"./_to-primitive":228}],145:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"dup":42}],146:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"./_fails":152,"dup":43}],147:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"./_global":156,"./_is-object":167,"dup":44}],148:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"dup":45}],149:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./_object-gops":191,"./_object-keys":194,"./_object-pie":195,"dup":46}],150:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , hide      = require('./_hide')
  , redefine  = require('./_redefine')
  , ctx       = require('./_ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":141,"./_ctx":143,"./_global":156,"./_hide":158,"./_redefine":205}],151:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};
},{"./_wks":235}],152:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],153:[function(require,module,exports){
'use strict';
var hide     = require('./_hide')
  , redefine = require('./_redefine')
  , fails    = require('./_fails')
  , defined  = require('./_defined')
  , wks      = require('./_wks');

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};
},{"./_defined":145,"./_fails":152,"./_hide":158,"./_redefine":205,"./_wks":235}],154:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};
},{"./_an-object":125}],155:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./_an-object":125,"./_ctx":143,"./_is-array-iter":164,"./_iter-call":169,"./_to-length":226,"./core.get-iterator-method":236,"dup":49}],156:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"dup":50}],157:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],158:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./_descriptors":146,"./_object-dp":185,"./_property-desc":203,"dup":52}],159:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./_global":156,"dup":53}],160:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./_descriptors":146,"./_dom-create":147,"./_fails":152,"dup":54}],161:[function(require,module,exports){
var isObject       = require('./_is-object')
  , setPrototypeOf = require('./_set-proto').set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};
},{"./_is-object":167,"./_set-proto":208}],162:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"dup":55}],163:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"./_cof":136,"dup":56}],164:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"./_iterators":174,"./_wks":235,"dup":57}],165:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"./_cof":136,"dup":58}],166:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./_is-object":167}],167:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],168:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object')
  , cof      = require('./_cof')
  , MATCH    = require('./_wks')('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};
},{"./_cof":136,"./_is-object":167,"./_wks":235}],169:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"./_an-object":125,"dup":60}],170:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"./_hide":158,"./_object-create":184,"./_property-desc":203,"./_set-to-string-tag":210,"./_wks":235,"dup":61}],171:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"./_export":150,"./_has":157,"./_hide":158,"./_iter-create":170,"./_iterators":174,"./_library":176,"./_object-gpo":192,"./_redefine":205,"./_set-to-string-tag":210,"./_wks":235,"dup":62}],172:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./_wks":235,"dup":63}],173:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"dup":64}],174:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"dup":65}],175:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./_object-keys":194,"./_to-iobject":225,"dup":66}],176:[function(require,module,exports){
module.exports = false;
},{}],177:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;
},{}],178:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],179:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],180:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"./_fails":152,"./_has":157,"./_is-object":167,"./_object-dp":185,"./_uid":232,"dup":68}],181:[function(require,module,exports){
var Map     = require('./es6.map')
  , $export = require('./_export')
  , shared  = require('./_shared')('metadata')
  , store   = shared.store || (shared.store = new (require('./es6.weak-map')));

var getOrCreateMetadataMap = function(target, targetKey, create){
  var targetMetadata = store.get(target);
  if(!targetMetadata){
    if(!create)return undefined;
    store.set(target, targetMetadata = new Map);
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if(!keyMetadata){
    if(!create)return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map);
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey){
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
    , keys        = [];
  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
  return keys;
};
var toMetaKey = function(it){
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O){
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};
},{"./_export":150,"./_shared":212,"./es6.map":267,"./es6.weak-map":373}],182:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"./_cof":136,"./_global":156,"./_task":222,"dup":69}],183:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"./_fails":152,"./_iobject":163,"./_object-gops":191,"./_object-keys":194,"./_object-pie":195,"./_to-object":227,"dup":70}],184:[function(require,module,exports){
arguments[4][71][0].apply(exports,arguments)
},{"./_an-object":125,"./_dom-create":147,"./_enum-bug-keys":148,"./_html":159,"./_object-dps":186,"./_shared-key":211,"dup":71}],185:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"./_an-object":125,"./_descriptors":146,"./_ie8-dom-define":160,"./_to-primitive":228,"dup":72}],186:[function(require,module,exports){
arguments[4][73][0].apply(exports,arguments)
},{"./_an-object":125,"./_descriptors":146,"./_object-dp":185,"./_object-keys":194,"dup":73}],187:[function(require,module,exports){
// Forced replacement prototype accessors methods
module.exports = require('./_library')|| !require('./_fails')(function(){
  var K = Math.random();
  // In FF throws only define methods
  __defineSetter__.call(null, K, function(){ /* empty */});
  delete require('./_global')[K];
});
},{"./_fails":152,"./_global":156,"./_library":176}],188:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"./_descriptors":146,"./_has":157,"./_ie8-dom-define":160,"./_object-pie":195,"./_property-desc":203,"./_to-iobject":225,"./_to-primitive":228,"dup":74}],189:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"./_object-gopn":190,"./_to-iobject":225,"dup":75}],190:[function(require,module,exports){
arguments[4][76][0].apply(exports,arguments)
},{"./_enum-bug-keys":148,"./_object-keys-internal":193,"dup":76}],191:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"dup":77}],192:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./_has":157,"./_shared-key":211,"./_to-object":227,"dup":78}],193:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"./_array-includes":129,"./_has":157,"./_shared-key":211,"./_to-iobject":225,"dup":79}],194:[function(require,module,exports){
arguments[4][80][0].apply(exports,arguments)
},{"./_enum-bug-keys":148,"./_object-keys-internal":193,"dup":80}],195:[function(require,module,exports){
arguments[4][81][0].apply(exports,arguments)
},{"dup":81}],196:[function(require,module,exports){
arguments[4][82][0].apply(exports,arguments)
},{"./_core":141,"./_export":150,"./_fails":152,"dup":82}],197:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject')
  , isEnum    = require('./_object-pie').f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./_object-keys":194,"./_object-pie":195,"./_to-iobject":225}],198:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN     = require('./_object-gopn')
  , gOPS     = require('./_object-gops')
  , anObject = require('./_an-object')
  , Reflect  = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./_an-object":125,"./_global":156,"./_object-gopn":190,"./_object-gops":191}],199:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat
  , $trim       = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim(String(str), 3)
    , result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;
},{"./_global":156,"./_string-trim":220,"./_string-ws":221}],200:[function(require,module,exports){
var $parseInt = require('./_global').parseInt
  , $trim     = require('./_string-trim').trim
  , ws        = require('./_string-ws')
  , hex       = /^[\-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;
},{"./_global":156,"./_string-trim":220,"./_string-ws":221}],201:[function(require,module,exports){
'use strict';
var path      = require('./_path')
  , invoke    = require('./_invoke')
  , aFunction = require('./_a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
},{"./_a-function":121,"./_invoke":162,"./_path":202}],202:[function(require,module,exports){
module.exports = require('./_global');
},{"./_global":156}],203:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"dup":83}],204:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};
},{"./_redefine":205}],205:[function(require,module,exports){
var global    = require('./_global')
  , hide      = require('./_hide')
  , has       = require('./_has')
  , SRC       = require('./_uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./_core":141,"./_global":156,"./_has":157,"./_hide":158,"./_uid":232}],206:[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],207:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],208:[function(require,module,exports){
arguments[4][86][0].apply(exports,arguments)
},{"./_an-object":125,"./_ctx":143,"./_is-object":167,"./_object-gopd":188,"dup":86}],209:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_descriptors":146,"./_global":156,"./_object-dp":185,"./_wks":235}],210:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./_has":157,"./_object-dp":185,"./_wks":235,"dup":88}],211:[function(require,module,exports){
arguments[4][89][0].apply(exports,arguments)
},{"./_shared":212,"./_uid":232,"dup":89}],212:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"./_global":156,"dup":90}],213:[function(require,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"./_a-function":121,"./_an-object":125,"./_wks":235,"dup":91}],214:[function(require,module,exports){
var fails = require('./_fails');

module.exports = function(method, arg){
  return !!method && fails(function(){
    arg ? method.call(null, function(){}, 1) : method.call(null);
  });
};
},{"./_fails":152}],215:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"./_defined":145,"./_to-integer":224,"dup":92}],216:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp')
  , defined  = require('./_defined');

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./_defined":145,"./_is-regexp":168}],217:[function(require,module,exports){
var $export = require('./_export')
  , fails   = require('./_fails')
  , defined = require('./_defined')
  , quot    = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S  = String(defined(string))
    , p1 = '<' + tag;
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec){
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function(){
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};
},{"./_defined":145,"./_export":150,"./_fails":152}],218:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length')
  , repeat   = require('./_string-repeat')
  , defined  = require('./_defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength || fillStr == '')return S;
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":145,"./_string-repeat":219,"./_to-length":226}],219:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./_defined":145,"./_to-integer":224}],220:[function(require,module,exports){
var $export = require('./_export')
  , defined = require('./_defined')
  , fails   = require('./_fails')
  , spaces  = require('./_string-ws')
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;
},{"./_defined":145,"./_export":150,"./_fails":152,"./_string-ws":221}],221:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
},{}],222:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"./_cof":136,"./_ctx":143,"./_dom-create":147,"./_global":156,"./_html":159,"./_invoke":162,"dup":93}],223:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"./_to-integer":224,"dup":94}],224:[function(require,module,exports){
arguments[4][95][0].apply(exports,arguments)
},{"dup":95}],225:[function(require,module,exports){
arguments[4][96][0].apply(exports,arguments)
},{"./_defined":145,"./_iobject":163,"dup":96}],226:[function(require,module,exports){
arguments[4][97][0].apply(exports,arguments)
},{"./_to-integer":224,"dup":97}],227:[function(require,module,exports){
arguments[4][98][0].apply(exports,arguments)
},{"./_defined":145,"dup":98}],228:[function(require,module,exports){
arguments[4][99][0].apply(exports,arguments)
},{"./_is-object":167,"dup":99}],229:[function(require,module,exports){
'use strict';
if(require('./_descriptors')){
  var LIBRARY             = require('./_library')
    , global              = require('./_global')
    , fails               = require('./_fails')
    , $export             = require('./_export')
    , $typed              = require('./_typed')
    , $buffer             = require('./_typed-buffer')
    , ctx                 = require('./_ctx')
    , anInstance          = require('./_an-instance')
    , propertyDesc        = require('./_property-desc')
    , hide                = require('./_hide')
    , redefineAll         = require('./_redefine-all')
    , toInteger           = require('./_to-integer')
    , toLength            = require('./_to-length')
    , toIndex             = require('./_to-index')
    , toPrimitive         = require('./_to-primitive')
    , has                 = require('./_has')
    , same                = require('./_same-value')
    , classof             = require('./_classof')
    , isObject            = require('./_is-object')
    , toObject            = require('./_to-object')
    , isArrayIter         = require('./_is-array-iter')
    , create              = require('./_object-create')
    , getPrototypeOf      = require('./_object-gpo')
    , gOPN                = require('./_object-gopn').f
    , getIterFn           = require('./core.get-iterator-method')
    , uid                 = require('./_uid')
    , wks                 = require('./_wks')
    , createArrayMethod   = require('./_array-methods')
    , createArrayIncludes = require('./_array-includes')
    , speciesConstructor  = require('./_species-constructor')
    , ArrayIterators      = require('./es6.array.iterator')
    , Iterators           = require('./_iterators')
    , $iterDetect         = require('./_iter-detect')
    , setSpecies          = require('./_set-species')
    , arrayFill           = require('./_array-fill')
    , arrayCopyWithin     = require('./_array-copy-within')
    , $DP                 = require('./_object-dp')
    , $GOPD               = require('./_object-gopd')
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };
},{"./_an-instance":124,"./_array-copy-within":126,"./_array-fill":127,"./_array-includes":129,"./_array-methods":130,"./_classof":135,"./_ctx":143,"./_descriptors":146,"./_export":150,"./_fails":152,"./_global":156,"./_has":157,"./_hide":158,"./_is-array-iter":164,"./_is-object":167,"./_iter-detect":172,"./_iterators":174,"./_library":176,"./_object-create":184,"./_object-dp":185,"./_object-gopd":188,"./_object-gopn":190,"./_object-gpo":192,"./_property-desc":203,"./_redefine-all":204,"./_same-value":207,"./_set-species":209,"./_species-constructor":213,"./_to-index":223,"./_to-integer":224,"./_to-length":226,"./_to-object":227,"./_to-primitive":228,"./_typed":231,"./_typed-buffer":230,"./_uid":232,"./_wks":235,"./core.get-iterator-method":236,"./es6.array.iterator":248}],230:[function(require,module,exports){
'use strict';
var global         = require('./_global')
  , DESCRIPTORS    = require('./_descriptors')
  , LIBRARY        = require('./_library')
  , $typed         = require('./_typed')
  , hide           = require('./_hide')
  , redefineAll    = require('./_redefine-all')
  , fails          = require('./_fails')
  , anInstance     = require('./_an-instance')
  , toInteger      = require('./_to-integer')
  , toLength       = require('./_to-length')
  , gOPN           = require('./_object-gopn').f
  , dP             = require('./_object-dp').f
  , arrayFill      = require('./_array-fill')
  , setToStringTag = require('./_set-to-string-tag')
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;
},{"./_an-instance":124,"./_array-fill":127,"./_descriptors":146,"./_fails":152,"./_global":156,"./_hide":158,"./_library":176,"./_object-dp":185,"./_object-gopn":190,"./_redefine-all":204,"./_set-to-string-tag":210,"./_to-integer":224,"./_to-length":226,"./_typed":231}],231:[function(require,module,exports){
var global = require('./_global')
  , hide   = require('./_hide')
  , uid    = require('./_uid')
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};
},{"./_global":156,"./_hide":158,"./_uid":232}],232:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"dup":100}],233:[function(require,module,exports){
arguments[4][101][0].apply(exports,arguments)
},{"./_core":141,"./_global":156,"./_library":176,"./_object-dp":185,"./_wks-ext":234,"dup":101}],234:[function(require,module,exports){
arguments[4][102][0].apply(exports,arguments)
},{"./_wks":235,"dup":102}],235:[function(require,module,exports){
arguments[4][103][0].apply(exports,arguments)
},{"./_global":156,"./_shared":212,"./_uid":232,"dup":103}],236:[function(require,module,exports){
arguments[4][104][0].apply(exports,arguments)
},{"./_classof":135,"./_core":141,"./_iterators":174,"./_wks":235,"dup":104}],237:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export')
  , $re     = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./_export":150,"./_replacer":206}],238:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});

require('./_add-to-unscopables')('copyWithin');
},{"./_add-to-unscopables":123,"./_array-copy-within":126,"./_export":150}],239:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $every  = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */){
    return $every(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],240:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {fill: require('./_array-fill')});

require('./_add-to-unscopables')('fill');
},{"./_add-to-unscopables":123,"./_array-fill":127,"./_export":150}],241:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */){
    return $filter(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],242:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":123,"./_array-methods":130,"./_export":150}],243:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":123,"./_array-methods":130,"./_export":150}],244:[function(require,module,exports){
'use strict';
var $export  = require('./_export')
  , $forEach = require('./_array-methods')(0)
  , STRICT   = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */){
    return $forEach(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],245:[function(require,module,exports){
'use strict';
var ctx            = require('./_ctx')
  , $export        = require('./_export')
  , toObject       = require('./_to-object')
  , call           = require('./_iter-call')
  , isArrayIter    = require('./_is-array-iter')
  , toLength       = require('./_to-length')
  , createProperty = require('./_create-property')
  , getIterFn      = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":142,"./_ctx":143,"./_export":150,"./_is-array-iter":164,"./_iter-call":169,"./_iter-detect":172,"./_to-length":226,"./_to-object":227,"./core.get-iterator-method":236}],246:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , $indexOf      = require('./_array-includes')(false)
  , $native       = [].indexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});
},{"./_array-includes":129,"./_export":150,"./_strict-method":214}],247:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', {isArray: require('./_is-array')});
},{"./_export":150,"./_is-array":165}],248:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"./_add-to-unscopables":123,"./_iter-define":171,"./_iter-step":173,"./_iterators":174,"./_to-iobject":225,"dup":105}],249:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator){
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});
},{"./_export":150,"./_iobject":163,"./_strict-method":214,"./_to-iobject":225}],250:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , toIObject     = require('./_to-iobject')
  , toInteger     = require('./_to-integer')
  , toLength      = require('./_to-length')
  , $native       = [].lastIndexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
    // convert -0 to +0
    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
    if(index < 0)index = length + index;
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
    return -1;
  }
});
},{"./_export":150,"./_strict-method":214,"./_to-integer":224,"./_to-iobject":225,"./_to-length":226}],251:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $map    = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */){
    return $map(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],252:[function(require,module,exports){
'use strict';
var $export        = require('./_export')
  , createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});
},{"./_create-property":142,"./_export":150,"./_fails":152}],253:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});
},{"./_array-reduce":131,"./_export":150,"./_strict-method":214}],254:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});
},{"./_array-reduce":131,"./_export":150,"./_strict-method":214}],255:[function(require,module,exports){
'use strict';
var $export    = require('./_export')
  , html       = require('./_html')
  , cof        = require('./_cof')
  , toIndex    = require('./_to-index')
  , toLength   = require('./_to-length')
  , arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
},{"./_cof":136,"./_export":150,"./_fails":152,"./_html":159,"./_to-index":223,"./_to-length":226}],256:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $some   = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */){
    return $some(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],257:[function(require,module,exports){
'use strict';
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , fails     = require('./_fails')
  , $sort     = [].sort
  , test      = [1, 2, 3];

$export($export.P + $export.F * (fails(function(){
  // IE8-
  test.sort(undefined);
}) || !fails(function(){
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn){
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});
},{"./_a-function":121,"./_export":150,"./_fails":152,"./_strict-method":214,"./_to-object":227}],258:[function(require,module,exports){
require('./_set-species')('Array');
},{"./_set-species":209}],259:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});
},{"./_export":150}],260:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export')
  , fails   = require('./_fails')
  , getTime = Date.prototype.getTime;

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./_export":150,"./_fails":152}],261:[function(require,module,exports){
'use strict';
var $export     = require('./_export')
  , toObject    = require('./_to-object')
  , toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function(){
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
}), 'Date', {
  toJSON: function toJSON(key){
    var O  = toObject(this)
      , pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});
},{"./_export":150,"./_fails":152,"./_to-object":227,"./_to-primitive":228}],262:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive')
  , proto        = Date.prototype;

if(!(TO_PRIMITIVE in proto))require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
},{"./_date-to-primitive":144,"./_hide":158,"./_wks":235}],263:[function(require,module,exports){
var DateProto    = Date.prototype
  , INVALID_DATE = 'Invalid Date'
  , TO_STRING    = 'toString'
  , $toString    = DateProto[TO_STRING]
  , getTime      = DateProto.getTime;
if(new Date(NaN) + '' != INVALID_DATE){
  require('./_redefine')(DateProto, TO_STRING, function toString(){
    var value = getTime.call(this);
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}
},{"./_redefine":205}],264:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', {bind: require('./_bind')});
},{"./_bind":134,"./_export":150}],265:[function(require,module,exports){
'use strict';
var isObject       = require('./_is-object')
  , getPrototypeOf = require('./_object-gpo')
  , HAS_INSTANCE   = require('./_wks')('hasInstance')
  , FunctionProto  = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
  return false;
}});
},{"./_is-object":167,"./_object-dp":185,"./_object-gpo":192,"./_wks":235}],266:[function(require,module,exports){
var dP         = require('./_object-dp').f
  , createDesc = require('./_property-desc')
  , has        = require('./_has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';

var isExtensible = Object.isExtensible || function(){
  return true;
};

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    try {
      var that = this
        , name = ('' + that).match(nameRE)[1];
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
      return name;
    } catch(e){
      return '';
    }
  }
});
},{"./_descriptors":146,"./_has":157,"./_object-dp":185,"./_property-desc":203}],267:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.1 Map Objects
module.exports = require('./_collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./_collection":140,"./_collection-strong":137}],268:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export')
  , log1p   = require('./_math-log1p')
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./_export":150,"./_math-log1p":178}],269:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export')
  , $asinh  = Math.asinh;

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0 
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});
},{"./_export":150}],270:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export')
  , $atanh  = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0 
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./_export":150}],271:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export')
  , sign    = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./_export":150,"./_math-sign":179}],272:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./_export":150}],273:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./_export":150}],274:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export')
  , $expm1  = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});
},{"./_export":150,"./_math-expm1":177}],275:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export   = require('./_export')
  , sign      = require('./_math-sign')
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./_export":150,"./_math-sign":179}],276:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export')
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./_export":150}],277:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export')
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./_export":150,"./_fails":152}],278:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./_export":150}],279:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', {log1p: require('./_math-log1p')});
},{"./_export":150,"./_math-log1p":178}],280:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./_export":150}],281:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', {sign: require('./_math-sign')});
},{"./_export":150,"./_math-sign":179}],282:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./_export":150,"./_fails":152,"./_math-expm1":177}],283:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./_export":150,"./_math-expm1":177}],284:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./_export":150}],285:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , has               = require('./_has')
  , cof               = require('./_cof')
  , inheritIfRequired = require('./_inherit-if-required')
  , toPrimitive       = require('./_to-primitive')
  , fails             = require('./_fails')
  , gOPN              = require('./_object-gopn').f
  , gOPD              = require('./_object-gopd').f
  , dP                = require('./_object-dp').f
  , $trim             = require('./_string-trim').trim
  , NUMBER            = 'Number'
  , $Number           = global[NUMBER]
  , Base              = $Number
  , proto             = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF        = cof(require('./_object-create')(proto)) == NUMBER
  , TRIM              = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for(var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++){
    if(has(Base, key = keys[j]) && !has($Number, key)){
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}
},{"./_cof":136,"./_descriptors":146,"./_fails":152,"./_global":156,"./_has":157,"./_inherit-if-required":161,"./_object-create":184,"./_object-dp":185,"./_object-gopd":188,"./_object-gopn":190,"./_redefine":205,"./_string-trim":220,"./_to-primitive":228}],286:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./_export":150}],287:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export   = require('./_export')
  , _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./_export":150,"./_global":156}],288:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', {isInteger: require('./_is-integer')});
},{"./_export":150,"./_is-integer":166}],289:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./_export":150}],290:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export   = require('./_export')
  , isInteger = require('./_is-integer')
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./_export":150,"./_is-integer":166}],291:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./_export":150}],292:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./_export":150}],293:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});
},{"./_export":150,"./_parse-float":199}],294:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});
},{"./_export":150,"./_parse-int":200}],295:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , toInteger    = require('./_to-integer')
  , aNumberValue = require('./_a-number-value')
  , repeat       = require('./_string-repeat')
  , $toFixed     = 1..toFixed
  , floor        = Math.floor
  , data         = [0, 0, 0, 0, 0, 0]
  , ERROR        = 'Number.toFixed: incorrect invocation!'
  , ZERO         = '0';

var multiply = function(n, c){
  var i  = -1
    , c2 = c;
  while(++i < 6){
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(n){
  var i = 6
    , c = 0;
  while(--i >= 0){
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function(){
  var i = 6
    , s = '';
  while(--i >= 0){
    if(s !== '' || i === 0 || data[i] !== 0){
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function(x, n, acc){
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x){
  var n  = 0
    , x2 = x;
  while(x2 >= 4096){
    n += 12;
    x2 /= 4096;
  }
  while(x2 >= 2){
    n  += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128..toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function(){
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits){
    var x = aNumberValue(this, ERROR)
      , f = toInteger(fractionDigits)
      , s = ''
      , m = ZERO
      , e, z, j, k;
    if(f < 0 || f > 20)throw RangeError(ERROR);
    if(x != x)return 'NaN';
    if(x <= -1e21 || x >= 1e21)return String(x);
    if(x < 0){
      s = '-';
      x = -x;
    }
    if(x > 1e-21){
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if(e > 0){
        multiply(0, z);
        j = f;
        while(j >= 7){
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while(j >= 23){
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if(f > 0){
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});
},{"./_a-number-value":122,"./_export":150,"./_fails":152,"./_string-repeat":219,"./_to-integer":224}],296:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $fails       = require('./_fails')
  , aNumberValue = require('./_a-number-value')
  , $toPrecision = 1..toPrecision;

$export($export.P + $export.F * ($fails(function(){
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function(){
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision){
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
  }
});
},{"./_a-number-value":122,"./_export":150,"./_fails":152}],297:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"./_export":150,"./_object-assign":183,"dup":106}],298:[function(require,module,exports){
arguments[4][107][0].apply(exports,arguments)
},{"./_export":150,"./_object-create":184,"dup":107}],299:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});
},{"./_descriptors":146,"./_export":150,"./_object-dps":186}],300:[function(require,module,exports){
arguments[4][108][0].apply(exports,arguments)
},{"./_descriptors":146,"./_export":150,"./_object-dp":185,"dup":108}],301:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});
},{"./_is-object":167,"./_meta":180,"./_object-sap":196}],302:[function(require,module,exports){
arguments[4][109][0].apply(exports,arguments)
},{"./_object-gopd":188,"./_object-sap":196,"./_to-iobject":225,"dup":109}],303:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function(){
  return require('./_object-gopn-ext').f;
});
},{"./_object-gopn-ext":189,"./_object-sap":196}],304:[function(require,module,exports){
arguments[4][110][0].apply(exports,arguments)
},{"./_object-gpo":192,"./_object-sap":196,"./_to-object":227,"dup":110}],305:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./_is-object":167,"./_object-sap":196}],306:[function(require,module,exports){
arguments[4][111][0].apply(exports,arguments)
},{"./_is-object":167,"./_object-sap":196,"dup":111}],307:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./_is-object":167,"./_object-sap":196}],308:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', {is: require('./_same-value')});
},{"./_export":150,"./_same-value":207}],309:[function(require,module,exports){
arguments[4][112][0].apply(exports,arguments)
},{"./_object-keys":194,"./_object-sap":196,"./_to-object":227,"dup":112}],310:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});
},{"./_is-object":167,"./_meta":180,"./_object-sap":196}],311:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});
},{"./_is-object":167,"./_meta":180,"./_object-sap":196}],312:[function(require,module,exports){
arguments[4][113][0].apply(exports,arguments)
},{"./_export":150,"./_set-proto":208,"dup":113}],313:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof')
  , test    = {};
test[require('./_wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./_redefine')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./_classof":135,"./_redefine":205,"./_wks":235}],314:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});
},{"./_export":150,"./_parse-float":199}],315:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});
},{"./_export":150,"./_parse-int":200}],316:[function(require,module,exports){
arguments[4][115][0].apply(exports,arguments)
},{"./_a-function":121,"./_an-instance":124,"./_classof":135,"./_core":141,"./_ctx":143,"./_export":150,"./_for-of":155,"./_global":156,"./_is-object":167,"./_iter-detect":172,"./_library":176,"./_microtask":182,"./_redefine-all":204,"./_set-species":209,"./_set-to-string-tag":210,"./_species-constructor":213,"./_task":222,"./_wks":235,"dup":115}],317:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , anObject  = require('./_an-object')
  , rApply    = (require('./_global').Reflect || {}).apply
  , fApply    = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function(){
  rApply(function(){});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    var T = aFunction(target)
      , L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});
},{"./_a-function":121,"./_an-object":125,"./_export":150,"./_fails":152,"./_global":156}],318:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export    = require('./_export')
  , create     = require('./_object-create')
  , aFunction  = require('./_a-function')
  , anObject   = require('./_an-object')
  , isObject   = require('./_is-object')
  , fails      = require('./_fails')
  , bind       = require('./_bind')
  , rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function(){
  function F(){}
  return !(rConstruct(function(){}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function(){
  rConstruct(function(){});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      switch(args.length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./_a-function":121,"./_an-object":125,"./_bind":134,"./_export":150,"./_fails":152,"./_global":156,"./_is-object":167,"./_object-create":184}],319:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = require('./_object-dp')
  , $export     = require('./_export')
  , anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":125,"./_export":150,"./_fails":152,"./_object-dp":185,"./_to-primitive":228}],320:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = require('./_export')
  , gOPD     = require('./_object-gopd').f
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./_an-object":125,"./_export":150,"./_object-gopd":188}],321:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export  = require('./_export')
  , anObject = require('./_an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./_an-object":125,"./_export":150,"./_iter-create":170}],322:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = require('./_object-gopd')
  , $export  = require('./_export')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});
},{"./_an-object":125,"./_export":150,"./_object-gopd":188}],323:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = require('./_export')
  , getProto = require('./_object-gpo')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./_an-object":125,"./_export":150,"./_object-gpo":192}],324:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , isObject       = require('./_is-object')
  , anObject       = require('./_an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});
},{"./_an-object":125,"./_export":150,"./_has":157,"./_is-object":167,"./_object-gopd":188,"./_object-gpo":192}],325:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./_export":150}],326:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export       = require('./_export')
  , anObject      = require('./_an-object')
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./_an-object":125,"./_export":150}],327:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});
},{"./_export":150,"./_own-keys":198}],328:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export            = require('./_export')
  , anObject           = require('./_an-object')
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":125,"./_export":150}],329:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = require('./_export')
  , setProto = require('./_set-proto');

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_export":150,"./_set-proto":208}],330:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = require('./_object-dp')
  , gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , createDesc     = require('./_property-desc')
  , anObject       = require('./_an-object')
  , isObject       = require('./_is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});
},{"./_an-object":125,"./_export":150,"./_has":157,"./_is-object":167,"./_object-dp":185,"./_object-gopd":188,"./_object-gpo":192,"./_property-desc":203}],331:[function(require,module,exports){
var global            = require('./_global')
  , inheritIfRequired = require('./_inherit-if-required')
  , dP                = require('./_object-dp').f
  , gOPN              = require('./_object-gopn').f
  , isRegExp          = require('./_is-regexp')
  , $flags            = require('./_flags')
  , $RegExp           = global.RegExp
  , Base              = $RegExp
  , proto             = $RegExp.prototype
  , re1               = /a/g
  , re2               = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW       = new $RegExp(re1) !== re1;

if(require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function(){
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var tiRE = this instanceof $RegExp
      , piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function(key){
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  };
  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');
},{"./_descriptors":146,"./_fails":152,"./_flags":154,"./_global":156,"./_inherit-if-required":161,"./_is-regexp":168,"./_object-dp":185,"./_object-gopn":190,"./_redefine":205,"./_set-species":209,"./_wks":235}],332:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});
},{"./_descriptors":146,"./_flags":154,"./_object-dp":185}],333:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});
},{"./_fix-re-wks":153}],334:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});
},{"./_fix-re-wks":153}],335:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});
},{"./_fix-re-wks":153}],336:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = require('./_is-regexp')
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});
},{"./_fix-re-wks":153,"./_is-regexp":168}],337:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject    = require('./_an-object')
  , $flags      = require('./_flags')
  , DESCRIPTORS = require('./_descriptors')
  , TO_STRING   = 'toString'
  , $toString   = /./[TO_STRING];

var define = function(fn){
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if(require('./_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
  define(function toString(){
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if($toString.name != TO_STRING){
  define(function toString(){
    return $toString.call(this);
  });
}
},{"./_an-object":125,"./_descriptors":146,"./_fails":152,"./_flags":154,"./_redefine":205,"./es6.regexp.flags":332}],338:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.2 Set Objects
module.exports = require('./_collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./_collection":140,"./_collection-strong":137}],339:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function(createHTML){
  return function anchor(name){
    return createHTML(this, 'a', 'name', name);
  }
});
},{"./_string-html":217}],340:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function(createHTML){
  return function big(){
    return createHTML(this, 'big', '', '');
  }
});
},{"./_string-html":217}],341:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function(createHTML){
  return function blink(){
    return createHTML(this, 'blink', '', '');
  }
});
},{"./_string-html":217}],342:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function(createHTML){
  return function bold(){
    return createHTML(this, 'b', '', '');
  }
});
},{"./_string-html":217}],343:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $at     = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./_export":150,"./_string-at":215}],344:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export   = require('./_export')
  , toLength  = require('./_to-length')
  , context   = require('./_string-context')
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});
},{"./_export":150,"./_fails-is-regexp":151,"./_string-context":216,"./_to-length":226}],345:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function(createHTML){
  return function fixed(){
    return createHTML(this, 'tt', '', '');
  }
});
},{"./_string-html":217}],346:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function(createHTML){
  return function fontcolor(color){
    return createHTML(this, 'font', 'color', color);
  }
});
},{"./_string-html":217}],347:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function(createHTML){
  return function fontsize(size){
    return createHTML(this, 'font', 'size', size);
  }
});
},{"./_string-html":217}],348:[function(require,module,exports){
var $export        = require('./_export')
  , toIndex        = require('./_to-index')
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./_export":150,"./_to-index":223}],349:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export  = require('./_export')
  , context  = require('./_string-context')
  , INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});
},{"./_export":150,"./_fails-is-regexp":151,"./_string-context":216}],350:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function(createHTML){
  return function italics(){
    return createHTML(this, 'i', '', '');
  }
});
},{"./_string-html":217}],351:[function(require,module,exports){
arguments[4][116][0].apply(exports,arguments)
},{"./_iter-define":171,"./_string-at":215,"dup":116}],352:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function(createHTML){
  return function link(url){
    return createHTML(this, 'a', 'href', url);
  }
});
},{"./_string-html":217}],353:[function(require,module,exports){
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});
},{"./_export":150,"./_to-iobject":225,"./_to-length":226}],354:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});
},{"./_export":150,"./_string-repeat":219}],355:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function(createHTML){
  return function small(){
    return createHTML(this, 'small', '', '');
  }
});
},{"./_string-html":217}],356:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export     = require('./_export')
  , toLength    = require('./_to-length')
  , context     = require('./_string-context')
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});
},{"./_export":150,"./_fails-is-regexp":151,"./_string-context":216,"./_to-length":226}],357:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function(createHTML){
  return function strike(){
    return createHTML(this, 'strike', '', '');
  }
});
},{"./_string-html":217}],358:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function(createHTML){
  return function sub(){
    return createHTML(this, 'sub', '', '');
  }
});
},{"./_string-html":217}],359:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function(createHTML){
  return function sup(){
    return createHTML(this, 'sup', '', '');
  }
});
},{"./_string-html":217}],360:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./_string-trim":220}],361:[function(require,module,exports){
arguments[4][117][0].apply(exports,arguments)
},{"./_an-object":125,"./_descriptors":146,"./_enum-keys":149,"./_export":150,"./_fails":152,"./_global":156,"./_has":157,"./_hide":158,"./_is-array":165,"./_keyof":175,"./_library":176,"./_meta":180,"./_object-create":184,"./_object-dp":185,"./_object-gopd":188,"./_object-gopn":190,"./_object-gopn-ext":189,"./_object-gops":191,"./_object-keys":194,"./_object-pie":195,"./_property-desc":203,"./_redefine":205,"./_set-to-string-tag":210,"./_shared":212,"./_to-iobject":225,"./_to-primitive":228,"./_uid":232,"./_wks":235,"./_wks-define":233,"./_wks-ext":234,"dup":117}],362:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $typed       = require('./_typed')
  , buffer       = require('./_typed-buffer')
  , anObject     = require('./_an-object')
  , toIndex      = require('./_to-index')
  , toLength     = require('./_to-length')
  , isObject     = require('./_is-object')
  , ArrayBuffer  = require('./_global').ArrayBuffer
  , speciesConstructor = require('./_species-constructor')
  , $ArrayBuffer = buffer.ArrayBuffer
  , $DataView    = buffer.DataView
  , $isView      = $typed.ABV && ArrayBuffer.isView
  , $slice       = $ArrayBuffer.prototype.slice
  , VIEW         = $typed.VIEW
  , ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it){
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function(){
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end){
    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
    var len    = anObject(this).byteLength
      , first  = toIndex(start, len)
      , final  = toIndex(end === undefined ? len : end, len)
      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
      , viewS  = new $DataView(this)
      , viewT  = new $DataView(result)
      , index  = 0;
    while(first < final){
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);
},{"./_an-object":125,"./_export":150,"./_fails":152,"./_global":156,"./_is-object":167,"./_set-species":209,"./_species-constructor":213,"./_to-index":223,"./_to-length":226,"./_typed":231,"./_typed-buffer":230}],363:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});
},{"./_export":150,"./_typed":231,"./_typed-buffer":230}],364:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],365:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],366:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],367:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],368:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],369:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],370:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],371:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],372:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);
},{"./_typed-array":229}],373:[function(require,module,exports){
'use strict';
var each         = require('./_array-methods')(0)
  , redefine     = require('./_redefine')
  , meta         = require('./_meta')
  , assign       = require('./_object-assign')
  , weak         = require('./_collection-weak')
  , isObject     = require('./_is-object')
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./_array-methods":130,"./_collection":140,"./_collection-weak":139,"./_is-object":167,"./_meta":180,"./_object-assign":183,"./_redefine":205}],374:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');

// 23.4 WeakSet Objects
require('./_collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./_collection":140,"./_collection-weak":139}],375:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export   = require('./_export')
  , $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');
},{"./_add-to-unscopables":123,"./_array-includes":129,"./_export":150}],376:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export   = require('./_export')
  , microtask = require('./_microtask')()
  , process   = require('./_global').process
  , isNode    = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn){
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});
},{"./_cof":136,"./_export":150,"./_global":156,"./_microtask":182}],377:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export')
  , cof     = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it){
    return cof(it) === 'Error';
  }
});
},{"./_cof":136,"./_export":150}],378:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});
},{"./_collection-to-json":138,"./_export":150}],379:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});
},{"./_export":150}],380:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >> 16
      , v1 = $v >> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});
},{"./_export":150}],381:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});
},{"./_export":150}],382:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >>> 16
      , v1 = $v >>> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});
},{"./_export":150}],383:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter){
    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":121,"./_descriptors":146,"./_export":150,"./_object-dp":185,"./_object-forced-pam":187,"./_to-object":227}],384:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter){
    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":121,"./_descriptors":146,"./_export":150,"./_object-dp":185,"./_object-forced-pam":187,"./_to-object":227}],385:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export  = require('./_export')
  , $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./_export":150,"./_object-to-array":197}],386:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export        = require('./_export')
  , ownKeys        = require('./_own-keys')
  , toIObject      = require('./_to-iobject')
  , gOPD           = require('./_object-gopd')
  , createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key;
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
    return result;
  }
});
},{"./_create-property":142,"./_export":150,"./_object-gopd":188,"./_own-keys":198,"./_to-iobject":225}],387:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.get;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":146,"./_export":150,"./_object-forced-pam":187,"./_object-gopd":188,"./_object-gpo":192,"./_to-object":227,"./_to-primitive":228}],388:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.set;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":146,"./_export":150,"./_object-forced-pam":187,"./_object-gopd":188,"./_object-gpo":192,"./_to-object":227,"./_to-primitive":228}],389:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export')
  , $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./_export":150,"./_object-to-array":197}],390:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export     = require('./_export')
  , global      = require('./_global')
  , core        = require('./_core')
  , microtask   = require('./_microtask')()
  , OBSERVABLE  = require('./_wks')('observable')
  , aFunction   = require('./_a-function')
  , anObject    = require('./_an-object')
  , anInstance  = require('./_an-instance')
  , redefineAll = require('./_redefine-all')
  , hide        = require('./_hide')
  , forOf       = require('./_for-of')
  , RETURN      = forOf.RETURN;

var getMethod = function(fn){
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function(subscription){
  var cleanup = subscription._c;
  if(cleanup){
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function(subscription){
  return subscription._o === undefined;
};

var closeSubscription = function(subscription){
  if(!subscriptionClosed(subscription)){
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function(observer, subscriber){
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup      = subscriber(observer)
      , subscription = cleanup;
    if(cleanup != null){
      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch(e){
    observer.error(e);
    return;
  } if(subscriptionClosed(this))cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe(){ closeSubscription(this); }
});

var SubscriptionObserver = function(subscription){
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if(m)return m.call(observer, value);
      } catch(e){
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value){
    var subscription = this._s;
    if(subscriptionClosed(subscription))throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if(!m)throw value;
      value = m.call(observer, value);
    } catch(e){
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch(e){
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber){
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer){
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn){
    var that = this;
    return new (core.Promise || global.Promise)(function(resolve, reject){
      aFunction(fn);
      var subscription = that.subscribe({
        next : function(value){
          try {
            return fn(value);
          } catch(e){
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x){
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if(method){
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function(observer){
        return observable.subscribe(observer);
      });
    }
    return new C(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          try {
            if(forOf(x, false, function(it){
              observer.next(it);
              if(done)return RETURN;
            }) === RETURN)return;
          } catch(e){
            if(done)throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  },
  of: function of(){
    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          for(var i = 0; i < items.length; ++i){
            observer.next(items[i]);
            if(done)return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function(){ return this; });

$export($export.G, {Observable: $Observable});

require('./_set-species')('Observable');
},{"./_a-function":121,"./_an-instance":124,"./_an-object":125,"./_core":141,"./_export":150,"./_for-of":155,"./_global":156,"./_hide":158,"./_microtask":182,"./_redefine-all":204,"./_set-species":209,"./_wks":235}],391:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
}});
},{"./_an-object":125,"./_metadata":181}],392:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , toMetaKey              = metadata.key
  , getOrCreateMetadataMap = metadata.map
  , store                  = metadata.store;

metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
  if(metadataMap.size)return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
}});
},{"./_an-object":125,"./_metadata":181}],393:[function(require,module,exports){
var Set                     = require('./es6.set')
  , from                    = require('./_array-from-iterable')
  , metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , getPrototypeOf          = require('./_object-gpo')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

var ordinaryMetadataKeys = function(O, P){
  var oKeys  = ordinaryOwnMetadataKeys(O, P)
    , parent = getPrototypeOf(O);
  if(parent === null)return oKeys;
  var pKeys  = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":125,"./_array-from-iterable":128,"./_metadata":181,"./_object-gpo":192,"./es6.set":338}],394:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

var ordinaryGetMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181,"./_object-gpo":192}],395:[function(require,module,exports){
var metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":125,"./_metadata":181}],396:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181}],397:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

var ordinaryHasMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181,"./_object-gpo":192}],398:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181}],399:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , aFunction                 = require('./_a-function')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({metadata: function metadata(metadataKey, metadataValue){
  return function decorator(target, targetKey){
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
}});
},{"./_a-function":121,"./_an-object":125,"./_metadata":181}],400:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});
},{"./_collection-to-json":138,"./_export":150}],401:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export')
  , $at     = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./_export":150,"./_string-at":215}],402:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export     = require('./_export')
  , defined     = require('./_defined')
  , toLength    = require('./_to-length')
  , isRegExp    = require('./_is-regexp')
  , getFlags    = require('./_flags')
  , RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function(regexp, string){
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){
  var match = this._r.exec(this._s);
  return {value: match, done: match === null};
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp){
    defined(this);
    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
    var S     = String(this)
      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});
},{"./_defined":145,"./_export":150,"./_flags":154,"./_is-regexp":168,"./_iter-create":170,"./_to-length":226}],403:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});
},{"./_export":150,"./_string-pad":218}],404:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});
},{"./_export":150,"./_string-pad":218}],405:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
}, 'trimStart');
},{"./_string-trim":220}],406:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
}, 'trimEnd');
},{"./_string-trim":220}],407:[function(require,module,exports){
arguments[4][118][0].apply(exports,arguments)
},{"./_wks-define":233,"dup":118}],408:[function(require,module,exports){
arguments[4][119][0].apply(exports,arguments)
},{"./_wks-define":233,"dup":119}],409:[function(require,module,exports){
// https://github.com/ljharb/proposal-global
var $export = require('./_export');

$export($export.S, 'System', {global: require('./_global')});
},{"./_export":150,"./_global":156}],410:[function(require,module,exports){
var $iterators    = require('./es6.array.iterator')
  , redefine      = require('./_redefine')
  , global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , wks           = require('./_wks')
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}
},{"./_global":156,"./_hide":158,"./_iterators":174,"./_redefine":205,"./_wks":235,"./es6.array.iterator":248}],411:[function(require,module,exports){
var $export = require('./_export')
  , $task   = require('./_task');
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./_export":150,"./_task":222}],412:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./_global')
  , $export    = require('./_export')
  , invoke     = require('./_invoke')
  , partial    = require('./_partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./_export":150,"./_global":156,"./_invoke":162,"./_partial":201}],413:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.umulh');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');
},{"./modules/_core":141,"./modules/es6.array.copy-within":238,"./modules/es6.array.every":239,"./modules/es6.array.fill":240,"./modules/es6.array.filter":241,"./modules/es6.array.find":243,"./modules/es6.array.find-index":242,"./modules/es6.array.for-each":244,"./modules/es6.array.from":245,"./modules/es6.array.index-of":246,"./modules/es6.array.is-array":247,"./modules/es6.array.iterator":248,"./modules/es6.array.join":249,"./modules/es6.array.last-index-of":250,"./modules/es6.array.map":251,"./modules/es6.array.of":252,"./modules/es6.array.reduce":254,"./modules/es6.array.reduce-right":253,"./modules/es6.array.slice":255,"./modules/es6.array.some":256,"./modules/es6.array.sort":257,"./modules/es6.array.species":258,"./modules/es6.date.now":259,"./modules/es6.date.to-iso-string":260,"./modules/es6.date.to-json":261,"./modules/es6.date.to-primitive":262,"./modules/es6.date.to-string":263,"./modules/es6.function.bind":264,"./modules/es6.function.has-instance":265,"./modules/es6.function.name":266,"./modules/es6.map":267,"./modules/es6.math.acosh":268,"./modules/es6.math.asinh":269,"./modules/es6.math.atanh":270,"./modules/es6.math.cbrt":271,"./modules/es6.math.clz32":272,"./modules/es6.math.cosh":273,"./modules/es6.math.expm1":274,"./modules/es6.math.fround":275,"./modules/es6.math.hypot":276,"./modules/es6.math.imul":277,"./modules/es6.math.log10":278,"./modules/es6.math.log1p":279,"./modules/es6.math.log2":280,"./modules/es6.math.sign":281,"./modules/es6.math.sinh":282,"./modules/es6.math.tanh":283,"./modules/es6.math.trunc":284,"./modules/es6.number.constructor":285,"./modules/es6.number.epsilon":286,"./modules/es6.number.is-finite":287,"./modules/es6.number.is-integer":288,"./modules/es6.number.is-nan":289,"./modules/es6.number.is-safe-integer":290,"./modules/es6.number.max-safe-integer":291,"./modules/es6.number.min-safe-integer":292,"./modules/es6.number.parse-float":293,"./modules/es6.number.parse-int":294,"./modules/es6.number.to-fixed":295,"./modules/es6.number.to-precision":296,"./modules/es6.object.assign":297,"./modules/es6.object.create":298,"./modules/es6.object.define-properties":299,"./modules/es6.object.define-property":300,"./modules/es6.object.freeze":301,"./modules/es6.object.get-own-property-descriptor":302,"./modules/es6.object.get-own-property-names":303,"./modules/es6.object.get-prototype-of":304,"./modules/es6.object.is":308,"./modules/es6.object.is-extensible":305,"./modules/es6.object.is-frozen":306,"./modules/es6.object.is-sealed":307,"./modules/es6.object.keys":309,"./modules/es6.object.prevent-extensions":310,"./modules/es6.object.seal":311,"./modules/es6.object.set-prototype-of":312,"./modules/es6.object.to-string":313,"./modules/es6.parse-float":314,"./modules/es6.parse-int":315,"./modules/es6.promise":316,"./modules/es6.reflect.apply":317,"./modules/es6.reflect.construct":318,"./modules/es6.reflect.define-property":319,"./modules/es6.reflect.delete-property":320,"./modules/es6.reflect.enumerate":321,"./modules/es6.reflect.get":324,"./modules/es6.reflect.get-own-property-descriptor":322,"./modules/es6.reflect.get-prototype-of":323,"./modules/es6.reflect.has":325,"./modules/es6.reflect.is-extensible":326,"./modules/es6.reflect.own-keys":327,"./modules/es6.reflect.prevent-extensions":328,"./modules/es6.reflect.set":330,"./modules/es6.reflect.set-prototype-of":329,"./modules/es6.regexp.constructor":331,"./modules/es6.regexp.flags":332,"./modules/es6.regexp.match":333,"./modules/es6.regexp.replace":334,"./modules/es6.regexp.search":335,"./modules/es6.regexp.split":336,"./modules/es6.regexp.to-string":337,"./modules/es6.set":338,"./modules/es6.string.anchor":339,"./modules/es6.string.big":340,"./modules/es6.string.blink":341,"./modules/es6.string.bold":342,"./modules/es6.string.code-point-at":343,"./modules/es6.string.ends-with":344,"./modules/es6.string.fixed":345,"./modules/es6.string.fontcolor":346,"./modules/es6.string.fontsize":347,"./modules/es6.string.from-code-point":348,"./modules/es6.string.includes":349,"./modules/es6.string.italics":350,"./modules/es6.string.iterator":351,"./modules/es6.string.link":352,"./modules/es6.string.raw":353,"./modules/es6.string.repeat":354,"./modules/es6.string.small":355,"./modules/es6.string.starts-with":356,"./modules/es6.string.strike":357,"./modules/es6.string.sub":358,"./modules/es6.string.sup":359,"./modules/es6.string.trim":360,"./modules/es6.symbol":361,"./modules/es6.typed.array-buffer":362,"./modules/es6.typed.data-view":363,"./modules/es6.typed.float32-array":364,"./modules/es6.typed.float64-array":365,"./modules/es6.typed.int16-array":366,"./modules/es6.typed.int32-array":367,"./modules/es6.typed.int8-array":368,"./modules/es6.typed.uint16-array":369,"./modules/es6.typed.uint32-array":370,"./modules/es6.typed.uint8-array":371,"./modules/es6.typed.uint8-clamped-array":372,"./modules/es6.weak-map":373,"./modules/es6.weak-set":374,"./modules/es7.array.includes":375,"./modules/es7.asap":376,"./modules/es7.error.is-error":377,"./modules/es7.map.to-json":378,"./modules/es7.math.iaddh":379,"./modules/es7.math.imulh":380,"./modules/es7.math.isubh":381,"./modules/es7.math.umulh":382,"./modules/es7.object.define-getter":383,"./modules/es7.object.define-setter":384,"./modules/es7.object.entries":385,"./modules/es7.object.get-own-property-descriptors":386,"./modules/es7.object.lookup-getter":387,"./modules/es7.object.lookup-setter":388,"./modules/es7.object.values":389,"./modules/es7.observable":390,"./modules/es7.reflect.define-metadata":391,"./modules/es7.reflect.delete-metadata":392,"./modules/es7.reflect.get-metadata":394,"./modules/es7.reflect.get-metadata-keys":393,"./modules/es7.reflect.get-own-metadata":396,"./modules/es7.reflect.get-own-metadata-keys":395,"./modules/es7.reflect.has-metadata":397,"./modules/es7.reflect.has-own-metadata":398,"./modules/es7.reflect.metadata":399,"./modules/es7.set.to-json":400,"./modules/es7.string.at":401,"./modules/es7.string.match-all":402,"./modules/es7.string.pad-end":403,"./modules/es7.string.pad-start":404,"./modules/es7.string.trim-left":405,"./modules/es7.string.trim-right":406,"./modules/es7.symbol.async-iterator":407,"./modules/es7.symbol.observable":408,"./modules/es7.system.global":409,"./modules/web.dom.iterable":410,"./modules/web.immediate":411,"./modules/web.timers":412}],414:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],415:[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `value instanceof AwaitArgument` to determine if the yielded value is
  // meant to be awaited. Some may consider the name of this method too
  // cutesy, but they are curmudgeons.
  runtime.awrap = function(arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value instanceof AwaitArgument) {
          return Promise.resolve(value.arg).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = arg;

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":414}],416:[function(require,module,exports){
(function (global){
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for MessageFactory.js 
// version: 0.4.0
// Last build: Fri Nov 04 2016 13:15:12 GMT+0000 (WET)

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.MessageFactory=e()}}(function(){var e;return function t(e,r,n){function o(a,s){if(!r[a]){if(!e[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=r[a]={exports:{}};e[a][0].call(l.exports,function(t){var r=e[a][1][t];return o(r?r:t)},l,l.exports,t,e,r,n)}return r[a].exports}for(var i="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,r){t.exports={"default":e("core-js/library/fn/json/stringify"),__esModule:!0}},{"core-js/library/fn/json/stringify":16}],2:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/create"),__esModule:!0}},{"core-js/library/fn/object/create":17}],3:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/define-property"),__esModule:!0}},{"core-js/library/fn/object/define-property":18}],4:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/freeze"),__esModule:!0}},{"core-js/library/fn/object/freeze":19}],5:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/get-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/get-prototype-of":20}],6:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/keys"),__esModule:!0}},{"core-js/library/fn/object/keys":21}],7:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/set-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/set-prototype-of":22}],8:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol"),__esModule:!0}},{"core-js/library/fn/symbol":23}],9:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol/iterator"),__esModule:!0}},{"core-js/library/fn/symbol/iterator":24}],10:[function(e,t,r){"use strict";r.__esModule=!0,r["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},{}],11:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/define-property"),i=n(o);r["default"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i["default"])(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},{"../core-js/object/define-property":3}],12:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/set-prototype-of"),i=n(o),a=e("../core-js/object/create"),s=n(a),u=e("../helpers/typeof"),c=n(u);r["default"]=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":(0,c["default"])(t)));e.prototype=(0,s["default"])(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(i["default"]?(0,i["default"])(e,t):e.__proto__=t)}},{"../core-js/object/create":2,"../core-js/object/set-prototype-of":7,"../helpers/typeof":14}],13:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../helpers/typeof"),i=n(o);r["default"]=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":(0,i["default"])(t))&&"function"!=typeof t?e:t}},{"../helpers/typeof":14}],14:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/symbol/iterator"),i=n(o),a=e("../core-js/symbol"),s=n(a),u="function"==typeof s["default"]&&"symbol"==typeof i["default"]?function(e){return typeof e}:function(e){return e&&"function"==typeof s["default"]&&e.constructor===s["default"]&&e!==s["default"].prototype?"symbol":typeof e};r["default"]="function"==typeof s["default"]&&"symbol"===u(i["default"])?function(e){return"undefined"==typeof e?"undefined":u(e)}:function(e){return e&&"function"==typeof s["default"]&&e.constructor===s["default"]&&e!==s["default"].prototype?"symbol":"undefined"==typeof e?"undefined":u(e)}},{"../core-js/symbol":8,"../core-js/symbol/iterator":9}],15:[function(e,t,r){t.exports=e("regenerator-runtime")},{"regenerator-runtime":97}],16:[function(e,t,r){var n=e("../../modules/_core"),o=n.JSON||(n.JSON={stringify:JSON.stringify});t.exports=function(e){return o.stringify.apply(o,arguments)}},{"../../modules/_core":30}],17:[function(e,t,r){e("../../modules/es6.object.create");var n=e("../../modules/_core").Object;t.exports=function(e,t){return n.create(e,t)}},{"../../modules/_core":30,"../../modules/es6.object.create":84}],18:[function(e,t,r){e("../../modules/es6.object.define-property");var n=e("../../modules/_core").Object;t.exports=function(e,t,r){return n.defineProperty(e,t,r)}},{"../../modules/_core":30,"../../modules/es6.object.define-property":85}],19:[function(e,t,r){e("../../modules/es6.object.freeze"),t.exports=e("../../modules/_core").Object.freeze},{"../../modules/_core":30,"../../modules/es6.object.freeze":86}],20:[function(e,t,r){e("../../modules/es6.object.get-prototype-of"),t.exports=e("../../modules/_core").Object.getPrototypeOf},{"../../modules/_core":30,"../../modules/es6.object.get-prototype-of":87}],21:[function(e,t,r){e("../../modules/es6.object.keys"),t.exports=e("../../modules/_core").Object.keys},{"../../modules/_core":30,"../../modules/es6.object.keys":88}],22:[function(e,t,r){e("../../modules/es6.object.set-prototype-of"),t.exports=e("../../modules/_core").Object.setPrototypeOf},{"../../modules/_core":30,"../../modules/es6.object.set-prototype-of":89}],23:[function(e,t,r){e("../../modules/es6.symbol"),e("../../modules/es6.object.to-string"),e("../../modules/es7.symbol.async-iterator"),e("../../modules/es7.symbol.observable"),t.exports=e("../../modules/_core").Symbol},{"../../modules/_core":30,"../../modules/es6.object.to-string":90,"../../modules/es6.symbol":92,"../../modules/es7.symbol.async-iterator":93,"../../modules/es7.symbol.observable":94}],24:[function(e,t,r){e("../../modules/es6.string.iterator"),e("../../modules/web.dom.iterable"),t.exports=e("../../modules/_wks-ext").f("iterator")},{"../../modules/_wks-ext":81,"../../modules/es6.string.iterator":91,"../../modules/web.dom.iterable":95}],25:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],26:[function(e,t,r){t.exports=function(){}},{}],27:[function(e,t,r){var n=e("./_is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":46}],28:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_to-length"),i=e("./_to-index");t.exports=function(e){return function(t,r,a){var s,u=n(t),c=o(u.length),l=i(a,c);if(e&&r!=r){for(;c>l;)if(s=u[l++],s!=s)return!0}else for(;c>l;l++)if((e||l in u)&&u[l]===r)return e||l||0;return!e&&-1}}},{"./_to-index":73,"./_to-iobject":75,"./_to-length":76}],29:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],30:[function(e,t,r){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},{}],31:[function(e,t,r){var n=e("./_a-function");t.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},{"./_a-function":25}],32:[function(e,t,r){t.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},{}],33:[function(e,t,r){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":38}],34:[function(e,t,r){var n=e("./_is-object"),o=e("./_global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./_global":39,"./_is-object":46}],35:[function(e,t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],36:[function(e,t,r){var n=e("./_object-keys"),o=e("./_object-gops"),i=e("./_object-pie");t.exports=function(e){var t=n(e),r=o.f;if(r)for(var a,s=r(e),u=i.f,c=0;s.length>c;)u.call(e,a=s[c++])&&t.push(a);return t}},{"./_object-gops":60,"./_object-keys":63,"./_object-pie":64}],37:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_ctx"),a=e("./_hide"),s="prototype",u=function(e,t,r){var c,l,f,d=e&u.F,p=e&u.G,h=e&u.S,y=e&u.P,m=e&u.B,v=e&u.W,_=p?o:o[t]||(o[t]={}),b=_[s],g=p?n:h?n[t]:(n[t]||{})[s];p&&(r=t);for(c in r)l=!d&&g&&void 0!==g[c],l&&c in _||(f=l?g[c]:r[c],_[c]=p&&"function"!=typeof g[c]?r[c]:m&&l?i(f,n):v&&g[c]==f?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t[s]=e[s],t}(f):y&&"function"==typeof f?i(Function.call,f):f,y&&((_.virtual||(_.virtual={}))[c]=f,e&u.R&&b&&!b[c]&&a(b,c,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},{"./_core":30,"./_ctx":31,"./_global":39,"./_hide":41}],38:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],39:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],40:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],41:[function(e,t,r){var n=e("./_object-dp"),o=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./_descriptors":33,"./_object-dp":55,"./_property-desc":66}],42:[function(e,t,r){t.exports=e("./_global").document&&document.documentElement},{"./_global":39}],43:[function(e,t,r){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":33,"./_dom-create":34,"./_fails":38}],44:[function(e,t,r){var n=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./_cof":29}],45:[function(e,t,r){var n=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==n(e)}},{"./_cof":29}],46:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],47:[function(e,t,r){"use strict";var n=e("./_object-create"),o=e("./_property-desc"),i=e("./_set-to-string-tag"),a={};e("./_hide")(a,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),i(e,t+" Iterator")}},{"./_hide":41,"./_object-create":54,"./_property-desc":66,"./_set-to-string-tag":69,"./_wks":82}],48:[function(e,t,r){"use strict";var n=e("./_library"),o=e("./_export"),i=e("./_redefine"),a=e("./_hide"),s=e("./_has"),u=e("./_iterators"),c=e("./_iter-create"),l=e("./_set-to-string-tag"),f=e("./_object-gpo"),d=e("./_wks")("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",y="keys",m="values",v=function(){return this};t.exports=function(e,t,r,_,b,g,E){c(r,t,_);var j,w,O,M=function(e){if(!p&&e in R)return R[e];switch(e){case y:return function(){return new r(this,e)};case m:return function(){return new r(this,e)}}return function(){return new r(this,e)}},x=t+" Iterator",P=b==m,k=!1,R=e.prototype,S=R[d]||R[h]||b&&R[b],T=S||M(b),A=b?P?M("entries"):T:void 0,N="Array"==t?R.entries||S:S;if(N&&(O=f(N.call(new e)),O!==Object.prototype&&(l(O,x,!0),n||s(O,d)||a(O,d,v))),P&&S&&S.name!==m&&(k=!0,T=function(){return S.call(this)}),n&&!E||!p&&!k&&R[d]||a(R,d,T),u[t]=T,u[x]=v,b)if(j={values:P?T:M(m),keys:g?T:M(y),entries:A},E)for(w in j)w in R||i(R,w,j[w]);else o(o.P+o.F*(p||k),t,j);return j}},{"./_export":37,"./_has":40,"./_hide":41,"./_iter-create":47,"./_iterators":50,"./_library":52,"./_object-gpo":61,"./_redefine":67,"./_set-to-string-tag":69,"./_wks":82}],49:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],50:[function(e,t,r){t.exports={}},{}],51:[function(e,t,r){var n=e("./_object-keys"),o=e("./_to-iobject");t.exports=function(e,t){for(var r,i=o(e),a=n(i),s=a.length,u=0;s>u;)if(i[r=a[u++]]===t)return r}},{"./_object-keys":63,"./_to-iobject":75}],52:[function(e,t,r){t.exports=!0},{}],53:[function(e,t,r){var n=e("./_uid")("meta"),o=e("./_is-object"),i=e("./_has"),a=e("./_object-dp").f,s=0,u=Object.isExtensible||function(){return!0},c=!e("./_fails")(function(){return u(Object.preventExtensions({}))}),l=function(e){a(e,n,{value:{i:"O"+ ++s,w:{}}})},f=function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,n)){if(!u(e))return"F";if(!t)return"E";l(e)}return e[n].i},d=function(e,t){if(!i(e,n)){if(!u(e))return!0;if(!t)return!1;l(e)}return e[n].w},p=function(e){return c&&h.NEED&&u(e)&&!i(e,n)&&l(e),e},h=t.exports={KEY:n,NEED:!1,fastKey:f,getWeak:d,onFreeze:p}},{"./_fails":38,"./_has":40,"./_is-object":46,"./_object-dp":55,"./_uid":79}],54:[function(e,t,r){var n=e("./_an-object"),o=e("./_object-dps"),i=e("./_enum-bug-keys"),a=e("./_shared-key")("IE_PROTO"),s=function(){},u="prototype",c=function(){var t,r=e("./_dom-create")("iframe"),n=i.length,o="<",a=">";for(r.style.display="none",e("./_html").appendChild(r),r.src="javascript:",t=r.contentWindow.document,t.open(),t.write(o+"script"+a+"document.F=Object"+o+"/script"+a),t.close(),c=t.F;n--;)delete c[u][i[n]];return c()};t.exports=Object.create||function(e,t){var r;return null!==e?(s[u]=n(e),r=new s,s[u]=null,r[a]=e):r=c(),void 0===t?r:o(r,t)}},{"./_an-object":27,"./_dom-create":34,"./_enum-bug-keys":35,"./_html":42,"./_object-dps":56,"./_shared-key":70}],55:[function(e,t,r){var n=e("./_an-object"),o=e("./_ie8-dom-define"),i=e("./_to-primitive"),a=Object.defineProperty;r.f=e("./_descriptors")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return a(e,t,r)}catch(s){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},{"./_an-object":27,"./_descriptors":33,"./_ie8-dom-define":43,"./_to-primitive":78}],56:[function(e,t,r){var n=e("./_object-dp"),o=e("./_an-object"),i=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){o(e);for(var r,a=i(t),s=a.length,u=0;s>u;)n.f(e,r=a[u++],t[r]);return e}},{"./_an-object":27,"./_descriptors":33,"./_object-dp":55,"./_object-keys":63}],57:[function(e,t,r){var n=e("./_object-pie"),o=e("./_property-desc"),i=e("./_to-iobject"),a=e("./_to-primitive"),s=e("./_has"),u=e("./_ie8-dom-define"),c=Object.getOwnPropertyDescriptor;r.f=e("./_descriptors")?c:function(e,t){if(e=i(e),t=a(t,!0),u)try{return c(e,t)}catch(r){}if(s(e,t))return o(!n.f.call(e,t),e[t])}},{"./_descriptors":33,"./_has":40,"./_ie8-dom-define":43,"./_object-pie":64,"./_property-desc":66,"./_to-iobject":75,"./_to-primitive":78}],58:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_object-gopn").f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(e){try{return o(e)}catch(t){return a.slice()}};t.exports.f=function(e){return a&&"[object Window]"==i.call(e)?s(e):o(n(e))}},{"./_object-gopn":59,"./_to-iobject":75}],59:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys").concat("length","prototype");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},{"./_enum-bug-keys":35,"./_object-keys-internal":62}],60:[function(e,t,r){r.f=Object.getOwnPropertySymbols},{}],61:[function(e,t,r){var n=e("./_has"),o=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},{"./_has":40,"./_shared-key":70,"./_to-object":77}],62:[function(e,t,r){var n=e("./_has"),o=e("./_to-iobject"),i=e("./_array-includes")(!1),a=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var r,s=o(e),u=0,c=[];for(r in s)r!=a&&n(s,r)&&c.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~i(c,r)||c.push(r));return c}},{"./_array-includes":28,"./_has":40,"./_shared-key":70,"./_to-iobject":75}],63:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return n(e,o)}},{"./_enum-bug-keys":35,"./_object-keys-internal":62}],64:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],65:[function(e,t,r){var n=e("./_export"),o=e("./_core"),i=e("./_fails");t.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],a={};a[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",a)}},{"./_core":30,"./_export":37,"./_fails":38}],66:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],67:[function(e,t,r){t.exports=e("./_hide")},{"./_hide":41}],68:[function(e,t,r){var n=e("./_is-object"),o=e("./_an-object"),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,n){try{n=e("./_ctx")(Function.call,e("./_object-gopd").f(Object.prototype,"__proto__").set,2),n(t,[]),r=!(t instanceof Array)}catch(o){r=!0}return function(e,t){return i(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:i}},{"./_an-object":27,"./_ctx":31,"./_is-object":46,"./_object-gopd":57}],69:[function(e,t,r){var n=e("./_object-dp").f,o=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./_has":40,"./_object-dp":55,"./_wks":82}],70:[function(e,t,r){var n=e("./_shared")("keys"),o=e("./_uid");t.exports=function(e){return n[e]||(n[e]=o(e))}},{"./_shared":71,"./_uid":79}],71:[function(e,t,r){var n=e("./_global"),o="__core-js_shared__",i=n[o]||(n[o]={});t.exports=function(e){return i[e]||(i[e]={})}},{"./_global":39}],72:[function(e,t,r){var n=e("./_to-integer"),o=e("./_defined");t.exports=function(e){return function(t,r){var i,a,s=String(o(t)),u=n(r),c=s.length;return u<0||u>=c?e?"":void 0:(i=s.charCodeAt(u),i<55296||i>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):i:e?s.slice(u,u+2):(i-55296<<10)+(a-56320)+65536)}}},{"./_defined":32,"./_to-integer":74}],73:[function(e,t,r){var n=e("./_to-integer"),o=Math.max,i=Math.min;t.exports=function(e,t){return e=n(e),e<0?o(e+t,0):i(e,t)}},{"./_to-integer":74}],74:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},{}],75:[function(e,t,r){var n=e("./_iobject"),o=e("./_defined");t.exports=function(e){return n(o(e))}},{"./_defined":32,"./_iobject":44}],76:[function(e,t,r){var n=e("./_to-integer"),o=Math.min;t.exports=function(e){return e>0?o(n(e),9007199254740991):0}},{"./_to-integer":74}],77:[function(e,t,r){var n=e("./_defined");t.exports=function(e){return Object(n(e))}},{"./_defined":32}],78:[function(e,t,r){var n=e("./_is-object");t.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":46}],79:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],80:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_library"),a=e("./_wks-ext"),s=e("./_object-dp").f;t.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},{"./_core":30,"./_global":39,"./_library":52,"./_object-dp":55,"./_wks-ext":81}],81:[function(e,t,r){r.f=e("./_wks")},{"./_wks":82}],82:[function(e,t,r){var n=e("./_shared")("wks"),o=e("./_uid"),i=e("./_global").Symbol,a="function"==typeof i,s=t.exports=function(e){return n[e]||(n[e]=a&&i[e]||(a?i:o)("Symbol."+e))};s.store=n},{"./_global":39,"./_shared":71,"./_uid":79}],83:[function(e,t,r){"use strict";var n=e("./_add-to-unscopables"),o=e("./_iter-step"),i=e("./_iterators"),a=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./_add-to-unscopables":26,"./_iter-define":48,"./_iter-step":49,"./_iterators":50,"./_to-iobject":75}],84:[function(e,t,r){var n=e("./_export");n(n.S,"Object",{create:e("./_object-create")})},{"./_export":37,"./_object-create":54}],85:[function(e,t,r){var n=e("./_export");n(n.S+n.F*!e("./_descriptors"),"Object",{defineProperty:e("./_object-dp").f})},{"./_descriptors":33,"./_export":37,"./_object-dp":55}],86:[function(e,t,r){var n=e("./_is-object"),o=e("./_meta").onFreeze;e("./_object-sap")("freeze",function(e){return function(t){return e&&n(t)?e(o(t)):t}})},{"./_is-object":46,"./_meta":53,"./_object-sap":65}],87:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-gpo");e("./_object-sap")("getPrototypeOf",function(){return function(e){return o(n(e))}})},{"./_object-gpo":61,"./_object-sap":65,"./_to-object":77}],88:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return o(n(e))}})},{"./_object-keys":63,"./_object-sap":65,"./_to-object":77}],89:[function(e,t,r){var n=e("./_export");n(n.S,"Object",{setPrototypeOf:e("./_set-proto").set})},{"./_export":37,"./_set-proto":68}],90:[function(e,t,r){},{}],91:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":48,"./_string-at":72}],92:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_has"),i=e("./_descriptors"),a=e("./_export"),s=e("./_redefine"),u=e("./_meta").KEY,c=e("./_fails"),l=e("./_shared"),f=e("./_set-to-string-tag"),d=e("./_uid"),p=e("./_wks"),h=e("./_wks-ext"),y=e("./_wks-define"),m=e("./_keyof"),v=e("./_enum-keys"),_=e("./_is-array"),b=e("./_an-object"),g=e("./_to-iobject"),E=e("./_to-primitive"),j=e("./_property-desc"),w=e("./_object-create"),O=e("./_object-gopn-ext"),M=e("./_object-gopd"),x=e("./_object-dp"),P=e("./_object-keys"),k=M.f,R=x.f,S=O.f,T=n.Symbol,A=n.JSON,N=A&&A.stringify,I="prototype",U=p("_hidden"),C=p("toPrimitive"),L={}.propertyIsEnumerable,F=l("symbol-registry"),B=l("symbols"),D=l("op-symbols"),G=Object[I],K="function"==typeof T,Y=n.QObject,q=!Y||!Y[I]||!Y[I].findChild,z=i&&c(function(){return 7!=w(R({},"a",{get:function(){return R(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=k(G,t);n&&delete G[t],R(e,t,r),n&&e!==G&&R(G,t,n)}:R,H=function(e){var t=B[e]=w(T[I]);return t._k=e,t},W=K&&"symbol"==typeof T.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof T},J=function(e,t,r){return e===G&&J(D,t,r),b(e),t=E(t,!0),b(r),o(B,t)?(r.enumerable?(o(e,U)&&e[U][t]&&(e[U][t]=!1),r=w(r,{enumerable:j(0,!1)})):(o(e,U)||R(e,U,j(1,{})),e[U][t]=!0),z(e,t,r)):R(e,t,r)},V=function(e,t){b(e);for(var r,n=v(t=g(t)),o=0,i=n.length;i>o;)J(e,r=n[o++],t[r]);return e},$=function(e,t){return void 0===t?w(e):V(w(e),t)},X=function(e){var t=L.call(this,e=E(e,!0));return!(this===G&&o(B,e)&&!o(D,e))&&(!(t||!o(this,e)||!o(B,e)||o(this,U)&&this[U][e])||t)},Q=function(e,t){if(e=g(e),t=E(t,!0),e!==G||!o(B,t)||o(D,t)){var r=k(e,t);return!r||!o(B,t)||o(e,U)&&e[U][t]||(r.enumerable=!0),r}},Z=function(e){for(var t,r=S(g(e)),n=[],i=0;r.length>i;)o(B,t=r[i++])||t==U||t==u||n.push(t);return n},ee=function(e){for(var t,r=e===G,n=S(r?D:g(e)),i=[],a=0;n.length>a;)!o(B,t=n[a++])||r&&!o(G,t)||i.push(B[t]);return i};K||(T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(r){this===G&&t.call(D,r),o(this,U)&&o(this[U],e)&&(this[U][e]=!1),z(this,e,j(1,r))};return i&&q&&z(G,e,{configurable:!0,set:t}),H(e)},s(T[I],"toString",function(){return this._k}),M.f=Q,x.f=J,e("./_object-gopn").f=O.f=Z,e("./_object-pie").f=X,e("./_object-gops").f=ee,i&&!e("./_library")&&s(G,"propertyIsEnumerable",X,!0),h.f=function(e){return H(p(e))}),a(a.G+a.W+a.F*!K,{Symbol:T});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),re=0;te.length>re;)p(te[re++]);for(var te=P(p.store),re=0;te.length>re;)y(te[re++]);a(a.S+a.F*!K,"Symbol",{"for":function(e){return o(F,e+="")?F[e]:F[e]=T(e)},keyFor:function(e){if(W(e))return m(F,e);throw TypeError(e+" is not a symbol!")},useSetter:function(){q=!0},useSimple:function(){q=!1}}),a(a.S+a.F*!K,"Object",{create:$,defineProperty:J,defineProperties:V,getOwnPropertyDescriptor:Q,getOwnPropertyNames:Z,getOwnPropertySymbols:ee}),A&&a(a.S+a.F*(!K||c(function(){var e=T();return"[null]"!=N([e])||"{}"!=N({a:e})||"{}"!=N(Object(e))})),"JSON",{stringify:function(e){if(void 0!==e&&!W(e)){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);return t=n[1],"function"==typeof t&&(r=t),!r&&_(t)||(t=function(e,t){if(r&&(t=r.call(this,e,t)),!W(t))return t}),n[1]=t,N.apply(A,n)}}}),T[I][C]||e("./_hide")(T[I],C,T[I].valueOf),f(T,"Symbol"),f(Math,"Math",!0),f(n.JSON,"JSON",!0)},{"./_an-object":27,"./_descriptors":33,"./_enum-keys":36,"./_export":37,"./_fails":38,"./_global":39,"./_has":40,"./_hide":41,"./_is-array":45,"./_keyof":51,"./_library":52,"./_meta":53,"./_object-create":54,"./_object-dp":55,"./_object-gopd":57,"./_object-gopn":59,"./_object-gopn-ext":58,"./_object-gops":60,"./_object-keys":63,"./_object-pie":64,"./_property-desc":66,"./_redefine":67,"./_set-to-string-tag":69,"./_shared":71,"./_to-iobject":75,"./_to-primitive":78,"./_uid":79,"./_wks":82,"./_wks-define":80,"./_wks-ext":81}],93:[function(e,t,r){e("./_wks-define")("asyncIterator")},{"./_wks-define":80}],94:[function(e,t,r){e("./_wks-define")("observable")},{"./_wks-define":80}],95:[function(e,t,r){e("./es6.array.iterator");for(var n=e("./_global"),o=e("./_hide"),i=e("./_iterators"),a=e("./_wks")("toStringTag"),s=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],u=0;u<5;u++){var c=s[u],l=n[c],f=l&&l.prototype;f&&!f[a]&&o(f,a,c),i[c]=i.Array}},{"./_global":39,"./_hide":41,"./_iterators":50,"./_wks":82,"./es6.array.iterator":83}],96:[function(e,t,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(e){if(f===setTimeout)return setTimeout(e,0);if((f===n||!f)&&setTimeout)return f=setTimeout,setTimeout(e,0);try{return f(e,0)}catch(t){try{return f.call(null,e,0)}catch(t){return f.call(this,e,0)}}}function a(e){if(d===clearTimeout)return clearTimeout(e);if((d===o||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function s(){m&&h&&(m=!1,h.length?y=h.concat(y):v=-1,y.length&&u())}function u(){if(!m){var e=i(s);m=!0;for(var t=y.length;t;){for(h=y,y=[];++v<t;)h&&h[v].run();v=-1,t=y.length}h=null,m=!1,a(e)}}function c(e,t){this.fun=e,this.array=t}function l(){}var f,d,p=t.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:n}catch(e){f=n}try{d="function"==typeof clearTimeout?clearTimeout:o}catch(e){d=o}}();var h,y=[],m=!1,v=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];y.push(new c(e,t)),1!==y.length||m||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=l,p.addListener=l,p.once=l,p.off=l,p.removeListener=l,p.removeAllListeners=l,p.emit=l,p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},{}],97:[function(e,t,r){(function(r){var n="object"==typeof r?r:"object"==typeof window?window:"object"==typeof self?self:this,o=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,i=o&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=e("./runtime"),o)n.regeneratorRuntime=i;else try{delete n.regeneratorRuntime}catch(a){n.regeneratorRuntime=void 0}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./runtime":98}],98:[function(e,t,r){(function(e,r){!function(r){"use strict";function n(e,t,r,n){var o=Object.create((t||i).prototype),a=new h(n||[]);return o._invoke=f(e,r,a),o}function o(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(n){return{type:"throw",arg:n}}}function i(){}function a(){}function s(){}function u(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function c(e){this.arg=e}function l(t){function r(e,n,i,a){var s=o(t[e],t,n);if("throw"!==s.type){var u=s.arg,l=u.value;return l instanceof c?Promise.resolve(l.arg).then(function(e){r("next",e,i,a)},function(e){r("throw",e,i,a)}):Promise.resolve(l).then(function(e){u.value=e,i(u)},a)}a(s.arg)}function n(e,t){function n(){return new Promise(function(n,o){r(e,t,n,o)})}return i=i?i.then(n,n):n()}"object"==typeof e&&e.domain&&(r=e.domain.bind(r));var i;this._invoke=n}function f(e,t,r){var n=O;return function(i,a){if(n===x)throw new Error("Generator is already running");if(n===P){if("throw"===i)throw a;return m()}for(;;){var s=r.delegate;if(s){if("return"===i||"throw"===i&&s.iterator[i]===v){r.delegate=null;var u=s.iterator["return"];if(u){var c=o(u,s.iterator,a);if("throw"===c.type){i="throw",a=c.arg;continue}}if("return"===i)continue}var c=o(s.iterator[i],s.iterator,a);if("throw"===c.type){r.delegate=null,i="throw",a=c.arg;continue}i="next",a=v;var l=c.arg;if(!l.done)return n=M,l;r[s.resultName]=l.value,r.next=s.nextLoc,r.delegate=null}if("next"===i)r.sent=r._sent=a;else if("throw"===i){if(n===O)throw n=P,a;r.dispatchException(a)&&(i="next",a=v)}else"return"===i&&r.abrupt("return",a);n=x;var c=o(e,t,r);if("normal"===c.type){n=r.done?P:M;var l={value:c.arg,done:r.done};if(c.arg!==k)return l;r.delegate&&"next"===i&&(a=v)}else"throw"===c.type&&(n=P,i="throw",a=c.arg)}}}function d(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function p(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function h(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(d,this),this.reset(!0)}function y(e){if(e){var t=e[g];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function o(){for(;++r<e.length;)if(_.call(e,r))return o.value=e[r],o.done=!1,o;return o.value=v,o.done=!0,o};return n.next=n}}return{next:m}}function m(){return{value:v,done:!0}}var v,_=Object.prototype.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},g=b.iterator||"@@iterator",E=b.toStringTag||"@@toStringTag",j="object"==typeof t,w=r.regeneratorRuntime;if(w)return void(j&&(t.exports=w));w=r.regeneratorRuntime=j?t.exports:{},w.wrap=n;var O="suspendedStart",M="suspendedYield",x="executing",P="completed",k={},R=s.prototype=i.prototype;a.prototype=R.constructor=s,s.constructor=a,s[E]=a.displayName="GeneratorFunction",w.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===a||"GeneratorFunction"===(t.displayName||t.name))},w.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,s):(e.__proto__=s,E in e||(e[E]="GeneratorFunction")),
e.prototype=Object.create(R),e},w.awrap=function(e){return new c(e)},u(l.prototype),w.async=function(e,t,r,o){var i=new l(n(e,t,r,o));return w.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},u(R),R[g]=function(){return this},R[E]="Generator",R.toString=function(){return"[object Generator]"},w.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},w.values=y,h.prototype={constructor:h,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=v,this.done=!1,this.delegate=null,this.tryEntries.forEach(p),!e)for(var t in this)"t"===t.charAt(0)&&_.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=v)},stop:function(){this.done=!0;var e=this.tryEntries[0],t=e.completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){function t(t,n){return i.type="throw",i.arg=e,r.next=t,!!n}if(this.done)throw e;for(var r=this,n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var a=_.call(o,"catchLoc"),s=_.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&_.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?this.next=o.finallyLoc:this.complete(i),k},complete:function(e,t){if("throw"===e.type)throw e.arg;"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=e.arg,this.next="end"):"normal"===e.type&&t&&(this.next=t)},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),p(r),k}},"catch":function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;p(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:y(e),resultName:t,nextLoc:r},k}}}("object"==typeof r?r:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,e("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:96}],99:[function(t,r,n){!function(t,n){"function"==typeof e&&e.amd?e([],n):"undefined"!=typeof r&&r.exports?r.exports=n():t.tv4=n()}(this,function(){function e(e){return encodeURI(e).replace(/%25[0-9][0-9]/g,function(e){return"%"+e.substring(3)})}function t(t){var r="";d[t.charAt(0)]&&(r=t.charAt(0),t=t.substring(1));var n="",o="",i=!0,a=!1,s=!1;"+"===r?i=!1:"."===r?(o=".",n="."):"/"===r?(o="/",n="/"):"#"===r?(o="#",i=!1):";"===r?(o=";",n=";",a=!0,s=!0):"?"===r?(o="?",n="&",a=!0):"&"===r&&(o="&",n="&",a=!0);for(var u=[],c=t.split(","),l=[],f={},h=0;h<c.length;h++){var y=c[h],m=null;if(y.indexOf(":")!==-1){var v=y.split(":");y=v[0],m=parseInt(v[1],10)}for(var _={};p[y.charAt(y.length-1)];)_[y.charAt(y.length-1)]=!0,y=y.substring(0,y.length-1);var b={truncate:m,name:y,suffices:_};l.push(b),f[y]=b,u.push(y)}var g=function(t){for(var r="",u=0,c=0;c<l.length;c++){var f=l[c],d=t(f.name);if(null===d||void 0===d||Array.isArray(d)&&0===d.length||"object"==typeof d&&0===Object.keys(d).length)u++;else if(r+=c===u?o:n||",",Array.isArray(d)){a&&(r+=f.name+"=");for(var p=0;p<d.length;p++)p>0&&(r+=f.suffices["*"]?n||",":",",f.suffices["*"]&&a&&(r+=f.name+"=")),r+=i?encodeURIComponent(d[p]).replace(/!/g,"%21"):e(d[p])}else if("object"==typeof d){a&&!f.suffices["*"]&&(r+=f.name+"=");var h=!0;for(var y in d)h||(r+=f.suffices["*"]?n||",":","),h=!1,r+=i?encodeURIComponent(y).replace(/!/g,"%21"):e(y),r+=f.suffices["*"]?"=":",",r+=i?encodeURIComponent(d[y]).replace(/!/g,"%21"):e(d[y])}else a&&(r+=f.name,s&&""===d||(r+="=")),null!=f.truncate&&(d=d.substring(0,f.truncate)),r+=i?encodeURIComponent(d).replace(/!/g,"%21"):e(d)}return r};return g.varNames=u,{prefix:o,substitution:g}}function r(e){if(!(this instanceof r))return new r(e);for(var n=e.split("{"),o=[n.shift()],i=[],a=[],s=[];n.length>0;){var u=n.shift(),c=u.split("}")[0],l=u.substring(c.length+1),f=t(c);a.push(f.substitution),i.push(f.prefix),o.push(l),s=s.concat(f.substitution.varNames)}this.fill=function(e){for(var t=o[0],r=0;r<a.length;r++){var n=a[r];t+=n(e),t+=o[r+1]}return t},this.varNames=s,this.template=e}function n(e,t){if(e===t)return!0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(Array.isArray(e)!==Array.isArray(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(!n(e[r],t[r]))return!1}else{var o;for(o in e)if(void 0===t[o]&&void 0!==e[o])return!1;for(o in t)if(void 0===e[o]&&void 0!==t[o])return!1;for(o in e)if(!n(e[o],t[o]))return!1}return!0}return!1}function o(e){var t=String(e).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);return t?{href:t[0]||"",protocol:t[1]||"",authority:t[2]||"",host:t[3]||"",hostname:t[4]||"",port:t[5]||"",pathname:t[6]||"",search:t[7]||"",hash:t[8]||""}:null}function i(e,t){function r(e){var t=[];return e.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,function(e){"/.."===e?t.pop():t.push(e)}),t.join("").replace(/^\//,"/"===e.charAt(0)?"/":"")}return t=o(t||""),e=o(e||""),t&&e?(t.protocol||e.protocol)+(t.protocol||t.authority?t.authority:e.authority)+r(t.protocol||t.authority||"/"===t.pathname.charAt(0)?t.pathname:t.pathname?(e.authority&&!e.pathname?"/":"")+e.pathname.slice(0,e.pathname.lastIndexOf("/")+1)+t.pathname:e.pathname)+(t.protocol||t.authority||t.pathname?t.search:t.search||e.search)+t.hash:null}function a(e){return e.split("#")[0]}function s(e,t){if(e&&"object"==typeof e)if(void 0===t?t=e.id:"string"==typeof e.id&&(t=i(t,e.id),e.id=t),Array.isArray(e))for(var r=0;r<e.length;r++)s(e[r],t);else{"string"==typeof e.$ref&&(e.$ref=i(t,e.$ref));for(var n in e)"enum"!==n&&s(e[n],t)}}function u(e){e=e||"en";var t=E[e];return function(e){var r=t[e.code]||g[e.code];if("string"!=typeof r)return"Unknown error code "+e.code+": "+JSON.stringify(e.messageParams);var n=e.params;return r.replace(/\{([^{}]*)\}/g,function(e,t){var r=n[t];return"string"==typeof r||"number"==typeof r?r:e})}}function c(e,t,r,n,o){if(Error.call(this),void 0===e)throw new Error("No error code supplied: "+n);this.message="",this.params=t,this.code=e,this.dataPath=r||"",this.schemaPath=n||"",this.subErrors=o||null;var i=new Error(this.message);if(this.stack=i.stack||i.stacktrace,!this.stack)try{throw i}catch(i){this.stack=i.stack||i.stacktrace}}function l(e,t){if(t.substring(0,e.length)===e){var r=t.substring(e.length);if(t.length>0&&"/"===t.charAt(e.length-1)||"#"===r.charAt(0)||"?"===r.charAt(0))return!0}return!1}function f(e){var t,r,n=new h,o={setErrorReporter:function(e){return"string"==typeof e?this.language(e):(r=e,!0)},addFormat:function(){n.addFormat.apply(n,arguments)},language:function(e){return e?(E[e]||(e=e.split("-")[0]),!!E[e]&&(t=e,e)):t},addLanguage:function(e,t){var r;for(r in v)t[r]&&!t[v[r]]&&(t[v[r]]=t[r]);var n=e.split("-")[0];if(E[n]){E[e]=Object.create(E[n]);for(r in t)"undefined"==typeof E[n][r]&&(E[n][r]=t[r]),E[e][r]=t[r]}else E[e]=t,E[n]=t;return this},freshApi:function(e){var t=f();return e&&t.language(e),t},validate:function(e,o,i,a){var s=u(t),c=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,l=new h(n,(!1),c,i,a);"string"==typeof o&&(o={$ref:o}),l.addSchema("",o);var f=l.validateAll(e,o,null,null,"");return!f&&a&&(f=l.banUnknownProperties(e,o)),this.error=f,this.missing=l.missing,this.valid=null===f,this.valid},validateResult:function(){var e={};return this.validate.apply(e,arguments),e},validateMultiple:function(e,o,i,a){var s=u(t),c=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,l=new h(n,(!0),c,i,a);"string"==typeof o&&(o={$ref:o}),l.addSchema("",o),l.validateAll(e,o,null,null,""),a&&l.banUnknownProperties(e,o);var f={};return f.errors=l.errors,f.missing=l.missing,f.valid=0===f.errors.length,f},addSchema:function(){return n.addSchema.apply(n,arguments)},getSchema:function(){return n.getSchema.apply(n,arguments)},getSchemaMap:function(){return n.getSchemaMap.apply(n,arguments)},getSchemaUris:function(){return n.getSchemaUris.apply(n,arguments)},getMissingUris:function(){return n.getMissingUris.apply(n,arguments)},dropSchemas:function(){n.dropSchemas.apply(n,arguments)},defineKeyword:function(){n.defineKeyword.apply(n,arguments)},defineError:function(e,t,r){if("string"!=typeof e||!/^[A-Z]+(_[A-Z]+)*$/.test(e))throw new Error("Code name must be a string in UPPER_CASE_WITH_UNDERSCORES");if("number"!=typeof t||t%1!==0||t<1e4)throw new Error("Code number must be an integer > 10000");if("undefined"!=typeof v[e])throw new Error("Error already defined: "+e+" as "+v[e]);if("undefined"!=typeof _[t])throw new Error("Error code already used: "+_[t]+" as "+t);v[e]=t,_[t]=e,g[e]=g[t]=r;for(var n in E){var o=E[n];o[e]&&(o[t]=o[t]||o[e])}},reset:function(){n.reset(),this.error=null,this.missing=[],this.valid=!0},missing:[],error:null,valid:!0,normSchema:s,resolveUrl:i,getDocumentUri:a,errorCodes:v};return o.language(e||"en"),o}Object.keys||(Object.keys=function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),r=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],n=r.length;return function(o){if("object"!=typeof o&&"function"!=typeof o||null===o)throw new TypeError("Object.keys called on non-object");var i=[];for(var a in o)e.call(o,a)&&i.push(a);if(t)for(var s=0;s<n;s++)e.call(o,r[s])&&i.push(r[s]);return i}}()),Object.create||(Object.create=function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create implementation only accepts one parameter.");return e.prototype=t,new e}}()),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(0===r)return-1;var n=0;if(arguments.length>1&&(n=Number(arguments[1]),n!==n?n=0:0!==n&&n!==1/0&&n!==-(1/0)&&(n=(n>0||-1)*Math.floor(Math.abs(n)))),n>=r)return-1;for(var o=n>=0?n:Math.max(r-Math.abs(n),0);o<r;o++)if(o in t&&t[o]===e)return o;return-1}),Object.isFrozen||(Object.isFrozen=function(e){for(var t="tv4_test_frozen_key";e.hasOwnProperty(t);)t+=Math.random();try{return e[t]=!0,delete e[t],!1}catch(r){return!0}});var d={"+":!0,"#":!0,".":!0,"/":!0,";":!0,"?":!0,"&":!0},p={"*":!0};r.prototype={toString:function(){return this.template},fillFromObject:function(e){return this.fill(function(t){return e[t]})}};var h=function(e,t,r,n,o){if(this.missing=[],this.missingMap={},this.formatValidators=e?Object.create(e.formatValidators):{},this.schemas=e?Object.create(e.schemas):{},this.collectMultiple=t,this.errors=[],this.handleError=t?this.collectError:this.returnError,n&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey="tv4_validation_id",this.validationErrorsKey="tv4_validation_errors_id"),o&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorReporter=r||u("en"),"string"==typeof this.errorReporter)throw new Error("debug");if(this.definedKeywords={},e)for(var i in e.definedKeywords)this.definedKeywords[i]=e.definedKeywords[i].slice(0)};h.prototype.defineKeyword=function(e,t){this.definedKeywords[e]=this.definedKeywords[e]||[],this.definedKeywords[e].push(t)},h.prototype.createError=function(e,t,r,n,o,i,a){var s=new c(e,t,r,n,o);return s.message=this.errorReporter(s,i,a),s},h.prototype.returnError=function(e){return e},h.prototype.collectError=function(e){return e&&this.errors.push(e),null},h.prototype.prefixErrors=function(e,t,r){for(var n=e;n<this.errors.length;n++)this.errors[n]=this.errors[n].prefixWith(t,r);return this},h.prototype.banUnknownProperties=function(e,t){for(var r in this.unknownPropertyPaths){var n=this.createError(v.UNKNOWN_PROPERTY,{path:r},r,"",null,e,t),o=this.handleError(n);if(o)return o}return null},h.prototype.addFormat=function(e,t){if("object"==typeof e){for(var r in e)this.addFormat(r,e[r]);return this}this.formatValidators[e]=t},h.prototype.resolveRefs=function(e,t){if(void 0!==e.$ref){if(t=t||{},t[e.$ref])return this.createError(v.CIRCULAR_REFERENCE,{urls:Object.keys(t).join(", ")},"","",null,void 0,e);t[e.$ref]=!0,e=this.getSchema(e.$ref,t)}return e},h.prototype.getSchema=function(e,t){var r;if(void 0!==this.schemas[e])return r=this.schemas[e],this.resolveRefs(r,t);var n=e,o="";if(e.indexOf("#")!==-1&&(o=e.substring(e.indexOf("#")+1),n=e.substring(0,e.indexOf("#"))),"object"==typeof this.schemas[n]){r=this.schemas[n];var i=decodeURIComponent(o);if(""===i)return this.resolveRefs(r,t);if("/"!==i.charAt(0))return;for(var a=i.split("/").slice(1),s=0;s<a.length;s++){var u=a[s].replace(/~1/g,"/").replace(/~0/g,"~");if(void 0===r[u]){r=void 0;break}r=r[u]}if(void 0!==r)return this.resolveRefs(r,t)}void 0===this.missing[n]&&(this.missing.push(n),this.missing[n]=n,this.missingMap[n]=n)},h.prototype.searchSchemas=function(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)this.searchSchemas(e[r],t);else if(e&&"object"==typeof e){"string"==typeof e.id&&l(t,e.id)&&void 0===this.schemas[e.id]&&(this.schemas[e.id]=e);for(var n in e)if("enum"!==n)if("object"==typeof e[n])this.searchSchemas(e[n],t);else if("$ref"===n){var o=a(e[n]);o&&void 0===this.schemas[o]&&void 0===this.missingMap[o]&&(this.missingMap[o]=o)}}},h.prototype.addSchema=function(e,t){if("string"!=typeof e||"undefined"==typeof t){if("object"!=typeof e||"string"!=typeof e.id)return;t=e,e=t.id}e===a(e)+"#"&&(e=a(e)),this.schemas[e]=t,delete this.missingMap[e],s(t,e),this.searchSchemas(t,e)},h.prototype.getSchemaMap=function(){var e={};for(var t in this.schemas)e[t]=this.schemas[t];return e},h.prototype.getSchemaUris=function(e){var t=[];for(var r in this.schemas)e&&!e.test(r)||t.push(r);return t},h.prototype.getMissingUris=function(e){var t=[];for(var r in this.missingMap)e&&!e.test(r)||t.push(r);return t},h.prototype.dropSchemas=function(){this.schemas={},this.reset()},h.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[]},h.prototype.validateAll=function(e,t,r,n,o){var i;if(t=this.resolveRefs(t),!t)return null;if(t instanceof c)return this.errors.push(t),t;var a,s=this.errors.length,u=null,l=null;if(this.checkRecursive&&e&&"object"==typeof e){if(i=!this.scanned.length,e[this.validatedSchemasKey]){var f=e[this.validatedSchemasKey].indexOf(t);if(f!==-1)return this.errors=this.errors.concat(e[this.validationErrorsKey][f]),null}if(Object.isFrozen(e)&&(a=this.scannedFrozen.indexOf(e),a!==-1)){var d=this.scannedFrozenSchemas[a].indexOf(t);if(d!==-1)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[a][d]),null}if(this.scanned.push(e),Object.isFrozen(e))a===-1&&(a=this.scannedFrozen.length,this.scannedFrozen.push(e),this.scannedFrozenSchemas.push([])),u=this.scannedFrozenSchemas[a].length,this.scannedFrozenSchemas[a][u]=t,this.scannedFrozenValidationErrors[a][u]=[];else{if(!e[this.validatedSchemasKey])try{Object.defineProperty(e,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(e,this.validationErrorsKey,{value:[],configurable:!0})}catch(p){e[this.validatedSchemasKey]=[],e[this.validationErrorsKey]=[]}l=e[this.validatedSchemasKey].length,e[this.validatedSchemasKey][l]=t,e[this.validationErrorsKey][l]=[]}}var h=this.errors.length,y=this.validateBasic(e,t,o)||this.validateNumeric(e,t,o)||this.validateString(e,t,o)||this.validateArray(e,t,o)||this.validateObject(e,t,o)||this.validateCombinations(e,t,o)||this.validateHypermedia(e,t,o)||this.validateFormat(e,t,o)||this.validateDefinedKeywords(e,t,o)||null;if(i){for(;this.scanned.length;){var m=this.scanned.pop();delete m[this.validatedSchemasKey]}this.scannedFrozen=[],this.scannedFrozenSchemas=[]}if(y||h!==this.errors.length)for(;r&&r.length||n&&n.length;){var v=r&&r.length?""+r.pop():null,_=n&&n.length?""+n.pop():null;y&&(y=y.prefixWith(v,_)),this.prefixErrors(h,v,_)}return null!==u?this.scannedFrozenValidationErrors[a][u]=this.errors.slice(s):null!==l&&(e[this.validationErrorsKey][l]=this.errors.slice(s)),this.handleError(y)},h.prototype.validateFormat=function(e,t){if("string"!=typeof t.format||!this.formatValidators[t.format])return null;var r=this.formatValidators[t.format].call(null,e,t);return"string"==typeof r||"number"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r},"","/format",null,e,t):r&&"object"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r.message||"?"},r.dataPath||"",r.schemaPath||"/format",null,e,t):null},h.prototype.validateDefinedKeywords=function(e,t,r){for(var n in this.definedKeywords)if("undefined"!=typeof t[n])for(var o=this.definedKeywords[n],i=0;i<o.length;i++){var a=o[i],s=a(e,t[n],t,r);if("string"==typeof s||"number"==typeof s)return this.createError(v.KEYWORD_CUSTOM,{key:n,message:s},"","",null,e,t).prefixWith(null,n);if(s&&"object"==typeof s){var u=s.code;if("string"==typeof u){if(!v[u])throw new Error("Undefined error code (use defineError): "+u);u=v[u]}else"number"!=typeof u&&(u=v.KEYWORD_CUSTOM);var c="object"==typeof s.message?s.message:{key:n,message:s.message||"?"},l=s.schemaPath||"/"+n.replace(/~/g,"~0").replace(/\//g,"~1");return this.createError(u,c,s.dataPath||null,l,null,e,t)}}return null},h.prototype.validateBasic=function(e,t,r){var n;return(n=this.validateType(e,t,r))?n.prefixWith(null,"type"):(n=this.validateEnum(e,t,r))?n.prefixWith(null,"type"):null},h.prototype.validateType=function(e,t){if(void 0===t.type)return null;var r=typeof e;null===e?r="null":Array.isArray(e)&&(r="array");var n=t.type;Array.isArray(n)||(n=[n]);for(var o=0;o<n.length;o++){var i=n[o];if(i===r||"integer"===i&&"number"===r&&e%1===0)return null}return this.createError(v.INVALID_TYPE,{type:r,expected:n.join("/")},"","",null,e,t)},h.prototype.validateEnum=function(e,t){if(void 0===t["enum"])return null;for(var r=0;r<t["enum"].length;r++){var o=t["enum"][r];if(n(e,o))return null}return this.createError(v.ENUM_MISMATCH,{value:"undefined"!=typeof JSON?JSON.stringify(e):e},"","",null,e,t)},h.prototype.validateNumeric=function(e,t,r){return this.validateMultipleOf(e,t,r)||this.validateMinMax(e,t,r)||this.validateNaN(e,t,r)||null};var y=Math.pow(2,-51),m=1-y;h.prototype.validateMultipleOf=function(e,t){var r=t.multipleOf||t.divisibleBy;if(void 0===r)return null;if("number"==typeof e){var n=e/r%1;if(n>=y&&n<m)return this.createError(v.NUMBER_MULTIPLE_OF,{value:e,multipleOf:r},"","",null,e,t)}return null},h.prototype.validateMinMax=function(e,t){if("number"!=typeof e)return null;if(void 0!==t.minimum){if(e<t.minimum)return this.createError(v.NUMBER_MINIMUM,{value:e,minimum:t.minimum},"","/minimum",null,e,t);if(t.exclusiveMinimum&&e===t.minimum)return this.createError(v.NUMBER_MINIMUM_EXCLUSIVE,{value:e,minimum:t.minimum},"","/exclusiveMinimum",null,e,t)}if(void 0!==t.maximum){if(e>t.maximum)return this.createError(v.NUMBER_MAXIMUM,{value:e,maximum:t.maximum},"","/maximum",null,e,t);if(t.exclusiveMaximum&&e===t.maximum)return this.createError(v.NUMBER_MAXIMUM_EXCLUSIVE,{value:e,maximum:t.maximum},"","/exclusiveMaximum",null,e,t)}return null},h.prototype.validateNaN=function(e,t){return"number"!=typeof e?null:isNaN(e)===!0||e===1/0||e===-(1/0)?this.createError(v.NUMBER_NOT_A_NUMBER,{value:e},"","/type",null,e,t):null},h.prototype.validateString=function(e,t,r){return this.validateStringLength(e,t,r)||this.validateStringPattern(e,t,r)||null},h.prototype.validateStringLength=function(e,t){return"string"!=typeof e?null:void 0!==t.minLength&&e.length<t.minLength?this.createError(v.STRING_LENGTH_SHORT,{length:e.length,minimum:t.minLength},"","/minLength",null,e,t):void 0!==t.maxLength&&e.length>t.maxLength?this.createError(v.STRING_LENGTH_LONG,{length:e.length,maximum:t.maxLength},"","/maxLength",null,e,t):null},h.prototype.validateStringPattern=function(e,t){if("string"!=typeof e||"string"!=typeof t.pattern&&!(t.pattern instanceof RegExp))return null;var r;if(t.pattern instanceof RegExp)r=t.pattern;else{var n,o="",i=t.pattern.match(/^\/(.+)\/([img]*)$/);i?(n=i[1],o=i[2]):n=t.pattern,r=new RegExp(n,o)}return r.test(e)?null:this.createError(v.STRING_PATTERN,{pattern:t.pattern},"","/pattern",null,e,t)},h.prototype.validateArray=function(e,t,r){return Array.isArray(e)?this.validateArrayLength(e,t,r)||this.validateArrayUniqueItems(e,t,r)||this.validateArrayItems(e,t,r)||null:null},h.prototype.validateArrayLength=function(e,t){var r;return void 0!==t.minItems&&e.length<t.minItems&&(r=this.createError(v.ARRAY_LENGTH_SHORT,{length:e.length,minimum:t.minItems},"","/minItems",null,e,t),this.handleError(r))?r:void 0!==t.maxItems&&e.length>t.maxItems&&(r=this.createError(v.ARRAY_LENGTH_LONG,{length:e.length,maximum:t.maxItems},"","/maxItems",null,e,t),this.handleError(r))?r:null},h.prototype.validateArrayUniqueItems=function(e,t){if(t.uniqueItems)for(var r=0;r<e.length;r++)for(var o=r+1;o<e.length;o++)if(n(e[r],e[o])){var i=this.createError(v.ARRAY_UNIQUE,{match1:r,match2:o},"","/uniqueItems",null,e,t);if(this.handleError(i))return i}return null},h.prototype.validateArrayItems=function(e,t,r){if(void 0===t.items)return null;var n,o;if(Array.isArray(t.items)){for(o=0;o<e.length;o++)if(o<t.items.length){if(n=this.validateAll(e[o],t.items[o],[o],["items",o],r+"/"+o))return n}else if(void 0!==t.additionalItems)if("boolean"==typeof t.additionalItems){if(!t.additionalItems&&(n=this.createError(v.ARRAY_ADDITIONAL_ITEMS,{},"/"+o,"/additionalItems",null,e,t),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalItems,[o],["additionalItems"],r+"/"+o))return n}else for(o=0;o<e.length;o++)if(n=this.validateAll(e[o],t.items,[o],["items"],r+"/"+o))return n;return null},h.prototype.validateObject=function(e,t,r){return"object"!=typeof e||null===e||Array.isArray(e)?null:this.validateObjectMinMaxProperties(e,t,r)||this.validateObjectRequiredProperties(e,t,r)||this.validateObjectProperties(e,t,r)||this.validateObjectDependencies(e,t,r)||null},h.prototype.validateObjectMinMaxProperties=function(e,t){var r,n=Object.keys(e);return void 0!==t.minProperties&&n.length<t.minProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MINIMUM,{propertyCount:n.length,minimum:t.minProperties},"","/minProperties",null,e,t),this.handleError(r))?r:void 0!==t.maxProperties&&n.length>t.maxProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:n.length,maximum:t.maxProperties},"","/maxProperties",null,e,t),this.handleError(r))?r:null},h.prototype.validateObjectRequiredProperties=function(e,t){if(void 0!==t.required)for(var r=0;r<t.required.length;r++){var n=t.required[r];if(void 0===e[n]){var o=this.createError(v.OBJECT_REQUIRED,{key:n},"","/required/"+r,null,e,t);if(this.handleError(o))return o}}return null},h.prototype.validateObjectProperties=function(e,t,r){var n;for(var o in e){var i=r+"/"+o.replace(/~/g,"~0").replace(/\//g,"~1"),a=!1;if(void 0!==t.properties&&void 0!==t.properties[o]&&(a=!0,n=this.validateAll(e[o],t.properties[o],[o],["properties",o],i)))return n;if(void 0!==t.patternProperties)for(var s in t.patternProperties){var u=new RegExp(s);if(u.test(o)&&(a=!0,n=this.validateAll(e[o],t.patternProperties[s],[o],["patternProperties",s],i)))return n}if(a)this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]);else if(void 0!==t.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]),"boolean"==typeof t.additionalProperties){if(!t.additionalProperties&&(n=this.createError(v.OBJECT_ADDITIONAL_PROPERTIES,{key:o},"","/additionalProperties",null,e,t).prefixWith(o,null),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalProperties,[o],["additionalProperties"],i))return n}else this.trackUnknownProperties&&!this.knownPropertyPaths[i]&&(this.unknownPropertyPaths[i]=!0)}return null},h.prototype.validateObjectDependencies=function(e,t,r){var n;if(void 0!==t.dependencies)for(var o in t.dependencies)if(void 0!==e[o]){var i=t.dependencies[o];if("string"==typeof i){if(void 0===e[i]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:i},"","",null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(Array.isArray(i))for(var a=0;a<i.length;a++){var s=i[a];if(void 0===e[s]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:s},"","/"+a,null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(n=this.validateAll(e,i,[],["dependencies",o],r))return n}return null},h.prototype.validateCombinations=function(e,t,r){return this.validateAllOf(e,t,r)||this.validateAnyOf(e,t,r)||this.validateOneOf(e,t,r)||this.validateNot(e,t,r)||null},h.prototype.validateAllOf=function(e,t,r){if(void 0===t.allOf)return null;for(var n,o=0;o<t.allOf.length;o++){var i=t.allOf[o];if(n=this.validateAll(e,i,[],["allOf",o],r))return n}return null},h.prototype.validateAnyOf=function(e,t,r){if(void 0===t.anyOf)return null;var n,o,i=[],a=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var s=!0,u=0;u<t.anyOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.anyOf[u],l=this.errors.length,f=this.validateAll(e,c,[],["anyOf",u],r);if(null===f&&l===this.errors.length){if(this.errors=this.errors.slice(0,a),this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var p in this.unknownPropertyPaths)o[p]||(n[p]=!0);s=!1;continue}return null}f&&i.push(f.prefixWith(null,""+u).prefixWith(null,"anyOf"))}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),s?(i=i.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(v.ANY_OF_MISSING,{},"","/anyOf",i,e,t)):void 0},h.prototype.validateOneOf=function(e,t,r){if(void 0===t.oneOf)return null;var n,o,i=null,a=[],s=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var u=0;u<t.oneOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.oneOf[u],l=this.errors.length,f=this.validateAll(e,c,[],["oneOf",u],r);if(null===f&&l===this.errors.length){if(null!==i)return this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MULTIPLE,{index1:i,index2:u},"","/oneOf",null,e,t);if(i=u,this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var p in this.unknownPropertyPaths)o[p]||(n[p]=!0)}}else f&&a.push(f)}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===i?(a=a.concat(this.errors.slice(s)),this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MISSING,{},"","/oneOf",a,e,t)):(this.errors=this.errors.slice(0,s),null)},h.prototype.validateNot=function(e,t,r){if(void 0===t.not)return null;var n,o,i=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var a=this.validateAll(e,t.not,null,null,r),s=this.errors.slice(i);return this.errors=this.errors.slice(0,i),this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===a&&0===s.length?this.createError(v.NOT_PASSED,{},"","/not",null,e,t):null},h.prototype.validateHypermedia=function(e,t,n){if(!t.links)return null;for(var o,i=0;i<t.links.length;i++){var a=t.links[i];if("describedby"===a.rel){for(var s=new r(a.href),u=!0,c=0;c<s.varNames.length;c++)if(!(s.varNames[c]in e)){u=!1;break}if(u){var l=s.fillFromObject(e),f={$ref:l};if(o=this.validateAll(e,f,[],["links",i],n))return o}}}};var v={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,NUMBER_NOT_A_NUMBER:105,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},_={};for(var b in v)_[v[b]]=b;var g={INVALID_TYPE:"Invalid type: {type} (expected {expected})",ENUM_MISMATCH:"No enum match for: {value}",ANY_OF_MISSING:'Data does not match any schemas from "anyOf"',ONE_OF_MISSING:'Data does not match any schemas from "oneOf"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from "oneOf": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from "not"',NUMBER_MULTIPLE_OF:"Value {value} is not a multiple of {multipleOf}",NUMBER_MINIMUM:"Value {value} is less than minimum {minimum}",NUMBER_MINIMUM_EXCLUSIVE:"Value {value} is equal to exclusive minimum {minimum}",NUMBER_MAXIMUM:"Value {value} is greater than maximum {maximum}",NUMBER_MAXIMUM_EXCLUSIVE:"Value {value} is equal to exclusive maximum {maximum}",NUMBER_NOT_A_NUMBER:"Value {value} is not a valid number",STRING_LENGTH_SHORT:"String is too short ({length} chars), minimum {minimum}",STRING_LENGTH_LONG:"String is too long ({length} chars), maximum {maximum}",STRING_PATTERN:"String does not match pattern: {pattern}",OBJECT_PROPERTIES_MINIMUM:"Too few properties defined ({propertyCount}), minimum {minimum}",OBJECT_PROPERTIES_MAXIMUM:"Too many properties defined ({propertyCount}), maximum {maximum}",OBJECT_REQUIRED:"Missing required property: {key}",OBJECT_ADDITIONAL_PROPERTIES:"Additional properties not allowed",OBJECT_DEPENDENCY_KEY:"Dependency failed - key must exist: {missing} (due to key: {key})",ARRAY_LENGTH_SHORT:"Array is too short ({length}), minimum {minimum}",ARRAY_LENGTH_LONG:"Array is too long ({length}), maximum {maximum}",ARRAY_UNIQUE:"Array items are not unique (indices {match1} and {match2})",ARRAY_ADDITIONAL_ITEMS:"Additional items not allowed",FORMAT_CUSTOM:"Format validation failed ({message})",KEYWORD_CUSTOM:"Keyword failed: {key} ({message})",CIRCULAR_REFERENCE:"Circular $refs: {urls}",UNKNOWN_PROPERTY:"Unknown property (not in schema)"};c.prototype=Object.create(Error.prototype),c.prototype.constructor=c,c.prototype.name="ValidationError",c.prototype.prefixWith=function(e,t){if(null!==e&&(e=e.replace(/~/g,"~0").replace(/\//g,"~1"),this.dataPath="/"+e+this.dataPath),null!==t&&(t=t.replace(/~/g,"~0").replace(/\//g,"~1"),this.schemaPath="/"+t+this.schemaPath),null!==this.subErrors)for(var r=0;r<this.subErrors.length;r++)this.subErrors[r].prefixWith(e,t);return this};var E={},j=f();return j.addLanguage("en-gb",g),j.tv4=j,j})},{}],100:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.MessageFactory=void 0;var o=e("./message-factory/MessageFactory"),i=n(o);r.MessageFactory=i["default"]},{"./message-factory/MessageFactory":103}],101:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.MessageType=r.Message=void 0;var o=e("babel-runtime/core-js/object/get-prototype-of"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("babel-runtime/helpers/possibleConstructorReturn"),f=n(l),d=e("babel-runtime/helpers/inherits"),p=n(d),h=e("../reTHINKObject/RethinkObject.js"),y=n(h),m=r.Message=function(e){
function t(e,r,n,o,a){(0,s["default"])(this,t);var u=(0,f["default"])(this,(t.__proto__||(0,i["default"])(t)).call(this));return u.id=e,u.from=r,u.to=n,u.type=o,u.body=a,u}return(0,p["default"])(t,e),(0,c["default"])(t,[{key:"assertIdentity",value:function(e,t){if(!e||!t)throw new Error("message, token to be removed, and assertedIdentity must be provided");var r=this.body;return r.idToken=null,r.assertedIdentity=t,this.body=r,this}},{key:"addIdToken",value:function(e){if(!e)throw new Error("message, token to be added, must be provided");var t=this.body;return t.idToken=e,this.body=t,this}},{key:"addAccessToken",value:function(e){if(!e)throw new Error("message, token to be added, must be provided");var t=this.body;return t.accessToken=e,this.body=t,this}}]),t}(y["default"]);r.MessageType={CREATE:"create",READ:"read",UPDATE:"update",DELETE:"delete",SUBSCRIBE:"subscribe",UNSUBSCRIBE:"unsubscribe",RESPONSE:"response",FORWARD:"forward",EXECUTE:"execute"};r["default"]=m},{"../reTHINKObject/RethinkObject.js":104,"babel-runtime/core-js/object/get-prototype-of":5,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/helpers/inherits":12,"babel-runtime/helpers/possibleConstructorReturn":13}],102:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=(0,u["default"])(e).reduce(function(t,r){return t[e[r]]=r,t},{});return(0,a["default"])((0,u["default"])(e).reduce(function(t,r){return t[r]=e[r],t},function(e){return t[e]}))}Object.defineProperty(r,"__esModule",{value:!0}),r.UPDATE_OPERATION=r.ATTRIBUTE_TYPE=r.REASON_PHRASE=r.RESPONSE_CODE=r.ExecuteMessageBody=r.ResponseMessageBody=r.ForwardMessageBody=r.UpdateMessageBody=r.DeleteMessageBody=r.ReadMessageBody=r.CreateMessageBody=r.MessageBody=void 0;var i=e("babel-runtime/core-js/object/freeze"),a=n(i),s=e("babel-runtime/core-js/object/keys"),u=n(s),c=e("babel-runtime/core-js/object/get-prototype-of"),l=n(c),f=e("babel-runtime/helpers/classCallCheck"),d=n(f),p=e("babel-runtime/helpers/createClass"),h=n(p),y=e("babel-runtime/helpers/possibleConstructorReturn"),m=n(y),v=e("babel-runtime/helpers/inherits"),_=n(v);r.Enum=o;var b=e("../reTHINKObject/RethinkObject.js"),g=n(b),E=r.MessageBody=function(e){function t(e,r,n,o,i){(0,d["default"])(this,t);var a=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this));return a.idToken=e,a.accessToken=r,a.resource=n,a.schema=o,a.assertedIdentity=i,a}return(0,_["default"])(t,e),(0,h["default"])(t,[{key:"addVia",value:function(e){if(!e)throw new Error("via URL to be added, must be provided");return this.via=e,this}}]),t}(g["default"]),j=(r.CreateMessageBody=function(e){function t(e,r,n,o,i,a,s){if((0,d["default"])(this,t),!e)throw new Error("The value parameter is null");var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,n,o,i,a,s,a,s));return u.value=e,r&&(u.policy=r),u}return(0,_["default"])(t,e),t}(E),r.ReadMessageBody=function(e){function t(e,r,n,o,i,a,s,u){(0,d["default"])(this,t);var c=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return a&&(c.attribute=a),s&&(c.criteriaSyntax=s),u&&(c.criteria=u),c}return(0,_["default"])(t,e),t}(E),r.DeleteMessageBody=function(e){function t(e,r,n,o,i,a){if((0,d["default"])(this,t),n instanceof Array){var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,null,o,i));s.childrenResources=n}else var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return a&&(s.attribute=a),(0,m["default"])(s)}return(0,_["default"])(t,e),t}(E),r.UpdateMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,d["default"])(this,t);var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return u.attribute=a,u.value=s,u}return(0,_["default"])(t,e),(0,h["default"])(t,[{key:"addAttributeType",value:function(e){e&&(this.attributeType=e)}},{key:"addOperation",value:function(e){e&&(this.operation=e)}}]),t}(E),r.ForwardMessageBody=function(e){function t(e,r,n,o,i,a){(0,d["default"])(this,t);var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return s.message=a,s}return(0,_["default"])(t,e),t}(E),r.ResponseMessageBody=function(e){function t(e,r,n,o,i){(0,d["default"])(this,t);var a=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n));return o&&(a.code=o,a.description=j[o]),i&&(a.value=i),a}return(0,_["default"])(t,e),t}(E),r.ExecuteMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,d["default"])(this,t);var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return u.method=a,s&&(s instanceof Array?u.params=s:u.params=[s]),u}return(0,_["default"])(t,e),t}(E),r.RESPONSE_CODE=o({100:"100",101:"101",200:"200",201:"201",202:"202",203:"203",204:"204",205:"205",206:"206",300:"300",301:"301",302:"302",303:"303",304:"304",305:"305",307:"307",400:"400",401:"401",402:"402",403:"403",404:"404",405:"405",406:"406",407:"407",408:"408",409:"409",410:"410",411:"411",412:"412",413:"413",414:"414",415:"415",416:"416",417:"417",426:"426",500:"500",501:"501",502:"502",503:"503",504:"504",505:"505"}),r.REASON_PHRASE=o({100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",426:"Upgrade Required",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported"}));r.ATTRIBUTE_TYPE=o({OBJECT:"OBJECT",ARRAY:"ARRAY"}),r.UPDATE_OPERATION=o({ADD:"ADD",REMOVE:"REMOVE"});r["default"]=E},{"../reTHINKObject/RethinkObject.js":104,"babel-runtime/core-js/object/freeze":4,"babel-runtime/core-js/object/get-prototype-of":5,"babel-runtime/core-js/object/keys":6,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/helpers/inherits":12,"babel-runtime/helpers/possibleConstructorReturn":13}],103:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.IdGenerator=void 0;var o=e("babel-runtime/regenerator"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("./Message.js"),f=n(l),d=e("./MessageBody.js"),p=function(){function e(){(0,s["default"])(this,e),this.myGenerator=(new h).idMaker()}return(0,c["default"])(e,[{key:"createCreateMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to, and value of object to be created MUST be specified");var o=this.myGenerator.next().value,i=new d.CreateMessageBody(r,n,(void 0),(void 0),(void 0),(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.CREATE,i);return a}},{key:"createForwardMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to, and message to forward MUST be specified");var n=this.myGenerator.next().value,o=new d.ForwardMessageBody((void 0),(void 0),(void 0),(void 0),(void 0),r),i=new f["default"](n,e,t,l.MessageType.FORWARD,o);return i}},{key:"createDeleteMessageRequest",value:function(e,t,r,n){if(!e||!t)throw new Error("from and to parameters MUST be specified");var o=this.myGenerator.next().value,i=new d.DeleteMessageBody((void 0),(void 0),r,n,(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.DELETE,i);return a}},{key:"createUpdateMessageRequest",value:function(e,t,r,n,o){if(!e||!t||!r)throw new Error("from, and to and value MUST be specified");var i=this.myGenerator.next().value,a=new d.UpdateMessageBody((void 0),(void 0),n,(void 0),(void 0),o,r),s=new f["default"](i,e,t,l.MessageType.UPDATE,a);return s}},{key:"createReadMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to and the resource to read from MUST be specified");var o=this.myGenerator.next().value,i=new d.ReadMessageBody((void 0),(void 0),r,(void 0),(void 0),n,(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.READ,i);return a}},{key:"createSubscribeMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to and the resource to subscribe to MUST be specified");var n=this.myGenerator.next().value,o=new d.MessageBody((void 0),(void 0),r,(void 0),(void 0)),i=new f["default"](n,e,t,l.MessageType.SUBSCRIBE,o);return i}},{key:"createUnsubscribeMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to and the resource to subscribe to MUST be specified");var n=this.myGenerator.next().value,o=new d.MessageBody((void 0),(void 0),r,(void 0),(void 0)),i=new f["default"](n,e,t,l.MessageType.UNSUBSCRIBE,o);return i}},{key:"createExecuteMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to and the method to execute MUST be specified");var o=this.myGenerator.next().value,i=new d.ExecuteMessageBody((void 0),(void 0),(void 0),(void 0),(void 0),r,n),a=new f["default"](o,e,t,l.MessageType.EXECUTE,i);return a}},{key:"createMessageResponse",value:function(e,t,r,n){if(!t)throw new Error("response Code MUST be specified");var o=new d.ResponseMessageBody((void 0),(void 0),(void 0),t,r,n);return new f["default"](e.id,e.to,e.from,l.MessageType.RESPONSE,o)}},{key:"generateMessageResponse",value:function(e,t,r){if(!e||!t)throw new Error("message and response code MUST be specified");var n=e.body,o=n.idToken,i=n.accessToken,a=n.resource,s=new d.ResponseMessageBody(o,i,a,t,r),u=this.myGenerator.next().value;return new f["default"](u,e.to,e.from,l.MessageType.RESPONSE,s)}}]),e}(),h=r.IdGenerator=function(){function e(){(0,s["default"])(this,e)}return(0,c["default"])(e,[{key:"idMaker",value:i["default"].mark(function t(){var e;return i["default"].wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e=1;case 1:if(!(e<1e6)){t.next=6;break}return t.next=4,e++;case 4:t.next=1;break;case 6:case"end":return t.stop()}},t,this)})}]),e}();r["default"]=p},{"./Message.js":101,"./MessageBody.js":102,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/regenerator":15}],104:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.RethinkObject=void 0;var o=e("babel-runtime/core-js/json/stringify"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("tv4"),f=n(l),d=r.RethinkObject=function(){function e(){(0,s["default"])(this,e)}return(0,c["default"])(e,[{key:"validate",value:function(e){f["default"].addSchema(e.id,e);var t=f["default"].validateMultiple(JSON.parse((0,i["default"])(this)),e);return t.errors.forEach(function(e){delete e.stack}),(!t.valid||t.missing.length>0)&&(console.warn("Object validation "+(t.valid?"succeeded, but schema contained references:":"failed:"),(0,i["default"])(t,null,2)),console.log("Object:",(0,i["default"])(this,null,2))),t.valid}}]),e}();r["default"]=d},{"babel-runtime/core-js/json/stringify":1,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,tv4:99}]},{},[100])(100)});


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],417:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author micaelpedrosa@gmail.com
* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.
* Components that need a message system should receive this class as a dependency or extend it.
* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener
*/
var Bus = function () {
  /* private
  _msgId: number;
  _subscriptions: <url: MsgListener[]>
   _responseTimeOut: number
  _responseCallbacks: <url+id: (msg) => void>
   */

  function Bus() {
    (0, _classCallCheck3.default)(this, Bus);

    var _this = this;
    _this._msgId = 0;
    _this._subscriptions = {};

    _this._responseTimeOut = 5000; //default to 3s
    _this._responseCallbacks = {};

    _this._registerExternalListener();
  }

  /**
  * Register listener to receive message when "msg.to === url".
  * Special url "*" for default listener is accepted to intercept all messages.
  * @param {URL} url Address to intercept, tha is in the message "to"
  * @param {Listener} listener listener
  * @return {MsgListener} instance of MsgListener
  */


  (0, _createClass3.default)(Bus, [{
    key: 'addListener',
    value: function addListener(url, listener) {
      var _this = this;

      var item = new MsgListener(_this._subscriptions, url, listener);
      var itemList = _this._subscriptions[url];
      if (!itemList) {
        itemList = [];
        _this._subscriptions[url] = itemList;
      }

      itemList.push(item);
      return item;
    }

    /**
     * Manually add a response listener. Only one listener per message ID should exist.
     * ATENTION, there is no timeout for this listener.
     * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.
     * @param {URL} url Origin address of the message sent, "msg.from".
     * @param {number} msgId Message ID that is returned from the postMessage.
     * @param {Function} responseListener Callback function for the response
     */

  }, {
    key: 'addResponseListener',
    value: function addResponseListener(url, msgId, responseListener) {
      this._responseCallbacks[url + msgId] = responseListener;
    }

    /**
     * Remove the response listener.
     * @param {URL} url Origin address of the message sent, "msg.from".
     * @param {number} msgId  Message ID that is returned from the postMessage
     */

  }, {
    key: 'removeResponseListener',
    value: function removeResponseListener(url, msgId) {
      delete this._responseCallbacks[url + msgId];
    }

    /**
     * Remove all existent listeners for the URL
     * @param  {URL} url Address registered
     */

  }, {
    key: 'removeAllListenersOf',
    value: function removeAllListenersOf(url) {
      delete this._subscriptions[url];
    }

    /**
     * Helper method to bind listeners (in both directions) into other MiniBus target.
     * @param  {URL} outUrl Outbound URL, register listener for url in direction "this -> target"
     * @param  {URL} inUrl Inbound URL, register listener for url in direction "target -> this"
     * @param  {MiniBus} target The other target MiniBus
     * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.
     */

  }, {
    key: 'bind',
    value: function bind(outUrl, inUrl, target) {
      var _this2 = this;

      var _this = this;

      var thisListn = _this.addListener(outUrl, function (msg) {
        target.postMessage(msg);
      });

      var targetListn = target.addListener(inUrl, function (msg) {
        _this.postMessage(msg);
      });

      return {
        thisListener: thisListn,
        targetListener: targetListn,
        unbind: function unbind() {
          _this2.thisListener.remove();
          _this2.targetListener.remove();
        }
      };
    }

    //publish on default listeners

  }, {
    key: '_publishOnDefault',
    value: function _publishOnDefault(msg) {
      //is there any "*" (default) listeners?
      var itemList = this._subscriptions['*'];
      if (itemList) {
        this._publishOn(itemList, msg);
      }
    }

    //publish on a subscription list.

  }, {
    key: '_publishOn',
    value: function _publishOn(itemList, msg) {
      itemList.forEach(function (sub) {
        sub._callback(msg);
      });
    }
  }, {
    key: '_responseCallback',
    value: function _responseCallback(inMsg, responseCallback) {
      var _this = this;

      //automatic management of response handlers
      if (responseCallback) {
        (function () {
          var responseId = inMsg.from + inMsg.id;
          _this._responseCallbacks[responseId] = responseCallback;

          setTimeout(function () {
            var responseFun = _this._responseCallbacks[responseId];
            delete _this._responseCallbacks[responseId];

            if (responseFun) {
              var errorMsg = {
                id: inMsg.id, type: 'response',
                body: { code: 408, desc: 'Response timeout!', value: inMsg }
              };

              responseFun(errorMsg);
            }
          }, _this._responseTimeOut);
        })();
      }
    }
  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      if (msg.type === 'response') {
        var responseId = msg.to + msg.id;
        var responseFun = _this._responseCallbacks[responseId];

        //if it's a provisional response, don't delete response listener
        if (msg.body.code >= 200) {
          delete _this._responseCallbacks[responseId];
        }

        if (responseFun) {
          responseFun(msg);
          return true;
        }
      }

      return false;
    }

    //receive messages from external interface

  }, {
    key: '_onMessage',
    value: function _onMessage(msg) {
      var _this = this;

      if (!_this._onResponse(msg)) {
        var itemList = _this._subscriptions[msg.to];
        if (itemList) {
          _this._publishOn(itemList, msg);
        } else {
          _this._publishOnDefault(msg);
        }
      }
    }
  }, {
    key: '_genId',
    value: function _genId(inMsg) {
      //TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?
      //Global counter will not work, because there will be multiple MiniBus instances!
      //Per URL, can be a lot of data to maintain!
      //Maybe a counter per MiniBus instance. This is the assumed solution for now.
      if (!inMsg.id || inMsg.id === 0) {
        this._msgId++;
        inMsg.id = this._msgId;
      }
    }

    /**
    * Send messages to local listeners, or if not exists to external listeners.
    * It's has an optional mechanism for automatic management of response handlers.
    * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).
    * @param  {Message} msg Message to send. Message ID is automatically added to the message.
    * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.
    * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.
    */

  }, {
    key: 'postMessage',
    value: function postMessage(inMsg, responseCallback) {}

    /**
     * Not public available, used by the class extension implementation, to process messages from the public "postMessage" without a registered listener.
     * Used to send the message to an external interface, like a WebWorker, IFrame, etc.
     * @param  {Message.Message} msg Message
     */

  }, {
    key: '_onPostMessage',
    value: function _onPostMessage(msg) {} /*implementation will send message to external system*/

    /**
     * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.
     * This method is called one time in the constructor to register external listeners.
     * The implementation will probably call the "_onMessage" method to publish in the local listeners.
     * DO NOT call "postMessage", there is a danger that the message enters in a cycle!
     */

  }, {
    key: '_registerExternalListener',
    value: function _registerExternalListener() {/*implementation will register external listener and call "this._onMessage(msg)" */}
  }]);
  return Bus;
}();

var MsgListener = function () {
  /* private
  _subscriptions: <string: MsgListener[]>;
  _url: string;
  _callback: (msg) => void;
  */

  function MsgListener(subscriptions, url, callback) {
    (0, _classCallCheck3.default)(this, MsgListener);

    var _this = this;

    _this._subscriptions = subscriptions;
    _this._url = url;
    _this._callback = callback;
  }

  (0, _createClass3.default)(MsgListener, [{
    key: 'remove',


    /**
     * Remove this listener from the Bus
     */
    value: function remove() {
      var _this = this;

      var subs = _this._subscriptions[_this._url];
      if (subs) {
        var index = subs.indexOf(_this);
        subs.splice(index, 1);

        //if there are no listeners, remove the subscription entirely.
        if (subs.length === 0) {
          delete _this._subscriptions[_this._url];
        }
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return MsgListener;
}();

exports.default = Bus;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],418:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Bus2 = require('./Bus');

var _Bus3 = _interopRequireDefault(_Bus2);

var _Pipeline = require('./Pipeline');

var _Pipeline2 = _interopRequireDefault(_Pipeline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author micaelpedrosa@gmail.com
* Message BUS Interface is an extension of the Bus
* It doesn't support the default '*' listener, instead it uses the registry.resolve(..)
*/
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var MessageBus = function (_Bus) {
  (0, _inherits3.default)(MessageBus, _Bus);

  /* private
  _registry: Registry
  _forwards: { <from-url>: { fl: MsgListener, sandboxToUrls: Map(Sandbox, [to-url]), urlToSandbox: { to-url: Sandbox } } }
   _pipeline: Pipeline
  */

  //TODO: future optimization
  //1. message batch processing with setInterval
  //2. resolve default gateway/protostub with register.resolve

  function MessageBus(registry) {
    (0, _classCallCheck3.default)(this, MessageBus);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (MessageBus.__proto__ || (0, _getPrototypeOf2.default)(MessageBus)).call(this));

    _this2._registry = registry;
    _this2._forwards = {};

    _this2._pipeline = new _Pipeline2.default(function (error) {
      console.log('PIPELINE-ERROR: ', (0, _stringify2.default)(error));
    });
    return _this2;
  }

  (0, _createClass3.default)(MessageBus, [{
    key: 'postMessage',


    /**
     * Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.
     * External routing use the registry.resolve(..) method to decide the destination sandbox.
     * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}
     * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a "Timeout".
     * @return {number}                  the Message id
     */
    value: function postMessage(inMsg, responseCallback) {
      var _this = this;

      _this._genId(inMsg);

      _this._pipeline.process(inMsg, function (msg) {

        _this._responseCallback(inMsg, responseCallback);

        if (!_this._onResponse(msg)) {
          var itemList = _this._subscriptions[msg.to];
          if (itemList) {
            //do not publish on default address, because of loopback cycle
            _this._publishOn(itemList, msg);
          } else {
            //if there is no listener, send to external interface
            _this._onPostMessage(msg);
          }
        }
      });

      return inMsg.id;
    }

    /**
     * Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.
     * This means, even if there is a listener for the address, it will also send the message to the external routing.
     * @param {URL} from Publish address.
     */

  }, {
    key: 'addPublish',
    value: function addPublish(from) {
      var _this3 = this;

      var _this = this;

      //verify if forward exist
      var refCount = _this._forwards[from];
      if (!refCount) {
        var forwardListener = _this.addListener(from, function (msg) {
          console.log('MB-PUBLISH: ( ' + from + ' )');
          _this._onPostMessage(msg);
        });

        refCount = {
          counter: 0,
          fl: forwardListener,
          remove: function remove() {
            _this3.counter--;
            if (_this3.counter === 0) {
              _this3.fl.remove();
              delete _this._forwards[from];
            }
          }
        };

        _this._forwards[from] = refCount;
      }

      refCount.counter++;
      return refCount;
    }

    /**
     * Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.
     * @param {URL} from Message destination, it's actually the field "to" of the message.
     * @param {URL} to   Forward address.
     */

  }, {
    key: 'addForward',
    value: function addForward(from, to) {
      var _this = this;

      return _this.addListener(from, function (msg) {
        console.log('MB-FORWARD: ( ' + from + ' to ' + to + ' )');
        _this.forward(to, msg);
      });
    }

    /**
     * Just forward's a message to the forward address. Listeners should be available for the forward address.
     * @param  {URL} url Forward address.
     * @param  {Message} msg Message to forward
     */

  }, {
    key: 'forward',
    value: function forward(url, msg) {
      var _this = this;

      var itemList = _this._subscriptions[url];
      if (itemList) {
        _this._publishOn(itemList, msg);
      }
    }

    //default route, if there are no listeners available for a message destination.

  }, {
    key: '_onPostMessage',
    value: function _onPostMessage(msg) {
      var _this = this;

      //resolve external protostub...
      _this._registry.resolve(msg.to).then(function (route) {
        _this.forward(route, msg);
      }).catch(function (e) {
        console.log('RESOLVE-ERROR: ', e);
      });
    }
  }, {
    key: 'pipeline',
    get: function get() {
      return this._pipeline;
    }
  }]);
  return MessageBus;
}(_Bus3.default);

exports.default = MessageBus;
module.exports = exports['default'];

},{"./Bus":417,"./Pipeline":419,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],419:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author micaelpedrosa@gmail.com
* Sequencial processor of methods. Similar to how Sequential Promise's work, but better fit for message processing.
* Normal use for this, is to intercept all messages with configured handlers, and act accordingly.
*/
var Pipeline = function () {
  /* public
    handlers: ((PipeContext) => void)[]
    onFail: (error) => void
  */

  function Pipeline(_onFail) {
    (0, _classCallCheck3.default)(this, Pipeline);

    var _this = this;

    _this.handlers = [];
    _this.onFail = _onFail;
  }

  /**
   * Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.
   * @param  {Message} msg       Message for the queue
   * @param  {Callback} onDeliver When message is finished processing from all handlers, it will be delivered in this callback.
   */


  (0, _createClass3.default)(Pipeline, [{
    key: "process",
    value: function process(msg, onDeliver) {
      var _this = this;

      if (_this.handlers.length > 0) {
        var iter = new Iterator(_this.handlers);
        iter.next(new PipeContext(_this, iter, msg, onDeliver));
      } else {
        onDeliver(msg);
      }
    }
  }]);
  return Pipeline;
}();

/**
* @author micaelpedrosa@gmail.com
* Wrapper around a message that adds actions that can be fired by any interceptor handler.
* The Pipeline is asynchronous, so an handler should always call an action, the default one is "next()"
*/


var PipeContext = function () {
  /* private
    _inStop: boolean
     _pipeline: Pipeline
    _iter: Iterator
    _msg: Message
  */

  function PipeContext(pipeline, iter, msg, onDeliver) {
    (0, _classCallCheck3.default)(this, PipeContext);

    var _this = this;

    _this._inStop = false;

    _this._pipeline = pipeline;
    _this._iter = iter;
    _this._msg = msg;
    _this._onDeliver = onDeliver;
  }

  (0, _createClass3.default)(PipeContext, [{
    key: "next",


    /**
     * Proceed to the next interceptor handler, unless there was an error. If it's the last one, proceed to onDeliver handler.
     */
    value: function next() {
      var _this = this;

      if (!_this._inStop) {
        if (_this._iter.hasNext) {
          _this._iter.next(_this);
        } else {
          _this._onDeliver(_this._msg);
        }
      }
    }

    /**
     * Proceed directly to the onDeliver handler, unless there was an error.
     */

  }, {
    key: "deliver",
    value: function deliver() {
      var _this = this;
      if (!_this._inStop) {
        _this._inStop = true;
        _this._onDeliver(_this._msg);
      }
    }

    /**
     * Mark the context with an error and proceed to the onFail handler.
     * @param  {[type]} error [description]
     */

  }, {
    key: "fail",
    value: function fail(error) {
      var _this = this;

      if (!_this._inStop) {
        _this._inStop = true;
        if (_this._pipeline.onFail) {
          _this._pipeline.onFail(error);
        }
      }
    }
  }, {
    key: "pipeline",
    get: function get() {
      return this._pipeline;
    }
  }, {
    key: "msg",
    get: function get() {
      return this._msg;
    },
    set: function set(inMsg) {
      this._msg = inMsg;
    }
  }]);
  return PipeContext;
}();

var Iterator = function () {
  /* private
    _index: number
    _array: []
  */

  function Iterator(array) {
    (0, _classCallCheck3.default)(this, Iterator);

    this._index = -1;
    this._array = array;
  }

  (0, _createClass3.default)(Iterator, [{
    key: "hasNext",
    get: function get() {
      return this._index < this._array.length - 1;
    }
  }, {
    key: "next",
    get: function get() {
      this._index++;
      return this._array[this._index];
    }
  }]);
  return Iterator;
}();

exports.default = Pipeline;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],420:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Class with the cryptographic functions for the authentication protocol
*
*/
var Crypto = function () {
  function Crypto() {
    (0, _classCallCheck3.default)(this, Crypto);

    var _this = this;
  }

  /**
  * encode a byteArray value in base 64 encode
  * @param   {byteArray}    value    byteArray value
  * @return  {string}   encoded value
  */


  (0, _createClass3.default)(Crypto, [{
    key: 'encode',
    value: function encode(value) {
      return btoa(value);
    }

    /**
    * decode a base64 value in a new Uint8Array
    * @param   {string}    value    value encoded in base 64
    * @return  {byteArray} decodedValue
    */

  }, {
    key: 'decode',
    value: function decode(value) {
      return new Uint8Array(JSON.parse('[' + atob(value) + ']'));
    }
  }, {
    key: 'encryptRSA',
    value: function encryptRSA(pubKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAencryptKey(new Uint8Array(pubKey)).then(function (publicKey) {

          crypto.subtle.encrypt({
            name: 'RSA-OAEP'
          }, publicKey, //from generateKey or importKey above
          data //ArrayBuffer of data you want to encrypt
          ).then(function (encrypted) {
            //returns an ArrayBuffer containing the encrypted data
            //console.log('crypto-encryptRSA', new Uint8Array(encrypted));
            resolve(new Uint8Array(encrypted));
          }).catch(function (err) {
            console.log('crypto-encryptRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'decryptRSA',
    value: function decryptRSA(privKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAdecryptKey(privKey).then(function (privateKey) {

          crypto.subtle.decrypt({
            name: 'RSA-OAEP'
          }, privateKey, //from generateKey or importKey above
          data //ArrayBuffer of the data
          ).then(function (decrypted) {

            var decryptedData = new Uint8Array(decrypted);

            //console.log('crypto-decryptRSA', decryptedData);
            resolve(decryptedData);
          }).catch(function (err) {
            console.log('crypto-decryptRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'signRSA',
    value: function signRSA(privKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAsignKey(privKey).then(function (privateKey) {

          crypto.subtle.sign({
            name: 'RSASSA-PKCS1-v1_5'
          }, privateKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to sign
          ).then(function (signature) {
            //returns an ArrayBuffer containing the signature
            //console.log('crypto-signRSA', new Uint8Array(signature));
            resolve(new Uint8Array(signature));
          }).catch(function (err) {
            console.log('crypto-signRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'verifyRSA',
    value: function verifyRSA(pubKey, data, signature) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAverifyKey(pubKey).then(function (publicKey) {

          crypto.subtle.verify({
            name: 'RSASSA-PKCS1-v1_5'
          }, publicKey, //from generateKey or importKey above
          signature, //ArrayBuffer of the signature
          _this._utf8Encode(data) //ArrayBuffer of the data
          ).then(function (isvalid) {
            //returns a boolean on whether the signature is true or not
            //console.log('crypto-verifyRSA', isvalid);
            resolve(isvalid);
          }).catch(function (err) {
            console.log('crypto-verifyRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'encryptAES',
    value: function encryptAES(key, data, iv) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importAESkey(key).then(function (aesKey) {

          crypto.subtle.encrypt({
            name: 'AES-CBC',
            //Don't re-use initialization vectors!
            //Always generate a new iv every time your encrypt!
            iv: iv
          }, aesKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to encrypt
          ).then(function (encrypted) {
            //returns an ArrayBuffer containing the encrypted data
            //console.log('crypto-encryptAES', new Uint8Array(encrypted));
            resolve(new Uint8Array(encrypted));
          }).catch(function (err) {
            console.log('crypto-encryptAES', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'decryptAES',
    value: function decryptAES(key, data, iv) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importAESkey(key).then(function (aesKey) {

          crypto.subtle.decrypt({
            name: 'AES-CBC',
            iv: iv
          }, aesKey, //from generateKey or importKey above
          data //ArrayBuffer of the data
          ).then(function (decrypted) {

            var decodedData = _this._utf8Decode(new Uint8Array(decrypted));
            //console.log('crypto-decryptAES', decodedData);
            resolve(decodedData);
          }).catch(function (err) {
            console.log('crypto-decryptAES', err);
            reject(err);
          });
        });
      });
    }

    /**
    * creates a hash using the HMAC algorithm
    * @param  {byteArray}    key       key to be used in the hmac
    * @param  {string}      data       information to be hashed
    * @return  {byteArray}   signature  resulting hash
    */

  }, {
    key: 'hashHMAC',
    value: function hashHMAC(key, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._importHMACkey(key).then(function (hmacKey) {

          crypto.subtle.sign({
            name: 'HMAC'
          }, hmacKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to sign
          ).then(function (signature) {
            //console.log('crypto-hashHMAC', signature);

            //returns an ArrayBuffer containing the signature
            resolve(new Uint8Array(signature));
          }).catch(function (err) {
            console.log('crypto-hashHMAC', err);
            reject(err);
          });
        });
      });
    }

    /**
    * verifies an hash using the HMAC algorithm
    * @param  {byteArray}    key       key to be used in the hmac
    * @param  {string}      data       information to be hashed to compare
    * @param  {byteArray}  signature   hash to compare with the received data
    * @return  {boolean}   isvalid     boolean saying if the data corresponds to the hash received
    */

  }, {
    key: 'verifyHMAC',
    value: function verifyHMAC(key, data, signature) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._importHMACkey(key).then(function (hmacKey) {

          crypto.subtle.verify({
            name: 'HMAC'
          }, hmacKey, //from generateKey or importKey above
          signature, //ArrayBuffer of the signature
          _this._utf8Encode(data) //ArrayBuffer of the data
          ).then(function (isvalid) {
            //returns a boolean on whether the signature is true or not
            //console.log('crypto-verifyHMAC', isvalid);
            isvalid ? resolve(isvalid) : reject(isvalid);
          }).catch(function (err) {
            console.error('crypto-verifyHMAC', err);
            reject(err);
          });
        });
      });
    }

    /**
    * generates a RSA public/private key pair with a modulus length of 2048 bits
    * @return  {JSON}   keyPair    json containing the public and private keys
    */

  }, {
    key: 'generateRSAKeyPair',
    value: function generateRSAKeyPair() {
      var _this = this;
      var keyPair = {};

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.generateKey({
          name: 'RSA-PSS',
          modulusLength: 2048, //can be 1024, 2048, or 4096
          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['sign', 'verify'] //can be any combination of 'sign' and 'verify'

        ).then(function (key) {
          //returns a keypair object
          //console.log(key);

          crypto.subtle.exportKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
          key.publicKey //can be a publicKey or privateKey, as long as extractable was true
          ).then(function (publicKey) {
            //returns the exported key data
            keyPair.public = new Uint8Array(publicKey);
            return crypto.subtle.exportKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
            key.privateKey //can be a publicKey or privateKey, as long as extractable was true
            );
          }).then(function (privateKey) {
            keyPair.private = new Uint8Array(privateKey);
            //console.log('crypto-generateRSAKeyPair', keyPair);

            resolve(keyPair);
          }).catch(function (err) {
            console.error(err);
            reject(err);
          });
        }).catch(function (err) {
          console.error(err);
          reject(err);
        });
      });
    }

    /**
    * Generates a 128 bit random value.
    * @return {byteArray}  array    random value
    */

  }, {
    key: 'generateIV',
    value: function generateIV() {
      var _this = this;

      var array = new Uint8Array(16);
      crypto.getRandomValues(array);

      return array;
    }

    /**
    * Generates a 256 bit random value. 32 bits are extrated from the machine time,
    * the remaining are generated randomly
    * @return {byteArray}  array    random value
    */

  }, {
    key: 'generateRandom',
    value: function generateRandom() {
      var _this = this;

      var array = new Uint8Array(32);
      crypto.getRandomValues(array);

      var date = Date.now();
      var dateEncoded = _this._utf8Encode(date);

      //extract the least significant 4 bytes in the date
      var finalDate = dateEncoded.slice(dateEncoded.length - 4, dateEncoded.length);

      // add in the first 4 bytes of the array the bytes extracted previously;
      for (var i = 0; i < 4; i++) {
        array[i] = finalDate[i];
      }
      return array;
    }

    /**
    * generates a premaster secret (PMS) of 48 bytes (384 bits) randomly
    * @return {byteArray}  array    premaster secret key
    */

  }, {
    key: 'generatePMS',
    value: function generatePMS() {
      var _this = this;

      var array = new Uint8Array(48);
      crypto.getRandomValues(array);
      return array;
    }

    /**
    * generates a masterKey secret (PMS) of 48 bytes (384 bits) using the premaster secret and
    * two randoms
    * @return {byteArray}  array    master secret key with 48 bytes
    */

  }, {
    key: 'generateMasterSecret',
    value: function generateMasterSecret(hmacKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var key = new Uint8Array(48);
        var seed = data;

        _this._digest(hmacKey).then(function (digestedKey) {

          _this.hashHMAC(digestedKey, seed).then(function (keypart0) {

            //copy the first 32 bytes into the key
            for (var i = 0; i < 32; i++) {
              key[i] = keypart0[i];
            }
            return _this.hashHMAC(digestedKey, seed + keypart0);
          }).then(function (keypart1) {

            //copy the first 16 bytes to the key remaining 16 bytes
            for (var i = 0; i < 16; i++) {
              key[i + 32] = keypart1[i];
            }
            //console.log('crypto-generateMasterSecret', key);
            resolve(key);
          }).catch(function (err) {
            console.log('crypto-generateMasterSecret', err);
            reject(err);
          });
        });
      });
    }

    /**
    * generates both users MAC and encryption keys. generate as output an array
    * with 4 byteArray each with 32 bytes
    * @param  {byteArray}        secret       secret to be used in the HMAC function
    * @param  {String}           data         information to be used as seed
    * @return {Array<byteArray>} key          array with the information to generate keys
    */

  }, {
    key: 'generateKeys',
    value: function generateKeys(hmacKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var key = [];
        var seed = data;

        // iterate 4 times to obtain a 1024 key size
        _this.hashHMAC(hmacKey, seed).then(function (keypart0) {
          key.push(keypart0);
          return _this.hashHMAC(hmacKey, seed + keypart0);
        }).then(function (keypart1) {
          key.push(keypart1);
          return _this.hashHMAC(hmacKey, seed + keypart1);
        }).then(function (keypart2) {
          key.push(keypart2);
          return _this.hashHMAC(hmacKey, seed + keypart2);
        }).then(function (keypart3) {
          key.push(keypart3);

          //console.log('crypto-generateKeys', key);
          resolve(key);
        }).catch(function (err) {
          //console.log('crypto-generateKeys', err);
          reject(err);
        });

        //console.log(hmacKey, data);
      });
    }
  }, {
    key: '_importRSAsignKey',
    value: function _importRSAsignKey(privKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        privKey, { //these are the algorithm options
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['sign'] //'verify' for public key import, 'sign' for private key imports
        ).then(function (privateKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAsignKey', privateKey);
          resolve(privateKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAsignKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAverifyKey',
    value: function _importRSAverifyKey(pubKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        pubKey, { //these are the algorithm options
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['verify'] //'verify' for public key import, 'sign' for private key imports
        ).then(function (publicKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAverifyKey', publicKey);
          resolve(publicKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAverifyKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAencryptKey',
    value: function _importRSAencryptKey(pubKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        pubKey, { //these are the algorithm options
          name: 'RSA-OAEP',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['encrypt'] //'encrypt' or 'wrapKey' for public key import or
        //'decrypt' or 'unwrapKey' for private key imports
        ).then(function (publicKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAencryptKey', publicKey);
          resolve(publicKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAencryptKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAdecryptKey',
    value: function _importRSAdecryptKey(privKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        privKey, { //these are the algorithm options
          name: 'RSA-OAEP',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['decrypt'] //'encrypt' or 'wrapKey' for public key import or
        //'decrypt' or 'unwrapKey' for private key imports
        ).then(function (privateKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAdecryptKey', privateKey);
          resolve(privateKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAdecryptKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: 'concatPMSwithRandoms',
    value: function concatPMSwithRandoms(pms, toRandom, fromRandom) {
      var _this = this;

      var finalKey = new Uint8Array(pms.length + toRandom.length + fromRandom.length);

      // add PremasterKey
      for (var i = 0; i < pms.length; i++) {
        finalKey[i] = pms[i];
      }

      //add to random
      for (var _i = 0; _i < toRandom.length; _i++) {
        finalKey[_i + pms.length] = pms[_i];
      }

      //add from random
      for (var _i2 = 0; _i2 < fromRandom.length; _i2++) {
        finalKey[_i2 + pms.length + toRandom.length] = pms[_i2];
      }

      return finalKey;
    }
  }, {
    key: '_generate256bitKey',
    value: function _generate256bitKey() {
      var array = new Uint8Array(32);
      crypto.getRandomValues(array);

      return array;
    }

    /**
    * imports the secret to the HMAC function
    * @param  {byteArray}   arrayBuffer     bytes to import as key
    * @return {JSON}       key              key ready to be used in the HMAC cryptographic function
    */

  }, {
    key: '_importHMACkey',
    value: function _importHMACkey(arrayBuffer) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._digest(arrayBuffer).then(function (key) {

          crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'
          key, { //this is the algorithm options
            name: 'HMAC',
            hash: { name: 'SHA-256' }, //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
            length: 256 //optional, if you want your key length to differ from the hash function's block length
          }, true, //whether the key is extractable (i.e. can be used in exportKey)
          ['sign', 'verify'] //can be any combination of 'sign' and 'verify'
          ).then(function (key) {
            //returns the symmetric key
            //console.log('crypto-_importHMACkey', key);
            resolve(key);
          }).catch(function (err) {
            reject(err);
          });
        });
      });
    }
  }, {
    key: '_digest',
    value: function _digest(value) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.digest({
          name: 'SHA-256'
        }, value //The data you want to hash as an ArrayBuffer
        ).then(function (hash) {
          //returns the hash as an ArrayBuffer
          //console.log('crypto-digest', new Uint8Array(hash));
          resolve(new Uint8Array(hash));
        }).catch(function (err) {
          console.error(err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importAESkey',
    value: function _importAESkey(arrayBuffer) {
      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'
        arrayBuffer, { //this is the algorithm options
          name: 'AES-CBC'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['encrypt', 'decrypt'] //can be 'encrypt', 'decrypt', 'wrapKey', or 'unwrapKey'
        ).then(function (key) {
          //returns the symmetric key
          //console.log('crypto-importAESkey', key);
          resolve(key);
        }).catch(function (err) {
          console.error('crypto-importAESkey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_utf8Encode',
    value: function _utf8Encode(s) {
      return new TextEncoder('utf-8').encode(s);
    }
  }, {
    key: '_utf8Decode',
    value: function _utf8Decode(s) {
      return new TextDecoder('utf-8').decode(s);
    }
  }]);
  return Crypto;
}();

exports.default = Crypto;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],421:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* fake class for the gui to select the identity,
* TODO replace with the proper identity GUI
*
*/
var GuiFake = function GuiFake(url, messageBus) {
  (0, _classCallCheck3.default)(this, GuiFake);

  var _this = this;

  _this._url = url;
  _this._waitTime = 10000;
  _this._messageBus = messageBus;

  _this._messageBus.addListener(_this._url, function (msg) {

    var identities = msg.body.value.identities;
    var idps = msg.body.value.idps;

    var value = void 0;

    if (identities[0] !== undefined) {
      value = { type: 'identity', value: identities[0], code: 200 };
    } else {
      value = { type: 'idp', value: idps[0], code: 200 };
    }

    var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };

    // to test on the identity side the listener without the timeout
    // can represent the time the user takes to choose and identity
    if (msg.body.value === 'wait') {

      setTimeout(function () {
        _this._messageBus.postMessage(replyMsg);
      }, _this._waitTime);
    } else {
      _this._messageBus.postMessage(replyMsg);
    }
  });
};

exports.default = GuiFake;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14}],422:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The Identity Data Model is used to model the reTHINK User entity. The Identity data model is handled by Identity Management functionality.
*
*/
var Identity = function () {
  function Identity(guid, type) {
    (0, _classCallCheck3.default)(this, Identity);

    var _this = this;

    _this.guid = guid;
    _this.type = type;
    _this.identifiersList = {};
  }

  (0, _createClass3.default)(Identity, [{
    key: 'addIdentity',
    value: function addIdentity(identifier) {
      var _this = this;
      var identityInformation = {
        idAssertion: '',
        serviceAddress: '',
        authenticationData: '',
        authorisationData: '',
        userProfile: ''
      };
      _this.identifiersList[identifier] = identityInformation;
    }
  }, {
    key: 'addIdAssertion',
    value: function addIdAssertion(identifier, assertion, idp, scope) {
      var _this = this;

      var newIdAssertion = new IdAssertion(assertion, idp, scope);

      _this.idAssertionList.push(newIdAssertion);
    }
  }]);
  return Identity;
}();

var IdAssertion = function IdAssertion(assertion, idp, scope) {
  (0, _classCallCheck3.default)(this, IdAssertion);

  var _this = this;

  _this.assertion = assertion;
  _this.idp = idp;
  _this.scope = scope;
};

var IdValidation = function () {
  function IdValidation(identity, contents) {
    (0, _classCallCheck3.default)(this, IdValidation);

    var _this = this;
    _this.identity = identity;
    _this.contents = contents;
  }

  (0, _createClass3.default)(IdValidation, [{
    key: 'validates',
    value: function validates(identity, contents) {
      //TODO implement the logic

    }
  }]);
  return IdValidation;
}();

exports.default = Identity;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],423:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils.js');

var _Identity = require('./Identity');

var _Identity2 = _interopRequireDefault(_Identity);

var _Crypto = require('./Crypto');

var _Crypto2 = _interopRequireDefault(_Crypto);

var _GuiFake = require('./GuiFake');

var _GuiFake2 = _interopRequireDefault(_GuiFake);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
*
* The Identity Module (Id Module) is the component responsible for handling the
* user identity and the association of this identity with the Hyperty instances,
* in order to make Hyperty instances identifiable. The identity in the reTHINK project
* is not fixed to a unique Identity Service Provider, but obtained through several
* different Identity sources. With this approach, the Id Module provides to the user the
* option to choose the preferred method for authentication.
* This module will thus able to support multiple Identity acquisition methods,
* such as OpenID connect 1.0, Kerberos System, or authentication through smart cards.
* For example, a user with a Google account can use the Google as an Identity Provider to provide Identity Tokens,
*  which can be used by the Identity Module to associate it with a Hyperty instance.
*
* The Identity Module uses a node package, the HelloJS, which is a client-side JavaScript API for authentication
* that facilitates the requests for the OpenID connect protocol. This method allows for some abstraction
* when making requests for different Identity Providers, such as OpenID connect used by Google, Facebook, Microsoft, for example.
*
* When a request for a user identity is made using the method loginWithRP(identifier, scope),
* this method will analyse the Identity Provider chosen to obtain an identity and will use the HelloJS node package
* with the selected Identity Provider and identity scope. After the HelloJS request for an Access Token
* to the Identity Providers, the user will be prompted to authenticate towards the Identity Provider.
* Upon receiving the Access Token, this token is validated with a RESTful web service request to an endpoint
* on the Identity Provider Authorization Server, and after the validation is done,
* an ID token is obtained with the information according to the scope required.
* This ID token is then preserved in this module that can obtained through the getIdentities()
* and is passed as return value of the loginWithRP function. The methods generateAssertion and validateAssertion have not yet been developed.
*
*/
var IdentityModule = function () {

  /**
  * This is the constructor to initialise the Identity Module it does not require any input.
  */
  function IdentityModule(runtimeURL) {
    (0, _classCallCheck3.default)(this, IdentityModule);

    var _this = this;

    if (!runtimeURL) throw new Error('runtimeURL is missing.');

    _this._runtimeURL = runtimeURL;
    _this._idmURL = _this._runtimeURL + '/idm';
    _this._guiURL = _this._runtimeURL + '/identity-gui';

    _this._domain = (0, _utils.divideURL)(_this._runtimeURL).domain;

    //to store items with this format: {identity: identityURL, token: tokenID}
    _this.identities = [];
    _this.emailsList = [];
    var newIdentity = new _Identity2.default('guid', 'HUMAN');
    _this.identity = newIdentity;
    _this.crypto = new _Crypto2.default();

    //stores the association of the dataObject and the Hyperty registered within
    _this.dataObjectsIdentity = {};

    // hashTable to store all the crypto information between two hyperties
    _this.chatKeys = {};

    // hashTable to store the symmetric keys to be used in the chat group
    _this.dataObjectSessionKeys = {};

    //failsafe to enable/disable all the criptographic functions
    _this.isToUseEncryption = true;

    // variable to know if the GUI is deployed to choose the identity. if the real GUI is not deployed, a fake gui is deployed instead.
    _this.guiDeployed = false;

    // verification of nodeJS, and in case it is nodeJS then disable encryption
    // TODO improve later, this exists because the crypto lib uses browser cryptographic methods
    //_this.isToUseEncryption = (window) ? true : false;
  }

  /**
  * return the messageBus in this Registry
  * @param {MessageBus}           messageBus
  */


  (0, _createClass3.default)(IdentityModule, [{
    key: 'getIdentities',


    /**
    * Function to return all the identities registered within a session by a user.
    * These identities are returned in an array containing a JSON package for each user identity.
    * @return {Array<Identities>}         Identities
    */
    value: function getIdentities() {
      var _this = this;
      return _this.identities;
    }

    /**
    * gets all the information from a given userURL
    * @param  {String}  userURL     user url
    * @return {JSON}    identity    identity bundle from the userURL
    */

  }, {
    key: 'getIdentity',
    value: function getIdentity(userURL) {
      var _this = this;

      for (var index in _this.identities) {

        var identity = _this.identities[index];
        if (identity.identity === userURL) {
          return identity;
        }
      }

      throw 'identity not found';
    }
  }, {
    key: 'deployGUI',
    value: function deployGUI() {
      var _this = this;
      _this.guiDeployed = true;
    }
  }, {
    key: 'getIdentityOfHyperty',
    value: function getIdentityOfHyperty(hypertyURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var splitURL = hypertyURL.split('://');
        if (splitURL[0] !== 'hyperty') {
          _this._getHypertyFromDataObject(hypertyURL).then(function (returnedHypertyURL) {
            var userURL = _this.registry.getHypertyOwner(returnedHypertyURL);
            if (userURL) {

              for (var index in _this.identities) {
                var identity = _this.identities[index];
                if (identity.identity === userURL) {
                  return resolve(identity.messageInfo);
                }
              }
            } else {
              return reject('no identity was found ');
            }
          });
        } else {
          var userURL = _this.registry.getHypertyOwner(hypertyURL);
          if (userURL) {

            for (var index in _this.identities) {
              var identity = _this.identities[index];
              if (identity.identity === userURL) {
                return resolve(identity.messageInfo);
              }
            }
          } else {
            return reject('no identity was found.');
          }
        }
      });
    }
  }, {
    key: 'getIdentitiesToChoose',
    value: function getIdentitiesToChoose() {
      var _this = this;
      var identities = _this.emailsList;
      var idps = ['google.com', 'microsoft.com', 'orange.fr'];

      return { identities: identities, idps: idps };
    }

    /**
    * Function to return all the users URLs registered within a session
    * These users URLs are returned in an array of strings.
    * @param  {Boolean}  emailFormat (Optional)   boolean to indicate to return in email format
    * @return {Array<String>}         users
    */

  }, {
    key: 'getUsersIDs',
    value: function getUsersIDs(emailFormat) {
      var _this = this;
      var users = [];

      //if request comes with the emailFormat option, then convert url to email format
      var converter = emailFormat ? _utils.getUserEmailFromURL : function (value) {
        return value;
      };

      for (var index in _this.identities) {
        var identity = _this.identities[index];
        users.push(converter(identity.identity));
      }
      return users;
    }

    /**
    * Function to return the selected Identity within a session
    * @return {Identity}        identity         identity
    */

  }, {
    key: 'getCurrentIdentity',
    value: function getCurrentIdentity() {
      var _this = this;
      return _this.currentIdentity;
    }

    /**
    * Function to set the current Identity with a given Identity
    * @param {Identity}        identity         identity
    */

  }, {
    key: 'setCurrentIdentity',
    value: function setCurrentIdentity(identity) {
      var _this = this;
      _this.currentIdentity = identity;
    }

    /**
    * Function to remove an identity from the Identities array
    * @param {String}    userID      userID
    */

  }, {
    key: 'deleteIdentity',
    value: function deleteIdentity(userID) {
      var _this = this;

      var userURL = (0, _utils.convertToUserURL)(userID);

      for (var identity in _this.identities) {
        if (_this.identities[identity].identity === userURL) {
          _this.identities.splice(identity, 1);
        }
      }
    }

    /**
    * Function to unregister an identity from the emailsList array and not show in to the GUI
    * @param {String}    email      email
    */

  }, {
    key: 'unregisterIdentity',
    value: function unregisterIdentity(email) {
      var _this = this;

      for (var e in _this.emailsList) {
        if (_this.emailsList[e] === email) {
          _this.emailsList.splice(e, 1);
        }
      }
    }

    /**
    * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL
    * @param {String}     idpDomain     idpDomain (Optional)
    */

  }, {
    key: '_resolveDomain',
    value: function _resolveDomain(idpDomain) {
      if (!idpDomain) {
        return 'domain-idp://google.com';
      } else {
        return 'domain-idp://' + idpDomain;
      }
    }

    /**
    * Function to login a user within the session, it will start the process to obtain an Identity from a user, including the request for an identity Assertion. The function returns a promise with the token received by the idpProxy.
    *
    * @param  {Identifier}      identifier      identifier
    * @param  {Scope}           scope           scope
    * @return {Promise}         Promise         IDToken containing the user information
    */

  }, {
    key: 'loginWithRP',
    value: function loginWithRP(identifier, scope) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //TODO remove this verification and refactor this part
        _this.currentIdentity = undefined;
        _this.getIdentityAssertion('identifier', 'origin', 'hint', identifier).then(function (value) {
          console.log('loginWithRP');
          resolve(value);
        }, function (err) {
          console.log('loginWithRP err');
          reject(err);
        });
      });
    }

    /**
    * Function that sends a request to the GUI using messages. Sends all identities registered and
    * the Idps supported, and return the identity/idp received by the GUI
    * @param {Array<identity>}  identities      list of identitiies
    * @param {Array<String>}    idps            list of idps to authenticate
    * @return {Promise}         returns a chosen identity or idp
    */

  }, {
    key: 'requestIdentityToGUI',
    value: function requestIdentityToGUI(identities, idps) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //condition to check if the real GUI is deployed. If not, deploys a fake gui
        if (_this.guiDeployed === false) {

          var guiFake = new _GuiFake2.default(_this._guiURL, _this._messageBus);
          _this.guiFake = guiFake;
          _this.guiDeployed = true;
        }

        var message = { type: 'create', to: _this._guiURL, from: _this._idmURL,
          body: { value: { identities: identities, idps: idps } } };

        var id = _this._messageBus.postMessage(message);

        //add listener without timout
        _this._messageBus.addResponseListener(_this._idmURL, id, function (msg) {
          _this._messageBus.removeResponseListener(_this._idmURL, id);

          if (msg.body.code === 200) {
            var selectedIdentity = msg.body;

            console.log('selectedIdentity: ', selectedIdentity.value);
            resolve(selectedIdentity);
          } else {
            reject('error on requesting an identity to the GUI');
          }
        });
      });
    }
  }, {
    key: 'openPopup',
    value: function openPopup(urlreceived) {

      return new _promise2.default(function (resolve, reject) {

        var win = window.open(urlreceived, 'openIDrequest', 'width=800, height=600');
        if (window.cordova) {
          win.addEventListener('loadstart', function (e) {
            var url = e.url;
            var code = /\&code=(.+)$/.exec(url);
            var error = /\&error=(.+)$/.exec(url);

            if (code || error) {
              win.close();
              resolve(url);
            }
          });
        } else {
          (function () {
            var pollTimer = setInterval(function () {
              try {
                if (win.closed) {
                  reject('Some error occured when trying to get identity.');
                  clearInterval(pollTimer);
                }

                if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {
                  window.clearInterval(pollTimer);
                  var url = win.document.URL;

                  win.close();
                  resolve(url);
                }
              } catch (e) {
                //console.log(e);
              }
            }, 500);
          })();
        }
      });
    }

    /**
    * Function that fetch an identityAssertion from a user.
    *
    * @return {IdAssertion}              IdAssertion
    */

  }, {
    key: 'getIdentityAssertion',
    value: function getIdentityAssertion(identifier, origin, usernameHint, idpDomain) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //CHECK whether is browser environment or nodejs
        //if it is browser, then create a fake identity

        try {
          if (window) {

            var identitiesInfo = _this.getIdentitiesToChoose();

            _this.requestIdentityToGUI(identitiesInfo.identities, identitiesInfo.idps).then(function (value) {

              if (value.type === 'identity') {

                var chosenID = (0, _utils.getUserURLFromEmail)(value.value);

                // returns the identity info from the chosen id
                for (var i in _this.identities) {
                  if (_this.identities[i].identity === chosenID) {
                    return resolve(_this.identities[i].messageInfo);
                  }
                }
                reject('no identity was found .');
              } else if (value.type === 'idp') {

                _this.callGenerateMethods(value.value, origin).then(function (value) {
                  resolve(value);
                }, function (err) {
                  reject(err);
                });
              } else {
                reject('error on GUI received message.');
              }
            });
          }
        } catch (error) {

          if (_this.currentIdentity !== undefined) {
            //TODO verify whether the token is still valid or not.
            // should be needed to make further requests, to obtain a valid token
            return resolve(_this.currentIdentity);
          } else {
            console.log('getIdentityAssertion for nodejs');
            var randomNumber = Math.floor(Math.random() * 10000 + 1);
            var identityBundle = {
              assertion: 'assertion',
              idp: 'nodejs',
              userProfile: {
                avatar: 'https://lh3.googleusercontent.com/-WaCrjVMMV-Q/AAAAAAAAAAI/AAAAAAAAAAs/8OlVqCpSB9c/photo.jpg',
                cn: 'test nodejs',
                username: 'nodejs-' + randomNumber + '@nodejs.com',
                userURL: 'user://nodejs.com/nodejs-' + randomNumber
              } };
            _this.currentIdentity = identityBundle;
            _this.identities.push(identityBundle);
            return resolve(identityBundle);
          }
        }
      });
    }
  }, {
    key: 'callGenerateMethods',
    value: function callGenerateMethods(idp, origin) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var publicKey = void 0;
        var userkeyPair = void 0;

        //generates the RSA key pair
        _this.crypto.generateRSAKeyPair().then(function (keyPair) {

          publicKey = btoa(keyPair.public);
          userkeyPair = keyPair;
          return _this.generateAssertion(publicKey, origin, '', userkeyPair, idp);
        }).then(function (url) {
          return _this.generateAssertion(publicKey, origin, url, userkeyPair, idp);
        }).then(function (value) {
          if (value) {
            resolve(value);
          } else {
            reject('Error on obtaining Identity');
          }
        }).catch(function (err) {
          console.log(err);
          reject(err);
        });
      });
    }
  }, {
    key: 'sendGenerateMessage',
    value: function sendGenerateMessage(contents, origin, usernameHint, idpDomain) {
      var _this = this;
      var domain = _this._resolveDomain(idpDomain);
      var message = void 0;

      return new _promise2.default(function (resolve, reject) {
        message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'generateAssertion', params: { contents: contents, origin: origin, usernameHint: usernameHint } } };
        _this._messageBus.postMessage(message, function (res) {
          var result = res.body.value;

          resolve(result);
        });
      });
    }
  }, {
    key: 'storeIdentity',
    value: function storeIdentity(result, keyPair) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var splitedAssertion = result.assertion.split('.');
        var assertionParsed = void 0;

        //verify if the token contains the 3 components, or just the assertion
        if (splitedAssertion[1]) {
          assertionParsed = JSON.parse(atob(splitedAssertion[1]));
        } else {

          assertionParsed = JSON.parse(atob(result.assertion));
        }
        var idToken = void 0;

        //TODO remove the verification and remove the tokenIDJSON from the google idpProxy;
        if (assertionParsed.tokenIDJSON) {
          idToken = assertionParsed.tokenIDJSON;
        } else {
          idToken = assertionParsed;
        }

        var email = idToken.email || idToken.sub;

        var identifier = (0, _utils.getUserURLFromEmail)(email);

        result.identity = identifier;

        _this.identity.addIdentity(result);

        // check if exists any infoToken in the result received
        var infoToken = result.infoToken ? result.infoToken : {};

        var commonName = idToken.name || email.substring(0, email.indexOf('@'));
        var userProfileBundle = { username: email, cn: commonName, avatar: infoToken.picture, locale: infoToken.locale, userURL: identifier };

        //creation of a new JSON with the identity to send via messages
        var newIdentity = { userProfile: userProfileBundle, idp: result.idp.domain, assertion: result.assertion };
        result.messageInfo = newIdentity;
        result.keyPair = keyPair;

        _this.currentIdentity = newIdentity;

        //verify if the id already exists. If already exists then do not add to the identities list;
        var idAlreadyExists = false;
        var oldId = void 0;
        for (var identity in _this.identities) {
          if (_this.identities[identity].identity === result.identity) {
            idAlreadyExists = true;
            oldId = _this.identities[identity].messageInfo;
          }
        }

        if (idAlreadyExists) {
          resolve(oldId);
          var exists = false;

          //check if the identity exists in emailList, if not add it
          //This is useful if an identity was previously registered but was later unregistered
          for (var i in _this.emailsList) {
            if (_this.emailsList[i] === email) {
              exists = true;
              break;
            }
          }
          if (!exists) {
            _this.emailsList.push(email);
          }
        } else {
          _this.emailsList.push(email);
          _this.identities.push(result);
          resolve(newIdentity);
        }
      });
    }

    /**
    * Requests the IdpProxy from a given Domain for an identityAssertion
    *
    * @param  {DOMString} contents     contents
    * @param  {DOMString} origin       origin
    * @param  {DOMString} usernameHint usernameHint
    * @param  {JSON}      keyPair       user keyPair
    * @return {IdAssertion}              IdAssertion
    */

  }, {
    key: 'generateAssertion',
    value: function generateAssertion(contents, origin, usernameHint, keyPair, idpDomain) {
      var _this = this;

      console.log('generateAssertion');

      return new _promise2.default(function (resolve, reject) {

        _this.sendGenerateMessage(contents, origin, usernameHint, idpDomain).then(function (result) {

          if (result.loginUrl) {

            _this.openPopup(result.loginUrl).then(function (value) {
              resolve(value);
            }, function (err) {
              reject(err);
            });
          } else if (result) {

            _this.storeIdentity(result, keyPair).then(function (value) {
              resolve(value);
            }, function (err) {
              reject(err);
            });
          } else {
            reject('error on obtaining identity information');
          }
        });
      });
    }

    /**
    * OTHER USER'S IDENTITY
    */

    /**
    * Requests the IdpProxy from a given Domain to validate an IdentityAssertion
    * Returns a promise with the result from the validation.
    * @param  {DOMString} assertion
    * @param  {DOMString} origin       origin
    * @return {Promise}         Promise         promise with the result from the validation
    */

  }, {
    key: 'validateAssertion',
    value: function validateAssertion(assertion, origin, idpDomain) {
      var _this = this;

      var domain = _this._resolveDomain(idpDomain);

      var message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'validateAssertion',
          params: { assertion: assertion, origin: origin } } };

      return new _promise2.default(function (resolve, reject) {
        _this._messageBus.postMessage(message, function (result) {
          if (result.body.code === 200) {
            resolve(result.body.value);
          } else {
            reject('error', result.body.code);
          }
        });
      });
    }
  }, {
    key: 'encryptMessage',
    value: function encryptMessage(message) {
      var _this = this;

      console.log('encrypt message ');

      return new _promise2.default(function (resolve, reject) {
        var isHandShakeType = message.type === 'handshake';

        //if is not to apply encryption, then returns resolve
        if (!_this.isToUseEncryption && !isHandShakeType) {
          console.log('encryption disabled');
          return resolve(message);
        }

        //TODO remove this logic and move it to a util function
        var splitedToURL = message.to.split('/');
        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];
        if (splitedToURL.length > 6) {
          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];
        }

        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);
        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';

        if (message.type === 'update') {
          resolve(message);
        }

        if (isFromHyperty && isToHyperty) {
          var userURL = _this._registry.getHypertyOwner(message.from);
          if (userURL) {
            (function () {

              // check if exists any keys between two users
              var chatKeys = _this.chatKeys[message.from + '<->' + message.to];
              if (!chatKeys) {
                chatKeys = _this._newChatCrypto(message, userURL);
                console.log('createChatKey encrypt', message.from + message.to);
                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;
                message.body.handshakePhase = 'startHandShake';
              }

              if (chatKeys.authenticated && !isHandShakeType) {
                (function () {

                  var iv = _this.crypto.generateIV();
                  _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, message.body.value, iv).then(function (encryptedValue) {

                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, chatKeys.hypertyFrom.messageInfo);

                    _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage).then(function (hash) {
                      //console.log('result of hash ', hash);
                      var value = { iv: _this.crypto.encode(iv), value: _this.crypto.encode(encryptedValue), hash: _this.crypto.encode(hash) };
                      message.body.value = (0, _stringify2.default)(value);

                      resolve(message);
                    });
                  });

                  // if is a handshake message, just resolve it
                })();
              } else if (isHandShakeType) {
                resolve(message);

                // else, starts a new handshake protocol
              } else {
                _this._doHandShakePhase(message, chatKeys).then(function (value) {
                  _this.chatKeys[message.from + '<->' + message.to] = value.chatKeys;

                  _this._messageBus.postMessage(value.message);
                  reject('encrypt handshake protocol phase ');
                });
              }
            })();
          }

          //if from hyperty to a dataObjectURL
        } else if (isFromHyperty && isToDataObject) {
          (function () {
            console.log('dataObject value to encrypt: ', message.body.value);

            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];

            //if no key exists, create a new one if is the reporter of dataObject
            if (!dataObjectKey) {
              var isHypertyReporter = _this.registry.getReporterURLSynchonous(dataObjectURL);

              // if the hyperty is the reporter of the dataObject then generates a session key
              if (isHypertyReporter && isHypertyReporter === message.from) {

                var sessionKey = _this.crypto.generateRandom();
                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };

                dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];
              }
            }

            //check if there is already a session key for the chat room
            if (dataObjectKey) {

              // and if is to apply encryption, encrypt the messages
              if (dataObjectKey.isToEncrypt) {
                (function () {
                  var iv = _this.crypto.generateIV();

                  _this.crypto.encryptAES(dataObjectKey.sessionKey, _this.crypto.encode((0, _stringify2.default)(message.body.value)), iv).then(function (encryptedValue) {

                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, dataObjectKey.sessionKey);

                    _this.crypto.hashHMAC(dataObjectKey.sessionKey, filteredMessage).then(function (hash) {
                      //console.log('hash ', hash);

                      var newValue = { value: _this.crypto.encode(encryptedValue), iv: _this.crypto.encode(iv), hash: _this.crypto.encode(hash) };

                      message.body.value = (0, _stringify2.default)(newValue);
                      resolve(message);
                    });
                  });

                  // if not, just send the message
                })();
              } else {
                resolve(message);
              }

              // start the generation of a new session Key
            } else {
              reject('failed to decrypt message');
            }
          })();
        }
      });
    }
  }, {
    key: 'decryptMessage',
    value: function decryptMessage(message) {
      var _this = this;

      console.log('decrypt message ');

      return new _promise2.default(function (resolve, reject) {
        var isHandShakeType = message.type === 'handshake';

        //if is not to apply encryption, then returns resolve
        if (!_this.isToUseEncryption && !isHandShakeType) {
          console.log('decryption disabled');
          return resolve(message);
        }

        //TODO remove this logic and move it to a util function

        var splitedToURL = message.to.split('/');
        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];
        if (splitedToURL.length > 6) {
          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];
        }

        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);
        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';

        if (message.type === 'update') {
          resolve(message);
        }

        //is is hyperty to hyperty communication
        if (isFromHyperty && isToHyperty) {
          //console.log('decrypt hyperty to hyperty');
          var userURL = _this._registry.getHypertyOwner(message.to);
          if (userURL) {
            (function () {

              var chatKeys = _this.chatKeys[message.to + '<->' + message.from];
              if (!chatKeys) {
                chatKeys = _this._newChatCrypto(message, userURL, 'decrypt');
                _this.chatKeys[message.to + '<->' + message.from] = chatKeys;
              }

              if (chatKeys.authenticated && !isHandShakeType) {
                (function () {
                  var value = JSON.parse(message.body.value);
                  var iv = _this.crypto.decode(value.iv);
                  var data = _this.crypto.decode(value.value);
                  var hash = _this.crypto.decode(value.hash);
                  _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {
                    console.log('decrypted value ', decryptedData);
                    message.body.value = decryptedData;

                    var filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);

                    _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {
                      //console.log('result of hash verification! ', result);
                      message.body.assertedIdentity = true;
                      resolve(message);
                    });
                  });
                })();
              } else if (isHandShakeType) {
                _this._doHandShakePhase(message, chatKeys).then(function (value) {

                  //if it was started by doMutualAuthentication then ends the protocol
                  if (value === 'handShakeEnd') {
                    reject('decrypt handshake protocol phase ');

                    // if was started by a message, then resend that message
                  } else {
                    _this.chatKeys[message.to + '<->' + message.from] = value.chatKeys;
                    _this._messageBus.postMessage(value.message);
                    reject('decrypt handshake protocol phase ');
                  }
                });
              } else {
                reject('wrong message do decrypt');
              }
            })();
          } else {
            reject('error on decrypt message');
          }

          //if from hyperty to a dataObjectURL
        } else if (isFromHyperty && isToDataObject) {
          (function () {
            console.log('dataObject value to decrypt: ', message.body);

            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];

            if (dataObjectKey) {

              //check if is to apply encryption
              if (dataObjectKey.isToEncrypt) {
                (function () {
                  var parsedValue = JSON.parse(message.body.value);
                  var iv = _this.crypto.decode(parsedValue.iv);
                  var encryptedValue = _this.crypto.decode(parsedValue.value);
                  var hash = _this.crypto.decode(parsedValue.hash);

                  _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, iv).then(function (decryptedValue) {
                    var parsedValue = JSON.parse(atob(decryptedValue));
                    console.log('decrypted Value,', parsedValue);
                    message.body.value = parsedValue;

                    var filteredMessage = _this._filterMessageToHash(message, parsedValue + iv);

                    _this.crypto.verifyHMAC(dataObjectKey.sessionKey, filteredMessage, hash).then(function (result) {
                      //console.log('result of hash verification! ', result);

                      message.body.assertedIdentity = true;
                      resolve(message);
                    });
                  });

                  //if not, just return the message
                })();
              } else {
                message.body.assertedIdentity = true;
                resolve(message);
              }
            } else {
              message.body.assertedIdentity = true;
              resolve(message);

              //reject('no sessionKey for chat room found');
            }
          })();
        } else {
          reject('wrong message to decrypt');
        }
      });
    }
  }, {
    key: 'doMutualAuthentication',
    value: function doMutualAuthentication(sender, receiver) {
      console.log('doMutualAuthentication: ', sender, receiver);
      var _this = this;
      var dataObjectURL = void 0;

      // check if the sender is a dataObject and if so stores that value
      var reporterURL = _this.registry.getReporterURLSynchonous(sender);
      if (reporterURL) {
        dataObjectURL = sender;
        sender = reporterURL;
      }

      var msg = {
        to: receiver,
        from: sender,
        callback: undefined,
        body: { handshakePhase: 'startHandShake', ignore: 'ignoreMessage' }
      };

      return new _promise2.default(function (resolve, reject) {

        if (!sender || !receiver) {
          return reject('sender or receiver missing on doMutualAuthentication');
        }

        var chatKeys = _this.chatKeys[sender + '<->' + receiver];
        var userURL = _this._registry.getHypertyOwner(sender);

        if (userURL) {

          if (!chatKeys) {
            // callback to resolve when finish the mutual authentication
            var resolved = function resolved(value) {
              console.log('callback value:', value);
              resolve(value);
            };
            msg.callback = resolved;
            msg.dataObjectURL = dataObjectURL;

            chatKeys = _this._newChatCrypto(msg, userURL);
            _this.chatKeys[sender + '<->' + receiver] = chatKeys;
          }

          if (chatKeys.authenticated) {

            var startSessionKeyExchange = {
              to: sender,
              from: receiver
            };
            chatKeys.dataObjectURL = dataObjectURL;
            _this._sendReporterSessionKey(startSessionKeyExchange, chatKeys).then(function (value) {

              _this._messageBus.postMessage(value.message);
              resolve('exchange of chat sessionKey initiated');
            });
          } else {

            _this._doHandShakePhase(msg, chatKeys);
          }
        } else {
          reject('error on doMutualAuthentication');
        }
      });
    }
  }, {
    key: '_doHandShakePhase',
    value: function _doHandShakePhase(message, chatKeys) {
      var _this = this;

      //console.log('handshakeType');

      return new _promise2.default(function (resolve, reject) {

        var handshakeType = message.body.handshakePhase;
        var iv = void 0;
        var hash = void 0;
        var value = {};
        var filteredMessage = void 0;

        (function () {
          switch (handshakeType) {

            case 'startHandShake':
              chatKeys.keys.fromRandom = _this.crypto.generateRandom();

              var startHandShakeMsg = {
                type: 'handshake',
                to: message.to,
                from: message.from,
                body: {
                  handshakePhase: 'senderHello',
                  value: _this.crypto.encode(chatKeys.keys.fromRandom)
                }
              };
              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(startHandShakeMsg, undefined, chatKeys.hypertyFrom.messageInfo);

              // check if was the encrypt function or the mutual authentication that request the
              // start of the handShakePhase.
              if (chatKeys.initialMessage) {
                resolve({ message: startHandShakeMsg, chatKeys: chatKeys });
              } else {
                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;
                _this._messageBus.postMessage(startHandShakeMsg);
              }

              break;
            case 'senderHello':

              console.log('senderHello');
              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(message);
              chatKeys.keys.fromRandom = _this.crypto.decode(message.body.value);
              chatKeys.keys.toRandom = _this.crypto.generateRandom();

              var senderHelloMsg = {
                type: 'handshake',
                to: message.from,
                from: message.to,
                body: {
                  handshakePhase: 'receiverHello',
                  value: _this.crypto.encode(chatKeys.keys.toRandom)
                }
              };
              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(senderHelloMsg, undefined, chatKeys.hypertyFrom.messageInfo);
              resolve({ message: senderHelloMsg, chatKeys: chatKeys });

              break;
            case 'receiverHello':

              console.log('receiverHello');
              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(message);

              _this.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp).then(function (value) {

                //TODO remove later this verification as soon as all the IdP proxy are updated in the example
                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;

                var receiverPublicKey = _this.crypto.decode(encodedpublicKey);
                var premasterSecret = _this.crypto.generatePMS();
                var toRandom = message.body.value;
                chatKeys.hypertyTo.assertion = message.body.identity.assertion;
                chatKeys.hypertyTo.publicKey = receiverPublicKey;
                chatKeys.hypertyTo.userID = value.contents.email;
                chatKeys.keys.toRandom = _this.crypto.decode(toRandom);
                chatKeys.keys.premasterKey = premasterSecret;

                var concatKey = _this.crypto.concatPMSwithRandoms(premasterSecret, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);

                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                //generate the master key
              }).then(function (masterKey) {
                chatKeys.keys.masterKey = masterKey;

                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                //generate the symmetric and hash keys
              }).then(function (keys) {

                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[0]);
                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[1]);
                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[2]);
                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[3]);
                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                var messageStructure = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate'
                  }
                };

                // hash the value and the iv
                filteredMessage = _this._filterMessageToHash(messageStructure, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);
                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);
              }).then(function (hash) {
                value.hash = _this.crypto.encode(hash);

                //encrypt the data
                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok', iv);
              }).then(function (encryptedData) {
                value.symetricEncryption = _this.crypto.encode(encryptedData);

                return _this.crypto.encryptRSA(chatKeys.hypertyTo.publicKey, chatKeys.keys.premasterKey);
              }).then(function (encryptedValue) {

                value.assymetricEncryption = _this.crypto.encode(encryptedValue);

                var messageStructure = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate'
                  }
                };

                var messageToHash = _this._filterMessageToHash(messageStructure, chatKeys.keys.premasterKey, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.signRSA(chatKeys.hypertyFrom.privateKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(messageToHash));
              }).then(function (signature) {

                value.signature = _this.crypto.encode(signature);

                var receiverHelloMsg = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate',
                    value: btoa((0, _stringify2.default)(value))
                  }
                };
                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(receiverHelloMsg, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);

                resolve({ message: receiverHelloMsg, chatKeys: chatKeys });
              }, function (error) {
                return reject(error);
              });

              break;
            case 'senderCertificate':

              console.log('senderCertificate');
              var receivedValue = JSON.parse(atob(message.body.value));

              _this.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp).then(function (value) {
                var encryptedPMS = _this.crypto.decode(receivedValue.assymetricEncryption);

                //TODO remove later this verification as soon as all the IdP proxy are updated in the example
                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;

                var senderPublicKey = _this.crypto.decode(encodedpublicKey);
                chatKeys.hypertyTo.assertion = message.body.identity.assertion;
                chatKeys.hypertyTo.publicKey = senderPublicKey;
                chatKeys.hypertyTo.userID = value.contents.email;

                return _this.crypto.decryptRSA(chatKeys.hypertyFrom.privateKey, encryptedPMS);
              }, function (error) {
                console.log(error);
                reject('Error during authentication of identity');

                //obtain the PremasterKey using the private key
              }).then(function (pms) {

                chatKeys.keys.premasterKey = new Uint8Array(pms);

                var signature = _this.crypto.decode(receivedValue.signature);

                var receivedmsgToHash = _this._filterMessageToHash(message, chatKeys.keys.premasterKey);

                return _this.crypto.verifyRSA(chatKeys.hypertyTo.publicKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(receivedmsgToHash), signature);

                // validates the signature received
              }).then(function (signValidationResult) {

                console.log('signature validation result ', signValidationResult);
                var concatKey = _this.crypto.concatPMSwithRandoms(chatKeys.keys.premasterKey, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);

                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                // generates the master keys from the Premaster key and the randoms
              }).then(function (masterKey) {
                chatKeys.keys.masterKey = masterKey;

                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                // generates the symmetric keys to be used in the symmetric encryption
              }).then(function (keys) {
                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[0]);
                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[1]);
                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[2]);
                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[3]);
                iv = _this.crypto.decode(receivedValue.iv);
                var data = _this.crypto.decode(receivedValue.symetricEncryption);

                return _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv);
              }).then(function (decryptedData) {
                //console.log('decryptedData', decryptedData);

                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(message, decryptedData + iv);

                var hashReceived = _this.crypto.decode(receivedValue.hash);

                filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);

                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hashReceived);
              }).then(function (verifiedHash) {

                //console.log('result of hash verification ', verifiedHash);
                var receiverFinishedMessage = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverFinishedMessage'
                  }
                };
                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                filteredMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, receiverFinishedMessage);
              }).then(function (hash) {

                value.hash = _this.crypto.encode(hash);
                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!', iv);
              }).then(function (encryptedValue) {
                value.value = _this.crypto.encode(encryptedValue);
                var receiverFinishedMessage = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverFinishedMessage',
                    value: btoa((0, _stringify2.default)(value))
                  }
                };

                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);
                chatKeys.authenticated = true;
                resolve({ message: receiverFinishedMessage, chatKeys: chatKeys });
              });

              break;
            case 'receiverFinishedMessage':

              console.log('receiverFinishedMessage');
              chatKeys.authenticated = true;

              value = JSON.parse(atob(message.body.value));

              iv = _this.crypto.decode(value.iv);
              var data = _this.crypto.decode(value.value);
              hash = _this.crypto.decode(value.hash);

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {
                console.log('decryptedData', decryptedData);
                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(message, decryptedData + iv);

                var filteredMessage = _this._filterMessageToHash(message, data + iv);
                _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {
                  console.log('hash result', result);

                  // check if there was an initial message that was blocked and send it
                  if (chatKeys.initialMessage) {
                    var initialMessage = {
                      type: 'create',
                      to: message.from,
                      from: message.to,
                      body: {
                        value: chatKeys.initialMessage.body.value
                      }
                    };

                    resolve({ message: initialMessage, chatKeys: chatKeys });

                    //sends the sessionKey to the subscriber hyperty
                  } else {
                    _this._sendReporterSessionKey(message, chatKeys).then(function (value) {
                      resolve(value);
                    });
                  }
                });
              });

              break;
            case 'reporterSessionKey':

              console.log('reporterSessionKey');

              var valueIVandHash = JSON.parse(atob(message.body.value));
              hash = _this.crypto.decode(valueIVandHash.hash);
              iv = _this.crypto.decode(valueIVandHash.iv);
              var encryptedValue = _this.crypto.decode(valueIVandHash.value);
              var parsedValue = void 0;
              var sessionKey = void 0;
              var dataObjectURL = void 0;
              var receiverAcknowledgeMsg = void 0;

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, encryptedValue, iv).then(function (decryptedValue) {

                parsedValue = JSON.parse(decryptedValue);
                sessionKey = _this.crypto.decode(parsedValue.value);
                dataObjectURL = parsedValue.dataObjectURL;

                var messageToHash = _this._filterMessageToHash(message, decryptedValue + iv);

                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, messageToHash, hash);
              }).then(function (hashResult) {

                //console.log('hash successfully validated ', hashResult);

                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };

                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!!', iv);
              }).then(function (encryptedValue) {

                receiverAcknowledgeMsg = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverAcknowledge'
                  }
                };

                value.value = _this.crypto.encode(encryptedValue);
                var messageToHash = _this._filterMessageToHash(receiverAcknowledgeMsg, 'ok!!' + iv, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, messageToHash);
              }).then(function (hashedMessage) {
                var finalValue = btoa((0, _stringify2.default)({ value: value.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));

                receiverAcknowledgeMsg.body.value = finalValue;
                resolve({ message: receiverAcknowledgeMsg, chatKeys: chatKeys });
              });

              break;
            case 'receiverAcknowledge':

              console.log('receiverAcknowledge');

              var receivedvalueIVandHash = JSON.parse(atob(message.body.value));
              var receivedHash = _this.crypto.decode(receivedvalueIVandHash.hash);
              iv = _this.crypto.decode(receivedvalueIVandHash.iv);
              var receivedEncryptedValue = _this.crypto.decode(receivedvalueIVandHash.value);

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, receivedEncryptedValue, iv).then(function (decryptedValue) {

                var filteredMessage = _this._filterMessageToHash(message, decryptedValue + iv);
                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, receivedHash);
              }).then(function (hashResult) {
                //console.log('hashResult ', hashResult);

                var callback = chatKeys.callback;

                if (callback) {
                  callback('handShakeEnd');
                }
                resolve('handShakeEnd');
              });

              break;
            default:
              reject(message);
          }
        })();
      });
    }
  }, {
    key: '_sendReporterSessionKey',
    value: function _sendReporterSessionKey(message, chatKeys) {
      var _this = this;
      var sessionKeyBundle = _this.dataObjectSessionKeys[chatKeys.dataObjectURL];
      var reporterSessionKeyMsg = void 0;
      var valueToEncrypt = void 0;
      var sessionKey = void 0;
      var iv = void 0;
      var value = {};

      return new _promise2.default(function (resolve, reject) {

        //if there is not yet a session Key, generates a new one
        if (!sessionKeyBundle) {
          sessionKey = _this.crypto.generateRandom();
          _this.dataObjectSessionKeys[chatKeys.dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };
        } else {
          sessionKey = sessionKeyBundle.sessionKey;
        }

        valueToEncrypt = (0, _stringify2.default)({ value: _this.crypto.encode(sessionKey), dataObjectURL: chatKeys.dataObjectURL });

        iv = _this.crypto.generateIV();
        value.iv = _this.crypto.encode(iv);
        _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, valueToEncrypt, iv).then(function (encryptedValue) {

          reporterSessionKeyMsg = {
            type: 'handshake',
            to: message.from,
            from: message.to,
            body: {
              handshakePhase: 'reporterSessionKey',
              value: _this.crypto.encode(encryptedValue)
            }
          };

          var filteredMessage = _this._filterMessageToHash(reporterSessionKeyMsg, valueToEncrypt + iv, chatKeys.hypertyFrom.messageInfo);

          return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);
        }).then(function (hashedMessage) {

          var valueWithHash = btoa((0, _stringify2.default)({ value: reporterSessionKeyMsg.body.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));

          reporterSessionKeyMsg.body.value = valueWithHash;
          resolve({ message: reporterSessionKeyMsg, chatKeys: chatKeys });
        });
      });
    }

    /**
    * returns the reporter associated to the dataObject URL
    * @param   {String}   dataObjectURL         dataObject url
    * @return   {String}  reporter              dataObject url reporter
    */

  }, {
    key: '_getHypertyFromDataObject',
    value: function _getHypertyFromDataObject(dataObjectURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //TODO remove this logic and move it to a util function

        var splitedURL = dataObjectURL.split('/');
        var finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3];
        if (splitedURL.length > 6) {
          finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3] + '/' + splitedURL[4];
        }

        // check if is the creator of the hyperty
        var reporterURL = _this.registry.getReporterURLSynchonous(finalURL);

        if (reporterURL) {
          resolve(reporterURL);
        } else {
          // check if there is already an association from an hypertyURL to the dataObject
          var storedReporterURL = _this.dataObjectsIdentity[finalURL];

          if (storedReporterURL) {
            resolve(storedReporterURL);
          } else {
            // check if there is any hyperty that subscribed the dataObjectURL
            var subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);

            if (subscriberHyperty) {
              resolve(subscriberHyperty);
            } else {

              // search in domain registry for the hyperty associated to the dataObject
              // search in case is a subscriber who wants to know the reporter
              _this.registry.discoverDataObjectPerURL(finalURL, splitedURL[2]).then(function (dataObject) {
                _this.dataObjectsIdentity[finalURL] = dataObject.reporter;
                resolve(dataObject.reporter);
              }, function (err) {
                reject(err);
              });
            }
          }
        }
      });
    }

    /**
    * filter the messages to hash, by removing some fields not generated by the runtime core
    * @param {Message}  message                     message
    * @param {String}  decryptedValue (Optional)    value from body.value in case it originally comes encrypted
    * @param {JSON}  identity(Optional)    add the hyperty identity associated in case is not added to the initial message
    * @return {Message}  new message filtered
    */

  }, {
    key: '_filterMessageToHash',
    value: function _filterMessageToHash(message, decryptedValue, identity) {

      return {
        type: message.type,
        from: message.from,
        to: message.to,
        body: {
          identity: identity || message.body.identity,
          value: decryptedValue || message.body.value,
          handshakePhase: message.body.handshakePhase
        }
      };
    }

    /**
    * generates the initial structure for the keys between two users
    * @param {JSON}    message              initial message that triggers the mutual authentication
    * @param {String}  userURL              userURL
    * @param {boolean} receiver(Optional)  indicates if is the sender or the receiver that creates a new chat crypto
    * @return {JSON} newChatCrypto  new JSON structure for the chat crypto
    */

  }, {
    key: '_newChatCrypto',
    value: function _newChatCrypto(message, userURL, receiver) {
      var _this = this;

      //check whether is the sender or the receiver to create a new chatCrypto
      //to mantain consistency on the keys if the receiver create a new chatCrypto,
      //then invert the fields
      var from = receiver ? message.to : message.from;
      var to = receiver ? message.from : message.to;

      var userInfo = _this.getIdentity(userURL);

      var newChatCrypto = {
        hypertyFrom: {
          hyperty: from,
          userID: userInfo.messageInfo.userProfile.username,
          privateKey: userInfo.keyPair.private,
          publicKey: userInfo.keyPair.public,
          assertion: userInfo.assertion,
          messageInfo: userInfo.messageInfo
        },
        hypertyTo: {
          hyperty: to,
          userID: undefined,
          publicKey: undefined,
          assertion: undefined
        },
        keys: {
          hypertyToSessionKey: undefined,
          hypertyFromSessionKey: undefined,
          hypertyToHashKey: undefined,
          hypertyFromHashKey: undefined,
          toRandom: undefined,
          fromRandom: undefined,
          premasterKey: undefined,
          masterKey: undefined
        },
        handshakeHistory: {
          senderHello: undefined,
          receiverHello: undefined,
          senderCertificate: undefined,
          receiverFinishedMessage: undefined
        },
        initialMessage: message.body.ignore ? undefined : message,
        callback: message.callback,
        authenticated: false,
        dataObjectURL: message.dataObjectURL
      };

      return newChatCrypto;
    }
  }, {
    key: 'messageBus',
    get: function get() {
      var _this = this;
      return _this._messageBus;
    }

    /**
    * Set the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */
    ,
    set: function set(messageBus) {
      var _this = this;
      _this._messageBus = messageBus;
    }

    /**
    * return the registry in this idModule
    * @param {registry}           registry
    */

  }, {
    key: 'registry',
    get: function get() {
      var _this = this;
      return _this._registry;
    }

    /**
    * Set the registry in this idModule
    * @param {registry}     reg
    */
    ,
    set: function set(registry) {
      var _this = this;
      _this._registry = registry;
    }
  }]);
  return IdentityModule;
}();

exports.default = IdentityModule;
module.exports = exports['default'];

},{"../utils/utils.js":452,"./Crypto":420,"./GuiFake":421,"./Identity":422,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],424:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ActionsService = function () {
  function ActionsService(context) {
    (0, _classCallCheck3.default)(this, ActionsService);

    this.context = context;
  }

  (0, _createClass3.default)(ActionsService, [{
    key: 'enforcePolicies',
    value: function enforcePolicies(message, isIncomingMessage) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        var policies = _this.context.getPolicies(message, isIncomingMessage);

        if (policies !== undefined) {
          if (policies.serviceProviderPolicy !== undefined) {
            policies.serviceProviderPolicy.enforceActions(_this.context, message).then(function (messages) {
              resolve(messages);
            }, function (error) {
              reject(error);
            });
          } else {
            if (policies.userPolicy !== undefined) {
              policies.userPolicy.enforceActions(_this.context, message).then(function (messages) {
                resolve(messages);
              }, function (error) {
                reject(error);
              });
            } else {
              resolve([message]);
            }
          }
        } else {
          resolve([message]);
        }
      });
    }
  }, {
    key: 'forwardToID',
    value: function forwardToID(message, email) {
      var _this = this;
      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');

      return new _promise2.default(function (resolve, reject) {
        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {
          var splitTo = message.to.split('://');
          if (splitTo[0] !== 'runtime') {
            _this.context.runtimeRegistry.discoverHypertyPerUser(email).then(function (result) {
              message.to = result.hypertyURL;
              message.body.via = undefined;
              resolve(message);
              _this.context.runtimeRegistry._messageBus.postMessage(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        } else {
          resolve(message);
        }
      });
    }
  }, {
    key: 'forwardToHyperty',
    value: function forwardToHyperty(message, hypertyURL) {
      var _this = this;
      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');

      return new _promise2.default(function (resolve) {
        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {
          var splitTo = message.to.split('://');
          if (splitTo[0] !== 'runtime') {
            message.to = hypertyURL;
            message.body.via = undefined;
            resolve(message);
            _this.context.runtimeRegistry._messageBus.postMessage(message);
          } else {
            resolve(message);
          }
        } else {
          resolve(message);
        }
      });
    }
  }, {
    key: 'sendAutomaticMessage',
    value: function sendAutomaticMessage(message, text) {
      var _this = this;
      return new _promise2.default(function (resolve) {
        var automaticMessage = {
          from: message.to,
          to: message.from,
          body: {
            value: text
          },
          type: message.type
        };
        resolve(message);
        _this.context.runtimeRegistry._messageBus.postMessage(automaticMessage);
      });
    }
  }]);
  return ActionsService;
}();

exports.default = ActionsService;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],425:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Operators = function () {
  function Operators() {
    (0, _classCallCheck3.default)(this, Operators);
  }

  (0, _createClass3.default)(Operators, [{
    key: 'and',
    value: function and(params) {
      return params[0] && params[1];
    }
  }, {
    key: 'between',
    value: function between(params) {
      var start = parseInt(params[0][0]);
      var end = parseInt(params[0][1]);
      var now = params[1];

      if (end < start) {
        now = now < start ? now += 2400 : now;
        end += 2400;
      }

      return now > start && now < end;
    }
  }, {
    key: 'equals',
    value: function equals(params) {
      return String(params[0]) === '*' || String(params[0]) === String(params[1]);
    }
  }, {
    key: 'greaterThan',
    value: function greaterThan(params) {
      return params[1] > params[0];
    }
  }, {
    key: 'in',
    value: function _in(params) {
      return params[0].indexOf(params[1]) > -1;
    }
  }, {
    key: 'lessThan',
    value: function lessThan(params) {
      return params[1] < params[0];
    }
  }, {
    key: 'not',
    value: function not(params) {
      return !params[0];
    }
  }, {
    key: 'or',
    value: function or(params) {
      return params[0] || params[1];
    }
  }]);
  return Operators;
}();

exports.default = Operators;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],426:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Operators = require('./Operators');

var _Operators2 = _interopRequireDefault(_Operators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The Policy Decision Point (PDP) decides if a message is to be authorised by checking a set of
* policies. The resource to be verified is specified in the first word of the 'condition' field of
* a Policy object. The implementation that verifies if the message is compliant with a policy is
* specified in a hashtable to allow dynamic definition of the implementation, providing
* extensibility to the Policy Engine functionalities.
*/
var PDP = function () {
  function PDP(context) {
    (0, _classCallCheck3.default)(this, PDP);

    this.context = context;
    this.operators = new _Operators2.default();
  }

  (0, _createClass3.default)(PDP, [{
    key: 'evaluatePolicies',
    value: function evaluatePolicies(message, isIncomingMessage) {
      var policies = this.context.getPolicies(message, isIncomingMessage);
      var result = 'Not Applicable';

      if (policies !== undefined) {
        result = this.evaluatePolicy(message, policies.serviceProviderPolicy, isIncomingMessage);
        if (result || result === 'Not Applicable') {
          var userResult = this.evaluatePolicy(message, policies.userPolicy, isIncomingMessage);
          if (userResult !== 'Not Applicable') {
            result = userResult;
          }
        }
      }

      return result;
    }
  }, {
    key: 'evaluatePolicy',
    value: function evaluatePolicy(message, policy, isIncoming) {
      var result = 'Not Applicable';
      if (policy) {
        result = policy.evaluateRules(this.context, message, isIncoming);
      }

      return result;
    }
  }]);
  return PDP;
}();

exports.default = PDP;
module.exports = exports['default'];

},{"./Operators":425,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],427:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _ActionsService = require('./ActionsService');

var _ActionsService2 = _interopRequireDefault(_ActionsService);

var _PDP = require('./PDP');

var _PDP2 = _interopRequireDefault(_PDP);

var _Policy = require('./Policy');

var _Policy2 = _interopRequireDefault(_Policy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PEP = function () {

  /**
  * Creates a Policy Enforcement Point (PEP) instance
  * @param    {Object}    context
  */
  function PEP(context) {
    (0, _classCallCheck3.default)(this, PEP);

    this.pdp = new _PDP2.default(context);
    this.actionsService = new _ActionsService2.default(context);
    this.context = context;
    context.pep = this;
    context.loadConfigurations();
  }

  /**
  * Adds a policy to the Policy Enforcement Point (PEP). The policy can be created by the service
  * provider or by the user.
  * @param    {String}    source
  * @param    {String}    key
  * @param    {Object}    policy
  */


  (0, _createClass3.default)(PEP, [{
    key: 'addPolicy',
    value: function addPolicy(source, key, policy, combiningAlgorithm) {
      if (!source) throw new Error('source is not defined');
      if (!key) throw new Error('key is not defined');

      if (policy === undefined) {
        policy = new _Policy2.default(key, [], [], combiningAlgorithm);
      } else {
        if (!(policy instanceof _Policy2.default)) {
          policy = new _Policy2.default(policy.key, policy.rules, policy.actions, policy.combiningAlgorithm);
        }
      }

      switch (source) {
        case 'SERVICE_PROVIDER':
          this.context.savePolicies(source, policy, key);
          break;
        case 'USER':
          this.context.userPolicies[key] = policy;
          this.context.savePolicies(source);
          break;
        default:
          throw Error('Unknown policy source: ' + source);
      }
    }
  }, {
    key: 'authorise',
    value: function authorise(message) {
      var _this2 = this;

      console.log('--- Policy Engine ---');
      console.log(message);
      if (!message) throw new Error('message is not defined');
      if (!message.from) throw new Error('message.from is not defined');
      if (!message.to) throw new Error('message.to is not defined');
      if (!message.type) throw new Error('message.type is not defined');
      message.body = message.body || {};

      return new _promise2.default(function (resolve, reject) {

        message.body = message.body || {};
        var _this = _this2;
        var result = void 0;
        if (_this._isToVerify(message)) {
          (function () {
            var isIncoming = _this._isIncomingMessage(message);
            _this.context.prepareForEvaluation(message, isIncoming).then(function (message) {
              result = _this.pdp.evaluatePolicies(message, isIncoming);
              if (result === 'Not Applicable') {
                result = _this.context.defaultBehaviour;
                message.body.auth = false;
              }
              _this.actionsService.enforcePolicies(message, isIncoming).then(function (messages) {
                for (var i in messages) {
                  message = messages[i];
                  _this.context.prepareToForward(message, isIncoming, result).then(function (message) {
                    if (result) {
                      message.body.auth = message.body.auth === undefined ? true : message.body.auth;
                      resolve(message);
                    } else {
                      var errorMessage = { body: { code: 403, description: 'Blocked by policy' }, from: message.to, to: message.from, type: 'response' };
                      reject(errorMessage);
                    }
                  }, function (error) {
                    reject(error);
                  });
                }
              }, function (error) {
                reject(error);
              });
            }, function (error) {
              reject(error);
            });
          })();
        } else {
          result = _this.context.defaultBehaviour;
          if (result) {
            message.body.auth = false;
            resolve(message);
          } else {
            var errorMessage = { body: { code: 403, description: 'Blocked by policy' }, from: message.to, to: message.from, type: 'response' };
            reject(errorMessage);
          }
        }
      });
    }
  }, {
    key: 'authoriseSync',
    value: function authoriseSync(message) {
      var result = void 0;
      message.body = message.body || {};
      if (this._isToVerify(message)) {
        var isIncoming = this._isIncomingMessage(message);
        message = this.context.prepareForEvaluation(message, isIncoming);
        result = this.pdp.evaluatePolicies(message, isIncoming);
        if (result === 'Not Applicable') {
          result = this.context.defaultBehaviour;
          message.body.auth = false;
        }
        this.actionsService.enforcePolicies(message, isIncoming);
        message = this.context.prepareToForward(message, isIncoming, result);
        if (result) {
          message.body.auth = message.body.auth === undefined ? true : message.body.auth;
          return true;
        } else {
          return false;
        }
      } else {
        result = this.context.defaultBehaviour;
        if (result) {
          message.body.auth = false;
          return true;
        } else {
          return false;
        }
      }
    }
  }, {
    key: '_isIncomingMessage',
    value: function _isIncomingMessage(message) {
      return message.body !== undefined && message.body.identity !== undefined ? true : false;
    }

    /**
    * Identifies the messages to be verified by the Policy Engine
    * @param    {Message}   message
    * @returns  {boolean}   returns true if the message requires encryption/decryption
    *                       or if its type equals 'handshake'; false otherwise
    */

  }, {
    key: '_isToVerify',
    value: function _isToVerify(message) {
      var schemasToIgnore = ['domain', 'domain-idp', 'global', 'hyperty-runtime', 'runtime'];
      var splitFrom = message.from.split('://');
      var fromSchema = splitFrom[0];
      var splitTo = message.to.split('://');
      var toSchema = splitTo[0];

      if (message.from === fromSchema || message.to === toSchema || message.type === 'read' || message.type === 'response') {
        return false;
      } else {
        return schemasToIgnore.indexOf(fromSchema) === -1 || schemasToIgnore.indexOf(toSchema) === -1;
      }
    }
  }, {
    key: 'removePolicy',
    value: function removePolicy(source, key) {
      if (!source) throw new Error('source is not defined');
      if (source !== '*' && !key) throw new Error('key is not defined');

      switch (source) {
        case '*':
          this.context.serviceProviderPolicy = {};
          this.context.userPolicies = {};
          this.context.activeUserPolicy = undefined;
          this.context.savePolicies('USER');
          this.context.savePolicies('SERVICE_PROVIDER');
          this.context.saveActivePolicy();
          break;
        case 'SERVICE_PROVIDER':
          delete this.context.serviceProviderPolicy[key];
          this.context.savePolicies();
          break;
        case 'USER':
          delete this.context.userPolicies[key];
          if (key === this.context.activeUserPolicy) {
            this.context.activeUserPolicy = undefined;
            this.context.saveActivePolicy();
          }
          this.context.savePolicies('USER');
          break;
        default:
          throw Error('Unknown policy source: ' + source);
      }
    }
  }]);
  return PEP;
}();

exports.default = PEP;
module.exports = exports['default'];

},{"./ActionsService":424,"./PDP":426,"./Policy":428,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],428:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _AllowOverrides = require('./combiningAlgorithms/AllowOverrides');

var _AllowOverrides2 = _interopRequireDefault(_AllowOverrides);

var _BlockOverrides = require('./combiningAlgorithms/BlockOverrides');

var _BlockOverrides2 = _interopRequireDefault(_BlockOverrides);

var _FirstApplicable = require('./combiningAlgorithms/FirstApplicable');

var _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);

var _Rule = require('./Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Policy = function () {
  function Policy(key, rules, actions, combiningAlgorithm) {
    (0, _classCallCheck3.default)(this, Policy);

    if (!key) throw new Error('key is not defined');
    if (!actions) throw new Error('actions are not defined');

    this.actions = actions;
    this.key = key;
    this._setRules(rules);
    this._setCombiningAlgorithm(combiningAlgorithm);
  }

  (0, _createClass3.default)(Policy, [{
    key: 'addAction',
    value: function addAction(method, param) {
      this.actions.push({ method: method, param: param });
    }
  }, {
    key: 'createRule',
    value: function createRule(decision, condition, scope, target, priority) {
      if (priority === undefined) {
        priority = this.getLastPriority() + 1;
      }
      var rule = new _Rule2.default(decision, condition, scope, target, priority);
      this.rules.push(rule);
    }
  }, {
    key: 'deleteRule',
    value: function deleteRule(rule) {
      var indexToRemove = this.rules.indexOf(rule);
      this.rules.splice(indexToRemove, 1);
    }
  }, {
    key: 'enforceActions',
    value: function enforceActions(context, message) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var results = [];
        if (_this.actions.length !== 0) {
          for (var i in _this.actions) {
            var result = context.pep.actionsService[_this.actions[i].method](message, _this.actions[i].param);
            results.push(result);
          }
          _promise2.default.all(results).then(function (messages) {
            resolve(messages);
          }, function (error) {
            reject(error);
          });
        } else {
          resolve([message]);
        }
      });
    }
  }, {
    key: 'evaluateRules',
    value: function evaluateRules(context, message, isIncoming) {
      var results = [];
      for (var i in this.rules) {
        results.push(this.rules[i].evaluate(context, message, isIncoming));
      }

      return this.combiningAlgorithm.combine(results);
    }
  }, {
    key: 'getLastPriority',
    value: function getLastPriority() {
      var priorities = [];

      if (this.rules.length !== 0) {
        for (var i in this.rules) {
          priorities.push(this.rules[i].priority);
        }
        return Math.max.apply(Math, priorities);
      } else {
        return -1;
      }
    }
  }, {
    key: 'getRuleByPriority',
    value: function getRuleByPriority(priority) {
      for (var i in this.rules) {
        if (String(this.rules[i].priority) === String(priority)) {
          return this.rules[i];
        }
      }
      throw Error('Rule with priority ' + priority + ' does not exist!');
    }
  }, {
    key: '_setCombiningAlgorithm',
    value: function _setCombiningAlgorithm(combiningAlgorithm) {
      if (!combiningAlgorithm) {
        combiningAlgorithm = 'blockOverrides';
      }
      switch (combiningAlgorithm) {
        case 'blockOverrides':
          this.combiningAlgorithm = new _BlockOverrides2.default();
          break;
        case 'allowOverrides':
          this.combiningAlgorithm = new _AllowOverrides2.default();
          break;
        case 'firstApplicable':
          this.combiningAlgorithm = new _FirstApplicable2.default();
          break;
        default:
          throw Error('Unknown algorithm: ' + combiningAlgorithm);
      }
    }
  }, {
    key: '_setRules',
    value: function _setRules(rules) {
      this.rules = [];

      for (var i in rules) {
        var rule = rules[i];
        if (rule.priority === undefined) {
          rule.priority = this.getLastPriority() + 1;
        }
        if (!(rule instanceof _Rule2.default)) {
          rule = new _Rule2.default(rule.decision, rule.condition, rule.scope, rule.target, rule.priority);
        }
        this.rules.push(rule);
      }
    }
  }, {
    key: 'sortRules',
    value: function sortRules() {
      return this.rules.sort(function (a, b) {
        var x = a.priority;var y = b.priority;
        return x < y ? -1 : x > y ? 1 : 0;
      });
    }
  }]);
  return Policy;
}();

exports.default = Policy;
module.exports = exports['default'];

},{"./Rule":430,"./combiningAlgorithms/AllowOverrides":431,"./combiningAlgorithms/BlockOverrides":432,"./combiningAlgorithms/FirstApplicable":433,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],429:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReThinkCtx = function () {
  function ReThinkCtx() {
    (0, _classCallCheck3.default)(this, ReThinkCtx);

    this.defaultBehaviour = true;
    this.groups = {};
  }

  (0, _createClass3.default)(ReThinkCtx, [{
    key: 'scheme',
    get: function get() {
      return this._scheme;
    },
    set: function set(params) {
      var from = params.message.from;
      if ((0, _utils.isDataObjectURL)(from)) {
        this._scheme = (0, _utils.divideURL)(from).type;
      } else {
        this._scheme = undefined;
      }
    }
  }, {
    key: 'date',
    get: function get() {
      return this._date;
    },
    set: function set(now) {
      var date = new Date();
      var day = String(date.getDate());
      if (day.length === 1) {
        day = '0' + day;
      }
      var month = String(date.getMonth() + 1);
      if (month.length === 1) {
        month = '0' + month;
      }
      this._date = day + '/' + month + '/' + date.getFullYear();
    }
  }, {
    key: 'domain',
    get: function get() {
      return this._domain;
    },
    set: function set(params) {
      if (params.message.body.identity !== undefined) {
        this._domain = (0, _utils.divideEmail)(params.message.body.identity.userProfile.username).domain;
      }
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type;
    },
    set: function set(params) {
      var message = params.message;
      if (message.body.value !== undefined) {
        this._type = message.body.value.resourceType;
      }
    }
  }, {
    key: 'source',
    get: function get() {
      return this._source;
    },
    set: function set(params) {
      if (params.message.body.identity !== undefined) {
        this._source = params.message.body.identity.userProfile.username;
      }
    }
  }, {
    key: 'time',
    get: function get() {
      return this._time;
    },
    set: function set(now) {
      now = new Date();
      var minutes = String(now.getMinutes());
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      this._time = parseInt(String(now.getHours()) + minutes);
    }
  }, {
    key: 'weekday',
    get: function get() {
      return this._weekday;
    },
    set: function set(now) {
      this._weekday = String(new Date().getDay());
    }
  }]);
  return ReThinkCtx;
}();

exports.default = ReThinkCtx;
module.exports = exports['default'];

},{"../utils/utils":452,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],430:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _AdvancedCondition = require('./conditions/AdvancedCondition');

var _AdvancedCondition2 = _interopRequireDefault(_AdvancedCondition);

var _Condition = require('./conditions/Condition');

var _Condition2 = _interopRequireDefault(_Condition);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Rule = function () {
  function Rule(decision, condition, scope, target, priority) {
    (0, _classCallCheck3.default)(this, Rule);

    this.decision = decision;
    this.setCondition(condition);
    this.priority = priority;
    this.scope = scope;
    this.target = target;
  }

  (0, _createClass3.default)(Rule, [{
    key: 'setCondition',
    value: function setCondition(condition) {
      if (!(condition instanceof _Condition2.default || condition instanceof _AdvancedCondition2.default || condition instanceof _AdvancedCondition2.default)) {
        var attribute = condition.attribute;
        switch (attribute) {
          case 'subscription':
            this.condition = new _AdvancedCondition2.default(condition.attribute, condition.operator, condition.params);
            break;
          case undefined:
            this.condition = new _AdvancedCondition2.default(condition);
            break;
          default:
            this.condition = new _Condition2.default(condition.attribute, condition.operator, condition.params);
        }
      } else {
        this.condition = condition;
      }
    }
  }, {
    key: 'evaluate',
    value: function evaluate(context, message, isIncoming) {
      var field = isIncoming ? message.to : message.from;
      var hypertyName = void 0;
      switch (this.scope) {
        case 'global':
          break;

        case 'hyperty':
          if ((0, _utils.isDataObjectURL)(field)) {
            var reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(field));
            if (reporter !== undefined) {
              hypertyName = context.runtimeRegistry.getHypertyName(reporter);
            }
          } else {
            if (field.split('://')[0] === 'hyperty') {
              hypertyName = context.runtimeRegistry.getHypertyName((0, _utils.removePathFromURL)(field));
            }
          }
          if (hypertyName === this.target) {
            break;
          }

          return 'Not Applicable';

        case 'identity':
          var owner = void 0;

          if ((0, _utils.isDataObjectURL)(field)) {
            var _reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(field));
            owner = context.runtimeRegistry.getHypertyOwner(_reporter);
          } else {
            if (field.split('://')[0] === 'hyperty') {
              owner = context.runtimeRegistry.getHypertyOwner((0, _utils.removePathFromURL)(field));
            }
          }
          if (owner !== undefined) {
            owner = (0, _utils.getUserEmailFromURL)(owner);
          }
          if (owner === this.target) {
            break;
          }

          return 'Not Applicable';
      }

      if (this.condition.isApplicable(context, message, this.scope, this.target)) {
        return this.decision;
      } else {
        return 'Not Applicable';
      }
    }
  }]);
  return Rule;
}();

exports.default = Rule;
module.exports = exports['default'];

},{"../utils/utils":452,"./conditions/AdvancedCondition":434,"./conditions/Condition":435,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],431:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to combine the authorization decisions that result from rules evaluation.
*/
var AllowOverrides = function () {
  function AllowOverrides() {
    (0, _classCallCheck3.default)(this, AllowOverrides);
  }

  (0, _createClass3.default)(AllowOverrides, [{
    key: 'combine',


    /**
    * Given an array of individual authorization decisions, prioritizes a positive one.
    * @param    {boolean[]}   decisions
    * @returns  {boolean}
    */
    value: function combine(decisions) {
      if (decisions.indexOf(true) !== -1) {
        return true;
      } else {
        if (decisions.indexOf(false) !== -1) {
          return false;
        } else {
          return 'Not Applicable';
        }
      }
    }
  }]);
  return AllowOverrides;
}();

exports.default = AllowOverrides;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],432:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to combine the authorization decisions that result from rules evaluation.
*/
var BlockOverrides = function () {
  function BlockOverrides() {
    (0, _classCallCheck3.default)(this, BlockOverrides);
  }

  (0, _createClass3.default)(BlockOverrides, [{
    key: 'combine',


    /**
    * Given an array of individual authorisation decisions, prioritises a negative one.
    * @param    {boolean[]}   decisions
    * @returns  {boolean}
    */
    value: function combine(decisions) {
      if (decisions.indexOf(false) !== -1) {
        return false;
      } else {
        if (decisions.indexOf(true) !== -1) {
          return true;
        } else {
          return 'Not Applicable';
        }
      }
    }
  }]);
  return BlockOverrides;
}();

exports.default = BlockOverrides;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],433:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to combine the authorization decisions that result from rules evaluation.
*/
var FirstApplicable = function () {
  function FirstApplicable() {
    (0, _classCallCheck3.default)(this, FirstApplicable);
  }

  (0, _createClass3.default)(FirstApplicable, [{
    key: 'combine',


    /**
    * Given an array of individual authorisation decisions, returns the first one different from 'Not Applicable', either positive or negative.
    * @param    {boolean[]}     decisions
    * @returns  {boolean}
    */
    value: function combine(decisions) {
      for (var i in decisions) {
        if (decisions[i] !== 'Not Applicable') {
          return decisions[i];
        }
      }
      return 'Not Applicable';
    }
  }]);
  return FirstApplicable;
}();

exports.default = FirstApplicable;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],434:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Condition = require('./Condition');

var _Condition2 = _interopRequireDefault(_Condition);

var _Operators = require('../Operators');

var _Operators2 = _interopRequireDefault(_Operators);

var _SubscriptionCondition = require('./SubscriptionCondition');

var _SubscriptionCondition2 = _interopRequireDefault(_SubscriptionCondition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AdvancedCondition = function () {
  function AdvancedCondition(condition) {
    (0, _classCallCheck3.default)(this, AdvancedCondition);

    this.operators = new _Operators2.default();
    if (condition.operators !== undefined) {
      condition = condition.condition;
    }
    condition = this.buildCondition(condition);
    this.condition = condition;
  }

  (0, _createClass3.default)(AdvancedCondition, [{
    key: 'buildCondition',
    value: function buildCondition(condition) {
      if (Array.isArray(condition[1])) {
        condition[1] = this.buildCondition(condition[1]);
      } else {
        if (condition[1].attribute === 'subscription') {
          condition[1] = new _SubscriptionCondition2.default(condition[1].attribute, condition[1].operator, condition[1].params);
        } else {
          condition[1] = new _Condition2.default(condition[1].attribute, condition[1].operator, condition[1].params);
        }
      }

      if (condition[2] !== undefined) {
        if (Array.isArray(condition[2])) {
          condition[2] = this.buildCondition(condition[2]);
        } else {
          if (condition[2].attribute === 'subscription') {
            condition[2] = new _SubscriptionCondition2.default(condition[2].attribute, condition[2].operator, condition[2].params);
          } else {
            condition[2] = new _Condition2.default(condition[2].attribute, condition[2].operator, condition[2].params);
          }
        }
      }
      return condition;
    }
  }, {
    key: 'isApplicable',
    value: function isApplicable(context, message, scope, target, operator, left, right) {
      if (!operator) {
        operator = this.condition[0];
        left = this.condition[1];
        right = this.condition[2];
      }

      while (!(left instanceof _Condition2.default) & !(left instanceof _SubscriptionCondition2.default) & typeof left !== 'boolean') {
        left = this.isApplicable(context, message, scope, target, left[0], left[1], left[2]);
      }
      if (right !== undefined) {
        while (!(right instanceof _Condition2.default) & !(right instanceof _SubscriptionCondition2.default) & typeof right !== 'boolean') {
          right = this.isApplicable(context, message, scope, target, right[0], right[1], right[2]);
        }
      }

      var resultLeft = typeof left === 'boolean' ? left : left.isApplicable(context, message, scope, target);
      var resultRight = void 0;
      if (right !== undefined) {
        resultRight = typeof right === 'boolean' ? right : right.isApplicable(context, message, scope, target);
      }
      return this.operators[operator]([resultLeft, resultRight]);
    }
  }]);
  return AdvancedCondition;
}();

exports.default = AdvancedCondition;
module.exports = exports['default'];

},{"../Operators":425,"./Condition":435,"./SubscriptionCondition":436,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],435:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Operators = require('../Operators');

var _Operators2 = _interopRequireDefault(_Operators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to represent a condition and evaluate its applicability.
*/
var Condition = function () {

  /**
  * Creates a new Condition.
  * @class
  * @param  {string}  attribute
  * @param  {string}  operator
  * @param  {*}       params
  */
  function Condition(attribute, operator, params) {
    (0, _classCallCheck3.default)(this, Condition);

    this.attribute = attribute;
    this.operator = operator;
    this.params = params;
    this.operators = new _Operators2.default();
  }

  /**
  * Verifies if the condition is applicable to the message. First, the system value that corresponds to the attribute is retrieved; then, that value is compared with the parameter specified in the condition by executing the operator implementation. If the operator is 'in' and the name of a group is given, then the array holding the members of the group is retrieved before the comparison.
  * @param  {Object}    context   environment where the Policy Engine is being used
  * @param  {Object}    message
  */


  (0, _createClass3.default)(Condition, [{
    key: 'isApplicable',
    value: function isApplicable(context, message) {
      context[this.attribute] = { message: message };
      var value = context[this.attribute];
      var tempParam = void 0;

      if (this.operator === 'in') {
        if (!Array.isArray(this.params)) {
          tempParam = context.getGroup(this.params, message.to);
          return this.operators[this.operator]([tempParam, value]);
        }
      }

      return this.operators[this.operator]([this.params, value]);
    }
  }]);
  return Condition;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = Condition;
module.exports = exports['default'];

},{"../Operators":425,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],436:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Condition2 = require('./Condition');

var _Condition3 = _interopRequireDefault(_Condition2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to represent a subscription condition and evaluate its applicability.
*/
var SubscriptionCondition = function (_Condition) {
  (0, _inherits3.default)(SubscriptionCondition, _Condition);

  /**
  * Creates a new SubscriptionCondition.
  * @class
  * @param  {string}  attribute
  * @param  {string}  operator
  * @param  {*}       params
  */
  function SubscriptionCondition(attribute, operator, params) {
    (0, _classCallCheck3.default)(this, SubscriptionCondition);
    return (0, _possibleConstructorReturn3.default)(this, (SubscriptionCondition.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition)).call(this, attribute, operator, params));
  }

  /**
  * Verifies if the subscription condition is applicable to the message. First, verifies if the message is of the subscription type; second, verifies if the message is from a remote runtime to guarantee that the subscription is being validated in the destination runtime; third, verifies if the subscription preference is met.
  * @param  {Object}    context   environment where the Policy Engine is being used
  * @param  {Object}    message
  */


  (0, _createClass3.default)(SubscriptionCondition, [{
    key: 'isApplicable',
    value: function isApplicable(context, message) {
      var isSubscription = message.type === 'subscribe';
      var isFromRemoteSM = context.isFromRemoteSM(message.from);
      if (isSubscription & isFromRemoteSM) {
        return (0, _get3.default)(SubscriptionCondition.prototype.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition.prototype), 'isApplicable', this).call(this, context, message);
      } else {
        return false;
      }
    }
  }]);
  return SubscriptionCondition;
}(_Condition3.default); /**
                        * Copyright 2016 PT Inovação e Sistemas SA
                        * Copyright 2016 INESC-ID
                        * Copyright 2016 QUOBIS NETWORKS SL
                        * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                        * Copyright 2016 ORANGE SA
                        * Copyright 2016 Deutsche Telekom AG
                        * Copyright 2016 Apizee
                        * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                        *
                        * Licensed under the Apache License, Version 2.0 (the "License");
                        * you may not use this file except in compliance with the License.
                        * You may obtain a copy of the License at
                        *
                        *   http://www.apache.org/licenses/LICENSE-2.0
                        *
                        * Unless required by applicable law or agreed to in writing, software
                        * distributed under the License is distributed on an "AS IS" BASIS,
                        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                        * See the License for the specific language governing permissions and
                        * limitations under the License.
                        **/

exports.default = SubscriptionCondition;
module.exports = exports['default'];

},{"./Condition":435,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/get":16,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],437:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _AllowOverrides = require('../combiningAlgorithms/AllowOverrides');

var _AllowOverrides2 = _interopRequireDefault(_AllowOverrides);

var _BlockOverrides = require('../combiningAlgorithms/BlockOverrides');

var _BlockOverrides2 = _interopRequireDefault(_BlockOverrides);

var _utils = require('../../utils/utils');

var _FirstApplicable = require('../combiningAlgorithms/FirstApplicable');

var _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);

var _ReThinkCtx2 = require('../ReThinkCtx');

var _ReThinkCtx3 = _interopRequireDefault(_ReThinkCtx2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RuntimeCoreCtx = function (_ReThinkCtx) {
  (0, _inherits3.default)(RuntimeCoreCtx, _ReThinkCtx);

  function RuntimeCoreCtx(idModule, runtimeRegistry, persistenceManager) {
    (0, _classCallCheck3.default)(this, RuntimeCoreCtx);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (RuntimeCoreCtx.__proto__ || (0, _getPrototypeOf2.default)(RuntimeCoreCtx)).call(this));

    _this2.idModule = idModule;
    _this2.runtimeRegistry = runtimeRegistry;
    _this2.activeUserPolicy = undefined;
    _this2.serviceProviderPolicy = {};
    _this2.userPolicies = {};
    _this2.persistenceManager = persistenceManager;
    return _this2;
  }

  (0, _createClass3.default)(RuntimeCoreCtx, [{
    key: 'loadConfigurations',
    value: function loadConfigurations() {
      this.activeUserPolicy = this.persistenceManager.get('rethink:activePolicy');

      var groups = this.persistenceManager.get('rethink:groups');
      this.groups = groups === undefined ? {} : groups;

      var spPolicies = this.persistenceManager.get('rethink:spPolicies');
      this.serviceProviderPolicy = spPolicies === undefined ? {} : spPolicies;

      this._loadUserPolicies();
    }
  }, {
    key: 'prepareForEvaluation',
    value: function prepareForEvaluation(message, isIncoming) {
      var _this3 = this;

      return new _promise2.default(function (resolve, reject) {

        var _this = _this3;
        if (isIncoming) {
          if (_this._isToCypherModule(message)) {
            _this.idModule.decryptMessage(message).then(function (message) {
              /*if (message.type === 'update') {
                _this._isValidUpdate(message).then(message => {*/
              resolve(message);
            }, function (error) {
              reject(error);
              /*});
              } else {
              resolve(message);
              }*/
            });
          } else {
            resolve(message);
          }
        } else {
          if (_this._isToSetID(message)) {
            _this._getIdentity(message).then(function (identity) {
              message.body.identity = identity;
              resolve(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        }
      });
    }
  }, {
    key: 'getPolicies',
    value: function getPolicies(message, isIncomingMessage) {
      var policies = {};

      if (this.activeUserPolicy !== undefined) {
        policies.userPolicy = this.userPolicies[this.activeUserPolicy];
      }

      policies.serviceProviderPolicy = this.getServiceProviderPolicy(message, isIncomingMessage);

      return policies;
    }
  }, {
    key: '_isValidUpdate',
    value: function _isValidUpdate(message) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        if (message.from.split('://').length > 1) {
          _this.idModule._getHypertyFromDataObject(message.from).then(function (hypertyURL) {
            if (hypertyURL === message.body.source) {
              resolve(message);
            } else {
              reject('The source of the message is not valid.');
            }
          }, function (error) {
            reject(error);
          });
        } else {
          resolve(message);
        }
      });
    }
  }, {
    key: 'prepareToForward',
    value: function prepareToForward(message, isIncoming, result) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        if (isIncoming & result) {
          var isSubscription = message.type === 'subscribe';
          var isFromRemoteSM = _this.isFromRemoteSM(message.from);
          if (isSubscription & isFromRemoteSM) {
            _this.doMutualAuthentication(message).then(function () {
              resolve(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        } else {
          if (_this._isToCypherModule(message)) {
            _this.idModule.encryptMessage(message).then(function (message) {
              resolve(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        }
      });
    }
  }, {
    key: 'doMutualAuthentication',
    value: function doMutualAuthentication(message) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        var to = message.to.split('/');
        var subsIndex = to.indexOf('subscription');
        var isDataObjectSubscription = subsIndex !== -1;
        var isFromRemoteSM = _this.isFromRemoteSM(message.from);
        if (isDataObjectSubscription & isFromRemoteSM) {
          (function () {
            to.pop();
            var dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];
            _this.idModule.doMutualAuthentication(dataObjectURL, message.body.subscriber).then(function () {
              _this.runtimeRegistry.registerSubscriber(dataObjectURL, message.body.subscriber);
              resolve();
            }, function (error) {
              reject(error);
            });
          })();
        }
      });
    }
  }, {
    key: 'getMyEmails',
    value: function getMyEmails() {
      var identities = this.idModule.getIdentities();
      var emails = [];

      for (var i in identities) {
        emails.push((0, _utils.getUserEmailFromURL)(identities[i].identity));
      }

      return emails;
    }
  }, {
    key: 'getMyHyperties',
    value: function getMyHyperties() {
      var hyperties = this.runtimeRegistry.hypertiesList;
      var hypertiesNames = [];

      for (var i in hyperties) {
        var hypertyName = hyperties[i].objectName;
        if (hypertiesNames.indexOf(hypertyName) === -1) {
          hypertiesNames.push(hypertyName);
        }
      }

      return hypertiesNames;
    }
  }, {
    key: 'getServiceProviderPolicy',
    value: function getServiceProviderPolicy(message, isIncoming) {
      var policy = void 0;

      if (isIncoming) {
        var toHyperty = this.runtimeRegistry.getHypertyName(message.to);
        policy = this.serviceProviderPolicy[toHyperty];
      } else {
        var fromHyperty = this.runtimeRegistry.getHypertyName(message.from);
        policy = this.serviceProviderPolicy[fromHyperty];
      }
      return policy;
    }
  }, {
    key: 'isFromRemoteSM',
    value: function isFromRemoteSM(from) {
      var splitFrom = from.split('://');
      return splitFrom[0] === 'runtime' && from !== this.runtimeRegistry.runtimeURL + '/sm';
    }
  }, {
    key: '_isToSetID',
    value: function _isToSetID(message) {
      var schemasToIgnore = ['domain-idp', 'runtime', 'domain'];
      var splitFrom = message.from.split('://');
      var fromSchema = splitFrom[0];

      return schemasToIgnore.indexOf(fromSchema) === -1;
    }
  }, {
    key: 'getURL',
    value: function getURL(url) {
      var splitURL = url.split('/');
      return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];
    }
  }, {
    key: '_getIdentity',
    value: function _getIdentity(message) {
      if (message.type === 'update') {
        return this.idModule.getIdentityOfHyperty(message.body.source);
      }

      if (message.type === 'response' && message.body.source !== undefined) {
        return this.idModule.getIdentityOfHyperty(message.body.source);
      }

      if ((0, _utils.divideURL)(message.from).type === 'hyperty') {
        return this.idModule.getIdentityOfHyperty(message.from);
      } else {
        return this.idModule.getIdentityOfHyperty(this.getURL(message.from));
      }
    }

    /**
    * Identifies the messages to be forwarded to the Identity Module for
    * encryption/decryption and integrity validation.
    * @param {Message}    message
    * @returns {boolean}  returns true if the message requires encryption/decryption
    *                     or if its type equals 'handshake'; false otherwise
    */

  }, {
    key: '_isToCypherModule',
    value: function _isToCypherModule(message) {
      var isCreate = message.type === 'create';
      var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
      var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';
      var isToDataObject = (0, _utils.isDataObjectURL)(message.to);

      return isCreate && isFromHyperty && isToHyperty || isCreate && isFromHyperty && isToDataObject || message.type === 'handshake' || message.type === 'update';
    }

    /**
    * Creates a group with the given name.
    * @param  {String}  groupName
    */

  }, {
    key: '_loadUserPolicies',
    value: function _loadUserPolicies() {
      var policies = this.persistenceManager.get('rethink:userPolicies');
      if (policies !== undefined) {
        for (var i in policies) {
          this.pep.addPolicy('USER', i, policies[i]);
        }
      }
    }
  }, {
    key: '_getLastComponentOfURL',
    value: function _getLastComponentOfURL(url) {
      var split = url.split('/');
      return split[split.length - 1];
    }
  }, {
    key: '_getPoliciesJSON',
    value: function _getPoliciesJSON(policies) {
      for (var i in policies) {
        var combiningAlgorithm = policies[i].combiningAlgorithm;
        if (combiningAlgorithm instanceof _BlockOverrides2.default) {
          policies[i].combiningAlgorithm = 'blockOverrides';
        } else {
          if (combiningAlgorithm instanceof _AllowOverrides2.default) {
            policies[i].combiningAlgorithm = 'allowOverrides';
          } else {
            if (combiningAlgorithm instanceof _FirstApplicable2.default) {
              policies[i].combiningAlgorithm = 'firstApplicable';
            } else {
              policies[i].combiningAlgorithm = undefined;
            }
          }
        }
      }

      return policies;
    }
  }, {
    key: 'saveActivePolicy',
    value: function saveActivePolicy() {
      this.persistenceManager.set('rethink:activePolicy', 0, this.activeUserPolicy);
    }
  }, {
    key: 'saveGroups',
    value: function saveGroups() {
      this.persistenceManager.set('rethink:groups', 0, this.groups);
    }
  }, {
    key: 'savePolicies',
    value: function savePolicies(source, policy, key) {
      var policiesJson = void 0;

      switch (source) {
        case 'USER':
          policiesJson = (0, _stringify2.default)(this.userPolicies);
          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));
          this.persistenceManager.set('rethink:userPolicies', 0, policiesJson);
          break;
        case 'SERVICE_PROVIDER':
          if (policy !== undefined & key !== undefined) {
            this.serviceProviderPolicy[key] = policy;
          }
          policiesJson = (0, _stringify2.default)(this.serviceProviderPolicy);
          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));
          this.persistenceManager.set('rethink:spPolicies', 0, policiesJson);
          break;
        default:
          throw Error('Unknown policy source: ' + source);
      }
    }
  }, {
    key: 'getGroupsNames',
    value: function getGroupsNames() {
      var myGroups = this.groups;
      var groupsNames = [];
      if (myGroups !== undefined) {
        for (var groupName in myGroups) {
          groupsNames.push(groupName);
        }
      }
      return groupsNames;
    }
  }, {
    key: 'getGroup',
    value: function getGroup(groupName, destination) {
      var members = [];

      if (groupName === 'preauthorised') {
        var dataObjectURL = destination.split('/');
        dataObjectURL.pop();
        dataObjectURL = dataObjectURL[0] + '//' + dataObjectURL[2];
        members = this.runtimeRegistry.getPreAuthSubscribers(dataObjectURL);
      } else {
        if (this.groups[groupName] !== undefined) {
          members = this.groups[groupName];
        }
      }

      return members;
    }

    /**
    * Creates a group with the given name.
    * @param  {String}  groupName
    */

  }, {
    key: 'createGroup',
    value: function createGroup(groupName) {
      this.groups[groupName] = [];
      this.saveGroups();
    }
  }, {
    key: 'deleteGroup',
    value: function deleteGroup(groupName) {
      delete this.groups[groupName];
      this.saveGroups();
    }

    /**
    * Adds the given user email to the group with the given name.
    * @param  {String}  userEmail
    * @param  {String}  groupName
    */

  }, {
    key: 'addToGroup',
    value: function addToGroup(groupName, userEmail) {
      var myGroups = this.groups;
      if (myGroups[groupName] !== undefined) {
        if (myGroups[groupName].indexOf(userEmail) === -1) {
          myGroups[groupName].push(userEmail);
          this.saveGroups();
        }
      } else {
        throw Error('Group "' + groupName + '" does not exist!');
      }
    }
  }, {
    key: 'removeFromGroup',
    value: function removeFromGroup(groupName, userEmail) {
      var group = this.groups[groupName];

      group.splice(group.indexOf(userEmail), 1);
      this.saveGroups();
    }
  }, {
    key: 'subscription',
    get: function get() {
      return this._subscription;
    },
    set: function set(params) {
      this._subscription = params.message.body.subscriber;
    }
  }]);
  return RuntimeCoreCtx;
}(_ReThinkCtx3.default);

exports.default = RuntimeCoreCtx;
module.exports = exports['default'];

},{"../../utils/utils":452,"../ReThinkCtx":429,"../combiningAlgorithms/AllowOverrides":431,"../combiningAlgorithms/BlockOverrides":432,"../combiningAlgorithms/FirstApplicable":433,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],438:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
// import MessageFactory from '../../resources/MessageFactory';

/**
 * Class will ask to the message node for addresses
 */
var AddressAllocation = function () {
  /* private
  _url: URL
  _bus: MiniBus
  */

  /**
   * Create an Address Allocation
   * @param  {URL.URL}      url - url from who is sending the message
   * @param  {MiniBus}      bus - MiniBus used for address allocation
   */
  function AddressAllocation(url, bus) {
    (0, _classCallCheck3.default)(this, AddressAllocation);

    var _this = this;

    // let messageFactory = new MessageFactory();
    //
    // _this._messageFactory = messageFactory;
    _this._url = url;
    _this._bus = bus;
  }

  /**
   * get the URL value
   * @return {string} The url value;
   */


  (0, _createClass3.default)(AddressAllocation, [{
    key: 'create',


    /**
     * Ask for creation of a number of Hyperty addresses, to the domain message node.
     * @param  {Domain} domain - Domain of the message node.
     * @param  {number} number - Number of addresses to request
     * @returns {Promise<HypertyURL>}  A list of HypertyURL's
     */
    value: function create(domain, number) {
      var _this = this;

      // let messageFactory = _this._messageFactory;

      var msg = {
        type: 'create', from: _this._url, to: 'domain://msg-node.' + domain + '/hyperty-address-allocation',
        body: { value: { number: number } }
      };

      // TODO: Apply the message factory
      // The msg-node-vertx should be changed the body field to receive
      // the following format body: {value: {number: number}} because
      // the message is generated in that way by the message factory;
      // let msg = messageFactory.createMessageRequest(_this._url, 'domain://msg-node.' + domain + '/hyperty-address-allocation', '', {number: number});

      return new _promise2.default(function (resolve, reject) {

        // TODO: change this response Message using the MessageFactory
        _this._bus.postMessage(msg, function (reply) {
          if (reply.body.code === 200) {
            resolve(reply.body.value.allocated);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }

    /**
    * Send a request to the domain message node, to deallocate one or more addresses
    * @param  {Domain} domain - Domain of the message node.
    * @param  {addresses} addresses to request the deallocation
    * @returns {Promise}  the response by the message node
    */

  }, {
    key: 'delete',
    value: function _delete(domain, addresses) {
      var _this = this;

      var message = {
        type: 'delete', from: _this._url, to: 'domain://msg-node.' + domain + '/hyperty-address-allocation',
        body: { childrenResources: addresses }
      };

      return new _promise2.default(function (resolve, reject) {

        _this._bus.postMessage(message, function (reply) {
          console.log('reply', reply);
          if (reply.body.code === 200) {
            resolve(reply.body.code);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return AddressAllocation;
}();

exports.default = AddressAllocation;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],439:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _RegistryDataModel2 = require('./RegistryDataModel');

var _RegistryDataModel3 = _interopRequireDefault(_RegistryDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)
*   HypertyInstance Data Model used to model instances of Hyperties running in devices and servers.
*/
var HypertyInstance = function (_RegistryDataModel) {
  (0, _inherits3.default)(HypertyInstance, _RegistryDataModel);

  function HypertyInstance(id, url, descriptorURL, descriptor, hypertyURL, user, guid, runtime, context) {
    (0, _classCallCheck3.default)(this, HypertyInstance);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (HypertyInstance.__proto__ || (0, _getPrototypeOf2.default)(HypertyInstance)).call(this, id, url, descriptorURL));

    var _this = _this2;
    _this._descriptor = descriptor;
    _this._hypertyURL = hypertyURL;
    _this._user = user;
    _this._guid = guid;
    _this._runtime = runtime;
    _this._context = context;
    return _this2;
  }

  (0, _createClass3.default)(HypertyInstance, [{
    key: 'user',
    set: function set(identity) {
      var _this = this;
      _this.user = identity;
    },
    get: function get() {
      var _this = this;
      return _this._user;
    }
  }, {
    key: 'hypertyURL',
    get: function get() {
      var _this = this;
      return _this._hypertyURL;
    }
  }, {
    key: 'descriptor',
    get: function get() {
      var _this = this;
      return _this._descriptor;
    }
  }, {
    key: 'objectName',
    get: function get() {
      var _this = this;
      return _this._descriptor._objectName;
    }
  }]);
  return HypertyInstance;
}(_RegistryDataModel3.default); /**
                                * Copyright 2016 PT Inovação e Sistemas SA
                                * Copyright 2016 INESC-ID
                                * Copyright 2016 QUOBIS NETWORKS SL
                                * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                * Copyright 2016 ORANGE SA
                                * Copyright 2016 Deutsche Telekom AG
                                * Copyright 2016 Apizee
                                * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                *
                                * Licensed under the Apache License, Version 2.0 (the "License");
                                * you may not use this file except in compliance with the License.
                                * You may obtain a copy of the License at
                                *
                                *   http://www.apache.org/licenses/LICENSE-2.0
                                *
                                * Unless required by applicable law or agreed to in writing, software
                                * distributed under the License is distributed on an "AS IS" BASIS,
                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                * See the License for the specific language governing permissions and
                                * limitations under the License.
                                **/


exports.default = HypertyInstance;
module.exports = exports['default'];

},{"./RegistryDataModel":441,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],440:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _AddressAllocation = require('./AddressAllocation');

var _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);

var _ObjectAllocation = require('../syncher/ObjectAllocation');

var _ObjectAllocation2 = _interopRequireDefault(_ObjectAllocation);

var _HypertyInstance = require('./HypertyInstance');

var _HypertyInstance2 = _interopRequireDefault(_HypertyInstance);

var _MessageFactory = require('service-framework/dist/MessageFactory');

var _utils = require('../utils/utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var STATUS = { DEPLOYED: 'deployed', PROGRESS: 'in-progress' };

/*import IdentityManager from './IdentityManager';
import Discovery from './Discovery';*/

/**
* Runtime Registry Interface
*/
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var Registry = function () {

  /**
  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL
  * @param  {AppSandbox}          appSandbox            appSandbox
  * @param  {runtimeCatalogue}    runtimeCatalogue      runtimeCatalogue
  * @param  {DomainURL}           remoteRegistry        remoteRegistry
  */
  function Registry(runtimeURL, appSandbox, identityModule, runtimeCatalogue, remoteRegistry) {
    (0, _classCallCheck3.default)(this, Registry);


    // how some functions receive the parameters for example:
    // new Registry('hyperty-runtime://sp1/123', appSandbox, idModule, remoteRegistry);
    // registry.registerStub(sandbox, 'sp1');
    // registry.registerHyperty(sandBox, 'hyperty-runtime://sp1/123');
    // registry.resolve('hyperty-runtime://sp1/123');

    if (!runtimeURL) throw new Error('runtimeURL is missing.');
    /*if (!remoteRegistry) throw new Error('remoteRegistry is missing');*/

    var _this = this;

    _this.registryURL = runtimeURL + '/registry/';
    _this.appSandbox = appSandbox;
    _this.runtimeURL = runtimeURL;
    _this.runtimeCatalogue = runtimeCatalogue;
    _this.remoteRegistry = remoteRegistry;
    _this.idModule = identityModule;
    _this.identifier = Math.floor(Math.random() * 10000 + 1);

    // the expires in 3600, represents 1 hour
    //the expires is in seconds, unit of measure received by the domain registry
    _this.expiresTime = 3600;

    _this.hypertiesListToRemove = {};
    _this.hypertiesList = [];
    _this.protostubsList = {};
    _this.idpProxyList = {};
    _this.dataObjectList = {};
    _this.subscribedDataObjectList = {};
    _this.sandboxesList = { sandbox: {}, appSandbox: {} };
    _this.pepList = {};

    _this._domain = (0, _utils.divideURL)(_this.registryURL).domain;
    _this.sandboxesList.appSandbox[runtimeURL] = appSandbox;
    var msgFactory = new _MessageFactory.MessageFactory('false', '{}');
    _this.messageFactory = msgFactory;
  }

  (0, _createClass3.default)(Registry, [{
    key: 'discoverHypertyPerUser',


    /**
    * function to request about users registered in domain registry, and
    * return the last hyperty instance registered by the user.
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

    // TODO: implement a cache system
    value: function discoverHypertyPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this._domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.registryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL }
      };

      console.log('Message: ', message, activeDomain, identityURL);

      //console.log('message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this._messageBus.postMessage(message, function (reply) {
          console.log('message reply', reply);

          var hyperty = void 0;
          var mostRecent = void 0;
          var lastHyperty = void 0;
          var value = reply.body.value;

          for (hyperty in value) {
            if (value[hyperty].lastModified !== undefined) {
              if (mostRecent === undefined) {
                mostRecent = new Date(value[hyperty].lastModified);
                lastHyperty = hyperty;
              } else {
                var hypertyDate = new Date(value[hyperty].lastModified);
                if (mostRecent.getTime() < hypertyDate.getTime()) {
                  mostRecent = hypertyDate;
                  lastHyperty = hyperty;
                }
              }
            }
          }

          console.log('Last Hyperty: ', lastHyperty, mostRecent);

          var hypertyURL = lastHyperty;

          if (hypertyURL === undefined) {
            return reject('User Hyperty not found');
          }

          var idPackage = {
            id: email,
            descriptor: value[hypertyURL].descriptor,
            hypertyURL: hypertyURL
          };

          console.log('===> hypertyDiscovery messageBundle: ', idPackage);
          resolve(idPackage);
        });
      });
    }
  }, {
    key: '_getIdentityAssociated',
    value: function _getIdentityAssociated(type, hypertyURL) {
      var _this = this;

      for (var hyperty in _this.hypertiesList) {
        var value = _this.hypertiesList[hyperty];
        if (value._hypertyURL === hypertyURL) {
          switch (type) {
            case 'username':
              return value._user.username;
            case 'cn':
              return value._user.cn;
            case 'locale':
              return value._user.locale;
            case 'avatar':
              return value._user.avatar;
            case 'userURL':
              return value._user.userURL;
            case '.':
              return value._user;
            default:
              return '';
          }
        }
      }
      return '';
    }

    /**
    * query the domain registry for information from a dataObject URL
    * @param  {String}   url            dataObject URL
    * @return {JSON}     dataObject     data object
    */

  }, {
    key: 'discoverDataObjectPerURL',
    value: function discoverDataObjectPerURL(url, domain) {

      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var activeDomain = void 0;

        if (!domain) {
          activeDomain = _this._domain;
        } else {
          activeDomain = domain;
        }

        var msg = {
          type: 'read', from: _this.registryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: url }
        };

        _this._messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    * This function is used to return the sandbox instance where the Application is executing. It is assumed there is just one App per Runtime instance.
    */

  }, {
    key: 'getAppSandbox',
    value: function getAppSandbox() {
      var _this = this;
      return _this.appSandbox;
    }

    /**
    * This function returns the user associated to the hyperty URL
    * @param    {String}    hypertyURL      hyperty URL
    * @return   {String}    userURL         user URL
    */

  }, {
    key: 'getHypertyOwner',
    value: function getHypertyOwner(hypertyURL) {

      var _this = this;
      var userURL = void 0;

      for (var index in _this.hypertiesList) {
        var hyperty = _this.hypertiesList[index];
        if (hyperty.hypertyURL === hypertyURL) {
          userURL = hyperty.user.userURL;
        }
      }
      return userURL;
    }

    /**
    * returns the hyperty Name from a given url. This url could be from a dataObject or hyperty
    * @param    {String}    url      hyperty or dataObject URL
    * @return   {String}    hypertyName     hyperty Name
    */

  }, {
    key: 'getHypertyName',
    value: function getHypertyName(url) {
      var _this = this;

      var isHypertyURL = (0, _utils.divideURL)(url).type === 'hyperty';

      //value to be returned in the end
      var hypertyName = void 0;

      //if is not an hyperty, check if is a dataObject and obtain his reporter
      var hypertyURL = isHypertyURL ? hypertyURL = url : _this.getReporterURLSynchonous(url);

      for (var index in _this.hypertiesList) {
        var hyperty = _this.hypertiesList[index];
        if (hyperty.hypertyURL === hypertyURL) {
          hypertyName = hyperty.objectName;
          break;
        }
      }
      return hypertyName;
    }

    /**
    * function to return the reporterURL associated with the dataobject URL
    * @param    {String}     dataObjectURL    dataObjectURL
    * @return   {String}     reporterURL      reporterURL
    */

  }, {
    key: 'getReporterURL',
    value: function getReporterURL(dataObjectURL) {
      var _this = this;

      var dataObject = _this.dataObjectList[dataObjectURL];

      return new _promise2.default(function (resolve, reject) {
        if (dataObject) {
          resolve(dataObject.reporter);
        } else {
          reject('No reporter was found');
        }
      });
    }

    /**
    * function to return the reporterURL associated with the dataobject URL. no promise returned
    * @param    {String}     dataObjectURL    dataObjectURL
    * @return   {String}     reporterURL      reporterURL
    */

  }, {
    key: 'getReporterURLSynchonous',
    value: function getReporterURLSynchonous(dataObjectURL) {
      var _this = this;

      var dataObject = _this.dataObjectList[dataObjectURL];

      return dataObject ? dataObject.reporter : undefined;
    }

    /**
    * returns the hyperty URL that subscribed the dataObject
    * @param    {String}     url            url format
    * @return   {String}    Hyperty URL subscribed to the URL
    */

  }, {
    key: 'getDataObjectSubscriberHyperty',
    value: function getDataObjectSubscriberHyperty(url) {
      var _this = this;

      return _this.subscribedDataObjectList[url];
    }

    /**
    * register a desired dataObject to subscribe
    * @param    {String}    dataObjectURL      dataObject URL
    */

  }, {
    key: 'registerSubscribedDataObject',
    value: function registerSubscribedDataObject(dataObjectURL, hypertyURL) {
      var _this = this;
      if (_this.subscribedDataObjectList[dataObjectURL] === undefined) {
        _this.subscribedDataObjectList[dataObjectURL] = hypertyURL;
      }
    }

    /**
    * Function to return the list of pre authorised users received in the creation of a data object
    * @param    {String}            dataObjectURL    dataObjectURL
    * @return   {Array<String>}     preAuth         List of pre authorised users
    */

  }, {
    key: 'getPreAuthSubscribers',
    value: function getPreAuthSubscribers(dataObjectURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];
      var preAuth = [];

      if (dataObject) {
        preAuth = dataObject.preAuth;
      }
      return preAuth;
    }

    /**
    * send requests to unregister all hyperties registered in domain registry
    * @return   {Promise}     return a promise if the result of unregistration all hyperties
    */

  }, {
    key: 'unregisterAllHyperties',
    value: function unregisterAllHyperties() {
      var _this = this;

      var unregisterResults = [];

      return new _promise2.default(function (resolve, reject) {

        for (var index in _this.hypertiesList) {
          var hyperty = _this.hypertiesList[index];
          var result = _this.unregisterHypertyInstance(hyperty.user.userURL, hyperty.hypertyURL);
          unregisterResults.push(result);
        }

        _promise2.default.all(unregisterResults).then(function () {

          resolve('successfully unregistered all hyperties');
        }, function (error) {
          reject(error);
        });
      });
    }

    /**
    *  function to unregister an hypertyInstance in the Domain Registry
    *  @param   {String}      user        user url
    *  @param   {String}      hypertyInstance   HypertyInsntance url
    *
    */

  }, {
    key: 'unregisterHypertyInstance',
    value: function unregisterHypertyInstance(user, hypertyInstance) {
      //TODO working but the user
      var _this = this;

      var message = { type: 'delete', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { value: { user: user, url: hypertyInstance } } };

      _this._messageBus.postMessage(message, function (reply) {
        console.log('unregister hyperty Reply', reply);
      });
    }

    /**
    *  function to delete an dataObjectInstance in the Domain Registry
    *  @param   {String}    name      DataObjectName
    */

  }, {
    key: 'deleteDataObjectInstance',
    value: function deleteDataObjectInstance(name) {
      var _this = this;

      var message = { type: 'delete', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { value: { name: name } } };

      _this._messageBus.postMessage(message, function (reply) {
        console.log('unregister dataObject Reply', reply);
      });
    }

    /**
    * Function to update an Hyperty
    */

  }, {
    key: 'updateHypertyInstance',
    value: function updateHypertyInstance(resource, value) {
      var _this = this;

      var message = { type: 'UPDATE', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { resource: resource, value: value } };

      _this._messageBus.post.postMessage(message, function (reply) {
        console.log('Updated hyperty reply', reply);
      });
    }

    /**
    * register a new subscriber in the dataObject registered
    * @param  {String}   dataObjectURL    dataObject URL
    * @param  {String}   subscriberURL    subscriber URL
    */

  }, {
    key: 'registerSubscriber',
    value: function registerSubscriber(dataObjectURL, subscriberURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];

      if (dataObject) {
        dataObject.subscribers.push(subscriberURL);
        _this.dataObjectList[dataObjectURL] = dataObject;
      }
    }

    /**
    * get the subscribers registered within a dataObject
    * @param  {String}          dataObjectURL    dataObject URL
    * @param  {Array<String>}   Substribers List
    */

  }, {
    key: 'getDataObjectSubscribers',
    value: function getDataObjectSubscribers(dataObjectURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];

      if (dataObject) {
        return dataObject.subscribers;
      } else {
        throw 'No dataObject was found';
      }
    }

    /**
    * To register a new Data Object in the runtime which returns the dataObjectURL allocated to the new Data Object.
    * @param  {String}      identifier                  identifier
    * @param  {String}      dataObjectschema            dataObjectschema
    * @param  {String}      dataObjectUrl               dataObjectUrl
    * @param {String}      dataObjectReporter           dataObjectReporter
    * @param  {Array}     resources                     dataObject resources
    * @param  {Array}     authorise                     list of pre authorised authorised IDs
    */

  }, {
    key: 'registerDataObject',
    value: function registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, resources, authorise) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var dataScheme = [];
        var filteredDataScheme = dataObjectUrl.split(':');
        dataScheme.push(filteredDataScheme[0]);

        //message to register the new hyperty, within the domain registry
        var messageValue = { name: identifier, resources: resources, dataSchemes: dataScheme, schema: dataObjectschema, url: dataObjectUrl, expires: _this.expiresTime, reporter: dataObjectReporter, preAuth: authorise, subscribers: [] };

        _this.dataObjectList[dataObjectUrl] = messageValue;

        /*let message = _this.messageFactory.createCreateMessageRequest(
          _this.registryURL,
          'domain://registry.' + _this.registryDomain + '/',
          messageValue,
          'policy'
        );*/

        var message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };

        _this._messageBus.postMessage(message, function (reply) {
          console.log('===> registerDataObject Reply: ', reply);
          if (reply.body.code === 200) {
            resolve('ok');
          } else {
            reject('error on register DataObject');
          }
        });
      });
    }

    /**
    * To register a new Hyperty in the runtime which returns the HypertyURL allocated to the new Hyperty.
    * @param  {Sandbox}             sandbox               sandbox
    * @param  {HypertyCatalogueURL} HypertyCatalogueURL   descriptor
    * @return {HypertyURL}          HypertyURL
    */

  }, {
    key: 'registerHyperty',
    value: function registerHyperty(sandbox, descriptorURL, descriptor) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //assuming descriptor come in this format, the service-provider-domain url is retrieved by a split instruction
        //hyperty-catalogue://<service-provider-domain>/<catalogue-object-identifier>
        var domainUrl = (0, _utils.divideURL)(descriptorURL).domain;

        if (domainUrl.includes('catalogue')) {
          domainUrl = domainUrl.replace('catalogue.', '');
        }

        _this.idModule.getIdentityAssertion().then(function (result) {
          var userProfile = result.userProfile;
          var identityURL = userProfile.userURL;

          if (_this._messageBus === undefined) {
            reject('MessageBus not found on registerStub');
          } else {
            //call check if the protostub exist
            _this.resolve('hyperty-runtime://' + domainUrl).then(function () {

              _this.registryDomain = domainUrl;

              // TODO: should be implemented with addresses poll
              // In this case we will request and return only one
              // address
              var numberOfAddresses = 1;
              _this.addressAllocation.create(domainUrl, numberOfAddresses).then(function (adderessList) {

                adderessList.forEach(function (address) {

                  _this._messageBus.addListener(address + '/status', function (msg) {
                    console.log('Message addListener for : ', address + '/status -> ' + msg);
                  });
                });

                //check whether the received sanbox e ApplicationSandbox or a normal sandbox
                if (sandbox.type === 'app') {
                  _this.sandboxesList.appSandbox[adderessList[0]] = sandbox;
                } else if (sandbox.type === 'normal') {
                  _this.sandboxesList.sandbox[adderessList[0]] = sandbox;
                } else {
                  reject('Wrong SandboxType');
                }

                var resources = void 0;

                // check if the hyperty resources is a vector or a string
                // TODO delete later when catalogue is fixed
                if (typeof descriptor.hypertyType === 'string') {
                  resources = [];
                  resources.push(descriptor.hypertyType);
                } else {
                  resources = descriptor.hypertyType;
                }

                var descriptorDataSchema = descriptor.dataObjects;
                var dataSchemasArray = [];

                //this will create a array with a Promise in each position
                for (var index in descriptorDataSchema) {
                  dataSchemasArray.push(_this.runtimeCatalogue.getDataSchemaDescriptor(descriptorDataSchema[index]));
                }

                // as soon as the previous array is completed, this will wait for the resolve of all promises in the array
                _promise2.default.all(dataSchemasArray).then(function (dataSchemas) {

                  var filteredDataSchemas = [];
                  for (var _index in dataSchemas) {
                    var dataSchema = dataSchemas[_index];
                    filteredDataSchemas.push(dataSchema.sourcePackage.sourceCode.properties.scheme.constant);
                  }

                  var hyperty = new _HypertyInstance2.default(_this.identifier, _this.registryURL, descriptorURL, descriptor, adderessList[0], userProfile);

                  hyperty._resources = resources;
                  hyperty._dataSchemes = filteredDataSchemas;
                  _this.hypertiesList.push(hyperty);

                  //message to register the new hyperty, within the domain registry
                  var messageValue = { user: identityURL, descriptor: descriptorURL, url: adderessList[0], expires: _this.expiresTime, resources: resources, dataSchemes: filteredDataSchemas };

                  /*let message = _this.messageFactory.createCreateMessageRequest(
                    _this.registryURL,
                    'domain://registry.' + _this.registryDomain + '/',
                    messageValue,
                    'policy'
                  );*/

                  var message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };

                  _this._messageBus.postMessage(message, function (reply) {
                    console.log('===> RegisterHyperty Reply: ', reply);

                    if (reply.body.code === 200) {
                      resolve(adderessList[0]);
                    } else {
                      reject('Failed to register an Hyperty');
                    }
                  });

                  //timer to keep the registration alive
                  // the time is defined by a little less than half of the expires time defined
                  var keepAliveTimer = setInterval(function () {

                    /*let message = _this.messageFactory.createCreateMessageRequest(
                      _this.registryURL,
                      'domain://registry.' + _this.registryDomain + '/',
                      messageValue,
                      'policy'
                    );*/
                    var message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };

                    _this._messageBus.postMessage(message, function (reply) {
                      console.log('===> KeepAlive Reply: ', reply);
                    });
                  }, _this.expiresTime / 1.1 / 2 * 1000);

                  console.log('Hyperty Schemas', filteredDataSchemas);
                  console.log('Hyperty resources', resources);
                });
              }).catch(function (reason) {
                console.log('Address Reason: ', reason);
                reject(reason);
              });
            });
          }
        }, function (err) {
          reject('Failed to obtain an identity');
        });
      });
    }

    /**
    * To unregister a previously registered Hyperty
    * @param  {HypertyURL}          HypertyURL url        url
    */

  }, {
    key: 'unregisterHyperty',
    value: function unregisterHyperty(url) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var found = false;
        var index = 0;

        for (index = 0; index < _this.hypertiesList.length; index++) {
          var hyperty = _this.hypertiesList[index];
          if (hyperty !== undefined) {
            if (hyperty.hypertyURL === url) {
              found = true;
              break;
            }
          }
        }

        if (found === false) {
          reject('Hyperty not found');
        } else {
          delete _this.hypertiesList[index];
          resolve('Hyperty successfully deleted');
        }
      });
    }

    /**
    * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).
    * @param  {DomainURL}           DomainURL            url
    * @return {RuntimeURL}           RuntimeURL
    */

  }, {
    key: 'discoverProtostub',
    value: function discoverProtostub(url) {
      if (!url) throw new Error('Parameter url needed');
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var dividedURL = (0, _utils.divideURL)(url);
        var domainURL = dividedURL.domain;

        if (_this.protostubsList.hasOwnProperty(domainURL) && _this.protostubsList[domainURL].status === STATUS.DEPLOYED) {
          resolve(_this.protostubsList[domainURL]);
        } else {
          _this.protostubsList[domainURL] = {
            status: STATUS.PROGRESS
          };

          reject('requestUpdate couldn\'t get the ProtostubURL');
        }
      });
    }

    /**
     * To register a new Protocol Stub in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.
     * @param {Sandbox}        Sandbox
     * @param  {DomainURL}     DomainURL service provider domain
     * @return {RuntimeProtoStubURL}
     */

  }, {
    key: 'registerStub',
    value: function registerStub(sandbox, domainURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var runtimeProtoStubURL = void 0;

        //check if messageBus is registered in registry or not
        if (_this._messageBus === undefined) {
          reject('MessageBus not found on registerStub');
        }

        //TODO implement a unique number for the protostubURL
        if (!domainURL.indexOf('msg-node.')) {
          domainURL = domainURL.substring(domainURL.indexOf('.') + 1);
        }

        runtimeProtoStubURL = 'msg-node.' + domainURL + '/protostub/' + Math.floor(Math.random() * 10000 + 1);

        // TODO: Optimize this
        // Proxy;
        _this.protostubsList[domainURL] = {
          url: runtimeProtoStubURL,
          status: STATUS.DEPLOYED
        };

        // _this.protostubsList[domainURL] = runtimeProtoStubURL;
        _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;

        // sandbox.addListener('*', function(msg) {
        //   _this._messageBus.postMessage(msg);
        // });

        resolve(runtimeProtoStubURL);

        _this._messageBus.addListener(runtimeProtoStubURL + '/status', function (msg) {
          if (msg.resource === msg.to + '/status') {
            console.log('RuntimeProtostubURL/status message: ', msg.body.value);
          }
        });
      });
    }

    /**
    * To unregister a previously registered protocol stub
    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     hypertyRuntimeURL
    */

  }, {
    key: 'unregisterStub',
    value: function unregisterStub(hypertyRuntimeURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        if (_this.protostubsList.hasOwnProperty(hypertyRuntimeURL)) {
          delete _this.protostubsList[hypertyRuntimeURL];
          resolve('ProtostubURL removed');
        } else {
          reject('Error on unregisterStub: Hyperty not found');
        }
      });
    }

    /**
     * To register a new Identity Provider proxy in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.
     * @param {Sandbox}        Sandbox
     * @param  {DomainURL}     DomainURL service provider domain
     * @return {RuntimeIdpProxyURL}
     */

  }, {
    key: 'registerIdpProxy',
    value: function registerIdpProxy(sandbox, domainURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var idpProxyStubURL = void 0;

        //check if messageBus is registered in registry or not
        if (_this._messageBus === undefined) {
          reject('MessageBus not found on registerStub');
        }

        idpProxyStubURL = 'domain-idp://' + domainURL + '/stub/' + Math.floor(Math.random() * 10000 + 1);

        // TODO: Optimize this
        _this.idpProxyList[domainURL] = {
          url: idpProxyStubURL,
          status: STATUS.PROGRESS
        };

        _this.sandboxesList.sandbox[idpProxyStubURL] = sandbox;

        // sandbox.addListener('*', function(msg) {
        //   _this._messageBus.postMessage(msg);
        // });

        resolve(idpProxyStubURL);

        _this._messageBus.addListener(idpProxyStubURL + '/status', function (msg) {
          if (msg.resource === msg.to + '/status') {
            console.log('idpProxyStubURL/status message: ', msg.body.value);
          }
        });
      });
    }

    /**
    * To discover idpProxy stubs available in the runtime for a certain domain. If available, it returns the runtime url for the idpProxy stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers
    * @param  {DomainURL}           DomainURL            url
    * @return {RuntimeURL}           RuntimeURL         idpProxyUrl
    */

  }, {
    key: 'discoverIdpProxy',
    value: function discoverIdpProxy(url) {
      if (!url) throw new Error('Parameter url needed');
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var dividedURL = (0, _utils.divideURL)(url);
        var domainURL = dividedURL.domain;

        if (_this.idpProxyList.hasOwnProperty(domainURL) && _this.idpProxyList[domainURL].status === STATUS.DEPLOYED) {
          resolve(_this.idpProxyList[domainURL]);
        } else {
          // TODO: Optimize this
          _this.idpProxyList[domainURL] = {
            status: STATUS.PROGRESS
          };
          reject('requestUpdate couldn\'t get the idpProxyURL');
        }
      });
    }

    /**
    * To register a new Policy Enforcer in the runtime including as input parameters the function to postMessage, the HypertyURL associated with the PEP, which returns the RuntimeURL allocated to the new Policy Enforcer component.
    * @param  {Message.Message} postMessage postMessage
    * @param  {HypertyURL}          HypertyURL            hyperty
    * @return {HypertyRuntimeURL}   HypertyRuntimeURL
    */

  }, {
    key: 'registerPEP',
    value: function registerPEP(postMessage, hyperty) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        //TODO check what parameter in the postMessage the pep is.
        _this.pepList[hyperty] = postMessage;
        resolve('PEP registered with success');
      });
    }

    /**
    * To unregister a previously registered protocol stub
    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     HypertyRuntimeURL
    */

  }, {
    key: 'unregisterPEP',
    value: function unregisterPEP(HypertyRuntimeURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var result = _this.pepList[HypertyRuntimeURL];

        if (result === undefined) {
          reject('Pep Not found.');
        } else {
          resolve('PEP successfully removed.');
        }
      });
    }

    /**
    * To receive status events from components registered in the Registry.
    * @param  {Message.Message}     Message.Message       event
    */

  }, {
    key: 'onEvent',
    value: function onEvent(event) {
      // TODO body...
      console.log('onEvent');
    }

    /**
    * To discover sandboxes available in the runtime for a certain domain. Required by the runtime UA to avoid more than one sandbox for the same domain.
    * @param  {DomainURL} DomainURL url
    * @return {RuntimeSandbox}           RuntimeSandbox
    */

  }, {
    key: 'getSandbox',
    value: function getSandbox(url) {
      if (!url) throw new Error('Parameter url needed');
      console.log('getSandbox: ', url);

      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        var request = void 0;

        //first try to find the url in the appSandbox list
        request = _this.sandboxesList.appSandbox[url];

        //if no appSandbox was found, try to search in the normal sandboxes list
        if (!request) {
          request = _this.sandboxesList.sandbox[url];

          if (!request) {

            var domain = (0, _utils.divideURL)(url).domain;

            // search in the sandboxes list for a entry containing the domain given
            for (var sandbox in _this.sandboxesList.sandbox) {
              if (sandbox.includes(domain)) {
                request = _this.sandboxesList.sandbox[sandbox];
                break;
              }
            }
          }
        }

        if (!request) {
          reject('no sandbox found for: ' + url);
        } else {
          resolve(request);
        }
      });
    }

    /**
    * To verify if source is valid and to resolve target runtime url address if needed (eg protostub runtime url in case the message is to be dispatched to a remote endpoint).
    * @param  {URL.URL}  url       url
    * @return {Promise<URL.URL>}                 Promise <URL.URL>
    */

  }, {
    key: 'resolve',
    value: function resolve(url) {
      console.log('resolve ' + url);
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //split the url to find the domainURL. deals with the url for example as:
        //"hyperty-runtime://sp1/protostub/123",
        var dividedURL = (0, _utils.divideURL)(url);
        var domainUrl = dividedURL.domain;
        var type = dividedURL.type;

        // resolve the domain protostub in case of a message to global registry
        if (url.includes('global://registry')) {
          domainUrl = _this._domain;
        }

        if (!domainUrl.indexOf('msg-node.') || !domainUrl.indexOf('registry.')) {
          domainUrl = domainUrl.substring(domainUrl.indexOf('.') + 1);
        }

        var registredComponent = void 0;
        if (type === 'domain-idp') {
          registredComponent = _this.idpProxyList.hasOwnProperty(domainUrl) ? _this.idpProxyList[domainUrl] : false;
        } else {
          registredComponent = _this.protostubsList.hasOwnProperty(domainUrl) ? _this.protostubsList[domainUrl] : false;
        }

        if (registredComponent && registredComponent.hasOwnProperty('status') && registredComponent.status === STATUS.DEPLOYED) {
          console.info('Resolved: ', registredComponent.url);
          resolve(registredComponent.url);
        } else {
          if (type === 'domain-idp') {
            // _this.trigger('runtime:loadIdpProxy', domainUrl);

            _this._loader.loadIdpProxy(domainUrl).then(function (result) {
              registredComponent = _this.idpProxyList[domainUrl];
              console.info('Resolved IDPProxy: ', registredComponent, result);
              _this.idpProxyList[domainUrl].status = STATUS.DEPLOYED;
              resolve(registredComponent.url);
            }).catch(function (reason) {
              console.error('Error resolving IDPProxy: ', reason);
              reject(reason);
            });
          } else {
            // _this.trigger('runtime:loadStub', domainUrl);

            _this._loader.loadStub(domainUrl).then(function (result) {
              registredComponent = _this.protostubsList[domainUrl];
              console.info('Resolved Protostub: ', registredComponent, result);
              _this.protostubsList[domainUrl].status = STATUS.DEPLOYED;
              resolve(registredComponent.url);
            }).catch(function (reason) {
              console.error('Error resolving Protostub: ', reason);
              reject(reason);
            });
          }
        }
      });
    }
  }, {
    key: 'loader',
    set: function set(loader) {
      var _this = this;
      _this._loader = loader;
    },
    get: function get() {
      var _this = this;
      return _this._loader;
    }

    /**
    * return the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */

  }, {
    key: 'messageBus',
    get: function get() {
      var _this = this;
      return _this._messageBus;
    }

    /**
    * Set the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */
    ,
    set: function set(messageBus) {
      var _this = this;
      _this._messageBus = messageBus;

      _this._messageBus.addListener(_this.registryURL, function (msg) {

        var userUrl = _this._getIdentityAssociated(msg.body.resource, msg.body.criteria);

        var reply = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { resource: userUrl } };
        reply.body.code = userUrl ? 200 : 404;

        _this._messageBus.postMessage(reply);
      });

      // also set up messageBus in the IdentityModule component
      // TODO redefine a better way to add the messageBus in the IdModule
      _this.idModule.messageBus = messageBus;

      // Install AddressAllocation
      var addressAllocation = new _AddressAllocation2.default(_this.registryURL, messageBus);
      _this.addressAllocation = addressAllocation;

      //Install ObjectAllocation
      var objectAllocation = new _ObjectAllocation2.default(_this.registryURL + '/object-allocation', messageBus);
      _this.objectAllocation = objectAllocation;

      /*let discovery = new Discovery(_this.registryURL, messageBus);
      _this.discovery = discovery;
       let identityManager = new IdentityManager('hyperty://localhost/833a6e52-515b-498b-a57b-e3daeece48d2', _this.runtimeURL, messageBus);
      _this.identityManager = identityManager;*/
    }
  }]);
  return Registry;
}();

exports.default = Registry;
module.exports = exports['default'];

},{"../syncher/ObjectAllocation":446,"../utils/utils.js":452,"./AddressAllocation":438,"./HypertyInstance":439,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"service-framework/dist/MessageFactory":416}],441:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
/**
*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)
*   Registry Data Model includes all Objects to be handled by the Registry functionality including
*/
var RegistryDataModel = function () {
  function RegistryDataModel(id, url, descriptorURL, startingTime, lastModified, status, stubs, stubsConfiguration) {
    (0, _classCallCheck3.default)(this, RegistryDataModel);

    var _this = this;

    _this._id = id;
    _this._url = url;
    _this._descriptorURL = descriptorURL;
    _this._startingTime = startingTime;
    _this._lastModified = lastModified;
    _this._status = status;
    _this._stubs = stubs;
    _this._stubsConfiguration = stubsConfiguration;
  }

  (0, _createClass3.default)(RegistryDataModel, [{
    key: "id",
    get: function get() {
      var _this = this;
      return _this._id;
    }
  }, {
    key: "url",
    get: function get() {
      var _this = this;
      return _this._url;
    }
  }, {
    key: "descriptor",
    get: function get() {
      var _this = this;
      return _this._descriptorURL;
    }
  }]);
  return RegistryDataModel;
}();

exports.default = RegistryDataModel;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],442:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Descriptors = function () {
  function Descriptors(runtimeURL, catalogue, runtimeConfiguration) {
    (0, _classCallCheck3.default)(this, Descriptors);

    if (!runtimeURL) throw Error('The descriptor need to know the runtime url to be used');
    if (!catalogue) throw Error('The descriptor needs the catalogue instance');
    if (!runtimeConfiguration) throw Error('The descriptor needs the runtime configuration');

    this.runtimeConfiguration = runtimeConfiguration;
    this.runtimeURL = runtimeURL;
    this.catalogue = catalogue;
  }

  (0, _createClass3.default)(Descriptors, [{
    key: 'getHypertyDescriptor',
    value: function getHypertyDescriptor(hypertyURL) {
      return this.catalogue.getHypertyDescriptor(hypertyURL);
    }
  }, {
    key: 'getStubDescriptor',
    value: function getStubDescriptor(stubURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var dividedURL = (0, _utils.divideURL)(stubURL);
        var domain = dividedURL.domain;
        var protostub = dividedURL.identity;
        var protoStubURL = void 0;

        var originDividedURL = (0, _utils.divideURL)(_this.runtimeURL);
        var originDomain = originDividedURL.domain;

        if (!domain) {
          domain = idpProxyURL;
        }

        if (!protostub) {
          protostub = 'default';
        } else {
          protostub = protostub.substring(protostub.lastIndexOf('/') + 1);
        }

        protoStubURL = (0, _utils.buildURL)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub', protostub);
        if (domain !== _this.runtimeConfiguration.domain) {
          if (!stubURL.indexOf('https') || !stubURL.indexOf('hyperty-catalogue')) {
            protoStubURL = stubURL;
          } else {

            // TODO: check how to load form different configuration domain
            var resource = (0, _utils.getConfigurationResources)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');
            protoStubURL = resource.prefix + domain + resource.suffix + protostub;
          }
        }

        console.log('Load ProtocolStub for domain, ' + domain + ' : ', protoStubURL);
        return _this.catalogue.getStubDescriptor(protoStubURL).then(function (result) {

          resolve(result);
        }).catch(function (error) {

          console.log('Error: ', error);

          protostub = domain;
          domain = originDomain;

          var resource = (0, _utils.getConfigurationResources)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');
          protoStubURL = resource.prefix + domain + resource.suffix + protostub;

          console.log('Fallback -> Load Protocolstub for domain, ' + domain + ' : ', protostub);
          return _this.catalogue.getStubDescriptor(protoStubURL);
        }).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }, {
    key: 'getIdpProxyDescriptor',
    value: function getIdpProxyDescriptor(idpProxyURL) {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {

        var dividedURL = (0, _utils.divideURL)(idpProxyURL);
        var domain = dividedURL.domain;
        var idpproxy = dividedURL.identity;

        var originDividedURL = (0, _utils.divideURL)(_this2.runtimeURL);
        var originDomain = originDividedURL.domain;

        if (!domain) {
          domain = idpProxyURL;
        }

        if (domain === originDomain || !idpproxy) {
          idpproxy = 'default';
        } else {
          idpproxy = idpproxy.substring(idpproxy.lastIndexOf('/') + 1);
        }

        var resource = (0, _utils.getConfigurationResources)(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy');

        idpProxyURL = resource.prefix + domain + resource.suffix + idpproxy;
        console.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);
        return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL).then(function (result) {

          resolve(result);
        }).catch(function () {

          idpproxy = domain;
          domain = originDomain;

          idpProxyURL = (0, _utils.buildURL)(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy', idpproxy);

          console.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);
          return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL);
        }).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }]);
  return Descriptors;
}();

exports.default = Descriptors;
module.exports = exports['default'];

},{"../utils/utils":452,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],443:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Descriptors = require('./Descriptors');

var _Descriptors2 = _interopRequireDefault(_Descriptors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Loader = function () {
  function Loader(runtimeConfiguration) {
    (0, _classCallCheck3.default)(this, Loader);

    if (!runtimeConfiguration) throw Error('The descriptor need to know the runtime configuration');
    this.runtimeConfiguration = runtimeConfiguration;
  }

  /**
   * Set runtime url
   * @param  {string} value runtimeURL
   */


  (0, _createClass3.default)(Loader, [{
    key: 'loadHyperty',


    /**
    * Deploy Hyperty from Catalogue URL
    * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;
    */
    value: function loadHyperty(hypertyDescriptorURL) {
      var _this = this;

      if (!this._readyToUse()) return false;
      if (!hypertyDescriptorURL) throw new Error('Hyperty descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var _hypertyURL = void 0;
        var _hypertySandbox = void 0;
        var _hypertyDescriptor = void 0;
        var _hypertySourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.error('Something failed on the deploy hyperty: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Get Hyperty descriptor
        // TODO: the request Module should be changed,
        // because at this moment it is incompatible with nodejs;
        // Probably we need to pass a factory like we do for sandboxes;
        console.info('------------------ Hyperty ------------------------');
        console.info('Get hyperty descriptor for :', hypertyDescriptorURL);
        return _this.descriptors.getHypertyDescriptor(hypertyDescriptorURL).then(function (hypertyDescriptor) {
          // at this point, we have completed "step 2 and 3" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md
          console.info('1: return hyperty descriptor');

          // hyperty contains the full path of the catalogue URL, e.g.
          // catalogue.rethink.eu/.well-known/..........
          _hypertyDescriptor = hypertyDescriptor;

          var sourcePackageURL = hypertyDescriptor.sourcePackageURL;

          if (sourcePackageURL === '/sourcePackage') {
            return hypertyDescriptor.sourcePackage;
          }

          // Get the hyperty source code
          return _this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
        }, handleError).then(function (sourcePackage) {
          if (haveError) return false;

          console.info('2: return hyperty source code');

          // at this point, we have completed "step 4 and 5" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md

          _hypertySourcePackage = sourcePackage;

          //
          // steps 6 -- 9 are skipped.
          // TODO: on release of core 0.2;
          // TODO: Promise to check the policy engine

          // mock-up code;
          // temporary code, only
          var policy = true;

          return policy;
        }, handleError).then(function (policyResult) {
          if (haveError) return false;
          console.info('3: return policy engine result' + policyResult);

          // we have completed step 6 to 9 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          //
          // Steps 6 -- 9
          // As a result of the sipped steps, we know at this point if we execute
          // inSameSandbox or not.
          //

          // For testing, just assume we execute in same Sandbox.
          var inSameSandbox = true;
          var sandbox = void 0;

          if (inSameSandbox) {

            // this don't need be a Promise;
            sandbox = _this.registry.getAppSandbox();

            // we have completed step 11 here.
          } else {

            var domain = (0, _utils.divideURL)(hypertyDescriptorURL).domain;

            // getSandbox, this will return a promise;
            sandbox = _this.registry.getSandbox(domain);
          }

          // this will return the sandbox or one promise to getSandbox;
          return sandbox;
        }, handleError).then(function (sandbox) {
          if (haveError) return false;
          console.info('4: return the sandbox', sandbox);

          // Return the sandbox indepentely if it running in the same sandbox or not
          // we have completed step 14 here.
          return sandbox;
        }, function (reason) {
          if (haveError) return false;
          console.error('4.1: Try to register a new sandbox');

          // check if the sandbox is registed for this hyperty descriptor url;
          // Make Steps xxx --- xxx
          // Instantiate the Sandbox
          var sandbox = _this._runtimeFactory.createSandbox();

          sandbox.addListener('*', function (msg) {
            _this.messageBus.postMessage(msg);
          });

          return sandbox;
        }, handleError).then(function (sandbox) {
          if (haveError) return false;
          console.info('5: return sandbox and register');

          _hypertySandbox = sandbox;

          // Register hyperty
          return _this.registry.registerHyperty(sandbox, hypertyDescriptorURL, _hypertyDescriptor);
        }, handleError).then(function (hypertyURL) {
          if (haveError) return false;
          console.info('6: Hyperty url, after register hyperty', hypertyURL);

          // we have completed step 16 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          _hypertyURL = hypertyURL;

          // Extend original hyperty configuration;
          var configuration = {};
          if (!(0, _utils.emptyObject)(_hypertyDescriptor.configuration)) {
            try {
              configuration = (0, _assign2.default)({}, JSON.parse(_hypertyDescriptor.configuration));
            } catch (e) {
              configuration = _hypertyDescriptor.configuration;
            }
          }
          configuration.runtimeURL = _this._runtimeURL;

          // We will deploy the component - step 17 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.

          try {
            return _hypertySandbox.deployComponent(_hypertySourcePackage.sourceCode, _hypertyURL, configuration);
          } catch (e) {
            console.error('Error on deploy component:', e);
            reject(e);
          }
        }, handleError).then(function (deployComponentStatus) {
          if (haveError) return false;
          console.info('7: Deploy component status for hyperty: ', deployComponentStatus);

          // we have completed step 19 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.

          // Add the message bus listener to the appSandbox or hypertSandbox;
          _this.messageBus.addListener(_hypertyURL, function (msg) {
            _hypertySandbox.postMessage(msg);
          });

          // we have completed step 20 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          var hyperty = {
            runtimeHypertyURL: _hypertyURL,
            status: deployComponentStatus
          };

          resolve(hyperty);

          // we have completed step 21 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          console.info('------------------ END ------------------------');
        }, handleError).catch(errorReason);
      });
    }

    /**
    * Deploy Stub from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadStub',
    value: function loadStub(protostubURL) {
      var _this2 = this;

      if (!this._readyToUse()) return false;
      if (!protostubURL) throw new Error('ProtoStub descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var domain = (0, _utils.divideURL)(protostubURL).domain;

        if (!domain) {
          domain = protostubURL;
        }

        var _stubSandbox = void 0;
        var _stubDescriptor = void 0;
        var _runtimeProtoStubURL = void 0;
        var _stubSourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.error('Something failed on the deploy of protocolstub: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Discover Protocol Stub
        console.info('------------------- ProtoStub ---------------------------\n');
        console.info('Discover or Create a new ProtoStub for domain: ', domain);
        _this2.registry.discoverProtostub(domain).then(function (runtimeProtoStubURL) {
          // Is registed?
          console.info('1. Proto Stub Discovered for ', domain, ': ', runtimeProtoStubURL);

          // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          // TODO: Check if the status is saved in the status of sandbox;
          // let stub = {
          //   runtimeProtoStubURL: runtimeProtoStubURL,
          //   status: 'deployed'
          // };
          var stub = _this2.registry.protostubsList[domain];
          resolve(stub);
          console.info('------------------- END ---------------------------\n');
        }).catch(function (reason) {

          // is not registed?
          console.info('1. Proto Stub not found ' + reason);

          // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          _this2.descriptors.getStubDescriptor(protostubURL).then(function (stubDescriptor) {
            if (haveError) return false;
            console.info('2. return the ProtoStub descriptor');

            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            _stubDescriptor = stubDescriptor;

            var sourcePackageURL = stubDescriptor.sourcePackageURL;

            if (sourcePackageURL === '/sourcePackage') {
              return stubDescriptor.sourcePackage;
            }

            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
          }, handleError).catch(errorReason).then(function (stubSourcePackage) {
            if (haveError) return false;
            console.info('3. return the ProtoStub Source Code');

            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _stubSourcePackage = stubSourcePackage;

            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;
            var policy = true;
            return policy;
          }, handleError).then(function (policy) {
            if (haveError) return false;

            // this will return the sandbox or one promise to getSandbox;
            return _this2.registry.getSandbox(domain);
          }).then(function (stubSandbox) {
            if (haveError) return false;
            console.info('4. if the sandbox is registered then return the sandbox ', stubSandbox);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _stubSandbox = stubSandbox;
            return stubSandbox;
          }).catch(function (reason) {
            if (haveError) return false;
            console.info('5. Sandbox was not found, creating a new one ', reason);

            // check if the sandbox is registed for this stub descriptor url;
            // Make Steps xxx --- xxx
            // Instantiate the Sandbox
            var sandbox = _this2._runtimeFactory.createSandbox();
            sandbox.addListener('*', function (msg) {
              _this2.messageBus.postMessage(msg);
            });

            return sandbox;
          }).then(function (sandbox) {
            if (haveError) return false;
            console.info('6. return the sandbox instance and register', sandbox, 'to domain ', domain);

            _stubSandbox = sandbox;

            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.registry.registerStub(_stubSandbox, domain);
          }, handleError).then(function (runtimeProtoStubURL) {
            if (haveError) return false;
            console.info('7. return the runtime protostub url: ', runtimeProtoStubURL);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _runtimeProtoStubURL = runtimeProtoStubURL;

            // Extend original hyperty configuration;
            var configuration = {};
            if (!(0, _utils.emptyObject)(_stubDescriptor.configuration)) {
              try {
                configuration = (0, _assign2.default)({}, JSON.parse(_stubDescriptor.configuration));
              } catch (e) {
                configuration = _stubDescriptor.configuration;
              }
            }

            configuration.runtimeURL = _this2._runtimeURL;

            // Deploy Component step xxx
            try {
              return _stubSandbox.deployComponent(_stubSourcePackage.sourceCode, runtimeProtoStubURL, configuration);
            } catch (e) {
              console.error('Error on deploy component:', e);
              reject(e);
            }
          }, handleError).then(function (deployComponentStatus) {
            if (haveError) return false;
            console.info('8: return deploy component for sandbox status: ', deployComponentStatus);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Add the message bus listener
            _this2.messageBus.addListener(_runtimeProtoStubURL, function (msg) {
              _stubSandbox.postMessage(msg);
            });

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            var stub = _this2.registry.protostubsList[domain];

            // // Load Stub function resolved with success;
            // let stub = {
            //   runtimeProtoStubURL: _runtimeProtoStubURL,
            //   status: deployComponentStatus
            // };

            console.log('Deployed: ', stub, domain, _this2.registry.protostubsList);

            resolve(stub);
            console.info('------------------- END ---------------------------\n');
          }, handleError).catch(errorReason);
        });
      });
    }

    /**
    * Deploy idpProxy from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadIdpProxy',
    value: function loadIdpProxy(idpProxyURL) {
      var _this3 = this;

      if (!this._readyToUse()) return false;
      if (!idpProxyURL) throw new Error('IdpProxy descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var domain = (0, _utils.divideURL)(idpProxyURL).domain;

        if (!domain) {
          domain = idpProxyURL;
        }

        var _proxySandbox = void 0;
        var _proxyDescriptor = void 0;
        var _runtimeIdpProxyURL = void 0;
        var _proxySourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.error('Something failed on the deploy of IdpProxy: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Discover IDPProxy
        console.info('------------------- IDP Proxy Deploy ---------------------------\n');
        console.info('Discover or Create a new IdpProxy for domain/URL: ', domain);
        return _this3.registry.discoverIdpProxy(domain).then(function (runtimeIdpProxyURL) {
          // Is registed?
          console.info('1. IDPProxy Discovered: ', runtimeIdpProxyURL);

          // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          var idpProxy = _this3.registry.idpProxyList[domain];
          console.log('Deployed: ', idpProxy);

          resolve(idpProxy);
          console.info('------------------- END ---------------------------\n');
        }).catch(function (reason) {

          // is not registed?
          console.info('1. IdpProxy not found:', reason);

          // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          _this3.descriptors.getIdpProxyDescriptor(idpProxyURL).then(function (proxyDescriptor) {

            console.info('2. Return the IDPProxy descriptor');

            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            _proxyDescriptor = proxyDescriptor;

            var sourcePackageURL = proxyDescriptor.sourcePackageURL;

            if (sourcePackageURL === '/sourcePackage') {
              return proxyDescriptor.sourcePackage;
            }

            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this3.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
          }, handleError).then(function (sourcePackage) {
            if (haveError) return false;
            console.info('3. return the IDPProxy source package');

            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _proxySourcePackage = sourcePackage;

            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;
            var policy = true;
            return policy;
          }, handleError).then(function (policy) {
            if (haveError) return false;

            // this will return the sandbox or one promise to getSandbox;
            return _this3.registry.getSandbox(domain);
          }).then(function (proxySandbox) {
            if (haveError) return false;
            console.info('4. if the sandbox is registered then return the sandbox', proxySandbox);

            _proxySandbox = proxySandbox;
            return proxySandbox;
          }).catch(function (reason) {
            if (haveError) return false;
            console.info('5. Sandbox was not found, creating a new one', reason);

            // check if the sandbox is registed for this proxy descriptor url;
            // Make Steps xxx --- xxx
            // Instantiate the Sandbox
            var sandbox = _this3._runtimeFactory.createSandbox();
            sandbox.addListener('*', function (msg) {
              _this3.messageBus.postMessage(msg);
            });

            return sandbox;
          }).then(function (sandbox) {
            if (haveError) return false;
            console.info('6. return the sandbox instance and register', sandbox, 'to domain ', domain);

            _proxySandbox = sandbox;

            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this3.registry.registerIdpProxy(sandbox, domain);
          }, handleError).then(function (runtimeIdpProxyURL) {
            if (haveError) return false;
            console.info('7. Return the runtime Idp Proxy URL: ', runtimeIdpProxyURL);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _runtimeIdpProxyURL = runtimeIdpProxyURL;

            // Extend original hyperty configuration;
            var configuration = {};
            if (!(0, _utils.emptyObject)(_proxyDescriptor.configuration)) {
              try {
                configuration = (0, _assign2.default)({}, JSON.parse(_proxyDescriptor.configuration));
              } catch (e) {
                configuration = _proxyDescriptor.configuration;
              }
            }
            configuration.runtimeURL = _this3._runtimeURL;

            // Deploy Component step xxx
            try {
              return _proxySandbox.deployComponent(_proxySourcePackage.sourceCode, runtimeIdpProxyURL, configuration);
            } catch (e) {
              console.error('Error on deploy component:', e);
              reject(e);
            }
          }, handleError).then(function (deployComponentStatus) {
            if (haveError) return false;
            console.info('8: return deploy component for sandbox status: ', deployComponentStatus);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Add the message bus listener
            _this3.messageBus.addListener(_runtimeIdpProxyURL, function (msg) {
              _proxySandbox.postMessage(msg);
            });

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Load Stub function resolved with success;
            // let idpProxy = {
            //   runtimeIdpProxyURL: _runtimeIdpProxyURL,
            //   status: deployComponentStatus
            // };

            _this3.registry.idpProxyList[domain].status = 'deployed';
            var idpProxy = _this3.registry.idpProxyList[domain];

            console.log('Deployed: ', idpProxy);

            resolve(idpProxy);
            console.info('------------------- END ---------------------------\n');
          }, handleError).catch(errorReason);
        });
      });
    }

    // Check if the loader is ready to load all components

  }, {
    key: '_readyToUse',
    value: function _readyToUse() {

      var status = false;

      if (!this._runtimeURL) throw new Error('The loader need the runtime url address');
      if (!this._messagesBus) throw new Error('The loader need the messageBus component');
      if (!this._runtimeCatalogue) throw new Error('The loader need the runtimeCatalogue component');
      if (!this._registry) throw new Error('The loader need the registry component');
      if (!this._runtimeFactory) throw new Error('The loader need the runtime factory component');

      status = true;
      return status;
    }
  }, {
    key: 'runtimeURL',
    set: function set(value) {
      this._runtimeURL = value;
    }

    /**
     * Get runtime url
     * @return {string} value runtimeURL
     */
    ,
    get: function get() {
      return this._runtimeURL;
    }

    /**
     * Set Registry component
     * @param  {Registry} value Registry Component
     */

  }, {
    key: 'registry',
    set: function set(value) {
      this._registry = value;
    }

    /**
     * Get Registry component
     * @return {Registry} Registry component
     */
    ,
    get: function get() {
      return this._registry;
    }

    /**
     * Set Runtime Catalogue Component
     * @param  {RuntimeCatalogue} value runtime catalogue component
     */

  }, {
    key: 'runtimeCatalogue',
    set: function set(value) {
      this._runtimeCatalogue = value;

      this.descriptors = new _Descriptors2.default(this._runtimeURL, value, this.runtimeConfiguration);
    }

    /**
     * Get Runtime Catalogue component
     * @return {RuntimeCatalogue} Runtime Catalogue component
     */
    ,
    get: function get() {
      return this._runtimeCatalogue;
    }

    /**
     * Set Message Bus component
     * @param  {MessageBus} value Message bus component
     */

  }, {
    key: 'messageBus',
    set: function set(value) {
      this._messagesBus = value;
    }

    /**
     * Get Message Bus component
     * @return {MessageBus} Message Bus component
     */
    ,
    get: function get() {
      return this._messagesBus;
    }

    /**
     * Set Runtime Factory component
     * @param  {runtimeFactory} value Factory includes the specific implementations for each environment
     */

  }, {
    key: 'runtimeFactory',
    set: function set(value) {
      this._runtimeFactory = value;
    }

    /**
     * Get Runtime Factory component
     * @return {runtimeFactory} Runtime Factory component
     */
    ,
    get: function get() {
      return this._runtimeFactory;
    }
  }]);
  return Loader;
}();

exports.default = Loader;
module.exports = exports['default'];

},{"../utils/utils":452,"./Descriptors":442,"babel-runtime/core-js/object/assign":3,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],444:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

require('babel-polyfill');

var _Registry = require('../registry/Registry');

var _Registry2 = _interopRequireDefault(_Registry);

var _IdentityModule = require('../identity/IdentityModule');

var _IdentityModule2 = _interopRequireDefault(_IdentityModule);

var _PEP = require('../policy/PEP');

var _PEP2 = _interopRequireDefault(_PEP);

var _MessageBus = require('../bus/MessageBus');

var _MessageBus2 = _interopRequireDefault(_MessageBus);

var _Loader = require('./Loader');

var _Loader2 = _interopRequireDefault(_Loader);

var _runtimeConfiguration = require('./runtimeConfiguration');

var _SyncherManager = require('../syncher/SyncherManager');

var _SyncherManager2 = _interopRequireDefault(_SyncherManager);

var _RuntimeCoreCtx = require('../policy/context/RuntimeCoreCtx');

var _RuntimeCoreCtx2 = _interopRequireDefault(_RuntimeCoreCtx);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Runtime User Agent Interface will process all the dependecies of the core runtime;
 * @author Vitor Silva [vitor-t-silva@telecom.pt]
 * @version 0.4.0
 *
 * @property {runtimeFactory} runtimeFactory - Specific implementation for all environments;
 * @property {RuntimeCatalogue} runtimeCatalogue - Catalogue of components can be installed;
 * @property {runtimeURL} runtimeURL - This identify the core runtime, should be unique;
 * @property {IdentityModule} identityModule - Identity Module;
 * @property {PEP} policyEngine - Policy Engine Module;
 * @property {Registry} registry - Registry Module;
 * @property {MessageBus} messageBus - Message Bus is used like a router to redirect the messages from one component to other(s)
 * @property {GraphConnector} graphConnector - Graph Connector handling GUID and contacts
 */

// import GraphConnector from '../graphconnector/GraphConnector';

//Main dependecies
var RuntimeUA = function () {

  /**
   * Create a new instance of Runtime User Agent
   * @param {runtimeFactory} runtimeFactory - Specific implementation for the environment where the core runtime will run;
   * @param {domain} domainURL - specify the domain base for the runtime;
   */
  function RuntimeUA(runtimeFactory, domain) {
    (0, _classCallCheck3.default)(this, RuntimeUA);


    if (!runtimeFactory) throw new Error('The sandbox factory is a needed parameter');
    if (!domain) throw new Error('You need the domain of runtime');

    var _this = this;

    // Configuration object with information related with servers
    _this.runtimeConfiguration = (0, _assign2.default)({ domain: domain }, _runtimeConfiguration.runtimeConfiguration);

    _this.runtimeFactory = runtimeFactory;
    _this.runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();
    _this.persistenceManager = runtimeFactory.persistenceManager();

    // Prepare the loader to load the hyperties, protostubs and idpproxy;
    _this.loader = new _Loader2.default(_this.runtimeConfiguration);

    // TODO: post and return registry/hypertyRuntimeInstance to and from Back-end Service
    // the response is like: runtime://sp1/123

    var runtimeURL = 'runtime://' + domain + '/' + Math.floor(Math.random() * 10000 + 1);
    _this.runtimeURL = runtimeURL;
    _this.domain = domain;

    // TODO: check if runtime catalogue need the runtimeURL;
    _this.runtimeCatalogue.runtimeURL = runtimeURL;

    // Instantiate the identity Module
    _this.identityModule = new _IdentityModule2.default(runtimeURL);

    // Use the sandbox factory to create an AppSandbox;
    // In the future can be decided by policyEngine if we need
    // create a AppSandbox or not;
    var appSandbox = runtimeFactory.createAppSandbox();

    // Instantiate the Registry Module
    _this.registry = new _Registry2.default(runtimeURL, appSandbox, _this.identityModule, _this.runtimeCatalogue);

    // Set the loader to load Hyperties, Stubs and IdpProxies
    _this.registry.loader = _this.loader;

    // Instantiate the Message Bus
    _this.messageBus = new _MessageBus2.default(_this.registry);

    // Instantiate the Policy Engine
    _this.policyEngine = new _PEP2.default(new _RuntimeCoreCtx2.default(_this.identityModule, _this.registry, _this.persistenceManager));

    _this.messageBus.pipeline.handlers = [

    // Policy message authorise
    function (ctx) {
      _this.policyEngine.authorise(ctx.msg).then(function (changedMgs) {
        ctx.msg = changedMgs;
        ctx.next();
      }).catch(function (reason) {
        console.error(reason);
        ctx.fail(reason);
      });
    }];

    // Add to App Sandbox the listener;
    appSandbox.addListener('*', function (msg) {
      _this.messageBus.postMessage(msg);
    });

    // Register messageBus on Registry
    _this.registry.messageBus = _this.messageBus;

    // Register registry on IdentityModule
    _this.identityModule.registry = _this.registry;

    // Use sandbox factory to use specific methods
    // and set the message bus to the factory
    runtimeFactory.messageBus = _this.messageBus;

    // Instanciate the SyncherManager;
    _this.syncherManager = new _SyncherManager2.default(_this.runtimeURL, _this.messageBus, _this.registry, _this.runtimeCatalogue);

    // Set into loader the needed components;
    _this.loader.registry = _this.registry;
    _this.loader.runtimeURL = _this.runtimeURL;
    _this.loader.messageBus = _this.messageBus;
    _this.loader.runtimeCatalogue = _this.runtimeCatalogue;
    _this.loader.runtimeFactory = _this.runtimeFactory;

    // Instantiate the Graph Connector
    // _this.graphConnector = new GraphConnector(_this.runtimeURL, _this.messageBus);
  }

  /**
  * Accomodate interoperability in H2H and proto on the fly for newly discovered devices in M2M
  * @param  {CatalogueDataObject.HypertyDescriptor}   descriptor    descriptor
  */


  (0, _createClass3.default)(RuntimeUA, [{
    key: 'discoverHiperty',
    value: function discoverHiperty(descriptor) {}
    // Body...


    /**
    * Register Hyperty deployed by the App that is passed as input parameter. To be used when App and Hyperties are from the same domain otherwise the RuntimeUA will raise an exception and the App has to use the loadHyperty(..) function.
    * @param  {Object} Object                   hypertyInstance
    * @param  {URL.HypertyCatalogueURL}         descriptor      descriptor
    */

  }, {
    key: 'registerHyperty',
    value: function registerHyperty(hypertyInstance, descriptor) {}
    // Body...


    /**
    * Deploy Hyperty from Catalogue URL
    * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;
    */

  }, {
    key: 'loadHyperty',
    value: function loadHyperty(hypertyDescriptorURL) {
      var _this2 = this;

      if (!hypertyDescriptorURL) throw new Error('Hyperty descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        _this2.loader.loadHyperty(hypertyDescriptorURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
    * Deploy Stub from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadStub',
    value: function loadStub(protostubURL) {
      var _this3 = this;

      if (!protostubURL) throw new Error('ProtoStub descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        _this3.loader.loadStub(protostubURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
    * Deploy idpProxy from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadIdpProxy',
    value: function loadIdpProxy(idpProxyURL) {
      var _this4 = this;

      if (!idpProxyURL) throw new Error('The IDP Proxy URL is a needed parameter, could be a DOMAIN or a URL');

      return new _promise2.default(function (resolve, reject) {
        _this4.loader.loadIdpProxy(idpProxyURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
     * Used to close all the runtime; Unregister all hyperties;
     * @return {Promise<Boolean>} result of the close method, with true or false to the operation success;
     */

  }, {
    key: 'close',
    value: function close() {
      var _this = this;

      console.info('Unregister all hyperties');
      return new _promise2.default(function (resolve, reject) {

        _this.registry.unregisterAllHyperties().then(function (result) {
          console.info('All the hyperties are unregisted with Success:', result);
          resolve(true);
        }).catch(function (reason) {
          console.error('Failed to unregister the hyperties', reason);
          reject(false);
        });
      });
    }

    /**
    * Used to check for updates about components handled in the Catalogue including protocol stubs and Hyperties. check relationship with lifecycle management provided by Service Workers
    * @param  {CatalogueURL}       url url
    */

  }, {
    key: 'checkForUpdate',
    value: function checkForUpdate(url) {
      // Body...
    }
  }]);
  return RuntimeUA;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = RuntimeUA;
module.exports = exports['default'];

},{"../bus/MessageBus":418,"../identity/IdentityModule":423,"../policy/PEP":427,"../policy/context/RuntimeCoreCtx":437,"../registry/Registry":440,"../syncher/SyncherManager":450,"./Loader":443,"./runtimeConfiguration":445,"babel-polyfill":1,"babel-runtime/core-js/object/assign":3,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],445:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var runtimeConfiguration = exports.runtimeConfiguration = {

  runtimeURLS: {
    registry: {
      prefix: 'hyperty-runtime://',
      suffix: 'registry'
    },
    identityModule: {
      prefix: 'hyperty-runtime://',
      suffix: '/idm'
    },
    runtimeUA: {
      prefix: 'hyperty-runtime://',
      suffix: '/ua'
    },
    catalogue: {
      prefix: 'hyperty-runtime://',
      suffix: '/catalogue'
    },
    graphConnector: {
      prefix: 'hyperty-runtime://',
      suffix: '/graph'
    },
    syncManager: {
      prefix: 'hyperty-runtime://',
      suffix: '/sm'
    }
  },
  catalogueURLs: {
    protocolstub: {
      prefix: 'hyperty-catalogue://catalogue.',
      suffix: '/.well-known/protocolstub/',
      fallback: 'hyperty-catalogue://catalogue.%domain%/.well-known/protocolstub/'
    },
    idpProxy: {
      prefix: 'hyperty-catalogue://catalogue.',
      suffix: '/.well-known/idp-proxy/',
      fallback: 'hyperty-catalogue://catalogue.%domain%/.well-known/idp-proxy/'
    }
  },
  msgNodeURL: {
    prefix: 'domain://msg-node.',
    suffix: '',
    hypertyAddressAllocation: '/hyperty-address-allocation',
    objectAddressAllocation: '/object-address-allocation',
    subscriptionManagement: '/sm'
  },
  domainRegistryURL: {
    prefix: 'domain://registry.',
    suffix: ''
  },
  globalRegistryURL: 'global://registry.'
};

},{}],446:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var ObjectAllocation = function () {
  /* private
  _url: URL
  _bus: MiniBus
  */

  /**
   * Create an Object Allocation
   * @param  {URL.URL}      url - url from who is sending the message
   * @param  {MiniBus}      bus - MiniBus used for address allocation
   */
  function ObjectAllocation(url, bus) {
    (0, _classCallCheck3.default)(this, ObjectAllocation);

    var _this = this;

    _this._url = url;
    _this._bus = bus;
  }

  /**
   * get the URL value
   * @return {string} The url value;
   */


  (0, _createClass3.default)(ObjectAllocation, [{
    key: 'create',


    /**
     * Ask for creation of a number of Object addresses, to the domain message node.
     * @param  {Domain} domain - Domain of the message node.
     * @param  {number} number - Number of addresses to request
     * @returns {Promise<ObjectURL>}  A list of ObjectURL's
     */
    value: function create(domain, scheme, number) {
      var _this = this;

      //FLOW-OUT: message sent to msg-node ObjectAllocationManager component
      var msg = {
        type: 'create', from: _this._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',
        body: { scheme: scheme, value: { number: number } }
      };

      return new _promise2.default(function (resolve, reject) {
        _this._bus.postMessage(msg, function (reply) {
          if (reply.body.code === 200) {
            resolve(reply.body.value.allocated);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return ObjectAllocation;
}();

exports.default = ObjectAllocation;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],447:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Subscription = require('./Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ObserverObject = function () {
  function ObserverObject(parent, url, childrens) {
    (0, _classCallCheck3.default)(this, ObserverObject);

    var _this = this;

    _this._parent = parent;
    _this._url = url;
    _this._childrens = childrens;

    _this._bus = parent._bus;
    _this._subscriptions = {};
  }

  (0, _createClass3.default)(ObserverObject, [{
    key: 'addSubscription',
    value: function addSubscription(hyperty) {
      var _this = this;

      _this._subscriptions[hyperty] = new _Subscription2.default(_this._bus, hyperty, _this._url, _this._childrens, false);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(hyperty) {
      var _this = this;

      var domain = (0, _utils.divideURL)(hyperty).domain;
      var objURLSubscription = _this._url + '/subscription';

      var subscription = _this._subscriptions[hyperty];
      if (subscription) {
        //FLOW-OUT: message sent to remote ReporterObject -> _onRemoteUnSubscribe
        _this._bus.postMessage({
          type: 'unsubscribe', from: _this._parent._url, to: objURLSubscription,
          body: { resource: _this._url }
        });

        //TODO: should I wait for response before unsubscribe on msg-node
        //FLOW-OUT: message sent to msg-node SubscriptionManager component
        _this._bus.postMessage({
          type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/sm',
          body: { resource: _this._url, childrenResources: _this._childrens }
        });

        subscription._releaseListeners();
        delete _this._subscriptions[hyperty];
      }
    }
  }]);
  return ObserverObject;
}();

exports.default = ObserverObject;
module.exports = exports['default'];

},{"../utils/utils":452,"./Subscription":449,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],448:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Subscription = require('./Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReporterObject = function () {
  function ReporterObject(parent, owner, url) {
    (0, _classCallCheck3.default)(this, ReporterObject);

    var _this = this;

    _this._parent = parent;
    _this._owner = owner;
    _this._url = url;

    _this._bus = parent._bus;

    _this._domain = (0, _utils.divideURL)(owner).domain;
    _this._objSubscriptorURL = _this._url + '/subscription';

    _this._subscriptions = {};
    _this._childrens = [];
    _this._childrenListeners = [];

    _this._forwards = {};

    _this._allocateListeners();
  }

  (0, _createClass3.default)(ReporterObject, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      //add subscription listener...
      _this._subscriptionListener = _this._bus.addListener(_this._objSubscriptorURL, function (msg) {
        console.log(_this._objSubscriptorURL + '-RCV: ', msg);
        switch (msg.type) {
          case 'subscribe':
            _this._onRemoteSubscribe(msg);break;
          case 'unsubscribe':
            _this._onRemoteUnSubscribe(msg);break;
          case 'response':
            _this._onRemoteResponse(msg);break;
        }
      });

      var changeURL = _this._url + '/changes';
      _this._changeListener = _this._bus.addListener(changeURL, function (msg) {
        //TODO: what todo here? Save changes?
        console.log('SyncherManager-' + changeURL + '-RCV: ', msg);
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._subscriptionListener.remove();

      _this._changeListener.remove();

      _this._childrenListeners.forEach(function (cl) {
        cl.remove();
      });

      (0, _keys2.default)(_this._forwards).forEach(function (key) {
        _this.forwardUnSubscribe(key);
      });

      //remove all subscriptions
      (0, _keys2.default)(_this._subscriptions).forEach(function (key) {
        _this._subscriptions[key]._releaseListeners();
      });
    }

    /**
     * Register a listener in the msg-node and in the local MessageBus, so that messages on this address are forwarded to the reporter object
     * @param  {string} address - URL to register the listeners
     * @return {Promise} Return Promise OK or error
     */

  }, {
    key: 'forwardSubscribe',
    value: function forwardSubscribe(addresses) {
      var _this = this;

      //FLOW-OUT: message sent to the msg-node SubscriptionManager component
      var nodeSubscribeMsg = {
        type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
        body: { subscribe: addresses, source: _this._owner }
      };

      return new _promise2.default(function (resolve, reject) {
        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('forward-subscribe-response(reporter): ', reply);
          if (reply.body.code === 200) {
            var newForward = _this._bus.addForward(_this._url, _this._owner);
            _this._forwards[addresses[0]] = newForward;
            resolve();
          } else {
            reject('Error on msg-node subscription: ' + reply.body.desc);
          }
        });
      });
    }

    /**
     * UnRegister a listener in the msg-node and in the local MessageBus, so that messages on this address are removed from forward
     * @param  {string} address - URL to un-register the listeners
     */

  }, {
    key: 'forwardUnSubscribe',
    value: function forwardUnSubscribe(address) {
      var _this = this;

      _this._forwards[address].remove();
      delete _this._forwards[address];

      //FLOW-OUT: message sent to the msg-node SubscriptionManager component
      var nodeUnSubscribeMsg = {
        type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
        body: { subscribe: [address], source: _this._owner }
      };

      _this._bus.postMessage(nodeUnSubscribeMsg);
    }

    /**
     * Register listeners for a list of childrens. Public channels used to transmit messages.
     * @param  {string[]} childrens - channels to register
     * @return {Promise} Return Promise OK or error
     */

  }, {
    key: 'addChildrens',
    value: function addChildrens(childrens) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        if (childrens.length === 0) {
          resolve();
          return;
        }

        var childBaseURL = _this._url + '/children/';
        _this._childrens.push(childrens);

        /*
        _this._childrens.forEach((child) => {
          let childId = childBaseURL + child;
           let selfForward = _this._bus.addForward(childId, owner);
          _this._childrenListeners.push(selfForward);
        });*/

        var subscriptions = [];
        childrens.forEach(function (child) {
          return subscriptions.push(childBaseURL + child);
        });

        //FLOW-OUT: message sent to the msg-node SubscriptionManager component
        var nodeSubscribeMsg = {
          type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
          body: { subscribe: subscriptions, source: _this._owner }
        };

        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('node-subscribe-response(reporter): ', reply);
          if (reply.body.code === 200) {

            //add children listeners on local ...
            subscriptions.forEach(function (childURL) {
              var childListener = _this._bus.addListener(childURL, function (msg) {
                //TODO: what todo here? Save childrens?
                console.log('SyncherManager-' + childURL + '-RCV: ', msg);
              });
              _this._childrenListeners.push(childListener);

              var selfForward = _this._bus.addForward(childURL, _this._owner);
              _this._childrenListeners.push(selfForward);
            });

            resolve();
          } else {
            reject('Error on msg-node subscription: ' + reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;
      var domain = (0, _utils.divideURL)(_this._owner).domain;

      //FLOW-OUT: message sent directly to all subscribers of the reporter
      _this._bus.postMessage({
        type: 'delete', from: _this._objSubscriptorURL, to: _this._url + '/changes'
      });

      //FLOW-OUT: message sent to the msg-node ObjectAllocationManager component
      _this._bus.postMessage({
        type: 'delete', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',
        body: { resource: _this._url, childrenResources: _this._childrens }
      });

      _this._releaseListeners();
      delete _this._parent._reporters[_this._url];
    }
  }, {
    key: '_onRemoteResponse',
    value: function _onRemoteResponse(msg) {
      var _this = this;

      _this._bus.postMessage({
        id: msg.id, type: 'response', from: msg.to, to: _this._url,
        body: { code: msg.body.code, identity: msg.body.identity, source: msg.from }
      });
    }

    //FLOW-IN: message received from Syncher -> subscribe

  }, {
    key: '_onRemoteSubscribe',
    value: function _onRemoteSubscribe(msg) {
      var _this = this;
      var hypertyURL = msg.body.subscriber;

      //validate if subscription already exists?
      if (_this._subscriptions[hypertyURL]) {
        var errorMsg = {
          id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
          body: { code: 500, desc: 'Subscription for (' + _this._url + ' : ' + hypertyURL + ') already exists!' }
        };

        _this._bus.postMessage(errorMsg);
        return;
      }

      //ask to subscribe to Syncher? (depends on the operation mode)
      //TODO: get mode from object!
      var mode = 'sub/pub';

      if (mode === 'sub/pub') {
        //FLOW-OUT: message sent to local hyperty address Syncher -> _onForward
        var forwardMsg = {
          type: 'forward', from: _this._url, to: _this._owner,
          body: { type: msg.type, from: hypertyURL, to: _this._url, identity: msg.body.identity }
        };

        _this._bus.postMessage(forwardMsg, function (reply) {
          console.log('forward-reply: ', reply);
          if (reply.body.code === 200) {
            _this._subscriptions[hypertyURL] = new _Subscription2.default(_this._bus, _this._owner, _this._url, _this._childrens, true);
          }

          //FLOW-OUT: subscription response sent (forward from internal Hyperty)
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: reply.body
          });
        });
      }
    }

    //FLOW-IN: message received from remote ObserverObject -> removeSubscription

  }, {
    key: '_onRemoteUnSubscribe',
    value: function _onRemoteUnSubscribe(msg) {
      var _this = this;
      var hypertyURL = msg.body.subscriber;

      var subscription = _this._subscriptions[hypertyURL];
      if (subscription) {
        subscription._releaseListeners();
        delete _this._subscriptions[hypertyURL];

        //TODO: send un-subscribe message to Syncher? (depends on the operation mode)
      }
    }
  }]);
  return ReporterObject;
}();

exports.default = ReporterObject;
module.exports = exports['default'];

},{"../utils/utils":452,"./Subscription":449,"babel-runtime/core-js/object/keys":9,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],449:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Subscription = function () {
  function Subscription(bus, owner, url, childrens, isReporter) {
    (0, _classCallCheck3.default)(this, Subscription);

    var _this = this;
    var childBaseURL = url + '/children/';
    var changeURL = url + '/changes';

    //process delete message
    _this._deleteListener = bus.addListener(changeURL, function (msg) {
      if (msg.type === 'delete') {
        console.log('Subscription-DELETE: ', msg);

        //FLOW-OUT: message sent to all subscribers
        var deleteMessageToHyperty = {
          type: 'delete', from: msg.from, to: owner,
          body: { identity: msg.body.identity, resource: url }
        };

        //send delete to hyperty
        bus.postMessage(deleteMessageToHyperty, function (reply) {
          console.log('Subscription-DELETE-REPLY: ', reply);
          if (reply.body.code === 200) {
            _this._releaseListeners();
          }
        });
      }
    });

    //add change publish address or forward
    if (isReporter) {
      _this._changeListener = bus.addPublish(changeURL);
    } else {
      _this._changeListener = bus.addForward(changeURL, owner);
    }

    _this._childrenListeners = [];
    childrens.forEach(function (child) {
      var childId = childBaseURL + child;

      //add children publish address
      var childrenForward = bus.addPublish(childId);
      _this._childrenListeners.push(childrenForward);

      //add self forward if an observer
      if (!isReporter) {
        var selfForward = bus.addForward(childId, owner);
        _this._childrenListeners.push(selfForward);
      }
    });
  }

  (0, _createClass3.default)(Subscription, [{
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._deleteListener.remove();

      _this._changeListener.remove();

      _this._childrenListeners.forEach(function (forward) {
        forward.remove();
      });
    }
  }]);
  return Subscription;
}();

exports.default = Subscription;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],450:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _ObjectAllocation = require('./ObjectAllocation');

var _ObjectAllocation2 = _interopRequireDefault(_ObjectAllocation);

var _ReporterObject = require('./ReporterObject');

var _ReporterObject2 = _interopRequireDefault(_ReporterObject);

var _ObserverObject = require('./ObserverObject');

var _ObserverObject2 = _interopRequireDefault(_ObserverObject);

var _tv = require('../utils/tv4');

var _tv2 = _interopRequireDefault(_tv);

var _MessageFactory = require('service-framework/dist/MessageFactory');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author micaelpedrosa@gmail.com
 * Core Syncronization system.
 */
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var SyncherManager = function () {
  /* private
  _url: URL
  _bus: MiniBus
  _registry: Registry
  _allocator: ObjectAllocation
   _reporters: { ObjectURL: ReporterObject }
  _observers: { ObjectURL: ObserverObject }
  */

  function SyncherManager(runtimeURL, bus, registry, catalog, allocator) {
    (0, _classCallCheck3.default)(this, SyncherManager);

    var _this = this;

    _this._bus = bus;
    _this._registry = registry;
    _this._catalog = catalog;

    //TODO: these should be saved in persistence engine?
    _this._url = runtimeURL + '/sm';
    _this._objectURL = runtimeURL + '/object-allocation';

    _this._reporters = {};
    _this._observers = {};

    //TODO: this should not be hardcoded!
    _this._domain = (0, _utils.divideURL)(runtimeURL).domain;

    _this._mf = new _MessageFactory.MessageFactory(false, {});

    if (allocator) {
      _this._allocator = allocator;
    } else {
      _this._allocator = new _ObjectAllocation2.default(_this._objectURL, bus);
    }

    bus.addListener(_this._url, function (msg) {
      console.log('SyncherManager-RCV: ', msg);
      switch (msg.type) {
        case 'create':
          _this._onCreate(msg);break;
        case 'delete':
          _this._onDelete(msg);break;
        case 'subscribe':
          _this._onLocalSubscribe(msg);break;
        case 'unsubscribe':
          _this._onLocalUnSubscribe(msg);break;
      }
    });
  }

  (0, _createClass3.default)(SyncherManager, [{
    key: '_onCreate',


    //FLOW-IN: message received from Syncher -> create
    value: function _onCreate(msg) {

      var _this = this;
      var owner = msg.from;
      var domain = (0, _utils.divideURL)(msg.from).domain;

      if (msg.body.resource) {
        _this._authorise(msg, msg.body.resource);
        return;
      }

      //get schema from catalogue and parse -> (scheme, children)
      _this._catalog.getDataSchemaDescriptor(msg.body.scheme).then(function (descriptor) {

        var properties = descriptor.sourcePackage.sourceCode.properties;
        var scheme = properties.scheme ? properties.scheme.constant : 'resource';
        var childrens = properties.children ? properties.children.constant : [];

        console.log('Scheme: ', scheme);

        // schema validation
        console.log('Running object validation...');
        try {
          var obj = msg.body.value;
          var schema = descriptor.sourcePackage.sourceCode;

          // add support for schema referencing itself
          _tv2.default.addSchema(schema.id, schema);

          // validate
          var result = _tv2.default.validateMultiple(obj, schema);

          // delete error stacks to improve logging
          result.errors.forEach(function (error) {
            delete error.stack;
          });

          // print more details about validation if it fails or schema contains $refs
          if (!result.valid || result.missing.length > 0) {
            console.warn('Object validation ' + (result.valid ? 'succeeded, but schema contained references:' : 'failed:'), (0, _stringify2.default)(result, null, 2));
            console.debug('Object:', (0, _stringify2.default)(obj, null, 2), '\r\nSchema:', (0, _stringify2.default)(schema, null, 2));
          } else {
            console.log('Object validation succeeded');
          }
        } catch (e) {
          console.warn('Error during object validation:', e);
        }

        //request address allocation of a new object from the msg-node
        _this._allocator.create(domain, scheme, 1).then(function (allocated) {
          var objURL = allocated[0];

          console.log('ALLOCATOR CREATE:', allocated);

          var subscriptionURL = objURL + '/subscription';

          console.log('Subscription URL', subscriptionURL);

          //To register the dataObject in the runtimeRegistry
          console.info('Register Object: ', msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources);
          _this._registry.registerDataObject(msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources, msg.body.authorise).then(function (resolve) {
            console.log('DataObject successfully registered', resolve);

            //all OK -> create reporter and register listeners
            var reporter = new _ReporterObject2.default(_this, owner, objURL);
            reporter.forwardSubscribe([objURL, subscriptionURL]).then(function () {
              reporter.addChildrens(childrens).then(function () {
                _this._reporters[objURL] = reporter;

                //FLOW-OUT: message response to Syncher -> create
                _this._bus.postMessage({
                  id: msg.id, type: 'response', from: msg.to, to: owner,
                  body: { code: 200, resource: objURL, childrenResources: childrens }
                });

                //send create to all observers, responses will be deliver to the Hyperty owner?
                //schedule for next cycle needed, because the Reporter should be available.
                setTimeout(function () {
                  //will invite other hyperties
                  _this._authorise(msg, objURL);
                });
              });
            });
          }, function (error) {
            console.error(error);
          });
        });
      }).catch(function (reason) {
        //FLOW-OUT: error message response to Syncher -> create
        var responseMsg = {
          id: msg.id, type: 'response', from: msg.to, to: owner,
          body: { code: 500, desc: reason }
        };

        _this._bus.postMessage(responseMsg);
      });
    }
  }, {
    key: '_authorise',
    value: function _authorise(msg, objURL) {
      var _this = this;
      var objSubscriptorURL = objURL + '/subscription';

      msg.body.authorise.forEach(function (hypertyURL) {
        //FLOW-OUT: send invites to list of remote Syncher -> _onRemoteCreate -> onNotification
        _this._bus.postMessage({
          type: 'create', from: objSubscriptorURL, to: hypertyURL,
          body: { identity: msg.body.identity, source: msg.from, value: msg.body.value, scheme: msg.body.scheme }
        });
      });
    }

    //FLOW-IN: message received from DataObjectReporter -> delete

  }, {
    key: '_onDelete',
    value: function _onDelete(msg) {
      var _this = this;

      var objURL = msg.body.resource;

      var object = _this._reporters[objURL];
      if (object) {
        //TODO: is there any policy verification before delete?
        object.delete();

        //TODO: unregister object?
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200 }
        });
      }
    }

    //FLOW-IN: message received from local Syncher -> subscribe

  }, {
    key: '_onLocalSubscribe',
    value: function _onLocalSubscribe(msg) {
      var _this2 = this;

      var _this = this;

      var hypertyURL = msg.from;
      var objURL = msg.body.resource;
      var objURLSubscription = objURL + '/subscription';
      var childBaseURL = objURL + '/children/';

      var domain = (0, _utils.divideURL)(objURL).domain;

      //get schema from catalogue and parse -> (children)
      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {
        var properties = descriptor.sourcePackage.sourceCode.properties;
        var childrens = properties.children ? properties.children.constant : [];

        //children addresses
        var subscriptions = [];
        subscriptions.push(objURL + '/changes');
        childrens.forEach(function (child) {
          return subscriptions.push(childBaseURL + child);
        });

        //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker
        var nodeSubscribeMsg = {
          type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',
          body: { identity: msg.body.identity, subscribe: subscriptions, source: hypertyURL }
        };

        //subscribe in msg-node
        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('node-subscribe-response(observer): ', reply);
          if (reply.body.code === 200) {

            //FLOW-OUT: reply with provisional response
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
              body: { code: 100, childrenResources: childrens }
            });

            //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe
            var objSubscribeMsg = {
              type: 'subscribe', from: _this._url, to: objURLSubscription,
              body: { identity: nodeSubscribeMsg.body.identity, subscriber: hypertyURL }
            };

            //subscribe to reporter SM
            _this._bus.postMessage(objSubscribeMsg, function (reply) {
              console.log('reporter-subscribe-response: ', reply);
              if (reply.body.code === 200) {

                var observer = _this._observers[objURL];
                if (!observer) {
                  observer = new _ObserverObject2.default(_this, objURL, childrens);
                  _this._observers[objURL] = observer;
                }

                //register hyperty subscription
                observer.addSubscription(hypertyURL);

                //forward to hyperty:
                reply.id = msg.id;
                reply.from = _this._url;
                reply.to = hypertyURL;
                _this2._bus.postMessage(reply);
              }
            });
          } else {
            //listener rejected
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
              body: reply.body
            });
          }
        });
      });
    }

    //FLOW-IN: message received from local DataObjectObserver -> unsubscribe

  }, {
    key: '_onLocalUnSubscribe',
    value: function _onLocalUnSubscribe(msg) {
      var _this = this;

      var hypertyURL = msg.from;
      var objURL = msg.body.resource;

      var observer = _this._observers[objURL];
      if (observer) {
        //TODO: is there any policy verification before delete?
        observer.removeSubscription(hypertyURL);

        //TODO: destroy object in the registry?
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200 }
        });

        //TODO: remove Object if no more subscription?
        //delete _this._observers[objURL];
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return SyncherManager;
}();

exports.default = SyncherManager;
module.exports = exports['default'];

},{"../utils/tv4":451,"../utils/utils":452,"./ObjectAllocation":446,"./ObserverObject":447,"./ReporterObject":448,"babel-runtime/core-js/json/stringify":2,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"service-framework/dist/MessageFactory":416}],451:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _isFrozen = require('babel-runtime/core-js/object/is-frozen');

var _isFrozen2 = _interopRequireDefault(_isFrozen);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 Author: Geraint Luff and others
 Year: 2013

 This code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.

 If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.
 */
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys
if (!_keys2.default) {
    Object.keys = function () {
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),
            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
            dontEnumsLength = dontEnums.length;

        return function (obj) {
            if ((typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) !== 'object' && typeof obj !== 'function' || obj === null) {
                throw new TypeError('Object.keys called on non-object');
            }

            var result = [];

            for (var prop in obj) {
                if (hasOwnProperty.call(obj, prop)) {
                    result.push(prop);
                }
            }

            if (hasDontEnumBug) {
                for (var i = 0; i < dontEnumsLength; i++) {
                    if (hasOwnProperty.call(obj, dontEnums[i])) {
                        result.push(dontEnums[i]);
                    }
                }
            }
            return result;
        };
    }();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
if (!_create2.default) {
    Object.create = function () {
        function F() {}

        return function (o) {
            if (arguments.length !== 1) {
                throw new Error('Object.create implementation only accepts one parameter.');
            }
            F.prototype = o;
            return new F();
        };
    }();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray
if (!Array.isArray) {
    Array.isArray = function (vArg) {
        return Object.prototype.toString.call(vArg) === "[object Array]";
    };
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement /*, fromIndex */) {
        if (this === null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;

        if (len === 0) {
            return -1;
        }
        var n = 0;
        if (arguments.length > 1) {
            n = Number(arguments[1]);
            if (n !== n) {
                // shortcut for verifying if it's NaN
                n = 0;
            } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n));
            }
        }
        if (n >= len) {
            return -1;
        }
        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
        for (; k < len; k++) {
            if (k in t && t[k] === searchElement) {
                return k;
            }
        }
        return -1;
    };
}

// Grungey Object.isFrozen hack
if (!_isFrozen2.default) {
    Object.isFrozen = function (obj) {
        var key = "tv4_test_frozen_key";
        while (obj.hasOwnProperty(key)) {
            key += Math.random();
        }
        try {
            obj[key] = true;
            delete obj[key];
            return false;
        } catch (e) {
            return true;
        }
    };
}
// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed

var uriTemplateGlobalModifiers = {
    "+": true,
    "#": true,
    ".": true,
    "/": true,
    ";": true,
    "?": true,
    "&": true
};
var uriTemplateSuffices = {
    "*": true
};

function notReallyPercentEncode(string) {
    return encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {
        return "%" + doubleEncoded.substring(3);
    });
}

function uriTemplateSubstitution(spec) {
    var modifier = "";
    if (uriTemplateGlobalModifiers[spec.charAt(0)]) {
        modifier = spec.charAt(0);
        spec = spec.substring(1);
    }
    var separator = "";
    var prefix = "";
    var shouldEscape = true;
    var showVariables = false;
    var trimEmptyString = false;
    if (modifier === '+') {
        shouldEscape = false;
    } else if (modifier === ".") {
        prefix = ".";
        separator = ".";
    } else if (modifier === "/") {
        prefix = "/";
        separator = "/";
    } else if (modifier === '#') {
        prefix = "#";
        shouldEscape = false;
    } else if (modifier === ';') {
        prefix = ";";
        separator = ";";
        showVariables = true;
        trimEmptyString = true;
    } else if (modifier === '?') {
        prefix = "?";
        separator = "&";
        showVariables = true;
    } else if (modifier === '&') {
        prefix = "&";
        separator = "&";
        showVariables = true;
    }

    var varNames = [];
    var varList = spec.split(",");
    var varSpecs = [];
    var varSpecMap = {};
    for (var i = 0; i < varList.length; i++) {
        var varName = varList[i];
        var truncate = null;
        if (varName.indexOf(":") !== -1) {
            var parts = varName.split(":");
            varName = parts[0];
            truncate = parseInt(parts[1], 10);
        }
        var suffices = {};
        while (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {
            suffices[varName.charAt(varName.length - 1)] = true;
            varName = varName.substring(0, varName.length - 1);
        }
        var varSpec = {
            truncate: truncate,
            name: varName,
            suffices: suffices
        };
        varSpecs.push(varSpec);
        varSpecMap[varName] = varSpec;
        varNames.push(varName);
    }
    var subFunction = function subFunction(valueFunction) {
        var result = "";
        var startIndex = 0;
        for (var i = 0; i < varSpecs.length; i++) {
            var varSpec = varSpecs[i];
            var value = valueFunction(varSpec.name);
            if (value === null || value === undefined || Array.isArray(value) && value.length === 0 || (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && (0, _keys2.default)(value).length === 0) {
                startIndex++;
                continue;
            }
            if (i === startIndex) {
                result += prefix;
            } else {
                result += separator || ",";
            }
            if (Array.isArray(value)) {
                if (showVariables) {
                    result += varSpec.name + "=";
                }
                for (var j = 0; j < value.length; j++) {
                    if (j > 0) {
                        result += varSpec.suffices['*'] ? separator || "," : ",";
                        if (varSpec.suffices['*'] && showVariables) {
                            result += varSpec.name + "=";
                        }
                    }
                    result += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, "%21") : notReallyPercentEncode(value[j]);
                }
            } else if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === "object") {
                if (showVariables && !varSpec.suffices['*']) {
                    result += varSpec.name + "=";
                }
                var first = true;
                for (var key in value) {
                    if (!first) {
                        result += varSpec.suffices['*'] ? separator || "," : ",";
                    }
                    first = false;
                    result += shouldEscape ? encodeURIComponent(key).replace(/!/g, "%21") : notReallyPercentEncode(key);
                    result += varSpec.suffices['*'] ? '=' : ",";
                    result += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, "%21") : notReallyPercentEncode(value[key]);
                }
            } else {
                if (showVariables) {
                    result += varSpec.name;
                    if (!trimEmptyString || value !== "") {
                        result += "=";
                    }
                }
                if (varSpec.truncate != null) {
                    value = value.substring(0, varSpec.truncate);
                }
                result += shouldEscape ? encodeURIComponent(value).replace(/!/g, "%21") : notReallyPercentEncode(value);
            }
        }
        return result;
    };
    subFunction.varNames = varNames;
    return {
        prefix: prefix,
        substitution: subFunction
    };
}

function UriTemplate(template) {
    if (!(this instanceof UriTemplate)) {
        return new UriTemplate(template);
    }
    var parts = template.split("{");
    var textParts = [parts.shift()];
    var prefixes = [];
    var substitutions = [];
    var varNames = [];
    while (parts.length > 0) {
        var part = parts.shift();
        var spec = part.split("}")[0];
        var remainder = part.substring(spec.length + 1);
        var funcs = uriTemplateSubstitution(spec);
        substitutions.push(funcs.substitution);
        prefixes.push(funcs.prefix);
        textParts.push(remainder);
        varNames = varNames.concat(funcs.substitution.varNames);
    }
    this.fill = function (valueFunction) {
        var result = textParts[0];
        for (var i = 0; i < substitutions.length; i++) {
            var substitution = substitutions[i];
            result += substitution(valueFunction);
            result += textParts[i + 1];
        }
        return result;
    };
    this.varNames = varNames;
    this.template = template;
}

UriTemplate.prototype = {
    toString: function toString() {
        return this.template;
    },
    fillFromObject: function fillFromObject(obj) {
        return this.fill(function (varName) {
            return obj[varName];
        });
    }
};
var ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {
    this.missing = [];
    this.missingMap = {};
    this.formatValidators = parent ? (0, _create2.default)(parent.formatValidators) : {};
    this.schemas = parent ? (0, _create2.default)(parent.schemas) : {};
    this.collectMultiple = collectMultiple;
    this.errors = [];
    this.handleError = collectMultiple ? this.collectError : this.returnError;
    if (checkRecursive) {
        this.checkRecursive = true;
        this.scanned = [];
        this.scannedFrozen = [];
        this.scannedFrozenSchemas = [];
        this.scannedFrozenValidationErrors = [];
        this.validatedSchemasKey = 'tv4_validation_id';
        this.validationErrorsKey = 'tv4_validation_errors_id';
    }
    if (trackUnknownProperties) {
        this.trackUnknownProperties = true;
        this.knownPropertyPaths = {};
        this.unknownPropertyPaths = {};
    }
    this.errorReporter = errorReporter || defaultErrorReporter('en');
    if (typeof this.errorReporter === 'string') {
        throw new Error('debug');
    }
    this.definedKeywords = {};
    if (parent) {
        for (var key in parent.definedKeywords) {
            this.definedKeywords[key] = parent.definedKeywords[key].slice(0);
        }
    }
};
ValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {
    this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];
    this.definedKeywords[keyword].push(keywordFunction);
};
ValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {
    var error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);
    error.message = this.errorReporter(error, data, schema);
    return error;
};
ValidatorContext.prototype.returnError = function (error) {
    return error;
};
ValidatorContext.prototype.collectError = function (error) {
    if (error) {
        this.errors.push(error);
    }
    return null;
};
ValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {
    for (var i = startIndex; i < this.errors.length; i++) {
        this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);
    }
    return this;
};
ValidatorContext.prototype.banUnknownProperties = function (data, schema) {
    for (var unknownPath in this.unknownPropertyPaths) {
        var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, { path: unknownPath }, unknownPath, "", null, data, schema);
        var result = this.handleError(error);
        if (result) {
            return result;
        }
    }
    return null;
};

ValidatorContext.prototype.addFormat = function (format, validator) {
    if ((typeof format === 'undefined' ? 'undefined' : (0, _typeof3.default)(format)) === 'object') {
        for (var key in format) {
            this.addFormat(key, format[key]);
        }
        return this;
    }
    this.formatValidators[format] = validator;
};
ValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {
    if (schema['$ref'] !== undefined) {
        urlHistory = urlHistory || {};
        if (urlHistory[schema['$ref']]) {
            return this.createError(ErrorCodes.CIRCULAR_REFERENCE, { urls: (0, _keys2.default)(urlHistory).join(', ') }, '', '', null, undefined, schema);
        }
        urlHistory[schema['$ref']] = true;
        schema = this.getSchema(schema['$ref'], urlHistory);
    }
    return schema;
};
ValidatorContext.prototype.getSchema = function (url, urlHistory) {
    var schema;
    if (this.schemas[url] !== undefined) {
        schema = this.schemas[url];
        return this.resolveRefs(schema, urlHistory);
    }
    var baseUrl = url;
    var fragment = "";
    if (url.indexOf('#') !== -1) {
        fragment = url.substring(url.indexOf("#") + 1);
        baseUrl = url.substring(0, url.indexOf("#"));
    }
    if ((0, _typeof3.default)(this.schemas[baseUrl]) === 'object') {
        schema = this.schemas[baseUrl];
        var pointerPath = decodeURIComponent(fragment);
        if (pointerPath === "") {
            return this.resolveRefs(schema, urlHistory);
        } else if (pointerPath.charAt(0) !== "/") {
            return undefined;
        }
        var parts = pointerPath.split("/").slice(1);
        for (var i = 0; i < parts.length; i++) {
            var component = parts[i].replace(/~1/g, "/").replace(/~0/g, "~");
            if (schema[component] === undefined) {
                schema = undefined;
                break;
            }
            schema = schema[component];
        }
        if (schema !== undefined) {
            return this.resolveRefs(schema, urlHistory);
        }
    }
    if (this.missing[baseUrl] === undefined) {
        this.missing.push(baseUrl);
        this.missing[baseUrl] = baseUrl;
        this.missingMap[baseUrl] = baseUrl;
    }
};
ValidatorContext.prototype.searchSchemas = function (schema, url) {
    if (Array.isArray(schema)) {
        for (var i = 0; i < schema.length; i++) {
            this.searchSchemas(schema[i], url);
        }
    } else if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === "object") {
        if (typeof schema.id === "string") {
            if (isTrustedUrl(url, schema.id)) {
                if (this.schemas[schema.id] === undefined) {
                    this.schemas[schema.id] = schema;
                }
            }
        }
        for (var key in schema) {
            if (key !== "enum") {
                if ((0, _typeof3.default)(schema[key]) === "object") {
                    this.searchSchemas(schema[key], url);
                } else if (key === "$ref") {
                    var uri = getDocumentUri(schema[key]);
                    if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {
                        this.missingMap[uri] = uri;
                    }
                }
            }
        }
    }
};
ValidatorContext.prototype.addSchema = function (url, schema) {
    //overload
    if (typeof url !== 'string' || typeof schema === 'undefined') {
        if ((typeof url === 'undefined' ? 'undefined' : (0, _typeof3.default)(url)) === 'object' && typeof url.id === 'string') {
            schema = url;
            url = schema.id;
        } else {
            return;
        }
    }
    if (url === getDocumentUri(url) + "#") {
        // Remove empty fragment
        url = getDocumentUri(url);
    }
    this.schemas[url] = schema;
    delete this.missingMap[url];
    normSchema(schema, url);
    this.searchSchemas(schema, url);
};

ValidatorContext.prototype.getSchemaMap = function () {
    var map = {};
    for (var key in this.schemas) {
        map[key] = this.schemas[key];
    }
    return map;
};

ValidatorContext.prototype.getSchemaUris = function (filterRegExp) {
    var list = [];
    for (var key in this.schemas) {
        if (!filterRegExp || filterRegExp.test(key)) {
            list.push(key);
        }
    }
    return list;
};

ValidatorContext.prototype.getMissingUris = function (filterRegExp) {
    var list = [];
    for (var key in this.missingMap) {
        if (!filterRegExp || filterRegExp.test(key)) {
            list.push(key);
        }
    }
    return list;
};

ValidatorContext.prototype.dropSchemas = function () {
    this.schemas = {};
    this.reset();
};
ValidatorContext.prototype.reset = function () {
    this.missing = [];
    this.missingMap = {};
    this.errors = [];
};

ValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {
    var topLevel;
    schema = this.resolveRefs(schema);
    if (!schema) {
        return null;
    } else if (schema instanceof ValidationError) {
        this.errors.push(schema);
        return schema;
    }

    var startErrorCount = this.errors.length;
    var frozenIndex,
        scannedFrozenSchemaIndex = null,
        scannedSchemasIndex = null;
    if (this.checkRecursive && data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object') {
        topLevel = !this.scanned.length;
        if (data[this.validatedSchemasKey]) {
            var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);
            if (schemaIndex !== -1) {
                this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);
                return null;
            }
        }
        if ((0, _isFrozen2.default)(data)) {
            frozenIndex = this.scannedFrozen.indexOf(data);
            if (frozenIndex !== -1) {
                var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);
                if (frozenSchemaIndex !== -1) {
                    this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);
                    return null;
                }
            }
        }
        this.scanned.push(data);
        if ((0, _isFrozen2.default)(data)) {
            if (frozenIndex === -1) {
                frozenIndex = this.scannedFrozen.length;
                this.scannedFrozen.push(data);
                this.scannedFrozenSchemas.push([]);
            }
            scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;
            this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;
            this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];
        } else {
            if (!data[this.validatedSchemasKey]) {
                try {
                    (0, _defineProperty2.default)(data, this.validatedSchemasKey, {
                        value: [],
                        configurable: true
                    });
                    (0, _defineProperty2.default)(data, this.validationErrorsKey, {
                        value: [],
                        configurable: true
                    });
                } catch (e) {
                    //IE 7/8 workaround
                    data[this.validatedSchemasKey] = [];
                    data[this.validationErrorsKey] = [];
                }
            }
            scannedSchemasIndex = data[this.validatedSchemasKey].length;
            data[this.validatedSchemasKey][scannedSchemasIndex] = schema;
            data[this.validationErrorsKey][scannedSchemasIndex] = [];
        }
    }

    var errorCount = this.errors.length;
    var error = this.validateBasic(data, schema, dataPointerPath) || this.validateNumeric(data, schema, dataPointerPath) || this.validateString(data, schema, dataPointerPath) || this.validateArray(data, schema, dataPointerPath) || this.validateObject(data, schema, dataPointerPath) || this.validateCombinations(data, schema, dataPointerPath) || this.validateHypermedia(data, schema, dataPointerPath) || this.validateFormat(data, schema, dataPointerPath) || this.validateDefinedKeywords(data, schema, dataPointerPath) || null;

    if (topLevel) {
        while (this.scanned.length) {
            var item = this.scanned.pop();
            delete item[this.validatedSchemasKey];
        }
        this.scannedFrozen = [];
        this.scannedFrozenSchemas = [];
    }

    if (error || errorCount !== this.errors.length) {
        while (dataPathParts && dataPathParts.length || schemaPathParts && schemaPathParts.length) {
            var dataPart = dataPathParts && dataPathParts.length ? "" + dataPathParts.pop() : null;
            var schemaPart = schemaPathParts && schemaPathParts.length ? "" + schemaPathParts.pop() : null;
            if (error) {
                error = error.prefixWith(dataPart, schemaPart);
            }
            this.prefixErrors(errorCount, dataPart, schemaPart);
        }
    }

    if (scannedFrozenSchemaIndex !== null) {
        this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);
    } else if (scannedSchemasIndex !== null) {
        data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);
    }

    return this.handleError(error);
};
ValidatorContext.prototype.validateFormat = function (data, schema) {
    if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {
        return null;
    }
    var errorMessage = this.formatValidators[schema.format].call(null, data, schema);
    if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {
        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage }, '', '/format', null, data, schema);
    } else if (errorMessage && (typeof errorMessage === 'undefined' ? 'undefined' : (0, _typeof3.default)(errorMessage)) === 'object') {
        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage.message || "?" }, errorMessage.dataPath || '', errorMessage.schemaPath || "/format", null, data, schema);
    }
    return null;
};
ValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {
    for (var key in this.definedKeywords) {
        if (typeof schema[key] === 'undefined') {
            continue;
        }
        var validationFunctions = this.definedKeywords[key];
        for (var i = 0; i < validationFunctions.length; i++) {
            var func = validationFunctions[i];
            var result = func(data, schema[key], schema, dataPointerPath);
            if (typeof result === 'string' || typeof result === 'number') {
                return this.createError(ErrorCodes.KEYWORD_CUSTOM, {
                    key: key,
                    message: result
                }, '', '', null, data, schema).prefixWith(null, key);
            } else if (result && (typeof result === 'undefined' ? 'undefined' : (0, _typeof3.default)(result)) === 'object') {
                var code = result.code;
                if (typeof code === 'string') {
                    if (!ErrorCodes[code]) {
                        throw new Error('Undefined error code (use defineError): ' + code);
                    }
                    code = ErrorCodes[code];
                } else if (typeof code !== 'number') {
                    code = ErrorCodes.KEYWORD_CUSTOM;
                }
                var messageParams = (0, _typeof3.default)(result.message) === 'object' ? result.message : {
                    key: key,
                    message: result.message || "?"
                };
                var schemaPath = result.schemaPath || "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
                return this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);
            }
        }
    }
    return null;
};

function recursiveCompare(A, B) {
    if (A === B) {
        return true;
    }
    if (A && B && (typeof A === 'undefined' ? 'undefined' : (0, _typeof3.default)(A)) === "object" && (typeof B === 'undefined' ? 'undefined' : (0, _typeof3.default)(B)) === "object") {
        if (Array.isArray(A) !== Array.isArray(B)) {
            return false;
        } else if (Array.isArray(A)) {
            if (A.length !== B.length) {
                return false;
            }
            for (var i = 0; i < A.length; i++) {
                if (!recursiveCompare(A[i], B[i])) {
                    return false;
                }
            }
        } else {
            var key;
            for (key in A) {
                if (B[key] === undefined && A[key] !== undefined) {
                    return false;
                }
            }
            for (key in B) {
                if (A[key] === undefined && B[key] !== undefined) {
                    return false;
                }
            }
            for (key in A) {
                if (!recursiveCompare(A[key], B[key])) {
                    return false;
                }
            }
        }
        return true;
    }
    return false;
}

ValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {
    var error;
    if (error = this.validateType(data, schema, dataPointerPath)) {
        return error.prefixWith(null, "type");
    }
    if (error = this.validateEnum(data, schema, dataPointerPath)) {
        return error.prefixWith(null, "type");
    }
    return null;
};

ValidatorContext.prototype.validateType = function validateType(data, schema) {
    if (schema.type === undefined) {
        return null;
    }
    var dataType = typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data);
    if (data === null) {
        dataType = "null";
    } else if (Array.isArray(data)) {
        dataType = "array";
    }
    var allowedTypes = schema.type;
    if (!Array.isArray(allowedTypes)) {
        allowedTypes = [allowedTypes];
    }

    for (var i = 0; i < allowedTypes.length; i++) {
        var type = allowedTypes[i];
        if (type === dataType || type === "integer" && dataType === "number" && data % 1 === 0) {
            return null;
        }
    }
    return this.createError(ErrorCodes.INVALID_TYPE, {
        type: dataType,
        expected: allowedTypes.join("/")
    }, '', '', null, data, schema);
};

ValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {
    if (schema["enum"] === undefined) {
        return null;
    }
    for (var i = 0; i < schema["enum"].length; i++) {
        var enumVal = schema["enum"][i];
        if (recursiveCompare(data, enumVal)) {
            return null;
        }
    }
    return this.createError(ErrorCodes.ENUM_MISMATCH, { value: typeof JSON !== 'undefined' ? (0, _stringify2.default)(data) : data }, '', '', null, data, schema);
};

ValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {
    return this.validateMultipleOf(data, schema, dataPointerPath) || this.validateMinMax(data, schema, dataPointerPath) || this.validateNaN(data, schema, dataPointerPath) || null;
};

var CLOSE_ENOUGH_LOW = Math.pow(2, -51);
var CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;
ValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {
    var multipleOf = schema.multipleOf || schema.divisibleBy;
    if (multipleOf === undefined) {
        return null;
    }
    if (typeof data === "number") {
        var remainder = data / multipleOf % 1;
        if (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {
            return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {
                value: data,
                multipleOf: multipleOf
            }, '', '', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {
    if (typeof data !== "number") {
        return null;
    }
    if (schema.minimum !== undefined) {
        if (data < schema.minimum) {
            return this.createError(ErrorCodes.NUMBER_MINIMUM, {
                value: data,
                minimum: schema.minimum
            }, '', '/minimum', null, data, schema);
        }
        if (schema.exclusiveMinimum && data === schema.minimum) {
            return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {
                value: data,
                minimum: schema.minimum
            }, '', '/exclusiveMinimum', null, data, schema);
        }
    }
    if (schema.maximum !== undefined) {
        if (data > schema.maximum) {
            return this.createError(ErrorCodes.NUMBER_MAXIMUM, {
                value: data,
                maximum: schema.maximum
            }, '', '/maximum', null, data, schema);
        }
        if (schema.exclusiveMaximum && data === schema.maximum) {
            return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {
                value: data,
                maximum: schema.maximum
            }, '', '/exclusiveMaximum', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {
    if (typeof data !== "number") {
        return null;
    }
    if (isNaN(data) === true || data === Infinity || data === -Infinity) {
        return this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, { value: data }, '', '/type', null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {
    return this.validateStringLength(data, schema, dataPointerPath) || this.validateStringPattern(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {
    if (typeof data !== "string") {
        return null;
    }
    if (schema.minLength !== undefined) {
        if (data.length < schema.minLength) {
            return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {
                length: data.length,
                minimum: schema.minLength
            }, '', '/minLength', null, data, schema);
        }
    }
    if (schema.maxLength !== undefined) {
        if (data.length > schema.maxLength) {
            return this.createError(ErrorCodes.STRING_LENGTH_LONG, {
                length: data.length,
                maximum: schema.maxLength
            }, '', '/maxLength', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {
    if (typeof data !== "string" || typeof schema.pattern !== "string" && !(schema.pattern instanceof RegExp)) {
        return null;
    }
    var regexp;
    if (schema.pattern instanceof RegExp) {
        regexp = schema.pattern;
    } else {
        var body,
            flags = '';
        // Check for regular expression literals
        // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5
        var literal = schema.pattern.match(/^\/(.+)\/([img]*)$/);
        if (literal) {
            body = literal[1];
            flags = literal[2];
        } else {
            body = schema.pattern;
        }
        regexp = new RegExp(body, flags);
    }
    if (!regexp.test(data)) {
        return this.createError(ErrorCodes.STRING_PATTERN, { pattern: schema.pattern }, '', '/pattern', null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {
    if (!Array.isArray(data)) {
        return null;
    }
    return this.validateArrayLength(data, schema, dataPointerPath) || this.validateArrayUniqueItems(data, schema, dataPointerPath) || this.validateArrayItems(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {
    var error;
    if (schema.minItems !== undefined) {
        if (data.length < schema.minItems) {
            error = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {
                length: data.length,
                minimum: schema.minItems
            }, '', '/minItems', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    if (schema.maxItems !== undefined) {
        if (data.length > schema.maxItems) {
            error = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {
                length: data.length,
                maximum: schema.maxItems
            }, '', '/maxItems', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {
    if (schema.uniqueItems) {
        for (var i = 0; i < data.length; i++) {
            for (var j = i + 1; j < data.length; j++) {
                if (recursiveCompare(data[i], data[j])) {
                    var error = this.createError(ErrorCodes.ARRAY_UNIQUE, {
                        match1: i,
                        match2: j
                    }, '', '/uniqueItems', null, data, schema);
                    if (this.handleError(error)) {
                        return error;
                    }
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {
    if (schema.items === undefined) {
        return null;
    }
    var error, i;
    if (Array.isArray(schema.items)) {
        for (i = 0; i < data.length; i++) {
            if (i < schema.items.length) {
                if (error = this.validateAll(data[i], schema.items[i], [i], ["items", i], dataPointerPath + "/" + i)) {
                    return error;
                }
            } else if (schema.additionalItems !== undefined) {
                if (typeof schema.additionalItems === "boolean") {
                    if (!schema.additionalItems) {
                        error = this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, '/' + i, '/additionalItems', null, data, schema);
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else if (error = this.validateAll(data[i], schema.additionalItems, [i], ["additionalItems"], dataPointerPath + "/" + i)) {
                    return error;
                }
            }
        }
    } else {
        for (i = 0; i < data.length; i++) {
            if (error = this.validateAll(data[i], schema.items, [i], ["items"], dataPointerPath + "/" + i)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {
    if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) !== "object" || data === null || Array.isArray(data)) {
        return null;
    }
    return this.validateObjectMinMaxProperties(data, schema, dataPointerPath) || this.validateObjectRequiredProperties(data, schema, dataPointerPath) || this.validateObjectProperties(data, schema, dataPointerPath) || this.validateObjectDependencies(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {
    var keys = (0, _keys2.default)(data);
    var error;
    if (schema.minProperties !== undefined) {
        if (keys.length < schema.minProperties) {
            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {
                propertyCount: keys.length,
                minimum: schema.minProperties
            }, '', '/minProperties', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    if (schema.maxProperties !== undefined) {
        if (keys.length > schema.maxProperties) {
            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {
                propertyCount: keys.length,
                maximum: schema.maxProperties
            }, '', '/maxProperties', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {
    if (schema.required !== undefined) {
        for (var i = 0; i < schema.required.length; i++) {
            var key = schema.required[i];
            if (data[key] === undefined) {
                var error = this.createError(ErrorCodes.OBJECT_REQUIRED, { key: key }, '', '/required/' + i, null, data, schema);
                if (this.handleError(error)) {
                    return error;
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {
    var error;
    for (var key in data) {
        var keyPointerPath = dataPointerPath + "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
        var foundMatch = false;
        if (schema.properties !== undefined && schema.properties[key] !== undefined) {
            foundMatch = true;
            if (error = this.validateAll(data[key], schema.properties[key], [key], ["properties", key], keyPointerPath)) {
                return error;
            }
        }
        if (schema.patternProperties !== undefined) {
            for (var patternKey in schema.patternProperties) {
                var regexp = new RegExp(patternKey);
                if (regexp.test(key)) {
                    foundMatch = true;
                    if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], ["patternProperties", patternKey], keyPointerPath)) {
                        return error;
                    }
                }
            }
        }
        if (!foundMatch) {
            if (schema.additionalProperties !== undefined) {
                if (this.trackUnknownProperties) {
                    this.knownPropertyPaths[keyPointerPath] = true;
                    delete this.unknownPropertyPaths[keyPointerPath];
                }
                if (typeof schema.additionalProperties === "boolean") {
                    if (!schema.additionalProperties) {
                        error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, { key: key }, '', '/additionalProperties', null, data, schema).prefixWith(key, null);
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else {
                    if (error = this.validateAll(data[key], schema.additionalProperties, [key], ["additionalProperties"], keyPointerPath)) {
                        return error;
                    }
                }
            } else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {
                this.unknownPropertyPaths[keyPointerPath] = true;
            }
        } else if (this.trackUnknownProperties) {
            this.knownPropertyPaths[keyPointerPath] = true;
            delete this.unknownPropertyPaths[keyPointerPath];
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {
    var error;
    if (schema.dependencies !== undefined) {
        for (var depKey in schema.dependencies) {
            if (data[depKey] !== undefined) {
                var dep = schema.dependencies[depKey];
                if (typeof dep === "string") {
                    if (data[dep] === undefined) {
                        error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                            key: depKey,
                            missing: dep
                        }, '', '', null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else if (Array.isArray(dep)) {
                    for (var i = 0; i < dep.length; i++) {
                        var requiredKey = dep[i];
                        if (data[requiredKey] === undefined) {
                            error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                                key: depKey,
                                missing: requiredKey
                            }, '', '/' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
                            if (this.handleError(error)) {
                                return error;
                            }
                        }
                    }
                } else {
                    if (error = this.validateAll(data, dep, [], ["dependencies", depKey], dataPointerPath)) {
                        return error;
                    }
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {
    return this.validateAllOf(data, schema, dataPointerPath) || this.validateAnyOf(data, schema, dataPointerPath) || this.validateOneOf(data, schema, dataPointerPath) || this.validateNot(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {
    if (schema.allOf === undefined) {
        return null;
    }
    var error;
    for (var i = 0; i < schema.allOf.length; i++) {
        var subSchema = schema.allOf[i];
        if (error = this.validateAll(data, subSchema, [], ["allOf", i], dataPointerPath)) {
            return error;
        }
    }
    return null;
};

ValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {
    if (schema.anyOf === undefined) {
        return null;
    }
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    var errorAtEnd = true;
    for (var i = 0; i < schema.anyOf.length; i++) {
        if (this.trackUnknownProperties) {
            this.unknownPropertyPaths = {};
            this.knownPropertyPaths = {};
        }
        var subSchema = schema.anyOf[i];

        var errorCount = this.errors.length;
        var error = this.validateAll(data, subSchema, [], ["anyOf", i], dataPointerPath);

        if (error === null && errorCount === this.errors.length) {
            this.errors = this.errors.slice(0, startErrorCount);

            if (this.trackUnknownProperties) {
                for (var knownKey in this.knownPropertyPaths) {
                    oldKnownPropertyPaths[knownKey] = true;
                    delete oldUnknownPropertyPaths[knownKey];
                }
                for (var unknownKey in this.unknownPropertyPaths) {
                    if (!oldKnownPropertyPaths[unknownKey]) {
                        oldUnknownPropertyPaths[unknownKey] = true;
                    }
                }
                // We need to continue looping so we catch all the property definitions, but we don't want to return an error
                errorAtEnd = false;
                continue;
            }

            return null;
        }
        if (error) {
            errors.push(error.prefixWith(null, "" + i).prefixWith(null, "anyOf"));
        }
    }
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (errorAtEnd) {
        errors = errors.concat(this.errors.slice(startErrorCount));
        this.errors = this.errors.slice(0, startErrorCount);
        return this.createError(ErrorCodes.ANY_OF_MISSING, {}, "", "/anyOf", errors, data, schema);
    }
};

ValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {
    if (schema.oneOf === undefined) {
        return null;
    }
    var validIndex = null;
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    for (var i = 0; i < schema.oneOf.length; i++) {
        if (this.trackUnknownProperties) {
            this.unknownPropertyPaths = {};
            this.knownPropertyPaths = {};
        }
        var subSchema = schema.oneOf[i];

        var errorCount = this.errors.length;
        var error = this.validateAll(data, subSchema, [], ["oneOf", i], dataPointerPath);

        if (error === null && errorCount === this.errors.length) {
            if (validIndex === null) {
                validIndex = i;
            } else {
                this.errors = this.errors.slice(0, startErrorCount);
                return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {
                    index1: validIndex,
                    index2: i
                }, "", "/oneOf", null, data, schema);
            }
            if (this.trackUnknownProperties) {
                for (var knownKey in this.knownPropertyPaths) {
                    oldKnownPropertyPaths[knownKey] = true;
                    delete oldUnknownPropertyPaths[knownKey];
                }
                for (var unknownKey in this.unknownPropertyPaths) {
                    if (!oldKnownPropertyPaths[unknownKey]) {
                        oldUnknownPropertyPaths[unknownKey] = true;
                    }
                }
            }
        } else if (error) {
            errors.push(error);
        }
    }
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (validIndex === null) {
        errors = errors.concat(this.errors.slice(startErrorCount));
        this.errors = this.errors.slice(0, startErrorCount);
        return this.createError(ErrorCodes.ONE_OF_MISSING, {}, "", "/oneOf", errors, data, schema);
    } else {
        this.errors = this.errors.slice(0, startErrorCount);
    }
    return null;
};

ValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {
    if (schema.not === undefined) {
        return null;
    }
    var oldErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
        this.unknownPropertyPaths = {};
        this.knownPropertyPaths = {};
    }
    var error = this.validateAll(data, schema.not, null, null, dataPointerPath);
    var notErrors = this.errors.slice(oldErrorCount);
    this.errors = this.errors.slice(0, oldErrorCount);
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (error === null && notErrors.length === 0) {
        return this.createError(ErrorCodes.NOT_PASSED, {}, "", "/not", null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {
    if (!schema.links) {
        return null;
    }
    var error;
    for (var i = 0; i < schema.links.length; i++) {
        var ldo = schema.links[i];
        if (ldo.rel === "describedby") {
            var template = new UriTemplate(ldo.href);
            var allPresent = true;
            for (var j = 0; j < template.varNames.length; j++) {
                if (!(template.varNames[j] in data)) {
                    allPresent = false;
                    break;
                }
            }
            if (allPresent) {
                var schemaUrl = template.fillFromObject(data);
                var subSchema = { "$ref": schemaUrl };
                if (error = this.validateAll(data, subSchema, [], ["links", i], dataPointerPath)) {
                    return error;
                }
            }
        }
    }
};

// parseURI() and resolveUrl() are from https://gist.github.com/1088850
//   -  released as public domain by author ("Yaffle") - see comments on gist

function parseURI(url) {
    var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
    // authority = '//' + user + ':' + pass '@' + hostname + ':' port
    return m ? {
        href: m[0] || '',
        protocol: m[1] || '',
        authority: m[2] || '',
        host: m[3] || '',
        hostname: m[4] || '',
        port: m[5] || '',
        pathname: m[6] || '',
        search: m[7] || '',
        hash: m[8] || ''
    } : null;
}

function resolveUrl(base, href) {
    // RFC 3986

    function removeDotSegments(input) {
        var output = [];
        input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
            if (p === '/..') {
                output.pop();
            } else {
                output.push(p);
            }
        });
        return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
    }

    href = parseURI(href || '');
    base = parseURI(base || '');

    return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
}

function getDocumentUri(uri) {
    return uri.split('#')[0];
}

function normSchema(schema, baseUri) {
    if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === "object") {
        if (baseUri === undefined) {
            baseUri = schema.id;
        } else if (typeof schema.id === "string") {
            baseUri = resolveUrl(baseUri, schema.id);
            schema.id = baseUri;
        }
        if (Array.isArray(schema)) {
            for (var i = 0; i < schema.length; i++) {
                normSchema(schema[i], baseUri);
            }
        } else {
            if (typeof schema['$ref'] === "string") {
                schema['$ref'] = resolveUrl(baseUri, schema['$ref']);
            }
            for (var key in schema) {
                if (key !== "enum") {
                    normSchema(schema[key], baseUri);
                }
            }
        }
    }
}

function defaultErrorReporter(language) {
    language = language || 'en';

    var errorMessages = languages[language];

    return function (error) {
        var messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];
        if (typeof messageTemplate !== 'string') {
            return "Unknown error code " + error.code + ": " + (0, _stringify2.default)(error.messageParams);
        }
        var messageParams = error.params;
        // Adapted from Crockford's supplant()
        return messageTemplate.replace(/\{([^{}]*)\}/g, function (whole, varName) {
            var subValue = messageParams[varName];
            return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;
        });
    };
}

var ErrorCodes = {
    INVALID_TYPE: 0,
    ENUM_MISMATCH: 1,
    ANY_OF_MISSING: 10,
    ONE_OF_MISSING: 11,
    ONE_OF_MULTIPLE: 12,
    NOT_PASSED: 13,
    // Numeric errors
    NUMBER_MULTIPLE_OF: 100,
    NUMBER_MINIMUM: 101,
    NUMBER_MINIMUM_EXCLUSIVE: 102,
    NUMBER_MAXIMUM: 103,
    NUMBER_MAXIMUM_EXCLUSIVE: 104,
    NUMBER_NOT_A_NUMBER: 105,
    // String errors
    STRING_LENGTH_SHORT: 200,
    STRING_LENGTH_LONG: 201,
    STRING_PATTERN: 202,
    // Object errors
    OBJECT_PROPERTIES_MINIMUM: 300,
    OBJECT_PROPERTIES_MAXIMUM: 301,
    OBJECT_REQUIRED: 302,
    OBJECT_ADDITIONAL_PROPERTIES: 303,
    OBJECT_DEPENDENCY_KEY: 304,
    // Array errors
    ARRAY_LENGTH_SHORT: 400,
    ARRAY_LENGTH_LONG: 401,
    ARRAY_UNIQUE: 402,
    ARRAY_ADDITIONAL_ITEMS: 403,
    // Custom/user-defined errors
    FORMAT_CUSTOM: 500,
    KEYWORD_CUSTOM: 501,
    // Schema structure
    CIRCULAR_REFERENCE: 600,
    // Non-standard validation options
    UNKNOWN_PROPERTY: 1000
};
var ErrorCodeLookup = {};
for (var key in ErrorCodes) {
    ErrorCodeLookup[ErrorCodes[key]] = key;
}
var ErrorMessagesDefault = {
    INVALID_TYPE: "Invalid type: {type} (expected {expected})",
    ENUM_MISMATCH: "No enum match for: {value}",
    ANY_OF_MISSING: "Data does not match any schemas from \"anyOf\"",
    ONE_OF_MISSING: "Data does not match any schemas from \"oneOf\"",
    ONE_OF_MULTIPLE: "Data is valid against more than one schema from \"oneOf\": indices {index1} and {index2}",
    NOT_PASSED: "Data matches schema from \"not\"",
    // Numeric errors
    NUMBER_MULTIPLE_OF: "Value {value} is not a multiple of {multipleOf}",
    NUMBER_MINIMUM: "Value {value} is less than minimum {minimum}",
    NUMBER_MINIMUM_EXCLUSIVE: "Value {value} is equal to exclusive minimum {minimum}",
    NUMBER_MAXIMUM: "Value {value} is greater than maximum {maximum}",
    NUMBER_MAXIMUM_EXCLUSIVE: "Value {value} is equal to exclusive maximum {maximum}",
    NUMBER_NOT_A_NUMBER: "Value {value} is not a valid number",
    // String errors
    STRING_LENGTH_SHORT: "String is too short ({length} chars), minimum {minimum}",
    STRING_LENGTH_LONG: "String is too long ({length} chars), maximum {maximum}",
    STRING_PATTERN: "String does not match pattern: {pattern}",
    // Object errors
    OBJECT_PROPERTIES_MINIMUM: "Too few properties defined ({propertyCount}), minimum {minimum}",
    OBJECT_PROPERTIES_MAXIMUM: "Too many properties defined ({propertyCount}), maximum {maximum}",
    OBJECT_REQUIRED: "Missing required property: {key}",
    OBJECT_ADDITIONAL_PROPERTIES: "Additional properties not allowed",
    OBJECT_DEPENDENCY_KEY: "Dependency failed - key must exist: {missing} (due to key: {key})",
    // Array errors
    ARRAY_LENGTH_SHORT: "Array is too short ({length}), minimum {minimum}",
    ARRAY_LENGTH_LONG: "Array is too long ({length}), maximum {maximum}",
    ARRAY_UNIQUE: "Array items are not unique (indices {match1} and {match2})",
    ARRAY_ADDITIONAL_ITEMS: "Additional items not allowed",
    // Format errors
    FORMAT_CUSTOM: "Format validation failed ({message})",
    KEYWORD_CUSTOM: "Keyword failed: {key} ({message})",
    // Schema structure
    CIRCULAR_REFERENCE: "Circular $refs: {urls}",
    // Non-standard validation options
    UNKNOWN_PROPERTY: "Unknown property (not in schema)"
};

function ValidationError(code, params, dataPath, schemaPath, subErrors) {
    Error.call(this);
    if (code === undefined) {
        throw new Error("No error code supplied: " + schemaPath);
    }
    this.message = '';
    this.params = params;
    this.code = code;
    this.dataPath = dataPath || "";
    this.schemaPath = schemaPath || "";
    this.subErrors = subErrors || null;

    var err = new Error(this.message);
    this.stack = err.stack || err.stacktrace;
    if (!this.stack) {
        try {
            throw err;
        } catch (err) {
            this.stack = err.stack || err.stacktrace;
        }
    }
}

ValidationError.prototype = (0, _create2.default)(Error.prototype);
ValidationError.prototype.constructor = ValidationError;
ValidationError.prototype.name = 'ValidationError';

ValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {
    if (dataPrefix !== null) {
        dataPrefix = dataPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
        this.dataPath = "/" + dataPrefix + this.dataPath;
    }
    if (schemaPrefix !== null) {
        schemaPrefix = schemaPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
        this.schemaPath = "/" + schemaPrefix + this.schemaPath;
    }
    if (this.subErrors !== null) {
        for (var i = 0; i < this.subErrors.length; i++) {
            this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);
        }
    }
    return this;
};

function isTrustedUrl(baseUrl, testUrl) {
    if (testUrl.substring(0, baseUrl.length) === baseUrl) {
        var remainder = testUrl.substring(baseUrl.length);
        if (testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === "/" || remainder.charAt(0) === "#" || remainder.charAt(0) === "?") {
            return true;
        }
    }
    return false;
}

var languages = {};

function createApi(language) {
    var globalContext = new ValidatorContext();
    var currentLanguage;
    var customErrorReporter;
    var api = {
        setErrorReporter: function setErrorReporter(reporter) {
            if (typeof reporter === 'string') {
                return this.language(reporter);
            }
            customErrorReporter = reporter;
            return true;
        },
        addFormat: function addFormat() {
            globalContext.addFormat.apply(globalContext, arguments);
        },
        language: function language(code) {
            if (!code) {
                return currentLanguage;
            }
            if (!languages[code]) {
                code = code.split('-')[0]; // fall back to base language
            }
            if (languages[code]) {
                currentLanguage = code;
                return code; // so you can tell if fall-back has happened
            }
            return false;
        },
        addLanguage: function addLanguage(code, messageMap) {
            var key;
            for (key in ErrorCodes) {
                if (messageMap[key] && !messageMap[ErrorCodes[key]]) {
                    messageMap[ErrorCodes[key]] = messageMap[key];
                }
            }
            var rootCode = code.split('-')[0];
            if (!languages[rootCode]) {
                // use for base language if not yet defined
                languages[code] = messageMap;
                languages[rootCode] = messageMap;
            } else {
                languages[code] = (0, _create2.default)(languages[rootCode]);
                for (key in messageMap) {
                    if (typeof languages[rootCode][key] === 'undefined') {
                        languages[rootCode][key] = messageMap[key];
                    }
                    languages[code][key] = messageMap[key];
                }
            }
            return this;
        },
        freshApi: function freshApi(language) {
            var result = createApi();
            if (language) {
                result.language(language);
            }
            return result;
        },
        validate: function validate(data, schema, checkRecursive, banUnknownProperties) {
            var def = defaultErrorReporter(currentLanguage);
            var errorReporter = customErrorReporter ? function (error, data, schema) {
                return customErrorReporter(error, data, schema) || def(error, data, schema);
            } : def;
            var context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);
            if (typeof schema === "string") {
                schema = { "$ref": schema };
            }
            context.addSchema("", schema);
            var error = context.validateAll(data, schema, null, null, "");
            if (!error && banUnknownProperties) {
                error = context.banUnknownProperties(data, schema);
            }
            this.error = error;
            this.missing = context.missing;
            this.valid = error === null;
            return this.valid;
        },
        validateResult: function validateResult() {
            var result = {};
            this.validate.apply(result, arguments);
            return result;
        },
        validateMultiple: function validateMultiple(data, schema, checkRecursive, banUnknownProperties) {
            var def = defaultErrorReporter(currentLanguage);
            var errorReporter = customErrorReporter ? function (error, data, schema) {
                return customErrorReporter(error, data, schema) || def(error, data, schema);
            } : def;
            var context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);
            if (typeof schema === "string") {
                schema = { "$ref": schema };
            }
            context.addSchema("", schema);
            context.validateAll(data, schema, null, null, "");
            if (banUnknownProperties) {
                context.banUnknownProperties(data, schema);
            }
            var result = {};
            result.errors = context.errors;
            result.missing = context.missing;
            result.valid = result.errors.length === 0;
            return result;
        },
        addSchema: function addSchema() {
            return globalContext.addSchema.apply(globalContext, arguments);
        },
        getSchema: function getSchema() {
            return globalContext.getSchema.apply(globalContext, arguments);
        },
        getSchemaMap: function getSchemaMap() {
            return globalContext.getSchemaMap.apply(globalContext, arguments);
        },
        getSchemaUris: function getSchemaUris() {
            return globalContext.getSchemaUris.apply(globalContext, arguments);
        },
        getMissingUris: function getMissingUris() {
            return globalContext.getMissingUris.apply(globalContext, arguments);
        },
        dropSchemas: function dropSchemas() {
            globalContext.dropSchemas.apply(globalContext, arguments);
        },
        defineKeyword: function defineKeyword() {
            globalContext.defineKeyword.apply(globalContext, arguments);
        },
        defineError: function defineError(codeName, codeNumber, defaultMessage) {
            if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {
                throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');
            }
            if (typeof codeNumber !== 'number' || codeNumber % 1 !== 0 || codeNumber < 10000) {
                throw new Error('Code number must be an integer > 10000');
            }
            if (typeof ErrorCodes[codeName] !== 'undefined') {
                throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);
            }
            if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {
                throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);
            }
            ErrorCodes[codeName] = codeNumber;
            ErrorCodeLookup[codeNumber] = codeName;
            ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;
            for (var langCode in languages) {
                var language = languages[langCode];
                if (language[codeName]) {
                    language[codeNumber] = language[codeNumber] || language[codeName];
                }
            }
        },
        reset: function reset() {
            globalContext.reset();
            this.error = null;
            this.missing = [];
            this.valid = true;
        },
        missing: [],
        error: null,
        valid: true,
        normSchema: normSchema,
        resolveUrl: resolveUrl,
        getDocumentUri: getDocumentUri,
        errorCodes: ErrorCodes
    };
    api.language(language || 'en');
    return api;
}

//export function validator() {
var tv4 = createApi();
tv4.addLanguage('en-gb', ErrorMessagesDefault);

//legacy property
tv4.tv4 = tv4;
//return tv4;
exports.default = tv4;
//}

module.exports = exports['default'];

},{"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/create":4,"babel-runtime/core-js/object/define-property":5,"babel-runtime/core-js/object/is-frozen":8,"babel-runtime/core-js/object/keys":9,"babel-runtime/helpers/typeof":19}],452:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.divideURL = divideURL;
exports.divideEmail = divideEmail;
exports.emptyObject = emptyObject;
exports.deepClone = deepClone;
exports.removePathFromURL = removePathFromURL;
exports.getUserURLFromEmail = getUserURLFromEmail;
exports.getUserEmailFromURL = getUserEmailFromURL;
exports.convertToUserURL = convertToUserURL;
exports.isDataObjectURL = isDataObjectURL;
exports.getConfigurationResources = getConfigurationResources;
exports.buildURL = buildURL;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  if (!url) throw Error('URL is needed to split');

  // let re = /([a-zA-Z-]*)?:\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b)*(\/[\/\d\w\.-]*)*(?:[\?])*(.+)*/gi;
  var re = /([a-zA-Z-]*):\/\/(?:\.)?([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
  var subst = '$1,$2,$3';
  var parts = url.replace(re, subst).split(',');

  // If the url has no protocol, the default protocol set is https
  if (parts[0] === url) {
    parts[0] = 'https';
    parts[1] = url;
  }

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

function divideEmail(email) {
  var indexOfAt = email.indexOf('@');

  var result = {
    username: email.substring(0, indexOfAt),
    domain: email.substring(indexOfAt + 1, email.length)
  };

  return result;
}

/**
 * Check if an Object is empty
 * @param  {Object} object Object to be checked
 * @return {Boolean}       status of Object, empty or not (true|false);
 */
function emptyObject(object) {
  return (0, _keys2.default)(object).length > 0 ? false : true;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse((0, _stringify2.default)(obj));
}

function removePathFromURL(url) {
  var splitURL = url.split('/');
  return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];
}

/**
 * Obtains the user URL that corresponds to a given email
 * @param  {string} userEmail The user email
 * @return {URL.URL} userURL The user URL
 */
function getUserURLFromEmail(userEmail) {
  var indexOfAt = userEmail.indexOf('@');
  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);
}

/**
 * Obtains the user email that corresponds to a given URL
 * @param  {URL.URL} userURL The user URL
 * @return {string} userEmail The user email
 */
function getUserEmailFromURL(userURL) {
  var url = divideURL(userURL);
  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'
}

/**
 * Check if the user identifier is already in the URL format, if not, convert to URL format
 * @param  {string}   identifier  user identifier
 * @return {string}   userURL    the user URL
 */
function convertToUserURL(identifier) {

  // check if the identifier is already in the url format
  if (identifier.substring(0, 7) === 'user://') {
    var dividedURL = divideURL(identifier);

    //check if the url is well formated
    if (dividedURL.domain && dividedURL.identity) {
      return identifier;
    } else {
      throw 'userURL with wrong format';
    }

    //if not, convert the user email to URL format
  } else {
    return getUserURLFromEmail(identifier);
  }
}

function isDataObjectURL(url) {
  var schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];
  var splitURL = url.split('://');
  var urlSchema = splitURL[0];

  return schemasToIgnore.indexOf(urlSchema) === -1;
}

/**
 * get information relative each component configured on runtime configuration;
 * @param  {object} configuration object with all configuration
 * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;
 * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy
 * @return {object}               return an object with all configurations;
 */
function getConfigurationResources(configuration, component, resource) {
  var objectResource = configuration[component];
  var resourceType = objectResource[resource];

  return resourceType;
}

/**
 * Build a full url with the runtime configuration;
 * @param  {object} configuration object with all configuration
 * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;
 * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy
 * @param  {string} type          resource to get, like a hyperty name or protocolstub name;
 * @param  {boolean} useFallback  if true the function will check if have a fallback url;
 * @return {string}               partial url to contact the resource;
 */
function buildURL(configuration, component, resource, type) {
  var useFallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  var objectResource = configuration[component];
  var url = void 0;

  if (!objectResource.hasOwnProperty(resource)) {
    throw Error('The configuration ' + (0, _stringify2.default)(objectResource, '', 2) + ' don\'t have the ' + resource + ' resource you are looking for');
  }

  var resourceType = objectResource[resource];

  if (type) {
    url = resourceType.prefix + configuration.domain + resourceType.suffix + type;
    if (resourceType.hasOwnProperty('fallback') && useFallback) {
      if (resourceType.fallback.indexOf('%domain%')) {
        url = resourceType.fallback.replace(/(%domain%)/g, configuration.domain) + type;
      } else {
        url = resourceType.fallback + type;
      }
    }
  } else {
    url = resourceType.prefix + configuration.domain + resourceType.suffix;
  }

  // console.log(url);

  return url;
}

},{"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/keys":9}]},{},[444])(444)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZm9yLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ludm9rZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fa2V5b2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFydGlhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhdGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL3NoaW0uanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIm5vZGVfbW9kdWxlcy9zZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5LmpzIiwic3JjL2J1cy9CdXMuanMiLCJzcmMvYnVzL01lc3NhZ2VCdXMuanMiLCJzcmMvYnVzL1BpcGVsaW5lLmpzIiwic3JjL2lkZW50aXR5L0NyeXB0by5qcyIsInNyYy9pZGVudGl0eS9HdWlGYWtlLmpzIiwic3JjL2lkZW50aXR5L0lkZW50aXR5LmpzIiwic3JjL2lkZW50aXR5L0lkZW50aXR5TW9kdWxlLmpzIiwic3JjL3BvbGljeS9BY3Rpb25zU2VydmljZS5qcyIsInNyYy9wb2xpY3kvT3BlcmF0b3JzLmpzIiwic3JjL3BvbGljeS9QRFAuanMiLCJzcmMvcG9saWN5L1BFUC5qcyIsInNyYy9wb2xpY3kvUG9saWN5LmpzIiwic3JjL3BvbGljeS9SZVRoaW5rQ3R4LmpzIiwic3JjL3BvbGljeS9SdWxlLmpzIiwic3JjL3BvbGljeS9jb21iaW5pbmdBbGdvcml0aG1zL0FsbG93T3ZlcnJpZGVzLmpzIiwic3JjL3BvbGljeS9jb21iaW5pbmdBbGdvcml0aG1zL0Jsb2NrT3ZlcnJpZGVzLmpzIiwic3JjL3BvbGljeS9jb21iaW5pbmdBbGdvcml0aG1zL0ZpcnN0QXBwbGljYWJsZS5qcyIsInNyYy9wb2xpY3kvY29uZGl0aW9ucy9BZHZhbmNlZENvbmRpdGlvbi5qcyIsInNyYy9wb2xpY3kvY29uZGl0aW9ucy9Db25kaXRpb24uanMiLCJzcmMvcG9saWN5L2NvbmRpdGlvbnMvU3Vic2NyaXB0aW9uQ29uZGl0aW9uLmpzIiwic3JjL3BvbGljeS9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4LmpzIiwic3JjL3JlZ2lzdHJ5L0FkZHJlc3NBbGxvY2F0aW9uLmpzIiwic3JjL3JlZ2lzdHJ5L0h5cGVydHlJbnN0YW5jZS5qcyIsInNyYy9yZWdpc3RyeS9SZWdpc3RyeS5qcyIsInNyYy9yZWdpc3RyeS9SZWdpc3RyeURhdGFNb2RlbC5qcyIsInNyYy9ydW50aW1lL0Rlc2NyaXB0b3JzLmpzIiwic3JjL3J1bnRpbWUvTG9hZGVyLmpzIiwic3JjL3J1bnRpbWUvUnVudGltZVVBLmpzIiwic3JjL3J1bnRpbWUvcnVudGltZUNvbmZpZ3VyYXRpb24uanMiLCJzcmMvc3luY2hlci9PYmplY3RBbGxvY2F0aW9uLmpzIiwic3JjL3N5bmNoZXIvT2JzZXJ2ZXJPYmplY3QuanMiLCJzcmMvc3luY2hlci9SZXBvcnRlck9iamVjdC5qcyIsInNyYy9zeW5jaGVyL1N1YnNjcmlwdGlvbi5qcyIsInNyYy9zeW5jaGVyL1N5bmNoZXJNYW5hZ2VyLmpzIiwic3JjL3V0aWxzL3R2NC5qcyIsInNyYy91dGlscy91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzNCQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7O0FDQUE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBOztBQ0ZBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7O0FDRkE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU9BOztBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ1BBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOWRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNqQkE7QUFDQTtBQUNBOzs7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Q0FBa0IsYUFBbEIsRUFBaUMsU0FBakMsRUFBNEMsUUFBNUMsRUFBc0QsSUFBdEQsRUFBaUY7QUFBQSxNQUFyQixXQUFxQix1RUFBUCxLQUFPOztBQUN0RixNQUFJLGlCQUFpQixjQUFjLFNBQWQsQ0FBckI7QUFDQSxNQUFJLFlBQUo7O0FBRUEsTUFBSSxDQUFDLGVBQWUsY0FBZixDQUE4QixRQUE5QixDQUFMLEVBQThDO0FBQzVDLFVBQU0sTUFBTSx1QkFBdUIseUJBQWUsY0FBZixFQUErQixFQUEvQixFQUFtQyxDQUFuQyxDQUF2QixHQUErRCxtQkFBL0QsR0FBcUYsUUFBckYsR0FBZ0csK0JBQXRHLENBQU47QUFDRDs7QUFFRCxNQUFJLGVBQWUsZUFBZSxRQUFmLENBQW5COztBQUVBLE1BQUksSUFBSixFQUFVO0FBQ1IsVUFBTSxhQUFhLE1BQWIsR0FBc0IsY0FBYyxNQUFwQyxHQUE2QyxhQUFhLE1BQTFELEdBQW1FLElBQXpFO0FBQ0EsUUFBSSxhQUFhLGNBQWIsQ0FBNEIsVUFBNUIsS0FBMkMsV0FBL0MsRUFBNEQ7QUFDMUQsVUFBSSxhQUFhLFFBQWIsQ0FBc0IsT0FBdEIsQ0FBOEIsVUFBOUIsQ0FBSixFQUErQztBQUM3QyxjQUFNLGFBQWEsUUFBYixDQUFzQixPQUF0QixDQUE4QixhQUE5QixFQUE2QyxjQUFjLE1BQTNELElBQXFFLElBQTNFO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsY0FBTSxhQUFhLFFBQWIsR0FBd0IsSUFBOUI7QUFDRDtBQUNGO0FBQ0YsR0FURCxNQVNPO0FBQ0wsVUFBTSxhQUFhLE1BQWIsR0FBc0IsY0FBYyxNQUFwQyxHQUE2QyxhQUFhLE1BQWhFO0FBQ0Q7O0FBRUQ7O0FBRUEsU0FBTyxHQUFQO0FBQ0QiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIik7XG5cbnJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWVcIik7XG5cbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XG5cbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcbn1cbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XG5cbnZhciBERUZJTkVfUFJPUEVSVFkgPSBcImRlZmluZVByb3BlcnR5XCI7XG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9KTtcbn1cblxuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkTGVmdFwiLCBcIlwiLnBhZFN0YXJ0KTtcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcblxuXCJwb3AscmV2ZXJzZSxzaGlmdCxrZXlzLHZhbHVlcyxlbnRyaWVzLGluZGV4T2YsZXZlcnksc29tZSxmb3JFYWNoLG1hcCxmaWx0ZXIsZmluZCxmaW5kSW5kZXgsaW5jbHVkZXMsam9pbixzbGljZSxjb25jYXQscHVzaCxzcGxpY2UsdW5zaGlmdCxzb3J0LGxhc3RJbmRleE9mLHJlZHVjZSxyZWR1Y2VSaWdodCxjb3B5V2l0aGluLGZpbGxcIi5zcGxpdChcIixcIikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XG59KTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2Fzc2lnblwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2VcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgKDAsIF9kZWZpbmVQcm9wZXJ0eTIuZGVmYXVsdCkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICAgIGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0oKTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpO1xuXG52YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiBnZXQob2JqZWN0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHtcbiAgaWYgKG9iamVjdCA9PT0gbnVsbCkgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICB2YXIgZGVzYyA9ICgwLCBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMi5kZWZhdWx0KShvYmplY3QsIHByb3BlcnR5KTtcblxuICBpZiAoZGVzYyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIHBhcmVudCA9ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKG9iamVjdCk7XG5cbiAgICBpZiAocGFyZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZ2V0KHBhcmVudCwgcHJvcGVydHksIHJlY2VpdmVyKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcbiAgICByZXR1cm4gZGVzYy52YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7XG5cbiAgICBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTtcbiAgfVxufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9zZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpO1xuXG52YXIgX3NldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NldFByb3RvdHlwZU9mKTtcblxudmFyIF9jcmVhdGUgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpO1xuXG52YXIgX2NyZWF0ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGUpO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgKHR5cGVvZiBzdXBlckNsYXNzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShzdXBlckNsYXNzKSkpO1xuICB9XG5cbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gKDAsIF9jcmVhdGUyLmRlZmF1bHQpKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQgPyAoMCwgX3NldFByb3RvdHlwZU9mMi5kZWZhdWx0KShzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YyID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZnVuY3Rpb24gKHNlbGYsIGNhbGwpIHtcbiAgaWYgKCFzZWxmKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIGNhbGwgJiYgKCh0eXBlb2YgY2FsbCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiAoMCwgX3R5cGVvZjMuZGVmYXVsdCkoY2FsbCkpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2l0ZXJhdG9yID0gcmVxdWlyZShcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCIpO1xuXG52YXIgX2l0ZXJhdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2l0ZXJhdG9yKTtcblxudmFyIF9zeW1ib2wgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2xcIik7XG5cbnZhciBfc3ltYm9sMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgX2l0ZXJhdG9yMi5kZWZhdWx0ID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX3N5bWJvbDIuZGVmYXVsdCAmJiBvYmogIT09IF9zeW1ib2wyLmRlZmF1bHQucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZihfaXRlcmF0b3IyLmRlZmF1bHQpID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59IDogZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iaiA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKG9iaik7XG59OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlOyIsInZhciBjb3JlICA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKVxuICAsICRKU09OID0gY29yZS5KU09OIHx8IChjb3JlLkpTT04gPSB7c3RyaW5naWZ5OiBKU09OLnN0cmluZ2lmeX0pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHJldHVybiAkSlNPTi5zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3VtZW50cyk7XG59OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5hc3NpZ247IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGUoUCwgRCl7XG4gIHJldHVybiAkT2JqZWN0LmNyZWF0ZShQLCBEKTtcbn07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKXtcbiAgcmV0dXJuICRPYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYyk7XG59OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciAkT2JqZWN0ID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICByZXR1cm4gJE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG59OyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuZ2V0UHJvdG90eXBlT2Y7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmlzRnJvemVuOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Qua2V5czsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LnNldFByb3RvdHlwZU9mOyIsInJlcXVpcmUoJy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvX2NvcmUnKS5Qcm9taXNlOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuU3ltYm9sOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX3drcy1leHQnKS5mKCdpdGVyYXRvcicpOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZih0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xuICByZXR1cm4gaXQ7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpe1xuICBpZighKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSl7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKCFpc09iamVjdChpdCkpdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xuICByZXR1cm4gaXQ7XG59OyIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2Zcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCB0b0luZGV4ICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihJU19JTkNMVURFUyl7XG4gIHJldHVybiBmdW5jdGlvbigkdGhpcywgZWwsIGZyb21JbmRleCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCgkdGhpcylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IHRvSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpXG4gICAgICAsIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICBpZihJU19JTkNMVURFUyAmJiBlbCAhPSBlbCl3aGlsZShsZW5ndGggPiBpbmRleCl7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICBpZih2YWx1ZSAhPSB2YWx1ZSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSN0b0luZGV4IGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvcig7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspaWYoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTyl7XG4gICAgICBpZihPW2luZGV4XSA9PT0gZWwpcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTsiLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJylcbiAgLy8gRVMzIHdyb25nIGhlcmVcbiAgLCBBUkcgPSBjb2YoZnVuY3Rpb24oKXsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59OyIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07IiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMi40LjAnfTtcbmlmKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCl7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmKHRoYXQgPT09IHVuZGVmaW5lZClyZXR1cm4gZm47XG4gIHN3aXRjaChsZW5ndGgpe1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uKGEpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbihhLCBiKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07IiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59OyIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pOyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudFxuICAvLyBpbiBvbGQgSUUgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCdcbiAgLCBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTsiLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTsiLCIvLyBhbGwgZW51bWVyYWJsZSBvYmplY3Qga2V5cywgaW5jbHVkZXMgc3ltYm9sc1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciByZXN1bHQgICAgID0gZ2V0S2V5cyhpdClcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIGlmKGdldFN5bWJvbHMpe1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdClcbiAgICAgICwgaXNFbnVtICA9IHBJRS5mXG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShzeW1ib2xzLmxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCBJU19XUkFQICAgPSB0eXBlICYgJGV4cG9ydC5XXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG4gICAgLCBrZXksIG93biwgb3V0O1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgaWYob3duICYmIGtleSBpbiBleHBvcnRzKWNvbnRpbnVlO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAvLyBwcmV2ZW50IGdsb2JhbCBwb2xsdXRpb24gZm9yIG5hbWVzcGFjZXNcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XVxuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgOiBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbClcbiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlIHRoZW0gaW4gbGlicmFyeVxuICAgIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQyl7XG4gICAgICB2YXIgRiA9IGZ1bmN0aW9uKGEsIGIsIGMpe1xuICAgICAgICBpZih0aGlzIGluc3RhbmNlb2YgQyl7XG4gICAgICAgICAgc3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IEM7XG4gICAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQyhhKTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBDKGEsIGIpO1xuICAgICAgICAgIH0gcmV0dXJuIG5ldyBDKGEsIGIsIGMpO1xuICAgICAgICB9IHJldHVybiBDLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgLy8gbWFrZSBzdGF0aWMgdmVyc2lvbnMgZm9yIHByb3RvdHlwZSBtZXRob2RzXG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5tZXRob2RzLiVOQU1FJVxuICAgIGlmKElTX1BST1RPKXtcbiAgICAgIChleHBvcnRzLnZpcnR1YWwgfHwgKGV4cG9ydHMudmlydHVhbCA9IHt9KSlba2V5XSA9IG91dDtcbiAgICAgIC8vIGV4cG9ydCBwcm90byBtZXRob2RzIHRvIGNvcmUuJUNPTlNUUlVDVE9SJS5wcm90b3R5cGUuJU5BTUUlXG4gICAgICBpZih0eXBlICYgJGV4cG9ydC5SICYmIGV4cFByb3RvICYmICFleHBQcm90b1trZXldKWhpZGUoZXhwUHJvdG8sIGtleSwgb3V0KTtcbiAgICB9XG4gIH1cbn07XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59OyIsInZhciBjdHggICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgY2FsbCAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKVxuICAsIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpXG4gICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBnZXRJdGVyRm4gICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJylcbiAgLCBCUkVBSyAgICAgICA9IHt9XG4gICwgUkVUVVJOICAgICAgPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKXtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKVxuICAgICwgZiAgICAgID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJyl0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmKGlzQXJyYXlJdGVyKGl0ZXJGbikpZm9yKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7ICl7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTilyZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyAgPSBCUkVBSztcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYiLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIGtleSl7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTsiLCJ2YXIgZFAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uKG9iamVjdCwga2V5LCB2YWx1ZSl7XG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG59IDogZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH19KS5hICE9IDc7XG59KTsiLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIGFyZ3MsIHRoYXQpe1xuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XG4gIHN3aXRjaChhcmdzLmxlbmd0aCl7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuICAgICAgICAgICAgICBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07IiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07IiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIElURVJBVE9SICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xufTsiLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKXtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTsiLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcyl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcbiAgfSBjYXRjaChlKXtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmKHJldCAhPT0gdW5kZWZpbmVkKWFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgdGhyb3cgZTtcbiAgfVxufTsiLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBkZXNjcmlwdG9yICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpe1xuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHtuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgSXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsICRpdGVyQ3JlYXRlICAgID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgSVRFUkFUT1IgICAgICAgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKVxuICAsIEJVR0dZICAgICAgICAgID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpIC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgLCBGRl9JVEVSQVRPUiAgICA9ICdAQGl0ZXJhdG9yJ1xuICAsIEtFWVMgICAgICAgICAgID0gJ2tleXMnXG4gICwgVkFMVUVTICAgICAgICAgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpe1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbihraW5kKXtcbiAgICBpZighQlVHR1kgJiYga2luZCBpbiBwcm90bylyZXR1cm4gcHJvdG9ba2luZF07XG4gICAgc3dpdGNoKGtpbmQpe1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgICAgY2FzZSBWQUxVRVM6IHJldHVybiBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgICAgICAgID0gTkFNRSArICcgSXRlcmF0b3InXG4gICAgLCBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVNcbiAgICAsIFZBTFVFU19CVUcgPSBmYWxzZVxuICAgICwgcHJvdG8gICAgICA9IEJhc2UucHJvdG90eXBlXG4gICAgLCAkbmF0aXZlICAgID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdXG4gICAgLCAkZGVmYXVsdCAgID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVClcbiAgICAsICRlbnRyaWVzICAgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkXG4gICAgLCAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZVxuICAgICwgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcbiAgLy8gRml4IG5hdGl2ZVxuICBpZigkYW55TmF0aXZlKXtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSkpO1xuICAgIGlmKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKXtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZighTElCUkFSWSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUyl7XG4gICAgVkFMVUVTX0JVRyA9IHRydWU7XG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKXsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpe1xuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gID0gcmV0dXJuVGhpcztcbiAgaWYoREVGQVVMVCl7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogIERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogICAgSVNfU0VUICAgICA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmKEZPUkNFRClmb3Ioa2V5IGluIG1ldGhvZHMpe1xuICAgICAgaWYoIShrZXkgaW4gcHJvdG8pKXJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07IiwidmFyIElURVJBVE9SICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKXsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKXsgdGhyb3cgMjsgfSk7XG59IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3Npbmcpe1xuICBpZighc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORylyZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciAgPSBbN11cbiAgICAgICwgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbigpeyByZXR1cm4ge2RvbmU6IHNhZmUgPSB0cnVlfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24oKXsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59OyIsIm1vZHVsZS5leHBvcnRzID0ge307IiwidmFyIGdldEtleXMgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgZWwpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGtleXMgICA9IGdldEtleXMoTylcbiAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKGxlbmd0aCA+IGluZGV4KWlmKE9ba2V5ID0ga2V5c1tpbmRleCsrXV0gPT09IGVsKXJldHVybiBrZXk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gdHJ1ZTsiLCJ2YXIgTUVUQSAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnbWV0YScpXG4gICwgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGhhcyAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBzZXREZXNjICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBpZCAgICAgICA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbigpe1xuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xudmFyIHNldE1ldGEgPSBmdW5jdGlvbihpdCl7XG4gIHNldERlc2MoaXQsIE1FVEEsIHt2YWx1ZToge1xuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxuICAgIHc6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH19KTtcbn07XG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuICdGJztcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbihpdCwgY3JlYXRlKXtcbiAgaWYoIWhhcyhpdCwgTUVUQSkpe1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYoIWlzRXh0ZW5zaWJsZShpdCkpcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZighY3JlYXRlKXJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBXS53O1xufTtcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xudmFyIG9uRnJlZXplID0gZnVuY3Rpb24oaXQpe1xuICBpZihGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6ICAgICAgTUVUQSxcbiAgTkVFRDogICAgIGZhbHNlLFxuICBmYXN0S2V5OiAgZmFzdEtleSxcbiAgZ2V0V2VhazogIGdldFdlYWssXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0XG4gICwgT2JzZXJ2ZXIgID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXJcbiAgLCBwcm9jZXNzICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIFByb21pc2UgICA9IGdsb2JhbC5Qcm9taXNlXG4gICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZihpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSlwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlKGhlYWQpe1xuICAgICAgZm4gICA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIGlmKGhlYWQpbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYocGFyZW50KXBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYoaXNOb2RlKXtcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyXG4gIH0gZWxzZSBpZihPYnNlcnZlcil7XG4gICAgdmFyIHRvZ2dsZSA9IHRydWVcbiAgICAgICwgbm9kZSAgID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZihQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSl7XG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcbiAgLy8gLSBzZXRUaW1lb3V0XG4gIH0gZWxzZSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oZm4pe1xuICAgIHZhciB0YXNrID0ge2ZuOiBmbiwgbmV4dDogdW5kZWZpbmVkfTtcbiAgICBpZihsYXN0KWxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYoIWhlYWQpe1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXG52YXIgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgZ09QUyAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgcElFICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJylcbiAgLCB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCAkYXNzaWduICA9IE9iamVjdC5hc3NpZ247XG5cbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHZhciBBID0ge31cbiAgICAsIEIgPSB7fVxuICAgICwgUyA9IFN5bWJvbCgpXG4gICAgLCBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24oayl7IEJba10gPSBrOyB9KTtcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XG59KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgdmFyIFQgICAgID0gdG9PYmplY3QodGFyZ2V0KVxuICAgICwgYUxlbiAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBpbmRleCA9IDFcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmZcbiAgICAsIGlzRW51bSAgICAgPSBwSUUuZjtcbiAgd2hpbGUoYUxlbiA+IGluZGV4KXtcbiAgICB2YXIgUyAgICAgID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pXG4gICAgICAsIGtleXMgICA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUylcbiAgICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICwgaiAgICAgID0gMFxuICAgICAgLCBrZXk7XG4gICAgd2hpbGUobGVuZ3RoID4gailpZihpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKVRba2V5XSA9IFNba2V5XTtcbiAgfSByZXR1cm4gVDtcbn0gOiAkYXNzaWduOyIsIi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBkUHMgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBFbXB0eSAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBQUk9UT1RZUEUgICA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uKCl7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpXG4gICAgLCBpICAgICAgPSBlbnVtQnVnS2V5cy5sZW5ndGhcbiAgICAsIGx0ICAgICA9ICc8J1xuICAgICwgZ3QgICAgID0gJz4nXG4gICAgLCBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZShpLS0pZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpe1xuICB2YXIgcmVzdWx0O1xuICBpZihPICE9PSBudWxsKXtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5O1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRQcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGRQICAgICAgICAgICAgID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG5leHBvcnRzLmYgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyl7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZihJRThfRE9NX0RFRklORSl0cnkge1xuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZignZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKU9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07IiwidmFyIGRQICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0S2V5cyAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcyl7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyAgID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGkgPSAwXG4gICAgLCBQO1xuICB3aGlsZShsZW5ndGggPiBpKWRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTsiLCJ2YXIgcElFICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcbiAgLCBnT1BEICAgICAgICAgICA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApe1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgaWYoaGFzKE8sIFApKXJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07IiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGdPUE4gICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIHRvU3RyaW5nICA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24oaXQpe1xuICB0cnkge1xuICAgIHJldHVybiBnT1BOKGl0KTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XScgPyBnZXRXaW5kb3dOYW1lcyhpdCkgOiBnT1BOKHRvSU9iamVjdChpdCkpO1xufTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07IiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sczsiLCIvLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCB0b09iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgSUVfUFJPVE8gICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJylcbiAgLCBPYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uKE8pe1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmKGhhcyhPLCBJRV9QUk9UTykpcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZih0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKXtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XG59OyIsInZhciBoYXMgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvSU9iamVjdCAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgSUVfUFJPVE8gICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iamVjdCwgbmFtZXMpe1xuICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gTylpZihrZXkgIT0gSUVfUFJPVE8paGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZShuYW1lcy5sZW5ndGggPiBpKWlmKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSl7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTsiLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJylcbiAgLCBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pe1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTsiLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsiLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb3JlICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYyl7XG4gIHZhciBmbiAgPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV1cbiAgICAsIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuICB9O1xufTsiLCJ2YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpe1xuICBmb3IodmFyIGtleSBpbiBzcmMpe1xuICAgIGlmKHNhZmUgJiYgdGFyZ2V0W2tleV0pdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICBlbHNlIGhpZGUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfSByZXR1cm4gdGFyZ2V0O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2hpZGUnKTsiLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbihPLCBwcm90byl7XG4gIGFuT2JqZWN0KE8pO1xuICBpZighaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKXRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uKHRlc3QsIGJ1Z2d5LCBzZXQpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2goZSl7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKXtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZihidWdneSlPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBTUEVDSUVTICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcbiAgdmFyIEMgPSB0eXBlb2YgY29yZVtLRVldID09ICdmdW5jdGlvbicgPyBjb3JlW0tFWV0gOiBnbG9iYWxbS0VZXTtcbiAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSlkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07IiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBoYXMgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpe1xuICBpZihpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKWRlZihpdCwgVEFHLCB7Y29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnfSk7XG59OyIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgna2V5cycpXG4gICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59OyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nXG4gICwgc3RvcmUgID0gZ2xvYmFsW1NIQVJFRF0gfHwgKGdsb2JhbFtTSEFSRURdID0ge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTtcbn07IiwiLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBTUEVDSUVTICAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihPLCBEKXtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvciwgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTsiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XG4vLyBmYWxzZSAtPiBTdHJpbmcjY29kZVBvaW50QXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVE9fU1RSSU5HKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcyl7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcbiAgICAgICwgaSA9IHRvSW50ZWdlcihwb3MpXG4gICAgICAsIGwgPSBzLmxlbmd0aFxuICAgICAgLCBhLCBiO1xuICAgIGlmKGkgPCAwIHx8IGkgPj0gbClyZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZlxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xuICB9O1xufTsiLCJ2YXIgY3R4ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBpbnZva2UgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pbnZva2UnKVxuICAsIGh0bWwgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2h0bWwnKVxuICAsIGNlbCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKVxuICAsIGdsb2JhbCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBzZXRUYXNrICAgICAgICAgICAgPSBnbG9iYWwuc2V0SW1tZWRpYXRlXG4gICwgY2xlYXJUYXNrICAgICAgICAgID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlXG4gICwgTWVzc2FnZUNoYW5uZWwgICAgID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsXG4gICwgY291bnRlciAgICAgICAgICAgID0gMFxuICAsIHF1ZXVlICAgICAgICAgICAgICA9IHt9XG4gICwgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSdcbiAgLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbigpe1xuICB2YXIgaWQgPSArdGhpcztcbiAgaWYocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKXtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQpe1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZighc2V0VGFzayB8fCAhY2xlYXJUYXNrKXtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbil7XG4gICAgdmFyIGFyZ3MgPSBbXSwgaSA9IDE7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKXtcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCl7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYoTWVzc2FnZUNoYW5uZWwpe1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgcG9ydCAgICA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZihnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiAgIHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07IiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1heCAgICAgICA9IE1hdGgubWF4XG4gICwgbWluICAgICAgID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGluZGV4LCBsZW5ndGgpe1xuICBpbmRleCA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xufTsiLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07IiwiLy8gdG8gaW5kZXhlZCBvYmplY3QsIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xufTsiLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTsiLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07IiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbi8vIGluc3RlYWQgb2YgdGhlIEVTNiBzcGVjIHZlcnNpb24sIHdlIGRpZG4ndCBpbXBsZW1lbnQgQEB0b1ByaW1pdGl2ZSBjYXNlXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwgUyl7XG4gIGlmKCFpc09iamVjdChpdCkpcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSlyZXR1cm4gdmFsO1xuICBpZih0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07IiwidmFyIGlkID0gMFxuICAsIHB4ID0gTWF0aC5yYW5kb20oKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07IiwidmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgd2tzRXh0ICAgICAgICAgPSByZXF1aXJlKCcuL193a3MtZXh0JylcbiAgLCBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZihuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKWRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHt2YWx1ZTogd2tzRXh0LmYobmFtZSl9KTtcbn07IiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7IiwidmFyIHN0b3JlICAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJylcbiAgLCB1aWQgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBTeW1ib2wgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sXG4gICwgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcblxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lKXtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7IiwidmFyIGNsYXNzb2YgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIElURVJBVE9SICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoaXQgIT0gdW5kZWZpbmVkKXJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKVxuICAsIHN0ZXAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKVxuICAsIEl0ZXJhdG9ycyAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIHRvSU9iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpe1xuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAvLyBraW5kXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcbn0sIGZ1bmN0aW9uKCl7XG4gIHZhciBPICAgICA9IHRoaXMuX3RcbiAgICAsIGtpbmQgID0gdGhpcy5fa1xuICAgICwgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKXtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgaW5kZXgpO1xuICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTsiLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7YXNzaWduOiByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyl9KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2NyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpfSk7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mfSk7IiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxudmFyIHRvSU9iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldFByb3RvdHlwZU9mJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KXtcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uKCRpc0Zyb3plbil7XG4gIHJldHVybiBmdW5jdGlvbiBpc0Zyb3plbihpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0Zyb3plbiA/ICRpc0Zyb3plbihpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgJGtleXMgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCl7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTsiLCIvLyAxOS4xLjMuMTkgT2JqZWN0LnNldFByb3RvdHlwZU9mKE8sIHByb3RvKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge3NldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXR9KTsiLCIiLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGNsYXNzb2YgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbkluc3RhbmNlICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgZm9yT2YgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJylcbiAgLCB0YXNrICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190YXNrJykuc2V0XG4gICwgbWljcm90YXNrICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKVxuICAsIFBST01JU0UgICAgICAgICAgICA9ICdQcm9taXNlJ1xuICAsIFR5cGVFcnJvciAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsICRQcm9taXNlICAgICAgICAgICA9IGdsb2JhbFtQUk9NSVNFXVxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgaXNOb2RlICAgICAgICAgICAgID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2VzcydcbiAgLCBlbXB0eSAgICAgICAgICAgICAgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9XG4gICwgSW50ZXJuYWwsIEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uKCl7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgICAgID0gJFByb21pc2UucmVzb2x2ZSgxKVxuICAgICAgLCBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24oZXhlYyl7IGV4ZWMoZW1wdHksIGVtcHR5KTsgfTtcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKSAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2U7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIHNhbWVDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKGEsIGIpe1xuICAvLyB3aXRoIGxpYnJhcnkgd3JhcHBlciBzcGVjaWFsIGNhc2VcbiAgcmV0dXJuIGEgPT09IGIgfHwgYSA9PT0gJFByb21pc2UgJiYgYiA9PT0gV3JhcHBlcjtcbn07XG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgcmV0dXJuIHNhbWVDb25zdHJ1Y3RvcigkUHJvbWlzZSwgQylcbiAgICA/IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgIDogbmV3IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG52YXIgUHJvbWlzZUNhcGFiaWxpdHkgPSBHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbihDKXtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24oJCRyZXNvbHZlLCAkJHJlamVjdCl7XG4gICAgaWYocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCAgPSAkJHJlamVjdDtcbiAgfSk7XG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xudmFyIHBlcmZvcm0gPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICBleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHtlcnJvcjogZX07XG4gIH1cbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24ocHJvbWlzZSwgaXNSZWplY3Qpe1xuICBpZihwcm9taXNlLl9uKXJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgb2sgICAgPSBwcm9taXNlLl9zID09IDFcbiAgICAgICwgaSAgICAgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbil7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsXG4gICAgICAgICwgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmVcbiAgICAgICAgLCByZWplY3QgID0gcmVhY3Rpb24ucmVqZWN0XG4gICAgICAgICwgZG9tYWluICA9IHJlYWN0aW9uLmRvbWFpblxuICAgICAgICAsIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmKGhhbmRsZXIpe1xuICAgICAgICAgIGlmKCFvayl7XG4gICAgICAgICAgICBpZihwcm9taXNlLl9oID09IDIpb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYoaGFuZGxlciA9PT0gdHJ1ZSlyZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmKGRvbWFpbilkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpO1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSl7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZih0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKXtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXJ1bihjaGFpbltpKytdKTsgLy8gdmFyaWFibGUgbGVuZ3RoIC0gY2FuJ3QgdXNlIGZvckVhY2hcbiAgICBwcm9taXNlLl9jID0gW107XG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xuICAgIGlmKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKW9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92XG4gICAgICAsIGFicnVwdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZihpc1VuaGFuZGxlZChwcm9taXNlKSl7XG4gICAgICBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKGlzTm9kZSl7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZihoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKXtcbiAgICAgICAgICBoYW5kbGVyKHtwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlfSk7XG4gICAgICAgIH0gZWxzZSBpZigoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKXtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYoYWJydXB0KXRocm93IGFicnVwdC5lcnJvcjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24ocHJvbWlzZSl7XG4gIGlmKHByb21pc2UuX2ggPT0gMSlyZXR1cm4gZmFsc2U7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2EgfHwgcHJvbWlzZS5fY1xuICAgICwgaSAgICAgPSAwXG4gICAgLCByZWFjdGlvbjtcbiAgd2hpbGUoY2hhaW4ubGVuZ3RoID4gaSl7XG4gICAgcmVhY3Rpb24gPSBjaGFpbltpKytdO1xuICAgIGlmKHJlYWN0aW9uLmZhaWwgfHwgIWlzVW5oYW5kbGVkKHJlYWN0aW9uLnByb21pc2UpKXJldHVybiBmYWxzZTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG52YXIgb25IYW5kbGVVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24oKXtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZihpc05vZGUpe1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKXtcbiAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogcHJvbWlzZS5fdn0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbih2YWx1ZSl7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgaWYocHJvbWlzZS5fZClyZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYoIXByb21pc2UuX2EpcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzXG4gICAgLCB0aGVuO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICB0cnkge1xuICAgIGlmKHByb21pc2UgPT09IHZhbHVlKXRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSl7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7X3c6IHByb21pc2UsIF9kOiBmYWxzZX07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaChlKXtcbiAgICAkcmVqZWN0LmNhbGwoe193OiBwcm9taXNlLCBfZDogZmFsc2V9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYoIVVTRV9OQVRJVkUpe1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3Ipe1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoKGVycil7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKXtcbiAgICAgIHZhciByZWFjdGlvbiAgICA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgICAgID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XG4gICAgICByZWFjdGlvbi5mYWlsICAgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9hKXRoaXMuX2EucHVzaChyZWFjdGlvbik7XG4gICAgICBpZih0aGlzLl9zKW5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24ob25SZWplY3RlZCl7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbigpe1xuICAgIHZhciBwcm9taXNlICA9IG5ldyBJbnRlcm5hbDtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogJFByb21pc2V9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocil7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKVxuICAgICAgLCAkJHJlamVjdCAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KXtcbiAgICAvLyBpbnN0YW5jZW9mIGluc3RlYWQgb2YgaW50ZXJuYWwgc2xvdCBjaGVjayBiZWNhdXNlIHdlIHNob3VsZCBmaXggaXQgd2l0aG91dCByZXBsYWNlbWVudCBuYXRpdmUgUHJvbWlzZSBjb3JlXG4gICAgaWYoeCBpbnN0YW5jZW9mICRQcm9taXNlICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSlyZXR1cm4geDtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVzb2x2ZSAgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgJCRyZXNvbHZlKHgpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXtcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcbn0pKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpe1xuICAgIHZhciBDICAgICAgICAgID0gdGhpc1xuICAgICAgLCBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgICwgcmVzb2x2ZSAgICA9IGNhcGFiaWxpdHkucmVzb2x2ZVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIHZhciB2YWx1ZXMgICAgPSBbXVxuICAgICAgICAsIGluZGV4ICAgICA9IDBcbiAgICAgICAgLCByZW1haW5pbmcgPSAxO1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgdmFyICRpbmRleCAgICAgICAgPSBpbmRleCsrXG4gICAgICAgICAgLCBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgaWYoYWxyZWFkeUNhbGxlZClyZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCAgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZWplY3QgICAgID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSl7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmKGFicnVwdClyZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGF0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwgaW5kZXggPSB0aGlzLl9pXG4gICAgLCBwb2ludDtcbiAgaWYoaW5kZXggPj0gTy5sZW5ndGgpcmV0dXJuIHt2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHt2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlfTtcbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBNRVRBICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVlcbiAgLCAkZmFpbHMgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBzaGFyZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgdWlkICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIHdrcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKVxuICAsIHdrc0RlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpXG4gICwga2V5T2YgICAgICAgICAgPSByZXF1aXJlKCcuL19rZXlvZicpXG4gICwgZW51bUtleXMgICAgICAgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKVxuICAsIGlzQXJyYXkgICAgICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0lPYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIF9jcmVhdGUgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgZ09QTkV4dCAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKVxuICAsICRHT1BEICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsICREUCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCAka2V5cyAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BEICAgICAgICAgICA9ICRHT1BELmZcbiAgLCBkUCAgICAgICAgICAgICA9ICREUC5mXG4gICwgZ09QTiAgICAgICAgICAgPSBnT1BORXh0LmZcbiAgLCAkU3ltYm9sICAgICAgICA9IGdsb2JhbC5TeW1ib2xcbiAgLCAkSlNPTiAgICAgICAgICA9IGdsb2JhbC5KU09OXG4gICwgX3N0cmluZ2lmeSAgICAgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnlcbiAgLCBQUk9UT1RZUEUgICAgICA9ICdwcm90b3R5cGUnXG4gICwgSElEREVOICAgICAgICAgPSB3a3MoJ19oaWRkZW4nKVxuICAsIFRPX1BSSU1JVElWRSAgID0gd2tzKCd0b1ByaW1pdGl2ZScpXG4gICwgaXNFbnVtICAgICAgICAgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZVxuICAsIFN5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtcmVnaXN0cnknKVxuICAsIEFsbFN5bWJvbHMgICAgID0gc2hhcmVkKCdzeW1ib2xzJylcbiAgLCBPUFN5bWJvbHMgICAgICA9IHNoYXJlZCgnb3Atc3ltYm9scycpXG4gICwgT2JqZWN0UHJvdG8gICAgPSBPYmplY3RbUFJPVE9UWVBFXVxuICAsIFVTRV9OQVRJVkUgICAgID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJ1xuICAsIFFPYmplY3QgICAgICAgID0gZ2xvYmFsLlFPYmplY3Q7XG4vLyBEb24ndCB1c2Ugc2V0dGVycyBpbiBRdCBTY3JpcHQsIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8xNzNcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBfY3JlYXRlKGRQKHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBkUCh0aGlzLCAnYScsIHt2YWx1ZTogN30pLmE7IH1cbiAgfSkpLmEgIT0gNztcbn0pID8gZnVuY3Rpb24oaXQsIGtleSwgRCl7XG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xuICBpZihwcm90b0Rlc2MpZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZihwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKWRQKE9iamVjdFByb3RvLCBrZXksIHByb3RvRGVzYyk7XG59IDogZFA7XG5cbnZhciB3cmFwID0gZnVuY3Rpb24odGFnKXtcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc3ltLl9rID0gdGFnO1xuICByZXR1cm4gc3ltO1xufTtcblxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCBpbnN0YW5jZW9mICRTeW1ib2w7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgRCl7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90bykkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xuICBhbk9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEQpO1xuICBpZihoYXMoQWxsU3ltYm9scywga2V5KSl7XG4gICAgaWYoIUQuZW51bWVyYWJsZSl7XG4gICAgICBpZighaGFzKGl0LCBISURERU4pKWRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0paXRbSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBEID0gX2NyZWF0ZShELCB7ZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSl9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKXtcbiAgYW5PYmplY3QoaXQpO1xuICB2YXIga2V5cyA9IGVudW1LZXlzKFAgPSB0b0lPYmplY3QoUCkpXG4gICAgLCBpICAgID0gMFxuICAgICwgbCA9IGtleXMubGVuZ3RoXG4gICAgLCBrZXk7XG4gIHdoaWxlKGwgPiBpKSRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApe1xuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XG59O1xudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSl7XG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XG4gIGlmKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKXJldHVybiBmYWxzZTtcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpe1xuICBpdCAgPSB0b0lPYmplY3QoaXQpO1xuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xuICBpZihpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSlELmVudW1lcmFibGUgPSB0cnVlO1xuICByZXR1cm4gRDtcbn07XG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KXtcbiAgdmFyIG5hbWVzICA9IGdPUE4odG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSlyZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpe1xuICB2YXIgSVNfT1AgID0gaXQgPT09IE9iamVjdFByb3RvXG4gICAgLCBuYW1lcyAgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSlcbiAgICAsIHJlc3VsdCA9IFtdXG4gICAgLCBpICAgICAgPSAwXG4gICAgLCBrZXk7XG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpe1xuICAgIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSlyZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmKCFVU0VfTkFUSVZFKXtcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpe1xuICAgIGlmKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKXRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIScpO1xuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8pJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSl0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbiAgICB9O1xuICAgIGlmKERFU0NSSVBUT1JTICYmIHNldHRlcilzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHtjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gdGhpcy5faztcbiAgfSk7XG5cbiAgJEdPUEQuZiA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICREUC5mICAgPSAkZGVmaW5lUHJvcGVydHk7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiAgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgaWYoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSl7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uKG5hbWUpe1xuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XG4gIH1cbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1N5bWJvbDogJFN5bWJvbH0pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaSA9IDA7IHN5bWJvbHMubGVuZ3RoID4gaTsgKXdrcyhzeW1ib2xzW2krK10pO1xuXG5mb3IodmFyIHN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzRGVmaW5lKHN5bWJvbHNbaSsrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24oa2V5KXtcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXG4gICAgICA/IFN5bWJvbFJlZ2lzdHJ5W2tleV1cbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcbiAgfSxcbiAgLy8gMTkuNC4yLjUgU3ltYm9sLmtleUZvcihzeW0pXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKGtleSl7XG4gICAgaWYoaXNTeW1ib2woa2V5KSlyZXR1cm4ga2V5T2YoU3ltYm9sUmVnaXN0cnksIGtleSk7XG4gICAgdGhyb3cgVHlwZUVycm9yKGtleSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uKCl7IHNldHRlciA9IHRydWU7IH0sXG4gIHVzZVNpbXBsZTogZnVuY3Rpb24oKXsgc2V0dGVyID0gZmFsc2U7IH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIDE5LjEuMi4zIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXG4gIC8vIDE5LjEuMi44IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTylcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXG59KTtcblxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoe2E6IFN9KSAhPSAne30nIHx8IF9zdHJpbmdpZnkoT2JqZWN0KFMpKSAhPSAne30nO1xufSkpLCAnSlNPTicsIHtcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpe1xuICAgIGlmKGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKXJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxuICAgIHZhciBhcmdzID0gW2l0XVxuICAgICAgLCBpICAgID0gMVxuICAgICAgLCByZXBsYWNlciwgJHJlcGxhY2VyO1xuICAgIHdoaWxlKGFyZ3VtZW50cy5sZW5ndGggPiBpKWFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcmVwbGFjZXIgPSBhcmdzWzFdO1xuICAgIGlmKHR5cGVvZiByZXBsYWNlciA9PSAnZnVuY3Rpb24nKSRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIGlmKCRyZXBsYWNlciB8fCAhaXNBcnJheShyZXBsYWNlcikpcmVwbGFjZXIgPSBmdW5jdGlvbihrZXksIHZhbHVlKXtcbiAgICAgIGlmKCRyZXBsYWNlcil2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xuICAgICAgaWYoIWlzU3ltYm9sKHZhbHVlKSlyZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpOyIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnYXN5bmNJdGVyYXRvcicpOyIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpOyIsInJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIFRPX1NUUklOR19UQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxuZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG4gIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cbiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV1cbiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZihwcm90byAmJiAhcHJvdG9bVE9fU1RSSU5HX1RBR10paGlkZShwcm90bywgVE9fU1RSSU5HX1RBRywgTkFNRSk7XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IEl0ZXJhdG9ycy5BcnJheTtcbn0iLCJ2YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBtc2cpe1xuICBpZih0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJyl0aHJvdyBUeXBlRXJyb3IobXNnKTtcbiAgcmV0dXJuICtpdDtcbn07IiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3Vuc2NvcGFibGVzJylcbiAgLCBBcnJheVByb3RvICA9IEFycmF5LnByb3RvdHlwZTtcbmlmKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZClyZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59OyIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFtdLmNvcHlXaXRoaW4gfHwgZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQvKj0gMCovLCBzdGFydC8qPSAwLCBlbmQgPSBAbGVuZ3RoKi8pe1xuICB2YXIgTyAgICAgPSB0b09iamVjdCh0aGlzKVxuICAgICwgbGVuICAgPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAsIHRvICAgID0gdG9JbmRleCh0YXJnZXQsIGxlbilcbiAgICAsIGZyb20gID0gdG9JbmRleChzdGFydCwgbGVuKVxuICAgICwgZW5kICAgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICAgICwgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0luZGV4KGVuZCwgbGVuKSkgLSBmcm9tLCBsZW4gLSB0bylcbiAgICAsIGluYyAgID0gMTtcbiAgaWYoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KXtcbiAgICBpbmMgID0gLTE7XG4gICAgZnJvbSArPSBjb3VudCAtIDE7XG4gICAgdG8gICArPSBjb3VudCAtIDE7XG4gIH1cbiAgd2hpbGUoY291bnQtLSA+IDApe1xuICAgIGlmKGZyb20gaW4gTylPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGUgT1t0b107XG4gICAgdG8gICArPSBpbmM7XG4gICAgZnJvbSArPSBpbmM7XG4gIH0gcmV0dXJuIE87XG59OyIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxuJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0luZGV4ICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pe1xuICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhpcylcbiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICwgYUxlbiAgID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgaW5kZXggID0gdG9JbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKVxuICAgICwgZW5kICAgID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWRcbiAgICAsIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlKGVuZFBvcyA+IGluZGV4KU9baW5kZXgrK10gPSB2YWx1ZTtcbiAgcmV0dXJuIE87XG59OyIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXIsIElURVJBVE9SKXtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgSU9iamVjdCAgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGFzYyAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oVFlQRSwgJGNyZWF0ZSl7XG4gIHZhciBJU19NQVAgICAgICAgID0gVFlQRSA9PSAxXG4gICAgLCBJU19GSUxURVIgICAgID0gVFlQRSA9PSAyXG4gICAgLCBJU19TT01FICAgICAgID0gVFlQRSA9PSAzXG4gICAgLCBJU19FVkVSWSAgICAgID0gVFlQRSA9PSA0XG4gICAgLCBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2XG4gICAgLCBOT19IT0xFUyAgICAgID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVhcbiAgICAsIGNyZWF0ZSAgICAgICAgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBjYWxsYmFja2ZuLCB0aGF0KXtcbiAgICB2YXIgTyAgICAgID0gdG9PYmplY3QoJHRoaXMpXG4gICAgICAsIHNlbGYgICA9IElPYmplY3QoTylcbiAgICAgICwgZiAgICAgID0gY3R4KGNhbGxiYWNrZm4sIHRoYXQsIDMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSAwXG4gICAgICAsIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWRcbiAgICAgICwgdmFsLCByZXM7XG4gICAgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKXtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmKFRZUEUpe1xuICAgICAgICBpZihJU19NQVApcmVzdWx0W2luZGV4XSA9IHJlczsgICAgICAgICAgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZihyZXMpc3dpdGNoKFRZUEUpe1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYoSVNfRVZFUlkpcmV0dXJuIGZhbHNlOyAgICAgICAgICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTsiLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgdG9PYmplY3QgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICAgPSByZXF1aXJlKCcuL19pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KXtcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xuICB2YXIgTyAgICAgID0gdG9PYmplY3QodGhhdClcbiAgICAsIHNlbGYgICA9IElPYmplY3QoTylcbiAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICwgaW5kZXggID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwXG4gICAgLCBpICAgICAgPSBpc1JpZ2h0ID8gLTEgOiAxO1xuICBpZihhTGVuIDwgMilmb3IoOzspe1xuICAgIGlmKGluZGV4IGluIHNlbGYpe1xuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgaW5kZXggKz0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpbmRleCArPSBpO1xuICAgIGlmKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpe1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XG4gICAgfVxuICB9XG4gIGZvcig7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSlpZihpbmRleCBpbiBzZWxmKXtcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xuICB9XG4gIHJldHVybiBtZW1vO1xufTsiLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGlzQXJyYXkgID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKVxuICAsIFNQRUNJRVMgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCl7XG4gIHZhciBDO1xuICBpZihpc0FycmF5KG9yaWdpbmFsKSl7XG4gICAgQyA9IG9yaWdpbmFsLmNvbnN0cnVjdG9yO1xuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgaWYodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKUMgPSB1bmRlZmluZWQ7XG4gICAgaWYoaXNPYmplY3QoQykpe1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZihDID09PSBudWxsKUMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XG59OyIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWwsIGxlbmd0aCl7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBhRnVuY3Rpb24gID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgaXNPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgYXJyYXlTbGljZSA9IFtdLnNsaWNlXG4gICwgZmFjdG9yaWVzICA9IHt9O1xuXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24oRiwgbGVuLCBhcmdzKXtcbiAgaWYoIShsZW4gaW4gZmFjdG9yaWVzKSl7XG4gICAgZm9yKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspbltpXSA9ICdhWycgKyBpICsgJ10nO1xuICAgIGZhY3Rvcmllc1tsZW5dID0gRnVuY3Rpb24oJ0YsYScsICdyZXR1cm4gbmV3IEYoJyArIG4uam9pbignLCcpICsgJyknKTtcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qLCBhcmdzLi4uICovKXtcbiAgdmFyIGZuICAgICAgID0gYUZ1bmN0aW9uKHRoaXMpXG4gICAgLCBwYXJ0QXJncyA9IGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB2YXIgYm91bmQgPSBmdW5jdGlvbigvKiBhcmdzLi4uICovKXtcbiAgICB2YXIgYXJncyA9IHBhcnRBcmdzLmNvbmNhdChhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcbiAgfTtcbiAgaWYoaXNPYmplY3QoZm4ucHJvdG90eXBlKSlib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XG4gIHJldHVybiBib3VuZDtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGNyZWF0ZSAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBhbkluc3RhbmNlICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCAkaXRlckRlZmluZSA9IHJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJylcbiAgLCBzdGVwICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgc2V0U3BlY2llcyAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpXG4gICwgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgZmFzdEtleSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleVxuICAsIFNJWkUgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbih0aGF0LCBrZXkpe1xuICAvLyBmYXN0IGNhc2VcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpLCBlbnRyeTtcbiAgaWYoaW5kZXggIT09ICdGJylyZXR1cm4gdGhhdC5faVtpbmRleF07XG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxuICBmb3IoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICBpZihlbnRyeS5rID09IGtleSlyZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmKGl0ZXJhYmxlICE9IHVuZGVmaW5lZClmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgfSk7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKXtcbiAgICAgICAgZm9yKHZhciB0aGF0ID0gdGhpcywgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubil7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYoZW50cnkucCllbnRyeS5wID0gZW50cnkucC5uID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xuICAgICAgICB9XG4gICAgICAgIHRoYXQuX2YgPSB0aGF0Ll9sID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGF0W1NJWkVdID0gMDtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuMyBNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICB2YXIgdGhhdCAgPSB0aGlzXG4gICAgICAgICAgLCBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmKGVudHJ5KXtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm5cbiAgICAgICAgICAgICwgcHJldiA9IGVudHJ5LnA7XG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYocHJldilwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmKG5leHQpbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZih0aGF0Ll9mID09IGVudHJ5KXRoYXQuX2YgPSBuZXh0O1xuICAgICAgICAgIGlmKHRoYXQuX2wgPT0gZW50cnkpdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgICAgICBhbkluc3RhbmNlKHRoaXMsIEMsICdmb3JFYWNoJyk7XG4gICAgICAgIHZhciBmID0gY3R4KGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKVxuICAgICAgICAgICwgZW50cnk7XG4gICAgICAgIHdoaWxlKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZil7XG4gICAgICAgICAgZihlbnRyeS52LCBlbnRyeS5rLCB0aGlzKTtcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgICAgICB3aGlsZShlbnRyeSAmJiBlbnRyeS5yKWVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KXtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZihERVNDUklQVE9SUylkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgIHJldHVybiBkZWZpbmVkKHRoaXNbU0laRV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSlcbiAgICAgICwgcHJldiwgaW5kZXg7XG4gICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgaWYoZW50cnkpe1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYoIXRoYXQuX2YpdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYocHJldilwcmV2Lm4gPSBlbnRyeTtcbiAgICAgIHRoYXRbU0laRV0rKztcbiAgICAgIC8vIGFkZCB0byBpbmRleFxuICAgICAgaWYoaW5kZXggIT09ICdGJyl0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbihDLCBOQU1FLCBJU19NQVApe1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gICAgICB0aGlzLl90ID0gaXRlcmF0ZWQ7ICAvLyB0YXJnZXRcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgIC8vIGtpbmRcbiAgICAgIHRoaXMuX2wgPSB1bmRlZmluZWQ7IC8vIHByZXZpb3VzXG4gICAgfSwgZnVuY3Rpb24oKXtcbiAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgLCBraW5kICA9IHRoYXQuX2tcbiAgICAgICAgLCBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpe1xuICAgICAgICAvLyBvciBmaW5pc2ggdGhlIGl0ZXJhdGlvblxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gc3RlcCgxKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmKGtpbmQgPT0gJ2tleXMnICApcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XG4gICAgICBpZihraW5kID09ICd2YWx1ZXMnKXJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJyAsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59OyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgZnJvbSAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSl7XG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKXtcbiAgICBpZihjbGFzc29mKHRoaXMpICE9IE5BTUUpdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcbiAgICByZXR1cm4gZnJvbSh0aGlzKTtcbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZGVmaW5lQWxsICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBnZXRXZWFrICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrXG4gICwgYW5PYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbkluc3RhbmNlICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBmb3JPZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2Zvci1vZicpXG4gICwgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJylcbiAgLCAkaGFzICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgYXJyYXlGaW5kICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KVxuICAsIGFycmF5RmluZEluZGV4ICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNilcbiAgLCBpZCAgICAgICAgICAgICAgICA9IDA7XG5cbi8vIGZhbGxiYWNrIGZvciB1bmNhdWdodCBmcm96ZW4ga2V5c1xudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbih0aGF0KXtcbiAgcmV0dXJuIHRoYXQuX2wgfHwgKHRoYXQuX2wgPSBuZXcgVW5jYXVnaHRGcm96ZW5TdG9yZSk7XG59O1xudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbigpe1xuICB0aGlzLmEgPSBbXTtcbn07XG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24oc3RvcmUsIGtleSl7XG4gIHJldHVybiBhcnJheUZpbmQoc3RvcmUuYSwgZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcbiAgZ2V0OiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmKGVudHJ5KXJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xuICAgIGlmKGVudHJ5KWVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uKGl0KXtcbiAgICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICAgIH0pO1xuICAgIGlmKH5pbmRleCl0aGlzLmEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gISF+aW5kZXg7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24od3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUil7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGl0ZXJhYmxlKXtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpWydkZWxldGUnXShrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpICYmIGRlbGV0ZSBkYXRhW3RoaXMuX2ldO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy40LjMuNCBXZWFrU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICBpZighaXNPYmplY3Qoa2V5KSlyZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgICBpZihkYXRhID09PSB0cnVlKXJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHRoaXMpLmhhcyhrZXkpO1xuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBDO1xuICB9LFxuICBkZWY6IGZ1bmN0aW9uKHRoYXQsIGtleSwgdmFsdWUpe1xuICAgIHZhciBkYXRhID0gZ2V0V2Vhayhhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICBpZihkYXRhID09PSB0cnVlKXVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xuICAgIGVsc2UgZGF0YVt0aGF0Ll9pXSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGF0O1xuICB9LFxuICB1ZnN0b3JlOiB1bmNhdWdodEZyb3plblN0b3JlXG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgJGV4cG9ydCAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIHJlZGVmaW5lQWxsICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBtZXRhICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKVxuICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBhbkluc3RhbmNlICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBpc09iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZmFpbHMgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgJGl0ZXJEZXRlY3QgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgICAgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspe1xuICB2YXIgQmFzZSAgPSBnbG9iYWxbTkFNRV1cbiAgICAsIEMgICAgID0gQmFzZVxuICAgICwgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnXG4gICAgLCBwcm90byA9IEMgJiYgQy5wcm90b3R5cGVcbiAgICAsIE8gICAgID0ge307XG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbihLRVkpe1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uKGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gdW5kZWZpbmVkIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKXsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpe1xuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXG4gICAgQyA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgaW5zdGFuY2UgICAgICAgICAgICAgPSBuZXcgQ1xuICAgICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgICAgLCBIQVNOVF9DSEFJTklORyAgICAgICA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2VcbiAgICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxuICAgICAgLCBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uKCl7IGluc3RhbmNlLmhhcygxKTsgfSlcbiAgICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICAgICwgQUNDRVBUX0lURVJBQkxFUyAgICAgPSAkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXsgbmV3IEMoaXRlcik7IH0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICAgICwgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKVxuICAgICAgICAgICwgaW5kZXggICAgID0gNTtcbiAgICAgICAgd2hpbGUoaW5kZXgtLSkkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XG4gICAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgICB9KTtcbiAgICBpZighQUNDRVBUX0lURVJBQkxFUyl7IFxuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGFyZ2V0LCBpdGVyYWJsZSl7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XG4gICAgICBwcm90by5jb25zdHJ1Y3RvciA9IEM7XG4gICAgfVxuICAgIGlmKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pe1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORylmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYoSVNfV0VBSyAmJiBwcm90by5jbGVhcilkZWxldGUgcHJvdG8uY2xlYXI7XG4gIH1cblxuICBzZXRUb1N0cmluZ1RhZyhDLCBOQU1FKTtcblxuICBPW05BTUVdID0gQztcbiAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQyAhPSBCYXNlKSwgTyk7XG5cbiAgaWYoIUlTX1dFQUspY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBjcmVhdGVEZXNjICAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBpbmRleCwgdmFsdWUpe1xuICBpZihpbmRleCBpbiBvYmplY3QpJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgTlVNQkVSICAgICAgPSAnbnVtYmVyJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihoaW50KXtcbiAgaWYoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0Jyl0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xufTsiLCJ2YXIgZ2xvYmFsICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBoaWRlICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZSAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgY3R4ICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxudmFyICRleHBvcnQgPSBmdW5jdGlvbih0eXBlLCBuYW1lLCBzb3VyY2Upe1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRlxuICAgICwgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuR1xuICAgICwgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuU1xuICAgICwgSVNfUFJPVE8gID0gdHlwZSAmICRleHBvcnQuUFxuICAgICwgSVNfQklORCAgID0gdHlwZSAmICRleHBvcnQuQlxuICAgICwgdGFyZ2V0ICAgID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdXG4gICAgLCBleHBvcnRzICAgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KVxuICAgICwgZXhwUHJvdG8gID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSlcbiAgICAsIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYoSVNfR0xPQkFMKXNvdXJjZSA9IG5hbWU7XG4gIGZvcihrZXkgaW4gc291cmNlKXtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZih0YXJnZXQpcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYoZXhwb3J0c1trZXldICE9IG91dCloaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcbiAgICBpZihJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dClleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YCBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDsiLCJ2YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoKGUpe1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaChmKXsgLyogZW1wdHkgKi8gfVxuICB9IHJldHVybiB0cnVlO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgaGlkZSAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBmYWlscyAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIHdrcyAgICAgID0gcmVxdWlyZSgnLi9fd2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBsZW5ndGgsIGV4ZWMpe1xuICB2YXIgU1lNQk9MICAgPSB3a3MoS0VZKVxuICAgICwgZm5zICAgICAgPSBleGVjKGRlZmluZWQsIFNZTUJPTCwgJydbS0VZXSlcbiAgICAsIHN0cmZuICAgID0gZm5zWzBdXG4gICAgLCByeGZuICAgICA9IGZuc1sxXTtcbiAgaWYoZmFpbHMoZnVuY3Rpb24oKXtcbiAgICB2YXIgTyA9IHt9O1xuICAgIE9bU1lNQk9MXSA9IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pKXtcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uKHN0cmluZywgYXJnKXsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbihzdHJpbmcpeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIHRoYXQgICA9IGFuT2JqZWN0KHRoaXMpXG4gICAgLCByZXN1bHQgPSAnJztcbiAgaWYodGhhdC5nbG9iYWwpICAgICByZXN1bHQgKz0gJ2cnO1xuICBpZih0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmKHRoYXQubXVsdGlsaW5lKSAgcmVzdWx0ICs9ICdtJztcbiAgaWYodGhhdC51bmljb2RlKSAgICByZXN1bHQgKz0gJ3UnO1xuICBpZih0aGF0LnN0aWNreSkgICAgIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59OyIsInZhciBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIHRhcmdldCwgQyl7XG4gIHZhciBQLCBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICBpZihTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKXtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07IiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGZsb29yICAgID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KXtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59OyIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBjb2YgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgTUFUQ0ggICAgPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjb2YoaXQpID09ICdSZWdFeHAnKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTsiLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG5tb2R1bGUuZXhwb3J0cyA9ICghJGV4cG0xXG4gIC8vIE9sZCBGRiBidWdcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxuICAvLyBUb3IgQnJvd3NlciBidWdcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XG4pID8gZnVuY3Rpb24gZXhwbTEoeCl7XG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XG59IDogJGV4cG0xOyIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCl7XG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcbn07IiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KXtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xufTsiLCJ2YXIgTWFwICAgICA9IHJlcXVpcmUoJy4vZXM2Lm1hcCcpXG4gICwgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgc2hhcmVkICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpXG4gICwgc3RvcmUgICA9IHNoYXJlZC5zdG9yZSB8fCAoc2hhcmVkLnN0b3JlID0gbmV3IChyZXF1aXJlKCcuL2VzNi53ZWFrLW1hcCcpKSk7XG5cbnZhciBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSl7XG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xuICBpZighdGFyZ2V0TWV0YWRhdGEpe1xuICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBzdG9yZS5zZXQodGFyZ2V0LCB0YXJnZXRNZXRhZGF0YSA9IG5ldyBNYXApO1xuICB9XG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xuICBpZigha2V5TWV0YWRhdGEpe1xuICAgIGlmKCFjcmVhdGUpcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB0YXJnZXRNZXRhZGF0YS5zZXQodGFyZ2V0S2V5LCBrZXlNZXRhZGF0YSA9IG5ldyBNYXApO1xuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcbn07XG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIG1ldGFkYXRhTWFwID0gZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCBmYWxzZSk7XG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBtZXRhZGF0YU1hcC5nZXQoTWV0YWRhdGFLZXkpO1xufTtcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApe1xuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XG59O1xudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gZnVuY3Rpb24odGFyZ2V0LCB0YXJnZXRLZXkpe1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSlcbiAgICAsIGtleXMgICAgICAgID0gW107XG4gIGlmKG1ldGFkYXRhTWFwKW1ldGFkYXRhTWFwLmZvckVhY2goZnVuY3Rpb24oXywga2V5KXsga2V5cy5wdXNoKGtleSk7IH0pO1xuICByZXR1cm4ga2V5cztcbn07XG52YXIgdG9NZXRhS2V5ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xudmFyIGV4cCA9IGZ1bmN0aW9uKE8pe1xuICAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCBPKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzdG9yZTogc3RvcmUsXG4gIG1hcDogZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCxcbiAgaGFzOiBvcmRpbmFyeUhhc093bk1ldGFkYXRhLFxuICBnZXQ6IG9yZGluYXJ5R2V0T3duTWV0YWRhdGEsXG4gIHNldDogb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSxcbiAga2V5czogb3JkaW5hcnlPd25NZXRhZGF0YUtleXMsXG4gIGtleTogdG9NZXRhS2V5LFxuICBleHA6IGV4cFxufTsiLCIvLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKXx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHZhciBLID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIEssIGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovfSk7XG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcbn0pOyIsInZhciBnZXRLZXlzICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgaXNFbnVtICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlzRW50cmllcyl7XG4gIHJldHVybiBmdW5jdGlvbihpdCl7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdChpdClcbiAgICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBpICAgICAgPSAwXG4gICAgICAsIHJlc3VsdCA9IFtdXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBpKWlmKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpe1xuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9O1xufTsiLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG52YXIgZ09QTiAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpXG4gICwgZ09QUyAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIFJlZmxlY3QgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcbm1vZHVsZS5leHBvcnRzID0gUmVmbGVjdCAmJiBSZWZsZWN0Lm93bktleXMgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCl7XG4gIHZhciBrZXlzICAgICAgID0gZ09QTi5mKGFuT2JqZWN0KGl0KSlcbiAgICAsIGdldFN5bWJvbHMgPSBnT1BTLmY7XG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcbn07IiwidmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VGbG9hdFxuICAsICR0cmltICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xuXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cil7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMylcbiAgICAsIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgc3RyaW5nLmNoYXJBdCgwKSA9PSAnLScgPyAtMCA6IHJlc3VsdDtcbn0gOiAkcGFyc2VGbG9hdDsiLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnRcbiAgLCAkdHJpbSAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW1cbiAgLCB3cyAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKVxuICAsIGhleCAgICAgICA9IC9eW1xcLStdPzBbeFhdLztcblxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpe1xuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xuICByZXR1cm4gJHBhcnNlSW50KHN0cmluZywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3Qoc3RyaW5nKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHBhdGggICAgICA9IHJlcXVpcmUoJy4vX3BhdGgnKVxuICAsIGludm9rZSAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigvKiAuLi5wYXJncyAqLyl7XG4gIHZhciBmbiAgICAgPSBhRnVuY3Rpb24odGhpcylcbiAgICAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIHBhcmdzICA9IEFycmF5KGxlbmd0aClcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIF8gICAgICA9IHBhdGguX1xuICAgICwgaG9sZGVyID0gZmFsc2U7XG4gIHdoaWxlKGxlbmd0aCA+IGkpaWYoKHBhcmdzW2ldID0gYXJndW1lbnRzW2krK10pID09PSBfKWhvbGRlciA9IHRydWU7XG4gIHJldHVybiBmdW5jdGlvbigvKiAuLi5hcmdzICovKXtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgaiA9IDAsIGsgPSAwLCBhcmdzO1xuICAgIGlmKCFob2xkZXIgJiYgIWFMZW4pcmV0dXJuIGludm9rZShmbiwgcGFyZ3MsIHRoYXQpO1xuICAgIGFyZ3MgPSBwYXJncy5zbGljZSgpO1xuICAgIGlmKGhvbGRlcilmb3IoO2xlbmd0aCA+IGo7IGorKylpZihhcmdzW2pdID09PSBfKWFyZ3Nbal0gPSBhcmd1bWVudHNbaysrXTtcbiAgICB3aGlsZShhTGVuID4gaylhcmdzLnB1c2goYXJndW1lbnRzW2srK10pO1xuICAgIHJldHVybiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpOyIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjLCBzYWZlKXtcbiAgZm9yKHZhciBrZXkgaW4gc3JjKXJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XG4gIHJldHVybiB0YXJnZXQ7XG59OyIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGhhcyAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgU1JDICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJykoJ3NyYycpXG4gICwgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJ1xuICAsICR0b1N0cmluZyA9IEZ1bmN0aW9uW1RPX1NUUklOR11cbiAgLCBUUEwgICAgICAgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywga2V5LCB2YWwsIHNhZmUpe1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmKE9ba2V5XSA9PT0gdmFsKXJldHVybjtcbiAgaWYoaXNGdW5jdGlvbiloYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYoTyA9PT0gZ2xvYmFsKXtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaWYoIXNhZmUpe1xuICAgICAgZGVsZXRlIE9ba2V5XTtcbiAgICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZihPW2tleV0pT1trZXldID0gdmFsO1xuICAgICAgZWxzZSBoaWRlKE8sIGtleSwgdmFsKTtcbiAgICB9XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocmVnRXhwLCByZXBsYWNlKXtcbiAgdmFyIHJlcGxhY2VyID0gcmVwbGFjZSA9PT0gT2JqZWN0KHJlcGxhY2UpID8gZnVuY3Rpb24ocGFydCl7XG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XG4gIH0gOiByZXBsYWNlO1xuICByZXR1cm4gZnVuY3Rpb24oaXQpe1xuICAgIHJldHVybiBTdHJpbmcoaXQpLnJlcGxhY2UocmVnRXhwLCByZXBsYWNlcik7XG4gIH07XG59OyIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSl7XG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBTUEVDSUVTICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZKXtcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcbiAgaWYoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSlkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07IiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtZXRob2QsIGFyZyl7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uKCl7fSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59OyIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKVxuICAsIGRlZmluZWQgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSl7XG4gIGlmKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59OyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCBxdW90ICAgID0gL1wiL2c7XG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24oc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSlcbiAgICAsIHAxID0gJzwnICsgdGFnO1xuICBpZihhdHRyaWJ1dGUgIT09ICcnKXAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XG4gIHJldHVybiBwMSArICc+JyArIFMgKyAnPC8nICsgdGFnICsgJz4nO1xufTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTkFNRSwgZXhlYyl7XG4gIHZhciBPID0ge307XG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcbiAgICByZXR1cm4gdGVzdCAhPT0gdGVzdC50b0xvd2VyQ2FzZSgpIHx8IHRlc3Quc3BsaXQoJ1wiJykubGVuZ3RoID4gMztcbiAgfSksICdTdHJpbmcnLCBPKTtcbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgcmVwZWF0ICAgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0JylcbiAgLCBkZWZpbmVkICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpe1xuICB2YXIgUyAgICAgICAgICAgID0gU3RyaW5nKGRlZmluZWQodGhhdCkpXG4gICAgLCBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aFxuICAgICwgZmlsbFN0ciAgICAgID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpXG4gICAgLCBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xuICBpZihpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpcmV0dXJuIFM7XG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoXG4gICAgLCBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XG4gIGlmKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKXN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgZGVmaW5lZCAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCl7XG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSlcbiAgICAsIHJlcyA9ICcnXG4gICAgLCBuICAgPSB0b0ludGVnZXIoY291bnQpO1xuICBpZihuIDwgMCB8fCBuID09IEluZmluaXR5KXRocm93IFJhbmdlRXJyb3IoXCJDb3VudCBjYW4ndCBiZSBuZWdhdGl2ZVwiKTtcbiAgZm9yKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpaWYobiAmIDEpcmVzICs9IHN0cjtcbiAgcmV0dXJuIHJlcztcbn07IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIHNwYWNlcyAgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKVxuICAsIHNwYWNlICAgPSAnWycgKyBzcGFjZXMgKyAnXSdcbiAgLCBub24gICAgID0gJ1xcdTIwMGJcXHUwMDg1J1xuICAsIGx0cmltICAgPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJylcbiAgLCBydHJpbSAgID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24oS0VZLCBleGVjLCBBTElBUyl7XG4gIHZhciBleHAgICA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbigpe1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZihBTElBUylleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24oc3RyaW5nLCBUWVBFKXtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmKFRZUEUgJiAxKXN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmKFRZUEUgJiAyKXN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyOyIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJzsiLCIndXNlIHN0cmljdCc7XG5pZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpKXtcbiAgdmFyIExJQlJBUlkgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgICAsIGdsb2JhbCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAgICwgZmFpbHMgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgICAsICRleHBvcnQgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAgICwgJHR5cGVkICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJylcbiAgICAsICRidWZmZXIgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKVxuICAgICwgY3R4ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICAgLCBhbkluc3RhbmNlICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAgICwgcHJvcGVydHlEZXNjICAgICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAgICwgaGlkZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAgICwgcmVkZWZpbmVBbGwgICAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICAgLCB0b0ludGVnZXIgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICAgLCB0b0xlbmd0aCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgICAsIHRvSW5kZXggICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICAgLCB0b1ByaW1pdGl2ZSAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgICAsIGhhcyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAgICwgc2FtZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKVxuICAgICwgY2xhc3NvZiAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAgICwgaXNPYmplY3QgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICAgLCB0b09iamVjdCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgICAsIGlzQXJyYXlJdGVyICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgICAsIGNyZWF0ZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgICAsIGdldFByb3RvdHlwZU9mICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgICAsIGdPUE4gICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgICAsIGdldEl0ZXJGbiAgICAgICAgICAgPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpXG4gICAgLCB1aWQgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgICAsIHdrcyAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAgICwgY3JlYXRlQXJyYXlNZXRob2QgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKVxuICAgICwgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJylcbiAgICAsIHNwZWNpZXNDb25zdHJ1Y3RvciAgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJylcbiAgICAsIEFycmF5SXRlcmF0b3JzICAgICAgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpXG4gICAgLCBJdGVyYXRvcnMgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgICAsICRpdGVyRGV0ZWN0ICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpXG4gICAgLCBzZXRTcGVjaWVzICAgICAgICAgID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKVxuICAgICwgYXJyYXlGaWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKVxuICAgICwgYXJyYXlDb3B5V2l0aGluICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJylcbiAgICAsICREUCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAgICwgJEdPUEQgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgICAsIGRQICAgICAgICAgICAgICAgICAgPSAkRFAuZlxuICAgICwgZ09QRCAgICAgICAgICAgICAgICA9ICRHT1BELmZcbiAgICAsIFJhbmdlRXJyb3IgICAgICAgICAgPSBnbG9iYWwuUmFuZ2VFcnJvclxuICAgICwgVHlwZUVycm9yICAgICAgICAgICA9IGdsb2JhbC5UeXBlRXJyb3JcbiAgICAsIFVpbnQ4QXJyYXkgICAgICAgICAgPSBnbG9iYWwuVWludDhBcnJheVxuICAgICwgQVJSQVlfQlVGRkVSICAgICAgICA9ICdBcnJheUJ1ZmZlcidcbiAgICAsIFNIQVJFRF9CVUZGRVIgICAgICAgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUlxuICAgICwgQllURVNfUEVSX0VMRU1FTlQgICA9ICdCWVRFU19QRVJfRUxFTUVOVCdcbiAgICAsIFBST1RPVFlQRSAgICAgICAgICAgPSAncHJvdG90eXBlJ1xuICAgICwgQXJyYXlQcm90byAgICAgICAgICA9IEFycmF5W1BST1RPVFlQRV1cbiAgICAsICRBcnJheUJ1ZmZlciAgICAgICAgPSAkYnVmZmVyLkFycmF5QnVmZmVyXG4gICAgLCAkRGF0YVZpZXcgICAgICAgICAgID0gJGJ1ZmZlci5EYXRhVmlld1xuICAgICwgYXJyYXlGb3JFYWNoICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDApXG4gICAgLCBhcnJheUZpbHRlciAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMilcbiAgICAsIGFycmF5U29tZSAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgzKVxuICAgICwgYXJyYXlFdmVyeSAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpXG4gICAgLCBhcnJheUZpbmQgICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNSlcbiAgICAsIGFycmF5RmluZEluZGV4ICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAgICwgYXJyYXlJbmNsdWRlcyAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSlcbiAgICAsIGFycmF5SW5kZXhPZiAgICAgICAgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKVxuICAgICwgYXJyYXlWYWx1ZXMgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLnZhbHVlc1xuICAgICwgYXJyYXlLZXlzICAgICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmtleXNcbiAgICAsIGFycmF5RW50cmllcyAgICAgICAgPSBBcnJheUl0ZXJhdG9ycy5lbnRyaWVzXG4gICAgLCBhcnJheUxhc3RJbmRleE9mICAgID0gQXJyYXlQcm90by5sYXN0SW5kZXhPZlxuICAgICwgYXJyYXlSZWR1Y2UgICAgICAgICA9IEFycmF5UHJvdG8ucmVkdWNlXG4gICAgLCBhcnJheVJlZHVjZVJpZ2h0ICAgID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodFxuICAgICwgYXJyYXlKb2luICAgICAgICAgICA9IEFycmF5UHJvdG8uam9pblxuICAgICwgYXJyYXlTb3J0ICAgICAgICAgICA9IEFycmF5UHJvdG8uc29ydFxuICAgICwgYXJyYXlTbGljZSAgICAgICAgICA9IEFycmF5UHJvdG8uc2xpY2VcbiAgICAsIGFycmF5VG9TdHJpbmcgICAgICAgPSBBcnJheVByb3RvLnRvU3RyaW5nXG4gICAgLCBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZ1xuICAgICwgSVRFUkFUT1IgICAgICAgICAgICA9IHdrcygnaXRlcmF0b3InKVxuICAgICwgVEFHICAgICAgICAgICAgICAgICA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAgICwgVFlQRURfQ09OU1RSVUNUT1IgICA9IHVpZCgndHlwZWRfY29uc3RydWN0b3InKVxuICAgICwgREVGX0NPTlNUUlVDVE9SICAgICA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJylcbiAgICAsIEFMTF9DT05TVFJVQ1RPUlMgICAgPSAkdHlwZWQuQ09OU1RSXG4gICAgLCBUWVBFRF9BUlJBWSAgICAgICAgID0gJHR5cGVkLlRZUEVEXG4gICAgLCBWSUVXICAgICAgICAgICAgICAgID0gJHR5cGVkLlZJRVdcbiAgICAsIFdST05HX0xFTkdUSCAgICAgICAgPSAnV3JvbmcgbGVuZ3RoISc7XG5cbiAgdmFyICRtYXAgPSBjcmVhdGVBcnJheU1ldGhvZCgxLCBmdW5jdGlvbihPLCBsZW5ndGgpe1xuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcbiAgfSk7XG5cbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbigpe1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xuICB9KTtcblxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xuICB9KTtcblxuICB2YXIgc3RyaWN0VG9MZW5ndGggPSBmdW5jdGlvbihpdCwgU0FNRSl7XG4gICAgaWYoaXQgPT09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB2YXIgbnVtYmVyID0gK2l0XG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKGl0KTtcbiAgICBpZihTQU1FICYmICFzYW1lKG51bWJlciwgbGVuZ3RoKSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgcmV0dXJuIGxlbmd0aDtcbiAgfTtcblxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbihpdCwgQllURVMpe1xuICAgIHZhciBvZmZzZXQgPSB0b0ludGVnZXIoaXQpO1xuICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xuICAgIHJldHVybiBvZmZzZXQ7XG4gIH07XG5cbiAgdmFyIHZhbGlkYXRlID0gZnVuY3Rpb24oaXQpe1xuICAgIGlmKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdClyZXR1cm4gaXQ7XG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcbiAgfTtcblxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbihDLCBsZW5ndGgpe1xuICAgIGlmKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpe1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcbiAgICB9IHJldHVybiBuZXcgQyhsZW5ndGgpO1xuICB9O1xuXG4gIHZhciBzcGVjaWVzRnJvbUxpc3QgPSBmdW5jdGlvbihPLCBsaXN0KXtcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xuICB9O1xuXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uKEMsIGxpc3Qpe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGxlbmd0aCA9IGxpc3QubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oaXQsIGtleSwgaW50ZXJuYWwpe1xuICAgIGRQKGl0LCBrZXksIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfX0pO1xuICB9O1xuXG4gIHZhciAkZnJvbSA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qLCBtYXBmbiwgdGhpc0FyZyAqLyl7XG4gICAgdmFyIE8gICAgICAgPSB0b09iamVjdChzb3VyY2UpXG4gICAgICAsIGFMZW4gICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZFxuICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pXG4gICAgICAsIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpe1xuICAgICAgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspe1xuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcbiAgICAgIH0gTyA9IHZhbHVlcztcbiAgICB9XG4gICAgaWYobWFwcGluZyAmJiBhTGVuID4gMiltYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcbiAgICBmb3IoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKXtcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qLi4uaXRlbXMqLyl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpO1xuICAgIHdoaWxlKGxlbmd0aCA+IGluZGV4KXJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBpT1MgU2FmYXJpIDYueCBmYWlscyBoZXJlXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xuXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpe1xuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgdmFyIHByb3RvID0ge1xuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiwgZW5kICovKXtcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0LCBlbmQgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlGaWxsLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xuICAgIH0sXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RmluZCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKXtcbiAgICAgIHJldHVybiBhcnJheUluZGV4T2YodmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pe1xuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgICB9LFxuICAgIG1hcDogZnVuY3Rpb24gbWFwKG1hcGZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyosIGluaXRpYWxWYWx1ZSAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpe1xuICAgICAgdmFyIHRoYXQgICA9IHRoaXNcbiAgICAgICAgLCBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGhcbiAgICAgICAgLCBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpXG4gICAgICAgICwgaW5kZXggID0gMFxuICAgICAgICAsIHZhbHVlO1xuICAgICAgd2hpbGUoaW5kZXggPCBtaWRkbGUpe1xuICAgICAgICB2YWx1ZSAgICAgICAgID0gdGhhdFtpbmRleF07XG4gICAgICAgIHRoYXRbaW5kZXgrK10gPSB0aGF0Wy0tbGVuZ3RoXTtcbiAgICAgICAgdGhhdFtsZW5ndGhdICA9IHZhbHVlO1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9LFxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7XG4gICAgICByZXR1cm4gYXJyYXlTb3J0LmNhbGwodmFsaWRhdGUodGhpcyksIGNvbXBhcmVmbik7XG4gICAgfSxcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCl7XG4gICAgICB2YXIgTyAgICAgID0gdmFsaWRhdGUodGhpcylcbiAgICAgICAgLCBsZW5ndGggPSBPLmxlbmd0aFxuICAgICAgICAsICRiZWdpbiA9IHRvSW5kZXgoYmVnaW4sIGxlbmd0aCk7XG4gICAgICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSkoXG4gICAgICAgIE8uYnVmZmVyLFxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxuICAgICAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0luZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXG4gICAgICApO1xuICAgIH1cbiAgfTtcblxuICB2YXIgJHNsaWNlID0gZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCl7XG4gICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcyksIHN0YXJ0LCBlbmQpKTtcbiAgfTtcblxuICB2YXIgJHNldCA9IGZ1bmN0aW9uIHNldChhcnJheUxpa2UgLyosIG9mZnNldCAqLyl7XG4gICAgdmFsaWRhdGUodGhpcyk7XG4gICAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50c1sxXSwgMSlcbiAgICAgICwgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICAgICwgc3JjICAgID0gdG9PYmplY3QoYXJyYXlMaWtlKVxuICAgICAgLCBsZW4gICAgPSB0b0xlbmd0aChzcmMubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSAwO1xuICAgIGlmKGxlbiArIG9mZnNldCA+IGxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgd2hpbGUoaW5kZXggPCBsZW4pdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XG4gIH07XG5cbiAgdmFyICRpdGVyYXRvcnMgPSB7XG4gICAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpe1xuICAgICAgcmV0dXJuIGFycmF5RW50cmllcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKXtcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfSxcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpe1xuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24odGFyZ2V0LCBrZXkpe1xuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXG4gICAgICAmJiB0eXBlb2Yga2V5ICE9ICdzeW1ib2wnXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XG4gIH07XG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSl7XG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcbiAgICAgIDogZ09QRCh0YXJnZXQsIGtleSk7XG4gIH07XG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKXtcbiAgICBpZihpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcbiAgICAgICYmIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXG4gICAgICAvLyBUT0RPOiBhZGQgdmFsaWRhdGlvbiBkZXNjcmlwdG9yIHcvbyBjYWxsaW5nIGFjY2Vzc29yc1xuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxuICAgICAgJiYgKCFoYXMoZGVzYywgJ2VudW1lcmFibGUnKSB8fCBkZXNjLmVudW1lcmFibGUpXG4gICAgKXtcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSBlbHNlIHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XG4gIH07XG5cbiAgaWYoIUFMTF9DT05TVFJVQ1RPUlMpe1xuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcbiAgICAkRFAuZiAgID0gJHNldERlc2M7XG4gIH1cblxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXG4gICAgZGVmaW5lUHJvcGVydHk6ICAgICAgICAgICAkc2V0RGVzY1xuICB9KTtcblxuICBpZihmYWlscyhmdW5jdGlvbigpeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSl7XG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xuICBoaWRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgSVRFUkFUT1IsICRpdGVyYXRvcnMudmFsdWVzKTtcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XG4gICAgc2xpY2U6ICAgICAgICAgICRzbGljZSxcbiAgICBzZXQ6ICAgICAgICAgICAgJHNldCxcbiAgICBjb25zdHJ1Y3RvcjogICAgZnVuY3Rpb24oKXsgLyogbm9vcCAqLyB9LFxuICAgIHRvU3RyaW5nOiAgICAgICBhcnJheVRvU3RyaW5nLFxuICAgIHRvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmdcbiAgfSk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZU9mZnNldCcsICdvJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XG4gIGRQKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgVEFHLCB7XG4gICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cbiAgfSk7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKXtcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xuICAgIHZhciBOQU1FICAgICAgID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknXG4gICAgICAsIElTTlRfVUlOVDggPSBOQU1FICE9ICdVaW50OEFycmF5J1xuICAgICAgLCBHRVRURVIgICAgID0gJ2dldCcgKyBLRVlcbiAgICAgICwgU0VUVEVSICAgICA9ICdzZXQnICsgS0VZXG4gICAgICAsIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV1cbiAgICAgICwgQmFzZSAgICAgICA9IFR5cGVkQXJyYXkgfHwge31cbiAgICAgICwgVEFDICAgICAgICA9IFR5cGVkQXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheSlcbiAgICAgICwgRk9SQ0VEICAgICA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWXG4gICAgICAsIE8gICAgICAgICAgPSB7fVxuICAgICAgLCBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4KXtcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbih0aGF0LCBpbmRleCwgdmFsdWUpe1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgaWYoQ0xBTVBFRCl2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcbiAgICAgIGRhdGEudltTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIHZhbHVlLCBMSVRUTEVfRU5ESUFOKTtcbiAgICB9O1xuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpe1xuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbigpe1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKXtcbiAgICAgIFR5cGVkQXJyYXkgPSB3cmFwcGVyKGZ1bmN0aW9uKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpe1xuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xuICAgICAgICB2YXIgaW5kZXggID0gMFxuICAgICAgICAgICwgb2Zmc2V0ID0gMFxuICAgICAgICAgICwgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xuICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpe1xuICAgICAgICAgIGxlbmd0aCAgICAgPSBzdHJpY3RUb0xlbmd0aChkYXRhLCB0cnVlKVxuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgICAgID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpe1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgb2Zmc2V0ID0gdG9PZmZzZXQoJG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmKCRsZW5ndGggPT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICBpZigkbGVuICUgQllURVMpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9ICRsZW4gLSBvZmZzZXQ7XG4gICAgICAgICAgICBpZihieXRlTGVuZ3RoIDwgMCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xuICAgICAgICAgICAgaWYoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XG4gICAgICAgIH0gZWxzZSBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXtcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaGlkZSh0aGF0LCAnX2QnLCB7XG4gICAgICAgICAgYjogYnVmZmVyLFxuICAgICAgICAgIG86IG9mZnNldCxcbiAgICAgICAgICBsOiBieXRlTGVuZ3RoLFxuICAgICAgICAgIGU6IGxlbmd0aCxcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcbiAgICAgICAgfSk7XG4gICAgICAgIHdoaWxlKGluZGV4IDwgbGVuZ3RoKWFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XG4gICAgfSBlbHNlIGlmKCEkaXRlckRldGVjdChmdW5jdGlvbihpdGVyKXtcbiAgICAgIC8vIFY4IHdvcmtzIHdpdGggaXRlcmF0b3JzLCBidXQgZmFpbHMgaW4gbWFueSBvdGhlciBjYXNlc1xuICAgICAgLy8gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQ1NTJcbiAgICAgIG5ldyBUeXBlZEFycmF5KG51bGwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgfSwgdHJ1ZSkpe1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XG4gICAgICAgIHZhciBrbGFzcztcbiAgICAgICAgLy8gYHdzYCBtb2R1bGUgYnVnLCB0ZW1wb3JhcmlseSByZW1vdmUgdmFsaWRhdGlvbiBsZW5ndGggZm9yIFVpbnQ4QXJyYXlcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcbiAgICAgICAgaWYoIWlzT2JqZWN0KGRhdGEpKXJldHVybiBuZXcgQmFzZShzdHJpY3RUb0xlbmd0aChkYXRhLCBJU05UX1VJTlQ4KSk7XG4gICAgICAgIGlmKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpe1xuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiAkb2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYoVFlQRURfQVJSQVkgaW4gZGF0YSlyZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xuICAgICAgfSk7XG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24oa2V5KXtcbiAgICAgICAgaWYoIShrZXkgaW4gVHlwZWRBcnJheSkpaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XG4gICAgICBpZighTElCUkFSWSlUeXBlZEFycmF5UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVHlwZWRBcnJheTtcbiAgICB9XG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciAgID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICAgICwgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvciAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKVxuICAgICAgLCAkaXRlcmF0b3IgICAgICAgICA9ICRpdGVyYXRvcnMudmFsdWVzO1xuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xuXG4gICAgaWYoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKXtcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBOQU1FOyB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMsIE5BTUUsIHtcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFUyxcbiAgICAgIGZyb206ICRmcm9tLFxuICAgICAgb2Y6ICRvZlxuICAgIH0pO1xuXG4gICAgaWYoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCwgTkFNRSwgcHJvdG8pO1xuXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwge3NldDogJHNldH0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSwgTkFNRSwge3RvU3RyaW5nOiBhcnJheVRvU3RyaW5nfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xuICAgIH0pLCBOQU1FLCB7c2xpY2U6ICRzbGljZX0pO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKClcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcuY2FsbChbMSwgMl0pO1xuICAgIH0pKSwgTkFNRSwge3RvTG9jYWxlU3RyaW5nOiAkdG9Mb2NhbGVTdHJpbmd9KTtcblxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xuICAgIGlmKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSloaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIElURVJBVE9SLCAkaXRlcmF0b3IpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIERFU0NSSVBUT1JTICAgID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIExJQlJBUlkgICAgICAgID0gcmVxdWlyZSgnLi9fbGlicmFyeScpXG4gICwgJHR5cGVkICAgICAgICAgPSByZXF1aXJlKCcuL190eXBlZCcpXG4gICwgaGlkZSAgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCByZWRlZmluZUFsbCAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgZmFpbHMgICAgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgYW5JbnN0YW5jZSAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgdG9JbnRlZ2VyICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgZ09QTiAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCBkUCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBhcnJheUZpbGwgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKVxuICAsIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKVxuICAsIEFSUkFZX0JVRkZFUiAgID0gJ0FycmF5QnVmZmVyJ1xuICAsIERBVEFfVklFVyAgICAgID0gJ0RhdGFWaWV3J1xuICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZSdcbiAgLCBXUk9OR19MRU5HVEggICA9ICdXcm9uZyBsZW5ndGghJ1xuICAsIFdST05HX0lOREVYICAgID0gJ1dyb25nIGluZGV4ISdcbiAgLCAkQXJyYXlCdWZmZXIgICA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdXG4gICwgJERhdGFWaWV3ICAgICAgPSBnbG9iYWxbREFUQV9WSUVXXVxuICAsIE1hdGggICAgICAgICAgID0gZ2xvYmFsLk1hdGhcbiAgLCBSYW5nZUVycm9yICAgICA9IGdsb2JhbC5SYW5nZUVycm9yXG4gICwgSW5maW5pdHkgICAgICAgPSBnbG9iYWwuSW5maW5pdHlcbiAgLCBCYXNlQnVmZmVyICAgICA9ICRBcnJheUJ1ZmZlclxuICAsIGFicyAgICAgICAgICAgID0gTWF0aC5hYnNcbiAgLCBwb3cgICAgICAgICAgICA9IE1hdGgucG93XG4gICwgZmxvb3IgICAgICAgICAgPSBNYXRoLmZsb29yXG4gICwgbG9nICAgICAgICAgICAgPSBNYXRoLmxvZ1xuICAsIExOMiAgICAgICAgICAgID0gTWF0aC5MTjJcbiAgLCBCVUZGRVIgICAgICAgICA9ICdidWZmZXInXG4gICwgQllURV9MRU5HVEggICAgPSAnYnl0ZUxlbmd0aCdcbiAgLCBCWVRFX09GRlNFVCAgICA9ICdieXRlT2Zmc2V0J1xuICAsICRCVUZGRVIgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSXG4gICwgJExFTkdUSCAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfbCcgOiBCWVRFX0xFTkdUSFxuICAsICRPRkZTRVQgICAgICAgID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XG5cbi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG52YXIgcGFja0lFRUU3NTQgPSBmdW5jdGlvbih2YWx1ZSwgbUxlbiwgbkJ5dGVzKXtcbiAgdmFyIGJ1ZmZlciA9IEFycmF5KG5CeXRlcylcbiAgICAsIGVMZW4gICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICAgICwgZU1heCAgID0gKDEgPDwgZUxlbikgLSAxXG4gICAgLCBlQmlhcyAgPSBlTWF4ID4+IDFcbiAgICAsIHJ0ICAgICA9IG1MZW4gPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDBcbiAgICAsIGkgICAgICA9IDBcbiAgICAsIHMgICAgICA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDBcbiAgICAsIGUsIG0sIGM7XG4gIHZhbHVlID0gYWJzKHZhbHVlKVxuICBpZih2YWx1ZSAhPSB2YWx1ZSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpe1xuICAgIG0gPSB2YWx1ZSAhPSB2YWx1ZSA/IDEgOiAwO1xuICAgIGUgPSBlTWF4O1xuICB9IGVsc2Uge1xuICAgIGUgPSBmbG9vcihsb2codmFsdWUpIC8gTE4yKTtcbiAgICBpZih2YWx1ZSAqIChjID0gcG93KDIsIC1lKSkgPCAxKXtcbiAgICAgIGUtLTtcbiAgICAgIGMgKj0gMjtcbiAgICB9XG4gICAgaWYoZSArIGVCaWFzID49IDEpe1xuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xuICAgIH1cbiAgICBpZih2YWx1ZSAqIGMgPj0gMil7XG4gICAgICBlKys7XG4gICAgICBjIC89IDI7XG4gICAgfVxuICAgIGlmKGUgKyBlQmlhcyA+PSBlTWF4KXtcbiAgICAgIG0gPSAwO1xuICAgICAgZSA9IGVNYXg7XG4gICAgfSBlbHNlIGlmKGUgKyBlQmlhcyA+PSAxKXtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XG4gICAgICBlID0gZSArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSAwO1xuICAgIH1cbiAgfVxuICBmb3IoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XG4gIGUgPSBlIDw8IG1MZW4gfCBtO1xuICBlTGVuICs9IG1MZW47XG4gIGZvcig7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xuICByZXR1cm4gYnVmZmVyO1xufTtcbnZhciB1bnBhY2tJRUVFNzU0ID0gZnVuY3Rpb24oYnVmZmVyLCBtTGVuLCBuQnl0ZXMpe1xuICB2YXIgZUxlbiAgPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgICAsIGVNYXggID0gKDEgPDwgZUxlbikgLSAxXG4gICAgLCBlQmlhcyA9IGVNYXggPj4gMVxuICAgICwgbkJpdHMgPSBlTGVuIC0gN1xuICAgICwgaSAgICAgPSBuQnl0ZXMgLSAxXG4gICAgLCBzICAgICA9IGJ1ZmZlcltpLS1dXG4gICAgLCBlICAgICA9IHMgJiAxMjdcbiAgICAsIG07XG4gIHMgPj49IDc7XG4gIGZvcig7IG5CaXRzID4gMDsgZSA9IGUgKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XG4gIGUgPj49IC1uQml0cztcbiAgbkJpdHMgKz0gbUxlbjtcbiAgZm9yKDsgbkJpdHMgPiAwOyBtID0gbSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgaWYoZSA9PT0gMCl7XG4gICAgZSA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmKGUgPT09IGVNYXgpe1xuICAgIHJldHVybiBtID8gTmFOIDogcyA/IC1JbmZpbml0eSA6IEluZmluaXR5O1xuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xuICAgIGUgPSBlIC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xufTtcblxudmFyIHVucGFja0kzMiA9IGZ1bmN0aW9uKGJ5dGVzKXtcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG59O1xudmFyIHBhY2tJOCA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrSTE2ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrSTMyID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcbn07XG52YXIgcGFja0Y2NCA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XG59O1xudmFyIHBhY2tGMzIgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xufTtcblxudmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uKEMsIGtleSwgaW50ZXJuYWwpe1xuICBkUChDW1BST1RPVFlQRV0sIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXNbaW50ZXJuYWxdOyB9fSk7XG59O1xuXG52YXIgZ2V0ID0gZnVuY3Rpb24odmlldywgYnl0ZXMsIGluZGV4LCBpc0xpdHRsZUVuZGlhbil7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleFxuICAgICwgaW50SW5kZXggPSB0b0ludGVnZXIobnVtSW5kZXgpO1xuICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2JcbiAgICAsIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdXG4gICAgLCBwYWNrICA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xufTtcbnZhciBzZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbil7XG4gIHZhciBudW1JbmRleCA9ICtpbmRleFxuICAgICwgaW50SW5kZXggPSB0b0ludGVnZXIobnVtSW5kZXgpO1xuICBpZihudW1JbmRleCAhPSBpbnRJbmRleCB8fCBpbnRJbmRleCA8IDAgfHwgaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2JcbiAgICAsIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdXG4gICAgLCBwYWNrICA9IGNvbnZlcnNpb24oK3ZhbHVlKTtcbiAgZm9yKHZhciBpID0gMDsgaSA8IGJ5dGVzOyBpKyspc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XG59O1xuXG52YXIgdmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyA9IGZ1bmN0aW9uKHRoYXQsIGxlbmd0aCl7XG4gIGFuSW5zdGFuY2UodGhhdCwgJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuICB2YXIgbnVtYmVyTGVuZ3RoID0gK2xlbmd0aFxuICAgICwgYnl0ZUxlbmd0aCAgID0gdG9MZW5ndGgobnVtYmVyTGVuZ3RoKTtcbiAgaWYobnVtYmVyTGVuZ3RoICE9IGJ5dGVMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICByZXR1cm4gYnl0ZUxlbmd0aDtcbn07XG5cbmlmKCEkdHlwZWQuQUJWKXtcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXtcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHZhbGlkYXRlQXJyYXlCdWZmZXJBcmd1bWVudHModGhpcywgbGVuZ3RoKTtcbiAgICB0aGlzLl9iICAgICAgID0gYXJyYXlGaWxsLmNhbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gICREYXRhVmlldyA9IGZ1bmN0aW9uIERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCl7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkRGF0YVZpZXcsIERBVEFfVklFVyk7XG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdXG4gICAgICAsIG9mZnNldCAgICAgICA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcbiAgICBpZihvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xuICAgIGlmKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XG4gICAgdGhpc1skT0ZGU0VUXSA9IG9mZnNldDtcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcbiAgfTtcblxuICBpZihERVNDUklQVE9SUyl7XG4gICAgYWRkR2V0dGVyKCRBcnJheUJ1ZmZlciwgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJZVEVfT0ZGU0VULCAnX28nKTtcbiAgfVxuXG4gIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KXtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XG4gICAgfSxcbiAgICBnZXRVaW50ODogZnVuY3Rpb24gZ2V0VWludDgoYnl0ZU9mZnNldCl7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XG4gICAgfSxcbiAgICBnZXRJbnQzMjogZnVuY3Rpb24gZ2V0SW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xuICAgIH0sXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpID4+PiAwO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcbiAgICB9LFxuICAgIGdldEZsb2F0NjQ6IGZ1bmN0aW9uIGdldEZsb2F0NjQoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgcGFja0Y2NCwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfVxuICB9KTtcbn0gZWxzZSB7XG4gIGlmKCFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyAkQXJyYXlCdWZmZXI7ICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgJEFycmF5QnVmZmVyKC41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgfSkpe1xuICAgICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCl7XG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyh0aGlzLCBsZW5ndGgpKTtcbiAgICB9O1xuICAgIHZhciBBcnJheUJ1ZmZlclByb3RvID0gJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBCYXNlQnVmZmVyW1BST1RPVFlQRV07XG4gICAgZm9yKHZhciBrZXlzID0gZ09QTihCYXNlQnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyApe1xuICAgICAgaWYoISgoa2V5ID0ga2V5c1tqKytdKSBpbiAkQXJyYXlCdWZmZXIpKWhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XG4gICAgfTtcbiAgICBpZighTElCUkFSWSlBcnJheUJ1ZmZlclByb3RvLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9XG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xuICB2YXIgdmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSlcbiAgICAsICRzZXRJbnQ4ID0gJERhdGFWaWV3W1BST1RPVFlQRV0uc2V0SW50ODtcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XG4gIGlmKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKXJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSl7XG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHRydWUpO1xufVxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xuc2V0VG9TdHJpbmdUYWcoJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xuZXhwb3J0c1tEQVRBX1ZJRVddID0gJERhdGFWaWV3OyIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHVpZCAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgVFlQRUQgID0gdWlkKCd0eXBlZF9hcnJheScpXG4gICwgVklFVyAgID0gdWlkKCd2aWV3JylcbiAgLCBBQlYgICAgPSAhIShnbG9iYWwuQXJyYXlCdWZmZXIgJiYgZ2xvYmFsLkRhdGFWaWV3KVxuICAsIENPTlNUUiA9IEFCVlxuICAsIGkgPSAwLCBsID0gOSwgVHlwZWQ7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzID0gKFxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXG4pLnNwbGl0KCcsJyk7XG5cbndoaWxlKGkgPCBsKXtcbiAgaWYoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSl7XG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVklFVywgdHJ1ZSk7XG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEFCVjogICAgQUJWLFxuICBDT05TVFI6IENPTlNUUixcbiAgVFlQRUQ6ICBUWVBFRCxcbiAgVklFVzogICBWSUVXXG59OyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcmUgICAgID0gcmVxdWlyZSgnLi9fcmVwbGFjZXInKSgvW1xcXFxeJCorPy4oKXxbXFxde31dL2csICdcXFxcJCYnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7ZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpeyByZXR1cm4gJHJlKGl0KTsgfX0pO1xuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2NvcHlXaXRoaW46IHJlcXVpcmUoJy4vX2FycmF5LWNvcHktd2l0aGluJyl9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGV2ZXJ5ICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJGV2ZXJ5KHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJyl9KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZpbHRlciwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGZpbmQgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KVxuICAsIEtFWSAgICAgPSAnZmluZEluZGV4J1xuICAsIGZvcmNlZCAgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmKEtFWSBpbiBbXSlBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4vKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmluZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpXG4gICwgS0VZICAgICA9ICdmaW5kJ1xuICAsIGZvcmNlZCAgPSB0cnVlO1xuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcbmlmKEtFWSBpbiBbXSlBcnJheSgxKVtLRVldKGZ1bmN0aW9uKCl7IGZvcmNlZCA9IGZhbHNlOyB9KTtcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbi8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKVxuICAsIFNUUklDVCAgID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgY2FsbCAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKVxuICAsIGlzQXJyYXlJdGVyICAgID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpXG4gICwgdG9MZW5ndGggICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5JylcbiAgLCBnZXRJdGVyRm4gICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24oaXRlcil7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UvKiwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQqLyl7XG4gICAgdmFyIE8gICAgICAgPSB0b09iamVjdChhcnJheUxpa2UpXG4gICAgICAsIEMgICAgICAgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5XG4gICAgICAsIGFMZW4gICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIG1hcGZuICAgPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZFxuICAgICAgLCBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZFxuICAgICAgLCBpbmRleCAgID0gMFxuICAgICAgLCBpdGVyRm4gID0gZ2V0SXRlckZuKE8pXG4gICAgICAsIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZihtYXBwaW5nKW1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpe1xuICAgICAgZm9yKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4Kyspe1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvcihyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGluZGV4T2YgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpXG4gICwgJG5hdGl2ZSAgICAgICA9IFtdLmluZGV4T2ZcbiAgLCBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gMCAqLyl7XG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICAgID8gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDBcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7aXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKX0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUuam9pbihzZXBhcmF0b3IpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBhcnJheUpvaW4gPSBbXS5qb2luO1xuXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAocmVxdWlyZSgnLi9faW9iamVjdCcpICE9IE9iamVjdCB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKGFycmF5Sm9pbikpLCAnQXJyYXknLCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKXtcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0lPYmplY3QgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9JbnRlZ2VyICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIHRvTGVuZ3RoICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsICRuYXRpdmUgICAgICAgPSBbXS5sYXN0SW5kZXhPZlxuICAsIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ID0gQFsqLTFdICovKXtcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgaWYoTkVHQVRJVkVfWkVSTylyZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XG4gICAgdmFyIE8gICAgICA9IHRvSU9iamVjdCh0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gbGVuZ3RoIC0gMTtcbiAgICBpZihhcmd1bWVudHMubGVuZ3RoID4gMSlpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XG4gICAgaWYoaW5kZXggPCAwKWluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgZm9yKDtpbmRleCA+PSAwOyBpbmRleC0tKWlmKGluZGV4IGluIE8paWYoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpcmV0dXJuIGluZGV4IHx8IDA7XG4gICAgcmV0dXJuIC0xO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJG1hcCAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgxKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE1IC8gMTUuNC40LjE5IEFycmF5LnByb3RvdHlwZS5tYXAoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gV2ViS2l0IEFycmF5Lm9mIGlzbid0IGdlbmVyaWNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICBmdW5jdGlvbiBGKCl7fVxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XG59KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBhTGVuICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XG4gICAgd2hpbGUoYUxlbiA+IGluZGV4KWNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZVJpZ2h0LCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pe1xuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcbiAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCBmYWxzZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBodG1sICAgICAgID0gcmVxdWlyZSgnLi9faHRtbCcpXG4gICwgY29mICAgICAgICA9IHJlcXVpcmUoJy4vX2NvZicpXG4gICwgdG9JbmRleCAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgLCB0b0xlbmd0aCAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBhcnJheVNsaWNlID0gW10uc2xpY2U7XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICBpZihodG1sKWFycmF5U2xpY2UuY2FsbChodG1sKTtcbn0pLCAnQXJyYXknLCB7XG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKXtcbiAgICB2YXIgbGVuICAgPSB0b0xlbmd0aCh0aGlzLmxlbmd0aClcbiAgICAgICwga2xhc3MgPSBjb2YodGhpcyk7XG4gICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQ7XG4gICAgaWYoa2xhc3MgPT0gJ0FycmF5JylyZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xuICAgIHZhciBzdGFydCAgPSB0b0luZGV4KGJlZ2luLCBsZW4pXG4gICAgICAsIHVwVG8gICA9IHRvSW5kZXgoZW5kLCBsZW4pXG4gICAgICAsIHNpemUgICA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydClcbiAgICAgICwgY2xvbmVkID0gQXJyYXkoc2l6ZSlcbiAgICAgICwgaSAgICAgID0gMDtcbiAgICBmb3IoOyBpIDwgc2l6ZTsgaSsrKWNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcbiAgICAgIDogdGhpc1tzdGFydCArIGldO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkc29tZSAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uc29tZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCB0b09iamVjdCAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGZhaWxzICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCAkc29ydCAgICAgPSBbXS5zb3J0XG4gICwgdGVzdCAgICAgID0gWzEsIDIsIDNdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIFY4IGJ1Z1xuICB0ZXN0LnNvcnQobnVsbCk7XG4gIC8vIE9sZCBXZWJLaXRcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxuICBzb3J0OiBmdW5jdGlvbiBzb3J0KGNvbXBhcmVmbil7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7IiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTsiLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHtub3c6IGZ1bmN0aW9uKCl7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfX0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZmFpbHMgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBnZXRUaW1lID0gRGF0ZS5wcm90b3R5cGUuZ2V0VGltZTtcblxudmFyIGx6ID0gZnVuY3Rpb24obnVtKXtcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XG59O1xuXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBuZXcgRGF0ZSgtNWUxMyAtIDEpLnRvSVNPU3RyaW5nKCkgIT0gJzAzODUtMDctMjVUMDc6MDY6MzkuOTk5Wic7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgbmV3IERhdGUoTmFOKS50b0lTT1N0cmluZygpO1xufSkpLCAnRGF0ZScsIHtcbiAgdG9JU09TdHJpbmc6IGZ1bmN0aW9uIHRvSVNPU3RyaW5nKCl7XG4gICAgaWYoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpdGhyb3cgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gICAgdmFyIGQgPSB0aGlzXG4gICAgICAsIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKClcbiAgICAgICwgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKClcbiAgICAgICwgcyA9IHkgPCAwID8gJy0nIDogeSA+IDk5OTkgPyAnKycgOiAnJztcbiAgICByZXR1cm4gcyArICgnMDAwMDAnICsgTWF0aC5hYnMoeSkpLnNsaWNlKHMgPyAtNiA6IC00KSArXG4gICAgICAnLScgKyBseihkLmdldFVUQ01vbnRoKCkgKyAxKSArICctJyArIGx6KGQuZ2V0VVRDRGF0ZSgpKSArXG4gICAgICAnVCcgKyBseihkLmdldFVUQ0hvdXJzKCkpICsgJzonICsgbHooZC5nZXRVVENNaW51dGVzKCkpICtcbiAgICAgICc6JyArIGx6KGQuZ2V0VVRDU2Vjb25kcygpKSArICcuJyArIChtID4gOTkgPyBtIDogJzAnICsgbHoobSkpICsgJ1onO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG5ldyBEYXRlKE5hTikudG9KU09OKCkgIT09IG51bGwgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoe3RvSVNPU3RyaW5nOiBmdW5jdGlvbigpeyByZXR1cm4gMTsgfX0pICE9PSAxO1xufSksICdEYXRlJywge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpe1xuICAgIHZhciBPICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIHB2ID0gdG9QcmltaXRpdmUoTyk7XG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcbiAgfVxufSk7IiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpXG4gICwgcHJvdG8gICAgICAgID0gRGF0ZS5wcm90b3R5cGU7XG5cbmlmKCEoVE9fUFJJTUlUSVZFIGluIHByb3RvKSlyZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7IiwidmFyIERhdGVQcm90byAgICA9IERhdGUucHJvdG90eXBlXG4gICwgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSdcbiAgLCBUT19TVFJJTkcgICAgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nICAgID0gRGF0ZVByb3RvW1RPX1NUUklOR11cbiAgLCBnZXRUaW1lICAgICAgPSBEYXRlUHJvdG8uZ2V0VGltZTtcbmlmKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpe1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKERhdGVQcm90bywgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHZhciB2YWx1ZSA9IGdldFRpbWUuY2FsbCh0aGlzKTtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufSIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7YmluZDogcmVxdWlyZSgnLi9fYmluZCcpfSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIEhBU19JTlNUQU5DRSAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJylcbiAgLCBGdW5jdGlvblByb3RvICA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxuaWYoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihGdW5jdGlvblByb3RvLCBIQVNfSU5TVEFOQ0UsIHt2YWx1ZTogZnVuY3Rpb24oTyl7XG4gIGlmKHR5cGVvZiB0aGlzICE9ICdmdW5jdGlvbicgfHwgIWlzT2JqZWN0KE8pKXJldHVybiBmYWxzZTtcbiAgaWYoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSlyZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gIHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSlpZih0aGlzLnByb3RvdHlwZSA9PT0gTylyZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufX0pOyIsInZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBoYXMgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBGUHJvdG8gICAgID0gRnVuY3Rpb24ucHJvdG90eXBlXG4gICwgbmFtZVJFICAgICA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopL1xuICAsIE5BTUUgICAgICAgPSAnbmFtZSc7XG5cbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0cnVlO1xufTtcblxuLy8gMTkuMi40LjIgbmFtZVxuTkFNRSBpbiBGUHJvdG8gfHwgcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiBkUChGUHJvdG8sIE5BTUUsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgdHJ5IHtcbiAgICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgICAsIG5hbWUgPSAoJycgKyB0aGF0KS5tYXRjaChuYW1lUkUpWzFdO1xuICAgICAgaGFzKHRoYXQsIE5BTUUpIHx8ICFpc0V4dGVuc2libGUodGhhdCkgfHwgZFAodGhhdCwgTkFNRSwgY3JlYXRlRGVzYyg1LCBuYW1lKSk7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjEgTWFwIE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdNYXAnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gTWFwKCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nLCB0cnVlKTsiLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgbG9nMXAgICA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKVxuICAsIHNxcnQgICAgPSBNYXRoLnNxcnRcbiAgLCAkYWNvc2ggID0gTWF0aC5hY29zaDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxuICAvLyBWOCBidWc6IGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNTA5XG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU4gXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcbiksICdNYXRoJywge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCl7XG4gICAgcmV0dXJuICh4ID0gK3gpIDwgMSA/IE5hTiA6IHggPiA5NDkwNjI2NS42MjQyNTE1NlxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi41IE1hdGguYXNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkYXNpbmggID0gTWF0aC5hc2luaDtcblxuZnVuY3Rpb24gYXNpbmgoeCl7XG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcbn1cblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wIFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCksICdNYXRoJywge2FzaW5oOiBhc2luaH0pOyIsIi8vIDIwLjIuMi43IE1hdGguYXRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkYXRhbmggID0gTWF0aC5hdGFuaDtcblxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwIFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApLCAnTWF0aCcsIHtcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpe1xuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNpZ24gICAgPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjYnJ0OiBmdW5jdGlvbiBjYnJ0KHgpe1xuICAgIHJldHVybiBzaWduKHggPSAreCkgKiBNYXRoLnBvdyhNYXRoLmFicyh4KSwgMSAvIDMpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCl7XG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTIgTWF0aC5jb3NoKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZXhwICAgICA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCl7XG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZXhwbTEgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywge2V4cG0xOiAkZXhwbTF9KTsiLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHNpZ24gICAgICA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpXG4gICwgcG93ICAgICAgID0gTWF0aC5wb3dcbiAgLCBFUFNJTE9OICAgPSBwb3coMiwgLTUyKVxuICAsIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpXG4gICwgTUFYMzIgICAgID0gcG93KDIsIDEyNykgKiAoMiAtIEVQU0lMT04zMilcbiAgLCBNSU4zMiAgICAgPSBwb3coMiwgLTEyNik7XG5cbnZhciByb3VuZFRpZXNUb0V2ZW4gPSBmdW5jdGlvbihuKXtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGZyb3VuZDogZnVuY3Rpb24gZnJvdW5kKHgpe1xuICAgIHZhciAkYWJzICA9IE1hdGguYWJzKHgpXG4gICAgICAsICRzaWduID0gc2lnbih4KVxuICAgICAgLCBhLCByZXN1bHQ7XG4gICAgaWYoJGFicyA8IE1JTjMyKXJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XG4gICAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xuICAgIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAgIGlmKHJlc3VsdCA+IE1BWDMyIHx8IHJlc3VsdCAhPSByZXN1bHQpcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gICAgcmV0dXJuICRzaWduICogcmVzdWx0O1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhYnMgICAgID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaHlwb3Q6IGZ1bmN0aW9uIGh5cG90KHZhbHVlMSwgdmFsdWUyKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIHZhciBzdW0gID0gMFxuICAgICAgLCBpICAgID0gMFxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBsYXJnID0gMFxuICAgICAgLCBhcmcsIGRpdjtcbiAgICB3aGlsZShpIDwgYUxlbil7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYobGFyZyA8IGFyZyl7XG4gICAgICAgIGRpdiAgPSBsYXJnIC8gYXJnO1xuICAgICAgICBzdW0gID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZihhcmcgPiAwKXtcbiAgICAgICAgZGl2ICA9IGFyZyAvIGxhcmc7XG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcbiAgICB9XG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkaW11bCAgID0gTWF0aC5pbXVsO1xuXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pLCAnTWF0aCcsIHtcbiAgaW11bDogZnVuY3Rpb24gaW11bCh4LCB5KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsIHhuID0gK3hcbiAgICAgICwgeW4gPSAreVxuICAgICAgLCB4bCA9IFVJTlQxNiAmIHhuXG4gICAgICAsIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgbG9nMTA6IGZ1bmN0aW9uIGxvZzEwKHgpe1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4xMDtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpfSk7IiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpe1xuICAgIHJldHVybiBNYXRoLmxvZyh4KSAvIE1hdGguTE4yO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7c2lnbjogcmVxdWlyZSgnLi9fbWF0aC1zaWduJyl9KTsiLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZXhwbTEgICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KSwgJ01hdGgnLCB7XG4gIHNpbmg6IGZ1bmN0aW9uIHNpbmgoeCl7XG4gICAgcmV0dXJuIE1hdGguYWJzKHggPSAreCkgPCAxXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMzMgTWF0aC50YW5oKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZXhwbTEgICA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKVxuICAsIGV4cCAgICAgPSBNYXRoLmV4cDtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpe1xuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KVxuICAgICAgLCBiID0gZXhwbTEoLXgpO1xuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4zNCBNYXRoLnRydW5jKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCl7XG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGFzICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIGNvZiAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKVxuICAsIHRvUHJpbWl0aXZlICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBnT1BOICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIGdPUEQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mXG4gICwgZFAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgJHRyaW0gICAgICAgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW1cbiAgLCBOVU1CRVIgICAgICAgICAgICA9ICdOdW1iZXInXG4gICwgJE51bWJlciAgICAgICAgICAgPSBnbG9iYWxbTlVNQkVSXVxuICAsIEJhc2UgICAgICAgICAgICAgID0gJE51bWJlclxuICAsIHByb3RvICAgICAgICAgICAgID0gJE51bWJlci5wcm90b3R5cGVcbiAgLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG4gICwgQlJPS0VOX0NPRiAgICAgICAgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSXG4gICwgVFJJTSAgICAgICAgICAgICAgPSAndHJpbScgaW4gU3RyaW5nLnByb3RvdHlwZTtcblxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXG52YXIgdG9OdW1iZXIgPSBmdW5jdGlvbihhcmd1bWVudCl7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XG4gIGlmKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKXtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKVxuICAgICAgLCB0aGlyZCwgcmFkaXgsIG1heENvZGU7XG4gICAgaWYoZmlyc3QgPT09IDQzIHx8IGZpcnN0ID09PSA0NSl7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZih0aGlyZCA9PT0gODggfHwgdGhpcmQgPT09IDEyMClyZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmKGZpcnN0ID09PSA0OCl7XG4gICAgICBzd2l0Y2goaXQuY2hhckNvZGVBdCgxKSl7XG4gICAgICAgIGNhc2UgNjYgOiBjYXNlIDk4ICA6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OSA6IGNhc2UgMTExIDogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdCA6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspe1xuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZihjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpcmV0dXJuIE5hTjtcbiAgICAgIH0gcmV0dXJuIHBhcnNlSW50KGRpZ2l0cywgcmFkaXgpO1xuICAgIH1cbiAgfSByZXR1cm4gK2l0O1xufTtcblxuaWYoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKXtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSl7XG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWVcbiAgICAgICwgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXG4gICAgICAvLyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24oKXsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXG4gICAgICAgID8gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UodG9OdW1iZXIoaXQpKSwgdGhhdCwgJE51bWJlcikgOiB0b051bWJlcihpdCk7XG4gIH07XG4gIGZvcih2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxuICAgIC8vIEVTMzpcbiAgICAnTUFYX1ZBTFVFLE1JTl9WQUxVRSxOYU4sTkVHQVRJVkVfSU5GSU5JVFksUE9TSVRJVkVfSU5GSU5JVFksJyArXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcbiAgICAnTUlOX1NBRkVfSU5URUdFUixwYXJzZUZsb2F0LHBhcnNlSW50LGlzSW50ZWdlcidcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKyl7XG4gICAgaWYoaGFzKEJhc2UsIGtleSA9IGtleXNbal0pICYmICFoYXMoJE51bWJlciwga2V5KSl7XG4gICAgICBkUCgkTnVtYmVyLCBrZXksIGdPUEQoQmFzZSwga2V5KSk7XG4gICAgfVxuICB9XG4gICROdW1iZXIucHJvdG90eXBlID0gcHJvdG87XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XG59IiwiLy8gMjAuMS4yLjEgTnVtYmVyLkVQU0lMT05cbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge0VQU0lMT046IE1hdGgucG93KDIsIC01Mil9KTsiLCIvLyAyMC4xLjIuMiBOdW1iZXIuaXNGaW5pdGUobnVtYmVyKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgX2lzRmluaXRlID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuaXNGaW5pdGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc0Zpbml0ZTogZnVuY3Rpb24gaXNGaW5pdGUoaXQpe1xuICAgIHJldHVybiB0eXBlb2YgaXQgPT0gJ251bWJlcicgJiYgX2lzRmluaXRlKGl0KTtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtpc0ludGVnZXI6IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKX0pOyIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcil7XG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XG4gIH1cbn0pOyIsIi8vIDIwLjEuMi41IE51bWJlci5pc1NhZmVJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGlzSW50ZWdlciA9IHJlcXVpcmUoJy4vX2lzLWludGVnZXInKVxuICAsIGFicyAgICAgICA9IE1hdGguYWJzO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcbiAgaXNTYWZlSW50ZWdlcjogZnVuY3Rpb24gaXNTYWZlSW50ZWdlcihudW1iZXIpe1xuICAgIHJldHVybiBpc0ludGVnZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFmZmZmZmZmZmZmZmZmO1xuICB9XG59KTsiLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7TUFYX1NBRkVfSU5URUdFUjogMHgxZmZmZmZmZmZmZmZmZn0pOyIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7TUlOX1NBRkVfSU5URUdFUjogLTB4MWZmZmZmZmZmZmZmZmZ9KTsiLCJ2YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcbi8vIDIwLjEuMi4xMiBOdW1iZXIucGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7cGFyc2VGbG9hdDogJHBhcnNlRmxvYXR9KTsiLCJ2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywge3BhcnNlSW50OiAkcGFyc2VJbnR9KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0ludGVnZXIgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpXG4gICwgcmVwZWF0ICAgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG4gICwgJHRvRml4ZWQgICAgID0gMS4udG9GaXhlZFxuICAsIGZsb29yICAgICAgICA9IE1hdGguZmxvb3JcbiAgLCBkYXRhICAgICAgICAgPSBbMCwgMCwgMCwgMCwgMCwgMF1cbiAgLCBFUlJPUiAgICAgICAgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISdcbiAgLCBaRVJPICAgICAgICAgPSAnMCc7XG5cbnZhciBtdWx0aXBseSA9IGZ1bmN0aW9uKG4sIGMpe1xuICB2YXIgaSAgPSAtMVxuICAgICwgYzIgPSBjO1xuICB3aGlsZSgrK2kgPCA2KXtcbiAgICBjMiArPSBuICogZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XG4gIH1cbn07XG52YXIgZGl2aWRlID0gZnVuY3Rpb24obil7XG4gIHZhciBpID0gNlxuICAgICwgYyA9IDA7XG4gIHdoaWxlKC0taSA+PSAwKXtcbiAgICBjICs9IGRhdGFbaV07XG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcbnZhciBudW1Ub1N0cmluZyA9IGZ1bmN0aW9uKCl7XG4gIHZhciBpID0gNlxuICAgICwgcyA9ICcnO1xuICB3aGlsZSgtLWkgPj0gMCl7XG4gICAgaWYocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKXtcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcbiAgICB9XG4gIH0gcmV0dXJuIHM7XG59O1xudmFyIHBvdyA9IGZ1bmN0aW9uKHgsIG4sIGFjYyl7XG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcbn07XG52YXIgbG9nID0gZnVuY3Rpb24oeCl7XG4gIHZhciBuICA9IDBcbiAgICAsIHgyID0geDtcbiAgd2hpbGUoeDIgPj0gNDA5Nil7XG4gICAgbiArPSAxMjtcbiAgICB4MiAvPSA0MDk2O1xuICB9XG4gIHdoaWxlKHgyID49IDIpe1xuICAgIG4gICs9IDE7XG4gICAgeDIgLz0gMjtcbiAgfSByZXR1cm4gbjtcbn07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCEhJHRvRml4ZWQgJiYgKFxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxuICAxLjI1NS50b0ZpeGVkKDIpICE9PSAnMS4yNScgfHxcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4udG9GaXhlZCgwKSAhPT0gJzEwMDAwMDAwMDAwMDAwMDAxMjgnXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xufSkpLCAnTnVtYmVyJywge1xuICB0b0ZpeGVkOiBmdW5jdGlvbiB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKXtcbiAgICB2YXIgeCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCBFUlJPUilcbiAgICAgICwgZiA9IHRvSW50ZWdlcihmcmFjdGlvbkRpZ2l0cylcbiAgICAgICwgcyA9ICcnXG4gICAgICAsIG0gPSBaRVJPXG4gICAgICAsIGUsIHosIGosIGs7XG4gICAgaWYoZiA8IDAgfHwgZiA+IDIwKXRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xuICAgIGlmKHggIT0geClyZXR1cm4gJ05hTic7XG4gICAgaWYoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpcmV0dXJuIFN0cmluZyh4KTtcbiAgICBpZih4IDwgMCl7XG4gICAgICBzID0gJy0nO1xuICAgICAgeCA9IC14O1xuICAgIH1cbiAgICBpZih4ID4gMWUtMjEpe1xuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcbiAgICAgIHogPSBlIDwgMCA/IHggKiBwb3coMiwgLWUsIDEpIDogeCAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZihlID4gMCl7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBqID0gZjtcbiAgICAgICAgd2hpbGUoaiA+PSA3KXtcbiAgICAgICAgICBtdWx0aXBseSgxZTcsIDApO1xuICAgICAgICAgIGogLT0gNztcbiAgICAgICAgfVxuICAgICAgICBtdWx0aXBseShwb3coMTAsIGosIDEpLCAwKTtcbiAgICAgICAgaiA9IGUgLSAxO1xuICAgICAgICB3aGlsZShqID49IDIzKXtcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XG4gICAgICAgICAgaiAtPSAyMztcbiAgICAgICAgfVxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XG4gICAgICAgIGRpdmlkZSgyKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtdWx0aXBseSgwLCB6KTtcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGYgPiAwKXtcbiAgICAgIGsgPSBtLmxlbmd0aDtcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSBzICsgbTtcbiAgICB9IHJldHVybiBtO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmFpbHMgICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKVxuICAsICR0b1ByZWNpc2lvbiA9IDEuLnRvUHJlY2lzaW9uO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gSUU3LVxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xufSkgfHwgISRmYWlscyhmdW5jdGlvbigpe1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pe1xuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTsgXG4gIH1cbn0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0Jywge2RlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKX0pOyIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZnJlZXplJywgZnVuY3Rpb24oJGZyZWV6ZSl7XG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpe1xuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpLmY7XG59KTsiLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24oJGlzRXh0ZW5zaWJsZSl7XG4gIHJldHVybiBmdW5jdGlvbiBpc0V4dGVuc2libGUoaXQpe1xuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZShpdCkgOiB0cnVlIDogZmFsc2U7XG4gIH07XG59KTsiLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uKCRpc1NlYWxlZCl7XG4gIHJldHVybiBmdW5jdGlvbiBpc1NlYWxlZChpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc1NlYWxlZCA/ICRpc1NlYWxlZChpdCkgOiBmYWxzZSA6IHRydWU7XG4gIH07XG59KTsiLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge2lzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJyl9KTsiLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIG1ldGEgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3ByZXZlbnRFeHRlbnNpb25zJywgZnVuY3Rpb24oJHByZXZlbnRFeHRlbnNpb25zKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KXtcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdzZWFsJywgZnVuY3Rpb24oJHNlYWwpe1xuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCl7XG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKVxuICAsIHRlc3QgICAgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJyl7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufSIsInZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pOyIsInZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUludCAhPSAkcGFyc2VJbnQpLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pOyIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgYW5PYmplY3QgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCByQXBwbHkgICAgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuYXBwbHlcbiAgLCBmQXBwbHkgICAgPSBGdW5jdGlvbi5hcHBseTtcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByQXBwbHkoZnVuY3Rpb24oKXt9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgYXBwbHk6IGZ1bmN0aW9uIGFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KXtcbiAgICB2YXIgVCA9IGFGdW5jdGlvbih0YXJnZXQpXG4gICAgICAsIEwgPSBhbk9iamVjdChhcmd1bWVudHNMaXN0KTtcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xuICB9XG59KTsiLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXG52YXIgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY3JlYXRlICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGFGdW5jdGlvbiAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbk9iamVjdCAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBpc09iamVjdCAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBmYWlscyAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGJpbmQgICAgICAgPSByZXF1aXJlKCcuL19iaW5kJylcbiAgLCByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcblxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbigpe1xuICBmdW5jdGlvbiBGKCl7fVxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uKCl7fSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcbnZhciBBUkdTX0JVRyA9ICFmYWlscyhmdW5jdGlvbigpe1xuICByQ29uc3RydWN0KGZ1bmN0aW9uKCl7fSk7XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcbiAgY29uc3RydWN0OiBmdW5jdGlvbiBjb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzIC8qLCBuZXdUYXJnZXQqLyl7XG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XG4gICAgYW5PYmplY3QoYXJncyk7XG4gICAgdmFyIG5ld1RhcmdldCA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gVGFyZ2V0IDogYUZ1bmN0aW9uKGFyZ3VtZW50c1syXSk7XG4gICAgaWYoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKXJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZihUYXJnZXQgPT0gbmV3VGFyZ2V0KXtcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXG4gICAgICBzd2l0Y2goYXJncy5sZW5ndGgpe1xuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0O1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xuICAgICAgcmV0dXJuIG5ldyAoYmluZC5hcHBseShUYXJnZXQsICRhcmdzKSk7XG4gICAgfVxuICAgIC8vIHdpdGggYWx0ZXJlZCBuZXdUYXJnZXQsIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGNvbnN0cnVjdG9yc1xuICAgIHZhciBwcm90byAgICA9IG5ld1RhcmdldC5wcm90b3R5cGVcbiAgICAgICwgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKVxuICAgICAgLCByZXN1bHQgICA9IEZ1bmN0aW9uLmFwcGx5LmNhbGwoVGFyZ2V0LCBpbnN0YW5jZSwgYXJncyk7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcbiAgfVxufSk7IiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcbnZhciBkUCAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICwgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkUC5mKHt9LCAxLCB7dmFsdWU6IDF9KSwgMSwge3ZhbHVlOiAyfSk7XG59KSwgJ1JlZmxlY3QnLCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKXtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xuICAgIGFuT2JqZWN0KGF0dHJpYnV0ZXMpO1xuICAgIHRyeSB7XG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pOyIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdPUEQgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgICByZXR1cm4gZGVzYyAmJiAhZGVzYy5jb25maWd1cmFibGUgPyBmYWxzZSA6IGRlbGV0ZSB0YXJnZXRbcHJvcGVydHlLZXldO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uKGl0ZXJhdGVkKXtcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdmFyIGtleXMgPSB0aGlzLl9rID0gW10gICAgICAgLy8ga2V5c1xuICAgICwga2V5O1xuICBmb3Ioa2V5IGluIGl0ZXJhdGVkKWtleXMucHVzaChrZXkpO1xufTtcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24oKXtcbiAgdmFyIHRoYXQgPSB0aGlzXG4gICAgLCBrZXlzID0gdGhhdC5fa1xuICAgICwga2V5O1xuICBkbyB7XG4gICAgaWYodGhhdC5faSA+PSBrZXlzLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICB9IHdoaWxlKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xuICByZXR1cm4ge3ZhbHVlOiBrZXksIGRvbmU6IGZhbHNlfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCl7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcbiAgfVxufSk7IiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgZ09QRCAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuOCBSZWZsZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldClcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpe1xuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcbiAgfVxufSk7IiwiLy8gMjYuMS42IFJlZmxlY3QuZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgWywgcmVjZWl2ZXJdKVxudmFyIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkvKiwgcmVjZWl2ZXIqLyl7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdXG4gICAgLCBkZXNjLCBwcm90bztcbiAgaWYoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpcmV0dXJuIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIGlmKGRlc2MgPSBnT1BELmYodGFyZ2V0LCBwcm9wZXJ0eUtleSkpcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxuICAgID8gZGVzYy52YWx1ZVxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG4gIGlmKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge2dldDogZ2V0fSk7IiwiLy8gMjYuMS45IFJlZmxlY3QuaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpe1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxudmFyICRleHBvcnQgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUodGFyZ2V0KSA6IHRydWU7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtvd25LZXlzOiByZXF1aXJlKCcuL19vd24ta2V5cycpfSk7IiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcbnZhciAkZXhwb3J0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgdHJ5IHtcbiAgICAgIGlmKCRwcmV2ZW50RXh0ZW5zaW9ucykkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTsiLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgc2V0UHJvdG8gPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKTtcblxuaWYoc2V0UHJvdG8pJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90byl7XG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIHNldFByb3RvLnNldCh0YXJnZXQsIHByb3RvKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG59KTsiLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxudmFyIGRQICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgY3JlYXRlRGVzYyAgICAgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYvKiwgcmVjZWl2ZXIqLyl7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdXG4gICAgLCBvd25EZXNjICA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSlcbiAgICAsIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XG4gIGlmKCFvd25EZXNjKXtcbiAgICBpZihpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKXtcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2MgPSBjcmVhdGVEZXNjKDApO1xuICB9XG4gIGlmKGhhcyhvd25EZXNjLCAndmFsdWUnKSl7XG4gICAgaWYob3duRGVzYy53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSlyZXR1cm4gZmFsc2U7XG4gICAgZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkgfHwgY3JlYXRlRGVzYygwKTtcbiAgICBleGlzdGluZ0Rlc2NyaXB0b3IudmFsdWUgPSBWO1xuICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7c2V0OiBzZXR9KTsiLCJ2YXIgZ2xvYmFsICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpXG4gICwgZFAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgZ09QTiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmZcbiAgLCBpc1JlZ0V4cCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICwgJGZsYWdzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mbGFncycpXG4gICwgJFJlZ0V4cCAgICAgICAgICAgPSBnbG9iYWwuUmVnRXhwXG4gICwgQmFzZSAgICAgICAgICAgICAgPSAkUmVnRXhwXG4gICwgcHJvdG8gICAgICAgICAgICAgPSAkUmVnRXhwLnByb3RvdHlwZVxuICAsIHJlMSAgICAgICAgICAgICAgID0gL2EvZ1xuICAsIHJlMiAgICAgICAgICAgICAgID0gL2EvZ1xuICAvLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcbiAgLCBDT1JSRUNUX05FVyAgICAgICA9IG5ldyAkUmVnRXhwKHJlMSkgIT09IHJlMTtcblxuaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmUyW3JlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpXSA9IGZhbHNlO1xuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcbn0pKSl7XG4gICRSZWdFeHAgPSBmdW5jdGlvbiBSZWdFeHAocCwgZil7XG4gICAgdmFyIHRpUkUgPSB0aGlzIGluc3RhbmNlb2YgJFJlZ0V4cFxuICAgICAgLCBwaVJFID0gaXNSZWdFeHAocClcbiAgICAgICwgZmlVICA9IGYgPT09IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcbiAgICAgIDogaW5oZXJpdElmUmVxdWlyZWQoQ09SUkVDVF9ORVdcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXG4gICAgICAsIHRpUkUgPyB0aGlzIDogcHJvdG8sICRSZWdFeHApO1xuICB9O1xuICB2YXIgcHJveHkgPSBmdW5jdGlvbihrZXkpe1xuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbigpeyByZXR1cm4gQmFzZVtrZXldOyB9LFxuICAgICAgc2V0OiBmdW5jdGlvbihpdCl7IEJhc2Vba2V5XSA9IGl0OyB9XG4gICAgfSk7XG4gIH07XG4gIGZvcih2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7IClwcm94eShrZXlzW2krK10pO1xuICBwcm90by5jb25zdHJ1Y3RvciA9ICRSZWdFeHA7XG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XG59XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpOyIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgLy4vZy5mbGFncyAhPSAnZycpcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTsiLCIvLyBAQG1hdGNoIGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24oZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCl7XG4gIC8vIDIxLjEuMy4xMSBTdHJpbmcucHJvdG90eXBlLm1hdGNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBtYXRjaChyZWdleHApe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtNQVRDSF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRtYXRjaF07XG59KTsiLCIvLyBAQHJlcGxhY2UgbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlKXtcbiAgLy8gMjEuMS4zLjE0IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKVxuICByZXR1cm4gW2Z1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxuICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcbiAgfSwgJHJlcGxhY2VdO1xufSk7IiwiLy8gQEBzZWFyY2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc2VhcmNoJywgMSwgZnVuY3Rpb24oZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoKXtcbiAgLy8gMjEuMS4zLjE1IFN0cmluZy5wcm90b3R5cGUuc2VhcmNoKHJlZ2V4cClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzZWFyY2gocmVnZXhwKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbU0VBUkNIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XG4gIH0sICRzZWFyY2hdO1xufSk7IiwiLy8gQEBzcGxpdCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uKGRlZmluZWQsIFNQTElULCAkc3BsaXQpe1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpc1JlZ0V4cCAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgICAsIF9zcGxpdCAgICAgPSAkc3BsaXRcbiAgICAsICRwdXNoICAgICAgPSBbXS5wdXNoXG4gICAgLCAkU1BMSVQgICAgID0gJ3NwbGl0J1xuICAgICwgTEVOR1RIICAgICA9ICdsZW5ndGgnXG4gICAgLCBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG4gIGlmKFxuICAgICdhYmJjJ1skU1BMSVRdKC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XG4gICAgJy4nWyRTUExJVF0oLyguPykoLj8pLylbTEVOR1RIXSAhPSA0IHx8XG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxuICApe1xuICAgIHZhciBOUENHID0gLygpPz8vLmV4ZWMoJycpWzFdID09PSB1bmRlZmluZWQ7IC8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24oc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xuICAgICAgaWYoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApcmV0dXJuIFtdO1xuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcbiAgICAgIGlmKCFpc1JlZ0V4cChzZXBhcmF0b3IpKXJldHVybiBfc3BsaXQuY2FsbChzdHJpbmcsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IDQyOTQ5NjcyOTUgOiBsaW1pdCA+Pj4gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIHNlcGFyYXRvcjIsIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGgsIGk7XG4gICAgICAvLyBEb2Vzbid0IG5lZWQgZmxhZ3MgZ3ksIGJ1dCB0aGV5IGRvbid0IGh1cnRcbiAgICAgIGlmKCFOUENHKXNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvckNvcHkuc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgICB3aGlsZShtYXRjaCA9IHNlcGFyYXRvckNvcHkuZXhlYyhzdHJpbmcpKXtcbiAgICAgICAgLy8gYHNlcGFyYXRvckNvcHkubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICBsYXN0SW5kZXggPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdW0xFTkdUSF07XG4gICAgICAgIGlmKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpe1xuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgIGZvciBOUENHXG4gICAgICAgICAgaWYoIU5QQ0cgJiYgbWF0Y2hbTEVOR1RIXSA+IDEpbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgZm9yKGkgPSAxOyBpIDwgYXJndW1lbnRzW0xFTkdUSF0gLSAyOyBpKyspaWYoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkkcHVzaC5hcHBseShvdXRwdXQsIG1hdGNoLnNsaWNlKDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xuICAgICAgICAgIGlmKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZihsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSl7XG4gICAgICAgIGlmKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpb3V0cHV0LnB1c2goJycpO1xuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xuICAgIH07XG4gIC8vIENoYWtyYSwgVjhcbiAgfSBlbHNlIGlmKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSl7XG4gICAgJHNwbGl0ID0gZnVuY3Rpb24oc2VwYXJhdG9yLCBsaW1pdCl7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IF9zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH1cbiAgLy8gMjEuMS4zLjE3IFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwYXJhdG9yLCBsaW1pdClcbiAgcmV0dXJuIFtmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KXtcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpIDogJHNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcbiAgfSwgJHNwbGl0XTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkZmxhZ3MgICAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBUT19TVFJJTkcgICA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgICA9IC8uL1tUT19TVFJJTkddO1xuXG52YXIgZGVmaW5lID0gZnVuY3Rpb24oZm4pe1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoe3NvdXJjZTogJ2EnLCBmbGFnczogJ2InfSkgIT0gJy9hL2InOyB9KSl7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcbiAgfSk7XG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxufSBlbHNlIGlmKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORyl7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKCdTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpe1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdhbmNob3InLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjMgU3RyaW5nLnByb3RvdHlwZS5iaWcoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBiaWcoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmlnJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JvbGQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkYXQgICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMy4zIFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQocG9zKVxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKXtcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pOyIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcbid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY29udGV4dCAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKVxuICAsIEVORFNfV0lUSCA9ICdlbmRzV2l0aCdcbiAgLCAkZW5kc1dpdGggPSAnJ1tFTkRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcgLyosIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLyl7XG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKVxuICAgICAgLCBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKVxuICAgICAgLCBlbmQgICAgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pXG4gICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkZW5kc1dpdGhcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRjb2xvcicsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOCBTdHJpbmcucHJvdG90eXBlLmZvbnRzaXplKHNpemUpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZm9udHNpemUoc2l6ZSl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9XG59KTsiLCJ2YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvSW5kZXggICAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIGZyb21DaGFyQ29kZSAgID0gU3RyaW5nLmZyb21DaGFyQ29kZVxuICAsICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XG5cbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuMiBTdHJpbmcuZnJvbUNvZGVQb2ludCguLi5jb2RlUG9pbnRzKVxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHJlcyAgPSBbXVxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBpICAgID0gMFxuICAgICAgLCBjb2RlO1xuICAgIHdoaWxlKGFMZW4gPiBpKXtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZih0b0luZGV4KGNvZGUsIDB4MTBmZmZmKSAhPT0gY29kZSl0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcbiAgICAgIHJlcy5wdXNoKGNvZGUgPCAweDEwMDAwXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcbiAgICAgICk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb250ZXh0ICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JylcbiAgLCBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIHJldHVybiAhIX5jb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgSU5DTFVERVMpXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnaXRhbGljcycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTAgU3RyaW5nLnByb3RvdHlwZS5saW5rKHVybClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGxpbmsodXJsKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICdocmVmJywgdXJsKTtcbiAgfVxufSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjIuNCBTdHJpbmcucmF3KGNhbGxTaXRlLCAuLi5zdWJzdGl0dXRpb25zKVxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSl7XG4gICAgdmFyIHRwbCAgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KVxuICAgICAgLCBsZW4gID0gdG9MZW5ndGgodHBsLmxlbmd0aClcbiAgICAgICwgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgcmVzICA9IFtdXG4gICAgICAsIGkgICAgPSAwO1xuICAgIHdoaWxlKGxlbiA+IGkpe1xuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XG4gICAgICBpZihpIDwgYUxlbilyZXMucHVzaChTdHJpbmcoYXJndW1lbnRzW2ldKSk7XG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xuICB9XG59KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xuICB9XG59KTsiLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0xlbmd0aCAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY29udGV4dCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCdcbiAgLCAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qLCBwb3NpdGlvbiA9IDAgKi8pe1xuICAgIHZhciB0aGF0ICAgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgU1RBUlRTX1dJVEgpXG4gICAgICAsIGluZGV4ICA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpXG4gICAgICAsIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xuICAgIHJldHVybiAkc3RhcnRzV2l0aFxuICAgICAgPyAkc3RhcnRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgaW5kZXgpXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTIgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2UoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdHJpa2UoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3RyaWtlJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3VwJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR0eXBlZCAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJylcbiAgLCBidWZmZXIgICAgICAgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKVxuICAsIGFuT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9JbmRleCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgaXNPYmplY3QgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBBcnJheUJ1ZmZlciAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5BcnJheUJ1ZmZlclxuICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAsICRBcnJheUJ1ZmZlciA9IGJ1ZmZlci5BcnJheUJ1ZmZlclxuICAsICREYXRhVmlldyAgICA9IGJ1ZmZlci5EYXRhVmlld1xuICAsICRpc1ZpZXcgICAgICA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3XG4gICwgJHNsaWNlICAgICAgID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZVxuICAsIFZJRVcgICAgICAgICA9ICR0eXBlZC5WSUVXXG4gICwgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoQXJyYXlCdWZmZXIgIT09ICRBcnJheUJ1ZmZlciksIHtBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyfSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISR0eXBlZC5DT05TVFIsIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCl7XG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XG4gIH1cbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuVSArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcbn0pLCBBUlJBWV9CVUZGRVIsIHtcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXtcbiAgICBpZigkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZClyZXR1cm4gJHNsaWNlLmNhbGwoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgdmFyIGxlbiAgICA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGhcbiAgICAgICwgZmlyc3QgID0gdG9JbmRleChzdGFydCwgbGVuKVxuICAgICAgLCBmaW5hbCAgPSB0b0luZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pXG4gICAgICAsIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbmFsIC0gZmlyc3QpKVxuICAgICAgLCB2aWV3UyAgPSBuZXcgJERhdGFWaWV3KHRoaXMpXG4gICAgICAsIHZpZXdUICA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KVxuICAgICAgLCBpbmRleCAgPSAwO1xuICAgIHdoaWxlKGZpcnN0IDwgZmluYWwpe1xuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQzMicsIDQsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0sIHRydWUpOyIsIid1c2Ugc3RyaWN0JztcbnZhciBlYWNoICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMClcbiAgLCByZWRlZmluZSAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgbWV0YSAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpXG4gICwgYXNzaWduICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpXG4gICwgd2VhayAgICAgICAgID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJylcbiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGdldFdlYWsgICAgICA9IG1ldGEuZ2V0V2Vha1xuICAsIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGVcbiAgLCB1bmNhdWdodEZyb3plblN0b3JlID0gd2Vhay51ZnN0b3JlXG4gICwgdG1wICAgICAgICAgID0ge31cbiAgLCBJbnRlcm5hbE1hcDtcblxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpe1xuICAgIHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxudmFyIG1ldGhvZHMgPSB7XG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSl7XG4gICAgaWYoaXNPYmplY3Qoa2V5KSl7XG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcbiAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuZ2V0KGtleSk7XG4gICAgICByZXR1cm4gZGF0YSA/IGRhdGFbdGhpcy5faV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuICB9LFxuICAvLyAyMy4zLjMuNSBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIGtleSwgdmFsdWUpO1xuICB9XG59O1xuXG4vLyAyMy4zIFdlYWtNYXAgT2JqZWN0c1xudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1dlYWtNYXAnLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcblxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxuaWYobmV3ICRXZWFrTWFwKCkuc2V0KChPYmplY3QuZnJlZXplIHx8IE9iamVjdCkodG1wKSwgNykuZ2V0KHRtcCkgIT0gNyl7XG4gIEludGVybmFsTWFwID0gd2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyKTtcbiAgYXNzaWduKEludGVybmFsTWFwLnByb3RvdHlwZSwgbWV0aG9kcyk7XG4gIG1ldGEuTkVFRCA9IHRydWU7XG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24oa2V5KXtcbiAgICB2YXIgcHJvdG8gID0gJFdlYWtNYXAucHJvdG90eXBlXG4gICAgICAsIG1ldGhvZCA9IHByb3RvW2tleV07XG4gICAgcmVkZWZpbmUocHJvdG8sIGtleSwgZnVuY3Rpb24oYSwgYil7XG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cbiAgICAgIGlmKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpe1xuICAgICAgICBpZighdGhpcy5fZil0aGlzLl9mID0gbmV3IEludGVybmFsTWFwO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xuICAgICAgICByZXR1cm4ga2V5ID09ICdzZXQnID8gdGhpcyA6IHJlc3VsdDtcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XG4gICAgfSk7XG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XG5cbi8vIDIzLjQgV2Vha1NldCBPYmplY3RzXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1dlYWtTZXQnLCBmdW5jdGlvbihnZXQpe1xuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7XG4gICAgcmV0dXJuIHdlYWsuZGVmKHRoaXMsIHZhbHVlLCB0cnVlKTtcbiAgfVxufSwgd2VhaywgZmFsc2UsIHRydWUpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKClcbiAgLCBwcm9jZXNzICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wcm9jZXNzXG4gICwgaXNOb2RlICAgID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge1xuICBhc2FwOiBmdW5jdGlvbiBhc2FwKGZuKXtcbiAgICB2YXIgZG9tYWluID0gaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluO1xuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9samhhcmIvcHJvcG9zYWwtaXMtZXJyb3JcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjb2YgICAgID0gcmVxdWlyZSgnLi9fY29mJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpe1xuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdNYXAnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJyl9KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpe1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMFxuICAgICAgLCAkeDEgPSB4MSA+Pj4gMFxuICAgICAgLCAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdil7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCAkdSA9ICt1XG4gICAgICAsICR2ID0gK3ZcbiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNlxuICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2XG4gICAgICAsIHUxID0gJHUgPj4gMTZcbiAgICAgICwgdjEgPSAkdiA+PiAxNlxuICAgICAgLCB0ICA9ICh1MSAqIHYwID4+PiAwKSArICh1MCAqIHYwID4+PiAxNik7XG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKXtcbiAgICB2YXIgJHgwID0geDAgPj4+IDBcbiAgICAgICwgJHgxID0geDEgPj4+IDBcbiAgICAgICwgJHkwID0geTAgPj4+IDA7XG4gICAgcmV0dXJuICR4MSAtICh5MSA+Pj4gMCkgLSAoKH4keDAgJiAkeTAgfCB+KCR4MCBeICR5MCkgJiAkeDAgLSAkeTAgPj4+IDApID4+PiAzMSkgfCAwO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdil7XG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZlxuICAgICAgLCAkdSA9ICt1XG4gICAgICAsICR2ID0gK3ZcbiAgICAgICwgdTAgPSAkdSAmIFVJTlQxNlxuICAgICAgLCB2MCA9ICR2ICYgVUlOVDE2XG4gICAgICAsIHUxID0gJHUgPj4+IDE2XG4gICAgICAsIHYxID0gJHYgPj4+IDE2XG4gICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+PiAxNik7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgYUZ1bmN0aW9uICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG5cbi8vIEIuMi4yLjIgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcilcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcil7XG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHtnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWV9KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKXtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwge3NldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpe1xuICAgIHJldHVybiAkZW50cmllcyhpdCk7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXG52YXIgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIG93bktleXMgICAgICAgID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KXtcbiAgICB2YXIgTyAgICAgICA9IHRvSU9iamVjdChvYmplY3QpXG4gICAgICAsIGdldERlc2MgPSBnT1BELmZcbiAgICAgICwga2V5cyAgICA9IG93bktleXMoTylcbiAgICAgICwgcmVzdWx0ICA9IHt9XG4gICAgICAsIGkgICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShrZXlzLmxlbmd0aCA+IGkpY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXkgPSBrZXlzW2krK10sIGdldERlc2MoTywga2V5KSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcblxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApe1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpXG4gICAgICAsIEQ7XG4gICAgZG8ge1xuICAgICAgaWYoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSlyZXR1cm4gRC5nZXQ7XG4gICAgfSB3aGlsZShPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCl7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSlcbiAgICAgICwgRDtcbiAgICBkbyB7XG4gICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELnNldDtcbiAgICB9IHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCl7XG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGdsb2JhbCAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBjb3JlICAgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIG1pY3JvdGFzayAgID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKVxuICAsIE9CU0VSVkFCTEUgID0gcmVxdWlyZSgnLi9fd2tzJykoJ29ic2VydmFibGUnKVxuICAsIGFGdW5jdGlvbiAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBoaWRlICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGZvck9mICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBSRVRVUk4gICAgICA9IGZvck9mLlJFVFVSTjtcblxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGZuKXtcbiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pO1xufTtcblxudmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICB2YXIgY2xlYW51cCA9IHN1YnNjcmlwdGlvbi5fYztcbiAgaWYoY2xlYW51cCl7XG4gICAgc3Vic2NyaXB0aW9uLl9jID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXAoKTtcbiAgfVxufTtcblxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDtcbn07XG5cbnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgfVxufTtcblxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKG9ic2VydmVyLCBzdWJzY3JpYmVyKXtcbiAgYW5PYmplY3Qob2JzZXJ2ZXIpO1xuICB0aGlzLl9jID0gdW5kZWZpbmVkO1xuICB0aGlzLl9vID0gb2JzZXJ2ZXI7XG4gIG9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO1xuICB0cnkge1xuICAgIHZhciBjbGVhbnVwICAgICAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKVxuICAgICAgLCBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xuICAgIGlmKGNsZWFudXAgIT0gbnVsbCl7XG4gICAgICBpZih0eXBlb2YgY2xlYW51cC51bnN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJyljbGVhbnVwID0gZnVuY3Rpb24oKXsgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xuICAgIH1cbiAgfSBjYXRjaChlKXtcbiAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXR1cm47XG4gIH0gaWYoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKWNsZWFudXBTdWJzY3JpcHRpb24odGhpcyk7XG59O1xuXG5TdWJzY3JpcHRpb24ucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCl7IGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpOyB9XG59KTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjtcbn07XG5cblN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XG4gIG5leHQ6IGZ1bmN0aW9uIG5leHQodmFsdWUpe1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcbiAgICAgICAgaWYobSlyZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKHZhbHVlKXtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcbiAgICBpZihzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl0aHJvdyB2YWx1ZTtcbiAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5lcnJvcik7XG4gICAgICBpZighbSl0aHJvdyB2YWx1ZTtcbiAgICAgIHZhbHVlID0gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpe1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSl7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XG4gICAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XG4gICAgICAgIHZhbHVlID0gbSA/IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpIDogdW5kZWZpbmVkO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKXtcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcbn07XG5cbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xuICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcil7XG4gICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHRoaXMuX2YpO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKXtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyAoY29yZS5Qcm9taXNlIHx8IGdsb2JhbC5Qcm9taXNlKShmdW5jdGlvbihyZXNvbHZlLCByZWplY3Qpe1xuICAgICAgYUZ1bmN0aW9uKGZuKTtcbiAgICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGF0LnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQgOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgY29tcGxldGU6IHJlc29sdmVcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59KTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHtcbiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KXtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xuICAgIHZhciBtZXRob2QgPSBnZXRNZXRob2QoYW5PYmplY3QoeClbT0JTRVJWQUJMRV0pO1xuICAgIGlmKG1ldGhvZCl7XG4gICAgICB2YXIgb2JzZXJ2YWJsZSA9IGFuT2JqZWN0KG1ldGhvZC5jYWxsKHgpKTtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uKG9ic2VydmVyKXtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpe1xuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICBpZighZG9uZSl7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbihpdCl7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoaXQpO1xuICAgICAgICAgICAgICBpZihkb25lKXJldHVybiBSRVRVUk47XG4gICAgICAgICAgICB9KSA9PT0gUkVUVVJOKXJldHVybjtcbiAgICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgaWYoZG9uZSl0aHJvdyBlO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpeyBkb25lID0gdHJ1ZTsgfTtcbiAgICB9KTtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKCl7XG4gICAgZm9yKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGgsIGl0ZW1zID0gQXJyYXkobCk7IGkgPCBsOylpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdO1xuICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbihvYnNlcnZlcil7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCFkb25lKXtcbiAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpe1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tpXSk7XG4gICAgICAgICAgICBpZihkb25lKXJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9XG59KTtcblxuaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblxuJGV4cG9ydCgkZXhwb3J0LkcsIHtPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZX0pO1xuXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7ZGVmaW5lTWV0YWRhdGE6IGZ1bmN0aW9uIGRlZmluZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCB0YXJnZXQsIHRhcmdldEtleSl7XG4gIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIGFuT2JqZWN0KHRhcmdldCksIHRvTWV0YUtleSh0YXJnZXRLZXkpKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcFxuICAsIHN0b3JlICAgICAgICAgICAgICAgICAgPSBtZXRhZGF0YS5zdG9yZTtcblxubWV0YWRhdGEuZXhwKHtkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgdmFyIHRhcmdldEtleSAgID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKVxuICAgICwgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xuICBpZihtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKXJldHVybiBmYWxzZTtcbiAgaWYobWV0YWRhdGFNYXAuc2l6ZSlyZXR1cm4gdHJ1ZTtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xuICByZXR1cm4gISF0YXJnZXRNZXRhZGF0YS5zaXplIHx8IHN0b3JlWydkZWxldGUnXSh0YXJnZXQpO1xufX0pOyIsInZhciBTZXQgICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vZXM2LnNldCcpXG4gICwgZnJvbSAgICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJylcbiAgLCBtZXRhZGF0YSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24oTywgUCl7XG4gIHZhciBvS2V5cyAgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKVxuICAgICwgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIGlmKHBhcmVudCA9PT0gbnVsbClyZXR1cm4gb0tleXM7XG4gIHZhciBwS2V5cyAgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xuICByZXR1cm4gcEtleXMubGVuZ3RoID8gb0tleXMubGVuZ3RoID8gZnJvbShuZXcgU2V0KG9LZXlzLmNvbmNhdChwS2V5cykpKSA6IHBLZXlzIDogb0tleXM7XG59O1xuXG5tZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldFxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIGlmKGhhc093bilyZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XG59O1xuXG5tZXRhZGF0YS5leHAoe2dldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlHZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYoaGFzT3duKXJldHVybiB0cnVlO1xuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XG59O1xuXG5tZXRhZGF0YS5leHAoe2hhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlIYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmhhc1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXk7XG5cbm1ldGFkYXRhLmV4cCh7aGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleVxuICAsIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XG5cbm1ldGFkYXRhLmV4cCh7bWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSl7XG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxuICAgICAgKHRhcmdldEtleSAhPT0gdW5kZWZpbmVkID8gYW5PYmplY3QgOiBhRnVuY3Rpb24pKHRhcmdldCksXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxuICAgICk7XG4gIH07XG59fSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0Jywge3RvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpfSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRhdCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIGF0OiBmdW5jdGlvbiBhdChwb3Mpe1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsL1xudmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBkZWZpbmVkICAgICA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBpc1JlZ0V4cCAgICA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICwgZ2V0RmxhZ3MgICAgPSByZXF1aXJlKCcuL19mbGFncycpXG4gICwgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xuXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24ocmVnZXhwLCBzdHJpbmcpe1xuICB0aGlzLl9yID0gcmVnZXhwO1xuICB0aGlzLl9zID0gc3RyaW5nO1xufTtcblxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpe1xuICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7XG4gIHJldHVybiB7dmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbH07XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApe1xuICAgIGRlZmluZWQodGhpcyk7XG4gICAgaWYoIWlzUmVnRXhwKHJlZ2V4cCkpdGhyb3cgVHlwZUVycm9yKHJlZ2V4cCArICcgaXMgbm90IGEgcmVnZXhwIScpO1xuICAgIHZhciBTICAgICA9IFN0cmluZyh0aGlzKVxuICAgICAgLCBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKVxuICAgICAgLCByeCAgICA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpO1xuICAgIHJ4Lmxhc3RJbmRleCA9IHRvTGVuZ3RoKHJlZ2V4cC5sYXN0SW5kZXgpO1xuICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFkICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qLCBmaWxsU3RyaW5nID0gJyAnICovKXtcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXN0cmluZy1wYWQtc3RhcnQtZW5kXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhZCAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XG4gIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGggLyosIGZpbGxTdHJpbmcgPSAnICcgKi8pe1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xuICB9O1xufSwgJ3RyaW1TdGFydCcpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uKCR0cmltKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1SaWdodCgpe1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAyKTtcbiAgfTtcbn0sICd0cmltRW5kJyk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1nbG9iYWxcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywge2dsb2JhbDogcmVxdWlyZSgnLi9fZ2xvYmFsJyl9KTsiLCJ2YXIgJGl0ZXJhdG9ycyAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJylcbiAgLCByZWRlZmluZSAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGdsb2JhbCAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGhpZGUgICAgICAgICAgPSByZXF1aXJlKCcuL19oaWRlJylcbiAgLCBJdGVyYXRvcnMgICAgID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJylcbiAgLCB3a3MgICAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzJylcbiAgLCBJVEVSQVRPUiAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICwgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKVxuICAsIEFycmF5VmFsdWVzICAgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmZvcih2YXIgY29sbGVjdGlvbnMgPSBbJ05vZGVMaXN0JywgJ0RPTVRva2VuTGlzdCcsICdNZWRpYUxpc3QnLCAnU3R5bGVTaGVldExpc3QnLCAnQ1NTUnVsZUxpc3QnXSwgaSA9IDA7IGkgPCA1OyBpKyspe1xuICB2YXIgTkFNRSAgICAgICA9IGNvbGxlY3Rpb25zW2ldXG4gICAgLCBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdXG4gICAgLCBwcm90byAgICAgID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZVxuICAgICwga2V5O1xuICBpZihwcm90byl7XG4gICAgaWYoIXByb3RvW0lURVJBVE9SXSloaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmKCFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBmb3Ioa2V5IGluICRpdGVyYXRvcnMpaWYoIXByb3RvW2tleV0pcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufSIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkdGFzayAgID0gcmVxdWlyZSgnLi9fdGFzaycpO1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIsIHtcbiAgc2V0SW1tZWRpYXRlOiAgICR0YXNrLnNldCxcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXG59KTsiLCIvLyBpZTktIHNldFRpbWVvdXQgJiBzZXRJbnRlcnZhbCBhZGRpdGlvbmFsIHBhcmFtZXRlcnMgZml4XG52YXIgZ2xvYmFsICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgJGV4cG9ydCAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaW52b2tlICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgcGFydGlhbCAgICA9IHJlcXVpcmUoJy4vX3BhcnRpYWwnKVxuICAsIG5hdmlnYXRvciAgPSBnbG9iYWwubmF2aWdhdG9yXG4gICwgTVNJRSAgICAgICA9ICEhbmF2aWdhdG9yICYmIC9NU0lFIC5cXC4vLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcbnZhciB3cmFwID0gZnVuY3Rpb24oc2V0KXtcbiAgcmV0dXJuIE1TSUUgPyBmdW5jdGlvbihmbiwgdGltZSAvKiwgLi4uYXJncyAqLyl7XG4gICAgcmV0dXJuIHNldChpbnZva2UoXG4gICAgICBwYXJ0aWFsLFxuICAgICAgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpLFxuICAgICAgdHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKVxuICAgICksIHRpbWUpO1xuICB9IDogc2V0O1xufTtcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CICsgJGV4cG9ydC5GICogTVNJRSwge1xuICBzZXRUaW1lb3V0OiAgd3JhcChnbG9iYWwuc2V0VGltZW91dCksXG4gIHNldEludGVydmFsOiB3cmFwKGdsb2JhbC5zZXRJbnRlcnZhbClcbn0pOyIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYWNvc2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2JydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5pbXVsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yYXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJpZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLm5vdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZyb20nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zbGljZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtc3RhcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1yaWdodCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5lbnRyaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtZ2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC50by1qc29uJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaW11bGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIudGltZXJzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9tb2R1bGVzL19jb3JlJyk7IiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxuICogdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9IEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYHZhbHVlIGluc3RhbmNlb2YgQXdhaXRBcmd1bWVudGAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuIFNvbWUgbWF5IGNvbnNpZGVyIHRoZSBuYW1lIG9mIHRoaXMgbWV0aG9kIHRvb1xuICAvLyBjdXRlc3ksIGJ1dCB0aGV5IGFyZSBjdXJtdWRnZW9ucy5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBuZXcgQXdhaXRBcmd1bWVudChhcmcpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEF3YWl0QXJndW1lbnQoYXJnKSB7XG4gICAgdGhpcy5hcmcgPSBhcmc7XG4gIH1cblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEF3YWl0QXJndW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLmFyZykudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXG4gICAgICAgICAgLy8gcmVhc29uLiBOb3RlIHRoYXQgcmVqZWN0aW9ucyBvZiB5aWVsZGVkIFByb21pc2VzIGFyZSBub3RcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxuICAgICAgICAgIC8vIGJlaGF2aW9yIGJldHdlZW4geWllbGQgYW5kIGF3YWl0IGlzIGltcG9ydGFudCwgYmVjYXVzZSBpdFxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgZ2VuZXJhdG9yLCBhYmFuZG9uIGl0ZXJhdGlvbiwgd2hhdGV2ZXIpLiBXaXRoXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcbiAgICAgICAgICAvLyBvbmx5IG9wdGlvbiBpcyB0byB0aHJvdyBpdCBmcm9tIHRoZSBhd2FpdCBleHByZXNzaW9uLCBhbmRcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBwcm9jZXNzLmRvbWFpbikge1xuICAgICAgaW52b2tlID0gcHJvY2Vzcy5kb21haW4uYmluZChpbnZva2UpO1xuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICBpZiAobWV0aG9kID09PSBcInJldHVyblwiIHx8XG4gICAgICAgICAgICAgIChtZXRob2QgPT09IFwidGhyb3dcIiAmJiBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICAvLyBBIHJldHVybiBvciB0aHJvdyAod2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIHRocm93XG4gICAgICAgICAgICAvLyBtZXRob2QpIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgICB2YXIgcmV0dXJuTWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl07XG4gICAgICAgICAgICBpZiAocmV0dXJuTWV0aG9kKSB7XG4gICAgICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChyZXR1cm5NZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBhcmcpO1xuICAgICAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoZSByZXR1cm4gbWV0aG9kIHRocmV3IGFuIGV4Y2VwdGlvbiwgbGV0IHRoYXRcbiAgICAgICAgICAgICAgICAvLyBleGNlcHRpb24gcHJldmFpbCBvdmVyIHRoZSBvcmlnaW5hbCByZXR1cm4gb3IgdGhyb3cuXG4gICAgICAgICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgICAgICAvLyBDb250aW51ZSB3aXRoIHRoZSBvdXRlciByZXR1cm4sIG5vdyB0aGF0IHRoZSBkZWxlZ2F0ZVxuICAgICAgICAgICAgICAvLyBpdGVyYXRvciBoYXMgYmVlbiB0ZXJtaW5hdGVkLlxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goXG4gICAgICAgICAgICBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2RdLFxuICAgICAgICAgICAgZGVsZWdhdGUuaXRlcmF0b3IsXG4gICAgICAgICAgICBhcmdcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBMaWtlIHJldHVybmluZyBnZW5lcmF0b3IudGhyb3codW5jYXVnaHQpLCBidXQgd2l0aG91dCB0aGVcbiAgICAgICAgICAgIC8vIG92ZXJoZWFkIG9mIGFuIGV4dHJhIGZ1bmN0aW9uIGNhbGwuXG4gICAgICAgICAgICBtZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRGVsZWdhdGUgZ2VuZXJhdG9yIHJhbiBhbmQgaGFuZGxlZCBpdHMgb3duIGV4Y2VwdGlvbnMgc29cbiAgICAgICAgICAvLyByZWdhcmRsZXNzIG9mIHdoYXQgdGhlIG1ldGhvZCB3YXMsIHdlIGNvbnRpbnVlIGFzIGlmIGl0IGlzXG4gICAgICAgICAgLy8gXCJuZXh0XCIgd2l0aCBhbiB1bmRlZmluZWQgYXJnLlxuICAgICAgICAgIG1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcbiAgICAgICAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAgICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcbiAgICAgICAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcbiAgICAgICAgICAgIHJldHVybiBpbmZvO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBhcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICAgIG1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgdmFyIGluZm8gPSB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQuZGVsZWdhdGUgJiYgbWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgICAgICAgIGFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIG1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBhcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcbiAgICAgICAgcmV0dXJuICEhY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxuICAvLyB1c2UgaW5kaXJlY3QgZXZhbCAod2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kpLlxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XG4gIHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiID8gc2VsZiA6IHRoaXNcbik7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8vIERpc3RyaWJ1dGlvbiBmaWxlIGZvciBNZXNzYWdlRmFjdG9yeS5qcyBcbi8vIHZlcnNpb246IDAuNC4wXG4vLyBMYXN0IGJ1aWxkOiBGcmkgTm92IDA0IDIwMTYgMTM6MTU6MTIgR01UKzAwMDAgKFdFVClcblxuIWZ1bmN0aW9uKGUpe2lmKFwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcInVuZGVmaW5lZFwiIT10eXBlb2YgbW9kdWxlKW1vZHVsZS5leHBvcnRzPWUoKTtlbHNlIGlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZClkZWZpbmUoW10sZSk7ZWxzZXt2YXIgdDt0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcyx0Lk1lc3NhZ2VGYWN0b3J5PWUoKX19KGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIGZ1bmN0aW9uIHQoZSxyLG4pe2Z1bmN0aW9uIG8oYSxzKXtpZighclthXSl7aWYoIWVbYV0pe3ZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIXMmJnUpcmV0dXJuIHUoYSwhMCk7aWYoaSlyZXR1cm4gaShhLCEwKTt2YXIgYz1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2ErXCInXCIpO3Rocm93IGMuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixjfXZhciBsPXJbYV09e2V4cG9ydHM6e319O2VbYV1bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24odCl7dmFyIHI9ZVthXVsxXVt0XTtyZXR1cm4gbyhyP3I6dCl9LGwsbC5leHBvcnRzLHQsZSxyLG4pfXJldHVybiByW2FdLmV4cG9ydHN9Zm9yKHZhciBpPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsYT0wO2E8bi5sZW5ndGg7YSsrKW8oblthXSk7cmV0dXJuIG99KHsxOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5XCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnlcIjoxNn1dLDI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2NyZWF0ZVwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIjoxN31dLDM6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIjoxOH1dLDQ6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2ZyZWV6ZVwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9mcmVlemVcIjoxOX1dLDU6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiOjIwfV0sNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5c1wiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9rZXlzXCI6MjF9XSw3OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIjoyMn1dLDg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sXCI6MjN9XSw5OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiOjI0fV0sMTA6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtyLl9fZXNNb2R1bGU9ITAscltcImRlZmF1bHRcIl09ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfX0se31dLDExOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKFwiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCIpLGk9bihvKTtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoZSx0KXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG49dFtyXTtuLmVudW1lcmFibGU9bi5lbnVtZXJhYmxlfHwhMSxuLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBuJiYobi53cml0YWJsZT0hMCksKDAsaVtcImRlZmF1bHRcIl0pKGUsbi5rZXksbil9fXJldHVybiBmdW5jdGlvbih0LHIsbil7cmV0dXJuIHImJmUodC5wcm90b3R5cGUsciksbiYmZSh0LG4pLHR9fSgpfSx7XCIuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIjozfV0sMTI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCIpLGk9bihvKSxhPWUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIikscz1uKGEpLHU9ZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpLGM9bih1KTtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbihlLHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiKyhcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOigwLGNbXCJkZWZhdWx0XCJdKSh0KSkpO2UucHJvdG90eXBlPSgwLHNbXCJkZWZhdWx0XCJdKSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksdCYmKGlbXCJkZWZhdWx0XCJdPygwLGlbXCJkZWZhdWx0XCJdKShlLHQpOmUuX19wcm90b19fPXQpfX0se1wiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCI6MixcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIjo3LFwiLi4vaGVscGVycy90eXBlb2ZcIjoxNH1dLDEzOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKFwiLi4vaGVscGVycy90eXBlb2ZcIiksaT1uKG8pO3JbXCJkZWZhdWx0XCJdPWZ1bmN0aW9uKGUsdCl7aWYoIWUpdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO3JldHVybiF0fHxcIm9iamVjdFwiIT09KFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6KDAsaVtcImRlZmF1bHRcIl0pKHQpKSYmXCJmdW5jdGlvblwiIT10eXBlb2YgdD9lOnR9fSx7XCIuLi9oZWxwZXJzL3R5cGVvZlwiOjE0fV0sMTQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ci5fX2VzTW9kdWxlPSEwO3ZhciBvPWUoXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiKSxpPW4obyksYT1lKFwiLi4vY29yZS1qcy9zeW1ib2xcIikscz1uKGEpLHU9XCJmdW5jdGlvblwiPT10eXBlb2Ygc1tcImRlZmF1bHRcIl0mJlwic3ltYm9sXCI9PXR5cGVvZiBpW1wiZGVmYXVsdFwiXT9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBzW1wiZGVmYXVsdFwiXSYmZS5jb25zdHJ1Y3Rvcj09PXNbXCJkZWZhdWx0XCJdJiZlIT09c1tcImRlZmF1bHRcIl0ucHJvdG90eXBlP1wic3ltYm9sXCI6dHlwZW9mIGV9O3JbXCJkZWZhdWx0XCJdPVwiZnVuY3Rpb25cIj09dHlwZW9mIHNbXCJkZWZhdWx0XCJdJiZcInN5bWJvbFwiPT09dShpW1wiZGVmYXVsdFwiXSk/ZnVuY3Rpb24oZSl7cmV0dXJuXCJ1bmRlZmluZWRcIj09dHlwZW9mIGU/XCJ1bmRlZmluZWRcIjp1KGUpfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2Ygc1tcImRlZmF1bHRcIl0mJmUuY29uc3RydWN0b3I9PT1zW1wiZGVmYXVsdFwiXSYmZSE9PXNbXCJkZWZhdWx0XCJdLnByb3RvdHlwZT9cInN5bWJvbFwiOlwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6dShlKX19LHtcIi4uL2NvcmUtanMvc3ltYm9sXCI6OCxcIi4uL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yXCI6OX1dLDE1OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpfSx7XCJyZWdlbmVyYXRvci1ydW50aW1lXCI6OTd9XSwxNjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLG89bi5KU09OfHwobi5KU09OPXtzdHJpbmdpZnk6SlNPTi5zdHJpbmdpZnl9KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG8uc3RyaW5naWZ5LmFwcGx5KG8sYXJndW1lbnRzKX19LHtcIi4uLy4uL21vZHVsZXMvX2NvcmVcIjozMH1dLDE3OltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGVcIik7dmFyIG49ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuLmNyZWF0ZShlLHQpfX0se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwLFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZVwiOjg0fV0sMTg6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eVwiKTt2YXIgbj1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3Q7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbi5kZWZpbmVQcm9wZXJ0eShlLHQscil9fSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5XCI6ODV9XSwxOTpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplXCIpLHQuZXhwb3J0cz1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3QuZnJlZXplfSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplXCI6ODZ9XSwyMDpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZlwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0LmdldFByb3RvdHlwZU9mfSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZlwiOjg3fV0sMjE6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXNcIiksdC5leHBvcnRzPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLk9iamVjdC5rZXlzfSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5c1wiOjg4fV0sMjI6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2ZcIiksdC5leHBvcnRzPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLk9iamVjdC5zZXRQcm90b3R5cGVPZn0se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwLFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2ZcIjo4OX1dLDIzOltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2LnN5bWJvbFwiKSxlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZ1wiKSxlKFwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yXCIpLGUoXCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wub2JzZXJ2YWJsZVwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuU3ltYm9sfSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzAsXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nXCI6OTAsXCIuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2xcIjo5MixcIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvclwiOjkzLFwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGVcIjo5NH1dLDI0OltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiKSxlKFwiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCIpLHQuZXhwb3J0cz1lKFwiLi4vLi4vbW9kdWxlcy9fd2tzLWV4dFwiKS5mKFwiaXRlcmF0b3JcIil9LHtcIi4uLy4uL21vZHVsZXMvX3drcy1leHRcIjo4MSxcIi4uLy4uL21vZHVsZXMvZXM2LnN0cmluZy5pdGVyYXRvclwiOjkxLFwiLi4vLi4vbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlXCI6OTV9XSwyNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhIGZ1bmN0aW9uIVwiKTtyZXR1cm4gZX19LHt9XSwyNjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbigpe319LHt9XSwyNzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19pcy1vYmplY3RcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKCFuKGUpKXRocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhbiBvYmplY3QhXCIpO3JldHVybiBlfX0se1wiLi9faXMtb2JqZWN0XCI6NDZ9XSwyODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1pb2JqZWN0XCIpLG89ZShcIi4vX3RvLWxlbmd0aFwiKSxpPWUoXCIuL190by1pbmRleFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGZ1bmN0aW9uKHQscixhKXt2YXIgcyx1PW4odCksYz1vKHUubGVuZ3RoKSxsPWkoYSxjKTtpZihlJiZyIT1yKXtmb3IoO2M+bDspaWYocz11W2wrK10scyE9cylyZXR1cm4hMH1lbHNlIGZvcig7Yz5sO2wrKylpZigoZXx8bCBpbiB1KSYmdVtsXT09PXIpcmV0dXJuIGV8fGx8fDA7cmV0dXJuIWUmJi0xfX19LHtcIi4vX3RvLWluZGV4XCI6NzMsXCIuL190by1pb2JqZWN0XCI6NzUsXCIuL190by1sZW5ndGhcIjo3Nn1dLDI5OltmdW5jdGlvbihlLHQscil7dmFyIG49e30udG9TdHJpbmc7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuLmNhbGwoZSkuc2xpY2UoOCwtMSl9fSx7fV0sMzA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj10LmV4cG9ydHM9e3ZlcnNpb246XCIyLjQuMFwifTtcIm51bWJlclwiPT10eXBlb2YgX19lJiYoX19lPW4pfSx7fV0sMzE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fYS1mdW5jdGlvblwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2lmKG4oZSksdm9pZCAwPT09dClyZXR1cm4gZTtzd2l0Y2gocil7Y2FzZSAxOnJldHVybiBmdW5jdGlvbihyKXtyZXR1cm4gZS5jYWxsKHQscil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24ocixuKXtyZXR1cm4gZS5jYWxsKHQscixuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihyLG4sbyl7cmV0dXJuIGUuY2FsbCh0LHIsbixvKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXBwbHkodCxhcmd1bWVudHMpfX19LHtcIi4vX2EtZnVuY3Rpb25cIjoyNX1dLDMyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe2lmKHZvaWQgMD09ZSl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIrZSk7cmV0dXJuIGV9fSx7fV0sMzM6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9IWUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KX0se1wiLi9fZmFpbHNcIjozOH1dLDM0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2lzLW9iamVjdFwiKSxvPWUoXCIuL19nbG9iYWxcIikuZG9jdW1lbnQsaT1uKG8pJiZuKG8uY3JlYXRlRWxlbWVudCk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpP28uY3JlYXRlRWxlbWVudChlKTp7fX19LHtcIi4vX2dsb2JhbFwiOjM5LFwiLi9faXMtb2JqZWN0XCI6NDZ9XSwzNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1cImNvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZlwiLnNwbGl0KFwiLFwiKX0se31dLDM2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX29iamVjdC1rZXlzXCIpLG89ZShcIi4vX29iamVjdC1nb3BzXCIpLGk9ZShcIi4vX29iamVjdC1waWVcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW4oZSkscj1vLmY7aWYocilmb3IodmFyIGEscz1yKGUpLHU9aS5mLGM9MDtzLmxlbmd0aD5jOyl1LmNhbGwoZSxhPXNbYysrXSkmJnQucHVzaChhKTtyZXR1cm4gdH19LHtcIi4vX29iamVjdC1nb3BzXCI6NjAsXCIuL19vYmplY3Qta2V5c1wiOjYzLFwiLi9fb2JqZWN0LXBpZVwiOjY0fV0sMzc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZ2xvYmFsXCIpLG89ZShcIi4vX2NvcmVcIiksaT1lKFwiLi9fY3R4XCIpLGE9ZShcIi4vX2hpZGVcIikscz1cInByb3RvdHlwZVwiLHU9ZnVuY3Rpb24oZSx0LHIpe3ZhciBjLGwsZixkPWUmdS5GLHA9ZSZ1LkcsaD1lJnUuUyx5PWUmdS5QLG09ZSZ1LkIsdj1lJnUuVyxfPXA/bzpvW3RdfHwob1t0XT17fSksYj1fW3NdLGc9cD9uOmg/blt0XTooblt0XXx8e30pW3NdO3AmJihyPXQpO2ZvcihjIGluIHIpbD0hZCYmZyYmdm9pZCAwIT09Z1tjXSxsJiZjIGluIF98fChmPWw/Z1tjXTpyW2NdLF9bY109cCYmXCJmdW5jdGlvblwiIT10eXBlb2YgZ1tjXT9yW2NdOm0mJmw/aShmLG4pOnYmJmdbY109PWY/ZnVuY3Rpb24oZSl7dmFyIHQ9ZnVuY3Rpb24odCxyLG4pe2lmKHRoaXMgaW5zdGFuY2VvZiBlKXtzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7Y2FzZSAwOnJldHVybiBuZXcgZTtjYXNlIDE6cmV0dXJuIG5ldyBlKHQpO2Nhc2UgMjpyZXR1cm4gbmV3IGUodCxyKX1yZXR1cm4gbmV3IGUodCxyLG4pfXJldHVybiBlLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07cmV0dXJuIHRbc109ZVtzXSx0fShmKTp5JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBmP2koRnVuY3Rpb24uY2FsbCxmKTpmLHkmJigoXy52aXJ0dWFsfHwoXy52aXJ0dWFsPXt9KSlbY109ZixlJnUuUiYmYiYmIWJbY10mJmEoYixjLGYpKSl9O3UuRj0xLHUuRz0yLHUuUz00LHUuUD04LHUuQj0xNix1Llc9MzIsdS5VPTY0LHUuUj0xMjgsdC5leHBvcnRzPXV9LHtcIi4vX2NvcmVcIjozMCxcIi4vX2N0eFwiOjMxLFwiLi9fZ2xvYmFsXCI6MzksXCIuL19oaWRlXCI6NDF9XSwzODpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXt0cnl7cmV0dXJuISFlKCl9Y2F0Y2godCl7cmV0dXJuITB9fX0se31dLDM5OltmdW5jdGlvbihlLHQscil7dmFyIG49dC5leHBvcnRzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJndpbmRvdy5NYXRoPT1NYXRoP3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZi5NYXRoPT1NYXRoP3NlbGY6RnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1wibnVtYmVyXCI9PXR5cGVvZiBfX2cmJihfX2c9bil9LHt9XSw0MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXt9Lmhhc093blByb3BlcnR5O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBuLmNhbGwoZSx0KX19LHt9XSw0MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3QtZHBcIiksbz1lKFwiLi9fcHJvcGVydHktZGVzY1wiKTt0LmV4cG9ydHM9ZShcIi4vX2Rlc2NyaXB0b3JzXCIpP2Z1bmN0aW9uKGUsdCxyKXtyZXR1cm4gbi5mKGUsdCxvKDEscikpfTpmdW5jdGlvbihlLHQscil7cmV0dXJuIGVbdF09cixlfX0se1wiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX29iamVjdC1kcFwiOjU1LFwiLi9fcHJvcGVydHktZGVzY1wiOjY2fV0sNDI6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZShcIi4vX2dsb2JhbFwiKS5kb2N1bWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fSx7XCIuL19nbG9iYWxcIjozOX1dLDQzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSFlKFwiLi9fZGVzY3JpcHRvcnNcIikmJiFlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUoXCIuL19kb20tY3JlYXRlXCIpKFwiZGl2XCIpLFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LHtcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19kb20tY3JlYXRlXCI6MzQsXCIuL19mYWlsc1wiOjM4fV0sNDQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fY29mXCIpO3QuZXhwb3J0cz1PYmplY3QoXCJ6XCIpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApP09iamVjdDpmdW5jdGlvbihlKXtyZXR1cm5cIlN0cmluZ1wiPT1uKGUpP2Uuc3BsaXQoXCJcIik6T2JqZWN0KGUpfX0se1wiLi9fY29mXCI6Mjl9XSw0NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19jb2ZcIik7dC5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVyblwiQXJyYXlcIj09bihlKX19LHtcIi4vX2NvZlwiOjI5fV0sNDY6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGU/bnVsbCE9PWU6XCJmdW5jdGlvblwiPT10eXBlb2YgZX19LHt9XSw0NzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL19vYmplY3QtY3JlYXRlXCIpLG89ZShcIi4vX3Byb3BlcnR5LWRlc2NcIiksaT1lKFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIiksYT17fTtlKFwiLi9faGlkZVwiKShhLGUoXCIuL193a3NcIikoXCJpdGVyYXRvclwiKSxmdW5jdGlvbigpe3JldHVybiB0aGlzfSksdC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtlLnByb3RvdHlwZT1uKGEse25leHQ6bygxLHIpfSksaShlLHQrXCIgSXRlcmF0b3JcIil9fSx7XCIuL19oaWRlXCI6NDEsXCIuL19vYmplY3QtY3JlYXRlXCI6NTQsXCIuL19wcm9wZXJ0eS1kZXNjXCI6NjYsXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiOjY5LFwiLi9fd2tzXCI6ODJ9XSw0ODpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL19saWJyYXJ5XCIpLG89ZShcIi4vX2V4cG9ydFwiKSxpPWUoXCIuL19yZWRlZmluZVwiKSxhPWUoXCIuL19oaWRlXCIpLHM9ZShcIi4vX2hhc1wiKSx1PWUoXCIuL19pdGVyYXRvcnNcIiksYz1lKFwiLi9faXRlci1jcmVhdGVcIiksbD1lKFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIiksZj1lKFwiLi9fb2JqZWN0LWdwb1wiKSxkPWUoXCIuL193a3NcIikoXCJpdGVyYXRvclwiKSxwPSEoW10ua2V5cyYmXCJuZXh0XCJpbltdLmtleXMoKSksaD1cIkBAaXRlcmF0b3JcIix5PVwia2V5c1wiLG09XCJ2YWx1ZXNcIix2PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscixfLGIsZyxFKXtjKHIsdCxfKTt2YXIgaix3LE8sTT1mdW5jdGlvbihlKXtpZighcCYmZSBpbiBSKXJldHVybiBSW2VdO3N3aXRjaChlKXtjYXNlIHk6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9O2Nhc2UgbTpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IHIodGhpcyxlKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9fSx4PXQrXCIgSXRlcmF0b3JcIixQPWI9PW0saz0hMSxSPWUucHJvdG90eXBlLFM9UltkXXx8UltoXXx8YiYmUltiXSxUPVN8fE0oYiksQT1iP1A/TShcImVudHJpZXNcIik6VDp2b2lkIDAsTj1cIkFycmF5XCI9PXQ/Ui5lbnRyaWVzfHxTOlM7aWYoTiYmKE89ZihOLmNhbGwobmV3IGUpKSxPIT09T2JqZWN0LnByb3RvdHlwZSYmKGwoTyx4LCEwKSxufHxzKE8sZCl8fGEoTyxkLHYpKSksUCYmUyYmUy5uYW1lIT09bSYmKGs9ITAsVD1mdW5jdGlvbigpe3JldHVybiBTLmNhbGwodGhpcyl9KSxuJiYhRXx8IXAmJiFrJiZSW2RdfHxhKFIsZCxUKSx1W3RdPVQsdVt4XT12LGIpaWYoaj17dmFsdWVzOlA/VDpNKG0pLGtleXM6Zz9UOk0oeSksZW50cmllczpBfSxFKWZvcih3IGluIGopdyBpbiBSfHxpKFIsdyxqW3ddKTtlbHNlIG8oby5QK28uRioocHx8ayksdCxqKTtyZXR1cm4gan19LHtcIi4vX2V4cG9ydFwiOjM3LFwiLi9faGFzXCI6NDAsXCIuL19oaWRlXCI6NDEsXCIuL19pdGVyLWNyZWF0ZVwiOjQ3LFwiLi9faXRlcmF0b3JzXCI6NTAsXCIuL19saWJyYXJ5XCI6NTIsXCIuL19vYmplY3QtZ3BvXCI6NjEsXCIuL19yZWRlZmluZVwiOjY3LFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIjo2OSxcIi4vX3drc1wiOjgyfV0sNDk6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57dmFsdWU6dCxkb25lOiEhZX19fSx7fV0sNTA6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e319LHt9XSw1MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3Qta2V5c1wiKSxvPWUoXCIuL190by1pb2JqZWN0XCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgcixpPW8oZSksYT1uKGkpLHM9YS5sZW5ndGgsdT0wO3M+dTspaWYoaVtyPWFbdSsrXV09PT10KXJldHVybiByfX0se1wiLi9fb2JqZWN0LWtleXNcIjo2MyxcIi4vX3RvLWlvYmplY3RcIjo3NX1dLDUyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSEwfSx7fV0sNTM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdWlkXCIpKFwibWV0YVwiKSxvPWUoXCIuL19pcy1vYmplY3RcIiksaT1lKFwiLi9faGFzXCIpLGE9ZShcIi4vX29iamVjdC1kcFwiKS5mLHM9MCx1PU9iamVjdC5pc0V4dGVuc2libGV8fGZ1bmN0aW9uKCl7cmV0dXJuITB9LGM9IWUoXCIuL19mYWlsc1wiKShmdW5jdGlvbigpe3JldHVybiB1KE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpfSksbD1mdW5jdGlvbihlKXthKGUsbix7dmFsdWU6e2k6XCJPXCIrICsrcyx3Ont9fX0pfSxmPWZ1bmN0aW9uKGUsdCl7aWYoIW8oZSkpcmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGU/ZTooXCJzdHJpbmdcIj09dHlwZW9mIGU/XCJTXCI6XCJQXCIpK2U7aWYoIWkoZSxuKSl7aWYoIXUoZSkpcmV0dXJuXCJGXCI7aWYoIXQpcmV0dXJuXCJFXCI7bChlKX1yZXR1cm4gZVtuXS5pfSxkPWZ1bmN0aW9uKGUsdCl7aWYoIWkoZSxuKSl7aWYoIXUoZSkpcmV0dXJuITA7aWYoIXQpcmV0dXJuITE7bChlKX1yZXR1cm4gZVtuXS53fSxwPWZ1bmN0aW9uKGUpe3JldHVybiBjJiZoLk5FRUQmJnUoZSkmJiFpKGUsbikmJmwoZSksZX0saD10LmV4cG9ydHM9e0tFWTpuLE5FRUQ6ITEsZmFzdEtleTpmLGdldFdlYWs6ZCxvbkZyZWV6ZTpwfX0se1wiLi9fZmFpbHNcIjozOCxcIi4vX2hhc1wiOjQwLFwiLi9faXMtb2JqZWN0XCI6NDYsXCIuL19vYmplY3QtZHBcIjo1NSxcIi4vX3VpZFwiOjc5fV0sNTQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fYW4tb2JqZWN0XCIpLG89ZShcIi4vX29iamVjdC1kcHNcIiksaT1lKFwiLi9fZW51bS1idWcta2V5c1wiKSxhPWUoXCIuL19zaGFyZWQta2V5XCIpKFwiSUVfUFJPVE9cIikscz1mdW5jdGlvbigpe30sdT1cInByb3RvdHlwZVwiLGM9ZnVuY3Rpb24oKXt2YXIgdCxyPWUoXCIuL19kb20tY3JlYXRlXCIpKFwiaWZyYW1lXCIpLG49aS5sZW5ndGgsbz1cIjxcIixhPVwiPlwiO2ZvcihyLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsZShcIi4vX2h0bWxcIikuYXBwZW5kQ2hpbGQociksci5zcmM9XCJqYXZhc2NyaXB0OlwiLHQ9ci5jb250ZW50V2luZG93LmRvY3VtZW50LHQub3BlbigpLHQud3JpdGUobytcInNjcmlwdFwiK2ErXCJkb2N1bWVudC5GPU9iamVjdFwiK28rXCIvc2NyaXB0XCIrYSksdC5jbG9zZSgpLGM9dC5GO24tLTspZGVsZXRlIGNbdV1baVtuXV07cmV0dXJuIGMoKX07dC5leHBvcnRzPU9iamVjdC5jcmVhdGV8fGZ1bmN0aW9uKGUsdCl7dmFyIHI7cmV0dXJuIG51bGwhPT1lPyhzW3VdPW4oZSkscj1uZXcgcyxzW3VdPW51bGwsclthXT1lKTpyPWMoKSx2b2lkIDA9PT10P3I6byhyLHQpfX0se1wiLi9fYW4tb2JqZWN0XCI6MjcsXCIuL19kb20tY3JlYXRlXCI6MzQsXCIuL19lbnVtLWJ1Zy1rZXlzXCI6MzUsXCIuL19odG1sXCI6NDIsXCIuL19vYmplY3QtZHBzXCI6NTYsXCIuL19zaGFyZWQta2V5XCI6NzB9XSw1NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19hbi1vYmplY3RcIiksbz1lKFwiLi9faWU4LWRvbS1kZWZpbmVcIiksaT1lKFwiLi9fdG8tcHJpbWl0aXZlXCIpLGE9T2JqZWN0LmRlZmluZVByb3BlcnR5O3IuZj1lKFwiLi9fZGVzY3JpcHRvcnNcIik/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHQ9aSh0LCEwKSxuKHIpLG8pdHJ5e3JldHVybiBhKGUsdCxyKX1jYXRjaChzKXt9aWYoXCJnZXRcImluIHJ8fFwic2V0XCJpbiByKXRocm93IFR5cGVFcnJvcihcIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIVwiKTtyZXR1cm5cInZhbHVlXCJpbiByJiYoZVt0XT1yLnZhbHVlKSxlfX0se1wiLi9fYW4tb2JqZWN0XCI6MjcsXCIuL19kZXNjcmlwdG9yc1wiOjMzLFwiLi9faWU4LWRvbS1kZWZpbmVcIjo0MyxcIi4vX3RvLXByaW1pdGl2ZVwiOjc4fV0sNTY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWRwXCIpLG89ZShcIi4vX2FuLW9iamVjdFwiKSxpPWUoXCIuL19vYmplY3Qta2V5c1wiKTt0LmV4cG9ydHM9ZShcIi4vX2Rlc2NyaXB0b3JzXCIpP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzOmZ1bmN0aW9uKGUsdCl7byhlKTtmb3IodmFyIHIsYT1pKHQpLHM9YS5sZW5ndGgsdT0wO3M+dTspbi5mKGUscj1hW3UrK10sdFtyXSk7cmV0dXJuIGV9fSx7XCIuL19hbi1vYmplY3RcIjoyNyxcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19vYmplY3QtZHBcIjo1NSxcIi4vX29iamVjdC1rZXlzXCI6NjN9XSw1NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3QtcGllXCIpLG89ZShcIi4vX3Byb3BlcnR5LWRlc2NcIiksaT1lKFwiLi9fdG8taW9iamVjdFwiKSxhPWUoXCIuL190by1wcmltaXRpdmVcIikscz1lKFwiLi9faGFzXCIpLHU9ZShcIi4vX2llOC1kb20tZGVmaW5lXCIpLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtyLmY9ZShcIi4vX2Rlc2NyaXB0b3JzXCIpP2M6ZnVuY3Rpb24oZSx0KXtpZihlPWkoZSksdD1hKHQsITApLHUpdHJ5e3JldHVybiBjKGUsdCl9Y2F0Y2gocil7fWlmKHMoZSx0KSlyZXR1cm4gbyghbi5mLmNhbGwoZSx0KSxlW3RdKX19LHtcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19oYXNcIjo0MCxcIi4vX2llOC1kb20tZGVmaW5lXCI6NDMsXCIuL19vYmplY3QtcGllXCI6NjQsXCIuL19wcm9wZXJ0eS1kZXNjXCI6NjYsXCIuL190by1pb2JqZWN0XCI6NzUsXCIuL190by1wcmltaXRpdmVcIjo3OH1dLDU4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLWlvYmplY3RcIiksbz1lKFwiLi9fb2JqZWN0LWdvcG5cIikuZixpPXt9LnRvU3RyaW5nLGE9XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdyYmd2luZG93JiZPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcz9PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpOltdLHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiBvKGUpfWNhdGNoKHQpe3JldHVybiBhLnNsaWNlKCl9fTt0LmV4cG9ydHMuZj1mdW5jdGlvbihlKXtyZXR1cm4gYSYmXCJbb2JqZWN0IFdpbmRvd11cIj09aS5jYWxsKGUpP3MoZSk6byhuKGUpKX19LHtcIi4vX29iamVjdC1nb3BuXCI6NTksXCIuL190by1pb2JqZWN0XCI6NzV9XSw1OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbFwiKSxvPWUoXCIuL19lbnVtLWJ1Zy1rZXlzXCIpLmNvbmNhdChcImxlbmd0aFwiLFwicHJvdG90eXBlXCIpO3IuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc3x8ZnVuY3Rpb24oZSl7cmV0dXJuIG4oZSxvKX19LHtcIi4vX2VudW0tYnVnLWtleXNcIjozNSxcIi4vX29iamVjdC1rZXlzLWludGVybmFsXCI6NjJ9XSw2MDpbZnVuY3Rpb24oZSx0LHIpe3IuZj1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzfSx7fV0sNjE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faGFzXCIpLG89ZShcIi4vX3RvLW9iamVjdFwiKSxpPWUoXCIuL19zaGFyZWQta2V5XCIpKFwiSUVfUFJPVE9cIiksYT1PYmplY3QucHJvdG90eXBlO3QuZXhwb3J0cz1PYmplY3QuZ2V0UHJvdG90eXBlT2Z8fGZ1bmN0aW9uKGUpe3JldHVybiBlPW8oZSksbihlLGkpP2VbaV06XCJmdW5jdGlvblwiPT10eXBlb2YgZS5jb25zdHJ1Y3RvciYmZSBpbnN0YW5jZW9mIGUuY29uc3RydWN0b3I/ZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU6ZSBpbnN0YW5jZW9mIE9iamVjdD9hOm51bGx9fSx7XCIuL19oYXNcIjo0MCxcIi4vX3NoYXJlZC1rZXlcIjo3MCxcIi4vX3RvLW9iamVjdFwiOjc3fV0sNjI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faGFzXCIpLG89ZShcIi4vX3RvLWlvYmplY3RcIiksaT1lKFwiLi9fYXJyYXktaW5jbHVkZXNcIikoITEpLGE9ZShcIi4vX3NoYXJlZC1rZXlcIikoXCJJRV9QUk9UT1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcixzPW8oZSksdT0wLGM9W107Zm9yKHIgaW4gcylyIT1hJiZuKHMscikmJmMucHVzaChyKTtmb3IoO3QubGVuZ3RoPnU7KW4ocyxyPXRbdSsrXSkmJih+aShjLHIpfHxjLnB1c2gocikpO3JldHVybiBjfX0se1wiLi9fYXJyYXktaW5jbHVkZXNcIjoyOCxcIi4vX2hhc1wiOjQwLFwiLi9fc2hhcmVkLWtleVwiOjcwLFwiLi9fdG8taW9iamVjdFwiOjc1fV0sNjM6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWxcIiksbz1lKFwiLi9fZW51bS1idWcta2V5c1wiKTt0LmV4cG9ydHM9T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsbyl9fSx7XCIuL19lbnVtLWJ1Zy1rZXlzXCI6MzUsXCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbFwiOjYyfV0sNjQ6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9e30ucHJvcGVydHlJc0VudW1lcmFibGV9LHt9XSw2NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19leHBvcnRcIiksbz1lKFwiLi9fY29yZVwiKSxpPWUoXCIuL19mYWlsc1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXt2YXIgcj0oby5PYmplY3R8fHt9KVtlXXx8T2JqZWN0W2VdLGE9e307YVtlXT10KHIpLG4obi5TK24uRippKGZ1bmN0aW9uKCl7cigxKX0pLFwiT2JqZWN0XCIsYSl9fSx7XCIuL19jb3JlXCI6MzAsXCIuL19leHBvcnRcIjozNyxcIi4vX2ZhaWxzXCI6Mzh9XSw2NjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybntlbnVtZXJhYmxlOiEoMSZlKSxjb25maWd1cmFibGU6ISgyJmUpLHdyaXRhYmxlOiEoNCZlKSx2YWx1ZTp0fX19LHt9XSw2NzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKFwiLi9faGlkZVwiKX0se1wiLi9faGlkZVwiOjQxfV0sNjg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faXMtb2JqZWN0XCIpLG89ZShcIi4vX2FuLW9iamVjdFwiKSxpPWZ1bmN0aW9uKGUsdCl7aWYobyhlKSwhbih0KSYmbnVsbCE9PXQpdGhyb3cgVHlwZUVycm9yKHQrXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpfTt0LmV4cG9ydHM9e3NldDpPYmplY3Quc2V0UHJvdG90eXBlT2Z8fChcIl9fcHJvdG9fX1wiaW57fT9mdW5jdGlvbih0LHIsbil7dHJ5e249ZShcIi4vX2N0eFwiKShGdW5jdGlvbi5jYWxsLGUoXCIuL19vYmplY3QtZ29wZFwiKS5mKE9iamVjdC5wcm90b3R5cGUsXCJfX3Byb3RvX19cIikuc2V0LDIpLG4odCxbXSkscj0hKHQgaW5zdGFuY2VvZiBBcnJheSl9Y2F0Y2gobyl7cj0hMH1yZXR1cm4gZnVuY3Rpb24oZSx0KXtyZXR1cm4gaShlLHQpLHI/ZS5fX3Byb3RvX189dDpuKGUsdCksZX19KHt9LCExKTp2b2lkIDApLGNoZWNrOml9fSx7XCIuL19hbi1vYmplY3RcIjoyNyxcIi4vX2N0eFwiOjMxLFwiLi9faXMtb2JqZWN0XCI6NDYsXCIuL19vYmplY3QtZ29wZFwiOjU3fV0sNjk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWRwXCIpLmYsbz1lKFwiLi9faGFzXCIpLGk9ZShcIi4vX3drc1wiKShcInRvU3RyaW5nVGFnXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7ZSYmIW8oZT1yP2U6ZS5wcm90b3R5cGUsaSkmJm4oZSxpLHtjb25maWd1cmFibGU6ITAsdmFsdWU6dH0pfX0se1wiLi9faGFzXCI6NDAsXCIuL19vYmplY3QtZHBcIjo1NSxcIi4vX3drc1wiOjgyfV0sNzA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fc2hhcmVkXCIpKFwia2V5c1wiKSxvPWUoXCIuL191aWRcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1vKGUpKX19LHtcIi4vX3NoYXJlZFwiOjcxLFwiLi9fdWlkXCI6Nzl9XSw3MTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19nbG9iYWxcIiksbz1cIl9fY29yZS1qc19zaGFyZWRfX1wiLGk9bltvXXx8KG5bb109e30pO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaVtlXXx8KGlbZV09e30pfX0se1wiLi9fZ2xvYmFsXCI6Mzl9XSw3MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1pbnRlZ2VyXCIpLG89ZShcIi4vX2RlZmluZWRcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIpe3ZhciBpLGEscz1TdHJpbmcobyh0KSksdT1uKHIpLGM9cy5sZW5ndGg7cmV0dXJuIHU8MHx8dT49Yz9lP1wiXCI6dm9pZCAwOihpPXMuY2hhckNvZGVBdCh1KSxpPDU1Mjk2fHxpPjU2MzE5fHx1KzE9PT1jfHwoYT1zLmNoYXJDb2RlQXQodSsxKSk8NTYzMjB8fGE+NTczNDM/ZT9zLmNoYXJBdCh1KTppOmU/cy5zbGljZSh1LHUrMik6KGktNTUyOTY8PDEwKSsoYS01NjMyMCkrNjU1MzYpfX19LHtcIi4vX2RlZmluZWRcIjozMixcIi4vX3RvLWludGVnZXJcIjo3NH1dLDczOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLWludGVnZXJcIiksbz1NYXRoLm1heCxpPU1hdGgubWluO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe3JldHVybiBlPW4oZSksZTwwP28oZSt0LDApOmkoZSx0KX19LHtcIi4vX3RvLWludGVnZXJcIjo3NH1dLDc0OltmdW5jdGlvbihlLHQscil7dmFyIG49TWF0aC5jZWlsLG89TWF0aC5mbG9vcjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlzTmFOKGU9K2UpPzA6KGU+MD9vOm4pKGUpfX0se31dLDc1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2lvYmplY3RcIiksbz1lKFwiLi9fZGVmaW5lZFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIG4obyhlKSl9fSx7XCIuL19kZWZpbmVkXCI6MzIsXCIuL19pb2JqZWN0XCI6NDR9XSw3NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1pbnRlZ2VyXCIpLG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBlPjA/byhuKGUpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSx7XCIuL190by1pbnRlZ2VyXCI6NzR9XSw3NzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19kZWZpbmVkXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0KG4oZSkpfX0se1wiLi9fZGVmaW5lZFwiOjMyfV0sNzg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faXMtb2JqZWN0XCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlLHQpe2lmKCFuKGUpKXJldHVybiBlO3ZhciByLG87aWYodCYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mKHI9ZS52YWx1ZU9mKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO2lmKCF0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZihyPWUudG9TdHJpbmcpJiYhbihvPXIuY2FsbChlKSkpcmV0dXJuIG87dGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpfX0se1wiLi9faXMtb2JqZWN0XCI6NDZ9XSw3OTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPTAsbz1NYXRoLnJhbmRvbSgpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm5cIlN5bWJvbChcIi5jb25jYXQodm9pZCAwPT09ZT9cIlwiOmUsXCIpX1wiLCgrK24rbykudG9TdHJpbmcoMzYpKX19LHt9XSw4MDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19nbG9iYWxcIiksbz1lKFwiLi9fY29yZVwiKSxpPWUoXCIuL19saWJyYXJ5XCIpLGE9ZShcIi4vX3drcy1leHRcIikscz1lKFwiLi9fb2JqZWN0LWRwXCIpLmY7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3ZhciB0PW8uU3ltYm9sfHwoby5TeW1ib2w9aT97fTpuLlN5bWJvbHx8e30pO1wiX1wiPT1lLmNoYXJBdCgwKXx8ZSBpbiB0fHxzKHQsZSx7dmFsdWU6YS5mKGUpfSl9fSx7XCIuL19jb3JlXCI6MzAsXCIuL19nbG9iYWxcIjozOSxcIi4vX2xpYnJhcnlcIjo1MixcIi4vX29iamVjdC1kcFwiOjU1LFwiLi9fd2tzLWV4dFwiOjgxfV0sODE6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9ZShcIi4vX3drc1wiKX0se1wiLi9fd2tzXCI6ODJ9XSw4MjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19zaGFyZWRcIikoXCJ3a3NcIiksbz1lKFwiLi9fdWlkXCIpLGk9ZShcIi4vX2dsb2JhbFwiKS5TeW1ib2wsYT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBpLHM9dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuW2VdfHwobltlXT1hJiZpW2VdfHwoYT9pOm8pKFwiU3ltYm9sLlwiK2UpKX07cy5zdG9yZT1ufSx7XCIuL19nbG9iYWxcIjozOSxcIi4vX3NoYXJlZFwiOjcxLFwiLi9fdWlkXCI6Nzl9XSw4MzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL19hZGQtdG8tdW5zY29wYWJsZXNcIiksbz1lKFwiLi9faXRlci1zdGVwXCIpLGk9ZShcIi4vX2l0ZXJhdG9yc1wiKSxhPWUoXCIuL190by1pb2JqZWN0XCIpO3QuZXhwb3J0cz1lKFwiLi9faXRlci1kZWZpbmVcIikoQXJyYXksXCJBcnJheVwiLGZ1bmN0aW9uKGUsdCl7dGhpcy5fdD1hKGUpLHRoaXMuX2k9MCx0aGlzLl9rPXR9LGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fdCx0PXRoaXMuX2sscj10aGlzLl9pKys7cmV0dXJuIWV8fHI+PWUubGVuZ3RoPyh0aGlzLl90PXZvaWQgMCxvKDEpKTpcImtleXNcIj09dD9vKDAscik6XCJ2YWx1ZXNcIj09dD9vKDAsZVtyXSk6bygwLFtyLGVbcl1dKX0sXCJ2YWx1ZXNcIiksaS5Bcmd1bWVudHM9aS5BcnJheSxuKFwia2V5c1wiKSxuKFwidmFsdWVzXCIpLG4oXCJlbnRyaWVzXCIpfSx7XCIuL19hZGQtdG8tdW5zY29wYWJsZXNcIjoyNixcIi4vX2l0ZXItZGVmaW5lXCI6NDgsXCIuL19pdGVyLXN0ZXBcIjo0OSxcIi4vX2l0ZXJhdG9yc1wiOjUwLFwiLi9fdG8taW9iamVjdFwiOjc1fV0sODQ6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZXhwb3J0XCIpO24obi5TLFwiT2JqZWN0XCIse2NyZWF0ZTplKFwiLi9fb2JqZWN0LWNyZWF0ZVwiKX0pfSx7XCIuL19leHBvcnRcIjozNyxcIi4vX29iamVjdC1jcmVhdGVcIjo1NH1dLDg1OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2V4cG9ydFwiKTtuKG4uUytuLkYqIWUoXCIuL19kZXNjcmlwdG9yc1wiKSxcIk9iamVjdFwiLHtkZWZpbmVQcm9wZXJ0eTplKFwiLi9fb2JqZWN0LWRwXCIpLmZ9KX0se1wiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX2V4cG9ydFwiOjM3LFwiLi9fb2JqZWN0LWRwXCI6NTV9XSw4NjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19pcy1vYmplY3RcIiksbz1lKFwiLi9fbWV0YVwiKS5vbkZyZWV6ZTtlKFwiLi9fb2JqZWN0LXNhcFwiKShcImZyZWV6ZVwiLGZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gZSYmbih0KT9lKG8odCkpOnR9fSl9LHtcIi4vX2lzLW9iamVjdFwiOjQ2LFwiLi9fbWV0YVwiOjUzLFwiLi9fb2JqZWN0LXNhcFwiOjY1fV0sODc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdG8tb2JqZWN0XCIpLG89ZShcIi4vX29iamVjdC1ncG9cIik7ZShcIi4vX29iamVjdC1zYXBcIikoXCJnZXRQcm90b3R5cGVPZlwiLGZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBvKG4oZSkpfX0pfSx7XCIuL19vYmplY3QtZ3BvXCI6NjEsXCIuL19vYmplY3Qtc2FwXCI6NjUsXCIuL190by1vYmplY3RcIjo3N31dLDg4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLW9iamVjdFwiKSxvPWUoXCIuL19vYmplY3Qta2V5c1wiKTtlKFwiLi9fb2JqZWN0LXNhcFwiKShcImtleXNcIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbyhuKGUpKX19KX0se1wiLi9fb2JqZWN0LWtleXNcIjo2MyxcIi4vX29iamVjdC1zYXBcIjo2NSxcIi4vX3RvLW9iamVjdFwiOjc3fV0sODk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZXhwb3J0XCIpO24obi5TLFwiT2JqZWN0XCIse3NldFByb3RvdHlwZU9mOmUoXCIuL19zZXQtcHJvdG9cIikuc2V0fSl9LHtcIi4vX2V4cG9ydFwiOjM3LFwiLi9fc2V0LXByb3RvXCI6Njh9XSw5MDpbZnVuY3Rpb24oZSx0LHIpe30se31dLDkxOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vX3N0cmluZy1hdFwiKSghMCk7ZShcIi4vX2l0ZXItZGVmaW5lXCIpKFN0cmluZyxcIlN0cmluZ1wiLGZ1bmN0aW9uKGUpe3RoaXMuX3Q9U3RyaW5nKGUpLHRoaXMuX2k9MH0sZnVuY3Rpb24oKXt2YXIgZSx0PXRoaXMuX3Qscj10aGlzLl9pO3JldHVybiByPj10Lmxlbmd0aD97dmFsdWU6dm9pZCAwLGRvbmU6ITB9OihlPW4odCxyKSx0aGlzLl9pKz1lLmxlbmd0aCx7dmFsdWU6ZSxkb25lOiExfSl9KX0se1wiLi9faXRlci1kZWZpbmVcIjo0OCxcIi4vX3N0cmluZy1hdFwiOjcyfV0sOTI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9fZ2xvYmFsXCIpLG89ZShcIi4vX2hhc1wiKSxpPWUoXCIuL19kZXNjcmlwdG9yc1wiKSxhPWUoXCIuL19leHBvcnRcIikscz1lKFwiLi9fcmVkZWZpbmVcIiksdT1lKFwiLi9fbWV0YVwiKS5LRVksYz1lKFwiLi9fZmFpbHNcIiksbD1lKFwiLi9fc2hhcmVkXCIpLGY9ZShcIi4vX3NldC10by1zdHJpbmctdGFnXCIpLGQ9ZShcIi4vX3VpZFwiKSxwPWUoXCIuL193a3NcIiksaD1lKFwiLi9fd2tzLWV4dFwiKSx5PWUoXCIuL193a3MtZGVmaW5lXCIpLG09ZShcIi4vX2tleW9mXCIpLHY9ZShcIi4vX2VudW0ta2V5c1wiKSxfPWUoXCIuL19pcy1hcnJheVwiKSxiPWUoXCIuL19hbi1vYmplY3RcIiksZz1lKFwiLi9fdG8taW9iamVjdFwiKSxFPWUoXCIuL190by1wcmltaXRpdmVcIiksaj1lKFwiLi9fcHJvcGVydHktZGVzY1wiKSx3PWUoXCIuL19vYmplY3QtY3JlYXRlXCIpLE89ZShcIi4vX29iamVjdC1nb3BuLWV4dFwiKSxNPWUoXCIuL19vYmplY3QtZ29wZFwiKSx4PWUoXCIuL19vYmplY3QtZHBcIiksUD1lKFwiLi9fb2JqZWN0LWtleXNcIiksaz1NLmYsUj14LmYsUz1PLmYsVD1uLlN5bWJvbCxBPW4uSlNPTixOPUEmJkEuc3RyaW5naWZ5LEk9XCJwcm90b3R5cGVcIixVPXAoXCJfaGlkZGVuXCIpLEM9cChcInRvUHJpbWl0aXZlXCIpLEw9e30ucHJvcGVydHlJc0VudW1lcmFibGUsRj1sKFwic3ltYm9sLXJlZ2lzdHJ5XCIpLEI9bChcInN5bWJvbHNcIiksRD1sKFwib3Atc3ltYm9sc1wiKSxHPU9iamVjdFtJXSxLPVwiZnVuY3Rpb25cIj09dHlwZW9mIFQsWT1uLlFPYmplY3QscT0hWXx8IVlbSV18fCFZW0ldLmZpbmRDaGlsZCx6PWkmJmMoZnVuY3Rpb24oKXtyZXR1cm4gNyE9dyhSKHt9LFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gUih0aGlzLFwiYVwiLHt2YWx1ZTo3fSkuYX19KSkuYX0pP2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1rKEcsdCk7biYmZGVsZXRlIEdbdF0sUihlLHQsciksbiYmZSE9PUcmJlIoRyx0LG4pfTpSLEg9ZnVuY3Rpb24oZSl7dmFyIHQ9QltlXT13KFRbSV0pO3JldHVybiB0Ll9rPWUsdH0sVz1LJiZcInN5bWJvbFwiPT10eXBlb2YgVC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm5cInN5bWJvbFwiPT10eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBUfSxKPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gZT09PUcmJkooRCx0LHIpLGIoZSksdD1FKHQsITApLGIociksbyhCLHQpPyhyLmVudW1lcmFibGU/KG8oZSxVKSYmZVtVXVt0XSYmKGVbVV1bdF09ITEpLHI9dyhyLHtlbnVtZXJhYmxlOmooMCwhMSl9KSk6KG8oZSxVKXx8UihlLFUsaigxLHt9KSksZVtVXVt0XT0hMCkseihlLHQscikpOlIoZSx0LHIpfSxWPWZ1bmN0aW9uKGUsdCl7YihlKTtmb3IodmFyIHIsbj12KHQ9Zyh0KSksbz0wLGk9bi5sZW5ndGg7aT5vOylKKGUscj1uW28rK10sdFtyXSk7cmV0dXJuIGV9LCQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dD93KGUpOlYodyhlKSx0KX0sWD1mdW5jdGlvbihlKXt2YXIgdD1MLmNhbGwodGhpcyxlPUUoZSwhMCkpO3JldHVybiEodGhpcz09PUcmJm8oQixlKSYmIW8oRCxlKSkmJighKHR8fCFvKHRoaXMsZSl8fCFvKEIsZSl8fG8odGhpcyxVKSYmdGhpc1tVXVtlXSl8fHQpfSxRPWZ1bmN0aW9uKGUsdCl7aWYoZT1nKGUpLHQ9RSh0LCEwKSxlIT09R3x8IW8oQix0KXx8byhELHQpKXt2YXIgcj1rKGUsdCk7cmV0dXJuIXJ8fCFvKEIsdCl8fG8oZSxVKSYmZVtVXVt0XXx8KHIuZW51bWVyYWJsZT0hMCkscn19LFo9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9UyhnKGUpKSxuPVtdLGk9MDtyLmxlbmd0aD5pOylvKEIsdD1yW2krK10pfHx0PT1VfHx0PT11fHxuLnB1c2godCk7cmV0dXJuIG59LGVlPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPWU9PT1HLG49UyhyP0Q6ZyhlKSksaT1bXSxhPTA7bi5sZW5ndGg+YTspIW8oQix0PW5bYSsrXSl8fHImJiFvKEcsdCl8fGkucHVzaChCW3RdKTtyZXR1cm4gaX07S3x8KFQ9ZnVuY3Rpb24oKXtpZih0aGlzIGluc3RhbmNlb2YgVCl0aHJvdyBUeXBlRXJyb3IoXCJTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhXCIpO3ZhciBlPWQoYXJndW1lbnRzLmxlbmd0aD4wP2FyZ3VtZW50c1swXTp2b2lkIDApLHQ9ZnVuY3Rpb24ocil7dGhpcz09PUcmJnQuY2FsbChELHIpLG8odGhpcyxVKSYmbyh0aGlzW1VdLGUpJiYodGhpc1tVXVtlXT0hMSkseih0aGlzLGUsaigxLHIpKX07cmV0dXJuIGkmJnEmJnooRyxlLHtjb25maWd1cmFibGU6ITAsc2V0OnR9KSxIKGUpfSxzKFRbSV0sXCJ0b1N0cmluZ1wiLGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2t9KSxNLmY9USx4LmY9SixlKFwiLi9fb2JqZWN0LWdvcG5cIikuZj1PLmY9WixlKFwiLi9fb2JqZWN0LXBpZVwiKS5mPVgsZShcIi4vX29iamVjdC1nb3BzXCIpLmY9ZWUsaSYmIWUoXCIuL19saWJyYXJ5XCIpJiZzKEcsXCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFgsITApLGguZj1mdW5jdGlvbihlKXtyZXR1cm4gSChwKGUpKX0pLGEoYS5HK2EuVythLkYqIUsse1N5bWJvbDpUfSk7Zm9yKHZhciB0ZT1cImhhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzXCIuc3BsaXQoXCIsXCIpLHJlPTA7dGUubGVuZ3RoPnJlOylwKHRlW3JlKytdKTtmb3IodmFyIHRlPVAocC5zdG9yZSkscmU9MDt0ZS5sZW5ndGg+cmU7KXkodGVbcmUrK10pO2EoYS5TK2EuRiohSyxcIlN5bWJvbFwiLHtcImZvclwiOmZ1bmN0aW9uKGUpe3JldHVybiBvKEYsZSs9XCJcIik/RltlXTpGW2VdPVQoZSl9LGtleUZvcjpmdW5jdGlvbihlKXtpZihXKGUpKXJldHVybiBtKEYsZSk7dGhyb3cgVHlwZUVycm9yKGUrXCIgaXMgbm90IGEgc3ltYm9sIVwiKX0sdXNlU2V0dGVyOmZ1bmN0aW9uKCl7cT0hMH0sdXNlU2ltcGxlOmZ1bmN0aW9uKCl7cT0hMX19KSxhKGEuUythLkYqIUssXCJPYmplY3RcIix7Y3JlYXRlOiQsZGVmaW5lUHJvcGVydHk6SixkZWZpbmVQcm9wZXJ0aWVzOlYsZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOlEsZ2V0T3duUHJvcGVydHlOYW1lczpaLGdldE93blByb3BlcnR5U3ltYm9sczplZX0pLEEmJmEoYS5TK2EuRiooIUt8fGMoZnVuY3Rpb24oKXt2YXIgZT1UKCk7cmV0dXJuXCJbbnVsbF1cIiE9TihbZV0pfHxcInt9XCIhPU4oe2E6ZX0pfHxcInt9XCIhPU4oT2JqZWN0KGUpKX0pKSxcIkpTT05cIix7c3RyaW5naWZ5OmZ1bmN0aW9uKGUpe2lmKHZvaWQgMCE9PWUmJiFXKGUpKXtmb3IodmFyIHQscixuPVtlXSxvPTE7YXJndW1lbnRzLmxlbmd0aD5vOyluLnB1c2goYXJndW1lbnRzW28rK10pO3JldHVybiB0PW5bMV0sXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmKHI9dCksIXImJl8odCl8fCh0PWZ1bmN0aW9uKGUsdCl7aWYociYmKHQ9ci5jYWxsKHRoaXMsZSx0KSksIVcodCkpcmV0dXJuIHR9KSxuWzFdPXQsTi5hcHBseShBLG4pfX19KSxUW0ldW0NdfHxlKFwiLi9faGlkZVwiKShUW0ldLEMsVFtJXS52YWx1ZU9mKSxmKFQsXCJTeW1ib2xcIiksZihNYXRoLFwiTWF0aFwiLCEwKSxmKG4uSlNPTixcIkpTT05cIiwhMCl9LHtcIi4vX2FuLW9iamVjdFwiOjI3LFwiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX2VudW0ta2V5c1wiOjM2LFwiLi9fZXhwb3J0XCI6MzcsXCIuL19mYWlsc1wiOjM4LFwiLi9fZ2xvYmFsXCI6MzksXCIuL19oYXNcIjo0MCxcIi4vX2hpZGVcIjo0MSxcIi4vX2lzLWFycmF5XCI6NDUsXCIuL19rZXlvZlwiOjUxLFwiLi9fbGlicmFyeVwiOjUyLFwiLi9fbWV0YVwiOjUzLFwiLi9fb2JqZWN0LWNyZWF0ZVwiOjU0LFwiLi9fb2JqZWN0LWRwXCI6NTUsXCIuL19vYmplY3QtZ29wZFwiOjU3LFwiLi9fb2JqZWN0LWdvcG5cIjo1OSxcIi4vX29iamVjdC1nb3BuLWV4dFwiOjU4LFwiLi9fb2JqZWN0LWdvcHNcIjo2MCxcIi4vX29iamVjdC1rZXlzXCI6NjMsXCIuL19vYmplY3QtcGllXCI6NjQsXCIuL19wcm9wZXJ0eS1kZXNjXCI6NjYsXCIuL19yZWRlZmluZVwiOjY3LFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIjo2OSxcIi4vX3NoYXJlZFwiOjcxLFwiLi9fdG8taW9iamVjdFwiOjc1LFwiLi9fdG8tcHJpbWl0aXZlXCI6NzgsXCIuL191aWRcIjo3OSxcIi4vX3drc1wiOjgyLFwiLi9fd2tzLWRlZmluZVwiOjgwLFwiLi9fd2tzLWV4dFwiOjgxfV0sOTM6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi9fd2tzLWRlZmluZVwiKShcImFzeW5jSXRlcmF0b3JcIil9LHtcIi4vX3drcy1kZWZpbmVcIjo4MH1dLDk0OltmdW5jdGlvbihlLHQscil7ZShcIi4vX3drcy1kZWZpbmVcIikoXCJvYnNlcnZhYmxlXCIpfSx7XCIuL193a3MtZGVmaW5lXCI6ODB9XSw5NTpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuL2VzNi5hcnJheS5pdGVyYXRvclwiKTtmb3IodmFyIG49ZShcIi4vX2dsb2JhbFwiKSxvPWUoXCIuL19oaWRlXCIpLGk9ZShcIi4vX2l0ZXJhdG9yc1wiKSxhPWUoXCIuL193a3NcIikoXCJ0b1N0cmluZ1RhZ1wiKSxzPVtcIk5vZGVMaXN0XCIsXCJET01Ub2tlbkxpc3RcIixcIk1lZGlhTGlzdFwiLFwiU3R5bGVTaGVldExpc3RcIixcIkNTU1J1bGVMaXN0XCJdLHU9MDt1PDU7dSsrKXt2YXIgYz1zW3VdLGw9bltjXSxmPWwmJmwucHJvdG90eXBlO2YmJiFmW2FdJiZvKGYsYSxjKSxpW2NdPWkuQXJyYXl9fSx7XCIuL19nbG9iYWxcIjozOSxcIi4vX2hpZGVcIjo0MSxcIi4vX2l0ZXJhdG9yc1wiOjUwLFwiLi9fd2tzXCI6ODIsXCIuL2VzNi5hcnJheS5pdGVyYXRvclwiOjgzfV0sOTY6W2Z1bmN0aW9uKGUsdCxyKXtmdW5jdGlvbiBuKCl7dGhyb3cgbmV3IEVycm9yKFwic2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBvKCl7dGhyb3cgbmV3IEVycm9yKFwiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkXCIpfWZ1bmN0aW9uIGkoZSl7aWYoZj09PXNldFRpbWVvdXQpcmV0dXJuIHNldFRpbWVvdXQoZSwwKTtpZigoZj09PW58fCFmKSYmc2V0VGltZW91dClyZXR1cm4gZj1zZXRUaW1lb3V0LHNldFRpbWVvdXQoZSwwKTt0cnl7cmV0dXJuIGYoZSwwKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGYuY2FsbChudWxsLGUsMCl9Y2F0Y2godCl7cmV0dXJuIGYuY2FsbCh0aGlzLGUsMCl9fX1mdW5jdGlvbiBhKGUpe2lmKGQ9PT1jbGVhclRpbWVvdXQpcmV0dXJuIGNsZWFyVGltZW91dChlKTtpZigoZD09PW98fCFkKSYmY2xlYXJUaW1lb3V0KXJldHVybiBkPWNsZWFyVGltZW91dCxjbGVhclRpbWVvdXQoZSk7dHJ5e3JldHVybiBkKGUpfWNhdGNoKHQpe3RyeXtyZXR1cm4gZC5jYWxsKG51bGwsZSl9Y2F0Y2godCl7cmV0dXJuIGQuY2FsbCh0aGlzLGUpfX19ZnVuY3Rpb24gcygpe20mJmgmJihtPSExLGgubGVuZ3RoP3k9aC5jb25jYXQoeSk6dj0tMSx5Lmxlbmd0aCYmdSgpKX1mdW5jdGlvbiB1KCl7aWYoIW0pe3ZhciBlPWkocyk7bT0hMDtmb3IodmFyIHQ9eS5sZW5ndGg7dDspe2ZvcihoPXkseT1bXTsrK3Y8dDspaCYmaFt2XS5ydW4oKTt2PS0xLHQ9eS5sZW5ndGh9aD1udWxsLG09ITEsYShlKX19ZnVuY3Rpb24gYyhlLHQpe3RoaXMuZnVuPWUsdGhpcy5hcnJheT10fWZ1bmN0aW9uIGwoKXt9dmFyIGYsZCxwPXQuZXhwb3J0cz17fTshZnVuY3Rpb24oKXt0cnl7Zj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bn1jYXRjaChlKXtmPW59dHJ5e2Q9XCJmdW5jdGlvblwiPT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDpvfWNhdGNoKGUpe2Q9b319KCk7dmFyIGgseT1bXSxtPSExLHY9LTE7cC5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpZm9yKHZhciByPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0W3ItMV09YXJndW1lbnRzW3JdO3kucHVzaChuZXcgYyhlLHQpKSwxIT09eS5sZW5ndGh8fG18fGkodSl9LGMucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9LHAudGl0bGU9XCJicm93c2VyXCIscC5icm93c2VyPSEwLHAuZW52PXt9LHAuYXJndj1bXSxwLnZlcnNpb249XCJcIixwLnZlcnNpb25zPXt9LHAub249bCxwLmFkZExpc3RlbmVyPWwscC5vbmNlPWwscC5vZmY9bCxwLnJlbW92ZUxpc3RlbmVyPWwscC5yZW1vdmVBbGxMaXN0ZW5lcnM9bCxwLmVtaXQ9bCxwLmJpbmRpbmc9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWRcIil9LHAuY3dkPWZ1bmN0aW9uKCl7cmV0dXJuXCIvXCJ9LHAuY2hkaXI9ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKFwicHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkXCIpfSxwLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9fSx7fV0sOTc6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24ocil7dmFyIG49XCJvYmplY3RcIj09dHlwZW9mIHI/cjpcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsbz1uLnJlZ2VuZXJhdG9yUnVudGltZSYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobikuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKT49MCxpPW8mJm4ucmVnZW5lcmF0b3JSdW50aW1lO2lmKG4ucmVnZW5lcmF0b3JSdW50aW1lPXZvaWQgMCx0LmV4cG9ydHM9ZShcIi4vcnVudGltZVwiKSxvKW4ucmVnZW5lcmF0b3JSdW50aW1lPWk7ZWxzZSB0cnl7ZGVsZXRlIG4ucmVnZW5lcmF0b3JSdW50aW1lfWNhdGNoKGEpe24ucmVnZW5lcmF0b3JSdW50aW1lPXZvaWQgMH19KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHtcIi4vcnVudGltZVwiOjk4fV0sOTg6W2Z1bmN0aW9uKGUsdCxyKXsoZnVuY3Rpb24oZSxyKXshZnVuY3Rpb24ocil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlLHQscixuKXt2YXIgbz1PYmplY3QuY3JlYXRlKCh0fHxpKS5wcm90b3R5cGUpLGE9bmV3IGgobnx8W10pO3JldHVybiBvLl9pbnZva2U9ZihlLHIsYSksb31mdW5jdGlvbiBvKGUsdCxyKXt0cnl7cmV0dXJue3R5cGU6XCJub3JtYWxcIixhcmc6ZS5jYWxsKHQscil9fWNhdGNoKG4pe3JldHVybnt0eXBlOlwidGhyb3dcIixhcmc6bn19fWZ1bmN0aW9uIGkoKXt9ZnVuY3Rpb24gYSgpe31mdW5jdGlvbiBzKCl7fWZ1bmN0aW9uIHUoZSl7W1wibmV4dFwiLFwidGhyb3dcIixcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2ludm9rZSh0LGUpfX0pfWZ1bmN0aW9uIGMoZSl7dGhpcy5hcmc9ZX1mdW5jdGlvbiBsKHQpe2Z1bmN0aW9uIHIoZSxuLGksYSl7dmFyIHM9byh0W2VdLHQsbik7aWYoXCJ0aHJvd1wiIT09cy50eXBlKXt2YXIgdT1zLmFyZyxsPXUudmFsdWU7cmV0dXJuIGwgaW5zdGFuY2VvZiBjP1Byb21pc2UucmVzb2x2ZShsLmFyZykudGhlbihmdW5jdGlvbihlKXtyKFwibmV4dFwiLGUsaSxhKX0sZnVuY3Rpb24oZSl7cihcInRocm93XCIsZSxpLGEpfSk6UHJvbWlzZS5yZXNvbHZlKGwpLnRoZW4oZnVuY3Rpb24oZSl7dS52YWx1ZT1lLGkodSl9LGEpfWEocy5hcmcpfWZ1bmN0aW9uIG4oZSx0KXtmdW5jdGlvbiBuKCl7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4sbyl7cihlLHQsbixvKX0pfXJldHVybiBpPWk/aS50aGVuKG4sbik6bigpfVwib2JqZWN0XCI9PXR5cGVvZiBlJiZlLmRvbWFpbiYmKHI9ZS5kb21haW4uYmluZChyKSk7dmFyIGk7dGhpcy5faW52b2tlPW59ZnVuY3Rpb24gZihlLHQscil7dmFyIG49TztyZXR1cm4gZnVuY3Rpb24oaSxhKXtpZihuPT09eCl0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO2lmKG49PT1QKXtpZihcInRocm93XCI9PT1pKXRocm93IGE7cmV0dXJuIG0oKX1mb3IoOzspe3ZhciBzPXIuZGVsZWdhdGU7aWYocyl7aWYoXCJyZXR1cm5cIj09PWl8fFwidGhyb3dcIj09PWkmJnMuaXRlcmF0b3JbaV09PT12KXtyLmRlbGVnYXRlPW51bGw7dmFyIHU9cy5pdGVyYXRvcltcInJldHVyblwiXTtpZih1KXt2YXIgYz1vKHUscy5pdGVyYXRvcixhKTtpZihcInRocm93XCI9PT1jLnR5cGUpe2k9XCJ0aHJvd1wiLGE9Yy5hcmc7Y29udGludWV9fWlmKFwicmV0dXJuXCI9PT1pKWNvbnRpbnVlfXZhciBjPW8ocy5pdGVyYXRvcltpXSxzLml0ZXJhdG9yLGEpO2lmKFwidGhyb3dcIj09PWMudHlwZSl7ci5kZWxlZ2F0ZT1udWxsLGk9XCJ0aHJvd1wiLGE9Yy5hcmc7Y29udGludWV9aT1cIm5leHRcIixhPXY7dmFyIGw9Yy5hcmc7aWYoIWwuZG9uZSlyZXR1cm4gbj1NLGw7cltzLnJlc3VsdE5hbWVdPWwudmFsdWUsci5uZXh0PXMubmV4dExvYyxyLmRlbGVnYXRlPW51bGx9aWYoXCJuZXh0XCI9PT1pKXIuc2VudD1yLl9zZW50PWE7ZWxzZSBpZihcInRocm93XCI9PT1pKXtpZihuPT09Tyl0aHJvdyBuPVAsYTtyLmRpc3BhdGNoRXhjZXB0aW9uKGEpJiYoaT1cIm5leHRcIixhPXYpfWVsc2VcInJldHVyblwiPT09aSYmci5hYnJ1cHQoXCJyZXR1cm5cIixhKTtuPXg7dmFyIGM9byhlLHQscik7aWYoXCJub3JtYWxcIj09PWMudHlwZSl7bj1yLmRvbmU/UDpNO3ZhciBsPXt2YWx1ZTpjLmFyZyxkb25lOnIuZG9uZX07aWYoYy5hcmchPT1rKXJldHVybiBsO3IuZGVsZWdhdGUmJlwibmV4dFwiPT09aSYmKGE9dil9ZWxzZVwidGhyb3dcIj09PWMudHlwZSYmKG49UCxpPVwidGhyb3dcIixhPWMuYXJnKX19fWZ1bmN0aW9uIGQoZSl7dmFyIHQ9e3RyeUxvYzplWzBdfTsxIGluIGUmJih0LmNhdGNoTG9jPWVbMV0pLDIgaW4gZSYmKHQuZmluYWxseUxvYz1lWzJdLHQuYWZ0ZXJMb2M9ZVszXSksdGhpcy50cnlFbnRyaWVzLnB1c2godCl9ZnVuY3Rpb24gcChlKXt2YXIgdD1lLmNvbXBsZXRpb258fHt9O3QudHlwZT1cIm5vcm1hbFwiLGRlbGV0ZSB0LmFyZyxlLmNvbXBsZXRpb249dH1mdW5jdGlvbiBoKGUpe3RoaXMudHJ5RW50cmllcz1be3RyeUxvYzpcInJvb3RcIn1dLGUuZm9yRWFjaChkLHRoaXMpLHRoaXMucmVzZXQoITApfWZ1bmN0aW9uIHkoZSl7aWYoZSl7dmFyIHQ9ZVtnXTtpZih0KXJldHVybiB0LmNhbGwoZSk7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5uZXh0KXJldHVybiBlO2lmKCFpc05hTihlLmxlbmd0aCkpe3ZhciByPS0xLG49ZnVuY3Rpb24gbygpe2Zvcig7KytyPGUubGVuZ3RoOylpZihfLmNhbGwoZSxyKSlyZXR1cm4gby52YWx1ZT1lW3JdLG8uZG9uZT0hMSxvO3JldHVybiBvLnZhbHVlPXYsby5kb25lPSEwLG99O3JldHVybiBuLm5leHQ9bn19cmV0dXJue25leHQ6bX19ZnVuY3Rpb24gbSgpe3JldHVybnt2YWx1ZTp2LGRvbmU6ITB9fXZhciB2LF89T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxiPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbD9TeW1ib2w6e30sZz1iLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixFPWIudG9TdHJpbmdUYWd8fFwiQEB0b1N0cmluZ1RhZ1wiLGo9XCJvYmplY3RcIj09dHlwZW9mIHQsdz1yLnJlZ2VuZXJhdG9yUnVudGltZTtpZih3KXJldHVybiB2b2lkKGomJih0LmV4cG9ydHM9dykpO3c9ci5yZWdlbmVyYXRvclJ1bnRpbWU9aj90LmV4cG9ydHM6e30sdy53cmFwPW47dmFyIE89XCJzdXNwZW5kZWRTdGFydFwiLE09XCJzdXNwZW5kZWRZaWVsZFwiLHg9XCJleGVjdXRpbmdcIixQPVwiY29tcGxldGVkXCIsaz17fSxSPXMucHJvdG90eXBlPWkucHJvdG90eXBlO2EucHJvdG90eXBlPVIuY29uc3RydWN0b3I9cyxzLmNvbnN0cnVjdG9yPWEsc1tFXT1hLmRpc3BsYXlOYW1lPVwiR2VuZXJhdG9yRnVuY3Rpb25cIix3LmlzR2VuZXJhdG9yRnVuY3Rpb249ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZS5jb25zdHJ1Y3RvcjtyZXR1cm4hIXQmJih0PT09YXx8XCJHZW5lcmF0b3JGdW5jdGlvblwiPT09KHQuZGlzcGxheU5hbWV8fHQubmFtZSkpfSx3Lm1hcms9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YoZSxzKTooZS5fX3Byb3RvX189cyxFIGluIGV8fChlW0VdPVwiR2VuZXJhdG9yRnVuY3Rpb25cIikpLFxuZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShSKSxlfSx3LmF3cmFwPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgYyhlKX0sdShsLnByb3RvdHlwZSksdy5hc3luYz1mdW5jdGlvbihlLHQscixvKXt2YXIgaT1uZXcgbChuKGUsdCxyLG8pKTtyZXR1cm4gdy5pc0dlbmVyYXRvckZ1bmN0aW9uKHQpP2k6aS5uZXh0KCkudGhlbihmdW5jdGlvbihlKXtyZXR1cm4gZS5kb25lP2UudmFsdWU6aS5uZXh0KCl9KX0sdShSKSxSW2ddPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9LFJbRV09XCJHZW5lcmF0b3JcIixSLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IEdlbmVyYXRvcl1cIn0sdy5rZXlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiBlKXQucHVzaChyKTtyZXR1cm4gdC5yZXZlcnNlKCksZnVuY3Rpb24gbigpe2Zvcig7dC5sZW5ndGg7KXt2YXIgcj10LnBvcCgpO2lmKHIgaW4gZSlyZXR1cm4gbi52YWx1ZT1yLG4uZG9uZT0hMSxufXJldHVybiBuLmRvbmU9ITAsbn19LHcudmFsdWVzPXksaC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOmgscmVzZXQ6ZnVuY3Rpb24oZSl7aWYodGhpcy5wcmV2PTAsdGhpcy5uZXh0PTAsdGhpcy5zZW50PXRoaXMuX3NlbnQ9dix0aGlzLmRvbmU9ITEsdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHApLCFlKWZvcih2YXIgdCBpbiB0aGlzKVwidFwiPT09dC5jaGFyQXQoMCkmJl8uY2FsbCh0aGlzLHQpJiYhaXNOYU4oK3Quc2xpY2UoMSkpJiYodGhpc1t0XT12KX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgZT10aGlzLnRyeUVudHJpZXNbMF0sdD1lLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuKXtyZXR1cm4gaS50eXBlPVwidGhyb3dcIixpLmFyZz1lLHIubmV4dD10LCEhbn1pZih0aGlzLmRvbmUpdGhyb3cgZTtmb3IodmFyIHI9dGhpcyxuPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtuPj0wOy0tbil7dmFyIG89dGhpcy50cnlFbnRyaWVzW25dLGk9by5jb21wbGV0aW9uO2lmKFwicm9vdFwiPT09by50cnlMb2MpcmV0dXJuIHQoXCJlbmRcIik7aWYoby50cnlMb2M8PXRoaXMucHJldil7dmFyIGE9Xy5jYWxsKG8sXCJjYXRjaExvY1wiKSxzPV8uY2FsbChvLFwiZmluYWxseUxvY1wiKTtpZihhJiZzKXtpZih0aGlzLnByZXY8by5jYXRjaExvYylyZXR1cm4gdChvLmNhdGNoTG9jLCEwKTtpZih0aGlzLnByZXY8by5maW5hbGx5TG9jKXJldHVybiB0KG8uZmluYWxseUxvYyl9ZWxzZSBpZihhKXtpZih0aGlzLnByZXY8by5jYXRjaExvYylyZXR1cm4gdChvLmNhdGNoTG9jLCEwKX1lbHNle2lmKCFzKXRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIHQoby5maW5hbGx5TG9jKX19fX0sYWJydXB0OmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtyPj0wOy0tcil7dmFyIG49dGhpcy50cnlFbnRyaWVzW3JdO2lmKG4udHJ5TG9jPD10aGlzLnByZXYmJl8uY2FsbChuLFwiZmluYWxseUxvY1wiKSYmdGhpcy5wcmV2PG4uZmluYWxseUxvYyl7dmFyIG89bjticmVha319byYmKFwiYnJlYWtcIj09PWV8fFwiY29udGludWVcIj09PWUpJiZvLnRyeUxvYzw9dCYmdDw9by5maW5hbGx5TG9jJiYobz1udWxsKTt2YXIgaT1vP28uY29tcGxldGlvbjp7fTtyZXR1cm4gaS50eXBlPWUsaS5hcmc9dCxvP3RoaXMubmV4dD1vLmZpbmFsbHlMb2M6dGhpcy5jb21wbGV0ZShpKSxrfSxjb21wbGV0ZTpmdW5jdGlvbihlLHQpe2lmKFwidGhyb3dcIj09PWUudHlwZSl0aHJvdyBlLmFyZztcImJyZWFrXCI9PT1lLnR5cGV8fFwiY29udGludWVcIj09PWUudHlwZT90aGlzLm5leHQ9ZS5hcmc6XCJyZXR1cm5cIj09PWUudHlwZT8odGhpcy5ydmFsPWUuYXJnLHRoaXMubmV4dD1cImVuZFwiKTpcIm5vcm1hbFwiPT09ZS50eXBlJiZ0JiYodGhpcy5uZXh0PXQpfSxmaW5pc2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIuZmluYWxseUxvYz09PWUpcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLHIuYWZ0ZXJMb2MpLHAociksa319LFwiY2F0Y2hcIjpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3Q+PTA7LS10KXt2YXIgcj10aGlzLnRyeUVudHJpZXNbdF07aWYoci50cnlMb2M9PT1lKXt2YXIgbj1yLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09bi50eXBlKXt2YXIgbz1uLmFyZztwKHIpfXJldHVybiBvfX10aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIil9LGRlbGVnYXRlWWllbGQ6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLmRlbGVnYXRlPXtpdGVyYXRvcjp5KGUpLHJlc3VsdE5hbWU6dCxuZXh0TG9jOnJ9LGt9fX0oXCJvYmplY3RcIj09dHlwZW9mIHI/cjpcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMpfSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se19wcm9jZXNzOjk2fV0sOTk6W2Z1bmN0aW9uKHQscixuKXshZnVuY3Rpb24odCxuKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLmFtZD9lKFtdLG4pOlwidW5kZWZpbmVkXCIhPXR5cGVvZiByJiZyLmV4cG9ydHM/ci5leHBvcnRzPW4oKTp0LnR2ND1uKCl9KHRoaXMsZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3JldHVybiBlbmNvZGVVUkkoZSkucmVwbGFjZSgvJTI1WzAtOV1bMC05XS9nLGZ1bmN0aW9uKGUpe3JldHVyblwiJVwiK2Uuc3Vic3RyaW5nKDMpfSl9ZnVuY3Rpb24gdCh0KXt2YXIgcj1cIlwiO2RbdC5jaGFyQXQoMCldJiYocj10LmNoYXJBdCgwKSx0PXQuc3Vic3RyaW5nKDEpKTt2YXIgbj1cIlwiLG89XCJcIixpPSEwLGE9ITEscz0hMTtcIitcIj09PXI/aT0hMTpcIi5cIj09PXI/KG89XCIuXCIsbj1cIi5cIik6XCIvXCI9PT1yPyhvPVwiL1wiLG49XCIvXCIpOlwiI1wiPT09cj8obz1cIiNcIixpPSExKTpcIjtcIj09PXI/KG89XCI7XCIsbj1cIjtcIixhPSEwLHM9ITApOlwiP1wiPT09cj8obz1cIj9cIixuPVwiJlwiLGE9ITApOlwiJlwiPT09ciYmKG89XCImXCIsbj1cIiZcIixhPSEwKTtmb3IodmFyIHU9W10sYz10LnNwbGl0KFwiLFwiKSxsPVtdLGY9e30saD0wO2g8Yy5sZW5ndGg7aCsrKXt2YXIgeT1jW2hdLG09bnVsbDtpZih5LmluZGV4T2YoXCI6XCIpIT09LTEpe3ZhciB2PXkuc3BsaXQoXCI6XCIpO3k9dlswXSxtPXBhcnNlSW50KHZbMV0sMTApfWZvcih2YXIgXz17fTtwW3kuY2hhckF0KHkubGVuZ3RoLTEpXTspX1t5LmNoYXJBdCh5Lmxlbmd0aC0xKV09ITAseT15LnN1YnN0cmluZygwLHkubGVuZ3RoLTEpO3ZhciBiPXt0cnVuY2F0ZTptLG5hbWU6eSxzdWZmaWNlczpffTtsLnB1c2goYiksZlt5XT1iLHUucHVzaCh5KX12YXIgZz1mdW5jdGlvbih0KXtmb3IodmFyIHI9XCJcIix1PTAsYz0wO2M8bC5sZW5ndGg7YysrKXt2YXIgZj1sW2NdLGQ9dChmLm5hbWUpO2lmKG51bGw9PT1kfHx2b2lkIDA9PT1kfHxBcnJheS5pc0FycmF5KGQpJiYwPT09ZC5sZW5ndGh8fFwib2JqZWN0XCI9PXR5cGVvZiBkJiYwPT09T2JqZWN0LmtleXMoZCkubGVuZ3RoKXUrKztlbHNlIGlmKHIrPWM9PT11P286bnx8XCIsXCIsQXJyYXkuaXNBcnJheShkKSl7YSYmKHIrPWYubmFtZStcIj1cIik7Zm9yKHZhciBwPTA7cDxkLmxlbmd0aDtwKyspcD4wJiYocis9Zi5zdWZmaWNlc1tcIipcIl0/bnx8XCIsXCI6XCIsXCIsZi5zdWZmaWNlc1tcIipcIl0mJmEmJihyKz1mLm5hbWUrXCI9XCIpKSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudChkW3BdKS5yZXBsYWNlKC8hL2csXCIlMjFcIik6ZShkW3BdKX1lbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBkKXthJiYhZi5zdWZmaWNlc1tcIipcIl0mJihyKz1mLm5hbWUrXCI9XCIpO3ZhciBoPSEwO2Zvcih2YXIgeSBpbiBkKWh8fChyKz1mLnN1ZmZpY2VzW1wiKlwiXT9ufHxcIixcIjpcIixcIiksaD0hMSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudCh5KS5yZXBsYWNlKC8hL2csXCIlMjFcIik6ZSh5KSxyKz1mLnN1ZmZpY2VzW1wiKlwiXT9cIj1cIjpcIixcIixyKz1pP2VuY29kZVVSSUNvbXBvbmVudChkW3ldKS5yZXBsYWNlKC8hL2csXCIlMjFcIik6ZShkW3ldKX1lbHNlIGEmJihyKz1mLm5hbWUscyYmXCJcIj09PWR8fChyKz1cIj1cIikpLG51bGwhPWYudHJ1bmNhdGUmJihkPWQuc3Vic3RyaW5nKDAsZi50cnVuY2F0ZSkpLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KGQpLnJlcGxhY2UoLyEvZyxcIiUyMVwiKTplKGQpfXJldHVybiByfTtyZXR1cm4gZy52YXJOYW1lcz11LHtwcmVmaXg6byxzdWJzdGl0dXRpb246Z319ZnVuY3Rpb24gcihlKXtpZighKHRoaXMgaW5zdGFuY2VvZiByKSlyZXR1cm4gbmV3IHIoZSk7Zm9yKHZhciBuPWUuc3BsaXQoXCJ7XCIpLG89W24uc2hpZnQoKV0saT1bXSxhPVtdLHM9W107bi5sZW5ndGg+MDspe3ZhciB1PW4uc2hpZnQoKSxjPXUuc3BsaXQoXCJ9XCIpWzBdLGw9dS5zdWJzdHJpbmcoYy5sZW5ndGgrMSksZj10KGMpO2EucHVzaChmLnN1YnN0aXR1dGlvbiksaS5wdXNoKGYucHJlZml4KSxvLnB1c2gobCkscz1zLmNvbmNhdChmLnN1YnN0aXR1dGlvbi52YXJOYW1lcyl9dGhpcy5maWxsPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1vWzBdLHI9MDtyPGEubGVuZ3RoO3IrKyl7dmFyIG49YVtyXTt0Kz1uKGUpLHQrPW9bcisxXX1yZXR1cm4gdH0sdGhpcy52YXJOYW1lcz1zLHRoaXMudGVtcGxhdGU9ZX1mdW5jdGlvbiBuKGUsdCl7aWYoZT09PXQpcmV0dXJuITA7aWYoZSYmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwib2JqZWN0XCI9PXR5cGVvZiB0KXtpZihBcnJheS5pc0FycmF5KGUpIT09QXJyYXkuaXNBcnJheSh0KSlyZXR1cm4hMTtpZihBcnJheS5pc0FycmF5KGUpKXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWlmKCFuKGVbcl0sdFtyXSkpcmV0dXJuITF9ZWxzZXt2YXIgbztmb3IobyBpbiBlKWlmKHZvaWQgMD09PXRbb10mJnZvaWQgMCE9PWVbb10pcmV0dXJuITE7Zm9yKG8gaW4gdClpZih2b2lkIDA9PT1lW29dJiZ2b2lkIDAhPT10W29dKXJldHVybiExO2ZvcihvIGluIGUpaWYoIW4oZVtvXSx0W29dKSlyZXR1cm4hMX1yZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBvKGUpe3ZhciB0PVN0cmluZyhlKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpLm1hdGNoKC9eKFteOlxcLz8jXSs6KT8oXFwvXFwvKD86W146QF0qKD86OlteOkBdKik/QCk/KChbXjpcXC8/I10qKSg/OjooXFxkKikpPykpPyhbXj8jXSopKFxcP1teI10qKT8oI1tcXHNcXFNdKik/Lyk7cmV0dXJuIHQ/e2hyZWY6dFswXXx8XCJcIixwcm90b2NvbDp0WzFdfHxcIlwiLGF1dGhvcml0eTp0WzJdfHxcIlwiLGhvc3Q6dFszXXx8XCJcIixob3N0bmFtZTp0WzRdfHxcIlwiLHBvcnQ6dFs1XXx8XCJcIixwYXRobmFtZTp0WzZdfHxcIlwiLHNlYXJjaDp0WzddfHxcIlwiLGhhc2g6dFs4XXx8XCJcIn06bnVsbH1mdW5jdGlvbiBpKGUsdCl7ZnVuY3Rpb24gcihlKXt2YXIgdD1bXTtyZXR1cm4gZS5yZXBsYWNlKC9eKFxcLlxcLj8oXFwvfCQpKSsvLFwiXCIpLnJlcGxhY2UoL1xcLyhcXC4oXFwvfCQpKSsvZyxcIi9cIikucmVwbGFjZSgvXFwvXFwuXFwuJC8sXCIvLi4vXCIpLnJlcGxhY2UoL1xcLz9bXlxcL10qL2csZnVuY3Rpb24oZSl7XCIvLi5cIj09PWU/dC5wb3AoKTp0LnB1c2goZSl9KSx0LmpvaW4oXCJcIikucmVwbGFjZSgvXlxcLy8sXCIvXCI9PT1lLmNoYXJBdCgwKT9cIi9cIjpcIlwiKX1yZXR1cm4gdD1vKHR8fFwiXCIpLGU9byhlfHxcIlwiKSx0JiZlPyh0LnByb3RvY29sfHxlLnByb3RvY29sKSsodC5wcm90b2NvbHx8dC5hdXRob3JpdHk/dC5hdXRob3JpdHk6ZS5hdXRob3JpdHkpK3IodC5wcm90b2NvbHx8dC5hdXRob3JpdHl8fFwiL1wiPT09dC5wYXRobmFtZS5jaGFyQXQoMCk/dC5wYXRobmFtZTp0LnBhdGhuYW1lPyhlLmF1dGhvcml0eSYmIWUucGF0aG5hbWU/XCIvXCI6XCJcIikrZS5wYXRobmFtZS5zbGljZSgwLGUucGF0aG5hbWUubGFzdEluZGV4T2YoXCIvXCIpKzEpK3QucGF0aG5hbWU6ZS5wYXRobmFtZSkrKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5fHx0LnBhdGhuYW1lP3Quc2VhcmNoOnQuc2VhcmNofHxlLnNlYXJjaCkrdC5oYXNoOm51bGx9ZnVuY3Rpb24gYShlKXtyZXR1cm4gZS5zcGxpdChcIiNcIilbMF19ZnVuY3Rpb24gcyhlLHQpe2lmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKHZvaWQgMD09PXQ/dD1lLmlkOlwic3RyaW5nXCI9PXR5cGVvZiBlLmlkJiYodD1pKHQsZS5pZCksZS5pZD10KSxBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXMoZVtyXSx0KTtlbHNle1wic3RyaW5nXCI9PXR5cGVvZiBlLiRyZWYmJihlLiRyZWY9aSh0LGUuJHJlZikpO2Zvcih2YXIgbiBpbiBlKVwiZW51bVwiIT09biYmcyhlW25dLHQpfX1mdW5jdGlvbiB1KGUpe2U9ZXx8XCJlblwiO3ZhciB0PUVbZV07cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciByPXRbZS5jb2RlXXx8Z1tlLmNvZGVdO2lmKFwic3RyaW5nXCIhPXR5cGVvZiByKXJldHVyblwiVW5rbm93biBlcnJvciBjb2RlIFwiK2UuY29kZStcIjogXCIrSlNPTi5zdHJpbmdpZnkoZS5tZXNzYWdlUGFyYW1zKTt2YXIgbj1lLnBhcmFtcztyZXR1cm4gci5yZXBsYWNlKC9cXHsoW157fV0qKVxcfS9nLGZ1bmN0aW9uKGUsdCl7dmFyIHI9blt0XTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygcnx8XCJudW1iZXJcIj09dHlwZW9mIHI/cjplfSl9fWZ1bmN0aW9uIGMoZSx0LHIsbixvKXtpZihFcnJvci5jYWxsKHRoaXMpLHZvaWQgMD09PWUpdGhyb3cgbmV3IEVycm9yKFwiTm8gZXJyb3IgY29kZSBzdXBwbGllZDogXCIrbik7dGhpcy5tZXNzYWdlPVwiXCIsdGhpcy5wYXJhbXM9dCx0aGlzLmNvZGU9ZSx0aGlzLmRhdGFQYXRoPXJ8fFwiXCIsdGhpcy5zY2hlbWFQYXRoPW58fFwiXCIsdGhpcy5zdWJFcnJvcnM9b3x8bnVsbDt2YXIgaT1uZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtpZih0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZSwhdGhpcy5zdGFjayl0cnl7dGhyb3cgaX1jYXRjaChpKXt0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZX19ZnVuY3Rpb24gbChlLHQpe2lmKHQuc3Vic3RyaW5nKDAsZS5sZW5ndGgpPT09ZSl7dmFyIHI9dC5zdWJzdHJpbmcoZS5sZW5ndGgpO2lmKHQubGVuZ3RoPjAmJlwiL1wiPT09dC5jaGFyQXQoZS5sZW5ndGgtMSl8fFwiI1wiPT09ci5jaGFyQXQoMCl8fFwiP1wiPT09ci5jaGFyQXQoMCkpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gZihlKXt2YXIgdCxyLG49bmV3IGgsbz17c2V0RXJyb3JSZXBvcnRlcjpmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT90aGlzLmxhbmd1YWdlKGUpOihyPWUsITApfSxhZGRGb3JtYXQ6ZnVuY3Rpb24oKXtuLmFkZEZvcm1hdC5hcHBseShuLGFyZ3VtZW50cyl9LGxhbmd1YWdlOmZ1bmN0aW9uKGUpe3JldHVybiBlPyhFW2VdfHwoZT1lLnNwbGl0KFwiLVwiKVswXSksISFFW2VdJiYodD1lLGUpKTp0fSxhZGRMYW5ndWFnZTpmdW5jdGlvbihlLHQpe3ZhciByO2ZvcihyIGluIHYpdFtyXSYmIXRbdltyXV0mJih0W3Zbcl1dPXRbcl0pO3ZhciBuPWUuc3BsaXQoXCItXCIpWzBdO2lmKEVbbl0pe0VbZV09T2JqZWN0LmNyZWF0ZShFW25dKTtmb3IociBpbiB0KVwidW5kZWZpbmVkXCI9PXR5cGVvZiBFW25dW3JdJiYoRVtuXVtyXT10W3JdKSxFW2VdW3JdPXRbcl19ZWxzZSBFW2VdPXQsRVtuXT10O3JldHVybiB0aGlzfSxmcmVzaEFwaTpmdW5jdGlvbihlKXt2YXIgdD1mKCk7cmV0dXJuIGUmJnQubGFuZ3VhZ2UoZSksdH0sdmFsaWRhdGU6ZnVuY3Rpb24oZSxvLGksYSl7dmFyIHM9dSh0KSxjPXI/ZnVuY3Rpb24oZSx0LG4pe3JldHVybiByKGUsdCxuKXx8cyhlLHQsbil9OnMsbD1uZXcgaChuLCghMSksYyxpLGEpO1wic3RyaW5nXCI9PXR5cGVvZiBvJiYobz17JHJlZjpvfSksbC5hZGRTY2hlbWEoXCJcIixvKTt2YXIgZj1sLnZhbGlkYXRlQWxsKGUsbyxudWxsLG51bGwsXCJcIik7cmV0dXJuIWYmJmEmJihmPWwuYmFuVW5rbm93blByb3BlcnRpZXMoZSxvKSksdGhpcy5lcnJvcj1mLHRoaXMubWlzc2luZz1sLm1pc3NpbmcsdGhpcy52YWxpZD1udWxsPT09Zix0aGlzLnZhbGlkfSx2YWxpZGF0ZVJlc3VsdDpmdW5jdGlvbigpe3ZhciBlPXt9O3JldHVybiB0aGlzLnZhbGlkYXRlLmFwcGx5KGUsYXJndW1lbnRzKSxlfSx2YWxpZGF0ZU11bHRpcGxlOmZ1bmN0aW9uKGUsbyxpLGEpe3ZhciBzPXUodCksYz1yP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcihlLHQsbil8fHMoZSx0LG4pfTpzLGw9bmV3IGgobiwoITApLGMsaSxhKTtcInN0cmluZ1wiPT10eXBlb2YgbyYmKG89eyRyZWY6b30pLGwuYWRkU2NoZW1hKFwiXCIsbyksbC52YWxpZGF0ZUFsbChlLG8sbnVsbCxudWxsLFwiXCIpLGEmJmwuYmFuVW5rbm93blByb3BlcnRpZXMoZSxvKTt2YXIgZj17fTtyZXR1cm4gZi5lcnJvcnM9bC5lcnJvcnMsZi5taXNzaW5nPWwubWlzc2luZyxmLnZhbGlkPTA9PT1mLmVycm9ycy5sZW5ndGgsZn0sYWRkU2NoZW1hOmZ1bmN0aW9uKCl7cmV0dXJuIG4uYWRkU2NoZW1hLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0U2NoZW1hOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZ2V0U2NoZW1hLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0U2NoZW1hTWFwOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZ2V0U2NoZW1hTWFwLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0U2NoZW1hVXJpczpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYVVyaXMuYXBwbHkobixhcmd1bWVudHMpfSxnZXRNaXNzaW5nVXJpczpmdW5jdGlvbigpe3JldHVybiBuLmdldE1pc3NpbmdVcmlzLmFwcGx5KG4sYXJndW1lbnRzKX0sZHJvcFNjaGVtYXM6ZnVuY3Rpb24oKXtuLmRyb3BTY2hlbWFzLmFwcGx5KG4sYXJndW1lbnRzKX0sZGVmaW5lS2V5d29yZDpmdW5jdGlvbigpe24uZGVmaW5lS2V5d29yZC5hcHBseShuLGFyZ3VtZW50cyl9LGRlZmluZUVycm9yOmZ1bmN0aW9uKGUsdCxyKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8IS9eW0EtWl0rKF9bQS1aXSspKiQvLnRlc3QoZSkpdGhyb3cgbmV3IEVycm9yKFwiQ29kZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgaW4gVVBQRVJfQ0FTRV9XSVRIX1VOREVSU0NPUkVTXCIpO2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0fHx0JTEhPT0wfHx0PDFlNCl0aHJvdyBuZXcgRXJyb3IoXCJDb2RlIG51bWJlciBtdXN0IGJlIGFuIGludGVnZXIgPiAxMDAwMFwiKTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdltlXSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBhbHJlYWR5IGRlZmluZWQ6IFwiK2UrXCIgYXMgXCIrdltlXSk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIF9bdF0pdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgY29kZSBhbHJlYWR5IHVzZWQ6IFwiK19bdF0rXCIgYXMgXCIrdCk7dltlXT10LF9bdF09ZSxnW2VdPWdbdF09cjtmb3IodmFyIG4gaW4gRSl7dmFyIG89RVtuXTtvW2VdJiYob1t0XT1vW3RdfHxvW2VdKX19LHJlc2V0OmZ1bmN0aW9uKCl7bi5yZXNldCgpLHRoaXMuZXJyb3I9bnVsbCx0aGlzLm1pc3Npbmc9W10sdGhpcy52YWxpZD0hMH0sbWlzc2luZzpbXSxlcnJvcjpudWxsLHZhbGlkOiEwLG5vcm1TY2hlbWE6cyxyZXNvbHZlVXJsOmksZ2V0RG9jdW1lbnRVcmk6YSxlcnJvckNvZGVzOnZ9O3JldHVybiBvLmxhbmd1YWdlKGV8fFwiZW5cIiksb31PYmplY3Qua2V5c3x8KE9iamVjdC5rZXlzPWZ1bmN0aW9uKCl7dmFyIGU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx0PSF7dG9TdHJpbmc6bnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoXCJ0b1N0cmluZ1wiKSxyPVtcInRvU3RyaW5nXCIsXCJ0b0xvY2FsZVN0cmluZ1wiLFwidmFsdWVPZlwiLFwiaGFzT3duUHJvcGVydHlcIixcImlzUHJvdG90eXBlT2ZcIixcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsXCJjb25zdHJ1Y3RvclwiXSxuPXIubGVuZ3RoO3JldHVybiBmdW5jdGlvbihvKXtpZihcIm9iamVjdFwiIT10eXBlb2YgbyYmXCJmdW5jdGlvblwiIT10eXBlb2Ygb3x8bnVsbD09PW8pdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5rZXlzIGNhbGxlZCBvbiBub24tb2JqZWN0XCIpO3ZhciBpPVtdO2Zvcih2YXIgYSBpbiBvKWUuY2FsbChvLGEpJiZpLnB1c2goYSk7aWYodClmb3IodmFyIHM9MDtzPG47cysrKWUuY2FsbChvLHJbc10pJiZpLnB1c2gocltzXSk7cmV0dXJuIGl9fSgpKSxPYmplY3QuY3JlYXRlfHwoT2JqZWN0LmNyZWF0ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKDEhPT1hcmd1bWVudHMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk9iamVjdC5jcmVhdGUgaW1wbGVtZW50YXRpb24gb25seSBhY2NlcHRzIG9uZSBwYXJhbWV0ZXIuXCIpO3JldHVybiBlLnByb3RvdHlwZT10LG5ldyBlfX0oKSksQXJyYXkuaXNBcnJheXx8KEFycmF5LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSksQXJyYXkucHJvdG90eXBlLmluZGV4T2Z8fChBcnJheS5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbihlKXtpZihudWxsPT09dGhpcyl0aHJvdyBuZXcgVHlwZUVycm9yO3ZhciB0PU9iamVjdCh0aGlzKSxyPXQubGVuZ3RoPj4+MDtpZigwPT09cilyZXR1cm4tMTt2YXIgbj0wO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSYmKG49TnVtYmVyKGFyZ3VtZW50c1sxXSksbiE9PW4/bj0wOjAhPT1uJiZuIT09MS8wJiZuIT09LSgxLzApJiYobj0obj4wfHwtMSkqTWF0aC5mbG9vcihNYXRoLmFicyhuKSkpKSxuPj1yKXJldHVybi0xO2Zvcih2YXIgbz1uPj0wP246TWF0aC5tYXgoci1NYXRoLmFicyhuKSwwKTtvPHI7bysrKWlmKG8gaW4gdCYmdFtvXT09PWUpcmV0dXJuIG87cmV0dXJuLTF9KSxPYmplY3QuaXNGcm96ZW58fChPYmplY3QuaXNGcm96ZW49ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwidHY0X3Rlc3RfZnJvemVuX2tleVwiO2UuaGFzT3duUHJvcGVydHkodCk7KXQrPU1hdGgucmFuZG9tKCk7dHJ5e3JldHVybiBlW3RdPSEwLGRlbGV0ZSBlW3RdLCExfWNhdGNoKHIpe3JldHVybiEwfX0pO3ZhciBkPXtcIitcIjohMCxcIiNcIjohMCxcIi5cIjohMCxcIi9cIjohMCxcIjtcIjohMCxcIj9cIjohMCxcIiZcIjohMH0scD17XCIqXCI6ITB9O3IucHJvdG90eXBlPXt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRlbXBsYXRlfSxmaWxsRnJvbU9iamVjdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfSl9fTt2YXIgaD1mdW5jdGlvbihlLHQscixuLG8pe2lmKHRoaXMubWlzc2luZz1bXSx0aGlzLm1pc3NpbmdNYXA9e30sdGhpcy5mb3JtYXRWYWxpZGF0b3JzPWU/T2JqZWN0LmNyZWF0ZShlLmZvcm1hdFZhbGlkYXRvcnMpOnt9LHRoaXMuc2NoZW1hcz1lP09iamVjdC5jcmVhdGUoZS5zY2hlbWFzKTp7fSx0aGlzLmNvbGxlY3RNdWx0aXBsZT10LHRoaXMuZXJyb3JzPVtdLHRoaXMuaGFuZGxlRXJyb3I9dD90aGlzLmNvbGxlY3RFcnJvcjp0aGlzLnJldHVybkVycm9yLG4mJih0aGlzLmNoZWNrUmVjdXJzaXZlPSEwLHRoaXMuc2Nhbm5lZD1bXSx0aGlzLnNjYW5uZWRGcm96ZW49W10sdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcz1bXSx0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzPVtdLHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleT1cInR2NF92YWxpZGF0aW9uX2lkXCIsdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5PVwidHY0X3ZhbGlkYXRpb25fZXJyb3JzX2lkXCIpLG8mJih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXM9ITAsdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSksdGhpcy5lcnJvclJlcG9ydGVyPXJ8fHUoXCJlblwiKSxcInN0cmluZ1wiPT10eXBlb2YgdGhpcy5lcnJvclJlcG9ydGVyKXRocm93IG5ldyBFcnJvcihcImRlYnVnXCIpO2lmKHRoaXMuZGVmaW5lZEtleXdvcmRzPXt9LGUpZm9yKHZhciBpIGluIGUuZGVmaW5lZEtleXdvcmRzKXRoaXMuZGVmaW5lZEtleXdvcmRzW2ldPWUuZGVmaW5lZEtleXdvcmRzW2ldLnNsaWNlKDApfTtoLnByb3RvdHlwZS5kZWZpbmVLZXl3b3JkPWZ1bmN0aW9uKGUsdCl7dGhpcy5kZWZpbmVkS2V5d29yZHNbZV09dGhpcy5kZWZpbmVkS2V5d29yZHNbZV18fFtdLHRoaXMuZGVmaW5lZEtleXdvcmRzW2VdLnB1c2godCl9LGgucHJvdG90eXBlLmNyZWF0ZUVycm9yPWZ1bmN0aW9uKGUsdCxyLG4sbyxpLGEpe3ZhciBzPW5ldyBjKGUsdCxyLG4sbyk7cmV0dXJuIHMubWVzc2FnZT10aGlzLmVycm9yUmVwb3J0ZXIocyxpLGEpLHN9LGgucHJvdG90eXBlLnJldHVybkVycm9yPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxoLnByb3RvdHlwZS5jb2xsZWN0RXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJnRoaXMuZXJyb3JzLnB1c2goZSksbnVsbH0saC5wcm90b3R5cGUucHJlZml4RXJyb3JzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49ZTtuPHRoaXMuZXJyb3JzLmxlbmd0aDtuKyspdGhpcy5lcnJvcnNbbl09dGhpcy5lcnJvcnNbbl0ucHJlZml4V2l0aCh0LHIpO3JldHVybiB0aGlzfSxoLnByb3RvdHlwZS5iYW5Vbmtub3duUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKXt2YXIgbj10aGlzLmNyZWF0ZUVycm9yKHYuVU5LTk9XTl9QUk9QRVJUWSx7cGF0aDpyfSxyLFwiXCIsbnVsbCxlLHQpLG89dGhpcy5oYW5kbGVFcnJvcihuKTtpZihvKXJldHVybiBvfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS5hZGRGb3JtYXQ9ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7Zm9yKHZhciByIGluIGUpdGhpcy5hZGRGb3JtYXQocixlW3JdKTtyZXR1cm4gdGhpc310aGlzLmZvcm1hdFZhbGlkYXRvcnNbZV09dH0saC5wcm90b3R5cGUucmVzb2x2ZVJlZnM9ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDAhPT1lLiRyZWYpe2lmKHQ9dHx8e30sdFtlLiRyZWZdKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuQ0lSQ1VMQVJfUkVGRVJFTkNFLHt1cmxzOk9iamVjdC5rZXlzKHQpLmpvaW4oXCIsIFwiKX0sXCJcIixcIlwiLG51bGwsdm9pZCAwLGUpO3RbZS4kcmVmXT0hMCxlPXRoaXMuZ2V0U2NoZW1hKGUuJHJlZix0KX1yZXR1cm4gZX0saC5wcm90b3R5cGUuZ2V0U2NoZW1hPWZ1bmN0aW9uKGUsdCl7dmFyIHI7aWYodm9pZCAwIT09dGhpcy5zY2hlbWFzW2VdKXJldHVybiByPXRoaXMuc2NoZW1hc1tlXSx0aGlzLnJlc29sdmVSZWZzKHIsdCk7dmFyIG49ZSxvPVwiXCI7aWYoZS5pbmRleE9mKFwiI1wiKSE9PS0xJiYobz1lLnN1YnN0cmluZyhlLmluZGV4T2YoXCIjXCIpKzEpLG49ZS5zdWJzdHJpbmcoMCxlLmluZGV4T2YoXCIjXCIpKSksXCJvYmplY3RcIj09dHlwZW9mIHRoaXMuc2NoZW1hc1tuXSl7cj10aGlzLnNjaGVtYXNbbl07dmFyIGk9ZGVjb2RlVVJJQ29tcG9uZW50KG8pO2lmKFwiXCI9PT1pKXJldHVybiB0aGlzLnJlc29sdmVSZWZzKHIsdCk7aWYoXCIvXCIhPT1pLmNoYXJBdCgwKSlyZXR1cm47Zm9yKHZhciBhPWkuc3BsaXQoXCIvXCIpLnNsaWNlKDEpLHM9MDtzPGEubGVuZ3RoO3MrKyl7dmFyIHU9YVtzXS5yZXBsYWNlKC9+MS9nLFwiL1wiKS5yZXBsYWNlKC9+MC9nLFwiflwiKTtpZih2b2lkIDA9PT1yW3VdKXtyPXZvaWQgMDticmVha31yPXJbdV19aWYodm9pZCAwIT09cilyZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhyLHQpfXZvaWQgMD09PXRoaXMubWlzc2luZ1tuXSYmKHRoaXMubWlzc2luZy5wdXNoKG4pLHRoaXMubWlzc2luZ1tuXT1uLHRoaXMubWlzc2luZ01hcFtuXT1uKX0saC5wcm90b3R5cGUuc2VhcmNoU2NoZW1hcz1mdW5jdGlvbihlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspdGhpcy5zZWFyY2hTY2hlbWFzKGVbcl0sdCk7ZWxzZSBpZihlJiZcIm9iamVjdFwiPT10eXBlb2YgZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUuaWQmJmwodCxlLmlkKSYmdm9pZCAwPT09dGhpcy5zY2hlbWFzW2UuaWRdJiYodGhpcy5zY2hlbWFzW2UuaWRdPWUpO2Zvcih2YXIgbiBpbiBlKWlmKFwiZW51bVwiIT09bilpZihcIm9iamVjdFwiPT10eXBlb2YgZVtuXSl0aGlzLnNlYXJjaFNjaGVtYXMoZVtuXSx0KTtlbHNlIGlmKFwiJHJlZlwiPT09bil7dmFyIG89YShlW25dKTtvJiZ2b2lkIDA9PT10aGlzLnNjaGVtYXNbb10mJnZvaWQgMD09PXRoaXMubWlzc2luZ01hcFtvXSYmKHRoaXMubWlzc2luZ01hcFtvXT1vKX19fSxoLnByb3RvdHlwZS5hZGRTY2hlbWE9ZnVuY3Rpb24oZSx0KXtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIHQpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxcInN0cmluZ1wiIT10eXBlb2YgZS5pZClyZXR1cm47dD1lLGU9dC5pZH1lPT09YShlKStcIiNcIiYmKGU9YShlKSksdGhpcy5zY2hlbWFzW2VdPXQsZGVsZXRlIHRoaXMubWlzc2luZ01hcFtlXSxzKHQsZSksdGhpcy5zZWFyY2hTY2hlbWFzKHQsZSl9LGgucHJvdG90eXBlLmdldFNjaGVtYU1hcD1mdW5jdGlvbigpe3ZhciBlPXt9O2Zvcih2YXIgdCBpbiB0aGlzLnNjaGVtYXMpZVt0XT10aGlzLnNjaGVtYXNbdF07cmV0dXJuIGV9LGgucHJvdG90eXBlLmdldFNjaGVtYVVyaXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIHRoaXMuc2NoZW1hcyllJiYhZS50ZXN0KHIpfHx0LnB1c2gocik7cmV0dXJuIHR9LGgucHJvdG90eXBlLmdldE1pc3NpbmdVcmlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiB0aGlzLm1pc3NpbmdNYXApZSYmIWUudGVzdChyKXx8dC5wdXNoKHIpO3JldHVybiB0fSxoLnByb3RvdHlwZS5kcm9wU2NoZW1hcz1mdW5jdGlvbigpe3RoaXMuc2NoZW1hcz17fSx0aGlzLnJlc2V0KCl9LGgucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5taXNzaW5nPVtdLHRoaXMubWlzc2luZ01hcD17fSx0aGlzLmVycm9ycz1bXX0saC5wcm90b3R5cGUudmFsaWRhdGVBbGw9ZnVuY3Rpb24oZSx0LHIsbixvKXt2YXIgaTtpZih0PXRoaXMucmVzb2x2ZVJlZnModCksIXQpcmV0dXJuIG51bGw7aWYodCBpbnN0YW5jZW9mIGMpcmV0dXJuIHRoaXMuZXJyb3JzLnB1c2godCksdDt2YXIgYSxzPXRoaXMuZXJyb3JzLmxlbmd0aCx1PW51bGwsbD1udWxsO2lmKHRoaXMuY2hlY2tSZWN1cnNpdmUmJmUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKXtpZihpPSF0aGlzLnNjYW5uZWQubGVuZ3RoLGVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSl7dmFyIGY9ZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmluZGV4T2YodCk7aWYoZiE9PS0xKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5jb25jYXQoZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW2ZdKSxudWxsfWlmKE9iamVjdC5pc0Zyb3plbihlKSYmKGE9dGhpcy5zY2FubmVkRnJvemVuLmluZGV4T2YoZSksYSE9PS0xKSl7dmFyIGQ9dGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXS5pbmRleE9mKHQpO2lmKGQhPT0tMSlyZXR1cm4gdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuY29uY2F0KHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbYV1bZF0pLG51bGx9aWYodGhpcy5zY2FubmVkLnB1c2goZSksT2JqZWN0LmlzRnJvemVuKGUpKWE9PT0tMSYmKGE9dGhpcy5zY2FubmVkRnJvemVuLmxlbmd0aCx0aGlzLnNjYW5uZWRGcm96ZW4ucHVzaChlKSx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzLnB1c2goW10pKSx1PXRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbYV0ubGVuZ3RoLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbYV1bdV09dCx0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2FdW3VdPVtdO2Vsc2V7aWYoIWVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSl0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5LHt2YWx1ZTpbXSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXkse3ZhbHVlOltdLGNvbmZpZ3VyYWJsZTohMH0pfWNhdGNoKHApe2VbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XT1bXSxlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV09W119bD1lW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0ubGVuZ3RoLGVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XVtsXT10LGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtsXT1bXX19dmFyIGg9dGhpcy5lcnJvcnMubGVuZ3RoLHk9dGhpcy52YWxpZGF0ZUJhc2ljKGUsdCxvKXx8dGhpcy52YWxpZGF0ZU51bWVyaWMoZSx0LG8pfHx0aGlzLnZhbGlkYXRlU3RyaW5nKGUsdCxvKXx8dGhpcy52YWxpZGF0ZUFycmF5KGUsdCxvKXx8dGhpcy52YWxpZGF0ZU9iamVjdChlLHQsbyl8fHRoaXMudmFsaWRhdGVDb21iaW5hdGlvbnMoZSx0LG8pfHx0aGlzLnZhbGlkYXRlSHlwZXJtZWRpYShlLHQsbyl8fHRoaXMudmFsaWRhdGVGb3JtYXQoZSx0LG8pfHx0aGlzLnZhbGlkYXRlRGVmaW5lZEtleXdvcmRzKGUsdCxvKXx8bnVsbDtpZihpKXtmb3IoO3RoaXMuc2Nhbm5lZC5sZW5ndGg7KXt2YXIgbT10aGlzLnNjYW5uZWQucG9wKCk7ZGVsZXRlIG1bdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XX10aGlzLnNjYW5uZWRGcm96ZW49W10sdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcz1bXX1pZih5fHxoIT09dGhpcy5lcnJvcnMubGVuZ3RoKWZvcig7ciYmci5sZW5ndGh8fG4mJm4ubGVuZ3RoOyl7dmFyIHY9ciYmci5sZW5ndGg/XCJcIityLnBvcCgpOm51bGwsXz1uJiZuLmxlbmd0aD9cIlwiK24ucG9wKCk6bnVsbDt5JiYoeT15LnByZWZpeFdpdGgodixfKSksdGhpcy5wcmVmaXhFcnJvcnMoaCx2LF8pfXJldHVybiBudWxsIT09dT90aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2FdW3VdPXRoaXMuZXJyb3JzLnNsaWNlKHMpOm51bGwhPT1sJiYoZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW2xdPXRoaXMuZXJyb3JzLnNsaWNlKHMpKSx0aGlzLmhhbmRsZUVycm9yKHkpfSxoLnByb3RvdHlwZS52YWxpZGF0ZUZvcm1hdD1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0LmZvcm1hdHx8IXRoaXMuZm9ybWF0VmFsaWRhdG9yc1t0LmZvcm1hdF0pcmV0dXJuIG51bGw7dmFyIHI9dGhpcy5mb3JtYXRWYWxpZGF0b3JzW3QuZm9ybWF0XS5jYWxsKG51bGwsZSx0KTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygcnx8XCJudW1iZXJcIj09dHlwZW9mIHI/dGhpcy5jcmVhdGVFcnJvcih2LkZPUk1BVF9DVVNUT00se21lc3NhZ2U6cn0sXCJcIixcIi9mb3JtYXRcIixudWxsLGUsdCk6ciYmXCJvYmplY3RcIj09dHlwZW9mIHI/dGhpcy5jcmVhdGVFcnJvcih2LkZPUk1BVF9DVVNUT00se21lc3NhZ2U6ci5tZXNzYWdlfHxcIj9cIn0sci5kYXRhUGF0aHx8XCJcIixyLnNjaGVtYVBhdGh8fFwiL2Zvcm1hdFwiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZURlZmluZWRLZXl3b3Jkcz1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBuIGluIHRoaXMuZGVmaW5lZEtleXdvcmRzKWlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0W25dKWZvcih2YXIgbz10aGlzLmRlZmluZWRLZXl3b3Jkc1tuXSxpPTA7aTxvLmxlbmd0aDtpKyspe3ZhciBhPW9baV0scz1hKGUsdFtuXSx0LHIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBzfHxcIm51bWJlclwiPT10eXBlb2YgcylyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2LktFWVdPUkRfQ1VTVE9NLHtrZXk6bixtZXNzYWdlOnN9LFwiXCIsXCJcIixudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG4pO2lmKHMmJlwib2JqZWN0XCI9PXR5cGVvZiBzKXt2YXIgdT1zLmNvZGU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHUpe2lmKCF2W3VdKXRocm93IG5ldyBFcnJvcihcIlVuZGVmaW5lZCBlcnJvciBjb2RlICh1c2UgZGVmaW5lRXJyb3IpOiBcIit1KTt1PXZbdV19ZWxzZVwibnVtYmVyXCIhPXR5cGVvZiB1JiYodT12LktFWVdPUkRfQ1VTVE9NKTt2YXIgYz1cIm9iamVjdFwiPT10eXBlb2Ygcy5tZXNzYWdlP3MubWVzc2FnZTp7a2V5Om4sbWVzc2FnZTpzLm1lc3NhZ2V8fFwiP1wifSxsPXMuc2NoZW1hUGF0aHx8XCIvXCIrbi5yZXBsYWNlKC9+L2csXCJ+MFwiKS5yZXBsYWNlKC9cXC8vZyxcIn4xXCIpO3JldHVybiB0aGlzLmNyZWF0ZUVycm9yKHUsYyxzLmRhdGFQYXRofHxudWxsLGwsbnVsbCxlLHQpfX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVCYXNpYz1mdW5jdGlvbihlLHQscil7dmFyIG47cmV0dXJuKG49dGhpcy52YWxpZGF0ZVR5cGUoZSx0LHIpKT9uLnByZWZpeFdpdGgobnVsbCxcInR5cGVcIik6KG49dGhpcy52YWxpZGF0ZUVudW0oZSx0LHIpKT9uLnByZWZpeFdpdGgobnVsbCxcInR5cGVcIik6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVUeXBlPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dC50eXBlKXJldHVybiBudWxsO3ZhciByPXR5cGVvZiBlO251bGw9PT1lP3I9XCJudWxsXCI6QXJyYXkuaXNBcnJheShlKSYmKHI9XCJhcnJheVwiKTt2YXIgbj10LnR5cGU7QXJyYXkuaXNBcnJheShuKXx8KG49W25dKTtmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGk9bltvXTtpZihpPT09cnx8XCJpbnRlZ2VyXCI9PT1pJiZcIm51bWJlclwiPT09ciYmZSUxPT09MClyZXR1cm4gbnVsbH1yZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2LklOVkFMSURfVFlQRSx7dHlwZTpyLGV4cGVjdGVkOm4uam9pbihcIi9cIil9LFwiXCIsXCJcIixudWxsLGUsdCl9LGgucHJvdG90eXBlLnZhbGlkYXRlRW51bT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXRbXCJlbnVtXCJdKXJldHVybiBudWxsO2Zvcih2YXIgcj0wO3I8dFtcImVudW1cIl0ubGVuZ3RoO3IrKyl7dmFyIG89dFtcImVudW1cIl1bcl07aWYobihlLG8pKXJldHVybiBudWxsfXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuRU5VTV9NSVNNQVRDSCx7dmFsdWU6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEpTT04/SlNPTi5zdHJpbmdpZnkoZSk6ZX0sXCJcIixcIlwiLG51bGwsZSx0KX0saC5wcm90b3R5cGUudmFsaWRhdGVOdW1lcmljPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy52YWxpZGF0ZU11bHRpcGxlT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTWluTWF4KGUsdCxyKXx8dGhpcy52YWxpZGF0ZU5hTihlLHQscil8fG51bGx9O3ZhciB5PU1hdGgucG93KDIsLTUxKSxtPTEteTtoLnByb3RvdHlwZS52YWxpZGF0ZU11bHRpcGxlT2Y9ZnVuY3Rpb24oZSx0KXt2YXIgcj10Lm11bHRpcGxlT2Z8fHQuZGl2aXNpYmxlQnk7aWYodm9pZCAwPT09cilyZXR1cm4gbnVsbDtpZihcIm51bWJlclwiPT10eXBlb2YgZSl7dmFyIG49ZS9yJTE7aWYobj49eSYmbjxtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01VTFRJUExFX09GLHt2YWx1ZTplLG11bHRpcGxlT2Y6cn0sXCJcIixcIlwiLG51bGwsZSx0KX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVNaW5NYXg9ZnVuY3Rpb24oZSx0KXtpZihcIm51bWJlclwiIT10eXBlb2YgZSlyZXR1cm4gbnVsbDtpZih2b2lkIDAhPT10Lm1pbmltdW0pe2lmKGU8dC5taW5pbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01JTklNVU0se3ZhbHVlOmUsbWluaW11bTp0Lm1pbmltdW19LFwiXCIsXCIvbWluaW11bVwiLG51bGwsZSx0KTtpZih0LmV4Y2x1c2l2ZU1pbmltdW0mJmU9PT10Lm1pbmltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUlOSU1VTV9FWENMVVNJVkUse3ZhbHVlOmUsbWluaW11bTp0Lm1pbmltdW19LFwiXCIsXCIvZXhjbHVzaXZlTWluaW11bVwiLG51bGwsZSx0KX1pZih2b2lkIDAhPT10Lm1heGltdW0pe2lmKGU+dC5tYXhpbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01BWElNVU0se3ZhbHVlOmUsbWF4aW11bTp0Lm1heGltdW19LFwiXCIsXCIvbWF4aW11bVwiLG51bGwsZSx0KTtpZih0LmV4Y2x1c2l2ZU1heGltdW0mJmU9PT10Lm1heGltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUse3ZhbHVlOmUsbWF4aW11bTp0Lm1heGltdW19LFwiXCIsXCIvZXhjbHVzaXZlTWF4aW11bVwiLG51bGwsZSx0KX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVOYU49ZnVuY3Rpb24oZSx0KXtyZXR1cm5cIm51bWJlclwiIT10eXBlb2YgZT9udWxsOmlzTmFOKGUpPT09ITB8fGU9PT0xLzB8fGU9PT0tKDEvMCk/dGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9OT1RfQV9OVU1CRVIse3ZhbHVlOmV9LFwiXCIsXCIvdHlwZVwiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMudmFsaWRhdGVTdHJpbmdMZW5ndGgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlU3RyaW5nUGF0dGVybihlLHQscil8fG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nTGVuZ3RoPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGU/bnVsbDp2b2lkIDAhPT10Lm1pbkxlbmd0aCYmZS5sZW5ndGg8dC5taW5MZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2LlNUUklOR19MRU5HVEhfU0hPUlQse2xlbmd0aDplLmxlbmd0aCxtaW5pbXVtOnQubWluTGVuZ3RofSxcIlwiLFwiL21pbkxlbmd0aFwiLG51bGwsZSx0KTp2b2lkIDAhPT10Lm1heExlbmd0aCYmZS5sZW5ndGg+dC5tYXhMZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2LlNUUklOR19MRU5HVEhfTE9ORyx7bGVuZ3RoOmUubGVuZ3RoLG1heGltdW06dC5tYXhMZW5ndGh9LFwiXCIsXCIvbWF4TGVuZ3RoXCIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nUGF0dGVybj1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHxcInN0cmluZ1wiIT10eXBlb2YgdC5wYXR0ZXJuJiYhKHQucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpcmV0dXJuIG51bGw7dmFyIHI7aWYodC5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKXI9dC5wYXR0ZXJuO2Vsc2V7dmFyIG4sbz1cIlwiLGk9dC5wYXR0ZXJuLm1hdGNoKC9eXFwvKC4rKVxcLyhbaW1nXSopJC8pO2k/KG49aVsxXSxvPWlbMl0pOm49dC5wYXR0ZXJuLHI9bmV3IFJlZ0V4cChuLG8pfXJldHVybiByLnRlc3QoZSk/bnVsbDp0aGlzLmNyZWF0ZUVycm9yKHYuU1RSSU5HX1BBVFRFUk4se3BhdHRlcm46dC5wYXR0ZXJufSxcIlwiLFwiL3BhdHRlcm5cIixudWxsLGUsdCl9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXk9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP3RoaXMudmFsaWRhdGVBcnJheUxlbmd0aChlLHQscil8fHRoaXMudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGUsdCxyKXx8dGhpcy52YWxpZGF0ZUFycmF5SXRlbXMoZSx0LHIpfHxudWxsOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlMZW5ndGg9ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gdm9pZCAwIT09dC5taW5JdGVtcyYmZS5sZW5ndGg8dC5taW5JdGVtcyYmKHI9dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX0xFTkdUSF9TSE9SVCx7bGVuZ3RoOmUubGVuZ3RoLG1pbmltdW06dC5taW5JdGVtc30sXCJcIixcIi9taW5JdGVtc1wiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOnZvaWQgMCE9PXQubWF4SXRlbXMmJmUubGVuZ3RoPnQubWF4SXRlbXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9MRU5HVEhfTE9ORyx7bGVuZ3RoOmUubGVuZ3RoLG1heGltdW06dC5tYXhJdGVtc30sXCJcIixcIi9tYXhJdGVtc1wiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcz1mdW5jdGlvbihlLHQpe2lmKHQudW5pcXVlSXRlbXMpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspZm9yKHZhciBvPXIrMTtvPGUubGVuZ3RoO28rKylpZihuKGVbcl0sZVtvXSkpe3ZhciBpPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9VTklRVUUse21hdGNoMTpyLG1hdGNoMjpvfSxcIlwiLFwiL3VuaXF1ZUl0ZW1zXCIsbnVsbCxlLHQpO2lmKHRoaXMuaGFuZGxlRXJyb3IoaSkpcmV0dXJuIGl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlJdGVtcz1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5pdGVtcylyZXR1cm4gbnVsbDt2YXIgbixvO2lmKEFycmF5LmlzQXJyYXkodC5pdGVtcykpe2ZvcihvPTA7bzxlLmxlbmd0aDtvKyspaWYobzx0Lml0ZW1zLmxlbmd0aCl7aWYobj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5pdGVtc1tvXSxbb10sW1wiaXRlbXNcIixvXSxyK1wiL1wiK28pKXJldHVybiBufWVsc2UgaWYodm9pZCAwIT09dC5hZGRpdGlvbmFsSXRlbXMpaWYoXCJib29sZWFuXCI9PXR5cGVvZiB0LmFkZGl0aW9uYWxJdGVtcyl7aWYoIXQuYWRkaXRpb25hbEl0ZW1zJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuQVJSQVlfQURESVRJT05BTF9JVEVNUyx7fSxcIi9cIitvLFwiL2FkZGl0aW9uYWxJdGVtc1wiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbEl0ZW1zLFtvXSxbXCJhZGRpdGlvbmFsSXRlbXNcIl0scitcIi9cIitvKSlyZXR1cm4gbn1lbHNlIGZvcihvPTA7bzxlLmxlbmd0aDtvKyspaWYobj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5pdGVtcyxbb10sW1wiaXRlbXNcIl0scitcIi9cIitvKSlyZXR1cm4gbjtyZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3Q9ZnVuY3Rpb24oZSx0LHIpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZXx8QXJyYXkuaXNBcnJheShlKT9udWxsOnRoaXMudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcyhlLHQscil8fHRoaXMudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyhlLHQscil8fG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcz1mdW5jdGlvbihlLHQpe3ZhciByLG49T2JqZWN0LmtleXMoZSk7cmV0dXJuIHZvaWQgMCE9PXQubWluUHJvcGVydGllcyYmbi5sZW5ndGg8dC5taW5Qcm9wZXJ0aWVzJiYocj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTSx7cHJvcGVydHlDb3VudDpuLmxlbmd0aCxtaW5pbXVtOnQubWluUHJvcGVydGllc30sXCJcIixcIi9taW5Qcm9wZXJ0aWVzXCIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6dm9pZCAwIT09dC5tYXhQcm9wZXJ0aWVzJiZuLmxlbmd0aD50Lm1heFByb3BlcnRpZXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNLHtwcm9wZXJ0eUNvdW50Om4ubGVuZ3RoLG1heGltdW06dC5tYXhQcm9wZXJ0aWVzfSxcIlwiLFwiL21heFByb3BlcnRpZXNcIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PXQucmVxdWlyZWQpZm9yKHZhciByPTA7cjx0LnJlcXVpcmVkLmxlbmd0aDtyKyspe3ZhciBuPXQucmVxdWlyZWRbcl07aWYodm9pZCAwPT09ZVtuXSl7dmFyIG89dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9SRVFVSVJFRCx7a2V5Om59LFwiXCIsXCIvcmVxdWlyZWQvXCIrcixudWxsLGUsdCk7aWYodGhpcy5oYW5kbGVFcnJvcihvKSlyZXR1cm4gb319cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcz1mdW5jdGlvbihlLHQscil7dmFyIG47Zm9yKHZhciBvIGluIGUpe3ZhciBpPXIrXCIvXCIrby5yZXBsYWNlKC9+L2csXCJ+MFwiKS5yZXBsYWNlKC9cXC8vZyxcIn4xXCIpLGE9ITE7aWYodm9pZCAwIT09dC5wcm9wZXJ0aWVzJiZ2b2lkIDAhPT10LnByb3BlcnRpZXNbb10mJihhPSEwLG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQucHJvcGVydGllc1tvXSxbb10sW1wicHJvcGVydGllc1wiLG9dLGkpKSlyZXR1cm4gbjtpZih2b2lkIDAhPT10LnBhdHRlcm5Qcm9wZXJ0aWVzKWZvcih2YXIgcyBpbiB0LnBhdHRlcm5Qcm9wZXJ0aWVzKXt2YXIgdT1uZXcgUmVnRXhwKHMpO2lmKHUudGVzdChvKSYmKGE9ITAsbj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5wYXR0ZXJuUHJvcGVydGllc1tzXSxbb10sW1wicGF0dGVyblByb3BlcnRpZXNcIixzXSxpKSkpcmV0dXJuIG59aWYoYSl0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSk7ZWxzZSBpZih2b2lkIDAhPT10LmFkZGl0aW9uYWxQcm9wZXJ0aWVzKXtpZih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSksXCJib29sZWFuXCI9PXR5cGVvZiB0LmFkZGl0aW9uYWxQcm9wZXJ0aWVzKXtpZighdC5hZGRpdGlvbmFsUHJvcGVydGllcyYmKG49dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVMse2tleTpvfSxcIlwiLFwiL2FkZGl0aW9uYWxQcm9wZXJ0aWVzXCIsbnVsbCxlLHQpLnByZWZpeFdpdGgobyxudWxsKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbFByb3BlcnRpZXMsW29dLFtcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCJdLGkpKXJldHVybiBufWVsc2UgdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYhdGhpcy5rbm93blByb3BlcnR5UGF0aHNbaV0mJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2ldPSEwKX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2lmKHZvaWQgMCE9PXQuZGVwZW5kZW5jaWVzKWZvcih2YXIgbyBpbiB0LmRlcGVuZGVuY2llcylpZih2b2lkIDAhPT1lW29dKXt2YXIgaT10LmRlcGVuZGVuY2llc1tvXTtpZihcInN0cmluZ1wiPT10eXBlb2YgaSl7aWYodm9pZCAwPT09ZVtpXSYmKG49dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9ERVBFTkRFTkNZX0tFWSx7a2V5Om8sbWlzc2luZzppfSxcIlwiLFwiXCIsbnVsbCxlLHQpLnByZWZpeFdpdGgobnVsbCxvKS5wcmVmaXhXaXRoKG51bGwsXCJkZXBlbmRlbmNpZXNcIiksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihBcnJheS5pc0FycmF5KGkpKWZvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKXt2YXIgcz1pW2FdO2lmKHZvaWQgMD09PWVbc10mJihuPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfREVQRU5ERU5DWV9LRVkse2tleTpvLG1pc3Npbmc6c30sXCJcIixcIi9cIithLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbykucHJlZml4V2l0aChudWxsLFwiZGVwZW5kZW5jaWVzXCIpLHRoaXMuaGFuZGxlRXJyb3IobikpKXJldHVybiBufWVsc2UgaWYobj10aGlzLnZhbGlkYXRlQWxsKGUsaSxbXSxbXCJkZXBlbmRlbmNpZXNcIixvXSxyKSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVDb21iaW5hdGlvbnM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlQWxsT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQW55T2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT25lT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTm90KGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBbGxPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5hbGxPZilyZXR1cm4gbnVsbDtmb3IodmFyIG4sbz0wO288dC5hbGxPZi5sZW5ndGg7bysrKXt2YXIgaT10LmFsbE9mW29dO2lmKG49dGhpcy52YWxpZGF0ZUFsbChlLGksW10sW1wiYWxsT2ZcIixvXSxyKSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBbnlPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5hbnlPZilyZXR1cm4gbnVsbDt2YXIgbixvLGk9W10sYT10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMpO2Zvcih2YXIgcz0hMCx1PTA7dTx0LmFueU9mLmxlbmd0aDt1Kyspe3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30pO3ZhciBjPXQuYW55T2ZbdV0sbD10aGlzLmVycm9ycy5sZW5ndGgsZj10aGlzLnZhbGlkYXRlQWxsKGUsYyxbXSxbXCJhbnlPZlwiLHVdLHIpO2lmKG51bGw9PT1mJiZsPT09dGhpcy5lcnJvcnMubGVuZ3RoKXtpZih0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLGEpLHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyl7Zm9yKHZhciBkIGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKW9bZF09ITAsZGVsZXRlIG5bZF07Zm9yKHZhciBwIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpb1twXXx8KG5bcF09ITApO3M9ITE7Y29udGludWV9cmV0dXJuIG51bGx9ZiYmaS5wdXNoKGYucHJlZml4V2l0aChudWxsLFwiXCIrdSkucHJlZml4V2l0aChudWxsLFwiYW55T2ZcIikpfXJldHVybiB0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPW4sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9bykscz8oaT1pLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShhKSksdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxhKSx0aGlzLmNyZWF0ZUVycm9yKHYuQU5ZX09GX01JU1NJTkcse30sXCJcIixcIi9hbnlPZlwiLGksZSx0KSk6dm9pZCAwfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9uZU9mPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10Lm9uZU9mKXJldHVybiBudWxsO3ZhciBuLG8saT1udWxsLGE9W10scz10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMpO2Zvcih2YXIgdT0wO3U8dC5vbmVPZi5sZW5ndGg7dSsrKXt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgYz10Lm9uZU9mW3VdLGw9dGhpcy5lcnJvcnMubGVuZ3RoLGY9dGhpcy52YWxpZGF0ZUFsbChlLGMsW10sW1wib25lT2ZcIix1XSxyKTtpZihudWxsPT09ZiYmbD09PXRoaXMuZXJyb3JzLmxlbmd0aCl7aWYobnVsbCE9PWkpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAscyksdGhpcy5jcmVhdGVFcnJvcih2Lk9ORV9PRl9NVUxUSVBMRSx7aW5kZXgxOmksaW5kZXgyOnV9LFwiXCIsXCIvb25lT2ZcIixudWxsLGUsdCk7aWYoaT11LHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyl7Zm9yKHZhciBkIGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKW9bZF09ITAsZGVsZXRlIG5bZF07Zm9yKHZhciBwIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpb1twXXx8KG5bcF09ITApfX1lbHNlIGYmJmEucHVzaChmKX1yZXR1cm4gdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLG51bGw9PT1pPyhhPWEuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHMpKSx0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3Iodi5PTkVfT0ZfTUlTU0lORyx7fSxcIlwiLFwiL29uZU9mXCIsYSxlLHQpKToodGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxzKSxudWxsKX0saC5wcm90b3R5cGUudmFsaWRhdGVOb3Q9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQubm90KXJldHVybiBudWxsO3ZhciBuLG8saT10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMsdGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSk7dmFyIGE9dGhpcy52YWxpZGF0ZUFsbChlLHQubm90LG51bGwsbnVsbCxyKSxzPXRoaXMuZXJyb3JzLnNsaWNlKGkpO3JldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLGkpLHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9bix0aGlzLmtub3duUHJvcGVydHlQYXRocz1vKSxudWxsPT09YSYmMD09PXMubGVuZ3RoP3RoaXMuY3JlYXRlRXJyb3Iodi5OT1RfUEFTU0VELHt9LFwiXCIsXCIvbm90XCIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlSHlwZXJtZWRpYT1mdW5jdGlvbihlLHQsbil7aWYoIXQubGlua3MpcmV0dXJuIG51bGw7Zm9yKHZhciBvLGk9MDtpPHQubGlua3MubGVuZ3RoO2krKyl7dmFyIGE9dC5saW5rc1tpXTtpZihcImRlc2NyaWJlZGJ5XCI9PT1hLnJlbCl7Zm9yKHZhciBzPW5ldyByKGEuaHJlZiksdT0hMCxjPTA7YzxzLnZhck5hbWVzLmxlbmd0aDtjKyspaWYoIShzLnZhck5hbWVzW2NdaW4gZSkpe3U9ITE7YnJlYWt9aWYodSl7dmFyIGw9cy5maWxsRnJvbU9iamVjdChlKSxmPXskcmVmOmx9O2lmKG89dGhpcy52YWxpZGF0ZUFsbChlLGYsW10sW1wibGlua3NcIixpXSxuKSlyZXR1cm4gb319fX07dmFyIHY9e0lOVkFMSURfVFlQRTowLEVOVU1fTUlTTUFUQ0g6MSxBTllfT0ZfTUlTU0lORzoxMCxPTkVfT0ZfTUlTU0lORzoxMSxPTkVfT0ZfTVVMVElQTEU6MTIsTk9UX1BBU1NFRDoxMyxOVU1CRVJfTVVMVElQTEVfT0Y6MTAwLE5VTUJFUl9NSU5JTVVNOjEwMSxOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6MTAyLE5VTUJFUl9NQVhJTVVNOjEwMyxOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6MTA0LE5VTUJFUl9OT1RfQV9OVU1CRVI6MTA1LFNUUklOR19MRU5HVEhfU0hPUlQ6MjAwLFNUUklOR19MRU5HVEhfTE9ORzoyMDEsU1RSSU5HX1BBVFRFUk46MjAyLE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06MzAwLE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06MzAxLE9CSkVDVF9SRVFVSVJFRDozMDIsT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzozMDMsT0JKRUNUX0RFUEVOREVOQ1lfS0VZOjMwNCxBUlJBWV9MRU5HVEhfU0hPUlQ6NDAwLEFSUkFZX0xFTkdUSF9MT05HOjQwMSxBUlJBWV9VTklRVUU6NDAyLEFSUkFZX0FERElUSU9OQUxfSVRFTVM6NDAzLEZPUk1BVF9DVVNUT006NTAwLEtFWVdPUkRfQ1VTVE9NOjUwMSxDSVJDVUxBUl9SRUZFUkVOQ0U6NjAwLFVOS05PV05fUFJPUEVSVFk6MWUzfSxfPXt9O2Zvcih2YXIgYiBpbiB2KV9bdltiXV09Yjt2YXIgZz17SU5WQUxJRF9UWVBFOlwiSW52YWxpZCB0eXBlOiB7dHlwZX0gKGV4cGVjdGVkIHtleHBlY3RlZH0pXCIsRU5VTV9NSVNNQVRDSDpcIk5vIGVudW0gbWF0Y2ggZm9yOiB7dmFsdWV9XCIsQU5ZX09GX01JU1NJTkc6J0RhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSBcImFueU9mXCInLE9ORV9PRl9NSVNTSU5HOidEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXCJvbmVPZlwiJyxPTkVfT0ZfTVVMVElQTEU6J0RhdGEgaXMgdmFsaWQgYWdhaW5zdCBtb3JlIHRoYW4gb25lIHNjaGVtYSBmcm9tIFwib25lT2ZcIjogaW5kaWNlcyB7aW5kZXgxfSBhbmQge2luZGV4Mn0nLE5PVF9QQVNTRUQ6J0RhdGEgbWF0Y2hlcyBzY2hlbWEgZnJvbSBcIm5vdFwiJyxOVU1CRVJfTVVMVElQTEVfT0Y6XCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIG11bHRpcGxlIG9mIHttdWx0aXBsZU9mfVwiLE5VTUJFUl9NSU5JTVVNOlwiVmFsdWUge3ZhbHVlfSBpcyBsZXNzIHRoYW4gbWluaW11bSB7bWluaW11bX1cIixOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6XCJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtaW5pbXVtIHttaW5pbXVtfVwiLE5VTUJFUl9NQVhJTVVNOlwiVmFsdWUge3ZhbHVlfSBpcyBncmVhdGVyIHRoYW4gbWF4aW11bSB7bWF4aW11bX1cIixOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6XCJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtYXhpbXVtIHttYXhpbXVtfVwiLE5VTUJFUl9OT1RfQV9OVU1CRVI6XCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIHZhbGlkIG51bWJlclwiLFNUUklOR19MRU5HVEhfU0hPUlQ6XCJTdHJpbmcgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSBjaGFycyksIG1pbmltdW0ge21pbmltdW19XCIsU1RSSU5HX0xFTkdUSF9MT05HOlwiU3RyaW5nIGlzIHRvbyBsb25nICh7bGVuZ3RofSBjaGFycyksIG1heGltdW0ge21heGltdW19XCIsU1RSSU5HX1BBVFRFUk46XCJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggcGF0dGVybjoge3BhdHRlcm59XCIsT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTTpcIlRvbyBmZXcgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtaW5pbXVtIHttaW5pbXVtfVwiLE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06XCJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19XCIsT0JKRUNUX1JFUVVJUkVEOlwiTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eToge2tleX1cIixPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOlwiQWRkaXRpb25hbCBwcm9wZXJ0aWVzIG5vdCBhbGxvd2VkXCIsT0JKRUNUX0RFUEVOREVOQ1lfS0VZOlwiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSlcIixBUlJBWV9MRU5HVEhfU0hPUlQ6XCJBcnJheSBpcyB0b28gc2hvcnQgKHtsZW5ndGh9KSwgbWluaW11bSB7bWluaW11bX1cIixBUlJBWV9MRU5HVEhfTE9ORzpcIkFycmF5IGlzIHRvbyBsb25nICh7bGVuZ3RofSksIG1heGltdW0ge21heGltdW19XCIsQVJSQVlfVU5JUVVFOlwiQXJyYXkgaXRlbXMgYXJlIG5vdCB1bmlxdWUgKGluZGljZXMge21hdGNoMX0gYW5kIHttYXRjaDJ9KVwiLEFSUkFZX0FERElUSU9OQUxfSVRFTVM6XCJBZGRpdGlvbmFsIGl0ZW1zIG5vdCBhbGxvd2VkXCIsRk9STUFUX0NVU1RPTTpcIkZvcm1hdCB2YWxpZGF0aW9uIGZhaWxlZCAoe21lc3NhZ2V9KVwiLEtFWVdPUkRfQ1VTVE9NOlwiS2V5d29yZCBmYWlsZWQ6IHtrZXl9ICh7bWVzc2FnZX0pXCIsQ0lSQ1VMQVJfUkVGRVJFTkNFOlwiQ2lyY3VsYXIgJHJlZnM6IHt1cmxzfVwiLFVOS05PV05fUFJPUEVSVFk6XCJVbmtub3duIHByb3BlcnR5IChub3QgaW4gc2NoZW1hKVwifTtjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSksYy5wcm90b3R5cGUuY29uc3RydWN0b3I9YyxjLnByb3RvdHlwZS5uYW1lPVwiVmFsaWRhdGlvbkVycm9yXCIsYy5wcm90b3R5cGUucHJlZml4V2l0aD1mdW5jdGlvbihlLHQpe2lmKG51bGwhPT1lJiYoZT1lLnJlcGxhY2UoL34vZyxcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLFwifjFcIiksdGhpcy5kYXRhUGF0aD1cIi9cIitlK3RoaXMuZGF0YVBhdGgpLG51bGwhPT10JiYodD10LnJlcGxhY2UoL34vZyxcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLFwifjFcIiksdGhpcy5zY2hlbWFQYXRoPVwiL1wiK3QrdGhpcy5zY2hlbWFQYXRoKSxudWxsIT09dGhpcy5zdWJFcnJvcnMpZm9yKHZhciByPTA7cjx0aGlzLnN1YkVycm9ycy5sZW5ndGg7cisrKXRoaXMuc3ViRXJyb3JzW3JdLnByZWZpeFdpdGgoZSx0KTtyZXR1cm4gdGhpc307dmFyIEU9e30saj1mKCk7cmV0dXJuIGouYWRkTGFuZ3VhZ2UoXCJlbi1nYlwiLGcpLGoudHY0PWosan0pfSx7fV0sMTAwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIuTWVzc2FnZUZhY3Rvcnk9dm9pZCAwO3ZhciBvPWUoXCIuL21lc3NhZ2UtZmFjdG9yeS9NZXNzYWdlRmFjdG9yeVwiKSxpPW4obyk7ci5NZXNzYWdlRmFjdG9yeT1pW1wiZGVmYXVsdFwiXX0se1wiLi9tZXNzYWdlLWZhY3RvcnkvTWVzc2FnZUZhY3RvcnlcIjoxMDN9XSwxMDE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksci5NZXNzYWdlVHlwZT1yLk1lc3NhZ2U9dm9pZCAwO3ZhciBvPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksaT1uKG8pLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSxzPW4oYSksdT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpLGM9bih1KSxsPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSxmPW4obCksZD1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpLHA9bihkKSxoPWUoXCIuLi9yZVRISU5LT2JqZWN0L1JldGhpbmtPYmplY3QuanNcIikseT1uKGgpLG09ci5NZXNzYWdlPWZ1bmN0aW9uKGUpe1xuZnVuY3Rpb24gdChlLHIsbixvLGEpeygwLHNbXCJkZWZhdWx0XCJdKSh0aGlzLHQpO3ZhciB1PSgwLGZbXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsaVtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMpKTtyZXR1cm4gdS5pZD1lLHUuZnJvbT1yLHUudG89bix1LnR5cGU9byx1LmJvZHk9YSx1fXJldHVybigwLHBbXCJkZWZhdWx0XCJdKSh0LGUpLCgwLGNbXCJkZWZhdWx0XCJdKSh0LFt7a2V5OlwiYXNzZXJ0SWRlbnRpdHlcIix2YWx1ZTpmdW5jdGlvbihlLHQpe2lmKCFlfHwhdCl0aHJvdyBuZXcgRXJyb3IoXCJtZXNzYWdlLCB0b2tlbiB0byBiZSByZW1vdmVkLCBhbmQgYXNzZXJ0ZWRJZGVudGl0eSBtdXN0IGJlIHByb3ZpZGVkXCIpO3ZhciByPXRoaXMuYm9keTtyZXR1cm4gci5pZFRva2VuPW51bGwsci5hc3NlcnRlZElkZW50aXR5PXQsdGhpcy5ib2R5PXIsdGhpc319LHtrZXk6XCJhZGRJZFRva2VuXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwibWVzc2FnZSwgdG9rZW4gdG8gYmUgYWRkZWQsIG11c3QgYmUgcHJvdmlkZWRcIik7dmFyIHQ9dGhpcy5ib2R5O3JldHVybiB0LmlkVG9rZW49ZSx0aGlzLmJvZHk9dCx0aGlzfX0se2tleTpcImFkZEFjY2Vzc1Rva2VuXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwibWVzc2FnZSwgdG9rZW4gdG8gYmUgYWRkZWQsIG11c3QgYmUgcHJvdmlkZWRcIik7dmFyIHQ9dGhpcy5ib2R5O3JldHVybiB0LmFjY2Vzc1Rva2VuPWUsdGhpcy5ib2R5PXQsdGhpc319XSksdH0oeVtcImRlZmF1bHRcIl0pO3IuTWVzc2FnZVR5cGU9e0NSRUFURTpcImNyZWF0ZVwiLFJFQUQ6XCJyZWFkXCIsVVBEQVRFOlwidXBkYXRlXCIsREVMRVRFOlwiZGVsZXRlXCIsU1VCU0NSSUJFOlwic3Vic2NyaWJlXCIsVU5TVUJTQ1JJQkU6XCJ1bnN1YnNjcmliZVwiLFJFU1BPTlNFOlwicmVzcG9uc2VcIixGT1JXQVJEOlwiZm9yd2FyZFwiLEVYRUNVVEU6XCJleGVjdXRlXCJ9O3JbXCJkZWZhdWx0XCJdPW19LHtcIi4uL3JlVEhJTktPYmplY3QvUmV0aGlua09iamVjdC5qc1wiOjEwNCxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiOjUsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjoxMCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiOjExLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCI6MTIsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiOjEzfV0sMTAyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fWZ1bmN0aW9uIG8oZSl7dmFyIHQ9KDAsdVtcImRlZmF1bHRcIl0pKGUpLnJlZHVjZShmdW5jdGlvbih0LHIpe3JldHVybiB0W2Vbcl1dPXIsdH0se30pO3JldHVybigwLGFbXCJkZWZhdWx0XCJdKSgoMCx1W1wiZGVmYXVsdFwiXSkoZSkucmVkdWNlKGZ1bmN0aW9uKHQscil7cmV0dXJuIHRbcl09ZVtyXSx0fSxmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0pKX1PYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyLlVQREFURV9PUEVSQVRJT049ci5BVFRSSUJVVEVfVFlQRT1yLlJFQVNPTl9QSFJBU0U9ci5SRVNQT05TRV9DT0RFPXIuRXhlY3V0ZU1lc3NhZ2VCb2R5PXIuUmVzcG9uc2VNZXNzYWdlQm9keT1yLkZvcndhcmRNZXNzYWdlQm9keT1yLlVwZGF0ZU1lc3NhZ2VCb2R5PXIuRGVsZXRlTWVzc2FnZUJvZHk9ci5SZWFkTWVzc2FnZUJvZHk9ci5DcmVhdGVNZXNzYWdlQm9keT1yLk1lc3NhZ2VCb2R5PXZvaWQgMDt2YXIgaT1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9mcmVlemVcIiksYT1uKGkpLHM9ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qva2V5c1wiKSx1PW4ocyksYz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLGw9bihjKSxmPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIiksZD1uKGYpLHA9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSxoPW4ocCkseT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIiksbT1uKHkpLHY9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSxfPW4odik7ci5FbnVtPW87dmFyIGI9ZShcIi4uL3JlVEhJTktPYmplY3QvUmV0aGlua09iamVjdC5qc1wiKSxnPW4oYiksRT1yLk1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpKXsoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KTt2YXIgYT0oMCxtW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzKSk7cmV0dXJuIGEuaWRUb2tlbj1lLGEuYWNjZXNzVG9rZW49cixhLnJlc291cmNlPW4sYS5zY2hlbWE9byxhLmFzc2VydGVkSWRlbnRpdHk9aSxhfXJldHVybigwLF9bXCJkZWZhdWx0XCJdKSh0LGUpLCgwLGhbXCJkZWZhdWx0XCJdKSh0LFt7a2V5OlwiYWRkVmlhXCIsdmFsdWU6ZnVuY3Rpb24oZSl7aWYoIWUpdGhyb3cgbmV3IEVycm9yKFwidmlhIFVSTCB0byBiZSBhZGRlZCwgbXVzdCBiZSBwcm92aWRlZFwiKTtyZXR1cm4gdGhpcy52aWE9ZSx0aGlzfX1dKSx0fShnW1wiZGVmYXVsdFwiXSksaj0oci5DcmVhdGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpe2lmKCgwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpLCFlKXRocm93IG5ldyBFcnJvcihcIlRoZSB2YWx1ZSBwYXJhbWV0ZXIgaXMgbnVsbFwiKTt2YXIgdT0oMCxtW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzLG4sbyxpLGEscyxhLHMpKTtyZXR1cm4gdS52YWx1ZT1lLHImJih1LnBvbGljeT1yKSx1fXJldHVybigwLF9bXCJkZWZhdWx0XCJdKSh0LGUpLHR9KEUpLHIuUmVhZE1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEscyx1KXsoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KTt2YXIgYz0oMCxtW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiBhJiYoYy5hdHRyaWJ1dGU9YSkscyYmKGMuY3JpdGVyaWFTeW50YXg9cyksdSYmKGMuY3JpdGVyaWE9dSksY31yZXR1cm4oMCxfW1wiZGVmYXVsdFwiXSkodCxlKSx0fShFKSxyLkRlbGV0ZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEpe2lmKCgwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpLG4gaW5zdGFuY2VvZiBBcnJheSl7dmFyIHM9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbnVsbCxvLGkpKTtzLmNoaWxkcmVuUmVzb3VyY2VzPW59ZWxzZSB2YXIgcz0oMCxtW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiBhJiYocy5hdHRyaWJ1dGU9YSksKDAsbVtcImRlZmF1bHRcIl0pKHMpfXJldHVybigwLF9bXCJkZWZhdWx0XCJdKSh0LGUpLHR9KEUpLHIuVXBkYXRlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzKXsoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KTt2YXIgdT0oMCxtW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiB1LmF0dHJpYnV0ZT1hLHUudmFsdWU9cyx1fXJldHVybigwLF9bXCJkZWZhdWx0XCJdKSh0LGUpLCgwLGhbXCJkZWZhdWx0XCJdKSh0LFt7a2V5OlwiYWRkQXR0cmlidXRlVHlwZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2UmJih0aGlzLmF0dHJpYnV0ZVR5cGU9ZSl9fSx7a2V5OlwiYWRkT3BlcmF0aW9uXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSYmKHRoaXMub3BlcmF0aW9uPWUpfX1dKSx0fShFKSxyLkZvcndhcmRNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhKXsoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KTt2YXIgcz0oMCxtW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiBzLm1lc3NhZ2U9YSxzfXJldHVybigwLF9bXCJkZWZhdWx0XCJdKSh0LGUpLHR9KEUpLHIuUmVzcG9uc2VNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIGE9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbikpO3JldHVybiBvJiYoYS5jb2RlPW8sYS5kZXNjcmlwdGlvbj1qW29dKSxpJiYoYS52YWx1ZT1pKSxhfXJldHVybigwLF9bXCJkZWZhdWx0XCJdKSh0LGUpLHR9KEUpLHIuRXhlY3V0ZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEscyl7KDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIHU9KDAsbVtcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxsW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcyxlLHIsbixvLGkpKTtyZXR1cm4gdS5tZXRob2Q9YSxzJiYocyBpbnN0YW5jZW9mIEFycmF5P3UucGFyYW1zPXM6dS5wYXJhbXM9W3NdKSx1fXJldHVybigwLF9bXCJkZWZhdWx0XCJdKSh0LGUpLHR9KEUpLHIuUkVTUE9OU0VfQ09ERT1vKHsxMDA6XCIxMDBcIiwxMDE6XCIxMDFcIiwyMDA6XCIyMDBcIiwyMDE6XCIyMDFcIiwyMDI6XCIyMDJcIiwyMDM6XCIyMDNcIiwyMDQ6XCIyMDRcIiwyMDU6XCIyMDVcIiwyMDY6XCIyMDZcIiwzMDA6XCIzMDBcIiwzMDE6XCIzMDFcIiwzMDI6XCIzMDJcIiwzMDM6XCIzMDNcIiwzMDQ6XCIzMDRcIiwzMDU6XCIzMDVcIiwzMDc6XCIzMDdcIiw0MDA6XCI0MDBcIiw0MDE6XCI0MDFcIiw0MDI6XCI0MDJcIiw0MDM6XCI0MDNcIiw0MDQ6XCI0MDRcIiw0MDU6XCI0MDVcIiw0MDY6XCI0MDZcIiw0MDc6XCI0MDdcIiw0MDg6XCI0MDhcIiw0MDk6XCI0MDlcIiw0MTA6XCI0MTBcIiw0MTE6XCI0MTFcIiw0MTI6XCI0MTJcIiw0MTM6XCI0MTNcIiw0MTQ6XCI0MTRcIiw0MTU6XCI0MTVcIiw0MTY6XCI0MTZcIiw0MTc6XCI0MTdcIiw0MjY6XCI0MjZcIiw1MDA6XCI1MDBcIiw1MDE6XCI1MDFcIiw1MDI6XCI1MDJcIiw1MDM6XCI1MDNcIiw1MDQ6XCI1MDRcIiw1MDU6XCI1MDVcIn0pLHIuUkVBU09OX1BIUkFTRT1vKHsxMDA6XCJDb250aW51ZVwiLDEwMTpcIlN3aXRjaGluZyBQcm90b2NvbHNcIiwyMDA6XCJPS1wiLDIwMTpcIkNyZWF0ZWRcIiwyMDI6XCJBY2NlcHRlZFwiLDIwMzpcIk5vbi1BdXRob3JpdGF0aXZlIEluZm9ybWF0aW9uXCIsMjA0OlwiTm8gQ29udGVudFwiLDIwNTpcIlJlc2V0IENvbnRlbnRcIiwyMDY6XCJQYXJ0aWFsIENvbnRlbnRcIiwzMDA6XCJNdWx0aXBsZSBDaG9pY2VzXCIsMzAxOlwiTW92ZWQgUGVybWFuZW50bHlcIiwzMDI6XCJGb3VuZFwiLDMwMzpcIlNlZSBPdGhlclwiLDMwNDpcIk5vdCBNb2RpZmllZFwiLDMwNTpcIlVzZSBQcm94eVwiLDMwNzpcIlRlbXBvcmFyeSBSZWRpcmVjdFwiLDQwMDpcIkJhZCBSZXF1ZXN0XCIsNDAxOlwiVW5hdXRob3JpemVkXCIsNDAyOlwiUGF5bWVudCBSZXF1aXJlZFwiLDQwMzpcIkZvcmJpZGRlblwiLDQwNDpcIk5vdCBGb3VuZFwiLDQwNTpcIk1ldGhvZCBOb3QgQWxsb3dlZFwiLDQwNjpcIk5vdCBBY2NlcHRhYmxlXCIsNDA3OlwiUHJveHkgQXV0aGVudGljYXRpb24gUmVxdWlyZWRcIiw0MDg6XCJSZXF1ZXN0IFRpbWVvdXRcIiw0MDk6XCJDb25mbGljdFwiLDQxMDpcIkdvbmVcIiw0MTE6XCJMZW5ndGggUmVxdWlyZWRcIiw0MTI6XCJQcmVjb25kaXRpb24gRmFpbGVkXCIsNDEzOlwiUGF5bG9hZCBUb28gTGFyZ2VcIiw0MTQ6XCJSZXF1ZXN0LVVSSSBUb28gTG9uZ1wiLDQxNTpcIlVuc3VwcG9ydGVkIE1lZGlhIFR5cGVcIiw0MTY6XCJSYW5nZSBOb3QgU2F0aXNmaWFibGVcIiw0MTc6XCJFeHBlY3RhdGlvbiBGYWlsZWRcIiw0MjY6XCJVcGdyYWRlIFJlcXVpcmVkXCIsNTAwOlwiSW50ZXJuYWwgU2VydmVyIEVycm9yXCIsNTAxOlwiTm90IEltcGxlbWVudGVkXCIsNTAyOlwiQmFkIEdhdGV3YXlcIiw1MDM6XCJTZXJ2aWNlIFVuYXZhaWxhYmxlXCIsNTA0OlwiR2F0ZXdheSBUaW1lLW91dFwiLDUwNTpcIkhUVFAgVmVyc2lvbiBOb3QgU3VwcG9ydGVkXCJ9KSk7ci5BVFRSSUJVVEVfVFlQRT1vKHtPQkpFQ1Q6XCJPQkpFQ1RcIixBUlJBWTpcIkFSUkFZXCJ9KSxyLlVQREFURV9PUEVSQVRJT049byh7QUREOlwiQUREXCIsUkVNT1ZFOlwiUkVNT1ZFXCJ9KTtyW1wiZGVmYXVsdFwiXT1FfSx7XCIuLi9yZVRISU5LT2JqZWN0L1JldGhpbmtPYmplY3QuanNcIjoxMDQsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2ZyZWV6ZVwiOjQsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIjo1LFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzXCI6NixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjEwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI6MTEsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTN9XSwxMDM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksci5JZEdlbmVyYXRvcj12b2lkIDA7dmFyIG89ZShcImJhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3JcIiksaT1uKG8pLGE9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSxzPW4oYSksdT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpLGM9bih1KSxsPWUoXCIuL01lc3NhZ2UuanNcIiksZj1uKGwpLGQ9ZShcIi4vTWVzc2FnZUJvZHkuanNcIikscD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXsoMCxzW1wiZGVmYXVsdFwiXSkodGhpcyxlKSx0aGlzLm15R2VuZXJhdG9yPShuZXcgaCkuaWRNYWtlcigpfXJldHVybigwLGNbXCJkZWZhdWx0XCJdKShlLFt7a2V5OlwiY3JlYXRlQ3JlYXRlTWVzc2FnZVJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcihcImZyb20sIHRvLCBhbmQgdmFsdWUgb2Ygb2JqZWN0IHRvIGJlIGNyZWF0ZWQgTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG89dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgZC5DcmVhdGVNZXNzYWdlQm9keShyLG4sKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCkpLGE9bmV3IGZbXCJkZWZhdWx0XCJdKG8sZSx0LGwuTWVzc2FnZVR5cGUuQ1JFQVRFLGkpO3JldHVybiBhfX0se2tleTpcImNyZWF0ZUZvcndhcmRNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcihcImZyb20sIHRvLCBhbmQgbWVzc2FnZSB0byBmb3J3YXJkIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBuPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLG89bmV3IGQuRm9yd2FyZE1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLHIpLGk9bmV3IGZbXCJkZWZhdWx0XCJdKG4sZSx0LGwuTWVzc2FnZVR5cGUuRk9SV0FSRCxvKTtyZXR1cm4gaX19LHtrZXk6XCJjcmVhdGVEZWxldGVNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdCl0aHJvdyBuZXcgRXJyb3IoXCJmcm9tIGFuZCB0byBwYXJhbWV0ZXJzIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBvPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGk9bmV3IGQuRGVsZXRlTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCkscixuLCh2b2lkIDApLCh2b2lkIDApKSxhPW5ldyBmW1wiZGVmYXVsdFwiXShvLGUsdCxsLk1lc3NhZ2VUeXBlLkRFTEVURSxpKTtyZXR1cm4gYX19LHtrZXk6XCJjcmVhdGVVcGRhdGVNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4sbyl7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoXCJmcm9tLCBhbmQgdG8gYW5kIHZhbHVlIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBpPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGE9bmV3IGQuVXBkYXRlTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksbiwodm9pZCAwKSwodm9pZCAwKSxvLHIpLHM9bmV3IGZbXCJkZWZhdWx0XCJdKGksZSx0LGwuTWVzc2FnZVR5cGUuVVBEQVRFLGEpO3JldHVybiBzfX0se2tleTpcImNyZWF0ZVJlYWRNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgdG8gYW5kIHRoZSByZXNvdXJjZSB0byByZWFkIGZyb20gTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG89dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgZC5SZWFkTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksciwodm9pZCAwKSwodm9pZCAwKSxuLCh2b2lkIDApLCh2b2lkIDApKSxhPW5ldyBmW1wiZGVmYXVsdFwiXShvLGUsdCxsLk1lc3NhZ2VUeXBlLlJFQUQsaSk7cmV0dXJuIGF9fSx7a2V5OlwiY3JlYXRlU3Vic2NyaWJlTWVzc2FnZVJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoXCJmcm9tLCB0byBhbmQgdGhlIHJlc291cmNlIHRvIHN1YnNjcmliZSB0byBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbj10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxvPW5ldyBkLk1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLHIsKHZvaWQgMCksKHZvaWQgMCkpLGk9bmV3IGZbXCJkZWZhdWx0XCJdKG4sZSx0LGwuTWVzc2FnZVR5cGUuU1VCU0NSSUJFLG8pO3JldHVybiBpfX0se2tleTpcImNyZWF0ZVVuc3Vic2NyaWJlTWVzc2FnZVJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoXCJmcm9tLCB0byBhbmQgdGhlIHJlc291cmNlIHRvIHN1YnNjcmliZSB0byBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbj10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxvPW5ldyBkLk1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLHIsKHZvaWQgMCksKHZvaWQgMCkpLGk9bmV3IGZbXCJkZWZhdWx0XCJdKG4sZSx0LGwuTWVzc2FnZVR5cGUuVU5TVUJTQ1JJQkUsbyk7cmV0dXJuIGl9fSx7a2V5OlwiY3JlYXRlRXhlY3V0ZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoXCJmcm9tLCB0byBhbmQgdGhlIG1ldGhvZCB0byBleGVjdXRlIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBvPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLGk9bmV3IGQuRXhlY3V0ZU1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLHIsbiksYT1uZXcgZltcImRlZmF1bHRcIl0obyxlLHQsbC5NZXNzYWdlVHlwZS5FWEVDVVRFLGkpO3JldHVybiBhfX0se2tleTpcImNyZWF0ZU1lc3NhZ2VSZXNwb25zZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCF0KXRocm93IG5ldyBFcnJvcihcInJlc3BvbnNlIENvZGUgTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG89bmV3IGQuUmVzcG9uc2VNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSx0LHIsbik7cmV0dXJuIG5ldyBmW1wiZGVmYXVsdFwiXShlLmlkLGUudG8sZS5mcm9tLGwuTWVzc2FnZVR5cGUuUkVTUE9OU0Usbyl9fSx7a2V5OlwiZ2VuZXJhdGVNZXNzYWdlUmVzcG9uc2VcIix2YWx1ZTpmdW5jdGlvbihlLHQscil7aWYoIWV8fCF0KXRocm93IG5ldyBFcnJvcihcIm1lc3NhZ2UgYW5kIHJlc3BvbnNlIGNvZGUgTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG49ZS5ib2R5LG89bi5pZFRva2VuLGk9bi5hY2Nlc3NUb2tlbixhPW4ucmVzb3VyY2Uscz1uZXcgZC5SZXNwb25zZU1lc3NhZ2VCb2R5KG8saSxhLHQsciksdT10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZTtyZXR1cm4gbmV3IGZbXCJkZWZhdWx0XCJdKHUsZS50byxlLmZyb20sbC5NZXNzYWdlVHlwZS5SRVNQT05TRSxzKX19XSksZX0oKSxoPXIuSWRHZW5lcmF0b3I9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7KDAsc1tcImRlZmF1bHRcIl0pKHRoaXMsZSl9cmV0dXJuKDAsY1tcImRlZmF1bHRcIl0pKGUsW3trZXk6XCJpZE1ha2VyXCIsdmFsdWU6aVtcImRlZmF1bHRcIl0ubWFyayhmdW5jdGlvbiB0KCl7dmFyIGU7cmV0dXJuIGlbXCJkZWZhdWx0XCJdLndyYXAoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6ZT0xO2Nhc2UgMTppZighKGU8MWU2KSl7dC5uZXh0PTY7YnJlYWt9cmV0dXJuIHQubmV4dD00LGUrKztjYXNlIDQ6dC5uZXh0PTE7YnJlYWs7Y2FzZSA2OmNhc2VcImVuZFwiOnJldHVybiB0LnN0b3AoKX19LHQsdGhpcyl9KX1dKSxlfSgpO3JbXCJkZWZhdWx0XCJdPXB9LHtcIi4vTWVzc2FnZS5qc1wiOjEwMSxcIi4vTWVzc2FnZUJvZHkuanNcIjoxMDIsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjoxMCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiOjExLFwiYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvclwiOjE1fV0sMTA0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIuUmV0aGlua09iamVjdD12b2lkIDA7dmFyIG89ZShcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeVwiKSxpPW4obyksYT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpLHM9bihhKSx1PWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIiksYz1uKHUpLGw9ZShcInR2NFwiKSxmPW4obCksZD1yLlJldGhpbmtPYmplY3Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7KDAsc1tcImRlZmF1bHRcIl0pKHRoaXMsZSl9cmV0dXJuKDAsY1tcImRlZmF1bHRcIl0pKGUsW3trZXk6XCJ2YWxpZGF0ZVwiLHZhbHVlOmZ1bmN0aW9uKGUpe2ZbXCJkZWZhdWx0XCJdLmFkZFNjaGVtYShlLmlkLGUpO3ZhciB0PWZbXCJkZWZhdWx0XCJdLnZhbGlkYXRlTXVsdGlwbGUoSlNPTi5wYXJzZSgoMCxpW1wiZGVmYXVsdFwiXSkodGhpcykpLGUpO3JldHVybiB0LmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uKGUpe2RlbGV0ZSBlLnN0YWNrfSksKCF0LnZhbGlkfHx0Lm1pc3NpbmcubGVuZ3RoPjApJiYoY29uc29sZS53YXJuKFwiT2JqZWN0IHZhbGlkYXRpb24gXCIrKHQudmFsaWQ/XCJzdWNjZWVkZWQsIGJ1dCBzY2hlbWEgY29udGFpbmVkIHJlZmVyZW5jZXM6XCI6XCJmYWlsZWQ6XCIpLCgwLGlbXCJkZWZhdWx0XCJdKSh0LG51bGwsMikpLGNvbnNvbGUubG9nKFwiT2JqZWN0OlwiLCgwLGlbXCJkZWZhdWx0XCJdKSh0aGlzLG51bGwsMikpKSx0LnZhbGlkfX1dKSxlfSgpO3JbXCJkZWZhdWx0XCJdPWR9LHtcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeVwiOjEsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIjoxMCxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiOjExLHR2NDo5OX1dfSx7fSxbMTAwXSkoMTAwKX0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWVzc2FnZUZhY3RvcnkuanMubWFwXG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8qKlxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXG4qIE1pbmltYWwgaW50ZXJmYWNlIGFuZCBpbXBsZW1lbnRhdGlvbiB0byBzZW5kIGFuZCByZWNlaXZlIG1lc3NhZ2VzLiBJdCBjYW4gYmUgcmV1c2VkIGluIG1hbnkgdHlwZSBvZiBjb21wb25lbnRzLlxuKiBDb21wb25lbnRzIHRoYXQgbmVlZCBhIG1lc3NhZ2Ugc3lzdGVtIHNob3VsZCByZWNlaXZlIHRoaXMgY2xhc3MgYXMgYSBkZXBlbmRlbmN5IG9yIGV4dGVuZCBpdC5cbiogRXh0ZW5zaW9ucyBzaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgcHJpdmF0ZSBtZXRob2RzOiBfb25Qb3N0TWVzc2FnZSBhbmQgX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lclxuKi9cbmNsYXNzIEJ1cyB7XG4gIC8qIHByaXZhdGVcbiAgX21zZ0lkOiBudW1iZXI7XG4gIF9zdWJzY3JpcHRpb25zOiA8dXJsOiBNc2dMaXN0ZW5lcltdPlxuXG4gIF9yZXNwb25zZVRpbWVPdXQ6IG51bWJlclxuICBfcmVzcG9uc2VDYWxsYmFja3M6IDx1cmwraWQ6IChtc2cpID0+IHZvaWQ+XG5cbiAgKi9cblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLl9tc2dJZCA9IDA7XG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTtcblxuICAgIF90aGlzLl9yZXNwb25zZVRpbWVPdXQgPSA1MDAwOyAvL2RlZmF1bHQgdG8gM3NcbiAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3MgPSB7fTtcblxuICAgIF90aGlzLl9yZWdpc3RlckV4dGVybmFsTGlzdGVuZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAqIFJlZ2lzdGVyIGxpc3RlbmVyIHRvIHJlY2VpdmUgbWVzc2FnZSB3aGVuIFwibXNnLnRvID09PSB1cmxcIi5cbiAgKiBTcGVjaWFsIHVybCBcIipcIiBmb3IgZGVmYXVsdCBsaXN0ZW5lciBpcyBhY2NlcHRlZCB0byBpbnRlcmNlcHQgYWxsIG1lc3NhZ2VzLlxuICAqIEBwYXJhbSB7VVJMfSB1cmwgQWRkcmVzcyB0byBpbnRlcmNlcHQsIHRoYSBpcyBpbiB0aGUgbWVzc2FnZSBcInRvXCJcbiAgKiBAcGFyYW0ge0xpc3RlbmVyfSBsaXN0ZW5lciBsaXN0ZW5lclxuICAqIEByZXR1cm4ge01zZ0xpc3RlbmVyfSBpbnN0YW5jZSBvZiBNc2dMaXN0ZW5lclxuICAqL1xuICBhZGRMaXN0ZW5lcih1cmwsIGxpc3RlbmVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBpdGVtID0gbmV3IE1zZ0xpc3RlbmVyKF90aGlzLl9zdWJzY3JpcHRpb25zLCB1cmwsIGxpc3RlbmVyKTtcbiAgICBsZXQgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1t1cmxdO1xuICAgIGlmICghaXRlbUxpc3QpIHtcbiAgICAgIGl0ZW1MaXN0ID0gW107XG4gICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1t1cmxdID0gaXRlbUxpc3Q7XG4gICAgfVxuXG4gICAgaXRlbUxpc3QucHVzaChpdGVtKTtcbiAgICByZXR1cm4gaXRlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYW51YWxseSBhZGQgYSByZXNwb25zZSBsaXN0ZW5lci4gT25seSBvbmUgbGlzdGVuZXIgcGVyIG1lc3NhZ2UgSUQgc2hvdWxkIGV4aXN0LlxuICAgKiBBVEVOVElPTiwgdGhlcmUgaXMgbm8gdGltZW91dCBmb3IgdGhpcyBsaXN0ZW5lci5cbiAgICogVGhlIGxpc3RlbmVyIHNob3VsZCBiZSByZW1vdmVkIHdpdGggYSByZW1vdmVSZXNwb25zZUxpc3RlbmVyLCBmYWlsaW5nIHRvIGRvIHRoaXMgd2lsbCByZXN1bHQgaW4gYSB1bnJlbGVhc2VkIG1lbW9yeSBwcm9ibGVtLlxuICAgKiBAcGFyYW0ge1VSTH0gdXJsIE9yaWdpbiBhZGRyZXNzIG9mIHRoZSBtZXNzYWdlIHNlbnQsIFwibXNnLmZyb21cIi5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG1zZ0lkIE1lc3NhZ2UgSUQgdGhhdCBpcyByZXR1cm5lZCBmcm9tIHRoZSBwb3N0TWVzc2FnZS5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzcG9uc2VMaXN0ZW5lciBDYWxsYmFjayBmdW5jdGlvbiBmb3IgdGhlIHJlc3BvbnNlXG4gICAqL1xuICBhZGRSZXNwb25zZUxpc3RlbmVyKHVybCwgbXNnSWQsIHJlc3BvbnNlTGlzdGVuZXIpIHtcbiAgICB0aGlzLl9yZXNwb25zZUNhbGxiYWNrc1t1cmwgKyBtc2dJZF0gPSByZXNwb25zZUxpc3RlbmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgcmVzcG9uc2UgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSB7VVJMfSB1cmwgT3JpZ2luIGFkZHJlc3Mgb2YgdGhlIG1lc3NhZ2Ugc2VudCwgXCJtc2cuZnJvbVwiLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbXNnSWQgIE1lc3NhZ2UgSUQgdGhhdCBpcyByZXR1cm5lZCBmcm9tIHRoZSBwb3N0TWVzc2FnZVxuICAgKi9cbiAgcmVtb3ZlUmVzcG9uc2VMaXN0ZW5lcih1cmwsIG1zZ0lkKSB7XG4gICAgZGVsZXRlIHRoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3VybCArIG1zZ0lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIGV4aXN0ZW50IGxpc3RlbmVycyBmb3IgdGhlIFVSTFxuICAgKiBAcGFyYW0gIHtVUkx9IHVybCBBZGRyZXNzIHJlZ2lzdGVyZWRcbiAgICovXG4gIHJlbW92ZUFsbExpc3RlbmVyc09mKHVybCkge1xuICAgIGRlbGV0ZSB0aGlzLl9zdWJzY3JpcHRpb25zW3VybF07XG4gIH1cblxuICAvKipcbiAgICogSGVscGVyIG1ldGhvZCB0byBiaW5kIGxpc3RlbmVycyAoaW4gYm90aCBkaXJlY3Rpb25zKSBpbnRvIG90aGVyIE1pbmlCdXMgdGFyZ2V0LlxuICAgKiBAcGFyYW0gIHtVUkx9IG91dFVybCBPdXRib3VuZCBVUkwsIHJlZ2lzdGVyIGxpc3RlbmVyIGZvciB1cmwgaW4gZGlyZWN0aW9uIFwidGhpcyAtPiB0YXJnZXRcIlxuICAgKiBAcGFyYW0gIHtVUkx9IGluVXJsIEluYm91bmQgVVJMLCByZWdpc3RlciBsaXN0ZW5lciBmb3IgdXJsIGluIGRpcmVjdGlvbiBcInRhcmdldCAtPiB0aGlzXCJcbiAgICogQHBhcmFtICB7TWluaUJ1c30gdGFyZ2V0IFRoZSBvdGhlciB0YXJnZXQgTWluaUJ1c1xuICAgKiBAcmV0dXJuIHtCb3VuZH0gYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHByb3BlcnRpZXMgW3RoaXNMaXN0ZW5lciwgdGFyZ2V0TGlzdGVuZXJdIGFuZCB0aGUgdW5iaW5kIG1ldGhvZC5cbiAgICovXG4gIGJpbmQob3V0VXJsLCBpblVybCwgdGFyZ2V0KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCB0aGlzTGlzdG4gPSBfdGhpcy5hZGRMaXN0ZW5lcihvdXRVcmwsIChtc2cpID0+IHtcbiAgICAgIHRhcmdldC5wb3N0TWVzc2FnZShtc2cpO1xuICAgIH0pO1xuXG4gICAgbGV0IHRhcmdldExpc3RuID0gdGFyZ2V0LmFkZExpc3RlbmVyKGluVXJsLCAobXNnKSA9PiB7XG4gICAgICBfdGhpcy5wb3N0TWVzc2FnZShtc2cpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRoaXNMaXN0ZW5lcjogdGhpc0xpc3RuLFxuICAgICAgdGFyZ2V0TGlzdGVuZXI6IHRhcmdldExpc3RuLFxuICAgICAgdW5iaW5kOiAoKSA9PiB7XG4gICAgICAgIHRoaXMudGhpc0xpc3RlbmVyLnJlbW92ZSgpO1xuICAgICAgICB0aGlzLnRhcmdldExpc3RlbmVyLnJlbW92ZSgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvL3B1Ymxpc2ggb24gZGVmYXVsdCBsaXN0ZW5lcnNcbiAgX3B1Ymxpc2hPbkRlZmF1bHQobXNnKSB7XG4gICAgLy9pcyB0aGVyZSBhbnkgXCIqXCIgKGRlZmF1bHQpIGxpc3RlbmVycz9cbiAgICBsZXQgaXRlbUxpc3QgPSB0aGlzLl9zdWJzY3JpcHRpb25zWycqJ107XG4gICAgaWYgKGl0ZW1MaXN0KSB7XG4gICAgICB0aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7XG4gICAgfVxuICB9XG5cbiAgLy9wdWJsaXNoIG9uIGEgc3Vic2NyaXB0aW9uIGxpc3QuXG4gIF9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZykge1xuICAgIGl0ZW1MaXN0LmZvckVhY2goKHN1YikgPT4ge1xuICAgICAgc3ViLl9jYWxsYmFjayhtc2cpO1xuICAgIH0pO1xuICB9XG5cbiAgX3Jlc3BvbnNlQ2FsbGJhY2soaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy9hdXRvbWF0aWMgbWFuYWdlbWVudCBvZiByZXNwb25zZSBoYW5kbGVyc1xuICAgIGlmIChyZXNwb25zZUNhbGxiYWNrKSB7XG4gICAgICBsZXQgcmVzcG9uc2VJZCA9IGluTXNnLmZyb20gKyBpbk1zZy5pZDtcbiAgICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXSA9IHJlc3BvbnNlQ2FsbGJhY2s7XG5cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBsZXQgcmVzcG9uc2VGdW4gPSBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbcmVzcG9uc2VJZF07XG4gICAgICAgIGRlbGV0ZSBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbcmVzcG9uc2VJZF07XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlRnVuKSB7XG4gICAgICAgICAgbGV0IGVycm9yTXNnID0ge1xuICAgICAgICAgICAgaWQ6IGluTXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLFxuICAgICAgICAgICAgYm9keTogeyBjb2RlOiA0MDgsIGRlc2M6ICdSZXNwb25zZSB0aW1lb3V0IScsIHZhbHVlOiBpbk1zZyB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJlc3BvbnNlRnVuKGVycm9yTXNnKTtcbiAgICAgICAgfVxuICAgICAgfSwgX3RoaXMuX3Jlc3BvbnNlVGltZU91dCk7XG4gICAgfVxuICB9XG5cbiAgX29uUmVzcG9uc2UobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmIChtc2cudHlwZSA9PT0gJ3Jlc3BvbnNlJykge1xuICAgICAgbGV0IHJlc3BvbnNlSWQgPSBtc2cudG8gKyBtc2cuaWQ7XG4gICAgICBsZXQgcmVzcG9uc2VGdW4gPSBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbcmVzcG9uc2VJZF07XG5cbiAgICAgIC8vaWYgaXQncyBhIHByb3Zpc2lvbmFsIHJlc3BvbnNlLCBkb24ndCBkZWxldGUgcmVzcG9uc2UgbGlzdGVuZXJcbiAgICAgIGlmIChtc2cuYm9keS5jb2RlID49IDIwMCkge1xuICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzcG9uc2VGdW4pIHtcbiAgICAgICAgcmVzcG9uc2VGdW4obXNnKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy9yZWNlaXZlIG1lc3NhZ2VzIGZyb20gZXh0ZXJuYWwgaW50ZXJmYWNlXG4gIF9vbk1lc3NhZ2UobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmICghX3RoaXMuX29uUmVzcG9uc2UobXNnKSkge1xuICAgICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbbXNnLnRvXTtcbiAgICAgIGlmIChpdGVtTGlzdCkge1xuICAgICAgICBfdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbkRlZmF1bHQobXNnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfZ2VuSWQoaW5Nc2cpIHtcbiAgICAvL1RPRE86IGhvdyBkbyB3ZSBtYW5hZ2UgbWVzc2FnZSBJRCdzPyBTaG91bGQgaXQgYmUgYSBnbG9iYWwgcnVudGltZSBjb3VudGVyLCBvciBwZXIgVVJMIGFkZHJlc3M/XG4gICAgLy9HbG9iYWwgY291bnRlciB3aWxsIG5vdCB3b3JrLCBiZWNhdXNlIHRoZXJlIHdpbGwgYmUgbXVsdGlwbGUgTWluaUJ1cyBpbnN0YW5jZXMhXG4gICAgLy9QZXIgVVJMLCBjYW4gYmUgYSBsb3Qgb2YgZGF0YSB0byBtYWludGFpbiFcbiAgICAvL01heWJlIGEgY291bnRlciBwZXIgTWluaUJ1cyBpbnN0YW5jZS4gVGhpcyBpcyB0aGUgYXNzdW1lZCBzb2x1dGlvbiBmb3Igbm93LlxuICAgIGlmICghaW5Nc2cuaWQgfHwgaW5Nc2cuaWQgPT09IDApIHtcbiAgICAgIHRoaXMuX21zZ0lkKys7XG4gICAgICBpbk1zZy5pZCA9IHRoaXMuX21zZ0lkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIFNlbmQgbWVzc2FnZXMgdG8gbG9jYWwgbGlzdGVuZXJzLCBvciBpZiBub3QgZXhpc3RzIHRvIGV4dGVybmFsIGxpc3RlbmVycy5cbiAgKiBJdCdzIGhhcyBhbiBvcHRpb25hbCBtZWNoYW5pc20gZm9yIGF1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzLlxuICAqIFRoZSByZXNwb25zZSBoYW5kbGVyIHdpbGwgYmUgdW5yZWdpc3RlcmVkIGFmdGVyIHJlY2VpdmluZyB0aGUgcmVzcG9uc2UsIG9yIGFmdGVyIHJlc3BvbnNlIHRpbWVvdXQgKGRlZmF1bHQgdG8gM3MpLlxuICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBNZXNzYWdlIHRvIHNlbmQuIE1lc3NhZ2UgSUQgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgbWVzc2FnZS5cbiAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBwYXJhbWV0ZXIsIGlmIHRoZSBkZXZlbG9wZXIgd2hhdCdzIGF1dG9tYXRpYyByZXNwb25zZSBtYW5hZ2VtZW50LlxuICAqIEByZXR1cm4ge251bWJlcn0gUmV0dXJucyB0aGUgbWVzc2FnZSBJRCwgaW4gY2FzZSBpdCBzaG91bGQgYmUgbmVlZGVkIGZvciBtYW51YWwgbWFuYWdlbWVudCBvZiB0aGUgcmVzcG9uc2UgaGFuZGxlci5cbiAgKi9cbiAgcG9zdE1lc3NhZ2UoaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spIHsgfVxuXG4gIC8qKlxuICAgKiBOb3QgcHVibGljIGF2YWlsYWJsZSwgdXNlZCBieSB0aGUgY2xhc3MgZXh0ZW5zaW9uIGltcGxlbWVudGF0aW9uLCB0byBwcm9jZXNzIG1lc3NhZ2VzIGZyb20gdGhlIHB1YmxpYyBcInBvc3RNZXNzYWdlXCIgd2l0aG91dCBhIHJlZ2lzdGVyZWQgbGlzdGVuZXIuXG4gICAqIFVzZWQgdG8gc2VuZCB0aGUgbWVzc2FnZSB0byBhbiBleHRlcm5hbCBpbnRlcmZhY2UsIGxpa2UgYSBXZWJXb3JrZXIsIElGcmFtZSwgZXRjLlxuICAgKiBAcGFyYW0gIHtNZXNzYWdlLk1lc3NhZ2V9IG1zZyBNZXNzYWdlXG4gICAqL1xuICBfb25Qb3N0TWVzc2FnZShtc2cpIHsgLyppbXBsZW1lbnRhdGlvbiB3aWxsIHNlbmQgbWVzc2FnZSB0byBleHRlcm5hbCBzeXN0ZW0qLyB9XG5cbiAgLyoqXG4gICAqIE5vdCBwdWJsaWMgYXZhaWxhYmxlLCB1c2VkIGJ5IHRoZSBjbGFzcyBleHRlbnNpb24gaW1wbGVtZW50YXRpb24sIHRvIHByb2Nlc3MgYWxsIG1lc3NhZ2VzIHRoYXQgZW50ZXIgdGhlIE1pbmlCdXMgZnJvbSBhbiBleHRlcm5hbCBpbnRlcmZhY2UsIGxpa2UgYSBXZWJXb3JrZXIsIElGcmFtZSwgZXRjLlxuICAgKiBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgb25lIHRpbWUgaW4gdGhlIGNvbnN0cnVjdG9yIHRvIHJlZ2lzdGVyIGV4dGVybmFsIGxpc3RlbmVycy5cbiAgICogVGhlIGltcGxlbWVudGF0aW9uIHdpbGwgcHJvYmFibHkgY2FsbCB0aGUgXCJfb25NZXNzYWdlXCIgbWV0aG9kIHRvIHB1Ymxpc2ggaW4gdGhlIGxvY2FsIGxpc3RlbmVycy5cbiAgICogRE8gTk9UIGNhbGwgXCJwb3N0TWVzc2FnZVwiLCB0aGVyZSBpcyBhIGRhbmdlciB0aGF0IHRoZSBtZXNzYWdlIGVudGVycyBpbiBhIGN5Y2xlIVxuICAgKi9cbiAgX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lcigpIHsgLyppbXBsZW1lbnRhdGlvbiB3aWxsIHJlZ2lzdGVyIGV4dGVybmFsIGxpc3RlbmVyIGFuZCBjYWxsIFwidGhpcy5fb25NZXNzYWdlKG1zZylcIiAqLyB9XG5cbn1cblxuY2xhc3MgTXNnTGlzdGVuZXIge1xuICAvKiBwcml2YXRlXG4gIF9zdWJzY3JpcHRpb25zOiA8c3RyaW5nOiBNc2dMaXN0ZW5lcltdPjtcbiAgX3VybDogc3RyaW5nO1xuICBfY2FsbGJhY2s6IChtc2cpID0+IHZvaWQ7XG4gICovXG5cbiAgY29uc3RydWN0b3Ioc3Vic2NyaXB0aW9ucywgdXJsLCBjYWxsYmFjaykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnM7XG4gICAgX3RoaXMuX3VybCA9IHVybDtcbiAgICBfdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgfVxuXG4gIGdldCB1cmwoKSB7IHJldHVybiB0aGlzLl91cmw7IH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoaXMgbGlzdGVuZXIgZnJvbSB0aGUgQnVzXG4gICAqL1xuICByZW1vdmUoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBzdWJzID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbX3RoaXMuX3VybF07XG4gICAgaWYgKHN1YnMpIHtcbiAgICAgIGxldCBpbmRleCA9IHN1YnMuaW5kZXhPZihfdGhpcyk7XG4gICAgICBzdWJzLnNwbGljZShpbmRleCwgMSk7XG5cbiAgICAgIC8vaWYgdGhlcmUgYXJlIG5vIGxpc3RlbmVycywgcmVtb3ZlIHRoZSBzdWJzY3JpcHRpb24gZW50aXJlbHkuXG4gICAgICBpZiAoc3Vicy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIF90aGlzLl9zdWJzY3JpcHRpb25zW190aGlzLl91cmxdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCdXM7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5pbXBvcnQgQnVzIGZyb20gJy4vQnVzJztcbmltcG9ydCBQaXBlbGluZSBmcm9tICcuL1BpcGVsaW5lJztcblxuLyoqXG4qIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb21cbiogTWVzc2FnZSBCVVMgSW50ZXJmYWNlIGlzIGFuIGV4dGVuc2lvbiBvZiB0aGUgQnVzXG4qIEl0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZGVmYXVsdCAnKicgbGlzdGVuZXIsIGluc3RlYWQgaXQgdXNlcyB0aGUgcmVnaXN0cnkucmVzb2x2ZSguLilcbiovXG5jbGFzcyBNZXNzYWdlQnVzIGV4dGVuZHMgQnVzIHtcbiAgLyogcHJpdmF0ZVxuICBfcmVnaXN0cnk6IFJlZ2lzdHJ5XG4gIF9mb3J3YXJkczogeyA8ZnJvbS11cmw+OiB7IGZsOiBNc2dMaXN0ZW5lciwgc2FuZGJveFRvVXJsczogTWFwKFNhbmRib3gsIFt0by11cmxdKSwgdXJsVG9TYW5kYm94OiB7IHRvLXVybDogU2FuZGJveCB9IH0gfVxuXG4gIF9waXBlbGluZTogUGlwZWxpbmVcbiAgKi9cblxuICAvL1RPRE86IGZ1dHVyZSBvcHRpbWl6YXRpb25cbiAgLy8xLiBtZXNzYWdlIGJhdGNoIHByb2Nlc3Npbmcgd2l0aCBzZXRJbnRlcnZhbFxuICAvLzIuIHJlc29sdmUgZGVmYXVsdCBnYXRld2F5L3Byb3Rvc3R1YiB3aXRoIHJlZ2lzdGVyLnJlc29sdmVcblxuICBjb25zdHJ1Y3RvcihyZWdpc3RyeSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fcmVnaXN0cnkgPSByZWdpc3RyeTtcbiAgICB0aGlzLl9mb3J3YXJkcyA9IHt9O1xuXG4gICAgdGhpcy5fcGlwZWxpbmUgPSBuZXcgUGlwZWxpbmUoKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnUElQRUxJTkUtRVJST1I6ICcsIEpTT04uc3RyaW5naWZ5KGVycm9yKSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXQgcGlwZWxpbmUoKSB7IHJldHVybiB0aGlzLl9waXBlbGluZTsgfVxuXG4gIC8qKlxuICAgKiBQb3N0IGEgbWVzc2FnZSBmb3Igcm91dGluZy4gSXQgd2lsbCBmaXJzdCBzZWFyY2ggZm9yIGEgbGlzdGVuZXIsIGlmIHRoZXJlIGlzIG5vIG9uZSwgaXQgc2VuZHMgdG8gYSBleHRlcm5hbCByb3V0aW5nIHVzaW5nIHRoZSBfb25Qb3N0TWVzc2FnZS5cbiAgICogRXh0ZXJuYWwgcm91dGluZyB1c2UgdGhlIHJlZ2lzdHJ5LnJlc29sdmUoLi4pIG1ldGhvZCB0byBkZWNpZGUgdGhlIGRlc3RpbmF0aW9uIHNhbmRib3guXG4gICAqIEBwYXJhbSAge01lc3NhZ2V9IGluTXNnICAgICAgICAgICAgSlNPTiB3aXRoIG1hbmRhdG9yeSBNZXNzYWdlIHN0cnVjdHVyZSB7aWQsIHR5cGUsIGZyb20sIHRvfVxuICAgKiBAcGFyYW0gIHtDYWxsYmFja30gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBjYWxsYmFjayBpZiBhIHJlc3BvbnNlIGlzIGV4cGVjdGVkIGZyb20gdGhlIHJlcXVlc3QuIEEgcmVzcG9uc2Ugd2lsbCBiZSBhbHdheXMgc2VudCwgZXZlbiBpZiBpdCBpcyBhIFwiVGltZW91dFwiLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgICAgICAgICAgICAgdGhlIE1lc3NhZ2UgaWRcbiAgICovXG4gIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9nZW5JZChpbk1zZyk7XG5cbiAgICBfdGhpcy5fcGlwZWxpbmUucHJvY2Vzcyhpbk1zZywgKG1zZykgPT4ge1xuXG4gICAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFjayhpbk1zZywgcmVzcG9uc2VDYWxsYmFjayk7XG5cbiAgICAgIGlmICghX3RoaXMuX29uUmVzcG9uc2UobXNnKSkge1xuICAgICAgICBsZXQgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1ttc2cudG9dO1xuICAgICAgICBpZiAoaXRlbUxpc3QpIHtcbiAgICAgICAgICAvL2RvIG5vdCBwdWJsaXNoIG9uIGRlZmF1bHQgYWRkcmVzcywgYmVjYXVzZSBvZiBsb29wYmFjayBjeWNsZVxuICAgICAgICAgIF90aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9pZiB0aGVyZSBpcyBubyBsaXN0ZW5lciwgc2VuZCB0byBleHRlcm5hbCBpbnRlcmZhY2VcbiAgICAgICAgICBfdGhpcy5fb25Qb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gaW5Nc2cuaWQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBleHRlcm5hbCBwdWJsaXNoIGFkZHJlc3MgbGlzdGVuZXIuIEV2ZXJ5IG1lc3NhZ2UgZm9yIHRoZSBhZGRyZXNzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBleHRlcm5hbCByb3V0aW5nIGJ5IF9vblBvc3RNZXNzYWdlLlxuICAgKiBUaGlzIG1lYW5zLCBldmVuIGlmIHRoZXJlIGlzIGEgbGlzdGVuZXIgZm9yIHRoZSBhZGRyZXNzLCBpdCB3aWxsIGFsc28gc2VuZCB0aGUgbWVzc2FnZSB0byB0aGUgZXh0ZXJuYWwgcm91dGluZy5cbiAgICogQHBhcmFtIHtVUkx9IGZyb20gUHVibGlzaCBhZGRyZXNzLlxuICAgKi9cbiAgYWRkUHVibGlzaChmcm9tKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIC8vdmVyaWZ5IGlmIGZvcndhcmQgZXhpc3RcbiAgICBsZXQgcmVmQ291bnQgPSBfdGhpcy5fZm9yd2FyZHNbZnJvbV07XG4gICAgaWYgKCFyZWZDb3VudCkge1xuICAgICAgbGV0IGZvcndhcmRMaXN0ZW5lciA9IF90aGlzLmFkZExpc3RlbmVyKGZyb20sIChtc2cpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ01CLVBVQkxJU0g6ICggJyArIGZyb20gKyAnICknKTtcbiAgICAgICAgX3RoaXMuX29uUG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgIH0pO1xuXG4gICAgICByZWZDb3VudCA9IHtcbiAgICAgICAgY291bnRlcjogMCxcbiAgICAgICAgZmw6IGZvcndhcmRMaXN0ZW5lcixcbiAgICAgICAgcmVtb3ZlOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5jb3VudGVyLS07XG4gICAgICAgICAgaWYgKHRoaXMuY291bnRlciA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5mbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIGRlbGV0ZSBfdGhpcy5fZm9yd2FyZHNbZnJvbV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgIF90aGlzLl9mb3J3YXJkc1tmcm9tXSA9IHJlZkNvdW50O1xuICAgfVxuXG4gICByZWZDb3VudC5jb3VudGVyKys7XG4gICByZXR1cm4gcmVmQ291bnQ7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIGZvcndhcmQgbGlzdGVuZXIgZm9yIGEgbWVzc2FnZSBkZXN0aW5hdGlvbi4gRXZlcnkgbWVzc2FnZSByZWFjaGluZyBhbiBhZGRyZXNzIHdpbGwgYmUgYWxzbyBzZW50IHRvIHRoZSBmb3J3YXJkIGFkZHJlc3MuXG4gICAqIEBwYXJhbSB7VVJMfSBmcm9tIE1lc3NhZ2UgZGVzdGluYXRpb24sIGl0J3MgYWN0dWFsbHkgdGhlIGZpZWxkIFwidG9cIiBvZiB0aGUgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtVUkx9IHRvICAgRm9yd2FyZCBhZGRyZXNzLlxuICAgKi9cbiAgIGFkZEZvcndhcmQoZnJvbSwgdG8pIHtcbiAgICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgICByZXR1cm4gX3RoaXMuYWRkTGlzdGVuZXIoZnJvbSwgKG1zZykgPT4ge1xuICAgICAgIGNvbnNvbGUubG9nKCdNQi1GT1JXQVJEOiAoICcgKyBmcm9tICsgJyB0byAnICsgdG8gKyAnICknKTtcbiAgICAgICBfdGhpcy5mb3J3YXJkKHRvLCBtc2cpO1xuICAgICB9KTtcbiAgIH1cblxuICAgLyoqXG4gICAgKiBKdXN0IGZvcndhcmQncyBhIG1lc3NhZ2UgdG8gdGhlIGZvcndhcmQgYWRkcmVzcy4gTGlzdGVuZXJzIHNob3VsZCBiZSBhdmFpbGFibGUgZm9yIHRoZSBmb3J3YXJkIGFkZHJlc3MuXG4gICAgKiBAcGFyYW0gIHtVUkx9IHVybCBGb3J3YXJkIGFkZHJlc3MuXG4gICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgTWVzc2FnZSB0byBmb3J3YXJkXG4gICAgKi9cbiAgIGZvcndhcmQodXJsLCBtc2cpIHtcbiAgICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgICBsZXQgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1t1cmxdO1xuICAgICBpZiAoaXRlbUxpc3QpIHtcbiAgICAgICBfdGhpcy5fcHVibGlzaE9uKGl0ZW1MaXN0LCBtc2cpO1xuICAgICB9XG4gICB9XG5cbiAgIC8vZGVmYXVsdCByb3V0ZSwgaWYgdGhlcmUgYXJlIG5vIGxpc3RlbmVycyBhdmFpbGFibGUgZm9yIGEgbWVzc2FnZSBkZXN0aW5hdGlvbi5cbiAgIF9vblBvc3RNZXNzYWdlKG1zZykge1xuICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgIC8vcmVzb2x2ZSBleHRlcm5hbCBwcm90b3N0dWIuLi5cbiAgICAgX3RoaXMuX3JlZ2lzdHJ5LnJlc29sdmUobXNnLnRvKS50aGVuKChyb3V0ZSkgPT4ge1xuICAgICAgIF90aGlzLmZvcndhcmQocm91dGUsIG1zZyk7XG4gICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICBjb25zb2xlLmxvZygnUkVTT0xWRS1FUlJPUjogJywgZSk7XG4gICAgIH0pO1xuICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlQnVzO1xuIiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG4vKipcbiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxuKiBTZXF1ZW5jaWFsIHByb2Nlc3NvciBvZiBtZXRob2RzLiBTaW1pbGFyIHRvIGhvdyBTZXF1ZW50aWFsIFByb21pc2UncyB3b3JrLCBidXQgYmV0dGVyIGZpdCBmb3IgbWVzc2FnZSBwcm9jZXNzaW5nLlxuKiBOb3JtYWwgdXNlIGZvciB0aGlzLCBpcyB0byBpbnRlcmNlcHQgYWxsIG1lc3NhZ2VzIHdpdGggY29uZmlndXJlZCBoYW5kbGVycywgYW5kIGFjdCBhY2NvcmRpbmdseS5cbiovXG5jbGFzcyBQaXBlbGluZSB7XG4gIC8qIHB1YmxpY1xuICAgIGhhbmRsZXJzOiAoKFBpcGVDb250ZXh0KSA9PiB2b2lkKVtdXG4gICAgb25GYWlsOiAoZXJyb3IpID0+IHZvaWRcbiAgKi9cblxuICBjb25zdHJ1Y3Rvcihfb25GYWlsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLmhhbmRsZXJzID0gW107XG4gICAgX3RoaXMub25GYWlsID0gX29uRmFpbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnQgYSBtZXNzYWdlIGluIHRoZSBwaXBlbGluZSBxdWV1ZS4gQWxsIG1lc3NhZ2VzIGFyZSB3cmFwcGVkIHdpdGggYSBQaXBlQ29udGV4dC5cbiAgICogQHBhcmFtICB7TWVzc2FnZX0gbXNnICAgICAgIE1lc3NhZ2UgZm9yIHRoZSBxdWV1ZVxuICAgKiBAcGFyYW0gIHtDYWxsYmFja30gb25EZWxpdmVyIFdoZW4gbWVzc2FnZSBpcyBmaW5pc2hlZCBwcm9jZXNzaW5nIGZyb20gYWxsIGhhbmRsZXJzLCBpdCB3aWxsIGJlIGRlbGl2ZXJlZCBpbiB0aGlzIGNhbGxiYWNrLlxuICAgKi9cbiAgcHJvY2Vzcyhtc2csIG9uRGVsaXZlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoX3RoaXMuaGFuZGxlcnMubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IGl0ZXIgPSBuZXcgSXRlcmF0b3IoX3RoaXMuaGFuZGxlcnMpO1xuICAgICAgaXRlci5uZXh0KG5ldyBQaXBlQ29udGV4dChfdGhpcywgaXRlciwgbXNnLCBvbkRlbGl2ZXIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25EZWxpdmVyKG1zZyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXG4qIFdyYXBwZXIgYXJvdW5kIGEgbWVzc2FnZSB0aGF0IGFkZHMgYWN0aW9ucyB0aGF0IGNhbiBiZSBmaXJlZCBieSBhbnkgaW50ZXJjZXB0b3IgaGFuZGxlci5cbiogVGhlIFBpcGVsaW5lIGlzIGFzeW5jaHJvbm91cywgc28gYW4gaGFuZGxlciBzaG91bGQgYWx3YXlzIGNhbGwgYW4gYWN0aW9uLCB0aGUgZGVmYXVsdCBvbmUgaXMgXCJuZXh0KClcIlxuKi9cbmNsYXNzIFBpcGVDb250ZXh0IHtcbiAgLyogcHJpdmF0ZVxuICAgIF9pblN0b3A6IGJvb2xlYW5cblxuICAgIF9waXBlbGluZTogUGlwZWxpbmVcbiAgICBfaXRlcjogSXRlcmF0b3JcbiAgICBfbXNnOiBNZXNzYWdlXG4gICovXG5cbiAgY29uc3RydWN0b3IocGlwZWxpbmUsIGl0ZXIsIG1zZywgb25EZWxpdmVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9pblN0b3AgPSBmYWxzZTtcblxuICAgIF90aGlzLl9waXBlbGluZSA9IHBpcGVsaW5lO1xuICAgIF90aGlzLl9pdGVyID0gaXRlcjtcbiAgICBfdGhpcy5fbXNnID0gbXNnO1xuICAgIF90aGlzLl9vbkRlbGl2ZXIgPSBvbkRlbGl2ZXI7XG4gIH1cblxuICBnZXQgcGlwZWxpbmUoKSB7IHJldHVybiB0aGlzLl9waXBlbGluZTsgfVxuXG4gIGdldCBtc2coKSB7IHJldHVybiB0aGlzLl9tc2c7IH1cbiAgc2V0IG1zZyhpbk1zZykgeyB0aGlzLl9tc2cgPSBpbk1zZzsgfVxuXG4gIC8qKlxuICAgKiBQcm9jZWVkIHRvIHRoZSBuZXh0IGludGVyY2VwdG9yIGhhbmRsZXIsIHVubGVzcyB0aGVyZSB3YXMgYW4gZXJyb3IuIElmIGl0J3MgdGhlIGxhc3Qgb25lLCBwcm9jZWVkIHRvIG9uRGVsaXZlciBoYW5kbGVyLlxuICAgKi9cbiAgbmV4dCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCFfdGhpcy5faW5TdG9wKSB7XG4gICAgICBpZiAoX3RoaXMuX2l0ZXIuaGFzTmV4dCkge1xuICAgICAgICBfdGhpcy5faXRlci5uZXh0KF90aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLl9vbkRlbGl2ZXIoX3RoaXMuX21zZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByb2NlZWQgZGlyZWN0bHkgdG8gdGhlIG9uRGVsaXZlciBoYW5kbGVyLCB1bmxlc3MgdGhlcmUgd2FzIGFuIGVycm9yLlxuICAgKi9cbiAgZGVsaXZlcigpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGlmICghX3RoaXMuX2luU3RvcCkge1xuICAgICAgX3RoaXMuX2luU3RvcCA9IHRydWU7XG4gICAgICBfdGhpcy5fb25EZWxpdmVyKF90aGlzLl9tc2cpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrIHRoZSBjb250ZXh0IHdpdGggYW4gZXJyb3IgYW5kIHByb2NlZWQgdG8gdGhlIG9uRmFpbCBoYW5kbGVyLlxuICAgKiBAcGFyYW0gIHtbdHlwZV19IGVycm9yIFtkZXNjcmlwdGlvbl1cbiAgICovXG4gIGZhaWwoZXJyb3IpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKCFfdGhpcy5faW5TdG9wKSB7XG4gICAgICBfdGhpcy5faW5TdG9wID0gdHJ1ZTtcbiAgICAgIGlmIChfdGhpcy5fcGlwZWxpbmUub25GYWlsKSB7XG4gICAgICAgIF90aGlzLl9waXBlbGluZS5vbkZhaWwoZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5jbGFzcyBJdGVyYXRvciB7XG4gIC8qIHByaXZhdGVcbiAgICBfaW5kZXg6IG51bWJlclxuICAgIF9hcnJheTogW11cbiAgKi9cblxuICBjb25zdHJ1Y3RvcihhcnJheSkge1xuICAgIHRoaXMuX2luZGV4ID0gLTE7XG4gICAgdGhpcy5fYXJyYXkgPSBhcnJheTtcbiAgfVxuXG4gIGdldCBoYXNOZXh0KCkge1xuICAgIHJldHVybiB0aGlzLl9pbmRleCA8IHRoaXMuX2FycmF5Lmxlbmd0aCAtIDE7XG4gIH1cblxuICBnZXQgbmV4dCgpIHtcbiAgICB0aGlzLl9pbmRleCsrO1xuICAgIHJldHVybiB0aGlzLl9hcnJheVt0aGlzLl9pbmRleF07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGlwZWxpbmU7XG4iLCIvKipcbiogQ2xhc3Mgd2l0aCB0aGUgY3J5cHRvZ3JhcGhpYyBmdW5jdGlvbnMgZm9yIHRoZSBhdXRoZW50aWNhdGlvbiBwcm90b2NvbFxuKlxuKi9cbmNsYXNzIENyeXB0byB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICB9XG5cbiAgLyoqXG4gICogZW5jb2RlIGEgYnl0ZUFycmF5IHZhbHVlIGluIGJhc2UgNjQgZW5jb2RlXG4gICogQHBhcmFtICAge2J5dGVBcnJheX0gICAgdmFsdWUgICAgYnl0ZUFycmF5IHZhbHVlXG4gICogQHJldHVybiAge3N0cmluZ30gICBlbmNvZGVkIHZhbHVlXG4gICovXG4gIGVuY29kZSh2YWx1ZSkge1xuICAgIHJldHVybiBidG9hKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAqIGRlY29kZSBhIGJhc2U2NCB2YWx1ZSBpbiBhIG5ldyBVaW50OEFycmF5XG4gICogQHBhcmFtICAge3N0cmluZ30gICAgdmFsdWUgICAgdmFsdWUgZW5jb2RlZCBpbiBiYXNlIDY0XG4gICogQHJldHVybiAge2J5dGVBcnJheX0gZGVjb2RlZFZhbHVlXG4gICovXG4gIGRlY29kZSh2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShKU09OLnBhcnNlKCdbJyArIGF0b2IodmFsdWUpICsgJ10nKSk7XG4gIH1cblxuICBlbmNyeXB0UlNBKHB1YktleSwgZGF0YSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5faW1wb3J0UlNBZW5jcnlwdEtleShuZXcgVWludDhBcnJheShwdWJLZXkpKS50aGVuKGZ1bmN0aW9uKHB1YmxpY0tleSkge1xuXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuZW5jcnlwdChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHB1YmxpY0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxuICAgICAgICAgICAgZGF0YSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gZW5jcnlwdFxuICAgICAgICApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGVuY3J5cHRlZCkge1xuICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBlbmNyeXB0ZWQgZGF0YVxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1lbmNyeXB0UlNBJywgbmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkKSk7XG4gICAgICAgICAgcmVzb2x2ZShuZXcgVWludDhBcnJheShlbmNyeXB0ZWQpKTtcblxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRSU0EnLCBlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgZGVjcnlwdFJTQShwcml2S2V5LCBkYXRhKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIF90aGlzLl9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xuXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuZGVjcnlwdChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByaXZhdGVLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcbiAgICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YVxuICAgICAgICApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGRlY3J5cHRlZCkge1xuXG4gICAgICAgICAgbGV0IGRlY3J5cHRlZERhdGEgPSBuZXcgVWludDhBcnJheShkZWNyeXB0ZWQpO1xuXG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRSU0EnLCBkZWNyeXB0ZWREYXRhKTtcbiAgICAgICAgICByZXNvbHZlKGRlY3J5cHRlZERhdGEpO1xuXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8tZGVjcnlwdFJTQScsIGVycik7XG4gICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIHNpZ25SU0EocHJpdktleSwgZGF0YSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5faW1wb3J0UlNBc2lnbktleShwcml2S2V5KS50aGVuKGZ1bmN0aW9uKHByaXZhdGVLZXkpIHtcblxuICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXG4gICAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gc2lnblxuICAgICAgICApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHNpZ25hdHVyZSkge1xuICAgICAgICAgIC8vcmV0dXJucyBhbiBBcnJheUJ1ZmZlciBjb250YWluaW5nIHRoZSBzaWduYXR1cmVcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tc2lnblJTQScsIG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpO1xuICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoc2lnbmF0dXJlKSk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1zaWduUlNBJywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICB2ZXJpZnlSU0EocHViS2V5LCBkYXRhLCBzaWduYXR1cmUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2ltcG9ydFJTQXZlcmlmeUtleShwdWJLZXkpLnRoZW4oZnVuY3Rpb24ocHVibGljS2V5KSB7XG5cbiAgICAgICAgY3J5cHRvLnN1YnRsZS52ZXJpZnkoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwdWJsaWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcbiAgICAgICAgICAgIHNpZ25hdHVyZSwgLy9BcnJheUJ1ZmZlciBvZiB0aGUgc2lnbmF0dXJlXG4gICAgICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oaXN2YWxpZCkge1xuICAgICAgICAgIC8vcmV0dXJucyBhIGJvb2xlYW4gb24gd2hldGhlciB0aGUgc2lnbmF0dXJlIGlzIHRydWUgb3Igbm90XG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLXZlcmlmeVJTQScsIGlzdmFsaWQpO1xuICAgICAgICAgIHJlc29sdmUoaXN2YWxpZCk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIGVuY3J5cHRBRVMoa2V5LCBkYXRhLCBpdikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5faW1wb3J0QUVTa2V5KGtleSkudGhlbihmdW5jdGlvbihhZXNLZXkpIHtcblxuICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIG5hbWU6ICdBRVMtQ0JDJyxcbiAgICAgICAgICAgICAgLy9Eb24ndCByZS11c2UgaW5pdGlhbGl6YXRpb24gdmVjdG9ycyFcbiAgICAgICAgICAgICAgLy9BbHdheXMgZ2VuZXJhdGUgYSBuZXcgaXYgZXZlcnkgdGltZSB5b3VyIGVuY3J5cHQhXG4gICAgICAgICAgICAgIGl2OiBpdlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFlc0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxuICAgICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIGVuY3J5cHRcbiAgICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihlbmNyeXB0ZWQpIHtcbiAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgZW5jcnlwdGVkIGRhdGFcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdEFFUycsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpO1xuICAgICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoZW5jcnlwdGVkKSk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1lbmNyeXB0QUVTJywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBkZWNyeXB0QUVTKGtleSwgZGF0YSwgaXYpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgX3RoaXMuX2ltcG9ydEFFU2tleShrZXkpLnRoZW4oZnVuY3Rpb24oYWVzS2V5KSB7XG5cbiAgICAgICAgY3J5cHRvLnN1YnRsZS5kZWNyeXB0KFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsXG4gICAgICAgICAgICAgIGl2OiBpdlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFlc0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxuICAgICAgICAgICAgZGF0YSAvL0FycmF5QnVmZmVyIG9mIHRoZSBkYXRhXG4gICAgICAgIClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGVjcnlwdGVkKSB7XG5cbiAgICAgICAgICBsZXQgZGVjb2RlZERhdGEgPSBfdGhpcy5fdXRmOERlY29kZShuZXcgVWludDhBcnJheShkZWNyeXB0ZWQpKTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZGVjcnlwdEFFUycsIGRlY29kZWREYXRhKTtcbiAgICAgICAgICByZXNvbHZlKGRlY29kZWREYXRhKTtcblxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRBRVMnLCBlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIGNyZWF0ZXMgYSBoYXNoIHVzaW5nIHRoZSBITUFDIGFsZ29yaXRobVxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjXG4gICogQHBhcmFtICB7c3RyaW5nfSAgICAgIGRhdGEgICAgICAgaW5mb3JtYXRpb24gdG8gYmUgaGFzaGVkXG4gICogQHJldHVybiAge2J5dGVBcnJheX0gICBzaWduYXR1cmUgIHJlc3VsdGluZyBoYXNoXG4gICovXG4gIGhhc2hITUFDKGtleSwgZGF0YSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgX3RoaXMuX2ltcG9ydEhNQUNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uKGhtYWNLZXkpIHtcblxuICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnSE1BQydcbiAgICAgICAgfSxcbiAgICAgICAgaG1hY0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxuICAgICAgICBfdGhpcy5fdXRmOEVuY29kZShkYXRhKSAvL0FycmF5QnVmZmVyIG9mIGRhdGEgeW91IHdhbnQgdG8gc2lnblxuICAgICAgICApXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHNpZ25hdHVyZSkge1xuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1oYXNoSE1BQycsIHNpZ25hdHVyZSk7XG5cbiAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgc2lnbmF0dXJlXG4gICAgICAgICAgcmVzb2x2ZShuZXcgVWludDhBcnJheShzaWduYXR1cmUpKTtcblxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWhhc2hITUFDJywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIHZlcmlmaWVzIGFuIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtXG4gICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgICBrZXkgICAgICAga2V5IHRvIGJlIHVzZWQgaW4gdGhlIGhtYWNcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgZGF0YSAgICAgICBpbmZvcm1hdGlvbiB0byBiZSBoYXNoZWQgdG8gY29tcGFyZVxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gIHNpZ25hdHVyZSAgIGhhc2ggdG8gY29tcGFyZSB3aXRoIHRoZSByZWNlaXZlZCBkYXRhXG4gICogQHJldHVybiAge2Jvb2xlYW59ICAgaXN2YWxpZCAgICAgYm9vbGVhbiBzYXlpbmcgaWYgdGhlIGRhdGEgY29ycmVzcG9uZHMgdG8gdGhlIGhhc2ggcmVjZWl2ZWRcbiAgKi9cbiAgdmVyaWZ5SE1BQyhrZXksIGRhdGEsIHNpZ25hdHVyZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgX3RoaXMuX2ltcG9ydEhNQUNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uKGhtYWNLZXkpIHtcblxuICAgICAgICBjcnlwdG8uc3VidGxlLnZlcmlmeShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnSE1BQydcbiAgICAgICAgICB9LFxuICAgICAgICAgIGhtYWNLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcbiAgICAgICAgICBzaWduYXR1cmUsIC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZVxuICAgICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGFcbiAgICAgICAgKVxuICAgICAgICAudGhlbihmdW5jdGlvbihpc3ZhbGlkKSB7XG4gICAgICAgICAgLy9yZXR1cm5zIGEgYm9vbGVhbiBvbiB3aGV0aGVyIHRoZSBzaWduYXR1cmUgaXMgdHJ1ZSBvciBub3RcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tdmVyaWZ5SE1BQycsIGlzdmFsaWQpO1xuICAgICAgICAgIChpc3ZhbGlkKSA/IHJlc29sdmUoaXN2YWxpZCkgOiByZWplY3QoaXN2YWxpZCk7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLXZlcmlmeUhNQUMnLCBlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBnZW5lcmF0ZXMgYSBSU0EgcHVibGljL3ByaXZhdGUga2V5IHBhaXIgd2l0aCBhIG1vZHVsdXMgbGVuZ3RoIG9mIDIwNDggYml0c1xuICAqIEByZXR1cm4gIHtKU09OfSAgIGtleVBhaXIgICAganNvbiBjb250YWluaW5nIHRoZSBwdWJsaWMgYW5kIHByaXZhdGUga2V5c1xuICAqL1xuICBnZW5lcmF0ZVJTQUtleVBhaXIoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQga2V5UGFpciA9IHt9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY3J5cHRvLnN1YnRsZS5nZW5lcmF0ZUtleShcbiAgICAgIHtcbiAgICAgICAgbmFtZTogJ1JTQS1QU1MnLFxuICAgICAgICBtb2R1bHVzTGVuZ3RoOiAyMDQ4LCAvL2NhbiBiZSAxMDI0LCAyMDQ4LCBvciA0MDk2XG4gICAgICAgIHB1YmxpY0V4cG9uZW50OiBuZXcgVWludDhBcnJheShbMHgwMSwgMHgwMCwgMHgwMV0pLFxuICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXG4gICAgICB9LFxuICAgICAgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KVxuICAgICAgWydzaWduJywgJ3ZlcmlmeSddIC8vY2FuIGJlIGFueSBjb21iaW5hdGlvbiBvZiAnc2lnbicgYW5kICd2ZXJpZnknXG5cbiAgICAgICkudGhlbihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgLy9yZXR1cm5zIGEga2V5cGFpciBvYmplY3RcbiAgICAgICAgLy9jb25zb2xlLmxvZyhrZXkpO1xuXG4gICAgICAgIGNyeXB0by5zdWJ0bGUuZXhwb3J0S2V5KFxuICAgICAgICAgICdzcGtpJywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcbiAgICAgICAgICBrZXkucHVibGljS2V5IC8vY2FuIGJlIGEgcHVibGljS2V5IG9yIHByaXZhdGVLZXksIGFzIGxvbmcgYXMgZXh0cmFjdGFibGUgd2FzIHRydWVcbiAgICAgICAgKS50aGVuKGZ1bmN0aW9uKHB1YmxpY0tleSkge1xuICAgICAgICAgIC8vcmV0dXJucyB0aGUgZXhwb3J0ZWQga2V5IGRhdGFcbiAgICAgICAgICBrZXlQYWlyLnB1YmxpYyAgPSBuZXcgVWludDhBcnJheShwdWJsaWNLZXkpO1xuICAgICAgICAgIHJldHVybiBjcnlwdG8uc3VidGxlLmV4cG9ydEtleShcbiAgICAgICAgICAgICdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXG4gICAgICAgICAgICBrZXkucHJpdmF0ZUtleSAvL2NhbiBiZSBhIHB1YmxpY0tleSBvciBwcml2YXRlS2V5LCBhcyBsb25nIGFzIGV4dHJhY3RhYmxlIHdhcyB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbihwcml2YXRlS2V5KSB7XG4gICAgICAgICAga2V5UGFpci5wcml2YXRlICA9IG5ldyBVaW50OEFycmF5KHByaXZhdGVLZXkpO1xuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZVJTQUtleVBhaXInLCBrZXlQYWlyKTtcblxuICAgICAgICAgIHJlc29sdmUoa2V5UGFpcik7XG5cbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcblxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEdlbmVyYXRlcyBhIDEyOCBiaXQgcmFuZG9tIHZhbHVlLlxuICAqIEByZXR1cm4ge2J5dGVBcnJheX0gIGFycmF5ICAgIHJhbmRvbSB2YWx1ZVxuICAqL1xuICBnZW5lcmF0ZUlWKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgYXJyYXkgPSBuZXcgIFVpbnQ4QXJyYXkoMTYpO1xuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICogR2VuZXJhdGVzIGEgMjU2IGJpdCByYW5kb20gdmFsdWUuIDMyIGJpdHMgYXJlIGV4dHJhdGVkIGZyb20gdGhlIG1hY2hpbmUgdGltZSxcbiAgKiB0aGUgcmVtYWluaW5nIGFyZSBnZW5lcmF0ZWQgcmFuZG9tbHlcbiAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICByYW5kb20gdmFsdWVcbiAgKi9cbiAgZ2VuZXJhdGVSYW5kb20oKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBhcnJheSA9IG5ldyAgVWludDhBcnJheSgzMik7XG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7XG5cbiAgICBsZXQgZGF0ZSA9IERhdGUubm93KCk7XG4gICAgbGV0IGRhdGVFbmNvZGVkID0gX3RoaXMuX3V0ZjhFbmNvZGUoZGF0ZSk7XG5cbiAgICAvL2V4dHJhY3QgdGhlIGxlYXN0IHNpZ25pZmljYW50IDQgYnl0ZXMgaW4gdGhlIGRhdGVcbiAgICBsZXQgZmluYWxEYXRlID0gZGF0ZUVuY29kZWQuc2xpY2UoZGF0ZUVuY29kZWQubGVuZ3RoIC0gNCwgZGF0ZUVuY29kZWQubGVuZ3RoKTtcblxuICAgIC8vIGFkZCBpbiB0aGUgZmlyc3QgNCBieXRlcyBvZiB0aGUgYXJyYXkgdGhlIGJ5dGVzIGV4dHJhY3RlZCBwcmV2aW91c2x5O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7IGFycmF5W2ldID0gZmluYWxEYXRlW2ldOyB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICogZ2VuZXJhdGVzIGEgcHJlbWFzdGVyIHNlY3JldCAoUE1TKSBvZiA0OCBieXRlcyAoMzg0IGJpdHMpIHJhbmRvbWx5XG4gICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgcHJlbWFzdGVyIHNlY3JldCBrZXlcbiAgKi9cbiAgZ2VuZXJhdGVQTVMoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBhcnJheSA9IG5ldyBVaW50OEFycmF5KDQ4KTtcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgKiBnZW5lcmF0ZXMgYSBtYXN0ZXJLZXkgc2VjcmV0IChQTVMpIG9mIDQ4IGJ5dGVzICgzODQgYml0cykgdXNpbmcgdGhlIHByZW1hc3RlciBzZWNyZXQgYW5kXG4gICogdHdvIHJhbmRvbXNcbiAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICBtYXN0ZXIgc2VjcmV0IGtleSB3aXRoIDQ4IGJ5dGVzXG4gICovXG4gIGdlbmVyYXRlTWFzdGVyU2VjcmV0KGhtYWNLZXksIGRhdGEpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbGV0IGtleSA9IG5ldyBVaW50OEFycmF5KDQ4KTtcbiAgICAgIGxldCBzZWVkID0gZGF0YTtcblxuICAgICAgX3RoaXMuX2RpZ2VzdChobWFjS2V5KS50aGVuKChkaWdlc3RlZEtleSkgPT4ge1xuXG4gICAgICAgIF90aGlzLmhhc2hITUFDKGRpZ2VzdGVkS2V5LCBzZWVkKS50aGVuKGZ1bmN0aW9uKGtleXBhcnQwKSB7XG5cbiAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDMyIGJ5dGVzIGludG8gdGhlIGtleVxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykgeyBrZXlbaV0gPSBrZXlwYXJ0MFtpXTsgfVxuICAgICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhkaWdlc3RlZEtleSwgc2VlZCArIGtleXBhcnQwKTtcblxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGtleXBhcnQxKSB7XG5cbiAgICAgICAgICAvL2NvcHkgdGhlIGZpcnN0IDE2IGJ5dGVzIHRvIHRoZSBrZXkgcmVtYWluaW5nIDE2IGJ5dGVzXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7IGtleVtpICsgMzJdID0ga2V5cGFydDFbaV07IH1cbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZ2VuZXJhdGVNYXN0ZXJTZWNyZXQnLCBrZXkpO1xuICAgICAgICAgIHJlc29sdmUoa2V5KTtcblxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlTWFzdGVyU2VjcmV0JywgZXJyKTtcbiAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogZ2VuZXJhdGVzIGJvdGggdXNlcnMgTUFDIGFuZCBlbmNyeXB0aW9uIGtleXMuIGdlbmVyYXRlIGFzIG91dHB1dCBhbiBhcnJheVxuICAqIHdpdGggNCBieXRlQXJyYXkgZWFjaCB3aXRoIDMyIGJ5dGVzXG4gICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgICAgICAgc2VjcmV0ICAgICAgIHNlY3JldCB0byBiZSB1c2VkIGluIHRoZSBITUFDIGZ1bmN0aW9uXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgZGF0YSAgICAgICAgIGluZm9ybWF0aW9uIHRvIGJlIHVzZWQgYXMgc2VlZFxuICAqIEByZXR1cm4ge0FycmF5PGJ5dGVBcnJheT59IGtleSAgICAgICAgICBhcnJheSB3aXRoIHRoZSBpbmZvcm1hdGlvbiB0byBnZW5lcmF0ZSBrZXlzXG4gICovXG4gIGdlbmVyYXRlS2V5cyhobWFjS2V5LCBkYXRhKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgbGV0IGtleSA9IFtdO1xuICAgICAgbGV0IHNlZWQgPSBkYXRhO1xuXG4gICAgICAvLyBpdGVyYXRlIDQgdGltZXMgdG8gb2J0YWluIGEgMTAyNCBrZXkgc2l6ZVxuICAgICAgX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCkudGhlbihmdW5jdGlvbihrZXlwYXJ0MCkge1xuICAgICAgICBrZXkucHVzaChrZXlwYXJ0MCk7XG4gICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkICsga2V5cGFydDApO1xuXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKGtleXBhcnQxKSB7XG4gICAgICAgIGtleS5wdXNoKGtleXBhcnQxKTtcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQgKyBrZXlwYXJ0MSk7XG5cbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oa2V5cGFydDIpIHtcbiAgICAgICAga2V5LnB1c2goa2V5cGFydDIpO1xuICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCArIGtleXBhcnQyKTtcblxuICAgICAgfSkudGhlbihmdW5jdGlvbihrZXlwYXJ0Mykge1xuICAgICAgICBrZXkucHVzaChrZXlwYXJ0Myk7XG5cbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlS2V5cycsIGtleSk7XG4gICAgICAgIHJlc29sdmUoa2V5KTtcblxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZUtleXMnLCBlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgICAvL2NvbnNvbGUubG9nKGhtYWNLZXksIGRhdGEpO1xuICAgIH0pO1xuICB9XG5cbiAgX2ltcG9ydFJTQXNpZ25LZXkocHJpdktleSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgICAncGtjczgnLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KVxuICAgICAgICAgIHByaXZLZXksXG4gICAgICAgICAgeyAgIC8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xuICAgICAgICAgICAgbmFtZTogJ1JTQVNTQS1QS0NTMS12MV81JyxcbiAgICAgICAgICAgIGhhc2g6IHtuYW1lOiAnU0hBLTI1Nid9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMidcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcbiAgICAgICAgICBbJ3NpZ24nXSAvLyd2ZXJpZnknIGZvciBwdWJsaWMga2V5IGltcG9ydCwgJ3NpZ24nIGZvciBwcml2YXRlIGtleSBpbXBvcnRzXG4gICAgICApXG4gICAgICAudGhlbihmdW5jdGlvbihwcml2YXRlS2V5KSB7XG4gICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KVxuICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQXNpZ25LZXknLCBwcml2YXRlS2V5KTtcbiAgICAgICAgcmVzb2x2ZShwcml2YXRlS2V5KTtcblxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBc2lnbktleScsIGVycik7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBfaW1wb3J0UlNBdmVyaWZ5S2V5KHB1YktleSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgICAnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXG4gICAgICAgICAgcHViS2V5LFxuICAgICAgICAgIHsgICAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnNcbiAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsXG4gICAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXG4gICAgICAgICAgWyd2ZXJpZnknXSAvLyd2ZXJpZnknIGZvciBwdWJsaWMga2V5IGltcG9ydCwgJ3NpZ24nIGZvciBwcml2YXRlIGtleSBpbXBvcnRzXG4gICAgICApXG4gICAgICAudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcbiAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0UlNBdmVyaWZ5S2V5JywgcHVibGljS2V5KTtcbiAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpO1xuXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0F2ZXJpZnlLZXknLCBlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2ltcG9ydFJTQWVuY3J5cHRLZXkocHViS2V5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGNyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgICAgICdzcGtpJywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcbiAgICAgICAgICBwdWJLZXksXG4gICAgICAgICAgeyAgIC8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xuICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJyxcbiAgICAgICAgICAgIGhhc2g6IHtuYW1lOiAnU0hBLTI1Nid9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMidcbiAgICAgICAgICB9LFxuICAgICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcbiAgICAgICAgICBbJ2VuY3J5cHQnXSAvLydlbmNyeXB0JyBvciAnd3JhcEtleScgZm9yIHB1YmxpYyBrZXkgaW1wb3J0IG9yXG4gICAgICAgICAgICAgICAgICAgICAgLy8nZGVjcnlwdCcgb3IgJ3Vud3JhcEtleScgZm9yIHByaXZhdGUga2V5IGltcG9ydHNcbiAgICAgIClcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHB1YmxpY0tleSkge1xuICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSlcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0FlbmNyeXB0S2V5JywgcHVibGljS2V5KTtcbiAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpO1xuXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0FlbmNyeXB0S2V5JywgZXJyKTtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIF9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICAgICAgJ3BrY3M4JywgLy9jYW4gYmUgJ2p3aycgKHB1YmxpYyBvciBwcml2YXRlKSwgJ3Nwa2knIChwdWJsaWMgb25seSksIG9yICdwa2NzOCcgKHByaXZhdGUgb25seSlcbiAgICAgICAgICBwcml2S2V5LFxuICAgICAgICAgIHsgICAvL3RoZXNlIGFyZSB0aGUgYWxnb3JpdGhtIG9wdGlvbnNcbiAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXG4gICAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXG4gICAgICAgICAgWydkZWNyeXB0J10gLy8nZW5jcnlwdCcgb3IgJ3dyYXBLZXknIGZvciBwdWJsaWMga2V5IGltcG9ydCBvclxuICAgICAgICAgICAgICAgICAgICAgIC8vJ2RlY3J5cHQnIG9yICd1bndyYXBLZXknIGZvciBwcml2YXRlIGtleSBpbXBvcnRzXG4gICAgICApXG4gICAgICAudGhlbihmdW5jdGlvbihwcml2YXRlS2V5KSB7XG4gICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KVxuICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQWRlY3J5cHRLZXknLCBwcml2YXRlS2V5KTtcbiAgICAgICAgcmVzb2x2ZShwcml2YXRlS2V5KTtcblxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBZGVjcnlwdEtleScsIGVycik7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBjb25jYXRQTVN3aXRoUmFuZG9tcyhwbXMsIHRvUmFuZG9tLCBmcm9tUmFuZG9tKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBmaW5hbEtleSA9IG5ldyBVaW50OEFycmF5KHBtcy5sZW5ndGggKyB0b1JhbmRvbS5sZW5ndGggKyBmcm9tUmFuZG9tLmxlbmd0aCk7XG5cbiAgICAvLyBhZGQgUHJlbWFzdGVyS2V5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZpbmFsS2V5W2ldID0gcG1zW2ldO1xuICAgIH1cblxuICAgIC8vYWRkIHRvIHJhbmRvbVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9SYW5kb20ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZpbmFsS2V5W2kgKyBwbXMubGVuZ3RoXSA9IHBtc1tpXTtcbiAgICB9XG5cbiAgICAvL2FkZCBmcm9tIHJhbmRvbVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZnJvbVJhbmRvbS5sZW5ndGg7IGkrKykge1xuICAgICAgZmluYWxLZXlbaSArIHBtcy5sZW5ndGggKyB0b1JhbmRvbS5sZW5ndGhdID0gcG1zW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBmaW5hbEtleTtcbiAgfVxuXG4gIF9nZW5lcmF0ZTI1NmJpdEtleSgpIHtcbiAgICBsZXQgYXJyYXkgPSBuZXcgIFVpbnQ4QXJyYXkoMzIpO1xuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYXJyYXkpO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICogaW1wb3J0cyB0aGUgc2VjcmV0IHRvIHRoZSBITUFDIGZ1bmN0aW9uXG4gICogQHBhcmFtICB7Ynl0ZUFycmF5fSAgIGFycmF5QnVmZmVyICAgICBieXRlcyB0byBpbXBvcnQgYXMga2V5XG4gICogQHJldHVybiB7SlNPTn0gICAgICAga2V5ICAgICAgICAgICAgICBrZXkgcmVhZHkgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBjcnlwdG9ncmFwaGljIGZ1bmN0aW9uXG4gICovXG4gIF9pbXBvcnRITUFDa2V5KGFycmF5QnVmZmVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgX3RoaXMuX2RpZ2VzdChhcnJheUJ1ZmZlcikudGhlbigoa2V5KSA9PiB7XG5cbiAgICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG4gICAgICAgICdyYXcnLCAvL2NhbiBiZSAnandrJyBvciAncmF3J1xuICAgICAgICBrZXksXG4gICAgICAgIHsgICAvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zXG4gICAgICAgICAgbmFtZTogJ0hNQUMnLFxuICAgICAgICAgIGhhc2g6IHtuYW1lOiAnU0hBLTI1Nid9LCAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXG4gICAgICAgICAgbGVuZ3RoOiAyNTYgLy9vcHRpb25hbCwgaWYgeW91IHdhbnQgeW91ciBrZXkgbGVuZ3RoIHRvIGRpZmZlciBmcm9tIHRoZSBoYXNoIGZ1bmN0aW9uJ3MgYmxvY2sgbGVuZ3RoXG4gICAgICAgIH0sXG4gICAgICAgIHRydWUsIC8vd2hldGhlciB0aGUga2V5IGlzIGV4dHJhY3RhYmxlIChpLmUuIGNhbiBiZSB1c2VkIGluIGV4cG9ydEtleSlcbiAgICAgICAgWydzaWduJywgJ3ZlcmlmeSddIC8vY2FuIGJlIGFueSBjb21iaW5hdGlvbiBvZiAnc2lnbicgYW5kICd2ZXJpZnknXG4gICAgICAgICkudGhlbihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAvL3JldHVybnMgdGhlIHN5bW1ldHJpYyBrZXlcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydEhNQUNrZXknLCBrZXkpO1xuICAgICAgICAgIHJlc29sdmUoa2V5KTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2RpZ2VzdCh2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBjcnlwdG8uc3VidGxlLmRpZ2VzdChcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnU0hBLTI1NidcbiAgICAgICAgICB9LFxuICAgICAgICAgIHZhbHVlIC8vVGhlIGRhdGEgeW91IHdhbnQgdG8gaGFzaCBhcyBhbiBBcnJheUJ1ZmZlclxuICAgICAgKVxuICAgICAgLnRoZW4oZnVuY3Rpb24oaGFzaCkge1xuICAgICAgICAvL3JldHVybnMgdGhlIGhhc2ggYXMgYW4gQXJyYXlCdWZmZXJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWRpZ2VzdCcsIG5ldyBVaW50OEFycmF5KGhhc2gpKTtcbiAgICAgICAgcmVzb2x2ZShuZXcgVWludDhBcnJheShoYXNoKSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcbiAgfVxuXG4gIF9pbXBvcnRBRVNrZXkoYXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcbiAgICAgICAgICAncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdydcbiAgICAgICAgICBhcnJheUJ1ZmZlcixcbiAgICAgICAgICB7ICAgLy90aGlzIGlzIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xuICAgICAgICAgICAgbmFtZTogJ0FFUy1DQkMnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXG4gICAgICAgICAgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSAvL2NhbiBiZSAnZW5jcnlwdCcsICdkZWNyeXB0JywgJ3dyYXBLZXknLCBvciAndW53cmFwS2V5J1xuICAgICAgKVxuICAgICAgLnRoZW4oZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIC8vcmV0dXJucyB0aGUgc3ltbWV0cmljIGtleVxuICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8taW1wb3J0QUVTa2V5Jywga2V5KTtcbiAgICAgICAgcmVzb2x2ZShrZXkpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLWltcG9ydEFFU2tleScsIGVycik7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBfdXRmOEVuY29kZShzKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigndXRmLTgnKS5lbmNvZGUocyk7XG4gIH1cblxuICBfdXRmOERlY29kZShzKSB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigndXRmLTgnKS5kZWNvZGUocyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ3J5cHRvO1xuIiwiLyoqXG4qIGZha2UgY2xhc3MgZm9yIHRoZSBndWkgdG8gc2VsZWN0IHRoZSBpZGVudGl0eSxcbiogVE9ETyByZXBsYWNlIHdpdGggdGhlIHByb3BlciBpZGVudGl0eSBHVUlcbipcbiovXG5jbGFzcyBHdWlGYWtlIHtcblxuICBjb25zdHJ1Y3Rvcih1cmwsIG1lc3NhZ2VCdXMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX3VybCA9IHVybDtcbiAgICBfdGhpcy5fd2FpdFRpbWUgPSAxMDAwMDtcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5fdXJsLCBtc2cgPT4ge1xuXG4gICAgICBsZXQgaWRlbnRpdGllcyA9IG1zZy5ib2R5LnZhbHVlLmlkZW50aXRpZXM7XG4gICAgICBsZXQgaWRwcyA9IG1zZy5ib2R5LnZhbHVlLmlkcHM7XG5cbiAgICAgIGxldCB2YWx1ZTtcblxuICAgICAgaWYgKGlkZW50aXRpZXNbMF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZSA9IHt0eXBlOiAnaWRlbnRpdHknLCB2YWx1ZTogaWRlbnRpdGllc1swXSwgY29kZTogMjAwfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0ge3R5cGU6ICdpZHAnLCB2YWx1ZTogaWRwc1swXSwgY29kZTogMjAwfTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJlcGx5TXNnID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB2YWx1ZX07XG5cbiAgICAgIC8vIHRvIHRlc3Qgb24gdGhlIGlkZW50aXR5IHNpZGUgdGhlIGxpc3RlbmVyIHdpdGhvdXQgdGhlIHRpbWVvdXRcbiAgICAgIC8vIGNhbiByZXByZXNlbnQgdGhlIHRpbWUgdGhlIHVzZXIgdGFrZXMgdG8gY2hvb3NlIGFuZCBpZGVudGl0eVxuICAgICAgaWYgKG1zZy5ib2R5LnZhbHVlID09PSAnd2FpdCcpIHtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gICAgICAgIH0sIF90aGlzLl93YWl0VGltZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBHdWlGYWtlO1xuIiwiLyoqXG4qIFRoZSBJZGVudGl0eSBEYXRhIE1vZGVsIGlzIHVzZWQgdG8gbW9kZWwgdGhlIHJlVEhJTksgVXNlciBlbnRpdHkuIFRoZSBJZGVudGl0eSBkYXRhIG1vZGVsIGlzIGhhbmRsZWQgYnkgSWRlbnRpdHkgTWFuYWdlbWVudCBmdW5jdGlvbmFsaXR5LlxuKlxuKi9cbmNsYXNzIElkZW50aXR5IHtcblxuICBjb25zdHJ1Y3RvcihndWlkLCB0eXBlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLmd1aWQgPSBndWlkO1xuICAgIF90aGlzLnR5cGUgPSB0eXBlO1xuICAgIF90aGlzLmlkZW50aWZpZXJzTGlzdCA9IHt9O1xuXG4gIH1cblxuICBhZGRJZGVudGl0eShpZGVudGlmaWVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgaWRlbnRpdHlJbmZvcm1hdGlvbiA9IHtcbiAgICAgIGlkQXNzZXJ0aW9uOiAnJyxcbiAgICAgIHNlcnZpY2VBZGRyZXNzOiAnJyxcbiAgICAgIGF1dGhlbnRpY2F0aW9uRGF0YTogJycsXG4gICAgICBhdXRob3Jpc2F0aW9uRGF0YTogJycsXG4gICAgICB1c2VyUHJvZmlsZTogJydcbiAgICB9O1xuICAgIF90aGlzLmlkZW50aWZpZXJzTGlzdFtpZGVudGlmaWVyXSA9IGlkZW50aXR5SW5mb3JtYXRpb247XG4gIH1cblxuICBhZGRJZEFzc2VydGlvbihpZGVudGlmaWVyLCBhc3NlcnRpb24sIGlkcCwgc2NvcGUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG5ld0lkQXNzZXJ0aW9uID0gbmV3IElkQXNzZXJ0aW9uKGFzc2VydGlvbiwgaWRwLCBzY29wZSk7XG5cbiAgICBfdGhpcy5pZEFzc2VydGlvbkxpc3QucHVzaChuZXdJZEFzc2VydGlvbik7XG4gIH1cbn1cblxuY2xhc3MgSWRBc3NlcnRpb24ge1xuXG4gIGNvbnN0cnVjdG9yKGFzc2VydGlvbiwgaWRwLCBzY29wZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5hc3NlcnRpb24gPSBhc3NlcnRpb247XG4gICAgX3RoaXMuaWRwID0gaWRwO1xuICAgIF90aGlzLnNjb3BlID0gc2NvcGU7XG4gIH1cblxufVxuXG5jbGFzcyBJZFZhbGlkYXRpb24ge1xuXG4gIGNvbnN0cnVjdG9yKGlkZW50aXR5LCBjb250ZW50cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICBfdGhpcy5jb250ZW50cyA9IGNvbnRlbnRzO1xuICB9XG5cbiAgdmFsaWRhdGVzKGlkZW50aXR5LCBjb250ZW50cykge1xuICAgIC8vVE9ETyBpbXBsZW1lbnQgdGhlIGxvZ2ljXG5cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJZGVudGl0eTtcbiIsIlxuaW1wb3J0IHtkaXZpZGVVUkwsIGdldFVzZXJVUkxGcm9tRW1haWwsIGdldFVzZXJFbWFpbEZyb21VUkwsIGlzRGF0YU9iamVjdFVSTCwgY29udmVydFRvVXNlclVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMuanMnO1xuaW1wb3J0IElkZW50aXR5IGZyb20gJy4vSWRlbnRpdHknO1xuaW1wb3J0IENyeXB0byBmcm9tICcuL0NyeXB0byc7XG5pbXBvcnQgR3VpRmFrZSBmcm9tICcuL0d1aUZha2UnO1xuXG4vKipcbipcbiogVGhlIElkZW50aXR5IE1vZHVsZSAoSWQgTW9kdWxlKSBpcyB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBoYW5kbGluZyB0aGVcbiogdXNlciBpZGVudGl0eSBhbmQgdGhlIGFzc29jaWF0aW9uIG9mIHRoaXMgaWRlbnRpdHkgd2l0aCB0aGUgSHlwZXJ0eSBpbnN0YW5jZXMsXG4qIGluIG9yZGVyIHRvIG1ha2UgSHlwZXJ0eSBpbnN0YW5jZXMgaWRlbnRpZmlhYmxlLiBUaGUgaWRlbnRpdHkgaW4gdGhlIHJlVEhJTksgcHJvamVjdFxuKiBpcyBub3QgZml4ZWQgdG8gYSB1bmlxdWUgSWRlbnRpdHkgU2VydmljZSBQcm92aWRlciwgYnV0IG9idGFpbmVkIHRocm91Z2ggc2V2ZXJhbFxuKiBkaWZmZXJlbnQgSWRlbnRpdHkgc291cmNlcy4gV2l0aCB0aGlzIGFwcHJvYWNoLCB0aGUgSWQgTW9kdWxlIHByb3ZpZGVzIHRvIHRoZSB1c2VyIHRoZVxuKiBvcHRpb24gdG8gY2hvb3NlIHRoZSBwcmVmZXJyZWQgbWV0aG9kIGZvciBhdXRoZW50aWNhdGlvbi5cbiogVGhpcyBtb2R1bGUgd2lsbCB0aHVzIGFibGUgdG8gc3VwcG9ydCBtdWx0aXBsZSBJZGVudGl0eSBhY3F1aXNpdGlvbiBtZXRob2RzLFxuKiBzdWNoIGFzIE9wZW5JRCBjb25uZWN0IDEuMCwgS2VyYmVyb3MgU3lzdGVtLCBvciBhdXRoZW50aWNhdGlvbiB0aHJvdWdoIHNtYXJ0IGNhcmRzLlxuKiBGb3IgZXhhbXBsZSwgYSB1c2VyIHdpdGggYSBHb29nbGUgYWNjb3VudCBjYW4gdXNlIHRoZSBHb29nbGUgYXMgYW4gSWRlbnRpdHkgUHJvdmlkZXIgdG8gcHJvdmlkZSBJZGVudGl0eSBUb2tlbnMsXG4qICB3aGljaCBjYW4gYmUgdXNlZCBieSB0aGUgSWRlbnRpdHkgTW9kdWxlIHRvIGFzc29jaWF0ZSBpdCB3aXRoIGEgSHlwZXJ0eSBpbnN0YW5jZS5cbipcbiogVGhlIElkZW50aXR5IE1vZHVsZSB1c2VzIGEgbm9kZSBwYWNrYWdlLCB0aGUgSGVsbG9KUywgd2hpY2ggaXMgYSBjbGllbnQtc2lkZSBKYXZhU2NyaXB0IEFQSSBmb3IgYXV0aGVudGljYXRpb25cbiogdGhhdCBmYWNpbGl0YXRlcyB0aGUgcmVxdWVzdHMgZm9yIHRoZSBPcGVuSUQgY29ubmVjdCBwcm90b2NvbC4gVGhpcyBtZXRob2QgYWxsb3dzIGZvciBzb21lIGFic3RyYWN0aW9uXG4qIHdoZW4gbWFraW5nIHJlcXVlc3RzIGZvciBkaWZmZXJlbnQgSWRlbnRpdHkgUHJvdmlkZXJzLCBzdWNoIGFzIE9wZW5JRCBjb25uZWN0IHVzZWQgYnkgR29vZ2xlLCBGYWNlYm9vaywgTWljcm9zb2Z0LCBmb3IgZXhhbXBsZS5cbipcbiogV2hlbiBhIHJlcXVlc3QgZm9yIGEgdXNlciBpZGVudGl0eSBpcyBtYWRlIHVzaW5nIHRoZSBtZXRob2QgbG9naW5XaXRoUlAoaWRlbnRpZmllciwgc2NvcGUpLFxuKiB0aGlzIG1ldGhvZCB3aWxsIGFuYWx5c2UgdGhlIElkZW50aXR5IFByb3ZpZGVyIGNob3NlbiB0byBvYnRhaW4gYW4gaWRlbnRpdHkgYW5kIHdpbGwgdXNlIHRoZSBIZWxsb0pTIG5vZGUgcGFja2FnZVxuKiB3aXRoIHRoZSBzZWxlY3RlZCBJZGVudGl0eSBQcm92aWRlciBhbmQgaWRlbnRpdHkgc2NvcGUuIEFmdGVyIHRoZSBIZWxsb0pTIHJlcXVlc3QgZm9yIGFuIEFjY2VzcyBUb2tlblxuKiB0byB0aGUgSWRlbnRpdHkgUHJvdmlkZXJzLCB0aGUgdXNlciB3aWxsIGJlIHByb21wdGVkIHRvIGF1dGhlbnRpY2F0ZSB0b3dhcmRzIHRoZSBJZGVudGl0eSBQcm92aWRlci5cbiogVXBvbiByZWNlaXZpbmcgdGhlIEFjY2VzcyBUb2tlbiwgdGhpcyB0b2tlbiBpcyB2YWxpZGF0ZWQgd2l0aCBhIFJFU1RmdWwgd2ViIHNlcnZpY2UgcmVxdWVzdCB0byBhbiBlbmRwb2ludFxuKiBvbiB0aGUgSWRlbnRpdHkgUHJvdmlkZXIgQXV0aG9yaXphdGlvbiBTZXJ2ZXIsIGFuZCBhZnRlciB0aGUgdmFsaWRhdGlvbiBpcyBkb25lLFxuKiBhbiBJRCB0b2tlbiBpcyBvYnRhaW5lZCB3aXRoIHRoZSBpbmZvcm1hdGlvbiBhY2NvcmRpbmcgdG8gdGhlIHNjb3BlIHJlcXVpcmVkLlxuKiBUaGlzIElEIHRva2VuIGlzIHRoZW4gcHJlc2VydmVkIGluIHRoaXMgbW9kdWxlIHRoYXQgY2FuIG9idGFpbmVkIHRocm91Z2ggdGhlIGdldElkZW50aXRpZXMoKVxuKiBhbmQgaXMgcGFzc2VkIGFzIHJldHVybiB2YWx1ZSBvZiB0aGUgbG9naW5XaXRoUlAgZnVuY3Rpb24uIFRoZSBtZXRob2RzIGdlbmVyYXRlQXNzZXJ0aW9uIGFuZCB2YWxpZGF0ZUFzc2VydGlvbiBoYXZlIG5vdCB5ZXQgYmVlbiBkZXZlbG9wZWQuXG4qXG4qL1xuY2xhc3MgSWRlbnRpdHlNb2R1bGUge1xuXG4gIC8qKlxuICAqIFRoaXMgaXMgdGhlIGNvbnN0cnVjdG9yIHRvIGluaXRpYWxpc2UgdGhlIElkZW50aXR5IE1vZHVsZSBpdCBkb2VzIG5vdCByZXF1aXJlIGFueSBpbnB1dC5cbiAgKi9cbiAgY29uc3RydWN0b3IocnVudGltZVVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXJ1bnRpbWVVUkwpIHRocm93IG5ldyBFcnJvcigncnVudGltZVVSTCBpcyBtaXNzaW5nLicpO1xuXG4gICAgX3RoaXMuX3J1bnRpbWVVUkwgPSBydW50aW1lVVJMO1xuICAgIF90aGlzLl9pZG1VUkwgPSBfdGhpcy5fcnVudGltZVVSTCArICcvaWRtJztcbiAgICBfdGhpcy5fZ3VpVVJMID0gX3RoaXMuX3J1bnRpbWVVUkwgKyAnL2lkZW50aXR5LWd1aSc7XG5cbiAgICBfdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKF90aGlzLl9ydW50aW1lVVJMKS5kb21haW47XG5cbiAgICAvL3RvIHN0b3JlIGl0ZW1zIHdpdGggdGhpcyBmb3JtYXQ6IHtpZGVudGl0eTogaWRlbnRpdHlVUkwsIHRva2VuOiB0b2tlbklEfVxuICAgIF90aGlzLmlkZW50aXRpZXMgPSBbXTtcbiAgICBfdGhpcy5lbWFpbHNMaXN0ID0gW107XG4gICAgbGV0IG5ld0lkZW50aXR5ID0gbmV3IElkZW50aXR5KCdndWlkJywnSFVNQU4nKTtcbiAgICBfdGhpcy5pZGVudGl0eSA9IG5ld0lkZW50aXR5O1xuICAgIF90aGlzLmNyeXB0byA9IG5ldyBDcnlwdG8oKTtcblxuICAgIC8vc3RvcmVzIHRoZSBhc3NvY2lhdGlvbiBvZiB0aGUgZGF0YU9iamVjdCBhbmQgdGhlIEh5cGVydHkgcmVnaXN0ZXJlZCB3aXRoaW5cbiAgICBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5ID0ge307XG5cbiAgICAvLyBoYXNoVGFibGUgdG8gc3RvcmUgYWxsIHRoZSBjcnlwdG8gaW5mb3JtYXRpb24gYmV0d2VlbiB0d28gaHlwZXJ0aWVzXG4gICAgX3RoaXMuY2hhdEtleXMgPSB7fTtcblxuICAgIC8vIGhhc2hUYWJsZSB0byBzdG9yZSB0aGUgc3ltbWV0cmljIGtleXMgdG8gYmUgdXNlZCBpbiB0aGUgY2hhdCBncm91cFxuICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5cyA9IHt9O1xuXG4gICAgLy9mYWlsc2FmZSB0byBlbmFibGUvZGlzYWJsZSBhbGwgdGhlIGNyaXB0b2dyYXBoaWMgZnVuY3Rpb25zXG4gICAgX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSB0cnVlO1xuXG4gICAgLy8gdmFyaWFibGUgdG8ga25vdyBpZiB0aGUgR1VJIGlzIGRlcGxveWVkIHRvIGNob29zZSB0aGUgaWRlbnRpdHkuIGlmIHRoZSByZWFsIEdVSSBpcyBub3QgZGVwbG95ZWQsIGEgZmFrZSBndWkgaXMgZGVwbG95ZWQgaW5zdGVhZC5cbiAgICBfdGhpcy5ndWlEZXBsb3llZCA9IGZhbHNlO1xuXG4gICAgLy8gdmVyaWZpY2F0aW9uIG9mIG5vZGVKUywgYW5kIGluIGNhc2UgaXQgaXMgbm9kZUpTIHRoZW4gZGlzYWJsZSBlbmNyeXB0aW9uXG4gICAgLy8gVE9ETyBpbXByb3ZlIGxhdGVyLCB0aGlzIGV4aXN0cyBiZWNhdXNlIHRoZSBjcnlwdG8gbGliIHVzZXMgYnJvd3NlciBjcnlwdG9ncmFwaGljIG1ldGhvZHNcbiAgICAvL190aGlzLmlzVG9Vc2VFbmNyeXB0aW9uID0gKHdpbmRvdykgPyB0cnVlIDogZmFsc2U7XG5cbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1cztcbiAgfVxuXG4gIC8qKlxuICAqIFNldCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBzZXQgbWVzc2FnZUJ1cyhtZXNzYWdlQnVzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XG5cbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybiB0aGUgcmVnaXN0cnkgaW4gdGhpcyBpZE1vZHVsZVxuICAqIEBwYXJhbSB7cmVnaXN0cnl9ICAgICAgICAgICByZWdpc3RyeVxuICAqL1xuICBnZXQgcmVnaXN0cnkoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX3JlZ2lzdHJ5O1xuICB9XG5cbiAgLyoqXG4gICogU2V0IHRoZSByZWdpc3RyeSBpbiB0aGlzIGlkTW9kdWxlXG4gICogQHBhcmFtIHtyZWdpc3RyeX0gICAgIHJlZ1xuICAqL1xuICBzZXQgcmVnaXN0cnkocmVnaXN0cnkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5O1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gcmV0dXJuIGFsbCB0aGUgaWRlbnRpdGllcyByZWdpc3RlcmVkIHdpdGhpbiBhIHNlc3Npb24gYnkgYSB1c2VyLlxuICAqIFRoZXNlIGlkZW50aXRpZXMgYXJlIHJldHVybmVkIGluIGFuIGFycmF5IGNvbnRhaW5pbmcgYSBKU09OIHBhY2thZ2UgZm9yIGVhY2ggdXNlciBpZGVudGl0eS5cbiAgKiBAcmV0dXJuIHtBcnJheTxJZGVudGl0aWVzPn0gICAgICAgICBJZGVudGl0aWVzXG4gICovXG4gIGdldElkZW50aXRpZXMoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuaWRlbnRpdGllcztcbiAgfVxuXG4gIC8qKlxuICAqIGdldHMgYWxsIHRoZSBpbmZvcm1hdGlvbiBmcm9tIGEgZ2l2ZW4gdXNlclVSTFxuICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJVUkwgICAgIHVzZXIgdXJsXG4gICogQHJldHVybiB7SlNPTn0gICAgaWRlbnRpdHkgICAgaWRlbnRpdHkgYnVuZGxlIGZyb20gdGhlIHVzZXJVUkxcbiAgKi9cbiAgZ2V0SWRlbnRpdHkodXNlclVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XG5cbiAgICAgIGxldCBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdO1xuICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7XG4gICAgICAgIHJldHVybiBpZGVudGl0eTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyAnaWRlbnRpdHkgbm90IGZvdW5kJztcbiAgfVxuXG4gIGRlcGxveUdVSSgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLmd1aURlcGxveWVkID0gdHJ1ZTtcbiAgfVxuXG4gIGdldElkZW50aXR5T2ZIeXBlcnR5KGh5cGVydHlVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbGV0IHNwbGl0VVJMID0gaHlwZXJ0eVVSTC5zcGxpdCgnOi8vJyk7XG4gICAgICBpZiAoc3BsaXRVUkxbMF0gIT09ICdoeXBlcnR5Jykge1xuICAgICAgICBfdGhpcy5fZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0KGh5cGVydHlVUkwpLnRoZW4oKHJldHVybmVkSHlwZXJ0eVVSTCkgPT4ge1xuICAgICAgICAgIGxldCB1c2VyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHJldHVybmVkSHlwZXJ0eVVSTCk7XG4gICAgICAgICAgaWYgKHVzZXJVUkwpIHtcblxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggaW4gX3RoaXMuaWRlbnRpdGllcykge1xuICAgICAgICAgICAgICBsZXQgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTtcbiAgICAgICAgICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoaWRlbnRpdHkubWVzc2FnZUluZm8pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoJ25vIGlkZW50aXR5IHdhcyBmb3VuZCAnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHVzZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIoaHlwZXJ0eVVSTCk7XG4gICAgICAgIGlmICh1c2VyVVJMKSB7XG5cbiAgICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XG4gICAgICAgICAgICBsZXQgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChpZGVudGl0eS5pZGVudGl0eSA9PT0gdXNlclVSTCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiByZWplY3QoJ25vIGlkZW50aXR5IHdhcyBmb3VuZC4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0SWRlbnRpdGllc1RvQ2hvb3NlKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGlkZW50aXRpZXMgPSBfdGhpcy5lbWFpbHNMaXN0O1xuICAgIGxldCBpZHBzID0gWydnb29nbGUuY29tJywgJ21pY3Jvc29mdC5jb20nLCAnb3JhbmdlLmZyJ107XG5cbiAgICByZXR1cm4ge2lkZW50aXRpZXM6IGlkZW50aXRpZXMsIGlkcHM6IGlkcHN9O1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gcmV0dXJuIGFsbCB0aGUgdXNlcnMgVVJMcyByZWdpc3RlcmVkIHdpdGhpbiBhIHNlc3Npb25cbiAgKiBUaGVzZSB1c2VycyBVUkxzIGFyZSByZXR1cm5lZCBpbiBhbiBhcnJheSBvZiBzdHJpbmdzLlxuICAqIEBwYXJhbSAge0Jvb2xlYW59ICBlbWFpbEZvcm1hdCAoT3B0aW9uYWwpICAgYm9vbGVhbiB0byBpbmRpY2F0ZSB0byByZXR1cm4gaW4gZW1haWwgZm9ybWF0XG4gICogQHJldHVybiB7QXJyYXk8U3RyaW5nPn0gICAgICAgICB1c2Vyc1xuICAqL1xuICBnZXRVc2Vyc0lEcyhlbWFpbEZvcm1hdCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHVzZXJzID0gW107XG5cbiAgICAvL2lmIHJlcXVlc3QgY29tZXMgd2l0aCB0aGUgZW1haWxGb3JtYXQgb3B0aW9uLCB0aGVuIGNvbnZlcnQgdXJsIHRvIGVtYWlsIGZvcm1hdFxuICAgIGxldCBjb252ZXJ0ZXIgPSAoZW1haWxGb3JtYXQpID8gZ2V0VXNlckVtYWlsRnJvbVVSTCA6ICh2YWx1ZSkgPT4ge3JldHVybiB2YWx1ZTt9O1xuXG4gICAgZm9yIChsZXQgaW5kZXggaW4gX3RoaXMuaWRlbnRpdGllcykge1xuICAgICAgbGV0IGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07XG4gICAgICB1c2Vycy5wdXNoKGNvbnZlcnRlcihpZGVudGl0eS5pZGVudGl0eSkpO1xuICAgIH1cbiAgICByZXR1cm4gdXNlcnM7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gdGhlIHNlbGVjdGVkIElkZW50aXR5IHdpdGhpbiBhIHNlc3Npb25cbiAgKiBAcmV0dXJuIHtJZGVudGl0eX0gICAgICAgIGlkZW50aXR5ICAgICAgICAgaWRlbnRpdHlcbiAgKi9cbiAgZ2V0Q3VycmVudElkZW50aXR5KCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLmN1cnJlbnRJZGVudGl0eTtcbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHNldCB0aGUgY3VycmVudCBJZGVudGl0eSB3aXRoIGEgZ2l2ZW4gSWRlbnRpdHlcbiAgKiBAcGFyYW0ge0lkZW50aXR5fSAgICAgICAgaWRlbnRpdHkgICAgICAgICBpZGVudGl0eVxuICAqL1xuICBzZXRDdXJyZW50SWRlbnRpdHkoaWRlbnRpdHkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IGlkZW50aXR5O1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gcmVtb3ZlIGFuIGlkZW50aXR5IGZyb20gdGhlIElkZW50aXRpZXMgYXJyYXlcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgdXNlcklEICAgICAgdXNlcklEXG4gICovXG4gIGRlbGV0ZUlkZW50aXR5KHVzZXJJRCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgdXNlclVSTCA9IGNvbnZlcnRUb1VzZXJVUkwodXNlcklEKTtcblxuICAgIGZvciAobGV0IGlkZW50aXR5IGluIF90aGlzLmlkZW50aXRpZXMpIHtcbiAgICAgIGlmIChfdGhpcy5pZGVudGl0aWVzW2lkZW50aXR5XS5pZGVudGl0eSA9PT0gdXNlclVSTCkge1xuICAgICAgICBfdGhpcy5pZGVudGl0aWVzLnNwbGljZShpZGVudGl0eSwgMSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdW5yZWdpc3RlciBhbiBpZGVudGl0eSBmcm9tIHRoZSBlbWFpbHNMaXN0IGFycmF5IGFuZCBub3Qgc2hvdyBpbiB0byB0aGUgR1VJXG4gICogQHBhcmFtIHtTdHJpbmd9ICAgIGVtYWlsICAgICAgZW1haWxcbiAgKi9cbiAgdW5yZWdpc3RlcklkZW50aXR5KGVtYWlsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGZvciAobGV0IGUgaW4gX3RoaXMuZW1haWxzTGlzdCkge1xuICAgICAgaWYgKF90aGlzLmVtYWlsc0xpc3RbZV0gPT09IGVtYWlsKSB7XG4gICAgICAgIF90aGlzLmVtYWlsc0xpc3Quc3BsaWNlKGUsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgcmVzb2x2ZSBhbmQgY3JlYXRlIHRoZSBkb21haW5VUkwgaW4gY2FzZSBpdCBpcyBwcm92aWRlZCBvbmUuIElmIG5vdCwgcmVzb2x2ZSB0aGUgZGVmYXVsdCBkb21haW5VUkxcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgIGlkcERvbWFpbiAgICAgaWRwRG9tYWluIChPcHRpb25hbClcbiAgKi9cbiAgX3Jlc29sdmVEb21haW4oaWRwRG9tYWluKSB7XG4gICAgaWYgKCFpZHBEb21haW4pIHtcbiAgICAgIHJldHVybiAnZG9tYWluLWlkcDovL2dvb2dsZS5jb20nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly8nICsgaWRwRG9tYWluO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIGxvZ2luIGEgdXNlciB3aXRoaW4gdGhlIHNlc3Npb24sIGl0IHdpbGwgc3RhcnQgdGhlIHByb2Nlc3MgdG8gb2J0YWluIGFuIElkZW50aXR5IGZyb20gYSB1c2VyLCBpbmNsdWRpbmcgdGhlIHJlcXVlc3QgZm9yIGFuIGlkZW50aXR5IEFzc2VydGlvbi4gVGhlIGZ1bmN0aW9uIHJldHVybnMgYSBwcm9taXNlIHdpdGggdGhlIHRva2VuIHJlY2VpdmVkIGJ5IHRoZSBpZHBQcm94eS5cbiAgKlxuICAqIEBwYXJhbSAge0lkZW50aWZpZXJ9ICAgICAgaWRlbnRpZmllciAgICAgIGlkZW50aWZpZXJcbiAgKiBAcGFyYW0gIHtTY29wZX0gICAgICAgICAgIHNjb3BlICAgICAgICAgICBzY29wZVxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgUHJvbWlzZSAgICAgICAgIElEVG9rZW4gY29udGFpbmluZyB0aGUgdXNlciBpbmZvcm1hdGlvblxuICAqL1xuICBsb2dpbldpdGhSUChpZGVudGlmaWVyLCBzY29wZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyB2ZXJpZmljYXRpb24gYW5kIHJlZmFjdG9yIHRoaXMgcGFydFxuICAgICAgX3RoaXMuY3VycmVudElkZW50aXR5ID0gdW5kZWZpbmVkO1xuICAgICAgX3RoaXMuZ2V0SWRlbnRpdHlBc3NlcnRpb24oJ2lkZW50aWZpZXInLCAnb3JpZ2luJywgJ2hpbnQnLCBpZGVudGlmaWVyKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdsb2dpbldpdGhSUCcpO1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZygnbG9naW5XaXRoUlAgZXJyJyk7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0aGF0IHNlbmRzIGEgcmVxdWVzdCB0byB0aGUgR1VJIHVzaW5nIG1lc3NhZ2VzLiBTZW5kcyBhbGwgaWRlbnRpdGllcyByZWdpc3RlcmVkIGFuZFxuICAqIHRoZSBJZHBzIHN1cHBvcnRlZCwgYW5kIHJldHVybiB0aGUgaWRlbnRpdHkvaWRwIHJlY2VpdmVkIGJ5IHRoZSBHVUlcbiAgKiBAcGFyYW0ge0FycmF5PGlkZW50aXR5Pn0gIGlkZW50aXRpZXMgICAgICBsaXN0IG9mIGlkZW50aXRpaWVzXG4gICogQHBhcmFtIHtBcnJheTxTdHJpbmc+fSAgICBpZHBzICAgICAgICAgICAgbGlzdCBvZiBpZHBzIHRvIGF1dGhlbnRpY2F0ZVxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgcmV0dXJucyBhIGNob3NlbiBpZGVudGl0eSBvciBpZHBcbiAgKi9cbiAgcmVxdWVzdElkZW50aXR5VG9HVUkoaWRlbnRpdGllcywgaWRwcykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgLy9jb25kaXRpb24gdG8gY2hlY2sgaWYgdGhlIHJlYWwgR1VJIGlzIGRlcGxveWVkLiBJZiBub3QsIGRlcGxveXMgYSBmYWtlIGd1aVxuICAgICAgaWYgKF90aGlzLmd1aURlcGxveWVkID09PSBmYWxzZSkge1xuXG4gICAgICAgIGxldCBndWlGYWtlID0gbmV3IEd1aUZha2UoX3RoaXMuX2d1aVVSTCwgX3RoaXMuX21lc3NhZ2VCdXMpO1xuICAgICAgICBfdGhpcy5ndWlGYWtlID0gZ3VpRmFrZTtcbiAgICAgICAgX3RoaXMuZ3VpRGVwbG95ZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgbWVzc2FnZSA9IHt0eXBlOidjcmVhdGUnLCB0bzogX3RoaXMuX2d1aVVSTCwgZnJvbTogX3RoaXMuX2lkbVVSTCxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge3ZhbHVlOiB7aWRlbnRpdGllczogaWRlbnRpdGllcywgaWRwczogaWRwc319fTtcblxuICAgICAgbGV0IGlkID0gX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XG5cbiAgICAgIC8vYWRkIGxpc3RlbmVyIHdpdGhvdXQgdGltb3V0XG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRSZXNwb25zZUxpc3RlbmVyKF90aGlzLl9pZG1VUkwsIGlkLCBtc2cgPT4ge1xuICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5yZW1vdmVSZXNwb25zZUxpc3RlbmVyKF90aGlzLl9pZG1VUkwsIGlkKTtcblxuICAgICAgICBpZiAobXNnLmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgbGV0IHNlbGVjdGVkSWRlbnRpdHkgPSBtc2cuYm9keTtcblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdzZWxlY3RlZElkZW50aXR5OiAnLCBzZWxlY3RlZElkZW50aXR5LnZhbHVlKTtcbiAgICAgICAgICByZXNvbHZlKHNlbGVjdGVkSWRlbnRpdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gcmVxdWVzdGluZyBhbiBpZGVudGl0eSB0byB0aGUgR1VJJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgb3BlblBvcHVwKHVybHJlY2VpdmVkKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgd2luID0gd2luZG93Lm9wZW4odXJscmVjZWl2ZWQsICdvcGVuSURyZXF1ZXN0JywgJ3dpZHRoPTgwMCwgaGVpZ2h0PTYwMCcpO1xuICAgICAgaWYgKHdpbmRvdy5jb3Jkb3ZhKSB7XG4gICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgbGV0IHVybCA9IGUudXJsO1xuICAgICAgICAgIGxldCBjb2RlID0gL1xcJmNvZGU9KC4rKSQvLmV4ZWModXJsKTtcbiAgICAgICAgICBsZXQgZXJyb3IgPSAvXFwmZXJyb3I9KC4rKSQvLmV4ZWModXJsKTtcblxuICAgICAgICAgIGlmIChjb2RlIHx8IGVycm9yKSB7XG4gICAgICAgICAgICB3aW4uY2xvc2UoKTtcbiAgICAgICAgICAgIHJlc29sdmUodXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBvbGxUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAod2luLmNsb3NlZCkge1xuICAgICAgICAgICAgICByZWplY3QoJ1NvbWUgZXJyb3Igb2NjdXJlZCB3aGVuIHRyeWluZyB0byBnZXQgaWRlbnRpdHkuJyk7XG4gICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHdpbi5kb2N1bWVudC5VUkwuaW5kZXhPZignaWRfdG9rZW4nKSAhPT0gLTEgfHwgd2luLmRvY3VtZW50LlVSTC5pbmRleE9mKGxvY2F0aW9uLm9yaWdpbikgIT09IC0xKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKHBvbGxUaW1lcik7XG4gICAgICAgICAgICAgIGxldCB1cmwgPSAgIHdpbi5kb2N1bWVudC5VUkw7XG5cbiAgICAgICAgICAgICAgd2luLmNsb3NlKCk7XG4gICAgICAgICAgICAgIHJlc29sdmUodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgNTAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRoYXQgZmV0Y2ggYW4gaWRlbnRpdHlBc3NlcnRpb24gZnJvbSBhIHVzZXIuXG4gICpcbiAgKiBAcmV0dXJuIHtJZEFzc2VydGlvbn0gICAgICAgICAgICAgIElkQXNzZXJ0aW9uXG4gICovXG4gIGdldElkZW50aXR5QXNzZXJ0aW9uKGlkZW50aWZpZXIsIG9yaWdpbiwgdXNlcm5hbWVIaW50LCBpZHBEb21haW4pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIC8vQ0hFQ0sgd2hldGhlciBpcyBicm93c2VyIGVudmlyb25tZW50IG9yIG5vZGVqc1xuICAgICAgLy9pZiBpdCBpcyBicm93c2VyLCB0aGVuIGNyZWF0ZSBhIGZha2UgaWRlbnRpdHlcblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHdpbmRvdykge1xuXG4gICAgICAgICAgbGV0IGlkZW50aXRpZXNJbmZvID0gX3RoaXMuZ2V0SWRlbnRpdGllc1RvQ2hvb3NlKCk7XG5cbiAgICAgICAgICBfdGhpcy5yZXF1ZXN0SWRlbnRpdHlUb0dVSShpZGVudGl0aWVzSW5mby5pZGVudGl0aWVzLCBpZGVudGl0aWVzSW5mby5pZHBzKS50aGVuKHZhbHVlID0+IHtcblxuICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdpZGVudGl0eScpIHtcblxuICAgICAgICAgICAgICBsZXQgY2hvc2VuSUQgPSBnZXRVc2VyVVJMRnJvbUVtYWlsKHZhbHVlLnZhbHVlKTtcblxuICAgICAgICAgICAgICAvLyByZXR1cm5zIHRoZSBpZGVudGl0eSBpbmZvIGZyb20gdGhlIGNob3NlbiBpZFxuICAgICAgICAgICAgICBmb3IgKGxldCBpIGluIF90aGlzLmlkZW50aXRpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpXS5pZGVudGl0eSA9PT0gY2hvc2VuSUQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzLmlkZW50aXRpZXNbaV0ubWVzc2FnZUluZm8pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZWplY3QoJ25vIGlkZW50aXR5IHdhcyBmb3VuZCAuJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnR5cGUgPT09ICdpZHAnKSB7XG5cbiAgICAgICAgICAgICAgX3RoaXMuY2FsbEdlbmVyYXRlTWV0aG9kcyh2YWx1ZS52YWx1ZSwgb3JpZ2luKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIEdVSSByZWNlaXZlZCBtZXNzYWdlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG5cbiAgICAgICAgaWYgKF90aGlzLmN1cnJlbnRJZGVudGl0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy9UT0RPIHZlcmlmeSB3aGV0aGVyIHRoZSB0b2tlbiBpcyBzdGlsbCB2YWxpZCBvciBub3QuXG4gICAgICAgICAgLy8gc2hvdWxkIGJlIG5lZWRlZCB0byBtYWtlIGZ1cnRoZXIgcmVxdWVzdHMsIHRvIG9idGFpbiBhIHZhbGlkIHRva2VuXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMuY3VycmVudElkZW50aXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0SWRlbnRpdHlBc3NlcnRpb24gZm9yIG5vZGVqcycpO1xuICAgICAgICAgIGxldCByYW5kb21OdW1iZXIgPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMTAwMDApICsgMSk7XG4gICAgICAgICAgbGV0IGlkZW50aXR5QnVuZGxlID0ge1xuICAgICAgICAgICAgYXNzZXJ0aW9uOiAnYXNzZXJ0aW9uJyxcbiAgICAgICAgICAgIGlkcDonbm9kZWpzJyxcbiAgICAgICAgICAgIHVzZXJQcm9maWxlOiB7XG4gICAgICAgICAgICAgIGF2YXRhcjogJ2h0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS8tV2FDcmpWTU1WLVEvQUFBQUFBQUFBQUkvQUFBQUFBQUFBQXMvOE9sVnFDcFNCOWMvcGhvdG8uanBnJyxcbiAgICAgICAgICAgICAgY246ICd0ZXN0IG5vZGVqcycsXG4gICAgICAgICAgICAgIHVzZXJuYW1lOiAnbm9kZWpzLScgKyByYW5kb21OdW1iZXIgKyAnQG5vZGVqcy5jb20nLFxuICAgICAgICAgICAgICB1c2VyVVJMOiAndXNlcjovL25vZGVqcy5jb20vbm9kZWpzLScgKyByYW5kb21OdW1iZXJcbiAgICAgICAgICAgIH19O1xuICAgICAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IGlkZW50aXR5QnVuZGxlO1xuICAgICAgICAgIF90aGlzLmlkZW50aXRpZXMucHVzaChpZGVudGl0eUJ1bmRsZSk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoaWRlbnRpdHlCdW5kbGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjYWxsR2VuZXJhdGVNZXRob2RzKGlkcCwgb3JpZ2luKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBwdWJsaWNLZXk7XG4gICAgICBsZXQgdXNlcmtleVBhaXI7XG5cbiAgICAgIC8vZ2VuZXJhdGVzIHRoZSBSU0Ega2V5IHBhaXJcbiAgICAgIF90aGlzLmNyeXB0by5nZW5lcmF0ZVJTQUtleVBhaXIoKS50aGVuKGZ1bmN0aW9uKGtleVBhaXIpIHtcblxuICAgICAgICBwdWJsaWNLZXkgPSBidG9hKGtleVBhaXIucHVibGljKTtcbiAgICAgICAgdXNlcmtleVBhaXIgPSBrZXlQYWlyO1xuICAgICAgICByZXR1cm4gX3RoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocHVibGljS2V5LCBvcmlnaW4sICcnLCB1c2Vya2V5UGFpciwgaWRwKTtcblxuICAgICAgfSkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmdlbmVyYXRlQXNzZXJ0aW9uKHB1YmxpY0tleSwgb3JpZ2luLCB1cmwsIHVzZXJrZXlQYWlyLCBpZHApO1xuXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gb2J0YWluaW5nIElkZW50aXR5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgc2VuZEdlbmVyYXRlTWVzc2FnZShjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGlkcERvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRvbWFpbiA9IF90aGlzLl9yZXNvbHZlRG9tYWluKGlkcERvbWFpbik7XG4gICAgbGV0IG1lc3NhZ2U7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbWVzc2FnZSA9IHt0eXBlOidleGVjdXRlJywgdG86IGRvbWFpbiwgZnJvbTogX3RoaXMuX2lkbVVSTCwgYm9keToge3Jlc291cmNlOiAnaWRlbnRpdHknLCBtZXRob2Q6ICdnZW5lcmF0ZUFzc2VydGlvbicsIHBhcmFtczoge2NvbnRlbnRzOiBjb250ZW50cywgb3JpZ2luOiBvcmlnaW4sIHVzZXJuYW1lSGludDogdXNlcm5hbWVIaW50fX19O1xuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcykgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gcmVzLmJvZHkudmFsdWU7XG5cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHN0b3JlSWRlbnRpdHkocmVzdWx0LCBrZXlQYWlyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBzcGxpdGVkQXNzZXJ0aW9uID0gcmVzdWx0LmFzc2VydGlvbi5zcGxpdCgnLicpO1xuICAgICAgbGV0IGFzc2VydGlvblBhcnNlZDtcblxuICAgICAgLy92ZXJpZnkgaWYgdGhlIHRva2VuIGNvbnRhaW5zIHRoZSAzIGNvbXBvbmVudHMsIG9yIGp1c3QgdGhlIGFzc2VydGlvblxuICAgICAgaWYgKHNwbGl0ZWRBc3NlcnRpb25bMV0pIHtcbiAgICAgICAgYXNzZXJ0aW9uUGFyc2VkID0gSlNPTi5wYXJzZShhdG9iKHNwbGl0ZWRBc3NlcnRpb25bMV0pKTtcbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgYXNzZXJ0aW9uUGFyc2VkID0gSlNPTi5wYXJzZShhdG9iKHJlc3VsdC5hc3NlcnRpb24pKTtcbiAgICAgIH1cbiAgICAgIGxldCBpZFRva2VuO1xuXG4gICAgICAvL1RPRE8gcmVtb3ZlIHRoZSB2ZXJpZmljYXRpb24gYW5kIHJlbW92ZSB0aGUgdG9rZW5JREpTT04gZnJvbSB0aGUgZ29vZ2xlIGlkcFByb3h5O1xuICAgICAgaWYgKGFzc2VydGlvblBhcnNlZC50b2tlbklESlNPTikge1xuICAgICAgICBpZFRva2VuID0gYXNzZXJ0aW9uUGFyc2VkLnRva2VuSURKU09OO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWRUb2tlbiA9IGFzc2VydGlvblBhcnNlZDtcbiAgICAgIH1cblxuICAgICAgbGV0IGVtYWlsID0gaWRUb2tlbi5lbWFpbCB8fCBpZFRva2VuLnN1YjtcblxuICAgICAgbGV0IGlkZW50aWZpZXIgPSBnZXRVc2VyVVJMRnJvbUVtYWlsKGVtYWlsKTtcblxuICAgICAgcmVzdWx0LmlkZW50aXR5ID0gaWRlbnRpZmllcjtcblxuICAgICAgX3RoaXMuaWRlbnRpdHkuYWRkSWRlbnRpdHkocmVzdWx0KTtcblxuICAgICAgLy8gY2hlY2sgaWYgZXhpc3RzIGFueSBpbmZvVG9rZW4gaW4gdGhlIHJlc3VsdCByZWNlaXZlZFxuICAgICAgbGV0IGluZm9Ub2tlbiA9IChyZXN1bHQuaW5mb1Rva2VuKSA/IHJlc3VsdC5pbmZvVG9rZW4gOiB7fTtcblxuICAgICAgbGV0IGNvbW1vbk5hbWUgPSBpZFRva2VuLm5hbWUgfHwgZW1haWwuc3Vic3RyaW5nKDAsIGVtYWlsLmluZGV4T2YoJ0AnKSk7XG4gICAgICBsZXQgdXNlclByb2ZpbGVCdW5kbGUgPSB7dXNlcm5hbWU6IGVtYWlsLCBjbjogY29tbW9uTmFtZSwgYXZhdGFyOiBpbmZvVG9rZW4ucGljdHVyZSwgbG9jYWxlOiBpbmZvVG9rZW4ubG9jYWxlLCB1c2VyVVJMOiBpZGVudGlmaWVyfTtcblxuICAgICAgLy9jcmVhdGlvbiBvZiBhIG5ldyBKU09OIHdpdGggdGhlIGlkZW50aXR5IHRvIHNlbmQgdmlhIG1lc3NhZ2VzXG4gICAgICBsZXQgbmV3SWRlbnRpdHkgPSB7dXNlclByb2ZpbGU6IHVzZXJQcm9maWxlQnVuZGxlLCBpZHA6IHJlc3VsdC5pZHAuZG9tYWluLCBhc3NlcnRpb246IHJlc3VsdC5hc3NlcnRpb259O1xuICAgICAgcmVzdWx0Lm1lc3NhZ2VJbmZvID0gbmV3SWRlbnRpdHk7XG4gICAgICByZXN1bHQua2V5UGFpciA9IGtleVBhaXI7XG5cbiAgICAgIF90aGlzLmN1cnJlbnRJZGVudGl0eSA9IG5ld0lkZW50aXR5O1xuXG4gICAgICAvL3ZlcmlmeSBpZiB0aGUgaWQgYWxyZWFkeSBleGlzdHMuIElmIGFscmVhZHkgZXhpc3RzIHRoZW4gZG8gbm90IGFkZCB0byB0aGUgaWRlbnRpdGllcyBsaXN0O1xuICAgICAgbGV0IGlkQWxyZWFkeUV4aXN0cyA9IGZhbHNlO1xuICAgICAgbGV0IG9sZElkO1xuICAgICAgZm9yIChsZXQgaWRlbnRpdHkgaW4gX3RoaXMuaWRlbnRpdGllcykge1xuICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0uaWRlbnRpdHkgPT09IHJlc3VsdC5pZGVudGl0eSkge1xuICAgICAgICAgIGlkQWxyZWFkeUV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgb2xkSWQgPSBfdGhpcy5pZGVudGl0aWVzW2lkZW50aXR5XS5tZXNzYWdlSW5mbztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaWRBbHJlYWR5RXhpc3RzKSB7XG4gICAgICAgIHJlc29sdmUob2xkSWQpO1xuICAgICAgICBsZXQgZXhpc3RzID0gZmFsc2U7XG5cbiAgICAgICAgLy9jaGVjayBpZiB0aGUgaWRlbnRpdHkgZXhpc3RzIGluIGVtYWlsTGlzdCwgaWYgbm90IGFkZCBpdFxuICAgICAgICAvL1RoaXMgaXMgdXNlZnVsIGlmIGFuIGlkZW50aXR5IHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgYnV0IHdhcyBsYXRlciB1bnJlZ2lzdGVyZWRcbiAgICAgICAgZm9yIChsZXQgaSBpbiBfdGhpcy5lbWFpbHNMaXN0KSB7XG4gICAgICAgICAgaWYgKF90aGlzLmVtYWlsc0xpc3RbaV0gPT09IGVtYWlsKSB7XG4gICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZXhpc3RzKSB7XG4gICAgICAgICAgX3RoaXMuZW1haWxzTGlzdC5wdXNoKGVtYWlsKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5lbWFpbHNMaXN0LnB1c2goZW1haWwpO1xuICAgICAgICBfdGhpcy5pZGVudGl0aWVzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgcmVzb2x2ZShuZXdJZGVudGl0eSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFJlcXVlc3RzIHRoZSBJZHBQcm94eSBmcm9tIGEgZ2l2ZW4gRG9tYWluIGZvciBhbiBpZGVudGl0eUFzc2VydGlvblxuICAqXG4gICogQHBhcmFtICB7RE9NU3RyaW5nfSBjb250ZW50cyAgICAgY29udGVudHNcbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IG9yaWdpbiAgICAgICBvcmlnaW5cbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IHVzZXJuYW1lSGludCB1c2VybmFtZUhpbnRcbiAgKiBAcGFyYW0gIHtKU09OfSAgICAgIGtleVBhaXIgICAgICAgdXNlciBrZXlQYWlyXG4gICogQHJldHVybiB7SWRBc3NlcnRpb259ICAgICAgICAgICAgICBJZEFzc2VydGlvblxuICAqL1xuICBnZW5lcmF0ZUFzc2VydGlvbihjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGtleVBhaXIsIGlkcERvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBjb25zb2xlLmxvZygnZ2VuZXJhdGVBc3NlcnRpb24nKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBfdGhpcy5zZW5kR2VuZXJhdGVNZXNzYWdlKGNvbnRlbnRzLCBvcmlnaW4sIHVzZXJuYW1lSGludCwgaWRwRG9tYWluKS50aGVuKChyZXN1bHQpID0+IHtcblxuICAgICAgICBpZiAocmVzdWx0LmxvZ2luVXJsKSB7XG5cbiAgICAgICAgICBfdGhpcy5vcGVuUG9wdXAocmVzdWx0LmxvZ2luVXJsKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0KSB7XG5cbiAgICAgICAgICBfdGhpcy5zdG9yZUlkZW50aXR5KHJlc3VsdCwga2V5UGFpcikudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdlcnJvciBvbiBvYnRhaW5pbmcgaWRlbnRpdHkgaW5mb3JtYXRpb24nKTtcbiAgICAgICAgfVxuXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIE9USEVSIFVTRVInUyBJREVOVElUWVxuICAqL1xuXG4gIC8qKlxuICAqIFJlcXVlc3RzIHRoZSBJZHBQcm94eSBmcm9tIGEgZ2l2ZW4gRG9tYWluIHRvIHZhbGlkYXRlIGFuIElkZW50aXR5QXNzZXJ0aW9uXG4gICogUmV0dXJucyBhIHByb21pc2Ugd2l0aCB0aGUgcmVzdWx0IGZyb20gdGhlIHZhbGlkYXRpb24uXG4gICogQHBhcmFtICB7RE9NU3RyaW5nfSBhc3NlcnRpb25cbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IG9yaWdpbiAgICAgICBvcmlnaW5cbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgIFByb21pc2UgICAgICAgICBwcm9taXNlIHdpdGggdGhlIHJlc3VsdCBmcm9tIHRoZSB2YWxpZGF0aW9uXG4gICovXG4gIHZhbGlkYXRlQXNzZXJ0aW9uKGFzc2VydGlvbiwgb3JpZ2luLCBpZHBEb21haW4pIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGRvbWFpbiA9IF90aGlzLl9yZXNvbHZlRG9tYWluKGlkcERvbWFpbik7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHt0eXBlOidleGVjdXRlJywgdG86IGRvbWFpbiwgZnJvbTogX3RoaXMuX2lkbVVSTCwgYm9keToge3Jlc291cmNlOiAnaWRlbnRpdHknLCBtZXRob2Q6ICd2YWxpZGF0ZUFzc2VydGlvbicsXG4gICAgICAgICAgICBwYXJhbXM6IHthc3NlcnRpb246IGFzc2VydGlvbiwgb3JpZ2luOiBvcmlnaW59fX07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdC5ib2R5LnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2Vycm9yJywgcmVzdWx0LmJvZHkuY29kZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZW5jcnlwdE1lc3NhZ2UobWVzc2FnZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBjb25zb2xlLmxvZygnZW5jcnlwdCBtZXNzYWdlICcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbGV0IGlzSGFuZFNoYWtlVHlwZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2hhbmRzaGFrZSc7XG5cbiAgICAgIC8vaWYgaXMgbm90IHRvIGFwcGx5IGVuY3J5cHRpb24sIHRoZW4gcmV0dXJucyByZXNvbHZlXG4gICAgICBpZiAoIV90aGlzLmlzVG9Vc2VFbmNyeXB0aW9uICYmICFpc0hhbmRTaGFrZVR5cGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2VuY3J5cHRpb24gZGlzYWJsZWQnKTtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyBsb2dpYyBhbmQgbW92ZSBpdCB0byBhIHV0aWwgZnVuY3Rpb25cbiAgICAgIGxldCBzcGxpdGVkVG9VUkwgPSBtZXNzYWdlLnRvLnNwbGl0KCcvJyk7XG4gICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM107XG4gICAgICBpZiAoc3BsaXRlZFRvVVJMLmxlbmd0aCA+IDYpIHtcbiAgICAgICAgZGF0YU9iamVjdFVSTCA9IHNwbGl0ZWRUb1VSTFswXSArICcvLycgKyBzcGxpdGVkVG9VUkxbMl0gKyAnLycgKyBzcGxpdGVkVG9VUkxbM10gKyAnLycgKyBzcGxpdGVkVG9VUkxbNF07XG4gICAgICB9XG5cbiAgICAgIGxldCBpc1RvRGF0YU9iamVjdCA9IGlzRGF0YU9iamVjdFVSTChkYXRhT2JqZWN0VVJMKTtcbiAgICAgIGxldCBpc0Zyb21IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknO1xuICAgICAgbGV0IGlzVG9IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JztcblxuICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHtcbiAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0h5cGVydHkpIHtcbiAgICAgICAgbGV0IHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKG1lc3NhZ2UuZnJvbSk7XG4gICAgICAgIGlmICh1c2VyVVJMKSB7XG5cbiAgICAgICAgICAvLyBjaGVjayBpZiBleGlzdHMgYW55IGtleXMgYmV0d2VlbiB0d28gdXNlcnNcbiAgICAgICAgICBsZXQgY2hhdEtleXMgPSBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLmZyb20gKyAnPC0+JyArIG1lc3NhZ2UudG9dO1xuICAgICAgICAgIGlmICghY2hhdEtleXMpIHtcbiAgICAgICAgICAgIGNoYXRLZXlzID0gX3RoaXMuX25ld0NoYXRDcnlwdG8obWVzc2FnZSwgdXNlclVSTCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY3JlYXRlQ2hhdEtleSBlbmNyeXB0JywgbWVzc2FnZS5mcm9tICsgbWVzc2FnZS50byk7XG4gICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLmZyb20gKyAnPC0+JyArIG1lc3NhZ2UudG9dID0gY2hhdEtleXM7XG4gICAgICAgICAgICBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2UgPSAnc3RhcnRIYW5kU2hha2UnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkICYmICFpc0hhbmRTaGFrZVR5cGUpIHtcblxuICAgICAgICAgICAgbGV0IGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcbiAgICAgICAgICAgIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCBtZXNzYWdlLmJvZHkudmFsdWUsIGl2KS50aGVuKGVuY3J5cHRlZFZhbHVlID0+IHtcblxuICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgbWVzc2FnZS5ib2R5LnZhbHVlICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSkudGhlbihoYXNoID0+IHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXN1bHQgb2YgaGFzaCAnLCBoYXNoKTtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB7aXY6IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpLCB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSksIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCl9O1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGlmIGlzIGEgaGFuZHNoYWtlIG1lc3NhZ2UsIGp1c3QgcmVzb2x2ZSBpdFxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNIYW5kU2hha2VUeXBlKSB7XG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAvLyBlbHNlLCBzdGFydHMgYSBuZXcgaGFuZHNoYWtlIHByb3RvY29sXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLl9kb0hhbmRTaGFrZVBoYXNlKG1lc3NhZ2UsIGNoYXRLZXlzKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b10gPSB2YWx1ZS5jaGF0S2V5cztcblxuICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh2YWx1ZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgcmVqZWN0KCdlbmNyeXB0IGhhbmRzaGFrZSBwcm90b2NvbCBwaGFzZSAnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAvL2lmIGZyb20gaHlwZXJ0eSB0byBhIGRhdGFPYmplY3RVUkxcbiAgICAgIH0gZWxzZSBpZiAoaXNGcm9tSHlwZXJ0eSAmJiBpc1RvRGF0YU9iamVjdCkge1xuICAgICAgICBjb25zb2xlLmxvZygnZGF0YU9iamVjdCB2YWx1ZSB0byBlbmNyeXB0OiAnLCBtZXNzYWdlLmJvZHkudmFsdWUpO1xuXG4gICAgICAgIGxldCBkYXRhT2JqZWN0S2V5ID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdO1xuXG4gICAgICAgIC8vaWYgbm8ga2V5IGV4aXN0cywgY3JlYXRlIGEgbmV3IG9uZSBpZiBpcyB0aGUgcmVwb3J0ZXIgb2YgZGF0YU9iamVjdFxuICAgICAgICBpZiAoIWRhdGFPYmplY3RLZXkpIHtcbiAgICAgICAgICBsZXQgaXNIeXBlcnR5UmVwb3J0ZXIgPSBfdGhpcy5yZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMoZGF0YU9iamVjdFVSTCk7XG5cbiAgICAgICAgICAvLyBpZiB0aGUgaHlwZXJ0eSBpcyB0aGUgcmVwb3J0ZXIgb2YgdGhlIGRhdGFPYmplY3QgdGhlbiBnZW5lcmF0ZXMgYSBzZXNzaW9uIGtleVxuICAgICAgICAgIGlmIChpc0h5cGVydHlSZXBvcnRlciAmJiBpc0h5cGVydHlSZXBvcnRlciA9PT0gbWVzc2FnZS5mcm9tKSB7XG5cbiAgICAgICAgICAgIGxldCBzZXNzaW9uS2V5ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7XG4gICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gPSB7c2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWV9O1xuXG4gICAgICAgICAgICBkYXRhT2JqZWN0S2V5ID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhIHNlc3Npb24ga2V5IGZvciB0aGUgY2hhdCByb29tXG4gICAgICAgIGlmIChkYXRhT2JqZWN0S2V5KSB7XG5cbiAgICAgICAgICAvLyBhbmQgaWYgaXMgdG8gYXBwbHkgZW5jcnlwdGlvbiwgZW5jcnlwdCB0aGUgbWVzc2FnZXNcbiAgICAgICAgICBpZiAoZGF0YU9iamVjdEtleS5pc1RvRW5jcnlwdCkge1xuICAgICAgICAgICAgbGV0IGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcblxuICAgICAgICAgICAgX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBfdGhpcy5jcnlwdG8uZW5jb2RlKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UuYm9keS52YWx1ZSkpLCBpdikudGhlbihlbmNyeXB0ZWRWYWx1ZSA9PiB7XG5cbiAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIG1lc3NhZ2UuYm9keS52YWx1ZSArIGl2LCBkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXkpO1xuXG4gICAgICAgICAgICAgIF90aGlzLmNyeXB0by5oYXNoSE1BQyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIGZpbHRlcmVkTWVzc2FnZSkudGhlbihoYXNoID0+IHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdoYXNoICcsIGhhc2gpO1xuXG4gICAgICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0ge3ZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKSwgaXY6IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2gpfTtcblxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IEpTT04uc3RyaW5naWZ5KG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gaWYgbm90LCBqdXN0IHNlbmQgdGhlIG1lc3NhZ2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzdGFydCB0aGUgZ2VuZXJhdGlvbiBvZiBhIG5ldyBzZXNzaW9uIEtleVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnZmFpbGVkIHRvIGRlY3J5cHQgbWVzc2FnZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBkZWNyeXB0TWVzc2FnZShtZXNzYWdlKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0IG1lc3NhZ2UgJyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBsZXQgaXNIYW5kU2hha2VUeXBlID0gbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJztcblxuICAgICAgLy9pZiBpcyBub3QgdG8gYXBwbHkgZW5jcnlwdGlvbiwgdGhlbiByZXR1cm5zIHJlc29sdmVcbiAgICAgIGlmICghX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gJiYgIWlzSGFuZFNoYWtlVHlwZSkge1xuICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGlvbiBkaXNhYmxlZCcpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgIH1cblxuICAgICAgLy9UT0RPIHJlbW92ZSB0aGlzIGxvZ2ljIGFuZCBtb3ZlIGl0IHRvIGEgdXRpbCBmdW5jdGlvblxuXG4gICAgICBsZXQgc3BsaXRlZFRvVVJMID0gbWVzc2FnZS50by5zcGxpdCgnLycpO1xuICAgICAgbGV0IGRhdGFPYmplY3RVUkwgPSBzcGxpdGVkVG9VUkxbMF0gKyAnLy8nICsgc3BsaXRlZFRvVVJMWzJdICsgJy8nICsgc3BsaXRlZFRvVVJMWzNdO1xuICAgICAgaWYgKHNwbGl0ZWRUb1VSTC5sZW5ndGggPiA2KSB7XG4gICAgICAgIGRhdGFPYmplY3RVUkwgPSBzcGxpdGVkVG9VUkxbMF0gKyAnLy8nICsgc3BsaXRlZFRvVVJMWzJdICsgJy8nICsgc3BsaXRlZFRvVVJMWzNdICsgJy8nICsgc3BsaXRlZFRvVVJMWzRdO1xuICAgICAgfVxuXG4gICAgICBsZXQgaXNUb0RhdGFPYmplY3QgPSBpc0RhdGFPYmplY3RVUkwoZGF0YU9iamVjdFVSTCk7XG4gICAgICBsZXQgaXNGcm9tSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JztcbiAgICAgIGxldCBpc1RvSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLnRvKS50eXBlID09PSAnaHlwZXJ0eSc7XG5cbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnKSB7XG4gICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICB9XG5cbiAgICAgIC8vaXMgaXMgaHlwZXJ0eSB0byBoeXBlcnR5IGNvbW11bmljYXRpb25cbiAgICAgIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5KSB7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ2RlY3J5cHQgaHlwZXJ0eSB0byBoeXBlcnR5Jyk7XG4gICAgICAgIGxldCB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihtZXNzYWdlLnRvKTtcbiAgICAgICAgaWYgKHVzZXJVUkwpIHtcblxuICAgICAgICAgIGxldCBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW21lc3NhZ2UudG8gKyAnPC0+JyArIG1lc3NhZ2UuZnJvbV07XG4gICAgICAgICAgaWYgKCFjaGF0S2V5cykge1xuICAgICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtZXNzYWdlLCB1c2VyVVJMLCAnZGVjcnlwdCcpO1xuICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXSA9IGNoYXRLZXlzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkICYmICFpc0hhbmRTaGFrZVR5cGUpIHtcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IEpTT04ucGFyc2UobWVzc2FnZS5ib2R5LnZhbHVlKTtcbiAgICAgICAgICAgIGxldCBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaXYpO1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLnZhbHVlKTtcbiAgICAgICAgICAgIGxldCBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZSh2YWx1ZS5oYXNoKTtcbiAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpLnRoZW4oZGVjcnlwdGVkRGF0YSA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWQgdmFsdWUgJywgZGVjcnlwdGVkRGF0YSk7XG4gICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS52YWx1ZSA9IGRlY3J5cHRlZERhdGE7XG5cbiAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7XG5cbiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIGhhc2gpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdyZXN1bHQgb2YgaGFzaCB2ZXJpZmljYXRpb24hICcsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmFzc2VydGVkSWRlbnRpdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzSGFuZFNoYWtlVHlwZSkge1xuICAgICAgICAgICAgX3RoaXMuX2RvSGFuZFNoYWtlUGhhc2UobWVzc2FnZSwgY2hhdEtleXMpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcblxuICAgICAgICAgICAgICAvL2lmIGl0IHdhcyBzdGFydGVkIGJ5IGRvTXV0dWFsQXV0aGVudGljYXRpb24gdGhlbiBlbmRzIHRoZSBwcm90b2NvbFxuICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdoYW5kU2hha2VFbmQnKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCdkZWNyeXB0IGhhbmRzaGFrZSBwcm90b2NvbCBwaGFzZSAnKTtcblxuICAgICAgICAgICAgICAvLyBpZiB3YXMgc3RhcnRlZCBieSBhIG1lc3NhZ2UsIHRoZW4gcmVzZW5kIHRoYXQgbWVzc2FnZVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmNoYXRLZXlzW21lc3NhZ2UudG8gKyAnPC0+JyArIG1lc3NhZ2UuZnJvbV0gPSB2YWx1ZS5jaGF0S2V5cztcbiAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh2YWx1ZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICByZWplY3QoJ2RlY3J5cHQgaGFuZHNoYWtlIHByb3RvY29sIHBoYXNlICcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCd3cm9uZyBtZXNzYWdlIGRvIGRlY3J5cHQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdlcnJvciBvbiBkZWNyeXB0IG1lc3NhZ2UnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vaWYgZnJvbSBoeXBlcnR5IHRvIGEgZGF0YU9iamVjdFVSTFxuICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdkYXRhT2JqZWN0IHZhbHVlIHRvIGRlY3J5cHQ6ICcsIG1lc3NhZ2UuYm9keSk7XG5cbiAgICAgICAgbGV0IGRhdGFPYmplY3RLZXkgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF07XG5cbiAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkpIHtcblxuICAgICAgICAgIC8vY2hlY2sgaWYgaXMgdG8gYXBwbHkgZW5jcnlwdGlvblxuICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5LmlzVG9FbmNyeXB0KSB7XG4gICAgICAgICAgICBsZXQgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKG1lc3NhZ2UuYm9keS52YWx1ZSk7XG4gICAgICAgICAgICBsZXQgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLml2KTtcbiAgICAgICAgICAgIGxldCBlbmNyeXB0ZWRWYWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUocGFyc2VkVmFsdWUudmFsdWUpO1xuICAgICAgICAgICAgbGV0IGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLmhhc2gpO1xuXG4gICAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIGVuY3J5cHRlZFZhbHVlLCBpdikudGhlbihkZWNyeXB0ZWRWYWx1ZSA9PiB7XG4gICAgICAgICAgICAgIGxldCBwYXJzZWRWYWx1ZSA9IEpTT04ucGFyc2UoYXRvYihkZWNyeXB0ZWRWYWx1ZSkpO1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGVkIFZhbHVlLCcsIHBhcnNlZFZhbHVlKTtcbiAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gcGFyc2VkVmFsdWU7XG5cbiAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIHBhcnNlZFZhbHVlICsgaXYpO1xuXG4gICAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uISAnLCByZXN1bHQpO1xuXG4gICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmFzc2VydGVkSWRlbnRpdHkgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvL2lmIG5vdCwganVzdCByZXR1cm4gdGhlIG1lc3NhZ2VcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmFzc2VydGVkSWRlbnRpdHkgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZXNzYWdlLmJvZHkuYXNzZXJ0ZWRJZGVudGl0eSA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcblxuICAgICAgICAgIC8vcmVqZWN0KCdubyBzZXNzaW9uS2V5IGZvciBjaGF0IHJvb20gZm91bmQnKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoJ3dyb25nIG1lc3NhZ2UgdG8gZGVjcnlwdCcpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICBkb011dHVhbEF1dGhlbnRpY2F0aW9uKHNlbmRlciwgcmVjZWl2ZXIpIHtcbiAgICBjb25zb2xlLmxvZygnZG9NdXR1YWxBdXRoZW50aWNhdGlvbjogJywgc2VuZGVyLCByZWNlaXZlcik7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgZGF0YU9iamVjdFVSTDtcblxuICAgIC8vIGNoZWNrIGlmIHRoZSBzZW5kZXIgaXMgYSBkYXRhT2JqZWN0IGFuZCBpZiBzbyBzdG9yZXMgdGhhdCB2YWx1ZVxuICAgIGxldCByZXBvcnRlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhzZW5kZXIpO1xuICAgIGlmIChyZXBvcnRlclVSTCkge1xuICAgICAgZGF0YU9iamVjdFVSTCA9IHNlbmRlcjtcbiAgICAgIHNlbmRlciA9IHJlcG9ydGVyVVJMO1xuICAgIH1cblxuICAgIGxldCBtc2cgPSB7XG4gICAgICB0bzogcmVjZWl2ZXIsXG4gICAgICBmcm9tOiBzZW5kZXIsXG4gICAgICBjYWxsYmFjazogdW5kZWZpbmVkLFxuICAgICAgYm9keToge2hhbmRzaGFrZVBoYXNlOiAnc3RhcnRIYW5kU2hha2UnLCBpZ25vcmU6ICdpZ25vcmVNZXNzYWdlJ31cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBpZiAoIXNlbmRlciB8fCAhcmVjZWl2ZXIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdCgnc2VuZGVyIG9yIHJlY2VpdmVyIG1pc3Npbmcgb24gZG9NdXR1YWxBdXRoZW50aWNhdGlvbicpO1xuICAgICAgfVxuXG4gICAgICBsZXQgY2hhdEtleXMgPSBfdGhpcy5jaGF0S2V5c1tzZW5kZXIgKyAnPC0+JyArIHJlY2VpdmVyXTtcbiAgICAgIGxldCB1c2VyVVJMID0gX3RoaXMuX3JlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihzZW5kZXIpO1xuXG4gICAgICBpZiAodXNlclVSTCkge1xuXG4gICAgICAgIGlmICghY2hhdEtleXMpIHtcbiAgICAgICAgICAvLyBjYWxsYmFjayB0byByZXNvbHZlIHdoZW4gZmluaXNoIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb25cbiAgICAgICAgICBsZXQgcmVzb2x2ZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhbGxiYWNrIHZhbHVlOicsIHZhbHVlKTtcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgbXNnLmNhbGxiYWNrID0gcmVzb2x2ZWQ7XG4gICAgICAgICAgbXNnLmRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMO1xuXG4gICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtc2csIHVzZXJVUkwpO1xuICAgICAgICAgIF90aGlzLmNoYXRLZXlzW3NlbmRlciArICc8LT4nICsgcmVjZWl2ZXJdID0gY2hhdEtleXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhdEtleXMuYXV0aGVudGljYXRlZCkge1xuXG4gICAgICAgICAgbGV0IHN0YXJ0U2Vzc2lvbktleUV4Y2hhbmdlID0ge1xuICAgICAgICAgICAgdG86IHNlbmRlcixcbiAgICAgICAgICAgIGZyb206IHJlY2VpdmVyXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjaGF0S2V5cy5kYXRhT2JqZWN0VVJMID0gZGF0YU9iamVjdFVSTDtcbiAgICAgICAgICBfdGhpcy5fc2VuZFJlcG9ydGVyU2Vzc2lvbktleShzdGFydFNlc3Npb25LZXlFeGNoYW5nZSwgY2hhdEtleXMpLnRoZW4odmFsdWUgPT4ge1xuXG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZSh2YWx1ZS5tZXNzYWdlKTtcbiAgICAgICAgICAgIHJlc29sdmUoJ2V4Y2hhbmdlIG9mIGNoYXQgc2Vzc2lvbktleSBpbml0aWF0ZWQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIF90aGlzLl9kb0hhbmRTaGFrZVBoYXNlKG1zZywgY2hhdEtleXMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoJ2Vycm9yIG9uIGRvTXV0dWFsQXV0aGVudGljYXRpb24nKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgX2RvSGFuZFNoYWtlUGhhc2UobWVzc2FnZSwgY2hhdEtleXMpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy9jb25zb2xlLmxvZygnaGFuZHNoYWtlVHlwZScpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIGxldCBoYW5kc2hha2VUeXBlID0gbWVzc2FnZS5ib2R5LmhhbmRzaGFrZVBoYXNlO1xuICAgICAgbGV0IGl2O1xuICAgICAgbGV0IGhhc2g7XG4gICAgICBsZXQgdmFsdWUgPSB7fTtcbiAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2U7XG4gICAgICBzd2l0Y2ggKGhhbmRzaGFrZVR5cGUpIHtcblxuICAgICAgICBjYXNlICdzdGFydEhhbmRTaGFrZSc6XG4gICAgICAgICAgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7XG5cbiAgICAgICAgICBsZXQgc3RhcnRIYW5kU2hha2VNc2cgPSB7XG4gICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgIHRvOiBtZXNzYWdlLnRvLFxuICAgICAgICAgICAgZnJvbTogbWVzc2FnZS5mcm9tLFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckhlbGxvJyxcbiAgICAgICAgICAgICAgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJIZWxsbyA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHN0YXJ0SGFuZFNoYWtlTXNnLCB1bmRlZmluZWQsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgIC8vIGNoZWNrIGlmIHdhcyB0aGUgZW5jcnlwdCBmdW5jdGlvbiBvciB0aGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uIHRoYXQgcmVxdWVzdCB0aGVcbiAgICAgICAgICAvLyBzdGFydCBvZiB0aGUgaGFuZFNoYWtlUGhhc2UuXG4gICAgICAgICAgaWYgKGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlKSB7cmVzb2x2ZSh7bWVzc2FnZTogc3RhcnRIYW5kU2hha2VNc2csIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLmZyb20gKyAnPC0+JyArIG1lc3NhZ2UudG9dID0gY2hhdEtleXM7XG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShzdGFydEhhbmRTaGFrZU1zZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzZW5kZXJIZWxsbyc6XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZGVySGVsbG8nKTtcbiAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnNlbmRlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSk7XG4gICAgICAgICAgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tID0gX3RoaXMuY3J5cHRvLmRlY29kZShtZXNzYWdlLmJvZHkudmFsdWUpO1xuICAgICAgICAgIGNoYXRLZXlzLmtleXMudG9SYW5kb20gPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTtcblxuICAgICAgICAgIGxldCBzZW5kZXJIZWxsb01zZyA9IHtcbiAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxuICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJIZWxsbycsXG4gICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGNoYXRLZXlzLmtleXMudG9SYW5kb20pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChzZW5kZXJIZWxsb01zZywgdW5kZWZpbmVkLCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XG4gICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogc2VuZGVySGVsbG9Nc2csIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZWNlaXZlckhlbGxvJzpcblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckhlbGxvJyk7XG4gICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5yZWNlaXZlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSk7XG5cbiAgICAgICAgICBfdGhpcy52YWxpZGF0ZUFzc2VydGlvbihtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uLCB1bmRlZmluZWQsIG1lc3NhZ2UuYm9keS5pZGVudGl0eS5pZHApLnRoZW4oKHZhbHVlKSA9PiB7XG5cbiAgICAgICAgICAgIC8vVE9ETyByZW1vdmUgbGF0ZXIgdGhpcyB2ZXJpZmljYXRpb24gYXMgc29vbiBhcyBhbGwgdGhlIElkUCBwcm94eSBhcmUgdXBkYXRlZCBpbiB0aGUgZXhhbXBsZVxuICAgICAgICAgICAgbGV0IGVuY29kZWRwdWJsaWNLZXkgPSAodHlwZW9mIHZhbHVlLmNvbnRlbnRzID09PSAnc3RyaW5nJykgPyB2YWx1ZS5jb250ZW50cyA6IHZhbHVlLmNvbnRlbnRzLm5vbmNlO1xuXG4gICAgICAgICAgICBsZXQgcmVjZWl2ZXJQdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKGVuY29kZWRwdWJsaWNLZXkpO1xuICAgICAgICAgICAgbGV0IHByZW1hc3RlclNlY3JldCA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVBNUygpO1xuICAgICAgICAgICAgbGV0IHRvUmFuZG9tID0gbWVzc2FnZS5ib2R5LnZhbHVlO1xuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLmFzc2VydGlvbiA9IG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb247XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5ID0gcmVjZWl2ZXJQdWJsaWNLZXk7XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8udXNlcklEICAgID0gdmFsdWUuY29udGVudHMuZW1haWw7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICA9IF90aGlzLmNyeXB0by5kZWNvZGUodG9SYW5kb20pO1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXkgPSBwcmVtYXN0ZXJTZWNyZXQ7XG5cbiAgICAgICAgICAgIGxldCBjb25jYXRLZXkgPSBfdGhpcy5jcnlwdG8uY29uY2F0UE1Td2l0aFJhbmRvbXMocHJlbWFzdGVyU2VjcmV0LCBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tLCBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlTWFzdGVyU2VjcmV0KGNvbmNhdEtleSwgJ21lc3NhZ2VIaXN0b3JpYycgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcblxuICAgICAgICAgICAgLy9nZW5lcmF0ZSB0aGUgbWFzdGVyIGtleVxuICAgICAgICAgIH0pLnRoZW4oKG1hc3RlcktleSkgPT4ge1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5tYXN0ZXJLZXkgPSBtYXN0ZXJLZXk7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVLZXlzKG1hc3RlcktleSwgJ2tleSBleHBhbnNpb24nICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XG5cbiAgICAgICAgICAgIC8vZ2VuZXJhdGUgdGhlIHN5bW1ldHJpYyBhbmQgaGFzaCBrZXlzXG4gICAgICAgICAgfSkudGhlbigoa2V5cykgPT4ge1xuXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzBdKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7XG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzJdKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1szXSk7XG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XG4gICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpO1xuXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVN0cnVjdHVyZSA9IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXG4gICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXG4gICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3NlbmRlckNlcnRpZmljYXRlJ1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBoYXNoIHRoZSB2YWx1ZSBhbmQgdGhlIGl2XG4gICAgICAgICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlU3RydWN0dXJlLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSk7XG4gICAgICAgICAgfSkudGhlbigoaGFzaCkgPT4ge1xuICAgICAgICAgICAgdmFsdWUuaGFzaCA9IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCk7XG5cbiAgICAgICAgICAgIC8vZW5jcnlwdCB0aGUgZGF0YVxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2snLCBpdik7XG4gICAgICAgICAgfSkudGhlbigoZW5jcnlwdGVkRGF0YSkgPT4ge1xuICAgICAgICAgICAgdmFsdWUuc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWREYXRhKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0UlNBKGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXksIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5KTtcblxuICAgICAgICAgIH0pLnRoZW4oKGVuY3J5cHRlZFZhbHVlKSA9PiB7XG5cbiAgICAgICAgICAgIHZhbHVlLmFzc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7XG5cbiAgICAgICAgICAgIGxldCBtZXNzYWdlU3RydWN0dXJlID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGxldCBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZVN0cnVjdHVyZSwgY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXksIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5zaWduUlNBKGNoYXRLZXlzLmh5cGVydHlGcm9tLnByaXZhdGVLZXksIEpTT04uc3RyaW5naWZ5KGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgSlNPTi5zdHJpbmdpZnkobWVzc2FnZVRvSGFzaCkpO1xuXG4gICAgICAgICAgfSkudGhlbihzaWduYXR1cmUgPT4ge1xuXG4gICAgICAgICAgICB2YWx1ZS5zaWduYXR1cmUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKHNpZ25hdHVyZSk7XG5cbiAgICAgICAgICAgIGxldCByZWNlaXZlckhlbGxvTXNnID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBidG9hKEpTT04uc3RyaW5naWZ5KHZhbHVlKSlcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVyQ2VydGlmaWNhdGUgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckhlbGxvTXNnLCAnb2snICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogcmVjZWl2ZXJIZWxsb01zZywgY2hhdEtleXM6IGNoYXRLZXlzfSk7XG5cbiAgICAgICAgICB9LCBlcnJvciA9PiByZWplY3QoZXJyb3IpKTtcblxuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2VuZGVyQ2VydGlmaWNhdGUnOlxuXG4gICAgICAgICAgY29uc29sZS5sb2coJ3NlbmRlckNlcnRpZmljYXRlJyk7XG4gICAgICAgICAgbGV0IHJlY2VpdmVkVmFsdWUgPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7XG5cbiAgICAgICAgICBfdGhpcy52YWxpZGF0ZUFzc2VydGlvbihtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uLCB1bmRlZmluZWQsIG1lc3NhZ2UuYm9keS5pZGVudGl0eS5pZHApLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBsZXQgZW5jcnlwdGVkUE1TID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLmFzc3ltZXRyaWNFbmNyeXB0aW9uKTtcblxuICAgICAgICAgICAgLy9UT0RPIHJlbW92ZSBsYXRlciB0aGlzIHZlcmlmaWNhdGlvbiBhcyBzb29uIGFzIGFsbCB0aGUgSWRQIHByb3h5IGFyZSB1cGRhdGVkIGluIHRoZSBleGFtcGxlXG4gICAgICAgICAgICBsZXQgZW5jb2RlZHB1YmxpY0tleSA9ICh0eXBlb2YgdmFsdWUuY29udGVudHMgPT09ICdzdHJpbmcnKSA/IHZhbHVlLmNvbnRlbnRzIDogdmFsdWUuY29udGVudHMubm9uY2U7XG5cbiAgICAgICAgICAgIGxldCBzZW5kZXJQdWJsaWNLZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKGVuY29kZWRwdWJsaWNLZXkpO1xuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLmFzc2VydGlvbiA9IG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb247XG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5ID0gc2VuZGVyUHVibGljS2V5O1xuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnVzZXJJRCAgICA9IHZhbHVlLmNvbnRlbnRzLmVtYWlsO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmRlY3J5cHRSU0EoY2hhdEtleXMuaHlwZXJ0eUZyb20ucHJpdmF0ZUtleSwgZW5jcnlwdGVkUE1TKTtcblxuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgcmVqZWN0KCdFcnJvciBkdXJpbmcgYXV0aGVudGljYXRpb24gb2YgaWRlbnRpdHknKTtcblxuICAgICAgICAgICAgLy9vYnRhaW4gdGhlIFByZW1hc3RlcktleSB1c2luZyB0aGUgcHJpdmF0ZSBrZXlcbiAgICAgICAgICB9KS50aGVuKHBtcyA9PiB7XG5cbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5ID0gbmV3IFVpbnQ4QXJyYXkocG1zKTtcblxuICAgICAgICAgICAgbGV0IHNpZ25hdHVyZSA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5zaWduYXR1cmUpO1xuXG4gICAgICAgICAgICBsZXQgcmVjZWl2ZWRtc2dUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSk7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5UlNBKGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXksIEpTT04uc3RyaW5naWZ5KGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgSlNPTi5zdHJpbmdpZnkocmVjZWl2ZWRtc2dUb0hhc2gpLCBzaWduYXR1cmUpO1xuXG4gICAgICAgICAgICAvLyB2YWxpZGF0ZXMgdGhlIHNpZ25hdHVyZSByZWNlaXZlZFxuICAgICAgICAgIH0pLnRoZW4oc2lnblZhbGlkYXRpb25SZXN1bHQgPT4ge1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2lnbmF0dXJlIHZhbGlkYXRpb24gcmVzdWx0ICcsIHNpZ25WYWxpZGF0aW9uUmVzdWx0KTtcbiAgICAgICAgICAgIGxldCBjb25jYXRLZXkgPSBfdGhpcy5jcnlwdG8uY29uY2F0UE1Td2l0aFJhbmRvbXMoY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXksIGNoYXRLZXlzLmtleXMudG9SYW5kb20sIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVNYXN0ZXJTZWNyZXQoY29uY2F0S2V5LCAnbWVzc2FnZUhpc3RvcmljJyArIGNoYXRLZXlzLmtleXMudG9SYW5kb20gKyBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pO1xuXG4gICAgICAgICAgICAvLyBnZW5lcmF0ZXMgdGhlIG1hc3RlciBrZXlzIGZyb20gdGhlIFByZW1hc3RlciBrZXkgYW5kIHRoZSByYW5kb21zXG4gICAgICAgICAgfSkudGhlbihtYXN0ZXJLZXkgPT4ge1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5tYXN0ZXJLZXkgPSBtYXN0ZXJLZXk7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVLZXlzKG1hc3RlcktleSwgJ2tleSBleHBhbnNpb24nICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XG5cbiAgICAgICAgICAgIC8vIGdlbmVyYXRlcyB0aGUgc3ltbWV0cmljIGtleXMgdG8gYmUgdXNlZCBpbiB0aGUgc3ltbWV0cmljIGVuY3J5cHRpb25cbiAgICAgICAgICB9KS50aGVuKGtleXMgPT4ge1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzBdKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMV0pO1xuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzJdKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbM10pO1xuICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuaXYpO1xuICAgICAgICAgICAgbGV0IGRhdGEgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuc3ltZXRyaWNFbmNyeXB0aW9uKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpO1xuXG4gICAgICAgICAgfSkudGhlbihkZWNyeXB0ZWREYXRhID0+IHtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2RlY3J5cHRlZERhdGEnLCBkZWNyeXB0ZWREYXRhKTtcblxuICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJDZXJ0aWZpY2F0ZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7XG5cbiAgICAgICAgICAgIGxldCBoYXNoUmVjZWl2ZWQgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuaGFzaCk7XG5cbiAgICAgICAgICAgIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7XG5cbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaFJlY2VpdmVkKTtcblxuICAgICAgICAgIH0pLnRoZW4odmVyaWZpZWRIYXNoICA9PiB7XG5cbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoIHZlcmlmaWNhdGlvbiAnLCB2ZXJpZmllZEhhc2gpO1xuICAgICAgICAgICAgbGV0IHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XG4gICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpO1xuXG4gICAgICAgICAgICBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSwgJ29rIScgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSk7XG4gICAgICAgICAgfSkudGhlbihoYXNoID0+IHtcblxuICAgICAgICAgICAgdmFsdWUuaGFzaCA9IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCk7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvayEnLCBpdik7XG5cbiAgICAgICAgICB9KS50aGVuKGVuY3J5cHRlZFZhbHVlID0+IHtcbiAgICAgICAgICAgIHZhbHVlLnZhbHVlID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7XG4gICAgICAgICAgICBsZXQgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxuICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxuICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZScsXG4gICAgICAgICAgICAgICAgdmFsdWU6IGJ0b2EoSlNPTi5zdHJpbmdpZnkodmFsdWUpKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UsICdvayEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcbiAgICAgICAgICAgIGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UsIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSc6XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygncmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UnKTtcbiAgICAgICAgICBjaGF0S2V5cy5hdXRoZW50aWNhdGVkID0gdHJ1ZTtcblxuICAgICAgICAgIHZhbHVlID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpO1xuXG4gICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLml2KTtcbiAgICAgICAgICBsZXQgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUudmFsdWUpO1xuICAgICAgICAgIGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLmhhc2gpO1xuXG4gICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBkYXRhLCBpdikudGhlbihkZWNyeXB0ZWREYXRhID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWREYXRhJywgZGVjcnlwdGVkRGF0YSk7XG4gICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcblxuICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRhdGEgKyBpdik7XG4gICAgICAgICAgICBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnaGFzaCByZXN1bHQnLCByZXN1bHQpO1xuXG4gICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIHdhcyBhbiBpbml0aWFsIG1lc3NhZ2UgdGhhdCB3YXMgYmxvY2tlZCBhbmQgc2VuZCBpdFxuICAgICAgICAgICAgICBpZiAoY2hhdEtleXMuaW5pdGlhbE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBsZXQgaW5pdGlhbE1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiAnY3JlYXRlJyxcbiAgICAgICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXG4gICAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY2hhdEtleXMuaW5pdGlhbE1lc3NhZ2UuYm9keS52YWx1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKHttZXNzYWdlOiBpbml0aWFsTWVzc2FnZSwgY2hhdEtleXM6IGNoYXRLZXlzfSk7XG5cbiAgICAgICAgICAgICAgICAvL3NlbmRzIHRoZSBzZXNzaW9uS2V5IHRvIHRoZSBzdWJzY3JpYmVyIGh5cGVydHlcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fc2VuZFJlcG9ydGVyU2Vzc2lvbktleShtZXNzYWdlLCBjaGF0S2V5cykudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3JlcG9ydGVyU2Vzc2lvbktleSc6XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygncmVwb3J0ZXJTZXNzaW9uS2V5Jyk7XG5cbiAgICAgICAgICBsZXQgdmFsdWVJVmFuZEhhc2ggPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7XG4gICAgICAgICAgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWVJVmFuZEhhc2guaGFzaCk7XG4gICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlSVZhbmRIYXNoLml2KTtcbiAgICAgICAgICBsZXQgZW5jcnlwdGVkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlSVZhbmRIYXNoLnZhbHVlKTtcbiAgICAgICAgICBsZXQgcGFyc2VkVmFsdWU7XG4gICAgICAgICAgbGV0IHNlc3Npb25LZXk7XG4gICAgICAgICAgbGV0IGRhdGFPYmplY3RVUkw7XG4gICAgICAgICAgbGV0IHJlY2VpdmVyQWNrbm93bGVkZ2VNc2c7XG5cbiAgICAgICAgICBfdGhpcy5jcnlwdG8uZGVjcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb1Nlc3Npb25LZXksIGVuY3J5cHRlZFZhbHVlLCBpdikudGhlbihkZWNyeXB0ZWRWYWx1ZSA9PiB7XG5cbiAgICAgICAgICAgIHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShkZWNyeXB0ZWRWYWx1ZSk7XG4gICAgICAgICAgICBzZXNzaW9uS2V5ID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS52YWx1ZSk7XG4gICAgICAgICAgICBkYXRhT2JqZWN0VVJMID0gcGFyc2VkVmFsdWUuZGF0YU9iamVjdFVSTDtcblxuICAgICAgICAgICAgbGV0IG1lc3NhZ2VUb0hhc2ggPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWRWYWx1ZSArIGl2KTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgbWVzc2FnZVRvSGFzaCwgaGFzaCk7XG5cbiAgICAgICAgICB9KS50aGVuKGhhc2hSZXN1bHQgPT4ge1xuXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdoYXNoIHN1Y2Nlc3NmdWxseSB2YWxpZGF0ZWQgJywgaGFzaFJlc3VsdCk7XG5cbiAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXSA9ICB7c2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWV9O1xuXG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XG4gICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpO1xuXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvayEhJywgaXYpO1xuICAgICAgICAgIH0pLnRoZW4oZW5jcnlwdGVkVmFsdWUgPT4ge1xuXG4gICAgICAgICAgICByZWNlaXZlckFja25vd2xlZGdlTXNnID0ge1xuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcbiAgICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVjZWl2ZXJBY2tub3dsZWRnZSdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFsdWUudmFsdWUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJBY2tub3dsZWRnZU1zZywgJ29rISEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcblxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgbWVzc2FnZVRvSGFzaCk7XG4gICAgICAgICAgfSkudGhlbihoYXNoZWRNZXNzYWdlID0+IHtcbiAgICAgICAgICAgIGxldCBmaW5hbFZhbHVlID0gYnRvYShKU09OLnN0cmluZ2lmeSh7dmFsdWU6IHZhbHVlLnZhbHVlLCBoYXNoOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGhhc2hlZE1lc3NhZ2UpLCBpdjogdmFsdWUuaXZ9KSk7XG5cbiAgICAgICAgICAgIHJlY2VpdmVyQWNrbm93bGVkZ2VNc2cuYm9keS52YWx1ZSA9IGZpbmFsVmFsdWU7XG4gICAgICAgICAgICByZXNvbHZlKHttZXNzYWdlOiByZWNlaXZlckFja25vd2xlZGdlTXNnLCBjaGF0S2V5czogY2hhdEtleXN9KTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncmVjZWl2ZXJBY2tub3dsZWRnZSc6XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygncmVjZWl2ZXJBY2tub3dsZWRnZScpO1xuXG4gICAgICAgICAgbGV0IHJlY2VpdmVkdmFsdWVJVmFuZEhhc2ggPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7XG4gICAgICAgICAgbGV0IHJlY2VpdmVkSGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaC5oYXNoKTtcbiAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWR2YWx1ZUlWYW5kSGFzaC5pdik7XG4gICAgICAgICAgbGV0IHJlY2VpdmVkRW5jcnlwdGVkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkdmFsdWVJVmFuZEhhc2gudmFsdWUpO1xuXG4gICAgICAgICAgX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCByZWNlaXZlZEVuY3J5cHRlZFZhbHVlLCBpdikudGhlbihkZWNyeXB0ZWRWYWx1ZSA9PiB7XG5cbiAgICAgICAgICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWRWYWx1ZSArIGl2KTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgcmVjZWl2ZWRIYXNoKTtcbiAgICAgICAgICB9KS50aGVuKGhhc2hSZXN1bHQgPT4ge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnaGFzaFJlc3VsdCAnLCBoYXNoUmVzdWx0KTtcblxuICAgICAgICAgICAgbGV0IGNhbGxiYWNrID0gY2hhdEtleXMuY2FsbGJhY2s7XG5cbiAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICBjYWxsYmFjaygnaGFuZFNoYWtlRW5kJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKCdoYW5kU2hha2VFbmQnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWplY3QobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfc2VuZFJlcG9ydGVyU2Vzc2lvbktleShtZXNzYWdlLCBjaGF0S2V5cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHNlc3Npb25LZXlCdW5kbGUgPSBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbY2hhdEtleXMuZGF0YU9iamVjdFVSTF07XG4gICAgbGV0IHJlcG9ydGVyU2Vzc2lvbktleU1zZztcbiAgICBsZXQgdmFsdWVUb0VuY3J5cHQ7XG4gICAgbGV0IHNlc3Npb25LZXk7XG4gICAgbGV0IGl2O1xuICAgIGxldCB2YWx1ZSA9IHt9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAvL2lmIHRoZXJlIGlzIG5vdCB5ZXQgYSBzZXNzaW9uIEtleSwgZ2VuZXJhdGVzIGEgbmV3IG9uZVxuICAgICAgaWYgKCFzZXNzaW9uS2V5QnVuZGxlKSB7XG4gICAgICAgIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTtcbiAgICAgICAgX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2NoYXRLZXlzLmRhdGFPYmplY3RVUkxdID0ge3Nlc3Npb25LZXk6IHNlc3Npb25LZXksIGlzVG9FbmNyeXB0OiB0cnVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlc3Npb25LZXkgPSBzZXNzaW9uS2V5QnVuZGxlLnNlc3Npb25LZXk7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlVG9FbmNyeXB0ID0gSlNPTi5zdHJpbmdpZnkoe3ZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKHNlc3Npb25LZXkpLCBkYXRhT2JqZWN0VVJMOiBjaGF0S2V5cy5kYXRhT2JqZWN0VVJMfSk7XG5cbiAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcbiAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7XG4gICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgdmFsdWVUb0VuY3J5cHQsIGl2KS50aGVuKGVuY3J5cHRlZFZhbHVlID0+IHtcblxuICAgICAgICByZXBvcnRlclNlc3Npb25LZXlNc2cgPSB7XG4gICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXG4gICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcbiAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVwb3J0ZXJTZXNzaW9uS2V5JyxcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVwb3J0ZXJTZXNzaW9uS2V5TXNnLCB2YWx1ZVRvRW5jcnlwdCArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XG5cbiAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKTtcbiAgICAgIH0pLnRoZW4oaGFzaGVkTWVzc2FnZSA9PiB7XG5cbiAgICAgICAgbGV0IHZhbHVlV2l0aEhhc2ggPSBidG9hKEpTT04uc3RyaW5naWZ5KHt2YWx1ZTogcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLmJvZHkudmFsdWUsIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaGVkTWVzc2FnZSksIGl2OiB2YWx1ZS5pdn0pKTtcblxuICAgICAgICByZXBvcnRlclNlc3Npb25LZXlNc2cuYm9keS52YWx1ZSA9IHZhbHVlV2l0aEhhc2g7XG4gICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IHJlcG9ydGVyU2Vzc2lvbktleU1zZywgY2hhdEtleXM6IGNoYXRLZXlzfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybnMgdGhlIHJlcG9ydGVyIGFzc29jaWF0ZWQgdG8gdGhlIGRhdGFPYmplY3QgVVJMXG4gICogQHBhcmFtICAge1N0cmluZ30gICBkYXRhT2JqZWN0VVJMICAgICAgICAgZGF0YU9iamVjdCB1cmxcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gIHJlcG9ydGVyICAgICAgICAgICAgICBkYXRhT2JqZWN0IHVybCByZXBvcnRlclxuICAqL1xuICBfZ2V0SHlwZXJ0eUZyb21EYXRhT2JqZWN0KGRhdGFPYmplY3RVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAvL1RPRE8gcmVtb3ZlIHRoaXMgbG9naWMgYW5kIG1vdmUgaXQgdG8gYSB1dGlsIGZ1bmN0aW9uXG5cbiAgICAgIGxldCBzcGxpdGVkVVJMID0gZGF0YU9iamVjdFVSTC5zcGxpdCgnLycpO1xuICAgICAgbGV0IGZpbmFsVVJMID0gc3BsaXRlZFVSTFswXSArICcvLycgKyBzcGxpdGVkVVJMWzJdICsgJy8nICsgc3BsaXRlZFVSTFszXTtcbiAgICAgIGlmIChzcGxpdGVkVVJMLmxlbmd0aCA+IDYpIHtcbiAgICAgICAgZmluYWxVUkwgPSBzcGxpdGVkVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRVUkxbMl0gKyAnLycgKyBzcGxpdGVkVVJMWzNdICsgJy8nICsgc3BsaXRlZFVSTFs0XTtcbiAgICAgIH1cblxuICAgICAgLy8gY2hlY2sgaWYgaXMgdGhlIGNyZWF0b3Igb2YgdGhlIGh5cGVydHlcbiAgICAgIGxldCByZXBvcnRlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhmaW5hbFVSTCk7XG5cbiAgICAgIGlmIChyZXBvcnRlclVSTCkge1xuICAgICAgICByZXNvbHZlKHJlcG9ydGVyVVJMKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYW4gYXNzb2NpYXRpb24gZnJvbSBhbiBoeXBlcnR5VVJMIHRvIHRoZSBkYXRhT2JqZWN0XG4gICAgICAgIGxldCBzdG9yZWRSZXBvcnRlclVSTCA9IF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHlbZmluYWxVUkxdO1xuXG4gICAgICAgIGlmIChzdG9yZWRSZXBvcnRlclVSTCkge1xuICAgICAgICAgIHJlc29sdmUoc3RvcmVkUmVwb3J0ZXJVUkwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFueSBoeXBlcnR5IHRoYXQgc3Vic2NyaWJlZCB0aGUgZGF0YU9iamVjdFVSTFxuICAgICAgICAgIGxldCBzdWJzY3JpYmVySHlwZXJ0eSA9IF90aGlzLnJlZ2lzdHJ5LmdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eShkYXRhT2JqZWN0VVJMKTtcblxuICAgICAgICAgIGlmIChzdWJzY3JpYmVySHlwZXJ0eSkge1xuICAgICAgICAgICAgcmVzb2x2ZShzdWJzY3JpYmVySHlwZXJ0eSk7XG4gICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgLy8gc2VhcmNoIGluIGRvbWFpbiByZWdpc3RyeSBmb3IgdGhlIGh5cGVydHkgYXNzb2NpYXRlZCB0byB0aGUgZGF0YU9iamVjdFxuICAgICAgICAgICAgLy8gc2VhcmNoIGluIGNhc2UgaXMgYSBzdWJzY3JpYmVyIHdobyB3YW50cyB0byBrbm93IHRoZSByZXBvcnRlclxuICAgICAgICAgICAgX3RoaXMucmVnaXN0cnkuZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKGZpbmFsVVJMLCBzcGxpdGVkVVJMWzJdKS50aGVuKGRhdGFPYmplY3QgPT4ge1xuICAgICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5W2ZpbmFsVVJMXSA9IGRhdGFPYmplY3QucmVwb3J0ZXI7XG4gICAgICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdC5yZXBvcnRlcik7XG4gICAgICAgICAgICB9LCBlcnIgPT4ge1xuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogZmlsdGVyIHRoZSBtZXNzYWdlcyB0byBoYXNoLCBieSByZW1vdmluZyBzb21lIGZpZWxkcyBub3QgZ2VuZXJhdGVkIGJ5IHRoZSBydW50aW1lIGNvcmVcbiAgKiBAcGFyYW0ge01lc3NhZ2V9ICBtZXNzYWdlICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVxuICAqIEBwYXJhbSB7U3RyaW5nfSAgZGVjcnlwdGVkVmFsdWUgKE9wdGlvbmFsKSAgICB2YWx1ZSBmcm9tIGJvZHkudmFsdWUgaW4gY2FzZSBpdCBvcmlnaW5hbGx5IGNvbWVzIGVuY3J5cHRlZFxuICAqIEBwYXJhbSB7SlNPTn0gIGlkZW50aXR5KE9wdGlvbmFsKSAgICBhZGQgdGhlIGh5cGVydHkgaWRlbnRpdHkgYXNzb2NpYXRlZCBpbiBjYXNlIGlzIG5vdCBhZGRlZCB0byB0aGUgaW5pdGlhbCBtZXNzYWdlXG4gICogQHJldHVybiB7TWVzc2FnZX0gIG5ldyBtZXNzYWdlIGZpbHRlcmVkXG4gICovXG4gIF9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZFZhbHVlLCBpZGVudGl0eSkge1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IG1lc3NhZ2UudHlwZSxcbiAgICAgIGZyb206IG1lc3NhZ2UuZnJvbSxcbiAgICAgIHRvOiAgIG1lc3NhZ2UudG8sXG4gICAgICBib2R5OiB7XG4gICAgICAgIGlkZW50aXR5OiBpZGVudGl0eSB8fCBtZXNzYWdlLmJvZHkuaWRlbnRpdHksXG4gICAgICAgIHZhbHVlOiBkZWNyeXB0ZWRWYWx1ZSB8fCBtZXNzYWdlLmJvZHkudmFsdWUsXG4gICAgICAgIGhhbmRzaGFrZVBoYXNlOiBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2VcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICogZ2VuZXJhdGVzIHRoZSBpbml0aWFsIHN0cnVjdHVyZSBmb3IgdGhlIGtleXMgYmV0d2VlbiB0d28gdXNlcnNcbiAgKiBAcGFyYW0ge0pTT059ICAgIG1lc3NhZ2UgICAgICAgICAgICAgIGluaXRpYWwgbWVzc2FnZSB0aGF0IHRyaWdnZXJzIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb25cbiAgKiBAcGFyYW0ge1N0cmluZ30gIHVzZXJVUkwgICAgICAgICAgICAgIHVzZXJVUkxcbiAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlY2VpdmVyKE9wdGlvbmFsKSAgaW5kaWNhdGVzIGlmIGlzIHRoZSBzZW5kZXIgb3IgdGhlIHJlY2VpdmVyIHRoYXQgY3JlYXRlcyBhIG5ldyBjaGF0IGNyeXB0b1xuICAqIEByZXR1cm4ge0pTT059IG5ld0NoYXRDcnlwdG8gIG5ldyBKU09OIHN0cnVjdHVyZSBmb3IgdGhlIGNoYXQgY3J5cHRvXG4gICovXG4gIF9uZXdDaGF0Q3J5cHRvKG1lc3NhZ2UsIHVzZXJVUkwsIHJlY2VpdmVyKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIC8vY2hlY2sgd2hldGhlciBpcyB0aGUgc2VuZGVyIG9yIHRoZSByZWNlaXZlciB0byBjcmVhdGUgYSBuZXcgY2hhdENyeXB0b1xuICAgIC8vdG8gbWFudGFpbiBjb25zaXN0ZW5jeSBvbiB0aGUga2V5cyBpZiB0aGUgcmVjZWl2ZXIgY3JlYXRlIGEgbmV3IGNoYXRDcnlwdG8sXG4gICAgLy90aGVuIGludmVydCB0aGUgZmllbGRzXG4gICAgbGV0IGZyb20gPSAocmVjZWl2ZXIpID8gbWVzc2FnZS50byA6IG1lc3NhZ2UuZnJvbTtcbiAgICBsZXQgdG8gPSAocmVjZWl2ZXIpID8gbWVzc2FnZS5mcm9tIDogbWVzc2FnZS50bztcblxuICAgIGxldCB1c2VySW5mbyA9IF90aGlzLmdldElkZW50aXR5KHVzZXJVUkwpO1xuXG4gICAgbGV0IG5ld0NoYXRDcnlwdG8gPVxuICAgIHtcbiAgICAgIGh5cGVydHlGcm9tOlxuICAgICAge1xuICAgICAgICBoeXBlcnR5OiBmcm9tLFxuICAgICAgICB1c2VySUQ6IHVzZXJJbmZvLm1lc3NhZ2VJbmZvLnVzZXJQcm9maWxlLnVzZXJuYW1lLFxuICAgICAgICBwcml2YXRlS2V5OiB1c2VySW5mby5rZXlQYWlyLnByaXZhdGUsXG4gICAgICAgIHB1YmxpY0tleTogdXNlckluZm8ua2V5UGFpci5wdWJsaWMsXG4gICAgICAgIGFzc2VydGlvbjogdXNlckluZm8uYXNzZXJ0aW9uLFxuICAgICAgICBtZXNzYWdlSW5mbzogdXNlckluZm8ubWVzc2FnZUluZm9cbiAgICAgIH0sXG4gICAgICBoeXBlcnR5VG86XG4gICAgICB7XG4gICAgICAgIGh5cGVydHk6IHRvLFxuICAgICAgICB1c2VySUQ6IHVuZGVmaW5lZCxcbiAgICAgICAgcHVibGljS2V5OiB1bmRlZmluZWQsXG4gICAgICAgIGFzc2VydGlvbjogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAga2V5czpcbiAgICAgIHtcbiAgICAgICAgaHlwZXJ0eVRvU2Vzc2lvbktleTogdW5kZWZpbmVkLFxuICAgICAgICBoeXBlcnR5RnJvbVNlc3Npb25LZXk6IHVuZGVmaW5lZCxcbiAgICAgICAgaHlwZXJ0eVRvSGFzaEtleTogdW5kZWZpbmVkLFxuICAgICAgICBoeXBlcnR5RnJvbUhhc2hLZXk6IHVuZGVmaW5lZCxcbiAgICAgICAgdG9SYW5kb206IHVuZGVmaW5lZCxcbiAgICAgICAgZnJvbVJhbmRvbTogdW5kZWZpbmVkLFxuICAgICAgICBwcmVtYXN0ZXJLZXk6IHVuZGVmaW5lZCxcbiAgICAgICAgbWFzdGVyS2V5OiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICBoYW5kc2hha2VIaXN0b3J5OiB7XG4gICAgICAgIHNlbmRlckhlbGxvOiB1bmRlZmluZWQsXG4gICAgICAgIHJlY2VpdmVySGVsbG86IHVuZGVmaW5lZCxcbiAgICAgICAgc2VuZGVyQ2VydGlmaWNhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2U6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIGluaXRpYWxNZXNzYWdlOiAobWVzc2FnZS5ib2R5Lmlnbm9yZSkgPyB1bmRlZmluZWQgOiBtZXNzYWdlLFxuICAgICAgY2FsbGJhY2s6IG1lc3NhZ2UuY2FsbGJhY2ssXG4gICAgICBhdXRoZW50aWNhdGVkOiBmYWxzZSxcbiAgICAgIGRhdGFPYmplY3RVUkw6IG1lc3NhZ2UuZGF0YU9iamVjdFVSTFxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3Q2hhdENyeXB0bztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJZGVudGl0eU1vZHVsZTtcbiIsImNsYXNzIEFjdGlvbnNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgfVxuXG4gIGVuZm9yY2VQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IHBvbGljaWVzID0gX3RoaXMuY29udGV4dC5nZXRQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSk7XG5cbiAgICAgIGlmIChwb2xpY2llcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChwb2xpY2llcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeS5lbmZvcmNlQWN0aW9ucyhfdGhpcy5jb250ZXh0LCBtZXNzYWdlKS50aGVuKG1lc3NhZ2VzID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpO1xuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocG9saWNpZXMudXNlclBvbGljeSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwb2xpY2llcy51c2VyUG9saWN5LmVuZm9yY2VBY3Rpb25zKF90aGlzLmNvbnRleHQsIG1lc3NhZ2UpLnRoZW4obWVzc2FnZXMgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2VzKTtcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc29sdmUoW21lc3NhZ2VdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoW21lc3NhZ2VdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZvcndhcmRUb0lEKG1lc3NhZ2UsIGVtYWlsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBpZiAoIV90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ2ZvcndhcmQgbWVzc2FnZSB0byBnaXZlbiBJRCBpcyB1bnN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Lmh5cGVydGllc0xpc3RbMF0uaHlwZXJ0eVVSTCA9PT0gbWVzc2FnZS50bykge1xuICAgICAgICBsZXQgc3BsaXRUbyA9IChtZXNzYWdlLnRvKS5zcGxpdCgnOi8vJyk7XG4gICAgICAgIGlmIChzcGxpdFRvWzBdICE9PSAncnVudGltZScpIHtcbiAgICAgICAgICBfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5kaXNjb3Zlckh5cGVydHlQZXJVc2VyKGVtYWlsKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgICAgICBtZXNzYWdlLnRvID0gcmVzdWx0Lmh5cGVydHlVUkw7XG4gICAgICAgICAgICBtZXNzYWdlLmJvZHkudmlhID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgICAgIF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZm9yd2FyZFRvSHlwZXJ0eShtZXNzYWdlLCBoeXBlcnR5VVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBpZiAoIV90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ2ZvcndhcmQgbWVzc2FnZSB0byBnaXZlbiBJRCBpcyB1bnN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGlmIChfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5oeXBlcnRpZXNMaXN0WzBdLmh5cGVydHlVUkwgPT09IG1lc3NhZ2UudG8pIHtcbiAgICAgICAgbGV0IHNwbGl0VG8gPSAobWVzc2FnZS50bykuc3BsaXQoJzovLycpO1xuICAgICAgICBpZiAoc3BsaXRUb1swXSAhPT0gJ3J1bnRpbWUnKSB7XG4gICAgICAgICAgbWVzc2FnZS50byA9IGh5cGVydHlVUkw7XG4gICAgICAgICAgbWVzc2FnZS5ib2R5LnZpYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgIF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZW5kQXV0b21hdGljTWVzc2FnZShtZXNzYWdlLCB0ZXh0KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgIGxldCBhdXRvbWF0aWNNZXNzYWdlID0ge1xuICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxuICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxuICAgICAgICBib2R5OiB7XG4gICAgICAgICAgdmFsdWU6IHRleHRcbiAgICAgICAgfSxcbiAgICAgICAgdHlwZTogbWVzc2FnZS50eXBlXG4gICAgICB9O1xuICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgIF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Ll9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKGF1dG9tYXRpY01lc3NhZ2UpO1xuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWN0aW9uc1NlcnZpY2U7XG4iLCJjbGFzcyBPcGVyYXRvcnMge1xuXG4gIGFuZChwYXJhbXMpIHtcbiAgICByZXR1cm4gcGFyYW1zWzBdICYmIHBhcmFtc1sxXTtcbiAgfVxuXG4gIGJldHdlZW4ocGFyYW1zKSB7XG4gICAgbGV0IHN0YXJ0ID0gcGFyc2VJbnQocGFyYW1zWzBdWzBdKTtcbiAgICBsZXQgZW5kID0gcGFyc2VJbnQocGFyYW1zWzBdWzFdKTtcbiAgICBsZXQgbm93ID0gcGFyYW1zWzFdO1xuXG4gICAgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgICBub3cgPSAobm93IDwgc3RhcnQpID8gbm93ICs9IDI0MDAgOiBub3c7XG4gICAgICBlbmQgKz0gMjQwMDtcbiAgICB9XG5cbiAgICByZXR1cm4gKG5vdyA+IHN0YXJ0ICYmIG5vdyA8IGVuZCk7XG4gIH1cblxuICBlcXVhbHMocGFyYW1zKSB7XG4gICAgcmV0dXJuIFN0cmluZyhwYXJhbXNbMF0pID09PSAnKicgfHwgU3RyaW5nKHBhcmFtc1swXSkgPT09IFN0cmluZyhwYXJhbXNbMV0pO1xuICB9XG5cbiAgZ3JlYXRlclRoYW4ocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtc1sxXSA+IHBhcmFtc1swXTtcbiAgfVxuXG4gIGluKHBhcmFtcykge1xuICAgIHJldHVybiBwYXJhbXNbMF0uaW5kZXhPZihwYXJhbXNbMV0pID4gLTE7XG4gIH1cblxuICBsZXNzVGhhbihwYXJhbXMpIHtcbiAgICByZXR1cm4gcGFyYW1zWzFdIDwgcGFyYW1zWzBdO1xuICB9XG5cbiAgbm90KHBhcmFtcykge1xuICAgIHJldHVybiAhcGFyYW1zWzBdO1xuICB9XG5cbiAgb3IocGFyYW1zKSB7XG4gICAgcmV0dXJuIHBhcmFtc1swXSB8fCBwYXJhbXNbMV07XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBPcGVyYXRvcnM7XG4iLCJpbXBvcnQgT3BlcmF0b3JzIGZyb20gJy4vT3BlcmF0b3JzJztcblxuLyoqXG4qIFRoZSBQb2xpY3kgRGVjaXNpb24gUG9pbnQgKFBEUCkgZGVjaWRlcyBpZiBhIG1lc3NhZ2UgaXMgdG8gYmUgYXV0aG9yaXNlZCBieSBjaGVja2luZyBhIHNldCBvZlxuKiBwb2xpY2llcy4gVGhlIHJlc291cmNlIHRvIGJlIHZlcmlmaWVkIGlzIHNwZWNpZmllZCBpbiB0aGUgZmlyc3Qgd29yZCBvZiB0aGUgJ2NvbmRpdGlvbicgZmllbGQgb2ZcbiogYSBQb2xpY3kgb2JqZWN0LiBUaGUgaW1wbGVtZW50YXRpb24gdGhhdCB2ZXJpZmllcyBpZiB0aGUgbWVzc2FnZSBpcyBjb21wbGlhbnQgd2l0aCBhIHBvbGljeSBpc1xuKiBzcGVjaWZpZWQgaW4gYSBoYXNodGFibGUgdG8gYWxsb3cgZHluYW1pYyBkZWZpbml0aW9uIG9mIHRoZSBpbXBsZW1lbnRhdGlvbiwgcHJvdmlkaW5nXG4qIGV4dGVuc2liaWxpdHkgdG8gdGhlIFBvbGljeSBFbmdpbmUgZnVuY3Rpb25hbGl0aWVzLlxuKi9cbmNsYXNzIFBEUCB7XG5cbiAgY29uc3RydWN0b3IoY29udGV4dCkge1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5vcGVyYXRvcnMgPSBuZXcgT3BlcmF0b3JzKCk7XG4gIH1cblxuICBldmFsdWF0ZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKSB7XG4gICAgbGV0IHBvbGljaWVzID0gdGhpcy5jb250ZXh0LmdldFBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKTtcbiAgICBsZXQgcmVzdWx0ID0gJ05vdCBBcHBsaWNhYmxlJztcblxuICAgIGlmIChwb2xpY2llcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLmV2YWx1YXRlUG9saWN5KG1lc3NhZ2UsIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeSwgaXNJbmNvbWluZ01lc3NhZ2UpO1xuICAgICAgaWYgKHJlc3VsdCB8fCByZXN1bHQgPT09ICdOb3QgQXBwbGljYWJsZScpIHtcbiAgICAgICAgbGV0IHVzZXJSZXN1bHQgPSB0aGlzLmV2YWx1YXRlUG9saWN5KG1lc3NhZ2UsIHBvbGljaWVzLnVzZXJQb2xpY3ksIGlzSW5jb21pbmdNZXNzYWdlKTtcbiAgICAgICAgaWYgKHVzZXJSZXN1bHQgIT09ICdOb3QgQXBwbGljYWJsZScpIHtcbiAgICAgICAgICByZXN1bHQgPSB1c2VyUmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGV2YWx1YXRlUG9saWN5KG1lc3NhZ2UsIHBvbGljeSwgaXNJbmNvbWluZykge1xuICAgIGxldCByZXN1bHQgPSAnTm90IEFwcGxpY2FibGUnO1xuICAgIGlmIChwb2xpY3kpIHtcbiAgICAgIHJlc3VsdCA9IHBvbGljeS5ldmFsdWF0ZVJ1bGVzKHRoaXMuY29udGV4dCwgbWVzc2FnZSwgaXNJbmNvbWluZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFBEUDtcbiIsImltcG9ydCBBY3Rpb25zU2VydmljZSBmcm9tICcuL0FjdGlvbnNTZXJ2aWNlJztcbmltcG9ydCBQRFAgZnJvbSAnLi9QRFAnO1xuaW1wb3J0IFBvbGljeSBmcm9tICcuL1BvbGljeSc7XG5cbmNsYXNzIFBFUCB7XG5cbiAgLyoqXG4gICogQ3JlYXRlcyBhIFBvbGljeSBFbmZvcmNlbWVudCBQb2ludCAoUEVQKSBpbnN0YW5jZVxuICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICBjb250ZXh0XG4gICovXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcbiAgICB0aGlzLnBkcCA9IG5ldyBQRFAoY29udGV4dCk7XG4gICAgdGhpcy5hY3Rpb25zU2VydmljZSA9IG5ldyBBY3Rpb25zU2VydmljZShjb250ZXh0KTtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgIGNvbnRleHQucGVwID0gdGhpcztcbiAgICBjb250ZXh0LmxvYWRDb25maWd1cmF0aW9ucygpO1xuICB9XG5cbiAgLyoqXG4gICogQWRkcyBhIHBvbGljeSB0byB0aGUgUG9saWN5IEVuZm9yY2VtZW50IFBvaW50IChQRVApLiBUaGUgcG9saWN5IGNhbiBiZSBjcmVhdGVkIGJ5IHRoZSBzZXJ2aWNlXG4gICogcHJvdmlkZXIgb3IgYnkgdGhlIHVzZXIuXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIHNvdXJjZVxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBrZXlcbiAgKiBAcGFyYW0gICAge09iamVjdH0gICAgcG9saWN5XG4gICovXG4gIGFkZFBvbGljeShzb3VyY2UsIGtleSwgcG9saWN5LCBjb21iaW5pbmdBbGdvcml0aG0pIHtcbiAgICBpZiAoIXNvdXJjZSkgdGhyb3cgbmV3IEVycm9yKCdzb3VyY2UgaXMgbm90IGRlZmluZWQnKTtcbiAgICBpZiAoIWtleSkgdGhyb3cgbmV3IEVycm9yKCdrZXkgaXMgbm90IGRlZmluZWQnKTtcblxuICAgIGlmIChwb2xpY3kgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcG9saWN5ID0gbmV3IFBvbGljeShrZXksIFtdLCBbXSwgY29tYmluaW5nQWxnb3JpdGhtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCEocG9saWN5IGluc3RhbmNlb2YgUG9saWN5KSkge1xuICAgICAgICBwb2xpY3kgPSBuZXcgUG9saWN5KHBvbGljeS5rZXksIHBvbGljeS5ydWxlcywgcG9saWN5LmFjdGlvbnMsIHBvbGljeS5jb21iaW5pbmdBbGdvcml0aG0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAoc291cmNlKSB7XG4gICAgICBjYXNlICdTRVJWSUNFX1BST1ZJREVSJzpcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcyhzb3VyY2UsIHBvbGljeSwga2V5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdVU0VSJzpcbiAgICAgICAgdGhpcy5jb250ZXh0LnVzZXJQb2xpY2llc1trZXldID0gcG9saWN5O1xuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKHNvdXJjZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gcG9saWN5IHNvdXJjZTogJyArIHNvdXJjZSk7XG4gICAgfVxuICB9XG5cbiAgYXV0aG9yaXNlKG1lc3NhZ2UpIHtcbiAgICBjb25zb2xlLmxvZygnLS0tIFBvbGljeSBFbmdpbmUgLS0tJyk7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgaWYgKCFtZXNzYWdlKSB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgaXMgbm90IGRlZmluZWQnKTtcbiAgICBpZiAoIW1lc3NhZ2UuZnJvbSkgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlLmZyb20gaXMgbm90IGRlZmluZWQnKTtcbiAgICBpZiAoIW1lc3NhZ2UudG8pIHRocm93IG5ldyBFcnJvcignbWVzc2FnZS50byBpcyBub3QgZGVmaW5lZCcpO1xuICAgIGlmICghbWVzc2FnZS50eXBlKSB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UudHlwZSBpcyBub3QgZGVmaW5lZCcpO1xuICAgIG1lc3NhZ2UuYm9keSA9IG1lc3NhZ2UuYm9keSB8fCB7fTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIG1lc3NhZ2UuYm9keSA9IG1lc3NhZ2UuYm9keSB8fCB7fTtcbiAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICBsZXQgcmVzdWx0O1xuICAgICAgaWYgKF90aGlzLl9pc1RvVmVyaWZ5KG1lc3NhZ2UpKSB7XG4gICAgICAgIGxldCBpc0luY29taW5nID0gX3RoaXMuX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICBfdGhpcy5jb250ZXh0LnByZXBhcmVGb3JFdmFsdWF0aW9uKG1lc3NhZ2UsIGlzSW5jb21pbmcpLnRoZW4obWVzc2FnZSA9PiB7XG4gICAgICAgICAgcmVzdWx0ID0gX3RoaXMucGRwLmV2YWx1YXRlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZyk7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMuY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyO1xuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuYWN0aW9uc1NlcnZpY2UuZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmcpLnRoZW4obWVzc2FnZXMgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBtZXNzYWdlcykge1xuICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNbaV07XG4gICAgICAgICAgICAgIF90aGlzLmNvbnRleHQucHJlcGFyZVRvRm9yd2FyZChtZXNzYWdlLCBpc0luY29taW5nLCByZXN1bHQpLnRoZW4obWVzc2FnZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSAobWVzc2FnZS5ib2R5LmF1dGggPT09IHVuZGVmaW5lZCkgPyB0cnVlIDogbWVzc2FnZS5ib2R5LmF1dGg7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0geyBib2R5OiB7IGNvZGU6IDQwMywgZGVzY3JpcHRpb246ICdCbG9ja2VkIGJ5IHBvbGljeScgfSwgZnJvbTogbWVzc2FnZS50bywgdG86IG1lc3NhZ2UuZnJvbSwgdHlwZTogJ3Jlc3BvbnNlJyB9O1xuICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gX3RoaXMuY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTtcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSB7IGJvZHk6IHsgY29kZTogNDAzLCBkZXNjcmlwdGlvbjogJ0Jsb2NrZWQgYnkgcG9saWN5JyB9LCBmcm9tOiBtZXNzYWdlLnRvLCB0bzogbWVzc2FnZS5mcm9tLCB0eXBlOiAncmVzcG9uc2UnIH07XG4gICAgICAgICAgcmVqZWN0KGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGF1dGhvcmlzZVN5bmMobWVzc2FnZSkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgbWVzc2FnZS5ib2R5ID0gbWVzc2FnZS5ib2R5IHx8IHt9O1xuICAgIGlmICh0aGlzLl9pc1RvVmVyaWZ5KG1lc3NhZ2UpKSB7XG4gICAgICBsZXQgaXNJbmNvbWluZyA9IHRoaXMuX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgbWVzc2FnZSA9IHRoaXMuY29udGV4dC5wcmVwYXJlRm9yRXZhbHVhdGlvbihtZXNzYWdlLCBpc0luY29taW5nKTtcbiAgICAgIHJlc3VsdCA9IHRoaXMucGRwLmV2YWx1YXRlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZyk7XG4gICAgICBpZiAocmVzdWx0ID09PSAnTm90IEFwcGxpY2FibGUnKSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyO1xuICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5hY3Rpb25zU2VydmljZS5lbmZvcmNlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZyk7XG4gICAgICBtZXNzYWdlID0gdGhpcy5jb250ZXh0LnByZXBhcmVUb0ZvcndhcmQobWVzc2FnZSwgaXNJbmNvbWluZywgcmVzdWx0KTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSAobWVzc2FnZS5ib2R5LmF1dGggPT09IHVuZGVmaW5lZCkgPyB0cnVlIDogbWVzc2FnZS5ib2R5LmF1dGg7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB0aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91cjtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gKG1lc3NhZ2UuYm9keSAhPT0gdW5kZWZpbmVkICYmIG1lc3NhZ2UuYm9keS5pZGVudGl0eSAhPT0gdW5kZWZpbmVkKSA/IHRydWUgOiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAqIElkZW50aWZpZXMgdGhlIG1lc3NhZ2VzIHRvIGJlIHZlcmlmaWVkIGJ5IHRoZSBQb2xpY3kgRW5naW5lXG4gICogQHBhcmFtICAgIHtNZXNzYWdlfSAgIG1lc3NhZ2VcbiAgKiBAcmV0dXJucyAge2Jvb2xlYW59ICAgcmV0dXJucyB0cnVlIGlmIHRoZSBtZXNzYWdlIHJlcXVpcmVzIGVuY3J5cHRpb24vZGVjcnlwdGlvblxuICAqICAgICAgICAgICAgICAgICAgICAgICBvciBpZiBpdHMgdHlwZSBlcXVhbHMgJ2hhbmRzaGFrZSc7IGZhbHNlIG90aGVyd2lzZVxuICAqL1xuICBfaXNUb1ZlcmlmeShtZXNzYWdlKSB7XG4gICAgbGV0IHNjaGVtYXNUb0lnbm9yZSA9IFsnZG9tYWluJywgJ2RvbWFpbi1pZHAnLCAnZ2xvYmFsJywgJ2h5cGVydHktcnVudGltZScsICdydW50aW1lJ107XG4gICAgbGV0IHNwbGl0RnJvbSA9IChtZXNzYWdlLmZyb20pLnNwbGl0KCc6Ly8nKTtcbiAgICBsZXQgZnJvbVNjaGVtYSA9IHNwbGl0RnJvbVswXTtcbiAgICBsZXQgc3BsaXRUbyA9IChtZXNzYWdlLnRvKS5zcGxpdCgnOi8vJyk7XG4gICAgbGV0IHRvU2NoZW1hID0gIHNwbGl0VG9bMF07XG5cbiAgICBpZiAobWVzc2FnZS5mcm9tID09PSBmcm9tU2NoZW1hIHx8IG1lc3NhZ2UudG8gPT09IHRvU2NoZW1hIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3JlYWQnIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3Jlc3BvbnNlJykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2NoZW1hc1RvSWdub3JlLmluZGV4T2YoZnJvbVNjaGVtYSkgPT09IC0xIHx8IHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKHRvU2NoZW1hKSA9PT0gLTE7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlUG9saWN5KHNvdXJjZSwga2V5KSB7XG4gICAgaWYgKCFzb3VyY2UpIHRocm93IG5ldyBFcnJvcignc291cmNlIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgaWYgKHNvdXJjZSAhPT0gJyonICYmICFrZXkpIHRocm93IG5ldyBFcnJvcigna2V5IGlzIG5vdCBkZWZpbmVkJyk7XG5cbiAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgY2FzZSAnKic6XG4gICAgICAgIHRoaXMuY29udGV4dC5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kgPSB7fTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnVzZXJQb2xpY2llcyA9IHt9O1xuICAgICAgICB0aGlzLmNvbnRleHQuYWN0aXZlVXNlclBvbGljeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnVVNFUicpO1xuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKCdTRVJWSUNFX1BST1ZJREVSJyk7XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlQWN0aXZlUG9saWN5KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnU0VSVklDRV9QUk9WSURFUic6XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHQuc2VydmljZVByb3ZpZGVyUG9saWN5W2tleV07XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdVU0VSJzpcbiAgICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XTtcbiAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5jb250ZXh0LmFjdGl2ZVVzZXJQb2xpY3kpIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHQuYWN0aXZlVXNlclBvbGljeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZUFjdGl2ZVBvbGljeSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoJ1VTRVInKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTtcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQRVA7XG4iLCJpbXBvcnQgQWxsb3dPdmVycmlkZXMgZnJvbSAnLi9jb21iaW5pbmdBbGdvcml0aG1zL0FsbG93T3ZlcnJpZGVzJztcbmltcG9ydCBCbG9ja092ZXJyaWRlcyBmcm9tICcuL2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMnO1xuaW1wb3J0IEZpcnN0QXBwbGljYWJsZSBmcm9tICcuL2NvbWJpbmluZ0FsZ29yaXRobXMvRmlyc3RBcHBsaWNhYmxlJztcbmltcG9ydCBSdWxlIGZyb20gJy4vUnVsZSc7XG5cbmNsYXNzIFBvbGljeSB7XG5cbiAgY29uc3RydWN0b3Ioa2V5LCBydWxlcywgYWN0aW9ucywgY29tYmluaW5nQWxnb3JpdGhtKSB7XG4gICAgaWYgKCFrZXkpIHRocm93IG5ldyBFcnJvcigna2V5IGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgaWYgKCFhY3Rpb25zKSB0aHJvdyBuZXcgRXJyb3IoJ2FjdGlvbnMgYXJlIG5vdCBkZWZpbmVkJyk7XG5cbiAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuX3NldFJ1bGVzKHJ1bGVzKTtcbiAgICB0aGlzLl9zZXRDb21iaW5pbmdBbGdvcml0aG0oY29tYmluaW5nQWxnb3JpdGhtKTtcbiAgfVxuXG4gIGFkZEFjdGlvbihtZXRob2QsIHBhcmFtKSB7XG4gICAgdGhpcy5hY3Rpb25zLnB1c2goeyBtZXRob2Q6IG1ldGhvZCwgcGFyYW06IHBhcmFtIH0pO1xuICB9XG5cbiAgY3JlYXRlUnVsZShkZWNpc2lvbiwgY29uZGl0aW9uLCBzY29wZSwgdGFyZ2V0LCBwcmlvcml0eSkge1xuICAgIGlmIChwcmlvcml0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwcmlvcml0eSA9IHRoaXMuZ2V0TGFzdFByaW9yaXR5KCkgKyAxO1xuICAgIH1cbiAgICBsZXQgcnVsZSA9IG5ldyBSdWxlKGRlY2lzaW9uLCBjb25kaXRpb24sIHNjb3BlLCB0YXJnZXQsIHByaW9yaXR5KTtcbiAgICB0aGlzLnJ1bGVzLnB1c2gocnVsZSk7XG4gIH1cblxuICBkZWxldGVSdWxlKHJ1bGUpIHtcbiAgICBsZXQgaW5kZXhUb1JlbW92ZSA9IHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcbiAgICB0aGlzLnJ1bGVzLnNwbGljZShpbmRleFRvUmVtb3ZlLCAxKTtcbiAgfVxuXG4gIGVuZm9yY2VBY3Rpb25zKGNvbnRleHQsIG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHJlc3VsdHMgPSBbXTtcbiAgICAgIGlmICh0aGlzLmFjdGlvbnMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIGZvciAobGV0IGkgaW4gdGhpcy5hY3Rpb25zKSB7XG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGNvbnRleHQucGVwLmFjdGlvbnNTZXJ2aWNlW3RoaXMuYWN0aW9uc1tpXS5tZXRob2RdKG1lc3NhZ2UsIHRoaXMuYWN0aW9uc1tpXS5wYXJhbSk7XG4gICAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgUHJvbWlzZS5hbGwocmVzdWx0cykudGhlbigobWVzc2FnZXMpID0+IHtcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2VzKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzb2x2ZShbbWVzc2FnZV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZXZhbHVhdGVSdWxlcyhjb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKSB7XG4gICAgbGV0IHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgKGxldCBpIGluIHRoaXMucnVsZXMpIHtcbiAgICAgIHJlc3VsdHMucHVzaCh0aGlzLnJ1bGVzW2ldLmV2YWx1YXRlKGNvbnRleHQsIG1lc3NhZ2UsIGlzSW5jb21pbmcpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jb21iaW5pbmdBbGdvcml0aG0uY29tYmluZShyZXN1bHRzKTtcbiAgfVxuXG4gIGdldExhc3RQcmlvcml0eSgpIHtcbiAgICBsZXQgcHJpb3JpdGllcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMucnVsZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICBmb3IgKGxldCBpIGluIHRoaXMucnVsZXMpIHtcbiAgICAgICAgcHJpb3JpdGllcy5wdXNoKHRoaXMucnVsZXNbaV0ucHJpb3JpdHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIHByaW9yaXRpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG5cbiAgZ2V0UnVsZUJ5UHJpb3JpdHkocHJpb3JpdHkpIHtcbiAgICBmb3IgKGxldCBpIGluIHRoaXMucnVsZXMpIHtcbiAgICAgIGlmIChTdHJpbmcodGhpcy5ydWxlc1tpXS5wcmlvcml0eSkgPT09IFN0cmluZyhwcmlvcml0eSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucnVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHRocm93IEVycm9yKCdSdWxlIHdpdGggcHJpb3JpdHkgJyArIHByaW9yaXR5ICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcbiAgfVxuXG4gIF9zZXRDb21iaW5pbmdBbGdvcml0aG0oY29tYmluaW5nQWxnb3JpdGhtKSB7XG4gICAgaWYgKCFjb21iaW5pbmdBbGdvcml0aG0pIHtcbiAgICAgIGNvbWJpbmluZ0FsZ29yaXRobSA9ICdibG9ja092ZXJyaWRlcyc7XG4gICAgfVxuICAgIHN3aXRjaCAoY29tYmluaW5nQWxnb3JpdGhtKSB7XG4gICAgICBjYXNlICdibG9ja092ZXJyaWRlcyc6XG4gICAgICAgIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtID0gbmV3IEJsb2NrT3ZlcnJpZGVzKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYWxsb3dPdmVycmlkZXMnOlxuICAgICAgICB0aGlzLmNvbWJpbmluZ0FsZ29yaXRobSA9IG5ldyBBbGxvd092ZXJyaWRlcygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2ZpcnN0QXBwbGljYWJsZSc6XG4gICAgICAgIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtID0gbmV3IEZpcnN0QXBwbGljYWJsZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIGFsZ29yaXRobTogJyArIGNvbWJpbmluZ0FsZ29yaXRobSk7XG4gICAgfVxuICB9XG5cbiAgX3NldFJ1bGVzKHJ1bGVzKSB7XG4gICAgdGhpcy5ydWxlcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSBpbiBydWxlcykge1xuICAgICAgbGV0IHJ1bGUgPSBydWxlc1tpXTtcbiAgICAgIGlmIChydWxlLnByaW9yaXR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcnVsZS5wcmlvcml0eSA9IHRoaXMuZ2V0TGFzdFByaW9yaXR5KCkgKyAxO1xuICAgICAgfVxuICAgICAgaWYgKCEocnVsZSBpbnN0YW5jZW9mIFJ1bGUpKSB7XG4gICAgICAgIHJ1bGUgPSBuZXcgUnVsZShydWxlLmRlY2lzaW9uLCBydWxlLmNvbmRpdGlvbiwgcnVsZS5zY29wZSwgcnVsZS50YXJnZXQsIHJ1bGUucHJpb3JpdHkpO1xuICAgICAgfVxuICAgICAgdGhpcy5ydWxlcy5wdXNoKHJ1bGUpO1xuICAgIH1cbiAgfVxuXG4gIHNvcnRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIGxldCB4ID0gYS5wcmlvcml0eTsgbGV0IHkgPSBiLnByaW9yaXR5O1xuICAgICAgcmV0dXJuICgoeCA8IHkpID8gLTEgOiAoKHggPiB5KSA/IDEgOiAwKSk7XG4gICAgfSk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQb2xpY3k7XG4iLCJpbXBvcnQge2RpdmlkZUVtYWlsLCBkaXZpZGVVUkwsIGlzRGF0YU9iamVjdFVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuXG5jbGFzcyBSZVRoaW5rQ3R4IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmRlZmF1bHRCZWhhdmlvdXIgPSB0cnVlO1xuICAgIHRoaXMuZ3JvdXBzID0ge307XG4gIH1cblxuICBnZXQgc2NoZW1lKCkge1xuICAgIHJldHVybiB0aGlzLl9zY2hlbWU7XG4gIH1cblxuICBnZXQgZGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGF0ZTtcbiAgfVxuXG4gIGdldCBkb21haW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RvbWFpbjtcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlO1xuICB9XG5cbiAgZ2V0IHNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc291cmNlO1xuICB9XG5cbiAgZ2V0IHRpbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RpbWU7XG4gIH1cblxuICBnZXQgd2Vla2RheSgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2Vla2RheTtcbiAgfVxuXG4gIHNldCBzY2hlbWUocGFyYW1zKSB7XG4gICAgbGV0IGZyb20gPSBwYXJhbXMubWVzc2FnZS5mcm9tO1xuICAgIGlmIChpc0RhdGFPYmplY3RVUkwoZnJvbSkpIHtcbiAgICAgIHRoaXMuX3NjaGVtZSA9IGRpdmlkZVVSTChmcm9tKS50eXBlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zY2hlbWUgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgc2V0IGRhdGUobm93KSB7XG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgIGxldCBkYXkgPSBTdHJpbmcoZGF0ZS5nZXREYXRlKCkpO1xuICAgIGlmIChkYXkubGVuZ3RoID09PSAxKSB7XG4gICAgICBkYXkgPSAnMCcgKyBkYXk7XG4gICAgfVxuICAgIGxldCBtb250aCA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKTtcbiAgICBpZiAobW9udGgubGVuZ3RoID09PSAxKSB7XG4gICAgICBtb250aCA9ICcwJyArIG1vbnRoO1xuICAgIH1cbiAgICB0aGlzLl9kYXRlID0gZGF5ICsgJy8nICsgbW9udGggKyAnLycgKyBkYXRlLmdldEZ1bGxZZWFyKCk7XG4gIH1cblxuICBzZXQgZG9tYWluKHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX2RvbWFpbiA9IGRpdmlkZUVtYWlsKHBhcmFtcy5tZXNzYWdlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlcm5hbWUpLmRvbWFpbjtcbiAgICB9XG4gIH1cblxuICBzZXQgdHlwZShwYXJhbXMpIHtcbiAgICBsZXQgbWVzc2FnZSA9IHBhcmFtcy5tZXNzYWdlO1xuICAgIGlmIChtZXNzYWdlLmJvZHkudmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fdHlwZSA9IG1lc3NhZ2UuYm9keS52YWx1ZS5yZXNvdXJjZVR5cGU7XG4gICAgfVxuICB9XG5cbiAgc2V0IHNvdXJjZShwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9zb3VyY2UgPSBwYXJhbXMubWVzc2FnZS5ib2R5LmlkZW50aXR5LnVzZXJQcm9maWxlLnVzZXJuYW1lO1xuICAgIH1cbiAgfVxuXG4gIHNldCB0aW1lKG5vdykge1xuICAgIG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgbGV0IG1pbnV0ZXMgPSBTdHJpbmcobm93LmdldE1pbnV0ZXMoKSk7XG4gICAgaWYgKG1pbnV0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICBtaW51dGVzID0gJzAnICsgbWludXRlcztcbiAgICB9XG4gICAgdGhpcy5fdGltZSA9IHBhcnNlSW50KFN0cmluZyhub3cuZ2V0SG91cnMoKSkgKyBtaW51dGVzKTtcbiAgfVxuXG4gIHNldCB3ZWVrZGF5KG5vdykge1xuICAgIHRoaXMuX3dlZWtkYXkgPSBTdHJpbmcobmV3IERhdGUoKS5nZXREYXkoKSk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSZVRoaW5rQ3R4O1xuIiwiaW1wb3J0IEFkdmFuY2VkQ29uZGl0aW9uIGZyb20gJy4vY29uZGl0aW9ucy9BZHZhbmNlZENvbmRpdGlvbic7XG5pbXBvcnQgQ29uZGl0aW9uIGZyb20gJy4vY29uZGl0aW9ucy9Db25kaXRpb24nO1xuaW1wb3J0IHtnZXRVc2VyRW1haWxGcm9tVVJMLCBpc0RhdGFPYmplY3RVUkwsIHJlbW92ZVBhdGhGcm9tVVJMfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uQ29uZGl0aW9uIGZyb20gJy4vY29uZGl0aW9ucy9BZHZhbmNlZENvbmRpdGlvbic7XG5cbmNsYXNzIFJ1bGUge1xuXG4gIGNvbnN0cnVjdG9yKGRlY2lzaW9uLCBjb25kaXRpb24sIHNjb3BlLCB0YXJnZXQsIHByaW9yaXR5KSB7XG4gICAgdGhpcy5kZWNpc2lvbiA9IGRlY2lzaW9uO1xuICAgIHRoaXMuc2V0Q29uZGl0aW9uKGNvbmRpdGlvbik7XG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgfVxuXG4gIHNldENvbmRpdGlvbihjb25kaXRpb24pIHtcbiAgICBpZiAoIShjb25kaXRpb24gaW5zdGFuY2VvZiBDb25kaXRpb24gfHwgY29uZGl0aW9uIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uQ29uZGl0aW9uIHx8IGNvbmRpdGlvbiBpbnN0YW5jZW9mIEFkdmFuY2VkQ29uZGl0aW9uKSkge1xuICAgICAgbGV0IGF0dHJpYnV0ZSA9IGNvbmRpdGlvbi5hdHRyaWJ1dGU7XG4gICAgICBzd2l0Y2ggKGF0dHJpYnV0ZSkge1xuICAgICAgICBjYXNlICdzdWJzY3JpcHRpb24nOlxuICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gbmV3IFN1YnNjcmlwdGlvbkNvbmRpdGlvbihjb25kaXRpb24uYXR0cmlidXRlLCBjb25kaXRpb24ub3BlcmF0b3IsIGNvbmRpdGlvbi5wYXJhbXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IG5ldyBBZHZhbmNlZENvbmRpdGlvbihjb25kaXRpb24pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gbmV3IENvbmRpdGlvbihjb25kaXRpb24uYXR0cmlidXRlLCBjb25kaXRpb24ub3BlcmF0b3IsIGNvbmRpdGlvbi5wYXJhbXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICB9XG4gIH1cblxuICBldmFsdWF0ZShjb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKSB7XG4gICAgbGV0IGZpZWxkID0gKGlzSW5jb21pbmcpID8gbWVzc2FnZS50byA6IG1lc3NhZ2UuZnJvbTtcbiAgICBsZXQgaHlwZXJ0eU5hbWU7XG4gICAgc3dpdGNoICh0aGlzLnNjb3BlKSB7XG4gICAgICBjYXNlICdnbG9iYWwnOlxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnaHlwZXJ0eSc6XG4gICAgICAgIGlmIChpc0RhdGFPYmplY3RVUkwoZmllbGQpKSB7XG4gICAgICAgICAgbGV0IHJlcG9ydGVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHJlbW92ZVBhdGhGcm9tVVJMKGZpZWxkKSk7XG4gICAgICAgICAgaWYgKHJlcG9ydGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGh5cGVydHlOYW1lID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUocmVwb3J0ZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoZmllbGQuc3BsaXQoJzovLycpWzBdID09PSAnaHlwZXJ0eScpIHtcbiAgICAgICAgICAgIGh5cGVydHlOYW1lID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUocmVtb3ZlUGF0aEZyb21VUkwoZmllbGQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGh5cGVydHlOYW1lID09PSB0aGlzLnRhcmdldCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XG5cbiAgICAgIGNhc2UgJ2lkZW50aXR5JzpcbiAgICAgICAgbGV0IG93bmVyO1xuXG4gICAgICAgIGlmIChpc0RhdGFPYmplY3RVUkwoZmllbGQpKSB7XG4gICAgICAgICAgbGV0IHJlcG9ydGVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHJlbW92ZVBhdGhGcm9tVVJMKGZpZWxkKSk7XG4gICAgICAgICAgb3duZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIocmVwb3J0ZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChmaWVsZC5zcGxpdCgnOi8vJylbMF0gPT09ICdoeXBlcnR5Jykge1xuICAgICAgICAgICAgb3duZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIocmVtb3ZlUGF0aEZyb21VUkwoZmllbGQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG93bmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBvd25lciA9IGdldFVzZXJFbWFpbEZyb21VUkwob3duZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvd25lciA9PT0gdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbmRpdGlvbi5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgdGhpcy5zY29wZSwgdGhpcy50YXJnZXQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWNpc2lvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJ1bGU7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8qKlxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cbiogQGNsYXNzZGVzYyBDbGFzcyB0byBjb21iaW5lIHRoZSBhdXRob3JpemF0aW9uIGRlY2lzaW9ucyB0aGF0IHJlc3VsdCBmcm9tIHJ1bGVzIGV2YWx1YXRpb24uXG4qL1xuY2xhc3MgQWxsb3dPdmVycmlkZXMge1xuXG4gIC8qKlxuICAqIEdpdmVuIGFuIGFycmF5IG9mIGluZGl2aWR1YWwgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMsIHByaW9yaXRpemVzIGEgcG9zaXRpdmUgb25lLlxuICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgIGRlY2lzaW9uc1xuICAqIEByZXR1cm5zICB7Ym9vbGVhbn1cbiAgKi9cbiAgY29tYmluZShkZWNpc2lvbnMpIHtcbiAgICBpZiAoZGVjaXNpb25zLmluZGV4T2YodHJ1ZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKGZhbHNlKSAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWxsb3dPdmVycmlkZXM7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8qKlxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cbiogQGNsYXNzZGVzYyBDbGFzcyB0byBjb21iaW5lIHRoZSBhdXRob3JpemF0aW9uIGRlY2lzaW9ucyB0aGF0IHJlc3VsdCBmcm9tIHJ1bGVzIGV2YWx1YXRpb24uXG4qL1xuY2xhc3MgQmxvY2tPdmVycmlkZXMge1xuXG4gIC8qKlxuICAqIEdpdmVuIGFuIGFycmF5IG9mIGluZGl2aWR1YWwgYXV0aG9yaXNhdGlvbiBkZWNpc2lvbnMsIHByaW9yaXRpc2VzIGEgbmVnYXRpdmUgb25lLlxuICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgIGRlY2lzaW9uc1xuICAqIEByZXR1cm5zICB7Ym9vbGVhbn1cbiAgKi9cbiAgY29tYmluZShkZWNpc2lvbnMpIHtcbiAgICBpZiAoZGVjaXNpb25zLmluZGV4T2YoZmFsc2UpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGVjaXNpb25zLmluZGV4T2YodHJ1ZSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQmxvY2tPdmVycmlkZXM7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbi8qKlxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cbiogQGNsYXNzZGVzYyBDbGFzcyB0byBjb21iaW5lIHRoZSBhdXRob3JpemF0aW9uIGRlY2lzaW9ucyB0aGF0IHJlc3VsdCBmcm9tIHJ1bGVzIGV2YWx1YXRpb24uXG4qL1xuY2xhc3MgRmlyc3RBcHBsaWNhYmxlIHtcblxuICAvKipcbiAgKiBHaXZlbiBhbiBhcnJheSBvZiBpbmRpdmlkdWFsIGF1dGhvcmlzYXRpb24gZGVjaXNpb25zLCByZXR1cm5zIHRoZSBmaXJzdCBvbmUgZGlmZmVyZW50IGZyb20gJ05vdCBBcHBsaWNhYmxlJywgZWl0aGVyIHBvc2l0aXZlIG9yIG5lZ2F0aXZlLlxuICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgICAgZGVjaXNpb25zXG4gICogQHJldHVybnMgIHtib29sZWFufVxuICAqL1xuICBjb21iaW5lKGRlY2lzaW9ucykge1xuICAgIGZvciAobGV0IGkgaW4gZGVjaXNpb25zKSB7XG4gICAgICBpZiAoZGVjaXNpb25zW2ldICE9PSAnTm90IEFwcGxpY2FibGUnKSB7XG4gICAgICAgIHJldHVybiBkZWNpc2lvbnNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmlyc3RBcHBsaWNhYmxlO1xuIiwiaW1wb3J0IENvbmRpdGlvbiBmcm9tICcuL0NvbmRpdGlvbic7XG5pbXBvcnQgT3BlcmF0b3JzIGZyb20gJy4uL09wZXJhdG9ycyc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uQ29uZGl0aW9uIGZyb20gJy4vU3Vic2NyaXB0aW9uQ29uZGl0aW9uJztcblxuY2xhc3MgQWR2YW5jZWRDb25kaXRpb24ge1xuXG4gIGNvbnN0cnVjdG9yKGNvbmRpdGlvbikge1xuICAgIHRoaXMub3BlcmF0b3JzID0gbmV3IE9wZXJhdG9ycygpO1xuICAgIGlmIChjb25kaXRpb24ub3BlcmF0b3JzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbmRpdGlvbiA9IGNvbmRpdGlvbi5jb25kaXRpb247XG4gICAgfVxuICAgIGNvbmRpdGlvbiA9IHRoaXMuYnVpbGRDb25kaXRpb24oY29uZGl0aW9uKTtcbiAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgfVxuXG4gIGJ1aWxkQ29uZGl0aW9uKGNvbmRpdGlvbikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmRpdGlvblsxXSkpIHtcbiAgICAgIGNvbmRpdGlvblsxXSA9IHRoaXMuYnVpbGRDb25kaXRpb24oY29uZGl0aW9uWzFdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNvbmRpdGlvblsxXS5hdHRyaWJ1dGUgPT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgICAgIGNvbmRpdGlvblsxXSA9IG5ldyBTdWJzY3JpcHRpb25Db25kaXRpb24oY29uZGl0aW9uWzFdLmF0dHJpYnV0ZSwgY29uZGl0aW9uWzFdLm9wZXJhdG9yLCBjb25kaXRpb25bMV0ucGFyYW1zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbmRpdGlvblsxXSA9IG5ldyBDb25kaXRpb24oY29uZGl0aW9uWzFdLmF0dHJpYnV0ZSwgY29uZGl0aW9uWzFdLm9wZXJhdG9yLCBjb25kaXRpb25bMV0ucGFyYW1zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29uZGl0aW9uWzJdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmRpdGlvblsyXSkpIHtcbiAgICAgICAgY29uZGl0aW9uWzJdID0gdGhpcy5idWlsZENvbmRpdGlvbihjb25kaXRpb25bMl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbmRpdGlvblsyXS5hdHRyaWJ1dGUgPT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgICAgICAgY29uZGl0aW9uWzJdID0gbmV3IFN1YnNjcmlwdGlvbkNvbmRpdGlvbihjb25kaXRpb25bMl0uYXR0cmlidXRlLCBjb25kaXRpb25bMl0ub3BlcmF0b3IsIGNvbmRpdGlvblsyXS5wYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbmRpdGlvblsyXSA9IG5ldyBDb25kaXRpb24oY29uZGl0aW9uWzJdLmF0dHJpYnV0ZSwgY29uZGl0aW9uWzJdLm9wZXJhdG9yLCBjb25kaXRpb25bMl0ucGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29uZGl0aW9uO1xuICB9XG5cbiAgaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHNjb3BlLCB0YXJnZXQsIG9wZXJhdG9yLCBsZWZ0LCByaWdodCkge1xuICAgIGlmICghb3BlcmF0b3IpIHtcbiAgICAgIG9wZXJhdG9yID0gdGhpcy5jb25kaXRpb25bMF07XG4gICAgICBsZWZ0ID0gdGhpcy5jb25kaXRpb25bMV07XG4gICAgICByaWdodCA9IHRoaXMuY29uZGl0aW9uWzJdO1xuICAgIH1cblxuICAgIHdoaWxlICghKGxlZnQgaW5zdGFuY2VvZiBDb25kaXRpb24pICYgIShsZWZ0IGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uQ29uZGl0aW9uKSAmICh0eXBlb2YgbGVmdCAhPT0gJ2Jvb2xlYW4nKSkge1xuICAgICAgbGVmdCA9IHRoaXMuaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHNjb3BlLCB0YXJnZXQsIGxlZnRbMF0sIGxlZnRbMV0sIGxlZnRbMl0pO1xuICAgIH1cbiAgICBpZiAocmlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgd2hpbGUgKCEocmlnaHQgaW5zdGFuY2VvZiBDb25kaXRpb24pICYgIShyaWdodCBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbkNvbmRpdGlvbikgJiAodHlwZW9mIHJpZ2h0ICE9PSAnYm9vbGVhbicpKSB7XG4gICAgICAgIHJpZ2h0ID0gdGhpcy5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgcmlnaHRbMF0sIHJpZ2h0WzFdLCByaWdodFsyXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdExlZnQgPSAodHlwZW9mIGxlZnQgPT09ICdib29sZWFuJykgPyBsZWZ0IDogbGVmdC5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCk7XG4gICAgbGV0IHJlc3VsdFJpZ2h0O1xuICAgIGlmIChyaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHRSaWdodCA9ICh0eXBlb2YgcmlnaHQgPT09ICdib29sZWFuJykgPyByaWdodCA6IHJpZ2h0LmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCBzY29wZSwgdGFyZ2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMub3BlcmF0b3JzW29wZXJhdG9yXShbcmVzdWx0TGVmdCwgcmVzdWx0UmlnaHRdKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEFkdmFuY2VkQ29uZGl0aW9uO1xuIiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG5pbXBvcnQgT3BlcmF0b3JzIGZyb20gJy4uL09wZXJhdG9ycyc7XG5cbi8qKlxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cbiogQGNsYXNzZGVzYyBDbGFzcyB0byByZXByZXNlbnQgYSBjb25kaXRpb24gYW5kIGV2YWx1YXRlIGl0cyBhcHBsaWNhYmlsaXR5LlxuKi9cbmNsYXNzIENvbmRpdGlvbiB7XG5cbiAgLyoqXG4gICogQ3JlYXRlcyBhIG5ldyBDb25kaXRpb24uXG4gICogQGNsYXNzXG4gICogQHBhcmFtICB7c3RyaW5nfSAgYXR0cmlidXRlXG4gICogQHBhcmFtICB7c3RyaW5nfSAgb3BlcmF0b3JcbiAgKiBAcGFyYW0gIHsqfSAgICAgICBwYXJhbXNcbiAgKi9cbiAgY29uc3RydWN0b3IoYXR0cmlidXRlLCBvcGVyYXRvciwgcGFyYW1zKSB7XG4gICAgdGhpcy5hdHRyaWJ1dGUgPSBhdHRyaWJ1dGU7XG4gICAgdGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xuICAgIHRoaXMub3BlcmF0b3JzID0gbmV3IE9wZXJhdG9ycygpO1xuICB9XG5cbiAgLyoqXG4gICogVmVyaWZpZXMgaWYgdGhlIGNvbmRpdGlvbiBpcyBhcHBsaWNhYmxlIHRvIHRoZSBtZXNzYWdlLiBGaXJzdCwgdGhlIHN5c3RlbSB2YWx1ZSB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBhdHRyaWJ1dGUgaXMgcmV0cmlldmVkOyB0aGVuLCB0aGF0IHZhbHVlIGlzIGNvbXBhcmVkIHdpdGggdGhlIHBhcmFtZXRlciBzcGVjaWZpZWQgaW4gdGhlIGNvbmRpdGlvbiBieSBleGVjdXRpbmcgdGhlIG9wZXJhdG9yIGltcGxlbWVudGF0aW9uLiBJZiB0aGUgb3BlcmF0b3IgaXMgJ2luJyBhbmQgdGhlIG5hbWUgb2YgYSBncm91cCBpcyBnaXZlbiwgdGhlbiB0aGUgYXJyYXkgaG9sZGluZyB0aGUgbWVtYmVycyBvZiB0aGUgZ3JvdXAgaXMgcmV0cmlldmVkIGJlZm9yZSB0aGUgY29tcGFyaXNvbi5cbiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIGNvbnRleHQgICBlbnZpcm9ubWVudCB3aGVyZSB0aGUgUG9saWN5IEVuZ2luZSBpcyBiZWluZyB1c2VkXG4gICogQHBhcmFtICB7T2JqZWN0fSAgICBtZXNzYWdlXG4gICovXG4gIGlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlKSB7XG4gICAgY29udGV4dFt0aGlzLmF0dHJpYnV0ZV0gPSB7IG1lc3NhZ2U6IG1lc3NhZ2UgfTtcbiAgICBsZXQgdmFsdWUgPSBjb250ZXh0W3RoaXMuYXR0cmlidXRlXTtcbiAgICBsZXQgdGVtcFBhcmFtO1xuXG4gICAgaWYgKHRoaXMub3BlcmF0b3IgPT09ICdpbicpIHtcbiAgICAgIGlmICghKEFycmF5LmlzQXJyYXkodGhpcy5wYXJhbXMpKSkge1xuICAgICAgICB0ZW1wUGFyYW0gPSBjb250ZXh0LmdldEdyb3VwKHRoaXMucGFyYW1zLCBtZXNzYWdlLnRvKTtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BlcmF0b3JzW3RoaXMub3BlcmF0b3JdKFt0ZW1wUGFyYW0sIHZhbHVlXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMub3BlcmF0b3JzW3RoaXMub3BlcmF0b3JdKFt0aGlzLnBhcmFtcywgdmFsdWVdKTtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbmRpdGlvbjtcbiIsIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cblxuaW1wb3J0IENvbmRpdGlvbiBmcm9tICcuL0NvbmRpdGlvbic7XG5cbi8qKlxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cbiogQGNsYXNzZGVzYyBDbGFzcyB0byByZXByZXNlbnQgYSBzdWJzY3JpcHRpb24gY29uZGl0aW9uIGFuZCBldmFsdWF0ZSBpdHMgYXBwbGljYWJpbGl0eS5cbiovXG5jbGFzcyBTdWJzY3JpcHRpb25Db25kaXRpb24gZXh0ZW5kcyBDb25kaXRpb24ge1xuXG4gIC8qKlxuICAqIENyZWF0ZXMgYSBuZXcgU3Vic2NyaXB0aW9uQ29uZGl0aW9uLlxuICAqIEBjbGFzc1xuICAqIEBwYXJhbSAge3N0cmluZ30gIGF0dHJpYnV0ZVxuICAqIEBwYXJhbSAge3N0cmluZ30gIG9wZXJhdG9yXG4gICogQHBhcmFtICB7Kn0gICAgICAgcGFyYW1zXG4gICovXG4gIGNvbnN0cnVjdG9yKGF0dHJpYnV0ZSwgb3BlcmF0b3IsIHBhcmFtcykge1xuICAgIHN1cGVyKGF0dHJpYnV0ZSwgb3BlcmF0b3IsIHBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgKiBWZXJpZmllcyBpZiB0aGUgc3Vic2NyaXB0aW9uIGNvbmRpdGlvbiBpcyBhcHBsaWNhYmxlIHRvIHRoZSBtZXNzYWdlLiBGaXJzdCwgdmVyaWZpZXMgaWYgdGhlIG1lc3NhZ2UgaXMgb2YgdGhlIHN1YnNjcmlwdGlvbiB0eXBlOyBzZWNvbmQsIHZlcmlmaWVzIGlmIHRoZSBtZXNzYWdlIGlzIGZyb20gYSByZW1vdGUgcnVudGltZSB0byBndWFyYW50ZWUgdGhhdCB0aGUgc3Vic2NyaXB0aW9uIGlzIGJlaW5nIHZhbGlkYXRlZCBpbiB0aGUgZGVzdGluYXRpb24gcnVudGltZTsgdGhpcmQsIHZlcmlmaWVzIGlmIHRoZSBzdWJzY3JpcHRpb24gcHJlZmVyZW5jZSBpcyBtZXQuXG4gICogQHBhcmFtICB7T2JqZWN0fSAgICBjb250ZXh0ICAgZW52aXJvbm1lbnQgd2hlcmUgdGhlIFBvbGljeSBFbmdpbmUgaXMgYmVpbmcgdXNlZFxuICAqIEBwYXJhbSAge09iamVjdH0gICAgbWVzc2FnZVxuICAqL1xuICBpc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSkge1xuICAgIGxldCBpc1N1YnNjcmlwdGlvbiA9IG1lc3NhZ2UudHlwZSA9PT0gJ3N1YnNjcmliZSc7XG4gICAgbGV0IGlzRnJvbVJlbW90ZVNNID0gY29udGV4dC5pc0Zyb21SZW1vdGVTTShtZXNzYWdlLmZyb20pO1xuICAgIGlmIChpc1N1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7XG4gICAgICByZXR1cm4gc3VwZXIuaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3Vic2NyaXB0aW9uQ29uZGl0aW9uO1xuIiwiaW1wb3J0IEFsbG93T3ZlcnJpZGVzIGZyb20gJy4uL2NvbWJpbmluZ0FsZ29yaXRobXMvQWxsb3dPdmVycmlkZXMnO1xuaW1wb3J0IEJsb2NrT3ZlcnJpZGVzIGZyb20gJy4uL2NvbWJpbmluZ0FsZ29yaXRobXMvQmxvY2tPdmVycmlkZXMnO1xuaW1wb3J0IHtkaXZpZGVVUkwsIGdldFVzZXJFbWFpbEZyb21VUkwsIGlzRGF0YU9iamVjdFVSTH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IEZpcnN0QXBwbGljYWJsZSBmcm9tICcuLi9jb21iaW5pbmdBbGdvcml0aG1zL0ZpcnN0QXBwbGljYWJsZSc7XG5pbXBvcnQgUmVUaGlua0N0eCBmcm9tICcuLi9SZVRoaW5rQ3R4JztcblxuY2xhc3MgUnVudGltZUNvcmVDdHggZXh0ZW5kcyBSZVRoaW5rQ3R4IHtcblxuICBjb25zdHJ1Y3RvcihpZE1vZHVsZSwgcnVudGltZVJlZ2lzdHJ5LCBwZXJzaXN0ZW5jZU1hbmFnZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaWRNb2R1bGUgPSBpZE1vZHVsZTtcbiAgICB0aGlzLnJ1bnRpbWVSZWdpc3RyeSA9IHJ1bnRpbWVSZWdpc3RyeTtcbiAgICB0aGlzLmFjdGl2ZVVzZXJQb2xpY3kgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kgPSB7fTtcbiAgICB0aGlzLnVzZXJQb2xpY2llcyA9IHt9O1xuICAgIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyID0gcGVyc2lzdGVuY2VNYW5hZ2VyO1xuICB9XG5cbiAgZ2V0IHN1YnNjcmlwdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgc2V0IHN1YnNjcmlwdGlvbihwYXJhbXMpIHtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb24gPSBwYXJhbXMubWVzc2FnZS5ib2R5LnN1YnNjcmliZXI7XG4gIH1cblxuICBsb2FkQ29uZmlndXJhdGlvbnMoKSB7XG4gICAgdGhpcy5hY3RpdmVVc2VyUG9saWN5ID0gdGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOmFjdGl2ZVBvbGljeScpO1xuXG4gICAgbGV0IGdyb3VwcyA9IHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyLmdldCgncmV0aGluazpncm91cHMnKTtcbiAgICB0aGlzLmdyb3VwcyA9IChncm91cHMgPT09IHVuZGVmaW5lZCkgPyB7fSA6IGdyb3VwcztcblxuICAgIGxldCBzcFBvbGljaWVzID0gdGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOnNwUG9saWNpZXMnKTtcbiAgICB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeSA9IChzcFBvbGljaWVzID09PSB1bmRlZmluZWQpID8ge30gOiBzcFBvbGljaWVzO1xuXG4gICAgdGhpcy5fbG9hZFVzZXJQb2xpY2llcygpO1xuICB9XG5cbiAgcHJlcGFyZUZvckV2YWx1YXRpb24obWVzc2FnZSwgaXNJbmNvbWluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICBpZiAoaXNJbmNvbWluZykge1xuICAgICAgICBpZiAoX3RoaXMuX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkpIHtcbiAgICAgICAgICBfdGhpcy5pZE1vZHVsZS5kZWNyeXB0TWVzc2FnZShtZXNzYWdlKS50aGVuKGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIC8qaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHtcbiAgICAgICAgICAgICAgX3RoaXMuX2lzVmFsaWRVcGRhdGUobWVzc2FnZSkudGhlbihtZXNzYWdlID0+IHsqL1xuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIC8qfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgfSovXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc1RvU2V0SUQobWVzc2FnZSkpIHtcbiAgICAgICAgICBfdGhpcy5fZ2V0SWRlbnRpdHkobWVzc2FnZSkudGhlbihpZGVudGl0eSA9PiB7XG4gICAgICAgICAgICBtZXNzYWdlLmJvZHkuaWRlbnRpdHkgPSBpZGVudGl0eTtcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbiAgZ2V0UG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpIHtcbiAgICBsZXQgcG9saWNpZXMgPSB7fTtcblxuICAgIGlmICh0aGlzLmFjdGl2ZVVzZXJQb2xpY3kgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcG9saWNpZXMudXNlclBvbGljeSA9IHRoaXMudXNlclBvbGljaWVzW3RoaXMuYWN0aXZlVXNlclBvbGljeV07XG4gICAgfVxuXG4gICAgcG9saWNpZXMuc2VydmljZVByb3ZpZGVyUG9saWN5ID0gdGhpcy5nZXRTZXJ2aWNlUHJvdmlkZXJQb2xpY3kobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpO1xuXG4gICAgcmV0dXJuIHBvbGljaWVzO1xuICB9XG5cbiAgX2lzVmFsaWRVcGRhdGUobWVzc2FnZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChtZXNzYWdlLmZyb20uc3BsaXQoJzovLycpLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgX3RoaXMuaWRNb2R1bGUuX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdChtZXNzYWdlLmZyb20pLnRoZW4oaHlwZXJ0eVVSTCA9PiB7XG4gICAgICAgICAgaWYgKGh5cGVydHlVUkwgPT09IG1lc3NhZ2UuYm9keS5zb3VyY2UpIHtcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnVGhlIHNvdXJjZSBvZiB0aGUgbWVzc2FnZSBpcyBub3QgdmFsaWQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcmVwYXJlVG9Gb3J3YXJkKG1lc3NhZ2UsIGlzSW5jb21pbmcsIHJlc3VsdCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmIChpc0luY29taW5nICYgcmVzdWx0KSB7XG4gICAgICAgIGxldCBpc1N1YnNjcmlwdGlvbiA9IG1lc3NhZ2UudHlwZSA9PT0gJ3N1YnNjcmliZSc7XG4gICAgICAgIGxldCBpc0Zyb21SZW1vdGVTTSA9IF90aGlzLmlzRnJvbVJlbW90ZVNNKG1lc3NhZ2UuZnJvbSk7XG4gICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7XG4gICAgICAgICAgX3RoaXMuZG9NdXR1YWxBdXRoZW50aWNhdGlvbihtZXNzYWdlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNUb0N5cGhlck1vZHVsZShtZXNzYWdlKSkge1xuICAgICAgICAgIF90aGlzLmlkTW9kdWxlLmVuY3J5cHRNZXNzYWdlKG1lc3NhZ2UpLnRoZW4oKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGRvTXV0dWFsQXV0aGVudGljYXRpb24obWVzc2FnZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgbGV0IHRvID0gbWVzc2FnZS50by5zcGxpdCgnLycpO1xuICAgICAgbGV0IHN1YnNJbmRleCA9IHRvLmluZGV4T2YoJ3N1YnNjcmlwdGlvbicpO1xuICAgICAgbGV0IGlzRGF0YU9iamVjdFN1YnNjcmlwdGlvbiA9IHN1YnNJbmRleCAhPT0gLTE7XG4gICAgICBsZXQgaXNGcm9tUmVtb3RlU00gPSBfdGhpcy5pc0Zyb21SZW1vdGVTTShtZXNzYWdlLmZyb20pO1xuICAgICAgaWYgKGlzRGF0YU9iamVjdFN1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7XG4gICAgICAgIHRvLnBvcCgpO1xuICAgICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IHRvWzBdICsgJy8vJyArIHRvWzJdICsgJy8nICsgdG9bM107XG4gICAgICAgIF90aGlzLmlkTW9kdWxlLmRvTXV0dWFsQXV0aGVudGljYXRpb24oZGF0YU9iamVjdFVSTCwgbWVzc2FnZS5ib2R5LnN1YnNjcmliZXIpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIF90aGlzLnJ1bnRpbWVSZWdpc3RyeS5yZWdpc3RlclN1YnNjcmliZXIoZGF0YU9iamVjdFVSTCwgbWVzc2FnZS5ib2R5LnN1YnNjcmliZXIpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXRNeUVtYWlscygpIHtcbiAgICBsZXQgaWRlbnRpdGllcyA9IHRoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdGllcygpO1xuICAgIGxldCBlbWFpbHMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgaW4gaWRlbnRpdGllcykge1xuICAgICAgZW1haWxzLnB1c2goZ2V0VXNlckVtYWlsRnJvbVVSTChpZGVudGl0aWVzW2ldLmlkZW50aXR5KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVtYWlscztcbiAgfVxuXG4gIGdldE15SHlwZXJ0aWVzKCkge1xuICAgIGxldCBoeXBlcnRpZXMgPSB0aGlzLnJ1bnRpbWVSZWdpc3RyeS5oeXBlcnRpZXNMaXN0O1xuICAgIGxldCBoeXBlcnRpZXNOYW1lcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSBpbiBoeXBlcnRpZXMpIHtcbiAgICAgIGxldCBoeXBlcnR5TmFtZSA9IGh5cGVydGllc1tpXS5vYmplY3ROYW1lO1xuICAgICAgaWYgKGh5cGVydGllc05hbWVzLmluZGV4T2YoaHlwZXJ0eU5hbWUpID09PSAtMSkge1xuICAgICAgICBoeXBlcnRpZXNOYW1lcy5wdXNoKGh5cGVydHlOYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaHlwZXJ0aWVzTmFtZXM7XG4gIH1cblxuICBnZXRTZXJ2aWNlUHJvdmlkZXJQb2xpY3kobWVzc2FnZSwgaXNJbmNvbWluZykge1xuICAgIGxldCBwb2xpY3k7XG5cbiAgICBpZiAoaXNJbmNvbWluZykge1xuICAgICAgbGV0IHRvSHlwZXJ0eSA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKG1lc3NhZ2UudG8pO1xuICAgICAgcG9saWN5ID0gdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3lbdG9IeXBlcnR5XTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGZyb21IeXBlcnR5ID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUobWVzc2FnZS5mcm9tKTtcbiAgICAgIHBvbGljeSA9IHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5W2Zyb21IeXBlcnR5XTtcbiAgICB9XG4gICAgcmV0dXJuIHBvbGljeTtcbiAgfVxuXG4gIGlzRnJvbVJlbW90ZVNNKGZyb20pIHtcbiAgICBsZXQgc3BsaXRGcm9tID0gZnJvbS5zcGxpdCgnOi8vJyk7XG4gICAgcmV0dXJuIHNwbGl0RnJvbVswXSA9PT0gJ3J1bnRpbWUnICYmIGZyb20gIT09IHRoaXMucnVudGltZVJlZ2lzdHJ5LnJ1bnRpbWVVUkwgKyAnL3NtJztcbiAgfVxuXG4gIF9pc1RvU2V0SUQobWVzc2FnZSkge1xuICAgIGxldCBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nXTtcbiAgICBsZXQgc3BsaXRGcm9tID0gKG1lc3NhZ2UuZnJvbSkuc3BsaXQoJzovLycpO1xuICAgIGxldCBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdO1xuXG4gICAgcmV0dXJuIHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKGZyb21TY2hlbWEpID09PSAtMTtcbiAgfVxuXG4gIGdldFVSTCh1cmwpIHtcbiAgICBsZXQgc3BsaXRVUkwgPSB1cmwuc3BsaXQoJy8nKTtcbiAgICByZXR1cm4gc3BsaXRVUkxbMF0gKyAnLy8nICsgc3BsaXRVUkxbMl0gKyAnLycgKyBzcGxpdFVSTFszXTtcbiAgfVxuXG4gIF9nZXRJZGVudGl0eShtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHtcbiAgICAgIHJldHVybiB0aGlzLmlkTW9kdWxlLmdldElkZW50aXR5T2ZIeXBlcnR5KG1lc3NhZ2UuYm9keS5zb3VyY2UpO1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICdyZXNwb25zZScgJiYgbWVzc2FnZS5ib2R5LnNvdXJjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eU9mSHlwZXJ0eShtZXNzYWdlLmJvZHkuc291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAoZGl2aWRlVVJMKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknKSB7XG4gICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eU9mSHlwZXJ0eShtZXNzYWdlLmZyb20pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eU9mSHlwZXJ0eSh0aGlzLmdldFVSTChtZXNzYWdlLmZyb20pKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBJZGVudGlmaWVzIHRoZSBtZXNzYWdlcyB0byBiZSBmb3J3YXJkZWQgdG8gdGhlIElkZW50aXR5IE1vZHVsZSBmb3JcbiAgKiBlbmNyeXB0aW9uL2RlY3J5cHRpb24gYW5kIGludGVncml0eSB2YWxpZGF0aW9uLlxuICAqIEBwYXJhbSB7TWVzc2FnZX0gICAgbWVzc2FnZVxuICAqIEByZXR1cm5zIHtib29sZWFufSAgcmV0dXJucyB0cnVlIGlmIHRoZSBtZXNzYWdlIHJlcXVpcmVzIGVuY3J5cHRpb24vZGVjcnlwdGlvblxuICAqICAgICAgICAgICAgICAgICAgICAgb3IgaWYgaXRzIHR5cGUgZXF1YWxzICdoYW5kc2hha2UnOyBmYWxzZSBvdGhlcndpc2VcbiAgKi9cbiAgX2lzVG9DeXBoZXJNb2R1bGUobWVzc2FnZSkge1xuICAgIGxldCBpc0NyZWF0ZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2NyZWF0ZSc7XG4gICAgbGV0IGlzRnJvbUh5cGVydHkgPSBkaXZpZGVVUkwobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eSc7XG4gICAgbGV0IGlzVG9IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JztcbiAgICBsZXQgaXNUb0RhdGFPYmplY3QgPSBpc0RhdGFPYmplY3RVUkwobWVzc2FnZS50byk7XG5cbiAgICByZXR1cm4gKGlzQ3JlYXRlICYmIGlzRnJvbUh5cGVydHkgJiYgaXNUb0h5cGVydHkpIHx8IChpc0NyZWF0ZSAmJiBpc0Zyb21IeXBlcnR5ICYmIGlzVG9EYXRhT2JqZWN0KSB8fCBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnIHx8IG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZSc7XG4gIH1cblxuICAvKipcbiAgKiBDcmVhdGVzIGEgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICBncm91cE5hbWVcbiAgKi9cbiAgX2xvYWRVc2VyUG9saWNpZXMoKSB7XG4gICAgbGV0IHBvbGljaWVzID0gdGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOnVzZXJQb2xpY2llcycpO1xuICAgIGlmIChwb2xpY2llcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKGxldCBpIGluIHBvbGljaWVzKSB7XG4gICAgICAgIHRoaXMucGVwLmFkZFBvbGljeSgnVVNFUicsIGksIHBvbGljaWVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfZ2V0TGFzdENvbXBvbmVudE9mVVJMKHVybCkge1xuICAgIGxldCBzcGxpdCA9IHVybC5zcGxpdCgnLycpO1xuICAgIHJldHVybiBzcGxpdFtzcGxpdC5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIF9nZXRQb2xpY2llc0pTT04ocG9saWNpZXMpIHtcbiAgICBmb3IgKGxldCBpIGluIHBvbGljaWVzKSB7XG4gICAgICBsZXQgY29tYmluaW5nQWxnb3JpdGhtID0gcG9saWNpZXNbaV0uY29tYmluaW5nQWxnb3JpdGhtO1xuICAgICAgaWYgKGNvbWJpbmluZ0FsZ29yaXRobSBpbnN0YW5jZW9mIEJsb2NrT3ZlcnJpZGVzKSB7XG4gICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdibG9ja092ZXJyaWRlcyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgQWxsb3dPdmVycmlkZXMpIHtcbiAgICAgICAgICBwb2xpY2llc1tpXS5jb21iaW5pbmdBbGdvcml0aG0gPSAnYWxsb3dPdmVycmlkZXMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjb21iaW5pbmdBbGdvcml0aG0gaW5zdGFuY2VvZiBGaXJzdEFwcGxpY2FibGUpIHtcbiAgICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdmaXJzdEFwcGxpY2FibGUnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb2xpY2llc1tpXS5jb21iaW5pbmdBbGdvcml0aG0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvbGljaWVzO1xuICB9XG5cbiAgc2F2ZUFjdGl2ZVBvbGljeSgpIHtcbiAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlci5zZXQoJ3JldGhpbms6YWN0aXZlUG9saWN5JywgMCwgdGhpcy5hY3RpdmVVc2VyUG9saWN5KTtcbiAgfVxuXG4gIHNhdmVHcm91cHMoKSB7XG4gICAgdGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIuc2V0KCdyZXRoaW5rOmdyb3VwcycsIDAsIHRoaXMuZ3JvdXBzKTtcbiAgfVxuXG4gIHNhdmVQb2xpY2llcyhzb3VyY2UsIHBvbGljeSwga2V5KSB7XG4gICAgbGV0IHBvbGljaWVzSnNvbjtcblxuICAgIHN3aXRjaCAoc291cmNlKSB7XG4gICAgICBjYXNlICdVU0VSJzpcbiAgICAgICAgcG9saWNpZXNKc29uID0gSlNPTi5zdHJpbmdpZnkodGhpcy51c2VyUG9saWNpZXMpO1xuICAgICAgICBwb2xpY2llc0pzb24gPSB0aGlzLl9nZXRQb2xpY2llc0pTT04oSlNPTi5wYXJzZShwb2xpY2llc0pzb24pKTtcbiAgICAgICAgdGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIuc2V0KCdyZXRoaW5rOnVzZXJQb2xpY2llcycsIDAsIHBvbGljaWVzSnNvbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnU0VSVklDRV9QUk9WSURFUic6XG4gICAgICAgIGlmIChwb2xpY3kgIT09IHVuZGVmaW5lZCAmIGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3lba2V5XSA9IHBvbGljeTtcbiAgICAgICAgfVxuICAgICAgICBwb2xpY2llc0pzb24gPSBKU09OLnN0cmluZ2lmeSh0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeSk7XG4gICAgICAgIHBvbGljaWVzSnNvbiA9IHRoaXMuX2dldFBvbGljaWVzSlNPTihKU09OLnBhcnNlKHBvbGljaWVzSnNvbikpO1xuICAgICAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlci5zZXQoJ3JldGhpbms6c3BQb2xpY2llcycsIDAsIHBvbGljaWVzSnNvbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gcG9saWN5IHNvdXJjZTogJyArIHNvdXJjZSk7XG4gICAgfVxuICB9XG5cbiAgZ2V0R3JvdXBzTmFtZXMoKSB7XG4gICAgbGV0IG15R3JvdXBzID0gdGhpcy5ncm91cHM7XG4gICAgbGV0IGdyb3Vwc05hbWVzID0gW107XG4gICAgaWYgKG15R3JvdXBzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGZvciAobGV0IGdyb3VwTmFtZSBpbiBteUdyb3Vwcykge1xuICAgICAgICBncm91cHNOYW1lcy5wdXNoKGdyb3VwTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBncm91cHNOYW1lcztcbiAgfVxuXG4gIGdldEdyb3VwKGdyb3VwTmFtZSwgZGVzdGluYXRpb24pIHtcbiAgICBsZXQgbWVtYmVycyA9IFtdO1xuXG4gICAgaWYgKGdyb3VwTmFtZSA9PT0gJ3ByZWF1dGhvcmlzZWQnKSB7XG4gICAgICBsZXQgZGF0YU9iamVjdFVSTCA9IGRlc3RpbmF0aW9uLnNwbGl0KCcvJyk7XG4gICAgICBkYXRhT2JqZWN0VVJMLnBvcCgpO1xuICAgICAgZGF0YU9iamVjdFVSTCA9IGRhdGFPYmplY3RVUkxbMF0gKyAnLy8nICsgZGF0YU9iamVjdFVSTFsyXTtcbiAgICAgIG1lbWJlcnMgPSB0aGlzLnJ1bnRpbWVSZWdpc3RyeS5nZXRQcmVBdXRoU3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmdyb3Vwc1tncm91cE5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVtYmVycyA9IHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbWJlcnM7XG4gIH1cblxuICAvKipcbiAgKiBDcmVhdGVzIGEgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICBncm91cE5hbWVcbiAgKi9cbiAgY3JlYXRlR3JvdXAoZ3JvdXBOYW1lKSB7XG4gICAgdGhpcy5ncm91cHNbZ3JvdXBOYW1lXSA9IFtdO1xuICAgIHRoaXMuc2F2ZUdyb3VwcygpO1xuICB9XG5cbiAgZGVsZXRlR3JvdXAoZ3JvdXBOYW1lKSB7XG4gICAgZGVsZXRlIHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV07XG4gICAgdGhpcy5zYXZlR3JvdXBzKCk7XG4gIH1cblxuICAvKipcbiAgKiBBZGRzIHRoZSBnaXZlbiB1c2VyIGVtYWlsIHRvIHRoZSBncm91cCB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJFbWFpbFxuICAqIEBwYXJhbSAge1N0cmluZ30gIGdyb3VwTmFtZVxuICAqL1xuICBhZGRUb0dyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7XG4gICAgbGV0IG15R3JvdXBzID0gdGhpcy5ncm91cHM7XG4gICAgaWYgKG15R3JvdXBzW2dyb3VwTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKG15R3JvdXBzW2dyb3VwTmFtZV0uaW5kZXhPZih1c2VyRW1haWwpID09PSAtMSkge1xuICAgICAgICBteUdyb3Vwc1tncm91cE5hbWVdLnB1c2godXNlckVtYWlsKTtcbiAgICAgICAgdGhpcy5zYXZlR3JvdXBzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IEVycm9yKCdHcm91cCBcIicgKyBncm91cE5hbWUgKyAnXCIgZG9lcyBub3QgZXhpc3QhJyk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRnJvbUdyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7XG4gICAgbGV0IGdyb3VwID0gdGhpcy5ncm91cHNbZ3JvdXBOYW1lXTtcblxuICAgIGdyb3VwLnNwbGljZShncm91cC5pbmRleE9mKHVzZXJFbWFpbCksIDEpO1xuICAgIHRoaXMuc2F2ZUdyb3VwcygpO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUnVudGltZUNvcmVDdHg7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG4vLyBpbXBvcnQgTWVzc2FnZUZhY3RvcnkgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL01lc3NhZ2VGYWN0b3J5JztcblxuLyoqXG4gKiBDbGFzcyB3aWxsIGFzayB0byB0aGUgbWVzc2FnZSBub2RlIGZvciBhZGRyZXNzZXNcbiAqL1xuY2xhc3MgQWRkcmVzc0FsbG9jYXRpb24ge1xuICAvKiBwcml2YXRlXG4gIF91cmw6IFVSTFxuICBfYnVzOiBNaW5pQnVzXG4gICovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBBZGRyZXNzIEFsbG9jYXRpb25cbiAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgICB1cmwgLSB1cmwgZnJvbSB3aG8gaXMgc2VuZGluZyB0aGUgbWVzc2FnZVxuICAgKiBAcGFyYW0gIHtNaW5pQnVzfSAgICAgIGJ1cyAtIE1pbmlCdXMgdXNlZCBmb3IgYWRkcmVzcyBhbGxvY2F0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih1cmwsIGJ1cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBsZXQgbWVzc2FnZUZhY3RvcnkgPSBuZXcgTWVzc2FnZUZhY3RvcnkoKTtcbiAgICAvL1xuICAgIC8vIF90aGlzLl9tZXNzYWdlRmFjdG9yeSA9IG1lc3NhZ2VGYWN0b3J5O1xuICAgIF90aGlzLl91cmwgPSB1cmw7XG4gICAgX3RoaXMuX2J1cyA9IGJ1cztcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXQgdGhlIFVSTCB2YWx1ZVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSB1cmwgdmFsdWU7XG4gICAqL1xuICBnZXQgdXJsKCkgeyByZXR1cm4gdGhpcy5fdXJsOyB9XG5cbiAgLyoqXG4gICAqIEFzayBmb3IgY3JlYXRpb24gb2YgYSBudW1iZXIgb2YgSHlwZXJ0eSBhZGRyZXNzZXMsIHRvIHRoZSBkb21haW4gbWVzc2FnZSBub2RlLlxuICAgKiBAcGFyYW0gIHtEb21haW59IGRvbWFpbiAtIERvbWFpbiBvZiB0aGUgbWVzc2FnZSBub2RlLlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IG51bWJlciAtIE51bWJlciBvZiBhZGRyZXNzZXMgdG8gcmVxdWVzdFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxIeXBlcnR5VVJMPn0gIEEgbGlzdCBvZiBIeXBlcnR5VVJMJ3NcbiAgICovXG4gIGNyZWF0ZShkb21haW4sIG51bWJlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBsZXQgbWVzc2FnZUZhY3RvcnkgPSBfdGhpcy5fbWVzc2FnZUZhY3Rvcnk7XG5cbiAgICBsZXQgbXNnID0ge1xuICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IF90aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvaHlwZXJ0eS1hZGRyZXNzLWFsbG9jYXRpb24nLFxuICAgICAgYm9keToge3ZhbHVlOiB7bnVtYmVyOiBudW1iZXJ9fVxuICAgIH07XG5cbiAgICAvLyBUT0RPOiBBcHBseSB0aGUgbWVzc2FnZSBmYWN0b3J5XG4gICAgLy8gVGhlIG1zZy1ub2RlLXZlcnR4IHNob3VsZCBiZSBjaGFuZ2VkIHRoZSBib2R5IGZpZWxkIHRvIHJlY2VpdmVcbiAgICAvLyB0aGUgZm9sbG93aW5nIGZvcm1hdCBib2R5OiB7dmFsdWU6IHtudW1iZXI6IG51bWJlcn19IGJlY2F1c2VcbiAgICAvLyB0aGUgbWVzc2FnZSBpcyBnZW5lcmF0ZWQgaW4gdGhhdCB3YXkgYnkgdGhlIG1lc3NhZ2UgZmFjdG9yeTtcbiAgICAvLyBsZXQgbXNnID0gbWVzc2FnZUZhY3RvcnkuY3JlYXRlTWVzc2FnZVJlcXVlc3QoX3RoaXMuX3VybCwgJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL2h5cGVydHktYWRkcmVzcy1hbGxvY2F0aW9uJywgJycsIHtudW1iZXI6IG51bWJlcn0pO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgLy8gVE9ETzogY2hhbmdlIHRoaXMgcmVzcG9uc2UgTWVzc2FnZSB1c2luZyB0aGUgTWVzc2FnZUZhY3RvcnlcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgcmVzb2x2ZShyZXBseS5ib2R5LnZhbHVlLmFsbG9jYXRlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogU2VuZCBhIHJlcXVlc3QgdG8gdGhlIGRvbWFpbiBtZXNzYWdlIG5vZGUsIHRvIGRlYWxsb2NhdGUgb25lIG9yIG1vcmUgYWRkcmVzc2VzXG4gICogQHBhcmFtICB7RG9tYWlufSBkb21haW4gLSBEb21haW4gb2YgdGhlIG1lc3NhZ2Ugbm9kZS5cbiAgKiBAcGFyYW0gIHthZGRyZXNzZXN9IGFkZHJlc3NlcyB0byByZXF1ZXN0IHRoZSBkZWFsbG9jYXRpb25cbiAgKiBAcmV0dXJucyB7UHJvbWlzZX0gIHRoZSByZXNwb25zZSBieSB0aGUgbWVzc2FnZSBub2RlXG4gICovXG4gIGRlbGV0ZShkb21haW4sIGFkZHJlc3Nlcykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL2h5cGVydHktYWRkcmVzcy1hbGxvY2F0aW9uJyxcbiAgICAgIGJvZHk6IHtjaGlsZHJlblJlc291cmNlczogYWRkcmVzc2VzfVxuICAgIH07XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygncmVwbHknLCByZXBseSk7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIHJlc29sdmUocmVwbHkuYm9keS5jb2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QocmVwbHkuYm9keS5kZXNjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBZGRyZXNzQWxsb2NhdGlvbjtcbiIsIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cbmltcG9ydCBSZWdpc3RyeURhdGFNb2RlbCBmcm9tICcuL1JlZ2lzdHJ5RGF0YU1vZGVsJztcblxuLyoqXG4qICAgQGF1dGhvcjogR2lsIERpYXMgKGdpbC5kaWFzQHRlY25pY28udWxpc2JvYS5wdClcbiogICBIeXBlcnR5SW5zdGFuY2UgRGF0YSBNb2RlbCB1c2VkIHRvIG1vZGVsIGluc3RhbmNlcyBvZiBIeXBlcnRpZXMgcnVubmluZyBpbiBkZXZpY2VzIGFuZCBzZXJ2ZXJzLlxuKi9cbmNsYXNzIEh5cGVydHlJbnN0YW5jZSBleHRlbmRzIFJlZ2lzdHJ5RGF0YU1vZGVsIHtcblxuICBjb25zdHJ1Y3RvcihpZCwgdXJsLCBkZXNjcmlwdG9yVVJMLGRlc2NyaXB0b3IsIGh5cGVydHlVUkwsIHVzZXIsIGd1aWQsIHJ1bnRpbWUsIGNvbnRleHQpIHtcbiAgICBzdXBlcihpZCwgdXJsLCBkZXNjcmlwdG9yVVJMKTtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLl9kZXNjcmlwdG9yID0gZGVzY3JpcHRvcjtcbiAgICBfdGhpcy5faHlwZXJ0eVVSTCA9IGh5cGVydHlVUkw7XG4gICAgX3RoaXMuX3VzZXIgPSB1c2VyO1xuICAgIF90aGlzLl9ndWlkID0gZ3VpZDtcbiAgICBfdGhpcy5fcnVudGltZSA9IHJ1bnRpbWU7XG4gICAgX3RoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuICB9XG5cbiAgc2V0IHVzZXIoaWRlbnRpdHkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLnVzZXIgPSBpZGVudGl0eTtcbiAgfVxuXG4gIGdldCB1c2VyKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl91c2VyO1xuICB9XG5cbiAgZ2V0IGh5cGVydHlVUkwoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX2h5cGVydHlVUkw7XG4gIH1cblxuICBnZXQgZGVzY3JpcHRvcigpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fZGVzY3JpcHRvcjtcbiAgfVxuXG4gIGdldCBvYmplY3ROYW1lKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yLl9vYmplY3ROYW1lO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEh5cGVydHlJbnN0YW5jZTtcbiIsIi8qKlxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxuKlxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuKlxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuKlxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qKi9cbmltcG9ydCBBZGRyZXNzQWxsb2NhdGlvbiBmcm9tICcuL0FkZHJlc3NBbGxvY2F0aW9uJztcbmltcG9ydCBPYmplY3RBbGxvY2F0aW9uIGZyb20gJy4uL3N5bmNoZXIvT2JqZWN0QWxsb2NhdGlvbic7XG5pbXBvcnQgSHlwZXJ0eUluc3RhbmNlIGZyb20gJy4vSHlwZXJ0eUluc3RhbmNlJztcblxuaW1wb3J0IHtNZXNzYWdlRmFjdG9yeX0gZnJvbSAnc2VydmljZS1mcmFtZXdvcmsvZGlzdC9NZXNzYWdlRmFjdG9yeSc7XG5pbXBvcnQge2RpdmlkZVVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMuanMnO1xuXG5jb25zdCBTVEFUVVMgPSB7IERFUExPWUVEOiAnZGVwbG95ZWQnLCBQUk9HUkVTUzogJ2luLXByb2dyZXNzJyB9O1xuXG4vKmltcG9ydCBJZGVudGl0eU1hbmFnZXIgZnJvbSAnLi9JZGVudGl0eU1hbmFnZXInO1xuaW1wb3J0IERpc2NvdmVyeSBmcm9tICcuL0Rpc2NvdmVyeSc7Ki9cblxuLyoqXG4qIFJ1bnRpbWUgUmVnaXN0cnkgSW50ZXJmYWNlXG4qL1xuY2xhc3MgUmVnaXN0cnkge1xuXG4gIC8qKlxuICAqIFRvIGluaXRpYWxpc2UgdGhlIFJ1bnRpbWUgUmVnaXN0cnkgd2l0aCB0aGUgUnVudGltZVVSTCB0aGF0IHdpbGwgYmUgdGhlIGJhc2lzIHRvIGRlcml2ZSB0aGUgaW50ZXJuYWwgcnVudGltZSBhZGRyZXNzZXMgd2hlbiBhbGxvY2F0aW5nIGFkZHJlc3NlcyB0byBpbnRlcm5hbCBydW50aW1lIGNvbXBvbmVudC4gSW4gYWRkaXRpb24sIHRoZSBSZWdpc3RyeSBkb21haW4gYmFjay1lbmQgdG8gYmUgdXNlZCB0byByZW1vdGVseSByZWdpc3RlciBSdW50aW1lIGNvbXBvbmVudHMsIGlzIGFsc28gcGFzc2VkIGFzIGlucHV0IHBhcmFtZXRlci5cbiAgKiBAcGFyYW0gIHtNZXNzYWdlQnVzfSAgICAgICAgICBtc2didXMgICAgICAgICAgICAgICAgbXNnYnVzXG4gICogQHBhcmFtICB7SHlwZXJ0eVJ1bnRpbWVVUkx9ICAgcnVudGltZVVSTCAgICAgICAgICAgIHJ1bnRpbWVVUkxcbiAgKiBAcGFyYW0gIHtBcHBTYW5kYm94fSAgICAgICAgICBhcHBTYW5kYm94ICAgICAgICAgICAgYXBwU2FuZGJveFxuICAqIEBwYXJhbSAge3J1bnRpbWVDYXRhbG9ndWV9ICAgIHJ1bnRpbWVDYXRhbG9ndWUgICAgICBydW50aW1lQ2F0YWxvZ3VlXG4gICogQHBhcmFtICB7RG9tYWluVVJMfSAgICAgICAgICAgcmVtb3RlUmVnaXN0cnkgICAgICAgIHJlbW90ZVJlZ2lzdHJ5XG4gICovXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIGFwcFNhbmRib3gsIGlkZW50aXR5TW9kdWxlLCBydW50aW1lQ2F0YWxvZ3VlLCByZW1vdGVSZWdpc3RyeSkge1xuXG4gICAgLy8gaG93IHNvbWUgZnVuY3Rpb25zIHJlY2VpdmUgdGhlIHBhcmFtZXRlcnMgZm9yIGV4YW1wbGU6XG4gICAgLy8gbmV3IFJlZ2lzdHJ5KCdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJywgYXBwU2FuZGJveCwgaWRNb2R1bGUsIHJlbW90ZVJlZ2lzdHJ5KTtcbiAgICAvLyByZWdpc3RyeS5yZWdpc3RlclN0dWIoc2FuZGJveCwgJ3NwMScpO1xuICAgIC8vIHJlZ2lzdHJ5LnJlZ2lzdGVySHlwZXJ0eShzYW5kQm94LCAnaHlwZXJ0eS1ydW50aW1lOi8vc3AxLzEyMycpO1xuICAgIC8vIHJlZ2lzdHJ5LnJlc29sdmUoJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnKTtcblxuICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7XG4gICAgLyppZiAoIXJlbW90ZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ3JlbW90ZVJlZ2lzdHJ5IGlzIG1pc3NpbmcnKTsqL1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnJlZ2lzdHJ5VVJMID0gcnVudGltZVVSTCArICcvcmVnaXN0cnkvJztcbiAgICBfdGhpcy5hcHBTYW5kYm94ID0gYXBwU2FuZGJveDtcbiAgICBfdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDtcbiAgICBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlID0gcnVudGltZUNhdGFsb2d1ZTtcbiAgICBfdGhpcy5yZW1vdGVSZWdpc3RyeSA9IHJlbW90ZVJlZ2lzdHJ5O1xuICAgIF90aGlzLmlkTW9kdWxlID0gaWRlbnRpdHlNb2R1bGU7XG4gICAgX3RoaXMuaWRlbnRpZmllciA9IE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkgKyAxKTtcblxuICAgIC8vIHRoZSBleHBpcmVzIGluIDM2MDAsIHJlcHJlc2VudHMgMSBob3VyXG4gICAgLy90aGUgZXhwaXJlcyBpcyBpbiBzZWNvbmRzLCB1bml0IG9mIG1lYXN1cmUgcmVjZWl2ZWQgYnkgdGhlIGRvbWFpbiByZWdpc3RyeVxuICAgIF90aGlzLmV4cGlyZXNUaW1lID0gMzYwMDtcblxuICAgIF90aGlzLmh5cGVydGllc0xpc3RUb1JlbW92ZSA9IHt9O1xuICAgIF90aGlzLmh5cGVydGllc0xpc3QgPSBbXTtcbiAgICBfdGhpcy5wcm90b3N0dWJzTGlzdCA9IHt9O1xuICAgIF90aGlzLmlkcFByb3h5TGlzdCA9IHt9O1xuICAgIF90aGlzLmRhdGFPYmplY3RMaXN0ID0ge307XG4gICAgX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0ID0ge307XG4gICAgX3RoaXMuc2FuZGJveGVzTGlzdCA9IHtzYW5kYm94OiB7fSwgYXBwU2FuZGJveDoge30gfTtcbiAgICBfdGhpcy5wZXBMaXN0ID0ge307XG5cbiAgICBfdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKF90aGlzLnJlZ2lzdHJ5VVJMKS5kb21haW47XG4gICAgX3RoaXMuc2FuZGJveGVzTGlzdC5hcHBTYW5kYm94W3J1bnRpbWVVUkxdID0gYXBwU2FuZGJveDtcbiAgICBsZXQgbXNnRmFjdG9yeSA9IG5ldyBNZXNzYWdlRmFjdG9yeSgnZmFsc2UnLCAne30nKTtcbiAgICBfdGhpcy5tZXNzYWdlRmFjdG9yeSA9IG1zZ0ZhY3Rvcnk7XG4gIH1cblxuICBzZXQgbG9hZGVyKGxvYWRlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX2xvYWRlciA9IGxvYWRlcjtcbiAgfVxuXG4gIGdldCBsb2FkZXIoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX2xvYWRlcjtcbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1cztcbiAgfVxuXG4gIC8qKlxuICAqIFNldCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XG4gICogQHBhcmFtIHtNZXNzYWdlQnVzfSAgICAgICAgICAgbWVzc2FnZUJ1c1xuICAqL1xuICBzZXQgbWVzc2FnZUJ1cyhtZXNzYWdlQnVzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5yZWdpc3RyeVVSTCwgZnVuY3Rpb24obXNnKSB7XG5cbiAgICAgIGxldCB1c2VyVXJsID0gX3RoaXMuX2dldElkZW50aXR5QXNzb2NpYXRlZChtc2cuYm9keS5yZXNvdXJjZSwgbXNnLmJvZHkuY3JpdGVyaWEpO1xuXG4gICAgICBsZXQgcmVwbHkgPSB7aWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgdG86IG1zZy5mcm9tLCBmcm9tOiBtc2cudG8sIGJvZHk6IHtyZXNvdXJjZTogdXNlclVybH19O1xuICAgICAgcmVwbHkuYm9keS5jb2RlID0gKHVzZXJVcmwpID8gMjAwIDogNDA0O1xuXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseSk7XG4gICAgfSk7XG5cbiAgICAvLyBhbHNvIHNldCB1cCBtZXNzYWdlQnVzIGluIHRoZSBJZGVudGl0eU1vZHVsZSBjb21wb25lbnRcbiAgICAvLyBUT0RPIHJlZGVmaW5lIGEgYmV0dGVyIHdheSB0byBhZGQgdGhlIG1lc3NhZ2VCdXMgaW4gdGhlIElkTW9kdWxlXG4gICAgX3RoaXMuaWRNb2R1bGUubWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XG5cbiAgICAvLyBJbnN0YWxsIEFkZHJlc3NBbGxvY2F0aW9uXG4gICAgbGV0IGFkZHJlc3NBbGxvY2F0aW9uID0gbmV3IEFkZHJlc3NBbGxvY2F0aW9uKF90aGlzLnJlZ2lzdHJ5VVJMLCBtZXNzYWdlQnVzKTtcbiAgICBfdGhpcy5hZGRyZXNzQWxsb2NhdGlvbiA9IGFkZHJlc3NBbGxvY2F0aW9uO1xuXG4gICAgLy9JbnN0YWxsIE9iamVjdEFsbG9jYXRpb25cbiAgICBsZXQgb2JqZWN0QWxsb2NhdGlvbiA9IG5ldyBPYmplY3RBbGxvY2F0aW9uKF90aGlzLnJlZ2lzdHJ5VVJMICsgJy9vYmplY3QtYWxsb2NhdGlvbicsIG1lc3NhZ2VCdXMpO1xuICAgIF90aGlzLm9iamVjdEFsbG9jYXRpb24gPSBvYmplY3RBbGxvY2F0aW9uO1xuXG4gICAgLypsZXQgZGlzY292ZXJ5ID0gbmV3IERpc2NvdmVyeShfdGhpcy5yZWdpc3RyeVVSTCwgbWVzc2FnZUJ1cyk7XG4gICAgX3RoaXMuZGlzY292ZXJ5ID0gZGlzY292ZXJ5O1xuXG4gICAgbGV0IGlkZW50aXR5TWFuYWdlciA9IG5ldyBJZGVudGl0eU1hbmFnZXIoJ2h5cGVydHk6Ly9sb2NhbGhvc3QvODMzYTZlNTItNTE1Yi00OThiLWE1N2ItZTNkYWVlY2U0OGQyJywgX3RoaXMucnVudGltZVVSTCwgbWVzc2FnZUJ1cyk7XG4gICAgX3RoaXMuaWRlbnRpdHlNYW5hZ2VyID0gaWRlbnRpdHlNYW5hZ2VyOyovXG4gIH1cblxuICAvKipcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcbiAgKiByZXR1cm4gdGhlIGxhc3QgaHlwZXJ0eSBpbnN0YW5jZSByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyLlxuICAqIEBwYXJhbSAge2VtYWlsfSAgICAgICAgICAgICAgZW1haWxcbiAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXG4gICovXG5cbiAgLy8gVE9ETzogaW1wbGVtZW50IGEgY2FjaGUgc3lzdGVtXG4gIGRpc2NvdmVySHlwZXJ0eVBlclVzZXIoZW1haWwsIGRvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcblxuICAgIGlmICghZG9tYWluKSB7XG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5fZG9tYWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XG4gICAgfVxuXG4gICAgbGV0IGlkZW50aXR5VVJMID0gJ3VzZXI6Ly8nICsgZW1haWwuc3Vic3RyaW5nKGVtYWlsLmluZGV4T2YoJ0AnKSArIDEsIGVtYWlsLmxlbmd0aCkgKyAnLycgKyBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTtcblxuICAgIC8vIG1lc3NhZ2UgdG8gcXVlcnkgZG9tYWluIHJlZ2lzdHJ5LCBhc2tpbmcgZm9yIGEgdXNlciBoeXBlcnR5LlxuICAgIGxldCBtZXNzYWdlID0ge1xuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiBpZGVudGl0eVVSTH1cbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coJ01lc3NhZ2U6ICcsIG1lc3NhZ2UsIGFjdGl2ZURvbWFpbiwgaWRlbnRpdHlVUkwpO1xuXG4gICAgLy9jb25zb2xlLmxvZygnbWVzc2FnZSBSRUFEJywgbWVzc2FnZSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ21lc3NhZ2UgcmVwbHknLCByZXBseSk7XG5cbiAgICAgICAgbGV0IGh5cGVydHk7XG4gICAgICAgIGxldCBtb3N0UmVjZW50O1xuICAgICAgICBsZXQgbGFzdEh5cGVydHk7XG4gICAgICAgIGxldCB2YWx1ZSA9IHJlcGx5LmJvZHkudmFsdWU7XG5cbiAgICAgICAgZm9yIChoeXBlcnR5IGluIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAobW9zdFJlY2VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpO1xuICAgICAgICAgICAgICBsYXN0SHlwZXJ0eSA9IGh5cGVydHk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsZXQgaHlwZXJ0eURhdGUgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpO1xuICAgICAgICAgICAgICBpZiAobW9zdFJlY2VudC5nZXRUaW1lKCkgPCBoeXBlcnR5RGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICBtb3N0UmVjZW50ID0gaHlwZXJ0eURhdGU7XG4gICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0xhc3QgSHlwZXJ0eTogJywgbGFzdEh5cGVydHksIG1vc3RSZWNlbnQpO1xuXG4gICAgICAgIGxldCBoeXBlcnR5VVJMID0gbGFzdEh5cGVydHk7XG5cbiAgICAgICAgaWYgKGh5cGVydHlVUkwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3QoJ1VzZXIgSHlwZXJ0eSBub3QgZm91bmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpZFBhY2thZ2UgPSB7XG4gICAgICAgICAgaWQ6IGVtYWlsLFxuICAgICAgICAgIGRlc2NyaXB0b3I6IHZhbHVlW2h5cGVydHlVUkxdLmRlc2NyaXB0b3IsXG4gICAgICAgICAgaHlwZXJ0eVVSTDogaHlwZXJ0eVVSTFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCc9PT0+IGh5cGVydHlEaXNjb3ZlcnkgbWVzc2FnZUJ1bmRsZTogJywgaWRQYWNrYWdlKTtcbiAgICAgICAgcmVzb2x2ZShpZFBhY2thZ2UpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBfZ2V0SWRlbnRpdHlBc3NvY2lhdGVkKHR5cGUsIGh5cGVydHlVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgZm9yIChsZXQgaHlwZXJ0eSBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICBsZXQgdmFsdWUgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2h5cGVydHldO1xuICAgICAgaWYgKHZhbHVlLl9oeXBlcnR5VVJMID09PSBoeXBlcnR5VVJMKSB7XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3VzZXJuYW1lJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci51c2VybmFtZTtcbiAgICAgICAgICBjYXNlICdjbic6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIuY247XG4gICAgICAgICAgY2FzZSAnbG9jYWxlJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci5sb2NhbGU7XG4gICAgICAgICAgY2FzZSAnYXZhdGFyJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlci5hdmF0YXI7XG4gICAgICAgICAgY2FzZSAndXNlclVSTCc6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIudXNlclVSTDtcbiAgICAgICAgICBjYXNlICcuJzpcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5fdXNlcjtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIC8qKlxuICAqIHF1ZXJ5IHRoZSBkb21haW4gcmVnaXN0cnkgZm9yIGluZm9ybWF0aW9uIGZyb20gYSBkYXRhT2JqZWN0IFVSTFxuICAqIEBwYXJhbSAge1N0cmluZ30gICB1cmwgICAgICAgICAgICBkYXRhT2JqZWN0IFVSTFxuICAqIEByZXR1cm4ge0pTT059ICAgICBkYXRhT2JqZWN0ICAgICBkYXRhIG9iamVjdFxuICAqL1xuICBkaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwodXJsLCBkb21haW4pIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGxldCBhY3RpdmVEb21haW47XG5cbiAgICAgIGlmICghZG9tYWluKSB7XG4gICAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLl9kb21haW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XG4gICAgICB9XG5cbiAgICAgIGxldCBtc2cgPSB7XG4gICAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogdXJsIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XG5cbiAgICAgICAgbGV0IGRhdGFPYmplY3QgPSByZXBseS5ib2R5LnZhbHVlO1xuXG4gICAgICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3Qgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIHJldHVybiB0aGUgc2FuZGJveCBpbnN0YW5jZSB3aGVyZSB0aGUgQXBwbGljYXRpb24gaXMgZXhlY3V0aW5nLiBJdCBpcyBhc3N1bWVkIHRoZXJlIGlzIGp1c3Qgb25lIEFwcCBwZXIgUnVudGltZSBpbnN0YW5jZS5cbiAgKi9cbiAgZ2V0QXBwU2FuZGJveCgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBfdGhpcy5hcHBTYW5kYm94O1xuICB9XG5cbiAgLyoqXG4gICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB1c2VyIGFzc29jaWF0ZWQgdG8gdGhlIGh5cGVydHkgVVJMXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGh5cGVydHlVUkwgICAgICBoeXBlcnR5IFVSTFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICB1c2VyVVJMICAgICAgICAgdXNlciBVUkxcbiAgKi9cbiAgZ2V0SHlwZXJ0eU93bmVyKGh5cGVydHlVUkwpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IHVzZXJVUkw7XG5cbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICBsZXQgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCkge1xuICAgICAgICB1c2VyVVJMID0gaHlwZXJ0eS51c2VyLnVzZXJVUkw7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1c2VyVVJMO1xuICB9XG5cbiAgLyoqXG4gICogcmV0dXJucyB0aGUgaHlwZXJ0eSBOYW1lIGZyb20gYSBnaXZlbiB1cmwuIFRoaXMgdXJsIGNvdWxkIGJlIGZyb20gYSBkYXRhT2JqZWN0IG9yIGh5cGVydHlcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgdXJsICAgICAgaHlwZXJ0eSBvciBkYXRhT2JqZWN0IFVSTFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICBoeXBlcnR5TmFtZSAgICAgaHlwZXJ0eSBOYW1lXG4gICovXG4gIGdldEh5cGVydHlOYW1lKHVybCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgaXNIeXBlcnR5VVJMID0gZGl2aWRlVVJMKHVybCkudHlwZSA9PT0gJ2h5cGVydHknO1xuXG4gICAgLy92YWx1ZSB0byBiZSByZXR1cm5lZCBpbiB0aGUgZW5kXG4gICAgbGV0IGh5cGVydHlOYW1lO1xuXG4gICAgLy9pZiBpcyBub3QgYW4gaHlwZXJ0eSwgY2hlY2sgaWYgaXMgYSBkYXRhT2JqZWN0IGFuZCBvYnRhaW4gaGlzIHJlcG9ydGVyXG4gICAgbGV0IGh5cGVydHlVUkwgPSAoaXNIeXBlcnR5VVJMKSA/IGh5cGVydHlVUkwgPSB1cmwgOiBfdGhpcy5nZXRSZXBvcnRlclVSTFN5bmNob25vdXModXJsKTtcblxuICAgIGZvciAobGV0IGluZGV4IGluIF90aGlzLmh5cGVydGllc0xpc3QpIHtcbiAgICAgIGxldCBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07XG4gICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSBoeXBlcnR5VVJMKSB7XG4gICAgICAgIGh5cGVydHlOYW1lID0gaHlwZXJ0eS5vYmplY3ROYW1lO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGh5cGVydHlOYW1lO1xuICB9XG5cbiAgLyoqXG4gICogZnVuY3Rpb24gdG8gcmV0dXJuIHRoZSByZXBvcnRlclVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIGRhdGFvYmplY3QgVVJMXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkxcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgIHJlcG9ydGVyVVJMICAgICAgcmVwb3J0ZXJVUkxcbiAgKi9cbiAgZ2V0UmVwb3J0ZXJVUkwoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgaWYgKGRhdGFPYmplY3QpIHtcbiAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0LnJlcG9ydGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgnTm8gcmVwb3J0ZXIgd2FzIGZvdW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBmdW5jdGlvbiB0byByZXR1cm4gdGhlIHJlcG9ydGVyVVJMIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGF0YW9iamVjdCBVUkwuIG5vIHByb21pc2UgcmV0dXJuZWRcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdFVSTFxuICAqIEByZXR1cm4gICB7U3RyaW5nfSAgICAgcmVwb3J0ZXJVUkwgICAgICByZXBvcnRlclVSTFxuICAqL1xuICBnZXRSZXBvcnRlclVSTFN5bmNob25vdXMoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdO1xuXG4gICAgcmV0dXJuIChkYXRhT2JqZWN0KSA/IGRhdGFPYmplY3QucmVwb3J0ZXIgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgKiByZXR1cm5zIHRoZSBoeXBlcnR5IFVSTCB0aGF0IHN1YnNjcmliZWQgdGhlIGRhdGFPYmplY3RcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgIHVybCAgICAgICAgICAgIHVybCBmb3JtYXRcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgSHlwZXJ0eSBVUkwgc3Vic2NyaWJlZCB0byB0aGUgVVJMXG4gICovXG4gIGdldERhdGFPYmplY3RTdWJzY3JpYmVySHlwZXJ0eSh1cmwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdFt1cmxdO1xuICB9XG5cbiAgLyoqXG4gICogcmVnaXN0ZXIgYSBkZXNpcmVkIGRhdGFPYmplY3QgdG8gc3Vic2NyaWJlXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIGRhdGFPYmplY3RVUkwgICAgICBkYXRhT2JqZWN0IFVSTFxuICAqL1xuICByZWdpc3RlclN1YnNjcmliZWREYXRhT2JqZWN0KGRhdGFPYmplY3RVUkwsIGh5cGVydHlVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGlmIChfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID0gaHlwZXJ0eVVSTDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gdGhlIGxpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgdXNlcnMgcmVjZWl2ZWQgaW4gdGhlIGNyZWF0aW9uIG9mIGEgZGF0YSBvYmplY3RcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAgICAgICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkxcbiAgKiBAcmV0dXJuICAge0FycmF5PFN0cmluZz59ICAgICBwcmVBdXRoICAgICAgICAgTGlzdCBvZiBwcmUgYXV0aG9yaXNlZCB1c2Vyc1xuICAqL1xuICBnZXRQcmVBdXRoU3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcbiAgICBsZXQgcHJlQXV0aCA9IFtdO1xuXG4gICAgaWYgKGRhdGFPYmplY3QpIHtcbiAgICAgIHByZUF1dGggPSBkYXRhT2JqZWN0LnByZUF1dGg7XG4gICAgfVxuICAgIHJldHVybiBwcmVBdXRoO1xuICB9XG5cbiAgLyoqXG4gICogc2VuZCByZXF1ZXN0cyB0byB1bnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnlcbiAgKiBAcmV0dXJuICAge1Byb21pc2V9ICAgICByZXR1cm4gYSBwcm9taXNlIGlmIHRoZSByZXN1bHQgb2YgdW5yZWdpc3RyYXRpb24gYWxsIGh5cGVydGllc1xuICAqL1xuICB1bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgdW5yZWdpc3RlclJlc3VsdHMgPSBbXTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICAgIGxldCBoeXBlcnR5ID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07XG4gICAgICAgIGxldCByZXN1bHQgPSBfdGhpcy51bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKGh5cGVydHkudXNlci51c2VyVVJMLCBoeXBlcnR5Lmh5cGVydHlVUkwpO1xuICAgICAgICB1bnJlZ2lzdGVyUmVzdWx0cy5wdXNoKHJlc3VsdCk7XG4gICAgICB9XG5cbiAgICAgIFByb21pc2UuYWxsKHVucmVnaXN0ZXJSZXN1bHRzKS50aGVuKCgpID0+IHtcblxuICAgICAgICByZXNvbHZlKCdzdWNjZXNzZnVsbHkgdW5yZWdpc3RlcmVkIGFsbCBoeXBlcnRpZXMnKTtcbiAgICAgIH0sIGVycm9yID0+IHsgcmVqZWN0KGVycm9yKTt9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqICBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIGFuIGh5cGVydHlJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgdXNlciAgICAgICAgdXNlciB1cmxcbiAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICBoeXBlcnR5SW5zdGFuY2UgICBIeXBlcnR5SW5zbnRhbmNlIHVybFxuICAqXG4gICovXG4gIHVucmVnaXN0ZXJIeXBlcnR5SW5zdGFuY2UodXNlciwgaHlwZXJ0eUluc3RhbmNlKSB7XG4gICAgLy9UT0RPIHdvcmtpbmcgYnV0IHRoZSB1c2VyXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBtZXNzYWdlID0geyB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLl9kb21haW4gKyAnLycsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgdmFsdWU6IHt1c2VyOiB1c2VyLCB1cmw6IGh5cGVydHlJbnN0YW5jZSB9fX07XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCd1bnJlZ2lzdGVyIGh5cGVydHkgUmVwbHknLCByZXBseSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIGRhdGFPYmplY3RJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgIG5hbWUgICAgICBEYXRhT2JqZWN0TmFtZVxuICAqL1xuICBkZWxldGVEYXRhT2JqZWN0SW5zdGFuY2UobmFtZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHsgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7IHZhbHVlOiB7bmFtZTogbmFtZX19fTtcblxuICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ3VucmVnaXN0ZXIgZGF0YU9iamVjdCBSZXBseScsIHJlcGx5KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIEZ1bmN0aW9uIHRvIHVwZGF0ZSBhbiBIeXBlcnR5XG4gICovXG4gIHVwZGF0ZUh5cGVydHlJbnN0YW5jZShyZXNvdXJjZSwgdmFsdWUpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IG1lc3NhZ2UgPSB7IHR5cGU6ICdVUERBVEUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgICAgICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbiArICcvJyxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogeyByZXNvdXJjZTogcmVzb3VyY2UsIHZhbHVlOiB2YWx1ZX19O1xuXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdC5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCdVcGRhdGVkIGh5cGVydHkgcmVwbHknLCByZXBseSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiByZWdpc3RlciBhIG5ldyBzdWJzY3JpYmVyIGluIHRoZSBkYXRhT2JqZWN0IHJlZ2lzdGVyZWRcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0IFVSTFxuICAqIEBwYXJhbSAge1N0cmluZ30gICBzdWJzY3JpYmVyVVJMICAgIHN1YnNjcmliZXIgVVJMXG4gICovXG4gIHJlZ2lzdGVyU3Vic2NyaWJlcihkYXRhT2JqZWN0VVJMLCBzdWJzY3JpYmVyVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgZGF0YU9iamVjdCA9IF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdO1xuXG4gICAgaWYgKGRhdGFPYmplY3QpIHtcbiAgICAgIGRhdGFPYmplY3Quc3Vic2NyaWJlcnMucHVzaChzdWJzY3JpYmVyVVJMKTtcbiAgICAgIF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID0gZGF0YU9iamVjdDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBnZXQgdGhlIHN1YnNjcmliZXJzIHJlZ2lzdGVyZWQgd2l0aGluIGEgZGF0YU9iamVjdFxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0IFVSTFxuICAqIEBwYXJhbSAge0FycmF5PFN0cmluZz59ICAgU3Vic3RyaWJlcnMgTGlzdFxuICAqL1xuICBnZXREYXRhT2JqZWN0U3Vic2NyaWJlcnMoZGF0YU9iamVjdFVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICByZXR1cm4gZGF0YU9iamVjdC5zdWJzY3JpYmVycztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ05vIGRhdGFPYmplY3Qgd2FzIGZvdW5kJztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgKiBUbyByZWdpc3RlciBhIG5ldyBEYXRhIE9iamVjdCBpbiB0aGUgcnVudGltZSB3aGljaCByZXR1cm5zIHRoZSBkYXRhT2JqZWN0VVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IERhdGEgT2JqZWN0LlxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBpZGVudGlmaWVyICAgICAgICAgICAgICAgICAgaWRlbnRpZmllclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBkYXRhT2JqZWN0c2NoZW1hICAgICAgICAgICAgZGF0YU9iamVjdHNjaGVtYVxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICBkYXRhT2JqZWN0VXJsICAgICAgICAgICAgICAgZGF0YU9iamVjdFVybFxuICAqIEBwYXJhbSB7U3RyaW5nfSAgICAgIGRhdGFPYmplY3RSZXBvcnRlciAgICAgICAgICAgZGF0YU9iamVjdFJlcG9ydGVyXG4gICogQHBhcmFtICB7QXJyYXl9ICAgICByZXNvdXJjZXMgICAgICAgICAgICAgICAgICAgICBkYXRhT2JqZWN0IHJlc291cmNlc1xuICAqIEBwYXJhbSAge0FycmF5fSAgICAgYXV0aG9yaXNlICAgICAgICAgICAgICAgICAgICAgbGlzdCBvZiBwcmUgYXV0aG9yaXNlZCBhdXRob3Jpc2VkIElEc1xuICAqL1xuICByZWdpc3RlckRhdGFPYmplY3QoaWRlbnRpZmllciwgZGF0YU9iamVjdHNjaGVtYSwgZGF0YU9iamVjdFVybCwgZGF0YU9iamVjdFJlcG9ydGVyLCByZXNvdXJjZXMsIGF1dGhvcmlzZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGxldCBkYXRhU2NoZW1lID0gW107XG4gICAgICBsZXQgZmlsdGVyZWREYXRhU2NoZW1lID0gZGF0YU9iamVjdFVybC5zcGxpdCgnOicpO1xuICAgICAgZGF0YVNjaGVtZS5wdXNoKGZpbHRlcmVkRGF0YVNjaGVtZVswXSk7XG5cbiAgICAgIC8vbWVzc2FnZSB0byByZWdpc3RlciB0aGUgbmV3IGh5cGVydHksIHdpdGhpbiB0aGUgZG9tYWluIHJlZ2lzdHJ5XG4gICAgICBsZXQgbWVzc2FnZVZhbHVlID0ge25hbWU6IGlkZW50aWZpZXIsIHJlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogZGF0YVNjaGVtZSwgc2NoZW1hOiBkYXRhT2JqZWN0c2NoZW1hLCB1cmw6IGRhdGFPYmplY3RVcmwsIGV4cGlyZXM6IF90aGlzLmV4cGlyZXNUaW1lLCByZXBvcnRlcjogZGF0YU9iamVjdFJlcG9ydGVyLCBwcmVBdXRoOiBhdXRob3Jpc2UsIHN1YnNjcmliZXJzOiBbXX07XG5cbiAgICAgIF90aGlzLmRhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVcmxdID0gbWVzc2FnZVZhbHVlO1xuXG4gICAgICAvKmxldCBtZXNzYWdlID0gX3RoaXMubWVzc2FnZUZhY3RvcnkuY3JlYXRlQ3JlYXRlTWVzc2FnZVJlcXVlc3QoXG4gICAgICAgIF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLFxuICAgICAgICBtZXNzYWdlVmFsdWUsXG4gICAgICAgICdwb2xpY3knXG4gICAgICApOyovXG5cbiAgICAgIGxldCBtZXNzYWdlID0ge3R5cGU6J2NyZWF0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJywgYm9keToge3ZhbHVlOiBtZXNzYWdlVmFsdWUsIHBvbGljeTogJ3BvbGljeSd9fTtcblxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCc9PT0+IHJlZ2lzdGVyRGF0YU9iamVjdCBSZXBseTogJywgcmVwbHkpO1xuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICByZXNvbHZlKCdvaycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gcmVnaXN0ZXIgRGF0YU9iamVjdCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogVG8gcmVnaXN0ZXIgYSBuZXcgSHlwZXJ0eSBpbiB0aGUgcnVudGltZSB3aGljaCByZXR1cm5zIHRoZSBIeXBlcnR5VVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IEh5cGVydHkuXG4gICogQHBhcmFtICB7U2FuZGJveH0gICAgICAgICAgICAgc2FuZGJveCAgICAgICAgICAgICAgIHNhbmRib3hcbiAgKiBAcGFyYW0gIHtIeXBlcnR5Q2F0YWxvZ3VlVVJMfSBIeXBlcnR5Q2F0YWxvZ3VlVVJMICAgZGVzY3JpcHRvclxuICAqIEByZXR1cm4ge0h5cGVydHlVUkx9ICAgICAgICAgIEh5cGVydHlVUkxcbiAgKi9cbiAgcmVnaXN0ZXJIeXBlcnR5KHNhbmRib3gsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICAvL2Fzc3VtaW5nIGRlc2NyaXB0b3IgY29tZSBpbiB0aGlzIGZvcm1hdCwgdGhlIHNlcnZpY2UtcHJvdmlkZXItZG9tYWluIHVybCBpcyByZXRyaWV2ZWQgYnkgYSBzcGxpdCBpbnN0cnVjdGlvblxuICAgICAgLy9oeXBlcnR5LWNhdGFsb2d1ZTovLzxzZXJ2aWNlLXByb3ZpZGVyLWRvbWFpbj4vPGNhdGFsb2d1ZS1vYmplY3QtaWRlbnRpZmllcj5cbiAgICAgIGxldCBkb21haW5VcmwgPSBkaXZpZGVVUkwoZGVzY3JpcHRvclVSTCkuZG9tYWluO1xuXG4gICAgICBpZiAoZG9tYWluVXJsLmluY2x1ZGVzKCdjYXRhbG9ndWUnKSkge1xuICAgICAgICBkb21haW5VcmwgPSBkb21haW5VcmwucmVwbGFjZSgnY2F0YWxvZ3VlLicsICcnKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuaWRNb2R1bGUuZ2V0SWRlbnRpdHlBc3NlcnRpb24oKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBsZXQgdXNlclByb2ZpbGUgPSByZXN1bHQudXNlclByb2ZpbGU7XG4gICAgICAgIGxldCBpZGVudGl0eVVSTCA9IHVzZXJQcm9maWxlLnVzZXJVUkw7XG5cbiAgICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vY2FsbCBjaGVjayBpZiB0aGUgcHJvdG9zdHViIGV4aXN0XG4gICAgICAgICAgX3RoaXMucmVzb2x2ZSgnaHlwZXJ0eS1ydW50aW1lOi8vJyArIGRvbWFpblVybCkudGhlbihmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgX3RoaXMucmVnaXN0cnlEb21haW4gPSBkb21haW5Vcmw7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBpbXBsZW1lbnRlZCB3aXRoIGFkZHJlc3NlcyBwb2xsXG4gICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2Ugd2Ugd2lsbCByZXF1ZXN0IGFuZCByZXR1cm4gb25seSBvbmVcbiAgICAgICAgICAgIC8vIGFkZHJlc3NcbiAgICAgICAgICAgIGxldCBudW1iZXJPZkFkZHJlc3NlcyA9IDE7XG4gICAgICAgICAgICBfdGhpcy5hZGRyZXNzQWxsb2NhdGlvbi5jcmVhdGUoZG9tYWluVXJsLCBudW1iZXJPZkFkZHJlc3NlcykudGhlbihmdW5jdGlvbihhZGRlcmVzc0xpc3QpIHtcblxuICAgICAgICAgICAgICBhZGRlcmVzc0xpc3QuZm9yRWFjaChmdW5jdGlvbihhZGRyZXNzKSB7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihhZGRyZXNzICsgJy9zdGF0dXMnLCAobXNnKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTWVzc2FnZSBhZGRMaXN0ZW5lciBmb3IgOiAnLCBhZGRyZXNzICsgJy9zdGF0dXMgLT4gJyAgKyBtc2cpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIC8vY2hlY2sgd2hldGhlciB0aGUgcmVjZWl2ZWQgc2FuYm94IGUgQXBwbGljYXRpb25TYW5kYm94IG9yIGEgbm9ybWFsIHNhbmRib3hcbiAgICAgICAgICAgICAgaWYgKHNhbmRib3gudHlwZSA9PT0gJ2FwcCcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LmFwcFNhbmRib3hbYWRkZXJlc3NMaXN0WzBdXSA9IHNhbmRib3g7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2FuZGJveC50eXBlID09PSAnbm9ybWFsJykge1xuICAgICAgICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFthZGRlcmVzc0xpc3RbMF1dID0gc2FuZGJveDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QoJ1dyb25nIFNhbmRib3hUeXBlJyk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBsZXQgcmVzb3VyY2VzO1xuXG4gICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBoeXBlcnR5IHJlc291cmNlcyBpcyBhIHZlY3RvciBvciBhIHN0cmluZ1xuICAgICAgICAgICAgICAvLyBUT0RPIGRlbGV0ZSBsYXRlciB3aGVuIGNhdGFsb2d1ZSBpcyBmaXhlZFxuICAgICAgICAgICAgICBpZiAodHlwZW9mIChkZXNjcmlwdG9yLmh5cGVydHlUeXBlKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZXMgPSBbXTtcbiAgICAgICAgICAgICAgICByZXNvdXJjZXMucHVzaChkZXNjcmlwdG9yLmh5cGVydHlUeXBlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNvdXJjZXMgPSBkZXNjcmlwdG9yLmh5cGVydHlUeXBlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgbGV0IGRlc2NyaXB0b3JEYXRhU2NoZW1hID0gZGVzY3JpcHRvci5kYXRhT2JqZWN0cztcbiAgICAgICAgICAgICAgbGV0IGRhdGFTY2hlbWFzQXJyYXkgPSBbXTtcblxuICAgICAgICAgICAgICAvL3RoaXMgd2lsbCBjcmVhdGUgYSBhcnJheSB3aXRoIGEgUHJvbWlzZSBpbiBlYWNoIHBvc2l0aW9uXG4gICAgICAgICAgICAgIGZvciAobGV0IGluZGV4IGluIGRlc2NyaXB0b3JEYXRhU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgZGF0YVNjaGVtYXNBcnJheS5wdXNoKF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3IoZGVzY3JpcHRvckRhdGFTY2hlbWFbaW5kZXhdKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvLyBhcyBzb29uIGFzIHRoZSBwcmV2aW91cyBhcnJheSBpcyBjb21wbGV0ZWQsIHRoaXMgd2lsbCB3YWl0IGZvciB0aGUgcmVzb2x2ZSBvZiBhbGwgcHJvbWlzZXMgaW4gdGhlIGFycmF5XG4gICAgICAgICAgICAgIFByb21pc2UuYWxsKGRhdGFTY2hlbWFzQXJyYXkpLnRoZW4oZnVuY3Rpb24oZGF0YVNjaGVtYXMpIHtcblxuICAgICAgICAgICAgICAgIGxldCBmaWx0ZXJlZERhdGFTY2hlbWFzID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggaW4gZGF0YVNjaGVtYXMpIHtcbiAgICAgICAgICAgICAgICAgIGxldCBkYXRhU2NoZW1hID0gZGF0YVNjaGVtYXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgZmlsdGVyZWREYXRhU2NoZW1hcy5wdXNoKGRhdGFTY2hlbWEuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXMuc2NoZW1lLmNvbnN0YW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgaHlwZXJ0eSA9IG5ldyBIeXBlcnR5SW5zdGFuY2UoX3RoaXMuaWRlbnRpZmllciwgX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvclVSTCwgZGVzY3JpcHRvciwgYWRkZXJlc3NMaXN0WzBdLCB1c2VyUHJvZmlsZSk7XG5cbiAgICAgICAgICAgICAgICBoeXBlcnR5Ll9yZXNvdXJjZXMgPSByZXNvdXJjZXM7XG4gICAgICAgICAgICAgICAgaHlwZXJ0eS5fZGF0YVNjaGVtZXMgPSBmaWx0ZXJlZERhdGFTY2hlbWFzO1xuICAgICAgICAgICAgICAgIF90aGlzLmh5cGVydGllc0xpc3QucHVzaChoeXBlcnR5KTtcblxuICAgICAgICAgICAgICAgIC8vbWVzc2FnZSB0byByZWdpc3RlciB0aGUgbmV3IGh5cGVydHksIHdpdGhpbiB0aGUgZG9tYWluIHJlZ2lzdHJ5XG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2VWYWx1ZSA9IHt1c2VyOiBpZGVudGl0eVVSTCwgIGRlc2NyaXB0b3I6IGRlc2NyaXB0b3JVUkwsIHVybDogYWRkZXJlc3NMaXN0WzBdLCBleHBpcmVzOiBfdGhpcy5leHBpcmVzVGltZSwgcmVzb3VyY2VzOiByZXNvdXJjZXMsIGRhdGFTY2hlbWVzOiBmaWx0ZXJlZERhdGFTY2hlbWFzfTtcblxuICAgICAgICAgICAgICAgIC8qbGV0IG1lc3NhZ2UgPSBfdGhpcy5tZXNzYWdlRmFjdG9yeS5jcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdChcbiAgICAgICAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgICAgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJyxcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2VWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICdwb2xpY3knXG4gICAgICAgICAgICAgICAgKTsqL1xuXG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSB7dHlwZTonY3JlYXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLCBib2R5OiB7dmFsdWU6IG1lc3NhZ2VWYWx1ZSwgcG9saWN5OiAncG9saWN5J319O1xuXG4gICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnPT09PiBSZWdpc3Rlckh5cGVydHkgUmVwbHk6ICcsIHJlcGx5KTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYWRkZXJlc3NMaXN0WzBdKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgnRmFpbGVkIHRvIHJlZ2lzdGVyIGFuIEh5cGVydHknKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIC8vdGltZXIgdG8ga2VlcCB0aGUgcmVnaXN0cmF0aW9uIGFsaXZlXG4gICAgICAgICAgICAgICAgLy8gdGhlIHRpbWUgaXMgZGVmaW5lZCBieSBhIGxpdHRsZSBsZXNzIHRoYW4gaGFsZiBvZiB0aGUgZXhwaXJlcyB0aW1lIGRlZmluZWRcbiAgICAgICAgICAgICAgICBsZXQga2VlcEFsaXZlVGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgLypsZXQgbWVzc2FnZSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5LmNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KFxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgICAgICAgICAgICAgJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5yZWdpc3RyeURvbWFpbiArICcvJyxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAncG9saWN5J1xuICAgICAgICAgICAgICAgICAgKTsqL1xuICAgICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSB7dHlwZTonY3JlYXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLCBib2R5OiB7dmFsdWU6IG1lc3NhZ2VWYWx1ZSwgcG9saWN5OiAncG9saWN5J319O1xuXG4gICAgICAgICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJz09PT4gS2VlcEFsaXZlIFJlcGx5OiAnLCByZXBseSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCgoKF90aGlzLmV4cGlyZXNUaW1lIC8gMS4xKSAvIDIpICogMTAwMCkpO1xuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0h5cGVydHkgU2NoZW1hcycsIGZpbHRlcmVkRGF0YVNjaGVtYXMpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdIeXBlcnR5IHJlc291cmNlcycsIHJlc291cmNlcyk7XG5cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQWRkcmVzcyBSZWFzb246ICcsIHJlYXNvbik7XG4gICAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICByZWplY3QoJ0ZhaWxlZCB0byBvYnRhaW4gYW4gaWRlbnRpdHknKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIEh5cGVydHlcbiAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMIHVybCAgICAgICAgdXJsXG4gICovXG4gIHVucmVnaXN0ZXJIeXBlcnR5KHVybCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGZvdW5kID0gZmFsc2U7XG4gICAgICBsZXQgaW5kZXggPSAwO1xuXG4gICAgICBmb3JcdChpbmRleCA9IDA7IGluZGV4IDwgX3RoaXMuaHlwZXJ0aWVzTGlzdC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgbGV0IGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTtcbiAgICAgICAgaWYgKGh5cGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlVUkwgPT09IHVybCkge1xuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3VuZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmVqZWN0KCdIeXBlcnR5IG5vdCBmb3VuZCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuICAgICAgICByZXNvbHZlKCdIeXBlcnR5IHN1Y2Nlc3NmdWxseSBkZWxldGVkJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIGRpc2NvdmVyIHByb3RvY29sIHN0dWJzIGF2YWlsYWJsZSBpbiB0aGUgcnVudGltZSBmb3IgYSBjZXJ0YWluIGRvbWFpbi4gSWYgYXZhaWxhYmxlLCBpdCByZXR1cm5zIHRoZSBydW50aW1lIHVybCBmb3IgdGhlIHByb3RvY29sIHN0dWIgdGhhdCBjb25uZWN0cyB0byB0aGUgcmVxdWVzdGVkIGRvbWFpbi4gUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgQlVTIHRvIHJvdXRlIG1lc3NhZ2VzIHRvIHJlbW90ZSBzZXJ2ZXJzIG9yIHBlZXJzIChkbyB3ZSBuZWVkIHNvbWV0aGluZyBzaW1pbGFyIGZvciBIeXBlcnRpZXM/KS5cbiAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICAgICAgICBEb21haW5VUkwgICAgICAgICAgICB1cmxcbiAgKiBAcmV0dXJuIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTFxuICAqL1xuICBkaXNjb3ZlclByb3Rvc3R1Yih1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodXJsKTtcbiAgICAgIGxldCBkb21haW5VUkwgPSBkaXZpZGVkVVJMLmRvbWFpbjtcblxuICAgICAgaWYgKF90aGlzLnByb3Rvc3R1YnNMaXN0Lmhhc093blByb3BlcnR5KGRvbWFpblVSTCkgJiYgX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5ERVBMT1lFRCkge1xuICAgICAgICByZXNvbHZlKF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVVJMXSA9IHtcbiAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5QUk9HUkVTU1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlamVjdCgncmVxdWVzdFVwZGF0ZSBjb3VsZG5cXCd0IGdldCB0aGUgUHJvdG9zdHViVVJMJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBUbyByZWdpc3RlciBhIG5ldyBQcm90b2NvbCBTdHViIGluIHRoZSBydW50aW1lIGluY2x1ZGluZyBhcyBpbnB1dCBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbiB0byBwb3N0TWVzc2FnZSwgdGhlIERvbWFpblVSTCB0aGF0IGlzIGNvbm5lY3RlZCB3aXRoIHRoZSBzdHViLCB3aGljaCByZXR1cm5zIHRoZSBSdW50aW1lVVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IFByb3RvY29sU3R1Yi5cbiAgICogQHBhcmFtIHtTYW5kYm94fSAgICAgICAgU2FuZGJveFxuICAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICBEb21haW5VUkwgc2VydmljZSBwcm92aWRlciBkb21haW5cbiAgICogQHJldHVybiB7UnVudGltZVByb3RvU3R1YlVSTH1cbiAgICovXG4gIHJlZ2lzdGVyU3R1YihzYW5kYm94LCBkb21haW5VUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIGxldCBydW50aW1lUHJvdG9TdHViVVJMO1xuXG4gICAgICAvL2NoZWNrIGlmIG1lc3NhZ2VCdXMgaXMgcmVnaXN0ZXJlZCBpbiByZWdpc3RyeSBvciBub3RcbiAgICAgIGlmIChfdGhpcy5fbWVzc2FnZUJ1cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlamVjdCgnTWVzc2FnZUJ1cyBub3QgZm91bmQgb24gcmVnaXN0ZXJTdHViJyk7XG4gICAgICB9XG5cbiAgICAgIC8vVE9ETyBpbXBsZW1lbnQgYSB1bmlxdWUgbnVtYmVyIGZvciB0aGUgcHJvdG9zdHViVVJMXG4gICAgICBpZiAoIWRvbWFpblVSTC5pbmRleE9mKCdtc2ctbm9kZS4nKSkge1xuICAgICAgICBkb21haW5VUkwgPSBkb21haW5VUkwuc3Vic3RyaW5nKGRvbWFpblVSTC5pbmRleE9mKCcuJykgKyAxKTtcbiAgICAgIH1cblxuICAgICAgcnVudGltZVByb3RvU3R1YlVSTCA9ICdtc2ctbm9kZS4nICsgZG9tYWluVVJMICsgJy9wcm90b3N0dWIvJyArIE1hdGguZmxvb3IoKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkgKyAxKTtcblxuICAgICAgLy8gVE9ETzogT3B0aW1pemUgdGhpc1xuICAgICAgLy8gUHJveHk7XG4gICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VUkxdID0ge1xuICAgICAgICB1cmw6IHJ1bnRpbWVQcm90b1N0dWJVUkwsXG4gICAgICAgIHN0YXR1czogU1RBVFVTLkRFUExPWUVEXG4gICAgICB9O1xuXG4gICAgICAvLyBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VUkxdID0gcnVudGltZVByb3RvU3R1YlVSTDtcbiAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtydW50aW1lUHJvdG9TdHViVVJMXSA9IHNhbmRib3g7XG5cbiAgICAgIC8vIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgIC8vICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgIC8vIH0pO1xuXG4gICAgICByZXNvbHZlKHJ1bnRpbWVQcm90b1N0dWJVUkwpO1xuXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLCAobXNnKSA9PiB7XG4gICAgICAgIGlmIChtc2cucmVzb3VyY2UgPT09IG1zZy50byArICcvc3RhdHVzJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdSdW50aW1lUHJvdG9zdHViVVJML3N0YXR1cyBtZXNzYWdlOiAnLCBtc2cuYm9keS52YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyB1bnJlZ2lzdGVyIGEgcHJldmlvdXNseSByZWdpc3RlcmVkIHByb3RvY29sIHN0dWJcbiAgKiBAcGFyYW0gIHtIeXBlcnR5UnVudGltZVVSTH0gICBIeXBlcnR5UnVudGltZVVSTCAgICAgaHlwZXJ0eVJ1bnRpbWVVUkxcbiAgKi9cbiAgdW5yZWdpc3RlclN0dWIoaHlwZXJ0eVJ1bnRpbWVVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBpZiAoX3RoaXMucHJvdG9zdHVic0xpc3QuaGFzT3duUHJvcGVydHkoaHlwZXJ0eVJ1bnRpbWVVUkwpKSB7XG4gICAgICAgIGRlbGV0ZSBfdGhpcy5wcm90b3N0dWJzTGlzdFtoeXBlcnR5UnVudGltZVVSTF07XG4gICAgICAgIHJlc29sdmUoJ1Byb3Rvc3R1YlVSTCByZW1vdmVkJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoJ0Vycm9yIG9uIHVucmVnaXN0ZXJTdHViOiBIeXBlcnR5IG5vdCBmb3VuZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvIHJlZ2lzdGVyIGEgbmV3IElkZW50aXR5IFByb3ZpZGVyIHByb3h5IGluIHRoZSBydW50aW1lIGluY2x1ZGluZyBhcyBpbnB1dCBwYXJhbWV0ZXJzIHRoZSBmdW5jdGlvbiB0byBwb3N0TWVzc2FnZSwgdGhlIERvbWFpblVSTCB0aGF0IGlzIGNvbm5lY3RlZCB3aXRoIHRoZSBzdHViLCB3aGljaCByZXR1cm5zIHRoZSBSdW50aW1lVVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IFByb3RvY29sU3R1Yi5cbiAgICogQHBhcmFtIHtTYW5kYm94fSAgICAgICAgU2FuZGJveFxuICAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICBEb21haW5VUkwgc2VydmljZSBwcm92aWRlciBkb21haW5cbiAgICogQHJldHVybiB7UnVudGltZUlkcFByb3h5VVJMfVxuICAgKi9cbiAgcmVnaXN0ZXJJZHBQcm94eShzYW5kYm94LCBkb21haW5VUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIGxldCBpZHBQcm94eVN0dWJVUkw7XG5cbiAgICAgIC8vY2hlY2sgaWYgbWVzc2FnZUJ1cyBpcyByZWdpc3RlcmVkIGluIHJlZ2lzdHJ5IG9yIG5vdFxuICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVqZWN0KCdNZXNzYWdlQnVzIG5vdCBmb3VuZCBvbiByZWdpc3RlclN0dWInKTtcbiAgICAgIH1cblxuICAgICAgaWRwUHJveHlTdHViVVJMID0gJ2RvbWFpbi1pZHA6Ly8nICsgZG9tYWluVVJMICsgJy9zdHViLycgKyBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMTAwMDApICsgMSk7XG5cbiAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXNcbiAgICAgIF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VUkxdID0ge1xuICAgICAgICB1cmw6IGlkcFByb3h5U3R1YlVSTCxcbiAgICAgICAgc3RhdHVzOiBTVEFUVVMuUFJPR1JFU1NcbiAgICAgIH07XG5cbiAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtpZHBQcm94eVN0dWJVUkxdID0gc2FuZGJveDtcblxuICAgICAgLy8gc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIGZ1bmN0aW9uKG1zZykge1xuICAgICAgLy8gICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgLy8gfSk7XG5cbiAgICAgIHJlc29sdmUoaWRwUHJveHlTdHViVVJMKTtcblxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoaWRwUHJveHlTdHViVVJMICsgJy9zdGF0dXMnLCAobXNnKSA9PiB7XG4gICAgICAgIGlmIChtc2cucmVzb3VyY2UgPT09IG1zZy50byArICcvc3RhdHVzJykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdpZHBQcm94eVN0dWJVUkwvc3RhdHVzIG1lc3NhZ2U6ICcsIG1zZy5ib2R5LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyBkaXNjb3ZlciBpZHBQcm94eSBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBpZHBQcm94eSBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVyc1xuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIERvbWFpblVSTCAgICAgICAgICAgIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMICAgICAgICAgaWRwUHJveHlVcmxcbiAgKi9cbiAgZGlzY292ZXJJZHBQcm94eSh1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKHVybCk7XG4gICAgICBsZXQgZG9tYWluVVJMID0gZGl2aWRlZFVSTC5kb21haW47XG5cbiAgICAgIGlmIChfdGhpcy5pZHBQcm94eUxpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVVJMKSAmJiBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5ERVBMT1lFRCkge1xuICAgICAgICByZXNvbHZlKF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VUkxdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IE9wdGltaXplIHRoaXNcbiAgICAgICAgX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVSTF0gPSB7XG4gICAgICAgICAgc3RhdHVzOiBTVEFUVVMuUFJPR1JFU1NcbiAgICAgICAgfTtcbiAgICAgICAgcmVqZWN0KCdyZXF1ZXN0VXBkYXRlIGNvdWxkblxcJ3QgZ2V0IHRoZSBpZHBQcm94eVVSTCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyByZWdpc3RlciBhIG5ldyBQb2xpY3kgRW5mb3JjZXIgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgSHlwZXJ0eVVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIFBFUCwgd2hpY2ggcmV0dXJucyB0aGUgUnVudGltZVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBQb2xpY3kgRW5mb3JjZXIgY29tcG9uZW50LlxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gcG9zdE1lc3NhZ2UgcG9zdE1lc3NhZ2VcbiAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMICAgICAgICAgICAgaHlwZXJ0eVxuICAqIEByZXR1cm4ge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMXG4gICovXG4gIHJlZ2lzdGVyUEVQKHBvc3RNZXNzYWdlLCBoeXBlcnR5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuICAgICAgLy9UT0RPIGNoZWNrIHdoYXQgcGFyYW1ldGVyIGluIHRoZSBwb3N0TWVzc2FnZSB0aGUgcGVwIGlzLlxuICAgICAgX3RoaXMucGVwTGlzdFtoeXBlcnR5XSA9IHBvc3RNZXNzYWdlO1xuICAgICAgcmVzb2x2ZSgnUEVQIHJlZ2lzdGVyZWQgd2l0aCBzdWNjZXNzJyk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1YlxuICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMICAgICBIeXBlcnR5UnVudGltZVVSTFxuICAqL1xuICB1bnJlZ2lzdGVyUEVQKEh5cGVydHlSdW50aW1lVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBsZXQgcmVzdWx0ID0gX3RoaXMucGVwTGlzdFtIeXBlcnR5UnVudGltZVVSTF07XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWplY3QoJ1BlcCBOb3QgZm91bmQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCdQRVAgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQuJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIHJlY2VpdmUgc3RhdHVzIGV2ZW50cyBmcm9tIGNvbXBvbmVudHMgcmVnaXN0ZXJlZCBpbiB0aGUgUmVnaXN0cnkuXG4gICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSAgICAgTWVzc2FnZS5NZXNzYWdlICAgICAgIGV2ZW50XG4gICovXG4gIG9uRXZlbnQoZXZlbnQpIHtcbiAgICAvLyBUT0RPIGJvZHkuLi5cbiAgICBjb25zb2xlLmxvZygnb25FdmVudCcpO1xuICB9XG5cbiAgLyoqXG4gICogVG8gZGlzY292ZXIgc2FuZGJveGVzIGF2YWlsYWJsZSBpbiB0aGUgcnVudGltZSBmb3IgYSBjZXJ0YWluIGRvbWFpbi4gUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgVUEgdG8gYXZvaWQgbW9yZSB0aGFuIG9uZSBzYW5kYm94IGZvciB0aGUgc2FtZSBkb21haW4uXG4gICogQHBhcmFtICB7RG9tYWluVVJMfSBEb21haW5VUkwgdXJsXG4gICogQHJldHVybiB7UnVudGltZVNhbmRib3h9ICAgICAgICAgICBSdW50aW1lU2FuZGJveFxuICAqL1xuICBnZXRTYW5kYm94KHVybCkge1xuICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciB1cmwgbmVlZGVkJyk7XG4gICAgY29uc29sZS5sb2coJ2dldFNhbmRib3g6ICcsIHVybCk7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBsZXQgcmVxdWVzdDtcblxuICAgICAgLy9maXJzdCB0cnkgdG8gZmluZCB0aGUgdXJsIGluIHRoZSBhcHBTYW5kYm94IGxpc3RcbiAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LmFwcFNhbmRib3hbdXJsXTtcblxuICAgICAgLy9pZiBubyBhcHBTYW5kYm94IHdhcyBmb3VuZCwgdHJ5IHRvIHNlYXJjaCBpbiB0aGUgbm9ybWFsIHNhbmRib3hlcyBsaXN0XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmVxdWVzdCA9IF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFt1cmxdO1xuXG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuXG4gICAgICAgICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTCh1cmwpLmRvbWFpbjtcblxuICAgICAgICAgIC8vIHNlYXJjaCBpbiB0aGUgc2FuZGJveGVzIGxpc3QgZm9yIGEgZW50cnkgY29udGFpbmluZyB0aGUgZG9tYWluIGdpdmVuXG4gICAgICAgICAgZm9yIChsZXQgc2FuZGJveCBpbiBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3gpIHtcbiAgICAgICAgICAgIGlmIChzYW5kYm94LmluY2x1ZGVzKGRvbWFpbikpIHtcbiAgICAgICAgICAgICAgcmVxdWVzdCA9IF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtzYW5kYm94XTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZWplY3QoJ25vIHNhbmRib3ggZm91bmQgZm9yOiAnICsgdXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUocmVxdWVzdCk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFRvIHZlcmlmeSBpZiBzb3VyY2UgaXMgdmFsaWQgYW5kIHRvIHJlc29sdmUgdGFyZ2V0IHJ1bnRpbWUgdXJsIGFkZHJlc3MgaWYgbmVlZGVkIChlZyBwcm90b3N0dWIgcnVudGltZSB1cmwgaW4gY2FzZSB0aGUgbWVzc2FnZSBpcyB0byBiZSBkaXNwYXRjaGVkIHRvIGEgcmVtb3RlIGVuZHBvaW50KS5cbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgdXJsICAgICAgIHVybFxuICAqIEByZXR1cm4ge1Byb21pc2U8VVJMLlVSTD59ICAgICAgICAgICAgICAgICBQcm9taXNlIDxVUkwuVVJMPlxuICAqL1xuICByZXNvbHZlKHVybCkge1xuICAgIGNvbnNvbGUubG9nKCdyZXNvbHZlICcgKyB1cmwpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAvL3NwbGl0IHRoZSB1cmwgdG8gZmluZCB0aGUgZG9tYWluVVJMLiBkZWFscyB3aXRoIHRoZSB1cmwgZm9yIGV4YW1wbGUgYXM6XG4gICAgICAvL1wiaHlwZXJ0eS1ydW50aW1lOi8vc3AxL3Byb3Rvc3R1Yi8xMjNcIixcbiAgICAgIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKHVybCk7XG4gICAgICBsZXQgZG9tYWluVXJsID0gZGl2aWRlZFVSTC5kb21haW47XG4gICAgICBsZXQgdHlwZSA9IGRpdmlkZWRVUkwudHlwZTtcblxuICAgICAgLy8gcmVzb2x2ZSB0aGUgZG9tYWluIHByb3Rvc3R1YiBpbiBjYXNlIG9mIGEgbWVzc2FnZSB0byBnbG9iYWwgcmVnaXN0cnlcbiAgICAgIGlmICh1cmwuaW5jbHVkZXMoJ2dsb2JhbDovL3JlZ2lzdHJ5JykpIHtcbiAgICAgICAgZG9tYWluVXJsID0gX3RoaXMuX2RvbWFpbjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkb21haW5VcmwuaW5kZXhPZignbXNnLW5vZGUuJykgfHwgIWRvbWFpblVybC5pbmRleE9mKCdyZWdpc3RyeS4nKSkge1xuICAgICAgICBkb21haW5VcmwgPSBkb21haW5Vcmwuc3Vic3RyaW5nKGRvbWFpblVybC5pbmRleE9mKCcuJykgKyAxKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJlZ2lzdHJlZENvbXBvbmVudDtcbiAgICAgIGlmICh0eXBlID09PSAnZG9tYWluLWlkcCcpIHtcbiAgICAgICAgcmVnaXN0cmVkQ29tcG9uZW50ICA9IF90aGlzLmlkcFByb3h5TGlzdC5oYXNPd25Qcm9wZXJ0eShkb21haW5VcmwpID8gX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVybF0gOiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZ2lzdHJlZENvbXBvbmVudCAgPSBfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShkb21haW5VcmwpID8gX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVXJsXSA6IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVnaXN0cmVkQ29tcG9uZW50ICYmIHJlZ2lzdHJlZENvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgnc3RhdHVzJykgJiYgcmVnaXN0cmVkQ29tcG9uZW50LnN0YXR1cyA9PT0gU1RBVFVTLkRFUExPWUVEKSB7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnUmVzb2x2ZWQ6ICcsIHJlZ2lzdHJlZENvbXBvbmVudC51cmwpO1xuICAgICAgICByZXNvbHZlKHJlZ2lzdHJlZENvbXBvbmVudC51cmwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdkb21haW4taWRwJykge1xuICAgICAgICAgIC8vIF90aGlzLnRyaWdnZXIoJ3J1bnRpbWU6bG9hZElkcFByb3h5JywgZG9tYWluVXJsKTtcblxuICAgICAgICAgIF90aGlzLl9sb2FkZXIubG9hZElkcFByb3h5KGRvbWFpblVybCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICByZWdpc3RyZWRDb21wb25lbnQgID0gX3RoaXMuaWRwUHJveHlMaXN0W2RvbWFpblVybF07XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ1Jlc29sdmVkIElEUFByb3h5OiAnLCByZWdpc3RyZWRDb21wb25lbnQsIHJlc3VsdCk7XG4gICAgICAgICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVXJsXS5zdGF0dXMgPSBTVEFUVVMuREVQTE9ZRUQ7XG4gICAgICAgICAgICByZXNvbHZlKHJlZ2lzdHJlZENvbXBvbmVudC51cmwpO1xuICAgICAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlc29sdmluZyBJRFBQcm94eTogJywgcmVhc29uKTtcbiAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gX3RoaXMudHJpZ2dlcigncnVudGltZTpsb2FkU3R1YicsIGRvbWFpblVybCk7XG5cbiAgICAgICAgICBfdGhpcy5fbG9hZGVyLmxvYWRTdHViKGRvbWFpblVybCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICByZWdpc3RyZWRDb21wb25lbnQgID0gX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVXJsXTtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnUmVzb2x2ZWQgUHJvdG9zdHViOiAnLCByZWdpc3RyZWRDb21wb25lbnQsIHJlc3VsdCk7XG4gICAgICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdLnN0YXR1cyA9IFNUQVRVUy5ERVBMT1lFRDtcbiAgICAgICAgICAgIHJlc29sdmUocmVnaXN0cmVkQ29tcG9uZW50LnVybCk7XG4gICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzb2x2aW5nIFByb3Rvc3R1YjogJywgcmVhc29uKTtcbiAgICAgICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgIH0pO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0cnk7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG4vKipcbiogICBAYXV0aG9yOiBHaWwgRGlhcyAoZ2lsLmRpYXNAdGVjbmljby51bGlzYm9hLnB0KVxuKiAgIFJlZ2lzdHJ5IERhdGEgTW9kZWwgaW5jbHVkZXMgYWxsIE9iamVjdHMgdG8gYmUgaGFuZGxlZCBieSB0aGUgUmVnaXN0cnkgZnVuY3Rpb25hbGl0eSBpbmNsdWRpbmdcbiovXG5jbGFzcyBSZWdpc3RyeURhdGFNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IoaWQsIHVybCwgZGVzY3JpcHRvclVSTCwgc3RhcnRpbmdUaW1lLCBsYXN0TW9kaWZpZWQsIHN0YXR1cywgc3R1YnMsIHN0dWJzQ29uZmlndXJhdGlvbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5faWQgPSBpZDtcbiAgICBfdGhpcy5fdXJsID0gdXJsO1xuICAgIF90aGlzLl9kZXNjcmlwdG9yVVJMID0gZGVzY3JpcHRvclVSTDtcbiAgICBfdGhpcy5fc3RhcnRpbmdUaW1lID0gc3RhcnRpbmdUaW1lO1xuICAgIF90aGlzLl9sYXN0TW9kaWZpZWQgPSBsYXN0TW9kaWZpZWQ7XG4gICAgX3RoaXMuX3N0YXR1cyA9IHN0YXR1cztcbiAgICBfdGhpcy5fc3R1YnMgPSBzdHVicztcbiAgICBfdGhpcy5fc3R1YnNDb25maWd1cmF0aW9uID0gc3R1YnNDb25maWd1cmF0aW9uO1xuICB9XG5cbiAgZ2V0IGlkKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9pZDtcbiAgfVxuXG4gIGdldCB1cmwoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX3VybDtcbiAgfVxuXG4gIGdldCBkZXNjcmlwdG9yKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yVVJMO1xuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0cnlEYXRhTW9kZWw7XG4iLCJpbXBvcnQge2RpdmlkZVVSTCwgZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcywgYnVpbGRVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcblxuY2xhc3MgRGVzY3JpcHRvcnMge1xuXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIGNhdGFsb2d1ZSwgcnVudGltZUNvbmZpZ3VyYXRpb24pIHtcbiAgICBpZiAoIXJ1bnRpbWVVUkwpIHRocm93IEVycm9yKCdUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgdXJsIHRvIGJlIHVzZWQnKTtcbiAgICBpZiAoIWNhdGFsb2d1ZSkgdGhyb3cgRXJyb3IoJ1RoZSBkZXNjcmlwdG9yIG5lZWRzIHRoZSBjYXRhbG9ndWUgaW5zdGFuY2UnKTtcbiAgICBpZiAoIXJ1bnRpbWVDb25maWd1cmF0aW9uKSB0aHJvdyBFcnJvcignVGhlIGRlc2NyaXB0b3IgbmVlZHMgdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbicpO1xuXG4gICAgdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiA9IHJ1bnRpbWVDb25maWd1cmF0aW9uO1xuICAgIHRoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7XG4gICAgdGhpcy5jYXRhbG9ndWUgPSBjYXRhbG9ndWU7XG4gIH1cblxuICBnZXRIeXBlcnR5RGVzY3JpcHRvciAoaHlwZXJ0eVVSTCkge1xuICAgIHJldHVybiB0aGlzLmNhdGFsb2d1ZS5nZXRIeXBlcnR5RGVzY3JpcHRvcihoeXBlcnR5VVJMKTtcbiAgfVxuXG4gIGdldFN0dWJEZXNjcmlwdG9yIChzdHViVVJMKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChzdHViVVJMKTtcbiAgICAgIGxldCBkb21haW4gPSBkaXZpZGVkVVJMLmRvbWFpbjtcbiAgICAgIGxldCBwcm90b3N0dWIgPSBkaXZpZGVkVVJMLmlkZW50aXR5O1xuICAgICAgbGV0IHByb3RvU3R1YlVSTDtcblxuICAgICAgbGV0IG9yaWdpbkRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodGhpcy5ydW50aW1lVVJMKTtcbiAgICAgIGxldCBvcmlnaW5Eb21haW4gPSBvcmlnaW5EaXZpZGVkVVJMLmRvbWFpbjtcblxuICAgICAgaWYgKCFkb21haW4pIHtcbiAgICAgICAgZG9tYWluID0gaWRwUHJveHlVUkw7XG4gICAgICB9XG5cbiAgICAgIGlmICghcHJvdG9zdHViKSB7XG4gICAgICAgIHByb3Rvc3R1YiA9ICdkZWZhdWx0JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb3Rvc3R1YiA9IHByb3Rvc3R1Yi5zdWJzdHJpbmcocHJvdG9zdHViLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgIH1cblxuICAgICAgcHJvdG9TdHViVVJMID0gYnVpbGRVUkwodGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAncHJvdG9jb2xzdHViJywgcHJvdG9zdHViKTtcbiAgICAgIGlmIChkb21haW4gIT09IHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24uZG9tYWluKSB7XG4gICAgICAgIGlmICghc3R1YlVSTC5pbmRleE9mKCdodHRwcycpIHx8ICFzdHViVVJMLmluZGV4T2YoJ2h5cGVydHktY2F0YWxvZ3VlJykpIHtcbiAgICAgICAgICBwcm90b1N0dWJVUkwgPSBzdHViVVJMO1xuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgLy8gVE9ETzogY2hlY2sgaG93IHRvIGxvYWQgZm9ybSBkaWZmZXJlbnQgY29uZmlndXJhdGlvbiBkb21haW5cbiAgICAgICAgICBsZXQgcmVzb3VyY2UgPSBnZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzKHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ3Byb3RvY29sc3R1YicpO1xuICAgICAgICAgIHByb3RvU3R1YlVSTCA9IHJlc291cmNlLnByZWZpeCArIGRvbWFpbiArIHJlc291cmNlLnN1ZmZpeCArIHByb3Rvc3R1YjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zb2xlLmxvZygnTG9hZCBQcm90b2NvbFN0dWIgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBwcm90b1N0dWJVUkwpO1xuICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldFN0dWJEZXNjcmlwdG9yKHByb3RvU3R1YlVSTCkudGhlbigocmVzdWx0KSA9PiB7XG5cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuXG4gICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcblxuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3I6ICcsIGVycm9yKTtcblxuICAgICAgICBwcm90b3N0dWIgPSBkb21haW47XG4gICAgICAgIGRvbWFpbiA9IG9yaWdpbkRvbWFpbjtcblxuICAgICAgICBsZXQgcmVzb3VyY2UgPSBnZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzKHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ3Byb3RvY29sc3R1YicpO1xuICAgICAgICBwcm90b1N0dWJVUkwgPSByZXNvdXJjZS5wcmVmaXggKyBkb21haW4gKyByZXNvdXJjZS5zdWZmaXggKyBwcm90b3N0dWI7XG5cbiAgICAgICAgY29uc29sZS5sb2coJ0ZhbGxiYWNrIC0+IExvYWQgUHJvdG9jb2xzdHViIGZvciBkb21haW4sICcgKyBkb21haW4gKyAnIDogJywgcHJvdG9zdHViKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldFN0dWJEZXNjcmlwdG9yKHByb3RvU3R1YlVSTCk7XG4gICAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBnZXRJZHBQcm94eURlc2NyaXB0b3IoaWRwUHJveHlVUkwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChpZHBQcm94eVVSTCk7XG4gICAgICBsZXQgZG9tYWluID0gZGl2aWRlZFVSTC5kb21haW47XG4gICAgICBsZXQgaWRwcHJveHkgPSBkaXZpZGVkVVJMLmlkZW50aXR5O1xuXG4gICAgICBsZXQgb3JpZ2luRGl2aWRlZFVSTCA9IGRpdmlkZVVSTCh0aGlzLnJ1bnRpbWVVUkwpO1xuICAgICAgbGV0IG9yaWdpbkRvbWFpbiA9IG9yaWdpbkRpdmlkZWRVUkwuZG9tYWluO1xuXG4gICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICBkb21haW4gPSBpZHBQcm94eVVSTDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbWFpbiA9PT0gb3JpZ2luRG9tYWluIHx8ICFpZHBwcm94eSkge1xuICAgICAgICBpZHBwcm94eSA9ICdkZWZhdWx0JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlkcHByb3h5ID0gaWRwcHJveHkuc3Vic3RyaW5nKGlkcHByb3h5Lmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHJlc291cmNlID0gZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcyh0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uLCAnY2F0YWxvZ3VlVVJMcycsICdpZHBQcm94eScpO1xuXG4gICAgICBpZHBQcm94eVVSTCA9IHJlc291cmNlLnByZWZpeCArIGRvbWFpbiArIHJlc291cmNlLnN1ZmZpeCArIGlkcHByb3h5O1xuICAgICAgY29uc29sZS5sb2coJ0xvYWQgSWRwIFByb3h5IGZvciBkb21haW4sICcgKyBkb21haW4gKyAnIDogJywgaWRwUHJveHlVUkwpO1xuICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCkudGhlbigocmVzdWx0KSA9PiB7XG5cbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuXG4gICAgICB9KS5jYXRjaCgoKSA9PiB7XG5cbiAgICAgICAgaWRwcHJveHkgPSBkb21haW47XG4gICAgICAgIGRvbWFpbiA9IG9yaWdpbkRvbWFpbjtcblxuICAgICAgICBpZHBQcm94eVVSTCA9IGJ1aWxkVVJMKHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ2lkcFByb3h5JywgaWRwcHJveHkpO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdMb2FkIElkcCBQcm94eSBmb3IgZG9tYWluLCAnICsgZG9tYWluICsgJyA6ICcsIGlkcFByb3h5VVJMKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCk7XG4gICAgICB9KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGVzY3JpcHRvcnM7XG4iLCJpbXBvcnQge2RpdmlkZVVSTCwgZW1wdHlPYmplY3R9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBEZXNjcmlwdG9ycyBmcm9tICcuL0Rlc2NyaXB0b3JzJztcblxuY2xhc3MgTG9hZGVyIHtcblxuICBjb25zdHJ1Y3RvcihydW50aW1lQ29uZmlndXJhdGlvbikge1xuICAgIGlmICghcnVudGltZUNvbmZpZ3VyYXRpb24pIHRocm93IEVycm9yKCdUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbicpO1xuICAgIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24gPSBydW50aW1lQ29uZmlndXJhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcnVudGltZSB1cmxcbiAgICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZSBydW50aW1lVVJMXG4gICAqL1xuICBzZXQgcnVudGltZVVSTCh2YWx1ZSkge1xuICAgIHRoaXMuX3J1bnRpbWVVUkwgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcnVudGltZSB1cmxcbiAgICogQHJldHVybiB7c3RyaW5nfSB2YWx1ZSBydW50aW1lVVJMXG4gICAqL1xuICBnZXQgcnVudGltZVVSTCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZVVSTDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgUmVnaXN0cnkgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge1JlZ2lzdHJ5fSB2YWx1ZSBSZWdpc3RyeSBDb21wb25lbnRcbiAgICovXG4gIHNldCByZWdpc3RyeSh2YWx1ZSkge1xuICAgIHRoaXMuX3JlZ2lzdHJ5ID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IFJlZ2lzdHJ5IGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtSZWdpc3RyeX0gUmVnaXN0cnkgY29tcG9uZW50XG4gICAqL1xuICBnZXQgcmVnaXN0cnkoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlZ2lzdHJ5O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBSdW50aW1lIENhdGFsb2d1ZSBDb21wb25lbnRcbiAgICogQHBhcmFtICB7UnVudGltZUNhdGFsb2d1ZX0gdmFsdWUgcnVudGltZSBjYXRhbG9ndWUgY29tcG9uZW50XG4gICAqL1xuICBzZXQgcnVudGltZUNhdGFsb2d1ZSh2YWx1ZSkge1xuICAgIHRoaXMuX3J1bnRpbWVDYXRhbG9ndWUgPSB2YWx1ZTtcblxuICAgIHRoaXMuZGVzY3JpcHRvcnMgPSBuZXcgRGVzY3JpcHRvcnModGhpcy5fcnVudGltZVVSTCwgdmFsdWUsIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBSdW50aW1lIENhdGFsb2d1ZSBjb21wb25lbnRcbiAgICogQHJldHVybiB7UnVudGltZUNhdGFsb2d1ZX0gUnVudGltZSBDYXRhbG9ndWUgY29tcG9uZW50XG4gICAqL1xuICBnZXQgcnVudGltZUNhdGFsb2d1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZUNhdGFsb2d1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgTWVzc2FnZSBCdXMgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9IHZhbHVlIE1lc3NhZ2UgYnVzIGNvbXBvbmVudFxuICAgKi9cbiAgc2V0IG1lc3NhZ2VCdXModmFsdWUpIHtcbiAgICB0aGlzLl9tZXNzYWdlc0J1cyA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBNZXNzYWdlIEJ1cyBjb21wb25lbnRcbiAgICogQHJldHVybiB7TWVzc2FnZUJ1c30gTWVzc2FnZSBCdXMgY29tcG9uZW50XG4gICAqL1xuICBnZXQgbWVzc2FnZUJ1cygpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVzc2FnZXNCdXM7XG4gIH1cblxuICAvKipcbiAgICogU2V0IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnRcbiAgICogQHBhcmFtICB7cnVudGltZUZhY3Rvcnl9IHZhbHVlIEZhY3RvcnkgaW5jbHVkZXMgdGhlIHNwZWNpZmljIGltcGxlbWVudGF0aW9ucyBmb3IgZWFjaCBlbnZpcm9ubWVudFxuICAgKi9cbiAgc2V0IHJ1bnRpbWVGYWN0b3J5KHZhbHVlKSB7XG4gICAgdGhpcy5fcnVudGltZUZhY3RvcnkgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgUnVudGltZSBGYWN0b3J5IGNvbXBvbmVudFxuICAgKiBAcmV0dXJuIHtydW50aW1lRmFjdG9yeX0gUnVudGltZSBGYWN0b3J5IGNvbXBvbmVudFxuICAgKi9cbiAgZ2V0IHJ1bnRpbWVGYWN0b3J5KCkge1xuICAgIHJldHVybiB0aGlzLl9ydW50aW1lRmFjdG9yeTtcbiAgfVxuXG4gIC8qKlxuICAqIERlcGxveSBIeXBlcnR5IGZyb20gQ2F0YWxvZ3VlIFVSTFxuICAqIEBwYXJhbSAge1VSTC5IeXBlcnR5Q2F0YWxvZ3VlVVJMfSAgICBoeXBlcnR5IGh5cGVydHlEZXNjcmlwdG9yIHVybDtcbiAgKi9cbiAgbG9hZEh5cGVydHkoaHlwZXJ0eURlc2NyaXB0b3JVUkwpIHtcblxuICAgIGlmICghdGhpcy5fcmVhZHlUb1VzZSgpKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKCFoeXBlcnR5RGVzY3JpcHRvclVSTCkgdGhyb3cgbmV3IEVycm9yKCdIeXBlcnR5IGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBfaHlwZXJ0eVVSTDtcbiAgICAgIGxldCBfaHlwZXJ0eVNhbmRib3g7XG4gICAgICBsZXQgX2h5cGVydHlEZXNjcmlwdG9yO1xuICAgICAgbGV0IF9oeXBlcnR5U291cmNlUGFja2FnZTtcbiAgICAgIGxldCBoYXZlRXJyb3IgPSBmYWxzZTtcblxuICAgICAgbGV0IGVycm9yUmVhc29uID0gKHJlYXNvbikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdTb21ldGhpbmcgZmFpbGVkIG9uIHRoZSBkZXBsb3kgaHlwZXJ0eTogJywgcmVhc29uKTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICBsZXQgaGFuZGxlRXJyb3IgPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGhhdmVFcnJvciA9IHRydWU7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgLy8gR2V0IEh5cGVydHkgZGVzY3JpcHRvclxuICAgICAgLy8gVE9ETzogdGhlIHJlcXVlc3QgTW9kdWxlIHNob3VsZCBiZSBjaGFuZ2VkLFxuICAgICAgLy8gYmVjYXVzZSBhdCB0aGlzIG1vbWVudCBpdCBpcyBpbmNvbXBhdGlibGUgd2l0aCBub2RlanM7XG4gICAgICAvLyBQcm9iYWJseSB3ZSBuZWVkIHRvIHBhc3MgYSBmYWN0b3J5IGxpa2Ugd2UgZG8gZm9yIHNhbmRib3hlcztcbiAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tIEh5cGVydHkgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XG4gICAgICBjb25zb2xlLmluZm8oJ0dldCBoeXBlcnR5IGRlc2NyaXB0b3IgZm9yIDonLCBoeXBlcnR5RGVzY3JpcHRvclVSTCk7XG4gICAgICByZXR1cm4gdGhpcy5kZXNjcmlwdG9ycy5nZXRIeXBlcnR5RGVzY3JpcHRvcihoeXBlcnR5RGVzY3JpcHRvclVSTClcbiAgICAgIC50aGVuKChoeXBlcnR5RGVzY3JpcHRvcikgPT4ge1xuICAgICAgICAvLyBhdCB0aGlzIHBvaW50LCB3ZSBoYXZlIGNvbXBsZXRlZCBcInN0ZXAgMiBhbmQgM1wiIGFzIHNob3duIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWRcbiAgICAgICAgY29uc29sZS5pbmZvKCcxOiByZXR1cm4gaHlwZXJ0eSBkZXNjcmlwdG9yJyk7XG5cbiAgICAgICAgLy8gaHlwZXJ0eSBjb250YWlucyB0aGUgZnVsbCBwYXRoIG9mIHRoZSBjYXRhbG9ndWUgVVJMLCBlLmcuXG4gICAgICAgIC8vIGNhdGFsb2d1ZS5yZXRoaW5rLmV1Ly53ZWxsLWtub3duLy4uLi4uLi4uLi5cbiAgICAgICAgX2h5cGVydHlEZXNjcmlwdG9yID0gaHlwZXJ0eURlc2NyaXB0b3I7XG5cbiAgICAgICAgbGV0IHNvdXJjZVBhY2thZ2VVUkwgPSBoeXBlcnR5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMO1xuXG4gICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7XG4gICAgICAgICAgcmV0dXJuIGh5cGVydHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGh5cGVydHkgc291cmNlIGNvZGVcbiAgICAgICAgcmV0dXJuIHRoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRTb3VyY2VQYWNrYWdlRnJvbVVSTChzb3VyY2VQYWNrYWdlVVJMKTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLnRoZW4oKHNvdXJjZVBhY2thZ2UpID0+IHtcbiAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNvbnNvbGUuaW5mbygnMjogcmV0dXJuIGh5cGVydHkgc291cmNlIGNvZGUnKTtcblxuICAgICAgICAvLyBhdCB0aGlzIHBvaW50LCB3ZSBoYXZlIGNvbXBsZXRlZCBcInN0ZXAgNCBhbmQgNVwiIGFzIHNob3duIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWRcblxuICAgICAgICBfaHlwZXJ0eVNvdXJjZVBhY2thZ2UgPSBzb3VyY2VQYWNrYWdlO1xuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIHN0ZXBzIDYgLS0gOSBhcmUgc2tpcHBlZC5cbiAgICAgICAgLy8gVE9ETzogb24gcmVsZWFzZSBvZiBjb3JlIDAuMjtcbiAgICAgICAgLy8gVE9ETzogUHJvbWlzZSB0byBjaGVjayB0aGUgcG9saWN5IGVuZ2luZVxuXG4gICAgICAgIC8vIG1vY2stdXAgY29kZTtcbiAgICAgICAgLy8gdGVtcG9yYXJ5IGNvZGUsIG9ubHlcbiAgICAgICAgbGV0IHBvbGljeSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIHBvbGljeTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLnRoZW4oKHBvbGljeVJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnMzogcmV0dXJuIHBvbGljeSBlbmdpbmUgcmVzdWx0JyArIHBvbGljeVJlc3VsdCk7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA2IHRvIDkgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFN0ZXBzIDYgLS0gOVxuICAgICAgICAvLyBBcyBhIHJlc3VsdCBvZiB0aGUgc2lwcGVkIHN0ZXBzLCB3ZSBrbm93IGF0IHRoaXMgcG9pbnQgaWYgd2UgZXhlY3V0ZVxuICAgICAgICAvLyBpblNhbWVTYW5kYm94IG9yIG5vdC5cbiAgICAgICAgLy9cblxuICAgICAgICAvLyBGb3IgdGVzdGluZywganVzdCBhc3N1bWUgd2UgZXhlY3V0ZSBpbiBzYW1lIFNhbmRib3guXG4gICAgICAgIGxldCBpblNhbWVTYW5kYm94ID0gdHJ1ZTtcbiAgICAgICAgbGV0IHNhbmRib3g7XG5cbiAgICAgICAgaWYgKGluU2FtZVNhbmRib3gpIHtcblxuICAgICAgICAgIC8vIHRoaXMgZG9uJ3QgbmVlZCBiZSBhIFByb21pc2U7XG4gICAgICAgICAgc2FuZGJveCA9IHRoaXMucmVnaXN0cnkuZ2V0QXBwU2FuZGJveCgpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxMSBoZXJlLlxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChoeXBlcnR5RGVzY3JpcHRvclVSTCkuZG9tYWluO1xuXG4gICAgICAgICAgLy8gZ2V0U2FuZGJveCwgdGhpcyB3aWxsIHJldHVybiBhIHByb21pc2U7XG4gICAgICAgICAgc2FuZGJveCA9IHRoaXMucmVnaXN0cnkuZ2V0U2FuZGJveChkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94O1xuICAgICAgICByZXR1cm4gc2FuZGJveDtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLnRoZW4oKHNhbmRib3gpID0+IHtcbiAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zb2xlLmluZm8oJzQ6IHJldHVybiB0aGUgc2FuZGJveCcsIHNhbmRib3gpO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgc2FuZGJveCBpbmRlcGVudGVseSBpZiBpdCBydW5uaW5nIGluIHRoZSBzYW1lIHNhbmRib3ggb3Igbm90XG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTQgaGVyZS5cbiAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICB9LCAocmVhc29uKSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5lcnJvcignNC4xOiBUcnkgdG8gcmVnaXN0ZXIgYSBuZXcgc2FuZGJveCcpO1xuXG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVkIGZvciB0aGlzIGh5cGVydHkgZGVzY3JpcHRvciB1cmw7XG4gICAgICAgIC8vIE1ha2UgU3RlcHMgeHh4IC0tLSB4eHhcbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFNhbmRib3hcbiAgICAgICAgbGV0IHNhbmRib3ggPSB0aGlzLl9ydW50aW1lRmFjdG9yeS5jcmVhdGVTYW5kYm94KCk7XG5cbiAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIChtc2cpID0+IHtcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgIC50aGVuKChzYW5kYm94KSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCc1OiByZXR1cm4gc2FuZGJveCBhbmQgcmVnaXN0ZXInKTtcblxuICAgICAgICBfaHlwZXJ0eVNhbmRib3ggPSBzYW5kYm94O1xuXG4gICAgICAgIC8vIFJlZ2lzdGVyIGh5cGVydHlcbiAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkucmVnaXN0ZXJIeXBlcnR5KHNhbmRib3gsIGh5cGVydHlEZXNjcmlwdG9yVVJMLCBfaHlwZXJ0eURlc2NyaXB0b3IpO1xuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigoaHlwZXJ0eVVSTCkgPT4ge1xuICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnNjogSHlwZXJ0eSB1cmwsIGFmdGVyIHJlZ2lzdGVyIGh5cGVydHknLCBoeXBlcnR5VVJMKTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDE2IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuICAgICAgICBfaHlwZXJ0eVVSTCA9IGh5cGVydHlVUkw7XG5cbiAgICAgICAgLy8gRXh0ZW5kIG9yaWdpbmFsIGh5cGVydHkgY29uZmlndXJhdGlvbjtcbiAgICAgICAgbGV0IGNvbmZpZ3VyYXRpb24gPSB7fTtcbiAgICAgICAgaWYgKCFlbXB0eU9iamVjdChfaHlwZXJ0eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIEpTT04ucGFyc2UoX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCA9IHRoaXMuX3J1bnRpbWVVUkw7XG5cbiAgICAgICAgLy8gV2Ugd2lsbCBkZXBsb3kgdGhlIGNvbXBvbmVudCAtIHN0ZXAgMTcgb2YgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gX2h5cGVydHlTYW5kYm94LmRlcGxveUNvbXBvbmVudChfaHlwZXJ0eVNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgX2h5cGVydHlVUkwsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3Igb24gZGVwbG95IGNvbXBvbmVudDonLCBlKTtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLnRoZW4oKGRlcGxveUNvbXBvbmVudFN0YXR1cykgPT4ge1xuICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnNzogRGVwbG95IGNvbXBvbmVudCBzdGF0dXMgZm9yIGh5cGVydHk6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxOSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy5cblxuICAgICAgICAvLyBBZGQgdGhlIG1lc3NhZ2UgYnVzIGxpc3RlbmVyIHRvIHRoZSBhcHBTYW5kYm94IG9yIGh5cGVydFNhbmRib3g7XG4gICAgICAgIHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfaHlwZXJ0eVVSTCwgKG1zZykgPT4ge1xuICAgICAgICAgIF9oeXBlcnR5U2FuZGJveC5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIwIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuICAgICAgICBsZXQgaHlwZXJ0eSA9IHtcbiAgICAgICAgICBydW50aW1lSHlwZXJ0eVVSTDogX2h5cGVydHlVUkwsXG4gICAgICAgICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXNcbiAgICAgICAgfTtcblxuICAgICAgICByZXNvbHZlKGh5cGVydHkpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMjEgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG4gICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLmNhdGNoKGVycm9yUmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIERlcGxveSBTdHViIGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW5cbiAgKi9cbiAgbG9hZFN0dWIocHJvdG9zdHViVVJMKSB7XG5cbiAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghcHJvdG9zdHViVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1Byb3RvU3R1YiBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKHByb3Rvc3R1YlVSTCkuZG9tYWluO1xuXG4gICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICBkb21haW4gPSBwcm90b3N0dWJVUkw7XG4gICAgICB9XG5cbiAgICAgIGxldCBfc3R1YlNhbmRib3g7XG4gICAgICBsZXQgX3N0dWJEZXNjcmlwdG9yO1xuICAgICAgbGV0IF9ydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICAgbGV0IF9zdHViU291cmNlUGFja2FnZTtcbiAgICAgIGxldCBoYXZlRXJyb3IgPSBmYWxzZTtcblxuICAgICAgbGV0IGVycm9yUmVhc29uID0gKHJlYXNvbikgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdTb21ldGhpbmcgZmFpbGVkIG9uIHRoZSBkZXBsb3kgb2YgcHJvdG9jb2xzdHViOiAnLCByZWFzb24pO1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBoYW5kbGVFcnJvciA9IChyZWFzb24pID0+IHtcbiAgICAgICAgaGF2ZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICAvLyBEaXNjb3ZlciBQcm90b2NvbCBTdHViXG4gICAgICBjb25zb2xlLmluZm8oJy0tLS0tLS0tLS0tLS0tLS0tLS0gUHJvdG9TdHViIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuICAgICAgY29uc29sZS5pbmZvKCdEaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgUHJvdG9TdHViIGZvciBkb21haW46ICcsIGRvbWFpbik7XG4gICAgICB0aGlzLnJlZ2lzdHJ5LmRpc2NvdmVyUHJvdG9zdHViKGRvbWFpbikudGhlbigocnVudGltZVByb3RvU3R1YlVSTCkgPT4ge1xuICAgICAgICAvLyBJcyByZWdpc3RlZD9cbiAgICAgICAgY29uc29sZS5pbmZvKCcxLiBQcm90byBTdHViIERpc2NvdmVyZWQgZm9yICcsIGRvbWFpbiwgJzogJywgcnVudGltZVByb3RvU3R1YlVSTCk7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAyIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgIC8vIFRPRE86IENoZWNrIGlmIHRoZSBzdGF0dXMgaXMgc2F2ZWQgaW4gdGhlIHN0YXR1cyBvZiBzYW5kYm94O1xuICAgICAgICAvLyBsZXQgc3R1YiA9IHtcbiAgICAgICAgLy8gICBydW50aW1lUHJvdG9TdHViVVJMOiBydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgICAvLyAgIHN0YXR1czogJ2RlcGxveWVkJ1xuICAgICAgICAvLyB9O1xuICAgICAgICBsZXQgc3R1YiA9IHRoaXMucmVnaXN0cnkucHJvdG9zdHVic0xpc3RbZG9tYWluXTtcbiAgICAgICAgcmVzb2x2ZShzdHViKTtcbiAgICAgICAgY29uc29sZS5pbmZvKCctLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKHJlYXNvbikgPT4ge1xuXG4gICAgICAgIC8vIGlzIG5vdCByZWdpc3RlZD9cbiAgICAgICAgY29uc29sZS5pbmZvKCcxLiBQcm90byBTdHViIG5vdCBmb3VuZCAnICsgcmVhc29uKTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIGRlc2NyaXB0b3Igc3RlcCA0IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICB0aGlzLmRlc2NyaXB0b3JzLmdldFN0dWJEZXNjcmlwdG9yKHByb3Rvc3R1YlVSTClcbiAgICAgICAgLnRoZW4oKHN0dWJEZXNjcmlwdG9yKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnMi4gcmV0dXJuIHRoZSBQcm90b1N0dWIgZGVzY3JpcHRvcicpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIF9zdHViRGVzY3JpcHRvciA9IHN0dWJEZXNjcmlwdG9yO1xuXG4gICAgICAgICAgbGV0IHNvdXJjZVBhY2thZ2VVUkwgPSBzdHViRGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMO1xuXG4gICAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHViRGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBTb3VyY2UgY29kZSBmcm9tIGRlc2NyaXB0b3IgLSBzdGVwIDYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgcmV0dXJuIHRoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRTb3VyY2VQYWNrYWdlRnJvbVVSTChzb3VyY2VQYWNrYWdlVVJMKTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC5jYXRjaChlcnJvclJlYXNvbilcbiAgICAgICAgLnRoZW4oKHN0dWJTb3VyY2VQYWNrYWdlKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnMy4gcmV0dXJuIHRoZSBQcm90b1N0dWIgU291cmNlIENvZGUnKTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgIF9zdHViU291cmNlUGFja2FnZSA9IHN0dWJTb3VyY2VQYWNrYWdlO1xuXG4gICAgICAgICAgLy8gVE9ETzogQ2hlY2sgb24gUEVQIChwb2xpY3kgRW5naW5lKSBpZiB3ZSBuZWVkIHRoZSBzYW5kYm94IGFuZCBjaGVjayBpZiB0aGUgU2FuZGJveCBGYWN0b3J5IGhhdmUgdGhlIGNvbnRleHQgc2FuZGJveDtcbiAgICAgICAgICBsZXQgcG9saWN5ID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gcG9saWN5O1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHBvbGljeSkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNhbmRib3ggb3Igb25lIHByb21pc2UgdG8gZ2V0U2FuZGJveDtcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5nZXRTYW5kYm94KGRvbWFpbik7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChzdHViU2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJzQuIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVyZWQgdGhlbiByZXR1cm4gdGhlIHNhbmRib3ggJywgc3R1YlNhbmRib3gpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgICBfc3R1YlNhbmRib3ggPSBzdHViU2FuZGJveDtcbiAgICAgICAgICByZXR1cm4gc3R1YlNhbmRib3g7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnNS4gU2FuZGJveCB3YXMgbm90IGZvdW5kLCBjcmVhdGluZyBhIG5ldyBvbmUgJywgcmVhc29uKTtcblxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVkIGZvciB0aGlzIHN0dWIgZGVzY3JpcHRvciB1cmw7XG4gICAgICAgICAgLy8gTWFrZSBTdGVwcyB4eHggLS0tIHh4eFxuICAgICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBTYW5kYm94XG4gICAgICAgICAgbGV0IHNhbmRib3ggPSB0aGlzLl9ydW50aW1lRmFjdG9yeS5jcmVhdGVTYW5kYm94KCk7XG4gICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIChtc2cpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKChzYW5kYm94KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTtcblxuICAgICAgICAgIF9zdHViU2FuZGJveCA9IHNhbmRib3g7XG5cbiAgICAgICAgICAvLyB3ZSBuZWVkIHJlZ2lzdGVyIHN0dWIgb24gcmVnaXN0cnkgLSBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5yZWdpc3RlclN0dWIoX3N0dWJTYW5kYm94LCBkb21haW4pO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHJ1bnRpbWVQcm90b1N0dWJVUkwpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCc3LiByZXR1cm4gdGhlIHJ1bnRpbWUgcHJvdG9zdHViIHVybDogJywgcnVudGltZVByb3RvU3R1YlVSTCk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgIF9ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDtcblxuICAgICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgbGV0IGNvbmZpZ3VyYXRpb24gPSB7fTtcbiAgICAgICAgICBpZiAoIWVtcHR5T2JqZWN0KF9zdHViRGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIEpTT04ucGFyc2UoX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9zdHViRGVzY3JpcHRvci5jb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbmZpZ3VyYXRpb24ucnVudGltZVVSTCA9IHRoaXMuX3J1bnRpbWVVUkw7XG5cbiAgICAgICAgICAvLyBEZXBsb3kgQ29tcG9uZW50IHN0ZXAgeHh4XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBfc3R1YlNhbmRib3guZGVwbG95Q29tcG9uZW50KF9zdHViU291cmNlUGFja2FnZS5zb3VyY2VDb2RlLCBydW50aW1lUHJvdG9TdHViVVJMLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpO1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC50aGVuKChkZXBsb3lDb21wb25lbnRTdGF0dXMpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCc4OiByZXR1cm4gZGVwbG95IGNvbXBvbmVudCBmb3Igc2FuZGJveCBzdGF0dXM6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXJcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3J1bnRpbWVQcm90b1N0dWJVUkwsIChtc2cpID0+IHtcbiAgICAgICAgICAgIF9zdHViU2FuZGJveC5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgbGV0IHN0dWIgPSB0aGlzLnJlZ2lzdHJ5LnByb3Rvc3R1YnNMaXN0W2RvbWFpbl07XG5cbiAgICAgICAgICAvLyAvLyBMb2FkIFN0dWIgZnVuY3Rpb24gcmVzb2x2ZWQgd2l0aCBzdWNjZXNzO1xuICAgICAgICAgIC8vIGxldCBzdHViID0ge1xuICAgICAgICAgIC8vICAgcnVudGltZVByb3RvU3R1YlVSTDogX3J1bnRpbWVQcm90b1N0dWJVUkwsXG4gICAgICAgICAgLy8gICBzdGF0dXM6IGRlcGxveUNvbXBvbmVudFN0YXR1c1xuICAgICAgICAgIC8vIH07XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygnRGVwbG95ZWQ6ICcsIHN0dWIsIGRvbWFpbiwgdGhpcy5yZWdpc3RyeS5wcm90b3N0dWJzTGlzdCk7XG5cbiAgICAgICAgICByZXNvbHZlKHN0dWIpO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJyk7XG5cbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC5jYXRjaChlcnJvclJlYXNvbik7XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIERlcGxveSBpZHBQcm94eSBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybFxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICBkb21haW4gICAgICAgICAgZG9tYWluXG4gICovXG4gIGxvYWRJZHBQcm94eShpZHBQcm94eVVSTCkge1xuXG4gICAgaWYgKCF0aGlzLl9yZWFkeVRvVXNlKCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIWlkcFByb3h5VVJMKSB0aHJvdyBuZXcgRXJyb3IoJ0lkcFByb3h5IGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwoaWRwUHJveHlVUkwpLmRvbWFpbjtcblxuICAgICAgaWYgKCFkb21haW4pIHtcbiAgICAgICAgZG9tYWluID0gaWRwUHJveHlVUkw7XG4gICAgICB9XG5cbiAgICAgIGxldCBfcHJveHlTYW5kYm94O1xuICAgICAgbGV0IF9wcm94eURlc2NyaXB0b3I7XG4gICAgICBsZXQgX3J1bnRpbWVJZHBQcm94eVVSTDtcbiAgICAgIGxldCBfcHJveHlTb3VyY2VQYWNrYWdlO1xuICAgICAgbGV0IGhhdmVFcnJvciA9IGZhbHNlO1xuXG4gICAgICBsZXQgZXJyb3JSZWFzb24gPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NvbWV0aGluZyBmYWlsZWQgb24gdGhlIGRlcGxveSBvZiBJZHBQcm94eTogJywgcmVhc29uKTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICBsZXQgaGFuZGxlRXJyb3IgPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGhhdmVFcnJvciA9IHRydWU7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgLy8gRGlzY292ZXIgSURQUHJveHlcbiAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLSBJRFAgUHJveHkgRGVwbG95IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuICAgICAgY29uc29sZS5pbmZvKCdEaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgSWRwUHJveHkgZm9yIGRvbWFpbi9VUkw6ICcsIGRvbWFpbik7XG4gICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5kaXNjb3ZlcklkcFByb3h5KGRvbWFpbilcbiAgICAgIC50aGVuKChydW50aW1lSWRwUHJveHlVUkwpID0+IHtcbiAgICAgICAgLy8gSXMgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnMS4gSURQUHJveHkgRGlzY292ZXJlZDogJywgcnVudGltZUlkcFByb3h5VVJMKTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgbGV0IGlkcFByb3h5ID0gdGhpcy5yZWdpc3RyeS5pZHBQcm94eUxpc3RbZG9tYWluXTtcbiAgICAgICAgY29uc29sZS5sb2coJ0RlcGxveWVkOiAnLCBpZHBQcm94eSk7XG5cbiAgICAgICAgcmVzb2x2ZShpZHBQcm94eSk7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcblxuICAgICAgICAvLyBpcyBub3QgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnMS4gSWRwUHJveHkgbm90IGZvdW5kOicsIHJlYXNvbik7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBkZXNjcmlwdG9yIHN0ZXAgNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgdGhpcy5kZXNjcmlwdG9ycy5nZXRJZHBQcm94eURlc2NyaXB0b3IoaWRwUHJveHlVUkwpXG4gICAgICAgIC50aGVuKChwcm94eURlc2NyaXB0b3IpID0+IHtcblxuICAgICAgICAgIGNvbnNvbGUuaW5mbygnMi4gUmV0dXJuIHRoZSBJRFBQcm94eSBkZXNjcmlwdG9yJyk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDUgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgX3Byb3h5RGVzY3JpcHRvciA9IHByb3h5RGVzY3JpcHRvcjtcblxuICAgICAgICAgIGxldCBzb3VyY2VQYWNrYWdlVVJMID0gcHJveHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2VVUkw7XG5cbiAgICAgICAgICBpZiAoc291cmNlUGFja2FnZVVSTCA9PT0gJy9zb3VyY2VQYWNrYWdlJykge1xuICAgICAgICAgICAgcmV0dXJuIHByb3h5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gZ2V0IFByb3RvU3R1YiBTb3VyY2UgY29kZSBmcm9tIGRlc2NyaXB0b3IgLSBzdGVwIDYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgcmV0dXJuIHRoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRTb3VyY2VQYWNrYWdlRnJvbVVSTChzb3VyY2VQYWNrYWdlVVJMKTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC50aGVuKChzb3VyY2VQYWNrYWdlKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnMy4gcmV0dXJuIHRoZSBJRFBQcm94eSBzb3VyY2UgcGFja2FnZScpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA3IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgX3Byb3h5U291cmNlUGFja2FnZSA9IHNvdXJjZVBhY2thZ2U7XG5cbiAgICAgICAgICAvLyBUT0RPOiBDaGVjayBvbiBQRVAgKHBvbGljeSBFbmdpbmUpIGlmIHdlIG5lZWQgdGhlIHNhbmRib3ggYW5kIGNoZWNrIGlmIHRoZSBTYW5kYm94IEZhY3RvcnkgaGF2ZSB0aGUgY29udGV4dCBzYW5kYm94O1xuICAgICAgICAgIGxldCBwb2xpY3kgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBwb2xpY3k7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigocG9saWN5KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94O1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHByb3h5U2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJzQuIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVyZWQgdGhlbiByZXR1cm4gdGhlIHNhbmRib3gnLCBwcm94eVNhbmRib3gpO1xuXG4gICAgICAgICAgX3Byb3h5U2FuZGJveCA9IHByb3h5U2FuZGJveDtcbiAgICAgICAgICByZXR1cm4gcHJveHlTYW5kYm94O1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJzUuIFNhbmRib3ggd2FzIG5vdCBmb3VuZCwgY3JlYXRpbmcgYSBuZXcgb25lJywgcmVhc29uKTtcblxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZSBzYW5kYm94IGlzIHJlZ2lzdGVkIGZvciB0aGlzIHByb3h5IGRlc2NyaXB0b3IgdXJsO1xuICAgICAgICAgIC8vIE1ha2UgU3RlcHMgeHh4IC0tLSB4eHhcbiAgICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgU2FuZGJveFxuICAgICAgICAgIGxldCBzYW5kYm94ID0gdGhpcy5fcnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveCgpO1xuICAgICAgICAgIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCAobXNnKSA9PiB7XG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBzYW5kYm94O1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJzYuIHJldHVybiB0aGUgc2FuZGJveCBpbnN0YW5jZSBhbmQgcmVnaXN0ZXInLCBzYW5kYm94LCAndG8gZG9tYWluICcsIGRvbWFpbik7XG5cbiAgICAgICAgICBfcHJveHlTYW5kYm94ID0gc2FuZGJveDtcblxuICAgICAgICAgIC8vIHdlIG5lZWQgcmVnaXN0ZXIgc3R1YiBvbiByZWdpc3RyeSAtIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LnJlZ2lzdGVySWRwUHJveHkoc2FuZGJveCwgZG9tYWluKTtcbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC50aGVuKChydW50aW1lSWRwUHJveHlVUkwpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCc3LiBSZXR1cm4gdGhlIHJ1bnRpbWUgSWRwIFByb3h5IFVSTDogJywgcnVudGltZUlkcFByb3h5VVJMKTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgX3J1bnRpbWVJZHBQcm94eVVSTCA9IHJ1bnRpbWVJZHBQcm94eVVSTDtcblxuICAgICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgbGV0IGNvbmZpZ3VyYXRpb24gPSB7fTtcbiAgICAgICAgICBpZiAoIWVtcHR5T2JqZWN0KF9wcm94eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCBKU09OLnBhcnNlKF9wcm94eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX3Byb3h5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSB0aGlzLl9ydW50aW1lVVJMO1xuXG4gICAgICAgICAgLy8gRGVwbG95IENvbXBvbmVudCBzdGVwIHh4eFxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gX3Byb3h5U2FuZGJveC5kZXBsb3lDb21wb25lbnQoX3Byb3h5U291cmNlUGFja2FnZS5zb3VyY2VDb2RlLCBydW50aW1lSWRwUHJveHlVUkwsIGNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG9uIGRlcGxveSBjb21wb25lbnQ6JywgZSk7XG4gICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKGRlcGxveUNvbXBvbmVudFN0YXR1cykgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJzg6IHJldHVybiBkZXBsb3kgY29tcG9uZW50IGZvciBzYW5kYm94IHN0YXR1czogJywgZGVwbG95Q29tcG9uZW50U3RhdHVzKTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgeHh4IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgLy8gQWRkIHRoZSBtZXNzYWdlIGJ1cyBsaXN0ZW5lclxuICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihfcnVudGltZUlkcFByb3h5VVJMLCAobXNnKSA9PiB7XG4gICAgICAgICAgICBfcHJveHlTYW5kYm94LnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgIC8vIExvYWQgU3R1YiBmdW5jdGlvbiByZXNvbHZlZCB3aXRoIHN1Y2Nlc3M7XG4gICAgICAgICAgLy8gbGV0IGlkcFByb3h5ID0ge1xuICAgICAgICAgIC8vICAgcnVudGltZUlkcFByb3h5VVJMOiBfcnVudGltZUlkcFByb3h5VVJMLFxuICAgICAgICAgIC8vICAgc3RhdHVzOiBkZXBsb3lDb21wb25lbnRTdGF0dXNcbiAgICAgICAgICAvLyB9O1xuXG4gICAgICAgICAgdGhpcy5yZWdpc3RyeS5pZHBQcm94eUxpc3RbZG9tYWluXS5zdGF0dXMgPSAnZGVwbG95ZWQnO1xuICAgICAgICAgIGxldCBpZHBQcm94eSA9IHRoaXMucmVnaXN0cnkuaWRwUHJveHlMaXN0W2RvbWFpbl07XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygnRGVwbG95ZWQ6ICcsIGlkcFByb3h5KTtcblxuICAgICAgICAgIHJlc29sdmUoaWRwUHJveHkpO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJyk7XG5cbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC5jYXRjaChlcnJvclJlYXNvbik7XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG5cbiAgLy8gQ2hlY2sgaWYgdGhlIGxvYWRlciBpcyByZWFkeSB0byBsb2FkIGFsbCBjb21wb25lbnRzXG4gIF9yZWFkeVRvVXNlKCkge1xuXG4gICAgbGV0IHN0YXR1cyA9IGZhbHNlO1xuXG4gICAgaWYgKCF0aGlzLl9ydW50aW1lVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBsb2FkZXIgbmVlZCB0aGUgcnVudGltZSB1cmwgYWRkcmVzcycpO1xuICAgIGlmICghdGhpcy5fbWVzc2FnZXNCdXMpIHRocm93IG5ldyBFcnJvcignVGhlIGxvYWRlciBuZWVkIHRoZSBtZXNzYWdlQnVzIGNvbXBvbmVudCcpO1xuICAgIGlmICghdGhpcy5fcnVudGltZUNhdGFsb2d1ZSkgdGhyb3cgbmV3IEVycm9yKCdUaGUgbG9hZGVyIG5lZWQgdGhlIHJ1bnRpbWVDYXRhbG9ndWUgY29tcG9uZW50Jyk7XG4gICAgaWYgKCF0aGlzLl9yZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdUaGUgbG9hZGVyIG5lZWQgdGhlIHJlZ2lzdHJ5IGNvbXBvbmVudCcpO1xuICAgIGlmICghdGhpcy5fcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIGxvYWRlciBuZWVkIHRoZSBydW50aW1lIGZhY3RvcnkgY29tcG9uZW50Jyk7XG5cbiAgICBzdGF0dXMgPSB0cnVlO1xuICAgIHJldHVybiBzdGF0dXM7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2FkZXI7XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5cbmltcG9ydCAnYmFiZWwtcG9seWZpbGwnO1xuXG4vL01haW4gZGVwZW5kZWNpZXNcbmltcG9ydCBSZWdpc3RyeSBmcm9tICcuLi9yZWdpc3RyeS9SZWdpc3RyeSc7XG5pbXBvcnQgSWRlbnRpdHlNb2R1bGUgZnJvbSAnLi4vaWRlbnRpdHkvSWRlbnRpdHlNb2R1bGUnO1xuaW1wb3J0IFBFUCBmcm9tICcuLi9wb2xpY3kvUEVQJztcbmltcG9ydCBNZXNzYWdlQnVzIGZyb20gJy4uL2J1cy9NZXNzYWdlQnVzJztcblxuaW1wb3J0IExvYWRlciBmcm9tICcuL0xvYWRlcic7XG5pbXBvcnQgeyBydW50aW1lQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vcnVudGltZUNvbmZpZ3VyYXRpb24nO1xuLy8gaW1wb3J0IEdyYXBoQ29ubmVjdG9yIGZyb20gJy4uL2dyYXBoY29ubmVjdG9yL0dyYXBoQ29ubmVjdG9yJztcblxuaW1wb3J0IFN5bmNoZXJNYW5hZ2VyIGZyb20gJy4uL3N5bmNoZXIvU3luY2hlck1hbmFnZXInO1xuaW1wb3J0IFJ1bnRpbWVDb3JlQ3R4IGZyb20gJy4uL3BvbGljeS9jb250ZXh0L1J1bnRpbWVDb3JlQ3R4Jztcbi8qKlxuICogUnVudGltZSBVc2VyIEFnZW50IEludGVyZmFjZSB3aWxsIHByb2Nlc3MgYWxsIHRoZSBkZXBlbmRlY2llcyBvZiB0aGUgY29yZSBydW50aW1lO1xuICogQGF1dGhvciBWaXRvciBTaWx2YSBbdml0b3ItdC1zaWx2YUB0ZWxlY29tLnB0XVxuICogQHZlcnNpb24gMC40LjBcbiAqXG4gKiBAcHJvcGVydHkge3J1bnRpbWVGYWN0b3J5fSBydW50aW1lRmFjdG9yeSAtIFNwZWNpZmljIGltcGxlbWVudGF0aW9uIGZvciBhbGwgZW52aXJvbm1lbnRzO1xuICogQHByb3BlcnR5IHtSdW50aW1lQ2F0YWxvZ3VlfSBydW50aW1lQ2F0YWxvZ3VlIC0gQ2F0YWxvZ3VlIG9mIGNvbXBvbmVudHMgY2FuIGJlIGluc3RhbGxlZDtcbiAqIEBwcm9wZXJ0eSB7cnVudGltZVVSTH0gcnVudGltZVVSTCAtIFRoaXMgaWRlbnRpZnkgdGhlIGNvcmUgcnVudGltZSwgc2hvdWxkIGJlIHVuaXF1ZTtcbiAqIEBwcm9wZXJ0eSB7SWRlbnRpdHlNb2R1bGV9IGlkZW50aXR5TW9kdWxlIC0gSWRlbnRpdHkgTW9kdWxlO1xuICogQHByb3BlcnR5IHtQRVB9IHBvbGljeUVuZ2luZSAtIFBvbGljeSBFbmdpbmUgTW9kdWxlO1xuICogQHByb3BlcnR5IHtSZWdpc3RyeX0gcmVnaXN0cnkgLSBSZWdpc3RyeSBNb2R1bGU7XG4gKiBAcHJvcGVydHkge01lc3NhZ2VCdXN9IG1lc3NhZ2VCdXMgLSBNZXNzYWdlIEJ1cyBpcyB1c2VkIGxpa2UgYSByb3V0ZXIgdG8gcmVkaXJlY3QgdGhlIG1lc3NhZ2VzIGZyb20gb25lIGNvbXBvbmVudCB0byBvdGhlcihzKVxuICogQHByb3BlcnR5IHtHcmFwaENvbm5lY3Rvcn0gZ3JhcGhDb25uZWN0b3IgLSBHcmFwaCBDb25uZWN0b3IgaGFuZGxpbmcgR1VJRCBhbmQgY29udGFjdHNcbiAqL1xuY2xhc3MgUnVudGltZVVBIHtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIFJ1bnRpbWUgVXNlciBBZ2VudFxuICAgKiBAcGFyYW0ge3J1bnRpbWVGYWN0b3J5fSBydW50aW1lRmFjdG9yeSAtIFNwZWNpZmljIGltcGxlbWVudGF0aW9uIGZvciB0aGUgZW52aXJvbm1lbnQgd2hlcmUgdGhlIGNvcmUgcnVudGltZSB3aWxsIHJ1bjtcbiAgICogQHBhcmFtIHtkb21haW59IGRvbWFpblVSTCAtIHNwZWNpZnkgdGhlIGRvbWFpbiBiYXNlIGZvciB0aGUgcnVudGltZTtcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVGYWN0b3J5LCBkb21haW4pIHtcblxuICAgIGlmICghcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIHNhbmRib3ggZmFjdG9yeSBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcbiAgICBpZiAoIWRvbWFpbikgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0aGUgZG9tYWluIG9mIHJ1bnRpbWUnKTtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvLyBDb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIGluZm9ybWF0aW9uIHJlbGF0ZWQgd2l0aCBzZXJ2ZXJzXG4gICAgX3RoaXMucnVudGltZUNvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKHtkb21haW46IGRvbWFpbn0sIHJ1bnRpbWVDb25maWd1cmF0aW9uKTtcblxuICAgIF90aGlzLnJ1bnRpbWVGYWN0b3J5ID0gcnVudGltZUZhY3Rvcnk7XG4gICAgX3RoaXMucnVudGltZUNhdGFsb2d1ZSA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTtcbiAgICBfdGhpcy5wZXJzaXN0ZW5jZU1hbmFnZXIgPSBydW50aW1lRmFjdG9yeS5wZXJzaXN0ZW5jZU1hbmFnZXIoKTtcblxuICAgIC8vIFByZXBhcmUgdGhlIGxvYWRlciB0byBsb2FkIHRoZSBoeXBlcnRpZXMsIHByb3Rvc3R1YnMgYW5kIGlkcHByb3h5O1xuICAgIF90aGlzLmxvYWRlciA9IG5ldyBMb2FkZXIoX3RoaXMucnVudGltZUNvbmZpZ3VyYXRpb24pO1xuXG4gICAgLy8gVE9ETzogcG9zdCBhbmQgcmV0dXJuIHJlZ2lzdHJ5L2h5cGVydHlSdW50aW1lSW5zdGFuY2UgdG8gYW5kIGZyb20gQmFjay1lbmQgU2VydmljZVxuICAgIC8vIHRoZSByZXNwb25zZSBpcyBsaWtlOiBydW50aW1lOi8vc3AxLzEyM1xuXG4gICAgbGV0IHJ1bnRpbWVVUkwgPSAncnVudGltZTovLycgKyBkb21haW4gKyAnLycgKyBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMTAwMDApICsgMSk7XG4gICAgX3RoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7XG4gICAgX3RoaXMuZG9tYWluID0gZG9tYWluO1xuXG4gICAgLy8gVE9ETzogY2hlY2sgaWYgcnVudGltZSBjYXRhbG9ndWUgbmVlZCB0aGUgcnVudGltZVVSTDtcbiAgICBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLnJ1bnRpbWVVUkwgPSBydW50aW1lVVJMO1xuXG4gICAgLy8gSW5zdGFudGlhdGUgdGhlIGlkZW50aXR5IE1vZHVsZVxuICAgIF90aGlzLmlkZW50aXR5TW9kdWxlID0gbmV3IElkZW50aXR5TW9kdWxlKHJ1bnRpbWVVUkwpO1xuXG4gICAgLy8gVXNlIHRoZSBzYW5kYm94IGZhY3RvcnkgdG8gY3JlYXRlIGFuIEFwcFNhbmRib3g7XG4gICAgLy8gSW4gdGhlIGZ1dHVyZSBjYW4gYmUgZGVjaWRlZCBieSBwb2xpY3lFbmdpbmUgaWYgd2UgbmVlZFxuICAgIC8vIGNyZWF0ZSBhIEFwcFNhbmRib3ggb3Igbm90O1xuICAgIGxldCBhcHBTYW5kYm94ID0gcnVudGltZUZhY3RvcnkuY3JlYXRlQXBwU2FuZGJveCgpO1xuXG4gICAgLy8gSW5zdGFudGlhdGUgdGhlIFJlZ2lzdHJ5IE1vZHVsZVxuICAgIF90aGlzLnJlZ2lzdHJ5ID0gbmV3IFJlZ2lzdHJ5KHJ1bnRpbWVVUkwsIGFwcFNhbmRib3gsIF90aGlzLmlkZW50aXR5TW9kdWxlLCBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlKTtcblxuICAgIC8vIFNldCB0aGUgbG9hZGVyIHRvIGxvYWQgSHlwZXJ0aWVzLCBTdHVicyBhbmQgSWRwUHJveGllc1xuICAgIF90aGlzLnJlZ2lzdHJ5LmxvYWRlciA9IF90aGlzLmxvYWRlcjtcblxuICAgIC8vIEluc3RhbnRpYXRlIHRoZSBNZXNzYWdlIEJ1c1xuICAgIF90aGlzLm1lc3NhZ2VCdXMgPSBuZXcgTWVzc2FnZUJ1cyhfdGhpcy5yZWdpc3RyeSk7XG5cbiAgICAvLyBJbnN0YW50aWF0ZSB0aGUgUG9saWN5IEVuZ2luZVxuICAgIF90aGlzLnBvbGljeUVuZ2luZSA9IG5ldyBQRVAobmV3IFJ1bnRpbWVDb3JlQ3R4KF90aGlzLmlkZW50aXR5TW9kdWxlLCBfdGhpcy5yZWdpc3RyeSwgX3RoaXMucGVyc2lzdGVuY2VNYW5hZ2VyKSk7XG5cbiAgICBfdGhpcy5tZXNzYWdlQnVzLnBpcGVsaW5lLmhhbmRsZXJzID0gW1xuXG4gICAgICAvLyBQb2xpY3kgbWVzc2FnZSBhdXRob3Jpc2VcbiAgICAgIGZ1bmN0aW9uKGN0eCkge1xuICAgICAgICBfdGhpcy5wb2xpY3lFbmdpbmUuYXV0aG9yaXNlKGN0eC5tc2cpLnRoZW4oZnVuY3Rpb24oY2hhbmdlZE1ncykge1xuICAgICAgICAgIGN0eC5tc2cgPSBjaGFuZ2VkTWdzO1xuICAgICAgICAgIGN0eC5uZXh0KCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uKTtcbiAgICAgICAgICBjdHguZmFpbChyZWFzb24pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICBdO1xuXG4gICAgLy8gQWRkIHRvIEFwcCBTYW5kYm94IHRoZSBsaXN0ZW5lcjtcbiAgICBhcHBTYW5kYm94LmFkZExpc3RlbmVyKCcqJywgZnVuY3Rpb24obXNnKSB7XG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWdpc3RlciBtZXNzYWdlQnVzIG9uIFJlZ2lzdHJ5XG4gICAgX3RoaXMucmVnaXN0cnkubWVzc2FnZUJ1cyA9IF90aGlzLm1lc3NhZ2VCdXM7XG5cbiAgICAvLyBSZWdpc3RlciByZWdpc3RyeSBvbiBJZGVudGl0eU1vZHVsZVxuICAgIF90aGlzLmlkZW50aXR5TW9kdWxlLnJlZ2lzdHJ5ID0gX3RoaXMucmVnaXN0cnk7XG5cbiAgICAvLyBVc2Ugc2FuZGJveCBmYWN0b3J5IHRvIHVzZSBzcGVjaWZpYyBtZXRob2RzXG4gICAgLy8gYW5kIHNldCB0aGUgbWVzc2FnZSBidXMgdG8gdGhlIGZhY3RvcnlcbiAgICBydW50aW1lRmFjdG9yeS5tZXNzYWdlQnVzID0gX3RoaXMubWVzc2FnZUJ1cztcblxuICAgIC8vIEluc3RhbmNpYXRlIHRoZSBTeW5jaGVyTWFuYWdlcjtcbiAgICBfdGhpcy5zeW5jaGVyTWFuYWdlciA9IG5ldyBTeW5jaGVyTWFuYWdlcihfdGhpcy5ydW50aW1lVVJMLCBfdGhpcy5tZXNzYWdlQnVzLCBfdGhpcy5yZWdpc3RyeSwgX3RoaXMucnVudGltZUNhdGFsb2d1ZSk7XG5cbiAgICAvLyBTZXQgaW50byBsb2FkZXIgdGhlIG5lZWRlZCBjb21wb25lbnRzO1xuICAgIF90aGlzLmxvYWRlci5yZWdpc3RyeSA9IF90aGlzLnJlZ2lzdHJ5O1xuICAgIF90aGlzLmxvYWRlci5ydW50aW1lVVJMID0gX3RoaXMucnVudGltZVVSTDtcbiAgICBfdGhpcy5sb2FkZXIubWVzc2FnZUJ1cyA9IF90aGlzLm1lc3NhZ2VCdXM7XG4gICAgX3RoaXMubG9hZGVyLnJ1bnRpbWVDYXRhbG9ndWUgPSBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlO1xuICAgIF90aGlzLmxvYWRlci5ydW50aW1lRmFjdG9yeSA9IF90aGlzLnJ1bnRpbWVGYWN0b3J5O1xuXG4gICAgLy8gSW5zdGFudGlhdGUgdGhlIEdyYXBoIENvbm5lY3RvclxuICAgIC8vIF90aGlzLmdyYXBoQ29ubmVjdG9yID0gbmV3IEdyYXBoQ29ubmVjdG9yKF90aGlzLnJ1bnRpbWVVUkwsIF90aGlzLm1lc3NhZ2VCdXMpO1xuXG4gIH1cblxuICAvKipcbiAgKiBBY2NvbW9kYXRlIGludGVyb3BlcmFiaWxpdHkgaW4gSDJIIGFuZCBwcm90byBvbiB0aGUgZmx5IGZvciBuZXdseSBkaXNjb3ZlcmVkIGRldmljZXMgaW4gTTJNXG4gICogQHBhcmFtICB7Q2F0YWxvZ3VlRGF0YU9iamVjdC5IeXBlcnR5RGVzY3JpcHRvcn0gICBkZXNjcmlwdG9yICAgIGRlc2NyaXB0b3JcbiAgKi9cbiAgZGlzY292ZXJIaXBlcnR5KGRlc2NyaXB0b3IpIHtcbiAgICAvLyBCb2R5Li4uXG4gIH1cblxuICAvKipcbiAgKiBSZWdpc3RlciBIeXBlcnR5IGRlcGxveWVkIGJ5IHRoZSBBcHAgdGhhdCBpcyBwYXNzZWQgYXMgaW5wdXQgcGFyYW1ldGVyLiBUbyBiZSB1c2VkIHdoZW4gQXBwIGFuZCBIeXBlcnRpZXMgYXJlIGZyb20gdGhlIHNhbWUgZG9tYWluIG90aGVyd2lzZSB0aGUgUnVudGltZVVBIHdpbGwgcmFpc2UgYW4gZXhjZXB0aW9uIGFuZCB0aGUgQXBwIGhhcyB0byB1c2UgdGhlIGxvYWRIeXBlcnR5KC4uKSBmdW5jdGlvbi5cbiAgKiBAcGFyYW0gIHtPYmplY3R9IE9iamVjdCAgICAgICAgICAgICAgICAgICBoeXBlcnR5SW5zdGFuY2VcbiAgKiBAcGFyYW0gIHtVUkwuSHlwZXJ0eUNhdGFsb2d1ZVVSTH0gICAgICAgICBkZXNjcmlwdG9yICAgICAgZGVzY3JpcHRvclxuICAqL1xuICByZWdpc3Rlckh5cGVydHkoaHlwZXJ0eUluc3RhbmNlLCBkZXNjcmlwdG9yKSB7XG4gICAgLy8gQm9keS4uLlxuICB9XG5cbiAgLyoqXG4gICogRGVwbG95IEh5cGVydHkgZnJvbSBDYXRhbG9ndWUgVVJMXG4gICogQHBhcmFtICB7VVJMLkh5cGVydHlDYXRhbG9ndWVVUkx9ICAgIGh5cGVydHkgaHlwZXJ0eURlc2NyaXB0b3IgdXJsO1xuICAqL1xuICBsb2FkSHlwZXJ0eShoeXBlcnR5RGVzY3JpcHRvclVSTCkge1xuXG4gICAgaWYgKCFoeXBlcnR5RGVzY3JpcHRvclVSTCkgdGhyb3cgbmV3IEVycm9yKCdIeXBlcnR5IGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIHRoaXMubG9hZGVyLmxvYWRIeXBlcnR5KGh5cGVydHlEZXNjcmlwdG9yVVJMKVxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9KTtcblxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBEZXBsb3kgU3R1YiBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybFxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICBkb21haW4gICAgICAgICAgZG9tYWluXG4gICovXG4gIGxvYWRTdHViKHByb3Rvc3R1YlVSTCkge1xuXG4gICAgaWYgKCFwcm90b3N0dWJVUkwpIHRocm93IG5ldyBFcnJvcignUHJvdG9TdHViIGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIHRoaXMubG9hZGVyLmxvYWRTdHViKHByb3Rvc3R1YlVSTClcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogRGVwbG95IGlkcFByb3h5IGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW5cbiAgKi9cbiAgbG9hZElkcFByb3h5KGlkcFByb3h5VVJMKSB7XG5cbiAgICBpZiAoIWlkcFByb3h5VVJMKSB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBJRFAgUHJveHkgVVJMIGlzIGEgbmVlZGVkIHBhcmFtZXRlciwgY291bGQgYmUgYSBET01BSU4gb3IgYSBVUkwnKTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmxvYWRlci5sb2FkSWRwUHJveHkoaWRwUHJveHlVUkwpXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBjbG9zZSBhbGwgdGhlIHJ1bnRpbWU7IFVucmVnaXN0ZXIgYWxsIGh5cGVydGllcztcbiAgICogQHJldHVybiB7UHJvbWlzZTxCb29sZWFuPn0gcmVzdWx0IG9mIHRoZSBjbG9zZSBtZXRob2QsIHdpdGggdHJ1ZSBvciBmYWxzZSB0byB0aGUgb3BlcmF0aW9uIHN1Y2Nlc3M7XG4gICAqL1xuICBjbG9zZSgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgY29uc29sZS5pbmZvKCdVbnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXMnKTtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIF90aGlzLnJlZ2lzdHJ5LnVucmVnaXN0ZXJBbGxIeXBlcnRpZXMoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBjb25zb2xlLmluZm8oJ0FsbCB0aGUgaHlwZXJ0aWVzIGFyZSB1bnJlZ2lzdGVkIHdpdGggU3VjY2VzczonLCByZXN1bHQpO1xuICAgICAgICByZXNvbHZlKHRydWUpO1xuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB1bnJlZ2lzdGVyIHRoZSBoeXBlcnRpZXMnLCByZWFzb24pO1xuICAgICAgICByZWplY3QoZmFsc2UpO1xuICAgICAgfSk7XG5cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogVXNlZCB0byBjaGVjayBmb3IgdXBkYXRlcyBhYm91dCBjb21wb25lbnRzIGhhbmRsZWQgaW4gdGhlIENhdGFsb2d1ZSBpbmNsdWRpbmcgcHJvdG9jb2wgc3R1YnMgYW5kIEh5cGVydGllcy4gY2hlY2sgcmVsYXRpb25zaGlwIHdpdGggbGlmZWN5Y2xlIG1hbmFnZW1lbnQgcHJvdmlkZWQgYnkgU2VydmljZSBXb3JrZXJzXG4gICogQHBhcmFtICB7Q2F0YWxvZ3VlVVJMfSAgICAgICB1cmwgdXJsXG4gICovXG4gIGNoZWNrRm9yVXBkYXRlKHVybCkge1xuICAgIC8vIEJvZHkuLi5cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJ1bnRpbWVVQTtcbiIsImV4cG9ydCBjb25zdCBydW50aW1lQ29uZmlndXJhdGlvbiA9IHtcblxuICBydW50aW1lVVJMUzoge1xuICAgIHJlZ2lzdHJ5OiB7XG4gICAgICBwcmVmaXg6ICdoeXBlcnR5LXJ1bnRpbWU6Ly8nLFxuICAgICAgc3VmZml4OiAncmVnaXN0cnknXG4gICAgfSxcbiAgICBpZGVudGl0eU1vZHVsZToge1xuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJyxcbiAgICAgIHN1ZmZpeDogJy9pZG0nXG4gICAgfSxcbiAgICBydW50aW1lVUE6IHtcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXG4gICAgICBzdWZmaXg6ICcvdWEnXG4gICAgfSxcbiAgICBjYXRhbG9ndWU6IHtcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXG4gICAgICBzdWZmaXg6ICcvY2F0YWxvZ3VlJ1xuICAgIH0sXG4gICAgZ3JhcGhDb25uZWN0b3I6IHtcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXG4gICAgICBzdWZmaXg6ICcvZ3JhcGgnXG4gICAgfSxcbiAgICBzeW5jTWFuYWdlcjoge1xuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJyxcbiAgICAgIHN1ZmZpeDogJy9zbSdcbiAgICB9XG4gIH0sXG4gIGNhdGFsb2d1ZVVSTHM6IHtcbiAgICBwcm90b2NvbHN0dWI6IHtcbiAgICAgIHByZWZpeDogJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicsXG4gICAgICBzdWZmaXg6ICcvLndlbGwta25vd24vcHJvdG9jb2xzdHViLycsXG4gICAgICBmYWxsYmFjazogJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLiVkb21haW4lLy53ZWxsLWtub3duL3Byb3RvY29sc3R1Yi8nXG4gICAgfSxcbiAgICBpZHBQcm94eToge1xuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1jYXRhbG9ndWU6Ly9jYXRhbG9ndWUuJyxcbiAgICAgIHN1ZmZpeDogJy8ud2VsbC1rbm93bi9pZHAtcHJveHkvJyxcbiAgICAgIGZhbGxiYWNrOiAnaHlwZXJ0eS1jYXRhbG9ndWU6Ly9jYXRhbG9ndWUuJWRvbWFpbiUvLndlbGwta25vd24vaWRwLXByb3h5LydcbiAgICB9XG4gIH0sXG4gIG1zZ05vZGVVUkw6IHtcbiAgICBwcmVmaXg6ICdkb21haW46Ly9tc2ctbm9kZS4nLFxuICAgIHN1ZmZpeDogJycsXG4gICAgaHlwZXJ0eUFkZHJlc3NBbGxvY2F0aW9uOiAnL2h5cGVydHktYWRkcmVzcy1hbGxvY2F0aW9uJyxcbiAgICBvYmplY3RBZGRyZXNzQWxsb2NhdGlvbjogJy9vYmplY3QtYWRkcmVzcy1hbGxvY2F0aW9uJyxcbiAgICBzdWJzY3JpcHRpb25NYW5hZ2VtZW50OiAnL3NtJ1xuICB9LFxuICBkb21haW5SZWdpc3RyeVVSTDoge1xuICAgIHByZWZpeDogJ2RvbWFpbjovL3JlZ2lzdHJ5LicsXG4gICAgc3VmZml4OiAnJ1xuICB9LFxuICBnbG9iYWxSZWdpc3RyeVVSTDogJ2dsb2JhbDovL3JlZ2lzdHJ5Lidcbn07XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5jbGFzcyBPYmplY3RBbGxvY2F0aW9uIHtcbiAgLyogcHJpdmF0ZVxuICBfdXJsOiBVUkxcbiAgX2J1czogTWluaUJ1c1xuICAqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gT2JqZWN0IEFsbG9jYXRpb25cbiAgICogQHBhcmFtICB7VVJMLlVSTH0gICAgICB1cmwgLSB1cmwgZnJvbSB3aG8gaXMgc2VuZGluZyB0aGUgbWVzc2FnZVxuICAgKiBAcGFyYW0gIHtNaW5pQnVzfSAgICAgIGJ1cyAtIE1pbmlCdXMgdXNlZCBmb3IgYWRkcmVzcyBhbGxvY2F0aW9uXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih1cmwsIGJ1cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fdXJsID0gdXJsO1xuICAgIF90aGlzLl9idXMgPSBidXM7XG4gIH1cblxuICAvKipcbiAgICogZ2V0IHRoZSBVUkwgdmFsdWVcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgdXJsIHZhbHVlO1xuICAgKi9cbiAgZ2V0IHVybCgpIHsgcmV0dXJuIHRoaXMuX3VybDsgfVxuXG4gIC8qKlxuICAgKiBBc2sgZm9yIGNyZWF0aW9uIG9mIGEgbnVtYmVyIG9mIE9iamVjdCBhZGRyZXNzZXMsIHRvIHRoZSBkb21haW4gbWVzc2FnZSBub2RlLlxuICAgKiBAcGFyYW0gIHtEb21haW59IGRvbWFpbiAtIERvbWFpbiBvZiB0aGUgbWVzc2FnZSBub2RlLlxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IG51bWJlciAtIE51bWJlciBvZiBhZGRyZXNzZXMgdG8gcmVxdWVzdFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxPYmplY3RVUkw+fSAgQSBsaXN0IG9mIE9iamVjdFVSTCdzXG4gICAqL1xuICBjcmVhdGUoZG9tYWluLCBzY2hlbWUsIG51bWJlcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gbXNnLW5vZGUgT2JqZWN0QWxsb2NhdGlvbk1hbmFnZXIgY29tcG9uZW50XG4gICAgbGV0IG1zZyA9IHtcbiAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL29iamVjdC1hZGRyZXNzLWFsbG9jYXRpb24nLFxuICAgICAgYm9keTogeyBzY2hlbWU6IHNjaGVtZSwgdmFsdWU6IHsgbnVtYmVyOiBudW1iZXIgfSB9XG4gICAgfTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIHJlc29sdmUocmVwbHkuYm9keS52YWx1ZS5hbGxvY2F0ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBPYmplY3RBbGxvY2F0aW9uO1xuIiwiaW1wb3J0IHsgZGl2aWRlVVJMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5cbmNsYXNzIE9ic2VydmVyT2JqZWN0IHtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnQsIHVybCwgY2hpbGRyZW5zKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgX3RoaXMuX3VybCA9IHVybDtcbiAgICBfdGhpcy5fY2hpbGRyZW5zID0gY2hpbGRyZW5zO1xuXG4gICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzO1xuICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307XG4gIH1cblxuICBhZGRTdWJzY3JpcHRpb24oaHlwZXJ0eSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XSA9IG5ldyBTdWJzY3JpcHRpb24oX3RoaXMuX2J1cywgaHlwZXJ0eSwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgZmFsc2UpO1xuICB9XG5cbiAgcmVtb3ZlU3Vic2NyaXB0aW9uKGh5cGVydHkpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChoeXBlcnR5KS5kb21haW47XG4gICAgbGV0IG9ialVSTFN1YnNjcmlwdGlvbiA9IF90aGlzLl91cmwgKyAnL3N1YnNjcmlwdGlvbic7XG5cbiAgICBsZXQgc3Vic2NyaXB0aW9uID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eV07XG4gICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHJlbW90ZSBSZXBvcnRlck9iamVjdCAtPiBfb25SZW1vdGVVblN1YnNjcmliZVxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbixcbiAgICAgICAgYm9keTogeyByZXNvdXJjZTogX3RoaXMuX3VybCB9XG4gICAgICB9KTtcblxuICAgICAgLy9UT0RPOiBzaG91bGQgSSB3YWl0IGZvciByZXNwb25zZSBiZWZvcmUgdW5zdWJzY3JpYmUgb24gbXNnLW5vZGVcbiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudFxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9zbScsXG4gICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwsIGNoaWxkcmVuUmVzb3VyY2VzOiBfdGhpcy5fY2hpbGRyZW5zIH1cbiAgICAgIH0pO1xuXG4gICAgICBzdWJzY3JpcHRpb24uX3JlbGVhc2VMaXN0ZW5lcnMoKTtcbiAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XTtcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBPYnNlcnZlck9iamVjdDtcbiIsImltcG9ydCB7IGRpdmlkZVVSTCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuXG5jbGFzcyBSZXBvcnRlck9iamVjdCB7XG5cbiAgY29uc3RydWN0b3IocGFyZW50LCBvd25lciwgdXJsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgX3RoaXMuX293bmVyID0gb3duZXI7XG4gICAgX3RoaXMuX3VybCA9IHVybDtcblxuICAgIF90aGlzLl9idXMgPSBwYXJlbnQuX2J1cztcblxuICAgIF90aGlzLl9kb21haW4gPSBkaXZpZGVVUkwob3duZXIpLmRvbWFpbjtcbiAgICBfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwgPSBfdGhpcy5fdXJsICsgJy9zdWJzY3JpcHRpb24nO1xuXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICBfdGhpcy5fY2hpbGRyZW5zID0gW107XG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107XG5cbiAgICBfdGhpcy5fZm9yd2FyZHMgPSB7fTtcblxuICAgIF90aGlzLl9hbGxvY2F0ZUxpc3RlbmVycygpO1xuICB9XG5cbiAgX2FsbG9jYXRlTGlzdGVuZXJzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAvL2FkZCBzdWJzY3JpcHRpb24gbGlzdGVuZXIuLi5cbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9uTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCwgKG1zZykgPT4ge1xuICAgICAgY29uc29sZS5sb2coX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMICsgJy1SQ1Y6ICcsIG1zZyk7XG4gICAgICBzd2l0Y2ggKG1zZy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3N1YnNjcmliZSc6IF90aGlzLl9vblJlbW90ZVN1YnNjcmliZShtc2cpOyBicmVhaztcbiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOiBfdGhpcy5fb25SZW1vdGVVblN1YnNjcmliZShtc2cpOyBicmVhaztcbiAgICAgICAgY2FzZSAncmVzcG9uc2UnOiBfdGhpcy5fb25SZW1vdGVSZXNwb25zZShtc2cpOyBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBjaGFuZ2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGFuZ2VzJztcbiAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoYW5nZVVSTCwgKG1zZykgPT4ge1xuICAgICAgLy9UT0RPOiB3aGF0IHRvZG8gaGVyZT8gU2F2ZSBjaGFuZ2VzP1xuICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLScgKyBjaGFuZ2VVUkwgKyAnLVJDVjogJywgbXNnKTtcbiAgICB9KTtcbiAgfVxuXG4gIF9yZWxlYXNlTGlzdGVuZXJzKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9uTGlzdGVuZXIucmVtb3ZlKCk7XG5cbiAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCk7XG5cbiAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMuZm9yRWFjaCgoY2wpID0+IHtcbiAgICAgIGNsLnJlbW92ZSgpO1xuICAgIH0pO1xuXG4gICAgT2JqZWN0LmtleXMoX3RoaXMuX2ZvcndhcmRzKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIF90aGlzLmZvcndhcmRVblN1YnNjcmliZShrZXkpO1xuICAgIH0pO1xuXG4gICAgLy9yZW1vdmUgYWxsIHN1YnNjcmlwdGlvbnNcbiAgICBPYmplY3Qua2V5cyhfdGhpcy5fc3Vic2NyaXB0aW9ucykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1trZXldLl9yZWxlYXNlTGlzdGVuZXJzKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBsaXN0ZW5lciBpbiB0aGUgbXNnLW5vZGUgYW5kIGluIHRoZSBsb2NhbCBNZXNzYWdlQnVzLCBzbyB0aGF0IG1lc3NhZ2VzIG9uIHRoaXMgYWRkcmVzcyBhcmUgZm9yd2FyZGVkIHRvIHRoZSByZXBvcnRlciBvYmplY3RcbiAgICogQHBhcmFtICB7c3RyaW5nfSBhZGRyZXNzIC0gVVJMIHRvIHJlZ2lzdGVyIHRoZSBsaXN0ZW5lcnNcbiAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJuIFByb21pc2UgT0sgb3IgZXJyb3JcbiAgICovXG4gIGZvcndhcmRTdWJzY3JpYmUoYWRkcmVzc2VzKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnRcbiAgICBsZXQgbm9kZVN1YnNjcmliZU1zZyA9IHtcbiAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJyxcbiAgICAgIGJvZHk6IHsgc3Vic2NyaWJlOiBhZGRyZXNzZXMsIHNvdXJjZTogX3RoaXMuX293bmVyIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdmb3J3YXJkLXN1YnNjcmliZS1yZXNwb25zZShyZXBvcnRlcik6ICcsIHJlcGx5KTtcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG4gICAgICAgICAgbGV0IG5ld0ZvcndhcmQgPSBfdGhpcy5fYnVzLmFkZEZvcndhcmQoX3RoaXMuX3VybCwgX3RoaXMuX293bmVyKTtcbiAgICAgICAgICBfdGhpcy5fZm9yd2FyZHNbYWRkcmVzc2VzWzBdXSA9IG5ld0ZvcndhcmQ7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gbXNnLW5vZGUgc3Vic2NyaXB0aW9uOiAnICsgcmVwbHkuYm9keS5kZXNjKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVW5SZWdpc3RlciBhIGxpc3RlbmVyIGluIHRoZSBtc2ctbm9kZSBhbmQgaW4gdGhlIGxvY2FsIE1lc3NhZ2VCdXMsIHNvIHRoYXQgbWVzc2FnZXMgb24gdGhpcyBhZGRyZXNzIGFyZSByZW1vdmVkIGZyb20gZm9yd2FyZFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IGFkZHJlc3MgLSBVUkwgdG8gdW4tcmVnaXN0ZXIgdGhlIGxpc3RlbmVyc1xuICAgKi9cbiAgZm9yd2FyZFVuU3Vic2NyaWJlKGFkZHJlc3MpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3NdLnJlbW92ZSgpO1xuICAgIGRlbGV0ZSBfdGhpcy5fZm9yd2FyZHNbYWRkcmVzc107XG5cbiAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50XG4gICAgbGV0IG5vZGVVblN1YnNjcmliZU1zZyA9IHtcbiAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgX3RoaXMuX2RvbWFpbiArICcvc20nLFxuICAgICAgYm9keTogeyBzdWJzY3JpYmU6IFthZGRyZXNzXSwgc291cmNlOiBfdGhpcy5fb3duZXIgfVxuICAgIH07XG5cbiAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVVblN1YnNjcmliZU1zZyk7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgbGlzdGVuZXJzIGZvciBhIGxpc3Qgb2YgY2hpbGRyZW5zLiBQdWJsaWMgY2hhbm5lbHMgdXNlZCB0byB0cmFuc21pdCBtZXNzYWdlcy5cbiAgICogQHBhcmFtICB7c3RyaW5nW119IGNoaWxkcmVucyAtIGNoYW5uZWxzIHRvIHJlZ2lzdGVyXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybiBQcm9taXNlIE9LIG9yIGVycm9yXG4gICAqL1xuICBhZGRDaGlsZHJlbnMoY2hpbGRyZW5zKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAoY2hpbGRyZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbGV0IGNoaWxkQmFzZVVSTCA9IF90aGlzLl91cmwgKyAnL2NoaWxkcmVuLyc7XG4gICAgICBfdGhpcy5fY2hpbGRyZW5zLnB1c2goY2hpbGRyZW5zKTtcblxuICAgICAgLypcbiAgICAgIF90aGlzLl9jaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgbGV0IGNoaWxkSWQgPSBjaGlsZEJhc2VVUkwgKyBjaGlsZDtcblxuICAgICAgICBsZXQgc2VsZkZvcndhcmQgPSBfdGhpcy5fYnVzLmFkZEZvcndhcmQoY2hpbGRJZCwgb3duZXIpO1xuICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7XG4gICAgICB9KTsqL1xuXG4gICAgICBsZXQgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiBzdWJzY3JpcHRpb25zLnB1c2goY2hpbGRCYXNlVVJMICsgY2hpbGQpKTtcblxuICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBTdWJzY3JpcHRpb25NYW5hZ2VyIGNvbXBvbmVudFxuICAgICAgbGV0IG5vZGVTdWJzY3JpYmVNc2cgPSB7XG4gICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJyxcbiAgICAgICAgYm9keTogeyBzdWJzY3JpYmU6IHN1YnNjcmlwdGlvbnMsIHNvdXJjZTogX3RoaXMuX293bmVyIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdub2RlLXN1YnNjcmliZS1yZXNwb25zZShyZXBvcnRlcik6ICcsIHJlcGx5KTtcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XG5cbiAgICAgICAgICAvL2FkZCBjaGlsZHJlbiBsaXN0ZW5lcnMgb24gbG9jYWwgLi4uXG4gICAgICAgICAgc3Vic2NyaXB0aW9ucy5mb3JFYWNoKChjaGlsZFVSTCkgPT4ge1xuICAgICAgICAgICAgbGV0IGNoaWxkTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoaWxkVVJMLCAobXNnKSA9PiB7XG4gICAgICAgICAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hpbGRyZW5zP1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3luY2hlck1hbmFnZXItJyArIGNoaWxkVVJMICsgJy1SQ1Y6ICcsIG1zZyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGNoaWxkTGlzdGVuZXIpO1xuXG4gICAgICAgICAgICBsZXQgc2VsZkZvcndhcmQgPSBfdGhpcy5fYnVzLmFkZEZvcndhcmQoY2hpbGRVUkwsIF90aGlzLl9vd25lcik7XG4gICAgICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdFcnJvciBvbiBtc2ctbm9kZSBzdWJzY3JpcHRpb246ICcgKyByZXBseS5ib2R5LmRlc2MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZSgpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwoX3RoaXMuX293bmVyKS5kb21haW47XG5cbiAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgZGlyZWN0bHkgdG8gYWxsIHN1YnNjcmliZXJzIG9mIHRoZSByZXBvcnRlclxuICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLl9vYmpTdWJzY3JpcHRvclVSTCwgdG86IF90aGlzLl91cmwgKyAnL2NoYW5nZXMnXG4gICAgfSk7XG5cbiAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIE9iamVjdEFsbG9jYXRpb25NYW5hZ2VyIGNvbXBvbmVudFxuICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9vYmplY3QtYWRkcmVzcy1hbGxvY2F0aW9uJyxcbiAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IF90aGlzLl91cmwsIGNoaWxkcmVuUmVzb3VyY2VzOiBfdGhpcy5fY2hpbGRyZW5zIH1cbiAgICB9KTtcblxuICAgIF90aGlzLl9yZWxlYXNlTGlzdGVuZXJzKCk7XG4gICAgZGVsZXRlIF90aGlzLl9wYXJlbnQuX3JlcG9ydGVyc1tfdGhpcy5fdXJsXTtcbiAgfVxuXG4gIF9vblJlbW90ZVJlc3BvbnNlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IF90aGlzLl91cmwsXG4gICAgICBib2R5OiB7IGNvZGU6IG1zZy5ib2R5LmNvZGUsIGlkZW50aXR5OiBtc2cuYm9keS5pZGVudGl0eSwgc291cmNlOiBtc2cuZnJvbSB9XG4gICAgfSk7XG4gIH1cblxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBTeW5jaGVyIC0+IHN1YnNjcmliZVxuICBfb25SZW1vdGVTdWJzY3JpYmUobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgaHlwZXJ0eVVSTCA9IG1zZy5ib2R5LnN1YnNjcmliZXI7XG5cbiAgICAvL3ZhbGlkYXRlIGlmIHN1YnNjcmlwdGlvbiBhbHJlYWR5IGV4aXN0cz9cbiAgICBpZiAoX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF0pIHtcbiAgICAgIGxldCBlcnJvck1zZyA9IHtcbiAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCxcbiAgICAgICAgYm9keTogeyBjb2RlOiA1MDAsIGRlc2M6ICdTdWJzY3JpcHRpb24gZm9yICgnICsgX3RoaXMuX3VybCArICcgOiAnICsgIGh5cGVydHlVUkwgKyAnKSBhbHJlYWR5IGV4aXN0cyEnIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoZXJyb3JNc2cpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vYXNrIHRvIHN1YnNjcmliZSB0byBTeW5jaGVyPyAoZGVwZW5kcyBvbiB0aGUgb3BlcmF0aW9uIG1vZGUpXG4gICAgLy9UT0RPOiBnZXQgbW9kZSBmcm9tIG9iamVjdCFcbiAgICBsZXQgbW9kZSA9ICdzdWIvcHViJztcblxuICAgIGlmIChtb2RlID09PSAnc3ViL3B1YicpIHtcbiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBsb2NhbCBoeXBlcnR5IGFkZHJlc3MgU3luY2hlciAtPiBfb25Gb3J3YXJkXG4gICAgICBsZXQgZm9yd2FyZE1zZyA9IHtcbiAgICAgICAgdHlwZTogJ2ZvcndhcmQnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogX3RoaXMuX293bmVyLFxuICAgICAgICBib2R5OiB7IHR5cGU6IG1zZy50eXBlLCBmcm9tOiBoeXBlcnR5VVJMLCB0bzogX3RoaXMuX3VybCwgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5IH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoZm9yd2FyZE1zZywgKHJlcGx5KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdmb3J3YXJkLXJlcGx5OiAnLCByZXBseSk7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuICAgICAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdID0gbmV3IFN1YnNjcmlwdGlvbihfdGhpcy5fYnVzLCBfdGhpcy5fb3duZXIsIF90aGlzLl91cmwsIF90aGlzLl9jaGlsZHJlbnMsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaXB0aW9uIHJlc3BvbnNlIHNlbnQgKGZvcndhcmQgZnJvbSBpbnRlcm5hbCBIeXBlcnR5KVxuICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBtc2cuZnJvbSxcbiAgICAgICAgICBib2R5OiByZXBseS5ib2R5XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcbiAgICB9XG5cbiAgfVxuXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIHJlbW90ZSBPYnNlcnZlck9iamVjdCAtPiByZW1vdmVTdWJzY3JpcHRpb25cbiAgX29uUmVtb3RlVW5TdWJzY3JpYmUobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBsZXQgaHlwZXJ0eVVSTCA9IG1zZy5ib2R5LnN1YnNjcmliZXI7XG5cbiAgICBsZXQgc3Vic2NyaXB0aW9uID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF07XG4gICAgaWYgKHN1YnNjcmlwdGlvbikge1xuICAgICAgc3Vic2NyaXB0aW9uLl9yZWxlYXNlTGlzdGVuZXJzKCk7XG4gICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF07XG5cbiAgICAgIC8vVE9ETzogc2VuZCB1bi1zdWJzY3JpYmUgbWVzc2FnZSB0byBTeW5jaGVyPyAoZGVwZW5kcyBvbiB0aGUgb3BlcmF0aW9uIG1vZGUpXG4gICAgfVxuXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSZXBvcnRlck9iamVjdDtcbiIsImNsYXNzIFN1YnNjcmlwdGlvbiB7XG5cbiAgY29uc3RydWN0b3IoYnVzLCBvd25lciwgdXJsLCBjaGlsZHJlbnMsIGlzUmVwb3J0ZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBjaGlsZEJhc2VVUkwgPSB1cmwgKyAnL2NoaWxkcmVuLyc7XG4gICAgbGV0IGNoYW5nZVVSTCA9IHVybCArICcvY2hhbmdlcyc7XG5cbiAgICAvL3Byb2Nlc3MgZGVsZXRlIG1lc3NhZ2VcbiAgICBfdGhpcy5fZGVsZXRlTGlzdGVuZXIgPSBidXMuYWRkTGlzdGVuZXIoY2hhbmdlVVJMLCAobXNnKSA9PiB7XG4gICAgICBpZiAobXNnLnR5cGUgPT09ICdkZWxldGUnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24tREVMRVRFOiAnLCBtc2cpO1xuXG4gICAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBhbGwgc3Vic2NyaWJlcnNcbiAgICAgICAgbGV0IGRlbGV0ZU1lc3NhZ2VUb0h5cGVydHkgPSB7XG4gICAgICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IG1zZy5mcm9tLCB0bzogb3duZXIsXG4gICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHJlc291cmNlOiB1cmwgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vc2VuZCBkZWxldGUgdG8gaHlwZXJ0eVxuICAgICAgICBidXMucG9zdE1lc3NhZ2UoZGVsZXRlTWVzc2FnZVRvSHlwZXJ0eSwgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1N1YnNjcmlwdGlvbi1ERUxFVEUtUkVQTFk6ICcsIHJlcGx5KTtcbiAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICAgIF90aGlzLl9yZWxlYXNlTGlzdGVuZXJzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vYWRkIGNoYW5nZSBwdWJsaXNoIGFkZHJlc3Mgb3IgZm9yd2FyZFxuICAgIGlmIChpc1JlcG9ydGVyKSB7XG4gICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBidXMuYWRkUHVibGlzaChjaGFuZ2VVUkwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBidXMuYWRkRm9yd2FyZChjaGFuZ2VVUkwsIG93bmVyKTtcbiAgICB9XG5cbiAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMgPSBbXTtcbiAgICBjaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIGxldCBjaGlsZElkID0gY2hpbGRCYXNlVVJMICsgY2hpbGQ7XG5cbiAgICAgIC8vYWRkIGNoaWxkcmVuIHB1Ymxpc2ggYWRkcmVzc1xuICAgICAgbGV0IGNoaWxkcmVuRm9yd2FyZCA9IGJ1cy5hZGRQdWJsaXNoKGNoaWxkSWQpO1xuICAgICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLnB1c2goY2hpbGRyZW5Gb3J3YXJkKTtcblxuICAgICAgLy9hZGQgc2VsZiBmb3J3YXJkIGlmIGFuIG9ic2VydmVyXG4gICAgICBpZiAoIWlzUmVwb3J0ZXIpIHtcbiAgICAgICAgbGV0IHNlbGZGb3J3YXJkID0gYnVzLmFkZEZvcndhcmQoY2hpbGRJZCwgb3duZXIpO1xuICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBfcmVsZWFzZUxpc3RlbmVycygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMuX2RlbGV0ZUxpc3RlbmVyLnJlbW92ZSgpO1xuXG4gICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyLnJlbW92ZSgpO1xuXG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLmZvckVhY2goKGZvcndhcmQpID0+IHtcbiAgICAgIGZvcndhcmQucmVtb3ZlKCk7XG4gICAgfSk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTdWJzY3JpcHRpb247XG4iLCIvKipcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cbipcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbipcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKiovXG5pbXBvcnQgeyBkaXZpZGVVUkwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5pbXBvcnQgT2JqZWN0QWxsb2NhdGlvbiBmcm9tICcuL09iamVjdEFsbG9jYXRpb24nO1xuaW1wb3J0IFJlcG9ydGVyT2JqZWN0IGZyb20gJy4vUmVwb3J0ZXJPYmplY3QnO1xuaW1wb3J0IE9ic2VydmVyT2JqZWN0IGZyb20gJy4vT2JzZXJ2ZXJPYmplY3QnO1xuaW1wb3J0IHR2NCBmcm9tICcuLi91dGlscy90djQnO1xuXG5pbXBvcnQge01lc3NhZ2VGYWN0b3J5fSBmcm9tICdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5JztcblxuLyoqXG4gKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXG4gKiBDb3JlIFN5bmNyb25pemF0aW9uIHN5c3RlbS5cbiAqL1xuY2xhc3MgU3luY2hlck1hbmFnZXIge1xuICAvKiBwcml2YXRlXG4gIF91cmw6IFVSTFxuICBfYnVzOiBNaW5pQnVzXG4gIF9yZWdpc3RyeTogUmVnaXN0cnlcbiAgX2FsbG9jYXRvcjogT2JqZWN0QWxsb2NhdGlvblxuXG4gIF9yZXBvcnRlcnM6IHsgT2JqZWN0VVJMOiBSZXBvcnRlck9iamVjdCB9XG4gIF9vYnNlcnZlcnM6IHsgT2JqZWN0VVJMOiBPYnNlcnZlck9iamVjdCB9XG4gICovXG5cbiAgY29uc3RydWN0b3IocnVudGltZVVSTCwgYnVzLCByZWdpc3RyeSwgY2F0YWxvZywgYWxsb2NhdG9yKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLl9idXMgPSBidXM7XG4gICAgX3RoaXMuX3JlZ2lzdHJ5ID0gcmVnaXN0cnk7XG4gICAgX3RoaXMuX2NhdGFsb2cgPSBjYXRhbG9nO1xuXG4gICAgLy9UT0RPOiB0aGVzZSBzaG91bGQgYmUgc2F2ZWQgaW4gcGVyc2lzdGVuY2UgZW5naW5lP1xuICAgIF90aGlzLl91cmwgPSBydW50aW1lVVJMICsgJy9zbSc7XG4gICAgX3RoaXMuX29iamVjdFVSTCA9IHJ1bnRpbWVVUkwgKyAnL29iamVjdC1hbGxvY2F0aW9uJztcblxuICAgIF90aGlzLl9yZXBvcnRlcnMgPSB7fTtcbiAgICBfdGhpcy5fb2JzZXJ2ZXJzID0ge307XG5cbiAgICAvL1RPRE86IHRoaXMgc2hvdWxkIG5vdCBiZSBoYXJkY29kZWQhXG4gICAgX3RoaXMuX2RvbWFpbiA9IGRpdmlkZVVSTChydW50aW1lVVJMKS5kb21haW47XG5cbiAgICBfdGhpcy5fbWYgPSBuZXcgTWVzc2FnZUZhY3RvcnkoZmFsc2UsIHt9KTtcblxuICAgIGlmIChhbGxvY2F0b3IpIHtcbiAgICAgIF90aGlzLl9hbGxvY2F0b3IgPSBhbGxvY2F0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIF90aGlzLl9hbGxvY2F0b3IgPSBuZXcgT2JqZWN0QWxsb2NhdGlvbihfdGhpcy5fb2JqZWN0VVJMLCBidXMpO1xuICAgIH1cblxuICAgIGJ1cy5hZGRMaXN0ZW5lcihfdGhpcy5fdXJsLCAobXNnKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnU3luY2hlck1hbmFnZXItUkNWOiAnLCBtc2cpO1xuICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xuICAgICAgICBjYXNlICdjcmVhdGUnOiBfdGhpcy5fb25DcmVhdGUobXNnKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2RlbGV0ZSc6IF90aGlzLl9vbkRlbGV0ZShtc2cpOyBicmVhaztcbiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzogX3RoaXMuX29uTG9jYWxTdWJzY3JpYmUobXNnKTsgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3Vuc3Vic2NyaWJlJzogX3RoaXMuX29uTG9jYWxVblN1YnNjcmliZShtc2cpOyBicmVhaztcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGdldCB1cmwoKSB7IHJldHVybiB0aGlzLl91cmw7IH1cblxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBTeW5jaGVyIC0+IGNyZWF0ZVxuICBfb25DcmVhdGUobXNnKSB7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBvd25lciA9IG1zZy5mcm9tO1xuICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwobXNnLmZyb20pLmRvbWFpbjtcblxuICAgIGlmIChtc2cuYm9keS5yZXNvdXJjZSkge1xuICAgICAgX3RoaXMuX2F1dGhvcmlzZShtc2csIG1zZy5ib2R5LnJlc291cmNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvL2dldCBzY2hlbWEgZnJvbSBjYXRhbG9ndWUgYW5kIHBhcnNlIC0+IChzY2hlbWUsIGNoaWxkcmVuKVxuICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKG1zZy5ib2R5LnNjaGVtZSkudGhlbigoZGVzY3JpcHRvcikgPT4ge1xuXG4gICAgICBsZXQgcHJvcGVydGllcyA9IGRlc2NyaXB0b3Iuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXM7XG4gICAgICBsZXQgc2NoZW1lID0gcHJvcGVydGllcy5zY2hlbWUgPyBwcm9wZXJ0aWVzLnNjaGVtZS5jb25zdGFudCA6ICdyZXNvdXJjZSc7XG4gICAgICBsZXQgY2hpbGRyZW5zID0gcHJvcGVydGllcy5jaGlsZHJlbiA/IHByb3BlcnRpZXMuY2hpbGRyZW4uY29uc3RhbnQgOiBbXTtcblxuICAgICAgY29uc29sZS5sb2coJ1NjaGVtZTogJywgc2NoZW1lKTtcblxuICAgICAgLy8gc2NoZW1hIHZhbGlkYXRpb25cbiAgICAgIGNvbnNvbGUubG9nKCdSdW5uaW5nIG9iamVjdCB2YWxpZGF0aW9uLi4uJyk7XG4gICAgICB0cnkge1xuICAgICAgICBsZXQgb2JqID0gbXNnLmJvZHkudmFsdWU7XG4gICAgICAgIGxldCBzY2hlbWEgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZTtcblxuICAgICAgICAvLyBhZGQgc3VwcG9ydCBmb3Igc2NoZW1hIHJlZmVyZW5jaW5nIGl0c2VsZlxuICAgICAgICB0djQuYWRkU2NoZW1hKHNjaGVtYS5pZCwgc2NoZW1hKTtcblxuICAgICAgICAvLyB2YWxpZGF0ZVxuICAgICAgICBsZXQgcmVzdWx0ID0gdHY0LnZhbGlkYXRlTXVsdGlwbGUob2JqLCBzY2hlbWEpO1xuXG4gICAgICAgIC8vIGRlbGV0ZSBlcnJvciBzdGFja3MgdG8gaW1wcm92ZSBsb2dnaW5nXG4gICAgICAgIHJlc3VsdC5lcnJvcnMuZm9yRWFjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICBkZWxldGUgZXJyb3Iuc3RhY2s7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHByaW50IG1vcmUgZGV0YWlscyBhYm91dCB2YWxpZGF0aW9uIGlmIGl0IGZhaWxzIG9yIHNjaGVtYSBjb250YWlucyAkcmVmc1xuICAgICAgICBpZiAoIXJlc3VsdC52YWxpZCB8fCAocmVzdWx0Lm1pc3NpbmcubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ09iamVjdCB2YWxpZGF0aW9uICcgKyAocmVzdWx0LnZhbGlkID8gJ3N1Y2NlZWRlZCwgYnV0IHNjaGVtYSBjb250YWluZWQgcmVmZXJlbmNlczonIDogJ2ZhaWxlZDonKSwgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKSk7XG4gICAgICAgICAgY29uc29sZS5kZWJ1ZygnT2JqZWN0OicsIEpTT04uc3RyaW5naWZ5KG9iaiwgbnVsbCwgMiksICdcXHJcXG5TY2hlbWE6JywgSlNPTi5zdHJpbmdpZnkoc2NoZW1hLCBudWxsLCAyKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ09iamVjdCB2YWxpZGF0aW9uIHN1Y2NlZWRlZCcpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgZHVyaW5nIG9iamVjdCB2YWxpZGF0aW9uOicsIGUpO1xuICAgICAgfVxuXG4gICAgICAvL3JlcXVlc3QgYWRkcmVzcyBhbGxvY2F0aW9uIG9mIGEgbmV3IG9iamVjdCBmcm9tIHRoZSBtc2ctbm9kZVxuICAgICAgX3RoaXMuX2FsbG9jYXRvci5jcmVhdGUoZG9tYWluLCBzY2hlbWUsIDEpLnRoZW4oKGFsbG9jYXRlZCkgPT4ge1xuICAgICAgICBsZXQgb2JqVVJMID0gYWxsb2NhdGVkWzBdO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCdBTExPQ0FUT1IgQ1JFQVRFOicsIGFsbG9jYXRlZCk7XG5cbiAgICAgICAgbGV0IHN1YnNjcmlwdGlvblVSTCA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJztcblxuICAgICAgICBjb25zb2xlLmxvZygnU3Vic2NyaXB0aW9uIFVSTCcsIHN1YnNjcmlwdGlvblVSTCk7XG5cbiAgICAgICAgLy9UbyByZWdpc3RlciB0aGUgZGF0YU9iamVjdCBpbiB0aGUgcnVudGltZVJlZ2lzdHJ5XG4gICAgICAgIGNvbnNvbGUuaW5mbygnUmVnaXN0ZXIgT2JqZWN0OiAnLCBtc2cuYm9keS52YWx1ZS5uYW1lLCBtc2cuYm9keS52YWx1ZS5zY2hlbWEsIG9ialVSTCwgbXNnLmJvZHkudmFsdWUucmVwb3J0ZXIsIG1zZy5ib2R5LnZhbHVlLnJlc291cmNlcyk7XG4gICAgICAgIF90aGlzLl9yZWdpc3RyeS5yZWdpc3RlckRhdGFPYmplY3QobXNnLmJvZHkudmFsdWUubmFtZSwgbXNnLmJvZHkudmFsdWUuc2NoZW1hLCBvYmpVUkwsIG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLCBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZXMsIG1zZy5ib2R5LmF1dGhvcmlzZSkudGhlbihmdW5jdGlvbihyZXNvbHZlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ0RhdGFPYmplY3Qgc3VjY2Vzc2Z1bGx5IHJlZ2lzdGVyZWQnLCByZXNvbHZlKTtcblxuICAgICAgICAgIC8vYWxsIE9LIC0+IGNyZWF0ZSByZXBvcnRlciBhbmQgcmVnaXN0ZXIgbGlzdGVuZXJzXG4gICAgICAgICAgbGV0IHJlcG9ydGVyID0gbmV3IFJlcG9ydGVyT2JqZWN0KF90aGlzLCBvd25lciwgb2JqVVJMKTtcbiAgICAgICAgICByZXBvcnRlci5mb3J3YXJkU3Vic2NyaWJlKFtvYmpVUkwsc3Vic2NyaXB0aW9uVVJMXSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICByZXBvcnRlci5hZGRDaGlsZHJlbnMoY2hpbGRyZW5zKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgX3RoaXMuX3JlcG9ydGVyc1tvYmpVUkxdID0gcmVwb3J0ZXI7XG5cbiAgICAgICAgICAgICAgLy9GTE9XLU9VVDogbWVzc2FnZSByZXNwb25zZSB0byBTeW5jaGVyIC0+IGNyZWF0ZVxuICAgICAgICAgICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lcixcbiAgICAgICAgICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCwgcmVzb3VyY2U6IG9ialVSTCwgY2hpbGRyZW5SZXNvdXJjZXM6IGNoaWxkcmVucyB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIC8vc2VuZCBjcmVhdGUgdG8gYWxsIG9ic2VydmVycywgcmVzcG9uc2VzIHdpbGwgYmUgZGVsaXZlciB0byB0aGUgSHlwZXJ0eSBvd25lcj9cbiAgICAgICAgICAgICAgLy9zY2hlZHVsZSBmb3IgbmV4dCBjeWNsZSBuZWVkZWQsIGJlY2F1c2UgdGhlIFJlcG9ydGVyIHNob3VsZCBiZSBhdmFpbGFibGUuXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vd2lsbCBpbnZpdGUgb3RoZXIgaHlwZXJ0aWVzXG4gICAgICAgICAgICAgICAgX3RoaXMuX2F1dGhvcmlzZShtc2csIG9ialVSTCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuXG4gICAgICB9KTtcbiAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAvL0ZMT1ctT1VUOiBlcnJvciBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlXG4gICAgICBsZXQgcmVzcG9uc2VNc2cgPSB7XG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG93bmVyLFxuICAgICAgICBib2R5OiB7IGNvZGU6IDUwMCwgZGVzYzogcmVhc29uIH1cbiAgICAgIH07XG5cbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVzcG9uc2VNc2cpO1xuICAgIH0pO1xuICB9XG5cbiAgX2F1dGhvcmlzZShtc2csIG9ialVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IG9ialN1YnNjcmlwdG9yVVJMID0gb2JqVVJMICsgJy9zdWJzY3JpcHRpb24nO1xuXG4gICAgbXNnLmJvZHkuYXV0aG9yaXNlLmZvckVhY2goKGh5cGVydHlVUkwpID0+IHtcbiAgICAgIC8vRkxPVy1PVVQ6IHNlbmQgaW52aXRlcyB0byBsaXN0IG9mIHJlbW90ZSBTeW5jaGVyIC0+IF9vblJlbW90ZUNyZWF0ZSAtPiBvbk5vdGlmaWNhdGlvblxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICdjcmVhdGUnLCBmcm9tOiBvYmpTdWJzY3JpcHRvclVSTCwgdG86IGh5cGVydHlVUkwsXG4gICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCBzb3VyY2U6IG1zZy5mcm9tLCB2YWx1ZTogbXNnLmJvZHkudmFsdWUsIHNjaGVtZTogbXNnLmJvZHkuc2NoZW1lIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gRGF0YU9iamVjdFJlcG9ydGVyIC0+IGRlbGV0ZVxuICBfb25EZWxldGUobXNnKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBvYmpVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTtcblxuICAgIGxldCBvYmplY3QgPSBfdGhpcy5fcmVwb3J0ZXJzW29ialVSTF07XG4gICAgaWYgKG9iamVjdCkge1xuICAgICAgLy9UT0RPOiBpcyB0aGVyZSBhbnkgcG9saWN5IHZlcmlmaWNhdGlvbiBiZWZvcmUgZGVsZXRlP1xuICAgICAgb2JqZWN0LmRlbGV0ZSgpO1xuXG4gICAgICAvL1RPRE86IHVucmVnaXN0ZXIgb2JqZWN0P1xuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxuICAgICAgICBib2R5OiB7IGNvZGU6IDIwMCB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBsb2NhbCBTeW5jaGVyIC0+IHN1YnNjcmliZVxuICBfb25Mb2NhbFN1YnNjcmliZShtc2cpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGh5cGVydHlVUkwgPSBtc2cuZnJvbTtcbiAgICBsZXQgb2JqVVJMID0gbXNnLmJvZHkucmVzb3VyY2U7XG4gICAgbGV0IG9ialVSTFN1YnNjcmlwdGlvbiA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJztcbiAgICBsZXQgY2hpbGRCYXNlVVJMID0gb2JqVVJMICsgJy9jaGlsZHJlbi8nO1xuXG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChvYmpVUkwpLmRvbWFpbjtcblxuICAgIC8vZ2V0IHNjaGVtYSBmcm9tIGNhdGFsb2d1ZSBhbmQgcGFyc2UgLT4gKGNoaWxkcmVuKVxuICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKG1zZy5ib2R5LnNjaGVtYSkudGhlbigoZGVzY3JpcHRvcikgPT4ge1xuICAgICAgbGV0IHByb3BlcnRpZXMgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzO1xuICAgICAgbGV0IGNoaWxkcmVucyA9IHByb3BlcnRpZXMuY2hpbGRyZW4gPyBwcm9wZXJ0aWVzLmNoaWxkcmVuLmNvbnN0YW50IDogW107XG5cbiAgICAgIC8vY2hpbGRyZW4gYWRkcmVzc2VzXG4gICAgICBsZXQgc3Vic2NyaXB0aW9ucyA9IFtdO1xuICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKG9ialVSTCArICcvY2hhbmdlcycpO1xuICAgICAgY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiBzdWJzY3JpcHRpb25zLnB1c2goY2hpbGRCYXNlVVJMICsgY2hpbGQpKTtcblxuICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gdGhlIG1zZy1ub2RlLCByZWdpc3RlcmluZyBsaXN0ZW5lcnMgb24gdGhlIGJyb2tlclxuICAgICAgbGV0IG5vZGVTdWJzY3JpYmVNc2cgPSB7XG4gICAgICAgIHR5cGU6ICdzdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL3NtJyxcbiAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHN1YnNjcmliZTogc3Vic2NyaXB0aW9ucywgc291cmNlOiBoeXBlcnR5VVJMIH1cbiAgICAgIH07XG5cbiAgICAgIC8vc3Vic2NyaWJlIGluIG1zZy1ub2RlXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIChyZXBseSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnbm9kZS1zdWJzY3JpYmUtcmVzcG9uc2Uob2JzZXJ2ZXIpOiAnLCByZXBseSk7XG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuXG4gICAgICAgICAgLy9GTE9XLU9VVDogcmVwbHkgd2l0aCBwcm92aXNpb25hbCByZXNwb25zZVxuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogaHlwZXJ0eVVSTCxcbiAgICAgICAgICAgIGJvZHk6IHsgY29kZTogMTAwLCBjaGlsZHJlblJlc291cmNlczogY2hpbGRyZW5zIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vRkxPVy1PVVQ6IHN1YnNjcmliZSBtZXNzYWdlIHRvIHJlbW90ZSBSZXBvcnRlck9iamVjdCAtPiBfb25SZW1vdGVTdWJzY3JpYmVcbiAgICAgICAgICBsZXQgb2JqU3Vic2NyaWJlTXNnID0ge1xuICAgICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl91cmwsIHRvOiBvYmpVUkxTdWJzY3JpcHRpb24sXG4gICAgICAgICAgICBib2R5OiB7IGlkZW50aXR5OiBub2RlU3Vic2NyaWJlTXNnLmJvZHkuaWRlbnRpdHksIHN1YnNjcmliZXI6IGh5cGVydHlVUkwgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvL3N1YnNjcmliZSB0byByZXBvcnRlciBTTVxuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uob2JqU3Vic2NyaWJlTXNnLCAocmVwbHkpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZXBvcnRlci1zdWJzY3JpYmUtcmVzcG9uc2U6ICcsIHJlcGx5KTtcbiAgICAgICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xuXG4gICAgICAgICAgICAgIGxldCBvYnNlcnZlciA9IF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTtcbiAgICAgICAgICAgICAgaWYgKCFvYnNlcnZlcikge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyID0gbmV3IE9ic2VydmVyT2JqZWN0KF90aGlzLCBvYmpVUkwsIGNoaWxkcmVucyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdID0gb2JzZXJ2ZXI7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAvL3JlZ2lzdGVyIGh5cGVydHkgc3Vic2NyaXB0aW9uXG4gICAgICAgICAgICAgIG9ic2VydmVyLmFkZFN1YnNjcmlwdGlvbihoeXBlcnR5VVJMKTtcblxuICAgICAgICAgICAgICAvL2ZvcndhcmQgdG8gaHlwZXJ0eTpcbiAgICAgICAgICAgICAgcmVwbHkuaWQgPSBtc2cuaWQ7XG4gICAgICAgICAgICAgIHJlcGx5LmZyb20gPSBfdGhpcy5fdXJsO1xuICAgICAgICAgICAgICByZXBseS50byA9IGh5cGVydHlVUkw7XG4gICAgICAgICAgICAgIHRoaXMuX2J1cy5wb3N0TWVzc2FnZShyZXBseSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL2xpc3RlbmVyIHJlamVjdGVkXG4gICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBoeXBlcnR5VVJMLFxuICAgICAgICAgICAgYm9keTogcmVwbHkuYm9keVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGxvY2FsIERhdGFPYmplY3RPYnNlcnZlciAtPiB1bnN1YnNjcmliZVxuICBfb25Mb2NhbFVuU3Vic2NyaWJlKG1zZykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgaHlwZXJ0eVVSTCA9IG1zZy5mcm9tO1xuICAgIGxldCBvYmpVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTtcblxuICAgIGxldCBvYnNlcnZlciA9IF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTtcbiAgICBpZiAob2JzZXJ2ZXIpIHtcbiAgICAgIC8vVE9ETzogaXMgdGhlcmUgYW55IHBvbGljeSB2ZXJpZmljYXRpb24gYmVmb3JlIGRlbGV0ZT9cbiAgICAgIG9ic2VydmVyLnJlbW92ZVN1YnNjcmlwdGlvbihoeXBlcnR5VVJMKTtcblxuICAgICAgLy9UT0RPOiBkZXN0cm95IG9iamVjdCBpbiB0aGUgcmVnaXN0cnk/XG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sXG4gICAgICAgIGJvZHk6IHsgY29kZTogMjAwIH1cbiAgICAgIH0pO1xuXG4gICAgICAvL1RPRE86IHJlbW92ZSBPYmplY3QgaWYgbm8gbW9yZSBzdWJzY3JpcHRpb24/XG4gICAgICAvL2RlbGV0ZSBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF07XG4gICAgfVxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3luY2hlck1hbmFnZXI7XG4iLCIvKlxuIEF1dGhvcjogR2VyYWludCBMdWZmIGFuZCBvdGhlcnNcbiBZZWFyOiAyMDEzXG5cbiBUaGlzIGNvZGUgaXMgcmVsZWFzZWQgaW50byB0aGUgXCJwdWJsaWMgZG9tYWluXCIgYnkgaXRzIGF1dGhvcihzKS4gIEFueWJvZHkgbWF5IHVzZSwgYWx0ZXIgYW5kIGRpc3RyaWJ1dGUgdGhlIGNvZGUgd2l0aG91dCByZXN0cmljdGlvbi4gIFRoZSBhdXRob3IgbWFrZXMgbm8gZ3VhcmFudGVlcywgYW5kIHRha2VzIG5vIGxpYWJpbGl0eSBvZiBhbnkga2luZCBmb3IgdXNlIG9mIHRoaXMgY29kZS5cblxuIElmIHlvdSBmaW5kIGEgYnVnIG9yIG1ha2UgYW4gaW1wcm92ZW1lbnQsIGl0IHdvdWxkIGJlIGNvdXJ0ZW91cyB0byBsZXQgdGhlIGF1dGhvciBrbm93LCBidXQgaXQgaXMgbm90IGNvbXB1bHNvcnkuXG4gKi9cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9rZXlzP3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZPYmplY3QlMkZrZXlzXG5pZiAoIU9iamVjdC5rZXlzKSB7XG4gICAgT2JqZWN0LmtleXMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICAgICAgICAgICAgaGFzRG9udEVudW1CdWcgPSAhKHt0b1N0cmluZzogbnVsbH0pLnByb3BlcnR5SXNFbnVtZXJhYmxlKCd0b1N0cmluZycpLFxuICAgICAgICAgICAgZG9udEVudW1zID0gW1xuICAgICAgICAgICAgICAgICd0b1N0cmluZycsXG4gICAgICAgICAgICAgICAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgICAgICAgICAgICAgICAndmFsdWVPZicsXG4gICAgICAgICAgICAgICAgJ2hhc093blByb3BlcnR5JyxcbiAgICAgICAgICAgICAgICAnaXNQcm90b3R5cGVPZicsXG4gICAgICAgICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgICAgICAgICAgICAgICAnY29uc3RydWN0b3InXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZG9udEVudW1zTGVuZ3RoID0gZG9udEVudW1zLmxlbmd0aDtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicgfHwgb2JqID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIG5vbi1vYmplY3QnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gocHJvcCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzRG9udEVudW1CdWcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvbnRFbnVtc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgZG9udEVudW1zW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZG9udEVudW1zW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgfSkoKTtcbn1cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9jcmVhdGVcbmlmICghT2JqZWN0LmNyZWF0ZSkge1xuICAgIE9iamVjdC5jcmVhdGUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBGKCkge1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT2JqZWN0LmNyZWF0ZSBpbXBsZW1lbnRhdGlvbiBvbmx5IGFjY2VwdHMgb25lIHBhcmFtZXRlci4nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEYucHJvdG90eXBlID0gbztcbiAgICAgICAgICAgIHJldHVybiBuZXcgRigpO1xuICAgICAgICB9O1xuICAgIH0pKCk7XG59XG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pc0FycmF5P3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZBcnJheSUyRmlzQXJyYXlcbmlmICghQXJyYXkuaXNBcnJheSkge1xuICAgIEFycmF5LmlzQXJyYXkgPSBmdW5jdGlvbiAodkFyZykge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZBcmcpID09PSBcIltvYmplY3QgQXJyYXldXCI7XG4gICAgfTtcbn1cbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2Y/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRkFycmF5JTJGaW5kZXhPZlxuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLykge1xuICAgICAgICBpZiAodGhpcyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XG5cbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHZhciBuID0gMDtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBuID0gTnVtYmVyKGFyZ3VtZW50c1sxXSk7XG4gICAgICAgICAgICBpZiAobiAhPT0gbikgeyAvLyBzaG9ydGN1dCBmb3IgdmVyaWZ5aW5nIGlmIGl0J3MgTmFOXG4gICAgICAgICAgICAgICAgbiA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG4gIT09IDAgJiYgbiAhPT0gSW5maW5pdHkgJiYgbiAhPT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgICAgICAgbiA9IChuID4gMCB8fCAtMSkgKiBNYXRoLmZsb29yKE1hdGguYWJzKG4pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobiA+PSBsZW4pIHtcbiAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgayA9IG4gPj0gMCA/IG4gOiBNYXRoLm1heChsZW4gLSBNYXRoLmFicyhuKSwgMCk7XG4gICAgICAgIGZvciAoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgICAgIGlmIChrIGluIHQgJiYgdFtrXSA9PT0gc2VhcmNoRWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9O1xufVxuXG4vLyBHcnVuZ2V5IE9iamVjdC5pc0Zyb3plbiBoYWNrXG5pZiAoIU9iamVjdC5pc0Zyb3plbikge1xuICAgIE9iamVjdC5pc0Zyb3plbiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdmFyIGtleSA9IFwidHY0X3Rlc3RfZnJvemVuX2tleVwiO1xuICAgICAgICB3aGlsZSAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgIGtleSArPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBvYmpba2V5XSA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGUgb2JqW2tleV07XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbn1cbi8vIEJhc2VkIG9uOiBodHRwczovL2dpdGh1Yi5jb20vZ2VyYWludGx1ZmYvdXJpLXRlbXBsYXRlcywgYnV0IHdpdGggYWxsIHRoZSBkZS1zdWJzdGl0dXRpb24gc3R1ZmYgcmVtb3ZlZFxuXG52YXIgdXJpVGVtcGxhdGVHbG9iYWxNb2RpZmllcnMgPSB7XG4gICAgXCIrXCI6IHRydWUsXG4gICAgXCIjXCI6IHRydWUsXG4gICAgXCIuXCI6IHRydWUsXG4gICAgXCIvXCI6IHRydWUsXG4gICAgXCI7XCI6IHRydWUsXG4gICAgXCI/XCI6IHRydWUsXG4gICAgXCImXCI6IHRydWVcbn07XG52YXIgdXJpVGVtcGxhdGVTdWZmaWNlcyA9IHtcbiAgICBcIipcIjogdHJ1ZVxufTtcblxuZnVuY3Rpb24gbm90UmVhbGx5UGVyY2VudEVuY29kZShzdHJpbmcpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJKHN0cmluZykucmVwbGFjZSgvJTI1WzAtOV1bMC05XS9nLCBmdW5jdGlvbiAoZG91YmxlRW5jb2RlZCkge1xuICAgICAgICByZXR1cm4gXCIlXCIgKyBkb3VibGVFbmNvZGVkLnN1YnN0cmluZygzKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdXJpVGVtcGxhdGVTdWJzdGl0dXRpb24oc3BlYykge1xuICAgIHZhciBtb2RpZmllciA9IFwiXCI7XG4gICAgaWYgKHVyaVRlbXBsYXRlR2xvYmFsTW9kaWZpZXJzW3NwZWMuY2hhckF0KDApXSkge1xuICAgICAgICBtb2RpZmllciA9IHNwZWMuY2hhckF0KDApO1xuICAgICAgICBzcGVjID0gc3BlYy5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIHZhciBzZXBhcmF0b3IgPSBcIlwiO1xuICAgIHZhciBwcmVmaXggPSBcIlwiO1xuICAgIHZhciBzaG91bGRFc2NhcGUgPSB0cnVlO1xuICAgIHZhciBzaG93VmFyaWFibGVzID0gZmFsc2U7XG4gICAgdmFyIHRyaW1FbXB0eVN0cmluZyA9IGZhbHNlO1xuICAgIGlmIChtb2RpZmllciA9PT0gJysnKSB7XG4gICAgICAgIHNob3VsZEVzY2FwZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09IFwiLlwiKSB7XG4gICAgICAgIHByZWZpeCA9IFwiLlwiO1xuICAgICAgICBzZXBhcmF0b3IgPSBcIi5cIjtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSBcIi9cIikge1xuICAgICAgICBwcmVmaXggPSBcIi9cIjtcbiAgICAgICAgc2VwYXJhdG9yID0gXCIvXCI7XG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJyMnKSB7XG4gICAgICAgIHByZWZpeCA9IFwiI1wiO1xuICAgICAgICBzaG91bGRFc2NhcGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnOycpIHtcbiAgICAgICAgcHJlZml4ID0gXCI7XCI7XG4gICAgICAgIHNlcGFyYXRvciA9IFwiO1wiO1xuICAgICAgICBzaG93VmFyaWFibGVzID0gdHJ1ZTtcbiAgICAgICAgdHJpbUVtcHR5U3RyaW5nID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnPycpIHtcbiAgICAgICAgcHJlZml4ID0gXCI/XCI7XG4gICAgICAgIHNlcGFyYXRvciA9IFwiJlwiO1xuICAgICAgICBzaG93VmFyaWFibGVzID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSAnJicpIHtcbiAgICAgICAgcHJlZml4ID0gXCImXCI7XG4gICAgICAgIHNlcGFyYXRvciA9IFwiJlwiO1xuICAgICAgICBzaG93VmFyaWFibGVzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgdmFyTmFtZXMgPSBbXTtcbiAgICB2YXIgdmFyTGlzdCA9IHNwZWMuc3BsaXQoXCIsXCIpO1xuICAgIHZhciB2YXJTcGVjcyA9IFtdO1xuICAgIHZhciB2YXJTcGVjTWFwID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB2YXJOYW1lID0gdmFyTGlzdFtpXTtcbiAgICAgICAgdmFyIHRydW5jYXRlID0gbnVsbDtcbiAgICAgICAgaWYgKHZhck5hbWUuaW5kZXhPZihcIjpcIikgIT09IC0xKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSB2YXJOYW1lLnNwbGl0KFwiOlwiKTtcbiAgICAgICAgICAgIHZhck5hbWUgPSBwYXJ0c1swXTtcbiAgICAgICAgICAgIHRydW5jYXRlID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3VmZmljZXMgPSB7fTtcbiAgICAgICAgd2hpbGUgKHVyaVRlbXBsYXRlU3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0pIHtcbiAgICAgICAgICAgIHN1ZmZpY2VzW3Zhck5hbWUuY2hhckF0KHZhck5hbWUubGVuZ3RoIC0gMSldID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhck5hbWUgPSB2YXJOYW1lLnN1YnN0cmluZygwLCB2YXJOYW1lLmxlbmd0aCAtIDEpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YXJTcGVjID0ge1xuICAgICAgICAgICAgdHJ1bmNhdGU6IHRydW5jYXRlLFxuICAgICAgICAgICAgbmFtZTogdmFyTmFtZSxcbiAgICAgICAgICAgIHN1ZmZpY2VzOiBzdWZmaWNlc1xuICAgICAgICB9O1xuICAgICAgICB2YXJTcGVjcy5wdXNoKHZhclNwZWMpO1xuICAgICAgICB2YXJTcGVjTWFwW3Zhck5hbWVdID0gdmFyU3BlYztcbiAgICAgICAgdmFyTmFtZXMucHVzaCh2YXJOYW1lKTtcbiAgICB9XG4gICAgdmFyIHN1YkZ1bmN0aW9uID0gZnVuY3Rpb24gKHZhbHVlRnVuY3Rpb24pIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJTcGVjcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZhclNwZWMgPSB2YXJTcGVjc1tpXTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlRnVuY3Rpb24odmFyU3BlYy5uYW1lKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IChBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDApIHx8ICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDApKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRJbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPT09IHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gcHJlZml4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gKHNlcGFyYXRvciB8fCBcIixcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgXCI9XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5zdWZmaWNlc1snKiddID8gKHNlcGFyYXRvciB8fCBcIixcIikgOiBcIixcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YXJTcGVjLnN1ZmZpY2VzWycqJ10gJiYgc2hvd1ZhcmlhYmxlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyBcIj1cIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2hvdWxkRXNjYXBlID8gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlW2pdKS5yZXBsYWNlKC8hL2csIFwiJTIxXCIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZVtqXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcyAmJiAhdmFyU3BlYy5zdWZmaWNlc1snKiddKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyBcIj1cIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/IChzZXBhcmF0b3IgfHwgXCIsXCIpIDogXCIsXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudChrZXkpLnJlcGxhY2UoLyEvZywgXCIlMjFcIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyAnPScgOiBcIixcIjtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZVtrZXldKS5yZXBsYWNlKC8hL2csIFwiJTIxXCIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZVtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChzaG93VmFyaWFibGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJpbUVtcHR5U3RyaW5nIHx8IHZhbHVlICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gXCI9XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhclNwZWMudHJ1bmNhdGUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2YXJTcGVjLnRydW5jYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkucmVwbGFjZSgvIS9nLCBcIiUyMVwiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBzdWJGdW5jdGlvbi52YXJOYW1lcyA9IHZhck5hbWVzO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByZWZpeDogcHJlZml4LFxuICAgICAgICBzdWJzdGl0dXRpb246IHN1YkZ1bmN0aW9uXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gVXJpVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJpVGVtcGxhdGUpKSB7XG4gICAgICAgIHJldHVybiBuZXcgVXJpVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgIH1cbiAgICB2YXIgcGFydHMgPSB0ZW1wbGF0ZS5zcGxpdChcIntcIik7XG4gICAgdmFyIHRleHRQYXJ0cyA9IFtwYXJ0cy5zaGlmdCgpXTtcbiAgICB2YXIgcHJlZml4ZXMgPSBbXTtcbiAgICB2YXIgc3Vic3RpdHV0aW9ucyA9IFtdO1xuICAgIHZhciB2YXJOYW1lcyA9IFtdO1xuICAgIHdoaWxlIChwYXJ0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHMuc2hpZnQoKTtcbiAgICAgICAgdmFyIHNwZWMgPSBwYXJ0LnNwbGl0KFwifVwiKVswXTtcbiAgICAgICAgdmFyIHJlbWFpbmRlciA9IHBhcnQuc3Vic3RyaW5nKHNwZWMubGVuZ3RoICsgMSk7XG4gICAgICAgIHZhciBmdW5jcyA9IHVyaVRlbXBsYXRlU3Vic3RpdHV0aW9uKHNwZWMpO1xuICAgICAgICBzdWJzdGl0dXRpb25zLnB1c2goZnVuY3Muc3Vic3RpdHV0aW9uKTtcbiAgICAgICAgcHJlZml4ZXMucHVzaChmdW5jcy5wcmVmaXgpO1xuICAgICAgICB0ZXh0UGFydHMucHVzaChyZW1haW5kZXIpO1xuICAgICAgICB2YXJOYW1lcyA9IHZhck5hbWVzLmNvbmNhdChmdW5jcy5zdWJzdGl0dXRpb24udmFyTmFtZXMpO1xuICAgIH1cbiAgICB0aGlzLmZpbGwgPSBmdW5jdGlvbiAodmFsdWVGdW5jdGlvbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGV4dFBhcnRzWzBdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnN0aXR1dGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb25zW2ldO1xuICAgICAgICAgICAgcmVzdWx0ICs9IHN1YnN0aXR1dGlvbih2YWx1ZUZ1bmN0aW9uKTtcbiAgICAgICAgICAgIHJlc3VsdCArPSB0ZXh0UGFydHNbaSArIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICB0aGlzLnZhck5hbWVzID0gdmFyTmFtZXM7XG4gICAgdGhpcy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xufVxuXG5VcmlUZW1wbGF0ZS5wcm90b3R5cGUgPSB7XG4gICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGU7XG4gICAgfSxcbiAgICBmaWxsRnJvbU9iamVjdDogZnVuY3Rpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uICh2YXJOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqW3Zhck5hbWVdO1xuICAgICAgICB9KTtcbiAgICB9XG59O1xudmFyIFZhbGlkYXRvckNvbnRleHQgPSBmdW5jdGlvbiBWYWxpZGF0b3JDb250ZXh0KHBhcmVudCwgY29sbGVjdE11bHRpcGxlLCBlcnJvclJlcG9ydGVyLCBjaGVja1JlY3Vyc2l2ZSwgdHJhY2tVbmtub3duUHJvcGVydGllcykge1xuICAgIHRoaXMubWlzc2luZyA9IFtdO1xuICAgIHRoaXMubWlzc2luZ01hcCA9IHt9O1xuICAgIHRoaXMuZm9ybWF0VmFsaWRhdG9ycyA9IHBhcmVudCA/IE9iamVjdC5jcmVhdGUocGFyZW50LmZvcm1hdFZhbGlkYXRvcnMpIDoge307XG4gICAgdGhpcy5zY2hlbWFzID0gcGFyZW50ID8gT2JqZWN0LmNyZWF0ZShwYXJlbnQuc2NoZW1hcykgOiB7fTtcbiAgICB0aGlzLmNvbGxlY3RNdWx0aXBsZSA9IGNvbGxlY3RNdWx0aXBsZTtcbiAgICB0aGlzLmVycm9ycyA9IFtdO1xuICAgIHRoaXMuaGFuZGxlRXJyb3IgPSBjb2xsZWN0TXVsdGlwbGUgPyB0aGlzLmNvbGxlY3RFcnJvciA6IHRoaXMucmV0dXJuRXJyb3I7XG4gICAgaWYgKGNoZWNrUmVjdXJzaXZlKSB7XG4gICAgICAgIHRoaXMuY2hlY2tSZWN1cnNpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnNjYW5uZWQgPSBbXTtcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuID0gW107XG4gICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXMgPSBbXTtcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9ycyA9IFtdO1xuICAgICAgICB0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXkgPSAndHY0X3ZhbGlkYXRpb25faWQnO1xuICAgICAgICB0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXkgPSAndHY0X3ZhbGlkYXRpb25fZXJyb3JzX2lkJztcbiAgICB9XG4gICAgaWYgKHRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcbiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgIH1cbiAgICB0aGlzLmVycm9yUmVwb3J0ZXIgPSBlcnJvclJlcG9ydGVyIHx8IGRlZmF1bHRFcnJvclJlcG9ydGVyKCdlbicpO1xuICAgIGlmICh0eXBlb2YgdGhpcy5lcnJvclJlcG9ydGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RlYnVnJyk7XG4gICAgfVxuICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzID0ge307XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyZW50LmRlZmluZWRLZXl3b3Jkcykge1xuICAgICAgICAgICAgdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5XSA9IHBhcmVudC5kZWZpbmVkS2V5d29yZHNba2V5XS5zbGljZSgwKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5kZWZpbmVLZXl3b3JkID0gZnVuY3Rpb24gKGtleXdvcmQsIGtleXdvcmRGdW5jdGlvbikge1xuICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdID0gdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0gfHwgW107XG4gICAgdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0ucHVzaChrZXl3b3JkRnVuY3Rpb24pO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmNyZWF0ZUVycm9yID0gZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMsIGRhdGEsIHNjaGVtYSkge1xuICAgIHZhciBlcnJvciA9IG5ldyBWYWxpZGF0aW9uRXJyb3IoY29kZSwgbWVzc2FnZVBhcmFtcywgZGF0YVBhdGgsIHNjaGVtYVBhdGgsIHN1YkVycm9ycyk7XG4gICAgZXJyb3IubWVzc2FnZSA9IHRoaXMuZXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKTtcbiAgICByZXR1cm4gZXJyb3I7XG59O1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucmV0dXJuRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICByZXR1cm4gZXJyb3I7XG59O1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuY29sbGVjdEVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5wcmVmaXhFcnJvcnMgPSBmdW5jdGlvbiAoc3RhcnRJbmRleCwgZGF0YVBhdGgsIHNjaGVtYVBhdGgpIHtcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRoaXMuZXJyb3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzW2ldID0gdGhpcy5lcnJvcnNbaV0ucHJlZml4V2l0aChkYXRhUGF0aCwgc2NoZW1hUGF0aCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmJhblVua25vd25Qcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSkge1xuICAgIGZvciAodmFyIHVua25vd25QYXRoIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpIHtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlVOS05PV05fUFJPUEVSVFksIHtwYXRoOiB1bmtub3duUGF0aH0sIHVua25vd25QYXRoLCBcIlwiLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5oYW5kbGVFcnJvcihlcnJvcik7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5hZGRGb3JtYXQgPSBmdW5jdGlvbiAoZm9ybWF0LCB2YWxpZGF0b3IpIHtcbiAgICBpZiAodHlwZW9mIGZvcm1hdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGZvcm1hdCkge1xuICAgICAgICAgICAgdGhpcy5hZGRGb3JtYXQoa2V5LCBmb3JtYXRba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHRoaXMuZm9ybWF0VmFsaWRhdG9yc1tmb3JtYXRdID0gdmFsaWRhdG9yO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJlc29sdmVSZWZzID0gZnVuY3Rpb24gKHNjaGVtYSwgdXJsSGlzdG9yeSkge1xuICAgIGlmIChzY2hlbWFbJyRyZWYnXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVybEhpc3RvcnkgPSB1cmxIaXN0b3J5IHx8IHt9O1xuICAgICAgICBpZiAodXJsSGlzdG9yeVtzY2hlbWFbJyRyZWYnXV0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQ0lSQ1VMQVJfUkVGRVJFTkNFLCB7dXJsczogT2JqZWN0LmtleXModXJsSGlzdG9yeSkuam9pbignLCAnKX0sICcnLCAnJywgbnVsbCwgdW5kZWZpbmVkLCBzY2hlbWEpO1xuICAgICAgICB9XG4gICAgICAgIHVybEhpc3Rvcnlbc2NoZW1hWyckcmVmJ11dID0gdHJ1ZTtcbiAgICAgICAgc2NoZW1hID0gdGhpcy5nZXRTY2hlbWEoc2NoZW1hWyckcmVmJ10sIHVybEhpc3RvcnkpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHVybEhpc3RvcnkpIHtcbiAgICB2YXIgc2NoZW1hO1xuICAgIGlmICh0aGlzLnNjaGVtYXNbdXJsXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjaGVtYSA9IHRoaXMuc2NoZW1hc1t1cmxdO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEsIHVybEhpc3RvcnkpO1xuICAgIH1cbiAgICB2YXIgYmFzZVVybCA9IHVybDtcbiAgICB2YXIgZnJhZ21lbnQgPSBcIlwiO1xuICAgIGlmICh1cmwuaW5kZXhPZignIycpICE9PSAtMSkge1xuICAgICAgICBmcmFnbWVudCA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YoXCIjXCIpICsgMSk7XG4gICAgICAgIGJhc2VVcmwgPSB1cmwuc3Vic3RyaW5nKDAsIHVybC5pbmRleE9mKFwiI1wiKSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5zY2hlbWFzW2Jhc2VVcmxdID09PSAnb2JqZWN0Jykge1xuICAgICAgICBzY2hlbWEgPSB0aGlzLnNjaGVtYXNbYmFzZVVybF07XG4gICAgICAgIHZhciBwb2ludGVyUGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChmcmFnbWVudCk7XG4gICAgICAgIGlmIChwb2ludGVyUGF0aCA9PT0gXCJcIikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTtcbiAgICAgICAgfSBlbHNlIGlmIChwb2ludGVyUGF0aC5jaGFyQXQoMCkgIT09IFwiL1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwYXJ0cyA9IHBvaW50ZXJQYXRoLnNwbGl0KFwiL1wiKS5zbGljZSgxKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudCA9IHBhcnRzW2ldLnJlcGxhY2UoL34xL2csIFwiL1wiKS5yZXBsYWNlKC9+MC9nLCBcIn5cIik7XG4gICAgICAgICAgICBpZiAoc2NoZW1hW2NvbXBvbmVudF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNjaGVtYSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjaGVtYSA9IHNjaGVtYVtjb21wb25lbnRdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5taXNzaW5nW2Jhc2VVcmxdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5taXNzaW5nLnB1c2goYmFzZVVybCk7XG4gICAgICAgIHRoaXMubWlzc2luZ1tiYXNlVXJsXSA9IGJhc2VVcmw7XG4gICAgICAgIHRoaXMubWlzc2luZ01hcFtiYXNlVXJsXSA9IGJhc2VVcmw7XG4gICAgfVxufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnNlYXJjaFNjaGVtYXMgPSBmdW5jdGlvbiAoc2NoZW1hLCB1cmwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaFNjaGVtYXMoc2NoZW1hW2ldLCB1cmwpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChzY2hlbWEgJiYgdHlwZW9mIHNjaGVtYSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5pZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKGlzVHJ1c3RlZFVybCh1cmwsIHNjaGVtYS5pZCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zY2hlbWFzW3NjaGVtYS5pZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYXNbc2NoZW1hLmlkXSA9IHNjaGVtYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gXCJlbnVtXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVtrZXldID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoU2NoZW1hcyhzY2hlbWFba2V5XSwgdXJsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCIkcmVmXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVyaSA9IGdldERvY3VtZW50VXJpKHNjaGVtYVtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVyaSAmJiB0aGlzLnNjaGVtYXNbdXJpXSA9PT0gdW5kZWZpbmVkICYmIHRoaXMubWlzc2luZ01hcFt1cmldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWlzc2luZ01hcFt1cmldID0gdXJpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmFkZFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHNjaGVtYSkge1xuICAgIC8vb3ZlcmxvYWRcbiAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycgfHwgdHlwZW9mIHNjaGVtYSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09ICdvYmplY3QnICYmIHR5cGVvZiB1cmwuaWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBzY2hlbWEgPSB1cmw7XG4gICAgICAgICAgICB1cmwgPSBzY2hlbWEuaWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHVybCA9PT0gZ2V0RG9jdW1lbnRVcmkodXJsKSArIFwiI1wiKSB7XG4gICAgICAgIC8vIFJlbW92ZSBlbXB0eSBmcmFnbWVudFxuICAgICAgICB1cmwgPSBnZXREb2N1bWVudFVyaSh1cmwpO1xuICAgIH1cbiAgICB0aGlzLnNjaGVtYXNbdXJsXSA9IHNjaGVtYTtcbiAgICBkZWxldGUgdGhpcy5taXNzaW5nTWFwW3VybF07XG4gICAgbm9ybVNjaGVtYShzY2hlbWEsIHVybCk7XG4gICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYSwgdXJsKTtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYU1hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWFwID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuc2NoZW1hcykge1xuICAgICAgICBtYXBba2V5XSA9IHRoaXMuc2NoZW1hc1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gbWFwO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZ2V0U2NoZW1hVXJpcyA9IGZ1bmN0aW9uIChmaWx0ZXJSZWdFeHApIHtcbiAgICB2YXIgbGlzdCA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNjaGVtYXMpIHtcbiAgICAgICAgaWYgKCFmaWx0ZXJSZWdFeHAgfHwgZmlsdGVyUmVnRXhwLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgbGlzdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcyA9IGZ1bmN0aW9uIChmaWx0ZXJSZWdFeHApIHtcbiAgICB2YXIgbGlzdCA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLm1pc3NpbmdNYXApIHtcbiAgICAgICAgaWYgKCFmaWx0ZXJSZWdFeHAgfHwgZmlsdGVyUmVnRXhwLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgbGlzdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpc3Q7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5kcm9wU2NoZW1hcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNjaGVtYXMgPSB7fTtcbiAgICB0aGlzLnJlc2V0KCk7XG59O1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5taXNzaW5nID0gW107XG4gICAgdGhpcy5taXNzaW5nTWFwID0ge307XG4gICAgdGhpcy5lcnJvcnMgPSBbXTtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQWxsID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSwgZGF0YVBhdGhQYXJ0cywgc2NoZW1hUGF0aFBhcnRzLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICB2YXIgdG9wTGV2ZWw7XG4gICAgc2NoZW1hID0gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEpO1xuICAgIGlmICghc2NoZW1hKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoc2NoZW1hIGluc3RhbmNlb2YgVmFsaWRhdGlvbkVycm9yKSB7XG4gICAgICAgIHRoaXMuZXJyb3JzLnB1c2goc2NoZW1hKTtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xuICAgIHZhciBmcm96ZW5JbmRleCwgc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ID0gbnVsbCwgc2Nhbm5lZFNjaGVtYXNJbmRleCA9IG51bGw7XG4gICAgaWYgKHRoaXMuY2hlY2tSZWN1cnNpdmUgJiYgZGF0YSAmJiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdG9wTGV2ZWwgPSAhdGhpcy5zY2FubmVkLmxlbmd0aDtcbiAgICAgICAgaWYgKGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSkge1xuICAgICAgICAgICAgdmFyIHNjaGVtYUluZGV4ID0gZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmluZGV4T2Yoc2NoZW1hKTtcbiAgICAgICAgICAgIGlmIChzY2hlbWFJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLmNvbmNhdChkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2NoZW1hSW5kZXhdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuKGRhdGEpKSB7XG4gICAgICAgICAgICBmcm96ZW5JbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plbi5pbmRleE9mKGRhdGEpO1xuICAgICAgICAgICAgaWYgKGZyb3plbkluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHZhciBmcm96ZW5TY2hlbWFJbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdLmluZGV4T2Yoc2NoZW1hKTtcbiAgICAgICAgICAgICAgICBpZiAoZnJvemVuU2NoZW1hSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuY29uY2F0KHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW2Zyb3plblNjaGVtYUluZGV4XSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNjYW5uZWQucHVzaChkYXRhKTtcbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbihkYXRhKSkge1xuICAgICAgICAgICAgaWYgKGZyb3plbkluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGZyb3plbkluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4ucHVzaChkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzLnB1c2goW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1tmcm96ZW5JbmRleF0ubGVuZ3RoO1xuICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHNjaGVtYTtcbiAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSBbXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGEsIHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwgdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvL0lFIDcvOCB3b3JrYXJvdW5kXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzY2FubmVkU2NoZW1hc0luZGV4ID0gZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmxlbmd0aDtcbiAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XVtzY2FubmVkU2NoZW1hc0luZGV4XSA9IHNjaGVtYTtcbiAgICAgICAgICAgIGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtzY2FubmVkU2NoZW1hc0luZGV4XSA9IFtdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XG4gICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUJhc2ljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlTnVtZXJpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZUFycmF5KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlSHlwZXJtZWRpYShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZUZvcm1hdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcblxuICAgIGlmICh0b3BMZXZlbCkge1xuICAgICAgICB3aGlsZSAodGhpcy5zY2FubmVkLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLnNjYW5uZWQucG9wKCk7XG4gICAgICAgICAgICBkZWxldGUgaXRlbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plbiA9IFtdO1xuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107XG4gICAgfVxuXG4gICAgaWYgKGVycm9yIHx8IGVycm9yQ291bnQgIT09IHRoaXMuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3aGlsZSAoKGRhdGFQYXRoUGFydHMgJiYgZGF0YVBhdGhQYXJ0cy5sZW5ndGgpIHx8IChzY2hlbWFQYXRoUGFydHMgJiYgc2NoZW1hUGF0aFBhcnRzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIHZhciBkYXRhUGFydCA9IChkYXRhUGF0aFBhcnRzICYmIGRhdGFQYXRoUGFydHMubGVuZ3RoKSA/IFwiXCIgKyBkYXRhUGF0aFBhcnRzLnBvcCgpIDogbnVsbDtcbiAgICAgICAgICAgIHZhciBzY2hlbWFQYXJ0ID0gKHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoKSA/IFwiXCIgKyBzY2hlbWFQYXRoUGFydHMucG9wKCkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBlcnJvci5wcmVmaXhXaXRoKGRhdGFQYXJ0LCBzY2hlbWFQYXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJlZml4RXJyb3JzKGVycm9yQ291bnQsIGRhdGFQYXJ0LCBzY2hlbWFQYXJ0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCk7XG4gICAgfSBlbHNlIGlmIChzY2FubmVkU2NoZW1hc0luZGV4ICE9PSBudWxsKSB7XG4gICAgICAgIGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtzY2FubmVkU2NoZW1hc0luZGV4XSA9IHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xufTtcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2Ygc2NoZW1hLmZvcm1hdCAhPT0gJ3N0cmluZycgfHwgIXRoaXMuZm9ybWF0VmFsaWRhdG9yc1tzY2hlbWEuZm9ybWF0XSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGVycm9yTWVzc2FnZSA9IHRoaXMuZm9ybWF0VmFsaWRhdG9yc1tzY2hlbWEuZm9ybWF0XS5jYWxsKG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgaWYgKHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuRk9STUFUX0NVU1RPTSwge21lc3NhZ2U6IGVycm9yTWVzc2FnZX0sICcnLCAnL2Zvcm1hdCcsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgfSBlbHNlIGlmIChlcnJvck1lc3NhZ2UgJiYgdHlwZW9mIGVycm9yTWVzc2FnZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7bWVzc2FnZTogZXJyb3JNZXNzYWdlLm1lc3NhZ2UgfHwgXCI/XCJ9LCBlcnJvck1lc3NhZ2UuZGF0YVBhdGggfHwgJycsIGVycm9yTWVzc2FnZS5zY2hlbWFQYXRoIHx8IFwiL2Zvcm1hdFwiLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmRlZmluZWRLZXl3b3Jkcykge1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVtrZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbGlkYXRpb25GdW5jdGlvbnMgPSB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXldO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbGlkYXRpb25GdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBmdW5jID0gdmFsaWRhdGlvbkZ1bmN0aW9uc1tpXTtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jKGRhdGEsIHNjaGVtYVtrZXldLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHJlc3VsdCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLktFWVdPUkRfQ1VTVE9NLCB7XG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHRcbiAgICAgICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBrZXkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29kZSA9IHJlc3VsdC5jb2RlO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFFcnJvckNvZGVzW2NvZGVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZGVmaW5lZCBlcnJvciBjb2RlICh1c2UgZGVmaW5lRXJyb3IpOiAnICsgY29kZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEVycm9yQ29kZXNbY29kZV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29kZSAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEVycm9yQ29kZXMuS0VZV09SRF9DVVNUT007XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBtZXNzYWdlUGFyYW1zID0gKHR5cGVvZiByZXN1bHQubWVzc2FnZSA9PT0gJ29iamVjdCcpID8gcmVzdWx0Lm1lc3NhZ2UgOiB7XG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZSB8fCBcIj9cIlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdmFyIHNjaGVtYVBhdGggPSByZXN1bHQuc2NoZW1hUGF0aCB8fCAoXCIvXCIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cXC8vZywgJ34xJykpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIHJlc3VsdC5kYXRhUGF0aCB8fCBudWxsLCBzY2hlbWFQYXRoLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuZnVuY3Rpb24gcmVjdXJzaXZlQ29tcGFyZShBLCBCKSB7XG4gICAgaWYgKEEgPT09IEIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChBICYmIEIgJiYgdHlwZW9mIEEgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIEIgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoQSkgIT09IEFycmF5LmlzQXJyYXkoQikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KEEpKSB7XG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggIT09IEIubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyZWN1cnNpdmVDb21wYXJlKEFbaV0sIEJbaV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIga2V5O1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gQSkge1xuICAgICAgICAgICAgICAgIGlmIChCW2tleV0gPT09IHVuZGVmaW5lZCAmJiBBW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChrZXkgaW4gQikge1xuICAgICAgICAgICAgICAgIGlmIChBW2tleV0gPT09IHVuZGVmaW5lZCAmJiBCW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChrZXkgaW4gQSkge1xuICAgICAgICAgICAgICAgIGlmICghcmVjdXJzaXZlQ29tcGFyZShBW2tleV0sIEJba2V5XSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUJhc2ljID0gZnVuY3Rpb24gdmFsaWRhdGVCYXNpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLnByZWZpeFdpdGgobnVsbCwgXCJ0eXBlXCIpO1xuICAgIH1cbiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlRW51bShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLnByZWZpeFdpdGgobnVsbCwgXCJ0eXBlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlVHlwZSA9IGZ1bmN0aW9uIHZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEpIHtcbiAgICBpZiAoc2NoZW1hLnR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGRhdGFUeXBlID0gdHlwZW9mIGRhdGE7XG4gICAgaWYgKGRhdGEgPT09IG51bGwpIHtcbiAgICAgICAgZGF0YVR5cGUgPSBcIm51bGxcIjtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZGF0YVR5cGUgPSBcImFycmF5XCI7XG4gICAgfVxuICAgIHZhciBhbGxvd2VkVHlwZXMgPSBzY2hlbWEudHlwZTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYWxsb3dlZFR5cGVzKSkge1xuICAgICAgICBhbGxvd2VkVHlwZXMgPSBbYWxsb3dlZFR5cGVzXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbG93ZWRUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgdHlwZSA9IGFsbG93ZWRUeXBlc1tpXTtcbiAgICAgICAgaWYgKHR5cGUgPT09IGRhdGFUeXBlIHx8ICh0eXBlID09PSBcImludGVnZXJcIiAmJiBkYXRhVHlwZSA9PT0gXCJudW1iZXJcIiAmJiAoZGF0YSAlIDEgPT09IDApKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5JTlZBTElEX1RZUEUsIHtcbiAgICAgICAgdHlwZTogZGF0YVR5cGUsXG4gICAgICAgIGV4cGVjdGVkOiBhbGxvd2VkVHlwZXMuam9pbihcIi9cIilcbiAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUVudW0gPSBmdW5jdGlvbiB2YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYVtcImVudW1cIl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWFbXCJlbnVtXCJdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbnVtVmFsID0gc2NoZW1hW1wiZW51bVwiXVtpXTtcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZUNvbXBhcmUoZGF0YSwgZW51bVZhbCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuRU5VTV9NSVNNQVRDSCwge3ZhbHVlOiAodHlwZW9mIEpTT04gIT09ICd1bmRlZmluZWQnKSA/IEpTT04uc3RyaW5naWZ5KGRhdGEpIDogZGF0YX0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTnVtZXJpYyA9IGZ1bmN0aW9uIHZhbGlkYXRlTnVtZXJpYyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlTXVsdGlwbGVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU1pbk1heChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU5hTihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cbnZhciBDTE9TRV9FTk9VR0hfTE9XID0gTWF0aC5wb3coMiwgLTUxKTtcbnZhciBDTE9TRV9FTk9VR0hfSElHSCA9IDEgLSBDTE9TRV9FTk9VR0hfTE9XO1xuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVNdWx0aXBsZU9mID0gZnVuY3Rpb24gdmFsaWRhdGVNdWx0aXBsZU9mKGRhdGEsIHNjaGVtYSkge1xuICAgIHZhciBtdWx0aXBsZU9mID0gc2NoZW1hLm11bHRpcGxlT2YgfHwgc2NoZW1hLmRpdmlzaWJsZUJ5O1xuICAgIGlmIChtdWx0aXBsZU9mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB2YXIgcmVtYWluZGVyID0gKGRhdGEgLyBtdWx0aXBsZU9mKSAlIDE7XG4gICAgICAgIGlmIChyZW1haW5kZXIgPj0gQ0xPU0VfRU5PVUdIX0xPVyAmJiByZW1haW5kZXIgPCBDTE9TRV9FTk9VR0hfSElHSCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTVVMVElQTEVfT0YsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcbiAgICAgICAgICAgICAgICBtdWx0aXBsZU9mOiBtdWx0aXBsZU9mXG4gICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heCA9IGZ1bmN0aW9uIHZhbGlkYXRlTWluTWF4KGRhdGEsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKHNjaGVtYS5taW5pbXVtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGRhdGEgPCBzY2hlbWEubWluaW11bSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUlOSU1VTSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5pbXVtXG4gICAgICAgICAgICB9LCAnJywgJy9taW5pbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2NoZW1hLmV4Y2x1c2l2ZU1pbmltdW0gJiYgZGF0YSA9PT0gc2NoZW1hLm1pbmltdW0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFLCB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXG4gICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbmltdW1cbiAgICAgICAgICAgIH0sICcnLCAnL2V4Y2x1c2l2ZU1pbmltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzY2hlbWEubWF4aW11bSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkYXRhID4gc2NoZW1hLm1heGltdW0pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01BWElNVU0sIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4aW11bVxuICAgICAgICAgICAgfSwgJycsICcvbWF4aW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjaGVtYS5leGNsdXNpdmVNYXhpbXVtICYmIGRhdGEgPT09IHNjaGVtYS5tYXhpbXVtKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRSwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhpbXVtXG4gICAgICAgICAgICB9LCAnJywgJy9leGNsdXNpdmVNYXhpbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlTmFOID0gZnVuY3Rpb24gdmFsaWRhdGVOYU4oZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoaXNOYU4oZGF0YSkgPT09IHRydWUgfHwgZGF0YSA9PT0gSW5maW5pdHkgfHwgZGF0YSA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX05PVF9BX05VTUJFUiwge3ZhbHVlOiBkYXRhfSwgJycsICcvdHlwZScsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmcgPSBmdW5jdGlvbiB2YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU3RyaW5nTGVuZ3RoKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlU3RyaW5nUGF0dGVybihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nTGVuZ3RoID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdMZW5ndGgoZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoc2NoZW1hLm1pbkxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA8IHNjaGVtYS5taW5MZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX0xFTkdUSF9TSE9SVCwge1xuICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbkxlbmd0aFxuICAgICAgICAgICAgfSwgJycsICcvbWluTGVuZ3RoJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2NoZW1hLm1heExlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IHNjaGVtYS5tYXhMZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX0xFTkdUSF9MT05HLCB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4TGVuZ3RoXG4gICAgICAgICAgICB9LCAnJywgJy9tYXhMZW5ndGgnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmdQYXR0ZXJuID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdQYXR0ZXJuKGRhdGEsIHNjaGVtYSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiB8fCAodHlwZW9mIHNjaGVtYS5wYXR0ZXJuICE9PSBcInN0cmluZ1wiICYmICEoc2NoZW1hLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIHJlZ2V4cDtcbiAgICBpZiAoc2NoZW1hLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmVnZXhwID0gc2NoZW1hLnBhdHRlcm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgYm9keSwgZmxhZ3MgPSAnJztcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFsc1xuICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy03LjguNVxuICAgICAgICB2YXIgbGl0ZXJhbCA9IHNjaGVtYS5wYXR0ZXJuLm1hdGNoKC9eXFwvKC4rKVxcLyhbaW1nXSopJC8pO1xuICAgICAgICBpZiAobGl0ZXJhbCkge1xuICAgICAgICAgICAgYm9keSA9IGxpdGVyYWxbMV07XG4gICAgICAgICAgICBmbGFncyA9IGxpdGVyYWxbMl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBib2R5ID0gc2NoZW1hLnBhdHRlcm47XG4gICAgICAgIH1cbiAgICAgICAgcmVnZXhwID0gbmV3IFJlZ0V4cChib2R5LCBmbGFncyk7XG4gICAgfVxuICAgIGlmICghcmVnZXhwLnRlc3QoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5TVFJJTkdfUEFUVEVSTiwge3BhdHRlcm46IHNjaGVtYS5wYXR0ZXJufSwgJycsICcvcGF0dGVybicsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheSA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXkoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlQXJyYXlMZW5ndGgoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlMZW5ndGggPSBmdW5jdGlvbiB2YWxpZGF0ZUFycmF5TGVuZ3RoKGRhdGEsIHNjaGVtYSkge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoc2NoZW1hLm1pbkl0ZW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgc2NoZW1hLm1pbkl0ZW1zKSB7XG4gICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9MRU5HVEhfU0hPUlQsIHtcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5JdGVtc1xuICAgICAgICAgICAgfSwgJycsICcvbWluSXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzY2hlbWEubWF4SXRlbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBzY2hlbWEubWF4SXRlbXMpIHtcbiAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0xFTkdUSF9MT05HLCB7XG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4SXRlbXNcbiAgICAgICAgICAgIH0sICcnLCAnL21heEl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhkYXRhLCBzY2hlbWEpIHtcbiAgICBpZiAoc2NoZW1hLnVuaXF1ZUl0ZW1zKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgZGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGlmIChyZWN1cnNpdmVDb21wYXJlKGRhdGFbaV0sIGRhdGFbal0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9VTklRVUUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoMTogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoMjogalxuICAgICAgICAgICAgICAgICAgICB9LCAnJywgJy91bmlxdWVJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheUl0ZW1zID0gZnVuY3Rpb24gdmFsaWRhdGVBcnJheUl0ZW1zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKHNjaGVtYS5pdGVtcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZXJyb3IsIGk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hLml0ZW1zKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPCBzY2hlbWEuaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuaXRlbXNbaV0sIFtpXSwgW1wiaXRlbXNcIiwgaV0sIGRhdGFQb2ludGVyUGF0aCArIFwiL1wiICsgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuYWRkaXRpb25hbEl0ZW1zID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gKHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9BRERJVElPTkFMX0lURU1TLCB7fSwgJy8nICsgaSwgJy9hZGRpdGlvbmFsSXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5hZGRpdGlvbmFsSXRlbXMsIFtpXSwgW1wiYWRkaXRpb25hbEl0ZW1zXCJdLCBkYXRhUG9pbnRlclBhdGggKyBcIi9cIiArIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2ldLCBzY2hlbWEuaXRlbXMsIFtpXSwgW1wiaXRlbXNcIl0sIGRhdGFQb2ludGVyUGF0aCArIFwiL1wiICsgaSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm9iamVjdFwiIHx8IGRhdGEgPT09IG51bGwgfHwgQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcyhkYXRhLCBzY2hlbWEpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoc2NoZW1hLm1pblByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoa2V5cy5sZW5ndGggPCBzY2hlbWEubWluUHJvcGVydGllcykge1xuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTSwge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5Q291bnQ6IGtleXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5Qcm9wZXJ0aWVzXG4gICAgICAgICAgICB9LCAnJywgJy9taW5Qcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2NoZW1hLm1heFByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoa2V5cy5sZW5ndGggPiBzY2hlbWEubWF4UHJvcGVydGllcykge1xuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSwge1xuICAgICAgICAgICAgICAgIHByb3BlcnR5Q291bnQ6IGtleXMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhQcm9wZXJ0aWVzXG4gICAgICAgICAgICB9LCAnJywgJy9tYXhQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7XG4gICAgaWYgKHNjaGVtYS5yZXF1aXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLnJlcXVpcmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0gc2NoZW1hLnJlcXVpcmVkW2ldO1xuICAgICAgICAgICAgaWYgKGRhdGFba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9SRVFVSVJFRCwge2tleToga2V5fSwgJycsICcvcmVxdWlyZWQvJyArIGksIG51bGwsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICB2YXIgZXJyb3I7XG4gICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgdmFyIGtleVBvaW50ZXJQYXRoID0gZGF0YVBvaW50ZXJQYXRoICsgXCIvXCIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cXC8vZywgJ34xJyk7XG4gICAgICAgIHZhciBmb3VuZE1hdGNoID0gZmFsc2U7XG4gICAgICAgIGlmIChzY2hlbWEucHJvcGVydGllcyAhPT0gdW5kZWZpbmVkICYmIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm91bmRNYXRjaCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLnByb3BlcnRpZXNba2V5XSwgW2tleV0sIFtcInByb3BlcnRpZXNcIiwga2V5XSwga2V5UG9pbnRlclBhdGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEucGF0dGVyblByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZm9yICh2YXIgcGF0dGVybktleSBpbiBzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cChwYXR0ZXJuS2V5KTtcbiAgICAgICAgICAgICAgICBpZiAocmVnZXhwLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhW2tleV0sIHNjaGVtYS5wYXR0ZXJuUHJvcGVydGllc1twYXR0ZXJuS2V5XSwgW2tleV0sIFtcInBhdHRlcm5Qcm9wZXJ0aWVzXCIsIHBhdHRlcm5LZXldLCBrZXlQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZvdW5kTWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVMsIHtrZXk6IGtleX0sICcnLCAnL2FkZGl0aW9uYWxQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKGtleSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzLCBba2V5XSwgW1wiYWRkaXRpb25hbFByb3BlcnRpZXNcIl0sIGtleVBvaW50ZXJQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMgJiYgIXRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChzY2hlbWEuZGVwZW5kZW5jaWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZm9yICh2YXIgZGVwS2V5IGluIHNjaGVtYS5kZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICAgIGlmIChkYXRhW2RlcEtleV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHZhciBkZXAgPSBzY2hlbWEuZGVwZW5kZW5jaWVzW2RlcEtleV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXAgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbZGVwXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfREVQRU5ERU5DWV9LRVksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nOiBkZXBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICcnLCAnJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKG51bGwsIGRlcEtleSkucHJlZml4V2l0aChudWxsLCBcImRlcGVuZGVuY2llc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkZXApKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRLZXkgPSBkZXBbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtyZXF1aXJlZEtleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9ERVBFTkRFTkNZX0tFWSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWlzc2luZzogcmVxdWlyZWRLZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAnJywgJy8nICsgaSwgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKG51bGwsIGRlcEtleSkucHJlZml4V2l0aChudWxsLCBcImRlcGVuZGVuY2llc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgZGVwLCBbXSwgW1wiZGVwZW5kZW5jaWVzXCIsIGRlcEtleV0sIGRhdGFQb2ludGVyUGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQ29tYmluYXRpb25zID0gZnVuY3Rpb24gdmFsaWRhdGVDb21iaW5hdGlvbnMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUFsbE9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQW55T2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVPbmVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU5vdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcbiAgICAgICAgfHwgbnVsbDtcbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQWxsT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZUFsbE9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKHNjaGVtYS5hbGxPZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZXJyb3I7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEuYWxsT2YubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5hbGxPZltpXTtcbiAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbXCJhbGxPZlwiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBbnlPZiA9IGZ1bmN0aW9uIHZhbGlkYXRlQW55T2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcbiAgICBpZiAoc2NoZW1hLmFueU9mID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xuICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRocztcbiAgICB9XG4gICAgdmFyIGVycm9yQXRFbmQgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmFueU9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcbiAgICAgICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5hbnlPZltpXTtcblxuICAgICAgICB2YXIgZXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbXCJhbnlPZlwiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKTtcblxuICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgZXJyb3JDb3VudCA9PT0gdGhpcy5lcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrbm93bktleSBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocykge1xuICAgICAgICAgICAgICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHNba25vd25LZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdW5rbm93bktleSBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjb250aW51ZSBsb29waW5nIHNvIHdlIGNhdGNoIGFsbCB0aGUgcHJvcGVydHkgZGVmaW5pdGlvbnMsIGJ1dCB3ZSBkb24ndCB3YW50IHRvIHJldHVybiBhbiBlcnJvclxuICAgICAgICAgICAgICAgIGVycm9yQXRFbmQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvci5wcmVmaXhXaXRoKG51bGwsIFwiXCIgKyBpKS5wcmVmaXhXaXRoKG51bGwsIFwiYW55T2ZcIikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRocztcbiAgICB9XG4gICAgaWYgKGVycm9yQXRFbmQpIHtcbiAgICAgICAgZXJyb3JzID0gZXJyb3JzLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpKTtcbiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFOWV9PRl9NSVNTSU5HLCB7fSwgXCJcIiwgXCIvYW55T2ZcIiwgZXJyb3JzLCBkYXRhLCBzY2hlbWEpO1xuICAgIH1cbn07XG5cblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT25lT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZU9uZU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XG4gICAgaWYgKHNjaGVtYS5vbmVPZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgdmFsaWRJbmRleCA9IG51bGw7XG4gICAgdmFyIGVycm9ycyA9IFtdO1xuICAgIHZhciBzdGFydEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XG4gICAgdmFyIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzLCBvbGRLbm93blByb3BlcnR5UGF0aHM7XG4gICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xuICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7XG4gICAgICAgIG9sZEtub3duUHJvcGVydHlQYXRocyA9IHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5vbmVPZi5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XG4gICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdWJTY2hlbWEgPSBzY2hlbWEub25lT2ZbaV07XG5cbiAgICAgICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XG4gICAgICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgW1wib25lT2ZcIiwgaV0sIGRhdGFQb2ludGVyUGF0aCk7XG5cbiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGVycm9yQ291bnQgPT09IHRoaXMuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKHZhbGlkSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YWxpZEluZGV4ID0gaTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT05FX09GX01VTFRJUExFLCB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4MTogdmFsaWRJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXgyOiBpXG4gICAgICAgICAgICAgICAgfSwgXCJcIiwgXCIvb25lT2ZcIiwgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrbm93bktleSBpbiB0aGlzLmtub3duUHJvcGVydHlQYXRocykge1xuICAgICAgICAgICAgICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHNba25vd25LZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdW5rbm93bktleSBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRoc1t1bmtub3duS2V5XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRocztcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7XG4gICAgfVxuICAgIGlmICh2YWxpZEluZGV4ID09PSBudWxsKSB7XG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KSk7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PTkVfT0ZfTUlTU0lORywge30sIFwiXCIsIFwiL29uZU9mXCIsIGVycm9ycywgZGF0YSwgc2NoZW1hKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOb3QgPSBmdW5jdGlvbiB2YWxpZGF0ZU5vdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGlmIChzY2hlbWEubm90ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBvbGRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xuICAgIHZhciBvbGRVbmtub3duUHJvcGVydHlQYXRocywgb2xkS25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLmtub3duUHJvcGVydHlQYXRocztcbiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xuICAgIH1cbiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYS5ub3QsIG51bGwsIG51bGwsIGRhdGFQb2ludGVyUGF0aCk7XG4gICAgdmFyIG5vdEVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKG9sZEVycm9yQ291bnQpO1xuICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgb2xkRXJyb3JDb3VudCk7XG4gICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xuICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7XG4gICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkS25vd25Qcm9wZXJ0eVBhdGhzO1xuICAgIH1cbiAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgbm90RXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5PVF9QQVNTRUQsIHt9LCBcIlwiLCBcIi9ub3RcIiwgbnVsbCwgZGF0YSwgc2NoZW1hKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUh5cGVybWVkaWEgPSBmdW5jdGlvbiB2YWxpZGF0ZUNvbWJpbmF0aW9ucyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xuICAgIGlmICghc2NoZW1hLmxpbmtzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZXJyb3I7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGlua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGxkbyA9IHNjaGVtYS5saW5rc1tpXTtcbiAgICAgICAgaWYgKGxkby5yZWwgPT09IFwiZGVzY3JpYmVkYnlcIikge1xuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gbmV3IFVyaVRlbXBsYXRlKGxkby5ocmVmKTtcbiAgICAgICAgICAgIHZhciBhbGxQcmVzZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGVtcGxhdGUudmFyTmFtZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoISh0ZW1wbGF0ZS52YXJOYW1lc1tqXSBpbiBkYXRhKSkge1xuICAgICAgICAgICAgICAgICAgICBhbGxQcmVzZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhbGxQcmVzZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjaGVtYVVybCA9IHRlbXBsYXRlLmZpbGxGcm9tT2JqZWN0KGRhdGEpO1xuICAgICAgICAgICAgICAgIHZhciBzdWJTY2hlbWEgPSB7XCIkcmVmXCI6IHNjaGVtYVVybH07XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbXCJsaW5rc1wiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuLy8gcGFyc2VVUkkoKSBhbmQgcmVzb2x2ZVVybCgpIGFyZSBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzEwODg4NTBcbi8vICAgLSAgcmVsZWFzZWQgYXMgcHVibGljIGRvbWFpbiBieSBhdXRob3IgKFwiWWFmZmxlXCIpIC0gc2VlIGNvbW1lbnRzIG9uIGdpc3RcblxuZnVuY3Rpb24gcGFyc2VVUkkodXJsKSB7XG4gICAgdmFyIG0gPSBTdHJpbmcodXJsKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJykubWF0Y2goL14oW146XFwvPyNdKzopPyhcXC9cXC8oPzpbXjpAXSooPzo6W146QF0qKT9AKT8oKFteOlxcLz8jXSopKD86OihcXGQqKSk/KSk/KFtePyNdKikoXFw/W14jXSopPygjW1xcc1xcU10qKT8vKTtcbiAgICAvLyBhdXRob3JpdHkgPSAnLy8nICsgdXNlciArICc6JyArIHBhc3MgJ0AnICsgaG9zdG5hbWUgKyAnOicgcG9ydFxuICAgIHJldHVybiAobSA/IHtcbiAgICAgICAgaHJlZjogbVswXSB8fCAnJyxcbiAgICAgICAgcHJvdG9jb2w6IG1bMV0gfHwgJycsXG4gICAgICAgIGF1dGhvcml0eTogbVsyXSB8fCAnJyxcbiAgICAgICAgaG9zdDogbVszXSB8fCAnJyxcbiAgICAgICAgaG9zdG5hbWU6IG1bNF0gfHwgJycsXG4gICAgICAgIHBvcnQ6IG1bNV0gfHwgJycsXG4gICAgICAgIHBhdGhuYW1lOiBtWzZdIHx8ICcnLFxuICAgICAgICBzZWFyY2g6IG1bN10gfHwgJycsXG4gICAgICAgIGhhc2g6IG1bOF0gfHwgJydcbiAgICB9IDogbnVsbCk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVVcmwoYmFzZSwgaHJlZikgey8vIFJGQyAzOTg2XG5cbiAgICBmdW5jdGlvbiByZW1vdmVEb3RTZWdtZW50cyhpbnB1dCkge1xuICAgICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICAgIGlucHV0LnJlcGxhY2UoL14oXFwuXFwuPyhcXC98JCkpKy8sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLyhcXC4oXFwvfCQpKSsvZywgJy8nKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcL1xcLlxcLiQvLCAnLy4uLycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvP1teXFwvXSovZywgZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICAgICAgICBpZiAocCA9PT0gJy8uLicpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnBvcCgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gb3V0cHV0LmpvaW4oJycpLnJlcGxhY2UoL15cXC8vLCBpbnB1dC5jaGFyQXQoMCkgPT09ICcvJyA/ICcvJyA6ICcnKTtcbiAgICB9XG5cbiAgICBocmVmID0gcGFyc2VVUkkoaHJlZiB8fCAnJyk7XG4gICAgYmFzZSA9IHBhcnNlVVJJKGJhc2UgfHwgJycpO1xuXG4gICAgcmV0dXJuICFocmVmIHx8ICFiYXNlID8gbnVsbCA6IChocmVmLnByb3RvY29sIHx8IGJhc2UucHJvdG9jb2wpICtcbiAgICAoaHJlZi5wcm90b2NvbCB8fCBocmVmLmF1dGhvcml0eSA/IGhyZWYuYXV0aG9yaXR5IDogYmFzZS5hdXRob3JpdHkpICtcbiAgICByZW1vdmVEb3RTZWdtZW50cyhocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5IHx8IGhyZWYucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgPyBocmVmLnBhdGhuYW1lIDogKGhyZWYucGF0aG5hbWUgPyAoKGJhc2UuYXV0aG9yaXR5ICYmICFiYXNlLnBhdGhuYW1lID8gJy8nIDogJycpICsgYmFzZS5wYXRobmFtZS5zbGljZSgwLCBiYXNlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKSArIGhyZWYucGF0aG5hbWUpIDogYmFzZS5wYXRobmFtZSkpICtcbiAgICAoaHJlZi5wcm90b2NvbCB8fCBocmVmLmF1dGhvcml0eSB8fCBocmVmLnBhdGhuYW1lID8gaHJlZi5zZWFyY2ggOiAoaHJlZi5zZWFyY2ggfHwgYmFzZS5zZWFyY2gpKSArXG4gICAgaHJlZi5oYXNoO1xufVxuXG5mdW5jdGlvbiBnZXREb2N1bWVudFVyaSh1cmkpIHtcbiAgICByZXR1cm4gdXJpLnNwbGl0KCcjJylbMF07XG59XG5cbmZ1bmN0aW9uIG5vcm1TY2hlbWEoc2NoZW1hLCBiYXNlVXJpKSB7XG4gICAgaWYgKHNjaGVtYSAmJiB0eXBlb2Ygc2NoZW1hID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGlmIChiYXNlVXJpID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGJhc2VVcmkgPSBzY2hlbWEuaWQ7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHNjaGVtYS5pZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgYmFzZVVyaSA9IHJlc29sdmVVcmwoYmFzZVVyaSwgc2NoZW1hLmlkKTtcbiAgICAgICAgICAgIHNjaGVtYS5pZCA9IGJhc2VVcmk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBub3JtU2NoZW1hKHNjaGVtYVtpXSwgYmFzZVVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVsnJHJlZiddID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgc2NoZW1hWyckcmVmJ10gPSByZXNvbHZlVXJsKGJhc2VVcmksIHNjaGVtYVsnJHJlZiddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9PSBcImVudW1cIikge1xuICAgICAgICAgICAgICAgICAgICBub3JtU2NoZW1hKHNjaGVtYVtrZXldLCBiYXNlVXJpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvclJlcG9ydGVyKGxhbmd1YWdlKSB7XG4gICAgbGFuZ3VhZ2UgPSBsYW5ndWFnZSB8fCAnZW4nO1xuXG4gICAgdmFyIGVycm9yTWVzc2FnZXMgPSBsYW5ndWFnZXNbbGFuZ3VhZ2VdO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICB2YXIgbWVzc2FnZVRlbXBsYXRlID0gZXJyb3JNZXNzYWdlc1tlcnJvci5jb2RlXSB8fCBFcnJvck1lc3NhZ2VzRGVmYXVsdFtlcnJvci5jb2RlXTtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlVGVtcGxhdGUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJVbmtub3duIGVycm9yIGNvZGUgXCIgKyBlcnJvci5jb2RlICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IubWVzc2FnZVBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1lc3NhZ2VQYXJhbXMgPSBlcnJvci5wYXJhbXM7XG4gICAgICAgIC8vIEFkYXB0ZWQgZnJvbSBDcm9ja2ZvcmQncyBzdXBwbGFudCgpXG4gICAgICAgIHJldHVybiBtZXNzYWdlVGVtcGxhdGUucmVwbGFjZSgvXFx7KFtee31dKilcXH0vZywgZnVuY3Rpb24gKHdob2xlLCB2YXJOYW1lKSB7XG4gICAgICAgICAgICB2YXIgc3ViVmFsdWUgPSBtZXNzYWdlUGFyYW1zW3Zhck5hbWVdO1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzdWJWYWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHN1YlZhbHVlID09PSAnbnVtYmVyJyA/IHN1YlZhbHVlIDogd2hvbGU7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5cbnZhciBFcnJvckNvZGVzID0ge1xuICAgIElOVkFMSURfVFlQRTogMCxcbiAgICBFTlVNX01JU01BVENIOiAxLFxuICAgIEFOWV9PRl9NSVNTSU5HOiAxMCxcbiAgICBPTkVfT0ZfTUlTU0lORzogMTEsXG4gICAgT05FX09GX01VTFRJUExFOiAxMixcbiAgICBOT1RfUEFTU0VEOiAxMyxcbiAgICAvLyBOdW1lcmljIGVycm9yc1xuICAgIE5VTUJFUl9NVUxUSVBMRV9PRjogMTAwLFxuICAgIE5VTUJFUl9NSU5JTVVNOiAxMDEsXG4gICAgTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiAxMDIsXG4gICAgTlVNQkVSX01BWElNVU06IDEwMyxcbiAgICBOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6IDEwNCxcbiAgICBOVU1CRVJfTk9UX0FfTlVNQkVSOiAxMDUsXG4gICAgLy8gU3RyaW5nIGVycm9yc1xuICAgIFNUUklOR19MRU5HVEhfU0hPUlQ6IDIwMCxcbiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6IDIwMSxcbiAgICBTVFJJTkdfUEFUVEVSTjogMjAyLFxuICAgIC8vIE9iamVjdCBlcnJvcnNcbiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiAzMDAsXG4gICAgT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTogMzAxLFxuICAgIE9CSkVDVF9SRVFVSVJFRDogMzAyLFxuICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IDMwMyxcbiAgICBPQkpFQ1RfREVQRU5ERU5DWV9LRVk6IDMwNCxcbiAgICAvLyBBcnJheSBlcnJvcnNcbiAgICBBUlJBWV9MRU5HVEhfU0hPUlQ6IDQwMCxcbiAgICBBUlJBWV9MRU5HVEhfTE9ORzogNDAxLFxuICAgIEFSUkFZX1VOSVFVRTogNDAyLFxuICAgIEFSUkFZX0FERElUSU9OQUxfSVRFTVM6IDQwMyxcbiAgICAvLyBDdXN0b20vdXNlci1kZWZpbmVkIGVycm9yc1xuICAgIEZPUk1BVF9DVVNUT006IDUwMCxcbiAgICBLRVlXT1JEX0NVU1RPTTogNTAxLFxuICAgIC8vIFNjaGVtYSBzdHJ1Y3R1cmVcbiAgICBDSVJDVUxBUl9SRUZFUkVOQ0U6IDYwMCxcbiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zXG4gICAgVU5LTk9XTl9QUk9QRVJUWTogMTAwMFxufTtcbnZhciBFcnJvckNvZGVMb29rdXAgPSB7fTtcbmZvciAodmFyIGtleSBpbiBFcnJvckNvZGVzKSB7XG4gICAgRXJyb3JDb2RlTG9va3VwW0Vycm9yQ29kZXNba2V5XV0gPSBrZXk7XG59XG52YXIgRXJyb3JNZXNzYWdlc0RlZmF1bHQgPSB7XG4gICAgSU5WQUxJRF9UWVBFOiBcIkludmFsaWQgdHlwZToge3R5cGV9IChleHBlY3RlZCB7ZXhwZWN0ZWR9KVwiLFxuICAgIEVOVU1fTUlTTUFUQ0g6IFwiTm8gZW51bSBtYXRjaCBmb3I6IHt2YWx1ZX1cIixcbiAgICBBTllfT0ZfTUlTU0lORzogXCJEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXFxcImFueU9mXFxcIlwiLFxuICAgIE9ORV9PRl9NSVNTSU5HOiBcIkRhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSBcXFwib25lT2ZcXFwiXCIsXG4gICAgT05FX09GX01VTFRJUExFOiBcIkRhdGEgaXMgdmFsaWQgYWdhaW5zdCBtb3JlIHRoYW4gb25lIHNjaGVtYSBmcm9tIFxcXCJvbmVPZlxcXCI6IGluZGljZXMge2luZGV4MX0gYW5kIHtpbmRleDJ9XCIsXG4gICAgTk9UX1BBU1NFRDogXCJEYXRhIG1hdGNoZXMgc2NoZW1hIGZyb20gXFxcIm5vdFxcXCJcIixcbiAgICAvLyBOdW1lcmljIGVycm9yc1xuICAgIE5VTUJFUl9NVUxUSVBMRV9PRjogXCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIG11bHRpcGxlIG9mIHttdWx0aXBsZU9mfVwiLFxuICAgIE5VTUJFUl9NSU5JTVVNOiBcIlZhbHVlIHt2YWx1ZX0gaXMgbGVzcyB0aGFuIG1pbmltdW0ge21pbmltdW19XCIsXG4gICAgTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiBcIlZhbHVlIHt2YWx1ZX0gaXMgZXF1YWwgdG8gZXhjbHVzaXZlIG1pbmltdW0ge21pbmltdW19XCIsXG4gICAgTlVNQkVSX01BWElNVU06IFwiVmFsdWUge3ZhbHVlfSBpcyBncmVhdGVyIHRoYW4gbWF4aW11bSB7bWF4aW11bX1cIixcbiAgICBOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6IFwiVmFsdWUge3ZhbHVlfSBpcyBlcXVhbCB0byBleGNsdXNpdmUgbWF4aW11bSB7bWF4aW11bX1cIixcbiAgICBOVU1CRVJfTk9UX0FfTlVNQkVSOiBcIlZhbHVlIHt2YWx1ZX0gaXMgbm90IGEgdmFsaWQgbnVtYmVyXCIsXG4gICAgLy8gU3RyaW5nIGVycm9yc1xuICAgIFNUUklOR19MRU5HVEhfU0hPUlQ6IFwiU3RyaW5nIGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0gY2hhcnMpLCBtaW5pbXVtIHttaW5pbXVtfVwiLFxuICAgIFNUUklOR19MRU5HVEhfTE9ORzogXCJTdHJpbmcgaXMgdG9vIGxvbmcgKHtsZW5ndGh9IGNoYXJzKSwgbWF4aW11bSB7bWF4aW11bX1cIixcbiAgICBTVFJJTkdfUEFUVEVSTjogXCJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggcGF0dGVybjoge3BhdHRlcm59XCIsXG4gICAgLy8gT2JqZWN0IGVycm9yc1xuICAgIE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06IFwiVG9vIGZldyBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1pbmltdW0ge21pbmltdW19XCIsXG4gICAgT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTogXCJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19XCIsXG4gICAgT0JKRUNUX1JFUVVJUkVEOiBcIk1pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHk6IHtrZXl9XCIsXG4gICAgT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzogXCJBZGRpdGlvbmFsIHByb3BlcnRpZXMgbm90IGFsbG93ZWRcIixcbiAgICBPQkpFQ1RfREVQRU5ERU5DWV9LRVk6IFwiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSlcIixcbiAgICAvLyBBcnJheSBlcnJvcnNcbiAgICBBUlJBWV9MRU5HVEhfU0hPUlQ6IFwiQXJyYXkgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSksIG1pbmltdW0ge21pbmltdW19XCIsXG4gICAgQVJSQVlfTEVOR1RIX0xPTkc6IFwiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX1cIixcbiAgICBBUlJBWV9VTklRVUU6IFwiQXJyYXkgaXRlbXMgYXJlIG5vdCB1bmlxdWUgKGluZGljZXMge21hdGNoMX0gYW5kIHttYXRjaDJ9KVwiLFxuICAgIEFSUkFZX0FERElUSU9OQUxfSVRFTVM6IFwiQWRkaXRpb25hbCBpdGVtcyBub3QgYWxsb3dlZFwiLFxuICAgIC8vIEZvcm1hdCBlcnJvcnNcbiAgICBGT1JNQVRfQ1VTVE9NOiBcIkZvcm1hdCB2YWxpZGF0aW9uIGZhaWxlZCAoe21lc3NhZ2V9KVwiLFxuICAgIEtFWVdPUkRfQ1VTVE9NOiBcIktleXdvcmQgZmFpbGVkOiB7a2V5fSAoe21lc3NhZ2V9KVwiLFxuICAgIC8vIFNjaGVtYSBzdHJ1Y3R1cmVcbiAgICBDSVJDVUxBUl9SRUZFUkVOQ0U6IFwiQ2lyY3VsYXIgJHJlZnM6IHt1cmxzfVwiLFxuICAgIC8vIE5vbi1zdGFuZGFyZCB2YWxpZGF0aW9uIG9wdGlvbnNcbiAgICBVTktOT1dOX1BST1BFUlRZOiBcIlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpXCJcbn07XG5cbmZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihjb2RlLCBwYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMpIHtcbiAgICBFcnJvci5jYWxsKHRoaXMpO1xuICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZXJyb3IgY29kZSBzdXBwbGllZDogXCIgKyBzY2hlbWFQYXRoKTtcbiAgICB9XG4gICAgdGhpcy5tZXNzYWdlID0gJyc7XG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLmRhdGFQYXRoID0gZGF0YVBhdGggfHwgXCJcIjtcbiAgICB0aGlzLnNjaGVtYVBhdGggPSBzY2hlbWFQYXRoIHx8IFwiXCI7XG4gICAgdGhpcy5zdWJFcnJvcnMgPSBzdWJFcnJvcnMgfHwgbnVsbDtcblxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtcbiAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrIHx8IGVyci5zdGFja3RyYWNlO1xuICAgIGlmICghdGhpcy5zdGFjaykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sgPSBlcnIuc3RhY2sgfHwgZXJyLnN0YWNrdHJhY2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5WYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVmFsaWRhdGlvbkVycm9yO1xuVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5uYW1lID0gJ1ZhbGlkYXRpb25FcnJvcic7XG5cblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUucHJlZml4V2l0aCA9IGZ1bmN0aW9uIChkYXRhUHJlZml4LCBzY2hlbWFQcmVmaXgpIHtcbiAgICBpZiAoZGF0YVByZWZpeCAhPT0gbnVsbCkge1xuICAgICAgICBkYXRhUHJlZml4ID0gZGF0YVByZWZpeC5yZXBsYWNlKC9+L2csIFwifjBcIikucmVwbGFjZSgvXFwvL2csIFwifjFcIik7XG4gICAgICAgIHRoaXMuZGF0YVBhdGggPSBcIi9cIiArIGRhdGFQcmVmaXggKyB0aGlzLmRhdGFQYXRoO1xuICAgIH1cbiAgICBpZiAoc2NoZW1hUHJlZml4ICE9PSBudWxsKSB7XG4gICAgICAgIHNjaGVtYVByZWZpeCA9IHNjaGVtYVByZWZpeC5yZXBsYWNlKC9+L2csIFwifjBcIikucmVwbGFjZSgvXFwvL2csIFwifjFcIik7XG4gICAgICAgIHRoaXMuc2NoZW1hUGF0aCA9IFwiL1wiICsgc2NoZW1hUHJlZml4ICsgdGhpcy5zY2hlbWFQYXRoO1xuICAgIH1cbiAgICBpZiAodGhpcy5zdWJFcnJvcnMgIT09IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1YkVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5zdWJFcnJvcnNbaV0ucHJlZml4V2l0aChkYXRhUHJlZml4LCBzY2hlbWFQcmVmaXgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gaXNUcnVzdGVkVXJsKGJhc2VVcmwsIHRlc3RVcmwpIHtcbiAgICBpZiAodGVzdFVybC5zdWJzdHJpbmcoMCwgYmFzZVVybC5sZW5ndGgpID09PSBiYXNlVXJsKSB7XG4gICAgICAgIHZhciByZW1haW5kZXIgPSB0ZXN0VXJsLnN1YnN0cmluZyhiYXNlVXJsLmxlbmd0aCk7XG4gICAgICAgIGlmICgodGVzdFVybC5sZW5ndGggPiAwICYmIHRlc3RVcmwuY2hhckF0KGJhc2VVcmwubGVuZ3RoIC0gMSkgPT09IFwiL1wiKVxuICAgICAgICAgICAgfHwgcmVtYWluZGVyLmNoYXJBdCgwKSA9PT0gXCIjXCJcbiAgICAgICAgICAgIHx8IHJlbWFpbmRlci5jaGFyQXQoMCkgPT09IFwiP1wiKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBsYW5ndWFnZXMgPSB7fTtcblxuZnVuY3Rpb24gY3JlYXRlQXBpKGxhbmd1YWdlKSB7XG4gICAgdmFyIGdsb2JhbENvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dCgpO1xuICAgIHZhciBjdXJyZW50TGFuZ3VhZ2U7XG4gICAgdmFyIGN1c3RvbUVycm9yUmVwb3J0ZXI7XG4gICAgdmFyIGFwaSA9IHtcbiAgICAgICAgc2V0RXJyb3JSZXBvcnRlcjogZnVuY3Rpb24gKHJlcG9ydGVyKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcG9ydGVyID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlKHJlcG9ydGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1c3RvbUVycm9yUmVwb3J0ZXIgPSByZXBvcnRlcjtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuICAgICAgICBhZGRGb3JtYXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuYWRkRm9ybWF0LmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGxhbmd1YWdlOiBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICAgICAgaWYgKCFjb2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRMYW5ndWFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VzW2NvZGVdKSB7XG4gICAgICAgICAgICAgICAgY29kZSA9IGNvZGUuc3BsaXQoJy0nKVswXTsgLy8gZmFsbCBiYWNrIHRvIGJhc2UgbGFuZ3VhZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChsYW5ndWFnZXNbY29kZV0pIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50TGFuZ3VhZ2UgPSBjb2RlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlOyAvLyBzbyB5b3UgY2FuIHRlbGwgaWYgZmFsbC1iYWNrIGhhcyBoYXBwZW5lZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBhZGRMYW5ndWFnZTogZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2VNYXApIHtcbiAgICAgICAgICAgIHZhciBrZXk7XG4gICAgICAgICAgICBmb3IgKGtleSBpbiBFcnJvckNvZGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VNYXBba2V5XSAmJiAhbWVzc2FnZU1hcFtFcnJvckNvZGVzW2tleV1dKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VNYXBbRXJyb3JDb2Rlc1trZXldXSA9IG1lc3NhZ2VNYXBba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcm9vdENvZGUgPSBjb2RlLnNwbGl0KCctJylbMF07XG4gICAgICAgICAgICBpZiAoIWxhbmd1YWdlc1tyb290Q29kZV0pIHsgLy8gdXNlIGZvciBiYXNlIGxhbmd1YWdlIGlmIG5vdCB5ZXQgZGVmaW5lZFxuICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9IG1lc3NhZ2VNYXA7XG4gICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW3Jvb3RDb2RlXSA9IG1lc3NhZ2VNYXA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9IE9iamVjdC5jcmVhdGUobGFuZ3VhZ2VzW3Jvb3RDb2RlXSk7XG4gICAgICAgICAgICAgICAgZm9yIChrZXkgaW4gbWVzc2FnZU1hcCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxhbmd1YWdlc1tyb290Q29kZV1ba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tyb290Q29kZV1ba2V5XSA9IG1lc3NhZ2VNYXBba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZXNbY29kZV1ba2V5XSA9IG1lc3NhZ2VNYXBba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZnJlc2hBcGk6IGZ1bmN0aW9uIChsYW5ndWFnZSkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUFwaSgpO1xuICAgICAgICAgICAgaWYgKGxhbmd1YWdlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0Lmxhbmd1YWdlKGxhbmd1YWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZhdWx0RXJyb3JSZXBvcnRlcihjdXJyZW50TGFuZ3VhZ2UpO1xuICAgICAgICAgICAgdmFyIGVycm9yUmVwb3J0ZXIgPSBjdXN0b21FcnJvclJlcG9ydGVyID8gZnVuY3Rpb24gKGVycm9yLCBkYXRhLCBzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tRXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKSB8fCBkZWYoZXJyb3IsIGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICB9IDogZGVmO1xuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dChnbG9iYWxDb250ZXh0LCBmYWxzZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgc2NoZW1hID0ge1wiJHJlZlwiOiBzY2hlbWF9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGV4dC5hZGRTY2hlbWEoXCJcIiwgc2NoZW1hKTtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbnRleHQudmFsaWRhdGVBbGwoZGF0YSwgc2NoZW1hLCBudWxsLCBudWxsLCBcIlwiKTtcbiAgICAgICAgICAgIGlmICghZXJyb3IgJiYgYmFuVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IGNvbnRleHQuYmFuVW5rbm93blByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgICAgIHRoaXMubWlzc2luZyA9IGNvbnRleHQubWlzc2luZztcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSAoZXJyb3IgPT09IG51bGwpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsaWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlUmVzdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRlLmFwcGx5KHJlc3VsdCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH0sXG4gICAgICAgIHZhbGlkYXRlTXVsdGlwbGU6IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcykge1xuICAgICAgICAgICAgdmFyIGRlZiA9IGRlZmF1bHRFcnJvclJlcG9ydGVyKGN1cnJlbnRMYW5ndWFnZSk7XG4gICAgICAgICAgICB2YXIgZXJyb3JSZXBvcnRlciA9IGN1c3RvbUVycm9yUmVwb3J0ZXIgPyBmdW5jdGlvbiAoZXJyb3IsIGRhdGEsIHNjaGVtYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjdXN0b21FcnJvclJlcG9ydGVyKGVycm9yLCBkYXRhLCBzY2hlbWEpIHx8IGRlZihlcnJvciwgZGF0YSwgc2NoZW1hKTtcbiAgICAgICAgICAgIH0gOiBkZWY7XG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBWYWxpZGF0b3JDb250ZXh0KGdsb2JhbENvbnRleHQsIHRydWUsIGVycm9yUmVwb3J0ZXIsIGNoZWNrUmVjdXJzaXZlLCBiYW5Vbmtub3duUHJvcGVydGllcyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHNjaGVtYSA9IHtcIiRyZWZcIjogc2NoZW1hfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRleHQuYWRkU2NoZW1hKFwiXCIsIHNjaGVtYSk7XG4gICAgICAgICAgICBjb250ZXh0LnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYSwgbnVsbCwgbnVsbCwgXCJcIik7XG4gICAgICAgICAgICBpZiAoYmFuVW5rbm93blByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmJhblVua25vd25Qcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICAgICAgICByZXN1bHQuZXJyb3JzID0gY29udGV4dC5lcnJvcnM7XG4gICAgICAgICAgICByZXN1bHQubWlzc2luZyA9IGNvbnRleHQubWlzc2luZztcbiAgICAgICAgICAgIHJlc3VsdC52YWxpZCA9IChyZXN1bHQuZXJyb3JzLmxlbmd0aCA9PT0gMCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuICAgICAgICBhZGRTY2hlbWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmFkZFNjaGVtYS5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTY2hlbWE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmdldFNjaGVtYS5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTY2hlbWFNYXA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxDb250ZXh0LmdldFNjaGVtYU1hcC5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBnZXRTY2hlbWFVcmlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWFVcmlzLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sXG4gICAgICAgIGdldE1pc3NpbmdVcmlzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRNaXNzaW5nVXJpcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBkcm9wU2NoZW1hczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5kcm9wU2NoZW1hcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xuICAgICAgICB9LFxuICAgICAgICBkZWZpbmVLZXl3b3JkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWxDb250ZXh0LmRlZmluZUtleXdvcmQuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGVmaW5lRXJyb3I6IGZ1bmN0aW9uIChjb2RlTmFtZSwgY29kZU51bWJlciwgZGVmYXVsdE1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29kZU5hbWUgIT09ICdzdHJpbmcnIHx8ICEvXltBLVpdKyhfW0EtWl0rKSokLy50ZXN0KGNvZGVOYW1lKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgaW4gVVBQRVJfQ0FTRV9XSVRIX1VOREVSU0NPUkVTJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvZGVOdW1iZXIgIT09ICdudW1iZXInIHx8IGNvZGVOdW1iZXIgJSAxICE9PSAwIHx8IGNvZGVOdW1iZXIgPCAxMDAwMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBudW1iZXIgbXVzdCBiZSBhbiBpbnRlZ2VyID4gMTAwMDAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb2Rlc1tjb2RlTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBhbHJlYWR5IGRlZmluZWQ6ICcgKyBjb2RlTmFtZSArICcgYXMgJyArIEVycm9yQ29kZXNbY29kZU5hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb2RlTG9va3VwW2NvZGVOdW1iZXJdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgY29kZSBhbHJlYWR5IHVzZWQ6ICcgKyBFcnJvckNvZGVMb29rdXBbY29kZU51bWJlcl0gKyAnIGFzICcgKyBjb2RlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEVycm9yQ29kZXNbY29kZU5hbWVdID0gY29kZU51bWJlcjtcbiAgICAgICAgICAgIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSA9IGNvZGVOYW1lO1xuICAgICAgICAgICAgRXJyb3JNZXNzYWdlc0RlZmF1bHRbY29kZU5hbWVdID0gRXJyb3JNZXNzYWdlc0RlZmF1bHRbY29kZU51bWJlcl0gPSBkZWZhdWx0TWVzc2FnZTtcbiAgICAgICAgICAgIGZvciAodmFyIGxhbmdDb2RlIGluIGxhbmd1YWdlcykge1xuICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlc1tsYW5nQ29kZV07XG4gICAgICAgICAgICAgICAgaWYgKGxhbmd1YWdlW2NvZGVOYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZVtjb2RlTnVtYmVyXSA9IGxhbmd1YWdlW2NvZGVOdW1iZXJdIHx8IGxhbmd1YWdlW2NvZGVOYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBnbG9iYWxDb250ZXh0LnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLmVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubWlzc2luZyA9IFtdO1xuICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIG1pc3Npbmc6IFtdLFxuICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgIG5vcm1TY2hlbWE6IG5vcm1TY2hlbWEsXG4gICAgICAgIHJlc29sdmVVcmw6IHJlc29sdmVVcmwsXG4gICAgICAgIGdldERvY3VtZW50VXJpOiBnZXREb2N1bWVudFVyaSxcbiAgICAgICAgZXJyb3JDb2RlczogRXJyb3JDb2Rlc1xuICAgIH07XG4gICAgYXBpLmxhbmd1YWdlKGxhbmd1YWdlIHx8ICdlbicpO1xuICAgIHJldHVybiBhcGk7XG59XG5cbi8vZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRvcigpIHtcbnZhciB0djQgPSBjcmVhdGVBcGkoKTtcbnR2NC5hZGRMYW5ndWFnZSgnZW4tZ2InLCBFcnJvck1lc3NhZ2VzRGVmYXVsdCk7XG5cbi8vbGVnYWN5IHByb3BlcnR5XG50djQudHY0ID0gdHY0O1xuLy9yZXR1cm4gdHY0O1xuZXhwb3J0IGRlZmF1bHQgdHY0O1xuLy99IiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuLyoqXG4gKiBTdXBwb3J0IG1vZHVsZSB3aXRoIHNvbWUgZnVuY3Rpb25zIHdpbGwgYmUgdXNlZnVsXG4gKiBAbW9kdWxlIHV0aWxzXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiBkaXZpZGVVUkxcbiAqIEB0eXBlIE9iamVjdFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIHR5cGUgb2YgVVJMXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gb2YgVVJMXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaWRlbnRpdHkgVGhlIGlkZW50aXR5IG9mIFVSTFxuICovXG5cbi8qKlxuICogRGl2aWRlIGFuIHVybCBpbiB0eXBlLCBkb21haW4gYW5kIGlkZW50aXR5XG4gKiBAcGFyYW0gIHtVUkwuVVJMfSB1cmwgLSB1cmwgYWRkcmVzc1xuICogQHJldHVybiB7ZGl2aWRlVVJMfSB0aGUgcmVzdWx0IG9mIGRpdmlkZVVSTFxuICovXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlVVJMKHVybCkge1xuXG4gIGlmICghdXJsKSB0aHJvdyBFcnJvcignVVJMIGlzIG5lZWRlZCB0byBzcGxpdCcpO1xuXG4gIC8vIGxldCByZSA9IC8oW2EtekEtWi1dKik/OlxcL1xcLyg/OlxcLik/KFstYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fVxcLlthLXpdezIsNn1cXGIpKihcXC9bXFwvXFxkXFx3XFwuLV0qKSooPzpbXFw/XSkqKC4rKSovZ2k7XG4gIGxldCByZSA9IC8oW2EtekEtWi1dKik6XFwvXFwvKD86XFwuKT8oWy1hLXpBLVowLTlAOiUuX1xcK34jPV17MiwyNTZ9KShbLWEtekEtWjAtOUA6JS5fXFwrfiM9XFwvXSopL2dpO1xuICBsZXQgc3Vic3QgPSAnJDEsJDIsJDMnO1xuICBsZXQgcGFydHMgPSB1cmwucmVwbGFjZShyZSwgc3Vic3QpLnNwbGl0KCcsJyk7XG5cbiAgLy8gSWYgdGhlIHVybCBoYXMgbm8gcHJvdG9jb2wsIHRoZSBkZWZhdWx0IHByb3RvY29sIHNldCBpcyBodHRwc1xuICBpZiAocGFydHNbMF0gPT09IHVybCkge1xuICAgIHBhcnRzWzBdID0gJ2h0dHBzJztcbiAgICBwYXJ0c1sxXSA9IHVybDtcbiAgfVxuXG4gIGxldCByZXN1bHQgPSB7XG4gICAgdHlwZTogcGFydHNbMF0sXG4gICAgZG9tYWluOiBwYXJ0c1sxXSxcbiAgICBpZGVudGl0eTogcGFydHNbMl1cbiAgfTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlRW1haWwoZW1haWwpIHtcbiAgbGV0IGluZGV4T2ZBdCA9IGVtYWlsLmluZGV4T2YoJ0AnKTtcblxuICBsZXQgcmVzdWx0ID0ge1xuICAgIHVzZXJuYW1lOiBlbWFpbC5zdWJzdHJpbmcoMCwgaW5kZXhPZkF0KSxcbiAgICBkb21haW46IGVtYWlsLnN1YnN0cmluZyhpbmRleE9mQXQgKyAxLCBlbWFpbC5sZW5ndGgpXG4gIH07XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhbiBPYmplY3QgaXMgZW1wdHlcbiAqIEBwYXJhbSAge09iamVjdH0gb2JqZWN0IE9iamVjdCB0byBiZSBjaGVja2VkXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBzdGF0dXMgb2YgT2JqZWN0LCBlbXB0eSBvciBub3QgKHRydWV8ZmFsc2UpO1xuICovXG5leHBvcnQgZnVuY3Rpb24gZW1wdHlPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCA+IDAgPyBmYWxzZSA6IHRydWU7XG59XG5cbi8qKlxuICogTWFrZSBhIENPUFkgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbiAqIEBwYXJhbSAge09iamVjdH0gIG9iaiAtIG9iamVjdCB0byBiZSBjbG9uZWRcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDbG9uZShvYmopIHtcbiAgLy9UT0RPOiBzaW1wbGUgYnV0IGluZWZmaWNpZW50IEpTT04gZGVlcCBjbG9uZS4uLlxuICBpZiAob2JqKSByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVBhdGhGcm9tVVJMKHVybCkge1xuICBsZXQgc3BsaXRVUkwgPSB1cmwuc3BsaXQoJy8nKTtcbiAgcmV0dXJuIHNwbGl0VVJMWzBdICsgJy8vJyArIHNwbGl0VVJMWzJdICsgJy8nICsgc3BsaXRVUkxbM107XG59XG5cbi8qKlxuICogT2J0YWlucyB0aGUgdXNlciBVUkwgdGhhdCBjb3JyZXNwb25kcyB0byBhIGdpdmVuIGVtYWlsXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHVzZXJFbWFpbCBUaGUgdXNlciBlbWFpbFxuICogQHJldHVybiB7VVJMLlVSTH0gdXNlclVSTCBUaGUgdXNlciBVUkxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJVUkxGcm9tRW1haWwodXNlckVtYWlsKSB7XG4gIGxldCBpbmRleE9mQXQgPSB1c2VyRW1haWwuaW5kZXhPZignQCcpO1xuICByZXR1cm4gJ3VzZXI6Ly8nICsgdXNlckVtYWlsLnN1YnN0cmluZyhpbmRleE9mQXQgKyAxLCB1c2VyRW1haWwubGVuZ3RoKSArICcvJyArIHVzZXJFbWFpbC5zdWJzdHJpbmcoMCwgaW5kZXhPZkF0KTtcbn1cblxuLyoqXG4gKiBPYnRhaW5zIHRoZSB1c2VyIGVtYWlsIHRoYXQgY29ycmVzcG9uZHMgdG8gYSBnaXZlbiBVUkxcbiAqIEBwYXJhbSAge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMXG4gKiBAcmV0dXJuIHtzdHJpbmd9IHVzZXJFbWFpbCBUaGUgdXNlciBlbWFpbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckVtYWlsRnJvbVVSTCh1c2VyVVJMKSB7XG4gIGxldCB1cmwgPSBkaXZpZGVVUkwodXNlclVSTCk7XG4gIHJldHVybiB1cmwuaWRlbnRpdHkucmVwbGFjZSgnLycsICcnKSArICdAJyArIHVybC5kb21haW47IC8vIGlkZW50aXR5IGZpZWxkIGhhcyAnL2V4YW1wbGVJRCcgaW5zdGVhZCBvZiAnZXhhbXBsZUlEJ1xufVxuXG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIHVzZXIgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSBVUkwgZm9ybWF0LCBpZiBub3QsIGNvbnZlcnQgdG8gVVJMIGZvcm1hdFxuICogQHBhcmFtICB7c3RyaW5nfSAgIGlkZW50aWZpZXIgIHVzZXIgaWRlbnRpZmllclxuICogQHJldHVybiB7c3RyaW5nfSAgIHVzZXJVUkwgICAgdGhlIHVzZXIgVVJMXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9Vc2VyVVJMKGlkZW50aWZpZXIpIHtcblxuICAvLyBjaGVjayBpZiB0aGUgaWRlbnRpZmllciBpcyBhbHJlYWR5IGluIHRoZSB1cmwgZm9ybWF0XG4gIGlmIChpZGVudGlmaWVyLnN1YnN0cmluZygwLCA3KSA9PT0gJ3VzZXI6Ly8nKSB7XG4gICAgbGV0IGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwoaWRlbnRpZmllcik7XG5cbiAgICAvL2NoZWNrIGlmIHRoZSB1cmwgaXMgd2VsbCBmb3JtYXRlZFxuICAgIGlmIChkaXZpZGVkVVJMLmRvbWFpbiAmJiBkaXZpZGVkVVJMLmlkZW50aXR5KSB7XG4gICAgICByZXR1cm4gaWRlbnRpZmllcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgJ3VzZXJVUkwgd2l0aCB3cm9uZyBmb3JtYXQnO1xuICAgIH1cblxuICAvL2lmIG5vdCwgY29udmVydCB0aGUgdXNlciBlbWFpbCB0byBVUkwgZm9ybWF0XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGdldFVzZXJVUkxGcm9tRW1haWwoaWRlbnRpZmllcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0YU9iamVjdFVSTCh1cmwpIHtcbiAgbGV0IHNjaGVtYXNUb0lnbm9yZSA9IFsnZG9tYWluLWlkcCcsICdydW50aW1lJywgJ2RvbWFpbicsICdoeXBlcnR5J107XG4gIGxldCBzcGxpdFVSTCA9ICh1cmwpLnNwbGl0KCc6Ly8nKTtcbiAgbGV0IHVybFNjaGVtYSA9IHNwbGl0VVJMWzBdO1xuXG4gIHJldHVybiBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZih1cmxTY2hlbWEpID09PSAtMTtcbn1cblxuLyoqXG4gKiBnZXQgaW5mb3JtYXRpb24gcmVsYXRpdmUgZWFjaCBjb21wb25lbnQgY29uZmlndXJlZCBvbiBydW50aW1lIGNvbmZpZ3VyYXRpb247XG4gKiBAcGFyYW0gIHtvYmplY3R9IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggYWxsIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge3N0cmluZ30gY29tcG9uZW50ICAgICBzdHJpbmcgd2l0aCB0aGUgY29tcG9uZW50IHRvIGdldCB0aGUgY29uZmlndXJhdGlvbiwgbGlrZSwgcnVudGltZVVSTFMsIGNhdGFsb2d1ZVVSTHMsIG1zZ05vZGVVUkwsIGRvbWFpblJlZ2lzdHJ5VVJMO1xuICogQHBhcmFtICB7c3RyaW5nfSByZXNvdXJjZSAgICAgIHR5cGUgb2YgcmVzb3VyY2UgdG8gZ2V0LCBsaWtlLCBjYXRhbG9ndWUsIHJ1bnRpbWVVQSwgcHJvdG9jb2xzdHViLCBpZHBQcm94eVxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgICAgIHJldHVybiBhbiBvYmplY3Qgd2l0aCBhbGwgY29uZmlndXJhdGlvbnM7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzKGNvbmZpZ3VyYXRpb24sIGNvbXBvbmVudCwgcmVzb3VyY2UpIHtcbiAgbGV0IG9iamVjdFJlc291cmNlID0gY29uZmlndXJhdGlvbltjb21wb25lbnRdO1xuICBsZXQgcmVzb3VyY2VUeXBlID0gb2JqZWN0UmVzb3VyY2VbcmVzb3VyY2VdO1xuXG4gIHJldHVybiByZXNvdXJjZVR5cGU7XG59XG5cbi8qKlxuICogQnVpbGQgYSBmdWxsIHVybCB3aXRoIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb247XG4gKiBAcGFyYW0gIHtvYmplY3R9IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggYWxsIGNvbmZpZ3VyYXRpb25cbiAqIEBwYXJhbSAge3N0cmluZ30gY29tcG9uZW50ICAgICBzdHJpbmcgd2l0aCB0aGUgY29tcG9uZW50IHRvIGdldCB0aGUgY29uZmlndXJhdGlvbiwgbGlrZSwgcnVudGltZVVSTFMsIGNhdGFsb2d1ZVVSTHMsIG1zZ05vZGVVUkwsIGRvbWFpblJlZ2lzdHJ5VVJMO1xuICogQHBhcmFtICB7c3RyaW5nfSByZXNvdXJjZSAgICAgIHR5cGUgb2YgcmVzb3VyY2UgdG8gZ2V0LCBsaWtlLCBjYXRhbG9ndWUsIHJ1bnRpbWVVQSwgcHJvdG9jb2xzdHViLCBpZHBQcm94eVxuICogQHBhcmFtICB7c3RyaW5nfSB0eXBlICAgICAgICAgIHJlc291cmNlIHRvIGdldCwgbGlrZSBhIGh5cGVydHkgbmFtZSBvciBwcm90b2NvbHN0dWIgbmFtZTtcbiAqIEBwYXJhbSAge2Jvb2xlYW59IHVzZUZhbGxiYWNrICBpZiB0cnVlIHRoZSBmdW5jdGlvbiB3aWxsIGNoZWNrIGlmIGhhdmUgYSBmYWxsYmFjayB1cmw7XG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgICAgICAgcGFydGlhbCB1cmwgdG8gY29udGFjdCB0aGUgcmVzb3VyY2U7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFVSTChjb25maWd1cmF0aW9uLCBjb21wb25lbnQsIHJlc291cmNlLCB0eXBlLCB1c2VGYWxsYmFjayA9IGZhbHNlKSB7XG4gIGxldCBvYmplY3RSZXNvdXJjZSA9IGNvbmZpZ3VyYXRpb25bY29tcG9uZW50XTtcbiAgbGV0IHVybDtcblxuICBpZiAoIW9iamVjdFJlc291cmNlLmhhc093blByb3BlcnR5KHJlc291cmNlKSkge1xuICAgIHRocm93IEVycm9yKCdUaGUgY29uZmlndXJhdGlvbiAnICsgSlNPTi5zdHJpbmdpZnkob2JqZWN0UmVzb3VyY2UsICcnLCAyKSArICcgZG9uXFwndCBoYXZlIHRoZSAnICsgcmVzb3VyY2UgKyAnIHJlc291cmNlIHlvdSBhcmUgbG9va2luZyBmb3InKTtcbiAgfVxuXG4gIGxldCByZXNvdXJjZVR5cGUgPSBvYmplY3RSZXNvdXJjZVtyZXNvdXJjZV07XG5cbiAgaWYgKHR5cGUpIHtcbiAgICB1cmwgPSByZXNvdXJjZVR5cGUucHJlZml4ICsgY29uZmlndXJhdGlvbi5kb21haW4gKyByZXNvdXJjZVR5cGUuc3VmZml4ICsgdHlwZTtcbiAgICBpZiAocmVzb3VyY2VUeXBlLmhhc093blByb3BlcnR5KCdmYWxsYmFjaycpICYmIHVzZUZhbGxiYWNrKSB7XG4gICAgICBpZiAocmVzb3VyY2VUeXBlLmZhbGxiYWNrLmluZGV4T2YoJyVkb21haW4lJykpIHtcbiAgICAgICAgdXJsID0gcmVzb3VyY2VUeXBlLmZhbGxiYWNrLnJlcGxhY2UoLyglZG9tYWluJSkvZywgY29uZmlndXJhdGlvbi5kb21haW4pICsgdHlwZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybCA9IHJlc291cmNlVHlwZS5mYWxsYmFjayArIHR5cGU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHVybCA9IHJlc291cmNlVHlwZS5wcmVmaXggKyBjb25maWd1cmF0aW9uLmRvbWFpbiArIHJlc291cmNlVHlwZS5zdWZmaXg7XG4gIH1cblxuICAvLyBjb25zb2xlLmxvZyh1cmwpO1xuXG4gIHJldHVybiB1cmw7XG59XG4iXX0=

//# sourceMappingURL=Runtime.js.map
",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": "3-4b11d886-4619-959e-4009-27ac916a2e730",
    "type": "Runtimes",
    "version": 7.19999999999999,
    "description": "Description of Runtime",
    "objectName": "Runtime",
    "configuration": {},
    "runtimeType": "browser",
    "hypertyCapabilities": {
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true
    },
    "protocolCapabilities": {
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}