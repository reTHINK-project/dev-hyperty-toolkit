{
  "Runtime": {
    "sourcePackage": {
      "sourceCode": "/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for Runtime.js 
// version: 0.7.1
// Last build: Fri Jan 27 2017 18:39:48 GMT+0000 (GMT Standard Time)

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Runtime = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":20,"core-js/shim":413,"regenerator-runtime/runtime":415}],2:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/json/stringify"), __esModule: true };
},{"core-js/library/fn/json/stringify":21}],3:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/assign"), __esModule: true };
},{"core-js/library/fn/object/assign":22}],4:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/create"), __esModule: true };
},{"core-js/library/fn/object/create":23}],5:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/define-property"), __esModule: true };
},{"core-js/library/fn/object/define-property":24}],6:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-own-property-descriptor"), __esModule: true };
},{"core-js/library/fn/object/get-own-property-descriptor":25}],7:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/get-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/get-prototype-of":26}],8:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/is-frozen"), __esModule: true };
},{"core-js/library/fn/object/is-frozen":27}],9:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/keys"), __esModule: true };
},{"core-js/library/fn/object/keys":28}],10:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/object/set-prototype-of"), __esModule: true };
},{"core-js/library/fn/object/set-prototype-of":29}],11:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/promise"), __esModule: true };
},{"core-js/library/fn/promise":30}],12:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol"), __esModule: true };
},{"core-js/library/fn/symbol":31}],13:[function(require,module,exports){
module.exports = { "default": require("core-js/library/fn/symbol/iterator"), __esModule: true };
},{"core-js/library/fn/symbol/iterator":32}],14:[function(require,module,exports){
"use strict";

exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
},{}],15:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _defineProperty = require("../core-js/object/define-property");

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
},{"../core-js/object/define-property":5}],16:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _getPrototypeOf = require("../core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _getOwnPropertyDescriptor = require("../core-js/object/get-own-property-descriptor");

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);

  if (desc === undefined) {
    var parent = (0, _getPrototypeOf2.default)(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};
},{"../core-js/object/get-own-property-descriptor":6,"../core-js/object/get-prototype-of":7}],17:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _setPrototypeOf = require("../core-js/object/set-prototype-of");

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = require("../core-js/object/create");

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};
},{"../core-js/object/create":4,"../core-js/object/set-prototype-of":10,"../helpers/typeof":19}],18:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _typeof2 = require("../helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};
},{"../helpers/typeof":19}],19:[function(require,module,exports){
"use strict";

exports.__esModule = true;

var _iterator = require("../core-js/symbol/iterator");

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = require("../core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};
},{"../core-js/symbol":12,"../core-js/symbol/iterator":13}],20:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;
},{"../../modules/_core":141,"../../modules/core.regexp.escape":237}],21:[function(require,module,exports){
var core  = require('../../modules/_core')
  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
  return $JSON.stringify.apply($JSON, arguments);
};
},{"../../modules/_core":40}],22:[function(require,module,exports){
require('../../modules/es6.object.assign');
module.exports = require('../../modules/_core').Object.assign;
},{"../../modules/_core":40,"../../modules/es6.object.assign":106}],23:[function(require,module,exports){
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};
},{"../../modules/_core":40,"../../modules/es6.object.create":107}],24:[function(require,module,exports){
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};
},{"../../modules/_core":40,"../../modules/es6.object.define-property":108}],25:[function(require,module,exports){
require('../../modules/es6.object.get-own-property-descriptor');
var $Object = require('../../modules/_core').Object;
module.exports = function getOwnPropertyDescriptor(it, key){
  return $Object.getOwnPropertyDescriptor(it, key);
};
},{"../../modules/_core":40,"../../modules/es6.object.get-own-property-descriptor":109}],26:[function(require,module,exports){
require('../../modules/es6.object.get-prototype-of');
module.exports = require('../../modules/_core').Object.getPrototypeOf;
},{"../../modules/_core":40,"../../modules/es6.object.get-prototype-of":110}],27:[function(require,module,exports){
require('../../modules/es6.object.is-frozen');
module.exports = require('../../modules/_core').Object.isFrozen;
},{"../../modules/_core":40,"../../modules/es6.object.is-frozen":111}],28:[function(require,module,exports){
require('../../modules/es6.object.keys');
module.exports = require('../../modules/_core').Object.keys;
},{"../../modules/_core":40,"../../modules/es6.object.keys":112}],29:[function(require,module,exports){
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;
},{"../../modules/_core":40,"../../modules/es6.object.set-prototype-of":113}],30:[function(require,module,exports){
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
module.exports = require('../modules/_core').Promise;
},{"../modules/_core":40,"../modules/es6.object.to-string":114,"../modules/es6.promise":115,"../modules/es6.string.iterator":116,"../modules/web.dom.iterable":120}],31:[function(require,module,exports){
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;
},{"../../modules/_core":40,"../../modules/es6.object.to-string":114,"../../modules/es6.symbol":117,"../../modules/es7.symbol.async-iterator":118,"../../modules/es7.symbol.observable":119}],32:[function(require,module,exports){
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');
},{"../../modules/_wks-ext":102,"../../modules/es6.string.iterator":116,"../../modules/web.dom.iterable":120}],33:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],34:[function(require,module,exports){
module.exports = function(){ /* empty */ };
},{}],35:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],36:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":59}],37:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":94,"./_to-iobject":96,"./_to-length":97}],38:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":39,"./_wks":103}],39:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],40:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],41:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":33}],42:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],43:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":48}],44:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":50,"./_is-object":59}],45:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],46:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":77,"./_object-keys":80,"./_object-pie":81}],47:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , ctx       = require('./_ctx')
  , hide      = require('./_hide')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":40,"./_ctx":41,"./_global":50,"./_hide":52}],48:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],49:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":36,"./_ctx":41,"./_is-array-iter":57,"./_iter-call":60,"./_to-length":97,"./core.get-iterator-method":104}],50:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],51:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],52:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":43,"./_object-dp":72,"./_property-desc":83}],53:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":50}],54:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":43,"./_dom-create":44,"./_fails":48}],55:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],56:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":39}],57:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":65,"./_wks":103}],58:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":39}],59:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],60:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":36}],61:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":52,"./_object-create":71,"./_property-desc":83,"./_set-to-string-tag":88,"./_wks":103}],62:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":47,"./_has":51,"./_hide":52,"./_iter-create":61,"./_iterators":65,"./_library":67,"./_object-gpo":78,"./_redefine":85,"./_set-to-string-tag":88,"./_wks":103}],63:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":103}],64:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],65:[function(require,module,exports){
module.exports = {};
},{}],66:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":80,"./_to-iobject":96}],67:[function(require,module,exports){
module.exports = true;
},{}],68:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":48,"./_has":51,"./_is-object":59,"./_object-dp":72,"./_uid":100}],69:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};
},{"./_cof":39,"./_global":50,"./_task":93}],70:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":48,"./_iobject":56,"./_object-gops":77,"./_object-keys":80,"./_object-pie":81,"./_to-object":98}],71:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":36,"./_dom-create":44,"./_enum-bug-keys":45,"./_html":53,"./_object-dps":73,"./_shared-key":89}],72:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":36,"./_descriptors":43,"./_ie8-dom-define":54,"./_to-primitive":99}],73:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":36,"./_descriptors":43,"./_object-dp":72,"./_object-keys":80}],74:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":43,"./_has":51,"./_ie8-dom-define":54,"./_object-pie":81,"./_property-desc":83,"./_to-iobject":96,"./_to-primitive":99}],75:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":76,"./_to-iobject":96}],76:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":45,"./_object-keys-internal":79}],77:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],78:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":51,"./_shared-key":89,"./_to-object":98}],79:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":37,"./_has":51,"./_shared-key":89,"./_to-iobject":96}],80:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":45,"./_object-keys-internal":79}],81:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],82:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":40,"./_export":47,"./_fails":48}],83:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],84:[function(require,module,exports){
var hide = require('./_hide');
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};
},{"./_hide":52}],85:[function(require,module,exports){
module.exports = require('./_hide');
},{"./_hide":52}],86:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object')
  , anObject = require('./_an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./_an-object":36,"./_ctx":41,"./_is-object":59,"./_object-gopd":74}],87:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , core        = require('./_core')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_core":40,"./_descriptors":43,"./_global":50,"./_object-dp":72,"./_wks":103}],88:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":51,"./_object-dp":72,"./_wks":103}],89:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":90,"./_uid":100}],90:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":50}],91:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":33,"./_an-object":36,"./_wks":103}],92:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":42,"./_to-integer":95}],93:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":39,"./_ctx":41,"./_dom-create":44,"./_global":50,"./_html":53,"./_invoke":55}],94:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":95}],95:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],96:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":42,"./_iobject":56}],97:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":95}],98:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":42}],99:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":59}],100:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],101:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":40,"./_global":50,"./_library":67,"./_object-dp":72,"./_wks-ext":102}],102:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":103}],103:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":50,"./_shared":90,"./_uid":100}],104:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":38,"./_core":40,"./_iterators":65,"./_wks":103}],105:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":34,"./_iter-define":62,"./_iter-step":64,"./_iterators":65,"./_to-iobject":96}],106:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":47,"./_object-assign":70}],107:[function(require,module,exports){
var $export = require('./_export')
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: require('./_object-create')});
},{"./_export":47,"./_object-create":71}],108:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":43,"./_export":47,"./_object-dp":72}],109:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = require('./_to-iobject')
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./_object-gopd":74,"./_object-sap":82,"./_to-iobject":96}],110:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = require('./_to-object')
  , $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./_object-gpo":78,"./_object-sap":82,"./_to-object":98}],111:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./_is-object":59,"./_object-sap":82}],112:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":80,"./_object-sap":82,"./_to-object":98}],113:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});
},{"./_export":47,"./_set-proto":86}],114:[function(require,module,exports){

},{}],115:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":33,"./_an-instance":35,"./_classof":38,"./_core":40,"./_ctx":41,"./_export":47,"./_for-of":49,"./_global":50,"./_is-object":59,"./_iter-detect":63,"./_library":67,"./_microtask":69,"./_redefine-all":84,"./_set-species":87,"./_set-to-string-tag":88,"./_species-constructor":91,"./_task":93,"./_wks":103}],116:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":62,"./_string-at":92}],117:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":36,"./_descriptors":43,"./_enum-keys":46,"./_export":47,"./_fails":48,"./_global":50,"./_has":51,"./_hide":52,"./_is-array":58,"./_keyof":66,"./_library":67,"./_meta":68,"./_object-create":71,"./_object-dp":72,"./_object-gopd":74,"./_object-gopn":76,"./_object-gopn-ext":75,"./_object-gops":77,"./_object-keys":80,"./_object-pie":81,"./_property-desc":83,"./_redefine":85,"./_set-to-string-tag":88,"./_shared":90,"./_to-iobject":96,"./_to-primitive":99,"./_uid":100,"./_wks":103,"./_wks-define":101,"./_wks-ext":102}],118:[function(require,module,exports){
require('./_wks-define')('asyncIterator');
},{"./_wks-define":101}],119:[function(require,module,exports){
require('./_wks-define')('observable');
},{"./_wks-define":101}],120:[function(require,module,exports){
require('./es6.array.iterator');
var global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , TO_STRING_TAG = require('./_wks')('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}
},{"./_global":50,"./_hide":52,"./_iterators":65,"./_wks":103,"./es6.array.iterator":105}],121:[function(require,module,exports){
arguments[4][33][0].apply(exports,arguments)
},{"dup":33}],122:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function(it, msg){
  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
  return +it;
};
},{"./_cof":136}],123:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};
},{"./_hide":158,"./_wks":235}],124:[function(require,module,exports){
arguments[4][35][0].apply(exports,arguments)
},{"dup":35}],125:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./_is-object":167,"dup":36}],126:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};
},{"./_to-index":223,"./_to-length":226,"./_to-object":227}],127:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};
},{"./_to-index":223,"./_to-length":226,"./_to-object":227}],128:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":155}],129:[function(require,module,exports){
arguments[4][37][0].apply(exports,arguments)
},{"./_to-index":223,"./_to-iobject":225,"./_to-length":226,"dup":37}],130:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./_ctx')
  , IObject  = require('./_iobject')
  , toObject = require('./_to-object')
  , toLength = require('./_to-length')
  , asc      = require('./_array-species-create');
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./_array-species-create":133,"./_ctx":143,"./_iobject":163,"./_to-length":226,"./_to-object":227}],131:[function(require,module,exports){
var aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , IObject   = require('./_iobject')
  , toLength  = require('./_to-length');

module.exports = function(that, callbackfn, aLen, memo, isRight){
  aFunction(callbackfn);
  var O      = toObject(that)
    , self   = IObject(O)
    , length = toLength(O.length)
    , index  = isRight ? length - 1 : 0
    , i      = isRight ? -1 : 1;
  if(aLen < 2)for(;;){
    if(index in self){
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if(isRight ? index < 0 : length <= index){
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};
},{"./_a-function":121,"./_iobject":163,"./_to-length":226,"./_to-object":227}],132:[function(require,module,exports){
var isObject = require('./_is-object')
  , isArray  = require('./_is-array')
  , SPECIES  = require('./_wks')('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};
},{"./_is-array":165,"./_is-object":167,"./_wks":235}],133:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};
},{"./_array-species-constructor":132}],134:[function(require,module,exports){
'use strict';
var aFunction  = require('./_a-function')
  , isObject   = require('./_is-object')
  , invoke     = require('./_invoke')
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};
},{"./_a-function":121,"./_invoke":162,"./_is-object":167}],135:[function(require,module,exports){
arguments[4][38][0].apply(exports,arguments)
},{"./_cof":136,"./_wks":235,"dup":38}],136:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39}],137:[function(require,module,exports){
'use strict';
var dP          = require('./_object-dp').f
  , create      = require('./_object-create')
  , redefineAll = require('./_redefine-all')
  , ctx         = require('./_ctx')
  , anInstance  = require('./_an-instance')
  , defined     = require('./_defined')
  , forOf       = require('./_for-of')
  , $iterDefine = require('./_iter-define')
  , step        = require('./_iter-step')
  , setSpecies  = require('./_set-species')
  , DESCRIPTORS = require('./_descriptors')
  , fastKey     = require('./_meta').fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./_an-instance":124,"./_ctx":143,"./_defined":145,"./_descriptors":146,"./_for-of":155,"./_iter-define":171,"./_iter-step":173,"./_meta":180,"./_object-create":184,"./_object-dp":185,"./_redefine-all":204,"./_set-species":209}],138:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof')
  , from    = require('./_array-from-iterable');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};
},{"./_array-from-iterable":128,"./_classof":135}],139:[function(require,module,exports){
'use strict';
var redefineAll       = require('./_redefine-all')
  , getWeak           = require('./_meta').getWeak
  , anObject          = require('./_an-object')
  , isObject          = require('./_is-object')
  , anInstance        = require('./_an-instance')
  , forOf             = require('./_for-of')
  , createArrayMethod = require('./_array-methods')
  , $has              = require('./_has')
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};
},{"./_an-instance":124,"./_an-object":125,"./_array-methods":130,"./_for-of":155,"./_has":157,"./_is-object":167,"./_meta":180,"./_redefine-all":204}],140:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , $export           = require('./_export')
  , redefine          = require('./_redefine')
  , redefineAll       = require('./_redefine-all')
  , meta              = require('./_meta')
  , forOf             = require('./_for-of')
  , anInstance        = require('./_an-instance')
  , isObject          = require('./_is-object')
  , fails             = require('./_fails')
  , $iterDetect       = require('./_iter-detect')
  , setToStringTag    = require('./_set-to-string-tag')
  , inheritIfRequired = require('./_inherit-if-required');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./_an-instance":124,"./_export":150,"./_fails":152,"./_for-of":155,"./_global":156,"./_inherit-if-required":161,"./_is-object":167,"./_iter-detect":172,"./_meta":180,"./_redefine":205,"./_redefine-all":204,"./_set-to-string-tag":210}],141:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"dup":40}],142:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp')
  , createDesc      = require('./_property-desc');

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};
},{"./_object-dp":185,"./_property-desc":203}],143:[function(require,module,exports){
arguments[4][41][0].apply(exports,arguments)
},{"./_a-function":121,"dup":41}],144:[function(require,module,exports){
'use strict';
var anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive')
  , NUMBER      = 'number';

module.exports = function(hint){
  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};
},{"./_an-object":125,"./_to-primitive":228}],145:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"dup":42}],146:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"./_fails":152,"dup":43}],147:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"./_global":156,"./_is-object":167,"dup":44}],148:[function(require,module,exports){
arguments[4][45][0].apply(exports,arguments)
},{"dup":45}],149:[function(require,module,exports){
arguments[4][46][0].apply(exports,arguments)
},{"./_object-gops":191,"./_object-keys":194,"./_object-pie":195,"dup":46}],150:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , hide      = require('./_hide')
  , redefine  = require('./_redefine')
  , ctx       = require('./_ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":141,"./_ctx":143,"./_global":156,"./_hide":158,"./_redefine":205}],151:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};
},{"./_wks":235}],152:[function(require,module,exports){
arguments[4][48][0].apply(exports,arguments)
},{"dup":48}],153:[function(require,module,exports){
'use strict';
var hide     = require('./_hide')
  , redefine = require('./_redefine')
  , fails    = require('./_fails')
  , defined  = require('./_defined')
  , wks      = require('./_wks');

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};
},{"./_defined":145,"./_fails":152,"./_hide":158,"./_redefine":205,"./_wks":235}],154:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};
},{"./_an-object":125}],155:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"./_an-object":125,"./_ctx":143,"./_is-array-iter":164,"./_iter-call":169,"./_to-length":226,"./core.get-iterator-method":236,"dup":49}],156:[function(require,module,exports){
arguments[4][50][0].apply(exports,arguments)
},{"dup":50}],157:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],158:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"./_descriptors":146,"./_object-dp":185,"./_property-desc":203,"dup":52}],159:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./_global":156,"dup":53}],160:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"./_descriptors":146,"./_dom-create":147,"./_fails":152,"dup":54}],161:[function(require,module,exports){
var isObject       = require('./_is-object')
  , setPrototypeOf = require('./_set-proto').set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};
},{"./_is-object":167,"./_set-proto":208}],162:[function(require,module,exports){
arguments[4][55][0].apply(exports,arguments)
},{"dup":55}],163:[function(require,module,exports){
arguments[4][56][0].apply(exports,arguments)
},{"./_cof":136,"dup":56}],164:[function(require,module,exports){
arguments[4][57][0].apply(exports,arguments)
},{"./_iterators":174,"./_wks":235,"dup":57}],165:[function(require,module,exports){
arguments[4][58][0].apply(exports,arguments)
},{"./_cof":136,"dup":58}],166:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./_is-object":167}],167:[function(require,module,exports){
arguments[4][59][0].apply(exports,arguments)
},{"dup":59}],168:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object')
  , cof      = require('./_cof')
  , MATCH    = require('./_wks')('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};
},{"./_cof":136,"./_is-object":167,"./_wks":235}],169:[function(require,module,exports){
arguments[4][60][0].apply(exports,arguments)
},{"./_an-object":125,"dup":60}],170:[function(require,module,exports){
arguments[4][61][0].apply(exports,arguments)
},{"./_hide":158,"./_object-create":184,"./_property-desc":203,"./_set-to-string-tag":210,"./_wks":235,"dup":61}],171:[function(require,module,exports){
arguments[4][62][0].apply(exports,arguments)
},{"./_export":150,"./_has":157,"./_hide":158,"./_iter-create":170,"./_iterators":174,"./_library":176,"./_object-gpo":192,"./_redefine":205,"./_set-to-string-tag":210,"./_wks":235,"dup":62}],172:[function(require,module,exports){
arguments[4][63][0].apply(exports,arguments)
},{"./_wks":235,"dup":63}],173:[function(require,module,exports){
arguments[4][64][0].apply(exports,arguments)
},{"dup":64}],174:[function(require,module,exports){
arguments[4][65][0].apply(exports,arguments)
},{"dup":65}],175:[function(require,module,exports){
arguments[4][66][0].apply(exports,arguments)
},{"./_object-keys":194,"./_to-iobject":225,"dup":66}],176:[function(require,module,exports){
module.exports = false;
},{}],177:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;
},{}],178:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],179:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],180:[function(require,module,exports){
arguments[4][68][0].apply(exports,arguments)
},{"./_fails":152,"./_has":157,"./_is-object":167,"./_object-dp":185,"./_uid":232,"dup":68}],181:[function(require,module,exports){
var Map     = require('./es6.map')
  , $export = require('./_export')
  , shared  = require('./_shared')('metadata')
  , store   = shared.store || (shared.store = new (require('./es6.weak-map')));

var getOrCreateMetadataMap = function(target, targetKey, create){
  var targetMetadata = store.get(target);
  if(!targetMetadata){
    if(!create)return undefined;
    store.set(target, targetMetadata = new Map);
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if(!keyMetadata){
    if(!create)return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map);
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey){
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
    , keys        = [];
  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
  return keys;
};
var toMetaKey = function(it){
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O){
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};
},{"./_export":150,"./_shared":212,"./es6.map":267,"./es6.weak-map":373}],182:[function(require,module,exports){
arguments[4][69][0].apply(exports,arguments)
},{"./_cof":136,"./_global":156,"./_task":222,"dup":69}],183:[function(require,module,exports){
arguments[4][70][0].apply(exports,arguments)
},{"./_fails":152,"./_iobject":163,"./_object-gops":191,"./_object-keys":194,"./_object-pie":195,"./_to-object":227,"dup":70}],184:[function(require,module,exports){
arguments[4][71][0].apply(exports,arguments)
},{"./_an-object":125,"./_dom-create":147,"./_enum-bug-keys":148,"./_html":159,"./_object-dps":186,"./_shared-key":211,"dup":71}],185:[function(require,module,exports){
arguments[4][72][0].apply(exports,arguments)
},{"./_an-object":125,"./_descriptors":146,"./_ie8-dom-define":160,"./_to-primitive":228,"dup":72}],186:[function(require,module,exports){
arguments[4][73][0].apply(exports,arguments)
},{"./_an-object":125,"./_descriptors":146,"./_object-dp":185,"./_object-keys":194,"dup":73}],187:[function(require,module,exports){
// Forced replacement prototype accessors methods
module.exports = require('./_library')|| !require('./_fails')(function(){
  var K = Math.random();
  // In FF throws only define methods
  __defineSetter__.call(null, K, function(){ /* empty */});
  delete require('./_global')[K];
});
},{"./_fails":152,"./_global":156,"./_library":176}],188:[function(require,module,exports){
arguments[4][74][0].apply(exports,arguments)
},{"./_descriptors":146,"./_has":157,"./_ie8-dom-define":160,"./_object-pie":195,"./_property-desc":203,"./_to-iobject":225,"./_to-primitive":228,"dup":74}],189:[function(require,module,exports){
arguments[4][75][0].apply(exports,arguments)
},{"./_object-gopn":190,"./_to-iobject":225,"dup":75}],190:[function(require,module,exports){
arguments[4][76][0].apply(exports,arguments)
},{"./_enum-bug-keys":148,"./_object-keys-internal":193,"dup":76}],191:[function(require,module,exports){
arguments[4][77][0].apply(exports,arguments)
},{"dup":77}],192:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"./_has":157,"./_shared-key":211,"./_to-object":227,"dup":78}],193:[function(require,module,exports){
arguments[4][79][0].apply(exports,arguments)
},{"./_array-includes":129,"./_has":157,"./_shared-key":211,"./_to-iobject":225,"dup":79}],194:[function(require,module,exports){
arguments[4][80][0].apply(exports,arguments)
},{"./_enum-bug-keys":148,"./_object-keys-internal":193,"dup":80}],195:[function(require,module,exports){
arguments[4][81][0].apply(exports,arguments)
},{"dup":81}],196:[function(require,module,exports){
arguments[4][82][0].apply(exports,arguments)
},{"./_core":141,"./_export":150,"./_fails":152,"dup":82}],197:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject')
  , isEnum    = require('./_object-pie').f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./_object-keys":194,"./_object-pie":195,"./_to-iobject":225}],198:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN     = require('./_object-gopn')
  , gOPS     = require('./_object-gops')
  , anObject = require('./_an-object')
  , Reflect  = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./_an-object":125,"./_global":156,"./_object-gopn":190,"./_object-gops":191}],199:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat
  , $trim       = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim(String(str), 3)
    , result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;
},{"./_global":156,"./_string-trim":220,"./_string-ws":221}],200:[function(require,module,exports){
var $parseInt = require('./_global').parseInt
  , $trim     = require('./_string-trim').trim
  , ws        = require('./_string-ws')
  , hex       = /^[\-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;
},{"./_global":156,"./_string-trim":220,"./_string-ws":221}],201:[function(require,module,exports){
'use strict';
var path      = require('./_path')
  , invoke    = require('./_invoke')
  , aFunction = require('./_a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
},{"./_a-function":121,"./_invoke":162,"./_path":202}],202:[function(require,module,exports){
module.exports = require('./_global');
},{"./_global":156}],203:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"dup":83}],204:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};
},{"./_redefine":205}],205:[function(require,module,exports){
var global    = require('./_global')
  , hide      = require('./_hide')
  , has       = require('./_has')
  , SRC       = require('./_uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./_core":141,"./_global":156,"./_has":157,"./_hide":158,"./_uid":232}],206:[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],207:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],208:[function(require,module,exports){
arguments[4][86][0].apply(exports,arguments)
},{"./_an-object":125,"./_ctx":143,"./_is-object":167,"./_object-gopd":188,"dup":86}],209:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_descriptors":146,"./_global":156,"./_object-dp":185,"./_wks":235}],210:[function(require,module,exports){
arguments[4][88][0].apply(exports,arguments)
},{"./_has":157,"./_object-dp":185,"./_wks":235,"dup":88}],211:[function(require,module,exports){
arguments[4][89][0].apply(exports,arguments)
},{"./_shared":212,"./_uid":232,"dup":89}],212:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"./_global":156,"dup":90}],213:[function(require,module,exports){
arguments[4][91][0].apply(exports,arguments)
},{"./_a-function":121,"./_an-object":125,"./_wks":235,"dup":91}],214:[function(require,module,exports){
var fails = require('./_fails');

module.exports = function(method, arg){
  return !!method && fails(function(){
    arg ? method.call(null, function(){}, 1) : method.call(null);
  });
};
},{"./_fails":152}],215:[function(require,module,exports){
arguments[4][92][0].apply(exports,arguments)
},{"./_defined":145,"./_to-integer":224,"dup":92}],216:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp')
  , defined  = require('./_defined');

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./_defined":145,"./_is-regexp":168}],217:[function(require,module,exports){
var $export = require('./_export')
  , fails   = require('./_fails')
  , defined = require('./_defined')
  , quot    = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S  = String(defined(string))
    , p1 = '<' + tag;
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec){
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function(){
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};
},{"./_defined":145,"./_export":150,"./_fails":152}],218:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length')
  , repeat   = require('./_string-repeat')
  , defined  = require('./_defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength || fillStr == '')return S;
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":145,"./_string-repeat":219,"./_to-length":226}],219:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./_defined":145,"./_to-integer":224}],220:[function(require,module,exports){
var $export = require('./_export')
  , defined = require('./_defined')
  , fails   = require('./_fails')
  , spaces  = require('./_string-ws')
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;
},{"./_defined":145,"./_export":150,"./_fails":152,"./_string-ws":221}],221:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
},{}],222:[function(require,module,exports){
arguments[4][93][0].apply(exports,arguments)
},{"./_cof":136,"./_ctx":143,"./_dom-create":147,"./_global":156,"./_html":159,"./_invoke":162,"dup":93}],223:[function(require,module,exports){
arguments[4][94][0].apply(exports,arguments)
},{"./_to-integer":224,"dup":94}],224:[function(require,module,exports){
arguments[4][95][0].apply(exports,arguments)
},{"dup":95}],225:[function(require,module,exports){
arguments[4][96][0].apply(exports,arguments)
},{"./_defined":145,"./_iobject":163,"dup":96}],226:[function(require,module,exports){
arguments[4][97][0].apply(exports,arguments)
},{"./_to-integer":224,"dup":97}],227:[function(require,module,exports){
arguments[4][98][0].apply(exports,arguments)
},{"./_defined":145,"dup":98}],228:[function(require,module,exports){
arguments[4][99][0].apply(exports,arguments)
},{"./_is-object":167,"dup":99}],229:[function(require,module,exports){
'use strict';
if(require('./_descriptors')){
  var LIBRARY             = require('./_library')
    , global              = require('./_global')
    , fails               = require('./_fails')
    , $export             = require('./_export')
    , $typed              = require('./_typed')
    , $buffer             = require('./_typed-buffer')
    , ctx                 = require('./_ctx')
    , anInstance          = require('./_an-instance')
    , propertyDesc        = require('./_property-desc')
    , hide                = require('./_hide')
    , redefineAll         = require('./_redefine-all')
    , toInteger           = require('./_to-integer')
    , toLength            = require('./_to-length')
    , toIndex             = require('./_to-index')
    , toPrimitive         = require('./_to-primitive')
    , has                 = require('./_has')
    , same                = require('./_same-value')
    , classof             = require('./_classof')
    , isObject            = require('./_is-object')
    , toObject            = require('./_to-object')
    , isArrayIter         = require('./_is-array-iter')
    , create              = require('./_object-create')
    , getPrototypeOf      = require('./_object-gpo')
    , gOPN                = require('./_object-gopn').f
    , getIterFn           = require('./core.get-iterator-method')
    , uid                 = require('./_uid')
    , wks                 = require('./_wks')
    , createArrayMethod   = require('./_array-methods')
    , createArrayIncludes = require('./_array-includes')
    , speciesConstructor  = require('./_species-constructor')
    , ArrayIterators      = require('./es6.array.iterator')
    , Iterators           = require('./_iterators')
    , $iterDetect         = require('./_iter-detect')
    , setSpecies          = require('./_set-species')
    , arrayFill           = require('./_array-fill')
    , arrayCopyWithin     = require('./_array-copy-within')
    , $DP                 = require('./_object-dp')
    , $GOPD               = require('./_object-gopd')
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };
},{"./_an-instance":124,"./_array-copy-within":126,"./_array-fill":127,"./_array-includes":129,"./_array-methods":130,"./_classof":135,"./_ctx":143,"./_descriptors":146,"./_export":150,"./_fails":152,"./_global":156,"./_has":157,"./_hide":158,"./_is-array-iter":164,"./_is-object":167,"./_iter-detect":172,"./_iterators":174,"./_library":176,"./_object-create":184,"./_object-dp":185,"./_object-gopd":188,"./_object-gopn":190,"./_object-gpo":192,"./_property-desc":203,"./_redefine-all":204,"./_same-value":207,"./_set-species":209,"./_species-constructor":213,"./_to-index":223,"./_to-integer":224,"./_to-length":226,"./_to-object":227,"./_to-primitive":228,"./_typed":231,"./_typed-buffer":230,"./_uid":232,"./_wks":235,"./core.get-iterator-method":236,"./es6.array.iterator":248}],230:[function(require,module,exports){
'use strict';
var global         = require('./_global')
  , DESCRIPTORS    = require('./_descriptors')
  , LIBRARY        = require('./_library')
  , $typed         = require('./_typed')
  , hide           = require('./_hide')
  , redefineAll    = require('./_redefine-all')
  , fails          = require('./_fails')
  , anInstance     = require('./_an-instance')
  , toInteger      = require('./_to-integer')
  , toLength       = require('./_to-length')
  , gOPN           = require('./_object-gopn').f
  , dP             = require('./_object-dp').f
  , arrayFill      = require('./_array-fill')
  , setToStringTag = require('./_set-to-string-tag')
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;
},{"./_an-instance":124,"./_array-fill":127,"./_descriptors":146,"./_fails":152,"./_global":156,"./_hide":158,"./_library":176,"./_object-dp":185,"./_object-gopn":190,"./_redefine-all":204,"./_set-to-string-tag":210,"./_to-integer":224,"./_to-length":226,"./_typed":231}],231:[function(require,module,exports){
var global = require('./_global')
  , hide   = require('./_hide')
  , uid    = require('./_uid')
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};
},{"./_global":156,"./_hide":158,"./_uid":232}],232:[function(require,module,exports){
arguments[4][100][0].apply(exports,arguments)
},{"dup":100}],233:[function(require,module,exports){
arguments[4][101][0].apply(exports,arguments)
},{"./_core":141,"./_global":156,"./_library":176,"./_object-dp":185,"./_wks-ext":234,"dup":101}],234:[function(require,module,exports){
arguments[4][102][0].apply(exports,arguments)
},{"./_wks":235,"dup":102}],235:[function(require,module,exports){
arguments[4][103][0].apply(exports,arguments)
},{"./_global":156,"./_shared":212,"./_uid":232,"dup":103}],236:[function(require,module,exports){
arguments[4][104][0].apply(exports,arguments)
},{"./_classof":135,"./_core":141,"./_iterators":174,"./_wks":235,"dup":104}],237:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export')
  , $re     = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./_export":150,"./_replacer":206}],238:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});

require('./_add-to-unscopables')('copyWithin');
},{"./_add-to-unscopables":123,"./_array-copy-within":126,"./_export":150}],239:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $every  = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */){
    return $every(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],240:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {fill: require('./_array-fill')});

require('./_add-to-unscopables')('fill');
},{"./_add-to-unscopables":123,"./_array-fill":127,"./_export":150}],241:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */){
    return $filter(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],242:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":123,"./_array-methods":130,"./_export":150}],243:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":123,"./_array-methods":130,"./_export":150}],244:[function(require,module,exports){
'use strict';
var $export  = require('./_export')
  , $forEach = require('./_array-methods')(0)
  , STRICT   = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */){
    return $forEach(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],245:[function(require,module,exports){
'use strict';
var ctx            = require('./_ctx')
  , $export        = require('./_export')
  , toObject       = require('./_to-object')
  , call           = require('./_iter-call')
  , isArrayIter    = require('./_is-array-iter')
  , toLength       = require('./_to-length')
  , createProperty = require('./_create-property')
  , getIterFn      = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":142,"./_ctx":143,"./_export":150,"./_is-array-iter":164,"./_iter-call":169,"./_iter-detect":172,"./_to-length":226,"./_to-object":227,"./core.get-iterator-method":236}],246:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , $indexOf      = require('./_array-includes')(false)
  , $native       = [].indexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});
},{"./_array-includes":129,"./_export":150,"./_strict-method":214}],247:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', {isArray: require('./_is-array')});
},{"./_export":150,"./_is-array":165}],248:[function(require,module,exports){
arguments[4][105][0].apply(exports,arguments)
},{"./_add-to-unscopables":123,"./_iter-define":171,"./_iter-step":173,"./_iterators":174,"./_to-iobject":225,"dup":105}],249:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator){
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});
},{"./_export":150,"./_iobject":163,"./_strict-method":214,"./_to-iobject":225}],250:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , toIObject     = require('./_to-iobject')
  , toInteger     = require('./_to-integer')
  , toLength      = require('./_to-length')
  , $native       = [].lastIndexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
    // convert -0 to +0
    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
    if(index < 0)index = length + index;
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
    return -1;
  }
});
},{"./_export":150,"./_strict-method":214,"./_to-integer":224,"./_to-iobject":225,"./_to-length":226}],251:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $map    = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */){
    return $map(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],252:[function(require,module,exports){
'use strict';
var $export        = require('./_export')
  , createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});
},{"./_create-property":142,"./_export":150,"./_fails":152}],253:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});
},{"./_array-reduce":131,"./_export":150,"./_strict-method":214}],254:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});
},{"./_array-reduce":131,"./_export":150,"./_strict-method":214}],255:[function(require,module,exports){
'use strict';
var $export    = require('./_export')
  , html       = require('./_html')
  , cof        = require('./_cof')
  , toIndex    = require('./_to-index')
  , toLength   = require('./_to-length')
  , arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
},{"./_cof":136,"./_export":150,"./_fails":152,"./_html":159,"./_to-index":223,"./_to-length":226}],256:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $some   = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */){
    return $some(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":130,"./_export":150,"./_strict-method":214}],257:[function(require,module,exports){
'use strict';
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , fails     = require('./_fails')
  , $sort     = [].sort
  , test      = [1, 2, 3];

$export($export.P + $export.F * (fails(function(){
  // IE8-
  test.sort(undefined);
}) || !fails(function(){
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn){
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});
},{"./_a-function":121,"./_export":150,"./_fails":152,"./_strict-method":214,"./_to-object":227}],258:[function(require,module,exports){
require('./_set-species')('Array');
},{"./_set-species":209}],259:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});
},{"./_export":150}],260:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export')
  , fails   = require('./_fails')
  , getTime = Date.prototype.getTime;

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./_export":150,"./_fails":152}],261:[function(require,module,exports){
'use strict';
var $export     = require('./_export')
  , toObject    = require('./_to-object')
  , toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function(){
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
}), 'Date', {
  toJSON: function toJSON(key){
    var O  = toObject(this)
      , pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});
},{"./_export":150,"./_fails":152,"./_to-object":227,"./_to-primitive":228}],262:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive')
  , proto        = Date.prototype;

if(!(TO_PRIMITIVE in proto))require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
},{"./_date-to-primitive":144,"./_hide":158,"./_wks":235}],263:[function(require,module,exports){
var DateProto    = Date.prototype
  , INVALID_DATE = 'Invalid Date'
  , TO_STRING    = 'toString'
  , $toString    = DateProto[TO_STRING]
  , getTime      = DateProto.getTime;
if(new Date(NaN) + '' != INVALID_DATE){
  require('./_redefine')(DateProto, TO_STRING, function toString(){
    var value = getTime.call(this);
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}
},{"./_redefine":205}],264:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', {bind: require('./_bind')});
},{"./_bind":134,"./_export":150}],265:[function(require,module,exports){
'use strict';
var isObject       = require('./_is-object')
  , getPrototypeOf = require('./_object-gpo')
  , HAS_INSTANCE   = require('./_wks')('hasInstance')
  , FunctionProto  = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
  return false;
}});
},{"./_is-object":167,"./_object-dp":185,"./_object-gpo":192,"./_wks":235}],266:[function(require,module,exports){
var dP         = require('./_object-dp').f
  , createDesc = require('./_property-desc')
  , has        = require('./_has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';

var isExtensible = Object.isExtensible || function(){
  return true;
};

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    try {
      var that = this
        , name = ('' + that).match(nameRE)[1];
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
      return name;
    } catch(e){
      return '';
    }
  }
});
},{"./_descriptors":146,"./_has":157,"./_object-dp":185,"./_property-desc":203}],267:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.1 Map Objects
module.exports = require('./_collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./_collection":140,"./_collection-strong":137}],268:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export')
  , log1p   = require('./_math-log1p')
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./_export":150,"./_math-log1p":178}],269:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export')
  , $asinh  = Math.asinh;

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0 
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});
},{"./_export":150}],270:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export')
  , $atanh  = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0 
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./_export":150}],271:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export')
  , sign    = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./_export":150,"./_math-sign":179}],272:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./_export":150}],273:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./_export":150}],274:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export')
  , $expm1  = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});
},{"./_export":150,"./_math-expm1":177}],275:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export   = require('./_export')
  , sign      = require('./_math-sign')
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./_export":150,"./_math-sign":179}],276:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export')
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./_export":150}],277:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export')
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./_export":150,"./_fails":152}],278:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./_export":150}],279:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', {log1p: require('./_math-log1p')});
},{"./_export":150,"./_math-log1p":178}],280:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./_export":150}],281:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', {sign: require('./_math-sign')});
},{"./_export":150,"./_math-sign":179}],282:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./_export":150,"./_fails":152,"./_math-expm1":177}],283:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./_export":150,"./_math-expm1":177}],284:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./_export":150}],285:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , has               = require('./_has')
  , cof               = require('./_cof')
  , inheritIfRequired = require('./_inherit-if-required')
  , toPrimitive       = require('./_to-primitive')
  , fails             = require('./_fails')
  , gOPN              = require('./_object-gopn').f
  , gOPD              = require('./_object-gopd').f
  , dP                = require('./_object-dp').f
  , $trim             = require('./_string-trim').trim
  , NUMBER            = 'Number'
  , $Number           = global[NUMBER]
  , Base              = $Number
  , proto             = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF        = cof(require('./_object-create')(proto)) == NUMBER
  , TRIM              = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for(var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++){
    if(has(Base, key = keys[j]) && !has($Number, key)){
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}
},{"./_cof":136,"./_descriptors":146,"./_fails":152,"./_global":156,"./_has":157,"./_inherit-if-required":161,"./_object-create":184,"./_object-dp":185,"./_object-gopd":188,"./_object-gopn":190,"./_redefine":205,"./_string-trim":220,"./_to-primitive":228}],286:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./_export":150}],287:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export   = require('./_export')
  , _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./_export":150,"./_global":156}],288:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', {isInteger: require('./_is-integer')});
},{"./_export":150,"./_is-integer":166}],289:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./_export":150}],290:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export   = require('./_export')
  , isInteger = require('./_is-integer')
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./_export":150,"./_is-integer":166}],291:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./_export":150}],292:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./_export":150}],293:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});
},{"./_export":150,"./_parse-float":199}],294:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});
},{"./_export":150,"./_parse-int":200}],295:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , toInteger    = require('./_to-integer')
  , aNumberValue = require('./_a-number-value')
  , repeat       = require('./_string-repeat')
  , $toFixed     = 1..toFixed
  , floor        = Math.floor
  , data         = [0, 0, 0, 0, 0, 0]
  , ERROR        = 'Number.toFixed: incorrect invocation!'
  , ZERO         = '0';

var multiply = function(n, c){
  var i  = -1
    , c2 = c;
  while(++i < 6){
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(n){
  var i = 6
    , c = 0;
  while(--i >= 0){
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function(){
  var i = 6
    , s = '';
  while(--i >= 0){
    if(s !== '' || i === 0 || data[i] !== 0){
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function(x, n, acc){
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x){
  var n  = 0
    , x2 = x;
  while(x2 >= 4096){
    n += 12;
    x2 /= 4096;
  }
  while(x2 >= 2){
    n  += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128..toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function(){
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits){
    var x = aNumberValue(this, ERROR)
      , f = toInteger(fractionDigits)
      , s = ''
      , m = ZERO
      , e, z, j, k;
    if(f < 0 || f > 20)throw RangeError(ERROR);
    if(x != x)return 'NaN';
    if(x <= -1e21 || x >= 1e21)return String(x);
    if(x < 0){
      s = '-';
      x = -x;
    }
    if(x > 1e-21){
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if(e > 0){
        multiply(0, z);
        j = f;
        while(j >= 7){
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while(j >= 23){
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if(f > 0){
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});
},{"./_a-number-value":122,"./_export":150,"./_fails":152,"./_string-repeat":219,"./_to-integer":224}],296:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $fails       = require('./_fails')
  , aNumberValue = require('./_a-number-value')
  , $toPrecision = 1..toPrecision;

$export($export.P + $export.F * ($fails(function(){
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function(){
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision){
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
  }
});
},{"./_a-number-value":122,"./_export":150,"./_fails":152}],297:[function(require,module,exports){
arguments[4][106][0].apply(exports,arguments)
},{"./_export":150,"./_object-assign":183,"dup":106}],298:[function(require,module,exports){
arguments[4][107][0].apply(exports,arguments)
},{"./_export":150,"./_object-create":184,"dup":107}],299:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});
},{"./_descriptors":146,"./_export":150,"./_object-dps":186}],300:[function(require,module,exports){
arguments[4][108][0].apply(exports,arguments)
},{"./_descriptors":146,"./_export":150,"./_object-dp":185,"dup":108}],301:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});
},{"./_is-object":167,"./_meta":180,"./_object-sap":196}],302:[function(require,module,exports){
arguments[4][109][0].apply(exports,arguments)
},{"./_object-gopd":188,"./_object-sap":196,"./_to-iobject":225,"dup":109}],303:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function(){
  return require('./_object-gopn-ext').f;
});
},{"./_object-gopn-ext":189,"./_object-sap":196}],304:[function(require,module,exports){
arguments[4][110][0].apply(exports,arguments)
},{"./_object-gpo":192,"./_object-sap":196,"./_to-object":227,"dup":110}],305:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./_is-object":167,"./_object-sap":196}],306:[function(require,module,exports){
arguments[4][111][0].apply(exports,arguments)
},{"./_is-object":167,"./_object-sap":196,"dup":111}],307:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./_is-object":167,"./_object-sap":196}],308:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', {is: require('./_same-value')});
},{"./_export":150,"./_same-value":207}],309:[function(require,module,exports){
arguments[4][112][0].apply(exports,arguments)
},{"./_object-keys":194,"./_object-sap":196,"./_to-object":227,"dup":112}],310:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});
},{"./_is-object":167,"./_meta":180,"./_object-sap":196}],311:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});
},{"./_is-object":167,"./_meta":180,"./_object-sap":196}],312:[function(require,module,exports){
arguments[4][113][0].apply(exports,arguments)
},{"./_export":150,"./_set-proto":208,"dup":113}],313:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof')
  , test    = {};
test[require('./_wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./_redefine')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./_classof":135,"./_redefine":205,"./_wks":235}],314:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});
},{"./_export":150,"./_parse-float":199}],315:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});
},{"./_export":150,"./_parse-int":200}],316:[function(require,module,exports){
arguments[4][115][0].apply(exports,arguments)
},{"./_a-function":121,"./_an-instance":124,"./_classof":135,"./_core":141,"./_ctx":143,"./_export":150,"./_for-of":155,"./_global":156,"./_is-object":167,"./_iter-detect":172,"./_library":176,"./_microtask":182,"./_redefine-all":204,"./_set-species":209,"./_set-to-string-tag":210,"./_species-constructor":213,"./_task":222,"./_wks":235,"dup":115}],317:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , anObject  = require('./_an-object')
  , rApply    = (require('./_global').Reflect || {}).apply
  , fApply    = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function(){
  rApply(function(){});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    var T = aFunction(target)
      , L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});
},{"./_a-function":121,"./_an-object":125,"./_export":150,"./_fails":152,"./_global":156}],318:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export    = require('./_export')
  , create     = require('./_object-create')
  , aFunction  = require('./_a-function')
  , anObject   = require('./_an-object')
  , isObject   = require('./_is-object')
  , fails      = require('./_fails')
  , bind       = require('./_bind')
  , rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function(){
  function F(){}
  return !(rConstruct(function(){}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function(){
  rConstruct(function(){});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      switch(args.length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./_a-function":121,"./_an-object":125,"./_bind":134,"./_export":150,"./_fails":152,"./_global":156,"./_is-object":167,"./_object-create":184}],319:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = require('./_object-dp')
  , $export     = require('./_export')
  , anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":125,"./_export":150,"./_fails":152,"./_object-dp":185,"./_to-primitive":228}],320:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = require('./_export')
  , gOPD     = require('./_object-gopd').f
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./_an-object":125,"./_export":150,"./_object-gopd":188}],321:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export  = require('./_export')
  , anObject = require('./_an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./_an-object":125,"./_export":150,"./_iter-create":170}],322:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = require('./_object-gopd')
  , $export  = require('./_export')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});
},{"./_an-object":125,"./_export":150,"./_object-gopd":188}],323:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = require('./_export')
  , getProto = require('./_object-gpo')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./_an-object":125,"./_export":150,"./_object-gpo":192}],324:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , isObject       = require('./_is-object')
  , anObject       = require('./_an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});
},{"./_an-object":125,"./_export":150,"./_has":157,"./_is-object":167,"./_object-gopd":188,"./_object-gpo":192}],325:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./_export":150}],326:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export       = require('./_export')
  , anObject      = require('./_an-object')
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./_an-object":125,"./_export":150}],327:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});
},{"./_export":150,"./_own-keys":198}],328:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export            = require('./_export')
  , anObject           = require('./_an-object')
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":125,"./_export":150}],329:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = require('./_export')
  , setProto = require('./_set-proto');

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_export":150,"./_set-proto":208}],330:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = require('./_object-dp')
  , gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , createDesc     = require('./_property-desc')
  , anObject       = require('./_an-object')
  , isObject       = require('./_is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});
},{"./_an-object":125,"./_export":150,"./_has":157,"./_is-object":167,"./_object-dp":185,"./_object-gopd":188,"./_object-gpo":192,"./_property-desc":203}],331:[function(require,module,exports){
var global            = require('./_global')
  , inheritIfRequired = require('./_inherit-if-required')
  , dP                = require('./_object-dp').f
  , gOPN              = require('./_object-gopn').f
  , isRegExp          = require('./_is-regexp')
  , $flags            = require('./_flags')
  , $RegExp           = global.RegExp
  , Base              = $RegExp
  , proto             = $RegExp.prototype
  , re1               = /a/g
  , re2               = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW       = new $RegExp(re1) !== re1;

if(require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function(){
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var tiRE = this instanceof $RegExp
      , piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function(key){
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  };
  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');
},{"./_descriptors":146,"./_fails":152,"./_flags":154,"./_global":156,"./_inherit-if-required":161,"./_is-regexp":168,"./_object-dp":185,"./_object-gopn":190,"./_redefine":205,"./_set-species":209,"./_wks":235}],332:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});
},{"./_descriptors":146,"./_flags":154,"./_object-dp":185}],333:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});
},{"./_fix-re-wks":153}],334:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});
},{"./_fix-re-wks":153}],335:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});
},{"./_fix-re-wks":153}],336:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = require('./_is-regexp')
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});
},{"./_fix-re-wks":153,"./_is-regexp":168}],337:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject    = require('./_an-object')
  , $flags      = require('./_flags')
  , DESCRIPTORS = require('./_descriptors')
  , TO_STRING   = 'toString'
  , $toString   = /./[TO_STRING];

var define = function(fn){
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if(require('./_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
  define(function toString(){
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if($toString.name != TO_STRING){
  define(function toString(){
    return $toString.call(this);
  });
}
},{"./_an-object":125,"./_descriptors":146,"./_fails":152,"./_flags":154,"./_redefine":205,"./es6.regexp.flags":332}],338:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.2 Set Objects
module.exports = require('./_collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./_collection":140,"./_collection-strong":137}],339:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function(createHTML){
  return function anchor(name){
    return createHTML(this, 'a', 'name', name);
  }
});
},{"./_string-html":217}],340:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function(createHTML){
  return function big(){
    return createHTML(this, 'big', '', '');
  }
});
},{"./_string-html":217}],341:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function(createHTML){
  return function blink(){
    return createHTML(this, 'blink', '', '');
  }
});
},{"./_string-html":217}],342:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function(createHTML){
  return function bold(){
    return createHTML(this, 'b', '', '');
  }
});
},{"./_string-html":217}],343:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $at     = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./_export":150,"./_string-at":215}],344:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export   = require('./_export')
  , toLength  = require('./_to-length')
  , context   = require('./_string-context')
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});
},{"./_export":150,"./_fails-is-regexp":151,"./_string-context":216,"./_to-length":226}],345:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function(createHTML){
  return function fixed(){
    return createHTML(this, 'tt', '', '');
  }
});
},{"./_string-html":217}],346:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function(createHTML){
  return function fontcolor(color){
    return createHTML(this, 'font', 'color', color);
  }
});
},{"./_string-html":217}],347:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function(createHTML){
  return function fontsize(size){
    return createHTML(this, 'font', 'size', size);
  }
});
},{"./_string-html":217}],348:[function(require,module,exports){
var $export        = require('./_export')
  , toIndex        = require('./_to-index')
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./_export":150,"./_to-index":223}],349:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export  = require('./_export')
  , context  = require('./_string-context')
  , INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});
},{"./_export":150,"./_fails-is-regexp":151,"./_string-context":216}],350:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function(createHTML){
  return function italics(){
    return createHTML(this, 'i', '', '');
  }
});
},{"./_string-html":217}],351:[function(require,module,exports){
arguments[4][116][0].apply(exports,arguments)
},{"./_iter-define":171,"./_string-at":215,"dup":116}],352:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function(createHTML){
  return function link(url){
    return createHTML(this, 'a', 'href', url);
  }
});
},{"./_string-html":217}],353:[function(require,module,exports){
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});
},{"./_export":150,"./_to-iobject":225,"./_to-length":226}],354:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});
},{"./_export":150,"./_string-repeat":219}],355:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function(createHTML){
  return function small(){
    return createHTML(this, 'small', '', '');
  }
});
},{"./_string-html":217}],356:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export     = require('./_export')
  , toLength    = require('./_to-length')
  , context     = require('./_string-context')
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});
},{"./_export":150,"./_fails-is-regexp":151,"./_string-context":216,"./_to-length":226}],357:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function(createHTML){
  return function strike(){
    return createHTML(this, 'strike', '', '');
  }
});
},{"./_string-html":217}],358:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function(createHTML){
  return function sub(){
    return createHTML(this, 'sub', '', '');
  }
});
},{"./_string-html":217}],359:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function(createHTML){
  return function sup(){
    return createHTML(this, 'sup', '', '');
  }
});
},{"./_string-html":217}],360:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./_string-trim":220}],361:[function(require,module,exports){
arguments[4][117][0].apply(exports,arguments)
},{"./_an-object":125,"./_descriptors":146,"./_enum-keys":149,"./_export":150,"./_fails":152,"./_global":156,"./_has":157,"./_hide":158,"./_is-array":165,"./_keyof":175,"./_library":176,"./_meta":180,"./_object-create":184,"./_object-dp":185,"./_object-gopd":188,"./_object-gopn":190,"./_object-gopn-ext":189,"./_object-gops":191,"./_object-keys":194,"./_object-pie":195,"./_property-desc":203,"./_redefine":205,"./_set-to-string-tag":210,"./_shared":212,"./_to-iobject":225,"./_to-primitive":228,"./_uid":232,"./_wks":235,"./_wks-define":233,"./_wks-ext":234,"dup":117}],362:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $typed       = require('./_typed')
  , buffer       = require('./_typed-buffer')
  , anObject     = require('./_an-object')
  , toIndex      = require('./_to-index')
  , toLength     = require('./_to-length')
  , isObject     = require('./_is-object')
  , ArrayBuffer  = require('./_global').ArrayBuffer
  , speciesConstructor = require('./_species-constructor')
  , $ArrayBuffer = buffer.ArrayBuffer
  , $DataView    = buffer.DataView
  , $isView      = $typed.ABV && ArrayBuffer.isView
  , $slice       = $ArrayBuffer.prototype.slice
  , VIEW         = $typed.VIEW
  , ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it){
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function(){
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end){
    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
    var len    = anObject(this).byteLength
      , first  = toIndex(start, len)
      , final  = toIndex(end === undefined ? len : end, len)
      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
      , viewS  = new $DataView(this)
      , viewT  = new $DataView(result)
      , index  = 0;
    while(first < final){
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);
},{"./_an-object":125,"./_export":150,"./_fails":152,"./_global":156,"./_is-object":167,"./_set-species":209,"./_species-constructor":213,"./_to-index":223,"./_to-length":226,"./_typed":231,"./_typed-buffer":230}],363:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});
},{"./_export":150,"./_typed":231,"./_typed-buffer":230}],364:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],365:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],366:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],367:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],368:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],369:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],370:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],371:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":229}],372:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);
},{"./_typed-array":229}],373:[function(require,module,exports){
'use strict';
var each         = require('./_array-methods')(0)
  , redefine     = require('./_redefine')
  , meta         = require('./_meta')
  , assign       = require('./_object-assign')
  , weak         = require('./_collection-weak')
  , isObject     = require('./_is-object')
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./_array-methods":130,"./_collection":140,"./_collection-weak":139,"./_is-object":167,"./_meta":180,"./_object-assign":183,"./_redefine":205}],374:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');

// 23.4 WeakSet Objects
require('./_collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./_collection":140,"./_collection-weak":139}],375:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export   = require('./_export')
  , $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');
},{"./_add-to-unscopables":123,"./_array-includes":129,"./_export":150}],376:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export   = require('./_export')
  , microtask = require('./_microtask')()
  , process   = require('./_global').process
  , isNode    = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn){
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});
},{"./_cof":136,"./_export":150,"./_global":156,"./_microtask":182}],377:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export')
  , cof     = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it){
    return cof(it) === 'Error';
  }
});
},{"./_cof":136,"./_export":150}],378:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});
},{"./_collection-to-json":138,"./_export":150}],379:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});
},{"./_export":150}],380:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >> 16
      , v1 = $v >> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});
},{"./_export":150}],381:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});
},{"./_export":150}],382:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >>> 16
      , v1 = $v >>> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});
},{"./_export":150}],383:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter){
    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":121,"./_descriptors":146,"./_export":150,"./_object-dp":185,"./_object-forced-pam":187,"./_to-object":227}],384:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter){
    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":121,"./_descriptors":146,"./_export":150,"./_object-dp":185,"./_object-forced-pam":187,"./_to-object":227}],385:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export  = require('./_export')
  , $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./_export":150,"./_object-to-array":197}],386:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export        = require('./_export')
  , ownKeys        = require('./_own-keys')
  , toIObject      = require('./_to-iobject')
  , gOPD           = require('./_object-gopd')
  , createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key;
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
    return result;
  }
});
},{"./_create-property":142,"./_export":150,"./_object-gopd":188,"./_own-keys":198,"./_to-iobject":225}],387:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.get;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":146,"./_export":150,"./_object-forced-pam":187,"./_object-gopd":188,"./_object-gpo":192,"./_to-object":227,"./_to-primitive":228}],388:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.set;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":146,"./_export":150,"./_object-forced-pam":187,"./_object-gopd":188,"./_object-gpo":192,"./_to-object":227,"./_to-primitive":228}],389:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export')
  , $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./_export":150,"./_object-to-array":197}],390:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export     = require('./_export')
  , global      = require('./_global')
  , core        = require('./_core')
  , microtask   = require('./_microtask')()
  , OBSERVABLE  = require('./_wks')('observable')
  , aFunction   = require('./_a-function')
  , anObject    = require('./_an-object')
  , anInstance  = require('./_an-instance')
  , redefineAll = require('./_redefine-all')
  , hide        = require('./_hide')
  , forOf       = require('./_for-of')
  , RETURN      = forOf.RETURN;

var getMethod = function(fn){
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function(subscription){
  var cleanup = subscription._c;
  if(cleanup){
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function(subscription){
  return subscription._o === undefined;
};

var closeSubscription = function(subscription){
  if(!subscriptionClosed(subscription)){
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function(observer, subscriber){
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup      = subscriber(observer)
      , subscription = cleanup;
    if(cleanup != null){
      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch(e){
    observer.error(e);
    return;
  } if(subscriptionClosed(this))cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe(){ closeSubscription(this); }
});

var SubscriptionObserver = function(subscription){
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if(m)return m.call(observer, value);
      } catch(e){
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value){
    var subscription = this._s;
    if(subscriptionClosed(subscription))throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if(!m)throw value;
      value = m.call(observer, value);
    } catch(e){
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch(e){
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber){
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer){
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn){
    var that = this;
    return new (core.Promise || global.Promise)(function(resolve, reject){
      aFunction(fn);
      var subscription = that.subscribe({
        next : function(value){
          try {
            return fn(value);
          } catch(e){
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x){
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if(method){
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function(observer){
        return observable.subscribe(observer);
      });
    }
    return new C(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          try {
            if(forOf(x, false, function(it){
              observer.next(it);
              if(done)return RETURN;
            }) === RETURN)return;
          } catch(e){
            if(done)throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  },
  of: function of(){
    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          for(var i = 0; i < items.length; ++i){
            observer.next(items[i]);
            if(done)return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function(){ return this; });

$export($export.G, {Observable: $Observable});

require('./_set-species')('Observable');
},{"./_a-function":121,"./_an-instance":124,"./_an-object":125,"./_core":141,"./_export":150,"./_for-of":155,"./_global":156,"./_hide":158,"./_microtask":182,"./_redefine-all":204,"./_set-species":209,"./_wks":235}],391:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
}});
},{"./_an-object":125,"./_metadata":181}],392:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , toMetaKey              = metadata.key
  , getOrCreateMetadataMap = metadata.map
  , store                  = metadata.store;

metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
  if(metadataMap.size)return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
}});
},{"./_an-object":125,"./_metadata":181}],393:[function(require,module,exports){
var Set                     = require('./es6.set')
  , from                    = require('./_array-from-iterable')
  , metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , getPrototypeOf          = require('./_object-gpo')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

var ordinaryMetadataKeys = function(O, P){
  var oKeys  = ordinaryOwnMetadataKeys(O, P)
    , parent = getPrototypeOf(O);
  if(parent === null)return oKeys;
  var pKeys  = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":125,"./_array-from-iterable":128,"./_metadata":181,"./_object-gpo":192,"./es6.set":338}],394:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

var ordinaryGetMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181,"./_object-gpo":192}],395:[function(require,module,exports){
var metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":125,"./_metadata":181}],396:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181}],397:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

var ordinaryHasMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181,"./_object-gpo":192}],398:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":125,"./_metadata":181}],399:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , aFunction                 = require('./_a-function')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({metadata: function metadata(metadataKey, metadataValue){
  return function decorator(target, targetKey){
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
}});
},{"./_a-function":121,"./_an-object":125,"./_metadata":181}],400:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});
},{"./_collection-to-json":138,"./_export":150}],401:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export')
  , $at     = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./_export":150,"./_string-at":215}],402:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export     = require('./_export')
  , defined     = require('./_defined')
  , toLength    = require('./_to-length')
  , isRegExp    = require('./_is-regexp')
  , getFlags    = require('./_flags')
  , RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function(regexp, string){
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){
  var match = this._r.exec(this._s);
  return {value: match, done: match === null};
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp){
    defined(this);
    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
    var S     = String(this)
      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});
},{"./_defined":145,"./_export":150,"./_flags":154,"./_is-regexp":168,"./_iter-create":170,"./_to-length":226}],403:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});
},{"./_export":150,"./_string-pad":218}],404:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});
},{"./_export":150,"./_string-pad":218}],405:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
}, 'trimStart');
},{"./_string-trim":220}],406:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
}, 'trimEnd');
},{"./_string-trim":220}],407:[function(require,module,exports){
arguments[4][118][0].apply(exports,arguments)
},{"./_wks-define":233,"dup":118}],408:[function(require,module,exports){
arguments[4][119][0].apply(exports,arguments)
},{"./_wks-define":233,"dup":119}],409:[function(require,module,exports){
// https://github.com/ljharb/proposal-global
var $export = require('./_export');

$export($export.S, 'System', {global: require('./_global')});
},{"./_export":150,"./_global":156}],410:[function(require,module,exports){
var $iterators    = require('./es6.array.iterator')
  , redefine      = require('./_redefine')
  , global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , wks           = require('./_wks')
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}
},{"./_global":156,"./_hide":158,"./_iterators":174,"./_redefine":205,"./_wks":235,"./es6.array.iterator":248}],411:[function(require,module,exports){
var $export = require('./_export')
  , $task   = require('./_task');
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./_export":150,"./_task":222}],412:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./_global')
  , $export    = require('./_export')
  , invoke     = require('./_invoke')
  , partial    = require('./_partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./_export":150,"./_global":156,"./_invoke":162,"./_partial":201}],413:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.umulh');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');
},{"./modules/_core":141,"./modules/es6.array.copy-within":238,"./modules/es6.array.every":239,"./modules/es6.array.fill":240,"./modules/es6.array.filter":241,"./modules/es6.array.find":243,"./modules/es6.array.find-index":242,"./modules/es6.array.for-each":244,"./modules/es6.array.from":245,"./modules/es6.array.index-of":246,"./modules/es6.array.is-array":247,"./modules/es6.array.iterator":248,"./modules/es6.array.join":249,"./modules/es6.array.last-index-of":250,"./modules/es6.array.map":251,"./modules/es6.array.of":252,"./modules/es6.array.reduce":254,"./modules/es6.array.reduce-right":253,"./modules/es6.array.slice":255,"./modules/es6.array.some":256,"./modules/es6.array.sort":257,"./modules/es6.array.species":258,"./modules/es6.date.now":259,"./modules/es6.date.to-iso-string":260,"./modules/es6.date.to-json":261,"./modules/es6.date.to-primitive":262,"./modules/es6.date.to-string":263,"./modules/es6.function.bind":264,"./modules/es6.function.has-instance":265,"./modules/es6.function.name":266,"./modules/es6.map":267,"./modules/es6.math.acosh":268,"./modules/es6.math.asinh":269,"./modules/es6.math.atanh":270,"./modules/es6.math.cbrt":271,"./modules/es6.math.clz32":272,"./modules/es6.math.cosh":273,"./modules/es6.math.expm1":274,"./modules/es6.math.fround":275,"./modules/es6.math.hypot":276,"./modules/es6.math.imul":277,"./modules/es6.math.log10":278,"./modules/es6.math.log1p":279,"./modules/es6.math.log2":280,"./modules/es6.math.sign":281,"./modules/es6.math.sinh":282,"./modules/es6.math.tanh":283,"./modules/es6.math.trunc":284,"./modules/es6.number.constructor":285,"./modules/es6.number.epsilon":286,"./modules/es6.number.is-finite":287,"./modules/es6.number.is-integer":288,"./modules/es6.number.is-nan":289,"./modules/es6.number.is-safe-integer":290,"./modules/es6.number.max-safe-integer":291,"./modules/es6.number.min-safe-integer":292,"./modules/es6.number.parse-float":293,"./modules/es6.number.parse-int":294,"./modules/es6.number.to-fixed":295,"./modules/es6.number.to-precision":296,"./modules/es6.object.assign":297,"./modules/es6.object.create":298,"./modules/es6.object.define-properties":299,"./modules/es6.object.define-property":300,"./modules/es6.object.freeze":301,"./modules/es6.object.get-own-property-descriptor":302,"./modules/es6.object.get-own-property-names":303,"./modules/es6.object.get-prototype-of":304,"./modules/es6.object.is":308,"./modules/es6.object.is-extensible":305,"./modules/es6.object.is-frozen":306,"./modules/es6.object.is-sealed":307,"./modules/es6.object.keys":309,"./modules/es6.object.prevent-extensions":310,"./modules/es6.object.seal":311,"./modules/es6.object.set-prototype-of":312,"./modules/es6.object.to-string":313,"./modules/es6.parse-float":314,"./modules/es6.parse-int":315,"./modules/es6.promise":316,"./modules/es6.reflect.apply":317,"./modules/es6.reflect.construct":318,"./modules/es6.reflect.define-property":319,"./modules/es6.reflect.delete-property":320,"./modules/es6.reflect.enumerate":321,"./modules/es6.reflect.get":324,"./modules/es6.reflect.get-own-property-descriptor":322,"./modules/es6.reflect.get-prototype-of":323,"./modules/es6.reflect.has":325,"./modules/es6.reflect.is-extensible":326,"./modules/es6.reflect.own-keys":327,"./modules/es6.reflect.prevent-extensions":328,"./modules/es6.reflect.set":330,"./modules/es6.reflect.set-prototype-of":329,"./modules/es6.regexp.constructor":331,"./modules/es6.regexp.flags":332,"./modules/es6.regexp.match":333,"./modules/es6.regexp.replace":334,"./modules/es6.regexp.search":335,"./modules/es6.regexp.split":336,"./modules/es6.regexp.to-string":337,"./modules/es6.set":338,"./modules/es6.string.anchor":339,"./modules/es6.string.big":340,"./modules/es6.string.blink":341,"./modules/es6.string.bold":342,"./modules/es6.string.code-point-at":343,"./modules/es6.string.ends-with":344,"./modules/es6.string.fixed":345,"./modules/es6.string.fontcolor":346,"./modules/es6.string.fontsize":347,"./modules/es6.string.from-code-point":348,"./modules/es6.string.includes":349,"./modules/es6.string.italics":350,"./modules/es6.string.iterator":351,"./modules/es6.string.link":352,"./modules/es6.string.raw":353,"./modules/es6.string.repeat":354,"./modules/es6.string.small":355,"./modules/es6.string.starts-with":356,"./modules/es6.string.strike":357,"./modules/es6.string.sub":358,"./modules/es6.string.sup":359,"./modules/es6.string.trim":360,"./modules/es6.symbol":361,"./modules/es6.typed.array-buffer":362,"./modules/es6.typed.data-view":363,"./modules/es6.typed.float32-array":364,"./modules/es6.typed.float64-array":365,"./modules/es6.typed.int16-array":366,"./modules/es6.typed.int32-array":367,"./modules/es6.typed.int8-array":368,"./modules/es6.typed.uint16-array":369,"./modules/es6.typed.uint32-array":370,"./modules/es6.typed.uint8-array":371,"./modules/es6.typed.uint8-clamped-array":372,"./modules/es6.weak-map":373,"./modules/es6.weak-set":374,"./modules/es7.array.includes":375,"./modules/es7.asap":376,"./modules/es7.error.is-error":377,"./modules/es7.map.to-json":378,"./modules/es7.math.iaddh":379,"./modules/es7.math.imulh":380,"./modules/es7.math.isubh":381,"./modules/es7.math.umulh":382,"./modules/es7.object.define-getter":383,"./modules/es7.object.define-setter":384,"./modules/es7.object.entries":385,"./modules/es7.object.get-own-property-descriptors":386,"./modules/es7.object.lookup-getter":387,"./modules/es7.object.lookup-setter":388,"./modules/es7.object.values":389,"./modules/es7.observable":390,"./modules/es7.reflect.define-metadata":391,"./modules/es7.reflect.delete-metadata":392,"./modules/es7.reflect.get-metadata":394,"./modules/es7.reflect.get-metadata-keys":393,"./modules/es7.reflect.get-own-metadata":396,"./modules/es7.reflect.get-own-metadata-keys":395,"./modules/es7.reflect.has-metadata":397,"./modules/es7.reflect.has-own-metadata":398,"./modules/es7.reflect.metadata":399,"./modules/es7.set.to-json":400,"./modules/es7.string.at":401,"./modules/es7.string.match-all":402,"./modules/es7.string.pad-end":403,"./modules/es7.string.pad-start":404,"./modules/es7.string.trim-left":405,"./modules/es7.string.trim-right":406,"./modules/es7.symbol.async-iterator":407,"./modules/es7.symbol.observable":408,"./modules/es7.system.global":409,"./modules/web.dom.iterable":410,"./modules/web.immediate":411,"./modules/web.timers":412}],414:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],415:[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = arg;

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":414}],416:[function(require,module,exports){
(function (global){
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

// Distribution file for MessageFactory.js 
// version: 0.5.1
// Last build: Mon Jan 16 2017 09:09:26 GMT+0000 (GMT Standard Time)

!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var t;t="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,t.MessageFactory=e()}}(function(){var e;return function t(e,r,n){function o(a,s){if(!r[a]){if(!e[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var c=new Error("Cannot find module '"+a+"'");throw c.code="MODULE_NOT_FOUND",c}var l=r[a]={exports:{}};e[a][0].call(l.exports,function(t){var r=e[a][1][t];return o(r?r:t)},l,l.exports,t,e,r,n)}return r[a].exports}for(var i="function"==typeof require&&require,a=0;a<n.length;a++)o(n[a]);return o}({1:[function(e,t,r){t.exports={"default":e("core-js/library/fn/json/stringify"),__esModule:!0}},{"core-js/library/fn/json/stringify":16}],2:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/create"),__esModule:!0}},{"core-js/library/fn/object/create":17}],3:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/define-property"),__esModule:!0}},{"core-js/library/fn/object/define-property":18}],4:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/freeze"),__esModule:!0}},{"core-js/library/fn/object/freeze":19}],5:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/get-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/get-prototype-of":20}],6:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/keys"),__esModule:!0}},{"core-js/library/fn/object/keys":21}],7:[function(e,t,r){t.exports={"default":e("core-js/library/fn/object/set-prototype-of"),__esModule:!0}},{"core-js/library/fn/object/set-prototype-of":22}],8:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol"),__esModule:!0}},{"core-js/library/fn/symbol":23}],9:[function(e,t,r){t.exports={"default":e("core-js/library/fn/symbol/iterator"),__esModule:!0}},{"core-js/library/fn/symbol/iterator":24}],10:[function(e,t,r){"use strict";r.__esModule=!0,r["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},{}],11:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/define-property"),i=n(o);r["default"]=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),(0,i["default"])(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}()},{"../core-js/object/define-property":3}],12:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/object/set-prototype-of"),i=n(o),a=e("../core-js/object/create"),s=n(a),u=e("../helpers/typeof"),c=n(u);r["default"]=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+("undefined"==typeof t?"undefined":(0,c["default"])(t)));e.prototype=(0,s["default"])(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(i["default"]?(0,i["default"])(e,t):e.__proto__=t)}},{"../core-js/object/create":2,"../core-js/object/set-prototype-of":7,"../helpers/typeof":14}],13:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../helpers/typeof"),i=n(o);r["default"]=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==("undefined"==typeof t?"undefined":(0,i["default"])(t))&&"function"!=typeof t?e:t}},{"../helpers/typeof":14}],14:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}r.__esModule=!0;var o=e("../core-js/symbol/iterator"),i=n(o),a=e("../core-js/symbol"),s=n(a),u="function"==typeof s["default"]&&"symbol"==typeof i["default"]?function(e){return typeof e}:function(e){return e&&"function"==typeof s["default"]&&e.constructor===s["default"]&&e!==s["default"].prototype?"symbol":typeof e};r["default"]="function"==typeof s["default"]&&"symbol"===u(i["default"])?function(e){return"undefined"==typeof e?"undefined":u(e)}:function(e){return e&&"function"==typeof s["default"]&&e.constructor===s["default"]&&e!==s["default"].prototype?"symbol":"undefined"==typeof e?"undefined":u(e)}},{"../core-js/symbol":8,"../core-js/symbol/iterator":9}],15:[function(e,t,r){t.exports=e("regenerator-runtime")},{"regenerator-runtime":97}],16:[function(e,t,r){var n=e("../../modules/_core"),o=n.JSON||(n.JSON={stringify:JSON.stringify});t.exports=function(e){return o.stringify.apply(o,arguments)}},{"../../modules/_core":30}],17:[function(e,t,r){e("../../modules/es6.object.create");var n=e("../../modules/_core").Object;t.exports=function(e,t){return n.create(e,t)}},{"../../modules/_core":30,"../../modules/es6.object.create":84}],18:[function(e,t,r){e("../../modules/es6.object.define-property");var n=e("../../modules/_core").Object;t.exports=function(e,t,r){return n.defineProperty(e,t,r)}},{"../../modules/_core":30,"../../modules/es6.object.define-property":85}],19:[function(e,t,r){e("../../modules/es6.object.freeze"),t.exports=e("../../modules/_core").Object.freeze},{"../../modules/_core":30,"../../modules/es6.object.freeze":86}],20:[function(e,t,r){e("../../modules/es6.object.get-prototype-of"),t.exports=e("../../modules/_core").Object.getPrototypeOf},{"../../modules/_core":30,"../../modules/es6.object.get-prototype-of":87}],21:[function(e,t,r){e("../../modules/es6.object.keys"),t.exports=e("../../modules/_core").Object.keys},{"../../modules/_core":30,"../../modules/es6.object.keys":88}],22:[function(e,t,r){e("../../modules/es6.object.set-prototype-of"),t.exports=e("../../modules/_core").Object.setPrototypeOf},{"../../modules/_core":30,"../../modules/es6.object.set-prototype-of":89}],23:[function(e,t,r){e("../../modules/es6.symbol"),e("../../modules/es6.object.to-string"),e("../../modules/es7.symbol.async-iterator"),e("../../modules/es7.symbol.observable"),t.exports=e("../../modules/_core").Symbol},{"../../modules/_core":30,"../../modules/es6.object.to-string":90,"../../modules/es6.symbol":92,"../../modules/es7.symbol.async-iterator":93,"../../modules/es7.symbol.observable":94}],24:[function(e,t,r){e("../../modules/es6.string.iterator"),e("../../modules/web.dom.iterable"),t.exports=e("../../modules/_wks-ext").f("iterator")},{"../../modules/_wks-ext":81,"../../modules/es6.string.iterator":91,"../../modules/web.dom.iterable":95}],25:[function(e,t,r){t.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},{}],26:[function(e,t,r){t.exports=function(){}},{}],27:[function(e,t,r){var n=e("./_is-object");t.exports=function(e){if(!n(e))throw TypeError(e+" is not an object!");return e}},{"./_is-object":46}],28:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_to-length"),i=e("./_to-index");t.exports=function(e){return function(t,r,a){var s,u=n(t),c=o(u.length),l=i(a,c);if(e&&r!=r){for(;c>l;)if(s=u[l++],s!=s)return!0}else for(;c>l;l++)if((e||l in u)&&u[l]===r)return e||l||0;return!e&&-1}}},{"./_to-index":73,"./_to-iobject":75,"./_to-length":76}],29:[function(e,t,r){var n={}.toString;t.exports=function(e){return n.call(e).slice(8,-1)}},{}],30:[function(e,t,r){var n=t.exports={version:"2.4.0"};"number"==typeof __e&&(__e=n)},{}],31:[function(e,t,r){var n=e("./_a-function");t.exports=function(e,t,r){if(n(e),void 0===t)return e;switch(r){case 1:return function(r){return e.call(t,r)};case 2:return function(r,n){return e.call(t,r,n)};case 3:return function(r,n,o){return e.call(t,r,n,o)}}return function(){return e.apply(t,arguments)}}},{"./_a-function":25}],32:[function(e,t,r){t.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e}},{}],33:[function(e,t,r){t.exports=!e("./_fails")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},{"./_fails":38}],34:[function(e,t,r){var n=e("./_is-object"),o=e("./_global").document,i=n(o)&&n(o.createElement);t.exports=function(e){return i?o.createElement(e):{}}},{"./_global":39,"./_is-object":46}],35:[function(e,t,r){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},{}],36:[function(e,t,r){var n=e("./_object-keys"),o=e("./_object-gops"),i=e("./_object-pie");t.exports=function(e){var t=n(e),r=o.f;if(r)for(var a,s=r(e),u=i.f,c=0;s.length>c;)u.call(e,a=s[c++])&&t.push(a);return t}},{"./_object-gops":60,"./_object-keys":63,"./_object-pie":64}],37:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_ctx"),a=e("./_hide"),s="prototype",u=function(e,t,r){var c,l,f,d=e&u.F,p=e&u.G,h=e&u.S,y=e&u.P,m=e&u.B,v=e&u.W,_=p?o:o[t]||(o[t]={}),b=_[s],g=p?n:h?n[t]:(n[t]||{})[s];p&&(r=t);for(c in r)l=!d&&g&&void 0!==g[c],l&&c in _||(f=l?g[c]:r[c],_[c]=p&&"function"!=typeof g[c]?r[c]:m&&l?i(f,n):v&&g[c]==f?function(e){var t=function(t,r,n){if(this instanceof e){switch(arguments.length){case 0:return new e;case 1:return new e(t);case 2:return new e(t,r)}return new e(t,r,n)}return e.apply(this,arguments)};return t[s]=e[s],t}(f):y&&"function"==typeof f?i(Function.call,f):f,y&&((_.virtual||(_.virtual={}))[c]=f,e&u.R&&b&&!b[c]&&a(b,c,f)))};u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},{"./_core":30,"./_ctx":31,"./_global":39,"./_hide":41}],38:[function(e,t,r){t.exports=function(e){try{return!!e()}catch(t){return!0}}},{}],39:[function(e,t,r){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},{}],40:[function(e,t,r){var n={}.hasOwnProperty;t.exports=function(e,t){return n.call(e,t)}},{}],41:[function(e,t,r){var n=e("./_object-dp"),o=e("./_property-desc");t.exports=e("./_descriptors")?function(e,t,r){return n.f(e,t,o(1,r))}:function(e,t,r){return e[t]=r,e}},{"./_descriptors":33,"./_object-dp":55,"./_property-desc":66}],42:[function(e,t,r){t.exports=e("./_global").document&&document.documentElement},{"./_global":39}],43:[function(e,t,r){t.exports=!e("./_descriptors")&&!e("./_fails")(function(){return 7!=Object.defineProperty(e("./_dom-create")("div"),"a",{get:function(){return 7}}).a})},{"./_descriptors":33,"./_dom-create":34,"./_fails":38}],44:[function(e,t,r){var n=e("./_cof");t.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==n(e)?e.split(""):Object(e)}},{"./_cof":29}],45:[function(e,t,r){var n=e("./_cof");t.exports=Array.isArray||function(e){return"Array"==n(e)}},{"./_cof":29}],46:[function(e,t,r){t.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},{}],47:[function(e,t,r){"use strict";var n=e("./_object-create"),o=e("./_property-desc"),i=e("./_set-to-string-tag"),a={};e("./_hide")(a,e("./_wks")("iterator"),function(){return this}),t.exports=function(e,t,r){e.prototype=n(a,{next:o(1,r)}),i(e,t+" Iterator")}},{"./_hide":41,"./_object-create":54,"./_property-desc":66,"./_set-to-string-tag":69,"./_wks":82}],48:[function(e,t,r){"use strict";var n=e("./_library"),o=e("./_export"),i=e("./_redefine"),a=e("./_hide"),s=e("./_has"),u=e("./_iterators"),c=e("./_iter-create"),l=e("./_set-to-string-tag"),f=e("./_object-gpo"),d=e("./_wks")("iterator"),p=!([].keys&&"next"in[].keys()),h="@@iterator",y="keys",m="values",v=function(){return this};t.exports=function(e,t,r,_,b,g,E){c(r,t,_);var j,w,O,M=function(e){if(!p&&e in R)return R[e];switch(e){case y:return function(){return new r(this,e)};case m:return function(){return new r(this,e)}}return function(){return new r(this,e)}},x=t+" Iterator",P=b==m,k=!1,R=e.prototype,S=R[d]||R[h]||b&&R[b],T=S||M(b),A=b?P?M("entries"):T:void 0,N="Array"==t?R.entries||S:S;if(N&&(O=f(N.call(new e)),O!==Object.prototype&&(l(O,x,!0),n||s(O,d)||a(O,d,v))),P&&S&&S.name!==m&&(k=!0,T=function(){return S.call(this)}),n&&!E||!p&&!k&&R[d]||a(R,d,T),u[t]=T,u[x]=v,b)if(j={values:P?T:M(m),keys:g?T:M(y),entries:A},E)for(w in j)w in R||i(R,w,j[w]);else o(o.P+o.F*(p||k),t,j);return j}},{"./_export":37,"./_has":40,"./_hide":41,"./_iter-create":47,"./_iterators":50,"./_library":52,"./_object-gpo":61,"./_redefine":67,"./_set-to-string-tag":69,"./_wks":82}],49:[function(e,t,r){t.exports=function(e,t){return{value:t,done:!!e}}},{}],50:[function(e,t,r){t.exports={}},{}],51:[function(e,t,r){var n=e("./_object-keys"),o=e("./_to-iobject");t.exports=function(e,t){for(var r,i=o(e),a=n(i),s=a.length,u=0;s>u;)if(i[r=a[u++]]===t)return r}},{"./_object-keys":63,"./_to-iobject":75}],52:[function(e,t,r){t.exports=!0},{}],53:[function(e,t,r){var n=e("./_uid")("meta"),o=e("./_is-object"),i=e("./_has"),a=e("./_object-dp").f,s=0,u=Object.isExtensible||function(){return!0},c=!e("./_fails")(function(){return u(Object.preventExtensions({}))}),l=function(e){a(e,n,{value:{i:"O"+ ++s,w:{}}})},f=function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,n)){if(!u(e))return"F";if(!t)return"E";l(e)}return e[n].i},d=function(e,t){if(!i(e,n)){if(!u(e))return!0;if(!t)return!1;l(e)}return e[n].w},p=function(e){return c&&h.NEED&&u(e)&&!i(e,n)&&l(e),e},h=t.exports={KEY:n,NEED:!1,fastKey:f,getWeak:d,onFreeze:p}},{"./_fails":38,"./_has":40,"./_is-object":46,"./_object-dp":55,"./_uid":79}],54:[function(e,t,r){var n=e("./_an-object"),o=e("./_object-dps"),i=e("./_enum-bug-keys"),a=e("./_shared-key")("IE_PROTO"),s=function(){},u="prototype",c=function(){var t,r=e("./_dom-create")("iframe"),n=i.length,o="<",a=">";for(r.style.display="none",e("./_html").appendChild(r),r.src="javascript:",t=r.contentWindow.document,t.open(),t.write(o+"script"+a+"document.F=Object"+o+"/script"+a),t.close(),c=t.F;n--;)delete c[u][i[n]];return c()};t.exports=Object.create||function(e,t){var r;return null!==e?(s[u]=n(e),r=new s,s[u]=null,r[a]=e):r=c(),void 0===t?r:o(r,t)}},{"./_an-object":27,"./_dom-create":34,"./_enum-bug-keys":35,"./_html":42,"./_object-dps":56,"./_shared-key":70}],55:[function(e,t,r){var n=e("./_an-object"),o=e("./_ie8-dom-define"),i=e("./_to-primitive"),a=Object.defineProperty;r.f=e("./_descriptors")?Object.defineProperty:function(e,t,r){if(n(e),t=i(t,!0),n(r),o)try{return a(e,t,r)}catch(s){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(e[t]=r.value),e}},{"./_an-object":27,"./_descriptors":33,"./_ie8-dom-define":43,"./_to-primitive":78}],56:[function(e,t,r){var n=e("./_object-dp"),o=e("./_an-object"),i=e("./_object-keys");t.exports=e("./_descriptors")?Object.defineProperties:function(e,t){o(e);for(var r,a=i(t),s=a.length,u=0;s>u;)n.f(e,r=a[u++],t[r]);return e}},{"./_an-object":27,"./_descriptors":33,"./_object-dp":55,"./_object-keys":63}],57:[function(e,t,r){var n=e("./_object-pie"),o=e("./_property-desc"),i=e("./_to-iobject"),a=e("./_to-primitive"),s=e("./_has"),u=e("./_ie8-dom-define"),c=Object.getOwnPropertyDescriptor;r.f=e("./_descriptors")?c:function(e,t){if(e=i(e),t=a(t,!0),u)try{return c(e,t)}catch(r){}if(s(e,t))return o(!n.f.call(e,t),e[t])}},{"./_descriptors":33,"./_has":40,"./_ie8-dom-define":43,"./_object-pie":64,"./_property-desc":66,"./_to-iobject":75,"./_to-primitive":78}],58:[function(e,t,r){var n=e("./_to-iobject"),o=e("./_object-gopn").f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],s=function(e){try{return o(e)}catch(t){return a.slice()}};t.exports.f=function(e){return a&&"[object Window]"==i.call(e)?s(e):o(n(e))}},{"./_object-gopn":59,"./_to-iobject":75}],59:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys").concat("length","prototype");r.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},{"./_enum-bug-keys":35,"./_object-keys-internal":62}],60:[function(e,t,r){r.f=Object.getOwnPropertySymbols},{}],61:[function(e,t,r){var n=e("./_has"),o=e("./_to-object"),i=e("./_shared-key")("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(e){return e=o(e),n(e,i)?e[i]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},{"./_has":40,"./_shared-key":70,"./_to-object":77}],62:[function(e,t,r){var n=e("./_has"),o=e("./_to-iobject"),i=e("./_array-includes")(!1),a=e("./_shared-key")("IE_PROTO");t.exports=function(e,t){var r,s=o(e),u=0,c=[];for(r in s)r!=a&&n(s,r)&&c.push(r);for(;t.length>u;)n(s,r=t[u++])&&(~i(c,r)||c.push(r));return c}},{"./_array-includes":28,"./_has":40,"./_shared-key":70,"./_to-iobject":75}],63:[function(e,t,r){var n=e("./_object-keys-internal"),o=e("./_enum-bug-keys");t.exports=Object.keys||function(e){return n(e,o)}},{"./_enum-bug-keys":35,"./_object-keys-internal":62}],64:[function(e,t,r){r.f={}.propertyIsEnumerable},{}],65:[function(e,t,r){var n=e("./_export"),o=e("./_core"),i=e("./_fails");t.exports=function(e,t){var r=(o.Object||{})[e]||Object[e],a={};a[e]=t(r),n(n.S+n.F*i(function(){r(1)}),"Object",a)}},{"./_core":30,"./_export":37,"./_fails":38}],66:[function(e,t,r){t.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},{}],67:[function(e,t,r){t.exports=e("./_hide")},{"./_hide":41}],68:[function(e,t,r){var n=e("./_is-object"),o=e("./_an-object"),i=function(e,t){if(o(e),!n(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,r,n){try{n=e("./_ctx")(Function.call,e("./_object-gopd").f(Object.prototype,"__proto__").set,2),n(t,[]),r=!(t instanceof Array)}catch(o){r=!0}return function(e,t){return i(e,t),r?e.__proto__=t:n(e,t),e}}({},!1):void 0),check:i}},{"./_an-object":27,"./_ctx":31,"./_is-object":46,"./_object-gopd":57}],69:[function(e,t,r){var n=e("./_object-dp").f,o=e("./_has"),i=e("./_wks")("toStringTag");t.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},{"./_has":40,"./_object-dp":55,"./_wks":82}],70:[function(e,t,r){var n=e("./_shared")("keys"),o=e("./_uid");t.exports=function(e){return n[e]||(n[e]=o(e))}},{"./_shared":71,"./_uid":79}],71:[function(e,t,r){var n=e("./_global"),o="__core-js_shared__",i=n[o]||(n[o]={});t.exports=function(e){return i[e]||(i[e]={})}},{"./_global":39}],72:[function(e,t,r){var n=e("./_to-integer"),o=e("./_defined");t.exports=function(e){return function(t,r){var i,a,s=String(o(t)),u=n(r),c=s.length;return u<0||u>=c?e?"":void 0:(i=s.charCodeAt(u),i<55296||i>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):i:e?s.slice(u,u+2):(i-55296<<10)+(a-56320)+65536)}}},{"./_defined":32,"./_to-integer":74}],73:[function(e,t,r){var n=e("./_to-integer"),o=Math.max,i=Math.min;t.exports=function(e,t){return e=n(e),e<0?o(e+t,0):i(e,t)}},{"./_to-integer":74}],74:[function(e,t,r){var n=Math.ceil,o=Math.floor;t.exports=function(e){return isNaN(e=+e)?0:(e>0?o:n)(e)}},{}],75:[function(e,t,r){var n=e("./_iobject"),o=e("./_defined");t.exports=function(e){return n(o(e))}},{"./_defined":32,"./_iobject":44}],76:[function(e,t,r){var n=e("./_to-integer"),o=Math.min;t.exports=function(e){return e>0?o(n(e),9007199254740991):0}},{"./_to-integer":74}],77:[function(e,t,r){var n=e("./_defined");t.exports=function(e){return Object(n(e))}},{"./_defined":32}],78:[function(e,t,r){var n=e("./_is-object");t.exports=function(e,t){if(!n(e))return e;var r,o;if(t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;if("function"==typeof(r=e.valueOf)&&!n(o=r.call(e)))return o;if(!t&&"function"==typeof(r=e.toString)&&!n(o=r.call(e)))return o;throw TypeError("Can't convert object to primitive value")}},{"./_is-object":46}],79:[function(e,t,r){var n=0,o=Math.random();t.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+o).toString(36))}},{}],80:[function(e,t,r){var n=e("./_global"),o=e("./_core"),i=e("./_library"),a=e("./_wks-ext"),s=e("./_object-dp").f;t.exports=function(e){var t=o.Symbol||(o.Symbol=i?{}:n.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},{"./_core":30,"./_global":39,"./_library":52,"./_object-dp":55,"./_wks-ext":81}],81:[function(e,t,r){r.f=e("./_wks")},{"./_wks":82}],82:[function(e,t,r){var n=e("./_shared")("wks"),o=e("./_uid"),i=e("./_global").Symbol,a="function"==typeof i,s=t.exports=function(e){return n[e]||(n[e]=a&&i[e]||(a?i:o)("Symbol."+e))};s.store=n},{"./_global":39,"./_shared":71,"./_uid":79}],83:[function(e,t,r){"use strict";var n=e("./_add-to-unscopables"),o=e("./_iter-step"),i=e("./_iterators"),a=e("./_to-iobject");t.exports=e("./_iter-define")(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,r=this._i++;return!e||r>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,r):"values"==t?o(0,e[r]):o(0,[r,e[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},{"./_add-to-unscopables":26,"./_iter-define":48,"./_iter-step":49,"./_iterators":50,"./_to-iobject":75}],84:[function(e,t,r){var n=e("./_export");n(n.S,"Object",{create:e("./_object-create")})},{"./_export":37,"./_object-create":54}],85:[function(e,t,r){var n=e("./_export");n(n.S+n.F*!e("./_descriptors"),"Object",{defineProperty:e("./_object-dp").f})},{"./_descriptors":33,"./_export":37,"./_object-dp":55}],86:[function(e,t,r){var n=e("./_is-object"),o=e("./_meta").onFreeze;e("./_object-sap")("freeze",function(e){return function(t){return e&&n(t)?e(o(t)):t}})},{"./_is-object":46,"./_meta":53,"./_object-sap":65}],87:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-gpo");e("./_object-sap")("getPrototypeOf",function(){return function(e){return o(n(e))}})},{"./_object-gpo":61,"./_object-sap":65,"./_to-object":77}],88:[function(e,t,r){var n=e("./_to-object"),o=e("./_object-keys");e("./_object-sap")("keys",function(){return function(e){return o(n(e))}})},{"./_object-keys":63,"./_object-sap":65,"./_to-object":77}],89:[function(e,t,r){var n=e("./_export");n(n.S,"Object",{setPrototypeOf:e("./_set-proto").set})},{"./_export":37,"./_set-proto":68}],90:[function(e,t,r){},{}],91:[function(e,t,r){"use strict";var n=e("./_string-at")(!0);e("./_iter-define")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,r=this._i;return r>=t.length?{value:void 0,done:!0}:(e=n(t,r),this._i+=e.length,{value:e,done:!1})})},{"./_iter-define":48,"./_string-at":72}],92:[function(e,t,r){"use strict";var n=e("./_global"),o=e("./_has"),i=e("./_descriptors"),a=e("./_export"),s=e("./_redefine"),u=e("./_meta").KEY,c=e("./_fails"),l=e("./_shared"),f=e("./_set-to-string-tag"),d=e("./_uid"),p=e("./_wks"),h=e("./_wks-ext"),y=e("./_wks-define"),m=e("./_keyof"),v=e("./_enum-keys"),_=e("./_is-array"),b=e("./_an-object"),g=e("./_to-iobject"),E=e("./_to-primitive"),j=e("./_property-desc"),w=e("./_object-create"),O=e("./_object-gopn-ext"),M=e("./_object-gopd"),x=e("./_object-dp"),P=e("./_object-keys"),k=M.f,R=x.f,S=O.f,T=n.Symbol,A=n.JSON,N=A&&A.stringify,I="prototype",U=p("_hidden"),C=p("toPrimitive"),L={}.propertyIsEnumerable,F=l("symbol-registry"),B=l("symbols"),D=l("op-symbols"),G=Object[I],K="function"==typeof T,Y=n.QObject,q=!Y||!Y[I]||!Y[I].findChild,z=i&&c(function(){return 7!=w(R({},"a",{get:function(){return R(this,"a",{value:7}).a}})).a})?function(e,t,r){var n=k(G,t);n&&delete G[t],R(e,t,r),n&&e!==G&&R(G,t,n)}:R,H=function(e){var t=B[e]=w(T[I]);return t._k=e,t},W=K&&"symbol"==typeof T.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof T},J=function(e,t,r){return e===G&&J(D,t,r),b(e),t=E(t,!0),b(r),o(B,t)?(r.enumerable?(o(e,U)&&e[U][t]&&(e[U][t]=!1),r=w(r,{enumerable:j(0,!1)})):(o(e,U)||R(e,U,j(1,{})),e[U][t]=!0),z(e,t,r)):R(e,t,r)},V=function(e,t){b(e);for(var r,n=v(t=g(t)),o=0,i=n.length;i>o;)J(e,r=n[o++],t[r]);return e},$=function(e,t){return void 0===t?w(e):V(w(e),t)},X=function(e){var t=L.call(this,e=E(e,!0));return!(this===G&&o(B,e)&&!o(D,e))&&(!(t||!o(this,e)||!o(B,e)||o(this,U)&&this[U][e])||t)},Q=function(e,t){if(e=g(e),t=E(t,!0),e!==G||!o(B,t)||o(D,t)){var r=k(e,t);return!r||!o(B,t)||o(e,U)&&e[U][t]||(r.enumerable=!0),r}},Z=function(e){for(var t,r=S(g(e)),n=[],i=0;r.length>i;)o(B,t=r[i++])||t==U||t==u||n.push(t);return n},ee=function(e){for(var t,r=e===G,n=S(r?D:g(e)),i=[],a=0;n.length>a;)!o(B,t=n[a++])||r&&!o(G,t)||i.push(B[t]);return i};K||(T=function(){if(this instanceof T)throw TypeError("Symbol is not a constructor!");var e=d(arguments.length>0?arguments[0]:void 0),t=function(r){this===G&&t.call(D,r),o(this,U)&&o(this[U],e)&&(this[U][e]=!1),z(this,e,j(1,r))};return i&&q&&z(G,e,{configurable:!0,set:t}),H(e)},s(T[I],"toString",function(){return this._k}),M.f=Q,x.f=J,e("./_object-gopn").f=O.f=Z,e("./_object-pie").f=X,e("./_object-gops").f=ee,i&&!e("./_library")&&s(G,"propertyIsEnumerable",X,!0),h.f=function(e){return H(p(e))}),a(a.G+a.W+a.F*!K,{Symbol:T});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),re=0;te.length>re;)p(te[re++]);for(var te=P(p.store),re=0;te.length>re;)y(te[re++]);a(a.S+a.F*!K,"Symbol",{"for":function(e){return o(F,e+="")?F[e]:F[e]=T(e)},keyFor:function(e){if(W(e))return m(F,e);throw TypeError(e+" is not a symbol!")},useSetter:function(){q=!0},useSimple:function(){q=!1}}),a(a.S+a.F*!K,"Object",{create:$,defineProperty:J,defineProperties:V,getOwnPropertyDescriptor:Q,getOwnPropertyNames:Z,getOwnPropertySymbols:ee}),A&&a(a.S+a.F*(!K||c(function(){var e=T();return"[null]"!=N([e])||"{}"!=N({a:e})||"{}"!=N(Object(e))})),"JSON",{stringify:function(e){if(void 0!==e&&!W(e)){for(var t,r,n=[e],o=1;arguments.length>o;)n.push(arguments[o++]);return t=n[1],"function"==typeof t&&(r=t),!r&&_(t)||(t=function(e,t){if(r&&(t=r.call(this,e,t)),!W(t))return t}),n[1]=t,N.apply(A,n)}}}),T[I][C]||e("./_hide")(T[I],C,T[I].valueOf),f(T,"Symbol"),f(Math,"Math",!0),f(n.JSON,"JSON",!0)},{"./_an-object":27,"./_descriptors":33,"./_enum-keys":36,"./_export":37,"./_fails":38,"./_global":39,"./_has":40,"./_hide":41,"./_is-array":45,"./_keyof":51,"./_library":52,"./_meta":53,"./_object-create":54,"./_object-dp":55,"./_object-gopd":57,"./_object-gopn":59,"./_object-gopn-ext":58,"./_object-gops":60,"./_object-keys":63,"./_object-pie":64,"./_property-desc":66,"./_redefine":67,"./_set-to-string-tag":69,"./_shared":71,"./_to-iobject":75,"./_to-primitive":78,"./_uid":79,"./_wks":82,"./_wks-define":80,"./_wks-ext":81}],93:[function(e,t,r){e("./_wks-define")("asyncIterator")},{"./_wks-define":80}],94:[function(e,t,r){e("./_wks-define")("observable")},{"./_wks-define":80}],95:[function(e,t,r){e("./es6.array.iterator");for(var n=e("./_global"),o=e("./_hide"),i=e("./_iterators"),a=e("./_wks")("toStringTag"),s=["NodeList","DOMTokenList","MediaList","StyleSheetList","CSSRuleList"],u=0;u<5;u++){var c=s[u],l=n[c],f=l&&l.prototype;f&&!f[a]&&o(f,a,c),i[c]=i.Array}},{"./_global":39,"./_hide":41,"./_iterators":50,"./_wks":82,"./es6.array.iterator":83}],96:[function(e,t,r){function n(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function i(e){if(f===setTimeout)return setTimeout(e,0);if((f===n||!f)&&setTimeout)return f=setTimeout,setTimeout(e,0);try{return f(e,0)}catch(t){try{return f.call(null,e,0)}catch(t){return f.call(this,e,0)}}}function a(e){if(d===clearTimeout)return clearTimeout(e);if((d===o||!d)&&clearTimeout)return d=clearTimeout,clearTimeout(e);try{return d(e)}catch(t){try{return d.call(null,e)}catch(t){return d.call(this,e)}}}function s(){m&&h&&(m=!1,h.length?y=h.concat(y):v=-1,y.length&&u())}function u(){if(!m){var e=i(s);m=!0;for(var t=y.length;t;){for(h=y,y=[];++v<t;)h&&h[v].run();v=-1,t=y.length}h=null,m=!1,a(e)}}function c(e,t){this.fun=e,this.array=t}function l(){}var f,d,p=t.exports={};!function(){try{f="function"==typeof setTimeout?setTimeout:n}catch(e){f=n}try{d="function"==typeof clearTimeout?clearTimeout:o}catch(e){d=o}}();var h,y=[],m=!1,v=-1;p.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];y.push(new c(e,t)),1!==y.length||m||i(u)},c.prototype.run=function(){this.fun.apply(null,this.array)},p.title="browser",p.browser=!0,p.env={},p.argv=[],p.version="",p.versions={},p.on=l,p.addListener=l,p.once=l,p.off=l,p.removeListener=l,p.removeAllListeners=l,p.emit=l,p.binding=function(e){throw new Error("process.binding is not supported")},p.cwd=function(){return"/"},p.chdir=function(e){throw new Error("process.chdir is not supported")},p.umask=function(){return 0}},{}],97:[function(e,t,r){(function(r){var n="object"==typeof r?r:"object"==typeof window?window:"object"==typeof self?self:this,o=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,i=o&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=e("./runtime"),o)n.regeneratorRuntime=i;else try{delete n.regeneratorRuntime}catch(a){n.regeneratorRuntime=void 0}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./runtime":98}],98:[function(e,t,r){(function(e,r){!function(r){"use strict";function n(e,t,r,n){var o=t&&t.prototype instanceof i?t:i,a=Object.create(o.prototype),s=new p(n||[]);return a._invoke=l(e,r,s),a}function o(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(n){return{type:"throw",arg:n}}}function i(){}function a(){}function s(){}function u(e){["next","throw","return"].forEach(function(t){e[t]=function(e){return this._invoke(t,e)}})}function c(t){function r(e,n,i,a){var s=o(t[e],t,n);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&_.call(c,"__await")?Promise.resolve(c.__await).then(function(e){r("next",e,i,a)},function(e){r("throw",e,i,a)}):Promise.resolve(c).then(function(e){u.value=e,i(u)},a)}a(s.arg)}function n(e,t){function n(){return new Promise(function(n,o){r(e,t,n,o)})}return i=i?i.then(n,n):n()}"object"==typeof e&&e.domain&&(r=e.domain.bind(r));var i;this._invoke=n}function l(e,t,r){var n=O;return function(i,a){if(n===x)throw new Error("Generator is already running");if(n===P){if("throw"===i)throw a;return y()}for(;;){var s=r.delegate;if(s){if("return"===i||"throw"===i&&s.iterator[i]===m){r.delegate=null;var u=s.iterator["return"];if(u){var c=o(u,s.iterator,a);if("throw"===c.type){i="throw",a=c.arg;continue}}if("return"===i)continue}var c=o(s.iterator[i],s.iterator,a);if("throw"===c.type){r.delegate=null,i="throw",a=c.arg;continue}i="next",a=m;var l=c.arg;if(!l.done)return n=M,l;r[s.resultName]=l.value,r.next=s.nextLoc,r.delegate=null}if("next"===i)r.sent=r._sent=a;else if("throw"===i){if(n===O)throw n=P,a;r.dispatchException(a)&&(i="next",a=m)}else"return"===i&&r.abrupt("return",a);n=x;var c=o(e,t,r);if("normal"===c.type){n=r.done?P:M;var l={value:c.arg,done:r.done};if(c.arg!==k)return l;r.delegate&&"next"===i&&(a=m)}else"throw"===c.type&&(n=P,i="throw",a=c.arg)}}}function f(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function d(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function p(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(f,this),this.reset(!0)}function h(e){if(e){var t=e[g];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function o(){for(;++r<e.length;)if(_.call(e,r))return o.value=e[r],o.done=!1,o;return o.value=m,o.done=!0,o};return n.next=n}}return{next:y}}function y(){return{value:m,done:!0}}var m,v=Object.prototype,_=v.hasOwnProperty,b="function"==typeof Symbol?Symbol:{},g=b.iterator||"@@iterator",E=b.toStringTag||"@@toStringTag",j="object"==typeof t,w=r.regeneratorRuntime;if(w)return void(j&&(t.exports=w));w=r.regeneratorRuntime=j?t.exports:{},w.wrap=n;var O="suspendedStart",M="suspendedYield",x="executing",P="completed",k={},R={};R[g]=function(){return this};var S=Object.getPrototypeOf,T=S&&S(S(h([])));T&&T!==v&&_.call(T,g)&&(R=T);var A=s.prototype=i.prototype=Object.create(R);a.prototype=A.constructor=s,s.constructor=a,s[E]=a.displayName="GeneratorFunction",w.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===a||"GeneratorFunction"===(t.displayName||t.name));
},w.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,s):(e.__proto__=s,E in e||(e[E]="GeneratorFunction")),e.prototype=Object.create(A),e},w.awrap=function(e){return{__await:e}},u(c.prototype),w.AsyncIterator=c,w.async=function(e,t,r,o){var i=new c(n(e,t,r,o));return w.isGeneratorFunction(t)?i:i.next().then(function(e){return e.done?e.value:i.next()})},u(A),A[E]="Generator",A.toString=function(){return"[object Generator]"},w.keys=function(e){var t=[];for(var r in e)t.push(r);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},w.values=h,p.prototype={constructor:p,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=m,this.done=!1,this.delegate=null,this.tryEntries.forEach(d),!e)for(var t in this)"t"===t.charAt(0)&&_.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=m)},stop:function(){this.done=!0;var e=this.tryEntries[0],t=e.completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(e){function t(t,n){return i.type="throw",i.arg=e,r.next=t,!!n}if(this.done)throw e;for(var r=this,n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n],i=o.completion;if("root"===o.tryLoc)return t("end");if(o.tryLoc<=this.prev){var a=_.call(o,"catchLoc"),s=_.call(o,"finallyLoc");if(a&&s){if(this.prev<o.catchLoc)return t(o.catchLoc,!0);if(this.prev<o.finallyLoc)return t(o.finallyLoc)}else if(a){if(this.prev<o.catchLoc)return t(o.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return t(o.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&_.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var i=o?o.completion:{};return i.type=e,i.arg=t,o?this.next=o.finallyLoc:this.complete(i),k},complete:function(e,t){if("throw"===e.type)throw e.arg;"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=e.arg,this.next="end"):"normal"===e.type&&t&&(this.next=t)},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),d(r),k}},"catch":function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;d(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:h(e),resultName:t,nextLoc:r},k}}}("object"==typeof r?r:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,e("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:96}],99:[function(t,r,n){!function(t,n){"function"==typeof e&&e.amd?e([],n):"undefined"!=typeof r&&r.exports?r.exports=n():t.tv4=n()}(this,function(){function e(e){return encodeURI(e).replace(/%25[0-9][0-9]/g,function(e){return"%"+e.substring(3)})}function t(t){var r="";d[t.charAt(0)]&&(r=t.charAt(0),t=t.substring(1));var n="",o="",i=!0,a=!1,s=!1;"+"===r?i=!1:"."===r?(o=".",n="."):"/"===r?(o="/",n="/"):"#"===r?(o="#",i=!1):";"===r?(o=";",n=";",a=!0,s=!0):"?"===r?(o="?",n="&",a=!0):"&"===r&&(o="&",n="&",a=!0);for(var u=[],c=t.split(","),l=[],f={},h=0;h<c.length;h++){var y=c[h],m=null;if(y.indexOf(":")!==-1){var v=y.split(":");y=v[0],m=parseInt(v[1],10)}for(var _={};p[y.charAt(y.length-1)];)_[y.charAt(y.length-1)]=!0,y=y.substring(0,y.length-1);var b={truncate:m,name:y,suffices:_};l.push(b),f[y]=b,u.push(y)}var g=function(t){for(var r="",u=0,c=0;c<l.length;c++){var f=l[c],d=t(f.name);if(null===d||void 0===d||Array.isArray(d)&&0===d.length||"object"==typeof d&&0===Object.keys(d).length)u++;else if(r+=c===u?o:n||",",Array.isArray(d)){a&&(r+=f.name+"=");for(var p=0;p<d.length;p++)p>0&&(r+=f.suffices["*"]?n||",":",",f.suffices["*"]&&a&&(r+=f.name+"=")),r+=i?encodeURIComponent(d[p]).replace(/!/g,"%21"):e(d[p])}else if("object"==typeof d){a&&!f.suffices["*"]&&(r+=f.name+"=");var h=!0;for(var y in d)h||(r+=f.suffices["*"]?n||",":","),h=!1,r+=i?encodeURIComponent(y).replace(/!/g,"%21"):e(y),r+=f.suffices["*"]?"=":",",r+=i?encodeURIComponent(d[y]).replace(/!/g,"%21"):e(d[y])}else a&&(r+=f.name,s&&""===d||(r+="=")),null!=f.truncate&&(d=d.substring(0,f.truncate)),r+=i?encodeURIComponent(d).replace(/!/g,"%21"):e(d)}return r};return g.varNames=u,{prefix:o,substitution:g}}function r(e){if(!(this instanceof r))return new r(e);for(var n=e.split("{"),o=[n.shift()],i=[],a=[],s=[];n.length>0;){var u=n.shift(),c=u.split("}")[0],l=u.substring(c.length+1),f=t(c);a.push(f.substitution),i.push(f.prefix),o.push(l),s=s.concat(f.substitution.varNames)}this.fill=function(e){for(var t=o[0],r=0;r<a.length;r++){var n=a[r];t+=n(e),t+=o[r+1]}return t},this.varNames=s,this.template=e}function n(e,t){if(e===t)return!0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(Array.isArray(e)!==Array.isArray(t))return!1;if(Array.isArray(e)){if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++)if(!n(e[r],t[r]))return!1}else{var o;for(o in e)if(void 0===t[o]&&void 0!==e[o])return!1;for(o in t)if(void 0===e[o]&&void 0!==t[o])return!1;for(o in e)if(!n(e[o],t[o]))return!1}return!0}return!1}function o(e){var t=String(e).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);return t?{href:t[0]||"",protocol:t[1]||"",authority:t[2]||"",host:t[3]||"",hostname:t[4]||"",port:t[5]||"",pathname:t[6]||"",search:t[7]||"",hash:t[8]||""}:null}function i(e,t){function r(e){var t=[];return e.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,function(e){"/.."===e?t.pop():t.push(e)}),t.join("").replace(/^\//,"/"===e.charAt(0)?"/":"")}return t=o(t||""),e=o(e||""),t&&e?(t.protocol||e.protocol)+(t.protocol||t.authority?t.authority:e.authority)+r(t.protocol||t.authority||"/"===t.pathname.charAt(0)?t.pathname:t.pathname?(e.authority&&!e.pathname?"/":"")+e.pathname.slice(0,e.pathname.lastIndexOf("/")+1)+t.pathname:e.pathname)+(t.protocol||t.authority||t.pathname?t.search:t.search||e.search)+t.hash:null}function a(e){return e.split("#")[0]}function s(e,t){if(e&&"object"==typeof e)if(void 0===t?t=e.id:"string"==typeof e.id&&(t=i(t,e.id),e.id=t),Array.isArray(e))for(var r=0;r<e.length;r++)s(e[r],t);else{"string"==typeof e.$ref&&(e.$ref=i(t,e.$ref));for(var n in e)"enum"!==n&&s(e[n],t)}}function u(e){e=e||"en";var t=E[e];return function(e){var r=t[e.code]||g[e.code];if("string"!=typeof r)return"Unknown error code "+e.code+": "+JSON.stringify(e.messageParams);var n=e.params;return r.replace(/\{([^{}]*)\}/g,function(e,t){var r=n[t];return"string"==typeof r||"number"==typeof r?r:e})}}function c(e,t,r,n,o){if(Error.call(this),void 0===e)throw new Error("No error code supplied: "+n);this.message="",this.params=t,this.code=e,this.dataPath=r||"",this.schemaPath=n||"",this.subErrors=o||null;var i=new Error(this.message);if(this.stack=i.stack||i.stacktrace,!this.stack)try{throw i}catch(i){this.stack=i.stack||i.stacktrace}}function l(e,t){if(t.substring(0,e.length)===e){var r=t.substring(e.length);if(t.length>0&&"/"===t.charAt(e.length-1)||"#"===r.charAt(0)||"?"===r.charAt(0))return!0}return!1}function f(e){var t,r,n=new h,o={setErrorReporter:function(e){return"string"==typeof e?this.language(e):(r=e,!0)},addFormat:function(){n.addFormat.apply(n,arguments)},language:function(e){return e?(E[e]||(e=e.split("-")[0]),!!E[e]&&(t=e,e)):t},addLanguage:function(e,t){var r;for(r in v)t[r]&&!t[v[r]]&&(t[v[r]]=t[r]);var n=e.split("-")[0];if(E[n]){E[e]=Object.create(E[n]);for(r in t)"undefined"==typeof E[n][r]&&(E[n][r]=t[r]),E[e][r]=t[r]}else E[e]=t,E[n]=t;return this},freshApi:function(e){var t=f();return e&&t.language(e),t},validate:function(e,o,i,a){var s=u(t),c=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,l=new h(n,(!1),c,i,a);"string"==typeof o&&(o={$ref:o}),l.addSchema("",o);var f=l.validateAll(e,o,null,null,"");return!f&&a&&(f=l.banUnknownProperties(e,o)),this.error=f,this.missing=l.missing,this.valid=null===f,this.valid},validateResult:function(){var e={};return this.validate.apply(e,arguments),e},validateMultiple:function(e,o,i,a){var s=u(t),c=r?function(e,t,n){return r(e,t,n)||s(e,t,n)}:s,l=new h(n,(!0),c,i,a);"string"==typeof o&&(o={$ref:o}),l.addSchema("",o),l.validateAll(e,o,null,null,""),a&&l.banUnknownProperties(e,o);var f={};return f.errors=l.errors,f.missing=l.missing,f.valid=0===f.errors.length,f},addSchema:function(){return n.addSchema.apply(n,arguments)},getSchema:function(){return n.getSchema.apply(n,arguments)},getSchemaMap:function(){return n.getSchemaMap.apply(n,arguments)},getSchemaUris:function(){return n.getSchemaUris.apply(n,arguments)},getMissingUris:function(){return n.getMissingUris.apply(n,arguments)},dropSchemas:function(){n.dropSchemas.apply(n,arguments)},defineKeyword:function(){n.defineKeyword.apply(n,arguments)},defineError:function(e,t,r){if("string"!=typeof e||!/^[A-Z]+(_[A-Z]+)*$/.test(e))throw new Error("Code name must be a string in UPPER_CASE_WITH_UNDERSCORES");if("number"!=typeof t||t%1!==0||t<1e4)throw new Error("Code number must be an integer > 10000");if("undefined"!=typeof v[e])throw new Error("Error already defined: "+e+" as "+v[e]);if("undefined"!=typeof _[t])throw new Error("Error code already used: "+_[t]+" as "+t);v[e]=t,_[t]=e,g[e]=g[t]=r;for(var n in E){var o=E[n];o[e]&&(o[t]=o[t]||o[e])}},reset:function(){n.reset(),this.error=null,this.missing=[],this.valid=!0},missing:[],error:null,valid:!0,normSchema:s,resolveUrl:i,getDocumentUri:a,errorCodes:v};return o.language(e||"en"),o}Object.keys||(Object.keys=function(){var e=Object.prototype.hasOwnProperty,t=!{toString:null}.propertyIsEnumerable("toString"),r=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],n=r.length;return function(o){if("object"!=typeof o&&"function"!=typeof o||null===o)throw new TypeError("Object.keys called on non-object");var i=[];for(var a in o)e.call(o,a)&&i.push(a);if(t)for(var s=0;s<n;s++)e.call(o,r[s])&&i.push(r[s]);return i}}()),Object.create||(Object.create=function(){function e(){}return function(t){if(1!==arguments.length)throw new Error("Object.create implementation only accepts one parameter.");return e.prototype=t,new e}}()),Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){if(null===this)throw new TypeError;var t=Object(this),r=t.length>>>0;if(0===r)return-1;var n=0;if(arguments.length>1&&(n=Number(arguments[1]),n!==n?n=0:0!==n&&n!==1/0&&n!==-(1/0)&&(n=(n>0||-1)*Math.floor(Math.abs(n)))),n>=r)return-1;for(var o=n>=0?n:Math.max(r-Math.abs(n),0);o<r;o++)if(o in t&&t[o]===e)return o;return-1}),Object.isFrozen||(Object.isFrozen=function(e){for(var t="tv4_test_frozen_key";e.hasOwnProperty(t);)t+=Math.random();try{return e[t]=!0,delete e[t],!1}catch(r){return!0}});var d={"+":!0,"#":!0,".":!0,"/":!0,";":!0,"?":!0,"&":!0},p={"*":!0};r.prototype={toString:function(){return this.template},fillFromObject:function(e){return this.fill(function(t){return e[t]})}};var h=function(e,t,r,n,o){if(this.missing=[],this.missingMap={},this.formatValidators=e?Object.create(e.formatValidators):{},this.schemas=e?Object.create(e.schemas):{},this.collectMultiple=t,this.errors=[],this.handleError=t?this.collectError:this.returnError,n&&(this.checkRecursive=!0,this.scanned=[],this.scannedFrozen=[],this.scannedFrozenSchemas=[],this.scannedFrozenValidationErrors=[],this.validatedSchemasKey="tv4_validation_id",this.validationErrorsKey="tv4_validation_errors_id"),o&&(this.trackUnknownProperties=!0,this.knownPropertyPaths={},this.unknownPropertyPaths={}),this.errorReporter=r||u("en"),"string"==typeof this.errorReporter)throw new Error("debug");if(this.definedKeywords={},e)for(var i in e.definedKeywords)this.definedKeywords[i]=e.definedKeywords[i].slice(0)};h.prototype.defineKeyword=function(e,t){this.definedKeywords[e]=this.definedKeywords[e]||[],this.definedKeywords[e].push(t)},h.prototype.createError=function(e,t,r,n,o,i,a){var s=new c(e,t,r,n,o);return s.message=this.errorReporter(s,i,a),s},h.prototype.returnError=function(e){return e},h.prototype.collectError=function(e){return e&&this.errors.push(e),null},h.prototype.prefixErrors=function(e,t,r){for(var n=e;n<this.errors.length;n++)this.errors[n]=this.errors[n].prefixWith(t,r);return this},h.prototype.banUnknownProperties=function(e,t){for(var r in this.unknownPropertyPaths){var n=this.createError(v.UNKNOWN_PROPERTY,{path:r},r,"",null,e,t),o=this.handleError(n);if(o)return o}return null},h.prototype.addFormat=function(e,t){if("object"==typeof e){for(var r in e)this.addFormat(r,e[r]);return this}this.formatValidators[e]=t},h.prototype.resolveRefs=function(e,t){if(void 0!==e.$ref){if(t=t||{},t[e.$ref])return this.createError(v.CIRCULAR_REFERENCE,{urls:Object.keys(t).join(", ")},"","",null,void 0,e);t[e.$ref]=!0,e=this.getSchema(e.$ref,t)}return e},h.prototype.getSchema=function(e,t){var r;if(void 0!==this.schemas[e])return r=this.schemas[e],this.resolveRefs(r,t);var n=e,o="";if(e.indexOf("#")!==-1&&(o=e.substring(e.indexOf("#")+1),n=e.substring(0,e.indexOf("#"))),"object"==typeof this.schemas[n]){r=this.schemas[n];var i=decodeURIComponent(o);if(""===i)return this.resolveRefs(r,t);if("/"!==i.charAt(0))return;for(var a=i.split("/").slice(1),s=0;s<a.length;s++){var u=a[s].replace(/~1/g,"/").replace(/~0/g,"~");if(void 0===r[u]){r=void 0;break}r=r[u]}if(void 0!==r)return this.resolveRefs(r,t)}void 0===this.missing[n]&&(this.missing.push(n),this.missing[n]=n,this.missingMap[n]=n)},h.prototype.searchSchemas=function(e,t){if(Array.isArray(e))for(var r=0;r<e.length;r++)this.searchSchemas(e[r],t);else if(e&&"object"==typeof e){"string"==typeof e.id&&l(t,e.id)&&void 0===this.schemas[e.id]&&(this.schemas[e.id]=e);for(var n in e)if("enum"!==n)if("object"==typeof e[n])this.searchSchemas(e[n],t);else if("$ref"===n){var o=a(e[n]);o&&void 0===this.schemas[o]&&void 0===this.missingMap[o]&&(this.missingMap[o]=o)}}},h.prototype.addSchema=function(e,t){if("string"!=typeof e||"undefined"==typeof t){if("object"!=typeof e||"string"!=typeof e.id)return;t=e,e=t.id}e===a(e)+"#"&&(e=a(e)),this.schemas[e]=t,delete this.missingMap[e],s(t,e),this.searchSchemas(t,e)},h.prototype.getSchemaMap=function(){var e={};for(var t in this.schemas)e[t]=this.schemas[t];return e},h.prototype.getSchemaUris=function(e){var t=[];for(var r in this.schemas)e&&!e.test(r)||t.push(r);return t},h.prototype.getMissingUris=function(e){var t=[];for(var r in this.missingMap)e&&!e.test(r)||t.push(r);return t},h.prototype.dropSchemas=function(){this.schemas={},this.reset()},h.prototype.reset=function(){this.missing=[],this.missingMap={},this.errors=[]},h.prototype.validateAll=function(e,t,r,n,o){var i;if(t=this.resolveRefs(t),!t)return null;if(t instanceof c)return this.errors.push(t),t;var a,s=this.errors.length,u=null,l=null;if(this.checkRecursive&&e&&"object"==typeof e){if(i=!this.scanned.length,e[this.validatedSchemasKey]){var f=e[this.validatedSchemasKey].indexOf(t);if(f!==-1)return this.errors=this.errors.concat(e[this.validationErrorsKey][f]),null}if(Object.isFrozen(e)&&(a=this.scannedFrozen.indexOf(e),a!==-1)){var d=this.scannedFrozenSchemas[a].indexOf(t);if(d!==-1)return this.errors=this.errors.concat(this.scannedFrozenValidationErrors[a][d]),null}if(this.scanned.push(e),Object.isFrozen(e))a===-1&&(a=this.scannedFrozen.length,this.scannedFrozen.push(e),this.scannedFrozenSchemas.push([])),u=this.scannedFrozenSchemas[a].length,this.scannedFrozenSchemas[a][u]=t,this.scannedFrozenValidationErrors[a][u]=[];else{if(!e[this.validatedSchemasKey])try{Object.defineProperty(e,this.validatedSchemasKey,{value:[],configurable:!0}),Object.defineProperty(e,this.validationErrorsKey,{value:[],configurable:!0})}catch(p){e[this.validatedSchemasKey]=[],e[this.validationErrorsKey]=[]}l=e[this.validatedSchemasKey].length,e[this.validatedSchemasKey][l]=t,e[this.validationErrorsKey][l]=[]}}var h=this.errors.length,y=this.validateBasic(e,t,o)||this.validateNumeric(e,t,o)||this.validateString(e,t,o)||this.validateArray(e,t,o)||this.validateObject(e,t,o)||this.validateCombinations(e,t,o)||this.validateHypermedia(e,t,o)||this.validateFormat(e,t,o)||this.validateDefinedKeywords(e,t,o)||null;if(i){for(;this.scanned.length;){var m=this.scanned.pop();delete m[this.validatedSchemasKey]}this.scannedFrozen=[],this.scannedFrozenSchemas=[]}if(y||h!==this.errors.length)for(;r&&r.length||n&&n.length;){var v=r&&r.length?""+r.pop():null,_=n&&n.length?""+n.pop():null;y&&(y=y.prefixWith(v,_)),this.prefixErrors(h,v,_)}return null!==u?this.scannedFrozenValidationErrors[a][u]=this.errors.slice(s):null!==l&&(e[this.validationErrorsKey][l]=this.errors.slice(s)),this.handleError(y)},h.prototype.validateFormat=function(e,t){if("string"!=typeof t.format||!this.formatValidators[t.format])return null;var r=this.formatValidators[t.format].call(null,e,t);return"string"==typeof r||"number"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r},"","/format",null,e,t):r&&"object"==typeof r?this.createError(v.FORMAT_CUSTOM,{message:r.message||"?"},r.dataPath||"",r.schemaPath||"/format",null,e,t):null},h.prototype.validateDefinedKeywords=function(e,t,r){for(var n in this.definedKeywords)if("undefined"!=typeof t[n])for(var o=this.definedKeywords[n],i=0;i<o.length;i++){var a=o[i],s=a(e,t[n],t,r);if("string"==typeof s||"number"==typeof s)return this.createError(v.KEYWORD_CUSTOM,{key:n,message:s},"","",null,e,t).prefixWith(null,n);if(s&&"object"==typeof s){var u=s.code;if("string"==typeof u){if(!v[u])throw new Error("Undefined error code (use defineError): "+u);u=v[u]}else"number"!=typeof u&&(u=v.KEYWORD_CUSTOM);var c="object"==typeof s.message?s.message:{key:n,message:s.message||"?"},l=s.schemaPath||"/"+n.replace(/~/g,"~0").replace(/\//g,"~1");return this.createError(u,c,s.dataPath||null,l,null,e,t)}}return null},h.prototype.validateBasic=function(e,t,r){var n;return(n=this.validateType(e,t,r))?n.prefixWith(null,"type"):(n=this.validateEnum(e,t,r))?n.prefixWith(null,"type"):null},h.prototype.validateType=function(e,t){if(void 0===t.type)return null;var r=typeof e;null===e?r="null":Array.isArray(e)&&(r="array");var n=t.type;Array.isArray(n)||(n=[n]);for(var o=0;o<n.length;o++){var i=n[o];if(i===r||"integer"===i&&"number"===r&&e%1===0)return null}return this.createError(v.INVALID_TYPE,{type:r,expected:n.join("/")},"","",null,e,t)},h.prototype.validateEnum=function(e,t){if(void 0===t["enum"])return null;for(var r=0;r<t["enum"].length;r++){var o=t["enum"][r];if(n(e,o))return null}return this.createError(v.ENUM_MISMATCH,{value:"undefined"!=typeof JSON?JSON.stringify(e):e},"","",null,e,t)},h.prototype.validateNumeric=function(e,t,r){return this.validateMultipleOf(e,t,r)||this.validateMinMax(e,t,r)||this.validateNaN(e,t,r)||null};var y=Math.pow(2,-51),m=1-y;h.prototype.validateMultipleOf=function(e,t){var r=t.multipleOf||t.divisibleBy;if(void 0===r)return null;if("number"==typeof e){var n=e/r%1;if(n>=y&&n<m)return this.createError(v.NUMBER_MULTIPLE_OF,{value:e,multipleOf:r},"","",null,e,t)}return null},h.prototype.validateMinMax=function(e,t){if("number"!=typeof e)return null;if(void 0!==t.minimum){if(e<t.minimum)return this.createError(v.NUMBER_MINIMUM,{value:e,minimum:t.minimum},"","/minimum",null,e,t);if(t.exclusiveMinimum&&e===t.minimum)return this.createError(v.NUMBER_MINIMUM_EXCLUSIVE,{value:e,minimum:t.minimum},"","/exclusiveMinimum",null,e,t)}if(void 0!==t.maximum){if(e>t.maximum)return this.createError(v.NUMBER_MAXIMUM,{value:e,maximum:t.maximum},"","/maximum",null,e,t);if(t.exclusiveMaximum&&e===t.maximum)return this.createError(v.NUMBER_MAXIMUM_EXCLUSIVE,{value:e,maximum:t.maximum},"","/exclusiveMaximum",null,e,t)}return null},h.prototype.validateNaN=function(e,t){return"number"!=typeof e?null:isNaN(e)===!0||e===1/0||e===-(1/0)?this.createError(v.NUMBER_NOT_A_NUMBER,{value:e},"","/type",null,e,t):null},h.prototype.validateString=function(e,t,r){return this.validateStringLength(e,t,r)||this.validateStringPattern(e,t,r)||null},h.prototype.validateStringLength=function(e,t){return"string"!=typeof e?null:void 0!==t.minLength&&e.length<t.minLength?this.createError(v.STRING_LENGTH_SHORT,{length:e.length,minimum:t.minLength},"","/minLength",null,e,t):void 0!==t.maxLength&&e.length>t.maxLength?this.createError(v.STRING_LENGTH_LONG,{length:e.length,maximum:t.maxLength},"","/maxLength",null,e,t):null},h.prototype.validateStringPattern=function(e,t){if("string"!=typeof e||"string"!=typeof t.pattern&&!(t.pattern instanceof RegExp))return null;var r;if(t.pattern instanceof RegExp)r=t.pattern;else{var n,o="",i=t.pattern.match(/^\/(.+)\/([img]*)$/);i?(n=i[1],o=i[2]):n=t.pattern,r=new RegExp(n,o)}return r.test(e)?null:this.createError(v.STRING_PATTERN,{pattern:t.pattern},"","/pattern",null,e,t)},h.prototype.validateArray=function(e,t,r){return Array.isArray(e)?this.validateArrayLength(e,t,r)||this.validateArrayUniqueItems(e,t,r)||this.validateArrayItems(e,t,r)||null:null},h.prototype.validateArrayLength=function(e,t){var r;return void 0!==t.minItems&&e.length<t.minItems&&(r=this.createError(v.ARRAY_LENGTH_SHORT,{length:e.length,minimum:t.minItems},"","/minItems",null,e,t),this.handleError(r))?r:void 0!==t.maxItems&&e.length>t.maxItems&&(r=this.createError(v.ARRAY_LENGTH_LONG,{length:e.length,maximum:t.maxItems},"","/maxItems",null,e,t),this.handleError(r))?r:null},h.prototype.validateArrayUniqueItems=function(e,t){if(t.uniqueItems)for(var r=0;r<e.length;r++)for(var o=r+1;o<e.length;o++)if(n(e[r],e[o])){var i=this.createError(v.ARRAY_UNIQUE,{match1:r,match2:o},"","/uniqueItems",null,e,t);if(this.handleError(i))return i}return null},h.prototype.validateArrayItems=function(e,t,r){if(void 0===t.items)return null;var n,o;if(Array.isArray(t.items)){for(o=0;o<e.length;o++)if(o<t.items.length){if(n=this.validateAll(e[o],t.items[o],[o],["items",o],r+"/"+o))return n}else if(void 0!==t.additionalItems)if("boolean"==typeof t.additionalItems){if(!t.additionalItems&&(n=this.createError(v.ARRAY_ADDITIONAL_ITEMS,{},"/"+o,"/additionalItems",null,e,t),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalItems,[o],["additionalItems"],r+"/"+o))return n}else for(o=0;o<e.length;o++)if(n=this.validateAll(e[o],t.items,[o],["items"],r+"/"+o))return n;return null},h.prototype.validateObject=function(e,t,r){return"object"!=typeof e||null===e||Array.isArray(e)?null:this.validateObjectMinMaxProperties(e,t,r)||this.validateObjectRequiredProperties(e,t,r)||this.validateObjectProperties(e,t,r)||this.validateObjectDependencies(e,t,r)||null},h.prototype.validateObjectMinMaxProperties=function(e,t){var r,n=Object.keys(e);return void 0!==t.minProperties&&n.length<t.minProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MINIMUM,{propertyCount:n.length,minimum:t.minProperties},"","/minProperties",null,e,t),this.handleError(r))?r:void 0!==t.maxProperties&&n.length>t.maxProperties&&(r=this.createError(v.OBJECT_PROPERTIES_MAXIMUM,{propertyCount:n.length,maximum:t.maxProperties},"","/maxProperties",null,e,t),this.handleError(r))?r:null},h.prototype.validateObjectRequiredProperties=function(e,t){if(void 0!==t.required)for(var r=0;r<t.required.length;r++){var n=t.required[r];if(void 0===e[n]){var o=this.createError(v.OBJECT_REQUIRED,{key:n},"","/required/"+r,null,e,t);if(this.handleError(o))return o}}return null},h.prototype.validateObjectProperties=function(e,t,r){var n;for(var o in e){var i=r+"/"+o.replace(/~/g,"~0").replace(/\//g,"~1"),a=!1;if(void 0!==t.properties&&void 0!==t.properties[o]&&(a=!0,n=this.validateAll(e[o],t.properties[o],[o],["properties",o],i)))return n;if(void 0!==t.patternProperties)for(var s in t.patternProperties){var u=new RegExp(s);if(u.test(o)&&(a=!0,n=this.validateAll(e[o],t.patternProperties[s],[o],["patternProperties",s],i)))return n}if(a)this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]);else if(void 0!==t.additionalProperties){if(this.trackUnknownProperties&&(this.knownPropertyPaths[i]=!0,delete this.unknownPropertyPaths[i]),"boolean"==typeof t.additionalProperties){if(!t.additionalProperties&&(n=this.createError(v.OBJECT_ADDITIONAL_PROPERTIES,{key:o},"","/additionalProperties",null,e,t).prefixWith(o,null),this.handleError(n)))return n}else if(n=this.validateAll(e[o],t.additionalProperties,[o],["additionalProperties"],i))return n}else this.trackUnknownProperties&&!this.knownPropertyPaths[i]&&(this.unknownPropertyPaths[i]=!0)}return null},h.prototype.validateObjectDependencies=function(e,t,r){var n;if(void 0!==t.dependencies)for(var o in t.dependencies)if(void 0!==e[o]){var i=t.dependencies[o];if("string"==typeof i){if(void 0===e[i]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:i},"","",null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(Array.isArray(i))for(var a=0;a<i.length;a++){var s=i[a];if(void 0===e[s]&&(n=this.createError(v.OBJECT_DEPENDENCY_KEY,{key:o,missing:s},"","/"+a,null,e,t).prefixWith(null,o).prefixWith(null,"dependencies"),this.handleError(n)))return n}else if(n=this.validateAll(e,i,[],["dependencies",o],r))return n}return null},h.prototype.validateCombinations=function(e,t,r){return this.validateAllOf(e,t,r)||this.validateAnyOf(e,t,r)||this.validateOneOf(e,t,r)||this.validateNot(e,t,r)||null},h.prototype.validateAllOf=function(e,t,r){if(void 0===t.allOf)return null;for(var n,o=0;o<t.allOf.length;o++){var i=t.allOf[o];if(n=this.validateAll(e,i,[],["allOf",o],r))return n}return null},h.prototype.validateAnyOf=function(e,t,r){if(void 0===t.anyOf)return null;var n,o,i=[],a=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var s=!0,u=0;u<t.anyOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.anyOf[u],l=this.errors.length,f=this.validateAll(e,c,[],["anyOf",u],r);if(null===f&&l===this.errors.length){if(this.errors=this.errors.slice(0,a),this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var p in this.unknownPropertyPaths)o[p]||(n[p]=!0);s=!1;continue}return null}f&&i.push(f.prefixWith(null,""+u).prefixWith(null,"anyOf"))}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),s?(i=i.concat(this.errors.slice(a)),this.errors=this.errors.slice(0,a),this.createError(v.ANY_OF_MISSING,{},"","/anyOf",i,e,t)):void 0},h.prototype.validateOneOf=function(e,t,r){if(void 0===t.oneOf)return null;var n,o,i=null,a=[],s=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths);for(var u=0;u<t.oneOf.length;u++){this.trackUnknownProperties&&(this.unknownPropertyPaths={},this.knownPropertyPaths={});var c=t.oneOf[u],l=this.errors.length,f=this.validateAll(e,c,[],["oneOf",u],r);if(null===f&&l===this.errors.length){if(null!==i)return this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MULTIPLE,{index1:i,index2:u},"","/oneOf",null,e,t);if(i=u,this.trackUnknownProperties){for(var d in this.knownPropertyPaths)o[d]=!0,delete n[d];for(var p in this.unknownPropertyPaths)o[p]||(n[p]=!0)}}else f&&a.push(f)}return this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===i?(a=a.concat(this.errors.slice(s)),this.errors=this.errors.slice(0,s),this.createError(v.ONE_OF_MISSING,{},"","/oneOf",a,e,t)):(this.errors=this.errors.slice(0,s),null)},h.prototype.validateNot=function(e,t,r){if(void 0===t.not)return null;var n,o,i=this.errors.length;this.trackUnknownProperties&&(n=this.unknownPropertyPaths,o=this.knownPropertyPaths,this.unknownPropertyPaths={},this.knownPropertyPaths={});var a=this.validateAll(e,t.not,null,null,r),s=this.errors.slice(i);return this.errors=this.errors.slice(0,i),this.trackUnknownProperties&&(this.unknownPropertyPaths=n,this.knownPropertyPaths=o),null===a&&0===s.length?this.createError(v.NOT_PASSED,{},"","/not",null,e,t):null},h.prototype.validateHypermedia=function(e,t,n){if(!t.links)return null;for(var o,i=0;i<t.links.length;i++){var a=t.links[i];if("describedby"===a.rel){for(var s=new r(a.href),u=!0,c=0;c<s.varNames.length;c++)if(!(s.varNames[c]in e)){u=!1;break}if(u){var l=s.fillFromObject(e),f={$ref:l};if(o=this.validateAll(e,f,[],["links",i],n))return o}}}};var v={INVALID_TYPE:0,ENUM_MISMATCH:1,ANY_OF_MISSING:10,ONE_OF_MISSING:11,ONE_OF_MULTIPLE:12,NOT_PASSED:13,NUMBER_MULTIPLE_OF:100,NUMBER_MINIMUM:101,NUMBER_MINIMUM_EXCLUSIVE:102,NUMBER_MAXIMUM:103,NUMBER_MAXIMUM_EXCLUSIVE:104,NUMBER_NOT_A_NUMBER:105,STRING_LENGTH_SHORT:200,STRING_LENGTH_LONG:201,STRING_PATTERN:202,OBJECT_PROPERTIES_MINIMUM:300,OBJECT_PROPERTIES_MAXIMUM:301,OBJECT_REQUIRED:302,OBJECT_ADDITIONAL_PROPERTIES:303,OBJECT_DEPENDENCY_KEY:304,ARRAY_LENGTH_SHORT:400,ARRAY_LENGTH_LONG:401,ARRAY_UNIQUE:402,ARRAY_ADDITIONAL_ITEMS:403,FORMAT_CUSTOM:500,KEYWORD_CUSTOM:501,CIRCULAR_REFERENCE:600,UNKNOWN_PROPERTY:1e3},_={};for(var b in v)_[v[b]]=b;var g={INVALID_TYPE:"Invalid type: {type} (expected {expected})",ENUM_MISMATCH:"No enum match for: {value}",ANY_OF_MISSING:'Data does not match any schemas from "anyOf"',ONE_OF_MISSING:'Data does not match any schemas from "oneOf"',ONE_OF_MULTIPLE:'Data is valid against more than one schema from "oneOf": indices {index1} and {index2}',NOT_PASSED:'Data matches schema from "not"',NUMBER_MULTIPLE_OF:"Value {value} is not a multiple of {multipleOf}",NUMBER_MINIMUM:"Value {value} is less than minimum {minimum}",NUMBER_MINIMUM_EXCLUSIVE:"Value {value} is equal to exclusive minimum {minimum}",NUMBER_MAXIMUM:"Value {value} is greater than maximum {maximum}",NUMBER_MAXIMUM_EXCLUSIVE:"Value {value} is equal to exclusive maximum {maximum}",NUMBER_NOT_A_NUMBER:"Value {value} is not a valid number",STRING_LENGTH_SHORT:"String is too short ({length} chars), minimum {minimum}",STRING_LENGTH_LONG:"String is too long ({length} chars), maximum {maximum}",STRING_PATTERN:"String does not match pattern: {pattern}",OBJECT_PROPERTIES_MINIMUM:"Too few properties defined ({propertyCount}), minimum {minimum}",OBJECT_PROPERTIES_MAXIMUM:"Too many properties defined ({propertyCount}), maximum {maximum}",OBJECT_REQUIRED:"Missing required property: {key}",OBJECT_ADDITIONAL_PROPERTIES:"Additional properties not allowed",OBJECT_DEPENDENCY_KEY:"Dependency failed - key must exist: {missing} (due to key: {key})",ARRAY_LENGTH_SHORT:"Array is too short ({length}), minimum {minimum}",ARRAY_LENGTH_LONG:"Array is too long ({length}), maximum {maximum}",ARRAY_UNIQUE:"Array items are not unique (indices {match1} and {match2})",ARRAY_ADDITIONAL_ITEMS:"Additional items not allowed",FORMAT_CUSTOM:"Format validation failed ({message})",KEYWORD_CUSTOM:"Keyword failed: {key} ({message})",CIRCULAR_REFERENCE:"Circular $refs: {urls}",UNKNOWN_PROPERTY:"Unknown property (not in schema)"};c.prototype=Object.create(Error.prototype),c.prototype.constructor=c,c.prototype.name="ValidationError",c.prototype.prefixWith=function(e,t){if(null!==e&&(e=e.replace(/~/g,"~0").replace(/\//g,"~1"),this.dataPath="/"+e+this.dataPath),null!==t&&(t=t.replace(/~/g,"~0").replace(/\//g,"~1"),this.schemaPath="/"+t+this.schemaPath),null!==this.subErrors)for(var r=0;r<this.subErrors.length;r++)this.subErrors[r].prefixWith(e,t);return this};var E={},j=f();return j.addLanguage("en-gb",g),j.tv4=j,j})},{}],100:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.MessageFactory=void 0;var o=e("./message-factory/MessageFactory"),i=n(o);r.MessageFactory=i["default"]},{"./message-factory/MessageFactory":103}],101:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.MessageType=r.Message=void 0;
var o=e("babel-runtime/core-js/object/get-prototype-of"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("babel-runtime/helpers/possibleConstructorReturn"),f=n(l),d=e("babel-runtime/helpers/inherits"),p=n(d),h=e("../reTHINKObject/RethinkObject.js"),y=n(h),m=r.Message=function(e){function t(e,r,n,o,a){(0,s["default"])(this,t);var u=(0,f["default"])(this,(t.__proto__||(0,i["default"])(t)).call(this));return u.id=e,u.from=r,u.to=n,u.type=o,u.body=a,u}return(0,p["default"])(t,e),(0,c["default"])(t,[{key:"assertIdentity",value:function(e,t){if(!e||!t)throw new Error("message, token to be removed, and assertedIdentity must be provided");var r=this.body;return r.idToken=null,r.assertedIdentity=t,this.body=r,this}},{key:"addIdToken",value:function(e){if(!e)throw new Error("message, token to be added, must be provided");var t=this.body;return t.idToken=e,this.body=t,this}},{key:"addAccessToken",value:function(e){if(!e)throw new Error("message, token to be added, must be provided");var t=this.body;return t.accessToken=e,this.body=t,this}}]),t}(y["default"]);r.MessageType={CREATE:"create",READ:"read",UPDATE:"update",DELETE:"delete",SUBSCRIBE:"subscribe",UNSUBSCRIBE:"unsubscribe",RESPONSE:"response",FORWARD:"forward",EXECUTE:"execute"};r["default"]=m},{"../reTHINKObject/RethinkObject.js":104,"babel-runtime/core-js/object/get-prototype-of":5,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/helpers/inherits":12,"babel-runtime/helpers/possibleConstructorReturn":13}],102:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function o(e){var t=(0,u["default"])(e).reduce(function(t,r){return t[e[r]]=r,t},{});return(0,a["default"])((0,u["default"])(e).reduce(function(t,r){return t[r]=e[r],t},function(e){return t[e]}))}Object.defineProperty(r,"__esModule",{value:!0}),r.UPDATE_OPERATION=r.ATTRIBUTE_TYPE=r.REASON_PHRASE=r.RESPONSE_CODE=r.ExecuteMessageBody=r.ResponseMessageBody=r.ForwardMessageBody=r.UpdateMessageBody=r.DeleteMessageBody=r.ReadMessageBody=r.CreateMessageBody=r.MessageBody=void 0;var i=e("babel-runtime/core-js/object/freeze"),a=n(i),s=e("babel-runtime/core-js/object/keys"),u=n(s),c=e("babel-runtime/core-js/object/get-prototype-of"),l=n(c),f=e("babel-runtime/helpers/classCallCheck"),d=n(f),p=e("babel-runtime/helpers/createClass"),h=n(p),y=e("babel-runtime/helpers/possibleConstructorReturn"),m=n(y),v=e("babel-runtime/helpers/inherits"),_=n(v);r.Enum=o;var b=e("../reTHINKObject/RethinkObject.js"),g=n(b),E=r.MessageBody=function(e){function t(e,r,n,o,i){(0,d["default"])(this,t);var a=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this));return a.idToken=e,a.accessToken=r,a.resource=n,a.schema=o,a.assertedIdentity=i,a}return(0,_["default"])(t,e),(0,h["default"])(t,[{key:"addVia",value:function(e){if(!e)throw new Error("via URL to be added, must be provided");return this.via=e,this}}]),t}(g["default"]),j=(r.CreateMessageBody=function(e){function t(e,r,n,o,i,a,s){if((0,d["default"])(this,t),!e)throw new Error("The value parameter is null");var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,n,o,i,a,s,a,s));return u.value=e,r&&(u.policy=r),u}return(0,_["default"])(t,e),t}(E),r.ReadMessageBody=function(e){function t(e,r,n,o,i,a,s,u){(0,d["default"])(this,t);var c=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return a&&(c.attribute=a),s&&(c.criteriaSyntax=s),u&&(c.criteria=u),c}return(0,_["default"])(t,e),t}(E),r.DeleteMessageBody=function(e){function t(e,r,n,o,i,a){if((0,d["default"])(this,t),n instanceof Array){var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,null,o,i));s.childrenResources=n}else var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return a&&(s.attribute=a),(0,m["default"])(s)}return(0,_["default"])(t,e),t}(E),r.UpdateMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,d["default"])(this,t);var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return u.attribute=a,u.value=s,u}return(0,_["default"])(t,e),(0,h["default"])(t,[{key:"addAttributeType",value:function(e){e&&(this.attributeType=e)}},{key:"addOperation",value:function(e){e&&(this.operation=e)}}]),t}(E),r.ForwardMessageBody=function(e){function t(e,r,n,o,i,a){(0,d["default"])(this,t);var s=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return s.message=a,s}return(0,_["default"])(t,e),t}(E),r.ResponseMessageBody=function(e){function t(e,r,n,o,i){(0,d["default"])(this,t);var a=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n));return o&&(a.code=o,a.description=j[o]),i&&(a.value=i),a}return(0,_["default"])(t,e),t}(E),r.ExecuteMessageBody=function(e){function t(e,r,n,o,i,a,s){(0,d["default"])(this,t);var u=(0,m["default"])(this,(t.__proto__||(0,l["default"])(t)).call(this,e,r,n,o,i));return u.method=a,s&&(s instanceof Array?u.params=s:u.params=[s]),u}return(0,_["default"])(t,e),t}(E),r.RESPONSE_CODE=o({100:"100",101:"101",200:"200",201:"201",202:"202",203:"203",204:"204",205:"205",206:"206",300:"300",301:"301",302:"302",303:"303",304:"304",305:"305",307:"307",400:"400",401:"401",402:"402",403:"403",404:"404",405:"405",406:"406",407:"407",408:"408",409:"409",410:"410",411:"411",412:"412",413:"413",414:"414",415:"415",416:"416",417:"417",426:"426",500:"500",501:"501",502:"502",503:"503",504:"504",505:"505"}),r.REASON_PHRASE=o({100:"Continue",101:"Switching Protocols",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",300:"Multiple Choices",301:"Moved Permanently",302:"Found",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Timeout",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Payload Too Large",414:"Request-URI Too Long",415:"Unsupported Media Type",416:"Range Not Satisfiable",417:"Expectation Failed",426:"Upgrade Required",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported"}));r.ATTRIBUTE_TYPE=o({OBJECT:"OBJECT",ARRAY:"ARRAY"}),r.UPDATE_OPERATION=o({ADD:"ADD",REMOVE:"REMOVE"});r["default"]=E},{"../reTHINKObject/RethinkObject.js":104,"babel-runtime/core-js/object/freeze":4,"babel-runtime/core-js/object/get-prototype-of":5,"babel-runtime/core-js/object/keys":6,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/helpers/inherits":12,"babel-runtime/helpers/possibleConstructorReturn":13}],103:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.IdGenerator=void 0;var o=e("babel-runtime/regenerator"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("./Message.js"),f=n(l),d=e("./MessageBody.js"),p=function(){function e(){(0,s["default"])(this,e),this.myGenerator=(new h).idMaker()}return(0,c["default"])(e,[{key:"createCreateMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to, and value of object to be created MUST be specified");var o=this.myGenerator.next().value,i=new d.CreateMessageBody(r,n,(void 0),(void 0),(void 0),(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.CREATE,i);return a}},{key:"createForwardMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to, and message to forward MUST be specified");var n=this.myGenerator.next().value,o=new d.ForwardMessageBody((void 0),(void 0),(void 0),(void 0),(void 0),r),i=new f["default"](n,e,t,l.MessageType.FORWARD,o);return i}},{key:"createDeleteMessageRequest",value:function(e,t,r,n){if(!e||!t)throw new Error("from and to parameters MUST be specified");var o=this.myGenerator.next().value,i=new d.DeleteMessageBody((void 0),(void 0),r,n,(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.DELETE,i);return a}},{key:"createUpdateMessageRequest",value:function(e,t,r,n,o){if(!e||!t||!r)throw new Error("from, and to and value MUST be specified");var i=this.myGenerator.next().value,a=new d.UpdateMessageBody((void 0),(void 0),n,(void 0),(void 0),o,r),s=new f["default"](i,e,t,l.MessageType.UPDATE,a);return s}},{key:"createReadMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to and the resource to read from MUST be specified");var o=this.myGenerator.next().value,i=new d.ReadMessageBody((void 0),(void 0),r,(void 0),(void 0),n,(void 0),(void 0)),a=new f["default"](o,e,t,l.MessageType.READ,i);return a}},{key:"createSubscribeMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to and the resource to subscribe to MUST be specified");var n=this.myGenerator.next().value,o=new d.MessageBody((void 0),(void 0),r,(void 0),(void 0)),i=new f["default"](n,e,t,l.MessageType.SUBSCRIBE,o);return i}},{key:"createUnsubscribeMessageRequest",value:function(e,t,r){if(!e||!t||!r)throw new Error("from, to and the resource to subscribe to MUST be specified");var n=this.myGenerator.next().value,o=new d.MessageBody((void 0),(void 0),r,(void 0),(void 0)),i=new f["default"](n,e,t,l.MessageType.UNSUBSCRIBE,o);return i}},{key:"createExecuteMessageRequest",value:function(e,t,r,n){if(!e||!t||!r)throw new Error("from, to and the method to execute MUST be specified");var o=this.myGenerator.next().value,i=new d.ExecuteMessageBody((void 0),(void 0),(void 0),(void 0),(void 0),r,n),a=new f["default"](o,e,t,l.MessageType.EXECUTE,i);return a}},{key:"createMessageResponse",value:function(e,t,r,n){if(!t)throw new Error("response Code MUST be specified");var o=new d.ResponseMessageBody((void 0),(void 0),(void 0),t,r,n);return new f["default"](e.id,e.to,e.from,l.MessageType.RESPONSE,o)}},{key:"generateMessageResponse",value:function(e,t,r){if(!e||!t)throw new Error("message and response code MUST be specified");var n=e.body,o=n.idToken,i=n.accessToken,a=n.resource,s=new d.ResponseMessageBody(o,i,a,t,r),u=this.myGenerator.next().value;return new f["default"](u,e.to,e.from,l.MessageType.RESPONSE,s)}}]),e}(),h=r.IdGenerator=function(){function e(){(0,s["default"])(this,e)}return(0,c["default"])(e,[{key:"idMaker",value:i["default"].mark(function t(){var e;return i["default"].wrap(function(t){for(;;)switch(t.prev=t.next){case 0:e=1;case 1:if(!(e<1e6)){t.next=6;break}return t.next=4,e++;case 4:t.next=1;break;case 6:case"end":return t.stop()}},t,this)})}]),e}();r["default"]=p},{"./Message.js":101,"./MessageBody.js":102,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,"babel-runtime/regenerator":15}],104:[function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(r,"__esModule",{value:!0}),r.RethinkObject=void 0;var o=e("babel-runtime/core-js/json/stringify"),i=n(o),a=e("babel-runtime/helpers/classCallCheck"),s=n(a),u=e("babel-runtime/helpers/createClass"),c=n(u),l=e("tv4"),f=n(l),d=r.RethinkObject=function(){function e(){(0,s["default"])(this,e)}return(0,c["default"])(e,[{key:"validate",value:function(e){f["default"].addSchema(e.id,e);var t=f["default"].validateMultiple(JSON.parse((0,i["default"])(this)),e);return t.errors.forEach(function(e){delete e.stack}),(!t.valid||t.missing.length>0)&&(console.warn("Object validation "+(t.valid?"succeeded, but schema contained references:":"failed:"),(0,i["default"])(t,null,2)),console.log("Object:",(0,i["default"])(this,null,2))),t.valid}}]),e}();r["default"]=d},{"babel-runtime/core-js/json/stringify":1,"babel-runtime/helpers/classCallCheck":10,"babel-runtime/helpers/createClass":11,tv4:99}]},{},[100])(100)});


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],417:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
// import MessageFactory from '../../resources/MessageFactory';

/**
 * Class will ask to the message node for addresses
 */
var AddressAllocation = function () {
  /* private
  _url: URL
  _bus: MiniBus
  */

  /**
   * Create an Address Allocation
   * @param  {URL.URL}      url - url from who is sending the message
   * @param  {MiniBus}      bus - MiniBus used for address allocation
   */
  function AddressAllocation(url, bus, registry) {
    (0, _classCallCheck3.default)(this, AddressAllocation);

    var _this = this;

    // let messageFactory = new MessageFactory();
    //
    // _this._messageFactory = messageFactory;
    _this._url = url;
    _this._bus = bus;
    _this._registry = registry;
  }

  /**
   * get the URL value
   * @return {string} The url value;
   */


  (0, _createClass3.default)(AddressAllocation, [{
    key: 'create',


    /**
     * Ask for creation of a number of Hyperty addresses, to the domain message node.
     * @param  {Domain} domain - Domain of the message node.
     * @param  {number} number - Number of addresses to request
     * @returns {Promise<HypertyURL>}  A list of HypertyURL's
     */
    value: function create(domain, number, info, scheme, reuseURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        if (reuseURL) {

          _this._registry.checkRegisteredURLs(info).then(function (urls) {

            if (urls) {
              console.info('[AddressAllocation - ' + scheme + '] - Reuse URL');
              var value = { newAddress: false, address: urls };
              resolve(value);
            } else {
              console.info('[AddressAllocation - reuseURL] - Object ' + reuseURL + ' not found');
              reject('URL Not Found');
            }
          }).catch(function (reason) {
            reject(reason);
          });
        } else {

          _this._registry.checkRegisteredURLs(info).then(function (urls) {

            // if there is already a URL, then returns that URL, otherwise request a new URL
            if (urls) {

              console.info('[AddressAllocation - ' + scheme + '] - Reuse URL');
              var value = { newAddress: false, address: urls };
              resolve(value);
            } else {

              // if there is no URL saved request a new URL
              _this._allocateNewAddress(domain, scheme, number).then(function (allocated) {
                resolve(allocated);
              }).catch(function (reason) {
                reject(reason);
              });
            }
          }).catch(function (reason) {
            reject(reason);
          });
        }
      });
    }
  }, {
    key: '_allocateNewAddress',
    value: function _allocateNewAddress(domain, scheme, number) {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {

        var msg = {
          type: 'create', from: _this2._url, to: 'domain://msg-node.' + domain + '/address-allocation',
          body: { value: { number: number } }
        };

        if (scheme !== 'hyperty') msg.body.scheme = scheme;

        console.info('[AddressAllocation - ' + scheme + '] - Request new URL');

        // TODO: change this response Message using the MessageFactory
        _this2._bus.postMessage(msg, function (reply) {
          if (reply.body.code === 200) {
            var result = { newAddress: true, address: reply.body.value.allocated };
            resolve(result);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }

    /**
    * Send a request to the domain message node, to deallocate one or more addresses
    * @param  {Domain} domain - Domain of the message node.
    * @param  {addresses} addresses to request the deallocation
    * @returns {Promise}  the response by the message node
    */

  }, {
    key: 'delete',
    value: function _delete(domain, addresses) {
      var _this = this;

      var message = {
        type: 'delete', from: _this._url, to: 'domain://msg-node.' + domain + '/address-allocation',
        body: { childrenResources: addresses }
      };

      return new _promise2.default(function (resolve, reject) {

        _this._bus.postMessage(message, function (reply) {
          console.log('reply', reply);
          if (reply.body.code === 200) {
            resolve(reply.body.code);
          } else {
            reject(reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return AddressAllocation;
}();

exports.default = AddressAllocation;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],418:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author micaelpedrosa@gmail.com
* Minimal interface and implementation to send and receive messages. It can be reused in many type of components.
* Components that need a message system should receive this class as a dependency or extend it.
* Extensions should implement the following private methods: _onPostMessage and _registerExternalListener
*/
var Bus = function () {
  /* private
  _msgId: number;
  _subscriptions: <url: MsgListener[]>
    _responseTimeOut: number
  _responseCallbacks: <url+id: (msg) => void>
    */

  function Bus() {
    (0, _classCallCheck3.default)(this, Bus);

    var _this = this;
    _this._msgId = 0;
    _this._subscriptions = {};

    _this._responseTimeOut = 5000; //default to 3s
    _this._responseCallbacks = {};

    _this._registerExternalListener();
  }

  /**
  * Register listener to receive message when "msg.to === url".
  * Special url "*" for default listener is accepted to intercept all messages.
  * @param {URL} url Address to intercept, tha is in the message "to"
  * @param {Listener} listener listener
  * @return {MsgListener} instance of MsgListener
  */


  (0, _createClass3.default)(Bus, [{
    key: 'addListener',
    value: function addListener(url, listener) {
      var _this = this;

      var item = new MsgListener(_this._subscriptions, url, listener);
      var itemList = _this._subscriptions[url];
      if (!itemList) {
        itemList = [];
        _this._subscriptions[url] = itemList;
      }

      itemList.push(item);
      return item;
    }

    /**
     * Manually add a response listener. Only one listener per message ID should exist.
     * ATENTION, there is no timeout for this listener.
     * The listener should be removed with a removeResponseListener, failing to do this will result in a unreleased memory problem.
     * @param {URL} url Origin address of the message sent, "msg.from".
     * @param {number} msgId Message ID that is returned from the postMessage.
     * @param {Function} responseListener Callback function for the response
     */

  }, {
    key: 'addResponseListener',
    value: function addResponseListener(url, msgId, responseListener) {
      this._responseCallbacks[url + msgId] = responseListener;
    }

    /**
     * Remove the response listener.
     * @param {URL} url Origin address of the message sent, "msg.from".
     * @param {number} msgId  Message ID that is returned from the postMessage
     */

  }, {
    key: 'removeResponseListener',
    value: function removeResponseListener(url, msgId) {
      delete this._responseCallbacks[url + msgId];
    }

    /**
     * Remove all existent listeners for the URL
     * @param  {URL} url Address registered
     */

  }, {
    key: 'removeAllListenersOf',
    value: function removeAllListenersOf(url) {
      delete this._subscriptions[url];
    }

    /**
     * Helper method to bind listeners (in both directions) into other MiniBus target.
     * @param  {URL} outUrl Outbound URL, register listener for url in direction "this -> target"
     * @param  {URL} inUrl Inbound URL, register listener for url in direction "target -> this"
     * @param  {MiniBus} target The other target MiniBus
     * @return {Bound} an object that contains the properties [thisListener, targetListener] and the unbind method.
     */

  }, {
    key: 'bind',
    value: function bind(outUrl, inUrl, target) {
      var _this2 = this;

      var _this = this;

      var thisListn = _this.addListener(outUrl, function (msg) {
        target.postMessage(msg);
      });

      var targetListn = target.addListener(inUrl, function (msg) {
        _this.postMessage(msg);
      });

      return {
        thisListener: thisListn,
        targetListener: targetListn,
        unbind: function unbind() {
          _this2.thisListener.remove();
          _this2.targetListener.remove();
        }
      };
    }

    //publish on default listeners

  }, {
    key: '_publishOnDefault',
    value: function _publishOnDefault(msg) {
      //is there any "*" (default) listeners?
      var itemList = this._subscriptions['*'];
      if (itemList) {
        this._publishOn(itemList, msg);
      }
    }

    //publish on a subscription list.

  }, {
    key: '_publishOn',
    value: function _publishOn(itemList, msg) {
      itemList.forEach(function (sub) {
        sub._callback(msg);
      });
    }
  }, {
    key: '_responseCallback',
    value: function _responseCallback(inMsg, responseCallback) {
      var _this = this;

      //automatic management of response handlers
      if (responseCallback) {
        (function () {
          var responseId = inMsg.from + inMsg.id;
          _this._responseCallbacks[responseId] = responseCallback;

          setTimeout(function () {
            var responseFun = _this._responseCallbacks[responseId];
            delete _this._responseCallbacks[responseId];

            if (responseFun) {
              var errorMsg = {
                id: inMsg.id, type: 'response',
                body: { code: 408, desc: 'Response timeout!', value: inMsg }
              };

              responseFun(errorMsg);
            }
          }, _this._responseTimeOut);
        })();
      }
    }
  }, {
    key: '_onResponse',
    value: function _onResponse(msg) {
      var _this = this;

      if (msg.type === 'response') {
        var responseId = msg.to + msg.id;
        var responseFun = _this._responseCallbacks[responseId];

        //if it's a provisional response, don't delete response listener
        if (msg.body.code >= 200) {
          delete _this._responseCallbacks[responseId];
        }

        if (responseFun) {
          responseFun(msg);
          return true;
        }
      }

      return false;
    }

    //receive messages from external interface

  }, {
    key: '_onMessage',
    value: function _onMessage(msg) {
      var _this = this;

      if (!_this._onResponse(msg)) {
        var itemList = _this._subscriptions[msg.to];
        if (itemList) {
          _this._publishOn(itemList, msg);
        } else {
          _this._publishOnDefault(msg);
        }
      }
    }
  }, {
    key: '_genId',
    value: function _genId(inMsg) {
      //TODO: how do we manage message ID's? Should it be a global runtime counter, or per URL address?
      //Global counter will not work, because there will be multiple MiniBus instances!
      //Per URL, can be a lot of data to maintain!
      //Maybe a counter per MiniBus instance. This is the assumed solution for now.
      if (!inMsg.id || inMsg.id === 0) {
        this._msgId++;
        inMsg.id = this._msgId;
      }
    }

    /**
    * Send messages to local listeners, or if not exists to external listeners.
    * It's has an optional mechanism for automatic management of response handlers.
    * The response handler will be unregistered after receiving the response, or after response timeout (default to 3s).
    * @param  {Message} msg Message to send. Message ID is automatically added to the message.
    * @param  {Function} responseCallback Optional parameter, if the developer what's automatic response management.
    * @return {number} Returns the message ID, in case it should be needed for manual management of the response handler.
    */

  }, {
    key: 'postMessage',
    value: function postMessage(inMsg, responseCallback) {}

    /**
     * Not public available, used by the class extension implementation, to process messages from the public "postMessage" without a registered listener.
     * Used to send the message to an external interface, like a WebWorker, IFrame, etc.
     * @param  {Message.Message} msg Message
     */

  }, {
    key: '_onPostMessage',
    value: function _onPostMessage(msg) {} /*implementation will send message to external system*/

    /**
     * Not public available, used by the class extension implementation, to process all messages that enter the MiniBus from an external interface, like a WebWorker, IFrame, etc.
     * This method is called one time in the constructor to register external listeners.
     * The implementation will probably call the "_onMessage" method to publish in the local listeners.
     * DO NOT call "postMessage", there is a danger that the message enters in a cycle!
     */

  }, {
    key: '_registerExternalListener',
    value: function _registerExternalListener() {/*implementation will register external listener and call "this._onMessage(msg)" */}
  }]);
  return Bus;
}();

var MsgListener = function () {
  /* private
  _subscriptions: <string: MsgListener[]>;
  _url: string;
  _callback: (msg) => void;
  */

  function MsgListener(subscriptions, url, callback) {
    (0, _classCallCheck3.default)(this, MsgListener);

    var _this = this;

    _this._subscriptions = subscriptions;
    _this._url = url;
    _this._callback = callback;
  }

  (0, _createClass3.default)(MsgListener, [{
    key: 'remove',


    /**
     * Remove this listener from the Bus
     */
    value: function remove() {
      var _this = this;

      var subs = _this._subscriptions[_this._url];
      if (subs) {
        var index = subs.indexOf(_this);
        subs.splice(index, 1);

        //if there are no listeners, remove the subscription entirely.
        if (subs.length === 0) {
          delete _this._subscriptions[_this._url];
        }
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return MsgListener;
}();

exports.default = Bus;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],419:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Bus2 = require('./Bus');

var _Bus3 = _interopRequireDefault(_Bus2);

var _Pipeline = require('./Pipeline');

var _Pipeline2 = _interopRequireDefault(_Pipeline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author micaelpedrosa@gmail.com
* Message BUS Interface is an extension of the Bus
* It doesn't support the default '*' listener, instead it uses the registry.resolve(..)
*/
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var MessageBus = function (_Bus) {
  (0, _inherits3.default)(MessageBus, _Bus);

  /* private
  _registry: Registry
  _forwards: { <from-url>: { fl: MsgListener, sandboxToUrls: Map(Sandbox, [to-url]), urlToSandbox: { to-url: Sandbox } } }
    _pipeline: Pipeline
  */

  //TODO: future optimization
  //1. message batch processing with setInterval
  //2. resolve default gateway/protostub with register.resolve

  function MessageBus(registry) {
    (0, _classCallCheck3.default)(this, MessageBus);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (MessageBus.__proto__ || (0, _getPrototypeOf2.default)(MessageBus)).call(this));

    _this2._registry = registry;
    _this2._forwards = {};

    _this2._pipeline = new _Pipeline2.default(function (error) {
      console.log('PIPELINE-ERROR: ', (0, _stringify2.default)(error));
    });
    return _this2;
  }

  (0, _createClass3.default)(MessageBus, [{
    key: 'postMessage',


    /**
     * Post a message for routing. It will first search for a listener, if there is no one, it sends to a external routing using the _onPostMessage.
     * External routing use the registry.resolve(..) method to decide the destination sandbox.
     * @param  {Message} inMsg            JSON with mandatory Message structure {id, type, from, to}
     * @param  {Callback} responseCallback Optional callback if a response is expected from the request. A response will be always sent, even if it is a "Timeout".
     * @return {number}                  the Message id
     */
    value: function postMessage(inMsg, responseCallback) {
      console.log('onPOSTMessage: ', inMsg);
      var _this = this;

      _this._genId(inMsg);

      _this._pipeline.process(inMsg, function (msg) {

        _this._responseCallback(inMsg, responseCallback);

        if (!_this._onResponse(msg)) {
          var itemList = _this._subscriptions[msg.to];
          if (itemList) {
            //do not publish on default address, because of loopback cycle
            _this._publishOn(itemList, msg);
          } else {
            //if there is no listener, send to external interface
            _this._onPostMessage(msg);
          }
        }
      });

      return inMsg.id;
    }

    /**
     * Adds an external publish address listener. Every message for the address will be forwarded to the external routing by _onPostMessage.
     * This means, even if there is a listener for the address, it will also send the message to the external routing.
     * @param {URL} from Publish address.
     */

  }, {
    key: 'addPublish',
    value: function addPublish(from) {
      var _this3 = this;

      var _this = this;

      //verify if forward exist
      var refCount = _this._forwards[from];
      if (!refCount) {
        var forwardListener = _this.addListener(from, function (msg) {
          console.log('MB-PUBLISH: ( ' + from + ' )');
          _this._onPostMessage(msg);
        });

        refCount = {
          counter: 0,
          fl: forwardListener,
          remove: function remove() {
            _this3.counter--;
            if (_this3.counter === 0) {
              _this3.fl.remove();
              delete _this._forwards[from];
            }
          }
        };

        _this._forwards[from] = refCount;
      }

      refCount.counter++;
      return refCount;
    }

    /**
     * Adds a forward listener for a message destination. Every message reaching an address will be also sent to the forward address.
     * @param {URL} from Message destination, it's actually the field "to" of the message.
     * @param {URL} to   Forward address.
     */

  }, {
    key: 'addForward',
    value: function addForward(from, to) {
      var _this = this;

      return _this.addListener(from, function (msg) {
        console.log('MB-FORWARD: ( ' + from + ' to ' + to + ' )');
        _this.forward(to, msg);
      });
    }

    /**
     * Just forward's a message to the forward address. Listeners should be available for the forward address.
     * @param  {URL} url Forward address.
     * @param  {Message} msg Message to forward
     */

  }, {
    key: 'forward',
    value: function forward(url, msg) {
      var _this = this;

      var itemList = _this._subscriptions[url];
      if (itemList) {
        _this._publishOn(itemList, msg);
      }
    }

    //default route, if there are no listeners available for a message destination.

  }, {
    key: '_onPostMessage',
    value: function _onPostMessage(msg) {
      var _this = this;

      //resolve external protostub...
      _this._registry.resolve(msg.to).then(function (route) {
        _this.forward(route, msg);
      }).catch(function (e) {
        console.log('RESOLVE-ERROR: ', e);
      });
    }
  }, {
    key: 'pipeline',
    get: function get() {
      return this._pipeline;
    }
  }]);
  return MessageBus;
}(_Bus3.default);

exports.default = MessageBus;
module.exports = exports['default'];

},{"./Bus":418,"./Pipeline":420,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],420:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author micaelpedrosa@gmail.com
* Sequencial processor of methods. Similar to how Sequential Promise's work, but better fit for message processing.
* Normal use for this, is to intercept all messages with configured handlers, and act accordingly.
*/
var Pipeline = function () {
  /* public
    handlers: ((PipeContext) => void)[]
    onFail: (error) => void
  */

  function Pipeline(_onFail) {
    (0, _classCallCheck3.default)(this, Pipeline);

    var _this = this;

    _this.handlers = [];
    _this.onFail = _onFail;
  }

  /**
   * Insert a message in the pipeline queue. All messages are wrapped with a PipeContext.
   * @param  {Message} msg       Message for the queue
   * @param  {Callback} onDeliver When message is finished processing from all handlers, it will be delivered in this callback.
   */


  (0, _createClass3.default)(Pipeline, [{
    key: "process",
    value: function process(msg, onDeliver) {
      var _this = this;

      if (_this.handlers.length > 0) {
        var iter = new Iterator(_this.handlers);
        iter.next(new PipeContext(_this, iter, msg, onDeliver));
      } else {
        onDeliver(msg);
      }
    }
  }]);
  return Pipeline;
}();

/**
* @author micaelpedrosa@gmail.com
* Wrapper around a message that adds actions that can be fired by any interceptor handler.
* The Pipeline is asynchronous, so an handler should always call an action, the default one is "next()"
*/


var PipeContext = function () {
  /* private
    _inStop: boolean
      _pipeline: Pipeline
    _iter: Iterator
    _msg: Message
  */

  function PipeContext(pipeline, iter, msg, onDeliver) {
    (0, _classCallCheck3.default)(this, PipeContext);

    var _this = this;

    _this._inStop = false;

    _this._pipeline = pipeline;
    _this._iter = iter;
    _this._msg = msg;
    _this._onDeliver = onDeliver;
  }

  (0, _createClass3.default)(PipeContext, [{
    key: "next",


    /**
     * Proceed to the next interceptor handler, unless there was an error. If it's the last one, proceed to onDeliver handler.
     */
    value: function next() {
      var _this = this;

      if (!_this._inStop) {
        if (_this._iter.hasNext) {
          _this._iter.next(_this);
        } else {
          _this._onDeliver(_this._msg);
        }
      }
    }

    /**
     * Proceed directly to the onDeliver handler, unless there was an error.
     */

  }, {
    key: "deliver",
    value: function deliver() {
      var _this = this;
      if (!_this._inStop) {
        _this._inStop = true;
        _this._onDeliver(_this._msg);
      }
    }

    /**
     * Mark the context with an error and proceed to the onFail handler.
     * @param  {[type]} error [description]
     */

  }, {
    key: "fail",
    value: function fail(error) {
      var _this = this;

      if (!_this._inStop) {
        _this._inStop = true;
        if (_this._pipeline.onFail) {
          _this._pipeline.onFail(error);
        }
      }
    }
  }, {
    key: "pipeline",
    get: function get() {
      return this._pipeline;
    }
  }, {
    key: "msg",
    get: function get() {
      return this._msg;
    },
    set: function set(inMsg) {
      this._msg = inMsg;
    }
  }]);
  return PipeContext;
}();

var Iterator = function () {
  /* private
    _index: number
    _array: []
  */

  function Iterator(array) {
    (0, _classCallCheck3.default)(this, Iterator);

    this._index = -1;
    this._array = array;
  }

  (0, _createClass3.default)(Iterator, [{
    key: "hasNext",
    get: function get() {
      return this._index < this._array.length - 1;
    }
  }, {
    key: "next",
    get: function get() {
      this._index++;
      return this._array[this._index];
    }
  }]);
  return Iterator;
}();

exports.default = Pipeline;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],421:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Class with the cryptographic functions for the authentication protocol
*
*/
var Crypto = function () {
  function Crypto() {
    (0, _classCallCheck3.default)(this, Crypto);

    var _this = this;
  }

  /**
  * encode a byteArray value in base 64 encode
  * @param   {byteArray}    value    byteArray value
  * @return  {string}   encoded value
  */


  (0, _createClass3.default)(Crypto, [{
    key: 'encode',
    value: function encode(value) {
      return btoa(value);
    }

    /**
    * decode a base64 value in a new Uint8Array
    * @param   {string}    value    value encoded in base 64
    * @return  {byteArray} decodedValue
    */

  }, {
    key: 'decode',
    value: function decode(value) {
      return new Uint8Array(JSON.parse('[' + atob(value) + ']'));
    }
  }, {
    key: 'encryptRSA',
    value: function encryptRSA(pubKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAencryptKey(new Uint8Array(pubKey)).then(function (publicKey) {

          crypto.subtle.encrypt({
            name: 'RSA-OAEP'
          }, publicKey, //from generateKey or importKey above
          data //ArrayBuffer of data you want to encrypt
          ).then(function (encrypted) {
            //returns an ArrayBuffer containing the encrypted data
            //console.log('crypto-encryptRSA', new Uint8Array(encrypted));
            resolve(new Uint8Array(encrypted));
          }).catch(function (err) {
            console.log('crypto-encryptRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'decryptRSA',
    value: function decryptRSA(privKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAdecryptKey(privKey).then(function (privateKey) {

          crypto.subtle.decrypt({
            name: 'RSA-OAEP'
          }, privateKey, //from generateKey or importKey above
          data //ArrayBuffer of the data
          ).then(function (decrypted) {

            var decryptedData = new Uint8Array(decrypted);

            //console.log('crypto-decryptRSA', decryptedData);
            resolve(decryptedData);
          }).catch(function (err) {
            console.log('crypto-decryptRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'signRSA',
    value: function signRSA(privKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAsignKey(privKey).then(function (privateKey) {

          crypto.subtle.sign({
            name: 'RSASSA-PKCS1-v1_5'
          }, privateKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to sign
          ).then(function (signature) {
            //returns an ArrayBuffer containing the signature
            //console.log('crypto-signRSA', new Uint8Array(signature));
            resolve(new Uint8Array(signature));
          }).catch(function (err) {
            console.log('crypto-signRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'verifyRSA',
    value: function verifyRSA(pubKey, data, signature) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importRSAverifyKey(pubKey).then(function (publicKey) {

          crypto.subtle.verify({
            name: 'RSASSA-PKCS1-v1_5'
          }, publicKey, //from generateKey or importKey above
          signature, //ArrayBuffer of the signature
          _this._utf8Encode(data) //ArrayBuffer of the data
          ).then(function (isvalid) {
            //returns a boolean on whether the signature is true or not
            //console.log('crypto-verifyRSA', isvalid);
            resolve(isvalid);
          }).catch(function (err) {
            console.log('crypto-verifyRSA', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'encryptAES',
    value: function encryptAES(key, data, iv) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importAESkey(key).then(function (aesKey) {

          crypto.subtle.encrypt({
            name: 'AES-CBC',
            //Don't re-use initialization vectors!
            //Always generate a new iv every time your encrypt!
            iv: iv
          }, aesKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to encrypt
          ).then(function (encrypted) {
            //returns an ArrayBuffer containing the encrypted data
            //console.log('crypto-encryptAES', new Uint8Array(encrypted));
            resolve(new Uint8Array(encrypted));
          }).catch(function (err) {
            console.log('crypto-encryptAES', err);
            reject(err);
          });
        });
      });
    }
  }, {
    key: 'decryptAES',
    value: function decryptAES(key, data, iv) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this._importAESkey(key).then(function (aesKey) {

          crypto.subtle.decrypt({
            name: 'AES-CBC',
            iv: iv
          }, aesKey, //from generateKey or importKey above
          data //ArrayBuffer of the data
          ).then(function (decrypted) {

            var decodedData = _this._utf8Decode(new Uint8Array(decrypted));
            //console.log('crypto-decryptAES', decodedData);
            resolve(decodedData);
          }).catch(function (err) {
            console.log('crypto-decryptAES', err);
            reject(err);
          });
        });
      });
    }

    /**
    * creates a hash using the HMAC algorithm
    * @param  {byteArray}    key       key to be used in the hmac
    * @param  {string}      data       information to be hashed
    * @return  {byteArray}   signature  resulting hash
    */

  }, {
    key: 'hashHMAC',
    value: function hashHMAC(key, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._importHMACkey(key).then(function (hmacKey) {

          crypto.subtle.sign({
            name: 'HMAC'
          }, hmacKey, //from generateKey or importKey above
          _this._utf8Encode(data) //ArrayBuffer of data you want to sign
          ).then(function (signature) {
            //console.log('crypto-hashHMAC', signature);

            //returns an ArrayBuffer containing the signature
            resolve(new Uint8Array(signature));
          }).catch(function (err) {
            console.log('crypto-hashHMAC', err);
            reject(err);
          });
        });
      });
    }

    /**
    * verifies an hash using the HMAC algorithm
    * @param  {byteArray}    key       key to be used in the hmac
    * @param  {string}      data       information to be hashed to compare
    * @param  {byteArray}  signature   hash to compare with the received data
    * @return  {boolean}   isvalid     boolean saying if the data corresponds to the hash received
    */

  }, {
    key: 'verifyHMAC',
    value: function verifyHMAC(key, data, signature) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._importHMACkey(key).then(function (hmacKey) {

          crypto.subtle.verify({
            name: 'HMAC'
          }, hmacKey, //from generateKey or importKey above
          signature, //ArrayBuffer of the signature
          _this._utf8Encode(data) //ArrayBuffer of the data
          ).then(function (isvalid) {
            //returns a boolean on whether the signature is true or not
            //console.log('crypto-verifyHMAC', isvalid);
            isvalid ? resolve(isvalid) : reject(isvalid);
          }).catch(function (err) {
            console.error('crypto-verifyHMAC', err);
            reject(err);
          });
        });
      });
    }

    /**
    * generates a RSA public/private key pair with a modulus length of 2048 bits
    * @return  {JSON}   keyPair    json containing the public and private keys
    */

  }, {
    key: 'generateRSAKeyPair',
    value: function generateRSAKeyPair() {
      var _this = this;
      var keyPair = {};

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.generateKey({
          name: 'RSA-PSS',
          modulusLength: 2048, //can be 1024, 2048, or 4096
          publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['sign', 'verify'] //can be any combination of 'sign' and 'verify'

        ).then(function (key) {
          //returns a keypair object
          //console.log(key);

          crypto.subtle.exportKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
          key.publicKey //can be a publicKey or privateKey, as long as extractable was true
          ).then(function (publicKey) {
            //returns the exported key data
            keyPair.public = new Uint8Array(publicKey);
            return crypto.subtle.exportKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
            key.privateKey //can be a publicKey or privateKey, as long as extractable was true
            );
          }).then(function (privateKey) {
            keyPair.private = new Uint8Array(privateKey);
            //console.log('crypto-generateRSAKeyPair', keyPair);

            resolve(keyPair);
          }).catch(function (err) {
            console.error(err);
            reject(err);
          });
        }).catch(function (err) {
          console.error(err);
          reject(err);
        });
      });
    }

    /**
    * Generates a 128 bit random value.
    * @return {byteArray}  array    random value
    */

  }, {
    key: 'generateIV',
    value: function generateIV() {
      var _this = this;

      var array = new Uint8Array(16);
      crypto.getRandomValues(array);

      return array;
    }

    /**
    * Generates a 256 bit random value. 32 bits are extrated from the machine time,
    * the remaining are generated randomly
    * @return {byteArray}  array    random value
    */

  }, {
    key: 'generateRandom',
    value: function generateRandom() {
      var _this = this;

      var array = new Uint8Array(32);
      crypto.getRandomValues(array);

      var date = Date.now();
      var dateEncoded = _this._utf8Encode(date);

      //extract the least significant 4 bytes in the date
      var finalDate = dateEncoded.slice(dateEncoded.length - 4, dateEncoded.length);

      // add in the first 4 bytes of the array the bytes extracted previously;
      for (var i = 0; i < 4; i++) {
        array[i] = finalDate[i];
      }
      return array;
    }

    /**
    * generates a premaster secret (PMS) of 48 bytes (384 bits) randomly
    * @return {byteArray}  array    premaster secret key
    */

  }, {
    key: 'generatePMS',
    value: function generatePMS() {
      var _this = this;

      var array = new Uint8Array(48);
      crypto.getRandomValues(array);
      return array;
    }

    /**
    * generates a masterKey secret (PMS) of 48 bytes (384 bits) using the premaster secret and
    * two randoms
    * @return {byteArray}  array    master secret key with 48 bytes
    */

  }, {
    key: 'generateMasterSecret',
    value: function generateMasterSecret(hmacKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var key = new Uint8Array(48);
        var seed = data;

        _this._digest(hmacKey).then(function (digestedKey) {

          _this.hashHMAC(digestedKey, seed).then(function (keypart0) {

            //copy the first 32 bytes into the key
            for (var i = 0; i < 32; i++) {
              key[i] = keypart0[i];
            }
            return _this.hashHMAC(digestedKey, seed + keypart0);
          }).then(function (keypart1) {

            //copy the first 16 bytes to the key remaining 16 bytes
            for (var i = 0; i < 16; i++) {
              key[i + 32] = keypart1[i];
            }
            //console.log('crypto-generateMasterSecret', key);
            resolve(key);
          }).catch(function (err) {
            console.log('crypto-generateMasterSecret', err);
            reject(err);
          });
        });
      });
    }

    /**
    * generates both users MAC and encryption keys. generate as output an array
    * with 4 byteArray each with 32 bytes
    * @param  {byteArray}        secret       secret to be used in the HMAC function
    * @param  {String}           data         information to be used as seed
    * @return {Array<byteArray>} key          array with the information to generate keys
    */

  }, {
    key: 'generateKeys',
    value: function generateKeys(hmacKey, data) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var key = [];
        var seed = data;

        // iterate 4 times to obtain a 1024 key size
        _this.hashHMAC(hmacKey, seed).then(function (keypart0) {
          key.push(keypart0);
          return _this.hashHMAC(hmacKey, seed + keypart0);
        }).then(function (keypart1) {
          key.push(keypart1);
          return _this.hashHMAC(hmacKey, seed + keypart1);
        }).then(function (keypart2) {
          key.push(keypart2);
          return _this.hashHMAC(hmacKey, seed + keypart2);
        }).then(function (keypart3) {
          key.push(keypart3);

          //console.log('crypto-generateKeys', key);
          resolve(key);
        }).catch(function (err) {
          //console.log('crypto-generateKeys', err);
          reject(err);
        });

        //console.log(hmacKey, data);
      });
    }
  }, {
    key: '_importRSAsignKey',
    value: function _importRSAsignKey(privKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        privKey, { //these are the algorithm options
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['sign'] //'verify' for public key import, 'sign' for private key imports
        ).then(function (privateKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAsignKey', privateKey);
          resolve(privateKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAsignKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAverifyKey',
    value: function _importRSAverifyKey(pubKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        pubKey, { //these are the algorithm options
          name: 'RSASSA-PKCS1-v1_5',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['verify'] //'verify' for public key import, 'sign' for private key imports
        ).then(function (publicKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAverifyKey', publicKey);
          resolve(publicKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAverifyKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAencryptKey',
    value: function _importRSAencryptKey(pubKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('spki', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        pubKey, { //these are the algorithm options
          name: 'RSA-OAEP',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['encrypt'] //'encrypt' or 'wrapKey' for public key import or
        //'decrypt' or 'unwrapKey' for private key imports
        ).then(function (publicKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAencryptKey', publicKey);
          resolve(publicKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAencryptKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importRSAdecryptKey',
    value: function _importRSAdecryptKey(privKey) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('pkcs8', //can be 'jwk' (public or private), 'spki' (public only), or 'pkcs8' (private only)
        privKey, { //these are the algorithm options
          name: 'RSA-OAEP',
          hash: { name: 'SHA-256' } //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['decrypt'] //'encrypt' or 'wrapKey' for public key import or
        //'decrypt' or 'unwrapKey' for private key imports
        ).then(function (privateKey) {
          //returns a publicKey (or privateKey if you are importing a private key)
          //console.log('crypto-_importRSAdecryptKey', privateKey);
          resolve(privateKey);
        }).catch(function (err) {
          console.error('crypto-_importRSAdecryptKey', err);
          reject(err);
        });
      });
    }
  }, {
    key: 'concatPMSwithRandoms',
    value: function concatPMSwithRandoms(pms, toRandom, fromRandom) {
      var _this = this;

      var finalKey = new Uint8Array(pms.length + toRandom.length + fromRandom.length);

      // add PremasterKey
      for (var i = 0; i < pms.length; i++) {
        finalKey[i] = pms[i];
      }

      //add to random
      for (var _i = 0; _i < toRandom.length; _i++) {
        finalKey[_i + pms.length] = pms[_i];
      }

      //add from random
      for (var _i2 = 0; _i2 < fromRandom.length; _i2++) {
        finalKey[_i2 + pms.length + toRandom.length] = pms[_i2];
      }

      return finalKey;
    }
  }, {
    key: '_generate256bitKey',
    value: function _generate256bitKey() {
      var array = new Uint8Array(32);
      crypto.getRandomValues(array);

      return array;
    }

    /**
    * imports the secret to the HMAC function
    * @param  {byteArray}   arrayBuffer     bytes to import as key
    * @return {JSON}       key              key ready to be used in the HMAC cryptographic function
    */

  }, {
    key: '_importHMACkey',
    value: function _importHMACkey(arrayBuffer) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this._digest(arrayBuffer).then(function (key) {

          crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'
          key, { //this is the algorithm options
            name: 'HMAC',
            hash: { name: 'SHA-256' }, //can be 'SHA-1', 'SHA-256', 'SHA-384', or 'SHA-512'
            length: 256 //optional, if you want your key length to differ from the hash function's block length
          }, true, //whether the key is extractable (i.e. can be used in exportKey)
          ['sign', 'verify'] //can be any combination of 'sign' and 'verify'
          ).then(function (key) {
            //returns the symmetric key
            //console.log('crypto-_importHMACkey', key);
            resolve(key);
          }).catch(function (err) {
            reject(err);
          });
        });
      });
    }
  }, {
    key: '_digest',
    value: function _digest(value) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.digest({
          name: 'SHA-256'
        }, value //The data you want to hash as an ArrayBuffer
        ).then(function (hash) {
          //returns the hash as an ArrayBuffer
          //console.log('crypto-digest', new Uint8Array(hash));
          resolve(new Uint8Array(hash));
        }).catch(function (err) {
          console.error(err);
          reject(err);
        });
      });
    }
  }, {
    key: '_importAESkey',
    value: function _importAESkey(arrayBuffer) {
      return new _promise2.default(function (resolve, reject) {
        crypto.subtle.importKey('raw', //can be 'jwk' or 'raw'
        arrayBuffer, { //this is the algorithm options
          name: 'AES-CBC'
        }, true, //whether the key is extractable (i.e. can be used in exportKey)
        ['encrypt', 'decrypt'] //can be 'encrypt', 'decrypt', 'wrapKey', or 'unwrapKey'
        ).then(function (key) {
          //returns the symmetric key
          //console.log('crypto-importAESkey', key);
          resolve(key);
        }).catch(function (err) {
          console.error('crypto-importAESkey', err);
          reject(err);
        });
      });
    }
  }, {
    key: '_utf8Encode',
    value: function _utf8Encode(s) {
      return new TextEncoder('utf-8').encode(s);
    }
  }, {
    key: '_utf8Decode',
    value: function _utf8Decode(s) {
      return new TextDecoder('utf-8').decode(s);
    }
  }]);
  return Crypto;
}();

exports.default = Crypto;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],422:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* fake class for the gui to select the identity,
* TODO replace with the proper identity GUI
*
*/
var GuiFake = function GuiFake(url, messageBus) {
  (0, _classCallCheck3.default)(this, GuiFake);

  var _this = this;

  _this._url = url;
  _this._waitTime = 10000;
  _this._messageBus = messageBus;

  _this._messageBus.addListener(_this._url, function (msg) {

    var identities = msg.body.value.identities;
    var idps = msg.body.value.idps;

    var value = void 0;

    if (identities[0] !== undefined) {
      value = { type: 'identity', value: identities[0], code: 200 };
    } else {
      value = { type: 'idp', value: idps[0].domain, code: 200 };
    }

    var replyMsg = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: value };

    // to test on the identity side the listener without the timeout
    // can represent the time the user takes to choose and identity
    if (msg.body.value === 'wait') {

      setTimeout(function () {
        _this._messageBus.postMessage(replyMsg);
      }, _this._waitTime);
    } else {
      _this._messageBus.postMessage(replyMsg);
    }
  });
};

exports.default = GuiFake;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14}],423:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The Identity Data Model is used to model the reTHINK User entity. The Identity data model is handled by Identity Management functionality.
*
*/
var Identity = function () {
  function Identity(guid, type) {
    (0, _classCallCheck3.default)(this, Identity);

    var _this = this;

    _this.guid = guid;
    _this.type = type;
    _this.identifiersList = {};
  }

  (0, _createClass3.default)(Identity, [{
    key: 'addIdentity',
    value: function addIdentity(identifier) {
      var _this = this;
      var identityInformation = {
        idAssertion: '',
        serviceAddress: '',
        authenticationData: '',
        authorisationData: '',
        userProfile: ''
      };
      _this.identifiersList[identifier] = identityInformation;
    }
  }, {
    key: 'addIdAssertion',
    value: function addIdAssertion(identifier, assertion, idp, scope) {
      var _this = this;

      var newIdAssertion = new IdAssertion(assertion, idp, scope);

      _this.idAssertionList.push(newIdAssertion);
    }
  }]);
  return Identity;
}();

var IdAssertion = function IdAssertion(assertion, idp, scope) {
  (0, _classCallCheck3.default)(this, IdAssertion);

  var _this = this;

  _this.assertion = assertion;
  _this.idp = idp;
  _this.scope = scope;
};

var IdValidation = function () {
  function IdValidation(identity, contents) {
    (0, _classCallCheck3.default)(this, IdValidation);

    var _this = this;
    _this.identity = identity;
    _this.contents = contents;
  }

  (0, _createClass3.default)(IdValidation, [{
    key: 'validates',
    value: function validates(identity, contents) {
      //TODO implement the logic

    }
  }]);
  return IdValidation;
}();

exports.default = Identity;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],424:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils.js');

var _Identity = require('./Identity');

var _Identity2 = _interopRequireDefault(_Identity);

var _Crypto = require('./Crypto');

var _Crypto2 = _interopRequireDefault(_Crypto);

var _GuiFake = require('./GuiFake');

var _GuiFake2 = _interopRequireDefault(_GuiFake);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
*
* The Identity Module (Id Module) is the component responsible for handling the
* user identity and the association of this identity with the Hyperty instances,
* in order to make Hyperty instances identifiable. The identity in the reTHINK project
* is not fixed to a unique Identity Service Provider, but obtained through several
* different Identity sources. With this approach, the Id Module provides to the user the
* option to choose the preferred method for authentication.
* This module will thus able to support multiple Identity acquisition methods,
* such as OpenID connect 1.0, Kerberos System, or authentication through smart cards.
* For example, a user with a Google account can use the Google as an Identity Provider to provide Identity Tokens,
*  which can be used by the Identity Module to associate it with a Hyperty instance.
*
* The Identity Module uses a node package, the HelloJS, which is a client-side JavaScript API for authentication
* that facilitates the requests for the OpenID connect protocol. This method allows for some abstraction
* when making requests for different Identity Providers, such as OpenID connect used by Google, Facebook, Microsoft, for example.
*
* When a request for a user identity is made using the method loginWithRP(identifier, scope),
* this method will analyse the Identity Provider chosen to obtain an identity and will use the HelloJS node package
* with the selected Identity Provider and identity scope. After the HelloJS request for an Access Token
* to the Identity Providers, the user will be prompted to authenticate towards the Identity Provider.
* Upon receiving the Access Token, this token is validated with a RESTful web service request to an endpoint
* on the Identity Provider Authorization Server, and after the validation is done,
* an ID token is obtained with the information according to the scope required.
* This ID token is then preserved in this module that can obtained through the getIdentities()
* and is passed as return value of the loginWithRP function. The methods generateAssertion and validateAssertion have not yet been developed.
*
*/
var IdentityModule = function () {

  /**
  * This is the constructor to initialise the Identity Module it does not require any input.
  */
  function IdentityModule(runtimeURL, runtimeCapabilities, storageManager) {
    (0, _classCallCheck3.default)(this, IdentityModule);

    var _this = this;

    if (!runtimeURL) throw new Error('runtimeURL is missing.');
    if (!storageManager) throw new Error('storageManager is missing');

    _this._runtimeURL = runtimeURL;
    _this.storageManager = storageManager;
    _this._idmURL = _this._runtimeURL + '/idm';
    _this._guiURL = _this._runtimeURL + '/identity-gui';
    _this.runtimeCapabilities = runtimeCapabilities;

    _this._domain = (0, _utils.divideURL)(_this._runtimeURL).domain;

    //to store items with this format: {identity: identityURL, token: tokenID}
    _this.identities = [];
    _this.emailsList = [];
    var newIdentity = new _Identity2.default('guid', 'HUMAN');
    _this.identity = newIdentity;
    _this.crypto = new _Crypto2.default();

    //stores the association of the dataObject and the Hyperty registered within
    _this.dataObjectsIdentity = {};

    // hashTable to store all the crypto information between two hyperties
    _this.chatKeys = {};

    // hashTable to store the symmetric keys to be used in the chat group
    _this.dataObjectSessionKeys = {};

    //failsafe to enable/disable all the criptographic functions
    _this.isToUseEncryption = true;

    // variable to know if the GUI is deployed to choose the identity. if the real GUI is not deployed, a fake gui is deployed instead.
    _this.guiDeployed = false;

    // verification of nodeJS, and in case it is nodeJS then disable encryption
    // TODO improve later, this exists because the crypto lib uses browser cryptographic methods
    //_this.isToUseEncryption = (window) ? true : false;

    _this._loadIdentities();
  }

  /**
  * return the messageBus in this Registry
  * @param {MessageBus}           messageBus
  */


  (0, _createClass3.default)(IdentityModule, [{
    key: 'getIdentities',


    /**
    * Function to return all the identities registered within a session by a user.
    * These identities are returned in an array containing a JSON package for each user identity.
    * @return {Array<Identities>}         Identities
    */
    value: function getIdentities() {
      var _this = this;
      return _this.identities;
    }

    /**
    * gets all the information from a given userURL
    * @param  {String}  userURL     user url
    * @return {JSON}    identity    identity bundle from the userURL
    */

  }, {
    key: 'getIdentity',
    value: function getIdentity(userURL) {
      var _this = this;

      for (var index in _this.identities) {

        var identity = _this.identities[index];
        if (identity.identity === userURL) {
          return identity;
        }
      }

      throw 'identity not found';
    }
  }, {
    key: '_loadIdentities',
    value: function _loadIdentities() {
      var _this = this;
      return new _promise2.default(function (resolve) {

        _this.storageManager.get('idModule:identities').then(function (identities) {

          if (identities) {
            _this.identities = identities;
          }
          resolve();
        });
      });
    }
  }, {
    key: 'deployGUI',
    value: function deployGUI() {
      var _this = this;
      _this.guiDeployed = true;
    }

    /**
    * get a Token to be added to a message
    * @param  {String}  fromURL     origin of the message
    * @param  {String}  toURL     target of the message
    * @return {JSON}    token    token to be added to the message
    */

  }, {
    key: 'getToken',
    value: function getToken(fromURL, toUrl) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        console.log('[Identity.IdentityModule.getToken] from->', fromURL, '  to->', toUrl);
        if (toUrl && toUrl.split('@').length > 1) {
          //        console.log('toUrl', toUrl);
          _this.registry.isLegacy(toUrl).then(function (result) {
            console.log('[Identity.IdentityModule.getToken] isLEGACY: ', result);
            if (result) {

              var token = _this.getAccessToken(toUrl);
              if (token) return resolve(token);

              console.log('[Identity.IdentityModule.getToken] NO Identity.. Login now');
              var domain = (0, _utils.getUserIdentityDomain)(toUrl);
              console.log('[Identity.IdentityModule.getToken] domain->', domain);
              _this.callGenerateMethods(domain).then(function (value) {
                console.log('[Identity.IdentityModule.getToken] CallGeneratemethods', value);
                var token = _this.getAccessToken(toUrl);
                if (token) return resolve(token);else {
                  return reject('No Access token found');
                }
              }, function (err) {
                console.error('[Identity.IdentityModule.getToken] error CallGeneratemethods');
                return reject(err);
              });
            } else {

              _this.getIdToken(fromURL).then(function (identity) {
                console.log('[Identity.IdentityModule.getToken] getIdToken', identity);
                return resolve(identity);
              }).catch(function (error) {
                console.error('[Identity.IdentityModule.getToken] error on getToken', error);
                return reject(error);
              });
            }
          });
        } else {
          _this.getIdToken(fromURL).then(function (identity) {
            console.log('[Identity.IdentityModule.getToken] from getIdToken', identity);
            return resolve(identity);
          }).catch(function (error) {
            return reject(error);
          });
        }
      });
    }

    /**
    * get an Id Token for a HypertyURL
    * @param  {String}  hypertyURL     the Hyperty address
    * @return {JSON}    token    Id token to be added to the message
    */

  }, {
    key: 'getIdToken',
    value: function getIdToken(hypertyURL) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        var splitURL = hypertyURL.split('://');
        if (splitURL[0] !== 'hyperty') {

          _this._getHypertyFromDataObject(hypertyURL).then(function (returnedHypertyURL) {
            var userURL = _this.registry.getHypertyOwner(returnedHypertyURL);

            if (userURL) {

              for (var index in _this.identities) {
                var identity = _this.identities[index];
                if (identity.identity === userURL) {
                  return resolve(identity.messageInfo);
                }
              }
            } else {
              return reject('no identity was found ');
            }
          }).catch(function (reason) {
            console.error('no identity was found: ', reason);
            reject(reason);
          });
        } else {
          var userURL = _this.registry.getHypertyOwner(hypertyURL);
          if (userURL) {

            for (var index in _this.identities) {
              var identity = _this.identities[index];
              if (identity.identity === userURL) {
                return resolve(identity.messageInfo);
              }
            }
          } else {
            return reject('no identity was found.');
          }
        }
      });
    }

    /**
    * get an Access Token for a legacyURL
    * @param  {String}  legacyURL     the legacy address
    * @return {JSON}    token    Access token to be added to the message
    */

  }, {
    key: 'getAccessToken',
    value: function getAccessToken(url) {
      var _this = this;

      /*  let urlSplit = url.split('.');
        let length = urlSplit.length;*/

      var domainToCheck = (0, _utils.divideURL)(url).domain;

      for (var index in _this.identities) {
        var identity = _this.identities[index];
        if (identity.hasOwnProperty('interworking') && identity.interworking.domain === domainToCheck) {
          return identity.interworking.access_token;
        }
      }

      return null;
    }
  }, {
    key: 'getIdentitiesToChoose',
    value: function getIdentitiesToChoose() {
      var _this = this;
      var identities = _this.emailsList;
      var idps = [{ domain: 'google.com', type: 'idToken' }, { domain: 'microsoft.com', type: 'idToken' }, { domain: 'orange.fr', type: 'idToken' }, { domain: 'slack.com', type: 'Legacy' }];

      return { identities: identities, idps: idps };
    }

    /**
    * Function to return all the users URLs registered within a session
    * These users URLs are returned in an array of strings.
    * @param  {Boolean}  emailFormat (Optional)   boolean to indicate to return in email format
    * @return {Array<String>}         users
    */

  }, {
    key: 'getUsersIDs',
    value: function getUsersIDs(emailFormat) {
      var _this = this;
      var users = [];

      //if request comes with the emailFormat option, then convert url to email format
      var converter = emailFormat ? _utils.getUserEmailFromURL : function (value) {
        return value;
      };

      for (var index in _this.identities) {
        var identity = _this.identities[index];
        users.push(converter(identity.identity));
      }
      return users;
    }

    /**
    * Function to return the selected Identity within a session
    * @return {Identity}        identity         identity
    */

  }, {
    key: 'getCurrentIdentity',
    value: function getCurrentIdentity() {
      var _this = this;
      return _this.currentIdentity;
    }

    /**
    * Function to set the current Identity with a given Identity
    * @param {Identity}        identity         identity
    */

  }, {
    key: 'setCurrentIdentity',
    value: function setCurrentIdentity(identity) {
      var _this = this;
      _this.currentIdentity = identity;
    }

    /**
    * Function to remove an identity from the Identities array
    * @param {String}    userID      userID
    */

  }, {
    key: 'deleteIdentity',
    value: function deleteIdentity(userID) {
      var _this = this;

      var userURL = (0, _utils.convertToUserURL)(userID);

      for (var identity in _this.identities) {
        if (_this.identities[identity].identity === userURL) {
          _this.identities.splice(identity, 1);
        }
      }
    }

    /**
    * Function to unregister an identity from the emailsList array and not show in to the GUI
    * @param {String}    email      email
    */

  }, {
    key: 'unregisterIdentity',
    value: function unregisterIdentity(email) {
      var _this = this;

      for (var e in _this.emailsList) {
        if (_this.emailsList[e] === email) {
          _this.emailsList.splice(e, 1);
        }
      }
    }

    /**
    * Function that resolve and create the domainURL in case it is provided one. If not, resolve the default domainURL
    * @param {String}     idpDomain     idpDomain (Optional)
    */

  }, {
    key: '_resolveDomain',
    value: function _resolveDomain(idpDomain) {
      if (!idpDomain) {
        return 'domain-idp://google.com';
      } else {
        return 'domain-idp://' + idpDomain;
      }
    }

    /**
    * Function that sends a request to the GUI using messages. Sends all identities registered and
    * the Idps supported, and return the identity/idp received by the GUI
    * @param {Array<identity>}  identities      list of identitiies
    * @param {Array<String>}    idps            list of idps to authenticate
    * @return {Promise}         returns a chosen identity or idp
    */

  }, {
    key: 'requestIdentityToGUI',
    value: function requestIdentityToGUI(identities, idps) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //condition to check if the real GUI is deployed. If not, deploys a fake gui
        if (_this.guiDeployed === false) {

          var guiFake = new _GuiFake2.default(_this._guiURL, _this._messageBus);
          _this.guiFake = guiFake;
          _this.guiDeployed = true;
        }

        var message = { type: 'create', to: _this._guiURL, from: _this._idmURL,
          body: { value: { identities: identities, idps: idps } } };

        var id = _this._messageBus.postMessage(message);

        //add listener without timout
        _this._messageBus.addResponseListener(_this._idmURL, id, function (msg) {
          _this._messageBus.removeResponseListener(_this._idmURL, id);

          // todo: to return the user URL and not the email or identifier

          if (msg.body.code === 200) {
            var selectedIdentity = msg.body;

            console.log('selectedIdentity: ', selectedIdentity.value);
            resolve(selectedIdentity);
          } else {
            reject('error on requesting an identity to the GUI');
          }
        });
      });
    }
  }, {
    key: 'openPopup',
    value: function openPopup(urlreceived) {

      return new _promise2.default(function (resolve, reject) {

        var win = window.open(urlreceived, 'openIDrequest', 'width=800, height=600');
        if (window.cordova) {
          win.addEventListener('loadstart', function (e) {
            var url = e.url;
            var code = /\&code=(.+)$/.exec(url);
            var error = /\&error=(.+)$/.exec(url);

            if (code || error) {
              win.close();
              resolve(url);
            }
          });
        } else {
          (function () {
            var pollTimer = setInterval(function () {
              try {
                if (win.closed) {
                  reject('Some error occured when trying to get identity.');
                  clearInterval(pollTimer);
                }

                if (win.document.URL.indexOf('id_token') !== -1 || win.document.URL.indexOf(location.origin) !== -1) {
                  window.clearInterval(pollTimer);
                  var url = win.document.URL;

                  win.close();
                  resolve(url);
                }
              } catch (e) {
                //console.log(e);
              }
            }, 500);
          })();
        }
      });
    }

    /**
    * Function that fetch an identityAssertion from a user.
    *
    * @return {IdAssertion}              IdAssertion
    */

  }, {
    key: 'getIdentityAssertion',
    value: function getIdentityAssertion(identifier, origin, usernameHint, idpDomain) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //CHECK whether is browser environment or nodejs
        //if it is browser, then create a fake identity

        _this.runtimeCapabilities.isAvailable('browser').then(function (result) {
          console.log('runtime browser identity acquisition ', result);

          if (!result) return;

          var identitiesInfo = _this.getIdentitiesToChoose();

          _this.requestIdentityToGUI(identitiesInfo.identities, identitiesInfo.idps).then(function (value) {

            if (value.type === 'identity') {

              //  let chosenID = getUserURLFromEmail(value.value);
              // hack while the user url is not returned from requestIdentityToGUI;

              var chosenID = 'user://' + _this.currentIdentity.idp + '/' + value.value;

              // returns the identity info from the chosen id
              for (var i in _this.identities) {
                if (_this.identities[i].identity === chosenID) {
                  return resolve(_this.identities[i].messageInfo);
                }
              }
              reject('no identity was found .');
            } else if (value.type === 'idp') {

              _this.callGenerateMethods(value.value, origin).then(function (value) {
                resolve(value);
              }, function (err) {
                reject(err);
              });
            } else {
              reject('error on GUI received message.');
            }
          });
        }).catch(function (error) {
          console.log('Error on identity acquisition ', error);
          reject(error);
        });

        _this.runtimeCapabilities.isAvailable('node').then(function (result) {
          console.log('node identity acquisition ', result);

          if (!result) return;

          if (_this.currentIdentity !== undefined) {
            //TODO verify whether the token is still valid or not.
            // should be needed to make further requests, to obtain a valid token
            return resolve(_this.currentIdentity);
          } else {
            (function () {
              console.log('getIdentityAssertion for nodejs');
              var randomNumber = Math.floor(Math.random() * 10000 + 1);
              var identityBundle = {
                assertion: 'assertion',
                idp: 'nodejs',
                userProfile: {
                  avatar: 'https://lh3.googleusercontent.com/-WaCrjVMMV-Q/AAAAAAAAAAI/AAAAAAAAAAs/8OlVqCpSB9c/photo.jpg',
                  cn: 'test nodejs',
                  username: 'nodejs-' + randomNumber + '@nodejs.com',
                  userURL: 'user://nodejs.com/nodejs-' + randomNumber
                } };
              _this.currentIdentity = identityBundle;
              _this.identities.push(identityBundle);
              _this.storageManager.set('idModule:identities', 0, _this.identities).then(function () {

                return resolve(identityBundle);
              });
            })();
          }
        }).catch(function (error) {
          console.log('Error on identity acquisition ', error);
          reject(error);
        });
      });
    }
  }, {
    key: 'callGenerateMethods',
    value: function callGenerateMethods(idp, origin) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var publicKey = void 0;
        var userkeyPair = void 0;

        //generates the RSA key pair
        _this.crypto.generateRSAKeyPair().then(function (keyPair) {

          publicKey = btoa(keyPair.public);
          userkeyPair = keyPair;
          return _this.generateAssertion(publicKey, origin, '', userkeyPair, idp);
        }).then(function (url) {
          return _this.generateAssertion(publicKey, origin, url, userkeyPair, idp);
        }).then(function (value) {
          if (value) {
            resolve(value);
          } else {
            reject('Error on obtaining Identity');
          }
        }).catch(function (err) {
          console.log(err);
          reject(err);
        });
      });
    }
  }, {
    key: 'sendGenerateMessage',
    value: function sendGenerateMessage(contents, origin, usernameHint, idpDomain) {
      var _this = this;
      var domain = _this._resolveDomain(idpDomain);
      var message = void 0;

      return new _promise2.default(function (resolve, reject) {
        message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'generateAssertion', params: { contents: contents, origin: origin, usernameHint: usernameHint } } };
        _this._messageBus.postMessage(message, function (res) {
          var result = res.body.value;

          resolve(result);
        });
      });
    }
  }, {
    key: 'storeIdentity',
    value: function storeIdentity(result, keyPair) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var splitedAssertion = result.assertion.split('.');
        var assertionParsed = void 0;

        //verify if the token contains the 3 components, or just the assertion
        if (splitedAssertion[1]) {
          assertionParsed = JSON.parse(atob(splitedAssertion[1]));
        } else {

          assertionParsed = JSON.parse(atob(result.assertion));
        }
        var idToken = void 0;

        //TODO remove the verification and remove the tokenIDJSON from the google idpProxy;
        if (assertionParsed.tokenIDJSON) {
          idToken = assertionParsed.tokenIDJSON;
        } else {
          idToken = assertionParsed;
        }

        idToken.idp = result.idp;

        var email = idToken.email || idToken.sub;

        // let identifier = getUserURLFromEmail(email);

        var identifier = 'user://' + idToken.idp.domain + '/' + email;

        result.identity = identifier;

        _this.identity.addIdentity(result);

        // check if exists any infoToken in the result received
        var infoToken = result.infoToken ? result.infoToken : {};

        var commonName = idToken.name || email.substring(0, email.indexOf('@'));
        var userProfileBundle = { username: email, cn: commonName, avatar: infoToken.picture, locale: infoToken.locale, userURL: identifier };

        //creation of a new JSON with the identity to send via messages
        var newIdentity = { userProfile: userProfileBundle, idp: result.idp.domain, assertion: result.assertion };
        result.messageInfo = newIdentity;
        result.keyPair = keyPair;

        _this.currentIdentity = newIdentity;

        //verify if the id already exists. If already exists then do not add to the identities list;
        var idAlreadyExists = false;
        var oldId = void 0;
        for (var identity in _this.identities) {
          if (_this.identities[identity].identity === result.identity) {
            idAlreadyExists = true;
            oldId = _this.identities[identity].messageInfo;
          }
        }

        if (idAlreadyExists) {
          resolve(oldId);
          var exists = false;

          //check if the identity exists in emailList, if not add it
          //This is useful if an identity was previously registered but was later unregistered
          for (var i in _this.emailsList) {
            if (_this.emailsList[i] === email) {
              exists = true;
              break;
            }
          }
          if (!exists) {
            _this.emailsList.push(email);
          }
        } else {
          _this.emailsList.push(email);
          _this.identities.push(result);
          _this.storageManager.set('idModule:identities', 0, _this.identities).then(function () {

            resolve(newIdentity);
          });
        }
      });
    }

    /**
    * Requests the IdpProxy from a given Domain for an identityAssertion
    *
    * @param  {DOMString} contents     contents
    * @param  {DOMString} origin       origin
    * @param  {DOMString} usernameHint usernameHint
    * @param  {JSON}      keyPair       user keyPair
    * @return {IdAssertion}              IdAssertion
    */

  }, {
    key: 'generateAssertion',
    value: function generateAssertion(contents, origin, usernameHint, keyPair, idpDomain) {
      var _this = this;

      console.log('generateAssertion');

      return new _promise2.default(function (resolve, reject) {

        _this.sendGenerateMessage(contents, origin, usernameHint, idpDomain).then(function (result) {

          if (result.loginUrl) {

            _this.openPopup(result.loginUrl).then(function (value) {
              resolve(value);
            }, function (err) {
              reject(err);
            });
          } else if (result) {

            _this.storeIdentity(result, keyPair).then(function (value) {
              resolve(value);
            }, function (err) {
              reject(err);
            });
          } else {
            reject('error on obtaining identity information');
          }
        });
      });
    }

    /**
    * OTHER USER'S IDENTITY
    */

    /**
    * Requests the IdpProxy from a given Domain to validate an IdentityAssertion
    * Returns a promise with the result from the validation.
    * @param  {DOMString} assertion
    * @param  {DOMString} origin       origin
    * @return {Promise}         Promise         promise with the result from the validation
    */

  }, {
    key: 'validateAssertion',
    value: function validateAssertion(assertion, origin, idpDomain) {
      var _this = this;

      var domain = _this._resolveDomain(idpDomain);

      var message = { type: 'execute', to: domain, from: _this._idmURL, body: { resource: 'identity', method: 'validateAssertion',
          params: { assertion: assertion, origin: origin } } };

      return new _promise2.default(function (resolve, reject) {
        _this._messageBus.postMessage(message, function (result) {
          if (result.body.code === 200) {
            resolve(result.body.value);
          } else {
            reject('error', result.body.code);
          }
        });
      });
    }
  }, {
    key: 'encryptMessage',
    value: function encryptMessage(message) {
      var _this = this;

      console.log('encrypt message ');

      return new _promise2.default(function (resolve, reject) {
        var isHandShakeType = message.type === 'handshake';

        //if is not to apply encryption, then returns resolve
        if (!_this.isToUseEncryption && !isHandShakeType) {
          console.log('encryption disabled');
          return resolve(message);
        }

        //TODO remove this logic and move it to a util function
        var splitedToURL = message.to.split('/');
        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];
        if (splitedToURL.length > 6) {
          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];
        }

        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);
        var isToLegacyIdentity = (0, _utils.isLegacy)(message.to);
        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';

        if (message.type === 'update') {
          resolve(message);
        }

        if (isToLegacyIdentity) {
          resolve(message);
        } else if (isFromHyperty && isToHyperty) {
          var userURL = _this._registry.getHypertyOwner(message.from);
          if (userURL) {
            (function () {

              // check if exists any keys between two users
              var chatKeys = _this.chatKeys[message.from + '<->' + message.to];
              if (!chatKeys) {
                chatKeys = _this._newChatCrypto(message, userURL);
                console.log('createChatKey encrypt', message.from + message.to);
                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;
                message.body.handshakePhase = 'startHandShake';
              }

              if (chatKeys.authenticated && !isHandShakeType) {
                (function () {

                  var iv = _this.crypto.generateIV();
                  _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, message.body.value, iv).then(function (encryptedValue) {

                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, chatKeys.hypertyFrom.messageInfo);

                    _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage).then(function (hash) {
                      //console.log('result of hash ', hash);
                      var value = { iv: _this.crypto.encode(iv), value: _this.crypto.encode(encryptedValue), hash: _this.crypto.encode(hash) };
                      message.body.value = (0, _stringify2.default)(value);

                      resolve(message);
                    });
                  });

                  // if is a handshake message, just resolve it
                })();
              } else if (isHandShakeType) {
                resolve(message);

                // else, starts a new handshake protocol
              } else {
                _this._doHandShakePhase(message, chatKeys).then(function (value) {
                  _this.chatKeys[message.from + '<->' + message.to] = value.chatKeys;

                  _this._messageBus.postMessage(value.message);
                  reject('encrypt handshake protocol phase ');
                });
              }
            })();
          }

          //if from hyperty to a dataObjectURL
        } else if (isFromHyperty && isToDataObject) {
          (function () {
            console.log('dataObject value to encrypt: ', message.body.value);

            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];

            //if no key exists, create a new one if is the reporter of dataObject
            if (!dataObjectKey) {
              var isHypertyReporter = _this.registry.getReporterURLSynchonous(dataObjectURL);
              console.log('isHypertyReporter:', isHypertyReporter);
              // if the hyperty is the reporter of the dataObject then generates a session key
              if (isHypertyReporter && isHypertyReporter === message.from) {

                var sessionKey = _this.crypto.generateRandom();
                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };

                dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];
              }
            }

            //check if there is already a session key for the chat room
            if (dataObjectKey) {

              // and if is to apply encryption, encrypt the messages
              if (dataObjectKey.isToEncrypt) {
                (function () {
                  var iv = _this.crypto.generateIV();

                  _this.crypto.encryptAES(dataObjectKey.sessionKey, _this.crypto.encode((0, _stringify2.default)(message.body.value)), iv).then(function (encryptedValue) {

                    var filteredMessage = _this._filterMessageToHash(message, message.body.value + iv, dataObjectKey.sessionKey);

                    _this.crypto.hashHMAC(dataObjectKey.sessionKey, filteredMessage).then(function (hash) {
                      //console.log('hash ', hash);

                      var newValue = { value: _this.crypto.encode(encryptedValue), iv: _this.crypto.encode(iv), hash: _this.crypto.encode(hash) };

                      message.body.value = (0, _stringify2.default)(newValue);
                      resolve(message);
                    });
                  });

                  // if not, just send the message
                })();
              } else {
                resolve(message);
              }

              // start the generation of a new session Key
            } else {
              reject('failed to decrypt message');
            }
          })();
        }
      });
    }
  }, {
    key: 'decryptMessage',
    value: function decryptMessage(message) {
      var _this = this;

      console.log('decrypt message ');

      return new _promise2.default(function (resolve, reject) {
        var isHandShakeType = message.type === 'handshake';

        //if is not to apply encryption, then returns resolve
        if (!_this.isToUseEncryption && !isHandShakeType) {
          console.log('decryption disabled');
          return resolve(message);
        }

        //TODO remove this logic and move it to a util function

        var splitedToURL = message.to.split('/');
        var dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3];
        if (splitedToURL.length > 6) {
          dataObjectURL = splitedToURL[0] + '//' + splitedToURL[2] + '/' + splitedToURL[3] + '/' + splitedToURL[4];
        }

        var isToDataObject = (0, _utils.isDataObjectURL)(dataObjectURL);
        var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
        var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';

        if (message.type === 'update') {
          resolve(message);
        }

        //is is hyperty to hyperty communication
        if (isFromHyperty && isToHyperty) {
          //console.log('decrypt hyperty to hyperty');
          var userURL = _this._registry.getHypertyOwner(message.to);
          if (userURL) {
            (function () {

              var chatKeys = _this.chatKeys[message.to + '<->' + message.from];
              if (!chatKeys) {
                chatKeys = _this._newChatCrypto(message, userURL, 'decrypt');
                _this.chatKeys[message.to + '<->' + message.from] = chatKeys;
              }

              if (chatKeys.authenticated && !isHandShakeType) {
                (function () {
                  var value = JSON.parse(message.body.value);
                  var iv = _this.crypto.decode(value.iv);
                  var data = _this.crypto.decode(value.value);
                  var hash = _this.crypto.decode(value.hash);
                  _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {
                    console.log('decrypted value ', decryptedData);
                    message.body.value = decryptedData;

                    var filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);

                    _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {
                      //console.log('result of hash verification! ', result);
                      message.body.assertedIdentity = true;
                      resolve(message);
                    });
                  });
                })();
              } else if (isHandShakeType) {
                _this._doHandShakePhase(message, chatKeys).then(function (value) {

                  //if it was started by doMutualAuthentication then ends the protocol
                  if (value === 'handShakeEnd') {
                    reject('decrypt handshake protocol phase ');

                    // if was started by a message, then resend that message
                  } else {
                    _this.chatKeys[message.to + '<->' + message.from] = value.chatKeys;
                    _this._messageBus.postMessage(value.message);
                    reject('decrypt handshake protocol phase ');
                  }
                });
              } else {
                reject('wrong message do decrypt');
              }
            })();
          } else {
            reject('error on decrypt message');
          }

          //if from hyperty to a dataObjectURL
        } else if (isFromHyperty && isToDataObject) {
          (function () {
            console.log('dataObject value to decrypt: ', message.body);

            var dataObjectKey = _this.dataObjectSessionKeys[dataObjectURL];

            if (dataObjectKey) {

              //check if is to apply encryption
              if (dataObjectKey.isToEncrypt) {
                (function () {
                  var parsedValue = JSON.parse(message.body.value);
                  var iv = _this.crypto.decode(parsedValue.iv);
                  var encryptedValue = _this.crypto.decode(parsedValue.value);
                  var hash = _this.crypto.decode(parsedValue.hash);

                  _this.crypto.decryptAES(dataObjectKey.sessionKey, encryptedValue, iv).then(function (decryptedValue) {
                    var parsedValue = JSON.parse(atob(decryptedValue));
                    console.log('decrypted Value,', parsedValue);
                    message.body.value = parsedValue;

                    var filteredMessage = _this._filterMessageToHash(message, parsedValue + iv);

                    _this.crypto.verifyHMAC(dataObjectKey.sessionKey, filteredMessage, hash).then(function (result) {
                      //console.log('result of hash verification! ', result);

                      message.body.assertedIdentity = true;
                      resolve(message);
                    });
                  });

                  //if not, just return the message
                })();
              } else {
                message.body.assertedIdentity = true;
                resolve(message);
              }
            } else {
              message.body.assertedIdentity = true;
              resolve(message);

              //reject('no sessionKey for chat room found');
            }
          })();
        } else {
          reject('wrong message to decrypt');
        }
      });
    }
  }, {
    key: 'doMutualAuthentication',
    value: function doMutualAuthentication(sender, receiver) {
      console.log('doMutualAuthentication: ', sender, receiver);
      var _this = this;
      var dataObjectURL = void 0;

      // check if the sender is a dataObject and if so stores that value
      var reporterURL = _this.registry.getReporterURLSynchonous(sender);
      if (reporterURL) {
        dataObjectURL = sender;
        sender = reporterURL;
      }

      var msg = {
        to: receiver,
        from: sender,
        callback: undefined,
        body: { handshakePhase: 'startHandShake', ignore: 'ignoreMessage' }
      };

      return new _promise2.default(function (resolve, reject) {

        if (!sender || !receiver) {
          return reject('sender or receiver missing on doMutualAuthentication');
        }

        var chatKeys = _this.chatKeys[sender + '<->' + receiver];
        var userURL = _this._registry.getHypertyOwner(sender);

        if (userURL) {

          if (!chatKeys) {
            // callback to resolve when finish the mutual authentication
            var resolved = function resolved(value) {
              console.log('callback value:', value);
              resolve(value);
            };
            msg.callback = resolved;
            msg.dataObjectURL = dataObjectURL;

            chatKeys = _this._newChatCrypto(msg, userURL);
            _this.chatKeys[sender + '<->' + receiver] = chatKeys;
          }

          if (chatKeys.authenticated) {

            var startSessionKeyExchange = {
              to: sender,
              from: receiver
            };
            chatKeys.dataObjectURL = dataObjectURL;
            _this._sendReporterSessionKey(startSessionKeyExchange, chatKeys).then(function (value) {

              _this._messageBus.postMessage(value.message);
              resolve('exchange of chat sessionKey initiated');
            });
          } else {

            _this._doHandShakePhase(msg, chatKeys);
          }
        } else {
          reject('error on doMutualAuthentication');
        }
      });
    }
  }, {
    key: '_doHandShakePhase',
    value: function _doHandShakePhase(message, chatKeys) {
      var _this = this;

      //console.log('handshakeType');

      return new _promise2.default(function (resolve, reject) {

        var handshakeType = message.body.handshakePhase;
        var iv = void 0;
        var hash = void 0;
        var value = {};
        var filteredMessage = void 0;

        (function () {
          switch (handshakeType) {

            case 'startHandShake':
              chatKeys.keys.fromRandom = _this.crypto.generateRandom();

              var startHandShakeMsg = {
                type: 'handshake',
                to: message.to,
                from: message.from,
                body: {
                  handshakePhase: 'senderHello',
                  value: _this.crypto.encode(chatKeys.keys.fromRandom)
                }
              };
              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(startHandShakeMsg, undefined, chatKeys.hypertyFrom.messageInfo);

              // check if was the encrypt function or the mutual authentication that request the
              // start of the handShakePhase.
              if (chatKeys.initialMessage) {
                resolve({ message: startHandShakeMsg, chatKeys: chatKeys });
              } else {
                _this.chatKeys[message.from + '<->' + message.to] = chatKeys;
                _this._messageBus.postMessage(startHandShakeMsg);
              }

              break;
            case 'senderHello':

              console.log('senderHello');
              chatKeys.handshakeHistory.senderHello = _this._filterMessageToHash(message);
              chatKeys.keys.fromRandom = _this.crypto.decode(message.body.value);
              chatKeys.keys.toRandom = _this.crypto.generateRandom();

              var senderHelloMsg = {
                type: 'handshake',
                to: message.from,
                from: message.to,
                body: {
                  handshakePhase: 'receiverHello',
                  value: _this.crypto.encode(chatKeys.keys.toRandom)
                }
              };
              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(senderHelloMsg, undefined, chatKeys.hypertyFrom.messageInfo);
              resolve({ message: senderHelloMsg, chatKeys: chatKeys });

              break;
            case 'receiverHello':

              console.log('receiverHello');
              chatKeys.handshakeHistory.receiverHello = _this._filterMessageToHash(message);

              _this.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp).then(function (value) {

                //TODO remove later this verification as soon as all the IdP proxy are updated in the example
                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;

                var receiverPublicKey = _this.crypto.decode(encodedpublicKey);
                var premasterSecret = _this.crypto.generatePMS();
                var toRandom = message.body.value;
                chatKeys.hypertyTo.assertion = message.body.identity.assertion;
                chatKeys.hypertyTo.publicKey = receiverPublicKey;
                chatKeys.hypertyTo.userID = value.contents.email;
                chatKeys.keys.toRandom = _this.crypto.decode(toRandom);
                chatKeys.keys.premasterKey = premasterSecret;

                var concatKey = _this.crypto.concatPMSwithRandoms(premasterSecret, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);

                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                //generate the master key
              }).then(function (masterKey) {
                chatKeys.keys.masterKey = masterKey;

                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                //generate the symmetric and hash keys
              }).then(function (keys) {

                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[0]);
                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[1]);
                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[2]);
                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[3]);
                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                var messageStructure = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate'
                  }
                };

                // hash the value and the iv
                filteredMessage = _this._filterMessageToHash(messageStructure, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);
                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);
              }).then(function (hash) {
                value.hash = _this.crypto.encode(hash);

                //encrypt the data
                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok', iv);
              }).then(function (encryptedData) {
                value.symetricEncryption = _this.crypto.encode(encryptedData);

                return _this.crypto.encryptRSA(chatKeys.hypertyTo.publicKey, chatKeys.keys.premasterKey);
              }).then(function (encryptedValue) {

                value.assymetricEncryption = _this.crypto.encode(encryptedValue);

                var messageStructure = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate'
                  }
                };

                var messageToHash = _this._filterMessageToHash(messageStructure, chatKeys.keys.premasterKey, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.signRSA(chatKeys.hypertyFrom.privateKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(messageToHash));
              }).then(function (signature) {

                value.signature = _this.crypto.encode(signature);

                var receiverHelloMsg = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'senderCertificate',
                    value: btoa((0, _stringify2.default)(value))
                  }
                };
                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(receiverHelloMsg, 'ok' + iv, chatKeys.hypertyFrom.messageInfo);

                resolve({ message: receiverHelloMsg, chatKeys: chatKeys });
              }, function (error) {
                return reject(error);
              });

              break;
            case 'senderCertificate':

              console.log('senderCertificate');
              var receivedValue = JSON.parse(atob(message.body.value));

              _this.validateAssertion(message.body.identity.assertion, undefined, message.body.identity.idp).then(function (value) {
                var encryptedPMS = _this.crypto.decode(receivedValue.assymetricEncryption);

                //TODO remove later this verification as soon as all the IdP proxy are updated in the example
                var encodedpublicKey = typeof value.contents === 'string' ? value.contents : value.contents.nonce;

                var senderPublicKey = _this.crypto.decode(encodedpublicKey);
                chatKeys.hypertyTo.assertion = message.body.identity.assertion;
                chatKeys.hypertyTo.publicKey = senderPublicKey;
                chatKeys.hypertyTo.userID = value.contents.email;

                return _this.crypto.decryptRSA(chatKeys.hypertyFrom.privateKey, encryptedPMS);
              }, function (error) {
                console.log(error);
                reject('Error during authentication of identity');

                //obtain the PremasterKey using the private key
              }).then(function (pms) {

                chatKeys.keys.premasterKey = new Uint8Array(pms);

                var signature = _this.crypto.decode(receivedValue.signature);

                var receivedmsgToHash = _this._filterMessageToHash(message, chatKeys.keys.premasterKey);

                return _this.crypto.verifyRSA(chatKeys.hypertyTo.publicKey, (0, _stringify2.default)(chatKeys.handshakeHistory) + (0, _stringify2.default)(receivedmsgToHash), signature);

                // validates the signature received
              }).then(function (signValidationResult) {

                console.log('signature validation result ', signValidationResult);
                var concatKey = _this.crypto.concatPMSwithRandoms(chatKeys.keys.premasterKey, chatKeys.keys.toRandom, chatKeys.keys.fromRandom);

                return _this.crypto.generateMasterSecret(concatKey, 'messageHistoric' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                // generates the master keys from the Premaster key and the randoms
              }).then(function (masterKey) {
                chatKeys.keys.masterKey = masterKey;

                return _this.crypto.generateKeys(masterKey, 'key expansion' + chatKeys.keys.toRandom + chatKeys.keys.fromRandom);

                // generates the symmetric keys to be used in the symmetric encryption
              }).then(function (keys) {
                chatKeys.keys.hypertyFromSessionKey = new Uint8Array(keys[0]);
                chatKeys.keys.hypertyToSessionKey = new Uint8Array(keys[1]);
                chatKeys.keys.hypertyFromHashKey = new Uint8Array(keys[2]);
                chatKeys.keys.hypertyToHashKey = new Uint8Array(keys[3]);
                iv = _this.crypto.decode(receivedValue.iv);
                var data = _this.crypto.decode(receivedValue.symetricEncryption);

                return _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv);
              }).then(function (decryptedData) {
                //console.log('decryptedData', decryptedData);

                chatKeys.handshakeHistory.senderCertificate = _this._filterMessageToHash(message, decryptedData + iv);

                var hashReceived = _this.crypto.decode(receivedValue.hash);

                filteredMessage = _this._filterMessageToHash(message, decryptedData + iv);

                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hashReceived);
              }).then(function (verifiedHash) {

                //console.log('result of hash verification ', verifiedHash);
                var receiverFinishedMessage = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverFinishedMessage'
                  }
                };
                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                filteredMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, receiverFinishedMessage);
              }).then(function (hash) {

                value.hash = _this.crypto.encode(hash);
                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!', iv);
              }).then(function (encryptedValue) {
                value.value = _this.crypto.encode(encryptedValue);
                var receiverFinishedMessage = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverFinishedMessage',
                    value: btoa((0, _stringify2.default)(value))
                  }
                };

                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(receiverFinishedMessage, 'ok!' + iv, chatKeys.hypertyFrom.messageInfo);
                chatKeys.authenticated = true;
                resolve({ message: receiverFinishedMessage, chatKeys: chatKeys });
              });

              break;
            case 'receiverFinishedMessage':

              console.log('receiverFinishedMessage');
              chatKeys.authenticated = true;

              value = JSON.parse(atob(message.body.value));

              iv = _this.crypto.decode(value.iv);
              var data = _this.crypto.decode(value.value);
              hash = _this.crypto.decode(value.hash);

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, data, iv).then(function (decryptedData) {
                console.log('decryptedData', decryptedData);
                chatKeys.handshakeHistory.receiverFinishedMessage = _this._filterMessageToHash(message, decryptedData + iv);

                var filteredMessage = _this._filterMessageToHash(message, data + iv);
                _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, hash).then(function (result) {
                  console.log('hash result', result);

                  // check if there was an initial message that was blocked and send it
                  if (chatKeys.initialMessage) {
                    var initialMessage = {
                      type: 'create',
                      to: message.from,
                      from: message.to,
                      body: {
                        value: chatKeys.initialMessage.body.value
                      }
                    };

                    resolve({ message: initialMessage, chatKeys: chatKeys });

                    //sends the sessionKey to the subscriber hyperty
                  } else {
                    _this._sendReporterSessionKey(message, chatKeys).then(function (value) {
                      resolve(value);
                    });
                  }
                });
              });

              break;
            case 'reporterSessionKey':

              console.log('reporterSessionKey');

              var valueIVandHash = JSON.parse(atob(message.body.value));
              hash = _this.crypto.decode(valueIVandHash.hash);
              iv = _this.crypto.decode(valueIVandHash.iv);
              var encryptedValue = _this.crypto.decode(valueIVandHash.value);
              var parsedValue = void 0;
              var sessionKey = void 0;
              var dataObjectURL = void 0;
              var receiverAcknowledgeMsg = void 0;

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, encryptedValue, iv).then(function (decryptedValue) {

                parsedValue = JSON.parse(decryptedValue);
                sessionKey = _this.crypto.decode(parsedValue.value);
                dataObjectURL = parsedValue.dataObjectURL;

                var messageToHash = _this._filterMessageToHash(message, decryptedValue + iv);

                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, messageToHash, hash);
              }).then(function (hashResult) {

                //console.log('hash successfully validated ', hashResult);

                _this.dataObjectSessionKeys[dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };

                iv = _this.crypto.generateIV();
                value.iv = _this.crypto.encode(iv);

                return _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, 'ok!!', iv);
              }).then(function (encryptedValue) {

                receiverAcknowledgeMsg = {
                  type: 'handshake',
                  to: message.from,
                  from: message.to,
                  body: {
                    handshakePhase: 'receiverAcknowledge'
                  }
                };

                value.value = _this.crypto.encode(encryptedValue);
                var messageToHash = _this._filterMessageToHash(receiverAcknowledgeMsg, 'ok!!' + iv, chatKeys.hypertyFrom.messageInfo);

                return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, messageToHash);
              }).then(function (hashedMessage) {
                var finalValue = btoa((0, _stringify2.default)({ value: value.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));

                receiverAcknowledgeMsg.body.value = finalValue;
                resolve({ message: receiverAcknowledgeMsg, chatKeys: chatKeys });
              });

              break;
            case 'receiverAcknowledge':

              console.log('receiverAcknowledge');

              var receivedvalueIVandHash = JSON.parse(atob(message.body.value));
              var receivedHash = _this.crypto.decode(receivedvalueIVandHash.hash);
              iv = _this.crypto.decode(receivedvalueIVandHash.iv);
              var receivedEncryptedValue = _this.crypto.decode(receivedvalueIVandHash.value);

              _this.crypto.decryptAES(chatKeys.keys.hypertyToSessionKey, receivedEncryptedValue, iv).then(function (decryptedValue) {

                var filteredMessage = _this._filterMessageToHash(message, decryptedValue + iv);
                return _this.crypto.verifyHMAC(chatKeys.keys.hypertyToHashKey, filteredMessage, receivedHash);
              }).then(function (hashResult) {
                //console.log('hashResult ', hashResult);

                var callback = chatKeys.callback;

                if (callback) {
                  callback('handShakeEnd');
                }
                resolve('handShakeEnd');
              });

              break;
            default:
              reject(message);
          }
        })();
      });
    }
  }, {
    key: '_sendReporterSessionKey',
    value: function _sendReporterSessionKey(message, chatKeys) {
      var _this = this;
      var sessionKeyBundle = _this.dataObjectSessionKeys[chatKeys.dataObjectURL];
      var reporterSessionKeyMsg = void 0;
      var valueToEncrypt = void 0;
      var sessionKey = void 0;
      var iv = void 0;
      var value = {};

      return new _promise2.default(function (resolve, reject) {

        //if there is not yet a session Key, generates a new one
        if (!sessionKeyBundle) {
          sessionKey = _this.crypto.generateRandom();
          _this.dataObjectSessionKeys[chatKeys.dataObjectURL] = { sessionKey: sessionKey, isToEncrypt: true };
        } else {
          sessionKey = sessionKeyBundle.sessionKey;
        }

        valueToEncrypt = (0, _stringify2.default)({ value: _this.crypto.encode(sessionKey), dataObjectURL: chatKeys.dataObjectURL });

        iv = _this.crypto.generateIV();
        value.iv = _this.crypto.encode(iv);
        _this.crypto.encryptAES(chatKeys.keys.hypertyFromSessionKey, valueToEncrypt, iv).then(function (encryptedValue) {

          reporterSessionKeyMsg = {
            type: 'handshake',
            to: message.from,
            from: message.to,
            body: {
              handshakePhase: 'reporterSessionKey',
              value: _this.crypto.encode(encryptedValue)
            }
          };

          var filteredMessage = _this._filterMessageToHash(reporterSessionKeyMsg, valueToEncrypt + iv, chatKeys.hypertyFrom.messageInfo);

          return _this.crypto.hashHMAC(chatKeys.keys.hypertyFromHashKey, filteredMessage);
        }).then(function (hashedMessage) {

          var valueWithHash = btoa((0, _stringify2.default)({ value: reporterSessionKeyMsg.body.value, hash: _this.crypto.encode(hashedMessage), iv: value.iv }));

          reporterSessionKeyMsg.body.value = valueWithHash;
          resolve({ message: reporterSessionKeyMsg, chatKeys: chatKeys });
        });
      });
    }

    /**
    * returns the reporter associated to the dataObject URL
    * @param   {String}   dataObjectURL         dataObject url
    * @return   {String}  reporter              dataObject url reporter
    */

  }, {
    key: '_getHypertyFromDataObject',
    value: function _getHypertyFromDataObject(dataObjectURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //TODO remove this logic and move it to a util function

        var splitedURL = dataObjectURL.split('/');
        var finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3];
        if (splitedURL.length > 6) {
          finalURL = splitedURL[0] + '//' + splitedURL[2] + '/' + splitedURL[3] + '/' + splitedURL[4];
        }

        // check if is the creator of the hyperty
        var reporterURL = _this.registry.getReporterURLSynchonous(finalURL);

        if (reporterURL) {
          resolve(reporterURL);
        } else {
          // check if there is already an association from an hypertyURL to the dataObject
          var storedReporterURL = _this.dataObjectsIdentity[finalURL];

          if (storedReporterURL) {
            resolve(storedReporterURL);
          } else {
            // check if there is any hyperty that subscribed the dataObjectURL
            var subscriberHyperty = _this.registry.getDataObjectSubscriberHyperty(dataObjectURL);

            if (subscriberHyperty) {
              resolve(subscriberHyperty);
            } else {

              // search in domain registry for the hyperty associated to the dataObject
              // search in case is a subscriber who wants to know the reporter
              _this.registry.discoverDataObjectPerURL(finalURL, splitedURL[2]).then(function (dataObject) {
                _this.dataObjectsIdentity[finalURL] = dataObject.reporter;
                resolve(dataObject.reporter);
              }, function (err) {
                reject(err);
              });
            }
          }
        }
      });
    }

    /**
    * filter the messages to hash, by removing some fields not generated by the runtime core
    * @param {Message}  message                     message
    * @param {String}  decryptedValue (Optional)    value from body.value in case it originally comes encrypted
    * @param {JSON}  identity(Optional)    add the hyperty identity associated in case is not added to the initial message
    * @return {Message}  new message filtered
    */

  }, {
    key: '_filterMessageToHash',
    value: function _filterMessageToHash(message, decryptedValue, identity) {

      return {
        type: message.type,
        from: message.from,
        to: message.to,
        body: {
          identity: identity || message.body.identity,
          value: decryptedValue || message.body.value,
          handshakePhase: message.body.handshakePhase
        }
      };
    }

    /**
    * generates the initial structure for the keys between two users
    * @param {JSON}    message              initial message that triggers the mutual authentication
    * @param {String}  userURL              userURL
    * @param {boolean} receiver(Optional)  indicates if is the sender or the receiver that creates a new chat crypto
    * @return {JSON} newChatCrypto  new JSON structure for the chat crypto
    */

  }, {
    key: '_newChatCrypto',
    value: function _newChatCrypto(message, userURL, receiver) {
      var _this = this;

      //check whether is the sender or the receiver to create a new chatCrypto
      //to mantain consistency on the keys if the receiver create a new chatCrypto,
      //then invert the fields
      var from = receiver ? message.to : message.from;
      var to = receiver ? message.from : message.to;

      var userInfo = _this.getIdentity(userURL);

      var newChatCrypto = {
        hypertyFrom: {
          hyperty: from,
          userID: userInfo.messageInfo.userProfile.username,
          privateKey: userInfo.keyPair.private,
          publicKey: userInfo.keyPair.public,
          assertion: userInfo.assertion,
          messageInfo: userInfo.messageInfo
        },
        hypertyTo: {
          hyperty: to,
          userID: undefined,
          publicKey: undefined,
          assertion: undefined
        },
        keys: {
          hypertyToSessionKey: undefined,
          hypertyFromSessionKey: undefined,
          hypertyToHashKey: undefined,
          hypertyFromHashKey: undefined,
          toRandom: undefined,
          fromRandom: undefined,
          premasterKey: undefined,
          masterKey: undefined
        },
        handshakeHistory: {
          senderHello: undefined,
          receiverHello: undefined,
          senderCertificate: undefined,
          receiverFinishedMessage: undefined
        },
        initialMessage: message.body.ignore ? undefined : message,
        callback: message.callback,
        authenticated: false,
        dataObjectURL: message.dataObjectURL
      };

      return newChatCrypto;
    }
  }, {
    key: 'messageBus',
    get: function get() {
      var _this = this;
      return _this._messageBus;
    }

    /**
    * Set the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */
    ,
    set: function set(messageBus) {
      var _this = this;
      _this._messageBus = messageBus;
    }

    /**
    * return the registry in this idModule
    * @param {registry}           registry
    */

  }, {
    key: 'registry',
    get: function get() {
      var _this = this;
      return _this._registry;
    }

    /**
    * Set the registry in this idModule
    * @param {registry}     reg
    */
    ,
    set: function set(registry) {
      var _this = this;
      _this._registry = registry;
    }
  }]);
  return IdentityModule;
}();

exports.default = IdentityModule;
module.exports = exports['default'];

},{"../utils/utils.js":454,"./Crypto":421,"./GuiFake":422,"./Identity":423,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],425:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ActionsService = function () {
  function ActionsService(context) {
    (0, _classCallCheck3.default)(this, ActionsService);

    this.context = context;
  }

  (0, _createClass3.default)(ActionsService, [{
    key: 'enforcePolicies',
    value: function enforcePolicies(message, isIncomingMessage) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        var policies = _this.context.getPolicies(message, isIncomingMessage);

        if (policies !== undefined) {
          if (policies.serviceProviderPolicy !== undefined) {
            policies.serviceProviderPolicy.enforceActions(_this.context, message).then(function (messages) {
              resolve(messages);
            }, function (error) {
              reject(error);
            });
          } else {
            if (policies.userPolicy !== undefined) {
              policies.userPolicy.enforceActions(_this.context, message).then(function (messages) {
                resolve(messages);
              }, function (error) {
                reject(error);
              });
            } else {
              resolve([message]);
            }
          }
        } else {
          resolve([message]);
        }
      });
    }
  }, {
    key: 'forwardToID',
    value: function forwardToID(message, email) {
      var _this = this;
      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');

      return new _promise2.default(function (resolve, reject) {
        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {
          var splitTo = message.to.split('://');
          if (splitTo[0] !== 'runtime') {
            _this.context.runtimeRegistry.discoverHypertyPerUser(email).then(function (result) {
              message.to = result.hypertyURL;
              message.body.via = undefined;
              resolve(message);
              _this.context.runtimeRegistry._messageBus.postMessage(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        } else {
          resolve(message);
        }
      });
    }
  }, {
    key: 'forwardToHyperty',
    value: function forwardToHyperty(message, hypertyURL) {
      var _this = this;
      if (!_this.context.runtimeRegistry) throw new Error('forward message to given ID is unsupported in this environment');

      return new _promise2.default(function (resolve) {
        if (_this.context.runtimeRegistry.hypertiesList[0].hypertyURL === message.to) {
          var splitTo = message.to.split('://');
          if (splitTo[0] !== 'runtime') {
            message.to = hypertyURL;
            message.body.via = undefined;
            resolve(message);
            _this.context.runtimeRegistry._messageBus.postMessage(message);
          } else {
            resolve(message);
          }
        } else {
          resolve(message);
        }
      });
    }
  }, {
    key: 'sendAutomaticMessage',
    value: function sendAutomaticMessage(message, text) {
      var _this = this;
      return new _promise2.default(function (resolve) {
        var automaticMessage = {
          from: message.to,
          to: message.from,
          body: {
            value: text
          },
          type: message.type
        };
        resolve(message);
        _this.context.runtimeRegistry._messageBus.postMessage(automaticMessage);
      });
    }
  }]);
  return ActionsService;
}();

exports.default = ActionsService;
module.exports = exports['default'];

},{"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],426:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Operators = function () {
  function Operators() {
    (0, _classCallCheck3.default)(this, Operators);
  }

  (0, _createClass3.default)(Operators, [{
    key: 'and',
    value: function and(params) {
      return params[0] && params[1];
    }
  }, {
    key: 'between',
    value: function between(params) {
      var start = parseInt(params[0][0]);
      var end = parseInt(params[0][1]);
      var now = params[1];

      if (end < start) {
        now = now < start ? now += 2400 : now;
        end += 2400;
      }

      return now > start && now < end;
    }
  }, {
    key: 'equals',
    value: function equals(params) {
      return String(params[0]) === '*' || String(params[0]) === String(params[1]);
    }
  }, {
    key: 'greaterThan',
    value: function greaterThan(params) {
      return params[1] > params[0];
    }
  }, {
    key: 'in',
    value: function _in(params) {
      return params[0].indexOf(params[1]) > -1;
    }
  }, {
    key: 'lessThan',
    value: function lessThan(params) {
      return params[1] < params[0];
    }
  }, {
    key: 'not',
    value: function not(params) {
      return !params[0];
    }
  }, {
    key: 'or',
    value: function or(params) {
      return params[0] || params[1];
    }
  }]);
  return Operators;
}();

exports.default = Operators;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],427:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Operators = require('./Operators');

var _Operators2 = _interopRequireDefault(_Operators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* The Policy Decision Point (PDP) decides if a message is to be authorised by checking a set of
* policies. The resource to be verified is specified in the first word of the 'condition' field of
* a Policy object. The implementation that verifies if the message is compliant with a policy is
* specified in a hashtable to allow dynamic definition of the implementation, providing
* extensibility to the Policy Engine functionalities.
*/
var PDP = function () {
  function PDP(context) {
    (0, _classCallCheck3.default)(this, PDP);

    this.context = context;
    this.operators = new _Operators2.default();
  }

  (0, _createClass3.default)(PDP, [{
    key: 'evaluatePolicies',
    value: function evaluatePolicies(message, isIncomingMessage) {
      var policies = this.context.getPolicies(message, isIncomingMessage);
      var result = 'Not Applicable';

      if (policies !== undefined) {
        result = this.evaluatePolicy(message, policies.serviceProviderPolicy, isIncomingMessage);
        if (result || result === 'Not Applicable') {
          var userResult = this.evaluatePolicy(message, policies.userPolicy, isIncomingMessage);
          if (userResult !== 'Not Applicable') {
            result = userResult;
          }
        }
      }

      return result;
    }
  }, {
    key: 'evaluatePolicy',
    value: function evaluatePolicy(message, policy, isIncoming) {
      var result = 'Not Applicable';
      if (policy) {
        result = policy.evaluateRules(this.context, message, isIncoming);
      }

      return result;
    }
  }]);
  return PDP;
}();

exports.default = PDP;
module.exports = exports['default'];

},{"./Operators":426,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],428:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _ActionsService = require('./ActionsService');

var _ActionsService2 = _interopRequireDefault(_ActionsService);

var _PDP = require('./PDP');

var _PDP2 = _interopRequireDefault(_PDP);

var _Policy = require('./Policy');

var _Policy2 = _interopRequireDefault(_Policy);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PEP = function () {

  /**
  * Creates a Policy Enforcement Point (PEP) instance
  * @param    {Object}    context
  */
  function PEP(context) {
    (0, _classCallCheck3.default)(this, PEP);

    var _this = this;

    _this.pdp = new _PDP2.default(context);
    _this.actionsService = new _ActionsService2.default(context);
    _this.context = context;
    context.pep = _this;

    //TODO should be added a trigger to verify when the loadConfigurations is successfully completed
    context.loadConfigurations();
  }

  /**
  * Adds a policy to the Policy Enforcement Point (PEP). The policy can be created by the service
  * provider or by the user.
  * @param    {String}    source
  * @param    {String}    key
  * @param    {Object}    policy
  */


  (0, _createClass3.default)(PEP, [{
    key: 'addPolicy',
    value: function addPolicy(source, key, policy, combiningAlgorithm) {
      if (!source) throw new Error('source is not defined');
      if (!key) throw new Error('key is not defined');

      if (policy === undefined) {
        policy = new _Policy2.default(key, [], [], combiningAlgorithm);
      } else {
        if (!(policy instanceof _Policy2.default)) {
          policy = new _Policy2.default(policy.key, policy.rules, policy.actions, policy.combiningAlgorithm);
        }
      }

      switch (source) {
        case 'SERVICE_PROVIDER':
          this.context.savePolicies(source, policy, key);
          break;
        case 'USER':
          this.context.userPolicies[key] = policy;
          this.context.savePolicies(source);
          break;
        default:
          throw Error('Unknown policy source: ' + source);
      }
    }
  }, {
    key: 'authorise',
    value: function authorise(message) {
      var _this2 = this;

      console.log('[Policy.PEP Authorise] ', message);
      console.log(message);
      if (!message) throw new Error('message is not defined');
      if (!message.from) throw new Error('message.from is not defined');
      if (!message.to) throw new Error('message.to is not defined');
      if (!message.type) throw new Error('message.type is not defined');
      message.body = message.body || {};

      return new _promise2.default(function (resolve, reject) {

        message.body = message.body || {};
        var _this = _this2;
        var result = void 0;
        if (_this._isToVerify(message)) {
          (function () {
            var isIncoming = _this._isIncomingMessage(message);
            _this.context.prepareForEvaluation(message, isIncoming).then(function (message) {
              result = _this.pdp.evaluatePolicies(message, isIncoming);
              if (result === 'Not Applicable') {
                result = _this.context.defaultBehaviour;
                message.body.auth = false;
              }
              _this.actionsService.enforcePolicies(message, isIncoming).then(function (messages) {
                for (var i in messages) {
                  message = messages[i];
                  _this.context.prepareToForward(message, isIncoming, result).then(function (message) {
                    if (result) {
                      message.body.auth = message.body.auth === undefined ? true : message.body.auth;
                      resolve(message);
                    } else {
                      var errorMessage = { body: { code: 403, description: 'Blocked by policy' }, from: message.to, to: message.from, type: 'response' };
                      reject(errorMessage);
                    }
                  }, function (error) {
                    reject(error);
                  });
                }
              }, function (error) {
                reject(error);
              });
            }, function (error) {
              reject(error);
            });
          })();
        } else {
          result = _this.context.defaultBehaviour;
          if (result) {
            message.body.auth = false;
            resolve(message);
          } else {
            var errorMessage = { body: { code: 403, description: 'Blocked by policy' }, from: message.to, to: message.from, type: 'response' };
            reject(errorMessage);
          }
        }
      });
    }
  }, {
    key: 'authoriseSync',
    value: function authoriseSync(message) {
      var result = void 0;
      message.body = message.body || {};
      if (this._isToVerify(message)) {
        var isIncoming = this._isIncomingMessage(message);
        message = this.context.prepareForEvaluation(message, isIncoming);
        result = this.pdp.evaluatePolicies(message, isIncoming);
        if (result === 'Not Applicable') {
          result = this.context.defaultBehaviour;
          message.body.auth = false;
        }
        this.actionsService.enforcePolicies(message, isIncoming);
        message = this.context.prepareToForward(message, isIncoming, result);
        if (result) {
          message.body.auth = message.body.auth === undefined ? true : message.body.auth;
          return true;
        } else {
          return false;
        }
      } else {
        result = this.context.defaultBehaviour;
        if (result) {
          message.body.auth = false;
          return true;
        } else {
          return false;
        }
      }
    }
  }, {
    key: '_isIncomingMessage',
    value: function _isIncomingMessage(message) {

      return !this.context.isLocal(message.from);
    }

    /**
    * Identifies the messages to be verified by the Policy Engine
    * @param    {Message}   message
    * @returns  {boolean}   returns true if the message requires encryption/decryption
    *                       or if its type equals 'handshake'; false otherwise
    */

  }, {
    key: '_isToVerify',
    value: function _isToVerify(message) {
      var schemasToIgnore = ['domain', 'domain-idp', 'global', 'hyperty-runtime', 'runtime'];
      var splitFrom = message.from.split('://');
      var fromSchema = splitFrom[0];
      var splitTo = message.to.split('://');
      var toSchema = splitTo[0];
      var fromPath = message.from.split('/');
      var toPath = message.to.split('/');

      // Signalling messages between P2P Stubs don't have to be verified. FFS

      if (fromPath.indexOf('p2phandler') !== -1 || fromPath.indexOf('p2prequester') !== -1 || toPath.indexOf('p2phandler') !== -1 || toPath.indexOf('p2prequester') !== -1) return false;

      // hack to disable Identity verification for messages coming from legacy domains while solution is not implemented

      var from = message.from;

      if (message.body && message.body.source) from = message.body.source;

      if (this.context.isInterworkingProtoStub(from)) return false;

      if (message.from === fromSchema || message.to === toSchema || message.type === 'read' || message.type === 'response' || (0, _utils.isHypertyURL)(message.from) && message.type === 'delete') {
        return false;
      } else {
        return schemasToIgnore.indexOf(fromSchema) === -1 || schemasToIgnore.indexOf(toSchema) === -1;
      }
    }
  }, {
    key: 'removePolicy',
    value: function removePolicy(source, key) {
      if (!source) throw new Error('source is not defined');
      if (source !== '*' && !key) throw new Error('key is not defined');

      switch (source) {
        case '*':
          this.context.serviceProviderPolicy = {};
          this.context.userPolicies = {};
          this.context.activeUserPolicy = undefined;
          this.context.savePolicies('USER');
          this.context.savePolicies('SERVICE_PROVIDER');
          this.context.saveActivePolicy();
          break;
        case 'SERVICE_PROVIDER':
          delete this.context.serviceProviderPolicy[key];
          this.context.savePolicies();
          break;
        case 'USER':
          delete this.context.userPolicies[key];
          if (key === this.context.activeUserPolicy) {
            this.context.activeUserPolicy = undefined;
            this.context.saveActivePolicy();
          }
          this.context.savePolicies('USER');
          break;
        default:
          throw Error('Unknown policy source: ' + source);
      }
    }
  }]);
  return PEP;
}();

exports.default = PEP;
module.exports = exports['default'];

},{"../utils/utils":454,"./ActionsService":425,"./PDP":427,"./Policy":429,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],429:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _AllowOverrides = require('./combiningAlgorithms/AllowOverrides');

var _AllowOverrides2 = _interopRequireDefault(_AllowOverrides);

var _BlockOverrides = require('./combiningAlgorithms/BlockOverrides');

var _BlockOverrides2 = _interopRequireDefault(_BlockOverrides);

var _FirstApplicable = require('./combiningAlgorithms/FirstApplicable');

var _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);

var _Rule = require('./Rule');

var _Rule2 = _interopRequireDefault(_Rule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Policy = function () {
  function Policy(key, rules, actions, combiningAlgorithm) {
    (0, _classCallCheck3.default)(this, Policy);

    if (!key) throw new Error('key is not defined');
    if (!actions) throw new Error('actions are not defined');

    this.actions = actions;
    this.key = key;
    this._setRules(rules);
    this._setCombiningAlgorithm(combiningAlgorithm);
  }

  (0, _createClass3.default)(Policy, [{
    key: 'addAction',
    value: function addAction(method, param) {
      this.actions.push({ method: method, param: param });
    }
  }, {
    key: 'createRule',
    value: function createRule(decision, condition, scope, target, priority) {
      if (priority === undefined) {
        priority = this.getLastPriority() + 1;
      }
      var rule = new _Rule2.default(decision, condition, scope, target, priority);
      this.rules.push(rule);
    }
  }, {
    key: 'deleteRule',
    value: function deleteRule(rule) {
      var indexToRemove = this.rules.indexOf(rule);
      this.rules.splice(indexToRemove, 1);
    }
  }, {
    key: 'enforceActions',
    value: function enforceActions(context, message) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var results = [];
        if (_this.actions.length !== 0) {
          for (var i in _this.actions) {
            var result = context.pep.actionsService[_this.actions[i].method](message, _this.actions[i].param);
            results.push(result);
          }
          _promise2.default.all(results).then(function (messages) {
            resolve(messages);
          }, function (error) {
            reject(error);
          });
        } else {
          resolve([message]);
        }
      });
    }
  }, {
    key: 'evaluateRules',
    value: function evaluateRules(context, message, isIncoming) {
      var results = [];
      for (var i in this.rules) {
        results.push(this.rules[i].evaluate(context, message, isIncoming));
      }

      return this.combiningAlgorithm.combine(results);
    }
  }, {
    key: 'getLastPriority',
    value: function getLastPriority() {
      var priorities = [];

      if (this.rules.length !== 0) {
        for (var i in this.rules) {
          priorities.push(this.rules[i].priority);
        }
        return Math.max.apply(Math, priorities);
      } else {
        return -1;
      }
    }
  }, {
    key: 'getRuleByPriority',
    value: function getRuleByPriority(priority) {
      for (var i in this.rules) {
        if (String(this.rules[i].priority) === String(priority)) {
          return this.rules[i];
        }
      }
      throw Error('Rule with priority ' + priority + ' does not exist!');
    }
  }, {
    key: '_setCombiningAlgorithm',
    value: function _setCombiningAlgorithm(combiningAlgorithm) {
      if (!combiningAlgorithm) {
        combiningAlgorithm = 'blockOverrides';
      }
      switch (combiningAlgorithm) {
        case 'blockOverrides':
          this.combiningAlgorithm = new _BlockOverrides2.default();
          break;
        case 'allowOverrides':
          this.combiningAlgorithm = new _AllowOverrides2.default();
          break;
        case 'firstApplicable':
          this.combiningAlgorithm = new _FirstApplicable2.default();
          break;
        default:
          throw Error('Unknown algorithm: ' + combiningAlgorithm);
      }
    }
  }, {
    key: '_setRules',
    value: function _setRules(rules) {
      this.rules = [];

      for (var i in rules) {
        var rule = rules[i];
        if (rule.priority === undefined) {
          rule.priority = this.getLastPriority() + 1;
        }
        if (!(rule instanceof _Rule2.default)) {
          rule = new _Rule2.default(rule.decision, rule.condition, rule.scope, rule.target, rule.priority);
        }
        this.rules.push(rule);
      }
    }
  }, {
    key: 'sortRules',
    value: function sortRules() {
      return this.rules.sort(function (a, b) {
        var x = a.priority;var y = b.priority;
        return x < y ? -1 : x > y ? 1 : 0;
      });
    }
  }]);
  return Policy;
}();

exports.default = Policy;
module.exports = exports['default'];

},{"./Rule":431,"./combiningAlgorithms/AllowOverrides":432,"./combiningAlgorithms/BlockOverrides":433,"./combiningAlgorithms/FirstApplicable":434,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],430:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReThinkCtx = function () {
  function ReThinkCtx() {
    (0, _classCallCheck3.default)(this, ReThinkCtx);

    this.defaultBehaviour = true;
    this.groups = {};
  }

  (0, _createClass3.default)(ReThinkCtx, [{
    key: 'scheme',
    get: function get() {
      return this._scheme;
    },
    set: function set(params) {
      var from = params.message.from;
      if ((0, _utils.isDataObjectURL)(from)) {
        this._scheme = (0, _utils.divideURL)(from).type;
      } else {
        this._scheme = undefined;
      }
    }
  }, {
    key: 'date',
    get: function get() {
      return this._date;
    },
    set: function set(now) {
      var date = new Date();
      var day = String(date.getDate());
      if (day.length === 1) {
        day = '0' + day;
      }
      var month = String(date.getMonth() + 1);
      if (month.length === 1) {
        month = '0' + month;
      }
      this._date = day + '/' + month + '/' + date.getFullYear();
    }
  }, {
    key: 'domain',
    get: function get() {
      return this._domain;
    },
    set: function set(params) {
      if (params.message.body.identity !== undefined) {
        this._domain = (0, _utils.divideEmail)(params.message.body.identity.userProfile.username).domain;
      }
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type;
    },
    set: function set(params) {
      var message = params.message;
      if (message.body.value !== undefined) {
        this._type = message.body.value.resourceType;
      }
    }
  }, {
    key: 'source',
    get: function get() {
      return this._source;
    },
    set: function set(params) {
      if (params.message.body.identity !== undefined) {
        this._source = params.message.body.identity.userProfile.username;
      }
    }
  }, {
    key: 'time',
    get: function get() {
      return this._time;
    },
    set: function set(now) {
      now = new Date();
      var minutes = String(now.getMinutes());
      if (minutes.length === 1) {
        minutes = '0' + minutes;
      }
      this._time = parseInt(String(now.getHours()) + minutes);
    }
  }, {
    key: 'weekday',
    get: function get() {
      return this._weekday;
    },
    set: function set(now) {
      this._weekday = String(new Date().getDay());
    }
  }]);
  return ReThinkCtx;
}();

exports.default = ReThinkCtx;
module.exports = exports['default'];

},{"../utils/utils":454,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],431:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _AdvancedCondition = require('./conditions/AdvancedCondition');

var _AdvancedCondition2 = _interopRequireDefault(_AdvancedCondition);

var _Condition = require('./conditions/Condition');

var _Condition2 = _interopRequireDefault(_Condition);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Rule = function () {
  function Rule(decision, condition, scope, target, priority) {
    (0, _classCallCheck3.default)(this, Rule);

    this.decision = decision;
    this.setCondition(condition);
    this.priority = priority;
    this.scope = scope;
    this.target = target;
  }

  (0, _createClass3.default)(Rule, [{
    key: 'setCondition',
    value: function setCondition(condition) {
      if (!(condition instanceof _Condition2.default || condition instanceof _AdvancedCondition2.default || condition instanceof _AdvancedCondition2.default)) {
        var attribute = condition.attribute;
        switch (attribute) {
          case 'subscription':
            this.condition = new _AdvancedCondition2.default(condition.attribute, condition.operator, condition.params);
            break;
          case undefined:
            this.condition = new _AdvancedCondition2.default(condition);
            break;
          default:
            this.condition = new _Condition2.default(condition.attribute, condition.operator, condition.params);
        }
      } else {
        this.condition = condition;
      }
    }
  }, {
    key: 'evaluate',
    value: function evaluate(context, message, isIncoming) {
      var field = isIncoming ? message.to : message.from;
      var hypertyName = void 0;
      switch (this.scope) {
        case 'global':
          break;

        case 'hyperty':
          if ((0, _utils.isDataObjectURL)(field)) {
            var reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(field));
            if (reporter !== undefined) {
              hypertyName = context.runtimeRegistry.getHypertyName(reporter);
            }
          } else {
            if (field.split('://')[0] === 'hyperty') {
              hypertyName = context.runtimeRegistry.getHypertyName((0, _utils.removePathFromURL)(field));
            }
          }
          if (hypertyName === this.target) {
            break;
          }

          return 'Not Applicable';

        case 'identity':
          var owner = void 0;

          if ((0, _utils.isDataObjectURL)(field)) {
            var _reporter = context.runtimeRegistry.getReporterURLSynchonous((0, _utils.removePathFromURL)(field));
            owner = context.runtimeRegistry.getHypertyOwner(_reporter);
          } else {
            if (field.split('://')[0] === 'hyperty') {
              owner = context.runtimeRegistry.getHypertyOwner((0, _utils.removePathFromURL)(field));
            }
          }
          if (owner !== undefined) {
            owner = (0, _utils.getUserEmailFromURL)(owner);
          }
          if (owner === this.target) {
            break;
          }

          return 'Not Applicable';
      }

      if (this.condition.isApplicable(context, message, this.scope, this.target)) {
        return this.decision;
      } else {
        return 'Not Applicable';
      }
    }
  }]);
  return Rule;
}();

exports.default = Rule;
module.exports = exports['default'];

},{"../utils/utils":454,"./conditions/AdvancedCondition":435,"./conditions/Condition":436,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],432:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to combine the authorization decisions that result from rules evaluation.
*/
var AllowOverrides = function () {
  function AllowOverrides() {
    (0, _classCallCheck3.default)(this, AllowOverrides);
  }

  (0, _createClass3.default)(AllowOverrides, [{
    key: 'combine',


    /**
    * Given an array of individual authorization decisions, prioritizes a positive one.
    * @param    {boolean[]}   decisions
    * @returns  {boolean}
    */
    value: function combine(decisions) {
      if (decisions.indexOf(true) !== -1) {
        return true;
      } else {
        if (decisions.indexOf(false) !== -1) {
          return false;
        } else {
          return 'Not Applicable';
        }
      }
    }
  }]);
  return AllowOverrides;
}();

exports.default = AllowOverrides;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],433:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to combine the authorization decisions that result from rules evaluation.
*/
var BlockOverrides = function () {
  function BlockOverrides() {
    (0, _classCallCheck3.default)(this, BlockOverrides);
  }

  (0, _createClass3.default)(BlockOverrides, [{
    key: 'combine',


    /**
    * Given an array of individual authorisation decisions, prioritises a negative one.
    * @param    {boolean[]}   decisions
    * @returns  {boolean}
    */
    value: function combine(decisions) {
      if (decisions.indexOf(false) !== -1) {
        return false;
      } else {
        if (decisions.indexOf(true) !== -1) {
          return true;
        } else {
          return 'Not Applicable';
        }
      }
    }
  }]);
  return BlockOverrides;
}();

exports.default = BlockOverrides;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],434:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to combine the authorization decisions that result from rules evaluation.
*/
var FirstApplicable = function () {
  function FirstApplicable() {
    (0, _classCallCheck3.default)(this, FirstApplicable);
  }

  (0, _createClass3.default)(FirstApplicable, [{
    key: 'combine',


    /**
    * Given an array of individual authorisation decisions, returns the first one different from 'Not Applicable', either positive or negative.
    * @param    {boolean[]}     decisions
    * @returns  {boolean}
    */
    value: function combine(decisions) {
      for (var i in decisions) {
        if (decisions[i] !== 'Not Applicable') {
          return decisions[i];
        }
      }
      return 'Not Applicable';
    }
  }]);
  return FirstApplicable;
}();

exports.default = FirstApplicable;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],435:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Condition = require('./Condition');

var _Condition2 = _interopRequireDefault(_Condition);

var _Operators = require('../Operators');

var _Operators2 = _interopRequireDefault(_Operators);

var _SubscriptionCondition = require('./SubscriptionCondition');

var _SubscriptionCondition2 = _interopRequireDefault(_SubscriptionCondition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AdvancedCondition = function () {
  function AdvancedCondition(condition) {
    (0, _classCallCheck3.default)(this, AdvancedCondition);

    this.operators = new _Operators2.default();
    if (condition.operators !== undefined) {
      condition = condition.condition;
    }
    condition = this.buildCondition(condition);
    this.condition = condition;
  }

  (0, _createClass3.default)(AdvancedCondition, [{
    key: 'buildCondition',
    value: function buildCondition(condition) {
      if (Array.isArray(condition[1])) {
        condition[1] = this.buildCondition(condition[1]);
      } else {
        if (condition[1].attribute === 'subscription') {
          condition[1] = new _SubscriptionCondition2.default(condition[1].attribute, condition[1].operator, condition[1].params);
        } else {
          condition[1] = new _Condition2.default(condition[1].attribute, condition[1].operator, condition[1].params);
        }
      }

      if (condition[2] !== undefined) {
        if (Array.isArray(condition[2])) {
          condition[2] = this.buildCondition(condition[2]);
        } else {
          if (condition[2].attribute === 'subscription') {
            condition[2] = new _SubscriptionCondition2.default(condition[2].attribute, condition[2].operator, condition[2].params);
          } else {
            condition[2] = new _Condition2.default(condition[2].attribute, condition[2].operator, condition[2].params);
          }
        }
      }
      return condition;
    }
  }, {
    key: 'isApplicable',
    value: function isApplicable(context, message, scope, target, operator, left, right) {
      if (!operator) {
        operator = this.condition[0];
        left = this.condition[1];
        right = this.condition[2];
      }

      while (!(left instanceof _Condition2.default) & !(left instanceof _SubscriptionCondition2.default) & typeof left !== 'boolean') {
        left = this.isApplicable(context, message, scope, target, left[0], left[1], left[2]);
      }
      if (right !== undefined) {
        while (!(right instanceof _Condition2.default) & !(right instanceof _SubscriptionCondition2.default) & typeof right !== 'boolean') {
          right = this.isApplicable(context, message, scope, target, right[0], right[1], right[2]);
        }
      }

      var resultLeft = typeof left === 'boolean' ? left : left.isApplicable(context, message, scope, target);
      var resultRight = void 0;
      if (right !== undefined) {
        resultRight = typeof right === 'boolean' ? right : right.isApplicable(context, message, scope, target);
      }
      return this.operators[operator]([resultLeft, resultRight]);
    }
  }]);
  return AdvancedCondition;
}();

exports.default = AdvancedCondition;
module.exports = exports['default'];

},{"../Operators":426,"./Condition":436,"./SubscriptionCondition":437,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],436:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _Operators = require('../Operators');

var _Operators2 = _interopRequireDefault(_Operators);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to represent a condition and evaluate its applicability.
*/
var Condition = function () {

  /**
  * Creates a new Condition.
  * @class
  * @param  {string}  attribute
  * @param  {string}  operator
  * @param  {*}       params
  */
  function Condition(attribute, operator, params) {
    (0, _classCallCheck3.default)(this, Condition);

    this.attribute = attribute;
    this.operator = operator;
    this.params = params;
    this.operators = new _Operators2.default();
  }

  /**
  * Verifies if the condition is applicable to the message. First, the system value that corresponds to the attribute is retrieved; then, that value is compared with the parameter specified in the condition by executing the operator implementation. If the operator is 'in' and the name of a group is given, then the array holding the members of the group is retrieved before the comparison.
  * @param  {Object}    context   environment where the Policy Engine is being used
  * @param  {Object}    message
  */


  (0, _createClass3.default)(Condition, [{
    key: 'isApplicable',
    value: function isApplicable(context, message) {
      context[this.attribute] = { message: message };
      var value = context[this.attribute];
      var tempParam = void 0;

      if (this.operator === 'in') {
        if (!Array.isArray(this.params)) {
          tempParam = context.getGroup(this.params, message.to);
          return this.operators[this.operator]([tempParam, value]);
        }
      }

      return this.operators[this.operator]([this.params, value]);
    }
  }]);
  return Condition;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = Condition;
module.exports = exports['default'];

},{"../Operators":426,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],437:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _Condition2 = require('./Condition');

var _Condition3 = _interopRequireDefault(_Condition2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @author Ana Caldeira <ana.caldeira@tecnico.ulisboa.pt>
* @classdesc Class to represent a subscription condition and evaluate its applicability.
*/
var SubscriptionCondition = function (_Condition) {
  (0, _inherits3.default)(SubscriptionCondition, _Condition);

  /**
  * Creates a new SubscriptionCondition.
  * @class
  * @param  {string}  attribute
  * @param  {string}  operator
  * @param  {*}       params
  */
  function SubscriptionCondition(attribute, operator, params) {
    (0, _classCallCheck3.default)(this, SubscriptionCondition);
    return (0, _possibleConstructorReturn3.default)(this, (SubscriptionCondition.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition)).call(this, attribute, operator, params));
  }

  /**
  * Verifies if the subscription condition is applicable to the message. First, verifies if the message is of the subscription type; second, verifies if the message is from a remote runtime to guarantee that the subscription is being validated in the destination runtime; third, verifies if the subscription preference is met.
  * @param  {Object}    context   environment where the Policy Engine is being used
  * @param  {Object}    message
  */


  (0, _createClass3.default)(SubscriptionCondition, [{
    key: 'isApplicable',
    value: function isApplicable(context, message) {
      var isSubscription = message.type === 'subscribe';
      var isFromRemoteSM = context.isFromRemoteSM(message.from);
      if (isSubscription & isFromRemoteSM) {
        return (0, _get3.default)(SubscriptionCondition.prototype.__proto__ || (0, _getPrototypeOf2.default)(SubscriptionCondition.prototype), 'isApplicable', this).call(this, context, message);
      } else {
        return false;
      }
    }
  }]);
  return SubscriptionCondition;
}(_Condition3.default); /**
                        * Copyright 2016 PT Inovação e Sistemas SA
                        * Copyright 2016 INESC-ID
                        * Copyright 2016 QUOBIS NETWORKS SL
                        * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                        * Copyright 2016 ORANGE SA
                        * Copyright 2016 Deutsche Telekom AG
                        * Copyright 2016 Apizee
                        * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                        *
                        * Licensed under the Apache License, Version 2.0 (the "License");
                        * you may not use this file except in compliance with the License.
                        * You may obtain a copy of the License at
                        *
                        *   http://www.apache.org/licenses/LICENSE-2.0
                        *
                        * Unless required by applicable law or agreed to in writing, software
                        * distributed under the License is distributed on an "AS IS" BASIS,
                        * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                        * See the License for the specific language governing permissions and
                        * limitations under the License.
                        **/

exports.default = SubscriptionCondition;
module.exports = exports['default'];

},{"./Condition":436,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/get":16,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],438:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _AllowOverrides = require('../combiningAlgorithms/AllowOverrides');

var _AllowOverrides2 = _interopRequireDefault(_AllowOverrides);

var _BlockOverrides = require('../combiningAlgorithms/BlockOverrides');

var _BlockOverrides2 = _interopRequireDefault(_BlockOverrides);

var _utils = require('../../utils/utils');

var _FirstApplicable = require('../combiningAlgorithms/FirstApplicable');

var _FirstApplicable2 = _interopRequireDefault(_FirstApplicable);

var _ReThinkCtx2 = require('../ReThinkCtx');

var _ReThinkCtx3 = _interopRequireDefault(_ReThinkCtx2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RuntimeCoreCtx = function (_ReThinkCtx) {
  (0, _inherits3.default)(RuntimeCoreCtx, _ReThinkCtx);

  function RuntimeCoreCtx(idModule, runtimeRegistry, storageManager) {
    (0, _classCallCheck3.default)(this, RuntimeCoreCtx);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (RuntimeCoreCtx.__proto__ || (0, _getPrototypeOf2.default)(RuntimeCoreCtx)).call(this));

    _this2.idModule = idModule;
    _this2.runtimeRegistry = runtimeRegistry;
    _this2.activeUserPolicy = undefined;
    _this2.serviceProviderPolicy = {};
    _this2.userPolicies = {};
    _this2.storageManager = storageManager;
    return _this2;
  }

  (0, _createClass3.default)(RuntimeCoreCtx, [{
    key: 'loadConfigurations',
    value: function loadConfigurations() {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this.storageManager.get('rethink:activePolicy').then(function (value) {
          _this.activeUserPolicy = value;

          return _this.storageManager.get('rethink:groups');
        }).then(function (groupInfo) {
          var groups = groupInfo;
          _this.groups = groups === undefined ? {} : groups;

          return _this.storageManager.get('rethink:spPolicies');
        }).then(function (policiesInfo) {
          var spPolicies = policiesInfo;
          _this.serviceProviderPolicy = spPolicies === undefined ? {} : spPolicies;

          _this._loadUserPolicies().then(function () {
            resolve();
          });
        });
      });
    }
  }, {
    key: 'prepareForEvaluation',
    value: function prepareForEvaluation(message, isIncoming) {
      var _this3 = this;

      return new _promise2.default(function (resolve, reject) {

        var _this = _this3;
        if (isIncoming) {
          if (_this._isToCypherModule(message)) {
            _this.idModule.decryptMessage(message).then(function (message) {
              /*if (message.type === 'update') {
                _this._isValidUpdate(message).then(message => {*/
              resolve(message);
            }, function (error) {
              reject(error);
              /*});
              } else {
                resolve(message);
              }*/
            });
          } else {
            resolve(message);
          }
        } else {
          console.log('ON prepareForEvaluation', message);
          if (_this._isToSetID(message)) {
            _this._getIdentity(message).then(function (identity) {
              message.body.identity = identity;
              resolve(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        }
      });
    }
  }, {
    key: 'getPolicies',
    value: function getPolicies(message, isIncomingMessage) {
      var policies = {};

      if (this.activeUserPolicy !== undefined) {
        policies.userPolicy = this.userPolicies[this.activeUserPolicy];
      }

      policies.serviceProviderPolicy = this.getServiceProviderPolicy(message, isIncomingMessage);

      return policies;
    }
  }, {
    key: '_isValidUpdate',
    value: function _isValidUpdate(message) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        if (message.from.split('://').length > 1) {
          _this.idModule._getHypertyFromDataObject(message.from).then(function (hypertyURL) {
            if (hypertyURL === message.body.source) {
              resolve(message);
            } else {
              reject('The source of the message is not valid.');
            }
          }, function (error) {
            reject(error);
          });
        } else {
          resolve(message);
        }
      });
    }
  }, {
    key: 'prepareToForward',
    value: function prepareToForward(message, isIncoming, result) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        // hack to disable mutual authentication until #147 is fixed
        resolve(message);

        if (isIncoming & result) {
          var isSubscription = message.type === 'subscribe';
          var isFromRemoteSM = _this.isFromRemoteSM(message.from);
          if (isSubscription & isFromRemoteSM) {
            _this.doMutualAuthentication(message).then(function () {
              resolve(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        } else {
          if (_this._isToCypherModule(message)) {
            _this.idModule.encryptMessage(message).then(function (message) {
              resolve(message);
            }, function (error) {
              reject(error);
            });
          } else {
            resolve(message);
          }
        }
      });
    }
  }, {
    key: 'doMutualAuthentication',
    value: function doMutualAuthentication(message) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {
        var to = message.to.split('/');
        var subsIndex = to.indexOf('subscription');
        var isDataObjectSubscription = subsIndex !== -1;
        var isFromRemoteSM = _this.isFromRemoteSM(message.from);
        if (isDataObjectSubscription & isFromRemoteSM) {
          (function () {
            to.pop();
            var dataObjectURL = to[0] + '//' + to[2] + '/' + to[3];
            _this.idModule.doMutualAuthentication(dataObjectURL, message.body.subscriber).then(function () {
              _this.runtimeRegistry.registerSubscriber(dataObjectURL, message.body.subscriber);
              resolve();
            }, function (error) {
              reject(error);
            });
          })();
        }
      });
    }
  }, {
    key: 'getMyEmails',
    value: function getMyEmails() {
      var identities = this.idModule.getIdentities();
      var emails = [];

      for (var i in identities) {
        emails.push((0, _utils.getUserEmailFromURL)(identities[i].identity));
      }

      return emails;
    }
  }, {
    key: 'getMyHyperties',
    value: function getMyHyperties() {
      var hyperties = this.runtimeRegistry.hypertiesList;
      var hypertiesNames = [];

      for (var i in hyperties) {
        var hypertyName = hyperties[i].objectName;
        if (hypertiesNames.indexOf(hypertyName) === -1) {
          hypertiesNames.push(hypertyName);
        }
      }

      return hypertiesNames;
    }
  }, {
    key: 'getServiceProviderPolicy',
    value: function getServiceProviderPolicy(message, isIncoming) {
      var policy = void 0;

      if (isIncoming) {
        var toHyperty = this.runtimeRegistry.getHypertyName(message.to);
        policy = this.serviceProviderPolicy[toHyperty];
      } else {
        var fromHyperty = this.runtimeRegistry.getHypertyName(message.from);
        policy = this.serviceProviderPolicy[fromHyperty];
      }
      return policy;
    }
  }, {
    key: 'isFromRemoteSM',
    value: function isFromRemoteSM(from) {
      var splitFrom = from.split('://');
      return splitFrom[0] === 'runtime' && from !== this.runtimeRegistry.runtimeURL + '/sm';
    }
  }, {
    key: 'isLocal',
    value: function isLocal(url) {
      return this.runtimeRegistry.isLocal(url);
    }
  }, {
    key: 'isInterworkingProtoStub',
    value: function isInterworkingProtoStub(url) {
      return this.runtimeRegistry.isInterworkingProtoStub(url);
    }
  }, {
    key: '_isToSetID',
    value: function _isToSetID(message) {
      var schemasToIgnore = ['domain-idp', 'runtime', 'domain'];
      var splitFrom = message.from.split('://');
      var fromSchema = splitFrom[0];

      var _from = message.from;

      if (message.body && message.body.hasOwnProperty('source')) _from = message.body.source;

      // Signalling Messages between P2P Stubs don't have Identities. FFS

      if (_from.includes('/p2prequester/') || _from.includes('/p2phandler/')) return false;

      return schemasToIgnore.indexOf(fromSchema) === -1;
    }
  }, {
    key: 'getURL',
    value: function getURL(url) {
      var splitURL = url.split('/');
      return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];
    }
  }, {
    key: '_getIdentity',
    value: function _getIdentity(message) {
      console.log('[Policy.RuntimeCoreCtx.getIdentity] ', message);

      if (message.body.source !== undefined) {
        return this.idModule.getToken(message.body.source, message.to);
      } else

        /*    if (message.type === 'update') {
              return this.idModule.getToken(message.body.source);
            }
        
            if (message.type === 'response' && message.body.source !== undefined) {
              return this.idModule.getToken(message.body.source);
            }*/

        //    if (divideURL(message.from).type === 'hyperty') {
        return this.idModule.getToken(message.from, message.to);
      /*    } else {
            return this.idModule.getToken(this.getURL(message.from));
          }*/
    }

    /**
    * Identifies the messages to be forwarded to the Identity Module for
    * encryption/decryption and integrity validation.
    * @param {Message}    message
    * @returns {boolean}  returns true if the message requires encryption/decryption
    *                     or if its type equals 'handshake'; false otherwise
    */

  }, {
    key: '_isToCypherModule',
    value: function _isToCypherModule(message) {
      var isCreate = message.type === 'create';
      var isFromHyperty = (0, _utils.divideURL)(message.from).type === 'hyperty';
      var isToHyperty = (0, _utils.divideURL)(message.to).type === 'hyperty';
      var isToDataObject = (0, _utils.isDataObjectURL)(message.to);

      // todo: return false for messages coming from interworking stubs.
      // Get descriptor from runtime catalogue and check interworking field.

      return isCreate && isFromHyperty && isToHyperty || isCreate && isFromHyperty && isToDataObject || message.type === 'handshake' || message.type === 'update';
    }

    /**
    * Creates a group with the given name.
    * @param  {String}  groupName
    */

  }, {
    key: '_loadUserPolicies',
    value: function _loadUserPolicies() {
      var _this4 = this;

      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        _this.storageManager.get('rethink:userPolicies').then(function (value) {
          var policies = value;
          if (policies !== undefined) {
            for (var i in policies) {
              _this4.pep.addPolicy('USER', i, policies[i]);
            }
          }
          resolve();
        });
      });
    }
  }, {
    key: '_getLastComponentOfURL',
    value: function _getLastComponentOfURL(url) {
      var split = url.split('/');
      return split[split.length - 1];
    }
  }, {
    key: '_getPoliciesJSON',
    value: function _getPoliciesJSON(policies) {
      for (var i in policies) {
        var combiningAlgorithm = policies[i].combiningAlgorithm;
        if (combiningAlgorithm instanceof _BlockOverrides2.default) {
          policies[i].combiningAlgorithm = 'blockOverrides';
        } else {
          if (combiningAlgorithm instanceof _AllowOverrides2.default) {
            policies[i].combiningAlgorithm = 'allowOverrides';
          } else {
            if (combiningAlgorithm instanceof _FirstApplicable2.default) {
              policies[i].combiningAlgorithm = 'firstApplicable';
            } else {
              policies[i].combiningAlgorithm = undefined;
            }
          }
        }
      }

      return policies;
    }
  }, {
    key: 'saveActivePolicy',
    value: function saveActivePolicy() {
      var _this5 = this;

      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this.storageManager.set('rethink:activePolicy', 0, _this5.activeUserPolicy).then(function () {
          resolve();
        });
      });
    }
  }, {
    key: 'saveGroups',
    value: function saveGroups() {
      var _this6 = this;

      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        _this.storageManager.set('rethink:groups', 0, _this6.groups).then(function () {
          resolve();
        });
      });
    }
  }, {
    key: 'savePolicies',
    value: function savePolicies(source, policy, key) {
      var policiesJson = void 0;

      switch (source) {
        case 'USER':
          policiesJson = (0, _stringify2.default)(this.userPolicies);
          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));
          this.storageManager.set('rethink:userPolicies', 0, policiesJson);
          break;
        case 'SERVICE_PROVIDER':
          if (policy !== undefined & key !== undefined) {
            this.serviceProviderPolicy[key] = policy;
          }
          policiesJson = (0, _stringify2.default)(this.serviceProviderPolicy);
          policiesJson = this._getPoliciesJSON(JSON.parse(policiesJson));
          this.storageManager.set('rethink:spPolicies', 0, policiesJson);
          break;
        default:
          throw Error('Unknown policy source: ' + source);
      }
    }
  }, {
    key: 'getGroupsNames',
    value: function getGroupsNames() {
      var myGroups = this.groups;
      var groupsNames = [];
      if (myGroups !== undefined) {
        for (var groupName in myGroups) {
          groupsNames.push(groupName);
        }
      }
      return groupsNames;
    }
  }, {
    key: 'getGroup',
    value: function getGroup(groupName, destination) {
      var members = [];

      if (groupName === 'preauthorised') {
        var dataObjectURL = destination.split('/');
        dataObjectURL.pop();
        dataObjectURL = dataObjectURL[0] + '//' + dataObjectURL[2];
        members = this.runtimeRegistry.getPreAuthSubscribers(dataObjectURL);
      } else {
        if (this.groups[groupName] !== undefined) {
          members = this.groups[groupName];
        }
      }

      return members;
    }

    /**
    * Creates a group with the given name.
    * @param  {String}  groupName
    */

  }, {
    key: 'createGroup',
    value: function createGroup(groupName) {
      this.groups[groupName] = [];
      this.saveGroups();
    }
  }, {
    key: 'deleteGroup',
    value: function deleteGroup(groupName) {
      delete this.groups[groupName];
      this.saveGroups();
    }

    /**
    * Adds the given user email to the group with the given name.
    * @param  {String}  userEmail
    * @param  {String}  groupName
    */

  }, {
    key: 'addToGroup',
    value: function addToGroup(groupName, userEmail) {
      var myGroups = this.groups;
      if (myGroups[groupName] !== undefined) {
        if (myGroups[groupName].indexOf(userEmail) === -1) {
          myGroups[groupName].push(userEmail);
          this.saveGroups();
        }
      } else {
        throw Error('Group "' + groupName + '" does not exist!');
      }
    }
  }, {
    key: 'removeFromGroup',
    value: function removeFromGroup(groupName, userEmail) {
      var group = this.groups[groupName];

      group.splice(group.indexOf(userEmail), 1);
      this.saveGroups();
    }
  }, {
    key: 'subscription',
    get: function get() {
      return this._subscription;
    },
    set: function set(params) {
      this._subscription = params.message.body.subscriber;
    }
  }]);
  return RuntimeCoreCtx;
}(_ReThinkCtx3.default);

exports.default = RuntimeCoreCtx;
module.exports = exports['default'];

},{"../../utils/utils":454,"../ReThinkCtx":430,"../combiningAlgorithms/AllowOverrides":432,"../combiningAlgorithms/BlockOverrides":433,"../combiningAlgorithms/FirstApplicable":434,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],439:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Core Discovery interface
* Class to allow applications to search for hyperties and DataObjects using the message bus
*/
var Discovery = function () {

  /**
  * To initialise the HypertyDiscover, which will provide the support for hyperties to
  * query users registered in outside the internal core.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {RuntimeURL}          runtimeURL            runtimeURL
  */
  function Discovery(runtimeURL, msgBus) {
    (0, _classCallCheck3.default)(this, Discovery);

    var _this = this;
    _this.messageBus = msgBus;

    _this.domain = (0, _utils.divideURL)(runtimeURL).domain;
    _this.discoveryURL = runtimeURL;
    _this.registryURL = runtimeURL + '/registry/';
  }

  /**
  * function to request about an dataObject registered in domain registry with a given name, and
  * return the dataObject information, if found.
  * @param  {String}              name  dataObject URL
  * @param  {String}            domain (Optional)
  * @return {Promise}          Promise
  */


  (0, _createClass3.default)(Discovery, [{
    key: 'discoverDataObjectPerName',
    value: function discoverDataObjectPerName(name, domain) {
      var _this = this;
      var activeDomain = void 0;

      activeDomain = !domain ? _this.domain : domain;

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: name }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    * function to request about dataObject registered in domain registry, and
    * return the dataObject information, if found.
    * @param  {String}              url  dataObject URL
    * @param  {String}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverDataObjectPerURL',
    value: function discoverDataObjectPerURL(url, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: url }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    *  function to delete an Data Object registered in the Domain Registry
    *  @param   {String}           url              dataObject url
    *  @param   {domain}           domain         (Optional)
    *  @return  {Promise}          Promise          result
    */

  }, {
    key: 'deleteDataObject',
    value: function deleteDataObject(url, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'delete', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { value: { name: url } } };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var response = reply.body.code;

          if (response === 200) {
            resolve(response);
          } else {
            reject('Error on deleting dataObject');
          }
        });
      });
    }

    /**
    * function to request about specific reporter dataObject registered in domain registry, and
    * return the dataObjects from that reporter.
    * @param  {String}           reporter     dataObject reporter
    * @param  {String}           domain       (Optional)
    * @return {Array}           Promise       DataObjects
    */

  }, {
    key: 'discoverDataObjectPerReporter',
    value: function discoverDataObjectPerReporter(reporter, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: reporter }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObjects = reply.body.value;

          if (dataObjects) {
            resolve(dataObjects);
          } else {
            reject('No dataObject was found');
          }
        });
      });
    }

    /** Advanced Search for dataObjects registered in domain registry
    * @param  {String}           user                  user identifier, either in url or email format
    * @param  {Array<string>}    schema (Optional)     types of dataObject schemas
    * @param  {Array<string>}    resources (Optional)  types of dataObject resources
    * @param  {String}           domain (Optional)     domain of the registry to search
    */

  }, {
    key: 'discoverDataObject',
    value: function discoverDataObject(name, schema, resources, domain) {
      var _this = this;
      var activeDomain = void 0;
      //let userIdentifier = convertToUserURL(user);

      activeDomain = !domain ? _this.domain : domain;

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: name,
          criteria: { resources: resources, dataSchemes: schema }
        }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var hyperties = reply.body.value;

          if (hyperties) {
            resolve(hyperties);
          } else {
            reject('No DataObject was found');
          }
        });
      });
    }

    /** Advanced Search for Hyperties registered in domain registry
    * @param  {String}           user                  user identifier, either in url or email format
    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas
    * @param  {Array<string>}    resources (Optional)  types of hyperties resources
    * @param  {String}           domain (Optional)     domain of the registry to search
    */

  }, {
    key: 'discoverHyperty',
    value: function discoverHyperty(user, schema, resources, domain) {
      var _this = this;
      var activeDomain = void 0;
      var userIdentifier = (0, _utils.convertToUserURL)(user);

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: userIdentifier,
          criteria: { resources: resources, dataSchemes: schema }
        }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var hyperties = reply.body.value;

          if (hyperties) {
            resolve(hyperties);
          } else {
            reject('No Hyperty was found');
          }
        });
      });
    }

    /**
    * function to request about users registered in domain registry, and
    * return the last hyperty instance registered by the user.
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverHypertyPerUser',
    value: function discoverHypertyPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL }
      };

      console.log('Message: ', message, activeDomain, identityURL);

      //console.log('message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(message, function (reply) {
          console.log('message reply', reply);

          var hyperty = void 0;
          var mostRecent = void 0;
          var lastHyperty = void 0;
          var value = reply.body.value;

          for (hyperty in value) {
            if (value[hyperty].lastModified !== undefined) {
              if (mostRecent === undefined) {
                mostRecent = new Date(value[hyperty].lastModified);
                lastHyperty = hyperty;
              } else {
                var hypertyDate = new Date(value[hyperty].lastModified);
                if (mostRecent.getTime() < hypertyDate.getTime()) {
                  mostRecent = hypertyDate;
                  lastHyperty = hyperty;
                }
              }
            }
          }

          console.log('Last Hyperty: ', lastHyperty, mostRecent);

          var hypertyURL = lastHyperty;

          if (hypertyURL === undefined) {
            return reject('User Hyperty not found');
          }

          var idPackage = {
            id: email,
            descriptor: value[hypertyURL].descriptor,
            hypertyURL: hypertyURL
          };

          console.log('===> hypertyDiscovery messageBundle: ', idPackage);
          resolve(idPackage);
        });
      });
    }

    /**
    * function to request about users registered in domain registry, and
    * return the all the hyperties registered by the user
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverHypertiesPerUser',
    value: function discoverHypertiesPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL }
      };

      console.log('Message discoverHypertiesPerUser: ', message, activeDomain, identityURL);

      //console.log('message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(message, function (reply) {
          console.log('discoverHypertiesPerUser reply', reply);

          var value = reply.body.value;

          if (!value) {
            return reject('User Hyperty not found');
          }

          resolve(value);
        });
      });
    }

    /**
    *  function to delete an hypertyInstance in the Domain Registry
    *  @param   {String}           user              user url
    *  @param   {String}           hypertyInstance   HypertyInsntance url
    *  @param   {domain}           domain (Optional)
    *  @return  {Promise}          Promise          result
    */

  }, {
    key: 'deleteHyperty',
    value: function deleteHyperty(user, hypertyInstance, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'delete', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { value: { user: user, url: hypertyInstance } } };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var response = reply.body.code;

          if (response) {
            resolve('Hyperty successfully deleted');
          } else {
            reject('Error on deleting hyperty');
          }
        });
      });
    }
  }]);
  return Discovery;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = Discovery;
module.exports = exports['default'];

},{"../utils/utils":454,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],440:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Core Discovery interface
* Class to allow applications to search for hyperties and DataObjects using the message bus
*/
var DiscoveryServiceFramework = function () {

  /**
  * To initialise the HypertyDiscover, which will provide the support for hyperties to
  * query users registered in outside the internal core.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {RuntimeURL}          runtimeURL            runtimeURL
  */
  function DiscoveryServiceFramework(hypertyURL, runtimeURL, msgBus) {
    (0, _classCallCheck3.default)(this, DiscoveryServiceFramework);

    var _this = this;
    _this.messageBus = msgBus;

    _this.domain = (0, _utils.divideURL)(runtimeURL).domain;
    _this.discoveryURL = hypertyURL + '/discovery';
    _this.registryURL = runtimeURL + '/registry/';
  }

  /**
  * function to request about an dataObject registered in domain registry with a given name, and
  * return the dataObject information, if found.
  * @param  {String}              name  dataObject URL
  * @param  {String}            domain (Optional)
  * @return {Promise}          Promise
  */


  (0, _createClass3.default)(DiscoveryServiceFramework, [{
    key: 'discoverDataObjectPerName',
    value: function discoverDataObjectPerName(name, domain) {
      var _this = this;
      var activeDomain = void 0;

      activeDomain = !domain ? _this.domain : domain;

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: name }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    * function to request about dataObject registered in domain registry, and
    * return the dataObject information, if found.
    * @param  {String}              url  dataObject URL
    * @param  {String}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverDataObjectPerURL',
    value: function discoverDataObjectPerURL(url, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: url }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    *  function to delete an Data Object registered in the Domain Registry
    *  @param   {String}           url              dataObject url
    *  @param   {domain}           domain         (Optional)
    *  @return  {Promise}          Promise          result
    */

  }, {
    key: 'deleteDataObject',
    value: function deleteDataObject(url, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'delete', from: _this.discoveryURL, to: _this.registryURL, body: { value: { name: url } } };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var response = reply.body.code;

          if (response === 200) {
            resolve(response);
          } else {
            reject('Error on deleting dataObject');
          }
        });
      });
    }

    /**
    * function to request about specific reporter dataObject registered in domain registry, and
    * return the dataObjects from that reporter.
    * @param  {String}           reporter     dataObject reporter
    * @param  {String}           domain       (Optional)
    * @return {Array}           Promise       DataObjects
    */

  }, {
    key: 'discoverDataObjectPerReporter',
    value: function discoverDataObjectPerReporter(reporter, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: reporter }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var dataObjects = reply.body.value;

          if (dataObjects) {
            resolve(dataObjects);
          } else {
            reject('No dataObject was found');
          }
        });
      });
    }

    /** Advanced Search for dataObjects registered in domain registry
    * @param  {String}           user                  user identifier, either in url or email format
    * @param  {Array<string>}    schema (Optional)     types of dataObject schemas
    * @param  {Array<string>}    resources (Optional)  types of dataObject resources
    * @param  {String}           domain (Optional)     domain of the registry to search
    */

  }, {
    key: 'discoverDataObject',
    value: function discoverDataObject(name, schema, resources, domain) {
      var _this = this;
      var activeDomain = void 0;
      //let userIdentifier = convertToUserURL(user);

      activeDomain = !domain ? _this.domain : domain;

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: name,
          criteria: { resources: resources, dataSchemes: schema }
        }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var hyperties = reply.body.value;

          if (hyperties) {
            resolve(hyperties);
          } else {
            reject('No DataObject was found');
          }
        });
      });
    }

    /** Advanced Search for Hyperties registered in domain registry
    * @param  {String}           user                  user identifier, either in url or email format
    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas
    * @param  {Array<string>}    resources (Optional)  types of hyperties resources
    * @param  {String}           domain (Optional)     domain of the registry to search
    */

  }, {
    key: 'discoverHyperty',
    value: function discoverHyperty(user, schema, resources, domain) {
      var _this = this;
      var activeDomain = void 0;
      var userIdentifier = (0, _utils.convertToUserURL)(user);

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: userIdentifier,
          criteria: { resources: resources, dataSchemes: schema }
        }
      };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var hyperties = reply.body.value;

          if (hyperties) {
            resolve(hyperties);
          } else {
            reject('No Hyperty was found');
          }
        });
      });
    }

    /**
    * function to request about users registered in domain registry, and
    * return the last hyperty instance registered by the user.
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverHypertyPerUser',
    value: function discoverHypertyPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: identityURL }
      };

      console.log('Message: ', message, activeDomain, identityURL);

      //console.log('message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(message, function (reply) {
          console.log('message reply', reply);

          var hyperty = void 0;
          var mostRecent = void 0;
          var lastHyperty = void 0;
          var value = reply.body.value;

          for (hyperty in value) {
            if (value[hyperty].lastModified !== undefined) {
              if (mostRecent === undefined) {
                mostRecent = new Date(value[hyperty].lastModified);
                lastHyperty = hyperty;
              } else {
                var hypertyDate = new Date(value[hyperty].lastModified);
                if (mostRecent.getTime() < hypertyDate.getTime()) {
                  mostRecent = hypertyDate;
                  lastHyperty = hyperty;
                }
              }
            }
          }

          console.log('Last Hyperty: ', lastHyperty, mostRecent);

          var hypertyURL = lastHyperty;

          if (hypertyURL === undefined) {
            return reject('User Hyperty not found');
          }

          var idPackage = {
            id: email,
            descriptor: value[hypertyURL].descriptor,
            hypertyURL: hypertyURL
          };

          console.log('===> hypertyDiscovery messageBundle: ', idPackage);
          resolve(idPackage);
        });
      });
    }

    /**
    * function to request about users registered in domain registry, and
    * return the all the hyperties registered by the user
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

  }, {
    key: 'discoverHypertiesPerUser',
    value: function discoverHypertiesPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.discoveryURL, to: _this.registryURL, body: { resource: identityURL }
      };

      console.log('Message discoverHypertiesPerUser: ', message, activeDomain, identityURL);

      //console.log('message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(message, function (reply) {
          console.log('discoverHypertiesPerUser reply', reply);

          var value = reply.body.value;

          if (!value) {
            return reject('User Hyperty not found');
          }

          resolve(value);
        });
      });
    }

    /**
    *  function to delete an hypertyInstance in the Domain Registry
    *  @param   {String}           user              user url
    *  @param   {String}           hypertyInstance   HypertyInsntance url
    *  @param   {domain}           domain (Optional)
    *  @return  {Promise}          Promise          result
    */

  }, {
    key: 'deleteHyperty',
    value: function deleteHyperty(user, hypertyInstance, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this.domain;
      } else {
        activeDomain = domain;
      }

      var msg = {
        type: 'delete', from: _this.discoveryURL, to: _this.registryURL, body: { value: { user: user, url: hypertyInstance } } };

      return new _promise2.default(function (resolve, reject) {

        _this.messageBus.postMessage(msg, function (reply) {

          var response = reply.body.code;

          if (response) {
            resolve('Hyperty successfully deleted');
          } else {
            reject('Error on deleting hyperty');
          }
        });
      });
    }
  }]);
  return DiscoveryServiceFramework;
}(); /**
     * Copyright 2016 PT Inovação e Sistemas SA
     * Copyright 2016 INESC-ID
     * Copyright 2016 QUOBIS NETWORKS SL
     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
     * Copyright 2016 ORANGE SA
     * Copyright 2016 Deutsche Telekom AG
     * Copyright 2016 Apizee
     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *   http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     **/

exports.default = DiscoveryServiceFramework;
module.exports = exports['default'];

},{"../utils/utils":454,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],441:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _RegistryDataModel2 = require('./RegistryDataModel');

var _RegistryDataModel3 = _interopRequireDefault(_RegistryDataModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)
*   HypertyInstance Data Model used to model instances of Hyperties running in devices and servers.
*/
var HypertyInstance = function (_RegistryDataModel) {
  (0, _inherits3.default)(HypertyInstance, _RegistryDataModel);

  function HypertyInstance(id, url, descriptorURL, descriptor, hypertyURL, user, guid, runtime, context, p2pHandler, p2pRequester, dataSchemes, resources, startingTime, lastModified) {
    (0, _classCallCheck3.default)(this, HypertyInstance);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (HypertyInstance.__proto__ || (0, _getPrototypeOf2.default)(HypertyInstance)).call(this, id, url, descriptorURL, p2pRequester, startingTime, lastModified));

    var _this = _this2;
    _this._descriptor = descriptor;
    _this._hypertyURL = hypertyURL;
    _this._user = user;
    _this._guid = guid;
    _this._runtime = runtime;
    _this._context = context;
    _this._p2pHandler = p2pHandler;
    _this._dataSchemes = dataSchemes;
    _this._resources = resources;
    return _this2;
  }

  (0, _createClass3.default)(HypertyInstance, [{
    key: 'user',
    set: function set(identity) {
      var _this = this;
      _this.user = identity;
    },
    get: function get() {
      var _this = this;
      return _this._user;
    }
  }, {
    key: 'hypertyURL',
    get: function get() {
      var _this = this;
      return _this._hypertyURL;
    }
  }, {
    key: 'descriptor',
    get: function get() {
      var _this = this;
      return _this._descriptor;
    }
  }, {
    key: 'objectName',
    get: function get() {
      var _this = this;
      return _this._descriptor._objectName;
    }
  }, {
    key: 'p2pHandler',
    get: function get() {
      var _this = this;
      return _this._p2pHandler;
    }
  }, {
    key: 'dataSchemes',
    get: function get() {
      var _this = this;
      return _this._dataSchemes;
    }
  }, {
    key: 'resources',
    get: function get() {
      var _this = this;
      return _this._resources;
    }
  }, {
    key: 'runtimeURL',
    get: function get() {
      var _this = this;
      return _this._runtime;
    }
  }]);
  return HypertyInstance;
}(_RegistryDataModel3.default); /**
                                * Copyright 2016 PT Inovação e Sistemas SA
                                * Copyright 2016 INESC-ID
                                * Copyright 2016 QUOBIS NETWORKS SL
                                * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
                                * Copyright 2016 ORANGE SA
                                * Copyright 2016 Deutsche Telekom AG
                                * Copyright 2016 Apizee
                                * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
                                *
                                * Licensed under the Apache License, Version 2.0 (the "License");
                                * you may not use this file except in compliance with the License.
                                * You may obtain a copy of the License at
                                *
                                *   http://www.apache.org/licenses/LICENSE-2.0
                                *
                                * Unless required by applicable law or agreed to in writing, software
                                * distributed under the License is distributed on an "AS IS" BASIS,
                                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
                                * See the License for the specific language governing permissions and
                                * limitations under the License.
                                **/


exports.default = HypertyInstance;
module.exports = exports['default'];

},{"./RegistryDataModel":443,"babel-runtime/core-js/object/get-prototype-of":7,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"babel-runtime/helpers/inherits":17,"babel-runtime/helpers/possibleConstructorReturn":18}],442:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _runtimeUtils = require('../runtime/runtimeUtils');

var _AddressAllocation = require('../allocation/AddressAllocation');

var _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);

var _HypertyInstance = require('./HypertyInstance');

var _HypertyInstance2 = _interopRequireDefault(_HypertyInstance);

var _MessageFactory = require('service-framework/dist/MessageFactory');

var _utils = require('../utils/utils.js');

var _Discovery = require('./Discovery');

var _Discovery2 = _interopRequireDefault(_Discovery);

var _DiscoveryServiceFramework = require('./DiscoveryServiceFramework');

var _DiscoveryServiceFramework2 = _interopRequireDefault(_DiscoveryServiceFramework);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var STATUS = { CREATED: 'created', LIVE: 'live', DEPLOYED: 'deployed', PROGRESS: 'in-progress', DISCONNECTED: 'disconnected', DEAD: 'dead' };

/*import IdentityManager from './IdentityManager';
import Discovery from './Discovery';*/

/**
* Runtime Registry Interface
*/
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var Registry = function () {

  /**
  * To initialise the Runtime Registry with the RuntimeURL that will be the basis to derive the internal runtime addresses when allocating addresses to internal runtime component. In addition, the Registry domain back-end to be used to remotely register Runtime components, is also passed as input parameter.
  * @param  {MessageBus}          msgbus                msgbus
  * @param  {HypertyRuntimeURL}   runtimeURL            runtimeURL
  * @param  {AppSandbox}          appSandbox            appSandbox
  * @param  {runtimeCatalogue}    runtimeCatalogue      runtimeCatalogue
  * @param  {DomainURL}           remoteRegistry        remoteRegistry
  * @param  {storageManager}      storageManager
  */
  function Registry(runtimeURL, appSandbox, identityModule, runtimeCatalogue, runtimeCapabilities, storageManager, remoteRegistry) {
    (0, _classCallCheck3.default)(this, Registry);


    // how some functions receive the parameters for example:
    // new Registry('hyperty-runtime://sp1/123', appSandbox, idModule, remoteRegistry);
    // registry.registerStub(sandbox, 'sp1');
    // registry.registerHyperty(sandBox, 'hyperty-runtime://sp1/123');
    // registry.resolve('hyperty-runtime://sp1/123');

    if (!runtimeURL) throw new Error('runtimeURL is missing.');
    if (!storageManager) throw new Error('storageManager is missing.');
    /*if (!remoteRegistry) throw new Error('remoteRegistry is missing');*/

    var _this = this;

    _this.registryURL = runtimeURL + '/registry/';
    _this.appSandbox = appSandbox;
    _this.runtimeURL = runtimeURL;
    _this.runtimeCatalogue = runtimeCatalogue;
    _this.remoteRegistry = remoteRegistry;
    _this.idModule = identityModule;
    _this.storageManager = storageManager;
    _this.runtimeCapabilities = runtimeCapabilities;
    _this.identifier = (0, _utils.generateGUID)();

    // the expires in 3600, represents 1 hour
    //the expires is in seconds, unit of measure received by the domain registry
    _this.expiresTime = 3600;

    _this.hypertiesListToRemove = {};
    _this.hypertiesList = [];
    _this.remoteHypertyList = [];
    _this.idpLegacyProxyList = {};

    _this.p2pHandlerStub = {};
    _this.p2pRequesterStub = {};
    _this.p2pConnectionList = {};
    _this.p2pHandlerAssociation = {};

    _this.protostubsList = {};
    _this.idpProxyList = {};
    _this.dataObjectList = {};
    _this.subscribedDataObjectList = {};
    _this.sandboxesList = { sandbox: {}, appSandbox: {} };
    _this.pepList = {};
    _this.registries = {};

    _this._domain = (0, _utils.divideURL)(_this.registryURL).domain;
    _this.sandboxesList.appSandbox[runtimeURL] = appSandbox;
    var msgFactory = new _MessageFactory.MessageFactory('false', '{}');
    _this.messageFactory = msgFactory;
  }

  (0, _createClass3.default)(Registry, [{
    key: 'discoverHypertyPerUser',


    /**
    * function to request about users registered in domain registry, and
    * return the last hyperty instance registered by the user.
    * @param  {email}              email
    * @param  {domain}            domain (Optional)
    * @return {Promise}          Promise
    */

    // TODO: implement a cache system
    value: function discoverHypertyPerUser(email, domain) {
      var _this = this;
      var activeDomain = void 0;

      if (!domain) {
        activeDomain = _this._domain;
      } else {
        activeDomain = domain;
      }

      var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));

      // message to query domain registry, asking for a user hyperty.
      var message = {
        type: 'read', from: _this.registryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL }
      };

      console.log('[Registry] Message: ', message, activeDomain, identityURL);

      //console.log('[Registry] message READ', message);
      return new _promise2.default(function (resolve, reject) {

        _this._messageBus.postMessage(message, function (reply) {
          console.log('[Registry] message reply', reply);

          var hyperty = void 0;
          var mostRecent = void 0;
          var lastHyperty = void 0;
          var value = reply.body.value;

          for (hyperty in value) {
            if (value[hyperty].lastModified !== undefined) {
              if (mostRecent === undefined) {
                mostRecent = new Date(value[hyperty].lastModified);
                lastHyperty = hyperty;
              } else {
                var hypertyDate = new Date(value[hyperty].lastModified);
                if (mostRecent.getTime() < hypertyDate.getTime()) {
                  mostRecent = hypertyDate;
                  lastHyperty = hyperty;
                }
              }
            }
          }

          console.log('[Registry] Last Hyperty: ', lastHyperty, mostRecent);

          var hypertyURL = lastHyperty;

          if (hypertyURL === undefined) {
            return reject('User Hyperty not found');
          }

          var idPackage = {
            id: email,
            descriptor: value[hypertyURL].descriptor,
            hypertyURL: hypertyURL
          };

          console.log('[Registry] ===> hypertyDiscovery messageBundle: ', idPackage);
          resolve(idPackage);
        });
      });
    }
  }, {
    key: '_getIdentityAssociated',
    value: function _getIdentityAssociated(type, hypertyURL) {
      var _this = this;

      for (var hyperty in _this.hypertiesList) {
        var value = _this.hypertiesList[hyperty];
        if (value._hypertyURL === hypertyURL) {
          switch (type) {
            case 'username':
              return value._user.username;
            case 'cn':
              return value._user.cn;
            case 'locale':
              return value._user.locale;
            case 'avatar':
              return value._user.avatar;
            case 'userURL':
              return value._user.userURL;
            case '.':
              return value._user;
            default:
              return '';
          }
        }
      }
      return '';
    }

    /**
    * query the domain registry for information from a dataObject URL
    * @param  {String}   url            dataObject URL
    * @return {JSON}     dataObject     data object
    */

  }, {
    key: 'discoverDataObjectPerURL',
    value: function discoverDataObjectPerURL(url, domain) {

      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var activeDomain = void 0;

        if (!domain) {
          activeDomain = _this._domain;
        } else {
          activeDomain = domain;
        }

        var msg = {
          type: 'read', from: _this.registryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: url }
        };

        _this._messageBus.postMessage(msg, function (reply) {

          var dataObject = reply.body.value;

          if (dataObject) {
            resolve(dataObject);
          } else {
            reject('DataObject not found');
          }
        });
      });
    }

    /**
    * This function is used to return the sandbox instance where the Application is executing. It is assumed there is just one App per Runtime instance.
    */

  }, {
    key: 'getAppSandbox',
    value: function getAppSandbox() {
      var _this = this;
      return _this.appSandbox;
    }

    /**
    * This function returns the user associated to the hyperty URL
    * @param    {String}    hypertyURL      hyperty URL
    * @return   {String}    userURL         user URL
    */

  }, {
    key: 'getHypertyOwner',
    value: function getHypertyOwner(hypertyURL) {

      var _this = this;
      var userURL = void 0;

      for (var index in _this.hypertiesList) {
        var hyperty = _this.hypertiesList[index];
        if (hyperty.hypertyURL === hypertyURL) {
          userURL = hyperty.user.userURL;
        }
      }
      return userURL;
    }

    /**
    * returns the hyperty Name from a given url. This url could be from a dataObject or hyperty
    * @param    {String}    url      hyperty or dataObject URL
    * @return   {String}    hypertyName     hyperty Name
    */

  }, {
    key: 'getHypertyName',
    value: function getHypertyName(url) {
      var _this = this;

      var isHypertyURL = (0, _utils.divideURL)(url).type === 'hyperty';

      //value to be returned in the end
      var hypertyName = void 0;

      //if is not an hyperty, check if is a dataObject and obtain his reporter
      var hypertyURL = isHypertyURL ? hypertyURL = url : _this.getReporterURLSynchonous(url);

      for (var index in _this.hypertiesList) {
        var hyperty = _this.hypertiesList[index];
        if (hyperty.hypertyURL === hypertyURL) {
          hypertyName = hyperty.objectName;
          break;
        }
      }
      return hypertyName;
    }

    /**
    * function to return the reporterURL associated with the dataobject URL
    * @param    {String}     dataObjectURL    dataObjectURL
    * @return   {String}     reporterURL      reporterURL
    */

  }, {
    key: 'getReporterURL',
    value: function getReporterURL(dataObjectURL) {
      var _this = this;

      var dataObject = _this.dataObjectList[dataObjectURL];

      return new _promise2.default(function (resolve, reject) {
        if (dataObject) {
          resolve(dataObject.reporter);
        } else {
          reject('No reporter was found');
        }
      });
    }

    /**
    * function to return the reporterURL associated with the dataobject URL. no promise returned
    * @param    {String}     dataObjectURL    dataObjectURL
    * @return   {String}     reporterURL      reporterURL
    */

  }, {
    key: 'getReporterURLSynchonous',
    value: function getReporterURLSynchonous(dataObjectURL) {
      var _this = this;

      var dataObject = _this.dataObjectList[dataObjectURL];

      return dataObject ? dataObject.reporter : undefined;
    }

    /**
    * returns the hyperty URL that subscribed the dataObject
    * @param    {String}     url            url format
    * @return   {String}    Hyperty URL subscribed to the URL
    */

  }, {
    key: 'getDataObjectSubscriberHyperty',
    value: function getDataObjectSubscriberHyperty(url) {
      var _this = this;

      return _this.subscribedDataObjectList[url];
    }

    /**
    * register a desired dataObject to subscribe
    * @param    {String}    dataObjectURL      dataObject URL
    */

  }, {
    key: 'registerSubscribedDataObject',
    value: function registerSubscribedDataObject(dataObjectURL, hypertyURL) {
      var _this = this;
      if (_this.subscribedDataObjectList[dataObjectURL] === undefined) {
        _this.subscribedDataObjectList[dataObjectURL] = hypertyURL;
      }
    }

    /**
    * Function to return the list of pre authorised users received in the creation of a data object
    * @param    {String}            dataObjectURL    dataObjectURL
    * @return   {Array<String>}     preAuth         List of pre authorised users
    */

  }, {
    key: 'getPreAuthSubscribers',
    value: function getPreAuthSubscribers(dataObjectURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];
      var preAuth = [];

      if (dataObject) {
        preAuth = dataObject.preAuth;
      }
      return preAuth;
    }

    /**
    * send requests to unregister all hyperties registered in domain registry
    * @return   {Promise}     return a promise if the result of unregistration all hyperties
    */

  }, {
    key: 'unregisterAllHyperties',
    value: function unregisterAllHyperties() {
      var _this = this;

      var unregisterResults = [];

      return new _promise2.default(function (resolve, reject) {

        for (var index in _this.hypertiesList) {
          var hyperty = _this.hypertiesList[index];
          var result = _this.unregisterHypertyInstance(hyperty.user.userURL, hyperty.hypertyURL);
          unregisterResults.push(result);
        }

        _promise2.default.all(unregisterResults).then(function () {

          resolve('successfully unregistered all hyperties');
        }, function (error) {
          reject(error);
        });
      });
    }

    /**
    *  function to unregister an hypertyInstance in the Domain Registry
    *  @param   {String}      user        user url
    *  @param   {String}      hypertyInstance   HypertyInsntance url
    *
    */

  }, {
    key: 'unregisterHypertyInstance',
    value: function unregisterHypertyInstance(user, hypertyInstance) {
      //TODO working but the user
      var _this = this;

      var message = { type: 'delete', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { value: { user: user, url: hypertyInstance } } };

      _this._messageBus.postMessage(message, function (reply) {
        console.log('[Registry] unregister hyperty Reply', reply);
      });
    }

    /**
    *  function to delete an dataObjectInstance in the Domain Registry
    *  @param   {String}    name      DataObjectName
    */

  }, {
    key: 'deleteDataObjectInstance',
    value: function deleteDataObjectInstance(name) {
      var _this = this;

      var message = { type: 'delete', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { value: { name: name } } };

      _this._messageBus.postMessage(message, function (reply) {
        console.log('[Registry] unregister dataObject Reply', reply);
      });
    }

    /**
    * Function to update an Hyperty
    */

  }, {
    key: 'updateHypertyInstance',
    value: function updateHypertyInstance(resource, value) {
      var _this = this;

      var message = { type: 'UPDATE', from: _this.registryURL,
        to: 'domain://registry.' + _this._domain + '/',
        body: { resource: resource, value: value } };

      _this._messageBus.post.postMessage(message, function (reply) {
        console.log('[Registry] Updated hyperty reply', reply);
      });
    }

    /**
    * register a new subscriber in the dataObject registered
    * @param  {String}   dataObjectURL    dataObject URL
    * @param  {String}   subscriberURL    subscriber URL
    */

  }, {
    key: 'registerSubscriber',
    value: function registerSubscriber(dataObjectURL, subscriberURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];

      if (dataObject) {
        dataObject.subscribers.push(subscriberURL);
        _this.dataObjectList[dataObjectURL] = dataObject;
      }
    }

    /**
    * get the subscribers registered within a dataObject
    * @param  {String}          dataObjectURL    dataObject URL
    * @param  {Array<String>}   Substribers List
    */

  }, {
    key: 'getDataObjectSubscribers',
    value: function getDataObjectSubscribers(dataObjectURL) {
      var _this = this;
      var dataObject = _this.dataObjectList[dataObjectURL];

      if (dataObject) {
        return dataObject.subscribers;
      } else {
        throw 'No dataObject was found';
      }
    }

    /**
    * To register a new Data Object in the runtime which returns the dataObjectURL allocated to the new Data Object.
    * @param  {String}      identifier                  identifier
    * @param  {String}      dataObjectschema            dataObjectschema
    * @param  {String}      dataObjectUrl               dataObjectUrl
    * @param {String}      dataObjectReporter           dataObjectReporter
    * @param  {Array}     resources                     dataObject resources
    * @param  {Array}     authorise                     list of pre authorised authorised IDs
    */

  }, {
    key: 'registerDataObject',
    value: function registerDataObject(identifier, dataObjectschema, dataObjectUrl, dataObjectReporter, resources, addressURL, authorise) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var dataScheme = [];
        var filteredDataScheme = dataObjectUrl.split(':');
        dataScheme.push(filteredDataScheme[0]);

        _this.storageManager.get('registry:DataObjectURLs').then(function (urlsList) {

          if (!urlsList) {
            urlsList = {};
          }

          //update the list with the new elements
          urlsList[identifier + dataObjectschema + resources + dataObjectReporter] = addressURL.address;

          var p2pHandler = void 0;
          var p2pRequester = void 0;

          if ((0, _keys2.default)(_this.p2pHandlerStub).length !== 0) {
            p2pHandler = _this.p2pHandlerStub[_this.runtimeURL].url;
            p2pRequester = _runtimeUtils.runtimeUtils.runtimeDescriptor.p2pRequesterStub;
          }

          var runtime = _this.runtimeURL;
          var status = 'live';

          //message to register the new hyperty, within the domain registry
          var messageValue = {
            name: identifier,
            resources: resources,
            dataSchemes: dataScheme,
            schema: dataObjectschema,
            url: dataObjectUrl,
            expires: _this.expiresTime,
            reporter: dataObjectReporter,
            preAuth: authorise,
            subscribers: [],
            runtime: runtime,
            status: status
          };

          if (p2pHandler) {
            messageValue.p2pHandler = p2pHandler;
            messageValue.p2pRequester = p2pRequester;
          }

          if (_this.isInterworkingProtoStub(dataObjectReporter)) messageValue.interworking = true;

          var message = void 0;

          if (addressURL.newAddress) {

            console.log('[Registry] registering new data object URL', dataObjectUrl);

            message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };
          } else {

            console.log('[Registry] registering previously registered data object URL', dataObjectUrl);

            /*messageValue = {name: identifier, resources: resources, dataSchemes: dataScheme, schema: dataObjectschema, url: dataObjectUrl, expires: _this.expiresTime, reporter: dataObjectReporter, preAuth: authorise, subscribers: []};
             message = {type:'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: {value: messageValue, policy: 'policy'}};*/

            message = {
              type: 'update',
              to: 'domain://registry.' + _this.registryDomain + '/',
              from: _this.registryURL,
              body: { resource: dataObjectUrl, value: { status: 'live' } }
            };
          }

          _this.dataObjectList[dataObjectUrl] = messageValue;

          // step to obtain the list of all URL registered to updated with the new one.
          _this.storageManager.set('registry:DataObjectURLs', 0, urlsList).then(function () {

            /*let message = _this.messageFactory.createCreateMessageRequest(
              _this.registryURL,
              'domain://registry.' + _this.registryDomain + '/',
              messageValue,
              'policy'
            );*/

            _this._messageBus.postMessage(message, function (reply) {
              console.log('[Registry] ===> registerDataObject Reply: ', reply);
              if (reply.body.code === 200) {
                resolve('ok');
              } else {
                reject('error on register DataObject');
              }
            });
          });
        });
      });
    }
  }, {
    key: '_getResourcesAndSchemes',
    value: function _getResourcesAndSchemes(descriptor) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var resources = void 0;

        // check if the hyperty resources is a vector or a string
        // TODO delete later when catalogue is fixed
        if (typeof descriptor.hypertyType === 'string') {
          resources = [];
          resources.push(descriptor.hypertyType);
        } else {
          resources = descriptor.hypertyType;
        }

        var descriptorDataSchema = descriptor.dataObjects;
        var dataSchemasArray = [];

        //this will create a array with a Promise in each position
        for (var index in descriptorDataSchema) {
          dataSchemasArray.push(_this.runtimeCatalogue.getDataSchemaDescriptor(descriptorDataSchema[index]));
        }

        // as soon as the previous array is completed, this will wait for the resolve of all promises in the array
        _promise2.default.all(dataSchemasArray).then(function (dataSchemas) {

          var filteredDataSchemas = [];
          for (var _index in dataSchemas) {
            var dataSchema = dataSchemas[_index];
            filteredDataSchemas.push(dataSchema.sourcePackage.sourceCode.properties.scheme.constant);
          }

          console.log('[Registry] Hyperty Schemas', filteredDataSchemas);
          console.log('[Registry] Hyperty resources', resources);

          resolve({ resources: resources, dataSchema: filteredDataSchemas });
        });
      });
    }

    /**
    * method that returns previously registered Hyperty or DataObjects URLS, for given characteristics
    * @param  {JSON}        info           object or hyperty charateristics info
    * @return {addressURL}  addressURL     return the URL if there is any previousy registered URL, return undefined otherwise
    */

  }, {
    key: 'checkRegisteredURLs',
    value: function checkRegisteredURLs(info) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var objectType = info.reporter ? 'registry:DataObjectURLs' : 'registry:HypertyURLs';

        _this.storageManager.get(objectType).then(function (urlsList) {

          if (!urlsList) {
            urlsList = {};
          }

          if (objectType === 'registry:HypertyURLs') {
            _this._getResourcesAndSchemes(info).then(function (value) {
              if (urlsList[value.resources + value.dataSchema]) {
                console.log('[Registry] reusage of hyperty URL');
                return resolve(urlsList[value.resources + value.dataSchema]);
              } else {
                console.log('[Registry] no hyperty URL was previously registered ');
                return resolve(undefined);
              }
            });
          } else {

            var characteristics = info.name + info.schema + info.resources + info.reporter;

            if (urlsList[characteristics]) {
              console.log('[Registry] reusage of dataObject URL');
              return resolve(urlsList[characteristics]);
            } else {
              console.log('[Registry] no dataObject URL was previously registered');
              return resolve(undefined);
            }
          }
        });
      });
    }
  }, {
    key: 'checkHypertyP2PHandler',
    value: function checkHypertyP2PHandler(hypertyURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        var hyperty = void 0;

        for (var i in _this.remoteHypertyList) {
          hyperty = _this.remoteHypertyList[i];

          console.log('[Registry - checkHypertyP2PHandler] - for each Hyperty: ', hyperty);

          if (hyperty.hypertyURL === hypertyURL) {

            if (hyperty.hasOwnProperty('p2pHandler')) {
              resolve({
                p2pHandler: hyperty.p2pHandler,
                p2pRequester: hyperty.p2pRequester,
                runtimeURL: hyperty.runtimeURL
              });
            } else {
              reject('[Registry checkHypertyP2PHandler] Hyperty found does not support P2P', hyperty);
            }
          }
        }

        if (!hyperty) {
          console.log('[Registry - checkHypertyP2PHandler] - Hyperty: ', hyperty);

          var message = {
            type: 'read',
            from: _this.registryURL,
            to: 'domain://registry.' + _this._domain + '/',
            body: {
              resource: hypertyURL
            }
          };

          _this._messageBus.postMessage(message, function (reply) {
            console.log('discover hyperty per url reply', reply);
            if ('value' in reply.body) {

              //todo: store retrieved hyperty
              var resolvedHyperty = reply.body.value;

              if (resolvedHyperty.hasOwnProperty('p2pHandler')) {
                resolve({
                  p2pHandler: resolvedHyperty.p2pHandler,
                  p2pRequester: resolvedHyperty.p2pRequester,
                  runtimeURL: resolvedHyperty.runtime
                });
              } else {
                reject('[Registry checkHypertyP2PHandler] Hyperty found does not support P2P', reply.body.value);
              }
            } else {
              reject('Hyperty with P2PHandler not found', reply.body.code);
            }
          });
        }
      });
    }

    /**
    * To register a new Hyperty in the runtime which returns the HypertyURL allocated to the new Hyperty.
    * @param  {Sandbox}             sandbox               sandbox
    * @param  {HypertyCatalogueURL} HypertyCatalogueURL   descriptor
    * @return {HypertyURL}          HypertyURL
    */

  }, {
    key: 'registerHyperty',
    value: function registerHyperty(sandbox, descriptorURL, descriptor, addressURL) {
      var _this = this;

      var hypertyCapabilities = void 0;

      return new _promise2.default(function (resolve, reject) {

        //assuming descriptor come in this format, the service-provider-domain url is retrieved by a split instruction
        //hyperty-catalogue://<service-provider-domain>/<catalogue-object-identifier>
        var domainUrl = (0, _utils.divideURL)(descriptorURL).domain;

        if (domainUrl.includes('catalogue')) {
          domainUrl = domainUrl.replace('catalogue.', '');
        }

        _this.idModule.getIdentityAssertion().then(function (result) {

          var userProfile = result.userProfile;

          // hack while domain registry does not support discovery per email
          var email = userProfile.userURL.split('://')[1].split('/')[1];
          var identityURL = 'user://' + email.split('@')[1] + '/' + email.split('@')[0];

          if (_this._messageBus === undefined) {
            reject('MessageBus not found on registerStub');
          } else {
            //call check if the protostub exist: to be removed
            /*  _this.resolve(domainUrl).then(function(a) {
              console.log('[Registry registerHyperty] stub to domain registry- ', a);*/

            _this.storageManager.get('registry:HypertyURLs').then(function (urlsList) {

              console.log('[Registry registerHyperty] storageManager] - ', urlsList);

              _this._getResourcesAndSchemes(descriptor).then(function (value) {

                hypertyCapabilities = value;

                if (!urlsList) {
                  urlsList = {};
                }

                urlsList[hypertyCapabilities.resources + hypertyCapabilities.dataSchema] = addressURL.address;
                _this.storageManager.set('registry:HypertyURLs', 0, urlsList).then(function () {

                  _this.registryDomain = domainUrl;

                  //check whether the received sanbox e ApplicationSandbox or a normal sandbox
                  if (sandbox.type === 'app') {
                    _this.sandboxesList.appSandbox[addressURL.address[0]] = sandbox;
                  } else if (sandbox.type === 'normal') {
                    _this.sandboxesList.sandbox[addressURL.address[0]] = sandbox;
                  } else {
                    reject('Wrong SandboxType');
                  }

                  var p2pHandler = void 0;
                  var p2pRequester = void 0;

                  if ((0, _keys2.default)(_this.p2pHandlerStub).length !== 0) {
                    p2pHandler = _this.p2pHandlerStub[_this.runtimeURL].url;
                    p2pRequester = _runtimeUtils.runtimeUtils.runtimeDescriptor.p2pRequesterStub;
                  }

                  var runtime = _this.runtimeURL;
                  var status = 'live';

                  var hyperty = new _HypertyInstance2.default(_this.identifier, _this.registryURL, descriptorURL, descriptor, addressURL.address[0], userProfile, 'guid', _this.runtimeURL, 'ctx', p2pHandler, p2pRequester, hypertyCapabilities.dataSchema, hypertyCapabilities.resources);

                  _this.hypertiesList.push(hyperty);

                  //message to register the new hyperty, within the domain registry
                  var messageValue = void 0;
                  var message = void 0;

                  if (addressURL.newAddress) {
                    console.log('[Registry registerHyperty] registering new Hyperty URL', addressURL.address[0]);

                    messageValue = {
                      user: identityURL,
                      descriptor: descriptorURL,
                      url: addressURL.address[0],
                      expires: _this.expiresTime,
                      resources: hypertyCapabilities.resources,
                      dataSchemes: hypertyCapabilities.dataSchema,
                      runtime: runtime,
                      status: status
                    };

                    if (p2pHandler) {
                      messageValue.p2pHandler = p2pHandler;
                      messageValue.p2pRequester = p2pRequester;
                    }

                    console.log('[Registry registerHyperty] registering new Hyperty at domain registry ', messageValue);

                    message = { type: 'create', from: _this.registryURL, to: 'domain://registry.' + _this.registryDomain + '/', body: { value: messageValue, policy: 'policy' } };
                  } else {
                    console.log('[Registry registerHyperty] registering previously registered Hyperty URL', addressURL.address[0]);

                    message = {
                      type: 'update',
                      to: 'domain://registry.' + _this.registryDomain + '/',
                      from: _this.registryURL,
                      body: { resource: addressURL.address[0], value: { status: 'live', user: identityURL } }
                    };

                    if (p2pHandler) {
                      message.body.value.p2pHandler = p2pHandler;
                    }
                  }

                  console.log('[Registry registerHyperty] updating Hyperty registration at domain registry  - ', message);

                  _this._messageBus.postMessage(message, function (reply) {
                    console.log('[Registry registerHyperty] Hyperty registration update response: ', reply);

                    if (reply.body.code === 200) {
                      resolve(addressURL.address[0]);
                    } else {
                      reject('Failed to register an Hyperty');
                    }
                  });

                  //timer to keep the registration alive
                  // the time is defined by a little less than half of the expires time defined
                  var keepAliveTimer = setInterval(function () {

                    /*let message = _this.messageFactory.createCreateMessageRequest(
                      _this.registryURL,
                      'domain://registry.' + _this.registryDomain + '/',
                      messageValue,
                      'policy'
                    );*/

                    var message = {
                      type: 'update',
                      from: _this.registryURL,
                      to: 'domain://registry.' + _this.registryDomain + '/',
                      body: { resource: addressURL.address[0], value: { status: 'live' } } };

                    _this._messageBus.postMessage(message, function (reply) {
                      console.log('[Registry registerHyperty] KeepAlive Reply: ', reply);
                    });
                  }, _this.expiresTime / 1.1 / 2 * 1000);
                }).catch(function (reason) {
                  console.log('[Registry registerHyperty] Error: ', reason);
                  reject(reason);
                });
              });
            });
          }
        }, function (err) {
          reject('[Registry registerHyperty] Failed to obtain an identity', err);
        });
      });
    }

    /**
    * To unregister a previously registered Hyperty
    * @param  {HypertyURL}          HypertyURL url        url
    */

  }, {
    key: 'unregisterHyperty',
    value: function unregisterHyperty(url) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var found = false;
        var index = 0;

        for (index = 0; index < _this.hypertiesList.length; index++) {
          var hyperty = _this.hypertiesList[index];
          if (hyperty !== undefined) {
            if (hyperty.hypertyURL === url) {
              found = true;
              break;
            }
          }
        }

        if (found === false) {
          reject('Hyperty not found');
        } else {
          delete _this.hypertiesList[index];
          resolve('Hyperty successfully deleted');
        }
      });
    }

    /**
    * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).
    * @param  {DomainURL}           DomainURL            url
    * @return {RuntimeURL}           RuntimeURL
    */

  }, {
    key: 'discoverProtostub',
    value: function discoverProtostub(url) {
      if (!url) throw new Error('Parameter url needed');
      var _this = this;

      var dividedURL = (0, _utils.divideURL)(url);
      var domainURL = dividedURL.domain;

      if (_this.protostubsList.hasOwnProperty(domainURL) && _this.protostubsList[domainURL].status === STATUS.LIVE) {
        return _this.protostubsList[domainURL];
      } else {

        _this.protostubsList[domainURL] = {
          status: STATUS.CREATED
        };

        throw new Error('[Registry - discoverProtoStub ] Message Node Protostub Not Found. Creating one');
      }
    }

    /**
    * To discover protocol stubs available in the runtime for a certain domain. If available, it returns the runtime url for the protocol stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers (do we need something similar for Hyperties?).
    * @param  {RuntimeURL}           RuntimeURL            url
    * @return {RuntimeURL}           RuntimeURL
    */

  }, {
    key: 'discoverP2PStub',
    value: function discoverP2PStub(runtimeURL) {
      var _this = this;

      if (runtimeURL) {

        if (_this.p2pRequesterStub.hasOwnProperty(runtimeURL) && _this.p2pRequesterStub[runtimeURL].status === STATUS.LIVE) {
          return _this.p2pRequesterStub[runtimeURL];
        } else {
          _this.p2pRequesterStub[runtimeURL] = {
            status: STATUS.CREATED
          };

          throw new Error('[Registry - discoverP2PStub ] P2P Requester Stub Not Found. Creating one');
        }
      } else {

        if (_this.p2pHandlerStub.hasOwnProperty(_this.runtimeURL) && _this.p2pHandlerStub[_this.runtimeURL].status === STATUS.LIVE) {
          return _this.p2pHandlerStub[_this.runtimeURL];
        } else {
          _this.p2pHandlerStub[_this.runtimeURL] = {
            status: STATUS.CREATED
          };

          throw new Error('[Registry - discoverP2PStub ] P2P Handler Stub Not Found. Creating one');
        }
      }
    }

    /**
     * To register a new Protocol Stub in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.
     * @param  {Sandbox}       Sandbox
     * @param  {stubID}        Domain or hyperty runtime to register the stub
     * @param  {descriptorURL}     Catalogue URL of the Protostub descriptor
     * @param  {descriptor}     Protostub descriptor
     * @return {RuntimeProtoStubURL}
     */

  }, {
    key: 'registerStub',
    value: function registerStub(sandbox, stubID, p2pConfig, descriptorURL, descriptor) {
      var _this = this;

      var _stubDescriptor = descriptor;

      return new _promise2.default(function (resolve, reject) {

        var runtimeProtoStubURL = void 0;

        //check if messageBus is registered in registry or not
        if (_this._messageBus === undefined) {
          reject('MessageBus not found on registerStub');
        }

        console.info('[Registry - registerStub] - stubID ', stubID);

        if (!stubID.indexOf('msg-node.')) {
          stubID = stubID.substring(stubID.indexOf('.') + 1);
        }

        var isP2PHandler = false;
        var P2PRequesterStub = void 0;

        if (p2pConfig) {
          if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {
            isP2PHandler = p2pConfig.isHandlerStub;
            runtimeProtoStubURL = 'runtime://' + (0, _utils.divideURL)(stubID).domain + '/p2phandler/' + (0, _utils.generateGUID)();
            console.info('[Registry - registerStub - isP2PHandler] - ', runtimeProtoStubURL);

            _this.p2pHandlerStub[stubID] = {
              url: runtimeProtoStubURL,
              status: STATUS.CREATED
            };

            _this.p2pHandlerAssociation[_this.runtimeURL] = [];

            _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;
            resolve(_this.p2pHandlerStub[stubID]);
          } else {
            P2PRequesterStub = p2pConfig.p2pRequesterStub;
            runtimeProtoStubURL = 'runtime://' + (0, _utils.divideURL)(p2pConfig.remoteRuntimeURL).domain + '/p2prequester/' + (0, _utils.generateGUID)();
            console.info('[Registry - registerStub - P2PRequesterStub] - ', P2PRequesterStub, ' - ', runtimeProtoStubURL);

            // to be clarified what is this p2pHandlerAssociation

            _this.p2pHandlerAssociation[_this.runtimeURL].push(runtimeProtoStubURL);
            _this.p2pRequesterStub[stubID] = {
              url: runtimeProtoStubURL,
              status: STATUS.CREATED
            };

            _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;
            resolve(_this.p2pRequesterStub[stubID]);
          }
        } else {
          runtimeProtoStubURL = 'runtime://' + stubID + '/protostub/' + (0, _utils.generateGUID)();

          console.info('[Registry - registerStub - Normal Stub] - ', stubID);

          // TODO: Optimize this
          _this.protostubsList[stubID] = {
            url: runtimeProtoStubURL,
            status: STATUS.CREATED
          };

          if (descriptorURL) _this.protostubsList[stubID].descriptorURL = descriptorURL;

          if (_stubDescriptor && _stubDescriptor.interworking) {
            _this.protostubsList[stubID].interworking = _stubDescriptor.interworking;
          }

          _this.sandboxesList.sandbox[runtimeProtoStubURL] = sandbox;

          resolve(_this.protostubsList[stubID]);
        }

        // resolve(runtimeProtoStubURL);

        _this._messageBus.addListener(runtimeProtoStubURL + '/status', function (msg) {
          if (msg.resource === msg.to + '/status') {
            console.log('RuntimeProtostubURL/status message: ', msg.body.value);

            if (runtimeProtoStubURL.includes('protostub')) {

              var filtered = (0, _keys2.default)(_this.protostubsList).filter(function (key) {
                return _this.protostubsList[key].url === runtimeProtoStubURL;
              }).map(function (key) {
                _this.protostubsList[key].status = msg.body.value;
              });
            } else {

              var remoteRuntimeURL = msg.body.resource;

              var p2pConnection = _this.p2pConnectionList[remoteRuntimeURL];

              if (p2pConnection) {
                _this.p2pConnectionList[remoteRuntimeURL].status = msg.body.value;
                _this.p2pConnectionList[remoteRuntimeURL].url = runtimeProtoStubURL;
              } else {

                p2pConnection = {
                  status: msg.body.value,
                  url: runtimeProtoStubURL
                };

                _this.p2pConnectionList[remoteRuntimeURL] = p2pConnection;
              }

              if (runtimeProtoStubURL.includes('p2prequester')) {

                var _filtered = (0, _keys2.default)(protostubList).filter(function (key) {
                  return protostubList[key].url === runtimeProtoStubURL;
                }).map(function (key) {
                  p2pRequesterStub[key].status = msg.body.value;
                });
              }
            }
          }
        });
      });
    }

    /**
    * To unregister a previously registered protocol stub
    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     hypertyRuntimeURL
    */

  }, {
    key: 'unregisterStub',
    value: function unregisterStub(hypertyRuntimeURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        if (_this.protostubsList.hasOwnProperty(hypertyRuntimeURL)) {
          delete _this.protostubsList[hypertyRuntimeURL];
          resolve('ProtostubURL removed');
        } else {
          reject('Error on unregisterStub: Hyperty not found');
        }
      });
    }

    /**
     * To register a new Identity Provider proxy in the runtime including as input parameters the function to postMessage, the DomainURL that is connected with the stub, which returns the RuntimeURL allocated to the new ProtocolStub.
     * @param {Sandbox}        Sandbox
     * @param  {DomainURL}     DomainURL service provider domain
     * @return {RuntimeIdpProxyURL}
     */

  }, {
    key: 'registerIdpProxy',
    value: function registerIdpProxy(sandbox, domainURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var idpProxyStubURL = void 0;

        //check if messageBus is registered in registry or not
        if (_this._messageBus === undefined) {
          reject('MessageBus not found on registerStub');
        }

        idpProxyStubURL = 'domain-idp://' + domainURL + '/stub/' + (0, _utils.generateGUID)();

        // TODO: Optimize this
        _this.idpProxyList[domainURL] = {
          url: idpProxyStubURL,
          status: STATUS.PROGRESS
        };

        _this.sandboxesList.sandbox[idpProxyStubURL] = sandbox;

        // sandbox.addListener('*', function(msg) {
        //   _this._messageBus.postMessage(msg);
        // });

        resolve(idpProxyStubURL);

        _this._messageBus.addListener(idpProxyStubURL + '/status', function (msg) {
          if (msg.resource === msg.to + '/status') {
            console.log('[Registry] idpProxyStubURL/status message: ', msg.body.value);
          }
        });
      });
    }

    /**
    * To discover idpProxy stubs available in the runtime for a certain domain. If available, it returns the runtime url for the idpProxy stub that connects to the requested domain. Required by the runtime BUS to route messages to remote servers or peers
    * @param  {DomainURL}           DomainURL            url
    * @return {RuntimeURL}           RuntimeURL         idpProxyUrl
    */

  }, {
    key: 'discoverIdpProxy',
    value: function discoverIdpProxy(url) {
      if (!url) throw new Error('Parameter url needed');
      var _this = this;

      var dividedURL = (0, _utils.divideURL)(url);
      var domainURL = dividedURL.domain;

      if (_this.idpProxyList.hasOwnProperty(domainURL) && _this.idpProxyList[domainURL].status === STATUS.LIVE) {
        return _this.idpProxyList[domainURL];
      } else {

        _this.idpProxyList[domainURL] = {
          status: STATUS.PROGRESS
        };

        throw new Error('[Registry - discoverIdpProxy ] Idp Proxy Not Found. Creating one');
      }
    }

    /**
    * To register a new Policy Enforcer in the runtime including as input parameters the function to postMessage, the HypertyURL associated with the PEP, which returns the RuntimeURL allocated to the new Policy Enforcer component.
    * @param  {Message.Message} postMessage postMessage
    * @param  {HypertyURL}          HypertyURL            hyperty
    * @return {HypertyRuntimeURL}   HypertyRuntimeURL
    */

  }, {
    key: 'registerPEP',
    value: function registerPEP(postMessage, hyperty) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        //TODO check what parameter in the postMessage the pep is.
        _this.pepList[hyperty] = postMessage;
        resolve('PEP registered with success');
      });
    }

    /**
    * To unregister a previously registered protocol stub
    * @param  {HypertyRuntimeURL}   HypertyRuntimeURL     HypertyRuntimeURL
    */

  }, {
    key: 'unregisterPEP',
    value: function unregisterPEP(HypertyRuntimeURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var result = _this.pepList[HypertyRuntimeURL];

        if (result === undefined) {
          reject('Pep Not found.');
        } else {
          resolve('PEP successfully removed.');
        }
      });
    }

    /**
    * To discover sandboxes available in the runtime for a certain domain. Required by the runtime UA to avoid more than one sandbox for the same domain.
    * @param  {DomainURL} DomainURL url
    * @return {RuntimeSandbox}           RuntimeSandbox
    */

  }, {
    key: 'getSandbox',
    value: function getSandbox(url) {
      if (!url) throw new Error('Parameter url needed');
      console.log('[Registry getSandbox] getSandbox: ', url);

      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        var request = void 0;

        //first try to find the url in the appSandbox list
        request = _this.sandboxesList.appSandbox[url];

        //if no appSandbox was found, try to search in the normal sandboxes list
        if (!request) {
          request = _this.sandboxesList.sandbox[url];

          if (!request) {

            var domain = void 0;

            if (url.includes('://')) domain = (0, _utils.divideURL)(url).domain;else {
              domain = url;
            }

            // search in the sandboxes list for a entry containing the domain given
            for (var sandbox in _this.sandboxesList.sandbox) {
              if (sandbox.includes(domain)) {
                request = _this.sandboxesList.sandbox[sandbox];
                break;
              }
            }
          }
        }

        if (!request) {
          reject('no sandbox found for: ' + url);
        } else {
          resolve(request);
        }
      });
    }
  }, {
    key: 'resolveNormalStub',
    value: function resolveNormalStub(url) {
      console.log('resolveNormalStub ' + url);
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //split the url to find the domainURL. deals with the url for example as:
        //"hyperty-runtime://sp1/protostub/123",
        var dividedURL = (0, _utils.divideURL)(url);
        var domainUrl = dividedURL.domain;
        var type = dividedURL.type;
        var islegacy = void 0;

        if (url.includes(_this.runtimeURL)) {
          console.error('[Registry - resolve] URL to be resolved should have listeners ', url);
          reject('[Registry - resolve] URL to be resolved should have listeners ', url);
        }

        // resolve the domain protostub in case of a message to global registry

        if (url.includes('global://registry')) {
          domainUrl = _this._domain;
        } else {
          if (!domainUrl.indexOf('msg-node.') || !domainUrl.indexOf('registry.')) {
            domainUrl = domainUrl.substring(domainUrl.indexOf('.') + 1);
          }
        }

        _this.isLegacy(url).then(function (isLegacy) {

          // if legacy it should resolve for <protocol>.<domain>

          if (isLegacy && type !== 'domain-idp') domainUrl = type + '.' + (0, _utils.getUserIdentityDomain)(url);

          console.log('[Registry.resolve] domainUrl:', domainUrl);

          var registredComponent = void 0;

          if (type === 'domain-idp') {
            registredComponent = _this.idpProxyList.hasOwnProperty(domainUrl) ? _this.idpProxyList[domainUrl] : false;
          } else {
            registredComponent = _this.protostubsList.hasOwnProperty(domainUrl) ? _this.protostubsList[domainUrl] : false;
          }

          if (registredComponent && registredComponent.hasOwnProperty('status') && registredComponent.status === STATUS.DEPLOYED) {
            console.info('TESTING Resolved: ', registredComponent.url);
            resolve(registredComponent.url);
          } else {
            if (type === 'domain-idp') {
              // _this.trigger('runtime:loadIdpProxy', domainUrl);

              _this._loader.loadIdpProxy(domainUrl).then(function (result) {
                registredComponent = _this.idpProxyList[domainUrl];
                console.info('Resolved IDPProxy: ', registredComponent, result);
                _this.idpProxyList[domainUrl].status = STATUS.DEPLOYED;
                resolve(registredComponent.url);
              }).catch(function (reason) {
                console.error('Error resolving IDPProxy: ', reason);
                reject(reason);
              });
            } else {
              // _this.trigger('runtime:loadStub', domainUrl);

              _this._loader.loadStub(domainUrl).then(function (result) {
                registredComponent = _this.protostubsList[domainUrl];
                console.info('Resolved Protostub: ', registredComponent, result);
                _this.protostubsList[domainUrl].status = STATUS.DEPLOYED;
                resolve(registredComponent.url);
              }).catch(function (reason) {
                console.error('Error resolving Protostub: ', reason);
                reject(reason);
              });
            }
          }
        });
        //      resolve();
      }).catch(function (reason) {
        console.error('[Registry.resolve] Error resolving islegacy: ', reason);
        reject(reason);
      });
    }

    /**
    * To verify if source is valid and to resolve target runtime url address if needed (eg protostub runtime url in case the message is to be dispatched to a remote endpoint).
    * @param  {URL.URL}  url       url
    * @return {Promise<URL.URL>}                 Promise <URL.URL>
    */

  }, {
    key: 'resolve',
    value: function resolve(url) {
      console.log('[Registry - Resolve] -  ' + url);
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        //split the url to find the domainURL. deals with the url for example as:
        //"hyperty-runtime://sp1/protostub/123",

        // Skip p2p procedure when not supported by the Runtime or for backend services

        if (!_this.p2pHandlerStub[_this.runtimeURL] || (0, _utils.isBackendServiceURL)(url)) {

          _this.resolveNormalStub(url).then(function (returnURL) {
            resolve(returnURL);
          });
        } else {
          _this.checkHypertyP2PHandler(url).then(function (hypertyInfo) {

            var p2pConnection = _this.p2pConnectionList[hypertyInfo.runtimeURL];

            if (!p2pConnection) {
              p2pConnection = {};
            }

            if (p2pConnection.status === STATUS.LIVE) {
              resolve(p2pConnection.url);
            } else {

              if (p2pConnection.status === STATUS.CREATED) {
                _this.resolveNormalStub(url).then(function (returnURL) {
                  resolve(returnURL);
                });
              } else {
                p2pConnection.status = STATUS.CREATED;
                _this.p2pConnectionList[hypertyInfo.runtimeURL] = p2pConnection;

                console.log('[Registry - resolve] loadStub with p2pRequester: ', hypertyInfo);

                var p2pConfig = { remoteRuntimeURL: hypertyInfo.runtimeURL, p2pHandler: hypertyInfo.p2pHandler, p2pRequesterStub: true };

                // TODO stub load
                _this._loader.loadStub(hypertyInfo.p2pRequester, p2pConfig).then(function (protostubInfo) {
                  p2pConnection.status = STATUS.CREATED;
                  _this.p2pConnectionList[hypertyInfo.runtimeURL] = p2pConnection;

                  resolve(protostubInfo.url);
                }).catch(function (error) {
                  reject(error);
                });
              }
            }
          }, function (reason) {
            console.error('[Registry - Resolve] - Reason: ', reason);

            _this.resolveNormalStub(url).then(function (returnURL) {
              resolve(returnURL);
            });
          });
        }
      });
    }

    /**
    * To verify if url is from a legacy domain.
    * @param  {URL.URL}  url      url
    * @return {boolean}
    */

  }, {
    key: 'isLegacy',
    value: function isLegacy(url) {
      var _this = this;
      return new _promise2.default(function (resolve, reject) {

        if (url === _this._domain) return resolve(false);

        console.log('[Registry] [Registry.Registry.isLegacy] ', url);

        // TODO: to be defined in the runtime configuration
        var nonLegacy = ["runtime", "hyperty-runtime", "domain", "global", "hyperty"];

        var urlDivided = (0, _utils.divideURL)(url);

        if (nonLegacy.indexOf(urlDivided.type) !== -1 || urlDivided.domain === _this._domain) return resolve(false);

        var domain = urlDivided.domain;

        console.log('[Registry] [Registry.Registry.isLegacy] domain: ', domain);
        if (_this.idpLegacyProxyList.hasOwnProperty(domain)) {
          var result = _this.idpLegacyProxyList[domain];
          if (result.interworking) return resolve(result.interworking);else return resolve(false);
        }

        _this._loader.descriptors.getIdpProxyDescriptor(domain).then(function (result) {
          console.log('[Registry] [Registry.Registry.isLegacy] Legacy stub descriptor: ', result);
          _this.idpLegacyProxyList[domain] = result;
          if (result.interworking) resolve(result.interworking);else resolve(false);
        }).catch(function (reason) {
          console.warn('problem loading stub for domain:', domain);
          resolve(false);
        });
      });
    }

    /**
    * To verify if URL is locally registered or not.
    * @param  {URL.URL}  url      url
    * @return {boolean}
    */

  }, {
    key: 'isLocal',
    value: function isLocal(url) {

      var runtimeScheme = ['hyperty-runtime', 'runtime'];
      var hypertyScheme = ['hyperty'];
      var urlScheme = url.split('://')[0];

      // Process Runtime Core URLs.
      // Messages originated from protostubs should also not include the runtimeURL in its URL.

      if (runtimeScheme.indexOf(urlScheme) !== -1) {
        return url.includes(this.runtimeURL);
      }

      // Process Hyperty URLs

      if (hypertyScheme.indexOf(urlScheme) !== -1) {
        return this.hypertiesList.hasOwnProperty(url);
      }

      // Process Data Object URLs

      if (url.includes('/subscription')) {
        url = url.substring(0, url.indexOf('/subscription'));
      }

      var dataObject = this.dataObjectList[url];

      if (dataObject) {
        if (dataObject.interworking) return !dataObject.interworking;
        return true;
      }
      return false;
    }

    /**
    * To verify if protostub is to interwork with a legacy domain.
    * @param  {URL.URL}  runtimeProtostubURL      The runtime URL of the Protostub
    * @return {boolean}
    */

  }, {
    key: 'isInterworkingProtoStub',
    value: function isInterworkingProtoStub(runtimeProtostubURL) {

      var _this = this;

      if (!runtimeProtostubURL.includes('/protostub/')) return false;

      var filtered = (0, _keys2.default)(_this.protostubsList).filter(function (key) {
        return _this.protostubsList[key].url === runtimeProtostubURL;
      }).map(function (key) {

        if (_this.protostubsList[key].hasOwnProperty('interworking')) return _this.protostubsList[key].interworking;else return false;
      })[0];

      return filtered;
    }
  }, {
    key: 'loader',
    set: function set(loader) {
      var _this = this;
      _this._loader = loader;
    },
    get: function get() {
      var _this = this;
      return _this._loader;
    }

    /**
    * return the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */

  }, {
    key: 'messageBus',
    get: function get() {
      var _this = this;
      return _this._messageBus;
    }

    /**
    * Set the messageBus in this Registry
    * @param {MessageBus}           messageBus
    */
    ,
    set: function set(messageBus) {
      var _this = this;
      _this._messageBus = messageBus;

      _this._messageBus.addListener(_this.registryURL, function (msg) {
        console.log('[Registry] listener messageBus');

        var isHyperty = (0, _utils.isHypertyURL)(msg.from);
        var isDiscovery = msg.from.substring(msg.from.length - 10, msg.from.length) === '/discovery';

        var hasCriteria = msg.body.hasOwnProperty('criteria');
        var isURLResource = void 0;
        var isUserResource = void 0;
        var isHypertyResource = void 0;

        if (msg.body.hasOwnProperty('resource') && msg.body.resource !== '.') {
          isURLResource = (0, _utils.isURL)(msg.body.resource);
          isUserResource = (0, _utils.isUserURL)(msg.body.resource);
          isHypertyResource = (0, _utils.isHypertyURL)(msg.body.resource);
        }
        var isDelete = msg.type === 'delete';
        var hasName = void 0;
        var hasUser = void 0;

        if (msg.body.hasOwnProperty('value')) {
          hasName = msg.body.value.hasOwnProperty('name');
          hasUser = msg.body.value.hasOwnProperty('user');
        }

        if (isHyperty && isDiscovery) {
          console.log('[Registry] hypertyDiscovery');
          if (isDelete && hasName) {
            console.log('[Registry] deleteDataObject');
          } else if (isDelete && hasUser) {
            console.log('[Registry] deleteHyperty');
          } else if (hasCriteria && isUserResource) {
            console.log('discoverHyperty');
            for (var i in _this.remoteHypertyList) {
              var hyperty = _this.remoteHypertyList[i];
              if ((0, _stringify2.default)(hyperty.resources) === (0, _stringify2.default)(msg.body.criteria.resources) && (0, _stringify2.default)(hyperty.dataSchemes) === (0, _stringify2.default)(msg.body.criteria.dataSchemes) && hyperty.user.userURL === msg.body.resource) {
                var url = hyperty.url;
                var valueJson = {};
                valueJson[url] = hyperty.info;
                var message = {
                  type: 'response',
                  to: msg.from,
                  from: msg.to,
                  body: {
                    value: valueJson
                  }
                };
                return _this._messageBus.postMessage(message);
              }
            }

            _this.discovery.discoverHyperty(msg.body.resource, msg.body.criteria.dataSchemes, msg.body.criteria.resources).then(function (value) {
              var mostRecentHyperty = void 0;
              (0, _keys2.default)(value).forEach(function (a) {
                var hyperty = new _HypertyInstance2.default(undefined, undefined, value[a].descriptor, undefined, a, { userURL: value[a].userID }, 'guid', _this.runtimeURL, 'ctx', value[a].p2pHandler, value[a].p2pRequester, value[a].dataSchemes, value[a].resources, value[a].startingTime, value[a].lastModified);
                hyperty.info = value;
                if (!mostRecentHyperty) {
                  mostRecentHyperty = hyperty;
                } else {
                  var hypertyDate = new Date(hyperty.lastModified);
                  var mostRecentHypertyDate = new Date(mostRecentHyperty.lastModified);

                  if (hypertyDate > mostRecentHypertyDate) {
                    mostRecentHyperty = hyperty;
                    console.log('update date');
                  }
                }
              });

              if (mostRecentHyperty) {
                console.log('push');
                _this.remoteHypertyList.push(mostRecentHyperty);
              }
            });
          } else if (hasCriteria && !isURLResource) {
            console.log('[Registry] discoverDataObject');
          } else if (isHypertyResource) {
            console.log('[Registry] discoverDataObjectPerReporter');
          } else if (isUserResource) {
            console.log('[Registry] discoverHypertyPerUser');
          } else if (isURLResource) {
            console.log('[Registry] discoverDataObjectPerURL');
          } else if (!isURLResource) {
            console.log('[Registry] discoverDataObjectPerName');
          }
        } else {
          // msg sent by identity manager library
          var userUrl = _this._getIdentityAssociated(msg.body.resource, msg.body.criteria);

          var reply = { id: msg.id, type: 'response', to: msg.from, from: msg.to, body: { resource: userUrl } };
          reply.body.code = userUrl ? 200 : 404;

          _this._messageBus.postMessage(reply);
        }
      });

      // also set up messageBus in the IdentityModule component
      // TODO redefine a better way to add the messageBus in the IdModule
      _this.idModule.messageBus = messageBus;

      // Install AddressAllocation
      var addressAllocation = new _AddressAllocation2.default(_this.registryURL, messageBus, _this);
      _this.addressAllocation = addressAllocation;

      var discovery = new _Discovery2.default(_this.runtimeURL, messageBus);
      _this.discovery = discovery;

      var discoveryServiceFramework = new _DiscoveryServiceFramework2.default('hyperty://localhost/123', _this.runtimeURL, messageBus);
      _this.discoveryServiceFramework = discoveryServiceFramework;

      /*let identityManager = new IdentityManager('hyperty://localhost/833a6e52-515b-498b-a57b-e3daeece48d2', _this.runtimeURL, messageBus);
      _this.identityManager = identityManager;*/
    }
  }]);
  return Registry;
}();

exports.default = Registry;
module.exports = exports['default'];

},{"../allocation/AddressAllocation":417,"../runtime/runtimeUtils":448,"../utils/utils.js":454,"./Discovery":439,"./DiscoveryServiceFramework":440,"./HypertyInstance":441,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/keys":9,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"service-framework/dist/MessageFactory":416}],443:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
/**
*   @author: Gil Dias (gil.dias@tecnico.ulisboa.pt)
*   Registry Data Model includes all Objects to be handled by the Registry functionality including
*/
var RegistryDataModel = function () {
  function RegistryDataModel(id, url, descriptorURL, p2pRequester, startingTime, lastModified, status, stubs, stubsConfiguration) {
    (0, _classCallCheck3.default)(this, RegistryDataModel);

    var _this = this;

    _this._id = id;
    _this._url = url;
    _this._descriptorURL = descriptorURL;
    _this._startingTime = startingTime;
    _this._lastModified = lastModified;
    _this._status = status;
    _this._stubs = stubs;
    _this._stubsConfiguration = stubsConfiguration;
    _this._p2pRequester = p2pRequester;
  }

  (0, _createClass3.default)(RegistryDataModel, [{
    key: "id",
    get: function get() {
      var _this = this;
      return _this._id;
    }
  }, {
    key: "url",
    get: function get() {
      var _this = this;
      return _this._url;
    }
  }, {
    key: "descriptor",
    get: function get() {
      var _this = this;
      return _this._descriptorURL;
    }
  }, {
    key: "p2pRequester",
    get: function get() {
      var _this = this;
      return _this._p2pRequester;
    }
  }, {
    key: "lastModified",
    get: function get() {
      var _this = this;
      return _this._lastModified;
    }
  }]);
  return RegistryDataModel;
}();

exports.default = RegistryDataModel;
module.exports = exports["default"];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],444:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Descriptors = function () {
  function Descriptors(runtimeURL, catalogue, runtimeConfiguration) {
    (0, _classCallCheck3.default)(this, Descriptors);

    if (!runtimeURL) throw Error('The descriptor need to know the runtime url to be used');
    if (!catalogue) throw Error('The descriptor needs the catalogue instance');
    if (!runtimeConfiguration) throw Error('The descriptor needs the runtime configuration');

    this.runtimeConfiguration = runtimeConfiguration;
    this.runtimeURL = runtimeURL;
    this.catalogue = catalogue;
  }

  (0, _createClass3.default)(Descriptors, [{
    key: 'getHypertyDescriptor',
    value: function getHypertyDescriptor(hypertyURL) {
      return this.catalogue.getHypertyDescriptor(hypertyURL);
    }
  }, {
    key: 'getStubDescriptor',
    value: function getStubDescriptor(stubURL) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {

        var domain = void 0;
        var protostub = void 0;
        var protoStubURL = void 0;

        var originDividedURL = (0, _utils.divideURL)(_this.runtimeURL);
        var originDomain = originDividedURL.domain;

        if (stubURL.includes('://')) {
          var dividedURL = (0, _utils.divideURL)(stubURL);
          domain = dividedURL.domain;
          var path = dividedURL.identity;
          if (path) protostub = path.substring(path.lastIndexOf('/') + 1);else {
            protostub = 'default';
          }
        } else {
          protostub = 'default';
          domain = stubURL;
        }

        /*    if (!domain) {
              domain = stubURL;
            }
              if (!protostub) {
              protostub = 'default';
            } else {
              protostub = protostub.substring(protostub.lastIndexOf('/') + 1);
            }*/

        protoStubURL = (0, _utils.buildURL)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub', protostub);
        if (domain !== _this.runtimeConfiguration.domain) {
          if (!stubURL.indexOf('https') || !stubURL.indexOf('hyperty-catalogue')) {
            protoStubURL = stubURL;
          } else {

            // TODO: check how to load form different configuration domain
            var resource = (0, _utils.getConfigurationResources)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');
            protoStubURL = resource.prefix + domain + resource.suffix + protostub;
          }
        }

        console.log('Load ProtocolStub for domain, ' + domain + ' : ', protoStubURL);
        return _this.catalogue.getStubDescriptor(protoStubURL).then(function (result) {

          resolve(result);
        }).catch(function (error) {

          console.log('Error: ', error);

          protostub = domain;
          domain = originDomain;

          var resource = (0, _utils.getConfigurationResources)(_this.runtimeConfiguration, 'catalogueURLs', 'protocolstub');
          protoStubURL = resource.prefix + domain + resource.suffix + protostub;

          console.log('Fallback -> Load Protocolstub for domain, ' + domain + ' : ', protostub);
          return _this.catalogue.getStubDescriptor(protoStubURL);
        }).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }, {
    key: 'getIdpProxyDescriptor',
    value: function getIdpProxyDescriptor(idpProxyURL) {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {

        var domain = void 0;
        var idpproxy = void 0;
        var protoStubURL = void 0;

        var originDividedURL = (0, _utils.divideURL)(_this2.runtimeURL);
        var originDomain = originDividedURL.domain;

        if (idpProxyURL.includes('://')) {
          var dividedURL = (0, _utils.divideURL)(idpProxyURL);
          domain = dividedURL.domain;
          var path = dividedURL.identity;
          if (path) idpproxy = path.substring(path.lastIndexOf('/') + 1);else {
            idpproxy = 'default';
          }
        } else {
          idpproxy = 'default';
          domain = idpProxyURL;
        }

        var resource = (0, _utils.getConfigurationResources)(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy');

        idpProxyURL = resource.prefix + domain + resource.suffix + idpproxy;
        console.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);
        return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL).then(function (result) {

          resolve(result);
        }).catch(function () {

          idpproxy = domain;
          domain = originDomain;

          idpProxyURL = (0, _utils.buildURL)(_this2.runtimeConfiguration, 'catalogueURLs', 'idpProxy', idpproxy);

          console.log('Load Idp Proxy for domain, ' + domain + ' : ', idpProxyURL);
          return _this2.catalogue.getIdpProxyDescriptor(idpProxyURL);
        }).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }
  }]);
  return Descriptors;
}();

exports.default = Descriptors;
module.exports = exports['default'];

},{"../utils/utils":454,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],445:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _AddressAllocation = require('../allocation/AddressAllocation');

var _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Loader = function () {
  function Loader(runtimeURL, runtimeConfiguration, runtimeDescriptorsInstance) {
    (0, _classCallCheck3.default)(this, Loader);

    if (!runtimeConfiguration) throw Error('[Runtime.Loader] The descriptor need to know the runtime configuration');
    if (!runtimeDescriptorsInstance) throw Error('[Runtime.Loader] The descriptor need to know the runtime Descriptor instance');

    this.runtimeConfiguration = runtimeConfiguration;
    this.descriptors = runtimeDescriptorsInstance;
  }

  /**
   * Set runtime url
   * @param  {string} value runtimeURL
   */


  (0, _createClass3.default)(Loader, [{
    key: 'loadHyperty',


    /**
    * Deploy Hyperty from Catalogue URL
    * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;
    */
    value: function loadHyperty(hypertyDescriptorURL) {
      var _this = this;

      if (!this._readyToUse()) return false;
      if (!hypertyDescriptorURL) throw new Error('[Runtime.Loader] Hyperty descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var _hypertyURL = void 0;
        var _hypertySandbox = void 0;
        var _hypertyDescriptor = void 0;
        var _hypertySourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.Error('[Runtime.Loader] Something failed on the deploy hyperty: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Get Hyperty descriptor
        // TODO: the request Module should be changed,
        // because at this moment it is incompatible with nodejs;
        // Probably we need to pass a factory like we do for sandboxes;
        console.info('[Runtime.Loader] ------------------ Hyperty ------------------------');
        console.info('[Runtime.Loader] Get hyperty descriptor for :', hypertyDescriptorURL);
        return _this.descriptors.getHypertyDescriptor(hypertyDescriptorURL).then(function (hypertyDescriptor) {
          // at this point, we have completed "step 2 and 3" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md
          console.info('[Runtime.Loader] 1: return hyperty descriptor');

          // hyperty contains the full path of the catalogue URL, e.g.
          // catalogue.rethink.eu/.well-known/..........
          _hypertyDescriptor = hypertyDescriptor;

          var sourcePackageURL = hypertyDescriptor.sourcePackageURL;

          if (sourcePackageURL === '/sourcePackage') {
            return hypertyDescriptor.sourcePackage;
          }

          // Get the hyperty source code
          return _this.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
        }, handleError).then(function (sourcePackage) {
          if (haveError) return false;

          console.info('[Runtime.Loader] 2: return hyperty source code');

          // at this point, we have completed "step 4 and 5" as shown in https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md

          _hypertySourcePackage = sourcePackage;

          //
          // steps 6 -- 9 are skipped.
          // TODO: on release of core 0.2;
          // TODO: Promise to check the policy engine

          // mock-up code;
          // temporary code, only
          var policy = true;

          return policy;
        }, handleError).then(function (policyResult) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 3: return policy engine result' + policyResult);

          // we have completed step 6 to 9 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          //
          // Steps 6 -- 9
          // As a result of the sipped steps, we know at this point if we execute
          // inSameSandbox or not.
          //

          // For testing, just assume we execute in same Sandbox.
          var inSameSandbox = true;
          var sandbox = void 0;

          if (inSameSandbox) {

            // this don't need be a Promise;
            sandbox = _this.registry.getAppSandbox();

            // we have completed step 11 here.
          } else {

            var domain = (0, _utils.divideURL)(hypertyDescriptorURL).domain;

            // getSandbox, this will return a promise;
            sandbox = _this.registry.getSandbox(domain);
          }

          // this will return the sandbox or one promise to getSandbox;
          return sandbox;
        }, handleError).then(function (sandbox) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 4: return the sandbox', sandbox);

          // Return the sandbox indepentely if it running in the same sandbox or not
          // we have completed step 14 here.
          return sandbox;
        }, function (reason) {
          if (haveError) return false;
          console.Error('[Runtime.Loader] 4.1: Try to register a new sandbox');

          // check if the sandbox is registed for this hyperty descriptor url;
          // Make Steps xxx --- xxx
          // Instantiate the Sandbox

          var hypertyCapabilities = {};
          if (_hypertyDescriptor && _hypertyDescriptor.hasOwnProperty('capabilities')) {
            hypertyCapabilities = _hypertyDescriptor.stubCapabilities;
          }

          return _this._runtimeFactory.createSandbox(hypertyCapabilities).then(function (sandbox) {

            sandbox.addListener('*', function (msg) {
              _this.messageBus.postMessage(msg);
            });

            return sandbox;
          });
        }, handleError).then(function (sandbox) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 5: return sandbox and register');

          _hypertySandbox = sandbox;

          var numberOfAddresses = 1;
          return _this._addressAllocation.create(_this._registry._domain, numberOfAddresses, _hypertyDescriptor, 'hyperty');
        }, handleError).then(function (addresses) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 6: return the addresses for the hyperty');

          // Register hyperty
          return _this.registry.registerHyperty(_hypertySandbox, hypertyDescriptorURL, _hypertyDescriptor, addresses);
        }, handleError).then(function (hypertyURL) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 7: Hyperty url, after register hyperty', hypertyURL);

          // we have completed step 16 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          _hypertyURL = hypertyURL;

          // Extend original hyperty configuration;
          var configuration = {};
          if (!(0, _utils.emptyObject)(_hypertyDescriptor.configuration)) {
            try {
              configuration = (0, _assign2.default)({}, JSON.parse(_hypertyDescriptor.configuration));
            } catch (e) {
              configuration = _hypertyDescriptor.configuration;
            }
          }
          configuration.runtimeURL = _this._runtimeURL;

          // We will deploy the component - step 17 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.

          try {
            return _hypertySandbox.deployComponent(_hypertySourcePackage.sourceCode, _hypertyURL, configuration);
          } catch (e) {
            console.Error('[Runtime.Loader] Error on deploy component:', e);
            reject(e);
          }
        }, handleError).then(function (deployComponentStatus) {
          if (haveError) return false;
          console.info('[Runtime.Loader] 8: Deploy component status for hyperty: ', deployComponentStatus);

          // we have completed step 19 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.

          // Add the message bus listener to the appSandbox or hypertSandbox;
          _this.messageBus.addListener(_hypertyURL, function (msg) {
            _hypertySandbox.postMessage(msg);
          });

          // we have completed step 20 of https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          var hyperty = {
            runtimeHypertyURL: _hypertyURL,
            status: deployComponentStatus
          };

          resolve(hyperty);

          // we have completed step 21 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-hyperty.md right now.
          console.info('[Runtime.Loader] ------------------ END ------------------------');
        }, handleError).catch(errorReason);
      });
    }

    /**
    * Deploy Stub from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    * @param  {Object}      p2pConfig       configuration of p2p
    */

  }, {
    key: 'loadStub',
    value: function loadStub(protostubURL, p2pConfig) {
      var _this2 = this;

      if (!this._readyToUse()) return false;
      if (!protostubURL) throw new Error('[Runtime.Loader.loadStub]ProtoStub descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        // to analyse if domain for p2pHandlers should be something else and not the default domain itself

        var domain = (0, _utils.divideURL)(protostubURL).domain;

        if (!domain) {
          domain = protostubURL;
        }

        var _stubSandbox = void 0;
        var _stubDescriptor = void 0;
        var _runtimeProtoStubURL = void 0;
        var _stubSourcePackage = void 0;
        var haveError = false;
        var stubId = void 0;

        var errorReason = function errorReason(reason) {
          console.Error('[Runtime.Loader.loadStub]Something failed on the deploy of protocolstub: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Discover Protocol Stub
        var discoverStub = void 0;
        var isP2PHandler = false;
        var isP2PRequester = false;

        console.info('[Runtime.Loader.loadStub] starting loading ', protostubURL, ' p2pconfig ', p2pConfig);
        console.info('[Runtime.Loader.loadStub]Discover or Create a new ProtoStub for domain: ', domain);

        // step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
        try {
          if (p2pConfig) {

            if (p2pConfig.hasOwnProperty('isHandlerStub') && p2pConfig.isHandlerStub) {
              // step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
              isP2PHandler = true;
              stubId = _this2.runtimeURL;
              discoverStub = _this2.registry.discoverP2PStub();
            } else {
              isP2PRequester = true;
              var p2pHandlerRuntimeURL = p2pConfig.remoteRuntimeURL;
              stubId = p2pHandlerRuntimeURL;

              // step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

              // step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
              discoverStub = _this2.registry.discoverP2PStub(p2pHandlerRuntimeURL);
            }
          } else {
            // step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            stubId = domain;
            discoverStub = _this2.registry.discoverProtostub(domain);
          }

          // Is registed?
          console.info('[Runtime.Loader.loadStub]1. Proto Stub Discovered for ', protostubURL, ': ', discoverStub);

          // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          resolve(discoverStub);
          console.info(' [Runtime.Loader]------------------- END ---------------------------\n');
        } catch (reason) {

          // is not registed?
          console.info('[Runtime.Loader.loadStub]1. Proto Stub not found ' + reason);

          // step 8 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          _this2.descriptors.getStubDescriptor(protostubURL).then(function (stubDescriptor) {

            if (haveError) return false;
            console.info('[Runtime.Loader.loadStub]2. return the ProtoStub descriptor');

            // step 9 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            _stubDescriptor = stubDescriptor;

            var sourcePackageURL = stubDescriptor.sourcePackageURL;

            if (sourcePackageURL === '/sourcePackage') {
              return stubDescriptor.sourcePackage;
            }

            // step 10 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
          }, handleError).catch(errorReason).then(function (stubSourcePackage) {
            if (haveError) return false;

            // step 11 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub]3. return the ProtoStub Source Code');
            _stubSourcePackage = stubSourcePackage;

            // this will return the sandbox or one promise to getSandbox;
            // step 12 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.registry.getSandbox(domain);
          }).then(function (stubSandbox) {
            if (haveError) return false;

            // step 15 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub]4. if the sandbox is registered then return the sandbox ', stubSandbox);

            _stubSandbox = stubSandbox;
            return stubSandbox;
          }).catch(function (reason) {
            if (haveError) return false;

            // step 13 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub]5. Sandbox was not found, creating a new one ', reason);

            // check if the sandbox is registed for this stub descriptor url;

            // According to debug, it seems RuntimeCatalogue does not support yet constraints. It appears empty!!!!

            var stubCapabilities = {};
            if (_stubDescriptor && _stubDescriptor.hasOwnProperty('constraints')) {
              stubCapabilities = _stubDescriptor.stubCapabilities;
            }

            // step 14 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2._runtimeFactory.createSandbox(stubCapabilities).then(function (sandbox) {

              sandbox.addListener('*', function (msg) {
                _this2.messageBus.postMessage(msg);
              });

              return sandbox;
            });
          }).then(function (sandbox) {
            if (haveError) return false;

            // step 16 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub]6. return the sandbox instance and register', sandbox, 'to domain ', domain);

            _stubSandbox = sandbox;

            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this2.registry.registerStub(_stubSandbox, stubId, p2pConfig, protostubURL, _stubDescriptor);
          }, handleError).then(function (runtimeProtoStub) {
            if (haveError) return false;

            // step 23 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub] 7. return the runtime protostub url: ', runtimeProtoStub);

            _runtimeProtoStubURL = runtimeProtoStub.url;

            // Extend original hyperty configuration;
            var configuration = {};
            if (!(0, _utils.emptyObject)(_stubDescriptor.configuration)) {
              try {
                configuration = (0, _assign2.default)({}, JSON.parse(_stubDescriptor.configuration));
              } catch (e) {
                configuration = _stubDescriptor.configuration;
              }
            }

            if (p2pConfig) {
              try {
                configuration = (0, _assign2.default)(configuration, JSON.parse(p2pConfig));
              } catch (e) {
                configuration = (0, _assign2.default)(configuration, p2pConfig);
              }
            }

            // required for protostub session

            configuration.runtimeURL = _this2._runtimeURL;

            // step 24 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            try {
              return _stubSandbox.deployComponent(_stubSourcePackage.sourceCode, _runtimeProtoStubURL, configuration);
            } catch (e) {
              console.Error('[Runtime.Loader.loadStub] Error on deploy component:', e);
              reject(e);
            }
          }, handleError).then(function (deployComponentStatus) {
            if (haveError) return false;

            // step 26 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            console.info('[Runtime.Loader.loadStub] 8: return deploy component for sandbox status: ', deployComponentStatus);

            // step 27 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            // Add the message bus listener
            _this2.messageBus.addListener(_runtimeProtoStubURL, function (msg) {
              _stubSandbox.postMessage(msg);
            });

            // step 28 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            var stub = void 0;
            if (p2pConfig) {
              console.log('[Runtime.Loader.loadStub] p2pConfig: ', p2pConfig);

              if (p2pConfig.hasOwnProperty('isHandlerStub')) stub = _this2.registry.p2pHandlerStub[_this2._runtimeURL];
              if (p2pConfig.hasOwnProperty('p2pRequesterStub')) stub = _this2.registry.p2pRequesterStub[p2pConfig.remoteRuntimeURL];
            } else {
              stub = _this2.registry.protostubsList[domain];
            }

            console.log('[Runtime.Loader.loadStub] Stub: ', stub);
            resolve(stub.url);
            console.info('[Runtime.Loader.loadStub]------------------- END ---------------------------\n');
          }, handleError).catch(errorReason);
        };
      });
    }

    /**
    * Deploy idpProxy from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadIdpProxy',
    value: function loadIdpProxy(idpProxyURL) {
      var _this3 = this;

      if (!this._readyToUse()) return false;
      if (!idpProxyURL) throw new Error('[Runtime.Loader] IdpProxy descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        var domain = (0, _utils.divideURL)(idpProxyURL).domain;

        if (!domain) {
          domain = idpProxyURL;
        }

        var _proxySandbox = void 0;
        var _proxyDescriptor = void 0;
        var _runtimeIdpProxyURL = void 0;
        var _proxySourcePackage = void 0;
        var haveError = false;

        var errorReason = function errorReason(reason) {
          console.Error('[Runtime.Loader] Something failed on the deploy of IdpProxy: ', reason);
          reject(reason);
        };

        var handleError = function handleError(reason) {
          haveError = true;
          reject(reason);
        };

        // Discover IDPProxy
        console.info('[Runtime.Loader] ------------------- IDP Proxy Deploy ---------------------------\n');
        console.info('[Runtime.Loader] Discover or Create a new IdpProxy for domain/URL: ', domain);

        try {
          var runtimeIdpProxyURL = _this3.registry.discoverIdpProxy(domain);
          // Is registed?
          console.info('[Runtime.Loader] 1. IDPProxy Discovered: ', runtimeIdpProxyURL);

          // we have completed step 2 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          var idpProxy = _this3.registry.idpProxyList[domain];
          console.log('Deployed: ', idpProxy);

          resolve(idpProxy);
          console.info('[Runtime.Loader] ------------------- END ---------------------------\n');
        } catch (reason) {

          // is not registed?
          console.info('[Runtime.Loader] 1. IdpProxy not found:', reason);

          // we have completed step 3 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

          // we need to get ProtoStub descriptor step 4 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
          _this3.descriptors.getIdpProxyDescriptor(idpProxyURL).then(function (proxyDescriptor) {

            console.info('[Runtime.Loader] 2. Return the IDPProxy descriptor');

            // we have completed step 5 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            _proxyDescriptor = proxyDescriptor;

            var sourcePackageURL = proxyDescriptor.sourcePackageURL;

            if (sourcePackageURL === '/sourcePackage') {
              return proxyDescriptor.sourcePackage;
            }

            // we need to get ProtoStub Source code from descriptor - step 6 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this3.runtimeCatalogue.getSourcePackageFromURL(sourcePackageURL);
          }, handleError).then(function (sourcePackage) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 3. return the IDPProxy source package');

            // we have completed step 7 https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _proxySourcePackage = sourcePackage;

            // TODO: Check on PEP (policy Engine) if we need the sandbox and check if the Sandbox Factory have the context sandbox;
            var policy = true;
            return policy;
          }, handleError).then(function (policy) {
            if (haveError) return false;

            // this will return the sandbox or one promise to getSandbox;
            return _this3.registry.getSandbox(domain);
          }).then(function (proxySandbox) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 4. if the sandbox is registered then return the sandbox', proxySandbox);

            _proxySandbox = proxySandbox;
            return proxySandbox;
          }).catch(function (reason) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 5. Sandbox was not found, creating a new one', reason);

            var proxyCapabilities = {};
            if (_proxyDescriptor && _proxyDescriptor.hasOwnProperty('capabilities')) {
              _proxyDescriptor = _proxyDescriptor.stubCapabilities;
            }

            return _this3._runtimeFactory.createSandbox(proxyCapabilities).then(function (sandbox) {

              sandbox.addListener('*', function (msg) {
                _this3.messageBus.postMessage(msg);
              });
              return sandbox;
            });
          }).then(function (sandbox) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 6. return the sandbox instance and register', sandbox, 'to domain ', domain);

            _proxySandbox = sandbox;

            // we need register stub on registry - step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md
            return _this3.registry.registerIdpProxy(sandbox, domain);
          }, handleError).then(function (runtimeIdpProxyURL) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 7. Return the runtime Idp Proxy URL: ', runtimeIdpProxyURL);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            _runtimeIdpProxyURL = runtimeIdpProxyURL;

            // Extend original hyperty configuration;
            var configuration = {};
            if (!(0, _utils.emptyObject)(_proxyDescriptor.configuration)) {
              try {
                configuration = (0, _assign2.default)({}, JSON.parse(_proxyDescriptor.configuration));
              } catch (e) {
                configuration = _proxyDescriptor.configuration;
              }
            }
            configuration.runtimeURL = _this3._runtimeURL;

            // Deploy Component step xxx
            try {
              return _proxySandbox.deployComponent(_proxySourcePackage.sourceCode, runtimeIdpProxyURL, configuration);
            } catch (e) {
              console.Error('[Runtime.Loader] Error on deploy component:', e);
              reject(e);
            }
          }, handleError).then(function (deployComponentStatus) {
            if (haveError) return false;
            console.info('[Runtime.Loader] 8: return deploy component for sandbox status: ', deployComponentStatus);

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Add the message bus listener
            _this3.messageBus.addListener(_runtimeIdpProxyURL, function (msg) {
              _proxySandbox.postMessage(msg);
            });

            // we have completed step xxx https://github.com/reTHINK-project/core-framework/blob/master/docs/specs/runtime/dynamic-view/basics/deploy-protostub.md

            // Load Stub function resolved with success;
            // let idpProxy = {
            //   runtimeIdpProxyURL: _runtimeIdpProxyURL,
            //   status: deployComponentStatus
            // };

            _this3.registry.idpProxyList[domain].status = 'deployed';
            var idpProxy = _this3.registry.idpProxyList[domain];

            console.log('Deployed: ', idpProxy);

            resolve(idpProxy);
            console.info('[Runtime.Loader] ------------------- END ---------------------------\n');
          }, handleError).catch(errorReason);
        }
      });
    }

    // Check if the loader is ready to load all components

  }, {
    key: '_readyToUse',
    value: function _readyToUse() {

      var status = false;

      if (!this._runtimeURL) throw new Error('[Runtime.Loader] The loader need the runtime url address');
      if (!this._messagesBus) throw new Error('[Runtime.Loader] The loader need the messageBus component');
      if (!this._registry) throw new Error('[Runtime.Loader] The loader need the registry component');
      if (!this._runtimeFactory) throw new Error('[Runtime.Loader] The loader need the runtime factory component');

      status = true;
      return status;
    }
  }, {
    key: 'runtimeURL',
    set: function set(value) {
      this._runtimeURL = value;
    }

    /**
     * Get runtime url
     * @return {string} value runtimeURL
     */
    ,
    get: function get() {
      return this._runtimeURL;
    }

    /**
     * Set Registry component
     * @param  {Registry} value Registry Component
     */

  }, {
    key: 'registry',
    set: function set(value) {
      this._registry = value;

      // Install AddressAllocation
      var addressAllocation = new _AddressAllocation2.default(this._runtimeURL, this._messagesBus, this._registry);
      this._addressAllocation = addressAllocation;
    }

    /**
     * Get Registry component
     * @return {Registry} Registry component
     */
    ,
    get: function get() {
      return this._registry;
    }

    /**
     * Set Message Bus component
     * @param  {MessageBus} value Message bus component
     */

  }, {
    key: 'messageBus',
    set: function set(value) {
      this._messagesBus = value;
    }

    /**
     * Get Message Bus component
     * @return {MessageBus} Message Bus component
     */
    ,
    get: function get() {
      return this._messagesBus;
    }

    /**
     * Set Runtime Factory component
     * @param  {runtimeFactory} value Factory includes the specific implementations for each environment
     */

  }, {
    key: 'runtimeFactory',
    set: function set(value) {
      this._runtimeFactory = value;
    }

    /**
     * Get Runtime Factory component
     * @return {runtimeFactory} Runtime Factory component
     */
    ,
    get: function get() {
      return this._runtimeFactory;
    }
  }]);
  return Loader;
}();

exports.default = Loader;
module.exports = exports['default'];

},{"../allocation/AddressAllocation":417,"../utils/utils":454,"babel-runtime/core-js/object/assign":3,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],446:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

require('babel-polyfill');

var _Registry = require('../registry/Registry');

var _Registry2 = _interopRequireDefault(_Registry);

var _IdentityModule = require('../identity/IdentityModule');

var _IdentityModule2 = _interopRequireDefault(_IdentityModule);

var _PEP = require('../policy/PEP');

var _PEP2 = _interopRequireDefault(_PEP);

var _MessageBus = require('../bus/MessageBus');

var _MessageBus2 = _interopRequireDefault(_MessageBus);

var _utils = require('../utils/utils');

var _Loader = require('./Loader');

var _Loader2 = _interopRequireDefault(_Loader);

var _Descriptors = require('./Descriptors');

var _Descriptors2 = _interopRequireDefault(_Descriptors);

var _runtimeConfiguration = require('./runtimeConfiguration');

var _runtimeUtils = require('./runtimeUtils');

var _SyncherManager = require('../syncher/SyncherManager');

var _SyncherManager2 = _interopRequireDefault(_SyncherManager);

var _RuntimeCoreCtx = require('../policy/context/RuntimeCoreCtx');

var _RuntimeCoreCtx2 = _interopRequireDefault(_RuntimeCoreCtx);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Runtime User Agent Interface will process all the dependecies of the core runtime;
 * @author Vitor Silva [vitor-t-silva@telecom.pt]
 * @version 0.4.0
 *
 * @property {runtimeFactory} runtimeFactory - Specific implementation for all environments;
 * @property {RuntimeCatalogue} runtimeCatalogue - Catalogue of components can be installed;
 * @property {runtimeURL} runtimeURL - This identify the core runtime, should be unique;
 * @property {IdentityModule} identityModule - Identity Module;
 * @property {PEP} policyEngine - Policy Engine Module;
 * @property {Registry} registry - Registry Module;
 * @property {MessageBus} messageBus - Message Bus is used like a router to redirect the messages from one component to other(s)
 * @property {GraphConnector} graphConnector - Graph Connector handling GUID and contacts
 */


// import GraphConnector from '../graphconnector/GraphConnector';

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/

var RuntimeUA = function () {

  /**
   * Create a new instance of Runtime User Agent
   * @param {descriptor} runtimeDescriptor - pass all the hyperty runtime descriptor
   * @param {runtimeFactory} runtimeFactory - Specific implementation for the environment where the core runtime will run;
   * @param {domain} domainURL - specify the domain base for the runtime;
   */
  function RuntimeUA(runtimeDescriptor, runtimeFactory, domain) {
    (0, _classCallCheck3.default)(this, RuntimeUA);

    if (!runtimeDescriptor) throw new Error('The runtime descriptor is a needed parameter');
    if (!runtimeFactory) throw new Error('The sandbox factory is a needed parameter');
    if (!domain) throw new Error('You need the domain of runtime');

    // Configuration object with information related with servers
    this.runtimeConfiguration = (0, _assign2.default)({ domain: domain }, _runtimeConfiguration.runtimeConfiguration);
    this.runtimeFactory = runtimeFactory;
    this.runtimeCatalogue = runtimeFactory.createRuntimeCatalogue();

    if (runtimeDescriptor.p2pHandlerStub && typeof runtimeDescriptor.p2pHandlerStub === 'string' && runtimeDescriptor.p2pHandlerStub.includes('://')) {
      this.p2p = true;
    } else {
      this.p2p = false;
    }

    _runtimeUtils.runtimeUtils.runtimeDescriptor = runtimeDescriptor;

    if (typeof runtimeFactory.createRuntimeCatalogue === 'function') {
      this.persistenceManager = runtimeFactory.createRuntimeCatalogue();
    } else {
      throw new Error('Check your Runtime Factory because it need the Runtime Catalogue implementation');
    }

    if (typeof runtimeFactory.persistenceManager === 'function') {
      this.persistenceManager = runtimeFactory.persistenceManager();
    } else {
      throw new Error('Check your Runtime Factory because it need the Persistence Manager implementation');
    }

    if (typeof runtimeFactory.storageManager === 'function') {
      this.storageManager = runtimeFactory.storageManager();
    } else {
      throw new Error('Check your Runtime Factory because it need the Storage Manager implementation');
    }
    if (typeof runtimeFactory.runtimeCapabilities === 'function') {
      this.runtimeCapabilities = runtimeFactory.runtimeCapabilities(this.storageManager);
    } else {
      console.info('Check your RuntimeFactory because it need the Runtime Capabilities implementation');
    }
  }

  (0, _createClass3.default)(RuntimeUA, [{
    key: 'init',
    value: function init() {
      var _this2 = this;

      return new _promise2.default(function (resolve, reject) {

        _this2.domain = _this2.runtimeConfiguration.domain;

        try {
          var getCapabilities = _this2.runtimeCapabilities.getRuntimeCapabilities();
          var getRuntimeURL = _this2.storageManager.get('runtime:URL');

          _promise2.default.all([getRuntimeURL, getCapabilities]).then(function (results) {

            _this2.runtimeURL = results[0] ? results[0].runtimeURL : results[0];
            if (!_this2.runtimeURL) {
              _this2.runtimeURL = 'runtime://' + _this2.domain + '/' + (0, _utils.generateGUID)();
              _this2.storageManager.set('runtime:URL', 1, { runtimeURL: _this2.runtimeURL });
            }

            _this2.capabilities = results[1];

            return _this2._loadComponents();
          }).then(function (status) {

            if (_this2.p2p) {
              console.info('[RuntimeUA - init] load p2pHandler: ', status);
              return _this2._loadP2PHandler();
            } else {
              console.info('[RuntimeUA - init] P2P not supported');
              return 'P2P Not Supported';
            }
          }).then(function (result) {
            console.info('[runtime ua - init] - status: ', result);
            resolve(true);
          }, function (reason) {
            console.error('ERROR: ', reason);
            resolve(true);
          });
        } catch (e) {
          reject(e);
        }
      });
    }
  }, {
    key: '_loadP2PHandler',
    value: function _loadP2PHandler() {
      var _this3 = this;

      return new _promise2.default(function (resolve) {

        var runtimeDescriptor = _runtimeUtils.runtimeUtils.runtimeDescriptor;
        var p2pStubHandler = runtimeDescriptor.p2pHandlerStub;
        console.log('[RuntimeUA loadP2PHandler] P2PStubHandler: ', p2pStubHandler);

        var p2pConfig = {
          isHandlerStub: true,
          runtimeURL: _this3.runtimeURL
        };

        _this3.loadStub(p2pStubHandler, p2pConfig).then(function (result) {

          var runtimeUAURL = _this3.runtimeURL + '/ua';
          var msg = {
            type: 'subscribe',
            from: runtimeUAURL,
            to: 'domain://msg-node.' + _this3.domain + '/sm',
            body: {
              subscribe: [result],
              source: _this3.runtimeURL
            }
          };

          _this3.messageBus.addListener(runtimeUAURL, function (msg) {
            console.log('[runtime ua - listener] - receive msg: ', msg);
          });

          _this3.messageBus.postMessage(msg, function (reply) {
            console.log('[runtime ua - postMessage] - reply: ', reply);
          });

          console.info('[runtime ua - p2p installation] - success: ', result);
          resolve(true);
        }).catch(function (reason) {
          console.info('[runtime ua - p2p installation] - fail: ', reason);
          resolve(false);
        });
      });
    }
  }, {
    key: '_loadComponents',
    value: function _loadComponents() {
      var _this4 = this;

      return new _promise2.default(function (resolve, reject) {

        try {

          // Prepare the on instance to handle with the fallbacks and runtimeCatalogue;
          _this4.descriptorInstance = new _Descriptors2.default(_this4.runtimeURL, _this4.runtimeCatalogue, _this4.runtimeConfiguration);

          // Prepare the loader to load the hyperties, protostubs and idpproxy;
          _this4.loader = new _Loader2.default(_this4.runtimeURL, _this4.runtimeConfiguration, _this4.descriptorInstance);

          // Instantiate the identity Module
          _this4.identityModule = new _IdentityModule2.default(_this4.runtimeURL, _this4.runtimeCapabilities, _this4.storageManager);

          // Use the sandbox factory to create an AppSandbox;
          // In the future can be decided by policyEngine if we need
          // create a AppSandbox or not;
          var appSandbox = _this4.runtimeFactory.createAppSandbox();

          // Instantiate the Registry Module
          _this4.registry = new _Registry2.default(_this4.runtimeURL, appSandbox, _this4.identityModule, _this4.runtimeCatalogue, _this4.runtimeCapabilities, _this4.storageManager);

          // Set the loader to load Hyperties, Stubs and IdpProxies
          _this4.registry.loader = _this4.loader;

          // Instantiate the Message Bus
          _this4.messageBus = new _MessageBus2.default(_this4.registry);

          // Instantiate the Policy Engine
          _this4.policyEngine = new _PEP2.default(new _RuntimeCoreCtx2.default(_this4.identityModule, _this4.registry, _this4.storageManager));

          _this4.messageBus.pipeline.handlers = [

          // Policy message authorise
          function (ctx) {
            _this4.policyEngine.authorise(ctx.msg).then(function (changedMgs) {
              ctx.msg = changedMgs;
              ctx.next();
            }).catch(function (reason) {
              console.error(reason);
              ctx.fail(reason);
            });
          }];

          // Add to App Sandbox the listener;
          appSandbox.addListener('*', function (msg) {
            _this4.messageBus.postMessage(msg);
          });

          // Register messageBus on Registry
          _this4.registry.messageBus = _this4.messageBus;

          // Register registry on IdentityModule
          _this4.identityModule.registry = _this4.registry;

          // Use sandbox factory to use specific methods
          // and set the message bus to the factory
          _this4.runtimeFactory.messageBus = _this4.messageBus;

          // Instanciate the SyncherManager;
          _this4.syncherManager = new _SyncherManager2.default(_this4.runtimeURL, _this4.messageBus, _this4.registry, _this4.runtimeCatalogue, _this4.storageManager);

          // Set into loader the needed components;
          _this4.loader.runtimeURL = _this4.runtimeURL;
          _this4.loader.messageBus = _this4.messageBus;
          _this4.loader.registry = _this4.registry;
          _this4.loader.runtimeCatalogue = _this4.runtimeCatalogue;
          _this4.loader.runtimeFactory = _this4.runtimeFactory;

          // Instantiate the Graph Connector
          // _this.graphConnector = new GraphConnector(_this.runtimeURL, _this.messageBus);
          resolve(true);
        } catch (e) {
          reject(e);
        }
      });
    }

    /**
    * Deploy Hyperty from Catalogue URL
    * @param  {URL.HypertyCatalogueURL}    hyperty hypertyDescriptor url;
    */

  }, {
    key: 'loadHyperty',
    value: function loadHyperty(hypertyDescriptorURL) {
      var _this5 = this;

      if (!hypertyDescriptorURL) throw new Error('Hyperty descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        _this5.loader.loadHyperty(hypertyDescriptorURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
    * Deploy Stub from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadStub',
    value: function loadStub(protostubURL, p2pConfig) {
      var _this6 = this;

      if (!protostubURL) throw new Error('ProtoStub descriptor url parameter is needed');

      return new _promise2.default(function (resolve, reject) {

        _this6.loader.loadStub(protostubURL, p2pConfig).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
    * Deploy idpProxy from Catalogue URL or domain url
    * @param  {URL.URL}     domain          domain
    */

  }, {
    key: 'loadIdpProxy',
    value: function loadIdpProxy(idpProxyURL) {
      var _this7 = this;

      if (!idpProxyURL) throw new Error('The IDP Proxy URL is a needed parameter, could be a DOMAIN or a URL');

      return new _promise2.default(function (resolve, reject) {
        _this7.loader.loadIdpProxy(idpProxyURL).then(function (result) {
          resolve(result);
        }).catch(function (reason) {
          reject(reason);
        });
      });
    }

    /**
     * Used to close all the runtime; Unregister all hyperties;
     * @return {Promise<Boolean>} result of the close method, with true or false to the operation success;
     */

  }, {
    key: 'close',
    value: function close() {
      var _this = this;

      console.info('Unregister all hyperties');
      return new _promise2.default(function (resolve, reject) {

        _this.registry.unregisterAllHyperties().then(function (result) {
          console.info('All the hyperties are unregisted with Success:', result);
          resolve(true);
        }).catch(function (reason) {
          console.error('Failed to unregister the hyperties', reason);
          reject(false);
        });
      });
    }
  }]);
  return RuntimeUA;
}();

//Main dependecies


exports.default = RuntimeUA;
module.exports = exports['default'];

},{"../bus/MessageBus":419,"../identity/IdentityModule":424,"../policy/PEP":428,"../policy/context/RuntimeCoreCtx":438,"../registry/Registry":442,"../syncher/SyncherManager":452,"../utils/utils":454,"./Descriptors":444,"./Loader":445,"./runtimeConfiguration":447,"./runtimeUtils":448,"babel-polyfill":1,"babel-runtime/core-js/object/assign":3,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],447:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var runtimeConfiguration = exports.runtimeConfiguration = {

  runtimeURLS: {
    registry: {
      prefix: 'hyperty-runtime://',
      suffix: 'registry'
    },
    identityModule: {
      prefix: 'hyperty-runtime://',
      suffix: '/idm'
    },
    runtimeUA: {
      prefix: 'hyperty-runtime://',
      suffix: '/ua'
    },
    catalogue: {
      prefix: 'hyperty-runtime://',
      suffix: '/catalogue'
    },
    graphConnector: {
      prefix: 'hyperty-runtime://',
      suffix: '/graph'
    },
    syncManager: {
      prefix: 'hyperty-runtime://',
      suffix: '/sm'
    }
  },
  catalogueURLs: {
    protocolstub: {
      prefix: 'hyperty-catalogue://catalogue.',
      suffix: '/.well-known/protocolstub/',
      fallback: 'hyperty-catalogue://catalogue.%domain%/.well-known/protocolstub/'
    },
    idpProxy: {
      prefix: 'hyperty-catalogue://catalogue.',
      suffix: '/.well-known/idp-proxy/',
      fallback: 'hyperty-catalogue://catalogue.%domain%/.well-known/idp-proxy/'
    }
  },
  msgNodeURL: {
    prefix: 'domain://msg-node.',
    suffix: '',
    hypertyAddressAllocation: '/hyperty-address-allocation',
    objectAddressAllocation: '/object-address-allocation',
    subscriptionManagement: '/sm'
  },
  domainRegistryURL: {
    prefix: 'domain://registry.',
    suffix: ''
  },
  globalRegistryURL: 'global://registry.'
};

},{}],448:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var runtimeUtils = exports.runtimeUtils = {
  runtimeDescriptor: {}
};

},{}],449:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Subscription = require('./Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ObserverObject = function () {
  function ObserverObject(parent, url, childrens) {
    (0, _classCallCheck3.default)(this, ObserverObject);

    var _this = this;

    _this._parent = parent;
    _this._url = url;
    _this._childrens = childrens;

    _this._storageManager = parent._storageManager;

    _this._bus = parent._bus;

    _this._subscriptions = {};
    _this._storageSubscriptions = {};
  }

  (0, _createClass3.default)(ObserverObject, [{
    key: '_newSubscription',
    value: function _newSubscription(hyperty) {
      var _this = this;

      _this._subscriptions[hyperty] = new _Subscription2.default(_this._bus, hyperty, _this._url, _this._childrens, false);
    }
  }, {
    key: 'addSubscription',
    value: function addSubscription(hyperty) {
      var _this = this;

      _this._newSubscription(hyperty);

      _this._storageSubscriptions[hyperty] = { url: _this._url, childrens: _this._childrens };
      _this._storageManager.set('syncherManager:Observer', 1, _this._storageSubscriptions);
    }
  }, {
    key: 'resumeSubscription',
    value: function resumeSubscription(hyperty) {
      var _this = this;

      console.log('[Observer Object] - resume subscriptions: ', hyperty);
      _this._newSubscription(hyperty);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(hyperty) {
      var _this = this;

      var domain = (0, _utils.divideURL)(hyperty).domain;
      var objURLSubscription = _this._url + '/subscription';

      var subscription = _this._subscriptions[hyperty];
      if (subscription) {
        //FLOW-OUT: message sent to remote ReporterObject -> _onRemoteUnSubscribe
        _this._bus.postMessage({
          type: 'unsubscribe', from: _this._parent._url, to: objURLSubscription,
          body: { resource: _this._url }
        });

        //TODO: should I wait for response before unsubscribe on msg-node
        //FLOW-OUT: message sent to msg-node SubscriptionManager component
        _this._bus.postMessage({
          type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/sm',
          body: { resource: _this._url, childrenResources: _this._childrens }
        });

        subscription._releaseListeners();
        delete _this._subscriptions[hyperty];
      }
    }
  }]);
  return ObserverObject;
}();

exports.default = ObserverObject;
module.exports = exports['default'];

},{"../utils/utils":454,"./Subscription":451,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],450:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _Subscription = require('./Subscription');

var _Subscription2 = _interopRequireDefault(_Subscription);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ReporterObject = function () {
  function ReporterObject(parent, owner, url) {
    (0, _classCallCheck3.default)(this, ReporterObject);

    var _this = this;

    _this._parent = parent;
    _this._owner = owner;
    _this._url = url;

    _this._bus = parent._bus;
    _this._storageManager = parent._storageManager;

    _this._domain = (0, _utils.divideURL)(url).domain;
    _this._objSubscriptorURL = _this._url + '/subscription';

    _this._subscriptions = {};
    _this._childrens = [];
    _this._childrenListeners = [];

    _this._storageSubscriptions = {};

    _this._forwards = {};

    _this._allocateListeners();
  }

  (0, _createClass3.default)(ReporterObject, [{
    key: '_allocateListeners',
    value: function _allocateListeners() {
      var _this = this;

      //add subscription listener...
      _this._subscriptionListener = _this._bus.addListener(_this._objSubscriptorURL, function (msg) {
        console.log(_this._objSubscriptorURL + '-RCV: ', msg);
        switch (msg.type) {
          case 'subscribe':
            _this._onRemoteSubscribe(msg);break;
          case 'unsubscribe':
            _this._onRemoteUnSubscribe(msg);break;
          case 'response':
            _this._onRemoteResponse(msg);break;
        }
      });

      var changeURL = _this._url + '/changes';
      _this._changeListener = _this._bus.addListener(changeURL, function (msg) {
        //TODO: what todo here? Save changes?
        console.log('SyncherManager-' + changeURL + '-RCV: ', msg);
      });

      _this._storageSubscriptions[_this._url] = { url: _this._url, owner: _this._owner, childrens: _this._childrens, subscriptions: [] };
      _this._storageManager.set('syncherManager:Reporter', 1, _this._storageSubscriptions);
    }
  }, {
    key: 'resumeSubscriptions',
    value: function resumeSubscriptions(subscriptions) {
      var _this = this;
      subscriptions.forEach(function (hypertyURL) {
        console.log('[Reporter Object] - resume subscriptions: ', hypertyURL);
        _this._subscriptions[hypertyURL] = new _Subscription2.default(_this._bus, _this._owner, _this._url, _this._childrens, true);
      });
    }
  }, {
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._subscriptionListener.remove();

      _this._changeListener.remove();

      _this._childrenListeners.forEach(function (cl) {
        cl.remove();
      });

      (0, _keys2.default)(_this._forwards).forEach(function (key) {
        _this.forwardUnSubscribe(key);
      });

      //remove all subscriptions
      (0, _keys2.default)(_this._subscriptions).forEach(function (key) {
        _this._subscriptions[key]._releaseListeners();
      });
    }

    /**
     * Register a listener in the msg-node and in the local MessageBus, so that messages on this address are forwarded to the reporter object
     * @param  {string} address - URL to register the listeners
     * @return {Promise} Return Promise OK or error
     */

  }, {
    key: 'forwardSubscribe',
    value: function forwardSubscribe(addresses) {
      var _this = this;

      //FLOW-OUT: message sent to the msg-node SubscriptionManager component
      var nodeSubscribeMsg = {
        type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
        body: { subscribe: addresses, source: _this._owner }
      };

      return new _promise2.default(function (resolve, reject) {
        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('forward-subscribe-response(reporter): ', reply);
          if (reply.body.code === 200) {
            var newForward = _this._bus.addForward(_this._url, _this._owner);
            _this._forwards[addresses[0]] = newForward;
            resolve();
          } else {
            reject('Error on msg-node subscription: ' + reply.body.desc);
          }
        });
      });
    }

    /**
     * UnRegister a listener in the msg-node and in the local MessageBus, so that messages on this address are removed from forward
     * @param  {string} address - URL to un-register the listeners
     */

  }, {
    key: 'forwardUnSubscribe',
    value: function forwardUnSubscribe(address) {
      var _this = this;

      _this._forwards[address].remove();
      delete _this._forwards[address];

      //FLOW-OUT: message sent to the msg-node SubscriptionManager component
      var nodeUnSubscribeMsg = {
        type: 'unsubscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
        body: { subscribe: [address], source: _this._owner }
      };

      _this._bus.postMessage(nodeUnSubscribeMsg);
    }

    /**
     * Register listeners for a list of childrens. Public channels used to transmit messages.
     * @param  {string[]} childrens - channels to register
     * @return {Promise} Return Promise OK or error
     */

  }, {
    key: 'addChildrens',
    value: function addChildrens(childrens) {
      var _this = this;

      return new _promise2.default(function (resolve, reject) {
        if (childrens.length === 0) {
          resolve();
          return;
        }

        var childBaseURL = _this._url + '/children/';
        _this._childrens.push(childrens);

        /*
        _this._childrens.forEach((child) => {
          let childId = childBaseURL + child;
            let selfForward = _this._bus.addForward(childId, owner);
          _this._childrenListeners.push(selfForward);
        });*/

        var subscriptions = [];
        childrens.forEach(function (child) {
          return subscriptions.push(childBaseURL + child);
        });

        //_this._storageSubscriptions[_this._objSubscriptorURL] = {url: _this._url, owner: _this._owner, childrens: _this._childrens};

        //FLOW-OUT: message sent to the msg-node SubscriptionManager component
        var nodeSubscribeMsg = {
          type: 'subscribe', from: _this._parent._url, to: 'domain://msg-node.' + _this._domain + '/sm',
          body: { subscribe: subscriptions, source: _this._owner }
        };

        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('node-subscribe-response(reporter): ', reply);
          if (reply.body.code === 200) {

            //add children listeners on local ...
            subscriptions.forEach(function (childURL) {
              var childListener = _this._bus.addListener(childURL, function (msg) {
                //TODO: what todo here? Save childrens?
                console.log('SyncherManager-' + childURL + '-RCV: ', msg);
              });
              _this._childrenListeners.push(childListener);

              var selfForward = _this._bus.addForward(childURL, _this._owner);
              _this._childrenListeners.push(selfForward);
            });

            resolve();
          } else {
            reject('Error on msg-node subscription: ' + reply.body.desc);
          }
        });
      });
    }
  }, {
    key: 'delete',
    value: function _delete() {
      var _this = this;
      var domain = (0, _utils.divideURL)(_this._owner).domain;

      //FLOW-OUT: message sent directly to all subscribers of the reporter
      _this._bus.postMessage({
        type: 'delete', from: _this._objSubscriptorURL, to: _this._url + '/changes'
      });

      //FLOW-OUT: message sent to the msg-node ObjectAllocationManager component
      _this._bus.postMessage({
        type: 'delete', from: _this._parent._url, to: 'domain://msg-node.' + domain + '/object-address-allocation',
        body: { resource: _this._url, childrenResources: _this._childrens }
      });

      _this._releaseListeners();
      delete _this._parent._reporters[_this._url];
    }
  }, {
    key: '_onRemoteResponse',
    value: function _onRemoteResponse(msg) {
      var _this = this;

      _this._bus.postMessage({
        id: msg.id, type: 'response', from: msg.to, to: _this._url,
        body: { code: msg.body.code, identity: msg.body.identity, source: msg.from }
      });
    }

    //FLOW-IN: message received from Syncher -> subscribe

  }, {
    key: '_onRemoteSubscribe',
    value: function _onRemoteSubscribe(msg) {
      var _this = this;
      var hypertyURL = msg.body.subscriber;

      //validate if subscription already exists?
      if (_this._subscriptions[hypertyURL]) {
        var errorMsg = {
          id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
          body: { code: 500, desc: 'Subscription for (' + _this._url + ' : ' + hypertyURL + ') already exists!' }
        };

        _this._bus.postMessage(errorMsg);
        return;
      }

      //ask to subscribe to Syncher? (depends on the operation mode)
      //TODO: get mode from object!
      var mode = 'sub/pub';

      if (mode === 'sub/pub') {
        //FLOW-OUT: message sent to local hyperty address Syncher -> _onForward
        var forwardMsg = {
          type: 'forward', from: _this._url, to: _this._owner,
          body: { type: msg.type, from: hypertyURL, to: _this._url, identity: msg.body.identity }
        };

        _this._bus.postMessage(forwardMsg, function (reply) {
          console.log('forward-reply: ', reply);
          if (reply.body.code === 200) {
            if (!_this._subscriptions[hypertyURL]) {
              _this._subscriptions[hypertyURL] = new _Subscription2.default(_this._bus, _this._owner, _this._url, _this._childrens, true);
            }

            var subscriptions = (0, _keys2.default)(_this._subscriptions);
            _this._storageSubscriptions[_this._url].subscriptions = subscriptions;
            _this._storageManager.set('syncherManager:Reporter', 1, _this._storageSubscriptions);
          }

          //FLOW-OUT: subscription response sent (forward from internal Hyperty)
          _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: reply.body
          });
        });
      }
    }

    //FLOW-IN: message received from remote ObserverObject -> removeSubscription

  }, {
    key: '_onRemoteUnSubscribe',
    value: function _onRemoteUnSubscribe(msg) {
      var _this = this;
      var hypertyURL = msg.body.subscriber;

      var subscription = _this._subscriptions[hypertyURL];
      if (subscription) {
        subscription._releaseListeners();
        delete _this._subscriptions[hypertyURL];

        //TODO: send un-subscribe message to Syncher? (depends on the operation mode)
      }
    }
  }]);
  return ReporterObject;
}();

exports.default = ReporterObject;
module.exports = exports['default'];

},{"../utils/utils":454,"./Subscription":451,"babel-runtime/core-js/object/keys":9,"babel-runtime/core-js/promise":11,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],451:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Subscription = function () {
  function Subscription(bus, owner, url, childrens, isReporter) {
    (0, _classCallCheck3.default)(this, Subscription);

    var _this = this;
    var childBaseURL = url + '/children/';
    var changeURL = url + '/changes';

    //process delete message
    _this._deleteListener = bus.addListener(changeURL, function (msg) {
      if (msg.type === 'delete') {
        console.log('Subscription-DELETE: ', msg);

        //FLOW-OUT: message sent to all subscribers
        var deleteMessageToHyperty = {
          type: 'delete', from: msg.from, to: owner,
          body: { identity: msg.body.identity, resource: url }
        };

        //send delete to hyperty
        bus.postMessage(deleteMessageToHyperty, function (reply) {
          console.log('Subscription-DELETE-REPLY: ', reply);
          if (reply.body.code === 200) {
            _this._releaseListeners();
          }
        });
      }
    });

    //add change publish address or forward
    if (isReporter) {
      _this._changeListener = bus.addPublish(changeURL);
    } else {
      _this._changeListener = bus.addForward(changeURL, owner);
    }

    _this._childrenListeners = [];
    childrens.forEach(function (child) {
      var childId = childBaseURL + child;

      //add children publish address
      var childrenForward = bus.addPublish(childId);
      _this._childrenListeners.push(childrenForward);

      //add self forward if an observer
      if (!isReporter) {
        var selfForward = bus.addForward(childId, owner);
        _this._childrenListeners.push(selfForward);
      }
    });
  }

  (0, _createClass3.default)(Subscription, [{
    key: '_releaseListeners',
    value: function _releaseListeners() {
      var _this = this;

      _this._deleteListener.remove();

      _this._changeListener.remove();

      _this._childrenListeners.forEach(function (forward) {
        forward.remove();
      });
    }
  }]);
  return Subscription;
}();

exports.default = Subscription;
module.exports = exports['default'];

},{"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15}],452:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../utils/utils');

var _AddressAllocation = require('../allocation/AddressAllocation');

var _AddressAllocation2 = _interopRequireDefault(_AddressAllocation);

var _ReporterObject = require('./ReporterObject');

var _ReporterObject2 = _interopRequireDefault(_ReporterObject);

var _ObserverObject = require('./ObserverObject');

var _ObserverObject2 = _interopRequireDefault(_ObserverObject);

var _tv = require('../utils/tv4');

var _tv2 = _interopRequireDefault(_tv);

var _MessageFactory = require('service-framework/dist/MessageFactory');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @author micaelpedrosa@gmail.com
 * Core Syncronization system.
 */
/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
var SyncherManager = function () {
  /* private
  _url: URL
  _bus: MiniBus
  _registry: Registry
  _allocator: AddressAllocation
    _reporters: { ObjectURL: ReporterObject }
  _observers: { ObjectURL: ObserverObject }
  */

  function SyncherManager(runtimeURL, bus, registry, catalog, storageManager, allocator) {
    (0, _classCallCheck3.default)(this, SyncherManager);

    if (!runtimeURL) throw new Error('[Syncher Manager] - needs the runtimeURL parameter');
    if (!bus) throw new Error('[Syncher Manager] - needs the MessageBus instance');
    if (!registry) throw new Error('[Syncher Manager] - needs the Registry instance');
    if (!catalog) throw new Error('[Syncher Manager] - needs the RuntimeCatalogue instance');
    if (!storageManager) throw new Error('[Syncher Manager] - need the storageManager instance');

    var _this = this;

    _this._bus = bus;
    _this._registry = registry;
    _this._catalog = catalog;
    _this._storageManager = storageManager;

    //TODO: these should be saved in persistence engine?
    _this.runtimeURL = runtimeURL;
    _this._url = runtimeURL + '/sm';
    _this._objectURL = runtimeURL + '/object-allocation';

    _this._reporters = {};
    _this._observers = {};

    //TODO: this should not be hardcoded!
    _this._domain = (0, _utils.divideURL)(runtimeURL).domain;

    _this._mf = new _MessageFactory.MessageFactory(false, {});

    if (allocator) {
      _this._allocator = allocator;
    } else {
      _this._allocator = new _AddressAllocation2.default(_this._objectURL, bus, _this._registry);
    }

    bus.addListener(_this._url, function (msg) {
      console.log('SyncherManager-RCV: ', msg);
      switch (msg.type) {
        case 'create':
          _this._onCreate(msg);break;
        case 'delete':
          _this._onDelete(msg);break;
        case 'subscribe':
          _this._onLocalSubscribe(msg);break;
        case 'unsubscribe':
          _this._onLocalUnSubscribe(msg);break;
      }
    });

    // _this._resumeReporterListeners();
    // _this._resumeObserverListeners();
  }

  (0, _createClass3.default)(SyncherManager, [{
    key: '_resumeObserverListeners',
    value: function _resumeObserverListeners() {
      var _this2 = this;

      // Get to the storageManager dataObjectObservers
      this._storageManager.get('syncherManager:Observer').then(function (observers) {
        console.info('[storage manager observer] - Resume Subscriptions: ', observers);
        if (!observers) return;

        (0, _keys2.default)(observers).forEach(function (key) {
          console.info(key, observers[key]);
          var objURL = observers[key].url;
          var childrens = observers[key].childrens;

          var observer = _this2._observers[objURL];
          if (!observer) {
            observer = new _ObserverObject2.default(_this2, objURL, childrens);
            _this2._observers[objURL] = observer;
          }

          //register an used hyperty subscription
          observer.resumeSubscription(key);
        });
      }).catch(function (error) {
        console.error('Error: ', error);
      });
    }
  }, {
    key: '_resumeReporterListeners',
    value: function _resumeReporterListeners() {
      var _this3 = this;

      var reporter = void 0;

      // Get to the storageManager dataObjectObservers
      this._storageManager.get('syncherManager:Reporter').then(function (reporters) {
        if (!reporters) return;

        (0, _keys2.default)(reporters).forEach(function (key) {
          console.info('[storage manager reporter] - Resume Subscriptions: ', reporters);
          var objURL = reporters[key].url;
          var owner = reporters[key].owner;
          var subscriptions = reporters[key].subscriptions;

          reporter = new _ReporterObject2.default(_this3, owner, objURL);
          reporter.resumeSubscriptions(subscriptions);
          _this3._reporters[objURL] = reporter;

          // reporter.resumeSubscriptions(subscriptions);
          // reporter.forwardSubscribe([objURL, subscriptionURL]).then(() => {
          //   this._reporters[objURL] = reporter;
          // });
        });
      }).catch(function (error) {
        console.error('Error: ', error);
      });
    }

    //FLOW-IN: message received from Syncher -> create

  }, {
    key: '_onCreate',
    value: function _onCreate(msg) {
      var _this4 = this;

      var _this = this;
      var owner = msg.from;
      var domain = (0, _utils.divideURL)(msg.from).domain;

      // if reporter is in a Interworking Protostub the runtime domain backend services will be used
      if (_this._registry.isInterworkingProtoStub(msg.from)) domain = (0, _utils.divideURL)(_this.runtimeURL).domain;

      // Hack to ignore data object address reusage request
      if (!msg.body.schema) {
        /*      _this._bus.postMessage({
                id: msg.id, type: 'response', from: msg.to, to: msg.from,
                body: { code: 404, description: 'not found' }
              });*/

        return;
      }

      if (msg.body.resource) {
        _this._authorise(msg, msg.body.resource);
        return;
      }

      //get schema from catalogue and parse -> (scheme, children)
      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {

        var properties = descriptor.sourcePackage.sourceCode.properties;
        var scheme = properties.scheme ? properties.scheme.constant : 'resource';
        var childrens = properties.children ? properties.children.constant : [];

        console.log('Scheme: ', scheme);

        // schema validation
        console.log('Running object validation...');
        try {
          var obj = msg.body.value;
          var schema = descriptor.sourcePackage.sourceCode;

          // add support for schema referencing itself
          _tv2.default.addSchema(schema.id, schema);

          // validate
          var result = _tv2.default.validateMultiple(obj, schema);

          // delete error stacks to improve logging
          result.errors.forEach(function (error) {
            delete error.stack;
          });

          // print more details about validation if it fails or schema contains $refs
          if (!result.valid || result.missing.length > 0) {
            console.warn('Object validation ' + (result.valid ? 'succeeded, but schema contained references:' : 'failed:'), (0, _stringify2.default)(result, null, 2));
            console.debug('Object:', (0, _stringify2.default)(obj, null, 2), '\r\nSchema:', (0, _stringify2.default)(schema, null, 2));
          } else {
            console.log('Object validation succeeded');
          }
        } catch (e) {
          console.warn('Error during object validation:', e);
        }

        var objectInfo = {
          name: msg.body.value.name,
          schema: msg.body.schema,
          reporter: msg.body.value.reporter,
          resources: msg.body.value.resources
        };

        // should resuse data object url if it passed
        var reuseDataObject = msg.body.value.resource;

        //request address allocation of a new object from the msg-node
        _this._allocator.create(domain, 1, objectInfo, scheme, reuseDataObject).then(function (allocated) {
          var objURL = allocated.address[0];

          console.log('ALLOCATOR CREATE:', allocated);

          var subscriptionURL = objURL + '/subscription';

          console.log('Subscription URL', subscriptionURL);

          //To register the dataObject in the runtimeRegistry
          console.info('Register Object: ', msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources);
          _this._registry.registerDataObject(msg.body.value.name, msg.body.value.schema, objURL, msg.body.value.reporter, msg.body.value.resources, allocated, msg.body.authorise).then(function (resolve) {
            console.log('DataObject successfully registered', resolve);

            //all OK -> create reporter and register listeners
            var reporter = void 0;

            if (!_this4._reporters[objURL]) {
              reporter = new _ReporterObject2.default(_this, owner, objURL);
            } else {
              reporter = _this4._reporters[objURL];
            }

            reporter.forwardSubscribe([objURL, subscriptionURL]).then(function () {
              reporter.addChildrens(childrens).then(function () {
                _this._reporters[objURL] = reporter;

                //FLOW-OUT: message response to Syncher -> create
                _this._bus.postMessage({
                  id: msg.id, type: 'response', from: msg.to, to: owner,
                  body: { code: 200, resource: objURL, childrenResources: childrens }
                });

                //send create to all observers, responses will be deliver to the Hyperty owner?
                //schedule for next cycle needed, because the Reporter should be available.
                setTimeout(function () {
                  //will invite other hyperties
                  _this._authorise(msg, objURL);
                });
              });
            });
          }, function (error) {
            console.error(error);
          });
        });
      }).catch(function (reason) {
        //FLOW-OUT: error message response to Syncher -> create
        var responseMsg = {
          id: msg.id, type: 'response', from: msg.to, to: owner,
          body: { code: 500, desc: reason }
        };

        _this._bus.postMessage(responseMsg);
      });
    }
  }, {
    key: '_authorise',
    value: function _authorise(msg, objURL) {
      var _this = this;
      var objSubscriptorURL = objURL + '/subscription';

      msg.body.authorise.forEach(function (hypertyURL) {
        //FLOW-OUT: send invites to list of remote Syncher -> _onRemoteCreate -> onNotification
        _this._bus.postMessage({
          type: 'create', from: objSubscriptorURL, to: hypertyURL,
          body: { identity: msg.body.identity, source: msg.from, value: msg.body.value, schema: msg.body.scheme }
        });
      });
    }

    //FLOW-IN: message received from DataObjectReporter -> delete

  }, {
    key: '_onDelete',
    value: function _onDelete(msg) {
      var _this = this;

      var objURL = msg.body.resource;

      var object = _this._reporters[objURL];
      if (object) {
        //TODO: is there any policy verification before delete?
        object.delete();

        //TODO: unregister object?
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200 }
        });
      }
    }

    //FLOW-IN: message received from local Syncher -> subscribe

  }, {
    key: '_onLocalSubscribe',
    value: function _onLocalSubscribe(msg) {
      var _this5 = this;

      var _this = this;

      if (!msg.body.resource) {
        /*  _this._bus.postMessage({
            id: msg.id, type: 'response', from: msg.to, to: msg.from,
            body: { code: 404, description: 'not found' }
          });*/
        return;
      }

      var hypertyURL = msg.from;
      var objURL = msg.body.resource;
      var objURLSubscription = objURL + '/subscription';
      var childBaseURL = objURL + '/children/';

      var domain = (0, _utils.divideURL)(objURL).domain;

      //get schema from catalogue and parse -> (children)
      _this._catalog.getDataSchemaDescriptor(msg.body.schema).then(function (descriptor) {
        var properties = descriptor.sourcePackage.sourceCode.properties;
        var childrens = properties.children ? properties.children.constant : [];

        //children addresses
        var subscriptions = [];
        subscriptions.push(objURL + '/changes');
        childrens.forEach(function (child) {
          return subscriptions.push(childBaseURL + child);
        });

        //FLOW-OUT: subscribe message to the msg-node, registering listeners on the broker
        var nodeSubscribeMsg = {
          type: 'subscribe', from: _this._url, to: 'domain://msg-node.' + domain + '/sm',
          body: { identity: msg.body.identity, subscribe: subscriptions, source: hypertyURL }
        };

        //subscribe in msg-node
        _this._bus.postMessage(nodeSubscribeMsg, function (reply) {
          console.log('node-subscribe-response(observer): ', reply);
          if (reply.body.code === 200) {

            //FLOW-OUT: reply with provisional response
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
              body: { code: 100, childrenResources: childrens }
            });

            //FLOW-OUT: subscribe message to remote ReporterObject -> _onRemoteSubscribe
            var objSubscribeMsg = {
              type: 'subscribe', from: _this._url, to: objURLSubscription,
              body: { identity: nodeSubscribeMsg.body.identity, subscriber: hypertyURL }
            };

            //subscribe to reporter SM
            _this._bus.postMessage(objSubscribeMsg, function (reply) {
              console.log('reporter-subscribe-response: ', reply);
              if (reply.body.code === 200) {

                var observer = _this._observers[objURL];
                if (!observer) {
                  observer = new _ObserverObject2.default(_this, objURL, childrens);
                  _this._observers[objURL] = observer;
                }

                //register new hyperty subscription
                observer.addSubscription(hypertyURL);

                //forward to hyperty:
                reply.id = msg.id;
                reply.from = _this._url;
                reply.to = hypertyURL;
                _this5._bus.postMessage(reply);
              }
            });
          } else {
            //listener rejected
            _this._bus.postMessage({
              id: msg.id, type: 'response', from: msg.to, to: hypertyURL,
              body: reply.body
            });
          }
        });
      });
    }

    //FLOW-IN: message received from local DataObjectObserver -> unsubscribe

  }, {
    key: '_onLocalUnSubscribe',
    value: function _onLocalUnSubscribe(msg) {
      var _this = this;

      var hypertyURL = msg.from;
      var objURL = msg.body.resource;

      var observer = _this._observers[objURL];
      if (observer) {
        //TODO: is there any policy verification before delete?
        observer.removeSubscription(hypertyURL);

        //TODO: destroy object in the registry?
        _this._bus.postMessage({
          id: msg.id, type: 'response', from: msg.to, to: msg.from,
          body: { code: 200 }
        });

        //TODO: remove Object if no more subscription?
        //delete _this._observers[objURL];
      }
    }
  }, {
    key: 'url',
    get: function get() {
      return this._url;
    }
  }]);
  return SyncherManager;
}();

exports.default = SyncherManager;
module.exports = exports['default'];

},{"../allocation/AddressAllocation":417,"../utils/tv4":453,"../utils/utils":454,"./ObserverObject":449,"./ReporterObject":450,"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/keys":9,"babel-runtime/helpers/classCallCheck":14,"babel-runtime/helpers/createClass":15,"service-framework/dist/MessageFactory":416}],453:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _isFrozen = require('babel-runtime/core-js/object/is-frozen');

var _isFrozen2 = _interopRequireDefault(_isFrozen);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 Author: Geraint Luff and others
 Year: 2013

 This code is released into the "public domain" by its author(s).  Anybody may use, alter and distribute the code without restriction.  The author makes no guarantees, and takes no liability of any kind for use of this code.

 If you find a bug or make an improvement, it would be courteous to let the author know, but it is not compulsory.
 */
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FObject%2Fkeys
if (!_keys2.default) {
    Object.keys = function () {
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),
            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
            dontEnumsLength = dontEnums.length;

        return function (obj) {
            if ((typeof obj === 'undefined' ? 'undefined' : (0, _typeof3.default)(obj)) !== 'object' && typeof obj !== 'function' || obj === null) {
                throw new TypeError('Object.keys called on non-object');
            }

            var result = [];

            for (var prop in obj) {
                if (hasOwnProperty.call(obj, prop)) {
                    result.push(prop);
                }
            }

            if (hasDontEnumBug) {
                for (var i = 0; i < dontEnumsLength; i++) {
                    if (hasOwnProperty.call(obj, dontEnums[i])) {
                        result.push(dontEnums[i]);
                    }
                }
            }
            return result;
        };
    }();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
if (!_create2.default) {
    Object.create = function () {
        function F() {}

        return function (o) {
            if (arguments.length !== 1) {
                throw new Error('Object.create implementation only accepts one parameter.');
            }
            F.prototype = o;
            return new F();
        };
    }();
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FisArray
if (!Array.isArray) {
    Array.isArray = function (vArg) {
        return Object.prototype.toString.call(vArg) === "[object Array]";
    };
}
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray%2FindexOf
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement /*, fromIndex */) {
        if (this === null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;

        if (len === 0) {
            return -1;
        }
        var n = 0;
        if (arguments.length > 1) {
            n = Number(arguments[1]);
            if (n !== n) {
                // shortcut for verifying if it's NaN
                n = 0;
            } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n));
            }
        }
        if (n >= len) {
            return -1;
        }
        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
        for (; k < len; k++) {
            if (k in t && t[k] === searchElement) {
                return k;
            }
        }
        return -1;
    };
}

// Grungey Object.isFrozen hack
if (!_isFrozen2.default) {
    Object.isFrozen = function (obj) {
        var key = "tv4_test_frozen_key";
        while (obj.hasOwnProperty(key)) {
            key += Math.random();
        }
        try {
            obj[key] = true;
            delete obj[key];
            return false;
        } catch (e) {
            return true;
        }
    };
}
// Based on: https://github.com/geraintluff/uri-templates, but with all the de-substitution stuff removed

var uriTemplateGlobalModifiers = {
    "+": true,
    "#": true,
    ".": true,
    "/": true,
    ";": true,
    "?": true,
    "&": true
};
var uriTemplateSuffices = {
    "*": true
};

function notReallyPercentEncode(string) {
    return encodeURI(string).replace(/%25[0-9][0-9]/g, function (doubleEncoded) {
        return "%" + doubleEncoded.substring(3);
    });
}

function uriTemplateSubstitution(spec) {
    var modifier = "";
    if (uriTemplateGlobalModifiers[spec.charAt(0)]) {
        modifier = spec.charAt(0);
        spec = spec.substring(1);
    }
    var separator = "";
    var prefix = "";
    var shouldEscape = true;
    var showVariables = false;
    var trimEmptyString = false;
    if (modifier === '+') {
        shouldEscape = false;
    } else if (modifier === ".") {
        prefix = ".";
        separator = ".";
    } else if (modifier === "/") {
        prefix = "/";
        separator = "/";
    } else if (modifier === '#') {
        prefix = "#";
        shouldEscape = false;
    } else if (modifier === ';') {
        prefix = ";";
        separator = ";";
        showVariables = true;
        trimEmptyString = true;
    } else if (modifier === '?') {
        prefix = "?";
        separator = "&";
        showVariables = true;
    } else if (modifier === '&') {
        prefix = "&";
        separator = "&";
        showVariables = true;
    }

    var varNames = [];
    var varList = spec.split(",");
    var varSpecs = [];
    var varSpecMap = {};
    for (var i = 0; i < varList.length; i++) {
        var varName = varList[i];
        var truncate = null;
        if (varName.indexOf(":") !== -1) {
            var parts = varName.split(":");
            varName = parts[0];
            truncate = parseInt(parts[1], 10);
        }
        var suffices = {};
        while (uriTemplateSuffices[varName.charAt(varName.length - 1)]) {
            suffices[varName.charAt(varName.length - 1)] = true;
            varName = varName.substring(0, varName.length - 1);
        }
        var varSpec = {
            truncate: truncate,
            name: varName,
            suffices: suffices
        };
        varSpecs.push(varSpec);
        varSpecMap[varName] = varSpec;
        varNames.push(varName);
    }
    var subFunction = function subFunction(valueFunction) {
        var result = "";
        var startIndex = 0;
        for (var i = 0; i < varSpecs.length; i++) {
            var varSpec = varSpecs[i];
            var value = valueFunction(varSpec.name);
            if (value === null || value === undefined || Array.isArray(value) && value.length === 0 || (typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && (0, _keys2.default)(value).length === 0) {
                startIndex++;
                continue;
            }
            if (i === startIndex) {
                result += prefix;
            } else {
                result += separator || ",";
            }
            if (Array.isArray(value)) {
                if (showVariables) {
                    result += varSpec.name + "=";
                }
                for (var j = 0; j < value.length; j++) {
                    if (j > 0) {
                        result += varSpec.suffices['*'] ? separator || "," : ",";
                        if (varSpec.suffices['*'] && showVariables) {
                            result += varSpec.name + "=";
                        }
                    }
                    result += shouldEscape ? encodeURIComponent(value[j]).replace(/!/g, "%21") : notReallyPercentEncode(value[j]);
                }
            } else if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === "object") {
                if (showVariables && !varSpec.suffices['*']) {
                    result += varSpec.name + "=";
                }
                var first = true;
                for (var key in value) {
                    if (!first) {
                        result += varSpec.suffices['*'] ? separator || "," : ",";
                    }
                    first = false;
                    result += shouldEscape ? encodeURIComponent(key).replace(/!/g, "%21") : notReallyPercentEncode(key);
                    result += varSpec.suffices['*'] ? '=' : ",";
                    result += shouldEscape ? encodeURIComponent(value[key]).replace(/!/g, "%21") : notReallyPercentEncode(value[key]);
                }
            } else {
                if (showVariables) {
                    result += varSpec.name;
                    if (!trimEmptyString || value !== "") {
                        result += "=";
                    }
                }
                if (varSpec.truncate != null) {
                    value = value.substring(0, varSpec.truncate);
                }
                result += shouldEscape ? encodeURIComponent(value).replace(/!/g, "%21") : notReallyPercentEncode(value);
            }
        }
        return result;
    };
    subFunction.varNames = varNames;
    return {
        prefix: prefix,
        substitution: subFunction
    };
}

function UriTemplate(template) {
    if (!(this instanceof UriTemplate)) {
        return new UriTemplate(template);
    }
    var parts = template.split("{");
    var textParts = [parts.shift()];
    var prefixes = [];
    var substitutions = [];
    var varNames = [];
    while (parts.length > 0) {
        var part = parts.shift();
        var spec = part.split("}")[0];
        var remainder = part.substring(spec.length + 1);
        var funcs = uriTemplateSubstitution(spec);
        substitutions.push(funcs.substitution);
        prefixes.push(funcs.prefix);
        textParts.push(remainder);
        varNames = varNames.concat(funcs.substitution.varNames);
    }
    this.fill = function (valueFunction) {
        var result = textParts[0];
        for (var i = 0; i < substitutions.length; i++) {
            var substitution = substitutions[i];
            result += substitution(valueFunction);
            result += textParts[i + 1];
        }
        return result;
    };
    this.varNames = varNames;
    this.template = template;
}

UriTemplate.prototype = {
    toString: function toString() {
        return this.template;
    },
    fillFromObject: function fillFromObject(obj) {
        return this.fill(function (varName) {
            return obj[varName];
        });
    }
};
var ValidatorContext = function ValidatorContext(parent, collectMultiple, errorReporter, checkRecursive, trackUnknownProperties) {
    this.missing = [];
    this.missingMap = {};
    this.formatValidators = parent ? (0, _create2.default)(parent.formatValidators) : {};
    this.schemas = parent ? (0, _create2.default)(parent.schemas) : {};
    this.collectMultiple = collectMultiple;
    this.errors = [];
    this.handleError = collectMultiple ? this.collectError : this.returnError;
    if (checkRecursive) {
        this.checkRecursive = true;
        this.scanned = [];
        this.scannedFrozen = [];
        this.scannedFrozenSchemas = [];
        this.scannedFrozenValidationErrors = [];
        this.validatedSchemasKey = 'tv4_validation_id';
        this.validationErrorsKey = 'tv4_validation_errors_id';
    }
    if (trackUnknownProperties) {
        this.trackUnknownProperties = true;
        this.knownPropertyPaths = {};
        this.unknownPropertyPaths = {};
    }
    this.errorReporter = errorReporter || defaultErrorReporter('en');
    if (typeof this.errorReporter === 'string') {
        throw new Error('debug');
    }
    this.definedKeywords = {};
    if (parent) {
        for (var key in parent.definedKeywords) {
            this.definedKeywords[key] = parent.definedKeywords[key].slice(0);
        }
    }
};
ValidatorContext.prototype.defineKeyword = function (keyword, keywordFunction) {
    this.definedKeywords[keyword] = this.definedKeywords[keyword] || [];
    this.definedKeywords[keyword].push(keywordFunction);
};
ValidatorContext.prototype.createError = function (code, messageParams, dataPath, schemaPath, subErrors, data, schema) {
    var error = new ValidationError(code, messageParams, dataPath, schemaPath, subErrors);
    error.message = this.errorReporter(error, data, schema);
    return error;
};
ValidatorContext.prototype.returnError = function (error) {
    return error;
};
ValidatorContext.prototype.collectError = function (error) {
    if (error) {
        this.errors.push(error);
    }
    return null;
};
ValidatorContext.prototype.prefixErrors = function (startIndex, dataPath, schemaPath) {
    for (var i = startIndex; i < this.errors.length; i++) {
        this.errors[i] = this.errors[i].prefixWith(dataPath, schemaPath);
    }
    return this;
};
ValidatorContext.prototype.banUnknownProperties = function (data, schema) {
    for (var unknownPath in this.unknownPropertyPaths) {
        var error = this.createError(ErrorCodes.UNKNOWN_PROPERTY, { path: unknownPath }, unknownPath, "", null, data, schema);
        var result = this.handleError(error);
        if (result) {
            return result;
        }
    }
    return null;
};

ValidatorContext.prototype.addFormat = function (format, validator) {
    if ((typeof format === 'undefined' ? 'undefined' : (0, _typeof3.default)(format)) === 'object') {
        for (var key in format) {
            this.addFormat(key, format[key]);
        }
        return this;
    }
    this.formatValidators[format] = validator;
};
ValidatorContext.prototype.resolveRefs = function (schema, urlHistory) {
    if (schema['$ref'] !== undefined) {
        urlHistory = urlHistory || {};
        if (urlHistory[schema['$ref']]) {
            return this.createError(ErrorCodes.CIRCULAR_REFERENCE, { urls: (0, _keys2.default)(urlHistory).join(', ') }, '', '', null, undefined, schema);
        }
        urlHistory[schema['$ref']] = true;
        schema = this.getSchema(schema['$ref'], urlHistory);
    }
    return schema;
};
ValidatorContext.prototype.getSchema = function (url, urlHistory) {
    var schema;
    if (this.schemas[url] !== undefined) {
        schema = this.schemas[url];
        return this.resolveRefs(schema, urlHistory);
    }
    var baseUrl = url;
    var fragment = "";
    if (url.indexOf('#') !== -1) {
        fragment = url.substring(url.indexOf("#") + 1);
        baseUrl = url.substring(0, url.indexOf("#"));
    }
    if ((0, _typeof3.default)(this.schemas[baseUrl]) === 'object') {
        schema = this.schemas[baseUrl];
        var pointerPath = decodeURIComponent(fragment);
        if (pointerPath === "") {
            return this.resolveRefs(schema, urlHistory);
        } else if (pointerPath.charAt(0) !== "/") {
            return undefined;
        }
        var parts = pointerPath.split("/").slice(1);
        for (var i = 0; i < parts.length; i++) {
            var component = parts[i].replace(/~1/g, "/").replace(/~0/g, "~");
            if (schema[component] === undefined) {
                schema = undefined;
                break;
            }
            schema = schema[component];
        }
        if (schema !== undefined) {
            return this.resolveRefs(schema, urlHistory);
        }
    }
    if (this.missing[baseUrl] === undefined) {
        this.missing.push(baseUrl);
        this.missing[baseUrl] = baseUrl;
        this.missingMap[baseUrl] = baseUrl;
    }
};
ValidatorContext.prototype.searchSchemas = function (schema, url) {
    if (Array.isArray(schema)) {
        for (var i = 0; i < schema.length; i++) {
            this.searchSchemas(schema[i], url);
        }
    } else if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === "object") {
        if (typeof schema.id === "string") {
            if (isTrustedUrl(url, schema.id)) {
                if (this.schemas[schema.id] === undefined) {
                    this.schemas[schema.id] = schema;
                }
            }
        }
        for (var key in schema) {
            if (key !== "enum") {
                if ((0, _typeof3.default)(schema[key]) === "object") {
                    this.searchSchemas(schema[key], url);
                } else if (key === "$ref") {
                    var uri = getDocumentUri(schema[key]);
                    if (uri && this.schemas[uri] === undefined && this.missingMap[uri] === undefined) {
                        this.missingMap[uri] = uri;
                    }
                }
            }
        }
    }
};
ValidatorContext.prototype.addSchema = function (url, schema) {
    //overload
    if (typeof url !== 'string' || typeof schema === 'undefined') {
        if ((typeof url === 'undefined' ? 'undefined' : (0, _typeof3.default)(url)) === 'object' && typeof url.id === 'string') {
            schema = url;
            url = schema.id;
        } else {
            return;
        }
    }
    if (url === getDocumentUri(url) + "#") {
        // Remove empty fragment
        url = getDocumentUri(url);
    }
    this.schemas[url] = schema;
    delete this.missingMap[url];
    normSchema(schema, url);
    this.searchSchemas(schema, url);
};

ValidatorContext.prototype.getSchemaMap = function () {
    var map = {};
    for (var key in this.schemas) {
        map[key] = this.schemas[key];
    }
    return map;
};

ValidatorContext.prototype.getSchemaUris = function (filterRegExp) {
    var list = [];
    for (var key in this.schemas) {
        if (!filterRegExp || filterRegExp.test(key)) {
            list.push(key);
        }
    }
    return list;
};

ValidatorContext.prototype.getMissingUris = function (filterRegExp) {
    var list = [];
    for (var key in this.missingMap) {
        if (!filterRegExp || filterRegExp.test(key)) {
            list.push(key);
        }
    }
    return list;
};

ValidatorContext.prototype.dropSchemas = function () {
    this.schemas = {};
    this.reset();
};
ValidatorContext.prototype.reset = function () {
    this.missing = [];
    this.missingMap = {};
    this.errors = [];
};

ValidatorContext.prototype.validateAll = function (data, schema, dataPathParts, schemaPathParts, dataPointerPath) {
    var topLevel;
    schema = this.resolveRefs(schema);
    if (!schema) {
        return null;
    } else if (schema instanceof ValidationError) {
        this.errors.push(schema);
        return schema;
    }

    var startErrorCount = this.errors.length;
    var frozenIndex,
        scannedFrozenSchemaIndex = null,
        scannedSchemasIndex = null;
    if (this.checkRecursive && data && (typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) === 'object') {
        topLevel = !this.scanned.length;
        if (data[this.validatedSchemasKey]) {
            var schemaIndex = data[this.validatedSchemasKey].indexOf(schema);
            if (schemaIndex !== -1) {
                this.errors = this.errors.concat(data[this.validationErrorsKey][schemaIndex]);
                return null;
            }
        }
        if ((0, _isFrozen2.default)(data)) {
            frozenIndex = this.scannedFrozen.indexOf(data);
            if (frozenIndex !== -1) {
                var frozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].indexOf(schema);
                if (frozenSchemaIndex !== -1) {
                    this.errors = this.errors.concat(this.scannedFrozenValidationErrors[frozenIndex][frozenSchemaIndex]);
                    return null;
                }
            }
        }
        this.scanned.push(data);
        if ((0, _isFrozen2.default)(data)) {
            if (frozenIndex === -1) {
                frozenIndex = this.scannedFrozen.length;
                this.scannedFrozen.push(data);
                this.scannedFrozenSchemas.push([]);
            }
            scannedFrozenSchemaIndex = this.scannedFrozenSchemas[frozenIndex].length;
            this.scannedFrozenSchemas[frozenIndex][scannedFrozenSchemaIndex] = schema;
            this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = [];
        } else {
            if (!data[this.validatedSchemasKey]) {
                try {
                    (0, _defineProperty2.default)(data, this.validatedSchemasKey, {
                        value: [],
                        configurable: true
                    });
                    (0, _defineProperty2.default)(data, this.validationErrorsKey, {
                        value: [],
                        configurable: true
                    });
                } catch (e) {
                    //IE 7/8 workaround
                    data[this.validatedSchemasKey] = [];
                    data[this.validationErrorsKey] = [];
                }
            }
            scannedSchemasIndex = data[this.validatedSchemasKey].length;
            data[this.validatedSchemasKey][scannedSchemasIndex] = schema;
            data[this.validationErrorsKey][scannedSchemasIndex] = [];
        }
    }

    var errorCount = this.errors.length;
    var error = this.validateBasic(data, schema, dataPointerPath) || this.validateNumeric(data, schema, dataPointerPath) || this.validateString(data, schema, dataPointerPath) || this.validateArray(data, schema, dataPointerPath) || this.validateObject(data, schema, dataPointerPath) || this.validateCombinations(data, schema, dataPointerPath) || this.validateHypermedia(data, schema, dataPointerPath) || this.validateFormat(data, schema, dataPointerPath) || this.validateDefinedKeywords(data, schema, dataPointerPath) || null;

    if (topLevel) {
        while (this.scanned.length) {
            var item = this.scanned.pop();
            delete item[this.validatedSchemasKey];
        }
        this.scannedFrozen = [];
        this.scannedFrozenSchemas = [];
    }

    if (error || errorCount !== this.errors.length) {
        while (dataPathParts && dataPathParts.length || schemaPathParts && schemaPathParts.length) {
            var dataPart = dataPathParts && dataPathParts.length ? "" + dataPathParts.pop() : null;
            var schemaPart = schemaPathParts && schemaPathParts.length ? "" + schemaPathParts.pop() : null;
            if (error) {
                error = error.prefixWith(dataPart, schemaPart);
            }
            this.prefixErrors(errorCount, dataPart, schemaPart);
        }
    }

    if (scannedFrozenSchemaIndex !== null) {
        this.scannedFrozenValidationErrors[frozenIndex][scannedFrozenSchemaIndex] = this.errors.slice(startErrorCount);
    } else if (scannedSchemasIndex !== null) {
        data[this.validationErrorsKey][scannedSchemasIndex] = this.errors.slice(startErrorCount);
    }

    return this.handleError(error);
};
ValidatorContext.prototype.validateFormat = function (data, schema) {
    if (typeof schema.format !== 'string' || !this.formatValidators[schema.format]) {
        return null;
    }
    var errorMessage = this.formatValidators[schema.format].call(null, data, schema);
    if (typeof errorMessage === 'string' || typeof errorMessage === 'number') {
        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage }, '', '/format', null, data, schema);
    } else if (errorMessage && (typeof errorMessage === 'undefined' ? 'undefined' : (0, _typeof3.default)(errorMessage)) === 'object') {
        return this.createError(ErrorCodes.FORMAT_CUSTOM, { message: errorMessage.message || "?" }, errorMessage.dataPath || '', errorMessage.schemaPath || "/format", null, data, schema);
    }
    return null;
};
ValidatorContext.prototype.validateDefinedKeywords = function (data, schema, dataPointerPath) {
    for (var key in this.definedKeywords) {
        if (typeof schema[key] === 'undefined') {
            continue;
        }
        var validationFunctions = this.definedKeywords[key];
        for (var i = 0; i < validationFunctions.length; i++) {
            var func = validationFunctions[i];
            var result = func(data, schema[key], schema, dataPointerPath);
            if (typeof result === 'string' || typeof result === 'number') {
                return this.createError(ErrorCodes.KEYWORD_CUSTOM, {
                    key: key,
                    message: result
                }, '', '', null, data, schema).prefixWith(null, key);
            } else if (result && (typeof result === 'undefined' ? 'undefined' : (0, _typeof3.default)(result)) === 'object') {
                var code = result.code;
                if (typeof code === 'string') {
                    if (!ErrorCodes[code]) {
                        throw new Error('Undefined error code (use defineError): ' + code);
                    }
                    code = ErrorCodes[code];
                } else if (typeof code !== 'number') {
                    code = ErrorCodes.KEYWORD_CUSTOM;
                }
                var messageParams = (0, _typeof3.default)(result.message) === 'object' ? result.message : {
                    key: key,
                    message: result.message || "?"
                };
                var schemaPath = result.schemaPath || "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
                return this.createError(code, messageParams, result.dataPath || null, schemaPath, null, data, schema);
            }
        }
    }
    return null;
};

function recursiveCompare(A, B) {
    if (A === B) {
        return true;
    }
    if (A && B && (typeof A === 'undefined' ? 'undefined' : (0, _typeof3.default)(A)) === "object" && (typeof B === 'undefined' ? 'undefined' : (0, _typeof3.default)(B)) === "object") {
        if (Array.isArray(A) !== Array.isArray(B)) {
            return false;
        } else if (Array.isArray(A)) {
            if (A.length !== B.length) {
                return false;
            }
            for (var i = 0; i < A.length; i++) {
                if (!recursiveCompare(A[i], B[i])) {
                    return false;
                }
            }
        } else {
            var key;
            for (key in A) {
                if (B[key] === undefined && A[key] !== undefined) {
                    return false;
                }
            }
            for (key in B) {
                if (A[key] === undefined && B[key] !== undefined) {
                    return false;
                }
            }
            for (key in A) {
                if (!recursiveCompare(A[key], B[key])) {
                    return false;
                }
            }
        }
        return true;
    }
    return false;
}

ValidatorContext.prototype.validateBasic = function validateBasic(data, schema, dataPointerPath) {
    var error;
    if (error = this.validateType(data, schema, dataPointerPath)) {
        return error.prefixWith(null, "type");
    }
    if (error = this.validateEnum(data, schema, dataPointerPath)) {
        return error.prefixWith(null, "type");
    }
    return null;
};

ValidatorContext.prototype.validateType = function validateType(data, schema) {
    if (schema.type === undefined) {
        return null;
    }
    var dataType = typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data);
    if (data === null) {
        dataType = "null";
    } else if (Array.isArray(data)) {
        dataType = "array";
    }
    var allowedTypes = schema.type;
    if (!Array.isArray(allowedTypes)) {
        allowedTypes = [allowedTypes];
    }

    for (var i = 0; i < allowedTypes.length; i++) {
        var type = allowedTypes[i];
        if (type === dataType || type === "integer" && dataType === "number" && data % 1 === 0) {
            return null;
        }
    }
    return this.createError(ErrorCodes.INVALID_TYPE, {
        type: dataType,
        expected: allowedTypes.join("/")
    }, '', '', null, data, schema);
};

ValidatorContext.prototype.validateEnum = function validateEnum(data, schema) {
    if (schema["enum"] === undefined) {
        return null;
    }
    for (var i = 0; i < schema["enum"].length; i++) {
        var enumVal = schema["enum"][i];
        if (recursiveCompare(data, enumVal)) {
            return null;
        }
    }
    return this.createError(ErrorCodes.ENUM_MISMATCH, { value: typeof JSON !== 'undefined' ? (0, _stringify2.default)(data) : data }, '', '', null, data, schema);
};

ValidatorContext.prototype.validateNumeric = function validateNumeric(data, schema, dataPointerPath) {
    return this.validateMultipleOf(data, schema, dataPointerPath) || this.validateMinMax(data, schema, dataPointerPath) || this.validateNaN(data, schema, dataPointerPath) || null;
};

var CLOSE_ENOUGH_LOW = Math.pow(2, -51);
var CLOSE_ENOUGH_HIGH = 1 - CLOSE_ENOUGH_LOW;
ValidatorContext.prototype.validateMultipleOf = function validateMultipleOf(data, schema) {
    var multipleOf = schema.multipleOf || schema.divisibleBy;
    if (multipleOf === undefined) {
        return null;
    }
    if (typeof data === "number") {
        var remainder = data / multipleOf % 1;
        if (remainder >= CLOSE_ENOUGH_LOW && remainder < CLOSE_ENOUGH_HIGH) {
            return this.createError(ErrorCodes.NUMBER_MULTIPLE_OF, {
                value: data,
                multipleOf: multipleOf
            }, '', '', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateMinMax = function validateMinMax(data, schema) {
    if (typeof data !== "number") {
        return null;
    }
    if (schema.minimum !== undefined) {
        if (data < schema.minimum) {
            return this.createError(ErrorCodes.NUMBER_MINIMUM, {
                value: data,
                minimum: schema.minimum
            }, '', '/minimum', null, data, schema);
        }
        if (schema.exclusiveMinimum && data === schema.minimum) {
            return this.createError(ErrorCodes.NUMBER_MINIMUM_EXCLUSIVE, {
                value: data,
                minimum: schema.minimum
            }, '', '/exclusiveMinimum', null, data, schema);
        }
    }
    if (schema.maximum !== undefined) {
        if (data > schema.maximum) {
            return this.createError(ErrorCodes.NUMBER_MAXIMUM, {
                value: data,
                maximum: schema.maximum
            }, '', '/maximum', null, data, schema);
        }
        if (schema.exclusiveMaximum && data === schema.maximum) {
            return this.createError(ErrorCodes.NUMBER_MAXIMUM_EXCLUSIVE, {
                value: data,
                maximum: schema.maximum
            }, '', '/exclusiveMaximum', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateNaN = function validateNaN(data, schema) {
    if (typeof data !== "number") {
        return null;
    }
    if (isNaN(data) === true || data === Infinity || data === -Infinity) {
        return this.createError(ErrorCodes.NUMBER_NOT_A_NUMBER, { value: data }, '', '/type', null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateString = function validateString(data, schema, dataPointerPath) {
    return this.validateStringLength(data, schema, dataPointerPath) || this.validateStringPattern(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateStringLength = function validateStringLength(data, schema) {
    if (typeof data !== "string") {
        return null;
    }
    if (schema.minLength !== undefined) {
        if (data.length < schema.minLength) {
            return this.createError(ErrorCodes.STRING_LENGTH_SHORT, {
                length: data.length,
                minimum: schema.minLength
            }, '', '/minLength', null, data, schema);
        }
    }
    if (schema.maxLength !== undefined) {
        if (data.length > schema.maxLength) {
            return this.createError(ErrorCodes.STRING_LENGTH_LONG, {
                length: data.length,
                maximum: schema.maxLength
            }, '', '/maxLength', null, data, schema);
        }
    }
    return null;
};

ValidatorContext.prototype.validateStringPattern = function validateStringPattern(data, schema) {
    if (typeof data !== "string" || typeof schema.pattern !== "string" && !(schema.pattern instanceof RegExp)) {
        return null;
    }
    var regexp;
    if (schema.pattern instanceof RegExp) {
        regexp = schema.pattern;
    } else {
        var body,
            flags = '';
        // Check for regular expression literals
        // @see http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.5
        var literal = schema.pattern.match(/^\/(.+)\/([img]*)$/);
        if (literal) {
            body = literal[1];
            flags = literal[2];
        } else {
            body = schema.pattern;
        }
        regexp = new RegExp(body, flags);
    }
    if (!regexp.test(data)) {
        return this.createError(ErrorCodes.STRING_PATTERN, { pattern: schema.pattern }, '', '/pattern', null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateArray = function validateArray(data, schema, dataPointerPath) {
    if (!Array.isArray(data)) {
        return null;
    }
    return this.validateArrayLength(data, schema, dataPointerPath) || this.validateArrayUniqueItems(data, schema, dataPointerPath) || this.validateArrayItems(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateArrayLength = function validateArrayLength(data, schema) {
    var error;
    if (schema.minItems !== undefined) {
        if (data.length < schema.minItems) {
            error = this.createError(ErrorCodes.ARRAY_LENGTH_SHORT, {
                length: data.length,
                minimum: schema.minItems
            }, '', '/minItems', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    if (schema.maxItems !== undefined) {
        if (data.length > schema.maxItems) {
            error = this.createError(ErrorCodes.ARRAY_LENGTH_LONG, {
                length: data.length,
                maximum: schema.maxItems
            }, '', '/maxItems', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateArrayUniqueItems = function validateArrayUniqueItems(data, schema) {
    if (schema.uniqueItems) {
        for (var i = 0; i < data.length; i++) {
            for (var j = i + 1; j < data.length; j++) {
                if (recursiveCompare(data[i], data[j])) {
                    var error = this.createError(ErrorCodes.ARRAY_UNIQUE, {
                        match1: i,
                        match2: j
                    }, '', '/uniqueItems', null, data, schema);
                    if (this.handleError(error)) {
                        return error;
                    }
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateArrayItems = function validateArrayItems(data, schema, dataPointerPath) {
    if (schema.items === undefined) {
        return null;
    }
    var error, i;
    if (Array.isArray(schema.items)) {
        for (i = 0; i < data.length; i++) {
            if (i < schema.items.length) {
                if (error = this.validateAll(data[i], schema.items[i], [i], ["items", i], dataPointerPath + "/" + i)) {
                    return error;
                }
            } else if (schema.additionalItems !== undefined) {
                if (typeof schema.additionalItems === "boolean") {
                    if (!schema.additionalItems) {
                        error = this.createError(ErrorCodes.ARRAY_ADDITIONAL_ITEMS, {}, '/' + i, '/additionalItems', null, data, schema);
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else if (error = this.validateAll(data[i], schema.additionalItems, [i], ["additionalItems"], dataPointerPath + "/" + i)) {
                    return error;
                }
            }
        }
    } else {
        for (i = 0; i < data.length; i++) {
            if (error = this.validateAll(data[i], schema.items, [i], ["items"], dataPointerPath + "/" + i)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObject = function validateObject(data, schema, dataPointerPath) {
    if ((typeof data === 'undefined' ? 'undefined' : (0, _typeof3.default)(data)) !== "object" || data === null || Array.isArray(data)) {
        return null;
    }
    return this.validateObjectMinMaxProperties(data, schema, dataPointerPath) || this.validateObjectRequiredProperties(data, schema, dataPointerPath) || this.validateObjectProperties(data, schema, dataPointerPath) || this.validateObjectDependencies(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateObjectMinMaxProperties = function validateObjectMinMaxProperties(data, schema) {
    var keys = (0, _keys2.default)(data);
    var error;
    if (schema.minProperties !== undefined) {
        if (keys.length < schema.minProperties) {
            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MINIMUM, {
                propertyCount: keys.length,
                minimum: schema.minProperties
            }, '', '/minProperties', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    if (schema.maxProperties !== undefined) {
        if (keys.length > schema.maxProperties) {
            error = this.createError(ErrorCodes.OBJECT_PROPERTIES_MAXIMUM, {
                propertyCount: keys.length,
                maximum: schema.maxProperties
            }, '', '/maxProperties', null, data, schema);
            if (this.handleError(error)) {
                return error;
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectRequiredProperties = function validateObjectRequiredProperties(data, schema) {
    if (schema.required !== undefined) {
        for (var i = 0; i < schema.required.length; i++) {
            var key = schema.required[i];
            if (data[key] === undefined) {
                var error = this.createError(ErrorCodes.OBJECT_REQUIRED, { key: key }, '', '/required/' + i, null, data, schema);
                if (this.handleError(error)) {
                    return error;
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectProperties = function validateObjectProperties(data, schema, dataPointerPath) {
    var error;
    for (var key in data) {
        var keyPointerPath = dataPointerPath + "/" + key.replace(/~/g, '~0').replace(/\//g, '~1');
        var foundMatch = false;
        if (schema.properties !== undefined && schema.properties[key] !== undefined) {
            foundMatch = true;
            if (error = this.validateAll(data[key], schema.properties[key], [key], ["properties", key], keyPointerPath)) {
                return error;
            }
        }
        if (schema.patternProperties !== undefined) {
            for (var patternKey in schema.patternProperties) {
                var regexp = new RegExp(patternKey);
                if (regexp.test(key)) {
                    foundMatch = true;
                    if (error = this.validateAll(data[key], schema.patternProperties[patternKey], [key], ["patternProperties", patternKey], keyPointerPath)) {
                        return error;
                    }
                }
            }
        }
        if (!foundMatch) {
            if (schema.additionalProperties !== undefined) {
                if (this.trackUnknownProperties) {
                    this.knownPropertyPaths[keyPointerPath] = true;
                    delete this.unknownPropertyPaths[keyPointerPath];
                }
                if (typeof schema.additionalProperties === "boolean") {
                    if (!schema.additionalProperties) {
                        error = this.createError(ErrorCodes.OBJECT_ADDITIONAL_PROPERTIES, { key: key }, '', '/additionalProperties', null, data, schema).prefixWith(key, null);
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else {
                    if (error = this.validateAll(data[key], schema.additionalProperties, [key], ["additionalProperties"], keyPointerPath)) {
                        return error;
                    }
                }
            } else if (this.trackUnknownProperties && !this.knownPropertyPaths[keyPointerPath]) {
                this.unknownPropertyPaths[keyPointerPath] = true;
            }
        } else if (this.trackUnknownProperties) {
            this.knownPropertyPaths[keyPointerPath] = true;
            delete this.unknownPropertyPaths[keyPointerPath];
        }
    }
    return null;
};

ValidatorContext.prototype.validateObjectDependencies = function validateObjectDependencies(data, schema, dataPointerPath) {
    var error;
    if (schema.dependencies !== undefined) {
        for (var depKey in schema.dependencies) {
            if (data[depKey] !== undefined) {
                var dep = schema.dependencies[depKey];
                if (typeof dep === "string") {
                    if (data[dep] === undefined) {
                        error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                            key: depKey,
                            missing: dep
                        }, '', '', null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
                        if (this.handleError(error)) {
                            return error;
                        }
                    }
                } else if (Array.isArray(dep)) {
                    for (var i = 0; i < dep.length; i++) {
                        var requiredKey = dep[i];
                        if (data[requiredKey] === undefined) {
                            error = this.createError(ErrorCodes.OBJECT_DEPENDENCY_KEY, {
                                key: depKey,
                                missing: requiredKey
                            }, '', '/' + i, null, data, schema).prefixWith(null, depKey).prefixWith(null, "dependencies");
                            if (this.handleError(error)) {
                                return error;
                            }
                        }
                    }
                } else {
                    if (error = this.validateAll(data, dep, [], ["dependencies", depKey], dataPointerPath)) {
                        return error;
                    }
                }
            }
        }
    }
    return null;
};

ValidatorContext.prototype.validateCombinations = function validateCombinations(data, schema, dataPointerPath) {
    return this.validateAllOf(data, schema, dataPointerPath) || this.validateAnyOf(data, schema, dataPointerPath) || this.validateOneOf(data, schema, dataPointerPath) || this.validateNot(data, schema, dataPointerPath) || null;
};

ValidatorContext.prototype.validateAllOf = function validateAllOf(data, schema, dataPointerPath) {
    if (schema.allOf === undefined) {
        return null;
    }
    var error;
    for (var i = 0; i < schema.allOf.length; i++) {
        var subSchema = schema.allOf[i];
        if (error = this.validateAll(data, subSchema, [], ["allOf", i], dataPointerPath)) {
            return error;
        }
    }
    return null;
};

ValidatorContext.prototype.validateAnyOf = function validateAnyOf(data, schema, dataPointerPath) {
    if (schema.anyOf === undefined) {
        return null;
    }
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    var errorAtEnd = true;
    for (var i = 0; i < schema.anyOf.length; i++) {
        if (this.trackUnknownProperties) {
            this.unknownPropertyPaths = {};
            this.knownPropertyPaths = {};
        }
        var subSchema = schema.anyOf[i];

        var errorCount = this.errors.length;
        var error = this.validateAll(data, subSchema, [], ["anyOf", i], dataPointerPath);

        if (error === null && errorCount === this.errors.length) {
            this.errors = this.errors.slice(0, startErrorCount);

            if (this.trackUnknownProperties) {
                for (var knownKey in this.knownPropertyPaths) {
                    oldKnownPropertyPaths[knownKey] = true;
                    delete oldUnknownPropertyPaths[knownKey];
                }
                for (var unknownKey in this.unknownPropertyPaths) {
                    if (!oldKnownPropertyPaths[unknownKey]) {
                        oldUnknownPropertyPaths[unknownKey] = true;
                    }
                }
                // We need to continue looping so we catch all the property definitions, but we don't want to return an error
                errorAtEnd = false;
                continue;
            }

            return null;
        }
        if (error) {
            errors.push(error.prefixWith(null, "" + i).prefixWith(null, "anyOf"));
        }
    }
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (errorAtEnd) {
        errors = errors.concat(this.errors.slice(startErrorCount));
        this.errors = this.errors.slice(0, startErrorCount);
        return this.createError(ErrorCodes.ANY_OF_MISSING, {}, "", "/anyOf", errors, data, schema);
    }
};

ValidatorContext.prototype.validateOneOf = function validateOneOf(data, schema, dataPointerPath) {
    if (schema.oneOf === undefined) {
        return null;
    }
    var validIndex = null;
    var errors = [];
    var startErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
    }
    for (var i = 0; i < schema.oneOf.length; i++) {
        if (this.trackUnknownProperties) {
            this.unknownPropertyPaths = {};
            this.knownPropertyPaths = {};
        }
        var subSchema = schema.oneOf[i];

        var errorCount = this.errors.length;
        var error = this.validateAll(data, subSchema, [], ["oneOf", i], dataPointerPath);

        if (error === null && errorCount === this.errors.length) {
            if (validIndex === null) {
                validIndex = i;
            } else {
                this.errors = this.errors.slice(0, startErrorCount);
                return this.createError(ErrorCodes.ONE_OF_MULTIPLE, {
                    index1: validIndex,
                    index2: i
                }, "", "/oneOf", null, data, schema);
            }
            if (this.trackUnknownProperties) {
                for (var knownKey in this.knownPropertyPaths) {
                    oldKnownPropertyPaths[knownKey] = true;
                    delete oldUnknownPropertyPaths[knownKey];
                }
                for (var unknownKey in this.unknownPropertyPaths) {
                    if (!oldKnownPropertyPaths[unknownKey]) {
                        oldUnknownPropertyPaths[unknownKey] = true;
                    }
                }
            }
        } else if (error) {
            errors.push(error);
        }
    }
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (validIndex === null) {
        errors = errors.concat(this.errors.slice(startErrorCount));
        this.errors = this.errors.slice(0, startErrorCount);
        return this.createError(ErrorCodes.ONE_OF_MISSING, {}, "", "/oneOf", errors, data, schema);
    } else {
        this.errors = this.errors.slice(0, startErrorCount);
    }
    return null;
};

ValidatorContext.prototype.validateNot = function validateNot(data, schema, dataPointerPath) {
    if (schema.not === undefined) {
        return null;
    }
    var oldErrorCount = this.errors.length;
    var oldUnknownPropertyPaths, oldKnownPropertyPaths;
    if (this.trackUnknownProperties) {
        oldUnknownPropertyPaths = this.unknownPropertyPaths;
        oldKnownPropertyPaths = this.knownPropertyPaths;
        this.unknownPropertyPaths = {};
        this.knownPropertyPaths = {};
    }
    var error = this.validateAll(data, schema.not, null, null, dataPointerPath);
    var notErrors = this.errors.slice(oldErrorCount);
    this.errors = this.errors.slice(0, oldErrorCount);
    if (this.trackUnknownProperties) {
        this.unknownPropertyPaths = oldUnknownPropertyPaths;
        this.knownPropertyPaths = oldKnownPropertyPaths;
    }
    if (error === null && notErrors.length === 0) {
        return this.createError(ErrorCodes.NOT_PASSED, {}, "", "/not", null, data, schema);
    }
    return null;
};

ValidatorContext.prototype.validateHypermedia = function validateCombinations(data, schema, dataPointerPath) {
    if (!schema.links) {
        return null;
    }
    var error;
    for (var i = 0; i < schema.links.length; i++) {
        var ldo = schema.links[i];
        if (ldo.rel === "describedby") {
            var template = new UriTemplate(ldo.href);
            var allPresent = true;
            for (var j = 0; j < template.varNames.length; j++) {
                if (!(template.varNames[j] in data)) {
                    allPresent = false;
                    break;
                }
            }
            if (allPresent) {
                var schemaUrl = template.fillFromObject(data);
                var subSchema = { "$ref": schemaUrl };
                if (error = this.validateAll(data, subSchema, [], ["links", i], dataPointerPath)) {
                    return error;
                }
            }
        }
    }
};

// parseURI() and resolveUrl() are from https://gist.github.com/1088850
//   -  released as public domain by author ("Yaffle") - see comments on gist

function parseURI(url) {
    var m = String(url).replace(/^\s+|\s+$/g, '').match(/^([^:\/?#]+:)?(\/\/(?:[^:@]*(?::[^:@]*)?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);
    // authority = '//' + user + ':' + pass '@' + hostname + ':' port
    return m ? {
        href: m[0] || '',
        protocol: m[1] || '',
        authority: m[2] || '',
        host: m[3] || '',
        hostname: m[4] || '',
        port: m[5] || '',
        pathname: m[6] || '',
        search: m[7] || '',
        hash: m[8] || ''
    } : null;
}

function resolveUrl(base, href) {
    // RFC 3986

    function removeDotSegments(input) {
        var output = [];
        input.replace(/^(\.\.?(\/|$))+/, '').replace(/\/(\.(\/|$))+/g, '/').replace(/\/\.\.$/, '/../').replace(/\/?[^\/]*/g, function (p) {
            if (p === '/..') {
                output.pop();
            } else {
                output.push(p);
            }
        });
        return output.join('').replace(/^\//, input.charAt(0) === '/' ? '/' : '');
    }

    href = parseURI(href || '');
    base = parseURI(base || '');

    return !href || !base ? null : (href.protocol || base.protocol) + (href.protocol || href.authority ? href.authority : base.authority) + removeDotSegments(href.protocol || href.authority || href.pathname.charAt(0) === '/' ? href.pathname : href.pathname ? (base.authority && !base.pathname ? '/' : '') + base.pathname.slice(0, base.pathname.lastIndexOf('/') + 1) + href.pathname : base.pathname) + (href.protocol || href.authority || href.pathname ? href.search : href.search || base.search) + href.hash;
}

function getDocumentUri(uri) {
    return uri.split('#')[0];
}

function normSchema(schema, baseUri) {
    if (schema && (typeof schema === 'undefined' ? 'undefined' : (0, _typeof3.default)(schema)) === "object") {
        if (baseUri === undefined) {
            baseUri = schema.id;
        } else if (typeof schema.id === "string") {
            baseUri = resolveUrl(baseUri, schema.id);
            schema.id = baseUri;
        }
        if (Array.isArray(schema)) {
            for (var i = 0; i < schema.length; i++) {
                normSchema(schema[i], baseUri);
            }
        } else {
            if (typeof schema['$ref'] === "string") {
                schema['$ref'] = resolveUrl(baseUri, schema['$ref']);
            }
            for (var key in schema) {
                if (key !== "enum") {
                    normSchema(schema[key], baseUri);
                }
            }
        }
    }
}

function defaultErrorReporter(language) {
    language = language || 'en';

    var errorMessages = languages[language];

    return function (error) {
        var messageTemplate = errorMessages[error.code] || ErrorMessagesDefault[error.code];
        if (typeof messageTemplate !== 'string') {
            return "Unknown error code " + error.code + ": " + (0, _stringify2.default)(error.messageParams);
        }
        var messageParams = error.params;
        // Adapted from Crockford's supplant()
        return messageTemplate.replace(/\{([^{}]*)\}/g, function (whole, varName) {
            var subValue = messageParams[varName];
            return typeof subValue === 'string' || typeof subValue === 'number' ? subValue : whole;
        });
    };
}

var ErrorCodes = {
    INVALID_TYPE: 0,
    ENUM_MISMATCH: 1,
    ANY_OF_MISSING: 10,
    ONE_OF_MISSING: 11,
    ONE_OF_MULTIPLE: 12,
    NOT_PASSED: 13,
    // Numeric errors
    NUMBER_MULTIPLE_OF: 100,
    NUMBER_MINIMUM: 101,
    NUMBER_MINIMUM_EXCLUSIVE: 102,
    NUMBER_MAXIMUM: 103,
    NUMBER_MAXIMUM_EXCLUSIVE: 104,
    NUMBER_NOT_A_NUMBER: 105,
    // String errors
    STRING_LENGTH_SHORT: 200,
    STRING_LENGTH_LONG: 201,
    STRING_PATTERN: 202,
    // Object errors
    OBJECT_PROPERTIES_MINIMUM: 300,
    OBJECT_PROPERTIES_MAXIMUM: 301,
    OBJECT_REQUIRED: 302,
    OBJECT_ADDITIONAL_PROPERTIES: 303,
    OBJECT_DEPENDENCY_KEY: 304,
    // Array errors
    ARRAY_LENGTH_SHORT: 400,
    ARRAY_LENGTH_LONG: 401,
    ARRAY_UNIQUE: 402,
    ARRAY_ADDITIONAL_ITEMS: 403,
    // Custom/user-defined errors
    FORMAT_CUSTOM: 500,
    KEYWORD_CUSTOM: 501,
    // Schema structure
    CIRCULAR_REFERENCE: 600,
    // Non-standard validation options
    UNKNOWN_PROPERTY: 1000
};
var ErrorCodeLookup = {};
for (var key in ErrorCodes) {
    ErrorCodeLookup[ErrorCodes[key]] = key;
}
var ErrorMessagesDefault = {
    INVALID_TYPE: "Invalid type: {type} (expected {expected})",
    ENUM_MISMATCH: "No enum match for: {value}",
    ANY_OF_MISSING: "Data does not match any schemas from \"anyOf\"",
    ONE_OF_MISSING: "Data does not match any schemas from \"oneOf\"",
    ONE_OF_MULTIPLE: "Data is valid against more than one schema from \"oneOf\": indices {index1} and {index2}",
    NOT_PASSED: "Data matches schema from \"not\"",
    // Numeric errors
    NUMBER_MULTIPLE_OF: "Value {value} is not a multiple of {multipleOf}",
    NUMBER_MINIMUM: "Value {value} is less than minimum {minimum}",
    NUMBER_MINIMUM_EXCLUSIVE: "Value {value} is equal to exclusive minimum {minimum}",
    NUMBER_MAXIMUM: "Value {value} is greater than maximum {maximum}",
    NUMBER_MAXIMUM_EXCLUSIVE: "Value {value} is equal to exclusive maximum {maximum}",
    NUMBER_NOT_A_NUMBER: "Value {value} is not a valid number",
    // String errors
    STRING_LENGTH_SHORT: "String is too short ({length} chars), minimum {minimum}",
    STRING_LENGTH_LONG: "String is too long ({length} chars), maximum {maximum}",
    STRING_PATTERN: "String does not match pattern: {pattern}",
    // Object errors
    OBJECT_PROPERTIES_MINIMUM: "Too few properties defined ({propertyCount}), minimum {minimum}",
    OBJECT_PROPERTIES_MAXIMUM: "Too many properties defined ({propertyCount}), maximum {maximum}",
    OBJECT_REQUIRED: "Missing required property: {key}",
    OBJECT_ADDITIONAL_PROPERTIES: "Additional properties not allowed",
    OBJECT_DEPENDENCY_KEY: "Dependency failed - key must exist: {missing} (due to key: {key})",
    // Array errors
    ARRAY_LENGTH_SHORT: "Array is too short ({length}), minimum {minimum}",
    ARRAY_LENGTH_LONG: "Array is too long ({length}), maximum {maximum}",
    ARRAY_UNIQUE: "Array items are not unique (indices {match1} and {match2})",
    ARRAY_ADDITIONAL_ITEMS: "Additional items not allowed",
    // Format errors
    FORMAT_CUSTOM: "Format validation failed ({message})",
    KEYWORD_CUSTOM: "Keyword failed: {key} ({message})",
    // Schema structure
    CIRCULAR_REFERENCE: "Circular $refs: {urls}",
    // Non-standard validation options
    UNKNOWN_PROPERTY: "Unknown property (not in schema)"
};

function ValidationError(code, params, dataPath, schemaPath, subErrors) {
    Error.call(this);
    if (code === undefined) {
        throw new Error("No error code supplied: " + schemaPath);
    }
    this.message = '';
    this.params = params;
    this.code = code;
    this.dataPath = dataPath || "";
    this.schemaPath = schemaPath || "";
    this.subErrors = subErrors || null;

    var err = new Error(this.message);
    this.stack = err.stack || err.stacktrace;
    if (!this.stack) {
        try {
            throw err;
        } catch (err) {
            this.stack = err.stack || err.stacktrace;
        }
    }
}

ValidationError.prototype = (0, _create2.default)(Error.prototype);
ValidationError.prototype.constructor = ValidationError;
ValidationError.prototype.name = 'ValidationError';

ValidationError.prototype.prefixWith = function (dataPrefix, schemaPrefix) {
    if (dataPrefix !== null) {
        dataPrefix = dataPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
        this.dataPath = "/" + dataPrefix + this.dataPath;
    }
    if (schemaPrefix !== null) {
        schemaPrefix = schemaPrefix.replace(/~/g, "~0").replace(/\//g, "~1");
        this.schemaPath = "/" + schemaPrefix + this.schemaPath;
    }
    if (this.subErrors !== null) {
        for (var i = 0; i < this.subErrors.length; i++) {
            this.subErrors[i].prefixWith(dataPrefix, schemaPrefix);
        }
    }
    return this;
};

function isTrustedUrl(baseUrl, testUrl) {
    if (testUrl.substring(0, baseUrl.length) === baseUrl) {
        var remainder = testUrl.substring(baseUrl.length);
        if (testUrl.length > 0 && testUrl.charAt(baseUrl.length - 1) === "/" || remainder.charAt(0) === "#" || remainder.charAt(0) === "?") {
            return true;
        }
    }
    return false;
}

var languages = {};

function createApi(language) {
    var globalContext = new ValidatorContext();
    var currentLanguage;
    var customErrorReporter;
    var api = {
        setErrorReporter: function setErrorReporter(reporter) {
            if (typeof reporter === 'string') {
                return this.language(reporter);
            }
            customErrorReporter = reporter;
            return true;
        },
        addFormat: function addFormat() {
            globalContext.addFormat.apply(globalContext, arguments);
        },
        language: function language(code) {
            if (!code) {
                return currentLanguage;
            }
            if (!languages[code]) {
                code = code.split('-')[0]; // fall back to base language
            }
            if (languages[code]) {
                currentLanguage = code;
                return code; // so you can tell if fall-back has happened
            }
            return false;
        },
        addLanguage: function addLanguage(code, messageMap) {
            var key;
            for (key in ErrorCodes) {
                if (messageMap[key] && !messageMap[ErrorCodes[key]]) {
                    messageMap[ErrorCodes[key]] = messageMap[key];
                }
            }
            var rootCode = code.split('-')[0];
            if (!languages[rootCode]) {
                // use for base language if not yet defined
                languages[code] = messageMap;
                languages[rootCode] = messageMap;
            } else {
                languages[code] = (0, _create2.default)(languages[rootCode]);
                for (key in messageMap) {
                    if (typeof languages[rootCode][key] === 'undefined') {
                        languages[rootCode][key] = messageMap[key];
                    }
                    languages[code][key] = messageMap[key];
                }
            }
            return this;
        },
        freshApi: function freshApi(language) {
            var result = createApi();
            if (language) {
                result.language(language);
            }
            return result;
        },
        validate: function validate(data, schema, checkRecursive, banUnknownProperties) {
            var def = defaultErrorReporter(currentLanguage);
            var errorReporter = customErrorReporter ? function (error, data, schema) {
                return customErrorReporter(error, data, schema) || def(error, data, schema);
            } : def;
            var context = new ValidatorContext(globalContext, false, errorReporter, checkRecursive, banUnknownProperties);
            if (typeof schema === "string") {
                schema = { "$ref": schema };
            }
            context.addSchema("", schema);
            var error = context.validateAll(data, schema, null, null, "");
            if (!error && banUnknownProperties) {
                error = context.banUnknownProperties(data, schema);
            }
            this.error = error;
            this.missing = context.missing;
            this.valid = error === null;
            return this.valid;
        },
        validateResult: function validateResult() {
            var result = {};
            this.validate.apply(result, arguments);
            return result;
        },
        validateMultiple: function validateMultiple(data, schema, checkRecursive, banUnknownProperties) {
            var def = defaultErrorReporter(currentLanguage);
            var errorReporter = customErrorReporter ? function (error, data, schema) {
                return customErrorReporter(error, data, schema) || def(error, data, schema);
            } : def;
            var context = new ValidatorContext(globalContext, true, errorReporter, checkRecursive, banUnknownProperties);
            if (typeof schema === "string") {
                schema = { "$ref": schema };
            }
            context.addSchema("", schema);
            context.validateAll(data, schema, null, null, "");
            if (banUnknownProperties) {
                context.banUnknownProperties(data, schema);
            }
            var result = {};
            result.errors = context.errors;
            result.missing = context.missing;
            result.valid = result.errors.length === 0;
            return result;
        },
        addSchema: function addSchema() {
            return globalContext.addSchema.apply(globalContext, arguments);
        },
        getSchema: function getSchema() {
            return globalContext.getSchema.apply(globalContext, arguments);
        },
        getSchemaMap: function getSchemaMap() {
            return globalContext.getSchemaMap.apply(globalContext, arguments);
        },
        getSchemaUris: function getSchemaUris() {
            return globalContext.getSchemaUris.apply(globalContext, arguments);
        },
        getMissingUris: function getMissingUris() {
            return globalContext.getMissingUris.apply(globalContext, arguments);
        },
        dropSchemas: function dropSchemas() {
            globalContext.dropSchemas.apply(globalContext, arguments);
        },
        defineKeyword: function defineKeyword() {
            globalContext.defineKeyword.apply(globalContext, arguments);
        },
        defineError: function defineError(codeName, codeNumber, defaultMessage) {
            if (typeof codeName !== 'string' || !/^[A-Z]+(_[A-Z]+)*$/.test(codeName)) {
                throw new Error('Code name must be a string in UPPER_CASE_WITH_UNDERSCORES');
            }
            if (typeof codeNumber !== 'number' || codeNumber % 1 !== 0 || codeNumber < 10000) {
                throw new Error('Code number must be an integer > 10000');
            }
            if (typeof ErrorCodes[codeName] !== 'undefined') {
                throw new Error('Error already defined: ' + codeName + ' as ' + ErrorCodes[codeName]);
            }
            if (typeof ErrorCodeLookup[codeNumber] !== 'undefined') {
                throw new Error('Error code already used: ' + ErrorCodeLookup[codeNumber] + ' as ' + codeNumber);
            }
            ErrorCodes[codeName] = codeNumber;
            ErrorCodeLookup[codeNumber] = codeName;
            ErrorMessagesDefault[codeName] = ErrorMessagesDefault[codeNumber] = defaultMessage;
            for (var langCode in languages) {
                var language = languages[langCode];
                if (language[codeName]) {
                    language[codeNumber] = language[codeNumber] || language[codeName];
                }
            }
        },
        reset: function reset() {
            globalContext.reset();
            this.error = null;
            this.missing = [];
            this.valid = true;
        },
        missing: [],
        error: null,
        valid: true,
        normSchema: normSchema,
        resolveUrl: resolveUrl,
        getDocumentUri: getDocumentUri,
        errorCodes: ErrorCodes
    };
    api.language(language || 'en');
    return api;
}

//export function validator() {
var tv4 = createApi();
tv4.addLanguage('en-gb', ErrorMessagesDefault);

//legacy property
tv4.tv4 = tv4;
//return tv4;
exports.default = tv4;
//}

module.exports = exports['default'];

},{"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/create":4,"babel-runtime/core-js/object/define-property":5,"babel-runtime/core-js/object/is-frozen":8,"babel-runtime/core-js/object/keys":9,"babel-runtime/helpers/typeof":19}],454:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

exports.divideURL = divideURL;
exports.emptyObject = emptyObject;
exports.deepClone = deepClone;
exports.removePathFromURL = removePathFromURL;
exports.getUserURLFromEmail = getUserURLFromEmail;
exports.getUserEmailFromURL = getUserEmailFromURL;
exports.convertToUserURL = convertToUserURL;
exports.isDataObjectURL = isDataObjectURL;
exports.isLegacy = isLegacy;
exports.isURL = isURL;
exports.isUserURL = isUserURL;
exports.isHypertyURL = isHypertyURL;
exports.getConfigurationResources = getConfigurationResources;
exports.buildURL = buildURL;
exports.generateGUID = generateGUID;
exports.getUserIdentityDomain = getUserIdentityDomain;
exports.isBackendServiceURL = isBackendServiceURL;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* Copyright 2016 PT Inovação e Sistemas SA
* Copyright 2016 INESC-ID
* Copyright 2016 QUOBIS NETWORKS SL
* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
* Copyright 2016 ORANGE SA
* Copyright 2016 Deutsche Telekom AG
* Copyright 2016 Apizee
* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
/**
 * Support module with some functions will be useful
 * @module utils
 */

/**
 * @typedef divideURL
 * @type Object
 * @property {string} type The type of URL
 * @property {string} domain The domain of URL
 * @property {string} identity The identity of URL
 */

/**
 * Divide an url in type, domain and identity
 * @param  {URL.URL} url - url address
 * @return {divideURL} the result of divideURL
 */
function divideURL(url) {

  function recurse(value) {
    var regex = /([a-zA-Z-]*)(:\/\/(?:\.)?|:)([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
    var subst = '$1,$3,$4';
    var parts = value.replace(regex, subst).split(',');
    return parts;
  }

  var parts = recurse(url);

  // If the url has no scheme
  if (parts[0] === url && !parts[0].includes('@')) {

    var _result = {
      type: "",
      domain: url,
      identity: ""
    };

    console.error('[DivideURL] DivideURL don\'t support url without scheme. Please review your url address', url);

    return _result;
  }

  // check if the url has the scheme and includes an @
  if (parts[0] === url && parts[0].includes('@')) {
    var scheme = parts[0] === url ? 'smtp' : parts[0];
    parts = recurse(scheme + '://' + parts[0]);
  }

  // if the domain includes an @, divide it to domain and identity respectively
  if (parts[1].includes('@')) {
    parts[2] = parts[0] + '://' + parts[1];
    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);
  } /*else if (parts[2].includes('/')) {
    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);
    }*/

  var result = {
    type: parts[0],
    domain: parts[1],
    identity: parts[2]
  };

  return result;
}

/**
 * Check if an Object is empty
 * @param  {Object} object Object to be checked
 * @return {Boolean}       status of Object, empty or not (true|false);
 */
function emptyObject(object) {
  return (0, _keys2.default)(object).length > 0 ? false : true;
}

/**
 * Make a COPY of the original data
 * @param  {Object}  obj - object to be cloned
 * @return {Object}
 */
function deepClone(obj) {
  //TODO: simple but inefficient JSON deep clone...
  if (obj) return JSON.parse((0, _stringify2.default)(obj));
}

function removePathFromURL(url) {
  var splitURL = url.split('/');
  return splitURL[0] + '//' + splitURL[2] + '/' + splitURL[3];
}

/**
 * Obtains the user URL that corresponds to a given email
 * @param  {string} userEmail The user email
 * @return {URL.URL} userURL The user URL
 */
function getUserURLFromEmail(userEmail) {
  var indexOfAt = userEmail.indexOf('@');
  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);
}

/**
 * Obtains the user email that corresponds to a given URL
 * @param  {URL.URL} userURL The user URL
 * @return {string} userEmail The user email
 */
function getUserEmailFromURL(userURL) {
  var url = divideURL(userURL);
  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'
}

/**
 * Check if the user identifier is already in the URL format, if not, convert to URL format
 * @param  {string}   identifier  user identifier
 * @return {string}   userURL    the user URL
 */
function convertToUserURL(identifier) {

  // check if the identifier is already in the url format
  if (identifier.substring(0, 7) === 'user://') {
    var dividedURL = divideURL(identifier);

    //check if the url is well formated
    if (dividedURL.domain && dividedURL.identity) {
      return identifier;
    } else {
      throw 'userURL with wrong format';
    }

    //if not, convert the user email to URL format
  } else {
    return getUserURLFromEmail(identifier);
  }
}

function isDataObjectURL(url) {
  var schemasToIgnore = ['domain-idp', 'runtime', 'domain', 'hyperty'];
  var splitURL = url.split('://');
  var urlSchema = splitURL[0];

  return schemasToIgnore.indexOf(urlSchema) === -1;
}

function isLegacy(url) {
  if (url.split('@').length > 1) return true;else return false;
}

function isURL(url) {
  return url.split('/').length >= 3;
}

function isUserURL(url) {
  return divideURL(url).type === 'user';
}

function isHypertyURL(url) {
  return divideURL(url).type === 'hyperty';
}

/**
 * get information relative each component configured on runtime configuration;
 * @param  {object} configuration object with all configuration
 * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;
 * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy
 * @return {object}               return an object with all configurations;
 */
function getConfigurationResources(configuration, component, resource) {
  var objectResource = configuration[component];
  var resourceType = objectResource[resource];

  return resourceType;
}

/**
 * Build a full url with the runtime configuration;
 * @param  {object} configuration object with all configuration
 * @param  {string} component     string with the component to get the configuration, like, runtimeURLS, catalogueURLs, msgNodeURL, domainRegistryURL;
 * @param  {string} resource      type of resource to get, like, catalogue, runtimeUA, protocolstub, idpProxy
 * @param  {string} type          resource to get, like a hyperty name or protocolstub name;
 * @param  {boolean} useFallback  if true the function will check if have a fallback url;
 * @return {string}               partial url to contact the resource;
 */
function buildURL(configuration, component, resource, type) {
  var useFallback = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

  var objectResource = configuration[component];
  var url = void 0;

  if (!objectResource.hasOwnProperty(resource)) {
    throw Error('The configuration ' + (0, _stringify2.default)(objectResource, '', 2) + ' don\'t have the ' + resource + ' resource you are looking for');
  }

  var resourceType = objectResource[resource];

  if (type) {
    url = resourceType.prefix + configuration.domain + resourceType.suffix + type;
    if (resourceType.hasOwnProperty('fallback') && useFallback) {
      if (resourceType.fallback.indexOf('%domain%')) {
        url = resourceType.fallback.replace(/(%domain%)/g, configuration.domain) + type;
      } else {
        url = resourceType.fallback + type;
      }
    }
  } else {
    url = resourceType.prefix + configuration.domain + resourceType.suffix;
  }

  // console.log(url);

  return url;
}

function generateGUID() {

  function s4() {
    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
  }

  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

function getUserIdentityDomain(url) {
  var dividedURL = divideURL(url);
  var splitedDomain = dividedURL.domain.split('.');
  var splitedLength = splitedDomain.length;
  if (splitedLength == 1) {
    return splitedDomain[splitedLength - 1];
  }
  var domain = splitedDomain[splitedLength - 2] + '.' + splitedDomain[splitedLength - 1];
  return domain;
}

/**
 * Check if URL is from a backend service
 * @param  {string} url     URL to be processed
 * @return {boolean}
 */

function isBackendServiceURL(url) {
  var dividedURL = divideURL(url);
  var splitedDomain = dividedURL.domain.split('.');
  var backendSchemes = ['domain', 'global', 'domain-idp']; // should be defined in the runtime configuration
  var backendSubDomains = ['registry', 'msg-node']; // should be defined in the runtime configuration
  var subDomain = void 0;

  if (splitedDomain.length > 1) {
    subDomain = splitedDomain[0];
  }

  if (subDomain && backendSubDomains.indexOf(subDomain)) return true;

  if (dividedURL.type) return backendSchemes.indexOf(dividedURL.type) !== -1;

  return false;
}

},{"babel-runtime/core-js/json/stringify":2,"babel-runtime/core-js/object/keys":9}]},{},[446])(446)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcG9seWZpbGwvbGliL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9qc29uL3N0cmluZ2lmeS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2Fzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2NyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvcHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2NvcmUtanMvc3ltYm9sLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9zeW1ib2wvaXRlcmF0b3IuanMiLCJub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvZ2V0LmpzIiwibm9kZV9tb2R1bGVzL2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIm5vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vanNvbi9zdHJpbmdpZnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvaXMtZnJvemVuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3Byb21pc2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jbGFzc29mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19jb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2NvcmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2N0eC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0tYnVnLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2VudW0ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZXhwb3J0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19mYWlscy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fZm9yLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19nbG9iYWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2hhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faGlkZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faHRtbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2ludm9rZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXktaXRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2lzLW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19pdGVyLXN0ZXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2l0ZXJhdG9ycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fa2V5b2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21ldGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX21pY3JvdGFzay5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZHBzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LWdvcHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1ncG8uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC1rZXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3NoYXJlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190YXNrLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdG8tbGVuZ3RoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL190by1vYmplY3QuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvX3RvLXByaW1pdGl2ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9fdWlkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZGVmaW5lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MtZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL193a3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5vYmplY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbGlicmFyeS9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL2xpYnJhcnkvbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9saWJyYXJ5L21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2EtbnVtYmVyLXZhbHVlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1maWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktZnJvbS1pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXdlYWsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGF0ZS10by1wcmltaXRpdmUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19maXgtcmUtd2tzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmxhZ3MuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1sb2cxcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhcnNlLWZsb2F0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFydGlhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3BhdGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlcGxhY2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1zcGVjaWVzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctcGFkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy10cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbGwuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLWluZGV4LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmluZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5qb2luLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb21lLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8taXNvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24ubmFtZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hdGFuaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2x6MzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNvc2guanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5mcm91bmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmh5cG90LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxMC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpZ24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnNpbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRydW5jLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLnRvLXByZWNpc2lvbi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnBhcnNlLWludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5nZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLm1hdGNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc2VhcmNoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNwbGl0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZyb20tY29kZS1wb2ludC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcucmF3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy50cmltLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXkuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQzMi1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYud2Vhay1zZXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LmFzYXAuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hcC50by1qc29uLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pYWRkaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaW11bGguanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC51bXVsaC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlci5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5vYnNlcnZhYmxlLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsLmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQuanMiLCJub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwibm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbC5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycy5qcyIsIm5vZGVfbW9kdWxlcy9jb3JlLWpzL3NoaW0uanMiLCJub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIm5vZGVfbW9kdWxlcy9zZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5LmpzIiwic3JjXFxhbGxvY2F0aW9uXFxBZGRyZXNzQWxsb2NhdGlvbi5qcyIsInNyY1xcYnVzXFxCdXMuanMiLCJzcmNcXGJ1c1xcTWVzc2FnZUJ1cy5qcyIsInNyY1xcYnVzXFxQaXBlbGluZS5qcyIsInNyY1xcaWRlbnRpdHlcXENyeXB0by5qcyIsInNyY1xcaWRlbnRpdHlcXEd1aUZha2UuanMiLCJzcmNcXGlkZW50aXR5XFxJZGVudGl0eS5qcyIsInNyY1xcaWRlbnRpdHlcXElkZW50aXR5TW9kdWxlLmpzIiwic3JjXFxwb2xpY3lcXEFjdGlvbnNTZXJ2aWNlLmpzIiwic3JjXFxwb2xpY3lcXE9wZXJhdG9ycy5qcyIsInNyY1xccG9saWN5XFxQRFAuanMiLCJzcmNcXHBvbGljeVxcUEVQLmpzIiwic3JjXFxwb2xpY3lcXFBvbGljeS5qcyIsInNyY1xccG9saWN5XFxSZVRoaW5rQ3R4LmpzIiwic3JjXFxwb2xpY3lcXFJ1bGUuanMiLCJzcmNcXHBvbGljeVxcY29tYmluaW5nQWxnb3JpdGhtc1xcQWxsb3dPdmVycmlkZXMuanMiLCJzcmNcXHBvbGljeVxcY29tYmluaW5nQWxnb3JpdGhtc1xcQmxvY2tPdmVycmlkZXMuanMiLCJzcmNcXHBvbGljeVxcY29tYmluaW5nQWxnb3JpdGhtc1xcRmlyc3RBcHBsaWNhYmxlLmpzIiwic3JjXFxwb2xpY3lcXGNvbmRpdGlvbnNcXEFkdmFuY2VkQ29uZGl0aW9uLmpzIiwic3JjXFxwb2xpY3lcXGNvbmRpdGlvbnNcXENvbmRpdGlvbi5qcyIsInNyY1xccG9saWN5XFxjb25kaXRpb25zXFxTdWJzY3JpcHRpb25Db25kaXRpb24uanMiLCJzcmNcXHBvbGljeVxcY29udGV4dFxcUnVudGltZUNvcmVDdHguanMiLCJzcmNcXHJlZ2lzdHJ5XFxEaXNjb3ZlcnkuanMiLCJzcmNcXHJlZ2lzdHJ5XFxEaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrLmpzIiwic3JjXFxyZWdpc3RyeVxcSHlwZXJ0eUluc3RhbmNlLmpzIiwic3JjXFxyZWdpc3RyeVxcUmVnaXN0cnkuanMiLCJzcmNcXHJlZ2lzdHJ5XFxSZWdpc3RyeURhdGFNb2RlbC5qcyIsInNyY1xccnVudGltZVxcRGVzY3JpcHRvcnMuanMiLCJzcmNcXHJ1bnRpbWVcXExvYWRlci5qcyIsInNyY1xccnVudGltZVxcUnVudGltZVVBLmpzIiwic3JjXFxydW50aW1lXFxydW50aW1lQ29uZmlndXJhdGlvbi5qcyIsInNyY1xccnVudGltZVxccnVudGltZVV0aWxzLmpzIiwic3JjXFxzeW5jaGVyXFxPYnNlcnZlck9iamVjdC5qcyIsInNyY1xcc3luY2hlclxcUmVwb3J0ZXJPYmplY3QuanMiLCJzcmNcXHN5bmNoZXJcXFN1YnNjcmlwdGlvbi5qcyIsInNyY1xcc3luY2hlclxcU3luY2hlck1hbmFnZXIuanMiLCJzcmNcXHV0aWxzXFx0djQuanMiLCJzcmNcXHV0aWxzXFx1dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQzNCQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBOztBQ0RBO0FBQ0E7O0FDREE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTs7QUNEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1REE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7O0FDQUE7QUFDQTtBQUNBOztBQ0ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQkE7QUFDQTtBQUNBOztBQ0ZBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTs7QUNGQTtBQUNBO0FBQ0E7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7O0FDRkE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMxU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMU9BOztBQ0FBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDWkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN6QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNwRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7QUNaQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ1BBOztBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7Ozs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3QkE7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOWRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDckNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzNCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RCQTs7QUNBQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNiQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDekJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwRUE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBOztBQ0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNqQkE7QUFDQTtBQUNBOzs7O0FDRkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7Ozs7QUNGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVEE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDOUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNOQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7O0FDSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNmQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2ZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNqQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDUkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNkQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNUQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7QUNOQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0tBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQzNxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDL0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JBOztBQUVBOzs7SUFHTSxpQjtBQUNKOzs7OztBQUtBOzs7OztBQUtBLDZCQUFZLEdBQVosRUFBaUIsR0FBakIsRUFBc0IsUUFBdEIsRUFBZ0M7QUFBQTs7QUFDOUIsUUFB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QixDQUFqQixFQUNDLE9BQU8sSUFBUDs7QUFFRCxNQUFJLFdBQVcsSUFBZixFQUNDLE9BQVEsZUFBZSxPQUFmLENBQXVCLFdBQVcsSUFBbEMsTUFBNEMsQ0FBQyxDQUFyRDs7QUFFRCxTQUFPLEtBQVA7QUFDRCIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJcInVzZSBzdHJpY3RcIjtcblxucmVxdWlyZShcImNvcmUtanMvc2hpbVwiKTtcblxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcblxucmVxdWlyZShcImNvcmUtanMvZm4vcmVnZXhwL2VzY2FwZVwiKTtcblxuaWYgKGdsb2JhbC5fYmFiZWxQb2x5ZmlsbCkge1xuICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO1xufVxuZ2xvYmFsLl9iYWJlbFBvbHlmaWxsID0gdHJ1ZTtcblxudmFyIERFRklORV9QUk9QRVJUWSA9IFwiZGVmaW5lUHJvcGVydHlcIjtcbmZ1bmN0aW9uIGRlZmluZShPLCBrZXksIHZhbHVlKSB7XG4gIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHtcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZhbHVlXG4gIH0pO1xufVxuXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRMZWZ0XCIsIFwiXCIucGFkU3RhcnQpO1xuZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIFwicGFkUmlnaHRcIiwgXCJcIi5wYWRFbmQpO1xuXG5cInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbFwiLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgW11ba2V5XSAmJiBkZWZpbmUoQXJyYXksIGtleSwgRnVuY3Rpb24uY2FsbC5iaW5kKFtdW2tleV0pKTtcbn0pOyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwibW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9pcy1mcm96ZW5cIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vcHJvbWlzZVwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2xcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCJtb2R1bGUuZXhwb3J0cyA9IHsgXCJkZWZhdWx0XCI6IHJlcXVpcmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vc3ltYm9sL2l0ZXJhdG9yXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2RlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICAoMCwgX2RlZmluZVByb3BlcnR5Mi5kZWZhdWx0KSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpOyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2dldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIik7XG5cbnZhciBfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldE93blByb3BlcnR5RGVzY3JpcHRvcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIGdldChvYmplY3QsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICBpZiAob2JqZWN0ID09PSBudWxsKSBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gIHZhciBkZXNjID0gKDAsIF9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IyLmRlZmF1bHQpKG9iamVjdCwgcHJvcGVydHkpO1xuXG4gIGlmIChkZXNjID09PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcGFyZW50ID0gKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkob2JqZWN0KTtcblxuICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZXQocGFyZW50LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcInZhbHVlXCIgaW4gZGVzYykge1xuICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBnZXR0ZXIgPSBkZXNjLmdldDtcblxuICAgIGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0dGVyLmNhbGwocmVjZWl2ZXIpO1xuICB9XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3NldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2ZcIik7XG5cbnZhciBfc2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL29iamVjdC9jcmVhdGVcIik7XG5cbnZhciBfY3JlYXRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZSk7XG5cbnZhciBfdHlwZW9mMiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxudmFyIF90eXBlb2YzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHlwZW9mMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyAodHlwZW9mIHN1cGVyQ2xhc3MgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKHN1cGVyQ2xhc3MpKSk7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSAoMCwgX2NyZWF0ZTIuZGVmYXVsdCkoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZjIuZGVmYXVsdCA/ICgwLCBfc2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZjIgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBfdHlwZW9mMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3R5cGVvZjIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBmdW5jdGlvbiAoc2VsZiwgY2FsbCkge1xuICBpZiAoIXNlbGYpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gY2FsbCAmJiAoKHR5cGVvZiBjYWxsID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6ICgwLCBfdHlwZW9mMy5kZWZhdWx0KShjYWxsKSkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfaXRlcmF0b3IgPSByZXF1aXJlKFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIik7XG5cbnZhciBfaXRlcmF0b3IyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXRlcmF0b3IpO1xuXG52YXIgX3N5bWJvbCA9IHJlcXVpcmUoXCIuLi9jb3JlLWpzL3N5bWJvbFwiKTtcblxudmFyIF9zeW1ib2wyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3ltYm9sKTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgX3N5bWJvbDIuZGVmYXVsdCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBfaXRlcmF0b3IyLmRlZmF1bHQgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBfc3ltYm9sMi5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBfc3ltYm9sMi5kZWZhdWx0ICYmIG9iaiAhPT0gX3N5bWJvbDIuZGVmYXVsdC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBfdHlwZW9mKF9pdGVyYXRvcjIuZGVmYXVsdCkgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn0gOiBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogJiYgdHlwZW9mIF9zeW1ib2wyLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9zeW1ib2wyLmRlZmF1bHQgJiYgb2JqICE9PSBfc3ltYm9sMi5kZWZhdWx0LnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yob2JqKTtcbn07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9jb3JlLnJlZ2V4cC5lc2NhcGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7IiwidmFyIGNvcmUgID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpXG4gICwgJEpTT04gPSBjb3JlLkpTT04gfHwgKGNvcmUuSlNPTiA9IHtzdHJpbmdpZnk6IEpTT04uc3RyaW5naWZ5fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuICRKU09OLnN0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJndW1lbnRzKTtcbn07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0LmFzc2lnbjsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlJyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKXtcbiAgcmV0dXJuICRPYmplY3QuY3JlYXRlKFAsIEQpO1xufTsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgJE9iamVjdCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIGRlc2Mpe1xuICByZXR1cm4gJE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBkZXNjKTtcbn07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyICRPYmplY3QgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzL19jb3JlJykuT2JqZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gIHJldHVybiAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbn07IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5nZXRQcm90b3R5cGVPZjsiLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3QuaXNGcm96ZW47IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLk9iamVjdC5rZXlzOyIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7IiwicmVxdWlyZSgnLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXM2LnByb21pc2UnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9fY29yZScpLlByb21pc2U7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5TeW1ib2w7IiwicmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fd2tzLWV4dCcpLmYoJ2l0ZXJhdG9yJyk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKXtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgaWYoIWlzT2JqZWN0KGl0KSl0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07IiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIHRvSW5kZXggICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKElTX0lOQ0xVREVTKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKCR0aGlzLCBlbCwgZnJvbUluZGV4KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KCR0aGlzKVxuICAgICAgLCBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aClcbiAgICAgICwgaW5kZXggID0gdG9JbmRleChmcm9tSW5kZXgsIGxlbmd0aClcbiAgICAgICwgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIGlmKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKXdoaWxlKGxlbmd0aCA+IGluZGV4KXtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIGlmKHZhbHVlICE9IHZhbHVlKXJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I3RvSW5kZXggaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKylpZihJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKXtcbiAgICAgIGlmKE9baW5kZXhdID09PSBlbClyZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59OyIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKVxuICAvLyBFUzMgd3JvbmcgaGVyZVxuICAsIEFSRyA9IGNvZihmdW5jdGlvbigpeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uKGl0LCBrZXkpe1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07IiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTsiLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcyLjQuMCd9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgdGhhdCwgbGVuZ3RoKXtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYodGhhdCA9PT0gdW5kZWZpbmVkKXJldHVybiBmbjtcbiAgc3dpdGNoKGxlbmd0aCl7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24oYSl7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uKGEsIGIpe1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbihhLCBiLCBjKXtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTsiLCIvLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKGl0ID09IHVuZGVmaW5lZCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07IiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiA3OyB9fSkuYSAhPSA3O1xufSk7IiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50XG4gIC8vIGluIG9sZCBJRSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0J1xuICAsIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59OyIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpOyIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BTICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKVxuICAsIHBJRSAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgdmFyIHJlc3VsdCAgICAgPSBnZXRLZXlzKGl0KVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgaWYoZ2V0U3ltYm9scyl7XG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KVxuICAgICAgLCBpc0VudW0gID0gcElFLmZcbiAgICAgICwgaSAgICAgICA9IDBcbiAgICAgICwga2V5O1xuICAgIHdoaWxlKHN5bWJvbHMubGVuZ3RoID4gaSlpZihpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSlyZXN1bHQucHVzaChrZXkpO1xuICB9IHJldHVybiByZXN1bHQ7XG59OyIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGN0eCAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24odHlwZSwgbmFtZSwgc291cmNlKXtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkZcbiAgICAsIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkdcbiAgICAsIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlNcbiAgICAsIElTX1BST1RPICA9IHR5cGUgJiAkZXhwb3J0LlBcbiAgICAsIElTX0JJTkQgICA9IHR5cGUgJiAkZXhwb3J0LkJcbiAgICAsIElTX1dSQVAgICA9IHR5cGUgJiAkZXhwb3J0LldcbiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG4gICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV1cbiAgICAsIHRhcmdldCAgICA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGtleSwgb3duLCBvdXQ7XG4gIGlmKElTX0dMT0JBTClzb3VyY2UgPSBuYW1lO1xuICBmb3Ioa2V5IGluIHNvdXJjZSl7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICBpZihvd24gJiYga2V5IGluIGV4cG9ydHMpY29udGludWU7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSBvd24gPyB0YXJnZXRba2V5XSA6IHNvdXJjZVtrZXldO1xuICAgIC8vIHByZXZlbnQgZ2xvYmFsIHBvbGx1dGlvbiBmb3IgbmFtZXNwYWNlc1xuICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKVxuICAgIC8vIHdyYXAgZ2xvYmFsIGNvbnN0cnVjdG9ycyBmb3IgcHJldmVudCBjaGFuZ2UgdGhlbSBpbiBsaWJyYXJ5XG4gICAgOiBJU19XUkFQICYmIHRhcmdldFtrZXldID09IG91dCA/IChmdW5jdGlvbihDKXtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24oYSwgYiwgYyl7XG4gICAgICAgIGlmKHRoaXMgaW5zdGFuY2VvZiBDKXtcbiAgICAgICAgICBzd2l0Y2goYXJndW1lbnRzLmxlbmd0aCl7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQztcbiAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBDKGEpO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IEMoYSwgYik7XG4gICAgICAgICAgfSByZXR1cm4gbmV3IEMoYSwgYiwgYyk7XG4gICAgICAgIH0gcmV0dXJuIEMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgICBGW1BST1RPVFlQRV0gPSBDW1BST1RPVFlQRV07XG4gICAgICByZXR1cm4gRjtcbiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHNcbiAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLm1ldGhvZHMuJU5BTUUlXG4gICAgaWYoSVNfUFJPVE8pe1xuICAgICAgKGV4cG9ydHMudmlydHVhbCB8fCAoZXhwb3J0cy52aXJ0dWFsID0ge30pKVtrZXldID0gb3V0O1xuICAgICAgLy8gZXhwb3J0IHByb3RvIG1ldGhvZHMgdG8gY29yZS4lQ09OU1RSVUNUT1IlLnByb3RvdHlwZS4lTkFNRSVcbiAgICAgIGlmKHR5cGUgJiAkZXhwb3J0LlIgJiYgZXhwUHJvdG8gJiYgIWV4cFByb3RvW2tleV0paGlkZShleHBQcm90bywga2V5LCBvdXQpO1xuICAgIH1cbiAgfVxufTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWAgXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2goZSl7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07IiwidmFyIGN0eCAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBjYWxsICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpXG4gICwgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGdldEl0ZXJGbiAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKVxuICAsIEJSRUFLICAgICAgID0ge31cbiAgLCBSRVRVUk4gICAgICA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1Ipe1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbigpeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpXG4gICAgLCBmICAgICAgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSlcbiAgICAsIGluZGV4ICA9IDBcbiAgICAsIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYoaXNBcnJheUl0ZXIoaXRlckZuKSlmb3IobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4Kyspe1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZihyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKXJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKXtcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcbiAgICBpZihyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKXJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLICA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZiA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZih0eXBlb2YgX19nID09ICdudW1iZXInKV9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59OyIsInZhciBkUCAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKXtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpe1xuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gb2JqZWN0O1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsiLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gNzsgfX0pLmEgIT0gNztcbn0pOyIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgYXJncywgdGhhdCl7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoKGFyZ3MubGVuZ3RoKXtcbiAgICBjYXNlIDA6IHJldHVybiB1biA/IGZuKClcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgfSByZXR1cm4gICAgICAgICAgICAgIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTsiLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTsiLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG52YXIgSXRlcmF0b3JzICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgSVRFUkFUT1IgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCAhPT0gdW5kZWZpbmVkICYmIChJdGVyYXRvcnMuQXJyYXkgPT09IGl0IHx8IEFycmF5UHJvdG9bSVRFUkFUT1JdID09PSBpdCk7XG59OyIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpe1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59OyIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKXtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoKGUpe1xuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYocmV0ICE9PSB1bmRlZmluZWQpYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBjcmVhdGUgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAsIGRlc2NyaXB0b3IgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCl7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCByZWRlZmluZSAgICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIGhhcyAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgJGl0ZXJDcmVhdGUgICAgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBJVEVSQVRPUiAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpXG4gICwgQlVHR1kgICAgICAgICAgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSkgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxuICAsIEZGX0lURVJBVE9SICAgID0gJ0BAaXRlcmF0b3InXG4gICwgS0VZUyAgICAgICAgICAgPSAna2V5cydcbiAgLCBWQUxVRVMgICAgICAgICA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCl7XG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uKGtpbmQpe1xuICAgIGlmKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKXJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2goa2luZCl7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCl7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKXsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgfTtcbiAgdmFyIFRBRyAgICAgICAgPSBOQU1FICsgJyBJdGVyYXRvcidcbiAgICAsIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFU1xuICAgICwgVkFMVUVTX0JVRyA9IGZhbHNlXG4gICAgLCBwcm90byAgICAgID0gQmFzZS5wcm90b3R5cGVcbiAgICAsICRuYXRpdmUgICAgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF1cbiAgICAsICRkZWZhdWx0ICAgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKVxuICAgICwgJGVudHJpZXMgICA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWRcbiAgICAsICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlXG4gICAgLCBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmKCRhbnlOYXRpdmUpe1xuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKSk7XG4gICAgaWYoSXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpe1xuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICAvLyBmaXggZm9yIHNvbWUgb2xkIGVuZ2luZXNcbiAgICAgIGlmKCFMSUJSQVJZICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSloaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKXtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZigoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSl7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSAgPSByZXR1cm5UaGlzO1xuICBpZihERUZBVUxUKXtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiAgREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiAgICBJU19TRVQgICAgID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYoRk9SQ0VEKWZvcihrZXkgaW4gbWV0aG9kcyl7XG4gICAgICBpZighKGtleSBpbiBwcm90bykpcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICB9IGVsc2UgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpO1xuICB9XG4gIHJldHVybiBtZXRob2RzO1xufTsiLCJ2YXIgSVRFUkFUT1IgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZyl7XG4gIGlmKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKXJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyICA9IFs3XVxuICAgICAgLCBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uKCl7IHJldHVybiB7ZG9uZTogc2FmZSA9IHRydWV9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2goZSl7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZG9uZSwgdmFsdWUpe1xuICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lfTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSB7fTsiLCJ2YXIgZ2V0S2V5cyAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBlbCl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwga2V5cyAgID0gZ2V0S2V5cyhPKVxuICAgICwgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAsIGluZGV4ICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobGVuZ3RoID4gaW5kZXgpaWYoT1trZXkgPSBrZXlzW2luZGV4KytdXSA9PT0gZWwpcmV0dXJuIGtleTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSB0cnVlOyIsInZhciBNRVRBICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJylcbiAgLCBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaGFzICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHNldERlc2MgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGlkICAgICAgID0gMDtcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uKCl7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpO1xufSk7XG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uKGl0KXtcbiAgc2V0RGVzYyhpdCwgTUVUQSwge3ZhbHVlOiB7XG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfX0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24oaXQsIGNyZWF0ZSl7XG4gIC8vIHJldHVybiBwcmltaXRpdmUgd2l0aCBwcmVmaXhcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZighaGFzKGl0LCBNRVRBKSl7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gJ0UnO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcbn07XG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uKGl0LCBjcmVhdGUpe1xuICBpZighaGFzKGl0LCBNRVRBKSl7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZighaXNFeHRlbnNpYmxlKGl0KSlyZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmKCFjcmVhdGUpcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbihpdCl7XG4gIGlmKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSlzZXRNZXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XG4gIEtFWTogICAgICBNRVRBLFxuICBORUVEOiAgICAgZmFsc2UsXG4gIGZhc3RLZXk6ICBmYXN0S2V5LFxuICBnZXRXZWFrOiAgZ2V0V2VhayxcbiAgb25GcmVlemU6IG9uRnJlZXplXG59OyIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXRcbiAgLCBPYnNlcnZlciAgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlclxuICAsIHByb2Nlc3MgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgUHJvbWlzZSAgID0gZ2xvYmFsLlByb21pc2VcbiAgLCBpc05vZGUgICAgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKXtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbigpe1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKXBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUoaGVhZCl7XG4gICAgICBmbiAgID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgaWYoaGVhZClub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZihwYXJlbnQpcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZihpc05vZGUpe1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXJcbiAgfSBlbHNlIGlmKE9ic2VydmVyKXtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZVxuICAgICAgLCBub2RlICAgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKXtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKXtcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCl7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbigpe1xuICAgICAgLy8gc3RyYW5nZSBJRSArIHdlYnBhY2sgZGV2IHNlcnZlciBidWcgLSB1c2UgLmNhbGwoZ2xvYmFsKVxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihmbil7XG4gICAgdmFyIHRhc2sgPSB7Zm46IGZuLCBuZXh0OiB1bmRlZmluZWR9O1xuICAgIGlmKGxhc3QpbGFzdC5uZXh0ID0gdGFzaztcbiAgICBpZighaGVhZCl7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59OyIsIid1c2Ugc3RyaWN0Jztcbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBwSUUgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsICRhc3NpZ24gID0gT2JqZWN0LmFzc2lnbjtcblxuLy8gc2hvdWxkIHdvcmsgd2l0aCBzeW1ib2xzIGFuZCBzaG91bGQgaGF2ZSBkZXRlcm1pbmlzdGljIHByb3BlcnR5IG9yZGVyIChWOCBidWcpXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgdmFyIEEgPSB7fVxuICAgICwgQiA9IHt9XG4gICAgLCBTID0gU3ltYm9sKClcbiAgICAsIEsgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnO1xuICBBW1NdID0gNztcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihrKXsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICB2YXIgVCAgICAgPSB0b09iamVjdCh0YXJnZXQpXG4gICAgLCBhTGVuICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAsIGluZGV4ID0gMVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZlxuICAgICwgaXNFbnVtICAgICA9IHBJRS5mO1xuICB3aGlsZShhTGVuID4gaW5kZXgpe1xuICAgIHZhciBTICAgICAgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSlcbiAgICAgICwga2V5cyAgID0gZ2V0U3ltYm9scyA/IGdldEtleXMoUykuY29uY2F0KGdldFN5bWJvbHMoUykpIDogZ2V0S2V5cyhTKVxuICAgICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICAgLCBqICAgICAgPSAwXG4gICAgICAsIGtleTtcbiAgICB3aGlsZShsZW5ndGggPiBqKWlmKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpVFtrZXldID0gU1trZXldO1xuICB9IHJldHVybiBUO1xufSA6ICRhc3NpZ247IiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGRQcyAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpXG4gICwgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIEVtcHR5ICAgICAgID0gZnVuY3Rpb24oKXsgLyogZW1wdHkgKi8gfVxuICAsIFBST1RPVFlQRSAgID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24oKXtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJylcbiAgICAsIGkgICAgICA9IGVudW1CdWdLZXlzLmxlbmd0aFxuICAgICwgbHQgICAgID0gJzwnXG4gICAgLCBndCAgICAgPSAnPidcbiAgICAsIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZS5zcmMgPSAnamF2YXNjcmlwdDonOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNjcmlwdC11cmxcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xuICBpZnJhbWVEb2N1bWVudCA9IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XG4gIHdoaWxlKGktLSlkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcyl7XG4gIHZhciByZXN1bHQ7XG4gIGlmKE8gIT09IG51bGwpe1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZFAgICAgICAgICAgICAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmKElFOF9ET01fREVGSU5FKXRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoKGUpeyAvKiBlbXB0eSAqLyB9XG4gIGlmKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcyl0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZigndmFsdWUnIGluIEF0dHJpYnV0ZXMpT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTsiLCJ2YXIgZFAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXRLZXlzICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKXtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzICAgPSBnZXRLZXlzKFByb3BlcnRpZXMpXG4gICAgLCBsZW5ndGggPSBrZXlzLmxlbmd0aFxuICAgICwgaSA9IDBcbiAgICAsIFA7XG4gIHdoaWxlKGxlbmd0aCA+IGkpZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcbiAgcmV0dXJuIE87XG59OyIsInZhciBwSUUgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b1ByaW1pdGl2ZSAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKVxuICAsIGdPUEQgICAgICAgICAgID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCl7XG4gIE8gPSB0b0lPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYoSUU4X0RPTV9ERUZJTkUpdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxuICBpZihoYXMoTywgUCkpcmV0dXJuIGNyZWF0ZURlc2MoIXBJRS5mLmNhbGwoTywgUCksIE9bUF0pO1xufTsiLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgZ09QTiAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgdG9TdHJpbmcgID0ge30udG9TdHJpbmc7XG5cbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xuXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbihpdCl7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoKGUpe1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCl7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzICAgICAgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpXG4gICwgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKXtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTsiLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzOyIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgaGFzICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIHRvT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBJRV9QUk9UTyAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKVxuICAsIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24oTyl7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYoaGFzKE8sIElFX1BST1RPKSlyZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3Ipe1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07IiwidmFyIGhhcyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgdG9JT2JqZWN0ICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSlcbiAgLCBJRV9QUk9UTyAgICAgPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob2JqZWN0LCBuYW1lcyl7XG4gIHZhciBPICAgICAgPSB0b0lPYmplY3Qob2JqZWN0KVxuICAgICwgaSAgICAgID0gMFxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGtleTtcbiAgZm9yKGtleSBpbiBPKWlmKGtleSAhPSBJRV9QUk9UTyloYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlKG5hbWVzLmxlbmd0aCA+IGkpaWYoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKXtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59OyIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKVxuICAsIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTyl7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59OyIsImV4cG9ydHMuZiA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlOyIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvcmUgICAgPSByZXF1aXJlKCcuL19jb3JlJylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKXtcbiAgdmFyIGZuICA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXVxuICAgICwgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihiaXRtYXAsIHZhbHVlKXtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlICA6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlICAgIDogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZSAgICAgICA6IHZhbHVlXG4gIH07XG59OyIsInZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih0YXJnZXQsIHNyYywgc2FmZSl7XG4gIGZvcih2YXIga2V5IGluIHNyYyl7XG4gICAgaWYoc2FmZSAmJiB0YXJnZXRba2V5XSl0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIGVsc2UgaGlkZSh0YXJnZXQsIGtleSwgc3JjW2tleV0pO1xuICB9IHJldHVybiB0YXJnZXQ7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faGlkZScpOyIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uKE8sIHByb3RvKXtcbiAgYW5PYmplY3QoTyk7XG4gIGlmKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCl7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaChlKXsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pe1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmKGJ1Z2d5KU8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgQyA9IHR5cGVvZiBjb3JlW0tFWV0gPT0gJ2Z1bmN0aW9uJyA/IGNvcmVbS0VZXSA6IGdsb2JhbFtLRVldO1xuICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTsiLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCl7XG4gIGlmKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpZGVmKGl0LCBUQUcsIHtjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWd9KTtcbn07IiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJylcbiAgLCB1aWQgICAgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KXtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXydcbiAgLCBzdG9yZSAgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTsiLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIFNQRUNJRVMgICA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpe1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLCBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XG59OyIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpe1xuICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKXtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKVxuICAgICAgLCBpID0gdG9JbnRlZ2VyKHBvcylcbiAgICAgICwgbCA9IHMubGVuZ3RoXG4gICAgICAsIGEsIGI7XG4gICAgaWYoaSA8IDAgfHwgaSA+PSBsKXJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59OyIsInZhciBjdHggICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGludm9rZSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ludm9rZScpXG4gICwgaHRtbCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faHRtbCcpXG4gICwgY2VsICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpXG4gICwgZ2xvYmFsICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBwcm9jZXNzICAgICAgICAgICAgPSBnbG9iYWwucHJvY2Vzc1xuICAsIHNldFRhc2sgICAgICAgICAgICA9IGdsb2JhbC5zZXRJbW1lZGlhdGVcbiAgLCBjbGVhclRhc2sgICAgICAgICAgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGVcbiAgLCBNZXNzYWdlQ2hhbm5lbCAgICAgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWxcbiAgLCBjb3VudGVyICAgICAgICAgICAgPSAwXG4gICwgcXVldWUgICAgICAgICAgICAgID0ge31cbiAgLCBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJ1xuICAsIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uKCl7XG4gIHZhciBpZCA9ICt0aGlzO1xuICBpZihxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpe1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCl7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spe1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKXtcbiAgICB2YXIgYXJncyA9IFtdLCBpID0gMTtcbiAgICB3aGlsZShhcmd1bWVudHMubGVuZ3RoID4gaSlhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbigpe1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKXtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKXtcbiAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKXtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZihNZXNzYWdlQ2hhbm5lbCl7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbDtcbiAgICBwb3J0ICAgID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyl7XG4gICAgZGVmZXIgPSBmdW5jdGlvbihpZCl7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0Jykpe1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKXtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpe1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6ICAgc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTsiLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgbWF4ICAgICAgID0gTWF0aC5tYXhcbiAgLCBtaW4gICAgICAgPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaW5kZXgsIGxlbmd0aCl7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59OyIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgID0gTWF0aC5jZWlsXG4gICwgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xufTsiLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59OyIsIi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIG1pbiAgICAgICA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59OyIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xufTsiLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBTKXtcbiAgaWYoIWlzT2JqZWN0KGl0KSlyZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZihTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKXJldHVybiB2YWw7XG4gIGlmKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgaWYoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTsiLCJ2YXIgaWQgPSAwXG4gICwgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xufTsiLCJ2YXIgZ2xvYmFsICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCB3a3NFeHQgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcy1leHQnKVxuICAsIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSl7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwge3ZhbHVlOiB3a3NFeHQuZihuYW1lKX0pO1xufTsiLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTsiLCJ2YXIgc3RvcmUgICAgICA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKVxuICAsIHVpZCAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAsIFN5bWJvbCAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2xcbiAgLCBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpe1xuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cbiAgICBVU0VfU1lNQk9MICYmIFN5bWJvbFtuYW1lXSB8fCAoVVNFX1NZTUJPTCA/IFN5bWJvbCA6IHVpZCkoJ1N5bWJvbC4nICsgbmFtZSkpO1xufTtcblxuJGV4cG9ydHMuc3RvcmUgPSBzdG9yZTsiLCJ2YXIgY2xhc3NvZiAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgSVRFUkFUT1IgID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJylcbiAgLCBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCAhPSB1bmRlZmluZWQpcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpXG4gICwgc3RlcCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpXG4gICwgSXRlcmF0b3JzICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgdG9JT2JqZWN0ICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbihpdGVyYXRlZCwga2luZCl7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcbi8vIDIyLjEuNS4yLjEgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24oKXtcbiAgdmFyIE8gICAgID0gdGhpcy5fdFxuICAgICwga2luZCAgPSB0aGlzLl9rXG4gICAgLCBpbmRleCA9IHRoaXMuX2krKztcbiAgaWYoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpe1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpOyIsIi8vIDE5LjEuMy4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHthc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKX0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jylcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7Y3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyl9KTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuLy8gMTkuMS4yLjQgLyAxNS4yLjMuNiBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydHk6IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZ9KTsiLCIvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXG52YXIgdG9JT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KXtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0b0lPYmplY3QoaXQpLCBrZXkpO1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXG52YXIgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCAkZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpe1xuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi4xMiBPYmplY3QuaXNGcm96ZW4oTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRnJvemVuJywgZnVuY3Rpb24oJGlzRnJvemVuKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCAka2V5cyAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uKCl7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KXtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldH0pOyIsIiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZICAgICAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCBnbG9iYWwgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGN0eCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgY2xhc3NvZiAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgJGV4cG9ydCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpc09iamVjdCAgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuSW5zdGFuY2UgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCBmb3JPZiAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAsIHRhc2sgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXRcbiAgLCBtaWNyb3Rhc2sgICAgICAgICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpXG4gICwgUFJPTUlTRSAgICAgICAgICAgID0gJ1Byb21pc2UnXG4gICwgVHlwZUVycm9yICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvclxuICAsIHByb2Nlc3MgICAgICAgICAgICA9IGdsb2JhbC5wcm9jZXNzXG4gICwgJFByb21pc2UgICAgICAgICAgID0gZ2xvYmFsW1BST01JU0VdXG4gICwgcHJvY2VzcyAgICAgICAgICAgID0gZ2xvYmFsLnByb2Nlc3NcbiAgLCBpc05vZGUgICAgICAgICAgICAgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJ1xuICAsIGVtcHR5ICAgICAgICAgICAgICA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH1cbiAgLCBJbnRlcm5hbCwgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24oKXtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSAgICAgPSAkUHJvbWlzZS5yZXNvbHZlKDEpXG4gICAgICAsIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbihleGVjKXsgZXhlYyhlbXB0eSwgZW1wdHkpOyB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgfSBjYXRjaChlKXsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYil7XG4gIC8vIHdpdGggbGlicmFyeSB3cmFwcGVyIHNwZWNpYWwgY2FzZVxuICByZXR1cm4gYSA9PT0gYiB8fCBhID09PSAkUHJvbWlzZSAmJiBiID09PSBXcmFwcGVyO1xufTtcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24oaXQpe1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICByZXR1cm4gc2FtZUNvbnN0cnVjdG9yKCRQcm9taXNlLCBDKVxuICAgID8gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgOiBuZXcgR2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IEdlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpe1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbigkJHJlc29sdmUsICQkcmVqZWN0KXtcbiAgICBpZihyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ICA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCAgPSBhRnVuY3Rpb24ocmVqZWN0KTtcbn07XG52YXIgcGVyZm9ybSA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIGV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4ge2Vycm9yOiBlfTtcbiAgfVxufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbihwcm9taXNlLCBpc1JlamVjdCl7XG4gIGlmKHByb21pc2UuX24pcmV0dXJuO1xuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdlxuICAgICAgLCBvayAgICA9IHByb21pc2UuX3MgPT0gMVxuICAgICAgLCBpICAgICA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uKHJlYWN0aW9uKXtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWxcbiAgICAgICAgLCByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZVxuICAgICAgICAsIHJlamVjdCAgPSByZWFjdGlvbi5yZWplY3RcbiAgICAgICAgLCBkb21haW4gID0gcmVhY3Rpb24uZG9tYWluXG4gICAgICAgICwgcmVzdWx0LCB0aGVuO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYoaGFuZGxlcil7XG4gICAgICAgICAgaWYoIW9rKXtcbiAgICAgICAgICAgIGlmKHByb21pc2UuX2ggPT0gMilvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZihoYW5kbGVyID09PSB0cnVlKXJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYoZG9tYWluKWRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7XG4gICAgICAgICAgICBpZihkb21haW4pZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKXtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpe1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlKGNoYWluLmxlbmd0aCA+IGkpcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpb25VbmhhbmRsZWQocHJvbWlzZSk7XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3ZcbiAgICAgICwgYWJydXB0LCBoYW5kbGVyLCBjb25zb2xlO1xuICAgIGlmKGlzVW5oYW5kbGVkKHByb21pc2UpKXtcbiAgICAgIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoaXNOb2RlKXtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pe1xuICAgICAgICAgIGhhbmRsZXIoe3Byb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWV9KTtcbiAgICAgICAgfSBlbHNlIGlmKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3Ipe1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZihhYnJ1cHQpdGhyb3cgYWJydXB0LmVycm9yO1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKXtcbiAgaWYocHJvbWlzZS5faCA9PSAxKXJldHVybiBmYWxzZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jXG4gICAgLCBpICAgICA9IDBcbiAgICAsIHJlYWN0aW9uO1xuICB3aGlsZShjaGFpbi5sZW5ndGggPiBpKXtcbiAgICByZWFjdGlvbiA9IGNoYWluW2krK107XG4gICAgaWYocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpcmV0dXJuIGZhbHNlO1xuICB9IHJldHVybiB0cnVlO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uKHByb21pc2Upe1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbigpe1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmKGlzTm9kZSl7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpe1xuICAgICAgaGFuZGxlcih7cHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92fSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uKHZhbHVlKXtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZihwcm9taXNlLl9kKXJldHVybjtcbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZighcHJvbWlzZS5fYSlwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpe1xuICB2YXIgcHJvbWlzZSA9IHRoaXNcbiAgICAsIHRoZW47XG4gIGlmKHByb21pc2UuX2QpcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYocHJvbWlzZSA9PT0gdmFsdWUpdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgaWYodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKXtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbigpe1xuICAgICAgICB2YXIgd3JhcHBlciA9IHtfdzogcHJvbWlzZSwgX2Q6IGZhbHNlfTsgLy8gd3JhcFxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoKGUpe1xuICAgICRyZWplY3QuY2FsbCh7X3c6IHByb21pc2UsIF9kOiBmYWxzZX0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZighVVNFX05BVElWRSl7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcil7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2goZXJyKXtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKXtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpe1xuICAgICAgdmFyIHJlYWN0aW9uICAgID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayAgICAgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgICA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX2EpdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmKHRoaXMuX3Mpbm90aWZ5KHRoaXMsIGZhbHNlKTtcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKXtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKCl7XG4gICAgdmFyIHByb21pc2UgID0gbmV3IEludGVybmFsO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCAgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG59XG5cbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHtQcm9taXNlOiAkUHJvbWlzZX0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKXtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpXG4gICAgICAsICQkcmVqZWN0ICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpe1xuICAgIC8vIGluc3RhbmNlb2YgaW5zdGVhZCBvZiBpbnRlcm5hbCBzbG90IGNoZWNrIGJlY2F1c2Ugd2Ugc2hvdWxkIGZpeCBpdCB3aXRob3V0IHJlcGxhY2VtZW50IG5hdGl2ZSBQcm9taXNlIGNvcmVcbiAgICBpZih4IGluc3RhbmNlb2YgJFByb21pc2UgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKXJldHVybiB4O1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcylcbiAgICAgICwgJCRyZXNvbHZlICA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAkJHJlc29sdmUoeCk7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uKGl0ZXIpe1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSl7XG4gICAgdmFyIEMgICAgICAgICAgPSB0aGlzXG4gICAgICAsIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgLCByZXNvbHZlICAgID0gY2FwYWJpbGl0eS5yZXNvbHZlXG4gICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgdmFyIHZhbHVlcyAgICA9IFtdXG4gICAgICAgICwgaW5kZXggICAgID0gMFxuICAgICAgICAsIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uKHByb21pc2Upe1xuICAgICAgICB2YXIgJGluZGV4ICAgICAgICA9IGluZGV4KytcbiAgICAgICAgICAsIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICBpZihhbHJlYWR5Q2FsbGVkKXJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkICA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZihhYnJ1cHQpcmVqZWN0KGFicnVwdC5lcnJvcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKXtcbiAgICB2YXIgQyAgICAgICAgICA9IHRoaXNcbiAgICAgICwgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICAsIHJlamVjdCAgICAgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpe1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKXtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYoYWJydXB0KXJlamVjdChhYnJ1cHQuZXJyb3IpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkYXQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XG5cbi8vIDIxLjEuMy4yNyBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbigpe1xuICB2YXIgTyAgICAgPSB0aGlzLl90XG4gICAgLCBpbmRleCA9IHRoaXMuX2lcbiAgICAsIHBvaW50O1xuICBpZihpbmRleCA+PSBPLmxlbmd0aClyZXR1cm4ge3ZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWV9O1xuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4ge3ZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2V9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gRUNNQVNjcmlwdCA2IHN5bWJvbHMgc2hpbVxudmFyIGdsb2JhbCAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHJlZGVmaW5lICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIE1FVEEgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWVxuICAsICRmYWlscyAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIHNoYXJlZCAgICAgICAgID0gcmVxdWlyZSgnLi9fc2hhcmVkJylcbiAgLCBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCB1aWQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3VpZCcpXG4gICwgd2tzICAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAsIHdrc0V4dCAgICAgICAgID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpXG4gICwgd2tzRGVmaW5lICAgICAgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJylcbiAgLCBrZXlPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vX2tleW9mJylcbiAgLCBlbnVtS2V5cyAgICAgICA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpXG4gICwgaXNBcnJheSAgICAgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpXG4gICwgYW5PYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvSU9iamVjdCAgICAgID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGNyZWF0ZURlc2MgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICwgX2NyZWF0ZSAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCBnT1BORXh0ICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpXG4gICwgJEdPUEQgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgJERQICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsICRrZXlzICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKVxuICAsIGdPUEQgICAgICAgICAgID0gJEdPUEQuZlxuICAsIGRQICAgICAgICAgICAgID0gJERQLmZcbiAgLCBnT1BOICAgICAgICAgICA9IGdPUE5FeHQuZlxuICAsICRTeW1ib2wgICAgICAgID0gZ2xvYmFsLlN5bWJvbFxuICAsICRKU09OICAgICAgICAgID0gZ2xvYmFsLkpTT05cbiAgLCBfc3RyaW5naWZ5ICAgICA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeVxuICAsIFBST1RPVFlQRSAgICAgID0gJ3Byb3RvdHlwZSdcbiAgLCBISURERU4gICAgICAgICA9IHdrcygnX2hpZGRlbicpXG4gICwgVE9fUFJJTUlUSVZFICAgPSB3a3MoJ3RvUHJpbWl0aXZlJylcbiAgLCBpc0VudW0gICAgICAgICA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlXG4gICwgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpXG4gICwgQWxsU3ltYm9scyAgICAgPSBzaGFyZWQoJ3N5bWJvbHMnKVxuICAsIE9QU3ltYm9scyAgICAgID0gc2hhcmVkKCdvcC1zeW1ib2xzJylcbiAgLCBPYmplY3RQcm90byAgICA9IE9iamVjdFtQUk9UT1RZUEVdXG4gICwgVVNFX05BVElWRSAgICAgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nXG4gICwgUU9iamVjdCAgICAgICAgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xuICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIGRQKHRoaXMsICdhJywge3ZhbHVlOiA3fSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbihpdCwga2V5LCBEKXtcbiAgdmFyIHByb3RvRGVzYyA9IGdPUEQoT2JqZWN0UHJvdG8sIGtleSk7XG4gIGlmKHByb3RvRGVzYylkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcbiAgZFAoaXQsIGtleSwgRCk7XG4gIGlmKHByb3RvRGVzYyAmJiBpdCAhPT0gT2JqZWN0UHJvdG8pZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbih0YWcpe1xuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xuICBzeW0uX2sgPSB0YWc7XG4gIHJldHVybiBzeW07XG59O1xuXG52YXIgaXNTeW1ib2wgPSBVU0VfTkFUSVZFICYmIHR5cGVvZiAkU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnID8gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xufSA6IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKXtcbiAgaWYoaXQgPT09IE9iamVjdFByb3RvKSRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmKGhhcyhBbGxTeW1ib2xzLCBrZXkpKXtcbiAgICBpZighRC5lbnVtZXJhYmxlKXtcbiAgICAgIGlmKCFoYXMoaXQsIEhJRERFTikpZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSlpdFtISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHtlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKX0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xufTtcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApe1xuICBhbk9iamVjdChpdCk7XG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSlcbiAgICAsIGkgICAgPSAwXG4gICAgLCBsID0ga2V5cy5sZW5ndGhcbiAgICAsIGtleTtcbiAgd2hpbGUobCA+IGkpJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCl7XG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcbn07XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoa2V5KXtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYodGhpcyA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gRSB8fCAhaGFzKHRoaXMsIGtleSkgfHwgIWhhcyhBbGxTeW1ib2xzLCBrZXkpIHx8IGhhcyh0aGlzLCBISURERU4pICYmIHRoaXNbSElEREVOXVtrZXldID8gRSA6IHRydWU7XG59O1xudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSl7XG4gIGl0ICA9IHRvSU9iamVjdChpdCk7XG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XG4gIGlmKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSlyZXR1cm47XG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcbiAgaWYoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKUQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpe1xuICB2YXIgbmFtZXMgID0gZ09QTih0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7XG4gICAgaWYoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKXJlc3VsdC5wdXNoKGtleSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCl7XG4gIHZhciBJU19PUCAgPSBpdCA9PT0gT2JqZWN0UHJvdG9cbiAgICAsIG5hbWVzICA9IGdPUE4oSVNfT1AgPyBPUFN5bWJvbHMgOiB0b0lPYmplY3QoaXQpKVxuICAgICwgcmVzdWx0ID0gW11cbiAgICAsIGkgICAgICA9IDBcbiAgICAsIGtleTtcbiAgd2hpbGUobmFtZXMubGVuZ3RoID4gaSl7XG4gICAgaWYoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKXJlc3VsdC5wdXNoKEFsbFN5bWJvbHNba2V5XSk7XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxuaWYoIVVTRV9OQVRJVkUpe1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCl7XG4gICAgaWYodGhpcyBpbnN0YW5jZW9mICRTeW1ib2wpdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBpZih0aGlzID09PSBPYmplY3RQcm90bykkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XG4gICAgICBpZihoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKXRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKXNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywge2NvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0fSk7XG4gICAgcmV0dXJuIHdyYXAodGFnKTtcbiAgfTtcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiB0aGlzLl9rO1xuICB9KTtcblxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgJERQLmYgICA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mICA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKS5mID0gJGdldE93blByb3BlcnR5U3ltYm9scztcblxuICBpZihERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKXtcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcbiAgfVxuXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24obmFtZSl7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfVxufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7U3ltYm9sOiAkU3ltYm9sfSk7XG5cbmZvcih2YXIgc3ltYm9scyA9IChcbiAgLy8gMTkuNC4yLjIsIDE5LjQuMi4zLCAxOS40LjIuNCwgMTkuNC4yLjYsIDE5LjQuMi44LCAxOS40LjIuOSwgMTkuNC4yLjEwLCAxOS40LjIuMTEsIDE5LjQuMi4xMiwgMTkuNC4yLjEzLCAxOS40LjIuMTRcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xuKS5zcGxpdCgnLCcpLCBpID0gMDsgc3ltYm9scy5sZW5ndGggPiBpOyApd2tzKHN5bWJvbHNbaSsrXSk7XG5cbmZvcih2YXIgc3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGkgPSAwOyBzeW1ib2xzLmxlbmd0aCA+IGk7ICl3a3NEZWZpbmUoc3ltYm9sc1tpKytdKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ1N5bWJvbCcsIHtcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXG4gICdmb3InOiBmdW5jdGlvbihrZXkpe1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioa2V5KXtcbiAgICBpZihpc1N5bWJvbChrZXkpKXJldHVybiBrZXlPZihTeW1ib2xSZWdpc3RyeSwga2V5KTtcbiAgICB0aHJvdyBUeXBlRXJyb3Ioa2V5ICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24oKXsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbigpeyBzZXR0ZXIgPSBmYWxzZTsgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdPYmplY3QnLCB7XG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbiAgY3JlYXRlOiAkY3JlYXRlLFxuICAvLyAxOS4xLjIuNCBPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcylcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxuICAvLyAxOS4xLjIuNyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyAyNC4zLjIgSlNPTi5zdHJpbmdpZnkodmFsdWUgWywgcmVwbGFjZXIgWywgc3BhY2VdXSlcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbigpe1xuICB2YXIgUyA9ICRTeW1ib2woKTtcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7YTogU30pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCl7XG4gICAgaWYoaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgdmFyIGFyZ3MgPSBbaXRdXG4gICAgICAsIGkgICAgPSAxXG4gICAgICAsIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUoYXJndW1lbnRzLmxlbmd0aCA+IGkpYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICByZXBsYWNlciA9IGFyZ3NbMV07XG4gICAgaWYodHlwZW9mIHJlcGxhY2VyID09ICdmdW5jdGlvbicpJHJlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgaWYoJHJlcGxhY2VyIHx8ICFpc0FycmF5KHJlcGxhY2VyKSlyZXBsYWNlciA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpe1xuICAgICAgaWYoJHJlcGxhY2VyKXZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICBpZighaXNTeW1ib2wodmFsdWUpKXJldHVybiB2YWx1ZTtcbiAgICB9O1xuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcbiAgICByZXR1cm4gX3N0cmluZ2lmeS5hcHBseSgkSlNPTiwgYXJncyk7XG4gIH1cbn0pO1xuXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbi8vIDE5LjQuMy41IFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7IiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7IiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7IiwicmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnbG9iYWwgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoaWRlICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgSXRlcmF0b3JzICAgICA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpXG4gICwgVE9fU1RSSU5HX1RBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuXG5mb3IodmFyIGNvbGxlY3Rpb25zID0gWydOb2RlTGlzdCcsICdET01Ub2tlbkxpc3QnLCAnTWVkaWFMaXN0JywgJ1N0eWxlU2hlZXRMaXN0JywgJ0NTU1J1bGVMaXN0J10sIGkgPSAwOyBpIDwgNTsgaSsrKXtcbiAgdmFyIE5BTUUgICAgICAgPSBjb2xsZWN0aW9uc1tpXVxuICAgICwgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXVxuICAgICwgcHJvdG8gICAgICA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIGlmKHByb3RvICYmICFwcm90b1tUT19TVFJJTkdfVEFHXSloaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgSXRlcmF0b3JzW05BTUVdID0gSXRlcmF0b3JzLkFycmF5O1xufSIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIG1zZyl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKXRocm93IFR5cGVFcnJvcihtc2cpO1xuICByZXR1cm4gK2l0O1xufTsiLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKVxuICAsIEFycmF5UHJvdG8gID0gQXJyYXkucHJvdG90eXBlO1xuaWYoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKXJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihrZXkpe1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07IiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvSW5kZXggID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldC8qPSAwKi8sIHN0YXJ0Lyo9IDAsIGVuZCA9IEBsZW5ndGgqLyl7XG4gIHZhciBPICAgICA9IHRvT2JqZWN0KHRoaXMpXG4gICAgLCBsZW4gICA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICwgdG8gICAgPSB0b0luZGV4KHRhcmdldCwgbGVuKVxuICAgICwgZnJvbSAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pXG4gICAgLCBlbmQgICA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkXG4gICAgLCBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKVxuICAgICwgaW5jICAgPSAxO1xuICBpZihmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpe1xuICAgIGluYyAgPSAtMTtcbiAgICBmcm9tICs9IGNvdW50IC0gMTtcbiAgICB0byAgICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZShjb3VudC0tID4gMCl7XG4gICAgaWYoZnJvbSBpbiBPKU9bdG9dID0gT1tmcm9tXTtcbiAgICBlbHNlIGRlbGV0ZSBPW3RvXTtcbiAgICB0byAgICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07IiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG4ndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvSW5kZXggID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyosIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLyl7XG4gIHZhciBPICAgICAgPSB0b09iamVjdCh0aGlzKVxuICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgLCBhTGVuICAgPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgLCBpbmRleCAgPSB0b0luZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpXG4gICAgLCBlbmQgICAgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZFxuICAgICwgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0luZGV4KGVuZCwgbGVuZ3RoKTtcbiAgd2hpbGUoZW5kUG9zID4gaW5kZXgpT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07IiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlciwgSVRFUkFUT1Ipe1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvck9mKGl0ZXIsIGZhbHNlLCByZXN1bHQucHVzaCwgcmVzdWx0LCBJVEVSQVRPUik7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXG4vLyAxIC0+IEFycmF5I21hcFxuLy8gMiAtPiBBcnJheSNmaWx0ZXJcbi8vIDMgLT4gQXJyYXkjc29tZVxuLy8gNCAtPiBBcnJheSNldmVyeVxuLy8gNSAtPiBBcnJheSNmaW5kXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxudmFyIGN0eCAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgLCBJT2JqZWN0ICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgYXNjICAgICAgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUWVBFLCAkY3JlYXRlKXtcbiAgdmFyIElTX01BUCAgICAgICAgPSBUWVBFID09IDFcbiAgICAsIElTX0ZJTFRFUiAgICAgPSBUWVBFID09IDJcbiAgICAsIElTX1NPTUUgICAgICAgPSBUWVBFID09IDNcbiAgICAsIElTX0VWRVJZICAgICAgPSBUWVBFID09IDRcbiAgICAsIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDZcbiAgICAsIE5PX0hPTEVTICAgICAgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWFxuICAgICwgY3JlYXRlICAgICAgICA9ICRjcmVhdGUgfHwgYXNjO1xuICByZXR1cm4gZnVuY3Rpb24oJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpe1xuICAgIHZhciBPICAgICAgPSB0b09iamVjdCgkdGhpcylcbiAgICAgICwgc2VsZiAgID0gSU9iamVjdChPKVxuICAgICAgLCBmICAgICAgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMylcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDBcbiAgICAgICwgcmVzdWx0ID0gSVNfTUFQID8gY3JlYXRlKCR0aGlzLCBsZW5ndGgpIDogSVNfRklMVEVSID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZFxuICAgICAgLCB2YWwsIHJlcztcbiAgICBmb3IoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKWlmKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpe1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYoVFlQRSl7XG4gICAgICAgIGlmKElTX01BUClyZXN1bHRbaW5kZXhdID0gcmVzOyAgICAgICAgICAgIC8vIG1hcFxuICAgICAgICBlbHNlIGlmKHJlcylzd2l0Y2goVFlQRSl7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWw7ICAgICAgICAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAgICAgICAgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBpZihJU19FVkVSWSlyZXR1cm4gZmFsc2U7ICAgICAgICAgIC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59OyIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCB0b09iamVjdCAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIElPYmplY3QgICA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKVxuICAsIHRvTGVuZ3RoICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpe1xuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XG4gIHZhciBPICAgICAgPSB0b09iamVjdCh0aGF0KVxuICAgICwgc2VsZiAgID0gSU9iamVjdChPKVxuICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpXG4gICAgLCBpbmRleCAgPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDBcbiAgICAsIGkgICAgICA9IGlzUmlnaHQgPyAtMSA6IDE7XG4gIGlmKGFMZW4gPCAyKWZvcig7Oyl7XG4gICAgaWYoaW5kZXggaW4gc2VsZil7XG4gICAgICBtZW1vID0gc2VsZltpbmRleF07XG4gICAgICBpbmRleCArPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGluZGV4ICs9IGk7XG4gICAgaWYoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCl7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcbiAgICB9XG4gIH1cbiAgZm9yKDtpc1JpZ2h0ID8gaW5kZXggPj0gMCA6IGxlbmd0aCA+IGluZGV4OyBpbmRleCArPSBpKWlmKGluZGV4IGluIHNlbGYpe1xuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gIH1cbiAgcmV0dXJuIG1lbW87XG59OyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgaXNBcnJheSAgPSByZXF1aXJlKCcuL19pcy1hcnJheScpXG4gICwgU1BFQ0lFUyAgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsKXtcbiAgdmFyIEM7XG4gIGlmKGlzQXJyYXkob3JpZ2luYWwpKXtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZih0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpQyA9IHVuZGVmaW5lZDtcbiAgICBpZihpc09iamVjdChDKSl7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmKEMgPT09IG51bGwpQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07IiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbCwgbGVuZ3RoKXtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBpc09iamVjdCAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBpbnZva2UgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBhcnJheVNsaWNlID0gW10uc2xpY2VcbiAgLCBmYWN0b3JpZXMgID0ge307XG5cbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbihGLCBsZW4sIGFyZ3Mpe1xuICBpZighKGxlbiBpbiBmYWN0b3JpZXMpKXtcbiAgICBmb3IodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKyluW2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbbGVuXShGLCBhcmdzKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24uYmluZCB8fCBmdW5jdGlvbiBiaW5kKHRoYXQgLyosIGFyZ3MuLi4gKi8pe1xuICB2YXIgZm4gICAgICAgPSBhRnVuY3Rpb24odGhpcylcbiAgICAsIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZCA9IGZ1bmN0aW9uKC8qIGFyZ3MuLi4gKi8pe1xuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGJvdW5kID8gY29uc3RydWN0KGZuLCBhcmdzLmxlbmd0aCwgYXJncykgOiBpbnZva2UoZm4sIGFyZ3MsIHRoYXQpO1xuICB9O1xuICBpZihpc09iamVjdChmbi5wcm90b3R5cGUpKWJvdW5kLnByb3RvdHlwZSA9IGZuLnByb3RvdHlwZTtcbiAgcmV0dXJuIGJvdW5kO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgY3JlYXRlICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJylcbiAgLCByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpXG4gICwgY3R4ICAgICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIGFuSW5zdGFuY2UgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKVxuICAsIHN0ZXAgICAgICAgID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJylcbiAgLCBzZXRTcGVjaWVzICA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJylcbiAgLCBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJylcbiAgLCBmYXN0S2V5ICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5XG4gICwgU0laRSAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uKHRoYXQsIGtleSl7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSksIGVudHJ5O1xuICBpZihpbmRleCAhPT0gJ0YnKXJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvcihlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pe1xuICAgIGlmKGVudHJ5LmsgPT0ga2V5KXJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYoaXRlcmFibGUgIT0gdW5kZWZpbmVkKWZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpe1xuICAgICAgICBmb3IodmFyIHRoYXQgPSB0aGlzLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKXtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihlbnRyeS5wKWVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIHZhciB0aGF0ICA9IHRoaXNcbiAgICAgICAgICAsIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYoZW50cnkpe1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkublxuICAgICAgICAgICAgLCBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZihwcmV2KXByZXYubiA9IG5leHQ7XG4gICAgICAgICAgaWYobmV4dCluZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmKHRoYXQuX2YgPT0gZW50cnkpdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYodGhhdC5fbCA9PSBlbnRyeSl0aGF0Ll9sID0gcHJldjtcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICAvLyAyMy4xLjMuNSBNYXAucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiwgdGhhdCA9IHVuZGVmaW5lZCAqLyl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhpcywgQywgJ2ZvckVhY2gnKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpXG4gICAgICAgICAgLCBlbnRyeTtcbiAgICAgICAgd2hpbGUoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKXtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlKGVudHJ5ICYmIGVudHJ5LnIpZW50cnkgPSBlbnRyeS5wO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpe1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmKERFU0NSSVBUT1JTKWRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24oKXtcbiAgICAgICAgcmV0dXJuIGRlZmluZWQodGhpc1tTSVpFXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KVxuICAgICAgLCBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZihlbnRyeSl7XG4gICAgICBlbnRyeS52ID0gdmFsdWU7XG4gICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XG4gICAgICAgIGk6IGluZGV4ID0gZmFzdEtleShrZXksIHRydWUpLCAvLyA8LSBpbmRleFxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxuICAgICAgICBwOiBwcmV2ID0gdGhhdC5fbCwgICAgICAgICAgICAgLy8gPC0gcHJldmlvdXMgZW50cnlcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcbiAgICAgIH07XG4gICAgICBpZighdGhhdC5fZil0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZihwcmV2KXByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZihpbmRleCAhPT0gJ0YnKXRoYXQuX2lbaW5kZXhdID0gZW50cnk7XG4gICAgfSByZXR1cm4gdGhhdDtcbiAgfSxcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uKEMsIE5BTUUsIElTX01BUCl7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uKGl0ZXJhdGVkLCBraW5kKXtcbiAgICAgIHRoaXMuX3QgPSBpdGVyYXRlZDsgIC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbigpe1xuICAgICAgdmFyIHRoYXQgID0gdGhpc1xuICAgICAgICAsIGtpbmQgID0gdGhhdC5fa1xuICAgICAgICAsIGVudHJ5ID0gdGhhdC5fbDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUoZW50cnkgJiYgZW50cnkucillbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSl7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYoa2luZCA9PSAna2V5cycgIClyZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmKGtpbmQgPT0gJ3ZhbHVlcycpcmV0dXJuIHN0ZXAoMCwgZW50cnkudik7XG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnICwgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJylcbiAgLCBmcm9tICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHRvSlNPTigpe1xuICAgIGlmKGNsYXNzb2YodGhpcykgIT0gTkFNRSl0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xuICAgIHJldHVybiBmcm9tKHRoaXMpO1xuICB9O1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGdldFdlYWsgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWtcbiAgLCBhbk9iamVjdCAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgaXNPYmplY3QgICAgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGZvck9mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZm9yLW9mJylcbiAgLCBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKVxuICAsICRoYXMgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBhcnJheUZpbmQgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDUpXG4gICwgYXJyYXlGaW5kSW5kZXggICAgPSBjcmVhdGVBcnJheU1ldGhvZCg2KVxuICAsIGlkICAgICAgICAgICAgICAgID0gMDtcblxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKHRoYXQpe1xuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKTtcbn07XG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uKCl7XG4gIHRoaXMuYSA9IFtdO1xufTtcbnZhciBmaW5kVW5jYXVnaHRGcm96ZW4gPSBmdW5jdGlvbihzdG9yZSwga2V5KXtcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gIH0pO1xufTtcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uKGtleSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpcmV0dXJuIGVudHJ5WzFdO1xuICB9LFxuICBoYXM6IGZ1bmN0aW9uKGtleSl7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSl7XG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gICAgaWYoZW50cnkpZW50cnlbMV0gPSB2YWx1ZTtcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0sXG4gICdkZWxldGUnOiBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBpbmRleCA9IGFycmF5RmluZEluZGV4KHRoaXMuYSwgZnVuY3Rpb24oaXQpe1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYofmluZGV4KXRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbih3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKXtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgaXRlcmFibGUpe1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcbiAgICAgIHRoYXQuX2kgPSBpZCsrOyAgICAgIC8vIGNvbGxlY3Rpb24gaWRcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXG4gICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4zLjMuMiBXZWFrTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcylbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XG4gICAgICB9LFxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSl7XG4gICAgICAgIGlmKCFpc09iamVjdChrZXkpKXJldHVybiBmYWxzZTtcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XG4gICAgICAgIGlmKGRhdGEgPT09IHRydWUpcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhpcykuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24odGhhdCwga2V5LCB2YWx1ZSl7XG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xuICAgIGlmKGRhdGEgPT09IHRydWUpdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcbn07IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCAkZXhwb3J0ICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgcmVkZWZpbmUgICAgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgcmVkZWZpbmVBbGwgICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIG1ldGEgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpXG4gICwgZm9yT2YgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIGFuSW5zdGFuY2UgICAgICAgID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKVxuICAsIGlzT2JqZWN0ICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBmYWlscyAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCAkaXRlckRldGVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JylcbiAgLCBzZXRUb1N0cmluZ1RhZyAgICA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJylcbiAgLCBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSyl7XG4gIHZhciBCYXNlICA9IGdsb2JhbFtOQU1FXVxuICAgICwgQyAgICAgPSBCYXNlXG4gICAgLCBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCdcbiAgICAsIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZVxuICAgICwgTyAgICAgPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uKEtFWSl7XG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcbiAgICByZWRlZmluZShwcm90bywgS0VZLFxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24oYSl7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKXtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpe1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XG4gICAgKTtcbiAgfTtcbiAgaWYodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgICBuZXcgQygpLmVudHJpZXMoKS5uZXh0KCk7XG4gIH0pKSl7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSAgICAgICAgICAgICA9IG5ldyBDXG4gICAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgICAsIEhBU05UX0NIQUlOSU5HICAgICAgID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZVxuICAgICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgICAsIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24oKXsgaW5zdGFuY2UuaGFzKDEpOyB9KVxuICAgICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgICAgLCBBQ0NFUFRfSVRFUkFCTEVTICAgICA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpeyBuZXcgQyhpdGVyKTsgfSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgICAgLCBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpXG4gICAgICAgICAgLCBpbmRleCAgICAgPSA1O1xuICAgICAgICB3aGlsZShpbmRleC0tKSRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICAgIH0pO1xuICAgIGlmKCFBQ0NFUFRfSVRFUkFCTEVTKXsgXG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbih0YXJnZXQsIGl0ZXJhYmxlKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0YXJnZXQsIEMsIE5BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZihpdGVyYWJsZSAhPSB1bmRlZmluZWQpZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTyl7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cbiAgICBpZihCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKWZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZihJU19XRUFLICYmIHByb3RvLmNsZWFyKWRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZighSVNfV0VBSyljb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XG5cbiAgcmV0dXJuIEM7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGNyZWF0ZURlc2MgICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmplY3QsIGluZGV4LCB2YWx1ZSl7XG4gIGlmKGluZGV4IGluIG9iamVjdCkkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTsiLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBOVU1CRVIgICAgICA9ICdudW1iZXInO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGhpbnQpe1xuICBpZihoaW50ICE9PSAnc3RyaW5nJyAmJiBoaW50ICE9PSBOVU1CRVIgJiYgaGludCAhPT0gJ2RlZmF1bHQnKXRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcbiAgcmV0dXJuIHRvUHJpbWl0aXZlKGFuT2JqZWN0KHRoaXMpLCBoaW50ICE9IE5VTUJFUik7XG59OyIsInZhciBnbG9iYWwgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICA9IHJlcXVpcmUoJy4vX2NvcmUnKVxuICAsIGhpZGUgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHJlZGVmaW5lICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBjdHggICAgICAgPSByZXF1aXJlKCcuL19jdHgnKVxuICAsIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSl7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GXG4gICAgLCBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HXG4gICAgLCBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TXG4gICAgLCBJU19QUk9UTyAgPSB0eXBlICYgJGV4cG9ydC5QXG4gICAgLCBJU19CSU5EICAgPSB0eXBlICYgJGV4cG9ydC5CXG4gICAgLCB0YXJnZXQgICAgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV1cbiAgICAsIGV4cG9ydHMgICA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pXG4gICAgLCBleHBQcm90byAgPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KVxuICAgICwga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZihJU19HTE9CQUwpc291cmNlID0gbmFtZTtcbiAgZm9yKGtleSBpbiBzb3VyY2Upe1xuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxuICAgIG93biA9ICFJU19GT1JDRUQgJiYgdGFyZ2V0ICYmIHRhcmdldFtrZXldICE9PSB1bmRlZmluZWQ7XG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xuICAgIC8vIGJpbmQgdGltZXJzIHRvIGdsb2JhbCBmb3IgY2FsbCBmcm9tIGV4cG9ydCBjb250ZXh0XG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmKHRhcmdldClyZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZihleHBvcnRzW2tleV0gIT0gb3V0KWhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KWV4cFByb3RvW2tleV0gPSBvdXQ7XG4gIH1cbn07XG5nbG9iYWwuY29yZSA9IGNvcmU7XG4vLyB0eXBlIGJpdG1hcFxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQuRyA9IDI7ICAgLy8gZ2xvYmFsXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydC5CID0gMTY7ICAvLyBiaW5kXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydC5SID0gMTI4OyAvLyByZWFsIHByb3RvIG1ldGhvZCBmb3IgYGxpYnJhcnlgIFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0OyIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgcmUgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbS0VZXShyZSk7XG4gIH0gY2F0Y2goZSl7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoKGYpeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBoaWRlICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKVxuICAsIGZhaWxzICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGRlZmluZWQgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgd2tzICAgICAgPSByZXF1aXJlKCcuL193a3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVksIGxlbmd0aCwgZXhlYyl7XG4gIHZhciBTWU1CT0wgICA9IHdrcyhLRVkpXG4gICAgLCBmbnMgICAgICA9IGV4ZWMoZGVmaW5lZCwgU1lNQk9MLCAnJ1tLRVldKVxuICAgICwgc3RyZm4gICAgPSBmbnNbMF1cbiAgICAsIHJ4Zm4gICAgID0gZm5zWzFdO1xuICBpZihmYWlscyhmdW5jdGlvbigpe1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24oKXsgcmV0dXJuIDc7IH07XG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcbiAgfSkpe1xuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24oc3RyaW5nLCBhcmcpeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxuICAgICAgLy8gMjEuMi41LjYgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXShzdHJpbmcpXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXG4gICAgICA6IGZ1bmN0aW9uKHN0cmluZyl7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpe1xuICB2YXIgdGhhdCAgID0gYW5PYmplY3QodGhpcylcbiAgICAsIHJlc3VsdCA9ICcnO1xuICBpZih0aGF0Lmdsb2JhbCkgICAgIHJlc3VsdCArPSAnZyc7XG4gIGlmKHRoYXQuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcbiAgaWYodGhhdC5tdWx0aWxpbmUpICByZXN1bHQgKz0gJ20nO1xuICBpZih0aGF0LnVuaWNvZGUpICAgIHJlc3VsdCArPSAndSc7XG4gIGlmKHRoYXQuc3RpY2t5KSAgICAgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07IiwidmFyIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgdGFyZ2V0LCBDKXtcbiAgdmFyIFAsIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIGlmKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2Ype1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTsiLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZmxvb3IgICAgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpe1xuICByZXR1cm4gIWlzT2JqZWN0KGl0KSAmJiBpc0Zpbml0ZShpdCkgJiYgZmxvb3IoaXQpID09PSBpdDtcbn07IiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGNvZiAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCBNQVRDSCAgICA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlOyIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcbiAgLy8gT2xkIEZGIGJ1Z1xuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xuICB8fCAkZXhwbTEoLTJlLTE3KSAhPSAtMmUtMTdcbikgPyBmdW5jdGlvbiBleHBtMSh4KXtcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcbn0gOiAkZXhwbTE7IiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KXtcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xufTsiLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpe1xuICByZXR1cm4gKHggPSAreCkgPT0gMCB8fCB4ICE9IHggPyB4IDogeCA8IDAgPyAtMSA6IDE7XG59OyIsInZhciBNYXAgICAgID0gcmVxdWlyZSgnLi9lczYubWFwJylcbiAgLCAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzaGFyZWQgID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ21ldGFkYXRhJylcbiAgLCBzdG9yZSAgID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKTtcblxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKXtcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XG4gIGlmKCF0YXJnZXRNZXRhZGF0YSl7XG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gdW5kZWZpbmVkO1xuICAgIHN0b3JlLnNldCh0YXJnZXQsIHRhcmdldE1ldGFkYXRhID0gbmV3IE1hcCk7XG4gIH1cbiAgdmFyIGtleU1ldGFkYXRhID0gdGFyZ2V0TWV0YWRhdGEuZ2V0KHRhcmdldEtleSk7XG4gIGlmKCFrZXlNZXRhZGF0YSl7XG4gICAgaWYoIWNyZWF0ZSlyZXR1cm4gdW5kZWZpbmVkO1xuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCk7XG4gIH0gcmV0dXJuIGtleU1ldGFkYXRhO1xufTtcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gZnVuY3Rpb24oTWV0YWRhdGFLZXksIE8sIFApe1xuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcbiAgcmV0dXJuIG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IG1ldGFkYXRhTWFwLmhhcyhNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XG59O1xudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSwgTywgUCl7XG4gIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgdHJ1ZSkuc2V0KE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlKTtcbn07XG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBmdW5jdGlvbih0YXJnZXQsIHRhcmdldEtleSl7XG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKVxuICAgICwga2V5cyAgICAgICAgPSBbXTtcbiAgaWYobWV0YWRhdGFNYXApbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbihfLCBrZXkpeyBrZXlzLnB1c2goa2V5KTsgfSk7XG4gIHJldHVybiBrZXlzO1xufTtcbnZhciB0b01ldGFLZXkgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG52YXIgZXhwID0gZnVuY3Rpb24oTyl7XG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHN0b3JlOiBzdG9yZSxcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXG4gIGdldDogb3JkaW5hcnlHZXRPd25NZXRhZGF0YSxcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcbiAga2V5OiB0b01ldGFLZXksXG4gIGV4cDogZXhwXG59OyIsIi8vIEZvcmNlZCByZXBsYWNlbWVudCBwcm90b3R5cGUgYWNjZXNzb3JzIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpO1xuICAvLyBJbiBGRiB0aHJvd3Mgb25seSBkZWZpbmUgbWV0aG9kc1xuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24oKXsgLyogZW1wdHkgKi99KTtcbiAgZGVsZXRlIHJlcXVpcmUoJy4vX2dsb2JhbCcpW0tdO1xufSk7IiwidmFyIGdldEtleXMgICA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBpc0VudW0gICAgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXNFbnRyaWVzKXtcbiAgcmV0dXJuIGZ1bmN0aW9uKGl0KXtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KGl0KVxuICAgICAgLCBrZXlzICAgPSBnZXRLZXlzKE8pXG4gICAgICAsIGxlbmd0aCA9IGtleXMubGVuZ3RoXG4gICAgICAsIGkgICAgICA9IDBcbiAgICAgICwgcmVzdWx0ID0gW11cbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGxlbmd0aCA+IGkpaWYoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSl7XG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH07XG59OyIsIi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbnZhciBnT1BOICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJylcbiAgLCBnT1BTICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJylcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgUmVmbGVjdCAgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KXtcbiAgdmFyIGtleXMgICAgICAgPSBnT1BOLmYoYW5PYmplY3QoaXQpKVxuICAgICwgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgcmV0dXJuIGdldFN5bWJvbHMgPyBrZXlzLmNvbmNhdChnZXRTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTsiLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0XG4gICwgJHRyaW0gICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XG5cbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKXtcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKVxuICAgICwgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0OyIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludFxuICAsICR0cmltICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbVxuICAsIHdzICAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpXG4gICwgaGV4ICAgICAgID0gL15bXFwtK10/MFt4WF0vO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCl7XG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xufSA6ICRwYXJzZUludDsiLCIndXNlIHN0cmljdCc7XG52YXIgcGF0aCAgICAgID0gcmVxdWlyZSgnLi9fcGF0aCcpXG4gICwgaW52b2tlICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKC8qIC4uLnBhcmdzICovKXtcbiAgdmFyIGZuICAgICA9IGFGdW5jdGlvbih0aGlzKVxuICAgICwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICwgcGFyZ3MgID0gQXJyYXkobGVuZ3RoKVxuICAgICwgaSAgICAgID0gMFxuICAgICwgXyAgICAgID0gcGF0aC5fXG4gICAgLCBob2xkZXIgPSBmYWxzZTtcbiAgd2hpbGUobGVuZ3RoID4gaSlpZigocGFyZ3NbaV0gPSBhcmd1bWVudHNbaSsrXSkgPT09IF8paG9sZGVyID0gdHJ1ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCBqID0gMCwgayA9IDAsIGFyZ3M7XG4gICAgaWYoIWhvbGRlciAmJiAhYUxlbilyZXR1cm4gaW52b2tlKGZuLCBwYXJncywgdGhhdCk7XG4gICAgYXJncyA9IHBhcmdzLnNsaWNlKCk7XG4gICAgaWYoaG9sZGVyKWZvcig7bGVuZ3RoID4gajsgaisrKWlmKGFyZ3Nbal0gPT09IF8pYXJnc1tqXSA9IGFyZ3VtZW50c1trKytdO1xuICAgIHdoaWxlKGFMZW4gPiBrKWFyZ3MucHVzaChhcmd1bWVudHNbaysrXSk7XG4gICAgcmV0dXJuIGludm9rZShmbiwgYXJncywgdGhhdCk7XG4gIH07XG59OyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7IiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMsIHNhZmUpe1xuICBmb3IodmFyIGtleSBpbiBzcmMpcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07IiwidmFyIGdsb2JhbCAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgaGFzICAgICAgID0gcmVxdWlyZSgnLi9faGFzJylcbiAgLCBTUkMgICAgICAgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJylcbiAgLCBUT19TVFJJTkcgPSAndG9TdHJpbmcnXG4gICwgJHRvU3RyaW5nID0gRnVuY3Rpb25bVE9fU1RSSU5HXVxuICAsIFRQTCAgICAgICA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihPLCBrZXksIHZhbCwgc2FmZSl7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZihpc0Z1bmN0aW9uKWhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYoT1trZXldID09PSB2YWwpcmV0dXJuO1xuICBpZihpc0Z1bmN0aW9uKWhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xuICBpZihPID09PSBnbG9iYWwpe1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBpZighc2FmZSl7XG4gICAgICBkZWxldGUgT1trZXldO1xuICAgICAgaGlkZShPLCBrZXksIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmKE9ba2V5XSlPW2tleV0gPSB2YWw7XG4gICAgICBlbHNlIGhpZGUoTywga2V5LCB2YWwpO1xuICAgIH1cbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKXtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihyZWdFeHAsIHJlcGxhY2Upe1xuICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbihwYXJ0KXtcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcbiAgfSA6IHJlcGxhY2U7XG4gIHJldHVybiBmdW5jdGlvbihpdCl7XG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcbiAgfTtcbn07IiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KXtcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgZFAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFNQRUNJRVMgICAgID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpe1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZihERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKWRQLmYoQywgU1BFQ0lFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTsiLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1ldGhvZCwgYXJnKXtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24oKXt9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07IiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpXG4gICwgZGVmaW5lZCAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKXtcbiAgaWYoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSl0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZyMnICsgTkFNRSArIFwiIGRvZXNuJ3QgYWNjZXB0IHJlZ2V4IVwiKTtcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbn07IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIHF1b3QgICAgPSAvXCIvZztcbi8vIEIuMi4zLjIuMSBDcmVhdGVIVE1MKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKVxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbihzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSkge1xuICB2YXIgUyAgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKVxuICAgICwgcDEgPSAnPCcgKyB0YWc7XG4gIGlmKGF0dHJpYnV0ZSAhPT0gJycpcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihOQU1FLCBleGVjKXtcbiAgdmFyIE8gPSB7fTtcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXtcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KSwgJ1N0cmluZycsIE8pO1xufTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCByZXBlYXQgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxuICAsIGRlZmluZWQgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRoYXQsIG1heExlbmd0aCwgZmlsbFN0cmluZywgbGVmdCl7XG4gIHZhciBTICAgICAgICAgICAgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSlcbiAgICAsIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoXG4gICAgLCBmaWxsU3RyICAgICAgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZylcbiAgICAsIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gIGlmKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJylyZXR1cm4gUztcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGhcbiAgICAsIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcbiAgaWYoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pc3RyaW5nRmlsbGVyID0gc3RyaW5nRmlsbGVyLnNsaWNlKDAsIGZpbGxMZW4pO1xuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgLCBkZWZpbmVkICAgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KXtcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKVxuICAgICwgcmVzID0gJydcbiAgICAsIG4gICA9IHRvSW50ZWdlcihjb3VudCk7XG4gIGlmKG4gPCAwIHx8IG4gPT0gSW5maW5pdHkpdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xuICBmb3IoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSlpZihuICYgMSlyZXMgKz0gc3RyO1xuICByZXR1cm4gcmVzO1xufTsiLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKVxuICAsIGZhaWxzICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgc3BhY2VzICA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpXG4gICwgc3BhY2UgICA9ICdbJyArIHNwYWNlcyArICddJ1xuICAsIG5vbiAgICAgPSAnXFx1MjAwYlxcdTAwODUnXG4gICwgbHRyaW0gICA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKVxuICAsIHJ0cmltICAgPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbihLRVksIGV4ZWMsIEFMSUFTKXtcbiAgdmFyIGV4cCAgID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmKEFMSUFTKWV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbihzdHJpbmcsIFRZUEUpe1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYoVFlQRSAmIDEpc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYoVFlQRSAmIDIpc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7IiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnOyIsIid1c2Ugc3RyaWN0JztcbmlmKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpe1xuICB2YXIgTElCUkFSWSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKVxuICAgICwgZ2xvYmFsICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICAgLCBmYWlscyAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAgICwgJGV4cG9ydCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICAgLCAkdHlwZWQgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKVxuICAgICwgJGJ1ZmZlciAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpXG4gICAgLCBjdHggICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY3R4JylcbiAgICAsIGFuSW5zdGFuY2UgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICAgLCBwcm9wZXJ0eURlc2MgICAgICAgID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpXG4gICAgLCBoaWRlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICAgLCByZWRlZmluZUFsbCAgICAgICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgICAsIHRvSW50ZWdlciAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJylcbiAgICAsIHRvTGVuZ3RoICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAgICwgdG9JbmRleCAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWluZGV4JylcbiAgICAsIHRvUHJpbWl0aXZlICAgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAgICwgaGFzICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICAgLCBzYW1lICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpXG4gICAgLCBjbGFzc29mICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICAgLCBpc09iamVjdCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgICAsIHRvT2JqZWN0ICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAgICwgaXNBcnJheUl0ZXIgICAgICAgICA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKVxuICAgICwgY3JlYXRlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKVxuICAgICwgZ2V0UHJvdG90eXBlT2YgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAgICwgZ09QTiAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAgICwgZ2V0SXRlckZuICAgICAgICAgICA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJylcbiAgICAsIHVpZCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL191aWQnKVxuICAgICwgd2tzICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3drcycpXG4gICAgLCBjcmVhdGVBcnJheU1ldGhvZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpXG4gICAgLCBjcmVhdGVBcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKVxuICAgICwgc3BlY2llc0NvbnN0cnVjdG9yICA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKVxuICAgICwgQXJyYXlJdGVyYXRvcnMgICAgICA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJylcbiAgICAsIEl0ZXJhdG9ycyAgICAgICAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAgICwgJGl0ZXJEZXRlY3QgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JylcbiAgICAsIHNldFNwZWNpZXMgICAgICAgICAgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpXG4gICAgLCBhcnJheUZpbGwgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpXG4gICAgLCBhcnJheUNvcHlXaXRoaW4gICAgID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKVxuICAgICwgJERQICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpXG4gICAgLCAkR09QRCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAgICwgZFAgICAgICAgICAgICAgICAgICA9ICREUC5mXG4gICAgLCBnT1BEICAgICAgICAgICAgICAgID0gJEdPUEQuZlxuICAgICwgUmFuZ2VFcnJvciAgICAgICAgICA9IGdsb2JhbC5SYW5nZUVycm9yXG4gICAgLCBUeXBlRXJyb3IgICAgICAgICAgID0gZ2xvYmFsLlR5cGVFcnJvclxuICAgICwgVWludDhBcnJheSAgICAgICAgICA9IGdsb2JhbC5VaW50OEFycmF5XG4gICAgLCBBUlJBWV9CVUZGRVIgICAgICAgID0gJ0FycmF5QnVmZmVyJ1xuICAgICwgU0hBUkVEX0JVRkZFUiAgICAgICA9ICdTaGFyZWQnICsgQVJSQVlfQlVGRkVSXG4gICAgLCBCWVRFU19QRVJfRUxFTUVOVCAgID0gJ0JZVEVTX1BFUl9FTEVNRU5UJ1xuICAgICwgUFJPVE9UWVBFICAgICAgICAgICA9ICdwcm90b3R5cGUnXG4gICAgLCBBcnJheVByb3RvICAgICAgICAgID0gQXJyYXlbUFJPVE9UWVBFXVxuICAgICwgJEFycmF5QnVmZmVyICAgICAgICA9ICRidWZmZXIuQXJyYXlCdWZmZXJcbiAgICAsICREYXRhVmlldyAgICAgICAgICAgPSAkYnVmZmVyLkRhdGFWaWV3XG4gICAgLCBhcnJheUZvckVhY2ggICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoMClcbiAgICAsIGFycmF5RmlsdGVyICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCgyKVxuICAgICwgYXJyYXlTb21lICAgICAgICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDMpXG4gICAgLCBhcnJheUV2ZXJ5ICAgICAgICAgID0gY3JlYXRlQXJyYXlNZXRob2QoNClcbiAgICAsIGFycmF5RmluZCAgICAgICAgICAgPSBjcmVhdGVBcnJheU1ldGhvZCg1KVxuICAgICwgYXJyYXlGaW5kSW5kZXggICAgICA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpXG4gICAgLCBhcnJheUluY2x1ZGVzICAgICAgID0gY3JlYXRlQXJyYXlJbmNsdWRlcyh0cnVlKVxuICAgICwgYXJyYXlJbmRleE9mICAgICAgICA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpXG4gICAgLCBhcnJheVZhbHVlcyAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMudmFsdWVzXG4gICAgLCBhcnJheUtleXMgICAgICAgICAgID0gQXJyYXlJdGVyYXRvcnMua2V5c1xuICAgICwgYXJyYXlFbnRyaWVzICAgICAgICA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXNcbiAgICAsIGFycmF5TGFzdEluZGV4T2YgICAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mXG4gICAgLCBhcnJheVJlZHVjZSAgICAgICAgID0gQXJyYXlQcm90by5yZWR1Y2VcbiAgICAsIGFycmF5UmVkdWNlUmlnaHQgICAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0XG4gICAgLCBhcnJheUpvaW4gICAgICAgICAgID0gQXJyYXlQcm90by5qb2luXG4gICAgLCBhcnJheVNvcnQgICAgICAgICAgID0gQXJyYXlQcm90by5zb3J0XG4gICAgLCBhcnJheVNsaWNlICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZVxuICAgICwgYXJyYXlUb1N0cmluZyAgICAgICA9IEFycmF5UHJvdG8udG9TdHJpbmdcbiAgICAsIGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBBcnJheVByb3RvLnRvTG9jYWxlU3RyaW5nXG4gICAgLCBJVEVSQVRPUiAgICAgICAgICAgID0gd2tzKCdpdGVyYXRvcicpXG4gICAgLCBUQUcgICAgICAgICAgICAgICAgID0gd2tzKCd0b1N0cmluZ1RhZycpXG4gICAgLCBUWVBFRF9DT05TVFJVQ1RPUiAgID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpXG4gICAgLCBERUZfQ09OU1RSVUNUT1IgICAgID0gdWlkKCdkZWZfY29uc3RydWN0b3InKVxuICAgICwgQUxMX0NPTlNUUlVDVE9SUyAgICA9ICR0eXBlZC5DT05TVFJcbiAgICAsIFRZUEVEX0FSUkFZICAgICAgICAgPSAkdHlwZWQuVFlQRURcbiAgICAsIFZJRVcgICAgICAgICAgICAgICAgPSAkdHlwZWQuVklFV1xuICAgICwgV1JPTkdfTEVOR1RIICAgICAgICA9ICdXcm9uZyBsZW5ndGghJztcblxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uKE8sIGxlbmd0aCl7XG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xuICB9KTtcblxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XG4gIH0pO1xuXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyBVaW50OEFycmF5KDEpLnNldCh7fSk7XG4gIH0pO1xuXG4gIHZhciBzdHJpY3RUb0xlbmd0aCA9IGZ1bmN0aW9uKGl0LCBTQU1FKXtcbiAgICBpZihpdCA9PT0gdW5kZWZpbmVkKXRocm93IFR5cGVFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHZhciBudW1iZXIgPSAraXRcbiAgICAgICwgbGVuZ3RoID0gdG9MZW5ndGgoaXQpO1xuICAgIGlmKFNBTUUgJiYgIXNhbWUobnVtYmVyLCBsZW5ndGgpKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9O1xuXG4gIHZhciB0b09mZnNldCA9IGZ1bmN0aW9uKGl0LCBCWVRFUyl7XG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XG4gICAgaWYob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfTtcblxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbihpdCl7XG4gICAgaWYoaXNPYmplY3QoaXQpICYmIFRZUEVEX0FSUkFZIGluIGl0KXJldHVybiBpdDtcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIHR5cGVkIGFycmF5IScpO1xuICB9O1xuXG4gIHZhciBhbGxvY2F0ZSA9IGZ1bmN0aW9uKEMsIGxlbmd0aCl7XG4gICAgaWYoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSl7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uKE8sIGxpc3Qpe1xuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XG4gIH07XG5cbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24oQywgbGlzdCl7XG4gICAgdmFyIGluZGV4ICA9IDBcbiAgICAgICwgbGVuZ3RoID0gbGlzdC5sZW5ndGhcbiAgICAgICwgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcbiAgICB3aGlsZShsZW5ndGggPiBpbmRleClyZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbihpdCwga2V5LCBpbnRlcm5hbCl7XG4gICAgZFAoaXQsIGtleSwge2dldDogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuX2RbaW50ZXJuYWxdOyB9fSk7XG4gIH07XG5cbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyosIG1hcGZuLCB0aGlzQXJnICovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KHNvdXJjZSlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgdmFsdWVzID0gW10sIGkgPSAwOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGkrKyl7XG4gICAgICAgIHZhbHVlcy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgICAgfSBPID0gdmFsdWVzO1xuICAgIH1cbiAgICBpZihtYXBwaW5nICYmIGFMZW4gPiAyKW1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xuICAgIGZvcihpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspe1xuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICB2YXIgJG9mID0gZnVuY3Rpb24gb2YoLyouLi5pdGVtcyovKXtcbiAgICB2YXIgaW5kZXggID0gMFxuICAgICAgLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XG4gICAgd2hpbGUobGVuZ3RoID4gaW5kZXgpcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbiAgdmFyIFRPX0xPQ0FMRV9CVUcgPSAhIVVpbnQ4QXJyYXkgJiYgZmFpbHMoZnVuY3Rpb24oKXsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XG5cbiAgdmFyICR0b0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCl7XG4gICAgcmV0dXJuIGFycmF5VG9Mb2NhbGVTdHJpbmcuYXBwbHkoVE9fTE9DQUxFX0JVRyA/IGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSkgOiB2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcbiAgfTtcblxuICB2YXIgcHJvdG8gPSB7XG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qLCBlbmQgKi8pe1xuICAgICAgcmV0dXJuIGFycmF5Q29weVdpdGhpbi5jYWxsKHZhbGlkYXRlKHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZmlsbDogZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiwgc3RhcnQsIGVuZCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlGaWx0ZXIodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XG4gICAgfSxcbiAgICBmaW5kOiBmdW5jdGlvbiBmaW5kKHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiwgdGhpc0FyZyAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlGaW5kSW5kZXgodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggKi8pe1xuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7XG4gICAgICByZXR1cm4gYXJyYXlJbmNsdWRlcyh2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyosIGZyb21JbmRleCAqLyl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICAgIHJldHVybiBhcnJheUxhc3RJbmRleE9mLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xuICAgIH0sXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyosIHRoaXNBcmcgKi8pe1xuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qLCBpbml0aWFsVmFsdWUgKi8peyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiwgaW5pdGlhbFZhbHVlICovKXsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlUmlnaHQuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCl7XG4gICAgICB2YXIgdGhhdCAgID0gdGhpc1xuICAgICAgICAsIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aFxuICAgICAgICAsIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMilcbiAgICAgICAgLCBpbmRleCAgPSAwXG4gICAgICAgICwgdmFsdWU7XG4gICAgICB3aGlsZShpbmRleCA8IG1pZGRsZSl7XG4gICAgICAgIHZhbHVlICAgICAgICAgPSB0aGF0W2luZGV4XTtcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgICAgICB0aGF0W2xlbmd0aF0gID0gdmFsdWU7XG4gICAgICB9IHJldHVybiB0aGF0O1xuICAgIH0sXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qLCB0aGlzQXJnICovKXtcbiAgICAgIHJldHVybiBhcnJheVNvbWUodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXtcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcbiAgICB9LFxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKXtcbiAgICAgIHZhciBPICAgICAgPSB2YWxpZGF0ZSh0aGlzKVxuICAgICAgICAsIGxlbmd0aCA9IE8ubGVuZ3RoXG4gICAgICAgICwgJGJlZ2luID0gdG9JbmRleChiZWdpbiwgbGVuZ3RoKTtcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcbiAgICAgICAgTy5idWZmZXIsXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvSW5kZXgoZW5kLCBsZW5ndGgpKSAtICRiZWdpbilcbiAgICAgICk7XG4gICAgfVxuICB9O1xuXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKXtcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xuICB9O1xuXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiwgb2Zmc2V0ICovKXtcbiAgICB2YWxpZGF0ZSh0aGlzKTtcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKVxuICAgICAgLCBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgICAgLCBzcmMgICAgPSB0b09iamVjdChhcnJheUxpa2UpXG4gICAgICAsIGxlbiAgICA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgaWYobGVuICsgb2Zmc2V0ID4gbGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICB3aGlsZShpbmRleCA8IGxlbil0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcbiAgfTtcblxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCl7XG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xuICAgIH0sXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpe1xuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcbiAgICB9LFxuICAgIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCl7XG4gICAgICByZXR1cm4gYXJyYXlWYWx1ZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbih0YXJnZXQsIGtleSl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRhcmdldClcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcbiAgICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcbiAgfTtcbiAgdmFyICRnZXREZXNjID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KXtcbiAgICByZXR1cm4gaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcbiAgfTtcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2Mpe1xuICAgIGlmKGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgICAmJiAhaGFzKGRlc2MsICdnZXQnKVxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXG4gICAgICAmJiAhZGVzYy5jb25maWd1cmFibGVcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcbiAgICApe1xuICAgICAgdGFyZ2V0W2tleV0gPSBkZXNjLnZhbHVlO1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9IGVsc2UgcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcbiAgfTtcblxuICBpZighQUxMX0NPTlNUUlVDVE9SUyl7XG4gICAgJEdPUEQuZiA9ICRnZXREZXNjO1xuICAgICREUC5mICAgPSAkc2V0RGVzYztcbiAgfVxuXG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIUFMTF9DT05TVFJVQ1RPUlMsICdPYmplY3QnLCB7XG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcbiAgICBkZWZpbmVQcm9wZXJ0eTogICAgICAgICAgICRzZXREZXNjXG4gIH0pO1xuXG4gIGlmKGZhaWxzKGZ1bmN0aW9uKCl7IGFycmF5VG9TdHJpbmcuY2FsbCh7fSk7IH0pKXtcbiAgICBhcnJheVRvU3RyaW5nID0gYXJyYXlUb0xvY2FsZVN0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgdmFyICRUeXBlZEFycmF5UHJvdG90eXBlJCA9IHJlZGVmaW5lQWxsKHt9LCBwcm90byk7XG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIHtcbiAgICBzbGljZTogICAgICAgICAgJHNsaWNlLFxuICAgIHNldDogICAgICAgICAgICAkc2V0LFxuICAgIGNvbnN0cnVjdG9yOiAgICBmdW5jdGlvbigpeyAvKiBub29wICovIH0sXG4gICAgdG9TdHJpbmc6ICAgICAgIGFycmF5VG9TdHJpbmcsXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xuICB9KTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVMZW5ndGgnLCAnbCcpO1xuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgQllURVMsIHdyYXBwZXIsIENMQU1QRUQpe1xuICAgIENMQU1QRUQgPSAhIUNMQU1QRUQ7XG4gICAgdmFyIE5BTUUgICAgICAgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSdcbiAgICAgICwgSVNOVF9VSU5UOCA9IE5BTUUgIT0gJ1VpbnQ4QXJyYXknXG4gICAgICAsIEdFVFRFUiAgICAgPSAnZ2V0JyArIEtFWVxuICAgICAgLCBTRVRURVIgICAgID0gJ3NldCcgKyBLRVlcbiAgICAgICwgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXVxuICAgICAgLCBCYXNlICAgICAgID0gVHlwZWRBcnJheSB8fCB7fVxuICAgICAgLCBUQUMgICAgICAgID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KVxuICAgICAgLCBGT1JDRUQgICAgID0gIVR5cGVkQXJyYXkgfHwgISR0eXBlZC5BQlZcbiAgICAgICwgTyAgICAgICAgICA9IHt9XG4gICAgICAsIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5ICYmIFR5cGVkQXJyYXlbUFJPVE9UWVBFXTtcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24odGhhdCwgaW5kZXgpe1xuICAgICAgdmFyIGRhdGEgPSB0aGF0Ll9kO1xuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIHNldHRlciA9IGZ1bmN0aW9uKHRoYXQsIGluZGV4LCB2YWx1ZSl7XG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XG4gICAgICBpZihDTEFNUEVEKXZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xuICAgIH07XG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbih0aGF0LCBpbmRleCl7XG4gICAgICBkUCh0aGF0LCBpbmRleCwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgcmV0dXJuIGdldHRlcih0aGlzLCBpbmRleCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZihGT1JDRUQpe1xuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24odGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCl7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XG4gICAgICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAgICAgLCBvZmZzZXQgPSAwXG4gICAgICAgICAgLCBidWZmZXIsIGJ5dGVMZW5ndGgsIGxlbmd0aCwga2xhc3M7XG4gICAgICAgIGlmKCFpc09iamVjdChkYXRhKSl7XG4gICAgICAgICAgbGVuZ3RoICAgICA9IHN0cmljdFRvTGVuZ3RoKGRhdGEsIHRydWUpXG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xuICAgICAgICAgIGJ1ZmZlciAgICAgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xuICAgICAgICB9IGVsc2UgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7XG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XG4gICAgICAgICAgdmFyICRsZW4gPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgaWYoJGxlbmd0aCA9PT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIGlmKCRsZW4gJSBCWVRFUyl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmKGJ5dGVMZW5ndGggPCAwKXRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHRvTGVuZ3RoKCRsZW5ndGgpICogQllURVM7XG4gICAgICAgICAgICBpZihieXRlTGVuZ3RoICsgb2Zmc2V0ID4gJGxlbil0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcbiAgICAgICAgfSBlbHNlIGlmKFRZUEVEX0FSUkFZIGluIGRhdGEpe1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcbiAgICAgICAgICBiOiBidWZmZXIsXG4gICAgICAgICAgbzogb2Zmc2V0LFxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZTogbGVuZ3RoLFxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUoaW5kZXggPCBsZW5ndGgpYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IGNyZWF0ZSgkVHlwZWRBcnJheVByb3RvdHlwZSQpO1xuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcbiAgICB9IGVsc2UgaWYoISRpdGVyRGV0ZWN0KGZ1bmN0aW9uKGl0ZXIpe1xuICAgICAgLy8gVjggd29ya3Mgd2l0aCBpdGVyYXRvcnMsIGJ1dCBmYWlscyBpbiBtYW55IG90aGVyIGNhc2VzXG4gICAgICAvLyBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDU1MlxuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgICBuZXcgVHlwZWRBcnJheShpdGVyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICB9LCB0cnVlKSl7XG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbih0aGF0LCBkYXRhLCAkb2Zmc2V0LCAkbGVuZ3RoKXtcbiAgICAgICAgYW5JbnN0YW5jZSh0aGF0LCBUeXBlZEFycmF5LCBOQU1FKTtcbiAgICAgICAgdmFyIGtsYXNzO1xuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd2Vic29ja2V0cy93cy9wdWxsLzY0NVxuICAgICAgICBpZighaXNPYmplY3QoZGF0YSkpcmV0dXJuIG5ldyBCYXNlKHN0cmljdFRvTGVuZ3RoKGRhdGEsIElTTlRfVUlOVDgpKTtcbiAgICAgICAgaWYoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUil7XG4gICAgICAgICAgcmV0dXJuICRsZW5ndGggIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICA/IG5ldyBCYXNlKGRhdGEsIHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgICBpZihUWVBFRF9BUlJBWSBpbiBkYXRhKXJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XG4gICAgICB9KTtcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbihrZXkpe1xuICAgICAgICBpZighKGtleSBpbiBUeXBlZEFycmF5KSloaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gVHlwZWRBcnJheVByb3RvdHlwZTtcbiAgICAgIGlmKCFMSUJSQVJZKVR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xuICAgIH1cbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yICAgPSBUeXBlZEFycmF5UHJvdG90eXBlW0lURVJBVE9SXVxuICAgICAgLCBDT1JSRUNUX0lURVJfTkFNRSA9ICEhJG5hdGl2ZUl0ZXJhdG9yICYmICgkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSAndmFsdWVzJyB8fCAkbmF0aXZlSXRlcmF0b3IubmFtZSA9PSB1bmRlZmluZWQpXG4gICAgICAsICRpdGVyYXRvciAgICAgICAgID0gJGl0ZXJhdG9ycy52YWx1ZXM7XG4gICAgaGlkZShUeXBlZEFycmF5LCBUWVBFRF9DT05TVFJVQ1RPUiwgdHJ1ZSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIERFRl9DT05TVFJVQ1RPUiwgVHlwZWRBcnJheSk7XG5cbiAgICBpZihDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpe1xuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24oKXsgcmV0dXJuIE5BTUU7IH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAoVHlwZWRBcnJheSAhPSBCYXNlKSwgTyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xuICAgICAgQllURVNfUEVSX0VMRU1FTlQ6IEJZVEVTLFxuICAgICAgZnJvbTogJGZyb20sXG4gICAgICBvZjogJG9mXG4gICAgfSk7XG5cbiAgICBpZighKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XG5cbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRURfU0VULCBOQU1FLCB7c2V0OiAkc2V0fSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFDT1JSRUNUX0lURVJfTkFNRSwgTkFNRSwgJGl0ZXJhdG9ycyk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpLCBOQU1FLCB7dG9TdHJpbmc6IGFycmF5VG9TdHJpbmd9KTtcblxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24oKXtcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEpLnNsaWNlKCk7XG4gICAgfSksIE5BTUUsIHtzbGljZTogJHNsaWNlfSk7XG5cbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBUeXBlZEFycmF5KFsxLCAyXSkudG9Mb2NhbGVTdHJpbmcoKVxuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG4gICAgfSkpLCBOQU1FLCB7dG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ30pO1xuXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQ09SUkVDVF9JVEVSX05BTUUgPyAkbmF0aXZlSXRlcmF0b3IgOiAkaXRlcmF0b3I7XG4gICAgaWYoIUxJQlJBUlkgJiYgIUNPUlJFQ1RfSVRFUl9OQU1FKWhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XG4gIH07XG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpeyAvKiBlbXB0eSAqLyB9OyIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgREVTQ1JJUFRPUlMgICAgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpXG4gICwgTElCUkFSWSAgICAgICAgPSByZXF1aXJlKCcuL19saWJyYXJ5JylcbiAgLCAkdHlwZWQgICAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkJylcbiAgLCBoaWRlICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIHJlZGVmaW5lQWxsICAgID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJylcbiAgLCBmYWlscyAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBhbkluc3RhbmNlICAgICA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJylcbiAgLCB0b0ludGVnZXIgICAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIHRvTGVuZ3RoICAgICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBnT1BOICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIGRQICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZlxuICAsIGFycmF5RmlsbCAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpXG4gICwgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpXG4gICwgQVJSQVlfQlVGRkVSICAgPSAnQXJyYXlCdWZmZXInXG4gICwgREFUQV9WSUVXICAgICAgPSAnRGF0YVZpZXcnXG4gICwgUFJPVE9UWVBFICAgICAgPSAncHJvdG90eXBlJ1xuICAsIFdST05HX0xFTkdUSCAgID0gJ1dyb25nIGxlbmd0aCEnXG4gICwgV1JPTkdfSU5ERVggICAgPSAnV3JvbmcgaW5kZXghJ1xuICAsICRBcnJheUJ1ZmZlciAgID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl1cbiAgLCAkRGF0YVZpZXcgICAgICA9IGdsb2JhbFtEQVRBX1ZJRVddXG4gICwgTWF0aCAgICAgICAgICAgPSBnbG9iYWwuTWF0aFxuICAsIFJhbmdlRXJyb3IgICAgID0gZ2xvYmFsLlJhbmdlRXJyb3JcbiAgLCBJbmZpbml0eSAgICAgICA9IGdsb2JhbC5JbmZpbml0eVxuICAsIEJhc2VCdWZmZXIgICAgID0gJEFycmF5QnVmZmVyXG4gICwgYWJzICAgICAgICAgICAgPSBNYXRoLmFic1xuICAsIHBvdyAgICAgICAgICAgID0gTWF0aC5wb3dcbiAgLCBmbG9vciAgICAgICAgICA9IE1hdGguZmxvb3JcbiAgLCBsb2cgICAgICAgICAgICA9IE1hdGgubG9nXG4gICwgTE4yICAgICAgICAgICAgPSBNYXRoLkxOMlxuICAsIEJVRkZFUiAgICAgICAgID0gJ2J1ZmZlcidcbiAgLCBCWVRFX0xFTkdUSCAgICA9ICdieXRlTGVuZ3RoJ1xuICAsIEJZVEVfT0ZGU0VUICAgID0gJ2J5dGVPZmZzZXQnXG4gICwgJEJVRkZFUiAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVJcbiAgLCAkTEVOR1RIICAgICAgICA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIXG4gICwgJE9GRlNFVCAgICAgICAgPSBERVNDUklQVE9SUyA/ICdfbycgOiBCWVRFX09GRlNFVDtcblxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcbnZhciBwYWNrSUVFRTc1NCA9IGZ1bmN0aW9uKHZhbHVlLCBtTGVuLCBuQnl0ZXMpe1xuICB2YXIgYnVmZmVyID0gQXJyYXkobkJ5dGVzKVxuICAgICwgZUxlbiAgID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gICAgLCBlTWF4ICAgPSAoMSA8PCBlTGVuKSAtIDFcbiAgICAsIGVCaWFzICA9IGVNYXggPj4gMVxuICAgICwgcnQgICAgID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMFxuICAgICwgaSAgICAgID0gMFxuICAgICwgcyAgICAgID0gdmFsdWUgPCAwIHx8IHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDAgPyAxIDogMFxuICAgICwgZSwgbSwgYztcbiAgdmFsdWUgPSBhYnModmFsdWUpXG4gIGlmKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSl7XG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XG4gICAgZSA9IGVNYXg7XG4gIH0gZWxzZSB7XG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xuICAgIGlmKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpe1xuICAgICAgZS0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZihlICsgZUJpYXMgPj0gMSl7XG4gICAgICB2YWx1ZSArPSBydCAvIGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogcG93KDIsIDEgLSBlQmlhcyk7XG4gICAgfVxuICAgIGlmKHZhbHVlICogYyA+PSAyKXtcbiAgICAgIGUrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYoZSArIGVCaWFzID49IGVNYXgpe1xuICAgICAgbSA9IDA7XG4gICAgICBlID0gZU1heDtcbiAgICB9IGVsc2UgaWYoZSArIGVCaWFzID49IDEpe1xuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcbiAgICAgIGUgPSBlICsgZUJpYXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xuICAgICAgZSA9IDA7XG4gICAgfVxuICB9XG4gIGZvcig7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcbiAgZSA9IGUgPDwgbUxlbiB8IG07XG4gIGVMZW4gKz0gbUxlbjtcbiAgZm9yKDsgZUxlbiA+IDA7IGJ1ZmZlcltpKytdID0gZSAmIDI1NSwgZSAvPSAyNTYsIGVMZW4gLT0gOCk7XG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xudmFyIHVucGFja0lFRUU3NTQgPSBmdW5jdGlvbihidWZmZXIsIG1MZW4sIG5CeXRlcyl7XG4gIHZhciBlTGVuICA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMVxuICAgICwgZU1heCAgPSAoMSA8PCBlTGVuKSAtIDFcbiAgICAsIGVCaWFzID0gZU1heCA+PiAxXG4gICAgLCBuQml0cyA9IGVMZW4gLSA3XG4gICAgLCBpICAgICA9IG5CeXRlcyAtIDFcbiAgICAsIHMgICAgID0gYnVmZmVyW2ktLV1cbiAgICAsIGUgICAgID0gcyAmIDEyN1xuICAgICwgbTtcbiAgcyA+Pj0gNztcbiAgZm9yKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcbiAgbSA9IGUgJiAoMSA8PCAtbkJpdHMpIC0gMTtcbiAgZSA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtTGVuO1xuICBmb3IoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xuICBpZihlID09PSAwKXtcbiAgICBlID0gMSAtIGVCaWFzO1xuICB9IGVsc2UgaWYoZSA9PT0gZU1heCl7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XG4gICAgZSA9IGUgLSBlQmlhcztcbiAgfSByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIHBvdygyLCBlIC0gbUxlbik7XG59O1xuXG52YXIgdW5wYWNrSTMyID0gZnVuY3Rpb24oYnl0ZXMpe1xuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbn07XG52YXIgcGFja0k4ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gW2l0ICYgMHhmZl07XG59O1xudmFyIHBhY2tJMTYgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XG59O1xudmFyIHBhY2tJMzIgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xufTtcbnZhciBwYWNrRjY0ID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcbn07XG52YXIgcGFja0YzMiA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24oQywga2V5LCBpbnRlcm5hbCl7XG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7Z2V0OiBmdW5jdGlvbigpeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH19KTtcbn07XG5cbnZhciBnZXQgPSBmdW5jdGlvbih2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKXtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4XG4gICAgLCBpbnRJbmRleCA9IHRvSW50ZWdlcihudW1JbmRleCk7XG4gIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYlxuICAgICwgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF1cbiAgICAsIHBhY2sgID0gc3RvcmUuc2xpY2Uoc3RhcnQsIHN0YXJ0ICsgYnl0ZXMpO1xuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XG59O1xudmFyIHNldCA9IGZ1bmN0aW9uKHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKXtcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4XG4gICAgLCBpbnRJbmRleCA9IHRvSW50ZWdlcihudW1JbmRleCk7XG4gIGlmKG51bUluZGV4ICE9IGludEluZGV4IHx8IGludEluZGV4IDwgMCB8fCBpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSl0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYlxuICAgICwgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF1cbiAgICAsIHBhY2sgID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKylzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcbn07XG5cbnZhciB2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzID0gZnVuY3Rpb24odGhhdCwgbGVuZ3RoKXtcbiAgYW5JbnN0YW5jZSh0aGF0LCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG4gIHZhciBudW1iZXJMZW5ndGggPSArbGVuZ3RoXG4gICAgLCBieXRlTGVuZ3RoICAgPSB0b0xlbmd0aChudW1iZXJMZW5ndGgpO1xuICBpZihudW1iZXJMZW5ndGggIT0gYnl0ZUxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gIHJldHVybiBieXRlTGVuZ3RoO1xufTtcblxuaWYoISR0eXBlZC5BQlYpe1xuICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpe1xuICAgIHZhciBieXRlTGVuZ3RoID0gdmFsaWRhdGVBcnJheUJ1ZmZlckFyZ3VtZW50cyh0aGlzLCBsZW5ndGgpO1xuICAgIHRoaXMuX2IgICAgICAgPSBhcnJheUZpbGwuY2FsbChBcnJheShieXRlTGVuZ3RoKSwgMCk7XG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKXtcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgJEFycmF5QnVmZmVyLCBEQVRBX1ZJRVcpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF1cbiAgICAgICwgb2Zmc2V0ICAgICAgID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xuICAgIGlmKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKXRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCEnKTtcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XG4gICAgaWYob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCl0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xuICAgIHRoaXNbJExFTkdUSF0gPSBieXRlTGVuZ3RoO1xuICB9O1xuXG4gIGlmKERFU0NSSVBUT1JTKXtcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQlVGRkVSLCAnX2InKTtcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xuICB9XG5cbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBnZXRJbnQ4OiBmdW5jdGlvbiBnZXRJbnQ4KGJ5dGVPZmZzZXQpe1xuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXSA8PCAyNCA+PiAyNDtcbiAgICB9LFxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KXtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xuICAgIH0sXG4gICAgZ2V0VWludDE2OiBmdW5jdGlvbiBnZXRVaW50MTYoYnl0ZU9mZnNldCAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xuICAgICAgcmV0dXJuIGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcbiAgICB9LFxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XG4gICAgfSxcbiAgICBnZXRVaW50MzI6IGZ1bmN0aW9uIGdldFVpbnQzMihieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XG4gICAgfSxcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSwgMjMsIDQpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcbiAgICB9LFxuICAgIHNldEludDg6IGZ1bmN0aW9uIHNldEludDgoYnl0ZU9mZnNldCwgdmFsdWUpe1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9LFxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0SW50MzI6IGZ1bmN0aW9uIHNldEludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyosIGxpdHRsZUVuZGlhbiAqLyl7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XG4gICAgfSxcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qLCBsaXR0bGVFbmRpYW4gKi8pe1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiwgbGl0dGxlRW5kaWFuICovKXtcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcbiAgICB9XG4gIH0pO1xufSBlbHNlIHtcbiAgaWYoIWZhaWxzKGZ1bmN0aW9uKCl7XG4gICAgbmV3ICRBcnJheUJ1ZmZlcjsgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICAgIG5ldyAkQXJyYXlCdWZmZXIoLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICB9KSl7XG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKXtcbiAgICAgIHJldHVybiBuZXcgQmFzZUJ1ZmZlcih2YWxpZGF0ZUFycmF5QnVmZmVyQXJndW1lbnRzKHRoaXMsIGxlbmd0aCkpO1xuICAgIH07XG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcbiAgICBmb3IodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7ICl7XG4gICAgICBpZighKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcbiAgICB9O1xuICAgIGlmKCFMSUJSQVJZKUFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XG4gIH1cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKVxuICAgICwgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xuICB2aWV3LnNldEludDgoMCwgMjE0NzQ4MzY0OCk7XG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcbiAgaWYodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH0sXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKXtcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xuICAgIH1cbiAgfSwgdHJ1ZSk7XG59XG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5oaWRlKCREYXRhVmlld1tQUk9UT1RZUEVdLCAkdHlwZWQuVklFVywgdHJ1ZSk7XG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgdWlkICAgID0gcmVxdWlyZSgnLi9fdWlkJylcbiAgLCBUWVBFRCAgPSB1aWQoJ3R5cGVkX2FycmF5JylcbiAgLCBWSUVXICAgPSB1aWQoJ3ZpZXcnKVxuICAsIEFCViAgICA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpXG4gICwgQ09OU1RSID0gQUJWXG4gICwgaSA9IDAsIGwgPSA5LCBUeXBlZDtcblxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXG4gICdJbnQ4QXJyYXksVWludDhBcnJheSxVaW50OENsYW1wZWRBcnJheSxJbnQxNkFycmF5LFVpbnQxNkFycmF5LEludDMyQXJyYXksVWludDMyQXJyYXksRmxvYXQzMkFycmF5LEZsb2F0NjRBcnJheSdcbikuc3BsaXQoJywnKTtcblxud2hpbGUoaSA8IGwpe1xuICBpZihUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKXtcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcbiAgfSBlbHNlIENPTlNUUiA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQUJWOiAgICBBQlYsXG4gIENPTlNUUjogQ09OU1RSLFxuICBUWVBFRDogIFRZUEVELFxuICBWSUVXOiAgIFZJRVdcbn07IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2JlbmphbWluZ3IvUmV4RXhwLmVzY2FwZVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRyZSAgICAgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHtlc2NhcGU6IGZ1bmN0aW9uIGVzY2FwZShpdCl7IHJldHVybiAkcmUoaXQpOyB9fSk7XG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7Y29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKX0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnY29weVdpdGhpbicpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZXZlcnkgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZXZlcnksIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pe1xuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge2ZpbGw6IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKX0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKXtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMi4xLjMuOSBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4KHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZmluZCAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDYpXG4gICwgS0VZICAgICA9ICdmaW5kSW5kZXgnXG4gICwgZm9yY2VkICA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbi8qLCB0aGF0ID0gdW5kZWZpbmVkICovKXtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjggQXJyYXkucHJvdG90eXBlLmZpbmQocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmaW5kICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNSlcbiAgLCBLRVkgICAgID0gJ2ZpbmQnXG4gICwgZm9yY2VkICA9IHRydWU7XG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYoS0VZIGluIFtdKUFycmF5KDEpW0tFWV0oZnVuY3Rpb24oKXsgZm9yY2VkID0gZmFsc2U7IH0pO1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuLyosIHRoYXQgPSB1bmRlZmluZWQgKi8pe1xuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApXG4gICwgU1RSSUNUICAgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciBjdHggICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2N0eCcpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBjYWxsICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpXG4gICwgaXNBcnJheUl0ZXIgICAgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJylcbiAgLCB0b0xlbmd0aCAgICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKVxuICAsIGdldEl0ZXJGbiAgICAgID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbihpdGVyKXsgQXJyYXkuZnJvbShpdGVyKTsgfSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZS8qLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCovKXtcbiAgICB2YXIgTyAgICAgICA9IHRvT2JqZWN0KGFycmF5TGlrZSlcbiAgICAgICwgQyAgICAgICA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXlcbiAgICAgICwgYUxlbiAgICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgbWFwZm4gICA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkXG4gICAgICAsIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICAsIGluZGV4ICAgPSAwXG4gICAgICAsIGl0ZXJGbiAgPSBnZXRJdGVyRm4oTylcbiAgICAgICwgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xuICAgIGlmKG1hcHBpbmcpbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZihpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSl7XG4gICAgICBmb3IoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEM7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKyl7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKXtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkaW5kZXhPZiAgICAgID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSlcbiAgLCAkbmF0aXZlICAgICAgID0gW10uaW5kZXhPZlxuICAsIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5pbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjExIC8gMTUuNC40LjE0IEFycmF5LnByb3RvdHlwZS5pbmRleE9mKHNlYXJjaEVsZW1lbnQgWywgZnJvbUluZGV4XSlcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggPSAwICovKXtcbiAgICByZXR1cm4gTkVHQVRJVkVfWkVST1xuICAgICAgLy8gY29udmVydCAtMCB0byArMFxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxuICAgICAgOiAkaW5kZXhPZih0aGlzLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTsiLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHtpc0FycmF5OiByZXF1aXJlKCcuL19pcy1hcnJheScpfSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKVxuICAsIGFycmF5Sm9pbiA9IFtdLmpvaW47XG5cbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3Ipe1xuICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0b0lPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvSU9iamVjdCAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b0ludGVnZXIgICAgID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpXG4gICwgdG9MZW5ndGggICAgICA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpXG4gICwgJG5hdGl2ZSAgICAgICA9IFtdLmxhc3RJbmRleE9mXG4gICwgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pe1xuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcbiAgICBpZihORUdBVElWRV9aRVJPKXJldHVybiAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMDtcbiAgICB2YXIgTyAgICAgID0gdG9JT2JqZWN0KHRoaXMpXG4gICAgICAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKVxuICAgICAgLCBpbmRleCAgPSBsZW5ndGggLSAxO1xuICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiAxKWluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHRvSW50ZWdlcihhcmd1bWVudHNbMV0pKTtcbiAgICBpZihpbmRleCA8IDApaW5kZXggPSBsZW5ndGggKyBpbmRleDtcbiAgICBmb3IoO2luZGV4ID49IDA7IGluZGV4LS0paWYoaW5kZXggaW4gTylpZihPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudClyZXR1cm4gaW5kZXggfHwgMDtcbiAgICByZXR1cm4gLTE7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkbWFwICAgID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRtYXAodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIGZ1bmN0aW9uIEYoKXt9XG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcbn0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4zIEFycmF5Lm9mKCAuLi5pdGVtcylcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pe1xuICAgIHZhciBpbmRleCAgPSAwXG4gICAgICAsIGFMZW4gICA9IGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICwgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcbiAgICB3aGlsZShhTGVuID4gaW5kZXgpY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgYXJndW1lbnRzW2luZGV4KytdKTtcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5LXJlZHVjZScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4xOSAvIDE1LjQuNC4yMiBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLyl7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnJlZHVjZSwgdHJ1ZSksICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKXtcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGh0bWwgICAgICAgPSByZXF1aXJlKCcuL19odG1sJylcbiAgLCBjb2YgICAgICAgID0gcmVxdWlyZSgnLi9fY29mJylcbiAgLCB0b0luZGV4ICAgID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKVxuICAsIHRvTGVuZ3RoICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGFycmF5U2xpY2UgPSBbXS5zbGljZTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIGlmKGh0bWwpYXJyYXlTbGljZS5jYWxsKGh0bWwpO1xufSksICdBcnJheScsIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpe1xuICAgIHZhciBsZW4gICA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKVxuICAgICAgLCBrbGFzcyA9IGNvZih0aGlzKTtcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcbiAgICBpZihrbGFzcyA9PSAnQXJyYXknKXJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgdmFyIHN0YXJ0ICA9IHRvSW5kZXgoYmVnaW4sIGxlbilcbiAgICAgICwgdXBUbyAgID0gdG9JbmRleChlbmQsIGxlbilcbiAgICAgICwgc2l6ZSAgID0gdG9MZW5ndGgodXBUbyAtIHN0YXJ0KVxuICAgICAgLCBjbG9uZWQgPSBBcnJheShzaXplKVxuICAgICAgLCBpICAgICAgPSAwO1xuICAgIGZvcig7IGkgPCBzaXplOyBpKyspY2xvbmVkW2ldID0ga2xhc3MgPT0gJ1N0cmluZydcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRzb21lICAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMjMgLyAxNS40LjQuMTcgQXJyYXkucHJvdG90eXBlLnNvbWUoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLyl7XG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIHRvT2JqZWN0ICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgZmFpbHMgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsICRzb3J0ICAgICA9IFtdLnNvcnRcbiAgLCB0ZXN0ICAgICAgPSBbMSwgMiwgM107XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIElFOC1cbiAgdGVzdC5zb3J0KHVuZGVmaW5lZCk7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24oKXtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKXtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSlcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xuICB9XG59KTsiLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpOyIsIi8vIDIwLjMuMy4xIC8gMTUuOS40LjQgRGF0ZS5ub3coKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdEYXRlJywge25vdzogZnVuY3Rpb24oKXsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9fSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBmYWlscyAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xuXG52YXIgbHogPSBmdW5jdGlvbihudW0pe1xuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcbn07XG5cbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24oKXtcbiAgcmV0dXJuIG5ldyBEYXRlKC01ZTEzIC0gMSkudG9JU09TdHJpbmcoKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcbn0pIHx8ICFmYWlscyhmdW5jdGlvbigpe1xuICBuZXcgRGF0ZShOYU4pLnRvSVNPU3RyaW5nKCk7XG59KSksICdEYXRlJywge1xuICB0b0lTT1N0cmluZzogZnVuY3Rpb24gdG9JU09TdHJpbmcoKXtcbiAgICBpZighaXNGaW5pdGUoZ2V0VGltZS5jYWxsKHRoaXMpKSl0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgICB2YXIgZCA9IHRoaXNcbiAgICAgICwgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKVxuICAgICAgLCBtID0gZC5nZXRVVENNaWxsaXNlY29uZHMoKVxuICAgICAgLCBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xuICAgIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcbiAgICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcbiAgICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xuICAgICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbCB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7dG9JU09TdHJpbmc6IGZ1bmN0aW9uKCl7IHJldHVybiAxOyB9fSkgIT09IDE7XG59KSwgJ0RhdGUnLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSl7XG4gICAgdmFyIE8gID0gdG9PYmplY3QodGhpcylcbiAgICAgICwgcHYgPSB0b1ByaW1pdGl2ZShPKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTsiLCJ2YXIgVE9fUFJJTUlUSVZFID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvUHJpbWl0aXZlJylcbiAgLCBwcm90byAgICAgICAgPSBEYXRlLnByb3RvdHlwZTtcblxuaWYoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKXJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTsiLCJ2YXIgRGF0ZVByb3RvICAgID0gRGF0ZS5wcm90b3R5cGVcbiAgLCBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJ1xuICAsIFRPX1NUUklORyAgICA9ICd0b1N0cmluZydcbiAgLCAkdG9TdHJpbmcgICAgPSBEYXRlUHJvdG9bVE9fU1RSSU5HXVxuICAsIGdldFRpbWUgICAgICA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSl7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyAkdG9TdHJpbmcuY2FsbCh0aGlzKSA6IElOVkFMSURfREFURTtcbiAgfSk7XG59IiwiLy8gMTkuMi4zLjIgLyAxNS4zLjQuNSBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCh0aGlzQXJnLCBhcmdzLi4uKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAsICdGdW5jdGlvbicsIHtiaW5kOiByZXF1aXJlKCcuL19iaW5kJyl9KTsiLCIndXNlIHN0cmljdCc7XG52YXIgaXNPYmplY3QgICAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgSEFTX0lOU1RBTkNFICAgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKVxuICAsIEZ1bmN0aW9uUHJvdG8gID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuLy8gMTkuMi4zLjYgRnVuY3Rpb24ucHJvdG90eXBlW0BAaGFzSW5zdGFuY2VdKFYpXG5pZighKEhBU19JTlNUQU5DRSBpbiBGdW5jdGlvblByb3RvKSlyZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwge3ZhbHVlOiBmdW5jdGlvbihPKXtcbiAgaWYodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpcmV0dXJuIGZhbHNlO1xuICBpZighaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKXJldHVybiBPIGluc3RhbmNlb2YgdGhpcztcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcbiAgd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKWlmKHRoaXMucHJvdG90eXBlID09PSBPKXJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59fSk7IiwidmFyIGRQICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mXG4gICwgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIGhhcyAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsIEZQcm90byAgICAgPSBGdW5jdGlvbi5wcm90b3R5cGVcbiAgLCBuYW1lUkUgICAgID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvXG4gICwgTkFNRSAgICAgICA9ICduYW1lJztcblxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKXtcbiAgICB0cnkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgICAgICwgbmFtZSA9ICgnJyArIHRoYXQpLm1hdGNoKG5hbWVSRSlbMV07XG4gICAgICBoYXModGhhdCwgTkFNRSkgfHwgIWlzRXh0ZW5zaWJsZSh0aGF0KSB8fCBkUCh0aGF0LCBOQU1FLCBjcmVhdGVEZXNjKDUsIG5hbWUpKTtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ01hcCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KXtcbiAgICB2YXIgZW50cnkgPSBzdHJvbmcuZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcbiAgfSxcbiAgLy8gMjMuMS4zLjkgTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSl7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpOyIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBsb2cxcCAgID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpXG4gICwgc3FydCAgICA9IE1hdGguc3FydFxuICAsICRhY29zaCAgPSBNYXRoLmFjb3NoO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgJiYgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpID09IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTiBcbiAgJiYgJGFjb3NoKEluZmluaXR5KSA9PSBJbmZpbml0eVxuKSwgJ01hdGgnLCB7XG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KXtcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IE1hdGgubG9nKHgpICsgTWF0aC5MTjJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRhc2luaCAgPSBNYXRoLmFzaW5oO1xuXG5mdW5jdGlvbiBhc2luaCh4KXtcbiAgcmV0dXJuICFpc0Zpbml0ZSh4ID0gK3gpIHx8IHggPT0gMCA/IHggOiB4IDwgMCA/IC1hc2luaCgteCkgOiBNYXRoLmxvZyh4ICsgTWF0aC5zcXJ0KHggKiB4ICsgMSkpO1xufVxuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXNpbmgoMCkgLT4gLTAgXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7YXNpbmg6IGFzaW5ofSk7IiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRhdGFuaCAgPSBNYXRoLmF0YW5oO1xuXG4vLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYXRhbmgoLTApIC0+IDAgXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xuICBhdGFuaDogZnVuY3Rpb24gYXRhbmgoeCl7XG4gICAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogTWF0aC5sb2coKDEgKyB4KSAvICgxIC0geCkpIC8gMjtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgc2lnbiAgICA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCl7XG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xMSBNYXRoLmNsejMyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KXtcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBleHAgICAgID0gTWF0aC5leHA7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KXtcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRleHBtMSAgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCRleHBtMSAhPSBNYXRoLmV4cG0xKSwgJ01hdGgnLCB7ZXhwbTE6ICRleHBtMX0pOyIsIi8vIDIwLjIuMi4xNiBNYXRoLmZyb3VuZCh4KVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgc2lnbiAgICAgID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJylcbiAgLCBwb3cgICAgICAgPSBNYXRoLnBvd1xuICAsIEVQU0lMT04gICA9IHBvdygyLCAtNTIpXG4gICwgRVBTSUxPTjMyID0gcG93KDIsIC0yMylcbiAgLCBNQVgzMiAgICAgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKVxuICAsIE1JTjMyICAgICA9IHBvdygyLCAtMTI2KTtcblxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uKG4pe1xuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XG59O1xuXG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgZnJvdW5kOiBmdW5jdGlvbiBmcm91bmQoeCl7XG4gICAgdmFyICRhYnMgID0gTWF0aC5hYnMoeClcbiAgICAgICwgJHNpZ24gPSBzaWduKHgpXG4gICAgICAsIGEsIHJlc3VsdDtcbiAgICBpZigkYWJzIDwgTUlOMzIpcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcbiAgICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gICAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XG4gICAgaWYocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdClyZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcbiAgICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4xNyBNYXRoLmh5cG90KFt2YWx1ZTFbLCB2YWx1ZTJbLCDigKYgXV1dKVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFicyAgICAgPSBNYXRoLmFicztcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgdmFyIHN1bSAgPSAwXG4gICAgICAsIGkgICAgPSAwXG4gICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIGxhcmcgPSAwXG4gICAgICAsIGFyZywgZGl2O1xuICAgIHdoaWxlKGkgPCBhTGVuKXtcbiAgICAgIGFyZyA9IGFicyhhcmd1bWVudHNbaSsrXSk7XG4gICAgICBpZihsYXJnIDwgYXJnKXtcbiAgICAgICAgZGl2ICA9IGxhcmcgLyBhcmc7XG4gICAgICAgIHN1bSAgPSBzdW0gKiBkaXYgKiBkaXYgKyAxO1xuICAgICAgICBsYXJnID0gYXJnO1xuICAgICAgfSBlbHNlIGlmKGFyZyA+IDApe1xuICAgICAgICBkaXYgID0gYXJnIC8gbGFyZztcbiAgICAgICAgc3VtICs9IGRpdiAqIGRpdjtcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xuICAgIH1cbiAgICByZXR1cm4gbGFyZyA9PT0gSW5maW5pdHkgPyBJbmZpbml0eSA6IGxhcmcgKiBNYXRoLnNxcnQoc3VtKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRpbXVsICAgPSBNYXRoLmltdWw7XG5cbi8vIHNvbWUgV2ViS2l0IHZlcnNpb25zIGZhaWxzIHdpdGggYmlnIG51bWJlcnMsIHNvbWUgaGFzIHdyb25nIGFyaXR5XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgcmV0dXJuICRpbXVsKDB4ZmZmZmZmZmYsIDUpICE9IC01IHx8ICRpbXVsLmxlbmd0aCAhPSAyO1xufSksICdNYXRoJywge1xuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpe1xuICAgIHZhciBVSU5UMTYgPSAweGZmZmZcbiAgICAgICwgeG4gPSAreFxuICAgICAgLCB5biA9ICt5XG4gICAgICAsIHhsID0gVUlOVDE2ICYgeG5cbiAgICAgICwgeWwgPSBVSU5UMTYgJiB5bjtcbiAgICByZXR1cm4gMCB8IHhsICogeWwgKyAoKFVJTlQxNiAmIHhuID4+PiAxNikgKiB5bCArIHhsICogKFVJTlQxNiAmIHluID4+PiAxNikgPDwgMTYgPj4+IDApO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCl7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjEwO1xuICB9XG59KTsiLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge2xvZzFwOiByZXF1aXJlKCcuL19tYXRoLWxvZzFwJyl9KTsiLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCl7XG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKX0pOyIsIi8vIDIwLjIuMi4zMCBNYXRoLnNpbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBleHBtMSAgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpXG4gICwgZXhwICAgICA9IE1hdGguZXhwO1xuXG4vLyBWOCBuZWFyIENocm9taXVtIDM4IGhhcyBhIHByb2JsZW0gd2l0aCB2ZXJ5IHNtYWxsIG51bWJlcnNcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gIU1hdGguc2luaCgtMmUtMTcpICE9IC0yZS0xNztcbn0pLCAnTWF0aCcsIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KXtcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcbiAgICAgID8gKGV4cG0xKHgpIC0gZXhwbTEoLXgpKSAvIDJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XG4gIH1cbn0pOyIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBleHBtMSAgID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpXG4gICwgZXhwICAgICA9IE1hdGguZXhwO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHRhbmg6IGZ1bmN0aW9uIHRhbmgoeCl7XG4gICAgdmFyIGEgPSBleHBtMSh4ID0gK3gpXG4gICAgICAsIGIgPSBleHBtMSgteCk7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcbiAgfVxufSk7IiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcbiAgdHJ1bmM6IGZ1bmN0aW9uIHRydW5jKGl0KXtcbiAgICByZXR1cm4gKGl0ID4gMCA/IE1hdGguZmxvb3IgOiBNYXRoLmNlaWwpKGl0KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCBoYXMgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgY29mICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19jb2YnKVxuICAsIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpXG4gICwgdG9QcmltaXRpdmUgICAgICAgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKVxuICAsIGZhaWxzICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZmFpbHMnKVxuICAsIGdPUE4gICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mXG4gICwgZ09QRCAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmZcbiAgLCBkUCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCAkdHJpbSAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbVxuICAsIE5VTUJFUiAgICAgICAgICAgID0gJ051bWJlcidcbiAgLCAkTnVtYmVyICAgICAgICAgICA9IGdsb2JhbFtOVU1CRVJdXG4gICwgQmFzZSAgICAgICAgICAgICAgPSAkTnVtYmVyXG4gICwgcHJvdG8gICAgICAgICAgICAgPSAkTnVtYmVyLnByb3RvdHlwZVxuICAvLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcbiAgLCBCUk9LRU5fQ09GICAgICAgICA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVJcbiAgLCBUUklNICAgICAgICAgICAgICA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uKGFyZ3VtZW50KXtcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcbiAgaWYodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpe1xuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApXG4gICAgICAsIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcbiAgICBpZihmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KXtcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcbiAgICAgIGlmKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKXJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYoZmlyc3QgPT09IDQ4KXtcbiAgICAgIHN3aXRjaChpdC5jaGFyQ29kZUF0KDEpKXtcbiAgICAgICAgY2FzZSA2NiA6IGNhc2UgOTggIDogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5IDogY2FzZSAxMTEgOiByYWRpeCA9IDg7IG1heENvZGUgPSA1NTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wb1swLTddKyQvaVxuICAgICAgICBkZWZhdWx0IDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGZvcih2YXIgZGlnaXRzID0gaXQuc2xpY2UoMiksIGkgPSAwLCBsID0gZGlnaXRzLmxlbmd0aCwgY29kZTsgaSA8IGw7IGkrKyl7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSlyZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG5pZighJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpe1xuICAkTnVtYmVyID0gZnVuY3Rpb24gTnVtYmVyKHZhbHVlKXtcbiAgICB2YXIgaXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiB2YWx1ZVxuICAgICAgLCB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbigpeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcbiAgfTtcbiAgZm9yKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKXtcbiAgICBpZihoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKXtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn0iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7RVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKX0pOyIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCl7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xuICB9XG59KTsiLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge2lzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpfSk7IiwiLy8gMjAuMS4yLjQgTnVtYmVyLmlzTmFOKG51bWJlcilcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKXtcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7IiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpXG4gICwgYWJzICAgICAgID0gTWF0aC5hYnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcil7XG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XG4gIH1cbn0pOyIsIi8vIDIwLjEuMi42IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmfSk7IiwiLy8gMjAuMS4yLjEwIE51bWJlci5NSU5fU0FGRV9JTlRFR0VSXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZn0pOyIsInZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgJ051bWJlcicsIHtwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdH0pOyIsInZhciAkZXhwb3J0ICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xuLy8gMjAuMS4yLjEzIE51bWJlci5wYXJzZUludChzdHJpbmcsIHJhZGl4KVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7cGFyc2VJbnQ6ICRwYXJzZUludH0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvSW50ZWdlciAgICA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKVxuICAsIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJylcbiAgLCByZXBlYXQgICAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0JylcbiAgLCAkdG9GaXhlZCAgICAgPSAxLi50b0ZpeGVkXG4gICwgZmxvb3IgICAgICAgID0gTWF0aC5mbG9vclxuICAsIGRhdGEgICAgICAgICA9IFswLCAwLCAwLCAwLCAwLCAwXVxuICAsIEVSUk9SICAgICAgICA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJ1xuICAsIFpFUk8gICAgICAgICA9ICcwJztcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24obiwgYyl7XG4gIHZhciBpICA9IC0xXG4gICAgLCBjMiA9IGM7XG4gIHdoaWxlKCsraSA8IDYpe1xuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xuICAgIGRhdGFbaV0gPSBjMiAlIDFlNztcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcbiAgfVxufTtcbnZhciBkaXZpZGUgPSBmdW5jdGlvbihuKXtcbiAgdmFyIGkgPSA2XG4gICAgLCBjID0gMDtcbiAgd2hpbGUoLS1pID49IDApe1xuICAgIGMgKz0gZGF0YVtpXTtcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xuICAgIGMgPSAoYyAlIG4pICogMWU3O1xuICB9XG59O1xudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24oKXtcbiAgdmFyIGkgPSA2XG4gICAgLCBzID0gJyc7XG4gIHdoaWxlKC0taSA+PSAwKXtcbiAgICBpZihzICE9PSAnJyB8fCBpID09PSAwIHx8IGRhdGFbaV0gIT09IDApe1xuICAgICAgdmFyIHQgPSBTdHJpbmcoZGF0YVtpXSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG52YXIgcG93ID0gZnVuY3Rpb24oeCwgbiwgYWNjKXtcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xufTtcbnZhciBsb2cgPSBmdW5jdGlvbih4KXtcbiAgdmFyIG4gID0gMFxuICAgICwgeDIgPSB4O1xuICB3aGlsZSh4MiA+PSA0MDk2KXtcbiAgICBuICs9IDEyO1xuICAgIHgyIC89IDQwOTY7XG4gIH1cbiAgd2hpbGUoeDIgPj0gMil7XG4gICAgbiAgKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXG4gIDAuMDAwMDgudG9GaXhlZCgzKSAhPT0gJzAuMDAwJyB8fFxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxuICAxMDAwMDAwMDAwMDAwMDAwMTI4Li50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcbikgfHwgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24oKXtcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cbiAgJHRvRml4ZWQuY2FsbCh7fSk7XG59KSksICdOdW1iZXInLCB7XG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpe1xuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKVxuICAgICAgLCBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKVxuICAgICAgLCBzID0gJydcbiAgICAgICwgbSA9IFpFUk9cbiAgICAgICwgZSwgeiwgaiwgaztcbiAgICBpZihmIDwgMCB8fCBmID4gMjApdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XG4gICAgaWYoeCAhPSB4KXJldHVybiAnTmFOJztcbiAgICBpZih4IDw9IC0xZTIxIHx8IHggPj0gMWUyMSlyZXR1cm4gU3RyaW5nKHgpO1xuICAgIGlmKHggPCAwKXtcbiAgICAgIHMgPSAnLSc7XG4gICAgICB4ID0gLXg7XG4gICAgfVxuICAgIGlmKHggPiAxZS0yMSl7XG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xuICAgICAgeiAqPSAweDEwMDAwMDAwMDAwMDAwO1xuICAgICAgZSA9IDUyIC0gZTtcbiAgICAgIGlmKGUgPiAwKXtcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XG4gICAgICAgIGogPSBmO1xuICAgICAgICB3aGlsZShqID49IDcpe1xuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlKGogPj0gMjMpe1xuICAgICAgICAgIGRpdmlkZSgxIDw8IDIzKTtcbiAgICAgICAgICBqIC09IDIzO1xuICAgICAgICB9XG4gICAgICAgIGRpdmlkZSgxIDw8IGopO1xuICAgICAgICBtdWx0aXBseSgxLCAxKTtcbiAgICAgICAgZGl2aWRlKDIpO1xuICAgICAgICBtID0gbnVtVG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xuICAgICAgICBtdWx0aXBseSgxIDw8IC1lLCAwKTtcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYoZiA+IDApe1xuICAgICAgayA9IG0ubGVuZ3RoO1xuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHMgKyBtO1xuICAgIH0gcmV0dXJuIG07XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRmYWlscyAgICAgICA9IHJlcXVpcmUoJy4vX2ZhaWxzJylcbiAgLCBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpXG4gICwgJHRvUHJlY2lzaW9uID0gMS4udG9QcmVjaXNpb247XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKCRmYWlscyhmdW5jdGlvbigpe1xuICAvLyBJRTctXG4gIHJldHVybiAkdG9QcmVjaXNpb24uY2FsbCgxLCB1bmRlZmluZWQpICE9PSAnMSc7XG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uKCl7XG4gIC8vIFY4IH4gQW5kcm9pZCA0LjMtXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcbn0pKSwgJ051bWJlcicsIHtcbiAgdG9QcmVjaXNpb246IGZ1bmN0aW9uIHRvUHJlY2lzaW9uKHByZWNpc2lvbil7XG4gICAgdmFyIHRoYXQgPSBhTnVtYmVyVmFsdWUodGhpcywgJ051bWJlciN0b1ByZWNpc2lvbjogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pOyBcbiAgfVxufSk7IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbi8vIDE5LjEuMi4zIC8gMTUuMi4zLjcgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7ZGVmaW5lUHJvcGVydGllczogcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpfSk7IiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBtZXRhICAgICA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbigkZnJlZXplKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCl7XG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5TmFtZXMnLCBmdW5jdGlvbigpe1xuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcbn0pOyIsIi8vIDE5LjEuMi4xMSBPYmplY3QuaXNFeHRlbnNpYmxlKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0V4dGVuc2libGUnLCBmdW5jdGlvbigkaXNFeHRlbnNpYmxlKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCl7XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMi4xMyBPYmplY3QuaXNTZWFsZWQoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzU2VhbGVkJywgZnVuY3Rpb24oJGlzU2VhbGVkKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KXtcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcbiAgfTtcbn0pOyIsIi8vIDE5LjEuMy4xMCBPYmplY3QuaXModmFsdWUxLCB2YWx1ZTIpXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7aXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKX0pOyIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgbWV0YSAgICAgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbigkcHJldmVudEV4dGVuc2lvbnMpe1xuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpe1xuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xuICB9O1xufSk7IiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIG1ldGEgICAgID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbigkc2VhbCl7XG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KXtcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XG4gIH07XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpXG4gICwgdGVzdCAgICA9IHt9O1xudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZih0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKXtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpe1xuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcbiAgfSwgdHJ1ZSk7XG59IiwidmFyICRleHBvcnQgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX3BhcnNlLWZsb2F0Jyk7XG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwge3BhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0fSk7IiwidmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHtwYXJzZUludDogJHBhcnNlSW50fSk7IiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbk9iamVjdCAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHJBcHBseSAgICA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseVxuICAsIGZBcHBseSAgICA9IEZ1bmN0aW9uLmFwcGx5O1xuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7XG4gIHJBcHBseShmdW5jdGlvbigpe30pO1xufSksICdSZWZsZWN0Jywge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3Qpe1xuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldClcbiAgICAgICwgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xuICAgIHJldHVybiByQXBwbHkgPyByQXBwbHkoVCwgdGhpc0FyZ3VtZW50LCBMKSA6IGZBcHBseS5jYWxsKFQsIHRoaXNBcmd1bWVudCwgTCk7XG4gIH1cbn0pOyIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcbnZhciAkZXhwb3J0ICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjcmVhdGUgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpXG4gICwgYUZ1bmN0aW9uICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsIGFuT2JqZWN0ICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGlzT2JqZWN0ICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIGZhaWxzICAgICAgPSByZXF1aXJlKCcuL19mYWlscycpXG4gICwgYmluZCAgICAgICA9IHJlcXVpcmUoJy4vX2JpbmQnKVxuICAsIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xuXG4vLyBNUyBFZGdlIHN1cHBvcnRzIG9ubHkgMiBhcmd1bWVudHMgYW5kIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uKCl7XG4gIGZ1bmN0aW9uIEYoKXt9XG4gIHJldHVybiAhKHJDb25zdHJ1Y3QoZnVuY3Rpb24oKXt9LCBbXSwgRikgaW5zdGFuY2VvZiBGKTtcbn0pO1xudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uKCl7XG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24oKXt9KTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyosIG5ld1RhcmdldCovKXtcbiAgICBhRnVuY3Rpb24oVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcbiAgICBpZihBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xuICAgIGlmKFRhcmdldCA9PSBuZXdUYXJnZXQpe1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaChhcmdzLmxlbmd0aCl7XG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQ7XG4gICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSk7XG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgIGNhc2UgNDogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgICB9XG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxuICAgICAgdmFyICRhcmdzID0gW251bGxdO1xuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKTtcbiAgICB9XG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXG4gICAgdmFyIHByb3RvICAgID0gbmV3VGFyZ2V0LnByb3RvdHlwZVxuICAgICAgLCBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdC5wcm90b3R5cGUpXG4gICAgICAsIHJlc3VsdCAgID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcbiAgICByZXR1cm4gaXNPYmplY3QocmVzdWx0KSA/IHJlc3VsdCA6IGluc3RhbmNlO1xuICB9XG59KTsiLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxudmFyIGRQICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJylcbiAgLCAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG5cbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHt2YWx1ZTogMX0pLCAxLCB7dmFsdWU6IDJ9KTtcbn0pLCAnUmVmbGVjdCcsIHtcbiAgZGVmaW5lUHJvcGVydHk6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpe1xuICAgIGFuT2JqZWN0KHRhcmdldCk7XG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7IiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZ09QRCAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmZcbiAgLCBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24oaXRlcmF0ZWQpe1xuICB0aGlzLl90ID0gYW5PYmplY3QoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXSAgICAgICAvLyBrZXlzXG4gICAgLCBrZXk7XG4gIGZvcihrZXkgaW4gaXRlcmF0ZWQpa2V5cy5wdXNoKGtleSk7XG59O1xucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbigpe1xuICB2YXIgdGhhdCA9IHRoaXNcbiAgICAsIGtleXMgPSB0aGF0Ll9rXG4gICAgLCBrZXk7XG4gIGRvIHtcbiAgICBpZih0aGF0Ll9pID49IGtleXMubGVuZ3RoKXJldHVybiB7dmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZX07XG4gIH0gd2hpbGUoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XG4gIHJldHVybiB7dmFsdWU6IGtleSwgZG9uZTogZmFsc2V9O1xufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KXtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xuICB9XG59KTsiLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciBnT1BEICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KXtcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7IiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCl7XG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTsiLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXG52YXIgZ09QRCAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBoYXMgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hhcycpXG4gICwgJGV4cG9ydCAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGlzT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0JylcbiAgLCBhbk9iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBnZXQodGFyZ2V0LCBwcm9wZXJ0eUtleS8qLCByZWNlaXZlciovKXtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB0YXJnZXQgOiBhcmd1bWVudHNbMl1cbiAgICAsIGRlc2MsIHByb3RvO1xuICBpZihhbk9iamVjdCh0YXJnZXQpID09PSByZWNlaXZlcilyZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgaWYoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSlyZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXG4gICAgPyBkZXNjLnZhbHVlXG4gICAgOiBkZXNjLmdldCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXG4gICAgICA6IHVuZGVmaW5lZDtcbiAgaWYoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSlyZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xufVxuXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7Z2V0OiBnZXR9KTsiLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSl7XG4gICAgcmV0dXJuIHByb3BlcnR5S2V5IGluIHRhcmdldDtcbiAgfVxufSk7IiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXG52YXIgJGV4cG9ydCAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYW5PYmplY3QgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KXtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcbiAgfVxufSk7IiwiLy8gMjYuMS4xMSBSZWZsZWN0Lm93bktleXModGFyZ2V0KVxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge293bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJyl9KTsiLCIvLyAyNi4xLjEyIFJlZmxlY3QucHJldmVudEV4dGVuc2lvbnModGFyZ2V0KVxudmFyICRleHBvcnQgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgYW5PYmplY3QgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCl7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgaWYoJHByZXZlbnRFeHRlbnNpb25zKSRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pOyIsIi8vIDI2LjEuMTQgUmVmbGVjdC5zZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKVxudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xuXG5pZihzZXRQcm90bykkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XG4gIHNldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZih0YXJnZXQsIHByb3RvKXtcbiAgICBzZXRQcm90by5jaGVjayh0YXJnZXQsIHByb3RvKTtcbiAgICB0cnkge1xuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pOyIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXG52YXIgZFAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKVxuICAsIGdPUEQgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKVxuICAsIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgaGFzICAgICAgICAgICAgPSByZXF1aXJlKCcuL19oYXMnKVxuICAsICRleHBvcnQgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBjcmVhdGVEZXNjICAgICA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKVxuICAsIGFuT2JqZWN0ICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBpc09iamVjdCAgICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuXG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgVi8qLCByZWNlaXZlciovKXtcbiAgdmFyIHJlY2VpdmVyID0gYXJndW1lbnRzLmxlbmd0aCA8IDQgPyB0YXJnZXQgOiBhcmd1bWVudHNbM11cbiAgICAsIG93bkRlc2MgID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KVxuICAgICwgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcbiAgaWYoIW93bkRlc2Mpe1xuICAgIGlmKGlzT2JqZWN0KHByb3RvID0gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSkpe1xuICAgICAgcmV0dXJuIHNldChwcm90bywgcHJvcGVydHlLZXksIFYsIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XG4gIH1cbiAgaWYoaGFzKG93bkRlc2MsICd2YWx1ZScpKXtcbiAgICBpZihvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKXJldHVybiBmYWxzZTtcbiAgICBleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSB8fCBjcmVhdGVEZXNjKDApO1xuICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIG93bkRlc2Muc2V0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IChvd25EZXNjLnNldC5jYWxsKHJlY2VpdmVyLCBWKSwgdHJ1ZSk7XG59XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtzZXQ6IHNldH0pOyIsInZhciBnbG9iYWwgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJylcbiAgLCBkUCAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmZcbiAgLCBnT1BOICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZlxuICAsIGlzUmVnRXhwICAgICAgICAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgLCAkZmxhZ3MgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJylcbiAgLCAkUmVnRXhwICAgICAgICAgICA9IGdsb2JhbC5SZWdFeHBcbiAgLCBCYXNlICAgICAgICAgICAgICA9ICRSZWdFeHBcbiAgLCBwcm90byAgICAgICAgICAgICA9ICRSZWdFeHAucHJvdG90eXBlXG4gICwgcmUxICAgICAgICAgICAgICAgPSAvYS9nXG4gICwgcmUyICAgICAgICAgICAgICAgPSAvYS9nXG4gIC8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxuICAsIENPUlJFQ1RfTkVXICAgICAgID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG5pZihyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICghQ09SUkVDVF9ORVcgfHwgcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XG4gIC8vIFJlZ0V4cCBjb25zdHJ1Y3RvciBjYW4gYWx0ZXIgZmxhZ3MgYW5kIElzUmVnRXhwIHdvcmtzIGNvcnJlY3Qgd2l0aCBAQG1hdGNoXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xufSkpKXtcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKXtcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwXG4gICAgICAsIHBpUkUgPSBpc1JlZ0V4cChwKVxuICAgICAgLCBmaVUgID0gZiA9PT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xuICAgICAgICA/IG5ldyBCYXNlKHBpUkUgJiYgIWZpVSA/IHAuc291cmNlIDogcCwgZilcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XG4gIH07XG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uKGtleSl7XG4gICAga2V5IGluICRSZWdFeHAgfHwgZFAoJFJlZ0V4cCwga2V5LCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCl7IHJldHVybiBCYXNlW2tleV07IH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uKGl0KXsgQmFzZVtrZXldID0gaXQ7IH1cbiAgICB9KTtcbiAgfTtcbiAgZm9yKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTsgKXByb3h5KGtleXNbaSsrXSk7XG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcbiAgJFJlZ0V4cC5wcm90b3R5cGUgPSBwcm90bztcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcbn1cblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7IiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxuaWYocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJylyZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pOyIsIi8vIEBAbWF0Y2ggbG9naWNcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbihkZWZpbmVkLCBNQVRDSCwgJG1hdGNoKXtcbiAgLy8gMjEuMS4zLjExIFN0cmluZy5wcm90b3R5cGUubWF0Y2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIG1hdGNoKHJlZ2V4cCl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJG1hdGNoXTtcbn0pOyIsIi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgUkVQTEFDRSwgJHJlcGxhY2Upe1xuICAvLyAyMS4xLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpXG4gIHJldHVybiBbZnVuY3Rpb24gcmVwbGFjZShzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKXtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIE8gID0gZGVmaW5lZCh0aGlzKVxuICAgICAgLCBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcbiAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICB9LCAkcmVwbGFjZV07XG59KTsiLCIvLyBAQHNlYXJjaCBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbihkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gpe1xuICAvLyAyMS4xLjMuMTUgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2gocmVnZXhwKVxuICByZXR1cm4gW2Z1bmN0aW9uIHNlYXJjaChyZWdleHApe1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgTyAgPSBkZWZpbmVkKHRoaXMpXG4gICAgICAsIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xuICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcbiAgfSwgJHNlYXJjaF07XG59KTsiLCIvLyBAQHNwbGl0IGxvZ2ljXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NwbGl0JywgMiwgZnVuY3Rpb24oZGVmaW5lZCwgU1BMSVQsICRzcGxpdCl7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGlzUmVnRXhwICAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKVxuICAgICwgX3NwbGl0ICAgICA9ICRzcGxpdFxuICAgICwgJHB1c2ggICAgICA9IFtdLnB1c2hcbiAgICAsICRTUExJVCAgICAgPSAnc3BsaXQnXG4gICAgLCBMRU5HVEggICAgID0gJ2xlbmd0aCdcbiAgICAsIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcbiAgaWYoXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcbiAgICAndGVzdCdbJFNQTElUXSgvKD86KS8sIC0xKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcbiAgICAnLidbJFNQTElUXSgvKCkoKS8pW0xFTkdUSF0gPiAxIHx8XG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXG4gICl7XG4gICAgdmFyIE5QQ0cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHVuZGVmaW5lZDsgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcbiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXtcbiAgICAgIHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG4gICAgICBpZihzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMClyZXR1cm4gW107XG4gICAgICAvLyBJZiBgc2VwYXJhdG9yYCBpcyBub3QgYSByZWdleCwgdXNlIG5hdGl2ZSBzcGxpdFxuICAgICAgaWYoIWlzUmVnRXhwKHNlcGFyYXRvcikpcmV0dXJuIF9zcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICB2YXIgb3V0cHV0ID0gW107XG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xuICAgICAgdmFyIHNwbGl0TGltaXQgPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gNDI5NDk2NzI5NSA6IGxpbWl0ID4+PiAwO1xuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICB2YXIgc2VwYXJhdG9yMiwgbWF0Y2gsIGxhc3RJbmRleCwgbGFzdExlbmd0aCwgaTtcbiAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgaWYoIU5QQ0cpc2VwYXJhdG9yMiA9IG5ldyBSZWdFeHAoJ14nICsgc2VwYXJhdG9yQ29weS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgIHdoaWxlKG1hdGNoID0gc2VwYXJhdG9yQ29weS5leGVjKHN0cmluZykpe1xuICAgICAgICAvLyBgc2VwYXJhdG9yQ29weS5sYXN0SW5kZXhgIGlzIG5vdCByZWxpYWJsZSBjcm9zcy1icm93c2VyXG4gICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF1bTEVOR1RIXTtcbiAgICAgICAgaWYobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCl7XG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XG4gICAgICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGAgZm9yIE5QQ0dcbiAgICAgICAgICBpZighTlBDRyAmJiBtYXRjaFtMRU5HVEhdID4gMSltYXRjaFswXS5yZXBsYWNlKHNlcGFyYXRvcjIsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBmb3IoaSA9IDE7IGkgPCBhcmd1bWVudHNbTEVOR1RIXSAtIDI7IGkrKylpZihhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCltYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZihtYXRjaFtMRU5HVEhdID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZ1tMRU5HVEhdKSRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xuICAgICAgICAgIGxhc3RMZW5ndGggPSBtYXRjaFswXVtMRU5HVEhdO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdClicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZihzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleClzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdKys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgIH1cbiAgICAgIGlmKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKXtcbiAgICAgICAgaWYobGFzdExlbmd0aCB8fCAhc2VwYXJhdG9yQ29weS50ZXN0KCcnKSlvdXRwdXQucHVzaCgnJyk7XG4gICAgICB9IGVsc2Ugb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XG4gICAgfTtcbiAgLy8gQ2hha3JhLCBWOFxuICB9IGVsc2UgaWYoJzAnWyRTUExJVF0odW5kZWZpbmVkLCAwKVtMRU5HVEhdKXtcbiAgICAkc3BsaXQgPSBmdW5jdGlvbihzZXBhcmF0b3IsIGxpbWl0KXtcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfTtcbiAgfVxuICAvLyAyMS4xLjMuMTcgU3RyaW5nLnByb3RvdHlwZS5zcGxpdChzZXBhcmF0b3IsIGxpbWl0KVxuICByZXR1cm4gW2Z1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpe1xuICAgIHZhciBPICA9IGRlZmluZWQodGhpcylcbiAgICAgICwgZm4gPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcbiAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdCkgOiAkc3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xuICB9LCAkc3BsaXRdO1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XG52YXIgYW5PYmplY3QgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsICRmbGFncyAgICAgID0gcmVxdWlyZSgnLi9fZmxhZ3MnKVxuICAsIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKVxuICAsIFRPX1NUUklORyAgID0gJ3RvU3RyaW5nJ1xuICAsICR0b1N0cmluZyAgID0gLy4vW1RPX1NUUklOR107XG5cbnZhciBkZWZpbmUgPSBmdW5jdGlvbihmbil7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoUmVnRXhwLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmbiwgdHJ1ZSk7XG59O1xuXG4vLyAyMS4yLjUuMTQgUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZygpXG5pZihyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uKCl7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7c291cmNlOiAnYScsIGZsYWdzOiAnYid9KSAhPSAnL2EvYic7IH0pKXtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcbiAgICByZXR1cm4gJy8nLmNvbmNhdChSLnNvdXJjZSwgJy8nLFxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xuICB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG59IGVsc2UgaWYoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKXtcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCl7XG4gICAgcmV0dXJuICR0b1N0cmluZy5jYWxsKHRoaXMpO1xuICB9KTtcbn0iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gMjMuMiBTZXQgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoJ1NldCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKXsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSl7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdiaWcnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy40IFN0cmluZy5wcm90b3R5cGUuYmxpbmsoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIGJsaW5rKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRhdCAgICAgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKShmYWxzZSk7XG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3Mpe1xuICAgIHJldHVybiAkYXQodGhpcywgcG9zKTtcbiAgfVxufSk7IiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9MZW5ndGggID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBjb250ZXh0ICAgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpXG4gICwgRU5EU19XSVRIID0gJ2VuZHNXaXRoJ1xuICAsICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKXtcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpXG4gICAgICAsIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICAgICwgbGVuICAgID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpXG4gICAgICAsIGVuZCAgICA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbilcbiAgICAgICwgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRlbmRzV2l0aFxuICAgICAgPyAkZW5kc1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGVuZClcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIEIuMi4zLjYgU3RyaW5nLnByb3RvdHlwZS5maXhlZCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gZml4ZWQoKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3Ipe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2ZvbnRzaXplJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKXtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XG4gIH1cbn0pOyIsInZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9JbmRleCAgICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgZnJvbUNoYXJDb2RlICAgPSBTdHJpbmcuZnJvbUNoYXJDb2RlXG4gICwgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXG4gIGZyb21Db2RlUG9pbnQ6IGZ1bmN0aW9uIGZyb21Db2RlUG9pbnQoeCl7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB2YXIgcmVzICA9IFtdXG4gICAgICAsIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoXG4gICAgICAsIGkgICAgPSAwXG4gICAgICAsIGNvZGU7XG4gICAgd2hpbGUoYUxlbiA+IGkpe1xuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcbiAgICAgIGlmKHRvSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKXRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcbiAgICAgICAgPyBmcm9tQ2hhckNvZGUoY29kZSlcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxuICAgICAgKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pOyIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvbnRleHQgID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKVxuICAsIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyosIHBvc2l0aW9uID0gMCAqLyl7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCl7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnbGluaycsIGZ1bmN0aW9uKGNyZWF0ZUhUTUwpe1xuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9XG59KTsiLCJ2YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCB0b0xlbmd0aCAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXG4gIHJhdzogZnVuY3Rpb24gcmF3KGNhbGxTaXRlKXtcbiAgICB2YXIgdHBsICA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpXG4gICAgICAsIGxlbiAgPSB0b0xlbmd0aCh0cGwubGVuZ3RoKVxuICAgICAgLCBhTGVuID0gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgLCByZXMgID0gW11cbiAgICAgICwgaSAgICA9IDA7XG4gICAgd2hpbGUobGVuID4gaSl7XG4gICAgICByZXMucHVzaChTdHJpbmcodHBsW2krK10pKTtcbiAgICAgIGlmKGkgPCBhTGVuKXJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9IHJldHVybiByZXMuam9pbignJyk7XG4gIH1cbn0pOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICAvLyAyMS4xLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5yZXBlYXQoY291bnQpXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMSBTdHJpbmcucHJvdG90eXBlLnNtYWxsKClcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24oY3JlYXRlSFRNTCl7XG4gIHJldHVybiBmdW5jdGlvbiBzbWFsbCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH1cbn0pOyIsIi8vIDIxLjEuMy4xOCBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIFssIHBvc2l0aW9uIF0pXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvTGVuZ3RoICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBjb250ZXh0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0JylcbiAgLCBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJ1xuICAsICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKFNUQVJUU19XSVRIKSwgJ1N0cmluZycsIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyosIHBvc2l0aW9uID0gMCAqLyl7XG4gICAgdmFyIHRoYXQgICA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSClcbiAgICAgICwgaW5kZXggID0gdG9MZW5ndGgoTWF0aC5taW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSlcbiAgICAgICwgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuICRzdGFydHNXaXRoXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcbiAgICAgIDogdGhhdC5zbGljZShpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdHJpa2UnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xMyBTdHJpbmcucHJvdG90eXBlLnN1YigpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1Yigpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdWInLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbihjcmVhdGVIVE1MKXtcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpe1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyAyMS4xLjMuMjUgU3RyaW5nLnByb3RvdHlwZS50cmltKClcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbigkdHJpbSl7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDMpO1xuICB9O1xufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHR5cGVkICAgICAgID0gcmVxdWlyZSgnLi9fdHlwZWQnKVxuICAsIGJ1ZmZlciAgICAgICA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpXG4gICwgYW5PYmplY3QgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b0luZGV4ICAgICAgPSByZXF1aXJlKCcuL190by1pbmRleCcpXG4gICwgdG9MZW5ndGggICAgID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJylcbiAgLCBpc09iamVjdCAgICAgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKVxuICAsIEFycmF5QnVmZmVyICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyXG4gICwgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpXG4gICwgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyXG4gICwgJERhdGFWaWV3ICAgID0gYnVmZmVyLkRhdGFWaWV3XG4gICwgJGlzVmlldyAgICAgID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXdcbiAgLCAkc2xpY2UgICAgICAgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlXG4gICwgVklFVyAgICAgICAgID0gJHR5cGVkLlZJRVdcbiAgLCBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwge0FycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXJ9KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XG4gIC8vIDI0LjEuMy4xIEFycmF5QnVmZmVyLmlzVmlldyhhcmcpXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KXtcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcbiAgfVxufSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbigpe1xuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSksIEFSUkFZX0JVRkZFUiwge1xuICAvLyAyNC4xLjQuMyBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2Uoc3RhcnQsIGVuZClcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpe1xuICAgIGlmKCRzbGljZSAhPT0gdW5kZWZpbmVkICYmIGVuZCA9PT0gdW5kZWZpbmVkKXJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcbiAgICB2YXIgbGVuICAgID0gYW5PYmplY3QodGhpcykuYnl0ZUxlbmd0aFxuICAgICAgLCBmaXJzdCAgPSB0b0luZGV4KHN0YXJ0LCBsZW4pXG4gICAgICAsIGZpbmFsICA9IHRvSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiBlbmQsIGxlbilcbiAgICAgICwgcmVzdWx0ID0gbmV3IChzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJEFycmF5QnVmZmVyKSkodG9MZW5ndGgoZmluYWwgLSBmaXJzdCkpXG4gICAgICAsIHZpZXdTICA9IG5ldyAkRGF0YVZpZXcodGhpcylcbiAgICAgICwgdmlld1QgID0gbmV3ICREYXRhVmlldyhyZXN1bHQpXG4gICAgICAsIGluZGV4ICA9IDA7XG4gICAgd2hpbGUoZmlyc3QgPCBmaW5hbCl7XG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XG4gICAgfSByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShBUlJBWV9CVUZGRVIpOyIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL190eXBlZCcpLkFCViwge1xuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDY0QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbihpbml0KXtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCl7XG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcbiAgfTtcbn0pOyIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7IiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24oaW5pdCl7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpe1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTsiLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uKGluaXQpe1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhDbGFtcGVkQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKXtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSwgdHJ1ZSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIGVhY2ggICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKVxuICAsIHJlZGVmaW5lICAgICA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJylcbiAgLCBtZXRhICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhJylcbiAgLCBhc3NpZ24gICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJylcbiAgLCB3ZWFrICAgICAgICAgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKVxuICAsIGlzT2JqZWN0ICAgICA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpXG4gICwgZ2V0V2VhayAgICAgID0gbWV0YS5nZXRXZWFrXG4gICwgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZVxuICAsIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmVcbiAgLCB0bXAgICAgICAgICAgPSB7fVxuICAsIEludGVybmFsTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCl7XG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gIH07XG59O1xuXG52YXIgbWV0aG9kcyA9IHtcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KXtcbiAgICBpZihpc09iamVjdChrZXkpKXtcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xuICAgICAgaWYoZGF0YSA9PT0gdHJ1ZSlyZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGlzKS5nZXQoa2V5KTtcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKXtcbiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywga2V5LCB2YWx1ZSk7XG4gIH1cbn07XG5cbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXG52YXIgJFdlYWtNYXAgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnV2Vha01hcCcsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG5pZihuZXcgJFdlYWtNYXAoKS5zZXQoKE9iamVjdC5mcmVlemUgfHwgT2JqZWN0KSh0bXApLCA3KS5nZXQodG1wKSAhPSA3KXtcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIpO1xuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgbWV0YS5ORUVEID0gdHJ1ZTtcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbihrZXkpe1xuICAgIHZhciBwcm90byAgPSAkV2Vha01hcC5wcm90b3R5cGVcbiAgICAgICwgbWV0aG9kID0gcHJvdG9ba2V5XTtcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbihhLCBiKXtcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxuICAgICAgaWYoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSl7XG4gICAgICAgIGlmKCF0aGlzLl9mKXRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXA7XG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xuICAgICAgLy8gc3RvcmUgYWxsIHRoZSByZXN0IG9uIG5hdGl2ZSB3ZWFrbWFwXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcbiAgICB9KTtcbiAgfSk7XG59IiwiJ3VzZSBzdHJpY3QnO1xudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcblxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcbnJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKSgnV2Vha1NldCcsIGZ1bmN0aW9uKGdldCl7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCl7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKXtcbiAgICByZXR1cm4gd2Vhay5kZWYodGhpcywgdmFsdWUsIHRydWUpO1xuICB9XG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyosIGZyb21JbmRleCA9IDAgKi8pe1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yd2FsZHJvbi90YzM5LW5vdGVzL2Jsb2IvbWFzdGVyL2VzNi8yMDE0LTA5L3NlcHQtMjUubWQjNTEwLWdsb2JhbGFzYXAtZm9yLWVucXVldWluZy1hLW1pY3JvdGFza1xudmFyICRleHBvcnQgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKVxuICAsIHByb2Nlc3MgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnByb2Nlc3NcbiAgLCBpc05vZGUgICAgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5HLCB7XG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pe1xuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XG4gICAgbWljcm90YXNrKGRvbWFpbiA/IGRvbWFpbi5iaW5kKGZuKSA6IGZuKTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGNvZiAgICAgPSByZXF1aXJlKCcuL19jb2YnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdFcnJvcicsIHtcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCl7XG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cbnZhciAkZXhwb3J0ICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHt0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKX0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGlhZGRoOiBmdW5jdGlvbiBpYWRkaCh4MCwgeDEsIHkwLCB5MSl7XG4gICAgdmFyICR4MCA9IHgwID4+PiAwXG4gICAgICAsICR4MSA9IHgxID4+PiAwXG4gICAgICAsICR5MCA9IHkwID4+PiAwO1xuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsICR1ID0gK3VcbiAgICAgICwgJHYgPSArdlxuICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2XG4gICAgICAsIHYwID0gJHYgJiBVSU5UMTZcbiAgICAgICwgdTEgPSAkdSA+PiAxNlxuICAgICAgLCB2MSA9ICR2ID4+IDE2XG4gICAgICAsIHQgID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcbiAgICByZXR1cm4gdTEgKiB2MSArICh0ID4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4gMTYpO1xuICB9XG59KTsiLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpe1xuICAgIHZhciAkeDAgPSB4MCA+Pj4gMFxuICAgICAgLCAkeDEgPSB4MSA+Pj4gMFxuICAgICAgLCAkeTAgPSB5MCA+Pj4gMDtcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XG4gIHVtdWxoOiBmdW5jdGlvbiB1bXVsaCh1LCB2KXtcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmXG4gICAgICAsICR1ID0gK3VcbiAgICAgICwgJHYgPSArdlxuICAgICAgLCB1MCA9ICR1ICYgVUlOVDE2XG4gICAgICAsIHYwID0gJHYgJiBVSU5UMTZcbiAgICAgICwgdTEgPSAkdSA+Pj4gMTZcbiAgICAgICwgdjEgPSAkdiA+Pj4gMTZcbiAgICAgICwgdCAgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgdG9PYmplY3QgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0JylcbiAgLCBhRnVuY3Rpb24gICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcblxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKXtcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwge2dldDogYUZ1bmN0aW9uKGdldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZX0pO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKVxuICAsICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xuXG4vLyBCLjIuMi4zIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpe1xuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7c2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlfSk7XG4gIH1cbn0pOyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xudmFyICRleHBvcnQgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCl7XG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbnZhciAkZXhwb3J0ICAgICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgb3duS2V5cyAgICAgICAgPSByZXF1aXJlKCcuL19vd24ta2V5cycpXG4gICwgdG9JT2JqZWN0ICAgICAgPSByZXF1aXJlKCcuL190by1pb2JqZWN0JylcbiAgLCBnT1BEICAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJylcbiAgLCBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2NyZWF0ZS1wcm9wZXJ0eScpO1xuXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhvYmplY3Qpe1xuICAgIHZhciBPICAgICAgID0gdG9JT2JqZWN0KG9iamVjdClcbiAgICAgICwgZ2V0RGVzYyA9IGdPUEQuZlxuICAgICAgLCBrZXlzICAgID0gb3duS2V5cyhPKVxuICAgICAgLCByZXN1bHQgID0ge31cbiAgICAgICwgaSAgICAgICA9IDBcbiAgICAgICwga2V5O1xuICAgIHdoaWxlKGtleXMubGVuZ3RoID4gaSljcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSA9IGtleXNbaSsrXSwgZ2V0RGVzYyhPLCBrZXkpKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCB0b09iamVjdCAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL190by1vYmplY3QnKVxuICAsIHRvUHJpbWl0aXZlICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICAgID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpXG4gICwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xuXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XG4gIF9fbG9va3VwR2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwR2V0dGVyX18oUCl7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKVxuICAgICAgLCBLID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSlcbiAgICAgICwgRDtcbiAgICBkbyB7XG4gICAgICBpZihEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKXJldHVybiBELmdldDtcbiAgICB9IHdoaWxlKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIHRvT2JqZWN0ICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpXG4gICwgdG9QcmltaXRpdmUgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICAgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJylcbiAgLCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG5cbi8vIEIuMi4yLjUgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cFNldHRlcl9fKFApXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKXtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpXG4gICAgICAsIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKVxuICAgICAgLCBEO1xuICAgIGRvIHtcbiAgICAgIGlmKEQgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgSykpcmV0dXJuIEQuc2V0O1xuICAgIH0gd2hpbGUoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgfVxufSk7IiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KXtcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbnZhciAkZXhwb3J0ICAgICA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgZ2xvYmFsICAgICAgPSByZXF1aXJlKCcuL19nbG9iYWwnKVxuICAsIGNvcmUgICAgICAgID0gcmVxdWlyZSgnLi9fY29yZScpXG4gICwgbWljcm90YXNrICAgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpXG4gICwgT0JTRVJWQUJMRSAgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpXG4gICwgYUZ1bmN0aW9uICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCBhbk9iamVjdCAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgYW5JbnN0YW5jZSAgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpXG4gICwgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKVxuICAsIGhpZGUgICAgICAgID0gcmVxdWlyZSgnLi9faGlkZScpXG4gICwgZm9yT2YgICAgICAgPSByZXF1aXJlKCcuL19mb3Itb2YnKVxuICAsIFJFVFVSTiAgICAgID0gZm9yT2YuUkVUVVJOO1xuXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oZm4pe1xuICByZXR1cm4gZm4gPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGFGdW5jdGlvbihmbik7XG59O1xuXG52YXIgY2xlYW51cFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uKHN1YnNjcmlwdGlvbil7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jO1xuICBpZihjbGVhbnVwKXtcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cCgpO1xuICB9XG59O1xuXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgcmV0dXJuIHN1YnNjcmlwdGlvbi5fbyA9PT0gdW5kZWZpbmVkO1xufTtcblxudmFyIGNsb3NlU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24oc3Vic2NyaXB0aW9uKXtcbiAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXtcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICB9XG59O1xuXG52YXIgU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24ob2JzZXJ2ZXIsIHN1YnNjcmliZXIpe1xuICBhbk9iamVjdChvYnNlcnZlcik7XG4gIHRoaXMuX2MgPSB1bmRlZmluZWQ7XG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XG4gIHRyeSB7XG4gICAgdmFyIGNsZWFudXAgICAgICA9IHN1YnNjcmliZXIob2JzZXJ2ZXIpXG4gICAgICAsIHN1YnNjcmlwdGlvbiA9IGNsZWFudXA7XG4gICAgaWYoY2xlYW51cCAhPSBudWxsKXtcbiAgICAgIGlmKHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKWNsZWFudXAgPSBmdW5jdGlvbigpeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgIGVsc2UgYUZ1bmN0aW9uKGNsZWFudXApO1xuICAgICAgdGhpcy5fYyA9IGNsZWFudXA7XG4gICAgfVxuICB9IGNhdGNoKGUpe1xuICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgIHJldHVybjtcbiAgfSBpZihzdWJzY3JpcHRpb25DbG9zZWQodGhpcykpY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcbn07XG5cblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xuICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKXsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cbn0pO1xuXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbihzdWJzY3JpcHRpb24pe1xuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xufTtcblxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSl7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xuICAgICAgICBpZihtKXJldHVybiBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpe1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xuICAgIGlmKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXRocm93IHZhbHVlO1xuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcbiAgICAgIGlmKCFtKXRocm93IHZhbHVlO1xuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh2YWx1ZSl7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XG4gICAgaWYoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKXtcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcbiAgICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTtcbiAgICAgICAgdmFsdWUgPSBtID8gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSkgOiB1bmRlZmluZWQ7XG4gICAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpe1xuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpO1xufTtcblxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKXtcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XG4gIH0sXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pe1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCl7XG4gICAgICBhRnVuY3Rpb24oZm4pO1xuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dCA6IGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5yZWRlZmluZUFsbCgkT2JzZXJ2YWJsZSwge1xuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpe1xuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XG4gICAgaWYobWV0aG9kKXtcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xuICAgICAgcmV0dXJuIG9ic2VydmFibGUuY29uc3RydWN0b3IgPT09IEMgPyBvYnNlcnZhYmxlIDogbmV3IEMoZnVuY3Rpb24ob2JzZXJ2ZXIpe1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbihvYnNlcnZlcil7XG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uKCl7XG4gICAgICAgIGlmKCFkb25lKXtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYoZm9yT2YoeCwgZmFsc2UsIGZ1bmN0aW9uKGl0KXtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7XG4gICAgICAgICAgICAgIGlmKGRvbmUpcmV0dXJuIFJFVFVSTjtcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pcmV0dXJuO1xuICAgICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICBpZihkb25lKXRocm93IGU7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7IGRvbmUgPSB0cnVlOyB9O1xuICAgIH0pO1xuICB9LFxuICBvZjogZnVuY3Rpb24gb2YoKXtcbiAgICBmb3IodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBBcnJheShsKTsgaSA8IGw7KWl0ZW1zW2ldID0gYXJndW1lbnRzW2krK107XG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uKG9ic2VydmVyKXtcbiAgICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24oKXtcbiAgICAgICAgaWYoIWRvbmUpe1xuICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSl7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2ldKTtcbiAgICAgICAgICAgIGlmKGRvbmUpcmV0dXJuO1xuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKXsgZG9uZSA9IHRydWU7IH07XG4gICAgfSk7XG4gIH1cbn0pO1xuXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXM7IH0pO1xuXG4kZXhwb3J0KCRleHBvcnQuRywge09ic2VydmFibGU6ICRPYnNlcnZhYmxlfSk7XG5cbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHtkZWZpbmVNZXRhZGF0YTogZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgPSBtZXRhZGF0YS5rZXlcbiAgLCBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwID0gbWV0YWRhdGEubWFwXG4gICwgc3RvcmUgICAgICAgICAgICAgICAgICA9IG1ldGFkYXRhLnN0b3JlO1xuXG5tZXRhZGF0YS5leHAoe2RlbGV0ZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWxldGVNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICB2YXIgdGFyZ2V0S2V5ICAgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pXG4gICAgLCBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XG4gIGlmKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpcmV0dXJuIGZhbHNlO1xuICBpZihtZXRhZGF0YU1hcC5zaXplKXJldHVybiB0cnVlO1xuICB2YXIgdGFyZ2V0TWV0YWRhdGEgPSBzdG9yZS5nZXQodGFyZ2V0KTtcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XG59fSk7IiwidmFyIFNldCAgICAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9lczYuc2V0JylcbiAgLCBmcm9tICAgICAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKVxuICAsIG1ldGFkYXRhICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBnZXRQcm90b3R5cGVPZiAgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5c1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlNZXRhZGF0YUtleXMgPSBmdW5jdGlvbihPLCBQKXtcbiAgdmFyIG9LZXlzICA9IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKE8sIFApXG4gICAgLCBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgaWYocGFyZW50ID09PSBudWxsKXJldHVybiBvS2V5cztcbiAgdmFyIHBLZXlzICA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcbn07XG5cbm1ldGFkYXRhLmV4cCh7Z2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlNZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0XG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbihNZXRhZGF0YUtleSwgTywgUCl7XG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgaWYoaGFzT3duKXJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcbn07XG5cbm1ldGFkYXRhLmV4cCh7Z2V0TWV0YWRhdGE6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5c1xuICAsIHRvTWV0YUtleSAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXRcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG5tZXRhZGF0YS5leHAoe2dldE93bk1ldGFkYXRhOiBmdW5jdGlvbiBnZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qLCB0YXJnZXRLZXkgKi8pe1xuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxuICAgICwgYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKSk7XG59fSk7IiwidmFyIG1ldGFkYXRhICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpXG4gICwgYW5PYmplY3QgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpXG4gICwgZ2V0UHJvdG90eXBlT2YgICAgICAgICA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKVxuICAsIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXNcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5O1xuXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uKE1ldGFkYXRhS2V5LCBPLCBQKXtcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xuICBpZihoYXNPd24pcmV0dXJuIHRydWU7XG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcbn07XG5cbm1ldGFkYXRhLmV4cCh7aGFzTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyosIHRhcmdldEtleSAqLyl7XG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcbn19KTsiLCJ2YXIgbWV0YWRhdGEgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJylcbiAgLCBhbk9iamVjdCAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0JylcbiAgLCBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzXG4gICwgdG9NZXRhS2V5ICAgICAgICAgICAgICA9IG1ldGFkYXRhLmtleTtcblxubWV0YWRhdGEuZXhwKHtoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiwgdGFyZ2V0S2V5ICovKXtcbiAgcmV0dXJuIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldClcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xufX0pOyIsInZhciBtZXRhZGF0YSAgICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKVxuICAsIGFuT2JqZWN0ICAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKVxuICAsIGFGdW5jdGlvbiAgICAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJylcbiAgLCB0b01ldGFLZXkgICAgICAgICAgICAgICAgID0gbWV0YWRhdGEua2V5XG4gICwgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcblxubWV0YWRhdGEuZXhwKHttZXRhZGF0YTogZnVuY3Rpb24gbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpe1xuICByZXR1cm4gZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgdGFyZ2V0S2V5KXtcbiAgICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKFxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcbiAgICAgIHRvTWV0YUtleSh0YXJnZXRLZXkpXG4gICAgKTtcbiAgfTtcbn19KTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXG52YXIgJGV4cG9ydCAgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7dG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnU2V0Jyl9KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpXG4gICwgJGF0ICAgICA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcyl7XG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXG52YXIgJGV4cG9ydCAgICAgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsIGRlZmluZWQgICAgID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpXG4gICwgdG9MZW5ndGggICAgPSByZXF1aXJlKCcuL190by1sZW5ndGgnKVxuICAsIGlzUmVnRXhwICAgID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJylcbiAgLCBnZXRGbGFncyAgICA9IHJlcXVpcmUoJy4vX2ZsYWdzJylcbiAgLCBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciAkUmVnRXhwU3RyaW5nSXRlcmF0b3IgPSBmdW5jdGlvbihyZWdleHAsIHN0cmluZyl7XG4gIHRoaXMuX3IgPSByZWdleHA7XG4gIHRoaXMuX3MgPSBzdHJpbmc7XG59O1xuXG5yZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpKCRSZWdFeHBTdHJpbmdJdGVyYXRvciwgJ1JlZ0V4cCBTdHJpbmcnLCBmdW5jdGlvbiBuZXh0KCl7XG4gIHZhciBtYXRjaCA9IHRoaXMuX3IuZXhlYyh0aGlzLl9zKTtcbiAgcmV0dXJuIHt2YWx1ZTogbWF0Y2gsIGRvbmU6IG1hdGNoID09PSBudWxsfTtcbn0pO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgbWF0Y2hBbGw6IGZ1bmN0aW9uIG1hdGNoQWxsKHJlZ2V4cCl7XG4gICAgZGVmaW5lZCh0aGlzKTtcbiAgICBpZighaXNSZWdFeHAocmVnZXhwKSl0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7XG4gICAgdmFyIFMgICAgID0gU3RyaW5nKHRoaXMpXG4gICAgICAsIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApXG4gICAgICAsIHJ4ICAgID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XG4gICAgcmV0dXJuIG5ldyAkUmVnRXhwU3RyaW5nSXRlcmF0b3IocngsIFMpO1xuICB9XG59KTsiLCIndXNlIHN0cmljdCc7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICRwYWQgICAgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyosIGZpbGxTdHJpbmcgPSAnICcgKi8pe1xuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZhbHNlKTtcbiAgfVxufSk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCAkcGFkICAgID0gcmVxdWlyZSgnLi9fc3RyaW5nLXBhZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiwgZmlsbFN0cmluZyA9ICcgJyAqLyl7XG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XG4gIH1cbn0pOyIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zZWJtYXJrYmFnZS9lY21hc2NyaXB0LXN0cmluZy1sZWZ0LXJpZ2h0LXRyaW1cbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbUxlZnQoKXtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMSk7XG4gIH07XG59LCAndHJpbVN0YXJ0Jyk7IiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbVJpZ2h0JywgZnVuY3Rpb24oJHRyaW0pe1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCl7XG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xuICB9O1xufSwgJ3RyaW1FbmQnKTsiLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWdsb2JhbFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMsICdTeXN0ZW0nLCB7Z2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKX0pOyIsInZhciAkaXRlcmF0b3JzICAgID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKVxuICAsIHJlZGVmaW5lICAgICAgPSByZXF1aXJlKCcuL19yZWRlZmluZScpXG4gICwgZ2xvYmFsICAgICAgICA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpXG4gICwgaGlkZSAgICAgICAgICA9IHJlcXVpcmUoJy4vX2hpZGUnKVxuICAsIEl0ZXJhdG9ycyAgICAgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKVxuICAsIHdrcyAgICAgICAgICAgPSByZXF1aXJlKCcuL193a3MnKVxuICAsIElURVJBVE9SICAgICAgPSB3a3MoJ2l0ZXJhdG9yJylcbiAgLCBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpXG4gICwgQXJyYXlWYWx1ZXMgICA9IEl0ZXJhdG9ycy5BcnJheTtcblxuZm9yKHZhciBjb2xsZWN0aW9ucyA9IFsnTm9kZUxpc3QnLCAnRE9NVG9rZW5MaXN0JywgJ01lZGlhTGlzdCcsICdTdHlsZVNoZWV0TGlzdCcsICdDU1NSdWxlTGlzdCddLCBpID0gMDsgaSA8IDU7IGkrKyl7XG4gIHZhciBOQU1FICAgICAgID0gY29sbGVjdGlvbnNbaV1cbiAgICAsIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV1cbiAgICAsIHByb3RvICAgICAgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlXG4gICAgLCBrZXk7XG4gIGlmKHByb3RvKXtcbiAgICBpZighcHJvdG9bSVRFUkFUT1JdKWhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgaWYoIXByb3RvW1RPX1NUUklOR19UQUddKWhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGZvcihrZXkgaW4gJGl0ZXJhdG9ycylpZighcHJvdG9ba2V5XSlyZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59IiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKVxuICAsICR0YXNrICAgPSByZXF1aXJlKCcuL190YXNrJyk7XG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xuICBzZXRJbW1lZGlhdGU6ICAgJHRhc2suc2V0LFxuICBjbGVhckltbWVkaWF0ZTogJHRhc2suY2xlYXJcbn0pOyIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbnZhciBnbG9iYWwgICAgID0gcmVxdWlyZSgnLi9fZ2xvYmFsJylcbiAgLCAkZXhwb3J0ICAgID0gcmVxdWlyZSgnLi9fZXhwb3J0JylcbiAgLCBpbnZva2UgICAgID0gcmVxdWlyZSgnLi9faW52b2tlJylcbiAgLCBwYXJ0aWFsICAgID0gcmVxdWlyZSgnLi9fcGFydGlhbCcpXG4gICwgbmF2aWdhdG9yICA9IGdsb2JhbC5uYXZpZ2F0b3JcbiAgLCBNU0lFICAgICAgID0gISFuYXZpZ2F0b3IgJiYgL01TSUUgLlxcLi8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xudmFyIHdyYXAgPSBmdW5jdGlvbihzZXQpe1xuICByZXR1cm4gTVNJRSA/IGZ1bmN0aW9uKGZuLCB0aW1lIC8qLCAuLi5hcmdzICovKXtcbiAgICByZXR1cm4gc2V0KGludm9rZShcbiAgICAgIHBhcnRpYWwsXG4gICAgICBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMiksXG4gICAgICB0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pXG4gICAgKSwgdGltZSk7XG4gIH0gOiBzZXQ7XG59O1xuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XG4gIHNldFRpbWVvdXQ6ICB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7IiwicmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zeW1ib2wnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydGllcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNlYWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1zZWFsZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5iaW5kJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnBhcnNlLWludCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnRvLWZpeGVkJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWZpbml0ZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLnBhcnNlLWZsb2F0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFzaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY2x6MzInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5mcm91bmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxMCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnNpZ24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLnRydW5jJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmVuZHMtd2l0aCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3RhcnRzLXdpdGgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5ibGluaycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRjb2xvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmxpbmsnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1YicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tanNvbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1wcmltaXRpdmUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNvcnQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnJlZHVjZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubGFzdC1pbmRleC1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstbWFwJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5kYXRhLXZpZXcnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1jbGFtcGVkLWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDY0LWFycmF5Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWZpbmUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaGFzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QucHJldmVudC1leHRlbnNpb25zJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcycpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXInKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5lcnJvci5pcy1lcnJvcicpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVmaW5lLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhLWtleXMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFzYXAnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlcy93ZWIuaW1tZWRpYXRlJyk7XG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTsiLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogaHR0cHM6Ly9yYXcuZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9tYXN0ZXIvTElDRU5TRSBmaWxlLiBBblxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuIShmdW5jdGlvbihnbG9iYWwpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIGlmIChydW50aW1lKSB7XG4gICAgaWYgKGluTW9kdWxlKSB7XG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXG4gICAgICAvLyBtYWtlIHRoZSBleHBvcnRzIG9iamVjdCBpZGVudGljYWwgdG8gcmVnZW5lcmF0b3JSdW50aW1lLlxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgZXZhbHVhdGluZyB0aGUgcmVzdCBvZiB0aGlzIGZpbGUgaWYgdGhlIHJ1bnRpbWUgd2FzXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxuICAvLyBtb2R1bGUuZXhwb3J0cyAoaWYgd2UncmUgaW4gYSBtb2R1bGUpIG9yIGEgbmV3LCBlbXB0eSBvYmplY3QuXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIHJ1bnRpbWUud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgcnVudGltZS5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLiBJZiB0aGUgUHJvbWlzZSBpcyByZWplY3RlZCwgaG93ZXZlciwgdGhlXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxuICAgICAgICAgIC8vIHRocm93biBiYWNrIGludG8gdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgYXMgaXMgdGhlIGNhc2VcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XG4gICAgICAgICAgLy8gYWxsb3dzIHRoZSBjb25zdW1lciB0byBkZWNpZGUgd2hhdCB0byBkbyB3aXRoIHRoZSB5aWVsZGVkXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcbiAgICAgICAgICAvLyBhd2FpdCwgYnkgY29udHJhc3QsIHRoZXJlIGlzIG5vIG9wcG9ydHVuaXR5IHRvIGV4YW1pbmUgdGhlXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxuICAgICAgICAgIC8vIGxldCB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhbmRsZSB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiICYmIHByb2Nlc3MuZG9tYWluKSB7XG4gICAgICBpbnZva2UgPSBwcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIGlmIChtZXRob2QgPT09IFwicmV0dXJuXCIgfHxcbiAgICAgICAgICAgICAgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiICYmIGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIC8vIEEgcmV0dXJuIG9yIHRocm93ICh3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gdGhyb3dcbiAgICAgICAgICAgIC8vIG1ldGhvZCkgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICAgIHZhciByZXR1cm5NZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXTtcbiAgICAgICAgICAgIGlmIChyZXR1cm5NZXRob2QpIHtcbiAgICAgICAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKHJldHVybk1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGFyZyk7XG4gICAgICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHJldHVybiBtZXRob2QgdGhyZXcgYW4gZXhjZXB0aW9uLCBsZXQgdGhhdFxuICAgICAgICAgICAgICAgIC8vIGV4Y2VwdGlvbiBwcmV2YWlsIG92ZXIgdGhlIG9yaWdpbmFsIHJldHVybiBvciB0aHJvdy5cbiAgICAgICAgICAgICAgICBtZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgICAgICAgYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgICAgIC8vIENvbnRpbnVlIHdpdGggdGhlIG91dGVyIHJldHVybiwgbm93IHRoYXQgdGhlIGRlbGVnYXRlXG4gICAgICAgICAgICAgIC8vIGl0ZXJhdG9yIGhhcyBiZWVuIHRlcm1pbmF0ZWQuXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChcbiAgICAgICAgICAgIGRlbGVnYXRlLml0ZXJhdG9yW21ldGhvZF0sXG4gICAgICAgICAgICBkZWxlZ2F0ZS5pdGVyYXRvcixcbiAgICAgICAgICAgIGFyZ1xuICAgICAgICAgICk7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIExpa2UgcmV0dXJuaW5nIGdlbmVyYXRvci50aHJvdyh1bmNhdWdodCksIGJ1dCB3aXRob3V0IHRoZVxuICAgICAgICAgICAgLy8gb3ZlcmhlYWQgb2YgYW4gZXh0cmEgZnVuY3Rpb24gY2FsbC5cbiAgICAgICAgICAgIG1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBEZWxlZ2F0ZSBnZW5lcmF0b3IgcmFuIGFuZCBoYW5kbGVkIGl0cyBvd24gZXhjZXB0aW9ucyBzb1xuICAgICAgICAgIC8vIHJlZ2FyZGxlc3Mgb2Ygd2hhdCB0aGUgbWV0aG9kIHdhcywgd2UgY29udGludWUgYXMgaWYgaXQgaXNcbiAgICAgICAgICAvLyBcIm5leHRcIiB3aXRoIGFuIHVuZGVmaW5lZCBhcmcuXG4gICAgICAgICAgbWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuICAgICAgICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgICAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuICAgICAgICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGFyZykpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgICAgbWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgICBhcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICB2YXIgaW5mbyA9IHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBpZiAoY29udGV4dC5kZWxlZ2F0ZSAmJiBtZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgICAgICAgYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaW5mbztcbiAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihhcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgbWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuICAgICAgICByZXR1cm4gISFjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEFtb25nIHRoZSB2YXJpb3VzIHRyaWNrcyBmb3Igb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWxcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXG4gIHR5cGVvZiBnbG9iYWwgPT09IFwib2JqZWN0XCIgPyBnbG9iYWwgOlxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xuKTtcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuXHJcbi8vIERpc3RyaWJ1dGlvbiBmaWxlIGZvciBNZXNzYWdlRmFjdG9yeS5qcyBcclxuLy8gdmVyc2lvbjogMC41LjFcclxuLy8gTGFzdCBidWlsZDogTW9uIEphbiAxNiAyMDE3IDA5OjA5OjI2IEdNVCswMDAwIChHTVQgU3RhbmRhcmQgVGltZSlcclxuXHJcbiFmdW5jdGlvbihlKXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz1lKCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLGUpO2Vsc2V7dmFyIHQ7dD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsdC5NZXNzYWdlRmFjdG9yeT1lKCl9fShmdW5jdGlvbigpe3ZhciBlO3JldHVybiBmdW5jdGlvbiB0KGUscixuKXtmdW5jdGlvbiBvKGEscyl7aWYoIXJbYV0pe2lmKCFlW2FdKXt2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFzJiZ1KXJldHVybiB1KGEsITApO2lmKGkpcmV0dXJuIGkoYSwhMCk7dmFyIGM9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIithK1wiJ1wiKTt0aHJvdyBjLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsY312YXIgbD1yW2FdPXtleHBvcnRzOnt9fTtlW2FdWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKHQpe3ZhciByPWVbYV1bMV1bdF07cmV0dXJuIG8ocj9yOnQpfSxsLGwuZXhwb3J0cyx0LGUscixuKX1yZXR1cm4gclthXS5leHBvcnRzfWZvcih2YXIgaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGE9MDthPG4ubGVuZ3RoO2ErKylvKG5bYV0pO3JldHVybiBvfSh7MTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9qc29uL3N0cmluZ2lmeVwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL2pzb24vc3RyaW5naWZ5XCI6MTZ9XSwyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvY3JlYXRlXCI6MTd9XSwzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCI6MTh9XSw0OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9mcmVlemVcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3QvZnJlZXplXCI6MTl9XSw1OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLF9fZXNNb2R1bGU6ITB9fSx7XCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIjoyMH1dLDY6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9e1wiZGVmYXVsdFwiOmUoXCJjb3JlLWpzL2xpYnJhcnkvZm4vb2JqZWN0L2tleXNcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qva2V5c1wiOjIxfV0sNzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCI6MjJ9XSw4OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXtcImRlZmF1bHRcIjplKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKSxfX2VzTW9kdWxlOiEwfX0se1wiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiOjIzfV0sOTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz17XCJkZWZhdWx0XCI6ZShcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIiksX19lc01vZHVsZTohMH19LHtcImNvcmUtanMvbGlicmFyeS9mbi9zeW1ib2wvaXRlcmF0b3JcIjoyNH1dLDEwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ci5fX2VzTW9kdWxlPSEwLHJbXCJkZWZhdWx0XCJdPWZ1bmN0aW9uKGUsdCl7aWYoIShlIGluc3RhbmNlb2YgdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX19LHt9XSwxMTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZShcIi4uL2NvcmUtanMvb2JqZWN0L2RlZmluZS1wcm9wZXJ0eVwiKSxpPW4obyk7cltcImRlZmF1bHRcIl09ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBuPXRbcl07bi5lbnVtZXJhYmxlPW4uZW51bWVyYWJsZXx8ITEsbi5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gbiYmKG4ud3JpdGFibGU9ITApLCgwLGlbXCJkZWZhdWx0XCJdKShlLG4ua2V5LG4pfX1yZXR1cm4gZnVuY3Rpb24odCxyLG4pe3JldHVybiByJiZlKHQucHJvdG90eXBlLHIpLG4mJmUodCxuKSx0fX0oKX0se1wiLi4vY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5XCI6M31dLDEyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKFwiLi4vY29yZS1qcy9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSxpPW4obyksYT1lKFwiLi4vY29yZS1qcy9vYmplY3QvY3JlYXRlXCIpLHM9bihhKSx1PWUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKSxjPW4odSk7cltcImRlZmF1bHRcIl09ZnVuY3Rpb24oZSx0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZudWxsIT09dCl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIisoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHQ/XCJ1bmRlZmluZWRcIjooMCxjW1wiZGVmYXVsdFwiXSkodCkpKTtlLnByb3RvdHlwZT0oMCxzW1wiZGVmYXVsdFwiXSkodCYmdC5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTplLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLHQmJihpW1wiZGVmYXVsdFwiXT8oMCxpW1wiZGVmYXVsdFwiXSkoZSx0KTplLl9fcHJvdG9fXz10KX19LHtcIi4uL2NvcmUtanMvb2JqZWN0L2NyZWF0ZVwiOjIsXCIuLi9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mXCI6NyxcIi4uL2hlbHBlcnMvdHlwZW9mXCI6MTR9XSwxMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1yLl9fZXNNb2R1bGU9ITA7dmFyIG89ZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpLGk9bihvKTtyW1wiZGVmYXVsdFwiXT1mdW5jdGlvbihlLHQpe2lmKCFlKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hdHx8XCJvYmplY3RcIiE9PShcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOigwLGlbXCJkZWZhdWx0XCJdKSh0KSkmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQ/ZTp0fX0se1wiLi4vaGVscGVycy90eXBlb2ZcIjoxNH1dLDE0OltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fXIuX19lc01vZHVsZT0hMDt2YXIgbz1lKFwiLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIiksaT1uKG8pLGE9ZShcIi4uL2NvcmUtanMvc3ltYm9sXCIpLHM9bihhKSx1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHNbXCJkZWZhdWx0XCJdJiZcInN5bWJvbFwiPT10eXBlb2YgaVtcImRlZmF1bHRcIl0/ZnVuY3Rpb24oZSl7cmV0dXJuIHR5cGVvZiBlfTpmdW5jdGlvbihlKXtyZXR1cm4gZSYmXCJmdW5jdGlvblwiPT10eXBlb2Ygc1tcImRlZmF1bHRcIl0mJmUuY29uc3RydWN0b3I9PT1zW1wiZGVmYXVsdFwiXSYmZSE9PXNbXCJkZWZhdWx0XCJdLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiBlfTtyW1wiZGVmYXVsdFwiXT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzW1wiZGVmYXVsdFwiXSYmXCJzeW1ib2xcIj09PXUoaVtcImRlZmF1bHRcIl0pP2Z1bmN0aW9uKGUpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiBlP1widW5kZWZpbmVkXCI6dShlKX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHNbXCJkZWZhdWx0XCJdJiZlLmNvbnN0cnVjdG9yPT09c1tcImRlZmF1bHRcIl0mJmUhPT1zW1wiZGVmYXVsdFwiXS5wcm90b3R5cGU/XCJzeW1ib2xcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgZT9cInVuZGVmaW5lZFwiOnUoZSl9fSx7XCIuLi9jb3JlLWpzL3N5bWJvbFwiOjgsXCIuLi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvclwiOjl9XSwxNTpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1lKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKX0se1wicmVnZW5lcmF0b3ItcnVudGltZVwiOjk3fV0sMTY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKSxvPW4uSlNPTnx8KG4uSlNPTj17c3RyaW5naWZ5OkpTT04uc3RyaW5naWZ5fSk7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBvLnN0cmluZ2lmeS5hcHBseShvLGFyZ3VtZW50cyl9fSx7XCIuLi8uLi9tb2R1bGVzL19jb3JlXCI6MzB9XSwxNzpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuY3JlYXRlXCIpO3ZhciBuPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jcmVhdGUoZSx0KX19LHtcIi4uLy4uL21vZHVsZXMvX2NvcmVcIjozMCxcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGVcIjo4NH1dLDE4OltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHlcIik7dmFyIG49ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0O3QuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZGVmaW5lUHJvcGVydHkoZSx0LHIpfX0se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwLFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eVwiOjg1fV0sMTk6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZVwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvX2NvcmVcIikuT2JqZWN0LmZyZWV6ZX0se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwLFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZVwiOjg2fV0sMjA6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2ZcIiksdC5leHBvcnRzPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLk9iamVjdC5nZXRQcm90b3R5cGVPZn0se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwLFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2ZcIjo4N31dLDIxOltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzXCIpLHQuZXhwb3J0cz1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3Qua2V5c30se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwLFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmtleXNcIjo4OH1dLDIyOltmdW5jdGlvbihlLHQscil7ZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mXCIpLHQuZXhwb3J0cz1lKFwiLi4vLi4vbW9kdWxlcy9fY29yZVwiKS5PYmplY3Quc2V0UHJvdG90eXBlT2Z9LHtcIi4uLy4uL21vZHVsZXMvX2NvcmVcIjozMCxcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mXCI6ODl9XSwyMzpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5zeW1ib2xcIiksZShcIi4uLy4uL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmdcIiksZShcIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvclwiKSxlKFwiLi4vLi4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGVcIiksdC5leHBvcnRzPWUoXCIuLi8uLi9tb2R1bGVzL19jb3JlXCIpLlN5bWJvbH0se1wiLi4vLi4vbW9kdWxlcy9fY29yZVwiOjMwLFwiLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZ1wiOjkwLFwiLi4vLi4vbW9kdWxlcy9lczYuc3ltYm9sXCI6OTIsXCIuLi8uLi9tb2R1bGVzL2VzNy5zeW1ib2wuYXN5bmMtaXRlcmF0b3JcIjo5MyxcIi4uLy4uL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlXCI6OTR9XSwyNDpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3JcIiksZShcIi4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZVwiKSx0LmV4cG9ydHM9ZShcIi4uLy4uL21vZHVsZXMvX3drcy1leHRcIikuZihcIml0ZXJhdG9yXCIpfSx7XCIuLi8uLi9tb2R1bGVzL193a3MtZXh0XCI6ODEsXCIuLi8uLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3JcIjo5MSxcIi4uLy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZVwiOjk1fV0sMjU6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBUeXBlRXJyb3IoZStcIiBpcyBub3QgYSBmdW5jdGlvbiFcIik7cmV0dXJuIGV9fSx7fV0sMjY6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt9fSx7fV0sMjc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faXMtb2JqZWN0XCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZighbihlKSl0aHJvdyBUeXBlRXJyb3IoZStcIiBpcyBub3QgYW4gb2JqZWN0IVwiKTtyZXR1cm4gZX19LHtcIi4vX2lzLW9iamVjdFwiOjQ2fV0sMjg6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdG8taW9iamVjdFwiKSxvPWUoXCIuL190by1sZW5ndGhcIiksaT1lKFwiLi9fdG8taW5kZXhcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbih0LHIsYSl7dmFyIHMsdT1uKHQpLGM9byh1Lmxlbmd0aCksbD1pKGEsYyk7aWYoZSYmciE9cil7Zm9yKDtjPmw7KWlmKHM9dVtsKytdLHMhPXMpcmV0dXJuITB9ZWxzZSBmb3IoO2M+bDtsKyspaWYoKGV8fGwgaW4gdSkmJnVbbF09PT1yKXJldHVybiBlfHxsfHwwO3JldHVybiFlJiYtMX19fSx7XCIuL190by1pbmRleFwiOjczLFwiLi9fdG8taW9iamVjdFwiOjc1LFwiLi9fdG8tbGVuZ3RoXCI6NzZ9XSwyOTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXt9LnRvU3RyaW5nO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbi5jYWxsKGUpLnNsaWNlKDgsLTEpfX0se31dLDMwOltmdW5jdGlvbihlLHQscil7dmFyIG49dC5leHBvcnRzPXt2ZXJzaW9uOlwiMi40LjBcIn07XCJudW1iZXJcIj09dHlwZW9mIF9fZSYmKF9fZT1uKX0se31dLDMxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2EtZnVuY3Rpb25cIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCxyKXtpZihuKGUpLHZvaWQgMD09PXQpcmV0dXJuIGU7c3dpdGNoKHIpe2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24ocil7cmV0dXJuIGUuY2FsbCh0LHIpfTtjYXNlIDI6cmV0dXJuIGZ1bmN0aW9uKHIsbil7cmV0dXJuIGUuY2FsbCh0LHIsbil9O2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24ocixuLG8pe3JldHVybiBlLmNhbGwodCxyLG4sbyl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmFwcGx5KHQsYXJndW1lbnRzKX19fSx7XCIuL19hLWZ1bmN0aW9uXCI6MjV9XSwzMjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz1mdW5jdGlvbihlKXtpZih2b2lkIDA9PWUpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiK2UpO3JldHVybiBlfX0se31dLDMzOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPSFlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXtyZXR1cm4gNyE9T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwiYVwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gN319KS5hfSl9LHtcIi4vX2ZhaWxzXCI6Mzh9XSwzNDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19pcy1vYmplY3RcIiksbz1lKFwiLi9fZ2xvYmFsXCIpLmRvY3VtZW50LGk9bihvKSYmbihvLmNyZWF0ZUVsZW1lbnQpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gaT9vLmNyZWF0ZUVsZW1lbnQoZSk6e319fSx7XCIuL19nbG9iYWxcIjozOSxcIi4vX2lzLW9iamVjdFwiOjQ2fV0sMzU6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9XCJjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2ZcIi5zcGxpdChcIixcIil9LHt9XSwzNjpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19vYmplY3Qta2V5c1wiKSxvPWUoXCIuL19vYmplY3QtZ29wc1wiKSxpPWUoXCIuL19vYmplY3QtcGllXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1uKGUpLHI9by5mO2lmKHIpZm9yKHZhciBhLHM9cihlKSx1PWkuZixjPTA7cy5sZW5ndGg+YzspdS5jYWxsKGUsYT1zW2MrK10pJiZ0LnB1c2goYSk7cmV0dXJuIHR9fSx7XCIuL19vYmplY3QtZ29wc1wiOjYwLFwiLi9fb2JqZWN0LWtleXNcIjo2MyxcIi4vX29iamVjdC1waWVcIjo2NH1dLDM3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2dsb2JhbFwiKSxvPWUoXCIuL19jb3JlXCIpLGk9ZShcIi4vX2N0eFwiKSxhPWUoXCIuL19oaWRlXCIpLHM9XCJwcm90b3R5cGVcIix1PWZ1bmN0aW9uKGUsdCxyKXt2YXIgYyxsLGYsZD1lJnUuRixwPWUmdS5HLGg9ZSZ1LlMseT1lJnUuUCxtPWUmdS5CLHY9ZSZ1LlcsXz1wP286b1t0XXx8KG9bdF09e30pLGI9X1tzXSxnPXA/bjpoP25bdF06KG5bdF18fHt9KVtzXTtwJiYocj10KTtmb3IoYyBpbiByKWw9IWQmJmcmJnZvaWQgMCE9PWdbY10sbCYmYyBpbiBffHwoZj1sP2dbY106cltjXSxfW2NdPXAmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGdbY10/cltjXTptJiZsP2koZixuKTp2JiZnW2NdPT1mP2Z1bmN0aW9uKGUpe3ZhciB0PWZ1bmN0aW9uKHQscixuKXtpZih0aGlzIGluc3RhbmNlb2YgZSl7c3dpdGNoKGFyZ3VtZW50cy5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbmV3IGU7Y2FzZSAxOnJldHVybiBuZXcgZSh0KTtjYXNlIDI6cmV0dXJuIG5ldyBlKHQscil9cmV0dXJuIG5ldyBlKHQscixuKX1yZXR1cm4gZS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3JldHVybiB0W3NdPWVbc10sdH0oZik6eSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZj9pKEZ1bmN0aW9uLmNhbGwsZik6Zix5JiYoKF8udmlydHVhbHx8KF8udmlydHVhbD17fSkpW2NdPWYsZSZ1LlImJmImJiFiW2NdJiZhKGIsYyxmKSkpfTt1LkY9MSx1Lkc9Mix1LlM9NCx1LlA9OCx1LkI9MTYsdS5XPTMyLHUuVT02NCx1LlI9MTI4LHQuZXhwb3J0cz11fSx7XCIuL19jb3JlXCI6MzAsXCIuL19jdHhcIjozMSxcIi4vX2dsb2JhbFwiOjM5LFwiLi9faGlkZVwiOjQxfV0sMzg6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7dHJ5e3JldHVybiEhZSgpfWNhdGNoKHQpe3JldHVybiEwfX19LHt9XSwzOTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPXQuZXhwb3J0cz1cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZ3aW5kb3cuTWF0aD09TWF0aD93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGYuTWF0aD09TWF0aD9zZWxmOkZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcIm51bWJlclwiPT10eXBlb2YgX19nJiYoX19nPW4pfSx7fV0sNDA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj17fS5oYXNPd25Qcm9wZXJ0eTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jYWxsKGUsdCl9fSx7fV0sNDE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWRwXCIpLG89ZShcIi4vX3Byb3BlcnR5LWRlc2NcIik7dC5leHBvcnRzPWUoXCIuL19kZXNjcmlwdG9yc1wiKT9mdW5jdGlvbihlLHQscil7cmV0dXJuIG4uZihlLHQsbygxLHIpKX06ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBlW3RdPXIsZX19LHtcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19vYmplY3QtZHBcIjo1NSxcIi4vX3Byb3BlcnR5LWRlc2NcIjo2Nn1dLDQyOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWUoXCIuL19nbG9iYWxcIikuZG9jdW1lbnQmJmRvY3VtZW50LmRvY3VtZW50RWxlbWVudH0se1wiLi9fZ2xvYmFsXCI6Mzl9XSw0MzpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hZShcIi4vX2Rlc2NyaXB0b3JzXCIpJiYhZShcIi4vX2ZhaWxzXCIpKGZ1bmN0aW9uKCl7cmV0dXJuIDchPU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlKFwiLi9fZG9tLWNyZWF0ZVwiKShcImRpdlwiKSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIDd9fSkuYX0pfSx7XCIuL19kZXNjcmlwdG9yc1wiOjMzLFwiLi9fZG9tLWNyZWF0ZVwiOjM0LFwiLi9fZmFpbHNcIjozOH1dLDQ0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2NvZlwiKTt0LmV4cG9ydHM9T2JqZWN0KFwielwiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKT9PYmplY3Q6ZnVuY3Rpb24oZSl7cmV0dXJuXCJTdHJpbmdcIj09bihlKT9lLnNwbGl0KFwiXCIpOk9iamVjdChlKX19LHtcIi4vX2NvZlwiOjI5fV0sNDU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fY29mXCIpO3QuZXhwb3J0cz1BcnJheS5pc0FycmF5fHxmdW5jdGlvbihlKXtyZXR1cm5cIkFycmF5XCI9PW4oZSl9fSx7XCIuL19jb2ZcIjoyOX1dLDQ2OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiBlP251bGwhPT1lOlwiZnVuY3Rpb25cIj09dHlwZW9mIGV9fSx7fV0sNDc6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9fb2JqZWN0LWNyZWF0ZVwiKSxvPWUoXCIuL19wcm9wZXJ0eS1kZXNjXCIpLGk9ZShcIi4vX3NldC10by1zdHJpbmctdGFnXCIpLGE9e307ZShcIi4vX2hpZGVcIikoYSxlKFwiLi9fd2tzXCIpKFwiaXRlcmF0b3JcIiksZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pLHQuZXhwb3J0cz1mdW5jdGlvbihlLHQscil7ZS5wcm90b3R5cGU9bihhLHtuZXh0Om8oMSxyKX0pLGkoZSx0K1wiIEl0ZXJhdG9yXCIpfX0se1wiLi9faGlkZVwiOjQxLFwiLi9fb2JqZWN0LWNyZWF0ZVwiOjU0LFwiLi9fcHJvcGVydHktZGVzY1wiOjY2LFwiLi9fc2V0LXRvLXN0cmluZy10YWdcIjo2OSxcIi4vX3drc1wiOjgyfV0sNDg6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9fbGlicmFyeVwiKSxvPWUoXCIuL19leHBvcnRcIiksaT1lKFwiLi9fcmVkZWZpbmVcIiksYT1lKFwiLi9faGlkZVwiKSxzPWUoXCIuL19oYXNcIiksdT1lKFwiLi9faXRlcmF0b3JzXCIpLGM9ZShcIi4vX2l0ZXItY3JlYXRlXCIpLGw9ZShcIi4vX3NldC10by1zdHJpbmctdGFnXCIpLGY9ZShcIi4vX29iamVjdC1ncG9cIiksZD1lKFwiLi9fd2tzXCIpKFwiaXRlcmF0b3JcIikscD0hKFtdLmtleXMmJlwibmV4dFwiaW5bXS5rZXlzKCkpLGg9XCJAQGl0ZXJhdG9yXCIseT1cImtleXNcIixtPVwidmFsdWVzXCIsdj1mdW5jdGlvbigpe3JldHVybiB0aGlzfTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIsXyxiLGcsRSl7YyhyLHQsXyk7dmFyIGosdyxPLE09ZnVuY3Rpb24oZSl7aWYoIXAmJmUgaW4gUilyZXR1cm4gUltlXTtzd2l0Y2goZSl7Y2FzZSB5OnJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfTtjYXNlIG06cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyByKHRoaXMsZSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgcih0aGlzLGUpfX0seD10K1wiIEl0ZXJhdG9yXCIsUD1iPT1tLGs9ITEsUj1lLnByb3RvdHlwZSxTPVJbZF18fFJbaF18fGImJlJbYl0sVD1TfHxNKGIpLEE9Yj9QP00oXCJlbnRyaWVzXCIpOlQ6dm9pZCAwLE49XCJBcnJheVwiPT10P1IuZW50cmllc3x8UzpTO2lmKE4mJihPPWYoTi5jYWxsKG5ldyBlKSksTyE9PU9iamVjdC5wcm90b3R5cGUmJihsKE8seCwhMCksbnx8cyhPLGQpfHxhKE8sZCx2KSkpLFAmJlMmJlMubmFtZSE9PW0mJihrPSEwLFQ9ZnVuY3Rpb24oKXtyZXR1cm4gUy5jYWxsKHRoaXMpfSksbiYmIUV8fCFwJiYhayYmUltkXXx8YShSLGQsVCksdVt0XT1ULHVbeF09dixiKWlmKGo9e3ZhbHVlczpQP1Q6TShtKSxrZXlzOmc/VDpNKHkpLGVudHJpZXM6QX0sRSlmb3IodyBpbiBqKXcgaW4gUnx8aShSLHcsalt3XSk7ZWxzZSBvKG8uUCtvLkYqKHB8fGspLHQsaik7cmV0dXJuIGp9fSx7XCIuL19leHBvcnRcIjozNyxcIi4vX2hhc1wiOjQwLFwiLi9faGlkZVwiOjQxLFwiLi9faXRlci1jcmVhdGVcIjo0NyxcIi4vX2l0ZXJhdG9yc1wiOjUwLFwiLi9fbGlicmFyeVwiOjUyLFwiLi9fb2JqZWN0LWdwb1wiOjYxLFwiLi9fcmVkZWZpbmVcIjo2NyxcIi4vX3NldC10by1zdHJpbmctdGFnXCI6NjksXCIuL193a3NcIjo4Mn1dLDQ5OltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7cmV0dXJue3ZhbHVlOnQsZG9uZTohIWV9fX0se31dLDUwOltmdW5jdGlvbihlLHQscil7dC5leHBvcnRzPXt9fSx7fV0sNTE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWtleXNcIiksbz1lKFwiLi9fdG8taW9iamVjdFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIHIsaT1vKGUpLGE9bihpKSxzPWEubGVuZ3RoLHU9MDtzPnU7KWlmKGlbcj1hW3UrK11dPT09dClyZXR1cm4gcn19LHtcIi4vX29iamVjdC1rZXlzXCI6NjMsXCIuL190by1pb2JqZWN0XCI6NzV9XSw1MjpbZnVuY3Rpb24oZSx0LHIpe3QuZXhwb3J0cz0hMH0se31dLDUzOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3VpZFwiKShcIm1ldGFcIiksbz1lKFwiLi9faXMtb2JqZWN0XCIpLGk9ZShcIi4vX2hhc1wiKSxhPWUoXCIuL19vYmplY3QtZHBcIikuZixzPTAsdT1PYmplY3QuaXNFeHRlbnNpYmxlfHxmdW5jdGlvbigpe3JldHVybiEwfSxjPSFlKFwiLi9fZmFpbHNcIikoZnVuY3Rpb24oKXtyZXR1cm4gdShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKX0pLGw9ZnVuY3Rpb24oZSl7YShlLG4se3ZhbHVlOntpOlwiT1wiKyArK3Msdzp7fX19KX0sZj1mdW5jdGlvbihlLHQpe2lmKCFvKGUpKXJldHVyblwic3ltYm9sXCI9PXR5cGVvZiBlP2U6KFwic3RyaW5nXCI9PXR5cGVvZiBlP1wiU1wiOlwiUFwiKStlO2lmKCFpKGUsbikpe2lmKCF1KGUpKXJldHVyblwiRlwiO2lmKCF0KXJldHVyblwiRVwiO2woZSl9cmV0dXJuIGVbbl0uaX0sZD1mdW5jdGlvbihlLHQpe2lmKCFpKGUsbikpe2lmKCF1KGUpKXJldHVybiEwO2lmKCF0KXJldHVybiExO2woZSl9cmV0dXJuIGVbbl0ud30scD1mdW5jdGlvbihlKXtyZXR1cm4gYyYmaC5ORUVEJiZ1KGUpJiYhaShlLG4pJiZsKGUpLGV9LGg9dC5leHBvcnRzPXtLRVk6bixORUVEOiExLGZhc3RLZXk6ZixnZXRXZWFrOmQsb25GcmVlemU6cH19LHtcIi4vX2ZhaWxzXCI6MzgsXCIuL19oYXNcIjo0MCxcIi4vX2lzLW9iamVjdFwiOjQ2LFwiLi9fb2JqZWN0LWRwXCI6NTUsXCIuL191aWRcIjo3OX1dLDU0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2FuLW9iamVjdFwiKSxvPWUoXCIuL19vYmplY3QtZHBzXCIpLGk9ZShcIi4vX2VudW0tYnVnLWtleXNcIiksYT1lKFwiLi9fc2hhcmVkLWtleVwiKShcIklFX1BST1RPXCIpLHM9ZnVuY3Rpb24oKXt9LHU9XCJwcm90b3R5cGVcIixjPWZ1bmN0aW9uKCl7dmFyIHQscj1lKFwiLi9fZG9tLWNyZWF0ZVwiKShcImlmcmFtZVwiKSxuPWkubGVuZ3RoLG89XCI8XCIsYT1cIj5cIjtmb3Ioci5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLGUoXCIuL19odG1sXCIpLmFwcGVuZENoaWxkKHIpLHIuc3JjPVwiamF2YXNjcmlwdDpcIix0PXIuY29udGVudFdpbmRvdy5kb2N1bWVudCx0Lm9wZW4oKSx0LndyaXRlKG8rXCJzY3JpcHRcIithK1wiZG9jdW1lbnQuRj1PYmplY3RcIitvK1wiL3NjcmlwdFwiK2EpLHQuY2xvc2UoKSxjPXQuRjtuLS07KWRlbGV0ZSBjW3VdW2lbbl1dO3JldHVybiBjKCl9O3QuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbihlLHQpe3ZhciByO3JldHVybiBudWxsIT09ZT8oc1t1XT1uKGUpLHI9bmV3IHMsc1t1XT1udWxsLHJbYV09ZSk6cj1jKCksdm9pZCAwPT09dD9yOm8ocix0KX19LHtcIi4vX2FuLW9iamVjdFwiOjI3LFwiLi9fZG9tLWNyZWF0ZVwiOjM0LFwiLi9fZW51bS1idWcta2V5c1wiOjM1LFwiLi9faHRtbFwiOjQyLFwiLi9fb2JqZWN0LWRwc1wiOjU2LFwiLi9fc2hhcmVkLWtleVwiOjcwfV0sNTU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fYW4tb2JqZWN0XCIpLG89ZShcIi4vX2llOC1kb20tZGVmaW5lXCIpLGk9ZShcIi4vX3RvLXByaW1pdGl2ZVwiKSxhPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTtyLmY9ZShcIi4vX2Rlc2NyaXB0b3JzXCIpP09iamVjdC5kZWZpbmVQcm9wZXJ0eTpmdW5jdGlvbihlLHQscil7aWYobihlKSx0PWkodCwhMCksbihyKSxvKXRyeXtyZXR1cm4gYShlLHQscil9Y2F0Y2gocyl7fWlmKFwiZ2V0XCJpbiByfHxcInNldFwiaW4gcil0aHJvdyBUeXBlRXJyb3IoXCJBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCFcIik7cmV0dXJuXCJ2YWx1ZVwiaW4gciYmKGVbdF09ci52YWx1ZSksZX19LHtcIi4vX2FuLW9iamVjdFwiOjI3LFwiLi9fZGVzY3JpcHRvcnNcIjozMyxcIi4vX2llOC1kb20tZGVmaW5lXCI6NDMsXCIuL190by1wcmltaXRpdmVcIjo3OH1dLDU2OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX29iamVjdC1kcFwiKSxvPWUoXCIuL19hbi1vYmplY3RcIiksaT1lKFwiLi9fb2JqZWN0LWtleXNcIik7dC5leHBvcnRzPWUoXCIuL19kZXNjcmlwdG9yc1wiKT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbihlLHQpe28oZSk7Zm9yKHZhciByLGE9aSh0KSxzPWEubGVuZ3RoLHU9MDtzPnU7KW4uZihlLHI9YVt1KytdLHRbcl0pO3JldHVybiBlfX0se1wiLi9fYW4tb2JqZWN0XCI6MjcsXCIuL19kZXNjcmlwdG9yc1wiOjMzLFwiLi9fb2JqZWN0LWRwXCI6NTUsXCIuL19vYmplY3Qta2V5c1wiOjYzfV0sNTc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LXBpZVwiKSxvPWUoXCIuL19wcm9wZXJ0eS1kZXNjXCIpLGk9ZShcIi4vX3RvLWlvYmplY3RcIiksYT1lKFwiLi9fdG8tcHJpbWl0aXZlXCIpLHM9ZShcIi4vX2hhc1wiKSx1PWUoXCIuL19pZTgtZG9tLWRlZmluZVwiKSxjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7ci5mPWUoXCIuL19kZXNjcmlwdG9yc1wiKT9jOmZ1bmN0aW9uKGUsdCl7aWYoZT1pKGUpLHQ9YSh0LCEwKSx1KXRyeXtyZXR1cm4gYyhlLHQpfWNhdGNoKHIpe31pZihzKGUsdCkpcmV0dXJuIG8oIW4uZi5jYWxsKGUsdCksZVt0XSl9fSx7XCIuL19kZXNjcmlwdG9yc1wiOjMzLFwiLi9faGFzXCI6NDAsXCIuL19pZTgtZG9tLWRlZmluZVwiOjQzLFwiLi9fb2JqZWN0LXBpZVwiOjY0LFwiLi9fcHJvcGVydHktZGVzY1wiOjY2LFwiLi9fdG8taW9iamVjdFwiOjc1LFwiLi9fdG8tcHJpbWl0aXZlXCI6Nzh9XSw1ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1pb2JqZWN0XCIpLG89ZShcIi4vX29iamVjdC1nb3BuXCIpLmYsaT17fS50b1N0cmluZyxhPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KTpbXSxzPWZ1bmN0aW9uKGUpe3RyeXtyZXR1cm4gbyhlKX1jYXRjaCh0KXtyZXR1cm4gYS5zbGljZSgpfX07dC5leHBvcnRzLmY9ZnVuY3Rpb24oZSl7cmV0dXJuIGEmJlwiW29iamVjdCBXaW5kb3ddXCI9PWkuY2FsbChlKT9zKGUpOm8obihlKSl9fSx7XCIuL19vYmplY3QtZ29wblwiOjU5LFwiLi9fdG8taW9iamVjdFwiOjc1fV0sNTk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWxcIiksbz1lKFwiLi9fZW51bS1idWcta2V5c1wiKS5jb25jYXQoXCJsZW5ndGhcIixcInByb3RvdHlwZVwiKTtyLmY9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXN8fGZ1bmN0aW9uKGUpe3JldHVybiBuKGUsbyl9fSx7XCIuL19lbnVtLWJ1Zy1rZXlzXCI6MzUsXCIuL19vYmplY3Qta2V5cy1pbnRlcm5hbFwiOjYyfV0sNjA6W2Z1bmN0aW9uKGUsdCxyKXtyLmY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc30se31dLDYxOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2hhc1wiKSxvPWUoXCIuL190by1vYmplY3RcIiksaT1lKFwiLi9fc2hhcmVkLWtleVwiKShcIklFX1BST1RPXCIpLGE9T2JqZWN0LnByb3RvdHlwZTt0LmV4cG9ydHM9T2JqZWN0LmdldFByb3RvdHlwZU9mfHxmdW5jdGlvbihlKXtyZXR1cm4gZT1vKGUpLG4oZSxpKT9lW2ldOlwiZnVuY3Rpb25cIj09dHlwZW9mIGUuY29uc3RydWN0b3ImJmUgaW5zdGFuY2VvZiBlLmNvbnN0cnVjdG9yP2UuY29uc3RydWN0b3IucHJvdG90eXBlOmUgaW5zdGFuY2VvZiBPYmplY3Q/YTpudWxsfX0se1wiLi9faGFzXCI6NDAsXCIuL19zaGFyZWQta2V5XCI6NzAsXCIuL190by1vYmplY3RcIjo3N31dLDYyOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2hhc1wiKSxvPWUoXCIuL190by1pb2JqZWN0XCIpLGk9ZShcIi4vX2FycmF5LWluY2x1ZGVzXCIpKCExKSxhPWUoXCIuL19zaGFyZWQta2V5XCIpKFwiSUVfUFJPVE9cIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHIscz1vKGUpLHU9MCxjPVtdO2ZvcihyIGluIHMpciE9YSYmbihzLHIpJiZjLnB1c2gocik7Zm9yKDt0Lmxlbmd0aD51OyluKHMscj10W3UrK10pJiYofmkoYyxyKXx8Yy5wdXNoKHIpKTtyZXR1cm4gY319LHtcIi4vX2FycmF5LWluY2x1ZGVzXCI6MjgsXCIuL19oYXNcIjo0MCxcIi4vX3NoYXJlZC1rZXlcIjo3MCxcIi4vX3RvLWlvYmplY3RcIjo3NX1dLDYzOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX29iamVjdC1rZXlzLWludGVybmFsXCIpLG89ZShcIi4vX2VudW0tYnVnLWtleXNcIik7dC5leHBvcnRzPU9iamVjdC5rZXlzfHxmdW5jdGlvbihlKXtyZXR1cm4gbihlLG8pfX0se1wiLi9fZW51bS1idWcta2V5c1wiOjM1LFwiLi9fb2JqZWN0LWtleXMtaW50ZXJuYWxcIjo2Mn1dLDY0OltmdW5jdGlvbihlLHQscil7ci5mPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlfSx7fV0sNjU6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZXhwb3J0XCIpLG89ZShcIi4vX2NvcmVcIiksaT1lKFwiLi9fZmFpbHNcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUsdCl7dmFyIHI9KG8uT2JqZWN0fHx7fSlbZV18fE9iamVjdFtlXSxhPXt9O2FbZV09dChyKSxuKG4uUytuLkYqaShmdW5jdGlvbigpe3IoMSl9KSxcIk9iamVjdFwiLGEpfX0se1wiLi9fY29yZVwiOjMwLFwiLi9fZXhwb3J0XCI6MzcsXCIuL19mYWlsc1wiOjM4fV0sNjY6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm57ZW51bWVyYWJsZTohKDEmZSksY29uZmlndXJhYmxlOiEoMiZlKSx3cml0YWJsZTohKDQmZSksdmFsdWU6dH19fSx7fV0sNjc6W2Z1bmN0aW9uKGUsdCxyKXt0LmV4cG9ydHM9ZShcIi4vX2hpZGVcIil9LHtcIi4vX2hpZGVcIjo0MX1dLDY4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2lzLW9iamVjdFwiKSxvPWUoXCIuL19hbi1vYmplY3RcIiksaT1mdW5jdGlvbihlLHQpe2lmKG8oZSksIW4odCkmJm51bGwhPT10KXRocm93IFR5cGVFcnJvcih0K1wiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKX07dC5leHBvcnRzPXtzZXQ6T2JqZWN0LnNldFByb3RvdHlwZU9mfHwoXCJfX3Byb3RvX19cImlue30/ZnVuY3Rpb24odCxyLG4pe3RyeXtuPWUoXCIuL19jdHhcIikoRnVuY3Rpb24uY2FsbCxlKFwiLi9fb2JqZWN0LWdvcGRcIikuZihPYmplY3QucHJvdG90eXBlLFwiX19wcm90b19fXCIpLnNldCwyKSxuKHQsW10pLHI9ISh0IGluc3RhbmNlb2YgQXJyYXkpfWNhdGNoKG8pe3I9ITB9cmV0dXJuIGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGkoZSx0KSxyP2UuX19wcm90b19fPXQ6bihlLHQpLGV9fSh7fSwhMSk6dm9pZCAwKSxjaGVjazppfX0se1wiLi9fYW4tb2JqZWN0XCI6MjcsXCIuL19jdHhcIjozMSxcIi4vX2lzLW9iamVjdFwiOjQ2LFwiLi9fb2JqZWN0LWdvcGRcIjo1N31dLDY5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX29iamVjdC1kcFwiKS5mLG89ZShcIi4vX2hhc1wiKSxpPWUoXCIuL193a3NcIikoXCJ0b1N0cmluZ1RhZ1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0LHIpe2UmJiFvKGU9cj9lOmUucHJvdG90eXBlLGkpJiZuKGUsaSx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOnR9KX19LHtcIi4vX2hhc1wiOjQwLFwiLi9fb2JqZWN0LWRwXCI6NTUsXCIuL193a3NcIjo4Mn1dLDcwOltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3NoYXJlZFwiKShcImtleXNcIiksbz1lKFwiLi9fdWlkXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbltlXXx8KG5bZV09byhlKSl9fSx7XCIuL19zaGFyZWRcIjo3MSxcIi4vX3VpZFwiOjc5fV0sNzE6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZ2xvYmFsXCIpLG89XCJfX2NvcmUtanNfc2hhcmVkX19cIixpPW5bb118fChuW29dPXt9KTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIGlbZV18fChpW2VdPXt9KX19LHtcIi4vX2dsb2JhbFwiOjM5fV0sNzI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdG8taW50ZWdlclwiKSxvPWUoXCIuL19kZWZpbmVkXCIpO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCxyKXt2YXIgaSxhLHM9U3RyaW5nKG8odCkpLHU9bihyKSxjPXMubGVuZ3RoO3JldHVybiB1PDB8fHU+PWM/ZT9cIlwiOnZvaWQgMDooaT1zLmNoYXJDb2RlQXQodSksaTw1NTI5Nnx8aT41NjMxOXx8dSsxPT09Y3x8KGE9cy5jaGFyQ29kZUF0KHUrMSkpPDU2MzIwfHxhPjU3MzQzP2U/cy5jaGFyQXQodSk6aTplP3Muc2xpY2UodSx1KzIpOihpLTU1Mjk2PDwxMCkrKGEtNTYzMjApKzY1NTM2KX19fSx7XCIuL19kZWZpbmVkXCI6MzIsXCIuL190by1pbnRlZ2VyXCI6NzR9XSw3MzpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1pbnRlZ2VyXCIpLG89TWF0aC5tYXgsaT1NYXRoLm1pbjt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT1uKGUpLGU8MD9vKGUrdCwwKTppKGUsdCl9fSx7XCIuL190by1pbnRlZ2VyXCI6NzR9XSw3NDpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPU1hdGguY2VpbCxvPU1hdGguZmxvb3I7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBpc05hTihlPStlKT8wOihlPjA/bzpuKShlKX19LHt9XSw3NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19pb2JqZWN0XCIpLG89ZShcIi4vX2RlZmluZWRcIik7dC5leHBvcnRzPWZ1bmN0aW9uKGUpe3JldHVybiBuKG8oZSkpfX0se1wiLi9fZGVmaW5lZFwiOjMyLFwiLi9faW9iamVjdFwiOjQ0fV0sNzY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fdG8taW50ZWdlclwiKSxvPU1hdGgubWluO3QuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gZT4wP28obihlKSw5MDA3MTk5MjU0NzQwOTkxKTowfX0se1wiLi9fdG8taW50ZWdlclwiOjc0fV0sNzc6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZGVmaW5lZFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdChuKGUpKX19LHtcIi4vX2RlZmluZWRcIjozMn1dLDc4OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2lzLW9iamVjdFwiKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSx0KXtpZighbihlKSlyZXR1cm4gZTt2YXIgcixvO2lmKHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mKHI9ZS50b1N0cmluZykmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbztpZihcImZ1bmN0aW9uXCI9PXR5cGVvZihyPWUudmFsdWVPZikmJiFuKG89ci5jYWxsKGUpKSlyZXR1cm4gbztpZighdCYmXCJmdW5jdGlvblwiPT10eXBlb2Yocj1lLnRvU3RyaW5nKSYmIW4obz1yLmNhbGwoZSkpKXJldHVybiBvO3Rocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKX19LHtcIi4vX2lzLW9iamVjdFwiOjQ2fV0sNzk6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj0wLG89TWF0aC5yYW5kb20oKTt0LmV4cG9ydHM9ZnVuY3Rpb24oZSl7cmV0dXJuXCJTeW1ib2woXCIuY29uY2F0KHZvaWQgMD09PWU/XCJcIjplLFwiKV9cIiwoKytuK28pLnRvU3RyaW5nKDM2KSl9fSx7fV0sODA6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fZ2xvYmFsXCIpLG89ZShcIi4vX2NvcmVcIiksaT1lKFwiLi9fbGlicmFyeVwiKSxhPWUoXCIuL193a3MtZXh0XCIpLHM9ZShcIi4vX29iamVjdC1kcFwiKS5mO3QuZXhwb3J0cz1mdW5jdGlvbihlKXt2YXIgdD1vLlN5bWJvbHx8KG8uU3ltYm9sPWk/e306bi5TeW1ib2x8fHt9KTtcIl9cIj09ZS5jaGFyQXQoMCl8fGUgaW4gdHx8cyh0LGUse3ZhbHVlOmEuZihlKX0pfX0se1wiLi9fY29yZVwiOjMwLFwiLi9fZ2xvYmFsXCI6MzksXCIuL19saWJyYXJ5XCI6NTIsXCIuL19vYmplY3QtZHBcIjo1NSxcIi4vX3drcy1leHRcIjo4MX1dLDgxOltmdW5jdGlvbihlLHQscil7ci5mPWUoXCIuL193a3NcIil9LHtcIi4vX3drc1wiOjgyfV0sODI6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9fc2hhcmVkXCIpKFwid2tzXCIpLG89ZShcIi4vX3VpZFwiKSxpPWUoXCIuL19nbG9iYWxcIikuU3ltYm9sLGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaSxzPXQuZXhwb3J0cz1mdW5jdGlvbihlKXtyZXR1cm4gbltlXXx8KG5bZV09YSYmaVtlXXx8KGE/aTpvKShcIlN5bWJvbC5cIitlKSl9O3Muc3RvcmU9bn0se1wiLi9fZ2xvYmFsXCI6MzksXCIuL19zaGFyZWRcIjo3MSxcIi4vX3VpZFwiOjc5fV0sODM6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbj1lKFwiLi9fYWRkLXRvLXVuc2NvcGFibGVzXCIpLG89ZShcIi4vX2l0ZXItc3RlcFwiKSxpPWUoXCIuL19pdGVyYXRvcnNcIiksYT1lKFwiLi9fdG8taW9iamVjdFwiKTt0LmV4cG9ydHM9ZShcIi4vX2l0ZXItZGVmaW5lXCIpKEFycmF5LFwiQXJyYXlcIixmdW5jdGlvbihlLHQpe3RoaXMuX3Q9YShlKSx0aGlzLl9pPTAsdGhpcy5faz10fSxmdW5jdGlvbigpe3ZhciBlPXRoaXMuX3QsdD10aGlzLl9rLHI9dGhpcy5faSsrO3JldHVybiFlfHxyPj1lLmxlbmd0aD8odGhpcy5fdD12b2lkIDAsbygxKSk6XCJrZXlzXCI9PXQ/bygwLHIpOlwidmFsdWVzXCI9PXQ/bygwLGVbcl0pOm8oMCxbcixlW3JdXSl9LFwidmFsdWVzXCIpLGkuQXJndW1lbnRzPWkuQXJyYXksbihcImtleXNcIiksbihcInZhbHVlc1wiKSxuKFwiZW50cmllc1wiKX0se1wiLi9fYWRkLXRvLXVuc2NvcGFibGVzXCI6MjYsXCIuL19pdGVyLWRlZmluZVwiOjQ4LFwiLi9faXRlci1zdGVwXCI6NDksXCIuL19pdGVyYXRvcnNcIjo1MCxcIi4vX3RvLWlvYmplY3RcIjo3NX1dLDg0OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2V4cG9ydFwiKTtuKG4uUyxcIk9iamVjdFwiLHtjcmVhdGU6ZShcIi4vX29iamVjdC1jcmVhdGVcIil9KX0se1wiLi9fZXhwb3J0XCI6MzcsXCIuL19vYmplY3QtY3JlYXRlXCI6NTR9XSw4NTpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL19leHBvcnRcIik7bihuLlMrbi5GKiFlKFwiLi9fZGVzY3JpcHRvcnNcIiksXCJPYmplY3RcIix7ZGVmaW5lUHJvcGVydHk6ZShcIi4vX29iamVjdC1kcFwiKS5mfSl9LHtcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19leHBvcnRcIjozNyxcIi4vX29iamVjdC1kcFwiOjU1fV0sODY6W2Z1bmN0aW9uKGUsdCxyKXt2YXIgbj1lKFwiLi9faXMtb2JqZWN0XCIpLG89ZShcIi4vX21ldGFcIikub25GcmVlemU7ZShcIi4vX29iamVjdC1zYXBcIikoXCJmcmVlemVcIixmdW5jdGlvbihlKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUmJm4odCk/ZShvKHQpKTp0fX0pfSx7XCIuL19pcy1vYmplY3RcIjo0NixcIi4vX21ldGFcIjo1MyxcIi4vX29iamVjdC1zYXBcIjo2NX1dLDg3OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX3RvLW9iamVjdFwiKSxvPWUoXCIuL19vYmplY3QtZ3BvXCIpO2UoXCIuL19vYmplY3Qtc2FwXCIpKFwiZ2V0UHJvdG90eXBlT2ZcIixmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbihlKXtyZXR1cm4gbyhuKGUpKX19KX0se1wiLi9fb2JqZWN0LWdwb1wiOjYxLFwiLi9fb2JqZWN0LXNhcFwiOjY1LFwiLi9fdG8tb2JqZWN0XCI6Nzd9XSw4ODpbZnVuY3Rpb24oZSx0LHIpe3ZhciBuPWUoXCIuL190by1vYmplY3RcIiksbz1lKFwiLi9fb2JqZWN0LWtleXNcIik7ZShcIi4vX29iamVjdC1zYXBcIikoXCJrZXlzXCIsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIG8obihlKSl9fSl9LHtcIi4vX29iamVjdC1rZXlzXCI6NjMsXCIuL19vYmplY3Qtc2FwXCI6NjUsXCIuL190by1vYmplY3RcIjo3N31dLDg5OltmdW5jdGlvbihlLHQscil7dmFyIG49ZShcIi4vX2V4cG9ydFwiKTtuKG4uUyxcIk9iamVjdFwiLHtzZXRQcm90b3R5cGVPZjplKFwiLi9fc2V0LXByb3RvXCIpLnNldH0pfSx7XCIuL19leHBvcnRcIjozNyxcIi4vX3NldC1wcm90b1wiOjY4fV0sOTA6W2Z1bmN0aW9uKGUsdCxyKXt9LHt9XSw5MTpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO3ZhciBuPWUoXCIuL19zdHJpbmctYXRcIikoITApO2UoXCIuL19pdGVyLWRlZmluZVwiKShTdHJpbmcsXCJTdHJpbmdcIixmdW5jdGlvbihlKXt0aGlzLl90PVN0cmluZyhlKSx0aGlzLl9pPTB9LGZ1bmN0aW9uKCl7dmFyIGUsdD10aGlzLl90LHI9dGhpcy5faTtyZXR1cm4gcj49dC5sZW5ndGg/e3ZhbHVlOnZvaWQgMCxkb25lOiEwfTooZT1uKHQsciksdGhpcy5faSs9ZS5sZW5ndGgse3ZhbHVlOmUsZG9uZTohMX0pfSl9LHtcIi4vX2l0ZXItZGVmaW5lXCI6NDgsXCIuL19zdHJpbmctYXRcIjo3Mn1dLDkyOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49ZShcIi4vX2dsb2JhbFwiKSxvPWUoXCIuL19oYXNcIiksaT1lKFwiLi9fZGVzY3JpcHRvcnNcIiksYT1lKFwiLi9fZXhwb3J0XCIpLHM9ZShcIi4vX3JlZGVmaW5lXCIpLHU9ZShcIi4vX21ldGFcIikuS0VZLGM9ZShcIi4vX2ZhaWxzXCIpLGw9ZShcIi4vX3NoYXJlZFwiKSxmPWUoXCIuL19zZXQtdG8tc3RyaW5nLXRhZ1wiKSxkPWUoXCIuL191aWRcIikscD1lKFwiLi9fd2tzXCIpLGg9ZShcIi4vX3drcy1leHRcIikseT1lKFwiLi9fd2tzLWRlZmluZVwiKSxtPWUoXCIuL19rZXlvZlwiKSx2PWUoXCIuL19lbnVtLWtleXNcIiksXz1lKFwiLi9faXMtYXJyYXlcIiksYj1lKFwiLi9fYW4tb2JqZWN0XCIpLGc9ZShcIi4vX3RvLWlvYmplY3RcIiksRT1lKFwiLi9fdG8tcHJpbWl0aXZlXCIpLGo9ZShcIi4vX3Byb3BlcnR5LWRlc2NcIiksdz1lKFwiLi9fb2JqZWN0LWNyZWF0ZVwiKSxPPWUoXCIuL19vYmplY3QtZ29wbi1leHRcIiksTT1lKFwiLi9fb2JqZWN0LWdvcGRcIikseD1lKFwiLi9fb2JqZWN0LWRwXCIpLFA9ZShcIi4vX29iamVjdC1rZXlzXCIpLGs9TS5mLFI9eC5mLFM9Ty5mLFQ9bi5TeW1ib2wsQT1uLkpTT04sTj1BJiZBLnN0cmluZ2lmeSxJPVwicHJvdG90eXBlXCIsVT1wKFwiX2hpZGRlblwiKSxDPXAoXCJ0b1ByaW1pdGl2ZVwiKSxMPXt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLEY9bChcInN5bWJvbC1yZWdpc3RyeVwiKSxCPWwoXCJzeW1ib2xzXCIpLEQ9bChcIm9wLXN5bWJvbHNcIiksRz1PYmplY3RbSV0sSz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBULFk9bi5RT2JqZWN0LHE9IVl8fCFZW0ldfHwhWVtJXS5maW5kQ2hpbGQsej1pJiZjKGZ1bmN0aW9uKCl7cmV0dXJuIDchPXcoUih7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFIodGhpcyxcImFcIix7dmFsdWU6N30pLmF9fSkpLmF9KT9mdW5jdGlvbihlLHQscil7dmFyIG49ayhHLHQpO24mJmRlbGV0ZSBHW3RdLFIoZSx0LHIpLG4mJmUhPT1HJiZSKEcsdCxuKX06UixIPWZ1bmN0aW9uKGUpe3ZhciB0PUJbZV09dyhUW0ldKTtyZXR1cm4gdC5faz1lLHR9LFc9SyYmXCJzeW1ib2xcIj09dHlwZW9mIFQuaXRlcmF0b3I/ZnVuY3Rpb24oZSl7cmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlIGluc3RhbmNlb2YgVH0sSj1mdW5jdGlvbihlLHQscil7cmV0dXJuIGU9PT1HJiZKKEQsdCxyKSxiKGUpLHQ9RSh0LCEwKSxiKHIpLG8oQix0KT8oci5lbnVtZXJhYmxlPyhvKGUsVSkmJmVbVV1bdF0mJihlW1VdW3RdPSExKSxyPXcocix7ZW51bWVyYWJsZTpqKDAsITEpfSkpOihvKGUsVSl8fFIoZSxVLGooMSx7fSkpLGVbVV1bdF09ITApLHooZSx0LHIpKTpSKGUsdCxyKX0sVj1mdW5jdGlvbihlLHQpe2IoZSk7Zm9yKHZhciByLG49dih0PWcodCkpLG89MCxpPW4ubGVuZ3RoO2k+bzspSihlLHI9bltvKytdLHRbcl0pO3JldHVybiBlfSwkPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHZvaWQgMD09PXQ/dyhlKTpWKHcoZSksdCl9LFg9ZnVuY3Rpb24oZSl7dmFyIHQ9TC5jYWxsKHRoaXMsZT1FKGUsITApKTtyZXR1cm4hKHRoaXM9PT1HJiZvKEIsZSkmJiFvKEQsZSkpJiYoISh0fHwhbyh0aGlzLGUpfHwhbyhCLGUpfHxvKHRoaXMsVSkmJnRoaXNbVV1bZV0pfHx0KX0sUT1mdW5jdGlvbihlLHQpe2lmKGU9ZyhlKSx0PUUodCwhMCksZSE9PUd8fCFvKEIsdCl8fG8oRCx0KSl7dmFyIHI9ayhlLHQpO3JldHVybiFyfHwhbyhCLHQpfHxvKGUsVSkmJmVbVV1bdF18fChyLmVudW1lcmFibGU9ITApLHJ9fSxaPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxyPVMoZyhlKSksbj1bXSxpPTA7ci5sZW5ndGg+aTspbyhCLHQ9cltpKytdKXx8dD09VXx8dD09dXx8bi5wdXNoKHQpO3JldHVybiBufSxlZT1mdW5jdGlvbihlKXtmb3IodmFyIHQscj1lPT09RyxuPVMocj9EOmcoZSkpLGk9W10sYT0wO24ubGVuZ3RoPmE7KSFvKEIsdD1uW2ErK10pfHxyJiYhbyhHLHQpfHxpLnB1c2goQlt0XSk7cmV0dXJuIGl9O0t8fChUPWZ1bmN0aW9uKCl7aWYodGhpcyBpbnN0YW5jZW9mIFQpdGhyb3cgVHlwZUVycm9yKFwiU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yIVwiKTt2YXIgZT1kKGFyZ3VtZW50cy5sZW5ndGg+MD9hcmd1bWVudHNbMF06dm9pZCAwKSx0PWZ1bmN0aW9uKHIpe3RoaXM9PT1HJiZ0LmNhbGwoRCxyKSxvKHRoaXMsVSkmJm8odGhpc1tVXSxlKSYmKHRoaXNbVV1bZV09ITEpLHoodGhpcyxlLGooMSxyKSl9O3JldHVybiBpJiZxJiZ6KEcsZSx7Y29uZmlndXJhYmxlOiEwLHNldDp0fSksSChlKX0scyhUW0ldLFwidG9TdHJpbmdcIixmdW5jdGlvbigpe3JldHVybiB0aGlzLl9rfSksTS5mPVEseC5mPUosZShcIi4vX29iamVjdC1nb3BuXCIpLmY9Ty5mPVosZShcIi4vX29iamVjdC1waWVcIikuZj1YLGUoXCIuL19vYmplY3QtZ29wc1wiKS5mPWVlLGkmJiFlKFwiLi9fbGlicmFyeVwiKSYmcyhHLFwicHJvcGVydHlJc0VudW1lcmFibGVcIixYLCEwKSxoLmY9ZnVuY3Rpb24oZSl7cmV0dXJuIEgocChlKSl9KSxhKGEuRythLlcrYS5GKiFLLHtTeW1ib2w6VH0pO2Zvcih2YXIgdGU9XCJoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlc1wiLnNwbGl0KFwiLFwiKSxyZT0wO3RlLmxlbmd0aD5yZTspcCh0ZVtyZSsrXSk7Zm9yKHZhciB0ZT1QKHAuc3RvcmUpLHJlPTA7dGUubGVuZ3RoPnJlOyl5KHRlW3JlKytdKTthKGEuUythLkYqIUssXCJTeW1ib2xcIix7XCJmb3JcIjpmdW5jdGlvbihlKXtyZXR1cm4gbyhGLGUrPVwiXCIpP0ZbZV06RltlXT1UKGUpfSxrZXlGb3I6ZnVuY3Rpb24oZSl7aWYoVyhlKSlyZXR1cm4gbShGLGUpO3Rocm93IFR5cGVFcnJvcihlK1wiIGlzIG5vdCBhIHN5bWJvbCFcIil9LHVzZVNldHRlcjpmdW5jdGlvbigpe3E9ITB9LHVzZVNpbXBsZTpmdW5jdGlvbigpe3E9ITF9fSksYShhLlMrYS5GKiFLLFwiT2JqZWN0XCIse2NyZWF0ZTokLGRlZmluZVByb3BlcnR5OkosZGVmaW5lUHJvcGVydGllczpWLGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpRLGdldE93blByb3BlcnR5TmFtZXM6WixnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ZWV9KSxBJiZhKGEuUythLkYqKCFLfHxjKGZ1bmN0aW9uKCl7dmFyIGU9VCgpO3JldHVyblwiW251bGxdXCIhPU4oW2VdKXx8XCJ7fVwiIT1OKHthOmV9KXx8XCJ7fVwiIT1OKE9iamVjdChlKSl9KSksXCJKU09OXCIse3N0cmluZ2lmeTpmdW5jdGlvbihlKXtpZih2b2lkIDAhPT1lJiYhVyhlKSl7Zm9yKHZhciB0LHIsbj1bZV0sbz0xO2FyZ3VtZW50cy5sZW5ndGg+bzspbi5wdXNoKGFyZ3VtZW50c1tvKytdKTtyZXR1cm4gdD1uWzFdLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQmJihyPXQpLCFyJiZfKHQpfHwodD1mdW5jdGlvbihlLHQpe2lmKHImJih0PXIuY2FsbCh0aGlzLGUsdCkpLCFXKHQpKXJldHVybiB0fSksblsxXT10LE4uYXBwbHkoQSxuKX19fSksVFtJXVtDXXx8ZShcIi4vX2hpZGVcIikoVFtJXSxDLFRbSV0udmFsdWVPZiksZihULFwiU3ltYm9sXCIpLGYoTWF0aCxcIk1hdGhcIiwhMCksZihuLkpTT04sXCJKU09OXCIsITApfSx7XCIuL19hbi1vYmplY3RcIjoyNyxcIi4vX2Rlc2NyaXB0b3JzXCI6MzMsXCIuL19lbnVtLWtleXNcIjozNixcIi4vX2V4cG9ydFwiOjM3LFwiLi9fZmFpbHNcIjozOCxcIi4vX2dsb2JhbFwiOjM5LFwiLi9faGFzXCI6NDAsXCIuL19oaWRlXCI6NDEsXCIuL19pcy1hcnJheVwiOjQ1LFwiLi9fa2V5b2ZcIjo1MSxcIi4vX2xpYnJhcnlcIjo1MixcIi4vX21ldGFcIjo1MyxcIi4vX29iamVjdC1jcmVhdGVcIjo1NCxcIi4vX29iamVjdC1kcFwiOjU1LFwiLi9fb2JqZWN0LWdvcGRcIjo1NyxcIi4vX29iamVjdC1nb3BuXCI6NTksXCIuL19vYmplY3QtZ29wbi1leHRcIjo1OCxcIi4vX29iamVjdC1nb3BzXCI6NjAsXCIuL19vYmplY3Qta2V5c1wiOjYzLFwiLi9fb2JqZWN0LXBpZVwiOjY0LFwiLi9fcHJvcGVydHktZGVzY1wiOjY2LFwiLi9fcmVkZWZpbmVcIjo2NyxcIi4vX3NldC10by1zdHJpbmctdGFnXCI6NjksXCIuL19zaGFyZWRcIjo3MSxcIi4vX3RvLWlvYmplY3RcIjo3NSxcIi4vX3RvLXByaW1pdGl2ZVwiOjc4LFwiLi9fdWlkXCI6NzksXCIuL193a3NcIjo4MixcIi4vX3drcy1kZWZpbmVcIjo4MCxcIi4vX3drcy1leHRcIjo4MX1dLDkzOltmdW5jdGlvbihlLHQscil7ZShcIi4vX3drcy1kZWZpbmVcIikoXCJhc3luY0l0ZXJhdG9yXCIpfSx7XCIuL193a3MtZGVmaW5lXCI6ODB9XSw5NDpbZnVuY3Rpb24oZSx0LHIpe2UoXCIuL193a3MtZGVmaW5lXCIpKFwib2JzZXJ2YWJsZVwiKX0se1wiLi9fd2tzLWRlZmluZVwiOjgwfV0sOTU6W2Z1bmN0aW9uKGUsdCxyKXtlKFwiLi9lczYuYXJyYXkuaXRlcmF0b3JcIik7Zm9yKHZhciBuPWUoXCIuL19nbG9iYWxcIiksbz1lKFwiLi9faGlkZVwiKSxpPWUoXCIuL19pdGVyYXRvcnNcIiksYT1lKFwiLi9fd2tzXCIpKFwidG9TdHJpbmdUYWdcIikscz1bXCJOb2RlTGlzdFwiLFwiRE9NVG9rZW5MaXN0XCIsXCJNZWRpYUxpc3RcIixcIlN0eWxlU2hlZXRMaXN0XCIsXCJDU1NSdWxlTGlzdFwiXSx1PTA7dTw1O3UrKyl7dmFyIGM9c1t1XSxsPW5bY10sZj1sJiZsLnByb3RvdHlwZTtmJiYhZlthXSYmbyhmLGEsYyksaVtjXT1pLkFycmF5fX0se1wiLi9fZ2xvYmFsXCI6MzksXCIuL19oaWRlXCI6NDEsXCIuL19pdGVyYXRvcnNcIjo1MCxcIi4vX3drc1wiOjgyLFwiLi9lczYuYXJyYXkuaXRlcmF0b3JcIjo4M31dLDk2OltmdW5jdGlvbihlLHQscil7ZnVuY3Rpb24gbigpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gbygpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX1mdW5jdGlvbiBpKGUpe2lmKGY9PT1zZXRUaW1lb3V0KXJldHVybiBzZXRUaW1lb3V0KGUsMCk7aWYoKGY9PT1ufHwhZikmJnNldFRpbWVvdXQpcmV0dXJuIGY9c2V0VGltZW91dCxzZXRUaW1lb3V0KGUsMCk7dHJ5e3JldHVybiBmKGUsMCl9Y2F0Y2godCl7dHJ5e3JldHVybiBmLmNhbGwobnVsbCxlLDApfWNhdGNoKHQpe3JldHVybiBmLmNhbGwodGhpcyxlLDApfX19ZnVuY3Rpb24gYShlKXtpZihkPT09Y2xlYXJUaW1lb3V0KXJldHVybiBjbGVhclRpbWVvdXQoZSk7aWYoKGQ9PT1vfHwhZCkmJmNsZWFyVGltZW91dClyZXR1cm4gZD1jbGVhclRpbWVvdXQsY2xlYXJUaW1lb3V0KGUpO3RyeXtyZXR1cm4gZChlKX1jYXRjaCh0KXt0cnl7cmV0dXJuIGQuY2FsbChudWxsLGUpfWNhdGNoKHQpe3JldHVybiBkLmNhbGwodGhpcyxlKX19fWZ1bmN0aW9uIHMoKXttJiZoJiYobT0hMSxoLmxlbmd0aD95PWguY29uY2F0KHkpOnY9LTEseS5sZW5ndGgmJnUoKSl9ZnVuY3Rpb24gdSgpe2lmKCFtKXt2YXIgZT1pKHMpO209ITA7Zm9yKHZhciB0PXkubGVuZ3RoO3Q7KXtmb3IoaD15LHk9W107Kyt2PHQ7KWgmJmhbdl0ucnVuKCk7dj0tMSx0PXkubGVuZ3RofWg9bnVsbCxtPSExLGEoZSl9fWZ1bmN0aW9uIGMoZSx0KXt0aGlzLmZ1bj1lLHRoaXMuYXJyYXk9dH1mdW5jdGlvbiBsKCl7fXZhciBmLGQscD10LmV4cG9ydHM9e307IWZ1bmN0aW9uKCl7dHJ5e2Y9XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0Om59Y2F0Y2goZSl7Zj1ufXRyeXtkPVwiZnVuY3Rpb25cIj09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6b31jYXRjaChlKXtkPW99fSgpO3ZhciBoLHk9W10sbT0hMSx2PS0xO3AubmV4dFRpY2s9ZnVuY3Rpb24oZSl7dmFyIHQ9bmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgtMSk7aWYoYXJndW1lbnRzLmxlbmd0aD4xKWZvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspdFtyLTFdPWFyZ3VtZW50c1tyXTt5LnB1c2gobmV3IGMoZSx0KSksMSE9PXkubGVuZ3RofHxtfHxpKHUpfSxjLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXt0aGlzLmZ1bi5hcHBseShudWxsLHRoaXMuYXJyYXkpfSxwLnRpdGxlPVwiYnJvd3NlclwiLHAuYnJvd3Nlcj0hMCxwLmVudj17fSxwLmFyZ3Y9W10scC52ZXJzaW9uPVwiXCIscC52ZXJzaW9ucz17fSxwLm9uPWwscC5hZGRMaXN0ZW5lcj1sLHAub25jZT1sLHAub2ZmPWwscC5yZW1vdmVMaXN0ZW5lcj1sLHAucmVtb3ZlQWxsTGlzdGVuZXJzPWwscC5lbWl0PWwscC5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfSxwLmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifSxwLmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX0scC51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX0se31dLDk3OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKHIpe3ZhciBuPVwib2JqZWN0XCI9PXR5cGVvZiByP3I6XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJvYmplY3RcIj09dHlwZW9mIHNlbGY/c2VsZjp0aGlzLG89bi5yZWdlbmVyYXRvclJ1bnRpbWUmJk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG4pLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIik+PTAsaT1vJiZuLnJlZ2VuZXJhdG9yUnVudGltZTtpZihuLnJlZ2VuZXJhdG9yUnVudGltZT12b2lkIDAsdC5leHBvcnRzPWUoXCIuL3J1bnRpbWVcIiksbyluLnJlZ2VuZXJhdG9yUnVudGltZT1pO2Vsc2UgdHJ5e2RlbGV0ZSBuLnJlZ2VuZXJhdG9yUnVudGltZX1jYXRjaChhKXtuLnJlZ2VuZXJhdG9yUnVudGltZT12b2lkIDB9fSkuY2FsbCh0aGlzLFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6e30pfSx7XCIuL3J1bnRpbWVcIjo5OH1dLDk4OltmdW5jdGlvbihlLHQscil7KGZ1bmN0aW9uKGUscil7IWZ1bmN0aW9uKHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSx0LHIsbil7dmFyIG89dCYmdC5wcm90b3R5cGUgaW5zdGFuY2VvZiBpP3Q6aSxhPU9iamVjdC5jcmVhdGUoby5wcm90b3R5cGUpLHM9bmV3IHAobnx8W10pO3JldHVybiBhLl9pbnZva2U9bChlLHIscyksYX1mdW5jdGlvbiBvKGUsdCxyKXt0cnl7cmV0dXJue3R5cGU6XCJub3JtYWxcIixhcmc6ZS5jYWxsKHQscil9fWNhdGNoKG4pe3JldHVybnt0eXBlOlwidGhyb3dcIixhcmc6bn19fWZ1bmN0aW9uIGkoKXt9ZnVuY3Rpb24gYSgpe31mdW5jdGlvbiBzKCl7fWZ1bmN0aW9uIHUoZSl7W1wibmV4dFwiLFwidGhyb3dcIixcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2VbdF09ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2ludm9rZSh0LGUpfX0pfWZ1bmN0aW9uIGModCl7ZnVuY3Rpb24gcihlLG4saSxhKXt2YXIgcz1vKHRbZV0sdCxuKTtpZihcInRocm93XCIhPT1zLnR5cGUpe3ZhciB1PXMuYXJnLGM9dS52YWx1ZTtyZXR1cm4gYyYmXCJvYmplY3RcIj09dHlwZW9mIGMmJl8uY2FsbChjLFwiX19hd2FpdFwiKT9Qcm9taXNlLnJlc29sdmUoYy5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKGUpe3IoXCJuZXh0XCIsZSxpLGEpfSxmdW5jdGlvbihlKXtyKFwidGhyb3dcIixlLGksYSl9KTpQcm9taXNlLnJlc29sdmUoYykudGhlbihmdW5jdGlvbihlKXt1LnZhbHVlPWUsaSh1KX0sYSl9YShzLmFyZyl9ZnVuY3Rpb24gbihlLHQpe2Z1bmN0aW9uIG4oKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24obixvKXtyKGUsdCxuLG8pfSl9cmV0dXJuIGk9aT9pLnRoZW4obixuKTpuKCl9XCJvYmplY3RcIj09dHlwZW9mIGUmJmUuZG9tYWluJiYocj1lLmRvbWFpbi5iaW5kKHIpKTt2YXIgaTt0aGlzLl9pbnZva2U9bn1mdW5jdGlvbiBsKGUsdCxyKXt2YXIgbj1PO3JldHVybiBmdW5jdGlvbihpLGEpe2lmKG49PT14KXRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7aWYobj09PVApe2lmKFwidGhyb3dcIj09PWkpdGhyb3cgYTtyZXR1cm4geSgpfWZvcig7Oyl7dmFyIHM9ci5kZWxlZ2F0ZTtpZihzKXtpZihcInJldHVyblwiPT09aXx8XCJ0aHJvd1wiPT09aSYmcy5pdGVyYXRvcltpXT09PW0pe3IuZGVsZWdhdGU9bnVsbDt2YXIgdT1zLml0ZXJhdG9yW1wicmV0dXJuXCJdO2lmKHUpe3ZhciBjPW8odSxzLml0ZXJhdG9yLGEpO2lmKFwidGhyb3dcIj09PWMudHlwZSl7aT1cInRocm93XCIsYT1jLmFyZztjb250aW51ZX19aWYoXCJyZXR1cm5cIj09PWkpY29udGludWV9dmFyIGM9byhzLml0ZXJhdG9yW2ldLHMuaXRlcmF0b3IsYSk7aWYoXCJ0aHJvd1wiPT09Yy50eXBlKXtyLmRlbGVnYXRlPW51bGwsaT1cInRocm93XCIsYT1jLmFyZztjb250aW51ZX1pPVwibmV4dFwiLGE9bTt2YXIgbD1jLmFyZztpZighbC5kb25lKXJldHVybiBuPU0sbDtyW3MucmVzdWx0TmFtZV09bC52YWx1ZSxyLm5leHQ9cy5uZXh0TG9jLHIuZGVsZWdhdGU9bnVsbH1pZihcIm5leHRcIj09PWkpci5zZW50PXIuX3NlbnQ9YTtlbHNlIGlmKFwidGhyb3dcIj09PWkpe2lmKG49PT1PKXRocm93IG49UCxhO3IuZGlzcGF0Y2hFeGNlcHRpb24oYSkmJihpPVwibmV4dFwiLGE9bSl9ZWxzZVwicmV0dXJuXCI9PT1pJiZyLmFicnVwdChcInJldHVyblwiLGEpO249eDt2YXIgYz1vKGUsdCxyKTtpZihcIm5vcm1hbFwiPT09Yy50eXBlKXtuPXIuZG9uZT9QOk07dmFyIGw9e3ZhbHVlOmMuYXJnLGRvbmU6ci5kb25lfTtpZihjLmFyZyE9PWspcmV0dXJuIGw7ci5kZWxlZ2F0ZSYmXCJuZXh0XCI9PT1pJiYoYT1tKX1lbHNlXCJ0aHJvd1wiPT09Yy50eXBlJiYobj1QLGk9XCJ0aHJvd1wiLGE9Yy5hcmcpfX19ZnVuY3Rpb24gZihlKXt2YXIgdD17dHJ5TG9jOmVbMF19OzEgaW4gZSYmKHQuY2F0Y2hMb2M9ZVsxXSksMiBpbiBlJiYodC5maW5hbGx5TG9jPWVbMl0sdC5hZnRlckxvYz1lWzNdKSx0aGlzLnRyeUVudHJpZXMucHVzaCh0KX1mdW5jdGlvbiBkKGUpe3ZhciB0PWUuY29tcGxldGlvbnx8e307dC50eXBlPVwibm9ybWFsXCIsZGVsZXRlIHQuYXJnLGUuY29tcGxldGlvbj10fWZ1bmN0aW9uIHAoZSl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOlwicm9vdFwifV0sZS5mb3JFYWNoKGYsdGhpcyksdGhpcy5yZXNldCghMCl9ZnVuY3Rpb24gaChlKXtpZihlKXt2YXIgdD1lW2ddO2lmKHQpcmV0dXJuIHQuY2FsbChlKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm5leHQpcmV0dXJuIGU7aWYoIWlzTmFOKGUubGVuZ3RoKSl7dmFyIHI9LTEsbj1mdW5jdGlvbiBvKCl7Zm9yKDsrK3I8ZS5sZW5ndGg7KWlmKF8uY2FsbChlLHIpKXJldHVybiBvLnZhbHVlPWVbcl0sby5kb25lPSExLG87cmV0dXJuIG8udmFsdWU9bSxvLmRvbmU9ITAsb307cmV0dXJuIG4ubmV4dD1ufX1yZXR1cm57bmV4dDp5fX1mdW5jdGlvbiB5KCl7cmV0dXJue3ZhbHVlOm0sZG9uZTohMH19dmFyIG0sdj1PYmplY3QucHJvdG90eXBlLF89di5oYXNPd25Qcm9wZXJ0eSxiPVwiZnVuY3Rpb25cIj09dHlwZW9mIFN5bWJvbD9TeW1ib2w6e30sZz1iLml0ZXJhdG9yfHxcIkBAaXRlcmF0b3JcIixFPWIudG9TdHJpbmdUYWd8fFwiQEB0b1N0cmluZ1RhZ1wiLGo9XCJvYmplY3RcIj09dHlwZW9mIHQsdz1yLnJlZ2VuZXJhdG9yUnVudGltZTtpZih3KXJldHVybiB2b2lkKGomJih0LmV4cG9ydHM9dykpO3c9ci5yZWdlbmVyYXRvclJ1bnRpbWU9aj90LmV4cG9ydHM6e30sdy53cmFwPW47dmFyIE89XCJzdXNwZW5kZWRTdGFydFwiLE09XCJzdXNwZW5kZWRZaWVsZFwiLHg9XCJleGVjdXRpbmdcIixQPVwiY29tcGxldGVkXCIsaz17fSxSPXt9O1JbZ109ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc307dmFyIFM9T2JqZWN0LmdldFByb3RvdHlwZU9mLFQ9UyYmUyhTKGgoW10pKSk7VCYmVCE9PXYmJl8uY2FsbChULGcpJiYoUj1UKTt2YXIgQT1zLnByb3RvdHlwZT1pLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKFIpO2EucHJvdG90eXBlPUEuY29uc3RydWN0b3I9cyxzLmNvbnN0cnVjdG9yPWEsc1tFXT1hLmRpc3BsYXlOYW1lPVwiR2VuZXJhdG9yRnVuY3Rpb25cIix3LmlzR2VuZXJhdG9yRnVuY3Rpb249ZnVuY3Rpb24oZSl7dmFyIHQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZSYmZS5jb25zdHJ1Y3RvcjtyZXR1cm4hIXQmJih0PT09YXx8XCJHZW5lcmF0b3JGdW5jdGlvblwiPT09KHQuZGlzcGxheU5hbWV8fHQubmFtZSkpO1xyXG59LHcubWFyaz1mdW5jdGlvbihlKXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZihlLHMpOihlLl9fcHJvdG9fXz1zLEUgaW4gZXx8KGVbRV09XCJHZW5lcmF0b3JGdW5jdGlvblwiKSksZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShBKSxlfSx3LmF3cmFwPWZ1bmN0aW9uKGUpe3JldHVybntfX2F3YWl0OmV9fSx1KGMucHJvdG90eXBlKSx3LkFzeW5jSXRlcmF0b3I9Yyx3LmFzeW5jPWZ1bmN0aW9uKGUsdCxyLG8pe3ZhciBpPW5ldyBjKG4oZSx0LHIsbykpO3JldHVybiB3LmlzR2VuZXJhdG9yRnVuY3Rpb24odCk/aTppLm5leHQoKS50aGVuKGZ1bmN0aW9uKGUpe3JldHVybiBlLmRvbmU/ZS52YWx1ZTppLm5leHQoKX0pfSx1KEEpLEFbRV09XCJHZW5lcmF0b3JcIixBLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJbb2JqZWN0IEdlbmVyYXRvcl1cIn0sdy5rZXlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiBlKXQucHVzaChyKTtyZXR1cm4gdC5yZXZlcnNlKCksZnVuY3Rpb24gbigpe2Zvcig7dC5sZW5ndGg7KXt2YXIgcj10LnBvcCgpO2lmKHIgaW4gZSlyZXR1cm4gbi52YWx1ZT1yLG4uZG9uZT0hMSxufXJldHVybiBuLmRvbmU9ITAsbn19LHcudmFsdWVzPWgscC5wcm90b3R5cGU9e2NvbnN0cnVjdG9yOnAscmVzZXQ6ZnVuY3Rpb24oZSl7aWYodGhpcy5wcmV2PTAsdGhpcy5uZXh0PTAsdGhpcy5zZW50PXRoaXMuX3NlbnQ9bSx0aGlzLmRvbmU9ITEsdGhpcy5kZWxlZ2F0ZT1udWxsLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKGQpLCFlKWZvcih2YXIgdCBpbiB0aGlzKVwidFwiPT09dC5jaGFyQXQoMCkmJl8uY2FsbCh0aGlzLHQpJiYhaXNOYU4oK3Quc2xpY2UoMSkpJiYodGhpc1t0XT1tKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgZT10aGlzLnRyeUVudHJpZXNbMF0sdD1lLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQodCxuKXtyZXR1cm4gaS50eXBlPVwidGhyb3dcIixpLmFyZz1lLHIubmV4dD10LCEhbn1pZih0aGlzLmRvbmUpdGhyb3cgZTtmb3IodmFyIHI9dGhpcyxuPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtuPj0wOy0tbil7dmFyIG89dGhpcy50cnlFbnRyaWVzW25dLGk9by5jb21wbGV0aW9uO2lmKFwicm9vdFwiPT09by50cnlMb2MpcmV0dXJuIHQoXCJlbmRcIik7aWYoby50cnlMb2M8PXRoaXMucHJldil7dmFyIGE9Xy5jYWxsKG8sXCJjYXRjaExvY1wiKSxzPV8uY2FsbChvLFwiZmluYWxseUxvY1wiKTtpZihhJiZzKXtpZih0aGlzLnByZXY8by5jYXRjaExvYylyZXR1cm4gdChvLmNhdGNoTG9jLCEwKTtpZih0aGlzLnByZXY8by5maW5hbGx5TG9jKXJldHVybiB0KG8uZmluYWxseUxvYyl9ZWxzZSBpZihhKXtpZih0aGlzLnByZXY8by5jYXRjaExvYylyZXR1cm4gdChvLmNhdGNoTG9jLCEwKX1lbHNle2lmKCFzKXRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO2lmKHRoaXMucHJldjxvLmZpbmFsbHlMb2MpcmV0dXJuIHQoby5maW5hbGx5TG9jKX19fX0sYWJydXB0OmZ1bmN0aW9uKGUsdCl7Zm9yKHZhciByPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtyPj0wOy0tcil7dmFyIG49dGhpcy50cnlFbnRyaWVzW3JdO2lmKG4udHJ5TG9jPD10aGlzLnByZXYmJl8uY2FsbChuLFwiZmluYWxseUxvY1wiKSYmdGhpcy5wcmV2PG4uZmluYWxseUxvYyl7dmFyIG89bjticmVha319byYmKFwiYnJlYWtcIj09PWV8fFwiY29udGludWVcIj09PWUpJiZvLnRyeUxvYzw9dCYmdDw9by5maW5hbGx5TG9jJiYobz1udWxsKTt2YXIgaT1vP28uY29tcGxldGlvbjp7fTtyZXR1cm4gaS50eXBlPWUsaS5hcmc9dCxvP3RoaXMubmV4dD1vLmZpbmFsbHlMb2M6dGhpcy5jb21wbGV0ZShpKSxrfSxjb21wbGV0ZTpmdW5jdGlvbihlLHQpe2lmKFwidGhyb3dcIj09PWUudHlwZSl0aHJvdyBlLmFyZztcImJyZWFrXCI9PT1lLnR5cGV8fFwiY29udGludWVcIj09PWUudHlwZT90aGlzLm5leHQ9ZS5hcmc6XCJyZXR1cm5cIj09PWUudHlwZT8odGhpcy5ydmFsPWUuYXJnLHRoaXMubmV4dD1cImVuZFwiKTpcIm5vcm1hbFwiPT09ZS50eXBlJiZ0JiYodGhpcy5uZXh0PXQpfSxmaW5pc2g6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTt0Pj0wOy0tdCl7dmFyIHI9dGhpcy50cnlFbnRyaWVzW3RdO2lmKHIuZmluYWxseUxvYz09PWUpcmV0dXJuIHRoaXMuY29tcGxldGUoci5jb21wbGV0aW9uLHIuYWZ0ZXJMb2MpLGQociksa319LFwiY2F0Y2hcIjpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO3Q+PTA7LS10KXt2YXIgcj10aGlzLnRyeUVudHJpZXNbdF07aWYoci50cnlMb2M9PT1lKXt2YXIgbj1yLmNvbXBsZXRpb247aWYoXCJ0aHJvd1wiPT09bi50eXBlKXt2YXIgbz1uLmFyZztkKHIpfXJldHVybiBvfX10aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIil9LGRlbGVnYXRlWWllbGQ6ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLmRlbGVnYXRlPXtpdGVyYXRvcjpoKGUpLHJlc3VsdE5hbWU6dCxuZXh0TG9jOnJ9LGt9fX0oXCJvYmplY3RcIj09dHlwZW9mIHI/cjpcIm9iamVjdFwiPT10eXBlb2Ygd2luZG93P3dpbmRvdzpcIm9iamVjdFwiPT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMpfSkuY2FsbCh0aGlzLGUoXCJfcHJvY2Vzc1wiKSxcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOlwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93Ont9KX0se19wcm9jZXNzOjk2fV0sOTk6W2Z1bmN0aW9uKHQscixuKXshZnVuY3Rpb24odCxuKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlJiZlLmFtZD9lKFtdLG4pOlwidW5kZWZpbmVkXCIhPXR5cGVvZiByJiZyLmV4cG9ydHM/ci5leHBvcnRzPW4oKTp0LnR2ND1uKCl9KHRoaXMsZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUpe3JldHVybiBlbmNvZGVVUkkoZSkucmVwbGFjZSgvJTI1WzAtOV1bMC05XS9nLGZ1bmN0aW9uKGUpe3JldHVyblwiJVwiK2Uuc3Vic3RyaW5nKDMpfSl9ZnVuY3Rpb24gdCh0KXt2YXIgcj1cIlwiO2RbdC5jaGFyQXQoMCldJiYocj10LmNoYXJBdCgwKSx0PXQuc3Vic3RyaW5nKDEpKTt2YXIgbj1cIlwiLG89XCJcIixpPSEwLGE9ITEscz0hMTtcIitcIj09PXI/aT0hMTpcIi5cIj09PXI/KG89XCIuXCIsbj1cIi5cIik6XCIvXCI9PT1yPyhvPVwiL1wiLG49XCIvXCIpOlwiI1wiPT09cj8obz1cIiNcIixpPSExKTpcIjtcIj09PXI/KG89XCI7XCIsbj1cIjtcIixhPSEwLHM9ITApOlwiP1wiPT09cj8obz1cIj9cIixuPVwiJlwiLGE9ITApOlwiJlwiPT09ciYmKG89XCImXCIsbj1cIiZcIixhPSEwKTtmb3IodmFyIHU9W10sYz10LnNwbGl0KFwiLFwiKSxsPVtdLGY9e30saD0wO2g8Yy5sZW5ndGg7aCsrKXt2YXIgeT1jW2hdLG09bnVsbDtpZih5LmluZGV4T2YoXCI6XCIpIT09LTEpe3ZhciB2PXkuc3BsaXQoXCI6XCIpO3k9dlswXSxtPXBhcnNlSW50KHZbMV0sMTApfWZvcih2YXIgXz17fTtwW3kuY2hhckF0KHkubGVuZ3RoLTEpXTspX1t5LmNoYXJBdCh5Lmxlbmd0aC0xKV09ITAseT15LnN1YnN0cmluZygwLHkubGVuZ3RoLTEpO3ZhciBiPXt0cnVuY2F0ZTptLG5hbWU6eSxzdWZmaWNlczpffTtsLnB1c2goYiksZlt5XT1iLHUucHVzaCh5KX12YXIgZz1mdW5jdGlvbih0KXtmb3IodmFyIHI9XCJcIix1PTAsYz0wO2M8bC5sZW5ndGg7YysrKXt2YXIgZj1sW2NdLGQ9dChmLm5hbWUpO2lmKG51bGw9PT1kfHx2b2lkIDA9PT1kfHxBcnJheS5pc0FycmF5KGQpJiYwPT09ZC5sZW5ndGh8fFwib2JqZWN0XCI9PXR5cGVvZiBkJiYwPT09T2JqZWN0LmtleXMoZCkubGVuZ3RoKXUrKztlbHNlIGlmKHIrPWM9PT11P286bnx8XCIsXCIsQXJyYXkuaXNBcnJheShkKSl7YSYmKHIrPWYubmFtZStcIj1cIik7Zm9yKHZhciBwPTA7cDxkLmxlbmd0aDtwKyspcD4wJiYocis9Zi5zdWZmaWNlc1tcIipcIl0/bnx8XCIsXCI6XCIsXCIsZi5zdWZmaWNlc1tcIipcIl0mJmEmJihyKz1mLm5hbWUrXCI9XCIpKSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudChkW3BdKS5yZXBsYWNlKC8hL2csXCIlMjFcIik6ZShkW3BdKX1lbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBkKXthJiYhZi5zdWZmaWNlc1tcIipcIl0mJihyKz1mLm5hbWUrXCI9XCIpO3ZhciBoPSEwO2Zvcih2YXIgeSBpbiBkKWh8fChyKz1mLnN1ZmZpY2VzW1wiKlwiXT9ufHxcIixcIjpcIixcIiksaD0hMSxyKz1pP2VuY29kZVVSSUNvbXBvbmVudCh5KS5yZXBsYWNlKC8hL2csXCIlMjFcIik6ZSh5KSxyKz1mLnN1ZmZpY2VzW1wiKlwiXT9cIj1cIjpcIixcIixyKz1pP2VuY29kZVVSSUNvbXBvbmVudChkW3ldKS5yZXBsYWNlKC8hL2csXCIlMjFcIik6ZShkW3ldKX1lbHNlIGEmJihyKz1mLm5hbWUscyYmXCJcIj09PWR8fChyKz1cIj1cIikpLG51bGwhPWYudHJ1bmNhdGUmJihkPWQuc3Vic3RyaW5nKDAsZi50cnVuY2F0ZSkpLHIrPWk/ZW5jb2RlVVJJQ29tcG9uZW50KGQpLnJlcGxhY2UoLyEvZyxcIiUyMVwiKTplKGQpfXJldHVybiByfTtyZXR1cm4gZy52YXJOYW1lcz11LHtwcmVmaXg6byxzdWJzdGl0dXRpb246Z319ZnVuY3Rpb24gcihlKXtpZighKHRoaXMgaW5zdGFuY2VvZiByKSlyZXR1cm4gbmV3IHIoZSk7Zm9yKHZhciBuPWUuc3BsaXQoXCJ7XCIpLG89W24uc2hpZnQoKV0saT1bXSxhPVtdLHM9W107bi5sZW5ndGg+MDspe3ZhciB1PW4uc2hpZnQoKSxjPXUuc3BsaXQoXCJ9XCIpWzBdLGw9dS5zdWJzdHJpbmcoYy5sZW5ndGgrMSksZj10KGMpO2EucHVzaChmLnN1YnN0aXR1dGlvbiksaS5wdXNoKGYucHJlZml4KSxvLnB1c2gobCkscz1zLmNvbmNhdChmLnN1YnN0aXR1dGlvbi52YXJOYW1lcyl9dGhpcy5maWxsPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1vWzBdLHI9MDtyPGEubGVuZ3RoO3IrKyl7dmFyIG49YVtyXTt0Kz1uKGUpLHQrPW9bcisxXX1yZXR1cm4gdH0sdGhpcy52YXJOYW1lcz1zLHRoaXMudGVtcGxhdGU9ZX1mdW5jdGlvbiBuKGUsdCl7aWYoZT09PXQpcmV0dXJuITA7aWYoZSYmdCYmXCJvYmplY3RcIj09dHlwZW9mIGUmJlwib2JqZWN0XCI9PXR5cGVvZiB0KXtpZihBcnJheS5pc0FycmF5KGUpIT09QXJyYXkuaXNBcnJheSh0KSlyZXR1cm4hMTtpZihBcnJheS5pc0FycmF5KGUpKXtpZihlLmxlbmd0aCE9PXQubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKWlmKCFuKGVbcl0sdFtyXSkpcmV0dXJuITF9ZWxzZXt2YXIgbztmb3IobyBpbiBlKWlmKHZvaWQgMD09PXRbb10mJnZvaWQgMCE9PWVbb10pcmV0dXJuITE7Zm9yKG8gaW4gdClpZih2b2lkIDA9PT1lW29dJiZ2b2lkIDAhPT10W29dKXJldHVybiExO2ZvcihvIGluIGUpaWYoIW4oZVtvXSx0W29dKSlyZXR1cm4hMX1yZXR1cm4hMH1yZXR1cm4hMX1mdW5jdGlvbiBvKGUpe3ZhciB0PVN0cmluZyhlKS5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLFwiXCIpLm1hdGNoKC9eKFteOlxcLz8jXSs6KT8oXFwvXFwvKD86W146QF0qKD86OlteOkBdKik/QCk/KChbXjpcXC8/I10qKSg/OjooXFxkKikpPykpPyhbXj8jXSopKFxcP1teI10qKT8oI1tcXHNcXFNdKik/Lyk7cmV0dXJuIHQ/e2hyZWY6dFswXXx8XCJcIixwcm90b2NvbDp0WzFdfHxcIlwiLGF1dGhvcml0eTp0WzJdfHxcIlwiLGhvc3Q6dFszXXx8XCJcIixob3N0bmFtZTp0WzRdfHxcIlwiLHBvcnQ6dFs1XXx8XCJcIixwYXRobmFtZTp0WzZdfHxcIlwiLHNlYXJjaDp0WzddfHxcIlwiLGhhc2g6dFs4XXx8XCJcIn06bnVsbH1mdW5jdGlvbiBpKGUsdCl7ZnVuY3Rpb24gcihlKXt2YXIgdD1bXTtyZXR1cm4gZS5yZXBsYWNlKC9eKFxcLlxcLj8oXFwvfCQpKSsvLFwiXCIpLnJlcGxhY2UoL1xcLyhcXC4oXFwvfCQpKSsvZyxcIi9cIikucmVwbGFjZSgvXFwvXFwuXFwuJC8sXCIvLi4vXCIpLnJlcGxhY2UoL1xcLz9bXlxcL10qL2csZnVuY3Rpb24oZSl7XCIvLi5cIj09PWU/dC5wb3AoKTp0LnB1c2goZSl9KSx0LmpvaW4oXCJcIikucmVwbGFjZSgvXlxcLy8sXCIvXCI9PT1lLmNoYXJBdCgwKT9cIi9cIjpcIlwiKX1yZXR1cm4gdD1vKHR8fFwiXCIpLGU9byhlfHxcIlwiKSx0JiZlPyh0LnByb3RvY29sfHxlLnByb3RvY29sKSsodC5wcm90b2NvbHx8dC5hdXRob3JpdHk/dC5hdXRob3JpdHk6ZS5hdXRob3JpdHkpK3IodC5wcm90b2NvbHx8dC5hdXRob3JpdHl8fFwiL1wiPT09dC5wYXRobmFtZS5jaGFyQXQoMCk/dC5wYXRobmFtZTp0LnBhdGhuYW1lPyhlLmF1dGhvcml0eSYmIWUucGF0aG5hbWU/XCIvXCI6XCJcIikrZS5wYXRobmFtZS5zbGljZSgwLGUucGF0aG5hbWUubGFzdEluZGV4T2YoXCIvXCIpKzEpK3QucGF0aG5hbWU6ZS5wYXRobmFtZSkrKHQucHJvdG9jb2x8fHQuYXV0aG9yaXR5fHx0LnBhdGhuYW1lP3Quc2VhcmNoOnQuc2VhcmNofHxlLnNlYXJjaCkrdC5oYXNoOm51bGx9ZnVuY3Rpb24gYShlKXtyZXR1cm4gZS5zcGxpdChcIiNcIilbMF19ZnVuY3Rpb24gcyhlLHQpe2lmKGUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKHZvaWQgMD09PXQ/dD1lLmlkOlwic3RyaW5nXCI9PXR5cGVvZiBlLmlkJiYodD1pKHQsZS5pZCksZS5pZD10KSxBcnJheS5pc0FycmF5KGUpKWZvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXMoZVtyXSx0KTtlbHNle1wic3RyaW5nXCI9PXR5cGVvZiBlLiRyZWYmJihlLiRyZWY9aSh0LGUuJHJlZikpO2Zvcih2YXIgbiBpbiBlKVwiZW51bVwiIT09biYmcyhlW25dLHQpfX1mdW5jdGlvbiB1KGUpe2U9ZXx8XCJlblwiO3ZhciB0PUVbZV07cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciByPXRbZS5jb2RlXXx8Z1tlLmNvZGVdO2lmKFwic3RyaW5nXCIhPXR5cGVvZiByKXJldHVyblwiVW5rbm93biBlcnJvciBjb2RlIFwiK2UuY29kZStcIjogXCIrSlNPTi5zdHJpbmdpZnkoZS5tZXNzYWdlUGFyYW1zKTt2YXIgbj1lLnBhcmFtcztyZXR1cm4gci5yZXBsYWNlKC9cXHsoW157fV0qKVxcfS9nLGZ1bmN0aW9uKGUsdCl7dmFyIHI9blt0XTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygcnx8XCJudW1iZXJcIj09dHlwZW9mIHI/cjplfSl9fWZ1bmN0aW9uIGMoZSx0LHIsbixvKXtpZihFcnJvci5jYWxsKHRoaXMpLHZvaWQgMD09PWUpdGhyb3cgbmV3IEVycm9yKFwiTm8gZXJyb3IgY29kZSBzdXBwbGllZDogXCIrbik7dGhpcy5tZXNzYWdlPVwiXCIsdGhpcy5wYXJhbXM9dCx0aGlzLmNvZGU9ZSx0aGlzLmRhdGFQYXRoPXJ8fFwiXCIsdGhpcy5zY2hlbWFQYXRoPW58fFwiXCIsdGhpcy5zdWJFcnJvcnM9b3x8bnVsbDt2YXIgaT1uZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtpZih0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZSwhdGhpcy5zdGFjayl0cnl7dGhyb3cgaX1jYXRjaChpKXt0aGlzLnN0YWNrPWkuc3RhY2t8fGkuc3RhY2t0cmFjZX19ZnVuY3Rpb24gbChlLHQpe2lmKHQuc3Vic3RyaW5nKDAsZS5sZW5ndGgpPT09ZSl7dmFyIHI9dC5zdWJzdHJpbmcoZS5sZW5ndGgpO2lmKHQubGVuZ3RoPjAmJlwiL1wiPT09dC5jaGFyQXQoZS5sZW5ndGgtMSl8fFwiI1wiPT09ci5jaGFyQXQoMCl8fFwiP1wiPT09ci5jaGFyQXQoMCkpcmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gZihlKXt2YXIgdCxyLG49bmV3IGgsbz17c2V0RXJyb3JSZXBvcnRlcjpmdW5jdGlvbihlKXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgZT90aGlzLmxhbmd1YWdlKGUpOihyPWUsITApfSxhZGRGb3JtYXQ6ZnVuY3Rpb24oKXtuLmFkZEZvcm1hdC5hcHBseShuLGFyZ3VtZW50cyl9LGxhbmd1YWdlOmZ1bmN0aW9uKGUpe3JldHVybiBlPyhFW2VdfHwoZT1lLnNwbGl0KFwiLVwiKVswXSksISFFW2VdJiYodD1lLGUpKTp0fSxhZGRMYW5ndWFnZTpmdW5jdGlvbihlLHQpe3ZhciByO2ZvcihyIGluIHYpdFtyXSYmIXRbdltyXV0mJih0W3Zbcl1dPXRbcl0pO3ZhciBuPWUuc3BsaXQoXCItXCIpWzBdO2lmKEVbbl0pe0VbZV09T2JqZWN0LmNyZWF0ZShFW25dKTtmb3IociBpbiB0KVwidW5kZWZpbmVkXCI9PXR5cGVvZiBFW25dW3JdJiYoRVtuXVtyXT10W3JdKSxFW2VdW3JdPXRbcl19ZWxzZSBFW2VdPXQsRVtuXT10O3JldHVybiB0aGlzfSxmcmVzaEFwaTpmdW5jdGlvbihlKXt2YXIgdD1mKCk7cmV0dXJuIGUmJnQubGFuZ3VhZ2UoZSksdH0sdmFsaWRhdGU6ZnVuY3Rpb24oZSxvLGksYSl7dmFyIHM9dSh0KSxjPXI/ZnVuY3Rpb24oZSx0LG4pe3JldHVybiByKGUsdCxuKXx8cyhlLHQsbil9OnMsbD1uZXcgaChuLCghMSksYyxpLGEpO1wic3RyaW5nXCI9PXR5cGVvZiBvJiYobz17JHJlZjpvfSksbC5hZGRTY2hlbWEoXCJcIixvKTt2YXIgZj1sLnZhbGlkYXRlQWxsKGUsbyxudWxsLG51bGwsXCJcIik7cmV0dXJuIWYmJmEmJihmPWwuYmFuVW5rbm93blByb3BlcnRpZXMoZSxvKSksdGhpcy5lcnJvcj1mLHRoaXMubWlzc2luZz1sLm1pc3NpbmcsdGhpcy52YWxpZD1udWxsPT09Zix0aGlzLnZhbGlkfSx2YWxpZGF0ZVJlc3VsdDpmdW5jdGlvbigpe3ZhciBlPXt9O3JldHVybiB0aGlzLnZhbGlkYXRlLmFwcGx5KGUsYXJndW1lbnRzKSxlfSx2YWxpZGF0ZU11bHRpcGxlOmZ1bmN0aW9uKGUsbyxpLGEpe3ZhciBzPXUodCksYz1yP2Z1bmN0aW9uKGUsdCxuKXtyZXR1cm4gcihlLHQsbil8fHMoZSx0LG4pfTpzLGw9bmV3IGgobiwoITApLGMsaSxhKTtcInN0cmluZ1wiPT10eXBlb2YgbyYmKG89eyRyZWY6b30pLGwuYWRkU2NoZW1hKFwiXCIsbyksbC52YWxpZGF0ZUFsbChlLG8sbnVsbCxudWxsLFwiXCIpLGEmJmwuYmFuVW5rbm93blByb3BlcnRpZXMoZSxvKTt2YXIgZj17fTtyZXR1cm4gZi5lcnJvcnM9bC5lcnJvcnMsZi5taXNzaW5nPWwubWlzc2luZyxmLnZhbGlkPTA9PT1mLmVycm9ycy5sZW5ndGgsZn0sYWRkU2NoZW1hOmZ1bmN0aW9uKCl7cmV0dXJuIG4uYWRkU2NoZW1hLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0U2NoZW1hOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZ2V0U2NoZW1hLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0U2NoZW1hTWFwOmZ1bmN0aW9uKCl7cmV0dXJuIG4uZ2V0U2NoZW1hTWFwLmFwcGx5KG4sYXJndW1lbnRzKX0sZ2V0U2NoZW1hVXJpczpmdW5jdGlvbigpe3JldHVybiBuLmdldFNjaGVtYVVyaXMuYXBwbHkobixhcmd1bWVudHMpfSxnZXRNaXNzaW5nVXJpczpmdW5jdGlvbigpe3JldHVybiBuLmdldE1pc3NpbmdVcmlzLmFwcGx5KG4sYXJndW1lbnRzKX0sZHJvcFNjaGVtYXM6ZnVuY3Rpb24oKXtuLmRyb3BTY2hlbWFzLmFwcGx5KG4sYXJndW1lbnRzKX0sZGVmaW5lS2V5d29yZDpmdW5jdGlvbigpe24uZGVmaW5lS2V5d29yZC5hcHBseShuLGFyZ3VtZW50cyl9LGRlZmluZUVycm9yOmZ1bmN0aW9uKGUsdCxyKXtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8IS9eW0EtWl0rKF9bQS1aXSspKiQvLnRlc3QoZSkpdGhyb3cgbmV3IEVycm9yKFwiQ29kZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgaW4gVVBQRVJfQ0FTRV9XSVRIX1VOREVSU0NPUkVTXCIpO2lmKFwibnVtYmVyXCIhPXR5cGVvZiB0fHx0JTEhPT0wfHx0PDFlNCl0aHJvdyBuZXcgRXJyb3IoXCJDb2RlIG51bWJlciBtdXN0IGJlIGFuIGludGVnZXIgPiAxMDAwMFwiKTtpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgdltlXSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBhbHJlYWR5IGRlZmluZWQ6IFwiK2UrXCIgYXMgXCIrdltlXSk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIF9bdF0pdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgY29kZSBhbHJlYWR5IHVzZWQ6IFwiK19bdF0rXCIgYXMgXCIrdCk7dltlXT10LF9bdF09ZSxnW2VdPWdbdF09cjtmb3IodmFyIG4gaW4gRSl7dmFyIG89RVtuXTtvW2VdJiYob1t0XT1vW3RdfHxvW2VdKX19LHJlc2V0OmZ1bmN0aW9uKCl7bi5yZXNldCgpLHRoaXMuZXJyb3I9bnVsbCx0aGlzLm1pc3Npbmc9W10sdGhpcy52YWxpZD0hMH0sbWlzc2luZzpbXSxlcnJvcjpudWxsLHZhbGlkOiEwLG5vcm1TY2hlbWE6cyxyZXNvbHZlVXJsOmksZ2V0RG9jdW1lbnRVcmk6YSxlcnJvckNvZGVzOnZ9O3JldHVybiBvLmxhbmd1YWdlKGV8fFwiZW5cIiksb31PYmplY3Qua2V5c3x8KE9iamVjdC5rZXlzPWZ1bmN0aW9uKCl7dmFyIGU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSx0PSF7dG9TdHJpbmc6bnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoXCJ0b1N0cmluZ1wiKSxyPVtcInRvU3RyaW5nXCIsXCJ0b0xvY2FsZVN0cmluZ1wiLFwidmFsdWVPZlwiLFwiaGFzT3duUHJvcGVydHlcIixcImlzUHJvdG90eXBlT2ZcIixcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsXCJjb25zdHJ1Y3RvclwiXSxuPXIubGVuZ3RoO3JldHVybiBmdW5jdGlvbihvKXtpZihcIm9iamVjdFwiIT10eXBlb2YgbyYmXCJmdW5jdGlvblwiIT10eXBlb2Ygb3x8bnVsbD09PW8pdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdC5rZXlzIGNhbGxlZCBvbiBub24tb2JqZWN0XCIpO3ZhciBpPVtdO2Zvcih2YXIgYSBpbiBvKWUuY2FsbChvLGEpJiZpLnB1c2goYSk7aWYodClmb3IodmFyIHM9MDtzPG47cysrKWUuY2FsbChvLHJbc10pJiZpLnB1c2gocltzXSk7cmV0dXJuIGl9fSgpKSxPYmplY3QuY3JlYXRlfHwoT2JqZWN0LmNyZWF0ZT1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXt9cmV0dXJuIGZ1bmN0aW9uKHQpe2lmKDEhPT1hcmd1bWVudHMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk9iamVjdC5jcmVhdGUgaW1wbGVtZW50YXRpb24gb25seSBhY2NlcHRzIG9uZSBwYXJhbWV0ZXIuXCIpO3JldHVybiBlLnByb3RvdHlwZT10LG5ldyBlfX0oKSksQXJyYXkuaXNBcnJheXx8KEFycmF5LmlzQXJyYXk9ZnVuY3Rpb24oZSl7cmV0dXJuXCJbb2JqZWN0IEFycmF5XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpfSksQXJyYXkucHJvdG90eXBlLmluZGV4T2Z8fChBcnJheS5wcm90b3R5cGUuaW5kZXhPZj1mdW5jdGlvbihlKXtpZihudWxsPT09dGhpcyl0aHJvdyBuZXcgVHlwZUVycm9yO3ZhciB0PU9iamVjdCh0aGlzKSxyPXQubGVuZ3RoPj4+MDtpZigwPT09cilyZXR1cm4tMTt2YXIgbj0wO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSYmKG49TnVtYmVyKGFyZ3VtZW50c1sxXSksbiE9PW4/bj0wOjAhPT1uJiZuIT09MS8wJiZuIT09LSgxLzApJiYobj0obj4wfHwtMSkqTWF0aC5mbG9vcihNYXRoLmFicyhuKSkpKSxuPj1yKXJldHVybi0xO2Zvcih2YXIgbz1uPj0wP246TWF0aC5tYXgoci1NYXRoLmFicyhuKSwwKTtvPHI7bysrKWlmKG8gaW4gdCYmdFtvXT09PWUpcmV0dXJuIG87cmV0dXJuLTF9KSxPYmplY3QuaXNGcm96ZW58fChPYmplY3QuaXNGcm96ZW49ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVwidHY0X3Rlc3RfZnJvemVuX2tleVwiO2UuaGFzT3duUHJvcGVydHkodCk7KXQrPU1hdGgucmFuZG9tKCk7dHJ5e3JldHVybiBlW3RdPSEwLGRlbGV0ZSBlW3RdLCExfWNhdGNoKHIpe3JldHVybiEwfX0pO3ZhciBkPXtcIitcIjohMCxcIiNcIjohMCxcIi5cIjohMCxcIi9cIjohMCxcIjtcIjohMCxcIj9cIjohMCxcIiZcIjohMH0scD17XCIqXCI6ITB9O3IucHJvdG90eXBlPXt0b1N0cmluZzpmdW5jdGlvbigpe3JldHVybiB0aGlzLnRlbXBsYXRlfSxmaWxsRnJvbU9iamVjdDpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uKHQpe3JldHVybiBlW3RdfSl9fTt2YXIgaD1mdW5jdGlvbihlLHQscixuLG8pe2lmKHRoaXMubWlzc2luZz1bXSx0aGlzLm1pc3NpbmdNYXA9e30sdGhpcy5mb3JtYXRWYWxpZGF0b3JzPWU/T2JqZWN0LmNyZWF0ZShlLmZvcm1hdFZhbGlkYXRvcnMpOnt9LHRoaXMuc2NoZW1hcz1lP09iamVjdC5jcmVhdGUoZS5zY2hlbWFzKTp7fSx0aGlzLmNvbGxlY3RNdWx0aXBsZT10LHRoaXMuZXJyb3JzPVtdLHRoaXMuaGFuZGxlRXJyb3I9dD90aGlzLmNvbGxlY3RFcnJvcjp0aGlzLnJldHVybkVycm9yLG4mJih0aGlzLmNoZWNrUmVjdXJzaXZlPSEwLHRoaXMuc2Nhbm5lZD1bXSx0aGlzLnNjYW5uZWRGcm96ZW49W10sdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcz1bXSx0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzPVtdLHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleT1cInR2NF92YWxpZGF0aW9uX2lkXCIsdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5PVwidHY0X3ZhbGlkYXRpb25fZXJyb3JzX2lkXCIpLG8mJih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXM9ITAsdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSksdGhpcy5lcnJvclJlcG9ydGVyPXJ8fHUoXCJlblwiKSxcInN0cmluZ1wiPT10eXBlb2YgdGhpcy5lcnJvclJlcG9ydGVyKXRocm93IG5ldyBFcnJvcihcImRlYnVnXCIpO2lmKHRoaXMuZGVmaW5lZEtleXdvcmRzPXt9LGUpZm9yKHZhciBpIGluIGUuZGVmaW5lZEtleXdvcmRzKXRoaXMuZGVmaW5lZEtleXdvcmRzW2ldPWUuZGVmaW5lZEtleXdvcmRzW2ldLnNsaWNlKDApfTtoLnByb3RvdHlwZS5kZWZpbmVLZXl3b3JkPWZ1bmN0aW9uKGUsdCl7dGhpcy5kZWZpbmVkS2V5d29yZHNbZV09dGhpcy5kZWZpbmVkS2V5d29yZHNbZV18fFtdLHRoaXMuZGVmaW5lZEtleXdvcmRzW2VdLnB1c2godCl9LGgucHJvdG90eXBlLmNyZWF0ZUVycm9yPWZ1bmN0aW9uKGUsdCxyLG4sbyxpLGEpe3ZhciBzPW5ldyBjKGUsdCxyLG4sbyk7cmV0dXJuIHMubWVzc2FnZT10aGlzLmVycm9yUmVwb3J0ZXIocyxpLGEpLHN9LGgucHJvdG90eXBlLnJldHVybkVycm9yPWZ1bmN0aW9uKGUpe3JldHVybiBlfSxoLnByb3RvdHlwZS5jb2xsZWN0RXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJnRoaXMuZXJyb3JzLnB1c2goZSksbnVsbH0saC5wcm90b3R5cGUucHJlZml4RXJyb3JzPWZ1bmN0aW9uKGUsdCxyKXtmb3IodmFyIG49ZTtuPHRoaXMuZXJyb3JzLmxlbmd0aDtuKyspdGhpcy5lcnJvcnNbbl09dGhpcy5lcnJvcnNbbl0ucHJlZml4V2l0aCh0LHIpO3JldHVybiB0aGlzfSxoLnByb3RvdHlwZS5iYW5Vbmtub3duUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2Zvcih2YXIgciBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKXt2YXIgbj10aGlzLmNyZWF0ZUVycm9yKHYuVU5LTk9XTl9QUk9QRVJUWSx7cGF0aDpyfSxyLFwiXCIsbnVsbCxlLHQpLG89dGhpcy5oYW5kbGVFcnJvcihuKTtpZihvKXJldHVybiBvfXJldHVybiBudWxsfSxoLnByb3RvdHlwZS5hZGRGb3JtYXQ9ZnVuY3Rpb24oZSx0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZSl7Zm9yKHZhciByIGluIGUpdGhpcy5hZGRGb3JtYXQocixlW3JdKTtyZXR1cm4gdGhpc310aGlzLmZvcm1hdFZhbGlkYXRvcnNbZV09dH0saC5wcm90b3R5cGUucmVzb2x2ZVJlZnM9ZnVuY3Rpb24oZSx0KXtpZih2b2lkIDAhPT1lLiRyZWYpe2lmKHQ9dHx8e30sdFtlLiRyZWZdKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuQ0lSQ1VMQVJfUkVGRVJFTkNFLHt1cmxzOk9iamVjdC5rZXlzKHQpLmpvaW4oXCIsIFwiKX0sXCJcIixcIlwiLG51bGwsdm9pZCAwLGUpO3RbZS4kcmVmXT0hMCxlPXRoaXMuZ2V0U2NoZW1hKGUuJHJlZix0KX1yZXR1cm4gZX0saC5wcm90b3R5cGUuZ2V0U2NoZW1hPWZ1bmN0aW9uKGUsdCl7dmFyIHI7aWYodm9pZCAwIT09dGhpcy5zY2hlbWFzW2VdKXJldHVybiByPXRoaXMuc2NoZW1hc1tlXSx0aGlzLnJlc29sdmVSZWZzKHIsdCk7dmFyIG49ZSxvPVwiXCI7aWYoZS5pbmRleE9mKFwiI1wiKSE9PS0xJiYobz1lLnN1YnN0cmluZyhlLmluZGV4T2YoXCIjXCIpKzEpLG49ZS5zdWJzdHJpbmcoMCxlLmluZGV4T2YoXCIjXCIpKSksXCJvYmplY3RcIj09dHlwZW9mIHRoaXMuc2NoZW1hc1tuXSl7cj10aGlzLnNjaGVtYXNbbl07dmFyIGk9ZGVjb2RlVVJJQ29tcG9uZW50KG8pO2lmKFwiXCI9PT1pKXJldHVybiB0aGlzLnJlc29sdmVSZWZzKHIsdCk7aWYoXCIvXCIhPT1pLmNoYXJBdCgwKSlyZXR1cm47Zm9yKHZhciBhPWkuc3BsaXQoXCIvXCIpLnNsaWNlKDEpLHM9MDtzPGEubGVuZ3RoO3MrKyl7dmFyIHU9YVtzXS5yZXBsYWNlKC9+MS9nLFwiL1wiKS5yZXBsYWNlKC9+MC9nLFwiflwiKTtpZih2b2lkIDA9PT1yW3VdKXtyPXZvaWQgMDticmVha31yPXJbdV19aWYodm9pZCAwIT09cilyZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhyLHQpfXZvaWQgMD09PXRoaXMubWlzc2luZ1tuXSYmKHRoaXMubWlzc2luZy5wdXNoKG4pLHRoaXMubWlzc2luZ1tuXT1uLHRoaXMubWlzc2luZ01hcFtuXT1uKX0saC5wcm90b3R5cGUuc2VhcmNoU2NoZW1hcz1mdW5jdGlvbihlLHQpe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspdGhpcy5zZWFyY2hTY2hlbWFzKGVbcl0sdCk7ZWxzZSBpZihlJiZcIm9iamVjdFwiPT10eXBlb2YgZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUuaWQmJmwodCxlLmlkKSYmdm9pZCAwPT09dGhpcy5zY2hlbWFzW2UuaWRdJiYodGhpcy5zY2hlbWFzW2UuaWRdPWUpO2Zvcih2YXIgbiBpbiBlKWlmKFwiZW51bVwiIT09bilpZihcIm9iamVjdFwiPT10eXBlb2YgZVtuXSl0aGlzLnNlYXJjaFNjaGVtYXMoZVtuXSx0KTtlbHNlIGlmKFwiJHJlZlwiPT09bil7dmFyIG89YShlW25dKTtvJiZ2b2lkIDA9PT10aGlzLnNjaGVtYXNbb10mJnZvaWQgMD09PXRoaXMubWlzc2luZ01hcFtvXSYmKHRoaXMubWlzc2luZ01hcFtvXT1vKX19fSxoLnByb3RvdHlwZS5hZGRTY2hlbWE9ZnVuY3Rpb24oZSx0KXtpZihcInN0cmluZ1wiIT10eXBlb2YgZXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIHQpe2lmKFwib2JqZWN0XCIhPXR5cGVvZiBlfHxcInN0cmluZ1wiIT10eXBlb2YgZS5pZClyZXR1cm47dD1lLGU9dC5pZH1lPT09YShlKStcIiNcIiYmKGU9YShlKSksdGhpcy5zY2hlbWFzW2VdPXQsZGVsZXRlIHRoaXMubWlzc2luZ01hcFtlXSxzKHQsZSksdGhpcy5zZWFyY2hTY2hlbWFzKHQsZSl9LGgucHJvdG90eXBlLmdldFNjaGVtYU1hcD1mdW5jdGlvbigpe3ZhciBlPXt9O2Zvcih2YXIgdCBpbiB0aGlzLnNjaGVtYXMpZVt0XT10aGlzLnNjaGVtYXNbdF07cmV0dXJuIGV9LGgucHJvdG90eXBlLmdldFNjaGVtYVVyaXM9ZnVuY3Rpb24oZSl7dmFyIHQ9W107Zm9yKHZhciByIGluIHRoaXMuc2NoZW1hcyllJiYhZS50ZXN0KHIpfHx0LnB1c2gocik7cmV0dXJuIHR9LGgucHJvdG90eXBlLmdldE1pc3NpbmdVcmlzPWZ1bmN0aW9uKGUpe3ZhciB0PVtdO2Zvcih2YXIgciBpbiB0aGlzLm1pc3NpbmdNYXApZSYmIWUudGVzdChyKXx8dC5wdXNoKHIpO3JldHVybiB0fSxoLnByb3RvdHlwZS5kcm9wU2NoZW1hcz1mdW5jdGlvbigpe3RoaXMuc2NoZW1hcz17fSx0aGlzLnJlc2V0KCl9LGgucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7dGhpcy5taXNzaW5nPVtdLHRoaXMubWlzc2luZ01hcD17fSx0aGlzLmVycm9ycz1bXX0saC5wcm90b3R5cGUudmFsaWRhdGVBbGw9ZnVuY3Rpb24oZSx0LHIsbixvKXt2YXIgaTtpZih0PXRoaXMucmVzb2x2ZVJlZnModCksIXQpcmV0dXJuIG51bGw7aWYodCBpbnN0YW5jZW9mIGMpcmV0dXJuIHRoaXMuZXJyb3JzLnB1c2godCksdDt2YXIgYSxzPXRoaXMuZXJyb3JzLmxlbmd0aCx1PW51bGwsbD1udWxsO2lmKHRoaXMuY2hlY2tSZWN1cnNpdmUmJmUmJlwib2JqZWN0XCI9PXR5cGVvZiBlKXtpZihpPSF0aGlzLnNjYW5uZWQubGVuZ3RoLGVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSl7dmFyIGY9ZVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmluZGV4T2YodCk7aWYoZiE9PS0xKXJldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5jb25jYXQoZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW2ZdKSxudWxsfWlmKE9iamVjdC5pc0Zyb3plbihlKSYmKGE9dGhpcy5zY2FubmVkRnJvemVuLmluZGV4T2YoZSksYSE9PS0xKSl7dmFyIGQ9dGhpcy5zY2FubmVkRnJvemVuU2NoZW1hc1thXS5pbmRleE9mKHQpO2lmKGQhPT0tMSlyZXR1cm4gdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuY29uY2F0KHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbYV1bZF0pLG51bGx9aWYodGhpcy5zY2FubmVkLnB1c2goZSksT2JqZWN0LmlzRnJvemVuKGUpKWE9PT0tMSYmKGE9dGhpcy5zY2FubmVkRnJvemVuLmxlbmd0aCx0aGlzLnNjYW5uZWRGcm96ZW4ucHVzaChlKSx0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzLnB1c2goW10pKSx1PXRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbYV0ubGVuZ3RoLHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbYV1bdV09dCx0aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2FdW3VdPVtdO2Vsc2V7aWYoIWVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSl0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5LHt2YWx1ZTpbXSxjb25maWd1cmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXkse3ZhbHVlOltdLGNvbmZpZ3VyYWJsZTohMH0pfWNhdGNoKHApe2VbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XT1bXSxlW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV09W119bD1lW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0ubGVuZ3RoLGVbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XVtsXT10LGVbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtsXT1bXX19dmFyIGg9dGhpcy5lcnJvcnMubGVuZ3RoLHk9dGhpcy52YWxpZGF0ZUJhc2ljKGUsdCxvKXx8dGhpcy52YWxpZGF0ZU51bWVyaWMoZSx0LG8pfHx0aGlzLnZhbGlkYXRlU3RyaW5nKGUsdCxvKXx8dGhpcy52YWxpZGF0ZUFycmF5KGUsdCxvKXx8dGhpcy52YWxpZGF0ZU9iamVjdChlLHQsbyl8fHRoaXMudmFsaWRhdGVDb21iaW5hdGlvbnMoZSx0LG8pfHx0aGlzLnZhbGlkYXRlSHlwZXJtZWRpYShlLHQsbyl8fHRoaXMudmFsaWRhdGVGb3JtYXQoZSx0LG8pfHx0aGlzLnZhbGlkYXRlRGVmaW5lZEtleXdvcmRzKGUsdCxvKXx8bnVsbDtpZihpKXtmb3IoO3RoaXMuc2Nhbm5lZC5sZW5ndGg7KXt2YXIgbT10aGlzLnNjYW5uZWQucG9wKCk7ZGVsZXRlIG1bdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XX10aGlzLnNjYW5uZWRGcm96ZW49W10sdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcz1bXX1pZih5fHxoIT09dGhpcy5lcnJvcnMubGVuZ3RoKWZvcig7ciYmci5sZW5ndGh8fG4mJm4ubGVuZ3RoOyl7dmFyIHY9ciYmci5sZW5ndGg/XCJcIityLnBvcCgpOm51bGwsXz1uJiZuLmxlbmd0aD9cIlwiK24ucG9wKCk6bnVsbDt5JiYoeT15LnByZWZpeFdpdGgodixfKSksdGhpcy5wcmVmaXhFcnJvcnMoaCx2LF8pfXJldHVybiBudWxsIT09dT90aGlzLnNjYW5uZWRGcm96ZW5WYWxpZGF0aW9uRXJyb3JzW2FdW3VdPXRoaXMuZXJyb3JzLnNsaWNlKHMpOm51bGwhPT1sJiYoZVt0aGlzLnZhbGlkYXRpb25FcnJvcnNLZXldW2xdPXRoaXMuZXJyb3JzLnNsaWNlKHMpKSx0aGlzLmhhbmRsZUVycm9yKHkpfSxoLnByb3RvdHlwZS52YWxpZGF0ZUZvcm1hdD1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0LmZvcm1hdHx8IXRoaXMuZm9ybWF0VmFsaWRhdG9yc1t0LmZvcm1hdF0pcmV0dXJuIG51bGw7dmFyIHI9dGhpcy5mb3JtYXRWYWxpZGF0b3JzW3QuZm9ybWF0XS5jYWxsKG51bGwsZSx0KTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2Ygcnx8XCJudW1iZXJcIj09dHlwZW9mIHI/dGhpcy5jcmVhdGVFcnJvcih2LkZPUk1BVF9DVVNUT00se21lc3NhZ2U6cn0sXCJcIixcIi9mb3JtYXRcIixudWxsLGUsdCk6ciYmXCJvYmplY3RcIj09dHlwZW9mIHI/dGhpcy5jcmVhdGVFcnJvcih2LkZPUk1BVF9DVVNUT00se21lc3NhZ2U6ci5tZXNzYWdlfHxcIj9cIn0sci5kYXRhUGF0aHx8XCJcIixyLnNjaGVtYVBhdGh8fFwiL2Zvcm1hdFwiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZURlZmluZWRLZXl3b3Jkcz1mdW5jdGlvbihlLHQscil7Zm9yKHZhciBuIGluIHRoaXMuZGVmaW5lZEtleXdvcmRzKWlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0W25dKWZvcih2YXIgbz10aGlzLmRlZmluZWRLZXl3b3Jkc1tuXSxpPTA7aTxvLmxlbmd0aDtpKyspe3ZhciBhPW9baV0scz1hKGUsdFtuXSx0LHIpO2lmKFwic3RyaW5nXCI9PXR5cGVvZiBzfHxcIm51bWJlclwiPT10eXBlb2YgcylyZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2LktFWVdPUkRfQ1VTVE9NLHtrZXk6bixtZXNzYWdlOnN9LFwiXCIsXCJcIixudWxsLGUsdCkucHJlZml4V2l0aChudWxsLG4pO2lmKHMmJlwib2JqZWN0XCI9PXR5cGVvZiBzKXt2YXIgdT1zLmNvZGU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHUpe2lmKCF2W3VdKXRocm93IG5ldyBFcnJvcihcIlVuZGVmaW5lZCBlcnJvciBjb2RlICh1c2UgZGVmaW5lRXJyb3IpOiBcIit1KTt1PXZbdV19ZWxzZVwibnVtYmVyXCIhPXR5cGVvZiB1JiYodT12LktFWVdPUkRfQ1VTVE9NKTt2YXIgYz1cIm9iamVjdFwiPT10eXBlb2Ygcy5tZXNzYWdlP3MubWVzc2FnZTp7a2V5Om4sbWVzc2FnZTpzLm1lc3NhZ2V8fFwiP1wifSxsPXMuc2NoZW1hUGF0aHx8XCIvXCIrbi5yZXBsYWNlKC9+L2csXCJ+MFwiKS5yZXBsYWNlKC9cXC8vZyxcIn4xXCIpO3JldHVybiB0aGlzLmNyZWF0ZUVycm9yKHUsYyxzLmRhdGFQYXRofHxudWxsLGwsbnVsbCxlLHQpfX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVCYXNpYz1mdW5jdGlvbihlLHQscil7dmFyIG47cmV0dXJuKG49dGhpcy52YWxpZGF0ZVR5cGUoZSx0LHIpKT9uLnByZWZpeFdpdGgobnVsbCxcInR5cGVcIik6KG49dGhpcy52YWxpZGF0ZUVudW0oZSx0LHIpKT9uLnByZWZpeFdpdGgobnVsbCxcInR5cGVcIik6bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVUeXBlPWZ1bmN0aW9uKGUsdCl7aWYodm9pZCAwPT09dC50eXBlKXJldHVybiBudWxsO3ZhciByPXR5cGVvZiBlO251bGw9PT1lP3I9XCJudWxsXCI6QXJyYXkuaXNBcnJheShlKSYmKHI9XCJhcnJheVwiKTt2YXIgbj10LnR5cGU7QXJyYXkuaXNBcnJheShuKXx8KG49W25dKTtmb3IodmFyIG89MDtvPG4ubGVuZ3RoO28rKyl7dmFyIGk9bltvXTtpZihpPT09cnx8XCJpbnRlZ2VyXCI9PT1pJiZcIm51bWJlclwiPT09ciYmZSUxPT09MClyZXR1cm4gbnVsbH1yZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih2LklOVkFMSURfVFlQRSx7dHlwZTpyLGV4cGVjdGVkOm4uam9pbihcIi9cIil9LFwiXCIsXCJcIixudWxsLGUsdCl9LGgucHJvdG90eXBlLnZhbGlkYXRlRW51bT1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMD09PXRbXCJlbnVtXCJdKXJldHVybiBudWxsO2Zvcih2YXIgcj0wO3I8dFtcImVudW1cIl0ubGVuZ3RoO3IrKyl7dmFyIG89dFtcImVudW1cIl1bcl07aWYobihlLG8pKXJldHVybiBudWxsfXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuRU5VTV9NSVNNQVRDSCx7dmFsdWU6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEpTT04/SlNPTi5zdHJpbmdpZnkoZSk6ZX0sXCJcIixcIlwiLG51bGwsZSx0KX0saC5wcm90b3R5cGUudmFsaWRhdGVOdW1lcmljPWZ1bmN0aW9uKGUsdCxyKXtyZXR1cm4gdGhpcy52YWxpZGF0ZU11bHRpcGxlT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTWluTWF4KGUsdCxyKXx8dGhpcy52YWxpZGF0ZU5hTihlLHQscil8fG51bGx9O3ZhciB5PU1hdGgucG93KDIsLTUxKSxtPTEteTtoLnByb3RvdHlwZS52YWxpZGF0ZU11bHRpcGxlT2Y9ZnVuY3Rpb24oZSx0KXt2YXIgcj10Lm11bHRpcGxlT2Z8fHQuZGl2aXNpYmxlQnk7aWYodm9pZCAwPT09cilyZXR1cm4gbnVsbDtpZihcIm51bWJlclwiPT10eXBlb2YgZSl7dmFyIG49ZS9yJTE7aWYobj49eSYmbjxtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01VTFRJUExFX09GLHt2YWx1ZTplLG11bHRpcGxlT2Y6cn0sXCJcIixcIlwiLG51bGwsZSx0KX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVNaW5NYXg9ZnVuY3Rpb24oZSx0KXtpZihcIm51bWJlclwiIT10eXBlb2YgZSlyZXR1cm4gbnVsbDtpZih2b2lkIDAhPT10Lm1pbmltdW0pe2lmKGU8dC5taW5pbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01JTklNVU0se3ZhbHVlOmUsbWluaW11bTp0Lm1pbmltdW19LFwiXCIsXCIvbWluaW11bVwiLG51bGwsZSx0KTtpZih0LmV4Y2x1c2l2ZU1pbmltdW0mJmU9PT10Lm1pbmltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUlOSU1VTV9FWENMVVNJVkUse3ZhbHVlOmUsbWluaW11bTp0Lm1pbmltdW19LFwiXCIsXCIvZXhjbHVzaXZlTWluaW11bVwiLG51bGwsZSx0KX1pZih2b2lkIDAhPT10Lm1heGltdW0pe2lmKGU+dC5tYXhpbXVtKXJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHYuTlVNQkVSX01BWElNVU0se3ZhbHVlOmUsbWF4aW11bTp0Lm1heGltdW19LFwiXCIsXCIvbWF4aW11bVwiLG51bGwsZSx0KTtpZih0LmV4Y2x1c2l2ZU1heGltdW0mJmU9PT10Lm1heGltdW0pcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Iodi5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUse3ZhbHVlOmUsbWF4aW11bTp0Lm1heGltdW19LFwiXCIsXCIvZXhjbHVzaXZlTWF4aW11bVwiLG51bGwsZSx0KX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVOYU49ZnVuY3Rpb24oZSx0KXtyZXR1cm5cIm51bWJlclwiIT10eXBlb2YgZT9udWxsOmlzTmFOKGUpPT09ITB8fGU9PT0xLzB8fGU9PT0tKDEvMCk/dGhpcy5jcmVhdGVFcnJvcih2Lk5VTUJFUl9OT1RfQV9OVU1CRVIse3ZhbHVlOmV9LFwiXCIsXCIvdHlwZVwiLG51bGwsZSx0KTpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZVN0cmluZz1mdW5jdGlvbihlLHQscil7cmV0dXJuIHRoaXMudmFsaWRhdGVTdHJpbmdMZW5ndGgoZSx0LHIpfHx0aGlzLnZhbGlkYXRlU3RyaW5nUGF0dGVybihlLHQscil8fG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nTGVuZ3RoPWZ1bmN0aW9uKGUsdCl7cmV0dXJuXCJzdHJpbmdcIiE9dHlwZW9mIGU/bnVsbDp2b2lkIDAhPT10Lm1pbkxlbmd0aCYmZS5sZW5ndGg8dC5taW5MZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2LlNUUklOR19MRU5HVEhfU0hPUlQse2xlbmd0aDplLmxlbmd0aCxtaW5pbXVtOnQubWluTGVuZ3RofSxcIlwiLFwiL21pbkxlbmd0aFwiLG51bGwsZSx0KTp2b2lkIDAhPT10Lm1heExlbmd0aCYmZS5sZW5ndGg+dC5tYXhMZW5ndGg/dGhpcy5jcmVhdGVFcnJvcih2LlNUUklOR19MRU5HVEhfTE9ORyx7bGVuZ3RoOmUubGVuZ3RoLG1heGltdW06dC5tYXhMZW5ndGh9LFwiXCIsXCIvbWF4TGVuZ3RoXCIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nUGF0dGVybj1mdW5jdGlvbihlLHQpe2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlfHxcInN0cmluZ1wiIT10eXBlb2YgdC5wYXR0ZXJuJiYhKHQucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkpcmV0dXJuIG51bGw7dmFyIHI7aWYodC5wYXR0ZXJuIGluc3RhbmNlb2YgUmVnRXhwKXI9dC5wYXR0ZXJuO2Vsc2V7dmFyIG4sbz1cIlwiLGk9dC5wYXR0ZXJuLm1hdGNoKC9eXFwvKC4rKVxcLyhbaW1nXSopJC8pO2k/KG49aVsxXSxvPWlbMl0pOm49dC5wYXR0ZXJuLHI9bmV3IFJlZ0V4cChuLG8pfXJldHVybiByLnRlc3QoZSk/bnVsbDp0aGlzLmNyZWF0ZUVycm9yKHYuU1RSSU5HX1BBVFRFUk4se3BhdHRlcm46dC5wYXR0ZXJufSxcIlwiLFwiL3BhdHRlcm5cIixudWxsLGUsdCl9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXk9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP3RoaXMudmFsaWRhdGVBcnJheUxlbmd0aChlLHQscil8fHRoaXMudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGUsdCxyKXx8dGhpcy52YWxpZGF0ZUFycmF5SXRlbXMoZSx0LHIpfHxudWxsOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlMZW5ndGg9ZnVuY3Rpb24oZSx0KXt2YXIgcjtyZXR1cm4gdm9pZCAwIT09dC5taW5JdGVtcyYmZS5sZW5ndGg8dC5taW5JdGVtcyYmKHI9dGhpcy5jcmVhdGVFcnJvcih2LkFSUkFZX0xFTkdUSF9TSE9SVCx7bGVuZ3RoOmUubGVuZ3RoLG1pbmltdW06dC5taW5JdGVtc30sXCJcIixcIi9taW5JdGVtc1wiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOnZvaWQgMCE9PXQubWF4SXRlbXMmJmUubGVuZ3RoPnQubWF4SXRlbXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9MRU5HVEhfTE9ORyx7bGVuZ3RoOmUubGVuZ3RoLG1heGltdW06dC5tYXhJdGVtc30sXCJcIixcIi9tYXhJdGVtc1wiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKHIpKT9yOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcz1mdW5jdGlvbihlLHQpe2lmKHQudW5pcXVlSXRlbXMpZm9yKHZhciByPTA7cjxlLmxlbmd0aDtyKyspZm9yKHZhciBvPXIrMTtvPGUubGVuZ3RoO28rKylpZihuKGVbcl0sZVtvXSkpe3ZhciBpPXRoaXMuY3JlYXRlRXJyb3Iodi5BUlJBWV9VTklRVUUse21hdGNoMTpyLG1hdGNoMjpvfSxcIlwiLFwiL3VuaXF1ZUl0ZW1zXCIsbnVsbCxlLHQpO2lmKHRoaXMuaGFuZGxlRXJyb3IoaSkpcmV0dXJuIGl9cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlJdGVtcz1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5pdGVtcylyZXR1cm4gbnVsbDt2YXIgbixvO2lmKEFycmF5LmlzQXJyYXkodC5pdGVtcykpe2ZvcihvPTA7bzxlLmxlbmd0aDtvKyspaWYobzx0Lml0ZW1zLmxlbmd0aCl7aWYobj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5pdGVtc1tvXSxbb10sW1wiaXRlbXNcIixvXSxyK1wiL1wiK28pKXJldHVybiBufWVsc2UgaWYodm9pZCAwIT09dC5hZGRpdGlvbmFsSXRlbXMpaWYoXCJib29sZWFuXCI9PXR5cGVvZiB0LmFkZGl0aW9uYWxJdGVtcyl7aWYoIXQuYWRkaXRpb25hbEl0ZW1zJiYobj10aGlzLmNyZWF0ZUVycm9yKHYuQVJSQVlfQURESVRJT05BTF9JVEVNUyx7fSxcIi9cIitvLFwiL2FkZGl0aW9uYWxJdGVtc1wiLG51bGwsZSx0KSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbEl0ZW1zLFtvXSxbXCJhZGRpdGlvbmFsSXRlbXNcIl0scitcIi9cIitvKSlyZXR1cm4gbn1lbHNlIGZvcihvPTA7bzxlLmxlbmd0aDtvKyspaWYobj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5pdGVtcyxbb10sW1wiaXRlbXNcIl0scitcIi9cIitvKSlyZXR1cm4gbjtyZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3Q9ZnVuY3Rpb24oZSx0LHIpe3JldHVyblwib2JqZWN0XCIhPXR5cGVvZiBlfHxudWxsPT09ZXx8QXJyYXkuaXNBcnJheShlKT9udWxsOnRoaXMudmFsaWRhdGVPYmplY3RNaW5NYXhQcm9wZXJ0aWVzKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcyhlLHQscil8fHRoaXMudmFsaWRhdGVPYmplY3RQcm9wZXJ0aWVzKGUsdCxyKXx8dGhpcy52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyhlLHQscil8fG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0TWluTWF4UHJvcGVydGllcz1mdW5jdGlvbihlLHQpe3ZhciByLG49T2JqZWN0LmtleXMoZSk7cmV0dXJuIHZvaWQgMCE9PXQubWluUHJvcGVydGllcyYmbi5sZW5ndGg8dC5taW5Qcm9wZXJ0aWVzJiYocj10aGlzLmNyZWF0ZUVycm9yKHYuT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTSx7cHJvcGVydHlDb3VudDpuLmxlbmd0aCxtaW5pbXVtOnQubWluUHJvcGVydGllc30sXCJcIixcIi9taW5Qcm9wZXJ0aWVzXCIsbnVsbCxlLHQpLHRoaXMuaGFuZGxlRXJyb3IocikpP3I6dm9pZCAwIT09dC5tYXhQcm9wZXJ0aWVzJiZuLmxlbmd0aD50Lm1heFByb3BlcnRpZXMmJihyPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNLHtwcm9wZXJ0eUNvdW50Om4ubGVuZ3RoLG1heGltdW06dC5tYXhQcm9wZXJ0aWVzfSxcIlwiLFwiL21heFByb3BlcnRpZXNcIixudWxsLGUsdCksdGhpcy5oYW5kbGVFcnJvcihyKSk/cjpudWxsfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcz1mdW5jdGlvbihlLHQpe2lmKHZvaWQgMCE9PXQucmVxdWlyZWQpZm9yKHZhciByPTA7cjx0LnJlcXVpcmVkLmxlbmd0aDtyKyspe3ZhciBuPXQucmVxdWlyZWRbcl07aWYodm9pZCAwPT09ZVtuXSl7dmFyIG89dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9SRVFVSVJFRCx7a2V5Om59LFwiXCIsXCIvcmVxdWlyZWQvXCIrcixudWxsLGUsdCk7aWYodGhpcy5oYW5kbGVFcnJvcihvKSlyZXR1cm4gb319cmV0dXJuIG51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcz1mdW5jdGlvbihlLHQscil7dmFyIG47Zm9yKHZhciBvIGluIGUpe3ZhciBpPXIrXCIvXCIrby5yZXBsYWNlKC9+L2csXCJ+MFwiKS5yZXBsYWNlKC9cXC8vZyxcIn4xXCIpLGE9ITE7aWYodm9pZCAwIT09dC5wcm9wZXJ0aWVzJiZ2b2lkIDAhPT10LnByb3BlcnRpZXNbb10mJihhPSEwLG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQucHJvcGVydGllc1tvXSxbb10sW1wicHJvcGVydGllc1wiLG9dLGkpKSlyZXR1cm4gbjtpZih2b2lkIDAhPT10LnBhdHRlcm5Qcm9wZXJ0aWVzKWZvcih2YXIgcyBpbiB0LnBhdHRlcm5Qcm9wZXJ0aWVzKXt2YXIgdT1uZXcgUmVnRXhwKHMpO2lmKHUudGVzdChvKSYmKGE9ITAsbj10aGlzLnZhbGlkYXRlQWxsKGVbb10sdC5wYXR0ZXJuUHJvcGVydGllc1tzXSxbb10sW1wicGF0dGVyblByb3BlcnRpZXNcIixzXSxpKSkpcmV0dXJuIG59aWYoYSl0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSk7ZWxzZSBpZih2b2lkIDAhPT10LmFkZGl0aW9uYWxQcm9wZXJ0aWVzKXtpZih0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLmtub3duUHJvcGVydHlQYXRoc1tpXT0hMCxkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1tpXSksXCJib29sZWFuXCI9PXR5cGVvZiB0LmFkZGl0aW9uYWxQcm9wZXJ0aWVzKXtpZighdC5hZGRpdGlvbmFsUHJvcGVydGllcyYmKG49dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVMse2tleTpvfSxcIlwiLFwiL2FkZGl0aW9uYWxQcm9wZXJ0aWVzXCIsbnVsbCxlLHQpLnByZWZpeFdpdGgobyxudWxsKSx0aGlzLmhhbmRsZUVycm9yKG4pKSlyZXR1cm4gbn1lbHNlIGlmKG49dGhpcy52YWxpZGF0ZUFsbChlW29dLHQuYWRkaXRpb25hbFByb3BlcnRpZXMsW29dLFtcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCJdLGkpKXJldHVybiBufWVsc2UgdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYhdGhpcy5rbm93blByb3BlcnR5UGF0aHNbaV0mJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2ldPSEwKX1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVPYmplY3REZXBlbmRlbmNpZXM9ZnVuY3Rpb24oZSx0LHIpe3ZhciBuO2lmKHZvaWQgMCE9PXQuZGVwZW5kZW5jaWVzKWZvcih2YXIgbyBpbiB0LmRlcGVuZGVuY2llcylpZih2b2lkIDAhPT1lW29dKXt2YXIgaT10LmRlcGVuZGVuY2llc1tvXTtpZihcInN0cmluZ1wiPT10eXBlb2YgaSl7aWYodm9pZCAwPT09ZVtpXSYmKG49dGhpcy5jcmVhdGVFcnJvcih2Lk9CSkVDVF9ERVBFTkRFTkNZX0tFWSx7a2V5Om8sbWlzc2luZzppfSxcIlwiLFwiXCIsbnVsbCxlLHQpLnByZWZpeFdpdGgobnVsbCxvKS5wcmVmaXhXaXRoKG51bGwsXCJkZXBlbmRlbmNpZXNcIiksdGhpcy5oYW5kbGVFcnJvcihuKSkpcmV0dXJuIG59ZWxzZSBpZihBcnJheS5pc0FycmF5KGkpKWZvcih2YXIgYT0wO2E8aS5sZW5ndGg7YSsrKXt2YXIgcz1pW2FdO2lmKHZvaWQgMD09PWVbc10mJihuPXRoaXMuY3JlYXRlRXJyb3Iodi5PQkpFQ1RfREVQRU5ERU5DWV9LRVkse2tleTpvLG1pc3Npbmc6c30sXCJcIixcIi9cIithLG51bGwsZSx0KS5wcmVmaXhXaXRoKG51bGwsbykucHJlZml4V2l0aChudWxsLFwiZGVwZW5kZW5jaWVzXCIpLHRoaXMuaGFuZGxlRXJyb3IobikpKXJldHVybiBufWVsc2UgaWYobj10aGlzLnZhbGlkYXRlQWxsKGUsaSxbXSxbXCJkZXBlbmRlbmNpZXNcIixvXSxyKSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVDb21iaW5hdGlvbnM9ZnVuY3Rpb24oZSx0LHIpe3JldHVybiB0aGlzLnZhbGlkYXRlQWxsT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlQW55T2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlT25lT2YoZSx0LHIpfHx0aGlzLnZhbGlkYXRlTm90KGUsdCxyKXx8bnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBbGxPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5hbGxPZilyZXR1cm4gbnVsbDtmb3IodmFyIG4sbz0wO288dC5hbGxPZi5sZW5ndGg7bysrKXt2YXIgaT10LmFsbE9mW29dO2lmKG49dGhpcy52YWxpZGF0ZUFsbChlLGksW10sW1wiYWxsT2ZcIixvXSxyKSlyZXR1cm4gbn1yZXR1cm4gbnVsbH0saC5wcm90b3R5cGUudmFsaWRhdGVBbnlPZj1mdW5jdGlvbihlLHQscil7aWYodm9pZCAwPT09dC5hbnlPZilyZXR1cm4gbnVsbDt2YXIgbixvLGk9W10sYT10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMpO2Zvcih2YXIgcz0hMCx1PTA7dTx0LmFueU9mLmxlbmd0aDt1Kyspe3RoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9e30sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9e30pO3ZhciBjPXQuYW55T2ZbdV0sbD10aGlzLmVycm9ycy5sZW5ndGgsZj10aGlzLnZhbGlkYXRlQWxsKGUsYyxbXSxbXCJhbnlPZlwiLHVdLHIpO2lmKG51bGw9PT1mJiZsPT09dGhpcy5lcnJvcnMubGVuZ3RoKXtpZih0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLGEpLHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyl7Zm9yKHZhciBkIGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKW9bZF09ITAsZGVsZXRlIG5bZF07Zm9yKHZhciBwIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpb1twXXx8KG5bcF09ITApO3M9ITE7Y29udGludWV9cmV0dXJuIG51bGx9ZiYmaS5wdXNoKGYucHJlZml4V2l0aChudWxsLFwiXCIrdSkucHJlZml4V2l0aChudWxsLFwiYW55T2ZcIikpfXJldHVybiB0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPW4sdGhpcy5rbm93blByb3BlcnR5UGF0aHM9bykscz8oaT1pLmNvbmNhdCh0aGlzLmVycm9ycy5zbGljZShhKSksdGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxhKSx0aGlzLmNyZWF0ZUVycm9yKHYuQU5ZX09GX01JU1NJTkcse30sXCJcIixcIi9hbnlPZlwiLGksZSx0KSk6dm9pZCAwfSxoLnByb3RvdHlwZS52YWxpZGF0ZU9uZU9mPWZ1bmN0aW9uKGUsdCxyKXtpZih2b2lkIDA9PT10Lm9uZU9mKXJldHVybiBudWxsO3ZhciBuLG8saT1udWxsLGE9W10scz10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMpO2Zvcih2YXIgdT0wO3U8dC5vbmVPZi5sZW5ndGg7dSsrKXt0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMmJih0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzPXt9LHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPXt9KTt2YXIgYz10Lm9uZU9mW3VdLGw9dGhpcy5lcnJvcnMubGVuZ3RoLGY9dGhpcy52YWxpZGF0ZUFsbChlLGMsW10sW1wib25lT2ZcIix1XSxyKTtpZihudWxsPT09ZiYmbD09PXRoaXMuZXJyb3JzLmxlbmd0aCl7aWYobnVsbCE9PWkpcmV0dXJuIHRoaXMuZXJyb3JzPXRoaXMuZXJyb3JzLnNsaWNlKDAscyksdGhpcy5jcmVhdGVFcnJvcih2Lk9ORV9PRl9NVUxUSVBMRSx7aW5kZXgxOmksaW5kZXgyOnV9LFwiXCIsXCIvb25lT2ZcIixudWxsLGUsdCk7aWYoaT11LHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyl7Zm9yKHZhciBkIGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKW9bZF09ITAsZGVsZXRlIG5bZF07Zm9yKHZhciBwIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpb1twXXx8KG5bcF09ITApfX1lbHNlIGYmJmEucHVzaChmKX1yZXR1cm4gdGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYodGhpcy51bmtub3duUHJvcGVydHlQYXRocz1uLHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzPW8pLG51bGw9PT1pPyhhPWEuY29uY2F0KHRoaXMuZXJyb3JzLnNsaWNlKHMpKSx0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLHMpLHRoaXMuY3JlYXRlRXJyb3Iodi5PTkVfT0ZfTUlTU0lORyx7fSxcIlwiLFwiL29uZU9mXCIsYSxlLHQpKToodGhpcy5lcnJvcnM9dGhpcy5lcnJvcnMuc2xpY2UoMCxzKSxudWxsKX0saC5wcm90b3R5cGUudmFsaWRhdGVOb3Q9ZnVuY3Rpb24oZSx0LHIpe2lmKHZvaWQgMD09PXQubm90KXJldHVybiBudWxsO3ZhciBuLG8saT10aGlzLmVycm9ycy5sZW5ndGg7dGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzJiYobj10aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzLG89dGhpcy5rbm93blByb3BlcnR5UGF0aHMsdGhpcy51bmtub3duUHJvcGVydHlQYXRocz17fSx0aGlzLmtub3duUHJvcGVydHlQYXRocz17fSk7dmFyIGE9dGhpcy52YWxpZGF0ZUFsbChlLHQubm90LG51bGwsbnVsbCxyKSxzPXRoaXMuZXJyb3JzLnNsaWNlKGkpO3JldHVybiB0aGlzLmVycm9ycz10aGlzLmVycm9ycy5zbGljZSgwLGkpLHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyYmKHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM9bix0aGlzLmtub3duUHJvcGVydHlQYXRocz1vKSxudWxsPT09YSYmMD09PXMubGVuZ3RoP3RoaXMuY3JlYXRlRXJyb3Iodi5OT1RfUEFTU0VELHt9LFwiXCIsXCIvbm90XCIsbnVsbCxlLHQpOm51bGx9LGgucHJvdG90eXBlLnZhbGlkYXRlSHlwZXJtZWRpYT1mdW5jdGlvbihlLHQsbil7aWYoIXQubGlua3MpcmV0dXJuIG51bGw7Zm9yKHZhciBvLGk9MDtpPHQubGlua3MubGVuZ3RoO2krKyl7dmFyIGE9dC5saW5rc1tpXTtpZihcImRlc2NyaWJlZGJ5XCI9PT1hLnJlbCl7Zm9yKHZhciBzPW5ldyByKGEuaHJlZiksdT0hMCxjPTA7YzxzLnZhck5hbWVzLmxlbmd0aDtjKyspaWYoIShzLnZhck5hbWVzW2NdaW4gZSkpe3U9ITE7YnJlYWt9aWYodSl7dmFyIGw9cy5maWxsRnJvbU9iamVjdChlKSxmPXskcmVmOmx9O2lmKG89dGhpcy52YWxpZGF0ZUFsbChlLGYsW10sW1wibGlua3NcIixpXSxuKSlyZXR1cm4gb319fX07dmFyIHY9e0lOVkFMSURfVFlQRTowLEVOVU1fTUlTTUFUQ0g6MSxBTllfT0ZfTUlTU0lORzoxMCxPTkVfT0ZfTUlTU0lORzoxMSxPTkVfT0ZfTVVMVElQTEU6MTIsTk9UX1BBU1NFRDoxMyxOVU1CRVJfTVVMVElQTEVfT0Y6MTAwLE5VTUJFUl9NSU5JTVVNOjEwMSxOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6MTAyLE5VTUJFUl9NQVhJTVVNOjEwMyxOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6MTA0LE5VTUJFUl9OT1RfQV9OVU1CRVI6MTA1LFNUUklOR19MRU5HVEhfU0hPUlQ6MjAwLFNUUklOR19MRU5HVEhfTE9ORzoyMDEsU1RSSU5HX1BBVFRFUk46MjAyLE9CSkVDVF9QUk9QRVJUSUVTX01JTklNVU06MzAwLE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06MzAxLE9CSkVDVF9SRVFVSVJFRDozMDIsT0JKRUNUX0FERElUSU9OQUxfUFJPUEVSVElFUzozMDMsT0JKRUNUX0RFUEVOREVOQ1lfS0VZOjMwNCxBUlJBWV9MRU5HVEhfU0hPUlQ6NDAwLEFSUkFZX0xFTkdUSF9MT05HOjQwMSxBUlJBWV9VTklRVUU6NDAyLEFSUkFZX0FERElUSU9OQUxfSVRFTVM6NDAzLEZPUk1BVF9DVVNUT006NTAwLEtFWVdPUkRfQ1VTVE9NOjUwMSxDSVJDVUxBUl9SRUZFUkVOQ0U6NjAwLFVOS05PV05fUFJPUEVSVFk6MWUzfSxfPXt9O2Zvcih2YXIgYiBpbiB2KV9bdltiXV09Yjt2YXIgZz17SU5WQUxJRF9UWVBFOlwiSW52YWxpZCB0eXBlOiB7dHlwZX0gKGV4cGVjdGVkIHtleHBlY3RlZH0pXCIsRU5VTV9NSVNNQVRDSDpcIk5vIGVudW0gbWF0Y2ggZm9yOiB7dmFsdWV9XCIsQU5ZX09GX01JU1NJTkc6J0RhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSBcImFueU9mXCInLE9ORV9PRl9NSVNTSU5HOidEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXCJvbmVPZlwiJyxPTkVfT0ZfTVVMVElQTEU6J0RhdGEgaXMgdmFsaWQgYWdhaW5zdCBtb3JlIHRoYW4gb25lIHNjaGVtYSBmcm9tIFwib25lT2ZcIjogaW5kaWNlcyB7aW5kZXgxfSBhbmQge2luZGV4Mn0nLE5PVF9QQVNTRUQ6J0RhdGEgbWF0Y2hlcyBzY2hlbWEgZnJvbSBcIm5vdFwiJyxOVU1CRVJfTVVMVElQTEVfT0Y6XCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIG11bHRpcGxlIG9mIHttdWx0aXBsZU9mfVwiLE5VTUJFUl9NSU5JTVVNOlwiVmFsdWUge3ZhbHVlfSBpcyBsZXNzIHRoYW4gbWluaW11bSB7bWluaW11bX1cIixOVU1CRVJfTUlOSU1VTV9FWENMVVNJVkU6XCJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtaW5pbXVtIHttaW5pbXVtfVwiLE5VTUJFUl9NQVhJTVVNOlwiVmFsdWUge3ZhbHVlfSBpcyBncmVhdGVyIHRoYW4gbWF4aW11bSB7bWF4aW11bX1cIixOVU1CRVJfTUFYSU1VTV9FWENMVVNJVkU6XCJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtYXhpbXVtIHttYXhpbXVtfVwiLE5VTUJFUl9OT1RfQV9OVU1CRVI6XCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIHZhbGlkIG51bWJlclwiLFNUUklOR19MRU5HVEhfU0hPUlQ6XCJTdHJpbmcgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSBjaGFycyksIG1pbmltdW0ge21pbmltdW19XCIsU1RSSU5HX0xFTkdUSF9MT05HOlwiU3RyaW5nIGlzIHRvbyBsb25nICh7bGVuZ3RofSBjaGFycyksIG1heGltdW0ge21heGltdW19XCIsU1RSSU5HX1BBVFRFUk46XCJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggcGF0dGVybjoge3BhdHRlcm59XCIsT0JKRUNUX1BST1BFUlRJRVNfTUlOSU1VTTpcIlRvbyBmZXcgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtaW5pbXVtIHttaW5pbXVtfVwiLE9CSkVDVF9QUk9QRVJUSUVTX01BWElNVU06XCJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19XCIsT0JKRUNUX1JFUVVJUkVEOlwiTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eToge2tleX1cIixPQkpFQ1RfQURESVRJT05BTF9QUk9QRVJUSUVTOlwiQWRkaXRpb25hbCBwcm9wZXJ0aWVzIG5vdCBhbGxvd2VkXCIsT0JKRUNUX0RFUEVOREVOQ1lfS0VZOlwiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSlcIixBUlJBWV9MRU5HVEhfU0hPUlQ6XCJBcnJheSBpcyB0b28gc2hvcnQgKHtsZW5ndGh9KSwgbWluaW11bSB7bWluaW11bX1cIixBUlJBWV9MRU5HVEhfTE9ORzpcIkFycmF5IGlzIHRvbyBsb25nICh7bGVuZ3RofSksIG1heGltdW0ge21heGltdW19XCIsQVJSQVlfVU5JUVVFOlwiQXJyYXkgaXRlbXMgYXJlIG5vdCB1bmlxdWUgKGluZGljZXMge21hdGNoMX0gYW5kIHttYXRjaDJ9KVwiLEFSUkFZX0FERElUSU9OQUxfSVRFTVM6XCJBZGRpdGlvbmFsIGl0ZW1zIG5vdCBhbGxvd2VkXCIsRk9STUFUX0NVU1RPTTpcIkZvcm1hdCB2YWxpZGF0aW9uIGZhaWxlZCAoe21lc3NhZ2V9KVwiLEtFWVdPUkRfQ1VTVE9NOlwiS2V5d29yZCBmYWlsZWQ6IHtrZXl9ICh7bWVzc2FnZX0pXCIsQ0lSQ1VMQVJfUkVGRVJFTkNFOlwiQ2lyY3VsYXIgJHJlZnM6IHt1cmxzfVwiLFVOS05PV05fUFJPUEVSVFk6XCJVbmtub3duIHByb3BlcnR5IChub3QgaW4gc2NoZW1hKVwifTtjLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSksYy5wcm90b3R5cGUuY29uc3RydWN0b3I9YyxjLnByb3RvdHlwZS5uYW1lPVwiVmFsaWRhdGlvbkVycm9yXCIsYy5wcm90b3R5cGUucHJlZml4V2l0aD1mdW5jdGlvbihlLHQpe2lmKG51bGwhPT1lJiYoZT1lLnJlcGxhY2UoL34vZyxcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLFwifjFcIiksdGhpcy5kYXRhUGF0aD1cIi9cIitlK3RoaXMuZGF0YVBhdGgpLG51bGwhPT10JiYodD10LnJlcGxhY2UoL34vZyxcIn4wXCIpLnJlcGxhY2UoL1xcLy9nLFwifjFcIiksdGhpcy5zY2hlbWFQYXRoPVwiL1wiK3QrdGhpcy5zY2hlbWFQYXRoKSxudWxsIT09dGhpcy5zdWJFcnJvcnMpZm9yKHZhciByPTA7cjx0aGlzLnN1YkVycm9ycy5sZW5ndGg7cisrKXRoaXMuc3ViRXJyb3JzW3JdLnByZWZpeFdpdGgoZSx0KTtyZXR1cm4gdGhpc307dmFyIEU9e30saj1mKCk7cmV0dXJuIGouYWRkTGFuZ3VhZ2UoXCJlbi1nYlwiLGcpLGoudHY0PWosan0pfSx7fV0sMTAwOltmdW5jdGlvbihlLHQscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gbihlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e1wiZGVmYXVsdFwiOmV9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIuTWVzc2FnZUZhY3Rvcnk9dm9pZCAwO3ZhciBvPWUoXCIuL21lc3NhZ2UtZmFjdG9yeS9NZXNzYWdlRmFjdG9yeVwiKSxpPW4obyk7ci5NZXNzYWdlRmFjdG9yeT1pW1wiZGVmYXVsdFwiXX0se1wiLi9tZXNzYWdlLWZhY3RvcnkvTWVzc2FnZUZhY3RvcnlcIjoxMDN9XSwxMDE6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksci5NZXNzYWdlVHlwZT1yLk1lc3NhZ2U9dm9pZCAwO1xyXG52YXIgbz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCIpLGk9bihvKSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikscz1uKGEpLHU9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSxjPW4odSksbD1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIiksZj1uKGwpLGQ9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSxwPW4oZCksaD1lKFwiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzXCIpLHk9bihoKSxtPXIuTWVzc2FnZT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8sYSl7KDAsc1tcImRlZmF1bHRcIl0pKHRoaXMsdCk7dmFyIHU9KDAsZltcImRlZmF1bHRcIl0pKHRoaXMsKHQuX19wcm90b19ffHwoMCxpW1wiZGVmYXVsdFwiXSkodCkpLmNhbGwodGhpcykpO3JldHVybiB1LmlkPWUsdS5mcm9tPXIsdS50bz1uLHUudHlwZT1vLHUuYm9keT1hLHV9cmV0dXJuKDAscFtcImRlZmF1bHRcIl0pKHQsZSksKDAsY1tcImRlZmF1bHRcIl0pKHQsW3trZXk6XCJhc3NlcnRJZGVudGl0eVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCl7aWYoIWV8fCF0KXRocm93IG5ldyBFcnJvcihcIm1lc3NhZ2UsIHRva2VuIHRvIGJlIHJlbW92ZWQsIGFuZCBhc3NlcnRlZElkZW50aXR5IG11c3QgYmUgcHJvdmlkZWRcIik7dmFyIHI9dGhpcy5ib2R5O3JldHVybiByLmlkVG9rZW49bnVsbCxyLmFzc2VydGVkSWRlbnRpdHk9dCx0aGlzLmJvZHk9cix0aGlzfX0se2tleTpcImFkZElkVG9rZW5cIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJtZXNzYWdlLCB0b2tlbiB0byBiZSBhZGRlZCwgbXVzdCBiZSBwcm92aWRlZFwiKTt2YXIgdD10aGlzLmJvZHk7cmV0dXJuIHQuaWRUb2tlbj1lLHRoaXMuYm9keT10LHRoaXN9fSx7a2V5OlwiYWRkQWNjZXNzVG9rZW5cIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJtZXNzYWdlLCB0b2tlbiB0byBiZSBhZGRlZCwgbXVzdCBiZSBwcm92aWRlZFwiKTt2YXIgdD10aGlzLmJvZHk7cmV0dXJuIHQuYWNjZXNzVG9rZW49ZSx0aGlzLmJvZHk9dCx0aGlzfX1dKSx0fSh5W1wiZGVmYXVsdFwiXSk7ci5NZXNzYWdlVHlwZT17Q1JFQVRFOlwiY3JlYXRlXCIsUkVBRDpcInJlYWRcIixVUERBVEU6XCJ1cGRhdGVcIixERUxFVEU6XCJkZWxldGVcIixTVUJTQ1JJQkU6XCJzdWJzY3JpYmVcIixVTlNVQlNDUklCRTpcInVuc3Vic2NyaWJlXCIsUkVTUE9OU0U6XCJyZXNwb25zZVwiLEZPUldBUkQ6XCJmb3J3YXJkXCIsRVhFQ1VURTpcImV4ZWN1dGVcIn07cltcImRlZmF1bHRcIl09bX0se1wiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzXCI6MTA0LFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mXCI6NSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjEwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI6MTEsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNcIjoxMixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuXCI6MTN9XSwxMDI6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19ZnVuY3Rpb24gbyhlKXt2YXIgdD0oMCx1W1wiZGVmYXVsdFwiXSkoZSkucmVkdWNlKGZ1bmN0aW9uKHQscil7cmV0dXJuIHRbZVtyXV09cix0fSx7fSk7cmV0dXJuKDAsYVtcImRlZmF1bHRcIl0pKCgwLHVbXCJkZWZhdWx0XCJdKShlKS5yZWR1Y2UoZnVuY3Rpb24odCxyKXtyZXR1cm4gdFtyXT1lW3JdLHR9LGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfSkpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShyLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLHIuVVBEQVRFX09QRVJBVElPTj1yLkFUVFJJQlVURV9UWVBFPXIuUkVBU09OX1BIUkFTRT1yLlJFU1BPTlNFX0NPREU9ci5FeGVjdXRlTWVzc2FnZUJvZHk9ci5SZXNwb25zZU1lc3NhZ2VCb2R5PXIuRm9yd2FyZE1lc3NhZ2VCb2R5PXIuVXBkYXRlTWVzc2FnZUJvZHk9ci5EZWxldGVNZXNzYWdlQm9keT1yLlJlYWRNZXNzYWdlQm9keT1yLkNyZWF0ZU1lc3NhZ2VCb2R5PXIuTWVzc2FnZUJvZHk9dm9pZCAwO3ZhciBpPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2ZyZWV6ZVwiKSxhPW4oaSkscz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9rZXlzXCIpLHU9bihzKSxjPWUoXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2ZcIiksbD1uKGMpLGY9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiKSxkPW4oZikscD1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCIpLGg9bihwKSx5PWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSxtPW4oeSksdj1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzXCIpLF89bih2KTtyLkVudW09bzt2YXIgYj1lKFwiLi4vcmVUSElOS09iamVjdC9SZXRoaW5rT2JqZWN0LmpzXCIpLGc9bihiKSxFPXIuTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGkpeygwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpO3ZhciBhPSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMpKTtyZXR1cm4gYS5pZFRva2VuPWUsYS5hY2Nlc3NUb2tlbj1yLGEucmVzb3VyY2U9bixhLnNjaGVtYT1vLGEuYXNzZXJ0ZWRJZGVudGl0eT1pLGF9cmV0dXJuKDAsX1tcImRlZmF1bHRcIl0pKHQsZSksKDAsaFtcImRlZmF1bHRcIl0pKHQsW3trZXk6XCJhZGRWaWFcIix2YWx1ZTpmdW5jdGlvbihlKXtpZighZSl0aHJvdyBuZXcgRXJyb3IoXCJ2aWEgVVJMIHRvIGJlIGFkZGVkLCBtdXN0IGJlIHByb3ZpZGVkXCIpO3JldHVybiB0aGlzLnZpYT1lLHRoaXN9fV0pLHR9KGdbXCJkZWZhdWx0XCJdKSxqPShyLkNyZWF0ZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEscyl7aWYoKDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCksIWUpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHZhbHVlIHBhcmFtZXRlciBpcyBudWxsXCIpO3ZhciB1PSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsbixvLGksYSxzLGEscykpO3JldHVybiB1LnZhbHVlPWUsciYmKHUucG9saWN5PXIpLHV9cmV0dXJuKDAsX1tcImRlZmF1bHRcIl0pKHQsZSksdH0oRSksci5SZWFkTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzLHUpeygwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpO3ZhciBjPSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIGEmJihjLmF0dHJpYnV0ZT1hKSxzJiYoYy5jcml0ZXJpYVN5bnRheD1zKSx1JiYoYy5jcml0ZXJpYT11KSxjfXJldHVybigwLF9bXCJkZWZhdWx0XCJdKSh0LGUpLHR9KEUpLHIuRGVsZXRlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSl7aWYoKDAsZFtcImRlZmF1bHRcIl0pKHRoaXMsdCksbiBpbnN0YW5jZW9mIEFycmF5KXt2YXIgcz0oMCxtW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzLGUscixudWxsLG8saSkpO3MuY2hpbGRyZW5SZXNvdXJjZXM9bn1lbHNlIHZhciBzPSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIGEmJihzLmF0dHJpYnV0ZT1hKSwoMCxtW1wiZGVmYXVsdFwiXSkocyl9cmV0dXJuKDAsX1tcImRlZmF1bHRcIl0pKHQsZSksdH0oRSksci5VcGRhdGVNZXNzYWdlQm9keT1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUscixuLG8saSxhLHMpeygwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpO3ZhciB1PSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHUuYXR0cmlidXRlPWEsdS52YWx1ZT1zLHV9cmV0dXJuKDAsX1tcImRlZmF1bHRcIl0pKHQsZSksKDAsaFtcImRlZmF1bHRcIl0pKHQsW3trZXk6XCJhZGRBdHRyaWJ1dGVUeXBlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZSYmKHRoaXMuYXR0cmlidXRlVHlwZT1lKX19LHtrZXk6XCJhZGRPcGVyYXRpb25cIix2YWx1ZTpmdW5jdGlvbihlKXtlJiYodGhpcy5vcGVyYXRpb249ZSl9fV0pLHR9KEUpLHIuRm9yd2FyZE1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpLGEpeygwLGRbXCJkZWZhdWx0XCJdKSh0aGlzLHQpO3ZhciBzPSgwLG1bXCJkZWZhdWx0XCJdKSh0aGlzLCh0Ll9fcHJvdG9fX3x8KDAsbFtcImRlZmF1bHRcIl0pKHQpKS5jYWxsKHRoaXMsZSxyLG4sbyxpKSk7cmV0dXJuIHMubWVzc2FnZT1hLHN9cmV0dXJuKDAsX1tcImRlZmF1bHRcIl0pKHQsZSksdH0oRSksci5SZXNwb25zZU1lc3NhZ2VCb2R5PWZ1bmN0aW9uKGUpe2Z1bmN0aW9uIHQoZSxyLG4sbyxpKXsoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KTt2YXIgYT0oMCxtW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzLGUscixuKSk7cmV0dXJuIG8mJihhLmNvZGU9byxhLmRlc2NyaXB0aW9uPWpbb10pLGkmJihhLnZhbHVlPWkpLGF9cmV0dXJuKDAsX1tcImRlZmF1bHRcIl0pKHQsZSksdH0oRSksci5FeGVjdXRlTWVzc2FnZUJvZHk9ZnVuY3Rpb24oZSl7ZnVuY3Rpb24gdChlLHIsbixvLGksYSxzKXsoMCxkW1wiZGVmYXVsdFwiXSkodGhpcyx0KTt2YXIgdT0oMCxtW1wiZGVmYXVsdFwiXSkodGhpcywodC5fX3Byb3RvX198fCgwLGxbXCJkZWZhdWx0XCJdKSh0KSkuY2FsbCh0aGlzLGUscixuLG8saSkpO3JldHVybiB1Lm1ldGhvZD1hLHMmJihzIGluc3RhbmNlb2YgQXJyYXk/dS5wYXJhbXM9czp1LnBhcmFtcz1bc10pLHV9cmV0dXJuKDAsX1tcImRlZmF1bHRcIl0pKHQsZSksdH0oRSksci5SRVNQT05TRV9DT0RFPW8oezEwMDpcIjEwMFwiLDEwMTpcIjEwMVwiLDIwMDpcIjIwMFwiLDIwMTpcIjIwMVwiLDIwMjpcIjIwMlwiLDIwMzpcIjIwM1wiLDIwNDpcIjIwNFwiLDIwNTpcIjIwNVwiLDIwNjpcIjIwNlwiLDMwMDpcIjMwMFwiLDMwMTpcIjMwMVwiLDMwMjpcIjMwMlwiLDMwMzpcIjMwM1wiLDMwNDpcIjMwNFwiLDMwNTpcIjMwNVwiLDMwNzpcIjMwN1wiLDQwMDpcIjQwMFwiLDQwMTpcIjQwMVwiLDQwMjpcIjQwMlwiLDQwMzpcIjQwM1wiLDQwNDpcIjQwNFwiLDQwNTpcIjQwNVwiLDQwNjpcIjQwNlwiLDQwNzpcIjQwN1wiLDQwODpcIjQwOFwiLDQwOTpcIjQwOVwiLDQxMDpcIjQxMFwiLDQxMTpcIjQxMVwiLDQxMjpcIjQxMlwiLDQxMzpcIjQxM1wiLDQxNDpcIjQxNFwiLDQxNTpcIjQxNVwiLDQxNjpcIjQxNlwiLDQxNzpcIjQxN1wiLDQyNjpcIjQyNlwiLDUwMDpcIjUwMFwiLDUwMTpcIjUwMVwiLDUwMjpcIjUwMlwiLDUwMzpcIjUwM1wiLDUwNDpcIjUwNFwiLDUwNTpcIjUwNVwifSksci5SRUFTT05fUEhSQVNFPW8oezEwMDpcIkNvbnRpbnVlXCIsMTAxOlwiU3dpdGNoaW5nIFByb3RvY29sc1wiLDIwMDpcIk9LXCIsMjAxOlwiQ3JlYXRlZFwiLDIwMjpcIkFjY2VwdGVkXCIsMjAzOlwiTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb25cIiwyMDQ6XCJObyBDb250ZW50XCIsMjA1OlwiUmVzZXQgQ29udGVudFwiLDIwNjpcIlBhcnRpYWwgQ29udGVudFwiLDMwMDpcIk11bHRpcGxlIENob2ljZXNcIiwzMDE6XCJNb3ZlZCBQZXJtYW5lbnRseVwiLDMwMjpcIkZvdW5kXCIsMzAzOlwiU2VlIE90aGVyXCIsMzA0OlwiTm90IE1vZGlmaWVkXCIsMzA1OlwiVXNlIFByb3h5XCIsMzA3OlwiVGVtcG9yYXJ5IFJlZGlyZWN0XCIsNDAwOlwiQmFkIFJlcXVlc3RcIiw0MDE6XCJVbmF1dGhvcml6ZWRcIiw0MDI6XCJQYXltZW50IFJlcXVpcmVkXCIsNDAzOlwiRm9yYmlkZGVuXCIsNDA0OlwiTm90IEZvdW5kXCIsNDA1OlwiTWV0aG9kIE5vdCBBbGxvd2VkXCIsNDA2OlwiTm90IEFjY2VwdGFibGVcIiw0MDc6XCJQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZFwiLDQwODpcIlJlcXVlc3QgVGltZW91dFwiLDQwOTpcIkNvbmZsaWN0XCIsNDEwOlwiR29uZVwiLDQxMTpcIkxlbmd0aCBSZXF1aXJlZFwiLDQxMjpcIlByZWNvbmRpdGlvbiBGYWlsZWRcIiw0MTM6XCJQYXlsb2FkIFRvbyBMYXJnZVwiLDQxNDpcIlJlcXVlc3QtVVJJIFRvbyBMb25nXCIsNDE1OlwiVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZVwiLDQxNjpcIlJhbmdlIE5vdCBTYXRpc2ZpYWJsZVwiLDQxNzpcIkV4cGVjdGF0aW9uIEZhaWxlZFwiLDQyNjpcIlVwZ3JhZGUgUmVxdWlyZWRcIiw1MDA6XCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIiw1MDE6XCJOb3QgSW1wbGVtZW50ZWRcIiw1MDI6XCJCYWQgR2F0ZXdheVwiLDUwMzpcIlNlcnZpY2UgVW5hdmFpbGFibGVcIiw1MDQ6XCJHYXRld2F5IFRpbWUtb3V0XCIsNTA1OlwiSFRUUCBWZXJzaW9uIE5vdCBTdXBwb3J0ZWRcIn0pKTtyLkFUVFJJQlVURV9UWVBFPW8oe09CSkVDVDpcIk9CSkVDVFwiLEFSUkFZOlwiQVJSQVlcIn0pLHIuVVBEQVRFX09QRVJBVElPTj1vKHtBREQ6XCJBRERcIixSRU1PVkU6XCJSRU1PVkVcIn0pO3JbXCJkZWZhdWx0XCJdPUV9LHtcIi4uL3JlVEhJTktPYmplY3QvUmV0aGlua09iamVjdC5qc1wiOjEwNCxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZnJlZXplXCI6NCxcImJhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZlwiOjUsXCJiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXNcIjo2LFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCI6MTAsXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIjoxMSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiOjEyLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm5cIjoxM31dLDEwMzpbZnVuY3Rpb24oZSx0LHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIG4oZSl7cmV0dXJuIGUmJmUuX19lc01vZHVsZT9lOntcImRlZmF1bHRcIjplfX1PYmplY3QuZGVmaW5lUHJvcGVydHkocixcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxyLklkR2VuZXJhdG9yPXZvaWQgMDt2YXIgbz1lKFwiYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvclwiKSxpPW4obyksYT1lKFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpLHM9bihhKSx1PWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3NcIiksYz1uKHUpLGw9ZShcIi4vTWVzc2FnZS5qc1wiKSxmPW4obCksZD1lKFwiLi9NZXNzYWdlQm9keS5qc1wiKSxwPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSgpeygwLHNbXCJkZWZhdWx0XCJdKSh0aGlzLGUpLHRoaXMubXlHZW5lcmF0b3I9KG5ldyBoKS5pZE1ha2VyKCl9cmV0dXJuKDAsY1tcImRlZmF1bHRcIl0pKGUsW3trZXk6XCJjcmVhdGVDcmVhdGVNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyLG4pe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgdG8sIGFuZCB2YWx1ZSBvZiBvYmplY3QgdG8gYmUgY3JlYXRlZCBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLkNyZWF0ZU1lc3NhZ2VCb2R5KHIsbiwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSwodm9pZCAwKSksYT1uZXcgZltcImRlZmF1bHRcIl0obyxlLHQsbC5NZXNzYWdlVHlwZS5DUkVBVEUsaSk7cmV0dXJuIGF9fSx7a2V5OlwiY3JlYXRlRm9yd2FyZE1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIpe2lmKCFlfHwhdHx8IXIpdGhyb3cgbmV3IEVycm9yKFwiZnJvbSwgdG8sIGFuZCBtZXNzYWdlIHRvIGZvcndhcmQgTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG49dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsbz1uZXcgZC5Gb3J3YXJkTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksciksaT1uZXcgZltcImRlZmF1bHRcIl0obixlLHQsbC5NZXNzYWdlVHlwZS5GT1JXQVJELG8pO3JldHVybiBpfX0se2tleTpcImNyZWF0ZURlbGV0ZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0KXRocm93IG5ldyBFcnJvcihcImZyb20gYW5kIHRvIHBhcmFtZXRlcnMgTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG89dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgZC5EZWxldGVNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLG4sKHZvaWQgMCksKHZvaWQgMCkpLGE9bmV3IGZbXCJkZWZhdWx0XCJdKG8sZSx0LGwuTWVzc2FnZVR5cGUuREVMRVRFLGkpO3JldHVybiBhfX0se2tleTpcImNyZWF0ZVVwZGF0ZU1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbixvKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcihcImZyb20sIGFuZCB0byBhbmQgdmFsdWUgTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIGk9dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsYT1uZXcgZC5VcGRhdGVNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxuLCh2b2lkIDApLCh2b2lkIDApLG8scikscz1uZXcgZltcImRlZmF1bHRcIl0oaSxlLHQsbC5NZXNzYWdlVHlwZS5VUERBVEUsYSk7cmV0dXJuIHN9fSx7a2V5OlwiY3JlYXRlUmVhZE1lc3NhZ2VSZXF1ZXN0XCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIWV8fCF0fHwhcil0aHJvdyBuZXcgRXJyb3IoXCJmcm9tLCB0byBhbmQgdGhlIHJlc291cmNlIHRvIHJlYWQgZnJvbSBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbz10aGlzLm15R2VuZXJhdG9yLm5leHQoKS52YWx1ZSxpPW5ldyBkLlJlYWRNZXNzYWdlQm9keSgodm9pZCAwKSwodm9pZCAwKSxyLCh2b2lkIDApLCh2b2lkIDApLG4sKHZvaWQgMCksKHZvaWQgMCkpLGE9bmV3IGZbXCJkZWZhdWx0XCJdKG8sZSx0LGwuTWVzc2FnZVR5cGUuUkVBRCxpKTtyZXR1cm4gYX19LHtrZXk6XCJjcmVhdGVTdWJzY3JpYmVNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcihcImZyb20sIHRvIGFuZCB0aGUgcmVzb3VyY2UgdG8gc3Vic2NyaWJlIHRvIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBuPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLG89bmV3IGQuTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksciwodm9pZCAwKSwodm9pZCAwKSksaT1uZXcgZltcImRlZmF1bHRcIl0obixlLHQsbC5NZXNzYWdlVHlwZS5TVUJTQ1JJQkUsbyk7cmV0dXJuIGl9fSx7a2V5OlwiY3JlYXRlVW5zdWJzY3JpYmVNZXNzYWdlUmVxdWVzdFwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcihcImZyb20sIHRvIGFuZCB0aGUgcmVzb3VyY2UgdG8gc3Vic2NyaWJlIHRvIE1VU1QgYmUgc3BlY2lmaWVkXCIpO3ZhciBuPXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlLG89bmV3IGQuTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksciwodm9pZCAwKSwodm9pZCAwKSksaT1uZXcgZltcImRlZmF1bHRcIl0obixlLHQsbC5NZXNzYWdlVHlwZS5VTlNVQlNDUklCRSxvKTtyZXR1cm4gaX19LHtrZXk6XCJjcmVhdGVFeGVjdXRlTWVzc2FnZVJlcXVlc3RcIix2YWx1ZTpmdW5jdGlvbihlLHQscixuKXtpZighZXx8IXR8fCFyKXRocm93IG5ldyBFcnJvcihcImZyb20sIHRvIGFuZCB0aGUgbWV0aG9kIHRvIGV4ZWN1dGUgTVVTVCBiZSBzcGVjaWZpZWRcIik7dmFyIG89dGhpcy5teUdlbmVyYXRvci5uZXh0KCkudmFsdWUsaT1uZXcgZC5FeGVjdXRlTWVzc2FnZUJvZHkoKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCksKHZvaWQgMCkscixuKSxhPW5ldyBmW1wiZGVmYXVsdFwiXShvLGUsdCxsLk1lc3NhZ2VUeXBlLkVYRUNVVEUsaSk7cmV0dXJuIGF9fSx7a2V5OlwiY3JlYXRlTWVzc2FnZVJlc3BvbnNlXCIsdmFsdWU6ZnVuY3Rpb24oZSx0LHIsbil7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwicmVzcG9uc2UgQ29kZSBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbz1uZXcgZC5SZXNwb25zZU1lc3NhZ2VCb2R5KCh2b2lkIDApLCh2b2lkIDApLCh2b2lkIDApLHQscixuKTtyZXR1cm4gbmV3IGZbXCJkZWZhdWx0XCJdKGUuaWQsZS50byxlLmZyb20sbC5NZXNzYWdlVHlwZS5SRVNQT05TRSxvKX19LHtrZXk6XCJnZW5lcmF0ZU1lc3NhZ2VSZXNwb25zZVwiLHZhbHVlOmZ1bmN0aW9uKGUsdCxyKXtpZighZXx8IXQpdGhyb3cgbmV3IEVycm9yKFwibWVzc2FnZSBhbmQgcmVzcG9uc2UgY29kZSBNVVNUIGJlIHNwZWNpZmllZFwiKTt2YXIgbj1lLmJvZHksbz1uLmlkVG9rZW4saT1uLmFjY2Vzc1Rva2VuLGE9bi5yZXNvdXJjZSxzPW5ldyBkLlJlc3BvbnNlTWVzc2FnZUJvZHkobyxpLGEsdCxyKSx1PXRoaXMubXlHZW5lcmF0b3IubmV4dCgpLnZhbHVlO3JldHVybiBuZXcgZltcImRlZmF1bHRcIl0odSxlLnRvLGUuZnJvbSxsLk1lc3NhZ2VUeXBlLlJFU1BPTlNFLHMpfX1dKSxlfSgpLGg9ci5JZEdlbmVyYXRvcj1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXsoMCxzW1wiZGVmYXVsdFwiXSkodGhpcyxlKX1yZXR1cm4oMCxjW1wiZGVmYXVsdFwiXSkoZSxbe2tleTpcImlkTWFrZXJcIix2YWx1ZTppW1wiZGVmYXVsdFwiXS5tYXJrKGZ1bmN0aW9uIHQoKXt2YXIgZTtyZXR1cm4gaVtcImRlZmF1bHRcIl0ud3JhcChmdW5jdGlvbih0KXtmb3IoOzspc3dpdGNoKHQucHJldj10Lm5leHQpe2Nhc2UgMDplPTE7Y2FzZSAxOmlmKCEoZTwxZTYpKXt0Lm5leHQ9NjticmVha31yZXR1cm4gdC5uZXh0PTQsZSsrO2Nhc2UgNDp0Lm5leHQ9MTticmVhaztjYXNlIDY6Y2FzZVwiZW5kXCI6cmV0dXJuIHQuc3RvcCgpfX0sdCx0aGlzKX0pfV0pLGV9KCk7cltcImRlZmF1bHRcIl09cH0se1wiLi9NZXNzYWdlLmpzXCI6MTAxLFwiLi9NZXNzYWdlQm9keS5qc1wiOjEwMixcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjEwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI6MTEsXCJiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yXCI6MTV9XSwxMDQ6W2Z1bmN0aW9uKGUsdCxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKGUpe3JldHVybiBlJiZlLl9fZXNNb2R1bGU/ZTp7XCJkZWZhdWx0XCI6ZX19T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksci5SZXRoaW5rT2JqZWN0PXZvaWQgMDt2YXIgbz1lKFwiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5XCIpLGk9bihvKSxhPWUoXCJiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2tcIikscz1uKGEpLHU9ZShcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzc1wiKSxjPW4odSksbD1lKFwidHY0XCIpLGY9bihsKSxkPXIuUmV0aGlua09iamVjdD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUoKXsoMCxzW1wiZGVmYXVsdFwiXSkodGhpcyxlKX1yZXR1cm4oMCxjW1wiZGVmYXVsdFwiXSkoZSxbe2tleTpcInZhbGlkYXRlXCIsdmFsdWU6ZnVuY3Rpb24oZSl7ZltcImRlZmF1bHRcIl0uYWRkU2NoZW1hKGUuaWQsZSk7dmFyIHQ9ZltcImRlZmF1bHRcIl0udmFsaWRhdGVNdWx0aXBsZShKU09OLnBhcnNlKCgwLGlbXCJkZWZhdWx0XCJdKSh0aGlzKSksZSk7cmV0dXJuIHQuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24oZSl7ZGVsZXRlIGUuc3RhY2t9KSwoIXQudmFsaWR8fHQubWlzc2luZy5sZW5ndGg+MCkmJihjb25zb2xlLndhcm4oXCJPYmplY3QgdmFsaWRhdGlvbiBcIisodC52YWxpZD9cInN1Y2NlZWRlZCwgYnV0IHNjaGVtYSBjb250YWluZWQgcmVmZXJlbmNlczpcIjpcImZhaWxlZDpcIiksKDAsaVtcImRlZmF1bHRcIl0pKHQsbnVsbCwyKSksY29uc29sZS5sb2coXCJPYmplY3Q6XCIsKDAsaVtcImRlZmF1bHRcIl0pKHRoaXMsbnVsbCwyKSkpLHQudmFsaWR9fV0pLGV9KCk7cltcImRlZmF1bHRcIl09ZH0se1wiYmFiZWwtcnVudGltZS9jb3JlLWpzL2pzb24vc3RyaW5naWZ5XCI6MSxcImJhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVja1wiOjEwLFwiYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzXCI6MTEsdHY0Ojk5fV19LHt9LFsxMDBdKSgxMDApfSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU1lc3NhZ2VGYWN0b3J5LmpzLm1hcFxyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcbi8vIGltcG9ydCBNZXNzYWdlRmFjdG9yeSBmcm9tICcuLi8uLi9yZXNvdXJjZXMvTWVzc2FnZUZhY3RvcnknO1xyXG5cclxuLyoqXHJcbiAqIENsYXNzIHdpbGwgYXNrIHRvIHRoZSBtZXNzYWdlIG5vZGUgZm9yIGFkZHJlc3Nlc1xyXG4gKi9cclxuY2xhc3MgQWRkcmVzc0FsbG9jYXRpb24ge1xyXG4gIC8qIHByaXZhdGVcclxuICBfdXJsOiBVUkxcclxuICBfYnVzOiBNaW5pQnVzXHJcbiAgKi9cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGFuIEFkZHJlc3MgQWxsb2NhdGlvblxyXG4gICAqIEBwYXJhbSAge1VSTC5VUkx9ICAgICAgdXJsIC0gdXJsIGZyb20gd2hvIGlzIHNlbmRpbmcgdGhlIG1lc3NhZ2VcclxuICAgKiBAcGFyYW0gIHtNaW5pQnVzfSAgICAgIGJ1cyAtIE1pbmlCdXMgdXNlZCBmb3IgYWRkcmVzcyBhbGxvY2F0aW9uXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IodXJsLCBidXMsIHJlZ2lzdHJ5KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIC8vIGxldCBtZXNzYWdlRmFjdG9yeSA9IG5ldyBNZXNzYWdlRmFjdG9yeSgpO1xyXG4gICAgLy9cclxuICAgIC8vIF90aGlzLl9tZXNzYWdlRmFjdG9yeSA9IG1lc3NhZ2VGYWN0b3J5O1xyXG4gICAgX3RoaXMuX3VybCA9IHVybDtcclxuICAgIF90aGlzLl9idXMgPSBidXM7XHJcbiAgICBfdGhpcy5fcmVnaXN0cnkgPSByZWdpc3RyeTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGdldCB0aGUgVVJMIHZhbHVlXHJcbiAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgdXJsIHZhbHVlO1xyXG4gICAqL1xyXG4gIGdldCB1cmwoKSB7IHJldHVybiB0aGlzLl91cmw7IH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXNrIGZvciBjcmVhdGlvbiBvZiBhIG51bWJlciBvZiBIeXBlcnR5IGFkZHJlc3NlcywgdG8gdGhlIGRvbWFpbiBtZXNzYWdlIG5vZGUuXHJcbiAgICogQHBhcmFtICB7RG9tYWlufSBkb21haW4gLSBEb21haW4gb2YgdGhlIG1lc3NhZ2Ugbm9kZS5cclxuICAgKiBAcGFyYW0gIHtudW1iZXJ9IG51bWJlciAtIE51bWJlciBvZiBhZGRyZXNzZXMgdG8gcmVxdWVzdFxyXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPEh5cGVydHlVUkw+fSAgQSBsaXN0IG9mIEh5cGVydHlVUkwnc1xyXG4gICAqL1xyXG4gIGNyZWF0ZShkb21haW4sIG51bWJlciwgaW5mbywgc2NoZW1lLCByZXVzZVVSTCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgaWYgKHJldXNlVVJMKSB7XHJcblxyXG4gICAgICAgIF90aGlzLl9yZWdpc3RyeS5jaGVja1JlZ2lzdGVyZWRVUkxzKGluZm8pLnRoZW4oKHVybHMpID0+IHtcclxuXHJcbiAgICAgICAgICBpZiAodXJscykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmluZm8oJ1tBZGRyZXNzQWxsb2NhdGlvbiAtICcgKyBzY2hlbWUgKyAnXSAtIFJldXNlIFVSTCcpO1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB7bmV3QWRkcmVzczogZmFsc2UsIGFkZHJlc3M6IHVybHN9O1xyXG4gICAgICAgICAgICByZXNvbHZlKHZhbHVlKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gcmV1c2VVUkxdIC0gT2JqZWN0ICcgKyByZXVzZVVSTCArICcgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgICAgIHJlamVjdCgnVVJMIE5vdCBGb3VuZCcpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgICAgICByZWplY3QocmVhc29uKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIF90aGlzLl9yZWdpc3RyeS5jaGVja1JlZ2lzdGVyZWRVUkxzKGluZm8pLnRoZW4oKHVybHMpID0+IHtcclxuXHJcbiAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbHJlYWR5IGEgVVJMLCB0aGVuIHJldHVybnMgdGhhdCBVUkwsIG90aGVyd2lzZSByZXF1ZXN0IGEgbmV3IFVSTFxyXG4gICAgICAgICAgaWYgKHVybHMpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW0FkZHJlc3NBbGxvY2F0aW9uIC0gJyArIHNjaGVtZSArICddIC0gUmV1c2UgVVJMJyk7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHtuZXdBZGRyZXNzOiBmYWxzZSwgYWRkcmVzczogdXJsc307XHJcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG5cclxuICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyBVUkwgc2F2ZWQgcmVxdWVzdCBhIG5ldyBVUkxcclxuICAgICAgICAgICAgX3RoaXMuX2FsbG9jYXRlTmV3QWRkcmVzcyhkb21haW4sIHNjaGVtZSwgbnVtYmVyKS50aGVuKChhbGxvY2F0ZWQpID0+IHtcclxuICAgICAgICAgICAgICByZXNvbHZlKGFsbG9jYXRlZCk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcclxuICAgICAgICAgICAgICByZWplY3QocmVhc29uKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcclxuICAgICAgICAgIHJlamVjdChyZWFzb24pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgX2FsbG9jYXRlTmV3QWRkcmVzcyhkb21haW4sIHNjaGVtZSwgbnVtYmVyKSB7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIGxldCBtc2cgPSB7XHJcbiAgICAgICAgdHlwZTogJ2NyZWF0ZScsIGZyb206IHRoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9hZGRyZXNzLWFsbG9jYXRpb24nLFxyXG4gICAgICAgIGJvZHk6IHt2YWx1ZTogeyBudW1iZXI6IG51bWJlciB9IH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGlmIChzY2hlbWUgIT09ICdoeXBlcnR5JykgbXNnLmJvZHkuc2NoZW1lID0gc2NoZW1lO1xyXG5cclxuICAgICAgY29uc29sZS5pbmZvKCdbQWRkcmVzc0FsbG9jYXRpb24gLSAnICsgc2NoZW1lICsgJ10gLSBSZXF1ZXN0IG5ldyBVUkwnKTtcclxuXHJcbiAgICAgIC8vIFRPRE86IGNoYW5nZSB0aGlzIHJlc3BvbnNlIE1lc3NhZ2UgdXNpbmcgdGhlIE1lc3NhZ2VGYWN0b3J5XHJcbiAgICAgIHRoaXMuX2J1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgbGV0IHJlc3VsdCA9IHtuZXdBZGRyZXNzOiB0cnVlLCBhZGRyZXNzOiByZXBseS5ib2R5LnZhbHVlLmFsbG9jYXRlZH07XHJcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdChyZXBseS5ib2R5LmRlc2MpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBTZW5kIGEgcmVxdWVzdCB0byB0aGUgZG9tYWluIG1lc3NhZ2Ugbm9kZSwgdG8gZGVhbGxvY2F0ZSBvbmUgb3IgbW9yZSBhZGRyZXNzZXNcclxuICAqIEBwYXJhbSAge0RvbWFpbn0gZG9tYWluIC0gRG9tYWluIG9mIHRoZSBtZXNzYWdlIG5vZGUuXHJcbiAgKiBAcGFyYW0gIHthZGRyZXNzZXN9IGFkZHJlc3NlcyB0byByZXF1ZXN0IHRoZSBkZWFsbG9jYXRpb25cclxuICAqIEByZXR1cm5zIHtQcm9taXNlfSAgdGhlIHJlc3BvbnNlIGJ5IHRoZSBtZXNzYWdlIG5vZGVcclxuICAqL1xyXG4gIGRlbGV0ZShkb21haW4sIGFkZHJlc3Nlcykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgbWVzc2FnZSA9IHtcclxuICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLl91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIGRvbWFpbiArICcvYWRkcmVzcy1hbGxvY2F0aW9uJyxcclxuICAgICAgYm9keToge2NoaWxkcmVuUmVzb3VyY2VzOiBhZGRyZXNzZXN9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdyZXBseScsIHJlcGx5KTtcclxuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuICAgICAgICAgIHJlc29sdmUocmVwbHkuYm9keS5jb2RlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KHJlcGx5LmJvZHkuZGVzYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFkZHJlc3NBbGxvY2F0aW9uO1xyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG4vKipcclxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXHJcbiogTWluaW1hbCBpbnRlcmZhY2UgYW5kIGltcGxlbWVudGF0aW9uIHRvIHNlbmQgYW5kIHJlY2VpdmUgbWVzc2FnZXMuIEl0IGNhbiBiZSByZXVzZWQgaW4gbWFueSB0eXBlIG9mIGNvbXBvbmVudHMuXHJcbiogQ29tcG9uZW50cyB0aGF0IG5lZWQgYSBtZXNzYWdlIHN5c3RlbSBzaG91bGQgcmVjZWl2ZSB0aGlzIGNsYXNzIGFzIGEgZGVwZW5kZW5jeSBvciBleHRlbmQgaXQuXHJcbiogRXh0ZW5zaW9ucyBzaG91bGQgaW1wbGVtZW50IHRoZSBmb2xsb3dpbmcgcHJpdmF0ZSBtZXRob2RzOiBfb25Qb3N0TWVzc2FnZSBhbmQgX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lclxyXG4qL1xyXG5jbGFzcyBCdXMge1xyXG4gIC8qIHByaXZhdGVcclxuICBfbXNnSWQ6IG51bWJlcjtcclxuICBfc3Vic2NyaXB0aW9uczogPHVybDogTXNnTGlzdGVuZXJbXT5cclxuXHJcbiAgX3Jlc3BvbnNlVGltZU91dDogbnVtYmVyXHJcbiAgX3Jlc3BvbnNlQ2FsbGJhY2tzOiA8dXJsK2lkOiAobXNnKSA9PiB2b2lkPlxyXG5cclxuICAqL1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5fbXNnSWQgPSAwO1xyXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSB7fTtcclxuXHJcbiAgICBfdGhpcy5fcmVzcG9uc2VUaW1lT3V0ID0gNTAwMDsgLy9kZWZhdWx0IHRvIDNzXHJcbiAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3MgPSB7fTtcclxuXHJcbiAgICBfdGhpcy5fcmVnaXN0ZXJFeHRlcm5hbExpc3RlbmVyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFJlZ2lzdGVyIGxpc3RlbmVyIHRvIHJlY2VpdmUgbWVzc2FnZSB3aGVuIFwibXNnLnRvID09PSB1cmxcIi5cclxuICAqIFNwZWNpYWwgdXJsIFwiKlwiIGZvciBkZWZhdWx0IGxpc3RlbmVyIGlzIGFjY2VwdGVkIHRvIGludGVyY2VwdCBhbGwgbWVzc2FnZXMuXHJcbiAgKiBAcGFyYW0ge1VSTH0gdXJsIEFkZHJlc3MgdG8gaW50ZXJjZXB0LCB0aGEgaXMgaW4gdGhlIG1lc3NhZ2UgXCJ0b1wiXHJcbiAgKiBAcGFyYW0ge0xpc3RlbmVyfSBsaXN0ZW5lciBsaXN0ZW5lclxyXG4gICogQHJldHVybiB7TXNnTGlzdGVuZXJ9IGluc3RhbmNlIG9mIE1zZ0xpc3RlbmVyXHJcbiAgKi9cclxuICBhZGRMaXN0ZW5lcih1cmwsIGxpc3RlbmVyKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBpdGVtID0gbmV3IE1zZ0xpc3RlbmVyKF90aGlzLl9zdWJzY3JpcHRpb25zLCB1cmwsIGxpc3RlbmVyKTtcclxuICAgIGxldCBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW3VybF07XHJcbiAgICBpZiAoIWl0ZW1MaXN0KSB7XHJcbiAgICAgIGl0ZW1MaXN0ID0gW107XHJcbiAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW3VybF0gPSBpdGVtTGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBpdGVtTGlzdC5wdXNoKGl0ZW0pO1xyXG4gICAgcmV0dXJuIGl0ZW07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYW51YWxseSBhZGQgYSByZXNwb25zZSBsaXN0ZW5lci4gT25seSBvbmUgbGlzdGVuZXIgcGVyIG1lc3NhZ2UgSUQgc2hvdWxkIGV4aXN0LlxyXG4gICAqIEFURU5USU9OLCB0aGVyZSBpcyBubyB0aW1lb3V0IGZvciB0aGlzIGxpc3RlbmVyLlxyXG4gICAqIFRoZSBsaXN0ZW5lciBzaG91bGQgYmUgcmVtb3ZlZCB3aXRoIGEgcmVtb3ZlUmVzcG9uc2VMaXN0ZW5lciwgZmFpbGluZyB0byBkbyB0aGlzIHdpbGwgcmVzdWx0IGluIGEgdW5yZWxlYXNlZCBtZW1vcnkgcHJvYmxlbS5cclxuICAgKiBAcGFyYW0ge1VSTH0gdXJsIE9yaWdpbiBhZGRyZXNzIG9mIHRoZSBtZXNzYWdlIHNlbnQsIFwibXNnLmZyb21cIi5cclxuICAgKiBAcGFyYW0ge251bWJlcn0gbXNnSWQgTWVzc2FnZSBJRCB0aGF0IGlzIHJldHVybmVkIGZyb20gdGhlIHBvc3RNZXNzYWdlLlxyXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc3BvbnNlTGlzdGVuZXIgQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHRoZSByZXNwb25zZVxyXG4gICAqL1xyXG4gIGFkZFJlc3BvbnNlTGlzdGVuZXIodXJsLCBtc2dJZCwgcmVzcG9uc2VMaXN0ZW5lcikge1xyXG4gICAgdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbdXJsICsgbXNnSWRdID0gcmVzcG9uc2VMaXN0ZW5lcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlbW92ZSB0aGUgcmVzcG9uc2UgbGlzdGVuZXIuXHJcbiAgICogQHBhcmFtIHtVUkx9IHVybCBPcmlnaW4gYWRkcmVzcyBvZiB0aGUgbWVzc2FnZSBzZW50LCBcIm1zZy5mcm9tXCIuXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1zZ0lkICBNZXNzYWdlIElEIHRoYXQgaXMgcmV0dXJuZWQgZnJvbSB0aGUgcG9zdE1lc3NhZ2VcclxuICAgKi9cclxuICByZW1vdmVSZXNwb25zZUxpc3RlbmVyKHVybCwgbXNnSWQpIHtcclxuICAgIGRlbGV0ZSB0aGlzLl9yZXNwb25zZUNhbGxiYWNrc1t1cmwgKyBtc2dJZF07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgYWxsIGV4aXN0ZW50IGxpc3RlbmVycyBmb3IgdGhlIFVSTFxyXG4gICAqIEBwYXJhbSAge1VSTH0gdXJsIEFkZHJlc3MgcmVnaXN0ZXJlZFxyXG4gICAqL1xyXG4gIHJlbW92ZUFsbExpc3RlbmVyc09mKHVybCkge1xyXG4gICAgZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEhlbHBlciBtZXRob2QgdG8gYmluZCBsaXN0ZW5lcnMgKGluIGJvdGggZGlyZWN0aW9ucykgaW50byBvdGhlciBNaW5pQnVzIHRhcmdldC5cclxuICAgKiBAcGFyYW0gIHtVUkx9IG91dFVybCBPdXRib3VuZCBVUkwsIHJlZ2lzdGVyIGxpc3RlbmVyIGZvciB1cmwgaW4gZGlyZWN0aW9uIFwidGhpcyAtPiB0YXJnZXRcIlxyXG4gICAqIEBwYXJhbSAge1VSTH0gaW5VcmwgSW5ib3VuZCBVUkwsIHJlZ2lzdGVyIGxpc3RlbmVyIGZvciB1cmwgaW4gZGlyZWN0aW9uIFwidGFyZ2V0IC0+IHRoaXNcIlxyXG4gICAqIEBwYXJhbSAge01pbmlCdXN9IHRhcmdldCBUaGUgb3RoZXIgdGFyZ2V0IE1pbmlCdXNcclxuICAgKiBAcmV0dXJuIHtCb3VuZH0gYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlIHByb3BlcnRpZXMgW3RoaXNMaXN0ZW5lciwgdGFyZ2V0TGlzdGVuZXJdIGFuZCB0aGUgdW5iaW5kIG1ldGhvZC5cclxuICAgKi9cclxuICBiaW5kKG91dFVybCwgaW5VcmwsIHRhcmdldCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgdGhpc0xpc3RuID0gX3RoaXMuYWRkTGlzdGVuZXIob3V0VXJsLCAobXNnKSA9PiB7XHJcbiAgICAgIHRhcmdldC5wb3N0TWVzc2FnZShtc2cpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHRhcmdldExpc3RuID0gdGFyZ2V0LmFkZExpc3RlbmVyKGluVXJsLCAobXNnKSA9PiB7XHJcbiAgICAgIF90aGlzLnBvc3RNZXNzYWdlKG1zZyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aGlzTGlzdGVuZXI6IHRoaXNMaXN0bixcclxuICAgICAgdGFyZ2V0TGlzdGVuZXI6IHRhcmdldExpc3RuLFxyXG4gICAgICB1bmJpbmQ6ICgpID0+IHtcclxuICAgICAgICB0aGlzLnRoaXNMaXN0ZW5lci5yZW1vdmUoKTtcclxuICAgICAgICB0aGlzLnRhcmdldExpc3RlbmVyLnJlbW92ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy9wdWJsaXNoIG9uIGRlZmF1bHQgbGlzdGVuZXJzXHJcbiAgX3B1Ymxpc2hPbkRlZmF1bHQobXNnKSB7XHJcbiAgICAvL2lzIHRoZXJlIGFueSBcIipcIiAoZGVmYXVsdCkgbGlzdGVuZXJzP1xyXG4gICAgbGV0IGl0ZW1MaXN0ID0gdGhpcy5fc3Vic2NyaXB0aW9uc1snKiddO1xyXG4gICAgaWYgKGl0ZW1MaXN0KSB7XHJcbiAgICAgIHRoaXMuX3B1Ymxpc2hPbihpdGVtTGlzdCwgbXNnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vcHVibGlzaCBvbiBhIHN1YnNjcmlwdGlvbiBsaXN0LlxyXG4gIF9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZykge1xyXG4gICAgaXRlbUxpc3QuZm9yRWFjaCgoc3ViKSA9PiB7XHJcbiAgICAgIHN1Yi5fY2FsbGJhY2sobXNnKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3Jlc3BvbnNlQ2FsbGJhY2soaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgLy9hdXRvbWF0aWMgbWFuYWdlbWVudCBvZiByZXNwb25zZSBoYW5kbGVyc1xyXG4gICAgaWYgKHJlc3BvbnNlQ2FsbGJhY2spIHtcclxuICAgICAgbGV0IHJlc3BvbnNlSWQgPSBpbk1zZy5mcm9tICsgaW5Nc2cuaWQ7XHJcbiAgICAgIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXSA9IHJlc3BvbnNlQ2FsbGJhY2s7XHJcblxyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICBsZXQgcmVzcG9uc2VGdW4gPSBfdGhpcy5fcmVzcG9uc2VDYWxsYmFja3NbcmVzcG9uc2VJZF07XHJcbiAgICAgICAgZGVsZXRlIF90aGlzLl9yZXNwb25zZUNhbGxiYWNrc1tyZXNwb25zZUlkXTtcclxuXHJcbiAgICAgICAgaWYgKHJlc3BvbnNlRnVuKSB7XHJcbiAgICAgICAgICBsZXQgZXJyb3JNc2cgPSB7XHJcbiAgICAgICAgICAgIGlkOiBpbk1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJyxcclxuICAgICAgICAgICAgYm9keTogeyBjb2RlOiA0MDgsIGRlc2M6ICdSZXNwb25zZSB0aW1lb3V0IScsIHZhbHVlOiBpbk1zZyB9XHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgIHJlc3BvbnNlRnVuKGVycm9yTXNnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0sIF90aGlzLl9yZXNwb25zZVRpbWVPdXQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX29uUmVzcG9uc2UobXNnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmIChtc2cudHlwZSA9PT0gJ3Jlc3BvbnNlJykge1xyXG4gICAgICBsZXQgcmVzcG9uc2VJZCA9IG1zZy50byArIG1zZy5pZDtcclxuICAgICAgbGV0IHJlc3BvbnNlRnVuID0gX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdO1xyXG5cclxuICAgICAgLy9pZiBpdCdzIGEgcHJvdmlzaW9uYWwgcmVzcG9uc2UsIGRvbid0IGRlbGV0ZSByZXNwb25zZSBsaXN0ZW5lclxyXG4gICAgICBpZiAobXNnLmJvZHkuY29kZSA+PSAyMDApIHtcclxuICAgICAgICBkZWxldGUgX3RoaXMuX3Jlc3BvbnNlQ2FsbGJhY2tzW3Jlc3BvbnNlSWRdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAocmVzcG9uc2VGdW4pIHtcclxuICAgICAgICByZXNwb25zZUZ1bihtc2cpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuXHJcbiAgLy9yZWNlaXZlIG1lc3NhZ2VzIGZyb20gZXh0ZXJuYWwgaW50ZXJmYWNlXHJcbiAgX29uTWVzc2FnZShtc2cpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKCFfdGhpcy5fb25SZXNwb25zZShtc2cpKSB7XHJcbiAgICAgIGxldCBpdGVtTGlzdCA9IF90aGlzLl9zdWJzY3JpcHRpb25zW21zZy50b107XHJcbiAgICAgIGlmIChpdGVtTGlzdCkge1xyXG4gICAgICAgIF90aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgX3RoaXMuX3B1Ymxpc2hPbkRlZmF1bHQobXNnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2dlbklkKGluTXNnKSB7XHJcbiAgICAvL1RPRE86IGhvdyBkbyB3ZSBtYW5hZ2UgbWVzc2FnZSBJRCdzPyBTaG91bGQgaXQgYmUgYSBnbG9iYWwgcnVudGltZSBjb3VudGVyLCBvciBwZXIgVVJMIGFkZHJlc3M/XHJcbiAgICAvL0dsb2JhbCBjb3VudGVyIHdpbGwgbm90IHdvcmssIGJlY2F1c2UgdGhlcmUgd2lsbCBiZSBtdWx0aXBsZSBNaW5pQnVzIGluc3RhbmNlcyFcclxuICAgIC8vUGVyIFVSTCwgY2FuIGJlIGEgbG90IG9mIGRhdGEgdG8gbWFpbnRhaW4hXHJcbiAgICAvL01heWJlIGEgY291bnRlciBwZXIgTWluaUJ1cyBpbnN0YW5jZS4gVGhpcyBpcyB0aGUgYXNzdW1lZCBzb2x1dGlvbiBmb3Igbm93LlxyXG4gICAgaWYgKCFpbk1zZy5pZCB8fCBpbk1zZy5pZCA9PT0gMCkge1xyXG4gICAgICB0aGlzLl9tc2dJZCsrO1xyXG4gICAgICBpbk1zZy5pZCA9IHRoaXMuX21zZ0lkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBTZW5kIG1lc3NhZ2VzIHRvIGxvY2FsIGxpc3RlbmVycywgb3IgaWYgbm90IGV4aXN0cyB0byBleHRlcm5hbCBsaXN0ZW5lcnMuXHJcbiAgKiBJdCdzIGhhcyBhbiBvcHRpb25hbCBtZWNoYW5pc20gZm9yIGF1dG9tYXRpYyBtYW5hZ2VtZW50IG9mIHJlc3BvbnNlIGhhbmRsZXJzLlxyXG4gICogVGhlIHJlc3BvbnNlIGhhbmRsZXIgd2lsbCBiZSB1bnJlZ2lzdGVyZWQgYWZ0ZXIgcmVjZWl2aW5nIHRoZSByZXNwb25zZSwgb3IgYWZ0ZXIgcmVzcG9uc2UgdGltZW91dCAoZGVmYXVsdCB0byAzcykuXHJcbiAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgTWVzc2FnZSB0byBzZW5kLiBNZXNzYWdlIElEIGlzIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gdGhlIG1lc3NhZ2UuXHJcbiAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBwYXJhbWV0ZXIsIGlmIHRoZSBkZXZlbG9wZXIgd2hhdCdzIGF1dG9tYXRpYyByZXNwb25zZSBtYW5hZ2VtZW50LlxyXG4gICogQHJldHVybiB7bnVtYmVyfSBSZXR1cm5zIHRoZSBtZXNzYWdlIElELCBpbiBjYXNlIGl0IHNob3VsZCBiZSBuZWVkZWQgZm9yIG1hbnVhbCBtYW5hZ2VtZW50IG9mIHRoZSByZXNwb25zZSBoYW5kbGVyLlxyXG4gICovXHJcbiAgcG9zdE1lc3NhZ2UoaW5Nc2csIHJlc3BvbnNlQ2FsbGJhY2spIHsgfVxyXG5cclxuICAvKipcclxuICAgKiBOb3QgcHVibGljIGF2YWlsYWJsZSwgdXNlZCBieSB0aGUgY2xhc3MgZXh0ZW5zaW9uIGltcGxlbWVudGF0aW9uLCB0byBwcm9jZXNzIG1lc3NhZ2VzIGZyb20gdGhlIHB1YmxpYyBcInBvc3RNZXNzYWdlXCIgd2l0aG91dCBhIHJlZ2lzdGVyZWQgbGlzdGVuZXIuXHJcbiAgICogVXNlZCB0byBzZW5kIHRoZSBtZXNzYWdlIHRvIGFuIGV4dGVybmFsIGludGVyZmFjZSwgbGlrZSBhIFdlYldvcmtlciwgSUZyYW1lLCBldGMuXHJcbiAgICogQHBhcmFtICB7TWVzc2FnZS5NZXNzYWdlfSBtc2cgTWVzc2FnZVxyXG4gICAqL1xyXG4gIF9vblBvc3RNZXNzYWdlKG1zZykgeyAvKmltcGxlbWVudGF0aW9uIHdpbGwgc2VuZCBtZXNzYWdlIHRvIGV4dGVybmFsIHN5c3RlbSovIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTm90IHB1YmxpYyBhdmFpbGFibGUsIHVzZWQgYnkgdGhlIGNsYXNzIGV4dGVuc2lvbiBpbXBsZW1lbnRhdGlvbiwgdG8gcHJvY2VzcyBhbGwgbWVzc2FnZXMgdGhhdCBlbnRlciB0aGUgTWluaUJ1cyBmcm9tIGFuIGV4dGVybmFsIGludGVyZmFjZSwgbGlrZSBhIFdlYldvcmtlciwgSUZyYW1lLCBldGMuXHJcbiAgICogVGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uZSB0aW1lIGluIHRoZSBjb25zdHJ1Y3RvciB0byByZWdpc3RlciBleHRlcm5hbCBsaXN0ZW5lcnMuXHJcbiAgICogVGhlIGltcGxlbWVudGF0aW9uIHdpbGwgcHJvYmFibHkgY2FsbCB0aGUgXCJfb25NZXNzYWdlXCIgbWV0aG9kIHRvIHB1Ymxpc2ggaW4gdGhlIGxvY2FsIGxpc3RlbmVycy5cclxuICAgKiBETyBOT1QgY2FsbCBcInBvc3RNZXNzYWdlXCIsIHRoZXJlIGlzIGEgZGFuZ2VyIHRoYXQgdGhlIG1lc3NhZ2UgZW50ZXJzIGluIGEgY3ljbGUhXHJcbiAgICovXHJcbiAgX3JlZ2lzdGVyRXh0ZXJuYWxMaXN0ZW5lcigpIHsgLyppbXBsZW1lbnRhdGlvbiB3aWxsIHJlZ2lzdGVyIGV4dGVybmFsIGxpc3RlbmVyIGFuZCBjYWxsIFwidGhpcy5fb25NZXNzYWdlKG1zZylcIiAqLyB9XHJcblxyXG59XHJcblxyXG5jbGFzcyBNc2dMaXN0ZW5lciB7XHJcbiAgLyogcHJpdmF0ZVxyXG4gIF9zdWJzY3JpcHRpb25zOiA8c3RyaW5nOiBNc2dMaXN0ZW5lcltdPjtcclxuICBfdXJsOiBzdHJpbmc7XHJcbiAgX2NhbGxiYWNrOiAobXNnKSA9PiB2b2lkO1xyXG4gICovXHJcblxyXG4gIGNvbnN0cnVjdG9yKHN1YnNjcmlwdGlvbnMsIHVybCwgY2FsbGJhY2spIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbnMgPSBzdWJzY3JpcHRpb25zO1xyXG4gICAgX3RoaXMuX3VybCA9IHVybDtcclxuICAgIF90aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHVybCgpIHsgcmV0dXJuIHRoaXMuX3VybDsgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmUgdGhpcyBsaXN0ZW5lciBmcm9tIHRoZSBCdXNcclxuICAgKi9cclxuICByZW1vdmUoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBzdWJzID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbX3RoaXMuX3VybF07XHJcbiAgICBpZiAoc3Vicykge1xyXG4gICAgICBsZXQgaW5kZXggPSBzdWJzLmluZGV4T2YoX3RoaXMpO1xyXG4gICAgICBzdWJzLnNwbGljZShpbmRleCwgMSk7XHJcblxyXG4gICAgICAvL2lmIHRoZXJlIGFyZSBubyBsaXN0ZW5lcnMsIHJlbW92ZSB0aGUgc3Vic2NyaXB0aW9uIGVudGlyZWx5LlxyXG4gICAgICBpZiAoc3Vicy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICBkZWxldGUgX3RoaXMuX3N1YnNjcmlwdGlvbnNbX3RoaXMuX3VybF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1cztcclxuIiwiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5pbXBvcnQgQnVzIGZyb20gJy4vQnVzJztcclxuaW1wb3J0IFBpcGVsaW5lIGZyb20gJy4vUGlwZWxpbmUnO1xyXG5cclxuLyoqXHJcbiogQGF1dGhvciBtaWNhZWxwZWRyb3NhQGdtYWlsLmNvbVxyXG4qIE1lc3NhZ2UgQlVTIEludGVyZmFjZSBpcyBhbiBleHRlbnNpb24gb2YgdGhlIEJ1c1xyXG4qIEl0IGRvZXNuJ3Qgc3VwcG9ydCB0aGUgZGVmYXVsdCAnKicgbGlzdGVuZXIsIGluc3RlYWQgaXQgdXNlcyB0aGUgcmVnaXN0cnkucmVzb2x2ZSguLilcclxuKi9cclxuY2xhc3MgTWVzc2FnZUJ1cyBleHRlbmRzIEJ1cyB7XHJcbiAgLyogcHJpdmF0ZVxyXG4gIF9yZWdpc3RyeTogUmVnaXN0cnlcclxuICBfZm9yd2FyZHM6IHsgPGZyb20tdXJsPjogeyBmbDogTXNnTGlzdGVuZXIsIHNhbmRib3hUb1VybHM6IE1hcChTYW5kYm94LCBbdG8tdXJsXSksIHVybFRvU2FuZGJveDogeyB0by11cmw6IFNhbmRib3ggfSB9IH1cclxuXHJcbiAgX3BpcGVsaW5lOiBQaXBlbGluZVxyXG4gICovXHJcblxyXG4gIC8vVE9ETzogZnV0dXJlIG9wdGltaXphdGlvblxyXG4gIC8vMS4gbWVzc2FnZSBiYXRjaCBwcm9jZXNzaW5nIHdpdGggc2V0SW50ZXJ2YWxcclxuICAvLzIuIHJlc29sdmUgZGVmYXVsdCBnYXRld2F5L3Byb3Rvc3R1YiB3aXRoIHJlZ2lzdGVyLnJlc29sdmVcclxuXHJcbiAgY29uc3RydWN0b3IocmVnaXN0cnkpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5O1xyXG4gICAgdGhpcy5fZm9yd2FyZHMgPSB7fTtcclxuXHJcbiAgICB0aGlzLl9waXBlbGluZSA9IG5ldyBQaXBlbGluZSgoZXJyb3IpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ1BJUEVMSU5FLUVSUk9SOiAnLCBKU09OLnN0cmluZ2lmeShlcnJvcikpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXQgcGlwZWxpbmUoKSB7IHJldHVybiB0aGlzLl9waXBlbGluZTsgfVxyXG5cclxuICAvKipcclxuICAgKiBQb3N0IGEgbWVzc2FnZSBmb3Igcm91dGluZy4gSXQgd2lsbCBmaXJzdCBzZWFyY2ggZm9yIGEgbGlzdGVuZXIsIGlmIHRoZXJlIGlzIG5vIG9uZSwgaXQgc2VuZHMgdG8gYSBleHRlcm5hbCByb3V0aW5nIHVzaW5nIHRoZSBfb25Qb3N0TWVzc2FnZS5cclxuICAgKiBFeHRlcm5hbCByb3V0aW5nIHVzZSB0aGUgcmVnaXN0cnkucmVzb2x2ZSguLikgbWV0aG9kIHRvIGRlY2lkZSB0aGUgZGVzdGluYXRpb24gc2FuZGJveC5cclxuICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBpbk1zZyAgICAgICAgICAgIEpTT04gd2l0aCBtYW5kYXRvcnkgTWVzc2FnZSBzdHJ1Y3R1cmUge2lkLCB0eXBlLCBmcm9tLCB0b31cclxuICAgKiBAcGFyYW0gIHtDYWxsYmFja30gcmVzcG9uc2VDYWxsYmFjayBPcHRpb25hbCBjYWxsYmFjayBpZiBhIHJlc3BvbnNlIGlzIGV4cGVjdGVkIGZyb20gdGhlIHJlcXVlc3QuIEEgcmVzcG9uc2Ugd2lsbCBiZSBhbHdheXMgc2VudCwgZXZlbiBpZiBpdCBpcyBhIFwiVGltZW91dFwiLlxyXG4gICAqIEByZXR1cm4ge251bWJlcn0gICAgICAgICAgICAgICAgICB0aGUgTWVzc2FnZSBpZFxyXG4gICAqL1xyXG4gIHBvc3RNZXNzYWdlKGluTXNnLCByZXNwb25zZUNhbGxiYWNrKSB7XHJcbiAgICBjb25zb2xlLmxvZygnb25QT1NUTWVzc2FnZTogJywgaW5Nc2cpO1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5fZ2VuSWQoaW5Nc2cpO1xyXG5cclxuICAgIF90aGlzLl9waXBlbGluZS5wcm9jZXNzKGluTXNnLCAobXNnKSA9PiB7XHJcblxyXG4gICAgICBfdGhpcy5fcmVzcG9uc2VDYWxsYmFjayhpbk1zZywgcmVzcG9uc2VDYWxsYmFjayk7XHJcblxyXG4gICAgICBpZiAoIV90aGlzLl9vblJlc3BvbnNlKG1zZykpIHtcclxuICAgICAgICBsZXQgaXRlbUxpc3QgPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1ttc2cudG9dO1xyXG4gICAgICAgIGlmIChpdGVtTGlzdCkge1xyXG4gICAgICAgICAgLy9kbyBub3QgcHVibGlzaCBvbiBkZWZhdWx0IGFkZHJlc3MsIGJlY2F1c2Ugb2YgbG9vcGJhY2sgY3ljbGVcclxuICAgICAgICAgIF90aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vaWYgdGhlcmUgaXMgbm8gbGlzdGVuZXIsIHNlbmQgdG8gZXh0ZXJuYWwgaW50ZXJmYWNlXHJcbiAgICAgICAgICBfdGhpcy5fb25Qb3N0TWVzc2FnZShtc2cpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGluTXNnLmlkO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWRkcyBhbiBleHRlcm5hbCBwdWJsaXNoIGFkZHJlc3MgbGlzdGVuZXIuIEV2ZXJ5IG1lc3NhZ2UgZm9yIHRoZSBhZGRyZXNzIHdpbGwgYmUgZm9yd2FyZGVkIHRvIHRoZSBleHRlcm5hbCByb3V0aW5nIGJ5IF9vblBvc3RNZXNzYWdlLlxyXG4gICAqIFRoaXMgbWVhbnMsIGV2ZW4gaWYgdGhlcmUgaXMgYSBsaXN0ZW5lciBmb3IgdGhlIGFkZHJlc3MsIGl0IHdpbGwgYWxzbyBzZW5kIHRoZSBtZXNzYWdlIHRvIHRoZSBleHRlcm5hbCByb3V0aW5nLlxyXG4gICAqIEBwYXJhbSB7VVJMfSBmcm9tIFB1Ymxpc2ggYWRkcmVzcy5cclxuICAgKi9cclxuICBhZGRQdWJsaXNoKGZyb20pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgLy92ZXJpZnkgaWYgZm9yd2FyZCBleGlzdFxyXG4gICAgbGV0IHJlZkNvdW50ID0gX3RoaXMuX2ZvcndhcmRzW2Zyb21dO1xyXG4gICAgaWYgKCFyZWZDb3VudCkge1xyXG4gICAgICBsZXQgZm9yd2FyZExpc3RlbmVyID0gX3RoaXMuYWRkTGlzdGVuZXIoZnJvbSwgKG1zZykgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdNQi1QVUJMSVNIOiAoICcgKyBmcm9tICsgJyApJyk7XHJcbiAgICAgICAgX3RoaXMuX29uUG9zdE1lc3NhZ2UobXNnKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZWZDb3VudCA9IHtcclxuICAgICAgICBjb3VudGVyOiAwLFxyXG4gICAgICAgIGZsOiBmb3J3YXJkTGlzdGVuZXIsXHJcbiAgICAgICAgcmVtb3ZlOiAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmNvdW50ZXItLTtcclxuICAgICAgICAgIGlmICh0aGlzLmNvdW50ZXIgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy5mbC5yZW1vdmUoKTtcclxuICAgICAgICAgICAgZGVsZXRlIF90aGlzLl9mb3J3YXJkc1tmcm9tXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgIF90aGlzLl9mb3J3YXJkc1tmcm9tXSA9IHJlZkNvdW50O1xyXG4gICB9XHJcblxyXG4gICByZWZDb3VudC5jb3VudGVyKys7XHJcbiAgIHJldHVybiByZWZDb3VudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYSBmb3J3YXJkIGxpc3RlbmVyIGZvciBhIG1lc3NhZ2UgZGVzdGluYXRpb24uIEV2ZXJ5IG1lc3NhZ2UgcmVhY2hpbmcgYW4gYWRkcmVzcyB3aWxsIGJlIGFsc28gc2VudCB0byB0aGUgZm9yd2FyZCBhZGRyZXNzLlxyXG4gICAqIEBwYXJhbSB7VVJMfSBmcm9tIE1lc3NhZ2UgZGVzdGluYXRpb24sIGl0J3MgYWN0dWFsbHkgdGhlIGZpZWxkIFwidG9cIiBvZiB0aGUgbWVzc2FnZS5cclxuICAgKiBAcGFyYW0ge1VSTH0gdG8gICBGb3J3YXJkIGFkZHJlc3MuXHJcbiAgICovXHJcbiAgIGFkZEZvcndhcmQoZnJvbSwgdG8pIHtcclxuICAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICByZXR1cm4gX3RoaXMuYWRkTGlzdGVuZXIoZnJvbSwgKG1zZykgPT4ge1xyXG4gICAgICAgY29uc29sZS5sb2coJ01CLUZPUldBUkQ6ICggJyArIGZyb20gKyAnIHRvICcgKyB0byArICcgKScpO1xyXG4gICAgICAgX3RoaXMuZm9yd2FyZCh0bywgbXNnKTtcclxuICAgICB9KTtcclxuICAgfVxyXG5cclxuICAgLyoqXHJcbiAgICAqIEp1c3QgZm9yd2FyZCdzIGEgbWVzc2FnZSB0byB0aGUgZm9yd2FyZCBhZGRyZXNzLiBMaXN0ZW5lcnMgc2hvdWxkIGJlIGF2YWlsYWJsZSBmb3IgdGhlIGZvcndhcmQgYWRkcmVzcy5cclxuICAgICogQHBhcmFtICB7VVJMfSB1cmwgRm9yd2FyZCBhZGRyZXNzLlxyXG4gICAgKiBAcGFyYW0gIHtNZXNzYWdlfSBtc2cgTWVzc2FnZSB0byBmb3J3YXJkXHJcbiAgICAqL1xyXG4gICBmb3J3YXJkKHVybCwgbXNnKSB7XHJcbiAgICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICAgbGV0IGl0ZW1MaXN0ID0gX3RoaXMuX3N1YnNjcmlwdGlvbnNbdXJsXTtcclxuICAgICBpZiAoaXRlbUxpc3QpIHtcclxuICAgICAgIF90aGlzLl9wdWJsaXNoT24oaXRlbUxpc3QsIG1zZyk7XHJcbiAgICAgfVxyXG4gICB9XHJcblxyXG4gICAvL2RlZmF1bHQgcm91dGUsIGlmIHRoZXJlIGFyZSBubyBsaXN0ZW5lcnMgYXZhaWxhYmxlIGZvciBhIG1lc3NhZ2UgZGVzdGluYXRpb24uXHJcbiAgIF9vblBvc3RNZXNzYWdlKG1zZykge1xyXG4gICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgIC8vcmVzb2x2ZSBleHRlcm5hbCBwcm90b3N0dWIuLi5cclxuICAgICBfdGhpcy5fcmVnaXN0cnkucmVzb2x2ZShtc2cudG8pLnRoZW4oKHJvdXRlKSA9PiB7XHJcbiAgICAgICBfdGhpcy5mb3J3YXJkKHJvdXRlLCBtc2cpO1xyXG4gICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgIGNvbnNvbGUubG9nKCdSRVNPTFZFLUVSUk9SOiAnLCBlKTtcclxuICAgICB9KTtcclxuICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZXNzYWdlQnVzO1xyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG4vKipcclxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXHJcbiogU2VxdWVuY2lhbCBwcm9jZXNzb3Igb2YgbWV0aG9kcy4gU2ltaWxhciB0byBob3cgU2VxdWVudGlhbCBQcm9taXNlJ3Mgd29yaywgYnV0IGJldHRlciBmaXQgZm9yIG1lc3NhZ2UgcHJvY2Vzc2luZy5cclxuKiBOb3JtYWwgdXNlIGZvciB0aGlzLCBpcyB0byBpbnRlcmNlcHQgYWxsIG1lc3NhZ2VzIHdpdGggY29uZmlndXJlZCBoYW5kbGVycywgYW5kIGFjdCBhY2NvcmRpbmdseS5cclxuKi9cclxuY2xhc3MgUGlwZWxpbmUge1xyXG4gIC8qIHB1YmxpY1xyXG4gICAgaGFuZGxlcnM6ICgoUGlwZUNvbnRleHQpID0+IHZvaWQpW11cclxuICAgIG9uRmFpbDogKGVycm9yKSA9PiB2b2lkXHJcbiAgKi9cclxuXHJcbiAgY29uc3RydWN0b3IoX29uRmFpbCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5oYW5kbGVycyA9IFtdO1xyXG4gICAgX3RoaXMub25GYWlsID0gX29uRmFpbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEluc2VydCBhIG1lc3NhZ2UgaW4gdGhlIHBpcGVsaW5lIHF1ZXVlLiBBbGwgbWVzc2FnZXMgYXJlIHdyYXBwZWQgd2l0aCBhIFBpcGVDb250ZXh0LlxyXG4gICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyAgICAgICBNZXNzYWdlIGZvciB0aGUgcXVldWVcclxuICAgKiBAcGFyYW0gIHtDYWxsYmFja30gb25EZWxpdmVyIFdoZW4gbWVzc2FnZSBpcyBmaW5pc2hlZCBwcm9jZXNzaW5nIGZyb20gYWxsIGhhbmRsZXJzLCBpdCB3aWxsIGJlIGRlbGl2ZXJlZCBpbiB0aGlzIGNhbGxiYWNrLlxyXG4gICAqL1xyXG4gIHByb2Nlc3MobXNnLCBvbkRlbGl2ZXIpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgaWYgKF90aGlzLmhhbmRsZXJzLmxlbmd0aCA+IDApIHtcclxuICAgICAgbGV0IGl0ZXIgPSBuZXcgSXRlcmF0b3IoX3RoaXMuaGFuZGxlcnMpO1xyXG4gICAgICBpdGVyLm5leHQobmV3IFBpcGVDb250ZXh0KF90aGlzLCBpdGVyLCBtc2csIG9uRGVsaXZlcikpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgb25EZWxpdmVyKG1zZyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuKiBAYXV0aG9yIG1pY2FlbHBlZHJvc2FAZ21haWwuY29tXHJcbiogV3JhcHBlciBhcm91bmQgYSBtZXNzYWdlIHRoYXQgYWRkcyBhY3Rpb25zIHRoYXQgY2FuIGJlIGZpcmVkIGJ5IGFueSBpbnRlcmNlcHRvciBoYW5kbGVyLlxyXG4qIFRoZSBQaXBlbGluZSBpcyBhc3luY2hyb25vdXMsIHNvIGFuIGhhbmRsZXIgc2hvdWxkIGFsd2F5cyBjYWxsIGFuIGFjdGlvbiwgdGhlIGRlZmF1bHQgb25lIGlzIFwibmV4dCgpXCJcclxuKi9cclxuY2xhc3MgUGlwZUNvbnRleHQge1xyXG4gIC8qIHByaXZhdGVcclxuICAgIF9pblN0b3A6IGJvb2xlYW5cclxuXHJcbiAgICBfcGlwZWxpbmU6IFBpcGVsaW5lXHJcbiAgICBfaXRlcjogSXRlcmF0b3JcclxuICAgIF9tc2c6IE1lc3NhZ2VcclxuICAqL1xyXG5cclxuICBjb25zdHJ1Y3RvcihwaXBlbGluZSwgaXRlciwgbXNnLCBvbkRlbGl2ZXIpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX2luU3RvcCA9IGZhbHNlO1xyXG5cclxuICAgIF90aGlzLl9waXBlbGluZSA9IHBpcGVsaW5lO1xyXG4gICAgX3RoaXMuX2l0ZXIgPSBpdGVyO1xyXG4gICAgX3RoaXMuX21zZyA9IG1zZztcclxuICAgIF90aGlzLl9vbkRlbGl2ZXIgPSBvbkRlbGl2ZXI7XHJcbiAgfVxyXG5cclxuICBnZXQgcGlwZWxpbmUoKSB7IHJldHVybiB0aGlzLl9waXBlbGluZTsgfVxyXG5cclxuICBnZXQgbXNnKCkgeyByZXR1cm4gdGhpcy5fbXNnOyB9XHJcbiAgc2V0IG1zZyhpbk1zZykgeyB0aGlzLl9tc2cgPSBpbk1zZzsgfVxyXG5cclxuICAvKipcclxuICAgKiBQcm9jZWVkIHRvIHRoZSBuZXh0IGludGVyY2VwdG9yIGhhbmRsZXIsIHVubGVzcyB0aGVyZSB3YXMgYW4gZXJyb3IuIElmIGl0J3MgdGhlIGxhc3Qgb25lLCBwcm9jZWVkIHRvIG9uRGVsaXZlciBoYW5kbGVyLlxyXG4gICAqL1xyXG4gIG5leHQoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmICghX3RoaXMuX2luU3RvcCkge1xyXG4gICAgICBpZiAoX3RoaXMuX2l0ZXIuaGFzTmV4dCkge1xyXG4gICAgICAgIF90aGlzLl9pdGVyLm5leHQoX3RoaXMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIF90aGlzLl9vbkRlbGl2ZXIoX3RoaXMuX21zZyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFByb2NlZWQgZGlyZWN0bHkgdG8gdGhlIG9uRGVsaXZlciBoYW5kbGVyLCB1bmxlc3MgdGhlcmUgd2FzIGFuIGVycm9yLlxyXG4gICAqL1xyXG4gIGRlbGl2ZXIoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgaWYgKCFfdGhpcy5faW5TdG9wKSB7XHJcbiAgICAgIF90aGlzLl9pblN0b3AgPSB0cnVlO1xyXG4gICAgICBfdGhpcy5fb25EZWxpdmVyKF90aGlzLl9tc2cpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTWFyayB0aGUgY29udGV4dCB3aXRoIGFuIGVycm9yIGFuZCBwcm9jZWVkIHRvIHRoZSBvbkZhaWwgaGFuZGxlci5cclxuICAgKiBAcGFyYW0gIHtbdHlwZV19IGVycm9yIFtkZXNjcmlwdGlvbl1cclxuICAgKi9cclxuICBmYWlsKGVycm9yKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmICghX3RoaXMuX2luU3RvcCkge1xyXG4gICAgICBfdGhpcy5faW5TdG9wID0gdHJ1ZTtcclxuICAgICAgaWYgKF90aGlzLl9waXBlbGluZS5vbkZhaWwpIHtcclxuICAgICAgICBfdGhpcy5fcGlwZWxpbmUub25GYWlsKGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuY2xhc3MgSXRlcmF0b3Ige1xyXG4gIC8qIHByaXZhdGVcclxuICAgIF9pbmRleDogbnVtYmVyXHJcbiAgICBfYXJyYXk6IFtdXHJcbiAgKi9cclxuXHJcbiAgY29uc3RydWN0b3IoYXJyYXkpIHtcclxuICAgIHRoaXMuX2luZGV4ID0gLTE7XHJcbiAgICB0aGlzLl9hcnJheSA9IGFycmF5O1xyXG4gIH1cclxuXHJcbiAgZ2V0IGhhc05leHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5faW5kZXggPCB0aGlzLl9hcnJheS5sZW5ndGggLSAxO1xyXG4gIH1cclxuXHJcbiAgZ2V0IG5leHQoKSB7XHJcbiAgICB0aGlzLl9pbmRleCsrO1xyXG4gICAgcmV0dXJuIHRoaXMuX2FycmF5W3RoaXMuX2luZGV4XTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBpcGVsaW5lO1xyXG4iLCIvKipcclxuKiBDbGFzcyB3aXRoIHRoZSBjcnlwdG9ncmFwaGljIGZ1bmN0aW9ucyBmb3IgdGhlIGF1dGhlbnRpY2F0aW9uIHByb3RvY29sXHJcbipcclxuKi9cclxuY2xhc3MgQ3J5cHRvIHtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZW5jb2RlIGEgYnl0ZUFycmF5IHZhbHVlIGluIGJhc2UgNjQgZW5jb2RlXHJcbiAgKiBAcGFyYW0gICB7Ynl0ZUFycmF5fSAgICB2YWx1ZSAgICBieXRlQXJyYXkgdmFsdWVcclxuICAqIEByZXR1cm4gIHtzdHJpbmd9ICAgZW5jb2RlZCB2YWx1ZVxyXG4gICovXHJcbiAgZW5jb2RlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gYnRvYSh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGRlY29kZSBhIGJhc2U2NCB2YWx1ZSBpbiBhIG5ldyBVaW50OEFycmF5XHJcbiAgKiBAcGFyYW0gICB7c3RyaW5nfSAgICB2YWx1ZSAgICB2YWx1ZSBlbmNvZGVkIGluIGJhc2UgNjRcclxuICAqIEByZXR1cm4gIHtieXRlQXJyYXl9IGRlY29kZWRWYWx1ZVxyXG4gICovXHJcbiAgZGVjb2RlKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoSlNPTi5wYXJzZSgnWycgKyBhdG9iKHZhbHVlKSArICddJykpO1xyXG4gIH1cclxuXHJcbiAgZW5jcnlwdFJTQShwdWJLZXksIGRhdGEpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBfdGhpcy5faW1wb3J0UlNBZW5jcnlwdEtleShuZXcgVWludDhBcnJheShwdWJLZXkpKS50aGVuKGZ1bmN0aW9uKHB1YmxpY0tleSkge1xyXG5cclxuICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHB1YmxpY0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxyXG4gICAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgZGF0YSB5b3Ugd2FudCB0byBlbmNyeXB0XHJcbiAgICAgICAgKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGVuY3J5cHRlZCkge1xyXG4gICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIGVuY3J5cHRlZCBkYXRhXHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdFJTQScsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpO1xyXG4gICAgICAgICAgcmVzb2x2ZShuZXcgVWludDhBcnJheShlbmNyeXB0ZWQpKTtcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRSU0EnLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBkZWNyeXB0UlNBKHByaXZLZXksIGRhdGEpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBfdGhpcy5faW1wb3J0UlNBZGVjcnlwdEtleShwcml2S2V5KS50aGVuKGZ1bmN0aW9uKHByaXZhdGVLZXkpIHtcclxuXHJcbiAgICAgICAgY3J5cHRvLnN1YnRsZS5kZWNyeXB0KFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgbmFtZTogJ1JTQS1PQUVQJ1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwcml2YXRlS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXHJcbiAgICAgICAgICAgIGRhdGEgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YVxyXG4gICAgICAgIClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihkZWNyeXB0ZWQpIHtcclxuXHJcbiAgICAgICAgICBsZXQgZGVjcnlwdGVkRGF0YSA9IG5ldyBVaW50OEFycmF5KGRlY3J5cHRlZCk7XHJcblxyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWRlY3J5cHRSU0EnLCBkZWNyeXB0ZWREYXRhKTtcclxuICAgICAgICAgIHJlc29sdmUoZGVjcnlwdGVkRGF0YSk7XHJcblxyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1kZWNyeXB0UlNBJywgZXJyKTtcclxuICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNpZ25SU0EocHJpdktleSwgZGF0YSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIF90aGlzLl9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xyXG5cclxuICAgICAgICBjcnlwdG8uc3VidGxlLnNpZ24oXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHByaXZhdGVLZXksIC8vZnJvbSBnZW5lcmF0ZUtleSBvciBpbXBvcnRLZXkgYWJvdmVcclxuICAgICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiBkYXRhIHlvdSB3YW50IHRvIHNpZ25cclxuICAgICAgICApXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oc2lnbmF0dXJlKSB7XHJcbiAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgc2lnbmF0dXJlXHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tc2lnblJTQScsIG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpO1xyXG4gICAgICAgICAgcmVzb2x2ZShuZXcgVWludDhBcnJheShzaWduYXR1cmUpKTtcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLXNpZ25SU0EnLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHZlcmlmeVJTQShwdWJLZXksIGRhdGEsIHNpZ25hdHVyZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIF90aGlzLl9pbXBvcnRSU0F2ZXJpZnlLZXkocHViS2V5KS50aGVuKGZ1bmN0aW9uKHB1YmxpY0tleSkge1xyXG5cclxuICAgICAgICBjcnlwdG8uc3VidGxlLnZlcmlmeShcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcHVibGljS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXHJcbiAgICAgICAgICAgIHNpZ25hdHVyZSwgLy9BcnJheUJ1ZmZlciBvZiB0aGUgc2lnbmF0dXJlXHJcbiAgICAgICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGFcclxuICAgICAgICApXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oaXN2YWxpZCkge1xyXG4gICAgICAgICAgLy9yZXR1cm5zIGEgYm9vbGVhbiBvbiB3aGV0aGVyIHRoZSBzaWduYXR1cmUgaXMgdHJ1ZSBvciBub3RcclxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBpc3ZhbGlkKTtcclxuICAgICAgICAgIHJlc29sdmUoaXN2YWxpZCk7XHJcblxyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by12ZXJpZnlSU0EnLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGVuY3J5cHRBRVMoa2V5LCBkYXRhLCBpdikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uKGFlc0tleSkge1xyXG5cclxuICAgICAgICBjcnlwdG8uc3VidGxlLmVuY3J5cHQoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsXHJcbiAgICAgICAgICAgICAgLy9Eb24ndCByZS11c2UgaW5pdGlhbGl6YXRpb24gdmVjdG9ycyFcclxuICAgICAgICAgICAgICAvL0Fsd2F5cyBnZW5lcmF0ZSBhIG5ldyBpdiBldmVyeSB0aW1lIHlvdXIgZW5jcnlwdCFcclxuICAgICAgICAgICAgICBpdjogaXZcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWVzS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXHJcbiAgICAgICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgZGF0YSB5b3Ugd2FudCB0byBlbmNyeXB0XHJcbiAgICAgICAgKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKGVuY3J5cHRlZCkge1xyXG4gICAgICAgICAgLy9yZXR1cm5zIGFuIEFycmF5QnVmZmVyIGNvbnRhaW5pbmcgdGhlIGVuY3J5cHRlZCBkYXRhXHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZW5jcnlwdEFFUycsIG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCkpO1xyXG4gICAgICAgICAgcmVzb2x2ZShuZXcgVWludDhBcnJheShlbmNyeXB0ZWQpKTtcclxuXHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnY3J5cHRvLWVuY3J5cHRBRVMnLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRlY3J5cHRBRVMoa2V5LCBkYXRhLCBpdikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIF90aGlzLl9pbXBvcnRBRVNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uKGFlc0tleSkge1xyXG5cclxuICAgICAgICBjcnlwdG8uc3VidGxlLmRlY3J5cHQoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBuYW1lOiAnQUVTLUNCQycsXHJcbiAgICAgICAgICAgICAgaXY6IGl2XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFlc0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxyXG4gICAgICAgICAgICBkYXRhIC8vQXJyYXlCdWZmZXIgb2YgdGhlIGRhdGFcclxuICAgICAgICApXHJcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGVjcnlwdGVkKSB7XHJcblxyXG4gICAgICAgICAgbGV0IGRlY29kZWREYXRhID0gX3RoaXMuX3V0ZjhEZWNvZGUobmV3IFVpbnQ4QXJyYXkoZGVjcnlwdGVkKSk7XHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZGVjcnlwdEFFUycsIGRlY29kZWREYXRhKTtcclxuICAgICAgICAgIHJlc29sdmUoZGVjb2RlZERhdGEpO1xyXG5cclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8tZGVjcnlwdEFFUycsIGVycik7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBjcmVhdGVzIGEgaGFzaCB1c2luZyB0aGUgSE1BQyBhbGdvcml0aG1cclxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICAga2V5ICAgICAgIGtleSB0byBiZSB1c2VkIGluIHRoZSBobWFjXHJcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgZGF0YSAgICAgICBpbmZvcm1hdGlvbiB0byBiZSBoYXNoZWRcclxuICAqIEByZXR1cm4gIHtieXRlQXJyYXl9ICAgc2lnbmF0dXJlICByZXN1bHRpbmcgaGFzaFxyXG4gICovXHJcbiAgaGFzaEhNQUMoa2V5LCBkYXRhKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMuX2ltcG9ydEhNQUNrZXkoa2V5KS50aGVuKGZ1bmN0aW9uKGhtYWNLZXkpIHtcclxuXHJcbiAgICAgICAgY3J5cHRvLnN1YnRsZS5zaWduKFxyXG4gICAgICAgIHtcclxuICAgICAgICAgIG5hbWU6ICdITUFDJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaG1hY0tleSwgLy9mcm9tIGdlbmVyYXRlS2V5IG9yIGltcG9ydEtleSBhYm92ZVxyXG4gICAgICAgIF90aGlzLl91dGY4RW5jb2RlKGRhdGEpIC8vQXJyYXlCdWZmZXIgb2YgZGF0YSB5b3Ugd2FudCB0byBzaWduXHJcbiAgICAgICAgKVxyXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHNpZ25hdHVyZSkge1xyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWhhc2hITUFDJywgc2lnbmF0dXJlKTtcclxuXHJcbiAgICAgICAgICAvL3JldHVybnMgYW4gQXJyYXlCdWZmZXIgY29udGFpbmluZyB0aGUgc2lnbmF0dXJlXHJcbiAgICAgICAgICByZXNvbHZlKG5ldyBVaW50OEFycmF5KHNpZ25hdHVyZSkpO1xyXG5cclxuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdjcnlwdG8taGFzaEhNQUMnLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIHZlcmlmaWVzIGFuIGhhc2ggdXNpbmcgdGhlIEhNQUMgYWxnb3JpdGhtXHJcbiAgKiBAcGFyYW0gIHtieXRlQXJyYXl9ICAgIGtleSAgICAgICBrZXkgdG8gYmUgdXNlZCBpbiB0aGUgaG1hY1xyXG4gICogQHBhcmFtICB7c3RyaW5nfSAgICAgIGRhdGEgICAgICAgaW5mb3JtYXRpb24gdG8gYmUgaGFzaGVkIHRvIGNvbXBhcmVcclxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gIHNpZ25hdHVyZSAgIGhhc2ggdG8gY29tcGFyZSB3aXRoIHRoZSByZWNlaXZlZCBkYXRhXHJcbiAgKiBAcmV0dXJuICB7Ym9vbGVhbn0gICBpc3ZhbGlkICAgICBib29sZWFuIHNheWluZyBpZiB0aGUgZGF0YSBjb3JyZXNwb25kcyB0byB0aGUgaGFzaCByZWNlaXZlZFxyXG4gICovXHJcbiAgdmVyaWZ5SE1BQyhrZXksIGRhdGEsIHNpZ25hdHVyZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLl9pbXBvcnRITUFDa2V5KGtleSkudGhlbihmdW5jdGlvbihobWFjS2V5KSB7XHJcblxyXG4gICAgICAgIGNyeXB0by5zdWJ0bGUudmVyaWZ5KFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnSE1BQydcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBobWFjS2V5LCAvL2Zyb20gZ2VuZXJhdGVLZXkgb3IgaW1wb3J0S2V5IGFib3ZlXHJcbiAgICAgICAgICBzaWduYXR1cmUsIC8vQXJyYXlCdWZmZXIgb2YgdGhlIHNpZ25hdHVyZVxyXG4gICAgICAgICAgX3RoaXMuX3V0ZjhFbmNvZGUoZGF0YSkgLy9BcnJheUJ1ZmZlciBvZiB0aGUgZGF0YVxyXG4gICAgICAgIClcclxuICAgICAgICAudGhlbihmdW5jdGlvbihpc3ZhbGlkKSB7XHJcbiAgICAgICAgICAvL3JldHVybnMgYSBib29sZWFuIG9uIHdoZXRoZXIgdGhlIHNpZ25hdHVyZSBpcyB0cnVlIG9yIG5vdFxyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLXZlcmlmeUhNQUMnLCBpc3ZhbGlkKTtcclxuICAgICAgICAgIChpc3ZhbGlkKSA/IHJlc29sdmUoaXN2YWxpZCkgOiByZWplY3QoaXN2YWxpZCk7XHJcblxyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLXZlcmlmeUhNQUMnLCBlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBnZW5lcmF0ZXMgYSBSU0EgcHVibGljL3ByaXZhdGUga2V5IHBhaXIgd2l0aCBhIG1vZHVsdXMgbGVuZ3RoIG9mIDIwNDggYml0c1xyXG4gICogQHJldHVybiAge0pTT059ICAga2V5UGFpciAgICBqc29uIGNvbnRhaW5pbmcgdGhlIHB1YmxpYyBhbmQgcHJpdmF0ZSBrZXlzXHJcbiAgKi9cclxuICBnZW5lcmF0ZVJTQUtleVBhaXIoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGtleVBhaXIgPSB7fTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGNyeXB0by5zdWJ0bGUuZ2VuZXJhdGVLZXkoXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiAnUlNBLVBTUycsXHJcbiAgICAgICAgbW9kdWx1c0xlbmd0aDogMjA0OCwgLy9jYW4gYmUgMTAyNCwgMjA0OCwgb3IgNDA5NlxyXG4gICAgICAgIHB1YmxpY0V4cG9uZW50OiBuZXcgVWludDhBcnJheShbMHgwMSwgMHgwMCwgMHgwMV0pLFxyXG4gICAgICAgIGhhc2g6IHtuYW1lOiAnU0hBLTI1Nid9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMidcclxuICAgICAgfSxcclxuICAgICAgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KVxyXG4gICAgICBbJ3NpZ24nLCAndmVyaWZ5J10gLy9jYW4gYmUgYW55IGNvbWJpbmF0aW9uIG9mICdzaWduJyBhbmQgJ3ZlcmlmeSdcclxuXHJcbiAgICAgICkudGhlbihmdW5jdGlvbihrZXkpIHtcclxuICAgICAgICAvL3JldHVybnMgYSBrZXlwYWlyIG9iamVjdFxyXG4gICAgICAgIC8vY29uc29sZS5sb2coa2V5KTtcclxuXHJcbiAgICAgICAgY3J5cHRvLnN1YnRsZS5leHBvcnRLZXkoXHJcbiAgICAgICAgICAnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXHJcbiAgICAgICAgICBrZXkucHVibGljS2V5IC8vY2FuIGJlIGEgcHVibGljS2V5IG9yIHByaXZhdGVLZXksIGFzIGxvbmcgYXMgZXh0cmFjdGFibGUgd2FzIHRydWVcclxuICAgICAgICApLnRoZW4oZnVuY3Rpb24ocHVibGljS2V5KSB7XHJcbiAgICAgICAgICAvL3JldHVybnMgdGhlIGV4cG9ydGVkIGtleSBkYXRhXHJcbiAgICAgICAgICBrZXlQYWlyLnB1YmxpYyAgPSBuZXcgVWludDhBcnJheShwdWJsaWNLZXkpO1xyXG4gICAgICAgICAgcmV0dXJuIGNyeXB0by5zdWJ0bGUuZXhwb3J0S2V5KFxyXG4gICAgICAgICAgICAncGtjczgnLCAvL2NhbiBiZSAnandrJyAocHVibGljIG9yIHByaXZhdGUpLCAnc3BraScgKHB1YmxpYyBvbmx5KSwgb3IgJ3BrY3M4JyAocHJpdmF0ZSBvbmx5KVxyXG4gICAgICAgICAgICBrZXkucHJpdmF0ZUtleSAvL2NhbiBiZSBhIHB1YmxpY0tleSBvciBwcml2YXRlS2V5LCBhcyBsb25nIGFzIGV4dHJhY3RhYmxlIHdhcyB0cnVlXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24ocHJpdmF0ZUtleSkge1xyXG4gICAgICAgICAga2V5UGFpci5wcml2YXRlICA9IG5ldyBVaW50OEFycmF5KHByaXZhdGVLZXkpO1xyXG4gICAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLWdlbmVyYXRlUlNBS2V5UGFpcicsIGtleVBhaXIpO1xyXG5cclxuICAgICAgICAgIHJlc29sdmUoa2V5UGFpcik7XHJcblxyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEdlbmVyYXRlcyBhIDEyOCBiaXQgcmFuZG9tIHZhbHVlLlxyXG4gICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgcmFuZG9tIHZhbHVlXHJcbiAgKi9cclxuICBnZW5lcmF0ZUlWKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgYXJyYXkgPSBuZXcgIFVpbnQ4QXJyYXkoMTYpO1xyXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7XHJcblxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBHZW5lcmF0ZXMgYSAyNTYgYml0IHJhbmRvbSB2YWx1ZS4gMzIgYml0cyBhcmUgZXh0cmF0ZWQgZnJvbSB0aGUgbWFjaGluZSB0aW1lLFxyXG4gICogdGhlIHJlbWFpbmluZyBhcmUgZ2VuZXJhdGVkIHJhbmRvbWx5XHJcbiAgKiBAcmV0dXJuIHtieXRlQXJyYXl9ICBhcnJheSAgICByYW5kb20gdmFsdWVcclxuICAqL1xyXG4gIGdlbmVyYXRlUmFuZG9tKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgYXJyYXkgPSBuZXcgIFVpbnQ4QXJyYXkoMzIpO1xyXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7XHJcblxyXG4gICAgbGV0IGRhdGUgPSBEYXRlLm5vdygpO1xyXG4gICAgbGV0IGRhdGVFbmNvZGVkID0gX3RoaXMuX3V0ZjhFbmNvZGUoZGF0ZSk7XHJcblxyXG4gICAgLy9leHRyYWN0IHRoZSBsZWFzdCBzaWduaWZpY2FudCA0IGJ5dGVzIGluIHRoZSBkYXRlXHJcbiAgICBsZXQgZmluYWxEYXRlID0gZGF0ZUVuY29kZWQuc2xpY2UoZGF0ZUVuY29kZWQubGVuZ3RoIC0gNCwgZGF0ZUVuY29kZWQubGVuZ3RoKTtcclxuXHJcbiAgICAvLyBhZGQgaW4gdGhlIGZpcnN0IDQgYnl0ZXMgb2YgdGhlIGFycmF5IHRoZSBieXRlcyBleHRyYWN0ZWQgcHJldmlvdXNseTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7IGFycmF5W2ldID0gZmluYWxEYXRlW2ldOyB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGdlbmVyYXRlcyBhIHByZW1hc3RlciBzZWNyZXQgKFBNUykgb2YgNDggYnl0ZXMgKDM4NCBiaXRzKSByYW5kb21seVxyXG4gICogQHJldHVybiB7Ynl0ZUFycmF5fSAgYXJyYXkgICAgcHJlbWFzdGVyIHNlY3JldCBrZXlcclxuICAqL1xyXG4gIGdlbmVyYXRlUE1TKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBsZXQgYXJyYXkgPSBuZXcgVWludDhBcnJheSg0OCk7XHJcbiAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGFycmF5KTtcclxuICAgIHJldHVybiBhcnJheTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZ2VuZXJhdGVzIGEgbWFzdGVyS2V5IHNlY3JldCAoUE1TKSBvZiA0OCBieXRlcyAoMzg0IGJpdHMpIHVzaW5nIHRoZSBwcmVtYXN0ZXIgc2VjcmV0IGFuZFxyXG4gICogdHdvIHJhbmRvbXNcclxuICAqIEByZXR1cm4ge2J5dGVBcnJheX0gIGFycmF5ICAgIG1hc3RlciBzZWNyZXQga2V5IHdpdGggNDggYnl0ZXNcclxuICAqL1xyXG4gIGdlbmVyYXRlTWFzdGVyU2VjcmV0KGhtYWNLZXksIGRhdGEpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBsZXQga2V5ID0gbmV3IFVpbnQ4QXJyYXkoNDgpO1xyXG4gICAgICBsZXQgc2VlZCA9IGRhdGE7XHJcblxyXG4gICAgICBfdGhpcy5fZGlnZXN0KGhtYWNLZXkpLnRoZW4oKGRpZ2VzdGVkS2V5KSA9PiB7XHJcblxyXG4gICAgICAgIF90aGlzLmhhc2hITUFDKGRpZ2VzdGVkS2V5LCBzZWVkKS50aGVuKGZ1bmN0aW9uKGtleXBhcnQwKSB7XHJcblxyXG4gICAgICAgICAgLy9jb3B5IHRoZSBmaXJzdCAzMiBieXRlcyBpbnRvIHRoZSBrZXlcclxuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzI7IGkrKykgeyBrZXlbaV0gPSBrZXlwYXJ0MFtpXTsgfVxyXG4gICAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGRpZ2VzdGVkS2V5LCBzZWVkICsga2V5cGFydDApO1xyXG5cclxuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uKGtleXBhcnQxKSB7XHJcblxyXG4gICAgICAgICAgLy9jb3B5IHRoZSBmaXJzdCAxNiBieXRlcyB0byB0aGUga2V5IHJlbWFpbmluZyAxNiBieXRlc1xyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7IGtleVtpICsgMzJdID0ga2V5cGFydDFbaV07IH1cclxuICAgICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZU1hc3RlclNlY3JldCcsIGtleSk7XHJcbiAgICAgICAgICByZXNvbHZlKGtleSk7XHJcblxyXG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZU1hc3RlclNlY3JldCcsIGVycik7XHJcbiAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGdlbmVyYXRlcyBib3RoIHVzZXJzIE1BQyBhbmQgZW5jcnlwdGlvbiBrZXlzLiBnZW5lcmF0ZSBhcyBvdXRwdXQgYW4gYXJyYXlcclxuICAqIHdpdGggNCBieXRlQXJyYXkgZWFjaCB3aXRoIDMyIGJ5dGVzXHJcbiAgKiBAcGFyYW0gIHtieXRlQXJyYXl9ICAgICAgICBzZWNyZXQgICAgICAgc2VjcmV0IHRvIGJlIHVzZWQgaW4gdGhlIEhNQUMgZnVuY3Rpb25cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIGRhdGEgICAgICAgICBpbmZvcm1hdGlvbiB0byBiZSB1c2VkIGFzIHNlZWRcclxuICAqIEByZXR1cm4ge0FycmF5PGJ5dGVBcnJheT59IGtleSAgICAgICAgICBhcnJheSB3aXRoIHRoZSBpbmZvcm1hdGlvbiB0byBnZW5lcmF0ZSBrZXlzXHJcbiAgKi9cclxuICBnZW5lcmF0ZUtleXMoaG1hY0tleSwgZGF0YSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBsZXQga2V5ID0gW107XHJcbiAgICAgIGxldCBzZWVkID0gZGF0YTtcclxuXHJcbiAgICAgIC8vIGl0ZXJhdGUgNCB0aW1lcyB0byBvYnRhaW4gYSAxMDI0IGtleSBzaXplXHJcbiAgICAgIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQpLnRoZW4oZnVuY3Rpb24oa2V5cGFydDApIHtcclxuICAgICAgICBrZXkucHVzaChrZXlwYXJ0MCk7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzLmhhc2hITUFDKGhtYWNLZXksIHNlZWQgKyBrZXlwYXJ0MCk7XHJcblxyXG4gICAgICB9KS50aGVuKGZ1bmN0aW9uKGtleXBhcnQxKSB7XHJcbiAgICAgICAga2V5LnB1c2goa2V5cGFydDEpO1xyXG4gICAgICAgIHJldHVybiBfdGhpcy5oYXNoSE1BQyhobWFjS2V5LCBzZWVkICsga2V5cGFydDEpO1xyXG5cclxuICAgICAgfSkudGhlbihmdW5jdGlvbihrZXlwYXJ0Mikge1xyXG4gICAgICAgIGtleS5wdXNoKGtleXBhcnQyKTtcclxuICAgICAgICByZXR1cm4gX3RoaXMuaGFzaEhNQUMoaG1hY0tleSwgc2VlZCArIGtleXBhcnQyKTtcclxuXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24oa2V5cGFydDMpIHtcclxuICAgICAgICBrZXkucHVzaChrZXlwYXJ0Myk7XHJcblxyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZUtleXMnLCBrZXkpO1xyXG4gICAgICAgIHJlc29sdmUoa2V5KTtcclxuXHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1nZW5lcmF0ZUtleXMnLCBlcnIpO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vY29uc29sZS5sb2coaG1hY0tleSwgZGF0YSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9pbXBvcnRSU0FzaWduS2V5KHByaXZLZXkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcclxuICAgICAgICAgICdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXHJcbiAgICAgICAgICBwcml2S2V5LFxyXG4gICAgICAgICAgeyAgIC8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xyXG4gICAgICAgICAgICBuYW1lOiAnUlNBU1NBLVBLQ1MxLXYxXzUnLFxyXG4gICAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KVxyXG4gICAgICAgICAgWydzaWduJ10gLy8ndmVyaWZ5JyBmb3IgcHVibGljIGtleSBpbXBvcnQsICdzaWduJyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xyXG4gICAgICApXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHByaXZhdGVLZXkpIHtcclxuICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSlcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQXNpZ25LZXknLCBwcml2YXRlS2V5KTtcclxuICAgICAgICByZXNvbHZlKHByaXZhdGVLZXkpO1xyXG5cclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0FzaWduS2V5JywgZXJyKTtcclxuICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9pbXBvcnRSU0F2ZXJpZnlLZXkocHViS2V5KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXHJcbiAgICAgICAgICAnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXHJcbiAgICAgICAgICBwdWJLZXksXHJcbiAgICAgICAgICB7ICAgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zXHJcbiAgICAgICAgICAgIG5hbWU6ICdSU0FTU0EtUEtDUzEtdjFfNScsXHJcbiAgICAgICAgICAgIGhhc2g6IHtuYW1lOiAnU0hBLTI1Nid9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMidcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXHJcbiAgICAgICAgICBbJ3ZlcmlmeSddIC8vJ3ZlcmlmeScgZm9yIHB1YmxpYyBrZXkgaW1wb3J0LCAnc2lnbicgZm9yIHByaXZhdGUga2V5IGltcG9ydHNcclxuICAgICAgKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihwdWJsaWNLZXkpIHtcclxuICAgICAgICAvL3JldHVybnMgYSBwdWJsaWNLZXkgKG9yIHByaXZhdGVLZXkgaWYgeW91IGFyZSBpbXBvcnRpbmcgYSBwcml2YXRlIGtleSlcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydFJTQXZlcmlmeUtleScsIHB1YmxpY0tleSk7XHJcbiAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpO1xyXG5cclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0F2ZXJpZnlLZXknLCBlcnIpO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX2ltcG9ydFJTQWVuY3J5cHRLZXkocHViS2V5KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXHJcbiAgICAgICAgICAnc3BraScsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXHJcbiAgICAgICAgICBwdWJLZXksXHJcbiAgICAgICAgICB7ICAgLy90aGVzZSBhcmUgdGhlIGFsZ29yaXRobSBvcHRpb25zXHJcbiAgICAgICAgICAgIG5hbWU6ICdSU0EtT0FFUCcsXHJcbiAgICAgICAgICAgIGhhc2g6IHtuYW1lOiAnU0hBLTI1Nid9IC8vY2FuIGJlICdTSEEtMScsICdTSEEtMjU2JywgJ1NIQS0zODQnLCBvciAnU0hBLTUxMidcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXHJcbiAgICAgICAgICBbJ2VuY3J5cHQnXSAvLydlbmNyeXB0JyBvciAnd3JhcEtleScgZm9yIHB1YmxpYyBrZXkgaW1wb3J0IG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAvLydkZWNyeXB0JyBvciAndW53cmFwS2V5JyBmb3IgcHJpdmF0ZSBrZXkgaW1wb3J0c1xyXG4gICAgICApXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHB1YmxpY0tleSkge1xyXG4gICAgICAgIC8vcmV0dXJucyBhIHB1YmxpY0tleSAob3IgcHJpdmF0ZUtleSBpZiB5b3UgYXJlIGltcG9ydGluZyBhIHByaXZhdGUga2V5KVxyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1faW1wb3J0UlNBZW5jcnlwdEtleScsIHB1YmxpY0tleSk7XHJcbiAgICAgICAgcmVzb2x2ZShwdWJsaWNLZXkpO1xyXG5cclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignY3J5cHRvLV9pbXBvcnRSU0FlbmNyeXB0S2V5JywgZXJyKTtcclxuICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9pbXBvcnRSU0FkZWNyeXB0S2V5KHByaXZLZXkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBjcnlwdG8uc3VidGxlLmltcG9ydEtleShcclxuICAgICAgICAgICdwa2NzOCcsIC8vY2FuIGJlICdqd2snIChwdWJsaWMgb3IgcHJpdmF0ZSksICdzcGtpJyAocHVibGljIG9ubHkpLCBvciAncGtjczgnIChwcml2YXRlIG9ubHkpXHJcbiAgICAgICAgICBwcml2S2V5LFxyXG4gICAgICAgICAgeyAgIC8vdGhlc2UgYXJlIHRoZSBhbGdvcml0aG0gb3B0aW9uc1xyXG4gICAgICAgICAgICBuYW1lOiAnUlNBLU9BRVAnLFxyXG4gICAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSAvL2NhbiBiZSAnU0hBLTEnLCAnU0hBLTI1NicsICdTSEEtMzg0Jywgb3IgJ1NIQS01MTInXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KVxyXG4gICAgICAgICAgWydkZWNyeXB0J10gLy8nZW5jcnlwdCcgb3IgJ3dyYXBLZXknIGZvciBwdWJsaWMga2V5IGltcG9ydCBvclxyXG4gICAgICAgICAgICAgICAgICAgICAgLy8nZGVjcnlwdCcgb3IgJ3Vud3JhcEtleScgZm9yIHByaXZhdGUga2V5IGltcG9ydHNcclxuICAgICAgKVxyXG4gICAgICAudGhlbihmdW5jdGlvbihwcml2YXRlS2V5KSB7XHJcbiAgICAgICAgLy9yZXR1cm5zIGEgcHVibGljS2V5IChvciBwcml2YXRlS2V5IGlmIHlvdSBhcmUgaW1wb3J0aW5nIGEgcHJpdmF0ZSBrZXkpXHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnY3J5cHRvLV9pbXBvcnRSU0FkZWNyeXB0S2V5JywgcHJpdmF0ZUtleSk7XHJcbiAgICAgICAgcmVzb2x2ZShwcml2YXRlS2V5KTtcclxuXHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1faW1wb3J0UlNBZGVjcnlwdEtleScsIGVycik7XHJcbiAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBjb25jYXRQTVN3aXRoUmFuZG9tcyhwbXMsIHRvUmFuZG9tLCBmcm9tUmFuZG9tKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBmaW5hbEtleSA9IG5ldyBVaW50OEFycmF5KHBtcy5sZW5ndGggKyB0b1JhbmRvbS5sZW5ndGggKyBmcm9tUmFuZG9tLmxlbmd0aCk7XHJcblxyXG4gICAgLy8gYWRkIFByZW1hc3RlcktleVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgZmluYWxLZXlbaV0gPSBwbXNbaV07XHJcbiAgICB9XHJcblxyXG4gICAgLy9hZGQgdG8gcmFuZG9tXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvUmFuZG9tLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGZpbmFsS2V5W2kgKyBwbXMubGVuZ3RoXSA9IHBtc1tpXTtcclxuICAgIH1cclxuXHJcbiAgICAvL2FkZCBmcm9tIHJhbmRvbVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcm9tUmFuZG9tLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGZpbmFsS2V5W2kgKyBwbXMubGVuZ3RoICsgdG9SYW5kb20ubGVuZ3RoXSA9IHBtc1tpXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZmluYWxLZXk7XHJcbiAgfVxyXG5cclxuICBfZ2VuZXJhdGUyNTZiaXRLZXkoKSB7XHJcbiAgICBsZXQgYXJyYXkgPSBuZXcgIFVpbnQ4QXJyYXkoMzIpO1xyXG4gICAgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhhcnJheSk7XHJcblxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBpbXBvcnRzIHRoZSBzZWNyZXQgdG8gdGhlIEhNQUMgZnVuY3Rpb25cclxuICAqIEBwYXJhbSAge2J5dGVBcnJheX0gICBhcnJheUJ1ZmZlciAgICAgYnl0ZXMgdG8gaW1wb3J0IGFzIGtleVxyXG4gICogQHJldHVybiB7SlNPTn0gICAgICAga2V5ICAgICAgICAgICAgICBrZXkgcmVhZHkgdG8gYmUgdXNlZCBpbiB0aGUgSE1BQyBjcnlwdG9ncmFwaGljIGZ1bmN0aW9uXHJcbiAgKi9cclxuICBfaW1wb3J0SE1BQ2tleShhcnJheUJ1ZmZlcikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5fZGlnZXN0KGFycmF5QnVmZmVyKS50aGVuKChrZXkpID0+IHtcclxuXHJcbiAgICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXHJcbiAgICAgICAgJ3JhdycsIC8vY2FuIGJlICdqd2snIG9yICdyYXcnXHJcbiAgICAgICAga2V5LFxyXG4gICAgICAgIHsgICAvL3RoaXMgaXMgdGhlIGFsZ29yaXRobSBvcHRpb25zXHJcbiAgICAgICAgICBuYW1lOiAnSE1BQycsXHJcbiAgICAgICAgICBoYXNoOiB7bmFtZTogJ1NIQS0yNTYnfSwgLy9jYW4gYmUgJ1NIQS0xJywgJ1NIQS0yNTYnLCAnU0hBLTM4NCcsIG9yICdTSEEtNTEyJ1xyXG4gICAgICAgICAgbGVuZ3RoOiAyNTYgLy9vcHRpb25hbCwgaWYgeW91IHdhbnQgeW91ciBrZXkgbGVuZ3RoIHRvIGRpZmZlciBmcm9tIHRoZSBoYXNoIGZ1bmN0aW9uJ3MgYmxvY2sgbGVuZ3RoXHJcbiAgICAgICAgfSxcclxuICAgICAgICB0cnVlLCAvL3doZXRoZXIgdGhlIGtleSBpcyBleHRyYWN0YWJsZSAoaS5lLiBjYW4gYmUgdXNlZCBpbiBleHBvcnRLZXkpXHJcbiAgICAgICAgWydzaWduJywgJ3ZlcmlmeSddIC8vY2FuIGJlIGFueSBjb21iaW5hdGlvbiBvZiAnc2lnbicgYW5kICd2ZXJpZnknXHJcbiAgICAgICAgKS50aGVuKGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgICAgLy9yZXR1cm5zIHRoZSBzeW1tZXRyaWMga2V5XHJcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tX2ltcG9ydEhNQUNrZXknLCBrZXkpO1xyXG4gICAgICAgICAgcmVzb2x2ZShrZXkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfZGlnZXN0KHZhbHVlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdTSEEtMjU2J1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHZhbHVlIC8vVGhlIGRhdGEgeW91IHdhbnQgdG8gaGFzaCBhcyBhbiBBcnJheUJ1ZmZlclxyXG4gICAgICApXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGhhc2gpIHtcclxuICAgICAgICAvL3JldHVybnMgdGhlIGhhc2ggYXMgYW4gQXJyYXlCdWZmZXJcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdjcnlwdG8tZGlnZXN0JywgbmV3IFVpbnQ4QXJyYXkoaGFzaCkpO1xyXG4gICAgICAgIHJlc29sdmUobmV3IFVpbnQ4QXJyYXkoaGFzaCkpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9pbXBvcnRBRVNrZXkoYXJyYXlCdWZmZXIpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXHJcbiAgICAgICAgICAncmF3JywgLy9jYW4gYmUgJ2p3aycgb3IgJ3JhdydcclxuICAgICAgICAgIGFycmF5QnVmZmVyLFxyXG4gICAgICAgICAgeyAgIC8vdGhpcyBpcyB0aGUgYWxnb3JpdGhtIG9wdGlvbnNcclxuICAgICAgICAgICAgbmFtZTogJ0FFUy1DQkMnXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgdHJ1ZSwgLy93aGV0aGVyIHRoZSBrZXkgaXMgZXh0cmFjdGFibGUgKGkuZS4gY2FuIGJlIHVzZWQgaW4gZXhwb3J0S2V5KVxyXG4gICAgICAgICAgWydlbmNyeXB0JywgJ2RlY3J5cHQnXSAvL2NhbiBiZSAnZW5jcnlwdCcsICdkZWNyeXB0JywgJ3dyYXBLZXknLCBvciAndW53cmFwS2V5J1xyXG4gICAgICApXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgIC8vcmV0dXJucyB0aGUgc3ltbWV0cmljIGtleVxyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2NyeXB0by1pbXBvcnRBRVNrZXknLCBrZXkpO1xyXG4gICAgICAgIHJlc29sdmUoa2V5KTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ2NyeXB0by1pbXBvcnRBRVNrZXknLCBlcnIpO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3V0ZjhFbmNvZGUocykge1xyXG4gICAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigndXRmLTgnKS5lbmNvZGUocyk7XHJcbiAgfVxyXG5cclxuICBfdXRmOERlY29kZShzKSB7XHJcbiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpLmRlY29kZShzKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IENyeXB0bztcclxuIiwiLyoqXHJcbiogZmFrZSBjbGFzcyBmb3IgdGhlIGd1aSB0byBzZWxlY3QgdGhlIGlkZW50aXR5LFxyXG4qIFRPRE8gcmVwbGFjZSB3aXRoIHRoZSBwcm9wZXIgaWRlbnRpdHkgR1VJXHJcbipcclxuKi9cclxuY2xhc3MgR3VpRmFrZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHVybCwgbWVzc2FnZUJ1cykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5fdXJsID0gdXJsO1xyXG4gICAgX3RoaXMuX3dhaXRUaW1lID0gMTAwMDA7XHJcbiAgICBfdGhpcy5fbWVzc2FnZUJ1cyA9IG1lc3NhZ2VCdXM7XHJcblxyXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3RoaXMuX3VybCwgbXNnID0+IHtcclxuXHJcbiAgICAgIGxldCBpZGVudGl0aWVzID0gbXNnLmJvZHkudmFsdWUuaWRlbnRpdGllcztcclxuICAgICAgbGV0IGlkcHMgPSBtc2cuYm9keS52YWx1ZS5pZHBzO1xyXG5cclxuICAgICAgbGV0IHZhbHVlO1xyXG5cclxuICAgICAgaWYgKGlkZW50aXRpZXNbMF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHZhbHVlID0ge3R5cGU6ICdpZGVudGl0eScsIHZhbHVlOiBpZGVudGl0aWVzWzBdLCBjb2RlOiAyMDB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhbHVlID0ge3R5cGU6ICdpZHAnLCB2YWx1ZTogaWRwc1swXS5kb21haW4sIGNvZGU6IDIwMH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCByZXBseU1zZyA9IHtpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCB0bzogbXNnLmZyb20sIGZyb206IG1zZy50bywgYm9keTogdmFsdWV9O1xyXG5cclxuICAgICAgLy8gdG8gdGVzdCBvbiB0aGUgaWRlbnRpdHkgc2lkZSB0aGUgbGlzdGVuZXIgd2l0aG91dCB0aGUgdGltZW91dFxyXG4gICAgICAvLyBjYW4gcmVwcmVzZW50IHRoZSB0aW1lIHRoZSB1c2VyIHRha2VzIHRvIGNob29zZSBhbmQgaWRlbnRpdHlcclxuICAgICAgaWYgKG1zZy5ib2R5LnZhbHVlID09PSAnd2FpdCcpIHtcclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XHJcbiAgICAgICAgfSwgX3RoaXMuX3dhaXRUaW1lKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShyZXBseU1zZyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEd1aUZha2U7XHJcbiIsIi8qKlxyXG4qIFRoZSBJZGVudGl0eSBEYXRhIE1vZGVsIGlzIHVzZWQgdG8gbW9kZWwgdGhlIHJlVEhJTksgVXNlciBlbnRpdHkuIFRoZSBJZGVudGl0eSBkYXRhIG1vZGVsIGlzIGhhbmRsZWQgYnkgSWRlbnRpdHkgTWFuYWdlbWVudCBmdW5jdGlvbmFsaXR5LlxyXG4qXHJcbiovXHJcbmNsYXNzIElkZW50aXR5IHtcclxuXHJcbiAgY29uc3RydWN0b3IoZ3VpZCwgdHlwZSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5ndWlkID0gZ3VpZDtcclxuICAgIF90aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgX3RoaXMuaWRlbnRpZmllcnNMaXN0ID0ge307XHJcblxyXG4gIH1cclxuXHJcbiAgYWRkSWRlbnRpdHkoaWRlbnRpZmllcikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBpZGVudGl0eUluZm9ybWF0aW9uID0ge1xyXG4gICAgICBpZEFzc2VydGlvbjogJycsXHJcbiAgICAgIHNlcnZpY2VBZGRyZXNzOiAnJyxcclxuICAgICAgYXV0aGVudGljYXRpb25EYXRhOiAnJyxcclxuICAgICAgYXV0aG9yaXNhdGlvbkRhdGE6ICcnLFxyXG4gICAgICB1c2VyUHJvZmlsZTogJydcclxuICAgIH07XHJcbiAgICBfdGhpcy5pZGVudGlmaWVyc0xpc3RbaWRlbnRpZmllcl0gPSBpZGVudGl0eUluZm9ybWF0aW9uO1xyXG4gIH1cclxuXHJcbiAgYWRkSWRBc3NlcnRpb24oaWRlbnRpZmllciwgYXNzZXJ0aW9uLCBpZHAsIHNjb3BlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBuZXdJZEFzc2VydGlvbiA9IG5ldyBJZEFzc2VydGlvbihhc3NlcnRpb24sIGlkcCwgc2NvcGUpO1xyXG5cclxuICAgIF90aGlzLmlkQXNzZXJ0aW9uTGlzdC5wdXNoKG5ld0lkQXNzZXJ0aW9uKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIElkQXNzZXJ0aW9uIHtcclxuXHJcbiAgY29uc3RydWN0b3IoYXNzZXJ0aW9uLCBpZHAsIHNjb3BlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLmFzc2VydGlvbiA9IGFzc2VydGlvbjtcclxuICAgIF90aGlzLmlkcCA9IGlkcDtcclxuICAgIF90aGlzLnNjb3BlID0gc2NvcGU7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuY2xhc3MgSWRWYWxpZGF0aW9uIHtcclxuXHJcbiAgY29uc3RydWN0b3IoaWRlbnRpdHksIGNvbnRlbnRzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMuaWRlbnRpdHkgPSBpZGVudGl0eTtcclxuICAgIF90aGlzLmNvbnRlbnRzID0gY29udGVudHM7XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZXMoaWRlbnRpdHksIGNvbnRlbnRzKSB7XHJcbiAgICAvL1RPRE8gaW1wbGVtZW50IHRoZSBsb2dpY1xyXG5cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IElkZW50aXR5O1xyXG4iLCJcclxuaW1wb3J0IHtkaXZpZGVVUkwsIGdldFVzZXJVUkxGcm9tRW1haWwsIGdldFVzZXJFbWFpbEZyb21VUkwsIGlzRGF0YU9iamVjdFVSTCwgY29udmVydFRvVXNlclVSTCwgZ2V0VXNlcklkZW50aXR5RG9tYWluLCBpc0xlZ2FjeX0gZnJvbSAnLi4vdXRpbHMvdXRpbHMuanMnO1xyXG5pbXBvcnQgSWRlbnRpdHkgZnJvbSAnLi9JZGVudGl0eSc7XHJcbmltcG9ydCBDcnlwdG8gZnJvbSAnLi9DcnlwdG8nO1xyXG5pbXBvcnQgR3VpRmFrZSBmcm9tICcuL0d1aUZha2UnO1xyXG5cclxuLyoqXHJcbipcclxuKiBUaGUgSWRlbnRpdHkgTW9kdWxlIChJZCBNb2R1bGUpIGlzIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGhhbmRsaW5nIHRoZVxyXG4qIHVzZXIgaWRlbnRpdHkgYW5kIHRoZSBhc3NvY2lhdGlvbiBvZiB0aGlzIGlkZW50aXR5IHdpdGggdGhlIEh5cGVydHkgaW5zdGFuY2VzLFxyXG4qIGluIG9yZGVyIHRvIG1ha2UgSHlwZXJ0eSBpbnN0YW5jZXMgaWRlbnRpZmlhYmxlLiBUaGUgaWRlbnRpdHkgaW4gdGhlIHJlVEhJTksgcHJvamVjdFxyXG4qIGlzIG5vdCBmaXhlZCB0byBhIHVuaXF1ZSBJZGVudGl0eSBTZXJ2aWNlIFByb3ZpZGVyLCBidXQgb2J0YWluZWQgdGhyb3VnaCBzZXZlcmFsXHJcbiogZGlmZmVyZW50IElkZW50aXR5IHNvdXJjZXMuIFdpdGggdGhpcyBhcHByb2FjaCwgdGhlIElkIE1vZHVsZSBwcm92aWRlcyB0byB0aGUgdXNlciB0aGVcclxuKiBvcHRpb24gdG8gY2hvb3NlIHRoZSBwcmVmZXJyZWQgbWV0aG9kIGZvciBhdXRoZW50aWNhdGlvbi5cclxuKiBUaGlzIG1vZHVsZSB3aWxsIHRodXMgYWJsZSB0byBzdXBwb3J0IG11bHRpcGxlIElkZW50aXR5IGFjcXVpc2l0aW9uIG1ldGhvZHMsXHJcbiogc3VjaCBhcyBPcGVuSUQgY29ubmVjdCAxLjAsIEtlcmJlcm9zIFN5c3RlbSwgb3IgYXV0aGVudGljYXRpb24gdGhyb3VnaCBzbWFydCBjYXJkcy5cclxuKiBGb3IgZXhhbXBsZSwgYSB1c2VyIHdpdGggYSBHb29nbGUgYWNjb3VudCBjYW4gdXNlIHRoZSBHb29nbGUgYXMgYW4gSWRlbnRpdHkgUHJvdmlkZXIgdG8gcHJvdmlkZSBJZGVudGl0eSBUb2tlbnMsXHJcbiogIHdoaWNoIGNhbiBiZSB1c2VkIGJ5IHRoZSBJZGVudGl0eSBNb2R1bGUgdG8gYXNzb2NpYXRlIGl0IHdpdGggYSBIeXBlcnR5IGluc3RhbmNlLlxyXG4qXHJcbiogVGhlIElkZW50aXR5IE1vZHVsZSB1c2VzIGEgbm9kZSBwYWNrYWdlLCB0aGUgSGVsbG9KUywgd2hpY2ggaXMgYSBjbGllbnQtc2lkZSBKYXZhU2NyaXB0IEFQSSBmb3IgYXV0aGVudGljYXRpb25cclxuKiB0aGF0IGZhY2lsaXRhdGVzIHRoZSByZXF1ZXN0cyBmb3IgdGhlIE9wZW5JRCBjb25uZWN0IHByb3RvY29sLiBUaGlzIG1ldGhvZCBhbGxvd3MgZm9yIHNvbWUgYWJzdHJhY3Rpb25cclxuKiB3aGVuIG1ha2luZyByZXF1ZXN0cyBmb3IgZGlmZmVyZW50IElkZW50aXR5IFByb3ZpZGVycywgc3VjaCBhcyBPcGVuSUQgY29ubmVjdCB1c2VkIGJ5IEdvb2dsZSwgRmFjZWJvb2ssIE1pY3Jvc29mdCwgZm9yIGV4YW1wbGUuXHJcbipcclxuKiBXaGVuIGEgcmVxdWVzdCBmb3IgYSB1c2VyIGlkZW50aXR5IGlzIG1hZGUgdXNpbmcgdGhlIG1ldGhvZCBsb2dpbldpdGhSUChpZGVudGlmaWVyLCBzY29wZSksXHJcbiogdGhpcyBtZXRob2Qgd2lsbCBhbmFseXNlIHRoZSBJZGVudGl0eSBQcm92aWRlciBjaG9zZW4gdG8gb2J0YWluIGFuIGlkZW50aXR5IGFuZCB3aWxsIHVzZSB0aGUgSGVsbG9KUyBub2RlIHBhY2thZ2VcclxuKiB3aXRoIHRoZSBzZWxlY3RlZCBJZGVudGl0eSBQcm92aWRlciBhbmQgaWRlbnRpdHkgc2NvcGUuIEFmdGVyIHRoZSBIZWxsb0pTIHJlcXVlc3QgZm9yIGFuIEFjY2VzcyBUb2tlblxyXG4qIHRvIHRoZSBJZGVudGl0eSBQcm92aWRlcnMsIHRoZSB1c2VyIHdpbGwgYmUgcHJvbXB0ZWQgdG8gYXV0aGVudGljYXRlIHRvd2FyZHMgdGhlIElkZW50aXR5IFByb3ZpZGVyLlxyXG4qIFVwb24gcmVjZWl2aW5nIHRoZSBBY2Nlc3MgVG9rZW4sIHRoaXMgdG9rZW4gaXMgdmFsaWRhdGVkIHdpdGggYSBSRVNUZnVsIHdlYiBzZXJ2aWNlIHJlcXVlc3QgdG8gYW4gZW5kcG9pbnRcclxuKiBvbiB0aGUgSWRlbnRpdHkgUHJvdmlkZXIgQXV0aG9yaXphdGlvbiBTZXJ2ZXIsIGFuZCBhZnRlciB0aGUgdmFsaWRhdGlvbiBpcyBkb25lLFxyXG4qIGFuIElEIHRva2VuIGlzIG9idGFpbmVkIHdpdGggdGhlIGluZm9ybWF0aW9uIGFjY29yZGluZyB0byB0aGUgc2NvcGUgcmVxdWlyZWQuXHJcbiogVGhpcyBJRCB0b2tlbiBpcyB0aGVuIHByZXNlcnZlZCBpbiB0aGlzIG1vZHVsZSB0aGF0IGNhbiBvYnRhaW5lZCB0aHJvdWdoIHRoZSBnZXRJZGVudGl0aWVzKClcclxuKiBhbmQgaXMgcGFzc2VkIGFzIHJldHVybiB2YWx1ZSBvZiB0aGUgbG9naW5XaXRoUlAgZnVuY3Rpb24uIFRoZSBtZXRob2RzIGdlbmVyYXRlQXNzZXJ0aW9uIGFuZCB2YWxpZGF0ZUFzc2VydGlvbiBoYXZlIG5vdCB5ZXQgYmVlbiBkZXZlbG9wZWQuXHJcbipcclxuKi9cclxuY2xhc3MgSWRlbnRpdHlNb2R1bGUge1xyXG5cclxuICAvKipcclxuICAqIFRoaXMgaXMgdGhlIGNvbnN0cnVjdG9yIHRvIGluaXRpYWxpc2UgdGhlIElkZW50aXR5IE1vZHVsZSBpdCBkb2VzIG5vdCByZXF1aXJlIGFueSBpbnB1dC5cclxuICAqL1xyXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIHJ1bnRpbWVDYXBhYmlsaXRpZXMsIHN0b3JhZ2VNYW5hZ2VyKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdydW50aW1lVVJMIGlzIG1pc3NpbmcuJyk7XHJcbiAgICBpZiAoIXN0b3JhZ2VNYW5hZ2VyKSB0aHJvdyBuZXcgRXJyb3IoJ3N0b3JhZ2VNYW5hZ2VyIGlzIG1pc3NpbmcnKTtcclxuXHJcbiAgICBfdGhpcy5fcnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7XHJcbiAgICBfdGhpcy5zdG9yYWdlTWFuYWdlciA9IHN0b3JhZ2VNYW5hZ2VyO1xyXG4gICAgX3RoaXMuX2lkbVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZG0nO1xyXG4gICAgX3RoaXMuX2d1aVVSTCA9IF90aGlzLl9ydW50aW1lVVJMICsgJy9pZGVudGl0eS1ndWknO1xyXG4gICAgX3RoaXMucnVudGltZUNhcGFiaWxpdGllcyA9IHJ1bnRpbWVDYXBhYmlsaXRpZXM7XHJcblxyXG4gICAgX3RoaXMuX2RvbWFpbiA9IGRpdmlkZVVSTChfdGhpcy5fcnVudGltZVVSTCkuZG9tYWluO1xyXG5cclxuICAgIC8vdG8gc3RvcmUgaXRlbXMgd2l0aCB0aGlzIGZvcm1hdDoge2lkZW50aXR5OiBpZGVudGl0eVVSTCwgdG9rZW46IHRva2VuSUR9XHJcbiAgICBfdGhpcy5pZGVudGl0aWVzID0gW107XHJcbiAgICBfdGhpcy5lbWFpbHNMaXN0ID0gW107XHJcbiAgICBsZXQgbmV3SWRlbnRpdHkgPSBuZXcgSWRlbnRpdHkoJ2d1aWQnLCdIVU1BTicpO1xyXG4gICAgX3RoaXMuaWRlbnRpdHkgPSBuZXdJZGVudGl0eTtcclxuICAgIF90aGlzLmNyeXB0byA9IG5ldyBDcnlwdG8oKTtcclxuXHJcbiAgICAvL3N0b3JlcyB0aGUgYXNzb2NpYXRpb24gb2YgdGhlIGRhdGFPYmplY3QgYW5kIHRoZSBIeXBlcnR5IHJlZ2lzdGVyZWQgd2l0aGluXHJcbiAgICBfdGhpcy5kYXRhT2JqZWN0c0lkZW50aXR5ID0ge307XHJcblxyXG4gICAgLy8gaGFzaFRhYmxlIHRvIHN0b3JlIGFsbCB0aGUgY3J5cHRvIGluZm9ybWF0aW9uIGJldHdlZW4gdHdvIGh5cGVydGllc1xyXG4gICAgX3RoaXMuY2hhdEtleXMgPSB7fTtcclxuXHJcbiAgICAvLyBoYXNoVGFibGUgdG8gc3RvcmUgdGhlIHN5bW1ldHJpYyBrZXlzIHRvIGJlIHVzZWQgaW4gdGhlIGNoYXQgZ3JvdXBcclxuICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5cyA9IHt9O1xyXG5cclxuICAgIC8vZmFpbHNhZmUgdG8gZW5hYmxlL2Rpc2FibGUgYWxsIHRoZSBjcmlwdG9ncmFwaGljIGZ1bmN0aW9uc1xyXG4gICAgX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSB0cnVlO1xyXG5cclxuICAgIC8vIHZhcmlhYmxlIHRvIGtub3cgaWYgdGhlIEdVSSBpcyBkZXBsb3llZCB0byBjaG9vc2UgdGhlIGlkZW50aXR5LiBpZiB0aGUgcmVhbCBHVUkgaXMgbm90IGRlcGxveWVkLCBhIGZha2UgZ3VpIGlzIGRlcGxveWVkIGluc3RlYWQuXHJcbiAgICBfdGhpcy5ndWlEZXBsb3llZCA9IGZhbHNlO1xyXG5cclxuICAgIC8vIHZlcmlmaWNhdGlvbiBvZiBub2RlSlMsIGFuZCBpbiBjYXNlIGl0IGlzIG5vZGVKUyB0aGVuIGRpc2FibGUgZW5jcnlwdGlvblxyXG4gICAgLy8gVE9ETyBpbXByb3ZlIGxhdGVyLCB0aGlzIGV4aXN0cyBiZWNhdXNlIHRoZSBjcnlwdG8gbGliIHVzZXMgYnJvd3NlciBjcnlwdG9ncmFwaGljIG1ldGhvZHNcclxuICAgIC8vX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gPSAod2luZG93KSA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICBfdGhpcy5fbG9hZElkZW50aXRpZXMoKTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIHJldHVybiB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XHJcbiAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzXHJcbiAgKi9cclxuICBnZXQgbWVzc2FnZUJ1cygpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gX3RoaXMuX21lc3NhZ2VCdXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFNldCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGlzIFJlZ2lzdHJ5XHJcbiAgKiBAcGFyYW0ge01lc3NhZ2VCdXN9ICAgICAgICAgICBtZXNzYWdlQnVzXHJcbiAgKi9cclxuICBzZXQgbWVzc2FnZUJ1cyhtZXNzYWdlQnVzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogcmV0dXJuIHRoZSByZWdpc3RyeSBpbiB0aGlzIGlkTW9kdWxlXHJcbiAgKiBAcGFyYW0ge3JlZ2lzdHJ5fSAgICAgICAgICAgcmVnaXN0cnlcclxuICAqL1xyXG4gIGdldCByZWdpc3RyeSgpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gX3RoaXMuX3JlZ2lzdHJ5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBTZXQgdGhlIHJlZ2lzdHJ5IGluIHRoaXMgaWRNb2R1bGVcclxuICAqIEBwYXJhbSB7cmVnaXN0cnl9ICAgICByZWdcclxuICAqL1xyXG4gIHNldCByZWdpc3RyeShyZWdpc3RyeSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byByZXR1cm4gYWxsIHRoZSBpZGVudGl0aWVzIHJlZ2lzdGVyZWQgd2l0aGluIGEgc2Vzc2lvbiBieSBhIHVzZXIuXHJcbiAgKiBUaGVzZSBpZGVudGl0aWVzIGFyZSByZXR1cm5lZCBpbiBhbiBhcnJheSBjb250YWluaW5nIGEgSlNPTiBwYWNrYWdlIGZvciBlYWNoIHVzZXIgaWRlbnRpdHkuXHJcbiAgKiBAcmV0dXJuIHtBcnJheTxJZGVudGl0aWVzPn0gICAgICAgICBJZGVudGl0aWVzXHJcbiAgKi9cclxuICBnZXRJZGVudGl0aWVzKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5pZGVudGl0aWVzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBnZXRzIGFsbCB0aGUgaW5mb3JtYXRpb24gZnJvbSBhIGdpdmVuIHVzZXJVUkxcclxuICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJVUkwgICAgIHVzZXIgdXJsXHJcbiAgKiBAcmV0dXJuIHtKU09OfSAgICBpZGVudGl0eSAgICBpZGVudGl0eSBidW5kbGUgZnJvbSB0aGUgdXNlclVSTFxyXG4gICovXHJcbiAgZ2V0SWRlbnRpdHkodXNlclVSTCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XHJcblxyXG4gICAgICBsZXQgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTtcclxuICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7XHJcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhyb3cgJ2lkZW50aXR5IG5vdCBmb3VuZCc7XHJcbiAgfVxyXG5cclxuICBfbG9hZElkZW50aXRpZXMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcblxyXG4gICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ2lkTW9kdWxlOmlkZW50aXRpZXMnKS50aGVuKChpZGVudGl0aWVzKSA9PiB7XHJcblxyXG4gICAgICAgIGlmIChpZGVudGl0aWVzKSB7XHJcbiAgICAgICAgICBfdGhpcy5pZGVudGl0aWVzID0gaWRlbnRpdGllcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZGVwbG95R1VJKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzLmd1aURlcGxveWVkID0gdHJ1ZTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAqIGdldCBhIFRva2VuIHRvIGJlIGFkZGVkIHRvIGEgbWVzc2FnZVxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgZnJvbVVSTCAgICAgb3JpZ2luIG9mIHRoZSBtZXNzYWdlXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICB0b1VSTCAgICAgdGFyZ2V0IG9mIHRoZSBtZXNzYWdlXHJcbiAgKiBAcmV0dXJuIHtKU09OfSAgICB0b2tlbiAgICB0b2tlbiB0byBiZSBhZGRlZCB0byB0aGUgbWVzc2FnZVxyXG4gICovXHJcblxyXG4gIGdldFRva2VuKGZyb21VUkwsIHRvVXJsKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBmcm9tLT4nLCBmcm9tVVJMLCAnICB0by0+JywgdG9VcmwpO1xyXG4gICAgICBpZiAodG9VcmwgJiYgdG9Vcmwuc3BsaXQoJ0AnKS5sZW5ndGggPiAxKSB7XHJcbi8vICAgICAgICBjb25zb2xlLmxvZygndG9VcmwnLCB0b1VybCk7XHJcbiAgICAgICAgX3RoaXMucmVnaXN0cnkuaXNMZWdhY3kodG9VcmwpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBpc0xFR0FDWTogJywgcmVzdWx0KTtcclxuICAgICAgICAgIGlmIChyZXN1bHQpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCB0b2tlbiA9IF90aGlzLmdldEFjY2Vzc1Rva2VuKHRvVXJsKTtcclxuICAgICAgICAgICAgaWYgKHRva2VuKVxyXG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRva2VuKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIE5PIElkZW50aXR5Li4gTG9naW4gbm93Jyk7XHJcbiAgICAgICAgICAgIGxldCBkb21haW4gPSBnZXRVc2VySWRlbnRpdHlEb21haW4odG9VcmwpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBkb21haW4tPicsIGRvbWFpbik7XHJcbiAgICAgICAgICAgIF90aGlzLmNhbGxHZW5lcmF0ZU1ldGhvZHMoZG9tYWluKS50aGVuKCh2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbSWRlbnRpdHkuSWRlbnRpdHlNb2R1bGUuZ2V0VG9rZW5dIENhbGxHZW5lcmF0ZW1ldGhvZHMnLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgbGV0IHRva2VuID0gX3RoaXMuZ2V0QWNjZXNzVG9rZW4odG9VcmwpO1xyXG4gICAgICAgICAgICAgIGlmICh0b2tlbilcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRva2VuKTtcclxuICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ05vIEFjY2VzcyB0b2tlbiBmb3VuZCcpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRUb2tlbl0gZXJyb3IgQ2FsbEdlbmVyYXRlbWV0aG9kcycpO1xyXG4gICAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgX3RoaXMuZ2V0SWRUb2tlbihmcm9tVVJMKS50aGVuKGZ1bmN0aW9uKGlkZW50aXR5KSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tJZGVudGl0eS5JZGVudGl0eU1vZHVsZS5nZXRUb2tlbl0gZ2V0SWRUb2tlbicsIGlkZW50aXR5KTtcclxuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eSk7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBlcnJvciBvbiBnZXRUb2tlbicsIGVycm9yKTtcclxuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgX3RoaXMuZ2V0SWRUb2tlbihmcm9tVVJMKS50aGVuKGZ1bmN0aW9uKGlkZW50aXR5KSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnW0lkZW50aXR5LklkZW50aXR5TW9kdWxlLmdldFRva2VuXSBmcm9tIGdldElkVG9rZW4nLCBpZGVudGl0eSk7XHJcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eSk7XHJcbiAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZ2V0IGFuIElkIFRva2VuIGZvciBhIEh5cGVydHlVUkxcclxuICAqIEBwYXJhbSAge1N0cmluZ30gIGh5cGVydHlVUkwgICAgIHRoZSBIeXBlcnR5IGFkZHJlc3NcclxuICAqIEByZXR1cm4ge0pTT059ICAgIHRva2VuICAgIElkIHRva2VuIHRvIGJlIGFkZGVkIHRvIHRoZSBtZXNzYWdlXHJcbiAgKi9cclxuXHJcblxyXG4gIGdldElkVG9rZW4oaHlwZXJ0eVVSTCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgbGV0IHNwbGl0VVJMID0gaHlwZXJ0eVVSTC5zcGxpdCgnOi8vJyk7XHJcbiAgICAgIGlmIChzcGxpdFVSTFswXSAhPT0gJ2h5cGVydHknKSB7XHJcblxyXG4gICAgICAgIF90aGlzLl9nZXRIeXBlcnR5RnJvbURhdGFPYmplY3QoaHlwZXJ0eVVSTCkudGhlbigocmV0dXJuZWRIeXBlcnR5VVJMKSA9PiB7XHJcbiAgICAgICAgICBsZXQgdXNlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldEh5cGVydHlPd25lcihyZXR1cm5lZEh5cGVydHlVUkwpO1xyXG5cclxuICAgICAgICAgIGlmICh1c2VyVVJMKSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgICAgbGV0IGlkZW50aXR5ID0gX3RoaXMuaWRlbnRpdGllc1tpbmRleF07XHJcbiAgICAgICAgICAgICAgaWYgKGlkZW50aXR5LmlkZW50aXR5ID09PSB1c2VyVVJMKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdubyBpZGVudGl0eSB3YXMgZm91bmQgJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignbm8gaWRlbnRpdHkgd2FzIGZvdW5kOiAnLCByZWFzb24pO1xyXG4gICAgICAgICAgcmVqZWN0KHJlYXNvbik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IHVzZXJVUkwgPSBfdGhpcy5yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIoaHlwZXJ0eVVSTCk7XHJcbiAgICAgICAgaWYgKHVzZXJVUkwpIHtcclxuXHJcbiAgICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5pZGVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIGxldCBpZGVudGl0eSA9IF90aGlzLmlkZW50aXRpZXNbaW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAoaWRlbnRpdHkuaWRlbnRpdHkgPT09IHVzZXJVUkwpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eS5tZXNzYWdlSW5mbyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnbm8gaWRlbnRpdHkgd2FzIGZvdW5kLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGdldCBhbiBBY2Nlc3MgVG9rZW4gZm9yIGEgbGVnYWN5VVJMXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICBsZWdhY3lVUkwgICAgIHRoZSBsZWdhY3kgYWRkcmVzc1xyXG4gICogQHJldHVybiB7SlNPTn0gICAgdG9rZW4gICAgQWNjZXNzIHRva2VuIHRvIGJlIGFkZGVkIHRvIHRoZSBtZXNzYWdlXHJcbiAgKi9cclxuXHJcbiAgZ2V0QWNjZXNzVG9rZW4odXJsKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAvKiAgbGV0IHVybFNwbGl0ID0gdXJsLnNwbGl0KCcuJyk7XHJcbiAgICBsZXQgbGVuZ3RoID0gdXJsU3BsaXQubGVuZ3RoOyovXHJcblxyXG4gICAgbGV0IGRvbWFpblRvQ2hlY2sgPSBkaXZpZGVVUkwodXJsKS5kb21haW47XHJcblxyXG4gICAgZm9yIChsZXQgaW5kZXggaW4gX3RoaXMuaWRlbnRpdGllcykge1xyXG4gICAgICBsZXQgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTtcclxuICAgICAgaWYgKGlkZW50aXR5Lmhhc093blByb3BlcnR5KCdpbnRlcndvcmtpbmcnKSAmJiBpZGVudGl0eS5pbnRlcndvcmtpbmcuZG9tYWluID09PSBkb21haW5Ub0NoZWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5LmludGVyd29ya2luZy5hY2Nlc3NfdG9rZW47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcblxyXG4gIGdldElkZW50aXRpZXNUb0Nob29zZSgpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgaWRlbnRpdGllcyA9IF90aGlzLmVtYWlsc0xpc3Q7XHJcbiAgICBsZXQgaWRwcyA9IFt7ZG9tYWluOiAnZ29vZ2xlLmNvbScsIHR5cGU6ICdpZFRva2VuJ30se2RvbWFpbjogJ21pY3Jvc29mdC5jb20nLCB0eXBlOiAnaWRUb2tlbid9LCB7ZG9tYWluOiAnb3JhbmdlLmZyJywgdHlwZTogJ2lkVG9rZW4nfSwge2RvbWFpbjogJ3NsYWNrLmNvbScsIHR5cGU6ICdMZWdhY3knfV07XHJcblxyXG4gICAgcmV0dXJuIHtpZGVudGl0aWVzOiBpZGVudGl0aWVzLCBpZHBzOiBpZHBzfTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gcmV0dXJuIGFsbCB0aGUgdXNlcnMgVVJMcyByZWdpc3RlcmVkIHdpdGhpbiBhIHNlc3Npb25cclxuICAqIFRoZXNlIHVzZXJzIFVSTHMgYXJlIHJldHVybmVkIGluIGFuIGFycmF5IG9mIHN0cmluZ3MuXHJcbiAgKiBAcGFyYW0gIHtCb29sZWFufSAgZW1haWxGb3JtYXQgKE9wdGlvbmFsKSAgIGJvb2xlYW4gdG8gaW5kaWNhdGUgdG8gcmV0dXJuIGluIGVtYWlsIGZvcm1hdFxyXG4gICogQHJldHVybiB7QXJyYXk8U3RyaW5nPn0gICAgICAgICB1c2Vyc1xyXG4gICovXHJcbiAgZ2V0VXNlcnNJRHMoZW1haWxGb3JtYXQpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgdXNlcnMgPSBbXTtcclxuXHJcbiAgICAvL2lmIHJlcXVlc3QgY29tZXMgd2l0aCB0aGUgZW1haWxGb3JtYXQgb3B0aW9uLCB0aGVuIGNvbnZlcnQgdXJsIHRvIGVtYWlsIGZvcm1hdFxyXG4gICAgbGV0IGNvbnZlcnRlciA9IChlbWFpbEZvcm1hdCkgPyBnZXRVc2VyRW1haWxGcm9tVVJMIDogKHZhbHVlKSA9PiB7cmV0dXJuIHZhbHVlO307XHJcblxyXG4gICAgZm9yIChsZXQgaW5kZXggaW4gX3RoaXMuaWRlbnRpdGllcykge1xyXG4gICAgICBsZXQgaWRlbnRpdHkgPSBfdGhpcy5pZGVudGl0aWVzW2luZGV4XTtcclxuICAgICAgdXNlcnMucHVzaChjb252ZXJ0ZXIoaWRlbnRpdHkuaWRlbnRpdHkpKTtcclxuICAgIH1cclxuICAgIHJldHVybiB1c2VycztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBJZGVudGl0eSB3aXRoaW4gYSBzZXNzaW9uXHJcbiAgKiBAcmV0dXJuIHtJZGVudGl0eX0gICAgICAgIGlkZW50aXR5ICAgICAgICAgaWRlbnRpdHlcclxuICAqL1xyXG4gIGdldEN1cnJlbnRJZGVudGl0eSgpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gX3RoaXMuY3VycmVudElkZW50aXR5O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0byBzZXQgdGhlIGN1cnJlbnQgSWRlbnRpdHkgd2l0aCBhIGdpdmVuIElkZW50aXR5XHJcbiAgKiBAcGFyYW0ge0lkZW50aXR5fSAgICAgICAgaWRlbnRpdHkgICAgICAgICBpZGVudGl0eVxyXG4gICovXHJcbiAgc2V0Q3VycmVudElkZW50aXR5KGlkZW50aXR5KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgX3RoaXMuY3VycmVudElkZW50aXR5ID0gaWRlbnRpdHk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIEZ1bmN0aW9uIHRvIHJlbW92ZSBhbiBpZGVudGl0eSBmcm9tIHRoZSBJZGVudGl0aWVzIGFycmF5XHJcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgdXNlcklEICAgICAgdXNlcklEXHJcbiAgKi9cclxuICBkZWxldGVJZGVudGl0eSh1c2VySUQpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IHVzZXJVUkwgPSBjb252ZXJ0VG9Vc2VyVVJMKHVzZXJJRCk7XHJcblxyXG4gICAgZm9yIChsZXQgaWRlbnRpdHkgaW4gX3RoaXMuaWRlbnRpdGllcykge1xyXG4gICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpZGVudGl0eV0uaWRlbnRpdHkgPT09IHVzZXJVUkwpIHtcclxuICAgICAgICBfdGhpcy5pZGVudGl0aWVzLnNwbGljZShpZGVudGl0eSwgMSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdG8gdW5yZWdpc3RlciBhbiBpZGVudGl0eSBmcm9tIHRoZSBlbWFpbHNMaXN0IGFycmF5IGFuZCBub3Qgc2hvdyBpbiB0byB0aGUgR1VJXHJcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgZW1haWwgICAgICBlbWFpbFxyXG4gICovXHJcbiAgdW5yZWdpc3RlcklkZW50aXR5KGVtYWlsKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGZvciAobGV0IGUgaW4gX3RoaXMuZW1haWxzTGlzdCkge1xyXG4gICAgICBpZiAoX3RoaXMuZW1haWxzTGlzdFtlXSA9PT0gZW1haWwpIHtcclxuICAgICAgICBfdGhpcy5lbWFpbHNMaXN0LnNwbGljZShlLCAxKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0aGF0IHJlc29sdmUgYW5kIGNyZWF0ZSB0aGUgZG9tYWluVVJMIGluIGNhc2UgaXQgaXMgcHJvdmlkZWQgb25lLiBJZiBub3QsIHJlc29sdmUgdGhlIGRlZmF1bHQgZG9tYWluVVJMXHJcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgIGlkcERvbWFpbiAgICAgaWRwRG9tYWluIChPcHRpb25hbClcclxuICAqL1xyXG4gIF9yZXNvbHZlRG9tYWluKGlkcERvbWFpbikge1xyXG4gICAgaWYgKCFpZHBEb21haW4pIHtcclxuICAgICAgcmV0dXJuICdkb21haW4taWRwOi8vZ29vZ2xlLmNvbSc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJ2RvbWFpbi1pZHA6Ly8nICsgaWRwRG9tYWluO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBGdW5jdGlvbiB0aGF0IHNlbmRzIGEgcmVxdWVzdCB0byB0aGUgR1VJIHVzaW5nIG1lc3NhZ2VzLiBTZW5kcyBhbGwgaWRlbnRpdGllcyByZWdpc3RlcmVkIGFuZFxyXG4gICogdGhlIElkcHMgc3VwcG9ydGVkLCBhbmQgcmV0dXJuIHRoZSBpZGVudGl0eS9pZHAgcmVjZWl2ZWQgYnkgdGhlIEdVSVxyXG4gICogQHBhcmFtIHtBcnJheTxpZGVudGl0eT59ICBpZGVudGl0aWVzICAgICAgbGlzdCBvZiBpZGVudGl0aWllc1xyXG4gICogQHBhcmFtIHtBcnJheTxTdHJpbmc+fSAgICBpZHBzICAgICAgICAgICAgbGlzdCBvZiBpZHBzIHRvIGF1dGhlbnRpY2F0ZVxyXG4gICogQHJldHVybiB7UHJvbWlzZX0gICAgICAgICByZXR1cm5zIGEgY2hvc2VuIGlkZW50aXR5IG9yIGlkcFxyXG4gICovXHJcbiAgcmVxdWVzdElkZW50aXR5VG9HVUkoaWRlbnRpdGllcywgaWRwcykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcclxuXHJcbiAgICAgIC8vY29uZGl0aW9uIHRvIGNoZWNrIGlmIHRoZSByZWFsIEdVSSBpcyBkZXBsb3llZC4gSWYgbm90LCBkZXBsb3lzIGEgZmFrZSBndWlcclxuICAgICAgaWYgKF90aGlzLmd1aURlcGxveWVkID09PSBmYWxzZSkge1xyXG5cclxuICAgICAgICBsZXQgZ3VpRmFrZSA9IG5ldyBHdWlGYWtlKF90aGlzLl9ndWlVUkwsIF90aGlzLl9tZXNzYWdlQnVzKTtcclxuICAgICAgICBfdGhpcy5ndWlGYWtlID0gZ3VpRmFrZTtcclxuICAgICAgICBfdGhpcy5ndWlEZXBsb3llZCA9IHRydWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBtZXNzYWdlID0ge3R5cGU6J2NyZWF0ZScsIHRvOiBfdGhpcy5fZ3VpVVJMLCBmcm9tOiBfdGhpcy5faWRtVVJMLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHt2YWx1ZToge2lkZW50aXRpZXM6IGlkZW50aXRpZXMsIGlkcHM6IGlkcHN9fX07XHJcblxyXG4gICAgICBsZXQgaWQgPSBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcclxuXHJcbiAgICAgIC8vYWRkIGxpc3RlbmVyIHdpdGhvdXQgdGltb3V0XHJcbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZFJlc3BvbnNlTGlzdGVuZXIoX3RoaXMuX2lkbVVSTCwgaWQsIG1zZyA9PiB7XHJcbiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucmVtb3ZlUmVzcG9uc2VMaXN0ZW5lcihfdGhpcy5faWRtVVJMLCBpZCk7XHJcblxyXG4gICAgICAgIC8vIHRvZG86IHRvIHJldHVybiB0aGUgdXNlciBVUkwgYW5kIG5vdCB0aGUgZW1haWwgb3IgaWRlbnRpZmllclxyXG5cclxuICAgICAgICBpZiAobXNnLmJvZHkuY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICBsZXQgc2VsZWN0ZWRJZGVudGl0eSA9IG1zZy5ib2R5O1xyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdzZWxlY3RlZElkZW50aXR5OiAnLCBzZWxlY3RlZElkZW50aXR5LnZhbHVlKTtcclxuICAgICAgICAgIHJlc29sdmUoc2VsZWN0ZWRJZGVudGl0eSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gcmVxdWVzdGluZyBhbiBpZGVudGl0eSB0byB0aGUgR1VJJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb3BlblBvcHVwKHVybHJlY2VpdmVkKSB7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIGxldCB3aW4gPSB3aW5kb3cub3Blbih1cmxyZWNlaXZlZCwgJ29wZW5JRHJlcXVlc3QnLCAnd2lkdGg9ODAwLCBoZWlnaHQ9NjAwJyk7XHJcbiAgICAgIGlmICh3aW5kb3cuY29yZG92YSkge1xyXG4gICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdsb2Fkc3RhcnQnLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICBsZXQgdXJsID0gZS51cmw7XHJcbiAgICAgICAgICBsZXQgY29kZSA9IC9cXCZjb2RlPSguKykkLy5leGVjKHVybCk7XHJcbiAgICAgICAgICBsZXQgZXJyb3IgPSAvXFwmZXJyb3I9KC4rKSQvLmV4ZWModXJsKTtcclxuXHJcbiAgICAgICAgICBpZiAoY29kZSB8fCBlcnJvcikge1xyXG4gICAgICAgICAgICB3aW4uY2xvc2UoKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSh1cmwpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGxldCBwb2xsVGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmICh3aW4uY2xvc2VkKSB7XHJcbiAgICAgICAgICAgICAgcmVqZWN0KCdTb21lIGVycm9yIG9jY3VyZWQgd2hlbiB0cnlpbmcgdG8gZ2V0IGlkZW50aXR5LicpO1xyXG4gICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHdpbi5kb2N1bWVudC5VUkwuaW5kZXhPZignaWRfdG9rZW4nKSAhPT0gLTEgfHwgd2luLmRvY3VtZW50LlVSTC5pbmRleE9mKGxvY2F0aW9uLm9yaWdpbikgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwocG9sbFRpbWVyKTtcclxuICAgICAgICAgICAgICBsZXQgdXJsID0gICB3aW4uZG9jdW1lbnQuVVJMO1xyXG5cclxuICAgICAgICAgICAgICB3aW4uY2xvc2UoKTtcclxuICAgICAgICAgICAgICByZXNvbHZlKHVybCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRnVuY3Rpb24gdGhhdCBmZXRjaCBhbiBpZGVudGl0eUFzc2VydGlvbiBmcm9tIGEgdXNlci5cclxuICAqXHJcbiAgKiBAcmV0dXJuIHtJZEFzc2VydGlvbn0gICAgICAgICAgICAgIElkQXNzZXJ0aW9uXHJcbiAgKi9cclxuICBnZXRJZGVudGl0eUFzc2VydGlvbihpZGVudGlmaWVyLCBvcmlnaW4sIHVzZXJuYW1lSGludCwgaWRwRG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG5cclxuICAgICAgLy9DSEVDSyB3aGV0aGVyIGlzIGJyb3dzZXIgZW52aXJvbm1lbnQgb3Igbm9kZWpzXHJcbiAgICAgIC8vaWYgaXQgaXMgYnJvd3NlciwgdGhlbiBjcmVhdGUgYSBmYWtlIGlkZW50aXR5XHJcblxyXG4gICAgICBfdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzLmlzQXZhaWxhYmxlKCdicm93c2VyJykudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3J1bnRpbWUgYnJvd3NlciBpZGVudGl0eSBhY3F1aXNpdGlvbiAnLCByZXN1bHQpO1xyXG5cclxuICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgaWRlbnRpdGllc0luZm8gPSBfdGhpcy5nZXRJZGVudGl0aWVzVG9DaG9vc2UoKTtcclxuXHJcbiAgICAgICAgX3RoaXMucmVxdWVzdElkZW50aXR5VG9HVUkoaWRlbnRpdGllc0luZm8uaWRlbnRpdGllcywgaWRlbnRpdGllc0luZm8uaWRwcykudGhlbih2YWx1ZSA9PiB7XHJcblxyXG4gICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICdpZGVudGl0eScpIHtcclxuXHJcbiAgICAgICAgICAvLyAgbGV0IGNob3NlbklEID0gZ2V0VXNlclVSTEZyb21FbWFpbCh2YWx1ZS52YWx1ZSk7XHJcbiAgICAgICAgICAvLyBoYWNrIHdoaWxlIHRoZSB1c2VyIHVybCBpcyBub3QgcmV0dXJuZWQgZnJvbSByZXF1ZXN0SWRlbnRpdHlUb0dVSTtcclxuXHJcbiAgICAgICAgICBsZXQgY2hvc2VuSUQgPSAndXNlcjovLycgKyBfdGhpcy5jdXJyZW50SWRlbnRpdHkuaWRwICsgJy8nICsgdmFsdWUudmFsdWU7XHJcblxyXG4gICAgICAgICAgICAvLyByZXR1cm5zIHRoZSBpZGVudGl0eSBpbmZvIGZyb20gdGhlIGNob3NlbiBpZFxyXG4gICAgICAgICAgICBmb3IgKGxldCBpIGluIF90aGlzLmlkZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgICBpZiAoX3RoaXMuaWRlbnRpdGllc1tpXS5pZGVudGl0eSA9PT0gY2hvc2VuSUQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKF90aGlzLmlkZW50aXRpZXNbaV0ubWVzc2FnZUluZm8pO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZWplY3QoJ25vIGlkZW50aXR5IHdhcyBmb3VuZCAuJyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlLnR5cGUgPT09ICdpZHAnKSB7XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5jYWxsR2VuZXJhdGVNZXRob2RzKHZhbHVlLnZhbHVlLCBvcmlnaW4pLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sIChlcnIpID0+IHtcclxuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KCdlcnJvciBvbiBHVUkgcmVjZWl2ZWQgbWVzc2FnZS4nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBvbiBpZGVudGl0eSBhY3F1aXNpdGlvbiAnLCBlcnJvcik7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBfdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzLmlzQXZhaWxhYmxlKCdub2RlJykudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ25vZGUgaWRlbnRpdHkgYWNxdWlzaXRpb24gJywgcmVzdWx0KTtcclxuXHJcbiAgICAgICAgaWYgKCFyZXN1bHQpIHJldHVybjtcclxuXHJcbiAgICAgICAgaWYgKF90aGlzLmN1cnJlbnRJZGVudGl0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAvL1RPRE8gdmVyaWZ5IHdoZXRoZXIgdGhlIHRva2VuIGlzIHN0aWxsIHZhbGlkIG9yIG5vdC5cclxuICAgICAgICAgIC8vIHNob3VsZCBiZSBuZWVkZWQgdG8gbWFrZSBmdXJ0aGVyIHJlcXVlc3RzLCB0byBvYnRhaW4gYSB2YWxpZCB0b2tlblxyXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMuY3VycmVudElkZW50aXR5KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ2dldElkZW50aXR5QXNzZXJ0aW9uIGZvciBub2RlanMnKTtcclxuICAgICAgICAgIGxldCByYW5kb21OdW1iZXIgPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogMTAwMDApICsgMSk7XHJcbiAgICAgICAgICBsZXQgaWRlbnRpdHlCdW5kbGUgPSB7XHJcbiAgICAgICAgICAgIGFzc2VydGlvbjogJ2Fzc2VydGlvbicsXHJcbiAgICAgICAgICAgIGlkcDonbm9kZWpzJyxcclxuICAgICAgICAgICAgdXNlclByb2ZpbGU6IHtcclxuICAgICAgICAgICAgICBhdmF0YXI6ICdodHRwczovL2xoMy5nb29nbGV1c2VyY29udGVudC5jb20vLVdhQ3JqVk1NVi1RL0FBQUFBQUFBQUFJL0FBQUFBQUFBQUFzLzhPbFZxQ3BTQjljL3Bob3RvLmpwZycsXHJcbiAgICAgICAgICAgICAgY246ICd0ZXN0IG5vZGVqcycsXHJcbiAgICAgICAgICAgICAgdXNlcm5hbWU6ICdub2RlanMtJyArIHJhbmRvbU51bWJlciArICdAbm9kZWpzLmNvbScsXHJcbiAgICAgICAgICAgICAgdXNlclVSTDogJ3VzZXI6Ly9ub2RlanMuY29tL25vZGVqcy0nICsgcmFuZG9tTnVtYmVyXHJcbiAgICAgICAgICAgIH19O1xyXG4gICAgICAgICAgX3RoaXMuY3VycmVudElkZW50aXR5ID0gaWRlbnRpdHlCdW5kbGU7XHJcbiAgICAgICAgICBfdGhpcy5pZGVudGl0aWVzLnB1c2goaWRlbnRpdHlCdW5kbGUpO1xyXG4gICAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdpZE1vZHVsZTppZGVudGl0aWVzJywgMCwgX3RoaXMuaWRlbnRpdGllcykudGhlbigoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShpZGVudGl0eUJ1bmRsZSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIG9uIGlkZW50aXR5IGFjcXVpc2l0aW9uICcsIGVycm9yKTtcclxuICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgY2FsbEdlbmVyYXRlTWV0aG9kcyhpZHAsIG9yaWdpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IHB1YmxpY0tleTtcclxuICAgICAgbGV0IHVzZXJrZXlQYWlyO1xyXG5cclxuICAgICAgLy9nZW5lcmF0ZXMgdGhlIFJTQSBrZXkgcGFpclxyXG4gICAgICBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSU0FLZXlQYWlyKCkudGhlbihmdW5jdGlvbihrZXlQYWlyKSB7XHJcblxyXG4gICAgICAgIHB1YmxpY0tleSA9IGJ0b2Eoa2V5UGFpci5wdWJsaWMpO1xyXG4gICAgICAgIHVzZXJrZXlQYWlyID0ga2V5UGFpcjtcclxuICAgICAgICByZXR1cm4gX3RoaXMuZ2VuZXJhdGVBc3NlcnRpb24ocHVibGljS2V5LCBvcmlnaW4sICcnLCB1c2Vya2V5UGFpciwgaWRwKTtcclxuXHJcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24odXJsKSB7XHJcbiAgICAgICAgcmV0dXJuIF90aGlzLmdlbmVyYXRlQXNzZXJ0aW9uKHB1YmxpY0tleSwgb3JpZ2luLCB1cmwsIHVzZXJrZXlQYWlyLCBpZHApO1xyXG5cclxuICAgICAgfSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gb2J0YWluaW5nIElkZW50aXR5Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2VuZEdlbmVyYXRlTWVzc2FnZShjb250ZW50cywgb3JpZ2luLCB1c2VybmFtZUhpbnQsIGlkcERvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBkb21haW4gPSBfdGhpcy5fcmVzb2x2ZURvbWFpbihpZHBEb21haW4pO1xyXG4gICAgbGV0IG1lc3NhZ2U7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgbWVzc2FnZSA9IHt0eXBlOidleGVjdXRlJywgdG86IGRvbWFpbiwgZnJvbTogX3RoaXMuX2lkbVVSTCwgYm9keToge3Jlc291cmNlOiAnaWRlbnRpdHknLCBtZXRob2Q6ICdnZW5lcmF0ZUFzc2VydGlvbicsIHBhcmFtczoge2NvbnRlbnRzOiBjb250ZW50cywgb3JpZ2luOiBvcmlnaW4sIHVzZXJuYW1lSGludDogdXNlcm5hbWVIaW50fX19O1xyXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVzKSA9PiB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlcy5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcblxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RvcmVJZGVudGl0eShyZXN1bHQsIGtleVBhaXIpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIGxldCBzcGxpdGVkQXNzZXJ0aW9uID0gcmVzdWx0LmFzc2VydGlvbi5zcGxpdCgnLicpO1xyXG4gICAgICBsZXQgYXNzZXJ0aW9uUGFyc2VkO1xyXG5cclxuICAgICAgLy92ZXJpZnkgaWYgdGhlIHRva2VuIGNvbnRhaW5zIHRoZSAzIGNvbXBvbmVudHMsIG9yIGp1c3QgdGhlIGFzc2VydGlvblxyXG4gICAgICBpZiAoc3BsaXRlZEFzc2VydGlvblsxXSkge1xyXG4gICAgICAgIGFzc2VydGlvblBhcnNlZCA9IEpTT04ucGFyc2UoYXRvYihzcGxpdGVkQXNzZXJ0aW9uWzFdKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgIGFzc2VydGlvblBhcnNlZCA9IEpTT04ucGFyc2UoYXRvYihyZXN1bHQuYXNzZXJ0aW9uKSk7XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGlkVG9rZW47XHJcblxyXG4gICAgICAvL1RPRE8gcmVtb3ZlIHRoZSB2ZXJpZmljYXRpb24gYW5kIHJlbW92ZSB0aGUgdG9rZW5JREpTT04gZnJvbSB0aGUgZ29vZ2xlIGlkcFByb3h5O1xyXG4gICAgICBpZiAoYXNzZXJ0aW9uUGFyc2VkLnRva2VuSURKU09OKSB7XHJcbiAgICAgICAgaWRUb2tlbiA9IGFzc2VydGlvblBhcnNlZC50b2tlbklESlNPTjtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZFRva2VuID0gYXNzZXJ0aW9uUGFyc2VkO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZFRva2VuLmlkcCA9IHJlc3VsdC5pZHA7XHJcblxyXG4gICAgICBsZXQgZW1haWwgPSBpZFRva2VuLmVtYWlsIHx8IGlkVG9rZW4uc3ViO1xyXG5cclxuICAgICAgLy8gbGV0IGlkZW50aWZpZXIgPSBnZXRVc2VyVVJMRnJvbUVtYWlsKGVtYWlsKTtcclxuXHJcbiAgICAgIGxldCBpZGVudGlmaWVyID0gJ3VzZXI6Ly8nICsgaWRUb2tlbi5pZHAuZG9tYWluICsgJy8nICsgZW1haWw7XHJcblxyXG4gICAgICByZXN1bHQuaWRlbnRpdHkgPSBpZGVudGlmaWVyO1xyXG5cclxuICAgICAgX3RoaXMuaWRlbnRpdHkuYWRkSWRlbnRpdHkocmVzdWx0KTtcclxuXHJcbiAgICAgIC8vIGNoZWNrIGlmIGV4aXN0cyBhbnkgaW5mb1Rva2VuIGluIHRoZSByZXN1bHQgcmVjZWl2ZWRcclxuICAgICAgbGV0IGluZm9Ub2tlbiA9IChyZXN1bHQuaW5mb1Rva2VuKSA/IHJlc3VsdC5pbmZvVG9rZW4gOiB7fTtcclxuXHJcbiAgICAgIGxldCBjb21tb25OYW1lID0gaWRUb2tlbi5uYW1lIHx8IGVtYWlsLnN1YnN0cmluZygwLCBlbWFpbC5pbmRleE9mKCdAJykpO1xyXG4gICAgICBsZXQgdXNlclByb2ZpbGVCdW5kbGUgPSB7dXNlcm5hbWU6IGVtYWlsLCBjbjogY29tbW9uTmFtZSwgYXZhdGFyOiBpbmZvVG9rZW4ucGljdHVyZSwgbG9jYWxlOiBpbmZvVG9rZW4ubG9jYWxlLCB1c2VyVVJMOiBpZGVudGlmaWVyfTtcclxuXHJcbiAgICAgIC8vY3JlYXRpb24gb2YgYSBuZXcgSlNPTiB3aXRoIHRoZSBpZGVudGl0eSB0byBzZW5kIHZpYSBtZXNzYWdlc1xyXG4gICAgICBsZXQgbmV3SWRlbnRpdHkgPSB7dXNlclByb2ZpbGU6IHVzZXJQcm9maWxlQnVuZGxlLCBpZHA6IHJlc3VsdC5pZHAuZG9tYWluLCBhc3NlcnRpb246IHJlc3VsdC5hc3NlcnRpb259O1xyXG4gICAgICByZXN1bHQubWVzc2FnZUluZm8gPSBuZXdJZGVudGl0eTtcclxuICAgICAgcmVzdWx0LmtleVBhaXIgPSBrZXlQYWlyO1xyXG5cclxuICAgICAgX3RoaXMuY3VycmVudElkZW50aXR5ID0gbmV3SWRlbnRpdHk7XHJcblxyXG4gICAgICAvL3ZlcmlmeSBpZiB0aGUgaWQgYWxyZWFkeSBleGlzdHMuIElmIGFscmVhZHkgZXhpc3RzIHRoZW4gZG8gbm90IGFkZCB0byB0aGUgaWRlbnRpdGllcyBsaXN0O1xyXG4gICAgICBsZXQgaWRBbHJlYWR5RXhpc3RzID0gZmFsc2U7XHJcbiAgICAgIGxldCBvbGRJZDtcclxuICAgICAgZm9yIChsZXQgaWRlbnRpdHkgaW4gX3RoaXMuaWRlbnRpdGllcykge1xyXG4gICAgICAgIGlmIChfdGhpcy5pZGVudGl0aWVzW2lkZW50aXR5XS5pZGVudGl0eSA9PT0gcmVzdWx0LmlkZW50aXR5KSB7XHJcbiAgICAgICAgICBpZEFscmVhZHlFeGlzdHMgPSB0cnVlO1xyXG4gICAgICAgICAgb2xkSWQgPSBfdGhpcy5pZGVudGl0aWVzW2lkZW50aXR5XS5tZXNzYWdlSW5mbztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChpZEFscmVhZHlFeGlzdHMpIHtcclxuICAgICAgICByZXNvbHZlKG9sZElkKTtcclxuICAgICAgICBsZXQgZXhpc3RzID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vY2hlY2sgaWYgdGhlIGlkZW50aXR5IGV4aXN0cyBpbiBlbWFpbExpc3QsIGlmIG5vdCBhZGQgaXRcclxuICAgICAgICAvL1RoaXMgaXMgdXNlZnVsIGlmIGFuIGlkZW50aXR5IHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgYnV0IHdhcyBsYXRlciB1bnJlZ2lzdGVyZWRcclxuICAgICAgICBmb3IgKGxldCBpIGluIF90aGlzLmVtYWlsc0xpc3QpIHtcclxuICAgICAgICAgIGlmIChfdGhpcy5lbWFpbHNMaXN0W2ldID09PSBlbWFpbCkge1xyXG4gICAgICAgICAgICBleGlzdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFleGlzdHMpIHtcclxuICAgICAgICAgIF90aGlzLmVtYWlsc0xpc3QucHVzaChlbWFpbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBfdGhpcy5lbWFpbHNMaXN0LnB1c2goZW1haWwpO1xyXG4gICAgICAgIF90aGlzLmlkZW50aXRpZXMucHVzaChyZXN1bHQpO1xyXG4gICAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgnaWRNb2R1bGU6aWRlbnRpdGllcycsIDAsIF90aGlzLmlkZW50aXRpZXMpLnRoZW4oKCkgPT4ge1xyXG5cclxuICAgICAgICAgIHJlc29sdmUobmV3SWRlbnRpdHkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFJlcXVlc3RzIHRoZSBJZHBQcm94eSBmcm9tIGEgZ2l2ZW4gRG9tYWluIGZvciBhbiBpZGVudGl0eUFzc2VydGlvblxyXG4gICpcclxuICAqIEBwYXJhbSAge0RPTVN0cmluZ30gY29udGVudHMgICAgIGNvbnRlbnRzXHJcbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IG9yaWdpbiAgICAgICBvcmlnaW5cclxuICAqIEBwYXJhbSAge0RPTVN0cmluZ30gdXNlcm5hbWVIaW50IHVzZXJuYW1lSGludFxyXG4gICogQHBhcmFtICB7SlNPTn0gICAgICBrZXlQYWlyICAgICAgIHVzZXIga2V5UGFpclxyXG4gICogQHJldHVybiB7SWRBc3NlcnRpb259ICAgICAgICAgICAgICBJZEFzc2VydGlvblxyXG4gICovXHJcbiAgZ2VuZXJhdGVBc3NlcnRpb24oY29udGVudHMsIG9yaWdpbiwgdXNlcm5hbWVIaW50LCBrZXlQYWlyLCBpZHBEb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ2dlbmVyYXRlQXNzZXJ0aW9uJyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5zZW5kR2VuZXJhdGVNZXNzYWdlKGNvbnRlbnRzLCBvcmlnaW4sIHVzZXJuYW1lSGludCwgaWRwRG9tYWluKS50aGVuKChyZXN1bHQpID0+IHtcclxuXHJcbiAgICAgICAgaWYgKHJlc3VsdC5sb2dpblVybCkge1xyXG5cclxuICAgICAgICAgIF90aGlzLm9wZW5Qb3B1cChyZXN1bHQubG9naW5VcmwpLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgfSwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0KSB7XHJcblxyXG4gICAgICAgICAgX3RoaXMuc3RvcmVJZGVudGl0eShyZXN1bHQsIGtleVBhaXIpLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgfSwgKGVycikgPT4ge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdlcnJvciBvbiBvYnRhaW5pbmcgaWRlbnRpdHkgaW5mb3JtYXRpb24nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBPVEhFUiBVU0VSJ1MgSURFTlRJVFlcclxuICAqL1xyXG5cclxuICAvKipcclxuICAqIFJlcXVlc3RzIHRoZSBJZHBQcm94eSBmcm9tIGEgZ2l2ZW4gRG9tYWluIHRvIHZhbGlkYXRlIGFuIElkZW50aXR5QXNzZXJ0aW9uXHJcbiAgKiBSZXR1cm5zIGEgcHJvbWlzZSB3aXRoIHRoZSByZXN1bHQgZnJvbSB0aGUgdmFsaWRhdGlvbi5cclxuICAqIEBwYXJhbSAge0RPTVN0cmluZ30gYXNzZXJ0aW9uXHJcbiAgKiBAcGFyYW0gIHtET01TdHJpbmd9IG9yaWdpbiAgICAgICBvcmlnaW5cclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgUHJvbWlzZSAgICAgICAgIHByb21pc2Ugd2l0aCB0aGUgcmVzdWx0IGZyb20gdGhlIHZhbGlkYXRpb25cclxuICAqL1xyXG4gIHZhbGlkYXRlQXNzZXJ0aW9uKGFzc2VydGlvbiwgb3JpZ2luLCBpZHBEb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgbGV0IGRvbWFpbiA9IF90aGlzLl9yZXNvbHZlRG9tYWluKGlkcERvbWFpbik7XHJcblxyXG4gICAgbGV0IG1lc3NhZ2UgPSB7dHlwZTonZXhlY3V0ZScsIHRvOiBkb21haW4sIGZyb206IF90aGlzLl9pZG1VUkwsIGJvZHk6IHtyZXNvdXJjZTogJ2lkZW50aXR5JywgbWV0aG9kOiAndmFsaWRhdGVBc3NlcnRpb24nLFxyXG4gICAgICAgICAgICBwYXJhbXM6IHthc3NlcnRpb246IGFzc2VydGlvbiwgb3JpZ2luOiBvcmlnaW59fX07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3VsdC5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQuYm9keS52YWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnZXJyb3InLCByZXN1bHQuYm9keS5jb2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBlbmNyeXB0TWVzc2FnZShtZXNzYWdlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdlbmNyeXB0IG1lc3NhZ2UgJyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBsZXQgaXNIYW5kU2hha2VUeXBlID0gbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJztcclxuXHJcbiAgICAgIC8vaWYgaXMgbm90IHRvIGFwcGx5IGVuY3J5cHRpb24sIHRoZW4gcmV0dXJucyByZXNvbHZlXHJcbiAgICAgIGlmICghX3RoaXMuaXNUb1VzZUVuY3J5cHRpb24gJiYgIWlzSGFuZFNoYWtlVHlwZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdlbmNyeXB0aW9uIGRpc2FibGVkJyk7XHJcbiAgICAgICAgcmV0dXJuIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyBsb2dpYyBhbmQgbW92ZSBpdCB0byBhIHV0aWwgZnVuY3Rpb25cclxuICAgICAgbGV0IHNwbGl0ZWRUb1VSTCA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTtcclxuICAgICAgbGV0IGRhdGFPYmplY3RVUkwgPSBzcGxpdGVkVG9VUkxbMF0gKyAnLy8nICsgc3BsaXRlZFRvVVJMWzJdICsgJy8nICsgc3BsaXRlZFRvVVJMWzNdO1xyXG4gICAgICBpZiAoc3BsaXRlZFRvVVJMLmxlbmd0aCA+IDYpIHtcclxuICAgICAgICBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXSArICcvJyArIHNwbGl0ZWRUb1VSTFs0XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGlzVG9EYXRhT2JqZWN0ID0gaXNEYXRhT2JqZWN0VVJMKGRhdGFPYmplY3RVUkwpO1xyXG4gICAgICBsZXQgaXNUb0xlZ2FjeUlkZW50aXR5ID0gaXNMZWdhY3kobWVzc2FnZS50byk7XHJcbiAgICAgIGxldCBpc0Zyb21IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UuZnJvbSkudHlwZSA9PT0gJ2h5cGVydHknO1xyXG4gICAgICBsZXQgaXNUb0h5cGVydHkgPSBkaXZpZGVVUkwobWVzc2FnZS50bykudHlwZSA9PT0gJ2h5cGVydHknO1xyXG5cclxuICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaXNUb0xlZ2FjeUlkZW50aXR5KSB7XHJcbiAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgfSBlbHNlIGlmIChpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5KSB7XHJcbiAgICAgICAgbGV0IHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKG1lc3NhZ2UuZnJvbSk7XHJcbiAgICAgICAgaWYgKHVzZXJVUkwpIHtcclxuXHJcbiAgICAgICAgICAvLyBjaGVjayBpZiBleGlzdHMgYW55IGtleXMgYmV0d2VlbiB0d28gdXNlcnNcclxuICAgICAgICAgIGxldCBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW21lc3NhZ2UuZnJvbSArICc8LT4nICsgbWVzc2FnZS50b107XHJcbiAgICAgICAgICBpZiAoIWNoYXRLZXlzKSB7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzID0gX3RoaXMuX25ld0NoYXRDcnlwdG8obWVzc2FnZSwgdXNlclVSTCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjcmVhdGVDaGF0S2V5IGVuY3J5cHQnLCBtZXNzYWdlLmZyb20gKyBtZXNzYWdlLnRvKTtcclxuICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IGNoYXRLZXlzO1xyXG4gICAgICAgICAgICBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2UgPSAnc3RhcnRIYW5kU2hha2UnO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkICYmICFpc0hhbmRTaGFrZVR5cGUpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XHJcbiAgICAgICAgICAgIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCBtZXNzYWdlLmJvZHkudmFsdWUsIGl2KS50aGVuKGVuY3J5cHRlZFZhbHVlID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIG1lc3NhZ2UuYm9keS52YWx1ZSArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XHJcblxyXG4gICAgICAgICAgICAgIF90aGlzLmNyeXB0by5oYXNoSE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlKS50aGVuKGhhc2ggPT4ge1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzdWx0IG9mIGhhc2ggJywgaGFzaCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB7aXY6IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpLCB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSksIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCl9O1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgaXMgYSBoYW5kc2hha2UgbWVzc2FnZSwganVzdCByZXNvbHZlIGl0XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGlzSGFuZFNoYWtlVHlwZSkge1xyXG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgICAgLy8gZWxzZSwgc3RhcnRzIGEgbmV3IGhhbmRzaGFrZSBwcm90b2NvbFxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgX3RoaXMuX2RvSGFuZFNoYWtlUGhhc2UobWVzc2FnZSwgY2hhdEtleXMpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLmZyb20gKyAnPC0+JyArIG1lc3NhZ2UudG9dID0gdmFsdWUuY2hhdEtleXM7XHJcblxyXG4gICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICAgIHJlamVjdCgnZW5jcnlwdCBoYW5kc2hha2UgcHJvdG9jb2wgcGhhc2UgJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIC8vaWYgZnJvbSBoeXBlcnR5IHRvIGEgZGF0YU9iamVjdFVSTFxyXG4gICAgICB9IGVsc2UgaWYgKGlzRnJvbUh5cGVydHkgJiYgaXNUb0RhdGFPYmplY3QpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZGF0YU9iamVjdCB2YWx1ZSB0byBlbmNyeXB0OiAnLCBtZXNzYWdlLmJvZHkudmFsdWUpO1xyXG5cclxuICAgICAgICBsZXQgZGF0YU9iamVjdEtleSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXTtcclxuXHJcbiAgICAgICAgLy9pZiBubyBrZXkgZXhpc3RzLCBjcmVhdGUgYSBuZXcgb25lIGlmIGlzIHRoZSByZXBvcnRlciBvZiBkYXRhT2JqZWN0XHJcbiAgICAgICAgaWYgKCFkYXRhT2JqZWN0S2V5KSB7XHJcbiAgICAgICAgICBsZXQgaXNIeXBlcnR5UmVwb3J0ZXIgPSBfdGhpcy5yZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMoZGF0YU9iamVjdFVSTCk7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnaXNIeXBlcnR5UmVwb3J0ZXI6JywgaXNIeXBlcnR5UmVwb3J0ZXIpO1xyXG4gICAgICAgICAgLy8gaWYgdGhlIGh5cGVydHkgaXMgdGhlIHJlcG9ydGVyIG9mIHRoZSBkYXRhT2JqZWN0IHRoZW4gZ2VuZXJhdGVzIGEgc2Vzc2lvbiBrZXlcclxuICAgICAgICAgIGlmIChpc0h5cGVydHlSZXBvcnRlciAmJiBpc0h5cGVydHlSZXBvcnRlciA9PT0gbWVzc2FnZS5mcm9tKSB7XHJcblxyXG4gICAgICAgICAgICBsZXQgc2Vzc2lvbktleSA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpO1xyXG4gICAgICAgICAgICBfdGhpcy5kYXRhT2JqZWN0U2Vzc2lvbktleXNbZGF0YU9iamVjdFVSTF0gPSB7c2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWV9O1xyXG5cclxuICAgICAgICAgICAgZGF0YU9iamVjdEtleSA9IF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vY2hlY2sgaWYgdGhlcmUgaXMgYWxyZWFkeSBhIHNlc3Npb24ga2V5IGZvciB0aGUgY2hhdCByb29tXHJcbiAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkpIHtcclxuXHJcbiAgICAgICAgICAvLyBhbmQgaWYgaXMgdG8gYXBwbHkgZW5jcnlwdGlvbiwgZW5jcnlwdCB0aGUgbWVzc2FnZXNcclxuICAgICAgICAgIGlmIChkYXRhT2JqZWN0S2V5LmlzVG9FbmNyeXB0KSB7XHJcbiAgICAgICAgICAgIGxldCBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XHJcblxyXG4gICAgICAgICAgICBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIF90aGlzLmNyeXB0by5lbmNvZGUoSlNPTi5zdHJpbmdpZnkobWVzc2FnZS5ib2R5LnZhbHVlKSksIGl2KS50aGVuKGVuY3J5cHRlZFZhbHVlID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIG1lc3NhZ2UuYm9keS52YWx1ZSArIGl2LCBkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXkpO1xyXG5cclxuICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoZGF0YU9iamVjdEtleS5zZXNzaW9uS2V5LCBmaWx0ZXJlZE1lc3NhZ2UpLnRoZW4oaGFzaCA9PiB7XHJcbiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdoYXNoICcsIGhhc2gpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBuZXdWYWx1ZSA9IHt2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSksIGl2OiBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKX07XHJcblxyXG4gICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZhbHVlID0gSlNPTi5zdHJpbmdpZnkobmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgLy8gaWYgbm90LCBqdXN0IHNlbmQgdGhlIG1lc3NhZ2VcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gc3RhcnQgdGhlIGdlbmVyYXRpb24gb2YgYSBuZXcgc2Vzc2lvbiBLZXlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdmYWlsZWQgdG8gZGVjcnlwdCBtZXNzYWdlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGRlY3J5cHRNZXNzYWdlKG1lc3NhZ2UpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ2RlY3J5cHQgbWVzc2FnZSAnKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGxldCBpc0hhbmRTaGFrZVR5cGUgPSBtZXNzYWdlLnR5cGUgPT09ICdoYW5kc2hha2UnO1xyXG5cclxuICAgICAgLy9pZiBpcyBub3QgdG8gYXBwbHkgZW5jcnlwdGlvbiwgdGhlbiByZXR1cm5zIHJlc29sdmVcclxuICAgICAgaWYgKCFfdGhpcy5pc1RvVXNlRW5jcnlwdGlvbiAmJiAhaXNIYW5kU2hha2VUeXBlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRpb24gZGlzYWJsZWQnKTtcclxuICAgICAgICByZXR1cm4gcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy9UT0RPIHJlbW92ZSB0aGlzIGxvZ2ljIGFuZCBtb3ZlIGl0IHRvIGEgdXRpbCBmdW5jdGlvblxyXG5cclxuICAgICAgbGV0IHNwbGl0ZWRUb1VSTCA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTtcclxuICAgICAgbGV0IGRhdGFPYmplY3RVUkwgPSBzcGxpdGVkVG9VUkxbMF0gKyAnLy8nICsgc3BsaXRlZFRvVVJMWzJdICsgJy8nICsgc3BsaXRlZFRvVVJMWzNdO1xyXG4gICAgICBpZiAoc3BsaXRlZFRvVVJMLmxlbmd0aCA+IDYpIHtcclxuICAgICAgICBkYXRhT2JqZWN0VVJMID0gc3BsaXRlZFRvVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRUb1VSTFsyXSArICcvJyArIHNwbGl0ZWRUb1VSTFszXSArICcvJyArIHNwbGl0ZWRUb1VSTFs0XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGlzVG9EYXRhT2JqZWN0ID0gaXNEYXRhT2JqZWN0VVJMKGRhdGFPYmplY3RVUkwpO1xyXG4gICAgICBsZXQgaXNGcm9tSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JztcclxuICAgICAgbGV0IGlzVG9IeXBlcnR5ID0gZGl2aWRlVVJMKG1lc3NhZ2UudG8pLnR5cGUgPT09ICdoeXBlcnR5JztcclxuXHJcbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnKSB7XHJcbiAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy9pcyBpcyBoeXBlcnR5IHRvIGh5cGVydHkgY29tbXVuaWNhdGlvblxyXG4gICAgICBpZiAoaXNGcm9tSHlwZXJ0eSAmJiBpc1RvSHlwZXJ0eSkge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coJ2RlY3J5cHQgaHlwZXJ0eSB0byBoeXBlcnR5Jyk7XHJcbiAgICAgICAgbGV0IHVzZXJVUkwgPSBfdGhpcy5fcmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKG1lc3NhZ2UudG8pO1xyXG4gICAgICAgIGlmICh1c2VyVVJMKSB7XHJcblxyXG4gICAgICAgICAgbGV0IGNoYXRLZXlzID0gX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXTtcclxuICAgICAgICAgIGlmICghY2hhdEtleXMpIHtcclxuICAgICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtZXNzYWdlLCB1c2VyVVJMLCAnZGVjcnlwdCcpO1xyXG4gICAgICAgICAgICBfdGhpcy5jaGF0S2V5c1ttZXNzYWdlLnRvICsgJzwtPicgKyBtZXNzYWdlLmZyb21dID0gY2hhdEtleXM7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKGNoYXRLZXlzLmF1dGhlbnRpY2F0ZWQgJiYgIWlzSGFuZFNoYWtlVHlwZSkge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBKU09OLnBhcnNlKG1lc3NhZ2UuYm9keS52YWx1ZSk7XHJcbiAgICAgICAgICAgIGxldCBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaXYpO1xyXG4gICAgICAgICAgICBsZXQgZGF0YSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUudmFsdWUpO1xyXG4gICAgICAgICAgICBsZXQgaGFzaCA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaGFzaCk7XHJcbiAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpLnRoZW4oZGVjcnlwdGVkRGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlY3J5cHRlZCB2YWx1ZSAnLCBkZWNyeXB0ZWREYXRhKTtcclxuICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkudmFsdWUgPSBkZWNyeXB0ZWREYXRhO1xyXG5cclxuICAgICAgICAgICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcclxuXHJcbiAgICAgICAgICAgICAgX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIGhhc2gpLnRoZW4ocmVzdWx0ID0+IHtcclxuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3Jlc3VsdCBvZiBoYXNoIHZlcmlmaWNhdGlvbiEgJywgcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNIYW5kU2hha2VUeXBlKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9kb0hhbmRTaGFrZVBoYXNlKG1lc3NhZ2UsIGNoYXRLZXlzKS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XHJcblxyXG4gICAgICAgICAgICAgIC8vaWYgaXQgd2FzIHN0YXJ0ZWQgYnkgZG9NdXR1YWxBdXRoZW50aWNhdGlvbiB0aGVuIGVuZHMgdGhlIHByb3RvY29sXHJcbiAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSAnaGFuZFNoYWtlRW5kJykge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KCdkZWNyeXB0IGhhbmRzaGFrZSBwcm90b2NvbCBwaGFzZSAnKTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gaWYgd2FzIHN0YXJ0ZWQgYnkgYSBtZXNzYWdlLCB0aGVuIHJlc2VuZCB0aGF0IG1lc3NhZ2VcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS50byArICc8LT4nICsgbWVzc2FnZS5mcm9tXSA9IHZhbHVlLmNoYXRLZXlzO1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UodmFsdWUubWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoJ2RlY3J5cHQgaGFuZHNoYWtlIHByb3RvY29sIHBoYXNlICcpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZWplY3QoJ3dyb25nIG1lc3NhZ2UgZG8gZGVjcnlwdCcpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ2Vycm9yIG9uIGRlY3J5cHQgbWVzc2FnZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9pZiBmcm9tIGh5cGVydHkgdG8gYSBkYXRhT2JqZWN0VVJMXHJcbiAgICAgIH0gZWxzZSBpZiAoaXNGcm9tSHlwZXJ0eSAmJiBpc1RvRGF0YU9iamVjdCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdkYXRhT2JqZWN0IHZhbHVlIHRvIGRlY3J5cHQ6ICcsIG1lc3NhZ2UuYm9keSk7XHJcblxyXG4gICAgICAgIGxldCBkYXRhT2JqZWN0S2V5ID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2RhdGFPYmplY3RVUkxdO1xyXG5cclxuICAgICAgICBpZiAoZGF0YU9iamVjdEtleSkge1xyXG5cclxuICAgICAgICAgIC8vY2hlY2sgaWYgaXMgdG8gYXBwbHkgZW5jcnlwdGlvblxyXG4gICAgICAgICAgaWYgKGRhdGFPYmplY3RLZXkuaXNUb0VuY3J5cHQpIHtcclxuICAgICAgICAgICAgbGV0IHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShtZXNzYWdlLmJvZHkudmFsdWUpO1xyXG4gICAgICAgICAgICBsZXQgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLml2KTtcclxuICAgICAgICAgICAgbGV0IGVuY3J5cHRlZFZhbHVlID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS52YWx1ZSk7XHJcbiAgICAgICAgICAgIGxldCBoYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZShwYXJzZWRWYWx1ZS5oYXNoKTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGRhdGFPYmplY3RLZXkuc2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGRlY3J5cHRlZFZhbHVlID0+IHtcclxuICAgICAgICAgICAgICBsZXQgcGFyc2VkVmFsdWUgPSBKU09OLnBhcnNlKGF0b2IoZGVjcnlwdGVkVmFsdWUpKTtcclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZGVjcnlwdGVkIFZhbHVlLCcsIHBhcnNlZFZhbHVlKTtcclxuICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkudmFsdWUgPSBwYXJzZWRWYWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIHBhcnNlZFZhbHVlICsgaXYpO1xyXG5cclxuICAgICAgICAgICAgICBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhkYXRhT2JqZWN0S2V5LnNlc3Npb25LZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaCkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uISAnLCByZXN1bHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5hc3NlcnRlZElkZW50aXR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8vaWYgbm90LCBqdXN0IHJldHVybiB0aGUgbWVzc2FnZVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmFzc2VydGVkSWRlbnRpdHkgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgbWVzc2FnZS5ib2R5LmFzc2VydGVkSWRlbnRpdHkgPSB0cnVlO1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuXHJcbiAgICAgICAgICAvL3JlamVjdCgnbm8gc2Vzc2lvbktleSBmb3IgY2hhdCByb29tIGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWplY3QoJ3dyb25nIG1lc3NhZ2UgdG8gZGVjcnlwdCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkb011dHVhbEF1dGhlbnRpY2F0aW9uKHNlbmRlciwgcmVjZWl2ZXIpIHtcclxuICAgIGNvbnNvbGUubG9nKCdkb011dHVhbEF1dGhlbnRpY2F0aW9uOiAnLCBzZW5kZXIsIHJlY2VpdmVyKTtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgZGF0YU9iamVjdFVSTDtcclxuXHJcbiAgICAvLyBjaGVjayBpZiB0aGUgc2VuZGVyIGlzIGEgZGF0YU9iamVjdCBhbmQgaWYgc28gc3RvcmVzIHRoYXQgdmFsdWVcclxuICAgIGxldCByZXBvcnRlclVSTCA9IF90aGlzLnJlZ2lzdHJ5LmdldFJlcG9ydGVyVVJMU3luY2hvbm91cyhzZW5kZXIpO1xyXG4gICAgaWYgKHJlcG9ydGVyVVJMKSB7XHJcbiAgICAgIGRhdGFPYmplY3RVUkwgPSBzZW5kZXI7XHJcbiAgICAgIHNlbmRlciA9IHJlcG9ydGVyVVJMO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHRvOiByZWNlaXZlcixcclxuICAgICAgZnJvbTogc2VuZGVyLFxyXG4gICAgICBjYWxsYmFjazogdW5kZWZpbmVkLFxyXG4gICAgICBib2R5OiB7aGFuZHNoYWtlUGhhc2U6ICdzdGFydEhhbmRTaGFrZScsIGlnbm9yZTogJ2lnbm9yZU1lc3NhZ2UnfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBpZiAoIXNlbmRlciB8fCAhcmVjZWl2ZXIpIHtcclxuICAgICAgICByZXR1cm4gcmVqZWN0KCdzZW5kZXIgb3IgcmVjZWl2ZXIgbWlzc2luZyBvbiBkb011dHVhbEF1dGhlbnRpY2F0aW9uJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBjaGF0S2V5cyA9IF90aGlzLmNoYXRLZXlzW3NlbmRlciArICc8LT4nICsgcmVjZWl2ZXJdO1xyXG4gICAgICBsZXQgdXNlclVSTCA9IF90aGlzLl9yZWdpc3RyeS5nZXRIeXBlcnR5T3duZXIoc2VuZGVyKTtcclxuXHJcbiAgICAgIGlmICh1c2VyVVJMKSB7XHJcblxyXG4gICAgICAgIGlmICghY2hhdEtleXMpIHtcclxuICAgICAgICAgIC8vIGNhbGxiYWNrIHRvIHJlc29sdmUgd2hlbiBmaW5pc2ggdGhlIG11dHVhbCBhdXRoZW50aWNhdGlvblxyXG4gICAgICAgICAgbGV0IHJlc29sdmVkID0gZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NhbGxiYWNrIHZhbHVlOicsIHZhbHVlKTtcclxuICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgbXNnLmNhbGxiYWNrID0gcmVzb2x2ZWQ7XHJcbiAgICAgICAgICBtc2cuZGF0YU9iamVjdFVSTCA9IGRhdGFPYmplY3RVUkw7XHJcblxyXG4gICAgICAgICAgY2hhdEtleXMgPSBfdGhpcy5fbmV3Q2hhdENyeXB0byhtc2csIHVzZXJVUkwpO1xyXG4gICAgICAgICAgX3RoaXMuY2hhdEtleXNbc2VuZGVyICsgJzwtPicgKyByZWNlaXZlcl0gPSBjaGF0S2V5cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGF0S2V5cy5hdXRoZW50aWNhdGVkKSB7XHJcblxyXG4gICAgICAgICAgbGV0IHN0YXJ0U2Vzc2lvbktleUV4Y2hhbmdlID0ge1xyXG4gICAgICAgICAgICB0bzogc2VuZGVyLFxyXG4gICAgICAgICAgICBmcm9tOiByZWNlaXZlclxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGNoYXRLZXlzLmRhdGFPYmplY3RVUkwgPSBkYXRhT2JqZWN0VVJMO1xyXG4gICAgICAgICAgX3RoaXMuX3NlbmRSZXBvcnRlclNlc3Npb25LZXkoc3RhcnRTZXNzaW9uS2V5RXhjaGFuZ2UsIGNoYXRLZXlzKS50aGVuKHZhbHVlID0+IHtcclxuXHJcbiAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHZhbHVlLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICByZXNvbHZlKCdleGNoYW5nZSBvZiBjaGF0IHNlc3Npb25LZXkgaW5pdGlhdGVkJyk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgIF90aGlzLl9kb0hhbmRTaGFrZVBoYXNlKG1zZywgY2hhdEtleXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZWplY3QoJ2Vycm9yIG9uIGRvTXV0dWFsQXV0aGVudGljYXRpb24nKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgX2RvSGFuZFNoYWtlUGhhc2UobWVzc2FnZSwgY2hhdEtleXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZygnaGFuZHNoYWtlVHlwZScpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xyXG5cclxuICAgICAgbGV0IGhhbmRzaGFrZVR5cGUgPSBtZXNzYWdlLmJvZHkuaGFuZHNoYWtlUGhhc2U7XHJcbiAgICAgIGxldCBpdjtcclxuICAgICAgbGV0IGhhc2g7XHJcbiAgICAgIGxldCB2YWx1ZSA9IHt9O1xyXG4gICAgICBsZXQgZmlsdGVyZWRNZXNzYWdlO1xyXG4gICAgICBzd2l0Y2ggKGhhbmRzaGFrZVR5cGUpIHtcclxuXHJcbiAgICAgICAgY2FzZSAnc3RhcnRIYW5kU2hha2UnOlxyXG4gICAgICAgICAgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlUmFuZG9tKCk7XHJcblxyXG4gICAgICAgICAgbGV0IHN0YXJ0SGFuZFNoYWtlTXNnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcclxuICAgICAgICAgICAgdG86IG1lc3NhZ2UudG8sXHJcbiAgICAgICAgICAgIGZyb206IG1lc3NhZ2UuZnJvbSxcclxuICAgICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVySGVsbG8nLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBfdGhpcy5jcnlwdG8uZW5jb2RlKGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChzdGFydEhhbmRTaGFrZU1zZywgdW5kZWZpbmVkLCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XHJcblxyXG4gICAgICAgICAgLy8gY2hlY2sgaWYgd2FzIHRoZSBlbmNyeXB0IGZ1bmN0aW9uIG9yIHRoZSBtdXR1YWwgYXV0aGVudGljYXRpb24gdGhhdCByZXF1ZXN0IHRoZVxyXG4gICAgICAgICAgLy8gc3RhcnQgb2YgdGhlIGhhbmRTaGFrZVBoYXNlLlxyXG4gICAgICAgICAgaWYgKGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlKSB7cmVzb2x2ZSh7bWVzc2FnZTogc3RhcnRIYW5kU2hha2VNc2csIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgX3RoaXMuY2hhdEtleXNbbWVzc2FnZS5mcm9tICsgJzwtPicgKyBtZXNzYWdlLnRvXSA9IGNoYXRLZXlzO1xyXG4gICAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShzdGFydEhhbmRTaGFrZU1zZyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3NlbmRlckhlbGxvJzpcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZGVySGVsbG8nKTtcclxuICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3Rvcnkuc2VuZGVySGVsbG8gPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlKTtcclxuICAgICAgICAgIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSA9IF90aGlzLmNyeXB0by5kZWNvZGUobWVzc2FnZS5ib2R5LnZhbHVlKTtcclxuICAgICAgICAgIGNoYXRLZXlzLmtleXMudG9SYW5kb20gPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVSYW5kb20oKTtcclxuXHJcbiAgICAgICAgICBsZXQgc2VuZGVySGVsbG9Nc2cgPSB7XHJcbiAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxyXG4gICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxyXG4gICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgICAgICBib2R5OiB7XHJcbiAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckhlbGxvJyxcclxuICAgICAgICAgICAgICB2YWx1ZTogX3RoaXMuY3J5cHRvLmVuY29kZShjaGF0S2V5cy5rZXlzLnRvUmFuZG9tKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5yZWNlaXZlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2goc2VuZGVySGVsbG9Nc2csIHVuZGVmaW5lZCwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xyXG4gICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogc2VuZGVySGVsbG9Nc2csIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xyXG5cclxuICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyZWNlaXZlckhlbGxvJzpcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygncmVjZWl2ZXJIZWxsbycpO1xyXG4gICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5yZWNlaXZlckhlbGxvID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSk7XHJcblxyXG4gICAgICAgICAgX3RoaXMudmFsaWRhdGVBc3NlcnRpb24obWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbiwgdW5kZWZpbmVkLCBtZXNzYWdlLmJvZHkuaWRlbnRpdHkuaWRwKS50aGVuKCh2YWx1ZSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy9UT0RPIHJlbW92ZSBsYXRlciB0aGlzIHZlcmlmaWNhdGlvbiBhcyBzb29uIGFzIGFsbCB0aGUgSWRQIHByb3h5IGFyZSB1cGRhdGVkIGluIHRoZSBleGFtcGxlXHJcbiAgICAgICAgICAgIGxldCBlbmNvZGVkcHVibGljS2V5ID0gKHR5cGVvZiB2YWx1ZS5jb250ZW50cyA9PT0gJ3N0cmluZycpID8gdmFsdWUuY29udGVudHMgOiB2YWx1ZS5jb250ZW50cy5ub25jZTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZWNlaXZlclB1YmxpY0tleSA9IF90aGlzLmNyeXB0by5kZWNvZGUoZW5jb2RlZHB1YmxpY0tleSk7XHJcbiAgICAgICAgICAgIGxldCBwcmVtYXN0ZXJTZWNyZXQgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVQTVMoKTtcclxuICAgICAgICAgICAgbGV0IHRvUmFuZG9tID0gbWVzc2FnZS5ib2R5LnZhbHVlO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8uYXNzZXJ0aW9uID0gbWVzc2FnZS5ib2R5LmlkZW50aXR5LmFzc2VydGlvbjtcclxuICAgICAgICAgICAgY2hhdEtleXMuaHlwZXJ0eVRvLnB1YmxpY0tleSA9IHJlY2VpdmVyUHVibGljS2V5O1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8udXNlcklEICAgID0gdmFsdWUuY29udGVudHMuZW1haWw7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMudG9SYW5kb20gID0gX3RoaXMuY3J5cHRvLmRlY29kZSh0b1JhbmRvbSk7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5ID0gcHJlbWFzdGVyU2VjcmV0O1xyXG5cclxuICAgICAgICAgICAgbGV0IGNvbmNhdEtleSA9IF90aGlzLmNyeXB0by5jb25jYXRQTVN3aXRoUmFuZG9tcyhwcmVtYXN0ZXJTZWNyZXQsIGNoYXRLZXlzLmtleXMudG9SYW5kb20sIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlTWFzdGVyU2VjcmV0KGNvbmNhdEtleSwgJ21lc3NhZ2VIaXN0b3JpYycgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcclxuXHJcbiAgICAgICAgICAgIC8vZ2VuZXJhdGUgdGhlIG1hc3RlciBrZXlcclxuICAgICAgICAgIH0pLnRoZW4oKG1hc3RlcktleSkgPT4ge1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLm1hc3RlcktleSA9IG1hc3RlcktleTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVLZXlzKG1hc3RlcktleSwgJ2tleSBleHBhbnNpb24nICsgY2hhdEtleXMua2V5cy50b1JhbmRvbSArIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XHJcblxyXG4gICAgICAgICAgICAvL2dlbmVyYXRlIHRoZSBzeW1tZXRyaWMgYW5kIGhhc2gga2V5c1xyXG4gICAgICAgICAgfSkudGhlbigoa2V5cykgPT4ge1xyXG5cclxuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1swXSk7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbMl0pO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbM10pO1xyXG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZUlWKCk7XHJcbiAgICAgICAgICAgIHZhbHVlLml2ID0gX3RoaXMuY3J5cHRvLmVuY29kZShpdik7XHJcblxyXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVN0cnVjdHVyZSA9IHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcclxuICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxyXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXHJcbiAgICAgICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdzZW5kZXJDZXJ0aWZpY2F0ZSdcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyBoYXNoIHRoZSB2YWx1ZSBhbmQgdGhlIGl2XHJcbiAgICAgICAgICAgIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2VTdHJ1Y3R1cmUsICdvaycgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSkudGhlbigoaGFzaCkgPT4ge1xyXG4gICAgICAgICAgICB2YWx1ZS5oYXNoID0gX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoKTtcclxuXHJcbiAgICAgICAgICAgIC8vZW5jcnlwdCB0aGUgZGF0YVxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksICdvaycsIGl2KTtcclxuICAgICAgICAgIH0pLnRoZW4oKGVuY3J5cHRlZERhdGEpID0+IHtcclxuICAgICAgICAgICAgdmFsdWUuc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWREYXRhKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZW5jcnlwdFJTQShjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5LCBjaGF0S2V5cy5rZXlzLnByZW1hc3RlcktleSk7XHJcblxyXG4gICAgICAgICAgfSkudGhlbigoZW5jcnlwdGVkVmFsdWUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHZhbHVlLmFzc3ltZXRyaWNFbmNyeXB0aW9uID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVN0cnVjdHVyZSA9IHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcclxuICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxyXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXHJcbiAgICAgICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdzZW5kZXJDZXJ0aWZpY2F0ZSdcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVRvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2VTdHJ1Y3R1cmUsIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnNpZ25SU0EoY2hhdEtleXMuaHlwZXJ0eUZyb20ucHJpdmF0ZUtleSwgSlNPTi5zdHJpbmdpZnkoY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeSkgKyBKU09OLnN0cmluZ2lmeShtZXNzYWdlVG9IYXNoKSk7XHJcblxyXG4gICAgICAgICAgfSkudGhlbihzaWduYXR1cmUgPT4ge1xyXG5cclxuICAgICAgICAgICAgdmFsdWUuc2lnbmF0dXJlID0gX3RoaXMuY3J5cHRvLmVuY29kZShzaWduYXR1cmUpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlY2VpdmVySGVsbG9Nc2cgPSB7XHJcbiAgICAgICAgICAgICAgdHlwZTogJ2hhbmRzaGFrZScsXHJcbiAgICAgICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcclxuICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgICAgICAgIGJvZHk6IHtcclxuICAgICAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAnc2VuZGVyQ2VydGlmaWNhdGUnLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGJ0b2EoSlNPTi5zdHJpbmdpZnkodmFsdWUpKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJDZXJ0aWZpY2F0ZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVySGVsbG9Nc2csICdvaycgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xyXG5cclxuICAgICAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogcmVjZWl2ZXJIZWxsb01zZywgY2hhdEtleXM6IGNoYXRLZXlzfSk7XHJcblxyXG4gICAgICAgICAgfSwgZXJyb3IgPT4gcmVqZWN0KGVycm9yKSk7XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3NlbmRlckNlcnRpZmljYXRlJzpcclxuXHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnc2VuZGVyQ2VydGlmaWNhdGUnKTtcclxuICAgICAgICAgIGxldCByZWNlaXZlZFZhbHVlID0gSlNPTi5wYXJzZShhdG9iKG1lc3NhZ2UuYm9keS52YWx1ZSkpO1xyXG5cclxuICAgICAgICAgIF90aGlzLnZhbGlkYXRlQXNzZXJ0aW9uKG1lc3NhZ2UuYm9keS5pZGVudGl0eS5hc3NlcnRpb24sIHVuZGVmaW5lZCwgbWVzc2FnZS5ib2R5LmlkZW50aXR5LmlkcCkudGhlbigodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgbGV0IGVuY3J5cHRlZFBNUyA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5hc3N5bWV0cmljRW5jcnlwdGlvbik7XHJcblxyXG4gICAgICAgICAgICAvL1RPRE8gcmVtb3ZlIGxhdGVyIHRoaXMgdmVyaWZpY2F0aW9uIGFzIHNvb24gYXMgYWxsIHRoZSBJZFAgcHJveHkgYXJlIHVwZGF0ZWQgaW4gdGhlIGV4YW1wbGVcclxuICAgICAgICAgICAgbGV0IGVuY29kZWRwdWJsaWNLZXkgPSAodHlwZW9mIHZhbHVlLmNvbnRlbnRzID09PSAnc3RyaW5nJykgPyB2YWx1ZS5jb250ZW50cyA6IHZhbHVlLmNvbnRlbnRzLm5vbmNlO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNlbmRlclB1YmxpY0tleSA9IF90aGlzLmNyeXB0by5kZWNvZGUoZW5jb2RlZHB1YmxpY0tleSk7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmh5cGVydHlUby5hc3NlcnRpb24gPSBtZXNzYWdlLmJvZHkuaWRlbnRpdHkuYXNzZXJ0aW9uO1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8ucHVibGljS2V5ID0gc2VuZGVyUHVibGljS2V5O1xyXG4gICAgICAgICAgICBjaGF0S2V5cy5oeXBlcnR5VG8udXNlcklEICAgID0gdmFsdWUuY29udGVudHMuZW1haWw7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmRlY3J5cHRSU0EoY2hhdEtleXMuaHlwZXJ0eUZyb20ucHJpdmF0ZUtleSwgZW5jcnlwdGVkUE1TKTtcclxuXHJcbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xyXG4gICAgICAgICAgICByZWplY3QoJ0Vycm9yIGR1cmluZyBhdXRoZW50aWNhdGlvbiBvZiBpZGVudGl0eScpO1xyXG5cclxuICAgICAgICAgICAgLy9vYnRhaW4gdGhlIFByZW1hc3RlcktleSB1c2luZyB0aGUgcHJpdmF0ZSBrZXlcclxuICAgICAgICAgIH0pLnRoZW4ocG1zID0+IHtcclxuXHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5ID0gbmV3IFVpbnQ4QXJyYXkocG1zKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBzaWduYXR1cmUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkVmFsdWUuc2lnbmF0dXJlKTtcclxuXHJcbiAgICAgICAgICAgIGxldCByZWNlaXZlZG1zZ1RvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGNoYXRLZXlzLmtleXMucHJlbWFzdGVyS2V5KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5UlNBKGNoYXRLZXlzLmh5cGVydHlUby5wdWJsaWNLZXksIEpTT04uc3RyaW5naWZ5KGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkpICsgSlNPTi5zdHJpbmdpZnkocmVjZWl2ZWRtc2dUb0hhc2gpLCBzaWduYXR1cmUpO1xyXG5cclxuICAgICAgICAgICAgLy8gdmFsaWRhdGVzIHRoZSBzaWduYXR1cmUgcmVjZWl2ZWRcclxuICAgICAgICAgIH0pLnRoZW4oc2lnblZhbGlkYXRpb25SZXN1bHQgPT4ge1xyXG5cclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3NpZ25hdHVyZSB2YWxpZGF0aW9uIHJlc3VsdCAnLCBzaWduVmFsaWRhdGlvblJlc3VsdCk7XHJcbiAgICAgICAgICAgIGxldCBjb25jYXRLZXkgPSBfdGhpcy5jcnlwdG8uY29uY2F0UE1Td2l0aFJhbmRvbXMoY2hhdEtleXMua2V5cy5wcmVtYXN0ZXJLZXksIGNoYXRLZXlzLmtleXMudG9SYW5kb20sIGNoYXRLZXlzLmtleXMuZnJvbVJhbmRvbSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlTWFzdGVyU2VjcmV0KGNvbmNhdEtleSwgJ21lc3NhZ2VIaXN0b3JpYycgKyBjaGF0S2V5cy5rZXlzLnRvUmFuZG9tICsgY2hhdEtleXMua2V5cy5mcm9tUmFuZG9tKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGdlbmVyYXRlcyB0aGUgbWFzdGVyIGtleXMgZnJvbSB0aGUgUHJlbWFzdGVyIGtleSBhbmQgdGhlIHJhbmRvbXNcclxuICAgICAgICAgIH0pLnRoZW4obWFzdGVyS2V5ID0+IHtcclxuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5tYXN0ZXJLZXkgPSBtYXN0ZXJLZXk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmdlbmVyYXRlS2V5cyhtYXN0ZXJLZXksICdrZXkgZXhwYW5zaW9uJyArIGNoYXRLZXlzLmtleXMudG9SYW5kb20gKyBjaGF0S2V5cy5rZXlzLmZyb21SYW5kb20pO1xyXG5cclxuICAgICAgICAgICAgLy8gZ2VuZXJhdGVzIHRoZSBzeW1tZXRyaWMga2V5cyB0byBiZSB1c2VkIGluIHRoZSBzeW1tZXRyaWMgZW5jcnlwdGlvblxyXG4gICAgICAgICAgfSkudGhlbihrZXlzID0+IHtcclxuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXkgPSBuZXcgVWludDhBcnJheShrZXlzWzBdKTtcclxuICAgICAgICAgICAgY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1sxXSk7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5ID0gbmV3IFVpbnQ4QXJyYXkoa2V5c1syXSk7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSA9IG5ldyBVaW50OEFycmF5KGtleXNbM10pO1xyXG4gICAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUocmVjZWl2ZWRWYWx1ZS5pdik7XHJcbiAgICAgICAgICAgIGxldCBkYXRhID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLnN5bWV0cmljRW5jcnlwdGlvbik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmRlY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9TZXNzaW9uS2V5LCBkYXRhLCBpdik7XHJcblxyXG4gICAgICAgICAgfSkudGhlbihkZWNyeXB0ZWREYXRhID0+IHtcclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZGVjcnlwdGVkRGF0YScsIGRlY3J5cHRlZERhdGEpO1xyXG5cclxuICAgICAgICAgICAgY2hhdEtleXMuaGFuZHNoYWtlSGlzdG9yeS5zZW5kZXJDZXJ0aWZpY2F0ZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZERhdGEgKyBpdik7XHJcblxyXG4gICAgICAgICAgICBsZXQgaGFzaFJlY2VpdmVkID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZFZhbHVlLmhhc2gpO1xyXG5cclxuICAgICAgICAgICAgZmlsdGVyZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkRGF0YSArIGl2KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8udmVyaWZ5SE1BQyhjaGF0S2V5cy5rZXlzLmh5cGVydHlUb0hhc2hLZXksIGZpbHRlcmVkTWVzc2FnZSwgaGFzaFJlY2VpdmVkKTtcclxuXHJcbiAgICAgICAgICB9KS50aGVuKHZlcmlmaWVkSGFzaCAgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZygncmVzdWx0IG9mIGhhc2ggdmVyaWZpY2F0aW9uICcsIHZlcmlmaWVkSGFzaCk7XHJcbiAgICAgICAgICAgIGxldCByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSA9IHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcclxuICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxyXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXHJcbiAgICAgICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSdcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcclxuICAgICAgICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTtcclxuXHJcbiAgICAgICAgICAgIGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCAnb2shJyArIGl2LCBjaGF0S2V5cy5oeXBlcnR5RnJvbS5tZXNzYWdlSW5mbyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCByZWNlaXZlckZpbmlzaGVkTWVzc2FnZSk7XHJcbiAgICAgICAgICB9KS50aGVuKGhhc2ggPT4ge1xyXG5cclxuICAgICAgICAgICAgdmFsdWUuaGFzaCA9IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaCk7XHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uZW5jcnlwdEFFUyhjaGF0S2V5cy5rZXlzLmh5cGVydHlGcm9tU2Vzc2lvbktleSwgJ29rIScsIGl2KTtcclxuXHJcbiAgICAgICAgICB9KS50aGVuKGVuY3J5cHRlZFZhbHVlID0+IHtcclxuICAgICAgICAgICAgdmFsdWUudmFsdWUgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGVuY3J5cHRlZFZhbHVlKTtcclxuICAgICAgICAgICAgbGV0IHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0ge1xyXG4gICAgICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxyXG4gICAgICAgICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXHJcbiAgICAgICAgICAgICAgZnJvbTogbWVzc2FnZS50byxcclxuICAgICAgICAgICAgICBib2R5OiB7XHJcbiAgICAgICAgICAgICAgICBoYW5kc2hha2VQaGFzZTogJ3JlY2VpdmVyRmluaXNoZWRNZXNzYWdlJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBidG9hKEpTT04uc3RyaW5naWZ5KHZhbHVlKSlcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBjaGF0S2V5cy5oYW5kc2hha2VIaXN0b3J5LnJlY2VpdmVyRmluaXNoZWRNZXNzYWdlID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UsICdvayEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcclxuICAgICAgICAgICAgY2hhdEtleXMuYXV0aGVudGljYXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IHJlY2VpdmVyRmluaXNoZWRNZXNzYWdlLCBjaGF0S2V5czogY2hhdEtleXN9KTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdyZWNlaXZlckZpbmlzaGVkTWVzc2FnZSc6XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ3JlY2VpdmVyRmluaXNoZWRNZXNzYWdlJyk7XHJcbiAgICAgICAgICBjaGF0S2V5cy5hdXRoZW50aWNhdGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTtcclxuXHJcbiAgICAgICAgICBpdiA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWUuaXYpO1xyXG4gICAgICAgICAgbGV0IGRhdGEgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLnZhbHVlKTtcclxuICAgICAgICAgIGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlLmhhc2gpO1xyXG5cclxuICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZGF0YSwgaXYpLnRoZW4oZGVjcnlwdGVkRGF0YSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZWNyeXB0ZWREYXRhJywgZGVjcnlwdGVkRGF0YSk7XHJcbiAgICAgICAgICAgIGNoYXRLZXlzLmhhbmRzaGFrZUhpc3RvcnkucmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2UgPSBfdGhpcy5fZmlsdGVyTWVzc2FnZVRvSGFzaChtZXNzYWdlLCBkZWNyeXB0ZWREYXRhICsgaXYpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRhdGEgKyBpdik7XHJcbiAgICAgICAgICAgIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgZmlsdGVyZWRNZXNzYWdlLCBoYXNoKS50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2hhc2ggcmVzdWx0JywgcmVzdWx0KTtcclxuXHJcbiAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgd2FzIGFuIGluaXRpYWwgbWVzc2FnZSB0aGF0IHdhcyBibG9ja2VkIGFuZCBzZW5kIGl0XHJcbiAgICAgICAgICAgICAgaWYgKGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5pdGlhbE1lc3NhZ2UgPSB7XHJcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdjcmVhdGUnLFxyXG4gICAgICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxyXG4gICAgICAgICAgICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgICAgICAgICAgICBib2R5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNoYXRLZXlzLmluaXRpYWxNZXNzYWdlLmJvZHkudmFsdWVcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHttZXNzYWdlOiBpbml0aWFsTWVzc2FnZSwgY2hhdEtleXM6IGNoYXRLZXlzfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zZW5kcyB0aGUgc2Vzc2lvbktleSB0byB0aGUgc3Vic2NyaWJlciBoeXBlcnR5XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLl9zZW5kUmVwb3J0ZXJTZXNzaW9uS2V5KG1lc3NhZ2UsIGNoYXRLZXlzKS50aGVuKHZhbHVlID0+IHtcclxuICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3JlcG9ydGVyU2Vzc2lvbktleSc6XHJcblxyXG4gICAgICAgICAgY29uc29sZS5sb2coJ3JlcG9ydGVyU2Vzc2lvbktleScpO1xyXG5cclxuICAgICAgICAgIGxldCB2YWx1ZUlWYW5kSGFzaCA9IEpTT04ucGFyc2UoYXRvYihtZXNzYWdlLmJvZHkudmFsdWUpKTtcclxuICAgICAgICAgIGhhc2ggPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlSVZhbmRIYXNoLmhhc2gpO1xyXG4gICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHZhbHVlSVZhbmRIYXNoLml2KTtcclxuICAgICAgICAgIGxldCBlbmNyeXB0ZWRWYWx1ZSA9IF90aGlzLmNyeXB0by5kZWNvZGUodmFsdWVJVmFuZEhhc2gudmFsdWUpO1xyXG4gICAgICAgICAgbGV0IHBhcnNlZFZhbHVlO1xyXG4gICAgICAgICAgbGV0IHNlc3Npb25LZXk7XHJcbiAgICAgICAgICBsZXQgZGF0YU9iamVjdFVSTDtcclxuICAgICAgICAgIGxldCByZWNlaXZlckFja25vd2xlZGdlTXNnO1xyXG5cclxuICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgZW5jcnlwdGVkVmFsdWUsIGl2KS50aGVuKGRlY3J5cHRlZFZhbHVlID0+IHtcclxuXHJcbiAgICAgICAgICAgIHBhcnNlZFZhbHVlID0gSlNPTi5wYXJzZShkZWNyeXB0ZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgIHNlc3Npb25LZXkgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHBhcnNlZFZhbHVlLnZhbHVlKTtcclxuICAgICAgICAgICAgZGF0YU9iamVjdFVSTCA9IHBhcnNlZFZhbHVlLmRhdGFPYmplY3RVUkw7XHJcblxyXG4gICAgICAgICAgICBsZXQgbWVzc2FnZVRvSGFzaCA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZFZhbHVlICsgaXYpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by52ZXJpZnlITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvSGFzaEtleSwgbWVzc2FnZVRvSGFzaCwgaGFzaCk7XHJcblxyXG4gICAgICAgICAgfSkudGhlbihoYXNoUmVzdWx0ID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hhc2ggc3VjY2Vzc2Z1bGx5IHZhbGlkYXRlZCAnLCBoYXNoUmVzdWx0KTtcclxuXHJcbiAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tkYXRhT2JqZWN0VVJMXSA9ICB7c2Vzc2lvbktleTogc2Vzc2lvbktleSwgaXNUb0VuY3J5cHQ6IHRydWV9O1xyXG5cclxuICAgICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZ2VuZXJhdGVJVigpO1xyXG4gICAgICAgICAgICB2YWx1ZS5pdiA9IF90aGlzLmNyeXB0by5lbmNvZGUoaXYpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNyeXB0by5lbmNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21TZXNzaW9uS2V5LCAnb2shIScsIGl2KTtcclxuICAgICAgICAgIH0pLnRoZW4oZW5jcnlwdGVkVmFsdWUgPT4ge1xyXG5cclxuICAgICAgICAgICAgcmVjZWl2ZXJBY2tub3dsZWRnZU1zZyA9IHtcclxuICAgICAgICAgICAgICB0eXBlOiAnaGFuZHNoYWtlJyxcclxuICAgICAgICAgICAgICB0bzogbWVzc2FnZS5mcm9tLFxyXG4gICAgICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXHJcbiAgICAgICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICAgICAgaGFuZHNoYWtlUGhhc2U6ICdyZWNlaXZlckFja25vd2xlZGdlJ1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhbHVlLnZhbHVlID0gX3RoaXMuY3J5cHRvLmVuY29kZShlbmNyeXB0ZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGxldCBtZXNzYWdlVG9IYXNoID0gX3RoaXMuX2ZpbHRlck1lc3NhZ2VUb0hhc2gocmVjZWl2ZXJBY2tub3dsZWRnZU1zZywgJ29rISEnICsgaXYsIGNoYXRLZXlzLmh5cGVydHlGcm9tLm1lc3NhZ2VJbmZvKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5jcnlwdG8uaGFzaEhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbUhhc2hLZXksIG1lc3NhZ2VUb0hhc2gpO1xyXG4gICAgICAgICAgfSkudGhlbihoYXNoZWRNZXNzYWdlID0+IHtcclxuICAgICAgICAgICAgbGV0IGZpbmFsVmFsdWUgPSBidG9hKEpTT04uc3RyaW5naWZ5KHt2YWx1ZTogdmFsdWUudmFsdWUsIGhhc2g6IF90aGlzLmNyeXB0by5lbmNvZGUoaGFzaGVkTWVzc2FnZSksIGl2OiB2YWx1ZS5pdn0pKTtcclxuXHJcbiAgICAgICAgICAgIHJlY2VpdmVyQWNrbm93bGVkZ2VNc2cuYm9keS52YWx1ZSA9IGZpbmFsVmFsdWU7XHJcbiAgICAgICAgICAgIHJlc29sdmUoe21lc3NhZ2U6IHJlY2VpdmVyQWNrbm93bGVkZ2VNc2csIGNoYXRLZXlzOiBjaGF0S2V5c30pO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ3JlY2VpdmVyQWNrbm93bGVkZ2UnOlxyXG5cclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWNlaXZlckFja25vd2xlZGdlJyk7XHJcblxyXG4gICAgICAgICAgbGV0IHJlY2VpdmVkdmFsdWVJVmFuZEhhc2ggPSBKU09OLnBhcnNlKGF0b2IobWVzc2FnZS5ib2R5LnZhbHVlKSk7XHJcbiAgICAgICAgICBsZXQgcmVjZWl2ZWRIYXNoID0gX3RoaXMuY3J5cHRvLmRlY29kZShyZWNlaXZlZHZhbHVlSVZhbmRIYXNoLmhhc2gpO1xyXG4gICAgICAgICAgaXYgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkdmFsdWVJVmFuZEhhc2guaXYpO1xyXG4gICAgICAgICAgbGV0IHJlY2VpdmVkRW5jcnlwdGVkVmFsdWUgPSBfdGhpcy5jcnlwdG8uZGVjb2RlKHJlY2VpdmVkdmFsdWVJVmFuZEhhc2gudmFsdWUpO1xyXG5cclxuICAgICAgICAgIF90aGlzLmNyeXB0by5kZWNyeXB0QUVTKGNoYXRLZXlzLmtleXMuaHlwZXJ0eVRvU2Vzc2lvbktleSwgcmVjZWl2ZWRFbmNyeXB0ZWRWYWx1ZSwgaXYpLnRoZW4oZGVjcnlwdGVkVmFsdWUgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKG1lc3NhZ2UsIGRlY3J5cHRlZFZhbHVlICsgaXYpO1xyXG4gICAgICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLnZlcmlmeUhNQUMoY2hhdEtleXMua2V5cy5oeXBlcnR5VG9IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UsIHJlY2VpdmVkSGFzaCk7XHJcbiAgICAgICAgICB9KS50aGVuKGhhc2hSZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdoYXNoUmVzdWx0ICcsIGhhc2hSZXN1bHQpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNhbGxiYWNrID0gY2hhdEtleXMuY2FsbGJhY2s7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICBjYWxsYmFjaygnaGFuZFNoYWtlRW5kJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVzb2x2ZSgnaGFuZFNoYWtlRW5kJyk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJlamVjdChtZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfc2VuZFJlcG9ydGVyU2Vzc2lvbktleShtZXNzYWdlLCBjaGF0S2V5cykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBzZXNzaW9uS2V5QnVuZGxlID0gX3RoaXMuZGF0YU9iamVjdFNlc3Npb25LZXlzW2NoYXRLZXlzLmRhdGFPYmplY3RVUkxdO1xyXG4gICAgbGV0IHJlcG9ydGVyU2Vzc2lvbktleU1zZztcclxuICAgIGxldCB2YWx1ZVRvRW5jcnlwdDtcclxuICAgIGxldCBzZXNzaW9uS2V5O1xyXG4gICAgbGV0IGl2O1xyXG4gICAgbGV0IHZhbHVlID0ge307XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgLy9pZiB0aGVyZSBpcyBub3QgeWV0IGEgc2Vzc2lvbiBLZXksIGdlbmVyYXRlcyBhIG5ldyBvbmVcclxuICAgICAgaWYgKCFzZXNzaW9uS2V5QnVuZGxlKSB7XHJcbiAgICAgICAgc2Vzc2lvbktleSA9IF90aGlzLmNyeXB0by5nZW5lcmF0ZVJhbmRvbSgpO1xyXG4gICAgICAgIF90aGlzLmRhdGFPYmplY3RTZXNzaW9uS2V5c1tjaGF0S2V5cy5kYXRhT2JqZWN0VVJMXSA9IHtzZXNzaW9uS2V5OiBzZXNzaW9uS2V5LCBpc1RvRW5jcnlwdDogdHJ1ZX07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2Vzc2lvbktleSA9IHNlc3Npb25LZXlCdW5kbGUuc2Vzc2lvbktleTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFsdWVUb0VuY3J5cHQgPSBKU09OLnN0cmluZ2lmeSh7dmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoc2Vzc2lvbktleSksIGRhdGFPYmplY3RVUkw6IGNoYXRLZXlzLmRhdGFPYmplY3RVUkx9KTtcclxuXHJcbiAgICAgIGl2ID0gX3RoaXMuY3J5cHRvLmdlbmVyYXRlSVYoKTtcclxuICAgICAgdmFsdWUuaXYgPSBfdGhpcy5jcnlwdG8uZW5jb2RlKGl2KTtcclxuICAgICAgX3RoaXMuY3J5cHRvLmVuY3J5cHRBRVMoY2hhdEtleXMua2V5cy5oeXBlcnR5RnJvbVNlc3Npb25LZXksIHZhbHVlVG9FbmNyeXB0LCBpdikudGhlbihlbmNyeXB0ZWRWYWx1ZSA9PiB7XHJcblxyXG4gICAgICAgIHJlcG9ydGVyU2Vzc2lvbktleU1zZyA9IHtcclxuICAgICAgICAgIHR5cGU6ICdoYW5kc2hha2UnLFxyXG4gICAgICAgICAgdG86IG1lc3NhZ2UuZnJvbSxcclxuICAgICAgICAgIGZyb206IG1lc3NhZ2UudG8sXHJcbiAgICAgICAgICBib2R5OiB7XHJcbiAgICAgICAgICAgIGhhbmRzaGFrZVBoYXNlOiAncmVwb3J0ZXJTZXNzaW9uS2V5JyxcclxuICAgICAgICAgICAgdmFsdWU6IF90aGlzLmNyeXB0by5lbmNvZGUoZW5jcnlwdGVkVmFsdWUpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgbGV0IGZpbHRlcmVkTWVzc2FnZSA9IF90aGlzLl9maWx0ZXJNZXNzYWdlVG9IYXNoKHJlcG9ydGVyU2Vzc2lvbktleU1zZywgdmFsdWVUb0VuY3J5cHQgKyBpdiwgY2hhdEtleXMuaHlwZXJ0eUZyb20ubWVzc2FnZUluZm8pO1xyXG5cclxuICAgICAgICByZXR1cm4gX3RoaXMuY3J5cHRvLmhhc2hITUFDKGNoYXRLZXlzLmtleXMuaHlwZXJ0eUZyb21IYXNoS2V5LCBmaWx0ZXJlZE1lc3NhZ2UpO1xyXG4gICAgICB9KS50aGVuKGhhc2hlZE1lc3NhZ2UgPT4ge1xyXG5cclxuICAgICAgICBsZXQgdmFsdWVXaXRoSGFzaCA9IGJ0b2EoSlNPTi5zdHJpbmdpZnkoe3ZhbHVlOiByZXBvcnRlclNlc3Npb25LZXlNc2cuYm9keS52YWx1ZSwgaGFzaDogX3RoaXMuY3J5cHRvLmVuY29kZShoYXNoZWRNZXNzYWdlKSwgaXY6IHZhbHVlLml2fSkpO1xyXG5cclxuICAgICAgICByZXBvcnRlclNlc3Npb25LZXlNc2cuYm9keS52YWx1ZSA9IHZhbHVlV2l0aEhhc2g7XHJcbiAgICAgICAgcmVzb2x2ZSh7bWVzc2FnZTogcmVwb3J0ZXJTZXNzaW9uS2V5TXNnLCBjaGF0S2V5czogY2hhdEtleXN9KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogcmV0dXJucyB0aGUgcmVwb3J0ZXIgYXNzb2NpYXRlZCB0byB0aGUgZGF0YU9iamVjdCBVUkxcclxuICAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgZGF0YU9iamVjdFVSTCAgICAgICAgIGRhdGFPYmplY3QgdXJsXHJcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gIHJlcG9ydGVyICAgICAgICAgICAgICBkYXRhT2JqZWN0IHVybCByZXBvcnRlclxyXG4gICovXHJcbiAgX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdChkYXRhT2JqZWN0VVJMKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIC8vVE9ETyByZW1vdmUgdGhpcyBsb2dpYyBhbmQgbW92ZSBpdCB0byBhIHV0aWwgZnVuY3Rpb25cclxuXHJcbiAgICAgIGxldCBzcGxpdGVkVVJMID0gZGF0YU9iamVjdFVSTC5zcGxpdCgnLycpO1xyXG4gICAgICBsZXQgZmluYWxVUkwgPSBzcGxpdGVkVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRVUkxbMl0gKyAnLycgKyBzcGxpdGVkVVJMWzNdO1xyXG4gICAgICBpZiAoc3BsaXRlZFVSTC5sZW5ndGggPiA2KSB7XHJcbiAgICAgICAgZmluYWxVUkwgPSBzcGxpdGVkVVJMWzBdICsgJy8vJyArIHNwbGl0ZWRVUkxbMl0gKyAnLycgKyBzcGxpdGVkVVJMWzNdICsgJy8nICsgc3BsaXRlZFVSTFs0XTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gY2hlY2sgaWYgaXMgdGhlIGNyZWF0b3Igb2YgdGhlIGh5cGVydHlcclxuICAgICAgbGV0IHJlcG9ydGVyVVJMID0gX3RoaXMucmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGZpbmFsVVJMKTtcclxuXHJcbiAgICAgIGlmIChyZXBvcnRlclVSTCkge1xyXG4gICAgICAgIHJlc29sdmUocmVwb3J0ZXJVUkwpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFscmVhZHkgYW4gYXNzb2NpYXRpb24gZnJvbSBhbiBoeXBlcnR5VVJMIHRvIHRoZSBkYXRhT2JqZWN0XHJcbiAgICAgICAgbGV0IHN0b3JlZFJlcG9ydGVyVVJMID0gX3RoaXMuZGF0YU9iamVjdHNJZGVudGl0eVtmaW5hbFVSTF07XHJcblxyXG4gICAgICAgIGlmIChzdG9yZWRSZXBvcnRlclVSTCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShzdG9yZWRSZXBvcnRlclVSTCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGlzIGFueSBoeXBlcnR5IHRoYXQgc3Vic2NyaWJlZCB0aGUgZGF0YU9iamVjdFVSTFxyXG4gICAgICAgICAgbGV0IHN1YnNjcmliZXJIeXBlcnR5ID0gX3RoaXMucmVnaXN0cnkuZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJIeXBlcnR5KGRhdGFPYmplY3RVUkwpO1xyXG5cclxuICAgICAgICAgIGlmIChzdWJzY3JpYmVySHlwZXJ0eSkge1xyXG4gICAgICAgICAgICByZXNvbHZlKHN1YnNjcmliZXJIeXBlcnR5KTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvLyBzZWFyY2ggaW4gZG9tYWluIHJlZ2lzdHJ5IGZvciB0aGUgaHlwZXJ0eSBhc3NvY2lhdGVkIHRvIHRoZSBkYXRhT2JqZWN0XHJcbiAgICAgICAgICAgIC8vIHNlYXJjaCBpbiBjYXNlIGlzIGEgc3Vic2NyaWJlciB3aG8gd2FudHMgdG8ga25vdyB0aGUgcmVwb3J0ZXJcclxuICAgICAgICAgICAgX3RoaXMucmVnaXN0cnkuZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKGZpbmFsVVJMLCBzcGxpdGVkVVJMWzJdKS50aGVuKGRhdGFPYmplY3QgPT4ge1xyXG4gICAgICAgICAgICAgIF90aGlzLmRhdGFPYmplY3RzSWRlbnRpdHlbZmluYWxVUkxdID0gZGF0YU9iamVjdC5yZXBvcnRlcjtcclxuICAgICAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QucmVwb3J0ZXIpO1xyXG4gICAgICAgICAgICB9LCBlcnIgPT4ge1xyXG4gICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmaWx0ZXIgdGhlIG1lc3NhZ2VzIHRvIGhhc2gsIGJ5IHJlbW92aW5nIHNvbWUgZmllbGRzIG5vdCBnZW5lcmF0ZWQgYnkgdGhlIHJ1bnRpbWUgY29yZVxyXG4gICogQHBhcmFtIHtNZXNzYWdlfSAgbWVzc2FnZSAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VcclxuICAqIEBwYXJhbSB7U3RyaW5nfSAgZGVjcnlwdGVkVmFsdWUgKE9wdGlvbmFsKSAgICB2YWx1ZSBmcm9tIGJvZHkudmFsdWUgaW4gY2FzZSBpdCBvcmlnaW5hbGx5IGNvbWVzIGVuY3J5cHRlZFxyXG4gICogQHBhcmFtIHtKU09OfSAgaWRlbnRpdHkoT3B0aW9uYWwpICAgIGFkZCB0aGUgaHlwZXJ0eSBpZGVudGl0eSBhc3NvY2lhdGVkIGluIGNhc2UgaXMgbm90IGFkZGVkIHRvIHRoZSBpbml0aWFsIG1lc3NhZ2VcclxuICAqIEByZXR1cm4ge01lc3NhZ2V9ICBuZXcgbWVzc2FnZSBmaWx0ZXJlZFxyXG4gICovXHJcbiAgX2ZpbHRlck1lc3NhZ2VUb0hhc2gobWVzc2FnZSwgZGVjcnlwdGVkVmFsdWUsIGlkZW50aXR5KSB7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdHlwZTogbWVzc2FnZS50eXBlLFxyXG4gICAgICBmcm9tOiBtZXNzYWdlLmZyb20sXHJcbiAgICAgIHRvOiAgIG1lc3NhZ2UudG8sXHJcbiAgICAgIGJvZHk6IHtcclxuICAgICAgICBpZGVudGl0eTogaWRlbnRpdHkgfHwgbWVzc2FnZS5ib2R5LmlkZW50aXR5LFxyXG4gICAgICAgIHZhbHVlOiBkZWNyeXB0ZWRWYWx1ZSB8fCBtZXNzYWdlLmJvZHkudmFsdWUsXHJcbiAgICAgICAgaGFuZHNoYWtlUGhhc2U6IG1lc3NhZ2UuYm9keS5oYW5kc2hha2VQaGFzZVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBnZW5lcmF0ZXMgdGhlIGluaXRpYWwgc3RydWN0dXJlIGZvciB0aGUga2V5cyBiZXR3ZWVuIHR3byB1c2Vyc1xyXG4gICogQHBhcmFtIHtKU09OfSAgICBtZXNzYWdlICAgICAgICAgICAgICBpbml0aWFsIG1lc3NhZ2UgdGhhdCB0cmlnZ2VycyB0aGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uXHJcbiAgKiBAcGFyYW0ge1N0cmluZ30gIHVzZXJVUkwgICAgICAgICAgICAgIHVzZXJVUkxcclxuICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVjZWl2ZXIoT3B0aW9uYWwpICBpbmRpY2F0ZXMgaWYgaXMgdGhlIHNlbmRlciBvciB0aGUgcmVjZWl2ZXIgdGhhdCBjcmVhdGVzIGEgbmV3IGNoYXQgY3J5cHRvXHJcbiAgKiBAcmV0dXJuIHtKU09OfSBuZXdDaGF0Q3J5cHRvICBuZXcgSlNPTiBzdHJ1Y3R1cmUgZm9yIHRoZSBjaGF0IGNyeXB0b1xyXG4gICovXHJcbiAgX25ld0NoYXRDcnlwdG8obWVzc2FnZSwgdXNlclVSTCwgcmVjZWl2ZXIpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgLy9jaGVjayB3aGV0aGVyIGlzIHRoZSBzZW5kZXIgb3IgdGhlIHJlY2VpdmVyIHRvIGNyZWF0ZSBhIG5ldyBjaGF0Q3J5cHRvXHJcbiAgICAvL3RvIG1hbnRhaW4gY29uc2lzdGVuY3kgb24gdGhlIGtleXMgaWYgdGhlIHJlY2VpdmVyIGNyZWF0ZSBhIG5ldyBjaGF0Q3J5cHRvLFxyXG4gICAgLy90aGVuIGludmVydCB0aGUgZmllbGRzXHJcbiAgICBsZXQgZnJvbSA9IChyZWNlaXZlcikgPyBtZXNzYWdlLnRvIDogbWVzc2FnZS5mcm9tO1xyXG4gICAgbGV0IHRvID0gKHJlY2VpdmVyKSA/IG1lc3NhZ2UuZnJvbSA6IG1lc3NhZ2UudG87XHJcblxyXG4gICAgbGV0IHVzZXJJbmZvID0gX3RoaXMuZ2V0SWRlbnRpdHkodXNlclVSTCk7XHJcblxyXG4gICAgbGV0IG5ld0NoYXRDcnlwdG8gPVxyXG4gICAge1xyXG4gICAgICBoeXBlcnR5RnJvbTpcclxuICAgICAge1xyXG4gICAgICAgIGh5cGVydHk6IGZyb20sXHJcbiAgICAgICAgdXNlcklEOiB1c2VySW5mby5tZXNzYWdlSW5mby51c2VyUHJvZmlsZS51c2VybmFtZSxcclxuICAgICAgICBwcml2YXRlS2V5OiB1c2VySW5mby5rZXlQYWlyLnByaXZhdGUsXHJcbiAgICAgICAgcHVibGljS2V5OiB1c2VySW5mby5rZXlQYWlyLnB1YmxpYyxcclxuICAgICAgICBhc3NlcnRpb246IHVzZXJJbmZvLmFzc2VydGlvbixcclxuICAgICAgICBtZXNzYWdlSW5mbzogdXNlckluZm8ubWVzc2FnZUluZm9cclxuICAgICAgfSxcclxuICAgICAgaHlwZXJ0eVRvOlxyXG4gICAgICB7XHJcbiAgICAgICAgaHlwZXJ0eTogdG8sXHJcbiAgICAgICAgdXNlcklEOiB1bmRlZmluZWQsXHJcbiAgICAgICAgcHVibGljS2V5OiB1bmRlZmluZWQsXHJcbiAgICAgICAgYXNzZXJ0aW9uOiB1bmRlZmluZWRcclxuICAgICAgfSxcclxuICAgICAga2V5czpcclxuICAgICAge1xyXG4gICAgICAgIGh5cGVydHlUb1Nlc3Npb25LZXk6IHVuZGVmaW5lZCxcclxuICAgICAgICBoeXBlcnR5RnJvbVNlc3Npb25LZXk6IHVuZGVmaW5lZCxcclxuICAgICAgICBoeXBlcnR5VG9IYXNoS2V5OiB1bmRlZmluZWQsXHJcbiAgICAgICAgaHlwZXJ0eUZyb21IYXNoS2V5OiB1bmRlZmluZWQsXHJcbiAgICAgICAgdG9SYW5kb206IHVuZGVmaW5lZCxcclxuICAgICAgICBmcm9tUmFuZG9tOiB1bmRlZmluZWQsXHJcbiAgICAgICAgcHJlbWFzdGVyS2V5OiB1bmRlZmluZWQsXHJcbiAgICAgICAgbWFzdGVyS2V5OiB1bmRlZmluZWRcclxuICAgICAgfSxcclxuICAgICAgaGFuZHNoYWtlSGlzdG9yeToge1xyXG4gICAgICAgIHNlbmRlckhlbGxvOiB1bmRlZmluZWQsXHJcbiAgICAgICAgcmVjZWl2ZXJIZWxsbzogdW5kZWZpbmVkLFxyXG4gICAgICAgIHNlbmRlckNlcnRpZmljYXRlOiB1bmRlZmluZWQsXHJcbiAgICAgICAgcmVjZWl2ZXJGaW5pc2hlZE1lc3NhZ2U6IHVuZGVmaW5lZFxyXG4gICAgICB9LFxyXG4gICAgICBpbml0aWFsTWVzc2FnZTogKG1lc3NhZ2UuYm9keS5pZ25vcmUpID8gdW5kZWZpbmVkIDogbWVzc2FnZSxcclxuICAgICAgY2FsbGJhY2s6IG1lc3NhZ2UuY2FsbGJhY2ssXHJcbiAgICAgIGF1dGhlbnRpY2F0ZWQ6IGZhbHNlLFxyXG4gICAgICBkYXRhT2JqZWN0VVJMOiBtZXNzYWdlLmRhdGFPYmplY3RVUkxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ld0NoYXRDcnlwdG87XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJZGVudGl0eU1vZHVsZTtcclxuIiwiY2xhc3MgQWN0aW9uc1NlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIGxldCBwb2xpY2llcyA9IF90aGlzLmNvbnRleHQuZ2V0UG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpO1xyXG5cclxuICAgICAgaWYgKHBvbGljaWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAocG9saWNpZXMuc2VydmljZVByb3ZpZGVyUG9saWN5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHBvbGljaWVzLnNlcnZpY2VQcm92aWRlclBvbGljeS5lbmZvcmNlQWN0aW9ucyhfdGhpcy5jb250ZXh0LCBtZXNzYWdlKS50aGVuKG1lc3NhZ2VzID0+IHtcclxuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlcyk7XHJcbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAocG9saWNpZXMudXNlclBvbGljeSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHBvbGljaWVzLnVzZXJQb2xpY3kuZW5mb3JjZUFjdGlvbnMoX3RoaXMuY29udGV4dCwgbWVzc2FnZSkudGhlbihtZXNzYWdlcyA9PiB7XHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlcyk7XHJcbiAgICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShbbWVzc2FnZV0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKFttZXNzYWdlXSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZm9yd2FyZFRvSUQobWVzc2FnZSwgZW1haWwpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBpZiAoIV90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ2ZvcndhcmQgbWVzc2FnZSB0byBnaXZlbiBJRCBpcyB1bnN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Jyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgaWYgKF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Lmh5cGVydGllc0xpc3RbMF0uaHlwZXJ0eVVSTCA9PT0gbWVzc2FnZS50bykge1xyXG4gICAgICAgIGxldCBzcGxpdFRvID0gKG1lc3NhZ2UudG8pLnNwbGl0KCc6Ly8nKTtcclxuICAgICAgICBpZiAoc3BsaXRUb1swXSAhPT0gJ3J1bnRpbWUnKSB7XHJcbiAgICAgICAgICBfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5kaXNjb3Zlckh5cGVydHlQZXJVc2VyKGVtYWlsKS50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UudG8gPSByZXN1bHQuaHlwZXJ0eVVSTDtcclxuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LnZpYSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICAgICAgX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZvcndhcmRUb0h5cGVydHkobWVzc2FnZSwgaHlwZXJ0eVVSTCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGlmICghX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkpIHRocm93IG5ldyBFcnJvcignZm9yd2FyZCBtZXNzYWdlIHRvIGdpdmVuIElEIGlzIHVuc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQnKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgaWYgKF90aGlzLmNvbnRleHQucnVudGltZVJlZ2lzdHJ5Lmh5cGVydGllc0xpc3RbMF0uaHlwZXJ0eVVSTCA9PT0gbWVzc2FnZS50bykge1xyXG4gICAgICAgIGxldCBzcGxpdFRvID0gKG1lc3NhZ2UudG8pLnNwbGl0KCc6Ly8nKTtcclxuICAgICAgICBpZiAoc3BsaXRUb1swXSAhPT0gJ3J1bnRpbWUnKSB7XHJcbiAgICAgICAgICBtZXNzYWdlLnRvID0gaHlwZXJ0eVVSTDtcclxuICAgICAgICAgIG1lc3NhZ2UuYm9keS52aWEgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgX3RoaXMuY29udGV4dC5ydW50aW1lUmVnaXN0cnkuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2VuZEF1dG9tYXRpY01lc3NhZ2UobWVzc2FnZSwgdGV4dCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICBsZXQgYXV0b21hdGljTWVzc2FnZSA9IHtcclxuICAgICAgICBmcm9tOiBtZXNzYWdlLnRvLFxyXG4gICAgICAgIHRvOiBtZXNzYWdlLmZyb20sXHJcbiAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgdmFsdWU6IHRleHRcclxuICAgICAgICB9LFxyXG4gICAgICAgIHR5cGU6IG1lc3NhZ2UudHlwZVxyXG4gICAgICB9O1xyXG4gICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICBfdGhpcy5jb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShhdXRvbWF0aWNNZXNzYWdlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFjdGlvbnNTZXJ2aWNlO1xyXG4iLCJjbGFzcyBPcGVyYXRvcnMge1xyXG5cclxuICBhbmQocGFyYW1zKSB7XHJcbiAgICByZXR1cm4gcGFyYW1zWzBdICYmIHBhcmFtc1sxXTtcclxuICB9XHJcblxyXG4gIGJldHdlZW4ocGFyYW1zKSB7XHJcbiAgICBsZXQgc3RhcnQgPSBwYXJzZUludChwYXJhbXNbMF1bMF0pO1xyXG4gICAgbGV0IGVuZCA9IHBhcnNlSW50KHBhcmFtc1swXVsxXSk7XHJcbiAgICBsZXQgbm93ID0gcGFyYW1zWzFdO1xyXG5cclxuICAgIGlmIChlbmQgPCBzdGFydCkge1xyXG4gICAgICBub3cgPSAobm93IDwgc3RhcnQpID8gbm93ICs9IDI0MDAgOiBub3c7XHJcbiAgICAgIGVuZCArPSAyNDAwO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAobm93ID4gc3RhcnQgJiYgbm93IDwgZW5kKTtcclxuICB9XHJcblxyXG4gIGVxdWFscyhwYXJhbXMpIHtcclxuICAgIHJldHVybiBTdHJpbmcocGFyYW1zWzBdKSA9PT0gJyonIHx8IFN0cmluZyhwYXJhbXNbMF0pID09PSBTdHJpbmcocGFyYW1zWzFdKTtcclxuICB9XHJcblxyXG4gIGdyZWF0ZXJUaGFuKHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHBhcmFtc1sxXSA+IHBhcmFtc1swXTtcclxuICB9XHJcblxyXG4gIGluKHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHBhcmFtc1swXS5pbmRleE9mKHBhcmFtc1sxXSkgPiAtMTtcclxuICB9XHJcblxyXG4gIGxlc3NUaGFuKHBhcmFtcykge1xyXG4gICAgcmV0dXJuIHBhcmFtc1sxXSA8IHBhcmFtc1swXTtcclxuICB9XHJcblxyXG4gIG5vdChwYXJhbXMpIHtcclxuICAgIHJldHVybiAhcGFyYW1zWzBdO1xyXG4gIH1cclxuXHJcbiAgb3IocGFyYW1zKSB7XHJcbiAgICByZXR1cm4gcGFyYW1zWzBdIHx8IHBhcmFtc1sxXTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBPcGVyYXRvcnM7XHJcbiIsImltcG9ydCBPcGVyYXRvcnMgZnJvbSAnLi9PcGVyYXRvcnMnO1xyXG5cclxuLyoqXHJcbiogVGhlIFBvbGljeSBEZWNpc2lvbiBQb2ludCAoUERQKSBkZWNpZGVzIGlmIGEgbWVzc2FnZSBpcyB0byBiZSBhdXRob3Jpc2VkIGJ5IGNoZWNraW5nIGEgc2V0IG9mXHJcbiogcG9saWNpZXMuIFRoZSByZXNvdXJjZSB0byBiZSB2ZXJpZmllZCBpcyBzcGVjaWZpZWQgaW4gdGhlIGZpcnN0IHdvcmQgb2YgdGhlICdjb25kaXRpb24nIGZpZWxkIG9mXHJcbiogYSBQb2xpY3kgb2JqZWN0LiBUaGUgaW1wbGVtZW50YXRpb24gdGhhdCB2ZXJpZmllcyBpZiB0aGUgbWVzc2FnZSBpcyBjb21wbGlhbnQgd2l0aCBhIHBvbGljeSBpc1xyXG4qIHNwZWNpZmllZCBpbiBhIGhhc2h0YWJsZSB0byBhbGxvdyBkeW5hbWljIGRlZmluaXRpb24gb2YgdGhlIGltcGxlbWVudGF0aW9uLCBwcm92aWRpbmdcclxuKiBleHRlbnNpYmlsaXR5IHRvIHRoZSBQb2xpY3kgRW5naW5lIGZ1bmN0aW9uYWxpdGllcy5cclxuKi9cclxuY2xhc3MgUERQIHtcclxuXHJcbiAgY29uc3RydWN0b3IoY29udGV4dCkge1xyXG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgIHRoaXMub3BlcmF0b3JzID0gbmV3IE9wZXJhdG9ycygpO1xyXG4gIH1cclxuXHJcbiAgZXZhbHVhdGVQb2xpY2llcyhtZXNzYWdlLCBpc0luY29taW5nTWVzc2FnZSkge1xyXG4gICAgbGV0IHBvbGljaWVzID0gdGhpcy5jb250ZXh0LmdldFBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKTtcclxuICAgIGxldCByZXN1bHQgPSAnTm90IEFwcGxpY2FibGUnO1xyXG5cclxuICAgIGlmIChwb2xpY2llcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJlc3VsdCA9IHRoaXMuZXZhbHVhdGVQb2xpY3kobWVzc2FnZSwgcG9saWNpZXMuc2VydmljZVByb3ZpZGVyUG9saWN5LCBpc0luY29taW5nTWVzc2FnZSk7XHJcbiAgICAgIGlmIChyZXN1bHQgfHwgcmVzdWx0ID09PSAnTm90IEFwcGxpY2FibGUnKSB7XHJcbiAgICAgICAgbGV0IHVzZXJSZXN1bHQgPSB0aGlzLmV2YWx1YXRlUG9saWN5KG1lc3NhZ2UsIHBvbGljaWVzLnVzZXJQb2xpY3ksIGlzSW5jb21pbmdNZXNzYWdlKTtcclxuICAgICAgICBpZiAodXNlclJlc3VsdCAhPT0gJ05vdCBBcHBsaWNhYmxlJykge1xyXG4gICAgICAgICAgcmVzdWx0ID0gdXNlclJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgZXZhbHVhdGVQb2xpY3kobWVzc2FnZSwgcG9saWN5LCBpc0luY29taW5nKSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gJ05vdCBBcHBsaWNhYmxlJztcclxuICAgIGlmIChwb2xpY3kpIHtcclxuICAgICAgcmVzdWx0ID0gcG9saWN5LmV2YWx1YXRlUnVsZXModGhpcy5jb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBEUDtcclxuIiwiaW1wb3J0IEFjdGlvbnNTZXJ2aWNlIGZyb20gJy4vQWN0aW9uc1NlcnZpY2UnO1xuaW1wb3J0IFBEUCBmcm9tICcuL1BEUCc7XG5pbXBvcnQgUG9saWN5IGZyb20gJy4vUG9saWN5JztcbmltcG9ydCB7aXNIeXBlcnR5VVJMfSBmcm9tICcuLi91dGlscy91dGlscyc7XG5cbmNsYXNzIFBFUCB7XG5cbiAgLyoqXG4gICogQ3JlYXRlcyBhIFBvbGljeSBFbmZvcmNlbWVudCBQb2ludCAoUEVQKSBpbnN0YW5jZVxuICAqIEBwYXJhbSAgICB7T2JqZWN0fSAgICBjb250ZXh0XG4gICovXG4gIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgX3RoaXMucGRwID0gbmV3IFBEUChjb250ZXh0KTtcbiAgICBfdGhpcy5hY3Rpb25zU2VydmljZSA9IG5ldyBBY3Rpb25zU2VydmljZShjb250ZXh0KTtcbiAgICBfdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICBjb250ZXh0LnBlcCA9IF90aGlzO1xuXG4gICAgLy9UT0RPIHNob3VsZCBiZSBhZGRlZCBhIHRyaWdnZXIgdG8gdmVyaWZ5IHdoZW4gdGhlIGxvYWRDb25maWd1cmF0aW9ucyBpcyBzdWNjZXNzZnVsbHkgY29tcGxldGVkXG4gICAgY29udGV4dC5sb2FkQ29uZmlndXJhdGlvbnMoKTtcbiAgfVxuXG4gIC8qKlxuICAqIEFkZHMgYSBwb2xpY3kgdG8gdGhlIFBvbGljeSBFbmZvcmNlbWVudCBQb2ludCAoUEVQKS4gVGhlIHBvbGljeSBjYW4gYmUgY3JlYXRlZCBieSB0aGUgc2VydmljZVxuICAqIHByb3ZpZGVyIG9yIGJ5IHRoZSB1c2VyLlxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBzb3VyY2VcbiAgKiBAcGFyYW0gICAge1N0cmluZ30gICAga2V5XG4gICogQHBhcmFtICAgIHtPYmplY3R9ICAgIHBvbGljeVxuICAqL1xuICBhZGRQb2xpY3koc291cmNlLCBrZXksIHBvbGljeSwgY29tYmluaW5nQWxnb3JpdGhtKSB7XG4gICAgaWYgKCFzb3VyY2UpIHRocm93IG5ldyBFcnJvcignc291cmNlIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgaWYgKCFrZXkpIHRocm93IG5ldyBFcnJvcigna2V5IGlzIG5vdCBkZWZpbmVkJyk7XG5cbiAgICBpZiAocG9saWN5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBvbGljeSA9IG5ldyBQb2xpY3koa2V5LCBbXSwgW10sIGNvbWJpbmluZ0FsZ29yaXRobSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghKHBvbGljeSBpbnN0YW5jZW9mIFBvbGljeSkpIHtcbiAgICAgICAgcG9saWN5ID0gbmV3IFBvbGljeShwb2xpY3kua2V5LCBwb2xpY3kucnVsZXMsIHBvbGljeS5hY3Rpb25zLCBwb2xpY3kuY29tYmluaW5nQWxnb3JpdGhtKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgY2FzZSAnU0VSVklDRV9QUk9WSURFUic6XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoc291cmNlLCBwb2xpY3ksIGtleSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnVVNFUic6XG4gICAgICAgIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XSA9IHBvbGljeTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcyhzb3VyY2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIHBvbGljeSBzb3VyY2U6ICcgKyBzb3VyY2UpO1xuICAgIH1cbiAgfVxuXG4gIGF1dGhvcmlzZShtZXNzYWdlKSB7XG4gICAgY29uc29sZS5sb2coJ1tQb2xpY3kuUEVQIEF1dGhvcmlzZV0gJywgbWVzc2FnZSk7XG4gICAgY29uc29sZS5sb2cobWVzc2FnZSk7XG4gICAgaWYgKCFtZXNzYWdlKSB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UgaXMgbm90IGRlZmluZWQnKTtcbiAgICBpZiAoIW1lc3NhZ2UuZnJvbSkgdGhyb3cgbmV3IEVycm9yKCdtZXNzYWdlLmZyb20gaXMgbm90IGRlZmluZWQnKTtcbiAgICBpZiAoIW1lc3NhZ2UudG8pIHRocm93IG5ldyBFcnJvcignbWVzc2FnZS50byBpcyBub3QgZGVmaW5lZCcpO1xuICAgIGlmICghbWVzc2FnZS50eXBlKSB0aHJvdyBuZXcgRXJyb3IoJ21lc3NhZ2UudHlwZSBpcyBub3QgZGVmaW5lZCcpO1xuICAgIG1lc3NhZ2UuYm9keSA9IG1lc3NhZ2UuYm9keSB8fCB7fTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIG1lc3NhZ2UuYm9keSA9IG1lc3NhZ2UuYm9keSB8fCB7fTtcbiAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICBsZXQgcmVzdWx0O1xuICAgICAgaWYgKF90aGlzLl9pc1RvVmVyaWZ5KG1lc3NhZ2UpKSB7XG4gICAgICAgIGxldCBpc0luY29taW5nID0gX3RoaXMuX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgICBfdGhpcy5jb250ZXh0LnByZXBhcmVGb3JFdmFsdWF0aW9uKG1lc3NhZ2UsIGlzSW5jb21pbmcpLnRoZW4obWVzc2FnZSA9PiB7XG4gICAgICAgICAgcmVzdWx0ID0gX3RoaXMucGRwLmV2YWx1YXRlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZyk7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gJ05vdCBBcHBsaWNhYmxlJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gX3RoaXMuY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyO1xuICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgX3RoaXMuYWN0aW9uc1NlcnZpY2UuZW5mb3JjZVBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmcpLnRoZW4obWVzc2FnZXMgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBtZXNzYWdlcykge1xuICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNbaV07XG4gICAgICAgICAgICAgIF90aGlzLmNvbnRleHQucHJlcGFyZVRvRm9yd2FyZChtZXNzYWdlLCBpc0luY29taW5nLCByZXN1bHQpLnRoZW4obWVzc2FnZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSAobWVzc2FnZS5ib2R5LmF1dGggPT09IHVuZGVmaW5lZCkgPyB0cnVlIDogbWVzc2FnZS5ib2R5LmF1dGg7XG4gICAgICAgICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0geyBib2R5OiB7IGNvZGU6IDQwMywgZGVzY3JpcHRpb246ICdCbG9ja2VkIGJ5IHBvbGljeScgfSwgZnJvbTogbWVzc2FnZS50bywgdG86IG1lc3NhZ2UuZnJvbSwgdHlwZTogJ3Jlc3BvbnNlJyB9O1xuICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gX3RoaXMuY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTtcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSB7IGJvZHk6IHsgY29kZTogNDAzLCBkZXNjcmlwdGlvbjogJ0Jsb2NrZWQgYnkgcG9saWN5JyB9LCBmcm9tOiBtZXNzYWdlLnRvLCB0bzogbWVzc2FnZS5mcm9tLCB0eXBlOiAncmVzcG9uc2UnIH07XG4gICAgICAgICAgcmVqZWN0KGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGF1dGhvcmlzZVN5bmMobWVzc2FnZSkge1xuICAgIGxldCByZXN1bHQ7XG4gICAgbWVzc2FnZS5ib2R5ID0gbWVzc2FnZS5ib2R5IHx8IHt9O1xuICAgIGlmICh0aGlzLl9pc1RvVmVyaWZ5KG1lc3NhZ2UpKSB7XG4gICAgICBsZXQgaXNJbmNvbWluZyA9IHRoaXMuX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpO1xuICAgICAgbWVzc2FnZSA9IHRoaXMuY29udGV4dC5wcmVwYXJlRm9yRXZhbHVhdGlvbihtZXNzYWdlLCBpc0luY29taW5nKTtcbiAgICAgIHJlc3VsdCA9IHRoaXMucGRwLmV2YWx1YXRlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZyk7XG4gICAgICBpZiAocmVzdWx0ID09PSAnTm90IEFwcGxpY2FibGUnKSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY29udGV4dC5kZWZhdWx0QmVoYXZpb3VyO1xuICAgICAgICBtZXNzYWdlLmJvZHkuYXV0aCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdGhpcy5hY3Rpb25zU2VydmljZS5lbmZvcmNlUG9saWNpZXMobWVzc2FnZSwgaXNJbmNvbWluZyk7XG4gICAgICBtZXNzYWdlID0gdGhpcy5jb250ZXh0LnByZXBhcmVUb0ZvcndhcmQobWVzc2FnZSwgaXNJbmNvbWluZywgcmVzdWx0KTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSAobWVzc2FnZS5ib2R5LmF1dGggPT09IHVuZGVmaW5lZCkgPyB0cnVlIDogbWVzc2FnZS5ib2R5LmF1dGg7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSB0aGlzLmNvbnRleHQuZGVmYXVsdEJlaGF2aW91cjtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgbWVzc2FnZS5ib2R5LmF1dGggPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX2lzSW5jb21pbmdNZXNzYWdlKG1lc3NhZ2UpIHtcblxuICAgIHJldHVybiAhKHRoaXMuY29udGV4dC5pc0xvY2FsKG1lc3NhZ2UuZnJvbSkpO1xuICB9XG5cbiAgLyoqXG4gICogSWRlbnRpZmllcyB0aGUgbWVzc2FnZXMgdG8gYmUgdmVyaWZpZWQgYnkgdGhlIFBvbGljeSBFbmdpbmVcbiAgKiBAcGFyYW0gICAge01lc3NhZ2V9ICAgbWVzc2FnZVxuICAqIEByZXR1cm5zICB7Ym9vbGVhbn0gICByZXR1cm5zIHRydWUgaWYgdGhlIG1lc3NhZ2UgcmVxdWlyZXMgZW5jcnlwdGlvbi9kZWNyeXB0aW9uXG4gICogICAgICAgICAgICAgICAgICAgICAgIG9yIGlmIGl0cyB0eXBlIGVxdWFscyAnaGFuZHNoYWtlJzsgZmFsc2Ugb3RoZXJ3aXNlXG4gICovXG4gIF9pc1RvVmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICBsZXQgc2NoZW1hc1RvSWdub3JlID0gWydkb21haW4nLCAnZG9tYWluLWlkcCcsICdnbG9iYWwnLCAnaHlwZXJ0eS1ydW50aW1lJywgJ3J1bnRpbWUnXTtcbiAgICBsZXQgc3BsaXRGcm9tID0gKG1lc3NhZ2UuZnJvbSkuc3BsaXQoJzovLycpO1xuICAgIGxldCBmcm9tU2NoZW1hID0gc3BsaXRGcm9tWzBdO1xuICAgIGxldCBzcGxpdFRvID0gKG1lc3NhZ2UudG8pLnNwbGl0KCc6Ly8nKTtcbiAgICBsZXQgdG9TY2hlbWEgPSAgc3BsaXRUb1swXTtcbiAgICBsZXQgZnJvbVBhdGggPSAobWVzc2FnZS5mcm9tKS5zcGxpdCgnLycpO1xuICAgIGxldCB0b1BhdGggPSAobWVzc2FnZS50bykuc3BsaXQoJy8nKTtcblxuICAgIC8vIFNpZ25hbGxpbmcgbWVzc2FnZXMgYmV0d2VlbiBQMlAgU3R1YnMgZG9uJ3QgaGF2ZSB0byBiZSB2ZXJpZmllZC4gRkZTXG5cbiAgICBpZiAoZnJvbVBhdGguaW5kZXhPZigncDJwaGFuZGxlcicpICE9PSAtMSB8fCBmcm9tUGF0aC5pbmRleE9mKCdwMnByZXF1ZXN0ZXInKSAhPT0gLTEgfHwgdG9QYXRoLmluZGV4T2YoJ3AycGhhbmRsZXInKSAhPT0gLTEgfHwgdG9QYXRoLmluZGV4T2YoJ3AycHJlcXVlc3RlcicpICE9PSAtMSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIC8vIGhhY2sgdG8gZGlzYWJsZSBJZGVudGl0eSB2ZXJpZmljYXRpb24gZm9yIG1lc3NhZ2VzIGNvbWluZyBmcm9tIGxlZ2FjeSBkb21haW5zIHdoaWxlIHNvbHV0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZFxuXG4gICAgbGV0IGZyb20gPSBtZXNzYWdlLmZyb207XG5cbiAgICBpZiAobWVzc2FnZS5ib2R5ICYmIG1lc3NhZ2UuYm9keS5zb3VyY2UpXG4gICAgIGZyb20gPSBtZXNzYWdlLmJvZHkuc291cmNlO1xuXG4gICAgaWYgKHRoaXMuY29udGV4dC5pc0ludGVyd29ya2luZ1Byb3RvU3R1Yihmcm9tKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChtZXNzYWdlLmZyb20gPT09IGZyb21TY2hlbWEgfHwgbWVzc2FnZS50byA9PT0gdG9TY2hlbWEgfHwgbWVzc2FnZS50eXBlID09PSAncmVhZCcgfHwgbWVzc2FnZS50eXBlID09PSAncmVzcG9uc2UnIHx8IChpc0h5cGVydHlVUkwobWVzc2FnZS5mcm9tKSAmJiBtZXNzYWdlLnR5cGUgPT09ICdkZWxldGUnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2NoZW1hc1RvSWdub3JlLmluZGV4T2YoZnJvbVNjaGVtYSkgPT09IC0xIHx8IHNjaGVtYXNUb0lnbm9yZS5pbmRleE9mKHRvU2NoZW1hKSA9PT0gLTE7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlUG9saWN5KHNvdXJjZSwga2V5KSB7XG4gICAgaWYgKCFzb3VyY2UpIHRocm93IG5ldyBFcnJvcignc291cmNlIGlzIG5vdCBkZWZpbmVkJyk7XG4gICAgaWYgKHNvdXJjZSAhPT0gJyonICYmICFrZXkpIHRocm93IG5ldyBFcnJvcigna2V5IGlzIG5vdCBkZWZpbmVkJyk7XG5cbiAgICBzd2l0Y2ggKHNvdXJjZSkge1xuICAgICAgY2FzZSAnKic6XG4gICAgICAgIHRoaXMuY29udGV4dC5zZXJ2aWNlUHJvdmlkZXJQb2xpY3kgPSB7fTtcbiAgICAgICAgdGhpcy5jb250ZXh0LnVzZXJQb2xpY2llcyA9IHt9O1xuICAgICAgICB0aGlzLmNvbnRleHQuYWN0aXZlVXNlclBvbGljeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmVQb2xpY2llcygnVVNFUicpO1xuICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZVBvbGljaWVzKCdTRVJWSUNFX1BST1ZJREVSJyk7XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlQWN0aXZlUG9saWN5KCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnU0VSVklDRV9QUk9WSURFUic6XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvbnRleHQuc2VydmljZVByb3ZpZGVyUG9saWN5W2tleV07XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdVU0VSJzpcbiAgICAgICAgZGVsZXRlIHRoaXMuY29udGV4dC51c2VyUG9saWNpZXNba2V5XTtcbiAgICAgICAgaWYgKGtleSA9PT0gdGhpcy5jb250ZXh0LmFjdGl2ZVVzZXJQb2xpY3kpIHtcbiAgICAgICAgICB0aGlzLmNvbnRleHQuYWN0aXZlVXNlclBvbGljeSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aGlzLmNvbnRleHQuc2F2ZUFjdGl2ZVBvbGljeSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlUG9saWNpZXMoJ1VTRVInKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBFcnJvcignVW5rbm93biBwb2xpY3kgc291cmNlOiAnICsgc291cmNlKTtcbiAgICB9XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBQRVA7XG4iLCJpbXBvcnQgQWxsb3dPdmVycmlkZXMgZnJvbSAnLi9jb21iaW5pbmdBbGdvcml0aG1zL0FsbG93T3ZlcnJpZGVzJztcclxuaW1wb3J0IEJsb2NrT3ZlcnJpZGVzIGZyb20gJy4vY29tYmluaW5nQWxnb3JpdGhtcy9CbG9ja092ZXJyaWRlcyc7XHJcbmltcG9ydCBGaXJzdEFwcGxpY2FibGUgZnJvbSAnLi9jb21iaW5pbmdBbGdvcml0aG1zL0ZpcnN0QXBwbGljYWJsZSc7XHJcbmltcG9ydCBSdWxlIGZyb20gJy4vUnVsZSc7XHJcblxyXG5jbGFzcyBQb2xpY3kge1xyXG5cclxuICBjb25zdHJ1Y3RvcihrZXksIHJ1bGVzLCBhY3Rpb25zLCBjb21iaW5pbmdBbGdvcml0aG0pIHtcclxuICAgIGlmICgha2V5KSB0aHJvdyBuZXcgRXJyb3IoJ2tleSBpcyBub3QgZGVmaW5lZCcpO1xyXG4gICAgaWYgKCFhY3Rpb25zKSB0aHJvdyBuZXcgRXJyb3IoJ2FjdGlvbnMgYXJlIG5vdCBkZWZpbmVkJyk7XHJcblxyXG4gICAgdGhpcy5hY3Rpb25zID0gYWN0aW9ucztcclxuICAgIHRoaXMua2V5ID0ga2V5O1xyXG4gICAgdGhpcy5fc2V0UnVsZXMocnVsZXMpO1xyXG4gICAgdGhpcy5fc2V0Q29tYmluaW5nQWxnb3JpdGhtKGNvbWJpbmluZ0FsZ29yaXRobSk7XHJcbiAgfVxyXG5cclxuICBhZGRBY3Rpb24obWV0aG9kLCBwYXJhbSkge1xyXG4gICAgdGhpcy5hY3Rpb25zLnB1c2goeyBtZXRob2Q6IG1ldGhvZCwgcGFyYW06IHBhcmFtIH0pO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlUnVsZShkZWNpc2lvbiwgY29uZGl0aW9uLCBzY29wZSwgdGFyZ2V0LCBwcmlvcml0eSkge1xyXG4gICAgaWYgKHByaW9yaXR5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcHJpb3JpdHkgPSB0aGlzLmdldExhc3RQcmlvcml0eSgpICsgMTtcclxuICAgIH1cclxuICAgIGxldCBydWxlID0gbmV3IFJ1bGUoZGVjaXNpb24sIGNvbmRpdGlvbiwgc2NvcGUsIHRhcmdldCwgcHJpb3JpdHkpO1xyXG4gICAgdGhpcy5ydWxlcy5wdXNoKHJ1bGUpO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlUnVsZShydWxlKSB7XHJcbiAgICBsZXQgaW5kZXhUb1JlbW92ZSA9IHRoaXMucnVsZXMuaW5kZXhPZihydWxlKTtcclxuICAgIHRoaXMucnVsZXMuc3BsaWNlKGluZGV4VG9SZW1vdmUsIDEpO1xyXG4gIH1cclxuXHJcbiAgZW5mb3JjZUFjdGlvbnMoY29udGV4dCwgbWVzc2FnZSkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgbGV0IHJlc3VsdHMgPSBbXTtcclxuICAgICAgaWYgKHRoaXMuYWN0aW9ucy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMuYWN0aW9ucykge1xyXG4gICAgICAgICAgbGV0IHJlc3VsdCA9IGNvbnRleHQucGVwLmFjdGlvbnNTZXJ2aWNlW3RoaXMuYWN0aW9uc1tpXS5tZXRob2RdKG1lc3NhZ2UsIHRoaXMuYWN0aW9uc1tpXS5wYXJhbSk7XHJcbiAgICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgUHJvbWlzZS5hbGwocmVzdWx0cykudGhlbigobWVzc2FnZXMpID0+IHtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZXMpO1xyXG4gICAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzb2x2ZShbbWVzc2FnZV0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGV2YWx1YXRlUnVsZXMoY29udGV4dCwgbWVzc2FnZSwgaXNJbmNvbWluZykge1xyXG4gICAgbGV0IHJlc3VsdHMgPSBbXTtcclxuICAgIGZvciAobGV0IGkgaW4gdGhpcy5ydWxlcykge1xyXG4gICAgICByZXN1bHRzLnB1c2godGhpcy5ydWxlc1tpXS5ldmFsdWF0ZShjb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtLmNvbWJpbmUocmVzdWx0cyk7XHJcbiAgfVxyXG5cclxuICBnZXRMYXN0UHJpb3JpdHkoKSB7XHJcbiAgICBsZXQgcHJpb3JpdGllcyA9IFtdO1xyXG5cclxuICAgIGlmICh0aGlzLnJ1bGVzLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICBmb3IgKGxldCBpIGluIHRoaXMucnVsZXMpIHtcclxuICAgICAgICBwcmlvcml0aWVzLnB1c2godGhpcy5ydWxlc1tpXS5wcmlvcml0eSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KE1hdGgsIHByaW9yaXRpZXMpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZ2V0UnVsZUJ5UHJpb3JpdHkocHJpb3JpdHkpIHtcclxuICAgIGZvciAobGV0IGkgaW4gdGhpcy5ydWxlcykge1xyXG4gICAgICBpZiAoU3RyaW5nKHRoaXMucnVsZXNbaV0ucHJpb3JpdHkpID09PSBTdHJpbmcocHJpb3JpdHkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucnVsZXNbaV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRocm93IEVycm9yKCdSdWxlIHdpdGggcHJpb3JpdHkgJyArIHByaW9yaXR5ICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcclxuICB9XHJcblxyXG4gIF9zZXRDb21iaW5pbmdBbGdvcml0aG0oY29tYmluaW5nQWxnb3JpdGhtKSB7XHJcbiAgICBpZiAoIWNvbWJpbmluZ0FsZ29yaXRobSkge1xyXG4gICAgICBjb21iaW5pbmdBbGdvcml0aG0gPSAnYmxvY2tPdmVycmlkZXMnO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChjb21iaW5pbmdBbGdvcml0aG0pIHtcclxuICAgICAgY2FzZSAnYmxvY2tPdmVycmlkZXMnOlxyXG4gICAgICAgIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtID0gbmV3IEJsb2NrT3ZlcnJpZGVzKCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2FsbG93T3ZlcnJpZGVzJzpcclxuICAgICAgICB0aGlzLmNvbWJpbmluZ0FsZ29yaXRobSA9IG5ldyBBbGxvd092ZXJyaWRlcygpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdmaXJzdEFwcGxpY2FibGUnOlxyXG4gICAgICAgIHRoaXMuY29tYmluaW5nQWxnb3JpdGhtID0gbmV3IEZpcnN0QXBwbGljYWJsZSgpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHRocm93IEVycm9yKCdVbmtub3duIGFsZ29yaXRobTogJyArIGNvbWJpbmluZ0FsZ29yaXRobSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfc2V0UnVsZXMocnVsZXMpIHtcclxuICAgIHRoaXMucnVsZXMgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpIGluIHJ1bGVzKSB7XHJcbiAgICAgIGxldCBydWxlID0gcnVsZXNbaV07XHJcbiAgICAgIGlmIChydWxlLnByaW9yaXR5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBydWxlLnByaW9yaXR5ID0gdGhpcy5nZXRMYXN0UHJpb3JpdHkoKSArIDE7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCEocnVsZSBpbnN0YW5jZW9mIFJ1bGUpKSB7XHJcbiAgICAgICAgcnVsZSA9IG5ldyBSdWxlKHJ1bGUuZGVjaXNpb24sIHJ1bGUuY29uZGl0aW9uLCBydWxlLnNjb3BlLCBydWxlLnRhcmdldCwgcnVsZS5wcmlvcml0eSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5ydWxlcy5wdXNoKHJ1bGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc29ydFJ1bGVzKCkge1xyXG4gICAgcmV0dXJuIHRoaXMucnVsZXMuc29ydChmdW5jdGlvbihhLCBiKSB7XHJcbiAgICAgIGxldCB4ID0gYS5wcmlvcml0eTsgbGV0IHkgPSBiLnByaW9yaXR5O1xyXG4gICAgICByZXR1cm4gKCh4IDwgeSkgPyAtMSA6ICgoeCA+IHkpID8gMSA6IDApKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFBvbGljeTtcclxuIiwiaW1wb3J0IHtkaXZpZGVFbWFpbCwgZGl2aWRlVVJMLCBpc0RhdGFPYmplY3RVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmNsYXNzIFJlVGhpbmtDdHgge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuZGVmYXVsdEJlaGF2aW91ciA9IHRydWU7XHJcbiAgICB0aGlzLmdyb3VwcyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNjaGVtZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl9zY2hlbWU7XHJcbiAgfVxyXG5cclxuICBnZXQgZGF0ZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl9kYXRlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRvbWFpbigpIHtcclxuICAgIHJldHVybiB0aGlzLl9kb21haW47XHJcbiAgfVxyXG5cclxuICBnZXQgdHlwZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl90eXBlO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNvdXJjZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl9zb3VyY2U7XHJcbiAgfVxyXG5cclxuICBnZXQgdGltZSgpIHtcclxuICAgIHJldHVybiB0aGlzLl90aW1lO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHdlZWtkYXkoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fd2Vla2RheTtcclxuICB9XHJcblxyXG4gIHNldCBzY2hlbWUocGFyYW1zKSB7XHJcbiAgICBsZXQgZnJvbSA9IHBhcmFtcy5tZXNzYWdlLmZyb207XHJcbiAgICBpZiAoaXNEYXRhT2JqZWN0VVJMKGZyb20pKSB7XHJcbiAgICAgIHRoaXMuX3NjaGVtZSA9IGRpdmlkZVVSTChmcm9tKS50eXBlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fc2NoZW1lID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0IGRhdGUobm93KSB7XHJcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICBsZXQgZGF5ID0gU3RyaW5nKGRhdGUuZ2V0RGF0ZSgpKTtcclxuICAgIGlmIChkYXkubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgIGRheSA9ICcwJyArIGRheTtcclxuICAgIH1cclxuICAgIGxldCBtb250aCA9IFN0cmluZyhkYXRlLmdldE1vbnRoKCkgKyAxKTtcclxuICAgIGlmIChtb250aC5sZW5ndGggPT09IDEpIHtcclxuICAgICAgbW9udGggPSAnMCcgKyBtb250aDtcclxuICAgIH1cclxuICAgIHRoaXMuX2RhdGUgPSBkYXkgKyAnLycgKyBtb250aCArICcvJyArIGRhdGUuZ2V0RnVsbFllYXIoKTtcclxuICB9XHJcblxyXG4gIHNldCBkb21haW4ocGFyYW1zKSB7XHJcbiAgICBpZiAocGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuX2RvbWFpbiA9IGRpdmlkZUVtYWlsKHBhcmFtcy5tZXNzYWdlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlcm5hbWUpLmRvbWFpbjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldCB0eXBlKHBhcmFtcykge1xyXG4gICAgbGV0IG1lc3NhZ2UgPSBwYXJhbXMubWVzc2FnZTtcclxuICAgIGlmIChtZXNzYWdlLmJvZHkudmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICB0aGlzLl90eXBlID0gbWVzc2FnZS5ib2R5LnZhbHVlLnJlc291cmNlVHlwZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldCBzb3VyY2UocGFyYW1zKSB7XHJcbiAgICBpZiAocGFyYW1zLm1lc3NhZ2UuYm9keS5pZGVudGl0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuX3NvdXJjZSA9IHBhcmFtcy5tZXNzYWdlLmJvZHkuaWRlbnRpdHkudXNlclByb2ZpbGUudXNlcm5hbWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXQgdGltZShub3cpIHtcclxuICAgIG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgICBsZXQgbWludXRlcyA9IFN0cmluZyhub3cuZ2V0TWludXRlcygpKTtcclxuICAgIGlmIChtaW51dGVzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICBtaW51dGVzID0gJzAnICsgbWludXRlcztcclxuICAgIH1cclxuICAgIHRoaXMuX3RpbWUgPSBwYXJzZUludChTdHJpbmcobm93LmdldEhvdXJzKCkpICsgbWludXRlcyk7XHJcbiAgfVxyXG5cclxuICBzZXQgd2Vla2RheShub3cpIHtcclxuICAgIHRoaXMuX3dlZWtkYXkgPSBTdHJpbmcobmV3IERhdGUoKS5nZXREYXkoKSk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVUaGlua0N0eDtcclxuIiwiaW1wb3J0IEFkdmFuY2VkQ29uZGl0aW9uIGZyb20gJy4vY29uZGl0aW9ucy9BZHZhbmNlZENvbmRpdGlvbic7XHJcbmltcG9ydCBDb25kaXRpb24gZnJvbSAnLi9jb25kaXRpb25zL0NvbmRpdGlvbic7XHJcbmltcG9ydCB7Z2V0VXNlckVtYWlsRnJvbVVSTCwgaXNEYXRhT2JqZWN0VVJMLCByZW1vdmVQYXRoRnJvbVVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgU3Vic2NyaXB0aW9uQ29uZGl0aW9uIGZyb20gJy4vY29uZGl0aW9ucy9BZHZhbmNlZENvbmRpdGlvbic7XHJcblxyXG5jbGFzcyBSdWxlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoZGVjaXNpb24sIGNvbmRpdGlvbiwgc2NvcGUsIHRhcmdldCwgcHJpb3JpdHkpIHtcclxuICAgIHRoaXMuZGVjaXNpb24gPSBkZWNpc2lvbjtcclxuICAgIHRoaXMuc2V0Q29uZGl0aW9uKGNvbmRpdGlvbik7XHJcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XHJcbiAgICB0aGlzLnNjb3BlID0gc2NvcGU7XHJcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcclxuICB9XHJcblxyXG4gIHNldENvbmRpdGlvbihjb25kaXRpb24pIHtcclxuICAgIGlmICghKGNvbmRpdGlvbiBpbnN0YW5jZW9mIENvbmRpdGlvbiB8fCBjb25kaXRpb24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb25Db25kaXRpb24gfHwgY29uZGl0aW9uIGluc3RhbmNlb2YgQWR2YW5jZWRDb25kaXRpb24pKSB7XHJcbiAgICAgIGxldCBhdHRyaWJ1dGUgPSBjb25kaXRpb24uYXR0cmlidXRlO1xyXG4gICAgICBzd2l0Y2ggKGF0dHJpYnV0ZSkge1xyXG4gICAgICAgIGNhc2UgJ3N1YnNjcmlwdGlvbic6XHJcbiAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25Db25kaXRpb24oY29uZGl0aW9uLmF0dHJpYnV0ZSwgY29uZGl0aW9uLm9wZXJhdG9yLCBjb25kaXRpb24ucGFyYW1zKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgdW5kZWZpbmVkOlxyXG4gICAgICAgICAgdGhpcy5jb25kaXRpb24gPSBuZXcgQWR2YW5jZWRDb25kaXRpb24oY29uZGl0aW9uKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IG5ldyBDb25kaXRpb24oY29uZGl0aW9uLmF0dHJpYnV0ZSwgY29uZGl0aW9uLm9wZXJhdG9yLCBjb25kaXRpb24ucGFyYW1zKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5jb25kaXRpb24gPSBjb25kaXRpb247XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBldmFsdWF0ZShjb250ZXh0LCBtZXNzYWdlLCBpc0luY29taW5nKSB7XHJcbiAgICBsZXQgZmllbGQgPSAoaXNJbmNvbWluZykgPyBtZXNzYWdlLnRvIDogbWVzc2FnZS5mcm9tO1xyXG4gICAgbGV0IGh5cGVydHlOYW1lO1xyXG4gICAgc3dpdGNoICh0aGlzLnNjb3BlKSB7XHJcbiAgICAgIGNhc2UgJ2dsb2JhbCc6XHJcbiAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICBjYXNlICdoeXBlcnR5JzpcclxuICAgICAgICBpZiAoaXNEYXRhT2JqZWN0VVJMKGZpZWxkKSkge1xyXG4gICAgICAgICAgbGV0IHJlcG9ydGVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHJlbW92ZVBhdGhGcm9tVVJMKGZpZWxkKSk7XHJcbiAgICAgICAgICBpZiAocmVwb3J0ZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBoeXBlcnR5TmFtZSA9IGNvbnRleHQucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKHJlcG9ydGVyKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGZpZWxkLnNwbGl0KCc6Ly8nKVswXSA9PT0gJ2h5cGVydHknKSB7XHJcbiAgICAgICAgICAgIGh5cGVydHlOYW1lID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUocmVtb3ZlUGF0aEZyb21VUkwoZmllbGQpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGh5cGVydHlOYW1lID09PSB0aGlzLnRhcmdldCkge1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJ05vdCBBcHBsaWNhYmxlJztcclxuXHJcbiAgICAgIGNhc2UgJ2lkZW50aXR5JzpcclxuICAgICAgICBsZXQgb3duZXI7XHJcblxyXG4gICAgICAgIGlmIChpc0RhdGFPYmplY3RVUkwoZmllbGQpKSB7XHJcbiAgICAgICAgICBsZXQgcmVwb3J0ZXIgPSBjb250ZXh0LnJ1bnRpbWVSZWdpc3RyeS5nZXRSZXBvcnRlclVSTFN5bmNob25vdXMocmVtb3ZlUGF0aEZyb21VUkwoZmllbGQpKTtcclxuICAgICAgICAgIG93bmVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHJlcG9ydGVyKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGZpZWxkLnNwbGl0KCc6Ly8nKVswXSA9PT0gJ2h5cGVydHknKSB7XHJcbiAgICAgICAgICAgIG93bmVyID0gY29udGV4dC5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU93bmVyKHJlbW92ZVBhdGhGcm9tVVJMKGZpZWxkKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvd25lciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICBvd25lciA9IGdldFVzZXJFbWFpbEZyb21VUkwob3duZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3duZXIgPT09IHRoaXMudGFyZ2V0KSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmNvbmRpdGlvbi5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgdGhpcy5zY29wZSwgdGhpcy50YXJnZXQpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmRlY2lzaW9uO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSdWxlO1xyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG4vKipcclxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cclxuKiBAY2xhc3NkZXNjIENsYXNzIHRvIGNvbWJpbmUgdGhlIGF1dGhvcml6YXRpb24gZGVjaXNpb25zIHRoYXQgcmVzdWx0IGZyb20gcnVsZXMgZXZhbHVhdGlvbi5cclxuKi9cclxuY2xhc3MgQWxsb3dPdmVycmlkZXMge1xyXG5cclxuICAvKipcclxuICAqIEdpdmVuIGFuIGFycmF5IG9mIGluZGl2aWR1YWwgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMsIHByaW9yaXRpemVzIGEgcG9zaXRpdmUgb25lLlxyXG4gICogQHBhcmFtICAgIHtib29sZWFuW119ICAgZGVjaXNpb25zXHJcbiAgKiBAcmV0dXJucyAge2Jvb2xlYW59XHJcbiAgKi9cclxuICBjb21iaW5lKGRlY2lzaW9ucykge1xyXG4gICAgaWYgKGRlY2lzaW9ucy5pbmRleE9mKHRydWUpICE9PSAtMSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChkZWNpc2lvbnMuaW5kZXhPZihmYWxzZSkgIT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWxsb3dPdmVycmlkZXM7XHJcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuXHJcbi8qKlxyXG4qIEBhdXRob3IgQW5hIENhbGRlaXJhIDxhbmEuY2FsZGVpcmFAdGVjbmljby51bGlzYm9hLnB0PlxyXG4qIEBjbGFzc2Rlc2MgQ2xhc3MgdG8gY29tYmluZSB0aGUgYXV0aG9yaXphdGlvbiBkZWNpc2lvbnMgdGhhdCByZXN1bHQgZnJvbSBydWxlcyBldmFsdWF0aW9uLlxyXG4qL1xyXG5jbGFzcyBCbG9ja092ZXJyaWRlcyB7XHJcblxyXG4gIC8qKlxyXG4gICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3Jpc2F0aW9uIGRlY2lzaW9ucywgcHJpb3JpdGlzZXMgYSBuZWdhdGl2ZSBvbmUuXHJcbiAgKiBAcGFyYW0gICAge2Jvb2xlYW5bXX0gICBkZWNpc2lvbnNcclxuICAqIEByZXR1cm5zICB7Ym9vbGVhbn1cclxuICAqL1xyXG4gIGNvbWJpbmUoZGVjaXNpb25zKSB7XHJcbiAgICBpZiAoZGVjaXNpb25zLmluZGV4T2YoZmFsc2UpICE9PSAtMSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoZGVjaXNpb25zLmluZGV4T2YodHJ1ZSkgIT09IC0xKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICdOb3QgQXBwbGljYWJsZSc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBCbG9ja092ZXJyaWRlcztcclxuIiwiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5cclxuLyoqXHJcbiogQGF1dGhvciBBbmEgQ2FsZGVpcmEgPGFuYS5jYWxkZWlyYUB0ZWNuaWNvLnVsaXNib2EucHQ+XHJcbiogQGNsYXNzZGVzYyBDbGFzcyB0byBjb21iaW5lIHRoZSBhdXRob3JpemF0aW9uIGRlY2lzaW9ucyB0aGF0IHJlc3VsdCBmcm9tIHJ1bGVzIGV2YWx1YXRpb24uXHJcbiovXHJcbmNsYXNzIEZpcnN0QXBwbGljYWJsZSB7XHJcblxyXG4gIC8qKlxyXG4gICogR2l2ZW4gYW4gYXJyYXkgb2YgaW5kaXZpZHVhbCBhdXRob3Jpc2F0aW9uIGRlY2lzaW9ucywgcmV0dXJucyB0aGUgZmlyc3Qgb25lIGRpZmZlcmVudCBmcm9tICdOb3QgQXBwbGljYWJsZScsIGVpdGhlciBwb3NpdGl2ZSBvciBuZWdhdGl2ZS5cclxuICAqIEBwYXJhbSAgICB7Ym9vbGVhbltdfSAgICAgZGVjaXNpb25zXHJcbiAgKiBAcmV0dXJucyAge2Jvb2xlYW59XHJcbiAgKi9cclxuICBjb21iaW5lKGRlY2lzaW9ucykge1xyXG4gICAgZm9yIChsZXQgaSBpbiBkZWNpc2lvbnMpIHtcclxuICAgICAgaWYgKGRlY2lzaW9uc1tpXSAhPT0gJ05vdCBBcHBsaWNhYmxlJykge1xyXG4gICAgICAgIHJldHVybiBkZWNpc2lvbnNbaV07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAnTm90IEFwcGxpY2FibGUnO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZpcnN0QXBwbGljYWJsZTtcclxuIiwiaW1wb3J0IENvbmRpdGlvbiBmcm9tICcuL0NvbmRpdGlvbic7XHJcbmltcG9ydCBPcGVyYXRvcnMgZnJvbSAnLi4vT3BlcmF0b3JzJztcclxuaW1wb3J0IFN1YnNjcmlwdGlvbkNvbmRpdGlvbiBmcm9tICcuL1N1YnNjcmlwdGlvbkNvbmRpdGlvbic7XHJcblxyXG5jbGFzcyBBZHZhbmNlZENvbmRpdGlvbiB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGNvbmRpdGlvbikge1xyXG4gICAgdGhpcy5vcGVyYXRvcnMgPSBuZXcgT3BlcmF0b3JzKCk7XHJcbiAgICBpZiAoY29uZGl0aW9uLm9wZXJhdG9ycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGNvbmRpdGlvbiA9IGNvbmRpdGlvbi5jb25kaXRpb247XHJcbiAgICB9XHJcbiAgICBjb25kaXRpb24gPSB0aGlzLmJ1aWxkQ29uZGl0aW9uKGNvbmRpdGlvbik7XHJcbiAgICB0aGlzLmNvbmRpdGlvbiA9IGNvbmRpdGlvbjtcclxuICB9XHJcblxyXG4gIGJ1aWxkQ29uZGl0aW9uKGNvbmRpdGlvbikge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29uZGl0aW9uWzFdKSkge1xyXG4gICAgICBjb25kaXRpb25bMV0gPSB0aGlzLmJ1aWxkQ29uZGl0aW9uKGNvbmRpdGlvblsxXSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoY29uZGl0aW9uWzFdLmF0dHJpYnV0ZSA9PT0gJ3N1YnNjcmlwdGlvbicpIHtcclxuICAgICAgICBjb25kaXRpb25bMV0gPSBuZXcgU3Vic2NyaXB0aW9uQ29uZGl0aW9uKGNvbmRpdGlvblsxXS5hdHRyaWJ1dGUsIGNvbmRpdGlvblsxXS5vcGVyYXRvciwgY29uZGl0aW9uWzFdLnBhcmFtcyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uZGl0aW9uWzFdID0gbmV3IENvbmRpdGlvbihjb25kaXRpb25bMV0uYXR0cmlidXRlLCBjb25kaXRpb25bMV0ub3BlcmF0b3IsIGNvbmRpdGlvblsxXS5wYXJhbXMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvbmRpdGlvblsyXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbmRpdGlvblsyXSkpIHtcclxuICAgICAgICBjb25kaXRpb25bMl0gPSB0aGlzLmJ1aWxkQ29uZGl0aW9uKGNvbmRpdGlvblsyXSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvblsyXS5hdHRyaWJ1dGUgPT09ICdzdWJzY3JpcHRpb24nKSB7XHJcbiAgICAgICAgICBjb25kaXRpb25bMl0gPSBuZXcgU3Vic2NyaXB0aW9uQ29uZGl0aW9uKGNvbmRpdGlvblsyXS5hdHRyaWJ1dGUsIGNvbmRpdGlvblsyXS5vcGVyYXRvciwgY29uZGl0aW9uWzJdLnBhcmFtcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbmRpdGlvblsyXSA9IG5ldyBDb25kaXRpb24oY29uZGl0aW9uWzJdLmF0dHJpYnV0ZSwgY29uZGl0aW9uWzJdLm9wZXJhdG9yLCBjb25kaXRpb25bMl0ucGFyYW1zKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjb25kaXRpb247XHJcbiAgfVxyXG5cclxuICBpc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCwgb3BlcmF0b3IsIGxlZnQsIHJpZ2h0KSB7XHJcbiAgICBpZiAoIW9wZXJhdG9yKSB7XHJcbiAgICAgIG9wZXJhdG9yID0gdGhpcy5jb25kaXRpb25bMF07XHJcbiAgICAgIGxlZnQgPSB0aGlzLmNvbmRpdGlvblsxXTtcclxuICAgICAgcmlnaHQgPSB0aGlzLmNvbmRpdGlvblsyXTtcclxuICAgIH1cclxuXHJcbiAgICB3aGlsZSAoIShsZWZ0IGluc3RhbmNlb2YgQ29uZGl0aW9uKSAmICEobGVmdCBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbkNvbmRpdGlvbikgJiAodHlwZW9mIGxlZnQgIT09ICdib29sZWFuJykpIHtcclxuICAgICAgbGVmdCA9IHRoaXMuaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHNjb3BlLCB0YXJnZXQsIGxlZnRbMF0sIGxlZnRbMV0sIGxlZnRbMl0pO1xyXG4gICAgfVxyXG4gICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgd2hpbGUgKCEocmlnaHQgaW5zdGFuY2VvZiBDb25kaXRpb24pICYgIShyaWdodCBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbkNvbmRpdGlvbikgJiAodHlwZW9mIHJpZ2h0ICE9PSAnYm9vbGVhbicpKSB7XHJcbiAgICAgICAgcmlnaHQgPSB0aGlzLmlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlLCBzY29wZSwgdGFyZ2V0LCByaWdodFswXSwgcmlnaHRbMV0sIHJpZ2h0WzJdKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCByZXN1bHRMZWZ0ID0gKHR5cGVvZiBsZWZ0ID09PSAnYm9vbGVhbicpID8gbGVmdCA6IGxlZnQuaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UsIHNjb3BlLCB0YXJnZXQpO1xyXG4gICAgbGV0IHJlc3VsdFJpZ2h0O1xyXG4gICAgaWYgKHJpZ2h0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmVzdWx0UmlnaHQgPSAodHlwZW9mIHJpZ2h0ID09PSAnYm9vbGVhbicpID8gcmlnaHQgOiByaWdodC5pc0FwcGxpY2FibGUoY29udGV4dCwgbWVzc2FnZSwgc2NvcGUsIHRhcmdldCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRvcnNbb3BlcmF0b3JdKFtyZXN1bHRMZWZ0LCByZXN1bHRSaWdodF0pO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEFkdmFuY2VkQ29uZGl0aW9uO1xyXG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG5pbXBvcnQgT3BlcmF0b3JzIGZyb20gJy4uL09wZXJhdG9ycyc7XHJcblxyXG4vKipcclxuKiBAYXV0aG9yIEFuYSBDYWxkZWlyYSA8YW5hLmNhbGRlaXJhQHRlY25pY28udWxpc2JvYS5wdD5cclxuKiBAY2xhc3NkZXNjIENsYXNzIHRvIHJlcHJlc2VudCBhIGNvbmRpdGlvbiBhbmQgZXZhbHVhdGUgaXRzIGFwcGxpY2FiaWxpdHkuXHJcbiovXHJcbmNsYXNzIENvbmRpdGlvbiB7XHJcblxyXG4gIC8qKlxyXG4gICogQ3JlYXRlcyBhIG5ldyBDb25kaXRpb24uXHJcbiAgKiBAY2xhc3NcclxuICAqIEBwYXJhbSAge3N0cmluZ30gIGF0dHJpYnV0ZVxyXG4gICogQHBhcmFtICB7c3RyaW5nfSAgb3BlcmF0b3JcclxuICAqIEBwYXJhbSAgeyp9ICAgICAgIHBhcmFtc1xyXG4gICovXHJcbiAgY29uc3RydWN0b3IoYXR0cmlidXRlLCBvcGVyYXRvciwgcGFyYW1zKSB7XHJcbiAgICB0aGlzLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZTtcclxuICAgIHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcclxuICAgIHRoaXMucGFyYW1zID0gcGFyYW1zO1xyXG4gICAgdGhpcy5vcGVyYXRvcnMgPSBuZXcgT3BlcmF0b3JzKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFZlcmlmaWVzIGlmIHRoZSBjb25kaXRpb24gaXMgYXBwbGljYWJsZSB0byB0aGUgbWVzc2FnZS4gRmlyc3QsIHRoZSBzeXN0ZW0gdmFsdWUgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgYXR0cmlidXRlIGlzIHJldHJpZXZlZDsgdGhlbiwgdGhhdCB2YWx1ZSBpcyBjb21wYXJlZCB3aXRoIHRoZSBwYXJhbWV0ZXIgc3BlY2lmaWVkIGluIHRoZSBjb25kaXRpb24gYnkgZXhlY3V0aW5nIHRoZSBvcGVyYXRvciBpbXBsZW1lbnRhdGlvbi4gSWYgdGhlIG9wZXJhdG9yIGlzICdpbicgYW5kIHRoZSBuYW1lIG9mIGEgZ3JvdXAgaXMgZ2l2ZW4sIHRoZW4gdGhlIGFycmF5IGhvbGRpbmcgdGhlIG1lbWJlcnMgb2YgdGhlIGdyb3VwIGlzIHJldHJpZXZlZCBiZWZvcmUgdGhlIGNvbXBhcmlzb24uXHJcbiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIGNvbnRleHQgICBlbnZpcm9ubWVudCB3aGVyZSB0aGUgUG9saWN5IEVuZ2luZSBpcyBiZWluZyB1c2VkXHJcbiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgIG1lc3NhZ2VcclxuICAqL1xyXG4gIGlzQXBwbGljYWJsZShjb250ZXh0LCBtZXNzYWdlKSB7XHJcbiAgICBjb250ZXh0W3RoaXMuYXR0cmlidXRlXSA9IHsgbWVzc2FnZTogbWVzc2FnZSB9O1xyXG4gICAgbGV0IHZhbHVlID0gY29udGV4dFt0aGlzLmF0dHJpYnV0ZV07XHJcbiAgICBsZXQgdGVtcFBhcmFtO1xyXG5cclxuICAgIGlmICh0aGlzLm9wZXJhdG9yID09PSAnaW4nKSB7XHJcbiAgICAgIGlmICghKEFycmF5LmlzQXJyYXkodGhpcy5wYXJhbXMpKSkge1xyXG4gICAgICAgIHRlbXBQYXJhbSA9IGNvbnRleHQuZ2V0R3JvdXAodGhpcy5wYXJhbXMsIG1lc3NhZ2UudG8pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9wZXJhdG9yc1t0aGlzLm9wZXJhdG9yXShbdGVtcFBhcmFtLCB2YWx1ZV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRoaXMub3BlcmF0b3JzW3RoaXMub3BlcmF0b3JdKFt0aGlzLnBhcmFtcywgdmFsdWVdKTtcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb25kaXRpb247XHJcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuXHJcbmltcG9ydCBDb25kaXRpb24gZnJvbSAnLi9Db25kaXRpb24nO1xyXG5cclxuLyoqXHJcbiogQGF1dGhvciBBbmEgQ2FsZGVpcmEgPGFuYS5jYWxkZWlyYUB0ZWNuaWNvLnVsaXNib2EucHQ+XHJcbiogQGNsYXNzZGVzYyBDbGFzcyB0byByZXByZXNlbnQgYSBzdWJzY3JpcHRpb24gY29uZGl0aW9uIGFuZCBldmFsdWF0ZSBpdHMgYXBwbGljYWJpbGl0eS5cclxuKi9cclxuY2xhc3MgU3Vic2NyaXB0aW9uQ29uZGl0aW9uIGV4dGVuZHMgQ29uZGl0aW9uIHtcclxuXHJcbiAgLyoqXHJcbiAgKiBDcmVhdGVzIGEgbmV3IFN1YnNjcmlwdGlvbkNvbmRpdGlvbi5cclxuICAqIEBjbGFzc1xyXG4gICogQHBhcmFtICB7c3RyaW5nfSAgYXR0cmlidXRlXHJcbiAgKiBAcGFyYW0gIHtzdHJpbmd9ICBvcGVyYXRvclxyXG4gICogQHBhcmFtICB7Kn0gICAgICAgcGFyYW1zXHJcbiAgKi9cclxuICBjb25zdHJ1Y3RvcihhdHRyaWJ1dGUsIG9wZXJhdG9yLCBwYXJhbXMpIHtcclxuICAgIHN1cGVyKGF0dHJpYnV0ZSwgb3BlcmF0b3IsIHBhcmFtcyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIFZlcmlmaWVzIGlmIHRoZSBzdWJzY3JpcHRpb24gY29uZGl0aW9uIGlzIGFwcGxpY2FibGUgdG8gdGhlIG1lc3NhZ2UuIEZpcnN0LCB2ZXJpZmllcyBpZiB0aGUgbWVzc2FnZSBpcyBvZiB0aGUgc3Vic2NyaXB0aW9uIHR5cGU7IHNlY29uZCwgdmVyaWZpZXMgaWYgdGhlIG1lc3NhZ2UgaXMgZnJvbSBhIHJlbW90ZSBydW50aW1lIHRvIGd1YXJhbnRlZSB0aGF0IHRoZSBzdWJzY3JpcHRpb24gaXMgYmVpbmcgdmFsaWRhdGVkIGluIHRoZSBkZXN0aW5hdGlvbiBydW50aW1lOyB0aGlyZCwgdmVyaWZpZXMgaWYgdGhlIHN1YnNjcmlwdGlvbiBwcmVmZXJlbmNlIGlzIG1ldC5cclxuICAqIEBwYXJhbSAge09iamVjdH0gICAgY29udGV4dCAgIGVudmlyb25tZW50IHdoZXJlIHRoZSBQb2xpY3kgRW5naW5lIGlzIGJlaW5nIHVzZWRcclxuICAqIEBwYXJhbSAge09iamVjdH0gICAgbWVzc2FnZVxyXG4gICovXHJcbiAgaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UpIHtcclxuICAgIGxldCBpc1N1YnNjcmlwdGlvbiA9IG1lc3NhZ2UudHlwZSA9PT0gJ3N1YnNjcmliZSc7XHJcbiAgICBsZXQgaXNGcm9tUmVtb3RlU00gPSBjb250ZXh0LmlzRnJvbVJlbW90ZVNNKG1lc3NhZ2UuZnJvbSk7XHJcbiAgICBpZiAoaXNTdWJzY3JpcHRpb24gJiBpc0Zyb21SZW1vdGVTTSkge1xyXG4gICAgICByZXR1cm4gc3VwZXIuaXNBcHBsaWNhYmxlKGNvbnRleHQsIG1lc3NhZ2UpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN1YnNjcmlwdGlvbkNvbmRpdGlvbjtcclxuIiwiaW1wb3J0IEFsbG93T3ZlcnJpZGVzIGZyb20gJy4uL2NvbWJpbmluZ0FsZ29yaXRobXMvQWxsb3dPdmVycmlkZXMnO1xyXG5pbXBvcnQgQmxvY2tPdmVycmlkZXMgZnJvbSAnLi4vY29tYmluaW5nQWxnb3JpdGhtcy9CbG9ja092ZXJyaWRlcyc7XHJcbmltcG9ydCB7ZGl2aWRlVVJMLCBnZXRVc2VyRW1haWxGcm9tVVJMLCBpc0RhdGFPYmplY3RVUkx9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IEZpcnN0QXBwbGljYWJsZSBmcm9tICcuLi9jb21iaW5pbmdBbGdvcml0aG1zL0ZpcnN0QXBwbGljYWJsZSc7XHJcbmltcG9ydCBSZVRoaW5rQ3R4IGZyb20gJy4uL1JlVGhpbmtDdHgnO1xyXG5cclxuY2xhc3MgUnVudGltZUNvcmVDdHggZXh0ZW5kcyBSZVRoaW5rQ3R4IHtcclxuXHJcbiAgY29uc3RydWN0b3IoaWRNb2R1bGUsIHJ1bnRpbWVSZWdpc3RyeSwgc3RvcmFnZU1hbmFnZXIpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLmlkTW9kdWxlID0gaWRNb2R1bGU7XHJcbiAgICB0aGlzLnJ1bnRpbWVSZWdpc3RyeSA9IHJ1bnRpbWVSZWdpc3RyeTtcclxuICAgIHRoaXMuYWN0aXZlVXNlclBvbGljeSA9IHVuZGVmaW5lZDtcclxuICAgIHRoaXMuc2VydmljZVByb3ZpZGVyUG9saWN5ID0ge307XHJcbiAgICB0aGlzLnVzZXJQb2xpY2llcyA9IHt9O1xyXG4gICAgdGhpcy5zdG9yYWdlTWFuYWdlciA9IHN0b3JhZ2VNYW5hZ2VyO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHN1YnNjcmlwdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb247XHJcbiAgfVxyXG5cclxuICBzZXQgc3Vic2NyaXB0aW9uKHBhcmFtcykge1xyXG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uID0gcGFyYW1zLm1lc3NhZ2UuYm9keS5zdWJzY3JpYmVyO1xyXG4gIH1cclxuXHJcbiAgbG9hZENvbmZpZ3VyYXRpb25zKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOmFjdGl2ZVBvbGljeScpLnRoZW4oKHZhbHVlKSA9PiB7XHJcbiAgICAgICAgX3RoaXMuYWN0aXZlVXNlclBvbGljeSA9IHZhbHVlO1xyXG5cclxuICAgICAgICByZXR1cm4gX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZXRoaW5rOmdyb3VwcycpO1xyXG4gICAgICB9KS50aGVuKChncm91cEluZm8pID0+IHtcclxuICAgICAgICBsZXQgZ3JvdXBzID0gZ3JvdXBJbmZvO1xyXG4gICAgICAgIF90aGlzLmdyb3VwcyA9IChncm91cHMgPT09IHVuZGVmaW5lZCkgPyB7fSA6IGdyb3VwcztcclxuXHJcbiAgICAgICAgcmV0dXJuIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLmdldCgncmV0aGluazpzcFBvbGljaWVzJyk7XHJcbiAgICAgIH0pLnRoZW4oKHBvbGljaWVzSW5mbykgPT4ge1xyXG4gICAgICAgIGxldCBzcFBvbGljaWVzID0gcG9saWNpZXNJbmZvO1xyXG4gICAgICAgIF90aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeSA9IChzcFBvbGljaWVzID09PSB1bmRlZmluZWQpID8ge30gOiBzcFBvbGljaWVzO1xyXG5cclxuICAgICAgICBfdGhpcy5fbG9hZFVzZXJQb2xpY2llcygpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJlcGFyZUZvckV2YWx1YXRpb24obWVzc2FnZSwgaXNJbmNvbWluZykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHJcbiAgICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICAgIGlmIChpc0luY29taW5nKSB7XHJcbiAgICAgICAgaWYgKF90aGlzLl9pc1RvQ3lwaGVyTW9kdWxlKG1lc3NhZ2UpKSB7XHJcbiAgICAgICAgICBfdGhpcy5pZE1vZHVsZS5kZWNyeXB0TWVzc2FnZShtZXNzYWdlKS50aGVuKGZ1bmN0aW9uKG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgLyppZiAobWVzc2FnZS50eXBlID09PSAndXBkYXRlJykge1xyXG4gICAgICAgICAgICAgIF90aGlzLl9pc1ZhbGlkVXBkYXRlKG1lc3NhZ2UpLnRoZW4obWVzc2FnZSA9PiB7Ki9cclxuICAgICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICAgIH0sIChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICAvKn0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICAgIH0qL1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdPTiBwcmVwYXJlRm9yRXZhbHVhdGlvbicsIG1lc3NhZ2UpO1xyXG4gICAgICAgIGlmIChfdGhpcy5faXNUb1NldElEKG1lc3NhZ2UpKSB7XHJcbiAgICAgICAgICBfdGhpcy5fZ2V0SWRlbnRpdHkobWVzc2FnZSkudGhlbihpZGVudGl0eSA9PiB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2UuYm9keS5pZGVudGl0eSA9IGlkZW50aXR5O1xyXG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldFBvbGljaWVzKG1lc3NhZ2UsIGlzSW5jb21pbmdNZXNzYWdlKSB7XHJcbiAgICBsZXQgcG9saWNpZXMgPSB7fTtcclxuXHJcbiAgICBpZiAodGhpcy5hY3RpdmVVc2VyUG9saWN5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcG9saWNpZXMudXNlclBvbGljeSA9IHRoaXMudXNlclBvbGljaWVzW3RoaXMuYWN0aXZlVXNlclBvbGljeV07XHJcbiAgICB9XHJcblxyXG4gICAgcG9saWNpZXMuc2VydmljZVByb3ZpZGVyUG9saWN5ID0gdGhpcy5nZXRTZXJ2aWNlUHJvdmlkZXJQb2xpY3kobWVzc2FnZSwgaXNJbmNvbWluZ01lc3NhZ2UpO1xyXG5cclxuICAgIHJldHVybiBwb2xpY2llcztcclxuICB9XHJcblxyXG4gIF9pc1ZhbGlkVXBkYXRlKG1lc3NhZ2UpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBpZiAobWVzc2FnZS5mcm9tLnNwbGl0KCc6Ly8nKS5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgX3RoaXMuaWRNb2R1bGUuX2dldEh5cGVydHlGcm9tRGF0YU9iamVjdChtZXNzYWdlLmZyb20pLnRoZW4oaHlwZXJ0eVVSTCA9PiB7XHJcbiAgICAgICAgICBpZiAoaHlwZXJ0eVVSTCA9PT0gbWVzc2FnZS5ib2R5LnNvdXJjZSkge1xyXG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVqZWN0KCdUaGUgc291cmNlIG9mIHRoZSBtZXNzYWdlIGlzIG5vdCB2YWxpZC4nKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBwcmVwYXJlVG9Gb3J3YXJkKG1lc3NhZ2UsIGlzSW5jb21pbmcsIHJlc3VsdCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICAvLyBoYWNrIHRvIGRpc2FibGUgbXV0dWFsIGF1dGhlbnRpY2F0aW9uIHVudGlsICMxNDcgaXMgZml4ZWRcclxuICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuXHJcbiAgICAgIGlmIChpc0luY29taW5nICYgcmVzdWx0KSB7XHJcbiAgICAgICAgbGV0IGlzU3Vic2NyaXB0aW9uID0gbWVzc2FnZS50eXBlID09PSAnc3Vic2NyaWJlJztcclxuICAgICAgICBsZXQgaXNGcm9tUmVtb3RlU00gPSBfdGhpcy5pc0Zyb21SZW1vdGVTTShtZXNzYWdlLmZyb20pO1xyXG4gICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7XHJcbiAgICAgICAgICBfdGhpcy5kb011dHVhbEF1dGhlbnRpY2F0aW9uKG1lc3NhZ2UpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVzb2x2ZShtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKF90aGlzLl9pc1RvQ3lwaGVyTW9kdWxlKG1lc3NhZ2UpKSB7XHJcbiAgICAgICAgICBfdGhpcy5pZE1vZHVsZS5lbmNyeXB0TWVzc2FnZShtZXNzYWdlKS50aGVuKChtZXNzYWdlKSA9PiB7XHJcbiAgICAgICAgICAgIHJlc29sdmUobWVzc2FnZSk7XHJcbiAgICAgICAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkb011dHVhbEF1dGhlbnRpY2F0aW9uKG1lc3NhZ2UpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIGxldCB0byA9IG1lc3NhZ2UudG8uc3BsaXQoJy8nKTtcclxuICAgICAgbGV0IHN1YnNJbmRleCA9IHRvLmluZGV4T2YoJ3N1YnNjcmlwdGlvbicpO1xyXG4gICAgICBsZXQgaXNEYXRhT2JqZWN0U3Vic2NyaXB0aW9uID0gc3Vic0luZGV4ICE9PSAtMTtcclxuICAgICAgbGV0IGlzRnJvbVJlbW90ZVNNID0gX3RoaXMuaXNGcm9tUmVtb3RlU00obWVzc2FnZS5mcm9tKTtcclxuICAgICAgaWYgKGlzRGF0YU9iamVjdFN1YnNjcmlwdGlvbiAmIGlzRnJvbVJlbW90ZVNNKSB7XHJcbiAgICAgICAgdG8ucG9wKCk7XHJcbiAgICAgICAgbGV0IGRhdGFPYmplY3RVUkwgPSB0b1swXSArICcvLycgKyB0b1syXSArICcvJyArIHRvWzNdO1xyXG4gICAgICAgIF90aGlzLmlkTW9kdWxlLmRvTXV0dWFsQXV0aGVudGljYXRpb24oZGF0YU9iamVjdFVSTCwgbWVzc2FnZS5ib2R5LnN1YnNjcmliZXIpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgX3RoaXMucnVudGltZVJlZ2lzdHJ5LnJlZ2lzdGVyU3Vic2NyaWJlcihkYXRhT2JqZWN0VVJMLCBtZXNzYWdlLmJvZHkuc3Vic2NyaWJlcik7XHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGdldE15RW1haWxzKCkge1xyXG4gICAgbGV0IGlkZW50aXRpZXMgPSB0aGlzLmlkTW9kdWxlLmdldElkZW50aXRpZXMoKTtcclxuICAgIGxldCBlbWFpbHMgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpIGluIGlkZW50aXRpZXMpIHtcclxuICAgICAgZW1haWxzLnB1c2goZ2V0VXNlckVtYWlsRnJvbVVSTChpZGVudGl0aWVzW2ldLmlkZW50aXR5KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGVtYWlscztcclxuICB9XHJcblxyXG4gIGdldE15SHlwZXJ0aWVzKCkge1xyXG4gICAgbGV0IGh5cGVydGllcyA9IHRoaXMucnVudGltZVJlZ2lzdHJ5Lmh5cGVydGllc0xpc3Q7XHJcbiAgICBsZXQgaHlwZXJ0aWVzTmFtZXMgPSBbXTtcclxuXHJcbiAgICBmb3IgKGxldCBpIGluIGh5cGVydGllcykge1xyXG4gICAgICBsZXQgaHlwZXJ0eU5hbWUgPSBoeXBlcnRpZXNbaV0ub2JqZWN0TmFtZTtcclxuICAgICAgaWYgKGh5cGVydGllc05hbWVzLmluZGV4T2YoaHlwZXJ0eU5hbWUpID09PSAtMSkge1xyXG4gICAgICAgIGh5cGVydGllc05hbWVzLnB1c2goaHlwZXJ0eU5hbWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGh5cGVydGllc05hbWVzO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2VydmljZVByb3ZpZGVyUG9saWN5KG1lc3NhZ2UsIGlzSW5jb21pbmcpIHtcclxuICAgIGxldCBwb2xpY3k7XHJcblxyXG4gICAgaWYgKGlzSW5jb21pbmcpIHtcclxuICAgICAgbGV0IHRvSHlwZXJ0eSA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmdldEh5cGVydHlOYW1lKG1lc3NhZ2UudG8pO1xyXG4gICAgICBwb2xpY3kgPSB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeVt0b0h5cGVydHldO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IGZyb21IeXBlcnR5ID0gdGhpcy5ydW50aW1lUmVnaXN0cnkuZ2V0SHlwZXJ0eU5hbWUobWVzc2FnZS5mcm9tKTtcclxuICAgICAgcG9saWN5ID0gdGhpcy5zZXJ2aWNlUHJvdmlkZXJQb2xpY3lbZnJvbUh5cGVydHldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBvbGljeTtcclxuICB9XHJcblxyXG4gIGlzRnJvbVJlbW90ZVNNKGZyb20pIHtcclxuICAgIGxldCBzcGxpdEZyb20gPSBmcm9tLnNwbGl0KCc6Ly8nKTtcclxuICAgIHJldHVybiBzcGxpdEZyb21bMF0gPT09ICdydW50aW1lJyAmJiBmcm9tICE9PSB0aGlzLnJ1bnRpbWVSZWdpc3RyeS5ydW50aW1lVVJMICsgJy9zbSc7XHJcbiAgfVxyXG5cclxuICBpc0xvY2FsKHVybCkge1xyXG4gICAgcmV0dXJuIHRoaXMucnVudGltZVJlZ2lzdHJ5LmlzTG9jYWwodXJsKTtcclxuICB9XHJcblxyXG4gIGlzSW50ZXJ3b3JraW5nUHJvdG9TdHViKHVybCkge1xyXG4gICAgcmV0dXJuIHRoaXMucnVudGltZVJlZ2lzdHJ5LmlzSW50ZXJ3b3JraW5nUHJvdG9TdHViKHVybCk7XHJcbiAgfVxyXG5cclxuICBfaXNUb1NldElEKG1lc3NhZ2UpIHtcclxuICAgIGxldCBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nXTtcclxuICAgIGxldCBzcGxpdEZyb20gPSAobWVzc2FnZS5mcm9tKS5zcGxpdCgnOi8vJyk7XHJcbiAgICBsZXQgZnJvbVNjaGVtYSA9IHNwbGl0RnJvbVswXTtcclxuXHJcbiAgICBsZXQgX2Zyb20gPSBtZXNzYWdlLmZyb207XHJcblxyXG4gICAgaWYgKG1lc3NhZ2UuYm9keSAmJiBtZXNzYWdlLmJvZHkuaGFzT3duUHJvcGVydHkoJ3NvdXJjZScpKVxyXG4gICAgICBfZnJvbSA9IG1lc3NhZ2UuYm9keS5zb3VyY2U7XHJcblxyXG4gICAgLy8gU2lnbmFsbGluZyBNZXNzYWdlcyBiZXR3ZWVuIFAyUCBTdHVicyBkb24ndCBoYXZlIElkZW50aXRpZXMuIEZGU1xyXG5cclxuICAgIGlmIChfZnJvbS5pbmNsdWRlcygnL3AycHJlcXVlc3Rlci8nKSB8fCBfZnJvbS5pbmNsdWRlcygnL3AycGhhbmRsZXIvJykpXHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICByZXR1cm4gc2NoZW1hc1RvSWdub3JlLmluZGV4T2YoZnJvbVNjaGVtYSkgPT09IC0xO1xyXG4gIH1cclxuXHJcbiAgZ2V0VVJMKHVybCkge1xyXG4gICAgbGV0IHNwbGl0VVJMID0gdXJsLnNwbGl0KCcvJyk7XHJcbiAgICByZXR1cm4gc3BsaXRVUkxbMF0gKyAnLy8nICsgc3BsaXRVUkxbMl0gKyAnLycgKyBzcGxpdFVSTFszXTtcclxuICB9XHJcblxyXG4gIF9nZXRJZGVudGl0eShtZXNzYWdlKSB7XHJcbiAgICBjb25zb2xlLmxvZygnW1BvbGljeS5SdW50aW1lQ29yZUN0eC5nZXRJZGVudGl0eV0gJywgbWVzc2FnZSk7XHJcblxyXG4gICAgaWYgKG1lc3NhZ2UuYm9keS5zb3VyY2UgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy5pZE1vZHVsZS5nZXRUb2tlbihtZXNzYWdlLmJvZHkuc291cmNlLCBtZXNzYWdlLnRvKTtcclxuICAgIH0gZWxzZVxyXG5cclxuLyogICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3VwZGF0ZScpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaWRNb2R1bGUuZ2V0VG9rZW4obWVzc2FnZS5ib2R5LnNvdXJjZSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gJ3Jlc3BvbnNlJyAmJiBtZXNzYWdlLmJvZHkuc291cmNlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaWRNb2R1bGUuZ2V0VG9rZW4obWVzc2FnZS5ib2R5LnNvdXJjZSk7XHJcbiAgICB9Ki9cclxuXHJcbi8vICAgIGlmIChkaXZpZGVVUkwobWVzc2FnZS5mcm9tKS50eXBlID09PSAnaHlwZXJ0eScpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaWRNb2R1bGUuZ2V0VG9rZW4obWVzc2FnZS5mcm9tLCBtZXNzYWdlLnRvKTtcclxuLyogICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHRoaXMuaWRNb2R1bGUuZ2V0VG9rZW4odGhpcy5nZXRVUkwobWVzc2FnZS5mcm9tKSk7XHJcbiAgICB9Ki9cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogSWRlbnRpZmllcyB0aGUgbWVzc2FnZXMgdG8gYmUgZm9yd2FyZGVkIHRvIHRoZSBJZGVudGl0eSBNb2R1bGUgZm9yXHJcbiAgKiBlbmNyeXB0aW9uL2RlY3J5cHRpb24gYW5kIGludGVncml0eSB2YWxpZGF0aW9uLlxyXG4gICogQHBhcmFtIHtNZXNzYWdlfSAgICBtZXNzYWdlXHJcbiAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gIHJldHVybnMgdHJ1ZSBpZiB0aGUgbWVzc2FnZSByZXF1aXJlcyBlbmNyeXB0aW9uL2RlY3J5cHRpb25cclxuICAqICAgICAgICAgICAgICAgICAgICAgb3IgaWYgaXRzIHR5cGUgZXF1YWxzICdoYW5kc2hha2UnOyBmYWxzZSBvdGhlcndpc2VcclxuICAqL1xyXG4gIF9pc1RvQ3lwaGVyTW9kdWxlKG1lc3NhZ2UpIHtcclxuICAgIGxldCBpc0NyZWF0ZSA9IG1lc3NhZ2UudHlwZSA9PT0gJ2NyZWF0ZSc7XHJcbiAgICBsZXQgaXNGcm9tSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLmZyb20pLnR5cGUgPT09ICdoeXBlcnR5JztcclxuICAgIGxldCBpc1RvSHlwZXJ0eSA9IGRpdmlkZVVSTChtZXNzYWdlLnRvKS50eXBlID09PSAnaHlwZXJ0eSc7XHJcbiAgICBsZXQgaXNUb0RhdGFPYmplY3QgPSBpc0RhdGFPYmplY3RVUkwobWVzc2FnZS50byk7XHJcblxyXG4gICAgLy8gdG9kbzogcmV0dXJuIGZhbHNlIGZvciBtZXNzYWdlcyBjb21pbmcgZnJvbSBpbnRlcndvcmtpbmcgc3R1YnMuXHJcbiAgICAvLyBHZXQgZGVzY3JpcHRvciBmcm9tIHJ1bnRpbWUgY2F0YWxvZ3VlIGFuZCBjaGVjayBpbnRlcndvcmtpbmcgZmllbGQuXHJcblxyXG4gICAgcmV0dXJuIChpc0NyZWF0ZSAmJiBpc0Zyb21IeXBlcnR5ICYmIGlzVG9IeXBlcnR5KSB8fCAoaXNDcmVhdGUgJiYgaXNGcm9tSHlwZXJ0eSAmJiBpc1RvRGF0YU9iamVjdCkgfHwgbWVzc2FnZS50eXBlID09PSAnaGFuZHNoYWtlJyB8fCBtZXNzYWdlLnR5cGUgPT09ICd1cGRhdGUnO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBDcmVhdGVzIGEgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gIGdyb3VwTmFtZVxyXG4gICovXHJcbiAgX2xvYWRVc2VyUG9saWNpZXMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JldGhpbms6dXNlclBvbGljaWVzJykudGhlbigodmFsdWUpID0+IHtcclxuICAgICAgICBsZXQgcG9saWNpZXMgPSB2YWx1ZTtcclxuICAgICAgICBpZiAocG9saWNpZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgZm9yIChsZXQgaSBpbiBwb2xpY2llcykge1xyXG4gICAgICAgICAgICB0aGlzLnBlcC5hZGRQb2xpY3koJ1VTRVInLCBpLCBwb2xpY2llc1tpXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBfZ2V0TGFzdENvbXBvbmVudE9mVVJMKHVybCkge1xyXG4gICAgbGV0IHNwbGl0ID0gdXJsLnNwbGl0KCcvJyk7XHJcbiAgICByZXR1cm4gc3BsaXRbc3BsaXQubGVuZ3RoIC0gMV07XHJcbiAgfVxyXG5cclxuICBfZ2V0UG9saWNpZXNKU09OKHBvbGljaWVzKSB7XHJcbiAgICBmb3IgKGxldCBpIGluIHBvbGljaWVzKSB7XHJcbiAgICAgIGxldCBjb21iaW5pbmdBbGdvcml0aG0gPSBwb2xpY2llc1tpXS5jb21iaW5pbmdBbGdvcml0aG07XHJcbiAgICAgIGlmIChjb21iaW5pbmdBbGdvcml0aG0gaW5zdGFuY2VvZiBCbG9ja092ZXJyaWRlcykge1xyXG4gICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdibG9ja092ZXJyaWRlcyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGNvbWJpbmluZ0FsZ29yaXRobSBpbnN0YW5jZW9mIEFsbG93T3ZlcnJpZGVzKSB7XHJcbiAgICAgICAgICBwb2xpY2llc1tpXS5jb21iaW5pbmdBbGdvcml0aG0gPSAnYWxsb3dPdmVycmlkZXMnO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoY29tYmluaW5nQWxnb3JpdGhtIGluc3RhbmNlb2YgRmlyc3RBcHBsaWNhYmxlKSB7XHJcbiAgICAgICAgICAgIHBvbGljaWVzW2ldLmNvbWJpbmluZ0FsZ29yaXRobSA9ICdmaXJzdEFwcGxpY2FibGUnO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcG9saWNpZXNbaV0uY29tYmluaW5nQWxnb3JpdGhtID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb2xpY2llcztcclxuICB9XHJcblxyXG4gIHNhdmVBY3RpdmVQb2xpY3koKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazphY3RpdmVQb2xpY3knLCAwLCB0aGlzLmFjdGl2ZVVzZXJQb2xpY3kpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNhdmVHcm91cHMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIF90aGlzLnN0b3JhZ2VNYW5hZ2VyLnNldCgncmV0aGluazpncm91cHMnLCAwLCB0aGlzLmdyb3VwcykudGhlbigoKSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc2F2ZVBvbGljaWVzKHNvdXJjZSwgcG9saWN5LCBrZXkpIHtcclxuICAgIGxldCBwb2xpY2llc0pzb247XHJcblxyXG4gICAgc3dpdGNoIChzb3VyY2UpIHtcclxuICAgICAgY2FzZSAnVVNFUic6XHJcbiAgICAgICAgcG9saWNpZXNKc29uID0gSlNPTi5zdHJpbmdpZnkodGhpcy51c2VyUG9saWNpZXMpO1xyXG4gICAgICAgIHBvbGljaWVzSnNvbiA9IHRoaXMuX2dldFBvbGljaWVzSlNPTihKU09OLnBhcnNlKHBvbGljaWVzSnNvbikpO1xyXG4gICAgICAgIHRoaXMuc3RvcmFnZU1hbmFnZXIuc2V0KCdyZXRoaW5rOnVzZXJQb2xpY2llcycsIDAsIHBvbGljaWVzSnNvbik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ1NFUlZJQ0VfUFJPVklERVInOlxyXG4gICAgICAgIGlmIChwb2xpY3kgIT09IHVuZGVmaW5lZCAmIGtleSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICB0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeVtrZXldID0gcG9saWN5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBwb2xpY2llc0pzb24gPSBKU09OLnN0cmluZ2lmeSh0aGlzLnNlcnZpY2VQcm92aWRlclBvbGljeSk7XHJcbiAgICAgICAgcG9saWNpZXNKc29uID0gdGhpcy5fZ2V0UG9saWNpZXNKU09OKEpTT04ucGFyc2UocG9saWNpZXNKc29uKSk7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ3JldGhpbms6c3BQb2xpY2llcycsIDAsIHBvbGljaWVzSnNvbik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1Vua25vd24gcG9saWN5IHNvdXJjZTogJyArIHNvdXJjZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnZXRHcm91cHNOYW1lcygpIHtcclxuICAgIGxldCBteUdyb3VwcyA9IHRoaXMuZ3JvdXBzO1xyXG4gICAgbGV0IGdyb3Vwc05hbWVzID0gW107XHJcbiAgICBpZiAobXlHcm91cHMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBmb3IgKGxldCBncm91cE5hbWUgaW4gbXlHcm91cHMpIHtcclxuICAgICAgICBncm91cHNOYW1lcy5wdXNoKGdyb3VwTmFtZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBncm91cHNOYW1lcztcclxuICB9XHJcblxyXG4gIGdldEdyb3VwKGdyb3VwTmFtZSwgZGVzdGluYXRpb24pIHtcclxuICAgIGxldCBtZW1iZXJzID0gW107XHJcblxyXG4gICAgaWYgKGdyb3VwTmFtZSA9PT0gJ3ByZWF1dGhvcmlzZWQnKSB7XHJcbiAgICAgIGxldCBkYXRhT2JqZWN0VVJMID0gZGVzdGluYXRpb24uc3BsaXQoJy8nKTtcclxuICAgICAgZGF0YU9iamVjdFVSTC5wb3AoKTtcclxuICAgICAgZGF0YU9iamVjdFVSTCA9IGRhdGFPYmplY3RVUkxbMF0gKyAnLy8nICsgZGF0YU9iamVjdFVSTFsyXTtcclxuICAgICAgbWVtYmVycyA9IHRoaXMucnVudGltZVJlZ2lzdHJ5LmdldFByZUF1dGhTdWJzY3JpYmVycyhkYXRhT2JqZWN0VVJMKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh0aGlzLmdyb3Vwc1tncm91cE5hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBtZW1iZXJzID0gdGhpcy5ncm91cHNbZ3JvdXBOYW1lXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtZW1iZXJzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBDcmVhdGVzIGEgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gIGdyb3VwTmFtZVxyXG4gICovXHJcbiAgY3JlYXRlR3JvdXAoZ3JvdXBOYW1lKSB7XHJcbiAgICB0aGlzLmdyb3Vwc1tncm91cE5hbWVdID0gW107XHJcbiAgICB0aGlzLnNhdmVHcm91cHMoKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZUdyb3VwKGdyb3VwTmFtZSkge1xyXG4gICAgZGVsZXRlIHRoaXMuZ3JvdXBzW2dyb3VwTmFtZV07XHJcbiAgICB0aGlzLnNhdmVHcm91cHMoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogQWRkcyB0aGUgZ2l2ZW4gdXNlciBlbWFpbCB0byB0aGUgZ3JvdXAgd2l0aCB0aGUgZ2l2ZW4gbmFtZS5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gIHVzZXJFbWFpbFxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgZ3JvdXBOYW1lXHJcbiAgKi9cclxuICBhZGRUb0dyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7XHJcbiAgICBsZXQgbXlHcm91cHMgPSB0aGlzLmdyb3VwcztcclxuICAgIGlmIChteUdyb3Vwc1tncm91cE5hbWVdICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKG15R3JvdXBzW2dyb3VwTmFtZV0uaW5kZXhPZih1c2VyRW1haWwpID09PSAtMSkge1xyXG4gICAgICAgIG15R3JvdXBzW2dyb3VwTmFtZV0ucHVzaCh1c2VyRW1haWwpO1xyXG4gICAgICAgIHRoaXMuc2F2ZUdyb3VwcygpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBFcnJvcignR3JvdXAgXCInICsgZ3JvdXBOYW1lICsgJ1wiIGRvZXMgbm90IGV4aXN0IScpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVtb3ZlRnJvbUdyb3VwKGdyb3VwTmFtZSwgdXNlckVtYWlsKSB7XHJcbiAgICBsZXQgZ3JvdXAgPSB0aGlzLmdyb3Vwc1tncm91cE5hbWVdO1xyXG5cclxuICAgIGdyb3VwLnNwbGljZShncm91cC5pbmRleE9mKHVzZXJFbWFpbCksIDEpO1xyXG4gICAgdGhpcy5zYXZlR3JvdXBzKCk7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUnVudGltZUNvcmVDdHg7XHJcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuXHJcbmltcG9ydCB7ZGl2aWRlVVJMLCBjb252ZXJ0VG9Vc2VyVVJMfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcblxyXG4vKipcclxuKiBDb3JlIERpc2NvdmVyeSBpbnRlcmZhY2VcclxuKiBDbGFzcyB0byBhbGxvdyBhcHBsaWNhdGlvbnMgdG8gc2VhcmNoIGZvciBoeXBlcnRpZXMgYW5kIERhdGFPYmplY3RzIHVzaW5nIHRoZSBtZXNzYWdlIGJ1c1xyXG4qL1xyXG5jbGFzcyBEaXNjb3Zlcnkge1xyXG5cclxuICAvKipcclxuICAqIFRvIGluaXRpYWxpc2UgdGhlIEh5cGVydHlEaXNjb3Zlciwgd2hpY2ggd2lsbCBwcm92aWRlIHRoZSBzdXBwb3J0IGZvciBoeXBlcnRpZXMgdG9cclxuICAqIHF1ZXJ5IHVzZXJzIHJlZ2lzdGVyZWQgaW4gb3V0c2lkZSB0aGUgaW50ZXJuYWwgY29yZS5cclxuICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9ICAgICAgICAgIG1zZ2J1cyAgICAgICAgICAgICAgICBtc2didXNcclxuICAqIEBwYXJhbSAge1J1bnRpbWVVUkx9ICAgICAgICAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMXHJcbiAgKi9cclxuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMLCBtc2dCdXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gbXNnQnVzO1xyXG5cclxuICAgIF90aGlzLmRvbWFpbiA9IGRpdmlkZVVSTChydW50aW1lVVJMKS5kb21haW47XHJcbiAgICBfdGhpcy5kaXNjb3ZlcnlVUkwgPSBydW50aW1lVVJMO1xyXG4gICAgX3RoaXMucmVnaXN0cnlVUkwgPSBydW50aW1lVVJMICsgJy9yZWdpc3RyeS8nO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBhbiBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5IHdpdGggYSBnaXZlbiBuYW1lLCBhbmRcclxuICAqIHJldHVybiB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbiwgaWYgZm91bmQuXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICBuYW1lICBkYXRhT2JqZWN0IFVSTFxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXHJcbiAgKi9cclxuICBkaXNjb3ZlckRhdGFPYmplY3RQZXJOYW1lKG5hbWUsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgYWN0aXZlRG9tYWluID0gKCFkb21haW4pID8gX3RoaXMuZG9tYWluIDogZG9tYWluO1xyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IG5hbWV9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IGRhdGFPYmplY3QgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoZGF0YU9iamVjdCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdEYXRhT2JqZWN0IG5vdCBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybiB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbiwgaWYgZm91bmQuXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICB1cmwgIGRhdGFPYmplY3QgVVJMXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2VcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdFBlclVSTCh1cmwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IHVybH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgZGF0YU9iamVjdCA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChkYXRhT2JqZWN0KSB7XHJcbiAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3Qgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIERhdGEgT2JqZWN0IHJlZ2lzdGVyZWQgaW4gdGhlIERvbWFpbiBSZWdpc3RyeVxyXG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgICAgICB1cmwgICAgICAgICAgICAgIGRhdGFPYmplY3QgdXJsXHJcbiAgKiAgQHBhcmFtICAge2RvbWFpbn0gICAgICAgICAgIGRvbWFpbiAgICAgICAgIChPcHRpb25hbClcclxuICAqICBAcmV0dXJuICB7UHJvbWlzZX0gICAgICAgICAgUHJvbWlzZSAgICAgICAgICByZXN1bHRcclxuICAqL1xyXG4gIGRlbGV0ZURhdGFPYmplY3QodXJsLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG5cclxuICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsICBib2R5OiB7IHZhbHVlOiB7bmFtZTogdXJsfX19O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gcmVwbHkuYm9keS5jb2RlO1xyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2UgPT09IDIwMCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gZGVsZXRpbmcgZGF0YU9iamVjdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgc3BlY2lmaWMgcmVwb3J0ZXIgZGF0YU9iamVjdCByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kXHJcbiAgKiByZXR1cm4gdGhlIGRhdGFPYmplY3RzIGZyb20gdGhhdCByZXBvcnRlci5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHJlcG9ydGVyICAgICBkYXRhT2JqZWN0IHJlcG9ydGVyXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gICAgICAgKE9wdGlvbmFsKVxyXG4gICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICBQcm9taXNlICAgICAgIERhdGFPYmplY3RzXHJcbiAgKi9cclxuICBkaXNjb3ZlckRhdGFPYmplY3RQZXJSZXBvcnRlcihyZXBvcnRlciwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogcmVwb3J0ZXJ9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IGRhdGFPYmplY3RzID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGFPYmplY3RzKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3RzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdObyBkYXRhT2JqZWN0IHdhcyBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKiBBZHZhbmNlZCBTZWFyY2ggZm9yIGRhdGFPYmplY3RzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5XHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICB1c2VyICAgICAgICAgICAgICAgICAgdXNlciBpZGVudGlmaWVyLCBlaXRoZXIgaW4gdXJsIG9yIGVtYWlsIGZvcm1hdFxyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgc2NoZW1hIChPcHRpb25hbCkgICAgIHR5cGVzIG9mIGRhdGFPYmplY3Qgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGRhdGFPYmplY3QgcmVzb3VyY2VzXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKSAgICAgZG9tYWluIG9mIHRoZSByZWdpc3RyeSB0byBzZWFyY2hcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdChuYW1lLCBzY2hlbWEsIHJlc291cmNlcywgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuICAgIC8vbGV0IHVzZXJJZGVudGlmaWVyID0gY29udmVydFRvVXNlclVSTCh1c2VyKTtcclxuXHJcbiAgICBhY3RpdmVEb21haW4gPSAoIWRvbWFpbikgPyBfdGhpcy5kb21haW4gOiBkb21haW47XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogbmFtZSxcclxuICAgICAgY3JpdGVyaWE6IHtyZXNvdXJjZXM6IHJlc291cmNlcywgZGF0YVNjaGVtZXM6IHNjaGVtYX1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGxldCBoeXBlcnRpZXMgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoaHlwZXJ0aWVzKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGh5cGVydGllcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnTm8gRGF0YU9iamVjdCB3YXMgZm91bmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKiogQWR2YW5jZWQgU2VhcmNoIGZvciBIeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnlcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgICAgICB1c2VyIGlkZW50aWZpZXIsIGVpdGhlciBpbiB1cmwgb3IgZW1haWwgZm9ybWF0XHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgaHlwZXJ0aWVzIHNjaGVtYXNcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBoeXBlcnRpZXMgcmVzb3VyY2VzXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKSAgICAgZG9tYWluIG9mIHRoZSByZWdpc3RyeSB0byBzZWFyY2hcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0eSh1c2VyLCBzY2hlbWEsIHJlc291cmNlcywgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuICAgIGxldCB1c2VySWRlbnRpZmllciA9IGNvbnZlcnRUb1VzZXJVUkwodXNlcik7XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IHVzZXJJZGVudGlmaWVyLFxyXG4gICAgICBjcml0ZXJpYToge3Jlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogc2NoZW1hfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IGh5cGVydGllcyA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChoeXBlcnRpZXMpIHtcclxuICAgICAgICAgIHJlc29sdmUoaHlwZXJ0aWVzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdObyBIeXBlcnR5IHdhcyBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCB1c2VycyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kXHJcbiAgKiByZXR1cm4gdGhlIGxhc3QgaHlwZXJ0eSBpbnN0YW5jZSByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyLlxyXG4gICogQHBhcmFtICB7ZW1haWx9ICAgICAgICAgICAgICBlbWFpbFxyXG4gICogQHBhcmFtICB7ZG9tYWlufSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXHJcbiAgKi9cclxuICBkaXNjb3Zlckh5cGVydHlQZXJVc2VyKGVtYWlsLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG5cclxuICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaWRlbnRpdHlVUkwgPSAndXNlcjovLycgKyBlbWFpbC5zdWJzdHJpbmcoZW1haWwuaW5kZXhPZignQCcpICsgMSwgZW1haWwubGVuZ3RoKSArICcvJyArIGVtYWlsLnN1YnN0cmluZygwLCBlbWFpbC5pbmRleE9mKCdAJykpO1xyXG5cclxuICAgIC8vIG1lc3NhZ2UgdG8gcXVlcnkgZG9tYWluIHJlZ2lzdHJ5LCBhc2tpbmcgZm9yIGEgdXNlciBoeXBlcnR5LlxyXG4gICAgbGV0IG1lc3NhZ2UgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IGlkZW50aXR5VVJMfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnTWVzc2FnZTogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZygnbWVzc2FnZSBSRUFEJywgbWVzc2FnZSk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdtZXNzYWdlIHJlcGx5JywgcmVwbHkpO1xyXG5cclxuICAgICAgICBsZXQgaHlwZXJ0eTtcclxuICAgICAgICBsZXQgbW9zdFJlY2VudDtcclxuICAgICAgICBsZXQgbGFzdEh5cGVydHk7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgZm9yIChoeXBlcnR5IGluIHZhbHVlKSB7XHJcbiAgICAgICAgICBpZiAodmFsdWVbaHlwZXJ0eV0ubGFzdE1vZGlmaWVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpO1xyXG4gICAgICAgICAgICAgIGxhc3RIeXBlcnR5ID0gaHlwZXJ0eTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBsZXQgaHlwZXJ0eURhdGUgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpO1xyXG4gICAgICAgICAgICAgIGlmIChtb3N0UmVjZW50LmdldFRpbWUoKSA8IGh5cGVydHlEYXRlLmdldFRpbWUoKSkge1xyXG4gICAgICAgICAgICAgICAgbW9zdFJlY2VudCA9IGh5cGVydHlEYXRlO1xyXG4gICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ0xhc3QgSHlwZXJ0eTogJywgbGFzdEh5cGVydHksIG1vc3RSZWNlbnQpO1xyXG5cclxuICAgICAgICBsZXQgaHlwZXJ0eVVSTCA9IGxhc3RIeXBlcnR5O1xyXG5cclxuICAgICAgICBpZiAoaHlwZXJ0eVVSTCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdVc2VyIEh5cGVydHkgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaWRQYWNrYWdlID0ge1xyXG4gICAgICAgICAgaWQ6IGVtYWlsLFxyXG4gICAgICAgICAgZGVzY3JpcHRvcjogdmFsdWVbaHlwZXJ0eVVSTF0uZGVzY3JpcHRvcixcclxuICAgICAgICAgIGh5cGVydHlVUkw6IGh5cGVydHlVUkxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnPT09PiBoeXBlcnR5RGlzY292ZXJ5IG1lc3NhZ2VCdW5kbGU6ICcsIGlkUGFja2FnZSk7XHJcbiAgICAgICAgcmVzb2x2ZShpZFBhY2thZ2UpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybiB0aGUgYWxsIHRoZSBoeXBlcnRpZXMgcmVnaXN0ZXJlZCBieSB0aGUgdXNlclxyXG4gICogQHBhcmFtICB7ZW1haWx9ICAgICAgICAgICAgICBlbWFpbFxyXG4gICogQHBhcmFtICB7ZG9tYWlufSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXHJcbiAgKi9cclxuICBkaXNjb3Zlckh5cGVydGllc1BlclVzZXIoZW1haWwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpZGVudGl0eVVSTCA9ICd1c2VyOi8vJyArIGVtYWlsLnN1YnN0cmluZyhlbWFpbC5pbmRleE9mKCdAJykgKyAxLCBlbWFpbC5sZW5ndGgpICsgJy8nICsgZW1haWwuc3Vic3RyaW5nKDAsIGVtYWlsLmluZGV4T2YoJ0AnKSk7XHJcblxyXG4gICAgLy8gbWVzc2FnZSB0byBxdWVyeSBkb21haW4gcmVnaXN0cnksIGFza2luZyBmb3IgYSB1c2VyIGh5cGVydHkuXHJcbiAgICBsZXQgbWVzc2FnZSA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIGFjdGl2ZURvbWFpbiArICcvJywgYm9keTogeyByZXNvdXJjZTogaWRlbnRpdHlVUkx9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlIGRpc2NvdmVySHlwZXJ0aWVzUGVyVXNlcjogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZygnbWVzc2FnZSBSRUFEJywgbWVzc2FnZSk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb3Zlckh5cGVydGllc1BlclVzZXIgcmVwbHknLCByZXBseSk7XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZSA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgIHJldHVybiByZWplY3QoJ1VzZXIgSHlwZXJ0eSBub3QgZm91bmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIGh5cGVydHlJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XHJcbiAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgIHVzZXIgdXJsXHJcbiAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgIGh5cGVydHlJbnN0YW5jZSAgIEh5cGVydHlJbnNudGFuY2UgdXJsXHJcbiAgKiAgQHBhcmFtICAge2RvbWFpbn0gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKiAgQHJldHVybiAge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UgICAgICAgICAgcmVzdWx0XHJcbiAgKi9cclxuICBkZWxldGVIeXBlcnR5KHVzZXIsIGh5cGVydHlJbnN0YW5jZSwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCAgIGJvZHk6IHsgdmFsdWU6IHt1c2VyOiB1c2VyLCB1cmw6IGh5cGVydHlJbnN0YW5jZSB9fX07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXBseS5ib2R5LmNvZGU7XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgcmVzb2x2ZSgnSHlwZXJ0eSBzdWNjZXNzZnVsbHkgZGVsZXRlZCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIGRlbGV0aW5nIGh5cGVydHknKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERpc2NvdmVyeTtcclxuIiwiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5cclxuaW1wb3J0IHtkaXZpZGVVUkwsIGNvbnZlcnRUb1VzZXJVUkx9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbi8qKlxyXG4qIENvcmUgRGlzY292ZXJ5IGludGVyZmFjZVxyXG4qIENsYXNzIHRvIGFsbG93IGFwcGxpY2F0aW9ucyB0byBzZWFyY2ggZm9yIGh5cGVydGllcyBhbmQgRGF0YU9iamVjdHMgdXNpbmcgdGhlIG1lc3NhZ2UgYnVzXHJcbiovXHJcbmNsYXNzIERpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcmsge1xyXG5cclxuICAvKipcclxuICAqIFRvIGluaXRpYWxpc2UgdGhlIEh5cGVydHlEaXNjb3Zlciwgd2hpY2ggd2lsbCBwcm92aWRlIHRoZSBzdXBwb3J0IGZvciBoeXBlcnRpZXMgdG9cclxuICAqIHF1ZXJ5IHVzZXJzIHJlZ2lzdGVyZWQgaW4gb3V0c2lkZSB0aGUgaW50ZXJuYWwgY29yZS5cclxuICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9ICAgICAgICAgIG1zZ2J1cyAgICAgICAgICAgICAgICBtc2didXNcclxuICAqIEBwYXJhbSAge1J1bnRpbWVVUkx9ICAgICAgICAgIHJ1bnRpbWVVUkwgICAgICAgICAgICBydW50aW1lVVJMXHJcbiAgKi9cclxuICBjb25zdHJ1Y3RvcihoeXBlcnR5VVJMLCBydW50aW1lVVJMLCBtc2dCdXMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5tZXNzYWdlQnVzID0gbXNnQnVzO1xyXG5cclxuICAgIF90aGlzLmRvbWFpbiA9IGRpdmlkZVVSTChydW50aW1lVVJMKS5kb21haW47XHJcbiAgICBfdGhpcy5kaXNjb3ZlcnlVUkwgPSBoeXBlcnR5VVJMICsgJy9kaXNjb3ZlcnknO1xyXG4gICAgX3RoaXMucmVnaXN0cnlVUkwgPSBydW50aW1lVVJMICsgJy9yZWdpc3RyeS8nO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBhbiBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5IHdpdGggYSBnaXZlbiBuYW1lLCBhbmRcclxuICAqIHJldHVybiB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbiwgaWYgZm91bmQuXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICBuYW1lICBkYXRhT2JqZWN0IFVSTFxyXG4gICogQHBhcmFtICB7U3RyaW5nfSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXHJcbiAgKi9cclxuICBkaXNjb3ZlckRhdGFPYmplY3RQZXJOYW1lKG5hbWUsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgYWN0aXZlRG9tYWluID0gKCFkb21haW4pID8gX3RoaXMuZG9tYWluIDogZG9tYWluO1xyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogX3RoaXMucmVnaXN0cnlVUkwsIGJvZHk6IHsgcmVzb3VyY2U6IG5hbWV9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IGRhdGFPYmplY3QgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoZGF0YU9iamVjdCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShkYXRhT2JqZWN0KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdEYXRhT2JqZWN0IG5vdCBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCBkYXRhT2JqZWN0IHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybiB0aGUgZGF0YU9iamVjdCBpbmZvcm1hdGlvbiwgaWYgZm91bmQuXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgICB1cmwgIGRhdGFPYmplY3QgVVJMXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcclxuICAqIEByZXR1cm4ge1Byb21pc2V9ICAgICAgICAgIFByb21pc2VcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdFBlclVSTCh1cmwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogX3RoaXMucmVnaXN0cnlVUkwsIGJvZHk6IHsgcmVzb3VyY2U6IHVybH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgZGF0YU9iamVjdCA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChkYXRhT2JqZWN0KSB7XHJcbiAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3QpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ0RhdGFPYmplY3Qgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIERhdGEgT2JqZWN0IHJlZ2lzdGVyZWQgaW4gdGhlIERvbWFpbiBSZWdpc3RyeVxyXG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgICAgICB1cmwgICAgICAgICAgICAgIGRhdGFPYmplY3QgdXJsXHJcbiAgKiAgQHBhcmFtICAge2RvbWFpbn0gICAgICAgICAgIGRvbWFpbiAgICAgICAgIChPcHRpb25hbClcclxuICAqICBAcmV0dXJuICB7UHJvbWlzZX0gICAgICAgICAgUHJvbWlzZSAgICAgICAgICByZXN1bHRcclxuICAqL1xyXG4gIGRlbGV0ZURhdGFPYmplY3QodXJsLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG5cclxuICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbXNnID0ge1xyXG4gICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogX3RoaXMucmVnaXN0cnlVUkwsICBib2R5OiB7IHZhbHVlOiB7bmFtZTogdXJsfX19O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IHJlc3BvbnNlID0gcmVwbHkuYm9keS5jb2RlO1xyXG5cclxuICAgICAgICBpZiAocmVzcG9uc2UgPT09IDIwMCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShyZXNwb25zZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gZGVsZXRpbmcgZGF0YU9iamVjdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIGZ1bmN0aW9uIHRvIHJlcXVlc3QgYWJvdXQgc3BlY2lmaWMgcmVwb3J0ZXIgZGF0YU9iamVjdCByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kXHJcbiAgKiByZXR1cm4gdGhlIGRhdGFPYmplY3RzIGZyb20gdGhhdCByZXBvcnRlci5cclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHJlcG9ydGVyICAgICBkYXRhT2JqZWN0IHJlcG9ydGVyXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gICAgICAgKE9wdGlvbmFsKVxyXG4gICogQHJldHVybiB7QXJyYXl9ICAgICAgICAgICBQcm9taXNlICAgICAgIERhdGFPYmplY3RzXHJcbiAgKi9cclxuICBkaXNjb3ZlckRhdGFPYmplY3RQZXJSZXBvcnRlcihyZXBvcnRlciwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyByZXNvdXJjZTogcmVwb3J0ZXJ9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IGRhdGFPYmplY3RzID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGFPYmplY3RzKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGRhdGFPYmplY3RzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdObyBkYXRhT2JqZWN0IHdhcyBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKiBBZHZhbmNlZCBTZWFyY2ggZm9yIGRhdGFPYmplY3RzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5XHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICB1c2VyICAgICAgICAgICAgICAgICAgdXNlciBpZGVudGlmaWVyLCBlaXRoZXIgaW4gdXJsIG9yIGVtYWlsIGZvcm1hdFxyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgc2NoZW1hIChPcHRpb25hbCkgICAgIHR5cGVzIG9mIGRhdGFPYmplY3Qgc2NoZW1hc1xyXG4gICogQHBhcmFtICB7QXJyYXk8c3RyaW5nPn0gICAgcmVzb3VyY2VzIChPcHRpb25hbCkgIHR5cGVzIG9mIGRhdGFPYmplY3QgcmVzb3VyY2VzXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKSAgICAgZG9tYWluIG9mIHRoZSByZWdpc3RyeSB0byBzZWFyY2hcclxuICAqL1xyXG4gIGRpc2NvdmVyRGF0YU9iamVjdChuYW1lLCBzY2hlbWEsIHJlc291cmNlcywgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuICAgIC8vbGV0IHVzZXJJZGVudGlmaWVyID0gY29udmVydFRvVXNlclVSTCh1c2VyKTtcclxuXHJcbiAgICBhY3RpdmVEb21haW4gPSAoIWRvbWFpbikgPyBfdGhpcy5kb21haW4gOiBkb21haW47XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyByZXNvdXJjZTogbmFtZSxcclxuICAgICAgY3JpdGVyaWE6IHtyZXNvdXJjZXM6IHJlc291cmNlcywgZGF0YVNjaGVtZXM6IHNjaGVtYX1cclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1zZywgKHJlcGx5KSA9PiB7XHJcblxyXG4gICAgICAgIGxldCBoeXBlcnRpZXMgPSByZXBseS5ib2R5LnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoaHlwZXJ0aWVzKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGh5cGVydGllcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnTm8gRGF0YU9iamVjdCB3YXMgZm91bmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvKiogQWR2YW5jZWQgU2VhcmNoIGZvciBIeXBlcnRpZXMgcmVnaXN0ZXJlZCBpbiBkb21haW4gcmVnaXN0cnlcclxuICAqIEBwYXJhbSAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgICAgICB1c2VyIGlkZW50aWZpZXIsIGVpdGhlciBpbiB1cmwgb3IgZW1haWwgZm9ybWF0XHJcbiAgKiBAcGFyYW0gIHtBcnJheTxzdHJpbmc+fSAgICBzY2hlbWEgKE9wdGlvbmFsKSAgICAgdHlwZXMgb2YgaHlwZXJ0aWVzIHNjaGVtYXNcclxuICAqIEBwYXJhbSAge0FycmF5PHN0cmluZz59ICAgIHJlc291cmNlcyAoT3B0aW9uYWwpICB0eXBlcyBvZiBoeXBlcnRpZXMgcmVzb3VyY2VzXHJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgICBkb21haW4gKE9wdGlvbmFsKSAgICAgZG9tYWluIG9mIHRoZSByZWdpc3RyeSB0byBzZWFyY2hcclxuICAqL1xyXG4gIGRpc2NvdmVySHlwZXJ0eSh1c2VyLCBzY2hlbWEsIHJlc291cmNlcywgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuICAgIGxldCB1c2VySWRlbnRpZmllciA9IGNvbnZlcnRUb1VzZXJVUkwodXNlcik7XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBtc2cgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogX3RoaXMucmVnaXN0cnlVUkwsIGJvZHk6IHsgcmVzb3VyY2U6IHVzZXJJZGVudGlmaWVyLFxyXG4gICAgICBjcml0ZXJpYToge3Jlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1lczogc2NoZW1hfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuXHJcbiAgICAgIF90aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuXHJcbiAgICAgICAgbGV0IGh5cGVydGllcyA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChoeXBlcnRpZXMpIHtcclxuICAgICAgICAgIHJlc29sdmUoaHlwZXJ0aWVzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCdObyBIeXBlcnR5IHdhcyBmb3VuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogZnVuY3Rpb24gdG8gcmVxdWVzdCBhYm91dCB1c2VycyByZWdpc3RlcmVkIGluIGRvbWFpbiByZWdpc3RyeSwgYW5kXHJcbiAgKiByZXR1cm4gdGhlIGxhc3QgaHlwZXJ0eSBpbnN0YW5jZSByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyLlxyXG4gICogQHBhcmFtICB7ZW1haWx9ICAgICAgICAgICAgICBlbWFpbFxyXG4gICogQHBhcmFtICB7ZG9tYWlufSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXHJcbiAgKi9cclxuICBkaXNjb3Zlckh5cGVydHlQZXJVc2VyKGVtYWlsLCBkb21haW4pIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgYWN0aXZlRG9tYWluO1xyXG5cclxuICAgIGlmICghZG9tYWluKSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IF90aGlzLmRvbWFpbjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjdGl2ZURvbWFpbiA9IGRvbWFpbjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaWRlbnRpdHlVUkwgPSAndXNlcjovLycgKyBlbWFpbC5zdWJzdHJpbmcoZW1haWwuaW5kZXhPZignQCcpICsgMSwgZW1haWwubGVuZ3RoKSArICcvJyArIGVtYWlsLnN1YnN0cmluZygwLCBlbWFpbC5pbmRleE9mKCdAJykpO1xyXG5cclxuICAgIC8vIG1lc3NhZ2UgdG8gcXVlcnkgZG9tYWluIHJlZ2lzdHJ5LCBhc2tpbmcgZm9yIGEgdXNlciBoeXBlcnR5LlxyXG4gICAgbGV0IG1lc3NhZ2UgPSB7XHJcbiAgICAgIHR5cGU6ICdyZWFkJywgZnJvbTogX3RoaXMuZGlzY292ZXJ5VVJMLCB0bzogX3RoaXMucmVnaXN0cnlVUkwsIGJvZHk6IHsgcmVzb3VyY2U6IGlkZW50aXR5VVJMfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygnTWVzc2FnZTogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZygnbWVzc2FnZSBSRUFEJywgbWVzc2FnZSk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdtZXNzYWdlIHJlcGx5JywgcmVwbHkpO1xyXG5cclxuICAgICAgICBsZXQgaHlwZXJ0eTtcclxuICAgICAgICBsZXQgbW9zdFJlY2VudDtcclxuICAgICAgICBsZXQgbGFzdEh5cGVydHk7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gcmVwbHkuYm9keS52YWx1ZTtcclxuXHJcbiAgICAgICAgZm9yIChoeXBlcnR5IGluIHZhbHVlKSB7XHJcbiAgICAgICAgICBpZiAodmFsdWVbaHlwZXJ0eV0ubGFzdE1vZGlmaWVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKG1vc3RSZWNlbnQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpO1xyXG4gICAgICAgICAgICAgIGxhc3RIeXBlcnR5ID0gaHlwZXJ0eTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBsZXQgaHlwZXJ0eURhdGUgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpO1xyXG4gICAgICAgICAgICAgIGlmIChtb3N0UmVjZW50LmdldFRpbWUoKSA8IGh5cGVydHlEYXRlLmdldFRpbWUoKSkge1xyXG4gICAgICAgICAgICAgICAgbW9zdFJlY2VudCA9IGh5cGVydHlEYXRlO1xyXG4gICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ0xhc3QgSHlwZXJ0eTogJywgbGFzdEh5cGVydHksIG1vc3RSZWNlbnQpO1xyXG5cclxuICAgICAgICBsZXQgaHlwZXJ0eVVSTCA9IGxhc3RIeXBlcnR5O1xyXG5cclxuICAgICAgICBpZiAoaHlwZXJ0eVVSTCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KCdVc2VyIEh5cGVydHkgbm90IGZvdW5kJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgaWRQYWNrYWdlID0ge1xyXG4gICAgICAgICAgaWQ6IGVtYWlsLFxyXG4gICAgICAgICAgZGVzY3JpcHRvcjogdmFsdWVbaHlwZXJ0eVVSTF0uZGVzY3JpcHRvcixcclxuICAgICAgICAgIGh5cGVydHlVUkw6IGh5cGVydHlVUkxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnPT09PiBoeXBlcnR5RGlzY292ZXJ5IG1lc3NhZ2VCdW5kbGU6ICcsIGlkUGFja2FnZSk7XHJcbiAgICAgICAgcmVzb2x2ZShpZFBhY2thZ2UpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcclxuICAqIHJldHVybiB0aGUgYWxsIHRoZSBoeXBlcnRpZXMgcmVnaXN0ZXJlZCBieSB0aGUgdXNlclxyXG4gICogQHBhcmFtICB7ZW1haWx9ICAgICAgICAgICAgICBlbWFpbFxyXG4gICogQHBhcmFtICB7ZG9tYWlufSAgICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXHJcbiAgKi9cclxuICBkaXNjb3Zlckh5cGVydGllc1BlclVzZXIoZW1haWwsIGRvbWFpbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBhY3RpdmVEb21haW47XHJcblxyXG4gICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gX3RoaXMuZG9tYWluO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpZGVudGl0eVVSTCA9ICd1c2VyOi8vJyArIGVtYWlsLnN1YnN0cmluZyhlbWFpbC5pbmRleE9mKCdAJykgKyAxLCBlbWFpbC5sZW5ndGgpICsgJy8nICsgZW1haWwuc3Vic3RyaW5nKDAsIGVtYWlsLmluZGV4T2YoJ0AnKSk7XHJcblxyXG4gICAgLy8gbWVzc2FnZSB0byBxdWVyeSBkb21haW4gcmVnaXN0cnksIGFza2luZyBmb3IgYSB1c2VyIGh5cGVydHkuXHJcbiAgICBsZXQgbWVzc2FnZSA9IHtcclxuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5kaXNjb3ZlcnlVUkwsIHRvOiBfdGhpcy5yZWdpc3RyeVVSTCwgYm9keTogeyByZXNvdXJjZTogaWRlbnRpdHlVUkx9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCdNZXNzYWdlIGRpc2NvdmVySHlwZXJ0aWVzUGVyVXNlcjogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZygnbWVzc2FnZSBSRUFEJywgbWVzc2FnZSk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb3Zlckh5cGVydGllc1BlclVzZXIgcmVwbHknLCByZXBseSk7XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZSA9IHJlcGx5LmJvZHkudmFsdWU7XHJcblxyXG4gICAgICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgIHJldHVybiByZWplY3QoJ1VzZXIgSHlwZXJ0eSBub3QgZm91bmQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIGh5cGVydHlJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XHJcbiAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgIHVzZXIgICAgICAgICAgICAgIHVzZXIgdXJsXHJcbiAgKiAgQHBhcmFtICAge1N0cmluZ30gICAgICAgICAgIGh5cGVydHlJbnN0YW5jZSAgIEh5cGVydHlJbnNudGFuY2UgdXJsXHJcbiAgKiAgQHBhcmFtICAge2RvbWFpbn0gICAgICAgICAgIGRvbWFpbiAoT3B0aW9uYWwpXHJcbiAgKiAgQHJldHVybiAge1Byb21pc2V9ICAgICAgICAgIFByb21pc2UgICAgICAgICAgcmVzdWx0XHJcbiAgKi9cclxuICBkZWxldGVIeXBlcnR5KHVzZXIsIGh5cGVydHlJbnN0YW5jZSwgZG9tYWluKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcclxuXHJcbiAgICBpZiAoIWRvbWFpbikge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5kb21haW47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1zZyA9IHtcclxuICAgICAgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLmRpc2NvdmVyeVVSTCwgdG86IF90aGlzLnJlZ2lzdHJ5VVJMLCAgIGJvZHk6IHsgdmFsdWU6IHt1c2VyOiB1c2VyLCB1cmw6IGh5cGVydHlJbnN0YW5jZSB9fX07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG5cclxuICAgICAgX3RoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xyXG5cclxuICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXBseS5ib2R5LmNvZGU7XHJcblxyXG4gICAgICAgIGlmIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgcmVzb2x2ZSgnSHlwZXJ0eSBzdWNjZXNzZnVsbHkgZGVsZXRlZCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIGRlbGV0aW5nIGh5cGVydHknKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcms7XHJcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuaW1wb3J0IFJlZ2lzdHJ5RGF0YU1vZGVsIGZyb20gJy4vUmVnaXN0cnlEYXRhTW9kZWwnO1xyXG5cclxuLyoqXHJcbiogICBAYXV0aG9yOiBHaWwgRGlhcyAoZ2lsLmRpYXNAdGVjbmljby51bGlzYm9hLnB0KVxyXG4qICAgSHlwZXJ0eUluc3RhbmNlIERhdGEgTW9kZWwgdXNlZCB0byBtb2RlbCBpbnN0YW5jZXMgb2YgSHlwZXJ0aWVzIHJ1bm5pbmcgaW4gZGV2aWNlcyBhbmQgc2VydmVycy5cclxuKi9cclxuY2xhc3MgSHlwZXJ0eUluc3RhbmNlIGV4dGVuZHMgUmVnaXN0cnlEYXRhTW9kZWwge1xyXG5cclxuICBjb25zdHJ1Y3RvcihpZCwgdXJsLCBkZXNjcmlwdG9yVVJMLCBkZXNjcmlwdG9yLCBoeXBlcnR5VVJMLCB1c2VyLCBndWlkLCBydW50aW1lLCBjb250ZXh0LCBwMnBIYW5kbGVyLCBwMnBSZXF1ZXN0ZXIsIGRhdGFTY2hlbWVzLCByZXNvdXJjZXMsIHN0YXJ0aW5nVGltZSwgbGFzdE1vZGlmaWVkKSB7XHJcbiAgICBzdXBlcihpZCwgdXJsLCBkZXNjcmlwdG9yVVJMLCBwMnBSZXF1ZXN0ZXIsIHN0YXJ0aW5nVGltZSwgbGFzdE1vZGlmaWVkKTtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBfdGhpcy5fZGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XHJcbiAgICBfdGhpcy5faHlwZXJ0eVVSTCA9IGh5cGVydHlVUkw7XHJcbiAgICBfdGhpcy5fdXNlciA9IHVzZXI7XHJcbiAgICBfdGhpcy5fZ3VpZCA9IGd1aWQ7XHJcbiAgICBfdGhpcy5fcnVudGltZSA9IHJ1bnRpbWU7XHJcbiAgICBfdGhpcy5fY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICBfdGhpcy5fcDJwSGFuZGxlciA9IHAycEhhbmRsZXI7XHJcbiAgICBfdGhpcy5fZGF0YVNjaGVtZXMgPSBkYXRhU2NoZW1lcztcclxuICAgIF90aGlzLl9yZXNvdXJjZXMgPSByZXNvdXJjZXM7XHJcbiAgfVxyXG5cclxuICBzZXQgdXNlcihpZGVudGl0eSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIF90aGlzLnVzZXIgPSBpZGVudGl0eTtcclxuICB9XHJcblxyXG4gIGdldCB1c2VyKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fdXNlcjtcclxuICB9XHJcblxyXG4gIGdldCBoeXBlcnR5VVJMKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5faHlwZXJ0eVVSTDtcclxuICB9XHJcblxyXG4gIGdldCBkZXNjcmlwdG9yKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fZGVzY3JpcHRvcjtcclxuICB9XHJcblxyXG4gIGdldCBvYmplY3ROYW1lKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fZGVzY3JpcHRvci5fb2JqZWN0TmFtZTtcclxuICB9XHJcblxyXG4gIGdldCBwMnBIYW5kbGVyKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fcDJwSGFuZGxlcjtcclxuICB9XHJcblxyXG4gIGdldCBkYXRhU2NoZW1lcygpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gX3RoaXMuX2RhdGFTY2hlbWVzO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHJlc291cmNlcygpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gX3RoaXMuX3Jlc291cmNlcztcclxuICB9XHJcblxyXG4gIGdldCBydW50aW1lVVJMKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fcnVudGltZTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEh5cGVydHlJbnN0YW5jZTtcclxuIiwiLyoqXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4qXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbioqL1xuXG5pbXBvcnQgeyBydW50aW1lVXRpbHMgfSBmcm9tICcuLi9ydW50aW1lL3J1bnRpbWVVdGlscyc7XG5cbmltcG9ydCBBZGRyZXNzQWxsb2NhdGlvbiBmcm9tICcuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uJztcbmltcG9ydCBIeXBlcnR5SW5zdGFuY2UgZnJvbSAnLi9IeXBlcnR5SW5zdGFuY2UnO1xuXG5pbXBvcnQge01lc3NhZ2VGYWN0b3J5fSBmcm9tICdzZXJ2aWNlLWZyYW1ld29yay9kaXN0L01lc3NhZ2VGYWN0b3J5JztcbmltcG9ydCB7ZGl2aWRlVVJMLCBpc0h5cGVydHlVUkwsIGlzVVJMLCBpc1VzZXJVUkwsIGdlbmVyYXRlR1VJRCwgZ2V0VXNlcklkZW50aXR5RG9tYWluLCBpc0xlZ2FjeSwgaXNCYWNrZW5kU2VydmljZVVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMuanMnO1xuXG5pbXBvcnQgRGlzY292ZXJ5IGZyb20gJy4vRGlzY292ZXJ5JztcbmltcG9ydCBEaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrIGZyb20gJy4vRGlzY292ZXJ5U2VydmljZUZyYW1ld29yayc7XG5cbmNvbnN0IFNUQVRVUyA9IHsgQ1JFQVRFRDogJ2NyZWF0ZWQnLCBMSVZFOiAnbGl2ZScsIERFUExPWUVEOiAnZGVwbG95ZWQnLCBQUk9HUkVTUzogJ2luLXByb2dyZXNzJywgRElTQ09OTkVDVEVEOiAnZGlzY29ubmVjdGVkJywgREVBRDogJ2RlYWQnIH07XG5cbi8qaW1wb3J0IElkZW50aXR5TWFuYWdlciBmcm9tICcuL0lkZW50aXR5TWFuYWdlcic7XG5pbXBvcnQgRGlzY292ZXJ5IGZyb20gJy4vRGlzY292ZXJ5JzsqL1xuXG4vKipcbiogUnVudGltZSBSZWdpc3RyeSBJbnRlcmZhY2VcbiovXG5jbGFzcyBSZWdpc3RyeSB7XG5cbiAgLyoqXG4gICogVG8gaW5pdGlhbGlzZSB0aGUgUnVudGltZSBSZWdpc3RyeSB3aXRoIHRoZSBSdW50aW1lVVJMIHRoYXQgd2lsbCBiZSB0aGUgYmFzaXMgdG8gZGVyaXZlIHRoZSBpbnRlcm5hbCBydW50aW1lIGFkZHJlc3NlcyB3aGVuIGFsbG9jYXRpbmcgYWRkcmVzc2VzIHRvIGludGVybmFsIHJ1bnRpbWUgY29tcG9uZW50LiBJbiBhZGRpdGlvbiwgdGhlIFJlZ2lzdHJ5IGRvbWFpbiBiYWNrLWVuZCB0byBiZSB1c2VkIHRvIHJlbW90ZWx5IHJlZ2lzdGVyIFJ1bnRpbWUgY29tcG9uZW50cywgaXMgYWxzbyBwYXNzZWQgYXMgaW5wdXQgcGFyYW1ldGVyLlxuICAqIEBwYXJhbSAge01lc3NhZ2VCdXN9ICAgICAgICAgIG1zZ2J1cyAgICAgICAgICAgICAgICBtc2didXNcbiAgKiBAcGFyYW0gIHtIeXBlcnR5UnVudGltZVVSTH0gICBydW50aW1lVVJMICAgICAgICAgICAgcnVudGltZVVSTFxuICAqIEBwYXJhbSAge0FwcFNhbmRib3h9ICAgICAgICAgIGFwcFNhbmRib3ggICAgICAgICAgICBhcHBTYW5kYm94XG4gICogQHBhcmFtICB7cnVudGltZUNhdGFsb2d1ZX0gICAgcnVudGltZUNhdGFsb2d1ZSAgICAgIHJ1bnRpbWVDYXRhbG9ndWVcbiAgKiBAcGFyYW0gIHtEb21haW5VUkx9ICAgICAgICAgICByZW1vdGVSZWdpc3RyeSAgICAgICAgcmVtb3RlUmVnaXN0cnlcbiAgKiBAcGFyYW0gIHtzdG9yYWdlTWFuYWdlcn0gICAgICBzdG9yYWdlTWFuYWdlclxuICAqL1xuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMLCBhcHBTYW5kYm94LCBpZGVudGl0eU1vZHVsZSwgcnVudGltZUNhdGFsb2d1ZSwgcnVudGltZUNhcGFiaWxpdGllcywgc3RvcmFnZU1hbmFnZXIsIHJlbW90ZVJlZ2lzdHJ5KSB7XG5cbiAgICAvLyBob3cgc29tZSBmdW5jdGlvbnMgcmVjZWl2ZSB0aGUgcGFyYW1ldGVycyBmb3IgZXhhbXBsZTpcbiAgICAvLyBuZXcgUmVnaXN0cnkoJ2h5cGVydHktcnVudGltZTovL3NwMS8xMjMnLCBhcHBTYW5kYm94LCBpZE1vZHVsZSwgcmVtb3RlUmVnaXN0cnkpO1xuICAgIC8vIHJlZ2lzdHJ5LnJlZ2lzdGVyU3R1YihzYW5kYm94LCAnc3AxJyk7XG4gICAgLy8gcmVnaXN0cnkucmVnaXN0ZXJIeXBlcnR5KHNhbmRCb3gsICdoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvMTIzJyk7XG4gICAgLy8gcmVnaXN0cnkucmVzb2x2ZSgnaHlwZXJ0eS1ydW50aW1lOi8vc3AxLzEyMycpO1xuXG4gICAgaWYgKCFydW50aW1lVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ3J1bnRpbWVVUkwgaXMgbWlzc2luZy4nKTtcbiAgICBpZiAoIXN0b3JhZ2VNYW5hZ2VyKSB0aHJvdyBuZXcgRXJyb3IoJ3N0b3JhZ2VNYW5hZ2VyIGlzIG1pc3NpbmcuJyk7XG4gICAgLyppZiAoIXJlbW90ZVJlZ2lzdHJ5KSB0aHJvdyBuZXcgRXJyb3IoJ3JlbW90ZVJlZ2lzdHJ5IGlzIG1pc3NpbmcnKTsqL1xuXG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIF90aGlzLnJlZ2lzdHJ5VVJMID0gcnVudGltZVVSTCArICcvcmVnaXN0cnkvJztcbiAgICBfdGhpcy5hcHBTYW5kYm94ID0gYXBwU2FuZGJveDtcbiAgICBfdGhpcy5ydW50aW1lVVJMID0gcnVudGltZVVSTDtcbiAgICBfdGhpcy5ydW50aW1lQ2F0YWxvZ3VlID0gcnVudGltZUNhdGFsb2d1ZTtcbiAgICBfdGhpcy5yZW1vdGVSZWdpc3RyeSA9IHJlbW90ZVJlZ2lzdHJ5O1xuICAgIF90aGlzLmlkTW9kdWxlID0gaWRlbnRpdHlNb2R1bGU7XG4gICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIgPSBzdG9yYWdlTWFuYWdlcjtcbiAgICBfdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzID0gcnVudGltZUNhcGFiaWxpdGllcztcbiAgICBfdGhpcy5pZGVudGlmaWVyID0gZ2VuZXJhdGVHVUlEKCk7XG5cbiAgICAvLyB0aGUgZXhwaXJlcyBpbiAzNjAwLCByZXByZXNlbnRzIDEgaG91clxuICAgIC8vdGhlIGV4cGlyZXMgaXMgaW4gc2Vjb25kcywgdW5pdCBvZiBtZWFzdXJlIHJlY2VpdmVkIGJ5IHRoZSBkb21haW4gcmVnaXN0cnlcbiAgICBfdGhpcy5leHBpcmVzVGltZSA9IDM2MDA7XG5cbiAgICBfdGhpcy5oeXBlcnRpZXNMaXN0VG9SZW1vdmUgPSB7fTtcbiAgICBfdGhpcy5oeXBlcnRpZXNMaXN0ID0gW107XG4gICAgX3RoaXMucmVtb3RlSHlwZXJ0eUxpc3QgPSBbXTtcbiAgICBfdGhpcy5pZHBMZWdhY3lQcm94eUxpc3QgPSB7fTtcblxuICAgIF90aGlzLnAycEhhbmRsZXJTdHViID0ge307XG4gICAgX3RoaXMucDJwUmVxdWVzdGVyU3R1YiA9IHt9O1xuICAgIF90aGlzLnAycENvbm5lY3Rpb25MaXN0ID0ge307XG4gICAgX3RoaXMucDJwSGFuZGxlckFzc29jaWF0aW9uID0ge307XG5cbiAgICBfdGhpcy5wcm90b3N0dWJzTGlzdCA9IHt9O1xuICAgIF90aGlzLmlkcFByb3h5TGlzdCA9IHt9O1xuICAgIF90aGlzLmRhdGFPYmplY3RMaXN0ID0ge307XG4gICAgX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0ID0ge307XG4gICAgX3RoaXMuc2FuZGJveGVzTGlzdCA9IHtzYW5kYm94OiB7fSwgYXBwU2FuZGJveDoge30gfTtcbiAgICBfdGhpcy5wZXBMaXN0ID0ge307XG4gICAgX3RoaXMucmVnaXN0cmllcyA9IHt9O1xuXG4gICAgX3RoaXMuX2RvbWFpbiA9IGRpdmlkZVVSTChfdGhpcy5yZWdpc3RyeVVSTCkuZG9tYWluO1xuICAgIF90aGlzLnNhbmRib3hlc0xpc3QuYXBwU2FuZGJveFtydW50aW1lVVJMXSA9IGFwcFNhbmRib3g7XG4gICAgbGV0IG1zZ0ZhY3RvcnkgPSBuZXcgTWVzc2FnZUZhY3RvcnkoJ2ZhbHNlJywgJ3t9Jyk7XG4gICAgX3RoaXMubWVzc2FnZUZhY3RvcnkgPSBtc2dGYWN0b3J5O1xuICB9XG5cbiAgc2V0IGxvYWRlcihsb2FkZXIpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIF90aGlzLl9sb2FkZXIgPSBsb2FkZXI7XG4gIH1cblxuICBnZXQgbG9hZGVyKCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIF90aGlzLl9sb2FkZXI7XG4gIH1cblxuICAvKipcbiAgKiByZXR1cm4gdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeVxuICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXNcbiAgKi9cbiAgZ2V0IG1lc3NhZ2VCdXMoKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuX21lc3NhZ2VCdXM7XG4gIH1cblxuICAvKipcbiAgKiBTZXQgdGhlIG1lc3NhZ2VCdXMgaW4gdGhpcyBSZWdpc3RyeVxuICAqIEBwYXJhbSB7TWVzc2FnZUJ1c30gICAgICAgICAgIG1lc3NhZ2VCdXNcbiAgKi9cbiAgc2V0IG1lc3NhZ2VCdXMobWVzc2FnZUJ1cykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgX3RoaXMuX21lc3NhZ2VCdXMgPSBtZXNzYWdlQnVzO1xuXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3RoaXMucmVnaXN0cnlVUkwsIGZ1bmN0aW9uKG1zZykge1xuICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gbGlzdGVuZXIgbWVzc2FnZUJ1cycpO1xuXG4gICAgICBsZXQgaXNIeXBlcnR5ID0gaXNIeXBlcnR5VVJMKG1zZy5mcm9tKTtcbiAgICAgIGxldCBpc0Rpc2NvdmVyeSA9IG1zZy5mcm9tLnN1YnN0cmluZyhtc2cuZnJvbS5sZW5ndGggLSAxMCwgbXNnLmZyb20ubGVuZ3RoKSA9PT0gJy9kaXNjb3ZlcnknO1xuXG4gICAgICBsZXQgaGFzQ3JpdGVyaWEgPSBtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgnY3JpdGVyaWEnKTtcbiAgICAgIGxldCBpc1VSTFJlc291cmNlO1xuICAgICAgbGV0IGlzVXNlclJlc291cmNlO1xuICAgICAgbGV0IGlzSHlwZXJ0eVJlc291cmNlO1xuXG4gICAgICBpZiAobXNnLmJvZHkuaGFzT3duUHJvcGVydHkoJ3Jlc291cmNlJykgJiYgbXNnLmJvZHkucmVzb3VyY2UgIT09ICcuJykge1xuICAgICAgICBpc1VSTFJlc291cmNlID0gaXNVUkwobXNnLmJvZHkucmVzb3VyY2UpO1xuICAgICAgICBpc1VzZXJSZXNvdXJjZSA9IGlzVXNlclVSTChtc2cuYm9keS5yZXNvdXJjZSk7XG4gICAgICAgIGlzSHlwZXJ0eVJlc291cmNlID0gaXNIeXBlcnR5VVJMKG1zZy5ib2R5LnJlc291cmNlKTtcbiAgICAgIH1cbiAgICAgIGxldCBpc0RlbGV0ZSA9IG1zZy50eXBlID09PSAnZGVsZXRlJztcbiAgICAgIGxldCBoYXNOYW1lO1xuICAgICAgbGV0IGhhc1VzZXI7XG5cbiAgICAgIGlmIChtc2cuYm9keS5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgICAgICBoYXNOYW1lID0gbXNnLmJvZHkudmFsdWUuaGFzT3duUHJvcGVydHkoJ25hbWUnKTtcbiAgICAgICAgaGFzVXNlciA9IG1zZy5ib2R5LnZhbHVlLmhhc093blByb3BlcnR5KCd1c2VyJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0h5cGVydHkgJiYgaXNEaXNjb3ZlcnkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gaHlwZXJ0eURpc2NvdmVyeScpO1xuICAgICAgICBpZiAoaXNEZWxldGUgJiYgaGFzTmFtZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIGRlbGV0ZURhdGFPYmplY3QnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlbGV0ZSAmJiBoYXNVc2VyKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gZGVsZXRlSHlwZXJ0eScpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc0NyaXRlcmlhICYmIGlzVXNlclJlc291cmNlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Rpc2NvdmVySHlwZXJ0eScpO1xuICAgICAgICAgIGZvciAobGV0IGkgaW4gX3RoaXMucmVtb3RlSHlwZXJ0eUxpc3QpIHtcbiAgICAgICAgICAgIGxldCBoeXBlcnR5ID0gX3RoaXMucmVtb3RlSHlwZXJ0eUxpc3RbaV07XG4gICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoaHlwZXJ0eS5yZXNvdXJjZXMpID09PSBKU09OLnN0cmluZ2lmeShtc2cuYm9keS5jcml0ZXJpYS5yZXNvdXJjZXMpICYmXG4gICAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGh5cGVydHkuZGF0YVNjaGVtZXMpID09PSBKU09OLnN0cmluZ2lmeShtc2cuYm9keS5jcml0ZXJpYS5kYXRhU2NoZW1lcykgJiZcbiAgICAgICAgICAgICAgaHlwZXJ0eS51c2VyLnVzZXJVUkwgPT09IG1zZy5ib2R5LnJlc291cmNlKSB7XG4gICAgICAgICAgICAgIGxldCB1cmwgPSBoeXBlcnR5LnVybDtcbiAgICAgICAgICAgICAgbGV0IHZhbHVlSnNvbiA9IHt9O1xuICAgICAgICAgICAgICB2YWx1ZUpzb25bdXJsXSA9IGh5cGVydHkuaW5mbztcbiAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3Jlc3BvbnNlJyxcbiAgICAgICAgICAgICAgICB0bzogbXNnLmZyb20sXG4gICAgICAgICAgICAgICAgZnJvbTogbXNnLnRvLFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUpzb25cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpcy5kaXNjb3ZlcnkuZGlzY292ZXJIeXBlcnR5KG1zZy5ib2R5LnJlc291cmNlLCBtc2cuYm9keS5jcml0ZXJpYS5kYXRhU2NoZW1lcywgbXNnLmJvZHkuY3JpdGVyaWEucmVzb3VyY2VzKS50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgbGV0IG1vc3RSZWNlbnRIeXBlcnR5O1xuICAgICAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgICBsZXQgaHlwZXJ0eSA9IG5ldyBIeXBlcnR5SW5zdGFuY2UodW5kZWZpbmVkLCB1bmRlZmluZWQsIHZhbHVlW2FdLmRlc2NyaXB0b3IsIHVuZGVmaW5lZCwgYSwgeyB1c2VyVVJMOiB2YWx1ZVthXS51c2VySUQgfSxcbiAgICAgICAgICAgICAgICAnZ3VpZCcsIF90aGlzLnJ1bnRpbWVVUkwsICdjdHgnLCB2YWx1ZVthXS5wMnBIYW5kbGVyLCB2YWx1ZVthXS5wMnBSZXF1ZXN0ZXIsIHZhbHVlW2FdLmRhdGFTY2hlbWVzLCB2YWx1ZVthXS5yZXNvdXJjZXMsXG4gICAgICAgICAgICAgICAgdmFsdWVbYV0uc3RhcnRpbmdUaW1lLCB2YWx1ZVthXS5sYXN0TW9kaWZpZWQpO1xuICAgICAgICAgICAgICBoeXBlcnR5LmluZm8gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKCFtb3N0UmVjZW50SHlwZXJ0eSkge1xuICAgICAgICAgICAgICAgIG1vc3RSZWNlbnRIeXBlcnR5ID0gaHlwZXJ0eTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgaHlwZXJ0eURhdGUgPSBuZXcgRGF0ZShoeXBlcnR5Lmxhc3RNb2RpZmllZCk7XG4gICAgICAgICAgICAgICAgbGV0IG1vc3RSZWNlbnRIeXBlcnR5RGF0ZSA9IG5ldyBEYXRlKG1vc3RSZWNlbnRIeXBlcnR5Lmxhc3RNb2RpZmllZCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaHlwZXJ0eURhdGUgPiBtb3N0UmVjZW50SHlwZXJ0eURhdGUpIHtcbiAgICAgICAgICAgICAgICAgIG1vc3RSZWNlbnRIeXBlcnR5ID0gaHlwZXJ0eTtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1cGRhdGUgZGF0ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChtb3N0UmVjZW50SHlwZXJ0eSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygncHVzaCcpO1xuICAgICAgICAgICAgICBfdGhpcy5yZW1vdGVIeXBlcnR5TGlzdC5wdXNoKG1vc3RSZWNlbnRIeXBlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICB9IGVsc2UgaWYgKGhhc0NyaXRlcmlhICYmICFpc1VSTFJlc291cmNlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gZGlzY292ZXJEYXRhT2JqZWN0Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNIeXBlcnR5UmVzb3VyY2UpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBkaXNjb3ZlckRhdGFPYmplY3RQZXJSZXBvcnRlcicpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzVXNlclJlc291cmNlKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gZGlzY292ZXJIeXBlcnR5UGVyVXNlcicpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzVVJMUmVzb3VyY2UpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBkaXNjb3ZlckRhdGFPYmplY3RQZXJVUkwnKTtcbiAgICAgICAgfSBlbHNlIGlmICghaXNVUkxSZXNvdXJjZSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIGRpc2NvdmVyRGF0YU9iamVjdFBlck5hbWUnKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBtc2cgc2VudCBieSBpZGVudGl0eSBtYW5hZ2VyIGxpYnJhcnlcbiAgICAgICAgbGV0IHVzZXJVcmwgPSBfdGhpcy5fZ2V0SWRlbnRpdHlBc3NvY2lhdGVkKG1zZy5ib2R5LnJlc291cmNlLCBtc2cuYm9keS5jcml0ZXJpYSk7XG5cbiAgICAgICAgbGV0IHJlcGx5ID0ge2lkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIHRvOiBtc2cuZnJvbSwgZnJvbTogbXNnLnRvLCBib2R5OiB7cmVzb3VyY2U6IHVzZXJVcmx9fTtcbiAgICAgICAgcmVwbHkuYm9keS5jb2RlID0gKHVzZXJVcmwpID8gMjAwIDogNDA0O1xuXG4gICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKHJlcGx5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGFsc28gc2V0IHVwIG1lc3NhZ2VCdXMgaW4gdGhlIElkZW50aXR5TW9kdWxlIGNvbXBvbmVudFxuICAgIC8vIFRPRE8gcmVkZWZpbmUgYSBiZXR0ZXIgd2F5IHRvIGFkZCB0aGUgbWVzc2FnZUJ1cyBpbiB0aGUgSWRNb2R1bGVcbiAgICBfdGhpcy5pZE1vZHVsZS5tZXNzYWdlQnVzID0gbWVzc2FnZUJ1cztcblxuICAgIC8vIEluc3RhbGwgQWRkcmVzc0FsbG9jYXRpb25cbiAgICBsZXQgYWRkcmVzc0FsbG9jYXRpb24gPSBuZXcgQWRkcmVzc0FsbG9jYXRpb24oX3RoaXMucmVnaXN0cnlVUkwsIG1lc3NhZ2VCdXMsIF90aGlzKTtcbiAgICBfdGhpcy5hZGRyZXNzQWxsb2NhdGlvbiA9IGFkZHJlc3NBbGxvY2F0aW9uO1xuXG4gICAgbGV0IGRpc2NvdmVyeSA9IG5ldyBEaXNjb3ZlcnkoX3RoaXMucnVudGltZVVSTCwgbWVzc2FnZUJ1cyk7XG4gICAgX3RoaXMuZGlzY292ZXJ5ID0gZGlzY292ZXJ5O1xuXG4gICAgbGV0IGRpc2NvdmVyeVNlcnZpY2VGcmFtZXdvcmsgPSBuZXcgRGlzY292ZXJ5U2VydmljZUZyYW1ld29yaygnaHlwZXJ0eTovL2xvY2FsaG9zdC8xMjMnLCBfdGhpcy5ydW50aW1lVVJMLCBtZXNzYWdlQnVzKTtcbiAgICBfdGhpcy5kaXNjb3ZlcnlTZXJ2aWNlRnJhbWV3b3JrID0gZGlzY292ZXJ5U2VydmljZUZyYW1ld29yaztcblxuICAgIC8qbGV0IGlkZW50aXR5TWFuYWdlciA9IG5ldyBJZGVudGl0eU1hbmFnZXIoJ2h5cGVydHk6Ly9sb2NhbGhvc3QvODMzYTZlNTItNTE1Yi00OThiLWE1N2ItZTNkYWVlY2U0OGQyJywgX3RoaXMucnVudGltZVVSTCwgbWVzc2FnZUJ1cyk7XG4gICAgX3RoaXMuaWRlbnRpdHlNYW5hZ2VyID0gaWRlbnRpdHlNYW5hZ2VyOyovXG4gIH1cblxuICAvKipcbiAgKiBmdW5jdGlvbiB0byByZXF1ZXN0IGFib3V0IHVzZXJzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5LCBhbmRcbiAgKiByZXR1cm4gdGhlIGxhc3QgaHlwZXJ0eSBpbnN0YW5jZSByZWdpc3RlcmVkIGJ5IHRoZSB1c2VyLlxuICAqIEBwYXJhbSAge2VtYWlsfSAgICAgICAgICAgICAgZW1haWxcbiAgKiBAcGFyYW0gIHtkb21haW59ICAgICAgICAgICAgZG9tYWluIChPcHRpb25hbClcbiAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICAgICBQcm9taXNlXG4gICovXG5cbiAgLy8gVE9ETzogaW1wbGVtZW50IGEgY2FjaGUgc3lzdGVtXG4gIGRpc2NvdmVySHlwZXJ0eVBlclVzZXIoZW1haWwsIGRvbWFpbikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGFjdGl2ZURvbWFpbjtcblxuICAgIGlmICghZG9tYWluKSB7XG4gICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5fZG9tYWluO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVEb21haW4gPSBkb21haW47XG4gICAgfVxuXG4gICAgbGV0IGlkZW50aXR5VVJMID0gJ3VzZXI6Ly8nICsgZW1haWwuc3Vic3RyaW5nKGVtYWlsLmluZGV4T2YoJ0AnKSArIDEsIGVtYWlsLmxlbmd0aCkgKyAnLycgKyBlbWFpbC5zdWJzdHJpbmcoMCwgZW1haWwuaW5kZXhPZignQCcpKTtcblxuICAgIC8vIG1lc3NhZ2UgdG8gcXVlcnkgZG9tYWluIHJlZ2lzdHJ5LCBhc2tpbmcgZm9yIGEgdXNlciBoeXBlcnR5LlxuICAgIGxldCBtZXNzYWdlID0ge1xuICAgICAgdHlwZTogJ3JlYWQnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgYWN0aXZlRG9tYWluICsgJy8nLCBib2R5OiB7IHJlc291cmNlOiBpZGVudGl0eVVSTH1cbiAgICB9O1xuXG4gICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gTWVzc2FnZTogJywgbWVzc2FnZSwgYWN0aXZlRG9tYWluLCBpZGVudGl0eVVSTCk7XG5cbiAgICAvL2NvbnNvbGUubG9nKCdbUmVnaXN0cnldIG1lc3NhZ2UgUkVBRCcsIG1lc3NhZ2UpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcblxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIG1lc3NhZ2UgcmVwbHknLCByZXBseSk7XG5cbiAgICAgICAgbGV0IGh5cGVydHk7XG4gICAgICAgIGxldCBtb3N0UmVjZW50O1xuICAgICAgICBsZXQgbGFzdEh5cGVydHk7XG4gICAgICAgIGxldCB2YWx1ZSA9IHJlcGx5LmJvZHkudmFsdWU7XG5cbiAgICAgICAgZm9yIChoeXBlcnR5IGluIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlW2h5cGVydHldLmxhc3RNb2RpZmllZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBpZiAobW9zdFJlY2VudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIG1vc3RSZWNlbnQgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpO1xuICAgICAgICAgICAgICBsYXN0SHlwZXJ0eSA9IGh5cGVydHk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsZXQgaHlwZXJ0eURhdGUgPSBuZXcgRGF0ZSh2YWx1ZVtoeXBlcnR5XS5sYXN0TW9kaWZpZWQpO1xuICAgICAgICAgICAgICBpZiAobW9zdFJlY2VudC5nZXRUaW1lKCkgPCBoeXBlcnR5RGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgICAgICAgICBtb3N0UmVjZW50ID0gaHlwZXJ0eURhdGU7XG4gICAgICAgICAgICAgICAgbGFzdEh5cGVydHkgPSBoeXBlcnR5O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gTGFzdCBIeXBlcnR5OiAnLCBsYXN0SHlwZXJ0eSwgbW9zdFJlY2VudCk7XG5cbiAgICAgICAgbGV0IGh5cGVydHlVUkwgPSBsYXN0SHlwZXJ0eTtcblxuICAgICAgICBpZiAoaHlwZXJ0eVVSTCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnVXNlciBIeXBlcnR5IG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGlkUGFja2FnZSA9IHtcbiAgICAgICAgICBpZDogZW1haWwsXG4gICAgICAgICAgZGVzY3JpcHRvcjogdmFsdWVbaHlwZXJ0eVVSTF0uZGVzY3JpcHRvcixcbiAgICAgICAgICBoeXBlcnR5VVJMOiBoeXBlcnR5VVJMXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gPT09PiBoeXBlcnR5RGlzY292ZXJ5IG1lc3NhZ2VCdW5kbGU6ICcsIGlkUGFja2FnZSk7XG4gICAgICAgIHJlc29sdmUoaWRQYWNrYWdlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2dldElkZW50aXR5QXNzb2NpYXRlZCh0eXBlLCBoeXBlcnR5VVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGZvciAobGV0IGh5cGVydHkgaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkge1xuICAgICAgbGV0IHZhbHVlID0gX3RoaXMuaHlwZXJ0aWVzTGlzdFtoeXBlcnR5XTtcbiAgICAgIGlmICh2YWx1ZS5faHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCkge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlICd1c2VybmFtZSc6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIudXNlcm5hbWU7XG4gICAgICAgICAgY2FzZSAnY24nOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLmNuO1xuICAgICAgICAgIGNhc2UgJ2xvY2FsZSc6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIubG9jYWxlO1xuICAgICAgICAgIGNhc2UgJ2F2YXRhcic6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXIuYXZhdGFyO1xuICAgICAgICAgIGNhc2UgJ3VzZXJVUkwnOlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLl91c2VyLnVzZXJVUkw7XG4gICAgICAgICAgY2FzZSAnLic6XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuX3VzZXI7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvKipcbiAgKiBxdWVyeSB0aGUgZG9tYWluIHJlZ2lzdHJ5IGZvciBpbmZvcm1hdGlvbiBmcm9tIGEgZGF0YU9iamVjdCBVUkxcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgdXJsICAgICAgICAgICAgZGF0YU9iamVjdCBVUkxcbiAgKiBAcmV0dXJuIHtKU09OfSAgICAgZGF0YU9iamVjdCAgICAgZGF0YSBvYmplY3RcbiAgKi9cbiAgZGlzY292ZXJEYXRhT2JqZWN0UGVyVVJMKHVybCwgZG9tYWluKSB7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBsZXQgYWN0aXZlRG9tYWluO1xuXG4gICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICBhY3RpdmVEb21haW4gPSBfdGhpcy5fZG9tYWluO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlRG9tYWluID0gZG9tYWluO1xuICAgICAgfVxuXG4gICAgICBsZXQgbXNnID0ge1xuICAgICAgICB0eXBlOiAncmVhZCcsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLCB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBhY3RpdmVEb21haW4gKyAnLycsIGJvZHk6IHsgcmVzb3VyY2U6IHVybCB9XG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2csIChyZXBseSkgPT4ge1xuXG4gICAgICAgIGxldCBkYXRhT2JqZWN0ID0gcmVwbHkuYm9keS52YWx1ZTtcblxuICAgICAgICBpZiAoZGF0YU9iamVjdCkge1xuICAgICAgICAgIHJlc29sdmUoZGF0YU9iamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCdEYXRhT2JqZWN0IG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCB0byByZXR1cm4gdGhlIHNhbmRib3ggaW5zdGFuY2Ugd2hlcmUgdGhlIEFwcGxpY2F0aW9uIGlzIGV4ZWN1dGluZy4gSXQgaXMgYXNzdW1lZCB0aGVyZSBpcyBqdXN0IG9uZSBBcHAgcGVyIFJ1bnRpbWUgaW5zdGFuY2UuXG4gICovXG4gIGdldEFwcFNhbmRib3goKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gX3RoaXMuYXBwU2FuZGJveDtcbiAgfVxuXG4gIC8qKlxuICAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdXNlciBhc3NvY2lhdGVkIHRvIHRoZSBoeXBlcnR5IFVSTFxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBoeXBlcnR5VVJMICAgICAgaHlwZXJ0eSBVUkxcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgdXNlclVSTCAgICAgICAgIHVzZXIgVVJMXG4gICovXG4gIGdldEh5cGVydHlPd25lcihoeXBlcnR5VVJMKSB7XG5cbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCB1c2VyVVJMO1xuXG4gICAgZm9yIChsZXQgaW5kZXggaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkge1xuICAgICAgbGV0IGh5cGVydHkgPSBfdGhpcy5oeXBlcnRpZXNMaXN0W2luZGV4XTtcbiAgICAgIGlmIChoeXBlcnR5Lmh5cGVydHlVUkwgPT09IGh5cGVydHlVUkwpIHtcbiAgICAgICAgdXNlclVSTCA9IGh5cGVydHkudXNlci51c2VyVVJMO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdXNlclVSTDtcbiAgfVxuXG4gIC8qKlxuICAqIHJldHVybnMgdGhlIGh5cGVydHkgTmFtZSBmcm9tIGEgZ2l2ZW4gdXJsLiBUaGlzIHVybCBjb3VsZCBiZSBmcm9tIGEgZGF0YU9iamVjdCBvciBoeXBlcnR5XG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgIHVybCAgICAgIGh5cGVydHkgb3IgZGF0YU9iamVjdCBVUkxcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgaHlwZXJ0eU5hbWUgICAgIGh5cGVydHkgTmFtZVxuICAqL1xuICBnZXRIeXBlcnR5TmFtZSh1cmwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGlzSHlwZXJ0eVVSTCA9IGRpdmlkZVVSTCh1cmwpLnR5cGUgPT09ICdoeXBlcnR5JztcblxuICAgIC8vdmFsdWUgdG8gYmUgcmV0dXJuZWQgaW4gdGhlIGVuZFxuICAgIGxldCBoeXBlcnR5TmFtZTtcblxuICAgIC8vaWYgaXMgbm90IGFuIGh5cGVydHksIGNoZWNrIGlmIGlzIGEgZGF0YU9iamVjdCBhbmQgb2J0YWluIGhpcyByZXBvcnRlclxuICAgIGxldCBoeXBlcnR5VVJMID0gKGlzSHlwZXJ0eVVSTCkgPyBoeXBlcnR5VVJMID0gdXJsIDogX3RoaXMuZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKHVybCk7XG5cbiAgICBmb3IgKGxldCBpbmRleCBpbiBfdGhpcy5oeXBlcnRpZXNMaXN0KSB7XG4gICAgICBsZXQgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gaHlwZXJ0eVVSTCkge1xuICAgICAgICBoeXBlcnR5TmFtZSA9IGh5cGVydHkub2JqZWN0TmFtZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoeXBlcnR5TmFtZTtcbiAgfVxuXG4gIC8qKlxuICAqIGZ1bmN0aW9uIHRvIHJldHVybiB0aGUgcmVwb3J0ZXJVUkwgYXNzb2NpYXRlZCB3aXRoIHRoZSBkYXRhb2JqZWN0IFVSTFxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0VVJMXG4gICogQHJldHVybiAgIHtTdHJpbmd9ICAgICByZXBvcnRlclVSTCAgICAgIHJlcG9ydGVyVVJMXG4gICovXG4gIGdldFJlcG9ydGVyVVJMKGRhdGFPYmplY3RVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICAgIHJlc29sdmUoZGF0YU9iamVjdC5yZXBvcnRlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoJ05vIHJlcG9ydGVyIHdhcyBmb3VuZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogZnVuY3Rpb24gdG8gcmV0dXJuIHRoZSByZXBvcnRlclVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIGRhdGFvYmplY3QgVVJMLiBubyBwcm9taXNlIHJldHVybmVkXG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICBkYXRhT2JqZWN0VVJMICAgIGRhdGFPYmplY3RVUkxcbiAgKiBAcmV0dXJuICAge1N0cmluZ30gICAgIHJlcG9ydGVyVVJMICAgICAgcmVwb3J0ZXJVUkxcbiAgKi9cbiAgZ2V0UmVwb3J0ZXJVUkxTeW5jaG9ub3VzKGRhdGFPYmplY3RVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgIHJldHVybiAoZGF0YU9iamVjdCkgPyBkYXRhT2JqZWN0LnJlcG9ydGVyIDogdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICogcmV0dXJucyB0aGUgaHlwZXJ0eSBVUkwgdGhhdCBzdWJzY3JpYmVkIHRoZSBkYXRhT2JqZWN0XG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICB1cmwgICAgICAgICAgICB1cmwgZm9ybWF0XG4gICogQHJldHVybiAgIHtTdHJpbmd9ICAgIEh5cGVydHkgVVJMIHN1YnNjcmliZWQgdG8gdGhlIFVSTFxuICAqL1xuICBnZXREYXRhT2JqZWN0U3Vic2NyaWJlckh5cGVydHkodXJsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBfdGhpcy5zdWJzY3JpYmVkRGF0YU9iamVjdExpc3RbdXJsXTtcbiAgfVxuXG4gIC8qKlxuICAqIHJlZ2lzdGVyIGEgZGVzaXJlZCBkYXRhT2JqZWN0IHRvIHN1YnNjcmliZVxuICAqIEBwYXJhbSAgICB7U3RyaW5nfSAgICBkYXRhT2JqZWN0VVJMICAgICAgZGF0YU9iamVjdCBVUkxcbiAgKi9cbiAgcmVnaXN0ZXJTdWJzY3JpYmVkRGF0YU9iamVjdChkYXRhT2JqZWN0VVJMLCBoeXBlcnR5VVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICBpZiAoX3RoaXMuc3Vic2NyaWJlZERhdGFPYmplY3RMaXN0W2RhdGFPYmplY3RVUkxdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIF90aGlzLnN1YnNjcmliZWREYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXSA9IGh5cGVydHlVUkw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gcmV0dXJuIHRoZSBsaXN0IG9mIHByZSBhdXRob3Jpc2VkIHVzZXJzIHJlY2VpdmVkIGluIHRoZSBjcmVhdGlvbiBvZiBhIGRhdGEgb2JqZWN0XG4gICogQHBhcmFtICAgIHtTdHJpbmd9ICAgICAgICAgICAgZGF0YU9iamVjdFVSTCAgICBkYXRhT2JqZWN0VVJMXG4gICogQHJldHVybiAgIHtBcnJheTxTdHJpbmc+fSAgICAgcHJlQXV0aCAgICAgICAgIExpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgdXNlcnNcbiAgKi9cbiAgZ2V0UHJlQXV0aFN1YnNjcmliZXJzKGRhdGFPYmplY3RVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07XG4gICAgbGV0IHByZUF1dGggPSBbXTtcblxuICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICBwcmVBdXRoID0gZGF0YU9iamVjdC5wcmVBdXRoO1xuICAgIH1cbiAgICByZXR1cm4gcHJlQXV0aDtcbiAgfVxuXG4gIC8qKlxuICAqIHNlbmQgcmVxdWVzdHMgdG8gdW5yZWdpc3RlciBhbGwgaHlwZXJ0aWVzIHJlZ2lzdGVyZWQgaW4gZG9tYWluIHJlZ2lzdHJ5XG4gICogQHJldHVybiAgIHtQcm9taXNlfSAgICAgcmV0dXJuIGEgcHJvbWlzZSBpZiB0aGUgcmVzdWx0IG9mIHVucmVnaXN0cmF0aW9uIGFsbCBoeXBlcnRpZXNcbiAgKi9cbiAgdW5yZWdpc3RlckFsbEh5cGVydGllcygpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IHVucmVnaXN0ZXJSZXN1bHRzID0gW107XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgZm9yIChsZXQgaW5kZXggaW4gX3RoaXMuaHlwZXJ0aWVzTGlzdCkge1xuICAgICAgICBsZXQgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuICAgICAgICBsZXQgcmVzdWx0ID0gX3RoaXMudW5yZWdpc3Rlckh5cGVydHlJbnN0YW5jZShoeXBlcnR5LnVzZXIudXNlclVSTCwgaHlwZXJ0eS5oeXBlcnR5VVJMKTtcbiAgICAgICAgdW5yZWdpc3RlclJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICBQcm9taXNlLmFsbCh1bnJlZ2lzdGVyUmVzdWx0cykudGhlbigoKSA9PiB7XG5cbiAgICAgICAgcmVzb2x2ZSgnc3VjY2Vzc2Z1bGx5IHVucmVnaXN0ZXJlZCBhbGwgaHlwZXJ0aWVzJyk7XG4gICAgICB9LCBlcnJvciA9PiB7IHJlamVjdChlcnJvcik7fSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiAgZnVuY3Rpb24gdG8gdW5yZWdpc3RlciBhbiBoeXBlcnR5SW5zdGFuY2UgaW4gdGhlIERvbWFpbiBSZWdpc3RyeVxuICAqICBAcGFyYW0gICB7U3RyaW5nfSAgICAgIHVzZXIgICAgICAgIHVzZXIgdXJsXG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgICAgaHlwZXJ0eUluc3RhbmNlICAgSHlwZXJ0eUluc250YW5jZSB1cmxcbiAgKlxuICAqL1xuICB1bnJlZ2lzdGVySHlwZXJ0eUluc3RhbmNlKHVzZXIsIGh5cGVydHlJbnN0YW5jZSkge1xuICAgIC8vVE9ETyB3b3JraW5nIGJ1dCB0aGUgdXNlclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHsgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7IHZhbHVlOiB7dXNlcjogdXNlciwgdXJsOiBoeXBlcnR5SW5zdGFuY2UgfX19O1xuXG4gICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSB1bnJlZ2lzdGVyIGh5cGVydHkgUmVwbHknLCByZXBseSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiAgZnVuY3Rpb24gdG8gZGVsZXRlIGFuIGRhdGFPYmplY3RJbnN0YW5jZSBpbiB0aGUgRG9tYWluIFJlZ2lzdHJ5XG4gICogIEBwYXJhbSAgIHtTdHJpbmd9ICAgIG5hbWUgICAgICBEYXRhT2JqZWN0TmFtZVxuICAqL1xuICBkZWxldGVEYXRhT2JqZWN0SW5zdGFuY2UobmFtZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHsgdHlwZTogJ2RlbGV0ZScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7IHZhbHVlOiB7bmFtZTogbmFtZX19fTtcblxuICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gdW5yZWdpc3RlciBkYXRhT2JqZWN0IFJlcGx5JywgcmVwbHkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogRnVuY3Rpb24gdG8gdXBkYXRlIGFuIEh5cGVydHlcbiAgKi9cbiAgdXBkYXRlSHlwZXJ0eUluc3RhbmNlKHJlc291cmNlLCB2YWx1ZSkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgbWVzc2FnZSA9IHsgdHlwZTogJ1VQREFURScsIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgICAgICB0bzogJ2RvbWFpbjovL3JlZ2lzdHJ5LicgKyBfdGhpcy5fZG9tYWluICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7IHJlc291cmNlOiByZXNvdXJjZSwgdmFsdWU6IHZhbHVlfX07XG5cbiAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0LnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gVXBkYXRlZCBoeXBlcnR5IHJlcGx5JywgcmVwbHkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogcmVnaXN0ZXIgYSBuZXcgc3Vic2NyaWJlciBpbiB0aGUgZGF0YU9iamVjdCByZWdpc3RlcmVkXG4gICogQHBhcmFtICB7U3RyaW5nfSAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdCBVUkxcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgc3Vic2NyaWJlclVSTCAgICBzdWJzY3JpYmVyIFVSTFxuICAqL1xuICByZWdpc3RlclN1YnNjcmliZXIoZGF0YU9iamVjdFVSTCwgc3Vic2NyaWJlclVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgbGV0IGRhdGFPYmplY3QgPSBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXTtcblxuICAgIGlmIChkYXRhT2JqZWN0KSB7XG4gICAgICBkYXRhT2JqZWN0LnN1YnNjcmliZXJzLnB1c2goc3Vic2NyaWJlclVSTCk7XG4gICAgICBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VVJMXSA9IGRhdGFPYmplY3Q7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogZ2V0IHRoZSBzdWJzY3JpYmVycyByZWdpc3RlcmVkIHdpdGhpbiBhIGRhdGFPYmplY3RcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgICAgIGRhdGFPYmplY3RVUkwgICAgZGF0YU9iamVjdCBVUkxcbiAgKiBAcGFyYW0gIHtBcnJheTxTdHJpbmc+fSAgIFN1YnN0cmliZXJzIExpc3RcbiAgKi9cbiAgZ2V0RGF0YU9iamVjdFN1YnNjcmliZXJzKGRhdGFPYmplY3RVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgIGxldCBkYXRhT2JqZWN0ID0gX3RoaXMuZGF0YU9iamVjdExpc3RbZGF0YU9iamVjdFVSTF07XG5cbiAgICBpZiAoZGF0YU9iamVjdCkge1xuICAgICAgcmV0dXJuIGRhdGFPYmplY3Quc3Vic2NyaWJlcnM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICdObyBkYXRhT2JqZWN0IHdhcyBmb3VuZCc7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICogVG8gcmVnaXN0ZXIgYSBuZXcgRGF0YSBPYmplY3QgaW4gdGhlIHJ1bnRpbWUgd2hpY2ggcmV0dXJucyB0aGUgZGF0YU9iamVjdFVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBEYXRhIE9iamVjdC5cbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgaWRlbnRpZmllciAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXJcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdHNjaGVtYSAgICAgICAgICAgIGRhdGFPYmplY3RzY2hlbWFcbiAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgICAgZGF0YU9iamVjdFVybCAgICAgICAgICAgICAgIGRhdGFPYmplY3RVcmxcbiAgKiBAcGFyYW0ge1N0cmluZ30gICAgICBkYXRhT2JqZWN0UmVwb3J0ZXIgICAgICAgICAgIGRhdGFPYmplY3RSZXBvcnRlclxuICAqIEBwYXJhbSAge0FycmF5fSAgICAgcmVzb3VyY2VzICAgICAgICAgICAgICAgICAgICAgZGF0YU9iamVjdCByZXNvdXJjZXNcbiAgKiBAcGFyYW0gIHtBcnJheX0gICAgIGF1dGhvcmlzZSAgICAgICAgICAgICAgICAgICAgIGxpc3Qgb2YgcHJlIGF1dGhvcmlzZWQgYXV0aG9yaXNlZCBJRHNcbiAgKi9cbiAgcmVnaXN0ZXJEYXRhT2JqZWN0KGlkZW50aWZpZXIsIGRhdGFPYmplY3RzY2hlbWEsIGRhdGFPYmplY3RVcmwsIGRhdGFPYmplY3RSZXBvcnRlciwgcmVzb3VyY2VzLCBhZGRyZXNzVVJMLCBhdXRob3Jpc2UpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuXG4gICAgICBsZXQgZGF0YVNjaGVtZSA9IFtdO1xuICAgICAgbGV0IGZpbHRlcmVkRGF0YVNjaGVtZSA9IGRhdGFPYmplY3RVcmwuc3BsaXQoJzonKTtcbiAgICAgIGRhdGFTY2hlbWUucHVzaChmaWx0ZXJlZERhdGFTY2hlbWVbMF0pO1xuXG4gICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQoJ3JlZ2lzdHJ5OkRhdGFPYmplY3RVUkxzJykudGhlbigodXJsc0xpc3QpID0+IHtcblxuICAgICAgICBpZiAoIXVybHNMaXN0KSB7XG4gICAgICAgICAgdXJsc0xpc3QgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vdXBkYXRlIHRoZSBsaXN0IHdpdGggdGhlIG5ldyBlbGVtZW50c1xuICAgICAgICB1cmxzTGlzdFtpZGVudGlmaWVyICsgZGF0YU9iamVjdHNjaGVtYSArIHJlc291cmNlcyArIGRhdGFPYmplY3RSZXBvcnRlcl0gPSBhZGRyZXNzVVJMLmFkZHJlc3M7XG5cbiAgICAgICAgbGV0IHAycEhhbmRsZXI7XG4gICAgICAgIGxldCBwMnBSZXF1ZXN0ZXI7XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKF90aGlzLnAycEhhbmRsZXJTdHViKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICBwMnBIYW5kbGVyID0gX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0udXJsO1xuICAgICAgICAgIHAycFJlcXVlc3RlciA9IHJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvci5wMnBSZXF1ZXN0ZXJTdHViO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJ1bnRpbWUgPSBfdGhpcy5ydW50aW1lVVJMO1xuICAgICAgICBsZXQgc3RhdHVzID0gJ2xpdmUnO1xuXG4gICAgICAgIC8vbWVzc2FnZSB0byByZWdpc3RlciB0aGUgbmV3IGh5cGVydHksIHdpdGhpbiB0aGUgZG9tYWluIHJlZ2lzdHJ5XG4gICAgICAgIGxldCBtZXNzYWdlVmFsdWUgPSB7XG4gICAgICAgICAgbmFtZTogaWRlbnRpZmllcixcbiAgICAgICAgICByZXNvdXJjZXM6IHJlc291cmNlcyxcbiAgICAgICAgICBkYXRhU2NoZW1lczogZGF0YVNjaGVtZSxcbiAgICAgICAgICBzY2hlbWE6IGRhdGFPYmplY3RzY2hlbWEsXG4gICAgICAgICAgdXJsOiBkYXRhT2JqZWN0VXJsLFxuICAgICAgICAgIGV4cGlyZXM6IF90aGlzLmV4cGlyZXNUaW1lLFxuICAgICAgICAgIHJlcG9ydGVyOiBkYXRhT2JqZWN0UmVwb3J0ZXIsXG4gICAgICAgICAgcHJlQXV0aDogYXV0aG9yaXNlLFxuICAgICAgICAgIHN1YnNjcmliZXJzOiBbXSxcbiAgICAgICAgICBydW50aW1lOiBydW50aW1lLFxuICAgICAgICAgIHN0YXR1czogc3RhdHVzXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHAycEhhbmRsZXIpIHtcbiAgICAgICAgICBtZXNzYWdlVmFsdWUucDJwSGFuZGxlciA9IHAycEhhbmRsZXI7XG4gICAgICAgICAgbWVzc2FnZVZhbHVlLnAycFJlcXVlc3RlciA9IHAycFJlcXVlc3RlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfdGhpcy5pc0ludGVyd29ya2luZ1Byb3RvU3R1YihkYXRhT2JqZWN0UmVwb3J0ZXIpKVxuICAgICAgICAgIG1lc3NhZ2VWYWx1ZS5pbnRlcndvcmtpbmcgPSB0cnVlO1xuXG4gICAgICAgIGxldCBtZXNzYWdlO1xuXG4gICAgICAgIGlmIChhZGRyZXNzVVJMLm5ld0FkZHJlc3MpIHtcblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIHJlZ2lzdGVyaW5nIG5ldyBkYXRhIG9iamVjdCBVUkwnLCBkYXRhT2JqZWN0VXJsKTtcblxuICAgICAgICAgIG1lc3NhZ2UgPSB7dHlwZTonY3JlYXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLCBib2R5OiB7dmFsdWU6IG1lc3NhZ2VWYWx1ZSwgcG9saWN5OiAncG9saWN5J319O1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSByZWdpc3RlcmluZyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgZGF0YSBvYmplY3QgVVJMJywgZGF0YU9iamVjdFVybCk7XG5cbiAgICAgICAgICAvKm1lc3NhZ2VWYWx1ZSA9IHtuYW1lOiBpZGVudGlmaWVyLCByZXNvdXJjZXM6IHJlc291cmNlcywgZGF0YVNjaGVtZXM6IGRhdGFTY2hlbWUsIHNjaGVtYTogZGF0YU9iamVjdHNjaGVtYSwgdXJsOiBkYXRhT2JqZWN0VXJsLCBleHBpcmVzOiBfdGhpcy5leHBpcmVzVGltZSwgcmVwb3J0ZXI6IGRhdGFPYmplY3RSZXBvcnRlciwgcHJlQXV0aDogYXV0aG9yaXNlLCBzdWJzY3JpYmVyczogW119O1xuXG4gICAgICAgICAgbWVzc2FnZSA9IHt0eXBlOidjcmVhdGUnLCBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCwgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsIGJvZHk6IHt2YWx1ZTogbWVzc2FnZVZhbHVlLCBwb2xpY3k6ICdwb2xpY3knfX07Ki9cblxuICAgICAgICAgIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICB0eXBlOiAndXBkYXRlJyxcbiAgICAgICAgICAgIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLFxuICAgICAgICAgICAgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICBib2R5OiB7cmVzb3VyY2U6IGRhdGFPYmplY3RVcmwsIHZhbHVlOiB7c3RhdHVzOiAnbGl2ZSd9IH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgIH1cblxuICAgICAgICBfdGhpcy5kYXRhT2JqZWN0TGlzdFtkYXRhT2JqZWN0VXJsXSA9IG1lc3NhZ2VWYWx1ZTtcblxuICAgICAgICAvLyBzdGVwIHRvIG9idGFpbiB0aGUgbGlzdCBvZiBhbGwgVVJMIHJlZ2lzdGVyZWQgdG8gdXBkYXRlZCB3aXRoIHRoZSBuZXcgb25lLlxuICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ3JlZ2lzdHJ5OkRhdGFPYmplY3RVUkxzJywgMCwgdXJsc0xpc3QpLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgLypsZXQgbWVzc2FnZSA9IF90aGlzLm1lc3NhZ2VGYWN0b3J5LmNyZWF0ZUNyZWF0ZU1lc3NhZ2VSZXF1ZXN0KFxuICAgICAgICAgICAgX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgICAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLFxuICAgICAgICAgICAgbWVzc2FnZVZhbHVlLFxuICAgICAgICAgICAgJ3BvbGljeSdcbiAgICAgICAgICApOyovXG5cbiAgICAgICAgICBfdGhpcy5fbWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtZXNzYWdlLCAocmVwbHkpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldID09PT4gcmVnaXN0ZXJEYXRhT2JqZWN0IFJlcGx5OiAnLCByZXBseSk7XG4gICAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSgnb2snKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlamVjdCgnZXJyb3Igb24gcmVnaXN0ZXIgRGF0YU9iamVjdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgX2dldFJlc291cmNlc0FuZFNjaGVtZXMoZGVzY3JpcHRvcikge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XG5cbiAgICAgIGxldCByZXNvdXJjZXM7XG5cbiAgICAgIC8vIGNoZWNrIGlmIHRoZSBoeXBlcnR5IHJlc291cmNlcyBpcyBhIHZlY3RvciBvciBhIHN0cmluZ1xuICAgICAgLy8gVE9ETyBkZWxldGUgbGF0ZXIgd2hlbiBjYXRhbG9ndWUgaXMgZml4ZWRcbiAgICAgIGlmICh0eXBlb2YgKGRlc2NyaXB0b3IuaHlwZXJ0eVR5cGUpID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXNvdXJjZXMgPSBbXTtcbiAgICAgICAgcmVzb3VyY2VzLnB1c2goZGVzY3JpcHRvci5oeXBlcnR5VHlwZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvdXJjZXMgPSBkZXNjcmlwdG9yLmh5cGVydHlUeXBlO1xuICAgICAgfVxuXG4gICAgICBsZXQgZGVzY3JpcHRvckRhdGFTY2hlbWEgPSBkZXNjcmlwdG9yLmRhdGFPYmplY3RzO1xuICAgICAgbGV0IGRhdGFTY2hlbWFzQXJyYXkgPSBbXTtcblxuICAgICAgLy90aGlzIHdpbGwgY3JlYXRlIGEgYXJyYXkgd2l0aCBhIFByb21pc2UgaW4gZWFjaCBwb3NpdGlvblxuICAgICAgZm9yIChsZXQgaW5kZXggaW4gZGVzY3JpcHRvckRhdGFTY2hlbWEpIHtcbiAgICAgICAgZGF0YVNjaGVtYXNBcnJheS5wdXNoKF90aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0RGF0YVNjaGVtYURlc2NyaXB0b3IoZGVzY3JpcHRvckRhdGFTY2hlbWFbaW5kZXhdKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGFzIHNvb24gYXMgdGhlIHByZXZpb3VzIGFycmF5IGlzIGNvbXBsZXRlZCwgdGhpcyB3aWxsIHdhaXQgZm9yIHRoZSByZXNvbHZlIG9mIGFsbCBwcm9taXNlcyBpbiB0aGUgYXJyYXlcbiAgICAgIFByb21pc2UuYWxsKGRhdGFTY2hlbWFzQXJyYXkpLnRoZW4oZnVuY3Rpb24oZGF0YVNjaGVtYXMpIHtcblxuICAgICAgICBsZXQgZmlsdGVyZWREYXRhU2NoZW1hcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpbmRleCBpbiBkYXRhU2NoZW1hcykge1xuICAgICAgICAgIGxldCBkYXRhU2NoZW1hID0gZGF0YVNjaGVtYXNbaW5kZXhdO1xuICAgICAgICAgIGZpbHRlcmVkRGF0YVNjaGVtYXMucHVzaChkYXRhU2NoZW1hLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzLnNjaGVtZS5jb25zdGFudCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBIeXBlcnR5IFNjaGVtYXMnLCBmaWx0ZXJlZERhdGFTY2hlbWFzKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gSHlwZXJ0eSByZXNvdXJjZXMnLCByZXNvdXJjZXMpO1xuXG4gICAgICAgIHJlc29sdmUoe3Jlc291cmNlczogcmVzb3VyY2VzLCBkYXRhU2NoZW1hOiBmaWx0ZXJlZERhdGFTY2hlbWFzfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIG1ldGhvZCB0aGF0IHJldHVybnMgcHJldmlvdXNseSByZWdpc3RlcmVkIEh5cGVydHkgb3IgRGF0YU9iamVjdHMgVVJMUywgZm9yIGdpdmVuIGNoYXJhY3RlcmlzdGljc1xuICAqIEBwYXJhbSAge0pTT059ICAgICAgICBpbmZvICAgICAgICAgICBvYmplY3Qgb3IgaHlwZXJ0eSBjaGFyYXRlcmlzdGljcyBpbmZvXG4gICogQHJldHVybiB7YWRkcmVzc1VSTH0gIGFkZHJlc3NVUkwgICAgIHJldHVybiB0aGUgVVJMIGlmIHRoZXJlIGlzIGFueSBwcmV2aW91c3kgcmVnaXN0ZXJlZCBVUkwsIHJldHVybiB1bmRlZmluZWQgb3RoZXJ3aXNlXG4gICovXG4gIGNoZWNrUmVnaXN0ZXJlZFVSTHMoaW5mbykge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgb2JqZWN0VHlwZSA9IChpbmZvLnJlcG9ydGVyKSA/ICdyZWdpc3RyeTpEYXRhT2JqZWN0VVJMcycgOiAncmVnaXN0cnk6SHlwZXJ0eVVSTHMnO1xuXG4gICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5nZXQob2JqZWN0VHlwZSkudGhlbigodXJsc0xpc3QpID0+IHtcblxuICAgICAgICBpZiAoIXVybHNMaXN0KSB7XG4gICAgICAgICAgdXJsc0xpc3QgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvYmplY3RUeXBlID09PSAncmVnaXN0cnk6SHlwZXJ0eVVSTHMnKSB7XG4gICAgICAgICAgX3RoaXMuX2dldFJlc291cmNlc0FuZFNjaGVtZXMoaW5mbykudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmICh1cmxzTGlzdFt2YWx1ZS5yZXNvdXJjZXMgKyB2YWx1ZS5kYXRhU2NoZW1hXSkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSByZXVzYWdlIG9mIGh5cGVydHkgVVJMJyk7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVybHNMaXN0W3ZhbHVlLnJlc291cmNlcyArIHZhbHVlLmRhdGFTY2hlbWFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIG5vIGh5cGVydHkgVVJMIHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgJyk7XG4gICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICBsZXQgY2hhcmFjdGVyaXN0aWNzID0gaW5mby5uYW1lICsgaW5mby5zY2hlbWEgKyBpbmZvLnJlc291cmNlcyArIGluZm8ucmVwb3J0ZXI7XG5cbiAgICAgICAgICBpZiAodXJsc0xpc3RbY2hhcmFjdGVyaXN0aWNzXSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gcmV1c2FnZSBvZiBkYXRhT2JqZWN0IFVSTCcpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUodXJsc0xpc3RbY2hhcmFjdGVyaXN0aWNzXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIG5vIGRhdGFPYmplY3QgVVJMIHdhcyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQnKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIH0pO1xuXG4gICAgfSk7XG4gIH1cblxuICBjaGVja0h5cGVydHlQMlBIYW5kbGVyKGh5cGVydHlVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGxldCBoeXBlcnR5O1xuXG4gICAgICBmb3IgKGxldCBpIGluIF90aGlzLnJlbW90ZUh5cGVydHlMaXN0KSB7XG4gICAgICAgIGh5cGVydHkgPSBfdGhpcy5yZW1vdGVIeXBlcnR5TGlzdFtpXTtcblxuICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IC0gY2hlY2tIeXBlcnR5UDJQSGFuZGxlcl0gLSBmb3IgZWFjaCBIeXBlcnR5OiAnLCBoeXBlcnR5KTtcblxuICAgICAgICBpZiAoaHlwZXJ0eS5oeXBlcnR5VVJMID09PSBoeXBlcnR5VVJMKSB7XG5cbiAgICAgICAgICBpZiAoaHlwZXJ0eS5oYXNPd25Qcm9wZXJ0eSgncDJwSGFuZGxlcicpKSB7XG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgcDJwSGFuZGxlcjogaHlwZXJ0eS5wMnBIYW5kbGVyLFxuICAgICAgICAgICAgICBwMnBSZXF1ZXN0ZXI6IGh5cGVydHkucDJwUmVxdWVzdGVyLFxuICAgICAgICAgICAgICBydW50aW1lVVJMOiBoeXBlcnR5LnJ1bnRpbWVVUkxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QoJ1tSZWdpc3RyeSBjaGVja0h5cGVydHlQMlBIYW5kbGVyXSBIeXBlcnR5IGZvdW5kIGRvZXMgbm90IHN1cHBvcnQgUDJQJywgaHlwZXJ0eSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghaHlwZXJ0eSkge1xuICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IC0gY2hlY2tIeXBlcnR5UDJQSGFuZGxlcl0gLSBIeXBlcnR5OiAnLCBoeXBlcnR5KTtcblxuICAgICAgICBsZXQgbWVzc2FnZSA9IHtcbiAgICAgICAgICB0eXBlOiAncmVhZCcsXG4gICAgICAgICAgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsXG4gICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMuX2RvbWFpbiArICcvJyxcbiAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgIHJlc291cmNlOiBoeXBlcnR5VVJMXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgKHJlcGx5KSA9PiB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ2Rpc2NvdmVyIGh5cGVydHkgcGVyIHVybCByZXBseScsIHJlcGx5KTtcbiAgICAgICAgICBpZiAoJ3ZhbHVlJyBpbiByZXBseS5ib2R5KSB7XG5cbiAgICAgICAgICAgIC8vdG9kbzogc3RvcmUgcmV0cmlldmVkIGh5cGVydHlcbiAgICAgICAgICAgIGxldCByZXNvbHZlZEh5cGVydHkgPSByZXBseS5ib2R5LnZhbHVlO1xuXG4gICAgICAgICAgICBpZiAocmVzb2x2ZWRIeXBlcnR5Lmhhc093blByb3BlcnR5KCdwMnBIYW5kbGVyJykpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgcDJwSGFuZGxlcjogcmVzb2x2ZWRIeXBlcnR5LnAycEhhbmRsZXIsXG4gICAgICAgICAgICAgICAgcDJwUmVxdWVzdGVyOiByZXNvbHZlZEh5cGVydHkucDJwUmVxdWVzdGVyLFxuICAgICAgICAgICAgICAgIHJ1bnRpbWVVUkw6IHJlc29sdmVkSHlwZXJ0eS5ydW50aW1lXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVqZWN0KCdbUmVnaXN0cnkgY2hlY2tIeXBlcnR5UDJQSGFuZGxlcl0gSHlwZXJ0eSBmb3VuZCBkb2VzIG5vdCBzdXBwb3J0IFAyUCcsIHJlcGx5LmJvZHkudmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdCgnSHlwZXJ0eSB3aXRoIFAyUEhhbmRsZXIgbm90IGZvdW5kJywgcmVwbHkuYm9keS5jb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogVG8gcmVnaXN0ZXIgYSBuZXcgSHlwZXJ0eSBpbiB0aGUgcnVudGltZSB3aGljaCByZXR1cm5zIHRoZSBIeXBlcnR5VVJMIGFsbG9jYXRlZCB0byB0aGUgbmV3IEh5cGVydHkuXG4gICogQHBhcmFtICB7U2FuZGJveH0gICAgICAgICAgICAgc2FuZGJveCAgICAgICAgICAgICAgIHNhbmRib3hcbiAgKiBAcGFyYW0gIHtIeXBlcnR5Q2F0YWxvZ3VlVVJMfSBIeXBlcnR5Q2F0YWxvZ3VlVVJMICAgZGVzY3JpcHRvclxuICAqIEByZXR1cm4ge0h5cGVydHlVUkx9ICAgICAgICAgIEh5cGVydHlVUkxcbiAgKi9cbiAgcmVnaXN0ZXJIeXBlcnR5KHNhbmRib3gsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGFkZHJlc3NVUkwpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IGh5cGVydHlDYXBhYmlsaXRpZXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIC8vYXNzdW1pbmcgZGVzY3JpcHRvciBjb21lIGluIHRoaXMgZm9ybWF0LCB0aGUgc2VydmljZS1wcm92aWRlci1kb21haW4gdXJsIGlzIHJldHJpZXZlZCBieSBhIHNwbGl0IGluc3RydWN0aW9uXG4gICAgICAvL2h5cGVydHktY2F0YWxvZ3VlOi8vPHNlcnZpY2UtcHJvdmlkZXItZG9tYWluPi88Y2F0YWxvZ3VlLW9iamVjdC1pZGVudGlmaWVyPlxuICAgICAgbGV0IGRvbWFpblVybCA9IGRpdmlkZVVSTChkZXNjcmlwdG9yVVJMKS5kb21haW47XG5cbiAgICAgIGlmIChkb21haW5VcmwuaW5jbHVkZXMoJ2NhdGFsb2d1ZScpKSB7XG4gICAgICAgIGRvbWFpblVybCA9IGRvbWFpblVybC5yZXBsYWNlKCdjYXRhbG9ndWUuJywgJycpO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5pZE1vZHVsZS5nZXRJZGVudGl0eUFzc2VydGlvbigpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG5cbiAgICAgICAgbGV0IHVzZXJQcm9maWxlID0gcmVzdWx0LnVzZXJQcm9maWxlO1xuXG4gICAgICAgIC8vIGhhY2sgd2hpbGUgZG9tYWluIHJlZ2lzdHJ5IGRvZXMgbm90IHN1cHBvcnQgZGlzY292ZXJ5IHBlciBlbWFpbFxuICAgICAgICBsZXQgZW1haWwgPSB1c2VyUHJvZmlsZS51c2VyVVJMLnNwbGl0KCc6Ly8nKVsxXS5zcGxpdCgnLycpWzFdO1xuICAgICAgICBsZXQgaWRlbnRpdHlVUkwgPSAndXNlcjovLycgKyBlbWFpbC5zcGxpdCgnQCcpWzFdICsgJy8nICsgZW1haWwuc3BsaXQoJ0AnKVswXTtcblxuICAgICAgICBpZiAoX3RoaXMuX21lc3NhZ2VCdXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlamVjdCgnTWVzc2FnZUJ1cyBub3QgZm91bmQgb24gcmVnaXN0ZXJTdHViJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy9jYWxsIGNoZWNrIGlmIHRoZSBwcm90b3N0dWIgZXhpc3Q6IHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICAvKiAgX3RoaXMucmVzb2x2ZShkb21haW5VcmwpLnRoZW4oZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIHN0dWIgdG8gZG9tYWluIHJlZ2lzdHJ5LSAnLCBhKTsqL1xuXG4gICAgICAgICAgX3RoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdyZWdpc3RyeTpIeXBlcnR5VVJMcycpLnRoZW4oKHVybHNMaXN0KSA9PiB7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBzdG9yYWdlTWFuYWdlcl0gLSAnLCB1cmxzTGlzdCk7XG5cbiAgICAgICAgICAgIF90aGlzLl9nZXRSZXNvdXJjZXNBbmRTY2hlbWVzKGRlc2NyaXB0b3IpLnRoZW4oKHZhbHVlKSA9PiB7XG5cbiAgICAgICAgICAgICAgaHlwZXJ0eUNhcGFiaWxpdGllcyA9IHZhbHVlO1xuXG4gICAgICAgICAgICAgIGlmICghdXJsc0xpc3QpIHtcbiAgICAgICAgICAgICAgICB1cmxzTGlzdCA9IHt9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgdXJsc0xpc3RbaHlwZXJ0eUNhcGFiaWxpdGllcy5yZXNvdXJjZXMgKyBoeXBlcnR5Q2FwYWJpbGl0aWVzLmRhdGFTY2hlbWFdID0gYWRkcmVzc1VSTC5hZGRyZXNzO1xuICAgICAgICAgICAgICBfdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ3JlZ2lzdHJ5Okh5cGVydHlVUkxzJywgMCwgdXJsc0xpc3QpLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgX3RoaXMucmVnaXN0cnlEb21haW4gPSBkb21haW5Vcmw7XG5cbiAgICAgICAgICAgICAgICAvL2NoZWNrIHdoZXRoZXIgdGhlIHJlY2VpdmVkIHNhbmJveCBlIEFwcGxpY2F0aW9uU2FuZGJveCBvciBhIG5vcm1hbCBzYW5kYm94XG4gICAgICAgICAgICAgICAgaWYgKHNhbmRib3gudHlwZSA9PT0gJ2FwcCcpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3QuYXBwU2FuZGJveFthZGRyZXNzVVJMLmFkZHJlc3NbMF1dID0gc2FuZGJveDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNhbmRib3gudHlwZSA9PT0gJ25vcm1hbCcpIHtcbiAgICAgICAgICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFthZGRyZXNzVVJMLmFkZHJlc3NbMF1dID0gc2FuZGJveDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcmVqZWN0KCdXcm9uZyBTYW5kYm94VHlwZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBwMnBIYW5kbGVyO1xuICAgICAgICAgICAgICAgIGxldCBwMnBSZXF1ZXN0ZXI7XG5cbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LmtleXMoX3RoaXMucDJwSGFuZGxlclN0dWIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgcDJwSGFuZGxlciA9IF90aGlzLnAycEhhbmRsZXJTdHViW190aGlzLnJ1bnRpbWVVUkxdLnVybDtcbiAgICAgICAgICAgICAgICAgIHAycFJlcXVlc3RlciA9IHJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvci5wMnBSZXF1ZXN0ZXJTdHViO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBydW50aW1lID0gX3RoaXMucnVudGltZVVSTDtcbiAgICAgICAgICAgICAgICBsZXQgc3RhdHVzID0gJ2xpdmUnO1xuXG4gICAgICAgICAgICAgICAgbGV0IGh5cGVydHkgPSBuZXcgSHlwZXJ0eUluc3RhbmNlKF90aGlzLmlkZW50aWZpZXIsIF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IsIGFkZHJlc3NVUkwuYWRkcmVzc1swXSwgdXNlclByb2ZpbGUsICdndWlkJywgX3RoaXMucnVudGltZVVSTCwgJ2N0eCcsIHAycEhhbmRsZXIsIHAycFJlcXVlc3RlciwgaHlwZXJ0eUNhcGFiaWxpdGllcy5kYXRhU2NoZW1hLCBoeXBlcnR5Q2FwYWJpbGl0aWVzLnJlc291cmNlcyk7XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5oeXBlcnRpZXNMaXN0LnB1c2goaHlwZXJ0eSk7XG5cbiAgICAgICAgICAgICAgICAvL21lc3NhZ2UgdG8gcmVnaXN0ZXIgdGhlIG5ldyBoeXBlcnR5LCB3aXRoaW4gdGhlIGRvbWFpbiByZWdpc3RyeVxuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlVmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IG1lc3NhZ2U7XG5cbiAgICAgICAgICAgICAgICBpZiAoYWRkcmVzc1VSTC5uZXdBZGRyZXNzKSB7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gcmVnaXN0ZXJpbmcgbmV3IEh5cGVydHkgVVJMJywgYWRkcmVzc1VSTC5hZGRyZXNzWzBdKTtcblxuICAgICAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICB1c2VyOiBpZGVudGl0eVVSTCxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvcjogZGVzY3JpcHRvclVSTCxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBhZGRyZXNzVVJMLmFkZHJlc3NbMF0sXG4gICAgICAgICAgICAgICAgICAgIGV4cGlyZXM6IF90aGlzLmV4cGlyZXNUaW1lLFxuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXM6IGh5cGVydHlDYXBhYmlsaXRpZXMucmVzb3VyY2VzLFxuICAgICAgICAgICAgICAgICAgICBkYXRhU2NoZW1lczogaHlwZXJ0eUNhcGFiaWxpdGllcy5kYXRhU2NoZW1hLFxuICAgICAgICAgICAgICAgICAgICBydW50aW1lOiBydW50aW1lLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHN0YXR1c1xuICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgaWYgKHAycEhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVZhbHVlLnAycEhhbmRsZXIgPSBwMnBIYW5kbGVyO1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVmFsdWUucDJwUmVxdWVzdGVyID0gcDJwUmVxdWVzdGVyO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gcmVnaXN0ZXJpbmcgbmV3IEh5cGVydHkgYXQgZG9tYWluIHJlZ2lzdHJ5ICcsIG1lc3NhZ2VWYWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB7dHlwZTonY3JlYXRlJywgZnJvbTogX3RoaXMucmVnaXN0cnlVUkwsIHRvOiAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLCBib2R5OiB7dmFsdWU6IG1lc3NhZ2VWYWx1ZSwgcG9saWN5OiAncG9saWN5J319O1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSByZWdpc3RlcmluZyBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgSHlwZXJ0eSBVUkwnLCBhZGRyZXNzVVJMLmFkZHJlc3NbMF0pO1xuXG4gICAgICAgICAgICAgICAgICBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAndXBkYXRlJyxcbiAgICAgICAgICAgICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsXG4gICAgICAgICAgICAgICAgICAgIGZyb206IF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7cmVzb3VyY2U6IGFkZHJlc3NVUkwuYWRkcmVzc1swXSwgdmFsdWU6IHsgc3RhdHVzOiAnbGl2ZScsIHVzZXI6IGlkZW50aXR5VVJMIH19XG4gICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICBpZiAocDJwSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmJvZHkudmFsdWUucDJwSGFuZGxlciA9IHAycEhhbmRsZXI7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIHVwZGF0aW5nIEh5cGVydHkgcmVnaXN0cmF0aW9uIGF0IGRvbWFpbiByZWdpc3RyeSAgLSAnLCBtZXNzYWdlKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeSByZWdpc3Rlckh5cGVydHldIEh5cGVydHkgcmVnaXN0cmF0aW9uIHVwZGF0ZSByZXNwb25zZTogJywgcmVwbHkpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShhZGRyZXNzVVJMLmFkZHJlc3NbMF0pO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdGYWlsZWQgdG8gcmVnaXN0ZXIgYW4gSHlwZXJ0eScpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy90aW1lciB0byBrZWVwIHRoZSByZWdpc3RyYXRpb24gYWxpdmVcbiAgICAgICAgICAgICAgICAvLyB0aGUgdGltZSBpcyBkZWZpbmVkIGJ5IGEgbGl0dGxlIGxlc3MgdGhhbiBoYWxmIG9mIHRoZSBleHBpcmVzIHRpbWUgZGVmaW5lZFxuICAgICAgICAgICAgICAgIGxldCBrZWVwQWxpdmVUaW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAvKmxldCBtZXNzYWdlID0gX3RoaXMubWVzc2FnZUZhY3RvcnkuY3JlYXRlQ3JlYXRlTWVzc2FnZVJlcXVlc3QoXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnJlZ2lzdHJ5VVJMLFxuICAgICAgICAgICAgICAgICAgICAnZG9tYWluOi8vcmVnaXN0cnkuJyArIF90aGlzLnJlZ2lzdHJ5RG9tYWluICsgJy8nLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICdwb2xpY3knXG4gICAgICAgICAgICAgICAgICApOyovXG5cbiAgICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOid1cGRhdGUnLFxuICAgICAgICAgICAgICAgICAgICBmcm9tOiBfdGhpcy5yZWdpc3RyeVVSTCxcbiAgICAgICAgICAgICAgICAgICAgdG86ICdkb21haW46Ly9yZWdpc3RyeS4nICsgX3RoaXMucmVnaXN0cnlEb21haW4gKyAnLycsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IHsgcmVzb3VyY2U6IGFkZHJlc3NVUkwuYWRkcmVzc1swXSwgdmFsdWU6IHtzdGF0dXM6ICdsaXZlJ30gfX07XG5cbiAgICAgICAgICAgICAgICAgIF90aGlzLl9tZXNzYWdlQnVzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIChyZXBseSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gS2VlcEFsaXZlIFJlcGx5OiAnLCByZXBseSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LCgoKF90aGlzLmV4cGlyZXNUaW1lIC8gMS4xKSAvIDIpICogMTAwMCkpO1xuXG4gICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnkgcmVnaXN0ZXJIeXBlcnR5XSBFcnJvcjogJywgcmVhc29uKTtcbiAgICAgICAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIHJlamVjdCgnW1JlZ2lzdHJ5IHJlZ2lzdGVySHlwZXJ0eV0gRmFpbGVkIHRvIG9idGFpbiBhbiBpZGVudGl0eScsIGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgSHlwZXJ0eVxuICAqIEBwYXJhbSAge0h5cGVydHlVUkx9ICAgICAgICAgIEh5cGVydHlVUkwgdXJsICAgICAgICB1cmxcbiAgKi9cbiAgdW5yZWdpc3Rlckh5cGVydHkodXJsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgIGxldCBpbmRleCA9IDA7XG5cbiAgICAgIGZvclx0KGluZGV4ID0gMDsgaW5kZXggPCBfdGhpcy5oeXBlcnRpZXNMaXN0Lmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBsZXQgaHlwZXJ0eSA9IF90aGlzLmh5cGVydGllc0xpc3RbaW5kZXhdO1xuICAgICAgICBpZiAoaHlwZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKGh5cGVydHkuaHlwZXJ0eVVSTCA9PT0gdXJsKSB7XG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZvdW5kID09PSBmYWxzZSkge1xuICAgICAgICByZWplY3QoJ0h5cGVydHkgbm90IGZvdW5kJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgX3RoaXMuaHlwZXJ0aWVzTGlzdFtpbmRleF07XG4gICAgICAgIHJlc29sdmUoJ0h5cGVydHkgc3VjY2Vzc2Z1bGx5IGRlbGV0ZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG5cbiAgLyoqXG4gICogVG8gZGlzY292ZXIgcHJvdG9jb2wgc3R1YnMgYXZhaWxhYmxlIGluIHRoZSBydW50aW1lIGZvciBhIGNlcnRhaW4gZG9tYWluLiBJZiBhdmFpbGFibGUsIGl0IHJldHVybnMgdGhlIHJ1bnRpbWUgdXJsIGZvciB0aGUgcHJvdG9jb2wgc3R1YiB0aGF0IGNvbm5lY3RzIHRvIHRoZSByZXF1ZXN0ZWQgZG9tYWluLiBSZXF1aXJlZCBieSB0aGUgcnVudGltZSBCVVMgdG8gcm91dGUgbWVzc2FnZXMgdG8gcmVtb3RlIHNlcnZlcnMgb3IgcGVlcnMgKGRvIHdlIG5lZWQgc29tZXRoaW5nIHNpbWlsYXIgZm9yIEh5cGVydGllcz8pLlxuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIERvbWFpblVSTCAgICAgICAgICAgIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMXG4gICovXG4gIGRpc2NvdmVyUHJvdG9zdHViKHVybCkge1xuICAgIGlmICghdXJsKSB0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciB1cmwgbmVlZGVkJyk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKHVybCk7XG4gICAgbGV0IGRvbWFpblVSTCA9IGRpdmlkZWRVUkwuZG9tYWluO1xuXG4gICAgaWYgKF90aGlzLnByb3Rvc3R1YnNMaXN0Lmhhc093blByb3BlcnR5KGRvbWFpblVSTCkgJiYgX3RoaXMucHJvdG9zdHVic0xpc3RbZG9tYWluVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5MSVZFKSB7XG4gICAgICByZXR1cm4gKF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0pO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0W2RvbWFpblVSTF0gPSB7XG4gICAgICAgIHN0YXR1czogU1RBVFVTLkNSRUFURURcbiAgICAgIH07XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcignW1JlZ2lzdHJ5IC0gZGlzY292ZXJQcm90b1N0dWIgXSBNZXNzYWdlIE5vZGUgUHJvdG9zdHViIE5vdCBGb3VuZC4gQ3JlYXRpbmcgb25lJyk7XG5cbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIGRpc2NvdmVyIHByb3RvY29sIHN0dWJzIGF2YWlsYWJsZSBpbiB0aGUgcnVudGltZSBmb3IgYSBjZXJ0YWluIGRvbWFpbi4gSWYgYXZhaWxhYmxlLCBpdCByZXR1cm5zIHRoZSBydW50aW1lIHVybCBmb3IgdGhlIHByb3RvY29sIHN0dWIgdGhhdCBjb25uZWN0cyB0byB0aGUgcmVxdWVzdGVkIGRvbWFpbi4gUmVxdWlyZWQgYnkgdGhlIHJ1bnRpbWUgQlVTIHRvIHJvdXRlIG1lc3NhZ2VzIHRvIHJlbW90ZSBzZXJ2ZXJzIG9yIHBlZXJzIChkbyB3ZSBuZWVkIHNvbWV0aGluZyBzaW1pbGFyIGZvciBIeXBlcnRpZXM/KS5cbiAgKiBAcGFyYW0gIHtSdW50aW1lVVJMfSAgICAgICAgICAgUnVudGltZVVSTCAgICAgICAgICAgIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMXG4gICovXG4gIGRpc2NvdmVyUDJQU3R1YihydW50aW1lVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIGlmIChydW50aW1lVVJMKSB7XG5cbiAgICAgIGlmIChfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViLmhhc093blByb3BlcnR5KHJ1bnRpbWVVUkwpICYmIF90aGlzLnAycFJlcXVlc3RlclN0dWJbcnVudGltZVVSTF0uc3RhdHVzID09PSBTVEFUVVMuTElWRSkge1xuICAgICAgICByZXR1cm4gKF90aGlzLnAycFJlcXVlc3RlclN0dWJbcnVudGltZVVSTF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucDJwUmVxdWVzdGVyU3R1YltydW50aW1lVVJMXSA9IHtcbiAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5DUkVBVEVEXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdbUmVnaXN0cnkgLSBkaXNjb3ZlclAyUFN0dWIgXSBQMlAgUmVxdWVzdGVyIFN0dWIgTm90IEZvdW5kLiBDcmVhdGluZyBvbmUnKTtcblxuICAgICAgfVxuICAgIH0gZWxzZSB7XG5cbiAgICAgIGlmIChfdGhpcy5wMnBIYW5kbGVyU3R1Yi5oYXNPd25Qcm9wZXJ0eShfdGhpcy5ydW50aW1lVVJMKSAmJiBfdGhpcy5wMnBIYW5kbGVyU3R1YltfdGhpcy5ydW50aW1lVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5MSVZFKSB7XG4gICAgICAgIHJldHVybiAoX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0gPSB7XG4gICAgICAgICAgc3RhdHVzOiBTVEFUVVMuQ1JFQVRFRFxuICAgICAgICB9O1xuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignW1JlZ2lzdHJ5IC0gZGlzY292ZXJQMlBTdHViIF0gUDJQIEhhbmRsZXIgU3R1YiBOb3QgRm91bmQuIENyZWF0aW5nIG9uZScpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogVG8gcmVnaXN0ZXIgYSBuZXcgUHJvdG9jb2wgU3R1YiBpbiB0aGUgcnVudGltZSBpbmNsdWRpbmcgYXMgaW5wdXQgcGFyYW1ldGVycyB0aGUgZnVuY3Rpb24gdG8gcG9zdE1lc3NhZ2UsIHRoZSBEb21haW5VUkwgdGhhdCBpcyBjb25uZWN0ZWQgd2l0aCB0aGUgc3R1Yiwgd2hpY2ggcmV0dXJucyB0aGUgUnVudGltZVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBQcm90b2NvbFN0dWIuXG4gICAqIEBwYXJhbSAge1NhbmRib3h9ICAgICAgIFNhbmRib3hcbiAgICogQHBhcmFtICB7c3R1YklEfSAgICAgICAgRG9tYWluIG9yIGh5cGVydHkgcnVudGltZSB0byByZWdpc3RlciB0aGUgc3R1YlxuICAgKiBAcGFyYW0gIHtkZXNjcmlwdG9yVVJMfSAgICAgQ2F0YWxvZ3VlIFVSTCBvZiB0aGUgUHJvdG9zdHViIGRlc2NyaXB0b3JcbiAgICogQHBhcmFtICB7ZGVzY3JpcHRvcn0gICAgIFByb3Rvc3R1YiBkZXNjcmlwdG9yXG4gICAqIEByZXR1cm4ge1J1bnRpbWVQcm90b1N0dWJVUkx9XG4gICAqL1xuICByZWdpc3RlclN0dWIoc2FuZGJveCwgc3R1YklELCBwMnBDb25maWcsIGRlc2NyaXB0b3JVUkwsIGRlc2NyaXB0b3IpIHtcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgbGV0IF9zdHViRGVzY3JpcHRvciA9IGRlc2NyaXB0b3I7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IHJ1bnRpbWVQcm90b1N0dWJVUkw7XG5cbiAgICAgIC8vY2hlY2sgaWYgbWVzc2FnZUJ1cyBpcyByZWdpc3RlcmVkIGluIHJlZ2lzdHJ5IG9yIG5vdFxuICAgICAgaWYgKF90aGlzLl9tZXNzYWdlQnVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVqZWN0KCdNZXNzYWdlQnVzIG5vdCBmb3VuZCBvbiByZWdpc3RlclN0dWInKTtcbiAgICAgIH1cblxuICAgICAgY29uc29sZS5pbmZvKCdbUmVnaXN0cnkgLSByZWdpc3RlclN0dWJdIC0gc3R1YklEICcsIHN0dWJJRCk7XG5cbiAgICAgIGlmICghc3R1YklELmluZGV4T2YoJ21zZy1ub2RlLicpKSB7XG4gICAgICAgIHN0dWJJRCA9IHN0dWJJRC5zdWJzdHJpbmcoc3R1YklELmluZGV4T2YoJy4nKSArIDEpO1xuICAgICAgfVxuXG4gICAgICBsZXQgaXNQMlBIYW5kbGVyID0gZmFsc2U7XG4gICAgICBsZXQgUDJQUmVxdWVzdGVyU3R1YjtcblxuICAgICAgaWYgKHAycENvbmZpZykge1xuICAgICAgICBpZiAocDJwQ29uZmlnLmhhc093blByb3BlcnR5KCdpc0hhbmRsZXJTdHViJykgJiYgcDJwQ29uZmlnLmlzSGFuZGxlclN0dWIpIHtcbiAgICAgICAgICBpc1AyUEhhbmRsZXIgPSBwMnBDb25maWcuaXNIYW5kbGVyU3R1YjtcbiAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMID0gJ3J1bnRpbWU6Ly8nICsgZGl2aWRlVVJMKHN0dWJJRCkuZG9tYWluICsgJy9wMnBoYW5kbGVyLycgKyBnZW5lcmF0ZUdVSUQoKTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSZWdpc3RyeSAtIHJlZ2lzdGVyU3R1YiAtIGlzUDJQSGFuZGxlcl0gLSAnLCBydW50aW1lUHJvdG9TdHViVVJMKTtcblxuICAgICAgICAgIF90aGlzLnAycEhhbmRsZXJTdHViW3N0dWJJRF0gPSB7XG4gICAgICAgICAgICB1cmw6IHJ1bnRpbWVQcm90b1N0dWJVUkwsXG4gICAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5DUkVBVEVEXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIF90aGlzLnAycEhhbmRsZXJBc3NvY2lhdGlvbltfdGhpcy5ydW50aW1lVVJMXSA9IFtdO1xuXG4gICAgICAgICAgX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3J1bnRpbWVQcm90b1N0dWJVUkxdID0gc2FuZGJveDtcbiAgICAgICAgICByZXNvbHZlKF90aGlzLnAycEhhbmRsZXJTdHViW3N0dWJJRF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFAyUFJlcXVlc3RlclN0dWIgPSBwMnBDb25maWcucDJwUmVxdWVzdGVyU3R1YjtcbiAgICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMID0gJ3J1bnRpbWU6Ly8nICsgZGl2aWRlVVJMKHAycENvbmZpZy5yZW1vdGVSdW50aW1lVVJMKS5kb21haW4gKyAnL3AycHJlcXVlc3Rlci8nICsgZ2VuZXJhdGVHVUlEKCk7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbUmVnaXN0cnkgLSByZWdpc3RlclN0dWIgLSBQMlBSZXF1ZXN0ZXJTdHViXSAtICcsIFAyUFJlcXVlc3RlclN0dWIsICcgLSAnLCBydW50aW1lUHJvdG9TdHViVVJMKTtcblxuICAgICAgICAgIC8vIHRvIGJlIGNsYXJpZmllZCB3aGF0IGlzIHRoaXMgcDJwSGFuZGxlckFzc29jaWF0aW9uXG5cbiAgICAgICAgICBfdGhpcy5wMnBIYW5kbGVyQXNzb2NpYXRpb25bX3RoaXMucnVudGltZVVSTF0ucHVzaChydW50aW1lUHJvdG9TdHViVVJMKTtcbiAgICAgICAgICBfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViW3N0dWJJRF0gPSB7XG4gICAgICAgICAgICB1cmw6IHJ1bnRpbWVQcm90b1N0dWJVUkwsXG4gICAgICAgICAgICBzdGF0dXM6IFNUQVRVUy5DUkVBVEVEXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtydW50aW1lUHJvdG9TdHViVVJMXSA9IHNhbmRib3g7XG4gICAgICAgICAgcmVzb2x2ZShfdGhpcy5wMnBSZXF1ZXN0ZXJTdHViW3N0dWJJRF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBydW50aW1lUHJvdG9TdHViVVJMID0gJ3J1bnRpbWU6Ly8nICsgc3R1YklEICsgJy9wcm90b3N0dWIvJyArIGdlbmVyYXRlR1VJRCgpO1xuXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1JlZ2lzdHJ5IC0gcmVnaXN0ZXJTdHViIC0gTm9ybWFsIFN0dWJdIC0gJywgc3R1YklEKTtcblxuICAgICAgICAvLyBUT0RPOiBPcHRpbWl6ZSB0aGlzXG4gICAgICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0W3N0dWJJRF0gPSB7XG4gICAgICAgICAgdXJsOiBydW50aW1lUHJvdG9TdHViVVJMLFxuICAgICAgICAgIHN0YXR1czogU1RBVFVTLkNSRUFURURcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZGVzY3JpcHRvclVSTClcbiAgICAgICAgX3RoaXMucHJvdG9zdHVic0xpc3Rbc3R1YklEXS5kZXNjcmlwdG9yVVJMID0gZGVzY3JpcHRvclVSTDtcblxuICAgICAgICBpZiAoX3N0dWJEZXNjcmlwdG9yICYmIChfc3R1YkRlc2NyaXB0b3IuaW50ZXJ3b3JraW5nKSkge1xuICAgICAgICAgIF90aGlzLnByb3Rvc3R1YnNMaXN0W3N0dWJJRF0uaW50ZXJ3b3JraW5nID0gX3N0dWJEZXNjcmlwdG9yLmludGVyd29ya2luZztcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzLnNhbmRib3hlc0xpc3Quc2FuZGJveFtydW50aW1lUHJvdG9TdHViVVJMXSA9IHNhbmRib3g7XG5cbiAgICAgICAgcmVzb2x2ZShfdGhpcy5wcm90b3N0dWJzTGlzdFtzdHViSURdKTtcbiAgICAgIH1cblxuICAgICAgLy8gcmVzb2x2ZShydW50aW1lUHJvdG9TdHViVVJMKTtcblxuICAgICAgX3RoaXMuX21lc3NhZ2VCdXMuYWRkTGlzdGVuZXIocnVudGltZVByb3RvU3R1YlVSTCArICcvc3RhdHVzJywgKG1zZykgPT4ge1xuICAgICAgICBpZiAobXNnLnJlc291cmNlID09PSBtc2cudG8gKyAnL3N0YXR1cycpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnUnVudGltZVByb3Rvc3R1YlVSTC9zdGF0dXMgbWVzc2FnZTogJywgbXNnLmJvZHkudmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHJ1bnRpbWVQcm90b1N0dWJVUkwuaW5jbHVkZXMoJ3Byb3Rvc3R1YicpKSB7XG5cbiAgICAgICAgICAgIGxldCBmaWx0ZXJlZCA9IE9iamVjdC5rZXlzKF90aGlzLnByb3Rvc3R1YnNMaXN0KS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICAgICAgICBcdHJldHVybiBfdGhpcy5wcm90b3N0dWJzTGlzdFtrZXldLnVybCA9PT0gcnVudGltZVByb3RvU3R1YlVSTDtcbiAgICAgICAgICAgICAgfSkubWFwKChrZXkpID0+IHtcbiAgICAgICAgICAgICAgXHRfdGhpcy5wcm90b3N0dWJzTGlzdFtrZXldLnN0YXR1cyA9IG1zZy5ib2R5LnZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBsZXQgcmVtb3RlUnVudGltZVVSTCA9IG1zZy5ib2R5LnJlc291cmNlO1xuXG4gICAgICAgICAgICBsZXQgcDJwQ29ubmVjdGlvbiA9IF90aGlzLnAycENvbm5lY3Rpb25MaXN0W3JlbW90ZVJ1bnRpbWVVUkxdO1xuXG4gICAgICAgICAgICBpZiAocDJwQ29ubmVjdGlvbikge1xuICAgICAgICAgICAgICBfdGhpcy5wMnBDb25uZWN0aW9uTGlzdFtyZW1vdGVSdW50aW1lVVJMXS5zdGF0dXMgPSAgbXNnLmJvZHkudmFsdWU7XG4gICAgICAgICAgICAgIF90aGlzLnAycENvbm5lY3Rpb25MaXN0W3JlbW90ZVJ1bnRpbWVVUkxdLnVybCA9ICBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICBwMnBDb25uZWN0aW9uID0ge1xuICAgICAgICAgICAgICAgIHN0YXR1czogbXNnLmJvZHkudmFsdWUsXG4gICAgICAgICAgICAgICAgdXJsOiBydW50aW1lUHJvdG9TdHViVVJMXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbcmVtb3RlUnVudGltZVVSTF0gPSAgcDJwQ29ubmVjdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChydW50aW1lUHJvdG9TdHViVVJMLmluY2x1ZGVzKCdwMnByZXF1ZXN0ZXInKSkge1xuXG4gICAgICAgICAgICBsZXQgZmlsdGVyZWQgPSBPYmplY3Qua2V5cyhwcm90b3N0dWJMaXN0KS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICAgICAgICBcdHJldHVybiBwcm90b3N0dWJMaXN0W2tleV0udXJsID09PSBydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICAgICAgICAgICB9KS5tYXAoKGtleSkgPT4ge1xuICAgICAgICAgICAgICBcdHAycFJlcXVlc3RlclN0dWJba2V5XS5zdGF0dXMgPSBtc2cuYm9keS52YWx1ZTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1YlxuICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMICAgICBoeXBlcnR5UnVudGltZVVSTFxuICAqL1xuICB1bnJlZ2lzdGVyU3R1YihoeXBlcnR5UnVudGltZVVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG5cbiAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdC5oYXNPd25Qcm9wZXJ0eShoeXBlcnR5UnVudGltZVVSTCkpIHtcbiAgICAgICAgZGVsZXRlIF90aGlzLnByb3Rvc3R1YnNMaXN0W2h5cGVydHlSdW50aW1lVVJMXTtcbiAgICAgICAgcmVzb2x2ZSgnUHJvdG9zdHViVVJMIHJlbW92ZWQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlamVjdCgnRXJyb3Igb24gdW5yZWdpc3RlclN0dWI6IEh5cGVydHkgbm90IGZvdW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVG8gcmVnaXN0ZXIgYSBuZXcgSWRlbnRpdHkgUHJvdmlkZXIgcHJveHkgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgRG9tYWluVVJMIHRoYXQgaXMgY29ubmVjdGVkIHdpdGggdGhlIHN0dWIsIHdoaWNoIHJldHVybnMgdGhlIFJ1bnRpbWVVUkwgYWxsb2NhdGVkIHRvIHRoZSBuZXcgUHJvdG9jb2xTdHViLlxuICAgKiBAcGFyYW0ge1NhbmRib3h9ICAgICAgICBTYW5kYm94XG4gICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgIERvbWFpblVSTCBzZXJ2aWNlIHByb3ZpZGVyIGRvbWFpblxuICAgKiBAcmV0dXJuIHtSdW50aW1lSWRwUHJveHlVUkx9XG4gICAqL1xuICByZWdpc3RlcklkcFByb3h5KHNhbmRib3gsIGRvbWFpblVSTCkge1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSxyZWplY3QpIHtcblxuICAgICAgbGV0IGlkcFByb3h5U3R1YlVSTDtcblxuICAgICAgLy9jaGVjayBpZiBtZXNzYWdlQnVzIGlzIHJlZ2lzdGVyZWQgaW4gcmVnaXN0cnkgb3Igbm90XG4gICAgICBpZiAoX3RoaXMuX21lc3NhZ2VCdXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWplY3QoJ01lc3NhZ2VCdXMgbm90IGZvdW5kIG9uIHJlZ2lzdGVyU3R1YicpO1xuICAgICAgfVxuXG4gICAgICBpZHBQcm94eVN0dWJVUkwgPSAnZG9tYWluLWlkcDovLycgKyBkb21haW5VUkwgKyAnL3N0dWIvJyArIGdlbmVyYXRlR1VJRCgpO1xuXG4gICAgICAvLyBUT0RPOiBPcHRpbWl6ZSB0aGlzXG4gICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXSA9IHtcbiAgICAgICAgdXJsOiBpZHBQcm94eVN0dWJVUkwsXG4gICAgICAgIHN0YXR1czogU1RBVFVTLlBST0dSRVNTXG4gICAgICB9O1xuXG4gICAgICBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbaWRwUHJveHlTdHViVVJMXSA9IHNhbmRib3g7XG5cbiAgICAgIC8vIHNhbmRib3guYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgIC8vICAgX3RoaXMuX21lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgIC8vIH0pO1xuXG4gICAgICByZXNvbHZlKGlkcFByb3h5U3R1YlVSTCk7XG5cbiAgICAgIF90aGlzLl9tZXNzYWdlQnVzLmFkZExpc3RlbmVyKGlkcFByb3h5U3R1YlVSTCArICcvc3RhdHVzJywgKG1zZykgPT4ge1xuICAgICAgICBpZiAobXNnLnJlc291cmNlID09PSBtc2cudG8gKyAnL3N0YXR1cycpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBpZHBQcm94eVN0dWJVUkwvc3RhdHVzIG1lc3NhZ2U6ICcsIG1zZy5ib2R5LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgKiBUbyBkaXNjb3ZlciBpZHBQcm94eSBzdHVicyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIElmIGF2YWlsYWJsZSwgaXQgcmV0dXJucyB0aGUgcnVudGltZSB1cmwgZm9yIHRoZSBpZHBQcm94eSBzdHViIHRoYXQgY29ubmVjdHMgdG8gdGhlIHJlcXVlc3RlZCBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIEJVUyB0byByb3V0ZSBtZXNzYWdlcyB0byByZW1vdGUgc2VydmVycyBvciBwZWVyc1xuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gICAgICAgICAgIERvbWFpblVSTCAgICAgICAgICAgIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVVUkx9ICAgICAgICAgICBSdW50aW1lVVJMICAgICAgICAgaWRwUHJveHlVcmxcbiAgKi9cbiAgZGlzY292ZXJJZHBQcm94eSh1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTCh1cmwpO1xuICAgIGxldCBkb21haW5VUkwgPSBkaXZpZGVkVVJMLmRvbWFpbjtcblxuICAgIGlmIChfdGhpcy5pZHBQcm94eUxpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVVJMKSAmJiBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXS5zdGF0dXMgPT09IFNUQVRVUy5MSVZFKSB7XG4gICAgICByZXR1cm4gKF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VUkxdKTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICBfdGhpcy5pZHBQcm94eUxpc3RbZG9tYWluVVJMXSA9IHtcbiAgICAgICAgc3RhdHVzOiBTVEFUVVMuUFJPR1JFU1NcbiAgICAgIH07XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcignW1JlZ2lzdHJ5IC0gZGlzY292ZXJJZHBQcm94eSBdIElkcCBQcm94eSBOb3QgRm91bmQuIENyZWF0aW5nIG9uZScpO1xuXG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgKiBUbyByZWdpc3RlciBhIG5ldyBQb2xpY3kgRW5mb3JjZXIgaW4gdGhlIHJ1bnRpbWUgaW5jbHVkaW5nIGFzIGlucHV0IHBhcmFtZXRlcnMgdGhlIGZ1bmN0aW9uIHRvIHBvc3RNZXNzYWdlLCB0aGUgSHlwZXJ0eVVSTCBhc3NvY2lhdGVkIHdpdGggdGhlIFBFUCwgd2hpY2ggcmV0dXJucyB0aGUgUnVudGltZVVSTCBhbGxvY2F0ZWQgdG8gdGhlIG5ldyBQb2xpY3kgRW5mb3JjZXIgY29tcG9uZW50LlxuICAqIEBwYXJhbSAge01lc3NhZ2UuTWVzc2FnZX0gcG9zdE1lc3NhZ2UgcG9zdE1lc3NhZ2VcbiAgKiBAcGFyYW0gIHtIeXBlcnR5VVJMfSAgICAgICAgICBIeXBlcnR5VVJMICAgICAgICAgICAgaHlwZXJ0eVxuICAqIEByZXR1cm4ge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMXG4gICovXG4gIHJlZ2lzdGVyUEVQKHBvc3RNZXNzYWdlLCBoeXBlcnR5KSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuICAgICAgLy9UT0RPIGNoZWNrIHdoYXQgcGFyYW1ldGVyIGluIHRoZSBwb3N0TWVzc2FnZSB0aGUgcGVwIGlzLlxuICAgICAgX3RoaXMucGVwTGlzdFtoeXBlcnR5XSA9IHBvc3RNZXNzYWdlO1xuICAgICAgcmVzb2x2ZSgnUEVQIHJlZ2lzdGVyZWQgd2l0aCBzdWNjZXNzJyk7XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIHVucmVnaXN0ZXIgYSBwcmV2aW91c2x5IHJlZ2lzdGVyZWQgcHJvdG9jb2wgc3R1YlxuICAqIEBwYXJhbSAge0h5cGVydHlSdW50aW1lVVJMfSAgIEh5cGVydHlSdW50aW1lVVJMICAgICBIeXBlcnR5UnVudGltZVVSTFxuICAqL1xuICB1bnJlZ2lzdGVyUEVQKEh5cGVydHlSdW50aW1lVVJMKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLHJlamVjdCkge1xuXG4gICAgICBsZXQgcmVzdWx0ID0gX3RoaXMucGVwTGlzdFtIeXBlcnR5UnVudGltZVVSTF07XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWplY3QoJ1BlcCBOb3QgZm91bmQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKCdQRVAgc3VjY2Vzc2Z1bGx5IHJlbW92ZWQuJyk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qKlxuICAqIFRvIGRpc2NvdmVyIHNhbmRib3hlcyBhdmFpbGFibGUgaW4gdGhlIHJ1bnRpbWUgZm9yIGEgY2VydGFpbiBkb21haW4uIFJlcXVpcmVkIGJ5IHRoZSBydW50aW1lIFVBIHRvIGF2b2lkIG1vcmUgdGhhbiBvbmUgc2FuZGJveCBmb3IgdGhlIHNhbWUgZG9tYWluLlxuICAqIEBwYXJhbSAge0RvbWFpblVSTH0gRG9tYWluVVJMIHVybFxuICAqIEByZXR1cm4ge1J1bnRpbWVTYW5kYm94fSAgICAgICAgICAgUnVudGltZVNhbmRib3hcbiAgKi9cbiAgZ2V0U2FuZGJveCh1cmwpIHtcbiAgICBpZiAoIXVybCkgdGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgdXJsIG5lZWRlZCcpO1xuICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnkgZ2V0U2FuZGJveF0gZ2V0U2FuZGJveDogJywgdXJsKTtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUscmVqZWN0KSB7XG5cbiAgICAgIGxldCByZXF1ZXN0O1xuXG4gICAgICAvL2ZpcnN0IHRyeSB0byBmaW5kIHRoZSB1cmwgaW4gdGhlIGFwcFNhbmRib3ggbGlzdFxuICAgICAgcmVxdWVzdCA9IF90aGlzLnNhbmRib3hlc0xpc3QuYXBwU2FuZGJveFt1cmxdO1xuXG4gICAgICAvL2lmIG5vIGFwcFNhbmRib3ggd2FzIGZvdW5kLCB0cnkgdG8gc2VhcmNoIGluIHRoZSBub3JtYWwgc2FuZGJveGVzIGxpc3RcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0ID0gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94W3VybF07XG5cbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG5cbiAgICAgICAgICBsZXQgZG9tYWluO1xuXG4gICAgICAgICAgaWYgKHVybC5pbmNsdWRlcygnOi8vJykpXG4gICAgICAgICAgIGRvbWFpbiA9IGRpdmlkZVVSTCh1cmwpLmRvbWFpbjtcbiAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgZG9tYWluID0gdXJsO1xuICAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzZWFyY2ggaW4gdGhlIHNhbmRib3hlcyBsaXN0IGZvciBhIGVudHJ5IGNvbnRhaW5pbmcgdGhlIGRvbWFpbiBnaXZlblxuICAgICAgICAgIGZvciAobGV0IHNhbmRib3ggaW4gX3RoaXMuc2FuZGJveGVzTGlzdC5zYW5kYm94KSB7XG4gICAgICAgICAgICBpZiAoc2FuZGJveC5pbmNsdWRlcyhkb21haW4pKSB7XG4gICAgICAgICAgICAgIHJlcXVlc3QgPSBfdGhpcy5zYW5kYm94ZXNMaXN0LnNhbmRib3hbc2FuZGJveF07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmVqZWN0KCdubyBzYW5kYm94IGZvdW5kIGZvcjogJyArIHVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKHJlcXVlc3QpO1xuICAgICAgfVxuXG4gICAgfSk7XG4gIH1cblxuICByZXNvbHZlTm9ybWFsU3R1Yih1cmwpIHtcbiAgICBjb25zb2xlLmxvZygncmVzb2x2ZU5vcm1hbFN0dWIgJyArIHVybCk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIC8vc3BsaXQgdGhlIHVybCB0byBmaW5kIHRoZSBkb21haW5VUkwuIGRlYWxzIHdpdGggdGhlIHVybCBmb3IgZXhhbXBsZSBhczpcbiAgICAgIC8vXCJoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvcHJvdG9zdHViLzEyM1wiLFxuICAgICAgbGV0IGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodXJsKTtcbiAgICAgIGxldCBkb21haW5VcmwgPSBkaXZpZGVkVVJMLmRvbWFpbjtcbiAgICAgIGxldCB0eXBlID0gZGl2aWRlZFVSTC50eXBlO1xuICAgICAgbGV0IGlzbGVnYWN5O1xuXG4gICAgICBpZiAodXJsLmluY2x1ZGVzKF90aGlzLnJ1bnRpbWVVUkwpKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tSZWdpc3RyeSAtIHJlc29sdmVdIFVSTCB0byBiZSByZXNvbHZlZCBzaG91bGQgaGF2ZSBsaXN0ZW5lcnMgJywgdXJsKTtcbiAgICAgICAgcmVqZWN0KCdbUmVnaXN0cnkgLSByZXNvbHZlXSBVUkwgdG8gYmUgcmVzb2x2ZWQgc2hvdWxkIGhhdmUgbGlzdGVuZXJzICcsIHVybCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHJlc29sdmUgdGhlIGRvbWFpbiBwcm90b3N0dWIgaW4gY2FzZSBvZiBhIG1lc3NhZ2UgdG8gZ2xvYmFsIHJlZ2lzdHJ5XG5cbiAgICAgIGlmICh1cmwuaW5jbHVkZXMoJ2dsb2JhbDovL3JlZ2lzdHJ5JykpIHtcbiAgICAgICAgZG9tYWluVXJsID0gX3RoaXMuX2RvbWFpbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZG9tYWluVXJsLmluZGV4T2YoJ21zZy1ub2RlLicpIHx8ICFkb21haW5VcmwuaW5kZXhPZigncmVnaXN0cnkuJykpIHtcbiAgICAgICAgICBkb21haW5VcmwgPSBkb21haW5Vcmwuc3Vic3RyaW5nKGRvbWFpblVybC5pbmRleE9mKCcuJykgKyAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpcy5pc0xlZ2FjeSh1cmwpLnRoZW4oKGlzTGVnYWN5KSA9PiB7XG5cbiAgICAgICAgLy8gaWYgbGVnYWN5IGl0IHNob3VsZCByZXNvbHZlIGZvciA8cHJvdG9jb2w+Ljxkb21haW4+XG5cbiAgICAgICAgICBpZiAoaXNMZWdhY3kgJiYgdHlwZSAhPT0gJ2RvbWFpbi1pZHAnKVxuICAgICAgICAgICAgICBkb21haW5VcmwgPSB0eXBlICsgJy4nICsgZ2V0VXNlcklkZW50aXR5RG9tYWluKHVybCk7XG5cbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5LnJlc29sdmVdIGRvbWFpblVybDonLCBkb21haW5VcmwpO1xuXG4gICAgICAgIGxldCByZWdpc3RyZWRDb21wb25lbnQ7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkb21haW4taWRwJykge1xuICAgICAgICAgIHJlZ2lzdHJlZENvbXBvbmVudCAgPSBfdGhpcy5pZHBQcm94eUxpc3QuaGFzT3duUHJvcGVydHkoZG9tYWluVXJsKSA/IF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdIDogZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVnaXN0cmVkQ29tcG9uZW50ICA9IF90aGlzLnByb3Rvc3R1YnNMaXN0Lmhhc093blByb3BlcnR5KGRvbWFpblVybCkgPyBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdIDogZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVnaXN0cmVkQ29tcG9uZW50ICYmIHJlZ2lzdHJlZENvbXBvbmVudC5oYXNPd25Qcm9wZXJ0eSgnc3RhdHVzJykgJiYgcmVnaXN0cmVkQ29tcG9uZW50LnN0YXR1cyA9PT0gU1RBVFVTLkRFUExPWUVEKSB7XG4gICAgICAgICAgY29uc29sZS5pbmZvKCdURVNUSU5HIFJlc29sdmVkOiAnLCByZWdpc3RyZWRDb21wb25lbnQudXJsKTtcbiAgICAgICAgICByZXNvbHZlKHJlZ2lzdHJlZENvbXBvbmVudC51cmwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICh0eXBlID09PSAnZG9tYWluLWlkcCcpIHtcbiAgICAgICAgICAgIC8vIF90aGlzLnRyaWdnZXIoJ3J1bnRpbWU6bG9hZElkcFByb3h5JywgZG9tYWluVXJsKTtcblxuICAgICAgICAgICAgX3RoaXMuX2xvYWRlci5sb2FkSWRwUHJveHkoZG9tYWluVXJsKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgcmVnaXN0cmVkQ29tcG9uZW50ICA9IF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdO1xuICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1Jlc29sdmVkIElEUFByb3h5OiAnLCByZWdpc3RyZWRDb21wb25lbnQsIHJlc3VsdCk7XG4gICAgICAgICAgICAgIF90aGlzLmlkcFByb3h5TGlzdFtkb21haW5VcmxdLnN0YXR1cyA9IFNUQVRVUy5ERVBMT1lFRDtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZWdpc3RyZWRDb21wb25lbnQudXJsKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzb2x2aW5nIElEUFByb3h5OiAnLCByZWFzb24pO1xuICAgICAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIF90aGlzLnRyaWdnZXIoJ3J1bnRpbWU6bG9hZFN0dWInLCBkb21haW5VcmwpO1xuXG4gICAgICAgICAgICBfdGhpcy5fbG9hZGVyLmxvYWRTdHViKGRvbWFpblVybCkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgIHJlZ2lzdHJlZENvbXBvbmVudCAgPSBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdO1xuICAgICAgICAgICAgICBjb25zb2xlLmluZm8oJ1Jlc29sdmVkIFByb3Rvc3R1YjogJywgcmVnaXN0cmVkQ29tcG9uZW50LCByZXN1bHQpO1xuICAgICAgICAgICAgICBfdGhpcy5wcm90b3N0dWJzTGlzdFtkb21haW5VcmxdLnN0YXR1cyA9IFNUQVRVUy5ERVBMT1lFRDtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZWdpc3RyZWRDb21wb25lbnQudXJsKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzb2x2aW5nIFByb3Rvc3R1YjogJywgcmVhc29uKTtcbiAgICAgICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuLy8gICAgICByZXNvbHZlKCk7XG4gICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcignW1JlZ2lzdHJ5LnJlc29sdmVdIEVycm9yIHJlc29sdmluZyBpc2xlZ2FjeTogJywgcmVhc29uKTtcbiAgICAgIHJlamVjdChyZWFzb24pO1xuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBUbyB2ZXJpZnkgaWYgc291cmNlIGlzIHZhbGlkIGFuZCB0byByZXNvbHZlIHRhcmdldCBydW50aW1lIHVybCBhZGRyZXNzIGlmIG5lZWRlZCAoZWcgcHJvdG9zdHViIHJ1bnRpbWUgdXJsIGluIGNhc2UgdGhlIG1lc3NhZ2UgaXMgdG8gYmUgZGlzcGF0Y2hlZCB0byBhIHJlbW90ZSBlbmRwb2ludCkuXG4gICogQHBhcmFtICB7VVJMLlVSTH0gIHVybCAgICAgICB1cmxcbiAgKiBAcmV0dXJuIHtQcm9taXNlPFVSTC5VUkw+fSAgICAgICAgICAgICAgICAgUHJvbWlzZSA8VVJMLlVSTD5cbiAgKi9cbiAgcmVzb2x2ZSh1cmwpIHtcbiAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IC0gUmVzb2x2ZV0gLSAgJyArIHVybCk7XG4gICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgIC8vc3BsaXQgdGhlIHVybCB0byBmaW5kIHRoZSBkb21haW5VUkwuIGRlYWxzIHdpdGggdGhlIHVybCBmb3IgZXhhbXBsZSBhczpcbiAgICAgIC8vXCJoeXBlcnR5LXJ1bnRpbWU6Ly9zcDEvcHJvdG9zdHViLzEyM1wiLFxuXG4gICAgICAvLyBTa2lwIHAycCBwcm9jZWR1cmUgd2hlbiBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBSdW50aW1lIG9yIGZvciBiYWNrZW5kIHNlcnZpY2VzXG5cbiAgICAgIGlmICghX3RoaXMucDJwSGFuZGxlclN0dWJbX3RoaXMucnVudGltZVVSTF0gfHwgaXNCYWNrZW5kU2VydmljZVVSTCh1cmwpKSB7XG5cbiAgICAgICAgX3RoaXMucmVzb2x2ZU5vcm1hbFN0dWIodXJsKS50aGVuKChyZXR1cm5VUkwpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHJldHVyblVSTCk7XG4gICAgICAgIH0pO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfdGhpcy5jaGVja0h5cGVydHlQMlBIYW5kbGVyKHVybCkudGhlbigoaHlwZXJ0eUluZm8pID0+IHtcblxuICAgICAgICAgIGxldCBwMnBDb25uZWN0aW9uID0gX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbaHlwZXJ0eUluZm8ucnVudGltZVVSTF07XG5cbiAgICAgICAgICBpZiAoIXAycENvbm5lY3Rpb24pIHtcbiAgICAgICAgICAgIHAycENvbm5lY3Rpb24gPSB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocDJwQ29ubmVjdGlvbi5zdGF0dXMgPT09IFNUQVRVUy5MSVZFKSB7XG4gICAgICAgICAgICByZXNvbHZlKHAycENvbm5lY3Rpb24udXJsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBpZiAocDJwQ29ubmVjdGlvbi5zdGF0dXMgPT09IFNUQVRVUy5DUkVBVEVEKSB7XG4gICAgICAgICAgICAgIF90aGlzLnJlc29sdmVOb3JtYWxTdHViKHVybCkudGhlbigocmV0dXJuVVJMKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5VUkwpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHAycENvbm5lY3Rpb24uc3RhdHVzID0gU1RBVFVTLkNSRUFURUQ7XG4gICAgICAgICAgICAgIF90aGlzLnAycENvbm5lY3Rpb25MaXN0W2h5cGVydHlJbmZvLnJ1bnRpbWVVUkxdID0gcDJwQ29ubmVjdGlvbjtcblxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5IC0gcmVzb2x2ZV0gbG9hZFN0dWIgd2l0aCBwMnBSZXF1ZXN0ZXI6ICcsIGh5cGVydHlJbmZvKTtcblxuICAgICAgICAgICAgICBsZXQgcDJwQ29uZmlnID0geyByZW1vdGVSdW50aW1lVVJMOiBoeXBlcnR5SW5mby5ydW50aW1lVVJMLCBwMnBIYW5kbGVyOiBoeXBlcnR5SW5mby5wMnBIYW5kbGVyLCBwMnBSZXF1ZXN0ZXJTdHViOiB0cnVlIH07XG5cbiAgICAgICAgICAgICAgLy8gVE9ETyBzdHViIGxvYWRcbiAgICAgICAgICAgICAgX3RoaXMuX2xvYWRlci5sb2FkU3R1YihoeXBlcnR5SW5mby5wMnBSZXF1ZXN0ZXIsIHAycENvbmZpZykudGhlbigocHJvdG9zdHViSW5mbykgPT4ge1xuICAgICAgICAgICAgICAgIHAycENvbm5lY3Rpb24uc3RhdHVzID0gU1RBVFVTLkNSRUFURUQ7XG4gICAgICAgICAgICAgICAgX3RoaXMucDJwQ29ubmVjdGlvbkxpc3RbaHlwZXJ0eUluZm8ucnVudGltZVVSTF0gPSBwMnBDb25uZWN0aW9uO1xuXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShwcm90b3N0dWJJbmZvLnVybCk7XG4gICAgICAgICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgKHJlYXNvbikgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1tSZWdpc3RyeSAtIFJlc29sdmVdIC0gUmVhc29uOiAnLCByZWFzb24pO1xuXG4gICAgICAgICAgX3RoaXMucmVzb2x2ZU5vcm1hbFN0dWIodXJsKS50aGVuKChyZXR1cm5VUkwpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVVJMKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG5cbiAgLyoqXG4gICogVG8gdmVyaWZ5IGlmIHVybCBpcyBmcm9tIGEgbGVnYWN5IGRvbWFpbi5cbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgdXJsICAgICAgdXJsXG4gICogQHJldHVybiB7Ym9vbGVhbn1cbiAgKi9cbiAgaXNMZWdhY3kodXJsKSB7XG4gICAgbGV0IF90aGlzID0gdGhpcztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBpZiAodXJsID09PSBfdGhpcy5fZG9tYWluKVxuICAgICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdbUmVnaXN0cnldIFtSZWdpc3RyeS5SZWdpc3RyeS5pc0xlZ2FjeV0gJywgdXJsKTtcblxuICAgICAgLy8gVE9ETzogdG8gYmUgZGVmaW5lZCBpbiB0aGUgcnVudGltZSBjb25maWd1cmF0aW9uXG4gICAgICBsZXQgbm9uTGVnYWN5ID0gW1wicnVudGltZVwiLFwiaHlwZXJ0eS1ydW50aW1lXCIsXCJkb21haW5cIixcImdsb2JhbFwiLFwiaHlwZXJ0eVwiXTtcblxuICAgICAgbGV0IHVybERpdmlkZWQgPSBkaXZpZGVVUkwodXJsKTtcblxuICAgICAgaWYgKG5vbkxlZ2FjeS5pbmRleE9mKHVybERpdmlkZWQudHlwZSkgIT09IC0xIHx8IHVybERpdmlkZWQuZG9tYWluID09PSBfdGhpcy5fZG9tYWluKVxuICAgICAgICByZXR1cm4gcmVzb2x2ZShmYWxzZSk7XG5cbiAgICAgIGxldCBkb21haW4gPSB1cmxEaXZpZGVkLmRvbWFpbjtcblxuICAgICAgY29uc29sZS5sb2coJ1tSZWdpc3RyeV0gW1JlZ2lzdHJ5LlJlZ2lzdHJ5LmlzTGVnYWN5XSBkb21haW46ICcsIGRvbWFpbik7XG4gICAgICBpZiAoX3RoaXMuaWRwTGVnYWN5UHJveHlMaXN0Lmhhc093blByb3BlcnR5KGRvbWFpbikpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IF90aGlzLmlkcExlZ2FjeVByb3h5TGlzdFtkb21haW5dO1xuICAgICAgICBpZiAocmVzdWx0LmludGVyd29ya2luZylcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShyZXN1bHQuaW50ZXJ3b3JraW5nKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIHJldHVybiByZXNvbHZlKGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgX3RoaXMuX2xvYWRlci5kZXNjcmlwdG9ycy5nZXRJZHBQcm94eURlc2NyaXB0b3IoZG9tYWluKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1JlZ2lzdHJ5XSBbUmVnaXN0cnkuUmVnaXN0cnkuaXNMZWdhY3ldIExlZ2FjeSBzdHViIGRlc2NyaXB0b3I6ICcsIHJlc3VsdCk7XG4gICAgICAgICAgX3RoaXMuaWRwTGVnYWN5UHJveHlMaXN0W2RvbWFpbl0gPSByZXN1bHQ7XG4gICAgICAgICAgaWYgKHJlc3VsdC5pbnRlcndvcmtpbmcpXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdC5pbnRlcndvcmtpbmcpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdwcm9ibGVtIGxvYWRpbmcgc3R1YiBmb3IgZG9tYWluOicsIGRvbWFpbik7XG4gICAgICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICogVG8gdmVyaWZ5IGlmIFVSTCBpcyBsb2NhbGx5IHJlZ2lzdGVyZWQgb3Igbm90LlxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICB1cmwgICAgICB1cmxcbiAgKiBAcmV0dXJuIHtib29sZWFufVxuICAqL1xuXG4gIGlzTG9jYWwodXJsKSB7XG5cbiAgICBsZXQgcnVudGltZVNjaGVtZSA9IFsnaHlwZXJ0eS1ydW50aW1lJywgJ3J1bnRpbWUnXTtcbiAgICBsZXQgaHlwZXJ0eVNjaGVtZSA9IFsnaHlwZXJ0eSddO1xuICAgIGxldCB1cmxTY2hlbWUgPSB1cmwuc3BsaXQoJzovLycpWzBdO1xuXG4gICAgLy8gUHJvY2VzcyBSdW50aW1lIENvcmUgVVJMcy5cbiAgICAvLyBNZXNzYWdlcyBvcmlnaW5hdGVkIGZyb20gcHJvdG9zdHVicyBzaG91bGQgYWxzbyBub3QgaW5jbHVkZSB0aGUgcnVudGltZVVSTCBpbiBpdHMgVVJMLlxuXG4gICAgaWYgKHJ1bnRpbWVTY2hlbWUuaW5kZXhPZih1cmxTY2hlbWUpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIHVybC5pbmNsdWRlcyh0aGlzLnJ1bnRpbWVVUkwpO1xuICAgIH1cblxuICAgIC8vIFByb2Nlc3MgSHlwZXJ0eSBVUkxzXG5cbiAgICBpZiAoaHlwZXJ0eVNjaGVtZS5pbmRleE9mKHVybFNjaGVtZSkgIT09IC0xKSB7XG4gICAgICByZXR1cm4gdGhpcy5oeXBlcnRpZXNMaXN0Lmhhc093blByb3BlcnR5KHVybCk7XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBEYXRhIE9iamVjdCBVUkxzXG5cbiAgICBpZiAodXJsLmluY2x1ZGVzKCcvc3Vic2NyaXB0aW9uJykpIHtcbiAgICAgIHVybCA9IHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJy9zdWJzY3JpcHRpb24nKSk7XG4gICAgfVxuXG4gICAgbGV0IGRhdGFPYmplY3QgPSB0aGlzLmRhdGFPYmplY3RMaXN0W3VybF07XG5cbiAgICBpZiAoZGF0YU9iamVjdCkge1xuICAgICAgaWYgKGRhdGFPYmplY3QuaW50ZXJ3b3JraW5nKVxuICAgICAgICByZXR1cm4gIWRhdGFPYmplY3QuaW50ZXJ3b3JraW5nO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAqIFRvIHZlcmlmeSBpZiBwcm90b3N0dWIgaXMgdG8gaW50ZXJ3b3JrIHdpdGggYSBsZWdhY3kgZG9tYWluLlxuICAqIEBwYXJhbSAge1VSTC5VUkx9ICBydW50aW1lUHJvdG9zdHViVVJMICAgICAgVGhlIHJ1bnRpbWUgVVJMIG9mIHRoZSBQcm90b3N0dWJcbiAgKiBAcmV0dXJuIHtib29sZWFufVxuICAqL1xuXG4gIGlzSW50ZXJ3b3JraW5nUHJvdG9TdHViKHJ1bnRpbWVQcm90b3N0dWJVUkwpIHtcblxuICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIShydW50aW1lUHJvdG9zdHViVVJMLmluY2x1ZGVzKCcvcHJvdG9zdHViLycpKSlcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGxldCBmaWx0ZXJlZCA9IE9iamVjdC5rZXlzKF90aGlzLnByb3Rvc3R1YnNMaXN0KS5maWx0ZXIoKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gX3RoaXMucHJvdG9zdHVic0xpc3Rba2V5XS51cmwgPT09IHJ1bnRpbWVQcm90b3N0dWJVUkw7XG4gICAgICB9KS5tYXAoKGtleSkgPT4ge1xuXG4gICAgICAgIGlmIChfdGhpcy5wcm90b3N0dWJzTGlzdFtrZXldLmhhc093blByb3BlcnR5KCdpbnRlcndvcmtpbmcnKSlcbiAgICAgICAgICByZXR1cm4gX3RoaXMucHJvdG9zdHVic0xpc3Rba2V5XS5pbnRlcndvcmtpbmc7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9KVswXTtcblxuICAgIHJldHVybiBmaWx0ZXJlZDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWdpc3RyeTtcbiIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuLyoqXHJcbiogICBAYXV0aG9yOiBHaWwgRGlhcyAoZ2lsLmRpYXNAdGVjbmljby51bGlzYm9hLnB0KVxyXG4qICAgUmVnaXN0cnkgRGF0YSBNb2RlbCBpbmNsdWRlcyBhbGwgT2JqZWN0cyB0byBiZSBoYW5kbGVkIGJ5IHRoZSBSZWdpc3RyeSBmdW5jdGlvbmFsaXR5IGluY2x1ZGluZ1xyXG4qL1xyXG5jbGFzcyBSZWdpc3RyeURhdGFNb2RlbCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGlkLCB1cmwsIGRlc2NyaXB0b3JVUkwsIHAycFJlcXVlc3Rlciwgc3RhcnRpbmdUaW1lLCBsYXN0TW9kaWZpZWQsIHN0YXR1cywgc3R1YnMsIHN0dWJzQ29uZmlndXJhdGlvbikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5faWQgPSBpZDtcclxuICAgIF90aGlzLl91cmwgPSB1cmw7XHJcbiAgICBfdGhpcy5fZGVzY3JpcHRvclVSTCA9IGRlc2NyaXB0b3JVUkw7XHJcbiAgICBfdGhpcy5fc3RhcnRpbmdUaW1lID0gc3RhcnRpbmdUaW1lO1xyXG4gICAgX3RoaXMuX2xhc3RNb2RpZmllZCA9IGxhc3RNb2RpZmllZDtcclxuICAgIF90aGlzLl9zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICBfdGhpcy5fc3R1YnMgPSBzdHVicztcclxuICAgIF90aGlzLl9zdHVic0NvbmZpZ3VyYXRpb24gPSBzdHVic0NvbmZpZ3VyYXRpb247XHJcbiAgICBfdGhpcy5fcDJwUmVxdWVzdGVyID0gcDJwUmVxdWVzdGVyO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGlkKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5faWQ7XHJcbiAgfVxyXG5cclxuICBnZXQgdXJsKCkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHJldHVybiBfdGhpcy5fdXJsO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRlc2NyaXB0b3IoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl9kZXNjcmlwdG9yVVJMO1xyXG4gIH1cclxuXHJcbiAgZ2V0IHAycFJlcXVlc3RlcigpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICByZXR1cm4gX3RoaXMuX3AycFJlcXVlc3RlcjtcclxuICB9XHJcblxyXG4gIGdldCBsYXN0TW9kaWZpZWQoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgcmV0dXJuIF90aGlzLl9sYXN0TW9kaWZpZWQ7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVnaXN0cnlEYXRhTW9kZWw7XHJcbiIsImltcG9ydCB7ZGl2aWRlVVJMLCBnZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzLCBidWlsZFVSTH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5cclxuY2xhc3MgRGVzY3JpcHRvcnMge1xyXG5cclxuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMLCBjYXRhbG9ndWUsIHJ1bnRpbWVDb25maWd1cmF0aW9uKSB7XHJcbiAgICBpZiAoIXJ1bnRpbWVVUkwpIHRocm93IEVycm9yKCdUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgdXJsIHRvIGJlIHVzZWQnKTtcclxuICAgIGlmICghY2F0YWxvZ3VlKSB0aHJvdyBFcnJvcignVGhlIGRlc2NyaXB0b3IgbmVlZHMgdGhlIGNhdGFsb2d1ZSBpbnN0YW5jZScpO1xyXG4gICAgaWYgKCFydW50aW1lQ29uZmlndXJhdGlvbikgdGhyb3cgRXJyb3IoJ1RoZSBkZXNjcmlwdG9yIG5lZWRzIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb24nKTtcclxuXHJcbiAgICB0aGlzLnJ1bnRpbWVDb25maWd1cmF0aW9uID0gcnVudGltZUNvbmZpZ3VyYXRpb247XHJcbiAgICB0aGlzLnJ1bnRpbWVVUkwgPSBydW50aW1lVVJMO1xyXG4gICAgdGhpcy5jYXRhbG9ndWUgPSBjYXRhbG9ndWU7XHJcbiAgfVxyXG5cclxuICBnZXRIeXBlcnR5RGVzY3JpcHRvciAoaHlwZXJ0eVVSTCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldEh5cGVydHlEZXNjcmlwdG9yKGh5cGVydHlVUkwpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U3R1YkRlc2NyaXB0b3IgKHN0dWJVUkwpIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IGRvbWFpbjtcclxuICAgICAgbGV0IHByb3Rvc3R1YjtcclxuICAgICAgbGV0IHByb3RvU3R1YlVSTDtcclxuXHJcbiAgICAgIGxldCBvcmlnaW5EaXZpZGVkVVJMID0gZGl2aWRlVVJMKHRoaXMucnVudGltZVVSTCk7XHJcbiAgICAgIGxldCBvcmlnaW5Eb21haW4gPSBvcmlnaW5EaXZpZGVkVVJMLmRvbWFpbjtcclxuXHJcbiAgICAgIGlmIChzdHViVVJMLmluY2x1ZGVzKCc6Ly8nKSkge1xyXG4gICAgICAgIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKHN0dWJVUkwpO1xyXG4gICAgICAgIGRvbWFpbiA9IGRpdmlkZWRVUkwuZG9tYWluO1xyXG4gICAgICAgIGxldCBwYXRoID0gZGl2aWRlZFVSTC5pZGVudGl0eTtcclxuICAgICAgICBpZiAocGF0aClcclxuICAgICAgICAgIHByb3Rvc3R1YiA9IHBhdGguc3Vic3RyaW5nKHBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwcm90b3N0dWIgPSAnZGVmYXVsdCc7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcHJvdG9zdHViID0gJ2RlZmF1bHQnO1xyXG4gICAgICAgIGRvbWFpbiA9IHN0dWJVUkw7XHJcbiAgICAgIH1cclxuXHJcbiAgLyogICAgaWYgKCFkb21haW4pIHtcclxuICAgICAgICBkb21haW4gPSBzdHViVVJMO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIXByb3Rvc3R1Yikge1xyXG4gICAgICAgIHByb3Rvc3R1YiA9ICdkZWZhdWx0JztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwcm90b3N0dWIgPSBwcm90b3N0dWIuc3Vic3RyaW5nKHByb3Rvc3R1Yi5sYXN0SW5kZXhPZignLycpICsgMSk7XHJcbiAgICAgIH0qL1xyXG5cclxuICAgICAgcHJvdG9TdHViVVJMID0gYnVpbGRVUkwodGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAncHJvdG9jb2xzdHViJywgcHJvdG9zdHViKTtcclxuICAgICAgaWYgKGRvbWFpbiAhPT0gdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbi5kb21haW4pIHtcclxuICAgICAgICBpZiAoIXN0dWJVUkwuaW5kZXhPZignaHR0cHMnKSB8fCAhc3R1YlVSTC5pbmRleE9mKCdoeXBlcnR5LWNhdGFsb2d1ZScpKSB7XHJcbiAgICAgICAgICBwcm90b1N0dWJVUkwgPSBzdHViVVJMO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgLy8gVE9ETzogY2hlY2sgaG93IHRvIGxvYWQgZm9ybSBkaWZmZXJlbnQgY29uZmlndXJhdGlvbiBkb21haW5cclxuICAgICAgICAgIGxldCByZXNvdXJjZSA9IGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXModGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAncHJvdG9jb2xzdHViJyk7XHJcbiAgICAgICAgICBwcm90b1N0dWJVUkwgPSByZXNvdXJjZS5wcmVmaXggKyBkb21haW4gKyByZXNvdXJjZS5zdWZmaXggKyBwcm90b3N0dWI7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zb2xlLmxvZygnTG9hZCBQcm90b2NvbFN0dWIgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBwcm90b1N0dWJVUkwpO1xyXG4gICAgICByZXR1cm4gdGhpcy5jYXRhbG9ndWUuZ2V0U3R1YkRlc2NyaXB0b3IocHJvdG9TdHViVVJMKS50aGVuKChyZXN1bHQpID0+IHtcclxuXHJcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG5cclxuICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvcjogJywgZXJyb3IpO1xyXG5cclxuICAgICAgICBwcm90b3N0dWIgPSBkb21haW47XHJcbiAgICAgICAgZG9tYWluID0gb3JpZ2luRG9tYWluO1xyXG5cclxuICAgICAgICBsZXQgcmVzb3VyY2UgPSBnZXRDb25maWd1cmF0aW9uUmVzb3VyY2VzKHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ3Byb3RvY29sc3R1YicpO1xyXG4gICAgICAgIHByb3RvU3R1YlVSTCA9IHJlc291cmNlLnByZWZpeCArIGRvbWFpbiArIHJlc291cmNlLnN1ZmZpeCArIHByb3Rvc3R1YjtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ0ZhbGxiYWNrIC0+IExvYWQgUHJvdG9jb2xzdHViIGZvciBkb21haW4sICcgKyBkb21haW4gKyAnIDogJywgcHJvdG9zdHViKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jYXRhbG9ndWUuZ2V0U3R1YkRlc2NyaXB0b3IocHJvdG9TdHViVVJMKTtcclxuICAgICAgfSkudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICB9KS5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0SWRwUHJveHlEZXNjcmlwdG9yKGlkcFByb3h5VVJMKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgbGV0IGRvbWFpbjtcclxuICAgICAgbGV0IGlkcHByb3h5O1xyXG4gICAgICBsZXQgcHJvdG9TdHViVVJMO1xyXG5cclxuICAgICAgbGV0IG9yaWdpbkRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodGhpcy5ydW50aW1lVVJMKTtcclxuICAgICAgbGV0IG9yaWdpbkRvbWFpbiA9IG9yaWdpbkRpdmlkZWRVUkwuZG9tYWluO1xyXG5cclxuICAgICAgaWYgKGlkcFByb3h5VVJMLmluY2x1ZGVzKCc6Ly8nKSkge1xyXG4gICAgICAgIGxldCBkaXZpZGVkVVJMID0gZGl2aWRlVVJMKGlkcFByb3h5VVJMKTtcclxuICAgICAgICBkb21haW4gPSBkaXZpZGVkVVJMLmRvbWFpbjtcclxuICAgICAgICBsZXQgcGF0aCA9IGRpdmlkZWRVUkwuaWRlbnRpdHk7XHJcbiAgICAgICAgaWYgKHBhdGgpXHJcbiAgICAgICAgICBpZHBwcm94eSA9IHBhdGguc3Vic3RyaW5nKHBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZHBwcm94eSA9ICdkZWZhdWx0JztcclxuICAgICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZHBwcm94eSA9ICdkZWZhdWx0JztcclxuICAgICAgICBkb21haW4gPSBpZHBQcm94eVVSTDtcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICAgIGxldCByZXNvdXJjZSA9IGdldENvbmZpZ3VyYXRpb25SZXNvdXJjZXModGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiwgJ2NhdGFsb2d1ZVVSTHMnLCAnaWRwUHJveHknKTtcclxuXHJcbiAgICAgIGlkcFByb3h5VVJMID0gcmVzb3VyY2UucHJlZml4ICsgZG9tYWluICsgcmVzb3VyY2Uuc3VmZml4ICsgaWRwcHJveHk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdMb2FkIElkcCBQcm94eSBmb3IgZG9tYWluLCAnICsgZG9tYWluICsgJyA6ICcsIGlkcFByb3h5VVJMKTtcclxuICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCkudGhlbigocmVzdWx0KSA9PiB7XHJcblxyXG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuXHJcbiAgICAgIH0pLmNhdGNoKCgpID0+IHtcclxuXHJcbiAgICAgICAgaWRwcHJveHkgPSBkb21haW47XHJcbiAgICAgICAgZG9tYWluID0gb3JpZ2luRG9tYWluO1xyXG5cclxuICAgICAgICBpZHBQcm94eVVSTCA9IGJ1aWxkVVJMKHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sICdjYXRhbG9ndWVVUkxzJywgJ2lkcFByb3h5JywgaWRwcHJveHkpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygnTG9hZCBJZHAgUHJveHkgZm9yIGRvbWFpbiwgJyArIGRvbWFpbiArICcgOiAnLCBpZHBQcm94eVVSTCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2F0YWxvZ3VlLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTCk7XHJcbiAgICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgIHJlamVjdChyZWFzb24pO1xyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IERlc2NyaXB0b3JzO1xyXG4iLCJpbXBvcnQge2RpdmlkZVVSTCwgZW1wdHlPYmplY3R9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcbmltcG9ydCBBZGRyZXNzQWxsb2NhdGlvbiBmcm9tICcuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uJztcblxuY2xhc3MgTG9hZGVyIHtcblxuICBjb25zdHJ1Y3RvcihydW50aW1lVVJMLCBydW50aW1lQ29uZmlndXJhdGlvbiwgcnVudGltZURlc2NyaXB0b3JzSW5zdGFuY2UpIHtcbiAgICBpZiAoIXJ1bnRpbWVDb25maWd1cmF0aW9uKSB0aHJvdyAgIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIFRoZSBkZXNjcmlwdG9yIG5lZWQgdG8ga25vdyB0aGUgcnVudGltZSBjb25maWd1cmF0aW9uJyk7XG4gICAgaWYgKCFydW50aW1lRGVzY3JpcHRvcnNJbnN0YW5jZSkgdGhyb3cgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBUaGUgZGVzY3JpcHRvciBuZWVkIHRvIGtub3cgdGhlIHJ1bnRpbWUgRGVzY3JpcHRvciBpbnN0YW5jZScpO1xuXG4gICAgdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbiA9IHJ1bnRpbWVDb25maWd1cmF0aW9uO1xuICAgIHRoaXMuZGVzY3JpcHRvcnMgPSBydW50aW1lRGVzY3JpcHRvcnNJbnN0YW5jZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgcnVudGltZSB1cmxcbiAgICogQHBhcmFtICB7c3RyaW5nfSB2YWx1ZSBydW50aW1lVVJMXG4gICAqL1xuICBzZXQgcnVudGltZVVSTCh2YWx1ZSkge1xuICAgIHRoaXMuX3J1bnRpbWVVUkwgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcnVudGltZSB1cmxcbiAgICogQHJldHVybiB7c3RyaW5nfSB2YWx1ZSBydW50aW1lVVJMXG4gICAqL1xuICBnZXQgcnVudGltZVVSTCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZVVSTDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgUmVnaXN0cnkgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge1JlZ2lzdHJ5fSB2YWx1ZSBSZWdpc3RyeSBDb21wb25lbnRcbiAgICovXG4gIHNldCByZWdpc3RyeSh2YWx1ZSkge1xuICAgIHRoaXMuX3JlZ2lzdHJ5ID0gdmFsdWU7XG5cbiAgICAvLyBJbnN0YWxsIEFkZHJlc3NBbGxvY2F0aW9uXG4gICAgbGV0IGFkZHJlc3NBbGxvY2F0aW9uID0gbmV3IEFkZHJlc3NBbGxvY2F0aW9uKHRoaXMuX3J1bnRpbWVVUkwsIHRoaXMuX21lc3NhZ2VzQnVzLCB0aGlzLl9yZWdpc3RyeSk7XG4gICAgdGhpcy5fYWRkcmVzc0FsbG9jYXRpb24gPSBhZGRyZXNzQWxsb2NhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgUmVnaXN0cnkgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge1JlZ2lzdHJ5fSBSZWdpc3RyeSBjb21wb25lbnRcbiAgICovXG4gIGdldCByZWdpc3RyeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVnaXN0cnk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IE1lc3NhZ2UgQnVzIGNvbXBvbmVudFxuICAgKiBAcGFyYW0gIHtNZXNzYWdlQnVzfSB2YWx1ZSBNZXNzYWdlIGJ1cyBjb21wb25lbnRcbiAgICovXG4gIHNldCBtZXNzYWdlQnVzKHZhbHVlKSB7XG4gICAgdGhpcy5fbWVzc2FnZXNCdXMgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgTWVzc2FnZSBCdXMgY29tcG9uZW50XG4gICAqIEByZXR1cm4ge01lc3NhZ2VCdXN9IE1lc3NhZ2UgQnVzIGNvbXBvbmVudFxuICAgKi9cbiAgZ2V0IG1lc3NhZ2VCdXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21lc3NhZ2VzQnVzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBSdW50aW1lIEZhY3RvcnkgY29tcG9uZW50XG4gICAqIEBwYXJhbSAge3J1bnRpbWVGYWN0b3J5fSB2YWx1ZSBGYWN0b3J5IGluY2x1ZGVzIHRoZSBzcGVjaWZpYyBpbXBsZW1lbnRhdGlvbnMgZm9yIGVhY2ggZW52aXJvbm1lbnRcbiAgICovXG4gIHNldCBydW50aW1lRmFjdG9yeSh2YWx1ZSkge1xuICAgIHRoaXMuX3J1bnRpbWVGYWN0b3J5ID0gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnRcbiAgICogQHJldHVybiB7cnVudGltZUZhY3Rvcnl9IFJ1bnRpbWUgRmFjdG9yeSBjb21wb25lbnRcbiAgICovXG4gIGdldCBydW50aW1lRmFjdG9yeSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcnVudGltZUZhY3Rvcnk7XG4gIH1cblxuICAvKipcbiAgKiBEZXBsb3kgSHlwZXJ0eSBmcm9tIENhdGFsb2d1ZSBVUkxcbiAgKiBAcGFyYW0gIHtVUkwuSHlwZXJ0eUNhdGFsb2d1ZVVSTH0gICAgaHlwZXJ0eSBoeXBlcnR5RGVzY3JpcHRvciB1cmw7XG4gICovXG4gIGxvYWRIeXBlcnR5KGh5cGVydHlEZXNjcmlwdG9yVVJMKSB7XG5cbiAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghaHlwZXJ0eURlc2NyaXB0b3JVUkwpIHRocm93IG5ldyAgIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIEh5cGVydHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuICAgICAgbGV0IF9oeXBlcnR5VVJMO1xuICAgICAgbGV0IF9oeXBlcnR5U2FuZGJveDtcbiAgICAgIGxldCBfaHlwZXJ0eURlc2NyaXB0b3I7XG4gICAgICBsZXQgX2h5cGVydHlTb3VyY2VQYWNrYWdlO1xuICAgICAgbGV0IGhhdmVFcnJvciA9IGZhbHNlO1xuXG4gICAgICBsZXQgZXJyb3JSZWFzb24gPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBTb21ldGhpbmcgZmFpbGVkIG9uIHRoZSBkZXBsb3kgaHlwZXJ0eTogJywgcmVhc29uKTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICBsZXQgaGFuZGxlRXJyb3IgPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGhhdmVFcnJvciA9IHRydWU7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgLy8gR2V0IEh5cGVydHkgZGVzY3JpcHRvclxuICAgICAgLy8gVE9ETzogdGhlIHJlcXVlc3QgTW9kdWxlIHNob3VsZCBiZSBjaGFuZ2VkLFxuICAgICAgLy8gYmVjYXVzZSBhdCB0aGlzIG1vbWVudCBpdCBpcyBpbmNvbXBhdGlibGUgd2l0aCBub2RlanM7XG4gICAgICAvLyBQcm9iYWJseSB3ZSBuZWVkIHRvIHBhc3MgYSBmYWN0b3J5IGxpa2Ugd2UgZG8gZm9yIHNhbmRib3hlcztcbiAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAtLS0tLS0tLS0tLS0tLS0tLS0gSHlwZXJ0eSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSBHZXQgaHlwZXJ0eSBkZXNjcmlwdG9yIGZvciA6JywgaHlwZXJ0eURlc2NyaXB0b3JVUkwpO1xuICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRvcnMuZ2V0SHlwZXJ0eURlc2NyaXB0b3IoaHlwZXJ0eURlc2NyaXB0b3JVUkwpXG4gICAgICAudGhlbigoaHlwZXJ0eURlc2NyaXB0b3IpID0+IHtcbiAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgd2UgaGF2ZSBjb21wbGV0ZWQgXCJzdGVwIDIgYW5kIDNcIiBhcyBzaG93biBpbiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAxOiByZXR1cm4gaHlwZXJ0eSBkZXNjcmlwdG9yJyk7XG5cbiAgICAgICAgLy8gaHlwZXJ0eSBjb250YWlucyB0aGUgZnVsbCBwYXRoIG9mIHRoZSBjYXRhbG9ndWUgVVJMLCBlLmcuXG4gICAgICAgIC8vIGNhdGFsb2d1ZS5yZXRoaW5rLmV1Ly53ZWxsLWtub3duLy4uLi4uLi4uLi5cbiAgICAgICAgX2h5cGVydHlEZXNjcmlwdG9yID0gaHlwZXJ0eURlc2NyaXB0b3I7XG5cbiAgICAgICAgbGV0IHNvdXJjZVBhY2thZ2VVUkwgPSBoeXBlcnR5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMO1xuXG4gICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7XG4gICAgICAgICAgcmV0dXJuIGh5cGVydHlEZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGh5cGVydHkgc291cmNlIGNvZGVcbiAgICAgICAgcmV0dXJuIHRoaXMucnVudGltZUNhdGFsb2d1ZS5nZXRTb3VyY2VQYWNrYWdlRnJvbVVSTChzb3VyY2VQYWNrYWdlVVJMKTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLnRoZW4oKHNvdXJjZVBhY2thZ2UpID0+IHtcbiAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAyOiByZXR1cm4gaHlwZXJ0eSBzb3VyY2UgY29kZScpO1xuXG4gICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIHdlIGhhdmUgY29tcGxldGVkIFwic3RlcCA0IGFuZCA1XCIgYXMgc2hvd24gaW4gaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZFxuXG4gICAgICAgIF9oeXBlcnR5U291cmNlUGFja2FnZSA9IHNvdXJjZVBhY2thZ2U7XG5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gc3RlcHMgNiAtLSA5IGFyZSBza2lwcGVkLlxuICAgICAgICAvLyBUT0RPOiBvbiByZWxlYXNlIG9mIGNvcmUgMC4yO1xuICAgICAgICAvLyBUT0RPOiBQcm9taXNlIHRvIGNoZWNrIHRoZSBwb2xpY3kgZW5naW5lXG5cbiAgICAgICAgLy8gbW9jay11cCBjb2RlO1xuICAgICAgICAvLyB0ZW1wb3JhcnkgY29kZSwgb25seVxuICAgICAgICBsZXQgcG9saWN5ID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gcG9saWN5O1xuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigocG9saWN5UmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDM6IHJldHVybiBwb2xpY3kgZW5naW5lIHJlc3VsdCcgKyBwb2xpY3lSZXN1bHQpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgNiB0byA5IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuICAgICAgICAvL1xuICAgICAgICAvLyBTdGVwcyA2IC0tIDlcbiAgICAgICAgLy8gQXMgYSByZXN1bHQgb2YgdGhlIHNpcHBlZCBzdGVwcywgd2Uga25vdyBhdCB0aGlzIHBvaW50IGlmIHdlIGV4ZWN1dGVcbiAgICAgICAgLy8gaW5TYW1lU2FuZGJveCBvciBub3QuXG4gICAgICAgIC8vXG5cbiAgICAgICAgLy8gRm9yIHRlc3RpbmcsIGp1c3QgYXNzdW1lIHdlIGV4ZWN1dGUgaW4gc2FtZSBTYW5kYm94LlxuICAgICAgICBsZXQgaW5TYW1lU2FuZGJveCA9IHRydWU7XG4gICAgICAgIGxldCBzYW5kYm94O1xuXG4gICAgICAgIGlmIChpblNhbWVTYW5kYm94KSB7XG5cbiAgICAgICAgICAvLyB0aGlzIGRvbid0IG5lZWQgYmUgYSBQcm9taXNlO1xuICAgICAgICAgIHNhbmRib3ggPSB0aGlzLnJlZ2lzdHJ5LmdldEFwcFNhbmRib3goKTtcblxuICAgICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTEgaGVyZS5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwoaHlwZXJ0eURlc2NyaXB0b3JVUkwpLmRvbWFpbjtcblxuICAgICAgICAgIC8vIGdldFNhbmRib3gsIHRoaXMgd2lsbCByZXR1cm4gYSBwcm9taXNlO1xuICAgICAgICAgIHNhbmRib3ggPSB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNhbmRib3ggb3Igb25lIHByb21pc2UgdG8gZ2V0U2FuZGJveDtcbiAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgIC50aGVuKChzYW5kYm94KSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDQ6IHJldHVybiB0aGUgc2FuZGJveCcsIHNhbmRib3gpO1xuXG4gICAgICAgIC8vIFJldHVybiB0aGUgc2FuZGJveCBpbmRlcGVudGVseSBpZiBpdCBydW5uaW5nIGluIHRoZSBzYW1lIHNhbmRib3ggb3Igbm90XG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTQgaGVyZS5cbiAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICB9LCAocmVhc29uKSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS4gIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIDQuMTogVHJ5IHRvIHJlZ2lzdGVyIGEgbmV3IHNhbmRib3gnKTtcblxuICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBoeXBlcnR5IGRlc2NyaXB0b3IgdXJsO1xuICAgICAgICAvLyBNYWtlIFN0ZXBzIHh4eCAtLS0geHh4XG4gICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBTYW5kYm94XG5cbiAgICAgICAgbGV0IGh5cGVydHlDYXBhYmlsaXRpZXMgPSB7fTtcbiAgICAgICAgaWYgKF9oeXBlcnR5RGVzY3JpcHRvciAmJiBfaHlwZXJ0eURlc2NyaXB0b3IuaGFzT3duUHJvcGVydHkoJ2NhcGFiaWxpdGllcycpKSB7XG4gICAgICAgICAgaHlwZXJ0eUNhcGFiaWxpdGllcyA9IF9oeXBlcnR5RGVzY3JpcHRvci5zdHViQ2FwYWJpbGl0aWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goaHlwZXJ0eUNhcGFiaWxpdGllcykudGhlbigoc2FuZGJveCkgPT4ge1xuXG4gICAgICAgICAgc2FuZGJveC5hZGRMaXN0ZW5lcignKicsIChtc2cpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNhbmRib3g7XG4gICAgICAgIH0pO1xuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA1OiByZXR1cm4gc2FuZGJveCBhbmQgcmVnaXN0ZXInKTtcblxuICAgICAgICBfaHlwZXJ0eVNhbmRib3ggPSBzYW5kYm94O1xuXG4gICAgICAgIGxldCBudW1iZXJPZkFkZHJlc3NlcyA9IDE7XG4gICAgICAgIHJldHVybiB0aGlzLl9hZGRyZXNzQWxsb2NhdGlvbi5jcmVhdGUodGhpcy5fcmVnaXN0cnkuX2RvbWFpbiwgbnVtYmVyT2ZBZGRyZXNzZXMsIF9oeXBlcnR5RGVzY3JpcHRvciwgJ2h5cGVydHknKTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLnRoZW4oKGFkZHJlc3NlcykgPT4ge1xuICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA2OiByZXR1cm4gdGhlIGFkZHJlc3NlcyBmb3IgdGhlIGh5cGVydHknKTtcblxuICAgICAgICAvLyBSZWdpc3RlciBoeXBlcnR5XG4gICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LnJlZ2lzdGVySHlwZXJ0eShfaHlwZXJ0eVNhbmRib3gsIGh5cGVydHlEZXNjcmlwdG9yVVJMLCBfaHlwZXJ0eURlc2NyaXB0b3IsIGFkZHJlc3Nlcyk7XG4gICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgIC50aGVuKChoeXBlcnR5VVJMKSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDc6IEh5cGVydHkgdXJsLCBhZnRlciByZWdpc3RlciBoeXBlcnR5JywgaHlwZXJ0eVVSTCk7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAxNiBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy5cbiAgICAgICAgX2h5cGVydHlVUkwgPSBoeXBlcnR5VVJMO1xuXG4gICAgICAgIC8vIEV4dGVuZCBvcmlnaW5hbCBoeXBlcnR5IGNvbmZpZ3VyYXRpb247XG4gICAgICAgIGxldCBjb25maWd1cmF0aW9uID0ge307XG4gICAgICAgIGlmICghZW1wdHlPYmplY3QoX2h5cGVydHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKHt9LCBKU09OLnBhcnNlKF9oeXBlcnR5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9oeXBlcnR5RGVzY3JpcHRvci5jb25maWd1cmF0aW9uO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSB0aGlzLl9ydW50aW1lVVJMO1xuXG4gICAgICAgIC8vIFdlIHdpbGwgZGVwbG95IHRoZSBjb21wb25lbnQgLSBzdGVwIDE3IG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIF9oeXBlcnR5U2FuZGJveC5kZXBsb3lDb21wb25lbnQoX2h5cGVydHlTb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUsIF9oeXBlcnR5VVJMLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpO1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAudGhlbigoZGVwbG95Q29tcG9uZW50U3RhdHVzKSA9PiB7XG4gICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDg6IERlcGxveSBjb21wb25lbnQgc3RhdHVzIGZvciBoeXBlcnR5OiAnLCBkZXBsb3lDb21wb25lbnRTdGF0dXMpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMTkgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktaHlwZXJ0eS5tZCByaWdodCBub3cuXG5cbiAgICAgICAgLy8gQWRkIHRoZSBtZXNzYWdlIGJ1cyBsaXN0ZW5lciB0byB0aGUgYXBwU2FuZGJveCBvciBoeXBlcnRTYW5kYm94O1xuICAgICAgICB0aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX2h5cGVydHlVUkwsIChtc2cpID0+IHtcbiAgICAgICAgICBfaHlwZXJ0eVNhbmRib3gucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCAyMCBvZiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1oeXBlcnR5Lm1kIHJpZ2h0IG5vdy5cbiAgICAgICAgbGV0IGh5cGVydHkgPSB7XG4gICAgICAgICAgcnVudGltZUh5cGVydHlVUkw6IF9oeXBlcnR5VVJMLFxuICAgICAgICAgIHN0YXR1czogZGVwbG95Q29tcG9uZW50U3RhdHVzXG4gICAgICAgIH07XG5cbiAgICAgICAgcmVzb2x2ZShoeXBlcnR5KTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDIxIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LWh5cGVydHkubWQgcmlnaHQgbm93LlxuICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcbiAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgLmNhdGNoKGVycm9yUmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAqIERlcGxveSBTdHViIGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW5cbiAgKiBAcGFyYW0gIHtPYmplY3R9ICAgICAgcDJwQ29uZmlnICAgICAgIGNvbmZpZ3VyYXRpb24gb2YgcDJwXG4gICovXG4gIGxvYWRTdHViKHByb3Rvc3R1YlVSTCwgcDJwQ29uZmlnKSB7XG5cbiAgICBpZiAoIXRoaXMuX3JlYWR5VG9Vc2UoKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICghcHJvdG9zdHViVVJMKSB0aHJvdyBuZXcgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXVByb3RvU3R1YiBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAvLyB0byBhbmFseXNlIGlmIGRvbWFpbiBmb3IgcDJwSGFuZGxlcnMgc2hvdWxkIGJlIHNvbWV0aGluZyBlbHNlIGFuZCBub3QgdGhlIGRlZmF1bHQgZG9tYWluIGl0c2VsZlxuXG4gICAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKHByb3Rvc3R1YlVSTCkuZG9tYWluO1xuXG4gICAgICBpZiAoIWRvbWFpbikge1xuICAgICAgICBkb21haW4gPSBwcm90b3N0dWJVUkw7XG4gICAgICB9XG5cbiAgICAgIGxldCBfc3R1YlNhbmRib3g7XG4gICAgICBsZXQgX3N0dWJEZXNjcmlwdG9yO1xuICAgICAgbGV0IF9ydW50aW1lUHJvdG9TdHViVVJMO1xuICAgICAgbGV0IF9zdHViU291cmNlUGFja2FnZTtcbiAgICAgIGxldCBoYXZlRXJyb3IgPSBmYWxzZTtcbiAgICAgIGxldCBzdHViSWQ7XG5cbiAgICAgIGxldCBlcnJvclJlYXNvbiA9IChyZWFzb24pID0+IHtcbiAgICAgICAgY29uc29sZS4gIEVycm9yKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIHByb3RvY29sc3R1YjogJywgcmVhc29uKTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICBsZXQgaGFuZGxlRXJyb3IgPSAocmVhc29uKSA9PiB7XG4gICAgICAgIGhhdmVFcnJvciA9IHRydWU7XG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfTtcblxuICAgICAgLy8gRGlzY292ZXIgUHJvdG9jb2wgU3R1YlxuICAgICAgbGV0IGRpc2NvdmVyU3R1YjtcbiAgICAgIGxldCBpc1AyUEhhbmRsZXIgPSBmYWxzZTtcbiAgICAgIGxldCBpc1AyUFJlcXVlc3RlciA9IGZhbHNlO1xuXG4gICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl0gc3RhcnRpbmcgbG9hZGluZyAnLCBwcm90b3N0dWJVUkwsICcgcDJwY29uZmlnICcsIHAycENvbmZpZyk7XG4gICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl1EaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgUHJvdG9TdHViIGZvciBkb21haW46ICcsIGRvbWFpbik7XG5cbiAgICAgIC8vIHN0ZXAgMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChwMnBDb25maWcpIHtcblxuICAgICAgICAgIGlmIChwMnBDb25maWcuaGFzT3duUHJvcGVydHkoJ2lzSGFuZGxlclN0dWInKSAmJiBwMnBDb25maWcuaXNIYW5kbGVyU3R1Yikge1xuICAgICAgICAgICAgLy8gc3RlcCA2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgaXNQMlBIYW5kbGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHN0dWJJZCA9IHRoaXMucnVudGltZVVSTDtcbiAgICAgICAgICAgIGRpc2NvdmVyU3R1YiA9IHRoaXMucmVnaXN0cnkuZGlzY292ZXJQMlBTdHViKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzUDJQUmVxdWVzdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBwMnBIYW5kbGVyUnVudGltZVVSTCA9IHAycENvbmZpZy5yZW1vdGVSdW50aW1lVVJMO1xuICAgICAgICAgICAgc3R1YklkID0gcDJwSGFuZGxlclJ1bnRpbWVVUkw7XG5cbiAgICAgICAgICAgIC8vIHN0ZXAgNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgICAgLy8gc3RlcCA1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgICAgZGlzY292ZXJTdHViID0gdGhpcy5yZWdpc3RyeS5kaXNjb3ZlclAyUFN0dWIocDJwSGFuZGxlclJ1bnRpbWVVUkwpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHN0ZXAgMyBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBzdHViSWQgPSBkb21haW47XG4gICAgICAgICAgZGlzY292ZXJTdHViID0gdGhpcy5yZWdpc3RyeS5kaXNjb3ZlclByb3Rvc3R1Yihkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXMgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTEuIFByb3RvIFN0dWIgRGlzY292ZXJlZCBmb3IgJywgcHJvdG9zdHViVVJMLCAnOiAnLCBkaXNjb3ZlclN0dWIpO1xuXG4gICAgICAgIC8vIHN0ZXAgMjMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgIHJlc29sdmUoZGlzY292ZXJTdHViKTtcbiAgICAgICAgY29uc29sZS5pbmZvKCcgW1J1bnRpbWUuTG9hZGVyXS0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuXG4gICAgICB9XG5cbiAgICAgIGNhdGNoIChyZWFzb24pIHtcblxuICAgICAgICAvLyBpcyBub3QgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTEuIFByb3RvIFN0dWIgbm90IGZvdW5kICcgKyByZWFzb24pO1xuXG4gICAgICAgIC8vIHN0ZXAgOCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgdGhpcy5kZXNjcmlwdG9ycy5nZXRTdHViRGVzY3JpcHRvcihwcm90b3N0dWJVUkwpXG4gICAgICAgIC50aGVuKChzdHViRGVzY3JpcHRvcikgPT4ge1xuXG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTIuIHJldHVybiB0aGUgUHJvdG9TdHViIGRlc2NyaXB0b3InKTtcblxuICAgICAgICAgIC8vIHN0ZXAgOSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBfc3R1YkRlc2NyaXB0b3IgPSBzdHViRGVzY3JpcHRvcjtcblxuICAgICAgICAgIGxldCBzb3VyY2VQYWNrYWdlVVJMID0gc3R1YkRlc2NyaXB0b3Iuc291cmNlUGFja2FnZVVSTDtcblxuICAgICAgICAgIGlmIChzb3VyY2VQYWNrYWdlVVJMID09PSAnL3NvdXJjZVBhY2thZ2UnKSB7XG4gICAgICAgICAgICByZXR1cm4gc3R1YkRlc2NyaXB0b3Iuc291cmNlUGFja2FnZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzdGVwIDEwIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIHJldHVybiB0aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0U291cmNlUGFja2FnZUZyb21VUkwoc291cmNlUGFja2FnZVVSTCk7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAuY2F0Y2goZXJyb3JSZWFzb24pXG4gICAgICAgIC50aGVuKChzdHViU291cmNlUGFja2FnZSkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIC8vIHN0ZXAgMTEgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdMy4gcmV0dXJuIHRoZSBQcm90b1N0dWIgU291cmNlIENvZGUnKTtcbiAgICAgICAgICBfc3R1YlNvdXJjZVBhY2thZ2UgPSBzdHViU291cmNlUGFja2FnZTtcblxuICAgICAgICAgIC8vIHRoaXMgd2lsbCByZXR1cm4gdGhlIHNhbmRib3ggb3Igb25lIHByb21pc2UgdG8gZ2V0U2FuZGJveDtcbiAgICAgICAgICAvLyBzdGVwIDEyIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHN0dWJTYW5kYm94KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgLy8gc3RlcCAxNSBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlci5sb2FkU3R1Yl00LiBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlcmVkIHRoZW4gcmV0dXJuIHRoZSBzYW5kYm94ICcsIHN0dWJTYW5kYm94KTtcblxuICAgICAgICAgIF9zdHViU2FuZGJveCA9IHN0dWJTYW5kYm94O1xuICAgICAgICAgIHJldHVybiBzdHViU2FuZGJveDtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAvLyBzdGVwIDEzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXTUuIFNhbmRib3ggd2FzIG5vdCBmb3VuZCwgY3JlYXRpbmcgYSBuZXcgb25lICcsIHJlYXNvbik7XG5cbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGUgc2FuZGJveCBpcyByZWdpc3RlZCBmb3IgdGhpcyBzdHViIGRlc2NyaXB0b3IgdXJsO1xuXG4gICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIGRlYnVnLCBpdCBzZWVtcyBSdW50aW1lQ2F0YWxvZ3VlIGRvZXMgbm90IHN1cHBvcnQgeWV0IGNvbnN0cmFpbnRzLiBJdCBhcHBlYXJzIGVtcHR5ISEhIVxuXG4gICAgICAgICAgbGV0IHN0dWJDYXBhYmlsaXRpZXMgPSB7fTtcbiAgICAgICAgICBpZiAoX3N0dWJEZXNjcmlwdG9yICYmIF9zdHViRGVzY3JpcHRvci5oYXNPd25Qcm9wZXJ0eSgnY29uc3RyYWludHMnKSkge1xuICAgICAgICAgICAgc3R1YkNhcGFiaWxpdGllcyA9IF9zdHViRGVzY3JpcHRvci5zdHViQ2FwYWJpbGl0aWVzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHN0ZXAgMTQgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgcmV0dXJuIHRoaXMuX3J1bnRpbWVGYWN0b3J5LmNyZWF0ZVNhbmRib3goc3R1YkNhcGFiaWxpdGllcykudGhlbigoc2FuZGJveCkgPT4ge1xuXG4gICAgICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgKG1zZykgPT4ge1xuICAgICAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gc2FuZGJveDtcbiAgICAgICAgICB9KTtcblxuICAgICAgICB9KVxuICAgICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgIC8vIHN0ZXAgMTYgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTtcblxuICAgICAgICAgIF9zdHViU2FuZGJveCA9IHNhbmRib3g7XG5cbiAgICAgICAgICAvLyB3ZSBuZWVkIHJlZ2lzdGVyIHN0dWIgb24gcmVnaXN0cnkgLSBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpc3RyeS5yZWdpc3RlclN0dWIoX3N0dWJTYW5kYm94LCBzdHViSWQsIHAycENvbmZpZywgcHJvdG9zdHViVVJMLCBfc3R1YkRlc2NyaXB0b3IpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHJ1bnRpbWVQcm90b1N0dWIpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAvLyBzdGVwIDIzIGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSA3LiByZXR1cm4gdGhlIHJ1bnRpbWUgcHJvdG9zdHViIHVybDogJywgcnVudGltZVByb3RvU3R1Yik7XG5cbiAgICAgICAgICBfcnVudGltZVByb3RvU3R1YlVSTCA9IHJ1bnRpbWVQcm90b1N0dWIudXJsO1xuXG4gICAgICAgICAgLy8gRXh0ZW5kIG9yaWdpbmFsIGh5cGVydHkgY29uZmlndXJhdGlvbjtcbiAgICAgICAgICBsZXQgY29uZmlndXJhdGlvbiA9IHt9O1xuICAgICAgICAgIGlmICghZW1wdHlPYmplY3QoX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgSlNPTi5wYXJzZShfc3R1YkRlc2NyaXB0b3IuY29uZmlndXJhdGlvbikpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gX3N0dWJEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHAycENvbmZpZykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oY29uZmlndXJhdGlvbiwgSlNPTi5wYXJzZShwMnBDb25maWcpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oY29uZmlndXJhdGlvbiwgcDJwQ29uZmlnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyByZXF1aXJlZCBmb3IgcHJvdG9zdHViIHNlc3Npb25cblxuICAgICAgICAgICBjb25maWd1cmF0aW9uLnJ1bnRpbWVVUkwgPSB0aGlzLl9ydW50aW1lVVJMO1xuXG4gICAgICAgICAgLy8gc3RlcCAyNCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIF9zdHViU2FuZGJveC5kZXBsb3lDb21wb25lbnQoX3N0dWJTb3VyY2VQYWNrYWdlLnNvdXJjZUNvZGUsIF9ydW50aW1lUHJvdG9TdHViVVJMLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLiAgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSBFcnJvciBvbiBkZXBsb3kgY29tcG9uZW50OicsIGUpO1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC50aGVuKChkZXBsb3lDb21wb25lbnRTdGF0dXMpID0+IHtcbiAgICAgICAgICBpZiAoaGF2ZUVycm9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAvLyBzdGVwIDI2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSA4OiByZXR1cm4gZGVwbG95IGNvbXBvbmVudCBmb3Igc2FuZGJveCBzdGF0dXM6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7XG5cbiAgICAgICAgICAvLyBzdGVwIDI3IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXJcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3J1bnRpbWVQcm90b1N0dWJVUkwsIChtc2cpID0+IHtcbiAgICAgICAgICAgIF9zdHViU2FuZGJveC5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gc3RlcCAyOCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcbiAgICAgICAgICBsZXQgc3R1YjtcbiAgICAgICAgICBpZiAocDJwQ29uZmlnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXSBwMnBDb25maWc6ICcsIHAycENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmIChwMnBDb25maWcuaGFzT3duUHJvcGVydHkoJ2lzSGFuZGxlclN0dWInKSkgc3R1YiA9IHRoaXMucmVnaXN0cnkucDJwSGFuZGxlclN0dWJbdGhpcy5fcnVudGltZVVSTF07XG4gICAgICAgICAgICBpZiAocDJwQ29uZmlnLmhhc093blByb3BlcnR5KCdwMnBSZXF1ZXN0ZXJTdHViJykpIHN0dWIgPSB0aGlzLnJlZ2lzdHJ5LnAycFJlcXVlc3RlclN0dWJbcDJwQ29uZmlnLnJlbW90ZVJ1bnRpbWVVUkxdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHViID0gdGhpcy5yZWdpc3RyeS5wcm90b3N0dWJzTGlzdFtkb21haW5dO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbUnVudGltZS5Mb2FkZXIubG9hZFN0dWJdIFN0dWI6ICcsIHN0dWIpO1xuICAgICAgICAgIHJlc29sdmUoc3R1Yi51cmwpO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyLmxvYWRTdHViXS0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLmNhdGNoKGVycm9yUmVhc29uKTtcblxuICAgICAgfTtcblxuICAgIH0pO1xuXG4gIH1cblxuICAvKipcbiAgKiBEZXBsb3kgaWRwUHJveHkgZnJvbSBDYXRhbG9ndWUgVVJMIG9yIGRvbWFpbiB1cmxcbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpblxuICAqL1xuXG4gIGxvYWRJZHBQcm94eShpZHBQcm94eVVSTCkge1xuXG4gICAgaWYgKCF0aGlzLl9yZWFkeVRvVXNlKCkpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIWlkcFByb3h5VVJMKSB0aHJvdyBuZXcgICBFcnJvcignW1J1bnRpbWUuTG9hZGVyXSBJZHBQcm94eSBkZXNjcmlwdG9yIHVybCBwYXJhbWV0ZXIgaXMgbmVlZGVkJyk7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICBsZXQgZG9tYWluID0gZGl2aWRlVVJMKGlkcFByb3h5VVJMKS5kb21haW47XG5cbiAgICAgIGlmICghZG9tYWluKSB7XG4gICAgICAgIGRvbWFpbiA9IGlkcFByb3h5VVJMO1xuICAgICAgfVxuXG4gICAgICBsZXQgX3Byb3h5U2FuZGJveDtcbiAgICAgIGxldCBfcHJveHlEZXNjcmlwdG9yO1xuICAgICAgbGV0IF9ydW50aW1lSWRwUHJveHlVUkw7XG4gICAgICBsZXQgX3Byb3h5U291cmNlUGFja2FnZTtcbiAgICAgIGxldCBoYXZlRXJyb3IgPSBmYWxzZTtcblxuICAgICAgbGV0IGVycm9yUmVhc29uID0gKHJlYXNvbikgPT4ge1xuICAgICAgICBjb25zb2xlLiAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gU29tZXRoaW5nIGZhaWxlZCBvbiB0aGUgZGVwbG95IG9mIElkcFByb3h5OiAnLCByZWFzb24pO1xuICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgIH07XG5cbiAgICAgIGxldCBoYW5kbGVFcnJvciA9IChyZWFzb24pID0+IHtcbiAgICAgICAgaGF2ZUVycm9yID0gdHJ1ZTtcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICB9O1xuXG4gICAgICAvLyBEaXNjb3ZlciBJRFBQcm94eVxuICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIC0tLS0tLS0tLS0tLS0tLS0tLS0gSURQIFByb3h5IERlcGxveSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4nKTtcbiAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSBEaXNjb3ZlciBvciBDcmVhdGUgYSBuZXcgSWRwUHJveHkgZm9yIGRvbWFpbi9VUkw6ICcsIGRvbWFpbik7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBydW50aW1lSWRwUHJveHlVUkwgPSB0aGlzLnJlZ2lzdHJ5LmRpc2NvdmVySWRwUHJveHkoZG9tYWluKTtcbiAgICAgICAgLy8gSXMgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAxLiBJRFBQcm94eSBEaXNjb3ZlcmVkOiAnLCBydW50aW1lSWRwUHJveHlVUkwpO1xuXG4gICAgICAgIC8vIHdlIGhhdmUgY29tcGxldGVkIHN0ZXAgMiBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICBsZXQgaWRwUHJveHkgPSB0aGlzLnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtkb21haW5dO1xuICAgICAgICBjb25zb2xlLmxvZygnRGVwbG95ZWQ6ICcsIGlkcFByb3h5KTtcblxuICAgICAgICByZXNvbHZlKGlkcFByb3h5KTtcbiAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIC0tLS0tLS0tLS0tLS0tLS0tLS0gRU5EIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbicpO1xuICAgICAgfVxuXG4gICAgICBjYXRjaChyZWFzb24pIHtcblxuICAgICAgICAvLyBpcyBub3QgcmVnaXN0ZWQ/XG4gICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSAxLiBJZHBQcm94eSBub3QgZm91bmQ6JywgcmVhc29uKTtcblxuICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIDMgaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgLy8gd2UgbmVlZCB0byBnZXQgUHJvdG9TdHViIGRlc2NyaXB0b3Igc3RlcCA0IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICB0aGlzLmRlc2NyaXB0b3JzLmdldElkcFByb3h5RGVzY3JpcHRvcihpZHBQcm94eVVSTClcbiAgICAgICAgLnRoZW4oKHByb3h5RGVzY3JpcHRvcikgPT4ge1xuXG4gICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZS5Mb2FkZXJdIDIuIFJldHVybiB0aGUgSURQUHJveHkgZGVzY3JpcHRvcicpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA1IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIF9wcm94eURlc2NyaXB0b3IgPSBwcm94eURlc2NyaXB0b3I7XG5cbiAgICAgICAgICBsZXQgc291cmNlUGFja2FnZVVSTCA9IHByb3h5RGVzY3JpcHRvci5zb3VyY2VQYWNrYWdlVVJMO1xuXG4gICAgICAgICAgaWYgKHNvdXJjZVBhY2thZ2VVUkwgPT09ICcvc291cmNlUGFja2FnZScpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm94eURlc2NyaXB0b3Iuc291cmNlUGFja2FnZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGdldCBQcm90b1N0dWIgU291cmNlIGNvZGUgZnJvbSBkZXNjcmlwdG9yIC0gc3RlcCA2IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuICAgICAgICAgIHJldHVybiB0aGlzLnJ1bnRpbWVDYXRhbG9ndWUuZ2V0U291cmNlUGFja2FnZUZyb21VUkwoc291cmNlUGFja2FnZVVSTCk7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigoc291cmNlUGFja2FnZSkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gMy4gcmV0dXJuIHRoZSBJRFBQcm94eSBzb3VyY2UgcGFja2FnZScpO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCA3IGh0dHBzOi8vZ2l0aHViLmNvbS9yZVRISU5LLXByb2plY3QvY29yZS1mcmFtZXdvcmsvYmxvYi9tYXN0ZXIvZG9jcy9zcGVjcy9ydW50aW1lL2R5bmFtaWMtdmlldy9iYXNpY3MvZGVwbG95LXByb3Rvc3R1Yi5tZFxuXG4gICAgICAgICAgX3Byb3h5U291cmNlUGFja2FnZSA9IHNvdXJjZVBhY2thZ2U7XG5cbiAgICAgICAgICAvLyBUT0RPOiBDaGVjayBvbiBQRVAgKHBvbGljeSBFbmdpbmUpIGlmIHdlIG5lZWQgdGhlIHNhbmRib3ggYW5kIGNoZWNrIGlmIHRoZSBTYW5kYm94IEZhY3RvcnkgaGF2ZSB0aGUgY29udGV4dCBzYW5kYm94O1xuICAgICAgICAgIGxldCBwb2xpY3kgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBwb2xpY3k7XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigocG9saWN5KSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgICAgLy8gdGhpcyB3aWxsIHJldHVybiB0aGUgc2FuZGJveCBvciBvbmUgcHJvbWlzZSB0byBnZXRTYW5kYm94O1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lzdHJ5LmdldFNhbmRib3goZG9tYWluKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKHByb3h5U2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gNC4gaWYgdGhlIHNhbmRib3ggaXMgcmVnaXN0ZXJlZCB0aGVuIHJldHVybiB0aGUgc2FuZGJveCcsIHByb3h5U2FuZGJveCk7XG5cbiAgICAgICAgICBfcHJveHlTYW5kYm94ID0gcHJveHlTYW5kYm94O1xuICAgICAgICAgIHJldHVybiBwcm94eVNhbmRib3g7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA1LiBTYW5kYm94IHdhcyBub3QgZm91bmQsIGNyZWF0aW5nIGEgbmV3IG9uZScsIHJlYXNvbik7XG5cbiAgICAgICAgICBsZXQgcHJveHlDYXBhYmlsaXRpZXMgPSB7fTtcbiAgICAgICAgICBpZiAoX3Byb3h5RGVzY3JpcHRvciAmJiBfcHJveHlEZXNjcmlwdG9yLmhhc093blByb3BlcnR5KCdjYXBhYmlsaXRpZXMnKSkge1xuICAgICAgICAgICAgX3Byb3h5RGVzY3JpcHRvciA9IF9wcm94eURlc2NyaXB0b3Iuc3R1YkNhcGFiaWxpdGllcztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdGhpcy5fcnVudGltZUZhY3RvcnkuY3JlYXRlU2FuZGJveChwcm94eUNhcGFiaWxpdGllcykudGhlbigoc2FuZGJveCkgPT4ge1xuXG4gICAgICAgICAgICBzYW5kYm94LmFkZExpc3RlbmVyKCcqJywgKG1zZykgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMubWVzc2FnZUJ1cy5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBzYW5kYm94O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigoc2FuZGJveCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gNi4gcmV0dXJuIHRoZSBzYW5kYm94IGluc3RhbmNlIGFuZCByZWdpc3RlcicsIHNhbmRib3gsICd0byBkb21haW4gJywgZG9tYWluKTtcblxuICAgICAgICAgIF9wcm94eVNhbmRib3ggPSBzYW5kYm94O1xuXG4gICAgICAgICAgLy8gd2UgbmVlZCByZWdpc3RlciBzdHViIG9uIHJlZ2lzdHJ5IC0gc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkucmVnaXN0ZXJJZHBQcm94eShzYW5kYm94LCBkb21haW4pO1xuICAgICAgICB9LCBoYW5kbGVFcnJvcilcbiAgICAgICAgLnRoZW4oKHJ1bnRpbWVJZHBQcm94eVVSTCkgPT4ge1xuICAgICAgICAgIGlmIChoYXZlRXJyb3IpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gNy4gUmV0dXJuIHRoZSBydW50aW1lIElkcCBQcm94eSBVUkw6ICcsIHJ1bnRpbWVJZHBQcm94eVVSTCk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgIF9ydW50aW1lSWRwUHJveHlVUkwgPSBydW50aW1lSWRwUHJveHlVUkw7XG5cbiAgICAgICAgICAvLyBFeHRlbmQgb3JpZ2luYWwgaHlwZXJ0eSBjb25maWd1cmF0aW9uO1xuICAgICAgICAgIGxldCBjb25maWd1cmF0aW9uID0ge307XG4gICAgICAgICAgaWYgKCFlbXB0eU9iamVjdChfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbih7fSwgSlNPTi5wYXJzZShfcHJveHlEZXNjcmlwdG9yLmNvbmZpZ3VyYXRpb24pKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA9IF9wcm94eURlc2NyaXB0b3IuY29uZmlndXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uZmlndXJhdGlvbi5ydW50aW1lVVJMID0gdGhpcy5fcnVudGltZVVSTDtcblxuICAgICAgICAgIC8vIERlcGxveSBDb21wb25lbnQgc3RlcCB4eHhcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIF9wcm94eVNhbmRib3guZGVwbG95Q29tcG9uZW50KF9wcm94eVNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZSwgcnVudGltZUlkcFByb3h5VVJMLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLiAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gRXJyb3Igb24gZGVwbG95IGNvbXBvbmVudDonLCBlKTtcbiAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIGhhbmRsZUVycm9yKVxuICAgICAgICAudGhlbigoZGVwbG95Q29tcG9uZW50U3RhdHVzKSA9PiB7XG4gICAgICAgICAgaWYgKGhhdmVFcnJvcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWUuTG9hZGVyXSA4OiByZXR1cm4gZGVwbG95IGNvbXBvbmVudCBmb3Igc2FuZGJveCBzdGF0dXM6ICcsIGRlcGxveUNvbXBvbmVudFN0YXR1cyk7XG5cbiAgICAgICAgICAvLyB3ZSBoYXZlIGNvbXBsZXRlZCBzdGVwIHh4eCBodHRwczovL2dpdGh1Yi5jb20vcmVUSElOSy1wcm9qZWN0L2NvcmUtZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL2RvY3Mvc3BlY3MvcnVudGltZS9keW5hbWljLXZpZXcvYmFzaWNzL2RlcGxveS1wcm90b3N0dWIubWRcblxuICAgICAgICAgIC8vIEFkZCB0aGUgbWVzc2FnZSBidXMgbGlzdGVuZXJcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMuYWRkTGlzdGVuZXIoX3J1bnRpbWVJZHBQcm94eVVSTCwgKG1zZykgPT4ge1xuICAgICAgICAgICAgX3Byb3h5U2FuZGJveC5wb3N0TWVzc2FnZShtc2cpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgLy8gd2UgaGF2ZSBjb21wbGV0ZWQgc3RlcCB4eHggaHR0cHM6Ly9naXRodWIuY29tL3JlVEhJTkstcHJvamVjdC9jb3JlLWZyYW1ld29yay9ibG9iL21hc3Rlci9kb2NzL3NwZWNzL3J1bnRpbWUvZHluYW1pYy12aWV3L2Jhc2ljcy9kZXBsb3ktcHJvdG9zdHViLm1kXG5cbiAgICAgICAgICAvLyBMb2FkIFN0dWIgZnVuY3Rpb24gcmVzb2x2ZWQgd2l0aCBzdWNjZXNzO1xuICAgICAgICAgIC8vIGxldCBpZHBQcm94eSA9IHtcbiAgICAgICAgICAvLyAgIHJ1bnRpbWVJZHBQcm94eVVSTDogX3J1bnRpbWVJZHBQcm94eVVSTCxcbiAgICAgICAgICAvLyAgIHN0YXR1czogZGVwbG95Q29tcG9uZW50U3RhdHVzXG4gICAgICAgICAgLy8gfTtcblxuICAgICAgICAgIHRoaXMucmVnaXN0cnkuaWRwUHJveHlMaXN0W2RvbWFpbl0uc3RhdHVzID0gJ2RlcGxveWVkJztcbiAgICAgICAgICBsZXQgaWRwUHJveHkgPSB0aGlzLnJlZ2lzdHJ5LmlkcFByb3h5TGlzdFtkb21haW5dO1xuXG4gICAgICAgICAgY29uc29sZS5sb2coJ0RlcGxveWVkOiAnLCBpZHBQcm94eSk7XG5cbiAgICAgICAgICByZXNvbHZlKGlkcFByb3h5KTtcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tSdW50aW1lLkxvYWRlcl0gLS0tLS0tLS0tLS0tLS0tLS0tLSBFTkQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJyk7XG5cbiAgICAgICAgfSwgaGFuZGxlRXJyb3IpXG4gICAgICAgIC5jYXRjaChlcnJvclJlYXNvbik7XG4gICAgICB9XG5cbiAgICB9KTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHRoZSBsb2FkZXIgaXMgcmVhZHkgdG8gbG9hZCBhbGwgY29tcG9uZW50c1xuICBfcmVhZHlUb1VzZSgpIHtcblxuICAgIGxldCBzdGF0dXMgPSBmYWxzZTtcblxuICAgIGlmICghdGhpcy5fcnVudGltZVVSTCkgdGhyb3cgbmV3ICAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gVGhlIGxvYWRlciBuZWVkIHRoZSBydW50aW1lIHVybCBhZGRyZXNzJyk7XG4gICAgaWYgKCF0aGlzLl9tZXNzYWdlc0J1cykgdGhyb3cgbmV3ICAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gVGhlIGxvYWRlciBuZWVkIHRoZSBtZXNzYWdlQnVzIGNvbXBvbmVudCcpO1xuICAgIGlmICghdGhpcy5fcmVnaXN0cnkpIHRocm93IG5ldyAgIEVycm9yKCdbUnVudGltZS5Mb2FkZXJdIFRoZSBsb2FkZXIgbmVlZCB0aGUgcmVnaXN0cnkgY29tcG9uZW50Jyk7XG4gICAgaWYgKCF0aGlzLl9ydW50aW1lRmFjdG9yeSkgdGhyb3cgbmV3ICAgRXJyb3IoJ1tSdW50aW1lLkxvYWRlcl0gVGhlIGxvYWRlciBuZWVkIHRoZSBydW50aW1lIGZhY3RvcnkgY29tcG9uZW50Jyk7XG5cbiAgICBzdGF0dXMgPSB0cnVlO1xuICAgIHJldHVybiBzdGF0dXM7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBMb2FkZXI7XG4iLCIvKipcclxuKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBJTkVTQy1JRFxyXG4qIENvcHlyaWdodCAyMDE2IFFVT0JJUyBORVRXT1JLUyBTTFxyXG4qIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WXHJcbiogQ29weXJpZ2h0IDIwMTYgT1JBTkdFIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgRGV1dHNjaGUgVGVsZWtvbSBBR1xyXG4qIENvcHlyaWdodCAyMDE2IEFwaXplZVxyXG4qIENvcHlyaWdodCAyMDE2IFRFQ0hOSVNDSEUgVU5JVkVSU0lUQVQgQkVSTElOXHJcbipcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuKlxyXG4qICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbipcclxuKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4qIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKiovXHJcblxyXG5pbXBvcnQgJ2JhYmVsLXBvbHlmaWxsJztcclxuXHJcbi8vTWFpbiBkZXBlbmRlY2llc1xyXG5pbXBvcnQgUmVnaXN0cnkgZnJvbSAnLi4vcmVnaXN0cnkvUmVnaXN0cnknO1xyXG5pbXBvcnQgSWRlbnRpdHlNb2R1bGUgZnJvbSAnLi4vaWRlbnRpdHkvSWRlbnRpdHlNb2R1bGUnO1xyXG5pbXBvcnQgUEVQIGZyb20gJy4uL3BvbGljeS9QRVAnO1xyXG5pbXBvcnQgTWVzc2FnZUJ1cyBmcm9tICcuLi9idXMvTWVzc2FnZUJ1cyc7XHJcbmltcG9ydCB7IGdlbmVyYXRlR1VJRCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuXHJcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi9Mb2FkZXInO1xyXG5pbXBvcnQgRGVzY3JpcHRvcnMgZnJvbSAnLi9EZXNjcmlwdG9ycyc7XHJcblxyXG5pbXBvcnQgeyBydW50aW1lQ29uZmlndXJhdGlvbiB9IGZyb20gJy4vcnVudGltZUNvbmZpZ3VyYXRpb24nO1xyXG5pbXBvcnQgeyBydW50aW1lVXRpbHMgfSBmcm9tICcuL3J1bnRpbWVVdGlscyc7XHJcblxyXG4vLyBpbXBvcnQgR3JhcGhDb25uZWN0b3IgZnJvbSAnLi4vZ3JhcGhjb25uZWN0b3IvR3JhcGhDb25uZWN0b3InO1xyXG5cclxuaW1wb3J0IFN5bmNoZXJNYW5hZ2VyIGZyb20gJy4uL3N5bmNoZXIvU3luY2hlck1hbmFnZXInO1xyXG5pbXBvcnQgUnVudGltZUNvcmVDdHggZnJvbSAnLi4vcG9saWN5L2NvbnRleHQvUnVudGltZUNvcmVDdHgnO1xyXG4vKipcclxuICogUnVudGltZSBVc2VyIEFnZW50IEludGVyZmFjZSB3aWxsIHByb2Nlc3MgYWxsIHRoZSBkZXBlbmRlY2llcyBvZiB0aGUgY29yZSBydW50aW1lO1xyXG4gKiBAYXV0aG9yIFZpdG9yIFNpbHZhIFt2aXRvci10LXNpbHZhQHRlbGVjb20ucHRdXHJcbiAqIEB2ZXJzaW9uIDAuNC4wXHJcbiAqXHJcbiAqIEBwcm9wZXJ0eSB7cnVudGltZUZhY3Rvcnl9IHJ1bnRpbWVGYWN0b3J5IC0gU3BlY2lmaWMgaW1wbGVtZW50YXRpb24gZm9yIGFsbCBlbnZpcm9ubWVudHM7XHJcbiAqIEBwcm9wZXJ0eSB7UnVudGltZUNhdGFsb2d1ZX0gcnVudGltZUNhdGFsb2d1ZSAtIENhdGFsb2d1ZSBvZiBjb21wb25lbnRzIGNhbiBiZSBpbnN0YWxsZWQ7XHJcbiAqIEBwcm9wZXJ0eSB7cnVudGltZVVSTH0gcnVudGltZVVSTCAtIFRoaXMgaWRlbnRpZnkgdGhlIGNvcmUgcnVudGltZSwgc2hvdWxkIGJlIHVuaXF1ZTtcclxuICogQHByb3BlcnR5IHtJZGVudGl0eU1vZHVsZX0gaWRlbnRpdHlNb2R1bGUgLSBJZGVudGl0eSBNb2R1bGU7XHJcbiAqIEBwcm9wZXJ0eSB7UEVQfSBwb2xpY3lFbmdpbmUgLSBQb2xpY3kgRW5naW5lIE1vZHVsZTtcclxuICogQHByb3BlcnR5IHtSZWdpc3RyeX0gcmVnaXN0cnkgLSBSZWdpc3RyeSBNb2R1bGU7XHJcbiAqIEBwcm9wZXJ0eSB7TWVzc2FnZUJ1c30gbWVzc2FnZUJ1cyAtIE1lc3NhZ2UgQnVzIGlzIHVzZWQgbGlrZSBhIHJvdXRlciB0byByZWRpcmVjdCB0aGUgbWVzc2FnZXMgZnJvbSBvbmUgY29tcG9uZW50IHRvIG90aGVyKHMpXHJcbiAqIEBwcm9wZXJ0eSB7R3JhcGhDb25uZWN0b3J9IGdyYXBoQ29ubmVjdG9yIC0gR3JhcGggQ29ubmVjdG9yIGhhbmRsaW5nIEdVSUQgYW5kIGNvbnRhY3RzXHJcbiAqL1xyXG5jbGFzcyBSdW50aW1lVUEge1xyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgUnVudGltZSBVc2VyIEFnZW50XHJcbiAgICogQHBhcmFtIHtkZXNjcmlwdG9yfSBydW50aW1lRGVzY3JpcHRvciAtIHBhc3MgYWxsIHRoZSBoeXBlcnR5IHJ1bnRpbWUgZGVzY3JpcHRvclxyXG4gICAqIEBwYXJhbSB7cnVudGltZUZhY3Rvcnl9IHJ1bnRpbWVGYWN0b3J5IC0gU3BlY2lmaWMgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBlbnZpcm9ubWVudCB3aGVyZSB0aGUgY29yZSBydW50aW1lIHdpbGwgcnVuO1xyXG4gICAqIEBwYXJhbSB7ZG9tYWlufSBkb21haW5VUkwgLSBzcGVjaWZ5IHRoZSBkb21haW4gYmFzZSBmb3IgdGhlIHJ1bnRpbWU7XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocnVudGltZURlc2NyaXB0b3IsIHJ1bnRpbWVGYWN0b3J5LCBkb21haW4pIHtcclxuICAgIGlmICghcnVudGltZURlc2NyaXB0b3IpIHRocm93IG5ldyBFcnJvcignVGhlIHJ1bnRpbWUgZGVzY3JpcHRvciBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcclxuICAgIGlmICghcnVudGltZUZhY3RvcnkpIHRocm93IG5ldyBFcnJvcignVGhlIHNhbmRib3ggZmFjdG9yeSBpcyBhIG5lZWRlZCBwYXJhbWV0ZXInKTtcclxuICAgIGlmICghZG9tYWluKSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRoZSBkb21haW4gb2YgcnVudGltZScpO1xyXG5cclxuICAgIC8vIENvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggaW5mb3JtYXRpb24gcmVsYXRlZCB3aXRoIHNlcnZlcnNcclxuICAgIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKHtkb21haW46IGRvbWFpbn0sIHJ1bnRpbWVDb25maWd1cmF0aW9uKTtcclxuICAgIHRoaXMucnVudGltZUZhY3RvcnkgPSBydW50aW1lRmFjdG9yeTtcclxuICAgIHRoaXMucnVudGltZUNhdGFsb2d1ZSA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTtcclxuXHJcbiAgICAgIGlmIChydW50aW1lRGVzY3JpcHRvci5wMnBIYW5kbGVyU3R1YiAmJiB0eXBlb2YgcnVudGltZURlc2NyaXB0b3IucDJwSGFuZGxlclN0dWIgID09PSAnc3RyaW5nJyAmJiBydW50aW1lRGVzY3JpcHRvci5wMnBIYW5kbGVyU3R1Yi5pbmNsdWRlcygnOi8vJykpIHtcclxuICAgICAgICB0aGlzLnAycCA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy5wMnAgPSBmYWxzZTtcclxuICAgICAgfVxyXG5cclxuICAgIHJ1bnRpbWVVdGlscy5ydW50aW1lRGVzY3JpcHRvciA9IHJ1bnRpbWVEZXNjcmlwdG9yO1xyXG5cclxuICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3RvcnkuY3JlYXRlUnVudGltZUNhdGFsb2d1ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICB0aGlzLnBlcnNpc3RlbmNlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LmNyZWF0ZVJ1bnRpbWVDYXRhbG9ndWUoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2hlY2sgeW91ciBSdW50aW1lIEZhY3RvcnkgYmVjYXVzZSBpdCBuZWVkIHRoZSBSdW50aW1lIENhdGFsb2d1ZSBpbXBsZW1lbnRhdGlvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3RvcnkucGVyc2lzdGVuY2VNYW5hZ2VyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIHRoaXMucGVyc2lzdGVuY2VNYW5hZ2VyID0gcnVudGltZUZhY3RvcnkucGVyc2lzdGVuY2VNYW5hZ2VyKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZCB0aGUgUGVyc2lzdGVuY2UgTWFuYWdlciBpbXBsZW1lbnRhdGlvbicpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgcnVudGltZUZhY3Rvcnkuc3RvcmFnZU1hbmFnZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlciA9IHJ1bnRpbWVGYWN0b3J5LnN0b3JhZ2VNYW5hZ2VyKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoZWNrIHlvdXIgUnVudGltZSBGYWN0b3J5IGJlY2F1c2UgaXQgbmVlZCB0aGUgU3RvcmFnZSBNYW5hZ2VyIGltcGxlbWVudGF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHJ1bnRpbWVGYWN0b3J5LnJ1bnRpbWVDYXBhYmlsaXRpZXMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzID0gcnVudGltZUZhY3RvcnkucnVudGltZUNhcGFiaWxpdGllcyh0aGlzLnN0b3JhZ2VNYW5hZ2VyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuaW5mbygnQ2hlY2sgeW91ciBSdW50aW1lRmFjdG9yeSBiZWNhdXNlIGl0IG5lZWQgdGhlIFJ1bnRpbWUgQ2FwYWJpbGl0aWVzIGltcGxlbWVudGF0aW9uJyk7XHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbiAgaW5pdCgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICB0aGlzLmRvbWFpbiA9IHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24uZG9tYWluO1xyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICBsZXQgZ2V0Q2FwYWJpbGl0aWVzID0gdGhpcy5ydW50aW1lQ2FwYWJpbGl0aWVzLmdldFJ1bnRpbWVDYXBhYmlsaXRpZXMoKTtcclxuICAgICAgICBsZXQgZ2V0UnVudGltZVVSTCA9IHRoaXMuc3RvcmFnZU1hbmFnZXIuZ2V0KCdydW50aW1lOlVSTCcpO1xyXG5cclxuICAgICAgICBQcm9taXNlLmFsbChbZ2V0UnVudGltZVVSTCwgZ2V0Q2FwYWJpbGl0aWVzXSkudGhlbigocmVzdWx0cykgPT4ge1xyXG5cclxuICAgICAgICAgIHRoaXMucnVudGltZVVSTCA9IHJlc3VsdHNbMF0gPyByZXN1bHRzWzBdLnJ1bnRpbWVVUkwgOiByZXN1bHRzWzBdO1xyXG4gICAgICAgICAgaWYgKCF0aGlzLnJ1bnRpbWVVUkwpIHtcclxuICAgICAgICAgICAgdGhpcy5ydW50aW1lVVJMID0gJ3J1bnRpbWU6Ly8nICsgdGhpcy5kb21haW4gKyAnLycgKyBnZW5lcmF0ZUdVSUQoKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9yYWdlTWFuYWdlci5zZXQoJ3J1bnRpbWU6VVJMJywgMSwge3J1bnRpbWVVUkw6IHRoaXMucnVudGltZVVSTH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuY2FwYWJpbGl0aWVzID0gcmVzdWx0c1sxXTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZENvbXBvbmVudHMoKTtcclxuICAgICAgICB9KS50aGVuKChzdGF0dXMpID0+IHtcclxuXHJcbiAgICAgICAgICBpZiAodGhpcy5wMnApIHtcclxuICAgICAgICAgICAgY29uc29sZS5pbmZvKCdbUnVudGltZVVBIC0gaW5pdF0gbG9hZCBwMnBIYW5kbGVyOiAnLCBzdGF0dXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFAyUEhhbmRsZXIoKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mbygnW1J1bnRpbWVVQSAtIGluaXRdIFAyUCBub3Qgc3VwcG9ydGVkJyk7XHJcbiAgICAgICAgICAgIHJldHVybiAoJ1AyUCBOb3QgU3VwcG9ydGVkJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmluZm8oJ1tydW50aW1lIHVhIC0gaW5pdF0gLSBzdGF0dXM6ICcsIHJlc3VsdCk7XHJcbiAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgIH0sIChyZWFzb24pID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VSUk9SOiAnLCByZWFzb24pO1xyXG4gICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBfbG9hZFAyUEhhbmRsZXIoKSB7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcblxyXG4gICAgICBsZXQgcnVudGltZURlc2NyaXB0b3IgPSBydW50aW1lVXRpbHMucnVudGltZURlc2NyaXB0b3I7XHJcbiAgICAgIGxldCBwMnBTdHViSGFuZGxlciA9IHJ1bnRpbWVEZXNjcmlwdG9yLnAycEhhbmRsZXJTdHViO1xyXG4gICAgICBjb25zb2xlLmxvZygnW1J1bnRpbWVVQSBsb2FkUDJQSGFuZGxlcl0gUDJQU3R1YkhhbmRsZXI6ICcsIHAycFN0dWJIYW5kbGVyKTtcclxuXHJcbiAgICAgIGxldCBwMnBDb25maWcgPSB7XHJcbiAgICAgICAgaXNIYW5kbGVyU3R1YjogdHJ1ZSxcclxuICAgICAgICBydW50aW1lVVJMOiB0aGlzLnJ1bnRpbWVVUkxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMubG9hZFN0dWIocDJwU3R1YkhhbmRsZXIsIHAycENvbmZpZykudGhlbigocmVzdWx0KSA9PiB7XHJcblxyXG4gICAgICAgIGxldCBydW50aW1lVUFVUkwgPSB0aGlzLnJ1bnRpbWVVUkwgKyAnL3VhJztcclxuICAgICAgICBsZXQgbXNnID0ge1xyXG4gICAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsXHJcbiAgICAgICAgICBmcm9tOiBydW50aW1lVUFVUkwsXHJcbiAgICAgICAgICB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyB0aGlzLmRvbWFpbiArICcvc20nLFxyXG4gICAgICAgICAgYm9keToge1xyXG4gICAgICAgICAgICBzdWJzY3JpYmU6IFtyZXN1bHRdLFxyXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMucnVudGltZVVSTFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1cy5hZGRMaXN0ZW5lcihydW50aW1lVUFVUkwsIChtc2cpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbcnVudGltZSB1YSAtIGxpc3RlbmVyXSAtIHJlY2VpdmUgbXNnOiAnLCBtc2cpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnLCAocmVwbHkpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCdbcnVudGltZSB1YSAtIHBvc3RNZXNzYWdlXSAtIHJlcGx5OiAnLCByZXBseSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW3J1bnRpbWUgdWEgLSBwMnAgaW5zdGFsbGF0aW9uXSAtIHN1Y2Nlc3M6ICcsIHJlc3VsdCk7XHJcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbygnW3J1bnRpbWUgdWEgLSBwMnAgaW5zdGFsbGF0aW9uXSAtIGZhaWw6ICcsIHJlYXNvbik7XHJcbiAgICAgICAgcmVzb2x2ZShmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIF9sb2FkQ29tcG9uZW50cygpIHtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgb24gaW5zdGFuY2UgdG8gaGFuZGxlIHdpdGggdGhlIGZhbGxiYWNrcyBhbmQgcnVudGltZUNhdGFsb2d1ZTtcclxuICAgICAgICB0aGlzLmRlc2NyaXB0b3JJbnN0YW5jZSA9IG5ldyBEZXNjcmlwdG9ycyh0aGlzLnJ1bnRpbWVVUkwsIHRoaXMucnVudGltZUNhdGFsb2d1ZSwgdGhpcy5ydW50aW1lQ29uZmlndXJhdGlvbik7XHJcblxyXG4gICAgICAgIC8vIFByZXBhcmUgdGhlIGxvYWRlciB0byBsb2FkIHRoZSBoeXBlcnRpZXMsIHByb3Rvc3R1YnMgYW5kIGlkcHByb3h5O1xyXG4gICAgICAgIHRoaXMubG9hZGVyID0gbmV3IExvYWRlcih0aGlzLnJ1bnRpbWVVUkwsIHRoaXMucnVudGltZUNvbmZpZ3VyYXRpb24sIHRoaXMuZGVzY3JpcHRvckluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIGlkZW50aXR5IE1vZHVsZVxyXG4gICAgICAgIHRoaXMuaWRlbnRpdHlNb2R1bGUgPSBuZXcgSWRlbnRpdHlNb2R1bGUodGhpcy5ydW50aW1lVVJMLCB0aGlzLnJ1bnRpbWVDYXBhYmlsaXRpZXMsIHRoaXMuc3RvcmFnZU1hbmFnZXIpO1xyXG5cclxuICAgICAgICAvLyBVc2UgdGhlIHNhbmRib3ggZmFjdG9yeSB0byBjcmVhdGUgYW4gQXBwU2FuZGJveDtcclxuICAgICAgICAvLyBJbiB0aGUgZnV0dXJlIGNhbiBiZSBkZWNpZGVkIGJ5IHBvbGljeUVuZ2luZSBpZiB3ZSBuZWVkXHJcbiAgICAgICAgLy8gY3JlYXRlIGEgQXBwU2FuZGJveCBvciBub3Q7XHJcbiAgICAgICAgbGV0IGFwcFNhbmRib3ggPSB0aGlzLnJ1bnRpbWVGYWN0b3J5LmNyZWF0ZUFwcFNhbmRib3goKTtcclxuXHJcbiAgICAgICAgLy8gSW5zdGFudGlhdGUgdGhlIFJlZ2lzdHJ5IE1vZHVsZVxyXG4gICAgICAgIHRoaXMucmVnaXN0cnkgPSBuZXcgUmVnaXN0cnkodGhpcy5ydW50aW1lVVJMLCBhcHBTYW5kYm94LCB0aGlzLmlkZW50aXR5TW9kdWxlLCB0aGlzLnJ1bnRpbWVDYXRhbG9ndWUsIHRoaXMucnVudGltZUNhcGFiaWxpdGllcywgdGhpcy5zdG9yYWdlTWFuYWdlcik7XHJcblxyXG4gICAgICAgIC8vIFNldCB0aGUgbG9hZGVyIHRvIGxvYWQgSHlwZXJ0aWVzLCBTdHVicyBhbmQgSWRwUHJveGllc1xyXG4gICAgICAgIHRoaXMucmVnaXN0cnkubG9hZGVyID0gdGhpcy5sb2FkZXI7XHJcblxyXG4gICAgICAgIC8vIEluc3RhbnRpYXRlIHRoZSBNZXNzYWdlIEJ1c1xyXG4gICAgICAgIHRoaXMubWVzc2FnZUJ1cyA9IG5ldyBNZXNzYWdlQnVzKHRoaXMucmVnaXN0cnkpO1xyXG5cclxuICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgUG9saWN5IEVuZ2luZVxyXG4gICAgICAgIHRoaXMucG9saWN5RW5naW5lID0gbmV3IFBFUChuZXcgUnVudGltZUNvcmVDdHgodGhpcy5pZGVudGl0eU1vZHVsZSwgdGhpcy5yZWdpc3RyeSwgdGhpcy5zdG9yYWdlTWFuYWdlcikpO1xyXG5cclxuICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucGlwZWxpbmUuaGFuZGxlcnMgPSBbXHJcblxyXG4gICAgICAgICAgLy8gUG9saWN5IG1lc3NhZ2UgYXV0aG9yaXNlXHJcbiAgICAgICAgICAoY3R4KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucG9saWN5RW5naW5lLmF1dGhvcmlzZShjdHgubXNnKS50aGVuKChjaGFuZ2VkTWdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgY3R4Lm1zZyA9IGNoYW5nZWRNZ3M7XHJcbiAgICAgICAgICAgICAgY3R4Lm5leHQoKTtcclxuICAgICAgICAgICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IocmVhc29uKTtcclxuICAgICAgICAgICAgICBjdHguZmFpbChyZWFzb24pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICAvLyBBZGQgdG8gQXBwIFNhbmRib3ggdGhlIGxpc3RlbmVyO1xyXG4gICAgICAgIGFwcFNhbmRib3guYWRkTGlzdGVuZXIoJyonLCAobXNnKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLm1lc3NhZ2VCdXMucG9zdE1lc3NhZ2UobXNnKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVnaXN0ZXIgbWVzc2FnZUJ1cyBvbiBSZWdpc3RyeVxyXG4gICAgICAgIHRoaXMucmVnaXN0cnkubWVzc2FnZUJ1cyA9IHRoaXMubWVzc2FnZUJ1cztcclxuXHJcbiAgICAgICAgLy8gUmVnaXN0ZXIgcmVnaXN0cnkgb24gSWRlbnRpdHlNb2R1bGVcclxuICAgICAgICB0aGlzLmlkZW50aXR5TW9kdWxlLnJlZ2lzdHJ5ID0gdGhpcy5yZWdpc3RyeTtcclxuXHJcbiAgICAgICAgLy8gVXNlIHNhbmRib3ggZmFjdG9yeSB0byB1c2Ugc3BlY2lmaWMgbWV0aG9kc1xyXG4gICAgICAgIC8vIGFuZCBzZXQgdGhlIG1lc3NhZ2UgYnVzIHRvIHRoZSBmYWN0b3J5XHJcbiAgICAgICAgdGhpcy5ydW50aW1lRmFjdG9yeS5tZXNzYWdlQnVzID0gdGhpcy5tZXNzYWdlQnVzO1xyXG5cclxuICAgICAgICAvLyBJbnN0YW5jaWF0ZSB0aGUgU3luY2hlck1hbmFnZXI7XHJcbiAgICAgICAgdGhpcy5zeW5jaGVyTWFuYWdlciA9IG5ldyBTeW5jaGVyTWFuYWdlcih0aGlzLnJ1bnRpbWVVUkwsIHRoaXMubWVzc2FnZUJ1cywgdGhpcy5yZWdpc3RyeSwgdGhpcy5ydW50aW1lQ2F0YWxvZ3VlLCB0aGlzLnN0b3JhZ2VNYW5hZ2VyKTtcclxuXHJcbiAgICAgICAgLy8gU2V0IGludG8gbG9hZGVyIHRoZSBuZWVkZWQgY29tcG9uZW50cztcclxuICAgICAgICB0aGlzLmxvYWRlci5ydW50aW1lVVJMID0gdGhpcy5ydW50aW1lVVJMO1xyXG4gICAgICAgIHRoaXMubG9hZGVyLm1lc3NhZ2VCdXMgPSB0aGlzLm1lc3NhZ2VCdXM7XHJcbiAgICAgICAgdGhpcy5sb2FkZXIucmVnaXN0cnkgPSB0aGlzLnJlZ2lzdHJ5O1xyXG4gICAgICAgIHRoaXMubG9hZGVyLnJ1bnRpbWVDYXRhbG9ndWUgPSB0aGlzLnJ1bnRpbWVDYXRhbG9ndWU7XHJcbiAgICAgICAgdGhpcy5sb2FkZXIucnVudGltZUZhY3RvcnkgPSB0aGlzLnJ1bnRpbWVGYWN0b3J5O1xyXG5cclxuICAgICAgICAvLyBJbnN0YW50aWF0ZSB0aGUgR3JhcGggQ29ubmVjdG9yXHJcbiAgICAgICAgLy8gX3RoaXMuZ3JhcGhDb25uZWN0b3IgPSBuZXcgR3JhcGhDb25uZWN0b3IoX3RoaXMucnVudGltZVVSTCwgX3RoaXMubWVzc2FnZUJ1cyk7XHJcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAqIERlcGxveSBIeXBlcnR5IGZyb20gQ2F0YWxvZ3VlIFVSTFxyXG4gICogQHBhcmFtICB7VVJMLkh5cGVydHlDYXRhbG9ndWVVUkx9ICAgIGh5cGVydHkgaHlwZXJ0eURlc2NyaXB0b3IgdXJsO1xyXG4gICovXHJcbiAgbG9hZEh5cGVydHkoaHlwZXJ0eURlc2NyaXB0b3JVUkwpIHtcclxuXHJcbiAgICBpZiAoIWh5cGVydHlEZXNjcmlwdG9yVVJMKSB0aHJvdyBuZXcgRXJyb3IoJ0h5cGVydHkgZGVzY3JpcHRvciB1cmwgcGFyYW1ldGVyIGlzIG5lZWRlZCcpO1xyXG5cclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblxyXG4gICAgICB0aGlzLmxvYWRlci5sb2FkSHlwZXJ0eShoeXBlcnR5RGVzY3JpcHRvclVSTClcclxuICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChyZWFzb24pID0+IHtcclxuICAgICAgICByZWplY3QocmVhc29uKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgKiBEZXBsb3kgU3R1YiBmcm9tIENhdGFsb2d1ZSBVUkwgb3IgZG9tYWluIHVybFxyXG4gICogQHBhcmFtICB7VVJMLlVSTH0gICAgIGRvbWFpbiAgICAgICAgICBkb21haW5cclxuICAqL1xyXG4gIGxvYWRTdHViKHByb3Rvc3R1YlVSTCwgcDJwQ29uZmlnKSB7XHJcblxyXG4gICAgaWYgKCFwcm90b3N0dWJVUkwpIHRocm93IG5ldyBFcnJvcignUHJvdG9TdHViIGRlc2NyaXB0b3IgdXJsIHBhcmFtZXRlciBpcyBuZWVkZWQnKTtcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cclxuICAgICAgdGhpcy5sb2FkZXIubG9hZFN0dWIocHJvdG9zdHViVVJMLCBwMnBDb25maWcpXHJcbiAgICAgIC50aGVuKChyZXN1bHQpID0+IHtcclxuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgocmVhc29uKSA9PiB7XHJcbiAgICAgICAgcmVqZWN0KHJlYXNvbik7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICogRGVwbG95IGlkcFByb3h5IGZyb20gQ2F0YWxvZ3VlIFVSTCBvciBkb21haW4gdXJsXHJcbiAgKiBAcGFyYW0gIHtVUkwuVVJMfSAgICAgZG9tYWluICAgICAgICAgIGRvbWFpblxyXG4gICovXHJcbiAgbG9hZElkcFByb3h5KGlkcFByb3h5VVJMKSB7XHJcblxyXG4gICAgaWYgKCFpZHBQcm94eVVSTCkgdGhyb3cgbmV3IEVycm9yKCdUaGUgSURQIFByb3h5IFVSTCBpcyBhIG5lZWRlZCBwYXJhbWV0ZXIsIGNvdWxkIGJlIGEgRE9NQUlOIG9yIGEgVVJMJyk7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5sb2FkZXIubG9hZElkcFByb3h5KGlkcFByb3h5VVJMKVxyXG4gICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAgIHJlamVjdChyZWFzb24pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVzZWQgdG8gY2xvc2UgYWxsIHRoZSBydW50aW1lOyBVbnJlZ2lzdGVyIGFsbCBoeXBlcnRpZXM7XHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxCb29sZWFuPn0gcmVzdWx0IG9mIHRoZSBjbG9zZSBtZXRob2QsIHdpdGggdHJ1ZSBvciBmYWxzZSB0byB0aGUgb3BlcmF0aW9uIHN1Y2Nlc3M7XHJcbiAgICovXHJcbiAgY2xvc2UoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGNvbnNvbGUuaW5mbygnVW5yZWdpc3RlciBhbGwgaHlwZXJ0aWVzJyk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcblxyXG4gICAgICBfdGhpcy5yZWdpc3RyeS51bnJlZ2lzdGVyQWxsSHlwZXJ0aWVzKCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICBjb25zb2xlLmluZm8oJ0FsbCB0aGUgaHlwZXJ0aWVzIGFyZSB1bnJlZ2lzdGVkIHdpdGggU3VjY2VzczonLCByZXN1bHQpO1xyXG4gICAgICAgIHJlc29sdmUodHJ1ZSk7XHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKHJlYXNvbikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB1bnJlZ2lzdGVyIHRoZSBoeXBlcnRpZXMnLCByZWFzb24pO1xyXG4gICAgICAgIHJlamVjdChmYWxzZSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSdW50aW1lVUE7XHJcbiIsImV4cG9ydCBjb25zdCBydW50aW1lQ29uZmlndXJhdGlvbiA9IHtcclxuXHJcbiAgcnVudGltZVVSTFM6IHtcclxuICAgIHJlZ2lzdHJ5OiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXHJcbiAgICAgIHN1ZmZpeDogJ3JlZ2lzdHJ5J1xyXG4gICAgfSxcclxuICAgIGlkZW50aXR5TW9kdWxlOiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXHJcbiAgICAgIHN1ZmZpeDogJy9pZG0nXHJcbiAgICB9LFxyXG4gICAgcnVudGltZVVBOiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktcnVudGltZTovLycsXHJcbiAgICAgIHN1ZmZpeDogJy91YSdcclxuICAgIH0sXHJcbiAgICBjYXRhbG9ndWU6IHtcclxuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJyxcclxuICAgICAgc3VmZml4OiAnL2NhdGFsb2d1ZSdcclxuICAgIH0sXHJcbiAgICBncmFwaENvbm5lY3Rvcjoge1xyXG4gICAgICBwcmVmaXg6ICdoeXBlcnR5LXJ1bnRpbWU6Ly8nLFxyXG4gICAgICBzdWZmaXg6ICcvZ3JhcGgnXHJcbiAgICB9LFxyXG4gICAgc3luY01hbmFnZXI6IHtcclxuICAgICAgcHJlZml4OiAnaHlwZXJ0eS1ydW50aW1lOi8vJyxcclxuICAgICAgc3VmZml4OiAnL3NtJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgY2F0YWxvZ3VlVVJMczoge1xyXG4gICAgcHJvdG9jb2xzdHViOiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicsXHJcbiAgICAgIHN1ZmZpeDogJy8ud2VsbC1rbm93bi9wcm90b2NvbHN0dWIvJyxcclxuICAgICAgZmFsbGJhY2s6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4lZG9tYWluJS8ud2VsbC1rbm93bi9wcm90b2NvbHN0dWIvJ1xyXG4gICAgfSxcclxuICAgIGlkcFByb3h5OiB7XHJcbiAgICAgIHByZWZpeDogJ2h5cGVydHktY2F0YWxvZ3VlOi8vY2F0YWxvZ3VlLicsXHJcbiAgICAgIHN1ZmZpeDogJy8ud2VsbC1rbm93bi9pZHAtcHJveHkvJyxcclxuICAgICAgZmFsbGJhY2s6ICdoeXBlcnR5LWNhdGFsb2d1ZTovL2NhdGFsb2d1ZS4lZG9tYWluJS8ud2VsbC1rbm93bi9pZHAtcHJveHkvJ1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgbXNnTm9kZVVSTDoge1xyXG4gICAgcHJlZml4OiAnZG9tYWluOi8vbXNnLW5vZGUuJyxcclxuICAgIHN1ZmZpeDogJycsXHJcbiAgICBoeXBlcnR5QWRkcmVzc0FsbG9jYXRpb246ICcvaHlwZXJ0eS1hZGRyZXNzLWFsbG9jYXRpb24nLFxyXG4gICAgb2JqZWN0QWRkcmVzc0FsbG9jYXRpb246ICcvb2JqZWN0LWFkZHJlc3MtYWxsb2NhdGlvbicsXHJcbiAgICBzdWJzY3JpcHRpb25NYW5hZ2VtZW50OiAnL3NtJ1xyXG4gIH0sXHJcbiAgZG9tYWluUmVnaXN0cnlVUkw6IHtcclxuICAgIHByZWZpeDogJ2RvbWFpbjovL3JlZ2lzdHJ5LicsXHJcbiAgICBzdWZmaXg6ICcnXHJcbiAgfSxcclxuICBnbG9iYWxSZWdpc3RyeVVSTDogJ2dsb2JhbDovL3JlZ2lzdHJ5LidcclxufTtcclxuIiwiZXhwb3J0IGxldCBydW50aW1lVXRpbHMgPSB7XHJcbiAgcnVudGltZURlc2NyaXB0b3I6IHt9XHJcbn07XHJcbiIsImltcG9ydCB7IGRpdmlkZVVSTCB9IGZyb20gJy4uL3V0aWxzL3V0aWxzJztcclxuaW1wb3J0IFN1YnNjcmlwdGlvbiBmcm9tICcuL1N1YnNjcmlwdGlvbic7XHJcblxyXG5jbGFzcyBPYnNlcnZlck9iamVjdCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHBhcmVudCwgdXJsLCBjaGlsZHJlbnMpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX3BhcmVudCA9IHBhcmVudDtcclxuICAgIF90aGlzLl91cmwgPSB1cmw7XHJcbiAgICBfdGhpcy5fY2hpbGRyZW5zID0gY2hpbGRyZW5zO1xyXG5cclxuICAgIF90aGlzLl9zdG9yYWdlTWFuYWdlciA9IHBhcmVudC5fc3RvcmFnZU1hbmFnZXI7XHJcblxyXG4gICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzO1xyXG5cclxuICAgIF90aGlzLl9zdWJzY3JpcHRpb25zID0ge307XHJcbiAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnMgPSB7fTtcclxuICB9XHJcblxyXG4gIF9uZXdTdWJzY3JpcHRpb24oaHlwZXJ0eSkge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XSA9IG5ldyBTdWJzY3JpcHRpb24oX3RoaXMuX2J1cywgaHlwZXJ0eSwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgZmFsc2UpO1xyXG4gIH1cclxuXHJcbiAgYWRkU3Vic2NyaXB0aW9uKGh5cGVydHkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX25ld1N1YnNjcmlwdGlvbihoeXBlcnR5KTtcclxuXHJcbiAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnNbaHlwZXJ0eV0gPSB7dXJsOiBfdGhpcy5fdXJsLCBjaGlsZHJlbnM6IF90aGlzLl9jaGlsZHJlbnN9O1xyXG4gICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyLnNldCgnc3luY2hlck1hbmFnZXI6T2JzZXJ2ZXInLCAxLCBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgcmVzdW1lU3Vic2NyaXB0aW9uKGh5cGVydHkpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgY29uc29sZS5sb2coJ1tPYnNlcnZlciBPYmplY3RdIC0gcmVzdW1lIHN1YnNjcmlwdGlvbnM6ICcsIGh5cGVydHkpO1xyXG4gICAgX3RoaXMuX25ld1N1YnNjcmlwdGlvbihoeXBlcnR5KTtcclxuICB9XHJcblxyXG4gIHJlbW92ZVN1YnNjcmlwdGlvbihoeXBlcnR5KSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBkb21haW4gPSBkaXZpZGVVUkwoaHlwZXJ0eSkuZG9tYWluO1xyXG4gICAgbGV0IG9ialVSTFN1YnNjcmlwdGlvbiA9IF90aGlzLl91cmwgKyAnL3N1YnNjcmlwdGlvbic7XHJcblxyXG4gICAgbGV0IHN1YnNjcmlwdGlvbiA9IF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHldO1xyXG4gICAgaWYgKHN1YnNjcmlwdGlvbikge1xyXG4gICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gcmVtb3RlIFJlcG9ydGVyT2JqZWN0IC0+IF9vblJlbW90ZVVuU3Vic2NyaWJlXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIHR5cGU6ICd1bnN1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbixcclxuICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvL1RPRE86IHNob3VsZCBJIHdhaXQgZm9yIHJlc3BvbnNlIGJlZm9yZSB1bnN1YnNjcmliZSBvbiBtc2ctbm9kZVxyXG4gICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnRcclxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgdHlwZTogJ3Vuc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL3NtJyxcclxuICAgICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsLCBjaGlsZHJlblJlc291cmNlczogX3RoaXMuX2NoaWxkcmVucyB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgc3Vic2NyaXB0aW9uLl9yZWxlYXNlTGlzdGVuZXJzKCk7XHJcbiAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5XTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBPYnNlcnZlck9iamVjdDtcclxuIiwiaW1wb3J0IHsgZGl2aWRlVVJMIH0gZnJvbSAnLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4vU3Vic2NyaXB0aW9uJztcclxuXHJcbmNsYXNzIFJlcG9ydGVyT2JqZWN0IHtcclxuXHJcbiAgY29uc3RydWN0b3IocGFyZW50LCBvd25lciwgdXJsKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICBfdGhpcy5fb3duZXIgPSBvd25lcjtcclxuICAgIF90aGlzLl91cmwgPSB1cmw7XHJcblxyXG4gICAgX3RoaXMuX2J1cyA9IHBhcmVudC5fYnVzO1xyXG4gICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyID0gcGFyZW50Ll9zdG9yYWdlTWFuYWdlcjtcclxuXHJcbiAgICBfdGhpcy5fZG9tYWluID0gZGl2aWRlVVJMKHVybCkuZG9tYWluO1xyXG4gICAgX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMID0gX3RoaXMuX3VybCArICcvc3Vic2NyaXB0aW9uJztcclxuXHJcbiAgICBfdGhpcy5fc3Vic2NyaXB0aW9ucyA9IHt9O1xyXG4gICAgX3RoaXMuX2NoaWxkcmVucyA9IFtdO1xyXG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzID0gW107XHJcblxyXG4gICAgX3RoaXMuX3N0b3JhZ2VTdWJzY3JpcHRpb25zID0ge307XHJcblxyXG4gICAgX3RoaXMuX2ZvcndhcmRzID0ge307XHJcblxyXG4gICAgX3RoaXMuX2FsbG9jYXRlTGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICBfYWxsb2NhdGVMaXN0ZW5lcnMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIC8vYWRkIHN1YnNjcmlwdGlvbiBsaXN0ZW5lci4uLlxyXG4gICAgX3RoaXMuX3N1YnNjcmlwdGlvbkxpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwsIChtc2cpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coX3RoaXMuX29ialN1YnNjcmlwdG9yVVJMICsgJy1SQ1Y6ICcsIG1zZyk7XHJcbiAgICAgIHN3aXRjaCAobXNnLnR5cGUpIHtcclxuICAgICAgICBjYXNlICdzdWJzY3JpYmUnOiBfdGhpcy5fb25SZW1vdGVTdWJzY3JpYmUobXNnKTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOiBfdGhpcy5fb25SZW1vdGVVblN1YnNjcmliZShtc2cpOyBicmVhaztcclxuICAgICAgICBjYXNlICdyZXNwb25zZSc6IF90aGlzLl9vblJlbW90ZVJlc3BvbnNlKG1zZyk7IGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgY2hhbmdlVVJMID0gX3RoaXMuX3VybCArICcvY2hhbmdlcyc7XHJcbiAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIgPSBfdGhpcy5fYnVzLmFkZExpc3RlbmVyKGNoYW5nZVVSTCwgKG1zZykgPT4ge1xyXG4gICAgICAvL1RPRE86IHdoYXQgdG9kbyBoZXJlPyBTYXZlIGNoYW5nZXM/XHJcbiAgICAgIGNvbnNvbGUubG9nKCdTeW5jaGVyTWFuYWdlci0nICsgY2hhbmdlVVJMICsgJy1SQ1Y6ICcsIG1zZyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnNbX3RoaXMuX3VybF0gPSB7dXJsOiBfdGhpcy5fdXJsLCBvd25lcjogX3RoaXMuX293bmVyLCBjaGlsZHJlbnM6IF90aGlzLl9jaGlsZHJlbnMsIHN1YnNjcmlwdGlvbnM6IFtdfTtcclxuICAgIF90aGlzLl9zdG9yYWdlTWFuYWdlci5zZXQoJ3N5bmNoZXJNYW5hZ2VyOlJlcG9ydGVyJywgMSwgX3RoaXMuX3N0b3JhZ2VTdWJzY3JpcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHJlc3VtZVN1YnNjcmlwdGlvbnMoc3Vic2NyaXB0aW9ucykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIHN1YnNjcmlwdGlvbnMuZm9yRWFjaCgoaHlwZXJ0eVVSTCkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygnW1JlcG9ydGVyIE9iamVjdF0gLSByZXN1bWUgc3Vic2NyaXB0aW9uczogJywgaHlwZXJ0eVVSTCk7XHJcbiAgICAgIF90aGlzLl9zdWJzY3JpcHRpb25zW2h5cGVydHlVUkxdID0gbmV3IFN1YnNjcmlwdGlvbihfdGhpcy5fYnVzLCBfdGhpcy5fb3duZXIsIF90aGlzLl91cmwsIF90aGlzLl9jaGlsZHJlbnMsIHRydWUpO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgX3JlbGVhc2VMaXN0ZW5lcnMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl9zdWJzY3JpcHRpb25MaXN0ZW5lci5yZW1vdmUoKTtcclxuXHJcbiAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCk7XHJcblxyXG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLmZvckVhY2goKGNsKSA9PiB7XHJcbiAgICAgIGNsLnJlbW92ZSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmtleXMoX3RoaXMuX2ZvcndhcmRzKS5mb3JFYWNoKChrZXkpID0+IHtcclxuICAgICAgX3RoaXMuZm9yd2FyZFVuU3Vic2NyaWJlKGtleSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL3JlbW92ZSBhbGwgc3Vic2NyaXB0aW9uc1xyXG4gICAgT2JqZWN0LmtleXMoX3RoaXMuX3N1YnNjcmlwdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICBfdGhpcy5fc3Vic2NyaXB0aW9uc1trZXldLl9yZWxlYXNlTGlzdGVuZXJzKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlZ2lzdGVyIGEgbGlzdGVuZXIgaW4gdGhlIG1zZy1ub2RlIGFuZCBpbiB0aGUgbG9jYWwgTWVzc2FnZUJ1cywgc28gdGhhdCBtZXNzYWdlcyBvbiB0aGlzIGFkZHJlc3MgYXJlIGZvcndhcmRlZCB0byB0aGUgcmVwb3J0ZXIgb2JqZWN0XHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBhZGRyZXNzIC0gVVJMIHRvIHJlZ2lzdGVyIHRoZSBsaXN0ZW5lcnNcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm4gUHJvbWlzZSBPSyBvciBlcnJvclxyXG4gICAqL1xyXG4gIGZvcndhcmRTdWJzY3JpYmUoYWRkcmVzc2VzKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnRcclxuICAgIGxldCBub2RlU3Vic2NyaWJlTXNnID0ge1xyXG4gICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBfdGhpcy5fZG9tYWluICsgJy9zbScsXHJcbiAgICAgIGJvZHk6IHsgc3Vic2NyaWJlOiBhZGRyZXNzZXMsIHNvdXJjZTogX3RoaXMuX293bmVyIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZShub2RlU3Vic2NyaWJlTXNnLCAocmVwbHkpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZygnZm9yd2FyZC1zdWJzY3JpYmUtcmVzcG9uc2UocmVwb3J0ZXIpOiAnLCByZXBseSk7XHJcbiAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICBsZXQgbmV3Rm9yd2FyZCA9IF90aGlzLl9idXMuYWRkRm9yd2FyZChfdGhpcy5fdXJsLCBfdGhpcy5fb3duZXIpO1xyXG4gICAgICAgICAgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3Nlc1swXV0gPSBuZXdGb3J3YXJkO1xyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZWplY3QoJ0Vycm9yIG9uIG1zZy1ub2RlIHN1YnNjcmlwdGlvbjogJyArIHJlcGx5LmJvZHkuZGVzYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVW5SZWdpc3RlciBhIGxpc3RlbmVyIGluIHRoZSBtc2ctbm9kZSBhbmQgaW4gdGhlIGxvY2FsIE1lc3NhZ2VCdXMsIHNvIHRoYXQgbWVzc2FnZXMgb24gdGhpcyBhZGRyZXNzIGFyZSByZW1vdmVkIGZyb20gZm9yd2FyZFxyXG4gICAqIEBwYXJhbSAge3N0cmluZ30gYWRkcmVzcyAtIFVSTCB0byB1bi1yZWdpc3RlciB0aGUgbGlzdGVuZXJzXHJcbiAgICovXHJcbiAgZm9yd2FyZFVuU3Vic2NyaWJlKGFkZHJlc3MpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX2ZvcndhcmRzW2FkZHJlc3NdLnJlbW92ZSgpO1xyXG4gICAgZGVsZXRlIF90aGlzLl9mb3J3YXJkc1thZGRyZXNzXTtcclxuXHJcbiAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gdGhlIG1zZy1ub2RlIFN1YnNjcmlwdGlvbk1hbmFnZXIgY29tcG9uZW50XHJcbiAgICBsZXQgbm9kZVVuU3Vic2NyaWJlTXNnID0ge1xyXG4gICAgICB0eXBlOiAndW5zdWJzY3JpYmUnLCBmcm9tOiBfdGhpcy5fcGFyZW50Ll91cmwsIHRvOiAnZG9tYWluOi8vbXNnLW5vZGUuJyArIF90aGlzLl9kb21haW4gKyAnL3NtJyxcclxuICAgICAgYm9keTogeyBzdWJzY3JpYmU6IFthZGRyZXNzXSwgc291cmNlOiBfdGhpcy5fb3duZXIgfVxyXG4gICAgfTtcclxuXHJcbiAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVVblN1YnNjcmliZU1zZyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZWdpc3RlciBsaXN0ZW5lcnMgZm9yIGEgbGlzdCBvZiBjaGlsZHJlbnMuIFB1YmxpYyBjaGFubmVscyB1c2VkIHRvIHRyYW5zbWl0IG1lc3NhZ2VzLlxyXG4gICAqIEBwYXJhbSAge3N0cmluZ1tdfSBjaGlsZHJlbnMgLSBjaGFubmVscyB0byByZWdpc3RlclxyXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybiBQcm9taXNlIE9LIG9yIGVycm9yXHJcbiAgICovXHJcbiAgYWRkQ2hpbGRyZW5zKGNoaWxkcmVucykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBpZiAoY2hpbGRyZW5zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBjaGlsZEJhc2VVUkwgPSBfdGhpcy5fdXJsICsgJy9jaGlsZHJlbi8nO1xyXG4gICAgICBfdGhpcy5fY2hpbGRyZW5zLnB1c2goY2hpbGRyZW5zKTtcclxuXHJcbiAgICAgIC8qXHJcbiAgICAgIF90aGlzLl9jaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHtcclxuICAgICAgICBsZXQgY2hpbGRJZCA9IGNoaWxkQmFzZVVSTCArIGNoaWxkO1xyXG5cclxuICAgICAgICBsZXQgc2VsZkZvcndhcmQgPSBfdGhpcy5fYnVzLmFkZEZvcndhcmQoY2hpbGRJZCwgb3duZXIpO1xyXG4gICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKHNlbGZGb3J3YXJkKTtcclxuICAgICAgfSk7Ki9cclxuXHJcbiAgICAgIGxldCBzdWJzY3JpcHRpb25zID0gW107XHJcbiAgICAgIGNoaWxkcmVucy5mb3JFYWNoKChjaGlsZCkgPT4gc3Vic2NyaXB0aW9ucy5wdXNoKGNoaWxkQmFzZVVSTCArIGNoaWxkKSk7XHJcblxyXG4gICAgICAvL190aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9uc1tfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkxdID0ge3VybDogX3RoaXMuX3VybCwgb3duZXI6IF90aGlzLl9vd25lciwgY2hpbGRyZW5zOiBfdGhpcy5fY2hpbGRyZW5zfTtcclxuXHJcbiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byB0aGUgbXNnLW5vZGUgU3Vic2NyaXB0aW9uTWFuYWdlciBjb21wb25lbnRcclxuICAgICAgbGV0IG5vZGVTdWJzY3JpYmVNc2cgPSB7XHJcbiAgICAgICAgdHlwZTogJ3N1YnNjcmliZScsIGZyb206IF90aGlzLl9wYXJlbnQuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgX3RoaXMuX2RvbWFpbiArICcvc20nLFxyXG4gICAgICAgIGJvZHk6IHsgc3Vic2NyaWJlOiBzdWJzY3JpcHRpb25zLCBzb3VyY2U6IF90aGlzLl9vd25lciB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG5vZGVTdWJzY3JpYmVNc2csIChyZXBseSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdub2RlLXN1YnNjcmliZS1yZXNwb25zZShyZXBvcnRlcik6ICcsIHJlcGx5KTtcclxuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuXHJcbiAgICAgICAgICAvL2FkZCBjaGlsZHJlbiBsaXN0ZW5lcnMgb24gbG9jYWwgLi4uXHJcbiAgICAgICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goKGNoaWxkVVJMKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjaGlsZExpc3RlbmVyID0gX3RoaXMuX2J1cy5hZGRMaXN0ZW5lcihjaGlsZFVSTCwgKG1zZykgPT4ge1xyXG4gICAgICAgICAgICAgIC8vVE9ETzogd2hhdCB0b2RvIGhlcmU/IFNhdmUgY2hpbGRyZW5zP1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTeW5jaGVyTWFuYWdlci0nICsgY2hpbGRVUkwgKyAnLVJDVjogJywgbXNnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycy5wdXNoKGNoaWxkTGlzdGVuZXIpO1xyXG5cclxuICAgICAgICAgICAgbGV0IHNlbGZGb3J3YXJkID0gX3RoaXMuX2J1cy5hZGRGb3J3YXJkKGNoaWxkVVJMLCBfdGhpcy5fb3duZXIpO1xyXG4gICAgICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdCgnRXJyb3Igb24gbXNnLW5vZGUgc3Vic2NyaXB0aW9uOiAnICsgcmVwbHkuYm9keS5kZXNjKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkZWxldGUoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChfdGhpcy5fb3duZXIpLmRvbWFpbjtcclxuXHJcbiAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgZGlyZWN0bHkgdG8gYWxsIHN1YnNjcmliZXJzIG9mIHRoZSByZXBvcnRlclxyXG4gICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgIHR5cGU6ICdkZWxldGUnLCBmcm9tOiBfdGhpcy5fb2JqU3Vic2NyaXB0b3JVUkwsIHRvOiBfdGhpcy5fdXJsICsgJy9jaGFuZ2VzJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy9GTE9XLU9VVDogbWVzc2FnZSBzZW50IHRvIHRoZSBtc2ctbm9kZSBPYmplY3RBbGxvY2F0aW9uTWFuYWdlciBjb21wb25lbnRcclxuICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogX3RoaXMuX3BhcmVudC5fdXJsLCB0bzogJ2RvbWFpbjovL21zZy1ub2RlLicgKyBkb21haW4gKyAnL29iamVjdC1hZGRyZXNzLWFsbG9jYXRpb24nLFxyXG4gICAgICBib2R5OiB7IHJlc291cmNlOiBfdGhpcy5fdXJsLCBjaGlsZHJlblJlc291cmNlczogX3RoaXMuX2NoaWxkcmVucyB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBfdGhpcy5fcmVsZWFzZUxpc3RlbmVycygpO1xyXG4gICAgZGVsZXRlIF90aGlzLl9wYXJlbnQuX3JlcG9ydGVyc1tfdGhpcy5fdXJsXTtcclxuICB9XHJcblxyXG4gIF9vblJlbW90ZVJlc3BvbnNlKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcclxuICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogX3RoaXMuX3VybCxcclxuICAgICAgYm9keTogeyBjb2RlOiBtc2cuYm9keS5jb2RlLCBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHNvdXJjZTogbXNnLmZyb20gfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBTeW5jaGVyIC0+IHN1YnNjcmliZVxyXG4gIF9vblJlbW90ZVN1YnNjcmliZShtc2cpIHtcclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcbiAgICBsZXQgaHlwZXJ0eVVSTCA9IG1zZy5ib2R5LnN1YnNjcmliZXI7XHJcblxyXG4gICAgLy92YWxpZGF0ZSBpZiBzdWJzY3JpcHRpb24gYWxyZWFkeSBleGlzdHM/XHJcbiAgICBpZiAoX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF0pIHtcclxuICAgICAgbGV0IGVycm9yTXNnID0ge1xyXG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsXHJcbiAgICAgICAgYm9keTogeyBjb2RlOiA1MDAsIGRlc2M6ICdTdWJzY3JpcHRpb24gZm9yICgnICsgX3RoaXMuX3VybCArICcgOiAnICsgIGh5cGVydHlVUkwgKyAnKSBhbHJlYWR5IGV4aXN0cyEnIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoZXJyb3JNc2cpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy9hc2sgdG8gc3Vic2NyaWJlIHRvIFN5bmNoZXI/IChkZXBlbmRzIG9uIHRoZSBvcGVyYXRpb24gbW9kZSlcclxuICAgIC8vVE9ETzogZ2V0IG1vZGUgZnJvbSBvYmplY3QhXHJcbiAgICBsZXQgbW9kZSA9ICdzdWIvcHViJztcclxuXHJcbiAgICBpZiAobW9kZSA9PT0gJ3N1Yi9wdWInKSB7XHJcbiAgICAgIC8vRkxPVy1PVVQ6IG1lc3NhZ2Ugc2VudCB0byBsb2NhbCBoeXBlcnR5IGFkZHJlc3MgU3luY2hlciAtPiBfb25Gb3J3YXJkXHJcbiAgICAgIGxldCBmb3J3YXJkTXNnID0ge1xyXG4gICAgICAgIHR5cGU6ICdmb3J3YXJkJywgZnJvbTogX3RoaXMuX3VybCwgdG86IF90aGlzLl9vd25lcixcclxuICAgICAgICBib2R5OiB7IHR5cGU6IG1zZy50eXBlLCBmcm9tOiBoeXBlcnR5VVJMLCB0bzogX3RoaXMuX3VybCwgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5IH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UoZm9yd2FyZE1zZywgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ2ZvcndhcmQtcmVwbHk6ICcsIHJlcGx5KTtcclxuICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuICAgICAgICAgIGlmICghX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF0pIHtcclxuICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmlwdGlvbnNbaHlwZXJ0eVVSTF0gPSBuZXcgU3Vic2NyaXB0aW9uKF90aGlzLl9idXMsIF90aGlzLl9vd25lciwgX3RoaXMuX3VybCwgX3RoaXMuX2NoaWxkcmVucywgdHJ1ZSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSBPYmplY3Qua2V5cyhfdGhpcy5fc3Vic2NyaXB0aW9ucyk7XHJcbiAgICAgICAgICBfdGhpcy5fc3RvcmFnZVN1YnNjcmlwdGlvbnNbX3RoaXMuX3VybF0uc3Vic2NyaXB0aW9ucyA9IHN1YnNjcmlwdGlvbnM7XHJcbiAgICAgICAgICBfdGhpcy5fc3RvcmFnZU1hbmFnZXIuc2V0KCdzeW5jaGVyTWFuYWdlcjpSZXBvcnRlcicsIDEsIF90aGlzLl9zdG9yYWdlU3Vic2NyaXB0aW9ucyk7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaXB0aW9uIHJlc3BvbnNlIHNlbnQgKGZvcndhcmQgZnJvbSBpbnRlcm5hbCBIeXBlcnR5KVxyXG4gICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sXHJcbiAgICAgICAgICBib2R5OiByZXBseS5ib2R5XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSByZW1vdGUgT2JzZXJ2ZXJPYmplY3QgLT4gcmVtb3ZlU3Vic2NyaXB0aW9uXHJcbiAgX29uUmVtb3RlVW5TdWJzY3JpYmUobXNnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IGh5cGVydHlVUkwgPSBtc2cuYm9keS5zdWJzY3JpYmVyO1xyXG5cclxuICAgIGxldCBzdWJzY3JpcHRpb24gPSBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXTtcclxuICAgIGlmIChzdWJzY3JpcHRpb24pIHtcclxuICAgICAgc3Vic2NyaXB0aW9uLl9yZWxlYXNlTGlzdGVuZXJzKCk7XHJcbiAgICAgIGRlbGV0ZSBfdGhpcy5fc3Vic2NyaXB0aW9uc1toeXBlcnR5VVJMXTtcclxuXHJcbiAgICAgIC8vVE9ETzogc2VuZCB1bi1zdWJzY3JpYmUgbWVzc2FnZSB0byBTeW5jaGVyPyAoZGVwZW5kcyBvbiB0aGUgb3BlcmF0aW9uIG1vZGUpXHJcbiAgICB9XHJcblxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFJlcG9ydGVyT2JqZWN0O1xyXG4iLCJjbGFzcyBTdWJzY3JpcHRpb24ge1xyXG5cclxuICBjb25zdHJ1Y3RvcihidXMsIG93bmVyLCB1cmwsIGNoaWxkcmVucywgaXNSZXBvcnRlcikge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBjaGlsZEJhc2VVUkwgPSB1cmwgKyAnL2NoaWxkcmVuLyc7XHJcbiAgICBsZXQgY2hhbmdlVVJMID0gdXJsICsgJy9jaGFuZ2VzJztcclxuXHJcbiAgICAvL3Byb2Nlc3MgZGVsZXRlIG1lc3NhZ2VcclxuICAgIF90aGlzLl9kZWxldGVMaXN0ZW5lciA9IGJ1cy5hZGRMaXN0ZW5lcihjaGFuZ2VVUkwsIChtc2cpID0+IHtcclxuICAgICAgaWYgKG1zZy50eXBlID09PSAnZGVsZXRlJykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdTdWJzY3JpcHRpb24tREVMRVRFOiAnLCBtc2cpO1xyXG5cclxuICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHNlbnQgdG8gYWxsIHN1YnNjcmliZXJzXHJcbiAgICAgICAgbGV0IGRlbGV0ZU1lc3NhZ2VUb0h5cGVydHkgPSB7XHJcbiAgICAgICAgICB0eXBlOiAnZGVsZXRlJywgZnJvbTogbXNnLmZyb20sIHRvOiBvd25lcixcclxuICAgICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCByZXNvdXJjZTogdXJsIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvL3NlbmQgZGVsZXRlIHRvIGh5cGVydHlcclxuICAgICAgICBidXMucG9zdE1lc3NhZ2UoZGVsZXRlTWVzc2FnZVRvSHlwZXJ0eSwgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnU3Vic2NyaXB0aW9uLURFTEVURS1SRVBMWTogJywgcmVwbHkpO1xyXG4gICAgICAgICAgaWYgKHJlcGx5LmJvZHkuY29kZSA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgIF90aGlzLl9yZWxlYXNlTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vYWRkIGNoYW5nZSBwdWJsaXNoIGFkZHJlc3Mgb3IgZm9yd2FyZFxyXG4gICAgaWYgKGlzUmVwb3J0ZXIpIHtcclxuICAgICAgX3RoaXMuX2NoYW5nZUxpc3RlbmVyID0gYnVzLmFkZFB1Ymxpc2goY2hhbmdlVVJMKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIF90aGlzLl9jaGFuZ2VMaXN0ZW5lciA9IGJ1cy5hZGRGb3J3YXJkKGNoYW5nZVVSTCwgb3duZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIF90aGlzLl9jaGlsZHJlbkxpc3RlbmVycyA9IFtdO1xyXG4gICAgY2hpbGRyZW5zLmZvckVhY2goKGNoaWxkKSA9PiB7XHJcbiAgICAgIGxldCBjaGlsZElkID0gY2hpbGRCYXNlVVJMICsgY2hpbGQ7XHJcblxyXG4gICAgICAvL2FkZCBjaGlsZHJlbiBwdWJsaXNoIGFkZHJlc3NcclxuICAgICAgbGV0IGNoaWxkcmVuRm9yd2FyZCA9IGJ1cy5hZGRQdWJsaXNoKGNoaWxkSWQpO1xyXG4gICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChjaGlsZHJlbkZvcndhcmQpO1xyXG5cclxuICAgICAgLy9hZGQgc2VsZiBmb3J3YXJkIGlmIGFuIG9ic2VydmVyXHJcbiAgICAgIGlmICghaXNSZXBvcnRlcikge1xyXG4gICAgICAgIGxldCBzZWxmRm9yd2FyZCA9IGJ1cy5hZGRGb3J3YXJkKGNoaWxkSWQsIG93bmVyKTtcclxuICAgICAgICBfdGhpcy5fY2hpbGRyZW5MaXN0ZW5lcnMucHVzaChzZWxmRm9yd2FyZCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgX3JlbGVhc2VMaXN0ZW5lcnMoKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIF90aGlzLl9kZWxldGVMaXN0ZW5lci5yZW1vdmUoKTtcclxuXHJcbiAgICBfdGhpcy5fY2hhbmdlTGlzdGVuZXIucmVtb3ZlKCk7XHJcblxyXG4gICAgX3RoaXMuX2NoaWxkcmVuTGlzdGVuZXJzLmZvckVhY2goKGZvcndhcmQpID0+IHtcclxuICAgICAgZm9yd2FyZC5yZW1vdmUoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFN1YnNjcmlwdGlvbjtcclxuIiwiLyoqXHJcbiogQ29weXJpZ2h0IDIwMTYgUFQgSW5vdmHDp8OjbyBlIFNpc3RlbWFzIFNBXHJcbiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSURcclxuKiBDb3B5cmlnaHQgMjAxNiBRVU9CSVMgTkVUV09SS1MgU0xcclxuKiBDb3B5cmlnaHQgMjAxNiBGUkFVTkhPRkVSLUdFU0VMTFNDSEFGVCBaVVIgRk9FUkRFUlVORyBERVIgQU5HRVdBTkRURU4gRk9SU0NIVU5HIEUuVlxyXG4qIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQVxyXG4qIENvcHlyaWdodCAyMDE2IERldXRzY2hlIFRlbGVrb20gQUdcclxuKiBDb3B5cmlnaHQgMjAxNiBBcGl6ZWVcclxuKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTlxyXG4qXHJcbiogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbipcclxuKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4qXHJcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4qIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqL1xyXG5pbXBvcnQgeyBkaXZpZGVVUkwgfSBmcm9tICcuLi91dGlscy91dGlscyc7XHJcbmltcG9ydCBBZGRyZXNzQWxsb2NhdGlvbiBmcm9tICcuLi9hbGxvY2F0aW9uL0FkZHJlc3NBbGxvY2F0aW9uJztcclxuaW1wb3J0IFJlcG9ydGVyT2JqZWN0IGZyb20gJy4vUmVwb3J0ZXJPYmplY3QnO1xyXG5pbXBvcnQgT2JzZXJ2ZXJPYmplY3QgZnJvbSAnLi9PYnNlcnZlck9iamVjdCc7XHJcbmltcG9ydCB0djQgZnJvbSAnLi4vdXRpbHMvdHY0JztcclxuXHJcbmltcG9ydCB7TWVzc2FnZUZhY3Rvcnl9IGZyb20gJ3NlcnZpY2UtZnJhbWV3b3JrL2Rpc3QvTWVzc2FnZUZhY3RvcnknO1xyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgbWljYWVscGVkcm9zYUBnbWFpbC5jb21cclxuICogQ29yZSBTeW5jcm9uaXphdGlvbiBzeXN0ZW0uXHJcbiAqL1xyXG5jbGFzcyBTeW5jaGVyTWFuYWdlciB7XHJcbiAgLyogcHJpdmF0ZVxyXG4gIF91cmw6IFVSTFxyXG4gIF9idXM6IE1pbmlCdXNcclxuICBfcmVnaXN0cnk6IFJlZ2lzdHJ5XHJcbiAgX2FsbG9jYXRvcjogQWRkcmVzc0FsbG9jYXRpb25cclxuXHJcbiAgX3JlcG9ydGVyczogeyBPYmplY3RVUkw6IFJlcG9ydGVyT2JqZWN0IH1cclxuICBfb2JzZXJ2ZXJzOiB7IE9iamVjdFVSTDogT2JzZXJ2ZXJPYmplY3QgfVxyXG4gICovXHJcblxyXG4gIGNvbnN0cnVjdG9yKHJ1bnRpbWVVUkwsIGJ1cywgcmVnaXN0cnksIGNhdGFsb2csIHN0b3JhZ2VNYW5hZ2VyLCBhbGxvY2F0b3IpIHtcclxuICAgIGlmICghcnVudGltZVVSTCkgdGhyb3cgbmV3IEVycm9yKCdbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWRzIHRoZSBydW50aW1lVVJMIHBhcmFtZXRlcicpO1xyXG4gICAgaWYgKCFidXMpIHRocm93IG5ldyBFcnJvcignW1N5bmNoZXIgTWFuYWdlcl0gLSBuZWVkcyB0aGUgTWVzc2FnZUJ1cyBpbnN0YW5jZScpO1xyXG4gICAgaWYgKCFyZWdpc3RyeSkgdGhyb3cgbmV3IEVycm9yKCdbU3luY2hlciBNYW5hZ2VyXSAtIG5lZWRzIHRoZSBSZWdpc3RyeSBpbnN0YW5jZScpO1xyXG4gICAgaWYgKCFjYXRhbG9nKSB0aHJvdyBuZXcgRXJyb3IoJ1tTeW5jaGVyIE1hbmFnZXJdIC0gbmVlZHMgdGhlIFJ1bnRpbWVDYXRhbG9ndWUgaW5zdGFuY2UnKTtcclxuICAgIGlmICghc3RvcmFnZU1hbmFnZXIpIHRocm93IG5ldyBFcnJvcignW1N5bmNoZXIgTWFuYWdlcl0gLSBuZWVkIHRoZSBzdG9yYWdlTWFuYWdlciBpbnN0YW5jZScpO1xyXG5cclxuICAgIGxldCBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgX3RoaXMuX2J1cyA9IGJ1cztcclxuICAgIF90aGlzLl9yZWdpc3RyeSA9IHJlZ2lzdHJ5O1xyXG4gICAgX3RoaXMuX2NhdGFsb2cgPSBjYXRhbG9nO1xyXG4gICAgX3RoaXMuX3N0b3JhZ2VNYW5hZ2VyID0gc3RvcmFnZU1hbmFnZXI7XHJcblxyXG4gICAgLy9UT0RPOiB0aGVzZSBzaG91bGQgYmUgc2F2ZWQgaW4gcGVyc2lzdGVuY2UgZW5naW5lP1xyXG4gICAgX3RoaXMucnVudGltZVVSTCA9IHJ1bnRpbWVVUkw7XHJcbiAgICBfdGhpcy5fdXJsID0gcnVudGltZVVSTCArICcvc20nO1xyXG4gICAgX3RoaXMuX29iamVjdFVSTCA9IHJ1bnRpbWVVUkwgKyAnL29iamVjdC1hbGxvY2F0aW9uJztcclxuXHJcbiAgICBfdGhpcy5fcmVwb3J0ZXJzID0ge307XHJcbiAgICBfdGhpcy5fb2JzZXJ2ZXJzID0ge307XHJcblxyXG4gICAgLy9UT0RPOiB0aGlzIHNob3VsZCBub3QgYmUgaGFyZGNvZGVkIVxyXG4gICAgX3RoaXMuX2RvbWFpbiA9IGRpdmlkZVVSTChydW50aW1lVVJMKS5kb21haW47XHJcblxyXG4gICAgX3RoaXMuX21mID0gbmV3IE1lc3NhZ2VGYWN0b3J5KGZhbHNlLCB7fSk7XHJcblxyXG4gICAgaWYgKGFsbG9jYXRvcikge1xyXG4gICAgICBfdGhpcy5fYWxsb2NhdG9yID0gYWxsb2NhdG9yO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgX3RoaXMuX2FsbG9jYXRvciA9IG5ldyBBZGRyZXNzQWxsb2NhdGlvbihfdGhpcy5fb2JqZWN0VVJMLCBidXMsIF90aGlzLl9yZWdpc3RyeSk7XHJcbiAgICB9XHJcblxyXG4gICAgYnVzLmFkZExpc3RlbmVyKF90aGlzLl91cmwsIChtc2cpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coJ1N5bmNoZXJNYW5hZ2VyLVJDVjogJywgbXNnKTtcclxuICAgICAgc3dpdGNoIChtc2cudHlwZSkge1xyXG4gICAgICAgIGNhc2UgJ2NyZWF0ZSc6IF90aGlzLl9vbkNyZWF0ZShtc2cpOyBicmVhaztcclxuICAgICAgICBjYXNlICdkZWxldGUnOiBfdGhpcy5fb25EZWxldGUobXNnKTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnc3Vic2NyaWJlJzogX3RoaXMuX29uTG9jYWxTdWJzY3JpYmUobXNnKTsgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAndW5zdWJzY3JpYmUnOiBfdGhpcy5fb25Mb2NhbFVuU3Vic2NyaWJlKG1zZyk7IGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBfdGhpcy5fcmVzdW1lUmVwb3J0ZXJMaXN0ZW5lcnMoKTtcclxuICAgIC8vIF90aGlzLl9yZXN1bWVPYnNlcnZlckxpc3RlbmVycygpO1xyXG5cclxuICB9XHJcblxyXG4gIGdldCB1cmwoKSB7IHJldHVybiB0aGlzLl91cmw7IH1cclxuXHJcbiAgX3Jlc3VtZU9ic2VydmVyTGlzdGVuZXJzKCkge1xyXG5cclxuICAgIC8vIEdldCB0byB0aGUgc3RvcmFnZU1hbmFnZXIgZGF0YU9iamVjdE9ic2VydmVyc1xyXG4gICAgdGhpcy5fc3RvcmFnZU1hbmFnZXIuZ2V0KCdzeW5jaGVyTWFuYWdlcjpPYnNlcnZlcicpLnRoZW4oKG9ic2VydmVycykgPT4ge1xyXG4gICAgICBjb25zb2xlLmluZm8oJ1tzdG9yYWdlIG1hbmFnZXIgb2JzZXJ2ZXJdIC0gUmVzdW1lIFN1YnNjcmlwdGlvbnM6ICcsIG9ic2VydmVycyk7XHJcbiAgICAgIGlmICghb2JzZXJ2ZXJzKSByZXR1cm47XHJcblxyXG4gICAgICBPYmplY3Qua2V5cyhvYnNlcnZlcnMpLmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhrZXksIG9ic2VydmVyc1trZXldKTtcclxuICAgICAgICBsZXQgb2JqVVJMID0gb2JzZXJ2ZXJzW2tleV0udXJsO1xyXG4gICAgICAgIGxldCBjaGlsZHJlbnMgPSBvYnNlcnZlcnNba2V5XS5jaGlsZHJlbnM7XHJcblxyXG4gICAgICAgIGxldCBvYnNlcnZlciA9IHRoaXMuX29ic2VydmVyc1tvYmpVUkxdO1xyXG4gICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcclxuICAgICAgICAgIG9ic2VydmVyID0gbmV3IE9ic2VydmVyT2JqZWN0KHRoaXMsIG9ialVSTCwgY2hpbGRyZW5zKTtcclxuICAgICAgICAgIHRoaXMuX29ic2VydmVyc1tvYmpVUkxdID0gb2JzZXJ2ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3JlZ2lzdGVyIGFuIHVzZWQgaHlwZXJ0eSBzdWJzY3JpcHRpb25cclxuICAgICAgICBvYnNlcnZlci5yZXN1bWVTdWJzY3JpcHRpb24oa2V5KTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yOiAnLCBlcnJvcik7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIF9yZXN1bWVSZXBvcnRlckxpc3RlbmVycygpIHtcclxuICAgIGxldCByZXBvcnRlcjtcclxuXHJcbiAgICAvLyBHZXQgdG8gdGhlIHN0b3JhZ2VNYW5hZ2VyIGRhdGFPYmplY3RPYnNlcnZlcnNcclxuICAgIHRoaXMuX3N0b3JhZ2VNYW5hZ2VyLmdldCgnc3luY2hlck1hbmFnZXI6UmVwb3J0ZXInKS50aGVuKChyZXBvcnRlcnMpID0+IHtcclxuICAgICAgaWYgKCFyZXBvcnRlcnMpIHJldHVybjtcclxuXHJcbiAgICAgIE9iamVjdC5rZXlzKHJlcG9ydGVycykuZm9yRWFjaCgoa2V5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5pbmZvKCdbc3RvcmFnZSBtYW5hZ2VyIHJlcG9ydGVyXSAtIFJlc3VtZSBTdWJzY3JpcHRpb25zOiAnLCByZXBvcnRlcnMpO1xyXG4gICAgICAgIGxldCBvYmpVUkwgPSByZXBvcnRlcnNba2V5XS51cmw7XHJcbiAgICAgICAgbGV0IG93bmVyID0gcmVwb3J0ZXJzW2tleV0ub3duZXI7XHJcbiAgICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSByZXBvcnRlcnNba2V5XS5zdWJzY3JpcHRpb25zO1xyXG5cclxuICAgICAgICByZXBvcnRlciA9IG5ldyBSZXBvcnRlck9iamVjdCh0aGlzLCBvd25lciwgb2JqVVJMKTtcclxuICAgICAgICByZXBvcnRlci5yZXN1bWVTdWJzY3JpcHRpb25zKHN1YnNjcmlwdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3JlcG9ydGVyc1tvYmpVUkxdID0gcmVwb3J0ZXI7XHJcblxyXG4gICAgICAgIC8vIHJlcG9ydGVyLnJlc3VtZVN1YnNjcmlwdGlvbnMoc3Vic2NyaXB0aW9ucyk7XHJcbiAgICAgICAgLy8gcmVwb3J0ZXIuZm9yd2FyZFN1YnNjcmliZShbb2JqVVJMLCBzdWJzY3JpcHRpb25VUkxdKS50aGVuKCgpID0+IHtcclxuICAgICAgICAvLyAgIHRoaXMuX3JlcG9ydGVyc1tvYmpVUkxdID0gcmVwb3J0ZXI7XHJcbiAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6ICcsIGVycm9yKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLy9GTE9XLUlOOiBtZXNzYWdlIHJlY2VpdmVkIGZyb20gU3luY2hlciAtPiBjcmVhdGVcclxuICBfb25DcmVhdGUobXNnKSB7XHJcblxyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuICAgIGxldCBvd25lciA9IG1zZy5mcm9tO1xyXG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChtc2cuZnJvbSkuZG9tYWluO1xyXG5cclxuICAgIC8vIGlmIHJlcG9ydGVyIGlzIGluIGEgSW50ZXJ3b3JraW5nIFByb3Rvc3R1YiB0aGUgcnVudGltZSBkb21haW4gYmFja2VuZCBzZXJ2aWNlcyB3aWxsIGJlIHVzZWRcclxuICAgIGlmIChfdGhpcy5fcmVnaXN0cnkuaXNJbnRlcndvcmtpbmdQcm90b1N0dWIobXNnLmZyb20pKVxyXG4gICAgICBkb21haW4gPSBkaXZpZGVVUkwoX3RoaXMucnVudGltZVVSTCkuZG9tYWluO1xyXG5cclxuICAgIC8vIEhhY2sgdG8gaWdub3JlIGRhdGEgb2JqZWN0IGFkZHJlc3MgcmV1c2FnZSByZXF1ZXN0XHJcbiAgICBpZiAoIW1zZy5ib2R5LnNjaGVtYSkge1xyXG4vKiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxyXG4gICAgICAgIGJvZHk6IHsgY29kZTogNDA0LCBkZXNjcmlwdGlvbjogJ25vdCBmb3VuZCcgfVxyXG4gICAgICB9KTsqL1xyXG5cclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChtc2cuYm9keS5yZXNvdXJjZSkge1xyXG4gICAgICBfdGhpcy5fYXV0aG9yaXNlKG1zZywgbXNnLmJvZHkucmVzb3VyY2UpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgLy9nZXQgc2NoZW1hIGZyb20gY2F0YWxvZ3VlIGFuZCBwYXJzZSAtPiAoc2NoZW1lLCBjaGlsZHJlbilcclxuICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKG1zZy5ib2R5LnNjaGVtYSkudGhlbigoZGVzY3JpcHRvcikgPT4ge1xyXG5cclxuICAgICAgbGV0IHByb3BlcnRpZXMgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZS5wcm9wZXJ0aWVzO1xyXG4gICAgICBsZXQgc2NoZW1lID0gcHJvcGVydGllcy5zY2hlbWUgPyBwcm9wZXJ0aWVzLnNjaGVtZS5jb25zdGFudCA6ICdyZXNvdXJjZSc7XHJcbiAgICAgIGxldCBjaGlsZHJlbnMgPSBwcm9wZXJ0aWVzLmNoaWxkcmVuID8gcHJvcGVydGllcy5jaGlsZHJlbi5jb25zdGFudCA6IFtdO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coJ1NjaGVtZTogJywgc2NoZW1lKTtcclxuXHJcbiAgICAgIC8vIHNjaGVtYSB2YWxpZGF0aW9uXHJcbiAgICAgIGNvbnNvbGUubG9nKCdSdW5uaW5nIG9iamVjdCB2YWxpZGF0aW9uLi4uJyk7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgbGV0IG9iaiA9IG1zZy5ib2R5LnZhbHVlO1xyXG4gICAgICAgIGxldCBzY2hlbWEgPSBkZXNjcmlwdG9yLnNvdXJjZVBhY2thZ2Uuc291cmNlQ29kZTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHN1cHBvcnQgZm9yIHNjaGVtYSByZWZlcmVuY2luZyBpdHNlbGZcclxuICAgICAgICB0djQuYWRkU2NoZW1hKHNjaGVtYS5pZCwgc2NoZW1hKTtcclxuXHJcbiAgICAgICAgLy8gdmFsaWRhdGVcclxuICAgICAgICBsZXQgcmVzdWx0ID0gdHY0LnZhbGlkYXRlTXVsdGlwbGUob2JqLCBzY2hlbWEpO1xyXG5cclxuICAgICAgICAvLyBkZWxldGUgZXJyb3Igc3RhY2tzIHRvIGltcHJvdmUgbG9nZ2luZ1xyXG4gICAgICAgIHJlc3VsdC5lcnJvcnMuZm9yRWFjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgIGRlbGV0ZSBlcnJvci5zdGFjaztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gcHJpbnQgbW9yZSBkZXRhaWxzIGFib3V0IHZhbGlkYXRpb24gaWYgaXQgZmFpbHMgb3Igc2NoZW1hIGNvbnRhaW5zICRyZWZzXHJcbiAgICAgICAgaWYgKCFyZXN1bHQudmFsaWQgfHwgKHJlc3VsdC5taXNzaW5nLmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ09iamVjdCB2YWxpZGF0aW9uICcgKyAocmVzdWx0LnZhbGlkID8gJ3N1Y2NlZWRlZCwgYnV0IHNjaGVtYSBjb250YWluZWQgcmVmZXJlbmNlczonIDogJ2ZhaWxlZDonKSwgSlNPTi5zdHJpbmdpZnkocmVzdWx0LCBudWxsLCAyKSk7XHJcbiAgICAgICAgICBjb25zb2xlLmRlYnVnKCdPYmplY3Q6JywgSlNPTi5zdHJpbmdpZnkob2JqLCBudWxsLCAyKSwgJ1xcclxcblNjaGVtYTonLCBKU09OLnN0cmluZ2lmeShzY2hlbWEsIG51bGwsIDIpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coJ09iamVjdCB2YWxpZGF0aW9uIHN1Y2NlZWRlZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgZHVyaW5nIG9iamVjdCB2YWxpZGF0aW9uOicsIGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgb2JqZWN0SW5mbyA9IHtcclxuICAgICAgICBuYW1lOiBtc2cuYm9keS52YWx1ZS5uYW1lLFxyXG4gICAgICAgIHNjaGVtYTogbXNnLmJvZHkuc2NoZW1hLFxyXG4gICAgICAgIHJlcG9ydGVyOiBtc2cuYm9keS52YWx1ZS5yZXBvcnRlcixcclxuICAgICAgICByZXNvdXJjZXM6IG1zZy5ib2R5LnZhbHVlLnJlc291cmNlc1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgLy8gc2hvdWxkIHJlc3VzZSBkYXRhIG9iamVjdCB1cmwgaWYgaXQgcGFzc2VkXHJcbiAgICAgIGxldCByZXVzZURhdGFPYmplY3QgPSBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZTtcclxuXHJcbiAgICAgIC8vcmVxdWVzdCBhZGRyZXNzIGFsbG9jYXRpb24gb2YgYSBuZXcgb2JqZWN0IGZyb20gdGhlIG1zZy1ub2RlXHJcbiAgICAgIF90aGlzLl9hbGxvY2F0b3IuY3JlYXRlKGRvbWFpbiwgMSwgb2JqZWN0SW5mbywgc2NoZW1lLCByZXVzZURhdGFPYmplY3QpLnRoZW4oKGFsbG9jYXRlZCkgPT4ge1xyXG4gICAgICAgIGxldCBvYmpVUkwgPSBhbGxvY2F0ZWQuYWRkcmVzc1swXTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ0FMTE9DQVRPUiBDUkVBVEU6JywgYWxsb2NhdGVkKTtcclxuXHJcbiAgICAgICAgbGV0IHN1YnNjcmlwdGlvblVSTCA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJztcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1N1YnNjcmlwdGlvbiBVUkwnLCBzdWJzY3JpcHRpb25VUkwpO1xyXG5cclxuICAgICAgICAvL1RvIHJlZ2lzdGVyIHRoZSBkYXRhT2JqZWN0IGluIHRoZSBydW50aW1lUmVnaXN0cnlcclxuICAgICAgICBjb25zb2xlLmluZm8oJ1JlZ2lzdGVyIE9iamVjdDogJywgbXNnLmJvZHkudmFsdWUubmFtZSwgbXNnLmJvZHkudmFsdWUuc2NoZW1hLCBvYmpVUkwsIG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLCBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZXMpO1xyXG4gICAgICAgIF90aGlzLl9yZWdpc3RyeS5yZWdpc3RlckRhdGFPYmplY3QobXNnLmJvZHkudmFsdWUubmFtZSwgbXNnLmJvZHkudmFsdWUuc2NoZW1hLCBvYmpVUkwsIG1zZy5ib2R5LnZhbHVlLnJlcG9ydGVyLCBtc2cuYm9keS52YWx1ZS5yZXNvdXJjZXMsIGFsbG9jYXRlZCwgbXNnLmJvZHkuYXV0aG9yaXNlKS50aGVuKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZygnRGF0YU9iamVjdCBzdWNjZXNzZnVsbHkgcmVnaXN0ZXJlZCcsIHJlc29sdmUpO1xyXG5cclxuICAgICAgICAgIC8vYWxsIE9LIC0+IGNyZWF0ZSByZXBvcnRlciBhbmQgcmVnaXN0ZXIgbGlzdGVuZXJzXHJcbiAgICAgICAgICBsZXQgcmVwb3J0ZXI7XHJcblxyXG4gICAgICAgICAgaWYgKCF0aGlzLl9yZXBvcnRlcnNbb2JqVVJMXSkge1xyXG4gICAgICAgICAgICByZXBvcnRlciA9IG5ldyBSZXBvcnRlck9iamVjdChfdGhpcywgb3duZXIsIG9ialVSTCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXBvcnRlciA9IHRoaXMuX3JlcG9ydGVyc1tvYmpVUkxdO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJlcG9ydGVyLmZvcndhcmRTdWJzY3JpYmUoW29ialVSTCwgc3Vic2NyaXB0aW9uVVJMXSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIHJlcG9ydGVyLmFkZENoaWxkcmVucyhjaGlsZHJlbnMpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgIF90aGlzLl9yZXBvcnRlcnNbb2JqVVJMXSA9IHJlcG9ydGVyO1xyXG5cclxuICAgICAgICAgICAgICAvL0ZMT1ctT1VUOiBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlXHJcbiAgICAgICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lcixcclxuICAgICAgICAgICAgICAgIGJvZHk6IHsgY29kZTogMjAwLCByZXNvdXJjZTogb2JqVVJMLCBjaGlsZHJlblJlc291cmNlczogY2hpbGRyZW5zIH1cclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgLy9zZW5kIGNyZWF0ZSB0byBhbGwgb2JzZXJ2ZXJzLCByZXNwb25zZXMgd2lsbCBiZSBkZWxpdmVyIHRvIHRoZSBIeXBlcnR5IG93bmVyP1xyXG4gICAgICAgICAgICAgIC8vc2NoZWR1bGUgZm9yIG5leHQgY3ljbGUgbmVlZGVkLCBiZWNhdXNlIHRoZSBSZXBvcnRlciBzaG91bGQgYmUgYXZhaWxhYmxlLlxyXG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy93aWxsIGludml0ZSBvdGhlciBoeXBlcnRpZXNcclxuICAgICAgICAgICAgICAgIF90aGlzLl9hdXRob3Jpc2UobXNnLCBvYmpVUkwpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfSkuY2F0Y2goKHJlYXNvbikgPT4ge1xyXG4gICAgICAvL0ZMT1ctT1VUOiBlcnJvciBtZXNzYWdlIHJlc3BvbnNlIHRvIFN5bmNoZXIgLT4gY3JlYXRlXHJcbiAgICAgIGxldCByZXNwb25zZU1zZyA9IHtcclxuICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBvd25lcixcclxuICAgICAgICBib2R5OiB7IGNvZGU6IDUwMCwgZGVzYzogcmVhc29uIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2UocmVzcG9uc2VNc2cpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBfYXV0aG9yaXNlKG1zZywgb2JqVVJMKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG4gICAgbGV0IG9ialN1YnNjcmlwdG9yVVJMID0gb2JqVVJMICsgJy9zdWJzY3JpcHRpb24nO1xyXG5cclxuICAgIG1zZy5ib2R5LmF1dGhvcmlzZS5mb3JFYWNoKChoeXBlcnR5VVJMKSA9PiB7XHJcbiAgICAgIC8vRkxPVy1PVVQ6IHNlbmQgaW52aXRlcyB0byBsaXN0IG9mIHJlbW90ZSBTeW5jaGVyIC0+IF9vblJlbW90ZUNyZWF0ZSAtPiBvbk5vdGlmaWNhdGlvblxyXG4gICAgICBfdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICB0eXBlOiAnY3JlYXRlJywgZnJvbTogb2JqU3Vic2NyaXB0b3JVUkwsIHRvOiBoeXBlcnR5VVJMLFxyXG4gICAgICAgIGJvZHk6IHsgaWRlbnRpdHk6IG1zZy5ib2R5LmlkZW50aXR5LCBzb3VyY2U6IG1zZy5mcm9tLCB2YWx1ZTogbXNnLmJvZHkudmFsdWUsIHNjaGVtYTogbXNnLmJvZHkuc2NoZW1lIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIERhdGFPYmplY3RSZXBvcnRlciAtPiBkZWxldGVcclxuICBfb25EZWxldGUobXNnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBvYmpVUkwgPSBtc2cuYm9keS5yZXNvdXJjZTtcclxuXHJcbiAgICBsZXQgb2JqZWN0ID0gX3RoaXMuX3JlcG9ydGVyc1tvYmpVUkxdO1xyXG4gICAgaWYgKG9iamVjdCkge1xyXG4gICAgICAvL1RPRE86IGlzIHRoZXJlIGFueSBwb2xpY3kgdmVyaWZpY2F0aW9uIGJlZm9yZSBkZWxldGU/XHJcbiAgICAgIG9iamVjdC5kZWxldGUoKTtcclxuXHJcbiAgICAgIC8vVE9ETzogdW5yZWdpc3RlciBvYmplY3Q/XHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxyXG4gICAgICAgIGJvZHk6IHsgY29kZTogMjAwIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvL0ZMT1ctSU46IG1lc3NhZ2UgcmVjZWl2ZWQgZnJvbSBsb2NhbCBTeW5jaGVyIC0+IHN1YnNjcmliZVxyXG4gIF9vbkxvY2FsU3Vic2NyaWJlKG1zZykge1xyXG4gICAgbGV0IF90aGlzID0gdGhpcztcclxuXHJcbiAgICBpZiAoIW1zZy5ib2R5LnJlc291cmNlKSB7XHJcbiAgICAvKiAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgaWQ6IG1zZy5pZCwgdHlwZTogJ3Jlc3BvbnNlJywgZnJvbTogbXNnLnRvLCB0bzogbXNnLmZyb20sXHJcbiAgICAgICAgYm9keTogeyBjb2RlOiA0MDQsIGRlc2NyaXB0aW9uOiAnbm90IGZvdW5kJyB9XHJcbiAgICAgIH0pOyovXHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaHlwZXJ0eVVSTCA9IG1zZy5mcm9tO1xyXG4gICAgbGV0IG9ialVSTCA9IG1zZy5ib2R5LnJlc291cmNlO1xyXG4gICAgbGV0IG9ialVSTFN1YnNjcmlwdGlvbiA9IG9ialVSTCArICcvc3Vic2NyaXB0aW9uJztcclxuICAgIGxldCBjaGlsZEJhc2VVUkwgPSBvYmpVUkwgKyAnL2NoaWxkcmVuLyc7XHJcblxyXG4gICAgbGV0IGRvbWFpbiA9IGRpdmlkZVVSTChvYmpVUkwpLmRvbWFpbjtcclxuXHJcbiAgICAvL2dldCBzY2hlbWEgZnJvbSBjYXRhbG9ndWUgYW5kIHBhcnNlIC0+IChjaGlsZHJlbilcclxuICAgIF90aGlzLl9jYXRhbG9nLmdldERhdGFTY2hlbWFEZXNjcmlwdG9yKG1zZy5ib2R5LnNjaGVtYSkudGhlbigoZGVzY3JpcHRvcikgPT4ge1xyXG4gICAgICBsZXQgcHJvcGVydGllcyA9IGRlc2NyaXB0b3Iuc291cmNlUGFja2FnZS5zb3VyY2VDb2RlLnByb3BlcnRpZXM7XHJcbiAgICAgIGxldCBjaGlsZHJlbnMgPSBwcm9wZXJ0aWVzLmNoaWxkcmVuID8gcHJvcGVydGllcy5jaGlsZHJlbi5jb25zdGFudCA6IFtdO1xyXG5cclxuICAgICAgLy9jaGlsZHJlbiBhZGRyZXNzZXNcclxuICAgICAgbGV0IHN1YnNjcmlwdGlvbnMgPSBbXTtcclxuICAgICAgc3Vic2NyaXB0aW9ucy5wdXNoKG9ialVSTCArICcvY2hhbmdlcycpO1xyXG4gICAgICBjaGlsZHJlbnMuZm9yRWFjaCgoY2hpbGQpID0+IHN1YnNjcmlwdGlvbnMucHVzaChjaGlsZEJhc2VVUkwgKyBjaGlsZCkpO1xyXG5cclxuICAgICAgLy9GTE9XLU9VVDogc3Vic2NyaWJlIG1lc3NhZ2UgdG8gdGhlIG1zZy1ub2RlLCByZWdpc3RlcmluZyBsaXN0ZW5lcnMgb24gdGhlIGJyb2tlclxyXG4gICAgICBsZXQgbm9kZVN1YnNjcmliZU1zZyA9IHtcclxuICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86ICdkb21haW46Ly9tc2ctbm9kZS4nICsgZG9tYWluICsgJy9zbScsXHJcbiAgICAgICAgYm9keTogeyBpZGVudGl0eTogbXNnLmJvZHkuaWRlbnRpdHksIHN1YnNjcmliZTogc3Vic2NyaXB0aW9ucywgc291cmNlOiBoeXBlcnR5VVJMIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIC8vc3Vic2NyaWJlIGluIG1zZy1ub2RlXHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uobm9kZVN1YnNjcmliZU1zZywgKHJlcGx5KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ25vZGUtc3Vic2NyaWJlLXJlc3BvbnNlKG9ic2VydmVyKTogJywgcmVwbHkpO1xyXG4gICAgICAgIGlmIChyZXBseS5ib2R5LmNvZGUgPT09IDIwMCkge1xyXG5cclxuICAgICAgICAgIC8vRkxPVy1PVVQ6IHJlcGx5IHdpdGggcHJvdmlzaW9uYWwgcmVzcG9uc2VcclxuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgICAgICBpZDogbXNnLmlkLCB0eXBlOiAncmVzcG9uc2UnLCBmcm9tOiBtc2cudG8sIHRvOiBoeXBlcnR5VVJMLFxyXG4gICAgICAgICAgICBib2R5OiB7IGNvZGU6IDEwMCwgY2hpbGRyZW5SZXNvdXJjZXM6IGNoaWxkcmVucyB9XHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAvL0ZMT1ctT1VUOiBzdWJzY3JpYmUgbWVzc2FnZSB0byByZW1vdGUgUmVwb3J0ZXJPYmplY3QgLT4gX29uUmVtb3RlU3Vic2NyaWJlXHJcbiAgICAgICAgICBsZXQgb2JqU3Vic2NyaWJlTXNnID0ge1xyXG4gICAgICAgICAgICB0eXBlOiAnc3Vic2NyaWJlJywgZnJvbTogX3RoaXMuX3VybCwgdG86IG9ialVSTFN1YnNjcmlwdGlvbixcclxuICAgICAgICAgICAgYm9keTogeyBpZGVudGl0eTogbm9kZVN1YnNjcmliZU1zZy5ib2R5LmlkZW50aXR5LCBzdWJzY3JpYmVyOiBoeXBlcnR5VVJMIH1cclxuICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgLy9zdWJzY3JpYmUgdG8gcmVwb3J0ZXIgU01cclxuICAgICAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uob2JqU3Vic2NyaWJlTXNnLCAocmVwbHkpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlcG9ydGVyLXN1YnNjcmliZS1yZXNwb25zZTogJywgcmVwbHkpO1xyXG4gICAgICAgICAgICBpZiAocmVwbHkuYm9keS5jb2RlID09PSAyMDApIHtcclxuXHJcbiAgICAgICAgICAgICAgbGV0IG9ic2VydmVyID0gX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdO1xyXG4gICAgICAgICAgICAgIGlmICghb2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyID0gbmV3IE9ic2VydmVyT2JqZWN0KF90aGlzLCBvYmpVUkwsIGNoaWxkcmVucyk7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5fb2JzZXJ2ZXJzW29ialVSTF0gPSBvYnNlcnZlcjtcclxuICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgIC8vcmVnaXN0ZXIgbmV3IGh5cGVydHkgc3Vic2NyaXB0aW9uXHJcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuYWRkU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpO1xyXG5cclxuICAgICAgICAgICAgICAvL2ZvcndhcmQgdG8gaHlwZXJ0eTpcclxuICAgICAgICAgICAgICByZXBseS5pZCA9IG1zZy5pZDtcclxuICAgICAgICAgICAgICByZXBseS5mcm9tID0gX3RoaXMuX3VybDtcclxuICAgICAgICAgICAgICByZXBseS50byA9IGh5cGVydHlVUkw7XHJcbiAgICAgICAgICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKHJlcGx5KTtcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgLy9saXN0ZW5lciByZWplY3RlZFxyXG4gICAgICAgICAgX3RoaXMuX2J1cy5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IGh5cGVydHlVUkwsXHJcbiAgICAgICAgICAgIGJvZHk6IHJlcGx5LmJvZHlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8vRkxPVy1JTjogbWVzc2FnZSByZWNlaXZlZCBmcm9tIGxvY2FsIERhdGFPYmplY3RPYnNlcnZlciAtPiB1bnN1YnNjcmliZVxyXG4gIF9vbkxvY2FsVW5TdWJzY3JpYmUobXNnKSB7XHJcbiAgICBsZXQgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgIGxldCBoeXBlcnR5VVJMID0gbXNnLmZyb207XHJcbiAgICBsZXQgb2JqVVJMID0gbXNnLmJvZHkucmVzb3VyY2U7XHJcblxyXG4gICAgbGV0IG9ic2VydmVyID0gX3RoaXMuX29ic2VydmVyc1tvYmpVUkxdO1xyXG4gICAgaWYgKG9ic2VydmVyKSB7XHJcbiAgICAgIC8vVE9ETzogaXMgdGhlcmUgYW55IHBvbGljeSB2ZXJpZmljYXRpb24gYmVmb3JlIGRlbGV0ZT9cclxuICAgICAgb2JzZXJ2ZXIucmVtb3ZlU3Vic2NyaXB0aW9uKGh5cGVydHlVUkwpO1xyXG5cclxuICAgICAgLy9UT0RPOiBkZXN0cm95IG9iamVjdCBpbiB0aGUgcmVnaXN0cnk/XHJcbiAgICAgIF90aGlzLl9idXMucG9zdE1lc3NhZ2Uoe1xyXG4gICAgICAgIGlkOiBtc2cuaWQsIHR5cGU6ICdyZXNwb25zZScsIGZyb206IG1zZy50bywgdG86IG1zZy5mcm9tLFxyXG4gICAgICAgIGJvZHk6IHsgY29kZTogMjAwIH1cclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvL1RPRE86IHJlbW92ZSBPYmplY3QgaWYgbm8gbW9yZSBzdWJzY3JpcHRpb24/XHJcbiAgICAgIC8vZGVsZXRlIF90aGlzLl9vYnNlcnZlcnNbb2JqVVJMXTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTeW5jaGVyTWFuYWdlcjtcclxuIiwiLypcclxuIEF1dGhvcjogR2VyYWludCBMdWZmIGFuZCBvdGhlcnNcclxuIFllYXI6IDIwMTNcclxuXHJcbiBUaGlzIGNvZGUgaXMgcmVsZWFzZWQgaW50byB0aGUgXCJwdWJsaWMgZG9tYWluXCIgYnkgaXRzIGF1dGhvcihzKS4gIEFueWJvZHkgbWF5IHVzZSwgYWx0ZXIgYW5kIGRpc3RyaWJ1dGUgdGhlIGNvZGUgd2l0aG91dCByZXN0cmljdGlvbi4gIFRoZSBhdXRob3IgbWFrZXMgbm8gZ3VhcmFudGVlcywgYW5kIHRha2VzIG5vIGxpYWJpbGl0eSBvZiBhbnkga2luZCBmb3IgdXNlIG9mIHRoaXMgY29kZS5cclxuXHJcbiBJZiB5b3UgZmluZCBhIGJ1ZyBvciBtYWtlIGFuIGltcHJvdmVtZW50LCBpdCB3b3VsZCBiZSBjb3VydGVvdXMgdG8gbGV0IHRoZSBhdXRob3Iga25vdywgYnV0IGl0IGlzIG5vdCBjb21wdWxzb3J5LlxyXG4gKi9cclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2tleXM/cmVkaXJlY3Rsb2NhbGU9ZW4tVVMmcmVkaXJlY3RzbHVnPUphdmFTY3JpcHQlMkZSZWZlcmVuY2UlMkZHbG9iYWxfT2JqZWN0cyUyRk9iamVjdCUyRmtleXNcclxuaWYgKCFPYmplY3Qua2V5cykge1xyXG4gICAgT2JqZWN0LmtleXMgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXHJcbiAgICAgICAgICAgIGhhc0RvbnRFbnVtQnVnID0gISh7dG9TdHJpbmc6IG51bGx9KS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKSxcclxuICAgICAgICAgICAgZG9udEVudW1zID0gW1xyXG4gICAgICAgICAgICAgICAgJ3RvU3RyaW5nJyxcclxuICAgICAgICAgICAgICAgICd0b0xvY2FsZVN0cmluZycsXHJcbiAgICAgICAgICAgICAgICAndmFsdWVPZicsXHJcbiAgICAgICAgICAgICAgICAnaGFzT3duUHJvcGVydHknLFxyXG4gICAgICAgICAgICAgICAgJ2lzUHJvdG90eXBlT2YnLFxyXG4gICAgICAgICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcclxuICAgICAgICAgICAgICAgICdjb25zdHJ1Y3RvcidcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZG9udEVudW1zTGVuZ3RoID0gZG9udEVudW1zLmxlbmd0aDtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmogIT09ICdmdW5jdGlvbicgfHwgb2JqID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3Qua2V5cyBjYWxsZWQgb24gbm9uLW9iamVjdCcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIG9iaikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByb3ApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaGFzRG9udEVudW1CdWcpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZG9udEVudW1zTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGRvbnRFbnVtc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZG9udEVudW1zW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9O1xyXG4gICAgfSkoKTtcclxufVxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvY3JlYXRlXHJcbmlmICghT2JqZWN0LmNyZWF0ZSkge1xyXG4gICAgT2JqZWN0LmNyZWF0ZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gRigpIHtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobykge1xyXG4gICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QuY3JlYXRlIGltcGxlbWVudGF0aW9uIG9ubHkgYWNjZXB0cyBvbmUgcGFyYW1ldGVyLicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEYucHJvdG90eXBlID0gbztcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBGKCk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pKCk7XHJcbn1cclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvaXNBcnJheT9yZWRpcmVjdGxvY2FsZT1lbi1VUyZyZWRpcmVjdHNsdWc9SmF2YVNjcmlwdCUyRlJlZmVyZW5jZSUyRkdsb2JhbF9PYmplY3RzJTJGQXJyYXklMkZpc0FycmF5XHJcbmlmICghQXJyYXkuaXNBcnJheSkge1xyXG4gICAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uICh2QXJnKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2QXJnKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiO1xyXG4gICAgfTtcclxufVxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pbmRleE9mP3JlZGlyZWN0bG9jYWxlPWVuLVVTJnJlZGlyZWN0c2x1Zz1KYXZhU2NyaXB0JTJGUmVmZXJlbmNlJTJGR2xvYmFsX09iamVjdHMlMkZBcnJheSUyRmluZGV4T2ZcclxuaWYgKCFBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xyXG4gICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiAoc2VhcmNoRWxlbWVudCAvKiwgZnJvbUluZGV4ICovKSB7XHJcbiAgICAgICAgaWYgKHRoaXMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdCA9IE9iamVjdCh0aGlzKTtcclxuICAgICAgICB2YXIgbGVuID0gdC5sZW5ndGggPj4+IDA7XHJcblxyXG4gICAgICAgIGlmIChsZW4gPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbiA9IDA7XHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIG4gPSBOdW1iZXIoYXJndW1lbnRzWzFdKTtcclxuICAgICAgICAgICAgaWYgKG4gIT09IG4pIHsgLy8gc2hvcnRjdXQgZm9yIHZlcmlmeWluZyBpZiBpdCdzIE5hTlxyXG4gICAgICAgICAgICAgICAgbiA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobiAhPT0gMCAmJiBuICE9PSBJbmZpbml0eSAmJiBuICE9PSAtSW5maW5pdHkpIHtcclxuICAgICAgICAgICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG4gPj0gbGVuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGsgPSBuID49IDAgPyBuIDogTWF0aC5tYXgobGVuIC0gTWF0aC5hYnMobiksIDApO1xyXG4gICAgICAgIGZvciAoOyBrIDwgbGVuOyBrKyspIHtcclxuICAgICAgICAgICAgaWYgKGsgaW4gdCAmJiB0W2tdID09PSBzZWFyY2hFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vLyBHcnVuZ2V5IE9iamVjdC5pc0Zyb3plbiBoYWNrXHJcbmlmICghT2JqZWN0LmlzRnJvemVuKSB7XHJcbiAgICBPYmplY3QuaXNGcm96ZW4gPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IFwidHY0X3Rlc3RfZnJvemVuX2tleVwiO1xyXG4gICAgICAgIHdoaWxlIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICBrZXkgKz0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgb2JqW2tleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICBkZWxldGUgb2JqW2tleV07XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuLy8gQmFzZWQgb246IGh0dHBzOi8vZ2l0aHViLmNvbS9nZXJhaW50bHVmZi91cmktdGVtcGxhdGVzLCBidXQgd2l0aCBhbGwgdGhlIGRlLXN1YnN0aXR1dGlvbiBzdHVmZiByZW1vdmVkXHJcblxyXG52YXIgdXJpVGVtcGxhdGVHbG9iYWxNb2RpZmllcnMgPSB7XHJcbiAgICBcIitcIjogdHJ1ZSxcclxuICAgIFwiI1wiOiB0cnVlLFxyXG4gICAgXCIuXCI6IHRydWUsXHJcbiAgICBcIi9cIjogdHJ1ZSxcclxuICAgIFwiO1wiOiB0cnVlLFxyXG4gICAgXCI/XCI6IHRydWUsXHJcbiAgICBcIiZcIjogdHJ1ZVxyXG59O1xyXG52YXIgdXJpVGVtcGxhdGVTdWZmaWNlcyA9IHtcclxuICAgIFwiKlwiOiB0cnVlXHJcbn07XHJcblxyXG5mdW5jdGlvbiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHN0cmluZykge1xyXG4gICAgcmV0dXJuIGVuY29kZVVSSShzdHJpbmcpLnJlcGxhY2UoLyUyNVswLTldWzAtOV0vZywgZnVuY3Rpb24gKGRvdWJsZUVuY29kZWQpIHtcclxuICAgICAgICByZXR1cm4gXCIlXCIgKyBkb3VibGVFbmNvZGVkLnN1YnN0cmluZygzKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1cmlUZW1wbGF0ZVN1YnN0aXR1dGlvbihzcGVjKSB7XHJcbiAgICB2YXIgbW9kaWZpZXIgPSBcIlwiO1xyXG4gICAgaWYgKHVyaVRlbXBsYXRlR2xvYmFsTW9kaWZpZXJzW3NwZWMuY2hhckF0KDApXSkge1xyXG4gICAgICAgIG1vZGlmaWVyID0gc3BlYy5jaGFyQXQoMCk7XHJcbiAgICAgICAgc3BlYyA9IHNwZWMuc3Vic3RyaW5nKDEpO1xyXG4gICAgfVxyXG4gICAgdmFyIHNlcGFyYXRvciA9IFwiXCI7XHJcbiAgICB2YXIgcHJlZml4ID0gXCJcIjtcclxuICAgIHZhciBzaG91bGRFc2NhcGUgPSB0cnVlO1xyXG4gICAgdmFyIHNob3dWYXJpYWJsZXMgPSBmYWxzZTtcclxuICAgIHZhciB0cmltRW1wdHlTdHJpbmcgPSBmYWxzZTtcclxuICAgIGlmIChtb2RpZmllciA9PT0gJysnKSB7XHJcbiAgICAgICAgc2hvdWxkRXNjYXBlID0gZmFsc2U7XHJcbiAgICB9IGVsc2UgaWYgKG1vZGlmaWVyID09PSBcIi5cIikge1xyXG4gICAgICAgIHByZWZpeCA9IFwiLlwiO1xyXG4gICAgICAgIHNlcGFyYXRvciA9IFwiLlwiO1xyXG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gXCIvXCIpIHtcclxuICAgICAgICBwcmVmaXggPSBcIi9cIjtcclxuICAgICAgICBzZXBhcmF0b3IgPSBcIi9cIjtcclxuICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICcjJykge1xyXG4gICAgICAgIHByZWZpeCA9IFwiI1wiO1xyXG4gICAgICAgIHNob3VsZEVzY2FwZSA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJzsnKSB7XHJcbiAgICAgICAgcHJlZml4ID0gXCI7XCI7XHJcbiAgICAgICAgc2VwYXJhdG9yID0gXCI7XCI7XHJcbiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7XHJcbiAgICAgICAgdHJpbUVtcHR5U3RyaW5nID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAobW9kaWZpZXIgPT09ICc/Jykge1xyXG4gICAgICAgIHByZWZpeCA9IFwiP1wiO1xyXG4gICAgICAgIHNlcGFyYXRvciA9IFwiJlwiO1xyXG4gICAgICAgIHNob3dWYXJpYWJsZXMgPSB0cnVlO1xyXG4gICAgfSBlbHNlIGlmIChtb2RpZmllciA9PT0gJyYnKSB7XHJcbiAgICAgICAgcHJlZml4ID0gXCImXCI7XHJcbiAgICAgICAgc2VwYXJhdG9yID0gXCImXCI7XHJcbiAgICAgICAgc2hvd1ZhcmlhYmxlcyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHZhck5hbWVzID0gW107XHJcbiAgICB2YXIgdmFyTGlzdCA9IHNwZWMuc3BsaXQoXCIsXCIpO1xyXG4gICAgdmFyIHZhclNwZWNzID0gW107XHJcbiAgICB2YXIgdmFyU3BlY01hcCA9IHt9O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHZhck5hbWUgPSB2YXJMaXN0W2ldO1xyXG4gICAgICAgIHZhciB0cnVuY2F0ZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHZhck5hbWUuaW5kZXhPZihcIjpcIikgIT09IC0xKSB7XHJcbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHZhck5hbWUuc3BsaXQoXCI6XCIpO1xyXG4gICAgICAgICAgICB2YXJOYW1lID0gcGFydHNbMF07XHJcbiAgICAgICAgICAgIHRydW5jYXRlID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN1ZmZpY2VzID0ge307XHJcbiAgICAgICAgd2hpbGUgKHVyaVRlbXBsYXRlU3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0pIHtcclxuICAgICAgICAgICAgc3VmZmljZXNbdmFyTmFtZS5jaGFyQXQodmFyTmFtZS5sZW5ndGggLSAxKV0gPSB0cnVlO1xyXG4gICAgICAgICAgICB2YXJOYW1lID0gdmFyTmFtZS5zdWJzdHJpbmcoMCwgdmFyTmFtZS5sZW5ndGggLSAxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhclNwZWMgPSB7XHJcbiAgICAgICAgICAgIHRydW5jYXRlOiB0cnVuY2F0ZSxcclxuICAgICAgICAgICAgbmFtZTogdmFyTmFtZSxcclxuICAgICAgICAgICAgc3VmZmljZXM6IHN1ZmZpY2VzXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXJTcGVjcy5wdXNoKHZhclNwZWMpO1xyXG4gICAgICAgIHZhclNwZWNNYXBbdmFyTmFtZV0gPSB2YXJTcGVjO1xyXG4gICAgICAgIHZhck5hbWVzLnB1c2godmFyTmFtZSk7XHJcbiAgICB9XHJcbiAgICB2YXIgc3ViRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFsdWVGdW5jdGlvbikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBcIlwiO1xyXG4gICAgICAgIHZhciBzdGFydEluZGV4ID0gMDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhclNwZWNzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB2YXJTcGVjID0gdmFyU3BlY3NbaV07XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlRnVuY3Rpb24odmFyU3BlYy5uYW1lKTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMCkgfHwgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCkpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0SW5kZXgrKztcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpID09PSBzdGFydEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gcHJlZml4O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IChzZXBhcmF0b3IgfHwgXCIsXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNob3dWYXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gdmFyU3BlYy5uYW1lICsgXCI9XCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLnN1ZmZpY2VzWycqJ10gPyAoc2VwYXJhdG9yIHx8IFwiLFwiKSA6IFwiLFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFyU3BlYy5zdWZmaWNlc1snKiddICYmIHNob3dWYXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWUgKyBcIj1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gc2hvdWxkRXNjYXBlID8gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlW2pdKS5yZXBsYWNlKC8hL2csIFwiJTIxXCIpIDogbm90UmVhbGx5UGVyY2VudEVuY29kZSh2YWx1ZVtqXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcyAmJiAhdmFyU3BlYy5zdWZmaWNlc1snKiddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMubmFtZSArIFwiPVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/IChzZXBhcmF0b3IgfHwgXCIsXCIpIDogXCIsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHNob3VsZEVzY2FwZSA/IGVuY29kZVVSSUNvbXBvbmVudChrZXkpLnJlcGxhY2UoLyEvZywgXCIlMjFcIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHZhclNwZWMuc3VmZmljZXNbJyonXSA/ICc9JyA6IFwiLFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWVba2V5XSkucmVwbGFjZSgvIS9nLCBcIiUyMVwiKSA6IG5vdFJlYWxseVBlcmNlbnRFbmNvZGUodmFsdWVba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2hvd1ZhcmlhYmxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB2YXJTcGVjLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0cmltRW1wdHlTdHJpbmcgfHwgdmFsdWUgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiPVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YXJTcGVjLnRydW5jYXRlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2YXJTcGVjLnRydW5jYXRlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzaG91bGRFc2NhcGUgPyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpLnJlcGxhY2UoLyEvZywgXCIlMjFcIikgOiBub3RSZWFsbHlQZXJjZW50RW5jb2RlKHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICAgIHN1YkZ1bmN0aW9uLnZhck5hbWVzID0gdmFyTmFtZXM7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHByZWZpeDogcHJlZml4LFxyXG4gICAgICAgIHN1YnN0aXR1dGlvbjogc3ViRnVuY3Rpb25cclxuICAgIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFVyaVRlbXBsYXRlKHRlbXBsYXRlKSB7XHJcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVXJpVGVtcGxhdGUpKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVcmlUZW1wbGF0ZSh0ZW1wbGF0ZSk7XHJcbiAgICB9XHJcbiAgICB2YXIgcGFydHMgPSB0ZW1wbGF0ZS5zcGxpdChcIntcIik7XHJcbiAgICB2YXIgdGV4dFBhcnRzID0gW3BhcnRzLnNoaWZ0KCldO1xyXG4gICAgdmFyIHByZWZpeGVzID0gW107XHJcbiAgICB2YXIgc3Vic3RpdHV0aW9ucyA9IFtdO1xyXG4gICAgdmFyIHZhck5hbWVzID0gW107XHJcbiAgICB3aGlsZSAocGFydHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciBwYXJ0ID0gcGFydHMuc2hpZnQoKTtcclxuICAgICAgICB2YXIgc3BlYyA9IHBhcnQuc3BsaXQoXCJ9XCIpWzBdO1xyXG4gICAgICAgIHZhciByZW1haW5kZXIgPSBwYXJ0LnN1YnN0cmluZyhzcGVjLmxlbmd0aCArIDEpO1xyXG4gICAgICAgIHZhciBmdW5jcyA9IHVyaVRlbXBsYXRlU3Vic3RpdHV0aW9uKHNwZWMpO1xyXG4gICAgICAgIHN1YnN0aXR1dGlvbnMucHVzaChmdW5jcy5zdWJzdGl0dXRpb24pO1xyXG4gICAgICAgIHByZWZpeGVzLnB1c2goZnVuY3MucHJlZml4KTtcclxuICAgICAgICB0ZXh0UGFydHMucHVzaChyZW1haW5kZXIpO1xyXG4gICAgICAgIHZhck5hbWVzID0gdmFyTmFtZXMuY29uY2F0KGZ1bmNzLnN1YnN0aXR1dGlvbi52YXJOYW1lcyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZpbGwgPSBmdW5jdGlvbiAodmFsdWVGdW5jdGlvbikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0ZXh0UGFydHNbMF07XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzdGl0dXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb25zW2ldO1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gc3Vic3RpdHV0aW9uKHZhbHVlRnVuY3Rpb24pO1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gdGV4dFBhcnRzW2kgKyAxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcbiAgICB0aGlzLnZhck5hbWVzID0gdmFyTmFtZXM7XHJcbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XHJcbn1cclxuXHJcblVyaVRlbXBsYXRlLnByb3RvdHlwZSA9IHtcclxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGVtcGxhdGU7XHJcbiAgICB9LFxyXG4gICAgZmlsbEZyb21PYmplY3Q6IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWxsKGZ1bmN0aW9uICh2YXJOYW1lKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvYmpbdmFyTmFtZV07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07XHJcbnZhciBWYWxpZGF0b3JDb250ZXh0ID0gZnVuY3Rpb24gVmFsaWRhdG9yQ29udGV4dChwYXJlbnQsIGNvbGxlY3RNdWx0aXBsZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIHRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgIHRoaXMubWlzc2luZyA9IFtdO1xyXG4gICAgdGhpcy5taXNzaW5nTWFwID0ge307XHJcbiAgICB0aGlzLmZvcm1hdFZhbGlkYXRvcnMgPSBwYXJlbnQgPyBPYmplY3QuY3JlYXRlKHBhcmVudC5mb3JtYXRWYWxpZGF0b3JzKSA6IHt9O1xyXG4gICAgdGhpcy5zY2hlbWFzID0gcGFyZW50ID8gT2JqZWN0LmNyZWF0ZShwYXJlbnQuc2NoZW1hcykgOiB7fTtcclxuICAgIHRoaXMuY29sbGVjdE11bHRpcGxlID0gY29sbGVjdE11bHRpcGxlO1xyXG4gICAgdGhpcy5lcnJvcnMgPSBbXTtcclxuICAgIHRoaXMuaGFuZGxlRXJyb3IgPSBjb2xsZWN0TXVsdGlwbGUgPyB0aGlzLmNvbGxlY3RFcnJvciA6IHRoaXMucmV0dXJuRXJyb3I7XHJcbiAgICBpZiAoY2hlY2tSZWN1cnNpdmUpIHtcclxuICAgICAgICB0aGlzLmNoZWNrUmVjdXJzaXZlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNjYW5uZWQgPSBbXTtcclxuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4gPSBbXTtcclxuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107XHJcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9ycyA9IFtdO1xyXG4gICAgICAgIHRoaXMudmFsaWRhdGVkU2NoZW1hc0tleSA9ICd0djRfdmFsaWRhdGlvbl9pZCc7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5ID0gJ3R2NF92YWxpZGF0aW9uX2Vycm9yc19pZCc7XHJcbiAgICB9XHJcbiAgICBpZiAodHJhY2tVbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgIHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcclxuICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XHJcbiAgICB9XHJcbiAgICB0aGlzLmVycm9yUmVwb3J0ZXIgPSBlcnJvclJlcG9ydGVyIHx8IGRlZmF1bHRFcnJvclJlcG9ydGVyKCdlbicpO1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLmVycm9yUmVwb3J0ZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdkZWJ1ZycpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5kZWZpbmVkS2V5d29yZHMgPSB7fTtcclxuICAgIGlmIChwYXJlbnQpIHtcclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyZW50LmRlZmluZWRLZXl3b3Jkcykge1xyXG4gICAgICAgICAgICB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXldID0gcGFyZW50LmRlZmluZWRLZXl3b3Jkc1trZXldLnNsaWNlKDApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUuZGVmaW5lS2V5d29yZCA9IGZ1bmN0aW9uIChrZXl3b3JkLCBrZXl3b3JkRnVuY3Rpb24pIHtcclxuICAgIHRoaXMuZGVmaW5lZEtleXdvcmRzW2tleXdvcmRdID0gdGhpcy5kZWZpbmVkS2V5d29yZHNba2V5d29yZF0gfHwgW107XHJcbiAgICB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXl3b3JkXS5wdXNoKGtleXdvcmRGdW5jdGlvbik7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmNyZWF0ZUVycm9yID0gZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMsIGRhdGEsIHNjaGVtYSkge1xyXG4gICAgdmFyIGVycm9yID0gbmV3IFZhbGlkYXRpb25FcnJvcihjb2RlLCBtZXNzYWdlUGFyYW1zLCBkYXRhUGF0aCwgc2NoZW1hUGF0aCwgc3ViRXJyb3JzKTtcclxuICAgIGVycm9yLm1lc3NhZ2UgPSB0aGlzLmVycm9yUmVwb3J0ZXIoZXJyb3IsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJldHVybkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICByZXR1cm4gZXJyb3I7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmNvbGxlY3RFcnJvciA9IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMucHVzaChlcnJvcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucHJlZml4RXJyb3JzID0gZnVuY3Rpb24gKHN0YXJ0SW5kZXgsIGRhdGFQYXRoLCBzY2hlbWFQYXRoKSB7XHJcbiAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRoaXMuZXJyb3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdGhpcy5lcnJvcnNbaV0gPSB0aGlzLmVycm9yc1tpXS5wcmVmaXhXaXRoKGRhdGFQYXRoLCBzY2hlbWFQYXRoKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5iYW5Vbmtub3duUHJvcGVydGllcyA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEpIHtcclxuICAgIGZvciAodmFyIHVua25vd25QYXRoIGluIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMpIHtcclxuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuVU5LTk9XTl9QUk9QRVJUWSwge3BhdGg6IHVua25vd25QYXRofSwgdW5rbm93blBhdGgsIFwiXCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmFkZEZvcm1hdCA9IGZ1bmN0aW9uIChmb3JtYXQsIHZhbGlkYXRvcikge1xyXG4gICAgaWYgKHR5cGVvZiBmb3JtYXQgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGZvcm1hdCkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZEZvcm1hdChrZXksIGZvcm1hdFtrZXldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZvcm1hdFZhbGlkYXRvcnNbZm9ybWF0XSA9IHZhbGlkYXRvcjtcclxufTtcclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUucmVzb2x2ZVJlZnMgPSBmdW5jdGlvbiAoc2NoZW1hLCB1cmxIaXN0b3J5KSB7XHJcbiAgICBpZiAoc2NoZW1hWyckcmVmJ10gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHVybEhpc3RvcnkgPSB1cmxIaXN0b3J5IHx8IHt9O1xyXG4gICAgICAgIGlmICh1cmxIaXN0b3J5W3NjaGVtYVsnJHJlZiddXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkNJUkNVTEFSX1JFRkVSRU5DRSwge3VybHM6IE9iamVjdC5rZXlzKHVybEhpc3RvcnkpLmpvaW4oJywgJyl9LCAnJywgJycsIG51bGwsIHVuZGVmaW5lZCwgc2NoZW1hKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXJsSGlzdG9yeVtzY2hlbWFbJyRyZWYnXV0gPSB0cnVlO1xyXG4gICAgICAgIHNjaGVtYSA9IHRoaXMuZ2V0U2NoZW1hKHNjaGVtYVsnJHJlZiddLCB1cmxIaXN0b3J5KTtcclxuICAgIH1cclxuICAgIHJldHVybiBzY2hlbWE7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHVybEhpc3RvcnkpIHtcclxuICAgIHZhciBzY2hlbWE7XHJcbiAgICBpZiAodGhpcy5zY2hlbWFzW3VybF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHNjaGVtYSA9IHRoaXMuc2NoZW1hc1t1cmxdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSwgdXJsSGlzdG9yeSk7XHJcbiAgICB9XHJcbiAgICB2YXIgYmFzZVVybCA9IHVybDtcclxuICAgIHZhciBmcmFnbWVudCA9IFwiXCI7XHJcbiAgICBpZiAodXJsLmluZGV4T2YoJyMnKSAhPT0gLTEpIHtcclxuICAgICAgICBmcmFnbWVudCA9IHVybC5zdWJzdHJpbmcodXJsLmluZGV4T2YoXCIjXCIpICsgMSk7XHJcbiAgICAgICAgYmFzZVVybCA9IHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoXCIjXCIpKTtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgdGhpcy5zY2hlbWFzW2Jhc2VVcmxdID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIHNjaGVtYSA9IHRoaXMuc2NoZW1hc1tiYXNlVXJsXTtcclxuICAgICAgICB2YXIgcG9pbnRlclBhdGggPSBkZWNvZGVVUklDb21wb25lbnQoZnJhZ21lbnQpO1xyXG4gICAgICAgIGlmIChwb2ludGVyUGF0aCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlUmVmcyhzY2hlbWEsIHVybEhpc3RvcnkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocG9pbnRlclBhdGguY2hhckF0KDApICE9PSBcIi9cIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcGFydHMgPSBwb2ludGVyUGF0aC5zcGxpdChcIi9cIikuc2xpY2UoMSk7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY29tcG9uZW50ID0gcGFydHNbaV0ucmVwbGFjZSgvfjEvZywgXCIvXCIpLnJlcGxhY2UoL34wL2csIFwiflwiKTtcclxuICAgICAgICAgICAgaWYgKHNjaGVtYVtjb21wb25lbnRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHNjaGVtYSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNjaGVtYSA9IHNjaGVtYVtjb21wb25lbnRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2NoZW1hICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVJlZnMoc2NoZW1hLCB1cmxIaXN0b3J5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5taXNzaW5nW2Jhc2VVcmxdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0aGlzLm1pc3NpbmcucHVzaChiYXNlVXJsKTtcclxuICAgICAgICB0aGlzLm1pc3NpbmdbYmFzZVVybF0gPSBiYXNlVXJsO1xyXG4gICAgICAgIHRoaXMubWlzc2luZ01hcFtiYXNlVXJsXSA9IGJhc2VVcmw7XHJcbiAgICB9XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnNlYXJjaFNjaGVtYXMgPSBmdW5jdGlvbiAoc2NoZW1hLCB1cmwpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaFNjaGVtYXMoc2NoZW1hW2ldLCB1cmwpO1xyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5pZCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBpZiAoaXNUcnVzdGVkVXJsKHVybCwgc2NoZW1hLmlkKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NoZW1hc1tzY2hlbWEuaWRdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYXNbc2NoZW1hLmlkXSA9IHNjaGVtYTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkgIT09IFwiZW51bVwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVtrZXldID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYVtrZXldLCB1cmwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09IFwiJHJlZlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVyaSA9IGdldERvY3VtZW50VXJpKHNjaGVtYVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXJpICYmIHRoaXMuc2NoZW1hc1t1cmldID09PSB1bmRlZmluZWQgJiYgdGhpcy5taXNzaW5nTWFwW3VyaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1pc3NpbmdNYXBbdXJpXSA9IHVyaTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmFkZFNjaGVtYSA9IGZ1bmN0aW9uICh1cmwsIHNjaGVtYSkge1xyXG4gICAgLy9vdmVybG9hZFxyXG4gICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnIHx8IHR5cGVvZiBzY2hlbWEgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB1cmwgPT09ICdvYmplY3QnICYmIHR5cGVvZiB1cmwuaWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHNjaGVtYSA9IHVybDtcclxuICAgICAgICAgICAgdXJsID0gc2NoZW1hLmlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh1cmwgPT09IGdldERvY3VtZW50VXJpKHVybCkgKyBcIiNcIikge1xyXG4gICAgICAgIC8vIFJlbW92ZSBlbXB0eSBmcmFnbWVudFxyXG4gICAgICAgIHVybCA9IGdldERvY3VtZW50VXJpKHVybCk7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNjaGVtYXNbdXJsXSA9IHNjaGVtYTtcclxuICAgIGRlbGV0ZSB0aGlzLm1pc3NpbmdNYXBbdXJsXTtcclxuICAgIG5vcm1TY2hlbWEoc2NoZW1hLCB1cmwpO1xyXG4gICAgdGhpcy5zZWFyY2hTY2hlbWFzKHNjaGVtYSwgdXJsKTtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYU1hcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBtYXAgPSB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnNjaGVtYXMpIHtcclxuICAgICAgICBtYXBba2V5XSA9IHRoaXMuc2NoZW1hc1trZXldO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1hcDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmdldFNjaGVtYVVyaXMgPSBmdW5jdGlvbiAoZmlsdGVyUmVnRXhwKSB7XHJcbiAgICB2YXIgbGlzdCA9IFtdO1xyXG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuc2NoZW1hcykge1xyXG4gICAgICAgIGlmICghZmlsdGVyUmVnRXhwIHx8IGZpbHRlclJlZ0V4cC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgbGlzdC5wdXNoKGtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxpc3Q7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS5nZXRNaXNzaW5nVXJpcyA9IGZ1bmN0aW9uIChmaWx0ZXJSZWdFeHApIHtcclxuICAgIHZhciBsaXN0ID0gW107XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5taXNzaW5nTWFwKSB7XHJcbiAgICAgICAgaWYgKCFmaWx0ZXJSZWdFeHAgfHwgZmlsdGVyUmVnRXhwLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICBsaXN0LnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbGlzdDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLmRyb3BTY2hlbWFzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5zY2hlbWFzID0ge307XHJcbiAgICB0aGlzLnJlc2V0KCk7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5taXNzaW5nID0gW107XHJcbiAgICB0aGlzLm1pc3NpbmdNYXAgPSB7fTtcclxuICAgIHRoaXMuZXJyb3JzID0gW107XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUFsbCA9IGZ1bmN0aW9uIChkYXRhLCBzY2hlbWEsIGRhdGFQYXRoUGFydHMsIHNjaGVtYVBhdGhQYXJ0cywgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICB2YXIgdG9wTGV2ZWw7XHJcbiAgICBzY2hlbWEgPSB0aGlzLnJlc29sdmVSZWZzKHNjaGVtYSk7XHJcbiAgICBpZiAoIXNjaGVtYSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSBlbHNlIGlmIChzY2hlbWEgaW5zdGFuY2VvZiBWYWxpZGF0aW9uRXJyb3IpIHtcclxuICAgICAgICB0aGlzLmVycm9ycy5wdXNoKHNjaGVtYSk7XHJcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xyXG4gICAgdmFyIGZyb3plbkluZGV4LCBzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggPSBudWxsLCBzY2FubmVkU2NoZW1hc0luZGV4ID0gbnVsbDtcclxuICAgIGlmICh0aGlzLmNoZWNrUmVjdXJzaXZlICYmIGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgdG9wTGV2ZWwgPSAhdGhpcy5zY2FubmVkLmxlbmd0aDtcclxuICAgICAgICBpZiAoZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldKSB7XHJcbiAgICAgICAgICAgIHZhciBzY2hlbWFJbmRleCA9IGRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XS5pbmRleE9mKHNjaGVtYSk7XHJcbiAgICAgICAgICAgIGlmIChzY2hlbWFJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuY29uY2F0KGRhdGFbdGhpcy52YWxpZGF0aW9uRXJyb3JzS2V5XVtzY2hlbWFJbmRleF0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbihkYXRhKSkge1xyXG4gICAgICAgICAgICBmcm96ZW5JbmRleCA9IHRoaXMuc2Nhbm5lZEZyb3plbi5pbmRleE9mKGRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoZnJvemVuSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJvemVuU2NoZW1hSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2Zyb3plbkluZGV4XS5pbmRleE9mKHNjaGVtYSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZnJvemVuU2NoZW1hSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5jb25jYXQodGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bZnJvemVuU2NoZW1hSW5kZXhdKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNjYW5uZWQucHVzaChkYXRhKTtcclxuICAgICAgICBpZiAoT2JqZWN0LmlzRnJvemVuKGRhdGEpKSB7XHJcbiAgICAgICAgICAgIGlmIChmcm96ZW5JbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGZyb3plbkluZGV4ID0gdGhpcy5zY2FubmVkRnJvemVuLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plbi5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuU2NoZW1hcy5wdXNoKFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzY2FubmVkRnJvemVuU2NoZW1hSW5kZXggPSB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzW2Zyb3plbkluZGV4XS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblNjaGVtYXNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSBzY2hlbWE7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nhbm5lZEZyb3plblZhbGlkYXRpb25FcnJvcnNbZnJvemVuSW5kZXhdW3NjYW5uZWRGcm96ZW5TY2hlbWFJbmRleF0gPSBbXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIWRhdGFbdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5XSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZGF0YSwgdGhpcy52YWxpZGF0ZWRTY2hlbWFzS2V5LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhdGEsIHRoaXMudmFsaWRhdGlvbkVycm9yc0tleSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vSUUgNy84IHdvcmthcm91bmRcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGVkU2NoZW1hc0tleV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV0gPSBbXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzY2FubmVkU2NoZW1hc0luZGV4ID0gZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldLmxlbmd0aDtcclxuICAgICAgICAgICAgZGF0YVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldW3NjYW5uZWRTY2hlbWFzSW5kZXhdID0gc2NoZW1hO1xyXG4gICAgICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XHJcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQmFzaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU51bWVyaWMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQXJyYXkoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9iamVjdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVIeXBlcm1lZGlhKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVGb3JtYXQoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZURlZmluZWRLZXl3b3JkcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCBudWxsO1xyXG5cclxuICAgIGlmICh0b3BMZXZlbCkge1xyXG4gICAgICAgIHdoaWxlICh0aGlzLnNjYW5uZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5zY2FubmVkLnBvcCgpO1xyXG4gICAgICAgICAgICBkZWxldGUgaXRlbVt0aGlzLnZhbGlkYXRlZFNjaGVtYXNLZXldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW4gPSBbXTtcclxuICAgICAgICB0aGlzLnNjYW5uZWRGcm96ZW5TY2hlbWFzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGVycm9yIHx8IGVycm9yQ291bnQgIT09IHRoaXMuZXJyb3JzLmxlbmd0aCkge1xyXG4gICAgICAgIHdoaWxlICgoZGF0YVBhdGhQYXJ0cyAmJiBkYXRhUGF0aFBhcnRzLmxlbmd0aCkgfHwgKHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoKSkge1xyXG4gICAgICAgICAgICB2YXIgZGF0YVBhcnQgPSAoZGF0YVBhdGhQYXJ0cyAmJiBkYXRhUGF0aFBhcnRzLmxlbmd0aCkgPyBcIlwiICsgZGF0YVBhdGhQYXJ0cy5wb3AoKSA6IG51bGw7XHJcbiAgICAgICAgICAgIHZhciBzY2hlbWFQYXJ0ID0gKHNjaGVtYVBhdGhQYXJ0cyAmJiBzY2hlbWFQYXRoUGFydHMubGVuZ3RoKSA/IFwiXCIgKyBzY2hlbWFQYXRoUGFydHMucG9wKCkgOiBudWxsO1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yID0gZXJyb3IucHJlZml4V2l0aChkYXRhUGFydCwgc2NoZW1hUGFydCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5wcmVmaXhFcnJvcnMoZXJyb3JDb3VudCwgZGF0YVBhcnQsIHNjaGVtYVBhcnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4ICE9PSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5zY2FubmVkRnJvemVuVmFsaWRhdGlvbkVycm9yc1tmcm96ZW5JbmRleF1bc2Nhbm5lZEZyb3plblNjaGVtYUluZGV4XSA9IHRoaXMuZXJyb3JzLnNsaWNlKHN0YXJ0RXJyb3JDb3VudCk7XHJcbiAgICB9IGVsc2UgaWYgKHNjYW5uZWRTY2hlbWFzSW5kZXggIT09IG51bGwpIHtcclxuICAgICAgICBkYXRhW3RoaXMudmFsaWRhdGlvbkVycm9yc0tleV1bc2Nhbm5lZFNjaGVtYXNJbmRleF0gPSB0aGlzLmVycm9ycy5zbGljZShzdGFydEVycm9yQ291bnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLmhhbmRsZUVycm9yKGVycm9yKTtcclxufTtcclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICBpZiAodHlwZW9mIHNjaGVtYS5mb3JtYXQgIT09ICdzdHJpbmcnIHx8ICF0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0pIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHZhciBlcnJvck1lc3NhZ2UgPSB0aGlzLmZvcm1hdFZhbGlkYXRvcnNbc2NoZW1hLmZvcm1hdF0uY2FsbChudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgaWYgKHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7bWVzc2FnZTogZXJyb3JNZXNzYWdlfSwgJycsICcvZm9ybWF0JywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgIH0gZWxzZSBpZiAoZXJyb3JNZXNzYWdlICYmIHR5cGVvZiBlcnJvck1lc3NhZ2UgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5GT1JNQVRfQ1VTVE9NLCB7bWVzc2FnZTogZXJyb3JNZXNzYWdlLm1lc3NhZ2UgfHwgXCI/XCJ9LCBlcnJvck1lc3NhZ2UuZGF0YVBhdGggfHwgJycsIGVycm9yTWVzc2FnZS5zY2hlbWFQYXRoIHx8IFwiL2Zvcm1hdFwiLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlRGVmaW5lZEtleXdvcmRzID0gZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5kZWZpbmVkS2V5d29yZHMpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYVtrZXldID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHZhbGlkYXRpb25GdW5jdGlvbnMgPSB0aGlzLmRlZmluZWRLZXl3b3Jkc1trZXldO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsaWRhdGlvbkZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgZnVuYyA9IHZhbGlkYXRpb25GdW5jdGlvbnNbaV07XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmdW5jKGRhdGEsIHNjaGVtYVtrZXldLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcmVzdWx0ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5LRVlXT1JEX0NVU1RPTSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHJlc3VsdFxyXG4gICAgICAgICAgICAgICAgfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpLnByZWZpeFdpdGgobnVsbCwga2V5KTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgJiYgdHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2RlID0gcmVzdWx0LmNvZGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFFcnJvckNvZGVzW2NvZGVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5kZWZpbmVkIGVycm9yIGNvZGUgKHVzZSBkZWZpbmVFcnJvcik6ICcgKyBjb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IEVycm9yQ29kZXNbY29kZV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2RlICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSBFcnJvckNvZGVzLktFWVdPUkRfQ1VTVE9NO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2VQYXJhbXMgPSAodHlwZW9mIHJlc3VsdC5tZXNzYWdlID09PSAnb2JqZWN0JykgPyByZXN1bHQubWVzc2FnZSA6IHtcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IGtleSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiByZXN1bHQubWVzc2FnZSB8fCBcIj9cIlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciBzY2hlbWFQYXRoID0gcmVzdWx0LnNjaGVtYVBhdGggfHwgKFwiL1wiICsga2V5LnJlcGxhY2UoL34vZywgJ34wJykucmVwbGFjZSgvXFwvL2csICd+MScpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKGNvZGUsIG1lc3NhZ2VQYXJhbXMsIHJlc3VsdC5kYXRhUGF0aCB8fCBudWxsLCBzY2hlbWFQYXRoLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5mdW5jdGlvbiByZWN1cnNpdmVDb21wYXJlKEEsIEIpIHtcclxuICAgIGlmIChBID09PSBCKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBpZiAoQSAmJiBCICYmIHR5cGVvZiBBID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBCID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoQSkgIT09IEFycmF5LmlzQXJyYXkoQikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShBKSkge1xyXG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggIT09IEIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBBLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlY3Vyc2l2ZUNvbXBhcmUoQVtpXSwgQltpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2YXIga2V5O1xyXG4gICAgICAgICAgICBmb3IgKGtleSBpbiBBKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQltrZXldID09PSB1bmRlZmluZWQgJiYgQVtrZXldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gQikge1xyXG4gICAgICAgICAgICAgICAgaWYgKEFba2V5XSA9PT0gdW5kZWZpbmVkICYmIEJba2V5XSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoa2V5IGluIEEpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcmVjdXJzaXZlQ29tcGFyZShBW2tleV0sIEJba2V5XSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQmFzaWMgPSBmdW5jdGlvbiB2YWxpZGF0ZUJhc2ljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICB2YXIgZXJyb3I7XHJcbiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3IucHJlZml4V2l0aChudWxsLCBcInR5cGVcIik7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlRW51bShkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICByZXR1cm4gZXJyb3IucHJlZml4V2l0aChudWxsLCBcInR5cGVcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlVHlwZSA9IGZ1bmN0aW9uIHZhbGlkYXRlVHlwZShkYXRhLCBzY2hlbWEpIHtcclxuICAgIGlmIChzY2hlbWEudHlwZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICB2YXIgZGF0YVR5cGUgPSB0eXBlb2YgZGF0YTtcclxuICAgIGlmIChkYXRhID09PSBudWxsKSB7XHJcbiAgICAgICAgZGF0YVR5cGUgPSBcIm51bGxcIjtcclxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgIGRhdGFUeXBlID0gXCJhcnJheVwiO1xyXG4gICAgfVxyXG4gICAgdmFyIGFsbG93ZWRUeXBlcyA9IHNjaGVtYS50eXBlO1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFsbG93ZWRUeXBlcykpIHtcclxuICAgICAgICBhbGxvd2VkVHlwZXMgPSBbYWxsb3dlZFR5cGVzXTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbG93ZWRUeXBlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHZhciB0eXBlID0gYWxsb3dlZFR5cGVzW2ldO1xyXG4gICAgICAgIGlmICh0eXBlID09PSBkYXRhVHlwZSB8fCAodHlwZSA9PT0gXCJpbnRlZ2VyXCIgJiYgZGF0YVR5cGUgPT09IFwibnVtYmVyXCIgJiYgKGRhdGEgJSAxID09PSAwKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5JTlZBTElEX1RZUEUsIHtcclxuICAgICAgICB0eXBlOiBkYXRhVHlwZSxcclxuICAgICAgICBleHBlY3RlZDogYWxsb3dlZFR5cGVzLmpvaW4oXCIvXCIpXHJcbiAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZUVudW0gPSBmdW5jdGlvbiB2YWxpZGF0ZUVudW0oZGF0YSwgc2NoZW1hKSB7XHJcbiAgICBpZiAoc2NoZW1hW1wiZW51bVwiXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYVtcImVudW1cIl0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgZW51bVZhbCA9IHNjaGVtYVtcImVudW1cIl1baV07XHJcbiAgICAgICAgaWYgKHJlY3Vyc2l2ZUNvbXBhcmUoZGF0YSwgZW51bVZhbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5FTlVNX01JU01BVENILCB7dmFsdWU6ICh0eXBlb2YgSlNPTiAhPT0gJ3VuZGVmaW5lZCcpID8gSlNPTi5zdHJpbmdpZnkoZGF0YSkgOiBkYXRhfSwgJycsICcnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOdW1lcmljID0gZnVuY3Rpb24gdmFsaWRhdGVOdW1lcmljKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU11bHRpcGxlT2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU1pbk1heChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlTmFOKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IG51bGw7XHJcbn07XHJcblxyXG52YXIgQ0xPU0VfRU5PVUdIX0xPVyA9IE1hdGgucG93KDIsIC01MSk7XHJcbnZhciBDTE9TRV9FTk9VR0hfSElHSCA9IDEgLSBDTE9TRV9FTk9VR0hfTE9XO1xyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU11bHRpcGxlT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZU11bHRpcGxlT2YoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICB2YXIgbXVsdGlwbGVPZiA9IHNjaGVtYS5tdWx0aXBsZU9mIHx8IHNjaGVtYS5kaXZpc2libGVCeTtcclxuICAgIGlmIChtdWx0aXBsZU9mID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgIHZhciByZW1haW5kZXIgPSAoZGF0YSAvIG11bHRpcGxlT2YpICUgMTtcclxuICAgICAgICBpZiAocmVtYWluZGVyID49IENMT1NFX0VOT1VHSF9MT1cgJiYgcmVtYWluZGVyIDwgQ0xPU0VfRU5PVUdIX0hJR0gpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTVVMVElQTEVfT0YsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgbXVsdGlwbGVPZjogbXVsdGlwbGVPZlxyXG4gICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU1pbk1heCA9IGZ1bmN0aW9uIHZhbGlkYXRlTWluTWF4KGRhdGEsIHNjaGVtYSkge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hLm1pbmltdW0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGlmIChkYXRhIDwgc2NoZW1hLm1pbmltdW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUlOSU1VTSwge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBtaW5pbXVtOiBzY2hlbWEubWluaW11bVxyXG4gICAgICAgICAgICB9LCAnJywgJy9taW5pbXVtJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtICYmIGRhdGEgPT09IHNjaGVtYS5taW5pbXVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFLCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5pbXVtXHJcbiAgICAgICAgICAgIH0sICcnLCAnL2V4Y2x1c2l2ZU1pbmltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzY2hlbWEubWF4aW11bSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGRhdGEgPiBzY2hlbWEubWF4aW11bSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk5VTUJFUl9NQVhJTVVNLCB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhpbXVtXHJcbiAgICAgICAgICAgIH0sICcnLCAnL21heGltdW0nLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2NoZW1hLmV4Y2x1c2l2ZU1heGltdW0gJiYgZGF0YSA9PT0gc2NoZW1hLm1heGltdW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTUFYSU1VTV9FWENMVVNJVkUsIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICAgICAgbWF4aW11bTogc2NoZW1hLm1heGltdW1cclxuICAgICAgICAgICAgfSwgJycsICcvZXhjbHVzaXZlTWF4aW11bScsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU5hTiA9IGZ1bmN0aW9uIHZhbGlkYXRlTmFOKGRhdGEsIHNjaGVtYSkge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICBpZiAoaXNOYU4oZGF0YSkgPT09IHRydWUgfHwgZGF0YSA9PT0gSW5maW5pdHkgfHwgZGF0YSA9PT0gLUluZmluaXR5KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OVU1CRVJfTk9UX0FfTlVNQkVSLCB7dmFsdWU6IGRhdGF9LCAnJywgJy90eXBlJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVTdHJpbmcgPSBmdW5jdGlvbiB2YWxpZGF0ZVN0cmluZyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTdHJpbmdMZW5ndGgoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZVN0cmluZ1BhdHRlcm4oZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nTGVuZ3RoID0gZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdMZW5ndGgoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGlmIChzY2hlbWEubWluTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBzY2hlbWEubWluTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuU1RSSU5HX0xFTkdUSF9TSE9SVCwge1xyXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5MZW5ndGhcclxuICAgICAgICAgICAgfSwgJycsICcvbWluTGVuZ3RoJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hLm1heExlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gc2NoZW1hLm1heExlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19MRU5HVEhfTE9ORywge1xyXG4gICAgICAgICAgICAgICAgbGVuZ3RoOiBkYXRhLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIG1heGltdW06IHNjaGVtYS5tYXhMZW5ndGhcclxuICAgICAgICAgICAgfSwgJycsICcvbWF4TGVuZ3RoJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlU3RyaW5nUGF0dGVybiA9IGZ1bmN0aW9uIHZhbGlkYXRlU3RyaW5nUGF0dGVybihkYXRhLCBzY2hlbWEpIHtcclxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiB8fCAodHlwZW9mIHNjaGVtYS5wYXR0ZXJuICE9PSBcInN0cmluZ1wiICYmICEoc2NoZW1hLnBhdHRlcm4gaW5zdGFuY2VvZiBSZWdFeHApKSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdmFyIHJlZ2V4cDtcclxuICAgIGlmIChzY2hlbWEucGF0dGVybiBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgIHJlZ2V4cCA9IHNjaGVtYS5wYXR0ZXJuO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdmFyIGJvZHksIGZsYWdzID0gJyc7XHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHJlZ3VsYXIgZXhwcmVzc2lvbiBsaXRlcmFsc1xyXG4gICAgICAgIC8vIEBzZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTcuOC41XHJcbiAgICAgICAgdmFyIGxpdGVyYWwgPSBzY2hlbWEucGF0dGVybi5tYXRjaCgvXlxcLyguKylcXC8oW2ltZ10qKSQvKTtcclxuICAgICAgICBpZiAobGl0ZXJhbCkge1xyXG4gICAgICAgICAgICBib2R5ID0gbGl0ZXJhbFsxXTtcclxuICAgICAgICAgICAgZmxhZ3MgPSBsaXRlcmFsWzJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYm9keSA9IHNjaGVtYS5wYXR0ZXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZWdleHAgPSBuZXcgUmVnRXhwKGJvZHksIGZsYWdzKTtcclxuICAgIH1cclxuICAgIGlmICghcmVnZXhwLnRlc3QoZGF0YSkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLlNUUklOR19QQVRURVJOLCB7cGF0dGVybjogc2NoZW1hLnBhdHRlcm59LCAnJywgJy9wYXR0ZXJuJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheSA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXkoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVBcnJheUxlbmd0aChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQXJyYXlVbmlxdWVJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheUxlbmd0aCA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlMZW5ndGgoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICB2YXIgZXJyb3I7XHJcbiAgICBpZiAoc2NoZW1hLm1pbkl0ZW1zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBzY2hlbWEubWluSXRlbXMpIHtcclxuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfTEVOR1RIX1NIT1JULCB7XHJcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGRhdGEubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgbWluaW11bTogc2NoZW1hLm1pbkl0ZW1zXHJcbiAgICAgICAgICAgIH0sICcnLCAnL21pbkl0ZW1zJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hLm1heEl0ZW1zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiBzY2hlbWEubWF4SXRlbXMpIHtcclxuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQVJSQVlfTEVOR1RIX0xPTkcsIHtcclxuICAgICAgICAgICAgICAgIGxlbmd0aDogZGF0YS5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4SXRlbXNcclxuICAgICAgICAgICAgfSwgJycsICcvbWF4SXRlbXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zID0gZnVuY3Rpb24gdmFsaWRhdGVBcnJheVVuaXF1ZUl0ZW1zKGRhdGEsIHNjaGVtYSkge1xyXG4gICAgaWYgKHNjaGVtYS51bmlxdWVJdGVtcykge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCBkYXRhLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVjdXJzaXZlQ29tcGFyZShkYXRhW2ldLCBkYXRhW2pdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5BUlJBWV9VTklRVUUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2gxOiBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDI6IGpcclxuICAgICAgICAgICAgICAgICAgICB9LCAnJywgJy91bmlxdWVJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQXJyYXlJdGVtcyA9IGZ1bmN0aW9uIHZhbGlkYXRlQXJyYXlJdGVtcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgaWYgKHNjaGVtYS5pdGVtcyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3IsIGk7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEuaXRlbXMpKSB7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCBzY2hlbWEuaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5pdGVtc1tpXSwgW2ldLCBbXCJpdGVtc1wiLCBpXSwgZGF0YVBvaW50ZXJQYXRoICsgXCIvXCIgKyBpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChzY2hlbWEuYWRkaXRpb25hbEl0ZW1zICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyA9PT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSAodGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLkFSUkFZX0FERElUSU9OQUxfSVRFTVMsIHt9LCAnLycgKyBpLCAnL2FkZGl0aW9uYWxJdGVtcycsIG51bGwsIGRhdGEsIHNjaGVtYSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5hZGRpdGlvbmFsSXRlbXMsIFtpXSwgW1wiYWRkaXRpb25hbEl0ZW1zXCJdLCBkYXRhUG9pbnRlclBhdGggKyBcIi9cIiArIGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFbaV0sIHNjaGVtYS5pdGVtcywgW2ldLCBbXCJpdGVtc1wiXSwgZGF0YVBvaW50ZXJQYXRoICsgXCIvXCIgKyBpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0KGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwib2JqZWN0XCIgfHwgZGF0YSA9PT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9iamVjdFJlcXVpcmVkUHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0UHJvcGVydGllcyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdE1pbk1heFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xyXG4gICAgdmFyIGVycm9yO1xyXG4gICAgaWYgKHNjaGVtYS5taW5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBpZiAoa2V5cy5sZW5ndGggPCBzY2hlbWEubWluUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNLCB7XHJcbiAgICAgICAgICAgICAgICBwcm9wZXJ0eUNvdW50OiBrZXlzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIG1pbmltdW06IHNjaGVtYS5taW5Qcm9wZXJ0aWVzXHJcbiAgICAgICAgICAgIH0sICcnLCAnL21pblByb3BlcnRpZXMnLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzY2hlbWEubWF4UHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gc2NoZW1hLm1heFByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTSwge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlDb3VudDoga2V5cy5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBtYXhpbXVtOiBzY2hlbWEubWF4UHJvcGVydGllc1xyXG4gICAgICAgICAgICB9LCAnJywgJy9tYXhQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlT2JqZWN0UmVxdWlyZWRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gdmFsaWRhdGVPYmplY3RSZXF1aXJlZFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hKSB7XHJcbiAgICBpZiAoc2NoZW1hLnJlcXVpcmVkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5yZXF1aXJlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIga2V5ID0gc2NoZW1hLnJlcXVpcmVkW2ldO1xyXG4gICAgICAgICAgICBpZiAoZGF0YVtrZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfUkVRVUlSRUQsIHtrZXk6IGtleX0sICcnLCAnL3JlcXVpcmVkLycgKyBpLCBudWxsLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMgPSBmdW5jdGlvbiB2YWxpZGF0ZU9iamVjdFByb3BlcnRpZXMoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpIHtcclxuICAgIHZhciBlcnJvcjtcclxuICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgdmFyIGtleVBvaW50ZXJQYXRoID0gZGF0YVBvaW50ZXJQYXRoICsgXCIvXCIgKyBrZXkucmVwbGFjZSgvfi9nLCAnfjAnKS5yZXBsYWNlKC9cXC8vZywgJ34xJyk7XHJcbiAgICAgICAgdmFyIGZvdW5kTWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICBpZiAoc2NoZW1hLnByb3BlcnRpZXMgIT09IHVuZGVmaW5lZCAmJiBzY2hlbWEucHJvcGVydGllc1trZXldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZm91bmRNYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YVtrZXldLCBzY2hlbWEucHJvcGVydGllc1trZXldLCBba2V5XSwgW1wicHJvcGVydGllc1wiLCBrZXldLCBrZXlQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgcGF0dGVybktleSBpbiBzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKHBhdHRlcm5LZXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlZ2V4cC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5LZXldLCBba2V5XSwgW1wicGF0dGVyblByb3BlcnRpZXNcIiwgcGF0dGVybktleV0sIGtleVBvaW50ZXJQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghZm91bmRNYXRjaCkge1xyXG4gICAgICAgICAgICBpZiAoc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVMsIHtrZXk6IGtleX0sICcnLCAnL2FkZGl0aW9uYWxQcm9wZXJ0aWVzJywgbnVsbCwgZGF0YSwgc2NoZW1hKS5wcmVmaXhXaXRoKGtleSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGFba2V5XSwgc2NoZW1hLmFkZGl0aW9uYWxQcm9wZXJ0aWVzLCBba2V5XSwgW1wiYWRkaXRpb25hbFByb3BlcnRpZXNcIl0sIGtleVBvaW50ZXJQYXRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcyAmJiAhdGhpcy5rbm93blByb3BlcnR5UGF0aHNba2V5UG9pbnRlclBhdGhdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzW2tleVBvaW50ZXJQYXRoXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF0gPSB0cnVlO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy51bmtub3duUHJvcGVydHlQYXRoc1trZXlQb2ludGVyUGF0aF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9iamVjdERlcGVuZGVuY2llcyA9IGZ1bmN0aW9uIHZhbGlkYXRlT2JqZWN0RGVwZW5kZW5jaWVzKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICB2YXIgZXJyb3I7XHJcbiAgICBpZiAoc2NoZW1hLmRlcGVuZGVuY2llcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgZm9yICh2YXIgZGVwS2V5IGluIHNjaGVtYS5kZXBlbmRlbmNpZXMpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFbZGVwS2V5XSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVwID0gc2NoZW1hLmRlcGVuZGVuY2llc1tkZXBLZXldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkZXAgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YVtkZXBdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT0JKRUNUX0RFUEVOREVOQ1lfS0VZLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pc3Npbmc6IGRlcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAnJywgJycsIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBkZXBLZXkpLnByZWZpeFdpdGgobnVsbCwgXCJkZXBlbmRlbmNpZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhbmRsZUVycm9yKGVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRlcCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRLZXkgPSBkZXBbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhW3JlcXVpcmVkS2V5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5PQkpFQ1RfREVQRU5ERU5DWV9LRVksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IGRlcEtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaXNzaW5nOiByZXF1aXJlZEtleVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJycsICcvJyArIGksIG51bGwsIGRhdGEsIHNjaGVtYSkucHJlZml4V2l0aChudWxsLCBkZXBLZXkpLnByZWZpeFdpdGgobnVsbCwgXCJkZXBlbmRlbmNpZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5oYW5kbGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgZGVwLCBbXSwgW1wiZGVwZW5kZW5jaWVzXCIsIGRlcEtleV0sIGRhdGFQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVDb21iaW5hdGlvbnMgPSBmdW5jdGlvbiB2YWxpZGF0ZUNvbWJpbmF0aW9ucyhkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVBbGxPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aClcclxuICAgICAgICB8fCB0aGlzLnZhbGlkYXRlQW55T2YoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgdGhpcy52YWxpZGF0ZU9uZU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKVxyXG4gICAgICAgIHx8IHRoaXMudmFsaWRhdGVOb3QoZGF0YSwgc2NoZW1hLCBkYXRhUG9pbnRlclBhdGgpXHJcbiAgICAgICAgfHwgbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQWxsT2YgPSBmdW5jdGlvbiB2YWxpZGF0ZUFsbE9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBpZiAoc2NoZW1hLmFsbE9mID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHZhciBlcnJvcjtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NoZW1hLmFsbE9mLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5hbGxPZltpXTtcclxuICAgICAgICBpZiAoZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHN1YlNjaGVtYSwgW10sIFtcImFsbE9mXCIsIGldLCBkYXRhUG9pbnRlclBhdGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlQW55T2YgPSBmdW5jdGlvbiB2YWxpZGF0ZUFueU9mKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBpZiAoc2NoZW1hLmFueU9mID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIHZhciBlcnJvcnMgPSBbXTtcclxuICAgIHZhciBzdGFydEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XHJcbiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRocztcclxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3JBdEVuZCA9IHRydWU7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNjaGVtYS5hbnlPZi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc3ViU2NoZW1hID0gc2NoZW1hLmFueU9mW2ldO1xyXG5cclxuICAgICAgICB2YXIgZXJyb3JDb3VudCA9IHRoaXMuZXJyb3JzLmxlbmd0aDtcclxuICAgICAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHN1YlNjaGVtYSwgW10sIFtcImFueU9mXCIsIGldLCBkYXRhUG9pbnRlclBhdGgpO1xyXG5cclxuICAgICAgICBpZiAoZXJyb3IgPT09IG51bGwgJiYgZXJyb3JDb3VudCA9PT0gdGhpcy5lcnJvcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtub3duS2V5IGluIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW2tub3duS2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHVua25vd25LZXkgaW4gdGhpcy51bmtub3duUHJvcGVydHlQYXRocykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghb2xkS25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzW3Vua25vd25LZXldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNvbnRpbnVlIGxvb3Bpbmcgc28gd2UgY2F0Y2ggYWxsIHRoZSBwcm9wZXJ0eSBkZWZpbml0aW9ucywgYnV0IHdlIGRvbid0IHdhbnQgdG8gcmV0dXJuIGFuIGVycm9yXHJcbiAgICAgICAgICAgICAgICBlcnJvckF0RW5kID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICBlcnJvcnMucHVzaChlcnJvci5wcmVmaXhXaXRoKG51bGwsIFwiXCIgKyBpKS5wcmVmaXhXaXRoKG51bGwsIFwiYW55T2ZcIikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3JBdEVuZCkge1xyXG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KSk7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuQU5ZX09GX01JU1NJTkcsIHt9LCBcIlwiLCBcIi9hbnlPZlwiLCBlcnJvcnMsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5WYWxpZGF0b3JDb250ZXh0LnByb3RvdHlwZS52YWxpZGF0ZU9uZU9mID0gZnVuY3Rpb24gdmFsaWRhdGVPbmVPZihkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgaWYgKHNjaGVtYS5vbmVPZiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgICB2YXIgdmFsaWRJbmRleCA9IG51bGw7XHJcbiAgICB2YXIgZXJyb3JzID0gW107XHJcbiAgICB2YXIgc3RhcnRFcnJvckNvdW50ID0gdGhpcy5lcnJvcnMubGVuZ3RoO1xyXG4gICAgdmFyIG9sZFVua25vd25Qcm9wZXJ0eVBhdGhzLCBvbGRLbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHMgPSB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzO1xyXG4gICAgICAgIG9sZEtub3duUHJvcGVydHlQYXRocyA9IHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEub25lT2YubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBpZiAodGhpcy50cmFja1Vua25vd25Qcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSB7fTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHNjaGVtYS5vbmVPZltpXTtcclxuXHJcbiAgICAgICAgdmFyIGVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XHJcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy52YWxpZGF0ZUFsbChkYXRhLCBzdWJTY2hlbWEsIFtdLCBbXCJvbmVPZlwiLCBpXSwgZGF0YVBvaW50ZXJQYXRoKTtcclxuXHJcbiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGVycm9yQ291bnQgPT09IHRoaXMuZXJyb3JzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpZiAodmFsaWRJbmRleCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRJbmRleCA9IGk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIHN0YXJ0RXJyb3JDb3VudCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcihFcnJvckNvZGVzLk9ORV9PRl9NVUxUSVBMRSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4MTogdmFsaWRJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleDI6IGlcclxuICAgICAgICAgICAgICAgIH0sIFwiXCIsIFwiL29uZU9mXCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga25vd25LZXkgaW4gdGhpcy5rbm93blByb3BlcnR5UGF0aHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBvbGRLbm93blByb3BlcnR5UGF0aHNba25vd25LZXldID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb2xkVW5rbm93blByb3BlcnR5UGF0aHNba25vd25LZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdW5rbm93bktleSBpbiB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFvbGRLbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVW5rbm93blByb3BlcnR5UGF0aHNbdW5rbm93bktleV0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICB0aGlzLnVua25vd25Qcm9wZXJ0eVBhdGhzID0gb2xkVW5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgdGhpcy5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRLbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICB9XHJcbiAgICBpZiAodmFsaWRJbmRleCA9PT0gbnVsbCkge1xyXG4gICAgICAgIGVycm9ycyA9IGVycm9ycy5jb25jYXQodGhpcy5lcnJvcnMuc2xpY2Uoc3RhcnRFcnJvckNvdW50KSk7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSB0aGlzLmVycm9ycy5zbGljZSgwLCBzdGFydEVycm9yQ291bnQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKEVycm9yQ29kZXMuT05FX09GX01JU1NJTkcsIHt9LCBcIlwiLCBcIi9vbmVPZlwiLCBlcnJvcnMsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoMCwgc3RhcnRFcnJvckNvdW50KTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG5cclxuVmFsaWRhdG9yQ29udGV4dC5wcm90b3R5cGUudmFsaWRhdGVOb3QgPSBmdW5jdGlvbiB2YWxpZGF0ZU5vdChkYXRhLCBzY2hlbWEsIGRhdGFQb2ludGVyUGF0aCkge1xyXG4gICAgaWYgKHNjaGVtYS5ub3QgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdmFyIG9sZEVycm9yQ291bnQgPSB0aGlzLmVycm9ycy5sZW5ndGg7XHJcbiAgICB2YXIgb2xkVW5rbm93blByb3BlcnR5UGF0aHMsIG9sZEtub3duUHJvcGVydHlQYXRocztcclxuICAgIGlmICh0aGlzLnRyYWNrVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICBvbGRVbmtub3duUHJvcGVydHlQYXRocyA9IHRoaXMudW5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgb2xkS25vd25Qcm9wZXJ0eVBhdGhzID0gdGhpcy5rbm93blByb3BlcnR5UGF0aHM7XHJcbiAgICAgICAgdGhpcy51bmtub3duUHJvcGVydHlQYXRocyA9IHt9O1xyXG4gICAgICAgIHRoaXMua25vd25Qcm9wZXJ0eVBhdGhzID0ge307XHJcbiAgICB9XHJcbiAgICB2YXIgZXJyb3IgPSB0aGlzLnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYS5ub3QsIG51bGwsIG51bGwsIGRhdGFQb2ludGVyUGF0aCk7XHJcbiAgICB2YXIgbm90RXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2Uob2xkRXJyb3JDb3VudCk7XHJcbiAgICB0aGlzLmVycm9ycyA9IHRoaXMuZXJyb3JzLnNsaWNlKDAsIG9sZEVycm9yQ291bnQpO1xyXG4gICAgaWYgKHRoaXMudHJhY2tVbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgIHRoaXMudW5rbm93blByb3BlcnR5UGF0aHMgPSBvbGRVbmtub3duUHJvcGVydHlQYXRocztcclxuICAgICAgICB0aGlzLmtub3duUHJvcGVydHlQYXRocyA9IG9sZEtub3duUHJvcGVydHlQYXRocztcclxuICAgIH1cclxuICAgIGlmIChlcnJvciA9PT0gbnVsbCAmJiBub3RFcnJvcnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3IoRXJyb3JDb2Rlcy5OT1RfUEFTU0VELCB7fSwgXCJcIiwgXCIvbm90XCIsIG51bGwsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuXHJcblZhbGlkYXRvckNvbnRleHQucHJvdG90eXBlLnZhbGlkYXRlSHlwZXJtZWRpYSA9IGZ1bmN0aW9uIHZhbGlkYXRlQ29tYmluYXRpb25zKGRhdGEsIHNjaGVtYSwgZGF0YVBvaW50ZXJQYXRoKSB7XHJcbiAgICBpZiAoIXNjaGVtYS5saW5rcykge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgdmFyIGVycm9yO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGlua3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICB2YXIgbGRvID0gc2NoZW1hLmxpbmtzW2ldO1xyXG4gICAgICAgIGlmIChsZG8ucmVsID09PSBcImRlc2NyaWJlZGJ5XCIpIHtcclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gbmV3IFVyaVRlbXBsYXRlKGxkby5ocmVmKTtcclxuICAgICAgICAgICAgdmFyIGFsbFByZXNlbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHRlbXBsYXRlLnZhck5hbWVzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISh0ZW1wbGF0ZS52YXJOYW1lc1tqXSBpbiBkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbFByZXNlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWxsUHJlc2VudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjaGVtYVVybCA9IHRlbXBsYXRlLmZpbGxGcm9tT2JqZWN0KGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN1YlNjaGVtYSA9IHtcIiRyZWZcIjogc2NoZW1hVXJsfTtcclxuICAgICAgICAgICAgICAgIGlmIChlcnJvciA9IHRoaXMudmFsaWRhdGVBbGwoZGF0YSwgc3ViU2NoZW1hLCBbXSwgW1wibGlua3NcIiwgaV0sIGRhdGFQb2ludGVyUGF0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG4vLyBwYXJzZVVSSSgpIGFuZCByZXNvbHZlVXJsKCkgYXJlIGZyb20gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vMTA4ODg1MFxyXG4vLyAgIC0gIHJlbGVhc2VkIGFzIHB1YmxpYyBkb21haW4gYnkgYXV0aG9yIChcIllhZmZsZVwiKSAtIHNlZSBjb21tZW50cyBvbiBnaXN0XHJcblxyXG5mdW5jdGlvbiBwYXJzZVVSSSh1cmwpIHtcclxuICAgIHZhciBtID0gU3RyaW5nKHVybCkucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpLm1hdGNoKC9eKFteOlxcLz8jXSs6KT8oXFwvXFwvKD86W146QF0qKD86OlteOkBdKik/QCk/KChbXjpcXC8/I10qKSg/OjooXFxkKikpPykpPyhbXj8jXSopKFxcP1teI10qKT8oI1tcXHNcXFNdKik/Lyk7XHJcbiAgICAvLyBhdXRob3JpdHkgPSAnLy8nICsgdXNlciArICc6JyArIHBhc3MgJ0AnICsgaG9zdG5hbWUgKyAnOicgcG9ydFxyXG4gICAgcmV0dXJuIChtID8ge1xyXG4gICAgICAgIGhyZWY6IG1bMF0gfHwgJycsXHJcbiAgICAgICAgcHJvdG9jb2w6IG1bMV0gfHwgJycsXHJcbiAgICAgICAgYXV0aG9yaXR5OiBtWzJdIHx8ICcnLFxyXG4gICAgICAgIGhvc3Q6IG1bM10gfHwgJycsXHJcbiAgICAgICAgaG9zdG5hbWU6IG1bNF0gfHwgJycsXHJcbiAgICAgICAgcG9ydDogbVs1XSB8fCAnJyxcclxuICAgICAgICBwYXRobmFtZTogbVs2XSB8fCAnJyxcclxuICAgICAgICBzZWFyY2g6IG1bN10gfHwgJycsXHJcbiAgICAgICAgaGFzaDogbVs4XSB8fCAnJ1xyXG4gICAgfSA6IG51bGwpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXNvbHZlVXJsKGJhc2UsIGhyZWYpIHsvLyBSRkMgMzk4NlxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZURvdFNlZ21lbnRzKGlucHV0KSB7XHJcbiAgICAgICAgdmFyIG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGlucHV0LnJlcGxhY2UoL14oXFwuXFwuPyhcXC98JCkpKy8sICcnKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvKFxcLihcXC98JCkpKy9nLCAnLycpXHJcbiAgICAgICAgICAgIC5yZXBsYWNlKC9cXC9cXC5cXC4kLywgJy8uLi8nKVxyXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwvP1teXFwvXSovZywgZnVuY3Rpb24gKHApIHtcclxuICAgICAgICAgICAgICAgIGlmIChwID09PSAnLy4uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wb3AoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gocCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJykucmVwbGFjZSgvXlxcLy8sIGlucHV0LmNoYXJBdCgwKSA9PT0gJy8nID8gJy8nIDogJycpO1xyXG4gICAgfVxyXG5cclxuICAgIGhyZWYgPSBwYXJzZVVSSShocmVmIHx8ICcnKTtcclxuICAgIGJhc2UgPSBwYXJzZVVSSShiYXNlIHx8ICcnKTtcclxuXHJcbiAgICByZXR1cm4gIWhyZWYgfHwgIWJhc2UgPyBudWxsIDogKGhyZWYucHJvdG9jb2wgfHwgYmFzZS5wcm90b2NvbCkgK1xyXG4gICAgKGhyZWYucHJvdG9jb2wgfHwgaHJlZi5hdXRob3JpdHkgPyBocmVmLmF1dGhvcml0eSA6IGJhc2UuYXV0aG9yaXR5KSArXHJcbiAgICByZW1vdmVEb3RTZWdtZW50cyhocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5IHx8IGhyZWYucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgPyBocmVmLnBhdGhuYW1lIDogKGhyZWYucGF0aG5hbWUgPyAoKGJhc2UuYXV0aG9yaXR5ICYmICFiYXNlLnBhdGhuYW1lID8gJy8nIDogJycpICsgYmFzZS5wYXRobmFtZS5zbGljZSgwLCBiYXNlLnBhdGhuYW1lLmxhc3RJbmRleE9mKCcvJykgKyAxKSArIGhyZWYucGF0aG5hbWUpIDogYmFzZS5wYXRobmFtZSkpICtcclxuICAgIChocmVmLnByb3RvY29sIHx8IGhyZWYuYXV0aG9yaXR5IHx8IGhyZWYucGF0aG5hbWUgPyBocmVmLnNlYXJjaCA6IChocmVmLnNlYXJjaCB8fCBiYXNlLnNlYXJjaCkpICtcclxuICAgIGhyZWYuaGFzaDtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RG9jdW1lbnRVcmkodXJpKSB7XHJcbiAgICByZXR1cm4gdXJpLnNwbGl0KCcjJylbMF07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5vcm1TY2hlbWEoc2NoZW1hLCBiYXNlVXJpKSB7XHJcbiAgICBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBpZiAoYmFzZVVyaSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGJhc2VVcmkgPSBzY2hlbWEuaWQ7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2NoZW1hLmlkID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIGJhc2VVcmkgPSByZXNvbHZlVXJsKGJhc2VVcmksIHNjaGVtYS5pZCk7XHJcbiAgICAgICAgICAgIHNjaGVtYS5pZCA9IGJhc2VVcmk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzY2hlbWEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG5vcm1TY2hlbWEoc2NoZW1hW2ldLCBiYXNlVXJpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hWyckcmVmJ10gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNjaGVtYVsnJHJlZiddID0gcmVzb2x2ZVVybChiYXNlVXJpLCBzY2hlbWFbJyRyZWYnXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHNjaGVtYSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gXCJlbnVtXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBub3JtU2NoZW1hKHNjaGVtYVtrZXldLCBiYXNlVXJpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZGVmYXVsdEVycm9yUmVwb3J0ZXIobGFuZ3VhZ2UpIHtcclxuICAgIGxhbmd1YWdlID0gbGFuZ3VhZ2UgfHwgJ2VuJztcclxuXHJcbiAgICB2YXIgZXJyb3JNZXNzYWdlcyA9IGxhbmd1YWdlc1tsYW5ndWFnZV07XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHZhciBtZXNzYWdlVGVtcGxhdGUgPSBlcnJvck1lc3NhZ2VzW2Vycm9yLmNvZGVdIHx8IEVycm9yTWVzc2FnZXNEZWZhdWx0W2Vycm9yLmNvZGVdO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZVRlbXBsYXRlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJVbmtub3duIGVycm9yIGNvZGUgXCIgKyBlcnJvci5jb2RlICsgXCI6IFwiICsgSlNPTi5zdHJpbmdpZnkoZXJyb3IubWVzc2FnZVBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtZXNzYWdlUGFyYW1zID0gZXJyb3IucGFyYW1zO1xyXG4gICAgICAgIC8vIEFkYXB0ZWQgZnJvbSBDcm9ja2ZvcmQncyBzdXBwbGFudCgpXHJcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2VUZW1wbGF0ZS5yZXBsYWNlKC9cXHsoW157fV0qKVxcfS9nLCBmdW5jdGlvbiAod2hvbGUsIHZhck5hbWUpIHtcclxuICAgICAgICAgICAgdmFyIHN1YlZhbHVlID0gbWVzc2FnZVBhcmFtc1t2YXJOYW1lXTtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBzdWJWYWx1ZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHN1YlZhbHVlID09PSAnbnVtYmVyJyA/IHN1YlZhbHVlIDogd2hvbGU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcblxyXG52YXIgRXJyb3JDb2RlcyA9IHtcclxuICAgIElOVkFMSURfVFlQRTogMCxcclxuICAgIEVOVU1fTUlTTUFUQ0g6IDEsXHJcbiAgICBBTllfT0ZfTUlTU0lORzogMTAsXHJcbiAgICBPTkVfT0ZfTUlTU0lORzogMTEsXHJcbiAgICBPTkVfT0ZfTVVMVElQTEU6IDEyLFxyXG4gICAgTk9UX1BBU1NFRDogMTMsXHJcbiAgICAvLyBOdW1lcmljIGVycm9yc1xyXG4gICAgTlVNQkVSX01VTFRJUExFX09GOiAxMDAsXHJcbiAgICBOVU1CRVJfTUlOSU1VTTogMTAxLFxyXG4gICAgTlVNQkVSX01JTklNVU1fRVhDTFVTSVZFOiAxMDIsXHJcbiAgICBOVU1CRVJfTUFYSU1VTTogMTAzLFxyXG4gICAgTlVNQkVSX01BWElNVU1fRVhDTFVTSVZFOiAxMDQsXHJcbiAgICBOVU1CRVJfTk9UX0FfTlVNQkVSOiAxMDUsXHJcbiAgICAvLyBTdHJpbmcgZXJyb3JzXHJcbiAgICBTVFJJTkdfTEVOR1RIX1NIT1JUOiAyMDAsXHJcbiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6IDIwMSxcclxuICAgIFNUUklOR19QQVRURVJOOiAyMDIsXHJcbiAgICAvLyBPYmplY3QgZXJyb3JzXHJcbiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiAzMDAsXHJcbiAgICBPQkpFQ1RfUFJPUEVSVElFU19NQVhJTVVNOiAzMDEsXHJcbiAgICBPQkpFQ1RfUkVRVUlSRUQ6IDMwMixcclxuICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IDMwMyxcclxuICAgIE9CSkVDVF9ERVBFTkRFTkNZX0tFWTogMzA0LFxyXG4gICAgLy8gQXJyYXkgZXJyb3JzXHJcbiAgICBBUlJBWV9MRU5HVEhfU0hPUlQ6IDQwMCxcclxuICAgIEFSUkFZX0xFTkdUSF9MT05HOiA0MDEsXHJcbiAgICBBUlJBWV9VTklRVUU6IDQwMixcclxuICAgIEFSUkFZX0FERElUSU9OQUxfSVRFTVM6IDQwMyxcclxuICAgIC8vIEN1c3RvbS91c2VyLWRlZmluZWQgZXJyb3JzXHJcbiAgICBGT1JNQVRfQ1VTVE9NOiA1MDAsXHJcbiAgICBLRVlXT1JEX0NVU1RPTTogNTAxLFxyXG4gICAgLy8gU2NoZW1hIHN0cnVjdHVyZVxyXG4gICAgQ0lSQ1VMQVJfUkVGRVJFTkNFOiA2MDAsXHJcbiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zXHJcbiAgICBVTktOT1dOX1BST1BFUlRZOiAxMDAwXHJcbn07XHJcbnZhciBFcnJvckNvZGVMb29rdXAgPSB7fTtcclxuZm9yICh2YXIga2V5IGluIEVycm9yQ29kZXMpIHtcclxuICAgIEVycm9yQ29kZUxvb2t1cFtFcnJvckNvZGVzW2tleV1dID0ga2V5O1xyXG59XHJcbnZhciBFcnJvck1lc3NhZ2VzRGVmYXVsdCA9IHtcclxuICAgIElOVkFMSURfVFlQRTogXCJJbnZhbGlkIHR5cGU6IHt0eXBlfSAoZXhwZWN0ZWQge2V4cGVjdGVkfSlcIixcclxuICAgIEVOVU1fTUlTTUFUQ0g6IFwiTm8gZW51bSBtYXRjaCBmb3I6IHt2YWx1ZX1cIixcclxuICAgIEFOWV9PRl9NSVNTSU5HOiBcIkRhdGEgZG9lcyBub3QgbWF0Y2ggYW55IHNjaGVtYXMgZnJvbSBcXFwiYW55T2ZcXFwiXCIsXHJcbiAgICBPTkVfT0ZfTUlTU0lORzogXCJEYXRhIGRvZXMgbm90IG1hdGNoIGFueSBzY2hlbWFzIGZyb20gXFxcIm9uZU9mXFxcIlwiLFxyXG4gICAgT05FX09GX01VTFRJUExFOiBcIkRhdGEgaXMgdmFsaWQgYWdhaW5zdCBtb3JlIHRoYW4gb25lIHNjaGVtYSBmcm9tIFxcXCJvbmVPZlxcXCI6IGluZGljZXMge2luZGV4MX0gYW5kIHtpbmRleDJ9XCIsXHJcbiAgICBOT1RfUEFTU0VEOiBcIkRhdGEgbWF0Y2hlcyBzY2hlbWEgZnJvbSBcXFwibm90XFxcIlwiLFxyXG4gICAgLy8gTnVtZXJpYyBlcnJvcnNcclxuICAgIE5VTUJFUl9NVUxUSVBMRV9PRjogXCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIG11bHRpcGxlIG9mIHttdWx0aXBsZU9mfVwiLFxyXG4gICAgTlVNQkVSX01JTklNVU06IFwiVmFsdWUge3ZhbHVlfSBpcyBsZXNzIHRoYW4gbWluaW11bSB7bWluaW11bX1cIixcclxuICAgIE5VTUJFUl9NSU5JTVVNX0VYQ0xVU0lWRTogXCJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtaW5pbXVtIHttaW5pbXVtfVwiLFxyXG4gICAgTlVNQkVSX01BWElNVU06IFwiVmFsdWUge3ZhbHVlfSBpcyBncmVhdGVyIHRoYW4gbWF4aW11bSB7bWF4aW11bX1cIixcclxuICAgIE5VTUJFUl9NQVhJTVVNX0VYQ0xVU0lWRTogXCJWYWx1ZSB7dmFsdWV9IGlzIGVxdWFsIHRvIGV4Y2x1c2l2ZSBtYXhpbXVtIHttYXhpbXVtfVwiLFxyXG4gICAgTlVNQkVSX05PVF9BX05VTUJFUjogXCJWYWx1ZSB7dmFsdWV9IGlzIG5vdCBhIHZhbGlkIG51bWJlclwiLFxyXG4gICAgLy8gU3RyaW5nIGVycm9yc1xyXG4gICAgU1RSSU5HX0xFTkdUSF9TSE9SVDogXCJTdHJpbmcgaXMgdG9vIHNob3J0ICh7bGVuZ3RofSBjaGFycyksIG1pbmltdW0ge21pbmltdW19XCIsXHJcbiAgICBTVFJJTkdfTEVOR1RIX0xPTkc6IFwiU3RyaW5nIGlzIHRvbyBsb25nICh7bGVuZ3RofSBjaGFycyksIG1heGltdW0ge21heGltdW19XCIsXHJcbiAgICBTVFJJTkdfUEFUVEVSTjogXCJTdHJpbmcgZG9lcyBub3QgbWF0Y2ggcGF0dGVybjoge3BhdHRlcm59XCIsXHJcbiAgICAvLyBPYmplY3QgZXJyb3JzXHJcbiAgICBPQkpFQ1RfUFJPUEVSVElFU19NSU5JTVVNOiBcIlRvbyBmZXcgcHJvcGVydGllcyBkZWZpbmVkICh7cHJvcGVydHlDb3VudH0pLCBtaW5pbXVtIHttaW5pbXVtfVwiLFxyXG4gICAgT0JKRUNUX1BST1BFUlRJRVNfTUFYSU1VTTogXCJUb28gbWFueSBwcm9wZXJ0aWVzIGRlZmluZWQgKHtwcm9wZXJ0eUNvdW50fSksIG1heGltdW0ge21heGltdW19XCIsXHJcbiAgICBPQkpFQ1RfUkVRVUlSRUQ6IFwiTWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eToge2tleX1cIixcclxuICAgIE9CSkVDVF9BRERJVElPTkFMX1BST1BFUlRJRVM6IFwiQWRkaXRpb25hbCBwcm9wZXJ0aWVzIG5vdCBhbGxvd2VkXCIsXHJcbiAgICBPQkpFQ1RfREVQRU5ERU5DWV9LRVk6IFwiRGVwZW5kZW5jeSBmYWlsZWQgLSBrZXkgbXVzdCBleGlzdDoge21pc3Npbmd9IChkdWUgdG8ga2V5OiB7a2V5fSlcIixcclxuICAgIC8vIEFycmF5IGVycm9yc1xyXG4gICAgQVJSQVlfTEVOR1RIX1NIT1JUOiBcIkFycmF5IGlzIHRvbyBzaG9ydCAoe2xlbmd0aH0pLCBtaW5pbXVtIHttaW5pbXVtfVwiLFxyXG4gICAgQVJSQVlfTEVOR1RIX0xPTkc6IFwiQXJyYXkgaXMgdG9vIGxvbmcgKHtsZW5ndGh9KSwgbWF4aW11bSB7bWF4aW11bX1cIixcclxuICAgIEFSUkFZX1VOSVFVRTogXCJBcnJheSBpdGVtcyBhcmUgbm90IHVuaXF1ZSAoaW5kaWNlcyB7bWF0Y2gxfSBhbmQge21hdGNoMn0pXCIsXHJcbiAgICBBUlJBWV9BRERJVElPTkFMX0lURU1TOiBcIkFkZGl0aW9uYWwgaXRlbXMgbm90IGFsbG93ZWRcIixcclxuICAgIC8vIEZvcm1hdCBlcnJvcnNcclxuICAgIEZPUk1BVF9DVVNUT006IFwiRm9ybWF0IHZhbGlkYXRpb24gZmFpbGVkICh7bWVzc2FnZX0pXCIsXHJcbiAgICBLRVlXT1JEX0NVU1RPTTogXCJLZXl3b3JkIGZhaWxlZDoge2tleX0gKHttZXNzYWdlfSlcIixcclxuICAgIC8vIFNjaGVtYSBzdHJ1Y3R1cmVcclxuICAgIENJUkNVTEFSX1JFRkVSRU5DRTogXCJDaXJjdWxhciAkcmVmczoge3VybHN9XCIsXHJcbiAgICAvLyBOb24tc3RhbmRhcmQgdmFsaWRhdGlvbiBvcHRpb25zXHJcbiAgICBVTktOT1dOX1BST1BFUlRZOiBcIlVua25vd24gcHJvcGVydHkgKG5vdCBpbiBzY2hlbWEpXCJcclxufTtcclxuXHJcbmZ1bmN0aW9uIFZhbGlkYXRpb25FcnJvcihjb2RlLCBwYXJhbXMsIGRhdGFQYXRoLCBzY2hlbWFQYXRoLCBzdWJFcnJvcnMpIHtcclxuICAgIEVycm9yLmNhbGwodGhpcyk7XHJcbiAgICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gZXJyb3IgY29kZSBzdXBwbGllZDogXCIgKyBzY2hlbWFQYXRoKTtcclxuICAgIH1cclxuICAgIHRoaXMubWVzc2FnZSA9ICcnO1xyXG4gICAgdGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgdGhpcy5kYXRhUGF0aCA9IGRhdGFQYXRoIHx8IFwiXCI7XHJcbiAgICB0aGlzLnNjaGVtYVBhdGggPSBzY2hlbWFQYXRoIHx8IFwiXCI7XHJcbiAgICB0aGlzLnN1YkVycm9ycyA9IHN1YkVycm9ycyB8fCBudWxsO1xyXG5cclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IodGhpcy5tZXNzYWdlKTtcclxuICAgIHRoaXMuc3RhY2sgPSBlcnIuc3RhY2sgfHwgZXJyLnN0YWNrdHJhY2U7XHJcbiAgICBpZiAoIXRoaXMuc3RhY2spIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFjayA9IGVyci5zdGFjayB8fCBlcnIuc3RhY2t0cmFjZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XHJcblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWYWxpZGF0aW9uRXJyb3I7XHJcblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUubmFtZSA9ICdWYWxpZGF0aW9uRXJyb3InO1xyXG5cclxuVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5wcmVmaXhXaXRoID0gZnVuY3Rpb24gKGRhdGFQcmVmaXgsIHNjaGVtYVByZWZpeCkge1xyXG4gICAgaWYgKGRhdGFQcmVmaXggIT09IG51bGwpIHtcclxuICAgICAgICBkYXRhUHJlZml4ID0gZGF0YVByZWZpeC5yZXBsYWNlKC9+L2csIFwifjBcIikucmVwbGFjZSgvXFwvL2csIFwifjFcIik7XHJcbiAgICAgICAgdGhpcy5kYXRhUGF0aCA9IFwiL1wiICsgZGF0YVByZWZpeCArIHRoaXMuZGF0YVBhdGg7XHJcbiAgICB9XHJcbiAgICBpZiAoc2NoZW1hUHJlZml4ICE9PSBudWxsKSB7XHJcbiAgICAgICAgc2NoZW1hUHJlZml4ID0gc2NoZW1hUHJlZml4LnJlcGxhY2UoL34vZywgXCJ+MFwiKS5yZXBsYWNlKC9cXC8vZywgXCJ+MVwiKTtcclxuICAgICAgICB0aGlzLnNjaGVtYVBhdGggPSBcIi9cIiArIHNjaGVtYVByZWZpeCArIHRoaXMuc2NoZW1hUGF0aDtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnN1YkVycm9ycyAhPT0gbnVsbCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJFcnJvcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5zdWJFcnJvcnNbaV0ucHJlZml4V2l0aChkYXRhUHJlZml4LCBzY2hlbWFQcmVmaXgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuZnVuY3Rpb24gaXNUcnVzdGVkVXJsKGJhc2VVcmwsIHRlc3RVcmwpIHtcclxuICAgIGlmICh0ZXN0VXJsLnN1YnN0cmluZygwLCBiYXNlVXJsLmxlbmd0aCkgPT09IGJhc2VVcmwpIHtcclxuICAgICAgICB2YXIgcmVtYWluZGVyID0gdGVzdFVybC5zdWJzdHJpbmcoYmFzZVVybC5sZW5ndGgpO1xyXG4gICAgICAgIGlmICgodGVzdFVybC5sZW5ndGggPiAwICYmIHRlc3RVcmwuY2hhckF0KGJhc2VVcmwubGVuZ3RoIC0gMSkgPT09IFwiL1wiKVxyXG4gICAgICAgICAgICB8fCByZW1haW5kZXIuY2hhckF0KDApID09PSBcIiNcIlxyXG4gICAgICAgICAgICB8fCByZW1haW5kZXIuY2hhckF0KDApID09PSBcIj9cIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn1cclxuXHJcbnZhciBsYW5ndWFnZXMgPSB7fTtcclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUFwaShsYW5ndWFnZSkge1xyXG4gICAgdmFyIGdsb2JhbENvbnRleHQgPSBuZXcgVmFsaWRhdG9yQ29udGV4dCgpO1xyXG4gICAgdmFyIGN1cnJlbnRMYW5ndWFnZTtcclxuICAgIHZhciBjdXN0b21FcnJvclJlcG9ydGVyO1xyXG4gICAgdmFyIGFwaSA9IHtcclxuICAgICAgICBzZXRFcnJvclJlcG9ydGVyOiBmdW5jdGlvbiAocmVwb3J0ZXIpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBvcnRlciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhbmd1YWdlKHJlcG9ydGVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXN0b21FcnJvclJlcG9ydGVyID0gcmVwb3J0ZXI7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYWRkRm9ybWF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuYWRkRm9ybWF0LmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsYW5ndWFnZTogZnVuY3Rpb24gKGNvZGUpIHtcclxuICAgICAgICAgICAgaWYgKCFjb2RlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudExhbmd1YWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2VzW2NvZGVdKSB7XHJcbiAgICAgICAgICAgICAgICBjb2RlID0gY29kZS5zcGxpdCgnLScpWzBdOyAvLyBmYWxsIGJhY2sgdG8gYmFzZSBsYW5ndWFnZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChsYW5ndWFnZXNbY29kZV0pIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRMYW5ndWFnZSA9IGNvZGU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZTsgLy8gc28geW91IGNhbiB0ZWxsIGlmIGZhbGwtYmFjayBoYXMgaGFwcGVuZWRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGRMYW5ndWFnZTogZnVuY3Rpb24gKGNvZGUsIG1lc3NhZ2VNYXApIHtcclxuICAgICAgICAgICAgdmFyIGtleTtcclxuICAgICAgICAgICAgZm9yIChrZXkgaW4gRXJyb3JDb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VNYXBba2V5XSAmJiAhbWVzc2FnZU1hcFtFcnJvckNvZGVzW2tleV1dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZU1hcFtFcnJvckNvZGVzW2tleV1dID0gbWVzc2FnZU1hcFtrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByb290Q29kZSA9IGNvZGUuc3BsaXQoJy0nKVswXTtcclxuICAgICAgICAgICAgaWYgKCFsYW5ndWFnZXNbcm9vdENvZGVdKSB7IC8vIHVzZSBmb3IgYmFzZSBsYW5ndWFnZSBpZiBub3QgeWV0IGRlZmluZWRcclxuICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9IG1lc3NhZ2VNYXA7XHJcbiAgICAgICAgICAgICAgICBsYW5ndWFnZXNbcm9vdENvZGVdID0gbWVzc2FnZU1hcDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tjb2RlXSA9IE9iamVjdC5jcmVhdGUobGFuZ3VhZ2VzW3Jvb3RDb2RlXSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGtleSBpbiBtZXNzYWdlTWFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsYW5ndWFnZXNbcm9vdENvZGVdW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlc1tyb290Q29kZV1ba2V5XSA9IG1lc3NhZ2VNYXBba2V5XTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VzW2NvZGVdW2tleV0gPSBtZXNzYWdlTWFwW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmcmVzaEFwaTogZnVuY3Rpb24gKGxhbmd1YWdlKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVBcGkoKTtcclxuICAgICAgICAgICAgaWYgKGxhbmd1YWdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXN1bHQubGFuZ3VhZ2UobGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWxpZGF0ZTogZnVuY3Rpb24gKGRhdGEsIHNjaGVtYSwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIHZhciBkZWYgPSBkZWZhdWx0RXJyb3JSZXBvcnRlcihjdXJyZW50TGFuZ3VhZ2UpO1xyXG4gICAgICAgICAgICB2YXIgZXJyb3JSZXBvcnRlciA9IGN1c3RvbUVycm9yUmVwb3J0ZXIgPyBmdW5jdGlvbiAoZXJyb3IsIGRhdGEsIHNjaGVtYSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUVycm9yUmVwb3J0ZXIoZXJyb3IsIGRhdGEsIHNjaGVtYSkgfHwgZGVmKGVycm9yLCBkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICB9IDogZGVmO1xyXG4gICAgICAgICAgICB2YXIgY29udGV4dCA9IG5ldyBWYWxpZGF0b3JDb250ZXh0KGdsb2JhbENvbnRleHQsIGZhbHNlLCBlcnJvclJlcG9ydGVyLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgc2NoZW1hID0ge1wiJHJlZlwiOiBzY2hlbWF9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnRleHQuYWRkU2NoZW1hKFwiXCIsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgIHZhciBlcnJvciA9IGNvbnRleHQudmFsaWRhdGVBbGwoZGF0YSwgc2NoZW1hLCBudWxsLCBudWxsLCBcIlwiKTtcclxuICAgICAgICAgICAgaWYgKCFlcnJvciAmJiBiYW5Vbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgZXJyb3IgPSBjb250ZXh0LmJhblVua25vd25Qcm9wZXJ0aWVzKGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IGVycm9yO1xyXG4gICAgICAgICAgICB0aGlzLm1pc3NpbmcgPSBjb250ZXh0Lm1pc3Npbmc7XHJcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSAoZXJyb3IgPT09IG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWxpZDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZhbGlkYXRlUmVzdWx0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZS5hcHBseShyZXN1bHQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2YWxpZGF0ZU11bHRpcGxlOiBmdW5jdGlvbiAoZGF0YSwgc2NoZW1hLCBjaGVja1JlY3Vyc2l2ZSwgYmFuVW5rbm93blByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgdmFyIGRlZiA9IGRlZmF1bHRFcnJvclJlcG9ydGVyKGN1cnJlbnRMYW5ndWFnZSk7XHJcbiAgICAgICAgICAgIHZhciBlcnJvclJlcG9ydGVyID0gY3VzdG9tRXJyb3JSZXBvcnRlciA/IGZ1bmN0aW9uIChlcnJvciwgZGF0YSwgc2NoZW1hKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VzdG9tRXJyb3JSZXBvcnRlcihlcnJvciwgZGF0YSwgc2NoZW1hKSB8fCBkZWYoZXJyb3IsIGRhdGEsIHNjaGVtYSk7XHJcbiAgICAgICAgICAgIH0gOiBkZWY7XHJcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gbmV3IFZhbGlkYXRvckNvbnRleHQoZ2xvYmFsQ29udGV4dCwgdHJ1ZSwgZXJyb3JSZXBvcnRlciwgY2hlY2tSZWN1cnNpdmUsIGJhblVua25vd25Qcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHNjaGVtYSA9IHtcIiRyZWZcIjogc2NoZW1hfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb250ZXh0LmFkZFNjaGVtYShcIlwiLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICBjb250ZXh0LnZhbGlkYXRlQWxsKGRhdGEsIHNjaGVtYSwgbnVsbCwgbnVsbCwgXCJcIik7XHJcbiAgICAgICAgICAgIGlmIChiYW5Vbmtub3duUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgY29udGV4dC5iYW5Vbmtub3duUHJvcGVydGllcyhkYXRhLCBzY2hlbWEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgICAgICAgICAgcmVzdWx0LmVycm9ycyA9IGNvbnRleHQuZXJyb3JzO1xyXG4gICAgICAgICAgICByZXN1bHQubWlzc2luZyA9IGNvbnRleHQubWlzc2luZztcclxuICAgICAgICAgICAgcmVzdWx0LnZhbGlkID0gKHJlc3VsdC5lcnJvcnMubGVuZ3RoID09PSAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFkZFNjaGVtYTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5hZGRTY2hlbWEuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldFNjaGVtYTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWEuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldFNjaGVtYU1hcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsQ29udGV4dC5nZXRTY2hlbWFNYXAuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldFNjaGVtYVVyaXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0U2NoZW1hVXJpcy5hcHBseShnbG9iYWxDb250ZXh0LCBhcmd1bWVudHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0TWlzc2luZ1VyaXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdsb2JhbENvbnRleHQuZ2V0TWlzc2luZ1VyaXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRyb3BTY2hlbWFzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbENvbnRleHQuZHJvcFNjaGVtYXMuYXBwbHkoZ2xvYmFsQ29udGV4dCwgYXJndW1lbnRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlZmluZUtleXdvcmQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZ2xvYmFsQ29udGV4dC5kZWZpbmVLZXl3b3JkLmFwcGx5KGdsb2JhbENvbnRleHQsIGFyZ3VtZW50cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWZpbmVFcnJvcjogZnVuY3Rpb24gKGNvZGVOYW1lLCBjb2RlTnVtYmVyLCBkZWZhdWx0TWVzc2FnZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvZGVOYW1lICE9PSAnc3RyaW5nJyB8fCAhL15bQS1aXSsoX1tBLVpdKykqJC8udGVzdChjb2RlTmFtZSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBuYW1lIG11c3QgYmUgYSBzdHJpbmcgaW4gVVBQRVJfQ0FTRV9XSVRIX1VOREVSU0NPUkVTJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2RlTnVtYmVyICE9PSAnbnVtYmVyJyB8fCBjb2RlTnVtYmVyICUgMSAhPT0gMCB8fCBjb2RlTnVtYmVyIDwgMTAwMDApIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZSBudW1iZXIgbXVzdCBiZSBhbiBpbnRlZ2VyID4gMTAwMDAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZXNbY29kZU5hbWVdICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFcnJvciBhbHJlYWR5IGRlZmluZWQ6ICcgKyBjb2RlTmFtZSArICcgYXMgJyArIEVycm9yQ29kZXNbY29kZU5hbWVdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IgY29kZSBhbHJlYWR5IHVzZWQ6ICcgKyBFcnJvckNvZGVMb29rdXBbY29kZU51bWJlcl0gKyAnIGFzICcgKyBjb2RlTnVtYmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBFcnJvckNvZGVzW2NvZGVOYW1lXSA9IGNvZGVOdW1iZXI7XHJcbiAgICAgICAgICAgIEVycm9yQ29kZUxvb2t1cFtjb2RlTnVtYmVyXSA9IGNvZGVOYW1lO1xyXG4gICAgICAgICAgICBFcnJvck1lc3NhZ2VzRGVmYXVsdFtjb2RlTmFtZV0gPSBFcnJvck1lc3NhZ2VzRGVmYXVsdFtjb2RlTnVtYmVyXSA9IGRlZmF1bHRNZXNzYWdlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBsYW5nQ29kZSBpbiBsYW5ndWFnZXMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IGxhbmd1YWdlc1tsYW5nQ29kZV07XHJcbiAgICAgICAgICAgICAgICBpZiAobGFuZ3VhZ2VbY29kZU5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VbY29kZU51bWJlcl0gPSBsYW5ndWFnZVtjb2RlTnVtYmVyXSB8fCBsYW5ndWFnZVtjb2RlTmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGdsb2JhbENvbnRleHQucmVzZXQoKTtcclxuICAgICAgICAgICAgdGhpcy5lcnJvciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMubWlzc2luZyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnZhbGlkID0gdHJ1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1pc3Npbmc6IFtdLFxyXG4gICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgIG5vcm1TY2hlbWE6IG5vcm1TY2hlbWEsXHJcbiAgICAgICAgcmVzb2x2ZVVybDogcmVzb2x2ZVVybCxcclxuICAgICAgICBnZXREb2N1bWVudFVyaTogZ2V0RG9jdW1lbnRVcmksXHJcbiAgICAgICAgZXJyb3JDb2RlczogRXJyb3JDb2Rlc1xyXG4gICAgfTtcclxuICAgIGFwaS5sYW5ndWFnZShsYW5ndWFnZSB8fCAnZW4nKTtcclxuICAgIHJldHVybiBhcGk7XHJcbn1cclxuXHJcbi8vZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRvcigpIHtcclxudmFyIHR2NCA9IGNyZWF0ZUFwaSgpO1xyXG50djQuYWRkTGFuZ3VhZ2UoJ2VuLWdiJywgRXJyb3JNZXNzYWdlc0RlZmF1bHQpO1xyXG5cclxuLy9sZWdhY3kgcHJvcGVydHlcclxudHY0LnR2NCA9IHR2NDtcclxuLy9yZXR1cm4gdHY0O1xyXG5leHBvcnQgZGVmYXVsdCB0djQ7XHJcbi8vfSIsIi8qKlxyXG4qIENvcHlyaWdodCAyMDE2IFBUIElub3Zhw6fDo28gZSBTaXN0ZW1hcyBTQVxyXG4qIENvcHlyaWdodCAyMDE2IElORVNDLUlEXHJcbiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMXHJcbiogQ29weXJpZ2h0IDIwMTYgRlJBVU5IT0ZFUi1HRVNFTExTQ0hBRlQgWlVSIEZPRVJERVJVTkcgREVSIEFOR0VXQU5EVEVOIEZPUlNDSFVORyBFLlZcclxuKiBDb3B5cmlnaHQgMjAxNiBPUkFOR0UgU0FcclxuKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHXHJcbiogQ29weXJpZ2h0IDIwMTYgQXBpemVlXHJcbiogQ29weXJpZ2h0IDIwMTYgVEVDSE5JU0NIRSBVTklWRVJTSVRBVCBCRVJMSU5cclxuKlxyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4qIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4qXHJcbiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuKlxyXG4qIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4qKi9cclxuLyoqXHJcbiAqIFN1cHBvcnQgbW9kdWxlIHdpdGggc29tZSBmdW5jdGlvbnMgd2lsbCBiZSB1c2VmdWxcclxuICogQG1vZHVsZSB1dGlsc1xyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAdHlwZWRlZiBkaXZpZGVVUkxcclxuICogQHR5cGUgT2JqZWN0XHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlIFRoZSB0eXBlIG9mIFVSTFxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gb2YgVVJMXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZGVudGl0eSBUaGUgaWRlbnRpdHkgb2YgVVJMXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIERpdmlkZSBhbiB1cmwgaW4gdHlwZSwgZG9tYWluIGFuZCBpZGVudGl0eVxyXG4gKiBAcGFyYW0gIHtVUkwuVVJMfSB1cmwgLSB1cmwgYWRkcmVzc1xyXG4gKiBAcmV0dXJuIHtkaXZpZGVVUkx9IHRoZSByZXN1bHQgb2YgZGl2aWRlVVJMXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlVVJMKHVybCkge1xyXG5cclxuXHRmdW5jdGlvbiByZWN1cnNlKHZhbHVlKSB7XHJcblx0XHRjb25zdCByZWdleCA9IC8oW2EtekEtWi1dKikoOlxcL1xcLyg/OlxcLik/fDopKFstYS16QS1aMC05QDolLl9cXCt+Iz1dezIsMjU2fSkoWy1hLXpBLVowLTlAOiUuX1xcK34jPVxcL10qKS9naTtcclxuICAgIGNvbnN0IHN1YnN0ID0gJyQxLCQzLCQ0JztcclxuXHQgIGxldCBwYXJ0cyA9IHZhbHVlLnJlcGxhY2UocmVnZXgsIHN1YnN0KS5zcGxpdCgnLCcpO1xyXG5cdFx0cmV0dXJuIHBhcnRzO1xyXG5cdH1cclxuXHJcblx0bGV0IHBhcnRzID0gcmVjdXJzZSh1cmwpO1xyXG5cclxuICAvLyBJZiB0aGUgdXJsIGhhcyBubyBzY2hlbWVcclxuICBpZiAocGFydHNbMF0gPT09IHVybCAmJiAhcGFydHNbMF0uaW5jbHVkZXMoJ0AnKSkge1xyXG5cclxuICAgIGxldCByZXN1bHQgPSB7XHJcbiAgICAgIHR5cGU6IFwiXCIsXHJcbiAgICAgIGRvbWFpbjogdXJsLFxyXG4gICAgICBpZGVudGl0eTogXCJcIlxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zb2xlLmVycm9yKCdbRGl2aWRlVVJMXSBEaXZpZGVVUkwgZG9uXFwndCBzdXBwb3J0IHVybCB3aXRob3V0IHNjaGVtZS4gUGxlYXNlIHJldmlldyB5b3VyIHVybCBhZGRyZXNzJywgdXJsKTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcblx0Ly8gY2hlY2sgaWYgdGhlIHVybCBoYXMgdGhlIHNjaGVtZSBhbmQgaW5jbHVkZXMgYW4gQFxyXG5cdGlmIChwYXJ0c1swXSA9PT0gdXJsICYmIHBhcnRzWzBdLmluY2x1ZGVzKCdAJykpIHtcclxuXHRcdGxldCBzY2hlbWUgPSBwYXJ0c1swXSA9PT0gdXJsID8gJ3NtdHAnIDogcGFydHNbMF07XHJcblx0XHRwYXJ0cyA9IHJlY3Vyc2Uoc2NoZW1lICsgJzovLycgKyBwYXJ0c1swXSk7XHJcblx0fVxyXG5cclxuXHQvLyBpZiB0aGUgZG9tYWluIGluY2x1ZGVzIGFuIEAsIGRpdmlkZSBpdCB0byBkb21haW4gYW5kIGlkZW50aXR5IHJlc3BlY3RpdmVseVxyXG5cdGlmIChwYXJ0c1sxXS5pbmNsdWRlcygnQCcpKSB7XHJcblx0XHRwYXJ0c1syXSA9IHBhcnRzWzBdICsgJzovLycgKyBwYXJ0c1sxXTtcclxuXHRcdHBhcnRzWzFdID0gcGFydHNbMV0uc3Vic3RyKHBhcnRzWzFdLmluZGV4T2YoJ0AnKSArIDEpXHJcbiAgICB9IFx0LyplbHNlIGlmIChwYXJ0c1syXS5pbmNsdWRlcygnLycpKSB7XHJcbiAgICBwYXJ0c1syXSA9IHBhcnRzWzJdLnN1YnN0cihwYXJ0c1syXS5sYXN0SW5kZXhPZignLycpKzEpO1xyXG4gIH0qL1xyXG5cclxuICBsZXQgcmVzdWx0ID0ge1xyXG4gICAgdHlwZTogcGFydHNbMF0sXHJcbiAgICBkb21haW46IHBhcnRzWzFdLFxyXG4gICAgaWRlbnRpdHk6IHBhcnRzWzJdXHJcbiAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIGFuIE9iamVjdCBpcyBlbXB0eVxyXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9iamVjdCBPYmplY3QgdG8gYmUgY2hlY2tlZFxyXG4gKiBAcmV0dXJuIHtCb29sZWFufSAgICAgICBzdGF0dXMgb2YgT2JqZWN0LCBlbXB0eSBvciBub3QgKHRydWV8ZmFsc2UpO1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5T2JqZWN0KG9iamVjdCkge1xyXG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmplY3QpLmxlbmd0aCA+IDAgPyBmYWxzZSA6IHRydWU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYWtlIGEgQ09QWSBvZiB0aGUgb3JpZ2luYWwgZGF0YVxyXG4gKiBAcGFyYW0gIHtPYmplY3R9ICBvYmogLSBvYmplY3QgdG8gYmUgY2xvbmVkXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ2xvbmUob2JqKSB7XHJcbiAgLy9UT0RPOiBzaW1wbGUgYnV0IGluZWZmaWNpZW50IEpTT04gZGVlcCBjbG9uZS4uLlxyXG4gIGlmIChvYmopIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUGF0aEZyb21VUkwodXJsKSB7XHJcbiAgbGV0IHNwbGl0VVJMID0gdXJsLnNwbGl0KCcvJyk7XHJcbiAgcmV0dXJuIHNwbGl0VVJMWzBdICsgJy8vJyArIHNwbGl0VVJMWzJdICsgJy8nICsgc3BsaXRVUkxbM107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBPYnRhaW5zIHRoZSB1c2VyIFVSTCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gZW1haWxcclxuICogQHBhcmFtICB7c3RyaW5nfSB1c2VyRW1haWwgVGhlIHVzZXIgZW1haWxcclxuICogQHJldHVybiB7VVJMLlVSTH0gdXNlclVSTCBUaGUgdXNlciBVUkxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyVVJMRnJvbUVtYWlsKHVzZXJFbWFpbCkge1xyXG4gIGxldCBpbmRleE9mQXQgPSB1c2VyRW1haWwuaW5kZXhPZignQCcpO1xyXG4gIHJldHVybiAndXNlcjovLycgKyB1c2VyRW1haWwuc3Vic3RyaW5nKGluZGV4T2ZBdCArIDEsIHVzZXJFbWFpbC5sZW5ndGgpICsgJy8nICsgdXNlckVtYWlsLnN1YnN0cmluZygwLCBpbmRleE9mQXQpO1xyXG59XHJcblxyXG4vKipcclxuICogT2J0YWlucyB0aGUgdXNlciBlbWFpbCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEgZ2l2ZW4gVVJMXHJcbiAqIEBwYXJhbSAge1VSTC5VUkx9IHVzZXJVUkwgVGhlIHVzZXIgVVJMXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gdXNlckVtYWlsIFRoZSB1c2VyIGVtYWlsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VXNlckVtYWlsRnJvbVVSTCh1c2VyVVJMKSB7XHJcbiAgbGV0IHVybCA9IGRpdmlkZVVSTCh1c2VyVVJMKTtcclxuICByZXR1cm4gdXJsLmlkZW50aXR5LnJlcGxhY2UoJy8nLCAnJykgKyAnQCcgKyB1cmwuZG9tYWluOyAvLyBpZGVudGl0eSBmaWVsZCBoYXMgJy9leGFtcGxlSUQnIGluc3RlYWQgb2YgJ2V4YW1wbGVJRCdcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoZSB1c2VyIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgVVJMIGZvcm1hdCwgaWYgbm90LCBjb252ZXJ0IHRvIFVSTCBmb3JtYXRcclxuICogQHBhcmFtICB7c3RyaW5nfSAgIGlkZW50aWZpZXIgIHVzZXIgaWRlbnRpZmllclxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9ICAgdXNlclVSTCAgICB0aGUgdXNlciBVUkxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VG9Vc2VyVVJMKGlkZW50aWZpZXIpIHtcclxuXHJcbiAgLy8gY2hlY2sgaWYgdGhlIGlkZW50aWZpZXIgaXMgYWxyZWFkeSBpbiB0aGUgdXJsIGZvcm1hdFxyXG4gIGlmIChpZGVudGlmaWVyLnN1YnN0cmluZygwLCA3KSA9PT0gJ3VzZXI6Ly8nKSB7XHJcbiAgICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTChpZGVudGlmaWVyKTtcclxuXHJcbiAgICAvL2NoZWNrIGlmIHRoZSB1cmwgaXMgd2VsbCBmb3JtYXRlZFxyXG4gICAgaWYgKGRpdmlkZWRVUkwuZG9tYWluICYmIGRpdmlkZWRVUkwuaWRlbnRpdHkpIHtcclxuICAgICAgcmV0dXJuIGlkZW50aWZpZXI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aHJvdyAndXNlclVSTCB3aXRoIHdyb25nIGZvcm1hdCc7XHJcbiAgICB9XHJcblxyXG4gIC8vaWYgbm90LCBjb252ZXJ0IHRoZSB1c2VyIGVtYWlsIHRvIFVSTCBmb3JtYXRcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGdldFVzZXJVUkxGcm9tRW1haWwoaWRlbnRpZmllcik7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNEYXRhT2JqZWN0VVJMKHVybCkge1xyXG4gIGxldCBzY2hlbWFzVG9JZ25vcmUgPSBbJ2RvbWFpbi1pZHAnLCAncnVudGltZScsICdkb21haW4nLCAnaHlwZXJ0eSddO1xyXG4gIGxldCBzcGxpdFVSTCA9ICh1cmwpLnNwbGl0KCc6Ly8nKTtcclxuICBsZXQgdXJsU2NoZW1hID0gc3BsaXRVUkxbMF07XHJcblxyXG4gIHJldHVybiBzY2hlbWFzVG9JZ25vcmUuaW5kZXhPZih1cmxTY2hlbWEpID09PSAtMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVnYWN5KHVybCkge1xyXG4gIGlmICh1cmwuc3BsaXQoJ0AnKS5sZW5ndGggPiAxKVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgZWxzZVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNVUkwodXJsKSB7XHJcbiAgcmV0dXJuICh1cmwpLnNwbGl0KCcvJykubGVuZ3RoID49IDM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc1VzZXJVUkwodXJsKSB7XHJcbiAgcmV0dXJuIGRpdmlkZVVSTCh1cmwpLnR5cGUgPT09ICd1c2VyJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzSHlwZXJ0eVVSTCh1cmwpIHtcclxuICByZXR1cm4gZGl2aWRlVVJMKHVybCkudHlwZSA9PT0gJ2h5cGVydHknO1xyXG59XHJcblxyXG4vKipcclxuICogZ2V0IGluZm9ybWF0aW9uIHJlbGF0aXZlIGVhY2ggY29tcG9uZW50IGNvbmZpZ3VyZWQgb24gcnVudGltZSBjb25maWd1cmF0aW9uO1xyXG4gKiBAcGFyYW0gIHtvYmplY3R9IGNvbmZpZ3VyYXRpb24gb2JqZWN0IHdpdGggYWxsIGNvbmZpZ3VyYXRpb25cclxuICogQHBhcmFtICB7c3RyaW5nfSBjb21wb25lbnQgICAgIHN0cmluZyB3aXRoIHRoZSBjb21wb25lbnQgdG8gZ2V0IHRoZSBjb25maWd1cmF0aW9uLCBsaWtlLCBydW50aW1lVVJMUywgY2F0YWxvZ3VlVVJMcywgbXNnTm9kZVVSTCwgZG9tYWluUmVnaXN0cnlVUkw7XHJcbiAqIEBwYXJhbSAge3N0cmluZ30gcmVzb3VyY2UgICAgICB0eXBlIG9mIHJlc291cmNlIHRvIGdldCwgbGlrZSwgY2F0YWxvZ3VlLCBydW50aW1lVUEsIHByb3RvY29sc3R1YiwgaWRwUHJveHlcclxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgICAgIHJldHVybiBhbiBvYmplY3Qgd2l0aCBhbGwgY29uZmlndXJhdGlvbnM7XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q29uZmlndXJhdGlvblJlc291cmNlcyhjb25maWd1cmF0aW9uLCBjb21wb25lbnQsIHJlc291cmNlKSB7XHJcbiAgbGV0IG9iamVjdFJlc291cmNlID0gY29uZmlndXJhdGlvbltjb21wb25lbnRdO1xyXG4gIGxldCByZXNvdXJjZVR5cGUgPSBvYmplY3RSZXNvdXJjZVtyZXNvdXJjZV07XHJcblxyXG4gIHJldHVybiByZXNvdXJjZVR5cGU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBCdWlsZCBhIGZ1bGwgdXJsIHdpdGggdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvbjtcclxuICogQHBhcmFtICB7b2JqZWN0fSBjb25maWd1cmF0aW9uIG9iamVjdCB3aXRoIGFsbCBjb25maWd1cmF0aW9uXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gY29tcG9uZW50ICAgICBzdHJpbmcgd2l0aCB0aGUgY29tcG9uZW50IHRvIGdldCB0aGUgY29uZmlndXJhdGlvbiwgbGlrZSwgcnVudGltZVVSTFMsIGNhdGFsb2d1ZVVSTHMsIG1zZ05vZGVVUkwsIGRvbWFpblJlZ2lzdHJ5VVJMO1xyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHJlc291cmNlICAgICAgdHlwZSBvZiByZXNvdXJjZSB0byBnZXQsIGxpa2UsIGNhdGFsb2d1ZSwgcnVudGltZVVBLCBwcm90b2NvbHN0dWIsIGlkcFByb3h5XHJcbiAqIEBwYXJhbSAge3N0cmluZ30gdHlwZSAgICAgICAgICByZXNvdXJjZSB0byBnZXQsIGxpa2UgYSBoeXBlcnR5IG5hbWUgb3IgcHJvdG9jb2xzdHViIG5hbWU7XHJcbiAqIEBwYXJhbSAge2Jvb2xlYW59IHVzZUZhbGxiYWNrICBpZiB0cnVlIHRoZSBmdW5jdGlvbiB3aWxsIGNoZWNrIGlmIGhhdmUgYSBmYWxsYmFjayB1cmw7XHJcbiAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgICBwYXJ0aWFsIHVybCB0byBjb250YWN0IHRoZSByZXNvdXJjZTtcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBidWlsZFVSTChjb25maWd1cmF0aW9uLCBjb21wb25lbnQsIHJlc291cmNlLCB0eXBlLCB1c2VGYWxsYmFjayA9IGZhbHNlKSB7XHJcbiAgbGV0IG9iamVjdFJlc291cmNlID0gY29uZmlndXJhdGlvbltjb21wb25lbnRdO1xyXG4gIGxldCB1cmw7XHJcblxyXG4gIGlmICghb2JqZWN0UmVzb3VyY2UuaGFzT3duUHJvcGVydHkocmVzb3VyY2UpKSB7XHJcbiAgICB0aHJvdyBFcnJvcignVGhlIGNvbmZpZ3VyYXRpb24gJyArIEpTT04uc3RyaW5naWZ5KG9iamVjdFJlc291cmNlLCAnJywgMikgKyAnIGRvblxcJ3QgaGF2ZSB0aGUgJyArIHJlc291cmNlICsgJyByZXNvdXJjZSB5b3UgYXJlIGxvb2tpbmcgZm9yJyk7XHJcbiAgfVxyXG5cclxuICBsZXQgcmVzb3VyY2VUeXBlID0gb2JqZWN0UmVzb3VyY2VbcmVzb3VyY2VdO1xyXG5cclxuICBpZiAodHlwZSkge1xyXG4gICAgdXJsID0gcmVzb3VyY2VUeXBlLnByZWZpeCArIGNvbmZpZ3VyYXRpb24uZG9tYWluICsgcmVzb3VyY2VUeXBlLnN1ZmZpeCArIHR5cGU7XHJcbiAgICBpZiAocmVzb3VyY2VUeXBlLmhhc093blByb3BlcnR5KCdmYWxsYmFjaycpICYmIHVzZUZhbGxiYWNrKSB7XHJcbiAgICAgIGlmIChyZXNvdXJjZVR5cGUuZmFsbGJhY2suaW5kZXhPZignJWRvbWFpbiUnKSkge1xyXG4gICAgICAgIHVybCA9IHJlc291cmNlVHlwZS5mYWxsYmFjay5yZXBsYWNlKC8oJWRvbWFpbiUpL2csIGNvbmZpZ3VyYXRpb24uZG9tYWluKSArIHR5cGU7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdXJsID0gcmVzb3VyY2VUeXBlLmZhbGxiYWNrICsgdHlwZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICB1cmwgPSByZXNvdXJjZVR5cGUucHJlZml4ICsgY29uZmlndXJhdGlvbi5kb21haW4gKyByZXNvdXJjZVR5cGUuc3VmZml4O1xyXG4gIH1cclxuXHJcbiAgLy8gY29uc29sZS5sb2codXJsKTtcclxuXHJcbiAgcmV0dXJuIHVybDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlR1VJRCgpIHtcclxuXHJcbiAgZnVuY3Rpb24gczQoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcclxuICAgICAgLnRvU3RyaW5nKDE2KVxyXG4gICAgICAuc3Vic3RyaW5nKDEpO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHM0KCkgKyBzNCgpICsgJy0nICsgczQoKSArICctJyArIHM0KCkgKyAnLScgKyBzNCgpICsgJy0nICsgczQoKSArIHM0KCkgKyBzNCgpO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVzZXJJZGVudGl0eURvbWFpbih1cmwpIHtcclxuICBsZXQgZGl2aWRlZFVSTCA9IGRpdmlkZVVSTCh1cmwpO1xyXG4gIGxldCBzcGxpdGVkRG9tYWluID0gZGl2aWRlZFVSTC5kb21haW4uc3BsaXQoJy4nKTtcclxuICBsZXQgc3BsaXRlZExlbmd0aCA9IHNwbGl0ZWREb21haW4ubGVuZ3RoO1xyXG4gIGlmIChzcGxpdGVkTGVuZ3RoID09IDEpIHtcclxuICAgIHJldHVybiBzcGxpdGVkRG9tYWluW3NwbGl0ZWRMZW5ndGggLSAxXTtcclxuICB9XHJcbiAgbGV0IGRvbWFpbiA9IHNwbGl0ZWREb21haW5bc3BsaXRlZExlbmd0aCAtIDJdICsgJy4nICsgc3BsaXRlZERvbWFpbltzcGxpdGVkTGVuZ3RoIC0gMV07XHJcbiAgcmV0dXJuIGRvbWFpbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIFVSTCBpcyBmcm9tIGEgYmFja2VuZCBzZXJ2aWNlXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gdXJsICAgICBVUkwgdG8gYmUgcHJvY2Vzc2VkXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQmFja2VuZFNlcnZpY2VVUkwodXJsKSB7XHJcbiAgbGV0IGRpdmlkZWRVUkwgPSBkaXZpZGVVUkwodXJsKTtcclxuICBsZXQgc3BsaXRlZERvbWFpbiA9IGRpdmlkZWRVUkwuZG9tYWluLnNwbGl0KCcuJyk7XHJcbiAgbGV0IGJhY2tlbmRTY2hlbWVzID0gWydkb21haW4nLCdnbG9iYWwnLCdkb21haW4taWRwJ107IC8vIHNob3VsZCBiZSBkZWZpbmVkIGluIHRoZSBydW50aW1lIGNvbmZpZ3VyYXRpb25cclxuICBsZXQgYmFja2VuZFN1YkRvbWFpbnMgPSBbJ3JlZ2lzdHJ5JywnbXNnLW5vZGUnXTsgLy8gc2hvdWxkIGJlIGRlZmluZWQgaW4gdGhlIHJ1bnRpbWUgY29uZmlndXJhdGlvblxyXG4gIGxldCBzdWJEb21haW47XHJcblxyXG4gIGlmIChzcGxpdGVkRG9tYWluLmxlbmd0aCA+IDEpIHtcclxuICAgIHN1YkRvbWFpbiA9IHNwbGl0ZWREb21haW5bMF07XHJcbiAgfVxyXG5cclxuICBpZiAoc3ViRG9tYWluICYmIGJhY2tlbmRTdWJEb21haW5zLmluZGV4T2Yoc3ViRG9tYWluKSlcclxuICAgcmV0dXJuIHRydWU7XHJcblxyXG4gIGlmIChkaXZpZGVkVVJMLnR5cGUpXHJcbiAgIHJldHVybiAoYmFja2VuZFNjaGVtZXMuaW5kZXhPZihkaXZpZGVkVVJMLnR5cGUpICE9PSAtMSk7XHJcblxyXG4gIHJldHVybiBmYWxzZTtcclxufVxyXG4iXX0=

//# sourceMappingURL=Runtime.js.map
",
      "sourceCodeClassname": "Runtime",
      "encoding": "base64",
      "signature": ""
    },
    "cguid": "3-0cf9c1b9-d70f-b7bd-dc60-23cc6649f3370",
    "type": "Runtimes",
    "version": 2.2000000000000006,
    "description": "Description of Runtime",
    "objectName": "Runtime",
    "configuration": {},
    "runtimeType": "browser",
    "hypertyCapabilities": {
      "mic": true,
      "camera": true,
      "sensor": false,
      "webrtc": true,
      "ortc": true
    },
    "protocolCapabilities": {
      "http": true,
      "https": true,
      "ws": true,
      "wss": true,
      "coap": false,
      "datachannel": false
    },
    "sourcePackageURL": "/sourcePackage",
    "language": "javascript",
    "signature": "",
    "messageSchemas": "",
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
}